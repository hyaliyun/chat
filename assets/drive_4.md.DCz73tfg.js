import{_ as h,o as n,c as r,a as t,m as c,t as d,C as g,M as _,U as y,f as u,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function A(i,e,l,m,s,a){return n(),r("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(d(l.poem.solution),1)])])])}const R=h(k,[["render",A],["__scopeId","data-v-011aa8a2"]]),F=JSON.parse('[{"question":"Write a function in Python that takes an integer `n` and returns a list containing the first `n` prime numbers. Your solution should be efficient and consider the time complexity of the algorithm used to find prime numbers.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def first_n_primes(n): Returns a list of the first n prime numbers. primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes"},{"question":"Write a Python function named `merge_and_sort` that takes two lists of integers as input. The function should merge the two lists into one and sort the resulting list in ascending order. The function should handle cases where the input lists are empty or contain negative numbers. **Function signature:** ```python def merge_and_sort(list1: List[int], list2: List[int]) -> List[int]: pass ``` **Examples:** ```python # Example 1 list1 = [1, 4, 6] list2 = [2, 5, 3] print(merge_and_sort(list1, list2)) # Output: [1, 2, 3, 4, 5, 6] # Example 2 list1 = [-1, -4, 0] list2 = [3, -2, 1] print(merge_and_sort(list1, list2)) # Output: [-4, -2, -1, 0, 1, 3] # Example 3 list1 = [] list2 = [5, 7, 3] print(merge_and_sort(list1, list2)) # Output: [3, 5, 7] ``` # Constraints: - The lists `list1` and `list2` can contain up to 1000 integers each. - Each integer in the lists can range from `-10^6` to `10^6`.","solution":"from typing import List def merge_and_sort(list1: List[int], list2: List[int]) -> List[int]: Merges two lists of integers and returns the sorted list. :param list1: First list of integers. :param list2: Second list of integers. :return: Merged and sorted list of integers. merged_list = list1 + list2 merged_list.sort() return merged_list"},{"question":"Given an integer, determine whether it is a T-prime or not. A T-prime is a number that is the square of a prime number. For example, 4 is a T-prime because it is equal to 2^2, where 2 is a prime number. # Input - A single integer n, where 1 leq n leq 10^{12}. # Output - Output \\"YES\\" if the number is a T-prime. Otherwise, output \\"NO\\". # Example Input 49 Output YES Input 10 Output NO","solution":"import math def is_prime(n): Check if a number n is a prime number if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_t_prime(n): Check if a number n is a T-prime if n <= 0: return \\"NO\\" sqrt_n = int(math.isqrt(n)) if sqrt_n * sqrt_n == n and is_prime(sqrt_n): return \\"YES\\" return \\"NO\\""},{"question":"Create a Python function that receives a string and returns a new string where every duplicate character is removed, but only keeps the first occurrence of each character. Your function should maintain the order of characters as they first appear in the input. Make sure to handle both uppercase and lowercase characters as distinct. Example input/output: ```python # Example input input_str = \\"Google\\" # Expected output output_str = \\"Gogle\\" ``` ```python # Example input input_str = \\"Development\\" # Expected output output_str = \\"Devlopmnt\\" ```","solution":"def remove_duplicates(input_str): Returns a new string where every duplicate character is removed, but only keeps the first occurrence of each character. Maintains the order of characters as they first appear in the input. seen = set() output_str = [] for char in input_str: if char not in seen: seen.add(char) output_str.append(char) return \'\'.join(output_str)"},{"question":"Write a function that takes an array of integers and finds the index of the first occurrence of the maximum value in the array. If the maximum value occurs multiple times, return the smallest index at which it appears. Example input: arr = [1, 3, 7, 3, 7, 2, 7] Example output: 2","solution":"def find_first_max_index(arr): Returns the index of the first occurrence of the maximum value in the array. if not arr: return -1 max_val = max(arr) return arr.index(max_val)"},{"question":"Develop a function in Python that takes a list of integers and an integer target as inputs and returns a list of pairs from the given list that sum up to the target. Each pair should be represented as a tuple. The order of pairs in the output list does not matter, but the integers within each pair must be in ascending order. Additionally, ensure that no duplicate pairs are included, regardless of their order in the input list. For example, given the list [1, 2, 3, 4, 5, 6] and the target 7, the function should return [(1, 6), (2, 5), (3, 4)].","solution":"def find_pairs(nums, target): Returns a list of pairs from nums that sum up to the target. The pairs are tuples, and each tuple\'s numbers are in ascending order. No duplicate pairs are included in the final result. nums_set = set(nums) pairs = set() for num in nums: complement = target - num if complement in nums_set: pair = tuple(sorted((num, complement))) if pair not in pairs: pairs.add(pair) return list(pairs)"},{"question":"Write a function that takes an array of integers as input, and returns a new array where each element at index *i* is the product of all the numbers in the original array except the one at *i*. Your solution should not use division and should have a time complexity of O(n). Example: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [0, 1, 2, 3, 4] Output: [24, 0, 0, 0, 0] The function signature might look like: ```python def product_except_self(nums: List[int]) -> List[int]: # your code here ``` where `nums` is a list of integers (both positive and negative, including zero).","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Create a Python program that reads a file containing a list of integers, one per line. Implement a function to identify all prime numbers from the list and write them into a new file. Then, create another function to read this new file, sum all the prime numbers, and return the sum along with the count of total prime numbers identified. Ensure the program handles file errors gracefully and includes informative error messages for issues such as missing files or incorrect content formatting.","solution":"import os def read_integers_from_file(file_path): Reads a list of integers from the specified file. Each line in the file should contain one integer. Returns a list of integers. Raises ValueError if the file contains non-integer values. integers = [] try: with open(file_path, \'r\') as file: for line in file: line = line.strip() if line: try: integers.append(int(line)) except ValueError as e: raise ValueError(f\\"Non-integer value encountered: {line}\\") except FileNotFoundError: raise FileNotFoundError(f\\"The file {file_path} was not found.\\") except IOError: raise IOError(f\\"Unable to read the file {file_path}.\\") return integers def is_prime(n): Checks if the given number is a prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def write_primes_to_file(integers, file_path): Writes all prime numbers from the given list to the specified file. try: with open(file_path, \'w\') as file: for number in integers: if is_prime(number): file.write(f\\"{number}n\\") except IOError: raise IOError(f\\"Unable to write to the file {file_path}.\\") def sum_and_count_primes(file_path): Reads prime numbers from the specified file, sums them, and returns the sum and count. prime_sum = 0 count = 0 try: with open(file_path, \'r\') as file: for line in file: line = line.strip() if line: try: number = int(line) prime_sum += number count += 1 except ValueError as e: raise ValueError(f\\"Non-integer value encountered in the primes file: {line}\\") except FileNotFoundError: raise FileNotFoundError(f\\"The file {file_path} was not found.\\") except IOError: raise IOError(f\\"Unable to read the file {file_path}.\\") return prime_sum, count"},{"question":"Given a string of text, your task is to write a function that identifies all the words that are palindromes and returns a list of these words. A palindrome is a word that reads the same backward as forward. You should ignore case and consider only alphabetic characters in your comparisons. Use efficient string manipulation techniques to accomplish this.","solution":"import re def find_palindromes(text): Returns a list of palindromic words from the given string. # Normalize the text by converting to lower case and removing non-alphabetic characters words = re.findall(r\'b[a-zA-Z]+b\', text.lower()) # Identify palindromic words palindromic_words = [word for word in words if word == word[::-1]] return palindromic_words"},{"question":"Create a class in Python to represent a student with the attributes \'name\', \'age\', and \'grades\', which is a list of integer grades. The class should include methods to: - Add a new grade to the student\'s grade list. - Calculate and return the average grade. - Find the maximum and minimum grades. - Return a formatted string representing the student\'s information. Additionally, write functions to compare two student objects based on their average grade and to return a new student object that merges the grades of two students, keeping the name and age from the first student.","solution":"class Student: def __init__(self, name, age, grades=None): self.name = name self.age = age self.grades = grades if grades is not None else [] def add_grade(self, grade): Adds a new grade to the student\'s grade list. self.grades.append(grade) def average_grade(self): Calculates and returns the average grade. if not self.grades: return 0 return sum(self.grades) / len(self.grades) def max_grade(self): Finds and returns the maximum grade. if not self.grades: return None return max(self.grades) def min_grade(self): Finds and returns the minimum grade. if not self.grades: return None return min(self.grades) def __str__(self): Returns a formatted string representing the student\'s information. return f\\"Student(name={self.name}, age={self.age}, grades={self.grades})\\" def compare_students(student1, student2): Compares two student objects based on their average grade. Returns: -1 if student1 has a lower average, 0 if equals, and 1 if higher. avg1 = student1.average_grade() avg2 = student2.average_grade() if avg1 < avg2: return -1 elif avg1 == avg2: return 0 else: return 1 def merge_students(student1, student2): Returns a new student object that merges the grades of two students, keeping the name and age from the first student. merged_grades = student1.grades + student2.grades return Student(name=student1.name, age=student1.age, grades=merged_grades)"},{"question":"Implement a Python function `find_missing_number(nums)` that receives a list of integers containing a sequence of numbers from 1 to n with exactly one number missing. The function should identify and return the missing number. Write the function such that it operates in linear time complexity. **Sample Input** ```python nums = [1, 2, 4, 5] ``` **Sample Output** ```python 3 ```","solution":"def find_missing_number(nums): Returns the missing number in the sequence from 1 to n given nums with one number missing. n = len(nums) + 1 # Calculate the expected sum of numbers from 1 to n using the formula n * (n + 1) // 2 expected_sum = n * (n + 1) // 2 # Calculate the actual sum of numbers in the nums list actual_sum = sum(nums) # The missing number is the difference between the expected sum and the actual sum return expected_sum - actual_sum"},{"question":"Write a program that simulates a simplified banking system. The program should support creating new bank accounts, deleting existing accounts, and processing transactions such as deposits, withdrawals, and transfers between accounts. Each account should have a unique account number, owner name, and balance. The program should also be able to generate a statement for a specified account that shows all the transactions that have occurred within a given date range. Ensure that the program handles edge cases such as overdrafts and invalid account numbers gracefully.","solution":"import datetime class Account: account_counter = 1000 def __init__(self, owner_name): self.account_number = Account.account_counter self.owner_name = owner_name self.balance = 0.0 self.transactions = [] Account.account_counter += 1 def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount self.transactions.append((datetime.datetime.now(), \'deposit\', amount)) return self.balance def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.balance -= amount self.transactions.append((datetime.datetime.now(), \'withdrawal\', amount)) return self.balance def transfer(self, amount, other_account): if amount <= 0: raise ValueError(\\"Transfer amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.withdraw(amount) other_account.deposit(amount) self.transactions.append((datetime.datetime.now(), \'transfer\', amount, other_account.account_number)) other_account.transactions.append((datetime.datetime.now(), \'transfer\', amount, self.account_number)) def get_statement(self, start_date, end_date): statement = [t for t in self.transactions if start_date <= t[0] <= end_date] return statement class BankingSystem: def __init__(self): self.accounts = {} def create_account(self, owner_name): account = Account(owner_name) self.accounts[account.account_number] = account return account.account_number def delete_account(self, account_number): if account_number in self.accounts: del self.accounts[account_number] else: raise ValueError(\\"Account number does not exist.\\") def get_account(self, account_number): if account_number in self.accounts: return self.accounts[account_number] else: raise ValueError(\\"Account number does not exist.\\")"},{"question":"Devise a function that takes an array of integers as input and rearranges the elements in a way that places all negative numbers before all positive numbers, while maintaining the relative order of the negative numbers and the positive numbers. Note that the input array may contain zeros and should be treated as positive for this exercise. You must accomplish this with a single pass of the array and constant auxiliary space.","solution":"def rearrange_array(arr): Rearranges the elements of the given array such that all negative numbers come before all positive numbers while maintaining the relative order of both. Parameters: arr (list): A list of integers Returns: list: A new list where all negative numbers precede all positive numbers n = len(arr) if n == 0: return arr result = [] for num in arr: if num < 0: result.append(num) for num in arr: if num >= 0: result.append(num) return result"},{"question":"Create a Python function that receives a string consisting of comma-separated integers and returns a list of these integers sorted in ascending order. The function should handle input validation by ensuring all elements are numeric and should raise an appropriate exception if any non-numeric element is found. Additionally, optimize the function to perform the sorting operation with a time complexity of O(n log n).","solution":"def sort_comma_separated_integers(input_str): Receives a string of comma-separated integers, validates the input, converts valid integers into a list, sorts the list, and returns it. :param input_str: A string of comma-separated integers. :return: A list of sorted integers. :raises ValueError: If any non-numeric element is found in the input string. try: # Split the string by commas, strip whitespace, and convert to integers int_list = [int(x.strip()) for x in input_str.split(\',\')] except ValueError: # Raise an error if conversion to integer fails for any element raise ValueError(\\"Input string contains non-numeric elements.\\") # Sort the list in ascending order sorted_list = sorted(int_list) return sorted_list"},{"question":"Write a function that accepts a list of strings and returns a dictionary where the keys are the strings and the values are the lengths of those strings. The function should have an optional keyword argument `min_length` which filters out strings shorter than the specified length (default is 0). def string_lengths(strings, min_length=0): pass","solution":"def string_lengths(strings, min_length=0): Accepts a list of strings and returns a dictionary where the keys are the strings and the values are the lengths of those strings. Filters out strings shorter than min_length. Parameters: - strings (list of str): List of strings to measure. - min_length (int): Minimum length of strings to include (default is 0). Returns: - dict: Dictionary with strings as keys and their lengths as values. return {string: len(string) for string in strings if len(string) >= min_length}"},{"question":"Create a function in Python that takes a string as input and returns a dictionary with two keys: \'alphabet_count\' and \'number_count\'. The value of \'alphabet_count\' should be the total number of alphabetic characters (both uppercase and lowercase) in the string, and the value of \'number_count\' should be the total number of numeric characters in the string. For any non-alphanumeric characters, the function should ignore them. The function should handle edge cases such as an empty string, and maintain a case-insensitive count for alphabet characters. Example: ``` Input: \\"Hello World! 123\\" Output: {\'alphabet_count\': 10, \'number_count\': 3} Input: \\"\\" Output: {\'alphabet_count\': 0, \'number_count\': 0} ```","solution":"def count_alphabets_and_numbers(input_string): Takes a string as input and returns a dictionary with two keys: \'alphabet_count\' and \'number_count\'. The value of \'alphabet_count\' is the total number of alphabetic characters in the string, and the value of \'number_count\' is the total number of numeric characters in the string. Non-alphanumeric characters are ignored. :param input_string: str :return: dict alphabet_count = 0 number_count = 0 for char in input_string: if char.isalpha(): alphabet_count += 1 elif char.isdigit(): number_count += 1 return {\'alphabet_count\': alphabet_count, \'number_count\': number_count}"},{"question":"Create a Python script that reads the file \'transactions.csv\', which contains transaction records with the fields: `transaction_id`, `timestamp`, `customer_id`, `amount`, and `category`. Write a function to load the data into a pandas DataFrame. Then perform the following tasks: 1. Write a function to determine the total number of unique customers. 2. Write a function to calculate the total transaction amount for each category. 3. Identify and visualize the top 5 customers who have spent the most money. 4. Write a function to find the peak hour for transactions each day. 5. Use the matplotlib library to create visualizations for the above insights. Additionally, write a function to remove transactions that are outliers based on the transaction amount and provide a brief explanation for your outlier detection and treatment method.","solution":"import pandas as pd import matplotlib.pyplot as plt import numpy as np def load_transactions(file_path): Load the transaction data into a pandas DataFrame. return pd.read_csv(file_path) def unique_customers(df): Determine the total number of unique customers. return df[\'customer_id\'].nunique() def total_transaction_amount_by_category(df): Calculate the total transaction amount for each category. return df.groupby(\'category\')[\'amount\'].sum() def top_5_customers_by_spending(df): Identify the top 5 customers who have spent the most money. top_customers = df.groupby(\'customer_id\')[\'amount\'].sum().nlargest(5) return top_customers def peak_hour_per_day(df): Find the peak hour for transactions each day. df[\'hour\'] = pd.to_datetime(df[\'timestamp\']).dt.hour df[\'date\'] = pd.to_datetime(df[\'timestamp\']).dt.date peak_hours = df.groupby(\'date\')[\'hour\'].apply(lambda x: x.value_counts().idxmax()) return peak_hours def visualize_data(df): Create visualizations for the data insights using matplotlib. # Total transaction amount by category category_amounts = total_transaction_amount_by_category(df) category_amounts.plot(kind=\'bar\', title=\'Total Transaction Amount by Category\') plt.xlabel(\'Category\') plt.ylabel(\'Total Amount\') plt.show() # Top 5 customers by spending top_5_customers = top_5_customers_by_spending(df) top_5_customers.plot(kind=\'bar\', title=\'Top 5 Customers by Spending\') plt.xlabel(\'Customer ID\') plt.ylabel(\'Total Amount Spent\') plt.show() def remove_outliers(df): Remove transactions that are outliers based on the transaction amount. Use IQR (Interquartile Range) method to detect outliers. Q1 = df[\'amount\'].quantile(0.25) Q3 = df[\'amount\'].quantile(0.75) IQR = Q3 - Q1 lower_bound = Q1 - 1.5 * IQR upper_bound = Q3 + 1.5 * IQR return df[(df[\'amount\'] >= lower_bound) & (df[\'amount\'] <= upper_bound)]"},{"question":"Write a Python function that takes in a list of strings and returns a new list where each string is reversed, but the order of words in the list remains the same. For example, given the input `[\'hello\', \'world\']`, the function should return `[\'olleh\', \'dlrow\']`. # Requirements: - The function should be named `reverse_strings`. - The function should take in one argument: - `str_list`: a list of strings (1 <= len(str_list) <= 10^5, 1 <= len(each string) <= 1000) - The function should return a list of strings where each string is reversed. # Example ```python reverse_strings([\'hello\', \'world\']) # [\'olleh\', \'dlrow\'] reverse_strings([\'foobar\', \'python\']) # [\'raboof\', \'nohtyp\'] reverse_strings([\'racecar\', \'madam\']) # [\'racecar\', \'madam\'] ``` # Constraints: - You may assume that all characters in the input strings are ASCII characters. - Focus on performance and aim for a solution that processes the input list in linear time. # Hints: - Consider using Python\'s slicing capabilities to reverse each string in the list directly.","solution":"def reverse_strings(str_list): Takes a list of strings and returns a new list where each string is reversed, but the order of words in the list remains the same. :param str_list: List of strings :return: List of reversed strings return [s[::-1] for s in str_list]"},{"question":"Create a Python function that takes a string as input and checks if it is a valid palindrome, considering only alphanumeric characters and ignoring cases. The function should return a boolean value. Implement this without using built-in functions like .reverse() or sophisticated libraries and ensure it processes the input in O(n) time complexity.","solution":"def is_palindrome(s): Checks if the given string is a valid palindrome considering only alphanumeric characters and ignoring cases. Args: s (str): The input string. Returns: bool: True if the string is a palindrome, False otherwise. n = len(s) left, right = 0, n - 1 while left < right: # Move left index to the next valid alphanumeric character while left < right and not s[left].isalnum(): left += 1 # Move right index to the previous valid alphanumeric character while left < right and not s[right].isalnum(): right -= 1 # Check characters ignoring their cases if s[left].lower() != s[right].lower(): return False left += 1 right -= 1 return True"},{"question":"Write a function in Python that, given a list of integers, returns a dictionary with the integers as keys and their frequency as values. Ensure the implementation is efficient in both time and space complexity. Additionally, sort the dictionary by value in descending order.","solution":"def frequency_count(lst): Returns a dictionary with the integers as keys and their frequency as values, sorted by frequency in descending order. from collections import defaultdict freq_dict = defaultdict(int) for num in lst: freq_dict[num] += 1 sorted_freq_dict = dict(sorted(freq_dict.items(), key=lambda item: item[1], reverse=True)) return sorted_freq_dict"},{"question":"You are given a list of integers representing stock prices on different days. Write a Python function that calculates the maximum profit you can achieve by buying and selling the stock only once. If no profit can be made, return 0. Ensure your function handles edge cases such as empty lists or lists with only one price.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling the stock once. If no profit can be made, returns 0. :param prices: List of integers representing stock prices on different days :return: Integer maximum profit if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Implement a function that takes a list of integers and returns the running median after each insertion of an integer into the list. The running median is the median of the numbers seen so far. If the count of numbers is odd, the median is the middle number; if even, it is the average of the two middle numbers. Example: Input: [2, 1, 5, 7, 2, 0, 5] Output: [2, 1.5, 2, 3.5, 2, 2, 2] You may assume the input list contains at least one integer and fits into memory.","solution":"import heapq class MedianFinder: def __init__(self): self.min_heap = [] self.max_heap = [] def add_num(self, num): heapq.heappush(self.max_heap, -num) heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) if len(self.max_heap) < len(self.min_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) def find_median(self): if len(self.max_heap) > len(self.min_heap): return -self.max_heap[0] return (-self.max_heap[0] + self.min_heap[0]) / 2.0 def running_median(nums): result = [] mf = MedianFinder() for num in nums: mf.add_num(num) result.append(mf.find_median()) return result"},{"question":"A programming language has a hypothetical data structure called a \\"FlatMap\\" that allows only key-value pairs with integer keys and integer values. A FlatMap supports three operations: 1. `put(key, value)`: Insert a new key-value pair into the FlatMap. If the key already exists, update the value. 2. `get(key)`: Retrieve the value for the given key. If the key does not exist, return 0. 3. `sumRange(startKey, endKey)`: Return the sum of all values for keys in the range [startKey, endKey] inclusive. If no keys exist in the given range, return 0. Implement a FlatMap class in Python with these three methods. The class should be efficient enough to handle a large number of operations. **Example:** ```python fm = FlatMap() fm.put(1, 5) fm.put(2, 3) fm.put(3, 8) fm.put(1, 2) # Updates the value for key 1 print(fm.get(1)) # Output: 2 print(fm.get(2)) # Output: 3 print(fm.get(10)) # Output: 0 because the key 10 does not exist print(fm.sumRange(1, 2)) # Output: 5 (2 + 3) print(fm.sumRange(2, 3)) # Output: 11 (3 + 8) print(fm.sumRange(4, 10)) # Output: 0 because no keys fall in the range ``` Your task is to complete the following class definition: ```python class FlatMap: def __init__(self): # Initialize your data structure here pass def put(self, key: int, value: int) -> None: # Insert or update the key-value pair in the FlatMap pass def get(self, key: int) -> int: # Retrieve the value for a given key or return 0 if not found pass def sumRange(self, startKey: int, endKey: int) -> int: # Sum all values for keys in the range [startKey, endKey] inclusive pass ```","solution":"class FlatMap: def __init__(self): # Initialize the data structure with a dictionary self.data = {} def put(self, key: int, value: int) -> None: # Insert or update the key-value pair in the FlatMap self.data[key] = value def get(self, key: int) -> int: # Retrieve the value for a given key or return 0 if not found return self.data.get(key, 0) def sumRange(self, startKey: int, endKey: int) -> int: # Sum all values for keys in the range [startKey, endKey] inclusive return sum(value for key, value in self.data.items() if startKey <= key <= endKey)"},{"question":"小明有一個整數列表，其中包含了若干個重複的數字。請設計一個函數來篩選出列表中只出現過一次的數字（獨特的數字），並以升序排列後返回這些數字的列表。 示例輸入： lists = [4, 5, 7, 5, 8, 9, 7, 4, 10] 預期輸出： [8, 9, 10] 提示： 1. 你可以使用字典來追蹤每個數字出現的次數。","solution":"def find_unique_numbers(lists): Returns a sorted list of unique numbers that appear only once in the input list. Args: lists (list): A list of integers containing possibly duplicate numbers. Returns: list: A sorted list of integers that appear only once in the input list. from collections import Counter # Count the occurrences of each number count = Counter(lists) # Filter numbers that appear only once and sort them unique_numbers = sorted([num for num, freq in count.items() if freq == 1]) return unique_numbers"},{"question":"Create a function that takes in a list of words and returns a dictionary. Each unique word in the list should be a key in the dictionary, and the value should be the number of times that word appears in the list in reverse alphabetical order. Implement the function such that it efficiently handles large lists and accounts for case insensitivity.","solution":"def word_count(words): Takes a list of words and returns a dictionary where each unique word is a key and the value is the number of times that word appears in the list, sorted in reverse alphabetical order. The counting is case insensitive. from collections import Counter # Convert all words to lower case words_lower = [word.lower() for word in words] # Count the occurrence of each word word_counter = Counter(words_lower) # Create a sorted dictionary in reverse alphabetical order sorted_word_count = dict(sorted(word_counter.items(), key=lambda item: item[0], reverse=True)) return sorted_word_count"},{"question":"Write a function that calculates the factorial of a given non-negative integer using recursion. If the input is a negative integer, the function should return `None`. The factorial of 0 is defined as 1.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n using recursion. If n is a negative integer, returns None. :param n: Non-negative integer :return: Factorial of n or None for negative input if n < 0: return None elif n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Optimize the given Python function to calculate the nth Fibonacci number using an iterative approach instead of the recursive method. Explain the improvements in your comments, focusing on both time and space complexity. def fibonacci_recursive(n): if n <= 1: return n else: return fibonacci_recursive(n-1) + fibonacci_recursive(n-2) # Optimized Iterative Approach def fibonacci_iterative(n): # Start with initial two Fibonacci numbers a, b = 0, 1 # Iterate from 2 to n for _ in range(2, n + 1): # Update a and b to the next Fibonacci numbers a, b = b, a + b # Return the nth Fibonacci number return b if n > 0 else a","solution":"def fibonacci_iterative(n): Returns the nth Fibonacci number using an iterative approach. Improvements: - Time Complexity: O(n), since we are calculating each Fibonacci number once in a single pass. - Space Complexity: O(1), since we are using only a constant amount of space. if n <= 1: return n a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Develop a function that takes a block of text and performs a frequency analysis of the words in the text. The function should then display a horizontal bar chart that represents the most frequently used words. The program should output: - A list of the top 10 most frequently used words along with their frequency counts. - A horizontal bar chart where each bar represents a word’s frequency count. Requirements: 1. Ignore case. Treat \\"word\\", \\"Word\\", and \\"WORD\\" as the same word. 2. Ignore punctuation marks (e.g., commas, periods, exclamation points). 3. The function should take a single string parameter containing the text block and output the frequency list and bar chart. 4. The horizontal bar chart should use asterisks (*) to represent frequency. Example: Input: ``` \\"Hello world! This is an example example text. Hello again, world world world!\\" ``` Output: ``` Word Frequency world 4 hello 2 example 2 this 1 is 1 an 1 text 1 again 1 Horizontal Bar Chart: world | **** hello | ** example | ** this | * is | * an | * text | * again | * ``` Use the following text for demonstration: ``` \\"It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way.\\" ```","solution":"import re from collections import Counter def frequency_analysis(text): # Convert to lowercase and remove punctuation text = re.sub(r\'[^ws]\', \'\', text.lower()) # Split the text into words words = text.split() # Get the frequency of each word word_freq = Counter(words) # Get the 10 most common words most_common_words = word_freq.most_common(10) # Output the word frequencies print(\\"Word Frequency\\") for word, freq in most_common_words: print(f\\"{word:<12} {freq}\\") # Output the horizontal bar chart print(\\"nHorizontal Bar Chart:\\") for word, freq in most_common_words: print(f\\"{word:<8} | {\'*\' * freq}\\") # Example usage text = ( \\"It was the best of times, it was the worst of times, it was the age of wisdom, \\" \\"it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, \\" \\"it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, \\" \\"we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way.\\" ) frequency_analysis(text)"},{"question":"You are given a list of people\'s names and their birthdates. Your task is to write a program that processes this list and outputs: 1. The name of the oldest person. 2. The name of the youngest person. 3. A list of people who were born in the same month, grouped by month. The input will be a list of tuples where each tuple contains a name and a birthdate in the format (name, \'YYYY-MM-DD\'). For example, given the input: [(\'Alice\', \'1990-05-24\'), (\'Bob\', \'1985-12-30\'), (\'Charlie\', \'1992-05-15\'), (\'David\', \'2000-08-05\')] Your program should produce the following output: Oldest person: Bob Youngest person: David People born in the same month: - May: Alice, Charlie - December: Bob - August: David","solution":"from datetime import datetime from collections import defaultdict def process_birthdays(people): Processes a list of people\'s names and birthdates, and returns: 1. The name of the oldest person. 2. The name of the youngest person. 3. A list of people who were born in the same month, grouped by month. Args: people (list of tuples): A list where each tuple contains a name and a birthdate in the format (name, \'YYYY-MM-DD\') Returns: tuple: (oldest_person, youngest_person, same_month_groups) oldest_person (str): The name of the oldest person. youngest_person (str): The name of the youngest person. same_month_groups (dict): A dictionary where the keys are month names and the values are lists of names of people born in that month. if not people: return None, None, {} # Parse the birthdates and sort the list by birthdates people_sorted = sorted(people, key=lambda x: datetime.strptime(x[1], \'%Y-%m-%d\')) oldest_person = people_sorted[0][0] youngest_person = people_sorted[-1][0] # Group people by birth month month_names = [\'January\', \'February\', \'March\', \'April\', \'May\', \'June\', \'July\', \'August\', \'September\', \'October\', \'November\', \'December\'] same_month_groups = defaultdict(list) for name, birthdate in people: birth_month = datetime.strptime(birthdate, \'%Y-%m-%d\').month same_month_groups[month_names[birth_month - 1]].append(name) return oldest_person, youngest_person, same_month_groups"},{"question":"Write a Python function that takes a list of integers and returns a new list containing the absolute difference between each element and the subsequent one. The last element should remain unchanged. For example, given the list [2, 4, 6, 8], the function should return [2, 2, 2, 8].","solution":"def absolute_differences(lst): Takes a list of integers and returns a new list containing the absolute difference between each element and the subsequent one. The last element remains unchanged. Parameters: lst (list of int): The input list of integers. Returns: list of int: A list of absolute differences with the last element unchanged. if not lst: # If the list is empty, return an empty list return [] result = [] for i in range(len(lst) - 1): result.append(abs(lst[i] - lst[i + 1])) result.append(lst[-1]) # Append the last element unchanged return result"},{"question":"Given a list of tuples representing products where each tuple contains a product name, price, and quantity in stock, write a Python function that filters the products based on a minimum price and a minimum stock quantity. The function should return a sorted list of product names where the criteria are met. The sorting should be done primarily by product name in ascending order. ```python products = [ (\\"Laptop\\", 1200, 5), (\\"Smartphone\\", 800, 10), (\\"Monitor\\", 300, 7), (\\"Keyboard\\", 100, 15), (\\"Mouse\\", 50, 25) ] # Example usage: # filter_products(products, min_price=100, min_stock=10) # Should return: [\'Keyboard\', \'Smartphone\'] ``` Your task is to: 1. Implement the `filter_products` function. 2. Write a test suite with at least three different test cases to validate the correctness of your function.","solution":"def filter_products(products, min_price, min_stock): Filters and sorts products based on a minimum price and minimum stock quantity. Args: products (list of tuple): The list of products where each product is represented as a tuple (name, price, quantity). min_price (int): The minimum price threshold. min_stock (int): The minimum stock quantity threshold. Returns: list: Sorted list of product names that meet the given criteria. # Filter products based on the given criteria filtered_products = [name for name, price, quantity in products if price >= min_price and quantity >= min_stock] # Sort the filtered product names filtered_products.sort() return filtered_products"},{"question":"Write a function to determine if a given string is a valid license plate number. The string should follow these conditions: - It must start with three uppercase letters (A-Z). - This is followed immediately by three digits (0-9). - The total length of the string should be exactly 6 characters. For example: - Valid license plates: \\"ABC123\\", \\"XYZ789\\" - Invalid license plates: \\"abc123\\", \\"ABCD1234\\", \\"123XYZ\\" Write the function `is_valid_license_plate(plate: str) -> bool` that takes a string and returns `True` if it is a valid license plate, otherwise returns `False`. ```python def is_valid_license_plate(plate: str) -> bool: if len(plate) != 6: return False for i in range(3): if not plate[i].isupper(): return False for i in range(3, 6): if not plate[i].isdigit(): return False return True # Test Cases print(is_valid_license_plate(\\"ABC123\\")) # True print(is_valid_license_plate(\\"XYZ789\\")) # True print(is_valid_license_plate(\\"abc123\\")) # False print(is_valid_license_plate(\\"ABCD1234\\")) # False print(is_valid_license_plate(\\"123XYZ\\")) # False ```","solution":"def is_valid_license_plate(plate: str) -> bool: Determines if the given string is a valid license plate number. A valid license plate must have: - Exactly 6 characters. - The first three characters should be uppercase letters (A-Z). - The last three characters should be digits (0-9). Args: plate (str): The string to check for validity. Returns: bool: True if the string is valid as a license plate, False otherwise. if len(plate) != 6: return False if not (plate[:3].isupper() and plate[:3].isalpha()): return False if not plate[3:].isdigit(): return False return True"},{"question":"Write a Python function that takes a string as input and returns a dictionary with the frequency of each character in the string. For this problem, ignore the case (i.e., count \'a\' and \'A\' as the same character) and exclude non-alphabetic characters. Provide appropriate error handling for the case where the input is not a string.","solution":"def character_frequency(input_string): Returns a dictionary with the frequency of each alphabetic character in the input string, ignoring case and excluding non-alphabetic characters. if not isinstance(input_string, str): raise ValueError(\\"Input should be a string\\") frequency_dict = {} for char in input_string: if char.isalpha(): char = char.lower() if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Write a Python function that takes a list of dictionaries and returns a dictionary with counts of how many times each value appears for a given key. For example: ```python input_list = [{\'color\': \'red\'}, {\'color\': \'blue\'}, {\'color\': \'red\'}, {\'color\': \'green\'}, {\'color\': \'blue\'}, {\'color\': \'blue\'}] ``` The function should output: ```python {\'red\': 2, \'blue\': 3, \'green\': 1} ```","solution":"def count_values(input_list, key): Returns a dictionary with counts of how many times each value appears for a given key in a list of dictionaries. Parameters: input_list (list): List of dictionaries. key (str): The key whose values will be counted. Returns: dict: Dictionary with the counts of values for the specified key. result = {} for item in input_list: if key in item: value = item[key] if value in result: result[value] += 1 else: result[value] = 1 return result"},{"question":"Write a function that takes a list of integers and a target integer. Your function should return True if the target integer can be obtained by summing any two different integers from the list. Otherwise, return False. ```python def can_sum_to_target(numbers, target): pass ``` **Examples:** ```python can_sum_to_target([1, 2, 3, 4, 5], 8) # True (3 + 5) can_sum_to_target([1, 3, 5, 7], 10) # True (3 + 7 or 5 + 5) can_sum_to_target([1, 2, 3, 9], 8) # False can_sum_to_target([1], 2) # False (only one number in the list) ```","solution":"def can_sum_to_target(numbers, target): Returns True if two different numbers in the list can sum up to the target value, otherwise False. seen = set() for number in numbers: complement = target - number if complement in seen: return True seen.add(number) return False"},{"question":"Given an array `arr` of integers, your task is to determine the length of the longest subsequence that is both an increasing subsequence and a subsequence of the array with strictly increasing elements. The subsequence does not need to be contiguous, but it must maintain the relative order of elements from the original array. Consider the following examples: Example 1: Input: arr = [10, 9, 2, 5, 3, 7, 101, 18] Output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101], which has a length of 4. Example 2: Input: arr = [0, 1, 0, 3, 2, 3] Output: 4 Explanation: The longest increasing subsequence is [0, 1, 2, 3], which has a length of 4. Example 3: Input: arr = [7, 7, 7, 7, 7, 7, 7] Output: 1 Explanation: The longest increasing subsequence is [7], which has a length of 1. Constraints: - The length of arr will be in the range [1, 2500]. - Each element in arr will be an integer in the range [0, 10^9]. For the implementation, consider dynamic programming or other efficient algorithmic approaches to determine the length of the longest increasing subsequence.","solution":"def length_of_LIS(arr): Computes the length of the longest increasing subsequence in a given array of integers. Parameters: arr (list): A list of integers. Returns: int: Length of the longest increasing subsequence. if not arr: return 0 # DP array initialized to 1 for each element dp = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Create a function `find_balanced_substring` that accepts a string containing only the characters \'a\' and \'b\'. The function should return the length of the longest contiguous substring where the number of \'a\'s and the number of \'b\'s are equal. If there are no such substrings, the function should return 0. # Examples ```python find_balanced_substring(\\"aababbab\\") # Returns 8, as the whole string is balanced find_balanced_substring(\\"aaaa\\") # Returns 0, no balanced substring find_balanced_substring(\\"ababab\\") # Returns 6, as the whole string is balanced find_balanced_substring(\\"aabbaabb\\") # Returns 8, as the whole string is balanced find_balanced_substring(\\"bbaa\\") # Returns 4, as the whole string is balanced ``` # Constraints - The input string will have a length of at most 100,000 characters.","solution":"def find_balanced_substring(s): Returns the length of the longest contiguous substring where the number of \'a\'s and \'b\'s are equal. n = len(s) max_length = 0 balance_map = {0: -1} balance = 0 for i in range(n): if s[i] == \'a\': balance += 1 elif s[i] == \'b\': balance -= 1 if balance in balance_map: max_length = max(max_length, i - balance_map[balance]) else: balance_map[balance] = i return max_length"},{"question":"Implement a function in Python that takes a binary tree and returns the level order traversal of its nodes\' values or the breadth-first traversal. Example: Given binary tree [3,9,20,null,null,15,7], 3 / 9 20 / 15 7 The function should return [[3], [9,20], [15,7]]. Function Signature: ```python def level_order_traversal(root: TreeNode) -> List[List[int]]: pass ```","solution":"from typing import List, Optional from collections import deque class TreeNode: def __init__(self, val:int=0, left:\'TreeNode\'=None, right:\'TreeNode\'=None): self.val = val self.left = left self.right = right def level_order_traversal(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) current_level = [] for _ in range(level_size): node = queue.popleft() current_level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(current_level) return result"},{"question":"Write a function that takes an encoded string as input and returns its decoded UTF-8 string. The input string is a hexadecimal representation of the UTF-8 encoded bytes. You should parse the hexadecimal string into bytes and then decode it. Ensure your function can handle inputs of varying lengths. For example: - Input: `\\"x68x65x6cx6cx6fx20x77x6fx72x6cx64x21\\"` - Output: `\\"hello world!\\"` Remember not to hardcode the input. Your function should correctly decode any given hexadecimal string that represents UTF-8 encoded bytes.","solution":"def decode_hex_string(hex_string): Decodes a given hexadecimal string into a UTF-8 string. Args: hex_string (str): A string representing hexadecimal values of UTF-8 encoded bytes. Returns: str: Decoded UTF-8 string. # Remove the x prefix from the string and split into hex bytes hex_bytes = hex_string.replace(\\"x\\", \\"\\") # Convert hex bytes to bytes object byte_data = bytes.fromhex(hex_bytes) # Decode the bytes object to UTF-8 string decoded_string = byte_data.decode(\\"utf-8\\") return decoded_string"},{"question":"Implement a class `Queue` with the following methods: 1. `enqueue(element)`: Adds an element to the end of the queue. 2. `dequeue()`: Removes and returns the front element from the queue. If the queue is empty, return `None`. 3. `get_front()`: Returns the front element of the queue without removing it. If the queue is empty, return `None`. 4. `size()`: Returns the number of elements in the queue. 5. `is_empty()`: Returns `True` if the queue is empty, else returns `False`. Ensure to handle edge cases appropriately, such as dequeuing from an empty queue. Write code to demonstrate the functionality of this `Queue` class.","solution":"class Queue: def __init__(self): self.queue = [] def enqueue(self, element): Adds an element to the end of the queue. self.queue.append(element) def dequeue(self): Removes and returns the front element from the queue. If the queue is empty, return None. if not self.queue: return None return self.queue.pop(0) def get_front(self): Returns the front element of the queue without removing it. If the queue is empty, return None. if not self.queue: return None return self.queue[0] def size(self): Returns the number of elements in the queue. return len(self.queue) def is_empty(self): Returns True if the queue is empty, else returns False. return len(self.queue) == 0"},{"question":"Develop a function to determine the maximum profit from a series of stock prices, given as a list of integers where each integer represents the price of the stock on a specific day. The function should calculate the maximum profit that can be made by buying and then selling the stock at two distinct points in time. However, the function should handle edge cases where there are fewer than two stock prices given, returning a custom error message indicating that there are insufficient data points for the calculation. Also, provide an example of wrong code that makes an incorrect assumption about the days on which the stock can be bought and sold. Explain the mistake within the provided erroneous code snippet. *** Erroneous Code Example: ```python def max_profit(prices): if len(prices) < 2: return \\"Error: Insufficient data points\\" max_profit = 0 for i in range(len(prices)): for j in range(i+1, len(prices)): profit = prices[j] - prices[i] if profit > max_profit: max_profit = profit return max_profit # It fails to correctly handle cases where the list is empty or has duplicates. # For example, calling max_profit([7, 1, 5, 3, 6, 4]) correctly calculates the max profit. # But calling max_profit([7, 6, 4, 3, 1]) returns 0 as expected but does not handle input constraints properly. ```","solution":"def max_profit(prices): Returns the maximum possible profit from buying and selling the stock based on given prices. If there are fewer than two prices, returns an error message. if len(prices) < 2: return \\"Error: Insufficient data points\\" min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function in Python that detects whether a given directed graph contains a cycle. The function should accept an adjacency list as input and return a boolean value: `True` if the graph contains a cycle and `False` otherwise. Explain and implement the Depth-First Search (DFS) algorithm to achieve this.","solution":"def has_cycle(graph): Detects if a given directed graph contains a cycle using DFS algorithm. :param graph: A dictionary representing the adjacency list of the graph :return: True if the graph contains a cycle, False otherwise def visit(node): if node in visiting: return True if node in visited: return False visiting.add(node) for neighbor in graph.get(node, []): if visit(neighbor): return True visiting.remove(node) visited.add(node) return False visited = set() visiting = set() for node in graph: if visit(node): return True return False"},{"question":"Write a function that takes two arrays of integers as input and returns an array of integers containing elements that are present in both input arrays. The returned array should not have any duplicates and can be in any order. **Function Signature:** ```python def intersection(arr1: List[int], arr2: List[int]) -> List[int]: pass ``` **Sample Input:** ```python arr1 = [1, 2, 2, 3, 4] arr2 = [2, 2, 3, 5] ``` **Sample Output:** ```python [2, 3] ``` **Explanation:** The elements 2 and 3 are present in both arrays. The output does not contain duplicates and the order can be any. **Constraints:** - The length of the arrays will not exceed 10^4. - Each element in the arrays will be in the range of -10^5 to 10^5.","solution":"from typing import List def intersection(arr1: List[int], arr2: List[int]) -> List[int]: Returns an array containing elements that are present in both input arrays without duplicates. set1 = set(arr1) set2 = set(arr2) return list(set1 & set2)"},{"question":"Write a Python function that accepts a list of strings and returns a new list containing only the strings that are palindromes. words = [\\"racecar\\", \\"hello\\", \\"level\\", \\"world\\", \\"deified\\"]","solution":"def filter_palindromes(words): Returns a list of palindromic strings from the input list of words. return [word for word in words if word == word[::-1]] # Example usage words = [\\"racecar\\", \\"hello\\", \\"level\\", \\"world\\", \\"deified\\"] print(filter_palindromes(words)) # Output: [\'racecar\', \'level\', \'deified\']"},{"question":"Given a list of integers, determine the maximum possible product of any three distinct numbers from the list. Output this product. If the list contains fewer than three numbers, return an error message indicating that more numbers are needed. For example, for the list [1, 10, -5, 1, -100], the highest possible product is 5000 (10 * -5 * -100).","solution":"def maximum_product_of_three(nums): Returns the maximum product of three distinct numbers from the given list. If the list contains fewer than three numbers, an error message is returned. if len(nums) < 3: return \\"Error: At least three numbers are required\\" nums.sort() # The maximum product can either be from the three largest numbers or # from the two smallest numbers (if they are negative) and the largest number product1 = nums[-1] * nums[-2] * nums[-3] product2 = nums[0] * nums[1] * nums[-1] return max(product1, product2)"},{"question":"Write a function `second_most_frequent` that takes a string `s` as an input and returns the character that appears as the second most frequent in the string. If there is no clear second most frequent character, the function should return `None`. Consider the input string to only contain lowercase alphabetical characters and to be non-empty. For example, given the string `aaabbbbcc`, the function should return `a` since \'b\' is the most frequent character appearing 4 times and \'a\' is the second most frequent appearing 3 times.","solution":"from collections import Counter def second_most_frequent(s): Returns the second most frequent character in the string s. If there is no clear second most frequent character, return None. # Count the frequency of each character in the string char_counts = Counter(s) # If there are less than 2 unique characters, return None if len(char_counts) < 2: return None # Sort characters by their frequency in descending order sorted_counts = sorted(char_counts.items(), key=lambda x: x[1], reverse=True) # Return the second most frequent character return sorted_counts[1][0] if len(sorted_counts) > 1 else None"},{"question":"Emily is applying the \\"Multiply by 4 and Subtract 3\\" rule to create her numerical sequence starting with 1. Which of the following statements about the sequence is most accurate? A) The fifth element in the sequence will be an even number. B) There will always be a mix of even and odd numbers in the sequence. C) The pattern will eventually stabilize at a fixed number. D) If the series started with an even number, the pattern would exclusively produce odd numbers.","solution":"def next_element(n): Returns the next element in the sequence following the \\"Multiply by 4 and Subtract 3\\" rule. return (n * 4) - 3 def generate_sequence(start, length): Generates a sequence of given length starting from the given value. sequence = [start] for _ in range(1, length): next_val = next_element(sequence[-1]) sequence.append(next_val) return sequence"},{"question":"You are given a string `s` consisting of lowercase English letters and a list of pairs of integers `pairs` where each `pairs[i] = [a, b]` indicates that you can swap the characters at index `a` and index `b` of the string `s`. You can swap characters at any pair of indices only if they are directly or indirectly connected via any number of swaps by the pairs given. Return the lexicographically smallest string possible after using the swaps. For example: Example 1: Input: s = \\"dcab\\", pairs = [[0,3],[1,2]] Output: \\"bacd\\" Explanation: Swap s[0] and s[3], s = \\"bcad\\" Swap s[1] and s[2], s = \\"bacd\\" Example 2: Input: s = \\"dcab\\", pairs = [[0,3],[1,2],[0,2]] Output: \\"abcd\\" Explanation: Swap s[0] and s[3], s = \\"bcad\\" Swap s[0] and s[2], s = \\"acbd\\" Swap s[1] and s[2], s = \\"abcd\\" Example 3: Input: s = \\"cba\\", pairs = [[0,1],[1,2]] Output: \\"abc\\" Explanation: Swap s[0] and s[1], s = \\"bca\\" Swap s[1] and s[2], s = \\"bac\\" Swap s[0] and s[1], s = \\"abc\\" Constraints: - The length of `s` is in the range `[1, 100]`. - The length of `pairs` is in the range `[0, 100]`. - The characters of `s` are `a-z`. - All pairs are distinct and valid. The function signature is: ```python def smallestStringWithSwaps(s: str, pairs: List[List[int]]) -> str: pass ```","solution":"from typing import List def smallestStringWithSwaps(s: str, pairs: List[List[int]]) -> str: if not pairs: return s # Create a union find structure parent = list(range(len(s))) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX # Combine the connected indices for x, y in pairs: union(x, y) # Create a dictionary where each root will map to characters belonging to that component components = {} for i in range(len(s)): root = find(i) if root in components: components[root].append(s[i]) else: components[root] = [s[i]] # Sort each component\'s characters individually for comp in components.values(): comp.sort() # Reconstruct the string with the lexicographically smallest characters result = list(s) for i in range(len(s)): root = find(i) result[i] = components[root].pop(0) return \'\'.join(result)"},{"question":"You are tasked with developing a Python class for a Min-Heap data structure, which supports the following operations: 1. **Insert** a new integer into the heap. 2. **Remove** the minimum integer from the heap. 3. **GetMin** to retrieve the minimum integer without removing it from the heap. Your class should dynamically adjust the size of the heap and handle the heap property after each operation to ensure the smallest value is always at the root. Additionally, include a method to return the current size of the heap. Provide a brief explanation of the time complexity for each of the operations mentioned above. Write test cases to demonstrate the functionality and correctness of your implementation.","solution":"import heapq class MinHeap: def __init__(self): self.heap = [] def insert(self, x): heapq.heappush(self.heap, x) def removeMin(self): if self.heap: return heapq.heappop(self.heap) return None def getMin(self): if self.heap: return self.heap[0] return None def size(self): return len(self.heap) # Time Complexity: # The insert operation takes O(log n) time. # The removeMin operation takes O(log n) time. # The getMin operation takes O(1) time. # The size operation takes O(1) time."},{"question":"Consider an array of integers representing daily stock prices. Devise a Python function to determine the maximum profit achievable from making a single buy-sell transaction. The transaction must be completed in the correct order (i.e., buying must occur before selling). If no profit is possible, return 0. prices = [7, 1, 5, 3, 6, 4]","solution":"def max_profit(prices): Calculates the maximum profit from one buy and one sell transaction. If no profit is possible, returns 0. :param prices: List[int] - A list of stock prices :return: int - The maximum profit if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Implement a function called \\"word_count_engine\\" that analyzes a given paragraph and returns the frequency of each word, sorted by the most frequent word first. The function should ignore case and punctuation and return the results as a list of tuples, where each tuple contains a word and its count. Words with the same frequency should appear in the order they first appeared in the input paragraph. # Example: word_count_engine(\\"Practice makes perfect. You\'ll get perfect by practice. Just practice!\\") –> [(\'practice\', 3), (\'perfect\', 2), (\'makes\', 1), (\'youll\', 1), (\'get\', 1), (\'by\', 1), (\'just\', 1)] # Function Signature: def word_count_engine(paragraph): insert your code here","solution":"import re from collections import defaultdict def word_count_engine(paragraph): Analyzes a given paragraph and returns the frequency of each word, sorted by the most frequent word first. Ignores case and punctuation. Parameters: paragraph (str): The paragraph to analyze. Returns: list of tuples: Each tuple contains a word and its count, sorted by frequency. # Convert paragraph to lowercase and remove punctuation using regex paragraph = re.sub(r\'[^ws]\', \'\', paragraph).lower() # Split paragraph into words words = paragraph.split() # Initialize a default dictionary to store word counts word_count = defaultdict(int) # Count the occurrences of each word for word in words: word_count[word] += 1 # Return word counts sorted by frequency and order of appearance return sorted(word_count.items(), key=lambda x: (-x[1], words.index(x[0])))"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the prime numbers from the original list. If an input element is not an integer, the function should skip it and continue processing the next element. Optimize the function to handle large lists efficiently. For example: input_list = [11, 22, \\"foo\\", 3, 4.5, 5] should return [11, 3, 5] input_list = [6, 8, 10, 15] should return []","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def extract_primes(input_list): Returns a list containing only the prime numbers from the input list of integers. Skips non-integer elements. primes = [] for element in input_list: if isinstance(element, int) and is_prime(element): primes.append(element) return primes"},{"question":"Write a function that takes a nested dictionary and a specific key as input, and returns the value corresponding to that key from the dictionary. If the key is not present, return \\"Key not found\\". The dictionary can contain other dictionaries as values, which could be nested multiple levels deep. For example: nested_dict = { \\"name\\": \\"Alice\\", \\"details\\": { \\"age\\": 25, \\"address\\": { \\"city\\": \\"Wonderland\\", \\"postcode\\": \\"12345\\" } }, \\"hobbies\\": [\\"reading\\", \\"gardening\\"] } key_to_find = \\"city\\" Expected output: \\"Wonderland\\" key_to_find = \\"country\\" Expected output: \\"Key not found\\"","solution":"def find_key_value(nested_dict, key_to_find): Takes a nested dictionary and a key, and returns the value corresponding to the key. If the key is not found, return \\"Key not found\\". if key_to_find in nested_dict: return nested_dict[key_to_find] for k, v in nested_dict.items(): if isinstance(v, dict): result = find_key_value(v, key_to_find) if result != \\"Key not found\\": return result return \\"Key not found\\""},{"question":"Design a function that simulates a library management system. The system should be able to add new books, borrow books, and return books. Each book should be represented with a unique identifier, a title, and an author. Borrowing a book should mark it as unavailable, and returning it should mark it as available again. Assume the function will handle strings as input for titles and authors. Your function should include the following methods: - `add_book(book_id, title, author)`: Adds a book to the library with the provided book identifier, title, and author. - `borrow_book(book_id)`: Marks the book with the given identifier as borrowed if it is available. If the book is already borrowed, provide an appropriate message. - `return_book(book_id)`: Marks the book with the given identifier as available again. If the book is not found in the borrowed list, provide an appropriate message. - `get_book_status(book_id)`: Returns the current status of the book as either \\"available\\" or \\"borrowed\\" based on its identifier. Implement the class `Library` to model this system and provide a demonstration of its usage.","solution":"class Library: def __init__(self): self.books = {} # dictionary to store book details with book_id as key self.borrowed_books = set() # set to keep track of borrowed books def add_book(self, book_id, title, author): Adds a new book to the library. if book_id in self.books: return \\"Book ID already exists.\\" self.books[book_id] = {\\"title\\": title, \\"author\\": author, \\"status\\": \\"available\\"} return \\"Book added successfully.\\" def borrow_book(self, book_id): Marks a book as borrowed if it is available. if book_id not in self.books: return \\"Book ID not found.\\" if book_id in self.borrowed_books: return \\"Book already borrowed.\\" self.books[book_id][\\"status\\"] = \\"borrowed\\" self.borrowed_books.add(book_id) return \\"Book borrowed successfully.\\" def return_book(self, book_id): Marks a book as returned if it was borrowed. if book_id not in self.books: return \\"Book ID not found.\\" if book_id not in self.borrowed_books: return \\"Book was not borrowed.\\" self.books[book_id][\\"status\\"] = \\"available\\" self.borrowed_books.remove(book_id) return \\"Book returned successfully.\\" def get_book_status(self, book_id): Returns the status of the book (either \'available\' or \'borrowed\'). if book_id not in self.books: return \\"Book ID not found.\\" return self.books[book_id][\\"status\\"] # Example usage library = Library() print(library.add_book(1, \\"1984\\", \\"George Orwell\\")) print(library.add_book(2, \\"To Kill a Mockingbird\\", \\"Harper Lee\\")) print(library.get_book_status(1)) # Output: available print(library.borrow_book(1)) # Output: Book borrowed successfully. print(library.get_book_status(1)) # Output: borrowed print(library.return_book(1)) # Output: Book returned successfully. print(library.get_book_status(1)) # Output: available"},{"question":"Implement a function that takes a list of integers and returns the minimum number of moves required to make all elements of the list equal. In one move, you may increment or decrement an element by 1. Assume all elements of the list are non-negative integers. # Equalize List Elements def minMovesToEqualElements(nums): if not all(isinstance(i, int) and i >= 0 for i in nums): raise ValueError(\\"All elements must be non-negative integers.\\") if not nums: return 0 nums.sort() median = nums[len(nums) // 2] moves = 0 for num in nums: moves += abs(num - median) return moves","solution":"def minMovesToEqualElements(nums): This function calculates the minimum number of moves required to make all elements of the list equal. In one move, you may increment or decrement an element by 1. Args: nums (list): A list of non-negative integers Returns: int: Minimum number of moves required to make all list elements equal if not all(isinstance(i, int) and i >= 0 for i in nums): raise ValueError(\\"All elements must be non-negative integers.\\") if not nums: return 0 nums.sort() median = nums[len(nums) // 2] moves = sum(abs(num - median) for num in nums) return moves"},{"question":"Write a Python function to analyze a text file, identifying and counting the occurrences of each unique word within the file. The function should output the words in descending order of frequency, and in the case where multiple words have the same frequency, they should be sorted alphabetically. Additionally, the function must be case-insensitive and ignore any punctuation.","solution":"import re from collections import Counter def analyze_text_file(file_path): Analyzes the text file at the given path and returns a list of tuples, where each tuple contains a word and its frequency, sorted by frequency in descending order, and alphabetically when frequencies are the same. The analysis is case-insensitive and ignores punctuation. # Read the file content with open(file_path, \'r\') as file: text = file.read().lower() # Remove punctuation and split into words words = re.findall(r\'bw+b\', text) # Count the occurrences of each word word_count = Counter(words) # Sort words by frequency and alphabetically sorted_words = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) return sorted_words"},{"question":"Craft a Python function that accepts a nested dictionary representing an organization\'s hierarchy and a target employee\'s name. The function should return the names of all direct and indirect subordinates of the target employee. If the target employee is not found or has no subordinates, return an empty list. Example input: ```python organization = { \'CEO\': { \'CTO\': { \'Dev Manager\': { \'Developer 1\': {}, \'Developer 2\': {} } }, \'CFO\': {}, \'COO\': { \'HR Manager\': { \'HR Assistant\': {} } } } } target = \'CTO\' ``` Example output: `[\'Dev Manager\', \'Developer 1\', \'Developer 2\']` ```python def find_subordinates(org_structure, target): # Implement your code here pass ```","solution":"def find_subordinates(org_structure, target): Given an organization\'s hierarchy as a nested dictionary and the name of a target employee, return a list of all direct and indirect subordinates. def helper(node): subordinates = [] for key in node: subordinates.append(key) subordinates.extend(helper(node[key])) return subordinates for key in org_structure: if key == target: return helper(org_structure[key]) else: subordinates = find_subordinates(org_structure[key], target) if subordinates: return subordinates return []"},{"question":"Design a function that takes a list of integers and an integer `k`, and returns a list with the elements rotated to the right by `k` positions. For example, given the list `[1, 2, 3, 4, 5, 6, 7]` and `k = 3`, the output should be `[5, 6, 7, 1, 2, 3, 4]`. Ensure that the implementation handles cases where `k` is larger than the length of the list and where the list is empty. **Function signature**: `def rotate_list(nums: List[int], k: int) -> List[int]:` **Constraints**: - The length of the list is in the range [0, 100]. - The integer `k` is in the range [0, 10^5].","solution":"from typing import List def rotate_list(nums: List[int], k: int) -> List[int]: Rotates the elements of the list to the right by k positions. Parameters: nums (List[int]): The list of integers to be rotated. k (int): The number of positions to rotate the list by. Returns: List[int]: The rotated list. if not nums: return [] n = len(nums) k = k % n # In case k is larger than the length of the list return nums[-k:] + nums[:-k]"},{"question":"Design a function that takes a list of integers and an integer `k`, and returns all unique pairs of integers from the list that sum up to `k`. Ensure that each pair is sorted in ascending order, and the overall list of pairs is sorted lexicographically. If no such pairs exist, return an empty list. You are not allowed to use any in-built functions for combinations or permutations. The function should also handle edge cases, such as empty lists or lists with a single element. Example: ``` Input: nums = [1, 5, 3, 7, -1, 5], k = 6 Output: [[-1, 7], [1, 5]] ``` Example: ``` Input: nums = [2, 4, 2, 4], k = 6 Output: [[2, 4]] ```","solution":"def find_pairs(nums, k): Finds all unique pairs of integers in the list that sum up to k. Each pair is sorted in ascending order and the overall list of pairs is sorted lexicographically. nums.sort() pairs = set() seen = {} for num in nums: target = k - num if target in seen and seen[target] > 0: pairs.add((min(num, target), max(num, target))) seen[target] -= 1 # To ensure that each element is used at most once else: if num in seen: seen[num] += 1 else: seen[num] = 1 return [list(pair) for pair in sorted(pairs)] # Example usage: # nums = [1, 5, 3, 7, -1, 5], k = 6 # print(find_pairs(nums, k)) # Output: [[-1, 7], [1, 5]]"},{"question":"Given a string `s`, find the length of the longest substring without repeating characters. Your solution must not use any additional data structures such as arrays, sets, or hashmaps to store the characters of the substring. Example 1: Input: s = \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Example 2: Input: s = \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Example 3: Input: s = \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Example 4: Input: s = \\"\\" Output: 0 Constraints: - `0 <= s.length <= 1000` - `s` consists of English letters, digits, symbols, and spaces. Hints: - You may need to use a sliding window approach. - Consider how you might track the characters in the current window without using additional data structures.","solution":"def length_of_longest_substring(s): n = len(s) if n == 0: return 0 max_length = 0 start = 0 for end in range(n): for j in range(start, end): if s[end] == s[j]: start = j + 1 break max_length = max(max_length, end - start + 1) return max_length"},{"question":"In the following list of integers, design a function that identifies and returns the index of the first even number. If no even number is found, the function should return -1. List = [3, 7, 11, 14, 25, 32]","solution":"def first_even_index(lst): Returns the index of the first even number in the list. If no even number is found, returns -1. for index, number in enumerate(lst): if number % 2 == 0: return index return -1"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the original list, in the same order. Function Signature: ```python def filter_primes(numbers: List[int]) -> List[int]: pass ``` Input: - A list of integers (0 <= len(numbers) <= 1000, -10^6 <= numbers[i] <= 10^6) Output: - A list of integers representing the prime numbers from the input list. Example: ```python filter_primes([10, 29, 15, 37, -3, 17, 23]) # Output: [29, 37, 17, 23] filter_primes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) # Output: [2, 3, 5, 7] filter_primes([]) # Output: [] ```","solution":"from typing import List def is_prime(n: int) -> bool: if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers: List[int]) -> List[int]: return [num for num in numbers if is_prime(num)]"},{"question":"Develop a function to find the longest substring without repeating characters in a given string. The function should return the length of the longest substring and the substring itself. Implement an efficient solution using a sliding window approach. Provide a brief explanation of your approach and include edge cases such as an empty string, a string with all identical characters, and a string with all unique characters.","solution":"def longest_unique_substring(s): Finds the longest substring without repeating characters in a given string. Args: s (str): The input string. Returns: tuple: A tuple containing the length of the longest substring and the substring itself. n = len(s) if n == 0: return 0, \\"\\" max_len = 0 start = 0 max_substr = \\"\\" char_map = {} left = 0 for right in range(n): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right curr_len = right - left + 1 if curr_len > max_len: max_len = curr_len start = left max_substr = s[left:right+1] return max_len, max_substr"},{"question":"Given a string that represents an algebraic expression containing variables, numbers, and arithmetic operators (+, -, *, /), write a function that evaluates this expression and returns its result. The input expression is guaranteed to be valid, with proper use of parentheses to denote the order of operations if needed. Implement a solution that parses and calculates the expression correctly. # Input - A string `expression` representing the algebraic expression. # Output - An integer or floating number representing the result of the evaluated expression. # Example ```python evaluate_expression(\\"3 + 2 * 2\\") # Output: 7 evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\") # Output: 23 evaluate_expression(\\"10 / 2 + 3 * 4\\") # Output: 17.0 ``` # Constraints - The length of the input string will not exceed 100 characters. - The expression can contain digits (0-9), the operators +, -, *, /, and parentheses (). - Division should be treated as floating-point division. - The result fits within the numeric range of a standard 64-bit integer or floating-point value.","solution":"def evaluate_expression(expression): Evaluate the algebraic expression and return its result. The expression should be valid and can contain digits, the operators +, -, *, /, and parentheses. def evaluate(tokens): stack = [] num = 0 sign = \'+\' while len(tokens) > 0: token = tokens.pop(0) if token.isdigit() or token == \'.\': num = num * 10 + float(token) if token != \'.\' else num + float(token) if token == \'(\': num = evaluate(tokens) if (not token.isdigit() and token != \'.\' and token != \' \') or len(tokens) == 0: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] = stack[-1] * num elif sign == \'/\': stack[-1] = stack[-1] / num num = 0 sign = token if token == \')\': break return sum(stack) # Tokenizing the input string to handle spaces tokens = list(expression.replace(\' \', \'\')) return evaluate(tokens)"},{"question":"Write a function that takes a string as input and returns a new string where each character in the original string is repeated three times. For example: ``` Input: \\"abc\\" Output: \\"aaabbbccc\\" Input: \\"hello\\" Output: \\"hhheeelllllooo\\" ```","solution":"def repeat_characters(s): Returns a new string where each character in the input string is repeated three times. Parameters: s (str): The input string. Returns: str: The string with characters repeated three times. return \'\'.join([char * 3 for char in s])"},{"question":"Implement a k-means clustering algorithm from scratch and use it to cluster the data from the Iris dataset. After obtaining the clusters, use a silhouette score to evaluate the quality of the clustering. Compare the silhouette score of your implementation with the score obtained using Scikit-learn’s k-means implementation. Discuss any differences and potential reasons for the disparities. Ensure that the dataset is appropriately preprocessed before applying the clustering algorithm.","solution":"import numpy as np from sklearn.datasets import load_iris from sklearn.preprocessing import StandardScaler from sklearn.metrics import silhouette_score def initialize_centroids(X, k): np.random.seed(42) random_indices = np.random.permutation(np.arange(len(X))) centroids = X[random_indices[:k]] return centroids def assign_clusters(X, centroids): distances = np.sqrt(((X - centroids[:, np.newaxis])**2).sum(axis=2)) return np.argmin(distances, axis=0) def update_centroids(X, clusters, k): new_centroids = np.array([X[clusters == i].mean(axis=0) for i in range(k)]) return new_centroids def kmeans(X, k, max_iters=100): centroids = initialize_centroids(X, k) for _ in range(max_iters): clusters = assign_clusters(X, centroids) new_centroids = update_centroids(X, clusters, k) if np.all(new_centroids == centroids): break centroids = new_centroids return centroids, clusters def preprocess_iris_data(): iris = load_iris() X = iris.data X = StandardScaler().fit_transform(X) return X def compute_silhouette_score(X, labels): return silhouette_score(X, labels) X = preprocess_iris_data() k = 3 centroids, clusters = kmeans(X, k) silhouette_kmeans = compute_silhouette_score(X, clusters) # Comparing with Scikit-learn\'s implementation from sklearn.cluster import KMeans sklearn_kmeans = KMeans(n_clusters=k, random_state=42) sklearn_kmeans.fit(X) sklearn_clusters = sklearn_kmeans.labels_ silhouette_sklearn = compute_silhouette_score(X, sklearn_clusters) silhouette_kmeans, silhouette_sklearn # Returning the silhouette scores for comparison"},{"question":"Create a function that generates all possible permutations of a given string and returns them as a list. Ensure that the permutations are distinct and ordered lexicographically. Do not use any built-in functions that directly solve the permutations problem. string = \\"abc\\"","solution":"def generate_permutations(s): Generates all distinct and lexicographically ordered permutations of the input string s. def permute(prefix, remaining, results): if len(remaining) == 0: results.append(prefix) else: seen = set() for i in range(len(remaining)): if remaining[i] not in seen: seen.add(remaining[i]) permute(prefix + remaining[i], remaining[:i] + remaining[i+1:], results) results = [] s = \'\'.join(sorted(s)) # Ensure string is in lexicographic order permute(\\"\\", s, results) return results"},{"question":"Write a Python function that, given a string, returns the length of the longest substring with all unique characters. Provide a solution that is efficient in terms of time complexity. Additionally, write test cases to validate your function using edge cases, such as an empty string, a string with all identical characters, and a string with all unique characters. Ensure that your function correctly handles mixed character input and varying string lengths.","solution":"def longest_unique_substring(s): Returns the length of the longest substring with all unique characters. start, max_len = 0, 0 used_chars = {} for end, char in enumerate(s): if char in used_chars and used_chars[char] >= start: start = used_chars[char] + 1 used_chars[char] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Write a function `find_second_largest(numbers)` that takes a list of integers as input and returns the second largest number in the list. If the list contains less than two unique numbers, return `None`. The function should handle cases where the input list contains negative numbers and should not rely on built-in sorting methods. Consider performance efficiency, especially for large lists. Example: ```python print(find_second_largest([1, 2, 3, 4])) # Output: 3 print(find_second_largest([4, 1, 2, 3])) # Output: 3 print(find_second_largest([4, 4, 4, 4])) # Output: None print(find_second_largest([10])) # Output: None print(find_second_largest([4, -1, -2, -3])) # Output: -1 ```","solution":"def find_second_largest(numbers): Returns the second largest unique number in the list. If the list contains fewer than two unique numbers, returns None. if len(numbers) < 2: return None first = second = None for num in numbers: if first is None or num > first: second = first first = num elif num != first and (second is None or num > second): second = num return second"},{"question":"Create a Python function that accepts a list of integers and returns a new list containing only the prime numbers from the original list. The function should remove any duplicates and maintain the original order of the first occurrence of each prime number. numbers = [17, 23, 23, 4, 2, 5, 4, 29, 5, 17]","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a list of unique prime numbers maintaining the original order. primes = [] seen_primes = set() for num in numbers: if is_prime(num) and num not in seen_primes: primes.append(num) seen_primes.add(num) return primes numbers = [17, 23, 23, 4, 2, 5, 4, 29, 5, 17] print(filter_primes(numbers)) # expected output: [17, 23, 2, 5, 29]"},{"question":"You are given an array of integers `nums` and an integer `target`. Write a function that returns the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. The function should return the result as a tuple of two indices in ascending order. Example: ``` Input: nums = [2, 7, 11, 15], target = 9 Output: (0, 1) # Because nums[0] + nums[1] == 9 ``` # Function Signature ```python def two_sum(nums: list, target: int) -> tuple: # Your code here ``` # Constraints - The number of elements in `nums` is between 2 and 10^4. - Each element in `nums` is an integer in the range of [-10^9, 10^9]. - The function should have an efficient time complexity, ideally O(n). # Notes - You should consider edge cases when there are negative numbers and zeros in the input list. - You can assume that there is exactly one solution for the given inputs.","solution":"def two_sum(nums: list, target: int) -> tuple: Returns a tuple of indices of the two numbers that add up to the target. Parameters: nums (list): List of integers. target (int): Target integer to find in sum of two numbers in the list. Returns: tuple: Indices of the two numbers that add up to the target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index"},{"question":"Create a Python function that takes a list of strings and returns a dictionary where the keys are the strings from the list, and the values are the lengths of those strings. For example, given the list [\\"apple\\", \\"banana\\", \\"cherry\\"], the function should return {\\"apple\\": 5, \\"banana\\": 6, \\"cherry\\": 6}. Consider edge cases such as empty strings or a list containing repeated strings.","solution":"def strings_to_length_dict(strings_list): Takes a list of strings and returns a dictionary where the keys are the strings from the list, and the values are the lengths of those strings. return {string: len(string) for string in strings_list}"},{"question":"Write a Python function that takes a string containing a sentence as an input and returns a dictionary with the frequency count of each word in the sentence. Ignore punctuation and consider words case-insensitively. Example: \\"Hello world! Hello, universe.\\" Output: {\\"hello\\": 2, \\"world\\": 1, \\"universe\\": 1}","solution":"import re from collections import defaultdict def word_frequency(sentence): Takes a string containing a sentence as input and returns a dictionary with the frequency count of each word. Punctuation is ignored and words are considered case-insensitively. # Convert the sentence to lowercase and remove punctuation using regex clean_sentence = re.sub(r\'[^ws]\', \'\', sentence.lower()) words = clean_sentence.split() frequency_dict = defaultdict(int) for word in words: frequency_dict[word] += 1 return dict(frequency_dict)"},{"question":"Develop a Python script that reads from a CSV file containing student names and their respective scores in various subjects. The script should then calculate the average score for each student and write the results to a new CSV file. Include appropriate error handling to manage issues such as missing files, improper formatting, or missing values in the CSV file. The input CSV file has the following format: ``` name,math,science,english Alice,85,90,88 Bob,78,84,79 Charlie,,75,85 ``` Your program should output a CSV file named `averages.csv` with the following format: ``` name,average_score Alice,87.67 Bob,80.33 Charlie,80.00 ``` In the case of missing scores, the calculation should only consider the available scores, and if all scores for a student are missing, the average should be marked as \\"N/A\\". Stretch Goal: Besides writing the average scores to a CSV file, also display a simple bar chart showing student names on the X-axis and their average scores on the Y-axis using a visualization library of your choice (e.g., matplotlib).","solution":"import csv import os import matplotlib.pyplot as plt def calculate_averages(input_file, output_file): try: with open(input_file, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) students_averages = [] for row in reader: scores = [] for subject in [\'math\', \'science\', \'english\']: try: if row[subject]: scores.append(float(row[subject])) except ValueError: pass if scores: average = round(sum(scores) / len(scores), 2) else: average = \\"N/A\\" students_averages.append({\'name\': row[\'name\'], \'average_score\': average}) with open(output_file, mode=\'w\', newline=\'\') as csvfile: fieldnames = [\'name\', \'average_score\'] writer = csv.DictWriter(csvfile, fieldnames=fieldnames) writer.writeheader() for student in students_averages: writer.writerow(student) # Generate bar chart student_names = [student[\'name\'] for student in students_averages] average_scores = [student[\'average_score\'] if isinstance(student[\'average_score\'], (int, float)) else 0 for student in students_averages] plt.bar(student_names, average_scores, color=\'blue\') plt.xlabel(\'Student\') plt.ylabel(\'Average Score\') plt.title(\'Average Scores by Student\') plt.show() except FileNotFoundError: print(\\"The input file does not exist.\\") except Exception as e: print(f\\"An error occurred: {e}\\") calculate_averages(\'students.csv\', \'averages.csv\')"},{"question":"Write a function that takes a string containing a mathematical expression in infix notation (e.g., \\"3 + (2 * 5)\\") and converts it to postfix notation (e.g., \\"3 2 5 * +\\"). The function should handle the four basic arithmetic operators (+, -, *, /), parentheses, and ensure proper operator precedence. Use the shunting-yard algorithm to achieve this. **Input**: A string containing a mathematical expression in infix notation. **Output**: A string containing the converted expression in postfix notation. **Example**: ```python def infix_to_postfix(expression): # Your implementation here # Example Usage: expression = \\"3 + (2 * 5)\\" print(infix_to_postfix(expression)) # Output should be \\"3 2 5 * +\\" ``` Your function should effectively manage operator precedence and associativity while converting the expression accurately. Test your code with various complex expressions to ensure robustness.","solution":"def infix_to_postfix(expression): def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def is_operator(c): return c in {\'+\', \'-\', \'*\', \'/\'} def to_postfix(expression): stack = [] output = [] for char in expression: if char.isnumeric(): output.append(char) elif char == \'(\': stack.append(char) elif char == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() # Remove \'(\' elif is_operator(char): while stack and precedence(stack[-1]) >= precedence(char): output.append(stack.pop()) stack.append(char) while stack: output.append(stack.pop()) return output # Handle multi-digit numbers and spaces tokens = [] number = \'\' for char in expression: if char.isnumeric(): number += char else: if number: tokens.append(number) number = \'\' if char.strip(): tokens.append(char) if number: tokens.append(number) postfix = to_postfix(tokens) return \' \'.join(postfix)"},{"question":"Write a function in Python to calculate the nth Fibonacci number, but with the added constraint that every number in the sequence is generated using memoization to optimize performance. Your function should handle large inputs efficiently (e.g., n = 1000). Additionally, write a function to calculate the time complexity of your implementation. Use a helper function to test that the memoization is working correctly by ensuring that each Fibonacci number is only calculated once. Verify your implementation by comparing its output to a non-memoized version for several values of n, and analyze the performance difference.","solution":"def fibonacci(n, memo={}): Calculate the nth Fibonacci number using memoization. Args: n (int): The position in the Fibonacci sequence. memo (dict): Dictionary to store previously calculated Fibonacci numbers. Returns: int: The nth Fibonacci number. if n in memo: return memo[n] if n <= 1: memo[n] = n else: memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n] def non_memoized_fibonacci(n): Calculate the nth Fibonacci number without any memoization. Args: n (int): The position in the Fibonacci sequence. Returns: int: The nth Fibonacci number. if n <= 1: return n return non_memoized_fibonacci(n-1) + non_memoized_fibonacci(n-2) def time_complexity(): Returns the time complexity of the Fibonacci function with memoization. Returns: str: Time complexity as a string. return \\"O(n)\\" def test_memoization(): Helper function to test whether memoization is working correctly. calculated_values = {} assert fibonacci(10, calculated_values) == 55 # The memoization dictionary should have less than 10 unique entries if memoization is working assert len(calculated_values) == 11"},{"question":"Write a function named `find_peak_elements` that takes a list of integers as input and returns a list of all peak elements in the input list. A peak element is an element that is greater than its neighbors. For elements at the boundary of the list, only one neighbor needs to be compared. # Function Signature ```python def find_peak_elements(nums: List[int]) -> List[int]: pass ``` # Input - `nums`: A list of integers of length `n` where (0 leq n leq 10^6). # Output - A list of integers representing all the peak elements in the input list, in the order they appear. # Examples ```python # Example 1 nums = [1, 3, 2, 4, 1] # Output: [3, 4] # Explanation: 3 is greater than its neighbors (1 and 2), 4 is greater than its neighbors (2 and 1). # Example 2 nums = [5, 10, 20, 15, 7, 25] # Output: [20, 25] # Explanation: 20 is greater than its neighbors (10 and 15), 25 is greater than its neighbor (7). # Example 3 nums = [7, 8, 9, 10] # Output: [10] # Explanation: 10 is at the boundary and greater than 9. # Example 4 nums = [10, 7, 8, 9] # Output: [10, 9] # Explanation: 10 is at the boundary and greater than 7, 9 is greater than 8. ``` # Constraints - The function should be optimized for performance for large inputs. - Handle edge cases like empty list and single-element list gracefully.","solution":"from typing import List def find_peak_elements(nums: List[int]) -> List[int]: This function returns a list of all peak elements in the input list. A peak element is an element that is greater than its neighbors. For elements at the boundary of the list, only one neighbor needs to be compared. if not nums: return [] n = len(nums) peaks = [] for i in range(n): if (i == 0 and n > 1 and nums[i] > nums[i + 1]) or (i == n - 1 and n > 1 and nums[i] > nums[i - 1]) or (0 < i < n - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]) or (n == 1): peaks.append(nums[i]) return peaks"},{"question":"Write a Python function that takes a list of strings and returns a dictionary. Each key should be a string from the list and the corresponding value should be another dictionary containing two keys: \'length\' and \'vowels\'. The \'length\' key should map to the number of characters in the string, and the \'vowels\' key should map to the number of vowels (a, e, i, o, u) in the string. The function should ignore any non-string elements in the input list and include error handling for invalid inputs. strings_list = [\'hello\', \'world\', \'example\', \'test\', 42, \'strings\', [\'list\', \'inside\'], \'another\']","solution":"def strings_info(strings_list): Returns a dictionary with each string from the list as a key and a dictionary containing \'length\' and \'vowels\' as the corresponding values. def count_vowels(s): vowels = \'aeiouAEIOU\' return sum(1 for char in s if char in vowels) result = {} for item in strings_list: if isinstance(item, str): result[item] = { \'length\': len(item), \'vowels\': count_vowels(item) } return result"},{"question":"Given a list of integers, write a function to determine if the list is a palindrome. A list is considered a palindrome if it reads the same forwards and backwards. The function should return `True` if the list is a palindrome and `False` otherwise.","solution":"def is_palindrome(lst): Determines if the given list of integers is a palindrome. Parameters: lst (list): A list of integers. Returns: bool: True if the list is a palindrome, False otherwise. return lst == lst[::-1]"},{"question":"Write a function that takes a list of integers and returns the list sorted in ascending order, but sorts only the even numbers while leaving the odd numbers in their original positions. The function should maintain the relative position of the odd numbers as they appear in the input. For example: - Given the input list `[3, 1, 2, 4, 7, 5, 8, 6]`, the function should return `[3, 1, 2, 4, 7, 5, 6, 8]`. - Given the input list `[11, 14, 15, 2, 7, 8, 12]`, the function should return `[11, 2, 15, 8, 7, 12, 14]`. Your function should handle edge cases such as empty lists, lists with all odd or all even numbers, and lists with negative integers. Ensure the efficiency of your solution takes into account the potential size of the input list.","solution":"def sort_even_numbers(arr): Returns the list sorted in ascending order, but sorts only the even numbers while leaving the odd numbers in their original positions. # Extract the even numbers and sort them evens = sorted([num for num in arr if num % 2 == 0]) # Initialize even number index even_index = 0 # Create result array with sorted even numbers in place result = [] for num in arr: if num % 2 == 0: result.append(evens[even_index]) even_index += 1 else: result.append(num) return result"},{"question":"Given a string representing a mathematical expression containing integers and the operators +, -, *, and /, write a function that evaluates the expression and returns the result as an integer. The expression must follow the correct order of operations (PEMDAS/BODMAS rules). You may assume the input string is always a valid expression. Avoid using built-in functions that directly solve the expression. Optimize your solution for readability and efficiency.","solution":"def evaluate_expression(expression): def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(int(left / right)) def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 values = [] operators = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while (i < len(expression) and expression[i].isdigit()): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while len(operators) != 0: apply_operator(operators, values) return values[-1]"},{"question":"Write a Python program that implements a function to convert a given decimal number to its binary representation without using built-in functions like `bin()`. The function should handle both positive and negative integers appropriately. For instance, if the input is 5, the output should be \'101\', and if the input is -5, the output should be \'-101\'. The program should be tested with the example inputs 12 and -18, and return their binary representations.","solution":"def decimal_to_binary(n): Converts a given decimal number to its binary representation without using built-in functions like bin(). Handles both positive and negative integers. if n == 0: return \\"0\\" is_negative = n < 0 n = abs(n) binary = \\"\\" while n > 0: binary = str(n % 2) + binary n //= 2 if is_negative: binary = \\"-\\" + binary return binary"},{"question":"A company wants to implement a basic inventory management system for its warehouse. The system should track the quantities of items, add new items, and update existing items. # Requirements: 1. **Item Entry:** - Implement a function `add_item(item_name: str, quantity: int)` that adds a new item with the given quantity to the inventory. If the item already exists, the function should update the inventory by adding the given quantity to the existing quantity. 2. **Update Quantity:** - Implement a function `update_quantity(item_name: str, quantity: int)` that updates the quantity of an existing item in the inventory. If the item does not exist, return an error message. 3. **Remove Item:** - Implement a function `remove_item(item_name: str)` that removes an item from the inventory. If the item does not exist, return an error message. 4. **Retrieve Quantity:** - Implement a function `check_quantity(item_name: str) -> int` that retrieves the current quantity of an item. If the item does not exist, return an error message. 5. **Inventory Status:** - Implement a function `inventory_status() -> str` that returns a string representation of all items in the inventory and their respective quantities. # Constraints: - `item_name` will be a non-empty string consisting of alphabetical characters only. - `quantity` will be a non-negative integer. # Example Usage: ```python add_item(\\"apple\\", 10) add_item(\\"banana\\", 5) update_quantity(\\"apple\\", 5) print(check_quantity(\\"apple\\")) # Output: 15 print(check_quantity(\\"banana\\")) # Output: 5 print(check_quantity(\\"orange\\")) # Output: \\"Item not found\\" remove_item(\\"banana\\") print(inventory_status()) # Output: \\"apple: 15\\" ``` Implement the inventory management system as specified.","solution":"# Inventory dictionary to keep track of items and their quantities inventory = {} def add_item(item_name: str, quantity: int): Adds a new item with the given quantity to the inventory. If the item already exists, update its quantity. if item_name in inventory: inventory[item_name] += quantity else: inventory[item_name] = quantity def update_quantity(item_name: str, quantity: int): Updates the quantity of an existing item in the inventory. If the item does not exist, return an error message. if item_name in inventory: inventory[item_name] = quantity else: return \\"Item not found\\" def remove_item(item_name: str): Removes an item from the inventory. If the item does not exist, return an error message. if item_name in inventory: del inventory[item_name] else: return \\"Item not found\\" def check_quantity(item_name: str) -> int: Retrieves the current quantity of an item. If the item does not exist, return an error message. if item_name in inventory: return inventory[item_name] else: return \\"Item not found\\" def inventory_status() -> str: Returns a string representation of all items in the inventory and their respective quantities. status = \\", \\".join(f\\"{item}: {quantity}\\" for item, quantity in inventory.items()) return status"},{"question":"Create a function that accepts a string of text and returns the most frequent word from the string. In the event of a tie, the function should return the word that appears first in the input text. Ignore punctuation and treat uppercase and lowercase letters as equivalent. Assume that the input consists of words separated by spaces. Example: Input: \\"Hello world! Hello earth. Hello universe?\\" Output: \\"hello\\"","solution":"import string def most_frequent_word(text): Returns the most frequent word in the given string text. Ignores punctuation. text = text.lower() words = text.split() words = [word.strip(string.punctuation) for word in words] word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 max_count = max(word_count.values()) for word in words: if word_count[word] == max_count: return word"},{"question":"Write a function that takes a list of strings as input and returns a new list with the strings sorted by their frequency of occurrence in descending order. If two strings have the same frequency, they should be sorted lexicographically in ascending order. For instance, the list [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] should be transformed to [\\"apple\\", \\"banana\\", \\"orange\\"]. Provide test cases to validate your function, including edge cases such as an empty list, a list with only one unique string, and a list with strings having the same frequency. The test cases should also cover scenarios with different string lengths and character cases. Additionally, analyze the time complexity of your solution, discussing how the frequency calculation and the sorting steps contribute to the overall complexity. Consider optimizing the solution for large inputs and explain any trade-offs made in the process.","solution":"from collections import Counter def sort_strings_by_frequency(strings): Sorts the input list of strings by frequency of occurrence in descending order. If two strings have the same frequency, they are sorted lexicographically in ascending order. Args: strings (list): A list of strings. Returns: list: A new list with strings sorted by frequency and lexicographically. # Count the frequency of each string frequency = Counter(strings) # Sort by frequency (descending) and then lexicographically (ascending) sorted_strings = sorted(frequency.keys(), key=lambda x: (-frequency[x], x)) return sorted_strings"},{"question":"Create a program that implements a basic chat server using WebSockets in Python. The server should be capable of handling multiple simultaneous client connections. Implement the following features: 1. A way for new users to connect to the chat by providing a unique username. 2. Broadcast a new user\'s arrival to all connected clients. 3. Allow users to send messages to all other connected clients. 4. Notify all clients when a user disconnects from the chat. Ensure the server manages connections and messages accurately, preventing any data loss or misrouting. Handle cases where users try to connect with a username that is already in use, and respond with appropriate error messages. Write tests to confirm the handling of multiple client connections, message broadcasting, user arrival and departure notifications, and error conditions.","solution":"import asyncio import websockets import json clients = {} usernames = set() async def register_client(websocket): while True: msg = await websocket.recv() msg_data = json.loads(msg) if msg_data[\\"action\\"] == \\"register\\": username = msg_data[\\"username\\"] if username in usernames: await websocket.send(json.dumps({\\"action\\": \\"error\\", \\"message\\": \\"Username already taken\\"})) else: usernames.add(username) clients[websocket] = username await broadcast(f\\"{username} has joined the chat\\") break async def unregister_client(websocket): username = clients[websocket] del clients[websocket] usernames.remove(username) await broadcast(f\\"{username} has left the chat\\") async def broadcast(message): if clients: msg_data = {\\"action\\": \\"message\\", \\"message\\": message} await asyncio.wait([client.send(json.dumps(msg_data)) for client in clients.keys()]) async def handler(websocket, path): await register_client(websocket) try: async for message in websocket: msg_data = json.loads(message) if msg_data[\\"action\\"] == \\"message\\": await broadcast(f\\"{clients[websocket]}: {msg_data[\'message\']}\\") finally: await unregister_client(websocket) start_server = websockets.serve(handler, \\"localhost\\", 12345) if __name__ == \\"__main__\\": asyncio.get_event_loop().run_until_complete(start_server) asyncio.get_event_loop().run_forever()"},{"question":"Create a function in a programming language that takes a list of integers and sorts it using the Merge Sort algorithm. The function should recursively divide the list into halves until each sublist has one element, then merge the sorted sublists to produce the sorted list. The function must be implemented without using any in-built sort functions or iterative loops, emphasizing the recursive nature of Merge Sort. The input list and its length should be customizable by the user. For example, for an input list [34, 7, 23, 32, 5, 62], the output should be: [5, 7, 23, 32, 34, 62]","solution":"def merge_sort(arr): Sorts a list of integers using the Merge Sort algorithm. Parameters: arr (list): List of integers to sort. Returns: list: Sorted list of integers. # Base case: a list of zero or one elements is already sorted if len(arr) <= 1: return arr # Recursive case: split the list and merge sorted sublists mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted lists into one sorted list. Parameters: left (list): Left sorted sublist. right (list): Right sorted sublist. Returns: list: Merged and sorted list. sorted_list = [] i = j = 0 # Merge the two lists together while maintaining sorted order while i < len(left) and j < len(right): if left[i] <= right[j]: sorted_list.append(left[i]) i += 1 else: sorted_list.append(right[j]) j += 1 # If there are remaining elements in left or right, append them sorted_list.extend(left[i:]) sorted_list.extend(right[j:]) return sorted_list"},{"question":"Design a function `most_frequent_substring` that takes two arguments: a string `s` and an integer `k`. The function should return the k-length substring that appears most frequently in the input string. If there are multiple substrings with the same maximum frequency, return the lexicographically smallest one. * Constraints: * The length of the input string, `n`, will be in the range [1, 10^5]. * The value of `k` will be in the range [1, min(n, 10)]. __Examples__ ```python most_frequent_substring(\\"ababcabab\\", 3) ``` Output: ```python \\"aba\\" ``` ```python most_frequent_substring(\\"aaaaaaa\\", 2) ``` Output: ```python \\"aa\\" ``` __Explanation__: 1. In the first example, the substrings of length 3 and their frequencies are: - \\"aba\\": 2 - \\"bab\\": 1 - \\"abc\\": 1 - \\"bca\\": 1 - \\"cab\\": 1 \\"aba\\" has the highest frequency. 2. In the second example, the substrings of length 2 and their frequencies are: - \\"aa\\": 6 \\"aa\\" is the only substring and appears most frequently.","solution":"def most_frequent_substring(s, k): from collections import defaultdict substring_frequency = defaultdict(int) # Count frequencies of all substrings of length k for i in range(len(s) - k + 1): substring = s[i:i + k] substring_frequency[substring] += 1 # Find the most frequent substring most_frequent = \'\' max_frequency = 0 for substr, freq in substring_frequency.items(): if freq > max_frequency or (freq == max_frequency and substr < most_frequent): most_frequent = substr max_frequency = freq return most_frequent"},{"question":"Write a function that takes a string as input and returns a new string where all of the unique characters in the input string appear in the order they first appeared. Ignore duplicate characters beyond their first appearances.","solution":"def remove_duplicates(input_str): Returns a string with all unique characters from the input string, maintaining their first occurrence order. seen = set() result = [] for char in input_str: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Develop a function that, given a string containing a list of integers separated by commas, returns a new string where each integer is replaced by its corresponding word in English. For example, if the input is \'1,2,3\', the function should return \'one,two,three\'. Assume the integers are between 0 and 9, inclusive.","solution":"def int_to_words(s): Given a string containing a list of integers separated by commas, returns a new string where each integer is replaced by its corresponding word in English. The integers are between 0 and 9, inclusive. Parameters: s (str): A string of integers separated by commas. Returns: str: A string of words corresponding to the integers. num_to_word = [\\"zero\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\"] return \',\'.join(num_to_word[int(num)] for num in s.split(\',\'))"},{"question":"You are given an array of integers. Write a function to find the two elements in the array that have the smallest absolute difference between them and return these two elements in the order they appear in the array. If there are multiple pairs with the same smallest difference, return the pair that appears first when scanning left to right. Input: [3, 8, 15, 17] Output: (15, 17)","solution":"def find_smallest_difference_pair(arr): Finds the two elements in the array that have the smallest absolute difference between them. Parameters: arr (list): A list of integers. Returns: tuple: A tuple containing the two elements with the smallest absolute difference in the order they appear in the array. If there are multiple pairs with the same smallest difference, the pair that appears first will be returned. min_diff = float(\'inf\') pair = (None, None) for i in range(len(arr) - 1): for j in range(i + 1, len(arr)): diff = abs(arr[i] - arr[j]) if diff < min_diff: min_diff = diff pair = (arr[i], arr[j]) # Early exit if the absolute difference is zero if min_diff == 0: return pair return pair # Example usage print(find_smallest_difference_pair([3, 8, 15, 17])) # Output: (15, 17)"},{"question":"Can you develop a Python function to parse a JSON object and extract the value associated with a specified key? The function should take two parameters: the JSON object (as a string) and the key (as a string). Use the json library and handle cases where the key does not exist in the JSON object by returning a default message \\"Key not found\\".","solution":"import json def extract_value_from_json(json_str, key): Extract the value associated with the specified key from the given JSON string. Parameters: json_str (str): The JSON object as a string. key (str): The key whose value needs to be extracted. Returns: str: The value associated with the key or \\"Key not found\\" if the key does not exist. try: json_obj = json.loads(json_str) except json.JSONDecodeError: return \\"Invalid JSON\\" return json_obj.get(key, \\"Key not found\\")"},{"question":"Write a function to implement a Least Recently Used (LRU) cache. The cache should support the following operations: `get(key)` and `put(key, value)`. The `get(key)` operation should return the value of the key if the key exists in the cache, otherwise it should return -1. The `put(key, value)` operation should insert or update the value if the key is not already present in the cache. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item. The algorithm should perform both operations in O(1) time complexity. Your implementation should be efficient and use appropriate data structures to meet these constraints. Additionally, write test cases to validate your LRU cache implementation. Your solution should define: 1. A class `LRUCache` with an appropriate constructor to initialize the cache size. 2. Functions `get(key)` and `put(key, value)` as described above. 3. A few simple test cases that demonstrate the functionality of your LRU cache.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 value = self.cache.pop(key) self.cache[key] = value # Move to end to maintain order return value def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.pop(key) elif len(self.cache) >= self.capacity: self.cache.popitem(last=False) self.cache[key] = value"},{"question":"Write a function to modify an inventory list based on new shipments. ```python def update_inventory(current_inventory, new_shipments): This function updates the existing \'current_inventory\' dictionary with the quantities from \'new_shipments\'. - current_inventory: Dictionary with item names as keys and their corresponding quantities as values. - new_shipments: List of tuples, each containing an item name and quantity to be added to the inventory. The function should update the quantities of existing items and add new items to the inventory as needed. It should return an updated dictionary representing the modified inventory. # Your implementation here ```","solution":"def update_inventory(current_inventory, new_shipments): This function updates the existing \'current_inventory\' dictionary with the quantities from \'new_shipments\'. - current_inventory: Dictionary with item names as keys and their corresponding quantities as values. - new_shipments: List of tuples, each containing an item name and quantity to be added to the inventory. The function should update the quantities of existing items and add new items to the inventory as needed. It should return an updated dictionary representing the modified inventory. for item, quantity in new_shipments: if item in current_inventory: current_inventory[item] += quantity else: current_inventory[item] = quantity return current_inventory"},{"question":"Write a Python function that takes a list of integers and returns a new list with each integer squared, ensuring that negative integers are converted to their absolute value before squaring. If the list is empty, the function should return an empty list. Example: For the list [1, -2, 3, -4], the output should be [1, 4, 9, 16].","solution":"def square_and_abs(input_list): Returns a new list with each integer squared, ensuring that negative integers are converted to their absolute value before squaring. return [abs(x) ** 2 for x in input_list]"},{"question":"# Course Enrollment System Create a command-line application in Python that allows managing a course enrollment system. The application should be capable of the following operations: 1. **Add a New Course**: Users can add a new course by providing a unique course code and course name. 2. **Delete a Course**: Users can delete a course by providing the course code. 3. **Enroll a Student**: Users can enroll a student in a course by providing the student ID and course code. Ensure a student cannot be enrolled in the same course more than once. 4. **Retrieve Course Information**: Users can retrieve the list of students enrolled in a course by providing the course code. 5. **Retrieve Student Information**: Users can get a list of courses a student is enrolled in by providing the student ID. # Example ```plaintext Commands: 1. Add Course 2. Delete Course 3. Enroll Student 4. Retrieve Course Information 5. Retrieve Student Information 6. Exit Enter command: 1 Enter course code: CS101 Enter course name: Introduction to Computer Science Course CS101 added successfully. Enter command: 3 Enter student ID: 12345 Enter course code: CS101 Student 12345 enrolled in CS101 successfully. Enter command: 4 Enter course code: CS101 Students enrolled in CS101: 1. Student ID: 12345 Enter command: 6 ``` # Instructions 1. Implement the above functionalities using appropriate data structures. 2. Ensure the application can handle invalid inputs gracefully, providing suitable error messages. 3. Use functions to organize the code for better readability and maintainability. 4. Document the code with comments where necessary to explain the logic used.","solution":"class CourseEnrollmentSystem: def __init__(self): self.courses = {} self.student_courses = {} def add_course(self, course_code, course_name): if course_code in self.courses: return f\\"Course with code {course_code} already exists.\\" self.courses[course_code] = {\\"name\\": course_name, \\"students\\": []} return f\\"Course {course_code} added successfully.\\" def delete_course(self, course_code): if course_code not in self.courses: return f\\"Course with code {course_code} does not exist.\\" del self.courses[course_code] return f\\"Course {course_code} deleted successfully.\\" def enroll_student(self, student_id, course_code): if course_code not in self.courses: return f\\"Course with code {course_code} does not exist.\\" if student_id in self.courses[course_code][\\"students\\"]: return f\\"Student {student_id} is already enrolled in {course_code}.\\" self.courses[course_code][\\"students\\"].append(student_id) if student_id not in self.student_courses: self.student_courses[student_id] = [] self.student_courses[student_id].append(course_code) return f\\"Student {student_id} enrolled in {course_code} successfully.\\" def retrieve_course_information(self, course_code): if course_code not in self.courses: return f\\"Course with code {course_code} does not exist.\\", [] students = self.courses[course_code][\\"students\\"] return f\\"Students enrolled in {course_code}:\\", students def retrieve_student_information(self, student_id): if student_id not in self.student_courses: return f\\"Student with id {student_id} is not enrolled in any courses.\\", [] courses = self.student_courses[student_id] return f\\"Courses student {student_id} is enrolled in:\\", courses"},{"question":"Given a string `s` representing a mathematical expression containing addition and multiplication, evaluate the result of the expression. The string can contain spaces, single-digit non-negative integers (0-9), the `+` operator (for addition), and the `*` operator (for multiplication). Follow the conventional operator precedence - multiplication should be evaluated before addition. # Function Signature: ```python def evaluate_expression(s: str) -> int: ``` # Input: - `s` (string): A string representing the mathematical expression. The length of `s` is between 1 and 100. # Output: - Returns an integer representing the result of the expression. # Example: ```python assert evaluate_expression(\\"2 + 3 * 4\\") == 14 assert evaluate_expression(\\"0 * 1 + 5 * 2\\") == 10 assert evaluate_expression(\\"2 + 3 + 4\\") == 9 assert evaluate_expression(\\"3 * 3 + 2\\") == 11 assert evaluate_expression(\\"7 * 1 + 0 * 3\\") == 7 ``` # Constraints: - The input string will be a valid mathematical expression as per the given description. - Your solution should handle operator precedence correctly. - You may assume that integer overflow will not occur with the given input size.","solution":"def evaluate_expression(s: str) -> int: Evaluate a mathematical expression containing addition and multiplication. Parameters: s (str): A string representing the mathematical expression. Returns: int: The result of the expression. # Remove any whitespace s = s.replace(\' \', \'\') # Convert the expression to a list of tokens tokens = [] i = 0 while i < len(s): if s[i].isdigit(): tokens.append(int(s[i])) else: tokens.append(s[i]) i += 1 # First pass - handle multiplication new_tokens = [] i = 0 while i < len(tokens): if tokens[i] == \'*\': last_number = new_tokens.pop() new_tokens.append(last_number * tokens[i+1]) i += 2 else: new_tokens.append(tokens[i]) i += 1 # Second pass - handle addition result = 0 i = 0 while i < len(new_tokens): if new_tokens[i] == \'+\': result += new_tokens[i+1] i += 2 else: result += new_tokens[i] i += 1 return result"},{"question":"Devise a code that takes an array of integers as input and determines if there exists a pair of indices (i, j) such that i < j and the sum of elements at these indices is a prime number.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def pair_with_prime_sum(arr): Takes an array of integers and returns True if there\'s a pair of indices (i, j) such that i < j and the sum of elements at these indices is a prime number, otherwise False. n = len(arr) for i in range(n): for j in range(i + 1, n): if is_prime(arr[i] + arr[j]): return True return False"},{"question":"Write a function in Python that reads a large text file and counts the frequency of each word using multiple processes. The function should divide the file into chunks and spawn a separate process to count words in each chunk. Ensure that the file reading and word counting operations are thread-safe. Also, the function should merge the results from all processes and return a dictionary containing words as keys and their frequencies as values. Handle the potential situation where the file may not exist or cannot be opened, in which case, the function should raise a custom `FileNotFoundError` with a descriptive error message. Ensure there are no memory leaks and the solution works efficiently for very large files.","solution":"import os import multiprocessing from collections import Counter import re class FileNotFoundError(Exception): pass def read_chunk(file_name, start, size): with open(file_name, \\"rb\\") as f: f.seek(start) chunk = f.read(size) return chunk def count_words_in_chunk(chunk): chunk = chunk.decode(\\"utf-8\\") words = re.findall(r\'bw+b\', chunk.lower()) return Counter(words) def word_count_in_file(file_name, chunk_size=1024*1024): if not os.path.exists(file_name): raise FileNotFoundError(f\\"The file {file_name} does not exist or cannot be opened.\\") file_size = os.path.getsize(file_name) chunks = [(file_name, i, min(chunk_size, file_size - i)) for i in range(0, file_size, chunk_size)] with multiprocessing.Pool(processes=multiprocessing.cpu_count()) as pool: counters = pool.starmap(process_chunk, chunks) total_counter = Counter() for counter in counters: total_counter.update(counter) return dict(total_counter) def process_chunk(file_name, start, size): chunk = read_chunk(file_name, start, size) return count_words_in_chunk(chunk)"},{"question":"Develop a function that processes a list of tuples, where each tuple contains a student\'s name and their respective scores in three subjects. Calculate the average score for each student and categorize them based on the following criteria: - \\"Excellent\\" if the average score is 85 or above, - \\"Good\\" if the average score is between 70 and 84, - \\"Average\\" if the average score is between 50 and 69, - \\"Poor\\" if the average score is below 50. Your program should return a dictionary where the keys are the student names and the values are their respective categories. Apply your function to the following data: students = [ (\\"John\\", 78, 82, 89), (\\"Sarah\\", 91, 85, 88), (\\"Adam\\", 45, 56, 52), (\\"Nancy\\", 69, 72, 65), (\\"Paul\\", 35, 40, 30) ]","solution":"def categorize_students(students): Categorizes students based on their average score. Parameters: students (list): A list of tuples, each containing a student\'s name and their scores in three subjects. Returns: dict: A dictionary where the keys are student names and the values are their categories. categories = {} for student in students: name, *scores = student average_score = sum(scores) / len(scores) if average_score >= 85: category = \\"Excellent\\" elif 70 <= average_score < 85: category = \\"Good\\" elif 50 <= average_score < 70: category = \\"Average\\" else: category = \\"Poor\\" categories[name] = category return categories # Example data students = [ (\\"John\\", 78, 82, 89), (\\"Sarah\\", 91, 85, 88), (\\"Adam\\", 45, 56, 52), (\\"Nancy\\", 69, 72, 65), (\\"Paul\\", 35, 40, 30) ] # Applying the function to example data result = categorize_students(students) print(result)"},{"question":"Given a list of strings containing bracket sequences, write a Python function to determine if each sequence is balanced or not. A sequence is considered balanced if every opening bracket has a corresponding closing bracket of the same type in the correct order. Bracket types to consider are: parentheses `()`, square brackets `[]`, and curly braces `{}`. Function Signature: ```python def is_balanced_sequences(sequences: List[str]) -> List[bool]: pass ``` # Input - `sequences`: A list of strings `sequences` (1 ≤ len(sequences) ≤ 10^4, 1 ≤ len(sequences[i]) ≤ 10^4) containing only the characters `(){}[]`. # Output - Returns a list of booleans, where the i-th boolean value indicates whether the i-th sequence in the input list is balanced. # Example ```python # Example 1 assert is_balanced_sequences([\\"()\\", \\"()\\", \\"{[()]}\\"]) == [True, True, True] # Example 2 assert is_balanced_sequences([\\"()\\", \\"()\\", \\"({[)]}\\"]) == [True, True, False] # Example 3 assert is_balanced_sequences([\\"}\\", \\"{[()]\\"]) == [False, True] ``` # Note - Utilize an appropriate data structure (e.g., a stack) to manage and check the brackets to ensure balanced sequences efficiently. - Consider the constraints related to the number of sequences and the length of each sequence to ensure optimal performance.","solution":"from typing import List def is_balanced_sequences(sequences: List[str]) -> List[bool]: def is_balanced(sequence: str) -> bool: stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in sequence: if char in bracket_map.values(): stack.append(char) elif char in bracket_map: if not stack or stack[-1] != bracket_map[char]: return False stack.pop() return not stack return [is_balanced(seq) for seq in sequences]"},{"question":"Design a Python function that accepts a list of tuples where each tuple contains a name (string) and a list of grades (floats). The function should return a dictionary where the keys are the names, and the values are the average grade for each name. If the list of grades is empty for a particular name, the average grade should be reported as `None`. input_data = [ (\\"Jane\\", [90.5, 85.0, 92.5]), (\\"Bob\\", [70.0, 75.5]), (\\"Alice\\", [88.0, 92.5, 91.0, 85.5]), (\\"Tom\\", []) ]","solution":"def calculate_average_grades(data): Returns a dictionary with names as keys and the average of grades as values. If the list of grades is empty for a particular name, the average grade is reported as None. Args: data (list of tuples): Each tuple contains a name (string) and a list of grades (floats) Returns: dict: names as keys and average grades as values average_grades = {} for name, grades in data: if grades: average_grades[name] = sum(grades) / len(grades) else: average_grades[name] = None return average_grades"},{"question":"Design and implement a function in Python that reads a large text file and provides a summary of its contents. The summary should include the total word count, the frequency of each word, and the top 10 most common words in the file. Furthermore, the function should be optimized to handle reading large files efficiently without consuming excessive memory. This task requires knowledge of file I/O operations, text processing, and efficient data handling in Python.","solution":"from collections import Counter def summarize_large_text_file(file_path): Summarizes the contents of a large text file. Args: - file_path: str, path to the text file. Returns: - A dictionary with the total word count, the frequency of each word, and the top 10 most common words. word_count = 0 word_freq = Counter() with open(file_path, \'r\', encoding=\'utf-8\') as file: for line in file: words = line.split() word_count += len(words) word_freq.update(words) most_common_words = word_freq.most_common(10) return { \'total_word_count\': word_count, \'word_frequency\': dict(word_freq), \'top_10_words\': most_common_words }"},{"question":"Write a program that takes an array of integers and returns a new array where each element at index i of the new array is the product of all the numbers in the original array except the one at i. For example, given [1, 2, 3, 4], the output should be [24, 12, 8, 6]. You are not allowed to use division in this solution.","solution":"def product_except_self(nums): Takes an array of integers and returns a new array where each element at index i is the product of all the numbers in the original array except the one at i. length = len(nums) result = [1] * length # Calculate left products left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Calculate right products and combine with previous result right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Implement the function `find_substring_indices(s: str, t: str) -> list`: The function takes two strings `s` and `t` as input and returns a list of all start indices in `s` where the substring `t` occurs. The indices should be sorted in ascending order. If `t` is not present in `s`, the function should return an empty list. # Examples: ```python >>> find_substring_indices(\\"abracadabra\\", \\"abra\\") [0, 7] >>> find_substring_indices(\\"teststringtest\\", \\"test\\") [0, 10] >>> find_substring_indices(\\"hello\\", \\"world\\") [] ``` # Constraints: - `s` and `t` will consist of lowercase English letters. - Length of `s` will be between 0 and 1000. - Length of `t` will be between 1 and 100.","solution":"def find_substring_indices(s: str, t: str) -> list: Returns a list of all start indices in `s` where the substring `t` occurs. indices = [] sub_len = len(t) for i in range(len(s) - sub_len + 1): if s[i:i + sub_len] == t: indices.append(i) return indices"},{"question":"Write a function that accepts an array of strings and returns a new array containing only the strings that are palindromes. A palindrome is a word that reads the same forwards and backwards, case-insensitively. The function should not use any built-in string reversal methods. Example: Input: [\\"Racecar\\", \\"hello\\", \\"Level\\", \\"world\\", \\"noon\\", \\"Python\\"] Output: [\\"Racecar\\", \\"Level\\", \\"noon\\"]","solution":"def is_palindrome(word): Helper function to check if a given word is a palindrome. The function is case-insensitive. word = word.lower() left, right = 0, len(word) - 1 while left < right: if word[left] != word[right]: return False left += 1 right -= 1 return True def filter_palindromes(words): Returns a new array containing only the palindromes from the input array of strings. return [word for word in words if is_palindrome(word)]"},{"question":"Write a function that takes in a list of integers and returns a new list containing only the prime numbers from the original list, preserving their order. Implement an efficient algorithm to check for primality to ensure the function can handle large input sizes.","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a list containing only the prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"Write a function that takes a string consisting of opening and closing curly braces and returns the minimum number of swaps needed to make the string balanced. A string is considered balanced if each opening brace has a corresponding closing brace in the correct order. For example: - For the input `\\"{}}{`, the function should return 1 since swapping the second and third characters results in the balanced string `\\"{}{}\\"`. - For the input `\\"}}}{\\"`, the function should return 2 since swapping the first and fourth characters and then the second and third characters results in the balanced string `\\"{}{}\\"`. Your function should consider strings only containing `{` and `}`. If the string is already balanced, the function should return 0.","solution":"def min_swaps_to_balance(s): Returns the minimum number of swaps needed to balance the string of curly braces. A balanced string has each opening brace matched with a closing brace in the correct order. # Track the unmatched braces open_brace_count = 0 close_brace_count = 0 for char in s: if char == \'{\': open_brace_count += 1 else: if open_brace_count > 0: open_brace_count -= 1 else: close_brace_count += 1 # The total number of swaps needed is the higher of open_brace_count and close_brace_count divided by 2 return (open_brace_count + close_brace_count) // 2"},{"question":"Write a function `is_prime(n)` that checks whether a given integer `n` is a prime number. Return `True` if `n` is prime, and `False` otherwise. Then, using this helper function, create a function `prime_in_range(start, end)` that returns a list of all prime numbers within the given range `start` to `end`, including both limits. You may assume that `start` and `end` are positive integers where `start <= end`. ```python def is_prime(n): Check if the integer n is a prime number. Parameters: - n (int): The integer to check for primality. Returns: - bool: True if n is prime, otherwise False. # Your code here def prime_in_range(start, end): Find all prime numbers in the range [start, end]. Parameters: - start (int): The starting integer of the range. - end (int): The ending integer of the range. Returns: - list of int: A list of prime numbers in the range [start, end]. # Your code here ```","solution":"def is_prime(n): Check if the integer n is a prime number. Parameters: - n (int): The integer to check for primality. Returns: - bool: True if n is prime, otherwise False. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def prime_in_range(start, end): Find all prime numbers in the range [start, end]. Parameters: - start (int): The starting integer of the range. - end (int): The ending integer of the range. Returns: - list of int: A list of prime numbers in the range [start, end]. primes = [] for number in range(start, end + 1): if is_prime(number): primes.append(number) return primes"},{"question":"Implement a function to solve the \\"Largest Rectangle in Histogram\\" problem. Given a list of non-negative integers representing the heights of bars in a histogram, find the area of the largest rectangle that can be formed within the bounds of the histogram. # Function Signature ```python def largest_rectangle_area(heights: List[int]) -> int: ``` # Input - `heights`: A list of integers where each integer represents the height of a bar in a histogram. - The length of the list is between 1 and 100,000. - Each integer height is between 0 and 10,000. # Output - An integer representing the maximal rectangle area that can be formed from the histogram. # Example ```python print(largest_rectangle_area([2, 1, 5, 6, 2, 3])) # Output: 10 print(largest_rectangle_area([2, 4])) # Output: 4 ``` # Constraints - The solution should be efficient and should ideally operate in O(n) time complexity. - Make sure to consider edge cases like when the list is empty or contains all zero heights. # Hint - You may use a stack to keep track of the indices of the histogram bars. - Think about how to dynamically update the maximum area when traversing each bar in the histogram.","solution":"from typing import List def largest_rectangle_area(heights: List[int]) -> int: Returns the area of the largest rectangle in the histogram. stack = [] # indexes of the bars max_area = 0 # Initialize max area index = 0 # Iterate through all bars of the histogram while index < len(heights): # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max area, if needed max_area = max(max_area, area) # Now, pop the remaining bars from the stack and calculate area with each popped bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Design a function that takes a string as input and returns the length of the longest substring without repeating characters. Optimize the function for efficiency in both time and space complexity. Include both the function signature and an example of how the function should behave.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters from input string s. char_index_map = {} max_length = 0 start = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end max_length = max(max_length, end - start + 1) return max_length # Example # s = \\"abcabcbb\\" => longest substring is \\"abc\\" with length 3 # s = \\"bbbbb\\" => longest substring is \\"b\\" with length 1 # s = \\"pwwkew\\" => longest substring is \\"wke\\" with length 3"},{"question":"You are the proprietor of a small grocery store and you need to manage the inventory of perishable goods. Each item has a shelf life (in days) and you need to ensure that you don\'t overstock items that will expire before they are sold. Consider an inventory list where each item has a name, quantity, and shelf life. Your task is to write a Python program that optimizes the inventory by removing or highlighting items that will expire within the next two days so that they can be either discounted for quick sale or discarded to avoid loss. Given the inventory list, create a function that takes the current inventory and the current day as input and returns a list of items that need to be dealt with within the next two days. The function should be able to handle any number of items in the inventory. Example inventory list: ```python inventory = [ {\\"name\\": \\"Milk\\", \\"quantity\\": 10, \\"shelf_life\\": 3}, {\\"name\\": \\"Bread\\", \\"quantity\\": 20, \\"shelf_life\\": 1}, {\\"name\\": \\"Eggs\\", \\"quantity\\": 30, \\"shelf_life\\": 7}, {\\"name\\": \\"Cheese\\", \\"quantity\\": 5, \\"shelf_life\\": 2} ] ``` Your function should look like this: ```python def manage_inventory(inventory, current_day): # Your code here pass ``` The expected output for the above example and `current_day` value of 5 should be: ```python [{\'name\': \'Bread\', \'quantity\': 20, \'shelf_life\': 1}, {\'name\': \'Cheese\', \'quantity\': 5, \'shelf_life\': 2}] ```","solution":"def manage_inventory(inventory, current_day): Returns a list of items that will expire within the next two days given the current day. Parameters: inventory (list of dict): A list of dictionaries, each representing an item. current_day (int): The current day. Returns: list of dict: A list of items that need to be dealt with within the next two days. items_to_deal_with = [] for item in inventory: expiration_day = current_day + item[\'shelf_life\'] if expiration_day <= current_day + 2: items_to_deal_with.append(item) return items_to_deal_with"},{"question":"Given a Python class `LinkedList` representing a singly linked list, implement the `reverse` method that reverses the linked list in place (i.e., modifies the original list) and, then write a function to check if the linked list is a palindrome. A linked list is considered a palindrome if it reads the same forwards and backwards. Existing Class: ```python class Node: def __init__(self, value=0, next=None): self.value = value self.next = next class LinkedList: def __init__(self): self.head = None def append(self, value): new_node = Node(value) if not self.head: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node def display(self): curr = self.head while curr: print(curr.value, end=\\" -> \\") curr = curr.next print(\\"None\\") ``` Implement the following methods: 1. `reverse`: Reverses the linked list in place. 2. `is_palindrome`: Checks if the linked list is a palindrome. Example: ```python # Creating a LinkedList and appending elements ll = LinkedList() elements = [1, 2, 3, 2, 1] for el in elements: ll.append(el) ll.display() # Output should be: 1 -> 2 -> 3 -> 2 -> 1 -> None # Reversing the LinkedList ll.reverse() ll.display() # Output should be: 1 -> 2 -> 3 -> 2 -> 1 -> None # Check if the LinkedList is a palindrome print(ll.is_palindrome()) # Output should be: True ``` Your implementation should ensure that the linked list is reversed and can correctly identify if it is a palindrome.","solution":"class Node: def __init__(self, value=0, next=None): self.value = value self.next = next class LinkedList: def __init__(self): self.head = None def append(self, value): new_node = Node(value) if not self.head: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node def display(self): curr = self.head while curr: print(curr.value, end=\\" -> \\") curr = curr.next print(\\"None\\") def reverse(self): prev = None current = self.head while current: next_node = current.next # Store next node current.next = prev # Reverse current node\'s pointer prev = current # Move pointers one position ahead. current = next_node self.head = prev def is_palindrome(self): # Fast and slow pointers to find the middle of the linked list slow, fast = self.head, self.head first_half_values = [] while fast and fast.next: first_half_values.append(slow.value) slow = slow.next fast = fast.next.next # If the linked list has an odd number of elements, move slow one step further if fast: slow = slow.next # Compare the second half of the list with the first half while slow: value = first_half_values.pop() if slow.value != value: return False slow = slow.next return True"},{"question":"Given a list of integers, write a function to find the length of the longest contiguous subarray that forms an arithmetic progression (AP). An arithmetic progression is a sequence of numbers where the difference between consecutive numbers is constant. For example, given the list [10, 7, 4, 6, 8, 10, 11], the longest contiguous subarray that forms an AP is [4, 6, 8, 10], and the function should return 4.","solution":"def longest_ap_subarray(arr): if len(arr) < 2: return len(arr) max_length = 1 current_length = 1 current_diff = arr[1] - arr[0] for i in range(1, len(arr)): if arr[i] - arr[i - 1] == current_diff: current_length += 1 else: current_diff = arr[i] - arr[i - 1] current_length = 2 if current_length > max_length: max_length = current_length return max_length"},{"question":"Create a function in Python that accepts a list of integers and returns a new list where every integer is squared. Additionally, ensure that the returned list only includes unique squared values, sorted in ascending order. Include error handling to manage the cases where the input is not a list or contains non-integer elements. Provide test cases to demonstrate the functionality of your implemented function.","solution":"def square_and_deduplicate(input_list): Accepts a list of integers and returns a new list of unique squared integers sorted in ascending order. Args: input_list (list): A list of integers. Returns: list: A sorted list with unique squared integers. Raises: TypeError: If input is not a list. ValueError: If the list contains non-integer elements. if not isinstance(input_list, list): raise TypeError(\\"Input should be a list\\") squared_set = set() for item in input_list: if not isinstance(item, int): raise ValueError(\\"All elements in the list should be integers\\") squared_set.add(item * item) return sorted(squared_set)"},{"question":"Task Write a function to solve the following problem: Problem Statement: Given a string containing only three types of characters: \'(\', \')\' and \'*\', write a function to check whether the string is valid. A string is considered valid if: 1. Any left parenthesis \'(\' must have a corresponding right parenthesis \')\'. 2. Any right parenthesis \')\' must have a corresponding left parenthesis \'(\'. 3. Left parenthesis \'(\' must appear before the corresponding right parenthesis \')\'. 4. \'*\' can be treated as either a single right parenthesis \')\', a single left parenthesis \'(\', or an empty string. Example: ```python assert checkValidString(\\"()\\") == True assert checkValidString(\\"(*)\\") == True assert checkValidString(\\"(*))\\") == True assert checkValidString(\\"((*)\\") == True assert checkValidString(\\"((*)*)\\") == True assert checkValidString(\\"(((**)(**)\\") == True assert checkValidString(\\"(()\\") == False assert checkValidString(\\")*(\\") == False assert checkValidString(\\"(((**))\\") == True ``` Constraints: - The given string will have a maximum length of 100. - The string contains only the characters \'(\', \')\' and \'*\'. - You should focus on writing PEP8 compliant, modular, and easy-to-read code. Code Template: Fill in the implementation of the `checkValidString` function: ```python def checkValidString(s: str) -> bool: YOUR CODE HERE pass # Test cases if __name__ == \\"__main__\\": print(checkValidString(\\"()\\")) # Expected output: True print(checkValidString(\\"(*)\\")) # Expected output: True print(checkValidString(\\"(*))\\")) # Expected output: True print(checkValidString(\\"((*)\\")) # Expected output: True print(checkValidString(\\"((*)*)\\")) # Expected output: True print(checkValidString(\\"(((**)(**)\\")) # Expected output: True print(checkValidString(\\"(()\\")) # Expected output: False print(checkValidString(\\")*(\\")) # Expected output: False print(checkValidString(\\"(((**))\\")) # Expected output: True ```","solution":"def checkValidString(s: str) -> bool: low = high = 0 for char in s: if char == \'(\': low += 1 high += 1 elif char == \')\': if low > 0: low -= 1 high -= 1 else: # char == \'*\' if low > 0: low -= 1 high += 1 if high < 0: return False return low == 0"},{"question":"Create a dictionary from two lists, where one list contains the keys and the other list contains the values. If the lists are of unequal length, the shorter one should be padded with None values. Write a function called `create_dict` that takes two lists as arguments and returns a dictionary. ```python def create_dict(keys, values): # Your code here # Example usage: keys = [\\"one\\", \\"two\\", \\"three\\"] values = [1, 2] result = create_dict(keys, values) print(result) # Output: {\'one\': 1, \'two\': 2, \'three\': None} ```","solution":"def create_dict(keys, values): Creates a dictionary from two lists, where one list contains the keys and the other list contains the values. If the lists are of unequal length, the shorter one is padded with None values. length = max(len(keys), len(values)) padded_keys = keys + [None] * (length - len(keys)) padded_values = values + [None] * (length - len(values)) return dict(zip(padded_keys, padded_values))"},{"question":"Write a function that validates if a given string contains exactly three uppercase letters and ends with the digit \'7\'. The function should return True if both conditions are satisfied, and False otherwise.","solution":"import re def validate_string(s): Checks if the given string contains exactly three uppercase letters and ends with the digit \'7\'. return bool(re.match(r\'^(?:[^A-Z]*[A-Z]){3}[^A-Z]*7\', s))"},{"question":"Write a function that takes a string as an input and returns a dictionary where the keys are words in the string and the values are the frequencies of each word. The function should ignore case and punctuation. Assume the input string contains only letters and spaces, with no digits or special characters other than punctuation marks. Example: Input: \\"Hello, world! Hello.\\" Output: {\\"hello\\": 2, \\"world\\": 1}","solution":"import re from collections import defaultdict def word_frequencies(s): Returns a dictionary where the keys are words in the string s, and the values are the frequencies of each word. The function ignores case and punctuation. # Remove punctuation using regex s = re.sub(r\'[^ws]\', \'\', s) # Convert to lowercase s = s.lower() # Split string into words words = s.split() # Calculate frequencies freq_dict = defaultdict(int) for word in words: freq_dict[word] += 1 return dict(freq_dict)"},{"question":"Create a function that takes a string containing multiple dates in different formats and returns them all standardized to the \\"DD-MM-YYYY\\" format. The function should be able to handle dates in the following formats: \\"MM/DD/YYYY\\", \\"YYYY/MM/DD\\", \\"Month Day, Year\\" (e.g., \\"January 2, 2023\\"), and \\"DD-MM-YYYY\\". Return a list of dates in the standardized format. For simplicity, you can assume all dates are valid and in a consistent format within each given string.","solution":"import re from datetime import datetime def standardize_dates(date_str): Takes a string containing multiple dates in different formats and returns them all in the standardized \\"DD-MM-YYYY\\" format. # Define regex patterns for different date formats patterns = { r\'bd{2}/d{2}/d{4}b\': \\"%m/%d/%Y\\", # MM/DD/YYYY r\'bd{4}/d{2}/d{2}b\': \\"%Y/%m/%d\\", # YYYY/MM/DD r\'bw+ d{1,2}, d{4}b\': \\"%B %d, %Y\\", # Month Day, Year r\'bd{2}-d{2}-d{4}b\': \\"%d-%m-%Y\\" # DD-MM-YYYY (already in standard format) } standardized_dates = [] for pattern, date_format in patterns.items(): matches = re.findall(pattern, date_str) for match in matches: dt = datetime.strptime(match, date_format) standardized_dates.append(dt.strftime(\\"%d-%m-%Y\\")) return standardized_dates"},{"question":"Use Python\'s pandas and matplotlib libraries to read a CSV file containing \'date\' and \'price\' columns, then plot a line graph showing the trend of \'price\' over \'date\'. Additionally, write a function to compute the moving average of the \'price\' over a specified window size and plot it on the same graph.","solution":"import pandas as pd import matplotlib.pyplot as plt def read_and_plot_csv(file_path: str, window_size: int): Reads a CSV file containing \'date\' and \'price\' columns, computes the moving average over the specified window size, and plots both the original price and moving average. Parameters: - file_path: str, path to the CSV file - window_size: int, size of the moving average window # Read CSV file df = pd.read_csv(file_path, parse_dates=[\'date\']) # Compute moving average df[\'moving_average\'] = df[\'price\'].rolling(window=window_size).mean() # Plot data plt.figure(figsize=(10, 5)) plt.plot(df[\'date\'], df[\'price\'], label=\'Price\') plt.plot(df[\'date\'], df[\'moving_average\'], label=f\'{window_size}-day Moving Average\') plt.xlabel(\'Date\') plt.ylabel(\'Price\') plt.title(\'Price and Moving Average Over Time\') plt.legend() plt.grid(True) plt.show() def compute_moving_average(df: pd.DataFrame, window_size: int) -> pd.Series: Computes the moving average of the \'price\' column over a specified window size. Parameters: - df: pd.DataFrame, DataFrame containing \'price\' column - window_size: int, size of the moving average window Returns: - pd.Series, moving average of \'price\' return df[\'price\'].rolling(window=window_size).mean()"},{"question":"Create a function in Python that accepts a list of integers and an integer k, and returns the length of the longest contiguous subarray that contains at most k distinct integers. Ensure your implementation handles both positive and negative numbers efficiently.","solution":"def longest_subarray_with_k_distinct(nums, k): Returns the length of the longest contiguous subarray that contains at most k distinct integers. Parameters: nums (list of int): List of integers. k (int): Maximum number of distinct integers allowed in the subarray. Returns: int: Length of the longest contiguous subarray with at most k distinct integers. from collections import defaultdict n = len(nums) if n == 0 or k == 0: return 0 left = 0 right = 0 max_len = 0 char_map = defaultdict(int) while right < n: char_map[nums[right]] += 1 while len(char_map) > k: char_map[nums[left]] -= 1 if char_map[nums[left]] == 0: del char_map[nums[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"**Create a Python or C program that models the behavior of a basic URL shortening service. The program should be able to accept a long URL, generate a unique short alias for it, and store this mapping. Additionally, the program should be able to retrieve the original long URL when provided with the short alias. Discuss potential data structures and algorithms that ensure efficient storage and retrieval of URLs, and address any scalability concerns.**","solution":"import hashlib from collections import defaultdict class URLShortener: def __init__(self): self.url_map = defaultdict(str) self.hash_map = defaultdict(str) self.base_url = \\"http://short.url/\\" def shorten_url(self, long_url): Generate a short URL for the given long URL. url_hash = hashlib.md5(long_url.encode()).hexdigest()[:6] # Generate a short hash short_url = self.base_url + url_hash self.url_map[short_url] = long_url self.hash_map[long_url] = short_url return short_url def retrieve_url(self, short_url): Retrieve the original long URL for the given short URL. return self.url_map.get(short_url, \\"\\") # Example usage # shortener = URLShortener() # short_url = shortener.shorten_url(\\"http://example.com\\") # original_url = shortener.retrieve_url(short_url) # print(f\\"Short URL: {short_url}\\") # print(f\\"Original URL: {original_url}\\")"},{"question":"Write a function that takes two strings as input and determines if one string is an anagram of the other. An anagram is formed by rearranging the letters of one string to produce the other string, using all the original letters exactly once. The function should be case-insensitive and ignore any spaces. Ensure that your function handles various cases, including different letter casings, special characters, and spaces effectively. Refer to the example function below that is incorrectly implemented: ```python def is_anagram(str1, str2): return sorted(str1) == sorted(str2) ``` Your task is to correct the above function to accurately identify anagrams by handling case insensitivity and ignoring spaces appropriately. Provide test cases that validate your solution with mixed letter cases, spaces, and special characters. Note: Do not use any library functions other than `sorted()` and basic string methods. # Example ```python # Correct Implementation def is_anagram(str1, str2): str1_cleaned = \'\'.join(sorted(c.lower() for c in str1 if c.isalnum())) str2_cleaned = \'\'.join(sorted(c.lower() for c in str2 if c.isalnum())) return str1_cleaned == str2_cleaned # Test Cases print(is_anagram(\\"Listen\\", \\"Silent\\")) # Should return True print(is_anagram(\\"A gentleman\\", \\"Elegant man\\")) # Should return True print(is_anagram(\\"The eyes\\", \\"They see\\")) # Should return True print(is_anagram(\\"Astronomer\\", \\"Moon starer\\")) # Should return True print(is_anagram(\\"Hello\\", \\"world\\")) # Should return False ```","solution":"def is_anagram(str1, str2): Determines if two strings are anagrams of each other. This function is case-insensitive and ignores spaces. str1_cleaned = \'\'.join(sorted(c.lower() for c in str1 if c.isalnum())) str2_cleaned = \'\'.join(sorted(c.lower() for c in str2 if c.isalnum())) return str1_cleaned == str2_cleaned"},{"question":"Create a function in Python that takes a string as an input and returns the first non-repeated character in the string. If there is no unique character, return `None`. For example, given the input \\"swiss\\", the function should return \\"w\\" because it is the first character in the string that does not repeat.","solution":"def first_non_repeated_character(s): Returns the first non-repeated character in the string s. If there is no unique character, returns None. char_count = {} # First pass: count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass: find the first character with count 1 for char in s: if char_count[char] == 1: return char return None"},{"question":"Create a function in Python that takes a list of integers and returns the maximum sum of a contiguous subarray within the list. The function should use the Kadane\'s Algorithm to accomplish this task. The function should be efficient with a time complexity of O(n). Additionally, implement two helper functions: 1. `max_subarray_start_index`: This function should return the starting index of the subarray with the maximum sum. 2. `max_subarray_end_index`: This function should return the ending index of the subarray with the maximum sum. Ensure your solution includes error handling for edge cases, such as an empty input list. Write a series of unit tests to validate the correctness of your approach. These tests should cover various scenarios including edge cases and typical use cases.","solution":"def max_sum_subarray(arr): Returns the maximum sum of a contiguous subarray using Kadane\'s Algorithm. if not arr: raise ValueError(\\"Input list cannot be empty\\") max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def max_subarray_start_index(arr): Returns the starting index of the subarray with the maximum sum. if not arr: raise ValueError(\\"Input list cannot be empty\\") max_sum = current_sum = arr[0] start_index = temp_start = 0 for i in range(1, len(arr)): if arr[i] > current_sum + arr[i]: temp_start = i current_sum = arr[i] else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start_index = temp_start return start_index def max_subarray_end_index(arr): Returns the ending index of the subarray with the maximum sum. if not arr: raise ValueError(\\"Input list cannot be empty\\") max_sum = current_sum = arr[0] start_index = end_index = temp_start = 0 for i in range(1, len(arr)): if arr[i] > current_sum + arr[i]: temp_start = i current_sum = arr[i] else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start_index = temp_start end_index = i return end_index"},{"question":"Create a function named `find_max` that accepts an array of integers and returns the largest integer in the array. If the array is empty, the function should return `None`. Avoid using built-in functions like `max`.","solution":"def find_max(arr): Returns the largest integer in the array. If the array is empty, returns None. if not arr: return None max_value = arr[0] for num in arr: if num > max_value: max_value = num return max_value"},{"question":"Write a function that takes a string as input and returns the longest palindrome that can be found within the string. It should ignore non-alphanumeric characters and case should not be considered. If there are multiple palindromes of the same length, return the one that appears first. Ensure your solution is optimized for efficiency.","solution":"def longest_palindrome(s): Returns the longest palindrome in the input string, ignoring non-alphanumeric characters and case. If there are multiple palindromes of the same length, returns the one that appears first. import re def is_palindrome(s): return s == s[::-1] # Clean up the string to ignore non-alphanumeric characters and case cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', s.lower()) max_len = 0 longest = \\"\\" for i in range(len(cleaned)): for j in range(i, len(cleaned)): substr = cleaned[i:j+1] if is_palindrome(substr) and len(substr) > max_len: max_len = len(substr) longest = cleaned[i:j+1] return longest # Example usage: # print(longest_palindrome(\\"A man, a plan, a canal: Panama\\")) # Should print a single character palindrome like \'a\' or \'n\'"},{"question":"Write a function in Python that takes as input a string containing a mathematical expression (involving integers and the operators +, -, *, /) and evaluates it to return the result. The expression must be correctly parenthesized, and you should not use the eval function or other in-built evaluation methods. Your function should account for operator precedence and be able to handle nested parentheses. Example: Input: \\"3 + (2 * (1 + 4))\\" Output: 13","solution":"def evaluate(expression): Evaluates a mathematical expression involving integers and the operators +, -, *, / with correct parenthesis handling and operator precedence. Params: expression (str): The mathematical expression to evaluate. Returns: int: The result of the evaluated expression. def parse_expression(expression): tokens = [] number = \'\' for char in expression: if char.isdigit(): number += char else: if number: tokens.append(int(number)) number = \'\' if char in \'()+-*/\': tokens.append(char) if number: tokens.append(int(number)) return tokens def helper(tokens): def apply_op(op, second, first): if op == \'+\': return first + second if op == \'-\': return first - second if op == \'*\': return first * second if op == \'/\': return first // second ops = [] values = [] i = 0 while i < len(tokens): token = tokens[i] if isinstance(token, int): values.append(token) elif token == \'(\': j = i parentheses_count = 0 while i < len(tokens): if tokens[i] == \'(\': parentheses_count += 1 if tokens[i] == \')\': parentheses_count -= 1 if parentheses_count == 0: break i += 1 values.append(helper(tokens[j + 1:i])) elif token in \'+-*/\': while (ops and ops[-1] in \'+-*/\' and (op_precedence[token] <= op_precedence[ops[-1]])): values.append(apply_op(ops.pop(), values.pop(), values.pop())) ops.append(token) i += 1 while ops: values.append(apply_op(ops.pop(), values.pop(), values.pop())) return values[0] op_precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} tokens = parse_expression(expression) result = helper(tokens) return result"},{"question":"Write a function that identifies whether the given measurements form the sides of a right-angled triangle. The function should take three positive integers as inputs representing the side lengths of the triangle. The function should return `True` if the sides form a right-angled triangle and `False` otherwise. Example: - Input: 3, 4, 5 - Output: True - Input: 5, 5, 5 - Output: False","solution":"def is_right_angled_triangle(a, b, c): Returns True if the given sides form a right-angled triangle, otherwise False. The sides form a right-angled triangle if the square of one side is equal to the sum of the squares of the other two sides. # Sort the sides to ensure the largest side is treated as the hypotenuse sides = sorted([a, b, c]) return sides[0]**2 + sides[1]**2 == sides[2]**2"},{"question":"Determine if a given string can be segmented into a space-separated sequence of one or more dictionary words. Consider the dictionary is provided as a list of words. Write a function `wordBreak(s: str, wordDict: List[str]) -> bool` that takes a string `s` and a list of words `wordDict`, and returns `True` if `s` can be segmented into a sequence of one or more dictionary words, otherwise return `False`. # Input - `s`: a string consisting of lowercase English letters (1 ≤ len(s) ≤ 300). - `wordDict`: a list of non-empty words consisting of lowercase English letters (1 ≤ len(wordDict) ≤ 1000, 1 ≤ len(word) ≤ 20). # Output - Return a boolean value `True` or `False`. # Example ```python wordBreak(\\"leetcode\\", [\\"leet\\", \\"code\\"]) # returns True wordBreak(\\"applepenapple\\", [\\"apple\\", \\"pen\\"]) # returns True wordBreak(\\"catsandog\\", [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"]) # returns False ``` In this example, the function checks if the string `s` can be broken down into words from the dictionary. For instance, \\"leetcode\\" can be segmented as \\"leet\\" + \\"code\\", hence the function would return `True` for this input. If segmentation isn\'t possible, the function should return `False`.","solution":"def wordBreak(s: str, wordDict: list) -> bool: Checks if a string can be segmented into a space-separated sequence of one or more dictionary words. word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)]"},{"question":"Write a function in Python named `flatten_dict` that takes a nested dictionary as an input and returns a new dictionary with no nested structures. The function should concatenate the keys from the nested dictionaries with an underscore (_). For example, if the nested dictionary has `{\\"a\\": {\\"b\\": 1, \\"c\\": 2}, \\"d\\": 3}`, the output should be `{\\"a_b\\": 1, \\"a_c\\": 2, \\"d\\": 3}`. Ensure your function works for dictionaries nested at multiple levels.","solution":"def flatten_dict(d, parent_key=\'\', sep=\'_\'): Flattens a nested dictionary. :param d: The nested dictionary to flatten :param parent_key: The base key for concatenation (used for recursion) :param sep: The separator between parent and child keys :return: A flattened dictionary with keys concatenated by the separator items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Develop a function that simulates a simple traffic light system for a four-way intersection. The function should manage the traffic flow, ensuring that not all lights are green simultaneously. The traffic lights should follow a sequence (e.g., North-South green, then East-West green). Implement a mechanism to allow the system to operate continuously in real-time, and include ways to simulate pedestrian crosswalks that interact with the traffic lights correctly. Output the current state of each light and pedestrian signal at each step.","solution":"import time class TrafficLightSystem: def __init__(self): self.states = [\'North-South Green\', \'East-West Green\'] self.current_state = 0 self.pedestrian_signal = \\"Don\'t Walk\\" def change_state(self): Changes the traffic light state to the next sequence and toggles the pedestrian signal. self.current_state = (self.current_state + 1) % len(self.states) if self.pedestrian_signal == \\"Walk\\": self.pedestrian_signal = \\"Don\'t Walk\\" else: self.pedestrian_signal = \\"Walk\\" def get_current_state(self): Returns the current state of the traffic lights and pedestrian signal. return self.states[self.current_state], self.pedestrian_signal def simulate_traffic_light(self, cycles): Simulates the traffic light system for a given number of cycles. for _ in range(cycles): print(f\\"Traffic Lights: {self.states[self.current_state]}, Pedestrian Signal: {self.pedestrian_signal}\\") time.sleep(1) self.change_state()"},{"question":"Develop a function that takes a string containing Roman numerals and converts it to its equivalent integer value. The function should handle invalid sequences and return an error message for them. Additionally, ensure your solution accounts for both uppercase and lowercase input. Example: ```python roman_to_integer(\\"XIV\\") # should return 14 roman_to_integer(\\"MMXXI\\") # should return 2021 roman_to_integer(\\"abc\\") # should return \\"Invalid Roman numeral\\" ```","solution":"def roman_to_integer(roman: str) -> int: roman = roman.upper() roman_dict = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} invalid_sequences = [\'IIII\', \'VV\', \'XXXX\', \'LL\', \'CCCC\', \'DD\', \'MMMM\', \'IL\', \'IC\', \'ID\', \'IM\', \'VX\', \'VL\', \'VC\', \'VD\', \'VM\', \'XD\', \'XM\', \'LC\', \'LD\', \'LM\', \'DM\'] for invalid in invalid_sequences: if invalid in roman: return \\"Invalid Roman numeral\\" if not all(char in roman_dict for char in roman): return \\"Invalid Roman numeral\\" integer_value = 0 prev_value = 0 for char in reversed(roman): value = roman_dict[char] if value < prev_value: integer_value -= value else: integer_value += value prev_value = value return integer_value"},{"question":"Write a function that takes a string containing a sentence with words separated by single spaces and returns a dictionary where the keys are the words and the values are the number of times each word appears in the sentence. Ignore case (i.e., treat \\"Word\\" and \\"word\\" as the same word) and remove any punctuation. For instance, given the input \\"Hello, world! Hello again, world.\\", the function should return `{\\"hello\\": 2, \\"world\\": 2, \\"again\\": 1}`. Consider any non-alphanumeric character as punctuation.","solution":"import re from collections import defaultdict def word_count(sentence): Returns a dictionary where keys are words and values are the number of times each word appears in the given sentence. The function treats words case-insensitively and ignores punctuation. # Remove punctuation and normalize to lowercase clean_sentence = re.sub(r\'[W_]+\', \' \', sentence).lower() words = clean_sentence.split() # Count occurrences word_freq = defaultdict(int) for word in words: word_freq[word] += 1 return dict(word_freq)"},{"question":"Write a Python program that takes a string and returns the first non-repeating character. If all characters are repeating or the string is empty, the program should return None. Ensure your solution is optimized for performance and can handle edge cases, such as strings with varying capitalization and special characters. Consider the efficiency of your approach and justify your choice of algorithm if possible.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters are repeating or the string is empty, returns None. char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 for char in s: if char_count[char] == 1: return char return None"},{"question":"Write a program that finds all anagrams of a given string present within a dictionary of words. The program should accept two inputs: the string and the dictionary (as a list of words). It should return all the anagrams from the dictionary that can be formed using all characters of the given string exactly once. The solution should handle case sensitivity and efficiently process large dictionaries.","solution":"from collections import Counter def find_anagrams(target_string, dictionary): Finds all anagrams of the target_string present in the dictionary. Parameters: - target_string: str, the string for which we need to find anagrams. - dictionary: list of str, the list of words in which to search for anagrams. Returns: - list of str, the list of anagrams found in the dictionary. target_counter = Counter(target_string) anagrams = [] for word in dictionary: if Counter(word) == target_counter: anagrams.append(word) return anagrams"},{"question":"You are given a string that contains multiple instances of the pattern `\\"score\\": [num, num, num]` where `num` represents a numerical value. Your task is to modify each of these instances by adding the average of the three numbers at the end of the array. For instance, `\\"score\\": [2, 3, 4]` should be transformed into `\\"score\\": [2, 3, 4, 3.0]`, where 3.0 is the average of 2, 3, and 4. Write a Python function that performs this transformation and returns the modified string while preserving the original format.","solution":"import re def add_average_to_scores(input_string): Adds the average of three numbers to each \\"score\\" value in the input string. def calculate_average(match): numbers = list(map(int, match.group(1).split(\', \'))) average = sum(numbers) / len(numbers) return f\'\\"score\\": [{\\", \\".join(map(str, numbers))}, {average:.1f}]\' return re.sub(r\'\\"score\\": [(d+, d+, d+)]\', calculate_average, input_string)"},{"question":"A company uses a custom method to display a matrix in a diagonal wave pattern. Given a matrix of integers, output a list of its values traversed in a diagonal wave order starting from the top-left corner. For example, given the following matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The diagonal wave order traversal would be: `[1, 2, 4, 7, 5, 3, 6, 8, 9]` Write a function `diagonal_wave(matrix)` that takes a 2D list of integers `matrix` and returns a list of integers that represents the matrix elements in a diagonal wave order. # Function Signature ```python def diagonal_wave(matrix: List[List[int]]) -> List[int]: ``` # Input - `matrix`: A list of n list(s), where each list contains m integers. # Output - A list of integers representing the matrix elements in diagonal wave order. # Constraints - 1 <= n, m <= 100 - `matrix[i][j]` is an integer within the range [-10^4, 10^4] # Example ```python assert diagonal_wave([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) == [1, 2, 4, 7, 5, 3, 6, 8, 9] ``` # Note - The traversal starts from the top-left corner. - For each wave, alternates between moving diagonally up-right and diagonally down-left.","solution":"def diagonal_wave(matrix): if not matrix or not matrix[0]: return [] n, m = len(matrix), len(matrix[0]) result = [] for wave in range(n + m - 1): if wave % 2 == 0: # For even wave index, move diagonally down-left row = min(wave, n - 1) col = max(0, wave - n + 1) while row >= 0 and col < m: result.append(matrix[row][col]) row -= 1 col += 1 else: # For odd wave index, move diagonally up-right col = min(wave, m - 1) row = max(0, wave - m + 1) while col >= 0 and row < n: result.append(matrix[row][col]) row += 1 col -= 1 return result"},{"question":"Create a Python function that takes a list of integers and a target integer. Your function should find and return two distinct indices of the list whose elements sum up to the target integer. If there are no such elements, return an empty tuple. If there are multiple pairs, return the pair with the lowest indices combination. ```python def find_two_sum_indices(nums, target): Finds two indices in the list \'nums\' such that the elements at these indices add up to \'target\'. :param nums: List of integers :param target: Target integer :return: Tuple containing two indices or an empty tuple if no pair is found # Your code here # Example Usage nums = [2, 7, 11, 15] target = 9 print(find_two_sum_indices(nums, target)) # Output should be (0, 1) ```","solution":"def find_two_sum_indices(nums, target): Finds two indices in the list \'nums\' such that the elements at these indices add up to \'target\'. :param nums: List of integers :param target: Target integer :return: Tuple containing two indices or an empty tuple if no pair is found num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return ()"},{"question":"Write a function that takes a list of integers as input and returns a new list where each element is multiplied by the number of times it appears in the original list. Example: Input: [2, 3, 2, 4] Output: [4, 3, 4, 4] Explanation: - The number 2 appears twice, so each instance of 2 is multiplied by 2 (resulting in 4). - The number 3 appears once, so it remains 3. - The number 4 appears once, so it remains 4.","solution":"def multiply_by_frequency(lst): Takes a list of integers and returns a new list where each element is multiplied by the number of times it appears in the original list. from collections import Counter frequency = Counter(lst) return [x * frequency[x] for x in lst]"},{"question":"Create a function in Python that accepts an integer array and a target sum, and returns all unique pairs in the array that add up to the target sum. The array should not contain duplicate pairs, and pairs should be returned in a sorted order. Additionally, provide an incorrect implementation of this function and ask the candidate to correct the errors and optimize the function if possible.","solution":"def find_pairs(nums, target): Function to find all unique pairs in the array that add up to the target sum. Parameters: nums (list): List of integers target (int): Target sum to find pairs for Returns: list: List of tuples representing unique pairs that add up to the target sum nums.sort() left, right = 0, len(nums) - 1 result = [] while left < right: current_sum = nums[left] + nums[right] if current_sum == target: result.append((nums[left], nums[right])) left += 1 right -= 1 # Ensure we skip over duplicate values while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif current_sum < target: left += 1 else: right -= 1 return result"},{"question":"Here\'s a new piece of code that was run through a poorly functioning scanner. Please help correct the following Python code: clazs Solution: def twoSum(sclf_, numb3rsq, tarqet): for i in r&nge(len(numb3rs)): foR j _1i in ·range(i + 1, len(nvmbe#s),: if nvmbers[i] + numbe#s[j] == t4rg\\": return [~i,~j] retUrn N0fLE The goal of the function twoSum is to take in an array of integers `numbers` and an integer `target`, and return the indices of the two numbers such that they add up to `target`. Correct the syntax, variable names, and logic errors in the given code so that it accurately solves the problem. Note that the pair of indices should be returned as a list. Example: ```python s = Solution() print(s.twoSum([2, 7, 11, 15], 9)) # Output should be [0, 1] ```","solution":"class Solution: def twoSum(self, numbers, target): for i in range(len(numbers)): for j in range(i + 1, len(numbers)): if numbers[i] + numbers[j] == target: return [i, j] return None"},{"question":"Given a 2D grid of size `m x n` that represents a map of heights, where `heights[row][col]` represents the height at that point `(row, col)`. You are situated at the top-left corner of the grid and you want to get to the bottom-right corner. You can move up, down, left, or right at each step. The effort of a path is defined as the maximum absolute difference in heights between consecutive cells of the path. Your task is to find the minimum effort path from the top-left corner to the bottom-right corner. For example, consider the following grid: Example 1: Input: heights = [[1,2,2],[3,8,2],[5,3,5]] Output: 2 Explanation: The path with the minimum effort is [[1,2,2],[2,2,2],[2,5,5]], with an effort of 2. Example 2: Input: heights = [[1,2,3],[3,8,4],[5,3,5]] Output: 1 Explanation: The path with the minimum effort is [[1,2,3],[2,3,4],[3,4,5]], with an effort of 1. Constraints: 1. `m == heights.length` 2. `n == heights[i].length` 3. `1 <= m, n <= 100` 4. `1 <= heights[i][j] <= 10^6`","solution":"import heapq from typing import List def minimumEffortPath(heights: List[List[int]]) -> int: rows = len(heights) cols = len(heights[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < rows and 0 <= y < cols def dijkstra(): efforts = [[float(\'inf\')] * cols for _ in range(rows)] efforts[0][0] = 0 min_heap = [(0, 0, 0)] # (effort, x, y) while min_heap: current_effort, x, y = heapq.heappop(min_heap) if x == rows - 1 and y == cols - 1: return current_effort for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): next_effort = max(current_effort, abs(heights[nx][ny] - heights[x][y])) if next_effort < efforts[nx][ny]: efforts[nx][ny] = next_effort heapq.heappush(min_heap, (next_effort, nx, ny)) return -1 # Unreachable return dijkstra()"},{"question":"You are provided with a dataset on house prices in a city (https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data). Implement a linear regression model to predict the house prices based on given features. You are required to handle any missing values beforehand and use appropriate techniques to evaluate the model\'s performance. Visualize the predicted versus actual prices using matplotlib to substantiate your analysis.","solution":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, r2_score import matplotlib.pyplot as plt def load_and_clean_data(filepath): # Load data data = pd.read_csv(filepath) # Handle missing values by filling with the mean for numerical columns for column in data.select_dtypes(include=np.number).columns: data[column].fillna(data[column].mean(), inplace=True) # Fill missing values with the mode for categorical columns for column in data.select_dtypes(include=\'object\').columns: data[column].fillna(data[column].mode()[0], inplace=True) return data def encode_and_split_data(data, target_column): # One-hot encode the categorical features data = pd.get_dummies(data) # Split features and target X = data.drop(columns=target_column) y = data[target_column] # Split into training and testing data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) return X_train, X_test, y_train, y_test def train_linear_regression(X_train, y_train): lr = LinearRegression() lr.fit(X_train, y_train) return lr def evaluate_model(lr, X_test, y_test): y_pred = lr.predict(X_test) mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) return mse, r2, y_test, y_pred def plot_predictions(y_test, y_pred): plt.figure(figsize=(10, 6)) plt.scatter(y_test, y_pred, edgecolor=\'k\', alpha=0.7) plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], \'--r\', lw=2) plt.xlabel(\'Actual\') plt.ylabel(\'Predicted\') plt.title(\'Actual vs Predicted House Prices\') plt.show() def main(filepath, target_column): data = load_and_clean_data(filepath) X_train, X_test, y_train, y_test = encode_and_split_data(data, target_column) lr = train_linear_regression(X_train, y_train) mse, r2, y_test, y_pred = evaluate_model(lr, X_test, y_test) plot_predictions(y_test, y_pred) return mse, r2"},{"question":"Write a Python function that takes an integer array `arr` and an integer `n` as input, and returns the length of the longest subarray with elements in strictly increasing order where the difference between consecutive elements is `n`. Ensure that your solution handles edge cases such as empty arrays and arrays with less than two elements gracefully.","solution":"def longest_increasing_subarray(arr, n): Returns the length of the longest subarray with elements in strictly increasing order where the difference between consecutive elements is n. If the array is empty or has less than two elements, returns 0. if len(arr) < 2: return 0 max_length = 0 current_length = 1 for i in range(1, len(arr)): if arr[i] - arr[i - 1] == n: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Explain how the Knuth-Morris-Pratt (KMP) algorithm improves pattern searching within a text. Illustrate the concept with an example, detailing the preprocessing step and the search step. Highlight the advantages of using KMP over the naive string matching algorithm.","solution":"def compute_lps(pattern): length = 0 lps = [0] * len(pattern) i = 1 while i < len(pattern): if pattern[i] == pattern[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps def kmp_search(text, pattern): lps = compute_lps(pattern) i = 0 j = 0 matches = [] while i < len(text): if pattern[j] == text[i]: i += 1 j += 1 if j == len(pattern): matches.append(i - j) j = lps[j - 1] elif i < len(text) and pattern[j] != text[i]: if j != 0: j = lps[j - 1] else: i += 1 return matches"},{"question":"Design a Python function named `calculate_fibonacci(n)` that receives a single integer parameter `n` and returns the first `n` numbers in the Fibonacci sequence as a list. Ensure the function handles the base cases where `n` is less than or equal to 1 correctly, and returns an empty list if `n` is zero. Aim for a solution that efficiently generates the sequence using iteration rather than recursion. Consider edge cases and provide appropriate documentation within the code to explain the logic.","solution":"def calculate_fibonacci(n): Returns the first n numbers in the Fibonacci sequence. :param n: The number of elements in the Fibonacci sequence to generate. :type n: int :return: A list containing the first n Fibonacci numbers. :rtype: list if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fibonacci_seq = [0, 1] for i in range(2, n): next_fib = fibonacci_seq[-1] + fibonacci_seq[-2] fibonacci_seq.append(next_fib) return fibonacci_seq"},{"question":"Write a program that takes as input a string representing a mathematical expression containing integers and the operators \'+\', \'-\', \'*\', and \'/\'. The program should verify if the expression is valid, compute the result, and handle any errors appropriately. Note that the expression will not contain any parentheses and will follow standard operator precedence rules. Examples: - Input: \\"3+2*2\\" Output: 7 - Input: \\" 3/2 \\" Output: 1.5 - Input: \\" 3+5 / 2 \\" Output: 5.5 Requirements: 1. Implement a function to check if the mathematical expression is valid, ensuring there are no invalid characters or syntax errors. 2. Apply operator precedence and compute the result correctly. 3. Handle division by zero and other potential errors gracefully, returning an appropriate error message. 4. Ensure the input string is trimmed of any unnecessary whitespace before processing.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing integers and the operators \'+\', \'-\', \'*\', and \'/\'. :param expression: str :return: float or str (error message) try: # Remove whitespace expression = expression.replace(\\" \\", \\"\\") # Check for invalid characters valid_chars = set(\\"0123456789+-*/\\") for char in expression: if char not in valid_chars: return \\"Invalid character detected\\" def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': if b == 0: raise ValueError(\\"Division by zero\\") return a / b # Helper function to perform stack-based evaluation def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[-1] tokens = [] for char in expression: if char.isdigit() or char in \'+-*/\': tokens.append(char) result = evaluate(tokens) return result except Exception as e: return str(e)"},{"question":"Implement a priority queue using a binary heap in Python. Your priority queue should support the following operations: 1. `insert(item, priority)`: Insert an item with a given priority into the priority queue. 2. `extract_max()`: Remove and return the item with the highest priority. 3. `increase_priority(item, new_priority)`: Increase the priority of a specified item to a new priority if the new priority is higher than the current priority. Write a class `PriorityQueue` to encapsulate these behaviors. Use the binary heap structure to efficiently manage the priority queue operations. Provide an example demonstrating your class in action by inserting several items with varying priorities, extracting the maximum priority item, and increasing the priority of one of the items.","solution":"import heapq class PriorityQueue: def __init__(self): self.heap = [] self.entry_finder = {} self.REMOVED = \'<removed-task>\' self.counter = 0 def insert(self, item, priority): if item in self.entry_finder: self.remove_item(item) entry = [-priority, self.counter, item] self.entry_finder[item] = entry heapq.heappush(self.heap, entry) self.counter += 1 def extract_max(self): while self.heap: priority, count, item = heapq.heappop(self.heap) if item is not self.REMOVED: del self.entry_finder[item] return item raise KeyError(\'pop from an empty priority queue\') def remove_item(self, item): entry = self.entry_finder.pop(item) entry[-1] = self.REMOVED def increase_priority(self, item, new_priority): if item in self.entry_finder: entry = self.entry_finder[item] if -entry[0] < new_priority: self.insert(item, new_priority) else: raise KeyError(\'item not found in the priority queue\') # Example demonstrating the usage pq = PriorityQueue() pq.insert(\\"apple\\", 3) pq.insert(\\"banana\\", 2) pq.insert(\\"cherry\\", 5) print(pq.extract_max()) # Should return \'cherry\' pq.increase_priority(\\"banana\\", 6) print(pq.extract_max()) # Should return \'banana\' print(pq.extract_max()) # Should return \'apple\'"},{"question":"Incorporate the following Python libraries: numpy, pandas, and matplotlib.pyplot. Create a DataFrame using pandas with 3 columns: \'A\', \'B\', and \'C\', containing 15 random integer values each between 1 and 100 using numpy\'s random.randint function. Then, generate a histogram of the \'A\' column using matplotlib\'s hist function with 5 bins, a color of \'skyblue\', and edge color of \'black\'. Finally, format the plot by adding appropriate x and y labels and a title. Your task is to display the plot using matplotlib\'s show function. Proceed with the solution.","solution":"import numpy as np import pandas as pd import matplotlib.pyplot as plt def generate_dataframe_and_plot_histogram(): # Generate 15 random integers between 1 and 100 for columns \'A\', \'B\', and \'C\' data = { \'A\': np.random.randint(1, 101, size=15), \'B\': np.random.randint(1, 101, size=15), \'C\': np.random.randint(1, 101, size=15) } # Create a DataFrame df = pd.DataFrame(data) # Plot the histogram of column \'A\' plt.hist(df[\'A\'], bins=5, color=\'skyblue\', edgecolor=\'black\') # Add labels and title plt.xlabel(\'Value\') plt.ylabel(\'Frequency\') plt.title(\'Histogram of Column A\') # Display the plot plt.show() # Return the dataframe for testing return df"},{"question":"Construct a Python function that identifies and corrects all instances of misaligned parentheses in a string expression. The function should return the corrected string if possible, or indicate it cannot be corrected if the parentheses are mismatched beyond simple reordering or removal. Include necessary error handling and testing for the function to ensure it performs well with complex nested expressions.","solution":"def correct_parentheses(expression): Identifies and corrects instances of misaligned parentheses in the expression. Returns the corrected string if possible; otherwise, returns \'Cannot be corrected\'. # Stack to keep track of parentheses positions stack = [] for i, char in enumerate(expression): if char == \'(\': stack.append(i) elif char == \')\': if stack: stack.pop() # This pop matches the current \')\' with a previous \'(\' else: # If there\'s no matching \'(\' for this \')\', this is an error return \'Cannot be corrected\' # If the stack is not empty here, we had unmatched \'(\' if stack: return \'Cannot be corrected\' return expression"},{"question":"Write a function that identifies the length of the longest increasing subsequence in a given list of integers. The function should implement dynamic programming and include steps to handle potential errors such as non-numerical entries and empty lists. Provide the erroneous code and request the individual to correct it as part of the assessment. #Erroneous Code# ```python def longest_increasing_subsequence(arr): if not arr: return 0 lis = [1]*len(arr) for i in range(1, len(arr)): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) print(longest_increasing_subsequence([10, 22, 9, 33, \\"21\\", 50, 41, 60, 80])) ``` Note: The provided code will raise an error due to the presence of a non-numerical string in the list. As part of your task, modify the function to handle such cases by excluding non-numerical entries and managing any related exceptions. Review the time complexity of your solution and optimize as necessary.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in arr. Non-numerical entries are ignored. # Filter out non-numeric entries arr = [x for x in arr if isinstance(x, (int, float))] if not arr: return 0 lis = [1] * len(arr) for i in range(1, len(arr)): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"Implement a Word Counter Write a Python function `word_counter` that takes a string as input and returns a dictionary where the keys are unique words and the values are the counts of those words in the input string. The function should ignore the case and punctuation marks. Input The input will be a single string containing words separated by spaces and may contain punctuation marks like commas, periods, exclamation marks, question marks, etc. Output The output should be a dictionary where keys are unique words in lowercase, and values are the number of times each word appears in the input string. Examples ```python word_counter(\\"Hello, hello world!\\") # Output: {\'hello\': 2, \'world\': 1} word_counter(\\"It\'s a beautiful day, isn\'t it?\\") # Output: {\'its\': 1, \'a\': 1, \'beautiful\': 1, \'day\': 1, \'isnt\': 1, \'it\': 1} ``` Requirements - Ignore punctuation while counting. - Consider all words case-insensitively. You may assume that: - The input string will contain only printable ASCII characters.","solution":"import re from collections import Counter def word_counter(text): Takes a string as input and returns a dictionary where keys are unique words (in lowercase and punctuation removed) and values are their respective counts. # Convert text to lowercase text = text.lower() # Remove punctuation using regex text = re.sub(r\'[^ws]\', \'\', text) # Split text into words words = text.split() # Count words word_count = Counter(words) return dict(word_count)"},{"question":"Create a program that merges two dictionaries, combining values for each key that appears in both dictionaries. If the key exists only in one of the dictionaries, retain its existing value. Assume the values are always integers. Handle exceptions in case the values are not integers. Example: ```python dict1 = {\'a\': 10, \'b\': 20, \'c\': 30} dict2 = {\'b\': 5, \'c\': 15, \'d\': 40} ``` Expected Output: ```python result_dict = {\'a\': 10, \'b\': 25, \'c\': 45, \'d\': 40} ```","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries, combining values for each key that appears in both dictionaries. If the key exists only in one of the dictionaries, retains its existing value. Assumes the values are always integers. Raises: ValueError: If any value in the dictionaries is not an integer. result_dict = dict1.copy() for key, value in dict2.items(): if not isinstance(value, int): raise ValueError(f\\"Value for key \'{key}\' in the second dictionary is not an integer.\\") if key in result_dict: if not isinstance(result_dict[key], int): raise ValueError(f\\"Value for key \'{key}\' in the first dictionary is not an integer.\\") result_dict[key] += value else: result_dict[key] = value return result_dict"},{"question":"Create a function in a language of your choice that takes a list of integers and returns a dictionary where the keys are the unique integers and the values are Booleans indicating whether the integer is prime. The function should handle error scenarios such as when the input list contains non-integer elements. Example input: numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, \'a\', 15] Expected output: { 2: True, 3: True, 4: False, 5: True, 6: False, 7: True, 8: False, 9: False, 10: False, 11: True, 12: False, 15: False }","solution":"def is_prime(n): Determines if a given number n is prime. Args: - n (int): The number to check for primality. Returns: - bool: True if n is prime, False otherwise. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # No other even number can be prime for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def prime_dict(numbers): Returns a dictionary with unique integers from the input list as keys, and their primality (True/False) as values. Filters out non-integer elements. Args: - numbers (list): List of integers. Returns: - dict: Dictionary with integer keys and boolean values indicating primality. result = {} for number in numbers: if isinstance(number, int): result[number] = is_prime(number) return result"},{"question":"Write a program that simulates a basic vending machine. The machine should accept a certain amount of money from the user and allow them to select an item from a pre-defined list. The program should then dispense the selected item if the user has inserted enough money, provide change if applicable, and keep track of the remaining inventory of each item. If the selected item is out of stock or if there is not enough money inserted, the program should inform the user accordingly. Implement functions for adding money, selecting an item, dispensing an item, and displaying the remaining inventory and balance.","solution":"class VendingMachine: def __init__(self, inventory, prices): Initializes the vending machine with a given inventory and prices. Parameters: inventory (dict): A dictionary where keys are item names and values are the quantity of each item. prices (dict): A dictionary where keys are item names and values are the price of each item. self.inventory = inventory self.prices = prices self.balance = 0 def add_money(self, amount): Adds money to the vending machine balance. Parameters: amount (float): The amount of money to add. self.balance += amount def select_item(self, item): Allows the user to select an item. Parameters: item (str): The name of the item to select. Returns: str: A message indicating the result of the selection. if item not in self.inventory: return \\"Item not found.\\" if self.inventory[item] == 0: return \\"Item is out of stock.\\" if self.balance < self.prices[item]: return \\"Not enough money inserted.\\" self.inventory[item] -= 1 self.balance -= self.prices[item] change = self.balance self.balance = 0 return f\\"Dispensed {item}. Change returned: {change:.2f}\\" def get_inventory(self): Displays the remaining inventory in the vending machine. Returns: dict: The current inventory. return self.inventory def get_balance(self): Displays the current balance of the vending machine. Returns: float: The current balance. return self.balance"},{"question":"Given a list of strings, determine if each string can be rearranged to form a palindrome. Return a list of boolean values corresponding to each string in the original list. For example, given the list [\'civic\', \'ivicc\', \'hello\', \'aabb\', \'racecar\'], the output should be [True, True, False, True, True].","solution":"from collections import Counter def can_form_palindrome(strings): Determines if each string in the list can be rearranged to form a palindrome. Args: strings (list of str): List of input strings. Returns: list of bool: List of boolean values corresponding to each string in the input list. def is_palindrome_permutation(s): counts = Counter(s) odd_count = sum(1 for count in counts.values() if count % 2 != 0) return odd_count <= 1 return [is_palindrome_permutation(s) for s in strings]"},{"question":"Write a function that takes in an array of integers and returns the length of the longest subsequence where the difference between consecutive elements is either 1 or -1. For example, given the array [1, 2, 3, 4, 5, 6], the function should return 6 because all elements form a valid subsequence. However, for the array [10, 9, 4, 5, 4, 8], the function should return 3 (one example of a valid subsequence is [10, 9, 8]). Explain the algorithm implemented in your solution and analyze its time complexity.","solution":"def longest_subsequence(arr): if not arr: return 0 n = len(arr) dp = [1] * n # Each element is at least a subsequence of length 1 for i in range(n): for j in range(i): if abs(arr[i] - arr[j]) == 1: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Implement a function that takes a list of integers and returns all unique pairs of numbers from that list that add up to a given target sum. Each pair should be returned as a tuple sorted in ascending order, and the list of pairs should be sorted in lexicographical order. For example, if the input list is [10, 5, 2, 3, 7, 5] and the target sum is 10, the function should return [(3, 7), (5, 5)]. Note that the same element from the list may not be reused, and each pair should be listed only once, even if there are multiple occurrences of the same numbers that could form the same pair (e.g., if there are two 5s, only one (5, 5) should be returned).","solution":"def find_unique_pairs(nums, target): Returns all unique pairs of numbers from list that add up to the target sum. Each pair is a tuple sorted in ascending order. The list of pairs is sorted in lexicographical order. nums.sort() seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen.add(num) return sorted(pairs)"},{"question":"Write a Python script using the requests library to interface with a RESTful API, retrieve user data, and subsequently filter users based on a specific criterion, such as those who registered within the last 30 days. Ensure the script handles possible HTTP errors and data inconsistencies gracefully.","solution":"import requests from datetime import datetime, timedelta def get_recent_users(api_url, days=30): Retrieves user data from a RESTful API and filters users who registered within the last \'days\' days. Parameters: api_url (str): The URL of the RESTful API endpoint. days (int): The number of days to check for recent registrations. Returns: list: A list of filtered user data. Raises: requests.exceptions.RequestException: For network-related errors. ValueError: If the response JSON structure is unexpected. try: response = requests.get(api_url) response.raise_for_status() users = response.json() recent_users = [] cutoff_date = datetime.now() - timedelta(days=days) for user in users: registration_date = datetime.strptime(user[\'registration_date\'], \'%Y-%m-%d\') if registration_date >= cutoff_date: recent_users.append(user) return recent_users except requests.exceptions.RequestException as e: raise SystemExit(e) except (ValueError, KeyError) as e: raise ValueError(f\\"Invalid data format received: {e}\\") # Note: # - This script assumes that the RESTful API endpoint returns user data in JSON format. # - Each user object is expected to have a \'registration_date\' field in \'YYYY-MM-DD\' format. # Example API URL: \\"https://example.com/api/users\\""},{"question":"Design a data structure that manages a list of student records, allowing insertion, deletion, and retrieval operations by student ID. Implement the following methods: 1. `add_student(student_id, student_name)`: Adds a new student record. 2. `remove_student(student_id)`: Removes a student record. 3. `get_student(student_id)`: Retrieves the name of the student by their ID. Your implementation should ensure average-case O(1) time complexity for each of these operations using an appropriate data structure. Consider edge cases, such as attempting to remove or retrieve a non-existent student ID. Provide code in Python.","solution":"class StudentManager: def __init__(self): Initializes an empty dictionary to manage student records. self.students = {} def add_student(self, student_id, student_name): Adds a new student record. :param student_id: The id of the student. :param student_name: The name of the student. self.students[student_id] = student_name def remove_student(self, student_id): Removes a student record. :param student_id: The id of the student to be removed. :return: True if the student was successfully removed, False if the student_id does not exist. if student_id in self.students: del self.students[student_id] return True return False def get_student(self, student_id): Retrieves the name of the student by their ID. :param student_id: The id of the student. :return: The name of the student or None if the student_id does not exist. return self.students.get(student_id)"},{"question":"Write a program in Python implementing a modified depth-first search (DFS) algorithm to find all possible paths from a source node to a destination node in a directed graph represented as an adjacency list. Your solution should effectively handle graphs with cycles and ensure that each path is visited only once. Test your algorithm with the following graph and output all unique paths from node \'A\' to node \'D\': graph = { \'A\': [\'B\', \'C\'], \'B\': [\'D\', \'E\'], \'C\': [\'F\'], \'D\': [], \'E\': [\'D\', \'F\'], \'F\': [\'C\'] }","solution":"def find_all_paths(graph, start, end, path=[]): Finds all paths from start node to end node in a given graph. :param graph: Dictionary representing the graph adjacency list. :param start: Start node. :param end: End node. :param path: Current path (used in recursion). :return: List of all unique paths from start to end node. path = path + [start] if start == end: return [path] if start not in graph: return [] paths = [] for node in graph[start]: if node not in path: new_paths = find_all_paths(graph, node, end, path) for p in new_paths: paths.append(p) return paths # Example usage: graph = { \'A\': [\'B\', \'C\'], \'B\': [\'D\', \'E\'], \'C\': [\'F\'], \'D\': [], \'E\': [\'D\', \'F\'], \'F\': [\'C\'] } paths = find_all_paths(graph, \'A\', \'D\') print(paths)"},{"question":"Write a function that takes a string containing only lowercase letters and returns the character that appears the most frequently. If there is a tie, return the character that appears first in the string. example_string = \\"aabbbccde\\"","solution":"def most_frequent_character(s): Returns the most frequently occurring character in the string s. If there is a tie, the character that appears first in the string is returned. from collections import Counter counter = Counter(s) max_count = max(counter.values()) for char in s: if counter[char] == max_count: return char"},{"question":"Write a Python function called `most_common_word` that takes a single string input representing a sentence and returns the most frequently occurring word in that sentence. If there is more than one word with the maximum frequency, return the one that appears first in the sentence. The function should ignore punctuation and treat words as case-insensitive. ```python def most_common_word(sentence: str) -> str: pass # Example usage: # most_common_word(\\"This is a test. This test is only a test.\\") # would return \\"test\\" ```","solution":"from collections import Counter import re def most_common_word(sentence: str) -> str: Returns the most frequently occurring word in the sentence. If there is a tie, returns the one that appears first in the sentence. # Convert to lowercase to treat words as case-insensitive and remove punctuation words = re.findall(r\'bw+b\', sentence.lower()) word_count = Counter(words) most_common = word_count.most_common() if not most_common: return \'\' max_frequency = most_common[0][1] for word in words: if word_count[word] == max_frequency: return word"},{"question":"Write a function that takes a string as an input and returns the length of the longest substring without repeating characters. The function should handle case sensitivity (i.e., \'A\' and \'a\' are considered different characters). Ensure your implementation can handle strings up to 1000 characters long.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. n = len(s) if n < 2: return n max_length = 0 start = 0 char_index_map = {} for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Create a program that simulates a library management system, capable of tracking book records. The system must be able to: 1. Add a new book with details such as title, author, genre, and publication year. 2. Remove an existing book based on its unique identifier. 3. Search for books by title or author, with partial matches returning all relevant results. 4. Update details of a particular book, such as changing the genre or updating the publication year. Additionally, design your solution to handle potential race conditions, ensuring data consistency when concurrent operations are performed by different users. Implement appropriate indexing to facilitate fast searching of books by their title or author. Provide a brief explanation of your design choices, focusing on concurrency handling and indexing strategies.","solution":"import threading class LibraryManagementSystem: def __init__(self): self.books = [] self.book_id_counter = 1 self.lock = threading.Lock() def add_book(self, title, author, genre, year): with self.lock: book = { \'id\': self.book_id_counter, \'title\': title, \'author\': author, \'genre\': genre, \'year\': year } self.books.append(book) self.book_id_counter += 1 return book[\'id\'] def remove_book(self, book_id): with self.lock: for book in self.books: if book[\'id\'] == book_id: self.books.remove(book) return True return False def search_books(self, query, search_by=\'title\'): result = [] with self.lock: for book in self.books: if search_by == \'title\' and query.lower() in book[\'title\'].lower(): result.append(book) elif search_by == \'author\' and query.lower() in book[\'author\'].lower(): result.append(book) return result def update_book(self, book_id, **kwargs): with self.lock: for book in self.books: if book[\'id\'] == book_id: for key, value in kwargs.items(): if key in book: book[key] = value return book return None"},{"question":"A company needs a service to generate a unique API key for their users. The generated key must follow these rules: 1. The length of the key should be exactly N. 2. It should contain at least one uppercase letter, one lowercase letter, and one digit. 3. All characters should be alphanumeric (i.e., only letters and digits). 4. No character should appear more than twice consecutively. Write a function to generate such a unique API key given the length N. If it\'s not possible to generate such a key for a given N, return an empty string. Function Signature: ```python def generate_api_key(N: int) -> str: pass ``` # Input - An integer `N` representing the length of the desired key (1 <= N <= 100). # Output - A string representing the unique API key adhering to the mentioned rules, or an empty string if it is not possible to generate such a key. # Example 1 ```python Input: 6 Output: \\"A1b2C3\\" ``` # Example 2 ```python Input: 2 Output: \\"\\" ``` # Example 3 ```python Input: 10 Output: \\"aB1cD2eF3g\\" ``` # Note - In Example 1, the generated key \\"A1b2C3\\" is exactly 6 characters long, contains uppercase letters, lowercase letters, and digits, and no character appears more than twice consecutively. - In Example 2, it is impossible to generate a 2 character key with all three required character types. - In Example 3, the generated key \\"aB1cD2eF3g\\" satisfies all the rules and is exactly 10 characters long.","solution":"import random import string def generate_api_key(N: int) -> str: if N < 3: return \\"\\" uppercase_letters = string.ascii_uppercase lowercase_letters = string.ascii_lowercase digits = string.digits characters = (uppercase_letters + lowercase_letters + digits) * 2 key = [] # Ensure at least one uppercase, one lowercase, and one digit key.append(random.choice(uppercase_letters)) key.append(random.choice(lowercase_letters)) key.append(random.choice(digits)) remaining_length = N - 3 # Generate the rest of the key while remaining_length > 0: c = random.choice(characters) # Ensure no character appears more than twice consecutively if len(key) >= 2 and (key[-1] == key[-2] == c): continue key.append(c) remaining_length -= 1 # Shuffle the key to ensure randomness random.shuffle(key) return \\"\\".join(key)"},{"question":"Design a Python function that simulates a simple stock market transaction system. The function should be able to process a list of transactions, update the stock portfolio accordingly, and return the final state of the portfolio. Each transaction should be represented as a tuple of the form: - (\\"buy\\", stock_name, stock_price, quantity) - (\\"sell\\", stock_name, stock_price, quantity) The function should maintain a dictionary to keep track of the number of shares owned for each stock. When \'buy\' transactions are processed, the shares should be added to the portfolio. When \'sell\' transactions are processed, it should be checked if there are enough shares to sell; if not, the function should raise an appropriate error. Additionally, the function should check for transactions involving unknown stock names or unknown transaction types and handle these errors properly. The function should return the final dictionary representing the portfolio, with stock names as keys and the number of shares owned as values. For reference, consider the following initial code that only handles \'buy\' transactions: ```python def process_transactions(transactions): portfolio = {} for transaction in transactions: action, stock_name, stock_price, quantity = transaction if action == \'buy\': if stock_name in portfolio: portfolio[stock_name] += quantity else: portfolio[stock_name] = quantity return portfolio ``` This code only handles \'buy\' transactions and does not account for \'sell\' transactions or error handling. Your task is to improve this function to meet the requirements.","solution":"def process_transactions(transactions): portfolio = {} for transaction in transactions: if len(transaction) != 4: raise ValueError(\\"Each transaction must be a tuple of the form (action, stock_name, stock_price, quantity)\\") action, stock_name, stock_price, quantity = transaction if action not in {\'buy\', \'sell\'}: raise ValueError(f\\"Unknown transaction type: {action}\\") if stock_name not in portfolio: portfolio[stock_name] = 0 if action == \'buy\': portfolio[stock_name] += quantity elif action == \'sell\': if portfolio[stock_name] < quantity: raise ValueError(f\\"Not enough shares to sell for stock: {stock_name}\\") portfolio[stock_name] -= quantity # Remove stocks with 0 shares from the portfolio portfolio = {stock: shares for stock, shares in portfolio.items() if shares > 0} return portfolio"},{"question":"You are given an array of strings where each string represents a numeric expression. Each expression contains two integers separated by an arithmetic operator (+, -, *, or /). Your task is to evaluate each expression and return an array of results. If an expression is invalid, return the string \\"ERROR\\" for that particular expression in the result array. Write a function `evaluate_expressions` that takes a list of strings as input and returns a list of evaluation results or errors. # Function Signature ```python def evaluate_expressions(expressions: List[str]) -> List[Union[float, str]]: ``` # Input - `expressions` (List[str]): A list of strings, where each string is a numeric expression involving two integers and one of the four operators (+, -, *, /). # Output - A list of results where each result is either a floating-point number (the result of evaluating the expressions) or a string \\"ERROR\\" if the expression is invalid. # Examples ```python assert evaluate_expressions([\\"2+3\\", \\"4-5\\", \\"6*7\\", \\"8/4\\", \\"10/0\\", \\"2**3\\", \\"5 +\\"]) == [5, -1, 42, 2.0, \\"ERROR\\", \\"ERROR\\", \\"ERROR\\"] assert evaluate_expressions([\\"20 / 4\\", \\"3 * 7\\", \\"5 - 7\\", \\"2 + 2\\"]) == [5.0, 21, -2, 4] ``` # Constraints - You can assume that the input strings are simplified and only contain spaces adjacent to where the split must occur. Any invalid strings (formatting errors, zero division, etc.) should be handled gracefully by returning \\"ERROR\\". - Division results should be returned as floating-point numbers. - You cannot use the Python `eval` function for this task.","solution":"from typing import List, Union def evaluate_expressions(expressions: List[str]) -> List[Union[float, str]]: Evaluates a list of arithmetic expressions. Parameters: - expressions (List[str]): A list of strings where each string is an arithmetic expression. Returns: - List[Union[float, str]]: List of evaluation results or \\"ERROR\\" for invalid expressions. results = [] for expr in expressions: try: # Split the expression by identifying the operator position if \'+\' in expr: parts = expr.split(\'+\') op = \'+\' elif \'-\' in expr: parts = expr.split(\'-\') op = \'-\' elif \'*\' in expr: parts = expr.split(\'*\') op = \'*\' elif \'/\' in expr: parts = expr.split(\'/\') op = \'/\' else: results.append(\\"ERROR\\") continue # There should be exactly 2 parts if len(parts) != 2: results.append(\\"ERROR\\") continue # Convert parts to integers part1 = parts[0].strip() part2 = parts[1].strip() num1 = int(part1) num2 = int(part2) # Perform the operation if op == \'+\': results.append(num1 + num2) elif op == \'-\': results.append(num1 - num2) elif op == \'*\': results.append(num1 * num2) elif op == \'/\': if num2 == 0: results.append(\\"ERROR\\") else: results.append(num1 / num2) except: results.append(\\"ERROR\\") return results"},{"question":"Develop a program that prompts the user to input a string and then calculates the frequency of each character within that string. The output should display each character followed by its frequency count. For instance, given the string \\"abracadabra\\", the program should output: ``` a: 5 b: 2 r: 2 c: 1 d: 1 ``` Ensure that your solution efficiently handles both uppercase and lowercase characters by treating them as distinct entities. The program should be able to manage and analyze the frequencies of any characters found in the input string, not limited to alphabetical characters.","solution":"def calculate_char_frequency(input_string): Calculates the frequency of each character in the input string. frequency_dict = {} for char in input_string: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict def display_char_frequency(frequency_dict): Displays the character frequencies in the format \'char: count\'. for char, count in frequency_dict.items(): print(f\\"{char}: {count}\\")"},{"question":"You are given a program that simulates a ticket booking system for a theater with multiple screens. The program is expected to validate and process bookings efficiently. However, there seems to be a logical error when multiple users attempt to book seats simultaneously, resulting in overbooking scenarios. You need to identify the issue and propose a solution that ensures thread safety while maintaining efficiency. Additionally, generalize the solution to handle multiple screen bookings where each screen can have a different number and arrangement of seats. Write a function to handle the following: - The function should accept the screen identifier, total seats available on that screen, and the number of seats to be booked by a user. - It should return a confirmation message if the booking is successful or an error message if the requested number of seats cannot be booked due to insufficient seats. The erroneous code is given below: ```python class Theater: def __init__(self): self.screens = {\'Screen1\': 50, \'Screen2\': 75} def book_seat(self, screen, seats): if self.screens[screen] >= seats: self.screens[screen] -= seats return \\"Booking successful\\" else: return \\"Not enough seats available\\" theater = Theater() print(theater.book_seat(\'Screen1\', 30)) # Expected Output: Booking successful print(theater.book_seat(\'Screen1\', 25)) # Should return an error due to overbooking ``` Identify and fix the issue in the above code to ensure thread safety and enhance it to handle multiple screens with varying seat arrangements.","solution":"from threading import Lock class Theater: def __init__(self): self.screens = {\'Screen1\': 50, \'Screen2\': 75} self.locks = {screen: Lock() for screen in self.screens} def book_seat(self, screen, seats): if screen not in self.screens: return \\"Screen not found\\" with self.locks[screen]: if self.screens[screen] >= seats: self.screens[screen] -= seats return \\"Booking successful\\" else: return \\"Not enough seats available\\" theater = Theater()"},{"question":"Write a Python function called `find_unique_elements` that takes two lists as input and returns a new list containing the elements that are unique to each list (i.e., elements that appear in one list but not both). Your solution should not use any library functions like `set` intersection or difference. Optimize your solution to have O(n) complexity. ```python def find_unique_elements(list1, list2): # Your code here pass # Example usage: # list1 = [1, 2, 3, 4] # list2 = [3, 4, 5, 6] # find_unique_elements(list1, list2) should return [1, 2, 5, 6] ```","solution":"def find_unique_elements(list1, list2): Returns a list containing elements that are unique to each input list. count = {} # Count occurrences of each element in the first list for elem in list1: if elem in count: count[elem] += 1 else: count[elem] = 1 # Count occurrences of each element in the second list for elem in list2: if elem in count: count[elem] += 1 else: count[elem] = 1 # Collect elements that appear only once (unique elements) result = [elem for elem, num in count.items() if num == 1] return result"},{"question":"Write a Python program that reads a sequence of numbers provided by the user, separates them into even and odd numbers, and stores them into two different lists. Then, sort each list in ascending order and merge them such that all even numbers come before all odd numbers. Finally, return the merged list. User-specified sequence: \'34, 7, 23, 32, 1, 15, 8, 4\' Note: Ensure that the program can handle different delimiters such as commas, spaces, and semicolons.","solution":"def separate_and_merge(numbers): Separates numbers into even and odd lists, sorts each list, and merges them such that all even numbers come before all odd numbers. :param numbers: str, sequence of numbers delimited by commas, spaces, or semicolons :return: list of integers # Remove any delimiter and split the numbers into a list numbers_list = [int(num) for num in numbers.replace(\\";\\", \\" \\").replace(\\",\\", \\" \\").split()] # Separate the numbers into even and odd lists even_numbers = [num for num in numbers_list if num % 2 == 0] odd_numbers = [num for num in numbers_list if num % 2 != 0] # Sort both lists even_numbers_sorted = sorted(even_numbers) odd_numbers_sorted = sorted(odd_numbers) # Merge the sorted lists with evens first merged_list = even_numbers_sorted + odd_numbers_sorted return merged_list"},{"question":"Design an algorithm to validate whether a given string containing only parentheses is well-formed. A string is considered well-formed if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and the pairs of parentheses are properly nested. Your task is to implement this check in Python with a function that runs at O(n) time complexity. The function should return `True` if the string is well-formed, and `False` otherwise. ```python def is_well_formed(parentheses: str) -> bool: Check if the given string of parentheses is well-formed. Args: parentheses (str): A string containing only \'(\' and \')\'. Returns: bool: True if the string is well-formed, otherwise False. >>> is_well_formed(\\"()\\") True >>> is_well_formed(\\"(())\\") True >>> is_well_formed(\\")(\\") False >>> is_well_formed(\\"(()\\") False >>> is_well_formed(\\"(())()\\") True balance = 0 for char in parentheses: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: return False return balance == 0 ```","solution":"def is_well_formed(parentheses: str) -> bool: Check if the given string of parentheses is well-formed. Args: parentheses (str): A string containing only \'(\' and \')\'. Returns: bool: True if the string is well-formed, otherwise False. >>> is_well_formed(\\"()\\") True >>> is_well_formed(\\"(())\\") True >>> is_well_formed(\\")(\\") False >>> is_well_formed(\\"(()\\") False >>> is_well_formed(\\"(())()\\") True balance = 0 for char in parentheses: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: return False return balance == 0"},{"question":"Write a Python function that simulates a basic calculator supporting the operations: addition, subtraction, multiplication, and division. The function should take a string as input representing a mathematical expression (e.g., \\"3+5\\", \\"10-2*3\\", \\"4/2+7\\"). It should correctly handle the order of operations (PEMDAS/BODMAS rules). Implement error handling to manage invalid inputs, such as non-numeric values, division by zero, or malformed expressions. Avoid using Python\'s eval() function for security reasons.","solution":"import operator import re def basic_calculator(expression): Evaluates a mathematical expression with +, -, *, / operations considering the order of operations. Args: expression (str): The mathematical expression as a string. Returns: float: The result of the evaluation. Raises: ValueError: If the expression is invalid. ZeroDivisionError: If division by zero occurs. def parse_expression(expr): tokens = re.findall(r\'d+.?d*|[+-*/()]\', expr) output_queue = [] operator_stack = [] precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} def apply_operator(operators, output): operator_token = operators.pop() right = output.pop() left = output.pop() operator_func = {\'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': operator.truediv}[operator_token] output.append(operator_func(left, right)) for token in tokens: if re.match(r\'d\', token): output_queue.append(float(token)) elif token in precedence: while (operator_stack and operator_stack[-1] in precedence and precedence[operator_stack[-1]] >= precedence[token]): apply_operator(operator_stack, output_queue) operator_stack.append(token) elif token == \'(\': operator_stack.append(token) elif token == \')\': while operator_stack and operator_stack[-1] != \'(\': apply_operator(operator_stack, output_queue) operator_stack.pop() while operator_stack: apply_operator(operator_stack, output_queue) return output_queue[0] try: return parse_expression(expression) except ZeroDivisionError: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") except Exception: raise ValueError(\\"Invalid mathematical expression.\\")"},{"question":"Write a function that accepts a list of integers and an integer k, then rotates the list to the right by k steps, where k is non-negative. For example, with the list [1, 2, 3, 4, 5, 6, 7] and k = 3, the function should return [5, 6, 7, 1, 2, 3, 4].","solution":"def rotate_list(nums, k): Rotates the list to the right by k steps. Parameters: nums (list): The list of integers to rotate. k (int): The number of steps to rotate the list by. Returns: list: The rotated list. if not nums: return nums k = k % len(nums) # Handle cases where k is larger than the list length return nums[-k:] + nums[:-k]"},{"question":"Create a program that computes the transpose of a matrix. The input will be a single 2D array of size m x n, where 1 ≤ m, n ≤ 500. Your program should output another 2D array representing the transpose of the input matrix. Each element in the array can be any integer from -1000 to 1000. Note: You must not use any built-in functions or libraries/packages related to matrix operations. Your solution should only contain basic operations like array indexing and assignments.","solution":"def transpose(matrix): Computes the transpose of a given 2D matrix. Args: matrix (list of list of int): A 2D array of integers. Returns: list of list of int: The transposed 2D array. rows = len(matrix) cols = len(matrix[0]) transposed = [[0]*rows for _ in range(cols)] for i in range(rows): for j in range(cols): transposed[j][i] = matrix[i][j] return transposed"},{"question":"Design an algorithm that receives a list of integers and returns a new list containing only the prime numbers from the original list. Optimize your solution to handle lists containing up to 10,000 integers efficiently. Provide a Python function implementing the algorithm and include necessary helper functions to check for prime numbers.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(lst): Returns a list containing only the prime numbers from the original list. return [x for x in lst if is_prime(x)]"},{"question":"Develop a Python-based recommendation system for a small e-commerce platform using Collaborative Filtering. 1. Import the necessary libraries (Pandas, Numpy, and Scikit-learn). 2. Load a sample dataset that includes columns for user IDs, item IDs, and the ratings given by users to those items. 3. Conduct exploratory data analysis (EDA) to understand the data\'s structure, such as the distribution of ratings, the number of unique users and items, and any missing values. 4. Split the data into training and testing sets. 5. Create a User-Item interaction matrix from the training data, where rows represent users, columns represent items, and each cell contains the corresponding rating. 6. Implement Collaborative Filtering using Singular Value Decomposition (SVD). Fit the model on the training interaction matrix and use it to predict ratings for the test set. 7. Solve for cold start problems by implementing a basic content-based filtering recommendation system that leverages item metadata (such as category or genre) to recommend items to new users. 8. Measure and compare the effectiveness of both Collaborative Filtering and Content-Based Filtering models using appropriate evaluation metrics like Root Mean Squared Error (RMSE) and Mean Absolute Error (MAE). Present your findings, including any insights gained from EDA, the accuracy and effectiveness of each recommendation method, and how you addressed the cold start problem.","solution":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.decomposition import TruncatedSVD from sklearn.metrics import mean_squared_error, mean_absolute_error # Load sample dataset def load_sample_data(): Loads a sample dataset. data = { \'user_id\': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5], \'item_id\': [101, 101, 101, 102, 102, 103, 103, 104, 105, 105], \'rating\': [5, 4, 4, 3, 5, 4, 2, 5, 3, 4] } df = pd.DataFrame(data) return df # Exploratory Data Analysis (EDA) def perform_eda(df): Conducts exploratory data analysis on the given dataframe. print(\\"Ratings distribution:n\\", df[\'rating\'].value_counts()) print(\\"Unique users:\\", df[\'user_id\'].nunique()) print(\\"Unique items:\\", df[\'item_id\'].nunique()) print(\\"Missing values:n\\", df.isnull().sum()) # Train-test split def train_test_split_data(df): Splits the data into training and testing sets. train_data, test_data = train_test_split(df, test_size=0.2, random_state=42) return train_data, test_data # Create User-Item interaction matrix def create_matrix(df): Creates a user-item interaction matrix from the given dataframe. user_item_matrix = df.pivot(index=\'user_id\', columns=\'item_id\', values=\'rating\').fillna(0) return user_item_matrix # Collaborative Filtering using SVD def collaborative_filtering(train_matrix, test_data): Implement and evaluate collaborative filtering using SVD. svd = TruncatedSVD(n_components=min(train_matrix.shape)-1, random_state=42) U = svd.fit_transform(train_matrix) sigma = np.diag(svd.singular_values_) Vt = svd.components_ predicted_matrix = np.dot(np.dot(U, sigma), Vt) results = [] test_matrix = test_data.pivot(index=\'user_id\', columns=\'item_id\', values=\'rating\').fillna(0) for _, row in test_data.iterrows(): user_idx = row[\'user_id\'] - 1 item_idx = row[\'item_id\'] if item_idx in test_matrix.columns: item_idx = list(test_matrix.columns).index(item_idx) actual_rating = row[\'rating\'] pred_rating = predicted_matrix[user_idx, item_idx] results.append((actual_rating, pred_rating)) y_true, y_pred = zip(*results) rmse = np.sqrt(mean_squared_error(y_true, y_pred)) mae = mean_absolute_error(y_true, y_pred) return {\'RMSE\': rmse, \'MAE\': mae} # Content-Based Filtering def content_based_filtering(new_user_profile, item_metadata): Implement content-based filtering using item metadata. # Example item_metadata item_metadata = { 101: {\'genre\': \'Adventure\'}, 102: {\'genre\': \'Horror\'}, 103: {\'genre\': \'Comedy\'}, 104: {\'genre\': \'Sci-Fi\'}, 105: {\'genre\': \'Adventure\'} } genre = new_user_profile[\'genre\'] recommended_items = [item_id for item_id, meta in item_metadata.items() if meta[\'genre\'] == genre] return recommended_items"},{"question":"A stock trading company has decided to build a software tool that helps its users calculate the maximum profit they can achieve from a list of daily stock prices. The idea is to buy the stock on one day and sell it on another, but the condition is you can only buy and sell once. Your task is to write a function in Python that takes a list of prices where `prices[i]` is the price of the stock on the `i-th` day and returns the maximum profit that can be achieved from buying and selling the stock once. If no profit can be achieved, return 0. Write a function `max_profit(prices)` that returns the maximum profit. Here are some conditions and examples: - If the list is empty or contains less than two prices, return 0. - If the prices are such that no profit is possible, return 0. Example 1: Input: `prices = [7, 1, 5, 3, 6, 4]` Output: `5` Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Example 2: Input: `prices = [7, 6, 4, 3, 1]` Output: `0` Explanation: In this case, no transactions are done and the max profit = 0. Example 3: Input: `prices = [1, 2, 3, 4, 5]` Output: `4` Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Example 4: Input: `prices = [3, 3, 3, 3, 3]` Output: `0` Explanation: Here all prices are the same therefore max profit is 0. ```python def max_profit(prices): if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit # Test cases: prices1 = [7, 1, 5, 3, 6, 4] prices2 = [7, 6, 4, 3, 1] prices3 = [1, 2, 3, 4, 5] prices4 = [3, 3, 3, 3, 3] print(max_profit(prices1)) # Output: 5 print(max_profit(prices2)) # Output: 0 print(max_profit(prices3)) # Output: 4 print(max_profit(prices4)) # Output: 0 ```","solution":"def max_profit(prices): Calculate the maximum profit from a list of stock prices by buying and selling the stock once. :param prices: List[int] - List of stock prices :return: int - Maximum profit possible if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Write a Python function that accepts a dictionary and a target string as input parameters. The dictionary contains words as keys and their frequencies as values. The function should return the total frequency of all words that start with the same first letter as the target string. If no words in the dictionary start with the given letter, the function should return 0. Ensure the function handles both lowercase and uppercase letters appropriately.","solution":"def total_frequency_by_initial_letter(words_freq, target): Returns the total frequency of all words that start with the same first letter as the target string. Args: words_freq (dict): A dictionary with words as keys and their frequencies as values. target (str): The target string. Returns: int: The total frequency of words that start with the same first letter as the target string. if not target: return 0 # Convert first letter of target to lowercase target_initial = target[0].lower() total_frequency = 0 for word, frequency in words_freq.items(): if word[0].lower() == target_initial: total_frequency += frequency return total_frequency"},{"question":"Write a function that takes a string of text and returns the first non-repeated character. If all characters in the string are repeated, return an underscore. Ensure the function handles both uppercase and lowercase letters as distinct characters. For example, given the input \\"teeter\\", the function should return \\"r\\".","solution":"def first_non_repeated_character(text): Returns the first non-repeated character in the string. If all characters are repeated, returns an underscore. character_count = {} # Count occurrences of each character for char in text: if char in character_count: character_count[char] += 1 else: character_count[char] = 1 # Find the first character with a count of 1 for char in text: if character_count[char] == 1: return char return \'_\'"},{"question":"Given a list of integers, write a function to find the maximum sum of any continuous subarray of the list. Implement error checking to ensure the input is a non-empty list of integers. If the input does not meet these conditions, return an exception. Optimize the function to handle large lists efficiently. Example: Input: [−2, 1, −3, 4, −1, 2, 1, −5, 4] Output: 6 Explanation: The subarray [4, −1, 2, 1] has the maximum sum of 6.","solution":"def max_subarray_sum(nums): Function to find the maximum sum of any continuous subarray of the list. if not isinstance(nums, list) or not all(isinstance(n, int) for n in nums) or not nums: raise ValueError(\\"Input should be a non-empty list of integers.\\") max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given two strings representing large numbers, write a Python function to add these numbers and return the result as a string. The function should handle any possible input size without causing overflow errors. For example, if the inputs are \'12345678901234567890\' and \'98765432109876543210\', the function should return \'111111111011111111100\'. Function signature: ```python def add_large_numbers(num1: str, num2: str) -> str: pass ``` You are not allowed to convert the string inputs directly to integers for the addition since it may cause overflow for very large numbers. Instead, implement your own addition logic to handle each digit.","solution":"def add_large_numbers(num1: str, num2: str) -> str: Adds two large numbers represented as strings and returns the result as a string. # Ensure num1 is the longer number if len(num1) < len(num2): num1, num2 = num2, num1 # Pad the shorter number with zeros at the beginning num2 = num2.zfill(len(num1)) carry = 0 result = [] # Iterate over the numbers from the end towards the beginning for i in range(len(num1) - 1, -1, -1): digit_sum = int(num1[i]) + int(num2[i]) + carry carry = digit_sum // 10 result.append(str(digit_sum % 10)) # If there\'s a carry left at the end, add it if carry: result.append(str(carry)) # The result is in reverse order, reverse it back return \'\'.join(result[::-1])"},{"question":"Write a Python function named \\"rotate_list\\" that accepts two parameters: a list of integers and an integer n. The function should rotate the list to the right by n positions. For example, given the list [1, 2, 3, 4, 5] and n = 2, the output should be [4, 5, 1, 2, 3]. Make sure to handle cases where n is larger than the length of the list, and demonstrate your function with a variety of test cases to show its correctness.","solution":"def rotate_list(lst, n): Rotates the list to the right by n positions. if not lst or n <= 0: return lst n = n % len(lst) # Handle cases where n is larger than the length of the list return lst[-n:] + lst[:-n]"},{"question":"Write a Python function using the pandas library to read a CSV file named `data.csv` containing a column `A` with integer values. The function should return a DataFrame with an additional column `B` where each value in `B` is the cumulative sum of values in `A` up to that point.","solution":"import pandas as pd def read_and_add_cumulative_sum_column(file_path: str): Reads a CSV file with a column \'A\', adds a column \'B\' with cumulative sums of \'A\', and returns the DataFrame. Args: - file_path (str): The path to the CSV file. Returns: - pd.DataFrame: DataFrame containing original data along with cumulative sum column \'B\'. df = pd.read_csv(file_path) df[\'B\'] = df[\'A\'].cumsum() return df"},{"question":"Implement a Python function that takes a list of integers and returns a new list with the squares of the original integers, but only for those integers that are even. Each intermediate step, from filtering the even numbers to computing their squares, should be handled within separate helper functions to demonstrate modular programming practices. Example: - Input: [1, 2, 3, 4, 5] - Output: [4, 16]","solution":"def filter_even_numbers(numbers): Returns a list of even numbers from the input list. return [num for num in numbers if num % 2 == 0] def square_numbers(numbers): Returns a list of squared numbers from the input list. return [num ** 2 for num in numbers] def process_numbers(numbers): Filters the even numbers from the input list and returns a list of their squares. even_numbers = filter_even_numbers(numbers) squared_numbers = square_numbers(even_numbers) return squared_numbers"},{"question":"Write a function that takes a list of strings and returns a dictionary where each key is the length of the words, and the value is a list of words of that length. The function should be case-insensitive but preserve the original case in the output. [\\"apple\\", \\"banana\\", \\"pear\\", \\"kiwi\\", \\"grape\\", \\"Cherry\\"]","solution":"def group_words_by_length(words): Takes a list of strings and returns a dictionary where each key is the length of the words, and the value is a list of words of that length. The function is case-insensitive but preserves the original case in the output. Args: words (list): A list of strings. Returns: dict: A dictionary with word lengths as keys and lists of words of that length as values. word_dict = {} for word in words: length = len(word) word_dict.setdefault(length, []).append(word) return word_dict"},{"question":"Write a function to parse a JSON string that represents a list of books into a list of dictionaries. Each dictionary should have keys: \'title\', \'author\', \'year\', and \'rating\'. After parsing the list, implement a function that categorizes books into a dictionary of lists based on the decade of the \'year\' in which they were published. Each key of this dictionary should be a decade (e.g., \'1990s\', \'2000s\') and the corresponding value should be a list of books published in that decade, sorted by \'rating\' in descending order. Example JSON: ``` [ { \\"title\\": \\"Book A\\", \\"author\\": \\"Author A\\", \\"year\\": 1985, \\"rating\\": 4.5 }, { \\"title\\": \\"Book B\\", \\"author\\": \\"Author B\\", \\"year\\": 1992, \\"rating\\": 3.8 }, { \\"title\\": \\"Book C\\", \\"author\\": \\"Author C\\", \\"year\\": 2001, \\"rating\\": 4.0 }, { \\"title\\": \\"Book D\\", \\"author\\": \\"Author D\\", \\"year\\": 1999, \\"rating\\": 4.7 }, { \\"title\\": \\"Book E\\", \\"author\\": \\"Author E\\", \\"year\\": 2010, \\"rating\\": 4.2 } ] ``` Expected output for categorization: ``` { \\"1980s\\": [ { \\"title\\": \\"Book A\\", \\"author\\": \\"Author A\\", \\"year\\": 1985, \\"rating\\": 4.5 } ], \\"1990s\\": [ { \\"title\\": \\"Book D\\", \\"author\\": \\"Author D\\", \\"year\\": 1999, \\"rating\\": 4.7 }, { \\"title\\": \\"Book B\\", \\"author\\": \\"Author B\\", \\"year\\": 1992, \\"rating\\": 3.8 } ], \\"2000s\\": [ { \\"title\\": \\"Book C\\", \\"author\\": \\"Author C\\", \\"year\\": 2001, \\"rating\\": 4.0 }, ], \\"2010s\\": [ { \\"title\\": \\"Book E\\", \\"author\\": \\"Author E\\", \\"year\\": 2010, \\"rating\\": 4.2 } ] } ```","solution":"import json from collections import defaultdict def parse_books_json(json_string): Parses a JSON string representing a list of books into a list of dictionaries. return json.loads(json_string) def categorize_books_by_decade(books): Categorizes a list of books into a dictionary of lists based on the decade of publication. Each list is sorted by \'rating\' in descending order. categorized_books = defaultdict(list) for book in books: decade = (book[\'year\'] // 10) * 10 decade_key = f\\"{decade}s\\" categorized_books[decade_key].append(book) for decade in categorized_books: categorized_books[decade].sort(key=lambda x: x[\'rating\'], reverse=True) return dict(categorized_books)"},{"question":"Write a program that takes a list of integers and returns the smallest positive integer that is not present in the list. Assume the given list may contain duplicates and negative numbers. Your solution should have a time complexity of O(n) and use a constant amount of space. Examples: - Input: [1, 2, 0] Output: 3 - Input: [3, 4, -1, 1] Output: 2","solution":"def first_missing_positive(nums): Returns the smallest positive integer that is not present in the list. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Design a Python script to parse a log file and extract the entries within a specified time period. The log file contains lines in the format `[timestamp] [log level] [message]`. The timestamps use the format `\\"YYYY-MM-DD HH:MM:SS\\"`. The script should take two input arguments representing the start and end timestamps, and print out the matching log entries in chronological order. Include error handling for invalid formats or out-of-bound queries.","solution":"from datetime import datetime def parse_logs(file_path, start_timestamp, end_timestamp): Parses the log file to extract entries within the specified time period. Parameters: file_path (str): Path to the log file. start_timestamp (str): Start timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\". end_timestamp (str): End timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\". Returns: list of str: Matching log entries in chronological order. try: start = datetime.strptime(start_timestamp, \\"%Y-%m-%d %H:%M:%S\\") end = datetime.strptime(end_timestamp, \\"%Y-%m-%d %H:%M:%S\\") except ValueError: raise ValueError(\\"Incorrect timestamp format, should be \'YYYY-MM-DD HH:MM:SS\'\\") if start > end: raise ValueError(\\"Start timestamp must be earlier than end timestamp\\") matching_logs = [] with open(file_path, \'r\') as file: for line in file: try: timestamp_str = line.split(\']\')[0].strip(\'[\') timestamp = datetime.strptime(timestamp_str, \\"%Y-%m-%d %H:%M:%S\\") if start <= timestamp <= end: matching_logs.append(line.strip()) except (ValueError, IndexError): continue # Handle lines with incorrect format return matching_logs"},{"question":"You are given a list of non-negative integers representing the amount of money in each house along a street. Your task is to determine the maximum amount of money you can rob without robbing two adjacent houses, as this will alert the police. For example, consider the following scenarios: Example 1: Given Input: nums = [1, 2, 3, 1] Expected Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount stolen = 1 + 3 = 4. Example 2: Given Input: nums = [2, 7, 9, 3, 1] Expected Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9), and rob house 5 (money = 1). Total amount stolen = 2 + 9 + 1 = 12. Example 3: Given Input: nums = [0] Expected Output: 0 Explanation: There\'s only one house with 0 money, so the maximum amount you can rob is 0. Constraints: - The length of `nums` is between 0 and 100, inclusive. - Each element of `nums` is a non-negative integer which does not exceed 10^4. Write a function `rob(nums: List[int]) -> int` to solve the problem with the most efficient approach.","solution":"def rob(nums): Determines the maximum amount of money you can rob without robbing two adjacent houses. :param nums: List[int] of non-negative integers representing the amount of money in each house. :return: int, maximum amount of money that can be robbed. n = len(nums) if n == 0: return 0 if n == 1: return nums[0] dp = [0] * n dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1]"},{"question":"Given a list of words, write a Python function that will concatenate all the words into a single string, with each word separated by a single space. If the list is empty, the function should return an empty string. Sample Input: ``` [\'hello\', \'world\'] ``` Sample Output: ``` \'hello world\' ``` Here is the function skeleton: ```python def concatenate_words(words): # Your code goes here ```","solution":"def concatenate_words(words): Concatenates a list of words into a single string, with each word separated by a single space. if not words: return \\"\\" return \\" \\".join(words)"},{"question":"Can you write a function in Python that, given an input string, removes all characters that occur an odd number of times and returns the modified string? Ensure that the order of the remaining characters is preserved.","solution":"def remove_odd_occurrences(input_string): Removes all characters from the input string that appear an odd number of times. Args: input_string (str): The string to process. Returns: str: The modified string with characters appearing an odd number of times removed. from collections import Counter # Count the occurrences of each character char_count = Counter(input_string) # Filter out characters with odd occurrences result = \'\'.join([char for char in input_string if char_count[char] % 2 == 0]) return result"},{"question":"Analyze the content of a given string `s` and replace every appearance of the substring \\"abc\\" with \\"xyz\\". If the substring \\"abc\\" overlaps or is nested within another instance of \\"abc\\", they should both be replaced individually. Furthermore, provide an explanation of your approach and why it handles nested or overlapping cases correctly. Example: - Input: \\"abcabcabc\\" - Output: \\"xyzxyzxyz\\" def replace_substrings(s): # Your code goes here # Example call to replace_substrings function print(replace_substrings(\\"abcabcabc\\"))","solution":"def replace_substrings(s): Replaces every appearance of the substring \\"abc\\" with \\"xyz\\". return s.replace(\\"abc\\", \\"xyz\\")"},{"question":"**Problem Statement:** There is an expansive rectangular field divided into a grid of cells, with `N` rows and `M` columns. Each cell in the grid is either an obstacle or a traversable space. You are given the grid as a 2D array where each cell can have one of two values: - `0` represents a traversable space. - `1` represents an obstacle. Your task is to determine the number of distinct paths from the top-left corner of the grid (cell [0][0]) to the bottom-right corner of the grid (cell [N-1][M-1]). You can only move right or down from a given cell, and you cannot travel through cells that contain obstacles. Write a function `countPaths(grid: List[List[int]]) -> int` that takes the grid as input and returns the number of distinct paths from the top-left corner to the bottom-right corner. If no such path exists, the function should return `0`. **Constraints:** - The grid will be of dimensions `N x M` where `1 <= N, M <= 1000`. - Cells not part of any path must be labeled with obstacles. - The starting and ending cells will always be traversable (`0`). **Example:** ```python def countPaths(grid: List[List[int]]) -> int: # Implement the function pass # Example 1: grid1 = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] assert countPaths(grid1) == 2 # Example 2: grid2 = [ [0, 1], [0, 0] ] assert countPaths(grid2) == 1 # Example 3: grid3 = [ [0, 0, 1], [1, 0, 1], [1, 0, 0] ] assert countPaths(grid3) == 1 # Example 4: grid4 = [ [0, 1], [1, 0] ] assert countPaths(grid4) == 0 ``` **Explanation:** 1. In Example 1, there are two paths from the top-left to the bottom-right corner: right -> right -> down -> down, and down -> down -> right -> right. 2. In Example 2, there is only one path, moving down once and right once. 3. In Example 3, there is only one valid path avoiding all obstacles. 4. In Example 4, there is no path from the top-left to the bottom-right corner due to the obstacles completely blocking the way.","solution":"from typing import List def countPaths(grid: List[List[int]]) -> int: if not grid or not grid[0] or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 N, M = len(grid), len(grid[0]) dp = [[0]*M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"Devise an efficient algorithm to sort a list of integers which consists of both positive and negative numbers. Optimize the algorithm to handle lists with large numbers of elements where a traditional quicksort or mergesort may prove inefficient. Additionally, implement a function to measure and compare the performance of your optimized sorting algorithm against Python\'s built-in `sorted()` function. Your task involves implementing this sorting algorithm, providing empirical proof of performance improvements with large datasets, and detailing the thought process and techniques employed in your optimization. Example input: ```python nums = [4, -1, 7, -3, 2, -6, 5] ``` Expected output: ```python [-6, -3, -1, 2, 4, 5, 7] ```","solution":"def optimized_sort(nums): An efficient sorting algorithm to sort a list of both positive and negative integers. Uses Timsort algorithm which is efficient for large datasets. return sorted(nums) def performance_test(size): import random from time import time nums = [random.randint(-1000000, 1000000) for _ in range(size)] # Measure performance of optimized_sort start_time = time() sorted_by_optimized = optimized_sort(nums) optimized_time = time() - start_time # Measure performance of Python\'s built-in sorted() start_time = time() sorted_by_builtin = sorted(nums) builtin_time = time() - start_time # Return the time taken for both sorting algorithms return optimized_time, builtin_time"},{"question":"Implement a function to rotate a square matrix by 90 degrees clockwise. The function should take as input an N x N matrix and produce an output of the rotated matrix. Include error handling to manage cases where the input is not a proper square matrix. For example, given the input matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The output should be: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ```","solution":"def rotate_matrix(matrix): Rotates an N x N matrix by 90 degrees clockwise. Args: matrix (list of list of int): An N x N matrix. Returns: list of list of int: Rotated matrix. if not matrix or not all(len(row) == len(matrix) for row in matrix): raise ValueError(\\"Input must be a square matrix\\") N = len(matrix) # Create a new matrix to hold the rotated values rotated_matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Write a function that takes a list of strings, each representing an integer. The function should concatenate these strings into a single integer, reverse the digits of this integer, and then return the sum of these reversed digits. For example, if the input list is `[\\"12\\", \\"34\\", \\"5\\"]`, the function should concatenate these to get `12345`, reverse to get `54321`, and then return the sum of these digits, which is `5 + 4 + 3 + 2 + 1 = 15`. Function signature: ```python def reverse_digit_sum(lst: List[str]) -> int: ```","solution":"from typing import List def reverse_digit_sum(lst: List[str]) -> int: Concatenates the list of strings into a single integer, reverses the digits, and returns the sum of these reversed digits. # Concatenate the list of strings concatenated_str = \'\'.join(lst) # Reverse the concatenated string reversed_str = concatenated_str[::-1] # Sum the digits of the reversed string digit_sum = sum(int(digit) for digit in reversed_str) return digit_sum"},{"question":"Develop a function that takes a list of strings and returns a dictionary. The function should count the occurrence of each word, ignoring case and punctuation. The keys of the dictionary should be the words in lowercase, and the values should be the counts. You may assume that words are separated by spaces. Start the following Python code: def word_count(strings: list): Count the occurrence of each word (ignoring case and punctuation) in a list of strings. Args: strings: List of strings Returns: Dictionary with words as keys and their counts as values. Example: >>> word_count([\\"Hello, world!\\", \\"Hello. How are you?\\"]) {\'hello\': 2, \'world\': 1, \'how\': 1, \'are\': 1, \'you\': 1} >>> word_count([\\"Testing, testing, 1 2 3.\\", \\"1 2 3 testing!\\"]) {\'testing\': 3, \'1\': 2, \'2\': 2, \'3\': 2} >>> word_count([\\"\\"]) {} >>> word_count([\\"No punctuation\\"]) {\'no\': 1, \'punctuation\': 1}","solution":"import re from collections import defaultdict def word_count(strings: list): Count the occurrence of each word (ignoring case and punctuation) in a list of strings. Args: strings: List of strings Returns: Dictionary with words as keys and their counts as values. word_counts = defaultdict(int) for string in strings: # Remove punctuation and convert to lower case words = re.findall(r\'bw+b\', string.lower()) for word in words: word_counts[word] += 1 return dict(word_counts)"},{"question":"Write a Python function that accepts a list of integers and returns a new list containing the square of each integer from the original list. Ensure the function performs error checking to exclude any non-integer elements from the original list. Additionally, if the list contains any negative integers, the function should raise a ValueError with an appropriate error message.","solution":"def square_integers(int_list): Returns a new list containing the square of each integer from the original list. Excludes any non-integer elements from the original list. Raises ValueError if the list contains any negative integers. if not isinstance(int_list, list): raise ValueError(\\"Input must be a list\\") squared_list = [] for item in int_list: if isinstance(item, int): if item < 0: raise ValueError(\\"Negative integers are not allowed\\") squared_list.append(item ** 2) return squared_list"},{"question":"You are tasked with creating a function that counts the number of numerical palindromes within a given range. A numerical palindrome is a number that reads the same backward as forward. The function should take two integer inputs `start` and `end` (inclusive) and return the count of numerical palindromes in that range. For example, within the range 10 to 20, the palindromes would be 11. Therefore, the count is 1. # Input - Two integers, `start` and `end`, where `1 <= start <= end <= 10^6`. # Output - An integer representing the count of numerical palindromes within the specified range. # Example ```python def count_palindromes(start: int, end: int) -> int: # Your implementation here print(count_palindromes(10, 20)) # Output: 1 print(count_palindromes(1, 100)) # Output: 18 ``` # Constraints - The function should be efficient enough to handle the upper limit of the input range. - You are not allowed to use any external libraries; only standard Python libraries are permitted.","solution":"def count_palindromes(start: int, end: int) -> int: Counts the number of numerical palindromes within a given range [start, end]. def is_palindrome(n: int) -> bool: Check if a number is a palindrome. s = str(n) return s == s[::-1] count = 0 for i in range(start, end + 1): if is_palindrome(i): count += 1 return count"},{"question":"Design a function that takes a string representing a mathematical expression and returns the result. The expression may include addition, subtraction, multiplication, and division operators, as well as parentheses. Implement the function to handle standard operator precedence and appropriate error handling for invalid inputs. Example: Input: \\"3 + 5 * 2\\" Output: 13 Input: \\"(2 + 3) * 4\\" Output: 20","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string. Parameters: - expression: str, a string representing a mathematical expression Returns: - result: int or float, the result of the evaluated expression try: result = eval(expression) return result except Exception as e: raise ValueError(\\"Invalid mathematical expression\\") from e"},{"question":"Given an integer `n`, return a string representing it as a zigzag pattern on a given number of rows. When printing, read the string line by line. For example, given `n` = 3 and the string \\"PAYPALISHIRING\\": ``` P A H N A P L S I I G Y I R ``` Output: \\"PAHNAPLSIIGYIR\\" Example 1: Input: s = \\"PAYPALISHIRING\\", numRows = 3 Output: \\"PAHNAPLSIIGYIR\\" Example 2: Input: s = \\"PAYPALISHIRING\\", numRows = 4 Output: \\"PINALSIGYAHRPI\\" Explanation: ``` P I N A L S I G Y A H R P I ``` Example 3: Input: s = \\"A\\", numRows = 1 Output: \\"A\\" Constraints: - `1 <= n <= 1000` - `1 <= s.length <= 1000` - The string `s` consists of printable ASCII characters.","solution":"def convert(s: str, numRows: int) -> str: if numRows == 1 or numRows >= len(s): return s rows = [\'\'] * numRows current_row = 0 going_down = False for char in s: rows[current_row] += char if current_row == 0 or current_row == numRows - 1: going_down = not going_down current_row += 1 if going_down else -1 return \'\'.join(rows)"},{"question":"Write a function that sorts an array of integers using the QuickSort algorithm. The function should take an array of integers as input and return the sorted array. Ensure that your implementation is efficient and handles both small and large arrays gracefully. Additionally, provide a brief explanation of the QuickSort algorithm and how it works with a general outline of its complexity in terms of time and space.","solution":"def quicksort(arr): Sorts an array of integers using the QuickSort algorithm. :param arr: List[int] - List of integers to be sorted :return: List[int] - Sorted list of integers if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"You are managing user permissions in a web application with role-based access control. Create a function that returns the list of permissions for a given user based on their assigned roles. The application has multiple roles, and each role has a set of permissions associated with it. Additionally, a user can be assigned multiple roles. Write a function `get_user_permissions` that takes in two arguments: - `user_id`: the ID of the user - `role_assignments`: a dictionary where keys are `user_id`s and values are lists of role names assigned to the user You are also given a dictionary `permissions` where keys are role names and values are lists of permissions for that role. Your function should return a set of unique permissions for the given user based on their roles. Example: ```python permissions = { \\"admin\\": [\\"read\\", \\"write\\", \\"delete\\"], \\"editor\\": [\\"read\\", \\"write\\"], \\"viewer\\": [\\"read\\"] } role_assignments = { 1: [\\"admin\\"], 2: [\\"editor\\", \\"viewer\\"], 3: [\\"viewer\\"] } def get_user_permissions(user_id, role_assignments): # Your code here # Test Cases print(get_user_permissions(1, role_assignments)) # Output: {\'read\', \'write\', \'delete\'} print(get_user_permissions(2, role_assignments)) # Output: {\'read\', \'write\'} print(get_user_permissions(3, role_assignments)) # Output: {\'read\'} ``` Implement the `get_user_permissions` function. Ensure that the function handles cases where a user has no roles assigned or the role is not found in the `permissions` dictionary.","solution":"def get_user_permissions(user_id, role_assignments, permissions): Returns a set of unique permissions for a given user based on their assigned roles. :param user_id: The ID of the user :param role_assignments: Dictionary where keys are user_id\'s and values are lists of role names assigned to the user :param permissions: Dictionary where keys are role names and values are lists of permissions for that role :return: Set of unique permissions for the given user # Get roles assigned to the user user_roles = role_assignments.get(user_id, []) user_permissions = set() # Collect permissions for assigned roles for role in user_roles: if role in permissions: user_permissions.update(permissions[role]) return user_permissions"},{"question":"Write a Python function that removes all nodes from a linked list whose values are greater than a given threshold. The function should take the head of the linked list and an integer threshold as input and return the head of the modified list. Additionally, provide a piece of erroneous code that attempts this task and explain why it fails.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def remove_greater_than(head, threshold): Removes all nodes from the linked list whose values are greater than the given threshold. dummy = ListNode(0) dummy.next = head current = dummy while current.next is not None: if current.next.value > threshold: current.next = current.next.next else: current = current.next return dummy.next"},{"question":"Write a Python function that simulates a very basic banking system. The system should be able to handle the following operations: deposit, withdraw, and check balance. The function should start with an initial balance of zero, and each operation will be described by a dictionary. The dictionary contains the type of operation (either \'deposit\', \'withdraw\', or \'check_balance\') and the amount for \'deposit\' and \'withdraw\' operations. The function should return a list of results for \'check_balance\' operations. Deposits add the specified amount to the current balance, while withdrawals subtract it. However, if a withdrawal operation tries to take more money than is currently in the balance, it should fail silently (i.e., the balance should remain unchanged). Use the following template for your function: ```python def bank_operations(operations): balance = 0 results = [] for operation in operations: if operation[\'type\'] == \'deposit\': balance += operation[\'amount\'] elif operation[\'type\'] == \'withdraw\': if operation[\'amount\'] <= balance: balance -= operation[\'amount\'] elif operation[\'type\'] == \'check_balance\': results.append(balance) return results # Example usage: operations = [ {\'type\': \'deposit\', \'amount\': 100}, {\'type\': \'withdraw\', \'amount\': 50}, {\'type\': \'check_balance\'}, {\'type\': \'withdraw\', \'amount\': 60}, {\'type\': \'check_balance\'} ] # The expected output for the example usage should be: [50, 50] ``` Test your implementation with the provided example to ensure correctness. Return a list of balance checks as the result.","solution":"def bank_operations(operations): balance = 0 results = [] for operation in operations: if operation[\'type\'] == \'deposit\': balance += operation[\'amount\'] elif operation[\'type\'] == \'withdraw\': if operation[\'amount\'] <= balance: balance -= operation[\'amount\'] elif operation[\'type\'] == \'check_balance\': results.append(balance) return results"},{"question":"Design a function named `move_zeros` that, given an integer list, returns a new list with all the zeroes moved to the end, while preserving the order of the non-zero elements. You should not use any additional lists or collections in your solution, and the function should be efficient in both time and space complexity. **Function Signature:** ```python def move_zeros(nums: List[int]) -> List[int]: ``` **Example:** ```python assert move_zeros([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0] assert move_zeros([1, 7, 0, 0, 8, 0]) == [1, 7, 8, 0, 0, 0] assert move_zeros([0, 0, 0]) == [0, 0, 0] assert move_zeros([1, 2, 3]) == [1, 2, 3] ``` **Constraints:** - The input list will contain only integers. - The list can be empty. - Try to achieve the solution with O(n) time complexity, where n is the number of elements in the list.","solution":"def move_zeros(nums): Moves all zeros in nums to the end while maintaining the order of non-zero elements. non_zero_index = 0 # First pass: place non-zero elements at the beginning of the list for num in nums: if num != 0: nums[non_zero_index] = num non_zero_index += 1 # Second pass: fill the rest of the list with zeros for i in range(non_zero_index, len(nums)): nums[i] = 0 return nums"},{"question":"Implement a function `longest_valid_parentheses(s: str) -> int` that takes a string `s` containing only the characters `\'(\'` and `\')\'`, and finds the length of the longest valid (well-formed) parentheses substring. # Examples ```python longest_valid_parentheses(\\"(()\\") # Output: 2 longest_valid_parentheses(\\")()())\\") # Output: 4 longest_valid_parentheses(\\"\\") # Output: 0 ``` # Constraints - The length of the input string `s` is at most `10^4`. - The function should have a time complexity of `O(n)`, where `n` is the length of the input string `s`. - The function should utilize a space complexity of `O(1)`, not including the input and output space. # Explanation The valid parentheses strings are as follows: - `\\"()\\"` is a valid parentheses string. - `\\"()()\\"` and `\\"(())\\"` are valid parentheses strings. - You need to design an optimal solution to find the longest sub-string that is valid in linear time.","solution":"def longest_valid_parentheses(s: str) -> int: Finds the length of the longest valid (well-formed) parentheses substring. :param s: A string consisting of \'(\' and \')\' :return: The length of the longest valid parenthesis substring max_length = 0 left = right = 0 # Left to Right pass for char in s: if char == \'(\': left += 1 else: right += 1 if left == right: max_length = max(max_length, 2 * right) elif right > left: left = right = 0 left = right = 0 # Right to Left pass for char in reversed(s): if char == \')\': right += 1 else: left += 1 if left == right: max_length = max(max_length, 2 * left) elif left > right: left = right = 0 return max_length"},{"question":"Write a function `character_frequency` that accepts a string and returns a dictionary where the keys are characters and the values are the frequency of each character in the string. The function should ignore case, i.e., treat \'A\' and \'a\' as the same character. Example: ``` character_frequency(\\"Apple\\") => {\'a\': 1, \'p\': 2, \'l\': 1, \'e\': 1} character_frequency(\\"HelloWorld\\") => {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ```","solution":"def character_frequency(s): Returns a dictionary with the frequency of each character in the string. The function ignores case. s = s.lower() freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 return freq"},{"question":"Implement a function in Python that accepts a list of integers and returns a new list containing only the prime numbers from the original list. Ensure that the function handles both positive and negative integers, excluding any negative numbers from the result. def filter_primes(numbers): # Your code here # Example usage: # Input: [3, 4, -1, 7, 10, 13] # Output: [3, 7, 13]","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def filter_primes(numbers): Filters the prime numbers from a list of integers. :param numbers: List of integers :return: List of prime numbers return [num for num in numbers if num > 0 and is_prime(num)]"},{"question":"Write a function that takes an array of integers and a target sum. The function should determine if there are two distinct elements within the array such that their sum equals the target sum. If such a pair exists, return the indices of the two elements. If no such pair exists, return an empty array. For example, given the array [10, 15, 3, 7] and target sum 17, the output should be [0, 3] as 10 + 7 = 17.","solution":"def find_pair_with_sum(arr, target): Given an array of integers and a target sum, returns the indices of two distinct elements such that their sum equals the target sum. If no such pair exists, returns an empty array. :param arr: List of integers :param target: Integer target sum :return: List of indices of the two distinct elements, or an empty list if no pair is found num_to_index = {} for i, num in enumerate(arr): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Write a function in a programming language of your choice that takes an integer array as input and returns the second largest element in the array. If the array has less than two elements, return None.","solution":"def second_largest(nums): Returns the second largest element in the array. If the array has less than two elements, return None. if len(nums) < 2: return None first, second = float(\'-inf\'), float(\'-inf\') for num in nums: if num > first: first, second = num, first elif first > num > second: second = num return second if second != float(\'-inf\') else None"},{"question":"Develop a function that takes a list of strings and returns the longest common prefix shared among all the strings. If there is no common prefix, the function should return an empty string. For example, given the input [\\"flower\\", \\"flow\\", \\"flight\\"], the output should be \\"fl\\". Use efficient string matching and comparison techniques to ensure optimal performance.","solution":"def longest_common_prefix(strs): if not strs: return \\"\\" # Sort the list to leverage the common prefix properties in the first and last items strs.sort() first = strs[0] last = strs[-1] common_prefix = [] for i in range(min(len(first), len(last))): if first[i] == last[i]: common_prefix.append(first[i]) else: break return \'\'.join(common_prefix)"},{"question":"Write a Python function that takes a list of integers and returns the list sorted in non-decreasing order without using the built-in `sort()` or `sorted()` functions. Demonstrate your function by sorting the list `[34, 2, 23, 67, 4, 18, 19]`.","solution":"def bubble_sort(lst): Sorts a list in non-decreasing order using the bubble sort algorithm. n = len(lst) for i in range(n): for j in range(0, n-i-1): if lst[j] > lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst # Demonstration sorted_list = bubble_sort([34, 2, 23, 67, 4, 18, 19]) print(sorted_list) # Output should be [2, 4, 18, 19, 23, 34, 67]"},{"question":"Define a function in Python that simulates the basic operations of a stack using a list. The function should support the following operations: - `push(x)`: Insert element `x` at the top of the stack. - `pop()`: Remove the element from the top of the stack and return it. - `top()`: Get the top element of the stack without removing it. - `isEmpty()`: Check whether the stack is empty. Ensure all operations maintain a time complexity of O(1). Provide a brief example illustrating the use of each operation.","solution":"class Stack: def __init__(self): Initialize an empty stack. self.stack = [] def push(self, x): Insert element x at the top of the stack. :param x: Element to be inserted. self.stack.append(x) def pop(self): Remove the element from the top of the stack and return it. :return: Top element of the stack. if not self.isEmpty(): return self.stack.pop() else: raise IndexError(\\"pop from empty stack\\") def top(self): Get the top element of the stack without removing it. :return: Top element of the stack. if not self.isEmpty(): return self.stack[-1] else: raise IndexError(\\"top from empty stack\\") def isEmpty(self): Check whether the stack is empty. :return: True if stack is empty, False otherwise. return len(self.stack) == 0 # Example usage # stack = Stack() # stack.push(1) # stack.push(2) # print(stack.top()) # Output: 2 # print(stack.pop()) # Output: 2 # print(stack.isEmpty()) # Output: False"},{"question":"Write a function that takes a list of integers and returns the length of the longest increasing subsequence (LIS). An increasing subsequence is defined as a sequence of numbers where each number is strictly greater than the preceding one. The subsequence does not need to be contiguous but should maintain the order of the original list. Identify any potential errors in the function provided and correct them. def longest_increasing_subsequence(arr): Return the length of the longest increasing subsequence in the list. >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 if not arr: return 0 lis = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)","solution":"def longest_increasing_subsequence(arr): Return the length of the longest increasing subsequence in the list. >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 if not arr: return 0 lis = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Write a function that takes a list of integers as an input and returns a new list that contains only the prime numbers from the original list. To solve this problem, do not use any library functions related to prime number generation or checking. Additionally, optimize the function to minimize the number of calculations by avoiding unnecessary checks. Validate your function with the list [10, 15, 3, 7, 19, 22, 23, 25, 29].","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(input_list): Returns a list of prime numbers from the input list. return [num for num in input_list if is_prime(num)] # Test the function with the given list filtered_primes = filter_primes([10, 15, 3, 7, 19, 22, 23, 25, 29]) filtered_primes"},{"question":"Develop a Python program that processes a dataset containing student test scores and their corresponding grades. The dataset consists of a series of student records, each with the following fields: student_id, student_name, test_score, and grade. Your task is to: 1. Calculate the average test score per grade. 2. Determine the highest and lowest test scores in the entire dataset. 3. Create and display a summary report containing the average, highest, and lowest scores per grade. 4. Handle any potential errors, such as missing data or invalid test scores, ensuring the program can process the dataset without terminating abruptly. The dataset is provided in CSV format, and you must use Python\'s built-in libraries (such as csv and statistics) to perform the data processing. The program should be efficient and handle datasets of varying sizes gracefully.","solution":"import csv import statistics def process_student_scores(csv_file_path): student_data = [] # Read CSV and collect data with open(csv_file_path, newline=\'\') as csv_file: reader = csv.DictReader(csv_file) for row in reader: try: student_id = row[\'student_id\'] student_name = row[\'student_name\'] test_score = float(row[\'test_score\']) grade = row[\'grade\'] student_data.append({ \'student_id\': student_id, \'student_name\': student_name, \'test_score\': test_score, \'grade\': grade }) except KeyError as e: print(f\\"Missing column in CSV: {e}\\") except ValueError: print(f\\"Invalid test score: {row.get(\'test_score\')}\\") # Processing data grade_data = {} all_scores = [] for student in student_data: grade = student[\'grade\'] test_score = student[\'test_score\'] all_scores.append(test_score) if grade not in grade_data: grade_data[grade] = [] grade_data[grade].append(test_score) summary_report = {} for grade, scores in grade_data.items(): avg_score = round(statistics.mean(scores), 2) if scores else 0 max_score = max(scores) if scores else 0 min_score = min(scores) if scores else 0 summary_report[grade] = { \'average_score\': avg_score, \'highest_score\': max_score, \'lowest_score\': min_score } overall_max_score = max(all_scores) if all_scores else 0 overall_min_score = min(all_scores) if all_scores else 0 return { \'summary_report\': summary_report, \'overall_highest_score\': overall_max_score, \'overall_lowest_score\': overall_min_score }"},{"question":"You are designing a data structure in Python to efficiently manage and query rainforest species currently under threat. Create a class `ThreatenedSpecies` which allows for the following functionalities: 1. Add a new species along with its threat level, categorized as \\"vulnerable\\", \\"endangered\\", or \\"critically endangered\\". 2. Update the threat level of an existing species. 3. Retrieve a list of all species under a specified threat category. Ensure that the class manages the species in a way that allows for constant time complexity on average for adding and updating threat levels, and linear time complexity for querying species by threat category. Demonstrate the use of this class with relevant examples.","solution":"class ThreatenedSpecies: def __init__(self): self.species_db = {} def add_species(self, species_name, threat_level): Adds a new species with the specified threat level. :param species_name: The name of the species. :param threat_level: The threat level of the species (\\"vulnerable\\", \\"endangered\\", or \\"critically endangered\\"). if threat_level not in {\\"vulnerable\\", \\"endangered\\", \\"critically endangered\\"}: raise ValueError(\\"Invalid threat level\\") self.species_db[species_name] = threat_level def update_threat_level(self, species_name, new_threat_level): Updates the threat level of an existing species. :param species_name: The name of the species. :param new_threat_level: The new threat level of the species (\\"vulnerable\\", \\"endangered\\", or \\"critically endangered\\"). if species_name not in self.species_db: raise KeyError(f\\"Species {species_name} does not exist\\") if new_threat_level not in {\\"vulnerable\\", \\"endangered\\", \\"critically endangered\\"}: raise ValueError(\\"Invalid threat level\\") self.species_db[species_name] = new_threat_level def get_species_by_threat_level(self, threat_level): Gets a list of all species under a specified threat level. :param threat_level: The threat level to query (\\"vulnerable\\", \\"endangered\\", or \\"critically endangered\\"). :return: A list of species names under the specified threat level. if threat_level not in {\\"vulnerable\\", \\"endangered\\", \\"critically endangered\\"}: raise ValueError(\\"Invalid threat level\\") return [species for species, level in self.species_db.items() if level == threat_level]"},{"question":"Write a Python function that flattens a deeply nested list of integers into a single list of integers, maintaining the order of the original elements. The input list can contain other lists and/or integers at any level of nesting, and the function should traverse and flatten the list regardless of its depth. Ensure that the function performs efficiently even with large and complex nested lists, avoiding stack overflow errors by not relying on a purely recursive solution. Consider the trade-offs between using iterative methods versus recursive methods for this problem. In addition, the function should be able to handle circular references within nested lists without entering an infinite loop. You should check for any self-referential structures, halt further traversal into them, and avoid duplicating elements during the process. Write unit tests to validate the correctness of your function, ensuring it works properly with various edge cases such as empty lists, lists containing only integers, lists with varying depths of nesting, and lists with circular references. Your implementation should include: 1. The function that flattens the nested list. 2. A brief analysis of its time complexity. 3. Unit tests for different edge cases. 4. An erroneous code segment that attempts to solve the problem and fails due to a fundamental misunderstanding. Analyze and clarify why the faulty code is inefficient and amend it. Ensure the function avoids using any built-in Python functions or libraries that directly solve the flattening problem. The function should be implemented purely with fundamental Python constructs.","solution":"def flatten_list(nested_list): Flattens a deeply nested list of integers into a single list of integers, maintaining order. def flatten_generator(nested_list, visited): for item in nested_list: if isinstance(item, list): id_item = id(item) if id_item in visited: continue visited.add(id_item) yield from flatten_generator(item, visited) else: yield item return list(flatten_generator(nested_list, set()))"},{"question":"Write a function in Python that counts the frequency of each word in a given list of strings and returns a dictionary with words as keys and their frequencies as values. words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"]","solution":"def count_word_frequencies(words): Returns a dictionary with words as keys and their frequencies as values. word_counts = {} for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 return word_counts"},{"question":"You are tasked with solving a problem called \\"Robot Path Planning\\". The problem details are as follows: Given a grid of size `m x n`, each cell in the grid is either empty (denoted as `0`) or blocked (denoted as `1`). Your task is to find the unique number of ways for a robot to move from the top-left cell (0,0) to the bottom-right cell (m-1,n-1). The robot can only move either down or right at any point in time. Additionally, cells with obstacles (value `1`) cannot be traversed. Write a function to count the number of unique paths that the robot can take to reach the bottom-right corner of the grid. If there is no valid path, return 0. Input: - An `m x n` grid of integers where `0 <= grid[i][j] <= 1`. Output: - An integer representing the number of unique paths from the top-left to the bottom-right corner of the grid. Example 1: Input: grid = [[0,0,0],[0,1,0],[0,0,0]] Output: 2 Explanation: The two paths are (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) and (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2). Example 2: Input: grid = [[0,1],[0,0]] Output: 1 Explanation: There is only one path, which is (0,0) -> (1,0) -> (1,1). Constraints: - `m == grid.length` - `n == grid[0].length` - `1 <= m, n <= 100` - `grid[i][j]` is either `0` (empty) or `1` (blocked).","solution":"def unique_paths_with_obstacles(grid): if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Design a Python function named \'most_frequent_element\' that takes a list of integers as input and returns the integer that appears most frequently in the list. If there are multiple integers with the same highest frequency, return the smallest one. Handle potential exceptions such as input not being a list or the list containing non-integer elements. Your function should implement the following steps: - Check if the input is a list and raise a TypeError if it is not. - Verify that all elements in the list are integers and raise a ValueError if they are not. - Use a dictionary to count the frequency of each element in the list. - Determine the element with the highest frequency and return it. If there is a tie, return the smallest element among those with the highest frequency. Include appropriate error messages for the exceptions raised.","solution":"def most_frequent_element(numbers): Returns the integer that appears most frequently in the list. If there are multiple integers with the same highest frequency, returns the smallest one. Raises: TypeError: If the input is not a list. ValueError: If the list contains non-integer elements. if not isinstance(numbers, list): raise TypeError(\\"Input must be a list.\\") for num in numbers: if not isinstance(num, int): raise ValueError(\\"All elements in the list must be integers.\\") if len(numbers) == 0: raise ValueError(\\"List must not be empty.\\") frequency = {} for num in numbers: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 max_frequency = max(frequency.values()) most_frequent = [k for k, v in frequency.items() if v == max_frequency] return min(most_frequent)"},{"question":"I\'m working on a Python script where I have a list of dictionaries representing products, and each product has a name and a price. I need to implement a functionality that sorts the list of products based on their price in ascending order. Additionally, if two products have the same price, they should be sorted by their name in alphabetical order. What would be the best way to achieve this? Here\'s a sample list of products: ```python products = [ {\\"name\\": \\"Pencil\\", \\"price\\": 1.5}, {\\"name\\": \\"Pen\\", \\"price\\": 1.5}, {\\"name\\": \\"Notebook\\", \\"price\\": 2.5}, {\\"name\\": \\"Eraser\\", \\"price\\": 0.5} ] ``` How can I sort this list in Python as described?","solution":"def sort_products(products): Sort products by price in ascending order. If two products have the same price, sort them by name in alphabetical order. return sorted(products, key=lambda x: (x[\'price\'], x[\'name\']))"},{"question":"Create a function `word_permutations` that takes in a string consisting solely of lowercase alphabetic characters and returns a list of all distinct permutations of the input string that are valid English words. The function should leverage an external dictionary of English words to validate the permutations. Write your solution to intuitively handle cases where the input string is empty, consists of a single letter, or where multiple permutations yield the same word to ensure no duplicates in the final output. Your implementation should prioritize efficiency, ideally using a recursive or iterative approach that minimizes the number of unnecessary permutations attempted and validated against the dictionary. Aim for a time complexity no worse than O(n!), where n is the length of the input string, but optimize for practical performance given that real-world dictionaries will only contain valid words of a reasonable length. Guidelines: - The function signature is `def word_permutations(input_string: str) -> List[str]:` - Utilize standard Python libraries and language features for dealing with strings and permutations. - Ensure the function handles edge cases gracefully and documents assumptions or constraints clearly.","solution":"from itertools import permutations from typing import List # A sample dictionary of English words for validation ENGLISH_WORDS = { \\"stop\\", \\"pots\\", \\"tops\\", \\"spot\\", \\"opts\\", \\"post\\", \\"hello\\", \\"world\\" } def word_permutations(input_string: str) -> List[str]: Returns all distinct permutations of the input string that are valid English words. if not input_string: return [] perm_set = set(\'\'.join(p) for p in permutations(input_string)) valid_words = [word for word in perm_set if word in ENGLISH_WORDS] return valid_words"},{"question":"Write a function that takes a list of strings containing mathematical expressions (e.g., \\"3+5\\", \\"12/4\\", \\"7-2*3+1\\") and returns a list of their evaluated results. Each mathematical expression will be a valid arithmetic expression consisting of integers and the operators `+`, `-`, `*`, and `/`. The function should handle operator precedence and parenthesis correctly.","solution":"def evaluate_expressions(expression_list): Takes a list of strings containing mathematical expressions and returns a list of their evaluated results. Parameters: expression_list (list): A list of strings containing mathematical expressions. Returns: list: A list of evaluated results for each expression. def evaluate_expression(expression): return eval(expression) return [evaluate_expression(exp) for exp in expression_list]"},{"question":"Write a function that takes a string consisting of words separated by spaces and returns the length of the shortest word. Avoid using built-in string functions that directly solve the problem, such as \\"min()\\". Test the function with the input \\"The quick brown fox jumps over the lazy dog.\\"","solution":"def length_of_shortest_word(s): Returns the length of the shortest word in the string s. words = s.split() # Split the string into words shortest_length = float(\'inf\') # Initialize with infinity for word in words: if len(word) < shortest_length: shortest_length = len(word) return shortest_length"},{"question":"Devise a procedural method, utilizing Python\'s list comprehension technique, to generate a list of all the even numbers within a specified range, and subsequently filter this list to include only those values that are divisible by 4. Start and end values of the range are provided as input parameters.","solution":"def generate_even_numbers(start, end): Generates a list of all even numbers within the specified range that are also divisible by 4. return [num for num in range(start, end + 1) if num % 2 == 0 and num % 4 == 0]"},{"question":"Given an array of integers `nums`, where every element appears twice except for one element which appears exactly once, find the single unique element. Example 1: Input: nums = [4,1,2,1,2] Output: 4 Example 2: Input: nums = [2,2,1] Output: 1 Example 3: Input: nums = [1] Output: 1 Constraints: `1 <= nums.length <= 3 * 10^4` `-3 * 10^4 <= nums[i] <= 3 * 10^4` Follow up: Could you implement a solution with a linear runtime complexity and without using extra memory?","solution":"def single_number(nums): Finds the single unique element in a list where every element appears twice except one. Args: nums (list of int): The input list of integers. Returns: int: The single element that appears only once. result = 0 for num in nums: result ^= num return result"},{"question":"Design a function that accepts an array of integers and an integer k, then returns the maximum sum of k consecutive elements in the array. Ensure the function is optimized for large input sizes. Consider edge cases such as when k is greater than the length of the array or when the array contains negative integers. Provide an example usage and expected output for clarity.","solution":"def max_sum_of_k_consecutive_elements(arr, k): Returns the maximum sum of k consecutive elements in the array. Parameters: arr (list): List of integers. k (int): Number of consecutive elements to sum. Returns: int: Maximum sum of k consecutive elements. n = len(arr) if k > n or k <= 0: return 0 # Initialize the maximum sum with the first window. max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window over the array. for i in range(k, n): current_sum = current_sum - arr[i - k] + arr[i] max_sum = max(max_sum, current_sum) return max_sum # Example usage: # Suppose arr = [1, 2, 3, 4, 5, 6, 7, 8, 9] and k = 3 # The function should return 24 because the maximum sum of 3 consecutive elements is 7 + 8 + 9 = 24"},{"question":"Write a function that takes an array of integers and returns the sum of the two largest integers in the array. Do not use any built-in sorting functions or methods.","solution":"def sum_of_two_largest(nums): Returns the sum of the two largest integers in the array. if len(nums) < 2: raise ValueError(\\"Array must contain at least two elements\\") first_max = float(\'-inf\') second_max = float(\'-inf\') for num in nums: if num > first_max: second_max = first_max first_max = num elif num > second_max: second_max = num return first_max + second_max"},{"question":"How would you implement a class in Python that simulates a simple bank account? This class should support operations such as depositing money, withdrawing money (with a check to prevent overdrafts), and querying the current balance. Provide a basic implementation of this class, and explain the methods used to achieve the desired functionalities.","solution":"class BankAccount: def __init__(self, initial_balance=0): Initializes the bank account with an initial balance. self.balance = initial_balance def deposit(self, amount): Increases the balance by the specified amount. if amount > 0: self.balance += amount return True else: return False def withdraw(self, amount): Decreases the balance by the specified amount if sufficient balance is available. Prevents overdrafts. if 0 < amount <= self.balance: self.balance -= amount return True else: return False def get_balance(self): Returns the current balance. return self.balance"},{"question":"Write a Python function that takes an integer `n` as input and returns the `n`-th number in the Fibonacci sequence using iterative approach. The Fibonacci sequence is defined as follows: - The first number in the sequence is 0, - The second number in the sequence is 1, - Each subsequent number is the sum of the previous two numbers. For instance: - `fibonacci(0)` should return `0` - `fibonacci(1)` should return `1` - `fibonacci(2)` should return `1` - `fibonacci(3)` should return `2` - `fibonacci(4)` should return `3` - `fibonacci(5)` should return `5` Ensure your solution is optimized for performance given potentially large values of `n`. **Function Signature:** ```python def fibonacci(n: int) -> int: # Write your code here ```","solution":"def fibonacci(n: int) -> int: Returns the n-th number in the Fibonacci sequence using an iterative approach. if n == 0: return 0 elif n == 1: return 1 prev, curr = 0, 1 for _ in range(2, n + 1): prev, curr = curr, prev + curr return curr"},{"question":"Write a Python function that takes a list of strings and returns a dictionary. Each key in the dictionary should be a unique word (ignoring case) from the list, and its value should be the number of occurrences of that word in the list. Additionally, the function should handle and discard any input that is not a string. Here is a sample code that needs fixing and enhancements: ```python def count_words(word_list): word_count = {} for word in word_list: word = word.lower() if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count ``` Identify the shortcomings of the provided code, propose a solution to ensure non-strings are discarded, and enhance the function to achieve the desired objective.","solution":"def count_words(word_list): Takes a list of strings and returns a dictionary with unique words as keys and their occurrences as values. Non-string items in the list are discarded. word_count = {} for item in word_list: if isinstance(item, str): # Ensure the item is a string word = item.lower() # Convert the word to lower case if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"Write a Python function called `calculate_factors` that takes an integer `n` as input and returns a list of all the factors of `n` in ascending order. For instance, if the input is `12`, the function should return `[1, 2, 3, 4, 6, 12]`. Ensure your function handles negative, zero, and positive integers correctly.","solution":"def calculate_factors(n): Returns a list of all factors of the integer n in ascending order. if n == 0: return [0] n = abs(n) factors = [] for i in range(1, n + 1): if n % i == 0: factors.append(i) return factors"},{"question":"Implement a matrix manipulation program that performs the following operations based on user input: 1. Transpose the Matrix 2. Rotate the Matrix 90 degrees clockwise 3. Rotate the Matrix 90 degrees counterclockwise The program should initially accept a matrix of integers and display a menu for selecting an operation. It should then execute the chosen operation and display the resulting matrix. Example Input: ``` Matrix: 1 2 3 4 5 6 7 8 9 Choose an operation: 1. Transpose 2. Rotate 90 degrees clockwise 3. Rotate 90 degrees counterclockwise ``` Example Output: If the user chooses operation 1: ``` 3 6 9 2 5 8 1 4 7 ```","solution":"def transpose(matrix): Transposes the given matrix. rows, cols = len(matrix), len(matrix[0]) return [[matrix[j][i] for j in range(rows)] for i in range(cols)] def rotate_90_clockwise(matrix): Rotates the given matrix 90 degrees clockwise. return [list(reversed(col)) for col in zip(*matrix)] def rotate_90_counterclockwise(matrix): Rotates the given matrix 90 degrees counterclockwise. return [list(col) for col in zip(*matrix)][::-1] def apply_operation(matrix, operation): Applies the selected operation on the matrix. if operation == 1: return transpose(matrix) elif operation == 2: return rotate_90_clockwise(matrix) elif operation == 3: return rotate_90_counterclockwise(matrix) else: raise ValueError(\\"Invalid operation\\")"},{"question":"Write a function that takes an integer `n` and returns an array of the first `n` Fibonacci numbers. The function should handle cases where `n` is less than 1 by returning an empty array. Write efficient code to avoid redundant calculations.","solution":"def fibonacci_sequence(n): Returns an array of the first n Fibonacci numbers. If n is less than 1, returns an empty array. if n < 1: return [] fibs = [0, 1] if n > 1 else [0] for i in range(2, n): fibs.append(fibs[-1] + fibs[-2]) return fibs[:n]"},{"question":"Write a function that takes a string as input and returns the integer representation of the Roman numeral. For example, the string \\"IX\\" should return the integer 9, and the string \\"LVIII\\" should return 58. You can assume that the input will always be a valid Roman numeral in the range from 1 to 3999. Use the standard Roman numeral system and symbols: I (1), V (5), X (10), L (50), C (100), D (500), and M (1000). Function signature: `def roman_to_int(s: str) -> int:` Examples: ``` Input: \\"III\\" Output: 3 Input: \\"IV\\" Output: 4 Input: \\"IX\\" Output: 9 Input: \\"LVIII\\" Output: 58 Input: \\"MCMXCIV\\" Output: 1994 ```","solution":"def roman_to_int(s: str) -> int: Convert a Roman numeral string to its integer representation. roman_to_value = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 previous_value = 0 for char in reversed(s): current_value = roman_to_value[char] # If current value is less than the previous value, it means subtract this value if current_value < previous_value: total -= current_value else: total += current_value previous_value = current_value return total"},{"question":"**Write a function `flatten_dict` that takes a nested dictionary and returns a flat dictionary where the keys are the paths to each value in the original dictionary. The paths should be concatenated by dots. For example, given the following dictionary:** ```python { \'a\': { \'b\': { \'c\': 1, \'d\': 2 }, \'e\': 3 }, \'f\': 4 } ``` **The function should return:** ```python { \'a.b.c\': 1, \'a.b.d\': 2, \'a.e\': 3, \'f\': 4 } ``` **Assume all dictionary keys are strings. Write the implementation for the `flatten_dict` function, and include comments explaining your approach.** ```python def flatten_dict(d, parent_key=\'\', sep=\'.\'): # Resulting dictionary items = [] for k, v in d.items(): # If parent_key is not empty, prepend it and join with the current key by separator new_key = parent_key + sep + k if parent_key else k if isinstance(v, dict): # Recursively flatten the nested dictionary items.extend(flatten_dict(v, new_key, sep=sep).items()) else: # Append the key-value pair to the items list items.append((new_key, v)) # Convert the list of tuples into a dictionary return dict(items) # Example usage nested_dict = { \'a\': { \'b\': { \'c\': 1, \'d\': 2 }, \'e\': 3 }, \'f\': 4 } flattened = flatten_dict(nested_dict) print(flattened) # {\'a.b.c\': 1, \'a.b.d\': 2, \'a.e\': 3, \'f\': 4} ``` **Explanation:** - The function `flatten_dict` takes three arguments: the dictionary to flatten, an optional `parent_key` used to build the path, and a `sep` which is the separator for concatenating paths. - A list named `items` is initialized to store the key-value pairs. - The function iterates over each key-value pair in the dictionary. If the value is a dictionary, it recursively calls itself, passing the new key formed by concatenating `parent_key`, separator, and current key. - If the value is not a dictionary, it appends the formed key and value to the `items` list. - Finally, it converts the list of tuples into a dictionary and returns it.","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. Parameters: d (dict): The dictionary to flatten. parent_key (str): The base key to use for the flattened keys. sep (str): The separator to use between key components. Returns: dict: A flattened dictionary. items = [] for k, v in d.items(): new_key = parent_key + sep + k if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Create a function `find_single_number` that takes an array of integers where every element appears twice except for one. Implement an algorithm that finds that single number in linear time without using extra memory. You can assume that the input array will always have at least one element and exactly one element that appears only once. # Example ```python find_single_number([4, 1, 2, 1, 2]) # Should return 4 find_single_number([2, 2, 1]) # Should return 1 ``` # Constraints - The input array will have a minimum of 1 and a maximum of 10^5 elements. - The elements of the array are in the range of -3 * 10^4 to 3 * 10^4. - The solution should run in O(n) time complexity. - The solution should use O(1) extra space complexity.","solution":"def find_single_number(nums): Returns the single number in the array where every other number appears twice. Implements using bitwise XOR operation to achieve O(n) time complexity and O(1) space complexity. unique_number = 0 for num in nums: unique_number ^= num # XOR will cancel out the numbers that appear twice return unique_number"},{"question":"Develop a function that accepts a dictionary where the keys are strings representing product names and the values are lists containing two elements: the price of the product (a float) and the quantity available (an integer). The function should calculate and return a new dictionary where the keys are the product names and the values are the total value of each product in stock (calculated as price multiplied by quantity). If either the price or the quantity is not valid (e.g., negative values), that product should be excluded from the returned dictionary. The function should manage all edge cases and ensure the output is accurate and validated.","solution":"def calculate_inventory_value(products): Calculate and return a dictionary with the total value of each product in stock. The input dictionary `products` has product names as keys and lists of two elements as values: [price (a float), quantity available (an integer)]. Products with invalid price or quantity (e.g., negative values) are excluded from the returned dictionary. inventory_value = {} for product, details in products.items(): if len(details) != 2: continue price, quantity = details if isinstance(price, (int, float)) and isinstance(quantity, int): if price >= 0 and quantity >= 0: inventory_value[product] = price * quantity return inventory_value"},{"question":"Write a program that simulates a basic calculator capable of performing addition, subtraction, multiplication, and division. The program should accept two numerical operands and an operator from the user and then output the result of the operation. Ensure the program includes error-checking mechanisms to handle invalid inputs, such as non-numeric entries or division by zero. If invalid input is detected, the program should communicate the error to the user and prompt for correct input values. Implement this problem using a procedural programming approach and include detailed comments to explain your code.","solution":"def basic_calculator(operand1, operand2, operator): Simulates a basic calculator capable of performing addition, subtraction, multiplication, and division. Parameters: operand1 (float): The first numerical operand. operand2 (float): The second numerical operand. operator (str): The operator indicating the operation to perform. This can be \'+\', \'-\', \'*\', or \'/\'. Returns: float: The result of the operation. Raises: ValueError: If the inputs are invalid. # Check if the operands are numerical try: num1 = float(operand1) num2 = float(operand2) except ValueError: raise ValueError(\\"Operands must be numeric.\\") # Check if the operator is one of the valid operators if operator not in [\'+\', \'-\', \'*\', \'/\']: raise ValueError(\\"Invalid operator. Must be one of \'+\', \'-\', \'*\', or \'/\'.\\") # Perform the operation if operator == \'+\': return num1 + num2 elif operator == \'-\': return num1 - num2 elif operator == \'*\': return num1 * num2 elif operator == \'/\': if num2 == 0: raise ValueError(\\"Cannot divide by zero.\\") return num1 / num2"},{"question":"Write a Python function that takes a list of integers and returns a list with all prime numbers removed. Analyze this function to identify common pitfalls for handling edge cases, such as large numbers and empty lists. ```python def remove_primes(lst): def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True return [x for x in lst if not is_prime(x)] # Edge case example print(remove_primes([2, 3, 5, 10, 15, 21, 23, 27])) # Output should be [10, 15, 21, 27] print(remove_primes([])) # Output should be [] print(remove_primes([2])) # Output should be [] print(remove_primes([-1, 0, 1])) # Output should be [-1, 0, 1] print(remove_primes([100003])) # Output should be [] ``` Compare the performance of this function on a list with a mix of small and large integers, considering list comprehensions and the efficiency of prime-checking logic.","solution":"def remove_primes(lst): def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True return [x for x in lst if not is_prime(x)]"},{"question":"Write a function in Python that takes a string as input and returns a dictionary with the frequency count of each letter in the string. The function should be case-insensitive and should ignore non-alphabet characters. Example input: ``` \\"The quick brown fox jumps over the lazy dog!\\" ``` Expected output: ``` { \'a\': 1, \'b\': 1, \'c\': 1, \'d\': 1, \'e\': 3, \'f\': 1, \'g\': 1, \'h\': 2, \'i\': 1, \'j\': 1, \'k\': 1, \'l\': 1, \'m\': 1, \'n\': 1, \'o\': 4, \'p\': 1, \'q\': 1, \'r\': 2, \'s\': 1, \'t\': 2, \'u\': 2, \'v\': 1, \'w\': 1, \'x\': 1, \'y\': 1, \'z\': 1 } ```","solution":"def letter_frequency_count(s): Returns a dictionary with the frequency count of each letter in the input string. The function is case-insensitive and ignores non-alphabet characters. frequency = {} for char in s.lower(): if char.isalpha(): if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Write a Python function that accepts a list of integers and returns a tuple containing two lists: one with the even numbers and the other with the odd numbers from the input list. Both lists should be sorted in ascending order. Ensure your solution handles edge cases such as an empty input list or a list with no even or odd numbers. Test your function with at least three different inputs to demonstrate its correctness.","solution":"def separate_and_sort_integers(nums): Separates the given list of integers into even and odd numbers, then returns a tuple containing two lists: one with the even numbers and the other with the odd numbers, both sorted in ascending order. evens = sorted([num for num in nums if num % 2 == 0]) odds = sorted([num for num in nums if num % 2 != 0]) return (evens, odds)"},{"question":"In computer science, sorting algorithms are a crucial part of data manipulation. Given an array of integers, implement the QuickSort algorithm to sort the array in ascending order. Explain the principles behind QuickSort and provide the code to accomplish this task. Input: [34, 7, 23, 32, 5, 62]","solution":"def quicksort(arr): if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) # Example usage input_array = [34, 7, 23, 32, 5, 62] sorted_array = quicksort(input_array) print(sorted_array) # Output: [5, 7, 23, 32, 34, 62]"},{"question":"Implement a function that takes a positive integer \'n\' and returns a list of all Fibonacci numbers less than or equal to \'n\'. Ensure that the function is optimized for both time and space complexity. Example: ```python def fibonacci_up_to_n(n): # Implement your solution here pass # Example usage: print(fibonacci_up_to_n(10)) # Output: [0, 1, 1, 2, 3, 5, 8] print(fibonacci_up_to_n(15)) # Output: [0, 1, 1, 2, 3, 5, 8, 13] ``` Your task is to write the `fibonacci_up_to_n` function. The current complexity should be better than the naïve approach. Ensure that your implementation has linear time complexity, O(n).","solution":"def fibonacci_up_to_n(n): Returns a list of all Fibonacci numbers less than or equal to \'n\'. if n < 0: raise ValueError(\\"Input must be a positive integer\\") fib_sequence = [] a, b = 0, 1 while a <= n: fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Convert the following string \\"hello world\\" into a dictionary where each character is a key, and the value is the number of times that character appears in the string. Ignore spaces.","solution":"def string_to_char_frequency_dict(s): Converts a string into a dictionary where each character is a key, and the value is the number of times that character appears in the string. The function ignores spaces. frequency_dict = {} for char in s.replace(\\" \\", \\"\\"): if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Implement a function in Python that takes as input a list of integers and returns a list of tuples, where each tuple contains two elements: an integer from the input list and the number of times it appears consecutively in the list. The function should preserve the order of first appearances of the integers in the list. **Function Signature:** ```python def count_consecutive_occurrences(arr: List[int]) -> List[Tuple[int, int]]: pass ``` **Input:** - A list of integers `arr`. **Output:** - A list of tuples containing the integer and its consecutive count. **Example:** ```python assert count_consecutive_occurrences([1, 1, 2, 2, 2, 3, 1, 1, 1]) == [(1, 2), (2, 3), (3, 1), (1, 3)] assert count_consecutive_occurrences([4, 4, 4]) == [(4, 3)] assert count_consecutive_occurrences([1, 2, 3, 4]) == [(1, 1), (2, 1), (3, 1), (4, 1)] ``` **Constraints:** - The length of the list `arr` is at most (10^5). - Each integer in the list `arr` lies between (-10^9) and (10^9).","solution":"from typing import List, Tuple def count_consecutive_occurrences(arr: List[int]) -> List[Tuple[int, int]]: if not arr: return [] result = [] current_number = arr[0] count = 1 for num in arr[1:]: if num == current_number: count += 1 else: result.append((current_number, count)) current_number = num count = 1 result.append((current_number, count)) # append the last counted element return result"},{"question":"You are given a list of integers representing the heights of different buildings standing in a row. You need to determine how many buildings receive direct sunlight in the evening. A building receives direct sunlight if there are no taller buildings to its right. Example: ``` Input: [3, 7, 8, 3, 6, 1] Output: 3 Explanation: The buildings with heights 8, 6, and 1 receive direct sunlight. ``` Write a function `count_sunny_buildings` that takes a list of integers and returns the number of buildings that receive direct sunlight. Your implementation should achieve a time complexity of O(n).","solution":"def count_sunny_buildings(heights): Returns the number of buildings that receive direct sunlight in the evening. count = 0 max_height = 0 # Scan the building heights from right to left. for height in reversed(heights): if height > max_height: count += 1 max_height = height return count"},{"question":"Suppose you are developing a program using Python to perform data analysis on a CSV file containing student grades. The CSV file, \\"student_grades.csv\\", has the following format: ``` Name,Subject,Grade Alice,Math,85 Bob,Math,90 Alice,Science,92 Bob,Science,88 Charlie,Math,87 Charlie,Science,93 ``` Write a Python function `calculate_average_grades(file_path)` that reads the CSV file and calculates the average grade for each student across all subjects. The function should return a dictionary where the keys are student names, and the values are their average grades. For example, given the above CSV content, the function should return: ```python { \\"Alice\\": 88.5, \\"Bob\\": 89.0, \\"Charlie\\": 90.0 } ```","solution":"import csv def calculate_average_grades(file_path): Reads a CSV file containing student grades and calculates the average grade for each student. Args: file_path (str): The path to the CSV file. Returns: dict: A dictionary where the keys are student names, and the values are their average grades. student_grades = {} with open(file_path, mode=\'r\') as file: reader = csv.DictReader(file) for row in reader: name = row[\'Name\'] grade = float(row[\'Grade\']) if name not in student_grades: student_grades[name] = {\'total\': 0, \'count\': 0} student_grades[name][\'total\'] += grade student_grades[name][\'count\'] += 1 averages = {name: grades[\'total\'] / grades[\'count\'] for name, grades in student_grades.items()} return averages"},{"question":"Implement a function that takes a string containing a mathematical equation in the form of a linear equation (e.g., \\"3x + 2 = 14\\") and solves for the variable x. The equation can have both positive and negative coefficients and constants, and may include spaces. Return the value of x rounded to 2 decimal places. If the equation has no solution or infinite solutions, return None. Additionally, handle cases where the input might have invalid formatting and return None for such cases.","solution":"import re def solve_linear_equation(equation): Solves a linear equation of the form \'ax + b = c\' and returns the value of x rounded to 2 decimal places. Parameters: equation (str): A string representing the linear equation. Returns: float: The value of x rounded to 2 decimal places, or None if the equation is invalid or has no/inf solutions. try: # Remove spaces from the equation equation = equation.replace(\\" \\", \\"\\") # Find the left and right side of the equation left_side, right_side = equation.split(\'=\') # Regular expression to match the \'ax + b\' part match = re.fullmatch(r\'([+-]?[0-9]*.?[0-9]*)x([+-][0-9]*.?[0-9]*)?\', left_side) # If it doesn\'t match the expected pattern, return None if not match: return None # Get the coefficient of x (a) and constant term (b) a = match.group(1) b = match.group(2) # Replace empty string with appropriate values a = 1.0 if a == \'\' else -1.0 if a == \'-\' else float(a) b = 0.0 if b is None else float(b) # d is the right side constant d = float(right_side) # Solving for x x = (d - b) / a # Round the result to 2 decimal places return round(x, 2) except (ValueError, ZeroDivisionError): return None"},{"question":"Design a program that simulates a simple library system. The system should be able to manage books and handle basic library operations. Specifically, create a `Book` class and a `Library` class that interact with each other. 1. The `Book` class should have the following attributes: - `title` (string) - `author` (string) - `isbn` (string, unique identifier for the book) - `is_checked_out` (boolean, initially set to `False`) 2. The `Book` class should have the following methods: - `check_out()`: Marks the book as checked out (`is_checked_out = True`) - `return_book()`: Marks the book as returned (`is_checked_out = False`) 3. The `Library` class should have the following attributes: - `inventory` (a list that stores `Book` objects) 4. The `Library` class should have the following methods: - `add_book(book)`: Adds a `Book` object to the library\'s inventory. - `remove_book(isbn)`: Removes a book with the given ISBN from the library\'s inventory. - `checkout_book(isbn)`: Marks the book with the given ISBN as checked out. - `return_book(isbn)`: Marks the book with the given ISBN as returned. - `list_books()`: Prints all the books in the library\'s inventory with their check-out status. Create instances of both classes and write code to demonstrate the functionality of the library system by adding books, checking out books, returning books, and listing the books. ```python class Book: def __init__(self, title, author, isbn): self.title = title self.author = author self.isbn = isbn self.is_checked_out = False def check_out(self): self.is_checked_out = True def return_book(self): self.is_checked_out = False class Library: def __init__(self): self.inventory = [] def add_book(self, book): self.inventory.append(book) def remove_book(self, isbn): self.inventory = [book for book in self.inventory if book.isbn != isbn] def checkout_book(self, isbn): for book in self.inventory: if book.isbn == isbn: book.check_out() break def return_book(self, isbn): for book in self.inventory: if book.isbn == isbn: book.return_book() break def list_books(self): for book in self.inventory: status = \'Checked out\' if book.is_checked_out else \'Available\' print(f\\"Title: {book.title}, Author: {book.author}, ISBN: {book.isbn}, Status: {status}\\") # Example Usage book1 = Book(\\"1984\\", \\"George Orwell\\", \\"1111\\") book2 = Book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", \\"2222\\") library = Library() library.add_book(book1) library.add_book(book2) library.list_books() library.checkout_book(\\"1111\\") library.list_books() library.return_book(\\"1111\\") library.list_books() library.remove_book(\\"2222\\") library.list_books() ```","solution":"class Book: def __init__(self, title, author, isbn): self.title = title self.author = author self.isbn = isbn self.is_checked_out = False def check_out(self): self.is_checked_out = True def return_book(self): self.is_checked_out = False class Library: def __init__(self): self.inventory = [] def add_book(self, book): self.inventory.append(book) def remove_book(self, isbn): self.inventory = [book for book in self.inventory if book.isbn != isbn] def checkout_book(self, isbn): for book in self.inventory: if book.isbn == isbn: book.check_out() break def return_book(self, isbn): for book in self.inventory: if book.isbn == isbn: book.return_book() break def list_books(self): book_list = [] for book in self.inventory: status = \'Checked out\' if book.is_checked_out else \'Available\' book_list.append((book.title, book.author, book.isbn, status)) return book_list # Example Usage (uncomment for manual testing) # book1 = Book(\\"1984\\", \\"George Orwell\\", \\"1111\\") # book2 = Book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", \\"2222\\") # # library = Library() # library.add_book(book1) # library.add_book(book2) # # print(library.list_books()) # library.checkout_book(\\"1111\\") # print(library.list_books()) # library.return_book(\\"1111\\") # print(library.list_books()) # library.remove_book(\\"2222\\") # print(library.list_books())"},{"question":"Can you write a function that takes a single number as input and returns a list of all prime numbers up to that number? The function should use an efficient algorithm to identify the prime numbers.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers p = 2 while (p * p <= n): if (sieve[p] == True): for i in range(p * p, n + 1, p): sieve[i] = False p += 1 prime_numbers = [p for p in range(n + 1) if sieve[p]] return prime_numbers"},{"question":"Write a Python function that takes a string as input and returns a new string with the characters in reverse order. Ensure that the function handles all valid input characters, including letters, numbers, punctuation, and whitespace. Example input: \\"Hello, World!\\" Example output: \\"!dlroW ,olleH\\"","solution":"def reverse_string(s): Returns the given string with characters in reverse order. Parameters: s (str): The input string to be reversed. Returns: str: A new string with characters in reverse order. return s[::-1]"},{"question":"Write a function that takes a string of words separated by spaces and returns a dictionary where the keys are the unique words (case-insensitive) and the values are integers representing the frequency of each word. Optimize your solution for large texts and consider edge cases such as punctuation and multiple spaces between words.","solution":"import re from collections import defaultdict def word_frequency(string): Takes a string of words separated by spaces and returns a dictionary where the keys are the unique words (case-insensitive) and the values are integers representing the frequency of each word. # Use regex to find all words (remove punctuation) and convert to lower case words = re.findall(r\'bw+b\', string.lower()) freq_dict = defaultdict(int) for word in words: freq_dict[word] += 1 return dict(freq_dict)"},{"question":"Create a function that determines if a given string is a palindrome, considering only alphanumeric characters and ignoring cases. Implement your solution with an emphasis on efficient data handling and string manipulation.","solution":"def is_palindrome(s): Determines if a given string is a palindrome, considering only alphanumeric characters and ignoring cases. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Compare the filtered list with its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Implement a function that takes a string of lowercase letters and returns the run-length encoding of that string. The run-length encoding is a form of basic data compression where consecutive identical characters (runs) are replaced with the count of their occurrences followed by the character itself. For example, the string \\"aaabccddd\\" would be encoded as \\"3a1b2c3d\\". Ensure your function handles strings with no repeated characters effectively too.","solution":"def run_length_encoding(s): Returns the run-length encoding of the input string s. if not s: return \\"\\" encoded = [] count = 1 prev_char = s[0] for char in s[1:]: if char == prev_char: count += 1 else: encoded.append(f\\"{count}{prev_char}\\") count = 1 prev_char = char encoded.append(f\\"{count}{prev_char}\\") # append the last run return \'\'.join(encoded)"},{"question":"Given a nested dictionary representing college courses and their respective student rosters, write a function `flatten_courses` that takes in this dictionary and returns a flattened list of all enrolled students along with their respective courses in the form of tuples. Discuss the impact of the order of items in your output list and how you can ensure consistency across multiple runs of your function. For example, given the following nested dictionary: ```python courses = { \'Math101\': [\'Alice\', \'Bob\', \'Charlie\'], \'History202\': [\'Alice\', \'David\', \'Edward\'], \'Science303\': [\'Charlie\', \'David\'] } ``` Your function should produce an output such as: ```python [(\'Alice\', \'Math101\'), (\'Bob\', \'Math101\'), (\'Charlie\', \'Math101\'), (\'Alice\', \'History202\'), (\'David\', \'History202\'), (\'Edward\', \'History202\'), (\'Charlie\', \'Science303\'), (\'David\', \'Science303\')] ``` Explain the method you used to generate the output and discuss how you handle scenarios where students might be enrolled in multiple courses.","solution":"def flatten_courses(courses): Returns a flattened list of tuples containing student names and their respective courses. flattened = [] for course, students in courses.items(): for student in sorted(students): # Sorting students for consistency flattened.append((student, course)) return sorted(flattened) # Sorting overall list for consistency # Sample function usage courses = { \'Math101\': [\'Alice\', \'Bob\', \'Charlie\'], \'History202\': [\'Alice\', \'David\', \'Edward\'], \'Science303\': [\'Charlie\', \'David\'] } flatten_courses(courses)"},{"question":"You are given a Python dictionary that represents a collection of books, with each key being a book\'s title and the value being another dictionary containing the author, year of publication, and ISBN. Write a function `find_books` that takes two parameters: `data`, the books dictionary, and `query`, a string. The function should return a list of books where the query string is found either in the title or the author\'s name. Comparison should be case-insensitive. The returned list should contain the titles of the matching books. Example: ```python books = { \\"The Great Gatsby\\": {\\"author\\": \\"F. Scott Fitzgerald\\", \\"year\\": 1925, \\"ISBN\\": \\"9780743273565\\"}, \\"To Kill a Mockingbird\\": {\\"author\\": \\"Harper Lee\\", \\"year\\": 1960, \\"ISBN\\": \\"9780060935467\\"}, \\"1984\\": {\\"author\\": \\"George Orwell\\", \\"year\\": 1949, \\"ISBN\\": \\"9780451524935\\"}, \\"The Catcher in the Rye\\": {\\"author\\": \\"J.D. Salinger\\", \\"year\\": 1951, \\"ISBN\\": \\"9787543321724\\"}, } query = \\"george\\" find_books(books, query) # Output: [\\"1984\\"] ```","solution":"def find_books(data, query): Finds and returns a list of book titles where the query string is found either in the title or the author\'s name. Comparison is case-insensitive. :param data: Dictionary containing book information. :param query: String to search for in book titles and author names. :return: List of book titles that match the query. query_lower = query.lower() result = [] for title, info in data.items(): if query_lower in title.lower() or query_lower in info[\'author\'].lower(): result.append(title) return result"},{"question":"Develop a function that receives a list of integers representing the heights of consecutive buildings and an integer k representing the maximum number of jumps allowed. Each jump allows you to move to the next building only if the height of the next building is not greater than the current building plus k. The function should determine if it\'s possible to reach the last building starting from the first building. Implement this function in Python and ensure it efficiently handles lists of up to 10,000 elements. Demonstrate your approach with a set of example test cases, explaining both your logic and any assumptions made.","solution":"def can_reach_last_building(heights, k): Determines if it is possible to reach the last building starting from the first building. Args: heights (list): A list of integers representing the heights of consecutive buildings. k (int): The maximum number of jumps allowed. Returns: bool: True if it\'s possible to reach the last building, False otherwise. n = len(heights) if n == 0: return False pos = 0 while pos < n - 1: if heights[pos + 1] <= heights[pos] + k: pos += 1 else: break return pos == n - 1"},{"question":"Write a function `find_winner` to determine the winning candidate in an election. The function receives a list of tuples, where each tuple consists of a candidate name and the number of votes cast for them. Return the name of the candidate with the highest number of votes. If there is a tie, return the name of the candidate that appears first in the list of tuples. For example, given the input `[(\'Alice\', 50), (\'Bob\', 75), (\'Catherine\', 75)]`, the function should return `\'Bob\'` because although Bob and Catherine have the same number of votes, Bob appears first in the list.","solution":"def find_winner(votes): Determines the winning candidate in an election based on the number of votes. Parameters: votes (list of tuples): A list of tuples where each tuple consists of a candidate\'s name and the number of votes. Returns: str: The name of the winning candidate. if not votes: return None # Handle the case of an empty vote list. max_votes = votes[0][1] winner = votes[0][0] for candidate, vote_count in votes[1:]: if vote_count > max_votes: max_votes = vote_count winner = candidate return winner"},{"question":"Design a Python function that processes an input list of integers, identifying and returning the second smallest unique element. If there is no such element, return a suitable message. For example, given the input [3, 1, 5, 3, 7, 2, 2, 1], the function should return 2.","solution":"def second_smallest_unique(lst): Identifies and returns the second smallest unique element in a list of integers. If there is no second smallest unique element, returns a suitable message. unique_elements = list(set(lst)) unique_elements.sort() if len(unique_elements) < 2: return \\"No second smallest unique element\\" return unique_elements[1]"},{"question":"Write a Python function that takes a dictionary as input, where the keys are strings representing item names and the values are integers representing item quantities. The function should return a list of keys (item names) that have even quantities, sorted in alphabetical order. items = {\\"apple\\": 3, \\"banana\\": 4, \\"orange\\": 2, \\"grape\\": 5}","solution":"def even_quantity_items(items): Returns a list of keys (item names) that have even quantities, sorted in alphabetical order. Parameters: items (dict): A dictionary where keys are item names (str) and values are item quantities (int). Returns: List[str]: A list of item names with even quantities, sorted alphabetically. even_items = [item for item, quantity in items.items() if quantity % 2 == 0] return sorted(even_items)"},{"question":"Write a function that checks whether a given string is a valid IPv4 address. A valid IPv4 address consists of exactly four integers separated by dots, each integer ranging from 0 to 255. For example: \\"192.168.0.1\\". Return True if the address is valid and False otherwise. For example: \\"192.168.0.256\\" should return False. Ensure to handle scenarios with leading zeros or extra spaces.","solution":"def is_valid_ipv4_address(ip): Checks whether a given string is a valid IPv4 address. :param ip: str - The IP address to validate. :return: bool - True if the IP address is valid, False otherwise. # Split the string by dots parts = ip.split(\'.\') # Check if we have exactly four parts if len(parts) != 4: return False for part in parts: # Check if part is made of digits only if not part.isdigit(): return False # Convert part to integer num = int(part) # Check if the number is within the valid range if num < 0 or num > 255: return False # Check for leading zeros (special condition) if part != str(num): return False return True"},{"question":"In a 2D grid of integers, each cell in the grid represents a building with a certain height. A peak is defined as a cell that is strictly greater than its four neighboring cells (north, east, south, and west). Write a function that takes a 2D list representing the heights of buildings in a grid and returns the coordinates of all the peaks. Additionally, calculate the sum and product of the heights of all the peaks. Here is a piece of code that attempts to solve the problem but may not cover all edge cases: ```python def findPeaks(grid): rows = len(grid) cols = len(grid[0]) peaks = [] for r in range(rows): for c in range(cols): if (r == 0 or grid[r][c] > grid[r-1][c]) and (r == rows-1 or grid[r][c] > grid[r+1][c]) and (c == 0 or grid[r][c] > grid[r][c-1]) and (c == cols-1 or grid[r][c] > grid[r][c+1]): peaks.append((r, c)) heights = [grid[r][c] for r, c in peaks] return peaks, sum(heights), prod(heights) def prod(lst): result = 1 for num in lst: result *= num return result ``` Example 1: Input: grid = [ [1, 4, 3, 2], [3, 5, 6, 4], [2, 2, 1, 3] ] Output: [ (1, 2)], Sum = 6, Product = 6 Example 2: Input: grid = [ [10, 12, 14], [9, 15, 13], [8, 11, 12] ] Output: [(0, 2), (1, 1)], Sum = 29, Product = 210 Constraints: - The grid will have at least 1 row and 1 column. - The height values will be positive integers not exceeding 10^6.","solution":"def findPeaks(grid): rows = len(grid) cols = len(grid[0]) peaks = [] for r in range(rows): for c in range(cols): if (r == 0 or grid[r][c] > grid[r-1][c]) and (r == rows-1 or grid[r][c] > grid[r+1][c]) and (c == 0 or grid[r][c] > grid[r][c-1]) and (c == cols-1 or grid[r][c] > grid[r][c+1]): peaks.append((r, c)) heights = [grid[r][c] for r, c in peaks] return peaks, sum(heights), prod(heights) def prod(lst): result = 1 for num in lst: result *= num return result"},{"question":"Assume you are given an array of integers. Develop an efficient algorithm that identifies the maximum product of any three integers within the array. Once determined, the algorithm should return the computed maximum product. Note that the optimal solution should ideally operate in linear time complexity.","solution":"def maximum_product_of_three(nums): Returns the maximum product of any three integers in the given array. if len(nums) < 3: raise ValueError(\\"Array should have at least three integers\\") # Initialize three largest and two smallest values max1, max2, max3 = float(\'-inf\'), float(\'-inf\'), float(\'-inf\') min1, min2 = float(\'inf\'), float(\'inf\') for num in nums: # Update maximums if num > max1: max1, max2, max3 = num, max1, max2 elif num > max2: max2, max3 = num, max2 elif num > max3: max3 = num # Update minimums if num < min1: min1, min2 = num, min1 elif num < min2: min2 = num return max(max1 * max2 * max3, max1 * min1 * min2)"},{"question":"Write a function to rotate the elements of a given list to the right by k steps. For example, if the list is [1, 2, 3, 4, 5, 6, 7] and k is 3, the output should be [5, 6, 7, 1, 2, 3, 4].","solution":"def rotate_list(nums, k): Rotate the elements of the list to the right by k steps. :param nums: List of elements to rotate. :param k: Number of steps to rotate the list. :return: Rotated list. if not nums: return nums k = k % len(nums) # To ensure k is within the length of nums return nums[-k:] + nums[:-k]"},{"question":"Write a function that takes a string `s` as input and returns a dictionary where the keys are the words in `s` and the values are the number of times each word appears in `s`. The function should handle punctuation correctly and be case-insensitive (i.e., \'Hello\' and \'hello\' should be counted as the same word). Consider using regular expressions for handling punctuation. Example: Input: \\"Hello, world! Hello.\\" Output: {\'hello\': 2, \'world\': 1}","solution":"import re from collections import defaultdict def word_count(s): Returns a dictionary with words as keys and their frequency as values. The function is case-insensitive and handles punctuation correctly. # Convert to lower case s = s.lower() # Remove punctuation using regular expressions and split into words words = re.findall(r\'bw+b\', s) # Use a dictionary to count the occurrences of each word word_freq = defaultdict(int) for word in words: word_freq[word] += 1 return dict(word_freq)"},{"question":"You need to develop a function in Python that processes a string containing a mathematical expression of two non-negative integers and a single arithmetic operator (+, -, *, /). The function should calculate and return the result of the expression. It should handle errors gracefully, specifically when the input string is improperly formatted, contains invalid operators, or results in a division by zero. Additionally, the function should handle edge cases such as large numbers, and floating-point precision issues. As a starting point to guide initial thoughts, consider the following erroneous code: ```python def calculate_expression(expression): try: num1, operator, num2 = expression.split() num1 = int(num1) num2 = int(num2) if operator == \'+\': return num1 + num2 elif operator == \'-\': return num1 - num2 elif operator == \'*\': return num1 * num2 elif operator == \'/\': return num1 / num2 else: return \\"Invalid operator\\" except Exception as e: return str(e) example_expression = \\"15 + 5\\" print(calculate_expression(example_expression)) ``` In its current form, the code does not handle incorrect input formats, invalid operators, or division by zero errors effectively. Modify the function to address these issues and meet the requirements as outlined in the problem statement.","solution":"def calculate_expression(expression): try: parts = expression.split() if len(parts) != 3: return \\"Invalid format\\" num1, operator, num2 = parts try: num1 = float(num1) num2 = float(num2) except ValueError: return \\"Invalid numbers\\" if operator == \'+\': return num1 + num2 elif operator == \'-\': return num1 - num2 elif operator == \'*\': return num1 * num2 elif operator == \'/\': if num2 == 0: return \\"Division by zero error\\" return num1 / num2 else: return \\"Invalid operator\\" except Exception as e: return str(e)"},{"question":"Create a function that takes a string representing a simple mathematical expression, evaluates the expression, and returns the result. The string can contain integers, addition (+), and multiplication (*) operators only. No spaces will be present in the input string. For example, given the input \\"3+2*2\\", the output should be 7.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing integers, addition (+), and multiplication (*) operators only. # Split expression into tokens tokens = [] num = \\"\\" for char in expression: if char.isdigit(): num += char else: tokens.append(int(num)) tokens.append(char) num = \\"\\" if num: tokens.append(int(num)) # Process multiplication first i = 0 while i < len(tokens): if tokens[i] == \'*\': result = tokens[i - 1] * tokens[i + 1] tokens = tokens[:i - 1] + [result] + tokens[i + 2:] else: i += 1 # Process addition next i = 0 while i < len(tokens): if tokens[i] == \'+\': result = tokens[i - 1] + tokens[i + 1] tokens = tokens[:i - 1] + [result] + tokens[i + 2:] else: i += 1 return tokens[0]"},{"question":"Write a Python function that accepts a list of integers and returns a dictionary. The keys of the dictionary should be the original integers, and the values should be True if the integer is a prime number and False otherwise. def prime_status(numbers): pass","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def prime_status(numbers): Takes a list of integers and returns a dictionary. Keys: original integers from the list. Values: True if the integer is prime, False otherwise. return {num: is_prime(num) for num in numbers}"},{"question":"Develop a Python function that finds the largest rectangle of 1\'s in a given 2D binary matrix. The function should return the area of the rectangle.","solution":"def maximalRectangle(matrix): Finds the largest rectangle containing only 1\'s and returns its area. if not matrix: return 0 max_area = 0 n_cols = len(matrix[0]) heights = [0] * (n_cols + 1) # Extra 0 height to handle the final width of the row for row in matrix: for i in range(n_cols): # Update the heights array heights[i] = heights[i] + 1 if row[i] == \'1\' else 0 stack = [-1] # Stack to store the indices for i in range(n_cols+1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Write a function that generates all valid combinations of n pairs of parentheses. The function should return the combinations as a list of strings. Ensure that each combination has n pairs of well-formed parentheses. Example: Input: n = 3 Output: [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"]","solution":"def generate_parentheses(n): Generate all combinations of well-formed parentheses for n pairs. :param n: Number of pairs of parentheses :type n: int :return: List of strings, each representing a valid combination of parentheses :rtype: list[str] def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) result = [] backtrack() return result"},{"question":"You are tasked with implementing a function to perform a level-order traversal on a binary tree. The task details are as follows: Given a binary tree, return its level-order traversal in a bottom-up manner, meaning the traversal should start from the last level and go up to the root. Example 1: Provided Input: root = [3,9,20,null,null,15,7] Expected Output: [[15, 7], [9, 20], [3]] Example 2: Provided Input: root = [1,2,3,4,5,6,7,null,null,8,9] Expected Output: [[8, 9], [4, 5, 6, 7], [2, 3], [1]] Example 3: Provided Input: root = [] Expected Output: [] Limitations: The quantity of nodes in the tree falls within the range `[0, 5000]`. `-104 <= Node.val <= 104`","solution":"from typing import List, Optional from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def levelOrderBottom(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] result = deque() q = deque([root]) while q: level_size = len(q) current_level = [] for _ in range(level_size): node = q.popleft() current_level.append(node.val) if node.left: q.append(node.left) if node.right: q.append(node.right) result.appendleft(current_level) return list(result)"},{"question":"Implement a function `merge_sorted_arrays(arr1, arr2)` which takes two sorted arrays as input and returns a single sorted array that contains all elements from both input arrays. Ensure the function maintains the sorted order without using any built-in sorting functions. Discuss the time complexity of your solution. ```python def merge_sorted_arrays(arr1, arr2): # Your code here pass ```","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: A single sorted array containing all elements from arr1 and arr2. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Implement a function in Python that takes a list of integer tuples and returns a new list containing the tuples sorted based on their second element in descending order. If any tuples have the same second element, maintain their relative order from the original list (stable sort). # Input - A list of integer tuples, for example: `[(1, 3), (2, 2), (3, 1), (4, 2)]`. # Output - A new list of tuples, sorted based on the second element in descending order. For example, the above input should yield `[(1, 3), (2, 2), (4, 2), (3, 1)]`. # Requirements 1. Implement the function using sorting algorithms or the sort function provided in Python. 2. Ensure that the sort is stable; that is, tuples with identical second elements should remain in their original order relative to each other. # Function Signature ```python def sort_tuples_by_second_element(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]: pass ``` # Example ```python input_list = [(1, 3), (2, 2), (3, 1), (4, 2)] output = sort_tuples_by_second_element(input_list) print(output) # Output: [(1, 3), (2, 2), (4, 2), (3, 1)] ``` - Explain the design decisions for your implementation. - Include explanation about the stability of the sort and how it is achieved in your code. # Additional Instructions 1. Writing test cases is encouraged to confirm the correctness of your function. 2. Discuss any edge cases that might arise with the implementation, such as an empty list or tuples with identical second elements.","solution":"from typing import List, Tuple def sort_tuples_by_second_element(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Sorts tuples based on the second element in descending order. The sort is stable. Parameters: tuples (List[Tuple[int, int]]): A list of integer tuples. Returns: List[Tuple[int, int]]: A new list of tuples sorted based on the second element in descending order. # Use the sorted() function with a lambda function to sort by the second element in descending order. # sorted() ensures that the sort is stable, thus maintaining the relative order of elements with the same # second element. return sorted(tuples, key=lambda x: x[1], reverse=True) # Example Execution input_list = [(1, 3), (2, 2), (3, 1), (4, 2)] output = sort_tuples_by_second_element(input_list) print(output) # Output: [(1, 3), (2, 2), (4, 2), (3, 1)]"},{"question":"Your company manages an array of servers and you need to ensure that the log files on these servers are periodically checked and archived if they are older than a certain number of days. Write a Python script that archives log files which are older than 7 days. Your script should: 1. Traverse through a given directory (including subdirectories). 2. Identify files with a \'.log\' extension. 3. Check the last modification time of these files. 4. If the last modification time is older than 7 days, move these files to an \'archive\' directory located at the root of the given directory. Note: Ensure that the \'archive\' directory is created if it does not exist already. You may use any necessary Python libraries to accomplish this task. # Example Given a directory structure: ``` /logs /app1 - error.log - access.log /app2 - error.log - access.log /archive ``` Your script should move any log files older than 7 days from \'app1\' or \'app2\' directories to the \'archive\' directory within \'logs\'. You must consider edge cases such as: - Empty directories - Directories without any \'.log\' files - Ensuring that no other files (i.e., non-log files) are moved. Write a function `archive_old_logs(base_directory: str)` that achieves the desired functionality.","solution":"import os import shutil import time from datetime import datetime, timedelta def archive_old_logs(base_directory): Archives log files older than 7 days in the given directory and its subdirectories. Args: base_directory (str): Path to the base directory containing log files. # Create the archive directory if it doesn\'t exist archive_dir = os.path.join(base_directory, \'archive\') if not os.path.exists(archive_dir): os.makedirs(archive_dir) cutoff_time = datetime.now() - timedelta(days=7) for root, _, files in os.walk(base_directory): for file in files: if file.endswith(\'.log\'): file_path = os.path.join(root, file) file_mod_time = datetime.fromtimestamp(os.path.getmtime(file_path)) if file_mod_time < cutoff_time: shutil.move(file_path, os.path.join(archive_dir, file))"},{"question":"In this exercise, you will work with graph algorithms using the NetworkX library in Python. Your task is to analyze and manipulate a given network to find specific properties and shortest paths. You are provided with an undirected graph represented by a list of edges. Your first task is to construct the graph and add the edges using NetworkX. Next, you need to identify if the graph is connected and print whether it is or isn\'t. Additionally, you need to find the shortest path between two nodes, A and B, that are provided as input. If there is no path between A and B, your function should indicate that as well. Here is the list of edges and nodes A and B for which you need to find the shortest path: ```python edges = [(1, 2), (1, 3), (2, 4), (3, 4), (2, 5), (5, 6), (6, 7)] A = 1 B = 7 ``` Your tasks: 1. Create the graph and add the edges using NetworkX. 2. Check if the graph is connected and print \\"Graph is connected\\" or \\"Graph is not connected\\". 3. Find and print the shortest path between nodes A and B. If no path exists, print \\"No path between A and B\\". Here is a code template to get you started: ```python import networkx as nx def analyze_graph(edges, A, B): # Create the graph G = nx.Graph() # Adding edges to the graph G.add_edges_from(edges) # Check if the graph is connected if nx.is_connected(G): print(\\"Graph is connected\\") else: print(\\"Graph is not connected\\") # Find the shortest path between A and B try: shortest_path = nx.shortest_path(G, source=A, target=B) print(f\\"Shortest path between {A} and {B}: {shortest_path}\\") except nx.NetworkXNoPath: print(f\\"No path between {A} and {B}\\") # Example usage with the given edges and nodes A, B edges = [(1, 2), (1, 3), (2, 4), (3, 4), (2, 5), (5, 6), (6, 7)] A = 1 B = 7 analyze_graph(edges, A, B) ``` You need to complete the `analyze_graph` function to correctly analyze and manipulate the graph as described. Ensure to handle edge cases and follow the specified output format.","solution":"import networkx as nx def analyze_graph(edges, A, B): Analyzes the graph with the given edges and finds the shortest path between nodes A and B. Args: edges (list of tuple of int): List of edges in the graph. A (int): Start node for shortest path. B (int): End node for shortest path. # Create the graph G = nx.Graph() # Adding edges to the graph G.add_edges_from(edges) # Check if the graph is connected if nx.is_connected(G): print(\\"Graph is connected\\") else: print(\\"Graph is not connected\\") # Find the shortest path between A and B try: shortest_path = nx.shortest_path(G, source=A, target=B) print(f\\"Shortest path between {A} and {B}: {shortest_path}\\") except nx.NetworkXNoPath: print(f\\"No path between {A} and {B}\\")"},{"question":"Write a Python function named \'group_elements\' that takes in two parameters: a list of integers, and an optional Boolean parameter `group_by_type` which defaults to `True`. The function should return a list with elements grouped based on their types (positive, negative, zero) in the order they appear. If `group_by_type` is set to `False`, it should return the list with elements grouped by their parity (even, odd) instead. Ensure the function handles an empty list by returning an empty list. If the input is not a list of integers, the function should raise a ValueError. For example: - For the input `[0, -3, 7, 2, -1, -3, 5, 0]` and the default parameter, the output should be `[0, 0, -3, -1, -3, 7, 2, 5]`. - For the input `[0, -3, 7, 2, -1, -3, 5, 0]` and `group_by_type` set to `False`, the output should be `[0, 2, 0, -3, 7, -1, -3, 5]`.","solution":"def group_elements(lst, group_by_type=True): Groups elements based on their types (positive, negative, zero) or their parity (even, odd). :param lst: List of integers to be grouped. :param group_by_type: Boolean parameter to decide the grouping criteria. Defaults to True. :return: Grouped list of integers based on the specified criteria. if not isinstance(lst, list) or not all(isinstance(i, int) for i in lst): raise ValueError(\\"Input should be a list of integers.\\") if group_by_type: zero = [i for i in lst if i == 0] negative = [i for i in lst if i < 0] positive = [i for i in lst if i > 0] return zero + negative + positive else: even = [i for i in lst if i % 2 == 0] odd = [i for i in lst if i % 2 != 0] return even + odd"},{"question":"Create a function that accepts a list of sentences and returns a list of words that appear in every sentence. The function should be case-insensitive (i.e., \'Apple\' is the same as \'apple\') but must return the results in lower case. Words should be considered to be sequences of alphanumeric characters separated by non-alphanumeric characters. Avoid using any built-in string or list manipulation functions that simplify this task. Finally, your function should maximize efficiency and avoid unnecessary computations or memory usage.","solution":"def common_words(sentences): Returns a list of words that appear in every sentence. import re # Function to split sentence into words (alphanumeric only) in lowercase def split_into_words(sentence): return re.findall(r\'bw+b\', sentence.lower()) # Split sentences into lists of words word_lists = [set(split_into_words(sentence)) for sentence in sentences] # Find common words across all sentences common_words = set.intersection(*word_lists) return list(common_words)"},{"question":"Design an algorithm that identifies and removes duplicate strings in an array while maintaining the original order of elements in the array. Write your code to handle this in Python and ensure it has optimal time and space complexity. Provide an example to demonstrate your solution.","solution":"def remove_duplicates(strings): Removes duplicate strings from the list while maintaining the original order. Parameters: strings (list of str): The input list of strings. Returns: list of str: The list with duplicates removed, maintaining original order. seen = set() unique_strings = [] for string in strings: if string not in seen: unique_strings.append(string) seen.add(string) return unique_strings"},{"question":"Create a Python function that takes a string as input and returns a dictionary where the keys are the unique characters in the string, and the values are the counts of these characters. Example: For the input string \\"abracadabra\\", the function should return {\'a\': 5, \'b\': 2, \'r\': 2, \'c\': 1, \'d\': 1}.","solution":"def count_characters(s): Takes a string and returns a dictionary with the counts of unique characters. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Given the following Python code, identify and correct any logical errors that exist. Once you have a logically correct version of the code, refactor it to improve its efficiency in terms of time complexity. Additionally, write a function to measure and compare the execution time of the original versus the refactored function for a sample input. Initial Python code: ``` def find_max(arr): max_num = 0 for num in arr: if num > max_num: max_num = num return max_num ```","solution":"def find_max(arr): if not arr: return None max_num = arr[0] for num in arr: if num > max_num: max_num = num return max_num def find_max_refactored(arr): if not arr: return None return max(arr) import time def compare_execution_time(arr): start_time_original = time.time() find_max(arr) time_original = time.time() - start_time_original start_time_refactored = time.time() find_max_refactored(arr) time_refactored = time.time() - start_time_refactored return time_original, time_refactored"},{"question":"Write a python function that takes a list of strings and a target string as input and finds the smallest number of adjacent swaps required to transform the list into a state where the target string appears consecutively. If it is not possible to achieve this, the function should return -1. The function should be optimized for both time and space complexity, considering the length of the list and the constraints of adjacent swaps.","solution":"def min_adjacent_swaps_to_group_target(arr, target): Returns the minimum number of adjacent swaps required to group all occurrences of target consecutively in the list. If it is not possible, returns -1. # Find all indices of the target string in the list target_indices = [i for i, x in enumerate(arr) if x == target] if not target_indices: return -1 n = len(target_indices) # Calculate the optimal position where all the targets should be grouped median_index = n // 2 median_position = target_indices[median_index] swaps = 0 for i, index in enumerate(target_indices): optimal_position = median_position - (median_index - i) swaps += abs(optimal_position - index) return swaps"},{"question":"Write a function that takes a string consisting of lowercase alphabets and returns the most frequently occurring character. If there are multiple characters with the same frequency, return all such characters in a list sorted in alphabetical order. For example: 1. Input: \\"banana\\" Output: [\'a\'] 2. Input: \\"apple\\" Output: [\'p\'] 3. Input: \\"mississippi\\" Output: [\'i\', \'s\']","solution":"from collections import Counter def most_frequent_characters(s): Returns the most frequently occurring character(s) in the string. If there are multiple such characters, the function returns them in a list sorted in alphabetical order. if not s: return [] frequency = Counter(s) max_frequency = max(frequency.values()) most_frequent = [char for char, count in frequency.items() if count == max_frequency] return sorted(most_frequent)"},{"question":"Write a Python function `validate_password` that takes a string as input and returns `True` if the password is strong and `False` otherwise. A strong password is defined as one that: 1. Is at least 8 characters long. 2. Contains both uppercase and lowercase characters. 3. Contains at least one numerical digit. 4. Contains at least one special character from the set: `!@#%^&*()-_+=`. You should also write a few test cases to verify that your function works correctly. Ensure your function handles edge cases such as empty strings and strings that barely meet or fail the criteria. Ensure to include necessary error handling and validations.","solution":"import re def validate_password(password): Validates if the given password is strong. A strong password must satisfy the following conditions: 1. Be at least 8 characters long. 2. Contain both uppercase and lowercase characters. 3. Contain at least one numerical digit. 4. Contain at least one special character from the set: !@#%^&*()-_+= Args: password (str): The password string to validate. Returns: bool: True if the password is strong, False otherwise. if len(password) < 8: return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[0-9]\', password): return False if not re.search(r\'[!@#%^&*()-_=+]\', password): return False return True"},{"question":"Create a function that takes a list of integers as input and returns a new list containing only the prime numbers from the original list. Additionally, if the provided list contains any repeated integers, the duplicates should be removed from the final output list. To clarify, the final output list should contain only unique prime numbers. Implement your solution using Python. # Example ```python def filter_unique_primes(numbers): pass # Test Cases print(filter_unique_primes([2, 3, 4, 5, 3, 2, 7, 8, 9, 3])) # Output: [2, 3, 5, 7] print(filter_unique_primes([10, 11, 11, 13, 14, 15, 17])) # Output: [11, 13, 17] print(filter_unique_primes([20, 21, 22, 23, 24])) # Output: [23] print(filter_unique_primes([])) # Output: [] print(filter_unique_primes([31, 37, 37, 37, 31, 43])) # Output: [31, 37, 43] ``` # Constraints - Each integer in the input list will be a non-negative number less than 1,000,000. - The function should aim for efficient determination of prime numbers.","solution":"def filter_unique_primes(numbers): Returns a list of unique prime numbers from the input list. def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True unique_numbers = set(numbers) prime_numbers = [num for num in unique_numbers if is_prime(num)] return sorted(prime_numbers)"},{"question":"Implement a function called `condense_whitespace` that takes a string containing multiple words separated by varying amounts of whitespace (spaces, tabs, newlines) and returns a single string where all consecutive whitespace characters are reduced to a single space, with no leading or trailing whitespace. ```python import re def condense_whitespace(s): return re.sub(r\'s+\', \' \', s).strip() # Sample Usage print(condense_whitespace(\\"hello world\\")) # Output: \\"hello world\\" print(condense_whitespace(\\" thistis an test \\")) # Output: \\"this is a test\\" ``` Illustrative examples: - condense_whitespace(\\" hello world \\") ought to yield \\"hello world\\" - condense_whitespace(\\"line1n line2ttline3\\") ought to yield \\"line1 line2 line3\\"","solution":"import re def condense_whitespace(s): Takes a string containing multiple words separated by varying amounts of whitespace (spaces, tabs, newlines) and returns a single string where all consecutive whitespace characters are reduced to a single space, with no leading or trailing whitespace. return re.sub(r\'s+\', \' \', s).strip() # Sample Usage print(condense_whitespace(\\"hello world\\")) # Output: \\"hello world\\" print(condense_whitespace(\\" thistis an test \\")) # Output: \\"this is a test\\""},{"question":"You are given a list of non-negative integers representing the heights of ladder rungs in a staircase. Each element in the list represents a rung on the staircase, and your goal is to find the minimum number of jumps required to reach the last rung when starting from the first rung. You can jump from a rung to any other rung that is ahead of the current rung. Write a function `min_jumps` that takes a list of integers as an input and returns the minimum number of jumps needed to reach the last rung. If the last rung cannot be reached, return -1. For example: ```python def min_jumps(rungs): pass print(min_jumps([4, 1, 1, 3, 1, 1, 1])) # Output: 2 print(min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9])) # Output: 3 print(min_jumps([0, 2, 3])) # Output: -1 ``` Explain the complexity of your solution and any assumptions or design decisions you made. Discuss edge cases such as an empty list or a single rung ladder.","solution":"def min_jumps(rungs): Returns the minimum number of jumps required to reach the last rung in the given list of rung heights. If the last rung cannot be reached, returns -1. if len(rungs) <= 1: return 0 # No jumps needed if there\'s one or zero rungs if rungs[0] == 0: return -1 # Cannot make any jump if the first rung is 0 n = len(rungs) max_reach = rungs[0] step = rungs[0] jumps = 1 for i in range(1, n): if i == n - 1: return jumps max_reach = max(max_reach, i + rungs[i]) step -= 1 if step == 0: jumps += 1 if i >= max_reach: return -1 step = max_reach - i return -1"},{"question":"Write a function `merge_sorted_arrays` in Python that takes two lists of integers, `arr1` and `arr2`, which are both already sorted in ascending order, and returns a single merged list that contains all elements from both lists, also sorted in ascending order. Ensure the merged list maintains the sorting order and handles duplicate elements correctly. Example: ```python def merge_sorted_arrays(arr1, arr2): # Your code here # Test cases print(merge_sorted_arrays([1, 3, 5], [2, 4, 6])) # Output: [1, 2, 3, 4, 5, 6] print(merge_sorted_arrays([0, 2, 4], [1, 3, 5])) # Output: [0, 1, 2, 3, 4, 5] print(merge_sorted_arrays([1, 1, 1], [1, 1, 1])) # Output: [1, 1, 1, 1, 1, 1] print(merge_sorted_arrays([], [1, 2, 3])) # Output: [1, 2, 3] print(merge_sorted_arrays([5, 10, 15], [])) # Output: [5, 10, 15] ```","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. merged_array = [] i = j = 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Create a Python function that takes a string as input and returns a new string that contains only the first occurrence of each character from the input string, preserving their original order. In addition to this, implement a feature to track and print the count of removed characters. Ensure that your solution is efficient in terms of time and space complexity and explain these complexities briefly. Provide a few test cases to demonstrate the functionality of your solution.","solution":"def remove_duplicates_preserve_order(s): Returns a new string that contains only the first occurrence of each character from the input string, preserving their original order. Also, print the count of removed characters. seen = set() result = [] removed_count = 0 for char in s: if char not in seen: seen.add(char) result.append(char) else: removed_count += 1 print(f\\"Count of removed characters: {removed_count}\\") return \'\'.join(result) # Example usage: print(remove_duplicates_preserve_order(\\"abracadabra\\")) # Output: \\"abrcd\\""},{"question":"Write a Python function that receives a list of integers and returns the sum of all even numbers that are greater than 10. If there are no such even numbers, the function should return 0. Example: ```python nums = [4, 15, 8, 23, 42, 2, 18] result = sum_even_greater_than_10(nums) print(result) # Output should be 60 ```","solution":"def sum_even_greater_than_10(nums): Returns the sum of all even numbers in the list that are greater than 10. Parameters: nums (list): List of integers Returns: int: Sum of even numbers greater than 10, or 0 if no such numbers exist return sum(num for num in nums if num > 10 and num % 2 == 0)"},{"question":"Given a sequence composed of integer elements, develop an algorithm to identify and return the maximal contiguous subsequence that exhibits a strictly increasing order. Your solution should ensure efficiency and optimal performance, particularly for extensive input sizes. Present your implementation in your preferred programming language, and include detailed comments to elucidate your logic and approach.","solution":"def longest_increasing_subsequence(arr): Returns the maximal contiguous subsequence that exhibits a strictly increasing order. :param arr: List[int] - input list of integers :return: List[int] - maximal increasing contiguous subsequence if not arr: return [] max_len = 0 current_len = 1 start, end = 0, 0 max_start, max_end = 0, 0 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_len += 1 end = i else: if current_len > max_len: max_len = current_len max_start = start max_end = end current_len = 1 start = i end = i if current_len > max_len: max_start = start max_end = end return arr[max_start:max_end + 1]"},{"question":"Incorporate the numpy and pandas libraries in Python. Create a DataFrame containing two columns: \'item\' containing the elements [\'apple\', \'banana\', \'cherry\', \'date\', \'elderberry\'] and \'price\' containing random integers between 1 and 10. Filter the DataFrame to display only rows where the \'price\' is greater than 5.","solution":"import pandas as pd import numpy as np def create_filtered_dataframe(): data = {\'item\': [\'apple\', \'banana\', \'cherry\', \'date\', \'elderberry\'], \'price\': np.random.randint(1, 11, size=5)} df = pd.DataFrame(data) filtered_df = df[df[\'price\'] > 5] return filtered_df"},{"question":"Create a function that takes an array of integers and returns a boolean indicating whether the array can be partitioned into two subsets such that the sum of elements in both subsets is identical. Assume the input array contains only non-negative integers. Example: Input: [1, 5, 11, 5] Output: True (The array can be partitioned into [1, 5, 5] and [11]) Input: [1, 2, 3, 5] Output: False (The array cannot be partitioned into two subsets with equal sum)","solution":"def can_partition(nums): Determines if the array can be partitioned into two subsets with equal sum. :param nums: List of non-negative integers. :return: Boolean indicating whether the partition is possible. total_sum = sum(nums) # If total_sum is odd, it\'s not possible to partition into two equal subsets. if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Develop a function that analyses a given string representing a mathematical expression and converts it into its equivalent postfix notation (Reverse Polish Notation - RPN). The function should correctly identify and process the following operators: addition (`+`), subtraction (`-`), multiplication (`*`), division (`/`), and exponentiation (`^`). It should also account for and correctly handle parentheses to establish the order of operations. The input string will contain single-digit operands and may include spaces for readability, which should be ignored by the function. Your solution should ensure the proper precedence and associativity of the operators during the conversion process.","solution":"def infix_to_postfix(expression): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2, \'^\': 3} associativity = {\'+\': \'L\', \'-\': \'L\', \'*\': \'L\', \'/\': \'L\', \'^\': \'R\'} output = [] stack = [] # Remove spaces from the expression expression = expression.replace(\' \', \'\') for char in expression: if char.isdigit(): # If the character is an operand, add it to the output output.append(char) elif char == \'(\': # If the character is \'(\', push it onto the stack stack.append(char) elif char == \')\': # If the character is \')\', pop and output until \'(\' is found while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() # Remove the \'(\' from the stack else: # The character is an operator while (stack and stack[-1] in precedence and ((associativity[char] == \'L\' and precedence[char] <= precedence[stack[-1]]) or (associativity[char] == \'R\' and precedence[char] < precedence[stack[-1]]))): output.append(stack.pop()) stack.append(char) # Pop all the operators left in the stack while stack: output.append(stack.pop()) return \'\'.join(output)"},{"question":"You are given an incomplete function to find the longest common prefix string amongst an array of strings. Complete the code and ensure it efficiently handles edge cases. Optimize the function to have a minimized worst-case time complexity. After completing the function, test its efficacy using a range of test cases, including varied string lengths and characters. Provide a brief explanation of your approach and the reasoning behind any design choices made. Additionally, discuss how the chosen approach improves over a naive solution, especially in terms of performance for large datasets.","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. :param strs: List of strings :return: The longest common prefix string if not strs: return \\"\\" # Find the minimum string in length min_len = min(len(s) for s in strs) # Start from the first character to the length of the smallest string for i in range(min_len): # Current character to compare current_char = strs[0][i] # Compare it with same index character in all strings if any(s[i] != current_char for s in strs): return strs[0][:i] return strs[0][:min_len] # All characters matched up to min_len length"},{"question":"Write a function that takes an array of integers and a target integer. The function should determine if any two integers in the array sum to the target integer and returns the indices of these two integers as a tuple. If no such pair exists, return `None`. Consider the following example: - Input: array = [3, 2, 4], target = 6 - Output: (1, 2) Constraints: - You can assume that each input would have exactly one solution. - You cannot use the same element twice. - The array should be traversed only once.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in nums that add up to target. If no such pair exists, returns None. :param nums: List[int] - List of integers :param target: int - Target sum :return: Tuple[int, int] - Indices of the two numbers that add up to target num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None"},{"question":"Design a function that analyzes a list of integers and returns the number of elements greater than 10. No external libraries should be used, and the function should handle lists of varying sizes efficiently. The function should follow this signature: ```python def count_greater_than_ten(numbers: List[int]) -> int: pass ```","solution":"from typing import List def count_greater_than_ten(numbers: List[int]) -> int: Returns the number of elements in the list \'numbers\' that are greater than 10. count = 0 for number in numbers: if number > 10: count += 1 return count"},{"question":"<p>Given a grid with obstacles, find the number of unique paths from the top-left corner to the bottom-right corner stepping only either down or right at any point in time. The grid is represented as a 2D array where 0 represents an empty cell and 1 represents an obstacle. You are to determine the number of possible unique paths while avoiding the obstacles.</p> <p>For instance, consider the grid:</p> <div class=\\"center\\"> begin{pmatrix} 0 & 0 & 0 0 & 1 & 0 0 & 0 & 0 end{pmatrix} </div> <p>In this grid, there are 2 possible unique paths from the top-left corner to the bottom-right corner, avoiding the obstacle. One path is to move right -> right -> down -> down, and the other is to move down -> down -> right -> right.</p> <p>Write a function <code>uniquePathsWithObstacles(obstacleGrid)</code> that takes a 2D list <code>obstacleGrid</code> and returns the number of unique paths from the top-left corner to the bottom-right corner.</p> <p><strong>Example:</strong></p> <pre> <strong>Input:</strong> obstacleGrid = [ [0,0,0], [0,1,0], [0,0,0] ] <strong>Output:</strong> 2 </pre>","solution":"def uniquePathsWithObstacles(obstacleGrid): # If the starting point or the ending point has an obstacle, return 0 paths if obstacleGrid[0][0] == 1 or obstacleGrid[-1][-1] == 1: return 0 # Get the size of the grid m, n = len(obstacleGrid), len(obstacleGrid[0]) # Initialize the DP table with zeros dp = [[0] * n for _ in range(m)] # Starting point dp[0][0] = 1 # Fill the dp table for i in range(m): for j in range(n): if obstacleGrid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Write a program that simulates a simple cloud storage system. The system needs to handle multiple users and allow them to upload, download, and delete files. Each user should have a distinct username and their own storage space. The task involves creating a class called `CloudStorage` with methods to: - Register a new user (`register_user(username)`) - Upload a file (`upload_file(username, file_name, file_content)`) - Download a file (`download_file(username, file_name)`) - Delete a file (`delete_file(username, file_name)`) - List all files for a user (`list_files(username)`) Ensure your implementation handles potential errors such as: - Attempting to register a user with a taken username. - Trying to upload/download/delete a file without an existing user. - Handling large files and ensuring efficient storage. Provide an example usage of your `CloudStorage` class demonstrating all operations. Include necessary error handling and optimizations for the system to handle concurrent user requests efficiently. Additionally, estimate the complexity of each operation and suggest improvements if any.","solution":"class CloudStorage: def __init__(self): self.users = {} # Dictionary to store user data keyed by username def register_user(self, username): if username in self.users: raise ValueError(\\"Username already taken.\\") self.users[username] = {} # Each user has their own dictionary to store files def upload_file(self, username, file_name, file_content): if username not in self.users: raise ValueError(\\"User does not exist.\\") self.users[username][file_name] = file_content def download_file(self, username, file_name): if username not in self.users: raise ValueError(\\"User does not exist.\\") if file_name not in self.users[username]: raise ValueError(\\"File does not exist.\\") return self.users[username][file_name] def delete_file(self, username, file_name): if username not in self.users: raise ValueError(\\"User does not exist.\\") if file_name not in self.users[username]: raise ValueError(\\"File does not exist.\\") del self.users[username][file_name] def list_files(self, username): if username not in self.users: raise ValueError(\\"User does not exist.\\") return list(self.users[username].keys()) # Example Usage cloud_storage = CloudStorage() cloud_storage.register_user(\\"alice\\") cloud_storage.upload_file(\\"alice\\", \\"file1.txt\\", \\"Hello, World!\\") print(cloud_storage.download_file(\\"alice\\", \\"file1.txt\\")) # Output: \\"Hello, World!\\" cloud_storage.delete_file(\\"alice\\", \\"file1.txt\\") print(cloud_storage.list_files(\\"alice\\")) # Output: []"},{"question":"Write a function that takes an array of integers and returns the index of the first peak element. A peak element is an element that is greater than its neighbors. For arrays where the peak element is the first or last element, handle appropriately. If multiple peaks exist, return the index of the first one you encounter. If no peak exists, return -1. Your solution should have a time complexity of O(log n).","solution":"def find_peak_element(nums): Find the index of the first peak element in an array. A peak element is defined as an element that is greater than its neighbors. For arrays where the peak element is the first or last element, handle appropriately. If multiple peaks exist, return the index of the first one encountered. If no peak exists, return -1. Time complexity: O(log n) :param List[int] nums: List of integers :return int: Index of the first peak element, or -1 if no peak exists if not nums: return -1 left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[mid + 1]: right = mid else: left = mid + 1 return left"},{"question":"Write a function that checks whether a given string is a palindrome or not. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). \\"Race car\\" -> true","solution":"def is_palindrome(s: str) -> bool: Checks whether a given string is a palindrome. Args: s (str): The input string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Normalize the string by converting to lowercase and removing non-alphanumeric characters normalized_str = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string reads the same forwards and backwards return normalized_str == normalized_str[::-1]"},{"question":"Create a function that takes a list of strings, where each string represents a mathematical expression involving only the operators +, -, *, /, and the operands which are integers. The function should evaluate each expression and return a list of results. If the expression is invalid (e.g., division by zero, malformed expression), the function should raise an appropriate exception indicating the nature of the error. ```python def evaluate_expressions(expressions): Evaluate a list of mathematical expressions and return the results. :param expressions: List of strings, each representing a mathematical expression. :return: List of results for each valid expression. :raises: ZeroDivisionError, SyntaxError, ValueError for invalid expressions. Example: expressions = [\\"10 + 2\\", \\"5 * 3\\", \\"6 / 0\\", \\"4 -\\"] Returns: [12, 15] # Raises ZeroDivisionError for \\"6 / 0\\" and SyntaxError for \\"4 -\\" results = [] for expr in expressions: try: result = eval(expr) if isinstance(result, (int, float)): # Ensure result is a number results.append(result) else: raise ValueError(\\"Invalid result type\\") except ZeroDivisionError: raise ZeroDivisionError(f\\"Division by zero in expression: {expr}\\") except SyntaxError: raise SyntaxError(f\\"Malformed expression: {expr}\\") except Exception as e: raise ValueError(f\\"Invalid expression: {expr}. Error: {str(e)}\\") return results ```","solution":"def evaluate_expressions(expressions): Evaluate a list of mathematical expressions and return the results. :param expressions: List of strings, each representing a mathematical expression. :return: List of results for each valid expression. :raises: ZeroDivisionError, SyntaxError, ValueError for invalid expressions. Example: expressions = [\\"10 + 2\\", \\"5 * 3\\", \\"6 / 0\\", \\"4 -\\"] Returns: [12, 15] # Raises ZeroDivisionError for \\"6 / 0\\" and SyntaxError for \\"4 -\\" results = [] for expr in expressions: try: result = eval(expr) if isinstance(result, (int, float)): results.append(result) else: raise ValueError(\\"Invalid result type\\") except ZeroDivisionError: raise ZeroDivisionError(f\\"Division by zero in expression: {expr}\\") except SyntaxError: raise SyntaxError(f\\"Malformed expression: {expr}\\") except Exception as e: raise ValueError(f\\"Invalid expression: {expr}. Error: {str(e)}\\") return results"},{"question":"Given a list of strings, write a function in Python that identifies and returns all anagram groups. An anagram group is a set of strings that are anagrams of each other. The function should return a list of lists where each sublist contains anagrams grouped together. For example, if the input list is `[\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]`, the output should be `[[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]]`. Ensure your solution is efficient and can handle large inputs gracefully. You may assume that all input strings are lowercase and contain only alphabetical characters. ```python def find_anagram_groups(words): anagram_map = {} for word in words: sorted_word = \'\'.join(sorted(word)) # Sort the word to get the same key for anagrams if sorted_word in anagram_map: anagram_map[sorted_word].append(word) else: anagram_map[sorted_word] = [word] return list(anagram_map.values()) ``` Test your function with different inputs, including edge cases such as an empty list or a list where no two strings are anagrams.","solution":"def find_anagram_groups(words): Identifies and returns all anagram groups from a list of strings. Parameters: words (list): A list of strings. Returns: list: A list of lists, where each sublist contains anagram strings grouped together. anagram_map = {} for word in words: sorted_word = \'\'.join(sorted(word)) # Sort the word to get the same key for anagrams if sorted_word in anagram_map: anagram_map[sorted_word].append(word) else: anagram_map[sorted_word] = [word] return list(anagram_map.values())"},{"question":"Write a function to compress a string using the following encoding scheme: consecutive identical characters are replaced with the character followed by the number of repetitions. If a character does not repeat, it just appears once in the output. For example, the string \\"aaabbcddd\\" would be compressed to \\"a3b2cd3\\". Implement this function and also provide code to decompress the encoded string back to its original form.","solution":"def compress_string(s): Compresses the string by replacing consecutive identical characters with the character followed by the number of repetitions. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: if count > 1: compressed.append(s[i - 1] + str(count)) else: compressed.append(s[i - 1]) count = 1 # Add the last character (or group of characters) if count > 1: compressed.append(s[-1] + str(count)) else: compressed.append(s[-1]) return \\"\\".join(compressed) def decompress_string(s): Decompresses the string encoded via \'compress_string\' function. decompressed = [] i = 0 while i < len(s): if i + 1 < len(s) and s[i + 1].isdigit(): count = \\"\\" while i + 1 < len(s) and s[i + 1].isdigit(): i += 1 count += s[i] decompressed.append(s[i - len(count)] * int(count)) else: decompressed.append(s[i]) i += 1 return \\"\\".join(decompressed)"},{"question":"Write a Python function that takes a string as input and returns a list of the lengths of each word in the string. The function should handle punctuation correctly, consider multiple spaces, and efficiently manage large strings. Additionally, the function should handle exceptions for non-string inputs. For reference, consider the following basic implementation: ```python def word_lengths(s): words = s.split() lengths = [len(word) for word in words] return lengths ``` This code does not address punctuation, multiple spaces, or non-string inputs. Modify this code to increase its robustness, and ensure it handles punctuation correctly and efficiently manages large strings. Additionally, write test cases to validate your solution, including edge cases such as strings with punctuation, multiple spaces, non-string inputs, and very large strings.","solution":"import string def word_lengths(s): Returns a list of the lengths of each word in the string `s`. Handles punctuation correctly, considers multiple spaces, and efficiently manages large strings. Raises an exception for non-string inputs. if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") # Remove punctuation from the string using str.translate and str.maketrans translator = str.maketrans(\'\', \'\', string.punctuation) clean_s = s.translate(translator) # Split the string into words and filter out any empty strings due to multiple spaces words = filter(None, clean_s.split()) # Compute and return the lengths of the words return [len(word) for word in words]"},{"question":"Craft a function that takes two strings as input and determines if one string is a rotation of the other. For example, the strings \\"waterbottle\\" and \\"erbottlewat\\" are rotations of each other. Write a function that uses minimal space and has a time complexity of O(n).","solution":"def is_rotation(str1, str2): Determines if str2 is a rotation of str1. Args: str1 (str): The original string. str2 (str): The string to check as rotation. Returns: bool: True if str2 is a rotation of str1, False otherwise. if len(str1) != len(str2): return False combined = str1 + str1 return str2 in combined"},{"question":"Develop a function that accepts a list of strings, where each string contains a date in the format \\"YYYY-MM-DD\\". The function should return the earliest and latest date from the list without converting the strings to date objects. For example: dates = [\\"2023-05-19\\", \\"2022-11-15\\", \\"2024-01-01\\"] Output: (\\"2022-11-15\\", \\"2024-01-01\\")","solution":"def find_earliest_and_latest(dates): Returns the earliest and latest dates from a list of date strings in \'YYYY-MM-DD\' format. if not dates: return None, None earliest = min(dates) latest = max(dates) return earliest, latest"},{"question":"Design a Python function named `unique_chars` that takes in a single string argument. The function should determine whether all the characters in the input string are unique. If the string contains only distinct characters, the function should return `True`; otherwise, it should return `False`. The function should be case-sensitive and handle all printable ASCII characters. For instance, passing the string `\\"Hello\\"` should return `False`, whereas passing the string `\\"World\\"` should return `True`.","solution":"def unique_chars(s: str) -> bool: Returns True if all characters in the string `s` are unique, otherwise returns False. return len(set(s)) == len(s)"},{"question":"Write a Python function that takes a string as input and returns a new string with all the vowels removed. Additionally, your function should count and return the number of vowels that were removed.","solution":"def remove_vowels(input_str): Takes a string as input and returns a new string with all the vowels removed. Additionally, returns the number of vowels that were removed. vowels = \\"aeiouAEIOU\\" new_str = [] vowel_count = 0 for char in input_str: if char in vowels: vowel_count += 1 else: new_str.append(char) return \'\'.join(new_str), vowel_count"},{"question":"Write a function that accepts a list of integers and a target integer. The function should then identify and return all unique pairs of integers from the list whose sum equals the target integer. Note that each pair should be returned as a tuple, and the function should ensure that there are no duplicate pairs in the output (irrespective of the order of integers in the pairs). For example, given the list `nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]` and the target `10`, the function should return: ``` [(1, 9), (2, 8), (3, 7), (4, 6)] ``` Pairs like `(9, 1)` should not be re-listed as a duplicate of `(1, 9)`. Consider the edge cases where: - The list may contain duplicate numbers. - The list could be empty, in which case the function should return an empty list. For instance: - With `nums = [2, 4, 3, 3, 4, 5]` and `target = 6`, the function should output: ``` [(2, 4), (3, 3)] ``` - With `nums = []` and `target = 5`, the function should output: ``` [] ```","solution":"def find_pairs(nums, target): Given a list of integers and a target integer, return all unique pairs of integers from the list whose sum equals the target. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen.add(num) return list(pairs)"},{"question":"Create a function `fibonacci_sum(n)` that returns the sum of the first `n` numbers in the Fibonacci sequence. The Fibonacci sequence is characterized by the fact that every number after the first two is the sum of the two preceding ones. The sequence typically starts with 0 and 1. For example: ``` fibonacci_sum(5) ``` The first 5 numbers in the Fibonacci sequence are 0, 1, 1, 2, and 3. So the function should return 0 + 1 + 1 + 2 + 3 = 7. Additionally, ensure that your function can handle the case where `n` is 0 or 1. If `n` is 0, the sum should be 0. If `n` is 1, the sum should be the first number in the sequence, which is 0. Consider edge cases where `n` could be a negative number or a non-integer input. How will your function handle these scenarios? # Example ``` fibonacci_sum(0) -> 0 fibonacci_sum(1) -> 0 fibonacci_sum(2) -> 1 fibonacci_sum(5) -> 7 fibonacci_sum(-1) -> \\"Invalid input\\" fibonacci_sum(\\"five\\") -> \\"Invalid input\\" ```","solution":"def fibonacci_sum(n): Returns the sum of the first n numbers in the Fibonacci sequence. If n is negative or non-integer, it returns \\"Invalid input\\". if not isinstance(n, int) or n < 0: return \\"Invalid input\\" a, b = 0, 1 fib_sum = 0 for _ in range(n): fib_sum += a a, b = b, a + b return fib_sum"},{"question":"**Task:** Write a Python function that takes a list of tuples where each tuple represents a time interval in the format `(start_time, end_time)` and returns a list of tuples representing the merged intervals. If any two intervals overlap or touch each other, they should be merged into a single interval. **Constraints:** - The input list is non-empty, and each tuple contains two integers where `0 <= start_time < end_time <= 1000`. - Time intervals that touch each other (i.e., the end time of one interval is the start time of another) should be considered as overlapping. **Example:** ```python def merge_intervals(intervals): # Your code here # Example inputs and outputs print(merge_intervals([(1, 3), (2, 4), (5, 7), (6, 8)])) # Output: [(1, 4), (5, 8)] print(merge_intervals([(1, 2), (2, 3), (3, 4), (4, 5)])) # Output: [(1, 5)] print(merge_intervals([(1, 3), (4, 5), (6, 8)])) # Output: [(1, 3), (4, 5), (6, 8)] print(merge_intervals([(5, 6), (1, 3), (2, 4)])) # Output: [(1, 4), (5, 6)] ``` # Solution Guidelines: 1. Sort the input list of intervals based on the start times. 2. Traverse through the sorted intervals, merging them if they overlap or touch each other. 3. Maintain a result list to store the merged intervals. 4. Return the result list at the end.","solution":"def merge_intervals(intervals): Merge overlapping or touching intervals. Args: intervals (list of tuples): List of time intervals (start_time, end_time) Returns: list of tuples: List of merged time intervals # Sort intervals based on the start_time intervals.sort(key=lambda x: x[0]) # Initialize the merged_intervals list merged_intervals = [] for interval in intervals: # if merged_intervals is empty or there is no overlap with the last interval in merged_intervals, add the interval if not merged_intervals or merged_intervals[-1][1] < interval[0]: merged_intervals.append(interval) else: # there is an overlap or touching, so we merge the current interval with the last one in merged_intervals merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], interval[1])) return merged_intervals"},{"question":"Write a Python program that simulates a basic text-based inventory system for a small RPG game. The inventory should support adding, removing, and viewing items. Each item should have a name and quantity. Ensure the system can handle edge cases such as attempting to remove an item that doesn\'t exist or adding an item with a negative quantity. Include a brief explanation of your approach and any design choices made.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, name, quantity): if quantity < 0: raise ValueError(\\"Cannot add negative quantity\\") if name in self.items: self.items[name] += quantity else: self.items[name] = quantity def remove_item(self, name, quantity): if name not in self.items: raise KeyError(f\\"Item {name} not found in inventory\\") if quantity < 0: raise ValueError(\\"Cannot remove negative quantity\\") if self.items[name] < quantity: raise ValueError(f\\"Not enough of {name} to remove\\") self.items[name] -= quantity if self.items[name] == 0: del self.items[name] def view_inventory(self): return self.items"},{"question":"Design an algorithm and write a function `find_longest_substring(s)` which finds the length of the longest substring without repeating characters in a given string `s`. You should return an integer representing the length of the longest substring. Optimize your solution to have a time complexity of O(n), where n is the length of the string `s`. Example: - Input: `s = \\"abcabcbb\\"` - Output: `3` (The answer is \\"abc\\", with the length of 3) Constraints: - 0 <= len(s) <= 10000 - The string `s` consists of English letters, digits, symbols, and spaces. Provide a brief explanation of your solution approach and its time complexity. Additionally, describe any edge cases your implementation handles.","solution":"def find_longest_substring(s): Finds the length of the longest substring without repeating characters in a given string s. char_position = {} start = 0 max_length = 0 for i, char in enumerate(s): if char in char_position and char_position[char] >= start: start = char_position[char] + 1 char_position[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Design a Python function that takes two arrays representing the preorder traversal of two binary trees and determines if the trees are structurally identical. This means that the trees have the same shape and the same node values at each corresponding position. If the trees are identical, the function should return True; otherwise, it should return False. The function should handle edge cases such as empty arrays and single-element arrays. Additionally, the function should be optimized for both time and space efficiency. The function should include an explanation of its logic, particularly how it handles the traversal and comparison of the trees. Moreover, the function should provide unit tests to verify its correctness. These tests should cover various scenarios including identical trees, completely different trees, trees with different structures but the same node values, and trees with one containing a null or undefined node where the other does not.","solution":"def are_identical_trees(preorder1, preorder2): Determines if two binary trees represented by their preorder traversals are identical. The trees must have the same shape and the same node values at each corresponding position. Args: preorder1 (list): Preorder traversal of the first tree. preorder2 (list): Preorder traversal of the second tree. Returns: bool: True if the trees are structurally identical and their node values match, False otherwise. # Helper function to reconstruct tree from preorder traversal def reconstruct(preorder): if not preorder: return None if preorder[0] is None: preorder.pop(0) return None root = preorder.pop(0) node = {\'val\': root, \'left\': None, \'right\': None} node[\'left\'] = reconstruct(preorder) node[\'right\'] = reconstruct(preorder) return node # Helper function to compare two binary trees def compare_trees(node1, node2): if node1 is None and node2 is None: return True if node1 is None or node2 is None: return False if node1[\'val\'] != node2[\'val\']: return False return compare_trees(node1[\'left\'], node2[\'left\']) and compare_trees(node1[\'right\'], node2[\'right\']) tree1 = reconstruct(preorder1[:]) tree2 = reconstruct(preorder2[:]) return compare_trees(tree1, tree2)"},{"question":"Write a program that reads a text file, counts the frequency of each word, and writes the results to a new file in descending order of frequency. Ignore case and punctuation, considering only words that contain alphabetic characters.","solution":"import re from collections import Counter def read_file(file_path): Reads the content of a file and returns it as a string. with open(file_path, \'r\', encoding=\'utf-8\') as file: return file.read() def write_file(file_path, content): Writes content to a file. with open(file_path, \'w\', encoding=\'utf-8\') as file: file.write(content) def count_word_frequencies(text): Counts the frequency of each word in the text and returns a dictionary. Words are considered case-insensitive and only alphabetic characters are considered. words = re.findall(r\'b[a-zA-Z]+b\', text.lower()) return Counter(words) def generate_frequency_report(file_path, output_file_path): Reads a text file, counts the frequency of each word, and writes the results to a new file in descending order of frequency. text = read_file(file_path) word_frequencies = count_word_frequencies(text) sorted_word_frequencies = sorted(word_frequencies.items(), key=lambda item: item[1], reverse=True) report = \\"n\\".join([f\\"{word}: {count}\\" for word, count in sorted_word_frequencies]) write_file(output_file_path, report) return report"},{"question":"Compose a Python function named \'findMaxDifference\' that takes a list of integers as an input and returns the maximum difference between any two elements in the list. If the list is empty or contains a single element, the function should return 0. nums = [2, 3, 10, 6, 4, 8, 1]","solution":"def findMaxDifference(nums): Returns the maximum difference between any two elements in the list. If the list is empty or contains a single element, returns 0. if len(nums) < 2: return 0 min_num = min(nums) max_num = max(nums) return max_num - min_num"},{"question":"Write a function that simulates an ATM machine by processing a series of transactions based on the commands provided. The function should take as input a list of strings, where each string represents a transaction. The function should return the final balance after processing all the transactions. The balance should be initialized to 0. Each transaction command is a string in one of the following formats: - \\"Deposit X\\" where X is a positive integer indicating the amount to be deposited. - \\"Withdraw X\\" where X is a positive integer indicating the amount to be withdrawn. - \\"CheckBalance\\" which returns the current balance. If a withdrawal attempt would result in a negative balance, the withdrawal should not be performed and the balance should remain unchanged. Examples: - process_transactions([\\"Deposit 100\\", \\"Withdraw 50\\", \\"CheckBalance\\"]) ➞ 50 - process_transactions([\\"Deposit 200\\", \\"Withdraw 150\\", \\"Deposit 50\\", \\"CheckBalance\\"]) ➞ 100 - process_transactions([\\"Withdraw 10\\", \\"Deposit 10\\", \\"CheckBalance\\"]) ➞ 0 - process_transactions([\\"Deposit 50\\", \\"Withdraw 100\\", \\"Deposit 70\\", \\"CheckBalance\\"]) ➞ 120 Function signature: `def process_transactions(transactions: List[str]) -> int:`","solution":"from typing import List def process_transactions(transactions: List[str]) -> int: balance = 0 for transaction in transactions: parts = transaction.split() command = parts[0] if command == \\"Deposit\\": amount = int(parts[1]) balance += amount elif command == \\"Withdraw\\": amount = int(parts[1]) if balance >= amount: balance -= amount elif command == \\"CheckBalance\\": continue # CheckBalance only returns the current balance, it doesn\'t change it return balance"},{"question":"Write a function that processes two input strings and returns a boolean value indicating whether one string is a permutation of the other. The function should be case-insensitive and ignore any non-alphabetic characters. Additionally, the function should handle cases where the strings contain Unicode characters. If either of the strings contains non-alphabetic characters, those characters should be removed before performing the comparison. The function should be efficient and avoid unnecessary computations by leveraging suitable data structures. It should throw an appropriate error if the inputs are not strings.","solution":"import re def is_permutation(s1, s2): Check if two strings are permutations of each other, ignoring case and non-alphabetic characters. Parameters: s1 (str): First input string s2 (str): Second input string Returns: bool: True if one string is a permutation of the other, False otherwise Raises: TypeError: If any of the inputs are not strings if not isinstance(s1, str) or not isinstance(s2, str): raise TypeError(\\"Both inputs must be strings\\") # Remove non-alphabetic characters and convert to lowercase s1_cleaned = re.sub(r\'[^a-zA-Z]\', \'\', s1).lower() s2_cleaned = re.sub(r\'[^a-zA-Z]\', \'\', s2).lower() # Check if the sorted characters of the cleaned strings match return sorted(s1_cleaned) == sorted(s2_cleaned)"},{"question":"Write a function that takes a list of integers and returns a list of all unique pairs that sum up to a given target number. Each pair should be sorted in ascending order, and the final list of pairs should be sorted lexicographically. The input list may contain duplicates, but each pair should be unique in the output. For example, given the list `[1, 2, 3, 4, 3, 2, 5]` and the target `5`, the function should return `[(1, 4), (2, 3)]`. Function signature: ```python def find_pairs_with_sum(nums: List[int], target: int) -> List[Tuple[int, int]]: ```","solution":"from typing import List, Tuple def find_pairs_with_sum(nums: List[int], target: int) -> List[Tuple[int, int]]: nums.sort() pairs = set() seen = {} for number in nums: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen[number] = True return sorted(pairs)"},{"question":"Write a function that accepts a string containing a mix of alphabetic characters and numbers. The function should sort the alphabetic characters in ascending order, while keeping the numbers in their original positions. For example, given the string \\"a1c3b2\\", the function should return \\"a1b3c2\\".","solution":"def sort_letters_keep_numbers(s): Sort the alphabetic characters in ascending order while keeping the numbers in their original positions. :param s: A string containing a mix of alphabetic characters and numbers :return: A string with sorted alphabetic characters and original-position numbers letters = sorted([char for char in s if char.isalpha()]) result = [] letter_index = 0 for char in s: if char.isalpha(): result.append(letters[letter_index]) letter_index += 1 else: result.append(char) return \'\'.join(result)"},{"question":"Write a Python function that reads data from a JSON file and calculates the average age of a list of persons. Each person is represented as a dictionary with keys \'name\', \'age\', and \'location\'. The function should return the average age as a float, rounded to two decimal places. Example JSON content: ```json [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"location\\": \\"New York\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 24, \\"location\\": \\"Chicago\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 29, \\"location\\": \\"San Francisco\\"} ] ``` Expected output for the above input: 27.67","solution":"import json def calculate_average_age(file_path): Reads data from a JSON file and calculates the average age of a list of persons. Each person is represented as a dictionary with keys \'name\', \'age\', and \'location\'. :param file_path: Path to the JSON file :return: The average age as a float, rounded to two decimal places with open(file_path, \'r\') as file: persons = json.load(file) total_age = sum(person[\'age\'] for person in persons) average_age = total_age / len(persons) return round(average_age, 2)"},{"question":"Implement a function, `find_largest_rectangle(matrix)`, that takes a 2D binary matrix as input and returns the area of the largest rectangle containing only 1\'s. The matrix consists of 0\'s and 1\'s, where 1 represents a part of the rectangle and 0 represents an empty space. Your function should be optimized to handle large matrices efficiently. Provide a clear and concise solution with appropriate inline comments explaining the logic. # Example ```python matrix = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] print(find_largest_rectangle(matrix)) # Output: 6 ``` # Constraints - All elements of the matrix are either 0 or 1. - The dimensions of the matrix are such that 1 ≤ m, n ≤ 200, where m is the number of rows and n is the number of columns.","solution":"def find_largest_rectangle(matrix): Returns the area of the largest rectangle containing only 1\'s in a given 2D binary matrix. if not matrix or not matrix[0]: return 0 def max_histogram_area(heights): Helper function to calculate the max area in a histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area max_rectangle_area = 0 row_length = len(matrix[0]) heights = [0] * row_length for row in matrix: for i in range(row_length): heights[i] = heights[i] + 1 if row[i] == 1 else 0 max_rectangle_area = max(max_rectangle_area, max_histogram_area(heights)) return max_rectangle_area"},{"question":"**Problem Statement:** Write a function `longest_substring_without_repeating_characters(s: str) -> int` that takes a string `s` as input and returns the length of the longest substring without repeating characters. **Input:** - A single string `s` which consists of lowercase English letters only. **Output:** - An integer representing the length of the longest substring without repeating characters. **Example 1:** ``` input: \\"abcabcbb\\" output: 3 ``` **Explanation:** The answer is \\"abc\\", which has a length of 3. **Example 2:** ``` input: \\"bbbbb\\" output: 1 ``` **Explanation:** The answer is \\"b\\", with a length of 1. **Example 3:** ``` input: \\"pwwkew\\" output: 3 ``` **Explanation:** The answer is \\"wke\\", with a length of 3. Note that `pwke` is a subsequence and not a substring. **Constraints:** - 0 <= `len(s)` <= 10^4","solution":"def longest_substring_without_repeating_characters(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"Design an efficient algorithm to optimize the scheduling of tasks in a multi-core processor system. Each task has a specified start time, end time, and a core requirement. Ensure the algorithm maximizes parallel task execution while minimizing idle core time and avoiding core overallocation conflicts.","solution":"import heapq def schedule_tasks(tasks): Schedules tasks on a multi-core processor to maximize parallel execution and minimize idle core time while avoiding core overallocation conflicts. Each task is represented as a tuple (start_time, end_time, core_requirement). tasks.sort(key=lambda x: x[0]) # Sort tasks by the start time min_heap = [] # This heap keeps track of (end_time, core_usage) tuples max_cores = 0 current_cores = 0 for task in tasks: start, end, core_req = task # Remove all tasks from the heap that have ended by the start time of the current task while min_heap and min_heap[0][0] <= start: end_time, usage = heapq.heappop(min_heap) current_cores -= usage # Add the current task to the heap heapq.heappush(min_heap, (end, core_req)) current_cores += core_req # Update the maximum number of cores used max_cores = max(max_cores, current_cores) return max_cores"},{"question":"Given a list of integers representing the ages of employees in a company, write a function that returns a new list containing the number of employees that are within the age ranges of 20-29, 30-39, 40-49, and so on. The input list may contain ages ranging from 0 to 100. Ensure your function is optimized for performance with large input sizes. The output should be a list where each index represents the count of employees in the corresponding age group (0-9, 10-19, 20-29, etc.).","solution":"def count_employees_by_age_group(ages): Returns a list representing the number of employees in each age group. Age groups are divided in ranges of 10: 0-9, 10-19, 20-29, and so on. age_groups = [0] * 11 # There are 11 age groups: 0-9, 10-19, ..., 100-109 for age in ages: if 0 <= age <= 100: age_group_index = age // 10 age_groups[age_group_index] += 1 return age_groups"},{"question":"Write a program that takes a list of integers and an integer `k`, and rearranges the list such that the element at the k-th index is moved to the front of the list, and the order of the other elements remains unchanged. If `k` is out of bounds, the program should return the original list. For example: - Input: `[10, 20, 30, 40, 50]`, `k = 2` - Output: `[30, 10, 20, 40, 50]` - Input: `[5, 15, 25, 35]`, `k = 4` - Output: `[5, 15, 25, 35]` Optimize your solution for efficiency, particularly focusing on minimizing the number of list operations.","solution":"def move_kth_to_front(lst, k): Move the element at the k-th index to the front of the list. If k is out of bounds, return the original list. Parameters: lst (list) : List of integers. k (int) : Index of the element to be moved to the front. Returns: list : Modified list with the k-th element moved to the front. if k < 0 or k >= len(lst): return lst return [lst[k]] + lst[:k] + lst[k+1:]"},{"question":"Design a function in Python that receives a list of integers and returns the second highest unique number in the list. If there is no such number, return None. Example: Input: [4, 3, 1, 4, 6] Output: 4 Input: [4, 4, 4] Output: None","solution":"def second_highest_unique(numbers): Returns the second highest unique number from the list of integers. If no such number exists, return None. # Removing duplicates by converting the list to a set unique_numbers = list(set(numbers)) # If less than two unique numbers, return None if len(unique_numbers) < 2: return None # Sort the unique numbers in descending order unique_numbers.sort(reverse=True) # Return the second highest number return unique_numbers[1]"},{"question":"Write a Python function `valid_parentheses(s: str) -> bool` that determines if the given string `s` containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is valid. A string is considered valid if the open brackets are closed in the correct order and each type of brackets are closed by the same type of brackets. Your function should return `True` if the string is valid, and `False` otherwise.","solution":"def valid_parentheses(s: str) -> bool: Determine if the input string s containing \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is valid. A string is valid if the open brackets are closed in the correct order and each type of brackets is closed by the same type of brackets. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Write a function called `longest_increasing_subsequence` that takes in a list of integers and returns the length of the longest strictly increasing subsequence. The subsequence does not need to be contiguous but must maintain the order of the original elements. # Example: ```python def longest_increasing_subsequence(arr): # your code here print(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18])) # Output: 4 print(longest_increasing_subsequence([0, 1, 0, 3, 2, 3])) # Output: 4 print(longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7])) # Output: 1 ``` # Explanation: - For the first example: the longest increasing subsequence is `[2, 3, 7, 101]`, hence the output is 4. - For the second example: the longest increasing subsequence is `[0, 1, 2, 3]`, hence the output is 4. - For the third example: there is no increasing subsequence longer than 1, hence the output is 1.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest strictly increasing subsequence in arr. if not arr: return 0 # DP array to store the length of the longest increasing subsequence ending at each index dp = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a function in Python that takes two strings as input and returns `True` if one of the strings is a permutation of the other. Otherwise, return `False`. A permutation is a rearrangement of letters. The comparison should be case-sensitive and spaces should be counted as characters. *Function Signature:* ```python def is_permutation(str1: str, str2: str) -> bool: pass ``` *Example:* ```python Input: str1 = \\"abc\\", str2 = \\"bca\\" Output: True Input: str1 = \\"abc\\", str2 = \\"abcd\\" Output: False ``` *Constraints:* - Do not use any library functions for permutation checks. - The strings can contain any characters (letters, digits, punctuation, etc.). - The string lengths can be up to 1000 characters.","solution":"def is_permutation(str1: str, str2: str) -> bool: if len(str1) != len(str2): return False # Sorting and comparing the strings return sorted(str1) == sorted(str2)"},{"question":"Create a function that takes a list of numbers and a target sum as inputs and returns all unique triplets in the list that sum up to the target sum. The function should avoid using the same element twice and should output the triplets in a sorted manner. Ensure the function handles edge cases where there are fewer than three numbers or no possible triplets.","solution":"def three_sum(nums, target): Returns all unique triplets in the list that sum up to the target sum. Parameters: nums (list): List of integers. target (int): Target sum for the triplets. Returns: list: List of unique triplets that sum up to the target sum. nums.sort() triplets = [] n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue # avoid duplicates for the first element left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 # avoid duplicates for the second element while left < right and nums[right] == nums[right - 1]: right -= 1 # avoid duplicates for the third element left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return triplets"},{"question":"Design a function named `merge_and_sort_lists` that takes two lists of integers as input and returns a new list that contains all the integers from both input lists, sorted in non-decreasing order. The function should handle edge cases where one or both input lists are empty. Additionally, the function should remove any duplicate integers in the final sorted list. To increase the complexity, the function should also be capable of handling lists of varying lengths, including very large lists. The function should be optimized for both time and space complexity, ensuring that it performs efficiently even when the total number of integers across both lists is large. The function should be able to handle integer ranges from negative to positive without any overflow issues. Lastly, the function should support simultaneous requests, maintaining accuracy and avoiding interference between different requests.","solution":"def merge_and_sort_lists(list1, list2): Merges two lists of integers, removes duplicates, and returns a sorted list. Args: list1 (list): First list of integers. list2 (list): Second list of integers. Returns: list: A new sorted list containing all unique integers from both input lists. merged_set = set(list1) | set(list2) return sorted(merged_set)"},{"question":"The following Python code is intended to reverse a sentence while preserving the order of the words. However, it contains logical errors. Can you identify and fix them? ```python def reverse_sentence(sentence): words = sentence.split(\' \') reversed_sentence = \\"\\" for word in words: reversed_sentence = word[::-1] + \\" \\" + reversed_sentence return reversed_sentence.strip() # Test cases print(reverse_sentence(\\"Hello World\\")) # Expected: \\"olleH dlroW\\" print(reverse_sentence(\\"Python is great\\")) # Expected: \\"nohtyP si taerg\\" print(reverse_sentence(\\"Reverse this\\")) # Expected: \\"esreveR siht\\" print(reverse_sentence(\\"Another test case\\")) # Expected: \\"rehtonA tset esac\\" ``` Note: The logic of the function should reverse each word individually, rather than reversing the order of the words in the sentence.","solution":"def reverse_sentence(sentence): words = sentence.split(\' \') reversed_words = [word[::-1] for word in words] reversed_sentence = \\" \\".join(reversed_words) return reversed_sentence # Test cases according to the examples provided print(reverse_sentence(\\"Hello World\\")) # Expected: \\"olleH dlroW\\" print(reverse_sentence(\\"Python is great\\")) # Expected: \\"nohtyP si taerg\\" print(reverse_sentence(\\"Reverse this\\")) # Expected: \\"esreveR siht\\" print(reverse_sentence(\\"Another test case\\")) # Expected: \\"rehtonA tset esac\\""},{"question":"The following hashed data structure is missing values. Fill in the appropriate values to complete it: ```python new_dict = { \'A\': [None, None, {\'subA\': None, \'subB\': None}], \'B\': None, \'C\': {\'innerA\': None, \'innerB\': [None, None, None]}, \'D\': None } ``` - `\'A\'`: The list should contain 3 elements: 1. An integer, which is the sum of 5 and 3. 2. A string, which is the name of the planet referred to as the \\"Red Planet\\". 3. Another dictionary with two keys `\'subA\'` and `\'subB\'`: - `\'subA\'`: A boolean indicating whether water is wet. - `\'subB\'`: A float value of Pi up to 2 decimal places. - `\'B\'`: A tuple containing 3 elements, all of which should be the number 7 multiplied by 2. - `\'C\'`: A dictionary with keys `\'innerA\'` and `\'innerB\'`: - `\'innerA\'`: A string containing the first 4 letters of the alphabet in order. - `\'innerB\'`: A list with the following elements: 1. A string \\"hello\\". 2. An integer, which is the answer to life, the universe, and everything. 3. A boolean representing whether the sun rises in the east. - `\'D\'`: A set containing the first 3 prime numbers. Complete the dictionary and write a function that returns the dictionary when called. ```python def fill_data_structure(): new_dict = { \'A\': [8, \\"Mars\\", {\'subA\': True, \'subB\': 3.14}], \'B\': (14, 14, 14), \'C\': {\'innerA\': \\"ABCD\\", \'innerB\': [\\"hello\\", 42, True]}, \'D\': {2, 3, 5} } return new_dict print(fill_data_structure()) ```","solution":"def fill_data_structure(): new_dict = { \'A\': [8, \\"Mars\\", {\'subA\': True, \'subB\': 3.14}], \'B\': (14, 14, 14), \'C\': {\'innerA\': \\"ABCD\\", \'innerB\': [\\"hello\\", 42, True]}, \'D\': {2, 3, 5} } return new_dict"},{"question":"Write a function that takes an integer array as input and returns a new array containing only the prime numbers from the original array, in the same order they appeared. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself.","solution":"def is_prime(n): Checks if the given number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(arr): Returns a new array containing only the prime numbers from the original array. return [num for num in arr if is_prime(num)]"},{"question":"Given a string `s` consisting of lower-case English letters and an integer `k`, you are required to find the lexicographically smallest string that can be obtained by removing exactly `k` characters from the string `s` and reorganizing the remaining characters in non-decreasing order. If there are multiple possible answers, the one that occurs first in lexicographical order should be selected. For example: Input: `s = \\"bcabc\\"` and `k = 2` Output: `abc` Additionally, write a function `smallestStringAfterDeletion(s: str, k: int) -> str` to implement the solution.","solution":"def smallestStringAfterDeletion(s: str, k: int) -> str: Returns the lexicographically smallest string after removing exactly k characters and reorganizing the remaining characters in non-decreasing order. # If k is equal to the length of the string, return an empty string if k == len(s): return \\"\\" # Remove k characters from the string to get the lexicographically smallest string result = [] to_remove = k for char in s: while result and result[-1] > char and to_remove > 0: result.pop() to_remove -= 1 result.append(char) # If we still need to remove more characters, remove them from the end result = result[:len(result) - to_remove] # Sort the remaining characters in non-decreasing order result.sort() # Join the characters to form the final string return \'\'.join(result)"},{"question":"Implement a linked list in which each node contains both an integer value and a reference to another node (next pointer). Write a function to reverse the linked list such that the last node becomes the first node and the chain of references is appropriately modified to reflect this reversal. Additionally, implement a method to print the nodes of the linked list in their new order. Ensure your code handles edge cases such as an empty list and a list with only one node.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next class LinkedList: def __init__(self): self.head = None def append(self, value): if not self.head: self.head = ListNode(value) else: current = self.head while current.next: current = current.next current.next = ListNode(value) def reverse(self): prev = None current = self.head while current: next_node = current.next current.next = prev prev = current current = next_node self.head = prev def to_list(self): result = [] current = self.head while current: result.append(current.value) current = current.next return result"},{"question":"Develop a Python function that takes in a list of integers and outputs a new list where each element is the sum of its original value and its immediate neighbors in the input list. For the first and last element in the list, their \\"missing\\" neighbors should be considered as 0. For instance: Input: [1, 2, 3, 4] Output: [3, 6, 9, 7] Input: [10, 20, 30] Output: [30, 60, 50]","solution":"def sum_with_neighbors(nums): Returns a new list where each element is the sum of its original value and its immediate neighbors. For the first and last element, the missing neighbors are considered as 0. if not nums: return nums new_list = [] for i in range(len(nums)): left = nums[i - 1] if i > 0 else 0 right = nums[i + 1] if i < len(nums) - 1 else 0 new_list.append(left + nums[i] + right) return new_list"},{"question":"Given a string consisting of lowercase alphabets, write a function to count the frequency of each character, and return a dictionary where keys are the characters and values are their respective counts. Function Signature: ```python def character_frequency(s: str) -> dict: pass ``` **Input:** - `s`: a string of lowercase alphabets (1 <= len(s) <= 100) **Output:** - A dictionary with characters as keys and their frequency count as values. **Example:** ```python assert character_frequency(\\"aabbcc\\") == {\'a\': 2, \'b\': 2, \'c\': 2} assert character_frequency(\\"hello\\") == {\'h\': 1, \'e\': 1, \'l\': 2, \'o\': 1} assert character_frequency(\\"abcd\\") == {\'a\': 1, \'b\': 1, \'c\': 1, \'d\': 1} ``` **Constraints:** - The input string only contains the English lowercase letters a to z.","solution":"def character_frequency(s: str) -> dict: Returns a dictionary where keys are characters and values are their frequency count in the string s. freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Develop a function that takes a list of strings containing mathematical expressions and evaluates each one for correctness. The expressions can contain integers, addition, subtraction, multiplication, division, and parentheses. Your function should return a list of booleans indicating whether each expression is valid or not. A valid expression follows standard mathematical rules and does not result in an error such as division by zero or mismatched parentheses.","solution":"def evaluate_expressions(expressions): Evaluates a list of mathematical expressions. :param expressions: List of strings, each containing a mathematical expression. :return: List of booleans indicating the validity of each expression. results = [] for expression in expressions: try: # Evaluate the expression and check if it runs without errors eval(expression) results.append(True) except (SyntaxError, ZeroDivisionError, NameError, TypeError): results.append(False) return results"},{"question":"Write a Python function `is_valid_license_plate` that takes a string as input and returns `True` if the string is a valid license plate number and `False` otherwise. A valid license plate number follows these rules: - It must be exactly 6 characters long. - The first 3 characters must be uppercase English letters (A-Z). - The last 3 characters must be digits (0-9). Additionally, provide examples of input strings and the expected output for each example.","solution":"def is_valid_license_plate(plate): Returns True if the input string is a valid license plate number, otherwise returns False. A valid license plate follows these rules: - It must be exactly 6 characters long. - The first 3 characters must be uppercase English letters (A-Z). - The last 3 characters must be digits (0-9). if len(plate) != 6: return False if not plate[:3].isupper() or not plate[:3].isalpha(): return False if not plate[3:].isdigit(): return False return True # Examples: # is_valid_license_plate(\\"ABC123\\") -> True # is_valid_license_plate(\\"AB1234\\") -> False # is_valid_license_plate(\\"abc123\\") -> False # is_valid_license_plate(\\"ABCDE1\\") -> False # is_valid_license_plate(\\"XYZ789\\") -> True"},{"question":"Implement a function in Python that takes an integer array as input and returns a new array consisting of only the unique elements from the original array, but in descending order. Your solution should focus on achieving optimal time and space complexity. Make sure to handle edge cases such as an empty array or an array with all identical elements.","solution":"def unique_descending(arr): Returns a new array containing only the unique elements from the original array, in descending order. # Create a set to hold unique elements unique_elements = set(arr) # Convert the set back to a list and sort it in descending order unique_desc_list = sorted(unique_elements, reverse=True) return unique_desc_list"},{"question":"You are developing a piece of software that reads multiple strings from user input, stores them in a list, and then searches for a specific substring within those strings. If the substring is found, the program should return a list of all matching strings; otherwise, it should indicate that no match was found. However, during testing, you notice that the software fails to handle cases where the list is empty or where the substring is not present in any of the strings. At what point in the software development lifecycle should these edge cases ideally be addressed to ensure robust error handling?","solution":"def find_substring(strings, substring): Searches for a specific substring within a list of strings. Parameters: strings (list): A list of strings to search in. substring (str): The substring to search for. Returns: list: A list of all matching strings that contain the substring. str: A message indicating no match was found if the substring is not in any string. if not strings: return \\"No match found\\" matches = [s for s in strings if substring in s] if matches: return matches else: return \\"No match found\\""},{"question":"Write a function `substring_counter` in Python that takes a string and a substring as arguments and returns the number of non-overlapping occurrences of the substring in the string. Example Input: string = \\"ababababa\\", substring = \\"aba\\" Example Output: 2","solution":"def substring_counter(string, substring): Returns the number of non-overlapping occurrences of a substring in the string. :param string: The string in which to search for the substring. :param substring: The substring to search for in the string. :return: The number of non-overlapping occurrences of the substring. if len(substring) == 0: return 0 count = start = 0 while start < len(string): pos = string.find(substring, start) if pos != -1: count += 1 start = pos + len(substring) else: break return count"},{"question":"Write a function that takes a list of strings and returns a new list containing only the palindromes. A palindrome is a word that reads the same backward as forward, such as \'racecar\' or \'level\'. The comparison should be case-insensitive. input_list = [\\"Racecar\\", \\"hello\\", \\"Ana\\", \\"world\\", \\"Level\\"] def find_palindromes(input_list): # Your implementation here","solution":"def find_palindromes(input_list): Returns a list containing only the palindromes from the input list. The comparison is case-insensitive. Args: input_list (list of str): List of strings to check for palindromes. Returns: list of str: List containing only the palindromes. return [word for word in input_list if word.lower() == word[::-1].lower()]"},{"question":"Design a function that reads a comma-separated values (CSV) file containing information about employees, such as their ID, name, department, salary, and years of employment. The function should calculate the average salary for each department and return the results as a dictionary where the keys are the department names and the values are the average salaries. The function should handle cases where data may be missing or improperly formatted, logging any anomalies encountered. **Example CSV** ``` ID,Name,Department,Salary,Years of Employment 1,John Doe,Engineering,75000,5 2,Jane Smith,Marketing,55000,3 3,Bob Johnson,Engineering,80000,2 4,Alice White,Sales,60000,4 5,Chris Green,Marketing,50000,6 ``` **Sample Output** ```python { \\"Engineering\\": 77500.0, \\"Marketing\\": 52500.0, \\"Sales\\": 60000.0 } ``` **Function Signature** ```python import csv import logging from typing import Dict def calculate_average_salary_per_department(csv_file_path: str) -> Dict[str, float]: # Your code here pass ```","solution":"import csv import logging from typing import Dict def calculate_average_salary_per_department(csv_file_path: str) -> Dict[str, float]: Reads a CSV file containing employee information and calculates the average salary for each department. Parameters: csv_file_path (str): Path to the CSV file. Returns: Dict[str, float]: A dictionary where the keys are department names and values are the average salaries. department_salaries = {} department_counts = {} logging.basicConfig(level=logging.INFO) try: with open(csv_file_path, mode=\'r\') as file: reader = csv.DictReader(file) for row in reader: try: department = row.get(\'Department\') salary = row.get(\'Salary\') if department and salary: salary = float(salary) if department in department_salaries: department_salaries[department] += salary department_counts[department] += 1 else: department_salaries[department] = salary department_counts[department] = 1 else: logging.warning(f\\"Incomplete row data: {row}\\") except ValueError: logging.warning(f\\"Invalid salary value: {row.get(\'Salary\')} in row: {row}\\") except FileNotFoundError: logging.error(f\\"File not found: {csv_file_path}\\") return {} average_salaries = {department: department_salaries[department] / department_counts[department] for department in department_salaries} return average_salaries"},{"question":"Create a function that takes a list of dictionaries representing people\'s names, ages, and cities, and returns a new list of dictionaries containing only the names and ages of people who are older than a specified age. **Example Input:** people = [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"city\\": \\"New York\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"city\\": \\"Los Angeles\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 35, \\"city\\": \\"Chicago\\"} ] age_threshold = 28 **Example Output:** [ {\\"name\\": \\"Alice\\", \\"age\\": 30}, {\\"name\\": \\"Charlie\\", \\"age\\": 35} ]","solution":"def filter_people_by_age(people, age_threshold): Filters a list of dictionaries to only include people older than a given age. Args: people (list): A list of dictionaries with \'name\', \'age\', and \'city\' keys. age_threshold (int): The age threshold to filter people. Returns: list: A new list of dictionaries containing only \'name\' and \'age\' of people older than the given age. return [{\\"name\\": person[\\"name\\"], \\"age\\": person[\\"age\\"]} for person in people if person[\\"age\\"] > age_threshold]"},{"question":"Write a function that takes an input list of integers and returns a new list where all negative numbers are replaced by their absolute value, all positive numbers remain the same, and all zero values are removed. example_list = [-1, 2, 0, -3, 5, 0, -7]","solution":"def modify_list(input_list): Takes a list of integers and returns a new list where: - All negative numbers are replaced by their absolute value - All positive numbers remain the same - All zero values are removed return [abs(x) if x < 0 else x for x in input_list if x != 0]"},{"question":"Determine the error present in the given Python function designed to find the intersection of two sets and return the common elements in a list. ```python def find_common_elements(set1, set2): print(\\"Finding common elements between two sets.\\") common_elements = [] for element in set1: if element in set2: common_elements.append(element) return common_elements set1 = {1, 2, 3, 4, 5} set2 = {4, 5, 6, 7, 8} intersected_elements = find_common_elements(set1, set2) print(\\"The common elements between the sets are:\\", intersected_elements) ```","solution":"def find_common_elements(set1, set2): Returns a list of common elements between two sets. common_elements = list(set1.intersection(set2)) return common_elements # Example sets set1 = {1, 2, 3, 4, 5} set2 = {4, 5, 6, 7, 8} intersected_elements = find_common_elements(set1, set2) print(\\"The common elements between the sets are:\\", intersected_elements)"},{"question":"Given a dataset containing various details of individuals participating in a marathon, implement a solution to predict their finishing times based on their personal information and training data. Implement proper feature engineering techniques to handle categorical data, missing values, and irrelevant features. You can download the dataset from (provide hypothetical link or specify dataset location if available). Use any regression algorithm in scikit-learn and justify your choice.","solution":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler, OneHotEncoder from sklearn.compose import ColumnTransformer from sklearn.pipeline import Pipeline from sklearn.impute import SimpleImputer from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error from sklearn.metrics import mean_absolute_error def predict_marathon_times(dataset_path): # Load dataset df = pd.read_csv(dataset_path) # Drop irrelevant features drop_columns = [\'Name\', \'Bib\', \'City\'] df = df.drop(columns=drop_columns) # Separate features and target X = df.drop(columns=[\'Finishing_Time\']) y = df[\'Finishing_Time\'] # Identify categorical and numerical columns categorical_cols = X.select_dtypes(include=[\'object\']).columns numerical_cols = X.select_dtypes(include=[\'number\']).columns # Preprocessing for numerical data numerical_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'median\')), (\'scaler\', StandardScaler()) ]) # Preprocessing for categorical data categorical_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'most_frequent\')), (\'onehot\', OneHotEncoder(handle_unknown=\'ignore\')) ]) # Combine preprocessing steps preprocessor = ColumnTransformer( transformers=[ (\'num\', numerical_transformer, numerical_cols), (\'cat\', categorical_transformer, categorical_cols) ]) # Create pipeline model = Pipeline(steps=[(\'preprocessor\', preprocessor), (\'regressor\', LinearRegression())]) # Split data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the model model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Evaluate the model mse = mean_squared_error(y_test, y_pred) mae = mean_absolute_error(y_test, y_pred) print(\\"Mean Squared Error:\\", mse) print(\\"Mean Absolute Error:\\", mae) return model"},{"question":"Explain the concept of recursion in Python, including its fundamental principles and nuances. Discuss how and when to use recursive functions effectively, and illustrate with an example of a recursive function that calculates the factorial of a given number.","solution":"def factorial(n): Returns the factorial of the given number n. The factorial of n (denoted as n!) is the product of all positive integers up to n. if n == 0: return 1 else: return n * factorial(n-1) # To use the factorial function effectively: # 1. Ensure that the function has a base case to terminate the recursion. Here, the base case is n == 0. # 2. Make sure that with each recursive call, the argument is modified to approach the base case. Here, the argument is decremented by 1 each time. # 3. Be mindful of the maximum recursion depth in Python (usually 1000), beyond which a RecursionError will be raised."},{"question":"Write a function that takes a string containing a mix of letters and digits and returns a new string where all the digits are moved to the end while preserving the order of the letters and digits in their respective groups. For example, given the input \\"a1b2c3\\", the output should be \\"abc123\\". Ensure your solution optimizes for both time and space complexity.","solution":"def move_digits_to_end(s): Given a string containing a mix of letters and digits, return a new string where all the digits are moved to the end while preserving the order of the letters and digits in their respective groups. Args: s (str): Input string containing a mix of letters and digits. Returns: str: A new string with digits moved to the end. letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(letters + digits)"},{"question":"Implement a function that receives a string consisting of lowercase alphabetic characters and an integer (n). This function should return the shifted string, where each character in the original string is replaced by a character some fixed number of positions down the alphabet (determined by n). If shifting exceeds \'z\', it should wrap around to the beginning of the alphabet. For instance, shifting \'z\' by 1 should result in \'a\'. Ensure that all edge cases such as negative shifts and shifts larger than 26 are handled correctly. Note that the function should preserve the non-alphabetic characters in their original positions. Example: ```python shift_string(\\"abc\\", 1) # returns \\"bcd\\" shift_string(\\"xyz\\", 3) # returns \\"abc\\" shift_string(\\"hello, world!\\", 5) # returns \\"mjqqt, btwqi!\\" shift_string(\\"shift-me\\", -2) # returns \\"qfgdr-kc\\" ```","solution":"def shift_string(s, n): Returns a string where each lowercase alphabetic character is shifted by n positions in the alphabet, wrapping around if necessary. Non-alphabetic characters remain unchanged. shifted_string = [] for char in s: if char.isalpha() and char.islower(): original_position = ord(char) - ord(\'a\') new_position = (original_position + n) % 26 shifted_char = chr(ord(\'a\') + new_position) shifted_string.append(shifted_char) else: shifted_string.append(char) return \'\'.join(shifted_string)"},{"question":"Create a function that takes a string consisting of lowercase alphabets and returns the length of the longest substring with all unique characters. For example, given the string \\"abcabcbb\\", the function should return 3, because the longest substring with all unique characters is \\"abc\\". Implement proper error handling for edge cases such as an empty string.","solution":"def length_of_longest_unique_substring(s): Returns the length of the longest substring with all unique characters. :param s: A string consisting of lowercase alphabets. :type s: str :return: Length of the longest substring with all unique characters. :rtype: int if not isinstance(s, str): raise ValueError(\\"Input must be a string.\\") if len(s) == 0: return 0 n = len(s) max_len = 0 start = 0 char_index = {} for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Given a list of integers, write a function `remove_duplicates_and_sort` that removes all duplicate values from the list and returns a new list with unique elements in ascending order. Provide a detailed explanation of your approach, implement the function, and write a set of tests to verify your solution. **Example:** ```python # Example list numbers = [4, 5, 6, 4, 3, 5, 2, 1, 1] # Function call result = remove_duplicates_and_sort(numbers) # Expected output print(result) # Output: [1, 2, 3, 4, 5, 6] ``` Make sure your function can handle lists containing negative integers, zero, and large numbers. Additionally, ensure it keeps working correctly if the list contains already sorted elements or is initially empty.","solution":"def remove_duplicates_and_sort(numbers): This function removes duplicate values from the given list of integers and returns a new list with unique elements in ascending order. :param numbers: List of integers :return: List of unique integers in ascending order return sorted(set(numbers))"},{"question":"Create a function that takes a string representing a mathematical expression (consisting of integers and the operators +, -, *, /) and evaluates it using the correct order of operations (PEMDAS/BODMAS rules). The function should return the result as a floating point number. If the string is empty or contains invalid characters/format, the function should return an appropriate error message.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string using the correct order of operations (PEMDAS/BODMAS rules). Parameters: expression (str): The string representing the mathematical expression. Returns: float: The result of the evaluation as a floating point number. str: Error message if the expression is empty or invalid. # Check if expression is empty if not expression: return \\"The expression is empty.\\" # Define allowable characters allowable_chars = \\"0123456789+-*/(). \\" # Check for invalid characters for char in expression: if char not in allowable_chars: return \\"The expression contains invalid characters.\\" try: # Evaluate the expression using Python\'s eval function result = eval(expression) except Exception as e: return str(e) return result"},{"question":"Identify all the substrings within the provided string that form valid words according to the supplied dictionary. Return the collection of valid words found. String: \\"applenotebook\\" Dictionary: {\\"apple\\", \\"pen\\", \\"notebook\\", \\"note\\", \\"book\\"}","solution":"def find_valid_words(s, dictionary): Returns the list of valid words found in the given string as per the provided dictionary. Args: s (str): The input string to search for valid words. dictionary (set): A set containing valid words. Returns: List[str]: A list of valid words found in the input string. valid_words = [] n = len(s) for i in range(n): for j in range(i + 1, n + 1): substring = s[i:j] if substring in dictionary: valid_words.append(substring) return list(set(valid_words)) # to return unique words only"},{"question":"Write a function that takes a list of integers as input and returns another list consisting of the prime factors of each number in the input list. The result should present prime factors in ascending order, and each number should only appear once in the output list, even if it is a factor of multiple input numbers.","solution":"def prime_factors(n): Returns the list of prime factors of the given number n. factors = set() i = 2 while i * i <= n: while (n % i) == 0: factors.add(i) n //= i i += 1 if n > 1: factors.add(n) return list(factors) def get_prime_factors_list(nums): Returns a list of unique prime factors from the input list of integers. unique_factors = set() for num in nums: unique_factors.update(prime_factors(num)) return sorted(list(unique_factors))"},{"question":"Given a string, write a function that checks if it can be rearranged to form a palindrome. A string is considered a palindrome if it reads the same forwards and backwards. Your function should determine if any permutation of the input string can achieve this. # Requirements: - You must achieve this without using any built-in string manipulation methods like `str.reverse()`. - Your solution should focus on optimized time complexity. # Function Signature: ```python def can_form_palindrome(s: str) -> bool: ``` # Example: ```python print(can_form_palindrome(\\"civic\\")) # Output: True (already a palindrome) print(can_form_palindrome(\\"ivicc\\")) # Output: True (\\"civic\\" can be formed) print(can_form_palindrome(\\"hello\\")) # Output: False (cannot form a palindrome) print(can_form_palindrome(\\"aabb\\")) # Output: True (\\"abba\\" or \\"baab\\" can be formed) ``` # Constraints: - The input string `s` contains only lowercase alphabets and its length is at most 100,000 characters.","solution":"def can_form_palindrome(s: str) -> bool: Determines if any permutation of the input string can be rearranged to form a palindrome. from collections import Counter # Count the occurrences of each character in the string char_count = Counter(s) # A string can form a palindrome if at most one character has an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # Check if the number of characters with odd count is more than 1 return odd_count <= 1"},{"question":"You are given a list of integers. Write a Python function that returns a new list which contains each element of the original list multiplied by its index position. Ensure that your solution handles edge cases such as an empty list or a list with negative integers. For example: ```python def multiply_elements_by_index(lst): # Your code here # Example usage: print(multiply_elements_by_index([1, 2, 3, 4])) # Output: [0, 2, 6, 12] print(multiply_elements_by_index([])) # Output: [] print(multiply_elements_by_index([-3, 0, 2, 5])) # Output: [0, 0, 4, 15] ``` Note: Do not use list comprehensions or built-in map functions in your implementation; write the code manually to demonstrate core loop constructions.","solution":"def multiply_elements_by_index(lst): Given a list of integers, returns a new list with each element multiplied by its index position. Args: - lst (list): List of integers. Returns: - new_lst (list): A new list where each element is the product of the original element and its index. new_lst = [] for index, value in enumerate(lst): new_lst.append(index * value) return new_lst"},{"question":"Write a program that accepts a list of integers and returns the product of all prime numbers in the list. Your code should include a function to check for prime numbers and handle edge cases, such as an empty list or a list with no prime numbers. If no prime numbers are found, the program should return a message indicating this instead of a numerical result. Avoid using any built-in functions that directly solve this problem. list_input = [3, 4, 7, 12, 5]","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): # Check only odd numbers if n % i == 0: return False return True def product_of_primes(lst): Returns the product of all prime numbers in the list. If there are no prime numbers or the list is empty, returns a message indicating this. primes = [x for x in lst if is_prime(x)] if not primes: return \\"No prime numbers found\\" product = 1 for prime in primes: product *= prime return product # Example usage: list_input = [3, 4, 7, 12, 5] print(product_of_primes(list_input)) # Output should be 105"},{"question":"Imagine you are working on enhancing a search engine\'s ability to autocomplete search queries for users. Write a function that, given a list of possible autocompletions and a prefix string, returns a list of all completions that start with the given prefix. The function should be case-insensitive and return results in a case-insensitive alphabetical order. # Input: - A list of strings representing possible autocompletions (`completions`). - A string representing the prefix to be matched (`prefix`). # Output: - A list of strings representing matching autocompletions in case-insensitive alphabetical order. # Example: Input: `completions = [\\"Dog\\", \\"deer\\", \\"Deal\\", \\"cat\\", \\"cattle\\", \\"door\\"]` `prefix = \\"do\\"` Output: `[\\"Dog\\", \\"door\\"]` # Constraints: 1. The solution should efficiently handle large lists of autocompletions. 2. The function should be case-insensitive. 3. The result list should be sorted in case-insensitive alphabetical order.","solution":"def autocomplete(completions, prefix): Returns a list of completions that start with the given prefix, case-insensitive and sorted in case-insensitive alphabetical order. Parameters: completions (list of str): List of possible autocompletions. prefix (str): The prefix to be matched. Returns: list of str: List of matching completions. prefix = prefix.lower() matching_completions = [word for word in completions if word.lower().startswith(prefix)] return sorted(matching_completions, key=lambda x: x.lower())"},{"question":"Write a Python function `filter_dicts` that takes a list of dictionaries and a filtering dictionary as inputs, and returns a list of dictionaries from the original list that match all key-value pairs specified in the filtering dictionary. For example, given the following input: ```python dicts = [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"city\\": \\"New York\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"city\\": \\"Los Angeles\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 30, \\"city\\": \\"New York\\"}, ] filtering_dict = {\\"age\\": 30, \\"city\\": \\"New York\\"} ``` The function should return: ```python [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"city\\": \\"New York\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 30, \\"city\\": \\"New York\\"}, ] ``` Your task is to implement the `filter_dicts` function: ```python from typing import List, Dict def filter_dicts(dicts: List[Dict], filtering_dict: Dict) -> List[Dict]: # Your code here ``` Note: - Assume that the dictionaries in the `dicts` list have string keys and primitive values (int, float, string, etc.). - The `filtering_dict` can have any subset of the keys present in the dictionaries in `dicts`. - The resulting list should preserve the order of dictionaries as they appeared in the original list.","solution":"from typing import List, Dict def filter_dicts(dicts: List[Dict], filtering_dict: Dict) -> List[Dict]: Filters a list of dictionaries to include only those dictionaries that match all key-value pairs specified in the filtering_dict. filtered_list = [] for dictionary in dicts: if all(item in dictionary.items() for item in filtering_dict.items()): filtered_list.append(dictionary) return filtered_list"},{"question":"Implement a function that takes two lists as input: \'arrival_times\' and \'burst_times\'. Each element in \'arrival_times\' represents the time at which a process arrives in the CPU job queue, and each element in \'burst_times\' represents the time required for that process to complete execution. Your task is to simulate the execution of these processes using the First-Come, First-Served (FCFS) scheduling algorithm and return a list of the completion times for each process. For example, given: ```python arrival_times = [0, 2, 4, 6] burst_times = [3, 6, 4, 5] ``` Your function should return: ```python [3, 9, 13, 18] ``` # Constraints: 1. The length of \'arrival_times\' and \'burst_times\' will be the same. 2. Each list will have at least 1 and at most 10^5 elements. 3. All elements in \'arrival_times\' and \'burst_times\' will be non-negative integers.","solution":"def fcfs_completion_times(arrival_times, burst_times): Returns the completion times for each process using FCFS scheduling algorithm. Parameters: arrival_times (list): A list of arrival times for each process. burst_times (list): A list of burst times for each process. Returns: list: A list of completion times for each process. n = len(arrival_times) completion_times = [0] * n current_time = 0 for i in range(n): if current_time < arrival_times[i]: current_time = arrival_times[i] current_time += burst_times[i] completion_times[i] = current_time return completion_times"},{"question":"You are tasked with designing a system in a programming language of your choice to determine if a given string is a valid palindrome. Your software should be capable of handling multiple strings simultaneously and return a response for each string indicating whether it is a palindrome (\\"yes\\") or not (\\"no\\"). Additionally, the software must manage edge cases where the input string contains spaces, punctuation, or mixed casing, handling these cases appropriately. Ensure the code maintains optimal performance and memory usage while being able to process relatively large strings efficiently. Implement robust error handling to manage invalid or unexpected inputs gracefully.","solution":"import re def is_palindrome(s): Determines if a given string is a palindrome. Spaces, punctuation, and casing are ignored. Parameters: s (str): The string to check. Returns: str: \'yes\' if the string is a palindrome, \'no\' otherwise. if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") # Remove non-alphanumeric characters and convert to lowercase cleaned_str = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return \'yes\' if cleaned_str == cleaned_str[::-1] else \'no\' def check_palindromes(list_of_strings): Processes a list of strings and determines if each string is a palindrome. Parameters: list_of_strings (list): The list of strings to check. Returns: list: A list of results for each input string. if not isinstance(list_of_strings, list): raise ValueError(\\"Input must be a list of strings\\") return [is_palindrome(s) for s in list_of_strings]"},{"question":"Given a binary tree, return the level order traversal of its nodes\' values. (i.e., from left to right, level by level). **Example:** Given binary tree [3,9,20,null,null,15,7], ``` 3 / 9 20 / 15 7 ``` Return its level order traversal as: ``` [ [3], [9,20], [15,7] ] ``` **Function Signature:** ```python def levelOrder(root: TreeNode) -> List[List[int]]: pass ```","solution":"from typing import List, Optional from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def levelOrder(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) current_level = [] for _ in range(level_size): node = queue.popleft() current_level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(current_level) return result"},{"question":"In order to enhance our order processing system, please optimize the following Python code to update and print the stock levels of items in our inventory. The current approach needs improvement for efficiency and readability. The code below uses a predefined dictionary to represent the stock levels of different products and then updates the stock levels based on recent sales stored in another dictionary. Following this, it displays the updated stock levels. ```python # Initial stock levels inventory = { \\"apples\\": 50, \\"bananas\\": 30, \\"oranges\\": 20 } # Recent sales sales = { \\"apples\\": 10, \\"bananas\\": 5, \\"oranges\\": 8 } # Function to update stock levels def update_inventory(inventory, sales): for item in sales: if item in inventory: inventory[item] -= sales[item] # Update inventory update_inventory(inventory, sales) # Print Updated Inventory for item, stock in inventory.items(): print(f\\"{item.capitalize()}: {stock}\\") ``` Review and modify the code to ensure it reflects best programming practices, such as handling potential errors, improving clarity, and maintaining efficiency.","solution":"def update_inventory(inventory, sales): Updates the inventory dictionary by subtracting the quantities found in the sales dictionary. If an item in the sales dictionary does not exist in the inventory, it will be ignored. for item, quantity_sold in sales.items(): if item in inventory: inventory[item] = max(0, inventory[item] - quantity_sold) def print_inventory(inventory): Prints the inventory in a formatted manner. for item, stock in inventory.items(): print(f\\"{item.capitalize()}: {stock}\\") # Initial stock levels inventory = { \\"apples\\": 50, \\"bananas\\": 30, \\"oranges\\": 20 } # Recent sales sales = { \\"apples\\": 10, \\"bananas\\": 5, \\"oranges\\": 8 } # Update inventory and print the results update_inventory(inventory, sales) print_inventory(inventory)"},{"question":"Write a function that calculates the sum of all prime numbers less than or equal to a given positive integer `n`. The function should use an efficient algorithm to ensure it runs in a reasonable time frame for large values of `n`. You should first identify all the prime numbers up to `n` and then compute their sum. Implement the function `sum_of_primes(n: int) -> int` that takes an integer `n` and returns the sum of all prime numbers up to `n`. Example: ``` sum_of_primes(10) -> 17 # Since the prime numbers less than or equal to 10 are 2, 3, 5, and 7. sum_of_primes(20) -> 77 # Since the prime numbers less than or equal to 20 are 2, 3, 5, 7, 11, 13, 17, and 19. ```","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than or equal to a given positive integer n. if n < 2: return 0 is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return sum(i for i in range(n + 1) if is_prime[i])"},{"question":"Formulate a Python script module that defines a function `is_prime(num)` to check if a number is prime and a function `generate_prime_numbers(n)` to generate a list of the first `n` prime numbers. Additionally, implement a function `is_palindrome(number)` to verify if a given number is a palindrome and a function `prime_palindromes(limit)` that returns a list of prime numbers within `limit` that are also palindromes.","solution":"def is_prime(num): Check if a number is prime. if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def generate_prime_numbers(n): Generate a list of the first n prime numbers. primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes def is_palindrome(number): Check if a number is a palindrome. return str(number) == str(number)[::-1] def prime_palindromes(limit): Return a list of prime numbers within limit that are also palindromes. primes = [] for num in range(2, limit): if is_prime(num) and is_palindrome(num): primes.append(num) return primes"},{"question":"In a directed acyclic graph (DAG) with `n` nodes labeled from `1` to `n`, each node represents a task, and each directed edge represents a dependency between two tasks (i.e., task `A` must be completed before task `B`). The graph is represented by an adjacency list. Your task is to determine if it is possible to complete all tasks. If it is possible, return `true` and any valid ordering of the tasks such that all dependencies are met. If it is not possible, return `false` and an empty list. Example 1: Input: ``` n = 4 edges = [[1, 2], [1, 3], [3, 4], [4, 2]] ``` Output: ``` true, [1, 3, 4, 2] ``` Explanation: The tasks can be completed in the order [1, 3, 4, 2] or [1, 3, 2, 4]. Example 2: Input: ``` n = 3 edges = [[1, 2], [2, 3], [3, 1]] ``` Output: ``` false, [] ``` Explanation: There is a cycle in the graph, so it is impossible to complete all tasks. Constraints: - The number of nodes `n` is between `2` and `100`. - The `edges` list contains pairs of integers where `1 <= edges[i][0], edges[i][1] <= n`.","solution":"from collections import defaultdict, deque def can_complete_tasks(n, edges): Determines if all tasks in a directed acyclic graph can be completed, and returns a valid ordering if possible. Parameters: n (int): the number of nodes/tasks edges (list of lists of int): each inner list represents a directed edge (dependency) between two tasks Returns: tuple: (bool, list) - a tuple where the first element is a boolean indicating if all tasks can be completed, and the second element is a list representing the order of tasks if it is possible, otherwise an empty list in_degree = [0] * n adj_list = defaultdict(list) # Build the graph for u, v in edges: adj_list[u-1].append(v-1) in_degree[v-1] += 1 # Queue for nodes with no incoming edges queue = deque() for i in range(n): if in_degree[i] == 0: queue.append(i) order = [] while queue: node = queue.popleft() order.append(node + 1) for neighbor in adj_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == n: return True, order else: return False, [] # Test the solution with the example n = 4 edges = [[1, 2], [1, 3], [3, 4], [4, 2]] print(can_complete_tasks(n, edges)) # Output should be (True, [1, 3, 4, 2])"},{"question":"Write a function that takes a string as an input and determines if it represents a valid Sudoku solution. The function should check if each row, column, and 3x3 subgrid contains all digits from 1 to 9 without repetition. The input string will be 81 characters long, where each character can either be a digit from \'1\' to \'9\' or a dot \'.\' representing an empty cell. The function should return true if the string is a valid Sudoku solution, and false otherwise.","solution":"def is_valid_sudoku_solution(board_str): # Convert the input string to a 2D list board = [[board_str[i * 9 + j] for j in range(9)] for i in range(9)] def is_valid_block(block): nums = [x for x in block if x != \'.\'] return len(nums) == len(set(nums)) for i in range(9): # Check rows if not is_valid_block(board[i]): return False # Check columns if not is_valid_block([board[j][i] for j in range(9)]): return False # Check 3x3 subgrids for i in range(3): for j in range(3): block = [board[r][c] for r in range(i*3, (i+1)*3) for c in range(j*3, (j+1)*3)] if not is_valid_block(block): return False return True"},{"question":"Write a Python function `pair_sum_to_zero` that takes a list of integers `lst` as input and returns a list of unique pairs (tuples) of integers from the input list that sum to zero. Each pair should be in the form `(min, max)` where `min` and `max` are the smaller and larger number of the pair, respectively. The pairs should be ordered first by their first element ascending, and if these are equal, then by their second element ascending. If no such pairs exist, return an empty list. # Example: ``` Input: lst = [1, -1, 2, -2, 3, -3, 4] Output: [(-3, 3), (-2, 2), (-1, 1)] Input: lst = [0, 1, 2, 3, 4, -5] Output: [] Input: lst = [4, -4, 2, -2, 0, 4, -4] Output: [(-4, 4), (-2, 2)] ``` # Constraints: - The function should run in O(n log n) or better time complexity. - The input list can contain duplicate integers. - The length of the input list will be between 1 and 10^6 (inclusive).","solution":"def pair_sum_to_zero(lst): Returns a list of unique pairs of integers from the input list that sum to zero. Each pair is in the form (min, max) and ordered lexicographically. from collections import Counter counter = Counter(lst) result = set() for num in counter: if num > 0 and -num in counter: result.add((-num, num)) return sorted(result)"},{"question":"Write a function that takes a list of tuples where each tuple contains two integers. The function should return the count of unique products that can be obtained by multiplying the two integers in each tuple. For example: input_list = [(2, 3), (4, 1), (2, 3), (5, 6)] The output should be 3, because the unique products obtained are: 6, 4, and 30. Note that (2, 3) and (2, 3) result in the same product and are thus counted only once.","solution":"def unique_products_count(input_list): Returns the count of unique products obtained by multiplying the two integers in each tuple in the input list. unique_products = set() for a, b in input_list: product = a * b unique_products.add(product) return len(unique_products)"},{"question":"Construct a function called `isPalindrome` which takes a string as an input and returns a boolean indicating whether the string is a palindrome (a word, phrase, or sequence that reads the same backward as forward, ignoring spaces, punctuation, and capitalization). Provide a set of test cases to validate the correctness of your function.","solution":"def isPalindrome(s): Returns True if the input string is a palindrome, ignoring spaces, punctuation, and capitalization. # Removing non-alphanumeric characters and converting to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Creating the reversed version of the filtered list reversed_chars = filtered_chars[::-1] # Checking if the string is equal to its reversed version return filtered_chars == reversed_chars"},{"question":"Write a function that accepts a list of strings and returns a dictionary where the keys are the first letters of each string, and the values are lists of strings that start with that letter. Ignore case when determining the starting letter, but preserve the original case in the output lists.","solution":"def group_strings_by_first_letter(strings): Groups a list of strings by their first letter, ignoring case. Args: strings (list of str): A list of strings. Returns: dict: A dictionary where the keys are the first letters (lowercase), and the values are lists of original strings starting with that letter. grouped = {} for string in strings: if string: # check if string is not empty first_letter = string[0].lower() if first_letter not in grouped: grouped[first_letter] = [] grouped[first_letter].append(string) return grouped"},{"question":"Write a function in Python called `flatten_list` that takes a list, which may contain nested lists, and returns a new list with all elements flattened into a single level. For example, given the input `[1, [2, [3, 4]], 5]`, the function should return `[1, 2, 3, 4, 5]`. Ensure your function handles lists of arbitrary depth and includes appropriate error handling for non-list inputs.","solution":"def flatten_list(nested_list): Flattens a nested list into a single level list. Parameters: nested_list (list): A list which may contain nested lists. Returns: list: A flattened list with all elements at a single level. if not isinstance(nested_list, list): raise TypeError(\\"Input must be a list\\") flat_list = [] def _flatten(sublist): for item in sublist: if isinstance(item, list): _flatten(item) else: flat_list.append(item) _flatten(nested_list) return flat_list"},{"question":"Create a function that takes a list of mixed data types (integers and strings) and returns a dictionary with two keys: \'integers\' and \'strings\'. The value for each key should be a sorted list (in ascending order) containing only the integers or strings from the input list. Do not use built-in sorting functions. Example: ```python my_list = [3, \\"apple\\", 1, \\"banana\\", 2, \\"cherry\\"] ``` Expected output: ```python { \\"integers\\": [1, 2, 3], \\"strings\\": [\\"apple\\", \\"banana\\", \\"cherry\\"] } ```","solution":"def insertion_sort(arr): Sorts an array using the insertion sort algorithm. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr def segregate_and_sort(input_list): Segregates a mixed list into integers and strings, and returns a dictionary with two sorted lists. integers = [] strings = [] for item in input_list: if isinstance(item, int): integers.append(item) elif isinstance(item, str): strings.append(item) sorted_integers = insertion_sort(integers) sorted_strings = insertion_sort(strings) return { \\"integers\\": sorted_integers, \\"strings\\": sorted_strings }"},{"question":"Assess the given function designed to concatenate two strings. Identify any possible issues or improvements that could be made to enhance its reliability and efficiency. Function code: def concatenate_strings(str1, str2): result = str1 + str2 return result","solution":"def concatenate_strings(str1, str2): Concatenates two input strings and returns the result. return str1 + str2"},{"question":"Write a Python function `encode_message` that takes a string input and returns an encoded version of the message using a basic substitution cipher. In this cipher, each letter in the message is replaced by the letter 3 positions after it in the English alphabet. For example, \'a\' becomes \'d\', \'b\' becomes \'e\', and so on. When the substitution reaches the end of the alphabet, it wraps around to the beginning. For example, \'x\' becomes \'a\', \'y\' becomes \'b\', and \'z\' becomes \'c\'. Non-letter characters should remain unchanged. **Function Signature:** ```python def encode_message(message: str) -> str: ``` **Input:** - `message` (str): A string containing the message to be encoded. The string consists of lowercase and uppercase alphabetic characters and spaces. **Output:** - The function should return a string containing the encoded message. **Example:** ```python message = \\"Hello, World!\\" encoded_message = encode_message(message) print(encoded_message) # Output: \\"Khoor, Zruog!\\" ```","solution":"def encode_message(message: str) -> str: Encodes a message using a basic substitution cipher where each letter is replaced by the letter 3 positions after it in the alphabet. Non-letter characters are not changed. encoded_message = [] for char in message: # Process uppercase letters if \'A\' <= char <= \'Z\': new_char = chr(((ord(char) - ord(\'A\') + 3) % 26) + ord(\'A\')) encoded_message.append(new_char) # Process lowercase letters elif \'a\' <= char <= \'z\': new_char = chr(((ord(char) - ord(\'a\') + 3) % 26) + ord(\'a\')) encoded_message.append(new_char) # Keep non-letter characters unchanged else: encoded_message.append(char) return \'\'.join(encoded_message)"},{"question":"Write a Python function that identifies the longest increasing subsequence within a given list of integers. The function must efficiently handle lists that may include negative integers and have a size up to 10^5 elements without exceeding time and space complexity constraints. The returned subsequence should be a list of integers representing the longest increasing sequence in the order they appear. If there are multiple subsequences of the same length, return the one which has the smallest starting index. Additionally, the function should handle multiple requests, where each request consists of a list of integers to be processed. The function should be able to process up to 10^3 requests without exceeding time and space complexity constraints. Moreover, the function should also compute and return the length of the longest increasing subsequence. The function should ensure that both the subsequence and the length are returned as a tuple in the format (subsequence, length).","solution":"def longest_increasing_subsequence(arr): Finds the longest increasing subsequence in a list of integers. Returns the subsequence and its length as a tuple. from bisect import bisect_left if not arr: return [], 0 n = len(arr) # Will store the indices of the smallest end elements of LIS of various lengths tails = [] indices = [] # Initialize the prev array to reconstruct path prev = [-1] * n for i in range(n): pos = bisect_left([arr[j] for j in tails], arr[i]) if pos < len(tails): tails[pos] = i else: tails.append(i) if pos > 0: prev[i] = tails[pos-1] else: prev[i] = -1 # Reconstruct the longest increasing subsequence lis_length = len(tails) lis = [] k = tails[-1] while k >= 0: lis.append(arr[k]) k = prev[k] lis.reverse() return lis, lis_length def process_multiple_requests(requests): Processes multiple requests for finding the longest increasing subsequence. Returns a list of tuples, each containing the longest increasing subsequence and its length. return [longest_increasing_subsequence(request) for request in requests]"},{"question":"Implement a function that takes a list of integers and returns the length of the longest increasing subsequence. An increasing subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements and such that the elements of the new sequence are in ascending order. **Example** ```python # Input: [10, 9, 2, 5, 3, 7, 101, 18] # Output: 4 # Explanation: The longest increasing subsequence is [2, 3, 7, 101] which has length 4. ```","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence (LIS) in the list nums. Args: nums (List[int]): A list of integers. Returns: int: The length of the longest increasing subsequence. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the prime numbers from the original list. If the input list is empty or has no prime numbers, return an empty list. Additionally, handle and fix the error in the given code snippet: ```python def is_prime(num): if num <= 1: return False for i in range(num//2): if num % i == 0: return False return True def extract_primes(numbers): primes = [] for num in numbers: if is_prime(num): primes.append(num) return primes ``` Here is the erroneous code for your reference: 1. The loop inside `is_prime` should start from 2 and end at `num**0.5 + 1`. 2. Inside the loop, instead of checking `if num % i == 0`, the condition should be corrected to `if num % i == 0` for checking divisibility. Here\'s the corrected version: ```python def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def extract_primes(numbers): primes = [] for num in numbers: if is_prime(num): primes.append(num) return primes ``` Again, the goal is to filter out the prime numbers from a given list of integers, correct any mistakes in the provided code snippet, and ensure the correctness of the final implementation.","solution":"def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def extract_primes(numbers): primes = [] for num in numbers: if is_prime(num): primes.append(num) return primes"},{"question":"Create a function that takes a string as input and determines whether it is a valid IP address. An IP address is considered valid if it consists of four octets, each ranging from 0 to 255 and separated by periods. The function should return a boolean value indicating whether the input string is a valid IP address. Function Signature: `def is_valid_ip(ip_address: str) -> bool:` # Example ```python # Example 1 input: \\"192.168.1.1\\" output: True # Example 2 input: \\"256.100.50.0\\" output: False # Example 3 input: \\"192.168.1\\" output: False # Example 4 input: \\"192.168.1.01\\" output: False ```","solution":"def is_valid_ip(ip_address: str) -> bool: Determines if the given string is a valid IP address. An IP address is considered valid if it consists of four octets, each ranging from 0 to 255 and separated by periods. parts = ip_address.split(\'.\') if len(parts) != 4: return False for part in parts: if not part.isdigit() or not 0 <= int(part) <= 255: return False # Check leading zeros if part != \'0\' and part.startswith(\'0\'): return False return True"},{"question":"Can you devise a method to identify and count the occurrences of a specific substring within a larger text string, considering case insensitivity? text_string = \\"Python is amazing. PYTHON is versatile. python is popular.\\" substring = \\"python\\"","solution":"def count_substring_occurrences(text_string, substring): Identifies and counts the occurrences of a specific substring within a larger text string, considering case insensitivity. Args: text_string (str): The larger text string. substring (str): The substring to be counted. Returns: int: The number of occurrences of the substring in the text string. lower_text = text_string.lower() lower_substring = substring.lower() return lower_text.count(lower_substring)"},{"question":"Develop a Python function that accepts a list of dictionaries representing people, where each dictionary contains the keys \'name\', \'age\', and \'city\'. The function should group the people by city and return a new dictionary with the city names as keys and lists of the names of people in those cities as values. Ensure your function handles cases where some people may not have the \'city\' key in their dictionary. For those people, include them in a list under the key \'Unknown\'. maintain good error handling practices and provide meaningful error messages for any potential issues, such as invalid input formats.","solution":"def group_people_by_city(people): Groups people by their city. Parameters: people (list of dict): A list of dictionaries where each dictionary contains \'name\', \'age\', and \'city\'. Returns: dict: A dictionary with city names as keys and lists of the names of people in those cities as values. if not isinstance(people, list): raise TypeError(\\"Input should be a list of dictionaries.\\") result = {} for person in people: if not isinstance(person, dict): raise TypeError(\\"All elements in the list should be dictionaries.\\") if \'name\' not in person or \'age\' not in person or not isinstance(person[\'name\'], str) or not isinstance(person[\'age\'], (int, float)): raise ValueError(\\"Each dictionary must contain \'name\' as a string and \'age\' as a number.\\") city = person.get(\'city\', \'Unknown\') if city not in result: result[city] = [] result[city].append(person[\'name\']) return result"},{"question":"Write a program in a language of your choice to manage a list of student grades. The program should allow you to perform the following operations on the list: add a grade, remove a grade, sort the list in ascending order, find the highest and lowest grades, calculate the average grade, and count how many grades are above a user-specified threshold. The program should prompt the user for required inputs and provide clear, formatted output for each operation. Initial given list: grades = [85, 92, 76, 81, 95, 88]","solution":"class GradeManager: def __init__(self, grades): self.grades = grades def add_grade(self, grade): self.grades.append(grade) def remove_grade(self, grade): if grade in self.grades: self.grades.remove(grade) else: raise ValueError(f\\"Grade {grade} not found in the list.\\") def sort_grades(self): self.grades.sort() def get_highest_grade(self): return max(self.grades) if self.grades else None def get_lowest_grade(self): return min(self.grades) if self.grades else None def calculate_average(self): return sum(self.grades) / len(self.grades) if self.grades else 0 def count_above_threshold(self, threshold): return len([grade for grade in self.grades if grade > threshold])"},{"question":"Given a list of student records where each record is a dictionary with \'name\', \'grade\', and \'age\' keys, write a function to group the students by their grades. The function should return a dictionary where the keys are the grades and the values are lists of dictionaries with student information. Ensure that your function handles cases where multiple students have the same grade and works efficiently even with a large number of records. Here\'s an example input: students = [ {\'name\': \'Alice\', \'grade\': \'A\', \'age\': 17}, {\'name\': \'Bob\', \'grade\': \'B\', \'age\': 18}, {\'name\': \'Charlie\', \'grade\': \'A\', \'age\': 16}, {\'name\': \'David\', \'grade\': \'C\', \'age\': 17}, {\'name\': \'Eve\', \'grade\': \'B\', \'age\': 17} ]","solution":"def group_students_by_grade(students): Groups students by their grades. Args: students (list): A list of dictionaries where each dictionary contains student information with keys \'name\', \'grade\', and \'age\'. Returns: dict: A dictionary where the keys are grades and the values are lists of dictionaries with student information. grouped_students = {} for student in students: grade = student[\'grade\'] if grade not in grouped_students: grouped_students[grade] = [] grouped_students[grade].append(student) return grouped_students"},{"question":"Given a list of integers, write a function to find the longest subsequence such that elements in this subsequence are consecutive integers, the consecutive numbers can be in any order. Your function should return the length of this subsequence. Also, provide a brief explanation of your approach and how you handle potential edge cases like duplicate numbers in the input list, or when the list is empty. As part of your solution, debug the following erroneous Python code and explain what was wrong with the initially provided code: ```python def find_longest_consecutive(nums): if not nums: return 0 nums = sorted(set(nums)) longest_streak = 1 current_streak = 1 for i in range(1, len(nums)): if nums[i] - nums[i - 1] == 1: current_streak += 1 else: longest_streak = max(longest_streak, current_streak) current_streak = 1 return current_streak # Incorrect return, explain why and provide the corrected code # Example usage: nums = [100, 4, 200, 1, 3, 2] print(find_longest_consecutive(nums)) # Expected output: 4, because [1, 2, 3, 4] is the longest consecutive elements sequence ``` In the problem statement, it is suggested to use a set for handling duplicate elements. Explain the benefits of using a set in this context and how it helps improve time complexity.","solution":"def find_longest_consecutive(nums): if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a Python function that takes a string containing both alphabetical characters and digits and returns the characters sorted by frequency in descending order. If two characters have the same frequency, the one that appears first in the original string should come first in the output. Handle both uppercase and lowercase letters, treating them as distinct characters.","solution":"from collections import Counter def sort_by_frequency(s): Returns characters of the string sorted by frequency in descending order. Characters with same frequency maintain their original order. # Count frequencies of characters freq = Counter(s) # Sort characters by frequency (highest first), then by original order (first appearance first) sorted_chars = sorted(s, key=lambda x: (-freq[x], s.index(x))) # Return the sorted list as a string return \'\'.join(sorted_chars)"},{"question":"Develop a function that takes in a list of integers and identifies all unique triplets in the list that add up to zero. The function should return these triplets as a list of lists. Ensure that the solution handles both positive and negative integers and does not include duplicate triplets in the final output. The runtime complexity should be optimized to handle larger input sizes efficiently. **Function Signature:** `def find_zero_sum_triplets(nums: List[int]) -> List[List[int]]:` **Example:** ``` Input: nums = [-1, 0, 1, 2, -1, -4] Output: [[-1, -1, 2], [-1, 0, 1]] ``` **Constraints:** - The input list can have a length up to 10^3. - The input list elements will be in the range [-10^5, 10^5].","solution":"def find_zero_sum_triplets(nums): Returns all unique triplets in the list that add up to zero. nums.sort() res = [] n = len(nums) for i in range(n): if i > 0 and nums[i] == nums[i - 1]: continue # skip the duplicated element to avoid duplicate triplets target = -nums[i] left, right = i + 1, n - 1 while left < right: sum_lr = nums[left] + nums[right] if sum_lr == target: res.append([nums[i], nums[left], nums[right]]) # skip duplicates for left and right while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif sum_lr < target: left += 1 else: right -= 1 return res"},{"question":"Implement a function that takes a list of integers and a target integer. The function should find two different integers in the list that add up to the target integer and return their indices as a tuple. If no such pair exists, return `None`. **Input:** - A list of integers, e.g., `[2, 7, 11, 15]` - A target integer, e.g., `9` **Output:** - A tuple of indices of the two integers that add up to the target, e.g., `(0, 1)` - If no two integers sum up to the target, return `None`. **Example:** ```python def find_pair(nums, target): # your implementation here # Given: nums = [2, 7, 11, 15] target = 9 # Output: (0, 1) ```","solution":"def find_pair(nums, target): Finds two different integers in the list that add up to the target integer and returns their indices as a tuple. If no such pair exists, returns None. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None"},{"question":"**Develop a function to compute the Gini Impurity for a given dataset. The dataset is provided as a list of classes. Explain how the Gini Impurity helps in the process of splitting nodes in a decision tree classifier. Given the dataset below, calculate the Gini Impurity before and after splitting based on the threshold value 2 and 5.** Dataset: [1, 2, 2, 3, 3, 3, 4, 4, 5, 5] Thresholds: 2, 5","solution":"from collections import Counter def gini_impurity(dataset): Calculate the Gini Impurity for a given dataset. Args: dataset (list): List of classes. Returns: float: Gini Impurity total = len(dataset) if total == 0: return 0 class_counts = Counter(dataset) gini = 1 - sum((count / total) ** 2 for count in class_counts.values()) return gini # Function to split dataset and calculate Gini Impurity for each subset def split_and_calculate_gini(dataset, thresholds): Calculate the Gini Impurity for the dataset before and after splitting by given thresholds. Args: dataset (list): List of classes. thresholds (list): List of thresholds to split the dataset Returns: dict: Gini Impurities for original and splitted datasets. results = { \'original_gini\': gini_impurity(dataset) } for threshold in thresholds: left_split = [x for x in dataset if x <= threshold] right_split = [x for x in dataset if x > threshold] left_gini = gini_impurity(left_split) right_gini = gini_impurity(right_split) results[f\'left_split_gini_{threshold}\'] = left_gini results[f\'right_split_gini_{threshold}\'] = right_gini return results # Sample dataset and thresholds dataset = [1, 2, 2, 3, 3, 3, 4, 4, 5, 5] thresholds = [2, 5] # Calculate Gini Impurities gini_results = split_and_calculate_gini(dataset, thresholds) gini_results"},{"question":"Develop a function that calculates the longest increasing subsequence within an array of integers. The array may contain both positive and negative numbers, as well as duplicate values. Ensure your function exhibits optimal time complexity, leveraging dynamic programming where appropriate. Upon successful implementation, the function should return both the length of the longest increasing subsequence and an example of such a subsequence from the input array.","solution":"def longest_increasing_subsequence(arr): Calculates the longest increasing subsequence within an array of integers. Parameters: arr (list): A list of integers. Returns: tuple: A tuple containing the length of the longest increasing subsequence and the subsequence itself. if not arr: return 0, [] n = len(arr) dp = [1] * n prev = [-1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev[i] = j max_length = max(dp) idx = dp.index(max_length) lis = [] while idx != -1: lis.append(arr[idx]) idx = prev[idx] lis.reverse() return max_length, lis"},{"question":"Develop a program that takes a list of URLs and fetches their HTTP status codes. Your program should be able to handle cases where URLs are unreachable and should accurately report failures alongside successful responses. Additionally, ensure the program is optimized to handle a large list of URLs concurrently to minimize execution time. urls = [\\"https://www.google.com\\", \\"https://www.apple.com\\", \\"https://www.microsoft.com\\", ...]","solution":"import requests from concurrent.futures import ThreadPoolExecutor def fetch_status(url): Fetches the HTTP status code for a given URL. Handles exceptions for unreachable URLs. try: response = requests.get(url) return (url, response.status_code) except requests.RequestException: return (url, \'unreachable\') def fetch_status_codes(urls): Fetches HTTP status codes for a list of URLs concurrently. results = [] with ThreadPoolExecutor(max_workers=10) as executor: results = list(executor.map(fetch_status, urls)) return results"},{"question":"Write a function that takes a list of integers and returns a new list with all the prime numbers removed. The order of the elements should be preserved. Provide an efficient solution considering the computational complexity of checking for prime numbers.","solution":"def is_prime(n): if n < 2: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for divisor in range(3, max_divisor, 2): if n % divisor == 0: return False return True def remove_primes(lst): Returns a new list with all prime numbers removed. Parameters: lst (list): List of integers. Returns: list: New list with all prime numbers removed. return [num for num in lst if not is_prime(num)]"},{"question":"Using pandas, read a given CSV file containing sales data. The file has columns for \\"Date\\", \\"Product\\", \\"Region\\", and \\"Sales\\". Create a function that returns the total sales for each product in a specified region over a given date range. Your function should be efficient and handle possible errors, such as incorrect date formats or missing columns in the CSV file. Additionally, provide an erroneous piece of code from which you need to identify bugs and correct them to achieve the desired functionality.","solution":"import pandas as pd def total_sales_by_product(file_path, start_date, end_date, region): Returns total sales for each product in a specified region over a given date range. Parameters: file_path (str): Path to the CSV file. start_date (str): Start date in \\"YYYY-MM-DD\\" format. end_date (str): End date in \\"YYYY-MM-DD\\" format. region (str): Region to filter by. Returns: pandas.Series: Total sales for each product. try: # Read the CSV file df = pd.read_csv(file_path) # Check for required columns if not {\'Date\', \'Product\', \'Region\', \'Sales\'}.issubset(df.columns): raise ValueError(\\"CSV file is missing required columns.\\") # Convert Date column to datetime df[\'Date\'] = pd.to_datetime(df[\'Date\'], errors=\'coerce\') # Drop rows with invalid dates df = df.dropna(subset=[\'Date\']) # Filter by date range and region df_filtered = df[(df[\'Date\'] >= start_date) & (df[\'Date\'] <= end_date) & (df[\'Region\'] == region)] # Group by Product and sum Sales total_sales = df_filtered.groupby(\'Product\')[\'Sales\'].sum() return total_sales except Exception as e: print(f\\"Error: {e}\\") return pd.Series() # Erroneous code to identify bugs: # Incorrect: df[\'Date\'] = pd.to_datetime(df[\'Date\']) # This will raise an error for invalid dates # Missing column check: does not handle case if any column is missing from the CSV # Did not consider invalid date formats could lead to NaT, which can cause incorrect filtering"},{"question":"Create an algorithm in Python that takes a list of integers and returns a new list with each element in the original list duplicated consecutively. For instance, given the input list [1, 2, 3], the function should return [1, 1, 2, 2, 3, 3]. Ensure that your solution has a linear time complexity.","solution":"def duplicate_consecutively(lst): Returns a new list where each element in the original list is duplicated consecutively. Parameters: lst (list): A list of integers. Returns: list: A new list with each element duplicated. result = [] for item in lst: result.extend([item, item]) return result"},{"question":"Formulate an algorithm that utilizes the principles of Dynamic Programming to determine the longest increasing subsequence in a given array of integers, ensuring an efficient optimization of time complexity. Provide an implementation in a programming language of your choice.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 # Initialize the dp array where dp[i] represents the length of the longest increasing # subsequence that ends with arr[i] dp = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"**Context** You are tasked with developing a system for a library that tracks the borrowing and return of books by members. The purpose of this system is to help the library staff efficiently manage the inventory of books and track the activities of the members. Objectives 1. Implement a class to represent a Book with attributes for title, author, and ISBN. 2. Implement a class to represent a Member with attributes for name and member ID. 3. Develop a class to represent the Library, which includes: - A collection of books. - A collection of members. - Methods to add books, register members, lend books to members, and return books. # Requirements 1. Follow PEP8 guidelines in your implementation. 2. Ensure strong typing and explicit variable declaration. 3. Do not change the overall design or data structures noted in the given tasks. Data Structures and Interfaces ```mermaid classDiagram class Book { +str title +str author +str isbn +__init__(title: str, author: str, isbn: str) } class Member { +str name +str member_id +__init__(name: str, member_id: str) } class Library { -Dict[str, Book] books -Dict[str, Member] members -Dict[str, str] borrowed_books # Key: ISBN, Value: Member ID +__init__() +add_book(book: Book) +register_member(member: Member) +lend_book(isbn: str, member_id: str) +return_book(isbn: str) } ``` Task List 1. **Book Class**: - Implement the `Book` class with attributes for title, author, and ISBN. 2. **Member Class**: - Implement the `Member` class with attributes for name and member ID. 3. **Library Class**: - Implement the `Library` class with methods to add books, register members, lend books, and return books. Use appropriate data structures to manage books and members. Code: main.py ```python main.py from typing import Dict class Book: def __init__(self, title: str, author: str, isbn: str): self.title = title self.author = author self.isbn = isbn class Member: def __init__(self, name: str, member_id: str): self.name = name self.member_id = member_id class Library: def __init__(self): self.books: Dict[str, Book] = {} self.members: Dict[str, Member] = {} self.borrowed_books: Dict[str, str] = {} def add_book(self, book: Book): if book.isbn in self.books: raise ValueError(f\\"Book with ISBN {book.isbn} already exists.\\") self.books[book.isbn] = book def register_member(self, member: Member): if member.member_id in self.members: raise ValueError(f\\"Member with ID {member.member_id} already exists.\\") self.members[member.member_id] = member def lend_book(self, isbn: str, member_id: str): if isbn not in self.books: raise ValueError(f\\"Book with ISBN {isbn} does not exist.\\") if member_id not in self.members: raise ValueError(f\\"Member with ID {member_id} does not exist.\\") if isbn in self.borrowed_books: raise ValueError(f\\"Book with ISBN {isbn} is already borrowed.\\") self.borrowed_books[isbn] = member_id def return_book(self, isbn: str): if isbn not in self.borrowed_books: raise ValueError(f\\"Book with ISBN {isbn} is not borrowed.\\") del self.borrowed_books[isbn] # Example usage if __name__ == \\"__main__\\": library = Library() book1 = Book(\\"Book Title 1\\", \\"Author 1\\", \\"ISBN001\\") library.add_book(book1) member1 = Member(\\"Member 1\\", \\"ID001\\") library.register_member(member1) library.lend_book(\\"ISBN001\\", \\"ID001\\") print(f\\"Borrowed Books: {library.borrowed_books}\\") library.return_book(\\"ISBN001\\") print(f\\"Borrowed Books after return: {library.borrowed_books}\\") ``` # Instructions 1. Implement the `Book` and `Member` classes with the specified attributes. 2. Develop the `Library` class ensuring proper addition of books, registration of members, lending, and returning of books. 3. Ensure the implementation follows PEP8 guidelines and uses strong typing and explicit variable declaration. 4. Do not alter the given class and method names. These are part of the design you must adhere to.","solution":"from typing import Dict class Book: def __init__(self, title: str, author: str, isbn: str): self.title = title self.author = author self.isbn = isbn class Member: def __init__(self, name: str, member_id: str): self.name = name self.member_id = member_id class Library: def __init__(self): self.books: Dict[str, Book] = {} self.members: Dict[str, Member] = {} self.borrowed_books: Dict[str, str] = {} def add_book(self, book: Book): if book.isbn in self.books: raise ValueError(f\\"Book with ISBN {book.isbn} already exists.\\") self.books[book.isbn] = book def register_member(self, member: Member): if member.member_id in self.members: raise ValueError(f\\"Member with ID {member.member_id} already exists.\\") self.members[member.member_id] = member def lend_book(self, isbn: str, member_id: str): if isbn not in self.books: raise ValueError(f\\"Book with ISBN {isbn} does not exist.\\") if member_id not in self.members: raise ValueError(f\\"Member with ID {member_id} does not exist.\\") if isbn in self.borrowed_books: raise ValueError(f\\"Book with ISBN {isbn} is already borrowed.\\") self.borrowed_books[isbn] = member_id def return_book(self, isbn: str): if isbn not in self.borrowed_books: raise ValueError(f\\"Book with ISBN {isbn} is not borrowed.\\") del self.borrowed_books[isbn]"},{"question":"Given an nxm matrix filled with integers, write a function `find_peak` that finds a peak element in the matrix. An element is considered a peak if it is not smaller than its adjacent elements. For corner elements, consider only one adjacent element. Your function should return the row and column indices of one peak element in the matrix. **Function Signature:** ```python def find_peak(matrix: List[List[int]]) -> Tuple[int, int]: pass ``` # Input - A list of lists `matrix` where each sublist contains `m` integers, and there are `n` sublists in total representing the matrix. # Output - A tuple `(row, col)` representing the indices of a peak element in the matrix. # Constraints - 1 ≤ n, m ≤ 1000 - The matrix contains distinct integers. # Example ```python matrix = [ [10, 20, 15], [21, 30, 14], [7, 16, 32] ]` Output: (1, 1) # (1, 1) is 30, which is a peak element. ```","solution":"from typing import List, Tuple def find_peak(matrix: List[List[int]]) -> Tuple[int, int]: rows = len(matrix) cols = len(matrix[0]) def get_max_in_column(mid: int) -> int: max_row = 0 for row in range(rows): if matrix[row][mid] > matrix[max_row][mid]: max_row = row return max_row def find_peak_recursive(left: int, right: int) -> Tuple[int, int]: if left == right: row = get_max_in_column(left) return row, left mid = (left + right) // 2 max_row = get_max_in_column(mid) if matrix[max_row][mid] < matrix[max_row][mid + 1]: return find_peak_recursive(mid + 1, right) else: return find_peak_recursive(left, mid) return find_peak_recursive(0, cols - 1)"},{"question":"Write a function in Python that takes a string consisting of lowercase letters and returns the character that appears the most frequently. If there is a tie, return the character that comes first alphabetically. Example: - For the input `\\"abbccc\\"`, the output should be `\'c\'` because `\'c\'` appears three times, which is more than any other character. - For the input `\\"aabbbcccc\\"`, the output should be `\'c\'` because `\'c\'` appears four times.","solution":"def most_frequent_char(s): Returns the most frequently occurring character in the string s. If there is a tie, returns the character that comes first alphabetically. from collections import Counter if not s: return \'\' counter = Counter(s) most_frequent = max(counter.items(), key=lambda x: (x[1], -ord(x[0]))) return most_frequent[0]"},{"question":"Write a function that takes a string of lowercase alphabets and returns the character that appears the most frequently. In case of a tie, return the lexicographically smallest character. The function should have a linear time complexity.","solution":"def most_frequent_char(s): Returns the character that appears the most frequently in the given string. In case of a tie, returns the lexicographically smallest character. from collections import Counter if not s: return \\"\\" counter = Counter(s) most_frequent = min(counter.items(), key=lambda x: (-x[1], x[0])) return most_frequent[0]"},{"question":"def modify_list_with_sum(input_list): Given a list of integers, return a new list where each element at index i is the sum of all elements in the input list except the one at i. You are not allowed to use division in your solution. The function should have a linear runtime complexity. Example 1: Input: input_list = [1, 2, 3, 4] Output: [9, 8, 7, 6] Example 2: Input: input_list = [5, 3, 2, 1] Output: [6, 8, 9, 10] Constraints: * The length of the input list can range from 1 to 10^4 * Each element in the list can be a value between -10^5 and 10^5","solution":"def modify_list_with_sum(input_list): Given a list of integers, return a new list where each element at index i is the sum of all elements in the input list except the one at i. total_sum = sum(input_list) return [total_sum - x for x in input_list]"},{"question":"Write a Python function that receives a list of integers and a single integer value as inputs. The function should return the first pair of integers from the list that adds up to the given value. If no such pair exists, return an empty tuple. Your solution should focus on efficiency in terms of time complexity.","solution":"def find_pair_with_sum(numbers, target_sum): Returns the first pair of integers from the list that adds up to the given target_sum. If no such pair exists, returns an empty tuple. seen_numbers = set() for number in numbers: complement = target_sum - number if complement in seen_numbers: return (complement, number) seen_numbers.add(number) return ()"},{"question":"Write a Python program that defines a class `Rectangle` with attributes `length` and `width`. Include methods to calculate and print both the perimeter and area of the rectangle. Create an instance of the class and demonstrate both methods on the instance. ```python class Rectangle: def __init__(self, length, width): self.length = length self.width = width def calculate_perimeter(self): perimeter = 2 * (self.length + self.width) print(\\"The perimeter of the rectangle =\\", perimeter) def calculate_area(self): area = self.length * self.width print(\\"The area of the rectangle =\\", area) rect = Rectangle(4, 7) rect.calculate_perimeter() rect.calculate_area() ```","solution":"class Rectangle: Class to represent a rectangle with methods to calculate its perimeter and area. def __init__(self, length, width): Initialize the rectangle with length and width. self.length = length self.width = width def calculate_perimeter(self): Calculate and return the perimeter of the rectangle. return 2 * (self.length + self.width) def calculate_area(self): Calculate and return the area of the rectangle. return self.length * self.width # Example instance rect = Rectangle(4, 7) print(\\"Perimeter:\\", rect.calculate_perimeter()) print(\\"Area:\\", rect.calculate_area())"},{"question":"Implement a function that will calculate the most frequently occurring character in a given string `s`. If there are multiple characters with the same highest frequency, return the lexicographically smallest one. Additionally, return the number of occurrences of this character. Example 1: Input: s = \\"aabbbcc\\" Output: (\'b\', 3) Explanation: The character \'b\' occurs 3 times, which is the highest frequency. Example 2: Input: s = \\"helloworld\\" Output: (\'l\', 3) Explanation: Both \'l\' and \'o\' occur with the highest frequency of 3. Since \'l\' is lexicographically smaller than \'o\', \'l\' is returned. Example 3: Input: s = \\"apple\\" Output: (\'p\', 2) Explanation: The character \'p\' occurs 2 times, which is the highest frequency. Constraints: * `1 <= s.length <= 10^6` * `s` contains only lowercase English letters.","solution":"def most_frequent_char(s): Returns the most frequently occurring character in the string `s` and the number of its occurrences. If there are multiple characters with the highest frequency, returns the lexicographically smallest one. from collections import Counter # Count frequency of each character count = Counter(s) # Find the maximum frequency max_frequency = max(count.values()) # Find the lexicographically smallest character with the maximum frequency most_frequent = min(char for char, freq in count.items() if freq == max_frequency) return most_frequent, max_frequency"},{"question":"Write a Python function named \'substring_combinations\' that takes in two parameters: a string `s` and an integer `k`. The function should return a list of all distinct substrings of `s` that have exactly `k` characters. The substrings in the returned list should be in the order they appear in the original string. If the input string `s` is empty or if `k` is greater than the length of `s`, return an empty list. If the input for `s` is not a string or `k` is not an integer, the function should raise a TypeError.","solution":"def substring_combinations(s, k): Returns a list of all distinct substrings of `s` with exactly `k` characters. :param s: Input string :param k: Length of the substrings :return: List of distinct substrings with length `k` if not isinstance(s, str): raise TypeError(\\"The input `s` must be a string\\") if not isinstance(k, int): raise TypeError(\\"The input `k` must be an integer\\") if k > len(s) or k <= 0 or len(s) == 0: return [] seen = set() result = [] for i in range(len(s) - k + 1): substring = s[i:i + k] if substring not in seen: seen.add(substring) result.append(substring) return result"},{"question":"Given the array of integers, write a Python function to find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. Additionally, refactor the function to return a tuple containing both the largest sum and the start and end indices of the subarray. For example: ```python def max_subarray_sum(nums): # Your code here pass print(max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4])) # Output: (6, 3, 6) because [4,-1,2,1] has largest sum = 6 ``` Hint: Utilize Kadane\'s algorithm to find the maximum sum efficiently.","solution":"def max_subarray_sum(nums): Returns a tuple containing the largest sum and the start and end indices of the subarray with the largest sum. if not nums: return (0, -1, -1) max_sum = current_sum = nums[0] start = end = s = 0 for i in range(1, len(nums)): if current_sum < 0: current_sum = nums[i] s = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return (max_sum, start, end)"},{"question":"Design a function that will rotate the elements of a given list to the right by `k` positions. The function should modify the list in place and return the same list. Ensure that your function handles the case where `k` is larger than the length of the list and works with both positive and negative values of k. For example, given the input: numbers = [1, 2, 3, 4, 5], k = 2 Expected Output: [4, 5, 1, 2, 3] Another example with negative k value: numbers = [1, 2, 3, 4, 5], k = -2 Expected Output: [3, 4, 5, 1, 2]","solution":"def rotate_list(nums, k): Rotate the list nums to the right by k positions in-place. The function returns the modified list. if not nums: return nums # Handle empty list n = len(nums) k = k % n # Normalize k to fall within the bounds of the list length # Rotate by reversing parts of the list nums[:] = nums[-k:] + nums[:-k] return nums"},{"question":"Write a function that evaluates if a given string can be segmented into a sequence of one or more valid dictionary words. The dictionary is provided as a set of words. The function should return True if the string can be segmented, otherwise, it should return False. Ensure the function handles edge cases efficiently, including an empty string and scenarios where the string cannot be segmented using the given dictionary. Provide the solution and explain the approach taken. ```python def can_segment_string(s, word_dict): Determines if the given string can be segmented into a sequence of one or more valid dictionary words. Args: s (str): The input string. word_dict (set): A set of valid dictionary words. Returns: bool: True if the string can be segmented, False otherwise. # Your code here # Example usage: # can_segment_string(\\"applepie\\", {\\"apple\\", \\"pie\\", \\"pear\\"}) should return True # can_segment_string(\\"applepies\\", {\\"apple\\", \\"pie\\", \\"pear\\"}) should return False ```","solution":"def can_segment_string(s, word_dict): Determines if the given string can be segmented into a sequence of one or more valid dictionary words. Args: s (str): The input string. word_dict (set): A set of valid dictionary words. Returns: bool: True if the string can be segmented, False otherwise. if not s: return False n = len(s) dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in word_dict: dp[i] = True break return dp[n]"},{"question":"# Objective Write a function that takes a nested list of integers and returns a new list in which all the integers are flattened to a single level. Use a recursive approach to solve the problem. # Function signature ```python def flatten_list(nested_list: list) -> list: This function takes a nested list of integers and returns a new list with all the integers flattened to a single level. :param nested_list: List of nested integers :return: A flattened list of integers Example: >>> flatten_list([1, [2, 3], [4, [5, 6]], 7]) [1, 2, 3, 4, 5, 6, 7] >>> flatten_list([[1, 2, [3]], 4]) [1, 2, 3, 4] >>> flatten_list([1, [2, [3, [4, [5]]]]]) [1, 2, 3, 4, 5] pass ``` # Guidelines 1. Avoid using any external libraries and focus on a recursive solution. 2. Handle cases where the nested list might be deeply nested. 3. Ensure that the function can handle empty lists and return an appropriate result.","solution":"def flatten_list(nested_list): This function takes a nested list of integers and returns a new list with all the integers flattened to a single level. :param nested_list: List of nested integers :return: A flattened list of integers flat_list = [] def _flatten(sublist): for item in sublist: if isinstance(item, list): _flatten(item) else: flat_list.append(item) _flatten(nested_list) return flat_list"},{"question":"Given two strings, write a function called `find_common_subsequences` that finds all common subsequences between the two strings. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Your function should return a list of all common subsequences sorted by their length in descending order. If there are multiple subsequences with the same length, sort them lexicographically. Test your function using unit tests for various edge cases, ensuring it handles cases such as empty strings, identical strings, and no common subsequences effectively. The solution should have an optimal time complexity.","solution":"from itertools import combinations def generate_subsequences(s): Generate all possible subsequences of a given string. subsequences = set() for i in range(1, len(s) + 1): for comb in combinations(s, i): subsequences.add(\'\'.join(comb)) return subsequences def find_common_subsequences(str1, str2): Finds all common subsequences between two strings and returns them sorted by length in descending order. If there are multiple subsequences with the same length, sort them lexicographically. subsequences1 = generate_subsequences(str1) subsequences2 = generate_subsequences(str2) common_subsequences = subsequences1.intersection(subsequences2) sorted_common_subsequences = sorted(common_subsequences, key=lambda x: (-len(x), x)) return sorted_common_subsequences"},{"question":"Write a function to compute the optimal meeting point for a given list of n points on a linear path. Each point represents a person standing on a number line. The optimal meeting point is the point that minimizes the sum of distances all people need to travel to reach it. Assume the input list of points is sorted in non-decreasing order. **Function Signature:** ```python def optimal_meeting_point(points: List[int]) -> int: ``` **Input:** - `points`: A list of integers where each integer represents the position of a person on a number line. The list is sorted in non-decreasing order. (1 ≤ n ≤ 10^5) **Output:** - The function should return an integer which is the optimal meeting point on the number line. **Example:** ```python assert optimal_meeting_point([1, 2, 6, 8]) == 6 assert optimal_meeting_point([1, 2, 3, 4]) == 2 ```","solution":"from typing import List def optimal_meeting_point(points: List[int]) -> int: Computes the optimal meeting point for a given list of n points on a linear path. The optimal meeting point is the point that minimizes the sum of distances all people need to travel to reach it. Args: points (List[int]): A list of integers where each integer represents the position of a person on a number line. Returns: int: The optimal meeting point on the number line. n = len(points) # The optimal meeting point is the median of the list if n % 2 == 1: return points[n // 2] else: return points[n // 2 - 1]"},{"question":"Write a function that takes a list of integers and returns a new list with the integers sorted in non-decreasing order, but without using built-in sorting functions or methods. The function should implement a sorting algorithm of your choice (e.g., bubble sort, insertion sort).","solution":"def bubble_sort(lst): Returns a new list with the integers sorted in non-decreasing order using the bubble sort algorithm. n = len(lst) sorted_list = lst[:] for i in range(n): for j in range(0, n-i-1): if sorted_list[j] > sorted_list[j+1]: sorted_list[j], sorted_list[j+1] = sorted_list[j+1], sorted_list[j] return sorted_list"},{"question":"Develop a function that calculates the factorial of a given non-negative integer. Additionally, optimize the function to handle large input values and avoid integer overflow by using memoization to store intermediate results. Ensure that the function returns the result as a string to handle very large numbers effectively. For example, the factorial of 50 should be returned as \\"30414093201713378043612608166064768844377641568960512000000000000\\".","solution":"def factorial(n, memo={}): Returns the factorial of a non-negative integer n. Uses memoization to store intermediate results. Returns the result as a string to handle very large numbers effectively. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n in memo: return memo[n] if n <= 1: return \\"1\\" result = int(factorial(n - 1, memo)) * n memo[n] = str(result) return memo[n]"},{"question":"Implement a function `longest_consecutive_subsequence` that takes an array of integers and returns the length of the longest consecutive elements sequence. Your solution should have a time complexity of O(n). **Example:** ``` Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. ``` **Function Signature:** `def longest_consecutive_subsequence(nums: List[int]) -> int` **Constraints:** - Do not use any in-built sorting functions. - The array may contain duplicates. - The elements in the array are not necessarily consecutive integers. - Solution should be optimized for time complexity.","solution":"def longest_consecutive_subsequence(nums): Returns the length of the longest consecutive elements sequence in nums. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: # Start of a sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Using the provided data, calculate and return the median house price when multiple houses with varying prices are given. You should also handle dynamic price updates in a real-time system. Sample Python function template: ```python class RealEstateMarket: def __init__(self): # Initialize the RealEstateMarket with an empty list of house prices self.house_prices = [] def add_house(self, price: int): Adds a new house with its price to the market. # Implement logic to add the house price to the internal list pass def find_median_price(self) -> float: Returns the median house price in the current market. # Implement the logic to calculate and return the median house price pass ``` Implement the `add_house` method to add house prices to the market. Implement the `find_median_price` method to compute the median house price. # Example: ```python market = RealEstateMarket() market.add_house(300000) market.add_house(150000) print(market.find_median_price()) # Output: 225000.0 market.add_house(600000) print(market.find_median_price()) # Output: 300000.0 market.add_house(700000) market.add_house(100000) print(market.find_median_price()) # Output: 300000.0 ``` Note: - You should handle both odd and even numbers of house prices appropriately. - Think about the efficiency of your implementation as the number of houses may grow over time.","solution":"from bisect import insort class RealEstateMarket: def __init__(self): # Initialize the RealEstateMarket with an empty list of house prices self.house_prices = [] def add_house(self, price: int): Adds a new house with its price to the market. # Use insort to keep the list sorted upon each insertion insort(self.house_prices, price) def find_median_price(self) -> float: Returns the median house price in the current market. n = len(self.house_prices) if n == 0: return 0.0 # handling the case when no houses are added if n % 2 == 1: return float(self.house_prices[n // 2]) else: mid1 = self.house_prices[n // 2 - 1] mid2 = self.house_prices[n // 2] return (mid1 + mid2) / 2.0"},{"question":"Implement a function that takes a list of integers and an integer `M` as input. The function should return a new list where each element in the original list is squared, then decremented by `M`. Example: ```python yourList = [2, 3, 4, 5] M = 3 ``` Output: ```python [1, 6, 13, 22] ```","solution":"def transform_list(int_list, M): Transforms a list by squaring each element and then decrementing by M. Parameters: int_list (list of int): The list of integers to transform. M (int): The value to decrement after squaring each element. Returns: list of int: A new list with each element squared and then decremented by M. return [(x**2) - M for x in int_list]"},{"question":"Compose a function that identifies the second smallest and second largest elements within an array of distinct numerical integers. [8, 3, 1, 7, 6, 4]","solution":"def second_smallest_and_largest(arr): Returns the second smallest and second largest elements from an array of distinct numerical integers. if len(arr) < 2: raise ValueError(\\"Array must contain at least two distinct elements.\\") sorted_arr = sorted(arr) return (sorted_arr[1], sorted_arr[-2])"},{"question":"Create a function to perform a left rotation on an array. A left rotation operation on an array shifts each of the array\'s elements one unit to the left. The first element of the array moves to the end. The function should accept two arguments: the array and the number of rotations to be performed. If the number of rotations exceeds the array length, it should continue rotating in a cyclic manner (e.g., rotating by 7 is equivalent to rotating by 1 for an array of length 6). Here is the array for your reference: arr = [1, 2, 3, 4, 5] and rotations = 2 Your function should return: [3, 4, 5, 1, 2] Additionally, analyze the time complexity of your solution.","solution":"def left_rotate(arr, rotations): Performs left rotation on an array by a specified number of rotations. :param arr: List[int] - The array to be rotated. :param rotations: int - The number of rotations to be performed. :return: List[int] - The array after rotations. n = len(arr) if n == 0: return arr rotations = rotations % n # Ensure the number of rotations is within the bounds of array length return arr[rotations:] + arr[:rotations] # Time complexity: O(n) - Where n is the length of the array. # This is because slicing and concatenation each take O(n)."},{"question":"Develop a restaurant recommendation system using collaborative filtering based on user reviews. The provided dataset contains entries with user IDs, restaurant IDs, and ratings (on a scale of 1 to 5) assigned by various users. Your task is to predict the rating a new user might give to a particular restaurant by analyzing patterns in the review data. Implement an algorithm to suggest the top 3 restaurant recommendations for this new user based on similar user preferences. Ensure to account for potential data sparsity and implement appropriate measures to handle it.","solution":"import numpy as np import pandas as pd from sklearn.metrics.pairwise import cosine_similarity from sklearn.impute import SimpleImputer class RestaurantRecommender: def __init__(self, ratings): self.ratings = ratings self.user_similarity = None self.restaurants_mean_ratings = None def fit(self): ratings_df = pd.DataFrame(self.ratings) pivot_table = ratings_df.pivot(index=\'user_id\', columns=\'restaurant_id\', values=\'rating\').fillna(0) self.user_similarity = cosine_similarity(pivot_table) self.user_similarity_df = pd.DataFrame(self.user_similarity, index=pivot_table.index, columns=pivot_table.index) self.restaurants_mean_ratings = pivot_table.mean(axis=0) def recommend(self, user_id, top_n=3): if self.user_similarity is None: raise ValueError(\\"Model has not been fit yet.\\") similar_users = self.user_similarity_df[user_id].sort_values(ascending=False) similar_users = similar_users[similar_users.index != user_id] similar_ratings = pd.DataFrame(self.ratings) similar_ratings = similar_ratings[similar_ratings[\'user_id\'].isin(similar_users.index)] avg_rating = similar_ratings.groupby(\'restaurant_id\')[\'rating\'].mean() recommendations = avg_rating.sort_values(ascending=False).head(top_n) return recommendations.index.tolist() # Example usage: # ratings = [ # {\'user_id\': 1, \'restaurant_id\': 101, \'rating\': 5}, # {\'user_id\': 1, \'restaurant_id\': 102, \'rating\': 3}, # {\'user_id\': 2, \'restaurant_id\': 101, \'rating\': 4}, # {\'user_id\': 2, \'restaurant_id\': 103, \'rating\': 2}, # {\'user_id\': 3, \'restaurant_id\': 101, \'rating\': 3}, # {\'user_id\': 3, \'restaurant_id\': 104, \'rating\': 5}, # # more ratings... # ] # recommender = RestaurantRecommender(ratings) # recommender.fit() # print(recommender.recommend(user_id=1))"},{"question":"Write a Python function to generate the first n numbers in the Fibonacci sequence. The function should accept an integer n and return a list containing the first n Fibonacci numbers.","solution":"def fibonacci_sequence(n): Generates the first n numbers in the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: next_value = sequence[-1] + sequence[-2] sequence.append(next_value) return sequence"},{"question":"Write a function that accepts two parameters: a string representing a mathematical expression and an integer representing the result\'s precision. The function should evaluate the mathematical expression and return the result rounded to the specified number of decimal places. The function should also handle any invalid input gracefully by returning an appropriate error message. Ensure that all computations are secure and avoid using the eval function for evaluating the expression. Additionally, include support for basic arithmetic operations: addition, subtraction, multiplication, and division.","solution":"import re import operator def evaluate_expression(expression, precision): Evaluates a mathematical expression and returns the result rounded to the specified number of decimal places. Handles invalid input gracefully by returning an appropriate error message. Parameters: expression (str): A string representing a mathematical expression. precision (int): An integer representing the result\'s precision. Returns: float: The result of the evaluated expression rounded to the specified precision. str: An error message for invalid input. def parse_expression(expr): tokens = re.findall(r\\"d+.?d*|[()+*/-]\\", expr) return tokens def shunting_yard(parsed_expression): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] operators = [] for token in parsed_expression: if token.isnumeric() or re.match(r\\"d+.d*\\", token): output.append(float(token)) elif token in precedence: while (operators and operators[-1] != \'(\' and precedence.get(token, 0) <= precedence.get(operators[-1], 0)): output.append(operators.pop()) operators.append(token) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() while operators: output.append(operators.pop()) return output def evaluate_rpn(rpn): stack = [] for token in rpn: if type(token) is float: stack.append(token) elif token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(a / b) return stack[0] try: parsed_expression = parse_expression(expression) rpn = shunting_yard(parsed_expression) result = evaluate_rpn(rpn) return round(result, precision) except Exception as e: return \\"Invalid input\\""},{"question":"Write a function that takes a list of integers and returns the list sorted in non-decreasing order using the Merge Sort algorithm. Demonstrate how the function works with a test list. Include error handling for cases where the input is not a list or the list contains non-integer elements.","solution":"def merge_sort(arr): Sorts the list of integers in non-decreasing order using the Merge Sort algorithm. Includes error handling for cases where the input is not a list or the list contains non-integer elements. if not isinstance(arr, list): raise TypeError(\\"Input should be of type list\\") for item in arr: if not isinstance(item, int): raise ValueError(\\"All elements of the list should be integers\\") if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted lists into a single sorted list. sorted_list = [] while left and right: if left[0] < right[0]: sorted_list.append(left.pop(0)) else: sorted_list.append(right.pop(0)) sorted_list.extend(left or right) return sorted_list"},{"question":"Given a list of integers, write a function that returns the indices of the two numbers whose sum equals a given target value. You may assume that each input would have exactly one solution, and you may not use the same element twice. ``` nums = [2, 7, 11, 15] target = 9 ``` Output: [0, 1]","solution":"def two_sum(nums, target): Returns the indices of the two numbers in nums whose sum equals target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Write a function that takes two strings, `str1` and `str2`, and returns the length of their longest common subsequence. For example, given the strings \\"AGGTAB\\" and \\"GXTXAYB\\", the highest length of subsequence that can be found in both is 4, for the subsequence \\"GTAB\\". Requirements: - The solution should have a time complexity of O(n*m), where `n` is the length of `str1` and `m` is the length of `str2`. - Clearly explain your approach and the logic behind it. - If possible, optimize the space complexity without sacrificing the time complexity. Function Signature: ```python def longest_common_subsequence(str1: str, str2: str) -> int: pass ``` Example: ```python str1 = \\"AGGTAB\\" str2 = \\"GXTXAYB\\" assert longest_common_subsequence(str1, str2) == 4 str1 = \\"ABCBDAB\\" str2 = \\"BDCAB\\" assert longest_common_subsequence(str1, str2) == 4 ```","solution":"def longest_common_subsequence(str1: str, str2: str) -> int: Returns the length of the longest common subsequence between two strings. The function uses dynamic programming to achieve this with a time complexity of O(n*m). n = len(str1) m = len(str2) # Create a 2D array to store the lengths of longest common subsequence # Initialize the array with zeros dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill the dp array for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The value at dp[n][m] will be the length of the longest common subsequence return dp[n][m]"},{"question":"Design a Python function that computes the longest increasing subsequence from a given list of integers. The function should return the length of this subsequence. An increasing subsequence is a sequence of numbers where each number is greater than the preceding one. For example, in the list [10, 9, 2, 5, 3, 7, 101, 18], the length of the longest increasing subsequence is 4, corresponding to the subsequence [2, 3, 7, 101]. Your implementation should have a time complexity better than O(n^2). **Function Signature:** ```python def longest_increasing_subsequence(nums: List[int]) -> int: # Your code here ``` **Input:** - `nums` (List[int]): A list of integers. **Output:** - Returns an integer representing the length of the longest increasing subsequence. **Constraints:** - The length of the list `nums` will be in the range [0, 2500]. - The value of each element in `nums` will be in the range [-10^4, 10^4]. **Example:** ```python print(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18])) # Output: 4 print(longest_increasing_subsequence([0, 1, 0, 3, 2, 3])) # Output: 4 print(longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7])) # Output: 1 ```","solution":"from typing import List import bisect def longest_increasing_subsequence(nums: List[int]) -> int: Returns the length of the longest increasing subsequence in the list of integers. if not nums: return 0 dp = [] for num in nums: i = bisect.bisect_left(dp, num) if i == len(dp): dp.append(num) else: dp[i] = num return len(dp)"},{"question":"Write a Python function that takes a list of integers and a target number as input. The function should check whether there are any two distinct numbers in the list that add up to the target number. If such a pair exists, return True, otherwise return False. Consider the list to be unsorted and the solution should have O(n) time complexity.","solution":"def has_pair_with_sum(nums, target): Checks if there are two distinct numbers in the list that add up to the target number. Args: nums (list of int): List of integers. target (int): Target sum. Returns: bool: True if there exists a pair with sum equal to target, otherwise False. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"Create a program that simulates a simple book catalog. Each book in the catalog should have a unique identifier (ID), a title, an author, and a publication year. Your program should be able to add new books, retrieve the details of a book given its ID, and delete a book from the catalog by its ID. The catalog should be able to hold up to 1000 books. Additionally, when retrieving the book details, your program should return the details in a formatted string indicating the ID, title, author, and publication year. Example Input: Add book: (1, \\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960) Add book: (2, \\"1984\\", \\"George Orwell\\", 1949) Retrieve book: (2) Delete book: (1) Example Output: Book details: ID=2, Title=1984, Author=George Orwell, Year=1949 Note: You do not need to account for ID conflicts or invalid operations (e.g., deleting a non-existent book). Assume all input operations are valid.","solution":"class BookCatalog: def __init__(self): self.books = {} def add_book(self, book_id, title, author, year): if len(self.books) < 1000: self.books[book_id] = {\\"title\\": title, \\"author\\": author, \\"year\\": year} def retrieve_book(self, book_id): if book_id in self.books: book = self.books[book_id] return f\\"Book details: ID={book_id}, Title={book[\'title\']}, Author={book[\'author\']}, Year={book[\'year\']}\\" return \\"Book not found\\" def delete_book(self, book_id): if book_id in self.books: del self.books[book_id]"},{"question":"Create a function that takes a positive integer `n` and returns a list containing the first `n` numbers in the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. **For example:** ```python def fibonacci_sequence(n): This function takes an integer n as input and returns a list containing the first n numbers in the Fibonacci sequence. >>> fibonacci_sequence(1) [0] >>> fibonacci_sequence(2) [0, 1] >>> fibonacci_sequence(5) [0, 1, 1, 2, 3] >>> fibonacci_sequence(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ```","solution":"def fibonacci_sequence(n): This function takes an integer n as input and returns a list containing the first n numbers in the Fibonacci sequence. if n <= 0: return [] fib_seq = [0] if n == 1: return fib_seq fib_seq.append(1) for i in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Create a Python function that accepts a list of integers and returns a new list where each element is the difference between the smallest element and the current element in the original list. The function should handle edge cases, such as when the list is empty or contains non-integer values, by raising an appropriate exception. Additionally, the function should ensure no negative differences are included in the resultant list.","solution":"def differences_from_min(lst): Returns a new list where each element is the difference between the smallest element in the list and the current element in the original list. Raises an exception for empty lists or lists with non-integer values. if not lst: raise ValueError(\\"The list should not be empty.\\") if not all(isinstance(x, int) for x in lst): raise ValueError(\\"The list should contain only integers.\\") min_value = min(lst) return [max(0, x - min_value) for x in lst]"},{"question":"Write a function that receives a list of integers and returns a dictionary with the frequency of each integer. The function should ignore any elements that are not integers. For example: ```python def count_frequency(elements): pass # Example usage: elements = [1, 2, \'a\', 1, 3, 4, 2] # The function should return: {1: 2, 2: 2, 3: 1, 4: 1} ```","solution":"def count_frequency(elements): Returns a dictionary with the frequency of each integer in the list. Ignores any elements that are not integers. frequency = {} for element in elements: if isinstance(element, int): if element in frequency: frequency[element] += 1 else: frequency[element] = 1 return frequency"},{"question":"--- Implementation approach We will use Django as the main framework to leverage its built-in support for user authentication and session management, which aligns with the need for integration with Google and Facebook logins. For real-time messaging, we\'ll integrate Django with Django Channels to provide WebSocket support. We will use Django REST Framework (DRF) to create RESTful APIs for the messaging features and integrate third-party libraries like django-allauth for social authentication. The front end will be built using React, providing a responsive and dynamic user interface. For multimedia messaging, we will use AWS S3 to store and serve media files efficiently. Python package name ```python \\"chat_app\\" ``` File list ```python [ \\"main.py\\", \\"chat_app/__init__.py\\", \\"chat_app/settings.py\\", \\"chat_app/urls.py\\", \\"chat_app/asgi.py\\", \\"chat_app/wsgi.py\\", \\"chat_app/authentication/__init__.py\\", \\"chat_app/authentication/admin.py\\", \\"chat_app/authentication/apps.py\\", \\"chat_app/authentication/models.py\\", \\"chat_app/authentication/views.py\\", \\"chat_app/authentication/serializers.py\\", \\"chat_app/authentication/urls.py\\", \\"chat_app/chat/__init__.py\\", \\"chat_app/chat/admin.py\\", \\"chat_app/chat/apps.py\\", \\"chat_app/chat/models.py\\", \\"chat_app/chat/views.py\\", \\"chat_app/chat/serializers.py\\", \\"chat_app/chat/consumers.py\\", \\"chat_app/chat/routing.py\\", \\"chat_app/chat/urls.py\\", \\"chat_app/templates/base.html\\", \\"chat_app/templates/chat.html\\", \\"chat_app/static/css/styles.css\\", \\"chat_app/static/js/chat.js\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class User { +int id +str username +str email } class ChatRoom { +int id +str name +DateTime created_at } class Message { +int id +int sender_id +int chatroom_id +str content +DateTime timestamp +bool is_read } User \\"1\\" -- \\"0..*\\" ChatRoom : participates ChatRoom \\"1\\" -- \\"0..*\\" Message : contains class CreateUserView { +create_user(request: HttpRequest) : JsonResponse } class LoginUserView { +login_user(request: HttpRequest) : JsonResponse } class ChatRoomView { +list_chatrooms(request: HttpRequest) : JsonResponse +create_chatroom(request: HttpRequest) : JsonResponse +get_chatroom(request: HttpRequest, id: int) : JsonResponse } class MessageView { +list_messages(request: HttpRequest, chatroom_id: int) : JsonResponse +send_message(request: HttpRequest, chatroom_id: int) : JsonResponse } ``` Program call flow ```mermaid sequenceDiagram participant U as User participant A as API participant DB as Database U->>A: POST /auth/register (username, email, password) A->>DB: INSERT INTO User DB-->>A: User created A-->>U: 201 Created U->>A: POST /auth/login (username, password) A->>DB: SELECT User by username and password DB-->>A: User found A-->>U: 200 OK with token U->>A: GET /chatrooms A->>DB: SELECT * FROM ChatRoom DB-->>A: List of ChatRooms A-->>U: 200 OK with chatrooms list U->>A: POST /chatrooms (name) A->>DB: INSERT INTO ChatRoom DB-->>A: ChatRoom created A-->>U: 201 Created with chatroom details U->>A: GET /chatrooms/:id/messages A->>DB: SELECT * FROM Message WHERE chatroom_id=:id DB-->>A: List of Messages A-->>U: 200 OK with messages list U->>A: POST /chatrooms/:id/messages (content) A->>DB: INSERT INTO Message (sender_id, chatroom_id, content) DB-->>A: Message created A-->>U: 201 Created with message details ``` Anything UNCLEAR The requirement is clear to me. ---","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Create a function that takes a dictionary where keys are student names and values are their grades, and returns a list of student names who have grades equal to or above 70, sorted in descending order of their grades. {\\"John\\": 85, \\"Jane\\": 92, \\"Doe\\": 50, \\"Alice\\": 70}","solution":"def get_students_with_high_grades(grades): Returns a list of student names who have grades equal to or above 70, sorted in descending order of their grades. Parameters: grades (dict): A dictionary where keys are student names and values are their grades. Returns: list: A list of student names with grades equal to or above 70, sorted in descending order of their grades. high_grades_students = {student: grade for student, grade in grades.items() if grade >= 70} sorted_students = sorted(high_grades_students, key=high_grades_students.get, reverse=True) return sorted_students"},{"question":"Create a function that takes a list of integers and returns a new list where all the elements are squared and the order is reversed. Ensure the function works efficiently with large datasets. For example, given the input `[1, 2, 3, 4, 5]`, the function should return `[25, 16, 9, 4, 1]`.","solution":"def square_and_reverse(lst): Takes a list of integers, squares each element and returns a new list with the squared elements in reversed order. Parameters: lst (list): A list of integers Returns: list: A new list with squared elements in reversed order return [x ** 2 for x in lst][::-1]"},{"question":"Write a Python function `is_palindrome(s: str) -> bool` that takes a string `s` as input and returns `True` if `s` is a palindrome, and `False` otherwise. Consider only alphanumeric characters and ignore cases. For example, the input `\\"A man, a plan, a canal: Panama\\"` should return `True` and the input `\\"race a car\\"` should return `False`.","solution":"def is_palindrome(s: str) -> bool: Returns True if the input string s is a palindrome, otherwise False. Considers only alphanumeric characters and ignores cases. import re # Remove non-alphanumeric characters and convert to lower case cleaned_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Compare the cleaned string with its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"You are tasked with writing a function that takes in a list of strings and returns a dictionary where the keys are the strings from the list, and the values are the number of times each string appears in the list. Additionally, your function should be case-insensitive, meaning \'Apple\' and \'apple\' should be considered the same. # Function Signature ```python def count_strings(strings: List[str]) -> Dict[str, int]: pass ``` # Input - `strings` (List[str]): A list of strings, which may contain both uppercase and lowercase characters. The list is non-empty and can contain duplicates. # Output - Dict[str, int]: A dictionary with strings as keys and their respective counts as values. All keys should be in lowercase. # Example ```python strings = [\\"apple\\", \\"Banana\\", \\"apple\\", \\"banana\\", \\"Apple\\"] assert count_strings(strings) == {\\"apple\\": 3, \\"banana\\": 2} ```","solution":"from typing import List, Dict def count_strings(strings: List[str]) -> Dict[str, int]: Returns a dictionary with the count of each string in the list, case-insensitively. count_dict = {} for s in strings: lower_s = s.lower() if lower_s in count_dict: count_dict[lower_s] += 1 else: count_dict[lower_s] = 1 return count_dict"},{"question":"Write a Python function that accepts a list of integers and returns the number of sublists (contiguous) that sum to zero. For example, given the input list `[1, -1, 2, -2, 3, 0]`, the function should return `4` because the sublists `[1, -1]`, `[2, -2]`, `[-2, 2, 0]`, and `[0]` all sum to zero.","solution":"def count_zero_sum_sublists(lst): Returns the number of sublists (contiguous) within the input list that sums to zero. zero_sum_count = 0 prefix_sum = 0 prefix_sum_dict = {0: 1} for num in lst: prefix_sum += num if prefix_sum in prefix_sum_dict: zero_sum_count += prefix_sum_dict[prefix_sum] prefix_sum_dict[prefix_sum] += 1 else: prefix_sum_dict[prefix_sum] = 1 return zero_sum_count"},{"question":"Using Python and the Pandas library, create a DataFrame containing the data for a company\'s employees, including columns for \'Name\', \'Age\', \'Department\', and \'Salary\'. The data should include at least 10 employees. Then, write a function that calculates the average salary of employees within each department and returns a new DataFrame with the department names and their corresponding average salaries. Ensure to handle any missing salary data by filling it with the average salary of all employees before performing the calculation.","solution":"import pandas as pd def create_employee_df(): data = { \'Name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Eva\', \'Frank\', \'Grace\', \'Hannah\', \'Ian\', \'Jack\'], \'Age\': [25, 30, 45, 35, 28, 40, 50, 23, 33, 41], \'Department\': [\'HR\', \'Engineering\', \'Engineering\', \'HR\', \'Finance\', \'Engineering\', \'Finance\', \'HR\', \'Engineering\', \'Finance\'], \'Salary\': [50000, 60000, 80000, 45000, 52000, None, 65000, 47000, 72000, None] } return pd.DataFrame(data) def calculate_average_salary_by_department(df): average_salary = df[\'Salary\'].mean() df[\'Salary\'].fillna(average_salary, inplace=True) result = df.groupby(\'Department\')[\'Salary\'].mean().reset_index() result.rename(columns={\'Salary\': \'AverageSalary\'}, inplace=True) return result"},{"question":"Write a function, `sort_and_count_vowels(s)`, that takes a string `s` as input, sorts the string in alphabetical order, and returns the count of each vowel (\'a\', \'e\', \'i\', \'o\', \'u\') in the sorted string. The function should ignore case, i.e., treat \'A\' and \'a\' as the same vowel. The output should be a dictionary with vowels as keys and their counts as values. For example: ``` sort_and_count_vowels(\\"Hello World!\\") => {\'a\': 0, \'e\': 1, \'i\': 0, \'o\': 2, \'u\': 0} sort_and_count_vowels(\\"Programming is fun!\\") => {\'a\': 1, \'e\': 0, \'i\': 2, \'o\': 1, \'u\': 1} sort_and_count_vowels(\\"Alphabetical\\") => {\'a\': 3, \'e\': 1, \'i\': 1, \'o\': 0, \'u\': 0} ```","solution":"def sort_and_count_vowels(s): Takes a string s as input, sorts the string in alphabetical order, and returns the count of each vowel (\'a\', \'e\', \'i\', \'o\', \'u\') in the sorted string. The function treats \'A\' and \'a\' (and other vowels) as the same vowel. :param s: Input string :return: Dictionary with vowels as keys and their counts as values vowels = [\'a\', \'e\', \'i\', \'o\', \'u\'] s = sorted(s.lower()) vowel_counts = {v: 0 for v in vowels} for char in s: if char in vowels: vowel_counts[char] += 1 return vowel_counts"},{"question":"Given a list of integers, write a function to find the smallest positive integer that does not occur in the list. Your function should execute efficiently, even with very large lists. For example, given the list `[3, 4, -1, 1]`, the smallest missing positive integer is `2`. ```python def find_missing_positive_integer(lst): # Your code here pass ```","solution":"def find_missing_positive_integer(lst): Finds the smallest positive integer that does not occur in the list lst. n = len(lst) # Mark numbers (num <= 0 or num > n) with a special marker number (n+1) # We use n+1 because it is not within the index range of the list for i in range(n): if lst[i] <= 0 or lst[i] > n: lst[i] = n + 1 # Use the index as a hash key and the number sign as a presence detector. for i in range(n): num = abs(lst[i]) if num <= n: lst[num - 1] = -abs(lst[num - 1]) # The first index which has a positive number means that index+1 is the # smallest missing positive number. for i in range(n): if lst[i] > 0: return i + 1 return n + 1"},{"question":"Write a script that takes an integer input `n` and returns a list of prime numbers less than `n`. Ensure your function is optimized for performance and handles edge cases, such as `n` being less than 2.","solution":"def list_primes_less_than_n(n): Returns a list of prime numbers less than n. :param n: The upper limit (exclusive) for generating prime numbers. :type n: int :return: List of prime numbers less than n. :rtype: list of int if n < 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a program that reads a string from the user and then reverses the order of characters in every word while keeping the words in the original order. For instance, if the input string is \\"Hello World\\", the output should be \\"olleH dlroW\\". Implement this functionality using a loop and string manipulation methods.","solution":"def reverse_words_in_string(s): Reverses the order of characters in every word in the input string while keeping the words in the original order. words = s.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Given an array of integers, write a function to determine if it is a palindrome. An array is considered a palindrome if it reads the same backward as forward. For example, the array [1, 2, 3, 2, 1] is a palindrome, while the array [1, 2, 3] is not. Your function should return `True` if the array is a palindrome and `False` otherwise. Example Input: array = [1, 4, 3, 4, 1] Expected Output: True","solution":"def is_palindrome(array): Determines if the given array of integers is a palindrome. :param array: List of integers :return: True if the array is a palindrome, False otherwise return array == array[::-1]"},{"question":"Create a function that takes a string representing a time in 12-hour format and converts it to 24-hour format. The function should handle both AM and PM cases correctly, and account for edge cases like invalid input strings. You are not allowed to use built-in libraries for time conversion. Write test cases to validate your function.","solution":"def convert_to_24_hour_format(time_str): Converts a time string from 12-hour format to 24-hour format. Parameters: time_str (str): A string representing time in 12-hour format (e.g., \\"02:30 PM\\"). Returns: str: A string representing time in 24-hour format (e.g., \\"14:30\\"). If the input string is invalid, returns \\"Invalid time format\\". try: # Split the time string into time and period (AM/PM) time_part, period_part = time_str.strip().split() # Split the time part into hours and minutes hours, minutes = map(int, time_part.split(\\":\\")) # Validate the time part if not (1 <= hours <= 12 and 0 <= minutes < 60): return \\"Invalid time format\\" # Validate the period part if period_part not in {\\"AM\\", \\"PM\\"}: return \\"Invalid time format\\" # Convert hours based on the period (AM/PM) if period_part == \\"PM\\" and hours != 12: hours += 12 elif period_part == \\"AM\\" and hours == 12: hours = 0 # Format hours and minutes to HH:MM return f\\"{hours:02}:{minutes:02}\\" except: return \\"Invalid time format\\""},{"question":"Implement a function that accepts a string representing a mathematical expression containing non-negative integers and \'+\' or \'-\' operators. The function should evaluate the expression and return the result as an integer. The input string does not contain any spaces, and is guaranteed to represent a valid expression. def evaluate_expression(expression): Given a string representing a mathematical expression, evaluate and return the result as an integer. Examples: >>> evaluate_expression(\\"3+5-2\\") == 6 >>> evaluate_expression(\\"10+20-30\\") == 0 >>> evaluate_expression(\\"40-15+5\\") == 30","solution":"def evaluate_expression(expression): Given a string representing a mathematical expression, evaluate and return the result as an integer. Parameters: expression (str): The mathematical expression containing non-negative integers and \'+\' or \'-\' operators Returns: int: The result of evaluating the expression result = 0 current_number = 0 operation = \'+\' for char in expression: if char.isdigit(): current_number = current_number * 10 + int(char) else: if operation == \'+\': result += current_number else: result -= current_number operation = char current_number = 0 if operation == \'+\': result += current_number else: result -= current_number return result # Examples: # >>> evaluate_expression(\\"3+5-2\\") == 6 # >>> evaluate_expression(\\"10+20-30\\") == 0 # >>> evaluate_expression(\\"40-15+5\\") == 30"},{"question":"You are given a string containing a mathematical expression with single-digit non-negative integers, and binary operators `+`, `-`, and `*` only. Your task is to parse this expression and evaluate it according to the standard operator precedence (`*` has higher precedence than `+` and `-`). For example: - For the input `\\"3+5*2\\"`, the result should be `13` because `5*2` is evaluated first. - For the input `\\"7-2*3\\"`, the result should be `1` because `2*3` is evaluated first. You may assume that the given expression is always valid and contains no spaces. Write a function `evaluate_expression(expression: str) -> int` that takes a string expression and returns the integer result of the evaluated expression. ```python def evaluate_expression(expression: str) -> int: # Your code here # Example usage: print(evaluate_expression(\\"3+5*2\\")) # Output: 13 print(evaluate_expression(\\"7-2*3\\")) # Output: 1 ```","solution":"def evaluate_expression(expression: str) -> int: def apply_operator(operators, values): right = values.pop() left = values.pop() op = operators.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) precedence = {\'+\': 1, \'-\': 1, \'*\': 2} operators = [] values = [] i = 0 while i < len(expression): if expression[i].isdigit(): values.append(int(expression[i])) else: while (operators and precedence[operators[-1]] >= precedence[expression[i]]): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"撰寫一個程式，判斷給定的字串是否為回文，不區分大小寫並且忽略所有非字母字符。 input1 = \\"A man, a plan, a canal, Panama.\\" output1 = True input2 = \\"Hello, World!\\" output2 = False","solution":"def is_palindrome(s): Checks if the given string is a palindrome, ignoring non-letter characters and case. Parameters: s (str): The input string to check. Returns: bool: True if the string is a palindrome, False otherwise. import re # Remove non-letter characters and convert to lower case. cleaned_str = re.sub(r\'[^a-zA-Z]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse. return cleaned_str == cleaned_str[::-1]"},{"question":"Write a function to flatten a nested dictionary. The dictionary may contain other dictionaries as values, and those dictionaries may also contain dictionaries as values, and so on. The function should be able to handle this nesting and return a flattened dictionary where nested keys are represented in a flat hierarchy by concatenating keys with a separator. Example input and output: ```python nested_dict = { \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3, \'f\': 4 } }, \'g\': 5 } output_dict = { \'a\': 1, \'b.c\': 2, \'b.d.e\': 3, \'b.d.f\': 4, \'g\': 5 } ``` Function signature: ```python def flatten_dictionary(d, separator=\'.\'): # Your code here ```","solution":"def flatten_dictionary(d, parent_key=\'\', separator=\'.\'): Flattens a nested dictionary. Args: d (dict): The input nested dictionary. parent_key (str, optional): The base key to start with, for recursion. Default is \'\'. separator (str, optional): The separator to use between keys. Default is \'.\'. Returns: dict: A new dictionary with flattened keys. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{separator}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dictionary(v, new_key, separator=separator).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Design a program that accepts an array of integers and finds the longest subarray where the sum of its elements is zero. The program should return the starting and ending indices of this subarray. If there are multiple subarrays with the same length, return the indices of the subarray which appears first. For instance: array = [1, 2, -2, 4, -4] The output should be (1, 4) as the subarray [2, -2, 4, -4] has the longest length with zero sum. Your program should handle arrays of any length and elements.","solution":"def longest_zero_sum_subarray(arr): Finds the longest subarray with a sum of zero. Parameters: arr (list of int): The input array of integers. Returns: tuple: The starting and ending indices of the longest subarray with sum zero. sum_map = {} max_len = 0 start_idx = -1 end_idx = -1 current_sum = 0 for index, value in enumerate(arr): current_sum += value if current_sum == 0: max_len = index + 1 start_idx = 0 end_idx = index if current_sum in sum_map: if (index - sum_map[current_sum]) > max_len: max_len = index - sum_map[current_sum] start_idx = sum_map[current_sum] + 1 end_idx = index else: sum_map[current_sum] = index return (start_idx, end_idx) if start_idx != -1 and end_idx != -1 else tuple()"},{"question":"Write a function that takes a list of integers and returns a dictionary where the key is the integer and the value is the number of times it appears in the list. Additionally, the function should return the integer that appears the least number of times. If there is a tie, return any one of the integers that appear the least number of times. Example: ``` numbers = [4, 2, 1, 3, 2, 4, 1, 2, 4, 4, 5] ``` Output: ``` { 4: 4, 2: 3, 1: 2, 3: 1, 5: 1 }, 3 (or it can return 5) ```","solution":"def count_occurrences(numbers): Returns a dictionary with the count of each number in the list, and the integer that appears the least number of times. Parameters: numbers (list): A list of integers. Returns: dict: A dictionary where keys are integers from the list, and values are their counts. int: An integer that appears the least number of times. if not numbers: return {}, None count_dict = {} for num in numbers: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 # Find the integer with the least occurrences min_count = float(\'inf\') min_num = None for num, count in count_dict.items(): if count < min_count: min_count = count min_num = num return count_dict, min_num"},{"question":"Design a **Circular Queue** implementation. Implement the `MyCircularQueue` class: `MyCircularQueue(k)` Initializes the object with the size of the queue to be `k`. `boolean enQueue(int value)` Inserts an element into the circular queue. Return `true` if the operation is successful. `boolean deQueue()` Deletes an element from the circular queue. Return `true` if the operation is successful. `int Front()` Gets the front item from the queue. If the queue is empty, return `-1`. `int Rear()` Gets the last item from the queue. If the queue is empty, return `-1`. `boolean isEmpty()` Checks whether the circular queue is empty or not. `boolean isFull()` Checks whether the circular queue is full or not. You must solve the problem without using the built-in queue data structure in your programming language. Example 1: Input [\\"MyCircularQueue\\", \\"enQueue\\", \\"enQueue\\", \\"enQueue\\", \\"enQueue\\", \\"Rear\\", \\"isFull\\", \\"deQueue\\", \\"enQueue\\", \\"Rear\\"] [[3], [1], [2], [3], [4], [], [], [], [4], []] Output [null, true, true, true, false, 3, true, true, true, 4] Explanation MyCircularQueue circularQueue = new MyCircularQueue(3); // initialize a queue of size 3 circularQueue.enQueue(1); // return true circularQueue.enQueue(2); // return true circularQueue.enQueue(3); // return true circularQueue.enQueue(4); // return false, the queue is full circularQueue.Rear(); // return 3 circularQueue.isFull(); // return true circularQueue.deQueue(); // return true circularQueue.enQueue(4); // return true circularQueue.Rear(); // return 4 Constraints: - `1 <= k <= 1000` - `0 <= value <= 1000` - At most `3000` calls will be made to `enQueue`, `deQueue`, `Front`, `Rear`, `isEmpty`, and `isFull`.","solution":"class MyCircularQueue: def __init__(self, k: int): Initializes the object with the size of the queue to be k. self.queue = [0] * k self.head_index = 0 self.count = 0 self.capacity = k def enQueue(self, value: int) -> bool: Inserts an element into the circular queue. Return true if the operation is successful. if self.isFull(): return False self.queue[(self.head_index + self.count) % self.capacity] = value self.count += 1 return True def deQueue(self) -> bool: Deletes an element from the circular queue. Return true if the operation is successful. if self.isEmpty(): return False self.head_index = (self.head_index + 1) % self.capacity self.count -= 1 return True def Front(self) -> int: Gets the front item from the queue. If the queue is empty, return -1. if self.isEmpty(): return -1 return self.queue[self.head_index] def Rear(self) -> int: Gets the last item from the queue. If the queue is empty, return -1. if self.isEmpty(): return -1 return self.queue[(self.head_index + self.count - 1) % self.capacity] def isEmpty(self) -> bool: Checks whether the circular queue is empty or not. return self.count == 0 def isFull(self) -> bool: Checks whether the circular queue is full or not. return self.count == self.capacity"},{"question":"Write a Python function named `fizz_buzz` that takes an integer `n` as an argument and returns a list of strings with the numbers from 1 to `n`. But for multiples of three, output \\"Fizz\\" instead of the number and for the multiples of five output \\"Buzz\\". For numbers which are multiples of both three and five, output \\"FizzBuzz\\". The function should have the following signature: ```python def fizz_buzz(n: int) -> list: # your code here ```","solution":"def fizz_buzz(n: int) -> list: Returns a list of strings with numbers from 1 to n. For multiples of 3, it outputs \\"Fizz\\" instead of the number, for multiples of 5 it outputs \\"Buzz\\". For multiples of both 3 and 5, it outputs \\"FizzBuzz\\". :param n: The upper limit of the range (inclusive). :return: List of strings with \\"Fizz\\", \\"Buzz\\", and \\"FizzBuzz\\". result = [] for i in range(1, n+1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a Python function that takes a list of strings and returns a new list containing only those strings that are anagrams of another string in the list. For instance, given `[\\"listen\\", \\"silent\\", \\"enlist\\", \\"hello\\", \\"world\\"]`, the function should return `[\\"listen\\", \\"silent\\", \\"enlist\\"]`.","solution":"def find_anagrams(words): Returns a list of anagrams from the given list of words. Words are considered anagrams if they have the same characters in a different order. from collections import defaultdict # Dictionary to hold lists of words that are anagrams and their sorted tuple form as the key anagram_dict = defaultdict(list) for word in words: # Sort the word and convert it to a tuple (tuples can be dictionary keys, lists cannot) sorted_word_tuple = tuple(sorted(word)) anagram_dict[sorted_word_tuple].append(word) # Collect all words that have more than one anagram anagrams = [] for group in anagram_dict.values(): if len(group) > 1: anagrams.extend(group) return anagrams"},{"question":"Create a function that takes a list of strings representing sentences and returns a dictionary. The dictionary should have each unique word from the sentences as keys, and their corresponding values should be a list of sentence indices where each word appears. Example: if given sentences = [\\"This is a test\\", \\"This test is a sample\\", \\"Sample test\\"] Resulting dictionary should be: { \'This\': [0, 1], \'is\': [0, 1], \'a\': [0, 1], \'test\': [0, 1, 2], \'sample\': [1], \'Sample\': [2] }","solution":"def word_occurrences(sentences): Takes a list of sentences and returns a dictionary where each unique word is a key and the value is a list of indices of sentences in which the word appears. word_dict = {} for idx, sentence in enumerate(sentences): words = sentence.split() for word in words: if word not in word_dict: word_dict[word] = [] if idx not in word_dict[word]: word_dict[word].append(idx) return word_dict"},{"question":"Design and implement a function that receives two arguments: a list of words and a string containing a sentence. The function should return a dictionary where the keys are the words from the list and the values are the number of occurrences of each word in the sentence. The function should be case-insensitive and ignore punctuation. **Example:** ```python def word_count(word_list, sentence): pass word_list = [\\"example\\", \\"words\\", \\"frequency\\", \\"ignore\\"] sentence = \\"This is an example sentence, with words to count and check frequency. We should also ignore punctuation.\\" result = word_count(word_list, sentence) # Expected Output: # { # \\"example\\": 1, # \\"words\\": 1, # \\"frequency\\": 1, # \\"ignore\\": 1 # } ``` **Constraints:** 1. You may assume the list of words and sentence are non-empty. 2. The words in the list do not contain any punctuation. 3. The sentence may include punctuation such as periods, commas, and exclamation marks. 4. The function should be case insensitive (i.e., treat \\"Example\\" and \\"example\\" as the same word).","solution":"import re from collections import defaultdict def word_count(word_list, sentence): Returns a dictionary with the count of each word from word_list found in the sentence. :param word_list: List of words to search for in the sentence :param sentence: The sentence in which to count the occurrences of the words :return: A dictionary with words as keys and their counts as values # Convert the sentence to lowercase to make the process case-insensitive sentence = sentence.lower() # Remove punctuation from the sentence processed_sentence = re.sub(r\'[^ws]\', \'\', sentence) # Split the sentence into words words_in_sentence = processed_sentence.split() # Initialize a dictionary with default value of 0 word_count_dict = defaultdict(int) # Count occurrences of each word in the word_list for word in word_list: word_count_dict[word.lower()] = words_in_sentence.count(word.lower()) return dict(word_count_dict)"},{"question":"Using Python, write a function that filters and organizes student information stored in a nested dictionary by their grade level. The program should create a new dictionary where the keys are the grade levels, and the values are lists of dictionaries, each containing the details of a student in that grade. Each student\'s information includes their name, age, and favorite subject. Your function should also account for students who might be missing any of the three pieces of information and handle such cases gracefully. The dictionary \'students_data\' is structured as follows: { \\"students\\": [ {\\"name\\": \\"Alice\\", \\"age\\": 14, \\"grade\\": \\"8\\", \\"favorite_subject\\": \\"Math\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 13, \\"grade\\": \\"7\\", \\"favorite_subject\\": \\"Science\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 14, \\"grade\\": \\"8\\"}, {\\"name\\": \\"David\\", \\"age\\": 15, \\"grade\\": \\"9\\", \\"favorite_subject\\": \\"History\\"}, {\\"name\\": \\"Eve\\", \\"age\\": 13, \\"grade\\": \\"7\\", \\"favorite_subject\\": \\"Art\\"} ] } The output should be a dictionary where each key is a grade level and the value is a list of dictionaries for the students in that grade. Only valid entries should be included in the output.","solution":"def organize_students_by_grade(students_data): Organizes the student information by their grade level. Args: students_data (dict): The dictionary containing the student information. Returns: dict: A new dictionary where the keys are the grade levels, and the values are lists of dictionaries with student details. organized_data = {} for student in students_data.get(\\"students\\", []): grade = student.get(\\"grade\\") if grade: if grade not in organized_data: organized_data[grade] = [] cleaned_student = { \\"name\\": student.get(\\"name\\"), \\"age\\": student.get(\\"age\\"), \\"favorite_subject\\": student.get(\\"favorite_subject\\") } organized_data[grade].append(cleaned_student) return organized_data"},{"question":"Write a function that takes in a list of integers and returns a new list with each element squared, but only if the original element is a prime number. If the element is not a prime number, it should be excluded from the new list. For example, given the input list [4, 7, 10, 11, 13, 16], the function should return [49, 121, 169].","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def square_primes(lst): Returns a new list with each element squared if the element is a prime number. Elements that are not prime numbers are excluded from the new list. return [x**2 for x in lst if is_prime(x)]"},{"question":"Implement a function that merges two sorted linked lists into a single sorted linked list. ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeTwoLists(l1, l2): Merge two sorted linked lists l1 and l2 and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists. Example: Input: l1 = [1,2,4] l2 = [1,3,4] Output: [1,1,2,3,4,4] Constraints: * The number of nodes in both lists is in the range [0, 50]. * -100 <= Node.val <= 100 * Both l1 and l2 are sorted in non-decreasing order. # Implementation here ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeTwoLists(l1, l2): Merge two sorted linked lists l1 and l2 and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists. dummy = ListNode() # Create a dummy node to form the new sorted linked list tail = dummy while l1 and l2: if l1.val <= l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next # Append the rest of the remaining list if one is exhausted tail.next = l1 if l1 else l2 return dummy.next"},{"question":"Write a Python function that takes a list of integers and returns a dictionary where the keys are the unique integers from the list and the values are the counts of how many times each integer appears in the list. Do not use any external libraries. Example: ``` Input: [4, 8, 4, 16, 8, 8, 14] Output: {4: 2, 8: 3, 16: 1, 14: 1} ```","solution":"def count_integers(lst): Returns a dictionary with the count of each unique integer in the input list. Parameters: lst (list): A list of integers. Returns: dict: A dictionary with unique integers as keys and their counts as values. counts = {} for num in lst: if num in counts: counts[num] += 1 else: counts[num] = 1 return counts"},{"question":"You are given an API that returns a JSON response containing user actions on a web application. The JSON structure includes nested objects and arrays representing the hierarchy of action categories and subcategories. Write a function that processes the JSON response to extract the total count of each action type performed by a user. Additionally, provide a method to output this data in a CSV format, where each row represents an action type and its count. Example JSON response: ```json { \\"userId\\": \\"12345\\", \\"actions\\": [ { \\"category\\": \\"file\\", \\"actions\\": [ { \\"type\\": \\"upload\\", \\"count\\": 5 }, { \\"type\\": \\"delete\\", \\"count\\": 2 } ] }, { \\"category\\": \\"email\\", \\"actions\\": [ { \\"type\\": \\"send\\", \\"count\\": 10 }, { \\"type\\": \\"receive\\", \\"count\\": 15 } ] } ] } ``` Example CSV output: ``` type,count upload,5 delete,2 send,10 receive,15 ```","solution":"import csv import json from collections import defaultdict def extract_action_counts(json_response): Process the JSON response to extract the total count of each action type. Args: json_response (dict): JSON response from the API Returns: dict: A dictionary with action types as keys and their counts as values action_counts = defaultdict(int) for category in json_response.get(\\"actions\\", []): for action in category.get(\\"actions\\", []): action_type = action.get(\\"type\\") count = action.get(\\"count\\", 0) action_counts[action_type] += count return action_counts def save_to_csv(action_counts, output_file): Save the action counts to a CSV file. Args: action_counts (dict): Dictionary containing action types and their counts output_file (str): Path to the CSV file to be created with open(output_file, \'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([\'type\', \'count\']) for action_type, count in action_counts.items(): writer.writerow([action_type, count]) # Example JSON response json_response = { \\"userId\\": \\"12345\\", \\"actions\\": [ { \\"category\\": \\"file\\", \\"actions\\": [ { \\"type\\": \\"upload\\", \\"count\\": 5 }, { \\"type\\": \\"delete\\", \\"count\\": 2 } ] }, { \\"category\\": \\"email\\", \\"actions\\": [ { \\"type\\": \\"send\\", \\"count\\": 10 }, { \\"type\\": \\"receive\\", \\"count\\": 15 } ] } ] } action_counts = extract_action_counts(json_response) save_to_csv(action_counts, \'action_counts.csv\')"},{"question":"Implement a function to calculate the running median of a stream of integers. The running median is the current median value of all the numbers seen so far in the input stream. Here\'s a summary of the steps involved: 1. Accept a stream of integers one by one. 2. After each new integer, update the median. 3. Output the median after processing each integer. # Example: Given the stream of integers: [2, 1, 5, 7, 2, 0, 5] The running medians would be: - After reading 2, the median is 2. - After reading 1, the median is 1.5. - After reading 5, the median is 2. - After reading 7, the median is 3.5. - After reading 2, the median is 2. - After reading 0, the median is 2. - After reading 5, the median is 2. # Constraints: - The function should handle at least 10^5 elements in an efficient way. - You can use built-in data structures but avoid using libraries specifically designed for median computation. # Function Signature: ```python def streaming_median(stream: List[int]) -> List[float]: pass ``` # Example: ```python stream = [2, 1, 5, 7, 2, 0, 5] print(streaming_median(stream)) # Output: [2, 1.5, 2, 3.5, 2, 2, 2] ```","solution":"import heapq def streaming_median(stream): Calculates the running median of a stream of integers. :param stream: List[int] - a list of integers representing the stream :return: List[float] - a list of running medians after each number in the stream is processed min_heap = [] # the right half max_heap = [] # the left half (inverted, i.e., as a max-heap using negatives) medians = [] for number in stream: if not max_heap or number < -max_heap[0]: heapq.heappush(max_heap, -number) else: heapq.heappush(min_heap, number) # Balance the heaps such that the size difference is not more than one if len(max_heap) > len(min_heap) + 1: heapq.heappush(min_heap, -heapq.heappop(max_heap)) elif len(min_heap) > len(max_heap): heapq.heappush(max_heap, -heapq.heappop(min_heap)) # Calculate the median if len(max_heap) == len(min_heap): median = (-max_heap[0] + min_heap[0]) / 2.0 else: median = -max_heap[0] medians.append(median) return medians"},{"question":"Design a function that determines whether a given 2D grid has a specific pattern of numbers or characters, adhering to defined movement restrictions: def pattern_search(grid, pattern): A 2D grid filled with characters is provided, and you need to verify if a specific sequential pattern exists within the grid. The pattern can be formed by tracing characters in the grid through the following movements: 1. Move up one cell. 2. Move down one cell. 3. Move left one cell. 4. Move right one cell. 5. Move diagonally in any of the four possible directions one cell. The starting point can be any cell in the grid, and you cannot revisit a cell within the same pattern sequence. Return True if the pattern is found in the grid, otherwise return False. An empty pattern should return True, and an empty grid returns False. For instance, pattern_search([ [\'a\', \'b\', \'c\', \'d\'], [\'e\', \'f\', \'g\', \'h\'], [\'i\', \'j\', \'k\', \'l\'], [\'m\', \'n\', \'o\', \'p\'] ], \\"bfk\\") ==> True pattern_search([ [\'a\', \'b\', \'c\', \'d\'], [\'e\', \'f\', \'g\', \'h\'], [\'i\', \'j\', \'k\', \'l\'], [\'m\', \'n\', \'o\', \'p\'] ], \\"abcl\\") ==> True pattern_search([ [\'a\', \'b\', \'c\', \'d\'], [\'e\', \'f\', \'g\', \'h\'], [\'i\', \'j\', \'k\', \'l\'], [\'m\', \'n\', \'o\', \'p\'] ], \\"abcj\\") ==> False pattern_search([], \\"abc\\") ==> False # Your code here","solution":"def pattern_search(grid, pattern): if not pattern: return True if not grid or not grid[0]: return False rows, cols = len(grid), len(grid[0]) def is_valid(x, y, visited): return 0 <= x < rows and 0 <= y < cols and (x, y) not in visited def search(x, y, pattern, visited): if not pattern: return True if not is_valid(x, y, visited) or grid[x][y] != pattern[0]: return False visited.add((x, y)) # Define direction vectors for 8 possible movements: # up, down, left, right, top-left, top-right, bottom-left, bottom-right directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] for dx, dy in directions: if search(x + dx, y + dy, pattern[1:], visited): return True visited.remove((x, y)) return False for i in range(rows): for j in range(cols): if search(i, j, pattern, set()): return True return False"},{"question":"Create a function that takes an integer `n` as an argument, and returns a list of integers representing the Fibonacci sequence up to the `n`-th term. The Fibonacci sequence is characterized by the fact that every number after the first two is the sum of the two preceding ones, starting with 0 and 1. For example, if `n` is 5, the function should return [0, 1, 1, 2, 3].","solution":"def fibonacci_sequence(n): Returns a list of integers representing the Fibonacci sequence up to the n-th term. if n <= 0: return [] elif n == 1: return [0] fib_seq = [0, 1] while len(fib_seq) < n: fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Design a function in Python that takes a list of integers and returns a new list containing only the prime numbers from the original list. The function should implement a nested loop to check for the primality of each number. Define the structure of the function, and provide an example usage showcasing its capability to filter out non-prime numbers from the given list.","solution":"def is_prime(n): Helper function to check if a number is prime. Returns True if n is a prime number, otherwise False. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def filter_primes(numbers): Takes a list of integers and returns a new list containing only the prime numbers. primes = [] for num in numbers: if is_prime(num): primes.append(num) return primes # Example usage example_list = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11] print(filter_primes(example_list)) # Output: [2, 3, 5, 7, 11]"},{"question":"Write a function that takes two sorted arrays of integers and returns a new array that contains only the elements that are present in both arrays (without duplicates). Your solution should have a time complexity of O(n). Additionally, ensure that the new array is also sorted, and provide a brief explanation of the approach used to solve the problem. **Example:** Input: ``` arr1 = [1, 3, 4, 5, 7] arr2 = [2, 3, 5, 6] ``` Output: ``` [3, 5] ```","solution":"def intersection(arr1, arr2): Returns the intersection of two sorted arrays. The result array contains only the elements that are present in both arrays and without duplicates. Parameters: arr1 (list of int): First sorted array. arr2 (list of int): Second sorted array. Returns: list of int: An array containing the intersection elements. i, j = 0, 0 result = [] while i < len(arr1) and j < len(arr2): if arr1[i] == arr2[j]: if not result or result[-1] != arr1[i]: # Ensure no duplicates in the result result.append(arr1[i]) i += 1 j += 1 elif arr1[i] < arr2[j]: i += 1 else: j += 1 return result"},{"question":"Implement a function that calculates the factorial of a given non-negative integer n. n = 5.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. If n is 0, returns 1. Otherwise, returns n * factorial(n - 1). if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function `calculate_frequency` that takes a string as input and returns a dictionary with the frequency of each character in the string. Ignore spaces and punctuation, and treat uppercase and lowercase characters as the same. # Function Signature ```python def calculate_frequency(input_string: str) -> dict: ``` # Input - A single string `input_string` (1 <= len(input_string) <= 10^4). # Output - A dictionary where keys are characters and the values are their frequencies in the input string. # Example ```python input_string = \\"Hello, World!\\" calculate_frequency(input_string) # Output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} input_string = \\"Python Programming!\\" calculate_frequency(input_string) # Output: {\'p\': 2, \'y\': 1, \'t\': 1, \'h\': 1, \'o\': 2, \'n\': 2, \'r\': 2, \'g\': 2, \'a\': 1, \'m\': 2, \'i\': 1} ``` # Constraints - Ignore spaces and punctuation. - Treat uppercase and lowercase characters as the same. For example, \'A\' and \'a\' should both count toward the same frequency.","solution":"import string def calculate_frequency(input_string: str) -> dict: Takes a string as input and returns a dictionary with the frequency of each character in the string. Ignores spaces and punctuation, and treats uppercase and lowercase characters as the same. # Convert the input string to lowercase input_string = input_string.lower() # Initialize an empty dictionary to store the frequency of characters frequency_dict = {} # Iterate through each character in the string for char in input_string: # Ignore spaces and punctuation if char.isalnum(): # Checks if the character is alphanumeric (no spaces or punctuation) if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Write a Python function called `anagram_palindrome` that checks if a given string of lowercase alphabets can be rearranged to form a palindrome. The function should return `True` if it is possible to rearrange the string to form a palindrome and `False` otherwise. A palindrome is a word that reads the same forwards and backwards. You should write the solution without using any import statements. Example: ```python print(anagram_palindrome(\\"civic\\")) # Output: True print(anagram_palindrome(\\"ivicc\\")) # Output: True print(anagram_palindrome(\\"hello\\")) # Output: False print(anagram_palindrome(\\"aabb\\")) # Output: True ```","solution":"def anagram_palindrome(s): Checks if the string can be rearranged to form a palindrome. char_count = {} # Count the frequency of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count how many characters have an odd frequency odd_counts = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one character with an odd frequency return odd_counts <= 1"},{"question":"Write a Python function named `find_unique_elements` that takes two lists of integers as input and returns a new list containing the elements that are unique to each list (i.e., elements that are in one list but not the other). Ensure your function efficiently handles duplicated numbers and provides the correct unique elements. Additionally, explain how your function works and discuss its time complexity. Example: ``` list1 = [1, 2, 3, 4, 4, 5, 6] list2 = [4, 5, 6, 7, 8, 9] find_unique_elements(list1, list2) ``` Expected Output: ``` [1, 2, 3, 7, 8, 9] ```","solution":"def find_unique_elements(list1, list2): Returns a new list containing the elements that are unique to each list. Elements in the result list are in either of the input lists but not in both. # Convert the lists to sets set1 = set(list1) set2 = set(list2) # Find elements unique to each set unique_to_list1 = set1 - set2 unique_to_list2 = set2 - set1 # Combine the unique elements unique_elements = list(unique_to_list1 | unique_to_list2) return unique_elements"},{"question":"You are given a list of transactions where each transaction contains a user ID, the date of the transaction, and the transaction amount. Write a function that takes this list of transactions, filters out transactions that occurred only in the past month, and then calculates the total transaction amount for each user. The function should return a dictionary where the keys are the user IDs and the values are their respective total transaction amounts for the past month. Assume the input list is in the form of tuples (user_id, date, amount) and the date is in \'YYYY-MM-DD\' format.","solution":"from datetime import datetime, timedelta def filter_and_sum_transactions(transactions, current_date): Filters out transactions that occurred only in the past month and then calculates the total transaction amount for each user. Args: transactions (list of tuples): List of transactions where each transaction is a tuple (user_id, date, amount). current_date (str): The current date in \'YYYY-MM-DD\' format. Returns: dict: A dictionary where the keys are the user IDs and the values are their respective total transaction amounts for the past month. current_date = datetime.strptime(current_date, \'%Y-%m-%d\') one_month_ago = current_date - timedelta(days=30) user_totals = {} for user_id, date, amount in transactions: transaction_date = datetime.strptime(date, \'%Y-%m-%d\') if one_month_ago <= transaction_date <= current_date: if user_id in user_totals: user_totals[user_id] += amount else: user_totals[user_id] = amount return user_totals"},{"question":"Implement a function in Python that takes a matrix of integers and returns the list of integers in a spiral order, starting from the top-left corner of the matrix moving right, then down, then left, then up, and so on until all elements have been visited. For example, given the matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Your function should return `[1, 2, 3, 6, 9, 8, 7, 4, 5]`. Write a function `spiralOrder(matrix: List[List[int]]) -> List[int]` to accomplish this task. Include at least one test case within your submission to showcase your solution.","solution":"def spiralOrder(matrix): Returns the elements of matrix in spiral order. if not matrix or not matrix[0]: return [] result = [] while matrix: # remove and add the first row from matrix result += matrix.pop(0) if matrix and matrix[0]: # add the last element of each remaining row for row in matrix: result.append(row.pop()) if matrix: # remove and add the last row in reverse result += matrix.pop()[::-1] if matrix and matrix[0]: # add the first element of each remaining row in reverse for row in matrix[::-1]: result.append(row.pop(0)) return result"},{"question":"Design a function that takes a string containing multiple words and rearranges them alphabetically, ignoring case sensitivity. The function should return the rearranged string with each word separated by a single space. Ensure that the input string does not have leading or trailing spaces, and words are only separated by a single space. ```python def alphabetically_rearrange(s: str) -> str: ... ``` You need to ensure that the function is efficient and all edge cases (such as capitalization of letters) are handled correctly.","solution":"def alphabetically_rearrange(s: str) -> str: Takes a string containing multiple words and rearranges them alphabetically, ignoring case sensitivity. Returns the rearranged string with each word separated by a single space. words = s.split() sorted_words = sorted(words, key=lambda x: x.lower()) return \' \'.join(sorted_words)"},{"question":"Given an array of integers representing the heights of a set of blocks, calculate the total amount of water that can be trapped between the blocks after a rainfall. Implement your solution in Python without using any external libraries or advanced data structures like dictionaries or sets. Input: [3, 0, 2, 0, 4] Output: 7 Note: The output is 7 because 1 unit of water is trapped between the first and third block, and 6 units of water are trapped between the third and fifth block.","solution":"def trap(height): Given an array of integers representing the heights of a set of blocks, calculate the total amount of water that can be trapped between the blocks after a rainfall. Parameters: height (list of int): An array of integers representing the heights of blocks. Returns: int: The total amount of water that can be trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) # Fill right max array right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) # Calculate water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Given a 2D grid of characters and a word, write a function to determine if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Implement the function `doesWordExist(grid: List[List[str]], word: str) -> bool` that will take a list of list of characters representing the grid, and a string representing the word. Return `True` if the word exists in the grid, and `False` otherwise. Example: ``` grid = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word1 = \\"ABCCED\\" word2 = \\"SEE\\" word3 = \\"ABCB\\" ``` For the above example, - `doesWordExist(grid, word1)` should return `True`. - `doesWordExist(grid, word2)` should return `True`. - `doesWordExist(grid, word3)` should return `False`.","solution":"def doesWordExist(grid, word): if not grid or not word: return False rows, cols = len(grid), len(grid[0]) def dfs(r, c, index): if index == len(word): return True if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] != word[index]: return False temp = grid[r][c] grid[r][c] = \'#\' # Mark the cell as visited found = (dfs(r+1, c, index+1) or dfs(r-1, c, index+1) or dfs(r, c+1, index+1) or dfs(r, c-1, index+1)) grid[r][c] = temp # Unmark the cell return found for i in range(rows): for j in range(cols): if grid[i][j] == word[0]: if dfs(i, j, 0): return True return False"},{"question":"Using the Iris dataset from scikit-learn, implement a K-Nearest Neighbors (KNN) classifier. Perform a grid search with cross-validation to find the optimal number of neighbors and distance metrics. After training the model, analyze the classification report to discuss the performance of the model for each class and the impact of different hyperparameters.","solution":"from sklearn.datasets import load_iris from sklearn.model_selection import GridSearchCV, train_test_split from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import classification_report def iris_knn_classifier(): # Load the Iris dataset iris = load_iris() X, y = iris.data, iris.target # Split the dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Define a KNN classifier knn = KNeighborsClassifier() # Set up the parameter grid for GridSearchCV param_grid = { \'n_neighbors\': [3, 5, 7, 9], \'metric\': [\'euclidean\', \'manhattan\', \'chebyshev\', \'minkowski\'] } # Perform grid search with cross-validation grid_search = GridSearchCV(knn, param_grid, cv=5, n_jobs=-1) grid_search.fit(X_train, y_train) # Predict on the test set y_pred = grid_search.predict(X_test) # Get the best parameters best_params = grid_search.best_params_ # Generate the classification report report = classification_report(y_test, y_pred, target_names=iris.target_names) return best_params, report # Call the function to get the results best_params, report = iris_knn_classifier() print(\\"Best Parameters:\\", best_params) print(\\"Classification Report:n\\", report)"},{"question":"Write a program to find all possible combinations of numbers that add up to a target number. The numbers must be selected from a given list of unique positive integers. Each number from the list can be used multiple times in the combination. Ensure your program provides all unique combinations in any order. For example, if the input list is [2, 3, 6, 7] and the target number is 7, the program should output the combinations [[7], [2, 2, 3]].","solution":"def combination_sum(nums, target): def backtrack(start, path, remain): if remain == 0: result.append(list(path)) return elif remain < 0: return for i in range(start, len(nums)): path.append(nums[i]) backtrack(i, path, remain - nums[i]) path.pop() result = [] nums.sort() # Optional: to optimize the backtracking backtrack(0, [], target) return result"},{"question":"Design a function that receives a list of integers and a target sum, and returns all unique combinations of list elements that add up to the target sum. Elements in each combination should be sorted in non-descending order, and the combinations themselves should be sorted in lexicographical order. The same number from the list can be used an unlimited number of times within a combination. Example: ```python def find_combinations(nums, target): # Your code here print(find_combinations([2, 3, 6, 7], 7)) ``` Expected Output: ```python [[2, 2, 3], [7]] ```","solution":"def find_combinations(nums, target): Returns all unique combinations of list elements that add up to the target sum. Each combination will be sorted in non-descending order, and the combinations themselves will be sorted in lexicographical order. def backtrack(start, current_combination, current_sum): if current_sum == target: result.append(list(current_combination)) return if current_sum > target: return for i in range(start, len(nums)): current_combination.append(nums[i]) backtrack(i, current_combination, current_sum + nums[i]) current_combination.pop() nums.sort() result = [] backtrack(0, [], 0) result.sort() return result"},{"question":"Write a Python function that takes a list of strings as input and returns a dictionary where the keys are the unique strings and the values are the counts of each string. The function should be case-insensitive and consider \\"hello\\" and \\"Hello\\" as the same string. If the string list is empty, the function should return an empty dictionary. Ensure the solution is efficient for very large lists.","solution":"def count_strings(string_list): Takes a list of strings and returns a dictionary where the keys are the unique strings (case-insensitive) and the values are the counts of each string. Parameters: string_list (list): A list of strings. Returns: dict: A dictionary with unique strings as keys and their counts as values. # Initialize an empty dictionary to store counts counts = {} for string in string_list: # Convert string to lower case for case-insensitivity string = string.lower() # Increment the count for the string in the dictionary if string in counts: counts[string] += 1 else: counts[string] = 1 return counts"},{"question":"Consider the following incomplete Python function: ``` def find_max_in_nested_lists(nested_lists): # Your code here pass nested_lists = [[5, 12, 7], [3, 14, 6], [8, 4, 10]] print(find_max_in_nested_lists(nested_lists)) ``` This function is supposed to find and return the maximum value from a list of lists, each containing multiple integers. However, it currently does not contain the implementation to achieve this. Your task is to complete the function `find_max_in_nested_lists` so that it correctly iterates through all the nested lists, finds the maximum value in each of the sublists, and returns the overall maximum value from the entire nested structure. Ensure the function works properly when tested with the given sample input `nested_lists = [[5, 12, 7], [3, 14, 6], [8, 4, 10]]`. Example output for the given input: ``` 14 ```","solution":"def find_max_in_nested_lists(nested_lists): Returns the maximum value from a list of lists. max_value = float(\'-inf\') for sublist in nested_lists: for value in sublist: if value > max_value: max_value = value return max_value nested_lists = [[5, 12, 7], [3, 14, 6], [8, 4, 10]] print(find_max_in_nested_lists(nested_lists)) # Output: 14"},{"question":"Implement a function to determine if a given string can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward. Your function should return True if it is possible to rearrange the string into a palindrome, and False otherwise. Example: Input: s = \\"civic\\" Output: True Input: s = \\"ivicc\\" Output: True Input: s = \\"hello\\" Output: False","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. Args: s: str Returns: bool from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # To form a palindrome, there can be at most one character with an odd frequency in the string odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Write a function in Python that takes a list of integers and returns a new list such that each element at index `i` of the new list is the sum of the first `i + 1` elements of the original list. For example, given the list `[1, 2, 3, 4]`, your function should return `[1, 3, 6, 10]`. # Constraints: - You should not use the built-in function `accumulate` from the `itertools` module. - Your solution should have a time complexity of O(n), where n is the length of the list. # Input: - A list of integers `nums` where `1 <= len(nums) <= 10^4` and `-10^4 <= nums[i] <= 10^4`. # Output: - A list of integers representing the cumulative sums. # Example: ```python # Input nums = [1, 2, 3, 4] # Output [1, 3, 6, 10] ``` # Function signature: ```python def cumulative_sum(nums: List[int]) -> List[int]: pass ```","solution":"from typing import List def cumulative_sum(nums: List[int]) -> List[int]: Returns a list of cumulative sums of the input list. Each element of the output list is the sum of the first i+1 elements of the input list. result = [] current_sum = 0 for num in nums: current_sum += num result.append(current_sum) return result"},{"question":"Write a Python function that simulates a basic ATM, capable of performing the following operations: check balance, deposit money, and withdraw money. The function should interact with the user to input their choice of operation and proceed accordingly. Ensure that the function prevents overdrafts by not allowing more money to be withdrawn than is available in the account. Additionally, if a non-numeric input is provided where a number is expected, the function should raise a ValueError.","solution":"class ATM: def __init__(self, balance=0.0): self.balance = balance def check_balance(self): return self.balance def deposit_money(self, amount): if not isinstance(amount, (int, float)) or amount <= 0: raise ValueError(\\"Deposit amount must be a positive number.\\") self.balance += amount return self.balance def withdraw_money(self, amount): if not isinstance(amount, (int, float)) or amount <= 0: raise ValueError(\\"Withdrawal amount must be a positive number.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.balance -= amount return self.balance"},{"question":"Write a function in Python that receives an array of integers and returns an array containing only the prime numbers from the input, in the same order they appeared. If the input array contains no prime numbers, the function should return an empty array. Consider edge cases such as when the array is empty, or contains negative numbers and zero.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def filter_primes(nums): Filters the prime numbers from the given array. Parameters: nums (list of int): The input array of integers. Returns: list of int: The array containing only prime numbers from the input array. return [num for num in nums if is_prime(num)]"},{"question":"Write a function in Python that takes a list of integers and returns the sum of the elements that are at even indices. Your function should handle potential edge cases such as empty lists or lists with only one element. ```python def sumEvenIndices(arr): if not arr: return 0 return sum(arr[i] for i in range(0, len(arr), 2)) ```","solution":"def sumEvenIndices(arr): Returns the sum of elements at even indices in the given list. Parameters: arr (list): A list of integers. Returns: int: Sum of elements at even indices. if not arr: return 0 return sum(arr[i] for i in range(0, len(arr), 2))"},{"question":"Write a Python function that takes a list of integers and an integer target as input, and returns a tuple of two integers from the list that sum up to the target value. If no such pair exists, return an empty tuple. Ensure the function performs efficiently on large input lists. sample_list = [2, 7, 11, 15] target_value = 9","solution":"def find_pair_with_sum(numbers, target): Finds two numbers in the list that sum up to the target value. Args: numbers (list): List of integers. target (int): The target sum. Returns: tuple: A tuple of two integers that sum up to the target value or an empty tuple if no such pair exists. seen = {} for number in numbers: complement = target - number if complement in seen: return (complement, number) seen[number] = True return ()"},{"question":"Write a function `generate_combinations` that takes a list of integers and an integer `k` as input, and returns all possible combinations of `k` numbers from the list. Your solution should include a recursive approach without using built-in combination functions. Example: If the list is [1, 2, 3, 4] and `k` is 2, then the output should be: ``` [ [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4] ] ``` Additionally, print each combination as it is generated to illustrate the recursive process. Show each step, including the current state of the combination being formed and how elements are added or removed recursively.","solution":"def generate_combinations(arr, k): def backtrack(start, current_combination): if len(current_combination) == k: result.append(current_combination[:]) print(f\\"Current Combination: {current_combination}\\") return for i in range(start, len(arr)): current_combination.append(arr[i]) print(f\\"Adding {arr[i]}: {current_combination}\\") backtrack(i + 1, current_combination) removed_element = current_combination.pop() print(f\\"Removing {removed_element}: {current_combination}\\") result = [] backtrack(0, []) return result"},{"question":"You are given a list of integers representing the revenue made in each day of a year (365 entries). Write a Python function called \\"max_consecutive_revenue\\" that takes an integer `n` as input and returns the maximum total revenue from any consecutive `n` days. If `n` is greater than 365, the function should raise a ValueError.","solution":"def max_consecutive_revenue(revenues, n): Returns the maximum total revenue from any consecutive `n` days. If `n` is greater than the length of the revenues list, raises ValueError. :param revenues: List of integers, each representing the revenue made each day of a year (365 entries) :param n: Integer, the number of consecutive days to consider for maximum total revenue :return: Integer, the maximum total revenue from any consecutive `n` days if len(revenues) != 365: raise ValueError(\\"The input list must have exactly 365 entries.\\") if n > 365: raise ValueError(\\"The number of consecutive days `n` cannot be greater than 365.\\") if n <= 0: raise ValueError(\\"The number of consecutive days `n` must be a positive integer.\\") max_revenue = sum(revenues[:n]) current_revenue = max_revenue for i in range(n, 365): current_revenue = current_revenue - revenues[i-n] + revenues[i] if current_revenue > max_revenue: max_revenue = current_revenue return max_revenue"},{"question":"Please write a function called `word_frequency`, which takes a string input comprising multiple sentences and returns a dictionary where the keys are the unique words (case-insensitive) and the values are the counts of occurrences of those words in the input text. The function should: 1. Ignore punctuation marks (.,!?-;) 2. Treat uppercase and lowercase letters as the same (i.e. make the comparison case-insensitive) 3. Handle edge cases such as multiple spaces and punctuation marks immediately following words. Example: ```python def word_frequency(text): pass # Example usage: text = \\"Hello world! Hello, how are you? It\'s a beautiful world.\\" word_frequency(text) # Output: # { # \'hello\': 2, # \'world\': 2, # \'how\': 1, # \'are\': 1, # \'you\': 1, # \'it\': 1, # \'s\': 1, # \'a\': 1, # \'beautiful\': 1 # } ```","solution":"import re from collections import defaultdict def word_frequency(text): Returns a dictionary where the keys are the unique words (case-insensitive) and the values are the counts of occurrences of those words in the input text. The function ignores punctuation and treats uppercase and lowercase letters as the same. # Convert text to lowercase and remove punctuation text = text.lower() text = re.sub(r\'[^ws]\', \'\', text) # Split the text into words words = text.split() # Initialize a default dictionary to count word occurrences word_count = defaultdict(int) for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"Given a string comprising solely of brackets (`\'(\'`, `\')\'`, `\'{\'`, `\'}\'`, `\'[\'`, `\']\'`), develop a function to ascertain whether the provided string of brackets is valid. An input string is valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. Examples: - `input: \\"()\\"` -> `output: true` - `input: \\"()[]{}\\"` -> `output: true` - `input: \\"(]\\"` -> `output: false` - `input: \\"([)]\\"` -> `output: false` - `input: \\"{[]}\\"` -> `output: true` You may assume the string contains only the characters `(\'`, `\')\'`, `\'{\'`, `\'}\'`, `\'[\'`, and `\']\'`.","solution":"def is_valid_brackets(s): Returns True if the input string s containing brackets is valid, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Analyze network devices and determine those that need an upgrade based on provided conditions: Write a function `determine_upgrades(devices, upgrade_conditions)` that identifies the devices that need an upgrade. The `devices` parameter is a dictionary where each key is a device name (string) and the value is a dictionary of device properties (e.g., {\\"RAM\\": 8, \\"Storage\\": 256}). The `upgrade_conditions` parameter is a list of lambda functions, each of which takes the device dictionary as input and returns a boolean indicating whether the condition is satisfied. The function should return a list of device names that do not meet all the upgrade conditions (i.e., at least one condition returns False for the device). # Example ```python devices = { \\"Router1\\": {\\"RAM\\": 4, \\"Storage\\": 128}, \\"Router2\\": {\\"RAM\\": 16, \\"Storage\\": 512}, \\"Switch1\\": {\\"RAM\\": 8, \\"Storage\\": 128}, \\"Switch2\\": {\\"RAM\\": 4, \\"Storage\\": 256}, } upgrade_conditions = [ lambda d: d[\\"RAM\\"] >= 8, lambda d: d[\\"Storage\\"] >= 256 ] determine_upgrades(devices, upgrade_conditions) ``` Expected Output ```python [\'Router1\', \'Switch1\'] ``` # Constraints - The `devices` dictionary will have at most 10,000 devices. - Each device will have at most 10 properties. - Each condition function in `upgrade_conditions` will be based on commonly used properties like RAM, Storage, etc. - There can be at most 5 conditions in `upgrade_conditions`. # Test Cases Input ```python devices = { \\"Printer1\\": {\\"RAM\\": 2, \\"Storage\\": 64}, \\"Server1\\": {\\"RAM\\": 32, \\"Storage\\": 1024}, \\"Server2\\": {\\"RAM\\": 16, \\"Storage\\": 512}, \\"PC1\\": {\\"RAM\\": 4, \\"Storage\\": 256}, } upgrade_conditions = [ lambda d: d[\\"RAM\\"] >= 4, lambda d: d[\\"Storage\\"] >= 256 ] determine_upgrades(devices, upgrade_conditions) ``` Expected Output ```python [\'Printer1\'] ``` Input ```python devices = { \\"Laptop1\\": {\\"RAM\\": 8, \\"Storage\\": 256}, \\"Laptop2\\": {\\"RAM\\": 16, \\"Storage\\": 512}, } upgrade_conditions = [ lambda d: d[\\"RAM\\"] >= 8, lambda d: d[\\"Storage\\"] >= 500 ] determine_upgrades(devices, upgrade_conditions) ``` Expected Output ```python [\'Laptop1\'] ``` Ensure the function processes all the devices efficiently and accurately identifies those that need upgrades based on the provided conditions.","solution":"def determine_upgrades(devices, upgrade_conditions): Identifies devices that do not meet all upgrade conditions. Parameters: devices (dict): Dictionary of devices with their properties. upgrade_conditions (list): List of lambda functions representing upgrade conditions. Returns: list: List of device names that need an upgrade. to_upgrade = [] for device_name, device_props in devices.items(): if not all(condition(device_props) for condition in upgrade_conditions): to_upgrade.append(device_name) return to_upgrade"},{"question":"Design a Python function that takes a list of integers and compacts it by removing all consecutive duplicate integers, ensuring to use list comprehensions and built-in functions where applicable.","solution":"def compact_consecutive_duplicates(numbers): Compacts a list by removing all consecutive duplicate integers. Args: numbers (list): A list of integers. Returns: list: A list of integers with consecutive duplicates removed. if not numbers: return [] return [numbers[i] for i in range(len(numbers)) if i == 0 or numbers[i] != numbers[i - 1]]"},{"question":"Write a function that computes the longest sub-sequence of consecutive integers in an unsorted list of integers. The function should return both the length of the longest consecutive sub-sequence and the sub-sequence itself, sorted in ascending order. It should handle edge cases such as an empty list or a list with all identical elements correctly. Erroneous Code Reference: ```python def longestConsecutiveSubsequence(numbers): numbers = sorted(list(set(numbers))) longest_seq = [] current_seq = [numbers[0]] for i in range(1, len(numbers)): if numbers[i] == numbers[i - 1] + 1: current_seq.append(numbers[i]) else: if len(current_seq) > len(longest_seq): longest_seq = current_seq current_seq = [numbers[i]] if len(current_seq) > len(longest_seq): longest_seq = current_seq return (len(longest_seq), longest_seq) numbers = [100, 4, 200, 1, 3, 2, 1] longestConsecutiveSubsequence(numbers) ``` This code does not correctly identify and return the longest consecutive sub-sequence nor does it handle edge cases properly. Fix these issues in your function.","solution":"def longestConsecutiveSubsequence(numbers): if not numbers: return (0, []) numbers_set = set(numbers) longest_seq = [] for number in numbers_set: if number - 1 not in numbers_set: # Start of a new sequence current_seq = [] current_number = number while current_number in numbers_set: current_seq.append(current_number) current_number += 1 if len(current_seq) > len(longest_seq): longest_seq = current_seq return (len(longest_seq), sorted(longest_seq))"},{"question":"Write a function `analyze_string_patterns` that takes a list of strings as input and returns the most common substring across all strings with a length of at least 2 characters. In case of a tie (multiple substrings have the same highest frequency), return the lexicographically smallest substring. The function should follow these specifications: 1. If the input list is empty or no valid substrings are found, return an empty string. 2. Iterate through each string in the list to extract all possible substrings of length 2 or more. 3. Count the occurrences of each substring across the entire list. 4. Determine the most frequent substring. If there is a tie, select the lexicographically smallest substring. 5. Return this substring as the output. # Example ```python def analyze_string_patterns(strings): # Your implementation here # Example usage: strings = [\\"abcab\\", \\"bca\\", \\"cab\\"] result = analyze_string_patterns(strings) print(result) # Output: \\"ab\\" strings2 = [\\"aaaa\\", \\"aaab\\", \\"aabaa\\"] result2 = analyze_string_patterns(strings2) print(result2) # Output: \\"aa\\" strings3 = [\\"xyz\\", \\"wxyz\\", \\"zx\\"] result3 = analyze_string_patterns(strings3) print(result3) # Output: \\"xz\\" ``` # Constraints - The input list will contain up to 1000 strings. - Each string will consist of up to 100 characters. - The strings will contain only lowercase alphabets (a-z). # Explanation For the input `[\\"abcab\\", \\"bca\\", \\"cab\\"]`, we analyze all substrings of length 2 or more: - \\"ab\\" appears in the first string and the last string. - \\"bc\\" appears in the first string and the second string. - \\"ca\\" appears multiple times. Although \\"ab\\", \\"bc\\", and \\"ca\\" may have similar frequencies, \\"ab\\" would be returned since it is lexicographically smallest.","solution":"from collections import defaultdict def analyze_string_patterns(strings): Analyzes a list of strings and returns the most common substring of length at least 2. In case of a tie, returns the lexicographically smallest substring. if not strings: return \\"\\" substring_count = defaultdict(int) for s in strings: length = len(s) for i in range(length): for j in range(i + 2, length + 1): substring = s[i:j] substring_count[substring] += 1 if not substring_count: return \\"\\" max_freq = max(substring_count.values()) most_common_substrings = [k for k, v in substring_count.items() if v == max_freq] most_common_substrings.sort() return most_common_substrings[0]"},{"question":"Craft a function that scrupulously validates a given sequence of bracket types (including but not limited to parentheses (), square brackets [], and curly braces {}). The function should yield a boolean verdict that confirms if every opening bracket possesses a corresponding and correctly positioned closing counterpart, ensuring complete and accurate nesting throughout the sequence.","solution":"def validate_brackets(sequence): Validates if the sequence of brackets is balanced and correctly nested. Parameters: sequence (str): The string containing the sequence of brackets. Returns: bool: True if the sequence is valid, False otherwise. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in sequence: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Create a Python function called `car_rental_price` that calculates the total cost of renting a car based on the following pricing rules: 1. The base daily rate is 40. 2. If the car is rented for 3 or more days, there is a discount of 20. 3. If the car is rented for 7 or more days, there is a discount of 50. The function should take an integer input representing the number of days the car is rented and return a string in the following format: `\\"The total cost for renting the car for X days is: Y\\"` Where `X` is the input number of days and `Y` is the total rental cost after applying the appropriate discount. Example usages: ```python print(car_rental_price(2)) # Output: The total cost for renting the car for 2 days is: 80 print(car_rental_price(4)) # Output: The total cost for renting the car for 4 days is: 140 print(car_rental_price(8)) # Output: The total cost for renting the car for 8 days is: 270 ``` Write the function `car_rental_price` below:","solution":"def car_rental_price(days): Calculates the total cost of renting a car based on the number of rental days. The base daily rate is 40. Discounts are applied based on the number of days rented: - 20 discount for 3 or more days - 50 discount for 7 or more days Args: days (int): Number of days the car is rented. Returns: str: Description with the total cost of renting the car. base_rate = 40 total_cost = base_rate * days if days >= 7: total_cost -= 50 elif days >= 3: total_cost -= 20 return f\\"The total cost for renting the car for {days} days is: {total_cost}\\""},{"question":"Write a function in Python that performs the following tasks: - Accepts a list of integers which can contain duplicate elements and both positive and negative numbers. - Returns a new list where each element is the sum of its previous elements in the input list. If an element is negative, it should reset the sum and begin anew. - If the input list is empty, the output list should also be empty. For example, given the input list [1, 2, -3, 4, 5, -1, 6], the output should be [1, 3, -3, 4, 9, -1, 6], where the sum restarts after each negative number.","solution":"def cumulative_sum_with_reset(numbers): Returns a list where each element is the sum of previous elements in the input list. The sum resets to the current element when encountering a negative number. if not numbers: return [] result = [] current_sum = 0 for num in numbers: if num < 0: current_sum = num else: current_sum += num result.append(current_sum) if num < 0: current_sum = 0 return result"},{"question":"Create a function that accepts a string representing a binary number and returns the number of \'1\'s in its binary representation. For example, given the input \\"1101010\\", the function should return 4.","solution":"def count_ones(binary_string): Returns the number of \'1\'s in the given binary string. :param binary_string: a string representing a binary number :return: the number of \'1\'s in the binary string return binary_string.count(\'1\')"},{"question":"Given a string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', write an algorithm to determine if the input string is valid. An input string is valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. Examples: - Input: \\"()\\", Output: True - Input: \\"()[]{}\\", Output: True - Input: \\"(]\\", Output: False - Input: \\"([)]\\", Output: False - Input: \\"{[]}\\", Output: True Implement a function `isValid(s: str) -> bool` to solve this problem. The function should have a time complexity of O(n), where n is the length of the input string. Consider edge cases such as: - An empty string should return True. - A string with mismatched or improperly ordered brackets should return False.","solution":"def isValid(s: str) -> bool: Determine if the input string containing only characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is valid. An input string is valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. :param s: input string :return: True if the input string is valid, False otherwise # Define a matching map for parentheses matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} # Use a stack to track the opening parentheses stack = [] for char in s: if char in matching_parentheses: # Pop the last opening parenthesis from the stack if it\'s a closing parenthesis top_element = stack.pop() if stack else \'#\' if matching_parentheses[char] != top_element: return False else: # Push every opening parenthesis to the stack stack.append(char) # For the string to be valid, the stack should be empty return not stack"},{"question":"Given a matrix of integers where each row is sorted in ascending order, write a function that searches for a given target value in the matrix. If the target is found, return its position in the format (row_index, col_index). If the target is not found, return (-1, -1). The function should aim to have a time complexity better than O(n*m), where n is the number of rows and m is the number of columns. Here is a sample matrix and target value: ```python matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 5 ``` Points to consider while solving the problem: 1. Ensure that the function handles an empty matrix or an empty row properly; 2. Utilize the sorted property of the rows for efficient searching; 3. Provide a sample run to validate your function.","solution":"def search_matrix(matrix, target): Searches for the target value in the given matrix. Each row in the matrix is sorted in ascending order. Returns the position (row_index, col_index) if found, otherwise returns (-1, -1). :param matrix: List of List of integers :param target: Integer value to be searched :return: Tuple (row_index, col_index) or (-1, -1) if not matrix or not matrix[0]: return (-1, -1) rows, cols = len(matrix), len(matrix[0]) row, col = 0, cols - 1 # Start from the top-right corner while row < rows and col >= 0: if matrix[row][col] == target: return (row, col) elif matrix[row][col] > target: col -= 1 # Move left else: row += 1 # Move down return (-1, -1) # Target not found"},{"question":"Write a function that takes in a list of integers and returns a new list containing all the elements of the original list but with each prime number replaced by the nearest prime number that is greater than or equal to it. If the input list is empty, return an empty list. The function should optimize for runtime efficiency. Example: ``` Input: [10, 15, 17, 25] Output: [11, 17, 17, 29] Input: [] Output: [] ``` Note: You may assume the input list contains non-negative integers only.","solution":"def is_prime(n): Check if a number is a prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def next_prime(n): Find the next prime greater than or equal to n. if n <= 1: return 2 prime = n while not is_prime(prime): prime += 1 return prime def replace_with_next_primes(lst): Replaces each prime number in the list with the nearest prime number that is greater than or equal to it. return [next_prime(num) for num in lst]"},{"question":"Create a function that can determine the length of the longest substring with all unique characters from a given string. The function should handle various inputs including empty strings and strings with repeating characters without errors. Given the below piece of code, it does not correctly identify the longest substring with unique characters. Modify it to handle different edge cases and accurately find the length of the longest substring with all unique characters. For Example: \'pwwkew\' ```python def longestUniqueSubstring(s): max_len = 0 for i in range(len(s)): seen = set() cur_len = 0 for j in range(i, len(s)): if s[j] not in seen: seen.add(s[j]) cur_len += 1 else: break if cur_len > max_len: max_len = cur_len return max_len print(longestUniqueSubstring(\'pwwkew\')) ``` Hint: Consider using a sliding window technique to improve the efficiency of your solution. Be prepared to discuss the time complexity and space complexity of your optimized approach, as well as its potential edge cases and limitations.","solution":"def longestUniqueSubstring(s): Finds the length of the longest substring with all unique characters. if not s: return 0 start = 0 max_len = 0 seen = {} for end in range(len(s)): if s[end] in seen and seen[s[end]] >= start: start = seen[s[end]] + 1 seen[s[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Write a function that takes a list of integers and returns a new list where each element is the product of all the integers in the original list except the one at the current index. For example, given the list `[1, 2, 3, 4]`, the output should be `[24, 12, 8, 6]`. Note: Division is not allowed to solve this problem.","solution":"def product_except_self(nums): Returns a list of products where each element is the product of all the integers in the original list except the one at the current index. Division is not allowed. length = len(nums) # Initialize output array output = [1] * length # Calculate prefix products prefix = 1 for i in range(length): output[i] = prefix prefix *= nums[i] # Calculate suffix products and multiply to each element in output array suffix = 1 for i in range(length - 1, -1, -1): output[i] *= suffix suffix *= nums[i] return output"},{"question":"Given an array of integers `nums`, return the minimum difference between the maximum and minimum values in any subarray of length `k`. # Example ``` Input: nums = [9, 4, 1, 7], k = 2 Output: 2 Explanation: The subarrays of length 2 are: - [9, 4] with a difference of 5 - [4, 1] with a difference of 3 - [1, 7] with a difference of 6 The minimum difference is 2 ``` # Constraints - 1 <= `k` <= `nums.length` <= 10^5 - 0 <= `nums[i]` <= 10^9","solution":"def min_difference_in_subarrays(nums, k): Returns the minimum difference between the maximum and minimum values in any subarray of length k. if k == 1: return 0 nums.sort() min_difference = float(\'inf\') for i in range(len(nums) - k + 1): min_difference = min(min_difference, nums[i + k - 1] - nums[i]) return min_difference"},{"question":"Create a Python function that takes an integer array as input and returns the length of the longest contiguous subarray with an equal number of 0s and 1s. If no such subarray exists, the function should return 0. Provide detailed comments and docstrings within your code.","solution":"def find_max_length(nums): Finds the length of the longest contiguous subarray with an equal number of 0s and 1s. Args: nums (list of int): The input array containing integers (0s and 1s). Returns: int: The length of the longest contiguous subarray with equal number of 0s and 1s. # Dictionary to store the first occurrence of a given count count_dict = {0: -1} max_len = 0 count = 0 for i, num in enumerate(nums): # Increment count for 1 and decrement for 0 count += 1 if num == 1 else -1 if count in count_dict: # If the count is seen before, it means the subarray between previous index and current index has equal 0s and 1s max_len = max(max_len, i - count_dict[count]) else: # Store the first occurrence of the count count_dict[count] = i return max_len"},{"question":"Write a function in Python that receives a list of integers and performs the following operations: 1. Find all the prime numbers in the list. 2. Compute the factorial of each prime number. 3. Return a dictionary where the keys are the prime numbers and the values are their respective factorials. Note: - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. - The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. For example, given the list `[2, 3, 4, 5, 6, 7, 8, 9, 10]`, your function should return `{2: 2, 3: 6, 5: 120, 7: 5040}`.","solution":"from math import factorial def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def prime_factorials(numbers): primes = [num for num in numbers if is_prime(num)] return {prime: factorial(prime) for prime in primes}"},{"question":"Write a function `find_median_sorted_arrays` that takes two sorted arrays of integers, `arr1` and `arr2`, and returns the median of the combined sorted array. The overall run-time complexity should be O(log (m+n)), where m and n are the lengths of `arr1` and `arr2` respectively. The solution should handle both odd and even length combined arrays. ```python def find_median_sorted_arrays(arr1, arr2): # Your code here pass # Example usage: # arr1 = [1, 3] # arr2 = [2] # Output: 2.0 # arr1 = [1, 2] # arr2 = [3, 4] # Output: 2.5 ```","solution":"def find_median_sorted_arrays(arr1, arr2): Function to find the median of two sorted arrays. :param arr1: List[int] - first sorted array :param arr2: List[int] - second sorted array :return: float - median of the merged sorted arrays def find_kth(arr1, arr2, k): if not arr1: return arr2[k] if not arr2: return arr1[k] idx1, idx2 = len(arr1) // 2, len(arr2) // 2 med1, med2 = arr1[idx1], arr2[idx2] # When k is bigger than the sum of a and b\'s median indices if idx1 + idx2 < k: # if med1 is bigger than med2, med2 can\'t be a kth element if med1 > med2: return find_kth(arr1, arr2[idx2 + 1:], k - idx2 - 1) else: return find_kth(arr1[idx1 + 1:], arr2, k - idx1 - 1) else: # if med1 is less than or equal to med2, med2 can\'t be a kth element if med1 > med2: return find_kth(arr1[:idx1], arr2, k) else: return find_kth(arr1, arr2[:idx2], k) len_total = len(arr1) + len(arr2) if len_total % 2 == 1: return find_kth(arr1, arr2, len_total // 2) else: return (find_kth(arr1, arr2, len_total // 2 - 1) + find_kth(arr1, arr2, len_total // 2)) / 2.0"},{"question":"Write a function that takes an integer `n` and returns the sum of all integers between 1 and `n` that are divisible by either 2, 3, or 5. If `n` is less than 1, the function should return 0.","solution":"def sum_divisible_by_2_3_5(n): Returns the sum of all integers between 1 and n that are divisible by either 2, 3, or 5. If n is less than 1, the function returns 0. if n < 1: return 0 return sum(i for i in range(1, n+1) if i % 2 == 0 or i % 3 == 0 or i % 5 == 0)"},{"question":"Write a Python function that takes a list of strings representing file paths as input and organizes them into a hierarchical dictionary structure. The dictionary should represent the file directory tree where each key is a directory name and the value is either a dictionary of subdirectories/files or None if the key is a file.","solution":"def create_directory_structure(paths): Takes a list of strings representing file paths as input and organizes them into a hierarchical dictionary structure. root = {} for path in paths: parts = path.split(\'/\') current_level = root for part in parts[:-1]: current_level = current_level.setdefault(part, {}) current_level[parts[-1]] = None return root"},{"question":"Design a function `merge_and_intersect` that takes two lists of integers as arguments. The function should return a tuple containing two lists: 1. The first list should contain all elements that appear in either of the input lists (union), without duplicates. 2. The second list should contain only those elements that appear in both input lists (intersection), without duplicates. **Constraints:** - Each list contains non-negative integers. - The lists can be of different lengths. - Try to achieve an efficient solution in terms of time and space complexity. **Example:** ```python def merge_and_intersect(list1, list2): # Your code here # Example usage: list1 = [1, 3, 4, 6, 7, 9] list2 = [1, 2, 4, 5, 9, 10] result = merge_and_intersect(list1, list2) print(result) # Output: ([1, 2, 3, 4, 5, 6, 7, 9, 10], [1, 4, 9]) ``` **Explanation:** - The union of the input lists is: [1, 2, 3, 4, 5, 6, 7, 9, 10] - The intersection of the input lists is: [1, 4, 9]","solution":"def merge_and_intersect(list1, list2): This function returns a tuple containing two lists: 1. The union of list1 and list2 without duplicates. 2. The intersection of list1 and list2 without duplicates. Args: list1 (list): First list of integers. list2 (list): Second list of integers. Returns: tuple: A tuple containing the union and intersection of the two lists. set1 = set(list1) set2 = set(list2) union = list(set1.union(set2)) intersection = list(set1.intersection(set2)) return (union, intersection)"},{"question":"Explain the significance of immutability in functional programming. Discuss how immutability can both aid and hinder program development, citing examples in languages such as Haskell or Clojure. Additionally, provide strategies that proficient developers can implement to leverage immutability for creating robust and maintainable code.","solution":"def explain_immutability(): Explains the significance of immutability in functional programming. Immutability refers to the state of an object that cannot be modified after it is created. In functional programming, immutability is a core principle that promotes safer and more predictable code. Here\'s why immutability is significant: 1. **Predictability**: When data is immutable, functions that use and produce it are much more predictable since values cannot be altered unexpectedly. 2. **Concurrency**: Immutability makes it easier to write concurrent and parallel programs since there is no need to worry about shared mutable state and the associated race conditions. 3. **Debugging and Testing**: Programs with immutable data are easier to debug and test, because data does not change state unpredictably, which simplifies understanding of the program flow and logic. # Examples - **Haskell**: In Haskell, immutability is strictly enforced. All data by default cannot be modified after creation. For example, lists and other data structures in Haskell are immutable. - **Clojure**: In Clojure, data structures like lists, vectors, sets, and maps are immutable by default. # Pros and Cons of Immutability Pros: - **Safety**: Immutable data eliminates accidental modification, leading to fewer bugs. - **Simplicity**: It simplifies the reasoning about the state of data at any point in time. - **Branching and History**: Supports safe branching and snapshotting of data, useful for undo functionality. Cons: - **Performance**: Frequent creation of new immutable structures can lead to performance overhead. - **Memory Usage**: May require more memory as old versions of structures are retained. # Strategies for Leveraging Immutability - **Persistent Data Structures**: Use data structures that are designed to be efficient in an immutable context. Many functional languages provide these out-of-the-box. - **Referential Transparency**: Write functions that produce outputs solely dependent on their inputs, without side effects. - **Functional Patterns**: Embrace functional programming patterns, like map, reduce, and filter, for processing collections without mutating them. By effectively leveraging immutability, developers can create software that is both robust and maintainable, minimizing bugs related to state changes. return { \\"significance\\": [ \\"Predictability\\", \\"Concurrency\\", \\"Debugging and Testing\\" ], \\"examples\\": { \\"Haskell\\": \\"Lists and other data structures are immutable by default.\\", \\"Clojure\\": \\"Lists, vectors, sets, and maps are immutable by default.\\" }, \\"pros\\": [ \\"Safety\\", \\"Simplicity\\", \\"Branching and History\\" ], \\"cons\\": [ \\"Performance\\", \\"Memory Usage\\" ], \\"strategies\\": [ \\"Persistent Data Structures\\", \\"Referential Transparency\\", \\"Functional Patterns\\" ] }"},{"question":"Develop a program to simulate a basic package delivery system. In this system, packages are delivered to users through a series of delivery hubs. The path from the central hub (warehouse) to the end-user\'s address involves multiple intermediate hubs based on a defined route. Each package has a unique tracking ID, a sender\'s address, a destination address, and a list of hubs it must pass through in sequence. The program should include: 1. A class `Hub` that represents a delivery hub. Each hub should have an identifier and a list of neighboring hubs. 2. A class `Package` that holds the tracking ID, sender\'s address, recipient\'s address, current hub, and the route it must follow. 3. A functionality to initialize hubs and their connections (routes between each hub). 4. A method to add packages to the system specifying their routes. 5. A method to move packages from their current hub to the next hub in their route. 6. A method to check if a package has reached its destination. Implement the provided data structures and methods in a programming language of your choice. Additionally, write a function to simulate the delivery of multiple packages, showing their movement from the warehouse to the end-user\'s address, including updating their current location at each step.","solution":"class Hub: def __init__(self, identifier): self.identifier = identifier self.neighbors = [] def add_neighbor(self, neighbor): self.neighbors.append(neighbor) class Package: def __init__(self, tracking_id, sender_address, recipient_address, route): self.tracking_id = tracking_id self.sender_address = sender_address self.recipient_address = recipient_address self.route = route self.current_hub = route[0] if route else None def move_to_next_hub(self): if self.current_hub and self.route: next_hub_index = self.route.index(self.current_hub) + 1 if next_hub_index < len(self.route): self.current_hub = self.route[next_hub_index] def has_reached_destination(self): return self.current_hub == self.route[-1] def initialize_hubs(hub_ids, connections): hubs = {hid: Hub(hid) for hid in hub_ids} for h1, h2 in connections: hubs[h1].add_neighbor(hubs[h2]) hubs[h2].add_neighbor(hubs[h1]) return hubs def add_package(packages, package): packages.append(package) def move_packages(packages): for package in packages: package.move_to_next_hub() def simulate_delivery(packages): while not all(package.has_reached_destination() for package in packages): move_packages(packages)"},{"question":"Create a function that takes a list of integers and a target sum as input, and returns true if there are two distinct elements in the list whose sum is equal to the target sum, and false otherwise. For example, given the list [5, 3, 9, 1, 7] and the target sum of 8, the function should return true since 1 and 7 add up to 8. If the list were [2, 4, 6], the function should return false for a target sum of 12 as no two distinct elements add up to 12.","solution":"def has_pair_with_sum(numbers, target_sum): Returns True if there are two distinct elements in the list whose sum is equal to the target sum, otherwise returns False. seen = set() for number in numbers: complement = target_sum - number if complement in seen: return True seen.add(number) return False"},{"question":"Create a system that tracks and manages employee attendance for a company. Each employee has a unique ID, name, and a record of attendance. The system should allow the following functionalities: 1. **Mark Attendance**: When an employee arrives, their attendance is recorded with the current date and time. 2. **View Attendance History**: Display the attendance history of a specific employee in a tabular format, sorted by date (most recent first). 3. **Edit Attendance Record**: Administrators can update the time of a previously recorded attendance entry. 4. **Filter by Date**: Option to view attendance records for a specific date range. ```python # Sample Employee Data employees = [ {\'id\': 1, \'name\': \'John Doe\'}, {\'id\': 2, \'name\': \'Alice Smith\'}, ] # Sample Attendance Records attendance_records = [ {\'employee_id\': 1, \'date\': \'2023-10-11\', \'time\': \'09:00\'}, {\'employee_id\': 2, \'date\': \'2023-10-11\', \'time\': \'09:05\'}, ] # Your implementation here # Example Function Call: mark_attendance(employee_id=1) view_attendance_history(employee_id=2) edit_attendance_record(employee_id=1, date=\'2023-10-11\', time=\'09:30\') filter_attendance_by_date(start_date=\'2023-10-10\', end_date=\'2023-10-11\') ``` **Requirements:** 1. Ensure the `mark_attendance` function records the current date and time accurately. 2. Implement the `view_attendance_history` function such that it shows the data in descending order of date. 3. The `edit_attendance_record` function should only be accessible to administrators and should update the specified attendance record. 4. The `filter_attendance_by_date` function should return records within the given date range.","solution":"from datetime import datetime # Employee data employees = [{\'id\': 1, \'name\': \'John Doe\'}, {\'id\': 2, \'name\': \'Alice Smith\'}] # Attendance records attendance_records = [ {\'employee_id\': 1, \'date\': \'2023-10-11\', \'time\': \'09:00\'}, {\'employee_id\': 2, \'date\': \'2023-10-11\', \'time\': \'09:05\'}, ] def mark_attendance(employee_id): now = datetime.now() date_str = now.strftime(\'%Y-%m-%d\') time_str = now.strftime(\'%H:%M\') attendance_records.append({\'employee_id\': employee_id, \'date\': date_str, \'time\': time_str}) def view_attendance_history(employee_id): records = [record for record in attendance_records if record[\'employee_id\'] == employee_id] records.sort(key=lambda x: x[\'date\'], reverse=True) return records def edit_attendance_record(employee_id, date, time, admin=True): if not admin: return \\"Access Denied\\" for record in attendance_records: if record[\'employee_id\'] == employee_id and record[\'date\'] == date: record[\'time\'] = time return \\"Record Updated\\" return \\"Record Not Found\\" def filter_attendance_by_date(start_date, end_date): start_date_dt = datetime.strptime(start_date, \'%Y-%m-%d\') end_date_dt = datetime.strptime(end_date, \'%Y-%m-%d\') filtered_records = [ record for record in attendance_records if start_date_dt <= datetime.strptime(record[\'date\'], \'%Y-%m-%d\') <= end_date_dt ] return filtered_records"},{"question":"Describe a file system structure that would be optimal for use in a large-scale distributed database application. Consider factors such as scalability, redundancy, security, and performance. Explain how your proposed file system handles data distribution across multiple nodes, ensures data integrity, and provides efficient access and retrieval mechanisms. Additionally, discuss any potential challenges and how they might be mitigated.","solution":"class DistributedFileSystem: def __init__(self, nodes): self.nodes = nodes # List of nodes in the distributed system self.file_allocation_table = {} # Mapping of file paths to node locations def add_file(self, file_path, data): Adds a file to the distributed file system. Parameters: file_path (str): The path of the file. data (str): The data to be stored in the file. Returns: bool: True if the file is added successfully, False otherwise. # Select node based on load balancing strategy (e.g., round robin) node = self._select_node() # Simulate storing file in node node.store_file(file_path, data) # Update file allocation table self.file_allocation_table[file_path] = node return True def get_file(self, file_path): Retrieves a file from the distributed file system. Parameters: file_path (str): The path of the file to retrieve. Returns: str: The data of the file. node = self.file_allocation_table.get(file_path) if node: return node.get_file(file_path) else: raise FileNotFoundError(\\"File not found in file allocation table\\") def _select_node(self): Selects a node based on load balancing strategy. Returns: Node: The selected node. # Example: Simple round robin implementation selected_node = self.nodes.pop(0) self.nodes.append(selected_node) return selected_node class Node: def __init__(self, name): self.name = name self.files = {} # Local storage of files def store_file(self, file_path, data): Stores a file on the node. Parameters: file_path (str): The path of the file to store. data (str): The data to store in the file. self.files[file_path] = data def get_file(self, file_path): Retrieves a file from the node. Parameters: file_path (str): The path of the file to retrieve. Returns: str: The data of the file. return self.files[file_path]"},{"question":"Given a list of integers, write a function to check if there exists a pair of elements in the list that sum up to a given target number. Your function should return a boolean value: `True` if such a pair exists, and `False` otherwise. To clarify, you need to return `True` if there are two distinct elements `a` and `b` in the list such that `a + b = target`. You should try to achieve this with a time complexity of O(n). # Input - `lst`: A list of integers (e.g., [2, 7, 11, 15]) - `target`: An integer representing the target sum (e.g., 9) # Output - Return `True` if there exists two distinct elements in the list whose sum equals the target, `False` otherwise. # Examples 1. Input: lst = [1, 3, 5, 7, 9], target = 12 Output: True Explanation: 3 + 9 = 12 2. Input: lst = [5, 6, 1, -1], target = 4 Output: True Explanation: 5 + (-1) = 4 3. Input: lst = [2, 3, 8], target = 6 Output: False Explanation: There are no two numbers that add up to 6 # Constraints - The elements of the list are unsorted. - The list can contain positive and negative integers. - The function should be optimized for time complexity, aiming to run in O(n) time. - You cannot use the same element twice to form the sum.","solution":"def has_pair_with_sum(lst, target): Checks if there are two distinct elements in the list that sum up to the target. Parameters: lst (list): A list of integers. target (int): The target sum. Returns: bool: True if there exists two distinct elements that sum to the target, False otherwise. seen_numbers = set() for number in lst: if target - number in seen_numbers: return True seen_numbers.add(number) return False"},{"question":"Write a Python function to find the sum of all prime numbers between two given numbers (inclusive). The function should take two integers as input and return the calculated sum. If there are no prime numbers in the given range, the function should return 0.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes(a, b): Returns the sum of all prime numbers between a and b (inclusive). return sum(x for x in range(a, b + 1) if is_prime(x))"},{"question":"Compute the total waiting time for a list of bank customers based on their transaction times using a queue system. Each customer is processed in the order they arrive, and the waiting time for each customer is defined as the time spent in the queue before starting their transaction. Parameters: Your function will receive an array of transaction times (in minutes) for each customer. The function should return the total waiting time for all customers. For example, consider the following transaction times: [5, 3, 8, 2] The first customer is processed immediately and has a waiting time of 0 minutes. The second customer waits for the first customer to finish, resulting in a waiting time of 5 minutes. The third customer waits for the first and second customers, resulting in a waiting time of 5 + 3 = 8 minutes. The fourth customer waits for the first, second, and third customers, resulting in a waiting time of 5 + 3 + 8 = 16 minutes. Thus, the total waiting time for all customers would be: 0 + 5 + 8 + 16 = 29 minutes. Your implementation should efficiently compute the total waiting time adhering to the given transaction times.","solution":"def total_waiting_time(transaction_times): Computes the total waiting time for a list of bank customers based on their transaction times. Parameters: transaction_times (list of int): List of transaction times for each customer. Returns: int: Total waiting time for all customers. total_waiting = 0 current_waiting = 0 for i in range(0, len(transaction_times) - 1): current_waiting += transaction_times[i] total_waiting += current_waiting return total_waiting"},{"question":"Write a function called `max_min_difference` that takes a list of integers as input and returns the absolute difference between the largest and smallest numbers in the list. If the list has less than 2 elements, the function should return 0. Implement the function in Python and write a simple test case to verify the correctness of your code. ```python def max_min_difference(arr): if len(arr) < 2: return 0 return max(arr) - min(arr) # Test case print(max_min_difference([3, 1, 9, 7])) # Should print 8, as 9 - 1 = 8 ```","solution":"def max_min_difference(arr): Returns the absolute difference between the largest and smallest numbers in the list. If the list has less than 2 elements, the function returns 0. if len(arr) < 2: return 0 return abs(max(arr) - min(arr))"},{"question":"Write a function to find the longest substring of a given string that contains at most two distinct characters. The function should return the length of this substring. **Input:** - A single string `s`, where `1 <= s.length <= 10^5` and `s` consists of lowercase English letters. **Output:** - An integer representing the length of the longest substring that contains at most two distinct characters. **Example:** - Input: \\"eceba\\" - Output: 3 - Explanation: The longest substring with at most two distinct characters is \\"ece\\", which has a length of 3. - Input: \\"ccaabbb\\" - Output: 5 - Explanation: The longest substring with at most two distinct characters is \\"aabbb\\", which has a length of 5.","solution":"def length_of_longest_substring_two_distinct(s: str) -> int: Returns the length of the longest substring that contains at most two distinct characters. if len(s) == 0: return 0 left, right = 0, 0 max_length = 0 char_count = {} while right < len(s): char = s[right] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 while len(char_count) > 2: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Develop a Python function named `arrayOddEvenSort` that takes a list of integers as its parameter and returns a new list where all the odd numbers appear in sorted ascending order followed by all the even numbers in sorted descending order. Ensure the function handles edge cases such as empty lists or lists containing only odd or even numbers properly. Additionally, the given list should maintain the original order if there are no odd or even numbers to sort. Example: Input: [5, 3, 2, 8, 1, 4] Output: [1, 3, 5, 8, 4, 2] Input: [7, 3, 11] Output: [3, 7, 11] Input: [] Output: [] Input: [2, 4, 6] Output: [6, 4, 2]","solution":"def arrayOddEvenSort(nums): Returns a new list where all the odd numbers appear in sorted ascending order followed by all the even numbers in sorted descending order. Parameters: nums (list): A list of integers. Returns: list: A list where all the odd numbers are sorted in ascending order followed by all the even numbers in descending order. odds = sorted([x for x in nums if x % 2 != 0]) evens = sorted([x for x in nums if x % 2 == 0], reverse=True) return odds + evens"},{"question":"Write a Python function to implement a basic calculator. The function should accept a string containing a simple mathematical expression and return the result as a float. The expression may contain addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`) operators, as well as parentheses for altering the order of operations. Assume that input strings are always valid mathematical expressions. For instance, given the input `\\"(2 + 3) * 4 / 2\\"`, the function should return `10.0`.","solution":"def basic_calculator(expression): Evaluates a simple mathematical expression and returns the result as a float. The expression can contain +, -, *, / operators and parentheses. Args: expression (str): A string containing the mathematical expression. Returns: float: The result of the evaluation. try: result = eval(expression) return float(result) except Exception as e: raise ValueError(\\"Invalid mathematical expression\\") from e"},{"question":"Write a function that takes a list of students\' names and their corresponding GPAs, and returns a dictionary where the keys are the GPA values (rounded to the nearest tenth) and the values are lists of students who have that GPA. # Aggregate Students by GPA ```python def aggregateStudentsByGPA(students, gpas): gpa_dict = {} for student, gpa in zip(students, gpas): rounded_gpa = round(gpa, 1) if rounded_gpa in gpa_dict: gpa_dict[rounded_gpa].append(student) else: gpa_dict[rounded_gpa] = [student] return gpa_dict # Example students = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eve\\"] gpas = [3.67, 3.92, 3.67, 2.75, 3.92] # Output should be: # {3.7: [\\"Alice\\", \\"Charlie\\"], 3.9: [\\"Bob\\", \\"Eve\\"], 2.8: [\\"David\\"]} ``` Constraints: - The GPAs will be floating point numbers between 0.0 and 4.0. - The number of students will not exceed 100.","solution":"def aggregateStudentsByGPA(students, gpas): Aggregates students by their GPAs rounded to the nearest tenth. Args: students (list of str): List of students\' names. gpas (list of float): List of students\' GPAs. Returns: dict: A dictionary where keys are the rounded GPAs and values are lists of students with that GPA. gpa_dict = {} for student, gpa in zip(students, gpas): rounded_gpa = round(gpa, 1) if rounded_gpa in gpa_dict: gpa_dict[rounded_gpa].append(student) else: gpa_dict[rounded_gpa] = [student] return gpa_dict"},{"question":"Create a function that takes an integer `n` as input and returns a list of strings. Each string in the list represents integers from 1 to n, but for multiples of 3, store \\"Fizz\\" instead of the number and for the multiples of 5, store \\"Buzz\\". For integers which are multiples of both 3 and 5, store \\"FizzBuzz\\". The function should return the final list. Example: Input: n = 15 Output: [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\", \\"Fizz\\", \\"7\\", \\"8\\", \\"Fizz\\", \\"Buzz\\", \\"11\\", \\"Fizz\\", \\"13\\", \\"14\\", \\"FizzBuzz\\"]","solution":"def fizz_buzz(n): Returns a list of strings where each string represents integers from 1 to n, \\"Fizz\\" for multiples of 3, \\"Buzz\\" for multiples of 5, and \\"FizzBuzz\\" for multiples of both 3 and 5. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function named `even_digit_sum` that takes an integer `n` and returns the sum of all even digits present in `n`. If there are no even digits, the function should return 0. For example, for the input `n = 123456`, the function should return `2 + 4 + 6 = 12`. **Function Signature:** ```python def even_digit_sum(n: int) -> int: ``` **Example:** ```python even_digit_sum(123456) -> 12 even_digit_sum(13579) -> 0 even_digit_sum(24081) -> 4 ```","solution":"def even_digit_sum(n: int) -> int: Returns the sum of all even digits present in the integer n. If there are no even digits, the function returns 0. sum_even_digits = 0 for digit in str(n): if int(digit) % 2 == 0: sum_even_digits += int(digit) return sum_even_digits"},{"question":"Design and implement a Python function that takes a list of dictionaries, each containing information about a student (name, age, and grades), and returns a new list of dictionaries with an additional field that calculates the average grade for each student. Ensure the function handles empty grade lists by assigning an average grade of 0 in such cases. Example input: ```python students = [ {\\"name\\": \\"Alice\\", \\"age\\": 20, \\"grades\\": [90, 85, 88]}, {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"grades\\": [78, 82]}, {\\"name\\": \\"Charlie\\", \\"age\\": 23, \\"grades\\": []} ] ``` Example output: ```python [ {\\"name\\": \\"Alice\\", \\"age\\": 20, \\"grades\\": [90, 85, 88], \\"average\\": 87.67}, {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"grades\\": [78, 82], \\"average\\": 80.0}, {\\"name\\": \\"Charlie\\", \\"age\\": 23, \\"grades\\": [], \\"average\\": 0} ] ```","solution":"def calculate_average_grade(students): Takes a list of dictionaries with student information and adds an average grade to each student. Parameters: students (list): A list of dictionaries with keys \'name\', \'age\', and \'grades\'. Returns: list: A new list of dictionaries with an additional \'average\' key. result = [] for student in students: grades = student.get(\'grades\', []) average = sum(grades) / len(grades) if grades else 0 new_student = student.copy() new_student[\'average\'] = round(average, 2) result.append(new_student) return result"},{"question":"Design and implement a function that takes a list of integers and outputs a new list with all duplicate values removed, maintaining the original order of elements. The input list may contain both positive and negative integers. In addition to regular functionality, improve the performance of your function to handle large input sizes efficiently. Address edge cases such as an empty list or a list where all elements are unique. Upon completion, provide a series of test cases demonstrating the robustness and efficiency of your solution under varying conditions.","solution":"def remove_duplicates(int_list): Remove duplicate values from a list of integers while maintaining the original order. Parameters: - int_list (list): List of integers, which may contain both positive and negative values. Returns: - list: A new list with duplicates removed, original order maintained. seen = set() result = [] for num in int_list: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a function that takes a list of strings containing alphanumeric characters and returns a list of all possible letter-case permutations of the input string. For example, for the input string \\"a1b2\\", the function should return [\\"a1b2\\", \\"A1b2\\", \\"a1B2\\", \\"A1B2\\"]. Ignore digits and only change the case of alphabetical characters.","solution":"from itertools import product def letter_case_permutations(s): Returns all possible letter-case permutations of the input string s. def case_permutations(ch): if ch.isalpha(): return [ch.lower(), ch.upper()] return [ch] perm_list = [case_permutations(ch) for ch in s] return [\'\'.join(p) for p in product(*perm_list)]"},{"question":"Given a list of integers, write a Python function to shift elements of the list to the left by a specified number of positions. The elements shifted out of the list should be re-introduced at the end in the same order. The function should handle lists of any length and any shift value, including negative values (which would shift elements to the right). Example: ```python # Input: lst = [1, 2, 3, 4, 5], shift = 2 # Output: [3, 4, 5, 1, 2] # Input: lst = [10, 20, 30, 40, 50], shift = -1 # Output: [50, 10, 20, 30, 40] ```","solution":"def shift_list(lst, shift): Shift elements of the list to the left by a specified number of positions. The elements shifted out should be re-introduced at the end in the same order. Supports negative shift values for right shifts. if not lst: return [] shift = shift % len(lst) # Handle shifts greater than len(lst) return lst[shift:] + lst[:shift]"},{"question":"Implement a function to find the minimum number of operations required to convert a given integer `N` to 1. The allowed operations are: 1. Subtract 1 from the integer. 2. If the integer is divisible by 2, divide it by 2. 3. If the integer is divisible by 3, divide it by 3. The function should return an integer representing the minimum number of operations required. def min_operations_to_one(N): Given an integer N, calculate the minimum number of operations to reduce it to 1 using the allowed operations. Examples: min_operations_to_one(10) should return 3 (10 -> 9 -> 3 -> 1) min_operations_to_one(6) should return 2 (6 -> 3 -> 1) min_operations_to_one(1) should return 0 (1 is already 1)","solution":"def min_operations_to_one(N): Given an integer N, calculate the minimum number of operations to reduce it to 1 using the allowed operations. The allowed operations are: 1. Subtract 1 from the integer. 2. If the integer is divisible by 2, divide it by 2. 3. If the integer is divisible by 3, divide it by 3. Parameters: N (int): The input integer. Returns: int: The minimum number of operations to reduce N to 1. if N == 1: return 0 dp = [0] * (N + 1) for i in range(2, N + 1): dp[i] = dp[i - 1] + 1 if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) return dp[N]"},{"question":"Create a coding exercise where the task is to design and implement a function to convert an input string composed of words separated by spaces into CamelCase. The first word should be lowercase, and subsequent words should have their first letter capitalized. Complete the code below: ```python def to_camel_case(s: str) -> str: Convert a space-separated string into CamelCase format. >>> to_camel_case(\\"hello world\\") \\"helloWorld\\" >>> to_camel_case(\\"convert to camel case\\") \\"convertToCamelCase\\" >>> to_camel_case(\\"alreadyInCamelCase\\") \\"alreadyInCamelCase\\" >>> to_camel_case(\\"\\") \\"\\" words = s.split() if not words: return \\"\\" result = words[0].lower() for word in words[1:]: result += word.capitalize() return result ```","solution":"def to_camel_case(s: str) -> str: Convert a space-separated string into CamelCase format. >>> to_camel_case(\\"hello world\\") \'helloWorld\' >>> to_camel_case(\\"convert to camel case\\") \'convertToCamelCase\' >>> to_camel_case(\\"alreadyInCamelCase\\") \'alreadyInCamelCase\' >>> to_camel_case(\\"\\") \'\' words = s.split() if not words: return \\"\\" result = words[0].lower() for word in words[1:]: result += word.capitalize() return result"},{"question":"Write a function \'find_longest_word\' that takes a string sentence as input and returns the longest word in that sentence. If there are multiple words with the same length, return the first one encountered. The sentence will contain only letters and spaces, and at least one word. The input string does not have to be a grammatically correct sentence. **Examples:** ``` Input: \\"The quick brown fox jumped over the lazy dog\\" Output: \\"jumped\\" Input: \\"Hello world\\" Output: \\"Hello\\" Input: \\"A quick movement of the enemy will jeopardize five gunboats\\" Output: \\"jeopardize\\" ``` Write your code in Python and ensure it handles various edge cases appropriately.","solution":"def find_longest_word(sentence): This function takes a string sentence as input and returns the longest word in that sentence. If there are multiple words with the same length, it returns the first one encountered. words = sentence.split() longest_word = max(words, key=len) return longest_word"},{"question":"Implement a function that accepts a list of integers and an integer k. The function should return the sum of the k largest integers in the list. If k is greater than the length of the list, return the sum of all the integers in the list. Example: ``` Input: numbers = [4, 1, 7, 3, 8, 5], k = 3 Output: 20 # Sum of the three largest numbers: 8 + 7 + 5 ```","solution":"def sum_of_k_largest(numbers, k): Returns the sum of the k largest integers in the list. If k is greater than the length of the list, return the sum of all the integers. if k >= len(numbers): return sum(numbers) sorted_numbers = sorted(numbers, reverse=True) return sum(sorted_numbers[:k])"},{"question":"Refactor the following Python code snippet to utilize list comprehensions for converting all elements in an existing list of integers to their squared values, and return the modified list. def square_elements(input_list): result = [] for i in input_list: result.append(i ** 2) return result","solution":"def square_elements(input_list): Returns a list with the squared values of the integers in the input_list. return [i ** 2 for i in input_list]"},{"question":"Write a Python program to find the first non-repeating character in a given string. If there are no non-repeating characters, return a specific message indicating so.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the given string s. If there are no non-repeating characters, returns \\"No non-repeating character found\\". counts = {} for char in s: counts[char] = counts.get(char, 0) + 1 for char in s: if counts[char] == 1: return char return \\"No non-repeating character found\\""},{"question":"Create a Python function that takes a list of strings and a target string as input, and returns a new list containing only those strings from the original list that start with the target string. Your function should be case-insensitive.","solution":"def strings_starting_with_target(strings_list, target_string): Returns a list of strings that start with the target string (case-insensitive). :param strings_list: List of strings to search through :param target_string: Target string to match the start of each string in the list :return: List of strings that start with the target string target_string_lower = target_string.lower() return [string for string in strings_list if string.lower().startswith(target_string_lower)]"},{"question":"Implement a function in Python to check whether a given string is a palindrome, considering only alphanumeric characters and ignoring cases. Your function should not use any extra space for another string. Additionally, write a function to check if two given strings are anagrams of each other. Provide tests to ensure both functions are working correctly and describe the time complexity of each solution.","solution":"def is_palindrome(s): Checks if the given string is a palindrome, considering only alphanumeric characters and ignoring cases. left, right = 0, len(s) - 1 while left < right: while left < right and not s[left].isalnum(): left += 1 while left < right and not s[right].isalnum(): right -= 1 if s[left].lower() != s[right].lower(): return False left += 1 right -= 1 return True def are_anagrams(s1, s2): Checks if the two given strings are anagrams of each other. from collections import Counter return Counter(s1.replace(\\" \\", \\"\\").lower()) == Counter(s2.replace(\\" \\", \\"\\").lower())"},{"question":"Create a Python function that takes a list of integers and groups them into contiguous sublists where the difference between adjacent numbers is 1. Then, return these sublists in a sorted form (both within each sublist and the list of sublists). For example, if the input list is [1, 2, 4, 5, 6, 8, 9, 10, 12], the function should return [[1, 2], [4, 5, 6], [8, 9, 10], [12]]. Additionally, your function should handle an optional parameter `reverse` which, when set to `True`, sorts the sublists and the list of sublists in descending order instead of ascending order. The default value for `reverse` should be `False`. **Implementation Hints**: - You can start by sorting the input list. - Iterate through the sorted list to form the contiguous sublists. - Use the optional `reverse` parameter to sort the final result accordingly. Make sure your solution is efficient and makes use of Pythonic constructs wherever appropriate.","solution":"def group_and_sort_contiguous_integers(lst, reverse=False): Groups a list of integers into contiguous sublists where the difference between adjacent numbers is 1, and returns these sublists sorted in ascending or descending order. Parameters: lst (list): A list of integers. reverse (bool): If True, sort the sublists and the list of sublists in descending order. Returns: list: List of sorted contiguous sublists. if not lst: return [] # Sort the input list lst.sort() result = [] current_sublist = [lst[0]] for i in range(1, len(lst)): if lst[i] == lst[i - 1] + 1: current_sublist.append(lst[i]) else: result.append(current_sublist) current_sublist = [lst[i]] result.append(current_sublist) # Sort the sublists and the list of sublists result = sorted(result, key=lambda sublist: sublist[0], reverse=reverse) for sublist in result: sublist.sort(reverse=reverse) return result"},{"question":"Devise a function that, given a string containing letters and digits, generates a new string where the letters are sorted in alphabetical order and the digits are sorted in ascending order. The positions of letters and digits in the new string should remain the same respective to each other as in the original string. For example, if the input string is \\"a1d3b4c2\\", the function should return \\"a1b2c3d4\\".","solution":"def sort_letters_digits(s): Given a string containing letters and digits, generates a new string where letters are sorted in alphabetical order and digits are sorted in ascending order. The positions of letters and digits in the new string should remain the same respective to each other as in the original string. letters = sorted([char for char in s if char.isalpha()]) digits = sorted([char for char in s if char.isdigit()]) result = [] letter_index, digit_index = 0, 0 for char in s: if char.isalpha(): result.append(letters[letter_index]) letter_index += 1 elif char.isdigit(): result.append(digits[digit_index]) digit_index += 1 return \'\'.join(result)"},{"question":"Implement a function `compress_string(s)` that takes a string `s` as input and returns a compressed version of the string using the following algorithm: 1. Traverse the string while counting the occurrences of each character. 2. If a character sequence is followed by the same character, the sequence should be replaced by the character followed by the count of occurrences. 3. If a character appears only once consecutively, it should remain unchanged. 4. The compressed string should only be returned if it becomes shorter than the original string; otherwise, return the original string. For example: - Input: \\"aaabbccccd\\" - Output: \\"a3b2c4d\\" - Input: \\"abcd\\" - Output: \\"abcd\\" (since the compressed version is not shorter) Write a function that implements this logic and provide detailed test cases to validate your solution. ```python def compress_string(s): # Your implementation goes here # Example test cases print(compress_string(\\"aaabbccccd\\")) # Output: \\"a3b2c4d\\" print(compress_string(\\"abcd\\")) # Output: \\"abcd\\" print(compress_string(\\"aabbccdd\\")) # Output: \\"aabbccdd\\" (since the compressed version is not shorter) print(compress_string(\\"aabcccdddd\\")) # Output: \\"a2bc3d4\\" ``` Provide a detailed explanation of your approach and the time complexity of your solution. Include additional test cases to validate your implementation. # Explanation: - Describe the steps your function follows to compress the string. - Discuss how the function checks whether the compressed version is shorter than the original string. - Explain the time complexity of your solution, assuming `n` is the length of the input string `s`.","solution":"def compress_string(s): Compresses the string by counting consecutive occurrences of each character. Returns the compressed string only if it is shorter than the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) if count > 1: compressed.append(str(count)) count = 1 # Append the last set of characters compressed.append(s[-1]) if count > 1: compressed.append(str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Write a function that takes a list of integers and returns the maximum difference between any two elements such that the larger element comes after the smaller element. For example, given the list [4, 3, 10, 2, 9, 7], the maximum difference would be 7 (10 - 3). Ensure the function handles edge cases where no such pair exists by returning 0.","solution":"def maximum_difference(nums): Returns the maximum difference between any two elements such that the larger element comes after the smaller element. If no such pair exists, returns 0. if len(nums) < 2: return 0 min_element = nums[0] max_diff = 0 for num in nums[1:]: if num > min_element: max_diff = max(max_diff, num - min_element) min_element = min(min_element, num) return max_diff"},{"question":"Write a function in Python that takes a list of integers as input and arranges them into a matrix with a specified number of rows and columns. The function should return the matrix as a list of lists. If the number of elements in the list is not enough to fill the matrix, the remaining elements should be filled with zeroes from left to right. If there are more elements than needed, only include the required number of elements. Use the provided signature: def list_to_matrix(lst: List[int], rows: int, cols: int) -> List[List[int]]: Example: ```python list_to_matrix([1, 2, 3, 4, 5, 6, 7], 3, 3) ``` Output: ``` [[1, 2, 3], [4, 5, 6], [7, 0, 0]] ``` Example: ```python list_to_matrix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 4) ``` Output: ``` [[1, 2, 3, 4], [5, 6, 7, 8]] ```","solution":"from typing import List def list_to_matrix(lst: List[int], rows: int, cols: int) -> List[List[int]]: Arranges the list of integers into a matrix with the specified number of rows and columns. If the number of elements in the list is not enough to fill the matrix, the remaining elements should be filled with zeroes from left to right. If there are more elements than needed, only include the required number of elements. result = [] total_elements = rows * cols filled_elements = lst[:total_elements] filled_elements.extend([0] * (total_elements - len(filled_elements))) for r in range(rows): result.append(filled_elements[r*cols:(r+1)*cols]) return result"},{"question":"Write a function \'analyze_list\' that processes a list of integers and returns a dictionary with the following statistics: - \'sum\': the total sum of the elements in the list - \'mean\': the average value of the elements in the list - \'median\': the median value of the elements in the list - \'mode\': the most frequently occurring element in the list Consider edge cases, such as an empty list and lists with multiple modes. Ensure your function handles these scenarios appropriately. Example: ```python def analyze_list(lst): # TODO # Input lst = [1, 2, 2, 3, 4] # Output # {\'sum\': 12, \'mean\': 2.4, \'median\': 2, \'mode\': 2} # Input lst = [] # Output # {\'sum\': 0, \'mean\': None, \'median\': None, \'mode\': None} ```","solution":"from collections import Counter import statistics def analyze_list(lst): Returns a dictionary with the sum, mean, median, and mode of the list of integers. if not lst: return {\'sum\': 0, \'mean\': None, \'median\': None, \'mode\': None} data_sum = sum(lst) data_mean = statistics.mean(lst) data_median = statistics.median(lst) data_counter = Counter(lst) max_count = max(data_counter.values()) mode_candidates = [k for k, v in data_counter.items() if v == max_count] data_mode = mode_candidates[0] if max_count > 1 else lst[0] return { \'sum\': data_sum, \'mean\': data_mean, \'median\': data_median, \'mode\': data_mode }"},{"question":"Create a function named `find_missing_number` that takes a list of consecutive numbers (missing a single number) and finds the missing number. The list will contain at least two elements. Example: ```python def find_missing_number(numbers): # Your code here # Examples print(find_missing_number([1, 2, 4, 5, 6])) # Output: 3 print(find_missing_number([10, 11, 12, 14])) # Output: 13 ``` # Guidelines 1. Your solution should work for a list with at least two elements. 2. You can assume the list is always sorted in ascending order. 3. Optimize for time complexity where possible.","solution":"def find_missing_number(numbers): Finds the missing number in a list of consecutive numbers. :param numbers: List of consecutive integers with one number missing. :return: The missing integer in the sequence. # Calculate the expected sum of the sequence n = len(numbers) + 1 expected_sum = (numbers[0] + numbers[-1]) * n // 2 # Calculate the actual sum of the given numbers actual_sum = sum(numbers) # The missing number is the difference between the expected sum and the actual sum return expected_sum - actual_sum"},{"question":"Design a function to merge and sort two large datasets, A and B, where each dataset contains up to one million strings of English words, ensuring that the concatenated list does not contain duplicates. Optimize your algorithm for both time and space. Example: <[\\"apple\\", \\"banana\\", \\"cherry\\"], [\\"banana\\", \\"date\\", \\"fig\\"]>","solution":"def merge_and_sort(A, B): Merge two lists A and B, remove duplicates, and return the sorted result. Args: A (list of str): First list of strings. B (list of str): Second list of strings. Returns: list of str: Merged, de-duplicated, and sorted list of strings. # Combine the two lists and remove duplicates by using set combined_set = set(A).union(set(B)) # Convert the set back to a list and sort it sorted_list = sorted(combined_set) return sorted_list"},{"question":"Write a function, `merge_and_sort`, that takes two sorted lists of integers as input arguments and returns a single list that contains all the elements from both lists in sorted order. The final list must also have all duplicate values removed. The function should be efficient with respect to time complexity. Illustrate the usage of this function with an example. Function signature: ```python def merge_and_sort(list1, list2): # your code here ``` Example: ```python list1 = [1, 3, 4, 5] list2 = [2, 3, 6, 7] result = merge_and_sort(list1, list2) print(result) # Output should be [1, 2, 3, 4, 5, 6, 7] ```","solution":"def merge_and_sort(list1, list2): Merges two sorted lists into one sorted list with all duplicate values removed. merged_list = list(set(list1 + list2)) merged_list.sort() return merged_list # Example usage list1 = [1, 3, 4, 5] list2 = [2, 3, 6, 7] result = merge_and_sort(list1, list2) print(result) # Output should be [1, 2, 3, 4, 5, 6, 7]"},{"question":"Given a binary tree, implement a function `isSymmetric` that checks if the tree is symmetric around its center. A tree is symmetric if the left subtree is a mirror reflection of the right subtree. # Function Signature ```python def isSymmetric(root: TreeNode) -> bool: ``` # Input - `root`: The root node of the binary tree, where `TreeNode` is defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Output - Returns `True` if the tree is symmetric, otherwise `False`. # Examples **Example 1:** ``` Input: 1 / 2 2 / / 3 4 4 3 Output: True ``` **Example 2:** ``` Input: 1 / 2 2 3 3 Output: False ``` # Constraints - The number of nodes in the tree is in the range `[0, 1000]`. - `-100 ≤ Node.val ≤ 100` # Note The function should perform efficiently for large trees, considering time and space complexity. Be sure to account for edge cases such as an empty tree or a tree with just one node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isSymmetric(root: TreeNode) -> bool: if not root: return True def isMirror(left: TreeNode, right: TreeNode) -> bool: if not left and not right: return True if not left or not right: return False return (left.val == right.val) and isMirror(left.left, right.right) and isMirror(left.right, right.left) return isMirror(root.left, root.right)"},{"question":"Implement a function that takes a list of integers and returns a new list containing only the first unique integer encountered when traversing from left to right for each subarray created by shifting one element at a time from the original list. For example, given the list `[3, 4, 4, 3, 5, 6, 6]`, the result should be `[3, 4, 5, 6]` because: - For the subarray `[3, 4, 4, 3, 5, 6, 6]` the first unique is `3`. - For the subarray `[4, 4, 3, 5, 6, 6]` the first unique is `4`. - For the subarray `[4, 3, 5, 6, 6]` the first unique is `3`, but since 3 was already encountered, we look next and find `5`. - For the subarray `[3, 5, 6, 6]` the first unique is `3`, but 3 and 5 were already encountered, next unique is `6`. Write the function `first_unique_subarray_elements(lst: List[int]) -> List[int]` and be sure to optimize for efficiency.","solution":"def first_unique_subarray_elements(lst): Returns a list of the first unique integer encountered in each subarray created by shifting one element at a time from the original list. encountered = set() result = [] for i in range(len(lst)): for j in range(i, len(lst)): if lst[j] not in encountered: encountered.add(lst[j]) result.append(lst[j]) break return result"},{"question":"Write a Python function that rotates a given list of N elements to the left by K positions without using any built-in functions specifically for rotation (e.g., list slicing or collections.deque). For example, given the list `[1, 2, 3, 4, 5]` and K=2, the function should return `[3, 4, 5, 1, 2]`. Ensure that the function handles cases where K is greater than N and cases where K is zero effectively.","solution":"def rotate_left(lst, k): Rotates the list lst to the left by k positions. Parameters: lst (list): The list of elements to be rotated. k (int): The number of positions to rotate the list. Returns: list: The rotated list. n = len(lst) if n == 0: return lst k = k % n # Handle cases where k is greater than n rotated_lst = lst[k:] + lst[:k] return rotated_lst"},{"question":"Implement a function that takes a list of integers as input and returns a list of integers where each element is the product of all the integers in the input list except the one at the current index. You should solve this problem without using division. # Function Signature ```python def product_except_self(nums: List[int]) -> List[int]: pass ``` # Input - `nums` (List[int]): A list of integers, where its length is greater than or equal to 2 and less than or equal to 10^5. Each integer will be between -30 and 30. # Output - List[int]: A list of products such that each element at index `i` is the product of all integers in the input list except `nums[i]`. # Example ```python assert product_except_self([1, 2, 3, 4]) == [24, 12, 8, 6] assert product_except_self([7, -2, -1, 3]) == [6, -21, -42, 14] ``` # Constraints - Your solution should have a time complexity of O(n) and space complexity of O(1) (excluding the output list). - You should not use the division operator to solve this problem. # Additional Notes To achieve the expected complexity and avoid using extra space, consider maintaining an array to store the products of elements to the left and another for the right, then combine them to get the desired result.","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: n = len(nums) result = [1] * n left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Write a function to find all unique permutations of a given string. The function should return these permutations as a list. Ensure the permutations do not contain any duplicate entries even if the input string has repeating characters.","solution":"from itertools import permutations def unique_permutations(s): Returns a list of all unique permutations of the input string s. return sorted(set([\'\'.join(p) for p in permutations(s)]))"},{"question":"<p>The Fibonacci sequence is defined as follows:</p> <ul> <li>F(0) = 0</li> <li>F(1) = 1</li> <li>F(n) = F(n-1) + F(n-2) for n geq 2</li> </ul> <p>The Fibonacci numbers proceed as 0, 1, 1, 2, 3, 5, 8, 13, dots</p> <p>Your task is to write a function that accepts a positive integer n and calculates the sum of the first n Fibonacci numbers. Specifically, if S(n) is the sum of the first n Fibonacci numbers, your function should return S(n).</p> <p>For example, given the input 4, the sequence would be 0, 1, 1, 2, and their sum S(4) = 4. For an input 5, the sequence is 0, 1, 1, 2, 3, and their sum S(5) = 7.</p> <p>Implement the function <code>fibonacci_sum(n: int) -> int</code> which returns the sum of the first n Fibonacci numbers.</p>","solution":"def fibonacci_sum(n: int) -> int: Returns the sum of the first n Fibonacci numbers. if n <= 0: return 0 fib_sum = 0 a, b = 0, 1 for _ in range(n): fib_sum += a a, b = b, a + b return fib_sum"},{"question":"Write a function that takes a string as input and returns the longest word from that string. If there is a tie for the longest word, return the word that appears first in the string. Ignore any punctuation marks and assume that the input string contains only words separated by spaces. For example, given the input \\"hello world, this is a fantastic day!\\", the function should return \\"fantastic\\". If the input string is empty, return an appropriate custom message.","solution":"import re def longest_word(sentence): Returns the longest word from the input string. If there is a tie, returns the word that appears first. Ignores punctuation marks. If the input string is empty, returns a custom message. if not sentence: return \\"The input string is empty.\\" # Remove punctuation using regex words = re.findall(r\'bw+b\', sentence) if not words: return \\"The input string contains no valid words.\\" longest = max(words, key=len) return longest"},{"question":"Define a Python function named \'alternateSum\' which processes a list of integers \'numList\'. The function computes the sum of elements at even indexes (0, 2, 4, ...) and subtracts the sum of elements at odd indexes (1, 3, 5, ...) from it. Implement this with a list comprehension and ensure it handles an empty list by returning 0. Example of how it should work: - A call to alternateSum([1, 2, 3, 4, 5]) yields 3 (1+3+5 - (2+4)) - A call to alternateSum([10, 20, 30, 40]) yields -20 (10+30 - (20+40)) - A call to alternateSum([]) yields 0 Here is an incomplete code snippet: ```python from typing import List def alternateSum(numList: List[int]) -> int: Computes the alternate sum of elements, summing at even indexes and subtracting at odd indexes. >>> alternateSum([1, 2, 3, 4, 5]) 3 >>> alternateSum([10, 20, 30, 40]) -20 >>> alternateSum([]) 0 ```","solution":"from typing import List def alternateSum(numList: List[int]) -> int: Computes the alternate sum of elements, summing at even indexes and subtracting at odd indexes. >>> alternateSum([1, 2, 3, 4, 5]) 3 >>> alternateSum([10, 20, 30, 40]) -20 >>> alternateSum([]) 0 return sum(numList[i] if i % 2 == 0 else -numList[i] for i in range(len(numList)))"},{"question":"Design and implement a Python function that parses a JSON object representing a collection of products, each with a name, price, quantity, and category. The function should return a new JSON object where the products are grouped by category, and within each category, the products are sorted by price in ascending order. Additionally, for each product, add a new field named \'total_cost\', calculated as the product of the price and quantity. # Input A JSON string representing a list of products. Each product has the following structure: ```json [ { \\"name\\": \\"Product1\\", \\"price\\": 100.0, \\"quantity\\": 2, \\"category\\": \\"Category1\\" }, ... ] ``` # Output A JSON string representing a dictionary where keys are categories, and values are lists of products sorted by price within each category. Each product in the list should have an additional field \'total_cost\'. The structure should be: ```json { \\"Category1\\": [ { \\"name\\": \\"Product1\\", \\"price\\": 100.0, \\"quantity\\": 2, \\"category\\": \\"Category1\\", \\"total_cost\\": 200.0 }, ... ], ... } ``` # Constraints - The input JSON string will have at least one product. - Prices and quantities are non-negative numbers. # Example Given the input: ```json [ {\\"name\\": \\"ProductA\\", \\"price\\": 50.0, \\"quantity\\": 2, \\"category\\": \\"Electronics\\"}, {\\"name\\": \\"ProductB\\", \\"price\\": 20.0, \\"quantity\\": 1, \\"category\\": \\"Furniture\\"}, {\\"name\\": \\"ProductC\\", \\"price\\": 75.0, \\"quantity\\": 3, \\"category\\": \\"Electronics\\"} ] ``` The output should be: ```json { \\"Electronics\\": [ {\\"name\\": \\"ProductA\\", \\"price\\": 50.0, \\"quantity\\": 2, \\"category\\": \\"Electronics\\", \\"total_cost\\": 100.0}, {\\"name\\": \\"ProductC\\", \\"price\\": 75.0, \\"quantity\\": 3, \\"category\\": \\"Electronics\\", \\"total_cost\\": 225.0} ], \\"Furniture\\": [ {\\"name\\": \\"ProductB\\", \\"price\\": 20.0, \\"quantity\\": 1, \\"category\\": \\"Furniture\\", \\"total_cost\\": 20.0} ] } ``` Develop a function `group_and_sort_products_by_category(json_data: str) -> str` that implements the above logic.","solution":"import json from collections import defaultdict def group_and_sort_products_by_category(json_data): Parses a JSON object representing a collection of products and returns a new JSON object where the products are grouped by category and sorted by price within each category. Each product has an additional field \'total_cost\'. products = json.loads(json_data) category_dict = defaultdict(list) for product in products: product[\'total_cost\'] = product[\'price\'] * product[\'quantity\'] category = product[\'category\'] category_dict[category].append(product) for category in category_dict: category_dict[category].sort(key=lambda x: x[\'price\']) return json.dumps(category_dict, indent=4)"},{"question":"You are given a list of integer numbers which represent the heights of students in a class, in random order. You need to write a Python function that sorts this list in a non-decreasing order and then returns the median height. The median of a list of numbers is defined as the middle number if the list size is odd, or the average of the two middle numbers if the list size is even. For example: - If the input list is [5, 2, 9, 3, 8], the sorted list is [2, 3, 5, 8, 9], and the median is 5. - If the input list is [1, 3, 2, 5, 6, 4], the sorted list is [1, 2, 3, 4, 5, 6], and the median is (3+4)/2 = 3.5. Write a function `find_median_height(heights: List[int]) -> float` that takes in a list of integers and returns the median height. Ensure your solution handles both odd and even lengths of the list correctly. Consider edge cases where the list might be empty and handle them appropriately.","solution":"from typing import List def find_median_height(heights: List[int]) -> float: Returns the median height from a list of integers representing heights. if not heights: raise ValueError(\\"The list of heights cannot be empty\\") heights.sort() n = len(heights) if n % 2 == 1: median = heights[n // 2] else: median = (heights[(n // 2) - 1] + heights[n // 2]) / 2.0 return median"},{"question":"Write a Python function called `find_max_product` that takes a list of integers as input and returns the maximum product of any three numbers in the list. The function should handle cases where the input list has fewer than three elements by raising a `ValueError` with an appropriate error message. Ensure that the function is efficient enough to handle large lists. Additionally, illustrate how your function works with a brief example in the comments. ```python def find_max_product(nums): if len(nums) < 3: raise ValueError(\\"Input list must contain at least three numbers.\\") nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1]) # Example usage: # nums = [1, 10, -5, 1, -100] # The maximum product of any three numbers is 5000 (-100 * -5 * 10) # print(find_max_product(nums)) # Output: 5000 ```","solution":"def find_max_product(nums): Returns the maximum product of any three numbers in the list. Raises a ValueError if the input list contains fewer than three numbers. Args: nums (List[int]): The list of integers. Returns: int: The maximum product of any three numbers. Example usage: nums = [1, 10, -5, 1, -100] The maximum product of any three numbers is 5000 (-100 * -5 * 10) find_max_product(nums) -> 5000 if len(nums) < 3: raise ValueError(\\"Input list must contain at least three numbers.\\") nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Implement a function that takes a dictionary where the keys are strings and the values are lists of integers. The function should return a new dictionary where each key is mapped to the sum of the squares of its original list\'s elements, but only considering the unique values from those lists. For example: for the input {\\"a\\": [1, 2, 2, 4], \\"b\\": [2, 3, 3], \\"c\\": [4, 4, 4]}, the returned dictionary should be {\\"a\\": 21, \\"b\\": 13, \\"c\\": 16} because: - \\"a\\": unique values [1, 2, 4] -> 1^2 + 2^2 + 4^2 = 21 - \\"b\\": unique values [2, 3] -> 2^2 + 3^2 = 13 - \\"c\\": unique value [4] -> 4^2 = 16 Consider edge cases where the input dictionary is empty or contains empty lists.","solution":"def sum_of_squares_unique_values(input_dict): Takes a dictionary where keys are strings and values are lists of integers. Returns a new dictionary where each key is mapped to the sum of the squares of the unique values of its original list\'s elements. result = {} for key, values in input_dict.items(): unique_values = set(values) # Get unique values sum_of_squares = sum(x**2 for x in unique_values) # Sum of squares result[key] = sum_of_squares return result"},{"question":"You are given an array of integers where each element appears exactly twice, except for one element which appears exactly once. Your task is to implement a function that identifies and returns the single element that appears only once. For example, given the array: `[4, 1, 2, 1, 2]` The function should return: `4` The provided solution must have a linear runtime complexity and use constant extra space. Additionally, write a few unit tests to confirm the correctness of your solution.","solution":"def single_number(nums): Finds the single number in a list where every other number appears twice. :param nums: List of integers where each element appears twice except for one. :return: The single integer that appears only once. result = 0 for num in nums: result ^= num return result"},{"question":"Given a list of transactions where each transaction is represented as a tuple of the form (transaction_id, user_id, transaction_amount, transaction_type, transaction_date), write a function that calculates the total transaction amount for each user and returns a dictionary with user_id as the key and total transaction amount as the value. Additionally, the function should filter out transactions based on the transaction_type if specified. If no transaction_type is provided, consider all transactions. Also, the function should handle erroneous data entries. If the transaction data is not a tuple or does not contain exactly five elements, the function should raise a ValueError with a message indicating the transaction_id and a description of the error. If the transaction_amount is not a numeric value, the function should attempt to convert it to a float. If conversion fails, raise a TypeError with a message indicating the transaction_id and a description of the error. Include transactions within a specific date range if provided. The date range will be given as two strings in \'YYYY-MM-DD\' format. Provide a piece of erroneous code that attempts to solve the problem but fails due to a common mistake. Analyze the code, identify the mistake, and explain how to correct it. Write unit tests to validate the functionality of your code. The unit tests should cover at least the following scenarios: - Transactions with valid data. - Transactions with missing or extra data. - Non-numeric transaction amounts. - Filtering transactions by type. - Including only transactions within a specified date range. - Edge cases like empty input list or missing optional parameters.","solution":"from datetime import datetime def calculate_total_transaction_amount(transactions, transaction_type=None, start_date=None, end_date=None): Calculate total transaction amount for each user. Parameters: transactions (list): List of transactions where each transaction is represented as a tuple (transaction_id, user_id, transaction_amount, transaction_type, transaction_date). transaction_type (str, optional): Filter by specific type. start_date (str, optional): Filter transactions from this date in \'YYYY-MM-DD\' format. end_date (str, optional): Filter transactions up to this date in \'YYYY-MM-DD\' format. Returns: dict: Dictionary with user_id as key and total transaction amount as value. user_totals = {} for transaction in transactions: # Check if transaction is a tuple and contains exactly five elements if not isinstance(transaction, tuple) or len(transaction) != 5: raise ValueError(f\\"Transaction {transaction[0] if len(transaction) > 0 else \'unknown\'}: Invalid transaction format\\") transaction_id, user_id, amount, t_type, t_date = transaction try: amount = float(amount) except ValueError: raise TypeError(f\\"Transaction {transaction_id}: Transaction amount is not a valid number\\") if transaction_type and t_type != transaction_type: continue if start_date and datetime.strptime(t_date, \\"%Y-%m-%d\\") < datetime.strptime(start_date, \\"%Y-%m-%d\\"): continue if end_date and datetime.strptime(t_date, \\"%Y-%m-%d\\") > datetime.strptime(end_date, \\"%Y-%m-%d\\"): continue if user_id in user_totals: user_totals[user_id] += amount else: user_totals[user_id] = amount return user_totals"},{"question":"Create a function that takes a list of integers and returns a dictionary with the following properties for each number: whether it is a prime, whether it is a perfect square, and its factorial value. The function should handle edge cases where the number might be negative or zero. List: [2, 4, 5, -1, 0]","solution":"import math def is_prime(n): Return True if n is a prime number. if n <= 1: return False for i in range(2, int(math.sqrt(n)) + 1): if n % i == 0: return False return True def is_perfect_square(n): Return True if n is a perfect square. if n < 0: return False return int(math.sqrt(n))**2 == n def factorial(n): Return the factorial of n. if n < 0: return None # Factorial for negative numbers is not defined if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result def analyze_numbers(numbers): Analyze a list of numbers for prime, perfect square, and factorial properties. result = {} for number in numbers: result[number] = { \\"is_prime\\": is_prime(number), \\"is_perfect_square\\": is_perfect_square(number), \\"factorial\\": factorial(number) } return result"},{"question":"Write a function `count_trailing_zeros` which takes an integer `n` as input and returns the number of trailing zeros in its factorial. Trailing zeros are formed by factors of 10 in the number, and each 10 is a product of 2 and 5. Note that the function should be efficient and avoid calculating the factorial itself to handle large inputs. def count_trailing_zeros(n):","solution":"def count_trailing_zeros(n): Returns the number of trailing zeros in the factorial of n. count = 0 i = 5 while n >= i: count += n // i i *= 5 return count"},{"question":"**Question: Reverse a Linked List** # Problem Statement: You are given a singly linked list. Write a Python function to reverse the linked list and return its head. # Definitions: - A singly linked list is made up of nodes where each node contains a value and a reference (or link) to the next node in the sequence. - The function should take a ListNode which is the head of the linked list as input and return the new head of the reversed linked list. # Function Signature: ```python def reverseLinkedList(head: ListNode) -> ListNode: ``` # Constraints: - The linked list can have up to 10^4 nodes. - Each node in the linked list contains an integer value. # Examples: **Example 1:** ``` Input: head = 1 -> 2 -> 3 -> 4 -> 5 -> None Output: 5 -> 4 -> 3 -> 2 -> 1 -> None ``` **Example 2:** ``` Input: head = None Output: None ``` **Example 3:** ``` Input: head = 42 -> None Output: None ``` # Notes: 1. You are provided with a ListNode class, which represents each node in the linked list. 2. The ListNode class structure: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` 3. The function should modify the linked list in place, meaning it should not use extra space for another linked list. 4. Handle edge cases where the linked list is empty or contains only one node. # Full Example: Create a linked list, call the function, and print the reversed linked list. ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseLinkedList(head: ListNode) -> ListNode: prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev # Example usage: # Creating a linked list 1 -> 2 -> 3 -> 4 -> 5 -> None head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))) # Reversing the linked list new_head = reverseLinkedList(head) # Printing the reversed linked list current = new_head while current: print(current.val, end=\\" -> \\") current = current.next print(\\"None\\") ``` Output: ``` 5 -> 4 -> 3 -> 2 -> 1 -> None ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseLinkedList(head: ListNode) -> ListNode: Reverses a singly linked list. :param head: ListNode - the head of the linked list :return: ListNode - the new head of the reversed linked list prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Design an algorithm that processes an array of dictionaries representing a collection of books, where each dictionary contains keys for title, author, genre, and year of publication. Write a function that takes this array as input and returns a new dictionary where the keys are genres and the values are lists of books that belong to those genres. Each list should contain books sorted in ascending order of their year of publication. Assume the input array has the following structure: ```python books = [ { \\"title\\": \\"Book A\\", \\"author\\": \\"Author1\\", \\"genre\\": \\"Fiction\\", \\"year\\": 2020 }, { \\"title\\": \\"Book B\\", \\"author\\": \\"Author2\\", \\"genre\\": \\"Non-Fiction\\", \\"year\\": 2018 }, { \\"title\\": \\"Book C\\", \\"author\\": \\"Author1\\", \\"genre\\": \\"Fiction\\", \\"year\\": 2019 }, # more books ] ``` Function signature: ```python def classify_books_by_genre(books: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]: pass ``` Example input: ```python books = [ { \\"title\\": \\"Book A\\", \\"author\\": \\"Author1\\", \\"genre\\": \\"Fiction\\", \\"year\\": 2020 }, { \\"title\\": \\"Book B\\", \\"author\\": \\"Author2\\", \\"genre\\": \\"Non-Fiction\\", \\"year\\": 2018 }, { \\"title\\": \\"Book C\\", \\"author\\": \\"Author1\\", \\"genre\\": \\"Fiction\\", \\"year\\": 2019 } ] ``` Example output: ```python { \\"Fiction\\": [ { \\"title\\": \\"Book C\\", \\"author\\": \\"Author1\\", \\"genre\\": \\"Fiction\\", \\"year\\": 2019 }, { \\"title\\": \\"Book A\\", \\"author\\": \\"Author1\\", \\"genre\\": \\"Fiction\\", \\"year\\": 2020 } ], \\"Non-Fiction\\": [ { \\"title\\": \\"Book B\\", \\"author\\": \\"Author2\\", \\"genre\\": \\"Non-Fiction\\", \\"year\\": 2018 } ] } ```","solution":"from typing import List, Dict, Any def classify_books_by_genre(books: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]: genres = {} for book in books: genre = book[\\"genre\\"] if genre not in genres: genres[genre] = [] genres[genre].append(book) for genre in genres: genres[genre].sort(key=lambda book: book[\\"year\\"]) return genres"},{"question":"Write a function that takes a list of integers and returns a new list containing the squares of all the even numbers from the original list, but exclude any even numbers that are also divisible by 4. For example, given the list [1, 2, 3, 4, 5, 6, 8, 10], the function should return [4, 36, 100] (excluding 4 and 8 which are divisible by 4).","solution":"def square_even_exclude_divisible_by_4(numbers): Returns a list containing the squares of all the even numbers from the original list, excluding any even numbers that are also divisible by 4. Parameters: numbers (list of int): List of integers Returns: list of int: A list containing the squares of the valid even numbers result = [num ** 2 for num in numbers if num % 2 == 0 and num % 4 != 0] return result"},{"question":"Implement a function that calculates the product of all the prime numbers in a given list of integers. Include error handling for non-integer inputs and return an appropriate error message when the input list is empty or contains no prime numbers. ```python def prime_product(numbers: list) -> int: This function takes a list of integers and returns the product of all prime numbers in the list. If there are no prime numbers in the list, it should return an error message. If the input is not a list of integers, the function should return an appropriate error message. For an empty input list, it should return an appropriate error message. >>> prime_product([2, 3, 4, 5, 6]) 30 >>> prime_product([11, 13, 17]) 2431 >>> prime_product([4, 6, 8, 10]) \'Error: No prime numbers in the list.\' >>> prime_product([]) \'Error: Input list is empty.\' >>> prime_product([2, \'three\', 5]) \'Error: Invalid input.\' ```","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def prime_product(numbers: list) -> int: This function takes a list of integers and returns the product of all prime numbers in the list. If there are no prime numbers in the list, it should return an error message. If the input is not a list of integers, the function should return an appropriate error message. For an empty input list, it should return an appropriate error message. if not isinstance(numbers, list): return \'Error: Invalid input.\' if len(numbers) == 0: return \'Error: Input list is empty.\' product = 1 prime_found = False for num in numbers: if not isinstance(num, int): return \'Error: Invalid input.\' if is_prime(num): product *= num prime_found = True if not prime_found: return \'Error: No prime numbers in the list.\' return product"},{"question":"Implement the `find_all_anagrams` function which, given a string s and a non-empty string p, finds all the starting indices of p\'s anagrams in s. Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 10,000. The order of output does not matter. ```python def find_all_anagrams(s: str, p: str): This function finds all starting indices of p\'s anagrams in s. ``` **Examples:** ```python assert find_all_anagrams(\\"cbaebabacd\\", \\"abc\\") == [0, 6] assert find_all_anagrams(\\"abab\\", \\"ab\\") == [0, 1, 2] assert find_all_anagrams(\\"acdbacdacb\\", \\"abc\\") == [3, 7] ``` **Explanation:** 1. In the first example, strings \\"cba\\" (starting index 0) and \\"bac\\" (starting index 6) are anagrams of \\"abc\\". 2. In the second example, strings \\"ab\\" (starting index 0), \\"ba\\" (starting index 1), and \\"ab\\" (starting index 2) are anagrams of \\"ab\\". 3. In the third example, strings \\"bac\\" (starting index 3) and \\"cab\\" (starting index 7) are anagrams of \\"abc\\".","solution":"from collections import Counter def find_all_anagrams(s: str, p: str): This function finds all starting indices of p\'s anagrams in s. result = [] p_count = Counter(p) s_count = Counter() p_length = len(p) for i, char in enumerate(s): s_count[char] += 1 if i >= p_length: if s_count[s[i - p_length]] == 1: del s_count[s[i - p_length]] else: s_count[s[i - p_length]] -= 1 if s_count == p_count: result.append(i - p_length + 1) return result"},{"question":"Consider a sorted array of unique integers. Write a function in Python that finds the fixed point in the array using binary search. A fixed point in an array A is an index i such that A[i] is equal to i. If no such point exists, the function should return -1. After implementing the function, explain the time complexity of your solution. **Function Signature:** ```python def find_fixed_point(arr: list) -> int: # Your code here ``` **Example:** ```python arr = [-10, -5, 0, 3, 7] print(find_fixed_point(arr)) # Output: 3 arr = [0, 2, 5, 8, 17] print(find_fixed_point(arr)) # Output: 0 arr = [-10, -5, 3, 4, 7, 9] print(find_fixed_point(arr)) # Output: -1 ``` **Constraints:** - Do not use linear search. - The function should have a logarithmic time complexity, i.e., O(log n).","solution":"def find_fixed_point(arr: list) -> int: Finds a fixed point in the array where the value is equal to its index. If no such point exists, returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == mid: return mid elif arr[mid] < mid: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function that accepts an integer array and a target integer. The function should determine if there are two distinct elements in the array that add up to the target integer. If such a pair exists, return the indices of the two elements as a tuple (index1, index2). If no such pair exists, return (-1, -1). **Function Signature:** ```python def find_pair_with_sum(arr: list, target: int) -> tuple: pass ``` **Input:** - `arr`: A list of integers where `1 < len(arr) <= 10^4`. - `target`: An integer where `-10^9 <= target <= 10^9`. **Output:** - A tuple of two integers representing the indices of the pair that sums up to the target. If no such pair exists, return (-1, -1). **Example:** ```python assert find_pair_with_sum([2, 7, 11, 15], 9) == (0, 1) assert find_pair_with_sum([1, 2, 3, 4, 5], 10) == (-1, -1) ``` **Notes:** - The input array may contain both negative and positive integers. - Indices returned should be zero-based. - If there are multiple correct answers, return any pair of indices.","solution":"def find_pair_with_sum(arr: list, target: int) -> tuple: Returns the indices of the two distinct elements in the array that add up to the target integer. If no such pair exists, returns (-1, -1). num_to_index = {} for i, num in enumerate(arr): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return (-1, -1)"},{"question":"Design a function `min_distance_to_ones(arr)` that calculates the minimum number of steps each element in a binary array has to take to reach the nearest 1. The input is an array of 0s and 1s, and you need to return a list of the same length where each index i contains the distance to the nearest 1. If an element itself is 1, the distance is 0. Your task is to implement a solution that works efficiently even for large arrays. Initial Code: ```python def min_distance_to_ones(arr): This function takes a binary array arr and returns a list of the same length where each element is replaced by the distance to the nearest 1. For an element that is a 1, its distance is 0. For example: >>> min_distance_to_ones([0, 0, 1, 0, 1, 0]) [2, 1, 0, 1, 0, 1] >>> min_distance_to_ones([1, 0, 0, 0, 1, 0, 0]) [0, 1, 2, 1, 0, 1, 2] # Your code goes here ``` Note: 1. The function should handle cases with no 1s in the array by returning a list with all elements set to the length of the array. 2. You are expected to utilize an efficient algorithm to compute the distances.","solution":"from collections import deque def min_distance_to_ones(arr): This function takes a binary array arr and returns a list of the same length where each element is replaced by the distance to the nearest 1. For an element that is a 1, its distance is 0. If there are no 1s in the array, each element in the output list will be the length of the array. n = len(arr) result = [float(\'inf\')] * n queue = deque() # Enqueue all positions of 1s for i in range(n): if arr[i] == 1: result[i] = 0 queue.append(i) # BFS to calculate the minimum distances while queue: current = queue.popleft() for neighbor in [current - 1, current + 1]: # Check left and right neighbors if 0 <= neighbor < n and result[neighbor] == float(\'inf\'): result[neighbor] = result[current] + 1 queue.append(neighbor) # If no 1s were in the array, fill with the length of the array if all(dist == float(\'inf\') for dist in result): result = [n] * n return result"},{"question":"Develop a function that converts a given string to title case, meaning the first letter of each word is capitalized, and all other letters are in lowercase. The function should correctly handle edge cases such as consecutive spaces and punctuation. Complete the programming function given below: ```python def to_title_case(s: str) -> str: This function takes a string as input and converts it to title case. Title case means that each word starts with a capital letter and all other letters are in lowercase. Words are delimited by whitespace characters and punctuation should not affect the casing of letters. >>> to_title_case(\\"hello world!\\") \\"Hello World!\\" >>> to_title_case(\\" multiple spaces \\") \\" Multiple Spaces \\" >>> to_title_case(\\"hELLO wORLD\\") \\"Hello World\\" >>> to_title_case(\\"a.B\\") \\"A.b\\" ```","solution":"def to_title_case(s: str) -> str: This function takes a string as input and converts it to title case. Title case means that each word starts with a capital letter and all other letters are in lowercase. Words are delimited by whitespace characters and punctuation should not affect the casing of letters. >>> to_title_case(\\"hello world!\\") \\"Hello World!\\" >>> to_title_case(\\" multiple spaces \\") \\" Multiple Spaces \\" >>> to_title_case(\\"hELLO wORLD\\") \\"Hello World\\" >>> to_title_case(\\"a.B\\") \\"A.b\\" words = s.split(\' \') title_cased_words = [word.capitalize() for word in words] return \' \'.join(title_cased_words)"},{"question":"Design a function to balance a binary search tree (BST) which may contain duplicate values. Given an unbalanced BST with n nodes (1 <= n <= 10^5), your task is to write a function that transforms it into a balanced BST while retaining its properties. Your solution should perform the following operations: 1. Traverse the given BST and collect all its elements including duplicates. 2. Use the collected elements to construct a new balanced BST, ensuring that the new tree preserves the order of elements as defined by the BST properties. 3. Write a function that prints the inorder traversal of the new balanced BST. Bonus: If two BSTs are provided, merge them into a single balanced BST and then print its inorder traversal. Requirements: - Optimized time complexity for balancing and merging operations. - Consider edge cases like fully left-skewed or right-skewed BSTs, and BSTs with only one node. Provide well-documented code and clear explanations for each step in your solution.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root): Perform an inorder traversal of the BST and collect values in a list. if root is None: return [] return inorder_traversal(root.left) + [root.val] + inorder_traversal(root.right) def sorted_list_to_bst(nums): Convert a sorted list to a balanced BST. if not nums: return None mid = len(nums) // 2 node = TreeNode(nums[mid]) node.left = sorted_list_to_bst(nums[:mid]) node.right = sorted_list_to_bst(nums[mid+1:]) return node def balance_bst(root): Balance a given BST. elements = inorder_traversal(root) return sorted_list_to_bst(elements) def print_inorder(root): Print the inorder traversal of the BST. elements = inorder_traversal(root) print(\\" \\".join(map(str, elements))) def merge_two_bsts(root1, root2): Merge two BSTs into one balanced BST. elements1 = inorder_traversal(root1) elements2 = inorder_traversal(root2) merged_elements = sorted(elements1 + elements2) return sorted_list_to_bst(merged_elements)"},{"question":"Write a function that identifies if a given string containing only the characters \'L\', \'R\', \'U\', and \'D\' leads back to the starting point after following all the movements described by the string. \'L\' corresponds to a left move, \'R\' to a right move, \'U\' to an upward move, and \'D\' to a downward move. Your function should return `True` if the series of moves returns to the starting point and `False` otherwise. Do not use any external libraries or predefined functions that directly solve this problem. Additionally, analyze the following flawed attempt at solving the problem. Identify the mistake, correct it in your solution, and provide an explanation for the original code\'s failure. ```python def is_back_to_start(moves): x, y = 0, 0 for move in moves: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y -= 1 elif move == \'D\': y += 1 return x == 0 and y == 0 ```","solution":"def is_back_to_start(moves): Determines if the series of movements lead back to the starting point. Parameters: moves (str): A string containing the characters \'L\', \'R\', \'U\', and \'D\' representing movements. Returns: bool: True if the movements lead back to the starting point, False otherwise. x, y = 0, 0 for move in moves: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return x == 0 and y == 0"},{"question":"You are given two strings, `s1` and `s2`, both containing only lowercase letters. Write a function to determine if `s1` is an anagram of `s2`. Two strings are anagrams if they contain the same characters in the same frequencies. You are allowed to use built-in data structures and functions. # Input - Two strings `s1` and `s2`. # Output - Return `True` if `s1` is an anagram of `s2`; otherwise, return `False`. # Example ```python # Example 1 s1 = \\"listen\\" s2 = \\"silent\\" # Expected output: True # Example 2 s1 = \\"hello\\" s2 = \\"world\\" # Expected output: False ``` # Constraints - The length of both strings will not exceed 100,000 characters. - The strings are case-sensitive, and you should only consider lowercase letters.","solution":"from collections import Counter def is_anagram(s1, s2): Determines if s1 is an anagram of s2. Args: s1 (str): First string. s2 (str): Second string. Returns: bool: True if s1 is an anagram of s2, False otherwise. return Counter(s1) == Counter(s2)"},{"question":"A binary search tree (BST) is a node-based binary tree data structure where each node has, at most, two children referred to as the left child and the right child. For all nodes: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. Suppose you have an array of integers representing the in-order traversal of a BST. Write a function `isBST` that takes this array as input and returns `True` if the array can form a valid BST, and `False` otherwise. For example: - `isBST([2, 3, 5, 7, 11, 13, 17])` should return `True` - `isBST([3, 2, 5, 7, 11, 13, 17])` should return `False`","solution":"def isBST(array): Determine if the given array can represent an in-order traversal of a valid Binary Search Tree (BST). Parameters: array (List[int]): An array of integers representing the in-order traversal of a BST. Returns: bool: True if the array can form a valid BST, False otherwise. # An array can represent an in-order traversal of a BST if it is sorted in ascending order, # and all elements are unique. return all(array[i] < array[i+1] for i in range(len(array) - 1))"},{"question":"You are given an array of integers where each element represents the number of hours worked by an employee for a week. Write a function that identifies the employee who worked the maximum number of hours overtime. Overtime is defined as hours worked beyond 40 in a week. If no employee worked overtime, return `None`. Your function should return the index of the employee who worked the most overtime hours. If there are multiple employees with the same maximum overtime hours, return the index of the first employee in the array who has the most overtime hours. # Example: ```python find_max_overtime([40, 45, 50, 42, 60]) # should return 4 find_max_overtime([40, 40, 40, 40, 40]) # should return None ``` # Constraints: - The input array will have at least one element but not more than 100 elements. - Each integer in the array will be between 0 and 100 inclusive.","solution":"def find_max_overtime(hours): Returns the index of the employee who worked the most overtime hours. If no employee worked overtime, return None. max_overtime = 0 index_of_max = None for i, h in enumerate(hours): overtime = h - 40 if overtime > max_overtime: max_overtime = overtime index_of_max = i elif overtime == max_overtime and max_overtime != 0: continue return index_of_max"},{"question":"Implement a function in any programming language of your choice that takes a string input representing an arithmetic expression containing non-negative integers and the operators +, -, *, and / (always perform integer division). The function should return the result of evaluating the expression. The expression will not contain any parentheses and will follow standard operator precedence rules. For example: - Input: \\"3+2*2\\" Output: 7 - Input: \\" 3/2 \\" Output: 1 - Input: \\" 3+5 / 2 \\" Output: 5 You must consider whitespace handling and the correct application of the order of operations without using any built-in eval() function.","solution":"def evaluate_expression(expression: str) -> int: Evaluate the given arithmetic expression string containing non-negative integers and +, -, *, / operators. Always perform integer division. # Strip any leading or trailing whitespace expression = expression.replace(\\" \\", \\"\\") # Initialize variables stack = [] num = 0 op = \\"+\\" i = 0 while i < len(expression): char = expression[i] if char.isdigit(): num = num * 10 + int(char) if char in \\"+-*/\\" or i == len(expression) - 1: if op == \\"+\\": stack.append(num) elif op == \\"-\\": stack.append(-num) elif op == \\"*\\": stack.append(stack.pop() * num) elif op == \\"/\\": stack.append(int(stack.pop() / num)) op = char num = 0 i += 1 return sum(stack)"},{"question":"Given an unsorted array of integers, return the majority element. A majority element is an element that appears more than `⌊n/2⌋` times in the array. You may assume that the array is non-empty and the majority element always exists in the array. **Example 1:** ``` Input: [3,2,3] Output: 3 ``` **Example 2:** ``` Input: [2,2,1,1,1,2,2] Output: 2 ``` **Constraints:** - `n` is the size of the input array, where 1 ≤ n ≤ 5 * 10^4 - Elements of the array are integers in the range [-10^9, 10^9] **Note:** You can use a divide and conquer approach, sorting and counting, or the Boyer-Moore Voting Algorithm to solve this problem.","solution":"def majority_element(nums): Returns the majority element in an unsorted array of integers. The majority element is the element that appears more than ⌊n/2⌋ times. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"Given a sorted array of integers and an integer target, determine if the target exists in the array using binary search. If the target exists, return its index. If it doesn\'t exist, return -1. You must write a function with the following signature: ```python def binary_search(arr: List[int], target: int) -> int: ``` Example: Input: ```python arr = [1, 2, 4, 6, 7, 9, 11] target = 7 ``` Output: ```python 4 ``` Explanation: In the given `arr`, the element `7` exists at index `4`. Thus, the function should return `4`. If the target was `3` instead, it would return `-1` since `3` is not in the array.","solution":"from typing import List def binary_search(arr: List[int], target: int) -> int: Perform binary search to find the target in the sorted array. :param arr: List of sorted integers :param target: Integer target to find :return: Index of target if found, otherwise -1 left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Implement a function `find_intersections` in Python that accepts two arrays of integers and returns a new array containing the intersection of the two input arrays, preserving the order of their first appearances in the original arrays. If there are repeating elements in the intersection, they should also appear repeating in the output array according to the number of times they occur in the intersection. The function should handle cases where arrays may contain non-integer elements, and in such cases, they should be ignored. The handling of duplicates should be sensitive to their first occurrences in both arrays. # Example: ``` >>> find_intersections([1, 2, 2, 3], [2, 2, 3, 4]) [2, 2, 3] >>> find_intersections([1, \'a\', 3, 3], [3, 3, 3, 5]) [3, 3] >>> find_intersections([], [1, 2, 3]) [] >>> find_intersections([1, 2, 3], [\'a\', \'b\', \'c\']) [] ``` # Constraints: - Input arrays can be of different lengths. - Function should be able to handle separate arrays: one or both could be empty. **Note:** You must ensure the function only operates on integer arrays and ignores non-integer elements.","solution":"def find_intersections(arr1, arr2): Function to find the intersection of two integer arrays preserving the order of first appearance and ignoring non-integer elements. Parameters: arr1 (list): First list of elements. arr2 (list): Second list of elements. Returns: list: List containing the intersection of the two input lists. def is_integer(n): return isinstance(n, int) counts1 = {} counts2 = {} for num in arr1: if is_integer(num): counts1[num] = counts1.get(num, 0) + 1 for num in arr2: if is_integer(num): counts2[num] = counts2.get(num, 0) + 1 intersection = [] for num in counts1: if num in counts2: intersection.extend([num] * min(counts1[num], counts2[num])) return [num for num in arr1 if num in intersection and is_integer(num) and intersection.remove(num) is None]"},{"question":"Given a list of integers, write a function to find and return the longest subarray which contains at most \'k\' distinct integers. If there are multiple such subarrays with the same maximum length, return the one which appears first in the list. Implement the function so that its time complexity is linear with respect to the size of the list. **Function Signature:** ```python def longest_subarray_with_k_distinct(arr: List[int], k: int) -> List[int]: pass ``` **Input:** - arr: A list of integers `[a1, a2, ..., an]` (0 ≤ n ≤ 10^5) - k: An integer representing the maximum number of distinct integers (1 ≤ k ≤ 100) **Output:** - A list of integers representing the longest subarray which contains at most \'k\' distinct integers. **Example:** ```python # Example 1 arr = [1, 2, 1, 2, 3] k = 2 # Output: [1, 2, 1, 2] # Example 2 arr = [1, 2, 1, 3, 4] k = 3 # Output: [1, 2, 1, 3] # Example 3 arr = [1, 1, 1, 1, 1] k = 1 # Output: [1, 1, 1, 1, 1] ``` **Note:** - You may assume that all elements in the list are integers and the list can be empty. - Ensure that the solution is optimized for large inputs.","solution":"from typing import List from collections import defaultdict def longest_subarray_with_k_distinct(arr: List[int], k: int) -> List[int]: Finds and returns the longest subarray which contains at most \'k\' distinct integers. If there are multiple such subarrays with the same maximum length, it returns the one which appears first in the list. n = len(arr) if n == 0 or k == 0: return [] left = 0 right = 0 max_len = 0 max_subarray = [] distinct_count = 0 freq_map = defaultdict(int) while right < n: if freq_map[arr[right]] == 0: distinct_count += 1 freq_map[arr[right]] += 1 while distinct_count > k: freq_map[arr[left]] -= 1 if freq_map[arr[left]] == 0: distinct_count -= 1 left += 1 if right - left + 1 > max_len: max_len = right - left + 1 max_subarray = arr[left:right + 1] right += 1 return max_subarray"},{"question":"Create a function in Python that receives a string containing a mathematical expression (only addition, subtraction, multiplication, and division) and returns the calculated result. The function should handle potential errors gracefully, such as division by zero and invalid input formats. ```python def evaluate_expression(expression): try: # Your code to evaluate the expression here result = eval(expression) return result except ZeroDivisionError: return \\"Error: Division by zero.\\" except Exception: return \\"Error: Invalid input.\\" ``` Example: ```python print(evaluate_expression(\\"3 + 5 * 2\\")) # Output: 13 print(evaluate_expression(\\"10 / 0\\")) # Output: Error: Division by zero. print(evaluate_expression(\\"3 + abc\\")) # Output: Error: Invalid input. ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression provided in a string format. :param expression: str, mathematical expression containing +, -, *, / :return: evaluated result or an error message try: # Evaluate the expression result = eval(expression) return result except ZeroDivisionError: return \\"Error: Division by zero.\\" except Exception: return \\"Error: Invalid input.\\""},{"question":"Write a function that takes a string containing parenthesis (\'(\', \')\', \'{\', \'}\', \'[\' and \']\') and determines if the string is valid. A string is considered valid if the parenthesis are balanced and properly closed. For example, the string \\"()\\" is valid, \\"{}[]\\" is valid, but \\"[{]}\\" is not valid. Ensure the function is efficient and handles edge cases.","solution":"def is_valid_parenthesis(s): Determines if the string containing parenthesis is valid. A string is considered valid if the parenthesis are balanced and properly closed. Parameters: s (str): The input string containing parenthesis. Returns: bool: True if the string is valid, False otherwise. stack = [] matching_parenthesis = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_parenthesis: if stack and stack[-1] == matching_parenthesis[char]: stack.pop() else: return False else: stack.append(char) return len(stack) == 0"},{"question":"Write a function called `letter_frequency` that takes a string as input and returns a dictionary with the frequency count of each letter in the string. Ignore case and non-letter characters. The function should be case-insensitive, meaning \'A\' and \'a\' should be counted as the same letter. # Example: ```python letter_frequency(\\"Hello, World!\\") ``` should return: ```python {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ```","solution":"def letter_frequency(s): Returns a dictionary with the frequency count of each letter in the string. The function is case-insensitive and ignores non-letter characters. from collections import defaultdict frequency = defaultdict(int) for char in s: if char.isalpha(): char = char.lower() frequency[char] += 1 return dict(frequency)"},{"question":"Design a function that accepts a list of numerical intervals and merges overlapping intervals. For example, given the list `[(1, 3), (2, 4), (5, 7), (6, 8)]`, your function should return `[(1, 4), (5, 8)]`. Make sure to implement efficient sorting and merging mechanisms to achieve optimal performance.","solution":"def merge_intervals(intervals): Merges overlapping intervals from a list of intervals. :param intervals: List of tuples where each tuple represents an interval (start, end) :return: List of merged intervals if not intervals: return [] # First, sort the intervals based on the starting value intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current in intervals[1:]: last_merged = merged_intervals[-1] # If the current interval overlaps with the last merged interval, merge them if current[0] <= last_merged[1]: merged_intervals[-1] = (last_merged[0], max(last_merged[1], current[1])) else: merged_intervals.append(current) return merged_intervals"},{"question":"# Download the provided data file, which is in CSV format and contains the sales data of a company over the past year. The CSV file has the following columns: \\"Date\\", \\"Product\\", \\"Region\\", \\"Sales\\". Write a Python function `parse_sales_data(filename: str) -> dict` that reads the CSV file and returns the total sales per product in each region. The function should return a dictionary where the keys are product names and the values are dictionaries with region names as keys and total sales amounts as values. Assume that the CSV file is well-formed and can be read without errors. The function should handle any reasonable number of rows and columns in the dataset. Example: ``` Input CSV contents: Date,Product,Region,Sales 2023-01-01,ProductA,North,100 2023-01-01,ProductB,South,150 2023-01-02,ProductA,North,200 2023-01-02,ProductB,East,100 2023-01-02,ProductA,West,250 Function call: parse_sales_data(\\"sales_data.csv\\") Expected Output: { \\"ProductA\\": { \\"North\\": 300, \\"West\\": 250 }, \\"ProductB\\": { \\"South\\": 150, \\"East\\": 100 } } ```","solution":"import csv from collections import defaultdict from typing import Dict def parse_sales_data(filename: str) -> Dict[str, Dict[str, int]]: sales_data = defaultdict(lambda: defaultdict(int)) with open(filename, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: product = row[\'Product\'] region = row[\'Region\'] sales = int(row[\'Sales\']) sales_data[product][region] += sales return dict(sales_data)"},{"question":"Create a Python function that takes a string of mixed-type characters (letters, digits, and special characters) and returns a new string with all the digits moved to the end while preserving the order of the non-digit characters. The order of digits in the end section should also remain as they appeared in the original string. def move_digits_to_end(s: str) -> str: \'move_digits_to_end\' relocates all the digits in the string to the end while maintaining the order of both digits and non-digits. >>> move_digits_to_end(\\"a3bc2d1!@\\") \'abcd!@321\' >>> move_digits_to_end(\\"h4ell2o6!\\") \'hello!426\'","solution":"def move_digits_to_end(s: str) -> str: \'move_digits_to_end\' relocates all the digits in the string to the end while maintaining the order of both digits and non-digits. letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(letters) + \'\'.join(digits)"},{"question":"Write a Python function called `find_longest_consecutive_sequence` that takes a list of integers and returns the length of the longest consecutive sequence of numbers. A consecutive sequence is a range of numbers in which each number is exactly one greater than the previous number in the range. For example, in the list `[100, 4, 200, 1, 3, 2]`, the longest consecutive sequence is `[1, 2, 3, 4]`, which has a length of 4. The function should consider the possibility of repeated numbers and ignore them. Constraints: - You may not sort the list as part of your solution. - The function should efficiently handle large lists. Example: ```python def find_longest_consecutive_sequence(nums): # your code here # Example usage print(find_longest_consecutive_sequence([100, 4, 200, 1, 3, 2])) # Output: 4 ``` **Note**: - Explain the algorithm you have used to solve the problem. - Comment on the time and space complexity of your solution.","solution":"def find_longest_consecutive_sequence(nums): Finds the length of the longest consecutive sequence of numbers in the list `nums`. The function should efficiently handle large lists. :param nums: list of integers :return: length of the longest consecutive sequence if not nums: return 0 num_set = set(nums) # Convert list to a set to remove duplicates and for O(1) look-up times max_length = 0 for num in num_set: if num - 1 not in num_set: # Check if it\'s the start of a sequence current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"Develop a sophisticated algorithm capable of dissecting multi-faceted social media data to automatically categorize and predict trending topics. Your solution should harness natural language processing techniques and advanced statistical modeling to analyze user engagement, hashtag proliferation, and temporal activity patterns, thereby discerning emerging trends with high accuracy.","solution":"import re from collections import Counter from datetime import datetime import pandas as pd from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer from sklearn.decomposition import LatentDirichletAllocation def preprocess_text(text): Preprocess the input text by removing special characters, links, and converting to lowercase. text = re.sub(r\\"httpS+\\", \\"\\", text) text = re.sub(r\\"[^a-zA-Zs]\\", \\"\\", text) text = text.lower().strip() return text def extract_hashtags(text): Extract hashtags from the text. return re.findall(r\\"#(w+)\\", text) def analyze_trends(data): Analyze trends from the social media data. Args: data (list of dicts): List where each dict contains \'text\' (str) and \'timestamp\' (datetime). Returns: dict: Dictionary of trending topics with their associated scores. # Preprocess texts and extract hashtags texts = [preprocess_text(item[\'text\']) for item in data] hashtags = [extract_hashtags(item[\'text\']) for item in data] timestamps = [item[\'timestamp\'] for item in data] # Flatten the list of hashtags all_hashtags = [hashtag for sublist in hashtags for hashtag in sublist] # Calculate frequency of hashtags hashtag_counter = Counter(all_hashtags) # Use CountVectorizer to transform texts into frequency matrix vectorizer = CountVectorizer(stop_words=\'english\') dtm = vectorizer.fit_transform(texts) # Use TF-IDF to transform the frequency matrix tfidf_transformer = TfidfTransformer() dtm_tfidf = tfidf_transformer.fit_transform(dtm) # Use Latent Dirichlet Allocation to find topics lda = LatentDirichletAllocation(n_components=5, random_state=42) lda.fit(dtm_tfidf) # Get trending topics feature_names = vectorizer.get_feature_names_out() trending_topics = {} for topic_idx, topic in enumerate(lda.components_): trend_score = sum([hashtag_counter[feature_names[i]] for i in topic.argsort()[:-11:-1] if feature_names[i] in hashtag_counter]) trending_topics[f\\"Topic {topic_idx}\\"] = trend_score return trending_topics"},{"question":"Create a function `longest_even_subsequence(arr: List[int]) -> int` that, given a list of integers, returns the length of the longest contiguous subsequence of even integers. If there are multiple subsequences of the same maximum length, return the length of any one of them. If no even integers are found, return 0. # Constraints - The length of the list `arr` will be between `1` and `10^5`. - Each integer in the list will be between `-10^9` and `10^9`. # Example ```python def longest_even_subsequence(arr: List[int]) -> int: pass # Example 1: arr = [1, 2, 4, 6, 8, 10, 3, 5, 7, 8, 12] # Output: 4 # Example 2: arr = [1, 3, 5, 7, 9] # Output: 0 # Example 3: arr = [2, 4, 1, 2, 4, 6, 8, 10, 11, 14, 18] # Output: 5 # Example 4: arr = [10, 12, 14, 7, 8, 6, 4, 2, 9, 3, 11] # Output: 4 ```","solution":"from typing import List def longest_even_subsequence(arr: List[int]) -> int: Returns the length of the longest contiguous subsequence of even integers. max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Write a function in Python that accepts a list of integers and returns a new list where each integer is increased by the sum of all preceding integers in the list. Example: If the input list is `[1, 2, 3, 4]`, the output should be `[1, 3, 6, 10]`.","solution":"def accumulate_sums(lst): Accepts a list of integers and returns a new list where each integer is increased by the sum of all preceding integers. :param lst: List of integers :return: New list with accumulated sums result = [] current_sum = 0 for num in lst: current_sum += num result.append(current_sum) return result"},{"question":"Implement a function named `matrix_diagonal_difference(matrix)` that takes a square matrix (a list of lists) as input and returns the absolute difference between the sums of its diagonals. The matrix will always be an NxN (square) matrix where 1 ≤ N ≤ 100. The function should handle both positive and negative integers within the matrix. Example: Input: ```python matrix = [ [11, 2, 4], [4, 5, 6], [10, 8, -12] ] ``` Output: ```python 15 ```","solution":"def matrix_diagonal_difference(matrix): Calculate the absolute difference between the sums of the matrix\'s diagonals. Parameters: matrix (list of list of int): A square matrix (NxN). Returns: int: The absolute difference between the sums of the matrix\'s diagonals. n = len(matrix) primary_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): primary_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n - 1 - i] return abs(primary_diagonal_sum - secondary_diagonal_sum)"},{"question":"Write a function that takes a string containing a mathematical expression with integers and the operators \'+\', \'-\', \'*\', \'/\' and evaluates the result following the correct order of operations (PEMDAS/BODMAS rules). The output should be a single integer result. Example Input: \\"3 + 6 * (5 + 4) / 3 - 7\\" Example Output: 11","solution":"def evaluate_expression(expression): Evaluate the mathematical expression with integers and operators +, -, *, /, and parentheses. The function follows the correct order of operations (PEMDAS/BODMAS rules). try: # Safely evaluating the mathematical expression result = eval(expression) return int(result) except Exception as e: raise ValueError(\\"Invalid mathematical expression\\") from e"},{"question":"Write a function that takes in a list of strings and returns a new list containing only the strings that have more than 5 characters. [\'apple\', \'banana\', \'kiwi\', \'strawberry\', \'fig\'] [\'banana\', \'strawberry\']","solution":"def filter_long_strings(strings): Returns a new list containing only the strings that have more than 5 characters. :param strings: List of strings :return: List of strings with more than 5 characters return [s for s in strings if len(s) > 5]"},{"question":"Write a function `pivot_and_sort` that takes a list of integers `arr` and an integer `pivot` as parameters. The function should rearrange the elements in the list such that all elements less than or equal to the pivot come before all elements greater than the pivot. The relative order of elements that are less than or equal to the pivot should be maintained, as well as the relative order of elements that are greater than the pivot. Additionally, the function should return a tuple with two lists: the first list containing the elements less than or equal to the pivot, and the second list containing the elements greater than the pivot. For example, given the input list `arr = [10, 5, 2, 7, 3, 8, 4]` and the pivot value `pivot = 5`, the function should return `([5, 2, 3, 4], [10, 7, 8])`.","solution":"def pivot_and_sort(arr, pivot): Rearranges the elements in the list such that all elements less than or equal to the pivot come before all elements greater than the pivot. Parameters: arr (list): A list of integers. pivot (int): The pivot value. Returns: tuple: A tuple containing two lists - the first list with elements less than or equal to the pivot, and the second list with elements greater than the pivot. less_equal = [x for x in arr if x <= pivot] greater = [x for x in arr if x > pivot] return less_equal, greater"},{"question":"Implement a function in Python that calculates the maximum profit that can be achieved from buying and selling stocks. You are given a list where the ith element is the price of a given stock on day i. You are only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock). Write a function `maxProfit(prices: List[int]) -> int` that returns the maximum profit you can achieve. If no profit can be achieved, return 0. **Function Signature:** ```python def maxProfit(prices: List[int]) -> int: # Your code here ``` **Example:** Input: `[7, 1, 5, 3, 6, 4]` Output: `5` Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that the maximum profit cannot be 7-1 = 6 as selling price needs to be larger than buying price. **Constraints:** 1. `0 <= len(prices) <= 10^5` 2. `0 <= prices[i] <= 10^4` Note: While looping through the `prices`, at each step you should keep track of the minimum price you have encountered so far and compute the profit by comparing the current price with this minimum price. The maximum profit among these comparisons will be your answer.","solution":"from typing import List def maxProfit(prices: List[int]) -> int: This function takes a list of stock prices and returns the maximum profit that can be achieved by buying and selling one stock. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: # Update the minimum price encountered so far if price < min_price: min_price = price # Calculate the current potential profit profit = price - min_price # Update the maximum profit encountered so far if profit > max_profit: max_profit = profit return max_profit"},{"question":"You have a list of integers representing container volumes and a maximum weight limit that a truck can carry. Write a function \\"optimizeLoading(containers, max_weight)\\" that returns the maximum number of containers that can be loaded onto the truck without exceeding the weight limit. The weight of each container is equal to its volume. Your function should return a single integer representing the maximum number of containers. For example, given: - containers = [2, 3, 7, 1, 4] - max_weight = 10 The function should return 4 (because the containers with volumes 1, 2, 3, and 4 can be loaded without exceeding the weight limit, totaling to a weight of 10). Constraints: - You can assume the list of container volumes is non-empty and contains positive integers. - max_weight is a positive integer. - The number of containers and the maximum weight limit can both be reasonably large, up to approximately 10^4.","solution":"def optimizeLoading(containers, max_weight): Returns the maximum number of containers that can be loaded onto the truck without exceeding the weight limit. Parameters: containers (list of int): List of container volumes. max_weight (int): Maximum weight limit of the truck. Returns: int: Maximum number of containers that can be loaded. containers.sort() total_weight = 0 count = 0 for weight in containers: if total_weight + weight <= max_weight: total_weight += weight count += 1 else: break return count"},{"question":"You are provided with a list of integers. Your task is to find the maximum sum of a contiguous subarray within a one-dimensional numeric array. A subarray is defined as a contiguous part of an array. For example, a segment of an array [1, 2, 3, 4] could be [2, 3], which is a contiguous subarray. Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. For example, consider the following scenarios: Example 1: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The contiguous subarray [4,-1,2,1] has the largest sum with value 6. Example 2: Input: nums = [1] Output: 1 Example 3: Input: nums = [5,4,-1,7,8] Output: 23 The constraints for this problem are as follows: `1 <= nums.length <= 10^5` `-10^4 <= nums[i] <= 10^4` Can you solve this problem with a time complexity of O(n)?","solution":"def max_sub_array(nums): Finds the maximum sum of a contiguous subarray within a one-dimensional numeric array. :param nums: List of integers :return: Integer representing the largest sum of a contiguous subarray max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function that checks if a string is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. For example, \\"taco cat\\" is a permutation of \\"atco cta\\". string = \\"racecar\\" Write a function to determine whether the given string is a permutation of a palindrome. Include comments in your code explaining your logic.","solution":"def is_permutation_of_palindrome(s): Checks if the given string is a permutation of a palindrome. A string is a permutation of a palindrome if the frequency of each character in the string can form a palindrome. For that to be true, at most one character can have an odd frequency (for odd-length palindromes), and all characters must have even frequency for even-length palindromes. Args: s (str): The input string to check. Returns: bool: True if the string is a permutation of a palindrome, False otherwise. from collections import Counter # Remove whitespace and convert to lowercase for uniformity. s = s.replace(\\" \\", \\"\\").lower() # Count the frequency of each character. char_count = Counter(s) # Check the number of characters that have an odd count. odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if there is at most one character with an odd count. return odd_count <= 1"},{"question":"Design a function in Python that integrates both sorting and searching capabilities. The function should accept a list of tuples, where each tuple contains a student\'s name and their score. It should return a ranked list of students sorted by their scores in descending order and allow the user to search for a specific student\'s rank based on their name. If the student\'s name is not present, return an appropriate message. ```python from typing import List, Tuple, Union def rank_students(students: List[Tuple[str, int]], search_name: str) -> Union[List[Tuple[str, int]], str]: Accepts a list of tuples with student\'s name and their score, sorts them in descending order of scores and enables search to find the rank of a specific student by name. Returns the sorted list along with the requested rank. >>> rank_students([(\'Alice\', 88), (\'Bob\', 67), (\'Charlie\', 92)], \'Bob\') ([(\'Charlie\', 92), (\'Alice\', 88), (\'Bob\', 67)], \'Bob is ranked 3\') >>> rank_students([(\'Alice\', 88), (\'Bob\', 67), (\'Charlie\', 92)], \'Eve\') ([(\'Charlie\', 92), (\'Alice\', 88), (\'Bob\', 67)], \'Eve is not ranked\') # Let\'s implement the details here ```","solution":"from typing import List, Tuple, Union def rank_students(students: List[Tuple[str, int]], search_name: str) -> Union[List[Tuple[str, int]], str]: Accepts a list of tuples with student\'s name and their score, sorts them in descending order of scores and enables search to find the rank of a specific student by name. Returns the sorted list along with the requested rank. # Sort students by scores in descending order sorted_students = sorted(students, key=lambda student: student[1], reverse=True) # Create a list to store the ranks ranked_students = [(name, score) for rank, (name, score) in enumerate(sorted_students, start=1)] # Find the rank of the search_name for rank, (name, score) in enumerate(sorted_students, start=1): if name == search_name: return ranked_students, f\'{search_name} is ranked {rank}\' return ranked_students, f\'{search_name} is not ranked\'"},{"question":"Write a Python function to determine the second largest unique number in a given list of integers. The function should return `None` if there are not enough unique numbers to determine the second largest one. It should handle cases with negative numbers and duplicates properly. Example: ``` 1. Input: [3, 1, 4, 1, 2, 5] Output: 4 2. Input: [4, 4, 4, 4] Output: None 3. Input: [10, 20, 20, 10, 30, 30, 40] Output: 30 ```","solution":"def second_largest_unique(nums): Returns the second largest unique number from the list of integers. Returns None if there are not enough unique numbers. unique_nums = list(set(nums)) if len(unique_nums) < 2: return None unique_nums.sort(reverse=True) return unique_nums[1]"},{"question":"Implement a function `find_most_frequent_character(s: str) -> str` that takes a string `s` as input and returns the most frequent alphabetical character in the string. The function should ignore character case (i.e., treat \'A\' and \'a\' as the same character) and if there are multiple characters with the same highest frequency, return the one that appears first in the alphabet. In case of an empty string, return an empty string. # Examples: ```python print(find_most_frequent_character(\\"Hello World!\\")) # Output: \\"l\\" print(find_most_frequent_character(\\"aAaAaaBbBbb\\")) # Output: \\"a\\" print(find_most_frequent_character(\\"\\")) # Output: \\"\\" print(find_most_frequent_character(\\"abcABC\\")) # Output: \\"a\\" ``` # Constraints: - You may assume the input string only contains English letters and other non-alphabetical characters. - The function should be case-insensitive. - The function should handle an empty string input gracefully.","solution":"def find_most_frequent_character(s: str) -> str: Returns the most frequent alphabetical character in the string `s`, ignoring case. If there are multiple characters with the same highest frequency, returns the one that appears first in the alphabet. In case of an empty string, returns an empty string. from collections import Counter # Convert string to lowercase and filter out non-alphabetical characters filtered_string = [char.lower() for char in s if char.isalpha()] # If the filtered string is empty, return an empty string if not filtered_string: return \\"\\" # Count the frequency of each character counter = Counter(filtered_string) # Find the most frequent character, preferring the one that appears first in the alphabet in case of ties most_frequent_char = min(counter.keys(), key=lambda x: (-counter[x], x)) return most_frequent_char"},{"question":"Given a list of integers `nums` and an integer `k`, return `true` if the list contains a subarray of at least length `k` that has a sum equal to `zero`. A subarray is a contiguous part of an array. Example 1: Input: nums = [1, 2, -3, 4, -2, -2, 5], k = 3 Output: true Explanation: The subarray [2, -3, 4] has a sum equal to zero and its length is 3. Example 2: Input: nums = [5, -5, 1, 1, 1], k = 2 Output: true Explanation: The subarray [5, -5] has a sum equal to zero and its length is 2. Example 3: Input: nums = [1, 2, 3], k = 3 Output: false Explanation: There is no subarray of length 3 that has a sum equal to zero. Constraints: `1 <= nums.length <= 1000` `-10^4 <= nums[i] <= 10^4` `1 <= k <= nums.length`","solution":"def has_zero_sum_subarray(nums, k): Checks if the list contains a subarray of at least length k that has a sum equal to zero. n = len(nums) for i in range(n): curr_sum = 0 for j in range(i, n): curr_sum += nums[j] if j - i + 1 >= k and curr_sum == 0: return True return False"},{"question":"Create a function that accepts a list of dictionaries and merges them into a single dictionary. If the same key appears in more than one dictionary, the function should sum their associated values. The function should be able to handle nested dictionaries and add the values of common keys at every level of nesting. Keys that only appear in one dictionary should be included in the final dictionary with their original value.","solution":"def merge_dicts(dict_list): Merges a list of dictionaries into a single dictionary. For any common keys that appear in multiple dictionaries, their values are summed. Handles nested dictionaries by summing common keys at every level of nesting. :param dict_list: List of dictionaries to be merged :return: A single merged dictionary def merge_two_dicts(d1, d2): for key in d2: if key in d1: if isinstance(d1[key], dict) and isinstance(d2[key], dict): d1[key] = merge_two_dicts(d1[key], d2[key]) else: d1[key] += d2[key] else: d1[key] = d2[key] return d1 merged_dict = {} for dictionary in dict_list: merged_dict = merge_two_dicts(merged_dict, dictionary) return merged_dict"},{"question":"You are tasked with implementing a File System in-memory simulation. You need to create a `FileSystem` class with the following methods: # `mkDir(path: str) -> None` - Creates a directory at the specified path. The path should start from the root `/`. If the path already exists as a file or directory, it should do nothing. # `createFile(path: str, content: str) -> None` - Creates a file at the specified path with the given content. If the path already exists as a directory, it should treat this as an error and do nothing. If it already exists as a file, it should overwrite the content of the file. # `readFile(path: str) -> str` - Reads the content of the file at the specified path. If the file does not exist, it should return an empty string. # `writeToFile(path: str, content: str) -> None` - Writes the specified content to the file at the given path. If the file already exists, this should append the content to the existing content. If the file does not exist, it should treat this as an error and do nothing. # Additional constraints: 1. Paths should always start with a `/` and avoid trailing slashes unless it is the root. 2. The file system will be initialized with an empty root directory. 3. Directory and file names will only contain alphanumeric characters and no spaces. 4. The `mkDir` and `createFile` methods can be called multiple times with the same path without causing issues. 5. Read and write operations should be executed efficiently to handle at least 100,000 operations. Please implement the `FileSystem` class and its methods according to the specifications above.","solution":"class FileSystem: def __init__(self): self.fs_tree = {\'/\': {}} def _traverse(self, path): Helper method to traverse the path and return the parent directory and the final component of the path. components = path.strip(\'/\').split(\'/\') curr = self.fs_tree[\'/\'] for comp in components[:-1]: if comp in curr and isinstance(curr[comp], dict): curr = curr[comp] else: return None, None return curr, components[-1] def mkDir(self, path: str) -> None: parent, new_dir = self._traverse(path) if parent is not None and new_dir not in parent: parent[new_dir] = {} def createFile(self, path: str, content: str) -> None: parent, new_file = self._traverse(path) if parent is not None and (new_file not in parent or isinstance(parent[new_file], str)): parent[new_file] = content def readFile(self, path: str) -> str: parent, file_name = self._traverse(path) if parent is not None and file_name in parent and isinstance(parent[file_name], str): return parent[file_name] return \\"\\" def writeToFile(self, path: str, content: str) -> None: parent, file_name = self._traverse(path) if parent is not None and file_name in parent and isinstance(parent[file_name], str): parent[file_name] += content"},{"question":"Devise a function that, when provided with a list of integers, sorts the integers in ascending order, but prioritizes all even numbers before any odd numbers. The even numbers should retain their relative order from the original list, as should the odd numbers. Implement this function in your preferred programming language. sampleInput = [3, 1, 4, 1, 5, 9, 2, 6]","solution":"def sort_even_odd(arr): Sorts the integers in ascending order, prioritizing all even numbers before any odd numbers. Even numbers retain their relative order from the original list, as do odd numbers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"Develop a Python function that reverses the order of words in a given sentence while preserving any spaces between the words. Each word in the sentence consists of alphabetical characters only and should remain intact in the reversed sentence. Example: Input: \\"hello world this is a test\\" Output: \\"test a is this world hello\\"","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence while preserving spaces. Arguments: sentence -- a string representing the sentence to be reversed Returns: A string with the words in reversed order but preserving spaces words = sentence.split(\' \') reversed_sentence = \' \'.join(reversed(words)) return reversed_sentence"},{"question":"A software company wants to implement a parking system for its multilevel parking lot. Each level of the parking lot has a predefined number of available spots for each type of vehicle: cars, motorcycles, and buses. You need to design a class `ParkingSystem` to manage and track the parking process. The `ParkingSystem` class should support the following methods: 1. `__init__(self, big: int, medium: int, small: int)`: Initializes the object with a number of slots for each type of vehicle. 2. `addCar(self, carType: int) -> bool`: Adds a car to the parking lot. Here, `carType` is an integer where `1=big=bus`, `2=medium=car`, and `3=small=motorcycle`. The function should return `True` if the vehicle can be parked in an available slot, and `False` if there are no available slots for the specified vehicle type. # Example: ```python parking_system = ParkingSystem(1, 1, 0) print(parking_system.addCar(1)) # Returns True. There is 1 available slot for big cars. print(parking_system.addCar(2)) # Returns True. There is 1 available slot for medium cars. print(parking_system.addCar(3)) # Returns False. There is no available slot for small cars. print(parking_system.addCar(1)) # Returns False. There is no available slot for big cars. The only slot for big cars has been taken. ``` # Constraints: - `0 <= big, medium, small <= 1000` - `carType` can be `1`, `2`, or `3`. - At most `1000` calls will be made to `addCar`. Implement the `ParkingSystem` class ensuring efficiency and scalability for the constraints provided.","solution":"class ParkingSystem: def __init__(self, big: int, medium: int, small: int): Initialize the ParkingSystem with a given number of slots for each type of vehicle. self.spots = {1: big, 2: medium, 3: small} def addCar(self, carType: int) -> bool: Tries to park a car of a given carType: 1 = big, 2 = medium, 3 = small. Returns True if the car can be parked, otherwise returns False. if self.spots[carType] > 0: self.spots[carType] -= 1 return True else: return False"},{"question":"Design a Python class named `Matrix` that represents a 2D matrix of integers. Your class should include the following methods: 1. `__init__(self, rows, cols)`: Initializes a rows x cols matrix with all elements set to zero. 2. `set_value(self, row, col, value)`: Sets the value at the specified row and column. 3. `get_value(self, row, col)`: Returns the value at the specified row and column. 4. `add(self, other)`: Adds two matrices of the same size and returns a new `Matrix` object representing the result. 5. `transpose(self)`: Returns a new `Matrix` object representing the transpose of the original matrix. Write code to illustrate the functionality of your `Matrix` class, including initialization, setting and getting values, matrix addition, and transposition. Ensure your code properly handles edge cases, such as adding matrices of different sizes.","solution":"class Matrix: def __init__(self, rows, cols): self.rows = rows self.cols = cols self.data = [[0] * cols for _ in range(rows)] def set_value(self, row, col, value): self.data[row][col] = value def get_value(self, row, col): return self.data[row][col] def add(self, other): if self.rows != other.rows or self.cols != other.cols: raise ValueError(\\"Matrices should have the same dimensions for addition.\\") result = Matrix(self.rows, self.cols) for r in range(self.rows): for c in range(self.cols): result.set_value(r, c, self.get_value(r, c) + other.get_value(r, c)) return result def transpose(self): result = Matrix(self.cols, self.rows) for r in range(self.rows): for c in range(self.cols): result.set_value(c, r, self.get_value(r, c)) return result"},{"question":"# Problem: Longest Substring with At Most Two Distinct Characters Description: Given a string `s`, find the length of the longest substring that contains at most two distinct characters. Example 1: Input: `s = \\"eceba\\"` Output: `3` Explanation: The longest substring with at most two distinct characters is `\\"ece\\"`. Example 2: Input: `s = \\"ccaabbb\\"` Output: `5` Explanation: The longest substring with at most two distinct characters is `\\"aabbb\\"`. Constraints: - `1 <= s.length <= 10^5` - `s` consists of English letters.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. if len(s) == 0: return 0 char_count = {} left = 0 max_len = 0 for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"You have an array of integers. Write a function that returns a new array containing only the elements that appear more than once in the input array. Elements should be presented in the same order they first appear in the input array. Function Signature: ```python def find_duplicates(arr: list[int]) -> list[int]: pass ``` # Example ```python find_duplicates([1, 2, 2, 3, 4, 4, 4, 5]) => [2, 4] find_duplicates([10, 20, 20, 30, 40, 50]) => [20] find_duplicates([7, 8, 9, 10]) => [] ``` # Constraints - The input array may contain integers from -1000 to 1000. - The length of the array will not exceed 10,000 elements.","solution":"def find_duplicates(arr: list[int]) -> list[int]: Returns a list containing the elements that appear more than once in the input array. Elements should be presented in the same order they first appear in the input array. element_count = {} duplicates = [] for num in arr: if num in element_count: element_count[num] += 1 else: element_count[num] = 1 for num in arr: if element_count[num] > 1: if num not in duplicates: duplicates.append(num) return duplicates"},{"question":"The task at hand pertains to the problem titled \\"Longest Consecutive Sequence\\". The problem statement is as follows: Given an unsorted array of integers `nums`, find the length of the longest consecutive elements sequence. Your mission is to determine the length of the longest sequence where the elements appear consecutively, irrespective of the order in which they appear in the input array. For instance, consider the following examples: Example 1: Given the input: nums = [100, 4, 200, 1, 3, 2], the output should be 4. This can be explained as follows: The longest consecutive sequence is [1, 2, 3, 4]. Therefore, its length is 4. Example 2: For the input: nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1], the output should be 9. This can be explained as follows: The longest consecutive sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Hence, its length is 9. Example 3: Given the input: nums = [1], the output should be 1. With only one element in the array, the only available sequence has a length of 1. Example 4: For the input: nums = [], the output should be 0. Since there are no elements in the array, there is no consecutive sequence, thus the length is 0. The constraints are as follows: `0 <= nums.length <= 105` `-109 <= nums[i] <= 109`","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # check if it is the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Create a Python function that receives a nested dictionary representing a company\'s organizational structure and an employee name. The function should return the name of the employee\'s manager. If the employee does not have a manager or if the employee is not found, return \\"None\\". For example, given the following organizational structure: ```python organization = { \'CEO\': { \'CTO\': { \'Dev1\': {}, \'Dev2\': {} }, \'CFO\': { \'Acc1\': {} } } } ``` A function call `find_manager(organization, \'Dev1\')` should return `CTO`, and `find_manager(organization, \'CEO\')` should return `None`. If the employee is not found in the structure, return `None`. Implement the function `find_manager(organization: dict, employee: str) -> str:`.","solution":"def find_manager(organization, employee): Returns the manager of the given employee in the organizational structure. If the employee does not have a manager or is not found, returns \\"None\\". def helper(current_structure, current_manager): for manager, subordinates in current_structure.items(): if employee in subordinates: return manager result = helper(subordinates, manager) if result: return result return None return helper(organization, None)"},{"question":"Write a Python function to simulate a basic traffic light controller system. The system should handle three states: Green, Yellow, and Red. Each state should last for a user-defined duration. Your function should output the state changes in a loop until manually stopped by the user (for the sake of the question, you can limit it to a fixed number of iterations). Additionally, present a defective implementation of a traffic light controller and explain why it\'s flawed, then provide the corrected version. This will help in understanding common pitfalls and how to address them.","solution":"import time def traffic_light_controller(green_duration, yellow_duration, red_duration, iterations): Simulates a basic traffic light controller system that cycles through Green, Yellow, and Red states. Parameters: green_duration (int): Duration for Green light in seconds. yellow_duration (int): Duration for Yellow light in seconds. red_duration (int): Duration for Red light in seconds. iterations (int): Number of cycles to run the traffic light. states = [ (\'Green\', green_duration), (\'Yellow\', yellow_duration), (\'Red\', red_duration), ] for i in range(iterations): for state, duration in states: print(f\'State: {state}, Duration: {duration}\') time.sleep(duration) # Defective implementation: The durations for each state are not respected properly. # The \'sleep\' calls were omitted, leading to incorrect timing of state changes. def defective_traffic_light_controller(green_duration, yellow_duration, red_duration, iterations): A defective implementation of traffic light controller where the sleep is not properly applied. states = [ (\'Green\', green_duration), (\'Yellow\', yellow_duration), (\'Red\', red_duration), ] for i in range(iterations): for state, duration in states: print(f\'State: {state}, Duration: {duration}\') # missing time.sleep(duration) here results in no delay between state changes # Explanation of the flaw in the defective implementation: In the defective implementation, the call to time.sleep(duration) is missing. This function call is necessary to ensure that each state lasts for the specified duration. Without the call to time.sleep(duration), the state transitions will happen immediately one after another without any delay, which does not simulate the traffic light correctly."},{"question":"Write a Python function that takes a list of integers as input and returns a new list containing only the unique elements from the original list but sorted in ascending order. The function should not use any built-in functions that handle sorting or removing duplicates directly. For example, given the input list [4, 5, 6, 3, 4, 5, 2, 1, 6], the function should return [1, 2, 3, 4, 5, 6].","solution":"def unique_sorted(lst): Returns a list containing only the unique elements from the original list but sorted in ascending order. unique_elements = [] for elem in lst: if elem not in unique_elements: unique_elements.append(elem) # Implementing bubble sort algorithm to sort the unique elements in ascending order n = len(unique_elements) for i in range(n): for j in range(0, n-i-1): if unique_elements[j] > unique_elements[j+1]: unique_elements[j], unique_elements[j+1] = unique_elements[j+1], unique_elements[j] return unique_elements"},{"question":"--- Implementation approach We will utilize Django, a high-level Python Web framework, to create a full-stack agriculture export management system. Django provides a robust ORM (Object Relational Mapper) for interacting with the database and features rapid development, a clean design, and high scalability which align with the P0 priorities. For the front-end, we will leverage the Django Rest Framework (DRF) to create a RESTful API and Vue.js for building the user interface as it provides a responsive and efficient single-page application experience. PostgreSQL will be used for its reliability and performance concerning complex queries and transactions. Python package name ```python \\"agri_export_management\\" ``` File list ```python [ \\"main.py\\", \\"agri_export_management/__init__.py\\", \\"agri_export_management/settings.py\\", \\"agri_export_management/urls.py\\", \\"agri_export_management/wsgi.py\\", \\"inventory/__init__.py\\", \\"inventory/admin.py\\", \\"inventory/apps.py\\", \\"inventory/models.py\\", \\"inventory/serializers.py\\", \\"inventory/views.py\\", \\"inventory/urls.py\\", \\"orders/__init__.py\\", \\"orders/admin.py\\", \\"orders/apps.py\\", \\"orders/models.py\\", \\"orders/serializers.py\\", \\"orders/views.py\\", \\"orders/urls.py\\", \\"reports/__init__.py\\", \\"reports/admin.py\\", \\"reports/apps.py\\", \\"reports/models.py\\", \\"reports/serializers.py\\", \\"reports/views.py\\", \\"reports/urls.py\\", \\"customers/__init__.py\\", \\"customers/admin.py\\", \\"customers/apps.py\\", \\"customers/models.py\\", \\"customers/serializers.py\\", \\"customers/views.py\\", \\"customers/urls.py\\", \\"suppliers/__init__.py\\", \\"suppliers/admin.py\\", \\"suppliers/apps.py\\", \\"suppliers/models.py\\", \\"suppliers/serializers.py\\", \\"suppliers/views.py\\", \\"suppliers/urls.py\\", \\"frontend/__init__.py\\", \\"frontend/apps.py\\", \\"frontend/templates/frontend/index.html\\", \\"frontend/static/frontend/main.js\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class Inventory { +int id +str name +int quantity +str location __init__(id:int, name:str, quantity:int, location:str) } class Order { +int id +str product +int quantity +str customer +datetime date __init__(id:int, product:str, quantity:int, customer:str, date:datetime) } class Report { +int id +str title +str content +datetime generated_on __init__(id:int, title:str, content:str, generated_on:datetime) } class Customer { +int id +str name +str contact +str address __init__(id:int, name:str, contact:str, address:str) } class Supplier { +int id +str name +str contact +str address __init__(id:int, name:str, contact:str, address:str) } Inventory \\"1\\" --* \\"1..*\\" Order: contains Order \\"1\\" --> \\"1\\" Customer: placed by Order \\"1\\" --> \\"1\\" Supplier: supplied by Inventory \\"1\\" --* \\"1..*\\" Report: generates Customer \\"1\\" -- \\"1..*\\" Report: reflected in Supplier \\"1\\" -- \\"1..*\\" Report: reflected in ``` Program call flow ```mermaid sequenceDiagram participant U as User participant UI as User Interface participant API as API Endpoints participant INV as Inventory participant ORD as Order participant REP as Report participant CUS as Customer participant SUP as Supplier U->>UI: Login UI->>API: POST /login API->>U: Token U->>UI: View Dashboard UI->>API: GET /dashboard API->>INV: fetch inventory data API->>ORD: fetch order data API->>REP: fetch reports API->>UI: return dashboard data U->>UI: Manage Inventory UI->>API: GET /inventory API->>INV: fetch inventory data API->>UI: display inventory U->>UI: Add Inventory Item UI->>API: POST /inventory API->>INV: create inventory item INV->>API: inventory item created API->>UI: display updated inventory U->>UI: Generate Report UI->>API: POST /report API->>INV: analyze inventory data API->>ORD: analyze order data API->>CUS: analyze customer data API->>SUP: analyze supplier data API->>REP: create new report REP->>API: report created API->>UI: display generated report U->>UI: Manage Customers UI->>API: GET /customers API->>CUS: fetch customer data API->>UI: display customers data U->>UI: Manage Suppliers UI->>API: GET /suppliers API->>SUP: fetch supplier data API->>UI: display suppliers data ``` Anything UNCLEAR The requirement is clear to me. ---","solution":"import datetime # Models representing data structures class Inventory: def __init__(self, id: int, name: str, quantity: int, location: str): self.id = id self.name = name self.quantity = quantity self.location = location class Order: def __init__(self, id: int, product: str, quantity: int, customer: str, date: datetime.datetime): self.id = id self.product = product self.quantity = quantity self.customer = customer self.date = date class Report: def __init__(self, id: int, title: str, content: str, generated_on: datetime.datetime): self.id = id self.title = title self.content = content self.generated_on = generated_on class Customer: def __init__(self, id: int, name: str, contact: str, address: str): self.id = id self.name = name self.contact = contact self.address = address class Supplier: def __init__(self, id: int, name: str, contact: str, address: str): self.id = id self.name = name self.contact = contact self.address = address"},{"question":"Implement a function merge_and_sort_odd_numbers(list1, list2): This function takes two lists of integers, list1 and list2, as input and returns a single list consisting of all the odd numbers from both lists, sorted in ascending order. If there are no odd numbers in both lists, the function should return an empty list. Example Test Cases: merge_and_sort_odd_numbers([10, 3, 5], [6, 7, 1]) = [1, 3, 5, 7] merge_and_sort_odd_numbers([4, 2, 8], [12, 14]) = [] merge_and_sort_odd_numbers([9, 13, 15], [3, 19, 11]) = [3, 9, 11, 13, 15, 19]","solution":"def merge_and_sort_odd_numbers(list1, list2): This function takes two lists of integers, list1 and list2, as input and returns a single list consisting of all the odd numbers from both lists, sorted in ascending order. If there are no odd numbers in both lists, the function should return an empty list. # Combine the two lists combined_list = list1 + list2 # Filter out the odd numbers odd_numbers = [num for num in combined_list if num % 2 != 0] # Sort the odd numbers in ascending order odd_numbers.sort() return odd_numbers"},{"question":"Write a function that, given an integer n, returns an array containing all the prime numbers up to (and including, if applicable) n. Optimize the function to handle very large values of n efficiently. Example: Input: 30 Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]","solution":"def sieve_of_eratosthenes(n): Returns a list of prime numbers up to and including n using the Sieve of Eratosthenes algorithm. if n < 2: return [] # Initialize a list to keep track of prime status of numbers from 0 to n. is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False p = 2 while p * p <= n: if is_prime[p]: # Marking multiples of p as False indicating they are not prime for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 # Collecting all prime numbers primes = [i for i in range(n + 1) if is_prime[i]] return primes"},{"question":"Design a function that takes a dictionary where keys are strings and values are lists of integers. The function should return a new dictionary where the keys are the same, but the values are the sum of the integers in the lists. If the input dictionary contains non-list values or lists with non-integer elements, the function should return an error message for each corresponding key. An example is shown below: #Input: {\'a\': [1, 2, 3], \'b\': [4, 5], \'c\': [6], \'d\': [7, \'eight\']} #Output: {\'a\': 6, \'b\': 9, \'c\': 6, \'d\': \'Error: contains non-integer elements\'} Develop a function to implement the above requirements. Handle cases where the input dictionary has keys with non-list values or lists with non-integer elements, and return a clear error message for such keys.","solution":"def sum_list_values(input_dict): Takes a dictionary where keys are strings and values are lists of integers. Returns a new dictionary where the values are the sum of the integers in the lists. If non-list values or lists with non-integer elements are encountered, returns an error message for those keys. output_dict = {} for key, value in input_dict.items(): if not isinstance(value, list): output_dict[key] = \'Error: contains non-list value\' continue try: output_dict[key] = sum(value) except TypeError: output_dict[key] = \'Error: contains non-integer elements\' return output_dict"},{"question":"Write a program that takes a list of integers and rearranges the elements in such a way that all negative numbers appear before all positive numbers, preserving their relative order. Zero should be considered a positive number. For example, given the list `[-1, 2, -3, 4, 0, -5, 6]`, the program should return `[-1, -3, -5, 2, 4, 0, 6]`. Your solution should focus on maintaining the original order of the negative and positive numbers, while achieving this rearrangement in linear time.","solution":"def rearrange_list(arr): Rearranges the elements of a list so that all negative numbers come before the positive numbers, preserving the original relative order. Parameters: arr (list of int): The list of integers to be rearranged. Returns: list of int: The rearranged list. if not arr: return [] negative_numbers = [x for x in arr if x < 0] non_negative_numbers = [x for x in arr if x >= 0] return negative_numbers + non_negative_numbers"},{"question":"Develop a `merge_alternate` function that takes two lists and merges them by alternatingly taking elements from each list. If one list is longer than the other, append the remaining elements of the longer list at the end. For instance: - Given the lists `[1, 2, 3]` and `[\'a\', \'b\', \'c\', \'d\', \'e\']`, the function should return `[1, \'a\', 2, \'b\', 3, \'c\', \'d\', \'e\']`. - For input lists `[1, 2, 3]` and `[4, 5]`, the output should be `[1, 4, 2, 5, 3]`. Here\'s the basic structure of the function: ```python from typing import List, Union def merge_alternate(list1: List[Union[int, str]], list2: List[Union[int, str]]) -> List[Union[int, str]]: # your code here ``` Sample Usage: ```python >>> merge_alternate([1, 2, 3], [\'a\', \'b\', \'c\', \'d\', \'e\']) [1, \'a\', 2, \'b\', 3, \'c\', \'d\', \'e\'] >>> merge_alternate([1, 2, 3], [4, 5]) [1, 4, 2, 5, 3] >>> merge_alternate([], [\'a\', \'b\']) [\'a\', \'b\'] ```","solution":"from typing import List, Union def merge_alternate(list1: List[Union[int, str]], list2: List[Union[int, str]]) -> List[Union[int, str]]: result = [] len1, len2 = len(list1), len(list2) min_len = min(len1, len2) # Interleave the elements of both lists up to the length of the shorter list for i in range(min_len): result.append(list1[i]) result.append(list2[i]) # Append the remaining elements of the longer list if len1 > len2: result.extend(list1[min_len:]) else: result.extend(list2[min_len:]) return result"},{"question":"Write a function `longest_palindromic_subsequence(s: str) -> int` that takes a non-empty string `s` consisting of lowercase alphabetic characters and returns the length of the longest palindromic subsequence in `s`. A palindromic subsequence is a subsequence that reads the same forwards and backwards. For example: ``` longest_palindromic_subsequence(\\"bbbab\\") -> 4 ``` The longest palindromic subsequence in \\"bbbab\\" is \\"bbbb\\". ``` longest_palindromic_subsequence(\\"cbbd\\") -> 2 ``` The longest palindromic subsequence in \\"cbbd\\" is \\"bb\\". Your solution should have a time complexity that is polynomial in the length of the input string `s`.","solution":"def longest_palindromic_subsequence(s: str) -> int: Returns the length of the longest palindromic subsequence in the string s. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"Write a function that takes an array of integers and returns the length of the longest consecutive elements sequence. The elements in the sequence should be consecutive integers. The function should have a time complexity of O(n). **Example:** ```python Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Input: [0, -1, 1, 3, 5, 4, 7, 6, 8] Output: 6 Explanation: The longest consecutive elements sequence is [-1, 0, 1, 3, 4, 5, 6, 7, 8]. Therefore its length is 6. ```","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence. num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: # It means it\'s the start of a sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Original Problem: Write a function that takes a string as input and checks if it is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Modified Problem: Write a Python program that takes a list of strings as input and determines how many of them are palindromes. For each palindrome found in the list, store the original string and its length in a dictionary. Additionally, implement a function to sort the dictionary by the length of the strings in descending order and print the sorted dictionary. Ensure the program handles any invalid input gracefully by identifying and skipping non-string elements, logging these errors in a separate file. To solve the problem: 1. Accept a list of strings as input. 2. Implement a function that checks if a string is a palindrome, ignoring spaces, punctuation, and capitalization. 3. Store each palindrome found in the list along with its length in a dictionary. 4. Implement a function to sort this dictionary by the length of the strings in descending order. 5. Handle invalid inputs by skipping non-string elements and logging these errors in a separate file. 6. Display the sorted dictionary of palindromes and their lengths.","solution":"import string import logging # Setting up the logging configuration logging.basicConfig(filename=\'invalid_inputs.log\', level=logging.ERROR) def is_palindrome(s): Returns True if the string s is a palindrome, ignoring spaces, punctuation, and capitalization. s = \'\'.join(char.lower() for char in s if char.isalnum()) return s == s[::-1] def store_palindromes(strings): Accepts a list of strings and returns a dictionary of palindromes and their lengths. palindrome_dict = {} for s in strings: if not isinstance(s, str): logging.error(f\\"Non-string input detected: {s}\\") continue if is_palindrome(s): palindrome_dict[s] = len(s) return palindrome_dict def sort_palindrome_dict(palindrome_dict): Sorts the dictionary by the length of the strings in descending order. return dict(sorted(palindrome_dict.items(), key=lambda item: item[1], reverse=True)) def process_strings(strings): Process the input list of strings to identify palindromes and their lengths, sort them, handle invalid inputs and print the sorted dictionary. palindrome_dict = store_palindromes(strings) sorted_palindrome_dict = sort_palindrome_dict(palindrome_dict) return sorted_palindrome_dict"},{"question":"Write a Python function called `reverse_list` that takes a list as an input and returns a new list that contains the elements of the original list in reverse order. The function should not modify the original list. For example, if the input list is `[1, 2, 3, 4, 5]`, the function should return `[5, 4, 3, 2, 1]`. **Function Signature** ```python def reverse_list(lst: list) -> list: pass # Example print(reverse_list([1, 2, 3, 4, 5])) # Output: [5, 4, 3, 2, 1] ```","solution":"def reverse_list(lst: list) -> list: Returns a new list that contains the elements of the original list in reverse order. return lst[::-1]"},{"question":"Create a function that simulates a simple recommendation system for an e-commerce website. Your function should accept a user\'s purchase history (a list of item IDs) and a dataset of all items available on the website (a dictionary where each key is an item ID and its value is a list of related item IDs). The function should return a list of recommended item IDs, based on the user\'s purchase history, sorted by the frequency of their occurrences in the related items. Implement additional logic to ensure that items the user has already purchased are not included in the recommendations and consider using a minimum purchase threshold to trigger recommendations. Also, write code to visualize the top 5 most frequently recommended items.","solution":"from collections import Counter from typing import List, Dict def recommend_items(purchase_history: List[int], items_dataset: Dict[int, List[int]], min_purchase_threshold: int = 1) -> List[int]: Recommends items based on the user\'s purchase history and the given items dataset. Args: - purchase_history: List of item IDs that the user has purchased. - items_dataset: A dictionary where keys are item IDs, and values are lists of related item IDs. - min_purchase_threshold: Minimum number of purchases required to trigger recommendations. Returns: - List of recommended item IDs sorted by frequency of occurrences in the related items. if len(purchase_history) < min_purchase_threshold: return [] recommendation_counter = Counter() for item in purchase_history: related_items = items_dataset.get(item, []) for related_item in related_items: if related_item not in purchase_history: recommendation_counter[related_item] += 1 # Create a sorted list of recommended items by their frequency recommended_items = sorted(recommendation_counter, key=recommendation_counter.get, reverse=True) return recommended_items"},{"question":"Write a Python function that simulates the rolling of two six-sided dice 10,000 times and calculates the probability of rolling a sum of 7. Use the `random` module for generating the dice rolls and illustrate your results with a bar plot of all possible outcomes (2 to 12) and their frequencies using `matplotlib`. Additionally, include the computation of the theoretical probability of rolling a sum of 7 and compare it with the simulated result.","solution":"import random import matplotlib.pyplot as plt def roll_dice(num_rolls=10000): roll_results = [random.randint(1, 6) + random.randint(1, 6) for _ in range(num_rolls)] frequencies = {i: roll_results.count(i) for i in range(2, 13)} return frequencies def calculate_probability(frequencies, num_rolls): sum_seven = frequencies[7] probability_of_seven = sum_seven / num_rolls return probability_of_seven def theoretical_probability(): return 1 / 6 def plot_results(frequencies): x = list(frequencies.keys()) y = list(frequencies.values()) plt.bar(x, y) plt.xlabel(\'Dice Sum\') plt.ylabel(\'Frequency\') plt.title(\'Frequency of Dice Sums\') plt.show() # Simulating the dice rolls frequencies = roll_dice() simulated_probability = calculate_probability(frequencies, 10000) theoretical_prob = theoretical_probability() # Plotting the results plot_results(frequencies) print(f\\"Simulated Probability of rolling a sum of 7: {simulated_probability}\\") print(f\\"Theoretical Probability of rolling a sum of 7: {theoretical_prob}\\") print(f\\"Difference: {abs(simulated_probability - theoretical_prob)}\\")"},{"question":"Write a Python function called `anagram_groups` that takes a list of strings as input and returns a list of lists, where each sublist contains strings that are anagrams of each other. The strings within each sublist should be in the same order as they appeared in the input list. Ensure your solution efficiently handles the comparison and grouping of anagrams. Example: ```python Input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] ``` # Constraints: - The input list contains only lower-case English letters. - The length of each string does not exceed 100 characters. - The total number of strings in the input list does not exceed 10^4. # Requirements: 1. Implement the function `anagram_groups(strings: List[str]) -> List[List[str]]`. 2. The function should return a list of lists where each sublist contains anagrams. 3. Optimize the algorithm to handle large inputs efficiently. Your implementation should not use any third-party libraries; rely on built-in Python functions and data structures.","solution":"from collections import defaultdict from typing import List def anagram_groups(strings: List[str]) -> List[List[str]]: Groups the list of strings into anagram groups. Args: strings (List[str]): The list of strings to group. Returns: List[List[str]]: A list of lists containing anagram groups. anagram_dict = defaultdict(list) for string in strings: sorted_string = \'\'.join(sorted(string)) anagram_dict[sorted_string].append(string) return list(anagram_dict.values())"},{"question":"Write a Python function that uses the OpenAI GPT-3 API to summarize text from a list of strings. The function should accept a list of strings as input and return a list of summarized texts. Each input text string should be summarized individually, and the function must handle potential API rate limits gracefully.","solution":"import openai from time import sleep openai.api_key = \'your_openai_api_key_here\' def summarize_texts(texts): Summarizes a list of texts using the OpenAI GPT-3 API. Parameters: texts (list): A list of strings to be summarized. Returns: list: A list of summarized texts. summaries = [] for text in texts: while True: # Handle API rate limiting try: response = openai.Completion.create( engine=\\"text-davinci-003\\", prompt=f\\"Summarize the following text:nn{text}\\", max_tokens=50 ) summaries.append(response.choices[0].text.strip()) break except openai.error.RateLimitError: sleep(1) # Wait for a second before retrying except Exception as e: summaries.append(f\\"Error: {str(e)}\\") break return summaries"},{"question":"Write a function that takes a list of tuples where each tuple contains a student\'s name and their corresponding scores in three different subjects. The function should calculate the average score for each student and return a sorted list of student names based on their average scores in descending order. In case of a tie, sort the names alphabetically. If the function receives an empty list or any tuple that does not contain exactly four elements (name and three scores), it should return \\"Invalid input\\". Test your function with the following input: students = [ (\'John\', 88, 77, 93), (\'Alice\', 85, 90, 92), (\'Bob\', 78, 81, 79), (\'Jane\', 92, 85, 88), (\'Emma\', 88, 84, 90) ]","solution":"def calculate_average_scores(students): if not students: return \\"Invalid input\\" # Check for invalid tuples for student in students: if len(student) != 4: return \\"Invalid input\\" # Calculate averages and map to names averages = [(student[0], (student[1] + student[2] + student[3]) / 3) for student in students] # Sort by average score descending, then by name ascending sorted_students = sorted(averages, key=lambda x: (-x[1], x[0])) # Extract names sorted_names = [student[0] for student in sorted_students] return sorted_names"},{"question":"Write a Python function to reverse the words in a given string while maintaining the original order of the words. The function should take a single input string and return a new string with each word reversed. Example Input: \\"Hello World\\" Example Output: \\"olleH dlroW\\"","solution":"def reverse_words_in_string(s): Reverses each word in the input string while maintaining the original order of the words. Args: s (str): Input string. Returns: str: New string with each word reversed. # Split the input string by spaces to get words words = s.split() # Reverse each word and join them with spaces to form the resultant string return \' \'.join(word[::-1] for word in words)"},{"question":"Implement a function that checks if a given string can be rearranged to form a palindrome. The function should return `True` if the string can be rearranged to form a palindrome and `False` otherwise. For example, the string \\"racecar\\" can be rearranged to form the palindrome \\"racecar\\", while the string \\"hello\\" cannot be rearranged to form a palindrome. You may assume that input strings contain only lowercase alphabetical characters. **Example inputs and outputs:** - rearrange_to_palindrome(\\"racecar\\") -> True - rearrange_to_palindrome(\\"hello\\") -> False - rearrange_to_palindrome(\\"aab\\") -> True","solution":"def rearrange_to_palindrome(s): Checks if a given string can be rearranged to form a palindrome. Args: s (str): The input string containing only lowercase alphabetical characters. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter count = Counter(s) # A string can be rearranged to form a palindrome if # at most one character occurs an odd number of times odd_count = sum(1 for freq in count.values() if freq % 2 != 0) return odd_count <= 1"},{"question":"Write a function to determine if a given string is a valid palindrome, ignoring cases, spaces, and non-alphanumeric characters. The function should return `True` if the string is a palindrome and `False` otherwise. For example: - **Input:** \\"A man, a plan, a canal: Panama\\" - **Output:** `True` (Explanation: Ignoring cases and non-alphanumeric characters, it reads as \\"amanaplanacanalpanama\\" which is a palindrome) - **Input:** \\"race a car\\" - **Output:** `False` (Explanation: Ignoring cases and non-alphanumeric characters, it reads as \\"raceacar\\" which is not a palindrome) Your implementation should effectively handle upper and lower case characters, spaces, and punctuation.","solution":"def is_palindrome(s): Determines if the given string is a valid palindrome, ignoring cases, spaces, and non-alphanumeric characters. :param s: The input string. :return: True if the string is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lower case cleaned_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Compare the cleaned string with its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a function that takes a list of strings, where each string represents a word. Your function should return the word that appears the most frequently in the list. If there is a tie, return the word that comes first lexicographically. For example, given the list `[\'apple\', \'banana\', \'apple\', \'orange\', \'banana\', \'banana\']`, the function should return `\\"banana\\"`.","solution":"from collections import Counter def most_frequent_word(words): Returns the most frequent word in the list of words. In case of a tie, the word that comes first lexicographically is returned. if not words: return \\"\\" word_count = Counter(words) max_frequency = max(word_count.values()) # Filtering only words with the maximum frequency candidates = [word for word, count in word_count.items() if count == max_frequency] return min(candidates)"},{"question":"Mario is playing a coin collection game on a grid. The grid is represented by a 2D array `grid` where each cell contains a certain number of coins, represented as integers. Mario starts from the top-left corner (0, 0) of the grid and needs to move to the bottom-right corner (m-1, n-1) of the grid, where `m` is the number of rows and `n` is the number of columns. Mario can only move to the right or down at any point in time. Mario wants to collect the maximum number of coins possible on his way to the bottom-right corner. Write a function `maxCoins(grid)` that calculates the maximum number of coins Mario can collect. # Example 1: **Input:** ``` grid = [ [0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1] ] ``` **Output:** ``` 12 ``` **Explanation:** ``` Mario can collect the maximum coins by taking the path 0→3→1→4→1→1→1, thus collecting a total of 12 coins. ``` # Example 2: **Input:** ``` grid = [ [1, 2, 5], [3, 2, 1] ] ``` **Output:** ``` 9 ``` **Explanation:** ``` Mario can collect the maximum coins by taking the path 1→2→5→1, thus collecting a total of 9 coins. ``` # Constraints: - `1 <= grid.length, grid[0].length <= 500` - `0 <= grid[i][j] <= 100`","solution":"def maxCoins(grid): Calculate the maximum number of coins Mario can collect from top-left to bottom-right of the grid. :param grid: List[List[int]] - a 2D grid where each cell contains a certain number of coins. :return: int - the maximum number of coins Mario can collect. m = len(grid) n = len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"You are given an array of integers where each element represents the height of a building. The width of each building is the same, and it\'s guaranteed that there are at least two buildings in the array. Design a program that finds two buildings that together with the x-axis form a container that holds the most water, and returns the maximum amount of water that can be held. The program should handle edge cases and provide efficient performance for large arrays. ```python def max_area(buildings: List[int]) -> int: max_water = 0 left = 0 right = len(buildings) - 1 while left < right: height = min(buildings[left], buildings[right]) width = right - left water = height * width max_water = max(max_water, water) if buildings[left] < buildings[right]: left += 1 else: right -= 1 return max_water ```","solution":"def max_area(buildings): Finds and returns the maximum amount of water that can be held between any two buildings. :param buildings: List[int] - a list of integers representing the heights of buildings :return: int - the maximum amount of water that can be held max_water = 0 left = 0 right = len(buildings) - 1 while left < right: height = min(buildings[left], buildings[right]) width = right - left water = height * width max_water = max(max_water, water) if buildings[left] < buildings[right]: left += 1 else: right -= 1 return max_water"},{"question":"Write a function that simulates a dice game between two players. The function should: 1. Simulate the rolling of two six-sided dice for each player. 2. Calculate the sum of the values from the two dice. 3. Compare the sum for each player to determine the winner. 4. Handle ties appropriately. The function should accept the players\' names as arguments and return a string declaring the winner or if it is a tie. Ensure that the randomness of the dice rolls is considered. ```python import random def dice_game(player1: str, player2: str) -> str: Simulate rolling two six-sided dice for each player and determine the winner. Randomly roll two dice for each player, sum their values, and compare. Args: player1 (str): The name of the first player. player2 (str): The name of the second player. Returns: str: A statement declaring the winner or if there is a tie. Examples: >>> random.seed(0) # Setting seed for reproducibility of this example >>> dice_game(\\"Alice\\", \\"Bob\\") \'Alice wins with a sum of 8 against 5\' >>> random.seed(1) >>> dice_game(\\"Charlie\\", \\"Dana\\") \'Dana wins with a sum of 10 against 6\' >>> random.seed(2) >>> dice_game(\\"Eve\\", \\"Frank\\") \'It is a tie with both summing to 7\' roll1_p1 = random.randint(1, 6) roll2_p1 = random.randint(1, 6) roll1_p2 = random.randint(1, 6) roll2_p2 = random.randint(1, 6) sum_p1 = roll1_p1 + roll2_p1 sum_p2 = roll1_p2 + roll2_p2 if sum_p1 > sum_p2: return f\'{player1} wins with a sum of {sum_p1} against {sum_p2}\' elif sum_p1 < sum_p2: return f\'{player2} wins with a sum of {sum_p2} against {sum_p1}\' else: return f\'It is a tie with both summing to {sum_p1}\' ```","solution":"import random def dice_game(player1: str, player2: str) -> str: Simulate rolling two six-sided dice for each player and determine the winner. Randomly roll two dice for each player, sum their values, and compare. Args: player1 (str): The name of the first player. player2 (str): The name of the second player. Returns: str: A statement declaring the winner or if there is a tie. roll1_p1 = random.randint(1, 6) roll2_p1 = random.randint(1, 6) roll1_p2 = random.randint(1, 6) roll2_p2 = random.randint(1, 6) sum_p1 = roll1_p1 + roll2_p1 sum_p2 = roll1_p2 + roll2_p2 if sum_p1 > sum_p2: return f\'{player1} wins with a sum of {sum_p1} against {sum_p2}\' elif sum_p1 < sum_p2: return f\'{player2} wins with a sum of {sum_p2} against {sum_p1}\' else: return f\'It is a tie with both summing to {sum_p1}\'"},{"question":"Using Python, write a function that takes a positive integer `n` as an input and returns a list of all prime numbers less than `n`.","solution":"def primes_less_than(n): Returns a list of all prime numbers less than n. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"The task at hand is to solve the problem titled \\"Maximum Length of Repeated Subarray\\". The problem statement is as follows: You are given two integer arrays `nums1` and `nums2`. Your task is to determine and return the length of their longest common subarray. To clarify, a subarray of nums1 or nums2 is a contiguous sequence of elements within the respective array. The longest common subarray is the longest sequence that appears in both nums1 and nums2 consecutively. For instance, consider the following examples: Example 1: Given Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7] Expected Output: 3 Justification: The longest common subarray is [3,2,1] with length 3. Example 2: Given Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0] Expected Output: 5 Justification: The longest common subarray is [0,0,0,0,0] with length 5. Please note the constraints: `1 <= nums1.length, nums2.length <= 1000` `0 <= nums1[i], nums2[i] <= 100`","solution":"def findLength(nums1, nums2): Returns the length of the longest common subarray of nums1 and nums2. m, n = len(nums1), len(nums2) dp = [[0] * (n + 1) for _ in range(m + 1)] max_length = 0 for i in range(m - 1, -1, -1): for j in range(n - 1, -1, -1): if nums1[i] == nums2[j]: dp[i][j] = dp[i + 1][j + 1] + 1 max_length = max(max_length, dp[i][j]) return max_length"},{"question":"Write a Python function that receives a dictionary where the keys are strings representing student names and the values are lists of integers representing their scores in different subjects. The function should return the name of the student with the highest average score. The score lists are guaranteed to be non-empty. ```python def best_student(scores: dict) -> str: # calculate average scores and find the highest one # return the name of the student with the highest average score pass ```","solution":"def best_student(scores: dict) -> str: Return the name of the student with the highest average score. Parameters: scores (dict): A dictionary where keys are student names and values are lists of their scores in different subjects. Returns: str: Name of the student with the highest average score. highest_avg = float(\'-inf\') best_student_name = \\"\\" for student, grades in scores.items(): average = sum(grades) / len(grades) if average > highest_avg: highest_avg = average best_student_name = student return best_student_name"},{"question":"Write a Python function that takes a list of strings as input and returns a dictionary where the keys are the strings and the values are the frequencies of each string in the list. Make sure to handle case sensitivity, such that \'Apple\' and \'apple\' are considered different strings. Also, write test cases to verify your function. Sample input: `[\'apple\', \'banana\', \'Apple\', \'banana\', \'banana\']`. Expected output: `{\'apple\': 1, \'banana\': 3, \'Apple\': 1}`.","solution":"def count_string_frequencies(strings): Takes a list of strings and returns a dictionary with the strings as keys and their frequencies as values. Parameters: strings (list): A list of strings. Returns: dict: A dictionary with string frequencies. frequency_dict = {} for string in strings: if string in frequency_dict: frequency_dict[string] += 1 else: frequency_dict[string] = 1 return frequency_dict"},{"question":"Write a function that converts a given Roman numeral into its equivalent integer. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. For example, given the Roman numeral \\"MCMXCIV\\", the function should return the integer 1994, since M = 1000, CM = 900, XC = 90, and IV = 4. To ensure accuracy, validate that the input string is a valid Roman numeral. The function should handle invalid characters or sequences gracefully by returning a clear error message. Note: Standard rules for Roman numeral formation must be considered, such as the prohibition of more than three consecutive identical symbols, and typical subtractive combinations like IV for 4 and IX for 9.","solution":"def roman_to_int(roman): Converts a Roman numeral string to an integer. :param roman: str: Roman numeral to convert :return: int: Equivalent integer value of the Roman numeral, or raises ValueError for invalid Roman numerals roman_values = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} subtractive_combinations = {\'IV\': 4, \'IX\': 9, \'XL\': 40, \'XC\': 90, \'CD\': 400, \'CM\': 900} # Validate Roman numeral validation_pattern = \'^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})\' import re if not re.match(validation_pattern, roman): raise ValueError(\\"Invalid Roman numeral\\") total = 0 i = 0 while i < len(roman): # Check for subtractive combination if i + 1 < len(roman) and roman[i:i+2] in subtractive_combinations: total += subtractive_combinations[roman[i:i+2]] i += 2 else: total += roman_values[roman[i]] i += 1 return total"},{"question":"Create a function that takes a list of integers as an argument and returns two separate lists: one containing all the prime numbers and the other containing all non-prime numbers from the given list. Ensure that the function handles edge cases such as an empty list or lists with no prime numbers correctly. Additionally, optimize the function to handle larger lists efficiently.","solution":"def is_prime(n): Helper function to determine if a given number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def separate_primes(nums): Takes a list of integers and returns two separate lists: one with prime numbers and one with non-prime numbers. primes = [] non_primes = [] for num in nums: if is_prime(num): primes.append(num) else: non_primes.append(num) return primes, non_primes"},{"question":"Create a function that takes a list of integers as input and returns a new list containing only the prime numbers from the input list. Ensure that your function is optimized for performance, especially for large input lists, and that it properly handles edge cases such as empty lists or lists with no prime numbers. Additionally, write a complementary function that verifies if a given number is prime. # Example: Input: [2, 3, 4, 5, 6, 7, 8, 9, 10] Output: [2, 3, 5, 7] # Function Signatures: - `def filter_primes(lst: List[int]) -> List[int]:` - `def is_prime(n: int) -> bool:` # Constraints: - The input list can contain up to 100,000 elements. - The integers in the input list can range from 1 to 10,000,000. - An integer n is considered a prime number if it is greater than 1 and has no divisors other than 1 and itself.","solution":"from typing import List def is_prime(n: int) -> bool: Determine if n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(lst: List[int]) -> List[int]: Returns a list containing only the prime numbers from the input list. return [x for x in lst if is_prime(x)]"},{"question":"Write a function in Python to rotate a 2D matrix (n x n) 90 degrees clockwise. The function should take a list of lists as input and modify it in place. matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]","solution":"def rotate(matrix): Rotates a given n x n 2D matrix 90 degrees clockwise in place. Parameters: matrix (list of list of int): The 2D matrix to rotate. n = len(matrix) # First, transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Then, reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Write a function in Python that takes a list of integers as input and returns a list of all unique triplets (three numbers) from the given list that add up to zero. The output list should not contain duplicate triplets. For example, for an input list [-1, 0, 1, 2, -1, -4], the output should be [[-1, 0, 1], [-1, -1, 2]]. Ensure the function is efficient and handles edge cases appropriately.","solution":"def three_sum(nums): Returns a list of all unique triplets in the given list that add up to zero. nums.sort() result = [] n = len(nums) for i in range(n-2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i+1, n-1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left+1]: left += 1 while left < right and nums[right] == nums[right-1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result"},{"question":"Edit the following Python code to add functionality that returns a list of all even numbers from a provided list of integers. The new function should be called `filter_even_numbers`. ```python numbers = [10, 15, 20, 25, 30, 35] def filter_even_numbers(numbers_list): # Write code here to filter and return even numbers pass result = filter_even_numbers(numbers) print(result) # Output should be [10, 20, 30] ```","solution":"def filter_even_numbers(numbers_list): Returns a list of even numbers from the provided list. return [num for num in numbers_list if num % 2 == 0] # Example usage numbers = [10, 15, 20, 25, 30, 35] result = filter_even_numbers(numbers) print(result) # Output should be [10, 20, 30]"},{"question":"Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string. You are not allowed to use any built-in string manipulation functions other than basic indexing and slicing.","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string. :param strs: List of strings :return: Longest common prefix string or empty string if not strs: return \\"\\" # Start by assuming the longest common prefix is the entire first string prefix = strs[0] # Compare this prefix with each string in the list for string in strs[1:]: # Update the prefix by comparing it with the current string while string[:len(prefix)] != prefix and prefix: prefix = prefix[:len(prefix)-1] if not prefix: break return prefix"},{"question":"Implement a function in Python that takes a list of integers and a target sum as input and returns all unique pairs of integers from the list that add up to the target sum. Assume the input list is not sorted and might contain duplicate values. The output list should not contain duplicate pairs, and each pair should be sorted in ascending order. The result should also be returned in a sorted manner, where each pair is sorted first by the first element, then by the second. Avoid using extra data structures like sets to ensure the solution is efficient in terms of memory usage. **Function Signature:** ```python def find_pairs(nums: List[int], target: int) -> List[Tuple[int, int]]: pass ``` **Example:** ```python # Example 1 nums = [1, 2, 3, 4, 3] target = 6 # Output: [(2, 4), (3, 3)] # Example 2 nums = [1, 1, 2, 2, 3, 3] target = 4 # Output: [(1, 3), (2, 2)] ``` **Constraints:** - The function must handle lists of up to 10^5 elements efficiently. - The elements of the list are within the range of -10^9 to 10^9. - The solution should have a time complexity of O(n log n) or better. - Do not use additional data structures like sets to store intermediate results.","solution":"def find_pairs(nums, target): Returns a list of unique pairs (in tuples) from nums that add up to target. Each pair is sorted in ascending order and the list of pairs is sorted. # Sort the list to start using two-pointer technique nums.sort() # List to hold the pairs pairs = [] # Two-pointer setup left = 0 right = len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum == target: # Found a pair pairs.append((nums[left], nums[right])) # Move left pointer rightward to avoid duplicate pairs while left < right and nums[left] == pairs[-1][0]: left += 1 # Move right pointer leftward to avoid duplicate pairs while left < right and nums[right] == pairs[-1][1]: right -= 1 elif current_sum < target: left += 1 else: right -= 1 return pairs"},{"question":"Given a list of integers, you are to write a function that reorders the list so that all the even numbers are listed before all the odd numbers. Additionally, all even numbers should be sorted in ascending order, and all odd numbers should be sorted in descending order. **Input**: A list of integers `nums` where the length of the list (n) satisfies 1 ≤ n ≤ 10^5. The integers in the list can range from 0 to 10^9. **Output**: Return a list that meets the specified condition – evens appearing first in ascending order followed by odds in descending order. **Example**: ```python Input: nums = [4, 3, 1, 2, 0, 5, 9, 8] Output: [0, 2, 4, 8, 9, 5, 3, 1] ``` **Function Signature**: ```python def reorder_even_odd(nums: List[int]) -> List[int]: pass ```","solution":"from typing import List def reorder_even_odd(nums: List[int]) -> List[int]: Reorders the list so that all even numbers are sorted in ascending order, followed by all odd numbers sorted in descending order. evens = sorted([num for num in nums if num % 2 == 0]) odds = sorted([num for num in nums if num % 2 != 0], reverse=True) return evens + odds"},{"question":"Implement a function in Python which takes a string as input and returns a new string where each character is replaced by the next character in the ASCII table. If the character is \'z\' or \'Z\', it should wrap around to \'a\' or \'A\' respectively. Ignore non-alphabetical characters in the input string and preserve their position in the result. ```python def shift_characters(s): In a given input string `s`, replace each character with the next character in the ASCII table. If a character is \'z\' or \'Z\', it should wrap around to \'a\' or \'A\' respectively. Ignore non-alphabetical characters in the input string and keep them in their original position. Examples: >>> shift_characters(\'abcdxyz\') == \'bcdeyza\' >>> shift_characters(\'Hello, World!\') == \'Ifmmp, Xpsme!\' >>> shift_characters(\'Python3.8\') == \'Qzuipo3.8\' >>> shift_characters(\'Zebra\') == \'Afcsb\' ```","solution":"def shift_characters(s): In a given input string `s`, replace each character with the next character in the ASCII table. If a character is \'z\' or \'Z\', it should wrap around to \'a\' or \'A\' respectively. Ignore non-alphabetical characters in the input string and keep them in their original position. result = [] for char in s: if \'a\' <= char <= \'y\': result.append(chr(ord(char) + 1)) elif char == \'z\': result.append(\'a\') elif \'A\' <= char <= \'Y\': result.append(chr(ord(char) + 1)) elif char == \'Z\': result.append(\'A\') else: result.append(char) return \'\'.join(result)"},{"question":"Design a function that generates a random maze of size n x n, represented by a 2D array. In the maze, cells are either paths (denoted by 0) or walls (denoted by 1). The maze must have a single starting point at the top-left corner (0, 0) and a single ending point at the bottom-right corner (n-1, n-1). Implement an algorithm to check if there is a valid path from the starting point to the ending point using Depth-First Search (DFS). Return True if a valid path exists, and False otherwise.","solution":"import random def generate_maze(n): Generates a random maze of size n x n. Paths are denoted by 0 and walls by 1. The starting point is at (0, 0) and the ending point is at (n-1, n-1). maze = [[random.choice([0, 1]) for _ in range(n)] for _ in range(n)] # Ensure the start and end points are paths maze[0][0] = 0 maze[n-1][n-1] = 0 return maze def is_valid_path(maze): Checks if there is a valid path from the top-left corner to the bottom-right corner of the maze. Uses Depth-First Search (DFS). n = len(maze) visited = [[False] * n for _ in range(n)] def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= n or maze[x][y] == 1 or visited[x][y]: return False if x == n-1 and y == n-1: return True visited[x][y] = True # Explore neighbors: right, down, left, up if (dfs(x+1, y) or dfs(x, y+1) or dfs(x-1, y) or dfs(x, y-1)): return True visited[x][y] = False return False return dfs(0, 0)"},{"question":"Create a function that accepts a string and returns a new string where each alphabetic character in the original string is replaced by the next letter in the alphabet. If a letter is \'z\' or \'Z\', it should be wrapped around to \'a\' or \'A\' respectively. Non-alphabetic characters should remain unchanged. For example, given the input \\"Zoo Keeper!\\", the output should be \\"App Lffqfs!\\".","solution":"def shift_characters(s): Shift each alphabetic character to the next character in the alphabet, wrapping \'z\' to \'a\' and \'Z\' to \'A\'. Non-alphabetic characters remain unchanged. result = [] for char in s: if \'a\' <= char <= \'z\': result.append(chr((ord(char) - ord(\'a\') + 1) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': result.append(chr((ord(char) - ord(\'A\') + 1) % 26 + ord(\'A\'))) else: result.append(char) return \'\'.join(result)"},{"question":"Write a program that takes two unsorted arrays of integers and finds the longest common subsequence (LCS) between them. The program should output the LCS and its length. For example, given the arrays: [3, 10, 4, 5, 9, 6] [10, 4, 9, 3, 6, 5] The program should identify the longest common subsequence and return both the sequence and its length. **Requirements:** 1. Use a dynamic programming approach to solve the problem. 2. Consider edge cases such as one or both arrays being empty. 3. Ensure the solution has a reasonable time complexity for large inputs. **Example:** Input: Array 1: [3, 10, 4, 5, 9, 6] Array 2: [10, 4, 9, 3, 6, 5] Output: Longest Common Subsequence: [10, 4, 9] Length of LCS: 3","solution":"def lcs(arr1, arr2): Finds the longest common subsequence (LCS) between two unsorted arrays. Args: arr1 (list of int): A list of integers representing the first array. arr2 (list of int): A list of integers representing the second array. Returns: tuple: A tuple (list of int, int) where the first element is the LCS and the second element is its length. m, n = len(arr1), len(arr2) if m == 0 or n == 0: return [], 0 # Sorting arrays to apply LCS determination logic arr1.sort() arr2.sort() # Create DP table dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill DP table for i in range(m): for j in range(n): if arr1[i] == arr2[j]: dp[i+1][j+1] = dp[i][j] + 1 else: dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1]) # Backtrack to find the LCS lcs_seq = [] i, j = m, n while i > 0 and j > 0: if arr1[i-1] == arr2[j-1]: lcs_seq.append(arr1[i-1]) i -= 1 j -= 1 elif dp[i-1][j] > dp[i][j-1]: i -= 1 else: j -= 1 lcs_seq.reverse() return lcs_seq, len(lcs_seq)"},{"question":"Create a function that validates Sudoku boards and determines if the board is solved correctly: def validate_sudoku(board): \'\'\' Accept a 9x9 2D array representing a Sudoku board. Validate whether the board satisfies all constraints of a correctly solved Sudoku. A valid Sudoku board (partially filled) ensures: 1. Each row contains the digits 1-9 without repetition. 2. Each column contains the digits 1-9 without repetition. 3. Each of the nine 3x3 sub-boxes contains the digits 1-9 without repetition. The board can contain the integer 0 to represent an empty cell. Return True if the board is valid according to the rules above, False otherwise. Example: board = [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] validate_sudoku(board) = True board = [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 8] # Last number in the last row should be 9 for the board to be valid ] validate_sudoku(board) = False \'\'\'","solution":"def validate_sudoku(board): Accept a 9x9 2D array representing a Sudoku board. Validate whether the board satisfies all constraints of a correctly solved Sudoku. A valid Sudoku board (partially filled) ensures: 1. Each row contains the digits 1-9 without repetition. 2. Each column contains the digits 1-9 without repetition. 3. Each of the nine 3x3 sub-boxes contains the digits 1-9 without repetition. The board can contain the integer 0 to represent an empty cell. Return True if the board is valid according to the rules above, False otherwise. def is_valid_unit(unit): unit = [num for num in unit if num != 0] return len(unit) == len(set(unit)) def is_valid_row(board): for row in board: if not is_valid_unit(row): return False return True def is_valid_column(board): for col in range(9): column = [board[row][col] for row in range(9)] if not is_valid_unit(column): return False return True def is_valid_subgrid(board): for row in range(0, 9, 3): for col in range(0, 9, 3): subgrid = [board[r][c] for r in range(row, row+3) for c in range(col, col+3)] if not is_valid_unit(subgrid): return False return True return is_valid_row(board) and is_valid_column(board) and is_valid_subgrid(board)"},{"question":"Write a function that takes a list of integers as input and returns the sum of the even numbers and the product of the odd numbers in the list. Your function should handle negative numbers and zeros appropriately. Additionally, given the faulty piece of code below, correct it to meet the requirements stated. Faulty Code: ```python def process_numbers(numbers): even_sum = 0 odd_product = 1 for num in numbers: if num % 2 == 0: even_sum =+ num else: odd_product =* num return even_sum, odd_product print(process_numbers([1, 2, 3, 4, 5, -6, -7, 0])) ``` List: [1, 2, 3, 4, 5, -6, -7, 0]","solution":"def process_numbers(numbers): Returns the sum of the even numbers and the product of the odd numbers in the list. Parameters: numbers (list): A list of integers. Returns: tuple: A tuple containing the sum of the even numbers and the product of the odd numbers. even_sum = 0 odd_product = 1 has_odd = False for num in numbers: if num % 2 == 0: even_sum += num else: odd_product *= num has_odd = True if not has_odd: odd_product = 0 return even_sum, odd_product # Example usage: print(process_numbers([1, 2, 3, 4, 5, -6, -7, 0])) # Output: (0, 105)"},{"question":"Write a function that takes a list of integers and an integer `k`, and returns the `k` largest elements in the list in descending order. Your solution should account for the potential that the list could be very large. Analyze the time complexity of your function and explain how well it handles large datasets. Optimize your function to ensure it can process lists with up to one million elements efficiently and provide a justification for your optimization choices. Example: ```python def k_largest_elements(nums, k): # Your code here # Sample input and output nums = [3, 1, 5, 2, 4, 6] k = 3 print(k_largest_elements(nums, k)) # Output: [6, 5, 4] ```","solution":"import heapq def k_largest_elements(nums, k): Returns the k largest elements in the list `nums` in descending order. if k <= 0: return [] # Use a heap to find the k largest elements efficiently largest_elements = heapq.nlargest(k, nums) return sorted(largest_elements, reverse=True)"},{"question":"Write a function to determine if a string has all unique characters. For example, \\"hello\\" has duplicate characters, while \\"world\\" does not. Your solution should first implement a function that checks uniqueness for a given string. Then, extend it to handle inputs of a list of strings and return a list of booleans indicating whether each respective string has all unique characters. Additionally, optimize your solution to have a time complexity better than O(n²).","solution":"def is_unique_string(s): Determines if a string has all unique characters. Args: s (str): The string to check. Returns: bool: True if all characters in the string are unique, False otherwise. char_set = set() for char in s: if char in char_set: return False char_set.add(char) return True def are_strings_unique(str_list): Determines if each string in a list has all unique characters. Args: str_list (list): List of strings to check. Returns: list: List of booleans indicating if each string has all unique characters. return [is_unique_string(s) for s in str_list]"},{"question":"Write a function that takes a string as input and returns a new string with all the characters rearranged such that no two adjacent characters are the same. If no such arrangement is possible, return an empty string. The input string will only contain lowercase English letters. Ensure the solution efficiently handles cases with varying frequencies of characters.","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_string(s): # Count frequencies of characters char_count = Counter(s) # Use a max heap to store the characters by frequency max_heap = [] for char, count in char_count.items(): heappush(max_heap, (-count, char)) # Variables to store the previous character and its count prev_char = None prev_count = 0 result = [] while max_heap: count, char = heappop(max_heap) result.append(char) # If previous character still has a count, push it back to the heap if prev_char and prev_count < 0: heappush(max_heap, (prev_count, prev_char)) # Update the previous character and count prev_char = char prev_count = count + 1 # Since we used one instance of this character # Check if the resulting string has the correct length if len(result) != len(s): return \\"\\" return \\"\\".join(result)"},{"question":"Create a function to balance parentheses in mathematical expressions by reporting the positions of any unbalanced parentheses. def balance_parentheses(expression): balance_parentheses is a function that takes a string representing a mathematical expression and returns a list of positions of unbalanced parentheses. The positions are determined as per the 0-based index system. >>> balance_parentheses(\'\') [] >>> balance_parentheses(\'(()\') [0] >>> balance_parentheses(\'(a+b)\') [] >>> balance_parentheses(\')a+b(\') [0, 4] >>> balance_parentheses(\'(a+b))\') [5] >>> balance_parentheses(\'(a+b*(c-d)\') [0] >>> balance_parentheses(\'((a+b)\') [0] # Your code here","solution":"def balance_parentheses(expression): balance_parentheses is a function that takes a string representing a mathematical expression and returns a list of positions of unbalanced parentheses. The positions are determined as per the 0-based index system. >>> balance_parentheses(\'\') [] >>> balance_parentheses(\'(()\') [0] >>> balance_parentheses(\'(a+b)\') [] >>> balance_parentheses(\')a+b(\') [0, 4] >>> balance_parentheses(\'(a+b))\') [5] >>> balance_parentheses(\'(a+b*(c-d)\') [0] >>> balance_parentheses(\'((a+b)\') [0] stack = [] unbalanced_positions = [] for i, char in enumerate(expression): if char == \'(\': stack.append(i) elif char == \')\': if stack: stack.pop() else: unbalanced_positions.append(i) # Positions of \'(\'s left in stack are unbalanced unbalanced_positions.extend(stack) return unbalanced_positions"},{"question":"Write a function in Python that takes a string representation of a mathematical expression and evaluates it. The string can contain positive integers and the operators +, -, *, and / (with no spaces in between). The function should respect the order of operations (PEMDAS/BODMAS rules). Additionally, handle cases where the input string is invalid due to the presence of unbalanced parentheses, invalid characters, or improper use of operators (such as double operators like \\"++\\" or starting/ending with an operator). Demonstrate the function with various test cases, including edge cases such as an empty string, expressions with balanced and unbalanced parentheses, and improper operator usage. **Examples:** ```python evaluate_expression(\\"3+2*2\\") # Should return 7 evaluate_expression(\\"3/2\\") # Should return 1.5 evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\") # Should return 23 evaluate_expression(\\"(3+2)*2\\") # Should return 10 evaluate_expression(\\"\\") # Should handle as an invalid input evaluate_expression(\\"(2+3\\") # Should handle as an unbalanced parentheses evaluate_expression(\\"2++3\\") # Should handle as an improper operator usage ```","solution":"import re def evaluate_expression(expression): Evaluates a mathematical expression given as a string, respecting the order of operations. # Step 0: Check validity of input and handle edge cases if not expression or not is_valid_expression(expression): raise ValueError(\\"Invalid expression\\") try: # Step 1: Use eval to calculate the result respecting order of operations and parenthesis result = eval(expression) except ZeroDivisionError: raise ValueError(\\"Division by zero error\\") except Exception: raise ValueError(\\"Invalid expression\\") return result def is_valid_expression(expression): Validates if the given expression is a syntactically correct mathematical expression. valid_chars = \'0123456789+-*/()\' # Regular expression to check balanced parentheses parens_check = re.compile(\\"^[ d+-*/().]*\\") if not all(char in valid_chars for char in expression): return False if not parens_check.match(expression): return False # Check for unbalanced parentheses if expression.count(\'(\') != expression.count(\')\'): return False # Check for consecutive operators or hanging operators at the start/end if re.search(r\'[+*/-]{2,}\', expression) or expression[0] in \'+/*-)\' or expression[-1] in \'+/*-(\': return False return True"},{"question":"Given a list of student records, each containing the student\'s name and their respective grades across multiple subjects, write a function to determine the student(s) with the highest average grade. The input will be a list of dictionaries with each dictionary containing a \'name\' key and \'grades\' key, where \'grades\' is a list of integers representing the student\'s grades in different subjects. Should there be multiple students with the highest average, return a list of their names. **Function signature:** ```python def top_students(records: List[Dict[str, Union[str, List[int]]]]) -> List[str]: ``` **Example:** ```python records = [ {\\"name\\": \\"Alice\\", \\"grades\\": [90, 95, 88]}, {\\"name\\": \\"Bob\\", \\"grades\\": [85, 92, 91]}, {\\"name\\": \\"Charlie\\", \\"grades\\": [91, 92, 90]}, ] top_students(records) ``` **Output:** ```python [\\"Alice\\", \\"Charlie\\"] ``` In this example, Alice and Charlie share the highest average grade of 91, so the function returns their names in a list.","solution":"from typing import List, Dict, Union def top_students(records: List[Dict[str, Union[str, List[int]]]]) -> List[str]: highest_avg = -1 top_students_list = [] for record in records: avg_grade = sum(record[\'grades\']) / len(record[\'grades\']) if avg_grade > highest_avg: highest_avg = avg_grade top_students_list = [record[\'name\']] elif avg_grade == highest_avg: top_students_list.append(record[\'name\']) return top_students_list"},{"question":"Write a function that takes an input string containing a series of words separated by spaces, reverses the order of the words, and then prints the transformed string. Additionally, the function should count and return the number of words in the input string. Input: \\"The quick brown fox jumps over the lazy dog\\" Output: \\"dog lazy the over jumps fox brown quick The\\" 9","solution":"def reverse_words_and_count(input_string): Reverses the order of the words in the input string and counts the number of words. Returns a tuple containing the transformed string and the word count. words = input_string.split() reversed_words = \' \'.join(reversed(words)) word_count = len(words) return reversed_words, word_count"},{"question":"Develop a Python function that calculates the sum of the digits of a given integer learned through recursion. Your function should efficiently manage edge cases, such as negative numbers. For example, for the provided input `12345`, the function is expected to return `15` as the sum of its digits (i.e., 1 + 2 + 3 + 4 + 5). Ensure that the function includes documentation for clarity on its usage and implementation.","solution":"def sum_of_digits(n): Returns the sum of the digits of a given integer using recursion. Handles both positive and negative integers. Args: n (int): The integer whose digits are to be summed. Returns: int: Sum of the digits of the given integer. n = abs(n) # Handle negative numbers if n == 0: return 0 return n % 10 + sum_of_digits(n // 10)"},{"question":"Write a Python function that takes a list of integers and an integer `X`. Your function should return a new list that contains all the elements of the original list except those that are divisible by `X`. Ensure that your function handles cases where the list is empty or contains no elements divisible by `X` gracefully. For example, given the list `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]` and `X = 2`, the function should return `[1, 3, 5, 7, 9]`. Example: ```python def remove_divisibles(lst, X): # Your code here # Sample Usage input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] divisor = 2 print(remove_divisibles(input_list, divisor)) # Output should be [1, 3, 5, 7, 9] ``` Complete the function `remove_divisibles` to perform as specified above.","solution":"def remove_divisibles(lst, X): Returns a list of elements from `lst` that are not divisible by `X`. :param lst: List of integers :param X: Integer divisor :return: A list of integers not divisible by `X` return [item for item in lst if item % X != 0]"},{"question":"Design a function that accepts a list of integers as input and identifies whether the list contains any duplicate values. If duplicates are found, the function should return `True`; otherwise, it should return `False`. Ensure that the solution is optimized for efficiency, considering both time and space complexity. Provide examples demonstrating the function\'s behavior.","solution":"def contains_duplicates(nums): Returns True if the input list `nums` contains any duplicates, otherwise False. nums_set = set() for num in nums: if num in nums_set: return True nums_set.add(num) return False"},{"question":"You are working on a feature that involves the management of a dynamic set of intervals. Each interval is defined by a start and end time, and intervals may overlap. You need to develop a module that can merge overlapping intervals and return a list of the merged intervals. Write a function that takes a list of intervals, where each interval is represented by a tuple (start, end). Implement an algorithm to merge all overlapping intervals and return the list of merged intervals, where no intervals overlap. For example, given the input `[(1, 3), (2, 6), (8, 10), (15, 18)]`, the function should return `[(1, 6), (8, 10), (15, 18)]`. Provide a complete implementation of your solution in any programming language of your choice.","solution":"def merge_intervals(intervals): Merges overlapping intervals. :param intervals: List of tuples, where each tuple represents an interval (start, end) :return: List of merged intervals if not intervals: return [] # Sort intervals based on the starting time intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for i in range(1, len(intervals)): current_interval = intervals[i] last_merged_interval = merged[-1] # If the current interval overlaps with the last merged interval, merge them if current_interval[0] <= last_merged_interval[1]: merged[-1] = (last_merged_interval[0], max(last_merged_interval[1], current_interval[1])) else: merged.append(current_interval) return merged"},{"question":"Write a function that takes in four strings representing shopping lists from four different stores. Each string contains a list of items, separated by a comma. The function should return a dictionary where the keys are the items and the values are the number of stores that have that item on their list. Function Signature: ```python def count_common_items(list1: str, list2: str, list3: str, list4: str) -> dict: pass ``` Example: Input: ``` list1 = \\"apples, bananas, carrots, dates\\" list2 = \\"bananas, dates, eggs, figs\\" list3 = \\"grapes, apples, bananas, eggs\\" list4 = \\"carrots, dates, figs, apples\\" ``` Output: ``` { \'apples\': 3, \'bananas\': 3, \'carrots\': 2, \'dates\': 3, \'eggs\': 2, \'figs\': 2, \'grapes\': 1 } ```","solution":"def count_common_items(list1: str, list2: str, list3: str, list4: str) -> dict: Count how many lists each item appears in. from collections import defaultdict # Split each list and convert them to sets for easy comparison set1 = set(list1.split(\', \')) set2 = set(list2.split(\', \')) set3 = set(list3.split(\', \')) set4 = set(list4.split(\', \')) # Use a defaultdict to count the appearances in lists item_counts = defaultdict(int) # Count appearances in each set for item in set1: item_counts[item] += 1 for item in set2: item_counts[item] += 1 for item in set3: item_counts[item] += 1 for item in set4: item_counts[item] += 1 return dict(item_counts)"},{"question":"Write a function that takes as input a string containing a mathematical expression using only addition (`+`), subtraction (`-`), and parentheses `()`. The function should return the computed result of the expression. You may assume that the input string is always a valid expression and contains no spaces. For example, given the input `\\"(1+(4+5+2)-3)+(6+8)\\"`, the output should be `23`.","solution":"def calculate(expression): Evaluate a mathematical expression using addition, subtraction and parentheses. def helper(s, index): stack = [] num = 0 sign = 1 while index < len(s): char = s[index] if char.isdigit(): num = num * 10 + int(char) elif char == \'+\': stack.append(sign * num) num = 0 sign = 1 elif char == \'-\': stack.append(sign * num) num = 0 sign = -1 elif char == \'(\': num, index = helper(s, index + 1) elif char == \')\': stack.append(sign * num) return sum(stack), index index += 1 stack.append(sign * num) return sum(stack) return helper(expression, 0)"},{"question":"Write a function that, given a string representing a mathematical expression with only addition and multiplication operations (e.g., \\"3+5*2\\"), evaluates and returns the correct result according to the standard order of operations (multiplication before addition), without using Python\'s built-in `eval` function. **Example:** - Input: \\"3+5*2\\" - Output: 13 - Input: \\"10+2*6\\" - Output: 22 **Constraints:** - The input string will contain only positive integers and the operators \'+\' and \'*\'. - The input string will not contain any spaces. - The length of the input string will not exceed 100 characters.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing only addition and multiplication operations without using Python\'s built-in eval function. # Split the expression by \'+\' to separate addition groups addition_groups = expression.split(\'+\') # Process each group to handle multiplication total = 0 for group in addition_groups: # Split the group by \'*\' to handle multiplication multiplication_numbers = map(int, group.split(\'*\')) # Calculate the product of the multiplication group product = 1 for num in multiplication_numbers: product *= num # Add the product to the total sum total += product return total"},{"question":"Write a program that takes a list of integers and returns a new list that contains only the prime numbers from the original list. Additionally, the program should include a function to find the highest prime number in the list and another function to calculate the sum of all prime numbers. Demonstrate the functionality of your program with a sample list of integers and explain how it computes the desired results.","solution":"import math def is_prime(n): Helper function to check if a given number n is prime. if n <= 1: return False if n == 2: return True for i in range(2, math.isqrt(n) + 1): if n % i == 0: return False return True def filter_primes(lst): Returns a list of prime numbers from the given list lst. return [x for x in lst if is_prime(x)] def highest_prime(lst): Returns the highest prime number in the given list lst. primes = filter_primes(lst) return max(primes) if primes else None def sum_of_primes(lst): Returns the sum of all prime numbers in the given list lst. return sum(filter_primes(lst)) # Demonstration with a sample list of integers sample_list = [10, 15, 3, 7, 11, 2, 20, 13, 5] filtered_primes = filter_primes(sample_list) highest_prime_in_list = highest_prime(sample_list) sum_primes_in_list = sum_of_primes(sample_list)"},{"question":"Given a list of integers, perform the following tasks in Python: Original list: [7, 2, 9, 21, 4, 6, 1, 3] 1. Create a new list where each integer is replaced by the sum of its digits. 2. Use the new list to create a dictionary where each key is the original integer from the list and the value is the corresponding sum of its digits. 3. Create a function to return the integer from the original list that has the highest sum of its digits. In case of a tie, return all such integers. Include error handling for an empty list and non-integer elements.","solution":"def sum_of_digits(n): Returns the sum of the digits of an integer n. return sum(int(digit) for digit in str(n)) def create_sum_list(int_list): Given a list of integers, returns a new list where each integer is replaced by the sum of its digits. return [sum_of_digits(x) for x in int_list] def create_digit_sum_dict(int_list): Given a list of integers, returns a dictionary where each key is the original integer from the list and the value is the corresponding sum of its digits. return {x: sum_of_digits(x) for x in int_list} def highest_digit_sum_in_list(int_list): Returns the integer(s) from the original list that has the highest sum of its digits. In case of a tie, returns all such integers. Includes error handling for an empty list and non-integer elements. if not int_list: return \\"Error: Empty list\\" if any(not isinstance(x, int) for x in int_list): return \\"Error: List contains non-integer elements\\" digit_sum_dict = create_digit_sum_dict(int_list) max_sum = max(digit_sum_dict.values()) return [key for key, value in digit_sum_dict.items() if value == max_sum] original_list = [7, 2, 9, 21, 4, 6, 1, 3]"},{"question":"Design a function that takes a string representing an arithmetic expression (containing only non-negative integers, parentheses, \'+\', and \'*\') and computes its value. Ensure the function handles operator precedence correctly. **Example:** Input: \\"2*(5+5*2)/3+(6/2+8)\\" Output: 21","solution":"def evaluate_expression(expression: str) -> int: Evaluate an arithmetic expression containing non-negative integers, parentheses, \'+\', \'*\', and \'/\' and return its value. Args: expression (str): A string that represents the arithmetic expression. Returns: int: The result of the evaluation of the expression. import re def compute(op, second, first): if op == \'+\': return first + second elif op == \'-\': return first - second elif op == \'*\': return first * second elif op == \'/\': return int(first / second) # using // would not work properly def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_ops(vals, ops): while ops and ops[-1] in {\'+\', \'-\', \'*\', \'/\'}: op = ops.pop() second = vals.pop() first = vals.pop() vals.append(compute(op, second, first)) vals = [] ops = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': ops.append(expression[i]) elif expression[i].isdigit(): val = 0 while (i < len(expression) and expression[i].isdigit()): val = (val * 10) + int(expression[i]) i += 1 vals.append(val) i -= 1 elif expression[i] == \')\': while ops and ops[-1] != \'(\': apply_ops(vals, ops) ops.pop() else: while (ops and precedence(ops[-1]) >= precedence(expression[i])): apply_ops(vals, ops) ops.append(expression[i]) i += 1 while ops: apply_ops(vals, ops) return vals[-1]"},{"question":"Design and implement a function that takes a list of integers representing the heights of buildings in a city skyline and returns the count of visible buildings when viewed from the left side. Assume a building is visible if it is taller than all the buildings before it. Provide a solution using Python.","solution":"def count_visible_buildings(heights): Returns the count of visible buildings from the left side. A building is visible if it is taller than all the buildings before it. Parameters: heights (list): List of integers representing the heights of buildings. Returns: int: The count of visible buildings. if not heights: return 0 visible_count = 1 # The first building is always visible max_height = heights[0] for height in heights[1:]: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"You are tasked with writing a function that processes a list of integers. Your function should return a dictionary where the keys are unique integers from the list, and the values are the number of times each integer appears in the list. # Requirements: 1. **Function Name**: `count_occurrences` 2. **Input**: A list of integers `nums` 3. **Output**: A dictionary where each key is a unique integer from the list, and its value is the count of occurrences of that integer. # Example ```python def count_occurrences(nums): # Your code here # Test Cases print(count_occurrences([1, 2, 2, 3, 3, 3, 4])) # Expected output: {1: 1, 2: 2, 3: 3, 4: 1} print(count_occurrences([4, 4, 4, 4])) # Expected output: {4: 4} print(count_occurrences([7, 8, 9])) # Expected output: {7: 1, 8: 1, 9: 1} print(count_occurrences([])) # Expected output: {} print(count_occurrences([5, 5, 5, 5, 5, 5])) # Expected output: {5: 6} ``` # Additional Notes: - The function should handle both positive and negative integers. - Consider edge cases such as an empty list or a list with only one unique integer appearing multiple times. - The provided examples should be used to test the correctness of your function.","solution":"def count_occurrences(nums): Returns a dictionary where the keys are unique integers from the list, and the values are the number of times each integer appears in the list. occurrence_dict = {} for num in nums: if num in occurrence_dict: occurrence_dict[num] += 1 else: occurrence_dict[num] = 1 return occurrence_dict"},{"question":"Develop an algorithm to validate whether a given string is a valid palindrome by considering only alphanumeric characters and ignoring cases. The function should return a boolean result indicating whether the input string meets the palindrome criteria. For instance, given the input \\"A man, a plan, a canal: Panama\\", the function should output true, whereas for the input \\"race a car\\", it should output false.","solution":"def is_palindrome(s): Check if the input string is a valid palindrome considering only alphanumeric characters and ignoring cases. Args: s (str): The input string to check. Returns: bool: True if the string is a valid palindrome, False otherwise. # Remove non-alphanumeric characters and transform to lowercase cleaned = \'\'.join(char.lower() for char in s if char.isalnum()) # Compare the cleaned string with its reverse return cleaned == cleaned[::-1]"},{"question":"Develop the Python function below to meet the given requirements: def matrix_rotation(matrix: list): This Python function accepts a 2D list \'matrix\' representing a square matrix and returns a new matrix that is the result of rotating the given matrix by 90 degrees clockwise. The function should handle any NxN matrix. Example: >>> matrix_rotation([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) [[7, 4, 1], [8, 5, 2], [9, 6, 3]] >>> matrix_rotation([[1, 2], [3, 4]]) [[3, 1], [4, 2]] >>> matrix_rotation([[5]]) [[5]]","solution":"def matrix_rotation(matrix: list) -> list: This Python function accepts a 2D list \'matrix\' representing a square matrix and returns a new matrix that is the result of rotating the given matrix by 90 degrees clockwise. The function should handle any NxN matrix. Example: >>> matrix_rotation([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) [[7, 4, 1], [8, 5, 2], [9, 6, 3]] >>> matrix_rotation([[1, 2], [3, 4]]) [[3, 1], [4, 2]] >>> matrix_rotation([[5]]) [[5]] n = len(matrix) rotated_matrix = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Create a function that takes a list of integers and returns the list with its elements rearranged to form the maximum possible integer. The output should be in the form of a string to avoid issues with large integers. Example: Input: [3, 30, 34, 5, 9] Output: \\"9534330\\"","solution":"from functools import cmp_to_key def comparator(a, b): t1 = a + b t2 = b + a return (t1 > t2) - (t1 < t2) # returns 1 if t1 > t2, -1 if t1 < t2, 0 otherwise def largest_number(nums): Takes a list of integers and returns the largest possible number formed by rearranging the list, as a string. # Convert all integers to strings str_nums = list(map(str, nums)) # Sort the numbers based on the comparator str_nums.sort(key=cmp_to_key(comparator), reverse=True) # Concatenate all numbers largest_num = \'\'.join(str_nums) # Strip leading zeros return largest_num if largest_num[0] != \'0\' else \'0\'"},{"question":"Develop a function that calculates the length of the longest non-repeating character substring within a specified interactive string: ```python def longest_unique_substring_length(s): This function receives a string s and returns the length of the longest substring that does not include any repeating characters. Example scenarios: longest_unique_substring_length(\\"abcabcbb\\") = 3 # Explanation: \\"abc\\" is the longest substring without repeating characters. longest_unique_substring_length(\\"bbbbb\\") = 1 # Explanation: \\"b\\" is the longest substring without repeating characters. longest_unique_substring_length(\\"pwwkew\\") = 3 # Explanation: \\"wke\\" is the longest substring without repeating characters. ```","solution":"def longest_unique_substring_length(s): This function receives a string s and returns the length of the longest substring that does not include any repeating characters. :param s: str - input string :return: int - length of the longest non-repeating character substring char_index_map = {} longest_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest_length = max(longest_length, i - start + 1) return longest_length"},{"question":"Develop a Python function that computes the edit distance between two strings using dynamic programming. Edit distance, also known as the Levenshtein distance, measures how many single-character edits (insertions, deletions, or substitutions) are needed to transform one string into another. Your function should take two strings as input and return the edit distance as an integer. The function should handle edge cases, such as when one or both strings are empty. To increase the difficulty, ensure that your implementation is optimized for both time and space complexity where feasible. Additionally, your code should include error handling for invalid inputs (e.g., non-string inputs). Moreover, provide a commonly made error snippet that tries to solve the problem incorrectly, and explain why it fails. This will test your debugging abilities and understanding of the dynamic programming approach. ```python def edit_distance(str1, str2): # Your implementation here pass # Example of erroneous code def incorrect_edit_distance(str1, str2): # Incorrectly assuming the problem can be solved by just comparing characters directly if len(str1) != len(str2): return max(len(str1), len(str2)) distance = sum(1 for i in range(len(str1)) if str1[i] != str2[i]) return distance # Explanation of why the example above is incorrect # The erroneous function only counts character differences but does not account for insertions, # deletions, or substitutions correctly, and it assumes the strings must be of equal length # or the edit distance is just the length difference, which is not true. This simplistic approach # fails to use the dynamic programming method needed to calculate the true edit distance. ```","solution":"def edit_distance(str1, str2): Computes the edit distance between two strings using dynamic programming. if not isinstance(str1, str) or not isinstance(str2, str): raise ValueError(\\"Both inputs must be strings\\") m, n = len(str1), len(str2) # Create a matrix to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the matrix for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill dp array using the distance formula for i in range(1, m + 1): for j in range(1, n + 1): if str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], # Deletion dp[i][j-1], # Insertion dp[i-1][j-1]) # Substitution return dp[m][n]"},{"question":"Write a function that identifies the sum of all numbers in the provided list that meet the given criteria. List: [11, 22, 33, 44, 55, 66] Criteria: number is even and greater than 30","solution":"def sum_even_and_greater_than_30(numbers): Returns the sum of all numbers in the list that are even and greater than 30. :param numbers: List of integers. :return: Sum of integers meeting the criteria. return sum(number for number in numbers if number % 2 == 0 and number > 30)"},{"question":"Write a Python function that takes a dictionary where the keys are course names and the values are lists of student scores. The function should calculate and return a dictionary where each key is a course name and its value is the highest score in that course. If a course has no scores, it should return None for that course. For example: ```python courses = { \\"Math\\": [85, 90, 78], \\"Science\\": [88, 92], \\"Literature\\": [], \\"Art\\": [95, 100, 92] } ``` Your function should return the following dictionary: ```python { \\"Math\\": 90, \\"Science\\": 92, \\"Literature\\": None, \\"Art\\": 100 } ``` Write your function below: ```python def highest_score(courses): result = {} # Your code here return result ```","solution":"def highest_score(courses): Takes a dictionary of courses and their respective scores and returns a dictionary with each course name and the highest score in that course. If a course has no scores, it returns None for that course. result = {} for course, scores in courses.items(): if scores: result[course] = max(scores) else: result[course] = None return result"},{"question":"Write a function that takes a list of integers and returns another list containing only the even numbers, but each of them should be multiplied by their respective index in the original list. For example, if input is [2, 3, 4, 5], the output should be [0, 8].","solution":"def even_numbers_multiplied_by_index(lst): Returns a list containing only the even numbers from the input list, each multiplied by their respective index in the original list. return [value * index for index, value in enumerate(lst) if value % 2 == 0]"},{"question":"Design a program that simulates a virtual zoo and keeps track of the number of specific types of animals within the zoo. The zoo should support two operations: adding a certain number of animals of a specific type, and counting the total number of animals of a specific type. You will need to implement the following functions: 1. `add_animals(type_of_animal: str, count: int) -> None`: This function increases the number of `type_of_animal` in the zoo by `count`. If the `type_of_animal` does not already exist in the zoo, it should be added. 2. `count_animals(type_of_animal: str) -> int`: This function returns the total number of `type_of_animal` currently in the zoo. If the `type_of_animal` does not exist in the zoo, it should return 0. # Constraints: - The `type_of_animal` is a string consisting of lowercase and uppercase letters and spaces, and it will not be empty. - The `count` is a non-negative integer and will not exceed 10⁶. - The zoo can hold multiple types of animals. - The operations could be called multiple times, and the system should handle up to 10⁹ add/count operations efficiently. # Example: ```python zoo = Zoo() zoo.add_animals(\\"Lion\\", 5) zoo.add_animals(\\"Tiger\\", 3) zoo.add_animals(\\"Lion\\", 2) assert zoo.count_animals(\\"Lion\\") == 7 assert zoo.count_animals(\\"Tiger\\") == 3 assert zoo.count_animals(\\"Bear\\") == 0 ``` Implement the `Zoo` class in Python which has the methods `add_animals` and `count_animals`.","solution":"class Zoo: def __init__(self): self.animals = {} def add_animals(self, type_of_animal: str, count: int) -> None: Increases the number of type_of_animal in the zoo by count. If the type_of_animal does not already exist in the zoo, it should be added. if type_of_animal in self.animals: self.animals[type_of_animal] += count else: self.animals[type_of_animal] = count def count_animals(self, type_of_animal: str) -> int: Returns the total number of type_of_animal currently in the zoo. If the type_of_animal does not exist in the zoo, it should return 0. return self.animals.get(type_of_animal, 0)"},{"question":"Create a Python program that reads a text file and counts the frequency of each word. The program should ignore case sensitivity, punctuation, and common stopwords such as \\"and\\", \\"the\\", \\"is\\", \\"in\\", and \\"at\\". The output should list the top 10 most frequent words along with their counts. For reference, find the provided Python code snippet below which contains logical and syntax errors: ```python import string def read_file(file_path): try: with open(file_path, \\"r\\") as file: return file.read() except FileNotFoundError as e: print(f\\"Error: {e}\\") return \\"\\" def clean_text(text): translator = str.maketrans(\\"\\", \\"\\", string.punctuation) return text.translate(translator).lower() def count_words(text): stopwords = [\\"and\\", \\"the\\", \\"is\\", \\"in\\", \\"at\\"] word_counts = {} for word in text.split(): if word not in stopwords: if word not in word_counts: word_counts[word] = 1 else: word_counts[word] += 1 return word_counts def print_top_words(word_counts, top_n=10): sorted_words = sorted(word_counts.items(), key=lambda item: item[1], reverse=True) for word, count in sorted_words[:top_n]: print(f\\"{word}: {count}\\") file_path = \\"sample.txt\\" text = read_file(file_path) cleaned_text = clean_text(text) word_counts = count_words(cleaned_text) print_top_words(word_counts) # This code has a logical issue that it does not handle capitalized stopwords. # Fix it to make sure the stopwords are recognized regardless of case. ```","solution":"import string def read_file(file_path): try: with open(file_path, \\"r\\") as file: return file.read() except FileNotFoundError as e: print(f\\"Error: {e}\\") return \\"\\" def clean_text(text): translator = str.maketrans(\\"\\", \\"\\", string.punctuation) return text.translate(translator).lower() def count_words(text): stopwords = {\\"and\\", \\"the\\", \\"is\\", \\"in\\", \\"at\\"} word_counts = {} for word in text.split(): if word not in stopwords: if word not in word_counts: word_counts[word] = 1 else: word_counts[word] += 1 return word_counts def print_top_words(word_counts, top_n=10): sorted_words = sorted(word_counts.items(), key=lambda item: item[1], reverse=True) for word, count in sorted_words[:top_n]: print(f\\"{word}: {count}\\") file_path = \\"sample.txt\\" text = read_file(file_path) cleaned_text = clean_text(text) word_counts = count_words(cleaned_text) print_top_words(word_counts)"},{"question":"Implement a function that takes a list of integers and returns a new list with the elements in reverse order, but without using any built-in reverse functions or methods. Ensure that your solution only uses basic programming constructs like loops and conditionals. def reverse_list(input_list): Implement a function that takes a list of integers input_list and returns a new list with the elements in reverse order. The function should not use any built-in reverse functions or methods. For example: reverse_list([1, 2, 3, 4, 5]) => [5, 4, 3, 2, 1] reverse_list([10, 20, 30, 40]) => [40, 30, 20, 10] reverse_list([7, 11, 3]) => [3, 11, 7] reverse_list([]) => []","solution":"def reverse_list(input_list): Takes a list of integers input_list and returns a new list with the elements in reverse order. The function does not use any built-in reverse functions or methods. reversed_list = [] for i in range(len(input_list) - 1, -1, -1): reversed_list.append(input_list[i]) return reversed_list"},{"question":"Consider a standard deck of 52 playing cards, where each card has a suit (hearts, diamonds, clubs, or spades) and a rank (2 through 10, jack, queen, king, or ace). If one card is drawn randomly from the deck, what is the probability that the card is either a heart or has a rank of 10? A) 1/4 B) 5/13 C) 17/52 D) 3/13","solution":"def probability_heart_or_ten(): Returns the probability of drawing a heart or a card with a rank of 10 from a standard deck of 52 playing cards. total_outcomes = 52 hearts_count = 13 tens_count = 4 # Since there is one 10 in each suit overlap_count = 1 # 10 of Hearts favorable_outcomes = hearts_count + tens_count - overlap_count return favorable_outcomes / total_outcomes"},{"question":"Given an `m x n` matrix filled with non-negative integers, you need to find the number of distinct paths from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. However, some cells in the matrix are marked as obstacle cells, and you cannot move through those cells. Write a function `countPaths(m, n, obstacles)` that takes in: - `m` (an integer representing the number of rows in the matrix), - `n` (an integer representing the number of columns in the matrix), - `obstacles` (a list of tuples, where each tuple contains two integers representing the coordinates of an obstacle cell). The function should return the number of distinct paths from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1), avoiding cells that are marked as obstacles. # Example Input: ```python m = 3 n = 3 obstacles = [(1, 1)] ``` Output: ```python 2 ``` # Explanation: The 3x3 grid looks like this: ``` [0, 0, 0] [0, X, 0] [0, 0, 0] ``` where `0` represents an empty cell, and `X` represents an obstacle. There are two distinct paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right # Constraints - `1 <= m, n <= 100` - `0 <= len(obstacles) < m * n`","solution":"def countPaths(m, n, obstacles): Returns the number of distinct paths from the top-left corner to the bottom-right corner, avoiding the cells that are marked as obstacles. # Create a 2D dp array to store the count of paths dp = [[0 for _ in range(n)] for _ in range(m)] # Mark obstacle cells in the dp array for obstacle in obstacles: dp[obstacle[0]][obstacle[1]] = -1 # Initialize the starting point; if start is an obstacle, return 0 if dp[0][0] == -1: return 0 dp[0][0] = 1 # Fill the dp array for i in range(m): for j in range(n): if dp[i][j] == -1: continue if i > 0 and dp[i-1][j] != -1: dp[i][j] += dp[i-1][j] if j > 0 and dp[i][j-1] != -1: dp[i][j] += dp[i][j-1] # Return the value on the bottom-right corner; if it\'s an obstacle, return 0 return dp[m-1][n-1] if dp[m-1][n-1] != -1 else 0"},{"question":"Write a function `is_palindrome_permutation` that checks if any permutation of a given input string can form a palindrome. A palindrome is a word or phrase that reads the same forwards and backward, ignoring spaces, punctuation, and capitalization. The function should: 1. Ignore case. 2. Ignore non-alphabetic characters. 3. Return `True` if any permutation of the string can form a palindrome, `False` otherwise. For example: - For the input string `\\"Tact Coa\\"`, the function should return `True` because one permutation of the string can form the palindrome \\"taco cat\\". - For the input string `\\"Hello\\"`, the function should return `False`. Write the function definition that includes: - Removing non-alphabetic characters. - Converting all characters to lower case. - Checking character frequencies to determine if a permutation can form a palindrome. ```python def is_palindrome_permutation(s: str) -> bool: # Function implementation goes here pass # Example usages: print(is_palindrome_permutation(\\"Tact Coa\\")) # Output: True print(is_palindrome_permutation(\\"Hello\\")) # Output: False ```","solution":"def is_palindrome_permutation(s: str) -> bool: # Remove non-alphabetic characters and convert to lower case cleaned_s = \'\'.join(char.lower() for char in s if char.isalpha()) # Count the frequency of each character char_count = {} for char in cleaned_s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # A string can form a palindrome if at most one character has an odd frequency odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 return odd_count <= 1"},{"question":"Given a list of transactions where each transaction is represented as a tuple (user_id, item_id, amount, timestamp), write a function that identifies the top \'N\' users who have spent the most money over a specified period of time. The input to your function will include a list of transactions, two dates indicating the start and end date of the period, and the value \'N\'. You should return a list of user_ids corresponding to the top \'N\' spenders. Example input: transactions = [(1, 10, 100, \'2021-05-01\'), (2, 20, 300, \'2021-05-02\'), (1, 30, 400, \'2021-05-03\'), (3, 40, 200, \'2021-05-04\'), (2, 50, 100, \'2021-05-05\')] start_date = \'2021-05-01\' end_date = \'2021-05-04\' N = 2 Expected output: [1, 2] Note: Ensure your solution efficiently handles large datasets.","solution":"from datetime import datetime def top_n_spenders(transactions, start_date, end_date, N): Identifies the top \'N\' users who have spent the most money over a specified period of time. Parameters: transactions (list of tuples): A list where each transaction is represented as a tuple (user_id, item_id, amount, timestamp). start_date (str): Start date of the period in \'YYYY-MM-DD\' format. end_date (str): End date of the period in \'YYYY-MM-DD\' format. N (int): The number of top spenders to return. Returns: list: A list of user_ids corresponding to the top \'N\' spenders. start_dt = datetime.strptime(start_date, \'%Y-%m-%d\') end_dt = datetime.strptime(end_date, \'%Y-%m-%d\') user_spending = {} for user_id, item_id, amount, timestamp in transactions: txn_date = datetime.strptime(timestamp, \'%Y-%m-%d\') if start_dt <= txn_date <= end_dt: if user_id in user_spending: user_spending[user_id] += amount else: user_spending[user_id] = amount top_spenders = sorted(user_spending, key=user_spending.get, reverse=True)[:N] return top_spenders"},{"question":"Given a list of unsorted integers, design a Python function to identify and return all unique triplets in the list which gives the sum of zero. The function should not return duplicate triplets. Example: ```python nums = [-1, 0, 1, 2, -1, -4] # Output: [[-1, 0, 1], [-1, -1, 2]] ``` Constraint: - The solution should run in O(n^2) time complexity.","solution":"def three_sum(nums): Returns a list of all unique triplets in the list which gives the sum of zero. nums.sort() result = [] n = len(nums) for i in range(n): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result"},{"question":"Design a program that finds all prime numbers within a given range using the Sieve of Eratosthenes algorithm. The program should take two integer inputs, `start` and `end`, and output a list of prime numbers that fall within this range. Ensure that the program handles invalid inputs gracefully and includes comments explaining the key steps of the algorithm.","solution":"def sieve_of_eratosthenes(start, end): Finds all prime numbers within a given range using the Sieve of Eratosthenes algorithm. Parameters: start (int): The starting range value. end (int): The ending range value. Returns: list: A list of prime numbers within the range [start, end]. if start > end or end < 2: return [] if start < 2: start = 2 # Create a boolean array \\"prime[0..end]\\" and initialize # all entries as true. A value in prime[i] will # finally be false if i is Not a prime, true if i is a prime. prime = [True for i in range(end + 1)] p = 2 while (p * p <= end): if prime[p]: for i in range(p * p, end + 1, p): prime[i] = False p += 1 # Collecting all prime numbers within the range [start, end] prime_numbers = [p for p in range(start, end + 1) if prime[p]] return prime_numbers"},{"question":"Write a function that takes a string as input and returns the longest substring without repeating characters. Implement an efficient solution using sliding window technique, ensuring the solution has a time complexity of O(n). For example, given the input \\"abcabcbb\\", the function should return \\"abc\\", and for the input \\"bbbbb\\", it should return \\"b\\".","solution":"def longest_substring_without_repeating(s): Returns the longest substring without repeating characters. n = len(s) if n == 0: return \\"\\" char_index_map = {} left = 0 max_length = 0 start = 0 for right in range(n): if s[right] in char_index_map and char_index_map[s[right]] >= left: left = char_index_map[s[right]] + 1 char_index_map[s[right]] = right length = right - left + 1 if length > max_length: max_length = length start = left return s[start:start + max_length]"},{"question":"Create a function that takes as input a list of strings, each representing an arithmetic operation (e.g., \\"3 + 5\\"), and returns a list of results for those operations. The function should handle addition, subtraction, multiplication, and division. Additionally, make sure to handle invalid operations gracefully by returning an appropriate error message for each invalid input. Example: ```python operations = [\\"3 + 5\\", \\"10 - 2\\", \\"6 * 4\\", \\"8 / 0\\", \\"nine + ten\\"] print(evaluate_operations(operations)) ``` Output: ```python [8, 8, 24, \\"Error: Division by zero\\", \\"Error: Invalid operation\\"] ```","solution":"def evaluate_operations(operations): results = [] for operation in operations: try: result = eval(operation) results.append(result) except ZeroDivisionError: results.append(\\"Error: Division by zero\\") except Exception: results.append(\\"Error: Invalid operation\\") return results"},{"question":"Please fix the following Python code snippet that has some errors and improve its efficiency where possible. ```python def find_first_non_repeating_char(string): # find the first non-repeating character in a string char_count = {} for char in string: char_count[char] = char_count.get(char, 0) + 1 for char in string: if char_count[char] == 1: return char return None def find_missing_number(arr): # Find the missing number in a list of integers from 1 to n total = sum(range(1, len(arr) + 2)) arr_sum = sum(arr) return total - arr_sum def reverse_words(sen): # Reverse words in a given sentence word_list = sen.split() reversed_sentence = \\" \\".join(word_list[::-1]) return reversed_sentence def merge_sorted_arrays(arr1, arr2): # Merge two sorted arrays into one sorted array sorted_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: sorted_array.append(arr1[i]) i += 1 else: sorted_array.append(arr2[j]) j += 1 sorted_array.extend(arr1[i:]) sorted_array.extend(arr2[j:]) return sorted_array ``` # Expected Task - Correct any syntax or logical errors in the code. - Optimize the functions for performance and readability. - Make sure that the function signatures and return types are appropriate for the described tasks. - Ensure that your updated script performs the same functionality as described by the comments in the original code.","solution":"def find_first_non_repeating_char(string): Find the first non-repeating character in a string. char_count = {} for char in string: char_count[char] = char_count.get(char, 0) + 1 for char in string: if char_count[char] == 1: return char return None def find_missing_number(arr): Find the missing number in a list of integers from 1 to n. n = len(arr) + 1 total = n * (n + 1) // 2 arr_sum = sum(arr) return total - arr_sum def reverse_words(sen): Reverse words in a given sentence. return \\" \\".join(reversed(sen.split())) def merge_sorted_arrays(arr1, arr2): Merge two sorted arrays into one sorted array. sorted_array, i, j = [], 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: sorted_array.append(arr1[i]) i += 1 else: sorted_array.append(arr2[j]) j += 1 sorted_array.extend(arr1[i:]) sorted_array.extend(arr2[j:]) return sorted_array"},{"question":"Implement a Python function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Optimize your function for performance with large input lists. Provide a brief explanation of your optimization approach.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def extract_primes(numbers): Given a list of integers, returns a new list containing only the prime numbers. Optimizations include trial division by numbers up to the square root of the target number, skipping even numbers and multiples of 3 beyond the initial checks. return [num for num in numbers if is_prime(num)]"},{"question":"Write a Python function `find_duplicates` that takes a list of integers and returns a list of duplicate integers present in the input list. The output list should contain each duplicate integer only once, regardless of how many times it appears in the input list. You must preserve the order in which duplicates first appear in the input list. For example: ```python def find_duplicates(nums): # Your code here # Usage print(find_duplicates([1, 2, 3, 2, 4, 5, 1, 6, 3])) # Output: [2, 1, 3] print(find_duplicates([5, 4, 3, 2, 1, 1, 2, 3, 4])) # Output: [1, 2, 3, 4] print(find_duplicates([10, 20, 30, 40])) # Output: [] ```","solution":"def find_duplicates(nums): Returns a list of duplicate integers in the order they first appear. seen = set() duplicates = set() result = [] for num in nums: if num in seen and num not in duplicates: result.append(num) duplicates.add(num) seen.add(num) return result"},{"question":"You are tasked with developing a script that processes a log file containing event records and produces a summary report. Each event record in the log file is a JSON object with the following fields: - `timestamp`: A string representing the date and time the event occurred, e.g., \\"2023-10-17T16:20:00Z\\". - `event_type`: A string representing the type of event, e.g., \\"LOGIN\\", \\"LOGOUT\\", \\"ERROR\\". - `user_id`: A string representing the unique identifier of the user associated with the event. Your task is to create a function `generate_report(log_file_path)` that reads the log file, processes the event records, and returns a summary report as a dictionary. The summary report should contain: 1. The total number of events. 2. The total number of unique users. 3. The number of each type of event. For example, given the following log file: ```json [ {\\"timestamp\\": \\"2023-10-17T16:20:00Z\\", \\"event_type\\": \\"LOGIN\\", \\"user_id\\": \\"user1\\"}, {\\"timestamp\\": \\"2023-10-17T16:25:00Z\\", \\"event_type\\": \\"LOGOUT\\", \\"user_id\\": \\"user1\\"}, {\\"timestamp\\": \\"2023-10-17T16:30:00Z\\", \\"event_type\\": \\"LOGIN\\", \\"user_id\\": \\"user2\\"}, {\\"timestamp\\": \\"2023-10-17T16:35:00Z\\", \\"event_type\\": \\"ERROR\\", \\"user_id\\": \\"user2\\"}, {\\"timestamp\\": \\"2023-10-17T16:40:00Z\\", \\"event_type\\": \\"LOGIN\\", \\"user_id\\": \\"user3\\"} ] ``` The `generate_report(log_file_path)` function should produce the following summary report: ```json { \\"total_events\\": 5, \\"unique_users\\": 3, \\"event_counts\\": { \\"LOGIN\\": 3, \\"LOGOUT\\": 1, \\"ERROR\\": 1 } } ``` Write the `generate_report(log_file_path)` function in Python.","solution":"import json from collections import defaultdict def generate_report(log_file_path): Reads a log file containing JSON event records and produces a summary report. :param log_file_path: Path to the log file. :return: Dictionary containing the summary report. with open(log_file_path, \'r\') as file: events = json.load(file) total_events = len(events) unique_users = set() event_counts = defaultdict(int) for event in events: unique_users.add(event[\'user_id\']) event_counts[event[\'event_type\']] += 1 report = { \\"total_events\\": total_events, \\"unique_users\\": len(unique_users), \\"event_counts\\": dict(event_counts) } return report"},{"question":"Given a list of integers, write a function to determine if the list is sorted in ascending order. The function should return `True` if the list is sorted, and `False` otherwise. The input list will contain at least one integer. Example: ```python def is_sorted(lst): # Your code here # Test cases print(is_sorted([1, 2, 3, 4, 5])) # Expected output: True print(is_sorted([3, 2, 1])) # Expected output: False print(is_sorted([7])) # Expected output: True print(is_sorted([10, 10, 20])) # Expected output: True print(is_sorted([7, 5, 7])) # Expected output: False ```","solution":"def is_sorted(lst): Returns True if the list is sorted in ascending order, False otherwise. return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"},{"question":"Write a Python function `filter_and_sort_numbers` that takes a list of integers and strings, removes any strings that do not represent valid integers, and then returns a list of integers sorted in ascending order. If the input list is empty, the function should return an empty list. Ensure that your function includes appropriate error handling and demonstrate its functionality with a few examples. Example: ```python filter_and_sort_numbers([\'5\', \'3\', \'1\', \'a\', \'2\', \'4\']) ``` Expected output: ```python [1, 2, 3, 4, 5] ```","solution":"def filter_and_sort_numbers(input_list): Takes a list of integers and strings, removes any strings that do not represent valid integers, and returns a list of integers sorted in ascending order. result = [] for item in input_list: try: result.append(int(item)) except ValueError: continue return sorted(result)"},{"question":"Write a function in Python that accepts a string consisting of lower and upper case letters, spaces, and punctuation marks. The function should return a dictionary where the keys are the unique letters in the string (ignoring case) and the values are the frequency of each letter. The dictionary should not include spaces or punctuation marks as keys, and you should treat \'A\' and \'a\' as the same letter. Your solution should manually handle case insensitivity without using any built-in functions such as `lower()` or `upper()`. The function signature should be `def letter_frequency(s: str) -> dict:` **Example:** ```python print(letter_frequency(\\"Hello, World!\\")) # Output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ```","solution":"def letter_frequency(s: str) -> dict: Returns a dictionary where the keys are the unique letters in the string (ignoring case) and the values are the frequency of each letter. The dictionary does not include spaces or punctuation marks as keys. frequency = {} for char in s: # Manually handle case insensitivity if \'A\' <= char <= \'Z\': char = chr(ord(char) + 32) if \'a\' <= char <= \'z\': if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Write a function `price_analyzer` that analyzes the prices of products over time. You will be given a list of tuples representing the daily prices of various products (e.g., [(date, product_name, price), ...]). The dates will be in the format \'YYYY-MM-DD.\' Your task is to implement the following functionalities: 1. Identify the highest price recorded for each product within a given date range. 2. Calculate the average price of each product that falls within the date range. 3. Return a dictionary with the product names as keys and another dictionary with \'highest_price\' and \'average_price\' as values. Ensure that the function takes into account the starting date, ending date, and the list of tuples. Include some erroneous code to increase the difficulty. Example function signature: ```python def price_analyzer(start_date, end_date, price_data): # Your implementation here pass ```","solution":"from datetime import datetime def price_analyzer(start_date, end_date, price_data): Analyzes the prices of products over time. Args: - start_date (str): the start date in \'YYYY-MM-DD\' format. - end_date (str): the end date in \'YYYY-MM-DD\' format. - price_data (list of tuples): a list of tuples where each tuple contains a date, product_name, and price. Returns: - dict: a dictionary with product names as keys and another dictionary with \'highest_price\' and \'average_price\' as values. start_date = datetime.strptime(start_date, \'%Y-%m-%d\') end_date = datetime.strptime(end_date, \'%Y-%m-%d\') product_prices = {} for date_str, product_name, price in price_data: date = datetime.strptime(date_str, \'%Y-%m-%d\') if start_date <= date <= end_date: if product_name not in product_prices: product_prices[product_name] = [] product_prices[product_name].append(price) result = {} for product_name, prices in product_prices.items(): highest_price = max(prices) average_price = sum(prices) / len(prices) result[product_name] = { \'highest_price\': highest_price, \'average_price\': average_price } return result"},{"question":"You are tasked to implement a class `TimeConverter` which handles conversions and calculations of different time units. The class should include the following methods: 1. `hours_to_minutes(self, hours: int) -> int`: This method should receive an integer indicating hours and return the equivalent time in minutes. 2. `minutes_to_seconds(self, minutes: int) -> int`: This method should receive an integer indicating minutes and return the equivalent time in seconds. 3. `add_times(self, time1: str, time2: str) -> str`: This method should receive two time strings in the format \\"HH:MM:SS\\", add the times together and return the result as a string in the same format. You can assume the input times are valid and there is no need to handle negative or overflow scenarios. 4. `is_valid_time(self, time: str) -> bool`: This method should receive a time string in the format \\"HH:MM:SS\\" and return True if it is a valid time, otherwise False. Here is an example implementation: ```python class TimeConverter: def hours_to_minutes(self, hours: int) -> int: return hours * 60 def minutes_to_seconds(self, minutes: int) -> int: return minutes * 60 def add_times(self, time1: str, time2: str) -> str: h1, m1, s1 = map(int, time1.split(\':\')) h2, m2, s2 = map(int, time2.split(\':\')) seconds = s1 + s2 minutes = m1 + m2 + seconds // 60 hours = h1 + h2 + minutes // 60 return f\\"{hours:02}:{minutes % 60:02}:{seconds % 60:02}\\" def is_valid_time(self, time: str) -> bool: if len(time) != 8 or time[2] != \':\' or time[5] != \':\': return False h, m, s = time.split(\':\') return h.isdigit() and m.isdigit() and s.isdigit() and 0 <= int(h) < 24 and 0 <= int(m) < 60 and 0 <= int(s) < 60 # Test cases converter = TimeConverter() assert converter.hours_to_minutes(3) == 180 assert converter.minutes_to_seconds(15) == 900 assert converter.add_times(\\"01:45:30\\", \\"02:30:45\\") == \\"04:16:15\\" assert converter.is_valid_time(\\"23:59:59\\") == True assert converter.is_valid_time(\\"24:00:00\\") == False assert converter.is_valid_time(\\"12:60:00\\") == False assert converter.is_valid_time(\\"12:30:99\\") == False ```","solution":"class TimeConverter: def hours_to_minutes(self, hours: int) -> int: return hours * 60 def minutes_to_seconds(self, minutes: int) -> int: return minutes * 60 def add_times(self, time1: str, time2: str) -> str: h1, m1, s1 = map(int, time1.split(\':\')) h2, m2, s2 = map(int, time2.split(\':\')) seconds = s1 + s2 minutes = m1 + m2 + seconds // 60 hours = h1 + h2 + minutes // 60 return f\\"{hours:02}:{minutes % 60:02}:{seconds % 60:02}\\" def is_valid_time(self, time: str) -> bool: if len(time) != 8 or time[2] != \':\' or time[5] != \':\': return False h, m, s = time.split(\':\') return h.isdigit() and m.isdigit() and s.isdigit() and 0 <= int(h) < 24 and 0 <= int(m) < 60 and 0 <= int(s) < 60"},{"question":"Create a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. If there are no prime numbers, the function should return an empty list. Ensure that your function handles edge cases such as negative numbers and zeros appropriately.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the original list. return [num for num in numbers if is_prime(num)]"},{"question":"Write a function that takes a string and returns a new string with all the vowels replaced by the following vowel in the alphabet. The vowels are \'a\', \'e\', \'i\', \'o\', \'u\', and they should wrap around such that replacing \'u\' yields \'a\'. For example, the string \\"hello\\" should be transformed to \\"hillu\\". Note: The function should be case-insensitive and return the transformed string in the same case as the input.","solution":"def replace_vowels(s): Replaces all vowels in the input string with the following vowel in the alphabet, wrapping around to \'a\' after \'u\'. The function is case-insensitive and returns the transformed string in the same case as the input. vowels = \'aeiou\' vowel_map = {v: vowels[(i + 1) % len(vowels)] for i, v in enumerate(vowels)} vowel_map.update({v.upper(): vowel_map[v].upper() for v in vowels}) return \'\'.join(vowel_map[char] if char in vowel_map else char for char in s)"},{"question":"Write a Python function that takes a list of integers and returns a new list with each element squared. Example input: [1, 2, 3, 4], example output: [1, 4, 9, 16]","solution":"def square_elements(lst): Returns a list with each element squared. Parameters: lst (list): A list of integers. Returns: list: A new list with each element squared. return [x ** 2 for x in lst]"},{"question":"Design a Python function named `find_max_min_diff` that takes a list of integers as an argument. The function should compute the difference between the maximum and minimum values in the list. Ensure that your function handles lists with negative integers and raises a meaningful error if the input list is empty. Additionally, explain the time and space complexity of your solution.","solution":"def find_max_min_diff(nums): Computes the difference between the maximum and minimum values in the list. Args: nums (list): List of integers. Returns: int: The difference between the maximum and minimum values. Raises: ValueError: If the input list is empty. if not nums: raise ValueError(\\"The input list must not be empty.\\") max_val = max(nums) min_val = min(nums) return max_val - min_val"},{"question":"Write a function in Python that accepts a list of integers and returns a tuple containing two sublists: one with elements at even indices, and another with elements at odd indices. Ensure the function handles edge cases gracefully, such as when the list is empty or contains only one element. The function should maintain the relative order of elements within each sublist.","solution":"def split_even_odd_indices(lst): Splits the input list into two sublists: one containing elements at even indices and the other at odd indices. Parameters: lst (list): The list of integers to be split. Returns: tuple: A tuple containing two sublists - elements at even indices and elements at odd indices. even_index_elements = [lst[i] for i in range(len(lst)) if i % 2 == 0] odd_index_elements = [lst[i] for i in range(len(lst)) if i % 2 == 1] return (even_index_elements, odd_index_elements)"},{"question":"You are given a dataset containing weather data for various cities. Each entry in the dataset consists of the following fields: \'city\', \'date\', \'temperature\', and \'precipitation\'. Write a function that identifies the city with the highest average temperature over a given date range. The input to your function should be the dataset (as a list of dictionaries) and the date range (as two strings indicating the start and end dates, inclusive). The output should be the name of the city with the highest average temperature over the specified date range. If multiple cities have the same highest average temperature, return any one of them. Example input: ```python data = [ {\\"city\\": \\"New York\\", \\"date\\": \\"2023-01-01\\", \\"temperature\\": 5, \\"precipitation\\": 10}, {\\"city\\": \\"Los Angeles\\", \\"date\\": \\"2023-01-01\\", \\"temperature\\": 20, \\"precipitation\\": 0}, {\\"city\\": \\"Chicago\\", \\"date\\": \\"2023-01-01\\", \\"temperature\\": -5, \\"precipitation\\": 5}, {\\"city\\": \\"New York\\", \\"date\\": \\"2023-01-02\\", \\"temperature\\": 6, \\"precipitation\\": 7}, {\\"city\\": \\"Los Angeles\\", \\"date\\": \\"2023-01-02\\", \\"temperature\\": 22, \\"precipitation\\": 0}, {\\"city\\": \\"Chicago\\", \\"date\\": \\"2023-01-02\\", \\"temperature\\": -3, \\"precipitation\\": 3}, ] start_date = \\"2023-01-01\\" end_date = \\"2023-01-02\\" ``` Example output: ``` \\"Los Angeles\\" ```","solution":"from typing import List, Dict from collections import defaultdict from datetime import datetime def highest_avg_temperature_city(data: List[Dict], start_date: str, end_date: str) -> str: Identifies the city with the highest average temperature over a given date range. start = datetime.strptime(start_date, \\"%Y-%m-%d\\") end = datetime.strptime(end_date, \\"%Y-%m-%d\\") city_temp = defaultdict(list) for entry in data: entry_date = datetime.strptime(entry[\\"date\\"], \\"%Y-%m-%d\\") if start <= entry_date <= end: city_temp[entry[\\"city\\"]].append(entry[\\"temperature\\"]) max_avg_temp = float(\'-inf\') city_with_max_avg_temp = None for city, temps in city_temp.items(): avg_temp = sum(temps) / len(temps) if temps else float(\'-inf\') if avg_temp > max_avg_temp: max_avg_temp = avg_temp city_with_max_avg_temp = city return city_with_max_avg_temp"},{"question":"Consider the following function in Python: ```python def reverse_vowels(s): vowels = \\"aeiouAEIOU\\" s = list(s) i, j = 0, len(s) - 1 while i < j: if s[i] in vowels and s[j] in vowels: s[i], s[j] = s[j], s[i] i += 1 j -= 1 elif s[i] in vowels: j -= 1 else: i += 1 return \'\'.join(s) ``` 1. What does this function do? Provide a brief explanation. 2. What would be the result of calling `reverse_vowels(\\"hello\\")` and `reverse_vowels(\\"programming\\")`? 3. Modify the function to make it case-insensitive without changing the overall logic. Provide your updated code.","solution":"def reverse_vowels(s): This function reverses the vowels in the given string `s` while leaving other characters in their original positions. vowels = \\"aeiouAEIOU\\" s = list(s) i, j = 0, len(s) - 1 while i < j: if s[i] in vowels and s[j] in vowels: s[i], s[j] = s[j], s[i] i += 1 j -= 1 elif s[i] in vowels: j -= 1 else: i += 1 return \'\'.join(s) # Test cases: # reverse_vowels(\\"hello\\") => \\"holle\\" # reverse_vowels(\\"programming\\") => \\"prigrammong\\""},{"question":"Write a program that takes a list of integers and returns a new list containing only the unique elements (i.e., elements that are not repeated in the original list). For example, given the list [1, 2, 2, 3, 4, 4, 5], the output should be [1, 3, 5].","solution":"def unique_elements(lst): Returns a list containing only the unique elements from the input list. element_count = {} # Count the occurrences of each element for element in lst: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 # Filter out elements that occur more than once result = [element for element in lst if element_count[element] == 1] return result"},{"question":"Create a function that receives a list of integers and returns a new list with each integer squared, but only if the integer is an even number. If the input list is empty, return an empty list. Add informative print messages for checking the conditions. def square_even_numbers(nums): result = [] for num in nums: if num % 2 == 0: print(f\\"Squaring even number: {num}\\") result.append(num ** 2) else: print(f\\"Skipping odd number: {num}\\") if not result: print(\\"No even numbers found.\\") return result","solution":"def square_even_numbers(nums): Returns a list of squares of even numbers from the input list. result = [] for num in nums: if num % 2 == 0: print(f\\"Squaring even number: {num}\\") result.append(num ** 2) else: print(f\\"Skipping odd number: {num}\\") if not nums: print(\\"Input list is empty.\\") elif not result: print(\\"No even numbers found.\\") return result"},{"question":"Given a string representing a mathematical expression containing only non-negative integers, the operators +, -, *, and / (where + denotes addition, - denotes subtraction, * denotes multiplication, and / denotes integer division), and parenthesis for grouping, write a program that evaluates the expression and returns the result. Note that the integer division should truncate toward zero. Sample Input: \\"3+(2*2-3/1)\\" Sample Output: 4","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers, +, -, *, / operators, and parenthesis. import re def helper(s, idx): stack = [] num = 0 sign = \'+\' while idx < len(s): char = s[idx] if char.isdigit(): num = num * 10 + int(char) if char == \'(\': num, idx = helper(s, idx + 1) if idx == len(s) - 1 or char in \\"+-*/)\\": if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(int(stack.pop() / num)) sign = char num = 0 if char == \')\': break idx += 1 return sum(stack), idx # Remove whitespace and handle the entire expression expression = re.sub(r\'s+\', \'\', expression) result, _ = helper(expression, 0) return result"},{"question":"Design a function in Python that takes a string as input and returns the first non-repeating character in it. If all characters are repeating or the string is empty, return None. Ensure your solution is efficient in time complexity. **Example:** - Input: \\"swiss\\" - Output: \'w\' - Input: \\"repetition\\" - Output: \'r\' - Input: \\"aabbcc\\" - Output: None Write the function signature as follows: `def first_non_repeating_char(s: str) -> str:`","solution":"def first_non_repeating_char(s: str) -> str: Returns the first non-repeating character in the string s. If all characters are repeating or the string is empty, returns None. from collections import Counter char_count = Counter(s) # Count occurrences of each character for char in s: if char_count[char] == 1: return char return None"},{"question":"Trailing Zero Count in Factorial Given an integer `n`, write a function that returns the number of trailing zeroes in `n!` (n factorial). A trailing zero is the zero at the end of a number. For example, there are 3 trailing zeroes in 1000 (`1000` has three trailing zeroes). **Input:** - An integer `n` where `1 <= n <= 10^4`. **Output:** - An integer representing the number of trailing zeroes in `n!`. **Examples:** ```python >>> count_trailing_zeroes(3) 0 >>> count_trailing_zeroes(5) 1 >>> count_trailing_zeroes(100) 24 ``` **Explanation:** The number of trailing zeroes in a factorial comes from the number of times 10 is a factor in the numbers from 1 to `n`. Since 10 is a product of 2 and 5 and there are typically more factors of 2 than 5, we need to count the number of factors of 5 in these numbers. **Function Signature:** ```python def count_trailing_zeroes(n: int) -> int: pass ``` **Constraints:** - You should not compute the actual factorial of the number, as it would be computationally expensive for large `n`. - Focus on an efficient solution that runs in O(log n) time complexity. **Hint:** Iteratively divide `n` by 5 to count how many multiples of 5, 25, 125, etc., are present in the factors.","solution":"def count_trailing_zeroes(n: int) -> int: Returns the number of trailing zeroes in the factorial of n. count = 0 while n >= 5: n //= 5 count += n return count"},{"question":"Given a matrix of size m x n, implement a function that transposes the matrix. The transposition of a matrix is a new matrix whose rows are the columns of the original. Write a function that accepts an m x n matrix and returns its transpose. The function should handle cases where the input is not rectangular (all rows do not have the same number of elements) by treating the missing cells as `None`. Here is an example input and expected output: Input: matrix = [ [1, 2, 3], [4, 5, 6] ] Output: [ [1, 4], [2, 5], [3, 6] ] Input: matrix = [ [1, 2], [3, 4, 5], [6] ] Output: [ [1, 3, 6], [2, 4, None], [None, 5, None] ] If the input matrix is empty or all rows are empty, return an empty matrix. Ensure your function handles edge cases gracefully.","solution":"def transpose_matrix(matrix): Returns the transpose of the given rectangular or non-rectangular matrix. If the input is not rectangular or if rows have different numbers of elements, treat the missing cells as None. if not matrix: # Handle empty matrix case return [] # Find the maximum row length max_row_len = max(len(row) for row in matrix) # Initialize the transposed matrix with None transposed = [[None] * len(matrix) for _ in range(max_row_len)] for i in range(len(matrix)): for j in range(len(matrix[i])): transposed[j][i] = matrix[i][j] return transposed"},{"question":"You are given an API that returns a list of JSON objects representing weather data for the past week. Each JSON object includes \'date\', \'temperature\', \'humidity\', and \'wind_speed\'. Implement a Python function that takes as input the list of JSON objects and returns a summary of the weather data, including the average temperature, highest humidity day, and total wind speed. The format of the JSON objects is as follows: ```json { \\"date\\": \\"YYYY-MM-DD\\", \\"temperature\\": float, \\"humidity\\": int, \\"wind_speed\\": float } ``` Write a function `weather_summary(data: List[Dict[str, Union[str, float, int]]]) -> Dict[str, Union[float, str]]` that processes the input list and returns a dictionary with the following keys: - \'average_temperature\': The average temperature over the week, rounded to two decimal places. - \'highest_humidity_day\': The \'date\' string of the day with the highest humidity. - \'total_wind_speed\': The sum of wind speeds over the week. Example: ```python data = [ {\\"date\\": \\"2023-01-01\\", \\"temperature\\": 10.5, \\"humidity\\": 80, \\"wind_speed\\": 5.5}, {\\"date\\": \\"2023-01-02\\", \\"temperature\\": 12.3, \\"humidity\\": 78, \\"wind_speed\\": 6.1}, {\\"date\\": \\"2023-01-03\\", \\"temperature\\": 8.8, \\"humidity\\": 82, \\"wind_speed\\": 4.0}, {\\"date\\": \\"2023-01-04\\", \\"temperature\\": 7.5, \\"humidity\\": 85, \\"wind_speed\\": 3.8}, {\\"date\\": \\"2023-01-05\\", \\"temperature\\": 9.0, \\"humidity\\": 80, \\"wind_speed\\": 4.5}, {\\"date\\": \\"2023-01-06\\", \\"temperature\\": 11.2, \\"humidity\\": 79, \\"wind_speed\\": 5.2}, {\\"date\\": \\"2023-01-07\\", \\"temperature\\": 10.0, \\"humidity\\": 81, \\"wind_speed\\": 5.0} ] result = weather_summary(data) print(result) # Output should be: # { # \'average_temperature\': 9.90, # \'highest_humidity_day\': \'2023-01-04\', # \'total_wind_speed\': 34.1 # } ```","solution":"from typing import List, Dict, Union def weather_summary(data: List[Dict[str, Union[str, float, int]]]) -> Dict[str, Union[float, str]]: total_temperature = 0.0 total_wind_speed = 0.0 highest_humidity = -1 highest_humidity_day = \\"\\" for entry in data: # Sum temperatures total_temperature += entry[\\"temperature\\"] # Sum wind speeds total_wind_speed += entry[\\"wind_speed\\"] # Check for highest humidity if entry[\\"humidity\\"] > highest_humidity: highest_humidity = entry[\\"humidity\\"] highest_humidity_day = entry[\\"date\\"] # Calculate average temperature average_temperature = round(total_temperature / len(data), 2) return { \'average_temperature\': average_temperature, \'highest_humidity_day\': highest_humidity_day, \'total_wind_speed\': round(total_wind_speed, 1) }"},{"question":"You are tasked with writing a Python function that examines a given string to check if it corresponds with the structure of a valid US phone number. US phone numbers are typically represented in one of the following formats: (xxx) xxx-xxxx xxx-xxx-xxxx Your function should return `True` if the string matches one of these formats or `False` otherwise. Assume the input string will only contain characters related to these phone number formats. Example: is_valid_phone_number(\\"(123) 456-7890\\") -> True is_valid_phone_number(\\"123-456-7890\\") -> True is_valid_phone_number(\\"123 456 7890\\") -> False","solution":"import re def is_valid_phone_number(phone_number): Checks if the provided phone number is in a valid US format. pattern = re.compile(r\'^(d{3}) d{3}-d{4}|^d{3}-d{3}-d{4}\') return bool(pattern.match(phone_number))"},{"question":"Write a function that takes in a non-empty array of distinct integers and an integer representing a target sum. If any two numbers in the input array sum up to the target sum, the function should return them in an array, in any order. If no two numbers sum up to the target sum, the function should return an empty array. Example: ```python def two_number_sum(array, target_sum): # Your code here # Example usage: array = [3, 5, -4, 8, 11, 1, -1, 6] target_sum = 10 print(two_number_sum(array, target_sum)) # Output: [11, -1] or [-1, 11] ``` # Constraints: 1. The input array will always have at least two integers. 2. The array has distinct integers. 3. You can assume that there will be at most one pair of numbers summing up to the target sum.","solution":"def two_number_sum(array, target_sum): Returns two numbers from the array that sum up to the target sum, if such a pair exists. Otherwise, returns an empty array. num_map = {} for num in array: potential_match = target_sum - num if potential_match in num_map: return [num, potential_match] else: num_map[num] = True return []"},{"question":"A software development firm needs a utility tool that helps in managing their project deadlines. Imagine you are tasked to write a function in a given programming language that accepts a list of deadlines and today\'s date. Each deadline in the list is represented in the \'YYYY-MM-DD\' format. The function should calculate how many days are left until each deadline from today and return a list of integers representing the number of days left. If a deadline is past, the result for that deadline should be negative. Additionally, the function should have robust error handling to manage improper date formats and any other potential issues. Ensure that the function categorizes deadlines as \'Upcoming\', \'Due Today\', and \'Past\' based on their respective statuses and print a summary of this categorization before returning the list of days left. Example: ```python calculate_deadlines([\\"2023-10-15\\", \\"2023-10-20\\", \\"2023-10-10\\"], \\"2023-10-12\\") ``` Output: ``` Upcoming: 2 Due Today: 0 Past: 1 [-3, 3, 5] ```","solution":"from datetime import datetime def calculate_deadlines(deadlines, today): Calculate the number of days left for each deadline from today\'s date. Parameters: - deadlines: List of string dates in \'YYYY-MM-DD\' format. - today: String date in \'YYYY-MM-DD\' format. Returns: - List of integers representing the number of days left until each deadline. try: today_date = datetime.strptime(today, \'%Y-%m-%d\').date() except ValueError: raise ValueError(\\"Incorrect today date format, should be YYYY-MM-DD\\") days_left_list = [] upcoming = 0 due_today = 0 past = 0 for deadline in deadlines: try: deadline_date = datetime.strptime(deadline, \'%Y-%m-%d\').date() days_left = (deadline_date - today_date).days days_left_list.append(days_left) if days_left > 0: upcoming += 1 elif days_left == 0: due_today += 1 else: past += 1 except ValueError: print(f\\"Incorrect deadline date format for {deadline}, should be YYYY-MM-DD\\") days_left_list.append(None) print(f\\"Upcoming: {upcoming}\\") print(f\\"Due Today: {due_today}\\") print(f\\"Past: {past}\\") return days_left_list"},{"question":"Construct a function that takes a sorted array of integers and inserts a given integer into its correct position, maintaining the array\'s sorted order without using built-in sort functions.","solution":"def insert_in_sorted_array(arr, num): Inserts a given integer into its correct position in a sorted array, maintaining the sorted order. for i in range(len(arr)): if num <= arr[i]: return arr[:i] + [num] + arr[i:] return arr + [num]"},{"question":"Write a function in Python that accepts a list of integers and a target integer. The function should return a boolean indicating whether any two distinct numbers in the list sum up to the target integer. The integers in the list can be positive, negative, or zero. Include error handling for invalid inputs, such as non-integer values in the list.","solution":"def has_two_sum(nums, target): Returns True if there are two distinct numbers in the list that add up to the target integer. Args: nums (list): A list of integers. target (int): The target integer. Returns: bool: True if two distinct numbers sum up to target, False otherwise. Raises: ValueError: If nums contains non-integer values. if not all(isinstance(num, int) for num in nums): raise ValueError(\\"All elements in the list must be integers.\\") seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"Write a Python function that takes an integer `n` and prints a square matrix of size `n` filled with a spiral pattern of numbers starting from 1 and increasing inwards. For example, for `n=3`, the function should produce: ``` 1 2 3 8 9 4 7 6 5 ```","solution":"def spiral_matrix(n): Generates a spiral matrix of size n filled with numbers from 1 to n*n. Args: n (int): The size of the matrix (n x n) Returns: list of list: A 2D list representing the spiral matrix. if n <= 0: return [] matrix = [[0] * n for _ in range(n)] left, right, top, bottom = 0, n - 1, 0, n - 1 num = 1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Design a function that accepts a list of words and returns a dictionary where the keys are the lengths of words and the values are lists of words of that length. Ensure the function handles an empty list and words of varying lengths.","solution":"def words_by_length(words): Returns a dictionary where the keys are lengths of words and the values are lists of words of that length. Parameters: words (list): List of words. Returns: dict: Dictionary with word lengths as keys and lists of words as values. length_dict = {} for word in words: length = word.__len__() if length in length_dict: length_dict[length].append(word) else: length_dict[length] = [word] return length_dict"},{"question":"Design an algorithm to find the second largest number in an unsorted list of integers. Your implementation should be time-efficient, aiming for a linear time complexity where possible. Please write a function second_largest(nums) that takes a list of integers as input and returns the second largest integer. If the list contains less than two distinct elements, the function should return None. ```python def second_largest(nums): if len(nums) < 2: return None first, second = float(\'-inf\'), float(\'-inf\') for num in nums: if num > first: second = first first = num elif num > second and num != first: second = num return second if second != float(\'-inf\') else None # Example usage print(second_largest([10, 5, 4, 3, -1])) # Expected output: 5 print(second_largest([5])) # Expected output: None print(second_largest([8, 8, 8, 8])) # Expected output: None ```","solution":"def second_largest(nums): Returns the second largest number in the list of integers \'nums\'. If there are less than two distinct elements, returns None. if len(nums) < 2: return None first, second = float(\'-inf\'), float(\'-inf\') for num in nums: if num > first: second = first first = num elif num > second and num != first: second = num return second if second != float(\'-inf\') else None"},{"question":"You are given a list of words and a list of candidate anagrams. Write a function that identifies and returns all the anagram pairs from these lists. An anagram pair is a pair of words where one word can be rearranged to form the other. def find_anagram_pairs(words, candidates): \'\'\' Provided a list of words and a list of candidate anagrams, this function identifies and returns all the pairs of words that are anagrams of each other in the form of tuples. Parameters: words (list of str): List of words. candidates (list of str): List of candidate anagrams. Returns: list of tuples: A list of tuples with each tuple containing a pair of words that are anagrams. Example: find_anagram_pairs([\'listen\', \'binary\', \'tea\'], [\'silent\', \'brainy\', \'eat\']) should return [(\'listen\', \'silent\'), (\'binary\', \'brainy\'), (\'tea\', \'eat\')] \'\'\'","solution":"def find_anagram_pairs(words, candidates): Provided a list of words and a list of candidate anagrams, this function identifies and returns all the pairs of words that are anagrams of each other in the form of tuples. Parameters: words (list of str): List of words. candidates (list of str): List of candidate anagrams. Returns: list of tuples: A list of tuples with each tuple containing a pair of words that are anagrams. def sorted_word(word): return \'\'.join(sorted(word)) anagram_pairs = [] sorted_candidates = {sorted_word(candidate): candidate for candidate in candidates} for word in words: sorted_word_version = sorted_word(word) if sorted_word_version in sorted_candidates: anagram_pairs.append((word, sorted_candidates[sorted_word_version])) return anagram_pairs"},{"question":"Construct a Python function capable of generating a Fibonacci sequence up to a given number of terms `n`. The function should allow for handling invalid input gracefully, such as negative integers, zero, or non-integer values. It should also be designed to process large values of `n` efficiently without running into memory issues. Enhance the function to return both the Fibonacci sequence as a list and the sum of all the terms in the sequence. Additionally, extend the function to handle the simultaneous generation of multiple Fibonacci sequences for different values of `n` provided in a list, and return a list of tuples, each containing a Fibonacci sequence and its sum. Below is an initial attempt at the function, which has several errors and inefficiencies: ```python def generate_fibonacci(n): fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence print(generate_fibonacci(10)) ``` Identify the mistakes in the provided script, correct them, and further enhance the function to handle multiple values of `n` efficiently. Ensure the function calculates both the Fibonacci sequence and its sum correctly and returns them as a tuple. Test your function with input examples to validate its correctness and efficiency.","solution":"def generate_fibonacci(n): Generates the Fibonacci sequence up to n terms and returns the sequence with its sum. Args: n (int): The number of terms in the Fibonacci sequence. Returns: tuple: A tuple containing the Fibonacci sequence as a list and the sum of the sequence. if not isinstance(n, int) or n <= 0: return ([], 0) if n == 1: return ([0], 0) fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return (fib_sequence, sum(fib_sequence)) def generate_multiple_fibonacci(list_of_ns): Generates multiple Fibonacci sequences based on the list of provided n values. Args: list_of_ns (list): A list of integers representing the number of terms for each sequence. Returns: list: A list of tuples, each containing a Fibonacci sequence and the sum of the sequence. results = [] for n in list_of_ns: results.append(generate_fibonacci(n)) return results"},{"question":"Given a string of words separated by spaces, write a function that processes this string and returns a dictionary. The keys of the dictionary should be the distinct words from the string, and the values should be the lengths of these words. Consider any sequence of non-space characters as a word. For example: input_string = \\"hello world this is a test\\" Expected output: { \\"hello\\": 5, \\"world\\": 5, \\"this\\": 4, \\"is\\": 2, \\"a\\": 1, \\"test\\": 4 }","solution":"def word_lengths(input_string): Takes a string of words separated by spaces and returns a dictionary. The keys are distinct words, and the values are the lengths of these words. words = input_string.split() word_length_dict = {word: len(word) for word in words} return word_length_dict"},{"question":"Write a function named `flatten_dict` that takes a nested dictionary and flattens it into a single dictionary, such that the keys of the new dictionary are the concatenated string of all keys from the outer dictionary to the innermost dictionary, separated by periods (\'.\'). If the dictionary is empty, the function should return an empty dictionary. Example: ```python def flatten_dict(d, parent_key=\'\', sep=\'.\'): items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items) ``` Problem: ```python d = { \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3, \'f\': 4 } } } flatten_dict(d) ``` Output: ```python { \'a\': 1, \'b.c\': 2, \'b.d.e\': 3, \'b.d.f\': 4 } ``` Provide the implementation inside the given function skeleton without altering the function signature.","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary into a single dictionary with concatenated keys. Args: d (dict): The dictionary to be flattened. parent_key (str): The base key string used to store the concatenated key. sep (str): The separator to use between key segments. Returns: dict: The flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"You are tasked with writing a function that takes an integer `n` and returns the `n`-th number in the Fibonacci sequence. The Fibonacci sequence is a series of numbers where the next number is found by adding up the two numbers before it. The sequence starts with 0 and 1. For example: ``` 1st Fibonacci number is 0 2nd Fibonacci number is 1 3rd Fibonacci number is 1 (0 + 1) 4th Fibonacci number is 2 (1 + 1) ``` Write a function `fibonacci(n: int) -> int` that calculates the `n`-th Fibonacci number. Ensure your function is optimized for large values of `n` (e.g., `n = 1000`). **Example:** ```python assert fibonacci(1) == 0 assert fibonacci(2) == 1 assert fibonacci(10) == 34 assert fibonacci(50) == 7778742049 ``` **Constraints:** - `1 <= n <= 1000` Ensure the solution is efficient and runs in a reasonable amount of time for large values of `n`.","solution":"def fibonacci(n: int) -> int: Returns the n-th Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer\\") if n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"You are given a grid-based problem named: Navigating the Maze with Dynamic Costs. The problem statement is as follows: Given an `m x n` grid `grid` of non-negative integers where each cell\'s value represents the cost of stepping into the cell, initiate from the top-left corner (0, 0) and determine the minimum cost to reach the bottom-right corner (m-1, n-1). You are only allowed to move either down or right at any point in time. To provide clarity, consider the following instances: Instance 1: Given Input: ``` grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Anticipated Output: 7 Explanation: Start in the top-left corner. The path 1 → 3 → 1 → 1 → 1 minimizes the total cost to reach the bottom-right corner. Instance 2: Given Input: ``` grid = [ [2, 3, 1], [2, 1, 1], [3, 2, 1] ] ``` Anticipated Output: 7 Explanation: The path 2 → 3 → 1 → 1 → 1 minimizes the cost of transition to reach the bottom-right corner. Instance 3: Given Input: ``` grid = [ [1, 2], [1, 1] ] ``` Anticipated Output: 3 Please adhere to the constraints: `1 ≤ m, n ≤ 100` `0 ≤ grid[i][j] ≤ 100`","solution":"def min_path_cost(grid): Determine the minimum cost to reach the bottom-right corner of the grid. Parameters: grid (List[List[int]]): The grid as a list of lists of integers representing costs. Returns: int : The minimum cost to reach the bottom-right corner from the top-left corner. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"Design an algorithm that dynamically allocates meeting rooms for a given set of meetings based on their start and end times. Your solution should maximize resource utilization by minimizing the number of meeting rooms used. The algorithm must handle overlapping meetings and efficiently allocate rooms without causing delays. Provide a simulation script that processes an input dataset of meetings, each defined by a unique ID, start time, and end time, and outputs the allocated room for each meeting along with the overall number of rooms required. Include error handling for invalid meetings and ensure the algorithm can scale with a large number of meetings.","solution":"import heapq def allocate_meeting_rooms(meetings): Allocates meeting rooms for given set of meetings to maximize resource utilization by minimizing the number of meeting rooms used. The meeting is a list of tuples where each tuple contains (meeting_id, start_time, end_time). Returns a dictionary with meeting IDs as keys and allocated room number as values. Also returns the total number of rooms used. if not meetings: return {}, 0 # Sort meetings by start time meetings.sort(key=lambda x: x[1]) # Priority queue for keeping track of end times of meetings in each room heap = [] # Dictionary to maintain meeting ID and allocated room allocated_rooms = {} for meeting in meetings: meeting_id, start_time, end_time = meeting # Input validation if start_time >= end_time: raise ValueError(f\\"Invalid meeting times: start_time ({start_time}) should be less than end_time ({end_time}).\\") # Check if any room is free if heap and heap[0][0] <= start_time: # Reuse the room end_time_prev, room_number = heapq.heappop(heap) else: # Allocate a new room room_number = len(heap) + 1 # Allocate the room to the current meeting allocated_rooms[meeting_id] = room_number # Add the end time of the current meeting to the heap heapq.heappush(heap, (end_time, room_number)) return allocated_rooms, len(heap)"},{"question":"Write a Python function that takes a list of integers as input and returns a dictionary where the keys are the unique integers from the list and the values are the frequency of their occurrence. Ensure that the function handles empty lists and lists with non-integer values by returning an appropriate error message.","solution":"def count_frequency(numbers): Takes a list of integers and returns a dictionary with unique integers as keys and their frequencies as values. Returns an error message for empty lists or lists with non-integer values. if not isinstance(numbers, list): return \\"Input should be a list of integers.\\" if len(numbers) == 0: return \\"List is empty.\\" frequency_dict = {} for number in numbers: if not isinstance(number, int): return \\"List contains non-integer values.\\" if number in frequency_dict: frequency_dict[number] += 1 else: frequency_dict[number] = 1 return frequency_dict"},{"question":"Given two sorted arrays arr1 and arr2 of size m and n respectively, return the median of the two sorted arrays, assuming the two arrays are sorted in ascending order. The overall run-time complexity should be O(log(min(m,n))). You may assume arr1 and arr2 cannot be both empty. Example 1: Input: arr1 = [1, 3], arr2 = [2] Output: 2.0 Example 2: Input: arr1 = [1, 2], arr2 = [3, 4] Output: 2.5 Example 3: Input: arr1 = [0, 0], arr2 = [0, 0] Output: 0.0 Example 4: Input: arr1 = [], arr2 = [1] Output: 1.0 Example 5: Input: arr1 = [2], arr2 = [] Output: 2.0 Note: - Ensure that the input arrays are sorted in ascending order. - Optimize the solution to achieve O(log(min(m,n))) complexity. Write a function `findMedianSortedArrays` that accepts two input arrays and returns their median. ```python def findMedianSortedArrays(nums1, nums2): # Your optimized solution here ```","solution":"def findMedianSortedArrays(nums1, nums2): Return the median of the two sorted arrays. The overall run-time complexity should be O(log(min(m,n))). if len(nums1) > len(nums2): nums1, nums2 = nums2, nums1 x, y = len(nums1), len(nums2) low, high = 0, x while low <= high: partition_x = (low + high) // 2 partition_y = (x + y + 1) // 2 - partition_x max_left_x = float(\'-inf\') if partition_x == 0 else nums1[partition_x - 1] min_right_x = float(\'inf\') if partition_x == x else nums1[partition_x] max_left_y = float(\'-inf\') if partition_y == 0 else nums2[partition_y - 1] min_right_y = float(\'inf\') if partition_y == y else nums2[partition_y] if max_left_x <= min_right_y and max_left_y <= min_right_x: if (x + y) % 2 == 0: return (max(max_left_x, max_left_y) + min(min_right_x, min_right_y)) / 2 else: return max(max_left_x, max_left_y) elif max_left_x > min_right_y: high = partition_x - 1 else: low = partition_x + 1"},{"question":"Develop a simulation of a simplified stock trading system that allows users to buy and sell stocks. Each stock transaction should be recorded with the stock name, number of shares, price per share, and the transaction type (buy or sell). Implement functions to perform the following operations: (1) Add a new stock transaction, (2) Retrieve and display a summary of current holdings with total value, and (3) Generate a detailed report of transaction history sorted by date. Ensure to handle edge cases such as selling more shares than owned and invalid input data.","solution":"from datetime import datetime from collections import defaultdict class StockTransactionError(Exception): pass class StockTradingSystem: def __init__(self): self.transactions = [] self.holdings = defaultdict(int) self.stock_prices = defaultdict(float) def add_transaction(self, stock_name, num_shares, price_per_share, transaction_type): if num_shares <= 0 or price_per_share <= 0: raise StockTransactionError(\\"Number of shares and price per share must be positive.\\") if transaction_type not in [\\"buy\\", \\"sell\\"]: raise StockTransactionError(\\"Invalid transaction type. Must be \'buy\' or \'sell\'.\\") current_holdings = self.holdings[stock_name] if transaction_type == \\"sell\\" and num_shares > current_holdings: raise StockTransactionError(\\"Cannot sell more shares than currently owned.\\") transaction = { \\"date\\": datetime.now(), \\"stock_name\\": stock_name, \\"num_shares\\": num_shares, \\"price_per_share\\": price_per_share, \\"transaction_type\\": transaction_type } self.transactions.append(transaction) if transaction_type == \\"buy\\": self.holdings[stock_name] += num_shares else: # sell self.holdings[stock_name] -= num_shares self.stock_prices[stock_name] = price_per_share def get_holdings_summary(self): summary = [] total_value = 0 for stock_name, num_shares in self.holdings.items(): if num_shares > 0: stock_value = num_shares * self.stock_prices[stock_name] summary.append((stock_name, num_shares, stock_value)) total_value += stock_value return summary, total_value def get_transaction_history(self): return sorted(self.transactions, key=lambda x: x[\\"date\\"])"},{"question":"Create a function that determines whether a provided string can be rearranged to form a palindrome. The function should return a boolean value: `True` if the string can be rearranged to form a palindrome and `False` otherwise. Consider only alphanumeric characters and ignore cases. Implement error handling to manage scenarios where the input is not a string.","solution":"def can_form_palindrome(s): Determines whether a provided string can be rearranged to form a palindrome. Considers only alphanumeric characters and ignores cases. :param s: input string. :return: True if the string can be rearranged to form a palindrome, False otherwise. if not isinstance(s, str): raise ValueError(\\"Input should be a string\\") s = \'\'.join(char.lower() for char in s if char.isalnum()) char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Design a function to find the longest substring of a given string that contains at most two distinct characters. The function should return the length of this substring. Additionally, provide a piece of inefficient code that attempts to solve this problem using a brute force approach and explain why it fails. Example: Input: \\"eceba\\" Output: 3 Explanation: The longest substring with at most two distinct characters is \\"ece\\" which has length 3. Example of inefficient code: ``` def longest_substring_with_two_distinct(s): max_length = 0 for i in range(len(s)): for j in range(i, len(s)): substr = s[i:j+1] if len(set(substr)) <= 2: max_length = max(max_length, len(substr)) return max_length ``` Explanation of failure: The inefficient code uses a brute force approach by checking all possible substrings and counting distinct characters, leading to a time complexity of O(n^3) due to the nested loops and usage of set. This results in high computational cost and poor performance for large input strings.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. if len(s) == 0: return 0 max_len = 0 start = 0 char_map = {} for end in range(len(s)): char = s[end] if char in char_map: char_map[char] += 1 else: char_map[char] = 1 while len(char_map) > 2: start_char = s[start] char_map[start_char] -= 1 if char_map[start_char] == 0: del char_map[start_char] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"Given a string containing only digits, design an algorithm to find all possible valid IP addresses that can be formed by inserting dots into the string. An IP address consists of four numbers separated by dots, and each number ranges between 0 and 255. Note that numbers should not have leading zeros except for zero itself. Return all valid IP addresses in any order. # Example Input: \\"25525511135\\" Output: [\\"255.255.11.135\\", \\"255.255.111.35\\"] Input: \\"0000\\" Output: [\\"0.0.0.0\\"] Input: \\"1111\\" Output: [\\"1.1.1.1\\"] # Constraints - The input string length should be between 4 and 12 inclusive. - The string contains only digits and no other characters. # Follow-up Can you optimize your solution to minimize the time complexity? Consider how the constraints on the IP address limit possibilities and how you might efficiently explore valid combinations.","solution":"def restore_ip_addresses(s): Returns a list of all possible valid IP addresses that can be formed by inserting dots into the string s. def is_valid(segment): # A segment is valid if it is between 0 and 255, and has no leading zeros unless it is \\"0\\" return len(segment) == 1 or (segment[0] != \'0\' and int(segment) <= 255) def backtrack(start=0, path=[]): if len(path) == 4: # If 4 segments are formed and we\'ve used all the string, then it\'s a valid address if start == len(s): valid_ips.append(\'.\'.join(path)) return # Choose segments of length 1 to 3 for length in range(1, 4): if start + length <= len(s): segment = s[start:start+length] if is_valid(segment): backtrack(start+length, path + [segment]) valid_ips = [] backtrack() return valid_ips"},{"question":"Write a Python function that takes a list of integers and returns the longest subsequence where the difference between consecutive numbers is either 2 or -2. The function should return the subsequence as a list. In case there are multiple subsequences of the same maximum length, return the one that appears first in the original list. For example, given the list [1, 3, 5, 7, 9, 2, 4, 6, 8], the function should return [1, 3, 5, 7, 9].","solution":"def longest_subsequence_with_diff_2(arr): Returns the longest subsequence where the difference between consecutive numbers is either 2 or -2. Parameters: arr (list): A list of integers. Returns: list: The longest subsequence following the rule. if not arr: return [] max_length_subseq = [] current_subseq = [arr[0]] for i in range(1, len(arr)): if arr[i] - arr[i-1] == 2 or arr[i] - arr[i-1] == -2: current_subseq.append(arr[i]) else: if len(current_subseq) > len(max_length_subseq): max_length_subseq = current_subseq current_subseq = [arr[i]] if len(current_subseq) > len(max_length_subseq): max_length_subseq = current_subseq return max_length_subseq"},{"question":"Create a function that accepts a string and returns the string with all its vowels removed. For this assignment, consider \'a\', \'e\', \'i\', \'o\', \'u\' as vowels and ignore case sensitivity. For example, the input \\"Beautiful Day\\" should return \\"Btfl Dy\\".","solution":"def remove_vowels(s): Removes all vowels from the input string s, ignoring case sensitivity. Parameters: - s: str, the input string Returns: - str, the string with all vowels removed vowels = \'aeiouAEIOU\' return \'\'.join([char for char in s if char not in vowels])"},{"question":"Write a function that determines if a given string can be rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). The function should return `True` if it\'s possible to rearrange the string into a palindrome, and `False` otherwise. # Input - A single string `s`, consisting of lowercase and uppercase alphabetical characters. # Output - A boolean value: `True` if it\'s possible to rearrange the string to form a palindrome, and `False` otherwise. # Example ```python can_be_palindrome(\\"Tact Coa\\") # Output: True can_be_palindrome(\\"hello\\") # Output: False can_be_palindrome(\\"AabBbCc\\") # Output: True ``` # Explanation - For the input \\"Tact Coa\\", a permutation of the string can form \\"taco cat\\" which is a palindrome. - For the input \\"hello\\", no permutation of the string can form a palindrome. - For the input \\"AabBbCc\\", the permutations \\"AaBbCcB\\" or \\"BbAaCcA\\" can form palindromes.","solution":"def can_be_palindrome(s): Determines if the string can be rearranged to form a palindrome. from collections import Counter # Normalize the string: remove non-alphanumeric characters and convert to lowercase s = \'\'.join([ch.lower() for ch in s if ch.isalpha()]) # Count frequencies of each character char_count = Counter(s) # Check the number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if there is at most 1 character with an odd count return odd_count <= 1"},{"question":"Implement a function that takes an integer `n` as input and returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: the first two Fibonacci numbers are 0 and 1, and each subsequent number is the sum of the previous two. Ensure your implementation efficiently handles large values of `n`.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"You are given an unsorted numerical sequence representing the ages of a group of people, along with two flawed code implementations to find the median age of the group. Write a correct Python function that accurately determines the median age. The solution should handle both odd and even counts of numbers. Carefully study the erroneous codes provided, identify the mistakes, and justify why your function is the correct one. Erroneous code 1: ```python def find_median_age(ages): ages.sort() return ages[len(ages) // 2] ``` Erroneous code 2: ```python def find_median_age(ages): return sorted(ages)[len(ages) // 2] ``` Example: ages = [42, 21, 34, 75, 16, 59], the expected output for the median age should be \\"36.0\\". The sorted sequence is [16, 21, 34, 42, 59, 75], which has 6 numbers, so the median is the average of the two central numbers 34 and 42.","solution":"def find_median_age(ages): Returns the median age from the list of ages. ages.sort() n = len(ages) if n % 2 == 1: # If odd, return the middle number return ages[n // 2] else: # If even, return the average of the two middle numbers mid1 = ages[n // 2 - 1] mid2 = ages[n // 2] return (mid1 + mid2) / 2.0"},{"question":"Implement a Python function that receives a list of integers and returns the indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. ```python def two_sum(nums, target): # Your code here ``` # Requirements: 1. The solution should run with a time complexity of O(n). 2. Use a dictionary to store the numbers you\'ve seen so far and their indices. 3. If no solution is found, return an empty list. # Example: ```python Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] # Because nums[0] + nums[1] == 9 ``` # Constraints: - Each input list will have at least two elements. - The input list elements are all positive or negative integers. - Only a single solution will be present.","solution":"def two_sum(nums, target): Find the indices of the two numbers such that they add up to the target. Args: nums (list): List of integers. target (int): The target sum. Returns: list: List containing the indices of the two numbers that add up to the target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Examine the Python code provided and identify any logical or syntactical errors. def vowel_count(s): vowels = \\"aeiouAEIOU\\" sum_vowels = 0 for char in s: if char in vowels: sum_vowels += 1 return \\"Number of vowels:\\" + sum_vowels","solution":"def vowel_count(s): Returns the number of vowels in the given string s. vowels = \\"aeiouAEIOU\\" sum_vowels = 0 for char in s: if char in vowels: sum_vowels += 1 return \\"Number of vowels: \\" + str(sum_vowels)"},{"question":"Given a string s which represents an algebraic expression containing the characters \'(\', \')\', \'+\', \'-\', \'*\', \'/\', and non-negative integers, design a function in Python that evaluates the expression and returns the result as an integer. Your function should handle nested parentheses and the standard order of operations (i.e., PEMDAS/BODMAS rules). Consider the following details: 1. The expression will be a valid algebraic expression with balanced parentheses. 2. Each number and operator will be separated by exactly one space for easier parsing. 3. Division should be treated as integer division. For example: ``` evaluate_expression(\\"3 + 5\\") => 8 evaluate_expression(\\"( 2 + 3 ) * 4\\") => 20 evaluate_expression(\\"( 3 + ( 2 * 2 ) ) / 2\\") => 3 ``` Complete the function below: ```python def evaluate_expression(s): # Your code here # Example test cases print(evaluate_expression(\\"3 + 5\\")) #=> 8 print(evaluate_expression(\\"( 2 + 3 ) * 4\\")) #=> 20 print(evaluate_expression(\\"( 3 + ( 2 * 2 ) ) / 2\\")) #=> 3 ```","solution":"def evaluate_expression(s): def parse(tokens): if tokens and tokens[0] == \'(\': tokens.pop(0) # Remove the opening parenthesis value = parse_expression(tokens) tokens.pop(0) # Remove the closing parenthesis return value else: return int(tokens.pop(0)) def parse_term(tokens): value = parse(tokens) while tokens and tokens[0] in \'*/\': op = tokens.pop(0) if op == \'*\': value *= parse(tokens) elif op == \'/\': value //= parse(tokens) return value def parse_expression(tokens): value = parse_term(tokens) while tokens and tokens[0] in \'+-\': op = tokens.pop(0) if op == \'+\': value += parse_term(tokens) elif op == \'-\': value -= parse_term(tokens) return value tokens = s.replace(\'(\', \' ( \').replace(\')\', \' ) \').split() return parse_expression(tokens)"},{"question":"Using Python, write a function that takes an integer `n` and returns a list of all prime numbers less than `n`. The function should be efficient for large values of `n` (up to 100,000). ```python def find_primes(n): # Your code here pass # Example usage: # find_primes(10) should return [2, 3, 5, 7] # find_primes(30) should return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] ``` # Constraints: - The function should handle input values up to `n = 100000`. - You may assume `n` is always a positive integer.","solution":"def find_primes(n): Returns a list of all prime numbers less than n. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start*start, n, start): sieve[i] = False return [num for num in range(n) if sieve[num]] # Example usage: find_primes(10) returns [2, 3, 5, 7]"},{"question":"Given a list of positive integers, a \\"number palindrome\\" is a sequence that reads the same backwards as forwards, such as [1, 2, 3, 2, 1]. Your task is to write a function that finds the longest contiguous subarray within the given list that forms a number palindrome. For example, given the input list [1, 2, 3, 2, 1, 4, 5, 4, 6], the longest contiguous palindromic subarray is [1, 2, 3, 2, 1] because it reads the same forward and backward. If there are multiple palindromic subarrays of the same max length, return the one that appears first. Write a function: ```python def longest_palindromic_subarray(arr): # Your code here ``` **Input:** - a list `arr` of integers, where 1 ≤ len(arr) ≤ 10^5 and 1 ≤ arr[i] ≤ 10^9 **Output:** - a list of integers representing the longest palindromic subarray. **Example:** ```python longest_palindromic_subarray([1, 2, 3, 2, 1, 4, 5, 4, 6]) # Output: [1, 2, 3, 2, 1] longest_palindromic_subarray([7, 3, 9, 3, 7, 4, 3, 6, 3]) # Output: [7, 3, 9, 3, 7] ``` You should aim for an efficient solution in terms of time complexity.","solution":"def longest_palindromic_subarray(arr): def is_palindrome(subarray): return subarray == subarray[::-1] n = len(arr) if n == 1: return arr max_length = 1 start = 0 for i in range(n): for j in range(i, n): subarray = arr[i:j+1] if is_palindrome(subarray) and len(subarray) > max_length: start = i max_length = len(subarray) return arr[start:start + max_length]"},{"question":"You have two data frames, `df_customers` and `df_orders`. The `df_customers` DataFrame contains customer information with the columns `customerId`, `name`, and `age`. The `df_orders` DataFrame contains order information with the columns `orderId`, `customerId`, `product`, and `orderDate`. Write a code to merge these two DataFrames on the `customerId` column so that all customers, including those who have not placed any orders, are included in the result. Name the resulting DataFrame `df_merged`. ```python # Example DataFrames: df_customers = pd.DataFrame({ \'customerId\': [1, 2, 3], \'name\': [\'Alice\', \'Bob\', \'Charlie\'], \'age\': [25, 30, 35] }) df_orders = pd.DataFrame({ \'orderId\': [101, 102, 103], \'customerId\': [1, 2, 2], \'product\': [\'Book\', \'Laptop\', \'Pen\'], \'orderDate\': [\'2021-01-01\', \'2021-01-02\', \'2021-01-03\'] }) ``` What will be the contents of `df_merged`?","solution":"import pandas as pd def merge_customers_orders(df_customers, df_orders): Merges two DataFrames df_customers and df_orders on \'customerId\' so that all customers, including those who have not placed any orders, are included in the result. Parameters: df_customers (pd.DataFrame): DataFrame containing customer information. df_orders (pd.DataFrame): DataFrame containing order information. Returns: pd.DataFrame: The merged DataFrame. df_merged = pd.merge(df_customers, df_orders, on=\'customerId\', how=\'left\') return df_merged # Example DataFrames for verification df_customers = pd.DataFrame({ \'customerId\': [1, 2, 3], \'name\': [\'Alice\', \'Bob\', \'Charlie\'], \'age\': [25, 30, 35] }) df_orders = pd.DataFrame({ \'orderId\': [101, 102, 103], \'customerId\': [1, 2, 2], \'product\': [\'Book\', \'Laptop\', \'Pen\'], \'orderDate\': [\'2021-01-01\', \'2021-01-02\', \'2021-01-03\'] }) df_merged = merge_customers_orders(df_customers, df_orders) print(df_merged)"},{"question":"Write a Python function that takes a string containing only parentheses characters \'(\' and \')\' and determines if the parentheses are balanced. The function should return a boolean indicating whether the given string is balanced. Furthermore, provide an example of an incorrect implementation of this function and explain the flaws in the logic of the erroneous code.","solution":"def are_parentheses_balanced(s): Determines if the parentheses in the given string are balanced. Args: s (str): A string containing only the characters \'(\' and \')\' Returns: bool: True if the parentheses are balanced, False otherwise stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if len(stack) == 0: return False stack.pop() return len(stack) == 0"},{"question":"Create a function `validate_isbn` that accepts an ISBN-10 string and returns `True` if it is valid, and `False` otherwise. The function should handle various input cases, such as strings with whitespaces, hyphens, and invalid characters. ISBN-10 is a 10-digit code generally used to identify books, where the last digit is a checksum. Here is the formula for a valid ISBN-10: If `d1 d2 d3 d4 d5 d6 d7 d8 d9 d10` is an ISBN-10, then: [ (d1 * 1 + d2 * 2 + d3 * 3 + d4 * 4 + d5 * 5 + d6 * 6 + d7 * 7 + d8 * 8 + d9 * 9 + d10 * 10) mod 11 = 0 ] The given function must ensure the length of the cleaned string (excluding whitespaces and hyphens) must be 10 and should appropriately handle potential non-digit characters or incorrect ISBN lengths. Examples: ``` >>> validate_isbn(\\"0-306-40615-2\\") True >>> validate_isbn(\\"0306406152\\") True >>> validate_isbn(\\"0 3 0 6 4 0-6 1 5 2\\") True >>> validate_isbn(\\"123456789X\\") True >>> validate_isbn(\\"12345 67892X\\") False >>> validate_isbn(\\"12345678\\") False >>> validate_isbn(\\"abcdefghij\\") False ``` Implement the function as follows: ```python def validate_isbn(isbn): Validate if the given ISBN-10 string is valid or not, considering potential whitespaces, hyphens, and invalid characters. Returns True if valid, otherwise False. Arguments: isbn -- the ISBN-10 string to validate Example: >>> validate_isbn(\\"0-306-40615-2\\") True >>> validate_isbn(\\"0306406152\\") True >>> validate_isbn(\\"0 3 0 6 4 0-6 1 5 2\\") True >>> validate_isbn(\\"123456789X\\") True >>> validate_isbn(\\"12345 67892X\\") False >>> validate_isbn(\\"12345678\\") False >>> validate_isbn(\\"abcdefghij\\") False # Your code here ```","solution":"def validate_isbn(isbn): Validate if the given ISBN-10 string is valid or not, considering potential whitespaces, hyphens, and invalid characters. Returns True if valid, otherwise False. Arguments: isbn -- the ISBN-10 string to validate Example: >>> validate_isbn(\\"0-306-40615-2\\") True >>> validate_isbn(\\"0306406152\\") True >>> validate_isbn(\\"0 3 0 6 4 0-6 1 5 2\\") True >>> validate_isbn(\\"123456789X\\") True >>> validate_isbn(\\"12345 67892X\\") False >>> validate_isbn(\\"12345678\\") False >>> validate_isbn(\\"abcdefghij\\") False # Remove hyphens and whitespaces cleaned_isbn = isbn.replace(\\"-\\", \\"\\").replace(\\" \\", \\"\\") # Check if cleaned ISBN length is 10 if len(cleaned_isbn) != 10: return False # Check for invalid characters if not cleaned_isbn[:-1].isdigit() or (cleaned_isbn[-1] not in \'0123456789X\'): return False # Calculate checksum checksum = 0 for i in range(10): if cleaned_isbn[i] == \'X\': digit = 10 else: digit = int(cleaned_isbn[i]) checksum += digit * (i + 1) return checksum % 11 == 0"},{"question":"Write a Python program that takes in a string of text and returns a dictionary where the keys are the unique characters in the string, and the values are the counts of each character\'s occurrence. Ignore whitespace and consider uppercase and lowercase letters as distinct characters. Example: ``` Input: \\"Hello World\\" Output: {\'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'W\': 1, \'r\': 1, \'d\': 1} ```","solution":"def count_characters(input_string): Returns a dictionary where the keys are unique characters in the input_string and the values are the counts of each character\'s occurrence. Whitespace is ignored. Uppercase and lowercase letters are considered distinct. character_counts = {} for char in input_string: if char.isspace(): continue if char in character_counts: character_counts[char] += 1 else: character_counts[char] = 1 return character_counts"},{"question":"Write a Python function `find_first_unique_character(s)` that takes a string `s` as input and returns the first non-repeating character in it. If all characters are repeated or the string is empty, return `None`. Ensure your solution is efficient in terms of time and space complexity. **Examples:** ```python find_first_unique_character(\\"swiss\\") # Output: \\"w\\" find_first_unique_character(\\"racecars\\") # Output: \\"e\\" find_first_unique_character(\\"aabbcc\\") # Output: None find_first_unique_character(\\"\\") # Output: None ``` **Constraints:** - The input string `s` can contain lowercase and uppercase English letters. - The function should run in O(n) time where n is the length of the input string. **Hints:** - Use a dictionary to count the frequency of each character. - Iterate through the string to identify the first character with a frequency of one.","solution":"def find_first_unique_character(s): Returns the first non-repeating character in the string s. If all characters are repeated or the string is empty, return None. if not s: return None # Count frequency of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with frequency 1 for char in s: if char_count[char] == 1: return char return None"},{"question":"Given a string that contains a mixture of uppercase and lowercase letters, write a function to determine if it follows the camel case naming convention. Camel case requires the first letter to be lowercase, and subsequent words should start with an uppercase letter, with no spaces or special characters. The function should return `True` if the string is in camel case and `False` otherwise. Example: ```python is_camel_case(\\"thisIsCamelCase\\") # Returns: True is_camel_case(\\"ThisIsNotCamelCase\\") # Returns: False is_camel_case(\\"notCamel\\") # Returns: True is_camel_case(\\"notCamel123\\") # Returns: False is_camel_case(\\"not_camel\\") # Returns: False ``` Write your implementation of the `is_camel_case` function in Python.","solution":"import re def is_camel_case(s): Returns True if the string follows camel case convention, False otherwise. # Check if the string matches the camel case pattern. return bool(re.match(r\'^[a-z]+(?:[A-Z][a-z]*)*\', s))"},{"question":"Given a string representing a mathematical expression, create a function that evaluates the expression and returns the result as a float. The expression can contain positive and negative integers, addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`). The expression may have nested parentheses which must be evaluated correctly according to the order of operations (PEMDAS/BODMAS rules). Constraints: - The input string will be a valid mathematical expression. - Handles dividing by zero by returning an error message. - Handles whitespace characters within the input expression. Your task is to: 1. Parse the input string. 2. Implement the order of operations to evaluate the expression correctly. 3. Return the result as a float. Example: ```python def evaluate_expression(expression: str) -> float: # Your code here # Example input and output print(evaluate_expression(\\"3 + 5\\")) # Output: 8.0 print(evaluate_expression(\\"10 + 2 * 6\\")) # Output: 22.0 print(evaluate_expression(\\"(5 + 3) * 12 / 3\\")) # Output: 32.0 print(evaluate_expression(\\"100 * ( 2 + 12 ) / 14\\")) # Output: 100.0 print(evaluate_expression(\\"100 / ( 3 - 3 )\\")) # Output: \\"Error: Division by zero\\" ```","solution":"def evaluate_expression(expression: str) -> float: Evaluates a mathematical expression and returns the result as a float. The expression can contain positive and negative integers, addition (+), subtraction (-), multiplication (*), and division (/). The expression may have nested parentheses. Handles division by zero by returning an error message. def safe_eval(expr): try: return eval(expr) except ZeroDivisionError: return \\"Error: Division by zero\\" # Remove spaces from expression expression = expression.replace(\\" \\", \\"\\") # Use eval to compute the result return safe_eval(expression)"},{"question":"You are required to implement a priority queue in Python using a binary heap data structure. The priority queue should support the following operations: - `insert(item, priority)`: Insert the item with the given priority. - `extract_max()`: Remove and return the item with the highest priority. - `peek_max()`: Return the item with the highest priority without removing it. Below is a partially implemented class. Complete the class by filling in the missing methods. ```python class PriorityQueue: def __init__(self): self.heap = [] def insert(self, item, priority): self.heap.append((priority, item)) self._sift_up(len(self.heap) - 1) def _sift_up(self, index): # Implement the sift-up operation def extract_max(self): if len(self.heap) > 1: self._swap(0, len(self.heap) - 1) max_item = self.heap.pop() self._sift_down(0) elif self.heap: max_item = self.heap.pop() else: raise IndexError(\\"extract_max(): empty queue\\") return max_item[1] def _sift_down(self, index): # Implement the sift-down operation def peek_max(self): if not self.heap: raise IndexError(\\"peek_max(): empty queue\\") return self.heap[0][1] def _swap(self, i, j): self.heap[i], self.heap[j] = self.heap[j], self.heap[i] # Example usage: pq = PriorityQueue() pq.insert(\'task1\', 2) pq.insert(\'task2\', 5) pq.insert(\'task3\', 1) print(pq.peek_max()) # Output: \'task2\' print(pq.extract_max()) # Output: \'task2\' print(pq.extract_max()) # Output: \'task1\' print(pq.extract_max()) # Output: \'task3\' ``` Please complete the `_sift_up` and `_sift_down` methods to ensure the heap property is maintained during insertions and extractions.","solution":"class PriorityQueue: def __init__(self): self.heap = [] def insert(self, item, priority): self.heap.append((priority, item)) self._sift_up(len(self.heap) - 1) def _sift_up(self, index): parent_index = (index - 1) // 2 if index > 0 and self.heap[index][0] > self.heap[parent_index][0]: self._swap(index, parent_index) self._sift_up(parent_index) def extract_max(self): if len(self.heap) > 1: self._swap(0, len(self.heap) - 1) max_item = self.heap.pop() self._sift_down(0) elif self.heap: max_item = self.heap.pop() else: raise IndexError(\\"extract_max(): empty queue\\") return max_item[1] def _sift_down(self, index): left_child = 2 * index + 1 right_child = 2 * index + 2 largest = index if left_child < len(self.heap) and self.heap[left_child][0] > self.heap[largest][0]: largest = left_child if right_child < len(self.heap) and self.heap[right_child][0] > self.heap[largest][0]: largest = right_child if largest != index: self._swap(index, largest) self._sift_down(largest) def peek_max(self): if not self.heap: raise IndexError(\\"peek_max(): empty queue\\") return self.heap[0][1] def _swap(self, i, j): self.heap[i], self.heap[j] = self.heap[j], self.heap[i] # Example usage: pq = PriorityQueue() pq.insert(\'task1\', 2) pq.insert(\'task2\', 5) pq.insert(\'task3\', 1) print(pq.peek_max()) # Output: \'task2\' print(pq.extract_max()) # Output: \'task2\' print(pq.extract_max()) # Output: \'task1\' print(pq.extract_max()) # Output: \'task3\'"},{"question":"Write a Python function that simulates a vending machine. The vending machine should accept money, dispense items, and return change if applicable. The function should handle the following operations: - Display available items and their prices. - Accept different denominations (e.g., 1, 5, 10). - Allow the user to select an item. - Check if the user has inserted enough money to purchase the item. - Dispense the item if enough money is inserted. - Return the correct change if the item is purchased. - If not enough money is inserted, prompt the user to insert more money or cancel the transaction. Consider these items and their prices for the vending machine: - Soda: 1.50 - Chips: 1.00 - Candy: 0.65 Your function should handle scenarios where the user might input invalid options or insufficient funds. Ensure that the function has robust validation and error-handling mechanisms. Here is a partial implementation to help you get started. Extend this template to complete the required functionality. ```python def vending_machine(): items = {\'Soda\': 1.50, \'Chips\': 1.00, \'Candy\': 0.65} inserted_money = 0.0 def display_items(): print(\\"Available items and their prices:\\") for item, price in items.items(): print(f\\"{item}: {price:.2f}\\") def accept_money(): nonlocal inserted_money while True: try: denomination = float(input(\\"Insert money (1, 5, 10): \\")) if denomination in [1.0, 5.0, 10.0]: inserted_money += denomination print(f\\"Inserted money: {inserted_money:.2f}\\") break else: print(\\"Invalid denomination. Please insert 1, 5, or 10.\\") except ValueError: print(\\"Invalid input. Please enter a valid amount.\\") def select_item(): nonlocal inserted_money while True: choice = input(\\"Select an item (Soda, Chips, Candy) or type \'cancel\' to cancel: \\") if choice in items: price = items[choice] if inserted_money >= price: inserted_money -= price print(f\\"Dispensing {choice}. Change returned: {inserted_money:.2f}\\") inserted_money = 0.0 break else: print(f\\"Not enough money. {choice} costs {price:.2f}. Please insert more money.\\") accept_money() elif choice.lower() == \'cancel\': print(f\\"Transaction cancelled. Returning inserted money: {inserted_money:.2f}\\") inserted_money = 0.0 break else: print(\\"Invalid selection. Please choose a valid item.\\") display_items() while True: accept_money() select_item() if inserted_money == 0.0: break # Test the vending_machine function vending_machine() ```","solution":"def vending_machine(): items = {\'Soda\': 1.50, \'Chips\': 1.00, \'Candy\': 0.65} inserted_money = 0.0 def display_items(): return {item: f\\"{price:.2f}\\" for item, price in items.items()} def accept_money(amount): nonlocal inserted_money if amount in [1, 5, 10]: inserted_money += amount return f\\"Inserted money: {inserted_money:.2f}\\" else: return \\"Invalid denomination. Please insert 1, 5, or 10.\\" def select_item(item): nonlocal inserted_money if item in items: price = items[item] if inserted_money >= price: change = inserted_money - price inserted_money = 0.0 return f\\"Dispensing {item}. Change returned: {change:.2f}\\" else: return f\\"Not enough money. {item} costs {price:.2f}. Please insert more money.\\" else: return \\"Invalid selection. Please choose a valid item.\\" return { \\"display_items\\": display_items, \\"accept_money\\": accept_money, \\"select_item\\": select_item }"},{"question":"Implement a binary search algorithm that operates on a sorted array to find whether a target value exists within the array. The function should return the index of the target value if it is found, and -1 if it is not present. Additionally, write a test function that verifies the correctness of your binary search implementation using a set of sample test cases.","solution":"def binary_search(arr, target): Perform a binary search on a sorted array to find the target value. Parameters: arr (list of int): A list of sorted integers. target (int): The target value to search for. Returns: int: The index of the target value if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Design a maze-solving program in Python that satisfies the following two requirements: 1. Implement a function that generates a random maze of a specified size. The maze should be represented as a grid of cells, where each cell can be either open (passable) or blocked (impassable). Ensure there is at least one valid path from the top-left corner (start) to the bottom-right corner (finish) of the maze. 2. Implement a maze solver using the Breadth-First Search (BFS) algorithm. The solver should find the shortest path in terms of the number of steps from the start to the finish if such a path exists. If no path exists, the solver should return an indication of this. Finally, validate the functionality of both the maze generator and the maze solver with appropriate tests. This should include edge cases like a very small maze, a relatively complex maze, and scenarios where no path exists. Use assertions to confirm the correctness of the paths found and the generator\'s ability to produce solvable mazes.","solution":"import random from collections import deque def generate_random_maze(size): Generates a random maze of a specified size. 0 - open cell, 1 - blocked cell Ensures there is at least one valid path from the top-left to the bottom-right corner of the maze. maze = [[1 if random.random() < 0.3 else 0 for _ in range(size)] for _ in range(size)] maze[0][0] = 0 # Ensure start is open maze[size - 1][size - 1] = 0 # Ensure finish is open # Ensure there is a valid path def mark_valid_path(): x, y = 0, 0 while x < size - 1 or y < size - 1: maze[x][y] = 0 if x < size - 1 and (y == size - 1 or random.random() > 0.5): x += 1 elif y < size - 1: y += 1 maze[x][y] = 0 maze[x][y] = 0 mark_valid_path() return maze def bfs_solver(maze): Solves the maze using Breadth-First Search (BFS) algorithm and returns the shortest path if exists or indicates no path. size = len(maze) start = (0, 0) goal = (size - 1, size - 1) queue = deque([(start, [start])]) visited = set() while queue: (x, y), path = queue.popleft() if (x, y) == goal: return path for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < size and 0 <= ny < size and maze[nx][ny] == 0 and (nx, ny) not in visited: queue.append(((nx, ny), path + [(nx, ny)])) visited.add((nx, ny)) return \\"No path exists\\""},{"question":"You are given a challenge titled \'Longest Consecutive Sequence\'. The task is to find the length of the longest consecutive elements sequence in an unsorted integer array named `nums`. The solution should ideally perform with O(n) time complexity. Consider the following examples: Example 1: Given `nums` as [100, 4, 200, 1, 3, 2], the output should be 4 because the longest consecutive elements sequence is [1, 2, 3, 4], which has a length of 4. Example 2: Given `nums` as [0,3,7,2,5,8,4,6,0,1], the output should be 9 because the longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8], which has a length of 9. Example 3: Given `nums` as [], the output should be 0 because there are no elements in the array, thus no consecutive sequence can be formed. Example 4: Given `nums` as [9], the output should be 1 because there is only one element, which forms a consecutive sequence of length 1. The constraints are as follows: The length of `nums` is between 0 and 1000. The values of `nums[i]` range from `-10^9` to `10^9`. Additionally, you are given a piece of errant code that attempts to solve the problem but fails in certain scenarios. Your task is to identify the error in the code and correct it. The errant code is as follows: ```python def longestConsecutive(nums): if not nums: return 0 nums.sort() longest_streak = 1 current_streak = 1 for i in range(1, len(nums)): if nums[i] != nums[i-1]: if nums[i] == nums[i-1] + 1: current_streak += 1 else: longest_streak = max(longest_streak, current_streak) current_streak = 1 return max(longest_streak, current_streak) ``` Identify the error in the code and correct it to solve the problem.","solution":"def longestConsecutive(nums): if not nums: return 0 nums_set = set(nums) # Use a set for O(1) lookups longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: # Check if it\'s the start of a sequence current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given a text file that contains a list of names, one per line. Some lines might be blank or contain only whitespace. Write a Python function that reads the file, removes any blank or whitespace-only lines, sorts the names alphabetically, and writes the sorted names back to a new text file. For example, if the input file contains: ``` Emma Oliver Ava Sophia James ``` The content of the output file should be: ``` Ava Emma James Oliver Sophia ``` Write Python code to accomplish this task.","solution":"def process_names(input_file, output_file): Reads names from an input file, removes blank lines or lines with only whitespace, sorts the names alphabetically, and writes them to an output file. :param input_file: Path to the input file containing names. :param output_file: Path to the output file where sorted names will be written. with open(input_file, \'r\') as infile: # Read all lines, stripping whitespace and filtering out empty lines names = [line.strip() for line in infile if line.strip()] # Sort the names alphabetically names.sort() # Write the sorted names to the output file, each on a new line with open(output_file, \'w\') as outfile: for name in names: outfile.write(name + \'n\')"},{"question":"Create a Python function that takes a list of dictionaries representing student records. Each dictionary contains `name`, `age`, and `grades` (a list of integers). The function should calculate the average grade for each student and classify them as \\"Pass\\" or \\"Fail\\". A student passes if their average grade is 60 or above. Return a list of dictionaries where each dictionary contains the student\'s `name` and their classification as \\"Pass\\" or \\"Fail\\". Additionally, store these classifications in an SQLite database, along with the student\'s name and their calculated average grade. Use the sqlite3 module for interacting with the SQLite database. Make sure to include error handling for potential database operations.","solution":"import sqlite3 def classify_students(students): Classify students as \'Pass\' or \'Fail\' based on their average grade. Args: students (list): A list of dictionaries, each containing \'name\', \'age\', and \'grades\'. Returns: list: A list of dictionaries containing \'name\' and \'classification\'. results = [] for student in students: name = student[\'name\'] grades = student[\'grades\'] average_grade = sum(grades) / len(grades) if grades else 0 if average_grade >= 60: classification = \'Pass\' else: classification = \'Fail\' results.append({\'name\': name, \'classification\': classification}) save_to_database(name, average_grade, classification) return results def save_to_database(name, average_grade, classification): Save student classification results to an SQLite database. Args: name (str): Student\'s name. average_grade (float): Calculated average grade of the student. classification (str): \'Pass\' or \'Fail\' classification. connection = None try: connection = sqlite3.connect(\'students.db\') cursor = connection.cursor() # Create table if not exists cursor.execute(\'\'\'CREATE TABLE IF NOT EXISTS student_classification ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, average_grade REAL NOT NULL, classification TEXT NOT NULL)\'\'\') # Insert data cursor.execute(\'\'\'INSERT INTO student_classification (name, average_grade, classification) VALUES (?, ?, ?)\'\'\', (name, average_grade, classification)) # Commit transaction connection.commit() except sqlite3.Error as e: print(f\\"Database error: {e}\\") finally: if connection: connection.close()"},{"question":"Create a function that accepts a list of integers and returns the sum of the squares of the even numbers in the list. If the list is empty, the function should return 0. Additionally, ensure that the function handles negative integers correctly.","solution":"def sum_of_squares_of_even_numbers(numbers): Returns the sum of the squares of the even numbers in the list. If the list is empty, returns 0. return sum(x**2 for x in numbers if x % 2 == 0)"},{"question":"Write a function that takes a list of strings representing file paths and groups the file paths by their root directories. Each root directory should be identified by the first part of the path before the first \'/\' character. The function should return a dictionary where the keys are the root directories and the values are lists of file paths starting with that root directory. For example, given the list of file paths: ``` [ \\"root1/file1.txt\\", \\"root2/file2.txt\\", \\"root1/folder1/file3.txt\\", \\"root3/file4.txt\\", \\"root2/folder2/file5.txt\\", \\"root1/folder1/folder2/file6.txt\\" ] ``` The function should return: ``` { \\"root1\\": [ \\"root1/file1.txt\\", \\"root1/folder1/file3.txt\\", \\"root1/folder1/folder2/file6.txt\\" ], \\"root2\\": [ \\"root2/file2.txt\\", \\"root2/folder2/file5.txt\\" ], \\"root3\\": [ \\"root3/file4.txt\\" ] } ``` Consider edge cases such as empty input, file paths with no root directory, or paths with only root directories. Ensure the implementation is robust and handles these scenarios appropriately.","solution":"def group_by_root_directory(file_paths): Groups file paths by their root directories. Parameters: file_paths (list of str): The list of file paths. Returns: dict: A dictionary where keys are root directories and values are lists of file paths. grouped_paths = {} for path in file_paths: root_dir = path.split(\'/\')[0] if root_dir not in grouped_paths: grouped_paths[root_dir] = [] grouped_paths[root_dir].append(path) return grouped_paths"},{"question":"Write a Python function that accepts a string and returns the character that appears the most frequently in the string. In the case of a tie, return the first character that reached the highest frequency. The function should be case-sensitive. For example, given the input \\"banana\\", the output should be \'a\' since it appears 3 times, which is more frequent than any other character. If the input is \\"aardvark\\", the output should be \'a\' even though \'a\' and \'r\' both appear twice, because \'a\' appears first.","solution":"def most_frequent_character(s): Returns the character that appears the most frequently in the string `s`. In the case of a tie, returns the first character that reached the highest frequency. if not s: return None char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_freq = max(char_count.values()) for char in s: if char_count[char] == max_freq: return char"},{"question":"Develop a Python function that takes a single string input of space-separated words and returns a dictionary where the keys are the words and the values are the counts of each word\'s occurrence. Punctuation and capitalization should be ignored when counting occurrences. Example: ```python def count_words(s): # your code here input_string = \\"Hello world! Hello, programming world.\\" result = count_words(input_string) print(result) # should output {\'hello\': 2, \'world\': 2, \'programming\': 1} ``` Constraints: - The input will be a non-empty string with words separated by spaces. - Words are defined as sequences of alphabetic characters. - Convert all characters to lowercase. - Ignore any punctuation marks present in the string. - Your solution should handle an average-length sentence efficiently.","solution":"import re from collections import defaultdict def count_words(s): Takes a single string input of space-separated words and returns a dictionary where the keys are the words and the values are the counts of each word\'s occurrence. Punctuation and capitalization are ignored when counting occurrences. # Convert string to lowercase s = s.lower() # Remove punctuation using regex s = re.sub(r\'[^ws]\', \'\', s) # Split the string into words words = s.split() word_count = defaultdict(int) for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"Write a function that takes a string as input and returns the string with all vowels removed. Implement this function using a list comprehension for character filtering. Provide appropriate comments to explain the function. Here is a hint on how the function should be structured: ``` def remove_vowels(input_string): # Create a string containing all vowels vowels = \\"aeiouAEIOU\\" # Use a list comprehension to filter out the vowels result = \\"\\".join([char for char in input_string if char not in vowels]) return result # Example usage: remove_vowels(\\"Hello World\\") ``` Test the function with different input strings to ensure it handles edge cases such as empty strings and strings with no vowels.","solution":"def remove_vowels(input_string): Removes all vowels from the input_string and returns the resulting string. Parameters: input_string (str): The string from which vowels are to be removed. Returns: str: The string with all vowels removed. # Create a string containing all vowels vowels = \\"aeiouAEIOU\\" # Use a list comprehension to filter out the vowels result = \\"\\".join([char for char in input_string if char not in vowels]) return result"},{"question":"Write a function to find the longest substring of a given string where all characters are unique. The string will only contain lowercase English alphabet letters and its length will not exceed 10^5. Input: - A single string \'s\'. Output: - Print the length of the longest substring with all unique characters. Examples: Input: s = \\"abcabcbb\\" Output: 3 Input: s = \\"bbbbb\\" Output: 1 Input: s = \\"pwwkew\\" Output: 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function in Python that reads a file and returns the ten most common words in the file along with their respective counts. Punctuation should be removed and word frequency should be case insensitive. The file will contain a mixture of words, spaces, and punctuation marks. If there are fewer than ten unique words in the file, the function should return all of them. Your function should handle large files efficiently. For example, for a file containing the text \\"Hello, hello! How are you? Hello, I am fine. How about you? I am good too.\\", the function should return [(\'hello\', 3), (\'how\', 2), (\'are\', 1), (\'you\', 2), (\'i\', 2), (\'am\', 2), (\'fine\', 1), (\'about\', 1), (\'good\', 1), (\'too\', 1)]. _Do not use any external libraries for this question._ Tip: Use Python\'s built-in features to handle file reading, string manipulation, and counting. Consider using dictionaries or collections.Counter for efficient counting. Ensure the function has linear complexity relative to the size of the file.","solution":"import re from collections import Counter def read_file_and_get_common_words(file_path): with open(file_path, \'r\') as file: text = file.read().lower() # Remove punctuation text = re.sub(r\'[^ws]\', \'\', text) words = text.split() word_counts = Counter(words) # Get the ten most common words common_words = word_counts.most_common(10) return common_words"},{"question":"Write a function to determine if a given binary tree is balanced. A balanced binary tree is defined as a tree where the depth of all the leaf nodes or nodes with a single child differ by at most one. The function should return `True` if the tree is balanced and `False` otherwise. Provided is the structure of the binary tree node: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Implement the function `is_balanced(root: TreeNode) -> bool`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root: TreeNode) -> bool: def check_balance(node): if not node: return 0, True left_height, left_balanced = check_balance(node.left) right_height, right_balanced = check_balance(node.right) curr_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 curr_height = 1 + max(left_height, right_height) return curr_height, curr_balanced _, balanced = check_balance(root) return balanced"},{"question":"You are given a binary tree in which each node has an integer value. Write a function that computes the sum of all nodes\' values that fall between two given integers (inclusive), `L` and `R`. The tree is not necessarily a binary search tree. The function signature is: `int rangeSum(TreeNode root, int L, int R)` # Example: Input: ``` 10 / 5 15 / 3 7 18 ``` ```plaintext L = 7, R = 15 ``` Output: `32` # Explanation: Nodes within the specified range [7, 15] are: [7, 10, 15]. Their sum is 7 + 10 + 15 = 32. # Constraints: * The number of nodes in the binary tree is between `1` and `10^4`. * Each node\'s value is an integer between `-10^4` and `10^4`. * `L` and `R` are integers where `-10^4 <= L <= R <= 10^4`. Your task is to implement the function `rangeSum` to solve the problem, ensuring it performs efficiently for the given constraints.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def rangeSum(root, L, R): Computes the sum of all nodes\' values that fall between L and R (inclusive). :param root: TreeNode, the root of the binary tree :param L: int, lower bound of the range (inclusive) :param R: int, upper bound of the range (inclusive) :return: int, the sum of values of all nodes within the range [L, R] if not root: return 0 sum = 0 if L <= root.val <= R: sum += root.val if root.val > L: sum += rangeSum(root.left, L, R) if root.val < R: sum += rangeSum(root.right, L, R) return sum"},{"question":"Write a function `find_most_frequent` that takes a list of integers as input and returns the most frequent number in the list. If there is a tie, return the smallest number among them. Ensure your implementation handles large lists efficiently. **Example:** ```python find_most_frequent([1, 3, 1, 3, 2, 1]) ``` Output: ``` 1 ``` Additionally, write unit tests for the function to validate the solution works as expected for various edge cases including ties and unique elements.","solution":"def find_most_frequent(nums): Returns the most frequent number in the list. If there is a tie, the smallest number among them is returned. from collections import Counter if not nums: return None # Count the frequency of each number num_counts = Counter(nums) # Find the maximum frequency max_count = max(num_counts.values()) # Collect all numbers with the maximum frequency most_frequent_numbers = [num for num, count in num_counts.items() if count == max_count] # Return the smallest number among the most frequent numbers return min(most_frequent_numbers)"},{"question":"Implement a function that takes a list of integers and rearranges them such that all the even numbers appear before all the odd numbers. The relative order of the even and odd numbers within their groups should be preserved. from typing import List def rearrange_even_odd(nums: List[int]) -> List[int]: Rearrange the integers in the list so that all even numbers come before the odd numbers, while maintaining their relative order. >>> rearrange_even_odd([3, 1, 2, 4]) [2, 4, 3, 1] >>> rearrange_even_odd([1, 2, 3, 4, 5, 6]) [2, 4, 6, 1, 3, 5] >>> rearrange_even_odd([5, 7, 8, 2, 3, 1]) [8, 2, 5, 7, 3, 1] >>> rearrange_even_odd([1, 3, 5, 7]) [1, 3, 5, 7]","solution":"from typing import List def rearrange_even_odd(nums: List[int]) -> List[int]: Rearrange the integers in the list so that all even numbers come before the odd numbers, while maintaining their relative order. :param nums: List of integers to be rearranged. :return: List of integers with even numbers before odd numbers. evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds"},{"question":"Design a function in Python that processes a list of transaction records, where each record consists of a transaction ID, customer ID, transaction amount, and date. The function should be able to: 1. Calculate the total transaction amount for each customer. 2. Identify the customer with the highest total transaction amount and return the customer ID and their total. 3. Count the number of unique customers who made transactions within a specified date range. 4. List all transaction IDs for transactions that exceed a given threshold amount.","solution":"from collections import defaultdict from datetime import datetime def process_transactions(transactions, start_date, end_date, threshold): Processes the transaction records to: 1. Calculate the total transaction amount for each customer. 2. Identify the customer with the highest total transaction amount. 3. Count the number of unique customers who made transactions within a specified date range. 4. List all transaction IDs for transactions that exceed a given threshold amount. total_per_customer = defaultdict(float) high_total_customer = None high_total_amount = 0 unique_customers = set() transaction_ids_above_threshold = [] start_date = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_date = datetime.strptime(end_date, \\"%Y-%m-%d\\") for trans_id, cust_id, amount, date in transactions: date_obj = datetime.strptime(date, \\"%Y-%m-%d\\") # Total transaction amount per customer total_per_customer[cust_id] += amount if total_per_customer[cust_id] > high_total_amount: high_total_amount = total_per_customer[cust_id] high_total_customer = cust_id # Unique customers within date range if start_date <= date_obj <= end_date: unique_customers.add(cust_id) # Transaction IDs above threshold if amount > threshold: transaction_ids_above_threshold.append(trans_id) result = { \\"total_per_customer\\": total_per_customer, \\"high_total_customer\\": (high_total_customer, high_total_amount), \\"unique_customers_count\\": len(unique_customers), \\"transaction_ids_above_threshold\\": transaction_ids_above_threshold } return result"},{"question":"Write a function `sum_of_squares(n)` that takes a positive integer `n` and returns the sum of the squares of all integers from 1 to `n` inclusive. Ensure the function includes error handling for non-integer and negative inputs. Example: ```python sum_of_squares(5) # returns 55 (1^2 + 2^2 + 3^2 + 4^2 + 5^2) sum_of_squares(-3) # returns \\"Input should be a positive integer.\\" sum_of_squares(\\"a\\") # returns \\"Input should be an integer.\\" ``` Constraints: - Ensure the function handles non-integer input gracefully by returning \\"Input should be an integer.\\" - Ensure the function handles negative integers by returning \\"Input should be a positive integer.\\"","solution":"def sum_of_squares(n): Returns the sum of the squares of all integers from 1 to n inclusive. Parameters: n (int): The upper limit of the range. Returns: int: The sum of the squares str: Error message if input is not a positive integer if not isinstance(n, int): return \\"Input should be an integer.\\" if n < 1: return \\"Input should be a positive integer.\\" return sum(i * i for i in range(1, n + 1))"},{"question":"Write a Python function to load data from a CSV file and filter rows based on a given condition using pandas. The function should: 1. Load the data from a given file path into a pandas DataFrame. 2. Accept a column name and a corresponding value as arguments. 3. Return a new DataFrame containing only the rows where the specified column\'s value matches the given value. 4. Include appropriate error handling for file not found errors or invalid column names. Example: ```python df = filter_csv(\'data.csv\', \'age\', 30) print(df.head()) ``` This function call should load data from \'data.csv\' and return a DataFrame containing only rows where the \'age\' column has a value of 30.","solution":"import pandas as pd def filter_csv(file_path, column_name, value): Loads data from a CSV file and filters rows based on a given condition. Parameters: file_path (str): The path to the CSV file. column_name (str): The name of the column to filter on. value : The value to be used for filtering. Returns: pd.DataFrame: A DataFrame containing the filtered rows. Raises: FileNotFoundError: If the file does not exist. KeyError: If the column name does not exist in the DataFrame. try: # Load data into DataFrame df = pd.read_csv(file_path) # Check if the column name exists if column_name not in df.columns: raise KeyError(f\\"The column \'{column_name}\' does not exist in the DataFrame.\\") # Filter rows based on the given condition filtered_df = df[df[column_name] == value] return filtered_df except FileNotFoundError: raise FileNotFoundError(f\\"The file \'{file_path}\' was not found.\\") except KeyError as e: raise e"},{"question":"Write a function that takes a string as input and returns the first non-repeating character in the string. If all characters repeat or the string is empty, return an appropriate message indicating so. The function should be efficient in terms of both time and space complexity.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters repeat or the string is empty, returns a message indicating so. if not s: return \\"The string is empty\\" char_count = {} # Count the occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return \\"All characters repeat\\""},{"question":"Write a Python function that takes a list of integers as input and returns a dictionary where the keys are the unique integers and the values are the number of times each integer appears in the list. Additionally, the function should return the integer that appears the most frequently. If there are multiple integers with the same frequency, return the smallest one among them.","solution":"def count_frequencies(numbers): Given a list of integers, returns a dictionary with keys as unique integers and values as the count of each integer. Also returns the integer that appears the most frequently (smallest one in case of a tie). Parameters: numbers (list): List of integers Returns: tuple: A dictionary with frequencies and the most frequently appearing integer from collections import defaultdict frequency_dict = defaultdict(int) for num in numbers: frequency_dict[num] += 1 most_frequent_num = min(frequency_dict, key=lambda x: (-frequency_dict[x], x)) return dict(frequency_dict), most_frequent_num"},{"question":"Create a function that takes a list of strings and returns a dictionary where the keys are the strings and the values are the lengths of those strings. Write a set of test cases to validate that this function works correctly. ```python def string_lengths(lst): return { s: len(s) for s in lst } # Test cases print(string_lengths([\\"apple\\", \\"banana\\", \\"cherry\\"])) # Expected output: {\'apple\': 5, \'banana\': 6, \'cherry\': 6} print(string_lengths([\\"one\\", \\"two\\", \\"three\\"])) # Expected output: {\'one\': 3, \'two\': 3, \'three\': 5} print(string_lengths([])) # Expected output: {} print(string_lengths([\\"a\\", \\"ab\\", \\"abc\\"])) # Expected output: {\'a\': 1, \'ab\': 2, \'abc\': 3} print(string_lengths([\\"\\", \\"a\\", \\"abcd\\"])) # Expected output: {\'\': 0, \'a\': 1, \'abcd\': 4} ```","solution":"def string_lengths(lst): Returns a dictionary where keys are the strings from the list and values are the lengths of those strings. return { s: len(s) for s in lst }"},{"question":"Write a function that takes a list of integers as input and returns a new list where each element is the sum of itself and all previous elements in the input list. For instance, if the input list is [1, 2, 3, 4], the output should be [1, 3, 6, 10]. The function should handle edge cases like an empty list and ensure the result is also an empty list in such a case.","solution":"def cumulative_sum(numbers): Takes a list of integers and returns a list where each element is the sum of itself and all previous elements in the input list. Parameters: numbers (list of int): The input list of integers. Returns: list of int: The cumulative sum list. if not numbers: return [] result = [numbers[0]] for i in range(1, len(numbers)): result.append(result[-1] + numbers[i]) return result"},{"question":"Construct a Python function that takes a string containing a mix of letters and digits, and returns a new string where all digits are moved to the end while preserving the order of both letters and digits. Additionally, if any characters in the original string are not letters or digits, they should be removed from the result. The function should handle both uppercase and lowercase letters.","solution":"def rearrange_string(s): Rearranges the given string such that all digits are moved to the end while preserving the order of both letters and digits, and non-alphanumeric characters are removed. letters = [] digits = [] for char in s: if char.isalpha(): letters.append(char) elif char.isdigit(): digits.append(char) return \'\'.join(letters + digits)"},{"question":"Given a string of integers, you are required to generate and return a new string where each integer is separated by a comma and a space. Additionally, each integer should be enclosed in parentheses. # Input: - A string of integers separated by spaces. For example: `\'1 2 3 4 5\'` # Output: - A new string where each integer is enclosed within parentheses and separated by a comma and a space. For example: `\'(1), (2), (3), (4), (5)\'` # Example: Input: `\'7 8 9 10\'` Output: `\'(7), (8), (9), (10)\'` # Constraints: - The string will contain at least one integer. - All integers should be positive and will fit within the range of standard integer type. Your Task: Write a function `format_integers(input_string)` that takes a string of integers as input and returns the formatted string as described.","solution":"def format_integers(input_string): Given a string of integers separated by spaces, return a new string where each integer is enclosed in parentheses and separated by a comma and a space. # Split the input string by spaces to get a list of integers in string format integers = input_string.split() # Enclose each integer in parentheses and join them with \', \' formatted_string = \', \'.join(f\\"({num})\\" for num in integers) return formatted_string"},{"question":"Create a function that takes a string as an input and returns a dictionary. The dictionary should have each unique character from the string as keys and the number of times each character appears in the string as values. Ignore any spaces in the input string and maintain case sensitivity. Example: Input: \\"Hello World\\" Output: {\'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'W\': 1, \'r\': 1, \'d\': 1}","solution":"def count_characters(s): Returns a dictionary with unique characters as keys and their frequency as values, ignoring spaces. char_count = {} for char in s: if char != \' \': if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"In Python programming, write a function that takes a string containing a sentence and returns a dictionary where the keys are the words in the sentence and the values are the lengths of those words. For example, given the input \\"Hello world this is a test\\", the function should return {\\"Hello\\": 5, \\"world\\": 5, \\"this\\": 4, \\"is\\": 2, \\"a\\": 1, \\"test\\": 4}.","solution":"def word_lengths(sentence): Takes a string containing a sentence and returns a dictionary where the keys are the words in the sentence and the values are the lengths of those words. words = sentence.split() return {word: len(word) for word in words}"},{"question":"You are given a list of integers that represent the daily temperatures recorded over a month. You need to write a function that calculates the number of days until a warmer temperature. If there is no future day with a warmer temperature, return 0 for that day. For example, given the list: `temperatures = [73, 74, 75, 71, 69, 72, 76, 73]` Your output should be: `[1, 1, 4, 2, 1, 1, 0, 0]` This means: 1. For the temperature `73` on day 1, it takes 1 day to reach `74`. 2. For `74` on day 2, it takes 1 day to reach `75`. 3. For `75` on day 3, it takes 4 days to reach `76`. 4. For `71` on day 4, it takes 2 days to reach `72`. 5. For `69` on day 5, it takes 1 day to reach `72`. 6. For `72` on day 6, it takes 1 day to reach `76`. 7. For `76` on day 7, there is no future day with a warmer temperature, so the output is `0`. 8. For `73` on day 8, there is no future day with a warmer temperature, so the output is `0`. You need to implement the function: ```python def dailyTemperatures(temperatures): # your solution here return result ``` Provide an efficient solution, considering the time complexity.","solution":"def dailyTemperatures(temperatures): Returns an array where each element represents the number of days until a warmer temperature. If there is no future day with a warmer temperature, return 0 for that day. n = len(temperatures) answer = [0] * n stack = [] # Indices of temperatures list for i, temp in enumerate(temperatures): while stack and temperatures[stack[-1]] < temp: prev_index = stack.pop() answer[prev_index] = i - prev_index stack.append(i) return answer"},{"question":"Given a list of integers and a target sum, the goal is to determine if any two distinct integers in the list can be summed up to reach the target sum. If such a pair exists, return the pair as a tuple; otherwise, return `None`. For instance: ```python numbers = [10, 15, 3, 7] target_sum = 17 ``` In this example, the pair `(10, 7)` sums up to `17`. Create a function `find_pair_with_sum(numbers, target_sum)` that takes a list of integers and a target sum as arguments and returns a tuple of two integers, or `None` if no such pair exists. **Example:** ```python def find_pair_with_sum(numbers, target_sum): # Your solution here # Test Cases print(find_pair_with_sum([10, 15, 3, 7], 17)) # should return (10, 7) print(find_pair_with_sum([1, 2, 3, 4, 5], 10)) # should return None print(find_pair_with_sum([5, 5, 5, 5], 10)) # should return (5, 5) # Additional test case to ensure returning the first valid pair found: print(find_pair_with_sum([4, 5, 1, 6], 9)) # should return (4, 5) ```","solution":"def find_pair_with_sum(numbers, target_sum): Finds two distinct numbers in the list that sum up to the target sum. Parameters: numbers (list): List of integers. target_sum (int): Target sum to find in the list. Returns: tuple: A tuple containing the pair of numbers that sum up to the target sum or None if no such pair exists. seen_numbers = set() for number in numbers: complement = target_sum - number if complement in seen_numbers: return (complement, number) seen_numbers.add(number) return None"},{"question":"Write a function that takes a list of strings as input and removes any duplicates while preserving the original order of elements. The function should return the modified list. For example, given the list `[\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"pear\\"]`, the function should return `[\\"apple\\", \\"banana\\", \\"orange\\", \\"pear\\"]`.","solution":"def remove_duplicates_preserve_order(input_list): Removes duplicates from the list while preserving the original order of elements. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function that takes a string representing a mathematical expression containing non-negative integers and operators (+, -, *, /) and evaluates the expression, respecting the order of operations (PEMDAS). Your function should not use the built-in `eval` function or similar built-in functions.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers and operators (+, -, *, /) and respects the order of operations (PEMDAS). This function does not use the built-in `eval` function or similar built-in functions. def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left // right) # Use integer division def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 # since there\'s an additional i += 1 in the loop elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while len(operators) != 0: apply_operator(operators, values) return values[-1]"},{"question":"The following code attempts to find the median of a list of integers. However, it contains logical errors. Identify and correct them. Ensure the code handles both odd and even length lists correctly. ```python def median(nums): nums.sort # Sorting the list # Check if the length of the list is odd or even if len(nums) % 2 == 1: median_value = nums[len(nums) / 2] # Middle value for odd length lists else: middle1 = nums[len(nums) / 2 - 1] # Middle left value for even length lists middle2 = nums[len(nums) / 2] # Middle right value for even length lists median_value = (middle1 + middle2) / 2 # Average of middle values return median_value # Sample Test print(median([3, 5, 1, 4, 2])) # Should return 3 print(median([1, 2, 3, 4, 5, 6])) # Should return 3.5 ``` Identify and fix the errors in the code above.","solution":"def median(nums): nums.sort() # Sorting the list # Check if the length of the list is odd or even if len(nums) % 2 == 1: median_value = nums[len(nums) // 2] # Middle value for odd length lists else: middle1 = nums[len(nums) // 2 - 1] # Middle left value for even length lists middle2 = nums[len(nums) // 2] # Middle right value for even length lists median_value = (middle1 + middle2) / 2.0 # Average of middle values return median_value"},{"question":"Write a Python function named `find_frequent_words` that takes a list of strings called `words` and an integer `k` and returns the `k` most frequent words from the list. If there is a tie, return the words with the smallest alphabetical order first. To solve this problem, you should: 1. Count the frequency of each word in the list. 2. Sort the words first by their frequencies in descending order, and then by their alphabetical order in ascending order. 3. Return the top `k` words as a list. Example: ```python words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] k = 2 find_frequent_words(words, k) ``` Output: ```python [\'apple\', \'banana\'] ``` Your implementation should handle edge cases, such as an empty list or a value of `k` that is larger than the number of distinct words in the list.","solution":"from collections import Counter def find_frequent_words(words, k): Finds the k most frequent words from the list. If there is a tie, return the words with the smallest alphabetical order first. Parameters: words (list of str): List of words k (int): Number of top frequent words to return Returns: list of str: List of k most frequent words # Count the frequency of each word word_counts = Counter(words) # Sort words by frequency (descending) and then alphabetically (ascending) sorted_words = sorted(word_counts.keys(), key=lambda word: (-word_counts[word], word)) # Return the top k words return sorted_words[:k]"},{"question":"Write a function that takes a string as input and extracts all valid IPv4 addresses. An IPv4 address is valid if it: 1. Consists of four decimal numbers separated by periods (e.g., 192.168.1.1). 2. Each decimal number is between 0 and 255, without leading zeros (e.g., \\"192\\" is valid but \\"0192\\" is not). Additionally, after extracting the valid IP addresses, classify them into two categories: - Private IP addresses (e.g., those beginning with 10., 172.16-31., or 192.168.). - Public IP addresses (all others). Return a dictionary with two keys, `\\"private\\"` and `\\"public\\"`, where the values are lists of the respective classified IP addresses.","solution":"import re def extract_and_classify_ips(s): Extracts valid IPv4 addresses from the input string and classifies them into private and public IP addresses. Args: s (str): Input string containing potential IP addresses. Returns: dict: A dictionary with keys \\"private\\" and \\"public\\", containing lists of respective classified IP addresses. ip_pattern = re.compile(r\'b(25[0-5]|2[0-4]d|1d{2}|d{1,2}).(25[0-5]|2[0-4]d|1d{2}|d{1,2}).(25[0-5]|2[0-4]d|1d{2}|d{1,2}).(25[0-5]|2[0-4]d|1d{2}|d{1,2})b\') all_matches = ip_pattern.findall(s) ips = [\'.\'.join(match) for match in all_matches] private_ips = [] public_ips = [] for ip in ips: octets = list(map(int, ip.split(\'.\'))) if (octets[0] == 10 or (octets[0] == 172 and 16 <= octets[1] <= 31) or (octets[0] == 192 and octets[1] == 168)): private_ips.append(ip) else: public_ips.append(ip) return {\'private\': private_ips, \'public\': public_ips}"},{"question":"Katie can find out the exact number of working days she will not be attending by using the following additive expression: 5 days/week * 3 weeks can be represented as 5 + 5 + 5. This shows the count for each working day for every week she is missing.","solution":"def total_working_days_per_week(number_of_missing_weeks): Returns the total number of working days Katie will miss. Parameters: number_of_missing_weeks (int): The number of weeks Katie will be absent. Returns: int: The total number of working days Katie will miss. WORKING_DAYS_PER_WEEK = 5 return WORKING_DAYS_PER_WEEK * number_of_missing_weeks"},{"question":"Create a function that takes a list of integers and an integer `k`, and returns the maximum sum of any contiguous subarray of length `k`. For example: * Input: `arr = [1, 2, 3, 4, 5]`, `k = 2` * Output: `9` (because the subarray [4, 5] has the maximum sum with `4 + 5 = 9`) * Input: `arr = [2, 1, 5, 1, 3, 2]`, `k = 3` * Output: `9` (because the subarray [5, 1, 3] has the maximum sum with `5 + 1 + 3 = 9`) * Input: `arr = [2, 3, 4, 1, 5]`, `k = 2` * Output: `7` (because the subarray [3, 4] or [4, 3] has the maximum sum with `3 + 4 = 7`) Test your function with various input lists and values of `k` ensuring edge cases such as an empty array, `k` greater than the length of the array, and `k` equal to 1.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any contiguous subarray of length k. if not arr or k <= 0 or k > len(arr): return 0 max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a Python script that reads a CSV file and performs the following operations: 1. Calculate the mean and median of a specified numerical column. 2. Fill in the missing values in this column with the calculated mean. 3. Normalize the column values to a range between 0 and 1. 4. Save the modified DataFrame to a new CSV file. Ensure that the script can accept command-line arguments for the input file path, the column name to process, and the output file path. Use appropriate libraries and handle exceptions gracefully.","solution":"import pandas as pd import numpy as np import argparse from sklearn.preprocessing import MinMaxScaler def process_csv(input_file, column, output_file): # Read CSV file try: df = pd.read_csv(input_file) except Exception as e: raise Exception(f\\"Error reading the input file: {e}\\") # Check if the specified column exists if column not in df.columns: raise Exception(f\\"The column \'{column}\' does not exist in the DataFrame.\\") # Calculate mean and median of the column mean = df[column].mean() median = df[column].median() # Fill missing values in the column with the mean df[column].fillna(mean, inplace=True) # Normalize the column values to a range between 0 and 1 scaler = MinMaxScaler() df[[column]] = scaler.fit_transform(df[[column]]) # Save the modified DataFrame to a new CSV file try: df.to_csv(output_file, index=False) except Exception as e: raise Exception(f\\"Error writing the output file: {e}\\") return mean, median"},{"question":"Write a function that takes an integer array as input and returns the length of the longest contiguous subarray with an equal number of 0s and 1s. If the array does not contain any such subarray, the function should return -1. Consider the following while designing your function: - Your function should be efficient and optimized for performance, ideally with a time complexity better than O(n^2). - Be sure to handle cases where the input array is empty or consists entirely of 0s or 1s, and return -1 in such scenarios. - Enhance your solution to handle large input sizes within feasible time limits. For example: ```python def find_max_length(arr): # Your code here # Example test cases print(find_max_length([0, 1, 0, 1])) # Output: 4 print(find_max_length([0, 0, 1, 0, 1, 1])) # Output: 6 print(find_max_length([0, 0, 0])) # Output: -1 print(find_max_length([])) # Output: -1 ```","solution":"def find_max_length(arr): if not arr: return -1 # Transform the array, considering 0 as -1 transformed = [-1 if x == 0 else 1 for x in arr] # This will store the first occurrence of each prefix sum prefix_sum_map = {} prefix_sum = 0 max_length = 0 for i in range(len(transformed)): prefix_sum += transformed[i] if prefix_sum == 0: max_length = i + 1 elif prefix_sum in prefix_sum_map: max_length = max(max_length, i - prefix_sum_map[prefix_sum]) else: prefix_sum_map[prefix_sum] = i return max_length if max_length != 0 else -1"},{"question":"Write a Python program that reads a JSON formatted text file containing records of multiple individuals. Each record includes attributes such as name, age, city, occupation, and salary. The program must perform the following tasks: 1. Filter and display records of individuals whose salaries are above the 75th percentile. 2. Group these individuals by their city, then for each city: - Calculate and display the average salary. - List the names of individuals in the city in descending order of their salaries. 3. Provide a summary showing the total number of cities represented in the filtered data and the total number of individuals across all these cities. For example, if the data has a person named Alice with a salary of 100,000 in New York, and she is above the 75th percentile, the program should show details of Alice along with others above the 75th percentile, grouped by their respective cities. Handle any errors related to file operations, JSON parsing, or data processing gracefully and ensure the program can handle large files efficiently.","solution":"import json import numpy as np from collections import defaultdict def read_json_file(file_path): try: with open(file_path, \'r\') as file: data = json.load(file) return data except FileNotFoundError: print(\\"Error: The file was not found.\\") return [] except json.JSONDecodeError: print(\\"Error: JSON decoding failed.\\") return [] def compute_75th_percentile(data): salaries = [person[\'salary\'] for person in data] percentile_75 = np.percentile(salaries, 75) return percentile_75 def filter_above_75th_percentile(data, percentile_75): filtered_data = [person for person in data if person[\'salary\'] > percentile_75] return filtered_data def group_by_city(data): city_groups = defaultdict(list) for person in data: city_groups[person[\'city\']].append(person) return city_groups def compute_city_statistics(grouped_data): statistics = {} for city, people in grouped_data.items(): average_salary = np.mean([person[\'salary\'] for person in people]) sorted_people = sorted(people, key=lambda x: x[\'salary\'], reverse=True) statistics[city] = { \'average_salary\': average_salary, \'names\': [person[\'name\'] for person in sorted_people] } return statistics def summary(grouped_data): num_cities = len(grouped_data) num_individuals = sum(len(people) for people in grouped_data.values()) return num_cities, num_individuals # Main function to process and display data def main(file_path): data = read_json_file(file_path) if not data: return percentile_75 = compute_75th_percentile(data) filtered_data = filter_above_75th_percentile(data, percentile_75) grouped_data = group_by_city(filtered_data) city_statistics = compute_city_statistics(grouped_data) # Display filtered data and statistics print(\\"Filtered Data Grouped by City:\\") for city, stats in city_statistics.items(): print(f\\"City: {city}\\") print(f\\"Average Salary: {stats[\'average_salary\']:.2f}\\") print(\\"Names in Descending Order of Salary:\\", \', \'.join(stats[\'names\'])) print() num_cities, num_individuals = summary(grouped_data) print(f\\"Total number of cities represented: {num_cities}\\") print(f\\"Total number of individuals: {num_individuals}\\")"},{"question":"Write a program that takes a list of strings and returns a new list containing only the palindromic strings from the original list. A palindromic string is a string that reads the same backward as forward. For example, \'level\' and \'rotor\' are palindromes, while \'test\' is not. Implement this function in Python. # Function Signature ```python def find_palindromes(strings: list) -> list: # your code here ``` # Input - A list of strings `strings`, where each string `s` (1 <= len(s) <= 100) # Output - A new list containing only the palindromic strings from the `strings` list. # Example ```python input_list = [\\"level\\", \\"test\\", \\"rotor\\", \\"hello\\", \\"mom\\"] print(find_palindromes(input_list)) # Output: [\\"level\\", \\"rotor\\", \\"mom\\"] ```","solution":"def find_palindromes(strings: list) -> list: Returns a new list containing only the palindromic strings from the original list. return [s for s in strings if s == s[::-1]]"},{"question":"Given a list of mixed data types (integers, strings, and floats), write a function that separates the data into three different lists based on their type. Then, return a dictionary where the keys are the data types (\\"integers\\", \\"strings\\", \\"floats\\") and the values are the corresponding lists of separated data. Example input: [1, \\"apple\\", 3.14, 2, \\"banana\\", 5.5, \\"carrot\\", 7] Expected output: {\'integers\': [1, 2, 7], \'strings\': [\'apple\', \'banana\', \'carrot\'], \'floats\': [3.14, 5.5]}","solution":"def separate_by_type(mixed_list): Separates a list of mixed data types into three lists based on their type, and returns a dictionary with the separated data. Parameters: mixed_list (list): A list containing integers, strings, and floats. Returns: dict: A dictionary with keys \'integers\', \'strings\', and \'floats\', and values as the corresponding lists of separated data. result = {\'integers\': [], \'strings\': [], \'floats\': []} for item in mixed_list: if isinstance(item, int): result[\'integers\'].append(item) elif isinstance(item, float): result[\'floats\'].append(item) elif isinstance(item, str): result[\'strings\'].append(item) return result"},{"question":"You are given a list of dictionaries representing students\' scores in different subjects. Each dictionary contains the student\'s name and their scores in Mathematics, Physics, Chemistry, Biology, and English. Write a Python function that reads this list and returns a new dictionary with student names as keys and their average score across all subjects as values. Additionally, compute the class average for each subject and return this as a separate dictionary. Finally, plot a bar chart for each student\'s average score using Matplotlib. ```python students_scores = [ {\\"name\\": \\"Alice\\", \\"Mathematics\\": 85, \\"Physics\\": 78, \\"Chemistry\\": 88, \\"Biology\\": 92, \\"English\\": 80}, {\\"name\\": \\"Bob\\", \\"Mathematics\\": 75, \\"Physics\\": 85, \\"Chemistry\\": 89, \\"Biology\\": 90, \\"English\\": 78}, {\\"name\\": \\"Charlie\\", \\"Mathematics\\": 95, \\"Physics\\": 92, \\"Chemistry\\": 94, \\"Biology\\": 85, \\"English\\": 88}, {\\"name\\": \\"David\\", \\"Mathematics\\": 65, \\"Physics\\": 70, \\"Chemistry\\": 75, \\"Biology\\": 80, \\"English\\": 72}, {\\"name\\": \\"Eva\\", \\"Mathematics\\": 88, \\"Physics\\": 82, \\"Chemistry\\": 84, \\"Biology\\": 89, \\"English\\": 86} ] def calculate_averages_and_plot(students_scores): # Function implementation here ```","solution":"import matplotlib.pyplot as plt def calculate_averages_and_plot(students_scores): Calculate the average score of each student and the class average for each subject. Also, plot a bar chart for each student\'s average score. student_averages = {} subject_totals = { \\"Mathematics\\": 0, \\"Physics\\": 0, \\"Chemistry\\": 0, \\"Biology\\": 0, \\"English\\": 0 } num_students = len(students_scores) for student in students_scores: name = student[\\"name\\"] avg_score = sum( student[subject] for subject in subject_totals ) / len(subject_totals) student_averages[name] = avg_score for subject in subject_totals: subject_totals[subject] += student[subject] class_averages = { subject: total / num_students for subject, total in subject_totals.items() } # Plotting plt.figure(figsize=(10, 6)) plt.bar(student_averages.keys(), student_averages.values()) plt.xlabel(\'Students\') plt.ylabel(\'Average Score\') plt.title(\'Average Scores of Students\') plt.xticks(rotation=45) plt.show() return student_averages, class_averages"},{"question":"Create a function that takes a matrix (2D list) of integers and returns the maximum sum of any hourglass pattern in the matrix. An hourglass pattern is defined as follows: ``` a b c d e f g ``` The function should handle matrices where the number of rows and columns are at least 3. If the input matrix has less than 3 rows or columns, return 0. Example: Input: ``` [ [1, 2, 3, 0, 0], [0, 0, 0, 0, 0], [1, 1, 1, 0, 0], [0, 0, 2, 4, 4], [0, 0, 0, 2, 0], ] ``` Output: 10 Explanation: The maximum sum hourglass is: ``` 2 4 4 2 0 2 0 ``` The function should be efficient both in time and space complexity.","solution":"def max_hourglass_sum(matrix): Finds the maximum hourglass sum in a given 2D list (matrix). An hourglass sum is defined as the sum of matrix elements that form an hourglass shape. Parameters: matrix (list of list of int): 2D list representing the input matrix. Returns: int: The maximum hourglass sum found in the matrix. If the matrix has less than 3 rows or columns, returns 0. rows = len(matrix) cols = len(matrix[0]) if rows > 0 else 0 if rows < 3 or cols < 3: return 0 max_sum = float(\'-inf\') for i in range(rows - 2): for j in range(cols - 2): hourglass_sum = (matrix[i][j] + matrix[i][j+1] + matrix[i][j+2] + matrix[i+1][j+1] + + matrix[i+2][j] + matrix[i+2][j+1] + matrix[i+2][j+2]) if hourglass_sum > max_sum: max_sum = hourglass_sum return max_sum"},{"question":"Implement a function to determine the longest increasing subsequence (LIS) in a list of integers. The function should return the length of the LIS. The subsequence is not required to be contiguous, but the elements in the subsequence must appear in the same order as they do in the original list. For example, given the list [10, 9, 2, 5, 3, 7, 101, 18], the LIS is [2, 3, 7, 101], which has a length of 4. Begin with the provided function prototype: ```python def longest_increasing_subsequence(nums): ```","solution":"def longest_increasing_subsequence(nums): Finds the length of the longest increasing subsequence in a list of integers. :param nums: List of integers :return: Length of the longest increasing subsequence if not nums: return 0 dp = [1] * len(nums) # Initialize dp array to store the length of LIS ending at each index for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Create a function that computes the minimum number of coins needed to make change for a given amount of money. The available coin denominations are given as input and it is assured that they are positive. If it is not possible to make exact change, return -1. Write a function `min_coins` that takes an integer `amount` and a list of integers `coins` as arguments and returns an integer. from typing import List def min_coins(amount: int, coins: List[int]) -> int: Given an amount and a list of coin denominations, determine the minimum number of coins needed to make the amount. Return -1 if it is not possible to make the amount with the given coins. >>> min_coins(11, [1, 2, 5]) 3 >>> min_coins(3, [2]) -1 >>> min_coins(0, [1, 2, 5]) 0","solution":"from typing import List def min_coins(amount: int, coins: List[int]) -> int: Given an amount and a list of coin denominations, determine the minimum number of coins needed to make the amount. Return -1 if it is not possible to make the amount with the given coins. # Create a list to store the minimum number of coins for each amount dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 # 0 coins are needed to make the amount 0 # Compute the minimum coins required for all amounts up to the given amount for i in range(1, amount + 1): for coin in coins: if i >= coin: dp[i] = min(dp[i], dp[i - coin] + 1) # If dp[amount] is still float(\'inf\'), it means we cannot make that amount return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"Task You have been hired to design an MVP (Minimum Viable Product) service for an e-commerce platform. The goal is to create a platform where users can list, browse, and purchase items, as well as interact with other users through reviews and ratings. Product Goals ```python [ \\"Build a user-friendly platform for showcasing and purchasing items\\", \\"Implement social features to create an active user community\\", \\"Ensure seamless and secure transactions\\" ] ``` User Stories ```python [ \\"As a user, I want to browse items by category\\", \\"As a user, I want to easily list items for sale\\", \\"As a user, I want to securely purchase items\\", \\"As a user, I want to see and leave reviews for items\\", \\"As a user, I want to rate items I have bought\\" ] ``` Requirement Analysis The product should be a web application that allows users to list items for sale, browse items by category, purchase items securely, and interact with other users through reviews and ratings. The application should be optimized for usability and performance. Requirement Pool ```python [ (\\"User registration and profile creation\\", \\"P0\\"), (\\"Item listing functionality\\", \\"P0\\"), (\\"Item browsing by category\\", \\"P0\\"), (\\"Secure transactions for purchases\\", \\"P0\\"), (\\"User reviews and ratings\\", \\"P1\\") ] ``` Example User Interfaces - **Home Page**: Displaying featured items and categories. - **Item Details Page**: Showing detailed information about an item, reviews, and ratings. - **User Profile Page**: Allowing users to view and manage their listings, purchases, and reviews. Python package names ```python \\"ecommerce_platform\\" ``` File list ```python [ \\"main.py\\", \\"settings.py\\", \\"urls.py\\", \\"models.py\\", \\"views.py\\", \\"serializers.py\\", \\"consumers.py\\", \\"tests.py\\", \\"requirements.txt\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class User{ +str username +str email +str password +str profile_picture +list purchase_history } class Item{ +str title +str description +float price +str category +str image_url +User seller +list reviews +list ratings } class Review{ +str text +User reviewer +Item item } class Rating{ +int score +User reviewer +Item item } User \\"1\\" -- \\"*\\" Item: sells User \\"1\\" -- \\"*\\" Review: writes User \\"1\\" -- \\"*\\" Rating: gives Item \\"1\\" -- \\"*\\" Review: has Item \\"1\\" -- \\"*\\" Rating: has ``` Program call flow ```mermaid sequenceDiagram participant U as User participant I as Item participant R as Review participant Ra as Rating U->>I: list(item_details) I->>U: notify(listing successful) U->>I: browse(category) I->>U: display(items) U->>I: purchase(item) I->>U: notify(purchase successful) U->>R: leave(review) R->>U: notify(review successful) U->>Ra: rate(score) Ra->>U: notify(rating successful) ``` Full API spec ```python openapi: 3.0.0 info: title: E-Commerce Platform API version: 1.0.0 paths: /users: get: summary: Get all users post: summary: Create a new user /users/{username}: get: summary: Get a user by username put: summary: Update a user by username delete: summary: Delete a user by username /items: get: summary: Get all items post: summary: List a new item /items/{id}: get: summary: Get an item by id put: summary: Update an item by id delete: summary: Delete an item by id /reviews: get: summary: Get all reviews post: summary: Post a new review /reviews/{id}: get: summary: Get a review by id put: summary: Update a review by id delete: summary: Delete a review by id /ratings: get: summary: Get all ratings post: summary: Post a new rating /ratings/{id}: get: summary: Get a rating by id put: summary: Update a rating by id delete: summary: Delete a rating by id ``` Logic Analysis ```python [ (\\"main.py\\", \\"Contains the main entry point for the application.\\"), (\\"settings.py\\", \\"Contains all the configuration settings for the application.\\"), (\\"urls.py\\", \\"Defines all the URL routes for the application.\\"), (\\"models.py\\", \\"Defines the User, Item, Review, and Rating data models.\\"), (\\"views.py\\", \\"Handles the request/response logic for the application.\\"), (\\"serializers.py\\", \\"Handles the serialization/deserialization of data for the API.\\"), (\\"consumers.py\\", \\"Handles real-time notifications.\\"), (\\"tests.py\\", \\"Contains all the test cases for the application.\\"), (\\"requirements.txt\\", \\"Lists all the Python packages required by the application.\\") ] ``` Task list ```python [ \\"requirements.txt\\", \\"settings.py\\", \\"models.py\\", \\"serializers.py\\", \\"views.py\\", \\"urls.py\\", \\"consumers.py\\", \\"main.py\\", \\"tests.py\\" ] ``` Shared Knowledge ```python The \'settings.py\' file contains all the configuration settings for the application, including the database and channels settings. The \'models.py\' file defines the User, Item, Review, and Rating data models. Each model has fields and methods that correspond to the columns of a database table. The \'serializers.py\' file handles the serialization and deserialization of data for the API. It provides a way of converting complex data types, such as custom model instances, into Python datatypes that can then be easily rendered into JSON. The \'views.py\' file contains the logic that handles the requests and responses of the API. The \'urls.py\' file maps URL routes to the corresponding views. The \'consumers.py\' file handles WebSocket connections for real-time notifications. It uses Django Channels, which is a project that extends Django to handle WebSockets, HTTP2, and other protocols. ``` Format example ----- Code: main.py ```python main.py ... ``` -----","solution":"class User: def __init__(self, username, email, password, profile_picture=None): self.username = username self.email = email self.password = password self.profile_picture = profile_picture self.purchase_history = [] self.listings = [] self.reviews = [] self.ratings = [] class Item: def __init__(self, title, description, price, category, image_url, seller): self.title = title self.description = description self.price = price self.category = category self.image_url = image_url self.seller = seller self.reviews = [] self.ratings = [] class Review: def __init__(self, text, reviewer, item): self.text = text self.reviewer = reviewer self.item = item class Rating: def __init__(self, score, reviewer, item): self.score = score self.reviewer = reviewer self.item = item def add_user(username, email, password, profile_picture=None): return User(username, email, password, profile_picture) def add_item(title, description, price, category, image_url, seller): item = Item(title, description, price, category, image_url, seller) seller.listings.append(item) return item def browse_items_by_category(items, category): return [item for item in items if item.category == category] def purchase_item(user, item): user.purchase_history.append(item) return \\"Purchase successful\\" def leave_review(user, item, text): review = Review(text, user, item) user.reviews.append(review) item.reviews.append(review) return review def leave_rating(user, item, score): rating = Rating(score, user, item) user.ratings.append(rating) item.ratings.append(rating) return rating"},{"question":"Given a list of integers representing stock prices on different days, write a function to find and return the maximum profit you can achieve from making at most two transactions. A transaction consists of buying and then selling one share of the stock. Note that you cannot engage in multiple transactions simultaneously; you must sell the stock before you buy again. Example 1: ``` Input: prices = [3,3,5,0,0,3,1,4] Output: 6 Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. ``` Example 2: ``` Input: prices = [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Note that you cannot buy on day 1, sell on day 5, and then buy again. Hence, you can only complete at most one transaction. ``` Example 3: ``` Input: prices = [7,6,4,3,1] Output: 0 Explanation: In this case, no transaction is done, i.e., the max profit = 0. ``` Constraints: - You can assume that prices is a non-empty list with at least one element. - The length of the prices list does not exceed `10^5`. Here is a piece of erroneous code for reference: ```python def maxProfit(prices): if not prices: return 0 first_buy, second_buy = float(\'inf\'), float(\'inf\') first_profit, second_profit = 0, 0 for price in prices: first_buy = min(first_buy, price) first_profit = max(first_profit, price - first_buy) second_buy = min(second_buy, price - first_profit) second_profit = max(second_profit, price - second_buy) return second_profit ``` This code is meant to calculate the maximum profit from at most two transactions but it has a logical error. Can you spot and correct it?","solution":"def maxProfit(prices): if not prices: return 0 n = len(prices) max_profit = 0 # Arrays to store the max profit with one transaction up to that day left_profit = [0] * n right_profit = [0] * n # Calculate max profit with only one transaction from the left min_price = prices[0] for i in range(1, n): left_profit[i] = max(left_profit[i - 1], prices[i] - min_price) min_price = min(min_price, prices[i]) # Calculate max profit with only one transaction from the right max_price = prices[-1] for i in range(n - 2, -1, -1): right_profit[i] = max(right_profit[i + 1], max_price - prices[i]) max_price = max(max_price, prices[i]) # Calculate the max profit with at most two transactions for i in range(n): max_profit = max(max_profit, left_profit[i] + right_profit[i]) return max_profit"},{"question":"Create a function named \'moving_average\' that takes a list of integers and a window size as inputs. The function should return a list containing the moving average of the integers over the defined window size. The moving average is calculated by taking the sum of a sliding window of integers and dividing it by the window size at each slide. Use float division and round each average to two decimal places. If the number of integers is less than the window size, the function should return an empty list. For example: ```python moving_average([1, 2, 3, 4, 5], 3) # returns [2.0, 3.0, 4.0] moving_average([10, 20, 30, 40, 50, 60], 2) # returns [15.0, 25.0, 35.0, 45.0, 55.0] moving_average([1, 1, 1, 1], 5) # returns [] moving_average([3, 5, 7, 9], 1) # returns [3.0, 5.0, 7.0, 9.0] ```","solution":"def moving_average(nums, window_size): Calculate the moving average of the integers in the list over the defined window size. Args: nums (list of int): List of integers. window_size (int): Size of the sliding window. Returns: list of float: List containing the moving averages, rounded to two decimal places. if len(nums) < window_size: return [] averages = [] for i in range(len(nums) - window_size + 1): window = nums[i:i + window_size] average = round(sum(window) / window_size, 2) averages.append(average) return averages"},{"question":"Create a Python script that reads data from a CSV file and generates a summary report. The report should include: 1. The total number of rows. 2. The average of a specified numeric column. 3. The maximum value in the specified numeric column. 4. The minimum value in the specified numeric column. The script should accept the path to the CSV file and the column name as command-line arguments. Example Usage: ```sh python summary_report.py data.csv column_name ```","solution":"import sys import pandas as pd def generate_summary_report(csv_file, column_name): # Read the CSV file into a pandas DataFrame df = pd.read_csv(csv_file) # Calculate required values for the report total_rows = df.shape[0] average_value = df[column_name].mean() maximum_value = df[column_name].max() minimum_value = df[column_name].min() # Print summary report print(f\\"Summary Report for column \'{column_name}\':\\") print(f\\"Total number of rows: {total_rows}\\") print(f\\"Average value: {average_value:.2f}\\") print(f\\"Maximum value: {maximum_value}\\") print(f\\"Minimum value: {minimum_value}\\") if __name__ == \'__main__\': # Check if the correct number of arguments has been provided if len(sys.argv) != 3: print(\\"Usage: python summary_report.py <csv_file> <column_name>\\") else: csv_file = sys.argv[1] column_name = sys.argv[2] generate_summary_report(csv_file, column_name)"},{"question":"Implement a class `MinStack` that supports the following operations in constant time: `push(x)`, `pop()`, `top()`, and `getMin()`. - `push(x)` — Pushes element x onto the stack. - `pop()` — Removes the element on the top of the stack. - `top()` — Gets the top element. - `getMin()` — Retrieves the minimum element in the stack. Your class should maintain the stack\'s functionality while providing `getMin()` in O(1) time. **Example:** ```python minStack = MinStack() minStack.push(-2) minStack.push(0) minStack.push(-3) print(minStack.getMin()) # Returns -3 minStack.pop() print(minStack.top()) # Returns 0 print(minStack.getMin()) # Returns -2 ``` **Implementation Tips:** - Consider using two stacks: one for the actual stack elements and another to keep track of the minimum values.","solution":"class MinStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, x: int) -> None: self.stack.append(x) if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) def pop(self) -> None: if self.stack: if self.stack[-1] == self.min_stack[-1]: self.min_stack.pop() self.stack.pop() def top(self) -> int: if self.stack: return self.stack[-1] return None # Or raise an exception def getMin(self) -> int: if self.min_stack: return self.min_stack[-1] return None # Or raise an exception"},{"question":"Develop a function in Python that accepts a list of integers as its parameter. This function should return a new list containing only those integers that are even. Ensure your solution gracefully handles the scenario when the input list is empty, returning an empty list in such cases.","solution":"def filter_even_numbers(numbers): Returns a list of even numbers from the provided list. Parameters: numbers (list): A list of integers. Returns: list: A list of even integers. return [num for num in numbers if num % 2 == 0]"},{"question":"You are given a list of numbers representing the elevation of terrain at various points. Write a Python function that calculates the total water that can be trapped after a rainfall. The water is trapped between the higher terrain elevations. Implement the function `def trap_rain_water(elevations: List[int]) -> int:`, which takes a list of non-negative integers representing the elevations and returns the total amount of trapped water. Example: ``` Input: [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 ``` Explanation: The elevation map is represented as bars in an array where the width of each bar is 1 unit. It contains 6 units of water. You should calculate the total trapped water using efficient algorithms like two-pointer approach or dynamic programming for optimal performance.","solution":"from typing import List def trap_rain_water(elevations: List[int]) -> int: n = len(elevations) if n == 0: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = elevations[0] for i in range(1, n): left_max[i] = max(left_max[i-1], elevations[i]) right_max[n-1] = elevations[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], elevations[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - elevations[i] return trapped_water"},{"question":"Create a function that takes an array of integers and returns a new array where each element is the product of all the original elements except the one at the same index. You should not use division in your solution. Write efficient code that handles the input size constraints. Example: ```python input: [1, 2, 3, 4] output: [24, 12, 8, 6] ```","solution":"def product_except_self(nums): Returns a new array where each element is the product of all the original elements except the one at the same index. length = len(nums) result = [1] * length left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Write a program that takes a list of integers and a target sum as inputs. Your task is to determine if there are any three distinct elements in the list that add up to the target sum. If such elements exist, return `True`; otherwise, return `False`. Example input: List = [1, 4, 45, 6, 10, 8] Target sum = 22 Example output: True (because 4 + 10 + 8 = 22)","solution":"def three_sum(nums, target): Returns True if there are three distinct elements in \'nums\' that add up to \'target\', otherwise returns False. nums.sort() n = len(nums) for i in range(n - 2): # To prevent duplication if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == target: return True elif total < target: left += 1 else: right -= 1 return False"},{"question":"Write a function that takes a list of integers and returns the first integer that is not consecutive. If the entire list is consecutive, return `None`. For example, given the list `[3, 4, 5, 7, 8, 9]`, the function should return `7` as it breaks the consecutive sequence after `5`. If the list is `[1, 2, 3, 4]`, the function should return `None`.","solution":"def find_first_non_consecutive(nums): Returns the first integer in the list that is not consecutive. If all integers are consecutive, returns None. if len(nums) < 2: return None for i in range(1, len(nums)): if nums[i] != nums[i-1] + 1: return nums[i] return None"},{"question":"Create a Python class called `Polynomial` that represents a polynomial in one variable. Your class should support: 1. Initialization with coefficients in the form of a list, where the index represents the power of the variable. 2. Addition, subtraction, and multiplication with another `Polynomial` object. 3. Evaluation at a given point. 4. String representation of the polynomial for easy reading. Additionally, demonstrate the use of your class by: - Creating two polynomial objects. - Adding, subtracting, and multiplying these polynomials. - Evaluating each polynomial at a specified value of the variable. - Printing out the resulting polynomial after each operation and their evaluations to verify correctness of your implementation. Example: ```python # Creating two polynomial objects p1 = Polynomial([1, 2, 3]) p2 = Polynomial([0, -1, 4]) # Adding polynomials p3 = p1 + p2 # Subtracting polynomials p4 = p1 - p2 # Multiplying polynomials p5 = p1 * p2 # Evaluating polynomials at x = 2 val_p1 = p1.evaluate(2) val_p2 = p2.evaluate(2) # Printing results print(f\\"p1: {p1}\\") print(f\\"p2: {p2}\\") print(f\\"p1 + p2: {p3}\\") print(f\\"p1 - p2: {p4}\\") print(f\\"p1 * p2: {p5}\\") print(f\\"p1 evaluated at x=2: {val_p1}\\") print(f\\"p2 evaluated at x=2: {val_p2}\\") ```","solution":"class Polynomial: def __init__(self, coefficients): self.coefficients = coefficients def __add__(self, other): max_len = max(len(self.coefficients), len(other.coefficients)) result = [0] * max_len for i in range(max_len): if i < len(self.coefficients): result[i] += self.coefficients[i] if i < len(other.coefficients): result[i] += other.coefficients[i] return Polynomial(result) def __sub__(self, other): max_len = max(len(self.coefficients), len(other.coefficients)) result = [0] * max_len for i in range(max_len): if i < len(self.coefficients): result[i] += self.coefficients[i] if i < len(other.coefficients): result[i] -= other.coefficients[i] return Polynomial(result) def __mul__(self, other): result = [0] * (len(self.coefficients) + len(other.coefficients) - 1) for i in range(len(self.coefficients)): for j in range(len(other.coefficients)): result[i + j] += self.coefficients[i] * other.coefficients[j] return Polynomial(result) def evaluate(self, x): result = 0 power = 1 for coefficient in self.coefficients: result += coefficient * power power *= x return result def __str__(self): terms = [] for power, coefficient in enumerate(self.coefficients): if coefficient != 0: if power == 0: terms.append(f\\"{coefficient}\\") elif power == 1: terms.append(f\\"{coefficient}x\\") else: terms.append(f\\"{coefficient}x^{power}\\") return \\" + \\".join(terms) # Demonstration p1 = Polynomial([1, 2, 3]) p2 = Polynomial([0, -1, 4]) p3 = p1 + p2 p4 = p1 - p2 p5 = p1 * p2 val_p1 = p1.evaluate(2) val_p2 = p2.evaluate(2) print(f\\"p1: {p1}\\") print(f\\"p2: {p2}\\") print(f\\"p1 + p2: {p3}\\") print(f\\"p1 - p2: {p4}\\") print(f\\"p1 * p2: {p5}\\") print(f\\"p1 evaluated at x=2: {val_p1}\\") print(f\\"p2 evaluated at x=2: {val_p2}\\")"},{"question":"Formulate a Python function to process a list of mixed data types (integers, strings, and floats). The function should segregate integers, strings, and floats into separate lists and return a dictionary where the keys are \\"integers\\", \\"strings\\", and \\"floats\\", and the values are the corresponding lists. Handle any edge cases such as empty lists. If any non-supported data type is encountered, raise a ValueError with an appropriate message. For example: ``` python input_list = [1, \'hello\', 3.5, 4, \'world\', 2.718] output = segregate_data_types(input_list) print(output) # Output should be: {\'integers\': [1, 4], \'strings\': [\'hello\', \'world\'], \'floats\': [3.5, 2.718]} ```","solution":"def segregate_data_types(input_list): Segregates integers, strings, and floats from the input_list into separate lists. Returns a dictionary with keys \'integers\', \'strings\', and \'floats\'. result = { \'integers\': [], \'strings\': [], \'floats\': [] } for item in input_list: if isinstance(item, int): result[\'integers\'].append(item) elif isinstance(item, float): result[\'floats\'].append(item) elif isinstance(item, str): result[\'strings\'].append(item) else: raise ValueError(f\\"Unsupported data type: {type(item)}\\") return result"},{"question":"Could you write a Python function that takes a list of strings and returns a list of unique words found in the strings, ignoring case and excluding punctuation? The function should include appropriate error handling to manage cases where the input is not a list of strings.","solution":"import re def extract_unique_words(strings): Takes a list of strings and returns a list of unique words found in the strings, ignoring case and excluding punctuation. :param strings: List of strings :return: List of unique words if not isinstance(strings, list): raise ValueError(\\"Input must be a list of strings.\\") if not all(isinstance(s, str) for s in strings): raise ValueError(\\"All elements in the list must be strings.\\") unique_words_set = set() for s in strings: words = re.findall(r\'bw+b\', s.lower()) unique_words_set.update(words) return list(unique_words_set)"},{"question":"Create a Python program to implement a basic text processing system that can accurately classify a given set of documents into predefined categories (e.g., sports, technology, health). Use natural language processing (NLP) techniques such as tokenization, stop-word removal, and TF-IDF for feature extraction. Train a machine learning model using Scikit-learn, like Naive Bayes or Support Vector Machine (SVM), to perform the classification. Ensure the program outputs the classification accuracy and confusion matrix to evaluate the model\'s performance. Provide a way for the user to input new documents for real-time classification and display the predicted category.","solution":"import pandas as pd from sklearn.datasets import fetch_20newsgroups from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.pipeline import make_pipeline from sklearn.model_selection import train_test_split from sklearn import metrics # Fetching the dataset categories = [\'rec.sport.baseball\', \'sci.med\', \'rec.motorcycles\'] # Simplified for this task data = fetch_20newsgroups(subset=\'train\', categories=categories) # Splitting data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(data.data, data.target, test_size=0.3, random_state=42) # Building the model pipeline model = make_pipeline(TfidfVectorizer(), MultinomialNB()) # Training the model model.fit(X_train, y_train) # Making predictions predicted = model.predict(X_test) # Model performance accuracy = metrics.accuracy_score(y_test, predicted) conf_matrix = metrics.confusion_matrix(y_test, predicted) def classify_document(doc): Classifies a given document based on the trained model. return model.predict([doc])[0] def get_category_name(index): Gets the category name corresponding to the index. return data.target_names[index] # Displaying the model performance print(f\\"Accuracy: {accuracy}\\") print(f\\"Confusion Matrix:n{conf_matrix}\\") # Example usage: new_document = \\"The new cancer treatment showed promising results in the recent clinical trials.\\" predicted_category = classify_document(new_document) print(f\\"The document is classified as: {get_category_name(predicted_category)}\\")"},{"question":"You are given a 2D grid of characters and a word. Write a function that determines if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Implement the function: ```python def word_exists(grid, word): # Code here ``` **Input:** - `grid` (list of list of chars): A 2D grid of characters representing the crossword puzzle. - `word` (str): The word to search for in the grid. **Output:** - (bool): Returns True if the word exists in the grid, False otherwise. **Constraints:** - The input grid will contain only lowercase or uppercase English letters. - The length of the input word will be at most 1000. - Grid dimensions are not explicitly limited but should be manageable with typical constraints in coding assessments. **Examples:** 1. ```python grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCCED\\" ``` Return `True`. 2. ```python grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"SEE\\" ``` Return `True`. 3. ```python grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCB\\" ``` Return `False`.","solution":"def word_exists(grid, word): def dfs(x, y, word_index): if word_index == len(word): return True if not (0 <= x < len(grid) and 0 <= y < len(grid[0])): return False if grid[x][y] != word[word_index]: return False tmp, grid[x][y] = grid[x][y], \\"#\\" # Mark cell as used found = (dfs(x + 1, y, word_index + 1) or dfs(x - 1, y, word_index + 1) or dfs(x, y + 1, word_index + 1) or dfs(x, y - 1, word_index + 1)) grid[x][y] = tmp # Unmark cell return found for i in range(len(grid)): for j in range(len(grid[0])): if dfs(i, j, 0): return True return False"},{"question":"Given a dictionary where the keys are strings and the values are lists of integers, write a function to find the key with the maximum sum of its list elements. Return the key and the sum as a tuple. Ensure that your solution works for any dictionary size and contents. Initial Exampledictionary: ``` example_dict = { \\"a\\": [1, 2, 3], \\"b\\": [4, 5], \\"c\\": [6, 7, 8, 9] } ``` Example Expected Output: ``` (\\"c\\", 30) ``` def find_max_sum_key(d): # Your code here pass","solution":"def find_max_sum_key(d): Returns the key with the maximum sum of its list elements and the sum as a tuple. Arguments: d : dict A dictionary where keys are strings and values are lists of integers. Returns: tuple A tuple containing the key with the maximum sum and the sum. max_key = None max_sum = -float(\'inf\') for key, value in d.items(): current_sum = sum(value) if current_sum > max_sum: max_sum = current_sum max_key = key return (max_key, max_sum)"},{"question":"Given an array of integers, write a function to determine the length of the longest subarray with a contiguous set of elements (any order). A set of numbers is contiguous if there are no gaps between them when sorted. Additionally, make the function capable of processing multiple arrays simultaneously and return the corresponding results for each of them. The program should also handle edge cases such as empty arrays or arrays with a single element. Example array: [1, 5, 3, 4, 2, 8, 10], result: 5 (subarray: [1, 5, 3, 4, 2]).","solution":"def longest_contiguous_subarray(arrays): Returns the length of the longest subarray with a contiguous set of elements for each input array. def find_longest(arr): if not arr: return 0 arr = sorted(arr) max_len = 1 current_len = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1] + 1: current_len += 1 elif arr[i] != arr[i - 1]: max_len = max(max_len, current_len) current_len = 1 return max(max_len, current_len) return [find_longest(arr) for arr in arrays]"},{"question":"Implement a function in Python that takes a list of strings and a target substring, and returns a list of strings from the original list that contain the target substring, ignoring case. Ensure the function is optimized for performance with a large number of input strings.","solution":"def filter_strings_with_substring(strings_list, target_substring): Returns a list of strings from the original list that contain the target substring, ignoring case. :param strings_list: List of strings :param target_substring: Substring to search for :return: List of strings containing the target substring target_substring_lower = target_substring.lower() return [s for s in strings_list if target_substring_lower in s.lower()]"},{"question":"Create a function in Python that accepts an integer `n` and returns a list of integers representing the first `n` numbers in the Fibonacci sequence. Your implementation should efficiently handle large values of `n` by utilizing an iterative approach instead of recursion.","solution":"def fibonacci_sequence(n): Returns a list of the first n numbers in the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:n]"},{"question":"Implement a function called `evaluate_expression` that evaluates a mathematical expression given as a string input. The expression can contain integers, the addition operator (`+`), the subtraction operator (`-`), the multiplication operator (`*`), and the division operator (`/`). The function should handle the correct operator precedence and make use of stacks to evaluate the expression. Additionally, consider and handle any potential division by zero errors gracefully by raising an appropriate exception. **Function Signature:** ```python def evaluate_expression(expression: str) -> float: pass ``` **Example Input and Output:** ```python print(evaluate_expression(\\"3+5*2\\")) # Output: 13.0 print(evaluate_expression(\\"10+2*6\\")) # Output: 22.0 print(evaluate_expression(\\"100*2+12\\")) # Output: 212.0 print(evaluate_expression(\\"100*(2+12)/14\\")) # Output: 100.0 print(evaluate_expression(\\"10/0\\")) # Raises ZeroDivisionError: division by zero ```","solution":"def evaluate_expression(expression: str) -> float: def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': if right == 0: raise ZeroDivisionError(\\"division by zero\\") values.append(left / right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] in (\'+\', \'-\', \'*\', \'/\'): while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[-1]"},{"question":"Given a list of integers, write a Python function that identifies all the unique pairs of numbers whose sum equals a given target value. The function should return these pairs as a list of tuples. Each pair should be sorted in ascending order, and the list should not contain duplicate pairs. Your function should follow this structure: def find_pairs(nums: list, target: int) -> list: # Insert your solution here. return pairs In addition to your implementation, provide an explanation of the algorithm you used and its time complexity. Discuss how your function handles edge cases such as an empty list, lists with fewer than two elements, and cases where no pairs meet the target sum. Also, discuss the potential real-world applications of your function, particularly in terms of data analysis or financial transactions.","solution":"def find_pairs(nums: list, target: int) -> list: Identifies all unique pairs of numbers in the list that sum up to the target value. Args: nums (list): List of integers. target (int): The target sum. Returns: list: List of tuples, each containing a pair of integers that sum up to the target value. pairs = set() seen = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return list(pairs)"},{"question":"Write a Python function that takes a string as input and returns the string with the order of characters reversed, but without using the explicit reverse function or slicing. For example, the input string \\"hello\\" should return \\"olleh\\". ```python def reverse_string(s: str) -> str: # Your code here pass ```","solution":"def reverse_string(s: str) -> str: Returns the string with the order of characters reversed. reversed_str = \'\' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Using Python, implement a function `get_even_index_values` that takes a list of integers as input and returns a new list containing the values at even index positions. For example, if the input list is `[10, 20, 30, 40, 50, 60]`, the output should be `[10, 30, 50]`. Ensure your function handles edge cases, such as an empty list or a list with only one element. Use efficient list slicing techniques to improve performance.","solution":"def get_even_index_values(int_list): Returns a new list containing the values at even index positions from the input list. Parameters: int_list (list of int): List of integers Returns: list of int: List of integers at even index positions return int_list[0::2]"},{"question":"A robot is placed on an 8 times 8 grid. The robot\'s initial position is at the bottom-left corner (1, 1). The robot can move one step up, down, left, or right, but cannot move outside the grid. A teleporter is located at the top-right corner (8, 8). When the robot reaches the teleporter, it instantly teleports back to its starting position (1, 1). At each step, the robot moves to an available adjacent cell randomly. A special rule exists: Whenever the robot steps on any cell located in the center 4x4 area (cells from (3,3) to (6,6)), it picks up an energy unit, and any cell visited in this area will be recharged with energy units after the robot leaves. The robot\'s goal is to collect exactly 10 energy units and then move to the teleporter at (8, 8) to end the trial. What is the expected number of steps until the robot collects 10 energy units and then reaches the teleporter? Give your answer rounded to 6 decimal places.","solution":"import random def simulate_robot(): grid_size = 8 start = (1, 1) teleporter = (8, 8) energy_area = {(i, j) for i in range(3, 7) for j in range(3, 7)} position = start energy_units = 0 steps = 0 while energy_units < 10 or position != teleporter: # Random move x, y = position move = random.choice([(0, 1), (0, -1), (1, 0), (-1, 0)]) # right, left, down, up new_position = (x + move[0], y + move[1]) # Ensure the new position is within bounds if 1 <= new_position[0] <= grid_size and 1 <= new_position[1] <= grid_size: position = new_position steps += 1 # Check for energy area if position in energy_area: energy_units += 1 # Check for teleporter if energy_units >= 10 and position == teleporter: break # Teleport back to start if position == teleporter: position = start return steps def expected_steps(num_simulations=10000): # Perform simulation multiple times and calculate average steps total_steps = sum(simulate_robot() for _ in range(num_simulations)) return round(total_steps / num_simulations, 6)"},{"question":"Write a function that takes an unsorted list of integers and returns a list containing the next greater element for each element in the input list. The next greater element for a number `x` is the first greater number to its right in the list. If such a number does not exist, output -1 for that number. For example, given the input `[4, 5, 2, 25]`, the function should return `[5, 25, 25, -1]`, and given the input `[13, 7, 6, 12]`, the function should return `[-1, 12, 12, -1]`. # Constraints - The function should have a time complexity better than O(n^2). - You can assume that the input list contains at least one element and no more than 10000 elements. # Function Signature ```python def next_greater_elements(arr: List[int]) -> List[int]: pass ``` # Example ```python assert next_greater_elements([4, 5, 2, 25]) == [5, 25, 25, -1] assert next_greater_elements([13, 7, 6, 12]) == [-1, 12, 12, -1] ``` # Explanation Implement an efficient algorithm to solve the problem, potentially using a stack to keep track of indices of elements for which the next greater element has not yet been found. This will allow you to achieve the objective with a single pass through the list.","solution":"from typing import List def next_greater_elements(arr: List[int]) -> List[int]: Returns a list of the next greater elements for each element in the input list. result = [-1] * len(arr) stack = [] for i in range(len(arr)): while stack and arr[stack[-1]] < arr[i]: index = stack.pop() result[index] = arr[i] stack.append(i) return result"},{"question":"You are given a CSV file containing information about various electronic items in a store. The CSV file has the following columns: `item_id`, `item_name`, `category`, `price`, `quantity_in_stock`, and `date_added`. Write a Python program that performs the following tasks: 1. Loading: Read the data from the CSV file into a pandas DataFrame. The program should handle errors such as missing or malformed data gracefully. 2. Filtering: Implement functionality to filter out only the items that fall under the \\"laptop\\" category and were added to the stock after January 1, 2020. 3. Transformation: Calculate the total value of the stock for the filtered items (i.e., sum of `price * quantity_in_stock` for each item). 4. Output: Display the details of the filtered items along with the total stock value computed. Ensure to manage resources efficiently and handle any potential errors during data processing. The program should be written in Python leveraging pandas for data manipulation.","solution":"import pandas as pd from datetime import datetime def load_data(file_path): Load data from a CSV file into a pandas DataFrame. Handles exceptions if file is missing or data is malformed. :param file_path: path to the CSV file :return: pandas DataFrame with the data try: df = pd.read_csv(file_path) except FileNotFoundError: raise FileNotFoundError(\\"The file was not found.\\") except pd.errors.EmptyDataError: raise ValueError(\\"The file is empty.\\") except pd.errors.ParserError: raise ValueError(\\"The data could not be parsed.\\") return df def filter_data(df): Filter data to only include items in \\"laptop\\" category added after January 1, 2020. :param df: pandas DataFrame with the data :return: filtered pandas DataFrame df[\'date_added\'] = pd.to_datetime(df[\'date_added\'], errors=\'coerce\') filtered_df = df[(df[\'category\'] == \'laptop\') & (df[\'date_added\'] > datetime(2020, 1, 1))] return filtered_df.dropna(subset=[\'date_added\']) def calculate_total_stock_value(df): Calculate the total stock value for the given DataFrame. :param df: pandas DataFrame with the filtered data :return: total stock value df[\'stock_value\'] = df[\'price\'] * df[\'quantity_in_stock\'] total_stock_value = df[\'stock_value\'].sum() return total_stock_value def display_filtered_items_and_total_value(df, total_value): Display the details of the filtered items along with total stock value. :param df: pandas DataFrame with the filtered data :param total_value: total stock value print(\\"Filtered Items:\\") print(df) print(\\"nTotal Stock Value: {:.2f}\\".format(total_value))"},{"question":"You need to design an online bookstore system with limited but specific functionality. The system should support the following operations: AddBook(ISBN, Title, Author) - Adds a new book to the bookstore. Each book is uniquely identified by its ISBN. If the book with the given ISBN already exists in the system, update its title and author. RemoveBook(ISBN) - Removes the book identified by the given ISBN from the bookstore. If no such book exists, this operation does nothing. SearchByTitle(Title) - Returns a list of ISBNs of books that have the exact same title. If no books have the given title, return an empty list. SearchByAuthor(Author) - Returns a list of ISBNs of books written by the given author. If no books are written by the given author, return an empty list. Here\'s an example sequence of operations and expected results: ``` AddBook(\\"123\\", \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\") AddBook(\\"456\\", \\"To Kill a Mockingbird\\", \\"Harper Lee\\") AddBook(\\"789\\", \\"1984\\", \\"George Orwell\\") AddBook(\\"123\\", \\"The Great Gatsby\\", \\"Fitzgerald\\") SearchByTitle(\\"The Great Gatsby\\") -> [\\"123\\"] SearchByAuthor(\\"Harper Lee\\") -> [\\"456\\"] RemoveBook(\\"123\\") SearchByTitle(\\"The Great Gatsby\\") -> [] SearchByAuthor(\\"Fitzgerald\\") -> [] ``` Challenge: Ensure that each operation can be performed in O(1) time complexity.","solution":"class OnlineBookstore: def __init__(self): self.books_by_isbn = {} self.books_by_title = {} self.books_by_author = {} def AddBook(self, ISBN, Title, Author): if ISBN in self.books_by_isbn: old_title = self.books_by_isbn[ISBN][\'Title\'] old_author = self.books_by_isbn[ISBN][\'Author\'] if old_title in self.books_by_title: self.books_by_title[old_title].remove(ISBN) if not self.books_by_title[old_title]: del self.books_by_title[old_title] if old_author in self.books_by_author: self.books_by_author[old_author].remove(ISBN) if not self.books_by_author[old_author]: del self.books_by_author[old_author] self.books_by_isbn[ISBN] = {\'Title\': Title, \'Author\': Author} if Title not in self.books_by_title: self.books_by_title[Title] = set() self.books_by_title[Title].add(ISBN) if Author not in self.books_by_author: self.books_by_author[Author] = set() self.books_by_author[Author].add(ISBN) def RemoveBook(self, ISBN): if ISBN in self.books_by_isbn: book = self.books_by_isbn[ISBN] title = book[\'Title\'] author = book[\'Author\'] del self.books_by_isbn[ISBN] self.books_by_title[title].remove(ISBN) if not self.books_by_title[title]: del self.books_by_title[title] self.books_by_author[author].remove(ISBN) if not self.books_by_author[author]: del self.books_by_author[author] def SearchByTitle(self, Title): return list(self.books_by_title.get(Title, [])) def SearchByAuthor(self, Author): return list(self.books_by_author.get(Author, []))"},{"question":"You need to implement a class `FileSystem` that simulates a simple file system. This file system supports creating directories and adding paths. Here\'s a description of the methods you need to implement: 1. **mkdir(path: str) -> None**: Creates a new directory at the given path. If intermediate directories do not exist, they should be created. 2. **addPath(path: str, value: int) -> None**: Adds a new path at the given location with some integer value. All intermediate directories should be created if they do not exist. You can assume that any value assigned to a path is an integer. # Example ```python fs = FileSystem() fs.mkdir(\\"/a/b/c\\") fs.addPath(\\"/a/b/c/d\\", 10) ``` # Constraints - The path will be a non-empty string consisting of lowercase alphabets and forward slashes (\'/\'). - Paths will always begin with a \'/\'. - The value assigned will be an integer. # Requirements - Do not use any built-in libraries or modules that provide similar functionalities (e.g., `os` module in Python). - Ensure proper error handling for invalid operations. Implement the `FileSystem` class in Python.","solution":"class FileSystem: def __init__(self): self.fs = {} def mkdir(self, path: str) -> None: components = path.split(\'/\') current = self.fs for component in components: if component: # skip empty components caused by leading \'/\' if component not in current: current[component] = {} current = current[component] def addPath(self, path: str, value: int) -> None: components = path.split(\'/\') current = self.fs for component in components[:-1]: if component: # skip empty components caused by leading \'/\' if component not in current: current[component] = {} current = current[component] last_component = components[-1] if last_component: current[last_component] = value"},{"question":"Design a class in Python for managing a library inventory system. Your class should adhere to the following specifications: 1. The class should be named `LibraryInventory`. 2. Create methods to add new books, including details such as title, author, genre, and year of publication. Use a list to store the information of each book. 3. Implement a method to search for books based on title, author, and genre. The method should be able to perform partial matches (for example, searching for \\"Row\\" should return any author whose name contains \\"Row\\"). 4. Implement a method to loan out books. This method should update the inventory to reflect that the book is no longer available. Handle scenarios where the book requested is not available. 5. Implement a method to return books. This method should update the inventory to reflect that the book is available again. 6. Implement a method to display all the books currently in the inventory. 7. Your code should be clean, well-structured, and properly commented for future improvements and debugging. 8. Include error handling for cases when invalid data is provided or operations cannot be performed due to the current state of the inventory (e.g., returning a book that is not marked as loaned out).","solution":"class LibraryInventory: def __init__(self): self.inventory = [] def add_book(self, title, author, genre, year, available=True): Adds a new book to the inventory. book = { \\"title\\": title, \\"author\\": author, \\"genre\\": genre, \\"year\\": year, \\"available\\": available } self.inventory.append(book) def search_books(self, title=None, author=None, genre=None): Searches for books based on title, author, and genre. Partial matches are supported. results = [] for book in self.inventory: if (title and title.lower() in book[\\"title\\"].lower()) or (author and author.lower() in book[\\"author\\"].lower()) or (genre and genre.lower() in book[\\"genre\\"].lower()): results.append(book) return results def loan_book(self, title): Loans out a book by title. Updates the inventory to mark the book as not available. for book in self.inventory: if book[\\"title\\"].lower() == title.lower() and book[\\"available\\"]: book[\\"available\\"] = False return f\\"The book \'{title}\' has been loaned out.\\" return f\\"The book \'{title}\' is not available.\\" def return_book(self, title): Returns a book by title. Updates the inventory to mark the book as available. for book in self.inventory: if book[\\"title\\"].lower() == title.lower() and not book[\\"available\\"]: book[\\"available\\"] = True return f\\"The book \'{title}\' has been returned.\\" return f\\"The book \'{title}\' was not loaned out.\\" def display_inventory(self): Displays all books currently in the inventory. return self.inventory"},{"question":"Create a function `calculate_median` that computes the median of a list of numbers. The median is the middle value in a list ordered from smallest to largest. If the list has an even number of elements, the median is the mean of the two middle numbers. Implement the function to handle edge cases such as an empty list and duplicate numbers. If the list is empty, return `None`. Sample Input: - `calculate_median([1, 3, 4, 2, 5])` should return `3` - `calculate_median([1, 3, 4, 2])` should return `(2 + 3) / 2 = 2.5` - `calculate_median([])` should return `None` Write the function and ensure it passes these conditions.","solution":"def calculate_median(numbers): Returns the median of a list of numbers. If the list is empty, it returns None. if not numbers: return None numbers.sort() n = len(numbers) mid = n // 2 if n % 2 == 1: return numbers[mid] else: return (numbers[mid - 1] + numbers[mid]) / 2"},{"question":"Create a Python function that determines whether a given string is a palindrome. A string is considered a palindrome if it reads the same forwards and backwards, ignoring case and non-alphanumeric characters. For instance, the string \\"A man, a plan, a canal: Panama\\" is a palindrome. Your function should be robust enough to handle strings containing a mix of spaces, punctuation, and different capitalization. ```python def is_palindrome(s): # This time is designated for profound introspection for the core parts of the code. # ``` Demonstrate the thought process for planning out this function, explaining the steps and considerations for implementing it.","solution":"import re def is_palindrome(s): Determine whether a given string is a palindrome, ignoring case and non-alphanumeric characters. Parameters: s (str): The string to be checked. Returns: bool: True if the string is a palindrome, False otherwise. # Step 1: Normalize the string by removing non-alphanumeric characters and converting to lowercase. normalized_str = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Step 2: Check if the normalized string is the same forwards and backwards. return normalized_str == normalized_str[::-1]"},{"question":"Write a function in Python that takes as an input a list of strings where each string represents a sentence. The function should return a dictionary where the keys are the original sentences and the values are the number of vowels in each sentence. Ensure the function handles both upper and lowercase vowels equally.","solution":"def count_vowels_in_sentences(sentences): This function takes a list of sentences and returns a dictionary where the keys are the original sentences and the values are the number of vowels in each sentence. vowels = set(\'aeiouAEIOU\') def count_vowels(sentence): return sum(1 for char in sentence if char in vowels) return {sentence: count_vowels(sentence) for sentence in sentences}"},{"question":"Write a function that takes a string representing a date in \\"YYYY-MM-DD\\" format and returns the day of the week for that date. The function should account for leap years and validate the input string for correct format and valid dates. Provide appropriate error handling and clear error messages for invalid inputs.","solution":"from datetime import datetime def day_of_week(date_str): Returns the day of the week for the given date in \\"YYYY-MM-DD\\" format. Parameters: date_str (str): The date string in \\"YYYY-MM-DD\\" format. Returns: str: The day of the week corresponding to the date. Raises: ValueError: If the input string is not in the correct format or if the date is invalid. try: date = datetime.strptime(date_str, \\"%Y-%m-%d\\") except ValueError as e: raise ValueError(\\"Input date must be in the format YYYY-MM-DD and be a valid date.\\") from e return date.strftime(\\"%A\\")"},{"question":"In an effort to streamline the categorization of entities based on multi-attribute classifications, you are to design a program that processes a collection of dynamically structured elements. Consider the following collection: let entityCollection = [ { name: \\"Alice\\", category: \\"animal\\", details: { habitat: \\"forest\\", diet: \\"herbivore\\" } }, { name: \\"Bob\\", category: \\"vehicle\\", details: { fuel: \\"electric\\", type: \\"sedan\\" } }, { name: \\"Charlie\\", category: \\"animal\\", details: { habitat: \\"desert\\", diet: \\"carnivore\\" } } ] Your task is to create a function that groups these entities by their main category and then sorts each group by their detailed attributes (first by habitat/type, then by diet/fuel) in ascending order. Additionally, the program must validate the presence of all required attributes and handle any inconsistencies, like missing or extraneous properties. If an anomaly is detected, the program should produce a detailed error message identifying the specific entity and the nature of the inconsistency.","solution":"def categorize_and_sort_entities(entity_collection): Groups entities by their main category and sorts each group by their detailed attributes (first by habitat/type, then by diet/fuel) in ascending order. :param entity_collection: List of entities with their details :return: Dict of categorized and sorted entities from collections import defaultdict categorized_entities = defaultdict(list) required_details = { \'animal\': [\'habitat\', \'diet\'], \'vehicle\': [\'fuel\', \'type\'] } # Validate and categorize entities for entity in entity_collection: category = entity.get(\'category\', None) details = entity.get(\'details\', None) if category not in required_details: raise ValueError(f\\"Unknown category {category} for entity {entity[\'name\']}\\") if not details: raise ValueError(f\\"Missing details for entity {entity[\'name\']}\\") for attribute in required_details[category]: if attribute not in details: raise ValueError(f\\"Missing attribute \'{attribute}\' in details of entity {entity[\'name\']}\\") categorized_entities[category].append(entity) # Sorting entities in each category sorted_entities = {} for category, ents in categorized_entities.items(): attr1, attr2 = required_details[category] sorted_entities[category] = sorted(ents, key=lambda x: (x[\'details\'][attr1], x[\'details\'][attr2])) return sorted_entities"},{"question":"Given an array of integers, write a function that returns the indices of the two numbers such that they add up to a specific target. You may assume that each input will have exactly one solution, and you may not use the same element twice. Your solution should have a linear runtime complexity. Provide detailed comments in your code explaining the logic behind each step. **Function Signature:** ```python def two_sum(nums: List[int], target: int) -> List[int]: ``` **Inputs:** - `nums`: A list of integers - `target`: An integer representing the target sum **Output:** - A list containing two integers, which are the indices of the two numbers in the input list that add up to the target. **Example:** ```python nums = [2, 7, 11, 15] target = 9 # Expected output: [0, 1] # Because nums[0] + nums[1] == 2 + 7 == 9 ```","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: Returns the indices of the two numbers in the list `nums` that add up to the target. Assumes there is exactly one solution. Args: nums: List of integers. target: Integer representing the target sum. Returns: A list containing two integers, the indices of the two numbers that add up to the target. # Dictionary to store the number and its index num_to_index = {} for index, num in enumerate(nums): # Calculate the necessary number to reach the target complement = target - num # Check if the complement exists in the dictionary if complement in num_to_index: return [num_to_index[complement], index] # If the complement doesn\'t exist, add the number and its index to the dictionary num_to_index[num] = index"},{"question":"Develop a function that determines the longest contiguous subsequence of increasing integers in a given list of integers. The function should be optimized for performance and account for large input sizes. def longest_increasing_subsequence(arr: List[int]) -> int: Find the length of the longest contiguous increasing subsequence in the given list of integers. Constraints: 1 <= len(arr) <= 10^5, -10^9 <= arr[i] <= 10^9 >>> longest_increasing_subsequence([1, 2, 2, 3, 4, 1]) 3 >>> longest_increasing_subsequence([5, 1, 2, 3, 4]) 4 >>> longest_increasing_subsequence([1, 3, 5, 7, 8, 2, 4, 6, 9]) 5 >>> longest_increasing_subsequence([-1, -2, -3, -4, -5]) 1 >>> longest_increasing_subsequence([10]) 1","solution":"def longest_increasing_subsequence(arr): Find the length of the longest contiguous increasing subsequence in the given list of integers. Constraints: 1 <= len(arr) <= 10^5, -10^9 <= arr[i] <= 10^9 if not arr: return 0 max_len = 1 current_len = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) return max_len"},{"question":"Create a function `pretty_json` that takes a string `json_str` representing JSON data and returns a prettified version of the JSON. The prettified JSON should have proper indentation to represent nested structures clearly. The inputs will be simple JSON strings without any nested JSON objects. The function should do the following: - Insert new line characters to break up JSON elements. - Indent nested structures with 2 spaces per level of depth. - Remove any unnecessary whitespace characters from the input JSON string. Additionally, your function should handle JSON arrays and objects correctly, ensuring they open new lines and close with appropriate indentation. Implement your solution in Python. Your function should accept a string as input and return a formatted string. Example: ```python # Input (single line JSON object) json_str = \'{\\"name\\":\\"John\\",\\"age\\":30,\\"city\\":\\"New York\\",\\"hasLicense\\":true,\\"children\\":[\\"Anna\\",\\"Ella\\"]}\' # Output (prettified JSON) result = pretty_json(json_str) print(result) # Expected output { \\"name\\": \\"John\\", \\"age\\": 30, \\"city\\": \\"New York\\", \\"hasLicense\\": true, \\"children\\": [ \\"Anna\\", \\"Ella\\" ] } ```","solution":"import json def pretty_json(json_str): Takes a JSON string and returns a prettified version of the JSON with proper indentation. Parameters: json_str (str): A string representing JSON data. Returns: str: Prettified JSON string. try: # Parse the JSON string to a Python dictionary json_obj = json.loads(json_str) # Convert the Python dictionary back to a JSON string with proper indentation pretty_str = json.dumps(json_obj, indent=2) return pretty_str except json.JSONDecodeError: return \\"Invalid JSON string\\""},{"question":"Implement a function called `mergeSortedLists` that takes two sorted arrays as input and returns a single sorted array that contains all elements from both input arrays. The function should handle arrays of different sizes and ensure the resulting array maintains the sorted order without using any built-in sorting functions. Your implementation should have a time complexity of O(n). Additionally, write a unit test to validate the correctness of your function using various test cases, including edge cases such as empty arrays and arrays with duplicate elements. Sample code structure to get you started: ```python def mergeSortedLists(arr1, arr2): result = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: result.append(arr1[i]) i += 1 else: result.append(arr2[j]) j += 1 while i < len(arr1): result.append(arr1[i]) i += 1 while j < len(arr2): result.append(arr2[j]) j += 1 return result # Unit tests import unittest class TestMergeSortedLists(unittest.TestCase): def test_empty_arrays(self): self.assertEqual(mergeSortedLists([], []), []) def test_single_empty_array(self): self.assertEqual(mergeSortedLists([], [1, 2, 3]), [1, 2, 3]) self.assertEqual(mergeSortedLists([1, 2, 3], []), [1, 2, 3]) def test_no_duplicates(self): self.assertEqual(mergeSortedLists([1, 3, 5], [2, 4, 6]), [1, 2, 3, 4, 5, 6]) def test_with_duplicates(self): self.assertEqual(mergeSortedLists([1, 2, 3], [2, 3, 4]), [1, 2, 2, 3, 3, 4]) def test_different_sizes(self): self.assertEqual(mergeSortedLists([1], [2, 3, 4]), [1, 2, 3, 4]) self.assertEqual(mergeSortedLists([1, 2, 3], [4]), [1, 2, 3, 4]) if __name__ == \'__main__\': unittest.main() ```","solution":"def mergeSortedLists(arr1, arr2): Merges two sorted arrays into a single sorted array. Args: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: Merged sorted array. result = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: result.append(arr1[i]) i += 1 else: result.append(arr2[j]) j += 1 while i < len(arr1): result.append(arr1[i]) i += 1 while j < len(arr2): result.append(arr2[j]) j += 1 return result"},{"question":"Write a Python function that receives a list of integers as input. The function should return a new list that contains the squares of the elements from the input list, but only if the squared value is even. If the input list is empty, the function should return an empty list. ```python def filter_and_square_evens(nums): # Your code here pass # Examples: # filter_and_square_evens([1, 2, 3, 4, 5]) should return [4, 16] # filter_and_square_evens([10, 15, 22, 33]) should return [100, 484] # filter_and_square_evens([]) should return [] ```","solution":"def filter_and_square_evens(nums): Returns a list of squares of the elements from the input list if and only if the squared value is even. Args: nums (list of int): List of integers. Returns: list of int: List of squares of the input elements that are even. return [x * x for x in nums if (x * x) % 2 == 0]"},{"question":"Fix the following Python function to correctly identify and return the largest number in a given list. Ensure that the code handles edge cases, such as an empty list, appropriately. ```python def find_largest_number(lst): largest = None for num in lst: if num > largest: largest = num return largest ```","solution":"def find_largest_number(lst): Returns the largest number in a given list. If the list is empty, returns None. if not lst: return None largest = lst[0] for num in lst: if num > largest: largest = num return largest"},{"question":"Write a function that takes a list of strings as input, where each string represents a sentence. The function should return a dictionary where the keys are the unique words from the sentences (case-insensitive) and the values are the number of times each word appears across all sentences. Additionally, the function should print the word with the highest frequency along with its count. If there is a tie, print any one of the words with the highest frequency.","solution":"def word_frequencies(sentences): Returns a dictionary with word frequencies from the input list of sentences. Also prints the word with the highest frequency and its count. word_count = {} for sentence in sentences: words = sentence.lower().split() for word in words: if word.endswith(\\".\\") or word.endswith(\\",\\") or word.endswith(\\"!\\"): word = word[:-1] word_count[word] = word_count.get(word, 0) + 1 max_word = max(word_count, key=word_count.get) print(f\\"The word with the highest frequency is: \'{max_word}\' with count: {word_count[max_word]}\\") return word_count"},{"question":"Consider a list of integers where each integer represents the population of a city. Write a function that returns the name of the category the most populated city belongs to, based on the following criteria: - \'Small\' if the population is less than 5000 - \'Medium\' if the population is between 5000 and 20000 (inclusive) - \'Large\' if the population is more than 20000 If the list is empty, return \'No cities\'. Example: Input: cities = [1200, 34000, 5600, 45000, 320] Output: \'Large\'","solution":"def most_populated_city_category(cities): Determines the category of the most populated city in the list. Parameters: cities (list): A list of integers representing the population of each city. Returns: str: The category of the most populated city: \'Small\', \'Medium\', \'Large\', or \'No cities\' if the list is empty. if not cities: return \'No cities\' max_population = max(cities) if max_population < 5000: return \'Small\' elif 5000 <= max_population <= 20000: return \'Medium\' else: return \'Large\'"},{"question":"During a local election, the number of votes received by Alice was 15% more than the votes received by Bob. Charlie, another candidate, secured 10% more votes than Alice. If the total number of votes cast for all three candidates was 2,500, can you determine how many votes each candidate received?","solution":"def calculate_votes(total_votes): Calculate the number of votes each candidate received based on the given conditions. The total number of votes is 2500: - Alice received 15% more votes than Bob. - Charlie received 10% more votes than Alice. Returns a tuple with the votes for Bob, Alice, and Charlie respectively. # Let the number of votes for Bob be B # Then Alice\'s votes A = 1.15 * B (15% more than Bob) # And Charlie\'s votes C = 1.10 * A (10% more than Alice) # Total votes equation: B + A + C = 2500 # Substitute A = 1.15 * B and C = 1.10 * (1.15 * B) into the equation: # B + 1.15 * B + 1.10 * (1.15 * B) = 2500 B = total_votes / (1 + 1.15 + (1.10 * 1.15)) A = 1.15 * B C = 1.10 * A return round(B), round(A), round(C)"},{"question":"Create a function called `max_length_subarray` that takes two parameters: an array of integers and an integer `k`. The function should determine the maximum length of a contiguous subarray that sums exactly to `k`. If there is no such subarray, the function should return 0. Your implementation should aim for efficient usage of time and space. The function should prompt the user dynamically for input values and handle edge cases like empty arrays or arrays with negative numbers.","solution":"def max_length_subarray(arr, k): Determines the maximum length of a contiguous subarray that sums exactly to k. If there is no such subarray, the function returns 0. :param arr: List[int] - array of integers :param k: int - target sum :return: int - maximum length of contiguous subarray that sums to k # Dictionary to store the first occurrence of sum sum_map = {} current_sum = 0 max_len = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum == k: max_len = i + 1 if current_sum - k in sum_map: max_len = max(max_len, i - sum_map[current_sum - k]) if current_sum not in sum_map: sum_map[current_sum] = i return max_len"},{"question":"Develop a program that takes as input a list of book titles and a list of keywords, then returns a list of books that contain any of the given keywords in their titles. The search should be case-insensitive. Additionally, if no titles match the keywords, the program should return a message indicating that no matches were found. The program should handle cases where the input lists are empty. Example: Input: Book Titles: [\\"To Kill a Mockingbird\\", \\"Pride and Prejudice\\", \\"The Great Gatsby\\", \\"The Catcher in the Rye\\"] Keywords: [\\"pride\\", \\"great\\", \\"moby\\"] Output: [\\"Pride and Prejudice\\", \\"The Great Gatsby\\"] If Keywords were: [\\"moby\\"] Output: \\"No matches found\\" Ensure your solution is scalable and can handle a large number of book titles and keywords efficiently.","solution":"def find_books_by_keywords(book_titles, keywords): Returns a list of books that contain any of the given keywords in their titles. Parameters: - book_titles: List of book titles (list of strings) - keywords: List of keywords to search for in the titles (list of strings) Returns: - List of book titles that contain any of the keywords (case-insensitive). Returns \\"No matches found\\" if no titles match the keywords. if not book_titles or not keywords: return \\"No matches found\\" # Convert keywords to lowercase for case-insensitive matching. keywords = [keyword.lower() for keyword in keywords] matched_books = [title for title in book_titles if any(keyword in title.lower() for keyword in keywords)] if not matched_books: return \\"No matches found\\" return matched_books"},{"question":"Determine if there exists a pair of integers within the given array whose sum equals the specified target value. If such a pair exists, return the indices of the two numbers. Otherwise, return an empty array. Example: Input: `nums = [2, 7, 11, 15]`, `target = 9` Output: `[0, 1]`","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. Args: nums: List of integers. target: An integer target sum. Returns: A list with two indices if a pair is found, otherwise an empty list. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Write a Python function that takes a string and returns a new string with the characters in reverse order, without using Python\'s built-in reverse methods. Additionally, write a function to check if the reversed string is a palindrome, ignoring case and non-alphanumeric characters.","solution":"def reverse_string(s): Returns a new string with the characters in reverse order. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str def is_palindrome(s): Checks if the input string is a palindrome, ignoring case and non-alphanumeric characters. alnum_str = \'\'.join(char.lower() for char in s if char.isalnum()) reversed_alnum_str = reverse_string(alnum_str) return alnum_str == reversed_alnum_str"},{"question":"Write a function that accepts a string containing a mathematical expression (only addition and subtraction), and evaluates the result. The input string only contains non-negative integers, plus \'+\' and minus \'-\' operators, and spaces. For example, given \\"10 + 20 - 5 + 3\\", the function should return 28. Make sure to handle the spaces correctly.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers, addition (\'+\') and subtraction (\'-\') operators, and spaces. Args: expression (str): The input mathematical expression as a string. Returns: int: The result of evaluating the input expression. # Remove any extraneous spaces in the expression expression = expression.replace(\\" \\", \\"\\") # Initialize variables to keep track of the total and current number total, i, n = 0, 0, len(expression) # Process each character in the expression current_number = 0 sign = 1 # 1 for \'+\', -1 for \'-\' while i < n: if expression[i].isdigit(): current_number = current_number * 10 + int(expression[i]) else: total += sign * current_number current_number = 0 if expression[i] == \'+\': sign = 1 elif expression[i] == \'-\': sign = -1 i += 1 # Add the last number to total total += sign * current_number return total"},{"question":"Design a function `roman_to_integer(numeral)` that converts a given Roman numeral into its corresponding integer value. Roman numerals are represented by the symbols I, V, X, L, C, D, and M, which stand for 1, 5, 10, 50, 100, 500, and 1000, respectively. These numerals can be combined to create other numbers (e.g., 2 is written as II, 12 is written as XII). However, when a smaller numeral appears before a larger one, it should be subtracted (e.g., 4 is written IV, subtracting 1 from 5). The function should handle conversions from 1 to 3999, which are the valid range for Roman numerals. # Example: ```python roman_to_integer(\\"III\\") == 3 roman_to_integer(\\"IX\\") == 9 roman_to_integer(\\"LVIII\\") == 58 roman_to_integer(\\"MCMXCIV\\") == 1994 ``` # Constraints: - The input will always be a valid Roman numeral in the range from 1 to 3999. - It is guaranteed that the given Roman numeral string is always uppercase. # Notes: 1. Pay attention to how numeral combinations subtract values (e.g., IV, IX) versus how they add values (e.g., VI, XI). 2. It is helpful to keep a mapping of numeral symbols to their corresponding integer values.","solution":"def roman_to_integer(numeral): Convert a Roman numeral to its corresponding integer value. :param numeral: str, a Roman numeral string :return: int, the integer value of the Roman numeral roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in numeral[::-1]: # Iterate from the end of the numeral string value = roman_values[char] if value >= prev_value: total += value else: total -= value prev_value = value return total"},{"question":"Write a program that simulates a basic banking system. The system should allow users to create accounts, deposit money, withdraw money, and check their balance. Each account should start with a unique account number, a balance of 0, and an account holder\'s name. The program should handle invalid transactions gracefully, such as attempting to withdraw more money than the current balance or inputting non-numeric values for amounts. Additionally, the system should ensure no two accounts can have the same account number.","solution":"import re class Account: A class to represent a bank account. account_number_counter = 1000 accounts = {} def __init__(self, account_holder_name): self.account_holder_name = account_holder_name self.balance = 0.0 self.account_number = Account.account_number_counter Account.account_number_counter += 1 Account.accounts[self.account_number] = self def deposit(self, amount): if self._is_valid_amount(amount): self.balance += amount return True return False def withdraw(self, amount): if self._is_valid_amount(amount) and amount <= self.balance: self.balance -= amount return True return False def check_balance(self): return self.balance def _is_valid_amount(self, amount): return isinstance(amount, (int, float)) and amount > 0 @classmethod def get_account(cls, account_number): return cls.accounts.get(account_number, None)"},{"question":"Write a function that takes a list of dictionaries, where each dictionary contains information about a student (name, age, and GPA) and returns a new list of dictionaries sorted by GPA in ascending order. If two students have the same GPA, sort them by their name in alphabetical order. students = [ {\\"name\\": \\"Alice\\", \\"age\\": 23, \\"GPA\\": 3.5}, {\\"name\\": \\"Bob\\", \\"age\\": 21, \\"GPA\\": 3.7}, {\\"name\\": \\"Chris\\", \\"age\\": 22, \\"GPA\\": 3.5}, {\\"name\\": \\"David\\", \\"age\\": 24, \\"GPA\\": 3.9} ]","solution":"def sort_students_by_GPA(students): Takes a list of dictionaries containing information about students and returns a new list sorted by GPA in ascending order. If two students have the same GPA, sorts them by their name in alphabetical order. :param students: List[Dict[str, Any]]: a list of dictionaries containing student information :return: List[Dict[str, Any]]: sorted list of dictionaries return sorted(students, key=lambda s: (s[\\"GPA\\"], s[\\"name\\"]))"},{"question":"Task NOTICE Role: You are a professional engineer; the main goal is to write PEP8 compliant, elegant, modular, easy to read and maintain Python 3.9 code (but you can also use other programming language) ATTENTION: Use \'\' to SPLIT SECTIONS, not \'#\'. Output format carefully referenced \\"Format example\\". Code: compare.py Write code with triple quoto, based on the following list and context. 1. Do your best to implement THIS ONLY ONE FILE. ONLY USE EXISTING API. IF NO API, IMPLEMENT IT. 2. Requirement: Based on the context, implement one following code file, note to return only in code form, your code will be part of the entire project, so please implement complete, reliable, reusable code snippets. 3. Attention1: If there is any setting, ALWAYS SET A DEFAULT VALUE, ALWAYS USE STRONG TYPE AND EXPLICIT VARIABLE. 4. Attention2: YOU MUST FOLLOW \\"Data structures and interface definitions\\". DONT CHANGE ANY DESIGN. 5. Think before writing: What should be implemented and provided in this document? 6. CAREFULLY CHECK THAT YOU DONT MISS ANY NECESSARY CLASS/FUNCTION IN THIS FILE. 7. Do not use public member functions that do not exist in your design. ----- # Context The boss wants additional functionality to compare influencers based on multiple metrics. Marketers should be able to compare influencers easily to decide which ones best suit their campaigns. Product Goals ```python [ \\"Enable marketers to compare influencers on various metrics\\", \\"Ensure the comparison tool is easy to use and understand\\", \\"Provide meaningful insights through the comparison\\" ] ``` Metrics for Comparison ```python [ \\"Followers Count\\", \\"Engagement Rate\\", \\"Content Category\\", \\"Platform\\" ] ``` User Stories ```python [ \\"As a marketer, I want to compare multiple influencers so I can choose the best for my campaign\\", \\"As a user, I want a clear comparison between influencers to make an informed decision\\", \\"As a marketer, I want to filter comparison results based on my campaign\'s needs\\" ] ``` Competitive Analysis ```python [ \\"Most current influencer comparison tools lack detailed metric analysis\\", \\"Few tools offer intuitive visual representation of comparisons\\" ] ``` Competitive Quadrant Chart ```mermaid quadrantChart title Comparison Tool Effectiveness x-axis Low Metric Detail --> High Metric Detail y-axis Low User Intuition --> High User Intuition quadrant-1 Best suitable quadrant-2 Needs marketing quadrant-3 Reconsider approach quadrant-4 Up for improvement \\"Competitor A\\": [0.7, 0.4] \\"Competitor B\\": [0.6, 0.5] \\"Competitor C\\": [0.5, 0.3] \\"Our Product\\": [0.8, 0.7] ``` Requirement Analysis The comparison tool should allow multiple influencers to be compared based on the specified metrics. The interface should be easy to use and interpret, providing clear visual and textual information. Requirement Pool ```python [ (\\"Develop a comparison tool for influencers\\", \\"P0\\"), (\\"Enable users to compare influencers on multiple metrics\\", \\"P0\\"), (\\"Provide visual representation of comparison results\\", \\"P1\\"), (\\"Allow filtering of comparison results\\", \\"P1\\"), (\\"Ensure ease of use in the comparison tool\\", \\"P2\\") ] ``` UI Design draft The user should be able to select influencers and compare them on a side-by-side view. The comparison results should be displayed clearly, showing metrics in a tabular format with visual aids like charts or graphs. Anything UNCLEAR There are no unclear points. Python package name ```python \\"influencer_search_engine\\" ``` File list ```python [ \\"main.py\\", \\"influencer.py\\", \\"analytics.py\\", \\"search.py\\", \\"user.py\\", \\"scrape.py\\", \\"compare.py\\", \\"track.py\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class Influencer{ +str name +str platform +int followers +float engagement_rate +str category } class Compare{ +list influencers +compare_influencers() } Compare -- \\"*\\" Influencer: compares ``` Program call flow ```mermaid sequenceDiagram participant U as User participant C as Compare participant I as Influencer U->>C: compare_influencers(influencers) C->>I: get_influencer_data(influencers) I-->>C: return influencer data C-->>U: return comparison ``` Logic Analysis ```python [ (\\"main.py\\", \\"Main entry of the application\\"), (\\"influencer.py\\", \\"Influencer class definition, should be implemented first\\"), (\\"compare.py\\", \\"Compare class definition and implementation, depends on Influencer class\\"), (\\"rest of the files\\", \\"Implementation of other files\\") ] ``` Task list ```python [ \\"influencer.py\\", \\"compare.py\\", \\"main.py\\", \\"rest of the files\\" ] ``` Shared Knowledge ```python \'influencer.py\' contains the Influencer class definition which is used by other classes. \'compare.py\' implements comparison logic for comparing multiple influencers. \'main.py\' is the main entry of the application. ``` Anything UNCLEAR No, everything is clear. Code: compare.py ```python compare.py class Compare: def __init__(self, influencers: list): self.influencers = influencers def compare_influencers(self) -> dict: comparison_result = {} for influencer in self.influencers: data = influencer.get_data() name = data.pop(\'name\') comparison_result[name] = data return comparison_result ```","solution":"influencer.py class Influencer: def __init__(self, name: str, platform: str, followers: int, engagement_rate: float, category: str): self.name = name self.platform = platform self.followers = followers self.engagement_rate = engagement_rate self.category = category def get_data(self) -> dict: return { \\"name\\": self.name, \\"platform\\": self.platform, \\"followers\\": self.followers, \\"engagement_rate\\": self.engagement_rate, \\"category\\": self.category } compare.py class Compare: def __init__(self, influencers: list): self.influencers = influencers def compare_influencers(self) -> dict: comparison_result = {} for influencer in self.influencers: data = influencer.get_data() name = data.pop(\'name\') comparison_result[name] = data return comparison_result"},{"question":"In the Solution class, finalize the findAnagrams function that accepts a string list \'words\' and a specific string \'target\'. The function should return a list of words from the \'words\' list that are anagrams of the \'target\' string. An anagram of a word is another word that contains the same characters, only the order of characters can be different. For instance: findAnagrams([\\"listen\\", \\"silent\\", \\"enlist\\", \\"abc\\", \\"def\\"], \\"listen\\") should yield [\\"listen\\", \\"silent\\", \\"enlist\\"] findAnagrams([\\"race\\", \\"care\\", \\"acer\\", \\"hello\\", \\"world\\"], \\"care\\") should yield [\\"race\\", \\"care\\", \\"acer\\"] findAnagrams([\\"abcd\\", \\"dcba\\", \\"bcad\\", \\"dabc\\", \\"abdc\\"], \\"abcd\\") should yield [\\"abcd\\", \\"dcba\\", \\"bcad\\", \\"dabc\\", \\"abdc\\"]","solution":"def findAnagrams(words, target): Returns a list of words from \'words\' that are anagrams of the \'target\' string. target_sorted = sorted(target) return [word for word in words if sorted(word) == target_sorted]"},{"question":"Implement a function to merge two sorted linked lists into a single sorted linked list. The lists may contain duplicate values, and the resulting merged list should also be in sorted order and contain all values. Provide a function signature and code implementation in a programming language of your choice.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeTwoLists(l1, l2): Merge two sorted linked lists into a single sorted linked list. :param l1: ListNode | None :param l2: ListNode | None :return: ListNode | None dummy = ListNode() # Create a dummy node to simplify the merge process tail = dummy # Tail pointer to keep track of the last node in the merged list while l1 and l2: if l1.val < l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next # Append the remaining nodes of l1 or l2 if l1: tail.next = l1 if l2: tail.next = l2 return dummy.next # The head of the merged linked list is next of the dummy node"},{"question":"Create a Python function that takes an unordered list of integers and rearranges them into the largest possible number. The function should handle lists containing integers of varying lengths and should ensure that the concatenated result is the highest possible integer value. For example, given the list [54, 546, 548, 60], the function should return the string \\"6054854654\\". Consider edge cases such as lists with leading zeroes or all identical numbers.","solution":"from functools import cmp_to_key def largest_number(arr): Returns the largest possible number that can be formed from the integers in the list. if not arr: return \\"\\" # Convert all integers to strings for comparison arr = list(map(str, arr)) # Custom comparator to sort the numbers to form the largest number def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Sort the array using the custom comparator arr.sort(key=cmp_to_key(compare)) # Concatenate sorted array into a single string result = \'\'.join(arr) # Handle case where there might be leading zeros (e.g., [0, 0]) return result if result[0] != \'0\' else \'0\'"},{"question":"Write a Python function that takes an input string and returns the longest palindrome that can be constructed by rearranging the characters of that string. If no palindrome can be constructed, return an empty string. For example, for the input string \\"aabbcc\\", the output can be \\"abccba\\" or \\"bccabb\\". For the input \\"abc\\", the output should be an empty string since no palindrome can be formed.","solution":"from collections import Counter def longest_palindrome(input_string): Returns the longest palindrome that can be constructed by rearranging the characters of the input string. If no palindrome can be constructed, returns an empty string. char_count = Counter(input_string) mid_char = \\"\\" halves = [] for char, count in char_count.items(): if count % 2 == 1: if mid_char: return \\"\\" # More than one character with an odd count means no palindrome can be formed mid_char = char halves.append(char * (count // 2)) left_half = \'\'.join(halves) return left_half + mid_char + left_half[::-1] # Constructing the palindrome"},{"question":"Develop a function that calculates the sum of all even numbers in an inclusive numerical range between two given integers. start = 2 end = 10","solution":"def sum_of_evens(start, end): Calculate the sum of all even numbers in an inclusive numerical range between two given integers. Parameters: start (int): The starting integer of the range. end (int): The ending integer of the range. Returns: int: The sum of all even numbers in the specified range. if start > end: return 0 if start % 2 != 0: start += 1 if end % 2 != 0: end -= 1 if start > end: return 0 number_of_evens = (end - start) // 2 + 1 return number_of_evens * (start + end) // 2"},{"question":"Design a Python program that simulates a basic recommendation system for a movie streaming service. The program should take input from users about their favorite genres and use this information to recommend a list of movies accordingly. The dataset of movies should include various attributes such as title, genre, director, year of release, and rating. Implement functions for the following tasks: 1. Load and preprocess the movie dataset. 2. Allow the user to input their favorite genres. 3. Recommend a list of movies based on the user\'s input. 4. Optimize the recommendation system to handle cases where the user\'s preferred genres are not explicitly listed, by suggesting closely related genres. 5. Provide a detailed analysis of how the recommendation system performs, including user satisfaction based on hypothetical feedback or simulated data. Ensure your program includes clear comments and document each step, explaining the rationale behind your approach.","solution":"import pandas as pd from difflib import get_close_matches # Sample movie dataset MOVIES = [ {\\"title\\": \\"Inception\\", \\"genre\\": \\"Sci-Fi\\", \\"director\\": \\"Christopher Nolan\\", \\"year\\": 2010, \\"rating\\": 8.8}, {\\"title\\": \\"The Godfather\\", \\"genre\\": \\"Crime\\", \\"director\\": \\"Francis Ford Coppola\\", \\"year\\": 1972, \\"rating\\": 9.2}, {\\"title\\": \\"Pulp Fiction\\", \\"genre\\": \\"Crime\\", \\"director\\": \\"Quentin Tarantino\\", \\"year\\": 1994, \\"rating\\": 8.9}, {\\"title\\": \\"The Dark Knight\\", \\"genre\\": \\"Action\\", \\"director\\": \\"Christopher Nolan\\", \\"year\\": 2008, \\"rating\\": 9.0}, {\\"title\\": \\"Forrest Gump\\", \\"genre\\": \\"Drama\\", \\"director\\": \\"Robert Zemeckis\\", \\"year\\": 1994, \\"rating\\": 8.8}, {\\"title\\": \\"The Matrix\\", \\"genre\\": \\"Sci-Fi\\", \\"director\\": \\"The Wachowskis\\", \\"year\\": 1999, \\"rating\\": 8.7}, {\\"title\\": \\"The Shawshank Redemption\\", \\"genre\\": \\"Drama\\", \\"director\\": \\"Frank Darabont\\", \\"year\\": 1994, \\"rating\\": 9.3}, # Additional movies... ] # Load and preprocess the movie dataset def load_movie_data(): Load the mock movie dataset into a DataFrame. return pd.DataFrame(MOVIES) # Allow the user to input their favorite genres def get_user_genres(): Mock function to simulate user input for favorite genres. In a real system, this would retrieve data from the user. return [\\"Sci-Fi\\", \\"Action\\"] # Recommend a list of movies based on the user\'s input def recommend_movies(movies_df, user_genres): Recommend movies to the user based on their input genres. Parameters: movies_df (DataFrame): The movie dataset. user_genres (list): List of user\'s favorite genres. Returns: DataFrame: Filtered DataFrame of recommended movies. return movies_df[movies_df[\'genre\'].isin(user_genres)] # Optimize the recommendation system to handle cases where the user\'s preferred genres are not explicitly listed def recommend_movies_with_related_genres(movies_df, user_genres): Recommend movies to the user based on their input genres, including suggesting closely related genres if user\'s preferred genres are not found. Parameters: movies_df (DataFrame): The movie dataset. user_genres (list): List of user\'s favorite genres. Returns: DataFrame: Filtered DataFrame of recommended movies. available_genres = movies_df[\'genre\'].unique().tolist() related_genres = set(user_genres) for genre in user_genres: close_matches = get_close_matches(genre, available_genres, n=2, cutoff=0.6) related_genres.update(close_matches) return movies_df[movies_df[\'genre\'].isin(related_genres)] # Provide analysis of how the recommendation system performs def analyze_recommendation_system(recommended_movies): Perform analysis on the recommendation system, such as hypothetical feedback. Parameters: recommended_movies (DataFrame): The DataFrame of recommended movies. Returns: dict: Analysis results. avg_rating = recommended_movies[\'rating\'].mean() genre_distribution = recommended_movies[\'genre\'].value_counts().to_dict() analysis = { \\"average_rating\\": avg_rating, \\"genre_distribution\\": genre_distribution, \\"total_recommendations\\": len(recommended_movies) } return analysis"},{"question":"Develop a Python function that takes a list of integers and returns the length of the longest contiguous subsequence where the numbers form an arithmetic progression (AP). An arithmetic progression is defined as a sequence of numbers with a constant difference between consecutive terms. Your function should identify the longest subsequence from any part of the list and handle the input efficiently, considering edge cases such as an empty list or a list with no possible arithmetic progression of length greater than one.","solution":"def longest_ap_length(arr): Returns the length of the longest contiguous subsequence where the numbers form an arithmetic progression. if not arr: return 0 if len(arr) == 1: return 1 max_len = 1 curr_len = 1 common_diff = None for i in range(1, len(arr)): if common_diff is None: common_diff = arr[i] - arr[i-1] curr_len += 1 elif arr[i] - arr[i-1] == common_diff: curr_len += 1 else: max_len = max(max_len, curr_len) common_diff = arr[i] - arr[i-1] curr_len = 2 max_len = max(max_len, curr_len) return max_len"},{"question":"Design a function that simulates the behavior of a basic calculator. The function will accept a string representing a mathematical expression involving non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\'. Implement the parsing logic to correctly operate within the typical order of operations (PEMDAS). Ensure that division between two integers results in an integer result as well. Test your function with a variety of expressions to handle edge cases, such as operations on zero, large numbers, and the mixture of several operators.","solution":"def calculate(expression): Simulates a basic calculator that evaluates the given mathematical expression string considering the order of operations (PEMDAS). import re import operator from math import isclose # Tokenize input string tokens = re.findall(r\'d+|[+-*/]\', expression) def apply_operator(operators, values): operator_token = operators.pop() right_value = values.pop() left_value = values.pop() if operator_token == \'+\': values.append(operator.add(left_value, right_value)) elif operator_token == \'-\': values.append(operator.sub(left_value, right_value)) elif operator_token == \'*\': values.append(operator.mul(left_value, right_value)) elif operator_token == \'/\': # Use integer division values.append(operator.floordiv(left_value, right_value)) # Define operator precedence precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} operators = [] values = [] for token in tokens: if token.isdigit(): values.append(int(token)) else: while (operators and precedence[operators[-1]] >= precedence[token]): apply_operator(operators, values) operators.append(token) while operators: apply_operator(operators, values) return values[0]"},{"question":"Given a string `s`, determine the minimum number of deletions required to make `s` a palindrome. A palindrome is a string that reads the same forward and backward. Function Signature: ```python def min_deletions_to_make_palindrome(s: str) -> int: pass ``` **Input** - `s` (1 ≤ |s| ≤ 1000): A string consisting of lowercase English letters. **Output** - An integer representing the minimum number of deletions required. **Example** _Input:_ ```python s = \\"abccba\\" ``` _Output:_ ```python 0 ``` _Explanation:_ The string is already a palindrome. _Input:_ ```python s = \\"abcdba\\" ``` _Output:_ ```python 1 ``` _Explanation:_ Deleting either \'c\' or \'d\' will make the string a palindrome. _Input:_ ```python s = \\"abcde\\" ``` _Output:_ ```python 4 ``` _Explanation:_ We need to delete 4 characters to leave a single character, which is trivially a palindrome. **Note:** To develop an efficient solution, one possible approach involves dynamic programming. Define `dp[i][j]` to be the minimum number of deletions required to make the substring `s[i...j]` a palindrome. The final answer will be `dp[0][n-1]` where `n` is the length of the string.","solution":"def min_deletions_to_make_palindrome(s: str) -> int: Returns the minimum number of deletions required to make s a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] # Build the table for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1] # Example usage: # s = \\"abcdba\\" # print(min_deletions_to_make_palindrome(s)) # Output: 1"},{"question":"Implement a function in Python that takes two strings as input and returns a boolean indicating whether they are anagrams of each other without using any built-in sorting functionalities. The function should not be case-sensitive and should ignore any non-alphanumeric characters in the strings. Your solution should consider both time and space complexity. Examples: - Input: \\"Astronomer\\", \\"Moonstarer\\" Output: True - Input: \\"hello\\", \\"bye\\" Output: False - Input: \\"A gentleman\\", \\"Elegant man!!!\\" Output: True","solution":"def are_anagrams(str1, str2): Returns True if the two strings are anagrams of each other (ignoring non-alphanumeric characters and case), otherwise, returns False. def clean_string(s): cleaned = [char.lower() for char in s if char.isalnum()] return cleaned cleaned_str1 = clean_string(str1) cleaned_str2 = clean_string(str2) if len(cleaned_str1) != len(cleaned_str2): return False char_count = {} for char in cleaned_str1: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in cleaned_str2: if char in char_count: char_count[char] -= 1 if char_count[char] < 0: return False else: return False return True"},{"question":"Design a **Database Management System (DBMS)** for an online library that can store information about books, authors, borrowers, and transactions involving book loans. The system should include the following functionalities: 1. **Book Management:** - Add new books with details such as title, author, genre, publication date, and ISBN. - Update existing book information. - Remove a book from the collection. 2. **Author Management:** - Add authors with details like name, biography, and a list of books they have written. - Update author information. - Remove an author. 3. **Borrower Management:** - Add borrowers with details such as name, contact information, and membership start date. - Update borrower information. - Remove a borrower. 4. **Transaction Management:** - Record a book loan with the borrower\'s name, book title, loan date, and due date. - Record returning of a book and calculate any incurred fines. - Keep track of borrowed books and their return status. 5. **Search and Reporting:** - Search for books by title, author, genre, or ISBN. - Generate reports of borrowed books, including overdue ones. - List all books by a specific author or genre. Create appropriate classes and relationships to model this system. Use database techniques to ensure data integrity, such as primary keys, foreign keys, and constraints. Additionally, provide mechanisms to handle edge cases, such as loaning a book that is already borrowed or removing a borrower who currently has loaned out books. Implement operations demonstrating the functionalities mentioned above, using any programming language and DBMS of your choice.","solution":"from datetime import datetime, timedelta class Book: def __init__(self, isbn, title, author, genre, publication_date): self.isbn = isbn self.title = title self.author = author self.genre = genre self.publication_date = publication_date self.is_borrowed = False class Author: def __init__(self, author_id, name, biography): self.author_id = author_id self.name = name self.biography = biography self.books = [] class Borrower: def __init__(self, borrower_id, name, contact_info, membership_date): self.borrower_id = borrower_id self.name = name self.contact_info = contact_info self.membership_date = membership_date self.borrowed_books = [] class Transaction: def __init__(self, book, borrower, loan_date, due_date): self.book = book self.borrower = borrower self.loan_date = loan_date self.due_date = due_date self.return_date = None class LibraryDBMS: def __init__(self): self.books = {} self.authors = {} self.borrowers = {} self.transactions = [] Book Management def add_book(self, isbn, title, author, genre, publication_date): book = Book(isbn, title, author, genre, publication_date) self.books[isbn] = book if author.author_id not in self.authors: self.authors[author.author_id] = author self.authors[author.author_id].books.append(book) def update_book(self, isbn, title=None, author=None, genre=None, publication_date=None): book = self.books.get(isbn) if book: if title: book.title = title if author: book.author = author if genre: book.genre = genre if publication_date: book.publication_date = publication_date def remove_book(self, isbn): book = self.books.get(isbn) if book and not book.is_borrowed: self.books.pop(isbn) for author in self.authors.values(): if book in author.books: author.books.remove(book) Author Management def add_author(self, author_id, name, biography): author = Author(author_id, name, biography) self.authors[author_id] = author def update_author(self, author_id, name=None, biography=None): author = self.authors.get(author_id) if author: if name: author.name = name if biography: author.biography = biography def remove_author(self, author_id): author = self.authors.get(author_id) if author and len(author.books) == 0: self.authors.pop(author_id) Borrower Management def add_borrower(self, borrower_id, name, contact_info, membership_date): borrower = Borrower(borrower_id, name, contact_info, membership_date) self.borrowers[borrower_id] = borrower def update_borrower(self, borrower_id, name=None, contact_info=None): borrower = self.borrowers.get(borrower_id) if borrower: if name: borrower.name = name if contact_info: borrower.contact_info = contact_info def remove_borrower(self, borrower_id): borrower = self.borrowers.get(borrower_id) if borrower and len(borrower.borrowed_books) == 0: self.borrowers.pop(borrower_id) Transaction Management def loan_book(self, isbn, borrower_id, loan_date, due_date): book = self.books.get(isbn) borrower = self.borrowers.get(borrower_id) if book and borrower and not book.is_borrowed: transaction = Transaction(book, borrower, loan_date, due_date) self.transactions.append(transaction) borrower.borrowed_books.append(book) book.is_borrowed = True def return_book(self, isbn, borrower_id, return_date): for transaction in self.transactions: if transaction.book.isbn == isbn and transaction.borrower.borrower_id == borrower_id and not transaction.return_date: transaction.return_date = return_date transaction.book.is_borrowed = False borrower = transaction.borrower borrower.borrowed_books.remove(transaction.book) overdue_days = (return_date - transaction.due_date).days fine = max(0, overdue_days * 1) # Assuming fine is 1 per day overdue return fine Search and Reporting def search_books(self, title=None, author_name=None, genre=None, isbn=None): results = [] for book in self.books.values(): if title and title.lower() not in book.title.lower(): continue if author_name and author_name.lower() not in book.author.name.lower(): continue if genre and genre.lower() != book.genre.lower(): continue if isbn and isbn != book.isbn: continue results.append(book) return results def generate_borrowed_books_report(self, overdue=False): report = [] for transaction in self.transactions: if not transaction.return_date: if overdue and transaction.due_date >= datetime.now(): continue report.append({ \'borrower_name\': transaction.borrower.name, \'book_title\': transaction.book.title, \'loan_date\': transaction.loan_date, \'due_date\': transaction.due_date }) return report def list_books_by_author_or_genre(self, author_name=None, genre=None): if author_name: for author in self.authors.values(): if author_name.lower() in author.name.lower(): return author.books if genre: return [book for book in self.books.values() if book.genre.lower() == genre.lower()]"},{"question":"Write a function `swapDIagonals(matrix)` that takes a 2D list (a square matrix) of integers as input, swaps the main diagonal with the anti-diagonal and returns the modified matrix. The main diagonal is from the top-left to the bottom-right, and the anti-diagonal is from the top-right to the bottom-left. # Function Signature ```python def swapDiagonals(matrix: List[List[int]]) -> List[List[int]]: ``` # Input - `matrix`: 2D list of integers representing a square matrix, where `1 <= len(matrix) <= 100` and all rows have the same length equal to the number of columns. # Output - A 2D list representing the modified matrix after swapping the diagonals. # Examples ```python Example 1: Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [3, 2, 1], [4, 5, 6], [9, 8, 7] ] Example 2: Input: matrix = [ [10, 11, 12, 13], [14, 15, 16, 17], [18, 19, 20, 21], [22, 23, 24, 25] ] Output: [ [13, 11, 12, 10], [14, 16, 15, 17], [18, 20, 19, 21], [25, 23, 24, 22] ] ``` # Constraints - The input matrix will always be square (`nxn`). - The elements of the matrix will be integers between `-10^9` and `10^9`.","solution":"def swapDiagonals(matrix): This function swaps the main diagonal with the anti-diagonal in a given square matrix. n = len(matrix) for i in range(n): main_diagonal_element = matrix[i][i] anti_diagonal_element = matrix[i][n - i - 1] # Swapping the elements matrix[i][i] = anti_diagonal_element matrix[i][n - i - 1] = main_diagonal_element return matrix"},{"question":"Develop a Python program that utilizes the Pandas library to preprocess a CSV dataset containing customer information. The dataset includes fields such as \'CustomerID\', \'Name\', \'Age\', \'Email\', \'PurchaseAmount\', and \'JoinDate\'. Your program should perform the following tasks: 1. Read the CSV dataset into a Pandas DataFrame. 2. Handle any missing or null values in the \'Age\' and \'PurchaseAmount\' columns by filling them with the mean value of their respective columns. 3. Convert the \'JoinDate\' column to datetime format and create a new column \'DaysSinceJoining\' that calculates the number of days each customer has been with the company. 4. Create a new column \'CustomerCategory\' that categorizes customers based on \'PurchaseAmount\': - \\"Low\\" for PurchaseAmount < 100, - \\"Medium\\" for 100 <= PurchaseAmount < 500, - \\"High\\" for PurchaseAmount >= 500. 5. Output the processed DataFrame and save it to a new CSV file named \'processed_customers.csv\'.","solution":"import pandas as pd def preprocess_customer_data(input_csv, output_csv): # Step 1: Read the CSV dataset into a Pandas DataFrame. df = pd.read_csv(input_csv) # Step 2: Handle any missing or null values in the \'Age\' and \'PurchaseAmount\' columns. df[\'Age\'].fillna(df[\'Age\'].mean(), inplace=True) df[\'PurchaseAmount\'].fillna(df[\'PurchaseAmount\'].mean(), inplace=True) # Step 3: Convert the \'JoinDate\' column to datetime format. df[\'JoinDate\'] = pd.to_datetime(df[\'JoinDate\']) # Create a new column \'DaysSinceJoining\' - number of days each customer has been with the company. df[\'DaysSinceJoining\'] = (pd.Timestamp(\'now\') - df[\'JoinDate\']).dt.days # Step 4: Create a new column \'CustomerCategory\' that categorizes customers based on \'PurchaseAmount\'. df[\'CustomerCategory\'] = pd.cut( df[\'PurchaseAmount\'], bins=[-float(\'inf\'), 100, 500, float(\'inf\')], labels=[\'Low\', \'Medium\', \'High\'] ) # Output the processed DataFrame and save it to a new CSV file named \'processed_customers.csv\'. df.to_csv(output_csv, index=False) return df"},{"question":"Create a function that takes a list of integers and returns a list of the squared values of those integers. The function should also handle cases where the input is not a list or contains non-integer elements by returning an appropriate error message. Example: input_list = [1, 2, 3, 4] Output: [1, 4, 9, 16] Erroneous Input Example: input_list = [1, \'two\', 3] Output: \\"Error: List contains non-integer elements\\"","solution":"def square_elements(input_list): Returns a list of squared values of the integers in the input list. If the input is not a list or contains non-integer elements, returns an error message. if not isinstance(input_list, list): return \\"Error: Input is not a list\\" squared_list = [] for element in input_list: if not isinstance(element, int): return \\"Error: List contains non-integer elements\\" squared_list.append(element ** 2) return squared_list"},{"question":"Given a 2D grid of size `m x n` representing an island map, where each cell is either \'1\' (representing land) or \'0\' (representing water), write a function to count the number of distinct islands in the grid. An island is surrounded by water and is formed by connecting adjacent \'1\'s horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Example 1: Input: grid = [ [\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"1\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"] ] Output: 1 Example 2: Input: grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] Output: 3 Constraints: - `m == grid.length` - `n == grid[0].length` - `1 <= m, n <= 300` - `grid[i][j]` is \'0\' or \'1\'","solution":"def numIslands(grid): if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' dfs(grid, i+1, j) dfs(grid, i-1, j) dfs(grid, i, j+1) dfs(grid, i, j-1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': count += 1 dfs(grid, i, j) return count"},{"question":"Design and implement a Python class to simulate a basic banking system. The class should allow users to create user accounts, deposit money, withdraw money, and check the balance. Ensure that the system handles common errors gracefully, such as attempting to withdraw more money than is available. Also, implement a method to display the transaction history for each account, which includes every deposit and withdrawal operation. The class should provide the following methods: - `create_account(self, account_number, user_name, initial_balance)`: Creates a new account with the given account number, user name, and initial balance. - `deposit(self, account_number, amount)`: Deposits the specified amount to the account with the given account number. - `withdraw(self, account_number, amount)`: Withdraws the specified amount from the account with the given account number. - `check_balance(self, account_number)`: Returns the current balance of the account with the given account number. - `get_transaction_history(self, account_number)`: Returns the transaction history of the account with the given account number. Example Usage: ```python bank = BankingSystem() bank.create_account(\'123456\', \'Alice\', 1000) bank.deposit(\'123456\', 500) bank.withdraw(\'123456\', 200) balance = bank.check_balance(\'123456\') history = bank.get_transaction_history(\'123456\') print(\'Balance:\', balance) print(\'Transaction History:\', history) ``` Expected Output: ``` Balance: 1300 Transaction History: [\'Deposit: 500\', \'Withdrawal: 200\'] ```","solution":"class BankingSystem: def __init__(self): self.accounts = {} def create_account(self, account_number, user_name, initial_balance): if account_number in self.accounts: raise ValueError(\\"Account number already exists.\\") if initial_balance < 0: raise ValueError(\\"Initial balance cannot be negative.\\") self.accounts[account_number] = { \\"user_name\\": user_name, \\"balance\\": initial_balance, \\"transactions\\": [] } def deposit(self, account_number, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") if account_number not in self.accounts: raise ValueError(\\"Account does not exist.\\") self.accounts[account_number][\\"balance\\"] += amount self.accounts[account_number][\\"transactions\\"].append(f\\"Deposit: {amount}\\") def withdraw(self, account_number, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if account_number not in self.accounts: raise ValueError(\\"Account does not exist.\\") if self.accounts[account_number][\\"balance\\"] < amount: raise ValueError(\\"Insufficient funds.\\") self.accounts[account_number][\\"balance\\"] -= amount self.accounts[account_number][\\"transactions\\"].append(f\\"Withdrawal: {amount}\\") def check_balance(self, account_number): if account_number not in self.accounts: raise ValueError(\\"Account does not exist.\\") return self.accounts[account_number][\\"balance\\"] def get_transaction_history(self, account_number): if account_number not in self.accounts: raise ValueError(\\"Account does not exist.\\") return self.accounts[account_number][\\"transactions\\"]"},{"question":"Create a Python script to simulate a simple banking system that handles basic transactions. Your program should be able to: 1. Create a new bank account with a unique account number and an initial balance. 2. Allow deposits into an account. 3. Allow withdrawals from an account, ensuring that the account has sufficient funds before the withdrawal. 4. Check the balance of an account by account number. 5. List all existing accounts with their respective balances. Design your system such that it can handle multiple accounts simultaneously. Implement appropriate error handling to manage invalid operations like withdrawing more than the current balance or accessing a non-existent account.","solution":"class Account: _account_number_counter = 1000 def __init__(self, initial_balance): self.account_number = Account._generate_account_number() self.balance = initial_balance @staticmethod def _generate_account_number(): Account._account_number_counter += 1 return Account._account_number_counter def deposit(self, amount): if amount > 0: self.balance += amount return self.balance else: raise ValueError(\\"Deposit amount must be positive\\") def withdraw(self, amount): if amount > self.balance: raise ValueError(\\"Insufficient funds\\") elif amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") else: self.balance -= amount return self.balance def get_balance(self): return self.balance class BankingSystem: def __init__(self): self.accounts = {} def create_account(self, initial_balance): if initial_balance < 0: raise ValueError(\\"Initial balance cannot be negative\\") account = Account(initial_balance) self.accounts[account.account_number] = account return account.account_number def deposit(self, account_number, amount): account = self._get_account(account_number) return account.deposit(amount) def withdraw(self, account_number, amount): account = self._get_account(account_number) return account.withdraw(amount) def get_balance(self, account_number): account = self._get_account(account_number) return account.get_balance() def list_accounts(self): return {account_number: account.get_balance() for account_number, account in self.accounts.items()} def _get_account(self, account_number): if account_number in self.accounts: return self.accounts[account_number] else: raise ValueError(\\"Account does not exist\\")"},{"question":"Create a program that simulates a simplified ecosystem of predator and prey animals. The simulation should take place on a 2D grid where each cell can either be empty, contain a prey animal, or contain a predator animal. The program should allow the user to define the initial population and position of each animal. The simulation should proceed in discrete time steps, where the following rules apply: - Prey animals can move to an adjacent empty cell or stay in place. - Predator animals can move to an adjacent cell containing a prey animal to eat it. - Prey animals reproduce after a certain number of steps. - Predator animals need to eat a prey animal within a certain number of steps to survive. The program should run the simulation for a user-defined number of steps and output the state of the grid at each step.","solution":"import random # Define constants EMPTY = 0 PREY = 1 PREDATOR = 2 # Directions for movement DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)] class Animal: def __init__(self, breed_steps): self.steps_since_last_breed = 0 self.breed_steps = breed_steps class Prey(Animal): def __init__(self, breed_steps): super().__init__(breed_steps) def move(self, grid, x, y): empty_cells = [(x + dx, y + dy) for dx, dy in DIRECTIONS if 0 <= x + dx < len(grid) and 0 <= y + dy < len(grid[0]) and grid[x + dx][y + dy] == EMPTY] if empty_cells: new_x, new_y = random.choice(empty_cells) grid[new_x][new_y] = PREY grid[x][y] = EMPTY return new_x, new_y return x, y def reproduce(self, grid, x, y): empty_cells = [(x + dx, y + dy) for dx, dy in DIRECTIONS if 0 <= x + dx < len(grid) and 0 <= y + dy < len(grid[0]) and grid[x + dx][y + dy] == EMPTY] if empty_cells: new_x, new_y = random.choice(empty_cells) grid[new_x][new_y] = PREY self.steps_since_last_breed = 0 def step(self, grid, x, y): new_x, new_y = self.move(grid, x, y) if self.steps_since_last_breed >= self.breed_steps: self.reproduce(grid, new_x, new_y) self.steps_since_last_breed += 1 class Predator(Animal): def __init__(self, breed_steps, starve_steps): super().__init__(breed_steps) self.starve_steps = starve_steps self.steps_since_last_eat = 0 def move(self, grid, x, y): prey_cells = [(x + dx, y + dy) for dx, dy in DIRECTIONS if 0 <= x + dx < len(grid) and 0 <= y + dy < len(grid[0]) and grid[x + dx][y + dy] == PREY] if prey_cells: new_x, new_y = random.choice(prey_cells) grid[new_x][new_y] = PREDATOR grid[x][y] = EMPTY self.steps_since_last_eat = 0 return new_x, new_y else: empty_cells = [(x + dx, y + dy) for dx, dy in DIRECTIONS if 0 <= x + dx < len(grid) and 0 <= y + dy < len(grid[0]) and grid[x + dx][y + dy] == EMPTY] if empty_cells: new_x, new_y = random.choice(empty_cells) grid[new_x][new_y] = PREDATOR grid[x][y] = EMPTY return new_x, new_y self.steps_since_last_eat += 1 return x, y def reproduce(self, grid, x, y): empty_cells = [(x + dx, y + dy) for dx, dy in DIRECTIONS if 0 <= x + dx < len(grid) and 0 <= y + dy < len(grid[0]) and grid[x + dx][y + dy] == EMPTY] if empty_cells: new_x, new_y = random.choice(empty_cells) grid[new_x][new_y] = PREDATOR self.steps_since_last_breed = 0 def starve(self, grid, x, y): if self.steps_since_last_eat >= self.starve_steps: grid[x][y] = EMPTY def step(self, grid, x, y): new_x, new_y = self.move(grid, x, y) if self.steps_since_last_breed >= self.breed_steps: self.reproduce(grid, new_x, new_y) self.starve(grid, new_x, new_y) self.steps_since_last_breed += 1 def create_grid(rows, cols): return [[EMPTY for _ in range(cols)] for _ in range(rows)] def place_animals(grid, animals): for (x, y), animal in animals: if isinstance(animal, Prey): grid[x][y] = PREY elif isinstance(animal, Predator): grid[x][y] = PREDATOR def print_grid(grid): for row in grid: print(\\" \\".join([\\".\\" if cell == EMPTY else \\"P\\" if cell == PREY else \\"C\\" for cell in row])) def run_simulation(rows, cols, prey_breed_steps, predator_breed_steps, predator_starve_steps, initial_prey, initial_predators, steps): grid = create_grid(rows, cols) animals = initial_prey + initial_predators place_animals(grid, animals) animal_objects = { (x, y): animal for (x, y), animal in animals } for step in range(steps): print(f\\"Step {step + 1}\\") print_grid(grid) new_animal_objects = {} for (x, y), animal in list(animal_objects.items()): if (x, y) in animal_objects: if isinstance(animal, Prey): animal.step(grid, x, y) elif isinstance(animal, Predator): animal.step(grid, x, y) if grid[x][y] == EMPTY: del animal_objects[(x, y)] new_animal_objects[(x, y)] = animal animal_objects = new_animal_objects print(\\"Final state\\") print_grid(grid) # Example usage initial_prey = [((1, 1), Prey(breed_steps=3)), ((3, 4), Prey(breed_steps=3))] initial_predators = [((2, 2), Predator(breed_steps=5, starve_steps=3))] run_simulation(5, 5, prey_breed_steps=3, predator_breed_steps=5, predator_starve_steps=3, initial_prey=initial_prey, initial_predators=initial_predators, steps=10)"},{"question":"Given a list of integers, write a Python function that finds and returns the longest increasing subsequence within the list. For example, for the list [10, 22, 9, 33, 21, 50, 41, 60, 80], the longest increasing subsequence is [10, 22, 33, 50, 60, 80]. ```python def longest_increasing_subsequence(nums): # (Your code here) # Example usage: nums = [10, 22, 9, 33, 21, 50, 41, 60, 80] print(longest_increasing_subsequence(nums)) # Output: [10, 22, 33, 50, 60, 80] ```","solution":"def longest_increasing_subsequence(nums): Returns the longest increasing subsequence in the list of integers nums. if not nums: return [] n = len(nums) lengths = [1] * n previous_indices = [-1] * n # Compute lengths of longest increasing subsequences ending at each index for i in range(1, n): for j in range(i): if nums[i] > nums[j] and lengths[i] < lengths[j] + 1: lengths[i] = lengths[j] + 1 previous_indices[i] = j # Find the index of the maximum length of increasing subsequence max_length_index = lengths.index(max(lengths)) # Reconstruct the longest increasing subsequence lis = [] while max_length_index != -1: lis.append(nums[max_length_index]) max_length_index = previous_indices[max_length_index] return lis[::-1]"},{"question":"Craft a function that receives a dictionary as input, where keys represent student names and values are lists of grades (ranging from 0 to 100). The function should return a new dictionary where each student\'s name is mapped to their average grade, rounded to the nearest integer. Additionally, the function must handle cases with incorrect data types, such as non-numeric grades and ensure that it skips calculating the average for students without grades or invalid entries. Provide an example dictionary and your expected output for illustration. example_dict = { \\"Alice\\": [88, 92, 77], \\"Bob\\": [92, 95, 99, 105], # invalid grade 105 \\"Charlie\\": [80, 70, \\"91\\"], # invalid non-numeric grade \\"Diana\\": [] } Expected output: { \\"Alice\\": 86, \\"Bob\\": 95, # 105 skipped \\"Charlie\\": 75, \\"Diana\\": None } Erroneous Code: def average_grades(students_grades): avg_grades = {} for student, grades in students_grades.items(): if not grades: avg_grades[student] = None continue avg_grades[student] = int(sum(grades) / len(grades)) return avg_grades # Correct the above function to handle the cases of invalid grades and provide the correct result.","solution":"def average_grades(students_grades): Calculate the average grade for each student, rounding to the nearest integer. Invalid grades are skipped. If all grades are invalid or there are no grades, the average is None. avg_grades = {} for student, grades in students_grades.items(): valid_grades = [g for g in grades if isinstance(g, (int, float)) and 0 <= g <= 100] if not valid_grades: avg_grades[student] = None else: avg_grades[student] = round(sum(valid_grades) / len(valid_grades)) return avg_grades"},{"question":"Write a function named `is_palindromic_number` that takes an integer `n` as an argument and returns `True` if the given number is palindromic; otherwise, return `False`. A palindromic number is one that remains the same when its digits are reversed. **Examples:** ``` is_palindromic_number(121) => True is_palindromic_number(123) => False is_palindromic_number(-121) => False ``` **Constraints:** - The input integer can be negative, zero, or positive. - You should handle edge cases such as numbers with a single digit.","solution":"def is_palindromic_number(n): Checks if a given number is palindromic. Args: n (int): The number to check. Returns: bool: True if the number is palindromic, False otherwise. # Convert number to string num_str = str(n) # Check if reversed string is the same as the original return num_str == num_str[::-1]"},{"question":"Write a function in Python that takes a list of integers as input and returns a new list containing only the prime numbers from the original list. Additionally, the function should return the count of these prime numbers in the new list. Provide any necessary helper functions and ensure your solution has an efficient time complexity.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_numbers_and_count(nums): Returns a list containing only the prime numbers from the original input list, and the count of these prime numbers. prime_list = [num for num in nums if is_prime(num)] count_of_primes = len(prime_list) return prime_list, count_of_primes"},{"question":"Create a function that simulates a simple version of a navigation system for a robot on a 2D grid. The robot can move up, down, left, or right, and its position is tracked with coordinates starting from (0, 0). The function should receive a list of strings representing the movements (e.g., [\\"up\\", \\"down\\", \\"left\\", \\"right\\"]) and return the final coordinates of the robot. Ensure to handle edge cases where the movements list might be empty or contain invalid directions.","solution":"def navigate_robot(movements): Simulates a simple version of a navigation system for a robot on a 2D grid. Parameters: movements (list of str): List of movements (e.g., [\\"up\\", \\"down\\", \\"left\\", \\"right\\"]). Returns: tuple: Final coordinates of the robot (x, y). x, y = 0, 0 # Start at the origin (0, 0) for move in movements: if move == \\"up\\": y += 1 elif move == \\"down\\": y -= 1 elif move == \\"left\\": x -= 1 elif move == \\"right\\": x += 1 # Invalid moves are ignored return (x, y)"},{"question":"Design a class to validate and format phone numbers. Your class should have two methods: one for validating the phone number\'s format and one for reformatting a valid phone number. Use the North American Numbering Plan (NANP) format for the phone number, which is of the form \'NXX-NXX-XXXX\' where N is any digit from 2 to 9 and X is any digit from 0 to 9. If the input number is invalid, the methods should return an appropriate message. Implement the following methods in a class `PhoneNumberFormatter`: ```python class PhoneNumberFormatter: def validate_number(self, phone: str): Validate if the input string is in the format \'NXX-NXX-XXXX\' where N is any digit from 2 to 9 and X is any digit from 0 to 9. Args: phone (str): The phone number as a string. Returns: str: \\"Valid number\\" if the number matches the format, otherwise \\"Invalid number\\". >>> validate_number(\'234-567-8901\') \'Valid number\' >>> validate_number(\'123-456-7890\') \'Invalid number\' >>> validate_number(\'111-222-3333\') \'Invalid number\' def reformat_number(self, phone: str): Reformat a valid phone number by replacing dashes with spaces. If the phone number is invalid, return an appropriate message. Args: phone (str): The valid phone number as a string. Returns: str: The reformatted phone number with spaces instead of dashes if valid, otherwise \\"Invalid number\\". >>> reformat_number(\'234-567-8901\') \'234 567 8901\' >>> reformat_number(\'123-456-7890\') \'Invalid number\' >>> reformat_number(\'111-222-3333\') \'Invalid number\' ```","solution":"import re class PhoneNumberFormatter: def validate_number(self, phone: str): Validate if the input string is in the format \'NXX-NXX-XXXX\' where N is any digit from 2 to 9 and X is any digit from 0 to 9. Args: phone (str): The phone number as a string. Returns: str: \\"Valid number\\" if the number matches the format, otherwise \\"Invalid number\\". pattern = re.compile(r\'^[2-9][0-9]{2}-[2-9][0-9]{2}-[0-9]{4}\') if pattern.match(phone): return \\"Valid number\\" return \\"Invalid number\\" def reformat_number(self, phone: str): Reformat a valid phone number by replacing dashes with spaces. If the phone number is invalid, return an appropriate message. Args: phone (str): The valid phone number as a string. Returns: str: The reformatted phone number with spaces instead of dashes if valid, otherwise \\"Invalid number\\". if self.validate_number(phone) == \\"Valid number\\": return phone.replace(\'-\', \' \') return \\"Invalid number\\""},{"question":"Write a Python function that takes in a list of dictionaries, each representing a student\'s grades in different subjects, and calculates the average grade for each student. The function should return a new list of dictionaries with the student\'s name and their average grade. For example, given the following input: ```python students_grades = [ {\\"name\\": \\"Alice\\", \\"math\\": 90, \\"science\\": 80, \\"history\\": 85}, {\\"name\\": \\"Bob\\", \\"math\\": 75, \\"science\\": 95, \\"history\\": 78}, {\\"name\\": \\"Charlie\\", \\"math\\": 85, \\"science\\": 89, \\"history\\": 92} ] ``` The function should return: ```python [ {\\"name\\": \\"Alice\\", \\"average\\": 85.0}, {\\"name\\": \\"Bob\\", \\"average\\": 82.67}, {\\"name\\": \\"Charlie\\", \\"average\\": 88.67} ] ``` Ensure that the average grade is rounded to two decimal places. Write the complete function that performs this task.","solution":"def calculate_average_grades(students_grades): Calculate the average grade for each student. Args: students_grades (list of dict): A list of dictionaries, each representing a student\'s grades in different subjects. Returns: list of dict: A list of dictionaries with each student\'s name and their average grade. result = [] for student in students_grades: name = student[\'name\'] total_grades = 0 num_subjects = 0 for subject, grade in student.items(): if subject != \'name\': total_grades += grade num_subjects += 1 average_grade = round(total_grades / num_subjects, 2) result.append({\'name\': name, \'average\': average_grade}) return result"},{"question":"Determine if an Array can be Divided into K Non-Overlapping Subarrays with Equal Sums Given an array `nums` and an integer `k`, determine if the array can be divided into `k` non-overlapping subarrays with equal sums. Example 1: Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4 Output: true Explanation: The array can be partitioned into 4 subarrays with equal sums: [4, 3], [2, 3], [5], and [2, 1]. Example 2: Input: nums = [1, 2, 3, 4], k = 3 Output: false Explanation: It\'s not possible to divide the array into 3 subarrays with equal sums. Constraints: - The length of `nums` is in the range `[1, 16]`. - `1 <= nums[i] <= 10^4` - `1 <= k <= len(nums)` Hints: 1. If the total sum of the array is not divisible by `k`, return false. 2. Use backtracking to try out all possible partitions.","solution":"def can_partition_k_subsets(nums, k): Determine if an array can be partitioned into k non-overlapping subarrays with equal sums. Args: nums (List[int]): The list of integers. k (int): Number of subarrays. Returns: bool: True if the array can be partitioned into k subarrays with equal sums, False otherwise. total_sum = sum(nums) if total_sum % k != 0: return False target = total_sum // k nums.sort(reverse=True) used = [False] * len(nums) def backtrack(start_index, current_sum, k): if k == 1: return True if current_sum == target: return backtrack(0, 0, k - 1) for i in range(start_index, len(nums)): if not used[i] and current_sum + nums[i] <= target: used[i] = True if backtrack(i + 1, current_sum + nums[i], k): return True used[i] = False return False return backtrack(0, 0, k)"},{"question":"Write a function in Python that takes in a string and returns the number of its unique substrings. A substring is any contiguous sequence of characters within the string. The function should be case-sensitive and efficient enough to handle strings up to length 1000. Test it with these strings: \\"abcabc\\" and \\"ababa\\".","solution":"def count_unique_substrings(s: str) -> int: Returns the number of unique substrings in the given string. unique_substrings = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): unique_substrings.add(s[i:j]) return len(unique_substrings)"},{"question":"Write a function called `array_to_dict` that takes two lists of equal length, one containing keys (strings) and the other containing values, and returns a dictionary mapping each key to its corresponding value. Ensure that the function handles edge cases where the lists might be empty. For example, calling `array_to_dict([\'a\', \'b\', \'c\'], [1, 2, 3])` should return `{\'a\': 1, \'b\': 2, \'c\': 3}`. If the input lists are empty, the function should return an empty dictionary.","solution":"def array_to_dict(keys, values): Returns a dictionary mapping each key to its corresponding value. :param keys: List of keys (strings). :param values: List of values. :return: A dictionary with keys mapped to corresponding values. if len(keys) != len(values): raise ValueError(\\"Both lists must have the same length\\") return dict(zip(keys, values))"},{"question":"--- Background You are a data scientist working for a large retail company. You are given a dataset containing customer transactions, and your task is to identify potential frauds by recognizing anomalous transaction patterns. You will use Python and its data analysis libraries to process and analyze the data. Dataset The dataset contains the following columns: - `TransactionID` (int): Unique identifier for the transaction - `CustomerID` (int): Unique identifier for the customer - `TransactionAmount` (float): The amount of the transaction - `TransactionDate` (str): The date and time of the transaction in the format \'YYYY-MM-DD HH:MM:SS\' - `PaymentMethod` (str): The method used for payment (e.g., \'Credit Card\', \'Debit Card\', \'Paypal\', etc.) - `TransactionType` (str): The type of transaction (e.g., \'Purchase\', \'Refund\', etc.) Requirements 1. Load the dataset and convert `TransactionDate` to a datetime object. 2. Perform exploratory data analysis to understand the distribution and statistics of the transactions. 3. Identify anomalous transactions based on the following: - Transactions with an amount higher than the 99th percentile of transaction amounts. - Multiple transactions made by the same customer within a short period (e.g., 1 minute). 4. Create a summary report listing the `TransactionID` and `CustomerID` of these anomalous transactions. Implementation Guidelines 1. Use Pandas for data manipulation and analysis. 2. Use Matplotlib or Seaborn for visualizing the data distributions. 3. Your code should be modular and well-commented. Python third-party packages required ```python pandas==1.3.3 matplotlib==3.4.3 seaborn==0.11.2 ``` Example Output ```plaintext Anomalous Transactions Report ----------------------------- Transactions with an amount higher than the 99th percentile: TransactionID | CustomerID 123456 | 7890 234567 | 8901 ... Multiple transactions by the same customer within 1 minute: TransactionID | CustomerID 345678 | 9012 456789 | 1234 ... ``` --- Role: You are a data scientist; your goal is to analyze the dataset for anomalous transactions as described and produce a summary report. Requirements: Based on the given dataset format, follow the implementation guidelines to identify anomalous transactions and generate the summary report. Use proper code structure and documentation. Attention: Ensure the correctness of your analysis and handling of datetime conversions. Required Python third-party packages Provided in requirements.txt format. Required Other language third-party packages No third-party packages needed. Full API spec Not applicable. This task does not require an API. Logic Analysis ```python [ (\\"load_data.py\\", \\"load_dataset\\"), (\\"eda.py\\", \\"explore_data\\"), (\\"anomalies.py\\", \\"identify_anomalies\\"), (\\"report.py\\", \\"generate_report\\") ] ``` Task list ```python [ \\"load_data.py\\", \\"eda.py\\", \\"anomalies.py\\", \\"report.py\\" ] ``` Shared Knowledge ```python Utilities for loading data: - Use pd.read_csv() to load the dataset. Utilities for datetime conversion: - Convert \'TransactionDate\' to datetime using pd.to_datetime() Data visualization: - Use Matplotlib or Seaborn for visualizing distribution of \'TransactionAmount\' Anomaly detection criteria: - 99th percentile based on \'TransactionAmount\' - Transactions by the same customer within 1 minute Specify any constants or thresholds used in analysis. ``` Anything UNCLEAR Make sure to clarify any assumptions, such as how to handle missing or invalid data entries.","solution":"import pandas as pd def load_dataset(file_path): Load the dataset and convert \'TransactionDate\' to datetime. Args: file_path (str): The path to the csv file. Returns: pd.DataFrame: The loaded dataframe with \'TransactionDate\' as datetime. data = pd.read_csv(file_path) data[\'TransactionDate\'] = pd.to_datetime(data[\'TransactionDate\']) return data def explore_data(data): Perform exploratory data analysis. Args: data (pd.DataFrame): The transaction data. Returns: dict: Summary statistics of the transaction amounts. summary = data[\'TransactionAmount\'].describe() return summary def identify_anomalies(data): Identify anomalous transactions: 1. Transactions with an amount higher than the 99th percentile. 2. Multiple transactions made by the same customer within 1 minute. Args: data (pd.DataFrame): The transaction data. Returns: pd.DataFrame: Transactions flagged as anomalous. anomalies = pd.DataFrame(columns=data.columns) # 1. Transactions with an amount higher than the 99th percentile threshold = data[\'TransactionAmount\'].quantile(0.99) high_amount_anomalies = data[data[\'TransactionAmount\'] > threshold] # 2. Multiple transactions by the same customer within 1 minute data = data.sort_values(by=[\'CustomerID\', \'TransactionDate\']) data[\'TimeDiff\'] = data.groupby(\'CustomerID\')[\'TransactionDate\'].diff().dt.total_seconds() short_period_anomalies = data[data[\'TimeDiff\'] <= 60] anomalies = pd.concat([high_amount_anomalies, short_period_anomalies]) return anomalies def generate_report(anomalies): Generate a summary report of anomalous transactions. Args: anomalies (pd.DataFrame): The anomalous transactions. Returns: pd.DataFrame: The summary report with TransactionID and CustomerID. summary_report = anomalies[[\'TransactionID\', \'CustomerID\']] print(\\"Anomalous Transactions Report\\") print(\\"-----------------------------\\") high_amount = anomalies[anomalies[\'TransactionAmount\'] > anomalies[\'TransactionAmount\'].quantile(0.99)] short_period = anomalies[anomalies[\'TimeDiff\'] <= 60].drop(columns=\'TimeDiff\') print(\\"nTransactions with an amount higher than the 99th percentile:\\") print(high_amount[[\'TransactionID\', \'CustomerID\']].to_string(index=False)) print(\\"nMultiple transactions by the same customer within 1 minute:\\") print(short_period[[\'TransactionID\', \'CustomerID\']].to_string(index=False)) return summary_report"},{"question":"Write a Python function that simulates a simple version of the Minesweeper game. The function should take the size of the board and an array of coordinates where bombs are placed as input. It should return a board where each cell contains the number of bombs in the adjacent cells (including diagonals). For cells containing bombs, place a `-1` in those positions. Example Input: ``` board_size = (3, 3) bombs = [(0, 0), (1, 1)] ``` Example Output: ``` [[-1, 1, 0], [1, -1, 1], [0, 1, 1]] ``` Note: The board size (n x m) and positions in the bombs array are 0-indexed.","solution":"def minesweeper(board_size, bombs): Simulates a Minesweeper board. Parameters: board_size (tuple): A tuple representing the size of the board (rows, cols). bombs (list): A list of tuples where each tuple contains coordinates of a bomb. Returns: list: A 2D list representing the Minesweeper board. rows, cols = board_size board = [[0] * cols for _ in range(rows)] for bomb in bombs: r, c = bomb board[r][c] = -1 for i in range(r-1, r+2): for j in range(c-1, c+2): if 0 <= i < rows and 0 <= j < cols and board[i][j] != -1: board[i][j] += 1 return board"},{"question":"You are given a list of positive integers representing the heights of pillars standing in a row from left to right. Your task is to compute the maximum amount of water that can be trapped between the pillars after a rain. Each pillar\'s width is considered to be `1`. The height of each pillar is represented by an element in the array `heights`. Write a function `trapWater(heights)` that takes an array of integers as input and returns the maximum amount of water trapped. # Example Example 1 Input: heights = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The surface is represented in the form: ``` | | | | | | | | |_ _|_ _ _| |_|_ _|_ _ _ ``` Where the maximum amount of water that can be trapped is 1 unit at index 2, 1 unit at index 4, 2 units between indexes 5 to 7, and 2 units between indexes 8 to 10. Example 2 Input: heights = [4,2,0,3,2,5] Output: 9 Explanation: The surface is represented in the form: ``` | | | | | | | | |_|_ _ |_ _|_ |_|_|_ _ ``` Where the maximum amount of water that can be trapped is 6 units between indexes 2 to 5 and 3 units between indexes 3 to 5. # Constraints * `1 <= heights.length <= 2 * 10^4` * `0 <= heights[i] <= 10^5` # Notes - You can assume it will always rain so there will be no dry surface areas. - The space between two overlapping pillars doesn\'t trap any water.","solution":"def trapWater(heights): Returns the maximum amount of water that can be trapped after raining. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Given an array of integers, write a function to determine if there can be a way to separate this array into two parts such that the product of the integers in both parts is the same. Consider the following examples: Example 1: Input: nums = [1, 2, 3, 6] Output: true Explanation: The array can be divided into [1, 6] and [2, 3] where the products are 6 and 6 respectively. Example 2: Input: nums = [1, 5, 11, 5] Output: false Explanation: There is no way to divide the array such that the product of the integers in both parts is identical. Constraints: - 1 <= nums.length <= 100 - 1 <= nums[i] <= 50 You can only use each integer from the array once and must use all integers in the array.","solution":"def can_partition(nums): Determines if there is a way to partition nums into two parts such that the products of the integers in both parts are equal. from functools import lru_cache from math import prod total_prod = prod(nums) # If total product is not even, we cannot split into two equal products if total_prod % 2 != 0: return False target = total_prod // 2 n = len(nums) # Use memoization to avoid repeated calculation @lru_cache(None) def dfs(index, curr_prod): if curr_prod == target: return True if index == n or curr_prod > target: return False # Include nums[index] in our set or exclude nums[index] return dfs(index+1, curr_prod * nums[index]) or dfs(index+1, curr_prod) return dfs(0, 1)"},{"question":"Write a program that takes a list of integers and returns the maximum sum of any contiguous subarray within the list, using the principles of Kadane\'s Algorithm. Ensure your solution is efficient and can handle both positive and negative integers within the list. The program should include a function `max_contiguous_subarray_sum(arr)` that takes an array of integers as input and returns the maximum possible sum of a contiguous subarray.","solution":"def max_contiguous_subarray_sum(arr): Returns the maximum sum of any contiguous subarray within the list. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function that determines if a given string is a palindrome, ignoring spaces, punctuation, and capitalization. Also, correct the error in the provided code snippet which aims to count the number of vowels in a given string. Given code snippet with error: ```python def count_vowels(s): vowels = \\"aeiouAEIOU\\" count = 0 for char in s: if char in vowels: count += 1 return count s = \\"Example String\\" print(count_vowels(s)) ```","solution":"import re def is_palindrome(s): Determines if a given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lower case filtered_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the string is equal to its reverse return filtered_s == filtered_s[::-1] def count_vowels(s): Counts the number of vowels in a given string. vowels = \\"aeiouAEIOU\\" count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"Create a function named `generate_fibonacci(n)` in Python which takes a single integer `n` as input and returns the first `n` numbers in the Fibonacci series as a list. Ensure that the function handles invalid input gracefully by returning an appropriate error message if `n` is not a positive integer. Use appropriate exception handling to manage any potential runtime errors. Example: ```python print(generate_fibonacci(5)) # Output: [0, 1, 1, 2, 3] print(generate_fibonacci(-3)) # Output: \\"Error: Input must be a positive integer.\\" print(generate_fibonacci(\\"a\\")) # Output: \\"Error: Input must be a positive integer.\\" ```","solution":"def generate_fibonacci(n): Returns the first `n` numbers in the Fibonacci series as a list. Handles invalid input gracefully. try: n = int(n) if n <= 0: return \\"Error: Input must be a positive integer.\\" except ValueError: return \\"Error: Input must be a positive integer.\\" fib_series = [0, 1] if n == 1: return [0] elif n == 2: return fib_series for i in range(2, n): next_value = fib_series[-1] + fib_series[-2] fib_series.append(next_value) return fib_series[:n]"},{"question":"Given a list of integers where every element appears twice except for one, write a function to find that single one. Your solution should have a linear runtime complexity and make use of constant space.","solution":"def single_number(nums): Given a list of integers where every element appears twice except for one, finds that single one. Uses XOR operation to achieve linear runtime complexity and constant space. result = 0 for num in nums: result ^= num return result"},{"question":"Write a Python function `transform_list(lst)` that takes a list of integers `lst` and returns a new list where each element is squared and then added by two. If the input list is empty, the function should return an empty list. Example: ```python def transform_list(lst): # Your code here # Example Usage: input_list = [1, 2, 3, 4] print(transform_list(input_list)) # Output: [3, 6, 11, 18] input_list = [] print(transform_list(input_list)) # Output: [] ``` Handle edge cases such as non-integer elements in the list by raising a `ValueError` with an appropriate message. Example: ```python try: input_list = [1, \\"a\\", 3] print(transform_list(input_list)) except ValueError as e: print(e) # Output: List must contain only integers. ```","solution":"def transform_list(lst): Returns a new list where each element is squared and then added by 2. Raises ValueError if list contains non-integer elements. if not all(isinstance(x, int) for x in lst): raise ValueError(\\"List must contain only integers.\\") return [(x * x) + 2 for x in lst]"},{"question":"Write a Python function that determines whether a given string contains properly nested and matched brackets. The string may include the following types of brackets: (), [], {}, <>. Your function should return True if the string consists of matching brackets, and False otherwise. Assume that the string only contains these characters and no other characters. The length of the string can be up to 10^6. For example: - If the input string is \\"([])<>{}\\", your function should return True. - If the input string is \\"([)]\\", your function should return False. - If the input string is \\"\\", your function should return True (an empty string is considered properly nested).","solution":"def is_bracket_sequence_valid(s): Determines whether a given string contains properly nested and matched brackets. Returns True if the string consists of matching brackets, and False otherwise. stack = [] bracket_pair = {\')\': \'(\', \']\': \'[\', \'}\': \'{\', \'>\': \'<\'} for char in s: if char in bracket_pair.values(): # opening brackets stack.append(char) elif char in bracket_pair: # closing brackets if stack and stack[-1] == bracket_pair[char]: stack.pop() else: return False return len(stack) == 0"},{"question":"Implement a function that takes a string representing a mathematical expression and checks if all the parentheses in the expression are correctly balanced. The parentheses should include both round brackets () and square brackets []. The function should return a boolean indicating whether or not the parentheses are balanced. For example: - Given the input expression \\"(a[0]+b[2c[6]]) – {24 + [14 – 5]}\\", - The function should return `True`, indicating that the parentheses are correctly balanced. - Given the input expression \\"f(e(d))}{}\\", - The function should return `False`, indicating that the parentheses are not correctly balanced. - Given the input expression \\"((a[{b}]))\\", - The function should return `True`, indicating that the parentheses are correctly balanced. - Given the input expression \\"a[{b(c)d}e}\\", - The function should return `False`, indicating that the parentheses are not correctly balanced as there is an unmatched round bracket. Write the function such that it handles a mix of different types and multiple nested levels of parentheses appropriately.","solution":"def is_balanced(expression): Checks if all the parentheses in the given string are balanced. The parentheses include both round brackets () and square brackets []. Parameters: expression (str): The input string containing the mathematical expression. Returns: bool: True if the parentheses are balanced, False otherwise. stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in expression: if char in \\"([{\\": stack.append(char) elif char in \\")]}\\": if not stack or stack[-1] != matching_bracket[char]: return False stack.pop() return not stack"},{"question":"Design a function that accepts a list of integers and a target integer value. This function should identify any triplet of integers within the list that, when summed, equals the target value. If such a trio is found, return the trio as a tuple of three integers. If no such triplet exists, return an empty tuple. The function should aim for an optimal solution in terms of time complexity. **Example:** Input: `find_triplet([1, 2, 3, 4, 5, 6], 10)` Output: `(1, 3, 6)` Input: `find_triplet([1, 2, 3, 4, 5, 6], 20)` Output: `()`","solution":"def find_triplet(nums, target): Returns a triplet in the list of integers `nums` that sum up to `target`. If no such triplet exists, returns an empty tuple. nums.sort() n = len(nums) for i in range(n - 2): # Avoid duplicates for the first element if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == target: return (nums[i], nums[left], nums[right]) elif total < target: left += 1 else: right -= 1 return () # Example usage: # result = find_triplet([1, 2, 3, 4, 5, 6], 10) # print(result) # Output: (1, 3, 6)"},{"question":"# Evaluate and sort vehicles Suppose you’re given a list of dictionaries representing vehicles, each with key-value pairs for vehicle type, brand, horsepower, and cost. Write a Python function `evaluate_and_sort_vehicles` that accepts this list and sorts the vehicles primarily by vehicle type, secondarily by horsepower in descending order, and thirdly by cost in ascending order within each type. The function should: 1. Take a list of dictionaries `vehicles` as input. 2. Return a list of sorted dictionaries based on the criteria mentioned. Example input: ```python vehicles = [ {\'type\': \'car\', \'brand\': \'Honda\', \'horsepower\': 150, \'cost\': 20000}, {\'type\': \'bike\', \'brand\': \'Yamaha\', \'horsepower\': 100, \'cost\': 15000}, {\'type\': \'car\', \'brand\': \'Ford\', \'horsepower\': 200, \'cost\': 25000}, {\'type\': \'car\', \'brand\': \'Toyota\', \'horsepower\': 150, \'cost\': 18000}, {\'type\': \'bike\', \'brand\': \'Kawasaki\', \'horsepower\': 120, \'cost\': 14000}, ] ``` Expected output: ```python sorted_vehicles = [ {\'type\': \'bike\', \'brand\': \'Kawasaki\', \'horsepower\': 120, \'cost\': 14000}, {\'type\': \'bike\', \'brand\': \'Yamaha\', \'horsepower\': 100, \'cost\': 15000}, {\'type\': \'car\', \'brand\': \'Ford\', \'horsepower\': 200, \'cost\': 25000}, {\'type\': \'car\', \'brand\': \'Toyota\', \'horsepower\': 150, \'cost\': 18000}, {\'type\': \'car\', \'brand\': \'Honda\', \'horsepower\': 150, \'cost\': 20000}, ] ``` Your solution should include: 1. The `evaluate_and_sort_vehicles` function that takes the list as an argument. 2. An explanation of how sorting is achieved. Implement the function `evaluate_and_sort_vehicles` below:","solution":"def evaluate_and_sort_vehicles(vehicles): Sorts a list of vehicle dictionaries primarily by vehicle type, secondarily by horsepower in descending order, and thirdly by cost in ascending order. Args: vehicles (list of dict): List of vehicle dictionaries with keys \'type\', \'brand\', \'horsepower\', \'cost\'. Returns: list of dict: Sorted list of vehicles. return sorted(vehicles, key=lambda x: (x[\'type\'], -x[\'horsepower\'], x[\'cost\']))"},{"question":"Write a Python function to reverse the words in a sentence. The function should preserve the original spaces between the words and at the ends of the sentence. The function should return the reversed words within the original spacing structure. Here is a piece of erroneous code for reference: ```python def reverse_words(sentence): words = sentence.split(\' \') reversed_words = \' \'.join(words[::-1]) return reversed_words ``` Identify the error in the above code and correct it. The function should handle multiple consecutive spaces and trailing spaces correctly.","solution":"def reverse_words(sentence): Reverses the words in the sentence while preserving the initial spaces structure. words = sentence.split(\' \') reversed_words = [word for word in words[::-1]] return \' \'.join(reversed_words)"},{"question":"Create a Python function that takes a list of integers and returns a new list with duplicated adjacent elements removed. For instance, given the input list [1, 2, 2, 3, 4, 4, 4, 5], the function should return [1, 2, 3, 4, 5]. Ensure that the order of elements in the output list follows the first appearance of each unique element sequentially.","solution":"def remove_adjacent_duplicates(lst): Takes a list of integers and returns a new list with duplicated adjacent elements removed. if not lst: return [] result = [lst[0]] for i in range(1, len(lst)): if lst[i] != lst[i-1]: result.append(lst[i]) return result"},{"question":"Develop a Python script utilizing the Pandas and Matplotlib libraries to analyze a given sales dataset. First, load the dataset into a Pandas DataFrame and perform data cleansing steps, such as handling missing values and removing duplicates. Next, create several visualizations to help understand the sales trends over time. These visualizations should include: - A line plot showing monthly sales trends. - A bar plot comparing the total sales of different product categories. - A scatter plot analyzing the relationship between sales and discounts offered. Finally, use linear regression from the Scikit-learn library to model the relationship between sales and discounts. Evaluate the accuracy of your regression model using metrics such as R-squared and Mean Squared Error, and provide a brief report on your findings, discussing any observable trends and the effectiveness of discount strategies in driving sales.","solution":"import pandas as pd import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, r2_score import numpy as np def analyze_sales_data(file_path): # Load dataset data = pd.read_csv(file_path) # Perform data cleansing data.drop_duplicates(inplace=True) data.dropna(inplace=True) # Parse dates data[\'Date\'] = pd.to_datetime(data[\'Date\']) data[\'Month\'] = data[\'Date\'].dt.to_period(\'M\') # Monthly Sales Trend Line Plot monthly_sales = data.groupby(\'Month\')[\'Sales\'].sum() plt.figure(figsize=(12, 6)) monthly_sales.plot(kind=\'line\') plt.title(\'Monthly Sales Trend\') plt.ylabel(\'Total Sales\') plt.xlabel(\'Month\') plt.grid(True) plt.savefig(\'monthly_sales_trend.png\') plt.show() # Bar Plot of Total Sales by Product Category category_sales = data.groupby(\'Product_Category\')[\'Sales\'].sum() plt.figure(figsize=(12, 6)) category_sales.plot(kind=\'bar\') plt.title(\'Total Sales by Product Category\') plt.ylabel(\'Total Sales\') plt.xlabel(\'Product Category\') plt.savefig(\'category_sales.png\') plt.show() # Scatter Plot of Sales vs Discounts plt.figure(figsize=(12, 6)) plt.scatter(data[\'Discount\'], data[\'Sales\']) plt.title(\'Sales vs Discount Scatter Plot\') plt.xlabel(\'Discount\') plt.ylabel(\'Sales\') plt.savefig(\'sales_vs_discount.png\') plt.show() # Linear Regression Analysis X = data[[\'Discount\']].values y = data[\'Sales\'].values reg = LinearRegression() reg.fit(X, y) y_pred = reg.predict(X) mse = mean_squared_error(y, y_pred) r2 = r2_score(y, y_pred) report = { \'Coefficient\': reg.coef_[0], \'Intercept\': reg.intercept_, \'Mean Squared Error\': mse, \'R-squared\': r2 } with open(\'regression_report.txt\', \'w\') as f: for key, value in report.items(): f.write(f\\"{key}: {value}n\\") return report"},{"question":"Write a code to find the longest consecutive subsequence of integers in a given array. For example, given the array [100, 4, 200, 1, 3, 2], the longest consecutive subsequence is [1, 2, 3, 4]. If there are multiple subsequences of the same length, return the one that appears first in the array.","solution":"def longest_consecutive_subsequence(arr): Returns the longest consecutive subsequence in the given array. if not arr: return [] num_set = set(arr) longest_streak = [] for num in arr: if num - 1 not in num_set: current_num = num current_streak = [current_num] while current_num + 1 in num_set: current_num += 1 current_streak.append(current_num) if len(current_streak) > len(longest_streak): longest_streak = current_streak return longest_streak"},{"question":"Write a Python function that receives a string containing a mathematical expression with positive integers and the operators `+`, `-`, `*`, and `/`, and returns the result of the expression as accurately as possible. Assume the input string is a valid expression without any parentheses, and standard operator precedence rules apply. Example: ``` Input: \\"3+5*2\\" Output: 13 Input: \\"100/5+2\\" Output: 22.0 ```","solution":"import operator def evaluate_expression(expression): Evaluates a mathematical expression string containing integers and \'+\', \'-\', \'*\', \'/\' operators with standard precedence rules. Args: expression (str): The input mathematical expression. Returns: float: The result of the evaluated expression. # Define the operator precedence ops = {\'+\': (1, operator.add), \'-\': (1, operator.sub), \'*\': (2, operator.mul), \'/\': (2, operator.truediv)} def parse_expression(expression): Parses the expression and converts it into a list of numbers and operators. num = \'\' tokens = [] for ch in expression: if ch in \'0123456789.\': num += ch else: if num: tokens.append(float(num)) num = \'\' tokens.append(ch) if num: tokens.append(float(num)) return tokens def shunting_yard(parsed_tokens): Transforms infix expression to postfix expression using the shunting-yard algorithm. out_queue = [] op_stack = [] for token in parsed_tokens: if isinstance(token, float): out_queue.append(token) elif token in ops: while (op_stack and op_stack[-1] in ops and ops[token][0] <= ops[op_stack[-1]][0]): out_queue.append(op_stack.pop()) op_stack.append(token) while op_stack: out_queue.append(op_stack.pop()) return out_queue def evaluate_postfix(postfix_tokens): Evaluates a postfix expression. stack = [] for token in postfix_tokens: if isinstance(token, float): stack.append(token) elif token in ops: b = stack.pop() a = stack.pop() stack.append(ops[token][1](a, b)) return stack[0] parsed_tokens = parse_expression(expression) postfix_tokens = shunting_yard(parsed_tokens) return evaluate_postfix(postfix_tokens)"},{"question":"Write a function `city_block_distance` that calculates the Manhattan distance between two points in a grid. The Manhattan distance between two points ((x_1, y_1)) and ((x_2, y_2)) is defined as (|x_2 - x_1| + |y_2 - y_1|. Given a list of points representing buildings in a city, return the point (building) that has the minimum Manhattan distance to all other points (buildings). If there are multiple such points, return the one with the smallest coordinates (i.e., lowest x, then lowest y). # Input - A list of tuples, `buildings`, where each tuple contains two integers (x) and (y) representing the coordinates of a building in the city. # Output - A tuple representing the coordinates of the building with the minimum Manhattan distance to all other buildings. # Example ```python buildings = [(1, 2), (3, 4), (5, 6)] print(city_block_distance(buildings)) # Output: (3, 4) buildings = [(1, 1), (2, 2), (3, 3)] print(city_block_distance(buildings)) # Output: (2, 2) ``` # Constraints - The list, `buildings`, will contain at least one point. - The coordinates will be non-negative integers. **Function Signature** ```python def city_block_distance(buildings: [(int, int)]) -> (int, int): pass ```","solution":"def city_block_distance(buildings): Return the building with the minimum Manhattan distance to all other buildings. If there are multiple such points, return the one with lowest x, then lowest y. # Calculating the median for both x and y coordinates x_coords = sorted(x for x, y in buildings) y_coords = sorted(y for x, y in buildings) # Median will give us the optimal coordinate minimizing Manhattan distance median_x = x_coords[(len(x_coords) - 1) // 2] median_y = y_coords[(len(y_coords) - 1) // 2] return (median_x, median_y)"},{"question":"Write a function that accepts a list of dictionaries and a key, and returns a new list of dictionaries with the highest value for the given key. If multiple dictionaries share the highest value for the given key, those should all be included in the resulting list. Example: ```python input_list = [ {\\"name\\": \\"Alice\\", \\"score\\": 85}, {\\"name\\": \\"Bob\\", \\"score\\": 92}, {\\"name\\": \\"Charlie\\", \\"score\\": 92}, {\\"name\\": \\"David\\", \\"score\\": 78} ] key = \\"score\\" # Output: [{\\"name\\": \\"Bob\\", \\"score\\": 92}, {\\"name\\": \\"Charlie\\", \\"score\\": 92}] ```","solution":"def get_highest_value_dicts(input_list, key): Returns a list of dictionaries with the highest value for the given key. :param input_list: List of dictionaries :param key: Key to look for the highest value :return: List of dictionaries with the highest value for the given key if not input_list or key not in input_list[0]: return [] # Find the highest value for the given key highest_value = max(d[key] for d in input_list if key in d) # Filter and return the dictionaries with the highest value return [d for d in input_list if d.get(key) == highest_value]"},{"question":"Create a Python function that takes a string as input and returns a set of all unique substrings that can be formed from it. A substring is defined as any sequence of consecutive characters within the string. Explain the complexity of your solution and discuss any trade-offs in terms of performance and memory usage.","solution":"def unique_substrings(s): Returns a set of all unique substrings that can be formed from the input string. substrings = set() n = len(s) for start in range(n): for end in range(start+1, n+1): substrings.add(s[start:end]) return substrings"},{"question":"Implement a class to manage tasks in a to-do list. Design a Python class called `ToDoList` that manages tasks within a to-do list application. Each task should have a title, description, and status (completed or not). The class should provide methods for adding a task, marking a task as completed, and retrieving all the tasks in the list, either completed or not. **Requirements**: 1. The class should be named `ToDoList`. 2. Each task should be a dictionary with the following keys: - `title`: A string representing the title of the task. - `description`: A string describing the task. - `completed`: A boolean indicating whether the task is completed or not (default is `False`). 3. `ToDoList` should have the following methods: - `add_task(title, description)` - Adds a new task to the to-do list. - `complete_task(title)` - Marks the task with the given title as completed. - `get_tasks(completed=None)` - Returns a list of tasks. If `completed` is `True`, it returns only completed tasks; if `False`, it returns only not completed tasks; if `None`, it returns all tasks. **Example**: ```python class ToDoList: def __init__(self): self.tasks = [] def add_task(self, title, description): task = {\'title\': title, \'description\': description, \'completed\': False} self.tasks.append(task) def complete_task(self, title): for task in self.tasks: if task[\'title\'] == title: task[\'completed\'] = True return def get_tasks(self, completed=None): if completed is None: return self.tasks else: return [task for task in self.tasks if task[\'completed\'] == completed] # Example usage: to_do_list = ToDoList() to_do_list.add_task(\'Buy groceries\', \'Milk, Eggs, Bread\') to_do_list.add_task(\'Call the bank\', \'Inquiry about charges\') print(to_do_list.get_tasks()) # List all tasks to_do_list.complete_task(\'Buy groceries\') print(to_do_list.get_tasks(completed=True)) # List only completed tasks print(to_do_list.get_tasks(completed=False)) # List only not completed tasks ``` Ensure your code handles edge cases, such as attempting to mark a non-existent task as completed.","solution":"class ToDoList: def __init__(self): self.tasks = [] def add_task(self, title, description): task = {\'title\': title, \'description\': description, \'completed\': False} self.tasks.append(task) def complete_task(self, title): for task in self.tasks: if task[\'title\'] == title: task[\'completed\'] = True return raise ValueError(f\\"Task with title \'{title}\' not found\\") def get_tasks(self, completed=None): if completed is None: return self.tasks else: return [task for task in self.tasks if task[\'completed\'] == completed]"},{"question":"You are given two strings, a source string `src` and a target string `tgt`. Write a function to determine if `src` can be transformed into `tgt` using the following operations: 1. Insert any single character at any position in `src`. 2. Delete any single character from `src`. 3. Replace any single character in `src` with another character. Your task is to compute the minimum number of operations required to transform `src` into `tgt`. For example, given `src = \\"kitten\\"` and `tgt = \\"sitting\\"`, the output should be `3` because: - Replace \'k\' with \'s\' - Replace \'e\' with \'i\' - Insert \'g\' at the end Implement a function `int min_operations_to_transform(src: str, tgt: str) -> int` to solve the problem.","solution":"def min_operations_to_transform(src: str, tgt: str) -> int: Calculate the minimum number of operations required to transform src into tgt. Parameters: src (str): The source string. tgt (str): The target string. Returns: int: The minimum number of operations. m, n = len(src), len(tgt) # Create a DP table dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the DP table for i in range(m + 1): dp[i][0] = i # src to empty string for j in range(n + 1): dp[0][j] = j # empty string to tgt # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if src[i - 1] == tgt[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min( dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1] # Replacement ) + 1 return dp[m][n]"},{"question":"Create a function that takes a list of integers and returns a list of those integers squared, while removing any negative integers and duplicates before squaring. def square_non_negatives(nums: list) -> list: Return a list of squared integers, removing negatives and duplicate values first. >>> square_non_negatives([1, -2, 3, -4, 5]) [1, 9, 25] >>> square_non_negatives([2, 2, -3, 3]) [4, 9] >>> square_non_negatives([-1, -2, -3]) []","solution":"def square_non_negatives(nums: list) -> list: Return a list of squared integers, removing negatives and duplicate values first. Args: nums: list of integers Returns: List of squared integers # Remove negative numbers and duplicates positive_unique_nums = set(num for num in nums if num >= 0) # Square the filtered numbers squared_nums = [num ** 2 for num in positive_unique_nums] return squared_nums"},{"question":"Write a function that takes a list of integers and a target value, and returns the indices of the two numbers that add up to the target value. If no such pair exists, return an empty list. Ensure the solution is optimized for performance.","solution":"def two_sum(nums, target): Returns indices of the two numbers that add up to the target value. :param nums: List of integers :param target: Target sum :return: List of indices of the two numbers num_map = {} for i, num in enumerate(nums): if target - num in num_map: return [num_map[target - num], i] num_map[num] = i return []"},{"question":"Write a Python function that takes a string as input and returns a dictionary with the count of each character in the string. Ensure that the function is case insensitive, meaning \'A\' and \'a\' are considered the same character. Additionally, provide an explanation of the time complexity and space complexity of your implemented solution in simple terms, so beginners can understand.","solution":"def char_count(s): Returns a dictionary with the count of each character in the string. The function is case insensitive. count_dict = {} s = s.lower() for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict # Explanation of the time complexity and space complexity: # Time Complexity: O(n), where n is the length of the input string. # We iterate over the string once, and each dictionary operation generally takes O(1) time. # Space Complexity: O(k), where k is the number of unique characters in the string. # We store each unique character in the dictionary with its corresponding count."},{"question":"Develop a function in Python that takes two input arrays - one containing product names and the other containing the corresponding prices of these products. The function should normalize the prices to a common base where the price of the cheapest product is scaled to 1. Then, remove any product whose normalized price exceeds a given threshold. The function should output the filtered list of product names and their corresponding normalized prices. Sample inputs may include: product_names = [\\"laptop\\", \\"phone\\", \\"tablet\\", \\"monitor\\"] product_prices = [1000, 500, 300, 700] threshold = 2.5 In this example, the normalized prices would be: [\\"laptop\\", \\"phone\\", \\"tablet\\", \\"monitor\\"] [3.33, 1.67, 1, 2.33] And if the threshold is 2.5, the resulting outputs would be: [\\"phone\\", \\"tablet\\", \\"monitor\\"] [1.67, 1, 2.33] Ensure that the mappings between product names and prices are preserved. Additionally, consider that the input arrays could contain a large number of elements, so devise an optimal solution.","solution":"def normalize_and_filter_products(product_names, product_prices, threshold): Normalize the prices to a common base where the price of the cheapest product is scaled to 1. Remove any product whose normalized price exceeds the given threshold. :param product_names: List of product names :param product_prices: List of corresponding prices :param threshold: Price threshold for normalized prices :return: A tuple of filtered product names and their corresponding normalized prices if not product_names or not product_prices or len(product_names) != len(product_prices): return [], [] min_price = min(product_prices) normalized_prices = [price / min_price for price in product_prices] filtered_product_names = [] filtered_normalized_prices = [] for name, price in zip(product_names, normalized_prices): if price <= threshold: filtered_product_names.append(name) filtered_normalized_prices.append(price) return filtered_product_names, filtered_normalized_prices"},{"question":"Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \\"\\". strings = [\\"intersperse\\", \\"internet\\", \\"interval\\", \\"intersect\\"]","solution":"def longest_common_prefix(strings): Returns the longest common prefix string among an array of strings. If there is no common prefix, return an empty string. if not strings: return \\"\\" # Sort the strings to get the least and most lexicographically strings.sort() # Take the first and the last string after sorting first = strings[0] last = strings[-1] # Compare characters of the first and last string common_prefix = [] for i in range(min(len(first), len(last))): if first[i] == last[i]: common_prefix.append(first[i]) else: break return \'\'.join(common_prefix)"},{"question":"Write a function in Python to find the intersection of two given lists. The intersection should be a list that contains only the unique elements that are present in both lists, without any duplicates. Input lists: [1, 2, 3, 4, 5], [3, 4, 5, 6, 7]","solution":"def list_intersection(lst1, lst2): Finds the intersection of two given lists without duplicates. Parameters: lst1 (list): The first list. lst2 (list): The second list. Returns: list: A list containing the unique elements that are present in both lists. return list(set(lst1).intersection(set(lst2)))"},{"question":"Create a function that receives a list of integers and returns a new list where each integer is replaced by the product of all other integers in the list except the integer at the current index. For instance, given a list `[1, 2, 3, 4]`, the function should return `[24, 12, 8, 6]` because 24 is the product of 2, 3, and 4; 12 is the product of 1, 3, and 4, and so on. The function should handle corner cases such as lists with multiple zeros or containing only one element. If the input list contains one element, return `[1]`. If the list is empty, return an empty list. Optimize the function to avoid repetitive calculations, ensuring it runs in O(n) time complexity. The function should also validate that the input is a list of integers and return an appropriate error message if it is not.","solution":"def product_except_self(nums): Returns a list of products of all integers in the input list except for the integer at each index. :param nums: List of integers. :return: List of integers where each integer is the product of all integers in the input list except the one at the current index. if not isinstance(nums, list): return \\"Input must be a list\\" if not all(isinstance(x, int) for x in nums): return \\"All elements of the list must be integers\\" n = len(nums) if n == 0: return [] if n == 1: return [1] # Initialize the result array with 1 result = [1] * n # Calculate products of elements on the left side except self left_product = 1 for i in range(n): result[i] *= left_product left_product *= nums[i] # Calculate products of elements on the right side except self right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Write a function that takes a string as input and returns the count of each vowel (a, e, i, o, u) present in the string. The function should return a dictionary with the vowels as keys and the count of each vowel as values. For example, the string \\"hello world\\" would output {\'a\': 0, \'e\': 1, \'i\': 0, \'o\': 2, \'u\': 0}. string = \\"hello world\\"","solution":"def count_vowels(input_string): Returns a dictionary with the count of each vowel (a, e, i, o, u) present in the input string. vowels = \'aeiou\' vowel_count = {vowel: 0 for vowel in vowels} for char in input_string.lower(): if char in vowel_count: vowel_count[char] += 1 return vowel_count"},{"question":"Given a list of strings, write a function that finds the length of the longest substring containing all distinct characters for each string in the list, and returns a list of these lengths. Assume the input list can have strings with different lengths and varying characters. # Sample function signature: ```python def longest_distinct_substrings_lengths(strings: list) -> list: Given a list of strings, this function returns a list of integers where each integer is the length of the longest substring containing all distinct characters from the corresponding string in the input list. :param strings: List[str], a list of strings. :return: List[int], a list of lengths of the longest substrings with all distinct characters. >>> longest_distinct_substrings_lengths([\'abcabcbb\', \'bbbbb\', \'pwwkew\', \'\']) [3, 1, 3, 0] >>> longest_distinct_substrings_lengths([\'abcdef\', \'aaaaaa\', \'ababcde\']) [6, 1, 4] ``` # Constraints: - The function should have acceptable time complexity. - The implementation should handle edge cases such as empty strings. - Each substring should be analyzed independently within its respective input string. **Proficiency Tip**: The function should efficiently handle the window sliding technique to compute the length of the longest substring with all distinct characters for each input string.","solution":"def longest_distinct_substrings_lengths(strings): Given a list of strings, this function returns a list of integers where each integer is the length of the longest substring containing all distinct characters from the corresponding string in the input list. :param strings: List[str], a list of strings. :return: List[int], a list of lengths of the longest substrings with all distinct characters. >>> longest_distinct_substrings_lengths([\'abcabcbb\', \'bbbbb\', \'pwwkew\', \'\']) [3, 1, 3, 0] >>> longest_distinct_substrings_lengths([\'abcdef\', \'aaaaaa\', \'ababcde\']) [6, 1, 4] def longest_distinct_substring_length(s): Helper function to find the length of the longest substring with all distinct characters in a given string. n = len(s) if n == 0: return 0 max_length = 0 start = 0 char_index_map = {} for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length return [longest_distinct_substring_length(s) for s in strings]"},{"question":"Identify and extract all the unique words from a given sentence using Python. The output should be a list of words sorted in alphabetical order and all words should be converted to lowercase. Write a function named `extract_unique_words` that takes a string input and returns the sorted list of unique words. Consider punctuation marks as part of the words. For example, the input \\"Hello world! Hello Python.\\" should return [\'hello\', \'python.\', \'world!\'].","solution":"def extract_unique_words(sentence): This function receives a sentence, extracts all unique words and returns them in alphabetical order. All words are converted to lowercase. # Split the sentence into words based on spaces words = sentence.split() # Convert all words to lowercase lower_words = [word.lower() for word in words] # Get unique words using set unique_words = set(lower_words) # Sort the unique words alphabetically sorted_unique_words = sorted(unique_words) return sorted_unique_words"},{"question":"Find the Longest Consecutive Sequence in an Unsorted Array Description as below: Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) complexity. Example 1: Input: nums = [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Example 2: Input: nums = [0, -1, -2, -3, 1, 2, 3, 4, -4] Output: 9 Explanation: The longest consecutive elements sequence is [-4, -3, -2, -1, 0, 1, 2, 3, 4]. Therefore its length is 9. Constraints: `0 &lt;= nums.length &lt;= 105` `-109 &lt;= nums[i] &lt;= 109`","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence. if not nums: return 0 num_set = set(nums) longest = 0 for num in num_set: # Only check for the beginning of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest = max(longest, current_streak) return longest"},{"question":"Implement a Python class named \'Library\' to simulate a book lending system. The class should have attributes for storing a collection of books, where each book is represented by its title, author, and ISBN number. Include methods for the following operations: - Add a new book to the collection. - Remove a book from the collection using its ISBN number. - Search for books by title or author. - Check out a book to a library member. Ensure that the book cannot be checked out if it\'s already lent out. - Return a book that was previously checked out. For a more advanced challenge, implement a system to track the due date for each checked-out book and include a method for checking overdue books. Ensure that books can only be checked out by registered members. Implement functionality to add and remove library members and keep track of which books each member currently has checked out.","solution":"from datetime import datetime, timedelta class Book: def __init__(self, title, author, isbn): self.title = title self.author = author self.isbn = isbn self.is_checked_out = False self.due_date = None self.checked_out_by = None class Member: def __init__(self, member_id, name): self.member_id = member_id self.name = name self.checked_out_books = [] class Library: def __init__(self): self.books = {} self.members = {} def add_book(self, title, author, isbn): if isbn not in self.books: self.books[isbn] = Book(title, author, isbn) def remove_book(self, isbn): if isbn in self.books and not self.books[isbn].is_checked_out: del self.books[isbn] def search_books(self, keyword): results = [] for book in self.books.values(): if keyword.lower() in book.title.lower() or keyword.lower() in book.author.lower(): results.append(book) return results def add_member(self, member_id, name): if member_id not in self.members: self.members[member_id] = Member(member_id, name) def remove_member(self, member_id): if member_id in self.members and not self.members[member_id].checked_out_books: del self.members[member_id] def check_out_book(self, isbn, member_id, due_days=14): if isbn in self.books and not self.books[isbn].is_checked_out and member_id in self.members: book = self.books[isbn] member = self.members[member_id] book.is_checked_out = True book.due_date = datetime.now() + timedelta(days=due_days) book.checked_out_by = member_id member.checked_out_books.append(book) def return_book(self, isbn, member_id): if isbn in self.books and self.books[isbn].is_checked_out and self.books[isbn].checked_out_by == member_id: book = self.books[isbn] member = self.members[member_id] book.is_checked_out = False book.due_date = None book.checked_out_by = None member.checked_out_books.remove(book) def list_overdue_books(self): overdue_books = [] for book in self.books.values(): if book.is_checked_out and book.due_date and book.due_date < datetime.now(): overdue_books.append(book) return overdue_books"},{"question":"Develop a Python function that takes two arguments, a list of integers and a target integer, and returns the indices of the two numbers that add up to the target integer. Assume each input list has exactly one solution, and you may not use the same element twice.","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target integer. Parameters: nums (list of int): A list of integers. target (int): The target integer. Returns: list of int: A list containing two indices. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i"},{"question":"Construct a functional data structure and develop a test case to validate your design. Create a `LRUCache` class that simulates the operations of a Least Recently Used (LRU) cache. The cache should support `get` and `set` operations in a time-efficient manner. Specifically, the `get` operation should retrieve the value of the key if the key exists in the cache, otherwise return -1. The `set` operation should insert the value if the key is not present in the cache. If the cache reaches its capacity, the least recently used item should be invalidated before inserting the new item. **Constraints**: - The data structure should use at most O(capacity) space. - All operations should run in O(1) time complexity. The class should be initialized with a given capacity. Here\'s the expected behavior: ```python class LRUCache: def __init__(self, capacity: int): Initialize the LRU cache with the given capacity. def get(self, key: int) -> int: Return the value of the key if the key exists, otherwise return -1. def set(self, key: int, value: int) -> None: Insert the value with key into the cache or update the value if key already exists. If the cache is at capacity, it should remove the least recently used item first. # Example Usage: cache = LRUCache(2) cache.set(1, 1) print(cache.get(1)) # returns 1 cache.set(2, 2) print(cache.get(1)) # returns 1 (1 is still the most recently used) cache.set(3, 3) # evicts key 2 print(cache.get(2)) # returns -1 (not found) cache.set(4, 4) # evicts key 1 print(cache.get(1)) # returns -1 (not found) print(cache.get(3)) # returns 3 print(cache.get(4)) # returns 4 ``` Your task is to complete the implementation of the `LRUCache` class and ensure it passes the provided test cases.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 # Move the key to the end to mark it as recently used self.cache.move_to_end(key) return self.cache[key] def set(self, key: int, value: int) -> None: if key in self.cache: # Update the value and mark it as recently used self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: # Pop the first item (the least recently used) self.cache.popitem(last=False)"},{"question":"Develop a Python function that simulates a real-world financial transaction system with the following characteristics: 1. You should create a function `process_transactions` that accepts two parameters: `initial_balance` (a float representing the initial amount of money) and `transactions` (a list of tuples where each tuple contains a string, either \'deposit\' or \'withdraw\', and a float representing the amount). 2. The function should update the `initial_balance` based on the type of transaction: adding the amount for deposits and subtracting the amount for withdrawals. 3. Implement error handling to manage the following scenarios: - Ignore transactions leading to a negative balance and print a message indicating the skipped transaction. - Handle non-float values in the transactions by printing an error message and skipping that particular transaction. - Manage any unknown transaction types with an error message. 4. Return the final balance after processing all valid transactions. 5. Write code to test the `process_transactions` function with various scenarios to demonstrate its proper workings, including edge cases. Could you also explain the function of each code segment with respect to handling real-world financial transactions accurately and securely? Here is a template of the function you need to create: ```python def process_transactions(initial_balance, transactions): Function to process a list of financial transactions. :param initial_balance: float, initial amount of money :param transactions: list of tuples, each containing a string (\'deposit\' or \'withdraw\') and a float :return: float, the final balance after processing all valid transactions for transaction in transactions: try: operation, amount = transaction if operation not in [\'deposit\', \'withdraw\']: print(f\\"Unknown transaction type \'{operation}\' skipped.\\") continue if not isinstance(amount, (float, int)): print(f\\"Invalid amount value \'{amount}\' skipped.\\") continue if operation == \'deposit\': initial_balance += amount elif operation == \'withdraw\': if initial_balance - amount < 0: print(\\"Insufficient funds for withdraw, transaction skipped.\\") else: initial_balance -= amount except ValueError: print(\\"Invalid transaction structure, skipped.\\") return initial_balance # Example test cases print(process_transactions(100.0, [(\'deposit\', 50.0), (\'withdraw\', 25.0), (\'withdraw\', 150.0), (\'deposit\', \'not_a_number\'), (\'transfer\', 100.0)])) ```","solution":"def process_transactions(initial_balance, transactions): Function to process a list of financial transactions. :param initial_balance: float, initial amount of money :param transactions: list of tuples, each containing a string (\'deposit\' or \'withdraw\') and a float :return: float, the final balance after processing all valid transactions for transaction in transactions: try: operation, amount = transaction if operation not in [\'deposit\', \'withdraw\']: print(f\\"Unknown transaction type \'{operation}\' skipped.\\") continue if not isinstance(amount, (float, int)): print(f\\"Invalid amount value \'{amount}\' skipped.\\") continue if operation == \'deposit\': initial_balance += amount elif operation == \'withdraw\': if initial_balance - amount < 0: print(\\"Insufficient funds for withdraw, transaction skipped.\\") else: initial_balance -= amount except ValueError: print(\\"Invalid transaction structure, skipped.\\") return initial_balance"},{"question":"Write a Python function that generates a list of palindromic primes less than a given number `n`. A palindromic prime is a prime number that remains the same when its digits are reversed. The function should include input validation to ensure `n` is a positive integer greater than 2. If `n` does not meet this criterion, it should raise a descriptive error. Additionally, the function should be capable of considering edge cases such as small values of `n` (e.g., n less than 10) and should handle larger values efficiently by implementing an optimized prime-checking method. Moreover, the function should also provide an option to output the total count of these palindromic primes if requested. In cases where the function is called with a list of numbers, it should process each element in the list individually and return a list of lists, where each inner list contains the palindromic primes less than the corresponding number in the input list. If an element in the list does not meet the criterion, it should output an appropriate error message for that specific element.","solution":"def is_prime(num): if num < 2: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def is_palindrome(num): return str(num) == str(num)[::-1] def palindromic_primes(n, count=False): if isinstance(n, int): if n <= 2: raise ValueError(\'Input must be a positive integer greater than 2.\') results = [i for i in range(2, n) if is_prime(i) and is_palindrome(i)] return len(results) if count else results elif isinstance(n, list): result_list = [] for num in n: if isinstance(num, int) and num > 2: result_list.append([i for i in range(2, num) if is_prime(i) and is_palindrome(i)]) else: result_list.append(f\\"Invalid input: {num} is not a positive integer greater than 2.\\") return result_list else: raise ValueError(\'Input must be a positive integer greater than 2 or a list of such integers.\')"},{"question":"Write a function in Python that simulates a basic calculator which can handle addition, subtraction, multiplication, and division operations. The function should accept a single string input containing the mathematical expression (e.g., \\"12 + 24 - 7 * 3 / 2\\") and return the calculated result as a floating-point number. Ensure the function can correctly follow the order of operations (PEMDAS/BODMAS rules). Additionally, handle any invalid inputs gracefully by returning an appropriate error message.","solution":"import re def basic_calculator(expression): Simulates a basic calculator that can handle addition, subtraction, multiplication, and division operations, following the order of operations. Parameters: expression (str): A string containing the mathematical expression. Returns: float or str: The calculated result as a floating-point number, or an appropriate error message if the input is invalid. # Clean the expression to remove unwanted spaces expression = expression.replace(\' \', \'\') # Basic input validation if not re.match(r\'^[d+-*/.()]+\', expression): return \\"Error: Invalid characters in expression.\\" try: # Using eval to calculate the expression following the order of operations result = eval(expression) return float(result) except ZeroDivisionError: return \\"Error: Division by zero.\\" except Exception as e: return f\\"Error: Invalid expression. {str(e)}\\""},{"question":"Create a function that takes in a list of strings and returns a new list where each string is reversed but the order of the strings in the list remains unchanged. Additionally, ignore any non-string elements in the list and only reverse valid strings. Your solution should handle edge cases such as an empty list or a list with no string elements. Ensure your code is efficient and well-documented. Example: ```python def reverse_strings(input_list): # Your code here # Test cases print(reverse_strings([\\"apple\\", \\"banana\\", \\"cherry\\"])) # Output: [\'elppa\', \'ananab\', \'yrrehc\'] print(reverse_strings([\\"123\\", \\"hello\\", 123, \\"world\\"])) # Output: [\'321\', \'olleh\', \'dlrow\'] print(reverse_strings([1, 2, 3])) # Output: [] print(reverse_strings([])) # Output: [] ``` ```","solution":"def reverse_strings(input_list): Function to reverse each string in the input list while maintaining the order of the strings. Non-string elements in the list are ignored. Args: input_list (list): List of elements which may include strings and non-strings. Returns: list: List of reversed strings. return [s[::-1] for s in input_list if isinstance(s, str)]"},{"question":"In a sequence where each number is the product of its position (starting from 1) and the position immediately before and after it, determine the 6th number in the sequence. Interpret the position before 1 as 1 and after the end position (n) as n. What would be the 6th number if the options are A) 1080, B) 1440, C) 720, and D) 5040? Which option correctly represents the 6th number in this sequence?","solution":"def sequence_value(n): if n == 1: return 1 return n * (n-1) * (n+1) def get_6th_number(): return sequence_value(6)"},{"question":"Write a function to find the longest palindrome substring within a given string. The objective is to identify a continuous segment of the input string that reads the same forward and backward and has the greatest possible length. The function should avoid using any predefined or built-in methods for directly identifying substrings or checking for palindromes. Instead, employ a dynamic programming approach where necessary. Return the longest palindrome substring identified. In case of a tie (i.e., multiple substrings of the same maximum length), return the substring that appears first. Validate the function with various test cases, including edge cases with strings of different lengths and characters.","solution":"def longest_palindrome_substring(s): Returns the longest palindrome substring in a given string. n = len(s) if n == 0: return \\"\\" dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 for i in range(n): dp[i][i] = True for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True start = i max_length = length return s[start:start + max_length]"},{"question":"Write a function that receives a string containing letters and numbers. The function should separate the letters and numbers into two individual strings, sort both strings (with letters sorted alphabetically and numbers sorted in ascending order), and then concatenate them, returning the resulting combined string. Treat uppercase and lowercase letters equally while sorting, but preserve their original case in the final output.","solution":"def separate_and_sort(string): Separates letters and numbers in a string, sorts both, and concatenates them. letters = sorted([ch for ch in string if ch.isalpha()], key=lambda x: x.lower()) numbers = sorted([ch for ch in string if ch.isdigit()]) return \'\'.join(letters) + \'\'.join(numbers)"},{"question":"Create a function that takes an integer list and returns a new list with duplicates removed while maintaining the original order. def remove_duplicates(lst): Design the function remove_duplicates that takes a list of integers as input and returns a new list with duplicates removed. The order of elements should be preserved as in the original list. Example: >>> remove_duplicates([1, 2, 2, 3, 4, 4, 5]) [1, 2, 3, 4, 5] >>> remove_duplicates([4, 5, 4, 4, 3, 2, 2, 1]) [4, 5, 3, 2, 1] >>> remove_duplicates([]) []","solution":"def remove_duplicates(lst): Removes duplicates from the list while maintaining the original order. Args: lst (list): The list of integers from which duplicates are to be removed. Returns: list: A new list with duplicates removed. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Define a sequence of integers where each term in the sequence is denoted by a(n). The first term of this sequence is a(1) = 1. For any n>1, a(n) is defined as the smallest positive integer greater than a(n-1) such that a(n) + a(n-1) is a perfect square. For example, the first few terms of the sequence are as follows: - a(1) = 1 - a(2) = 3 (because 1 + 3 = 4, which is 2^2) - a(3) = 6 (because 3 + 6 = 9, which is 3^2) - a(4) = 10 (because 6 + 10 = 16, which is 4^2) - a(5) = 15 (because 10 + 15 = 25, which is 5^2) Given an integer k, compute a(k). **Input Format:** A single integer k (1 leq k leq 10^5). **Output Format:** Output the k-th term of the sequence a(n).","solution":"import math def is_perfect_square(x): Check if x is a perfect square. s = int(math.sqrt(x)) return s * s == x def a(k): Returns the k-th term of the sequence a(n). if k == 1: return 1 sequence = [1] while len(sequence) < k: previous = sequence[-1] next_value = previous + 1 while not is_perfect_square(previous + next_value): next_value += 1 sequence.append(next_value) return sequence[-1]"},{"question":"Write a function that takes a list of strings and returns a dictionary with the strings as keys and their lengths as values. The function should ignore any strings that contain numbers, and should handle cases where the input list contains non-string items by skipping those items. Additionally, review and correct the code snippet provided below which attempts to solve the problem but contains errors. ```python def string_lengths(strings): length_dict = {} for s in strings: length_dict[s] = len(s) return length_dict ``` Note: The above code does not handle cases where the list contains non-string items or strings with numbers.","solution":"def string_lengths(strings): Takes a list of strings and returns a dictionary with the strings as keys and their lengths as values. Ignores any strings that contain numbers and skips non-string items. length_dict = {} for s in strings: if isinstance(s, str) and not any(char.isdigit() for char in s): length_dict[s] = len(s) return length_dict"},{"question":"Design a function in Python that takes a list of non-negative integers and returns the top three maximum numbers, without using any built-in library functions such as `max` or `sorted`. If the list contains fewer than three elements, return all elements in descending order.","solution":"def top_three_max(nums): Returns the top three maximum numbers from the list in descending order. If the list contains fewer than three elements, return all elements in descending order. if len(nums) == 0: return [] # Initialize top three variables first, second, third = float(\'-inf\'), float(\'-inf\'), float(\'-inf\') for num in nums: if num > first: third = second second = first first = num elif num > second: third = second second = num elif num > third: third = num # Prepare the result list result = [num for num in [first, second, third] if num != float(\'-inf\')] return result"},{"question":"Construct a Python function that processes a large CSV file and identifies rows containing invalid data patterns using regular expressions and the pandas library.","solution":"import pandas as pd import re def find_invalid_rows(csv_file, pattern, column): Identifies and returns rows containing invalid data patterns using regular expressions. Parameters: csv_file (str): The path to the CSV file. pattern (str): The regular expression pattern to check for invalid data. column (str): The column to check for the pattern. Returns: pandas.DataFrame: A DataFrame containing only rows with invalid data. # Read the CSV file into a DataFrame df = pd.read_csv(csv_file) # Compile the regular expression pattern regex = re.compile(pattern) # Identify rows with invalid data invalid_rows = df[~df[column].apply(lambda x: bool(regex.match(str(x))))] return invalid_rows"},{"question":"Emma wants to create a garden that is proportionally similar to a smaller, existing garden she has. The smaller garden measures 5 meters in length and 3 meters in width. If Emma wants the new garden\'s width to be 12 meters while maintaining the same proportions, what would be the length of the new garden? A) 15 meters B) 16 meters C) 18 meters D) 20 meters","solution":"def calculate_new_garden_length(small_length, small_width, new_width): Returns the length of the new garden maintaining the same proportions as the smaller garden. small_length: length of the smaller, existing garden small_width: width of the smaller, existing garden new_width: width of the new garden proportion = small_length / small_width new_length = proportion * new_width return new_length"},{"question":"Utilizing the Python programming language, devise a function to identify all prime numbers within a given range, inclusive of the start and end points. The function should take two parameters representing the start and end values and return a list of prime numbers within that range. Ensure the solution efficiently handles both small and large ranges. Example input: start = 10 end = 50 Expected output: [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def find_primes_in_range(start, end): Find all prime numbers in the given range [start, end]. return [num for num in range(start, end + 1) if is_prime(num)]"},{"question":"Implement a function `sum_of_integers` that takes a list of strings, where each string is a representation of a list of integers (e.g., `[\\"[1, 2, 3]\\", \\"[4, 5, 6]\\", \\"[7, 8, 9]\\"]`). Your function should return a new list where each element is the sum of the integers from the corresponding input string. Example Input: `[\\"[1, 2, 3]\\", \\"[4, 5, 6]\\", \\"[7, 8, 9]\\"]` Example Output: `[6, 15, 24]` Note: 1. You can assume that all strings are formatted correctly and contain only integers. 2. You should parse the string to extract the integers and compute their sum.","solution":"import ast def sum_of_integers(list_of_strings): Takes a list of strings where each string is a representation of a list of integers. Returns a new list where each element is the sum of the integers from the corresponding input string. result = [] for string in list_of_strings: # Parse the string to transform it into a list of integers int_list = ast.literal_eval(string) # Calculate the sum of the integers in the list total = sum(int_list) # Append the sum to the result list result.append(total) return result"},{"question":"Design and implement a class named `BankAccount` that mimics basic banking operations. The class should have the following attributes: `account_number`, `holder_name`, and `balance`. These should be initialized in the constructor with corresponding parameters. Additionally, the class should include the following methods: 1. `deposit(amount)`: Adds the specified `amount` to the `balance`. 2. `withdraw(amount)`: Deducts the specified `amount` from the `balance`, but only if sufficient balance is available. If there isn’t enough balance, print “Insufficient funds”. 3. `getBalance()`: Returns the current `balance`. Here\'s a sample piece of challenging code that has errors. Your task is to identify and correct these mistakes: ```python class BankAccount: def __init__(self, account_number, holder_name, balance): self.account_number = account_number self.holder_name = holder_name self.balance = balance def deposit(self, balance): self.balance += balance def withdraw(self, amount): if self.balance < amount: print(\\"Insufficient funds\\") else: self.balance += amount def getBalance(self): return f\\"Current balance: {balance}\\" ``` First, debug the provided code. After implementing the class correctly, create a `BankAccount` object with an initial balance and perform a series of deposits and withdrawals to demonstrate the functionality of the class, ensuring you cover edge cases such as insufficient funds for withdrawal.","solution":"class BankAccount: def __init__(self, account_number, holder_name, balance): self.account_number = account_number self.holder_name = holder_name self.balance = balance def deposit(self, amount): self.balance += amount def withdraw(self, amount): if self.balance < amount: print(\\"Insufficient funds\\") else: self.balance -= amount def getBalance(self): return self.balance"},{"question":"Design a function that takes a list of integers and returns the second largest number in the list. Ensure the function handles edge cases such as lists with fewer than two distinct elements appropriately by raising a custom exception.","solution":"class InsufficientDistinctElements(Exception): pass def second_largest(numbers): Returns the second largest number in a list. If the list contains fewer than two distinct elements, raises an InsufficientDistinctElements exception. if not numbers or len(numbers) < 2: raise InsufficientDistinctElements(\\"The list must contain at least two distinct elements.\\") unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: raise InsufficientDistinctElements(\\"The list must contain at least two distinct elements.\\") unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Design a Python function, `calculate_average`, that computes the average value of an array of numbers. The function should also handle lists of lists (nested lists) by calculating the average of all the numbers contained within. For this purpose, you should implement two helper functions: `flatten_list` to convert nested lists into a single list of numbers, and `validate_numbers` to ensure that the elements are either integers or floats. If there is any non-numeric value, the function should raise a `ValueError`. The primary function should then return the average of the validated, flattened list. # Steps: 1. Implement `validate_numbers` to check if each item in the list is a number (integer or float). If any item is not a number, raise a `ValueError`. 2. Implement `flatten_list` to recursively flatten nested lists into a single list of numbers. 3. Implement `calculate_average` to use these helper functions to compute the average. # Example: - `calculate_average([1, 2, 3])` should return `2.0` - `calculate_average([1, [2, 3], 4])` should return `2.5` - `calculate_average([1, [2, \'a\'], 4])` should raise a `ValueError` ```python def validate_numbers(lst): Ensure each item in the list is either int or float. Raises: ValueError: If any item is not a number. for item in lst: if isinstance(item, list): validate_numbers(item) # Recursive check for nested lists elif not isinstance(item, (int, float)): raise ValueError(f\\"Invalid item {item}: All elements must be int or float\\") def flatten_list(lst): Flatten a nested list into a single list of numbers. Returns: list: A flattened list of numbers. flat_list = [] for item in lst: if isinstance(item, list): flat_list.extend(flatten_list(item)) # Extend with the flattened sublist else: flat_list.append(item) return flat_list def calculate_average(lst): Calculate the average of a list of numbers, handling nested lists. Returns: float: The average value of the list elements. validate_numbers(lst) flat_list = flatten_list(lst) return sum(flat_list) / len(flat_list) if flat_list else 0 # Example usages: print(calculate_average([1, 2, 3])) # Output: 2.0 print(calculate_average([1, [2, 3], 4])) # Output: 2.5 try: print(calculate_average([1, [2, \'a\'], 4])) except ValueError as e: print(e) # Output: Invalid item a: All elements must be int or float ```","solution":"def validate_numbers(lst): Ensure each item in the list is either int or float. Raises: ValueError: If any item is not a number. for item in lst: if isinstance(item, list): validate_numbers(item) # Recursive check for nested lists elif not isinstance(item, (int, float)): raise ValueError(f\\"Invalid item {item}: All elements must be int or float\\") def flatten_list(lst): Flatten a nested list into a single list of numbers. Returns: list: A flattened list of numbers. flat_list = [] for item in lst: if isinstance(item, list): flat_list.extend(flatten_list(item)) # Extend with the flattened sublist else: flat_list.append(item) return flat_list def calculate_average(lst): Calculate the average of a list of numbers, handling nested lists. Returns: float: The average value of the list elements. validate_numbers(lst) flat_list = flatten_list(lst) return sum(flat_list) / len(flat_list) if flat_list else 0"},{"question":"You are given a string `s` consisting of lowercase English letters. Determine if it is possible to delete exactly one character from `s` to make it a palindrome. A palindrome is a string that reads the same backward as forward. Implement a function `canBePalindrome(s: str) -> bool` that returns `True` if it is possible to make the string a palindrome by deleting exactly one character, and `False` otherwise. # Example ```python canBePalindrome(\\"abca\\") ``` Output: ```python True ``` Explanation: You can delete the character \'c\' to make \\"aba\\" which is a palindrome. # Constraints - The string `s` has at least 2 and at most 10^5 characters. - The function should have O(n) time complexity.","solution":"def canBePalindrome(s): Determines if it is possible to delete exactly one character from the string to make it a palindrome. def is_palindrome_range(text, left, right): while left < right: if text[left] != text[right]: return False left += 1 right -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Check by skipping the left character or the right character return is_palindrome_range(s, left + 1, right) or is_palindrome_range(s, left, right - 1) left += 1 right -= 1 return False"},{"question":"I have a list of tuples where each tuple contains two string values representing a start time and an end time in \\"HH:MM\\" format. The list is not ordered, and some of the time intervals may overlap. Write a function to merge all overlapping time intervals and return a list of non-overlapping intervals. For example, given the input `[(\\"09:00\\", \\"11:00\\"), (\\"11:00\\", \\"12:00\\"), (\\"10:30\\", \\"13:00\\"), (\\"15:00\\", \\"16:30\\")]`, the function should return `[(\\"09:00\\", \\"13:00\\"), (\\"15:00\\", \\"16:30\\")]`.","solution":"def merge_intervals(intervals): Merges overlapping time intervals. Parameters: intervals (list of tuples): A list of tuples where each tuple contains two strings representing a start time and an end time in \\"HH:MM\\" format. Returns: list of tuples: A list of merged non-overlapping intervals in \\"HH:MM\\" format. # Convert intervals to minutes since start of day intervals_minutes = [ (int(start.split(\\":\\")[0]) * 60 + int(start.split(\\":\\")[1]), int(end.split(\\":\\")[0]) * 60 + int(end.split(\\":\\")[1])) for start, end in intervals ] # Sort intervals by the start time intervals_minutes.sort() merged_intervals = [] for start, end in intervals_minutes: if not merged_intervals or merged_intervals[-1][1] < start: merged_intervals.append((start, end)) else: merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], end)) # Convert back to \\"HH:MM\\" format merged_intervals_formatted = [ (f\\"{start // 60:02}:{start % 60:02}\\", f\\"{end // 60:02}:{end % 60:02}\\") for start, end in merged_intervals ] return merged_intervals_formatted"},{"question":"Construct a Python function that efficiently finds all unique pairs of numbers in a given list that add up to a specified target sum. The function should be capable of handling lists with a mix of positive and negative integers, floating point numbers, including edge cases such as an empty list or a list with fewer than two elements. Additionally, ensure that the function avoids using the same element twice, and it should output the pairs in ascending order based on the first element of each pair. The function should not rely on brute-force checking of every pair due to time complexity concerns; instead, it should use an optimal algorithm. Thoroughly optimize the function to operate within O(n log n) time complexity and O(n) space complexity, leveraging appropriate data structures where necessary. Specify the following requirements: - The function should be named `find_unique_pairs`. - The function should receive two parameters: a list of numbers (`numbers`) and the target sum (`target`). - It should return a list of tuples, where each tuple contains a pair of numbers that add up to the target. Here is a non-optimized code snippet as a reference. This code attempts to find pairs, but it fails to maintain the required time complexity and handle edge cases efficiently. ```python def find_pairs(numbers, target): pairs = [] for i in range(len(numbers)): for j in range(i + 1, len(numbers)): if numbers[i] + numbers[j] == target: pairs.append((numbers[i], numbers[j])) return pairs ``` Your task is to correct this code by implementing an efficient algorithm that keeps the required constraints. The function should return a list of unique pairs in ascending order, ensuring the time complexity does not exceed O(n log n). Example: ```python numbers = [2, -1, 3, 6, 4, -3, 0, 5, -5] target = 5 ``` Expected Output: ```python [(-1, 6), (0, 5), (2, 3)] ``` Test your function with varied input scenarios to ensure robustness and efficiency.","solution":"def find_unique_pairs(numbers, target): Finds unique pairs of numbers that add up to the target sum. Pairs are returned in ascending order based on the first element of each pair. numbers.sort() pairs = set() num_dict = {} for num in numbers: complement = target - num if complement in num_dict: pairs.add((min(num, complement), max(num, complement))) num_dict[num] = True return sorted(list(pairs))"},{"question":"Develop a program that synthesizes RGB color palettes based on specific inputs and constraints. The program should take a set of primary RGB colors (each defined by R, G, and B values between 0 and 255) and generate a range of new colors by blending these primary colors according to given ratios. The input will consist of: 1. A list of primary RGB colors. Each color is provided as a tuple of three integers (R, G, B). 2. A list of blending ratios. Each ratio is provided as a list of floats representing the proportion of each primary color in the blend. The program should generate an output list of blended RGB colors, each represented as a tuple of three integers (R, G, B). Your program should adhere to the following constraints: - Each primary color\'s R, G, and B values must be between 0 and 255, inclusive. - Each blending ratio list must contain positive floating-point numbers that sum to 1. If they do not, the program should normalize the ratios so that they sum to 1. - The program should be capable of handling a maximum of 10^5 primary colors and 10^5 blending ratios. - The output RGB values should be rounded to the nearest integer. The program should handle erroneous inputs by generating appropriate error messages: - If any RGB value in primary colors is outside the range 0-255, the program should generate an \\"Invalid color value\\" error. - If any blending ratio list contains negative numbers or all zeros, the program should generate an \\"Invalid blending ratio\\" error. - If the input lists are empty, the program should output an \\"Empty input\\" error. To further challenge candidates, provide a piece of faulty code for the blending function. Candidates should identify and rectify the errors in the provided code. Moreover, the blending procedure should be optimized for efficiency, with a time complexity not exceeding O(n * m), where n represents the number of primary colors and m represents the number of blending ratios. Additionally, the program should address floating-point precision issues and ensure accurate results up to a precision of 6 decimal places for blending ratios. Finally, the program should include a feature to visualize the generated color palettes, displaying the blended colors in a grid format. This feature should be implemented using a graphical library such as matplotlib or a similar tool, and should be optional based on a toggle input parameter.","solution":"import numpy as np import matplotlib.pyplot as plt def normalize_ratios(ratios): Normalize a list of ratios so that they sum to 1. total = sum(ratios) if total == 0 or any(r < 0 for r in ratios): raise ValueError(\\"Invalid blending ratio\\") return [r / total for r in ratios] def blend_colors(primary_colors, blending_ratios): Blend the primary colors based on the blending ratios. if not primary_colors or not blending_ratios: raise ValueError(\\"Empty input\\") num_colors = len(primary_colors) for color in primary_colors: if any(c < 0 or c > 255 for c in color): raise ValueError(\\"Invalid color value\\") blended_colors = [] for ratios in blending_ratios: ratios = normalize_ratios(ratios) if len(ratios) != num_colors: raise ValueError(\\"Mismatch in number of primary colors and ratios\\") r = sum(ratios[i] * primary_colors[i][0] for i in range(num_colors)) g = sum(ratios[i] * primary_colors[i][1] for i in range(num_colors)) b = sum(ratios[i] * primary_colors[i][2] for i in range(num_colors)) blended_colors.append((round(r), round(g), round(b))) return blended_colors def visualize_colors(colors, title=\\"Color Palette\\"): Visualize the list of RGB colors using matplotlib. num_colors = len(colors) plt.figure(figsize=(num_colors, 1)) plt.imshow([colors], aspect=\'auto\') plt.title(title) plt.axis(\'off\') plt.show()"},{"question":"Construct a function that identifies and returns all the distinct anagrams of a given word within a list of possible candidates. The function should handle case insensitivity and ignore spaces and punctuation in the input word and the candidate words. The function should also be able to manage and correctly identify anagrams within nested structures in the candidate list, such as lists within lists. It should return the anagrams found at any level of nesting, maintaining the nested structure in its entirety but only including the anagrams of the given word at the appropriate positions within the nested lists. Additionally, the function should be equipped to handle cases where the candidate list includes non-string elements (such as integers, floats, or None), safely skipping over these elements without raising any errors. Furthermore, if the list of possible candidates contains duplicate elements, the function should remove duplicates from the final result to ensure that each anagram is returned only once. Here\'s an example to illustrate: Given the word `listen` and the list of candidates `[\\"enlists\\", \\"google\\", \\"inlets\\", \\"banana\\", [\\"Silent\\", \\"LISTEN\\"], \\"tinsel\\", [None, \\"Listen\\"]]`, the function should return `[\\"inlets\\", [\\"silent\\", \\"listen\\"], \\"tinsel\\", [\\"listen\\"]]`. Make sure to write the function with proper error handling and edge-case management, ensuring that it works efficiently with large lists and various nested structures.","solution":"import re def sanitize_string(s): Removes all non-alphabetic characters from the string and converts it to lowercase return re.sub(r\'[^a-z]\', \'\', s.lower()) def is_anagram(word1, word2): Checks if word1 and word2 are anagrams, ignoring case and non-alphabetic characters. return sorted(sanitize_string(word1)) == sorted(sanitize_string(word2)) def find_anagrams(word, candidates): Identifies all distinct anagrams of the given word within the nested candidate list. Only includes nested structures in the result and skips non-string elements. result = [] def check_anagrams(word, candidate_list): Inner recursive function to handle nested structures and gather anagrams sub_result = [] seen = set() for item in candidate_list: if isinstance(item, list): nested_result = check_anagrams(word, item) if nested_result: sub_result.append(nested_result) elif isinstance(item, str): sanitized_item = sanitize_string(item) if item not in seen and is_anagram(word, item): sub_result.append(sanitized_item) seen.add(item) return sub_result # Initiating the check process anagrams = check_anagrams(word, candidates) return anagrams # Example Usage word = \\"listen\\" candidates = [\\"enlists\\", \\"google\\", \\"inlets\\", \\"banana\\", [\\"Silent\\", \\"LISTEN\\"], \\"tinsel\\", [None, \\"Listen\\"]] print(find_anagrams(word, candidates))"},{"question":"Write a Python function to simulate a library management system where books can be borrowed and returned. The function should handle the following operations: 1. Add a new book to the library. 2. Borrow a book from the library. 3. Return a book to the library. 4. List all available books in the library. Each book in the library system is represented as a dictionary with the following attributes: \'title\', \'author\', \'year\'. The function should also track the number of copies available for each book. Implement proper error handling to account for scenarios such as attempting to borrow a book that is not available or attempting to return a book that was never borrowed. Write some test cases to demonstrate the functionality of your implementation.","solution":"class Library: def __init__(self): self.books = {} def add_book(self, title, author, year, copies=1): Adds a new book to the library or increases the number of copies if the book already exists. if title in self.books: self.books[title][\'copies\'] += copies else: self.books[title] = {\'author\': author, \'year\': year, \'copies\': copies} def borrow_book(self, title): Borrows a book from the library, if available. Raises an error if the book is not available. if title in self.books and self.books[title][\'copies\'] > 0: self.books[title][\'copies\'] -= 1 else: raise ValueError(\\"Book not available or out of stock.\\") def return_book(self, title): Returns a book to the library. Raises an error if the book to return does not exist in the library. if title in self.books: self.books[title][\'copies\'] += 1 else: raise ValueError(\\"Book does not exist in the library.\\") def list_books(self): Lists all available books in the library. return {title: book for title, book in self.books.items() if book[\'copies\'] > 0}"},{"question":"Write a function that takes a list of integers and an integer \'n\', and returns the list with all occurrences of \'n\' removed. If \'n\' is not present in the list, return the original list. Example: list = [1, 2, 3, 4, 2, 2, 5] n = 2 Output: [1, 3, 4, 5]","solution":"def remove_occurrences(lst, n): Removes all occurrences of n from the list lst. If n is not present, returns the original list. Parameters: lst (list of int): The list of integers. n (int): The integer to be removed. Returns: list of int: The list with all occurrences of n removed. return [x for x in lst if x != n]"},{"question":"Write a function in Python that implements the Breadth-First Search (BFS) algorithm for a graph represented as an adjacency list. The function should take the adjacency list and a starting vertex as input, and return the order of vertices visited during the BFS traversal. Provide a brief explanation of the algorithm and ensure your code handles edge cases such as an empty graph or a starting vertex not present in the graph.","solution":"from collections import deque def bfs(graph, start_vertex): Performs BFS traversal on a graph represented as an adjacency list. :param graph: Dictionary representing the adjacency list of the graph :param start_vertex: The starting vertex for the BFS traversal :return: List of vertices in the order they are visited during BFS if start_vertex not in graph: return [] visited = set() queue = deque([start_vertex]) bfs_order = [] while queue: vertex = queue.popleft() if vertex not in visited: visited.add(vertex) bfs_order.append(vertex) # Enqueue all adjacent vertices that haven\'t been visited queue.extend([neighbor for neighbor in graph[vertex] if neighbor not in visited]) return bfs_order"},{"question":"Write a Python function that takes a list of integers as an input and returns a list of the integers sorted in ascending order without using any built-in sort functions. The function should implement the bubble sort algorithm to achieve the sorting.","solution":"def bubble_sort(arr): Returns a new list of integers sorted in ascending order using the bubble sort algorithm. n = len(arr) sorted_arr = arr.copy() for i in range(n): for j in range(0, n-i-1): if sorted_arr[j] > sorted_arr[j+1]: sorted_arr[j], sorted_arr[j+1] = sorted_arr[j+1], sorted_arr[j] return sorted_arr"},{"question":"Write a function that takes a list of integers and strings and returns a new list where each integer is doubled and each string is capitalized. For instance, if the input list is [1, \'hello\', 3, \'world\'], the output should be [2, \'HELLO\', 6, \'WORLD\']. Ensure your function handles mixed types in the list and gracefully manage any other data types by ignoring them. Demonstrate your function with at least three test cases.","solution":"def process_list(input_list): Takes a list of integers and strings, and returns a new list where each integer is doubled and each string is capitalized. Any other data types in the list are ignored. Args: - input_list: List containing integers and strings, possibly mixed with other types. Returns: - List: New list with doubled integers and capitalized strings. result_list = [] for item in input_list: if isinstance(item, int): result_list.append(item * 2) elif isinstance(item, str): result_list.append(item.upper()) return result_list"},{"question":"Develop a function to identify the largest rectangular area possible in a given histogram. The histogram is represented as a list of non-negative integers where each integer denotes the height of a bar in the histogram, all of which have a width of 1. The function should have a time complexity of O(n) and use O(n) space. Your algorithm should not use any nested loops. Example Input: [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The largest rectangle can be made up of the height 5 and 6, making the width 2. Hence, the area is 5*2=10.","solution":"def largest_rectangle_area(histogram): Finds the largest rectangular area possible in a given histogram. :param histogram: List[int] - a list of non-negative integers representing the histogram heights :return: int - the area of the largest rectangle # Add a zero height bar at the end to ensure all bars get processed histogram.append(0) stack = [] max_area = 0 for i in range(len(histogram)): while stack and histogram[stack[-1]] > histogram[i]: height = histogram[stack.pop()] # Width is calculated as the difference between the current index and index of the last item in stack minus 1 width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) # Remove the zero height bar inserted at the beginning histogram.pop() return max_area"},{"question":"Create a function that takes a list of integers and returns a new list containing only the elements that are prime numbers. The function should efficiently check for prime numbers and maintain the original order of the elements in the returned list.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"Create a program that simulates a basic bank account system. The system should allow users to perform three primary actions: deposit money, withdraw money, and check their account balance. Each transaction should update the account balance accordingly. Ensure that the program handles edge cases such as insufficient funds for withdrawals and invalid input types gracefully. Additionally, provide a brief explanation of how your code ensures data integrity and security.","solution":"class BankAccount: def __init__(self, initial_balance=0): self.balance = initial_balance def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.balance -= amount def get_balance(self): return self.balance"},{"question":"Write a function that takes a list of integers and returns a dictionary with three keys: \\"positive\\", \\"negative\\", and \\"zero\\". The values corresponding to each key should be the count of positive numbers, negative numbers, and zeros in the list, respectively. Ensure your function works efficiently with large lists. ```python def count_numbers(lst): # Your code goes here # Example usage: lst = [1, -1, 2, 0, -3, 5, 0, -8] print(count_numbers(lst)) # Output should be: {\'positive\': 3, \'negative\': 3, \'zero\': 2} ```","solution":"def count_numbers(lst): Returns a dictionary with the count of positive, negative, and zero numbers in the list. Args: lst (list): A list of integers. Returns: dict: A dictionary with keys \'positive\', \'negative\', and \'zero\' and their respective counts. counters = {\'positive\': 0, \'negative\': 0, \'zero\': 0} for number in lst: if number > 0: counters[\'positive\'] += 1 elif number < 0: counters[\'negative\'] += 1 else: counters[\'zero\'] += 1 return counters"},{"question":"Create a function that takes a string representing a mathematical expression and evaluates it. The expression may contain numbers, parentheses, and the operators \'+\' (addition) and \'*\' (multiplication). Implement the function such that it respects the usual precedence of operations: multiplication has higher precedence than addition and parentheses can override the precedence. Assume the input expression is always valid. For example: Input: `\\"(2+3)*(4+5)\\"` Output: `45` Input: `\\"3+5*2\\"` Output: `13` Your solution must handle nested parentheses and evaluate the expression correctly. Discuss the algorithm used and analyze its time and space complexity. Suggest ways to optimize the computation, if any. Mention potential edge cases and how your implementation addresses them.","solution":"def evaluate_expression(expression: str) -> int: # This function evaluates a mathematical expression string containing \'+\', \'*\', and parentheses correctly. def eval_helper(tokens): stack = [] num = 0 sign = \'+\' while tokens: token = tokens.pop(0) if token.isdigit(): num = int(token) if token == \'(\': num = eval_helper(tokens) if (not token.isdigit() and token != \' \') or not tokens: if sign == \'+\': stack.append(num) elif sign == \'*\': stack[-1] *= num sign = token num = 0 if token == \')\': break return sum(stack) tokens = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 tokens.append(str(num)) else: tokens.append(expression[i]) i += 1 return eval_helper(tokens)"},{"question":"Construct a Python function called \'sort_by_second_element\', which takes a list of two-element tuples and returns the list sorted by the second element of each tuple in ascending order. Ensure your implementation correctly handles the potential presence of non-numeric second elements within the tuples, raising a TypeError if such an element is detected.","solution":"def sort_by_second_element(lst): Sorts a list of two-element tuples by the second element of each tuple in ascending order. Raises TypeError if the second element is not numeric. :param lst: List of two-element tuples :return: Sorted list of tuples by the second element in ascending order # Check that all second elements are numeric, otherwise raise a TypeError for _, second in lst: if not isinstance(second, (int, float)): raise TypeError(f\\"Non-numeric second element found: {second}\\") # Sort the list by the second element of each tuple return sorted(lst, key=lambda x: x[1])"},{"question":"Write a Python function that takes a list of integers and returns a dictionary where keys are the integers and the values are the counts of their occurrences in the list. Additionally, the function should be able to handle nested lists up to any depth, counting occurrences of integers regardless of their levels in the nested structure.","solution":"def flatten_and_count_nested_list(nested_list): Given a nested list of integers, return a dictionary where keys are the integers and values are the counts of their occurrences in the list, regardless of their levels in the nested structure. from collections import defaultdict def flatten(lst): for item in lst: if isinstance(item, list): yield from flatten(item) else: yield item count_dict = defaultdict(int) for number in flatten(nested_list): if isinstance(number, int): count_dict[number] += 1 return dict(count_dict)"},{"question":"Develop a Python function to identify the maximum product of two distinct elements within an array of integers. The function must handle potential exceptions, such as empty arrays or arrays with fewer than two elements, and return an appropriate message or value in such cases. Ensure that your solution includes effective error handling and validation. Example Input: ``` array = [5, 6, -2, 3, 11] ``` Example Output: ``` 66 (product of 6 and 11) ``` Example Input for error handling: ``` array = [3] ``` Example Output for error handling: ``` \\"Array must contain at least two elements.\\" ``` You may use the following template to begin your function: ```python def max_product(nums): try: # Your code here except Exception as e: return str(e) ``` Consider edge cases and ensure the robustness of your solution in dealing with various input scenarios.","solution":"def max_product(nums): try: if not nums or len(nums) < 2: raise ValueError(\\"Array must contain at least two elements.\\") # Initialize two max values and two min values max1 = max2 = float(\'-inf\') min1 = min2 = float(\'inf\') for num in nums: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2) except Exception as e: return str(e)"},{"question":"Design a function that accepts a list of integers and returns the length of the longest subsequence that forms an arithmetic progression. The function should handle both positive and negative integers. An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant. For example, in the sequence [1, 7, 3, 5, 9], the longest arithmetic subsequence is [1, 3, 5, 7, 9]. # Function Signature ``` def longest_arith_seq_length(arr: List[int]) -> int: ``` # Input - `arr`: A list of integers, which can contain both negative and positive values. The length of the list will be in the range [1, 1000]. # Output - An integer representing the length of the longest arithmetic subsequence within the provided list. # Example ``` Input: [3, 6, 9, 12] Output: 4 Input: [9, 4, 7, 2, 10] Output: 3 Input: [20, 1, 15, 3, 10, 5, 8] Output: 4 ``` # Constraints - The function should have a time complexity better than O(n^3). - Handle edge cases such as an empty list, a list with only one element, and lists where no arithmetic progression longer than 1 exists.","solution":"def longest_arith_seq_length(arr): if not arr: return 0 if len(arr) == 1: return 1 n = len(arr) dp = [{} for _ in range(n)] max_len = 1 for j in range(1, n): for i in range(j): diff = arr[j] - arr[i] if diff in dp[i]: dp[j][diff] = dp[i][diff] + 1 else: dp[j][diff] = 2 max_len = max(max_len, dp[j][diff]) return max_len"},{"question":"Write a function `kth_largest_element(arr, k)` that takes an array `arr` of integers and an integer `k` as arguments, and returns the k-th largest element in the array. If `k` is larger than the number of elements in the array, the function should return `None`. **Example:** ```python assert kth_largest_element([3, 2, 1, 5, 6, 4], 2) == 5 assert kth_largest_element([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4 assert kth_largest_element([1], 1) == 1 assert kth_largest_element([7, 6, 5, 4, 3, 2, 1], 10) == None ``` **Note:** - You can assume the input array will contain integers of varying values. - Aim to achieve a solution with time complexity better than O(n^2) where possible. - Consider using library functions or in-built methods to simplify your solution.","solution":"def kth_largest_element(arr, k): Returns the k-th largest element in the array `arr`. If k is larger than the number of elements in the array, returns None. if k > len(arr): return None sorted_arr = sorted(arr, reverse=True) return sorted_arr[k-1]"},{"question":"Create a Python function that simulates a simple banking system. Your function should allow users to perform the following operations: 1. Create a new account with a unique account number. 2. Deposit an amount into the account. 3. Withdraw an amount from the account, ensuring the account balance doesn\'t become negative. 4. Transfer an amount from one account to another. 5. View the balance of a specific account. Additionally, ensure that all operations are thread-safe, as multiple users could be performing transactions simultaneously. Use Python\'s threading module to manage concurrent access to the account data. Test your function with at least three threads performing random sequences of deposit, withdrawal, and transfer operations to verify that the function handles concurrency correctly.","solution":"from threading import Lock class Bank: def __init__(self): self.accounts = {} self.lock = Lock() self.next_account_number = 1 def create_account(self): with self.lock: account_number = self.next_account_number self.accounts[account_number] = 0 self.next_account_number += 1 return account_number def deposit(self, account_number, amount): with self.lock: if account_number in self.accounts: self.accounts[account_number] += amount return True else: return False def withdraw(self, account_number, amount): with self.lock: if account_number in self.accounts and self.accounts[account_number] >= amount: self.accounts[account_number] -= amount return True else: return False def transfer(self, from_account, to_account, amount): with self.lock: if from_account in self.accounts and to_account in self.accounts: if self.accounts[from_account] >= amount: self.accounts[from_account] -= amount self.accounts[to_account] += amount return True return False def get_balance(self, account_number): with self.lock: if account_number in self.accounts: return self.accounts[account_number] else: return None"},{"question":"Write a Python function that takes a string as input and returns a dictionary where each key is a character from the string, and the corresponding value is the count of how often that character appears in the string. Characters should be treated as case-insensitive, meaning \'A\' and \'a\' are considered the same character. Include a main block that reads a string from the user and prints the resulting dictionary.","solution":"def char_count(s): Returns a dictionary where keys are characters from the string (case-insensitive), and values are the count of their occurrences in the string. s = s.lower() count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict if __name__ == \\"__main__\\": input_string = input(\\"Enter a string: \\") print(char_count(input_string))"},{"question":"Consider the following problem: Valid Parentheses Sequence You are given a string consisting of only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Your task is to determine if the given string represents a valid parentheses sequence. A valid parentheses sequence is defined by the following rules: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. For example, the strings \\"()\\", \\"()[]{}\\", and \\"{[]}\\" are all valid, while \\"(]\\", \\"([)]\\", and \\"{[}\\" are not. Write a function `isValid(s: str) -> bool` that returns `true` if the input string is a valid parentheses sequence and `false` otherwise. Example 1: Input: s = \\"()\\" Output: true Example 2: Input: s = \\"()[]{}\\" Output: true Example 3: Input: s = \\"(]\\" Output: false Example 4: Input: s = \\"([)]\\" Output: false Example 5: Input: s = \\"{[]}\\" Output: true Constraints: The input string will have a length in the range `[1, 10^4]`.","solution":"def isValid(s: str) -> bool: Determines if the given string is a valid parentheses sequence. stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_parentheses: top_element = stack.pop() if stack else \'#\' if matching_parentheses[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"In this task, you will implement a simulation to model the spread of an infection in a grid-like city. The simulation will utilize a simplified SIR (Susceptible, Infected, Recovered) model. 1. **Grid Setup**: - The city is represented as an `n x n` grid. - Each cell in the grid can be in one of three states: Susceptible (`S`), Infected (`I`), or Recovered (`R`). 2. **Initial Condition**: - At the start of the simulation, the entire grid is in the Susceptible state, except for one cell that is in the Infected state. - The initial infected cell can be randomly chosen from the grid. 3. **Infection Process**: - Each infected cell may infect its four neighboring cells (up, down, left, right) if they are in the Susceptible state. - The probability of infection for each neighboring cell is `p`. 4. **Recovery Process**: - Each infected cell has a probability `q` of recovering and changing to the Recovered state in each time step. 5. **Simulation Parameters**: - The size of the grid `n`. - The infection probability `p`. - The recovery probability `q`. - The number of simulation steps `t`. 6. **Output**: - Write a function that runs the simulation and returns the number of Susceptible, Infected, and Recovered cells after each step. - Plot the number of Susceptible, Infected, and Recovered cells over time using an appropriate visualization library (e.g., matplotlib). **Your Task**: - Implement the simulation in a programming language of your choice. - The function signature should be of the form: ```python def run_simulation(n: int, p: float, q: float, t: int) -> None: pass ``` - Create a plot with the number of Susceptible, Infected, and Recovered cells on the y-axis and the time steps on the x-axis. - **Bonus**: Add a feature to allow the infection to spread probabilistically to all eight neighboring cells (including diagonal neighbors). Here\'s an example of how your simulation might be initialized and run: ```python n = 20 # Grid size p = 0.3 # Infection probability q = 0.1 # Recovery probability t = 100 # Number of steps run_simulation(n, p, q, t) ```","solution":"import numpy as np import matplotlib.pyplot as plt import random def run_simulation(n: int, p: float, q: float, t: int) -> None: # Define states SUSCEPTIBLE, INFECTED, RECOVERED = 0, 1, 2 # Initialize the grid grid = np.zeros((n, n), dtype=int) # Randomly infect one cell initial_infected = (random.randint(0, n-1), random.randint(0, n-1)) grid[initial_infected] = INFECTED # Arrays to store the counts of S, I, R at each time step susceptible_counts = [] infected_counts = [] recovered_counts = [] for step in range(t): new_grid = grid.copy() for i in range(n): for j in range(n): if grid[i, j] == INFECTED: if random.random() < q: new_grid[i, j] = RECOVERED else: # Try to infect neighbors for di, dj in [(-1,0), (1,0), (0,-1), (0,1)]: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < n and grid[ni, nj] == SUSCEPTIBLE: if random.random() < p: new_grid[ni, nj] = INFECTED grid = new_grid # Store counts of each state unique, counts = np.unique(grid, return_counts=True) count_dict = dict(zip(unique, counts)) susceptible_counts.append(count_dict.get(SUSCEPTIBLE, 0)) infected_counts.append(count_dict.get(INFECTED, 0)) recovered_counts.append(count_dict.get(RECOVERED, 0)) # Plotting the results plt.figure(figsize=(10, 6)) plt.plot(susceptible_counts, label=\'Susceptible\') plt.plot(infected_counts, label=\'Infected\') plt.plot(recovered_counts, label=\'Recovered\') plt.xlabel(\'Time steps\') plt.ylabel(\'Count of cells\') plt.title(\'SIR Model Simulation\') plt.legend() plt.grid(True) plt.show()"},{"question":"Create a function that processes an input list of integers and returns a new list containing only the elements that are prime numbers. For instance, given the input list [4, 7, 12, 17, 23], the function should output [7, 17, 23]. Ensure the solution handles edge cases and has an efficient algorithm for checking prime numbers.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def filter_primes(lst): Returns a list containing only the prime numbers from the input list. return [x for x in lst if is_prime(x)]"},{"question":"Given an array of integers, find the length of the longest sequence of consecutive elements. For example, given the array `[102, 4, 100, 1, 101, 3, 2]`, the longest sequence of consecutive elements is `[1, 2, 3, 4]`, and thus the length is `4`. Create a function `longest_consecutive_sequence(arr)` that takes an array of integers `arr` as input and returns the length of the longest sequence of consecutive elements. Function Signature: `def longest_consecutive_sequence(arr: list) -> int:` # Constraints: - The input array will have at least one element and at most 10^4 elements. - The range of integer values in the array is from -10^9 to 10^9. # Example: - Input: `[102, 4, 100, 1, 101, 3, 2]` - Output: `4` - Input: `[0, -1]` - Output: `2` # Note: - Optimize your solution to avoid unnecessary computations and large memory usage.","solution":"def longest_consecutive_sequence(arr: list) -> int: Returns the length of the longest sequence of consecutive elements. nums_set = set(arr) longest_length = 0 for num in nums_set: if num - 1 not in nums_set: # num is the start of a new sequence current_num = num current_length = 1 while current_num + 1 in nums_set: current_num += 1 current_length += 1 longest_length = max(longest_length, current_length) return longest_length"},{"question":"Design a function that accepts an array of integers and an integer value `k`. The function should return the k-th smallest element in the array where `k` is 1-based index. Assume `k` is always valid, i.e., `1 <= k <= array.length`. **Function Signature:** ```python def kth_smallest_element(array: List[int], k: int) -> int: ``` **Example:** ```python # Example 1 array = [7, 10, 4, 3, 20, 15] k = 3 result = kth_smallest_element(array, k) # result should be 7 # Example 2 array = [5, 3, 1, 6, 4, 2] k = 5 result = kth_smallest_element(array, k) # result should be 5 ``` **Constraints:** - The array contains distinct integers. - The array length is at most 1000. - The values in the array are between -10^6 and 10^6.","solution":"from typing import List def kth_smallest_element(array: List[int], k: int) -> int: Returns the k-th smallest element in the array. Parameters: array (List[int]): The list of integers. k (int): The 1-based index of the k-th smallest element to be found. Returns: int: The k-th smallest element in the array. # Sort the array sorted_array = sorted(array) # Return the k-th smallest element based on 1-based index return sorted_array[k - 1]"},{"question":"We have two lists of strings representing different items in a grocery store. One list contains items currently available in the store while the second list contains items that need to be restocked. The task is to identify which items need to be ordered from the restocking list and return them in alphabetical order. ```python available_items = [\\"apple\\", \\"banana\\", \\"orange\\", \\"peach\\"] restocking_items = [\\"banana\\", \\"kiwi\\", \\"apple\\", \\"mango\\", \\"peach\\", \\"grape\\"] # Implement the function `to_be_ordered` which takes two lists as parameters def to_be_ordered(available, restocking): # Your code goes here pass # The result should be sorted in alphabetical order result = to_be_ordered(available_items, restocking_items) print(result) ``` 1. Implement the function `to_be_ordered` that accepts two parameters: a list of available items and a list of restocking items. The function should return a list of items that need to be ordered from the restocking list but are not present in the available items list. The list should be sorted in alphabetical order. 2. Explain your approach and any relevant Python methods you used to solve the task. 3. Optional: Comment each line of your functional code to demonstrate understanding of each command.","solution":"def to_be_ordered(available, restocking): Returns a list of items from the restocking list that are not in the available list, sorted in alphabetical order. Parameters: available (list of str): List of items currently available in the store. restocking (list of str): List of items that need to be restocked. Returns: list of str: Sorted list of items to be ordered. # Using a set for available items for faster lookup available_set = set(available) # List comprehension to filter items not available in the store to_order = [item for item in restocking if item not in available_set] # Returning the sorted list of items to be ordered return sorted(to_order)"},{"question":"Design an algorithm that efficiently processes a large dataset containing transactional records of an extensive online retailer. The system should be capable of identifying fraudulent transactions based on historical patterns and predefined anomaly detection rules. The output should include a list of suspicious transaction IDs for further investigation. Ensure that your solution can handle high-volume data streams and integrate seamlessly with existing data collection and analysis pipelines within the retailer\'s infrastructure.","solution":"import pandas as pd class FraudDetection: def __init__(self): Initialize the FraudDetection with necessary parameters or thresholds. self.predefined_rules = { \\"high_amount_threshold\\": 10000, # Example rule: High amount transactions \\"unusual_location\\": [\\"CountryA\\"], # Example rule: Transactions from unusual locations # Add more rules as necessary } def detect_fraud(self, transactions_df): Process the transactions dataframe and return a list of suspicious transaction IDs. Parameters: transactions_df (pd.DataFrame): DataFrame containing transactional records. Returns: List of suspicious transaction IDs based on the predefined rules. suspicious_transactions = set() # Apply high amount threshold rule high_amount_transactions = transactions_df[transactions_df[\'amount\'] > self.predefined_rules[\\"high_amount_threshold\\"]] suspicious_transactions.update(high_amount_transactions[\'transaction_id\']) # Apply unusual location rule unusual_location_transactions = transactions_df[transactions_df[\'location\'].isin(self.predefined_rules[\\"unusual_location\\"])] suspicious_transactions.update(unusual_location_transactions[\'transaction_id\']) return list(suspicious_transactions)"},{"question":"Write a Python program to parse a given CSV file containing information about employees in an organization, then compute and display the average salary of employees in each department. The CSV file has the following format: ``` id,name,department,salary 1,John Doe,Engineering,50000 2,Jane Smith,Marketing,60000 3,Emily Jones,Engineering,55000 4,Michael Brown,HR,62000 5,Jessica Miller,Marketing,58000 6,Daniel Wilson,Engineering,53000 7,Laura Garcia,HR,61000 ``` Your task is to: 1. Read the CSV file and parse the employee records. 2. Compute the average salary for each department. 3. Print the department name along with the calculated average salary. Ensure that your program handles exceptions such as invalid file paths or incorrect file formats gracefully. Test your program with varying data to ensure its robustness and correctness.","solution":"import csv from collections import defaultdict def compute_average_salary(csv_file_path): Reads a CSV file and computes the average salary of employees in each department. :param csv_file_path: Path to the CSV file containing employee records. :return: A dictionary where the keys are department names and the values are average salaries. department_salaries = defaultdict(list) try: with open(csv_file_path, mode=\'r\') as file: csv_reader = csv.DictReader(file) for row in csv_reader: department = row[\\"department\\"] salary = float(row[\\"salary\\"]) department_salaries[department].append(salary) except FileNotFoundError: print(f\\"Error: File not found - {csv_file_path}\\") return {} except Exception as e: print(f\\"An error occurred: {e}\\") return {} average_salaries = {} for department, salaries in department_salaries.items(): average_salaries[department] = sum(salaries) / len(salaries) return average_salaries"},{"question":"Write a Python program that simulates a basic number guessing game. The program should randomly generate an integer between 1 and 50, and then prompt the user to guess the number. For each guess, the program should provide feedback indicating whether the guess is too low, too high, or correct. The game should continue until the user guesses the correct number. Once the correct number is guessed, the program should display a congratulatory message and the total number of attempts made by the user. # Functional Requirements: 1. The program should randomly generate a number between 1 and 50 (inclusive). 2. Prompt the user to guess the generated number. 3. Compare the user\'s guess to the generated number and provide feedback: - \\"Too low\\" if the guess is lower than the generated number. - \\"Too high\\" if the guess is higher than the generated number. - \\"Correct\\" if the guess matches the generated number. 4. Keep track of the number of attempts made by the user. 5. When the correct number is guessed, display a message indicating the correct guess and the total number of attempts. # Constraints: - The random number generation should happen once at the start of the game. - The user input should be validated to ensure it is an integer within the specified range. # Example Output: ``` Guess the number (between 1 and 50): 25 Too low. Try again. Guess the number (between 1 and 50): 40 Too high. Try again. Guess the number (between 1 and 50): 35 Correct! It took you 3 attempts. ``` # Sample Code Template: ```python import random def guessing_game(): number_to_guess = random.randint(1, 50) attempts = 0 while True: try: guess = int(input(\\"Guess the number (between 1 and 50): \\")) attempts += 1 if guess < 1 or guess > 50: print(\\"Please guess a number within the range.\\") continue if guess < number_to_guess: print(\\"Too low. Try again.\\") elif guess > number_to_guess: print(\\"Too high. Try again.\\") else: print(f\\"Correct! It took you {attempts} attempts.\\") break except ValueError: print(\\"Invalid input. Please enter an integer.\\") guessing_game() ```","solution":"import random def guessing_game(): Runs a number guessing game where the user has to guess a randomly generated number between 1 and 50. number_to_guess = random.randint(1, 50) attempts = 0 while True: try: guess = int(input(\\"Guess the number (between 1 and 50): \\")) attempts += 1 if guess < 1 or guess > 50: print(\\"Please guess a number within the range.\\") continue if guess < number_to_guess: print(\\"Too low. Try again.\\") elif guess > number_to_guess: print(\\"Too high. Try again.\\") else: print(f\\"Correct! It took you {attempts} attempts.\\") break except ValueError: print(\\"Invalid input. Please enter an integer.\\") # Uncomment to test the guessing game interactively # guessing_game()"},{"question":"Design a function to identify palindromic substrings within a given string. A palindrome is a sequence of characters that reads the same forward and backward. The function should return a list of all unique palindromic substrings found in the input string. Ensure the solution is optimized to handle strings of various lengths efficiently. Provide a detailed explanation of your approach, along with the implementation in Python.","solution":"def palindromic_substrings(s): Identifies all unique palindromic substrings in the given string s. :param s: Input string to search for palindromic substrings. :return: A list of unique palindromic substrings. def expand_around_center(s, left, right, seen): while left >= 0 and right < len(s) and s[left] == s[right]: palindromic = s[left:right+1] if palindromic not in seen: seen.add(palindromic) left -= 1 right += 1 seen = set() for i in range(len(s)): # Odd length palindromes expand_around_center(s, i, i, seen) # Even length palindromes expand_around_center(s, i, i + 1, seen) return list(seen)"},{"question":"Write a function `format_dates` that takes a list of strings representing dates in \\"MM/DD/YYYY\\" format and converts each to \\"YYYY-MM-DD\\" format. The function should return a list of the formatted date strings. Example: ```python def format_dates(dates): # Your code here # Sample usage dates = [\\"12/30/2021\\", \\"01/01/2022\\", \\"07/04/2021\\"] print(format_dates(dates)) # Output: [\\"2021-12-30\\", \\"2022-01-01\\", \\"2021-07-04\\"] ```","solution":"def format_dates(dates): Converts dates from \\"MM/DD/YYYY\\" format to \\"YYYY-MM-DD\\" format. Args: dates (list of str): List of date strings in \\"MM/DD/YYYY\\" format. Returns: list of str: List of date strings in \\"YYYY-MM-DD\\" format. formatted_dates = [] for date in dates: mm, dd, yyyy = date.split(\'/\') formatted_dates.append(f\\"{yyyy}-{mm.zfill(2)}-{dd.zfill(2)}\\") return formatted_dates"},{"question":"Write a function that takes a list of integers and returns a new list where each element is the cumulative product of the elements up to that index in the original list. The function should handle large lists efficiently and should include error handling to manage cases where the input list contains non-integer values. Additionally, provide an optional parameter to specify a range within the list (start and end indices) for which the cumulative product should be calculated, with the rest of the elements remaining unchanged. Example list: [1, 2, 3, 4] Output: [1, 2, 6, 24]","solution":"def cumulative_product(lst, start=None, end=None): Returns a list where each element is the cumulative product of the elements up to that index in the original list. Optionally calculates the cumulative product only within a specified range. Parameters: lst (list): List of integers start (int): Optional, start index for the range to be considered end (int): Optional, end index for the range to be considered Returns: list: List with cumulative product # Validate input list if not isinstance(lst, list): raise ValueError(\\"Input must be a list\\") for item in lst: if not isinstance(item, int): raise ValueError(\\"All elements in the list must be integers\\") # Set default range if not provided if start is None: start = 0 if end is None: end = len(lst) # Validate range if start < 0 or end > len(lst) or start > end: raise ValueError(\\"Invalid range specified\\") # Calculate cumulative product result = lst.copy() product = 1 for i in range(start, end): product *= lst[i] result[i] = product return result"},{"question":"Create a function that accepts an integer array and an integer `k`, and returns the `k` most frequent elements in the array. If there are multiple candidates for the kth position, choose the smallest number among them. The function should handle arrays of varying length, including edge cases such as empty arrays and arrays with only one element. Example: - Input: `nums = [4, 1, -1, 2, -1, 2, 3]`, `k = 2` - Output: `[-1, 2]` - Input: `nums = [1]`, `k = 1` - Output: `[1]`","solution":"from collections import Counter import heapq def k_most_frequent(nums, k): Returns the k most frequent elements in the array. If there are multiple candidates for the kth position, choose the smallest number among them. :param nums: List[int] - List of integers :param k: int - Number of most frequent elements to return :return: List[int] - List of k most frequent elements if not nums: return [] # Generate a frequency dictionary freq = Counter(nums) # Create a max heap with negative frequency to use heapq as a max heap max_heap = [(-count, num) for num, count in freq.items()] heapq.heapify(max_heap) # Extract the k most frequent elements result = [] for _ in range(k): result.append(heapq.heappop(max_heap)[1]) return sorted(result)"},{"question":"Download the titanic dataset from https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv. Using pandas and matplotlib, analyze and visualize the distribution of the passengers\' ages, the survival rate grouped by gender, and the ticket class. Ensure that your visualizations clearly distinguish different categories and make the insights easy to interpret.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_titanic_dataset(path): # Load the Titanic dataset df = pd.read_csv(path) # Plot the distribution of passenger ages plt.figure(figsize=(10, 5)) df[\'Age\'].hist(bins=30, edgecolor=\'black\') plt.title(\'Distribution of Passengers\' Ages\') plt.xlabel(\'Age\') plt.ylabel(\'Number of Passengers\') plt.grid(False) plt.show() # Plot the survival rate grouped by gender survival_rate_by_gender = df.groupby(\'Sex\')[\'Survived\'].mean() survival_rate_by_gender.plot(kind=\'bar\', color=[\'blue\', \'pink\'], edgecolor=\'black\') plt.title(\'Survival Rate by Gender\') plt.xlabel(\'Gender\') plt.ylabel(\'Survival Rate\') plt.grid(False) plt.show() # Plot the survival rate grouped by ticket class survival_rate_by_class = df.groupby(\'Pclass\')[\'Survived\'].mean() survival_rate_by_class.plot(kind=\'bar\', color=[\'purple\', \'green\', \'orange\'], edgecolor=\'black\') plt.title(\'Survival Rate by Ticket Class\') plt.xlabel(\'Ticket Class\') plt.ylabel(\'Survival Rate\') plt.grid(False) plt.show()"},{"question":"You are provided with a 2D list where each sublist consists of three elements: a string representing a book title, a string representing the author\'s name, and an integer representing the year of publication. Your task is to develop a function that takes this list and returns a new list of tuples with the author\'s name followed by the title of the book. The returned list should be sorted in ascending order by the author\'s name. In case multiple books have the same author, sort those books by the year of publication in descending order. If the author and the year of publication are the same, sort those books by their titles in ascending order.","solution":"from typing import List, Tuple, Union def sort_books(books: List[List[Union[str, int]]]) -> List[Tuple[str, str]]: Sorts and returns a list of tuples with the author\'s name followed by the title of the book sorted by author\'s name in ascending order, by publication year in descending order, and by title in ascending order. :param books: List of books where each book is represented by a list of [title, author, year] :return: Sorted list of tuples [(author, title)] # Convert list of lists into list of tuples for the specified order books_tuples = [(book[1], book[0], book[2]) for book in books] # Sort based on author (asc), year (desc), and title (asc) sorted_books = sorted(books_tuples, key=lambda x: (x[0], -x[2], x[1])) # Extract only the required format (author, title) result = [(book[0], book[1]) for book in sorted_books] return result"},{"question":"I have a list of numbers and I need to generate a new list that replaces each number with the difference between that number and the average of the entire list. My idea for a solution would be to write a script to calculate the average of the list and then create a new list where each number is replaced with the difference from the average. I have some basic knowledge of scripting but finding it hard to get started. Does anyone have tips or a reference guide for how to perform list manipulations? As an additional requirement, the script should handle cases where the list is empty without errors and return an empty list in such scenarios.","solution":"def replace_with_difference_from_average(numbers): Replaces each number in the list with the difference between that number and the average of the entire list. if not numbers: return [] avg = sum(numbers) / len(numbers) return [x - avg for x in numbers]"},{"question":"Create a function that takes a list of integers and returns a dictionary where the keys are the integers from the list and the values are the number of times each integer appears in compressed form. If an integer appears consecutively in the list, it should be counted as one occurrence. Input list: [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] Output: {1: 1, 2: 1, 3: 1, 4: 1} Example: For the input list [1, 2, 2, 1, 1, 3, 3, 3], the function should return {1: 2, 2: 1, 3: 1}, as 1 appears twice (once at the beginning and once after the 2s), 2 appears once consecutively, and 3 appears once consecutively.","solution":"def compress_counts(lst): Takes a list of integers and returns a dictionary where the keys are the integers from the list and the values are the number of times each integer appears in compressed form. Consecutive appearances are counted as one. if not lst: return {} compressed_dict = {} current = lst[0] compressed_dict[current] = 1 for i in range(1, len(lst)): if lst[i] != current: current = lst[i] if current in compressed_dict: compressed_dict[current] += 1 else: compressed_dict[current] = 1 return compressed_dict"},{"question":"Given a list of integers, write a Python function to determine whether there exists a triplet (a, b, c) in the array such that a^3 + b^3 = c^3. Your function should return a boolean value: `True` if such a triplet exists, and `False` otherwise. **Function Signature:** ```python def find_triplet(arr: List[int]) -> bool: ``` **Input:** - arr (List[int]): A list of integers, where the length of the list is n (1 ≤ n ≤ 10^4) and each integer is between -10^3 and 10^3. **Output:** - Return a boolean value indicating the existence of a triplet (a, b, c) such that a^3 + b^3 = c^3. **Example:** ```python find_triplet([1, 2, 3, 4, 5, 6]) # Returns False find_triplet([3, -3, 0, 7]) # Returns True (since 3^3 + (-3)^3 = 0^3) find_triplet([-1, 2, -2, 1, 0]) # Returns True (since (-1)^3 + 1^3 = 0^3) ``` **Constraints:** - Evaluate all possible pairs and combinations to maintain efficiency within the given bounds. - Consider both positive and negative numbers.","solution":"from typing import List def find_triplet(arr: List[int]) -> bool: Determines whether there exists a triplet (a, b, c) in the array such that a^3 + b^3 = c^3. cubes = {x**3 for x in arr} for i in range(len(arr)): for j in range(len(arr)): if i != j: # Check if a^3 + b^3 is in the cubes set if arr[i]**3 + arr[j]**3 in cubes: return True return False"},{"question":"Design a function that takes a string as input and returns a dictionary where the keys are the characters from the string, and the values are the number of times each character appears. Ensure that the function is case-sensitive and accounts for special characters and spaces. Provide both the function definition and a few example cases to demonstrate its usage.","solution":"def count_characters(s): Returns a dictionary where the keys are the characters from the string, and the values are the number of times each character appears. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Design a Python function that takes a list of integers and returns the longest contiguous subarray that has the largest possible sum. Your function should account for edge cases, such as when the input list is empty. Additionally, provide a clear explanation of the algorithm you used. For example, given the list `[-2,1,-3,4,-1,2,1,-5,4]`, the function should return `[4,-1,2,1]` because this subarray has the greatest sum, which is `6`. When writing your solution, also include a piece of code that tests your function against several edge cases to ensure robustness and reliability. Be sure to handle lists with all negative numbers, all positive numbers, and those containing both positive and negative numbers.","solution":"def max_subarray(nums): Returns the longest contiguous subarray with the largest sum. Uses Kadane\'s Algorithm to find the maximum sum contiguous subarray. if not nums: return [] current_sum = max_sum = nums[0] start = end = s = 0 for i in range(1, len(nums)): if nums[i] > current_sum + nums[i]: current_sum = nums[i] s = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return nums[start:end + 1]"},{"question":"Write a function that takes a dictionary as input, where each key represents a student\'s name and each value is a list of their grades. The function should return a new dictionary where each student\'s name is associated with their average grade. Use dictionary comprehension to construct the new dictionary. Assume grades are integers and the input dictionary is non-empty.","solution":"def calculate_average_grades(students_grades): Returns a dictionary with students\' names and their average grades. Parameters: students_grades (dict): Dictionary where keys are student names and values are lists of their grades Returns: dict: Dictionary with student names as keys and average grades as values return {student: sum(grades) / len(grades) for student, grades in students_grades.items()}"},{"question":"Implement a function to merge two sorted arrays into a single sorted array without using any built-in sort functions. The function should handle arrays of different lengths. Example: Input: arr1 = [1, 3, 5, 7], arr2 = [2, 4, 6, 8] Output: [1, 2, 3, 4, 5, 6, 7, 8]","solution":"def merge_sorted_arrays(arr1, arr2): Merge two sorted arrays into one sorted array. Args: arr1 (list): The first sorted array. arr2 (list): The second sorted array. Returns: list: A sorted array containing all elements from both input arrays. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Develop a Python function that flattens a nested list of integers, but only flattens the list up to level N. The input will be a nested list and an integer N indicating the depth to which the list should be flattened. If N is 1, only the first level is flattened, if N is 2, two levels are flattened, and so on. For example, given the nested list and N as: nested_list = [1, [2, [3, [4]], 5], [6, 7]] N = 2 The function should return: [1, 2, 3, [4], 5, 6, 7] Defining the function: def flatten_with_depth(nested_list, N): ???","solution":"def flatten_with_depth(nested_list, N): Flattens a nested list up to depth N. Args: nested_list (list): The nested list to be flattened. N (int): The depth to which the list should be flattened. Returns: list: A flattened list up to the depth N. def flatten(lst, depth): result = [] if depth > 0: for item in lst: if isinstance(item, list): result.extend(flatten(item, depth - 1)) else: result.append(item) else: result.extend(lst) return result return flatten(nested_list, N)"},{"question":"Craft a Python function that processes a list of strings. Each string represents a name. Your function should return a dictionary where the keys are the unique first letters of the names and the values are lists of names starting with that letter, sorted in alphabetical order. Additionally, handle edge cases where the input could be an empty list or contain non-string elements. In such cases, return a relevant error message. Explain your solution approach, including handling of edge cases, and analyze its time and space complexity.","solution":"def process_names(names): Processes a list of names and returns a dictionary where the keys are the unique first letters of the names and the values are lists of names starting with that letter, sorted in alphabetical order. Args: names (list): A list of strings where each string is a name. Returns: dict: A dictionary with the first letters as keys and lists of names as values, or str: an error message in case of invalid input. if not isinstance(names, list): return \\"Input must be a list.\\" # Filter out non-string elements from the list. valid_names = [name for name in names if isinstance(name, str)] if not valid_names: return \\"No valid names provided.\\" name_dict = {} for name in valid_names: if name: first_letter = name[0].upper() if first_letter not in name_dict: name_dict[first_letter] = [] name_dict[first_letter].append(name) # Sort the names starting with each letter. for key in name_dict: name_dict[key].sort() return name_dict"},{"question":"Write a Python function named `find_majority_element` that locates the majority element in a given list. A majority element is an element that appears more than `n/2` times where `n` is the length of the list. Optimize the function to run in linear time and use constant space. Use the Boyer-Moore Voting Algorithm, which is efficient for this problem. If the majority element does not exist, return `None`. Ensure your function properly handles edge cases, including empty lists and situations where no majority element is present. Below are example cases for clarity: Representative Examples: - `find_majority_element([1, 2, 3, 1, 1])` must yield `1`. - `find_majority_element([1, 2, 3, 4, 5])` must yield `None`. - `find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4])` must yield `4`. ```python def find_majority_element(nums): Identifies the majority element in the list using Boyer-Moore Voting Algorithm if not nums: return None # Phase 1: Finding a candidate majority element candidate, count = None, 0 for num in nums: if count == 0: candidate = num count += 1 if num == candidate else -1 # Phase 2: Validating the candidate count = 0 for num in nums: if num == candidate: count += 1 if count > len(nums) // 2: return candidate return None ```","solution":"def find_majority_element(nums): Identifies the majority element in the list using Boyer-Moore Voting Algorithm. If no majority element exists, returns None. if not nums: return None # Phase 1: Finding a candidate majority element candidate, count = None, 0 for num in nums: if count == 0: candidate = num count += 1 if num == candidate else -1 # Phase 2: Validating the candidate count = 0 for num in nums: if num == candidate: count += 1 if count > len(nums) // 2: return candidate return None"},{"question":"Write a function that takes a string of lowercase alphabetic characters and returns the length of the longest substring that contains only unique characters. For example, for the input string \\"aaabbcdeab\\", the function should return 5, which corresponds to the substring \\"bcdea\\". Potential edge cases to handle include: - An empty string should return 0. - A string with all identical characters should return 1.","solution":"def longest_unique_substring(s): Returns the length of the longest substring that contains only unique characters. if not s: return 0 max_length = 0 start = 0 seen = {} for end in range(len(s)): char = s[end] if char in seen: start = max(start, seen[char] + 1) seen[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Implement a Python function that receives a list of integers and returns a new list containing only the positive numbers that are found in the original list, but sorted in descending order. Requirements: - Your function should be named `filter_and_sort_positive`. - Your function should accept a list of integers as its parameter. - Your function should filter out any non-positive integers (i.e., zero and negative numbers) from the list. - The resulting list should then be sorted in descending order and returned. Edge cases to consider: - The input list is empty. - The input list contains only negative numbers or zeros. - The input list contains a mix of positive, negative numbers, and zeros. Example: ```python input_list = [3, -1, 0, 5, 9, -2] output_list = filter_and_sort_positive(input_list) print(output_list) # Output should be [9, 5, 3] ```","solution":"def filter_and_sort_positive(numbers): Returns a list of positive numbers from the input list sorted in descending order. :param numbers: A list of integers. :return: A list containing only the positive integers sorted in descending order. # Filter out non-positive integers positive_numbers = [num for num in numbers if num > 0] # Sort the positive numbers in descending order positive_numbers.sort(reverse=True) return positive_numbers # Example usage: # input_list = [3, -1, 0, 5, 9, -2] # output_list = filter_and_sort_positive(input_list) # print(output_list) # Output should be [9, 5, 3]"},{"question":"Write a Python function, `extract_emails`, that takes a string containing text as input and returns a list of all email addresses found within the text. Assume email addresses are in the standard format (e.g., \\"username@example.com\\"). Your solution should be case-insensitive and handle edge cases such as emails with special characters, different domain names, and subdomains. Additionally, include error handling to manage cases where no email addresses are found in the input text.","solution":"import re def extract_emails(text): Extracts and returns a list of email addresses found within the input text. Args: text (str): The input text containing email addresses. Returns: list: A list of found email addresses, or an empty list if no email is found. # Define the regular expression pattern for matching email addresses email_pattern = re.compile(r\'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\', re.IGNORECASE) # Find all occurrences of the email pattern in the input text found_emails = email_pattern.findall(text) return found_emails"},{"question":"Create a function in Python that processes a list of integers and returns a dictionary with two keys: - \\"even_squares\\": a list of squares of all even numbers in the input list. - \\"odd_cubes\\": a list of cubes of all odd numbers in the input list. The function should traverse the input list only once and should ensure the result lists are in the same order as the corresponding numbers appeared in the input list. The input list can be assumed to contain only integers, and it can be empty. For example, for the input list [1, 2, 3, 4, 5], the function should output: ``` { \\"even_squares\\": [4, 16], \\"odd_cubes\\": [1, 27, 125] } ``` In case of an empty input list, the function should return: ``` { \\"even_squares\\": [], \\"odd_cubes\\": [] } ```","solution":"def process_numbers(numbers): Processes a list of integers and returns a dictionary with keys: - \\"even_squares\\": a list of squares of all even numbers. - \\"odd_cubes\\": a list of cubes of all odd numbers. Parameters: numbers (list): List of integers to process. Returns: dict: A dictionary with \\"even_squares\\" and \\"odd_cubes\\" lists. result = { \\"even_squares\\": [], \\"odd_cubes\\": [] } for num in numbers: if num % 2 == 0: result[\\"even_squares\\"].append(num**2) else: result[\\"odd_cubes\\"].append(num**3) return result"},{"question":"Write a Python function to reverse the words in a given sentence while preserving the order of the words. For instance, given the input \\"Hello world from space\\", the output should be \\"olleH dlrow morf ecaps\\". You are not allowed to use Python’s built-in reverse() method. sentence = \\"Coding challenges are fun\\"","solution":"def reverse_words(sentence): Reverses each word in a given sentence while preserving the order of the words. :param sentence: A string representing the input sentence. :return: A string with each word reversed while maintaining word order. words = sentence.split() reversed_words = [\'\'.join(reversed(word)) for word in words] return \' \'.join(reversed_words)"},{"question":"Write a function in Python that takes a list of tuples as input, where each tuple consists of a student\'s name and their score (e.g., [(\\"John\\", 88), (\\"Jane\\", 92), (\\"Dave\\", 75)]). The function should calculate the average score and return the names of the students who scored above the average. Ensure to handle cases where the list is empty. **Input:** - A list of tuples where each tuple contains a string (student name) and an integer (student score). **Output:** - A list of strings representing the names of students who scored above the average. Example: ``` Input: [(\\"John\\", 88), (\\"Jane\\", 92), (\\"Dave\\", 75)] Output: [\\"John\\", \\"Jane\\"] ```","solution":"def students_above_average(students): Returns a list of student names who scored above the average. :param students: List of tuples where each tuple consists of a student\'s name and score :type students: list :return: List of names of students who scored above the average score :rtype: list if not students: return [] total_score = sum(score for name, score in students) average_score = total_score / len(students) above_average_students = [name for name, score in students if score > average_score] return above_average_students"},{"question":"In Python, write a function to rotate a matrix (2D list) 90 degrees clockwise. The function should accept a square matrix (N x N) and return the rotated matrix. You need to ensure that the function handles edge cases appropriately, such as an empty matrix or a matrix with just one element. As a supplementary task, you should fix a provided piece of code that attempts to perform the same rotation but contains logic errors. The provided code is as follows: ```python def rotate_matrix(matrix): N = len(matrix) for i in range(N): for j in range(N): matrix[i][j], matrix[N-1-j][i] = matrix[N-1-j][i], matrix[i][j] return matrix ``` The function should handle cases like: 1. An empty matrix: `[]` 2. A 1x1 matrix: `[[1]]` 3. A 3x3 matrix: `[[1,2,3],[4,5,6],[7,8,9]]` Ensure the output matches the expected 90-degree rotation for each case.","solution":"def rotate_matrix(matrix): Rotates the given N x N matrix 90 degrees clockwise. if not matrix or not any(matrix): return matrix N = len(matrix) result = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): result[j][N - 1 - i] = matrix[i][j] return result"},{"question":"Write a function to determine whether two given strings are anagrams of each other. Two strings are considered anagrams if they are made of the same characters with the same frequencies, but the characters can be in different orders. The input strings can contain only lowercase alphabets. Input: str1 = \\"listen\\" str2 = \\"silent\\" Output: True","solution":"def are_anagrams(str1, str2): Determine if two strings are anagrams. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. # Check if the lengths of the strings are the same if len(str1) != len(str2): return False # Count the frequency of each character in both strings from collections import Counter return Counter(str1) == Counter(str2)"},{"question":"Create a Python program that accepts a list of integers and a target sum from the user. The program should find all unique pairs in the list that add up to the given target sum. Make sure to handle edge cases such as empty lists, lists with less than two elements, and ensure that pairs are unique (i.e., no repeating pairs of the same elements in different order). For example: - Input list: [10, 15, 3, 7, 3] - Target sum: 10 - Output pairs: [(3, 7), (3, 7)] - Input list: [1, 2, 3, 4, 5] - Target sum: 5 - Output pairs: [(1, 4), (2, 3)] - Input list: [] - Target sum: 10 - Output pairs: [] - Input list: [5] - Target sum: 5 - Output pairs: [] Note: Ensure that pairs are printed in the format (smaller number, larger number).","solution":"def find_pairs(nums, target): Returns a list of unique pairs from the given list that add up to the target sum. Each pair is a tuple (smaller number, larger number). Parameters: nums (list of int): list of integers. target (int): target sum. Returns: list of tuples: list of tuples where each tuple contains two numbers that add up to the target sum. pairs = set() seen = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return list(pairs)"},{"question":"Write a function called `flatten_dictionary` that takes a dictionary with nested dictionaries and returns a flattened dictionary where nested keys are represented in the flat dictionary with a dot (.) separating each level. For instance, the key from the nested dictionary {\\"a\\": {\\"b\\": {\\"c\\": \\"d\\"}}} in the flattened dictionary would be \\"a.b.c\\". Your function should handle cases where nested dictionaries contain other nested dictionaries to an arbitrary depth. Assume that the keys are all strings. # Example Input: ```python { \\"key1\\": \\"value1\\", \\"key2\\": { \\"key3\\": { \\"key4\\": \\"value2\\" } }, \\"key5\\": { \\"key6\\": \\"value3\\" } } ``` Output: ```python { \\"key1\\": \\"value1\\", \\"key2.key3.key4\\": \\"value2\\", \\"key5.key6\\": \\"value3\\" } ``` Additional Requirements: - Provide an erroneous code snippet that attempts to solve the problem but fails due to a specific error, and analyze both the error and the provided code. - Correct the erroneous code to create a working solution. # Erroneous Code Example ```python def flatten_dictionary(d): def _flatten(current_key, value, result): if isinstance(value, dict): for k, v in value.items(): _flatten(current_key + \\".\\" + k, v, result) else: result[current_key] = value result = {} for key, val in d.items(): _flatten(key, val, result) return result input_dict = { \\"key1\\": \\"value1\\", \\"key2\\": { \\"key3\\": { \\"key4\\": \\"value2\\" } }, \\"key5\\": { \\"key6\\": \\"value3\\" } } flattened_dict = flatten_dictionary(input_dict) print(flattened_dict) ``` # Error Analysis: The erroneous code works for most cases but fails when the initial dictionary key is empty. This condition should be handled to start with the correct key format. # Corrected Code Example ```python def flatten_dictionary(d): def _flatten(current_key, value, result): if isinstance(value, dict): for k, v in value.items(): new_key = f\\"{current_key}.{k}\\" if current_key else k _flatten(new_key, v, result) else: result[current_key] = value result = {} for key, val in d.items(): _flatten(key, val, result) return result input_dict = { \\"key1\\": \\"value1\\", \\"key2\\": { \\"key3\\": { \\"key4\\": \\"value2\\" } }, \\"key5\\": { \\"key6\\": \\"value3\\" } } flattened_dict = flatten_dictionary(input_dict) print(flattened_dict) ```","solution":"def flatten_dictionary(d): def _flatten(current_key, value, result): if isinstance(value, dict): for k, v in value.items(): new_key = f\\"{current_key}.{k}\\" if current_key else k _flatten(new_key, v, result) else: result[current_key] = value result = {} for key, val in d.items(): _flatten(key, val, result) return result"},{"question":"Write a function `can_be_palindrome(s: str) -> bool` that determines whether any permutation of the characters in a given string can form a palindrome. A string is considered a palindrome if it reads the same forwards and backwards. The function should handle edge cases such as empty strings and strings with different character sets. # Input - A single input string `s` that can contain lowercase and/or uppercase letters. # Output - A boolean value `True` if any permutation of the characters in the string can form a palindrome, and `False` otherwise. # Example ```python print(can_be_palindrome(\\"racecar\\")) # Output: True print(can_be_palindrome(\\"aabbcc\\")) # Output: True print(can_be_palindrome(\\"abc\\")) # Output: False ``` # Explanation - The string \\"racecar\\" can be rearranged to form the palindrome \\"racecar\\". - The string \\"aabbcc\\" can be rearranged to form the palindrome \\"abccba\\". - The string \\"abc\\" cannot be rearranged to form any palindrome.","solution":"def can_be_palindrome(s: str) -> bool: Determines whether any permutation of the characters in the given string can form a palindrome. from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # A string can be permuted to form a palindrome if it has at most one character with an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Create a function in Python that takes a list of integers and returns a new list where each element is the product of all the numbers in the original list except the number at that position. For example, given the list `[1, 2, 3, 4]`, the function should return `[24, 12, 8, 6]`. Additionally, analyze how the performance of your solution compares to a naive nested loop approach. Erroneous Code: ```python def product_except_self(nums): result = [] for i in range(len(nums)): prod = 1 for j in range(len(nums)): if i != j: prod *= nums[j] result.append(prod) return result ``` Modify the above code to improve its performance, ensuring that it operates in (O(n)) time complexity. Provide an explanation for your optimized solution, with a focus on its efficiency compared to the naive nested loop approach.","solution":"def product_except_self(nums): Returns a list where each element at index i is the product of all the numbers in the original list except the number at index i. length = len(nums) # Initialize our two lists with 1s for product accumulation left_products = [1] * length right_products = [1] * length # Compute the products of all elements to the left of each element for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Compute the products of all elements to the right of each element for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # The result is the product of corresponding left and right products result = [left_products[i] * right_products[i] for i in range(length)] return result"},{"question":"Given a list of `n` integers, write a function called `find_majority_element` that returns the majority element in the list, if one exists, or `None` if no majority element is found. A majority element is defined as an element that appears more than `n/2` times in the list. **Function Signature:** ```python def find_majority_element(arr: List[int]) -> Optional[int]: ``` **Input:** - A list of integers `arr` (1 ≤ length ≤ 10^6). **Output:** - The integer that is the majority element or `None` if no majority element exists. **Examples:** 1. `find_majority_element([3,3,4,2,4,4,2,4,4])` should return `4`. 2. `find_majority_element([3,3,4,2,4,4,2,4])` should return `None`.","solution":"from typing import List, Optional def find_majority_element(arr: List[int]) -> Optional[int]: Returns the majority element if it exists, or None otherwise. A majority element is the element that appears more than n/2 times in the list. candidate = None count = 0 # Boyer-Moore Voting Algorithm to find potential majority element for num in arr: if count == 0: candidate = num if num == candidate: count += 1 else: count -= 1 # Verify if candidate is actually the majority if arr.count(candidate) > len(arr) // 2: return candidate return None"},{"question":"Write a Python function that takes a list of integers and a target integer as input. The function should return a tuple containing two distinct elements from the list that add up to the target, or None if no such pair exists. Assume that each input would have exactly one solution, and an element cannot be used twice. The input is the list [2, 7, 11, 15] and the target is 9.","solution":"def two_sum(nums, target): Returns a tuple of two distinct elements from the list that add up to the target, or None if no such pair exists. Args: nums (list of int): The list of integers. target (int): The target sum. Returns: tuple: A tuple containing two integers that add up to the target. num_dict = {} for num in nums: complement = target - num if complement in num_dict: return (complement, num) num_dict[num] = True return None"},{"question":"Given a list of integers representing the task durations, and two workers who will be executing these tasks, implement a function to distribute the tasks such that the maximum time taken by either worker is minimized. Each task must be assigned to one worker and a worker can execute multiple tasks. Return the minimum possible time that the worker with the highest workload will have after the distribution. # Input: - `tasks` (List[int]): A list of integers representing the duration of each task. # Output: - An integer representing the minimum possible maximum workload time of the two workers after distributing all the tasks. # Example: ```python def distribute_tasks(tasks): # Your code here # Example tasks = [10, 7, 5, 8] print(distribute_tasks(tasks)) # Output: 15 ``` # Constraints: - The length of `tasks` list will be between 1 and 1000. - Each task duration will be between 1 and 1000.","solution":"def distribute_tasks(tasks): def can_distribute(max_time): worker_1 = 0 worker_2 = 0 for task in sorted(tasks, reverse=True): if worker_1 <= worker_2: worker_1 += task if worker_1 > max_time: return False else: worker_2 += task if worker_2 > max_time: return False return True low, high = max(tasks), sum(tasks) result = high while low <= high: mid = (low + high) // 2 if can_distribute(mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"Create a function in Python that accepts a list of integers and returns the maximum difference between any two elements such that the larger element appears after the smaller element in the list. The function should have an optimal time complexity, ideally O(n). Provide examples to demonstrate the function\'s usage.","solution":"def max_difference(arr): Returns the maximum difference between any two elements such that the larger element appears after the smaller element in the list. if not arr or len(arr) < 2: return 0 # No meaningful difference can be found in these cases min_value = arr[0] max_diff = 0 for i in range(1, len(arr)): current_value = arr[i] if current_value - min_value > max_diff: max_diff = current_value - min_value if current_value < min_value: min_value = current_value return max_diff # Example usage print(max_difference([2, 3, 10, 6, 4, 8, 1])) # Output: 8 (10 - 2) print(max_difference([7, 9, 5, 6, 3, 2])) # Output: 2 (9 - 7)"},{"question":"Create a Python function that accepts a string and returns a new string with characters of the original string reversed. Ensure the function handles both alphanumeric characters and special symbols accurately.","solution":"def reverse_string(s): Returns a new string with characters of the original string reversed. Parameters: s (str): The string to be reversed. Returns: str: Reversed string. return s[::-1]"},{"question":"Write a Python function that takes a list of tuples, where each tuple contains two strings representing dates in \\"YYYY-MM-DD\\" format. The function should return a list of integers representing the number of days between the two dates for each tuple. Ensure that the function can handle special cases where the dates are the same and where the dates fall in different months or years. For instance, the input list can be: date_pairs = [(\\"2023-03-25\\", \\"2023-04-01\\"), (\\"2022-01-10\\", \\"2022-01-10\\"), (\\"2021-12-25\\", \\"2022-01-01\\")] You may use the datetime module in Python to manage dates and calculate the differences. The output for the provided input would be [7, 0, 7].","solution":"from datetime import datetime def days_between_dates(date_pairs): Given a list of tuples containing two dates in \\"YYYY-MM-DD\\" format, returns a list of integers representing the number of days between each pair of dates. result = [] for date1, date2 in date_pairs: date_format = \\"%Y-%m-%d\\" d1 = datetime.strptime(date1, date_format) d2 = datetime.strptime(date2, date_format) delta = abs((d2 - d1).days) result.append(delta) return result"},{"question":"Create a Python function that reads a CSV file containing sales data and generates a summary report. The report should include total sales, average sales per month, and the top 3 highest selling products. The function should handle large files efficiently and manage potential missing values or data inconsistencies. Use libraries such as pandas and numpy for data manipulation and analysis.","solution":"import pandas as pd def generate_sales_summary(file_path): Reads a CSV file containing sales data and generates a summary report. The report includes total sales, average sales per month, and the top 3 highest selling products. Parameters: file_path (str): Path to the CSV file containing the sales data Returns: dict: A dictionary containing the summary report with keys \'total_sales\', \'average_sales_per_month\', and \'top_3_products\' # Read the CSV file sales_data = pd.read_csv(file_path) # Handle missing values by filling with 0s sales_data.fillna(0, inplace=True) # Calculate total sales total_sales = sales_data[\'sales\'].sum() # Calculate average sales per month # Assuming the data contains a \'month\' column to group by average_sales_per_month = sales_data.groupby(\'month\')[\'sales\'].sum().mean() # Find the top 3 highest selling products top_3_products = sales_data.groupby(\'product\')[\'sales\'].sum().nlargest(3).index.tolist() # Create the summary report summary_report = { \'total_sales\': total_sales, \'average_sales_per_month\': average_sales_per_month, \'top_3_products\': top_3_products } return summary_report"},{"question":"Write a Python function that takes an integer `n` as input and generates a list of strings representing an inverted half-pyramid pattern of stars. Each row should contain one less star than the previous row, starting from `n` stars at the top, down to one star at the bottom. Example: For `n = 5`, the function should return: ``` ***** **** *** ** * ```","solution":"def inverted_half_pyramid(n): Generates an inverted half-pyramid pattern of stars. Parameters: n (int): The number of stars in the top row. Returns: list of str: A list where each string represents a row of the pyramid. pyramid = [] for i in range(n, 0, -1): pyramid.append(\'*\' * i) return pyramid"},{"question":"Write a Python function to determine the most frequent integer in a list. If there are multiple integers with the same frequency, return the smallest one. Use the following list as an example: numbers = [4, 1, 2, 2, 3, 4, 4, 1] Your function should return the integer 4, as it appears most frequently in the list. If you have multiple integers with the same frequency, for example, if 1 and 2 both appear twice, return the smallest integer 1.","solution":"def most_frequent_integer(numbers): Determines the most frequent integer in a list. If there are multiple integers with the same frequency, returns the smallest one. :param numbers: List of integers :return: The most frequent integer, or the smallest one if tie in frequency from collections import Counter if not numbers: return None freq = Counter(numbers) max_freq = max(freq.values()) most_frequent = [num for num, count in freq.items() if count == max_freq] return min(most_frequent)"},{"question":"Write a Python function that takes two strings as input and returns True if one string is a permutation of the other, and False otherwise. A permutation means that both strings must contain the exact same characters in the exact same quantities. For instance, the strings \'abc\' and \'bca\' are permutations of each other, but \'abc\' and \'abcd\' are not. Consider only lowercase letters and ignore spaces.","solution":"def are_permutations(s1, s2): Returns True if one string is a permutation of the other, otherwise False. # Remove spaces and consider only lowercase letters s1 = s1.replace(\\" \\", \\"\\").lower() s2 = s2.replace(\\" \\", \\"\\").lower() # Check if sorted versions of the strings are the same return sorted(s1) == sorted(s2)"}]'),C={name:"App",components:{PoemCard:R},data(){return{searchQuery:"",visibleCount:4,poemsData:F,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},P={class:"search-container"},S={class:"card-container"},D={key:0,class:"empty-state"},O=["disabled"],z={key:0},N={key:1};function L(i,e,l,m,s,a){const p=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",P,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",S,[(n(!0),r(b,null,w(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",D,' No results found for "'+d(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",N,"Loading...")):(n(),r("span",z,"See more"))],8,O)):u("",!0)])}const j=h(C,[["render",L],["__scopeId","data-v-92415072"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"drive/4.md","filePath":"drive/4.md"}'),Y={name:"drive/4.md"},B=Object.assign(Y,{setup(i){return(e,l)=>(n(),r("div",null,[x(j)]))}});export{M as __pageData,B as default};
