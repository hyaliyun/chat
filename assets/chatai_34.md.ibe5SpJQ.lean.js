import{_ as c,o as n,c as i,a as t,m as h,t as d,C as g,M as _,U as y,f as u,F as w,p as b,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},A={class:"review-title"},E={class:"review-content"};function S(a,e,l,p,r,s){return n(),i("div",T,[t("div",q,[t("div",A,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),h(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),h(d(l.poem.solution),1)])])])}const C=c(k,[["render",S],["__scopeId","data-v-c7639ae4"]]),I=JSON.parse('[{"question":"You need to implement a function, `longest_common_subsequence`, that finds the length of the longest common subsequence between two strings. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. For example, \\"abc\\", \\"abg\\", \\"bdf\\" are subsequences of \\"abcdefg\\". **Function Signature:** ```python def longest_common_subsequence(str1: str, str2: str) -> int: ``` **Parameters:** - `str1` (`str`): The first input string. - `str2` (`str`): The second input string. **Returns:** - `int`: The length of the longest common subsequence between the two input strings. **Constraints:** - Both input strings consist of only lowercase English letters. - The lengths of both strings are at most 1000 characters. **Example:** ```python str1 = \\"abcde\\" str2 = \\"ace\\" print(longest_common_subsequence(str1, str2)) # Output: 3, as the longest common subsequence is \\"ace\\" str1 = \\"abcdxyz\\" str2 = \\"xyzabcd\\" print(longest_common_subsequence(str1, str2)) # Output: 4, as the longest common subsequence is \\"abcd\\" ``` **Requirements:** - You should use dynamic programming to solve the problem and ensure the solution runs efficiently within the constraints. - Consider edge cases such as empty strings or no common subsequence between the input strings.","solution":"def longest_common_subsequence(str1: str, str2: str) -> int: Finds the length of the longest common subsequence between two strings. m, n = len(str1), len(str2) # Create a (m+1) x (n+1) matrix initialized with zeros dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the matrix from bottom up for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"In this problem, you will construct a function to generate a Fibonacci sequence using recursion, memoization, and bottom-up dynamic programming approaches. The primary goal is to enable a comparative analysis of these three methods in terms of performance and implementation complexity. Your task is to implement the function `fibonacci(n, method)`, where `n` is the position in the Fibonacci sequence, and `method` specifies which of the three methods to use to compute the Fibonacci number. # Function Signature ```python def fibonacci(n, method): Parameters ---------- n : int The position in the Fibonacci sequence (0-indexed). method : str The method to compute the Fibonacci number: \'recursive\', \'memoization\', or \'bottom-up\'. Returns ------- int The Fibonacci number at position n. pass ``` # Requirements 1. If the `method` is `\'recursive\'`, use a simple recursive function to calculate the Fibonacci number. 2. If the `method` is `\'memoization\'`, use a recursive function with memoization to store intermediate results. 3. If the `method` is `\'bottom-up\'`, use an iterative approach to calculate the Fibonacci number using bottom-up dynamic programming. # Example Given the inputs: ```python n = 10 method = \'recursive\' ``` The function should return: ```python 55 ``` Another example: ```python n = 10 method = \'memoization\' ``` The function should also return: ```python 55 ``` And another example: ```python n = 10 method = \'bottom-up\' ``` The function should again return: ```python 55 ``` # Constraints - `n` will be a non-negative integer. - The maximum value for `n` is 30 for the \'recursive\' method due to performance considerations. - The \'memoization\' and \'bottom-up\' methods should handle `n` up to 5000 efficiently.","solution":"def fibonacci(n, method): Parameters ---------- n : int The position in the Fibonacci sequence (0-indexed). method : str The method to compute the Fibonacci number: \'recursive\', \'memoization\', or \'bottom-up\'. Returns ------- int The Fibonacci number at position n. if method == \'recursive\': return recursive_fib(n) elif method == \'memoization\': memo = {} return memoization_fib(n, memo) elif method == \'bottom-up\': return bottom_up_fib(n) else: raise ValueError(\\"method should be \'recursive\', \'memoization\', or \'bottom-up\'\\") def recursive_fib(n): if n <= 1: return n else: return recursive_fib(n - 1) + recursive_fib(n - 2) def memoization_fib(n, memo): if n in memo: return memo[n] if n <= 1: memo[n] = n else: memo[n] = memoization_fib(n - 1, memo) + memoization_fib(n - 2, memo) return memo[n] def bottom_up_fib(n): if n <= 1: return n fib_array = [0] * (n + 1) fib_array[1] = 1 for i in range(2, n + 1): fib_array[i] = fib_array[i - 1] + fib_array[i - 2] return fib_array[n]"},{"question":"Consider a list of integers representing the distinct nodes in an undirected graph and a list of tuples representing the undirected edges of the graph, where each tuple contains two integers. For example: ```python nodes = [1, 2, 3, 4] edges = [(1, 2), (2, 3), (3, 4), (4, 1), (1, 3)] ``` Your task is to implement the function `is_cyclic(nodes, edges)` that determines if the graph contains any cycles. The function should return `True` if a cycle is detected, and `False` otherwise. You should use Depth-First Search (DFS) to detect cycles. You are required to use the following components from relevant Python libraries: - `collections.defaultdict` The function signature is: ```python def is_cyclic(nodes: list, edges: list) -> bool: pass ```","solution":"from collections import defaultdict def is_cyclic(nodes, edges): Determines if the graph contains any cycles using DFS. Args: nodes: List of integers representing the distinct nodes in the graph. edges: List of tuples, where each tuple contains two integers representing an undirected edge. Returns: bool: True if a cycle is detected, False otherwise. def dfs(v, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif parent != neighbor: return True return False graph = defaultdict(list) for edge in edges: graph[edge[0]].append(edge[1]) graph[edge[1]].append(edge[0]) visited = {node: False for node in nodes} for node in nodes: if not visited[node]: if dfs(node, -1): return True return False"},{"question":"You are given a partially implemented function named `matrix_multiplication` that performs matrix multiplication on two 2-D NumPy arrays. Matrix multiplication is defined such that if you have two matrices `A` and `B`, their product `C = A * B` is a matrix whose elements are computed as the dot product of the rows of `A` with the columns of `B`. Your task is to complete the `matrix_multiplication` function so that it returns the resulting matrix from multiplying the input matrices `A` and `B`. # Function Signature ```python def matrix_multiplication(A, B): # Check if the number of columns in A is equal to the number of rows in B if A.shape[1] != B.shape[0]: raise ValueError(\\"Number of columns of A must equal number of rows of B.\\") # Initialize a result matrix with zeros result = np.zeros((A.shape[0], B.shape[1])) # Compute the matrix multiplication for i in range(A.shape[0]): for j in range(B.shape[1]): result[i, j] = np.dot(A[i, :], B[:, j]) return result ``` # Input: - `A` : A 2-D NumPy array with shape `(m, n)`. - `B` : A 2-D NumPy array with shape `(n, p)`. # Output: - `result` : A 2-D NumPy array with shape `(m, p)` containing the result of the matrix multiplication. # Requirements: - Use NumPy\'s `dot` function to compute the dot product of corresponding rows and columns. # Example: ```python import numpy as np A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) result = matrix_multiplication(A, B) print(\\"Result:\\") print(result) # Expected Output # Result: # [[19 22] # [43 50]] ``` # Explanation: 1. **Shape Check:** Ensure the number of columns in matrix `A` is equal to the number of rows in matrix `B`. 2. **Initiate Result Matrix:** Create an output matrix filled with zeros of the appropriate shape. 3. **Element Calculation:** Use nested loops to fill in the result matrix by calculating the dot product of corresponding elements. 4. **Return Result:** Return the result matrix containing the product of `A` and `B`. Your task is to complete the `matrix_multiplication` function as described above, ensuring the correct use of NumPy functions for the calculations.","solution":"import numpy as np def matrix_multiplication(A, B): Multiplies two matrices A and B using matrix multiplication rules. Parameters: A (np.ndarray): A 2-D numpy array of shape (m, n). B (np.ndarray): A 2-D numpy array of shape (n, p). Returns: np.ndarray: The resulting matrix of shape (m, p). # Check if the number of columns in A is equal to the number of rows in B if A.shape[1] != B.shape[0]: raise ValueError(\\"Number of columns of A must equal number of rows of B.\\") # Initialize a result matrix with zeros result = np.zeros((A.shape[0], B.shape[1])) # Compute the matrix multiplication for i in range(A.shape[0]): for j in range(B.shape[1]): result[i, j] = np.dot(A[i, :], B[:, j]) return result"},{"question":"You are required to implement a function called `find_primes` that will take two integers `a` and `b` and return a list of all prime numbers between `a` and `b` (inclusive). A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The function signature should be: ```python def find_primes(a, b): pass ``` # Example: Given the input: ```python find_primes(10, 20) ``` The function should return: ```python [11, 13, 17, 19] ``` # Constraints: 1. `a` and `b` are integers where `1 <= a <= b`. 2. The function should be efficient, aiming for a time complexity better than O(n^2). 3. If there are no prime numbers in the given range, the function should return an empty list. # Note: You may use helper functions to check if a number is prime.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes(a, b): Returns a list of all prime numbers between a and b (inclusive). primes = [] for num in range(a, b + 1): if is_prime(num): primes.append(num) return primes"},{"question":"**Title:** Implementing Heap Sort in Python Heap sort is a comparison-based sorting technique that uses the properties of a binary heap data structure. Specifically, it leverages a max heap for ascending order sorting (or a min heap for descending order sorting). Your task is to implement a function `heap_sort(arr)` that sorts an input array of integers in-place using the max heap approach. Here are the steps to implement heap sort: 1. **Build a max heap:** This involves rearranging the array such that it becomes a max heap where the largest value is at the root node. 2. **Heapify:** This is a function to maintain the heap property for a given subtree. If the subtree rooted at a node violates the heap property (a parent node is smaller than its children), this function fixes the violation. 3. **Extract elements:** Swap the root (maximum value) of the heap with the last element of the array. Reduce the size of the heap by one, then heapify the root element again to restore the heap property. Repeat this process until the heap is empty. **Function Signature:** ```python def heap_sort(arr: List[int]) -> None: ``` **Explanation of the iterative method:** - **Build Max Heap:** Adjust the array so that the subtree rooted at each non-leaf node satisfies the max heap property. - **Heapify:** Ensure that a subtree rooted with a node `i` of a given array `arr` of size `n` maintains the max heap property. - **Extract elements:** Continuously swap the root of the heap with the last element in the heap, decrease heap size by `1`, and heapify the root. **Detailed Steps:** 1. Define a heapify function that takes an array `arr`, the size of the heap `n`, and the index `i`: - Let `largest` be `i`. Let `left` and `right` be the indices of the left and right children of `i` respectively. - If `left` is within the bounds of the heap and `arr[left] > arr[largest]`, update `largest` to `left`. - Similarly, if `right` is within the bounds of the heap and `arr[right] > arr[largest]`, update `largest` to `right`. - If `largest` is not equal to `i`, swap `arr[i]` with `arr[largest]` and recursively heapify the affected subtree. 2. Build the max heap: - Start from the last non-leaf node and call heapify for each node up to the root node. 3. Perform heap sort: - Swap the root element with the last element, reduce heap size by one, and call heapify for the root node. - Repeat until the entire array is sorted. **Example:** ```python arr = [4, 10, 3, 5, 1] heap_sort(arr) print(arr) # Expected output: [1, 3, 4, 5, 10] ``` Below is the implementation of the `heap_sort` function: ```python from typing import List def heapify(arr: List[int], n: int, i: int) -> None: largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[left] > arr[largest]: largest = left if right < n and arr[right] > arr[largest]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest) def heap_sort(arr: List[int]) -> None: n = len(arr) for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) for i in range(n - 1, 0, -1): arr[i], arr[0] = arr[0], arr[i] heapify(arr, i, 0) ```","solution":"from typing import List def heapify(arr: List[int], n: int, i: int) -> None: largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[left] > arr[largest]: largest = left if right < n and arr[right] > arr[largest]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest) def heap_sort(arr: List[int]) -> None: n = len(arr) for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) for i in range(n - 1, 0, -1): arr[i], arr[0] = arr[0], arr[i] heapify(arr, i, 0)"},{"question":"Time Series Anomaly Detection In this problem, you are required to implement a function `detect_anomalies` that utilizes the Interquartile Range (IQR) method to detect anomalies in a given pandas DataFrame containing time series data. **Function Signature:** ```python def detect_anomalies(df: pd.DataFrame, column: str) -> pd.DataFrame: ``` **Parameters:** - `df` (pd.DataFrame): A pandas DataFrame containing the time series data. - `column` (str): The name of the column in the DataFrame which contains the data for anomaly detection. **Returns:** - `pd.DataFrame`: A new DataFrame with an additional column named \'anomaly\'. This column should have a value of `1` for rows considered anomalies, and `0` otherwise. **Requirements:** 1. Calculate the first quartile (Q1) and third quartile (Q3) of the specified column. 2. Compute the Interquartile Range (IQR) which is Q3 - Q1. 3. Anomalies are defined as data points that fall below Q1 - 1.5 * IQR or above Q3 + 1.5 * IQR. 4. Add a column named \'anomaly\' to the input DataFrame where anomalies are marked with `1` and non-anomalies with `0`. **Example:** Assume you have the following input DataFrame `df`: ```python import pandas as pd data = { \'timestamp\': [\'2021-01-01\', \'2021-01-02\', \'2021-01-03\', \'2021-01-04\', \'2021-01-05\'], \'value\': [10, 12, 12, 15, 30] } df = pd.DataFrame(data) ``` If you call `detect_anomalies(df, \'value\')`, it should return a DataFrame with an additional column \'anomaly\' indicating whether each row is an anomaly or not. **Your task:** Implement the `detect_anomalies` function adhering to the specifications provided above.","solution":"import pandas as pd def detect_anomalies(df: pd.DataFrame, column: str) -> pd.DataFrame: Detects anomalies in the specified column of the DataFrame using the IQR method. Parameters: df (pd.DataFrame): A pandas DataFrame containing the time series data. column (str): The name of the column in the DataFrame which contains the data for anomaly detection. Returns: pd.DataFrame: A new DataFrame with an additional column named \'anomaly\'. This column has a value of `1` for rows considered anomalies, and `0` otherwise. # Calculate the first quartile (Q1) and third quartile (Q3) Q1 = df[column].quantile(0.25) Q3 = df[column].quantile(0.75) # Compute the Interquartile Range (IQR) IQR = Q3 - Q1 # Define the anomaly thresholds lower_bound = Q1 - 1.5 * IQR upper_bound = Q3 + 1.5 * IQR # Add the \'anomaly\' column df[\'anomaly\'] = ((df[column] < lower_bound) | (df[column] > upper_bound)).astype(int) return df"},{"question":"You are required to write a function named `calculate_word_frequencies` that processes a given text file and calculates the frequency of each word in the file. The function should ignore punctuation and be case-insensitive. The function should then write the frequencies to an output file, where each line contains a word and its frequency, sorted by frequency in descending order. Words with the same frequency should be sorted alphabetically. **Function Signature:** ```python def calculate_word_frequencies(input_file: str, output_file: str) -> None: pass ``` **Parameters:** - `input_file` (str): The path to the input text file. - `output_file` (str): The path to the output file where word frequencies will be written, one word per line followed by its frequency. **Requirements:** 1. Use Python\'s `str.lower` method to convert words to lowercase. 2. Use the `re.findall` function from the `re` library to handle word extraction, considering words separated by non-alphabetical characters. 3. Calculate the frequency of each word and store it in a dictionary. 4. Sort the dictionary first by frequency in descending order, then by the word alphabetically. 5. Write each word and its frequency to the `output_file`. **Example:** Given an `input_file` with the following content: ``` Hello, world! Hello. Python is great. The world is vast and Python is powerful. ``` **Output - `output_file` contents:** ``` is 3 hello 2 python 2 world 2 and 1 great 1 powerful 1 the 1 vast 1 ``` Implement the `calculate_word_frequencies` function to perform the above tasks.","solution":"import re from collections import Counter, defaultdict def calculate_word_frequencies(input_file: str, output_file: str) -> None: # Read the content of the input file with open(input_file, \'r\') as file: text = file.read() # Normalize the text: convert to lowercase and extract words text = text.lower() words = re.findall(r\'b[a-z]+b\', text) # Calculate the frequency of each word word_counts = Counter(words) # Sort the words first by frequency (descending) then alphabetically sorted_words = sorted(word_counts.items(), key=lambda item: (-item[1], item[0])) # Write to the output file with open(output_file, \'w\') as file: for word, count in sorted_words: file.write(f\\"{word} {count}n\\")"},{"question":"Write a function to model the spread of a virus in a closed population using the SIR (Susceptible, Infected, Recovered) model. The function should take the initial number of infected individuals, the initial number of recovered individuals, the total population, the infection rate, and the recovery rate. Use Scipy to solve the differential equations that describe the SIR model dynamics. Plot the number of susceptible, infected, and recovered individuals over time using Matplotlib. Use \\"SIR Model of Virus Spread\\" for the plot title, \\"Time (days)\\" for the x-axis label, and \\"Number of Individuals\\" for the y-axis label. The function should return: ndarray: A numpy array with three columns representing the number of susceptible, infected, and recovered individuals over time. Axes: A Matplotlib Axes object of the SIR model plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint def virus_spread_sir(initial_infected, initial_recovered, population, infection_rate, recovery_rate, duration=160, steps=1000): ```","solution":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint def virus_spread_sir(initial_infected, initial_recovered, population, infection_rate, recovery_rate, duration=160, steps=1000): # Initial number of susceptible individuals initial_susceptible = population - initial_infected - initial_recovered # Initial conditions vector initial_conditions = [initial_susceptible, initial_infected, initial_recovered] # Time vector t = np.linspace(0, duration, steps) # SIR model differential equations def sir_model(y, t, population, infection_rate, recovery_rate): S, I, R = y dSdt = -infection_rate * S * I / population dIdt = infection_rate * S * I / population - recovery_rate * I dRdt = recovery_rate * I return [dSdt, dIdt, dRdt] # Integrate the SIR equations over the time grid result = odeint(sir_model, initial_conditions, t, args=(population, infection_rate, recovery_rate)) # Plot the data fig, ax = plt.subplots() ax.plot(t, result[:, 0], \'b\', label=\\"Susceptible\\") ax.plot(t, result[:, 1], \'r\', label=\\"Infected\\") ax.plot(t, result[:, 2], \'g\', label=\\"Recovered\\") ax.set_xlabel(\'Time (days)\') ax.set_ylabel(\'Number of Individuals\') ax.set_title(\'SIR Model of Virus Spread\') ax.legend() return result, ax"},{"question":"You need to write a function called `replace_strings` that takes three parameters: a list of strings `str_list`, an integer `k`, and a target string `target`. The function should perform the following tasks: 1. Identify any string in `str_list` that has a length greater than or equal to `k`. 2. Replace every occurrence of `target` in those identified strings with asterisks (*) of the same length as the target string. 3. Return the modified list of strings. Here is the function signature: ```python def replace_strings(str_list: list[str], k: int, target: str) -> list[str]: pass ``` **Example:** ```python >>> replace_strings([\\"hello world\\", \\"python programming\\", \\"test cases\\"], 5, \\"o\\") [\'hell* w*rld\', \'pyth*n pr*gramming\', \'test cases\'] >>> replace_strings([\\"apple\\", \\"banana\\"], 6, \\"a\\") [\'*pple\', \'b*n*n*\'] >>> replace_strings([\\"short\\", \\"tiny\\"], 6, \\"i\\") [\'short\', \'tiny\'] ``` **Requirements:** - Use list comprehension for concise and readable code. - Ensure the replacement only happens on strings that meet the length condition. - Demonstrate edge case handling when the target string is not present, or no strings meet the length condition.","solution":"def replace_strings(str_list: list[str], k: int, target: str) -> list[str]: Replaces occurrences of `target` in strings with length >= k in `str_list` with asterisks. def replace_target(string, target): return string.replace(target, \'*\' * len(target)) return [ replace_target(s, target) if len(s) >= k else s for s in str_list ]"},{"question":"You are tasked with creating a simulated banking system that allows users to perform basic transactions including deposits, withdrawals, and balance inquiries. Your system should maintain an account balance and keep a transaction history for auditing purposes. Implement a class named `BankAccount` that supports the following functionalities: - **Attributes:** - `balance` (float): The current balance of the account, initialized to 0. - `transactions` (list): A list that holds the history of all transactions made on the account. - **Methods:** - `deposit(amount: float) -> None`: Increases the account balance by the specified amount. The transaction should be recorded in the `transactions` list in the format: `(\\"Deposit\\", amount)`. - `withdraw(amount: float) -> bool`: Decreases the account balance by the specified amount if there are sufficient funds. If the withdrawal is successful, the transaction should be recorded in the `transactions` list in the format: `(\\"Withdrawal\\", amount)`. The method should return `True` if the withdrawal was successful and `False` otherwise. - `get_balance() -> float`: Returns the current balance of the account. - `get_transaction_history() -> list`: Returns the list of all transactions made on the account. **Constraints:** - The deposit and withdrawal amounts should be positive numbers. - The account balance cannot go negative; withdrawals must not exceed the available balance. Implement and test the `BankAccount` class to ensure it adheres to these specifications.","solution":"class BankAccount: def __init__(self): self.balance = 0.0 self.transactions = [] def deposit(self, amount: float) -> None: if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount self.transactions.append((\\"Deposit\\", amount)) def withdraw(self, amount: float) -> bool: if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if amount > self.balance: return False self.balance -= amount self.transactions.append((\\"Withdrawal\\", amount)) return True def get_balance(self) -> float: return self.balance def get_transaction_history(self) -> list: return self.transactions"},{"question":"Write a function that takes a list of integers as input and returns the second smallest unique number in the list. If there isn\'t a second smallest unique number, return `None`. For example: - Given the input `[4, 1, 3, 1, 2, 3]`, the function should return `2` as the second smallest unique number after 1. - Given the input `[7, 7, 7]`, the function should return `None` as there is no second unique number. Your function should start with: ```python def second_smallest_unique(num_list): ```","solution":"def second_smallest_unique(num_list): Returns the second smallest unique number in the list. If there isn\'t a second smallest unique number, return None. unique_numbers = list(set(num_list)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Your task is to create a function `sort_even_odd()` that sorts the even and odd integers from a given list separately. The function should return a new list where all even numbers come before all odd numbers, while maintaining their respective orders from the original list. Here are the detailed steps you need to follow: 1. Define a function `sort_even_odd(nums)`. 2. The function should take one argument – a list of integers `nums`. 3. Separate the list into two lists: one for even numbers and one for odd numbers, maintaining their original order. 4. Concatenate the even numbers list with the odd numbers list. 5. Return the concatenated list. Here is the function signature: ```python def sort_even_odd(nums): # Your code here ``` # Example ```python # Input print(sort_even_odd([1, 2, 3, 4, 5, 6])) # Output: [2, 4, 6, 1, 3, 5] print(sort_even_odd([10, 9, 8, 7, 6, 5, 4])) # Output: [10, 8, 6, 4, 9, 7, 5] print(sort_even_odd([1, 3, 5, 7])) # Output: [1, 3, 5, 7] ``` **Hint:** Use list comprehensions to filter out even and odd numbers and then combine them.","solution":"def sort_even_odd(nums): Sorts even and odd integers from the list separately and returns a new list where all even numbers come before all odd numbers, maintaining their original order. Args: nums (list): List of integers. Returns: list: New list with even numbers followed by odd numbers. even_nums = [n for n in nums if n % 2 == 0] odd_nums = [n for n in nums if n % 2 != 0] return even_nums + odd_nums"},{"question":"You are tasked to write a function named `string_to_morse` that converts a given lowercase string to its corresponding Morse code representation. The function should follow these specifications: 1. **Function Name**: `string_to_morse` 2. **Parameters**: - `s`: A string that contains only lowercase letters (a-z). 3. **Returns**: - A string containing the Morse code representation of the input string, with each letter separated by a space. # Constraints: - The function should handle an empty string by returning an empty string. - If the input string contains characters outside the lowercase letters (a-z), it should raise a `ValueError` with the message \\"Input string must contain only lowercase letters a-z\\". # Specific Requirements: - You must use a predefined dictionary for the Morse code representation of each letter. - The Morse code for the alphabet is as follows: ```python morse_dict = { \'a\': \'.-\', \'b\': \'-...\', \'c\': \'-.-.\', \'d\': \'-..\', \'e\': \'.\', \'f\': \'..-.\', \'g\': \'--.\', \'h\': \'....\', \'i\': \'..\', \'j\': \'.---\', \'k\': \'-.-\', \'l\': \'.-..\', \'m\': \'--\', \'n\': \'-.\', \'o\': \'---\', \'p\': \'.--.\', \'q\': \'--.-\', \'r\': \'.-.\', \'s\': \'...\', \'t\': \'-\', \'u\': \'..-\', \'v\': \'...-\', \'w\': \'.--\', \'x\': \'-..-\', \'y\': \'-.--\', \'z\': \'--..\' } ``` # Example: ```python # Sample Input s = \\"hello\\" morse_code = string_to_morse(s) # Expected Output # morse_code should be: \\".... . .-.. .-.. ---\\" ```","solution":"def string_to_morse(s): Converts a given lowercase string to its corresponding Morse code representation. Parameters: - s: A string that contains only lowercase letters (a-z). Returns: - A string containing the Morse code representation of the input string, with each letter separated by a space. Raises: - ValueError: If the input string contains characters outside the lowercase letters (a-z). morse_dict = { \'a\': \'.-\', \'b\': \'-...\', \'c\': \'-.-.\', \'d\': \'-..\', \'e\': \'.\', \'f\': \'..-.\', \'g\': \'--.\', \'h\': \'....\', \'i\': \'..\', \'j\': \'.---\', \'k\': \'-.-\', \'l\': \'.-..\', \'m\': \'--\', \'n\': \'-.\', \'o\': \'---\', \'p\': \'.--.\', \'q\': \'--.-\', \'r\': \'.-.\', \'s\': \'...\', \'t\': \'-\', \'u\': \'..-\', \'v\': \'...-\', \'w\': \'.--\', \'x\': \'-..-\', \'y\': \'-.--\', \'z\': \'--..\' } # Check for invalid characters for char in s: if char not in morse_dict: raise ValueError(\\"Input string must contain only lowercase letters a-z\\") # Convert the string to morse code morse_code_list = [morse_dict[char] for char in s] return \' \'.join(morse_code_list)"},{"question":"** You are tasked with writing a Python function named `sort_word_frequencies` that reads a string input, counts the frequency of each word (case insensitive), and returns a list of words sorted by their frequency in descending order. If two words have the same frequency, they should be sorted alphabetically. For this problem, you need to: 1. Split the input string into words. 2. Normalize the case of the words. 3. Count the frequency of each word. 4. Sort the words first by frequency (highest first), then alphabetically by word. Your function signature should look like this: - **Function Name:** `sort_word_frequencies` - **Parameters:** `input_string` (a single string containing multiple words) - **Returns:** A list of words sorted by their frequency and alphabet. Example Input/Output: ```python # Example 1: input_string = \\"Cat bat mat cat, cat bat.\\" Output: [\'cat\', \'bat\', \'mat\'] # Example 2: input_string = \\"Apple, apple, Banana apple.\\" Output: [\'apple\', \'banana\'] # Example 3: input_string = \\"Hello! world. Hello?\\" Output: [\'hello\', \'world\'] ``` Constraints: - You should ignore punctuation marks and consider words as sequences of alphabetic characters only. - The input string can be any length but will be appropriately sized for practical purposes. Helpful Functions: - You might find Python\'s `collections.Counter` and `re` library useful for counting word frequencies and handling punctuation, respectively. Here is an example solution structure: ```python import re from collections import Counter def sort_word_frequencies(input_string): # Your implementation here pass ```","solution":"import re from collections import Counter def sort_word_frequencies(input_string): Reads a string input, counts the frequency of each word (case insensitive), and returns a list of words sorted by their frequency in descending order. If two words have the same frequency, they are sorted alphabetically. # Remove punctuation and normalize case words = re.findall(r\'bw+b\', input_string.lower()) # Count the frequency of each word frequency = Counter(words) # Sort words by frequency, and alphabetically for same frequency sorted_words = sorted(frequency.items(), key=lambda x: (-x[1], x[0])) # Extract just the words in the required order result = [word for word, count in sorted_words] return result"},{"question":"You are given a list of integers representing seat heights in a cinema auditorium. Each person prefers to have a clear view of the screen, meaning their seat height should be greater than or equal to the seat height directly in front of theirs. Your task is to write a function called `rearrange_seats` that takes a list of integers `seats` and returns a list of integers with seat heights rearranged so that each person\'s seat height is greater than or equal to the seat height directly in front of theirs. Note that the seats should be rearranged in a non-decreasing order. For example, given the list of seats `[4, 1, 3, 5, 2]`, the function should return `[1, 2, 3, 4, 5]`. **Requirements:** - The function should sort the list in non-decreasing order. - Do not use built-in sort functions such as `sorted()` or `sort()`. You should implement a simple sorting algorithm like bubble sort or selection sort to meet the requirement. Here is a sample input to test your function: ```python seats = [4, 1, 3, 5, 2] output = rearrange_seats(seats) print(output) # Output should be [1, 2, 3, 4, 5] ```","solution":"def rearrange_seats(seats): Rearrange seat heights in a non-decreasing order using bubble sort. n = len(seats) for i in range(n): for j in range(0, n-i-1): if seats[j] > seats[j+1]: # Swap if the element found is greater than the next element seats[j], seats[j+1] = seats[j+1], seats[j] return seats"},{"question":"You are provided with a list of employee records, where each record contains the employee\'s name, age, and salary. Your task is to write a function called `sort_employees` that sorts this list of employee records according to the specified sorting criteria. The function should support the following criteria: 1. Sort by age in ascending order. 2. Sort by salary in descending order. 3. If two employees have the same age or salary, they should be sorted by their names in alphabetical order. Your implementation should support a parameter called `by` that determines the sorting criterion, which can either be `\'age\'` or `\'salary\'`. **Requirements:** 1. Define a class `Employee` to represent each employee record. 2. Implement the `sort_employees` function to perform the sorting. 3. Use Python\'s built-in `sorted` function and lambda expressions for sorting. 4. Ensure the function is robust and handles edge cases such as an empty list or equal values for the sorting attribute. **Function Signature:** ```python class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary def sort_employees(employees, by): pass ``` - `employees`: A list of `Employee` objects. - `by`: A string specifying the sorting criterion, either `\'age\'` or `\'salary\'`. **Example Usage:** ```python employees = [ Employee(\\"Alice\\", 30, 70000), Employee(\\"Bob\\", 25, 65000), Employee(\\"Charlie\\", 25, 70000), Employee(\\"David\\", 30, 65000) ] sorted_by_age = sort_employees(employees, by=\'age\') sorted_by_salary = sort_employees(employees, by=\'salary\') for e in sorted_by_age: print(e.name, e.age, e.salary) # Output should be: # Bob 25 65000 # Charlie 25 70000 # Alice 30 70000 # David 30 65000 for e in sorted_by_salary: print(e.name, e.age, e.salary) # Output should be: # Charlie 25 70000 # Alice 30 70000 # Bob 25 65000 # David 30 65000 ```","solution":"class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary def sort_employees(employees, by): if by == \'age\': return sorted(employees, key=lambda e: (e.age, e.name)) elif by == \'salary\': return sorted(employees, key=lambda e: (-e.salary, e.name)) else: raise ValueError(\\"Sorting criterion must be \'age\' or \'salary\'.\\")"},{"question":"In a text-based simulation, you\'re tasked with creating a simple point-of-sale system for a bookstore. This system should allow users to add books, view the current inventory, and calculate the total sales value. Your task is to write a class named `Bookstore` to handle these functionalities. # Class Signature ```python class Bookstore: def __init__(self): pass def add_book(self, title: str, price: float): pass def view_inventory(self) -> list: pass def calculate_total_sales(self) -> float: pass ``` # Requirements: 1. Implement the `__init__` method to initialize the bookstore with an empty inventory list. - Inventory should be a list of dictionaries, where each dictionary contains `title` and `price`. 2. Implement the `add_book` method to add a new book to the inventory. - Parameters: - `title`: The title of the book (string). - `price`: The price of the book (float). - Add a dictionary to the inventory list with the keys `title` and `price`. 3. Implement the `view_inventory` method to return the current list of books in the inventory. - This method returns the inventory list. 4. Implement the `calculate_total_sales` method to calculate the total sales of all books in the inventory. - This method returns the sum of the prices of all books in the inventory. # Example: Here is how the class should behave when used: ```python # Example usage bookstore = Bookstore() bookstore.add_book(\\"The Great Gatsby\\", 10.99) bookstore.add_book(\\"1984\\", 8.99) # Viewing inventory books = bookstore.view_inventory() print(books) # Output: [{\'title\': \'The Great Gatsby\', \'price\': 10.99}, {\'title\': \'1984\', \'price\': 8.99}] # Calculating total sales total_sales = bookstore.calculate_total_sales() print(total_sales) # Output: 19.98 ``` # Implementation Note: - Ensure your methods handle basic error checking, such as verifying that the price is a non-negative value. - Aim for clear and concise code that follows best practices for class-based design in Python.","solution":"class Bookstore: def __init__(self): self.inventory = [] def add_book(self, title: str, price: float): if price < 0: raise ValueError(\\"The price of the book cannot be negative.\\") self.inventory.append({\'title\': title, \'price\': price}) def view_inventory(self) -> list: return self.inventory def calculate_total_sales(self) -> float: return sum(book[\'price\'] for book in self.inventory)"},{"question":"Given a list of integers, implement a function called `find_largest_sum_subarray` that finds the largest sum of any contiguous subarray within the list. This problem must be solved using Kadane\'s algorithm, which operates in O(n) time complexity. # Requirements: - **Function Name:** `find_largest_sum_subarray` - **Input:** A list of integers. - **Output:** An integer representing the largest sum of any contiguous subarray. # Detailed Instruction: 1. Initialize two variables: `max_current` and `max_global` to the first element of the list. 2. Iterate through the list starting from the second element. For each element, update `max_current` to be the maximum of the current element and `max_current` plus the current element. 3. Update `max_global` to be the maximum of `max_global` and `max_current`. 4. At the end of the iteration, `max_global` will hold the largest sum of any contiguous subarray. # Your function should follow this signature: ```python def find_largest_sum_subarray(arr): # implement the required function logic here pass ``` # Example: ```python print(find_largest_sum_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4])) # Output: 6 (subarray: [4, -1, 2, 1]) print(find_largest_sum_subarray([1, 2, 3, 4, 5])) # Output: 15 (subarray: [1, 2, 3, 4, 5]) ```","solution":"def find_largest_sum_subarray(arr): Finds the largest sum of any contiguous subarray using Kadane\'s algorithm. Parameters: arr (list of int): List of integers. Returns: int: The largest sum of any contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) max_global = max(max_global, max_current) return max_global"},{"question":"Write a function that performs K-means clustering on a synthetic dataset, visualizes the clustered data using a scatter plot, and returns the cluster centers. The function should generate sample data using NumPy, fit a K-means clustering model from Scikit-learn to this data, and plot the data points using different colors for each cluster along with the cluster centers. The function should output: dict: A dictionary containing the cluster centers under the key \'centers\'. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans def kmeans_clustering(points=100, clusters=3, random_state=42): ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans def kmeans_clustering(points=100, clusters=3, random_state=42): Performs K-means clustering on a synthetic dataset, visualizes the clustered data using a scatter plot, and returns the cluster centers. Args: points (int): Number of data points to generate. Default is 100. clusters (int): Number of cluster centers for K-means. Default is 3. random_state (int): Random seed for reproducibility. Default is 42. Returns: dict: A dictionary containing the cluster centers under the key \'centers\'. # Generate synthetic data np.random.seed(random_state) X = np.vstack([np.random.multivariate_normal(mean, 0.1*np.eye(2), points//clusters) for mean in np.random.rand(clusters, 2)]) # Fit K-means model kmeans = KMeans(n_clusters=clusters, random_state=random_state) kmeans.fit(X) # Get clustering results labels = kmeans.labels_ centers = kmeans.cluster_centers_ # Plot results plt.scatter(X[:, 0], X[:, 1], c=labels, cmap=\'viridis\', marker=\'.\') plt.scatter(centers[:, 0], centers[:, 1], c=\'red\', marker=\'x\') plt.title(\'K-means Clustering\') plt.show() return {\'centers\': centers}"},{"question":"You are asked to write a function `find_top_students(students: List[Tuple[str, List[int]]]) -> List[str]` that identifies the students with the highest average scores in a class. The function should: 1. Take a list of tuples as input, where each tuple represents a student and contains the student\'s name and a list of their scores. 2. Calculate the average score for each student. 3. Identify and return a list of names of the student(s) with the highest average score. If there are multiple students with the same highest average score, include all their names in the output list. # Function Signature ```python def find_top_students(students: List[Tuple[str, List[int]]]) -> List[str]: pass ``` # Parameters - `students` (List[Tuple[str, List[int]]]): A list of tuples where each tuple consists of a student\'s name (str) and a list of their scores (List[int]). # Returns - List[str]: A list of names of the student(s) who have the highest average score. # Example Usage ```python students = [ (\\"Alice\\", [90, 95, 88]), (\\"Bob\\", [85, 90, 95]), (\\"Charlie\\", [92, 93, 94]), (\\"Diana\\", [85, 90, 85]) ] top_students = find_top_students(students) print(top_students) # Output: [\'Charlie\'] ``` # Notes - Ensure to handle cases with empty lists of scores appropriately. - If multiple students have the same highest average score, all their names should be returned in any order. - You can assume that the list of students will always be non-empty.","solution":"from typing import List, Tuple def find_top_students(students: List[Tuple[str, List[int]]]) -> List[str]: Identifies the students with the highest average scores. Args: students (List[Tuple[str, List[int]]]): A list of tuples where each tuple consists of a student\'s name (str) and a list of their scores (List[int]). Returns: List[str]: A list of names of the student(s) who have the highest average score. highest_avg = float(\'-inf\') top_students = [] for name, scores in students: if len(scores) == 0: continue # Skip calculation for students with no scores avg_score = sum(scores) / len(scores) if avg_score > highest_avg: highest_avg = avg_score top_students = [name] elif avg_score == highest_avg: top_students.append(name) return top_students"},{"question":"``` An e-commerce website wants to validate user passwords to ensure they meet specific security requirements. Write a function that checks if a given password is valid based on the following criteria: 1. The password must be at least 8 characters long. 2. It must contain at least one lowercase letter, one uppercase letter, one digit, and one special character (e.g., !@#%^&*()-+). The function should take a string (the password) as input and return True if the password meets all the criteria or False otherwise. You should write self-contained code starting with: ``` import re def validate_password(password): ```","solution":"import re def validate_password(password): Checks if the given password is valid based on the provided criteria. :param password: The password string to validate. :return: True if the password is valid, False otherwise. if len(password) < 8: return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[0-9]\', password): return False if not re.search(r\'[!@#%^&*()-+]\', password): return False return True"},{"question":"You are required to write a Python function `find_nearest_element(arr, target)` which takes an array of integers and a target integer, and returns the element in the array that is closest to the target. If two numbers are equally close, return the smaller one. # Function Details The function `find_nearest_element(arr, target)` takes in the following parameters: - `arr` (List[int]): A list of integers. The list will have at least one element. - `target` (int): An integer value for which the closest element in the list should be found. The function should: 1. Iterate through the array to find the element with the smallest absolute difference from the target. 2. If two elements have the same absolute difference, return the smaller element. 3. Return the element that satisfies the above conditions. # Example: ```python # Given list and target arr = [5, 10, 22, 4, 15] target = 12 example_output = find_nearest_element(arr, target) # Possible output: # 10 # Another example arr = [2, 4, 6, 8] target = 5 example_output = find_nearest_element(arr, target) # Possible output: # 4 ``` # Constraint: - The input list `arr` will always have at least one element. Write the function `find_nearest_element(arr, target)` as described.","solution":"def find_nearest_element(arr, target): Returns the element in the arr that is closest to the target. If two numbers are equally close, returns the smaller one. closest_element = arr[0] smallest_difference = abs(arr[0] - target) for element in arr[1:]: current_difference = abs(element - target) if current_difference < smallest_difference: smallest_difference = current_difference closest_element = element elif current_difference == smallest_difference: closest_element = min(closest_element, element) return closest_element"},{"question":"You are given a dataset of user activities on a platform, represented by a list of tuples. Each tuple contains `(user_id, activity_type, timestamp)`, where `user_id` is a string, `activity_type` is a string representing the type of activity, and `timestamp` is an integer representing the time the activity occurred. Your task is to implement a function that computes the most frequent activity type for each user over a given time period. # Function Signature ```python from typing import List, Tuple, Dict def most_frequent_activity(activities: List[Tuple[str, str, int]], start_time: int, end_time: int) -> Dict[str, str]: Compute the most frequent activity type for each user over a given time period. Parameters: - activities: List[Tuple[str, str, int]], list of user activities. - start_time: int, start of the time period. - end_time: int, end of the time period. Returns: - Dict[str, str]: dictionary where keys are user_ids and values are the most frequent activity type within the specified time period. pass ``` # Requirements 1. Filter the activities to include only those that fall within the specified time period `[start_time, end_time]`. 2. Count the frequency of each activity type for each user within the filtered activities. 3. Determine the most frequent activity type for each user. 4. In case of ties (multiple activities with the same highest frequency), return any of the most frequent activity types. # Example ```python activities = [ (\\"user1\\", \\"login\\", 1), (\\"user1\\", \\"logout\\", 2), (\\"user1\\", \\"login\\", 3), (\\"user2\\", \\"login\\", 1), (\\"user2\\", \\"view\\", 2), (\\"user2\\", \\"login\\", 4) ] start_time = 1 end_time = 3 result = most_frequent_activity(activities, start_time, end_time) print(result) ``` # Expected Output - `{\\"user1\\": \\"login\\", \\"user2\\": \\"login\\"}`","solution":"from typing import List, Tuple, Dict from collections import defaultdict, Counter def most_frequent_activity(activities: List[Tuple[str, str, int]], start_time: int, end_time: int) -> Dict[str, str]: Compute the most frequent activity type for each user over a given time period. Parameters: - activities: List[Tuple[str, str, int]], list of user activities. - start_time: int, start of the time period. - end_time: int, end of the time period. Returns: - Dict[str, str]: dictionary where keys are user_ids and values are the most frequent activity type within the specified time period. user_activity_counts = defaultdict(Counter) for user_id, activity_type, timestamp in activities: if start_time <= timestamp <= end_time: user_activity_counts[user_id][activity_type] += 1 result = {} for user_id, activity_count in user_activity_counts.items(): most_common_activity = activity_count.most_common(1)[0][0] result[user_id] = most_common_activity return result # Example usage activities = [ (\\"user1\\", \\"login\\", 1), (\\"user1\\", \\"logout\\", 2), (\\"user1\\", \\"login\\", 3), (\\"user2\\", \\"login\\", 1), (\\"user2\\", \\"view\\", 2), (\\"user2\\", \\"login\\", 4) ] start_time = 1 end_time = 3 result = most_frequent_activity(activities, start_time, end_time) print(result) # Output: {\\"user1\\": \\"login\\", \\"user2\\": \\"login\\"}"},{"question":"Write a function `generate_emails` that creates email addresses based on a provided list of names and a specified domain. The function should return a list of email addresses generated using the format `firstname.lastname@domain`. Here are the requirements for the function: 1. **Function Name**: `generate_emails` 2. **Parameters**: - `names` (list of strings): A list of full names, where each name is a string in the format \'Firstname Lastname\'. - `domain` (string): A string representing the email domain. 3. **Functionality**: - Split each full name to extract the first name and the last name. - Format each email address as `firstname.lastname@domain`. - Ensure that names are converted to lowercase. - Return a list of email addresses. Here is an example of how the function should be used: ```python names = [\\"John Doe\\", \\"Jane Smith\\", \\"Alice Johnson\\"] domain = \\"example.com\\" emails = generate_emails(names, domain) print(emails) ``` **Expected Output**: ``` [\'john.doe@example.com\', \'jane.smith@example.com\', \'alice.johnson@example.com\'] ``` **Ensure that:** - You handle names consistently with exactly one space separating the first name and the last name. - The generated email addresses are entirely in lowercase.","solution":"def generate_emails(names, domain): Generates email addresses based on provided names and domain. Args: names (list): List of full names in the format \'Firstname Lastname\'. domain (str): A string representing the email domain Returns: list: List of email addresses formatted as \'firstname.lastname@domain\'. emails = [] for name in names: first_name, last_name = name.split() email = f\\"{first_name.lower()}.{last_name.lower()}@{domain}\\" emails.append(email) return emails"},{"question":"Write a Python function named `count_character_occurrences` that takes a string and a character as parameters and returns the number of times the specified character appears in the given string. You should not use any built-in functions like `str.count()` for this task. Instead, write a custom implementation that iterates through the string and counts the character occurrences manually. # Example ```python def count_character_occurrences(s: str, c: str) -> int: count = 0 for char in s: if char == c: count += 1 return count # Example usage result = count_character_occurrences(\\"hello world\\", \\"o\\") print(result) # Output should be 2 ``` Your implementation should: 1. Initialize a counter variable to zero. 2. Iterate through each character in the string. 3. Increment the counter each time the specified character is encountered. 4. Return the final count of character occurrences.","solution":"def count_character_occurrences(s: str, c: str) -> int: Returns the number of times the character c appears in the string s. count = 0 for char in s: if char == c: count += 1 return count"},{"question":"You are asked to write a function named `find_max_word`. This function should take the following parameters: - `sentence`: A string containing a sentence. - `case_sensitive`: A boolean indicating whether the comparison should be case-sensitive or not. The function should do the following: 1. If `case_sensitive` is `False`, convert the sentence to lower case. 2. Split the sentence into words using spaces as delimiter. 3. Identify and return the word with the maximum length. 4. If there are multiple words with the maximum length, return the first one that occurs. Example usage: ```python sentence = \\"The quick brown fox jumped over the lazy dogs\\" case_sensitive = False print(find_max_word(sentence, case_sensitive)) # Output: \\"jumped\\" sentence = \\"Aaa bbb CCCCC ddd\\" case_sensitive = True print(find_max_word(sentence, case_sensitive)) # Output: \\"CCCCC\\" ``` Write the function `find_max_word` following the requirements above.","solution":"def find_max_word(sentence, case_sensitive): Finds the word with the maximum length from the sentence. :param sentence: str, the input sentence :param case_sensitive: bool, indicates if the comparison is case-sensitive or not :return: str, the word with the maximum length if not case_sensitive: sentence = sentence.lower() words = sentence.split() max_word = max(words, key=len) return max_word"},{"question":"You are asked to implement a Python function that parses a text document and generates a word frequency count. The function should read a provided text file and then count the occurrences of each unique word in the document. Note that different capitalizations of the same word should be considered identical, and punctuation should be ignored. **Objective**: Write a function named `word_frequency_count(file_path)` that: 1. Reads the content of a given text file. 2. Normalizes the text to ensure the words are case-insensitive and punctuation-free. 3. Counts the frequency of each unique word in the text. 4. Returns a dictionary containing words as keys and their respective counts as values. **Function Input/Output**: - Input: - `file_path`: A string representing the path to the text file. - Output: - A dictionary where keys are unique words (in lowercase) and values are their frequency counts in the text. **Requirements**: - Use string manipulation methods to clean and normalize the text (convert to lowercase and remove punctuation). - Ensure the function reads the file efficiently, even with large texts. - Handle common punctuation marks such as periods, commas, exclamation points, etc. **Example**: ```python # Assume the text file `sample.txt` contains the following content: # # Hello, world! This is a test. # Hello again, world. # # Sample function call result = word_frequency_count(\'sample.txt\') # Expected output # { # \'hello\': 2, # \'world\': 2, # \'this\': 1, # \'is\': 1, # \'a\': 1, # \'test\': 1, # \'again\': 1 # } ```","solution":"import string def word_frequency_count(file_path): Reads the content of a given text file, normalizes the text to be case-insensitive and free of punctuation, then counts the frequency of each unique word in the text. Parameters: file_path (str): The path to the text file. Returns: dict: A dictionary containing words as keys and their frequency counts as values. # Initialize an empty dictionary to hold word counts word_counts = {} # Read the file with open(file_path, \'r\', encoding=\'utf-8\') as file: # Iterate through each line in the file for line in file: # Remove punctuation and normalize to lowercase cleaned_line = line.translate(str.maketrans(\'\', \'\', string.punctuation)).lower() # Split the line into words words = cleaned_line.split() # Count each word in the line for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 return word_counts"},{"question":"You are tasked with processing a list of students\' scores to generate a summary report for each student. Implement a function called `generate_report` that takes a list of dictionaries, where each dictionary represents a student and contains the following keys: - `\'name\'`: The student\'s name (a string). - `\'scores\'`: A list of integers representing the student\'s scores across various subjects. The report for each student should include: 1. The student\'s name. 2. The student\'s average score, rounded to 2 decimal places. 3. The highest score achieved by the student. 4. The lowest score achieved by the student. The function should return a new list of dictionaries, where each dictionary contains the following keys: - `\'name\'`: The student\'s name (a string). - `\'average_score\'`: The student\'s average score (a float rounded to 2 decimal places). - `\'highest_score\'`: The student\'s highest score (an integer). - `\'lowest_score\'`: The student\'s lowest score (an integer). Ensure your implementation follows these steps: 1. Iterate over the list of students. 2. Calculate the average score, highest score, and lowest score for each student. 3. Construct a new dictionary with the required summary information for each student. 4. Return the list of these new dictionaries. ```python def generate_report(students): Generates a summary report for each student. Parameters: ---------- students : list of dicts Each dictionary contains the keys \'name\' (str), and \'scores\' (list of ints). Returns: ------- list of dicts Each output dictionary contains the keys \'name\' (str), \'average_score\' (float), \'highest_score\' (int), and \'lowest_score\' (int). # Your implementation goes here pass ```","solution":"def generate_report(students): Generates a summary report for each student. Parameters ---------- students : list of dicts Each dictionary contains the keys \'name\' (str), and \'scores\' (list of ints). Returns ------- list of dicts Each output dictionary contains the keys \'name\' (str), \'average_score\' (float), \'highest_score\' (int), and \'lowest_score\' (int). report = [] for student in students: name = student[\'name\'] scores = student[\'scores\'] average_score = round(sum(scores) / len(scores), 2) if scores else 0 highest_score = max(scores) if scores else 0 lowest_score = min(scores) if scores else 0 report.append({ \'name\': name, \'average_score\': average_score, \'highest_score\': highest_score, \'lowest_score\': lowest_score }) return report"},{"question":"You are tasked with implementing a function `is_valid_pattern(pattern: str) -> bool` that determines if a given string pattern matches a specific set of rules. The pattern rules are as follows: 1. The pattern consists of two types of characters: \'a\' and \'b\'. 2. Each \'a\' must be followed by one \'b\'. 3. There can be no standalone \'a\' or \'b\'. 4. The pattern can contain any number of correct \'ab\' pairs, including zero. The function should follow these steps: 1. Check the length of the pattern. If it is odd, it is immediately invalid. 2. Iterate through the string and check if every \'a\' is immediately followed by a \'b\'. 3. Return `True` if the pattern is valid according to the above rules, otherwise return `False`. **Function Signature:** ```python def is_valid_pattern(pattern: str) -> bool: pass ``` **Examples:** ```python assert is_valid_pattern(\\"abab\\") == True # Explanation: The pattern \\"abab\\" has two valid \'ab\' pairs. assert is_valid_pattern(\\"aabb\\") == False # Explanation: The pattern \\"aabb\\" has \'a\' followed by another \'a\' which breaks the rule. assert is_valid_pattern(\\"abb\\") == False # Explanation: The pattern \\"abb\\" has a standalone \'b\'. assert is_valid_pattern(\\"\\") == True # Explanation: An empty pattern is considered valid as it contains zero \'ab\' pairs. assert is_valid_pattern(\\"ab\\") == True # Explanation: The pattern \\"ab\\" has one valid \'ab\' pair. ```","solution":"def is_valid_pattern(pattern: str) -> bool: Determines if a given string pattern of \'a\' and \'b\' is valid based on specific rules. The rules are: 1. Each \'a\' must be followed by one \'b\'. 2. There can be no standalone \'a\' or \'b\'. Args: pattern (str): The pattern string consisting of \'a\' and \'b\'. Returns: bool: True if the pattern is valid, False otherwise. if len(pattern) % 2 != 0: return False for i in range(0, len(pattern), 2): if pattern[i:i+2] != \'ab\': return False return True"},{"question":"Your task is to implement a function, `generate_confusion_matrix()`, that calculates the confusion matrix for a binary classification problem. You are given a list of true labels and a list of predicted labels as inputs. You will utilize the `numpy` library for array manipulation and computation. # Steps to Follow: 1. **Input Validation:** Ensure that the input lists `true_labels` and `predicted_labels`: - Are of the same length. - Contain only binary values (0 and 1). 2. **Calculate the Confusion Matrix:** - Count the number of true positives (TP), true negatives (TN), false positives (FP), and false negatives (FN). - Store these counts in a 2x2 numpy array with the following structure: ``` [[TP, FP], [FN, TN]] ``` 3. **Return the Confusion Matrix:** Your function should return the 2x2 numpy array representing the confusion matrix. Function signature: ```python import numpy as np def generate_confusion_matrix(true_labels, predicted_labels): pass ``` **Note:** Ensure proper input validation and handle edge cases such as empty lists or lists with non-binary values.","solution":"import numpy as np def generate_confusion_matrix(true_labels, predicted_labels): Generates the confusion matrix for a binary classification problem. Parameters: true_labels (list of int): List of true labels. Must contain only 0 and 1. predicted_labels (list of int): List of predicted labels. Must contain only 0 and 1. Returns: numpy.ndarray: 2x2 confusion matrix in the format [[TP, FP], [FN, TN]]. if not (isinstance(true_labels, list) and isinstance(predicted_labels, list)): raise ValueError(\\"Inputs must be lists.\\") if len(true_labels) != len(predicted_labels): raise ValueError(\\"The length of true_labels and predicted_labels must be the same.\\") if not all(label in [0, 1] for label in true_labels) or not all(label in [0, 1] for label in predicted_labels): raise ValueError(\\"Labels must be binary, containing only 0 and 1.\\") TP = FP = FN = TN = 0 for t, p in zip(true_labels, predicted_labels): if t == 1 and p == 1: TP += 1 elif t == 0 and p == 1: FP += 1 elif t == 1 and p == 0: FN += 1 elif t == 0 and p == 0: TN += 1 confusion_matrix = np.array([[TP, FP], [FN, TN]]) return confusion_matrix"},{"question":"In computational geometry, one common problem is finding the minimum enclosing circle for a set of points on a 2D plane. The minimum enclosing circle (also known as the smallest enclosing circle or the smallest enclosing disk) is the smallest circle that can completely contain all given points. Write a function `minimum_enclosing_circle` that takes a list of tuples representing points on a 2D plane and returns a tuple representing the center and radius of the minimum enclosing circle. The function should take the following parameter: 1. `points` (List[Tuple[float, float]]): A list of tuples where each tuple contains the x and y coordinates of a point on the 2D plane. Your function should return a tuple containing: 1. A tuple representing the center of the circle (x, y). 2. A float representing the radius of the circle. To perform the necessary mathematical operations, you may use the `math` library in Python. Here is a template for your function: ```python import math from typing import List, Tuple def minimum_enclosing_circle(points: List[Tuple[float, float]]) -> Tuple[Tuple[float, float], float]: Finds the minimum enclosing circle for a set of points on a 2D plane. :param points: List of tuples representing points (x, y) on a 2D plane. :return: A tuple ((x_center, y_center), radius) representing the center and radius of the minimum enclosing circle. # Your code goes here pass ``` # Example Usage Suppose the following points: - (0, 0) - (1, 0) - (0, 1) The function should be used as follows: ```python points = [(0, 0), (1, 0), (0, 1)] print(minimum_enclosing_circle(points)) ``` And return an output which is a tuple where the first element is a tuple representing the center of the circle (x, y), and the second element is the radius of the circle. Note: The minimum enclosing circle might not be unique, but for this task, any valid minimum enclosing circle meeting the criteria is acceptable.","solution":"import math from typing import List, Tuple def distance(point1: Tuple[float, float], point2: Tuple[float, float]) -> float: Calculates the Euclidean distance between two points. return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2) def minimum_enclosing_circle(points: List[Tuple[float, float]]) -> Tuple[Tuple[float, float], float]: Finds the minimum enclosing circle for a set of points on a 2D plane. :param points: List of tuples representing points (x, y) on a 2D plane. :return: A tuple ((x_center, y_center), radius) representing the center and radius of the minimum enclosing circle. if not points: return ((0, 0), 0) # Start with an arbitrary point center = (0, 0) radius = 0 for i, p in enumerate(points): if i == 0: center = p radius = 0 elif distance(p, center) > radius: center = p radius = 0 for j in range(i): distance_to_j = distance(center, points[j]) if distance_to_j > radius: center = ((p[0] + points[j][0]) / 2, (p[1] + points[j][1]) / 2) radius = distance_to_j / 2 for k in range(j): if distance(points[k], center) > radius: d = distance(p, points[j]) b = distance(points[k], points[j]) c = distance(p, points[k]) ax, ay = points[j] bx, by = points[k] cx, cy = p D = 2 * (ax * (by - cy) + bx * (cy - ay) + cx * (ay - by)) ux = ((ax**2 + ay**2) * (by - cy) + (bx**2 + by**2) * (cy - ay) + (cx**2 + cy**2) * (ay - by)) / D uy = ((ax**2 + ay**2) * (cx - bx) + (bx**2 + by**2) * (ax - cx) + (cx**2 + cy**2) * (bx - ax)) / D center = (ux, uy) radius = distance(center, points[k]) return (center, radius)"},{"question":"Design a function `calculate_fuel_efficiency()` that takes in two parameters: `distance` and `fuel_used`. The function calculates the fuel efficiency of a vehicle, which is defined as the distance traveled per unit of fuel used. If the fuel used is zero, the function should return \\"Fuel used cannot be zero\\". Your function should: 1. Accept two parameters: - `distance` (a float representing the distance traveled in kilometers) - `fuel_used` (a float representing the amount of fuel used in liters) 2. Calculate the fuel efficiency as `distance / fuel_used`. 3. Return the calculated fuel efficiency with up to two decimal places. 4. If `fuel_used` is zero, return the string \\"Fuel used cannot be zero\\". The function should be named `calculate_fuel_efficiency`. # Function Signature ```python def calculate_fuel_efficiency(distance: float, fuel_used: float) -> str: ```","solution":"def calculate_fuel_efficiency(distance: float, fuel_used: float) -> str: Calculates the fuel efficiency of a vehicle based on distance traveled and fuel used. Parameters: - distance (float): The distance traveled in kilometers. - fuel_used (float): The amount of fuel used in liters. Returns: - str: The fuel efficiency as \'x.xx km/l\' if fuel_used is not zero. Otherwise, returns \\"Fuel used cannot be zero\\". if fuel_used == 0: return \\"Fuel used cannot be zero\\" efficiency = distance / fuel_used return f\\"{efficiency:.2f} km/l\\""},{"question":"Create a function that accepts a list of integers and returns a dictionary where the keys are the integers from the list and the values are their respective counts in the list. If the input is an empty list, return an empty dictionary. The purpose is to demonstrate working with lists and dictionaries, as well as simple counting of elements. The function should output with: dict: A dictionary representing the count of each integer in the list. You should write self-contained code starting with: ``` def count_elements(input_list): ```","solution":"def count_elements(input_list): Returns a dictionary where the keys are the integers from the input_list and the values are their respective counts in the list. :param input_list: List of integers :return: Dictionary with counts of each integer count_dict = {} for elem in input_list: if elem in count_dict: count_dict[elem] += 1 else: count_dict[elem] = 1 return count_dict"},{"question":"Write a function that takes a string as input and reverses the order of the words. A word is defined as a sequence of non-space characters. The input string may contain leading or trailing spaces and multiple spaces between words. The output should be a cleaned-up string with a single space separating the words and no leading or trailing spaces. The function signature should be: ``` def reverse_words(s: str) -> str: ``` **Example:** ``` input: \\" the sky is blue \\" output: \\"blue is sky the\\" ``` **Requirements:** - Use Python\'s standard string manipulation methods to achieve the desired result. - The function should handle edge cases, such as strings with no words or strings with only spaces. - Ensure the function is efficient even for longer strings. **Instructions:** Write the function definition within the provided code block. Test your function with various inputs to confirm its correctness.","solution":"def reverse_words(s: str) -> str: Reverses the order of words in the input string. A word is defined as a sequence of non-space characters. The function also removes any leading, trailing, and multiple spaces between words. Parameters: s (str): The input string. Returns: str: A string with words in reversed order with cleaned-up spaces. # Split the string by spaces and filter out empty strings words = s.split() # Reverse the list of words words.reverse() # Join the list of words into a single string separated by a space return \' \'.join(words)"},{"question":"Write a function that takes a list of numbers and returns the list sorted in ascending order. The function should not use any built-in sorting functions, but must implement the merge sort algorithm. The function should return: list: The sorted list of numbers. You should write self-contained code starting with: ``` def merge_sort(arr): ```","solution":"def merge_sort(arr): Sorts a list of numbers in ascending order using the merge sort algorithm. :param arr: List of numbers to sort. :return: Sorted list of numbers. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted lists into one sorted list. :param left: Sorted left half list. :param right: Sorted right half list. :return: Merged sorted list. sorted_list = [] left_index = 0 right_index = 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_list.append(left[left_index]) left_index += 1 else: sorted_list.append(right[right_index]) right_index += 1 # If there are remaining elements in the left or right half, add them to the sorted list sorted_list.extend(left[left_index:]) sorted_list.extend(right[right_index:]) return sorted_list"},{"question":"You are given a list of student records, where each record contains the student\'s name and their scores in three subjects: Math, Physics, and Chemistry. Write a function `get_top_students(records)` that processes this list to determine the student with the highest average score. If there are multiple students with the same highest average score, return their names in alphabetical order. Your function should calculate the average score for each student, find the highest average score, and then determine the student(s) who have this highest average. Return the names of these students in a list, sorted alphabetically. Here is an example of what the input list might look like: ```python records = [ {\\"name\\": \\"John Doe\\", \\"Math\\": 85, \\"Physics\\": 92, \\"Chemistry\\": 78}, {\\"name\\": \\"Jane Smith\\", \\"Math\\": 90, \\"Physics\\": 88, \\"Chemistry\\": 95}, {\\"name\\": \\"Emily Davis\\", \\"Math\\": 70, \\"Physics\\": 80, \\"Chemistry\\": 85}, {\\"name\\": \\"Michael Brown\\", \\"Math\\": 90, \\"Physics\\": 88, \\"Chemistry\\": 95} ] ``` **Function Signature:** ```python def get_top_students(records): ``` **Requirements:** 1. Calculate the average score for each student. 2. Identify the highest average score. 3. Return a list of names of students with the highest average score, sorted alphabetically. **Example Call:** ```python records = [ {\\"name\\": \\"John Doe\\", \\"Math\\": 85, \\"Physics\\": 92, \\"Chemistry\\": 78}, {\\"name\\": \\"Jane Smith\\", \\"Math\\": 90, \\"Physics\\": 88, \\"Chemistry\\": 95}, {\\"name\\": \\"Emily Davis\\", \\"Math\\": 70, \\"Physics\\": 80, \\"Chemistry\\": 85}, {\\"name\\": \\"Michael Brown\\", \\"Math\\": 90, \\"Physics\\": 88, \\"Chemistry\\": 95} ] print(get_top_students(records)) ``` The function should output: ``` [\'Jane Smith\', \'Michael Brown\'] ```","solution":"def get_top_students(records): Returns a list of names of students with the highest average score, sorted alphabetically. if not records: return [] students_averages = [] for record in records: name = record[\\"name\\"] average_score = (record[\\"Math\\"] + record[\\"Physics\\"] + record[\\"Chemistry\\"]) / 3 students_averages.append((name, average_score)) highest_avg = max(students_averages, key=lambda x: x[1])[1] top_students = [name for name, avg in students_averages if avg == highest_avg] top_students.sort() return top_students"},{"question":"Design a function that takes a list of integers and returns a new list that contains only the prime numbers from the original list, sorted in ascending order. Additionally, the function should include a feature to count the number of times each prime number appears in the original list and print this information. The function should output: - A sorted list of prime numbers - A dictionary with prime numbers as keys and their frequencies as values The function should raise the following exceptions: - TypeError: If the input is not a list of integers - ValueError: If the list is empty You should write self-contained code starting with: ```python def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_and_count_primes(lst): Filter prime numbers from the list and count their frequencies. if not isinstance(lst, list): raise TypeError(\\"Input should be a list of integers.\\") if any(not isinstance(x, int) for x in lst): raise TypeError(\\"All elements in the list should be integers.\\") if not lst: raise ValueError(\\"List should not be empty.\\") prime_counts = {} prime_list = [] for num in lst: if is_prime(num): if num not in prime_counts: prime_counts[num] = 0 prime_counts[num] += 1 if num not in prime_list: prime_list.append(num) print(\\"Prime counts:\\", prime_counts) return sorted(prime_list) # Example usage: # lst = [2, 3, 4, 5, 3, 2, 7, 11, 13, 2, 29, 29] ```","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_and_count_primes(lst): Filter prime numbers from the list and count their frequencies. if not isinstance(lst, list): raise TypeError(\\"Input should be a list of integers.\\") if any(not isinstance(x, int) for x in lst): raise TypeError(\\"All elements in the list should be integers.\\") if not lst: raise ValueError(\\"List should not be empty.\\") prime_counts = {} prime_list = [] for num in lst: if is_prime(num): if num not in prime_counts: prime_counts[num] = 0 prime_counts[num] += 1 if num not in prime_list: prime_list.append(num) print(\\"Prime counts:\\", prime_counts) return sorted(prime_list), prime_counts"},{"question":"You are required to implement a function called `filter_even_numbers_from_list()` that processes a given list and returns a new list containing only the even numbers from the original list. This function emphasizes the application of basic list comprehensions and conditional logic in Python. **Function Specification:** - **Name:** `filter_even_numbers_from_list` - **Inputs:** - `input_list` (list): A list of integers. - **Outputs:** - Returns a new list containing only the even numbers from `input_list`. **Constraints:** - The function should use list comprehensions for filtering the even numbers. - The function should handle an empty list gracefully by returning an empty list. Your task is to write the function `filter_even_numbers_from_list` that adheres to the specifications above using Python. **Example Usage:** ``` input_list = [1, 2, 3, 4, 5, 6] print(filter_even_numbers_from_list(input_list)) # Output: [2, 4, 6] input_list = [11, 30, 45, 50] print(filter_even_numbers_from_list(input_list)) # Output: [30, 50] ``` **Note:** - Ensure the function handles various scenarios of the input list, including lists with no even numbers.","solution":"def filter_even_numbers_from_list(input_list): Filters out the even numbers from the given list. Parameters: input_list (list): A list of integers. Returns: list: A list containing only the even numbers from input_list. return [num for num in input_list if num % 2 == 0]"},{"question":"Implement a function `find_longest_substring` that takes a string `s` as input and returns the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the one that appears first. The goal of this function is to identify the longest contiguous string of unique characters within the input string. Function Specification You need to implement a function named `find_longest_substring` which takes a single string argument `s` and returns a string. The function should utilize an optimized approach to find the longest substring without repeating characters. Function Signature ```python def find_longest_substring(s: str) -> str: pass ``` # Example ```python assert find_longest_substring(\\"abcabcbb\\") == \\"abc\\" assert find_longest_substring(\\"bbbbb\\") == \\"b\\" assert find_longest_substring(\\"pwwkew\\") == \\"wke\\" assert find_longest_substring(\\"dvdf\\") == \\"vdf\\" ``` # Constraints - The input string `s` will have a maximum length of 1000 characters. - The input string `s` will only contain printable ASCII characters (space included).","solution":"def find_longest_substring(s: str) -> str: Returns the longest substring without repeating characters. start = maxLength = 0 maxSubstringStart = 0 usedChar = {} for index, char in enumerate(s): if char in usedChar and start <= usedChar[char]: start = usedChar[char] + 1 else: if maxLength < index - start + 1: maxLength = index - start + 1 maxSubstringStart = start usedChar[char] = index return s[maxSubstringStart:maxSubstringStart + maxLength]"},{"question":"You are required to write a function named `find_missing_number` in Python that determines the missing number in an arithmetic progression (AP) sequence. This function should return the missing number from the sequence. # Description: 1. An arithmetic progression is a sequence of numbers in which the difference between consecutive terms is constant. 2. The function should receive a list of integers `arr` representing the sequence. One number is missing from the sequence. 3. The difference between consecutive terms (`d`) can be calculated using the difference between the first two terms. 4. Identify and return the missing number in the sequence. # Function Signature: ```python def find_missing_number(arr: list) -> int: ... ``` # Example Usage: ```python print(find_missing_number([2, 4, 8, 10])) # Output: 6 print(find_missing_number([1, 3, 5, 7, 11])) # Output: 9 print(find_missing_number([10, 20, 40])) # Output: 30 ``` # Requirements: - Ensure your function handles sequences of varying lengths (minimum 3 elements). - The sequence will always have exactly one missing number. - Return the missing number using an efficient approach.","solution":"def find_missing_number(arr: list) -> int: Determines the missing number in an arithmetic progression (AP) sequence. Parameters: arr (list): List of integers representing the sequence with one number missing. Returns: int: The missing number. n = len(arr) # Calculate the common difference d = (arr[-1] - arr[0]) // n # Perform binary search to find the missing element low, high = 0, n - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == arr[0] + mid * d: low = mid + 1 else: high = mid - 1 # The missing number will be arr[0] + (low * d) return arr[0] + low * d"},{"question":"Write a function named `analyze_text(file_path)` that reads a text file and performs a simple analysis on its content. This function should: 1. Open the specified file for reading and read its entire content. 2. Count and return the total number of words in the file. 3. Determine and return the frequency of each word in the file. The frequency should be case-insensitive (i.e., \'Word\' and \'word\' should be counted as the same word). 4. Ignore punctuation when counting word frequencies. **Function Signature:** ```python def analyze_text(file_path: str) -> Tuple[int, Dict[str, int]]: pass ``` **Example:** Suppose the file at `file_path` contains the following text: ``` Hello World! Hello everyone. This is an example text. ``` The function should return: - Total word count: 7 - Word frequency: `{\'hello\': 2, \'world\': 1, \'everyone\': 1, \'this\': 1, \'is\': 1, \'an\': 1, \'example\': 1, \'text\': 1}` **Additional Notes:** - You can assume the file contains only alphabetic characters and standard punctuation. - Use the `re` module to help with splitting words and removing punctuation. - Ensure efficient processing even for relatively large text files.","solution":"import re from collections import defaultdict from typing import Tuple, Dict def analyze_text(file_path: str) -> Tuple[int, Dict[str, int]]: Analyze the text file at the given file path and return the total number of words and a dictionary of word frequencies. Args: - file_path (str): The path to the text file to analyze. Returns: - Tuple[int, Dict[str, int]]: A tuple containing the total word count and a dictionary with word frequencies. with open(file_path, \'r\') as file: text = file.read() # Convert text to lowercase and use regex to remove punctuation and split words words = re.findall(r\'b[a-zA-Z]+b\', text.lower()) total_words = len(words) word_freq = defaultdict(int) for word in words: word_freq[word] += 1 return total_words, dict(word_freq)"},{"question":"** You are given a dataset of student information and their respective scores in three subjects: Mathematics, Physics, and Chemistry. Your task is to write a Python function that performs the following tasks: 1. Print a list of students with their respective scores. 2. Compute and print the total score for each student. 3. Determine the student with the highest total score and print their name and total score. 4. Create a scatter plot displaying the scores of each student, where the x-axis represents students and the y-axis represents their total scores. Ensure to label the students\' names on the x-axis. You are provided with a DataFrame `students`, where each row contains information about a student. The DataFrame has the following columns: - `STUDENT`: Name of the student. - `Mathematics`: Score in Mathematics. - `Physics`: Score in Physics. - `Chemistry`: Score in Chemistry. Your task is to write a function `analyze_scores(students)` that performs the above steps. Ensure you use the Matplotlib `scatter` function to create the scatter plot. **Requirements:** - Use the Matplotlib `scatter` function to display the total scores of students. - Label the students\' names on the x-axis. Here is a template to help you: ```python import matplotlib.pyplot as plt def analyze_scores(students): # Step 1: Print students and their respective scores print(\\"# STUDENT SCORES #\\") for index, row in students.iterrows(): print(f\'{row[\\"STUDENT\\"]}: Math={row[\\"Mathematics\\"]}, Physics={row[\\"Physics\\"]}, Chemistry={row[\\"Chemistry\\"]}\') # Step 2: Compute and print total scores students[\'Total_Score\'] = students[\'Mathematics\'] + students[\'Physics\'] + students[\'Chemistry\'] print(\\"n# TOTAL SCORES #\\") for index, row in students.iterrows(): print(f\'{row[\\"STUDENT\\"]}: Total Score={row[\\"Total_Score\\"]}\') # Step 3: Determine student with highest score top_student = students.loc[students[\'Total_Score\'].idxmax()] print(\\"n# TOP STUDENT #\\") print(f\'Top Student: {top_student[\\"STUDENT\\"]}, Total Score={top_student[\\"Total_Score\\"]}\') # Step 4: Create a scatter plot plt.scatter(students[\'STUDENT\'], students[\'Total_Score\']) plt.xlabel(\'Students\') plt.ylabel(\'Total Score\') plt.title(\'Student Total Scores\') plt.xticks(rotation=45) plt.show() # Example DataFrame to test the function import pandas as pd data = { \'STUDENT\': [\'Alice\', \'Bob\', \'Charlie\', \'David\'], \'Mathematics\': [85, 78, 92, 88], \'Physics\': [90, 82, 87, 85], \'Chemistry\': [88, 79, 85, 90] } students = pd.DataFrame(data) analyze_scores(students) ``` **","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_scores(students): # Step 1: Print students and their respective scores print(\\"# STUDENT SCORES #\\") for index, row in students.iterrows(): print(f\'{row[\\"STUDENT\\"]}: Math={row[\\"Mathematics\\"]}, Physics={row[\\"Physics\\"]}, Chemistry={row[\\"Chemistry\\"]}\') # Step 2: Compute and print total scores students[\'Total_Score\'] = students[\'Mathematics\'] + students[\'Physics\'] + students[\'Chemistry\'] print(\\"n# TOTAL SCORES #\\") for index, row in students.iterrows(): print(f\'{row[\\"STUDENT\\"]}: Total Score={row[\\"Total_Score\\"]}\') # Step 3: Determine student with highest score top_student = students.loc[students[\'Total_Score\'].idxmax()] print(\\"n# TOP STUDENT #\\") print(f\'Top Student: {top_student[\\"STUDENT\\"]}, Total Score={top_student[\\"Total_Score\\"]}\') # Step 4: Create a scatter plot plt.scatter(students[\'STUDENT\'], students[\'Total_Score\']) plt.xlabel(\'Students\') plt.ylabel(\'Total Score\') plt.title(\'Student Total Scores\') plt.xticks(rotation=45) plt.show()"},{"question":"You are tasked with writing a function `kth_smallest_element(matrix, k)` to find the k-th smallest element in a sorted matrix. The matrix is sorted in non-decreasing order both row-wise and column-wise. Here’s the detailed structure and requirements of the function: **Function: `kth_smallest_element(matrix, k)`** - **Parameters:** - `matrix`: A 2-D list of integers where each row and each column is sorted in non-decreasing order. - `k`: An integer specifying which smallest element to find. **Return:** - The function should return the k-th smallest element in the given matrix. **Considerations:** - The matrix dimensions are `n x n`, where n is the number of rows (and columns). - The value of `k` is always valid, i.e., `1 <= k <= n*n`. **Example:** ```python matrix = [ [1, 5, 9], [10, 11, 13], [12, 13, 15] ] k = 8 # The 8th smallest element in the sorted order is 13 result = kth_smallest_element(matrix, k) print(f\\"The {k}-th smallest element is: {result}\\") ``` **Guidelines:** - Utilize a min-heap (priority queue) to efficiently find the k-th smallest element. - Consider edge cases such as the smallest or largest element requests. - Ensure that the solution handles large matrices effectively. **Steps to include in your function:** 1. Initialize a min-heap and insert the first element of each row along with its coordinates (i.e., value, row, column). 2. Extract the smallest element from the heap `k` times. 3. For each extracted element, insert the next element in the same row into the heap (if any). 4. After `k` extractions, the root of the heap will be the k-th smallest element. Implement this function and test it with the provided example above.","solution":"import heapq def kth_smallest_element(matrix, k): Finds the k-th smallest element in a sorted matrix. :param matrix: List[List[int]]: 2-D list of integers sorted row-wise and column-wise. :param k: int: the k-th smallest element to find. :return: int: the k-th smallest element in the matrix. n = len(matrix) min_heap = [] # Initialize the min-heap with the first element of each row for row in range(min(n, k)): heapq.heappush(min_heap, (matrix[row][0], row, 0)) # Extract the smallest element from the heap k times result = 0 for _ in range(k): result, row, col = heapq.heappop(min_heap) if col + 1 < n: heapq.heappush(min_heap, (matrix[row][col + 1], row, col + 1)) return result"},{"question":"This function processes a list of transactions represented by a dictionary. Each transaction contains an \'id\', \'amount\', and \'category\'. It calculates the total amount spent per category and identifies the category with the highest spending. Additionally, it visualizes the spending per category in a bar chart. The function should output: - dict: A dictionary where the keys are categories and the values are the total amount spent in each category. - str: The category with the highest total spending. - matplotlib.axes._axes.Axes: An Axes object showing a bar chart of the total spending per category. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt from collections import defaultdict def analyze_transactions(transactions: list[dict]): ```","solution":"import matplotlib.pyplot as plt from collections import defaultdict def analyze_transactions(transactions): # Calculate the total amount spent per category spending_per_category = defaultdict(float) for transaction in transactions: category = transaction[\'category\'] amount = float(transaction[\'amount\']) spending_per_category[category] += amount # Identify the category with the highest total spending highest_spending_category = max(spending_per_category, key=spending_per_category.get) # Create a bar chart of the total spending per category categories = list(spending_per_category.keys()) amounts = list(spending_per_category.values()) fig, ax = plt.subplots() ax.bar(categories, amounts) ax.set_xlabel(\'Category\') ax.set_ylabel(\'Total Spent\') ax.set_title(\'Spending per Category\') # Return the results return dict(spending_per_category), highest_spending_category, ax"},{"question":"In this problem, you are required to write a function named `calculate_team_statistics` that processes a given CSV file containing soccer match data. The function reads the data from the CSV file, calculates various statistics for each team, and returns a DataFrame with the summarized information. This function utilizes the `pandas` library, specifically the `pandas.read_csv` and various groupby, aggregation, and transformation methods. You need to complete the following tasks in the `calculate_team_statistics` function: 1. Read the CSV file into a DataFrame using `pandas.read_csv`. 2. Calculate the following statistics for each team: - `total_matches`: the total number of matches played. - `total_goals`: the total number of goals scored by the team. - `total_points`: the total points earned (win: 3 points, draw: 1 point, loss: 0 points). The function should accept one parameter: - `file_path`: a string representing the path to the CSV file. The CSV file contains the following columns: - `Date`: the date of the match. - `HomeTeam`: the name of the home team. - `AwayTeam`: the name of the away team. - `FTHG`: the number of goals scored by the home team. - `FTAG`: the number of goals scored by the away team. - `FTR`: the full-time result (\'H\' for home win, \'D\' for draw, \'A\' for away win). The output DataFrame should have the following columns: - `team`: the name of the team. - `total_matches`: the total number of matches played by the team. - `total_goals`: the total number of goals scored by the team. - `total_points`: the total number of points scored by the team. # Function Signature ```python import pandas as pd def calculate_team_statistics(file_path): # Your implementation here ``` # Example Usage: ```python df = calculate_team_statistics(\'matches.csv\') print(df.head()) ``` Your implementation should correctly calculate the summarized statistics for each team and return the resulting DataFrame. # Constraints: - Assume the CSV file is correctly formatted and available at the specified file path. - Your solution should handle the calculations in an efficient manner using `pandas`.","solution":"import pandas as pd def calculate_team_statistics(file_path): df = pd.read_csv(file_path) # Initialize dictionary to store data team_stats = {} # Process each match to collect stats for index, row in df.iterrows(): home_team = row[\'HomeTeam\'] away_team = row[\'AwayTeam\'] home_goals = row[\'FTHG\'] away_goals = row[\'FTAG\'] result = row[\'FTR\'] # Initialize home team in dictionary if not already present if home_team not in team_stats: team_stats[home_team] = {\'total_matches\': 0, \'total_goals\': 0, \'total_points\': 0} # Initialize away team in dictionary if not already present if away_team not in team_stats: team_stats[away_team] = {\'total_matches\': 0, \'total_goals\': 0, \'total_points\': 0} # Update home team stats team_stats[home_team][\'total_matches\'] += 1 team_stats[home_team][\'total_goals\'] += home_goals if result == \'H\': team_stats[home_team][\'total_points\'] += 3 elif result == \'D\': team_stats[home_team][\'total_points\'] += 1 # Update away team stats team_stats[away_team][\'total_matches\'] += 1 team_stats[away_team][\'total_goals\'] += away_goals if result == \'A\': team_stats[away_team][\'total_points\'] += 3 elif result == \'D\': team_stats[away_team][\'total_points\'] += 1 # Convert the stats dictionary to a DataFrame stats_list = [{\'team\': key, **value} for key, value in team_stats.items()] summary_df = pd.DataFrame(stats_list) return summary_df"},{"question":"Write a function that takes a string containing a mathematical expression with addition and multiplication (e.g. \\"3+5*2\\") and evaluates its result. The expressions will not include any parentheses, and the input will always be a valid expression using integers and the operators \'+\', and \'*\'. The function should properly handle the order of operations, considering multiplication needs to be evaluated before addition. The function should output a single integer which is the result of the evaluated expression. You should write self-contained code starting with: ``` def evaluate_expression(expression): ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing \'+\' and \'*\' operators without parentheses. Handles the order of operations, where multiplication is done before addition. # Split the expression by the addition operator. addition_parts = expression.split(\'+\') # Initialize the result to 0. result = 0 # Process each part separated by the addition operator. for part in addition_parts: # Split the parts further by multiplication and calculate the product. multiplication_parts = part.split(\'*\') product = 1 for num in multiplication_parts: product *= int(num) # Add the product to the result. result += product return result"},{"question":"You are given a Python function `def find_odd_occurrence(nums: list) -> int:` that aims to return the integer that appears an odd number of times in a given list of integers. Each list is guaranteed to have exactly one integer that appears an odd number of times, while all other integers appear an even number of times. # Task: 1. Implement the function `find_odd_occurrence(nums: list) -> int`. 2. Your implementation should be efficient and concise. **Example:** Given `nums = [1, 2, 3, 2, 3, 1, 3]`: - The numbers `1`, `2`, and `3` are present in the list. - `1` occurs twice. - `2` occurs twice. - `3` occurs three times (odd number of times). Output should be `3`. # Constraints: - The length of the list is always odd. - There is always exactly one integer that appears an odd number of times. # Hint: You may consider that the XOR operation has useful properties in solving this type of problem.","solution":"def find_odd_occurrence(nums: list) -> int: Returns the only integer in the list that appears an odd number of times. result = 0 for num in nums: result ^= num return result"},{"question":"Write a function `parse_and_compute(expression)` that takes a string `expression` representing a simple mathematical expression and evaluates it. The expression will only contain single-digit integers and the operators `+` (addition) and `-` (subtraction). There will be no parentheses, and the input string will always be a valid expression. Your function should return the result of the computation as an integer. # Requirements: 1. The function should be named `parse_and_compute`. 2. The function should take one parameter: - `expression` (str): A string containing a valid mathematical expression. 3. The function should parse the expression from left to right and compute the result. 4. Use appropriate exception handling to manage any unforeseen errors during the computation process. # Example: ```python print(parse_and_compute(\\"3+2-4\\")) # Output: 1 print(parse_and_compute(\\"7-5+2\\")) # Output: 4 ``` # Notes: - Assume all characters in the expression are valid and there is no white space. - The operations should be processed strictly from left to right, with no operator precedence.","solution":"def parse_and_compute(expression): Evaluates a simple mathematical expression with addition and subtraction. Parameters: expression (str): A string containing the mathematical expression. Returns: int: Result of the computed expression. total = 0 current_number = 0 current_operator = \'+\' # initial operator for char in expression: if char.isdigit(): current_number = current_number * 10 + int(char) else: if current_operator == \'+\': total += current_number elif current_operator == \'-\': total -= current_number current_operator = char current_number = 0 # Apply the last number if current_operator == \'+\': total += current_number elif current_operator == \'-\': total -= current_number return total"},{"question":"You are given a list of integers representing heights of buildings in a skyline. A building from this skyline can block the view of another building if the former is taller and is located to the left of the latter. Your task is to write a function named `find_visible_buildings` that returns a list of building heights that are visible when viewed from the leftmost side of the skyline. **Specifications**: 1. The function should be named `find_visible_buildings`. 2. It should take one input parameter: - `heights` (List[int]): A list of integers representing the heights of buildings in the skyline from left to right. 3. The function should return a list of integers representing the heights of the buildings that are visible from the leftmost side. **Example**: ```python heights = [3, 7, 8, 3, 6, 1] result = find_visible_buildings(heights) print(result) # This should print [3, 7, 8] ``` **Hints**: - Iterate through the list and keep track of the tallest building encountered so far. - For each building, if it is taller than all previously encountered buildings, it is visible. - Ensure your solution runs efficiently even for large lists.","solution":"def find_visible_buildings(heights): Returns a list of building heights that are visible when viewed from the leftmost side of the skyline. visible_buildings = [] max_height_so_far = 0 for height in heights: if height > max_height_so_far: visible_buildings.append(height) max_height_so_far = height return visible_buildings"},{"question":"Convert a given list of strings to a pandas DataFrame where each unique word across all strings becomes a column and each row corresponds to the word counts for the respective strings. The function should output a pandas DataFrame with each unique word as a column header, and the cell values representing the count of each word in the corresponding string. The function should output: ``` pandas.DataFrame: DataFrame with word counts for each string. ``` You should write self-contained code starting with: ``` import pandas as pd from collections import Counter def task_func(strings): ```","solution":"import pandas as pd from collections import Counter def task_func(strings): Converts a list of strings to a pandas DataFrame where each unique word becomes a column and each row corresponds to the word counts for each string. Parameters: strings (list of str): List of strings. Returns: pandas.DataFrame: DataFrame with word counts for each unique word in the strings. # Create a list of counters for word counts in each string word_counts = [Counter(s.split()) for s in strings] # Create a DataFrame from the list of counters df = pd.DataFrame(word_counts).fillna(0).astype(int) return df"},{"question":"Create a function named `substring_replacements` that performs a series of replacements within a given string based on specified rules. The function will take an input string `s` and a list of replacement instructions `replacements`. Each instruction in `replacements` is a tuple with three elements `(old, new, n)`, where: - `old` is the substring to be replaced. - `new` is the substring to replace with. - `n` is the maximum number of non-overlapping occurrences of `old` to replace. The function should apply each replacement instruction sequentially to the string `s`. If `n` is `-1`, it indicates that all non-overlapping occurrences of `old` should be replaced with `new`. The function should return the modified string after applying all replacement rules. **Function Signature:** ```python def substring_replacements(s: str, replacements: list[tuple[str, str, int]]) -> str: pass ``` **Example:** ```python input_string = \\"cat bat cat bat cat bat\\" replacements = [(\\"cat\\", \\"dog\\", 2), (\\"bat\\", \\"rat\\", -1)] output = substring_replacements(input_string, replacements) print(output) # \\"dog rat dog rat rat rat\\" ``` In this example, the function first replaces the first 2 occurrences of \\"cat\\" with \\"dog\\", resulting in \\"dog bat dog bat cat bat\\". Then, it replaces all occurrences of \\"bat\\" with \\"rat\\", resulting in the final output \\"dog rat dog rat rat rat\\".","solution":"def substring_replacements(s: str, replacements: list[tuple[str, str, int]]) -> str: for old, new, n in replacements: if n == -1: s = s.replace(old, new) else: s = s.replace(old, new, n) return s"},{"question":"You are tasked with writing a function `longest_consecutive_subsequence` that finds the length of the longest consecutive elements sequence in an unsorted array of integers. The solution must have a time complexity of O(n). The function should conform to the following signature: ```python def longest_consecutive_subsequence(nums: list) -> int: # Function implementation ``` # Parameters: - `nums` (`list` of `int`): A list of integers. # Returns: - An `int` representing the length of the longest consecutive elements sequence. # Requirements: - Utilize a `set` for achieving the desired time complexity. # Example: For the input array: ```python nums = [100, 4, 200, 1, 3, 2] ``` The result should be: ```python 4 ``` # Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Its length is 4. Additional example: For the input array: ```python nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1] ``` The result should be: ```python 9 ``` # Explanation: The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Its length is 9. Ensure the solution explores the use of a `set` to manage elements for optimal time complexity without sorting the elements.","solution":"def longest_consecutive_subsequence(nums: list) -> int: Finds the length of the longest consecutive elements sequence in an unsorted array of integers. Parameters: - nums (list): A list of integers. Returns: - int: The length of the longest consecutive elements sequence. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: # Only start counting for the sequence if it\'s the beginning of the sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Design an algorithm to merge two sorted linked lists into one sorted linked list. The function should take two nodes representing the heads of the two linked lists and return the head of the merged linked list. You should write self-contained code starting with: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): ``` Note: Do not use any built-in Python sorting utilities; adhere to the linked list structure provided.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): dummy = ListNode() current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # if any elements are left in either list, append them if l1: current.next = l1 else: current.next = l2 return dummy.next"},{"question":"Write a Python function called `retry_decorator` to create a decorator that retries executing a function a specified number of times before giving up if the function raises an exception. The decorator should log the name of the function being called, the number of attempts, and the exception message if the function fails. To achieve this, you must utilize the following: 1. `functools.wraps` from the `functools` module to preserve the metadata of the original function. 2. A parameter to specify the maximum number of retries and an optional delay between retries. Each call attempt should be logged with the message: `\\"Attempt <attempt number> for function <function name>\\"`. If all retries fail, the exception should be logged with the message: `\\"Function <function name> failed after <retries> attempts with exception: <exception>\\"`. The function signature should be: ```python def retry_decorator(max_retries, delay=0): pass ``` Example usage: ```python @retry_decorator(max_retries=3, delay=2) def flaky_function(): # Function that might raise an exception occasionally pass ```","solution":"import time from functools import wraps def retry_decorator(max_retries, delay=0): def decorator(func): @wraps(func) def wrapper(*args, **kwargs): attempts = 0 while attempts < max_retries: try: print(f\\"Attempt {attempts + 1} for function {func.__name__}\\") return func(*args, **kwargs) except Exception as e: attempts += 1 if attempts >= max_retries: print(f\\"Function {func.__name__} failed after {max_retries} attempts with exception: {e}\\") raise time.sleep(delay) return wrapper return decorator"},{"question":"You need to write a function, `generate_employee_report(db_name)`, that connects to an SQLite database with the specified name. The database contains a table called `employees` with the following columns: `EmployeeID` (INT), `Name` (TEXT), `Department` (TEXT), `Salary` (REAL). Your function should: 1. Retrieve all records from the `employees` table. 2. Calculate the average salary of employees in each department. 3. Print the average salary for each department in ascending order of the department name. # Requirements: - Use the `sqlite3.connect` method to connect and manage the SQLite database. - Utilize SQL commands to query the necessary data from the table. - Properly handle any potential exceptions that might occur during the database connection or querying process. # Function Signature: ```python def generate_employee_report(db_name: str) -> None: pass ``` # Example: Given an `employees` table with the following data: ``` EmployeeID | Name | Department | Salary 1 | Alice | HR | 60000 2 | Bob | IT | 75000 3 | Eve | HR | 62000 4 | Carol | IT | 80000 5 | Dave | Finance | 55000 ``` Your function should output: ``` Department: Finance, Average Salary: 55000.00 Department: HR, Average Salary: 61000.00 Department: IT, Average Salary: 77500.00 ```","solution":"import sqlite3 from sqlite3 import Error def generate_employee_report(db_name: str) -> None: try: # Connect to the SQLite database conn = sqlite3.connect(db_name) cursor = conn.cursor() # Retrieve all records from the employees table cursor.execute(\\"SELECT Department, AVG(Salary) as AverageSalary FROM employees GROUP BY Department ORDER BY Department ASC\\") departments = cursor.fetchall() # Print the average salary for each department for department in departments: print(f\\"Department: {department[0]}, Average Salary: {department[1]:.2f}\\") except Error as e: print(f\\"An error occurred: {e}\\") finally: if conn: conn.close()"},{"question":"In this problem, you are required to write a function named `interweave_strings`. This function will take two parameters, `s1` and `s2`, which are strings. The goal is to interweave the two strings together, character by character, starting with the first character of `s1`, followed by the first character of `s2`, then the second character of `s1`, and so on. If one string is longer than the other, you should append the remaining characters of the longer string once the shorter string is exhausted. # Function Signature ```python def interweave_strings(s1: str, s2: str) -> str: Interweave two strings character by character. Parameters: s1 (str): The first string. s2 (str): The second string. Returns: str: The interweaved string. pass ``` # Input - `s1`: A string of length `n` (e.g., `\\"abc\\"`). - `s2`: A string of length `m` (e.g., `\\"12345\\"`). # Output - A string representing the interweaving of `s1` and `s2` (e.g., `\\"a1b2c345\\"`). # Example ```python result = interweave_strings(\\"abc\\", \\"12345\\") print(result) ``` Expected output: ``` \\"a1b2c345\\" ``` # Constraints - Both `s1` and `s2` will only contain alphanumeric characters. - The lengths of `s1` and `s2` will be at least 1 and at most 100. Note: - The function should efficiently handle the interweaving process and return the correct result for any given `s1` and `s2` within the constraints.","solution":"def interweave_strings(s1, s2): Interweave two strings character by character. Parameters: s1 (str): The first string. s2 (str): The second string. Returns: str: The interweaved string. result = [] len1, len2 = len(s1), len(s2) for i in range(max(len1, len2)): if i < len1: result.append(s1[i]) if i < len2: result.append(s2[i]) return \'\'.join(result)"},{"question":"You are tasked with writing a Python function that processes a list of strings, each containing a student\'s name and their scores in different subjects. The function should return a dictionary where the keys are the student names, and the values are their average scores rounded to two decimal places. **Function Specification:** - Function Name: `calculate_average_scores` - Input: A single parameter, `student_data` (a list of strings where each string is in the format \\"Name: score1, score2, ..., scoreN\\") - Output: A dictionary with student names as keys and their average scores as values (rounded to two decimal places) **Example Input:** ```python student_data = [ \\"Alice: 90, 80, 70, 60\\", \\"Bob: 100, 95, 80\\", \\"Charlie: 70, 75, 85, 90\\" ] ``` **Example Output:** ```python { \\"Alice\\": 75.00, \\"Bob\\": 91.67, \\"Charlie\\": 80.00 } ``` **Assumptions:** - Each student will have at least one score. - The input strings are properly formatted with valid integer scores. # Requirements: - Use list/string manipulation to extract names and scores. - Convert scores from string format to integers. - Calculate the average score for each student. - Use built-in functions and libraries for handling the data.","solution":"def calculate_average_scores(student_data): Processes a list of strings containing student names and scores, returning a dictionary with student names as keys and their average scores as values (rounded to two decimal places). result = {} for data in student_data: name, scores_str = data.split(\\":\\") scores = list(map(int, scores_str.split(\\",\\"))) average_score = sum(scores) / len(scores) result[name.strip()] = round(average_score, 2) return result"},{"question":"You are developing a function to determine if it\'s possible to reach the end of a list by jumping through numbers, similar to a board game where each number indicates the maximum jump length from that position. This problem helps to understand dynamic programming, recursion, and greedy algorithms which are useful in optimization problems and pathfinding algorithms. **Function Signature:** ```python def can_reach_end(nums): # Your code here ``` **Parameters:** - `nums`: A list of non-negative integers representing the maximum jump length from each position. **Returns:** - A boolean `True` if it\'s possible to reach the last index starting from the first index; otherwise, `False`. # Requirements 1. Implement the function without using extra space (apart from the input list). 2. Aim for an efficient solution with linear complexity. # Example: ```python nums = [2, 3, 1, 1, 4] print(can_reach_end(nums)) # Output: True nums = [3, 2, 1, 0, 4] print(can_reach_end(nums)) # Output: False ``` # Explanation: In the first example, you can jump from index 0 to index 1 (or 2), then jump to index 3, and finally reach index 4. In the second example, you can\'t move past index 3, making it impossible to reach the end of the list.","solution":"def can_reach_end(nums): Determine if it is possible to reach the last index from the first index in list nums where each element in the list represents the maximum jump length at that position. :param nums: List[int] - A list of non-negative integers. :return: bool - True if it\'s possible to reach the last index, False otherwise. max_reachable = 0 for i, num in enumerate(nums): if i > max_reachable: return False max_reachable = max(max_reachable, i + num) return max_reachable >= len(nums) - 1"},{"question":"Find all anagrams of a target word within a given list of words. Two words are anagrams if they contain the same characters in the same frequency. The function will receive a list of words and a target word and should output a list of words which are anagrams of the target word. The function should output: list[str]: A list of anagrams of the target word found in the provided list. You should write self-contained code starting with: ``` from collections import Counter def find_anagrams(word_list, target): ```","solution":"from collections import Counter def find_anagrams(word_list, target): Returns a list of anagrams of the target word found in the provided word list. target_counter = Counter(target) anagrams = [word for word in word_list if Counter(word) == target_counter] return anagrams"},{"question":"You are tasked with implementing the K-means clustering algorithm to classify a given dataset into a specified number of clusters. Your goal is to write a function named `kMeansClustering` that iteratively assigns data points to clusters and updates cluster centroids. Your function should: 1. Accept the following parameters: - `data` (a numpy array): The dataset with dimensions ( m times n ) where ( m ) is the number of data points, and ( n ) is the number of features. - `k` (an integer): The number of clusters to form. - `iterations` (an integer): The number of times the K-means algorithm should run (epochs). 2. Use the following NumPy functions effectively: - `numpy.random.choice`: To randomly initialize cluster centroids. - `numpy.linalg.norm`: To compute the Euclidean distance between data points and centroids. - `numpy.mean`: To update the centroids based on the mean of the data points in each cluster. 3. Inside this function, implement the K-means algorithm: - Randomly initialize `k` cluster centroids from the data points. - Repeat the following for the specified iterations: - Assign each data point to the nearest cluster centroid. - Compute new centroids as the mean of the data points assigned to each cluster. - Check for convergence by comparing previous centroids with newly updated centroids. 4. Return: - The final cluster centroids. - The cluster assignment for each data point. # Signature: ```python def kMeansClustering(data, k, iterations): ``` # Example: ```python import numpy as np # Defining input values data = np.array([ [1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0] ]) k = 2 iterations = 10 # Calling the function centroids, cluster_assignments = kMeansClustering(data, k, iterations) # Outputs print(\'Cluster Centroids:\', centroids) print(\'Cluster Assignments:\', cluster_assignments) ```","solution":"import numpy as np def kMeansClustering(data, k, iterations): Perform K-means clustering on the given dataset. Parameters: - data (numpy array): The dataset with dimensions m x n where m is the number of data points, and n is the number of features. - k (int): The number of clusters to form. - iterations (int): The number of times the K-means algorithm should run (epochs). Returns: - centroids (numpy array): The final cluster centroids. - cluster_assignments (numpy array): The cluster assignment for each data point. # Randomly initialize k centroids from the data points m = data.shape[0] random_indices = np.random.choice(m, k, replace=False) centroids = data[random_indices, :] for _ in range(iterations): # Step 1: Assign each data point to the nearest centroid distances = np.array([np.linalg.norm(data - centroid, axis=1) for centroid in centroids]) cluster_assignments = np.argmin(distances, axis=0) # Step 2: Compute new centroids as the mean of the points in each cluster new_centroids = np.array([data[cluster_assignments == i].mean(axis=0) for i in range(k)]) # Step 3: Check for convergence if np.all(centroids == new_centroids): break centroids = new_centroids return centroids, cluster_assignments"},{"question":"In this problem, you will implement a function named `longest_substring_with_k_distinct` that finds the length of the longest substring with at most `k` distinct characters in a given string. Your task is to implement the `longest_substring_with_k_distinct` function that: 1. Takes the following parameters: - `s`: The input string. - `k`: The maximum number of distinct characters allowed in the substring. 2. Uses a sliding window technique to iterate through the string and maintain a window that contains at most `k` distinct characters. 3. Updates the window size dynamically and tracks the length of the longest substring found during the process. 4. Returns the length of the longest substring. The focus of this problem is to efficiently use the sliding window approach along with data structures such as dictionaries to keep track of character counts within the window and adjust the window size accordingly.","solution":"def longest_substring_with_k_distinct(s, k): if k == 0 or not s: return 0 left, right = 0, 0 max_length = 0 char_count = {} while right < len(s): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"**Adaptive Histogram Equalization** In this problem, you\'ll implement a function `adaptive_histogram_equalization(image, kernel_size)` to enhance the contrast of a grayscale image using adaptive histogram equalization (AHE). Unlike global histogram equalization, AHE computes several histograms for distinct sections of an image and uses them to redistribute the lightness values of the image. The parameters are: - `image`: A 2D NumPy array representing the grayscale image. - `kernel_size`: An integer representing the size of the kernel (sub-region) for which the histogram is equalized. The function should follow these steps: 1. Divide the image into non-overlapping sub-regions (tiles) of size `kernel_size x kernel_size`. 2. For each sub-region, compute the histogram of pixel intensities. 3. Equalize the histogram of each sub-region and map the intensity values accordingly. 4. Use bilinear interpolation to smooth the boundaries between the sub-regions, ensuring a seamless transition in the image. When a sub-region is at the border of the image and does not fit completely, process the overlapping region with the part of the image that extends beyond it. Return the contrast-enhanced image as a 2D NumPy array. Implement the function in accordance with the above specifications using the following function signature: ```python import numpy as np def adaptive_histogram_equalization(image: np.ndarray, kernel_size: int) -> np.ndarray: pass ``` # Example Usage ```python import numpy as np image = np.array([ [52, 55, 61, 59, 79, 61, 76, 61], [62, 59, 55, 104, 94, 85, 59, 71], [63, 65, 66, 113, 144, 104, 63, 72], [64, 70, 70, 126, 154, 109, 71, 69], [67, 73, 68, 106, 122, 88, 68, 68], [68, 79, 60, 70, 77, 66, 58, 75], [69, 85, 64, 58, 55, 61, 65, 83], [70, 87, 69, 68, 65, 73, 78, 90] ]) enhanced_image = adaptive_histogram_equalization(image, kernel_size=3) print(enhanced_image) ``` The above code takes a sample 8x8 image and applies adaptive histogram equalization using a kernel size of 3, outputting the enhanced image as a NumPy array.","solution":"import numpy as np from scipy.ndimage import map_coordinates def adaptive_histogram_equalization(image: np.ndarray, kernel_size: int) -> np.ndarray: Apply adaptive histogram equalization to a grayscale image. Args: - image: 2D numpy array representing the grayscale image. - kernel_size: Integer representing the size of the kernel for local histogram equalization. Returns: - Contrast-enhanced image as a 2D numpy array. if len(image.shape) != 2: raise ValueError(\\"Input image should be a 2D array\\") m, n = image.shape output_image = np.zeros_like(image) for i in range(0, m, kernel_size): for j in range(0, n, kernel_size): sub_region = image[i:i + kernel_size, j:j + kernel_size] # Compute histogram and cdf of the sub-region hist, bins = np.histogram(sub_region.flatten(), bins=256, range=[0, 256]) cdf = hist.cumsum() cdf_normalized = cdf * (255 / cdf[-1]) # Apply mapping equalized_sub_region = np.interp(sub_region.flatten(), bins[:-1], cdf_normalized) output_image[i:i + kernel_size, j:j + kernel_size] = equalized_sub_region.reshape(sub_region.shape) # To avoid sharp transitions between tiles, apply bilinear interpolation x_coords, y_coords = np.mgrid[0:m:1, 0:n:1] output_image = map_coordinates(output_image, [x_coords.flatten(), y_coords.flatten()], order=1, mode=\'reflect\').reshape(m, n) return output_image"},{"question":"You are asked to write a function named `find_max_average` that calculates the maximum average of any contiguous subarray of a given length `k` from an input list of integers `nums`. # Signature of the function: ```python def find_max_average(nums: list, k: int) -> float: pass ``` # Requirements: 1. The function should accept a list `nums` of integers and an integer `k` which represents the length of the subarray. 2. Use a sliding window approach to find the maximum average of all possible contiguous subarrays of length `k`. 3. Return the maximum average as a float. # Example: ```python find_max_average([1, 12, -5, -6, 50, 3], 4) # Returns 12.75 ``` **Explanation**: From the input list [1, 12, -5, -6, 50, 3], the contiguous subarrays of length 4 are: - [1, 12, -5, -6] with average 0.5 - [12, -5, -6, 50] with average 12.75 - [-5, -6, 50, 3] with average 10.5 The maximum average is 12.75. # Notes: - The length of `nums` will be at least `k`. - The value of `k` will be at least 1 and at most the length of `nums`. - Consider edge cases where the input list may contain both positive and negative numbers.","solution":"def find_max_average(nums: list, k: int) -> float: Returns the maximum average of any contiguous subarray of length k. # Initial sum of the first k elements max_sum = current_sum = sum(nums[:k]) # Sliding window to calculate sums of all contiguous subarrays of length k for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) # Compute the maximum average return max_sum / k"},{"question":"In this exercise, you are tasked with implementing a function to search for the optimal hyperparameters of a machine learning model using grid search with cross-validation. This task requires you to utilize the `GridSearchCV` class from the `sklearn.model_selection` library. Specifically, you will: 1. **Perform a grid search** to evaluate different combinations of hyperparameters. 2. **Identify the best hyperparameters** that yield the highest cross-validation score. 3. **Return the best estimator** configured with these optimal hyperparameters. The function you need to implement is called `find_best_hyperparameters`, which takes the following parameters: - `estimator`: An object of the type that implements the \\"fit\\" method. - `param_grid`: Dictionary or list of dictionaries with parameters to be optimized and their corresponding values for the grid search. - `X`: Training vector (2D array), where `n_samples` is the number of samples, and `n_features` is the number of features. - `y`: Target relative to `X` for classification or regression. - `cv`: The cross-validation strategy. - `scoring`: A string or callable to evaluate the predictions on the test set. - `verbose`: An integer that controls the verbosity: the higher, the more messages. The function should follow these steps: 1. Use the `GridSearchCV` class to perform a grid search over the defined parameter grid with the specified cross-validation strategy. 2. Fit the `GridSearchCV` object to the data `X` and `y`. 3. Extract and return the best estimator from the grid search results.","solution":"from sklearn.model_selection import GridSearchCV def find_best_hyperparameters(estimator, param_grid, X, y, cv=5, scoring=None, verbose=0): Performs a grid search to find the optimal hyperparameters for the given estimator. Parameters: estimator: An object of the type that implements the \\"fit\\" method. param_grid: Dictionary or list of dictionaries with parameters to be optimized. X: Training vector (array-like, shape = [n_samples, n_features]). y: Target relative to X (array-like, shape = [n_samples]). cv: Cross-validation strategy (default=5). scoring: A string or callable to evaluate the predictions on the test set (default=None). verbose: Controls verbosity of the output (default=0). Returns: The best estimator configured with the optimal hyperparameters. grid_search = GridSearchCV(estimator=estimator, param_grid=param_grid, cv=cv, scoring=scoring, verbose=verbose) grid_search.fit(X, y) return grid_search.best_estimator_"},{"question":"You are given a dictionary where the keys are student names and the values are lists of their test scores. Your task is to write a function named `generate_report_card(grades)` that processes this data and generates a report card for each student. The report card should include the student\'s name, their highest score, their lowest score, and their average score. The average score should be formatted to two decimal places. Here are the steps your function should follow: 1. Iterate through each student in the dictionary. 2. For each student, calculate their highest score using the `max()` function. 3. Calculate their lowest score using the `min()` function. 4. Calculate their average score by summing their scores and dividing by the number of scores, formatted to two decimal places. 5. Print the student\'s name, highest score, lowest score, and average score in a readable format. Use the following dictionary for testing: ```python grades = { \'Alice\': [88, 92, 79, 93, 85], \'Bob\': [72, 85, 91, 89, 76], \'Charlie\': [95, 100, 95, 97, 99] } ``` Implement the function `generate_report_card(grades)` to create the report cards.","solution":"def generate_report_card(grades): This function takes a dictionary where the keys are student names and the values are lists of their test scores. It generates and prints a report card for each student with their name, highest score, lowest score, and average score. for student, scores in grades.items(): highest_score = max(scores) lowest_score = min(scores) average_score = sum(scores) / len(scores) formatted_average_score = f\\"{average_score:.2f}\\" print(f\\"Student: {student}\\") print(f\\" Highest Score: {highest_score}\\") print(f\\" Lowest Score: {lowest_score}\\") print(f\\" Average Score: {formatted_average_score}\\") print() # For better readability"},{"question":"You have been tasked with writing a Python function named `process_student_scores` that performs the following operations: 1. Reads student scores from a text file. 2. Calculates the average score for the entire class. 3. Identifies and returns the names of students who scored above the average. The text file contains student names and their corresponding scores in the following format: - Each line in the file contains a student\'s name followed by a colon and their score (example: \\"Alice: 87\\"). Here is a step-by-step breakdown of the function requirements: 1. **Read From File**: - Open the file, read its contents, and parse the student names and their scores. 2. **Calculate Average**: - Compute the average score for all the students. 3. **Identify Above Average**: - Create a list containing the names of students who scored above the class average. 4. **Return the List**: - Return the list of names of students with above-average scores. # Function Signature ```python def process_student_scores(filename: str) -> list: ``` # Example If the text file `scores.txt` contains the following content: ``` Alice: 87 Bob: 75 Charlie: 93 Diana: 82 Eva: 90 ``` Calling the function with this file: ```python filename = \'scores.txt\' result = process_student_scores(filename) print(result) # This should print: [\'Alice\', \'Charlie\', \'Eva\'] ``` # Constraints - The function should handle basic file operations (open, read) and assume valid input format (name: score pairs). - The function should use standard Python libraries and follow file I/O best practices. - Strings in the file will not contain special characters other than colons and line breaks. - Scores will be integers in the range 0 to 100 (inclusive).","solution":"def process_student_scores(filename: str) -> list: Reads student scores from a text file, calculates the average score, and returns the names of students who scored above the average. Args: - filename (str): The name of the file containing student scores. Returns: - list: A list containing the names of students who scored above the average. students = {} # Reading from the file and parsing names and scores with open(filename, \'r\') as file: for line in file: name, score = line.split(\':\') name = name.strip() score = int(score.strip()) students[name] = score # Calculating the average score total_score = sum(students.values()) average_score = total_score / len(students) # Identifying students with above-average scores above_average_students = [name for name, score in students.items() if score > average_score] return above_average_students"},{"question":"# Design an Online Auction System You are responsible for designing the core part of an online auction system that manages auction listings and bidding operations. Each auction listing has a unique identifier, the item being auctioned, a starting price, and the highest bid received so far. Users can place bids on items, and bids must be higher than the current highest bid for that item. Implement a Python class named `AuctionSystem` that allows managing auction listings and handling bids with the following specifications: 1. **Auction Listing Creation** - A method `create_auction(auction_id: str, item: str, starting_price: float)` which creates a new auction listing with the provided unique identifier, item name, and starting price. If an auction with the same ID already exists, it should raise an appropriate error. 2. **Place Bid** - A method `place_bid(auction_id: str, user: str, bid_amount: float)` which allows a user to place a bid on an existing auction. The bid must be strictly higher than the current highest bid for that auction. If successful, it updates the highest bid and the respective user. If the auction does not exist or the bid is not higher, raise an appropriate error. 3. **Get Auction Details** - A method `get_auction_details(auction_id: str) -> dict` which returns the details of the auction including the item, starting price, current highest bid, and the user who placed the highest bid. If the auction does not exist, raise an appropriate error. # Class and Method Signatures ```python class AuctionSystem: def __init__(self): # Your implementation here pass def create_auction(self, auction_id: str, item: str, starting_price: float) -> None: # Your implementation here pass def place_bid(self, auction_id: str, user: str, bid_amount: float) -> None: # Your implementation here pass def get_auction_details(self, auction_id: str) -> dict: # Your implementation here pass # Example usage: # auction_system = AuctionSystem() # auction_system.create_auction(\\"1\\", \\"Laptop\\", 1000.0) # auction_system.place_bid(\\"1\\", \\"Alice\\", 1050.0) # auction_details = auction_system.get_auction_details(\\"1\\") # print(auction_details) ```","solution":"class AuctionNotFoundException(Exception): pass class AuctionAlreadyExistsException(Exception): pass class InvalidBidException(Exception): pass class AuctionSystem: def __init__(self): self.auctions = {} def create_auction(self, auction_id: str, item: str, starting_price: float) -> None: if auction_id in self.auctions: raise AuctionAlreadyExistsException(f\\"Auction with ID {auction_id} already exists.\\") self.auctions[auction_id] = { \\"item\\": item, \\"starting_price\\": starting_price, \\"highest_bid\\": starting_price, \\"highest_bidder\\": None } def place_bid(self, auction_id: str, user: str, bid_amount: float) -> None: if auction_id not in self.auctions: raise AuctionNotFoundException(f\\"Auction with ID {auction_id} not found.\\") auction = self.auctions[auction_id] if bid_amount <= auction[\\"highest_bid\\"]: raise InvalidBidException(f\\"The bid amount must be higher than the current highest bid of {auction[\'highest_bid\']}.\\") auction[\\"highest_bid\\"] = bid_amount auction[\\"highest_bidder\\"] = user def get_auction_details(self, auction_id: str) -> dict: if auction_id not in self.auctions: raise AuctionNotFoundException(f\\"Auction with ID {auction_id} not found.\\") return self.auctions[auction_id]"},{"question":"Write a Python class named `Cache` that implements a simple in-memory cache with the following specifications: 1. The cache should be initialized with a specified capacity that limits the maximum number of items it can hold. Once the capacity is reached, the least recently added item should be evicted to make space for a new one. 2. Implement the following methods: - `put(key, value)`: Stores the key-value pair in the cache. If the cache is at full capacity, evict the least recently added item. - `get(key)`: Retrieves the value associated with the given key from the cache if it exists; otherwise, returns `None`. - `delete(key)`: Deletes the key-value pair associated with the given key from the cache if it exists. - `reset()`: Clears all items from the cache. # Example Usage ```python cache = Cache(2) cache.put(\'a\', 1) cache.put(\'b\', 2) print(cache.get(\'a\')) # Output: 1 cache.put(\'c\', 3) # Evicts \'b\' because capacity is 2 print(cache.get(\'b\')) # Output: None cache.delete(\'a\') print(cache.get(\'a\')) # Output: None cache.put(\'d\', 4) cache.reset() print(cache.get(\'d\')) # Output: None ``` Use the following signature for your class: ```python class Cache: def __init__(self, capacity: int): pass def put(self, key, value): pass def get(self, key): pass def delete(self, key): pass def reset(self): pass ```","solution":"class Cache: def __init__(self, capacity: int): self.capacity = capacity self.cache = {} self.order = [] # List to keep track of insertion order def put(self, key, value): if key in self.cache: self.order.remove(key) elif len(self.cache) >= self.capacity: oldest_key = self.order.pop(0) del self.cache[oldest_key] self.cache[key] = value self.order.append(key) def get(self, key): return self.cache.get(key, None) def delete(self, key): if key in self.cache: del self.cache[key] self.order.remove(key) def reset(self): self.cache.clear() self.order = []"},{"question":"You are tasked with creating a function `process_dictionary(d)` that should simulate processing entries in a dictionary object `d` in a multithreaded environment. The function will take a dictionary object where keys are strings and values are integers. The objective is to concurrently compute the square of each integer value and store the result back in the dictionary. To achieve this, follow these guidelines: 1. Print the thread name before starting to process each dictionary entry (use `threading.current_thread().name`). 2. For each key-value pair in the dictionary: - Print a message indicating that the value for the given key is being processed. - Compute the square of the integer value. - Store the squared value back in the dictionary under the same key. - Introduce a random sleep interval between 0 and 1 seconds after processing each entry to simulate a time-consuming operation. To generate the random time interval, use the `random.random()` function from the `random` module. The resulting function will simulate a threaded process modifying dictionary values with random delays, thereby mimicking real-world multithreading scenarios. Here is the function signature: ```python def process_dictionary(d): # Your code here pass ``` Ensure that this function correctly makes use of the `random.random()` method as specified.","solution":"import threading import random import time def process_dictionary(d): def worker(key, value): # Print the thread name print(f\\"Thread {threading.current_thread().name} processing key: {key}\\") # Compute the square of the value squared_value = value ** 2 # Store the squared value back in the dictionary d[key] = squared_value # Print processing message print(f\\"Processed key: {key}, original value: {value}, squared value: {squared_value}\\") # Random sleep interval between 0 and 1 seconds time.sleep(random.random()) threads = [] for key, value in d.items(): thread = threading.Thread(target=worker, args=(key, value)) threads.append(thread) thread.start() # Join all threads to ensure completion for thread in threads: thread.join()"},{"question":"In this problem, you will create a function `find_shortest_path` that finds the shortest path in a grid from the top-left corner to the bottom-right corner using Breadth-First Search (BFS) algorithm. You need to avoid obstacles represented as \'1\' and can move in four directions (up, down, left, right). **Function Signature:** ```python def find_shortest_path(grid): Find the shortest path in a grid from the top-left corner to the bottom-right corner. :param grid: List of lists representing the grid, where \'0\' is a free cell and \'1\' is an obstacle. :return: Integer representing the length of the shortest path. Return -1 if there is no path. ``` **Parameters:** - `grid` (list of list of int): A 2D list representing the grid. \'0\' is a free cell and \'1\' is an obstacle. **Returns:** - An integer representing the length of the shortest path from the top-left corner to the bottom-right corner. If there is no valid path, return -1. **Instructions:** 1. Initialize the BFS queue with the starting position (0, 0) and a count of moves starting from 1. 2. Use BFS to explore all possible paths. 3. Keep track of visited cells to avoid re-visiting and forming loops. 4. If you reach the bottom-right corner, return the current path length. 5. If the queue is exhausted and no path is found, return -1. Here\'s an example of what your function might look like in use: ```python grid = [ [0, 0, 0, 1], [1, 0, 1, 0], [1, 0, 0, 0], [0, 1, 1, 0] ] print(find_shortest_path(grid)) # Output should be the length of the shortest path as an integer. ``` #","solution":"from collections import deque def find_shortest_path(grid): Find the shortest path in a grid from the top-left corner to the bottom-right corner. :param grid: List of lists representing the grid, where \'0\' is a free cell and \'1\' is an obstacle. :return: Integer representing the length of the shortest path. Return -1 if there is no path. if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return -1 queue = deque([(0, 0, 1)]) # Position (row, col, distance) visited = set((0, 0)) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, Down, Left, Up while queue: row, col, dist = queue.popleft() # If we reach the bottom-right corner if row == rows-1 and col == cols-1: return dist for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < rows and 0 <= c < cols and grid[r][c] == 0 and (r, c) not in visited: visited.add((r, c)) queue.append((r, c, dist + 1)) return -1"},{"question":"You are tasked with creating a function that normalizes a set of images to a specified range. Image normalization is commonly used as a preprocessing step to improve the convergence of learning algorithms. Specifically, you will implement a function `normalize_images` that transforms pixel values of the images from their original range to a new specified range [new_min, new_max]. Your implementation should follow these steps: 1. **Flatten Images**: Convert each 2D image into a 1D array for easier manipulation. 2. **Calculate Min-Max**: Compute the minimum and maximum pixel values across all images. 3. **Normalize Pixels**: Apply the normalization formula to each pixel value individually to transform the original values to the new specified range. 4. **Reshape Images**: Convert the 1D normalized pixel arrays back to their original 2D shapes. Use `numpy` for array manipulations and mathematical operations. Function Signature ```python import numpy as np def normalize_images(images, new_min, new_max): Normalize a set of images to the specified range [new_min, new_max]. Parameters: - images: numpy array of shape (N, H, W), containing N images of dimensions H x W - new_min: float, the new minimum value for the normalized images - new_max: float, the new maximum value for the normalized images Returns: - normalized_images: numpy array of shape (N, H, W), containing the normalized images pass ``` Requirements: - Use `numpy` for efficient array operations. - The normalization formula to be used is: [ text{normalized_pixel} = text{new_min} + left( frac{text{pixel} - text{original_min}}{text{original_max} - text{original_min}} right) times (text{new_max} - text{new_min}) ] - The function should handle images with diverse original ranges and efficiently scale them to the desired range. Hint: - The formula for normalization is crucial to ensure that all pixel values fall within the new specified range. - Ensure to handle scenarios when the original minimum and maximum pixel values are equal to avoid division by zero.","solution":"import numpy as np def normalize_images(images, new_min, new_max): Normalize a set of images to the specified range [new_min, new_max]. Parameters: - images: numpy array of shape (N, H, W), containing N images of dimensions H x W - new_min: float, the new minimum value for the normalized images - new_max: float, the new maximum value for the normalized images Returns: - normalized_images: numpy array of shape (N, H, W), containing the normalized images original_min = np.min(images) original_max = np.max(images) if original_min == original_max: return np.full_like(images, new_min) normalized_images = new_min + (images - original_min) * (new_max - new_min) / (original_max - original_min) return normalized_images"},{"question":"**You are required to write a function named `merge_sorted_lists(lists, output_file)` which takes two arguments:** 1. `lists`: A list of lists where each list contains integers sorted in ascending order. 2. `output_file`: A string representing the path to the output text file. The task is to merge all the sorted lists into a single sorted list and write the result to the output file. The output file should contain the sorted integers separated by commas. You **must use the `heapq.merge` function from the `heapq` module** for merging the lists. The function should perform the following steps: 1. Merge the sorted lists into a single sorted list. 2. Write the merged sorted list to the output file, with integers separated by commas. **Example:** Suppose the input lists are: ```python lists = [ [1, 4, 6], [2, 3, 5], [7, 8, 9] ] ``` The output file (`output.txt`) should contain: ``` 1,2,3,4,5,6,7,8,9 ``` **Hint:** - Consider using `heapq.merge` to efficiently merge the sorted lists. - Use the `join` method to create a string of comma-separated integers. **Function Signature:** ```python def merge_sorted_lists(lists: list[list[int]], output_file: str) -> None: pass ```","solution":"import heapq def merge_sorted_lists(lists, output_file): Merges multiple sorted lists into a single sorted list and writes the result to a file. Args: lists (list of lists of int): A list of sorted lists. output_file (str): The path to the output text file. # Use heapq.merge to merge all sorted lists merged = heapq.merge(*lists) # Convert merged generator to list to facilitate joining and writing to file merged_list = list(merged) # Write the merged sorted list to the file, with integers separated by commas with open(output_file, \'w\') as f: f.write(\',\'.join(map(str, merged_list)))"},{"question":"You are to write a function that normalizes a given list of integers using feature scaling. This problem will help you become familiar with specific functions from the NumPy library, namely `numpy.max`, `numpy.min`, and `numpy.divide`. The function you are to write is named `normalize`, and it will take one parameter: 1. `data` (1D numpy array): The array of integers that needs to be normalized. Feature scaling is a method used to standardize the range of independent variables or features of data. The formula for normalization is given by: [ text{normalized_value} = frac{text{value} - text{min}(data)}{text{max}(data) - text{min}(data)} ] Your task: 1. Calculate the maximum value in the array using `numpy.max`. 2. Calculate the minimum value in the array using `numpy.min`. 3. Subtract the minimum value from each element in the array. 4. Divide the resulting array by the difference between the maximum and minimum values. You must use the following numpy functions: - `numpy.max` - `numpy.min` - `numpy.subtract` - `numpy.divide` Function Signature: ```python def normalize(data): # Your code here pass ``` Example usage: ```python import numpy as np data = np.array([10, 20, 30, 40, 50]) print(normalize(data)) # Output should be approximately: [0.0, 0.25, 0.5, 0.75, 1.0] ```","solution":"import numpy as np def normalize(data): Normalizes a given 1D numpy array using feature scaling. Parameters: data (1D numpy array): The array of integers to be normalized. Returns: 1D numpy array: The normalized array. # Calculate the maximum and minimum values in the array max_val = np.max(data) min_val = np.min(data) # Guard against division by zero if all elements are the same if max_val == min_val: return np.zeros(data.shape) # Subtract the minimum value from each element in the array subtracted = np.subtract(data, min_val) # Divide the resulting array by the difference between the maximum and minimum values normalized_data = np.divide(subtracted, (max_val - min_val)) return normalized_data"},{"question":"Design a function `largest_continuous_sum(arr)` that finds the maximum sum of any contiguous subarray within an array of integers. This problem is often known as \\"Maximum Subarray Problem.\\" # Requirements: 1. Implement the function `largest_continuous_sum(arr)` that takes a single argument: - `arr`: A list of integers (both positive and negative). 2. Utilize an efficient approach to solve the problem, such as Kadane’s algorithm, which runs in O(n) time complexity. 3. Handle edge cases where the array might be empty. In such cases, the function should return 0. # Specifications: - The function should be capable of processing both positive and negative integers within the array. - Return the maximum sum of a contiguous subarray found. - If the array is empty, return 0. # Example: ```python # Example Usage arr1 = [-2, 1, -3, 4, -1, 2, 1, -5, 4] print(largest_continuous_sum(arr1)) # Output: 6 (subarray: [4, -1, 2, 1]) arr2 = [1, 2, 3, 4, 5] print(largest_continuous_sum(arr2)) # Output: 15 (subarray: [1, 2, 3, 4, 5]) arr3 = [-5, -2, -3, -4] print(largest_continuous_sum(arr3)) # Output: -2 (subarray: [-2]) arr4 = [] print(largest_continuous_sum(arr4)) # Output: 0 ``` The function should efficiently handle arrays of varying lengths and correctly identify the maximum possible sum of any contiguous subarray within the given list.","solution":"def largest_continuous_sum(arr): Finds the maximum sum of any contiguous subarray within the given array. Parameters: arr (list): A list of integers. Returns: int: The maximum sum of any contiguous subarray. if len(arr) == 0: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In file processing and content analysis, it\'s often necessary to determine the frequency of each word in a given text file. This kind of operation can be useful in various applications such as text mining, natural language processing, and data analysis. You are required to implement a function named `word_count(file_path: str) -> dict` that takes the path to a text file and returns a dictionary where the keys are unique words from the file, and the values are the corresponding word counts. The function should ignore case (i.e., \\"Word\\" and \\"word\\" should be counted as the same word) and punctuation marks. To achieve this, you can utilize Python\'s `collections.Counter` for counting, and the `string` module to manage punctuation. **Function signature:** ```python def word_count(file_path: str) -> dict: ``` **Example:** Assume the content of the file `sample.txt` is as follows: ``` Hello world! This is a test. Hello again; this is a test. ``` ```python result = word_count(\'sample.txt\') print(result) # Expected Output: {\'hello\': 2, \'world\': 1, \'this\': 2, \'is\': 2, \'a\': 2, \'test\': 2, \'again\': 1} ``` **Constraints:** - You can assume the input file is a plain text file with no special encoding. - The function should handle files up to 1 MB in size. - The function should be case-insensitive and ignore punctuation marks such as `.,;!()`","solution":"import string from collections import Counter def word_count(file_path: str) -> dict: Given a file path, return a dictionary with the frequency count of each word in the file. The function ignores case and punctuation. with open(file_path, \'r\') as file: # Read the entire content of the file text = file.read() # Remove punctuation and convert to lowercase text = text.translate(str.maketrans(\'\', \'\', string.punctuation)).lower() # Split the text into words words = text.split() # Use Counter to count the frequency of each word word_counts = Counter(words) return dict(word_counts)"},{"question":"In many algorithms, a common problem involves finding the intersection of two sorted arrays, meaning the elements that appear in both arrays. Write a function `intersect_sorted_arrays` that takes two lists of integers, `arr1` and `arr2`, both of which are already sorted in ascending order, and returns a new list containing the intersection of these two arrays. The returned list should also be sorted in ascending order. Your solution should aim for O(n + m) time complexity, where n is the length of `arr1` and m is the length of `arr2`. Function Signature: ```python def intersect_sorted_arrays(arr1: List[int], arr2: List[int]) -> List[int]: ``` # Input - `arr1`: A list of integers sorted in ascending order, can be empty. - `arr2`: A list of integers sorted in ascending order, can be empty. # Output - A list of integers sorted in ascending order, representing the intersection of `arr1` and `arr2`. If there are no common elements, return an empty list. # Example ```python >>> intersect_sorted_arrays([1, 2, 2, 3], [2, 2, 3, 4]) [2, 2, 3] >>> intersect_sorted_arrays([1, 3, 5, 7], [2, 4, 6, 8]) [] >>> intersect_sorted_arrays([], [1, 2, 3]) [] >>> intersect_sorted_arrays([1, 2, 3], []) [] ``` # Notes - Ensure your function handles edge cases such as empty input lists. - The input lists are sorted, which should help simplify the intersection process. - Follow the goal of achieving O(n + m) time complexity for efficiency. # Hints - Utilize two pointers to traverse both sorted arrays simultaneously. - Increment the pointer in the array with the smaller current element, or both pointers if the elements are equal.","solution":"def intersect_sorted_arrays(arr1, arr2): Returns the intersection of two sorted arrays. Parameters: - arr1: List[int], sorted list of integers - arr2: List[int], sorted list of integers Returns: A list containing elements that appear in both arr1 and arr2, sorted in ascending order. intersection = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: i += 1 elif arr1[i] > arr2[j]: j += 1 else: intersection.append(arr1[i]) i += 1 j += 1 return intersection"},{"question":"Write a function named `calculate_median_from_file` that reads a file containing a single integer on each line, calculates the median of the numbers, and returns the value. The function should specifically use file handling techniques as per standard Python practices. Your function should take one argument: - `file_path`: a string representing the path to the file. The function should perform the following steps: 1. Open the file in read mode. 2. Read all the integers from the file and store them in a list. 3. If the file is empty, the function should return `None`. 4. Sort the list of integers. 5. Calculate the median of the list. - If the list contains an odd number of elements, the median is the middle element. - If the list contains an even number of elements, the median is the average of the two middle elements. 6. Return the median value. Example usage: ```python # Suppose the file \'numbers.txt\' contains the following lines: # 10 # 2 # 14 # 3 # 7 print(calculate_median_from_file(\'numbers.txt\')) # Output: 7 # Suppose the file \'empty.txt\' contains no lines. print(calculate_median_from_file(\'empty.txt\')) # Output: None ```","solution":"import os def calculate_median_from_file(file_path): Reads a file containing one integer per line, calculates the median of these integers, and returns the median value. :param file_path: a string representing the path to the file. :return: the median of the numbers in the file, or None if the file is empty. if not os.path.isfile(file_path): raise FileNotFoundError(f\\"File not found: {file_path}\\") with open(file_path, \'r\') as file: numbers = [int(line.strip()) for line in file if line.strip().isdigit()] if not numbers: return None numbers.sort() n = len(numbers) mid = n // 2 if n % 2 == 0: median = (numbers[mid - 1] + numbers[mid]) / 2 else: median = numbers[mid] return median"},{"question":"** In this problem, you are required to write a Python function that finds the longest contiguous subarray that has a product less than or equal to a given threshold. The function should return the length of such a subarray. You are to write a function named `max_length_subarray_with_product(nums, threshold)`. This function will: 1. Take in a list of positive integers, `nums`, and an integer `threshold`. 2. Compute the maximum length of any contiguous subarray such that the product of its elements is less than or equal to the given `threshold`. 3. Return the length of this subarray. Function signature: ```python def max_length_subarray_with_product(nums: list[int], threshold: int) -> int: ``` **Example Usage:** Example 1: ```python nums = [10, 5, 2, 6] threshold = 100 # The longest subarray is [10, 5, 2] with product 100. print(max_length_subarray_with_product(nums, 100)) # Output: 3 ``` Example 2: ```python nums = [1, 2, 3] threshold = 0 # No valid subarray as all products are greater than 0. print(max_length_subarray_with_product(nums, 0)) # Output: 0 ``` Example 3: ```python nums = [1, 2, 3, 4] threshold = 10 # The longest subarray is [1, 2, 3] with product 6. print(max_length_subarray_with_product(nums, 10)) # Output: 3 ``` **Constraints:** - The list `nums` will have a length between 1 and 10^4. - Each element in `nums` will be between 1 and 100. - The threshold `threshold` will be a non-negative integer. **Note:** - Be mindful of the multiplication of many integers—avoid overflow issues.","solution":"def max_length_subarray_with_product(nums, threshold): Returns the length of the longest contiguous subarray with product less than or equal to the given threshold. n = len(nums) left = 0 product = 1 max_len = 0 for right in range(n): product *= nums[right] while product > threshold and left <= right: product //= nums[left] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are asked to implement a function named `generate_report` that produces a summary report from a dataset stored in a CSV file. The function should read the CSV file, process the data, and generate a report with the following details: 1. **Total number of rows**: The total count of data rows in the CSV file, excluding the header. 2. **Average value**: The average of the values in a specific column indicated by the user. 3. **Maximum and Minimum values**: The highest and lowest values in the same column. The function should be designed to handle different delimiter formats (e.g., comma, semicolon) specified by the user. The function should: 1. Accept four parameters: the path to the CSV file (`file_path`), the column name for analysis (`column_name`), and the delimiter used in the CSV file (`delimiter`), and a boolean `include_header` which specifies whether the CSV includes a header row. 2. Open and read the CSV file. 3. Calculate the total number of rows in the CSV file (excluding the header if `include_header` is True). 4. Extract the values from the specified column and compute the average, maximum, and minimum of these values. 5. Return a dictionary with the report details (`total_rows`, `average_value`, `max_value`, `min_value`). Here\'s an example usage of the function: ```python report = generate_report(\'data.csv\', \'price\', \',\', True) print(report) # Output: # { # \'total_rows\': 100, # \'average_value\': 25.4, # \'max_value\': 50.2, # \'min_value\': 5.1 # } ``` Note: Handle any potential exceptions that might occur, such as missing files, missing columns, or invalid delimiters. Provide the full implementation of the `generate_report` function.","solution":"import csv def generate_report(file_path, column_name, delimiter, include_header=True): total_rows = 0 values = [] try: with open(file_path, mode=\'r\') as file: csv_reader = csv.DictReader(file, delimiter=delimiter) if include_header else csv.reader(file, delimiter=delimiter) if not include_header: column_name_index = None for index, row in enumerate(csv_reader): if include_header: value = row[column_name] else: if column_name_index is None: column_name_index = int(column_name) value = row[column_name_index] total_rows += 1 values.append(float(value)) if total_rows == 0: return { \'total_rows\': 0, \'average_value\': 0, \'max_value\': 0, \'min_value\': 0 } average_value = sum(values) / total_rows max_value = max(values) min_value = min(values) return { \'total_rows\': total_rows, \'average_value\': average_value, \'max_value\': max_value, \'min_value\': min_value } except FileNotFoundError: raise Exception(f\\"File {file_path} not found.\\") except KeyError: raise Exception(f\\"Column name {column_name} not found in the file.\\") except ValueError: raise Exception(\\"Invalid value encountered in the data.\\") except Exception as e: raise Exception(f\\"An error occurred: {str(e)}\\")"},{"question":"You are tasked with creating a function that leverages the Pandas library to perform data manipulation on a CSV file. Write a function named `normalize_csv_column` that takes two arguments: `file_path` and `column_name`. This function should: 1. Read the CSV file specified by `file_path` into a Pandas DataFrame. 2. Normalize the specified `column_name` within the DataFrame using min-max normalization (scaling the values in the column to be between 0 and 1). 3. Replace the original column in the DataFrame with the normalized values. 4. Save the modified DataFrame back to a new CSV file named `normalized_<original_filename>.csv`, where `<original_filename>` is the name of the original file without its extension. Your implementation should make use of Pandas\' reading, writing, and DataFrame manipulation capabilities. Here\'s a template to get you started: ```python import pandas as pd def normalize_csv_column(file_path, column_name): # your code here ``` # Example Usage: Assuming you have a CSV file named `data.csv` with the following content: ``` id,value 1,10 2,20 3,30 ``` Calling `normalize_csv_column(\'data.csv\', \'value\')` should create a new file named `normalized_data.csv` with the following content: ``` id,value 1,0.0 2,0.5 3,1.0 ``` # Requirements: Please ensure that you use the following Pandas functionalities: - `pd.read_csv` - DataFrame\'s min and max methods - DataFrame\'s to_csv method Feel free to test with any CSV file.","solution":"import pandas as pd import os def normalize_csv_column(file_path, column_name): # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Perform min-max normalization min_value = df[column_name].min() max_value = df[column_name].max() df[column_name] = (df[column_name] - min_value) / (max_value - min_value) # Create a new filename based on the original file base_name = os.path.basename(file_path) name, ext = os.path.splitext(base_name) new_file_path = f\'normalized_{name}{ext}\' # Save the modified DataFrame to a new CSV file df.to_csv(new_file_path, index=False) return new_file_path # Return the new file path for convenience"},{"question":"Given a string containing digits and alphabets, create a function to check if the string is a valid license plate. A valid license plate must have: 1. Exactly 7 characters. 2. Start with 3 uppercase alphabets. 3. End with 4 digits. The function should raise a `ValueError` if the input doesn\'t meet these criteria. The function should output: bool: True if the string is a valid license plate, False otherwise. You should write self-contained code starting with: ``` def is_valid_license_plate(plate): ```","solution":"def is_valid_license_plate(plate): Check if the given string is a valid license plate. A valid license plate has: 1. Exactly 7 characters. 2. Starts with 3 uppercase alphabets. 3. Ends with 4 digits. Args: plate (str): The string to check. Returns: bool: True if the string is a valid license plate, False otherwise. if len(plate) != 7: return False if not plate[:3].isalpha() or not plate[:3].isupper(): return False if not plate[3:].isdigit(): return False return True"},{"question":"# Problem: Group Anagrams in a List of Words You are given a list of strings. Your task is to group anagrams together. An anagram is a word formed by rearranging the letters of another word, using all original letters exactly once. You must implement a function named `groupAnagrams(words)` that accomplishes this. **Function Signature**: ```python def groupAnagrams(words: List[str]) -> List[List[str]]: ``` **Parameters**: - `words` (List[str]): A list of strings. **Returns**: - A list of lists of strings, where each sublist contains words that are anagrams of each other. **Constraints**: - All input strings are in lowercase. - The number of words (`len(words)`) can be any non-negative integer. - Individual word lengths may vary but consist of only lowercase alphabetical characters. **Example**: ```python words = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] print(groupAnagrams(words)) # Should output [[\'eat\', \'tea\', \'ate\'], [\'tan\', \'nat\'], [\'bat\']] ``` **Explanation**: - \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams of each other. - \\"tan\\" and \\"nat\\" are anagrams of each other. - \\"bat\\" has no anagram in the list. # Task Implement the `groupAnagrams` function by sorting each word alphabetically and grouping the words that share the same sorted version. Use a dictionary to facilitate the grouping, where the key is the sorted tuple of the word\'s characters and the value is a list of words that have that sorted tuple. **Approach**: 1. Iterate through each word in the input list. 2. Sort the characters of the word and convert it to a tuple to use it as a key in a dictionary. 3. Group words by their sorted tuple. 4. Return the list of groups.","solution":"from typing import List from collections import defaultdict def groupAnagrams(words: List[str]) -> List[List[str]]: Groups anagrams from a list of words. Args: words (List[str]): A list of strings. Returns: List[List[str]]: A list of lists, where each sublist contains anagrams grouped together. anagram_map = defaultdict(list) for word in words: sorted_word = tuple(sorted(word)) anagram_map[sorted_word].append(word) return list(anagram_map.values())"},{"question":"You need to write a Python function that processes a list of stock prices to identify the longest increasing subsequence (LIS). The function should return both the length of the LIS and one such subsequence. The length of the list of stock prices is guaranteed to be at least one and can go up to 1000. # Function Signature ```python def longest_increasing_subsequence(prices): ``` # Inputs: - `prices`: A list of integers representing the daily stock prices. # Requirements: 1. Implement a function that takes a list of stock prices as input and returns the length of the longest increasing subsequence and one such subsequence. 2. The function should efficiently find the LIS using dynamic programming. # Output: - The function should return a tuple containing two elements: 1. An integer representing the length of the longest increasing subsequence. 2. A list of integers representing one possible longest increasing subsequence. # Example: ```python def longest_increasing_subsequence(prices): if not prices: return (0, []) lengths = [1] * len(prices) predecessors = [-1] * len(prices) for i in range(1, len(prices)): for j in range(i): if prices[i] > prices[j] and lengths[i] < lengths[j] + 1: lengths[i] = lengths[j] + 1 predecessors[i] = j max_length = max(lengths) max_index = lengths.index(max_length) lis = [] while max_index != -1: lis.append(prices[max_index]) max_index = predecessors[max_index] lis.reverse() return (max_length, lis) # Example usage prices = [10, 22, 9, 33, 21, 50, 41, 60, 80] result = longest_increasing_subsequence(prices) print(result) # Output: (6, [10, 22, 33, 50, 60, 80]) ``` # Explanation: - This function uses dynamic programming to calculate the LIS. - `lengths` array keeps track of the LIS length ending at each index. - `predecessors` array keeps track of the indices of the previous elements in the LIS. - Two nested loops compare each pair of elements and update the `lengths` and `predecessors` arrays accordingly. - The result tuple is composed of the maximum length found and the LIS created by backtracking through the `predecessors` array. This task demonstrates the application of dynamic programming to solve a common problem in stock price analysis.","solution":"def longest_increasing_subsequence(prices): if not prices: return (0, []) lengths = [1] * len(prices) predecessors = [-1] * len(prices) for i in range(1, len(prices)): for j in range(i): if prices[i] > prices[j] and lengths[i] < lengths[j] + 1: lengths[i] = lengths[j] + 1 predecessors[i] = j max_length = max(lengths) max_index = lengths.index(max_length) lis = [] while max_index != -1: lis.append(prices[max_index]) max_index = predecessors[max_index] lis.reverse() return (max_length, lis)"},{"question":"Task: Compute Longest Increasing Subsequence Using Dynamic Programming You are given a list of integers. Your task is to write a function `longest_increasing_subsequence(nums: List[int]) -> int` to compute the length of the longest increasing subsequence (LIS) in the list. The longest increasing subsequence is a subsequence of numbers where each number is larger than the previous one in the subsequence. To solve this problem, you will use dynamic programming. Requirements: 1. Create a list `dp` where `dp[i]` represents the length of the longest increasing subsequence ending at index `i`. 2. Iterate through the list and update the `dp` values by comparing the current number with all previous numbers. 3. The function should return the length of the longest increasing subsequence found. Example: ```python nums = [10, 9, 2, 5, 3, 7, 101, 18] longest_increasing_subsequence(nums) ``` The function should return `4`, since the LIS is `[2, 3, 7, 18]`. Constraints: - The list will have at least one element and at most 2500 elements. - The elements of the list are within the range `-10^4` to `10^4`. ---","solution":"from typing import List def longest_increasing_subsequence(nums: List[int]) -> int: if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are tasked with creating a function to detect if there is a loop in a given linked list. A linked list is a data structure where each node points to the next node, potentially forming a loop when a node points back to one of the earlier nodes. Your function should return `True` if a loop is detected, and `False` otherwise. Function Name: `has_cycle` **Function Signature**: ```python class ListNode: def __init__(self, x): self.val = x self.next = None def has_cycle(head: ListNode) -> bool: ``` **Input**: - `head`: The head node of a singly linked list. **Output**: - `True` if there is a cycle in the linked list, otherwise `False`. **Requirements**: - Implement an efficient solution with a time complexity of O(n) and a space complexity of O(1). **Example**: ```python # Example 1: # Create a new linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 2 (cycle) head = ListNode(1) second = ListNode(2) third = ListNode(3) fourth = ListNode(4) fifth = ListNode(5) head.next = second second.next = third third.next = fourth fourth.next = fifth fifth.next = second # creates the cycle print(has_cycle(head)) # should return True # Example 2: # Create a new linked list: 1 -> 2 -> 3 -> 4 -> 5 (no cycle) head = ListNode(1) second = ListNode(2) third = ListNode(3) fourth = ListNode(4) fifth = ListNode(5) head.next = second second.next = third third.next = fourth fourth.next = fifth print(has_cycle(head)) # should return False ``` In the first example, the linked list has a cycle that starts at node 2. Therefore, the output should be `True`. In the second example, there is no cycle, so the output should be `False`.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def has_cycle(head: ListNode) -> bool: slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"In this problem, you are required to create a simplified version of a \\"to-do list\\" application console program using Python. The application should be capable of adding tasks, listing tasks, marking tasks as completed, and removing tasks. You are required to write a class named `TodoList` that manages the to-do list. The class should include the following methods: 1. `__init__(self)`: Initializes an empty to-do list. 2. `add_task(self, task)`: Adds a new task to the list. 3. `list_tasks(self)`: Lists all tasks in the to-do list, indicating whether each task is completed or not. 4. `mark_completed(self, task_number)`: Marks a specified task as completed. `task_number` is the 1-based index of the task in the list. 5. `remove_task(self, task_number)`: Removes a specified task from the list. `task_number` is the 1-based index of the task in the list. **Class Requirements:** - You must create a class named `TodoList`. - Implement the methods as specified above. - Handle cases where invalid task numbers are provided for marking completion or removal. - Maintain an internal structure to store tasks and their completion status. Below is how you should structure your class: ```python class TodoList: def __init__(self): # Your code here def add_task(self, task): # Your code here def list_tasks(self): # Your code here def mark_completed(self, task_number): # Your code here def remove_task(self, task_number): # Your code here ``` Here is an example of potential usage of the `TodoList` class: ```python # Example usage: todo = TodoList() todo.add_task(\\"Buy groceries\\") todo.add_task(\\"Read a book\\") todo.list_tasks() # Output should list: 1. Buy groceries [ ] 2. Read a book [ ] todo.mark_completed(1) todo.list_tasks() # Output should list: 1. Buy groceries [x] 2. Read a book [ ] todo.remove_task(1) todo.list_tasks() # Output should list: 1. Read a book [ ] ```","solution":"class TodoList: def __init__(self): self.tasks = [] def add_task(self, task): self.tasks.append({\\"task\\": task, \\"completed\\": False}) def list_tasks(self): result = [] for i, task in enumerate(self.tasks): status = \\"[x]\\" if task[\\"completed\\"] else \\"[ ]\\" result.append(f\\"{i+1}. {task[\'task\']} {status}\\") return result def mark_completed(self, task_number): if 1 <= task_number <= len(self.tasks): self.tasks[task_number - 1][\\"completed\\"] = True else: raise IndexError(\\"Task number is out of range\\") def remove_task(self, task_number): if 1 <= task_number <= len(self.tasks): del self.tasks[task_number - 1] else: raise IndexError(\\"Task number is out of range\\")"},{"question":"You are required to implement a function that processes a list of transactions and returns a summary of balances for each user. Each transaction represents a transfer of money between two users. Function Specification Create a function called `summarize_balances(transactions_list)` which does the following: 1. **Inputs**: - `transactions_list`: A list of lists where each inner list contains three elements `[user_from, user_to, amount]` - `user_from`: A string representing the user who sends money. - `user_to`: A string representing the user who receives money. - `amount`: A float representing the amount of money transferred from `user_from` to `user_to`. 2. **Functional Requirements**: - Calculate the net balance for each user based on the transactions. - Subtract the `amount` from the balance of `user_from`. - Add the `amount` to the balance of `user_to`. - Return the resulting balances in the form of a dictionary where the keys are user names and the values are their respective net balances. 3. **Output**: - Returns a dictionary with keys as user names and values as floats representing their net balances. Here is the template for the function: ```python def summarize_balances(transactions_list): balances = {} for transaction in transactions_list: user_from, user_to, amount = transaction if user_from in balances: balances[user_from] -= amount else: balances[user_from] = -amount if user_to in balances: balances[user_to] += amount else: balances[user_to] = amount return balances ``` # Example ```python transactions = [ [\\"Alice\\", \\"Bob\\", 50.0], [\\"Bob\\", \\"Charlie\\", 25.0], [\\"Alice\\", \\"Charlie\\", 30.0] ] print(summarize_balances(transactions)) ``` **Output**: ``` { \\"Alice\\": -80.0, \\"Bob\\": 25.0, \\"Charlie\\": 55.0 } ``` In this example, Alice sends 50.0 to Bob and 30.0 to Charlie, so her balance is -80.0. Bob sends 25.0 to Charlie, so his net balance is 25.0. Charlie receives 25.0 from Bob and 30.0 from Alice, so his balance is 55.0.","solution":"def summarize_balances(transactions_list): balances = {} for transaction in transactions_list: user_from, user_to, amount = transaction if user_from in balances: balances[user_from] -= amount else: balances[user_from] = -amount if user_to in balances: balances[user_to] += amount else: balances[user_to] = amount return balances"},{"question":"You are required to implement a function `replace_missing_values` that replaces missing values in a dataset with the mean of the respective column. For the purpose of this question, a missing value is denoted by `None` (Python\'s `NoneType`). Your function should handle input in the form of a 2D list where each sub-list (inner list) represents a record, and each item within the sub-list represents a feature. # Function Signature ```python def replace_missing_values(data: List[List[Optional[float]]]) -> List[List[float]]: ``` # Parameters - `data` (`List[List[Optional[float]]]`): A 2D list where each sub-list is a record that may contain numerical values or `None`. # Returns - `List[List[float]]`: A 2D list where all `None` values in each column have been replaced by the mean of their respective column. # Requirements - Calculate the mean of columns that contain `None` values, ignoring those `None` values for the mean calculation. - Replace all `None` values in the dataset with the calculated mean for that column. - Use only Python standard library functions and classes. # Example Usage ```python data = [ [1.0, 2.0, None], [2.0, None, 3.0], [None, 4.0, None] ] cleaned_data = replace_missing_values(data) print(cleaned_data) ``` # Expected Output for Example: ``` [[1.0, 2.0, 3.0], [2.0, 3.0, 3.0], [1.5, 4.0, 3.0]] ``` # Notes - You may assume that the `data` will always have at least one column and one row. - Handle cases where all values in a column are `None` by replacing them with `0`.","solution":"from typing import List, Optional def replace_missing_values(data: List[List[Optional[float]]]) -> List[List[float]]: if not data or not data[0]: return data # Return the same if input data is empty num_rows = len(data) num_cols = len(data[0]) # Initialize a list to keep sum of values and count of non-None values for each column sums = [0.0] * num_cols counts = [0] * num_cols # Calculate the sum and count of valid (non-None) values in each column for row in data: for col_index, value in enumerate(row): if value is not None: sums[col_index] += value counts[col_index] += 1 # Calculate means, handle the case where a column has only None values means = [] for i in range(num_cols): if counts[i] == 0: means.append(0) # replace with 0 if all values are None else: means.append(sums[i] / counts[i]) # Replace None values with the column means new_data = [] for row in data: new_row = [] for col_index, value in enumerate(row): if value is None: new_row.append(means[col_index]) else: new_row.append(value) new_data.append(new_row) return new_data"},{"question":"The finance department at a company is analyzing the monthly expenses and wants to categorize the expenditure based on given limits. You need to write a function called `categorize_expenses()` that accepts a list of integers representing monthly expenses and returns a list of strings categorizing each expense as `\\"Low\\"`, `\\"Medium\\"`, `\\"High\\"`, or `\\"Critical\\"` based on the following limits: - `\\"Low\\"`: Expenses less than 100. - `\\"Medium\\"`: Expenses from 100 to less than 500. - `\\"High\\"`: Expenses from 500 to less than 1000. - `\\"Critical\\"`: Expenses 1000 and above. **Function Signature:** ```python def categorize_expenses(expenses: list) -> list: pass ``` **Instructions:** 1. Define the function `categorize_expenses()` that takes a list of integers `expenses`. 2. Iterate through the list and categorize each expense according to the given limits. 3. Return a list of strings showing the category for each expense. **Example:** Given the following list of expenses: ```python expenses = [50, 150, 550, 1200, 450, 950] ``` Calling the function: ```python categorized = categorize_expenses(expenses) print(categorized) ``` Should result in the following output: ```python [\'Low\', \'Medium\', \'High\', \'Critical\', \'Medium\', \'High\'] ``` The function should handle the list of expenses properly and return the expected categories without errors.","solution":"def categorize_expenses(expenses: list) -> list: categories = [] for expense in expenses: if expense < 100: categories.append(\\"Low\\") elif 100 <= expense < 500: categories.append(\\"Medium\\") elif 500 <= expense < 1000: categories.append(\\"High\\") else: categories.append(\\"Critical\\") return categories"},{"question":"You are given a weather dataset containing daily temperature readings for various cities over multiple years. Your task is to write a function `average_temp_by_city_and_month` that processes this data to calculate the average temperature for a specific city and month. The function should use Python\'s `csv` module to read the data. 1. **Function Name**: `average_temp_by_city_and_month` 2. **Parameters**: - `weather_filepath` (str): The path to the weather CSV file containing the data. - `city` (str, default \'New York\'): The name of the city for which you want to calculate the average temperature. - `month` (int, default 1): The month (1 for January, 2 for February, etc.) for which you want to filter the data. 3. **Return**: The function should return the average temperature as a floating-point number for the specified city and month. Here is the structure you should follow: ```python import csv def average_temp_by_city_and_month(weather_filepath, city=\'New York\', month=1): Returns the average temperature for the selected city and month. weather_filepath --- weather file path with multi-city and multi-year data city --- city for which data is extracted month --- month for which data is extracted (1 for January, 2 for February, etc.) # Your implementation here ``` **Example of CSV data**: ```csv date,city,temperature 2020-01-01,New York,5.3 2020-01-02,New York,3.8 2020-02-01,New York,8.1 2019-01-01,Los Angeles,15.2 2019-01-02,Los Angeles,16.8 2020-01-01,Chicago,-3.1 ... ``` **Usage Example**: ```python avg_temp = average_temp_by_city_and_month(\'path_to_weather.csv\', city=\'New York\', month=1) print(avg_temp) # Output should be the average temperature for New York in January, e.g., # 4.55 ```","solution":"import csv from datetime import datetime def average_temp_by_city_and_month(weather_filepath, city=\'New York\', month=1): Returns the average temperature for the selected city and month. weather_filepath --- weather file path with multi-city and multi-year data city --- city for which data is extracted month --- month for which data is extracted (1 for January, 2 for February, etc.) total_temp = 0 count = 0 with open(weather_filepath, \'r\') as file: reader = csv.DictReader(file) for row in reader: row_date = datetime.strptime(row[\'date\'], \'%Y-%m-%d\') row_month = row_date.month if row[\'city\'] == city and row_month == month: total_temp += float(row[\'temperature\']) count += 1 return total_temp / count if count > 0 else 0.0"},{"question":"You are tasked with creating a function that calculates the intersection of two sets of integers and returns it as a list of integers. The goal is to practice set operations and list manipulation in Python. # Function Specification: **Function Name:** `intersection_of_sets` **Parameters:** 1. `set1` (set of int): The first set of integers. 2. `set2` (set of int): The second set of integers. **Return:** A list of integers representing the intersection of the two sets. # Expected Behavior: - The function should use set intersection operations to find the common elements between `set1` and `set2`. - The resulting list should be sorted in ascending order. # Example: ```python # Find the intersection of two sets {1, 2, 3} and {2, 3, 4} result = intersection_of_sets({1, 2, 3}, {2, 3, 4}) print(result) # Output: [2, 3] ``` # Additional Information: - Ensure the function operates correctly with empty sets. - The function should not modify the original input sets. - Handle typical edge cases, such as disjoint sets or identical sets.","solution":"def intersection_of_sets(set1, set2): Returns a sorted list of integers representing the intersection of two sets of integers. Parameters: set1 (set of int): The first set of integers. set2 (set of int): The second set of integers. Returns: list of int: The sorted list of common elements between set1 and set2. # Find the intersection of the two sets intersection = set1.intersection(set2) # Convert the intersection set to a sorted list return sorted(list(intersection))"},{"question":"In the context of financial trading, one common task is to determine the best times to buy and sell a stock to maximize profit. Given historical daily prices for a stock, implement a function that finds the best day to buy and the best day to sell. Write a Python function named `max_profit(prices)`, which takes a list of historical daily prices, where each element represents the stock price on a given day. The function should return a tuple with the indices of the buy and sell days that yield the maximum profit. The steps to implement the function are: 1. If the list of prices is empty or contains only one price, return `(-1, -1)` indicating that no trade can be made. 2. Initialize variables to track the minimum price seen so far, the maximum profit, and the best buy and sell days. 3. Iterate through the prices: - Update the minimum price and the corresponding day if a lower price is found. - Compute the potential profit for selling on the current day. - Update the maximum profit and the corresponding buy and sell days if the potential profit is greater than the current maximum profit. 4. Return a tuple with the indices of the best buy and sell days. Example: ```python def max_profit(prices): if len(prices) < 2: return (-1, -1) min_price = prices[0] min_day = 0 max_profit = 0 best_buy_day = 0 best_sell_day = 0 for current_day in range(1, len(prices)): if prices[current_day] < min_price: min_price = prices[current_day] min_day = current_day current_profit = prices[current_day] - min_price if current_profit > max_profit: max_profit = current_profit best_buy_day = min_day best_sell_day = current_day if max_profit == 0: return (-1, -1) return (best_buy_day, best_sell_day) # Example usage: # prices = [7, 1, 5, 3, 6, 4] # max_profit(prices) should return (1, 4) ```","solution":"def max_profit(prices): if len(prices) < 2: return (-1, -1) min_price = prices[0] min_day = 0 max_profit = 0 best_buy_day = 0 best_sell_day = 0 for current_day in range(1, len(prices)): if prices[current_day] < min_price: min_price = prices[current_day] min_day = current_day current_profit = prices[current_day] - min_price if current_profit > max_profit: max_profit = current_profit best_buy_day = min_day best_sell_day = current_day if max_profit == 0: return (-1, -1) return (best_buy_day, best_sell_day) # Example usage: # prices = [7, 1, 5, 3, 6, 4] # max_profit(prices) should return (1, 4)"},{"question":"You are asked to write a function called `find_max_min` that accepts a list of integers and returns both the maximum and minimum values from the list. The function should: 1. Handle the case when the list is empty by raising a `ValueError`. 2. Traverse the list only once to find both the maximum and minimum values. 3. Return a tuple containing the maximum and minimum values in that order. Function Signature ```python def find_max_min(numbers: list) -> tuple: pass ``` # Example Usage ```python result = find_max_min([3, 5, 1, 2, 9, 7]) print(\\"Max and Min:\\", result) empty_result = find_max_min([]) # Raises ValueError ``` # Expected Output ``` Max and Min: (9, 1) Traceback (most recent call last): ... ValueError: Empty list has no maximum or minimum values ``` # Assumptions - The input list contains only integer elements. - If the list is empty, a `ValueError` is raised with a specific message.","solution":"def find_max_min(numbers: list) -> tuple: This function accepts a list of integers and returns a tuple containing the maximum and minimum values from the list. :param numbers: List of integers :return: Tuple containing the maximum and minimum values :raises: ValueError if the list is empty if not numbers: raise ValueError(\'Empty list has no maximum or minimum values\') max_val = min_val = numbers[0] for num in numbers: if num > max_val: max_val = num if num < min_val: min_val = num return (max_val, min_val)"},{"question":"**Problem: Implement a Simple Spreadsheet in Python** You are tasked with creating a Python class representing a simple spreadsheet. The class should be named `Spreadsheet` and should implement the following methods: 1. `__init__(self, rows, cols)`: Initializes the spreadsheet with the given number of rows and columns. Each cell should be initialized to the value `0`. 2. `set_value(self, row, col, value)`: Sets the value of the cell at the given row and column to `value`. 3. `get_value(self, row, col)`: Returns the value of the cell at the given row and column. 4. `sum_range(self, start_row, start_col, end_row, end_col)`: Returns the sum of all values in the rectangular range specified by the top-left corner `(start_row, start_col)` and the bottom-right corner `(end_row, end_col)`. Assume that row and column indices are 0-based, and values entered in cells can be integers only. **Example Usage:** ```python class Spreadsheet: def __init__(self, rows, cols): # your implementation here def set_value(self, row, col, value): # your implementation here def get_value(self, row, col): # your implementation here def sum_range(self, start_row, start_col, end_row, end_col): # your implementation here # Example calls spreadsheet = Spreadsheet(3, 4) spreadsheet.set_value(0, 0, 5) spreadsheet.set_value(1, 1, 3) spreadsheet.set_value(2, 2, 10) print(spreadsheet.get_value(0, 0)) # Output: 5 print(spreadsheet.sum_range(0, 0, 1, 1)) # Output: 8 print(spreadsheet.sum_range(0, 0, 2, 2)) # Output: 18 ``` Ensure that your implementation correctly initializes the spreadsheet, sets and retrieves values, and computes the sum of values in the specified range accurately.","solution":"class Spreadsheet: def __init__(self, rows, cols): self.rows = rows self.cols = cols self.data = [[0 for _ in range(cols)] for _ in range(rows)] def set_value(self, row, col, value): self.data[row][col] = value def get_value(self, row, col): return self.data[row][col] def sum_range(self, start_row, start_col, end_row, end_col): total_sum = 0 for r in range(start_row, end_row + 1): for c in range(start_col, end_col + 1): total_sum += self.data[r][c] return total_sum"},{"question":"In a Python class for managing a collection of intervals (ranges), implement a method to merge overlapping intervals. Each interval is represented as a tuple of two integers (start, end). Ensure your class handles intervals efficiently and provides merging functionality as described. Function Signature: `class IntervalCollection: def __init__(self, intervals: List[Tuple[int, int]]) -> None def merge_intervals(self) -> List[Tuple[int, int]]` # Inputs: - An instance of `IntervalCollection` is initialized with a list of tuples, where each tuple represents an interval with a start and end point. # Output: - The `merge_intervals` method returns a list of merged intervals, such that no two intervals in the list overlap. # Constraints: - Each tuple (interval) has (start leq end). - (1 leq text{number of intervals} leq 10^5). - Each start and end point is an integer in the range ([-10^9, 10^9]). # Example: ```python ic = IntervalCollection([(1, 3), (2, 6), (8, 10), (15, 18)]) print(ic.merge_intervals()) # Expected output: [(1, 6), (8, 10), (15, 18)] ``` # Description of Example: In the given list of intervals, the intervals (1, 3) and (2, 6) overlap and are merged into (1, 6). The resulting list of non-overlapping intervals is [(1, 6), (8, 10), (15, 18)]. # Educational Goal: This problem aims to develop skills in class design and implementation, efficient interval merging algorithms, and understanding of sorting and merging techniques to handle interval overlaps.","solution":"from typing import List, Tuple class IntervalCollection: def __init__(self, intervals: List[Tuple[int, int]]) -> None: Initialize the collection with a list of intervals. self.intervals = intervals def merge_intervals(self) -> List[Tuple[int, int]]: Merges overlapping intervals and returns a list of non-overlapping intervals. if not self.intervals: return [] # Sort intervals based on the starting point of each interval self.intervals.sort(key=lambda x: x[0]) merged = [self.intervals[0]] for current in self.intervals[1:]: last_merged = merged[-1] # If the current interval overlaps with the last merged interval, merge them if current[0] <= last_merged[1]: merged[-1] = (last_merged[0], max(last_merged[1], current[1])) else: merged.append(current) return merged"},{"question":"You are tasked with creating a Python function that generates a 1D Low-pass Butterworth filter response. This type of filter is often used in signal processing to remove high-frequency noise from signals. The filter response is determined by several parameters, including the cutoff frequency, the order of the filter, and the total length of the signal. Your function should be named `butterworth_lowpass` and should use the `numpy` library to perform mathematical operations, specifically using `numpy.fft.fftfreq` and `numpy.fft.fftshift` as described in the provided documentation. The function\'s parameters are specified below: - `cutoff` (float): The cutoff frequency of the low-pass filter. - `order` (int): The order of the Butterworth filter, which determines the sharpness of the filter’s transition band. - `length` (int): The total length of the signal. The function should return a 1D NumPy array of length `length` representing the magnitude response of the Butterworth filter. ```python def butterworth_lowpass(cutoff=0.25, order=1, length=128): pass ``` Ensure that the implementation utilizes the following `numpy` functions: `numpy.fft.fftfreq` and `numpy.fft.fftshift`.","solution":"import numpy as np def butterworth_lowpass(cutoff=0.25, order=1, length=128): Generate a 1D Low-pass Butterworth filter response. Parameters: cutoff (float): The cutoff frequency of the low-pass filter. order (int): The order of the Butterworth filter. length (int): The total length of the signal. Returns: numpy.ndarray: The magnitude response of the Butterworth filter. # Generate frequency bins freqs = np.fft.fftfreq(length) # Shift zero frequency component to the center freqs = np.fft.fftshift(freqs) # Calculate the Butterworth filter response response = 1 / (1 + (freqs / cutoff)**(2 * order)) return response"},{"question":"You are tasked with creating a class called `WeatherDataAnalyzer` that processes and analyzes weather data from a given CSV file. The class should provide several functionalities aimed at extracting and summarizing weather information. Here\'s a breakdown of the requirements: 1. **Class Methods**: - `__init__(self, filepath)`: The constructor, which initializes the class with the path to the CSV file containing weather data. The constructor should read the CSV file and store the data in a Pandas DataFrame. - `get_average_temperature(self, month)`: This method should return the average temperature for a given month. The `month` parameter is an integer (1 for January, 2 for February, etc.). - `get_maximum_temperature(self)`: This method should return the highest temperature recorded in the dataset. - `get_minimum_temperature(self)`: This method should return the lowest temperature recorded in the dataset. 2. **CSV File Structure**: - The CSV file contains daily weather records with columns: `date`, `temperature`, `humidity`, and `precipitation`. - The `date` column stores the date in the format `YYYY-MM-DD`. - The `temperature` column stores the daily temperature. 3. **Input/Output**: - Assume the CSV file is well-formatted and contains no missing values. **Class Signature**: ```python import pandas as pd class WeatherDataAnalyzer: def __init__(self, filepath): pass def get_average_temperature(self, month): pass def get_maximum_temperature(self): pass def get_minimum_temperature(self): pass ``` **Example**: ```python # Assume we have a CSV file named \\"weather_data.csv\\" with appropriate columns. # Initialize the WeatherDataAnalyzer with the CSV file path analyzer = WeatherDataAnalyzer(\\"weather_data.csv\\") # Get the average temperature for July (7th month) average_temp_july = analyzer.get_average_temperature(7) print(f\\"Average temperature in July: {average_temp_july}\\") # Get the maximum temperature recorded max_temp = analyzer.get_maximum_temperature() print(f\\"Maximum temperature recorded: {max_temp}\\") # Get the minimum temperature recorded min_temp = analyzer.get_minimum_temperature() print(f\\"Minimum temperature recorded: {min_temp}\\") ``` **Expected Output**: - The output will depend on the actual data in \\"weather_data.csv\\". Ensure correctness by verifying the computations on different sample datasets.","solution":"import pandas as pd class WeatherDataAnalyzer: def __init__(self, filepath): self.data = pd.read_csv(filepath) self.data[\'date\'] = pd.to_datetime(self.data[\'date\']) def get_average_temperature(self, month): filtered_data = self.data[self.data[\'date\'].dt.month == month] return filtered_data[\'temperature\'].mean() def get_maximum_temperature(self): return self.data[\'temperature\'].max() def get_minimum_temperature(self): return self.data[\'temperature\'].min()"},{"question":"In this problem, you are required to implement a function that computes the Euclidean distance between two points in a multi-dimensional space. The Euclidean distance between two points ( x ) and ( y ) in an n-dimensional space is calculated as: [ d(x, y) = sqrt{sum_{i=1}^{n} (x_i - y_i)^2} ] Where ( x_i ) and ( y_i ) are the coordinates of the points in the ith dimension. The function you need to implement is: ```python def calc_euclidean_distance(point1, point2): Calculate the Euclidean distance between two points in an n-dimensional space. Parameters: - point1: numpy array, coordinates of the first point. - point2: numpy array, coordinates of the second point. Returns: - float: the Euclidean distance between `point1` and `point2`. ``` **Guidelines:** 1. You are required to use NumPy\'s functions `numpy.sqrt` and `numpy.sum` in your implementation. 2. Assume these arrays `point1` and `point2` have the same shape. 3. The function should return a single floating-point number representing the Euclidean distance. 4. Remember to import the NumPy library at the beginning of your solution.","solution":"import numpy as np def calc_euclidean_distance(point1, point2): Calculate the Euclidean distance between two points in an n-dimensional space. Parameters: - point1: numpy array, coordinates of the first point. - point2: numpy array, coordinates of the second point. Returns: - float: the Euclidean distance between `point1` and `point2`. return np.sqrt(np.sum((point1 - point2) ** 2))"},{"question":"Design an application that computes the shortest path in an undirected weighted graph. You will need to implement Dijkstra\'s algorithm to determine the shortest path from a given source node to all other nodes in the graph. # Function Signature: ```python def dijkstra_shortest_path(graph: Dict[int, List[Tuple[int, int]]], source: int) -> Dict[int, int]: pass ``` - **graph**: A dictionary where the keys are node identifiers (integers) and the values are lists of tuples. Each tuple consists of a neighboring node and the weight of the edge connecting to that neighbor (e.g., `{0: [(1, 4), (2, 1)], 1: [(2, 2), (3, 5)], ...}`). - **source**: An integer representing the source node from which the shortest paths will be calculated. # Instructions: 1. Implement Dijkstra\'s algorithm to calculate the shortest path from the source node to all other nodes. 2. The function should return a dictionary where the keys are nodes and the values are the shortest distance from the source node to that key node. 3. Use a priority queue (such as `heapq` in Python) to efficiently retrieve the next node with the shortest known distance. # Example Usage: Given `graph`: ```python graph = { 0: [(1, 4), (2, 1)], 1: [(2, 2), (3, 5)], 2: [(3, 8)], 3: [] } ``` ```python distances = dijkstra_shortest_path(graph, 0) print(distances) ``` # Expected Output: ``` {0: 0, 1: 4, 2: 1, 3: 9} ``` # Additional Context: - The graph is guaranteed to be connected and the weights are non-negative. - Consider edge cases such as when the graph has only one node or when all edges have the same weight. - Ensure that your solution efficiently handles graphs with a large number of nodes and edges.","solution":"import heapq from typing import Dict, List, Tuple def dijkstra_shortest_path(graph: Dict[int, List[Tuple[int, int]]], source: int) -> Dict[int, int]: Function to compute the shortest path in an undirected weighted graph using Dijkstra\'s algorithm. Parameters: graph (Dict[int, List[Tuple[int, int]]]): A dictionary where keys are node identifiers and values are lists of tuples. Each tuple consists of a neighboring node and the weight of the edge connecting to that neighbor. source (int): An integer representing the source node from which the shortest paths will be calculated. Returns: Dict[int, int]: A dictionary where the keys are nodes and the values are the shortest distance from the source node to that key node. # Priority queue to store (distance, node) tuples pq = [(0, source)] # Dictionary to store the shortest distance to each node distances = {node: float(\'inf\') for node in graph} distances[source] = 0 while pq: current_distance, current_node = heapq.heappop(pq) # If the current distance is greater than the recorded distance, we can skip processing the node if current_distance > distances[current_node]: continue # Process each neighbor of the current node for neighbor, weight in graph[current_node]: distance = current_distance + weight # If a shorter path to the neighbor is found if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances"},{"question":"Write a function named `find_majority_element(nums: List[int]) -> int` that detects the majority element in a list of integers. The majority element is the element that appears more than half the times in the list. It is guaranteed that such an element exists in the list. The requirements for the function are as follows: - Implement the Boyer-Moore Voting Algorithm to identify the majority element. - The function should have a time complexity of O(n) and use O(1) extra space. Example: ```python find_majority_element([3, 2, 3]) ``` Output: ```plaintext 3 ``` Example: ```python find_majority_element([2, 2, 1, 1, 1, 2, 2]) ``` Output: ```plaintext 2 ``` Hints: - The Boyer-Moore Voting Algorithm works by maintaining a counter and a candidate for the majority element. - Traverse the list, adjusting the counter based on whether the current element matches the candidate. - When the counter reaches zero, select the current element as the new candidate.","solution":"from typing import List def find_majority_element(nums: List[int]) -> int: Returns the majority element in the list nums. The majority element is the element that appears more than half the time. It is guaranteed that such an element exists. candidate = None count = 0 for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"Create a function named `find_largest_square` that takes a list of integers as input and returns the largest perfect square number from the list. If there are no perfect squares in the list, the function should return `-1`. A perfect square is an integer that is the square of an integer (e.g., 1, 4, 9, 16, etc.). Function Signature: ```python def find_largest_square(numbers: list) -> int: pass ``` Examples: ```python print(find_largest_square([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Example output: 9 print(find_largest_square([10, 20, 30, 40])) # Example output: -1 print(find_largest_square([16, 25, 36, 49, 64])) # Example output: 64 print(find_largest_square([50, 30, 45])) # Example output: -1 ``` **Note**: Ensure that the function correctly identifies and returns the largest perfect square from the list, or `-1` if none exist.","solution":"import math def find_largest_square(numbers: list) -> int: Returns the largest perfect square number from the list. If there are no perfect squares, return -1. perfect_squares = [num for num in numbers if math.isqrt(num) ** 2 == num] return max(perfect_squares, default=-1)"},{"question":"You are asked to create a function `track_stock_prices` that records and analyzes stock price changes for a given list of companies over a specified period. The function will utilize the `pandas` library for data handling and analysis. The function should be capable of ingesting data, performing basic computations, and filtering based on user-defined criteria. Here is a more detailed breakdown of what your function should accomplish: 1. **Loading Data**: Initialize data for companies using randomly generated prices or a predefined dataset. The data should include columns for \'Date\', \'Company\', and \'Price\'. 2. **User Input**: The function should prompt the user for: - A company name from the available list of companies. - A date range (start date and end date) to filter the stock prices. 3. **Filtering Data**: Filter the data based on the user-specified company and date range: - Ensure the date range is correctly parsed and applied to filter the DataFrame. - Ensure the company name filtering is applied correctly within the specified date range. 4. **Basic Analysis**: Perform basic calculations such as: - The average stock price over the given period. - The highest and lowest stock prices within the period. - The percentage change in stock price from the start to the end of the period. 5. **Return Results**: Return a dictionary containing the filtered data and the calculated metrics. **Function Signature**: ```python def track_stock_prices(): ``` **Example**: ```python >>> result = track_stock_prices() Enter company name: Tesla Enter start date (YYYY-MM-DD): 2023-01-01 Enter end date (YYYY-MM-DD): 2023-03-31 # Outputs a dictionary with filtered DataFrame and calculated metrics ``` Here\'s a sample dataset which you can generate or use for testing, with random values or realistic simulated values: ```python data = { \'Date\': pd.date_range(start=\'2023-01-01\', end=\'2023-12-31\', freq=\'D\').tolist(), \'Company\': [\'Tesla\']*365 + [\'Apple\']*365 + [\'Microsoft\']*365, \'Price\': np.random.rand(1095) * 1000 # Assume generating random stock prices } df = pd.DataFrame(data) ``` **Expected Output**: A dictionary containing: - The filtered DataFrame based on the user input. - The average stock price during the specified period. - The highest stock price within the period. - The lowest stock price within the period. - The percentage change in stock price from the start to the end of the period.","solution":"import pandas as pd import numpy as np from datetime import datetime def track_stock_prices(): # Generating sample dataset dates = pd.date_range(start=\'2023-01-01\', end=\'2023-12-31\', freq=\'D\') data = { \'Date\': np.concatenate([dates, dates, dates]), \'Company\': [\'Tesla\'] * len(dates) + [\'Apple\'] * len(dates) + [\'Microsoft\'] * len(dates), \'Price\': np.random.rand(len(dates) * 3) * 1000 } df = pd.DataFrame(data) # User input for company name and date range company = input(\\"Enter company name: \\") start_date = input(\\"Enter start date (YYYY-MM-DD): \\") end_date = input(\\"Enter end date (YYYY-MM-DD): \\") # Convert date input to datetime start_datetime = datetime.strptime(start_date, \'%Y-%m-%d\') end_datetime = datetime.strptime(end_date, \'%Y-%m-%d\') # Filter data based on user input filtered_data = df[ (df[\'Company\'] == company) & (df[\'Date\'] >= start_datetime) & (df[\'Date\'] <= end_datetime) ] if filtered_data.empty: return f\\"No data available for {company} between {start_date} and {end_date}\\" # Perform basic analysis avg_price = filtered_data[\'Price\'].mean() max_price = filtered_data[\'Price\'].max() min_price = filtered_data[\'Price\'].min() percentage_change = ((filtered_data.iloc[-1][\'Price\'] - filtered_data.iloc[0][\'Price\']) / filtered_data.iloc[0][\'Price\']) * 100 result = { \\"filtered_data\\": filtered_data, \\"average_price\\": avg_price, \\"highest_price\\": max_price, \\"lowest_price\\": min_price, \\"percentage_change\\": percentage_change } return result"},{"question":"You are tasked with creating a function `rotate_2d_array` that rotates a given 2D array (matrix) 90 degrees clockwise. The function should accept one parameter: - `matrix` (List[List[int]]): A 2D list of integers representing the matrix to be rotated. The function should return a new 2D list representing the rotated matrix. Assume the input matrix is non-empty and square (i.e., it has the same number of rows and columns). Here is the function signature you need to implement: ```python def rotate_2d_array(matrix: List[List[int]]) -> List[List[int]]: Rotates the given 2D matrix 90 degrees clockwise. Args: matrix (List[List[int]]): A 2D list representing the matrix to rotate. Returns: List[List[int]]: A new 2D list that represents the rotated matrix. ``` Ensure your solution handles the rotation correctly and returns a new 2D list without modifying the original matrix.","solution":"from typing import List def rotate_2d_array(matrix: List[List[int]]) -> List[List[int]]: Rotates the given 2D matrix 90 degrees clockwise. Args: matrix (List[List[int]]): A 2D list representing the matrix to rotate. Returns: List[List[int]]: A new 2D list that represents the rotated matrix. n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"You are tasked with implementing a K-Nearest Neighbors (KNN) algorithm for classifying points in a 2D plane. The main function, `classify_points()`, provided below will read point data from a CSV file and use KNN to classify a set of given points. Specifically, you need to complete the following: 1. Implement the function `euclidean_distance(point1, point2)` that computes the Euclidean distance between two points. 2. Implement the function `get_neighbors(training_set, test_point, k)` that identifies the `k` nearest neighbors to a `test_point` from the `training_set`. 3. Implement the function `predict_classification(training_set, test_point, k)` that predicts the class of a `test_point` based on the majority class of its `k` nearest neighbors. CSV file (points.csv) format: ``` x,y,class 2.7810836,2.550537003,0 1.465489372,2.362125076,0 3.396561688,4.400293529,0 1.38807019,1.850220317,0 3.06407232,3.005305973,0 7.627531214,2.759262235,1 5.332441248,2.088626775,1 6.922596716,1.77106367,1 8.675418651,-0.242068655,1 7.673756466,3.508563011,1 ``` Requirements: 1. Implement the `euclidean_distance` function to calculate the distance between two points in 2D space. 2. Implement the `get_neighbors` function to find the k-nearest neighbors of a given test point. 3. Implement the `predict_classification` function to determine the most common class among the neighbors. 4. Use the `numpy` library for numerical computations and the `collections` library for counting. **Function Signature:** 1. `euclidean_distance(point1: Tuple[float, float], point2: Tuple[float, float]) -> float` 2. `get_neighbors(training_set: List[Tuple[float, float, int]], test_point: Tuple[float, float], k: int) -> List[Tuple[float, float, int]]` 3. `predict_classification(training_set: List[Tuple[float, float, int]], test_point: Tuple[float, float], k: int) -> int` **Example Output:** ``` [[\'x\', \'y\', \'class\'] [2.7810836, 2.550537003, 0] [1.465489372, 2.362125076, 0] [3.396561688, 4.400293529, 0] [1.38807019, 1.850220317, 0] [3.06407232, 3.005305973, 0] [7.627531214, 2.759262235, 1] [5.332441248, 2.088626775, 1] [6.922596716, 1.77106367, 1] [8.675418651, -0.242068655, 1] [7.673756466, 3.508563011, 1]] 10 - number of training examples Test Point: [4.0, 3.0] Predicted Class: 0 ```","solution":"import numpy as np from collections import Counter import csv def euclidean_distance(point1, point2): Calculate the Euclidean distance between two points in a 2D space. Args: point1: Tuple[float, float], the first point point2: Tuple[float, float], the second point Returns: float, the Euclidean distance between the two points return np.sqrt(np.sum(np.square(np.array(point1) - np.array(point2)))) def get_neighbors(training_set, test_point, k): Locate the k-nearest neighbors of a test point from a training set. Args: training_set: List[Tuple[float, float, int]], list of the training points and their classes test_point: Tuple[float, float], the point to evaluate k: int, the number of neighbors to find Returns: List[Tuple[float, float, int]], the k nearest neighbors distances = [] for train_point in training_set: dist = euclidean_distance(test_point, train_point[:2]) distances.append((train_point, dist)) distances.sort(key=lambda x: x[1]) neighbors = [distances[i][0] for i in range(k)] return neighbors def predict_classification(training_set, test_point, k): Predict the class of a test point based on k-nearest neighbors. Args: training_set: List[Tuple[float, float, int]], list of the training points and their classes test_point: Tuple[float, float], the point to classify k: int, the number of neighbors to consider Returns: int, the predicted class neighbors = get_neighbors(training_set, test_point, k) output_classes = [neighbor[2] for neighbor in neighbors] prediction = Counter(output_classes).most_common(1)[0][0] return prediction"},{"question":"You are tasked with creating a function `transpose_matrix(matrix)` that takes a two-dimensional list (a list of lists) representing a matrix and returns its transpose. The transpose of a matrix is obtained by swapping the rows and columns, essentially flipping it over its diagonal. For example, the element at position (1,2) in the original matrix will be at position (2,1) in the transposed matrix. Implement the function with the following signature: ```python def transpose_matrix(matrix): pass ``` **Function Explanation:** - `transpose_matrix(matrix)`: Takes a 2D list `matrix` and returns its transpose as a new 2D list. **Constraints:** - The width and height of the matrix can be different. - You can assume that the input matrix is well-formed and contains at least one row and one column. **Example Usage:** ```python matrix = [ [1, 2, 3], [4, 5, 6] ] print(transpose_matrix(matrix)) # Output: [[1, 4], [2, 5], [3, 6]] matrix = [ [1, 2], [3, 4], [5, 6] ] print(transpose_matrix(matrix)) # Output: [[1, 3, 5], [2, 4, 6]] matrix = [[7]] print(transpose_matrix(matrix)) # Output: [[7]] ```","solution":"def transpose_matrix(matrix): Returns the transpose of the input matrix. Args: matrix (list of list of int): The matrix to transpose. Returns: list of list of int: The transposed matrix. return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]"},{"question":"A retail store wants to determine which items are most frequently purchased together. The store maintains a database of transactions where each transaction is a list of items purchased in that transaction. You are asked to implement a function `findFrequentItemsets(transactions, min_support)` that accepts a list of transactions and an integer `min_support`. The function should return a list of itemsets where each itemset appears in the transactions at least `min_support` times. An itemset can be of any size (2 or more items). **Function Signature** ```python def findFrequentItemsets(transactions, min_support): pass ``` **Constraints** - Each transaction is a list of strings where each string represents an item. - `min_support` is an integer greater than 0. - The function should use combinations from itertools to generate possible itemsets and collections.Counter to count their frequencies. **Example** ```python # Input transactions = [ [\'bread\', \'milk\', \'butter\'], [\'bread\', \'butter\'], [\'milk\', \'butter\'], [\'bread\', \'milk\'] ] min_support = 2 # Expected Output # Frequent itemsets with min_support of 2: # [(\'bread\', \'milk\'), (\'bread\', \'butter\'), (\'milk\', \'butter\')] ``` Use the itertools library to handle combinations and collections library to handle counting efficiently. Ensure the function considers all possible itemsets (combinations of any size greater than 1) and returns those that meet the minimum support criterion.","solution":"from itertools import combinations from collections import Counter def findFrequentItemsets(transactions, min_support): Find itemsets that appear in the transactions at least min_support times. :param transactions: List of transactions, where each transaction is a list of items. :param min_support: Minimum support count to consider for frequent itemsets. :return: List of frequent itemsets that meet min_support. itemset_counts = Counter() # Generate itemsets for each transaction for transaction in transactions: for size in range(2, len(transaction) + 1): for itemset in combinations(transaction, size): itemset_counts[itemset] += 1 # Filter out itemsets that do not meet min_support frequent_itemsets = [item for item, count in itemset_counts.items() if count >= min_support] return frequent_itemsets"},{"question":"Implement a function that reads a JSON file containing information about employees with the following fields: \\"employee_id\\", \\"name\\", \\"department\\", \\"salary\\", and \\"location\\". The function should perform the following tasks: 1. Read the JSON file into a pandas DataFrame. 2. Add a new column \\"bonus\\" that calculates a 10% bonus for those employees whose salary is above a given threshold, and a 5% bonus for all other employees. 3. Return the updated DataFrame. 4. Save the updated DataFrame back to a new JSON file. You should write self-contained code starting with: ``` import pandas as pd import json def process_employee_data(input_filename: str, output_filename: str, salary_threshold: float) -> pd.DataFrame: ```","solution":"import pandas as pd import json def process_employee_data(input_filename: str, output_filename: str, salary_threshold: float) -> pd.DataFrame: Reads a JSON file containing employee information, calculates bonuses, and writes the updated DataFrame back to a new JSON file. Args: input_filename (str): The input JSON file path. output_filename (str): The output JSON file path. salary_threshold (float): The salary threshold for determining bonus percentage. Returns: pd.DataFrame: The updated DataFrame with the calculated bonuses. # Read the JSON file into a pandas DataFrame. df = pd.read_json(input_filename) # Calculate the bonus df[\'bonus\'] = df[\'salary\'].apply(lambda x: x * 0.10 if x > salary_threshold else x * 0.05) # Save the updated DataFrame back to a new JSON file df.to_json(output_filename, orient=\'records\', lines=True) # Return the updated DataFrame return df"},{"question":"In this problem, you are required to create a system for managing a simple cryptocurrency wallet. The wallet should be able to store and manage transactions, allowing deposits and withdrawals while ensuring that the balance never goes negative. You need to implement a specific function, `process_transaction`, which will handle these operations using class attributes and methods to encapsulate the wallet\'s state and behavior. Here are the requirements to define the `CryptocurrencyWallet` class: - The class should have the following attributes: - `balance` (an integer, initialized to zero) - The class should have the following methods: - `deposit(amount)`: Increases the balance by the given amount. `amount` should be a positive integer. - `withdraw(amount)`: Decreases the balance by the given amount if the current balance is sufficient. If the balance is insufficient, it should print `\\"Insufficient funds\\"` and not alter the balance. `amount` should be a positive integer. - `get_balance()`: Returns the current balance. # Example Usage Here\'s how the `CryptocurrencyWallet` class would be used: ```python wallet = CryptocurrencyWallet() wallet.deposit(50) print(wallet.get_balance()) # Output should be 50 wallet.withdraw(20) print(wallet.get_balance()) # Output should be 30 wallet.withdraw(40) # Output should be \\"Insufficient funds\\" print(wallet.get_balance()) # Output should be 30 wallet.deposit(100) print(wallet.get_balance()) # Output should be 130 ``` The main objective of this problem is to develop a clear understanding of class design, state management through attributes, and method-driven behaviors within an object-oriented programming context. # Requirements: 1. Implement the `CryptocurrencyWallet` class with the specified attributes and methods. 2. Ensure that `deposit` and `withdraw` methods accurately update the `balance` with appropriate checks. 3. The class should handle negative balances by refusing withdrawals when funds are insufficient.","solution":"class CryptocurrencyWallet: def __init__(self): Initializes a new CryptocurrencyWallet instance with a balance of zero. self.balance = 0 def deposit(self, amount): Increases the balance by the given amount. Parameters: amount (int): The amount to be added to the balance. Must be a positive integer. if amount > 0: self.balance += amount else: raise ValueError(\\"Deposit amount must be a positive integer.\\") def withdraw(self, amount): Decreases the balance by the given amount if the current balance is sufficient. Parameters: amount (int): The amount to be withdrawn from the balance. Must be a positive integer. if amount > 0: if self.balance >= amount: self.balance -= amount else: print(\\"Insufficient funds\\") else: raise ValueError(\\"Withdrawal amount must be a positive integer.\\") def get_balance(self): Returns the current balance. Returns: int: The current balance. return self.balance"},{"question":"In this challenge, you are required to write a function `shortest_path(graph, start_node, end_node)` that finds the shortest path between two nodes in a weighted graph using Dijkstra\'s algorithm. The graph will be passed as an adjacency list, where the keys are the node names and the values are lists of tuples representing the neighboring nodes and their respective edge weights. You are required to use the following Python libraries: - `heapq` to implement the priority queue for Dijkstra\'s algorithm. The function should follow these steps: 1. **Initialize a priority queue** with the start node, initially set with a distance of 0. 2. **Create a dictionary to store the shortest distance** to each node from the start node, initialized to infinity for all nodes except the start node. 3. **Create a dictionary to store the previous node in the shortest path** for each node. 4. **Process the nodes** using Dijkstra\'s algorithm until the queue is empty. 5. **Reconstruct the path** from the start node to the end node using the previous node dictionary. 6. **Return the shortest path** as a list of node names. Function Signature ```python def shortest_path(graph: dict, start_node: str, end_node: str) -> list: ``` # Example ```python graph = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'A\', 1), (\'C\', 2), (\'D\', 5)], \'C\': [(\'A\', 4), (\'B\', 2), (\'D\', 1)], \'D\': [(\'B\', 5), (\'C\', 1)] } start_node = \'A\' end_node = \'D\' path = shortest_path(graph, start_node, end_node) print(path) ``` The expected print output might be: ``` [\'A\', \'B\', \'C\', \'D\'] ```","solution":"import heapq def shortest_path(graph, start_node, end_node): # Initialize the priority queue with the start node priority_queue = [(0, start_node)] # Dictionary to store the shortest distance to each node from the start node distances = {node: float(\'infinity\') for node in graph} distances[start_node] = 0 # Dictionary to store the previous node in the shortest path previous_nodes = {node: None for node in graph} while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If we reached the end node, reconstruct the path and return it if current_node == end_node: path = [] while current_node is not None: path.append(current_node) current_node = previous_nodes[current_node] path.reverse() return path # Skip nodes that have already been processed with a shorter distance if current_distance > distances[current_node]: continue # Update the distances to neighboring nodes for neighbor, weight in graph[current_node]: distance = current_distance + weight # If a shorter path is found, update the priority queue, distances, and previous_nodes if distance < distances[neighbor]: distances[neighbor] = distance previous_nodes[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) # If the end node is not reachable, return an empty path return []"},{"question":"You are required to implement a function that detects and visualizes outliers in a given list of numerical data using the Python library `matplotlib.pyplot`. The function should draw a box plot to represent the distribution of the data, highlighting any outliers. # Problem Statement Create a function named `visualize_outliers` that takes a single parameter: 1. `data`: A list of numerical values (floats or integers). The function should create a box plot that visually indicates the interquartile range (IQR) and highlights the outliers. Points that fall below the lower quartile minus 1.5 times the IQR or above the upper quartile plus 1.5 times the IQR should be marked as outliers. # Instructions 1. Import the necessary library (`matplotlib.pyplot`). 2. Define the function `visualize_outliers(data)`. 3. Inside the function, use the `plt.boxplot` function from `matplotlib.pyplot` to create the box plot. 4. Ensure that outliers are highlighted in the plot. 5. Use `plt.title`, `plt.xlabel`, and `plt.ylabel` to add a title and labels to the plot for clarity. 6. Ensure the plot is displayed using `plt.show()`. # Example Usage: ```python data = [10, 12, 14, 15, 15, 15, 16, 18, 20, 21, 22, 23, 30, 50] visualize_outliers(data) ``` This should create a box plot where the interquartile range and any outliers in the provided list are visualized.","solution":"import matplotlib.pyplot as plt def visualize_outliers(data): Creates a box plot visualizing the outliers in a given list of numerical data. Parameters: data (list of float/int): The list of numerical values. # Create a figure and axis fig, ax = plt.subplots() # Create the box plot ax.boxplot(data, patch_artist=True) # Add title and labels to the plot ax.set_title(\'Box plot for detecting outliers\') ax.set_xlabel(\'Data\') ax.set_ylabel(\'Values\') # Display the plot plt.show()"},{"question":"You are asked to create a Python function named `find_max_product_subsequence` which finds the maximum product of a contiguous subsequence of integers within a given list of integers. The task involves creating an algorithm that can handle both positive and negative integers, as well as zeroes. The function should return the maximum product that can be obtained from multiplying the elements of a contiguous subsequence. Your function should account for the following: 1. If the list is empty, it should return 0. 2. Handle both single-element lists and lists with multiple elements efficiently. 3. You can assume that the length of the list does not exceed 10^4. **Function Signature:** ```python def find_max_product_subsequence(nums): # Your code here ``` # Example Usage ```python # Example 1 result = find_max_product_subsequence([2, 3, -2, 4]) print(result) # Expected Output: 6 (subsequence [2, 3]) # Example 2 result = find_max_product_subsequence([-2, 0, -1]) print(result) # Expected Output: 0 (subsequence [0]) ``` # Constraints: - You need to handle both positive and negative integers. - Ensure your solution is optimized for performance with a complexity better than O(n^2). - Handle special cases like empty lists, lists with one element, and lists containing zeros effectively.","solution":"def find_max_product_subsequence(nums): Finds the maximum product of a contiguous subsequence in a list of integers. Args: nums (list): A list of integers. Returns: int: The maximum product of the contiguous subsequence. if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Implement a function that accepts a list of strings and returns a list of integers representing the length of each string. You should write the self-contained code starting with: ``` def string_lengths(strings): ```","solution":"def string_lengths(strings): Accepts a list of strings and returns a list of integers representing the length of each string. :param strings: list of strings :return: list of integers representing the length of each string return [len(s) for s in strings]"},{"question":"Implement a function that will receive two date strings in the format \'YYYY-MM-DD\' and return the total number of days between them, inclusive. If the second date is earlier than the first date, the function should return a negative number of days. The function should handle invalid date inputs by returning None. The function signature should start like this: ``` from datetime import datetime def days_between_dates(date1, date2): ``` Example Usage: ```python days_between_dates(\'2023-10-01\', \'2023-10-10\') # Output: 10 days_between_dates(\'2023-10-10\', \'2023-10-01\') # Output: -10 days_between_dates(\'2023-10-01\', \'abc\') # Output: None days_between_dates(\'2023-10-01\', \'2023-10-1a\') # Output: None ```","solution":"from datetime import datetime def days_between_dates(date1, date2): Returns the total number of days between date1 and date2, inclusive. If date2 is earlier than date1, returns a negative number. Returns None if either date1 or date2 is not a valid date. try: d1 = datetime.strptime(date1, \'%Y-%m-%d\') d2 = datetime.strptime(date2, \'%Y-%m-%d\') except ValueError: return None delta = (d2 - d1).days return delta + 1 if delta >= 0 else delta - 1"},{"question":"You are tasked with creating a function named `process_orders` to manage and update order data stored in a CSV file. The function will take two arguments: 1. `file_name` (a string): The name of the file (assumed to store order details in CSV format) where the data will be read from and written to. 2. `new_orders` (a list of dictionaries): A list where each dictionary represents a new order with the keys \\"order_id\\", \\"item\\", and \\"quantity\\". Here is what your function should do: - Open the specified CSV file in read/write mode. - Read the existing order data from the file and store it in a list of dictionaries. - Append the new orders to the existing order list. - Write the updated list back into the file in CSV format, ensuring that the column order is \\"order_id\\", \\"item\\", and \\"quantity\\". To accomplish this task, you must use the `csv` library\'s `DictReader` and `DictWriter` functions to facilitate reading and writing CSV data. Please ensure that your function properly closes the file after completing the read and write operations. # Constraints: - You can assume that the file specified by `file_name` already exists and can be successfully opened. - The CSV file contains a header row with the column names: \\"order_id\\", \\"item\\", and \\"quantity\\". # Example: Suppose the content of `orders.csv` is initially: ``` order_id,item,quantity 1,apple,3 2,banana,2 ``` Calling `process_orders(\'orders.csv\', [{\\"order_id\\": 3, \\"item\\": \\"cherry\\", \\"quantity\\": 5}])` should update the file `orders.csv` to: ``` order_id,item,quantity 1,apple,3 2,banana,2 3,cherry,5 ```","solution":"import csv def process_orders(file_name, new_orders): Reads the order data from the specified CSV file, adds the new orders, and writes the updated list back to the file. Parameters: - file_name: str, the name of the file containing order data - new_orders: list of dict, each dict represents a new order with \'order_id\', \'item\', and \'quantity\' existing_orders = [] # Read existing orders from the file with open(file_name, mode=\'r\', newline=\'\') as file: reader = csv.DictReader(file) for row in reader: existing_orders.append(row) # Append new orders existing_orders.extend(new_orders) # Write the updated orders list back to the file with open(file_name, mode=\'w\', newline=\'\') as file: writer = csv.DictWriter(file, fieldnames=[\\"order_id\\", \\"item\\", \\"quantity\\"]) writer.writeheader() writer.writerows(existing_orders)"},{"question":"You are given a CSV file named `temperature_data.csv` containing daily temperature readings for a particular city over a span of several years. The CSV file has the following columns: - `Date`: The date of the reading, formatted as YYYY-MM-DD. - `Temperature`: The temperature reading on that date in Celsius. Your task is to write a function named `monthly_average_temperature` that: 1. Reads the `temperature_data.csv` file and loads the data into a pandas DataFrame. 2. Plots the temperature data over time using matplotlib. 3. Resamples the temperature data to monthly averages. 4. Returns the month with the highest average temperature. To correctly plot the data, make sure you use the `figure` function from the `matplotlib.pyplot` library. This problem will help you learn how to manipulate time series data with pandas and visualize it with matplotlib in Python. Here\'s a sample structure of what your function should do: ```python def monthly_average_temperature(): # Read CSV file # Plot data # Resample to monthly averages # Return the month with the highest average temperature pass ``` **Requirements**: - Use the `figure` function from the `matplotlib.pyplot` library to create the plot.","solution":"import pandas as pd import matplotlib.pyplot as plt def monthly_average_temperature(): # Step 1: Read CSV file data = pd.read_csv(\'temperature_data.csv\', parse_dates=[\'Date\']) # Step 2: Plot the data plt.figure(figsize=(10, 5)) plt.plot(data[\'Date\'], data[\'Temperature\'], label=\'Daily Temperature\') plt.xlabel(\'Date\') plt.ylabel(\'Temperature (C)\') plt.title(\'Daily Temperature Over Time\') plt.legend() plt.show() # Step 3: Resample data to monthly averages data.set_index(\'Date\', inplace=True) monthly_data = data[\'Temperature\'].resample(\'M\').mean() # Step 4: Return the month with the highest average temperature highest_avg_temp_month = monthly_data.idxmax().strftime(\'%Y-%m\') return highest_avg_temp_month"},{"question":"You are tasked with implementing a function to find the longest increasing subsequence (LIS) in a given 1D array of numerical data. The longest increasing subsequence is a subsequence that is strictly increasing and has the greatest possible length. Your task is to write a function `longest_increasing_subsequence` that takes a 1D list of integers `a` as input and returns the length of the LIS. The function should use dynamic programming to achieve an efficient solution. # Function Signature ```python def longest_increasing_subsequence(a: List[int]) -> int: pass ``` # Input 1. `a` (List[int]): A 1D list of integers. # Output - An integer representing the length of the longest increasing subsequence in the input list `a`. # Example ```python # Example data data = [10, 9, 2, 5, 3, 7, 101, 18] # Finding the length of the longest increasing subsequence result = longest_increasing_subsequence(data) print(result) # Expected output: 4 ``` # Constraints - The length of the input list should be between 1 and 1000. - The values in the list should be between -10^9 and 10^9. # Hints - Use a dynamic programming approach where you maintain an array `dp` such that `dp[i]` represents the length of the longest increasing subsequence ending at index `i`. - Iterate through the array and update the `dp` array based on previously computed values.","solution":"from typing import List def longest_increasing_subsequence(a: List[int]) -> int: if not a: return 0 n = len(a) dp = [1] * n # dp[i] is the length of LIS ending at index i for i in range(n): for j in range(i): if a[i] > a[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You need to create a Python function that normalizes an image represented as a 3D array of pixel values. The normalization process will scale the pixel values so that they are between 0 and 1. The function should take a 3D numpy array as input and return a 3D numpy array with the normalized values. Ensure that the function works for images with different color channels such as grayscale (1 channel) or RGB (3 channels). You are required to use the `numpy` library for this task. The specific function you need to implement is called `normalize_image`. Function Signature: ```python def normalize_image(image: np.ndarray) -> np.ndarray: ``` Parameters: - `image`: A 3D numpy array of shape (height, width, channels) representing the image. Returns: - A 3D numpy array of the same shape as the input, with pixel values normalized between 0 and 1. Example: ```python import numpy as np # Example Image image = np.array([[[255, 128, 64], [0, 32, 64]], [[128, 128, 128], [255, 255, 255]]]) normalized_image = normalize_image(image) print(normalized_image) ``` Expected Output: ``` array([[[1. , 0.5019608 , 0.2509804 ], [0. , 0.1254902 , 0.2509804 ]], [[0.5019608 , 0.5019608 , 0.5019608 ], [1. , 1. , 1. ]]], dtype=float32) ``` Instructions: 1. Import the necessary library: `numpy`. 2. Implement the `normalize_image` function. 3. Within the function, calculate the normalized pixel values by dividing the image array by the maximum possible pixel value (255 for an 8-bit image). 4. Ensure the resulting array consists of floating-point values between 0 and 1. 5. Verify the function by running the example provided above to ensure the output matches the expected result.","solution":"import numpy as np def normalize_image(image: np.ndarray) -> np.ndarray: Normalizes the pixel values of an image to be between 0 and 1. Parameters: image (np.ndarray): A 3D numpy array of shape (height, width, channels) representing the image. Returns: np.ndarray: A 3D numpy array of the same shape as the input, with normalized pixel values. return image / 255.0"},{"question":"You are required to implement a Python function named `sort_students_by_score` that sorts a list of students based on their scores in descending order. The function should accept a list of dictionaries where each dictionary contains the name of the student and their score. The function should return a list of names sorted according to their scores. Function Signature: ```python def sort_students_by_score(students): ``` Parameters: - `students` (list): A list of dictionaries, where each dictionary has the keys \'name\' (str) and \'score\' (int). Returns: - `list`: A list of names (str) of students sorted by their scores in descending order. Requirements: 1. The function should handle the case where the list is empty by returning an empty list. 2. The function should ensure that if two students have the same score, their relative order is maintained (stable sorting). Example of the list structure (`students`): ```python students = [ {\\"name\\": \\"Alice\\", \\"score\\": 90}, {\\"name\\": \\"Bob\\", \\"score\\": 75}, {\\"name\\": \\"Charlie\\", \\"score\\": 90}, {\\"name\\": \\"David\\", \\"score\\": 60} ] ``` Example Usage: ```python sorted_names = sort_students_by_score(students) print(sorted_names) # Output: [\'Alice\', \'Charlie\', \'Bob\', \'David\'] ``` #","solution":"def sort_students_by_score(students): Sorts students based on their scores in descending order. Parameters: students (list): A list of dictionaries, where each dictionary contains \'name\' (str) and \'score\' (int). Returns: list: A list of names of students sorted by their scores in descending order. return [student[\'name\'] for student in sorted(students, key=lambda x: x[\'score\'], reverse=True)]"},{"question":"In a given list of strings, we want to group the identical strings together and provide their respective counts. Your task is to define a function `group_and_count` that takes a list of strings and returns a dictionary where the keys are the unique strings from the list and the values are the counts of how many times each string appears in the list. Your function signature should be `def group_and_count(strings: List[str]) -> Dict[str, int]:` where: - `strings` is the list of input strings. - The function should return a dictionary with the counts of each unique string. **Specific Requirements:** - You must use a dictionary comprehension to construct the final result. - You may not use the Counter class from the collections module. **Example:** ```python from typing import List, Dict # Example usage: strings = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] result = group_and_count(strings) print(result) ``` This should output: ``` {\'apple\': 3, \'banana\': 2, \'orange\': 1} ```","solution":"from typing import List, Dict def group_and_count(strings: List[str]) -> Dict[str, int]: Takes a list of strings and returns a dictionary with the counts of each unique string. return {string: strings.count(string) for string in set(strings)}"},{"question":"In this problem, you will write a function called `matrix_rotation(mat, direction)` that rotates a given square matrix 90 degrees either clockwise or counterclockwise. Matrix rotation is a common operation used in image processing and computer graphics. Requirements: 1. You must use the NumPy library for array manipulations. 2. `mat` is a two-dimensional NumPy array representing a square matrix (i.e., with shape `(n, n)` where `n` is the number of rows and columns). 3. `direction` is a string that can be either `\\"clockwise\\"` or `\\"counterclockwise\\"`, specifying the direction of rotation. 4. The function should return a new two-dimensional NumPy array that is the rotated version of the input matrix. Example: ```python import numpy as np mat = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # Example 1: Clockwise rotation result_clockwise = matrix_rotation(mat, \\"clockwise\\") # Expected output: # array([[ 7, 4, 1], # [ 8, 5, 2], # [ 9, 6, 3]]) # Example 2: Counterclockwise rotation result_counterclockwise = matrix_rotation(mat, \\"counterclockwise\\") # Expected output: # array([[ 3, 6, 9], # [ 2, 5, 8], # [ 1, 4, 7]]) ``` Implement the function `matrix_rotation(mat, direction)` to achieve this functionality.","solution":"import numpy as np def matrix_rotation(mat, direction): Rotates the given square matrix 90 degrees in the specified direction. Parameters: mat (np.ndarray): 2D numpy array representing the square matrix. direction (str): The direction of rotation, either \'clockwise\' or \'counterclockwise\'. Returns: np.ndarray: The rotated matrix. if direction == \'clockwise\': return np.rot90(mat, -1) # Rotate 90 degrees counterclockwise -1 times (i.e., 90 degrees clockwise) elif direction == \'counterclockwise\': return np.rot90(mat, 1) # Rotate 90 degrees counterclockwise 1 time else: raise ValueError(\\"Invalid direction. Must be \'clockwise\' or \'counterclockwise\'.\\")"},{"question":"In this problem, you are asked to implement a function that checks if a given string follows a specific pattern. The pattern is composed of lowercase alphabet characters, and the string consists of space-separated words. Each character in the pattern corresponds to a distinct word in the string, such that the pattern and the words follow a one-to-one relationship. You need to write a function `word_pattern(pattern, s)` that takes a string `pattern` and another string `s` as input and returns a boolean value indicating whether `s` follows the same pattern as `pattern`. The function should: 1. Split the string `s` by spaces to create a list of words. 2. Check if the length of the pattern is equal to the number of words. 3. Map each character in the pattern to a unique word and ensure that no two characters map to the same word. 4. Similarly, map each word to a unique character and ensure that no two words map to the same character. Function Signature: ```python def word_pattern(pattern: str, s: str) -> bool: ``` **Requirements:** - Ensure the function is capable of handling both short and long patterns and strings. - The function should be efficient, with a time complexity of at most O(n). **Example:** ```python pattern = \\"abba\\" s = \\"dog cat cat dog\\" result = word_pattern(pattern, s) print(result) # Output should be: True pattern = \\"abba\\" s = \\"dog cat cat fish\\" result = word_pattern(pattern, s) print(result) # Output should be: False pattern = \\"aaaa\\" s = \\"dog dog dog dog\\" result = word_pattern(pattern, s) print(result) # Output should be: True pattern = \\"abba\\" s = \\"dog dog dog dog\\" result = word_pattern(pattern, s) print(result) # Output should be: False ``` Note: - Ensure input strings are non-empty and contain only lowercase alphabetic characters and spaces. The pattern will not be empty and will only contain lowercase alphabetic characters. Both will be guaranteed to be well-formed strings. - Use a dictionary to maintain the mappings and to check the one-to-one relationship.","solution":"def word_pattern(pattern: str, s: str) -> bool: Check if the given string s follows the same pattern as specified by the string pattern. words_list = s.split() if len(pattern) != len(words_list): return False char_to_word = {} word_to_char = {} for char, word in zip(pattern, words_list): if char not in char_to_word: if word in word_to_char: return False char_to_word[char] = word word_to_char[word] = char elif char_to_word[char] != word: return False return True"},{"question":"You are required to write a function `calculate_exponential_moving_average` that computes the Exponential Moving Average (EMA) of a given time series data. Exponential Moving Average is a type of moving average that places a greater weight and significance on the most recent data points. The formula for calculating EMA at a time **t** is given by: [ EMA_t = alpha times x_t + (1 - alpha) times EMA_{t-1} ] Where: - ( x_t ) is the value at time **t** - ( alpha ) is the smoothing factor, defined as ( alpha = frac{2}{N+1} ) where **N** is the span of the EMA - ( EMA_{t-1} ) is the EMA at time **t-1** Your function should take the following parameters: - `data`: A list of floats representing the time series data. - `N`: An integer representing the span of the EMA. The function signature should look like this: ```python def calculate_exponential_moving_average(data, N): pass ``` Your function should return a list of floats representing the EMA calculated for each data point in the series. # Example: ```python data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] N = 3 calculate_exponential_moving_average(data, N) ``` Expected Output: ```python [1.0, 1.5, 2.25, 3.125, 4.0625, 5.03125, 6.015625, 7.0078125, 8.00390625, 9.001953125] ``` Ensure to handle any edge cases and validate the inputs within the function.","solution":"def calculate_exponential_moving_average(data, N): Calculate the Exponential Moving Average (EMA) of a given time series data. Parameters: data (list of floats): The time series data. N (int): The span of the EMA. Returns: list of floats: The EMA values for the given time series data. if not data or N <= 0: raise ValueError(\\"Data must be a non-empty list and N must be a positive integer.\\") alpha = 2 / (N + 1) ema = [data[0]] for i in range(1, len(data)): ema.append(alpha * data[i] + (1 - alpha) * ema[-1]) return ema"},{"question":"You are tasked with creating a function that reads a given text file and calculates the frequency of each word in the file, ignoring case. The specific requirements for the function are as follows: 1. The function name should be `calculate_word_frequency`. 2. The function should accept one parameter: - `file_path`: The path to the text file that needs to be processed. 3. The function should return a dictionary where: - The keys are the unique words in lowercase. - The values are the count of each word\'s occurrences in the text. 4. The function should ignore punctuation marks while calculating the word frequency. Consider the following punctuation marks to remove: `.,!?;:\'\\"()-[]{}<>`. 5. Use the `re` library for handling the regular expressions. 6. The function should handle large files efficiently. # Example Usage: ```python def calculate_word_frequency(file_path): # Function implementation here pass # Example function call result = calculate_word_frequency(\'sample_text.txt\') print(result) # Output format: {\'word1\': count1, \'word2\': count2, ...} ``` # Additional Details: - Ensure the file is opened and read efficiently. - Remove punctuation marks and convert text to lowercase before calculating frequencies. - Return a dictionary representing the word frequency, ignoring the case of the words.","solution":"import re from collections import defaultdict def calculate_word_frequency(file_path): Reads a text file and calculates the frequency of each word, ignoring case and specified punctuation. :param file_path: Path to the text file to be processed. :return: Dictionary with word frequencies. word_freq = defaultdict(int) punctuation_pattern = re.compile(r\\"[.,!?;:\'\\"()[]{}<>-]\\") with open(file_path, \'r\') as file: for line in file: # Remove punctuation and convert to lowercase cleaned_line = punctuation_pattern.sub(\' \', line).lower() words = cleaned_line.split() for word in words: word_freq[word] += 1 return dict(word_freq)"},{"question":"You are required to create a function named `create_linear_regression_model` that performs the following tasks using the `LinearRegression` from the `sklearn.linear_model` library: 1. Read the data from a CSV file located at `./data/DataSet.csv`. 2. Split the data into features (`features`) and target (`target`). The features are located in columns 1 to 8 and the target is in column 0. 3. Separate the data into a training set and a testing set using an 80-20 train-test split. Use a fixed `random_state` of 42 for reproducibility. 4. Train a linear regression model (`LinearRegression`) on the training set. 5. Print a message indicating successful creation of the linear regression model. 6. Return the trained model, the test set features, and the test set target. Note: - Handle file reading exceptions and print an error message if the file does not exist or cannot be read. - Ensure your function uses the required libraries and follows the given instructions precisely. **Function Signature:** ```python def create_linear_regression_model() -> Tuple[LinearRegression, pd.DataFrame, np.ndarray]: pass ```","solution":"from typing import Tuple import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split def create_linear_regression_model() -> Tuple[LinearRegression, pd.DataFrame, np.ndarray]: try: # Read the data from the CSV file data = pd.read_csv(\'./data/DataSet.csv\') except Exception as e: print(f\\"Error reading the data file: {e}\\") return None, None, None # Split the data into features and target features = data.iloc[:, 1:9] target = data.iloc[:, 0] # Separate the data into a training set and a testing set X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42) # Train the linear regression model on the training set model = LinearRegression() model.fit(X_train, y_train) # Print a message indicating successful creation of the model print(\\"Linear regression model created successfully.\\") # Return the trained model, the test set features, and the test set target return model, X_test, y_test.values"},{"question":"You are tasked with creating and managing a list of student records using classes in Python. Each student has a name, age, and a list of grades. Implement a system that can add new students, update grades, and compute statistics for the grades. Here\'s what the system should do: 1. **Creating the Student Class**: - Implement a `Student` class that has the following attributes: - `name` (a string) - `age` (an integer) - `grades` (a list of integers) 2. **Adding New Student**: - Implement a method `add_student(name: str, age: int, grades: List[int])` that creates a new `Student` object and adds it to a list of students. 3. **Updating Grades**: - Implement a method `update_grades(name: str, new_grades: List[int])` that finds the student with the specified name and updates their grades. 4. **Computing Grade Statistics**: - Implement a method `compute_statistics()` that calculates the average and median grade for all students in the system and returns these statistics as a dictionary in the format: ```python { \\"average_grade\\": <average_grade>, \\"median_grade\\": <median_grade> } ``` **Function Signatures**: ```python class Student: def __init__(self, name: str, age: int, grades: List[int]): pass class StudentRecords: def add_student(self, name: str, age: int, grades: List[int]): pass def update_grades(self, name: str, new_grades: List[int]): pass def compute_statistics(self) -> Dict[str, float]: pass ``` **Example**: ```python records = StudentRecords() records.add_student(\\"Alice\\", 20, [88, 76, 92]) records.add_student(\\"Bob\\", 22, [79, 95, 81]) records.update_grades(\\"Alice\\", [90, 80, 85]) print(records.compute_statistics()) ``` **Expected Output**: Should print: ``` {\'average_grade\': 85.0, \'median_grade\': 85.0} ``` **Note**: Assume appropriate import statements for necessary libraries such as `List` and `Dict` from `typing`, and functions for calculating median and mean from an appropriate library (e.g., `statistics`).","solution":"from typing import List, Dict from statistics import mean, median class Student: def __init__(self, name: str, age: int, grades: List[int]): self.name = name self.age = age self.grades = grades class StudentRecords: def __init__(self): self.students = [] def add_student(self, name: str, age: int, grades: List[int]): new_student = Student(name, age, grades) self.students.append(new_student) def update_grades(self, name: str, new_grades: List[int]): for student in self.students: if student.name == name: student.grades = new_grades break def compute_statistics(self) -> Dict[str, float]: all_grades = [grade for student in self.students for grade in student.grades] if not all_grades: return {\\"average_grade\\": 0.0, \\"median_grade\\": 0.0} return { \\"average_grade\\": mean(all_grades), \\"median_grade\\": median(all_grades) }"},{"question":"You are required to write a function in Python that merges two sorted arrays into a single sorted array. This function will be useful for combining results from different data sources while maintaining order. **Function Name**: `merge_sorted_arrays` **Parameters**: - `arr1` (list): A sorted list of integers. - `arr2` (list): A sorted list of integers. **Requirements**: 1. The function should return a single list that contains all elements from `arr1` and `arr2` in sorted order. 2. Implement the merge operation without using any built-in sort functions. 3. The function should handle edge cases where one or both input lists are empty. **Example**: ```python print(merge_sorted_arrays([1, 3, 5], [2, 4, 6])) # Expected output: [1, 2, 3, 4, 5, 6] print(merge_sorted_arrays([1, 2, 3], [])) # Expected output: [1, 2, 3] print(merge_sorted_arrays([], [4, 5, 6])) # Expected output: [4, 5, 6] print(merge_sorted_arrays([], [])) # Expected output: [] ``` Your task is to implement the `merge_sorted_arrays` function as described, ensuring it performs efficiently and correctly handles edge cases.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: - arr1 (list): A sorted list of integers. - arr2 (list): A sorted list of integers. Returns: - list: A single list that contains all elements from arr1 and arr2 in sorted order. merged = [] i, j = 0, 0 # Traverse both arrays and append the smaller element to the merged array while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # Append remaining elements of arr1 (if any) while i < len(arr1): merged.append(arr1[i]) i += 1 # Append remaining elements of arr2 (if any) while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"Given a list of ordered pairs representing edges in a directed graph, your task is to determine if the graph contains a cycle. A cycle in a directed graph means that there is a way to start at some node and follow the directed edges that eventually loop back to that starting node. Write a function `detect_cycle(edges, num_nodes)` that takes in a list of edges representing the directed graph and an integer representing the number of nodes in the graph. The nodes are numbered from 0 to `num_nodes-1`. Your function should return `True` if there is a cycle in the graph, and `False` otherwise. **Function Signature**: ```python def detect_cycle(edges: list[list[int]], num_nodes: int) -> bool: ``` **Parameters**: - `edges`: A list of lists (or tuples), where each list contains two integers `[u, v]` representing a directed edge from node `u` to node `v`. - `num_nodes`: An integer representing the total number of nodes in the graph. **Returns**: - A boolean value indicating whether there is a cycle in the graph. # Example: **Input**: ```python edges = [[0, 1], [1, 2], [2, 3], [3, 1]] num_nodes = 4 ``` **Output**: ```python True ``` In this example, there is a cycle that starts from node 1, goes to node 2, then to node 3, and back to node 1. # Process: 1. Construct a graph from the given edges. 2. Use Depth-First Search (DFS) or Kahn\'s algorithm for Topological Sorting to detect if there is a cycle in the graph. 3. Return `True` if a cycle is detected, otherwise return `False`. Make sure to consider both DFS and BFS approaches, handle different edge cases like no edges or fully connected graph, and ensure the solution is efficient and easy to understand.","solution":"def detect_cycle(edges, num_nodes): This function determines if the directed graph contains a cycle. Parameters: edges (list of list of int): List of directed edges. num_nodes (int): Number of nodes in the graph. Returns: bool: True if there is a cycle, False otherwise. from collections import defaultdict, deque def build_graph(): graph = defaultdict(list) for u, v in edges: graph[u].append(v) return graph def has_cycle_dfs(node, visited, rec_stack): # Mark the current node as visited and in the recursion stack visited[node] = True rec_stack[node] = True # Recur for all neighbors for neighbor in graph[node]: if not visited[neighbor]: if has_cycle_dfs(neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: return True # Remove the node from recursion stack rec_stack[node] = False return False # Build the graph graph = build_graph() # Mark all the vertices as not visited and not part of the recursion stack visited = [False] * num_nodes rec_stack = [False] * num_nodes # Call the recursive helper function to detect cycle in different DFS trees for node in range(num_nodes): if not visited[node]: if has_cycle_dfs(node, visited, rec_stack): return True return False"},{"question":"You are tasked with creating a function that interacts with a JSON-based weather API to obtain the current weather information for a given city. The function should fetch weather data such as temperature, humidity, and weather description. The function you need to write should be named `get_weather_info`. It will take one parameter: `city_name` (a string representing the name of the city). This function should send an HTTP GET request to a weather API endpoint that retrieves current weather data for the specified city. You will use the `requests.get` function from the `requests` library to achieve this. Function Signature: ```python def get_weather_info(city_name): pass ``` Requirements: 1. Your function must construct the query URL by joining the base weather API URL (`WEATHER_API_URL`) with the endpoint to fetch current weather data. 2. The request parameters should include the API key (`api_key`) and the city name (`city_name`). 3. The function should handle the API response and extract key weather information such as temperature, humidity, and a brief weather description. If the city cannot be found or an error occurs, the function should return `None`. 4. It should handle invalid or unsuccessful API responses gracefully. Here’s the base template of what you need to achieve: ```python def get_weather_info(city_name): Fetches the current weather information for the specified city. This includes temperature, humidity, and a weather description. url = f\\"{WEATHER_API_URL}/data/2.5/weather\\" params = {\'q\': city_name, \'appid\': api_key} response = requests.get(url, params=params) if response.status_code == 200: data = response.json() weather_data = { \'temperature\': data[\'main\'][\'temp\'], \'humidity\': data[\'main\'][\'humidity\'], \'description\': data[\'weather\'][0][\'description\'] } return weather_data else: return None ``` In your solution, make sure to use the `requests.get` function correctly as per the provided API documentation and handle different edge cases appropriately.","solution":"import requests WEATHER_API_URL = \\"http://api.openweathermap.org\\" api_key = \\"your_api_key\\" # Replace with your actual API key def get_weather_info(city_name): Fetches the current weather information for the specified city. This includes temperature, humidity, and a weather description. url = f\\"{WEATHER_API_URL}/data/2.5/weather\\" params = {\'q\': city_name, \'appid\': api_key, \'units\': \'metric\'} try: response = requests.get(url, params=params) if response.status_code == 200: data = response.json() weather_data = { \'temperature\': data[\'main\'][\'temp\'], \'humidity\': data[\'main\'][\'humidity\'], \'description\': data[\'weather\'][0][\'description\'] } return weather_data else: return None except requests.RequestException: return None"},{"question":"Create a function named `draw_house(turtle)` that uses the `turtle` graphics library in Python to draw a simple house. The house consists of a square base and a triangular roof. The bottom-left corner of the house\'s base should start at coordinates `(0, 0)` and be drawn with the following specifications: 1. Move the turtle to the starting point `(0, 0)` and face right (0 degrees). 2. Draw the square base with sides of 100 units: - Move forward by 100 units to draw the bottom side of the base. - Turn left by 90 degrees and move forward by 100 units to draw the left side. - Turn left by 90 degrees and move forward by 100 units to draw the top side. - Turn left by 90 degrees and move forward by 100 units to draw the right side. 3. From the top-right corner of the square, turn left by 45 degrees and draw the first side of the triangle roof with a length of `sqrt(2) * 100` units. 4. Turn left by 90 degrees and draw the second side of the triangle roof with a length of `sqrt(2) * 100` units, closing the roof at the top-left corner of the square. 5. Move the turtle to the center of the square base for any additional drawing or finishing touches. Ensure to use turtle graphics setup like `penup()`, `pendown()`, and setting the_heading direction explicitly, if necessary.","solution":"import turtle import math def draw_house(turtle_obj): Draws a simple house using the turtle graphics library. The house consists of a square base and a triangular roof. Parameters: turtle_obj (turtle.Turtle): The turtle object used to draw the house. # Move the turtle to the starting point (0, 0) and face right (0 degrees). turtle_obj.penup() turtle_obj.goto(0, 0) turtle_obj.setheading(0) turtle_obj.pendown() # Draw the square base with sides of 100 units for _ in range(4): turtle_obj.forward(100) turtle_obj.left(90) # From the top-right corner of the square, turn left by 45 degrees turtle_obj.left(45) # Draw the first side of the triangle roof with a length of sqrt(2) * 100 units roof_side = math.sqrt(2) * 100 turtle_obj.forward(roof_side) # Turn left by 90 degrees turtle_obj.left(90) # Draw the second side of the triangle roof with a length of sqrt(2) * 100 units turtle_obj.forward(roof_side) # Move the turtle to the center of the square base turtle_obj.penup() turtle_obj.goto(50, 0) turtle_obj.setheading(90) turtle_obj.pendown()"},{"question":"You are tasked with creating a function that can process a string to determine if it satisfies the conditions of a valid alphanumeric password. Specifically, you need to implement a function `is_valid_password` that will validate a password based on the following criteria: 1. The password must be at least 8 characters long. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one digit. 5. The password must contain at least one special character from the set `{!@#%^&*()_-+}`. The function should return `True` if the password meets all the requirements, and `False` otherwise. # Function Signature ```python def is_valid_password(password: str) -> bool: pass ``` # Requirements 1. Ensure the password is at least 8 characters long. 2. Check for the presence of at least one uppercase letter. 3. Check for the presence of at least one lowercase letter. 4. Check for the presence of at least one digit. 5. Check for the presence of at least one special character from the set `{!@#%^&*()_-+}`. # Example Usage ```python print(is_valid_password(\\"A1b@c3D4\\")) # Output: True print(is_valid_password(\\"abcdEF12\\")) # Output: False print(is_valid_password(\\"!@ABcd12\\")) # Output: True ``` In these examples: - The first call returns `True` since all conditions are satisfied. - The second call returns `False` because it does not contain any special characters. - The third call returns `True` since it contains at least one special character, uppercase letter, lowercase letter, digit, and meets the length requirement.","solution":"def is_valid_password(password: str) -> bool: Validates a password based on the following criteria: 1. At least 8 characters long. 2. Contains at least one uppercase letter. 3. Contains at least one lowercase letter. 4. Contains at least one digit. 5. Contains at least one special character from the set {!@#%^&*()_-+}. # Criteria 1: At least 8 characters long if len(password) < 8: return False # Initialize criteria checks has_upper = False has_lower = False has_digit = False has_special = False special_characters = set(\\"!@#%^&*()_-+\\") for char in password: if char.isupper(): has_upper = True if char.islower(): has_lower = True if char.isdigit(): has_digit = True if char in special_characters: has_special = True # If all criteria are met, we can return early if has_upper and has_lower and has_digit and has_special: return True # If any of the criteria are not met, return False return False"},{"question":"You are tasked with creating a function named `calculate_optimal_inventory` that helps a retail store determine the optimal inventory levels for its products based on historical sales data. The goal is to avoid both stockouts and excess inventory, ensuring the store can meet customer demand without overstocking. # Requirements: 1. **Use the `numpy` library to perform numerical operations.** 2. **Use the `pandas.DataFrame` class to handle and manipulate the sales data.** # Function Specification: Function Name: `calculate_optimal_inventory` Parameters: - `historical_sales_data`: A pandas DataFrame where: - Each row represents daily sales data for a specific product. - Columns include \'product_id\', \'date\', and \'units_sold\'. - `safety_stock`: A float representing the percentage buffer added to the average sales to prevent stockouts (e.g., 0.10 for 10%). Returns: - A pandas DataFrame where: - Each row represents a product. - Columns include \'product_id\', \'average_daily_sales\', and \'optimal_inventory_level\'. # Implementation Details: 1. **Calculate the average daily sales** for each product using the `units_sold` data from `historical_sales_data`. 2. **Determine the optimal inventory level** by adding a safety stock buffer to the average daily sales. The formula is: [ text{optimal_inventory_level} = text{average_daily_sales} times (1 + text{safety_stock}) ] 3. **Return a DataFrame** with the columns \'product_id\', \'average_daily_sales\', and \'optimal_inventory_level\'. # Example Usage: ```python import pandas as pd data = { \'product_id\': [101, 101, 101, 102, 102], \'date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-01\', \'2023-01-02\'], \'units_sold\': [5, 7, 4, 3, 8] } historical_sales_data = pd.DataFrame(data) safety_stock = 0.15 inventory_levels = calculate_optimal_inventory(historical_sales_data, safety_stock) print(inventory_levels) ``` This function will help the retail store determine the optimal inventory levels to avoid both stockouts and excess inventory.","solution":"import pandas as pd import numpy as np def calculate_optimal_inventory(historical_sales_data, safety_stock): Calculate the optimal inventory levels based on historical sales data and a safety stock percentage. Parameters: - historical_sales_data (pd.DataFrame): Daily sales data with columns \'product_id\', \'date\', \'units_sold\' - safety_stock (float): Safety stock percentage to avoid stockouts (e.g., 0.10 for 10%) Returns: - pd.DataFrame: DataFrame with columns \'product_id\', \'average_daily_sales\', and \'optimal_inventory_level\' # Calculate average daily sales for each product avg_daily_sales = historical_sales_data.groupby(\'product_id\')[\'units_sold\'].mean().reset_index() avg_daily_sales.columns = [\'product_id\', \'average_daily_sales\'] # Calculate optimal inventory level avg_daily_sales[\'optimal_inventory_level\'] = avg_daily_sales[\'average_daily_sales\'] * (1 + safety_stock) return avg_daily_sales"},{"question":"In this problem, you will create a function `encrypt_message` that implements a simple substitution cipher to encrypt a given message. The function should take the following parameters: 1. `message` (str): The message that you want to encrypt. 2. `shift` (int): A non-negative integer representing the number of positions by which each character in the message string should be shifted. Your task is to implement the `encrypt_message` function to perform the following encryption: 1. Alphabetic characters: - Shift each letter in the message by the `shift` value within the bounds of the alphabet (i.e., \'a\' shifted by 1 becomes \'b\', \'z\' shifted by 1 wraps around to \'a\'). Maintain the case of each letter. 2. Non-alphabetic characters: - Any characters in the message that are not alphabetic should remain unchanged. Make sure to handle large shift values by using modulo operation with 26 (the number of letters in the English alphabet). **Function Signature:** ```python def encrypt_message(message: str, shift: int) -> str: ... ``` `encrypt_message` function should return the encrypted message as a string. # Example ```python print(encrypt_message(\\"hello world\\", 3)) # Outputs: \\"khoor zruog\\" print(encrypt_message(\\"HELLO world\\", 4)) # Outputs: \\"LIPPS asvph\\" print(encrypt_message(\\"Python 3.8!\\", 5)) # Outputs: \\"Udymts 3.8!\\" ```","solution":"def encrypt_message(message: str, shift: int) -> str: def shift_char(c, s): if c.isalpha(): start = ord(\'a\') if c.islower() else ord(\'A\') return chr((ord(c) - start + s) % 26 + start) else: return c return \\"\\".join(shift_char(c, shift) for c in message)"},{"question":"You are given a sequence of integers representing the heights of buildings in a city. An architect wants to optimize the skyline by ensuring that each building is no taller than the one to its left. To achieve this, buildings may need to be shortened, but cannot be made taller. Write a Python function named `optimize_skyline(heights: List[int]) -> List[int]` that adjusts the heights of the buildings to meet the requirements. The function should return a list of integers representing the new heights of the buildings. Each height in the returned list should be less than or equal to the height of the building immediately to its left in the original list. Steps to solve the problem: 1. Iterate through the list of building heights starting from the first element. 2. For each building, if its height is greater than the height of the building to its left, reduce its height to match the height of the previous building. 3. Continue this process for all buildings in the list. 4. Return the modified list of building heights.","solution":"from typing import List def optimize_skyline(heights: List[int]) -> List[int]: Adjusts the heights of the buildings such that each building is no taller than the one to its left. :param heights: List of integers representing the heights of buildings :return: List of integers representing the optimized heights of buildings if not heights: return [] # Iterate through the list starting from the second building for i in range(1, len(heights)): if heights[i] > heights[i - 1]: # Reduce height to match the previous building heights[i] = heights[i - 1] return heights"},{"question":"Write a function that reads from a large text file, removes all the stop words, and writes the resulting text into another file. The function should consider only alphabetical characters and convert all words to lowercase. The function should take the paths of the input and output files as well as a list of stop words as inputs. Ensure the function handles the I/O operations efficiently to work with large files. The function should output: str: Success message indicating the output file has been saved. You should write self-contained code starting with: ``` import os def remove_stop_words(input_file, output_file, stop_words): ```","solution":"import os def remove_stop_words(input_file, output_file, stop_words): Reads a large text file, removes all the stop words, and writes the resulting text into another file. The function considers only alphabetical characters and converts all words to lowercase. Args: input_file (str): Path to the input file. output_file (str): Path to the output file. stop_words (list of str): List of stop words to remove. Returns: str: Success message indicating the output file has been saved. stop_words_set = set(stop_words) with open(input_file, \'r\', encoding=\'utf-8\') as infile, open(output_file, \'w\', encoding=\'utf-8\') as outfile: for line in infile: # Normalize the line to lowercase and filter out non-alphabet characters words = \'\'.join([c.lower() if c.isalpha() or c.isspace() else \' \' for c in line]).split() filtered_words = [word for word in words if word not in stop_words_set] outfile.write(\' \'.join(filtered_words) + \'n\') return f\\"Success: Output file \'{output_file}\' has been saved.\\""},{"question":"Write a function named `get_primes_up_to` that generates a list of all prime numbers up to a given integer `n` using the Sieve of Eratosthenes algorithm. The function should: 1. Use an efficient algorithm to generate the primes, ensuring it scales well for large values of `n`. 2. Return the list of prime numbers up to and including `n`. The Sieve of Eratosthenes algorithm should be used as follows: - Create a list of boolean values representing whether each number up to `n` is prime. - Initialize all entries in the list to `True`, except for indices 0 and 1 which should be set to `False`. - Iterate from 2 to the square root of `n`, marking multiples of each prime number as `False`. The function should have the following signature: ```python def get_primes_up_to(n: int) -> List[int]: ``` Where: - The `int` parameter `n` is the integer up to which primes should be calculated. - The return value is a list of integers containing the prime numbers up to and including `n`. Make sure to handle edge cases, such as when `n` is less than 2.","solution":"from typing import List def get_primes_up_to(n: int) -> List[int]: Generates a list of all prime numbers up to a given integer `n` using the Sieve of Eratosthenes algorithm. Parameters: - n (int): The integer up to which primes should be calculated. Returns: - List[int]: A list of prime numbers up to and including `n`. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"You are tasked with designing a function named `process_text_file` that reads a text file, removes any stopwords, and then counts the frequency of each remaining word. The function should leverage Python\'s `collections.Counter` and `string` modules. The function signature is as follows: ```python def process_text_file(filepath: str, stopwords: list) -> dict: ``` **Function Arguments:** - `filepath` (str): The path to the text file to be processed. - `stopwords` (list): A list of stopwords that should be removed from the text. **Function Output:** - A dictionary where keys are the remaining words and values are their respective frequencies. **Function Logic:** 1. Open and read the text file specified by `filepath`. 2. Convert all text to lowercase to ensure word counting is case-insensitive. 3. Remove punctuation from the text using the `string.punctuation` constant. 4. Split the text into individual words. 5. Remove any stopwords from the list of words. 6. Use `collections.Counter` to count the frequency of each remaining word. 7. Return the resulting dictionary of word counts. **Requirements:** - Use the `open` function to read the text file. - Use the `string.punctuation` constant to remove punctuation from the text. - Use the `collections.Counter` to count word frequencies. Here\'s an example usage of this function: ```python from collections import Counter import string # Define the stopwords stopwords_list = [\'and\', \'is\', \'in\', \'the\', \'of\', \'to\', \'a\'] # Process the text file and print word frequency count word_counts = process_text_file(\'sample.txt\', stopwords_list) print(word_counts) ```","solution":"from collections import Counter import string def process_text_file(filepath: str, stopwords: list) -> dict: Reads a text file, removes stopwords, and counts the frequency of each remaining word. Args: filepath (str): The path to the text file to be processed. stopwords (list): A list of stopwords to be removed from the text. Returns: dict: A dictionary where keys are words and values are their frequencies. with open(filepath, \'r\') as file: text = file.read() # Convert text to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split text into words words = text.split() # Remove stopwords filtered_words = [word for word in words if word not in stopwords] # Count word frequencies word_counts = Counter(filtered_words) return dict(word_counts)"},{"question":"Create a function called `generate_random_matrix` that generates a random matrix of specified dimensions and writes it to a CSV file. The function should receive three parameters: 1. `rows`: An integer representing the number of rows in the matrix. 2. `cols`: An integer representing the number of columns in the matrix. 3. `output_file`: A string representing the filename where the matrix will be written. The output should be a CSV file. The matrix should: - Contain random integer values between 0 and 100, inclusive. - Ensure that the dimensions of the matrix are precisely defined by the `rows` and `cols` parameters. The output file should be written in CSV format with each value separated by a comma. Ensure proper use of the `random` and `csv` libraries in your implementation.","solution":"import random import csv def generate_random_matrix(rows, cols, output_file): Generates a random matrix with specified dimensions and writes it to a CSV file. Args: rows (int): Number of rows in the matrix. cols (int): Number of columns in the matrix. output_file (str): The CSV file to write the matrix to. matrix = [[random.randint(0, 100) for _ in range(cols)] for _ in range(rows)] with open(output_file, mode=\'w\', newline=\'\') as file: writer = csv.writer(file) for row in matrix: writer.writerow(row)"},{"question":"You are tasked with developing a small text-based game where the user must guess a randomly selected word from a given list within a limited number of attempts. Your goal is to write a function named `word_guessing_game` that will accomplish this. Specifically, this function should perform the following tasks: 1. Randomly select a word from a predefined list of words. 2. Prompt the user to guess the word, giving them a limited number of attempts. 3. For each guess, provide feedback indicating whether the guess is correct or not. If incorrect, provide a hint by revealing any correct letters in their correct positions. 4. If the user guesses the word correctly within the allowed attempts, congratulate them. Otherwise, reveal the word at the end of the attempts. # Function Signature ```python def word_guessing_game(words, attempts=5): pass ``` # Requirements 1. Use the `random.choice` function to select the word from the predefined list. 2. Ensure the game provides constructive feedback after each guess, showing any correctly guessed letters in their correct positions (e.g., for the word \\"apple\\", if the user guesses \\"apron\\", the feedback would be \\"ap__n\\"). 3. Limit the number of attempts to a default value of 5 or a custom value provided by the user. 4. Handle both uppercase and lowercase letters (user input should be case-insensitive). # Example Suppose the list of words is `[\\"apple\\", \\"banana\\", \\"cherry\\"]` and the user has 5 attempts: ``` Welcome to the word guessing game! You have 5 attempts to guess the word. Guess the word: apricot Feedback: a_____ Guess the word: anchor Feedback: a___r_ Guess the word: angle Feedback: a___e Guess the word: apace Feedback: a___e Guess the word: apple Congratulations! You guessed the word: apple ``` If the user fails to guess within the given attempts: ``` Welcome to the word guessing game! You have 5 attempts to guess the word. Guess the word: apricot Feedback: a_____ Guess the word: anchor Feedback: a___r_ Guess the word: angle Feedback: a___e Guess the word: apace Feedback: a___e Guess the word: angel Sorry! You\'ve used all your attempts. The word was: apple ```","solution":"import random def word_guessing_game(words, attempts=5): A text-based game where the player must guess a randomly selected word from a given list within a limited number of attempts. # Choose a random word from the given list word_to_guess = random.choice(words).lower() word_length = len(word_to_guess) print(\\"Welcome to the word guessing game!\\") print(f\\"You have {attempts} attempts to guess the word.\\") def provide_feedback(word, guess): feedback = \'\'.join([word[i] if word[i] == guess[i] else \'_\' for i in range(word_length)]) return feedback for attempt in range(attempts): guess = input(\\"Guess the word: \\").strip().lower() if guess == word_to_guess: print(f\\"Congratulations! You guessed the word: {word_to_guess}\\") return feedback = provide_feedback(word_to_guess, guess) print(f\\"Feedback: {feedback}\\") print(f\\"Sorry! You\'ve used all your attempts. The word was: {word_to_guess}\\")"},{"question":"Consider a list of integers where each integer represents the height of a bar in a histogram. Write a function to find the largest rectangle that can be formed in the histogram, given that the width of each bar is 1. Your task is to implement the function `largest_rectangle_area(histogram: List[int]) -> int`. The function should receive a list of integers representing the histogram\'s heights and return the area of the largest rectangle that can be formed within the histogram. # Example ```python histogram1 = [2, 1, 5, 6, 2, 3] assert largest_rectangle_area(histogram1) == 10 # The largest rectangle has an area of 10 (formed by heights 5, 6) histogram2 = [2, 4] assert largest_rectangle_area(histogram2) == 4 # The largest rectangle has an area of 4 (formed by heights 2, 4) ``` # Constraints - The input list `histogram` will have at least one and at most 100,000 integers. - All integers in the list are non-negative and will not exceed 10,000.","solution":"from typing import List def largest_rectangle_area(histogram: List[int]) -> int: stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[index] >= histogram[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are developing a system to track warehouse inventory for a retail company. The data for the inventory is provided in either CSV files (`inventory_2020.csv` and `inventory_2021.csv`) or as pre-JSON files (`data_2020.json` and `data_2021.json`). The inventory data includes information about product IDs, quantities, and restock dates. You need to implement a function `load_inventory_data()` that performs the following tasks: 1. Use the `os.getcwd()` function to get the current working directory. 2. Check if the JSON files `data_2020.json` and `data_2021.json` exist in the current working directory. 3. If the JSON files exist: - Load the data from these files using the `json` module. - Print \\"Stored files exist\\" and \\"Files loaded onto data structures\\". 4. If the JSON files do not exist: - Load the data from the corresponding CSV files (`inventory_2020.csv` and `inventory_2021.csv`) using the `pandas` library. - Replace any empty values in the datasets by some mechanism, but for this exercise, assume a placeholder function `fill_empty_values` is provided. - Convert the loaded and processed data to JSON format and save them using the `json` module. - Print \\"Stored files do not exist\\", \\"Empty values filled\\", and \\"Files saved\\". Your function should return the data loaded from either the CSV files or the JSON files in any case. # Function Signature ```python def load_inventory_data(): pass ``` # Input - No direct input to the function (it will rely on the existence of specific files in the current working directory). # Output - A tuple containing two elements: `data_2020` and `data_2021`. These elements should be arrays holding the data for the respective years. # Example Assume you have `inventory_2020.csv` and `inventory_2021.csv` in your current working directory. ```python data_2020, data_2021 = load_inventory_data() print(data_2020.shape, data_2021.shape) ``` Would output the shapes of the loaded datasets, e.g., `(1000, <columns>) (1200, <columns>)`. # Required Libraries - `os` - `json` - `pandas` # Notes 1. You should ensure the `load_inventory_data()` function correctly leverages `os.getcwd()`. 2. Provide a placeholder `fill_empty_values` function for handling empty values. # Placeholder for fill_empty_values ```python def fill_empty_values(data_2020, data_2021): # Your code to fill empty values here return data_2020, data_2021 ```","solution":"import os import json import pandas as pd def fill_empty_values(data_2020, data_2021): Placeholder function to fill empty values in the datasets. # For the sake of simplicity, let\'s fill empty values with -1. data_2020.fillna(-1, inplace=True) data_2021.fillna(-1, inplace=True) return data_2020, data_2021 def load_inventory_data(): current_directory = os.getcwd() json_files_exist = ( os.path.exists(os.path.join(current_directory, \'data_2020.json\')) and os.path.exists(os.path.join(current_directory, \'data_2021.json\')) ) if json_files_exist: print(\\"Stored files exist\\") with open(\'data_2020.json\', \'r\') as file_2020, open(\'data_2021.json\', \'r\') as file_2021: data_2020 = json.load(file_2020) data_2021 = json.load(file_2021) print(\\"Files loaded onto data structures\\") else: print(\\"Stored files do not exist\\") data_2020 = pd.read_csv(\'inventory_2020.csv\') data_2021 = pd.read_csv(\'inventory_2021.csv\') print(\\"Empty values filled\\") data_2020, data_2021 = fill_empty_values(data_2020, data_2021) with open(\'data_2020.json\', \'w\') as file_2020, open(\'data_2021.json\', \'w\') as file_2021: json.dump(data_2020.to_dict(orient=\'records\'), file_2020) json.dump(data_2021.to_dict(orient=\'records\'), file_2021) print(\\"Files saved\\") data_2020 = data_2020.to_dict(orient=\'records\') data_2021 = data_2021.to_dict(orient=\'records\') return data_2020, data_2021"},{"question":"You are tasked with developing a function `simulate_traffic_light` that emulates the behavior of a traffic light system using the `time` library. The function should repeatedly cycle through the states of a traffic light (red, green, and yellow) with specific durations for each light. The states and their respective durations are as follows: 1. Red light: 7 seconds 2. Green light: 5 seconds 3. Yellow light: 2 seconds Your function should handle the timing controls using `time.sleep` and print the current state of the traffic light in the console. The entire cycle (red, green, yellow) should be repeated at least 3 times. # Example Output When the `simulate_traffic_light` function is called, it should produce an output similar to: ``` Red Light ... (after 7 seconds) Green Light ... (after 5 seconds) Yellow Light ... (after 2 seconds) Red Light ... (after 7 seconds) Green Light ... (after 5 seconds) Yellow Light ... (after 2 seconds) Red Light ... (after 7 seconds) Green Light ... (after 5 seconds) Yellow Light ... (after 2 seconds) ``` # Function Signature ```python def simulate_traffic_light() -> None: pass ```","solution":"import time def simulate_traffic_light(): Simulates a traffic light system. The cycle repeats at least 3 times with the following durations: Red light for 7 seconds, Green light for 5 seconds, and Yellow light for 2 seconds. for _ in range(3): print(\\"Red Light\\") time.sleep(7) print(\\"Green Light\\") time.sleep(5) print(\\"Yellow Light\\") time.sleep(2)"},{"question":"You are required to implement a Python function `min_max_median` that calculates three specific statistical values from a given list of integers. The function should return the minimum value, the maximum value, and the median value of the list. Use the `numpy` library to aid in your computations. The function signature should be as follows: ```python def min_max_median(numbers: List[int]) -> Tuple[int, int, float]: Calculate the minimum, maximum, and median of a list of integers. Args: - numbers (List[int]): A list of integers. Returns: - Tuple[int, int, float]: A tuple containing the minimum value, the maximum value, and the median value. ``` The function should adhere to the following steps: 1. Compute the minimum value of the list. 2. Compute the maximum value of the list. 3. Compute the median value of the list. The median value is: - The middle element if the list length is odd. - The average of the two middle elements if the list length is even. You are expected to handle the case of an empty list by raising a `ValueError`. Example: ```python numbers = [7, 1, 5, 3, 9, 2] min_val, max_val, median_val = min_max_median(numbers) print(min_val, max_val, median_val) # Output: (1, 9, 4.0) ``` Your task is to complete the function `min_max_median` to achieve the expected behavior using the numpy library.","solution":"from typing import List, Tuple import numpy as np def min_max_median(numbers: List[int]) -> Tuple[int, int, float]: Calculate the minimum, maximum, and median of a list of integers. Args: - numbers (List[int]): A list of integers. Returns: - Tuple[int, int, float]: A tuple containing the minimum value, the maximum value, and the median value. if not numbers: raise ValueError(\\"The list is empty\\") min_value = np.min(numbers) max_value = np.max(numbers) median_value = np.median(numbers) return min_value, max_value, median_value"},{"question":"You are given a dataset containing information about books in a library. The data is stored in a CSV file, with each row representing a book. The CSV file has columns: \\"Title\\", \\"Author\\", \\"Genre\\", \\"Year\\", and \\"Copies Available\\". You need to write a function named `analyze_library_data` that processes this dataset and provides several insights. Specifically, your function should: 1. Load the CSV file into a pandas DataFrame. 2. Print the number of unique authors. 3. Create and print a DataFrame showing the number of books in each genre, sorted by the number of books in descending order. The resulting DataFrame should have columns \\"Genre\\" and \\"Number of Books\\". 4. Print the titles of books that were published after the year 2000 and have more than 5 copies available. 5. Print the number of unique genres available in the library. **Function Signature:** ```python def analyze_library_data(datafile: str) -> None: pass ``` **Parameters:** - `datafile` (str): Path to the CSV file containing the library books data. **Returns:** - This function does not return any value. It only prints the required outputs. To solve this problem, you must use the `pandas.DataFrame` class to perform the data analysis. The `pandas.read_csv` function will be helpful for loading the CSV data into a DataFrame. **Example:** Given the following sample rows in `LibraryBooks.csv`: ``` Title,Author,Genre,Year,Copies Available The Great Gatsby,F. Scott Fitzgerald,Fiction,1925,3 To Kill a Mockingbird,Harper Lee,Fiction,1960,2 The Catcher in the Rye,J.D. Salinger,Fiction,1951,4 The Road,Cormac McCarthy,Post-apocalyptic,2006,6 Harry Potter and the Philosopher\'s Stone,J.K. Rowling,Fantasy,1997,7 The Hunger Games,Suzanne Collins,Dystopian,2008,10 ``` - Number of unique authors: 6 - Number of books by genre: ``` Genre Number of Books Fiction 3 Fantasy 1 Dystopian 1 Post-apocalyptic 1 ``` - Titles of books published after 2000 with more than 5 copies available: ``` The Road The Hunger Games ``` - Number of unique genres: 4","solution":"import pandas as pd def analyze_library_data(datafile: str) -> None: # Load the CSV file into a pandas DataFrame df = pd.read_csv(datafile) # 1. Print the number of unique authors num_unique_authors = df[\'Author\'].nunique() print(f\'Number of unique authors: {num_unique_authors}\') # 2. Create and print a DataFrame showing the number of books in each genre in descending order genre_counts = df[\'Genre\'].value_counts().reset_index() genre_counts.columns = [\'Genre\', \'Number of Books\'] print(genre_counts) # 3. Print the titles of books published after the year 2000 and have more than 5 copies available recent_books = df[(df[\'Year\'] > 2000) & (df[\'Copies Available\'] > 5)] if not recent_books.empty: print(\'Titles of books published after 2000 with more than 5 copies available:\') for title in recent_books[\'Title\']: print(title) # 4. Print the number of unique genres available in the library num_unique_genres = df[\'Genre\'].nunique() print(f\'Number of unique genres: {num_unique_genres}\')"},{"question":"You are working on a project that involves analyzing sales data from a retail store. The sales data is stored in a CSV file named \'sales.csv\', which contains the following columns: \'TransactionID\', \'Date\', \'CustomerID\', \'ItemID\', \'Quantity\', and \'Price\'. Your task is to create a function that loads the data from the CSV file into a Pandas DataFrame, filters out transactions where the total sale amount (Quantity * Price) is less than a specified threshold, and returns the resulting DataFrame. To accomplish this, create a function named `filter_sales_data` with the following specifications: 1. It takes an optional parameter named `threshold` with a default value of 50. 2. It reads the data from \'sales.csv\' into a DataFrame. 3. It filters out transactions where the total sale amount (Quantity * Price) is less than the specified threshold. 4. It returns the filtered DataFrame. **Function Signature:** ```python def filter_sales_data(threshold=50): # implementation here ``` **Example:** If \'sales.csv\' contains: ``` TransactionID,Date,CustomerID,ItemID,Quantity,Price 1,2021-01-01,123,A,2,30 2,2021-01-02,124,B,1,25 3,2021-01-03,125,C,3,20 ``` Calling `filter_sales_data(50)` should filter out the transaction with TransactionID 2 because its total sale amount is less than 50, resulting in a DataFrame with: ``` TransactionID Date CustomerID ItemID Quantity Price 0 1 2021-01-01 123 A 2 30 2 3 2021-01-03 125 C 3 20 ``` **Note:** For the purposes of this problem, assume \'sales.csv\' is present and correctly formatted in the current working directory.","solution":"import pandas as pd def filter_sales_data(threshold=50): Loads sales data from \'sales.csv\', filters out transactions where the total sale amount (Quantity * Price) is less than the specified threshold, and returns the resulting DataFrame. Parameters: threshold (float): The sale amount threshold for filtering transactions. Returns: pd.DataFrame: The filtered DataFrame. # Load the data from the CSV file df = pd.read_csv(\'sales.csv\') # Calculate the total sale amount for each transaction df[\'TotalSaleAmount\'] = df[\'Quantity\'] * df[\'Price\'] # Filter out transactions where the total sale amount is less than the threshold filtered_df = df[df[\'TotalSaleAmount\'] >= threshold] # Drop the TotalSaleAmount column as it\'s not needed in the final output filtered_df = filtered_df.drop(columns=[\'TotalSaleAmount\']) return filtered_df"},{"question":"In this task, you are required to implement a function `common_elements` that takes two integer lists and returns a list of their common elements in sorted order. Your function should ensure that the resulting list does not contain duplicate elements, irrespective of the order or presence of duplicates in the input lists. Here\'s the function signature you should implement: ```python def common_elements(list1, list2): pass ``` **Requirements:** 1. **Input**: - `list1`: A list of integers. - `list2`: Another list of integers. 2. **Output**: - A list of integers representing the elements that are common to both input lists, sorted in ascending order with no duplicates. 3. **Constraints**: - The input lists can have zero or more integers. - The resulting list should be sorted and should not have duplicate values even if the same element is present multiple times in the input lists. Examples of how the `common_elements` function will be used: ```python # Example 1 list1 = [1, 2, 2, 3] list2 = [2, 3, 3, 4] # common_elements should return [2, 3] # Example 2 list1 = [5, 10, 15, 20] list2 = [10, 20, 30, 40] # common_elements should return [10, 20] # Example 3 list1 = [] list2 = [1, 2, 3] # common_elements should return [] # Example 4 list1 = [1, 2, 3] list2 = [4, 5, 6] # common_elements should return [] ``` **Key Concepts to Understand**: - List operations: Merging, converting to set to remove duplicates, and intersection of two sets. - Sorting: Sorting the resulting list in ascending order. - Memory and performance considerations: Ensure the solution is efficient with respect to both time and space complexity.","solution":"def common_elements(list1, list2): Returns a list of the common elements between list1 and list2, sorted in ascending order and without duplicates. # Convert both lists to sets to remove duplicates and use intersection to find common elements set1 = set(list1) set2 = set(list2) common_set = set1.intersection(set2) # Convert the resulting set to a sorted list return sorted(common_set)"},{"question":"--- You are tasked with implementing a function called `aggregate_and_plot` that aggregates data from a Pandas DataFrame by a specified category and then generates a bar plot visualization to compare the aggregated values. The function should make use of the `matplotlib` library for plotting. # Requirements 1. **Function Signature:** ```python def aggregate_and_plot(df, category_col, value_col, agg_func=\'sum\', title=\'Aggregate Plot\', xlabel=\'Categories\', ylabel=\'Values\', rotation=0): ``` 2. **Parameters:** - `df`: Pandas DataFrame - The data that contains the values to be aggregated and plotted. - `category_col`: str - The name of the column to group by (categorical variable). - `value_col`: str - The name of the column containing the values to be aggregated. - `agg_func`: str - The aggregation function to use (e.g., \'sum\', \'mean\', \'median\', etc.). Default is \'sum\'. - `title`: str - The title of the plot. Default is \'Aggregate Plot\'. - `xlabel`: str - The label of the x-axis. Default is \'Categories\'. - `ylabel`: str - The label of the y-axis. Default is \'Values\'. - `rotation`: int - The rotation angle of the x-ticks. Default is 0. 3. **Details:** - The function should group the DataFrame by `category_col` and aggregate the `value_col` using the specified `agg_func`. - Use `matplotlib.pyplot.bar` to create a bar plot where the x-axis represents the unique categories and the y-axis represents the aggregated values. - Set the specified title, xlabel, ylabel, and rotation for the plot. 4. **Expected Output:** The function should display the bar plot with appropriate labels, title, and customized x-tick rotations. # Example Usage ```python import pandas as pd # Example DataFrame data = {\'Category\': [\'A\', \'B\', \'A\', \'A\', \'B\', \'C\'], \'Value\': [10, 20, 30, 10, 50, 30]} df = pd.DataFrame(data) # Generating the aggregate plot aggregate_and_plot(df, category_col=\'Category\', value_col=\'Value\', agg_func=\'sum\', title=\'Category Value Sum\', xlabel=\'Category\', ylabel=\'Total Value\', rotation=45) ``` You need to implement the `aggregate_and_plot` function as described.","solution":"import pandas as pd import matplotlib.pyplot as plt def aggregate_and_plot(df, category_col, value_col, agg_func=\'sum\', title=\'Aggregate Plot\', xlabel=\'Categories\', ylabel=\'Values\', rotation=0): Aggregates data from a DataFrame by a specified category and generates a bar plot visualization. Parameters: - df: DataFrame - The data that contains the values to be aggregated and plotted. - category_col: str - The name of the column to group by (categorical variable). - value_col: str - The name of the column containing the values to be aggregated. - agg_func: str - The aggregation function to use (default is \'sum\'). - title: str - The title of the plot (default is \'Aggregate Plot\'). - xlabel: str - The label of the x-axis (default is \'Categories\'). - ylabel: str - The label of the y-axis (default is \'Values\'). - rotation: int - The rotation angle of the x-ticks (default is 0). aggregated_data = df.groupby(category_col)[value_col].agg(agg_func) aggregated_data.plot(kind=\'bar\') plt.title(title) plt.xlabel(xlabel) plt.ylabel(ylabel) plt.xticks(rotation=rotation) plt.show()"},{"question":"In this problem, you will be working with files and directories using Python\'s `os` module. This module provides a portable way of using operating system dependent functionality. Write a function called `list_files_with_extension(directory, extension)` that takes two parameters: - `directory`: the path to a directory, as a string, - `extension`: a file extension, as a string (e.g., \\".txt\\", \\".py\\"). The function should return a list of filenames in the given directory that have the specified extension. The filenames should not include the directory part, only the name of the file itself. # Example: ```python list_files_with_extension(\\"/path/to/folder\\", \\".txt\\") ``` If the directory \\"/path/to/folder\\" contains the files `notes.txt`, `image.png`, and `summary.txt`, the function should return: ```python [\\"notes.txt\\", \\"summary.txt\\"] ``` # Requirements: - Use the `os.listdir` method to get a list of files and directories in the given directory. - Use the `os.path.isfile` method to check if a given path is a file. - Use the `str.endswith` method to filter files by the specified extension. # Constraints: - Assume the directory path provided is valid and the directory exists. - Assume the extension parameter will always be a valid string starting with a dot (e.g., \\".txt\\"). - The function should return an empty list if no files match the given extension.","solution":"import os def list_files_with_extension(directory, extension): Returns a list of filenames in the given directory that have the specified extension. :param directory: path to a directory :param extension: file extension (e.g., \\".txt\\", \\".py\\") :return: list of filenames with the given extension return [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f)) and f.endswith(extension)]"},{"question":"You are required to build a function that reads a CSV file containing employee information and returns a summary report. Specifically, you need to create a function named `employee_summary()` that: - Accepts a single parameter, `file_path`, which is the path to a CSV file. - Extracts the following columns from the CSV file: `Employee Name`, `Department`, and `Salary`. - Computes the total number of employees. - Computes the highest salary in the dataset. - Computes the average salary per department. The function should return a dictionary with three keys: 1. `total_employees`: an integer representing the total number of employees. 2. `highest_salary`: a floating-point number representing the highest salary in the dataset. 3. `average_salary_per_department`: a dictionary where keys are department names and values are the average salaries of those departments. Assume the CSV file has the column headers `Employee Name`, `Department`, and `Salary` in the first row. Here\'s an example of what the CSV file might look like: ``` Employee Name,Department,Salary Alice,Engineering,95000 Bob,HR,70000 Charlie,Engineering,105000 David,Sales,65000 Eve,HR,72000 ``` Your task is to implement the `employee_summary()` function to produce the required summary report.","solution":"import csv from collections import defaultdict def employee_summary(file_path): Generates employee summary report from a CSV file. file_path: str - path to the CSV file Returns: dict - a summary report as described in the prompt total_employees = 0 highest_salary = 0.0 department_salaries = defaultdict(list) with open(file_path, mode=\'r\') as file: csv_reader = csv.DictReader(file) for row in csv_reader: total_employees += 1 salary = float(row[\'Salary\']) if salary > highest_salary: highest_salary = salary department_salaries[row[\'Department\']].append(salary) average_salary_per_department = {dept: sum(salaries)/len(salaries) for dept, salaries in department_salaries.items()} return { \'total_employees\': total_employees, \'highest_salary\': highest_salary, \'average_salary_per_department\': average_salary_per_department }"},{"question":"Given a Python list of strings `str_list`, you need to write a function `palindrome_count()` that returns a detailed summary dictionary containing the following information: 1. **TOTAL STRINGS**: The total number of strings in the list. 2. **PALINDROMES**: The number of palindrome strings in the list. A palindrome is a string that reads the same backward as forward. 3. **NON-PALINDROMES**: The number of non-palindrome strings in the list. 4. **LONGEST PALINDROME**: The longest palindrome string in the list. If there is a tie, return any one of them. 5. **SHORT PALINDROME**: The shortest palindrome string in the list. If there is a tie, return any one of them. A string comparison should be case-insensitive, meaning \\"Racecar\\" is considered a palindrome. Here\'s the detailed breakdown of steps: 1. Calculate the total number of strings in the list. 2. Filter and count the number of palindrome and non-palindrome strings. 3. Identify the longest and shortest palindrome strings. **Function Signature** ```python from typing import List, Dict def palindrome_count(str_list: List[str]) -> Dict[str, int]: # Your solution here ```","solution":"from typing import List, Dict def palindrome_count(str_list: List[str]) -> Dict[str, int]: def is_palindrome(s: str) -> bool: s = s.lower() return s == s[::-1] total_strings = len(str_list) palindromes = [s for s in str_list if is_palindrome(s)] non_palindromes = total_strings - len(palindromes) if palindromes: longest_palindrome = max(palindromes, key=len) shortest_palindrome = min(palindromes, key=len) else: longest_palindrome = \\"\\" shortest_palindrome = \\"\\" return { \\"TOTAL STRINGS\\": total_strings, \\"PALINDROMES\\": len(palindromes), \\"NON-PALINDROMES\\": non_palindromes, \\"LONGEST PALINDROME\\": longest_palindrome, \\"SHORT PALINDROME\\": shortest_palindrome }"},{"question":"You are asked to implement a function that calculates and returns the critical path for a given set of tasks in a project. The input will be a list of tasks, where each task is represented by its duration and its list of dependent tasks (i.e., tasks that must be completed before the given task can start). The critical path is defined as the longest sequence of tasks in the project that determines the minimum time required to complete the project. Function Name: `find_critical_path` Function Parameters: 1. `tasks` (dict): A dictionary where the keys are task names (str) and the values are tuples with two elements: the first element is the duration of the task (int) and the second element is a list of task names (str) that must be completed before this task can start. The function should return a list of task names representing the critical path in order of execution. Example: ```python tasks = { \'A\': (3, []), \'B\': (2, [\'A\']), \'C\': (4, [\'A\']), \'D\': (5, [\'B\', \'C\']), \'E\': (2, [\'D\']) } result = find_critical_path(tasks) print(result) # Expected output: # [\'A\', \'C\', \'D\', \'E\'] ``` Explanation: - Task \'A\' has no dependencies and takes 3 units of time. - Task \'B\' depends on \'A\' and takes 2 units of time. - Task \'C\' depends on \'A\' and takes 4 units of time. - Task \'D\' depends on both \'B\' and \'C\', and it takes 5 units of time. - Task \'E\' depends on \'D\' and takes 2 units of time. In this case, the critical path is the sequence of tasks that takes the longest time to complete, which is [\'A\', \'C\', \'D\', \'E\'] with a total duration of 14 units.","solution":"def find_critical_path(tasks): from collections import defaultdict, deque # Calculate earliest completion times for each node (topological order) indegree = defaultdict(int) graph = defaultdict(list) duration = {} for task, (dur, deps) in tasks.items(): duration[task] = dur if not deps: indegree[task] = 0 for dep in deps: graph[dep].append(task) indegree[task] += 1 # Topological sort using Kahn\'s algorithm queue = deque([node for node in tasks if indegree[node] == 0]) earliest_completion = {node: duration[node] for node in queue} while queue: current = queue.popleft() for neighbor in graph[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if earliest_completion[current] + duration[neighbor] > earliest_completion.get(neighbor, 0): earliest_completion[neighbor] = earliest_completion[current] + duration[neighbor] # Identify the node with maximum earliest completion time end_task = max(earliest_completion, key=earliest_completion.get) max_duration = earliest_completion[end_task] # Trace back to find the critical path critical_path = [] current = end_task while current: critical_path.append(current) max_time, next_task = -1, None for pred in tasks[current][1]: if earliest_completion.get(pred, 0) > max_time: max_time = earliest_completion[pred] next_task = pred current = next_task return critical_path[::-1]"},{"question":"In this problem, you are required to write a Python function to calculate the frequency of each character in a given string and display a bar chart using the `matplotlib` library. The function should visualize the frequencies with a bar chart where each bar represents a character from the string. Your function should be named `plot_char_frequencies` and should accept one parameter: 1. `input_string`: A string for which you need to calculate and visualize the character frequencies. The function should create a bar chart with the following requirements: - The x-axis should be labeled \\"Characters\\". - The y-axis should be labeled \\"Frequency\\". - Each bar should represent a character from the string, with its height corresponding to the frequency of that character. - The plot should have a title that reads \\"Character Frequency in String\\". - All characters should be displayed in the order they first appear in the string. Here is the function signature you need to complete: ```python import matplotlib.pyplot as plt from collections import Counter def plot_char_frequencies(input_string): Plots the frequency of each character in the input string. Parameters: input_string : str The input string. # You will implement this function. ```","solution":"import matplotlib.pyplot as plt from collections import Counter def plot_char_frequencies(input_string): Plots the frequency of each character in the input string. Parameters: input_string : str The input string. # Calculate the frequency of each character char_counter = Counter(input_string) # Extract the characters and their frequencies characters = list(char_counter.keys()) frequencies = list(char_counter.values()) # Create the bar chart plt.figure(figsize=(10, 6)) plt.bar(characters, frequencies, color=\'skyblue\') plt.xlabel(\'Characters\') plt.ylabel(\'Frequency\') plt.title(\'Character Frequency in String\') plt.show()"},{"question":"You are given a dataset containing information about books and their reviews from two different websites, \'gr\' (Goodreads) and \'az\' (Amazon). The dataset is in a CSV file named `book_reviews.csv` with multi-level column headers. Your goal is to create a function named `convert_reviews_to_json` that reads the CSV file into a DataFrame and converts individual reviews from two corresponding JSONL files named `reviews_gr.jsonl` and `reviews_az.jsonl` into JSON files. # Instructions: 1. Read the CSV file (`book_reviews.csv`) into a Pandas DataFrame with multi-level column headers. 2. For each source key (\'gr\' and \'az\'), perform the following: - Print a message indicating the source being processed. - Open the corresponding JSONL file. - Iterate through each JSON object (each line in the JSONL file is a separate JSON object). - Check if the `book_id` from the JSON object exists in the DataFrame. - If it does, append the review to a list in a dictionary where keys are `book_id` and values are lists of review details. - Save each dictionary to a JSON file named `book_reviews_{key}.json`. 3. Use the `pandas.read_csv` function to read the CSV file. # Example Usage: ```python convert_reviews_to_json() ``` # Input Files: 1. `book_reviews.csv`: ``` gr az book_id,title,...,book_id,title,... 1,Book A,...,101,Book AA,... 2,Book B,...,102,Book BB,... ... ``` 2. `gr/reviews.jsonl` and `az/reviews.jsonl`: ``` {\\"book_id\\": \\"1\\", \\"review_id\\": \\"r1\\", ...} {\\"book_id\\": \\"2\\", \\"review_id\\": \\"r2\\", ...} {\\"book_id\\": \\"101\\", \\"review_id\\": \\"r101\\", ...} ... ``` # JSON Output: 1. `book_reviews_gr.json`: ```json { \\"1\\": [ {\\"book_id\\": \\"1\\", \\"review_id\\": \\"r1\\", ...}, ... ], ... } ``` 2. `book_reviews_az.json`: ```json { \\"101\\": [ {\\"book_id\\": \\"101\\", \\"review_id\\": \\"r101\\", ...}, ... ], ... } ```","solution":"import pandas as pd import json import os def convert_reviews_to_json(): # Read the CSV file into a Pandas DataFrame with multi-level column headers df = pd.read_csv(\'book_reviews.csv\', header=[0, 1]) # Process each source key for source_key in [\'gr\', \'az\']: print(f\\"Processing source: {source_key}\\") jsonl_file_path = f\'reviews_{source_key}.jsonl\' json_output_path = f\'book_reviews_{source_key}.json\' reviews_dict = {} if not os.path.exists(jsonl_file_path): continue # Open the corresponding JSONL file with open(jsonl_file_path, \'r\') as jsonl_file: for line in jsonl_file: review = json.loads(line.strip()) # Check if the book_id from the JSON object exists in the DataFrame book_id = str(review.get(\'book_id\')) if book_id in df[source_key, \'book_id\'].astype(str).values: if book_id not in reviews_dict: reviews_dict[book_id] = [] # Append the review to the list in the dictionary reviews_dict[book_id].append(review) # Save the dictionary to a JSON file with open(json_output_path, \'w\') as json_file: json.dump(reviews_dict, json_file, indent=4)"},{"question":"You need to write a Python function `merge_sorted_arrays` that takes two sorted lists of integers and merges them into a single sorted list. You should not use any built-in sorting functions for this task. The two input lists may be of different lengths. # Instructions: 1. **Function Name**: `merge_sorted_arrays` 2. **Input**: The function receives two arguments: - `arr1` (list of int): A sorted list of integers. - `arr2` (list of int): Another sorted list of integers. 3. **Output**: The function returns a single list (list of int) which is a sorted merge of the input lists. # Example Usage: ```python arr1 = [1, 3, 5, 7] arr2 = [2, 4, 6, 8] merged = merge_sorted_arrays(arr1, arr2) print(merged) # Output: [1, 2, 3, 4, 5, 6, 7, 8] ``` # Example 2: ```python arr1 = [0, 9, 10] arr2 = [1, 2, 3, 4, 5] merged = merge_sorted_arrays(arr1, arr2) print(merged) # Output: [0, 1, 2, 3, 4, 5, 9, 10] ``` # Requirements: 1. Merge the two input arrays into a single sorted array. 2. Do not use any built-in Python functions that perform sorting. 3. Demonstrate the merging process step-by-step to ensure the final list is sorted.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted lists into a single sorted list. Parameters: arr1 (list of int): A sorted list of integers. arr2 (list of int): Another sorted list of integers. Returns: list of int: A single sorted merged list. merged = [] i, j = 0, 0 # Traverse both arrays and merge them into one sorted list while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # If there are remaining elements in arr1 while i < len(arr1): merged.append(arr1[i]) i += 1 # If there are remaining elements in arr2 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"Your task is to write a function named `unique_elements` that takes two lists as input and returns a new list containing the elements that are unique to each list. This means the function should identify which elements are present in one list but not the other. The function `unique_elements` should adhere to the following requirements: 1. **Input:** - Two lists of integers, `list1` and `list2`. 2. **Output:** - A list of integers sorted in ascending order, containing the elements unique to each list. 3. **Constraints:** - Each list can contain any number of elements, including zero. - The elements within each input list are unique but there may be overlapping elements between the two lists. 4. **Example:** ```python # Example 1: list1 = [1, 2, 3, 4] list2 = [3, 4, 5, 6] print(unique_elements(list1, list2)) # Output: [1, 2, 5, 6] # Example 2: list1 = [10, 20, 30] list2 = [20, 30, 40, 50] print(unique_elements(list1, list2)) # Output: [10, 40, 50] # Example 3: list1 = [] list2 = [1, 2, 3] print(unique_elements(list1, list2)) # Output: [1, 2, 3] # Example 4: list1 = [1, 2] list2 = [1, 2] print(unique_elements(list1, list2)) # Output: [] ``` # Function Signature: ```python def unique_elements(list1: list, list2: list) -> list: pass ```","solution":"def unique_elements(list1, list2): Returns a sorted list of elements that are unique to each of the given lists. set1 = set(list1) set2 = set(list2) unique_to_list1 = set1 - set2 unique_to_list2 = set2 - set1 result = sorted(unique_to_list1.union(unique_to_list2)) return result"},{"question":"You are developing a library management system and need to create a function to track and manage overdue books. Each book has a return date, and if the current date surpasses this return date, the book is considered overdue. Write a **Python function** named `calculate_overdue_books` that processes a list of books and their return dates, and returns a list of book titles that are overdue. # Specifications: 1. **Function Name:** `calculate_overdue_books` 2. **Inputs:** - `books` (list of tuples): A list of tuples where each tuple contains: - `title` (string): The title of the book. - `return_date` (string): The return date in the format `YYYY-MM-DD`. - `current_date` (string): The current date in the format `YYYY-MM-DD`. 3. **Output:** - Returns a list of book titles (strings) that are overdue. # Assumptions: 1. The date format will always be valid and in the format `YYYY-MM-DD`. 2. If no books are overdue, the function should return an empty list. 3. The `books` list will have at least one book. # Example: ```python books = [ (\\"To Kill a Mockingbird\\", \\"2023-10-01\\"), (\\"1984\\", \\"2023-08-15\\"), (\\"The Great Gatsby\\", \\"2023-09-21\\") ] current_date = \\"2023-10-10\\" overdue_books = calculate_overdue_books(books, current_date) print(overdue_books) # Example Output: [\\"To Kill a Mockingbird\\", \\"1984\\", \\"The Great Gatsby\\"] ``` # Requirements: - You **must** use the built-in `datetime` module for date comparisons.","solution":"from datetime import datetime def calculate_overdue_books(books, current_date): Returns a list of overdue book titles based on the given current date. Parameters: books (list of tuples): A list where each tuple contains the book title (string) and return date (string in \'YYYY-MM-DD\' format). current_date (string): The current date in \'YYYY-MM-DD\' format. Returns: list: List of book titles (strings) that are overdue. overdue_books = [] current_date_obj = datetime.strptime(current_date, \\"%Y-%m-%d\\") for title, return_date in books: return_date_obj = datetime.strptime(return_date, \\"%Y-%m-%d\\") if return_date_obj < current_date_obj: overdue_books.append(title) return overdue_books"},{"question":"You are tasked with writing a Python function that accepts a string containing a mathematical expression involving non-negative integers and the operators `\'+\', \'-\', \'*\', \'/\'`. Your function should evaluate and return the result of the expression as an integer. Ensure that the mathematical operations follow the standard operator precedence (PEMDAS/BODMAS). Division should truncate towards zero, similar to integer division in Python. **Function Signature:** ```python def evaluate_expression(expression: str) -> int: pass ``` **Input:** - `expression` (str): A string containing a valid mathematical expression consisting of non-negative integers and the operators `+, -, *, /`. **Output:** - The function should return the result of the expression as an integer. **Example:** ```python expr = \\"3+2*2\\" result = evaluate_expression(expr) print(result) # Should output: 7 expr = \\" 3/2 \\" result = evaluate_expression(expr) print(result) # Should output: 1 expr = \\" 3+5 / 2 \\" result = evaluate_expression(expr) print(result) # Should output: 5 ``` **Requirements:** - **Do not use** built-in `eval` method for evaluating the expression. - Implement the evaluation using a manual parsing technique, such as utilizing stacks or other appropriate data structures. In this problem, you will practice parsing and evaluating expressions while adhering to standard mathematical operator precedence. This exercise is designed to reinforce your understanding of manual expression evaluation in programming.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression involving non-negative integers and the operators +, -, *, /. The division operator truncates towards zero. def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(int(left / right)) # Truncating division towards zero def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(\'(\') elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() # removing the \'(\' elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = val * 10 + int(expression[i]) i += 1 values.append(val) i -= 1 # because we have an extra i++ in while loop else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"You are tasked with creating a mini weather forecast system using a public weather API. Specifically, you will be retrieving and parsing JSON data from the OpenWeatherMap API to gather current weather information for a specified city and format it into a Python dictionary. This exercise will help you learn how to make API requests, handle and parse JSON data, as well as process weather information. Write a function named `fetch_weather_data` that takes two parameters: - `api_key` (a string representing your API key for the OpenWeatherMap service). - `city` (a string representing the city name for which the weather data is to be fetched). The function should perform the following operations: 1. Construct the URL for the OpenWeatherMap API request using the provided API key and city name. 2. Make an HTTP GET request to the constructed URL to fetch the weather data. 3. Retrieve the content of the response and convert it from a JSON string to a Python dictionary using `json.loads`. 4. Extract relevant information such as temperature, weather description, humidity, and wind speed from the JSON data. 5. Return the relevant weather information in a Python dictionary with keys: `temperature`, `description`, `humidity`, and `wind_speed`. You must use the `json` library\'s `loads` function to handle the JSON parsing. Ensure that your function handles potential errors gracefully, such as network issues or invalid JSON content. Function Signature: ```python def fetch_weather_data(api_key: str, city: str) -> dict: ``` **Example:** If the function is called with: ```python api_key = \\"your_api_key_here\\" city = \\"London\\" result = fetch_weather_data(api_key, city) ``` And the weather data for London is: ```json { \\"main\\": { \\"temp\\": 288.55, \\"humidity\\": 82 }, \\"weather\\": [ { \\"description\\": \\"light rain\\" } ], \\"wind\\": { \\"speed\\": 4.12 } } ``` The function should return: ```python { \\"temperature\\": 288.55, \\"description\\": \\"light rain\\", \\"humidity\\": 82, \\"wind_speed\\": 4.12 } ```","solution":"import requests import json def fetch_weather_data(api_key: str, city: str) -> dict: Fetches the current weather data for the specified city using the OpenWeatherMap API. Parameters: - api_key: str : API key to access the OpenWeatherMap service. - city: str : City name for which the weather data is to be fetched. Returns: - dict : Dictionary containing temperature, description, humidity, and wind_speed. url = f\\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}\\" try: response = requests.get(url) response.raise_for_status() weather_data = response.json() weather_info = { \\"temperature\\": weather_data[\\"main\\"][\\"temp\\"], \\"description\\": weather_data[\\"weather\\"][0][\\"description\\"], \\"humidity\\": weather_data[\\"main\\"][\\"humidity\\"], \\"wind_speed\\": weather_data[\\"wind\\"][\\"speed\\"] } return weather_info except requests.exceptions.RequestException as e: print(f\\"HTTP Request failed: {e}\\") return {\\"error\\": \\"HTTP Request failed\\", \\"details\\": str(e)} except (json.JSONDecodeError, KeyError) as e: print(f\\"JSON decoding failed or unexpected JSON structure: {e}\\") return {\\"error\\": \\"JSON decoding failed\\", \\"details\\": str(e)}"},{"question":"Create a function `convert_temperatures(file_name: str) -> None` that reads a file containing temperature records and converts all temperatures from Fahrenheit to Celsius. The file is structured such that each line contains a date and a temperature in Fahrenheit, separated by a space: ``` YYYY-MM-DD Temperature_F ``` For example: ``` 2023-10-01 68.0 2023-10-02 72.5 2023-10-03 65.0 ``` Your task is to: 1. Read the contents of the file specified by `file_name`. 2. Convert each temperature from Fahrenheit to Celsius using the formula: ``` Celsius = (Fahrenheit - 32) * 5/9 ``` 3. Write the results to a new file named `converted_<file_name>`. Each line in the new file should contain the same date and the converted temperature in Celsius, formatted to one decimal place, separated by a space: ``` YYYY-MM-DD Temperature_C ``` For example: ``` 2023-10-01 20.0 2023-10-02 22.5 2023-10-03 18.3 ``` Provide the implementation of the function `convert_temperatures(file_name: str) -> None` that meets these requirements.","solution":"def convert_temperatures(file_name: str) -> None: Reads a file containing temperature records in Fahrenheit, converts each temperature to Celsius, and writes the results to a new file. # Read the contents of the file with open(file_name, \'r\') as file: lines = file.readlines() # Prepare the output to be written to the new file converted_lines = [] for line in lines: date, temp_f = line.strip().split() temp_f = float(temp_f) temp_c = (temp_f - 32) * 5/9 converted_lines.append(f\\"{date} {temp_c:.1f}n\\") # Write the converted temperatures to the new file converted_file_name = f\\"converted_{file_name}\\" with open(converted_file_name, \'w\') as file: file.writelines(converted_lines)"},{"question":"In this exercise, you are required to implement a function `sort_groups` that processes a list of tuples where each tuple contains a name and a group number. Your task is to sort the names in each group separately and then output the sorted list of tuples. Function Signature ```python def sort_groups(groups): ... ``` Parameters - `groups` (list of tuples): A list of tuples, where each tuple contains a string (name) and an integer (group number). Returns - `sorted_groups` (list of tuples): A list of tuples where the names are sorted within each group. Instructions 1. Group the names by their group numbers. 2. Sort the names within each group alphabetically. 3. Combine the sorted names back into the list of tuples, maintaining the group structure. # Example ```python groups = [(\\"Alice\\", 1), (\\"Bob\\", 2), (\\"Charlie\\", 1), (\\"Dan\\", 2), (\\"Eve\\", 1)] # Calling sort_groups function sorted_groups = sort_groups(groups) print(sorted_groups) ``` Expected Output ```python [(\'Alice\', 1), (\'Charlie\', 1), (\'Eve\', 1), (\'Bob\', 2), (\'Dan\', 2)] ``` # Hints - You may use a dictionary to group the names by their group number. - Use the `sorted` function to sort names within each group. # Constraints - You may assume that the list of tuples contains at least one element and that all group numbers are positive integers. - The names are case-sensitive and should be sorted in case-sensitive order.","solution":"def sort_groups(groups): from collections import defaultdict # Creating a dictionary to hold groups group_dict = defaultdict(list) # Grouping the names by their group number for name, group in groups: group_dict[group].append(name) # Sorting the names within each group for group in group_dict: group_dict[group].sort() # Gathering all the sorted groups back into the list of tuples sorted_groups = [] for group in sorted(group_dict.keys()): for name in group_dict[group]: sorted_groups.append((name, group)) return sorted_groups"},{"question":"Create a function that takes a list of integers and returns a dictionary containing the frequency of each unique integer in the list. Only include integers that are repeated at least once in the list. The function should output a dictionary where the keys are the repeated integers and the values are their corresponding counts. The function should output: dict: A dictionary where keys are the repeated integers and values are their corresponding counts. You should write self-contained code starting with: ``` def count_repeated_integers(input_list): ``` Example output: ``` count_repeated_integers([4, 4, 6, 2, 2, 2, 3, 1, 5, 5, 5, 1]) # Should return {4: 2, 2: 3, 1: 2, 5: 3} ```","solution":"def count_repeated_integers(input_list): Takes a list of integers and returns a dictionary containing the frequency of each unique integer in the list that is repeated at least once. frequency_dict = {} for num in input_list: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 # Filter the dictionary to keep only those integers that have a count > 1 repeated_dict = {key: value for key, value in frequency_dict.items() if value > 1} return repeated_dict"},{"question":"You are developing a function that analyzes the structure of sentences. Your goal is to write a function that reads a list of sentences, counts the number of words in each sentence, and identifies whether the sentence is a question. **Function Name:** `sentence_analysis` **Function Signature:** ```python def sentence_analysis(sentences: List[str]) -> List[Tuple[int, bool]]: ``` **Input Parameters:** 1. `sentences` (List[str]): A list of strings where each string represents a sentence. **Output:** - The function should return a list of tuples. Each tuple contains: 1. The count of words in the sentence. 2. A boolean indicating whether the sentence is a question (True if it ends with a question mark, False otherwise). **Requirements:** - A word is defined as any sequence of characters separated by whitespace. - Use string methods to split the sentences into words and to check the last character of each sentence. **Example:** Given the following `sentences`: ```python [ \\"How are you?\\", \\"I am fine\\", \\"What is your name?\\", \\"My name is John\\" ] ``` Your function would return: ```python [ (3, True), (3, False), (4, True), (4, False) ] ```","solution":"from typing import List, Tuple def sentence_analysis(sentences: List[str]) -> List[Tuple[int, bool]]: result = [] for sentence in sentences: words = sentence.split() is_question = sentence.endswith(\'?\') result.append((len(words), is_question)) return result"},{"question":"Create a function named `balanced_parentheses_substring` that finds the length of the longest substring of balanced parentheses in a given string. A balanced parentheses substring is defined as a substring consisting entirely of pairs of matching opening and closing parentheses in the correct order. # Input - `s`: A string consisting of the characters \'(\' and \')\', with a length of up to 10,000 characters. # Output - An integer representing the length of the longest balanced parentheses substring. # Function Signature ```python def balanced_parentheses_substring(s: str) -> int: pass ``` # Requirements - You should use an efficient algorithm that runs in linear time, O(n). - Proper error handling for edge cases such as empty strings should be included. - Both iterative (using stack or two-pointer technique) and dynamic programming approaches are acceptable; you should choose the method you are most comfortable with. # Example ```python s = \\"((()))()\\" print(balanced_parentheses_substring(s)) # Output: 8 s = \\"(()))\\" print(balanced_parentheses_substring(s)) # Output: 4 s = \\"\\" print(balanced_parentheses_substring(s)) # Output: 0 s = \\"(()()\\" print(balanced_parentheses_substring(s)) # Output: 4 ``` # Guidelines 1. You may use additional lists or dictionaries to keep track of indices or counts. 2. Consider edge cases where there are no balanced parentheses. 3. Make sure to test your function with multiple test cases to verify that it works correctly and efficiently.","solution":"def balanced_parentheses_substring(s: str) -> int: if not s: return 0 stack = [] max_len = 0 last_invalid = -1 for i, char in enumerate(s): if char == \'(\': stack.append(i) else: if stack: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: max_len = max(max_len, i - last_invalid) else: last_invalid = i return max_len"},{"question":"In the realm of data processing, handling large datasets requires efficient algorithms to maintain performance. One common problem is finding the longest substring of unique characters within a given string, which is especially useful in text analysis and encoding algorithms. You need to implement a function named `find_longest_unique_substring` that determines the longest substring with all unique characters in a provided string. The function `find_longest_unique_substring` should take the following parameter: - `s`: a string consisting of alphabetic characters and/or digits. The function should return the longest substring where no character repeats. If there are multiple substrings with the same maximum length, return the first one that appears. # Function Signature: ```python def find_longest_unique_substring(s: str) -> str: pass ``` # Examples: 1. `find_longest_unique_substring(\\"abcabcbb\\")` should return `\\"abc\\"` because the substring \\"abc\\" has all unique characters and is the longest. 2. `find_longest_unique_substring(\\"bbbbb\\")` should return `\\"b\\"` because all characters in the string are the same, so the longest unique character substring is \\"b\\". 3. `find_longest_unique_substring(\\"pwwkew\\")` should return `\\"wke\\"` because \\"wke\\" is the longest substring with unique characters. Although another substring \\"kew\\" also has a length of 3, \\"wke\\" appears first. The solution should efficiently handle the string using a sliding window technique or appropriate data structures to manage and track unique characters and their positions in the string.","solution":"def find_longest_unique_substring(s: str) -> str: n = len(s) if n == 0: return \\"\\" char_map = {} start = 0 max_length = 0 longest_substring = \\"\\" for end in range(n): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end current_length = end - start + 1 if current_length > max_length: max_length = current_length longest_substring = s[start:end+1] return longest_substring"},{"question":"You are tasked with writing a function that normalizes the case of characters in a given string. The function should return a new string where the first character of each word is capitalized, while all other characters are converted to lowercase. The words in the string are separated by spaces. The function you need to implement is named `normalize_case`. It should take one argument: 1. `input_string` - a string containing the sentence to be normalized. Your function needs to handle any leading, trailing, or multiple spaces between words and return the correctly formatted string. # Function Signature ```python def normalize_case(input_string): ... ``` # Example ```python input_string = \\" heLLo wORLD! this is an ExAmple \\" result = normalize_case(input_string) print(result) # Expected Output: \\"Hello World! This Is An Example\\" ``` # Requirements: - Use string manipulation methods to normalize the case of each word. - Handle multiple spaces, leading and trailing spaces, and ensure the words are separated by a single space in the resulting string.","solution":"def normalize_case(input_string): Normalizes the case of characters in the input string. Capitalizes the first character of each word and converts all other characters to lowercase. Handles multiple spaces, leading and trailing spaces. Parameters: input_string (str): The string containing the sentence to be normalized. Returns: str: The normalized string. words = input_string.split() normalized_words = [word.capitalize() for word in words] return \' \'.join(normalized_words)"},{"question":"You need to write a function named `is_anagram` that checks if two provided strings are anagrams of each other. Two strings are considered anagrams if they contain exactly the same characters, but in a different order. The function should ignore spaces and capitalization. The function `is_anagram` should adhere to the following specifications: 1. It takes two input parameters, `str1` and `str2`, both of which are strings. 2. The function should ignore all spaces and is case-insensitive. 3. It returns `True` if `str1` and `str2` are anagrams, otherwise it returns `False`. **Example:** ``` is_anagram(\\"Listen\\", \\"Silent\\") ``` The function should return: ``` True ``` **Example:** ``` is_anagram(\\"Hello, World!\\", \\"Hel world doll\\") ``` The function should return: ``` False ``` Your task is to implement this function to check if the given strings are anagrams or not.","solution":"def is_anagram(str1, str2): Checks if two provided strings are anagrams of each other. It ignores spaces and capitalization. clean_str1 = \'\'.join(e.lower() for e in str1 if e.isalnum()) clean_str2 = \'\'.join(e.lower() for e in str2 if e.isalnum()) return sorted(clean_str1) == sorted(clean_str2)"},{"question":"This function takes a list of tuples, where each tuple contains a pair of integers representing coordinate points (x, y). It calculates the Euclidean distance between all possible pairs of points and returns a dictionary with the pairs of points as keys and their corresponding distances as values. Your task is to write self-contained code starting with: ``` import math def calculate_distances(points): ```","solution":"import math def calculate_distances(points): Calculates the Euclidean distance between each pair of coordinate points. Args: points (list of tuples): A list where each tuple contains a pair of integers representing coordinate points (x, y). Returns: dict: A dictionary with pairs of points as keys and their corresponding Euclidean distances as values. distances = {} for i, point1 in enumerate(points): for j, point2 in enumerate(points): if i < j: # Ensure each pair is only considered once distance = math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) distances[(point1, point2)] = distance return distances"},{"question":"Read a text file containing lines of comma-separated values representing rows in a table. Each row contains a mixture of numeric and non-numeric values. Create a function that reads the file, transforms it into a DataFrame, and calculates the maximum value of each numeric column. The function should return the names of the numeric columns along with their respective maximum values. If there are no numeric columns, raise a ValueError. The function should output: ``` dict: A dictionary where keys are numeric column names and values are their maximum values. ``` You should write self-contained code starting with: ``` import pandas as pd def task_func(file_path): ```","solution":"import pandas as pd def task_func(file_path): Reads a text file containing lines of comma-separated values representing rows in a table. Transforms it into a DataFrame, and calculates the maximum value of each numeric column. Args: - file_path: str, path to the text file Returns: - dict: A dictionary where keys are numeric column names and values are their maximum values. Raises: - ValueError: If there are no numeric columns in the DataFrame. # Read the file into a DataFrame df = pd.read_csv(file_path) # Select numeric columns numeric_df = df.select_dtypes(include=\'number\') # Check if there are no numeric columns if numeric_df.empty: raise ValueError(\\"No numeric columns found in the file.\\") # Calculate the maximum value for each numeric column max_values_dict = numeric_df.max().to_dict() return max_values_dict"},{"question":"In this problem, you will write a function called `find_palindromic_substrings` using Python. This function will help users understand how to identify and count palindromic substrings within a given string. Your task is to implement the `find_palindromic_substrings(s)` function, which takes one parameter: - `s`: The input string in which we need to find the palindromic substrings. The function should perform the following steps: 1. Identify all the palindromic substrings present in the input string. 2. Return the count of these palindromic substrings. Below is the function signature: ```python def find_palindromic_substrings(s): pass ``` **Requirements:** - You must consider all possible substrings of the input string. - A palindromic substring reads the same forwards and backwards. - The output should be the total number of palindromic substrings found in the input string. # Example Usage ```python print(find_palindromic_substrings(\\"abc\\")) ``` Expected Output: ``` 3 ``` Explanation: The palindromic substrings are \\"a\\", \\"b\\", \\"c\\". ```python print(find_palindromic_substrings(\\"aaa\\")) ``` Expected Output: ``` 6 ``` Explanation: The palindromic substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\". Using this function, you will improve your ability to work with strings and identify palindromes, which is a common problem in various coding challenges.","solution":"def find_palindromic_substrings(s): Returns the count of palindromic substrings in the input string s. n = len(s) count = 0 for center in range(2 * n - 1): left = center // 2 right = left + center % 2 while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 return count"},{"question":"You are tasked with writing a function, `merge_sorted_files(file_paths: List[str]) -> List[int]`, that reads integers from multiple sorted files and merges them into a single sorted list. Each file contains a list of integers, one per line, in ascending order. Your function should efficiently merge these sorted lists into one sorted list. To achieve this, utilize Python\'s `heapq` module to maintain a min-heap that helps with merging the sorted lists in an efficient manner. # Function Signature ```python def merge_sorted_files(file_paths: List[str]) -> List[int]: ``` # Parameters - `file_paths` (List[str]): A list of file paths, where each file contains a sorted list of integers, one per line. # Returns - `List[int]`: A single sorted list containing all integers from the input files. Constraints - You may assume that all files contain valid integers, and are non-empty. - All integers in the files fit within the standard integer range. # Example If the input files `file1.txt`, `file2.txt`, and `file3.txt` contain: ``` file1.txt: 1 4 5 file2.txt: 1 3 4 file3.txt: 2 6 ``` Calling `merge_sorted_files([\'file1.txt\', \'file2.txt\', \'file3.txt\'])` should return: ```python [1, 1, 2, 3, 4, 4, 5, 6] ```","solution":"import heapq from typing import List def merge_sorted_files(file_paths: List[str]) -> List[int]: Reads integers from multiple sorted files and merges them into a single sorted list. min_heap = [] file_iters = [] # Create an iterator for each file for file in file_paths: f = open(file, \'r\') file_iters.append(iter(f.readlines())) # Initialize the heap with the first element from each file\'s iterator for i, it in enumerate(file_iters): val = next(it, None) if val is not None: heapq.heappush(min_heap, (int(val), i)) result = [] # Extract the smallest elements from the heap and push the next element from the same iterator while min_heap: val, i = heapq.heappop(min_heap) result.append(val) next_val = next(file_iters[i], None) if next_val is not None: heapq.heappush(min_heap, (int(next_val), i)) return result"},{"question":"** You are tasked with implementing a function to handle the processing of a specific file format we\'ll call a \\"Nested Words File\\". This file contains words organized in levels of nesting using parentheses. Each word is guaranteed to be separated by a single space, and no word will contain parentheses themselves. Your goal is to create a function `process_nested_words(filename)` that will: 1. Read the entire file. 2. Convert the words into a nested list structure based on the given parenthesis levels. 3. Preserving the order of words and structure. # File Example A file with nested words would look like this: ``` apple ( orange ( banana grape ) cherry ( mango ) ) ``` # Function Signature ```python def process_nested_words(filename: str) -> list: pass ``` # Explanation The nested structure provided should be parsed into a nested list: - Words at the root level are directly included in the root list. - Words inside a pair of parentheses are nested into a sublist. # Expected Output For the given file example, the function should return: ```python [\'apple\', [\'orange\', [\'banana\', \'grape\'], \'cherry\', [\'mango\']]] ``` # Guidelines 1. Handle file reading in a straightforward manner using standard Python I/O functions. 2. Use recursion or a stack-based approach to correctly parse the nested structure. 3. Ensure that all words and sublists are in the correct order as per their nesting levels. **Example Usage** Given the content of the file `\'nested_words.txt\'` as: ``` hello ( world ( how are ) you ( doing today ) ) bye ``` Calling `process_nested_words(\'nested_words.txt\')` should return: ```python [\'hello\', [\'world\', [\'how\', \'are\'], \'you\', [\'doing\', \'today\']], \'bye\'] ``` **","solution":"def process_nested_words(filename: str) -> list: def parse_words(words): stack = [[]] for word in words: if word == \'(\': new_list = [] stack[-1].append(new_list) stack.append(new_list) elif word == \')\': stack.pop() else: stack[-1].append(word) return stack[0] with open(filename, \\"r\\") as file: content = file.read().strip() words = content.replace(\'(\', \' ( \').replace(\')\', \' ) \').split() return parse_words(words)"},{"question":"You are tasked with creating a basic inventory management system for a store using Python. This system should allow the user to add, remove, and update the quantity of items in the inventory through a menu-driven interface. Additionally, the system should be able to display the current inventory in a formatted manner. You need to implement a function named `manage_inventory` which fulfills the following requirements: 1. Continuously displays a menu to the user and performs actions based on user input until the user chooses to exit. 2. The menu should have the following options: - Add a new item (the user should provide the item name and quantity). - Remove an existing item (the user should provide the item name). - Update the quantity of an existing item (the user should provide the item name and new quantity). - Display the current inventory. - Exit. 3. The inventory is stored as a dictionary where the keys are item names (strings) and the values are quantities (integers). Your task is to write the `manage_inventory` function that implements this logic. The function should include input validation to ensure that quantities are non-negative integers and items to be removed or updated must exist in the inventory. Example menu display: ``` 1. Add item 2. Remove item 3. Update item quantity 4. Display inventory 5. Exit Select an option: ```","solution":"def manage_inventory(): inventory = {} while True: print(\\"n1. Add item\\") print(\\"2. Remove item\\") print(\\"3. Update item quantity\\") print(\\"4. Display inventory\\") print(\\"5. Exit\\") option = input(\\"Select an option: \\") if option == \\"1\\": item = input(\\"Enter the item name: \\").strip() quantity = input(\\"Enter the item quantity: \\").strip() if not quantity.isdigit() or int(quantity) < 0: print(\\"Invalid quantity. Please enter a non-negative integer.\\") continue inventory[item] = inventory.get(item, 0) + int(quantity) print(f\\"Added {item} with quantity {quantity}.\\") elif option == \\"2\\": item = input(\\"Enter the item name to remove: \\").strip() if item in inventory: del inventory[item] print(f\\"Removed {item} from inventory.\\") else: print(\\"Item not found in inventory.\\") elif option == \\"3\\": item = input(\\"Enter the item name to update: \\").strip() if item in inventory: quantity = input(\\"Enter the new quantity: \\").strip() if not quantity.isdigit() or int(quantity) < 0: print(\\"Invalid quantity. Please enter a non-negative integer.\\") continue inventory[item] = int(quantity) print(f\\"Updated {item} to quantity {quantity}.\\") else: print(\\"Item not found in inventory.\\") elif option == \\"4\\": if inventory: print(\\"nCurrent inventory:\\") for item, quantity in inventory.items(): print(f\\"{item}: {quantity}\\") else: print(\\"The inventory is empty.\\") elif option == \\"5\\": print(\\"Exiting.\\") break else: print(\\"Invalid option. Please select a valid option.\\")"},{"question":"You are tasked with writing a function `minimal_jump_game(arr: List[int]) -> bool` that determines if you can reach the last index of the list starting at the first index. Each element in the array represents the maximum number of indices you can jump forward from that position. You need to ensure that the algorithm has an optimal time complexity and handles edge cases effectively. Below is the detailed description of the input and expected output: 1. **Input:** - A list of non-negative integers `arr` where each element represents your maximum jump length at that position. 2. **Output:** - A boolean value `True` if you can reach the last index; `False` otherwise. # Example: Input: ```python arr = [2, 3, 1, 1, 4] ``` Output: ```python True ``` Explanation: - Start at index 0. You can jump at most 2 steps, so move to index 1. - From index 1, you can jump at most 3 steps, which directly takes you to the last index. # Example: Input: ```python arr = [3, 2, 1, 0, 4] ``` Output: ```python False ``` Explanation: - Start at index 0. You can jump at most 3 steps, so move to index 1, 2, or 3. - If you move to index 3, you can\'t jump any further: index 4 is unreachable. # Function Signature: ```python def minimal_jump_game(arr: List[int]) -> bool: pass ``` # Requirements: - You must use a greedy algorithm to achieve an optimal solution. - Cover edge cases such as an empty list or a list with a single element.","solution":"from typing import List def minimal_jump_game(arr: List[int]) -> bool: Determines if you can reach the last index of the list starting at the first index. Each element in the array represents the maximum number of indices you can jump forward from that position. max_reachable = 0 target = len(arr) - 1 for i, jump in enumerate(arr): if i > max_reachable: return False max_reachable = max(max_reachable, i + jump) if max_reachable >= target: return True return True"},{"question":"You are to implement a function called `simulate_traffic` that uses an agent-based modeling approach to simulate the flow of cars through an intersection. This simulation should help assess the performance of different traffic light strategies for minimizing waiting time at the intersection. The `simulate_traffic` function should follow these specifications: - **Function Name:** `simulate_traffic` - **Parameters:** 1. `num_cars`: An integer representing the number of cars approaching the intersection. 2. `light_strategy`: A function that takes the current state of the intersection and returns an action that controls the traffic lights (either switching lights or leaving them as is). 3. `max_steps`: An integer specifying the number of steps (time units) to run the simulation. 4. `arrival_rate` (default=0.1): A float representing the probability of a new car arriving at the intersection each time unit. 5. `initial_state` (default=None): An optional dictionary representing the initial state of the intersection and traffic lights. If `None`, use the default starting state. - **Returns:** A dictionary containing: 1. `average_waiting_time`: A float representing the average waiting time of all cars that passed through the intersection. 2. `max_waiting_time`: A float representing the maximum waiting time of any car that passed through the intersection. 3. `total_cars_processed`: An integer representing the total number of cars that successfully passed through the intersection. The intersection should be modeled such that cars can arrive from four directions (north, east, south, west), and traffic lights can switch between either `NS` (allowing north-south traffic) or `EW` (allowing east-west traffic) at each time unit based on the `light_strategy` provided. # Example: ```python import random def simple_light_strategy(state): # Switch lights every 5 steps if state[\'step\'] % 5 == 0: if state[\'lights\'] == \'NS\': return \'EW\' else: return \'NS\' return state[\'lights\'] initial_intersection_state = { \'lights\': \'NS\', \'queues\': { \'N\': [], \'E\': [], \'S\': [], \'W\': [] }, \'step\': 0 } results = simulate_traffic( num_cars=50, light_strategy=simple_light_strategy, max_steps=100, arrival_rate=0.1, initial_state=initial_intersection_state ) print(\\"Average Waiting Time:\\", results[\'average_waiting_time\']) print(\\"Max Waiting Time:\\", results[\'max_waiting_time\']) print(\\"Total Cars Processed:\\", results[\'total_cars_processed\']) ``` # Constraints: - The function should ensure that the `light_strategy` can adapt to the dynamic state of the intersection. - New cars should be added to random queues based on the `arrival_rate`. - Cars should be processed according to the traffic light status at each step. - Properly handle initial states and simulate the intersection\'s operation using the agent-based approach. Libraries Required: - `random`","solution":"import random def simulate_traffic(num_cars, light_strategy, max_steps, arrival_rate=0.1, initial_state=None): Simulate the flow of cars through an intersection using an agent-based modeling approach. Parameters: - num_cars: int, number of cars approaching the intersection. - light_strategy: function, controls the traffic lights based on current state. - max_steps: int, number of steps to run the simulation. - arrival_rate: float, probability of new car arrival (default=0.1). - initial_state: dict, initial state of the intersection and traffic lights (default=None). Returns: - dict with average_waiting_time, max_waiting_time, total_cars_processed. # Initialize the state of the intersection if initial_state is None: state = { \'lights\': \'NS\', \'queues\': { \'N\': [], \'E\': [], \'S\': [], \'W\': [] }, \'step\': 0 } else: state = initial_state car_id = 0 total_waiting_time = 0 max_waiting_time = 0 total_cars_processed = 0 for step in range(max_steps): state[\'step\'] = step # Add new cars based on arrival rate for direction in [\'N\', \'E\', \'S\', \'W\']: if random.random() < arrival_rate and car_id < num_cars: state[\'queues\'][direction].append({\'id\': car_id, \'waiting_time\': 0}) car_id += 1 # Update waiting times for all cars in the queues for direction in [\'N\', \'E\', \'S\', \'W\']: for car in state[\'queues\'][direction]: car[\'waiting_time\'] += 1 # Execute light strategy state[\'lights\'] = light_strategy(state) # Process cars based on the traffic light status if state[\'lights\'] == \'NS\': for direction in [\'N\', \'S\']: if state[\'queues\'][direction]: car = state[\'queues\'][direction].pop(0) total_waiting_time += car[\'waiting_time\'] max_waiting_time = max(max_waiting_time, car[\'waiting_time\']) total_cars_processed += 1 else: for direction in [\'E\', \'W\']: if state[\'queues\'][direction]: car = state[\'queues\'][direction].pop(0) total_waiting_time += car[\'waiting_time\'] max_waiting_time = max(max_waiting_time, car[\'waiting_time\']) total_cars_processed += 1 average_waiting_time = total_waiting_time / total_cars_processed if total_cars_processed > 0 else 0 return { \'average_waiting_time\': average_waiting_time, \'max_waiting_time\': max_waiting_time, \'total_cars_processed\': total_cars_processed }"},{"question":"You are required to write a function `check_file_permissions` that examines the permissions of a specified file and checks if the current user has read, write, and execute permissions. **Requirements:** 1. **File Existence:** - If the specified file does not exist, the function should return the string \\"File does not exist.\\" 2. **Permissions Check:** - The function should check the current user\'s permissions on the specified file. - The function should return a dictionary with the following keys: - `\'read\'`: `True` if the file is readable, `False` otherwise. - `\'write\'`: `True` if the file is writable, `False` otherwise. - `\'execute\'`: `True` if the file is executable, `False` otherwise. 3. **Permissions Checking Mechanisms:** - Use the `os.access` method to check for the required permissions. **Function Signature:** ```python def check_file_permissions(file_path: str) -> dict: pass ``` **Example:** ```python # Assuming the file \'example.txt\' exists and the user has read, write, and execute permissions check_file_permissions(\'example.txt\') # Expected Output: {\'read\': True, \'write\': True, \'execute\': True} # Assuming the file \'no_file.txt\' does not exist check_file_permissions(\'no_file.txt\') # Expected Output: \\"File does not exist\\" ```","solution":"import os def check_file_permissions(file_path: str) -> dict: Checks the read, write, and execute permissions of the specified file for the current user. Parameters: file_path (str): The path to the file to be checked. Returns: If the file exists, a dictionary with the boolean values of keys \'read\', \'write\', and \'execute\'. Otherwise, returns the string \\"File does not exist\\". if not os.path.exists(file_path): return \\"File does not exist\\" permissions = { \'read\': os.access(file_path, os.R_OK), \'write\': os.access(file_path, os.W_OK), \'execute\': os.access(file_path, os.X_OK) } return permissions"},{"question":"You are required to implement a function `unique_subsets(nums: List[int]) -> List[List[int]]` that generates all possible unique subsets from a list of integers. The subsets within the result should be in non-descending order and the result itself should contain no duplicate subsets. The function should perform the following tasks: 1. Generate all possible subsets from the input list. 2. Ensure that each subset is unique and sorted in non-descending order. 3. Return the list of unique subsets sorted in lexicographical order (considering the list elements as strings for sorting purposes). **Function Signature:** ```python def unique_subsets(nums: List[int]) -> List[List[int]]: ``` **Input:** - `nums`: A list of integers, which may contain duplicates. **Output:** - A list of unique subsets, with each subset sorted in ascending order and the list of subsets sorted in lexicographical order. **Example:** ```python nums = [1, 2, 2] result = unique_subsets(nums) print(result) ``` Expected Output: ```plaintext [[], [1], [1, 2], [1, 2, 2], [2], [2, 2]] ``` **Constraints:** - The input list will contain integers, which can be positive or negative. - The length of the input list will be between 0 and 10 inclusive.","solution":"from typing import List def unique_subsets(nums: List[int]) -> List[List[int]]: def backtrack(start, path): result.add(tuple(path)) for i in range(start, len(nums)): # Include nums[i] in the current path backtrack(i + 1, path + [nums[i]]) nums.sort() result = set() backtrack(0, []) sorted_result = sorted(list(result)) return [list(subset) for subset in sorted_result]"},{"question":"# Reverse Words in a String You need to create a Python function that reverses the words in a given sentence. A word is defined as a sequence of non-space characters, and words in the sentence are separated by single spaces. The function should maintain the original spaces between words but reverse the order of the words themselves. # Function Signature The function signature should be defined as: ```python def reverse_words(sentence: str) -> str: ``` # Parameters - `sentence` (str): The input sentence consisting of words separated by single spaces. # Example Usage ```python sentence = \\"Hello world this is a test\\" result = reverse_words(sentence) print(result) # Output should be: \\"test a is this world Hello\\" ``` # Requirements - The provided sentence may contain leading or trailing spaces, which should be retained in the resultant reversed sentence. - Multiple consecutive spaces between words should be interpreted as a single space and should not be modified in the reversed sentence. - Your function must not modify the case of the characters in the words. # Constraints - The length of `sentence` will be in the range `[1, 10^4]`. - Consider all characters in `sentence` to be ASCII characters. # Hint - Consider using Python\'s built-in string manipulation methods to split the sentence into words, reverse the word list, and join them back into a sentence.","solution":"def reverse_words(sentence: str) -> str: Reverses the order of words in a given sentence. Args: sentence (str): The input sentence consisting of words separated by single spaces. Returns: str: The sentence with the order of words reversed, maintaining original leading/trailing spaces. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"You need to create a function named `merge_sorted_arrays` that merges two sorted arrays into a single sorted array without using Python\'s built-in `sorted` function or any other sorting library. This task aims at evaluating your understanding of algorithms and ability to manipulate lists efficiently. # Function Specifications: - **Function Name**: `merge_sorted_arrays` - **Input Parameters**: - `arr1`: A list of integers sorted in non-decreasing order. - `arr2`: A list of integers sorted in non-decreasing order. - **Output**: - Returns a single list that consists of all elements from `arr1` and `arr2`, sorted in non-decreasing order. # Requirements: - Implement the merging process manually. - The algorithm should efficiently handle the merge process in linear time, O(n + m), where n and m are the lengths of `arr1` and `arr2`, respectively. # Example: ```python arr1 = [1, 3, 5, 7] arr2 = [2, 4, 6, 8] merged_array = merge_sorted_arrays(arr1, arr2) print(merged_array) ``` Expected Output: ```python [1, 2, 3, 4, 5, 6, 7, 8] ``` # Additional Example: ```python arr1 = [0, 6, 10] arr2 = [1, 2, 7, 8] merged_array = merge_sorted_arrays(arr1, arr2) print(merged_array) ``` Expected Output: ```python [0, 1, 2, 6, 7, 8, 10] ``` Your implementation should focus on merging the two sorted lists manually, ensuring the resulting list is also sorted. This will test your ability to manipulate lists and implement an efficient merging algorithm.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list of int): A list of integers sorted in non-decreasing order. arr2 (list of int): A list of integers sorted in non-decreasing order. Returns: list of int: A single list that consists of all elements from arr1 and arr2, sorted in non-decreasing order. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are given a list of integers that represents the time taken (in minutes) for different tasks to be completed. Your objective is to write a function `min_max_time_difference(times: List[int]) -> int` that calculates the minimum number of minutes required to complete the tasks such that no two tasks are completed simultaneously. This is achieved by ensuring the time difference between any two tasks is maximized. Here\'s the approach: - Sort the list of task times. - Calculate the differences between consecutive task times. - Maximize the minimum difference between the times. The function should then return the minimized maximum time difference. Write a function with the following signature: ```python def min_max_time_difference(times: List[int]) -> int: pass ``` Example Given: ```python times = [1, 3, 5, 8] ``` The function should sort the times and then compute the maximum of the minimum differences between consecutive times. Expected output: ```python min_max_time_difference([1, 3, 5, 8]) # Output: 2 # The minimum time differences in sorted order [1, 3, 5, 8] are: # |3-1| = 2, |5-3| = 2, |8-5| = 3 # The maximum of these minimum differences is 2. ```","solution":"def min_max_time_difference(times): Returns the minimized maximum time difference between tasks. if not times or len(times) <= 1: return 0 # Sort the task times times.sort() # Calculate the differences between consecutive times differences = [times[i+1] - times[i] for i in range(len(times) - 1)] # The minimum of the maximum time differences return min(differences) if differences else 0"},{"question":"Your task is to implement a function `predict_house_price(features)` that predicts the price of a house based on its features using the scikit-learn library. You will be using the `LinearRegression` model for this purpose. The function should take a pandas DataFrame `features` with the following columns: - \'Area\': Area of the house in square feet - \'Bedrooms\': Number of bedrooms - \'Bathrooms\': Number of bathrooms - \'Stories\': Number of stories - \'GarageSpaces\': Number of garage spaces The function should follow these steps: 1. Split the provided DataFrame into training (80%) and test (20%) sets using `train_test_split` from `sklearn.model_selection`. 2. Fit a `LinearRegression` model to the training data. 3. Predict the house prices for the test data. 4. Return the predicted house prices as a pandas Series, indexed the same as the test set\'s indices. Make sure to import all necessary libraries and handle any potential exceptions, such as missing values or invalid data types, in the input DataFrame. ```python import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression def predict_house_price(features): # Your code here pass ```","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.exceptions import NotFittedError def predict_house_price(features): if features.isnull().values.any(): raise ValueError(\\"Input DataFrame contains NaN values.\\") X = features[[\'Area\', \'Bedrooms\', \'Bathrooms\', \'Stories\', \'GarageSpaces\']] # Dummy target prices for the sake of demonstration y = features[\'Price\'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) model = LinearRegression() model.fit(X_train, y_train) predictions = model.predict(X_test) return pd.Series(predictions, index=X_test.index)"},{"question":"You have been provided a dataset containing daily temperatures for a specific city, spanning an entire year. The dataset consists of one column representing the daily temperatures in degrees Celsius. Your task is to create a function called `plot_temperature_anomalies(temperatures)` that visualizes this data to highlight temperature anomalies. The function should: 1. Accept a 1D NumPy array `temperatures` as input. 2. Calculate the mean temperature for the entire dataset. 3. Plot the daily temperatures using a time axis. 4. Highlight anomalies where temperatures deviate significantly from the mean using a different color. 5. Include a legend to differentiate between normal temperatures and anomalies. 6. Set appropriate titles and labels for the plot. 7. Customize the x-axis to show month names instead of day numbers. 8. Use a grid for better visibility of data points. 9. Ensure the plot uses a predefined range for the y-axis. Here is the skeleton of the function to be completed: ```python import numpy as np import matplotlib.pyplot as plt import matplotlib.dates as mdates def plot_temperature_anomalies(temperatures): # Your code goes here pass ```","solution":"import numpy as np import matplotlib.pyplot as plt import matplotlib.dates as mdates from datetime import datetime, timedelta def plot_temperature_anomalies(temperatures): Plot the daily temperatures and highlight anomalies. Parameters: temperatures (np.ndarray): 1D array of daily temperatures. # Check if the length of temperatures array is 365 or 366 (leap year) if len(temperatures) not in [365, 366]: raise ValueError(\\"The length of the temperatures array must be 365 or 366.\\") # Calculate mean temperature mean_temp = np.mean(temperatures) # Define threshold for anomalies (example: +2 or -2 degrees from mean) threshold = 2 anomalies = np.abs(temperatures - mean_temp) > threshold # Generate dates for the x-axis start_date = datetime(year=2023, month=1, day=1) dates = [start_date + timedelta(days=i) for i in range(len(temperatures))] # Plotting plt.figure(figsize=(14, 7)) plt.plot(dates, temperatures, label=\'Daily Temperatures\', color=\'blue\') plt.scatter(np.array(dates)[anomalies], temperatures[anomalies], color=\'red\', label=\'Anomalies\') # Highlight anomalies with a different color plt.axhline(mean_temp, color=\'green\', linestyle=\'--\', label=\'Mean Temperature\') # Set titles and labels plt.title(\'Daily Temperatures with Anomalies\') plt.xlabel(\'Date\') plt.ylabel(\'Temperature (°C)\') # Customize x-axis to show month names plt.gca().xaxis.set_major_locator(mdates.MonthLocator()) plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(\'%b\')) # Enable grid for better visibility plt.grid(True) # Set predefined range for the y-axis plt.ylim([np.min(temperatures) - 5, np.max(temperatures) + 5]) # Show legend plt.legend() # Show plot plt.show()"},{"question":"Write a Python function that computes the Nth Fibonacci number using dynamic programming. The function should be able to handle values of N up to 10,000 efficiently. The Fibonacci sequence is defined as: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n ≥ 2 The function should be implemented as `fibonacci(n: int) -> int`, where: - `n` (int): An integer representing the position in the Fibonacci sequence (0 ≤ n ≤ 10,000). The function should use a bottom-up dynamic programming approach to build up the solution for the Nth Fibonacci number. # Example Usage: ```python print(fibonacci(0)) # Output: 0 print(fibonacci(1)) # Output: 1 print(fibonacci(10)) # Output: 55 print(fibonacci(100)) # Output: 354224848179261915075 ```","solution":"def fibonacci(n: int) -> int: Computes the Nth Fibonacci number using dynamic programming. if n == 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[0] = 0 fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a function called `schedule_meeting` that assists in organizing meeting times for a workday. The function should perform the following tasks: 1. Prompt the user to input the available meeting start time in HH:MM format (24-hour format). 2. Prompt the user to input the meeting duration in minutes. 3. Check if the meeting start time and duration conflict with existing meetings stored in `meetingSchedule`, which is a global list of dictionaries. Each dictionary in the list contains: - `start`: a string representing the start time in HH:MM format. - `end`: a string representing the end time in HH:MM format. 4. If the new meeting conflicts with an existing one, print a message \\"Conflicting meeting\\". 5. If there are no conflicts, calculate the meeting\'s end time. 6. Add the new meeting to the `meetingSchedule` list in the correct chronological order. **Function Signature:** ```python def schedule_meeting(): # The body of the function goes here ``` Your implementation should handle time manipulation effectively to check for meeting conflicts and accurately calculate end times. **Example Usage:** ``` Assuming `meetingSchedule` initially contains: [ {\\"start\\": \\"09:00\\", \\"end\\": \\"10:00\\"}, {\\"start\\": \\"11:00\\", \\"end\\": \\"12:00\\"} ] When `schedule_meeting()` is called: 1. Prompt the user to enter a start time (e.g., \\"10:00\\"). 2. Prompt the user to enter the duration in minutes (e.g., 60). 3. Check for conflicts: - If there is a conflict (e.g., another meeting from 09:00 to 10:00), print \\"Conflicting meeting\\". - If no conflict, calculate the end time (10:00 + 60 minutes = 11:00). 4. Since there is no conflict, update `meetingSchedule`: [ {\\"start\\": \\"09:00\\", \\"end\\": \\"10:00\\"}, {\\"start\\": \\"10:00\\", \\"end\\": \\"11:00\\"}, {\\"start\\": \\"11:00\\", \\"end\\": \\"12:00\\"} ] ``` **Example Input/Output:** ``` Enter meeting start time (HH:MM): 10:00 Enter meeting duration (minutes): 60 Scheduled meeting from 10:00 to 11:00 ``` Assumptions: - Meetings do not overlap partially. - Inputs are valid (correct format and within a 24-hour day).","solution":"from datetime import datetime, timedelta meetingSchedule = [] def schedule_meeting(): # Prompt user input start_time_str = input(\\"Enter meeting start time (HH:MM): \\") duration_minutes = int(input(\\"Enter meeting duration (minutes): \\")) # Parse input times start_time = datetime.strptime(start_time_str, \\"%H:%M\\") end_time = start_time + timedelta(minutes=duration_minutes) # Check for conflicts for meeting in meetingSchedule: existing_start = datetime.strptime(meeting[\\"start\\"], \\"%H:%M\\") existing_end = datetime.strptime(meeting[\\"end\\"], \\"%H:%M\\") if not (end_time <= existing_start or start_time >= existing_end): print(\\"Conflicting meeting\\") return # Add new meeting to schedule in chronological order new_meeting = {\\"start\\": start_time_str, \\"end\\": end_time.strftime(\\"%H:%M\\")} meetingSchedule.append(new_meeting) meetingSchedule.sort(key=lambda x: x[\\"start\\"]) print(f\\"Scheduled meeting from {start_time_str} to {end_time.strftime(\'%H:%M\')}\\")"},{"question":"In this problem, you are asked to leverage the PIL (Pillow) library to process and analyze a set of images stored inside a directory. This task aims to create a function called `process_images` that reads all image files in a given directory, performs specified transformations, and returns a summary DataFrame. Specifically, your function should: 1. Take a directory path containing images as input. 2. Read all image files in the directory (assume they are all in .jpg format). 3. Convert each image to grayscale. 4. Resize each image to a specified dimension (128x128). 5. Calculate the average pixel intensity for each image. 6. Return a Pandas DataFrame summarizing the processed data. Function signature: ```python def process_images(directory: str) -> pd.DataFrame: pass ``` Here’s the detailed step-by-step checklist for your function: - Read each image file from the given directory. - Convert each image to grayscale using PIL. - Resize each image to 128x128 pixels. - Calculate the average pixel intensity for the grayscale image (mean of pixel values). - Create a Pandas DataFrame that includes the following columns: - \'Filename\': the name of the image file - \'Average Pixel Intensity\': the computed average pixel intensity You can assume the directory contains only JPEG images and that each image file has a unique name. An example structure of the resulting DataFrame should look like this: | Filename | Average Pixel Intensity | | --------------| ------------------------| | image1.jpg | 123.4 | | image2.jpg | 110.2 | | ... | ... |","solution":"from PIL import Image import pandas as pd import os def process_images(directory: str) -> pd.DataFrame: data = [] for filename in os.listdir(directory): if filename.endswith(\\".jpg\\"): filepath = os.path.join(directory, filename) with Image.open(filepath) as img: grayscale_img = img.convert(\\"L\\") resized_img = grayscale_img.resize((128, 128)) pixel_values = list(resized_img.getdata()) average_intensity = sum(pixel_values) / len(pixel_values) data.append({\\"Filename\\": filename, \\"Average Pixel Intensity\\": average_intensity}) return pd.DataFrame(data)"},{"question":"In this exercise, you are required to write a function to generate a random password of a specified length that meets certain complexity criteria. The objective is to familiarize yourself with string manipulation and randomness in Python, utilizing the `random` and `string` libraries. You are required to define a function called `generate_password`. This function should: 1. Accept an integer `length`, which represents the length of the password to be generated. 2. Ensure the password contains at least: - One lowercase letter - One uppercase letter - One digit - One special character from `!@#%^&*()` 3. Randomly fill the remaining length of the password with a mix of lowercase, uppercase, digits, and special characters. 4. Shuffle the resulting password to ensure randomness. 5. Return the generated password as a string. # Function Signature ```python def generate_password(length): pass ``` # Requirements - Use the `random` and `string` libraries to generate the password components. - Ensure the password meets the specified complexity requirements. - Shuffle the final password to avoid predictable patterns. # Example Input ```python # Example usage of the function password = generate_password(12) print(password) # Output: a random password meeting the specified criteria ``` # Example Output ``` A possible output might look like: \'aB3!fGh@2J1\' ``` # Note - The password length should be at least 4 to accommodate each type of character.","solution":"import random import string def generate_password(length): if length < 4: raise ValueError(\\"Password length should be at least 4 to accommodate each type of character.\\") # Each category of characters lowercase = random.choice(string.ascii_lowercase) uppercase = random.choice(string.ascii_uppercase) digit = random.choice(string.digits) special_char = random.choice(\'!@#%^&*()\') # Combine the categories to form the base of the password password = [lowercase, uppercase, digit, special_char] # Fill the remaining length with random choices from all categories if length > 4: all_chars = string.ascii_letters + string.digits + \'!@#%^&*()\' password.extend(random.choice(all_chars) for _ in range(length - 4)) # Shuffle the password to ensure randomness random.shuffle(password) # Join list elements into a single string return \'\'.join(password)"},{"question":"You are required to implement a function that processes text data for analysis in Python. The function will take in a string and perform several text transformations based on the specifications given below. **Details:** 1. Create a function named `process_text`. 2. The function should take a single parameter, `input_text`, which is a string containing the text to be processed. 3. The function should perform the following transformations on `input_text`: - Convert all characters to lowercase. - Remove any punctuation marks (.,!?). - Replace spaces with underscores (_). - Remove any duplicate characters that are immediately adjacent to each other (e.g., \\"book\\" should become \\"bok\\", \\"coffee\\" should become \\"cofe\\" and \\"letter\\" should become \\"leter\\"). 4. Return the transformed string as the function\'s output. **Function Signature:** ```python def process_text(input_text: str) -> str: pass ``` **Example:** ```python input_text = \\"Hello, World!!\\" output = process_text(input_text) print(output) # Output should be: \\"helo_world\\" input_text = \\"Python programming!!! Is!! Fun?\\" output = process_text(input_text) print(output) # Output should be: \\"python_programing_is_fun\\" ```","solution":"import re def process_text(input_text: str) -> str: Perform the following transformations on input_text: - Convert all characters to lowercase. - Remove any punctuation marks (.,!?). - Replace spaces with underscores (_). - Remove any duplicate characters that are immediately adjacent to each other. # Convert all characters to lowercase text = input_text.lower() # Remove punctuation text = re.sub(r\'[.,!?]\', \'\', text) # Replace spaces with underscores text = text.replace(\' \', \'_\') # Remove adjacent duplicates new_text = [] last_char = \'\' for char in text: if char != last_char: new_text.append(char) last_char = char return \'\'.join(new_text)"},{"question":"You are given a list of strings which represent various file paths. Your task is to write a function that organizes these paths into a directory structure represented by nested dictionaries. Each directory is a key in the dictionary, and its value is another dictionary representing its contents. Files are represented as keys with a value of `None`. # Function Requirements - The function should be named `organize_paths`. - The input parameter should be a list of strings representing file paths. - The function should return a dictionary representing the nested directory structure. # Example Suppose the input list is: ```python paths = [ \\"dir1/file1.txt\\", \\"dir1/file2.txt\\", \\"dir1/dir2/file3.txt\\", \\"dir3/file4.txt\\", ] ``` The expected output would be: ```python { \\"dir1\\": { \\"file1.txt\\": None, \\"file2.txt\\": None, \\"dir2\\": { \\"file3.txt\\": None } }, \\"dir3\\": { \\"file4.txt\\": None } } ``` # Example Function Signature ```python def organize_paths(paths): # Your code goes here ``` Your implementation should dynamically build the nested dictionaries to reflect the hierarchical structure of files and directories. Make sure to thoroughly test your solution with varied path inputs to ensure its accuracy.","solution":"def organize_paths(paths): def insert_path(root, parts): if len(parts) == 1: root[parts[0]] = None else: if parts[0] not in root: root[parts[0]] = {} insert_path(root[parts[0]], parts[1:]) root = {} for path in paths: parts = path.split(\'/\') insert_path(root, parts) return root"},{"question":"Implement a function to perform K-means clustering from scratch using numpy. The function should initialize the centroids, assign points to the nearest cluster, update the centroid positions, and repeat until convergence or a specified number of iterations. The final cluster assignments should be saved to a CSV file. **Function Signature** ```python def kmeans_clustering(input_file: str, output_file: str, k: int, max_iterations: int = 100): ``` **Function Description** - `input_file`: a CSV file path containing the input data points. The file should have columns `feature1`, `feature2`, ..., `featureN`. - `output_file`: a CSV file path where you\'ll save the final cluster assignments. Each row in the output file should include the original data point and the cluster it belongs to. - `k`: the number of clusters. - `max_iterations`: maximum number of iterations to run the algorithm (optional, default is 100). **Steps to implement** 1. Read the input CSV file to get the data points. 2. Randomly initialize the centroids by selecting `k` points from the data. 3. Repeat the following steps until convergence or for a maximum of `max_iterations`: - Assign each data point to the nearest centroid. - Update the centroid positions based on the mean of the data points assigned to that cluster. 4. Save the final cluster assignments to the output CSV file using `csv.DictWriter`. **Requirements** - Utilize `numpy` functions for efficient computation, such as `numpy.mean`, `numpy.linalg.norm`, and `numpy.random.choice`. - Use `csv.DictWriter` to write the cluster assignments to the output CSV file. - Handle edge cases, such as data points not changing clusters between iterations (indicating convergence).","solution":"import numpy as np import pandas as pd import csv def kmeans_clustering(input_file: str, output_file: str, k: int, max_iterations: int = 100): # Load data from input file data = pd.read_csv(input_file).values # Randomly initialize centroids np.random.seed(42) # For reproducibility centroids = data[np.random.choice(data.shape[0], k, replace=False)] for _ in range(max_iterations): # Compute distances between data points and centroids distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2) # Assign each data point to the nearest centroid cluster_assignments = np.argmin(distances, axis=1) # Update centroids by taking the mean of assigned points new_centroids = np.array([data[cluster_assignments == j].mean(axis=0) for j in range(k)]) # Check for convergence (no change in centroids) if np.all(centroids == new_centroids): break centroids = new_centroids # Create DataFrame with original data and cluster assignments result_df = pd.DataFrame(data) result_df[\'cluster\'] = cluster_assignments # Save result to output CSV file result_df.to_csv(output_file, index=False) return result_df"},{"question":"Write a function called `restaurant_reviews(restaurant_name, reviews_dict)` that takes two arguments: a string `restaurant_name` and a dictionary `reviews_dict`. The dictionary `reviews_dict` contains reviews for various restaurants, where the keys are the names of the restaurants (formatted as capitalized strings) and the values are lists of dictionaries. Each dictionary in the list represents a review and contains three keys: \'reviewer\', \'rating\', and \'comment\'. The function should: 1. Check if `restaurant_name` is in `reviews_dict`. If it is not, print \\"Restaurant not found.\\" and return. 2. If the restaurant exists in the dictionary, print each review in a formatted string that includes the reviewer\'s name, rating, and comment. 3. Calculate and print the average rating of the restaurant rounded to two decimal places. 4. Plot a bar chart of the ratings using `matplotlib.pyplot.bar`, with the reviewer\'s names on the x-axis and their ratings on the y-axis. Here\'s an example of what the `reviews_dict` might look like: ```python reviews_dict = { \\"Chez Panisse\\": [ {\\"reviewer\\": \\"Alice\\", \\"rating\\": 4.5, \\"comment\\": \\"Excellent food!\\"}, {\\"reviewer\\": \\"Bob\\", \\"rating\\": 4.0, \\"comment\\": \\"Great service.\\"}, {\\"reviewer\\": \\"Carol\\", \\"rating\\": 5.0, \\"comment\\": \\"Best dining experience ever!\\"} ], \\"Joe\'s Diner\\": [ {\\"reviewer\\": \\"David\\", \\"rating\\": 3.5, \\"comment\\": \\"Good, but not great.\\"}, {\\"reviewer\\": \\"Eve\\", \\"rating\\": 3.0, \\"comment\\": \\"Average food, slow service.\\"} ] } ```","solution":"import matplotlib.pyplot as plt def restaurant_reviews(restaurant_name, reviews_dict): Prints reviews and average rating of the given restaurant. Plots a bar chart of the ratings with reviewer names on the x-axis. Parameters: restaurant_name (str): The name of the restaurant. reviews_dict (dict): Dictionary containing restaurant reviews. if restaurant_name not in reviews_dict: print(\\"Restaurant not found.\\") return reviews = reviews_dict[restaurant_name] total_rating = 0 for review in reviews: print(f\\"Reviewer: {review[\'reviewer\']}, Rating: {review[\'rating\']}, Comment: {review[\'comment\']}\\") total_rating += review[\'rating\'] average_rating = total_rating / len(reviews) print(f\\"Average rating: {average_rating:.2f}\\") # Plotting the bar chart reviewers = [review[\'reviewer\'] for review in reviews] ratings = [review[\'rating\'] for review in reviews] plt.bar(reviewers, ratings) plt.xlabel(\'Reviewers\') plt.ylabel(\'Ratings\') plt.title(f\'Ratings for {restaurant_name}\') plt.show()"},{"question":"You are tasked with implementing a Genetic Algorithm to find an approximate solution to the Traveling Salesman Problem (TSP). The goal is to evolve a set of possible solutions over multiple generations to minimize the total travel distance of visiting each city exactly once and returning to the starting point. Here is the breakdown of the task: 1. **Define a function named `Genetic_Algorithm_TSP`** which performs the following steps: - Generate an initial population of possible routes. Each route is a permutation of the indices representing cities. - Calculate the fitness of each route in the population. The fitness is inversely proportional to the total distance of the route. - Select routes to create a mating pool using roulette wheel selection based on fitness. - Implement crossover between pairs of routes to generate offspring. Ensure the offspring are valid routes (i.e., permutations of city indices). - Apply mutation to some offspring routes to introduce diversity. Swap two cities in the route to mutate. - Replace the old population with the new offspring routes. - Repeat the process for a specified number of generations or until convergence. - Identify and return the shortest route found during the evolution. 2. **Input Parameters and Function Implementation**: - A 2D list `distances` representing the distance between each pair of cities. - The number of cities is inferred from the dimensions of `distances`. - Optional parameters to specify population size, number of generations, mutation rate, and crossover rate. 3. **The function `Genetic_Algorithm_TSP` should return a tuple containing**: - The shortest route found (as a list of city indices). - The total distance of this route. Here is an example of how to define the distance matrix and call the function: ```python import numpy as np distances = [ [0, 29, 20, 21], [29, 0, 15, 17], [20, 15, 0, 28], [21, 17, 28, 0] ] shortest_route, total_distance = Genetic_Algorithm_TSP(distances, population_size=100, generations=500, mutation_rate=0.01, crossover_rate=0.7) print(f\\"The shortest route is: {shortest_route}\\") print(f\\"The total distance of the shortest route is: {total_distance}\\") ``` Ensure to use relevant libraries such as `numpy` for numerical computations and `random` for generating random permutations and selections.","solution":"import random import numpy as np def Genetic_Algorithm_TSP(distances, population_size=100, generations=500, mutation_rate=0.01, crossover_rate=0.7): num_cities = len(distances) def initial_population(population_size, num_cities): population = [] for _ in range(population_size): individual = list(np.random.permutation(num_cities)) population.append(individual) return population def calculate_fitness(route): return 1 / (total_distance(route) + 1) def total_distance(route): distance = 0 for i in range(len(route)): distance += distances[route[i]][route[(i + 1) % num_cities]] return distance def select_mating_pool(population, fitnesses): mating_pool = [] max_fitness = sum(fitnesses) while len(mating_pool) < population_size: pick = random.uniform(0, max_fitness) current = 0 for route, fitness in zip(population, fitnesses): current += fitness if current > pick: mating_pool.append(route) break return mating_pool def crossover(parent1, parent2): if random.random() > crossover_rate: return parent1 start, end = sorted(random.sample(range(num_cities), 2)) child = [None] * num_cities child[start:end] = parent1[start:end] index = end for city in parent2: if city not in child: if index >= num_cities: index = 0 child[index] = city index += 1 return child def mutate(route): if random.random() < mutation_rate: i, j = random.sample(range(num_cities), 2) route[i], route[j] = route[j], route[i] return route def evolve_population(population): fitnesses = [calculate_fitness(route) for route in population] mating_pool = select_mating_pool(population, fitnesses) next_population = [] for i in range(0, population_size, 2): parent1 = mating_pool[i] parent2 = mating_pool[random.randint(0, population_size - 1)] child1 = crossover(parent1, parent2) child2 = crossover(parent2, parent1) next_population.append(mutate(child1)) next_population.append(mutate(child2)) return next_population[:population_size] population = initial_population(population_size, num_cities) for _ in range(generations): population = evolve_population(population) best_route = min(population, key=lambda route: total_distance(route)) return best_route, total_distance(best_route)"},{"question":"You are given a list of integers where each integer represents the price of a stock on a given day. You are allowed to complete at most one transaction (i.e., you buy one stock and sell one stock). Implement a function `max_profit(prices)` that calculates the maximum profit you can achieve from this transaction. If no profit is possible, return 0. Your objective is to determine the maximum difference between a pair of days (selling price minus buying price) such that the selling day comes after the buying day. # Example: ```python prices = [7, 1, 5, 3, 6, 4] ``` The expected output for this input should be: ```python 5 ``` Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. If the prices are: ```python prices = [7, 6, 4, 3, 1] ``` The expected output should be: ```python 0 ``` # Constraints: - `1 <= len(prices) <= 10^5` - `0 <= prices[i] <= 10^4` # Function Signature: ```python def max_profit(prices: List[int]) -> int: pass ```","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a single buy and sell transaction. If no profit is possible, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: min_price = min(min_price, price) profit = price - min_price max_profit = max(max_profit, profit) return max_profit"},{"question":"``` Create a function that takes a list of integers and returns a list of lists where each sublist contains all unique permutations of the original list with exactly one element fixed in the first position. This will help in understanding permutations and handling list operations. The function should output: list: A list of lists, where each inner list is a unique permutation of the original list with one element fixed. You should write self-contained code starting with: ``` from itertools import permutations def fixed_permutations(input_list): ```","solution":"from itertools import permutations def fixed_permutations(input_list): Takes a list of integers and returns a list of lists where each sublist contains all unique permutations of the original list with exactly one element fixed in the first position. Arguments: input_list -- the list of integers to permute Returns: A list of lists, where each inner list is a unique permutation of the original list with one element fixed in the first position. result = [] for i, fixed_element in enumerate(input_list): sub_list = input_list[:i] + input_list[i+1:] for permutation in permutations(sub_list): result.append([fixed_element] + list(permutation)) return result"},{"question":"You are assigned to develop a function named `validate_sudoku`, which verifies whether a given sudoku grid is valid. A valid sudoku grid adheres to the following rules: 1. Each row contains the numbers 1-9 without repetition. 2. Each column contains the numbers 1-9 without repetition. 3. Each of the nine 3x3 sub-grids (also known as boxes) contains the numbers 1-9 without repetition. Function Specification **Function Name**: `validate_sudoku` **Parameters**: 1. `grid`: A 9x9 2D list (list of lists) representing the sudoku board. Each element is an integer from 1 to 9 or the number 0, which indicates an empty cell that can be ignored for validation purposes. Objective The function should: 1. Return a boolean: `True` if the provided grid is a valid sudoku board according to the above rules, and `False` otherwise. Requirements - Use nested loops to traverse the rows, columns, and 3x3 sub-grids of the sudoku board. - Ensure that each number 1-9 appears only once per row, per column, and per 3x3 sub-grid. - Ignore cells containing the number 0 during the validation process. - Ensure the function is efficiently implemented, given the constraints of sudoku grid size. Notes - Utilize appropriate data structures (such as sets) for efficient validation. - Clearly divide the validation process into steps for rows, columns, and sub-grids. Example Usage ```python sudoku_grid = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] validate_sudoku(sudoku_grid) # Should return True ``` Implement the function to determine if the provided sudoku grid is valid.","solution":"def validate_sudoku(grid): def is_valid_group(group): Helper function that checks if a group (row, column, or sub-grid) contains unique numbers from 1 to 9. elements = [num for num in group if num != 0] return len(elements) == len(set(elements)) # Check rows for row in grid: if not is_valid_group(row): return False # Check columns for col in range(9): column = [grid[row][col] for row in range(9)] if not is_valid_group(column): return False # Check 3x3 sub-grids for box_row in range(0, 9, 3): for box_col in range(0, 9, 3): sub_grid = [] for row in range(box_row, box_row + 3): for col in range(box_col, box_col + 3): sub_grid.append(grid[row][col]) if not is_valid_group(sub_grid): return False return True"},{"question":"In graph theory, an important concept is that of connected components. A connected component of an undirected graph is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph. Your task is to implement a function that finds and returns all the connected components of a given undirected graph. The graph will be provided as an adjacency list, where each key is a node and its corresponding value is a list of nodes that it is directly connected to. Function Signature ```python def connected_components(graph): ... ``` Parameters - `graph`: dict A dictionary representing an undirected graph where the keys are nodes and the values are lists of nodes that each key is directly connected to. Returns - `components`: List of lists A list where each element is a list representing a connected component of the graph. Example ```python >>> graph = { ... 0: [1, 2], ... 1: [0, 2], ... 2: [0, 1, 3], ... 3: [2, 4], ... 4: [3], ... 5: [6], ... 6: [5] ... } >>> connected_components(graph) [[0, 1, 2, 3, 4], [5, 6]] ``` Requirements 1. You may use built-in Python data structures such as lists, sets, and dictionaries. 2. You may use depth-first search (DFS) or breadth-first search (BFS) to traverse the graph and identify components.","solution":"def connected_components(graph): def dfs(node, visited, component): stack = [node] while stack: n = stack.pop() if n not in visited: visited.add(n) component.append(n) for neighbor in graph.get(n, []): stack.append(neighbor) return component visited = set() components = [] for node in graph: if node not in visited: component = dfs(node, visited, []) components.append(component) return components"},{"question":"Write a function in Python that takes a list of integers as input and returns a new list where each integer is replaced by the product of every other integer in the list. Your function should not use the division operation. For example, given the list `[1, 2, 3, 4]`, the result should be `[24, 12, 8, 6]` because: - The product of all elements except the first one (2*3*4) is 24. - The product of all elements except the second one (1*3*4) is 12. - The product of all elements except the third one (1*2*4) is 8. - The product of all elements except the fourth one (1*2*3) is 6. Your function should handle large lists and efficiently compute the results. **Function Signature:** ```python def product_of_others(nums: List[int]) -> List[int]: ``` **Requirements:** - Do not use the division operation in your solution. - Your function should handle lists of varying sizes and values, including negative numbers and zero.","solution":"from typing import List def product_of_others(nums: List[int]) -> List[int]: n = len(nums) # Create two temporary lists to store the prefix and suffix products prefix_products = [1] * n suffix_products = [1] * n # Fill prefix_products for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Fill suffix_products for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * nums[i + 1] # Generate the result list by multiplying prefix and suffix products result = [prefix_products[i] * suffix_products[i] for i in range(n)] return result"},{"question":"In this problem, you will write a function to determine the maximum length of a contiguous subarray within a given array of integers that only contains unique elements. # Function Specification - Function name: `max_unique_subarray_length` - Parameters: `arr` (a list of integers representing the array) - Output: An integer representing the length of the longest contiguous subarray with all unique elements. # Requirements 1. The function must traverse the array efficiently, ideally in O(n) time complexity. 2. Use appropriate data structures to keep track of elements in the current subarray. 3. Ensure that the solution is robust and handles edge cases such as an empty array or an array with all identical elements. # Examples Example 1: ```python arr = [1, 2, 3, 1, 2, 3, 4, 5] print(max_unique_subarray_length(arr)) # Output: 5 (subarray [1, 2, 3, 4, 5]) ``` Example 2: ```python arr = [5, 5, 5, 5] print(max_unique_subarray_length(arr)) # Output: 1 (subarray [5]) ``` Example 3: ```python arr = [] print(max_unique_subarray_length(arr)) # Output: 0 (no subarray) ``` Example 4: ```python arr = [1, 2, 1, 3, 4, 2, 3] print(max_unique_subarray_length(arr)) # Output: 4 (subarray [1, 3, 4, 2]) ``` The function should use a sliding window approach to achieve the optimal time complexity while ensuring that only unique elements are included in the current subarray under consideration.","solution":"def max_unique_subarray_length(arr): Returns the length of the longest contiguous subarray with all unique elements. seen = set() left = 0 max_len = 0 for right in range(len(arr)): while arr[right] in seen: seen.remove(arr[left]) left += 1 seen.add(arr[right]) max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are required to write a function named `cumulative_sum` that takes a list of numerical values and returns a new list where each element at index `i` is the sum of the elements at indices `0` to `i` in the input list. This technique is often referred to as calculating the cumulative sum. **Function Signature:** ```python def cumulative_sum(values: list) -> list: pass ``` **Example Usage:** ```python values = [1, 2, 3, 4, 5] print(cumulative_sum(values)) # Output: [1, 3, 6, 10, 15] values = [3, -1, 4, 0, 2, -6] print(cumulative_sum(values)) # Output: [3, 2, 6, 6, 8, 2] ``` In the first example, calling `cumulative_sum(values)` on the list `[1, 2, 3, 4, 5]` should return `[1, 3, 6, 10, 15]`, as the cumulative sum at each index is progressively added. Similarly, in the second example, for the list `[3, -1, 4, 0, 2, -6]`, the function should return `[3, 2, 6, 6, 8, 2]`.","solution":"def cumulative_sum(values: list) -> list: Returns a list of cumulative sums for given list of numerical values. result = [] total = 0 for value in values: total += value result.append(total) return result"},{"question":"You need to implement a function called `find_anagram_indices` that takes two strings `s` and `p`, and returns an array of all the start indices of `p`\'s anagrams in `s`. The order of output does not matter. An anagram is a word formed by rearranging the letters of another word, typically using all the original letters exactly once. Requirements: - The function should handle cases where `s` and `p` consist of lowercase English letters. - The solution should have a linear or near-linear time complexity. Function Signature: The function should be named `find_anagram_indices` and have the following parameters: - `s` (string): The text in which to search for anagrams of `p`. - `p` (string): The pattern whose anagrams we need to find in `s`. Example: ```plaintext find_anagram_indices(\\"cbaebabacd\\", \\"abc\\") ``` Output: ```plaintext [0, 6] ``` Explanation: - The substring at index 0 is \\"cba\\", which is an anagram of \\"abc\\". - The substring at index 6 is \\"bac\\", which is an anagram of \\"abc\\". ```plaintext find_anagram_indices(\\"abab\\", \\"ab\\") ``` Output: ```plaintext [0, 1, 2] ``` Explanation: - The substring at index 0 is \\"ab\\", which is an anagram of \\"ab\\". - The substring at index 1 is \\"ba\\", which is an anagram of \\"ab\\". - The substring at index 2 is \\"ab\\", which is an anagram of \\"ab\\". You may assume that the strings \'s\' and \'p\' have lengths in the range [1, 10^4].","solution":"def find_anagram_indices(s, p): from collections import Counter len_s, len_p = len(s), len(p) result = [] if len_s < len_p: return result p_count = Counter(p) window_count = Counter(s[:len_p - 1]) for i in range(len_p - 1, len_s): window_count[s[i]] += 1 if window_count == p_count: result.append(i - len_p + 1) window_count[s[i - len_p + 1]] -= 1 if window_count[s[i - len_p + 1]] == 0: del window_count[s[i - len_p + 1]] return result"},{"question":"You are working on a project that involves analyzing sentiment analysis datasets. Each dataset contains text reviews along with their corresponding sentiment labels. Your task is to write a function called `process_reviews` that takes a file path of a dataset as input and loads the data into a pandas DataFrame with additional preprocessing steps to aid in sentiment analysis. Function Signature ```python def process_reviews(file_path: str) -> pd.DataFrame: ``` Input - `file_path` (str): The path to the CSV file containing the review dataset. Output - A pandas DataFrame with added columns for text length, number of words, and sentiment as a categorical data type. Requirements 1. Use the `pandas.read_csv` function to load the data from the CSV file into a pandas DataFrame. 2. Add auxiliary columns: - `text_length`: The length of each review text (number of characters). - `word_count`: The number of words in each review text. - `sentiment`: Convert the sentiment column to pandas categorical data type. # Detailed Steps 1. Read the dataset CSV file into a pandas DataFrame. 2. Add a `text_length` column, containing the length of each review text. 3. Add a `word_count` column, containing the number of words in each review text. 4. Convert the `sentiment` column to a pandas categorical data type. # Example You have a CSV file `reviews.csv` with the following content: ``` review_text,sentiment \\"I love this product!\\",positive \\"This is the worst purchase I\'ve ever made.\\",negative ``` Calling the function `process_reviews(\\"reviews.csv\\")` should return a DataFrame similar to: ``` review_text sentiment text_length word_count 0 I love this product! positive 18 4 1 This is the worst purchase I\'ve ever made. negative 41 8 ``` # Constraints - Assume that the input CSV file is well-formed and does not contain malformed rows or columns. - The input `file_path` is a valid path to an existing CSV file. # Notes - Ensure you have the necessary library installed: ```bash pip install pandas ```","solution":"import pandas as pd def process_reviews(file_path: str) -> pd.DataFrame: Load and process reviews from a CSV file. Args: file_path (str): The path to the CSV file containing the review dataset. Returns: pd.DataFrame: A DataFrame with additional columns for text length, number of words, and sentiment as a categorical data type. # Load data into a pandas DataFrame df = pd.read_csv(file_path) # Add text length column df[\'text_length\'] = df[\'review_text\'].apply(len) # Add word count column df[\'word_count\'] = df[\'review_text\'].apply(lambda x: len(x.split())) # Convert sentiment column to categorical data type df[\'sentiment\'] = df[\'sentiment\'].astype(\'category\') return df"},{"question":"You are tasked with creating a function called `merge_dictionaries` which takes two dictionaries as input and merges them into a single dictionary. The merging should follow these rules: 1. If a key is present in both dictionaries, the corresponding value in the resulting dictionary should be a list containing the values from both dictionaries. 2. If a key is present in only one of the dictionaries, the corresponding value in the resulting dictionary should be the same as in the input dictionary. 3. The order of elements in the list (for keys present in both dictionaries) should be the value from the first dictionary followed by the value from the second dictionary. Implement the function `merge_dictionaries(dict1: dict, dict2: dict) -> dict`. **Example:** ```python dict1 = {\'a\': 1, \'b\': 2, \'c\': 3} dict2 = {\'b\': 3, \'c\': 4, \'d\': 5} merged_dict = merge_dictionaries(dict1, dict2) print(merged_dict) ``` Expected output: ```python {\'a\': 1, \'b\': [2, 3], \'c\': [3, 4], \'d\': 5} ```","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries according to the specified rules. If a key is present in both dictionaries, the corresponding value in the resulting dictionary will be a list containing the values from both dictionaries. If a key is present in only one of the dictionaries, the corresponding value in the resulting dictionary will be the same as in the input dictionary. Parameters: dict1 (dict): The first input dictionary. dict2 (dict): The second input dictionary. Returns: dict: The merged dictionary. merged_dict = {} # Collecting all keys from both dictionaries all_keys = set(dict1.keys()).union(dict2.keys()) # Iterating through each key to build the merged dictionary for key in all_keys: if key in dict1 and key in dict2: merged_dict[key] = [dict1[key], dict2[key]] elif key in dict1: merged_dict[key] = dict1[key] else: merged_dict[key] = dict2[key] return merged_dict"},{"question":"You are assigned the task of creating a function to identify the longest consecutive subsequence within an unsorted list of integers. A consecutive subsequence is defined as a sequence of numbers where each number follows the previous one without any gaps. Your solution should be efficient, aiming for a time complexity of O(n). Your task is to implement the function `find_longest_consecutive_subsequence(nums)` which finds the longest consecutive subsequence in a list. Parameters: - `nums` (List[int]): A list of integers which can be both positive and negative, and may contain duplicates. Returns: - int: The length of the longest consecutive subsequence found within the list. For instance, given the list `[100, 4, 200, 1, 3, 2]`: - The longest consecutive subsequence is `[1, 2, 3, 4]`, so the function should return 4. Another example, for the list `[9, 1, -3, -2, 0, -1, 11, 12, 13, 10]`: - The longest consecutive subsequence is `[-3, -2, -1, 0, 1]`, and the function should return 5. Ensure that your implementation correctly handles edge cases such as an empty list, where the longest consecutive subsequence length should be 0. Here are the steps to guide your implementation: 1. Use a set to store the elements of the input list to allow O(1) look-up times. 2. Iterate through each element of the set, initiating a search for the start of a potential sequence (a number where `num-1` is not in the set). 3. For each start of a sequence, determine its length by checking the presence of consecutive numbers. 4. Track and update the max length of the sequences found.","solution":"def find_longest_consecutive_subsequence(nums): Finds the length of the longest consecutive subsequence in an unsorted list of integers. num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are required to implement a function named `find_anagrams` that identifies all anagrams of a given word within an input list of words. An anagram is defined as a word or phrase formed by rearranging the letters of another, such as `spar` formed from `rasp`. The function should take two arguments: 1. `target` (str): The word for which to find anagrams. 2. `words` (List[str]): A list of candidate words to check against the target word. Your function should return a list of strings containing the words from the input list that are anagrams of the target word. Function signature ```python def find_anagrams(target: str, words: List[str]) -> List[str]: pass ``` Input: - `target` (str): The word for which to find anagrams. - `words` (List[str]): A list of candidate words to check against the target word. Output: - A list of strings, each being an anagram of the target word from the input list. Example: ```python target = \\"listen\\" words = [\\"enlist\\", \\"google\\", \\"inlets\\", \\"banana\\"] find_anagrams(target, words) # Example Output: [\'enlist\', \'inlets\'] ``` **Note**: Ensure that the comparison is case-insensitive and ignores any extra spaces around the words.","solution":"from typing import List def find_anagrams(target: str, words: List[str]) -> List[str]: target_sorted = sorted(target.strip().lower()) anagrams = [] for word in words: if sorted(word.strip().lower()) == target_sorted: anagrams.append(word) return anagrams"},{"question":"Implement a program that reads a specified JSON file containing a list of dictionaries, filters the dictionaries based on provided key-value criteria, and writes the filtered results to a new JSON file. Assume the dictionaries have consistent keys. # Criteria: - Input JSON file path - Output JSON file path - Key name to filter - Value to match # Function signature: ``` import json def filter_json(input_file, output_file, key, value): ``` # Example usage: ``` filter_json(\'data.json\', \'filtered_data.json\', \'status\', \'active\') ``` In this example, the function reads `data.json`, filters dictionaries where the key `status` has the value `active`, and writes the filtered list of dictionaries to `filtered_data.json`.","solution":"import json def filter_json(input_file, output_file, key, value): Reads a JSON file, filters the dictionaries based on a key-value pair, and writes the filtered results to a new JSON file. Args: input_file (str): Path to the input JSON file. output_file (str): Path to the output JSON file. key (str): The key name to filter by. value (str): The value to match. with open(input_file, \'r\') as infile: data = json.load(infile) filtered_data = [item for item in data if item.get(key) == value] with open(output_file, \'w\') as outfile: json.dump(filtered_data, outfile)"},{"question":"You are required to implement a grocery store inventory management system that tracks the stock of various items, handles incoming shipments, and processes customer purchases. Your goal is to write a function named `manage_inventory` that performs the following tasks: 1. Define a class `Item` that represents an item in the inventory. The class should have the following attributes: - `name`: The name of the item (a string). - `category`: The category the item belongs to (a string). - `quantity`: The quantity of the item currently in stock (an integer). - `price`: The price of the item (a float). 2. Define a class `Inventory` that manages the inventory of items. The class should have the following methods: - `add_item`: Adds a new item or updates the quantity of an existing item in the inventory. It takes four parameters: `name`, `category`, `quantity`, and `price`. - `remove_item`: Removes an item from the inventory based on its name. It takes one parameter: `name`. - `process_purchase`: Processes a purchase request. It takes two parameters: `name` and `quantity`. If the requested quantity is available, it decreases the stock and returns the total price. If the requested quantity is not available, it raises a `ValueError` with the message \\"Insufficient stock\\". - `list_items`: Returns a list of item descriptions currently in the inventory. Each description is a string in the format: `\\"{name} - {category} - {quantity} in stock - {price:.2f}\\"`. 3. Implement the `manage_inventory` function to demonstrate the functionality of the `Inventory` class. The function should: - Create an instance of `Inventory`. - Add at least three different items to the inventory. - Process a purchase request. - Print the list of items in the inventory before and after the purchase. Your solution should demonstrate proper class design and error handling where applicable. Here is an example of how the `manage_inventory` function might behave: ```python manage_inventory() ``` Expected output: ``` Initial Inventory: Apple - Fruit - 50 in stock - 0.50 Milk - Dairy - 30 in stock - 1.20 Bread - Bakery - 20 in stock - 2.00 Purchase successful: Apple - 5 bought for 2.50 Updated Inventory: Apple - Fruit - 45 in stock - 0.50 Milk - Dairy - 30 in stock - 1.20 Bread - Bakery - 20 in stock - 2.00 ``` Implement the `manage_inventory` function and ensure it meets the requirements described.","solution":"class Item: def __init__(self, name, category, quantity, price): self.name = name self.category = category self.quantity = quantity self.price = price class Inventory: def __init__(self): self.items = {} def add_item(self, name, category, quantity, price): if name in self.items: self.items[name].quantity += quantity else: self.items[name] = Item(name, category, quantity, price) def remove_item(self, name): if name in self.items: del self.items[name] def process_purchase(self, name, quantity): if name in self.items and self.items[name].quantity >= quantity: self.items[name].quantity -= quantity return self.items[name].price * quantity else: raise ValueError(\\"Insufficient stock\\") def list_items(self): return [f\\"{item.name} - {item.category} - {item.quantity} in stock - {item.price:.2f}\\" for item in self.items.values()] def manage_inventory(): inventory = Inventory() # Adding items to the inventory inventory.add_item(\\"Apple\\", \\"Fruit\\", 50, 0.50) inventory.add_item(\\"Milk\\", \\"Dairy\\", 30, 1.20) inventory.add_item(\\"Bread\\", \\"Bakery\\", 20, 2.00) # Print the initial inventory print(\\"Initial Inventory:\\") for item in inventory.list_items(): print(item) # Process a purchase try: total_price = inventory.process_purchase(\\"Apple\\", 5) print(f\\"nPurchase successful: Apple - 5 bought for {total_price:.2f}\\") except ValueError as ve: print(f\\"nPurchase failed: {str(ve)}\\") # Print the updated inventory print(\\"nUpdated Inventory:\\") for item in inventory.list_items(): print(item) # Run the manage_inventory function manage_inventory()"},{"question":"Write a function `find_longest_substring` that takes a single string `input_string` and returns the longest substring of unique characters. If there are multiple substrings of the same maximum length, return the first one encountered from the left. **Function Signature:** ```python def find_longest_substring(input_string: str) -> str: pass ``` **Examples:** 1. `find_longest_substring(\\"abcabcbb\\")` should return `\\"abc\\"` 2. `find_longest_substring(\\"bbbbb\\")` should return `\\"b\\"` 3. `find_longest_substring(\\"pwwkew\\")` should return `\\"wke\\"` 4. `find_longest_substring(\\"\\")` should return `\\"\\"` 5. `find_longest_substring(\\"dvdf\\")` should return `\\"vdf\\"` Ensure the implementation has an efficient time complexity.","solution":"def find_longest_substring(input_string: str) -> str: Returns the longest substring of unique characters from the input string. If there are multiple substrings of the same maximum length, the first one encountered is returned. if not input_string: return \\"\\" start = 0 max_length = 0 max_substr = \\"\\" char_index_map = {} for end in range(len(input_string)): if input_string[end] in char_index_map: start = max(start, char_index_map[input_string[end]] + 1) char_index_map[input_string[end]] = end if end - start + 1 > max_length: max_length = end - start + 1 max_substr = input_string[start:end + 1] return max_substr"},{"question":"Write a function named `fibonacci(n)` that returns the `n`th number in the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. To solve this problem, adhere to the following requirements: 1. If `n` is 0, return 0. 2. If `n` is 1, return 1. 3. For values of `n` greater than 1, calculate the `n`th Fibonacci number iteratively using a loop. Avoid using recursion to prevent stack overflow issues for large values of `n`. 4. Use two variables to keep track of the two previous numbers in the Fibonacci sequence and update them in each iteration of the loop. Ensure your implementation is efficient in terms of time and space complexity.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Some strings have a pattern where a letter is followed by a digit, indicating how many times the letter should be repeated. For example, the string \\"a3b4c2\\" should be expanded to \\"aaabbbbcc\\". This is useful for encoding patterns, saving space, and simplifying certain types of string operations. Your task is to write a function named `expand_pattern` that takes a string `pattern` as an input and returns the expanded string by repeating each letter the corresponding number of times. **Function Signature:** ```python def expand_pattern(pattern: str) -> str: ... ``` **Parameters:** - `pattern` (str): The input pattern string where each letter is followed by a single digit. **Returns:** - `str`: The expanded string based on the given pattern. **Example Usage:** ```python print(expand_pattern(\\"a3b4c2\\")) # Outputs: aaabbbbcc print(expand_pattern(\\"m1n2o3\\")) # Outputs: mnnooo ``` **Constraints:** - The input pattern will only contain lowercase letters and digits and will always be in the correct \'letter-digit\' format. - The digit after each letter will be in the range 1 to 9. - The input string will have at least one \'letter-digit\' pair, and no more than 100 such pairs. **Notes:** - You may find the `int()` function useful for converting digit characters to integers. - Consider edge cases, such as a pattern with a single pair or with the maximum allowed pairs.","solution":"def expand_pattern(pattern: str) -> str: Expands the given pattern string by repeating each letter according to the digit following it. Parameters: pattern (str): The input pattern string where each letter is followed by a single digit. Returns: str: The expanded string based on the given pattern. expanded_string = [] length = len(pattern) for i in range(0, length, 2): letter = pattern[i] repeat_count = int(pattern[i+1]) expanded_string.append(letter * repeat_count) return \'\'.join(expanded_string)"},{"question":"In this problem, you will implement a function that computes the Euclidean distance between two points in a 2D space. The function should be named `euclidean_distance()` and should take as input two tuples, each containing the x and y coordinates of a point. **Function Signature:** ```python def euclidean_distance(point1: tuple, point2: tuple) -> float: Computes the Euclidean distance between two points in 2D space. ``` **Requirements:** 1. Each point is represented as a tuple `(x, y)`, where `x` and `y` are integers or floats. 2. Use the formula for Euclidean distance: ( text{distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ) 3. Import the `math` module and use the `math.sqrt` function to compute the square root. 4. The function should return the distance as a floating-point number.","solution":"import math def euclidean_distance(point1, point2): Computes the Euclidean distance between two points in 2D space. Args: point1 (tuple): The (x, y) coordinates of the first point. point2 (tuple): The (x, y) coordinates of the second point. Returns: float: The Euclidean distance between the two points. x1, y1 = point1 x2, y2 = point2 return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)"},{"question":"You are required to write a function named `max_subarray_sum_modulo` that takes two arguments: a list of integers `arr` and an integer `m`. The function should find and return the maximum possible sum of a subarray of `arr`, such that the sum is taken modulo `m`. A subarray is a contiguous part of an array. The modulo operation finds the remainder when one integer is divided by another. In this problem, you need to find the subarray with the largest sum modulo `m`, which means your function needs to maximize the value of (sum of subarray) % m. Consider the following constraints for the function: - The function should work efficiently, even for large inputs, with a focus on optimality rather than brute force methods. - Utilize efficient algorithms and data structures where necessary to manage and compute the sums and their modularity. Here is a brief overview of one possible solution approach: - Use a combination of prefix sums and binary search or other efficient techniques to find the maximum sum modulo `m`. - Keep track of the prefix sums and their remainders modulo `m`. - Utilize efficient searching to find the best possible prefix sum to get the maximal subarray sum modulo `m`. Your function `max_subarray_sum_modulo` should conform to the following signature: ```python def max_subarray_sum_modulo(arr, m): # Your code here ``` # Example ```python # Example 1 arr = [3, 3, 9, 9, 5] m = 7 # The subarray with the maximum sum modulo 7 is [9, 9, 5] # The sum is 23, and 23 % 7 = 2 # Therefore, max_subarray_sum_modulo(arr, m) should return 6 # Example 2 arr = [1, 2, 3] m = 2 # The subarray with maximum sum modulo 2 could be [1, 2] or [3] # Both give the sum 3, and 3 % 2 = 1 # Therefore, max_subarray_sum_modulo(arr, m) should return 1 print(max_subarray_sum_modulo(arr, m)) # Expected output: 6 for Example 1 print(max_subarray_sum_modulo(arr, m)) # Expected output: 1 for Example 2 ```","solution":"def max_subarray_sum_modulo(arr, m): Returns the maximum subarray sum modulo m. import bisect prefix = [0] * (len(arr) + 1) max_mod = 0 prefix_set = [0] for i in range(1, len(arr) + 1): prefix[i] = (prefix[i-1] + arr[i-1]) % m max_mod = max(max_mod, prefix[i]) pos = bisect.bisect_right(prefix_set, prefix[i]) if pos < len(prefix_set): max_mod = max(max_mod, (prefix[i] - prefix_set[pos] + m) % m) bisect.insort(prefix_set, prefix[i]) return max_mod"},{"question":"You are given a list of dictionaries. Each dictionary represents an item with keys \\"id\\", \\"name\\", and \\"price\\". Your task is to implement a function `filter_and_sort_items(items, min_price)` that filters out items that have a price less than `min_price` and returns the remaining items sorted by \\"price\\" in descending order. The function signature is as follows: ```python def filter_and_sort_items(items: list, min_price: float) -> list: Filter out items with price less than min_price and sort the remaining items by price in descending order. Parameters: items (list): List of dictionaries where each dictionary contains \'id\', \'name\', and \'price\'. min_price (float): The minimum price threshold for filtering items. Returns: list: Filtered and sorted list of items. # Your implementation here pass ``` **Example:** Suppose the input list `items` is: ```python items = [ {\\"id\\": 1, \\"name\\": \\"item1\\", \\"price\\": 30.0}, {\\"id\\": 2, \\"name\\": \\"item2\\", \\"price\\": 20.0}, {\\"id\\": 3, \\"name\\": \\"item3\\", \\"price\\": 50.0}, {\\"id\\": 4, \\"name\\": \\"item4\\", \\"price\\": 10.0} ] ``` Calling `filter_and_sort_items(items, 25.0)` should return: ```python [ {\\"id\\": 3, \\"name\\": \\"item3\\", \\"price\\": 50.0}, {\\"id\\": 1, \\"name\\": \\"item1\\", \\"price\\": 30.0} ] ``` In this example, items with prices 20.0 and 10.0 are filtered out, and the remaining items are sorted by price in descending order.","solution":"def filter_and_sort_items(items, min_price): Filter out items with price less than min_price and sort the remaining items by price in descending order. Parameters: items (list): List of dictionaries where each dictionary contains \'id\', \'name\', and \'price\'. min_price (float): The minimum price threshold for filtering items. Returns: list: Filtered and sorted list of items. filtered_items = [item for item in items if item[\'price\'] >= min_price] sorted_items = sorted(filtered_items, key=lambda x: x[\'price\'], reverse=True) return sorted_items"},{"question":"Design a function named `is_approx_equal` that compares two floating-point numbers to determine if they are approximately equal within a certain tolerance. The function should take three parameters: `a`, `b`, and `tolerance`, and return `True` if the absolute difference between `a` and `b` is less than or equal to `tolerance`, otherwise return `False`. # Function Signature ```python def is_approx_equal(a, b, tolerance): Compare two floating-point numbers to determine if they are approximately equal within a certain tolerance. :param a: First floating-point number. :param b: Second floating-point number. :param tolerance: The maximum allowed difference for the numbers to be considered approximately equal. :return: True if the absolute difference between a and b is <= tolerance, False otherwise. pass ``` # Requirements: 1. The function should handle edge cases where one or both numbers could be `NaN`. 2. If either `a` or `b` is `NaN`, the function should return `False`. 3. Use the `math.isnan` function from the `math` module to check for `NaN` values. 4. Implement the comparison using the `abs` function to calculate the absolute difference. # Example Usage ```python import math # Example comparisons result1 = is_approx_equal(0.1 + 0.2, 0.3, 0.0001) # Expected: True result2 = is_approx_equal(0.1 + 0.2, 0.4, 0.0001) # Expected: False result3 = is_approx_equal(math.nan, 0.3, 0.0001) # Expected: False print(result1) print(result2) print(result3) ``` --- # Explanation In the first example, `0.1 + 0.2` should be approximately `0.3` with a small tolerance, so the result is `True`. In the second example, `0.1 + 0.2` is not approximately equal to `0.4`, hence the result is `False`. In the third example, since one of the numbers is `NaN`, the result should be `False`.","solution":"import math def is_approx_equal(a, b, tolerance): Compare two floating-point numbers to determine if they are approximately equal within a certain tolerance. :param a: First floating-point number. :param b: Second floating-point number. :param tolerance: The maximum allowed difference for the numbers to be considered approximately equal. :return: True if the absolute difference between a and b is <= tolerance, False otherwise. if math.isnan(a) or math.isnan(b): return False return abs(a - b) <= tolerance"},{"question":"Implement a function to create a frequency counter for words from a given text file. Ignore case and exclude common stopwords. The function should output: dict: A dictionary with words as keys and their frequency counts as values. The function should start with: ``` import re from collections import Counter def word_frequency(filepath, stopwords): ```","solution":"import re from collections import Counter def word_frequency(filepath, stopwords): Returns a dictionary with word frequencies from the given file, ignoring case and excluding stopwords. Args: filepath (str): The path to the text file. stopwords (set): A set of common stopwords to exclude. Returns: dict: A dictionary with words as keys and their frequency counts as values. with open(filepath, \'r\', encoding=\'utf-8\') as file: text = file.read() # Convert to lowercase and find all words using regex words = re.findall(r\'bw+b\', text.lower()) # Filter out the stopwords filtered_words = [word for word in words if word not in stopwords] # Count the word frequencies word_counts = Counter(filtered_words) return dict(word_counts)"},{"question":"You are given a list of customer purchase records for a retail business. Each record contains a customer ID, first name, last name, product category, and purchase amount. Your task is to identify the top 10 customers who have spent the most in a specific category. # Objective: Create a function `top_10_spending_customers` that receives the following parameters: - `purchases`: a list of tuples, where each tuple has the format `(customer_id, first_name, last_name, category, amount)`. - `target_category`: a string indicating the category of interest. # Required Libraries: - Use Python\'s built-in libraries for this task. # Output: The function should return a sorted list of the top 10 customers based on their total spending in the target category. The list should contain full names formatted as `\\"<FirstName> <LastName>\\"`, and it should be sorted in descending order of total spending. # Example: If the list `purchases` looks like this: ```python purchases = [ (1, \'John\', \'Doe\', \'electronics\', 100), (2, \'Jane\', \'Smith\', \'groceries\', 200), (1, \'John\', \'Doe\', \'electronics\', 150), (3, \'Alice\', \'Johnson\', \'electronics\', 250), ... ] ``` and `target_category` is `\'electronics\'`, Your function should return: ```python [\'Alice Johnson\', \'John Doe\'] ``` if these are the top spending customers in the \'electronics\' category. # Function Signature: ```python def top_10_spending_customers(purchases: list, target_category: str) -> list: # Your implementation here pass ```","solution":"from collections import defaultdict def top_10_spending_customers(purchases, target_category): Identify the top 10 customers who have spent the most in a specific category. Parameters: - purchases: List of tuples, where each tuple is of the format (customer_id, first_name, last_name, category, amount). - target_category: String indicating the category of interest. Returns: - Sorted list of the top 10 customers based on their total spending in the target category. The list contains full names formatted as \\"<FirstName> <LastName>\\". spending = defaultdict(float) for customer_id, first_name, last_name, category, amount in purchases: if category == target_category: full_name = f\\"{first_name} {last_name}\\" spending[full_name] += amount # Sort customers by total spending in the target category in descending order top_customers = sorted(spending.items(), key=lambda x: x[1], reverse=True)[:10] # Extract only the names top_customers_list = [customer[0] for customer in top_customers] return top_customers_list"},{"question":"You have been hired to improve the efficiency of an existing text-based search engine by implementing a keyword suggestion feature. The goal is to suggest potential keywords to the user as they type a search query, based on a predefined list of popular keywords. # Function Specification Write a function `suggest_keywords(query, keywords)` that: - **Parameters**: - `query`: A string representing the current search query typed by the user. - `keywords`: A list of strings where each string is a keyword. - **Returns**: A list of strings. Each string in the list is a keyword from the `keywords` list that starts with the `query` string. The results should be sorted alphabetically. # Constraints - The function should be case-insensitive, meaning \\"Apple\\" and \\"apple\\" should be considered the same. - The `query` string will only contain alphanumeric characters and spaces. - The `keywords` list may contain up to 10,000 elements. # Example Usage ```python query = \\"spa\\" keywords = [\\"space\\", \\"spa\\", \\"spain\\", \\"sparrow\\", \\"spark\\", \\"special\\", \\"speculate\\", \\"spectrum\\"] print(suggest_keywords(query, keywords)) # Output: [\'spa\', \'space\', \'spain\', \'spark\', \'sparrow\'] ``` # Notes - You should ensure that the returned suggestions are all in lowercase, regardless of the original case in the `keywords` list. - Consider performance implications and try to optimize the function for large lists of keywords. - The function should handle edge cases, such as an empty `query` string, appropriately.","solution":"def suggest_keywords(query, keywords): Suggests potential keywords to the user as they type a search query, based on a predefined list of popular keywords. Parameters: query (str): The current search query typed by the user. keywords (list): A list of strings where each string is a keyword. Returns: list: A list of strings from `keywords` that start with `query`, sorted alphabetically. # Convert the query to lowercase for case-insensitivity query_lower = query.lower() # Filter keywords that start with the query and convert them to lowercase filtered_keywords = [kw.lower() for kw in keywords if kw.lower().startswith(query_lower)] # Sort the filtered keywords alphabetically filtered_keywords.sort() return filtered_keywords"},{"question":"You are tasked with implementing a Python function to process a list of dictionaries containing user information and perform some statistical analysis. Write a function `user_statistics(users: List[Dict[str, Union[str, int]]]) -> Dict[str, Union[float, int]]` that does the following: 1. **Calculates the average age** of all users. 2. **Determines the number of users** whose occupation is \\"Engineer\\". 3. **Finds the oldest user** from the list. # Function Signature ```python from typing import List, Dict, Union def user_statistics(users: List[Dict[str, Union[str, int]]]) -> Dict[str, Union[float, int]]: ``` # Input - `users` (List[Dict[str, Union[str, int]]]): A list of dictionaries, where each dictionary represents a user with the following keys: - `\\"name\\"` (str): The name of the user. - `\\"age\\"` (int): The age of the user. - `\\"occupation\\"` (str): The occupation of the user. # Output The function returns a dictionary with the following keys: - `\\"average_age\\"` (float): The average age of all users. - `\\"engineer_count\\"` (int): The count of users with the occupation \\"Engineer\\". - `\\"oldest_user\\"` (str): The name of the oldest user. # Example Usage ```python users = [ {\\"name\\": \\"Alice\\", \\"age\\": 29, \\"occupation\\": \\"Engineer\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 34, \\"occupation\\": \\"Doctor\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 22, \\"occupation\\": \\"Engineer\\"}, {\\"name\\": \\"David\\", \\"age\\": 40, \\"occupation\\": \\"Artist\\"} ] result = user_statistics(users) ``` The `result` dictionary should be: ```python { \\"average_age\\": 31.25, \\"engineer_count\\": 2, \\"oldest_user\\": \\"David\\" } ``` # Note - If there are multiple users with the highest age, any one of their names can be returned. - You can assume that the list will not be empty and each dictionary will always contain the keys `\\"name\\"`, `\\"age\\"`, and `\\"occupation\\"`. - Make sure to handle potential rounding issues when calculating the average age.","solution":"from typing import List, Dict, Union def user_statistics(users: List[Dict[str, Union[str, int]]]) -> Dict[str, Union[float, int]]: # Calculate average age total_age = sum(user[\'age\'] for user in users) average_age = total_age / len(users) # Count the number of engineers engineer_count = sum(1 for user in users if user[\'occupation\'] == \'Engineer\') # Find the oldest user oldest_user = max(users, key=lambda user: user[\'age\'])[\'name\'] # Return the statistics dictionary return { \\"average_age\\": average_age, \\"engineer_count\\": engineer_count, \\"oldest_user\\": oldest_user }"},{"question":"You are required to write a Python function named `generate_primes_to_file` that generates all prime numbers up to a specified limit and writes them to a file. --- # Detailed Instructions: 1. **Function**: Your function should be named `generate_primes_to_file`. 2. **Parameters**: - `limit`: An integer representing the upper limit (inclusive) up to which prime numbers need to be generated. - `filename`: A string representing the name of the file where the prime numbers should be saved. 3. **Prime Generation**: - Generate all prime numbers up to the given limit using the Sieve of Eratosthenes algorithm. 4. **Output Requirements**: - Write the prime numbers to the specified file. - Each prime number should be on its own line in the file. # Example: For the inputs `limit = 20` and `filename = \\"primes.txt\\"`, the content of \\"primes.txt\\" should be: ``` 2 3 5 7 11 13 17 19 ``` # Libraries to Use: - No external libraries are required for the prime number generation, but you may use standard libraries for file operations. Ensure to follow correct coding practices and handle any possible errors or edge cases such as invalid limits or file write errors.","solution":"def generate_primes_to_file(limit, filename): Generates all prime numbers up to the specified limit and writes them to the given file. Parameters: limit (int): The upper limit (inclusive) up to which to generate prime numbers. filename (str): The name of the file where the prime numbers should be saved. if limit < 2: raise ValueError(\\"Limit should be greater than or equal to 2.\\") sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False primes = [num for num in range(limit + 1) if sieve[num]] with open(filename, \'w\') as file: for prime in primes: file.write(f\\"{prime}n\\")"},{"question":"You are required to write a function called `sort_words(sentence)` that takes a string `sentence` as its parameter. This function will take a sentence (a string of words separated by spaces) and return a new string with the words sorted alphabetically. Example: If the input sentence is: ``` \\"The quick brown fox jumps over the lazy dog\\" ``` The function should return: ``` \\"brown dog fox jumps lazy over quick The the\\" ``` Function Requirements: 1. **Split the input sentence** into individual words. 2. **Sort the words** in alphabetical order, using case-insensitive sorting. 3. Return the sorted words as a single string, with words separated by a single space. 4. Ensure to handle punctuation correctly by considering words only based on alphabetic characters. You may assume that the input sentence contains only alphabetic characters and spaces, with no punctuation marks or special characters.","solution":"def sort_words(sentence): Takes a string sentence and returns a new string with the words sorted alphabetically. The sorting is case-insensitive. :param sentence: str - A sentence containing words separated by spaces. :return: str - A new string with words sorted alphabetically. words = sentence.split() words.sort(key=lambda x: x.lower()) return \' \'.join(words)"},{"question":"**Context:** You are given a cloud-based server system that logs the start and end times of various server tasks. Each task\'s start and end times are represented as a pair of integers in a 2D list called `taskTimes`, where `taskTimes[i][0]` is the start time and `taskTimes[i][1]` is the end time of the ith task. The times are given in a 24-hour format without colons (i.e., 1300 represents 1:00 PM). **Task:** Write a function called `maxSimultaneousTasks` that computes the maximum number of tasks that are running simultaneously at any point in time throughout the day. **Function Signature:** ```python def maxSimultaneousTasks(taskTimes: List[List[int]]) -> int: ``` **Parameters:** - `taskTimes`: A list of lists where each sublist contains two integers representing the start and end times of a task. **Return:** - Returns an integer representing the maximum number of tasks that are running simultaneously at any point in time. **Example:** ```python taskTimes = [[1300, 1500], [1400, 1600], [1500, 1700], [1200, 1300]] print(maxSimultaneousTasks(taskTimes)) # Output: 2 ``` **Notes:** - You can assume that the input times are valid and within the range 0000 to 2359. - Tasks are counted as simultaneous if they overlap at any point.","solution":"def maxSimultaneousTasks(taskTimes): Computes the maximum number of tasks that are running simultaneously at any point in time. Parameters: taskTimes (List[List[int]]): A list of tasks with their start and end times. Returns: int: The maximum number of overlapping tasks. events = [] for start, end in taskTimes: events.append((start, 1)) # Task starts, +1 running task events.append((end, -1)) # Task ends, -1 running task # Sort events, primary by time; if times are the same, end event (-1) comes before start event (+1) events.sort(key=lambda x: (x[0], x[1])) max_simultaneous_tasks = 0 current_tasks = 0 for event in events: current_tasks += event[1] if current_tasks > max_simultaneous_tasks: max_simultaneous_tasks = current_tasks return max_simultaneous_tasks"},{"question":"You are required to build a simple command-line based expense tracker that allows users to record their daily expenses and view a summary of total expenses for each category. Implement the following functionalities in a function called `expenseTracker`: 1. The function should allow users to input their expenses in a specified format. 2. Each expense entry should include the category of the expense, the amount spent, and a brief description. 3. The function should continually prompt the user to enter new expenses until they choose to view the summary. 4. When the user opts to view the summary, the function should display the total amount spent in each category. # Detailed Breakdown: - **Function Name**: `expenseTracker` - **Input**: Data is collected via user input within the function. - **Output**: Prints the total expenses for each category when requested. # Expense Entry Specifications: - Category: String (e.g., \'Food\', \'Transport\') - Amount: Float (e.g., 12.50) - Description: String (e.g., \'Lunch at cafe\') # Expense Entry Format: ```plain Food 12.50 Lunch at cafe Transport 3.00 Bus fare ``` # Functionality: 1. Continuously prompt the user to input an expense or type \'summary\' to view the expense summary. 2. If the input is \'summary\', calculate and print the total expenses for each category. 3. The user can continue to input expenses until they manually interrupt the program or choose to exit. # Function Definition: ```python def expenseTracker(): # Your implementation here ``` # Example Usage: ```plain Enter an expense (or type \'summary\' to view expenses): Food 12.50 Lunch at cafe Enter an expense (or type \'summary\' to view expenses): Transport 3.00 Bus fare Enter an expense (or type \'summary\' to view expenses): summary Expenses Summary: Food: 12.50 Transport: 3.00 ```","solution":"def expenseTracker(): Tracks expenses input by the user and displays a summary of total expenses by category. import collections expenses = collections.defaultdict(float) while True: entry = input(\\"Enter an expense (or type \'summary\' to view expenses): \\") if entry.lower() == \'summary\': print(\\"Expenses Summary:\\") for category, total in expenses.items(): print(f\\"{category}: {total:.2f}\\") break else: try: entry_parts = entry.split(maxsplit=2) if len(entry_parts) != 3: raise ValueError(\\"Invalid entry format. Must be: <Category> <Amount> <Description>\\") category, amount, description = entry_parts amount = float(amount) expenses[category] += amount except ValueError as ve: print(f\\"Error: {ve} - Please try again.\\")"},{"question":"You are tasked with creating a Python function `merge_csv_files(file_list, output_filename)` that merges multiple CSV files into a single CSV file. Each input CSV file has the same set of columns. The merged output should include a header row followed by all the rows from each input file. To accomplish this, you need to use the `csv` library to handle CSV file operations. You need to follow these steps: 1. Open the output file in write mode (`w`). 2. Write the header row to the output file (use the header from the first input file). 3. Iterate over each file in `file_list`: - Open the file in read mode (`r`). - Use `csv.reader` to read the contents of the file. - For the first input file, skip the header row before copying the data. - For subsequent files, write all rows to the output file. 4. Close all files appropriately. Here is the function signature you need to implement: ```python def merge_csv_files(file_list: list, output_filename: str) -> None: pass ``` # Example Usage ```python merge_csv_files([\\"file1.csv\\", \\"file2.csv\\", \\"file3.csv\\"], \\"merged_output.csv\\") ``` This code should merge the contents of `file1.csv`, `file2.csv`, and `file3.csv` into `merged_output.csv`, ensuring that the output file has a single set of headers and all rows from each input file. # Constraints 1. Assume that all files in `file_list` exist and are in valid CSV format. 2. All input CSV files have the same column headers. 3. Use the `csv` library for reading and writing CSV files. 4. Handle any necessary file cleanup or closing of files to prevent resource leaks.","solution":"import csv def merge_csv_files(file_list, output_filename): Merges multiple CSV files into a single CSV file with headers. :param file_list: List of input CSV file paths to merge. :param output_filename: The name of the output CSV file. if not file_list: raise ValueError(\\"file_list cannot be empty\\") # Open the output file in write mode with open(output_filename, \'w\', newline=\'\') as outfile: writer = csv.writer(outfile) # Process each input file for i, file in enumerate(file_list): with open(file, \'r\') as infile: reader = csv.reader(infile) # Read the header header = next(reader) # Write the header from the first file if i == 0: writer.writerow(header) # Write all rows from the current file for row in reader: writer.writerow(row)"},{"question":"Implement a function `fizzbuzz_generator` that generates the FizzBuzz sequence up to a given integer n using Python\'s generator feature. The FizzBuzz problem is defined as: - For multiples of 3, return \\"Fizz\\" instead of the number. - For multiples of 5, return \\"Buzz\\" instead of the number. - For multiples of both 3 and 5, return \\"FizzBuzz\\" instead of the number. - For all other numbers, return the number itself. The generator should yield these values one at a time, rather than returning a list. **Function Signature:** ```python def fizzbuzz_generator(n: int) -> Generator[Union[int, str], None, None]: ... ``` **Inputs:** - `n` (int): The upper limit of the sequence (inclusive). **Output:** - Yields each element of the FizzBuzz sequence up to `n` in order. **Example:** ```python # Example Usage gen = fizzbuzz_generator(15) for val in gen: print(val) # Output: # 1 # 2 # Fizz # 4 # Buzz # Fizz # 7 # 8 # Fizz # Buzz # 11 # Fizz # 13 # 14 # FizzBuzz ```","solution":"from typing import Generator, Union def fizzbuzz_generator(n: int) -> Generator[Union[int, str], None, None]: for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: yield \\"FizzBuzz\\" elif i % 3 == 0: yield \\"Fizz\\" elif i % 5 == 0: yield \\"Buzz\\" else: yield i"},{"question":"Imagine you have a collection of web server access logs in a single directory. Each log file follows a naming pattern of \'access_log_YYYYMMDD.txt\' and contains lines formatted as \'IP_ADDRESS - DATE TIME REQUEST_STATUS RESPONSE_SIZE\'. Your task is to parse these files, filter out the entries that occurred on weekends, and generate a new set of log files in a specified output directory. Each new log file should follow the same naming pattern and contain only the weekday entries from the original log file. Additionally, you will generate a summary CSV report that includes the original filenames, the number of total entries, and the number of filtered entries. You should raise exceptions for the following conditions: `ValueError` if the input directory does not exist, and `FileNotFoundError` if no files match the expected naming pattern. The function should output: tuple: A tuple containing a list of the new filenames created and the path to the summary report CSV file. You should write self-contained code starting with: ``` import os import pandas as pd from datetime import datetime def task_func(input_dir, output_dir, report_filename=\'summary.csv\'): ```","solution":"import os import pandas as pd from datetime import datetime def is_weekend(date_str): Helper function to check if a given date is on a weekend. date_obj = datetime.strptime(date_str, \'%Y%m%d\') return date_obj.weekday() >= 5 # 5 for Saturday and 6 for Sunday def task_func(input_dir, output_dir, report_filename=\'summary.csv\'): if not os.path.isdir(input_dir): raise ValueError(f\\"The input directory {input_dir} does not exist.\\") if not os.path.isdir(output_dir): os.makedirs(output_dir) log_files = [f for f in os.listdir(input_dir) if f.startswith(\'access_log_\') and f.endswith(\'.txt\')] if not log_files: raise FileNotFoundError(f\\"No log files found in {input_dir} matching the pattern \'access_log_YYYYMMDD.txt\'.\\") summary_data = [] new_filenames = [] for log_file in log_files: input_filepath = os.path.join(input_dir, log_file) date_str = log_file.split(\'_\')[2].replace(\'.txt\', \'\') if is_weekend(date_str): continue with open(input_filepath, \'r\') as infile: lines = infile.readlines() total_entries = len(lines) weekday_entries = [line for line in lines if not is_weekend(line.split(\' \')[2])] new_filename = os.path.join(output_dir, log_file) with open(new_filename, \'w\') as outfile: outfile.writelines(weekday_entries) summary_data.append({ \'filename\': log_file, \'total_entries\': total_entries, \'filtered_entries\': len(weekday_entries) }) new_filenames.append(new_filename) summary_df = pd.DataFrame(summary_data) summary_filepath = os.path.join(output_dir, report_filename) summary_df.to_csv(summary_filepath, index=False) return new_filenames, summary_filepath"},{"question":"You need to write a function `rotate_list` that rotates elements of a list to the right by a specified number of steps. The rotation means that the last element of the list will become the first element, the second last element will become the second element, and so on. If the number of rotation steps is greater than the length of the list, it should wrap around. Specifically, you need to: 1. Define the function `rotate_list` that takes two arguments: a list of integers `lst` and an integer `k` representing the number of rotation steps. 2. The function should return a new list with elements rotated to the right by `k` steps. **Function Signature:** ```python def rotate_list(lst: List[int], k: int) -> List[int]: ``` **Requirements:** - The function should handle cases where the list is empty. - The function should handle cases where `k` is greater than the length of the list by using modulo operation. **Example Input/Output:** 1. `rotate_list([1, 2, 3, 4, 5], 2)` should return `[4, 5, 1, 2, 3]`. 2. `rotate_list([1, 2, 3], 4)` should return `[3, 1, 2]` since rotating 4 times is equivalent to rotating once (4 % 3 = 1). 3. `rotate_list([1], 3)` should return `[1]` as rotating a single element doesn\'t change the list. The new list should reflect the right rotation by the specified number of steps.","solution":"def rotate_list(lst, k): Rotates the elements of the list to the right by k steps. if not lst: return [] k = k % len(lst) return lst[-k:] + lst[:-k]"},{"question":"**Task**: Write a function `sort_by_custom_order(arr: List[int], order: List[int]) -> List[int]` that takes an array of integers and sorts it according to a specified custom order provided in a list. **Parameters**: - `arr`: A list of integers that needs to be sorted. - `order`: A list of integers that specifies the custom sorting order. Every integer in `arr` is guaranteed to be present in `order`. **Functionality**: The function will sort `arr` such that the integers appear in the order they are specified in `order`. Any integers in `arr` that are not in `order` should be omitted. The relative order of duplicate elements in `arr` should also follow the order specified in `order`. **Constraints**: - The length of `arr` and `order` is at most `10^5`. - It is guaranteed that all integers in `arr` are present in `order`. **Example**: ```python def sort_by_custom_order(arr, order): order_index = {value: index for index, value in enumerate(order)} return sorted(arr, key=lambda x: order_index[x]) # Example arr = [5, 3, 1, 4, 2, 3, 2, 4, 1] order = [3, 2, 1, 4, 5] sorted_arr = sort_by_custom_order(arr, order) print(sorted_arr) # Should return [3, 3, 2, 2, 1, 1, 4, 4, 5] ``` **Output**: ``` [3, 3, 2, 2, 1, 1, 4, 4, 5] ``` Follow the explanation and use `sorted` with a custom key function to implement this requirement.","solution":"from typing import List def sort_by_custom_order(arr: List[int], order: List[int]) -> List[int]: Function to sort an array of integers according to a specified custom order. Parameters: arr (List[int]): The list of integers to be sorted. order (List[int]): The list of integers specifying the custom order. Returns: List[int]: The sorted list of integers according to the custom order. order_index = {value: index for index, value in enumerate(order)} return sorted(arr, key=lambda x: order_index[x])"},{"question":"You are required to write a Python function named `longest_arithmetic_subsequence` that determines the length of the longest arithmetic subsequence within a given list of integers. A sequence is called arithmetic if the difference between consecutive elements is constant. # Function Signature ```python def longest_arithmetic_subsequence(nums): Determines the length of the longest arithmetic subsequence in a given list. :param nums: (list of int) A list of integers. :return: (int) The length of the longest arithmetic subsequence. ``` # Parameters - `nums`: A list of integers where each element is an integer representing a sequence of numbers. # Requirements - Return the length of the longest subsequence where the difference between consecutive elements is consistent. # Example ```python nums = [3, 6, 9, 12] output = longest_arithmetic_subsequence(nums) print(output) # Expected output: 4 nums = [9, 4, 7, 2, 10] output = longest_arithmetic_subsequence(nums) print(output) # Expected output: 3 (subsequence: [4, 7, 10]) nums = [20, 1, 15, 3, 10, 5, 8] output = longest_arithmetic_subsequence(nums) print(output) # Expected output: 4 (subsequence: [20, 15, 10, 5]) ``` # Notes - The function should be able to handle lists of varying lengths. - Implement an efficient algorithm to solve the problem. - The function should work with both positive and negative integers.","solution":"def longest_arithmetic_subsequence(nums): Determines the length of the longest arithmetic subsequence in a given list. :param nums: (list of int) A list of integers. :return: (int) The length of the longest arithmetic subsequence. if not nums: return 0 n = len(nums) if n == 1: return 1 # dp[i][difference] will store the length of the longest arithmetic subsequence # ending at index i with the given difference. dp = [{} for _ in range(n)] max_length = 2 # The minimum length of an arithmetic subsequence is 2 for i in range(n): for j in range(i): diff = nums[i] - nums[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"Consider a scenario where you need to validate if a given string containing parentheses is balanced or not. A string is considered to have balanced parentheses if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\', and they are properly nested. Your task is to write a function named `is_balanced_parentheses(s)` that checks if the parentheses in the given string `s` are balanced. The function should return `True` if the parentheses are balanced and `False` otherwise. **Function Signature:** ```python def is_balanced_parentheses(s: str) -> bool: ``` **Parameters:** - `s` (str): A string containing only the characters \'(\' and \')\'. **Returns:** - (bool): `True` if the string `s` has balanced parentheses, otherwise `False`. **Requirements:** - You must use a stack data structure to solve this problem efficiently. - Your solution should have a linear time complexity O(n), where n is the length of the string. **Example:** ```python result1 = is_balanced_parentheses(\\"()\\") print(result1) # Output: True result2 = is_balanced_parentheses(\\"(()))\\") print(result2) # Output: False result3 = is_balanced_parentheses(\\"(())\\") print(result3) # Output: True ``` This problem encourages understanding of stack data structure usage and helps practice solving bracket matching problems with efficient algorithms.","solution":"def is_balanced_parentheses(s: str) -> bool: Checks if the parentheses in the given string are balanced. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"You are tasked with implementing a function that calculates the row sums of a given matrix. This operation is frequently used in data analysis and machine learning when you need to aggregate values across different rows of a matrix. Using the NumPy library, write a function `calculate_row_sums` that takes in one argument: - `matrix`: A 2D NumPy array. The function should return a 1D NumPy array where each element is the sum of the corresponding row in the input matrix. Specific Requirements: - You must use the `numpy.sum` function to perform the row-wise summation. - The function should return an array with the same `data-type` as the input matrix. - The function should be named `calculate_row_sums`. Example: ```python # Example usage of the function import numpy as np input_matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) row_sums = calculate_row_sums(input_matrix) print(row_sums) ``` Expected output: ``` array([ 6, 15, 24]) ```","solution":"import numpy as np def calculate_row_sums(matrix): Returns a 1D NumPy array where each element is the sum of the corresponding row in the input matrix. return np.sum(matrix, axis=1)"},{"question":"Implement a tic-tac-toe game where two players take turns to place their marks (\'X\' and \'O\') on a 3x3 grid. The game should determine the winner or a draw based on the current state of the game. If the game is won or drawn, it should declare the result. Assume that the players are humans and take inputs from the console. Your task is to implement the necessary functions to: 1. Display the current state of the game board. 2. Take input from the current player. 3. Update the board with the player\'s mark. 4. Check if there is a winner or if the game is drawn. Here are the detailed requirements for the functions: # Function Signatures: ```python def display_board(board): ``` ```python def player_input(player): ``` ```python def update_board(board, position, player): ``` ```python def check_winner(board): ``` # Parameters: - `board`: A 3x3 list of lists representing the game board. - `player`: A string representing the current player (\'X\' or \'O\'). - `position`: A tuple representing the row and column of the grid where the player wants to place their mark. # Requirements: 1. `display_board(board)`: This function should print the current state of the game board. 2. `player_input(player)`: This function should prompt the current player to input the row and column where they want to place their mark. It should return the position as a tuple. 3. `update_board(board, position, player)`: This function should update the game board with the player\'s mark at the given position. 4. `check_winner(board)`: This function should check if there is a winner. Return \'X\' if player X wins, \'O\' if player O wins, \'Draw\' if the game is drawn, or `None` if the game is still ongoing. # Example of Function Calls: ```python board = [[\' \' for _ in range(3)] for _ in range(3)] current_player = \'X\' while True: display_board(board) pos = player_input(current_player) update_board(board, pos, current_player) result = check_winner(board) if result: display_board(board) if result == \'Draw\': print(\\"The game is a draw!\\") else: print(f\\"Player {result} wins!\\") break current_player = \'O\' if current_player == \'X\' else \'X\' ``` # Example Execution: ``` 1 2 3 A O | X | ---+---+--- B | O | ---+---+--- C | | X Player X, enter your move (row column): B 1 1 2 3 A O | X | ---+---+--- B X | O | ---+---+--- C | | X ```","solution":"def display_board(board): Display the current state of the game board. print(\\" 1 2 3\\") for idx, row in enumerate(board): row_label = chr(ord(\'A\') + idx) print(f\\"{row_label} {\' | \'.join(row)}\\") if idx < len(board) - 1: print(\\" ---+---+---\\") def player_input(player): Take input from the current player. Returns the chosen position as a tuple. while True: try: position = input(f\\"Player {player}, enter your move (e.g., A 1): \\").split() row, col = position[0].upper(), int(position[1]) - 1 return ord(row) - ord(\'A\'), col except (IndexError, ValueError): print(\\"Invalid input. Please enter valid row and column (e.g., A 1).\\") def update_board(board, position, player): Update the game board with the player\'s mark at the given position. row, col = position if board[row][col] == \' \': board[row][col] = player return True else: print(\\"This position is already taken. Choose another one.\\") return False def check_winner(board): Check if there is a winner or if the game is drawn. Return \'X\' if player X wins, \'O\' if player O wins, \\"Draw\\" if the game is drawn, or None if the game is still ongoing. # Check rows, columns, and diagonals for a winner for i in range(3): if board[i][0] == board[i][1] == board[i][2] != \' \': return board[i][0] if board[0][i] == board[1][i] == board[2][i] != \' \': return board[0][i] if board[0][0] == board[1][1] == board[2][2] != \' \': return board[0][0] if board[0][2] == board[1][1] == board[2][0] != \' \': return board[0][2] # Check for draw if all(board[row][col] != \' \' for row in range(3) for col in range(3)): return \\"Draw\\" return None"},{"question":"Your task is to create a function called `read_and_write_file` that performs file operations while also demonstrating exception handling in Python. The function should read content from an existing file and write specific content to a new file. Additionally, appropriate error messages should be printed if the required files are not found or other IO exceptions occur. Requirements: 1. Implement the function `read_and_write_file` which should: - Read the content from a file named \\"input.txt\\". - Write the content to a file named \\"output.txt\\" with the added prefix \\"Output: \\" at the start of the file. 2. If the \\"input.txt\\" file does not exist or cannot be read, catch the `FileNotFoundError` and print \\"Error: The file \'input.txt\' was not found.\\" 3. If any other OS-related error occurs during file operations, catch the `OSError` and print \\"Error: An OS error occurred.\\" 4. If the function successfully reads from \\"input.txt\\" and writes to \\"output.txt\\", print \\"File read and write successfully.\\" Additionally, follow these steps for implementing the functions: ```python def read_and_write_file(): try: with open(\\"input.txt\\", \\"r\\") as infile: content = infile.read() with open(\\"output.txt\\", \\"w\\") as outfile: outfile.write(\\"Output: \\" + content) print(\\"File read and write successfully.\\") except FileNotFoundError: print(\\"Error: The file \'input.txt\' was not found.\\") except OSError: print(\\"Error: An OS error occurred.\\") ``` This function should demonstrate your ability to handle file operations, manage exceptions, and ensure robust error reporting in Python.","solution":"def read_and_write_file(): try: with open(\\"input.txt\\", \\"r\\") as infile: content = infile.read() with open(\\"output.txt\\", \\"w\\") as outfile: outfile.write(\\"Output: \\" + content) print(\\"File read and write successfully.\\") except FileNotFoundError: print(\\"Error: The file \'input.txt\' was not found.\\") except OSError: print(\\"Error: An OS error occurred.\\")"},{"question":"You are tasked with writing a Python function named `filename_mapper` which renames a series of files in the current working directory. These files have names following a specific pattern: `file1.txt`, `file2.txt`, up to `file9.txt`. The renamed files should follow the new pattern: `document_1.txt`, `document_2.txt`, up to `document_9.txt`. You need to utilize the `os` library\'s `rename` function to rename these files. Before attempting to rename each file, your function should first check to see if the file exists using `os.path.exists`. Additionally, ensure that if a file with the target name already exists, the function should skip renaming that specific file to avoid overwriting. Function Signature: ```python def filename_mapper() -> None: pass ``` Requirements: 1. Use the `os.rename` function to rename the files. 2. Use `os.path.exists` to check if the file exists before trying to rename it. 3. Skip the renaming process if a file with the target name already exists. Example Scenario: Assuming the current working directory has the following files: `file1.txt`, `file2.txt`, and `file3.txt`, after the execution of `filename_mapper` function, these files should be renamed to `document_1.txt`, `document_2.txt`, and `document_3.txt` respectively if those target files do not already exist. Notes: - Ensure to handle the cases where the original files do not exist. - Avoid overwriting existing files with the new names. Hints: Refer to the following Python library documentation for more details: - `os.rename`: to rename a file or directory. - `os.path.exists`: to check the existence of a path.","solution":"import os def filename_mapper() -> None: Renames files in the current directory from \'fileN.txt\' to \'document_N.txt\' where N is a number from 1 to 9. Ensures that if a file or target name does not exist, it handles those cases appropriately. for i in range(1, 10): original_filename = f\\"file{i}.txt\\" new_filename = f\\"document_{i}.txt\\" if os.path.exists(original_filename) and not os.path.exists(new_filename): os.rename(original_filename, new_filename)"},{"question":"You are tasked to write a function that reads a JSON file containing student records and outputs the name of the student with the highest average score. Each student record includes their name and a list of scores. The function should output: str: The name of the student with the highest average score. You should write self-contained code starting with: ``` import json def highest_avg_student(json_file): ```","solution":"import json def highest_avg_student(json_file): with open(json_file, \'r\') as file: data = json.load(file) max_avg = -1 top_student = \\"\\" for student in data: scores = student[\\"scores\\"] avg_score = sum(scores) / len(scores) if avg_score > max_avg: max_avg = avg_score top_student = student[\\"name\\"] return top_student"},{"question":"Given an array of integers, you need to write a function `compress_array(arr)` that compresses consecutive duplicates into tuples of (element, count). If an element does not have consecutive duplicates, it should still be part of the output with a count of 1. **Function signature**: ```python def compress_array(arr): pass ``` **Parameters**: - `arr` (list of int): A list of integers where consecutive duplicates need to be compressed. **Returns**: - list of tuple: A list of tuples where each tuple contains an integer from the original array and its count of consecutive duplicates. The function should iterate through the array and group consecutive duplicates together, recording their value and the number of times they repeat consecutively. **Example**: ```python # Example 1 arr = [1, 1, 2, 3, 3, 3, 4, 4, 5] compressed_arr = compress_array(arr) print(compressed_arr) # Example output: [(1, 2), (2, 1), (3, 3), (4, 2), (5, 1)] # Example 2 arr = [7, 7, 7, 1, 2, 2, 2, 3, 4, 5, 5, 6] compressed_arr = compress_array(arr) print(compressed_arr) # Example output: [(7, 3), (1, 1), (2, 3), (3, 1), (4, 1), (5, 2), (6, 1)] # Example 3 arr = [1, 2, 3, 4, 5] compressed_arr = compress_array(arr) print(compressed_arr) # Example output: [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1)] ``` # Notes: - Your implementation should handle an empty array and return an empty list in such cases. - Ensure the order of elements in the output matches the order of their first appearances in the input array.","solution":"def compress_array(arr): if not arr: return [] compressed = [] current_element = arr[0] count = 1 for element in arr[1:]: if element == current_element: count += 1 else: compressed.append((current_element, count)) current_element = element count = 1 compressed.append((current_element, count)) # Append the last group return compressed"},{"question":"Create a function that reads a CSV file containing information about students\' scores in three subjects: Mathematics, Physics, and Chemistry. The CSV file has four columns: \'StudentID\', \'Math\', \'Physics\', and \'Chemistry\'. The function should calculate the average score for each student and create a bar chart displaying the average scores for each student, with \'StudentID\' on the x-axis and the average score on the y-axis. The function should return a tuple containing: 1. pandas.DataFrame: A DataFrame with \'StudentID\' and their corresponding average scores. 2. matplotlib.axes._subplots.AxesSubplot: The bar chart. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(file_path): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(file_path): # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Calculate the average score for each student df[\'Average\'] = df[[\'Math\', \'Physics\', \'Chemistry\']].mean(axis=1) # Select only the StudentID and Average columns to return results_df = df[[\'StudentID\', \'Average\']] # Create a bar chart of average scores ax = results_df.plot(kind=\'bar\', x=\'StudentID\', y=\'Average\', legend=False) ax.set_xlabel(\'StudentID\') ax.set_ylabel(\'Average Score\') ax.set_title(\'Average Scores of Students\') # Return the DataFrame and the bar chart return results_df, ax"},{"question":"You are assisting in the simulation of traffic flow through an intersection controlled by traffic lights. The intersection has four incoming roads (north, south, east, and west) and one outgoing road for each direction. At any given time, traffic signals can allow vehicles to go straight or turn right, while vehicles intending to turn left must wait for a specific light. Your task is to write a function to determine the sequence in which the traffic signals should be triggered to ensure that all vehicles eventually get through the intersection without conflict. For simplicity, assume that every traffic light sequence allows one movement direction (straight or right turn) at a time. To achieve this: - Vehicles coming from opposite directions should not move simultaneously if they intend to go straight (to avoid head-on collisions). - Vehicles from the same direction should be allowed to go straight and turn right simultaneously. - Vehicles turning left should get a dedicated time slot when other directions are stopped. Your function `traffic_light_sequence` should generate a schedule for the traffic light signals ensuring that all directions and movements are allowed in an orderly fashion. The function signature is as follows: ```python def traffic_light_sequence(): Returns: a list of strings, each representing a phase of the traffic light sequence. Each string consists of directions allowed to move at that phase. Possible values in strings: - \\"N_straight\\": North direction moving straight. - \\"N_right\\": North direction turning right. - \\"S_straight\\": South direction moving straight. - \\"S_right\\": South direction turning right. - \\"E_straight\\": East direction moving straight. - \\"E_right\\": East direction turning right. - \\"W_straight\\": West direction moving straight. - \\"W_right\\": West direction turning right. - \\"N_left\\": North direction turning left. - \\"S_left\\": South direction turning left. - \\"E_left\\": East direction turning left. - \\"W_left\\": West direction turning left. pass ``` The list of strings should be designed in such a way that no two conflicting movements are allowed simultaneously, ensuring smooth traffic flow and avoiding any possible collisions.","solution":"def traffic_light_sequence(): Returns: a list of strings, each representing a phase of the traffic light sequence. Each string consists of directions allowed to move at that phase. return [ \\"N_straight S_right\\", # North straight and South right \\"S_straight N_right\\", # South straight and North right \\"E_straight W_right\\", # East straight and West right \\"W_straight E_right\\", # West straight and East right \\"N_left\\", # Dedicated time slot for North left turn \\"S_left\\", # Dedicated time slot for South left turn \\"E_left\\", # Dedicated time slot for East left turn \\"W_left\\" # Dedicated time slot for West left turn ]"},{"question":"# Data Frame Column Renamer You are required to create a function `rename_columns` which takes a pandas DataFrame and a dictionary as input. The dictionary keys represent the old column names and the values represent the new column names. This function will help in renaming specific columns of a DataFrame in a clear and straightforward manner. # Function Signature ```python def rename_columns(df: pd.DataFrame, columns_dict: dict) -> pd.DataFrame: This function renames specified columns in a DataFrame according to the provided dictionary. Parameters: - df: pd.DataFrame - The input DataFrame whose columns are to be renamed. - columns_dict: dict - A dictionary containing the old column names as keys and new column names as values. Returns: - pd.DataFrame - The DataFrame with renamed columns. pass ``` # Requirements 1. The function should return a new DataFrame with the columns renamed according to the `columns_dict`. 2. The original DataFrame should remain unchanged. 3. If any of the keys in the `columns_dict` do not match any columns in the input DataFrame, they should be ignored. 4. If the `columns_dict` is empty or no valid columns are provided, the original DataFrame should be returned. # Example Usage ```python import pandas as pd # Example DataFrame data = {\'A\': [1, 2, 3], \'B\': [4, 5, 6], \'C\': [7, 8, 9]} df = pd.DataFrame(data) # Dictionary mapping old column names to new column names columns_dict = { \'A\': \'Alpha\', \'B\': \'Beta\', \'D\': \'Delta\' # \'D\' does not exist in DataFrame, so it should be ignored } renamed_df = rename_columns(df, columns_dict) print(renamed_df) ``` # Expected Output ``` Alpha Beta C 0 1 4 7 1 2 5 8 2 3 6 9 ``` By completing this task, you will get hands-on experience with DataFrame manipulations and understanding how to manage column renaming in pandas.","solution":"import pandas as pd def rename_columns(df: pd.DataFrame, columns_dict: dict) -> pd.DataFrame: This function renames specified columns in a DataFrame according to the provided dictionary. Parameters: - df: pd.DataFrame - The input DataFrame whose columns are to be renamed. - columns_dict: dict - A dictionary containing the old column names as keys and new column names as values. Returns: - pd.DataFrame - The DataFrame with renamed columns. return df.rename(columns=columns_dict)"},{"question":"Your task is to write a function named `find_non_repeated_character` that identifies the first non-repeated character in a given string. The function should return the first character that does not repeat in the string. If all characters are repeated or the string is empty, the function should return `None`. # Instructions: 1. **Function Name:** `find_non_repeated_character` 2. **Input Parameters:** `s` - A string `s` containing only lowercase alphabetic characters. 3. **Returns:** A single character (the first non-repeated character) or `None` if there is no non-repeated character. 4. **Constraints:** - The input string `s` will not contain any numbers, punctuation, or whitespace. # Example: ```python print(find_non_repeated_character(\\"swiss\\")) # Output: \'w\' print(find_non_repeated_character(\\"level\\")) # Output: \'v\' print(find_non_repeated_character(\\"aabbcc\\")) # Output: None ``` In this problem, you need to iterate through the string and efficiently determine the first character that does not repeat anywhere else in the string. Consider using data structures that allow you to track the frequency of each character in the string. Be sure to handle edge cases, such as an empty string, and verify your function against various test cases.","solution":"def find_non_repeated_character(s): Returns the first non-repeated character in the string s. If all characters are repeated or the string is empty, returns None. char_count = {} # First pass: count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass: find the first non-repeated character for char in s: if char_count[char] == 1: return char return None"},{"question":"In this problem, you will implement a function `invert_dict` that takes a dictionary and returns a new dictionary with keys and values inverted. You are provided with a dictionary where all values are guaranteed to be unique and immutable, allowing them to be used as keys in the inverted dictionary. # Function Signature ```python def invert_dict(d: dict) -> dict: pass ``` # Parameters - `d` (dict): A dictionary where keys are any hashable type, and values are unique and immutable. # Returns - `inverted` (dict): A dictionary where each key is a value from the original dictionary, and each value is the corresponding key from the original dictionary. # Task 1. Iterate over the key-value pairs in the input dictionary. 2. For each key-value pair, insert the value as a key and the key as a value into the new dictionary. # Example ```python d = {\'a\': 1, \'b\': 2, \'c\': 3} inverted = invert_dict(d) print(\\"inverted:\\", inverted) # Expected output: # inverted: {1: \'a\', 2: \'b\', 3: \'c\'} ``` # Guidelines - Ensure the function `invert_dict` handles dictionaries with various hashable key types correctly. - Make sure there are no side effects on the original dictionary.","solution":"def invert_dict(d): Returns a new dictionary with keys and values inverted. Parameters: d (dict): A dictionary where keys are any hashable type, and values are unique and immutable. Returns: inverted (dict): A dictionary where each key is a value from the original dictionary, and each value is the corresponding key from the original dictionary. return {v: k for k, v in d.items()}"},{"question":"Your task is to write a function named `flatten_json` that will flatten a nested JSON object. This problem will teach you how to recursively process and manipulate JSON data in Python. The JSON object is given as a dictionary that might contain nested dictionaries, and your task is to convert this nested structure into a single-level dictionary. The keys in the flattened dictionary will be constructed by concatenating the keys from the nested structure with a period between them. For example: ```json { \\"a\\": { \\"b\\": { \\"c\\": 1 }, \\"d\\": 2 }, \\"e\\": 3 } ``` # Function Signature ```python def flatten_json(nested_json: dict) -> dict: ``` # Parameters - `nested_json` (dict): A dictionary representing the nested JSON object. # Returns - `flat_dict` (dict): A dictionary representing the flattened JSON object. # Function Description 1. Create an empty dictionary `flat_dict` to store the flattened key-value pairs. 2. Implement a recursive helper function that takes a dictionary and a prefix (representing the concatenated keys so far) as inputs. 3. For each key-value pair in the dictionary: - If the value is a dictionary, recursively call the helper function with the updated prefix. - Otherwise, construct the new key by concatenating the prefix and the current key with a period, and add the key-value pair to `flat_dict`. 4. Return the `flat_dict` as the result. # Constraints - The keys in the JSON object are guaranteed to be strings. - The JSON object only contains dictionaries or primitive data types (int, float, str, bool). # Example Given the initial nested JSON object: ```json { \\"a\\": { \\"b\\": { \\"c\\": 1 }, \\"d\\": 2 }, \\"e\\": 3 } ``` Calling `flatten_json({\\"a\\": {\\"b\\": {\\"c\\": 1}, \\"d\\": 2}, \\"e\\": 3})` should return: ```json { \\"a.b.c\\": 1, \\"a.d\\": 2, \\"e\\": 3 } ``` # Notes - Your solution should handle arbitrarily nested dictionaries. - Ensure that the function performs efficiently even with large and deeply nested JSON objects.","solution":"def flatten_json(nested_json: dict) -> dict: flat_dict = {} def flatten(current_dict, parent_key=\'\'): for key, value in current_dict.items(): new_key = f\\"{parent_key}.{key}\\" if parent_key else key if isinstance(value, dict): flatten(value, new_key) else: flat_dict[new_key] = value flatten(nested_json) return flat_dict"},{"question":"Write a function that takes a list of dictionaries, each representing a person with keys \'name\', \'age\', and \'score\'. The function should return a dictionary grouping the people by their age brackets (under 18, 18-35, 36-50, above 50), with each group containing a list of tuples where each tuple has the person\'s name and their score. Aim to maintain the order of names as in the original list within each age bracket. You should write self-contained code starting with: ``` def group_by_age_bracket(people): ```","solution":"def group_by_age_bracket(people): Groups people by their age brackets. Parameters: people (list of dict): List of dictionaries with keys \'name\', \'age\', and \'score\'. Returns: dict: Dictionary with age brackets as keys and list of tuples (name, score) as values. age_brackets = { \'under 18\': [], \'18-35\': [], \'36-50\': [], \'above 50\': [] } for person in people: name = person[\'name\'] age = person[\'age\'] score = person[\'score\'] if age < 18: age_brackets[\'under 18\'].append((name, score)) elif 18 <= age <= 35: age_brackets[\'18-35\'].append((name, score)) elif 36 <= age <= 50: age_brackets[\'36-50\'].append((name, score)) else: age_brackets[\'above 50\'].append((name, score)) return age_brackets"},{"question":"You are tasked with creating a scheduling system for an airline company. The system must ensure that no two flights operated by the same aircraft overlap in time. Each flight is designated by a start time, an end time, and a unique aircraft identifier. The start and end times are given in the format \\"HH:MM\\". Write a function `check_schedule_conflicts` that determines whether any aircraft has overlapping flights. The inputs to the function are: - `flights`: a list of dictionaries, each representing a flight with three keys: * `start_time`: a string representing the flight\'s start time in \\"HH:MM\\" format. * `end_time`: a string representing the flight\'s end time in \\"HH:MM\\" format. * `aircraft_id`: a string representing the unique identifier for the aircraft. The function should return: - `True` if there are any scheduling conflicts. - `False` if there are no scheduling conflicts. Use the following functions from the `datetime` module: - `datetime.strptime` to convert time strings into `datetime` objects for easy comparison. - `timedelta` for any potential time calculations. The function should properly handle the edge cases where flights may start or end exactly at the same time and ensure there is no conflict in such scenarios. Example: ```python flights = [ {\\"start_time\\": \\"09:00\\", \\"end_time\\": \\"10:30\\", \\"aircraft_id\\": \\"A1\\"}, {\\"start_time\\": \\"10:30\\", \\"end_time\\": \\"12:00\\", \\"aircraft_id\\": \\"A1\\"}, {\\"start_time\\": \\"11:00\\", \\"end_time\\": \\"12:00\\", \\"aircraft_id\\": \\"A2\\"}, {\\"start_time\\": \\"12:30\\", \\"end_time\\": \\"14:00\\", \\"aircraft_id\\": \\"A1\\"} ] check_schedule_conflicts(flights) ``` This should return `False` indicating no scheduling conflicts for any aircraft.","solution":"from datetime import datetime def check_schedule_conflicts(flights): Checks if there are any scheduling conflicts for aircraft. Parameters: flights (list): A list of dictionaries with keys \\"start_time\\", \\"end_time\\", and \\"aircraft_id\\". Returns: bool: True if there are scheduling conflicts, False otherwise. # Dictionary to store schedules for each aircraft schedules = {} # Traverse each flight record for flight in flights: start_time = datetime.strptime(flight[\'start_time\'], \\"%H:%M\\") end_time = datetime.strptime(flight[\'end_time\'], \\"%H:%M\\") aircraft_id = flight[\'aircraft_id\'] if aircraft_id not in schedules: schedules[aircraft_id] = [] # Check for overlapping times in current aircraft\'s schedule for existing_start, existing_end in schedules[aircraft_id]: if not (end_time <= existing_start or start_time >= existing_end): return True # Add current flight to the aircraft\'s schedule schedules[aircraft_id].append((start_time, end_time)) return False"},{"question":"You are tasked with writing a function called `isPalindrome` that determines whether a given string is a palindrome. A palindrome is a sequence of characters that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. The function should return `True` if the string is a palindrome and `False` otherwise. To solve this problem, you need to utilize the `str.isalnum` method to filter out non-alphanumeric characters and the `str.lower` method to handle case sensitivity. Specifically: - `str.isalnum()`: This method returns `True` if all characters in the string are alphanumeric (either letters or digits) and `False` otherwise. - `str.lower()`: This method returns a copy of the string with all the characters converted to lowercase. **Function Signature:** ```python def isPalindrome(input_str: str) -> bool: ``` **Input:** - `input_str` (str): A string containing any printable characters. **Output:** - (bool): `True` if `input_str` is a palindrome, otherwise `False`. **Example:** ```python assert isPalindrome(\\"A man, a plan, a canal, Panama\\") == True assert isPalindrome(\\"hello\\") == False ``` **Explanation:** To determine if a string is a palindrome, follow these steps: 1. Filter out all non-alphanumeric characters from the string using `str.isalnum`. 2. Convert the filtered string to lowercase using `str.lower`. 3. Check if the resulting string reads the same forward and backward. 4. If it does, return `True`; otherwise, return `False`. Ensure your implementation handles various cases including different characters and whitespace, and efficiently checks for palindromic sequences.","solution":"def isPalindrome(input_str: str) -> bool: Determines whether a given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Filter out non-alphanumeric characters and convert to lowercase cleaned_str = \'\'.join(char.lower() for char in input_str if char.isalnum()) # Check if the cleaned string reads the same forward and backward return cleaned_str == cleaned_str[::-1]"},{"question":"You are provided with a JSON file named `\'datasets/events_log.json\'` that contains event log data for a web application. Each entry in the JSON file represents an event with attributes such as \'event_id\', \'user_id\', \'event_type\', and \'timestamp\'. Your task is to define a function `extract_user_sessions(file_path: str) -> pd.DataFrame` that takes the path to the JSON file as input and returns a DataFrame with columns \'user_id\', \'session_id\', and \'events\'. The \'events\' column should list all event_ids for that user session. To do this, you should use the Pandas library to read the JSON file and process the events to determine user sessions. Specifically, you should adhere to the following steps: 1. Use the Pandas library\'s `pd.read_json` method to read the JSON file into a DataFrame. 2. Define a helper function `sessionize_events(df: pd.DataFrame) -> pd.DataFrame` that: - Sorts the events by \'user_id\' and \'timestamp\'. - Assigns a unique session_id to each set of consecutive events by the same user if the difference between consecutive timestamps is less than 30 minutes; otherwise, starts a new session. - Aggregates events by \'user_id\' and \'session_id\' into a list of event_ids. 3. Use this function to create the required DataFrame. 4. Return the resulting DataFrame with columns \'user_id\', \'session_id\', and \'events\'. You may assume that the \'timestamp\' column in the JSON file is in ISO 8601 format. Here\'s an example for clarity: ``` [ {\\"event_id\\": 1, \\"user_id\\": \\"A\\", \\"event_type\\": \\"click\\", \\"timestamp\\": \\"2023-01-01T00:00:00Z\\"}, {\\"event_id\\": 2, \\"user_id\\": \\"A\\", \\"event_type\\": \\"click\\", \\"timestamp\\": \\"2023-01-01T00:29:00Z\\"}, {\\"event_id\\": 3, \\"user_id\\": \\"B\\", \\"event_type\\": \\"click\\", \\"timestamp\\": \\"2023-01-01T00:00:00Z\\"}, {\\"event_id\\": 4, \\"user_id\\": \\"A\\", \\"event_type\\": \\"click\\", \\"timestamp\\": \\"2023-01-01T01:00:00Z\\"} ] ``` Example: Given the JSON file `datasets/events_log.json`, the function call `extract_user_sessions(\'datasets/events_log.json\')` should return a DataFrame such as: ``` user_id session_id events 0 A 1 [1, 2] 1 A 2 [4] 2 B 1 [3] ``` You are required to use the Pandas library\'s `pd.read_json` and `pd.DataFrame` methods as described in the function documentation.","solution":"import pandas as pd from datetime import timedelta def extract_user_sessions(file_path: str) -> pd.DataFrame: # Read the JSON file into a DataFrame df = pd.read_json(file_path) return sessionize_events(df) def sessionize_events(df: pd.DataFrame) -> pd.DataFrame: # Convert the timestamp to datetime format df[\'timestamp\'] = pd.to_datetime(df[\'timestamp\']) # Sort by user_id and timestamp df = df.sort_values(by=[\'user_id\', \'timestamp\']) # Sessionize the events df[\'time_diff\'] = df.groupby(\'user_id\')[\'timestamp\'].diff() df[\'new_session\'] = df[\'time_diff\'] > timedelta(minutes=30) df[\'session_id\'] = df.groupby(\'user_id\')[\'new_session\'].cumsum() + 1 # Aggregate events by user_id and session_id result_df = (df.groupby([\'user_id\', \'session_id\']) .agg({\'event_id\': list}) .reset_index() .rename(columns={\'event_id\': \'events\'})) return result_df"},{"question":"In this exercise, you are tasked with creating a function `log_parser(log: str) -> dict` that processes an input string representing a log and returns a dictionary summarizing the number of occurrences of each log level. The logs will follow a specific format where each line represents a single log entry with the following format: ``` <timestamp> <log_level> <message> ``` - `<timestamp>`: A string in the format `YYYY-MM-DD HH:MM:SS` representing the date and time of the log entry. - `<log_level>`: A string representing the log level, which can be one of the following: \\"INFO\\", \\"WARNING\\", \\"ERROR\\". - `<message>`: A string containing the log message. Your task is to implement the following detailed steps: 1. **Split the input log** string into lines. 2. **Parse each line** to extract the log level. 3. **Count the occurrences** of each log level (\\"INFO\\", \\"WARNING\\", \\"ERROR\\"). 4. **Return a dictionary** with the log levels as keys and the number of their occurrences as values. # Example: ```python # Example log string for testing log = 2023-01-01 10:00:00 INFO Starting the service 2023-01-01 10:05:00 WARNING Low memory 2023-01-01 10:10:00 ERROR Service crashed 2023-01-01 10:15:00 INFO Service restarted log_summary = log_parser(log) print(log_summary) ``` Expected output: ```python { \\"INFO\\": 2, \\"WARNING\\": 1, \\"ERROR\\": 1 } ``` # Requirements: - The function should be named `log_parser`. - The function should handle logs with varying numbers of lines. - The function should be case-sensitive, i.e., \\"info\\" and \\"INFO\\" are different log levels. - You may assume the input log string is well-formed and each line follows the specified format. Good luck, and happy coding!","solution":"def log_parser(log: str) -> dict: Processes the given log string and returns a dictionary summarizing the number of occurrences of each log level. Args: log (str): The log string, where each line represents a log entry in the format \\"<timestamp> <log_level> <message>\\" Returns: dict: A dictionary with log levels (\\"INFO\\", \\"WARNING\\", \\"ERROR\\") as keys and their occurrences as values. log_levels = [\\"INFO\\", \\"WARNING\\", \\"ERROR\\"] log_summary = {level: 0 for level in log_levels} # Split the log string into lines lines = log.split(\'n\') for line in lines: if line.strip(): # Extract the log level by splitting the line and taking the second element log_parts = line.split(\' \') log_level = log_parts[2] if log_level in log_levels: log_summary[log_level] += 1 return log_summary"},{"question":"You are tasked with creating a function `fetch_user_data(user_id, api_key, base_api_url)` that performs the following actions: 1. Makes a GET request to fetch user data from a provided `user_id`, `api_key`, and `base_api_url`. 2. If the request is successful (HTTP status code 200), it returns the JSON response containing user data. 3. If the request fails with a 400-level or 500-level HTTP status code, it should print an error message detailing the status code, reason, and response text, then terminate the program with a non-zero exit status. 4. If the request fails due to a client-side error (status code 4xx), it should print \\"Client error\\" along with the error details. 5. If the request fails due to a server-side error (status code 5xx), it should print \\"Server error\\" along with the error details. 6. If there is an exception during the request (e.g., network issues), it should print an error message explaining that something went wrong with the request and terminate the program with a non-zero exit status. To accomplish this, you\'ll need to utilize the `requests.get` method for making the HTTP GET request and the `sys.exit` function to terminate the program in case of an error. Make sure to handle any potential request exceptions properly. Function Signature: ```python def fetch_user_data(user_id: str, api_key: str, base_api_url: str) -> dict: ``` **Parameters:** - `user_id` (str): The user ID to fetch the data for. - `api_key` (str): The API key to authenticate the request. - `base_api_url` (str): The base URL of the API to which the GET request should be made. **Returns:** - If successful, a dictionary containing user data. **Prints and Exits:** - Prints error details and terminates the program on failure. **Example Usage:** ```python user_id = \\"12345\\" api_key = \\"your_api_key_here\\" base_api_url = \\"https://api.example.com/users/\\" user_data = fetch_user_data(user_id, api_key, base_api_url) ``` **Note:** - You need to import the `requests` module to perform the GET request. - You need to import the `sys` module to terminate the program.","solution":"import requests import sys def fetch_user_data(user_id, api_key, base_api_url): Fetches user data from the API using the given user_id, api_key, and base_api_url. Parameters: - user_id (str): The user ID to fetch the data for. - api_key (str): The API key to authenticate the request. - base_api_url (str): The base URL of the API to which the GET request should be made. Returns: - dict: A dictionary containing user data if the request is successful. Prints error details and terminates the program on failure. url = f\\"{base_api_url}/{user_id}\\" headers = {\\"Authorization\\": f\\"Bearer {api_key}\\"} try: response = requests.get(url, headers=headers) if response.status_code == 200: return response.json() elif 400 <= response.status_code < 500: print(f\\"Client error: {response.status_code} {response.reason} {response.text}\\") elif 500 <= response.status_code < 600: print(f\\"Server error: {response.status_code} {response.reason} {response.text}\\") sys.exit(1) except requests.exceptions.RequestException as e: print(f\\"Request failed: {e}\\") sys.exit(1)"},{"question":"In this exercise, you are asked to write a function named `is_palindrome` that checks if a given string is a palindrome. A palindrome is a string that reads the same forwards as backwards, ignoring spaces, punctuation, and capitalization. The function `is_palindrome` should take a single parameter: 1. `s`: A string that may contain letters, numbers, spaces, and punctuation. The function will: 1. Remove all non-alphanumeric characters from the string. 2. Convert the string to lowercase. 3. Check if the cleaned string reads the same forwards and backwards. 4. Return `True` if the string is a palindrome, and `False` otherwise. Here\'s the prototype of the `is_palindrome` function you need to implement: ```python def is_palindrome(s): pass ``` **Requirements**: - Use list comprehension or a generator expression to remove non-alphanumeric characters from the string. - Use string methods to convert the string to lowercase. - Compare the cleaned string to its reverse to determine if it is a palindrome. **Example usage**: ```python print(is_palindrome(\\"A man, a plan, a canal, Panama\\")) # Output: True print(is_palindrome(\\"Hello, world!\\")) # Output: False ``` In the first example, `\\"A man, a plan, a canal, Panama\\"` is considered a palindrome, so the function returns `True`. In the second example, `\\"Hello, world!\\"` is not a palindrome, so the function returns `False`.","solution":"def is_palindrome(s): Checks if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. Parameters: s (str): The input string which may contain letters, numbers, spaces, and punctuation. Returns: bool: Returns True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string reads the same forwards and backwards return cleaned == cleaned[::-1]"},{"question":"You are required to write a function named `sort_and_find` that sorts a list of integers and finds the largest number less than a given target. Your task is to: 1. Sort the list of integers in ascending order. 2. Traverse the sorted list to find the largest number less than the given target. 3. Return the largest number found or `None` if no such number exists. Function Signature ```python def sort_and_find(numbers: list, target: int) -> int: ``` Parameters: - `numbers` (list): A list of integers that needs to be sorted. - `target` (int): An integer representing the target value to compare against. Returns: - `int`: The largest number in the list that is less than the target. If no such number exists, return `None`. Example: ```python numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5] target = 5 result = sort_and_find(numbers, target) print(result) # Output: 4 numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5] target = 1 result = sort_and_find(numbers, target) print(result) # Output: None ``` **Note:** - The input list may contain duplicate numbers. - You should handle edge cases where the list is empty or all numbers are greater than or equal to the target.","solution":"def sort_and_find(numbers: list, target: int) -> int: Sorts the list of integers and finds the largest number less than the given target. Parameters: numbers (list): A list of integers that needs to be sorted. target (int): An integer representing the target value to compare against. Returns: int: The largest number in the list that is less than the target. If no such number exists, return None. # Sort the list in ascending order numbers.sort() # Initialize result as None result = None # Traverse the sorted list for num in numbers: if num < target: result = num else: break return result"},{"question":"You are required to write a function called `find_missing_number` that takes in a list of integers representing a sequence from 1 to `n` with one number missing. The function should: - Identify the missing integer in the sequence. - Return the missing integer. The sequence will always be missing exactly one number, and no duplicates will be present. Here\'s an example of what the function call should look like: ```python find_missing_number([1, 2, 4, 5, 6]) ``` This should return: ```text 3 ``` Explanation: - The input list is supposed to be a sequence from 1 to 6. - The number 3 is missing from this sequence, so the function should return 3.","solution":"def find_missing_number(sequence): Finds the missing number in a sequence from 1 to n with one missing number. Parameters: sequence (list): List of integers representing the sequence with one missing number. Returns: int: The missing integer. # Calculate the expected sum of numbers from 1 to n where n is the length of sequence + 1 n = len(sequence) + 1 expected_sum = n * (n + 1) // 2 # Calculate the actual sum of the provided sequence actual_sum = sum(sequence) # The missing number is the difference between expected sum and actual sum return expected_sum - actual_sum"},{"question":"In this problem, you need to implement a function that takes a list of integers and returns a list where each element is the product of all the integers in the original list except the one at the current position. Do this without using division. The function signature should be: ```python def product_except_self(nums): Returns a list where each element is the product of all integers in the input list except the one at the current position. Parameters ---------- nums : list of int The input list of integers. Returns ------- result : list of int A list where each element is the product of all integers in the input list except the one at the current position. ``` # Task 1. **Edge Cases**: Consider edge cases such as an input list containing zero(s) and/or only one element. 2. **Efficient Calculation**: You cannot use the division operation. Instead, you should think about this problem as a two-pass problem. Use an extra array to store the intermediate results like products of all elements to the left of each index and products of all elements to the right of each index. 3. **Return the Result**: The function should return a list of integers where each element corresponds to the product of all integers in the input list except for the one at its position. # Example Given `nums = [1, 2, 3, 4]`, the function `product_except_self(nums)` should return `[24, 12, 8, 6]`. **Hint**: Consider calculating the prefix and suffix product arrays and combining them to get the desired result for each index.","solution":"def product_except_self(nums): Returns a list where each element is the product of all integers in the input list except the one at the current position. Parameters ---------- nums : list of int The input list of integers. Returns ------- result : list of int A list where each element is the product of all integers in the input list except the one at the current position. length = len(nums) if length == 0: return [] # Initialize the result array result = [1] * length # Calculate left-side product left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Calculate right-side product and combine with left-side product right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"You are asked to implement a K-means clustering algorithm in Python from scratch, without using any libraries such as `scikit-learn`. K-means is an iterative algorithm that partitions a dataset into K distinct, non-overlapping subgroups (clusters) where each datapoint belongs to the cluster with the nearest mean. # Function Requirements You need to implement the function `k_means(X, k, max_iters=100)` that performs K-means clustering. **Function Signature:** ```python def k_means(X, k, max_iters=100): Input: X: A numpy array of shape (m, n) where each row corresponds to a data point. k: The number of clusters. max_iters: Maximum number of iterations (default is 100). Output: centroids: A numpy array of shape (k, n) representing the cluster centroids. labels: A numpy array of shape (m,) containing the cluster labels for each data point. ``` # Detailed Instructions: 1. **Input:** - `X` is a NumPy array of shape `(m, n)` where `m` is the number of samples and `n` is the number of features. - `k` is an integer indicating the number of clusters. - `max_iters` is an integer for the maximum number of iterations the algorithm will run; it defaults to 100. 2. **Output:** - `centroids` which is a NumPy array of shape `(k, n)` representing the centroids of the clusters. - `labels` which is a NumPy array of shape `(m,)` containing the cluster labels (0 to k-1) for each data point. 3. **Steps:** - Initialize the centroids by randomly selecting `k` different data points from `X`. - Repeat the following steps until convergence or until `max_iters` iterations: 1. Assign each data point to the nearest centroid based on Euclidean distance. 2. Compute the new centroids by taking the mean of all data points assigned to each centroid. - Convergence is achieved when the assignments do not change between iterations or `max_iters` iterations are reached. # Additional Notes: - **General Structure:** For the data assignment step, use `numpy` vectorized operations to compute distances and assignments efficiently. - **Update Centroids:** Use `numpy` capabilities to handle mean calculations for updating centroids without for-loops for better performance. - **Edge Cases:** Handle cases where a cluster may get zero points assigned by reinitializing the centroid to a random data point. - **Random Initialization:** Ensure reproducibility by setting a random seed if necessary. Your implementation should be efficient and correctly handle large datasets. The use of efficient NumPy operations to avoid explicit loops where possible is encouraged.","solution":"import numpy as np def k_means(X, k, max_iters=100): Performs K-Means clustering on the dataset X. Input: X: A numpy array of shape (m, n) where each row corresponds to a data point. k: The number of clusters. max_iters: Maximum number of iterations (default is 100). Output: centroids: A numpy array of shape (k, n) representing the cluster centroids. labels: A numpy array of shape (m,) containing the cluster labels for each data point. # Number of data points and features m, n = X.shape # Randomly initialize centroids by selecting k different data points from X np.random.seed(42) initial_indices = np.random.choice(m, k, replace=False) centroids = X[initial_indices] # Loop till max_iters for _ in range(max_iters): # Step 1: Assign each data point to the nearest centroid distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2) labels = np.argmin(distances, axis=1) # Step 2: Compute new centroids by taking the mean of all data points assigned to each centroid new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)]) # If centroids do not change, we have converged if np.all(centroids == new_centroids): break centroids = new_centroids return centroids, labels"},{"question":"You are given a list of dictionaries representing employees in a company. Each dictionary contains the keys: \\"name\\" (str), \\"age\\" (int), and \\"salary\\" (float). Your task is to write a function `filter_and_sort_employees(employees: List[Dict[str, Union[str, int, float]]], min_age: int, min_salary: float) -> List[Dict[str, Union[str, int, float]]]` that filters out employees who do not meet the minimum age or minimum salary criteria and then sorts the remaining employees first by age in ascending order and then by salary in descending order. **Function Signature:** ```python def filter_and_sort_employees(employees: List[Dict[str, Union[str, int, float]]], min_age: int, min_salary: float) -> List[Dict[str, Union[str, int, float]]]: ``` **Parameters:** - `employees` (List[Dict[str, Union[str, int, float]]]): A list of dictionaries where each dictionary represents an employee. - `min_age` (int): The minimum age an employee must meet to be included. - `min_salary` (float): The minimum salary an employee must meet to be included. **Constraints:** 1. All employee dictionaries will have the keys \\"name\\", \\"age\\", and \\"salary\\". 2. The function should handle empty input gracefully. **Example Usage:** ```python employees = [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"salary\\": 70000.0}, {\\"name\\": \\"Bob\\", \\"age\\": 24, \\"salary\\": 50000.0}, {\\"name\\": \\"Charlie\\", \\"age\\": 35, \\"salary\\": 120000.0}, {\\"name\\": \\"David\\", \\"age\\": 27, \\"salary\\": 60000.0}, ] result = filter_and_sort_employees(employees, 25, 60000.0) ``` The expected output would be: ```python [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"salary\\": 70000.0}, {\\"name\\": \\"Charlie\\", \\"age\\": 35, \\"salary\\": 120000.0} ] ``` In this example, employees Alice and Charlie meet the criteria and are sorted first by age then by salary. Bob and David are excluded because they do not meet the minimum salary requirement.","solution":"from typing import List, Dict, Union def filter_and_sort_employees(employees: List[Dict[str, Union[str, int, float]]], min_age: int, min_salary: float) -> List[Dict[str, Union[str, int, float]]]: # Filter employees based on minimum age and minimum salary filtered_employees = [emp for emp in employees if emp[\\"age\\"] >= min_age and emp[\\"salary\\"] >= min_salary] # Sort the filtered employees first by age (ascending) then by salary (descending) sorted_employees = sorted(filtered_employees, key=lambda emp: (emp[\\"age\\"], -emp[\\"salary\\"])) return sorted_employees"},{"question":"Given a list of mixed elements containing integers and strings, implement a function that separates the integers and strings into two different lists, sorts each list in ascending order, and then merges them back together such that the sorted integers appear first followed by the sorted strings. You need to write a function: ```python def separate_and_sort(elements: List[Union[int, str]]) -> List[Union[int, str]]: # Your code here ``` # Input: - `elements`: A list of mixed elements that contains both integers and strings. Each element can either be an integer or a string and does not follow any specific order. # Output: - A list with sorted integers followed by sorted strings. # Example: ```python separate_and_sort([3, \'apple\', 1, \'banana\', 2, \'cherry\']) ``` Expected output: ```python [1, 2, 3, \'apple\', \'banana\', \'cherry\'] ``` # Constraints: - The input list contains at least one integer and one string. - The result list should have all integers in ascending order followed by all strings in ascending lexicographical order.","solution":"from typing import List, Union def separate_and_sort(elements: List[Union[int, str]]) -> List[Union[int, str]]: Separates the integers and strings, sorts them individually, and then merges them back with integers first followed by strings. ints = sorted([element for element in elements if isinstance(element, int)]) strs = sorted([element for element in elements if isinstance(element, str)]) return ints + strs"},{"question":"You are given a task where you need to analyze and visualize historical temperature data for multiple cities. You need to write a function called `analyze_and_plot_temperature_data` that performs the following operations: 1. **Generate Temperature Data:** - Generate temperature data for 12 months for three cities using `numpy.random.normal`: - City 1: Mean temperature of 22°C with a standard deviation of 5. - City 2: Mean temperature of 15°C with a standard deviation of 7. - City 3: Mean temperature of 30°C with a standard deviation of 4. 2. **Analyze Temperature Data:** - Create a function `calculate_monthly_averages` that calculates the average temperature for each city over the 12 months. - Create a function `find_hottest_month` that determines the city with the highest average temperature for each month. 3. **Plot Temperature Data:** - Plot the temperature data for all three cities over the 12 months using `matplotlib`. - Highlight the hottest city for each month with a distinct marker. - Display the plot using `matplotlib.pylab.show`. Here is a template to complete the function: **Function:** ```python import numpy as np import matplotlib.pyplot as plt def calculate_monthly_averages(data): return [np.mean(month) for month in zip(*data)] def find_hottest_month(data): hottest_months_per_city = np.argmax(data, axis=0) return hottest_months_per_city def analyze_and_plot_temperature_data(): months = np.arange(1, 13) city1 = np.random.normal(22, 5, 12) city2 = np.random.normal(15, 7, 12) city3 = np.random.normal(30, 4, 12) data = np.array([city1, city2, city3]) monthly_averages = calculate_monthly_averages(data) hottest_city_each_month = find_hottest_month(data) plt.plot(months, city1, label=\'City 1\') plt.plot(months, city2, label=\'City 2\') plt.plot(months, city3, label=\'City 3\') markers = [\'o\', \'^\', \'s\'] for i in range(3): mask = hottest_city_each_month == i plt.plot(months[mask], data[i, mask], markers[i], label=f\'Hottest City {i+1}\', markersize=10) plt.xlabel(\'Month\') plt.ylabel(\'Temperature (°C)\') plt.title(\'Monthly Average Temperature for Three Cities\') plt.legend() plt.show() # Example usage: # analyze_and_plot_temperature_data() ```","solution":"import numpy as np import matplotlib.pyplot as plt def calculate_monthly_averages(data): Calculates the average temperature for each month. Args: data (numpy.ndarray): 2D array where each row corresponds to a city\'s temperature data over 12 months. Returns: list: A list of average temperatures for each month. return [np.mean(month) for month in zip(*data)] def find_hottest_month(data): Finds the city with the highest temperature for each month. Args: data (numpy.ndarray): 2D array where each row corresponds to a city\'s temperature data over 12 months. Returns: numpy.ndarray: An array of indices indicating the city with the highest temperature for each month. return np.argmax(data, axis=0) def analyze_and_plot_temperature_data(): Generates temperature data for three cities over 12 months, analyzes the data by calculating monthly averages, finds the hottest city for each month, and then plots the temperature data. months = np.arange(1, 13) # Generate temperature data for three cities city1 = np.random.normal(22, 5, 12) city2 = np.random.normal(15, 7, 12) city3 = np.random.normal(30, 4, 12) # Combine data data = np.array([city1, city2, city3]) # Calculate monthly averages monthly_averages = calculate_monthly_averages(data) # Find the city with the highest temperature each month hottest_city_each_month = find_hottest_month(data) # Plot the temperature data plt.plot(months, city1, label=\'City 1\') plt.plot(months, city2, label=\'City 2\') plt.plot(months, city3, label=\'City 3\') # Highlight the hottest city each month markers = [\'o\', \'^\', \'s\'] for i in range(len(hottest_city_each_month)): city_index = hottest_city_each_month[i] plt.plot(months[i], data[city_index, i], markers[city_index], label=f\'Hottest City {city_index+1}\', markersize=10) plt.xlabel(\'Month\') plt.ylabel(\'Temperature (°C)\') plt.title(\'Monthly Temperature Data for Three Cities\') plt.legend() plt.show() # Example usage: # analyze_and_plot_temperature_data()"},{"question":"You are building a software system for a university\'s library. The library maintains a list of books and their corresponding borrow timestamps. You need to implement a function that counts how many books are currently borrowed for more than a given number of days. # Objective Write a function to determine the number of books that have been borrowed for more than a specified number of days from the current date. Function Signature ```python def count_overdue_books(borrows: List[Tuple[str, str]], days: int) -> int: ... ``` Input - `borrows` (List[Tuple[str, str]]): A list where each element is a tuple. The first string is the book\'s title and the second string is the borrow timestamp in the format \\"YYYY-MM-DD\\". - `days` (int): An integer representing the number of days to determine whether a book is overdue. Output - `int`: The number of books borrowed for more than the given number of days. Example ```python borrows = [(\\"Book A\\", \\"2022-01-15\\"), (\\"Book B\\", \\"2022-02-10\\"), (\\"Book C\\", \\"2022-03-05\\")] days = 45 print(count_overdue_books(borrows, days)) # Output: 2 ``` Explanation Assuming the current date is \\"2022-04-01\\": 1. \\"Book A\\" has been borrowed for 76 days (overdue). 2. \\"Book B\\" has been borrowed for 50 days (overdue). 3. \\"Book C\\" has been borrowed for 27 days (not overdue). Thus, there are 2 books that have been borrowed for more than 45 days. Notes - Utilize the `datetime` module to handle dates and calculate the difference. - Consider the current date as the date of execution for the function.","solution":"from datetime import datetime, timedelta from typing import List, Tuple def count_overdue_books(borrows: List[Tuple[str, str]], days: int) -> int: Count the number of books borrowed for more than a specified number of days. Args: borrows (List[Tuple[str, str]]): list of tuples with book titles and borrow dates days (int): threshold number of days to check for overdue books Returns: int: number of books borrowed for more than the given number of days current_date = datetime.now() overdue_count = 0 for book, borrow_date in borrows: borrow_date_dt = datetime.strptime(borrow_date, \\"%Y-%m-%d\\") if (current_date - borrow_date_dt).days > days: overdue_count += 1 return overdue_count"},{"question":"Create a Python function that generates a random matrix with dimensions nxn using NumPy. Then count how many elements in the matrix are greater than a certain threshold value. The function should return a tuple containing the generated matrix and the count of elements above the threshold. You should write self-contained code starting with: ``` import numpy as np def count_elements_above_threshold(n: int, threshold: float): ```","solution":"import numpy as np def count_elements_above_threshold(n: int, threshold: float): Generates a random nxn matrix and counts how many elements are above a given threshold. Parameters: n (int): The dimension of the matrix (nxn). threshold (float): The threshold value. Returns: tuple: A tuple containing the generated matrix and the count of elements above the threshold. matrix = np.random.rand(n, n) # generate a nxn matrix with random numbers in [0, 1) count = np.sum(matrix > threshold) return matrix, count"},{"question":"Design a function named `remove_duplicates` to eliminate duplicate integers from a sorted list while maintaining the sorted order of the remaining elements. The function should accept a list of integers as its parameter and return a list with duplicates removed. The function `remove_duplicates` should follow these specifications: - Accept a list of integers named `sorted_list`, where the list is pre-sorted in non-decreasing order. - Return a new list consisting of the unique integers from the original list, preserving their original order. Consider the following constraints: - The input list `sorted_list` will always be sorted in non-decreasing order. - The function should not use any additional sorting algorithms outside the scope of removing duplicates. Example usage: ```python print(remove_duplicates([1, 1, 2, 3, 3, 4, 5, 5])) # Output: [1, 2, 3, 4, 5] print(remove_duplicates([0, 0, 0, 0, 0])) # Output: [0] print(remove_duplicates([2, 4, 4, 4, 6, 7, 7])) # Output: [2, 4, 6, 7] ```","solution":"def remove_duplicates(sorted_list): Remove duplicates from a sorted list while maintaining the order of the remaining elements. Parameters: sorted_list (list of int): A list of integers sorted in non-decreasing order. Returns: list of int: A new list with duplicates removed. if not sorted_list: return [] unique_list = [sorted_list[0]] for num in sorted_list[1:]: if num != unique_list[-1]: unique_list.append(num) return unique_list"},{"question":"You have been provided with a collection of geographical data in a JSON file that contains information about different cities. Your task is to implement a function that processes this data to find the city with the maximum population density. The JSON file includes an array of city objects, where each object has the following structure: ```json { \\"name\\": \\"CityName\\", \\"population\\": 123456, \\"area\\": 678.9 } ``` The function you must implement, named `find_most_dense_city`, should: 1. Load and parse the JSON data from the specified file. 2. Calculate the population density for each city (population / area). 3. Determine the city with the highest population density. 4. Return the name of the city with the maximum population density. # Function Signature ```python def find_most_dense_city(filename: str) -> str: ``` # Detailed Steps 1. **Load the Data**: Use the `json.load` function to read the data from the specified file. 2. **Calculate Density**: Iterate through the list of cities and calculate the population density for each city. 3. **Find the Maximum Density**: Keep track of the city with the highest population density encountered during the iteration. 4. **Return the Result**: Return the name of the city with the highest population density. # Instructions - Use the `json` library to load the data from the file. - Ensure the function only reads data from the specified file and processes it according to the mentioned steps. - Assume valid input data where each city object contains the necessary fields (`name`, `population`, and `area`). # Example Usage Assuming you have a file named `cities.json` with the required data, your function can be called as follows: ```python most_dense_city = find_most_dense_city(\'cities.json\') print(most_dense_city) ``` This function call should process the data and return the name of the city with the maximum population density. # Constraints - Ensure that the function handles large numbers gracefully, particularly related to population and area. - The file provided will always be named correctly and exist. - No need to handle any exceptions or erroneous situations for this task.","solution":"import json def find_most_dense_city(filename: str) -> str: Reads JSON data from a file, calculates population density for each city, and returns the name of the city with the highest population density. with open(filename, \'r\') as file: data = json.load(file) max_density = float(\'-inf\') most_dense_city = None for city in data: population = city[\'population\'] area = city[\'area\'] density = population / area if density > max_density: max_density = density most_dense_city = city[\'name\'] return most_dense_city"},{"question":"Given a string representing a mathematical expression, write a function named `evaluate_expression(expression)` that: 1. Takes a single string as input. 2. Parses the string to identify numbers (positive or negative) and mathematical operators (+, -, *, /). 3. Evaluates the expression and returns the result. 4. Ensures precedence of operations follows standard mathematical rules (i.e., multiplication and division are performed before addition and subtraction). 5. Handles potential edge cases such as division by zero by returning \\"undefined\\". 6. Handles invalid input by returning \\"invalid input\\". The function should output the result as a float, rounded to two decimal places, or the appropriate error message as specified. You are not allowed to use the built-in `eval` function for this task. Implement your solution using basic string parsing and mathematical operations. ```python def evaluate_expression(expression): # Your implementation here pass ```","solution":"import re def evaluate_expression(expression): def parse_expression(expression): tokens = re.findall(r\'[-+]?d*.?d+|[-+*/()]\', expression) return tokens def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_operation(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': if b == 0: raise ZeroDivisionError(\\"division by zero\\") return a / b def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if re.match(r\'[-+]?d*.?d+\', tokens[i]): values.append(float(tokens[i])) i += 1 elif tokens[i] == \'(\': ops.append(tokens[i]) i += 1 elif tokens[i] == \')\': while ops and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_operation(val1, val2, op)) ops.pop() i += 1 else: while (ops and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_operation(val1, val2, op)) ops.append(tokens[i]) i += 1 while ops: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_operation(val1, val2, op)) return values[0] try: tokens = parse_expression(expression) if not tokens: return \\"invalid input\\" result = evaluate(tokens) return round(result, 2) except ZeroDivisionError: return \\"undefined\\" except: return \\"invalid input\\""},{"question":"You are asked to implement a function named `rotated_sorted_array_search` that takes two arguments: `nums` and `target`. The `nums` argument is a list of integers that has been sorted in ascending order and then rotated at an unknown pivot. The `target` argument is an integer. The function should perform the following steps: 1. Verify that `nums` is indeed a list of integers. 2. Implement an algorithm to search for the `target` within the rotated sorted array. 3. Return the index of the `target` if found. Otherwise, return -1. 4. Ensure the function operates with a time complexity of `O(log n)`. Specifications: - Function name: `rotated_sorted_array_search` - Arguments: - `nums` (list): A list of integers representing the rotated sorted array. - `target` (int): The integer value to search for in `nums`. - Return: An integer representing the index of `target` in `nums`, or -1 if `target` is not found. Example: ```python nums = [4, 5, 6, 7, 0, 1, 2] target = 0 result = rotated_sorted_array_search(nums, target) print(result) # 4 nums = [4, 5, 6, 7, 0, 1, 2] target = 3 result = rotated_sorted_array_search(nums, target) print(result) # -1 ``` Note: You should ensure that your function is efficient and able to handle the potential edge cases, such as empty lists or lists with only one element.","solution":"def rotated_sorted_array_search(nums, target): Searches for the target in a rotated sorted array. :param nums: List of rotated sorted integers. :param target: Integer to search for in nums. :return: Index of target if found, otherwise -1. if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums): raise TypeError(\\"nums must be a list of integers.\\") if not nums: return -1 left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid # Determine which part is sorted if nums[left] <= nums[mid]: # Left part is sorted if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: # Right part is sorted if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"You are tasked with implementing a function that calculates the Jaccard similarity coefficient between two sets. The Jaccard coefficient, also known as Intersection over Union, is a statistic used for gauging the similarity and diversity of sample sets. **Function Name**: `jaccard_similarity` **Function Signature**: ```python def jaccard_similarity(set1: set, set2: set) -> float: ``` **Parameters**: - `set1` (set): The first set. - `set2` (set): The second set. **Returns**: - `float`: The Jaccard similarity coefficient, a value between 0 and 1 where 0 means no similarity and 1 means identical sets. **Description**: 1. Compute the intersection of the two sets. 2. Compute the union of the two sets. 3. The Jaccard similarity coefficient is defined as the size of the intersection divided by the size of the union: [ J(A, B) = frac{|A cap B|}{|A cup B|} ] **Example Usage**: ```python # Example sets set1 = {1, 2, 3, 4} set2 = {3, 4, 5, 6} result = jaccard_similarity(set1, set2) print(result) # Expected output: 0.4, since |{3, 4}|/|{1, 2, 3, 4, 5, 6}| = 2/5 = 0.4 ```","solution":"def jaccard_similarity(set1: set, set2: set) -> float: Computes the Jaccard similarity coefficient between two sets. intersection = set1.intersection(set2) union = set1.union(set2) if not union: return 1.0 return len(intersection) / len(union)"},{"question":"You are tasked to work on a string compression problem where you need to shorten a string based on specific rules. Write a function named `compress_string` that receives a string `s` and returns its compressed form. The compression rules are: 1. Consecutive duplicate characters in the string should be replaced with the character followed by the count of its consecutive appearances. 2. If the compressed string is not shorter than the original string, return the original string instead. The function signature is: ```python def compress_string(s: str) -> str: ``` # Example: ```python s = \\"aaabbcccc\\" print(compress_string(s)) ``` **Expected Output**: ``` \'a3b2c4\' ``` # Additional Example: ```python s = \\"abc\\" print(compress_string(s)) ``` **Expected Output**: ``` \'abc\' ``` # Constraints: - The input string `s` will have a length ranging from 1 to 1000 characters. - The string `s` will only contain lowercase English letters. By solving this problem, you will practice string manipulation techniques and learn to handle compression-based logic using counting and iteration.","solution":"def compress_string(s: str) -> str: if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_str = \'\'.join(compressed) if len(compressed_str) >= len(s): return s else: return compressed_str"},{"question":"You are required to write a function `generate_maze(width, height)` in Python that generates a random maze of given dimensions using the depth-first search algorithm and displays it using the Matplotlib library. Each cell in the maze has walls that may or may not be present (top, right, bottom, left). 1. **Input:** - `width`: An integer representing the number of columns in the maze. - `height`: An integer representing the number of rows in the maze. 2. **Output:** - The function should display the generated maze using Matplotlib where: - Cells with walls are marked by black lines, and open paths are left white. 3. **Requirements:** - Use depth-first search (DFS) algorithm for maze generation. - Use `matplotlib.pyplot.plot` to draw the walls of the maze. - Use `matplotlib.pyplot.axis` to turn off the axis around the maze. # Example: ```python import matplotlib.pyplot as plt import numpy as np import random def generate_maze(width, height): # Your implementation goes here pass # Example usage generate_maze(10, 10) ``` Note: - The walls of each cell should be plotted using `matplotlib.pyplot.plot`. For example, a cell at position (i, j) with a top wall would use the command `plt.plot([i, i+1], [j+1, j+1], \'k-\')`.","solution":"import matplotlib.pyplot as plt import random import numpy as np def generate_maze(width, height): # Initialize maze structure with all walls set maze = np.ones((height, width, 4), dtype=np.uint8) # Direction vectors for movement (right, down, left, up) dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)] def index(x, y): Return the index of the cell at (x, y); returns None if out of bounds. if 0 <= x < height and 0 <= y < width: return x, y return None def carve_passage(cx, cy): directions = list(dirs) random.shuffle(directions) for dx, dy in directions: nx, ny = cx + dx, cy + dy nxt = index(nx, ny) if nxt is not None: if np.all(maze[nx, ny] == 1): # If the cell is completely walled if dx == 0 and dy == 1: # Move right maze[cx, cy, 1] = 0 # Remove right wall maze[nx, ny, 3] = 0 # Remove left wall of the next cell elif dx == 1 and dy == 0: # Move down maze[cx, cy, 2] = 0 # Remove bottom wall maze[nx, ny, 0] = 0 # Remove top wall of the next cell elif dx == 0 and dy == -1: # Move left maze[cx, cy, 3] = 0 # Remove left wall maze[nx, ny, 1] = 0 # Remove right wall of the next cell elif dx == -1 and dy == 0: # Move up maze[cx, cy, 0] = 0 # Remove top wall maze[nx, ny, 2] = 0 # Remove bottom wall of the next cell carve_passage(nx, ny) # Start carving from a random position start_x, start_y = random.randint(0, height - 1), random.randint(0, width - 1) carve_passage(start_x, start_y) plt.figure(figsize=(width, height)) # Draw the walls for x in range(height): for y in range(width): if maze[x, y, 0] == 1: # Top wall plt.plot([y, y + 1], [height - x, height - x], \'k-\') if maze[x, y, 1] == 1: # Right wall plt.plot([y + 1, y + 1], [height - x, height - (x + 1)], \'k-\') if maze[x, y, 2] == 1: # Bottom wall plt.plot([y, y + 1], [height - (x + 1), height - (x + 1)], \'k-\') if maze[x, y, 3] == 1: # Left wall plt.plot([y, y], [height - x, height - (x + 1)], \'k-\') plt.axis(\'off\') plt.show()"},{"question":"In this problem, you are tasked with analyzing a dataset containing employee information, which is provided in a CSV file named `employees.csv`. The data includes columns such as `name`, `age`, `salary`, and `department`. Your tasks are to clean the data by removing entries with missing values, calculate some basic statistics on the salaries, identify the top 5 departments with the highest average salaries, and visualize these results using a bar chart. You need to write a function named `visualize_top_departments(file_path)`, which performs the following steps: 1. Reads the employee data from the given CSV file. 2. Removes entries with missing values in any of the columns. 3. Prints the maximum, minimum, and mean salary values. 4. Identifies and prints the top 5 departments with the highest average salaries. 5. Creates a bar chart to visualize these top 5 departments and their average salaries. 6. Displays the bar chart using `matplotlib.pyplot.show`. **Function Signature:** ```python def visualize_top_departments(file_path: str) -> None: ``` **Example:** Suppose `employees.csv` contains the following data: ``` name,age,salary,department Alice,30,70000,HR Bob,25,80000,Engineering Charlie,35,90000,Sales David,40,85000,Engineering Eve,45,120000,Marketing Frank,28,,Sales Grace,32,95000,Engineering Hugo,50,105000,Marketing ``` After cleaning the data and identifying the top departments, you should print basic statistics and visualize the top 5 departments with the highest average salaries.","solution":"import pandas as pd import matplotlib.pyplot as plt def visualize_top_departments(file_path: str) -> None: # Step 1: Read the employee data from the given CSV file data = pd.read_csv(file_path) # Step 2: Remove entries with missing values in any of the columns data.dropna(inplace=True) # Step 3: Print the maximum, minimum, and mean salary values max_salary = data[\'salary\'].max() min_salary = data[\'salary\'].min() mean_salary = data[\'salary\'].mean() print(f\'Maximum Salary: {max_salary}\') print(f\'Minimum Salary: {min_salary}\') print(f\'Mean Salary: {mean_salary}\') # Step 4: Identify the top 5 departments with the highest average salaries avg_salaries_by_department = data.groupby(\'department\')[\'salary\'].mean() top_5_departments = avg_salaries_by_department.sort_values(ascending=False).head(5) print(\'Top 5 Departments with Highest Average Salaries:\') print(top_5_departments) # Step 5: Create a bar chart to visualize these top 5 departments and their average salaries top_5_departments.plot(kind=\'bar\', color=\'skyblue\') plt.title(\'Top 5 Departments with Highest Average Salaries\') plt.xlabel(\'Department\') plt.ylabel(\'Average Salary\') # Step 6: Display the bar chart plt.show()"},{"question":"In this problem, you are tasked with demonstrating your understanding of binary trees by implementing a function to determine the lowest common ancestor (LCA) of two given nodes in a binary search tree (BST). The binary search tree is structured such that for each node, the left subtree contains only nodes with values less than the node\'s value, and the right subtree only contains nodes with values greater than the node\'s value. The function signature is: ```python def lowest_common_ancestor(root: \'TreeNode\', p: \'TreeNode\', q: \'TreeNode\') -> \'TreeNode\': ``` - `root` is the root node of the binary search tree. - `p` and `q` are the two nodes for which you need to find the lowest common ancestor. Here are the requirements and steps to implement the function: 1. Define a class `TreeNode` to represent a node in the BST. This class should have three attributes: - `val` - the value of the node, - `left` - the left child node, - `right` - the right child node. 2. Implement the `lowest_common_ancestor` function to find and return the lowest common ancestor of nodes `p` and `q`. - If both `p` and `q` are less than the value of the current node, then the LCA lies in the left subtree. - If both `p` and `q` are greater than the value of the current node, then the LCA lies in the right subtree. - If one of `p` and `q` is less than and the other is greater than the value of the current node, or if one of them matches the current node\'s value, then the current node is the LCA. Below is an example implementation of the TreeNode class and how the `lowest_common_ancestor` function can be used: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def lowest_common_ancestor(root: \'TreeNode\', p: \'TreeNode\', q: \'TreeNode\') -> \'TreeNode\': # Base case if root is None: return None # If both p and q are smaller than root, then LCA lies in left subtree if p.val < root.val and q.val < root.val: return lowest_common_ancestor(root.left, p, q) # If both p and q are greater than root, then LCA lies in right subtree if p.val > root.val and q.val > root.val: return lowest_common_ancestor(root.right, p, q) # If one of p or q is on one side and the other on the other or one of them matches root return root ``` Example usage of the function: ```python # Construct the BST root = TreeNode(6) root.left = TreeNode(2) root.right = TreeNode(8) root.left.left = TreeNode(0) root.left.right = TreeNode(4) root.left.right.left = TreeNode(3) root.left.right.right = TreeNode(5) root.right.left = TreeNode(7) root.right.right = TreeNode(9) p = root.left # Node with value 2 q = root.left.right # Node with value 4 # Find LCA ancestor = lowest_common_ancestor(root, p, q) print(ancestor.val) # Expected output: 2 ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def lowest_common_ancestor(root: \'TreeNode\', p: \'TreeNode\', q: \'TreeNode\') -> \'TreeNode\': # Base case if root is None: return None # If both p and q are smaller than root, then LCA lies in left subtree if p.val < root.val and q.val < root.val: return lowest_common_ancestor(root.left, p, q) # If both p and q are greater than root, then LCA lies in right subtree if p.val > root.val and q.val > root.val: return lowest_common_ancestor(root.right, p, q) # If one of p or q is on one side and the other on the other or one of them matches root return root"},{"question":"You have been given an integer `n` that represents the total number of stairs. You need to write a function to determine the number of distinct ways you can climb to the top if you can either climb 1, 2, or 3 stairs at a time. Implement the function `count_ways(n)` that computes the number of distinct ways to climb `n` stairs using dynamic programming. Function Signature: ```python def count_ways(n: int) -> int: ``` Parameters: - `n` (int): The number of stairs. Returns: - (int): The number of distinct ways to climb the stairs. Constraints: - You may assume `n` is a positive integer. - The maximum value of `n` will not exceed 50. Example: ```python n = 4 distinct_ways = count_ways(n) # Output: 7 # Explanation: There are seven ways to climb 4 stairs: # 1. 1 step + 1 step + 1 step + 1 step # 2. 1 step + 1 step + 2 steps # 3. 1 step + 2 steps + 1 step # 4. 2 steps + 1 step + 1 step # 5. 2 steps + 2 steps # 6. 1 step + 3 steps # 7. 3 steps + 1 step ```","solution":"def count_ways(n: int) -> int: Returns the number of distinct ways to climb n stairs if you can take 1, 2, or 3 steps at a time. if n <= 0: return 0 if n == 1: return 1 if n == 2: return 2 if n == 3: return 4 dp = [0] * (n + 1) dp[1], dp[2], dp[3] = 1, 2, 4 for i in range(4, n + 1): dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] return dp[n]"},{"question":"Implement a function to evaluate the performance of a sales team by computing various statistics for each salesperson. Given a list of dictionaries where each dictionary represents a salesperson\'s monthly sales records, the function needs to return the highest, lowest, and average sales value for each salesperson. Additionally, visualize the total sales per person using a bar plot with the salesperson\'s name on the x-axis and total sales on the y-axis. The function should calculate these values using `numpy` and plot the bar chart using `matplotlib`. Finally, it should return the computed statistics as dictionaries. The function should output: - dict: A dictionary with salesperson names as keys and another dictionary as values containing \'highest\', \'lowest\', and \'average\' sales values. - A bar plot visualizing the total sales per salesperson. You should write self-contained code starting with: ```python import numpy as np import matplotlib.pyplot as plt def evaluate_sales(sales_data): ```","solution":"import numpy as np import matplotlib.pyplot as plt def evaluate_sales(sales_data): Evaluates the sales performance of a team. Parameters: sales_data (list of dict): List of dictionaries where each dictionary represents a salesperson\'s monthly sales records. Returns: dict: A dictionary with salesperson names as keys and another dictionary as values containing \'highest\', \'lowest\', and \'average\' sales values. stats = {} # Collect total sales for the bar plot total_sales_per_person = {} for person_data in sales_data: name = person_data[\'name\'] sales_values = np.array(person_data[\'sales\']) highest_sales = np.max(sales_values) lowest_sales = np.min(sales_values) average_sales = np.mean(sales_values) stats[name] = { \'highest\': highest_sales, \'lowest\': lowest_sales, \'average\': average_sales } total_sales_per_person[name] = np.sum(sales_values) # Plotting the total sales per person names = list(total_sales_per_person.keys()) total_sales = list(total_sales_per_person.values()) plt.figure(figsize=(10, 6)) plt.bar(names, total_sales, color=\'skyblue\') plt.xlabel(\'Salesperson\') plt.ylabel(\'Total Sales\') plt.title(\'Total Sales per Salesperson\') plt.xticks(rotation=45) plt.tight_layout() plt.show() return stats"},{"question":"You are given a file named `temperature_data.csv` that contains temperature readings from various cities over different days. The file is structured as follows: | Date | City | Temperature | |------------|------------|-------------| | 2023-01-01 | City A | ... | | 2023-01-01 | City B | ... | | ... | ... | ... | | 2023-12-31 | City Z | ... | Write a function `calculate_monthly_avg_temp()` that performs the following steps: 1. Reads the dataset from `temperature_data.csv`. 2. Extracts the month from each date in the \'Date\' column and adds it as a new column named \'Month\'. 3. Groups the data by \'City\' and \'Month\'. 4. Computes the average temperature for each city in each month. 5. Returns a DataFrame where: - The index is a MultiIndex with \'City\' and \'Month\'. - The DataFrame columns contain the average temperature, named \'AvgTemperature\'. **Requirements:** - You must use the `pandas` library for data manipulation. ```python import pandas as pd def calculate_monthly_avg_temp(): # Your implementation here pass ```","solution":"import pandas as pd def calculate_monthly_avg_temp(): # Read the dataset df = pd.read_csv(\'temperature_data.csv\') # Extract month from the \'Date\' column df[\'Month\'] = pd.to_datetime(df[\'Date\']).dt.month # Group by \'City\' and \'Month\' and calculate average temperature monthly_avg_temp = df.groupby([\'City\', \'Month\'])[\'Temperature\'].mean().reset_index() # Rename the average temperature column monthly_avg_temp = monthly_avg_temp.rename(columns={\'Temperature\': \'AvgTemperature\'}) # Set \'City\' and \'Month\' as MultiIndex monthly_avg_temp.set_index([\'City\', \'Month\'], inplace=True) return monthly_avg_temp"},{"question":"Generate a Python function that reads a CSV file containing two columns \\"Date\\" and \\"Temperature\\", plots the temperature variations over time, and performs a simple linear regression to show the trendline on the graph. The function should handle missing data by filling it with the mean temperature and ensure the Date column is properly parsed. The plot should have labeled axes, a title, and a legend. The function should output: ``` matplotlib.axes.Axes: The subplot representing the temperature variations with the trendline. ``` You should write self-contained code starting with: ``` import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression def task_func(file_path): ```","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression from matplotlib.axes import Axes def task_func(file_path: str) -> Axes: # Read the CSV file df = pd.read_csv(file_path, parse_dates=[\'Date\']) # Fill missing temperature values with the mean temperature mean_temp = df[\'Temperature\'].mean() df[\'Temperature\'].fillna(mean_temp, inplace=True) # Sort by date to ensure the plotting is correct df.sort_values(by=\'Date\', inplace=True) # Extract the date and temperature columns dates = df[\'Date\'].map(pd.Timestamp.toordinal).values.reshape(-1, 1) # converting datetime to ordinal for linear regression temperatures = df[\'Temperature\'].values # Perform linear regression model = LinearRegression() model.fit(dates, temperatures) # Predict the trendline trendline = model.predict(dates) # Plotting plt.figure(figsize=(10, 6)) plt.plot(df[\'Date\'], temperatures, label=\'Temperature\', color=\'blue\') plt.plot(df[\'Date\'], trendline, label=\'Trendline\', color=\'red\', linestyle=\'--\') plt.xlabel(\'Date\') plt.ylabel(\'Temperature\') plt.title(\'Temperature Variations Over Time with Trendline\') plt.legend() # Get the Axes object ax = plt.gca() # Show the plot (can be commented out if integration testing) plt.show() return ax"},{"question":"Design a function to perform a simple k-means clustering algorithm. # Function Signature: ```python def k_means(points: np.ndarray, k: int, max_iter: int=100) -> np.ndarray: ... ``` # Parameters: - `points` (np.ndarray): A 2D ((n times d)) array, where `n` is the number of data points and `d` is the number of features. - `k` (int): The number of clusters. - `max_iter` (int): The maximum number of iterations to run the algorithm. The default value is 100. # Output: - Returns a 1D ((n)) array where each element is the cluster label (0, 1, ..., k-1) for the corresponding point in the input `points`. # Libraries to Use: You will use the following NumPy functions in your implementation: - `numpy.random`: For initializing the cluster centroids. - `numpy.argmin`: For assigning points to the closest centroid. - `numpy.mean`: For recomputing the centroids. # Steps: 1. Initialize `k` centroids randomly from the points. 2. Assign each point to the closest centroid. 3. Recompute the centroids. 4. Repeat steps 2 and 3 until convergence or until the maximum number of iterations is reached. 5. Return the cluster assignments of each point. ```python import numpy as np def k_means(points: np.ndarray, k: int, max_iter: int=100) -> np.ndarray: # Initialize centroids randomly from the data points n, d = points.shape centroids = points[np.random.choice(n, k, replace=False)] for _ in range(max_iter): # Assign each point to the nearest centroid distances = np.linalg.norm(points[:, np.newaxis] - centroids, axis=2) labels = np.argmin(distances, axis=1) # Recompute centroids new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)]) # Check for convergence if np.all(centroids == new_centroids): break centroids = new_centroids return labels ``` Use the above function template to complete the `k_means` function.","solution":"import numpy as np def k_means(points: np.ndarray, k: int, max_iter: int=100) -> np.ndarray: Perform k-means clustering on a set of points. Parameters: - points (np.ndarray): A 2D (n x d) array where n is the number of points and d is the number of features. - k (int): The number of clusters. - max_iter (int): The maximum number of iterations to run the algorithm. Returns: - np.ndarray: A 1D array of cluster labels for each point. n, d = points.shape # Initialize centroids randomly from the data points centroids = points[np.random.choice(n, k, replace=False)] for _ in range(max_iter): # Assign each point to the nearest centroid distances = np.linalg.norm(points[:, np.newaxis] - centroids, axis=2) labels = np.argmin(distances, axis=1) # Recompute centroids new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)]) # Check for convergence if np.all(centroids == new_centroids): break centroids = new_centroids return labels"},{"question":"You are working on a project that involves processing a list of dictionaries, where each dictionary represents a user with details such as `name`, `age`, and `scores` (a list of scores in various subjects). Your task is to write a function called `filter_and_sort_users` that performs the following operations: 1. **Filter users by age and average score**: - Only keep users who are at least 18 years old and have an average score of at least 70. - The average score should be calculated as the mean of the `scores` list for each user. 2. **Sort the filtered list**: - Sort the resulting list of dictionaries by the `name` in ascending order. The function signature should be: ```python def filter_and_sort_users(users: list) -> list: ``` The function should return a list of dictionaries that meet the specified criteria. **Example:** Given the input: ```python users = [ {\\"name\\": \\"Alice\\", \\"age\\": 22, \\"scores\\": [85, 90, 88]}, {\\"name\\": \\"Bob\\", \\"age\\": 17, \\"scores\\": [78, 74, 80]}, {\\"name\\": \\"Charlie\\", \\"age\\": 19, \\"scores\\": [65, 70, 72]}, {\\"name\\": \\"David\\", \\"age\\": 20, \\"scores\\": [90, 92, 91]} ] ``` The function should return: ```python [ {\\"name\\": \\"Alice\\", \\"age\\": 22, \\"scores\\": [85, 90, 88]}, {\\"name\\": \\"David\\", \\"age\\": 20, \\"scores\\": [90, 92, 91]} ] ``` Make sure to use standard Python libraries for this task.","solution":"def filter_and_sort_users(users: list) -> list: def average(scores): return sum(scores) / len(scores) filtered_users = [ user for user in users if user[\\"age\\"] >= 18 and average(user[\\"scores\\"]) >= 70 ] sorted_users = sorted(filtered_users, key=lambda user: user[\\"name\\"]) return sorted_users"},{"question":"You are required to write a function `plot_prime_gaps(n)` that generates a plot of the differences (gaps) between consecutive prime numbers using the `matplotlib` library. This plot should use a bar graph where the x-axis represents the position in the sequence of prime gaps (starting from the gap between the first and second prime numbers), and the y-axis represents the gap size. The function should perform the following steps: 1. Generate the first `n` prime numbers. 2. Compute the gaps between each consecutive prime number. 3. Plot these gaps on a bar graph using `matplotlib.pyplot`, specifically setting the y-axis label with `matplotlib.pyplot.ylabel` and the x-axis label with `matplotlib.pyplot.xlabel`. Parameters: - `n` (int): The number of prime numbers to generate and plot the gaps for. Assume `n >= 2`. You should use the `matplotlib.pyplot.ylabel` function to label the y-axis as \\"Gap Size\\" and `matplotlib.pyplot.xlabel` to label the x-axis as \\"Gap Position\\". **Function Signature:** ```python def plot_prime_gaps(n: int) -> None: pass ``` Example: - Input: `plot_prime_gaps(10)` - Expected Output: A bar plot showing the gaps between the first 10 prime numbers.","solution":"import matplotlib.pyplot as plt from sympy import prime def plot_prime_gaps(n: int) -> None: Generates a plot of the differences (gaps) between consecutive prime numbers. Parameters: n (int): The number of prime numbers to generate and plot the gaps for. Assume n >= 2. if n < 2: raise ValueError(\\"n must be at least 2.\\") # Generate the first n prime numbers primes = [prime(i) for i in range(1, n+1)] # Compute the gaps between consecutive prime numbers gaps = [primes[i+1] - primes[i] for i in range(n-1)] # Plot the gaps on a bar graph plt.bar(range(len(gaps)), gaps) plt.xlabel(\'Gap Position\') plt.ylabel(\'Gap Size\') plt.title(\'Prime Gaps\') plt.show()"},{"question":"You are tasked with writing a function to implement a simple logistic regression classifier that predicts whether a given student will pass or fail an exam. The classifier should use the sigmoid function to calculate probabilities and a threshold of 0.5 for the predictions. Utilize the `numpy` library for matrix operations. **Function Signature:** ```python def logistic_regression_predict(X, w, b): Predicts binary outcomes using logistic regression. Parameters: X (numpy.matrix): The input feature matrix, of shape (m, n). w (numpy.matrix): The weight matrix, of shape (n, 1). b (float): The bias term. Returns: predictions (numpy.matrix): The predicted binary outcomes, of shape (m, 1). Each element is either 0 or 1. pass ``` **Detailed Description:** 1. **Inputs:** - `X` is an `m x n` matrix representing the input features (`numpy.matrix`), where `m` is the number of examples and `n` is the number of features. - `w` is an `n x 1` matrix representing the weights (`numpy.matrix`). - `b` is a scalar representing the bias (`float`). 2. **Output:** - `predictions`: An `m x 1` matrix of binary predictions (0 or 1). 3. **Requirements:** - Implement the sigmoid function ( sigma(z) = frac{1}{1 + e^{-z}} ). - Compute the logistic regression prediction as ( hat{y} = sigma(Xw + b) ). - Apply a threshold of 0.5 to ( hat{y} ) to obtain binary predictions. **Example:** ```python import numpy as np X = np.asmatrix([[2.0, 3.0], [4.0, 5.0], [1.0, 8.0]]) w = np.asmatrix([[0.1], [0.2]]) b = -0.3 predictions = logistic_regression_predict(X, w, b) print(\\"Predictions:n\\", predictions) ``` # Explanation 1. **Sigmoid Function:** - The sigmoid function calculates the probability that a given input belongs to a particular class. The formula is `sigma(z) = 1 / (1 + exp(-z))`. 2. **Binary Predictions:** - For logistic regression, predictions are made by calculating `z = Xw + b`, applying the sigmoid function to `z`, and then thresholding the result at 0.5 to obtain binary outcomes.","solution":"import numpy as np def logistic_regression_predict(X, w, b): Predicts binary outcomes using logistic regression. Parameters: X (numpy.matrix): The input feature matrix, of shape (m, n). w (numpy.matrix): The weight matrix, of shape (n, 1). b (float): The bias term. Returns: predictions (numpy.matrix): The predicted binary outcomes, of shape (m, 1). Each element is either 0 or 1. # Compute the linear combination of inputs and weights, plus the bias z = X * w + b # Apply the sigmoid function predictions = 1 / (1 + np.exp(-z)) # Apply threshold of 0.5 to create binary outcomes predictions = (predictions >= 0.5).astype(int) return predictions"},{"question":"You are asked to implement a function `summarize_books` that takes a list of dictionaries, where each dictionary represents a book with the following keys: - `title`: The title of the book (a string). - `author`: The author of the book (a string). - `pages`: The number of pages in the book (an integer). - `year`: The year the book was published (an integer). Your task is to summarize the list of books by implementing and returning a dictionary with the following structure: - `total_books`: The total number of books. - `total_pages`: The total number of pages across all books. - `authors`: A list of unique authors. - `earliest_year`: The earliest year a book was published. - `latest_year`: The latest year a book was published. To ensure consistency and order: - The list of unique authors should be sorted alphabetically. - `earliest_year` and `latest_year` should be calculated even if the list contains only one book. Implement the function `summarize_books(books: list) -> dict` that processes the input list of book dictionaries and returns a summarized dictionary. **Constraints**: - The list of books can be empty, in which case all numeric values should be `0` and the list of authors should be empty. **Example**: ```python books = [ {\\"title\\": \\"Book One\\", \\"author\\": \\"Author A\\", \\"pages\\": 150, \\"year\\": 1995}, {\\"title\\": \\"Book Two\\", \\"author\\": \\"Author B\\", \\"pages\\": 200, \\"year\\": 2000}, {\\"title\\": \\"Book Three\\", \\"author\\": \\"Author A\\", \\"pages\\": 300, \\"year\\": 1985}, ] expected_output = { \\"total_books\\": 3, \\"total_pages\\": 650, \\"authors\\": [\\"Author A\\", \\"Author B\\"], \\"earliest_year\\": 1985, \\"latest_year\\": 2000, } assert summarize_books(books) == expected_output ``` **Library Documentation**: - `sorted`: ```python def sorted(iterable, *, key=None, reverse=False): Return a new sorted list from the items in iterable. Has two optional arguments which must be specified as keyword arguments. ```","solution":"def summarize_books(books): Summarizes a list of books. Args: books (list): A list of dictionaries, where each dictionary represents a book with the following keys: - title: The title of the book (str). - author: The author of the book (str). - pages: The number of pages in the book (int). - year: The year the book was published (int). Returns: dict: A dictionary summarizing the books with the following keys: - total_books: The total number of books (int). - total_pages: The total number of pages across all books (int). - authors: A list of unique authors sorted alphabetically (list of str). - earliest_year: The earliest year a book was published (int). - latest_year: The latest year a book was published (int). if not books: return { \\"total_books\\": 0, \\"total_pages\\": 0, \\"authors\\": [], \\"earliest_year\\": 0, \\"latest_year\\": 0, } total_books = len(books) total_pages = sum(book[\'pages\'] for book in books) authors = sorted({book[\'author\'] for book in books}) earliest_year = min(book[\'year\'] for book in books) latest_year = max(book[\'year\'] for book in books) return { \\"total_books\\": total_books, \\"total_pages\\": total_pages, \\"authors\\": authors, \\"earliest_year\\": earliest_year, \\"latest_year\\": latest_year, }"},{"question":"In this problem, you are tasked with creating a function that generates an encoded string based on a simple encryption technique called \\"step cipher\\". The step cipher shifts each character in the original string by a fixed number of positions in the alphabet. Your function should be named `step_cipher_encode` and it should take two parameters: a string `text` and an integer `step`. Here are the detailed steps your function should perform: 1. Convert each character in the input string `text`: - If the character is a lowercase letter (\'a\'-\'z\'), it should be shifted forward in the alphabet by the number of positions specified by `step`. - Wrap around to the beginning of the alphabet if the shift pushes the character past \'z\'. - If the character is an uppercase letter (\'A\'-\'Z\'), the same shifting should be done, but separately within the range of \'A\'-\'Z\'. - Non-alphabet characters should remain unchanged in the encoded string. 2. Return the encoded string. # Function Signature ```python def step_cipher_encode(text: str, step: int) -> str: pass ``` # Requirements - Your function should handle both uppercase and lowercase letters. - Ensure that non-alphabet characters are not altered. - Implement the wrapping around behavior for shifts that move past \'z\' or \'Z\'. # Example Usage ```python print(step_cipher_encode(\'abc\', 2)) # \'cde\' print(step_cipher_encode(\'xyz\', 3)) # \'abc\' print(step_cipher_encode(\'Hello, World!\', 5)) # \'Mjqqt, Btwqi!\' ``` # Additional Information Ensure that your solution handles edge cases, such as empty strings or very large step values. Use modular arithmetic to wrap shifts around the alphabet.","solution":"def step_cipher_encode(text: str, step: int) -> str: Encodes a given text using a step cipher with the provided step value. Parameters: text (str): The input string to be encoded. step (int): The number of positions to shift each letter. Returns: str: The encoded string. def shift_char(c, step, start, end): return chr((ord(c) - start + step) % 26 + start) encoded_chars = [] for char in text: if \'a\' <= char <= \'z\': encoded_chars.append(shift_char(char, step, ord(\'a\'), ord(\'z\'))) elif \'A\' <= char <= \'Z\': encoded_chars.append(shift_char(char, step, ord(\'A\'), ord(\'Z\'))) else: encoded_chars.append(char) return \'\'.join(encoded_chars)"},{"question":"Implement a function `generate_knapsack_combinations` that generates all possible combinations of items that can be put into a knapsack of a given capacity. Each item has a weight and a value, and the objective is to list all subsets of items that do not exceed the capacity of the knapsack. The function should return a list of valid combinations, where each combination is represented as a list of tuples, each tuple containing the weight and value of an item. **Detailed Requirements**: - Use the `itertools` library functions: `itertools.combinations` and `itertools.chain`. - Parameters: - `items`: A list of tuples, where each tuple represents an item with a weight and a value (e.g., `[(weight1, value1), (weight2, value2)]`). - `capacity`: An integer representing the maximum weight capacity of the knapsack. - The function should return a list of valid combinations of items, where each combination is a list of tuples representing the items. **Guidelines**: 1. Generate all possible subsets of items. 2. Filter out the subsets where the total weight exceeds the given capacity. 3. Return the list of valid subsets. **Example**: ```python import itertools items = [(2, 3), (3, 4), (4, 5), (5, 6)] capacity = 5 combinations = generate_knapsack_combinations(items, capacity) print(\\"Combinations:\\", combinations) ``` This should display all valid combinations of items within the knapsack that do not exceed the specified capacity.","solution":"import itertools def generate_knapsack_combinations(items, capacity): Generate all possible combinations of items that fit within the given knapsack capacity. Parameters: - items: List of tuples, where each tuple represents an item with (weight, value). - capacity: Integer representing the maximum weight capacity of the knapsack. Returns: - List of valid combinations, where each combination is a list of tuples (weight, value). all_combinations = [] # Generate all possible non-empty combinations of items for r in range(1, len(items) + 1): for combination in itertools.combinations(items, r): if sum(weight for weight, value in combination) <= capacity: all_combinations.append(combination) return all_combinations"},{"question":"You are required to write a function `filter_divisible` that processes a list of integers and returns a list of elements that are divisible by a given divisor. The function should take two arguments: a list of integers and a single integer divisor. The function should: 1. Iterate through the list of integers and extract elements that are divisible by the divisor. 2. Return a list containing these elements in the same order as they appeared in the input list. **Function Signature:** ```python def filter_divisible(numbers: list, divisor: int) -> list: ... ``` **Example:** ```python numbers = [10, 12, 15, 18, 20, 25] divisor = 5 Calling the function as `filter_divisible(numbers, divisor)` should yield: [10, 15, 20, 25] ``` ```python numbers = [7, 14, 21, 28, 35, 42, 49] divisor = 7 Calling the function as `filter_divisible(numbers, divisor)` should yield: [7, 14, 21, 28, 35, 42, 49] ```","solution":"def filter_divisible(numbers, divisor): Returns a list of numbers that are divisible by the given divisor. Args: numbers (list): A list of integers. divisor (int): The divisor to check divisibility. Returns: list: A list of elements that are divisible by the divisor. return [num for num in numbers if num % divisor == 0]"},{"question":"**Sliding Window Maximum** Your task is to implement a function that finds the maximum value in a sliding window of a fixed size for a given list of integers. The sliding window moves from the left end of the list to the right end, one position at a time, and you must return a list of the maximum values of each window. To achieve this, you need to write a function named `sliding_window_maximum` which takes two arguments: - `nums`: A list of integers representing the input numbers. - `k`: An integer representing the size of the sliding window. The function should return a list of integers representing the maximum value in each window as it slides from the left to the right end of the list. # Function Signature ```python def sliding_window_maximum(nums: List[int], k: int) -> List[int]: pass ``` # Constraints - You may assume that `1 <= k <= len(nums)`. - The `nums` list can have up to `10^5` elements, and each element can be in the range `-10^4` to `10^4`. # Example Usage ```python # Example input nums = [1, 3, -1, -3, 5, 3, 6, 7] k = 3 # Example function call print(sliding_window_maximum(nums, k)) # Expected output: [3, 3, 5, 5, 6, 7] ``` # Steps 1. Implement the `sliding_window_maximum` function to locate the maximum values within each sliding window of size `k`. 2. Utilize appropriate data structures such as deques to maintain efficient maximum tracking within each window. 3. Ensure to handle edge cases like small or large lists, and sliding windows that cover the entire list. # Notes - Using a deque (double-ended queue) can help in maintaining the maximum efficiently, as it allows both insertion and deletion from both ends in O(1) time. - Consider how elements in the deque should be managed to ensure it only keeps necessary elements to find the maximum for the current window.","solution":"from collections import deque from typing import List def sliding_window_maximum(nums: List[int], k: int) -> List[int]: Finds the maximum value in each sliding window of size k in the list nums. :param nums: List of integers representing the input numbers. :param k: Integer representing the size of the sliding window. :return: List of integers representing the maximum value in each sliding window. # Deque to store the indices of useful elements in every window dq = deque() max_values = [] for i in range(len(nums)): # Remove elements not part of the window if dq and dq[0] == i - k: dq.popleft() # Remove all elements smaller than the currently # being added element (they will not be needed) while dq and nums[dq[-1]] <= nums[i]: dq.pop() # Add the current element at the rear of the deque dq.append(i) # If the first window is passed, # add elements to result list if i >= k - 1: max_values.append(nums[dq[0]]) return max_values"},{"question":"You are asked to create a function that calculates the frequency of each unique element in a list and returns a dictionary with the elements as keys and their counts as values. This function, `elementFrequency`, serves to count the occurrence of each element in the input list. # Function Signature ```python def elementFrequency(arr: list) -> dict: Compute the frequency of each unique element in the list arr. Args: arr (list): A list of elements (integers, floats, or strings). Returns: dict: A dictionary where keys are unique elements from arr and values are the counts of these elements in arr. ``` # Requirements 1. **Inputs:** The function should take a single argument `arr`, which is a list containing elements of any hashable type (e.g., integers, floats, strings). 2. **Outputs:** The function should return a dictionary where: - Keys are the unique elements present in `arr`. - Values are the number of times each element appears in `arr`. # Constraints - The elements in the list `arr` can be of mixed types (e.g., [1, \'a\', 1, \'b\', \'a\', 2] is a valid list). - The function should handle lists with a very large number of elements efficiently. # Detailed Steps 1. **Initialize Output Dictionary:** Create an empty dictionary to keep track of element frequencies. 2. **Iterate Through List:** For each element in the input list, check if it is already a key in the dictionary: - If it is, increment its count by one. - If it is not, add it to the dictionary with a count of one. 3. **Return the Dictionary:** After processing all elements in the list, return the dictionary containing the frequencies. # Example ```python # Example list arr = [1, \'a\', 1, \'b\', \'a\', 2, 2, \'b\', \'b\'] # Calling the elementFrequency function freq_dict = elementFrequency(arr) print(freq_dict) # Expected output: {1: 2, \'a\': 2, \'b\': 3, 2: 2} ```","solution":"def elementFrequency(arr): Compute the frequency of each unique element in the list arr. Args: arr (list): A list of elements (integers, floats, or strings). Returns: dict: A dictionary where keys are unique elements from arr and values are the counts of these elements in arr. frequency_dict = {} for element in arr: if element in frequency_dict: frequency_dict[element] += 1 else: frequency_dict[element] = 1 return frequency_dict"},{"question":"You are given a list of transactions where each transaction is a dictionary with the keys `item`, `quantity`, and `price_per_unit`. Your task is to write a Python function named `calculate_total_sales` that calculates the total sales for each different item and returns the results as a dictionary. The output dictionary should have the item names as keys and their corresponding total sales as values. To calculate the total sales, follow these steps: 1. Iterate over the list of transactions. 2. For each transaction, extract the item name, quantity, and price per unit. 3. Compute the transaction\'s total cost by multiplying the quantity by the price per unit. 4. Accumulate the total costs for each item in a results dictionary. The function should handle cases where there are multiple transactions for the same item and sum their total sales correctly. Input Parameters: - `transactions`: A list of dictionaries, where each dictionary corresponds to a transaction with keys `item`, `quantity`, and `price_per_unit`. Expected Output: - A dictionary with item names as keys and their respective total sales as values. Function Definition: ```python def calculate_total_sales(transactions: list) -> dict: pass ``` Example: ```python transactions = [ {\\"item\\": \\"apple\\", \\"quantity\\": 10, \\"price_per_unit\\": 0.5}, {\\"item\\": \\"banana\\", \\"quantity\\": 5, \\"price_per_unit\\": 0.3}, {\\"item\\": \\"apple\\", \\"quantity\\": 7, \\"price_per_unit\\": 0.5}, {\\"item\\": \\"orange\\", \\"quantity\\": 4, \\"price_per_unit\\": 0.75}, {\\"item\\": \\"banana\\", \\"quantity\\": 3, \\"price_per_unit\\": 0.3} ] # Calling the function should output: # { # \\"apple\\": 8.5, # \\"banana\\": 2.4, # \\"orange\\": 3.0 # } ```","solution":"def calculate_total_sales(transactions: list) -> dict: Calculates the total sales for each different item. Parameters: - transactions: A list of dictionaries, where each dictionary corresponds to a transaction with keys \'item\', \'quantity\', and \'price_per_unit\'. Returns: - A dictionary with item names as keys and their respective total sales as values. total_sales = {} for transaction in transactions: item = transaction[\\"item\\"] quantity = transaction[\\"quantity\\"] price_per_unit = transaction[\\"price_per_unit\\"] total_cost = quantity * price_per_unit if item in total_sales: total_sales[item] += total_cost else: total_sales[item] = total_cost return total_sales"},{"question":"You are tasked with creating a function named `number_pattern` that generates a specific numerical pattern in the form of a list of lists. The numerical pattern should be built based on an input integer `n` which defines the number of rows in the pattern. # Detailed Requirements: 1. **Input:** - An integer `n` representing the number of rows in the pattern (1 ≤ n ≤ 20). 2. **Output:** - A list of lists where each sub-list contains integers forming a pattern as described below. 3. **Pattern Description:** - The first row should contain the number `1`. - Each subsequent row should contain integers starting from `1` to the row number. - For instance, if `n` is 5, the pattern should look like: ``` [ [1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5] ] ``` Your function `number_pattern` should generate this pattern and return it as a list of lists. ```python def number_pattern(n): pattern = [] for i in range(1, n + 1): row = list(range(1, i + 1)) pattern.append(row) return pattern ```","solution":"def number_pattern(n): Generates a numerical pattern based on the input integer n. :param n: Number of rows for the pattern (1 ≤ n ≤ 20). :return: List of lists with the numerical pattern. pattern = [] for i in range(1, n + 1): row = list(range(1, i + 1)) pattern.append(row) return pattern"},{"question":"You are tasked with implementing a function to rotate a given NxN 2D matrix 90 degrees clockwise in place. This involves transforming the rows into columns in such a way that the first row becomes the last column, the second row becomes the second last column, and so forth. Specifically, you need to complete the `rotateMatrix` function, which takes the following input: - `matrix`: A 2-dimensional list (list of lists) where each inner list represents a row of the matrix. The function should modify the matrix in place and not return anything. For example, given the following matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` After rotating 90 degrees clockwise, the matrix should become: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` **Function Signature:** ```python def rotateMatrix(matrix): pass ``` **Constraints:** - The matrix is guaranteed to be non-empty and square (NxN), where 1 ≤ N ≤ 1000. - Do not use any libraries for the matrix rotation. #","solution":"def rotateMatrix(matrix): Rotates the given NxN 2D matrix 90 degrees clockwise in place. N = len(matrix) # Transpose the matrix for i in range(N): for j in range(i, N): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(N): matrix[i].reverse()"},{"question":"Write a function that takes in a list of tuples, with each tuple containing a string (a student\'s name) and an integer (the student\'s score). The function should return a dictionary where each key is the student\'s name and each value is the student\'s highest score. If a student\'s name appears multiple times with different scores, the highest score should be used for that student. The function should handle cases where the input list is empty and should return an empty dictionary in such cases. You should write self-contained code starting with: ``` def get_highest_scores(student_scores): ```","solution":"def get_highest_scores(student_scores): Takes in a list of tuples, each containing a student\'s name and score, and returns a dictionary with the student\'s names as keys and their highest scores as values. :param student_scores: List of tuples [(name, score), ...] :return: Dictionary {name: highest_score, ...} highest_scores = {} for name, score in student_scores: if name not in highest_scores or score > highest_scores[name]: highest_scores[name] = score return highest_scores"},{"question":"In this task, you will implement a function to simulate an online restaurant food ordering system. The goal is to write a function called `calculateOrderTotal(menu, orders)` which takes two parameters: 1. `menu`: a dictionary where keys are strings representing the names of the food items and values are floats representing the prices of these items. 2. `orders`: a list of strings where each string represents a food item ordered by a customer. Each food item in the `orders` list will always be present in the `menu` dictionary. The function will find the total price of all the ordered food items by summing up their respective prices from the `menu` dictionary. It should return the total cost as a float. # Function Definition ```python def calculateOrderTotal(menu, orders): Calculate the total cost of the ordered food items. Parameters: menu (dict): A dictionary with food item names as keys and their prices as values. orders (list): A list of food items ordered. Returns: float: The total cost of the orders. total_cost = 0.0 for item in orders: total_cost += menu[item] return total_cost ``` # Requirements 1. Each food item in the `orders` list will always be a valid key in the `menu` dictionary. 2. If the `orders` list is empty, the function should return `0.0`. 3. The function should return the total cost as a floating-point number. # Instructions 1. Define the `calculateOrderTotal(menu, orders)` function as specified above. 2. Ensure the function properly calculates the total cost by summing the prices of all ordered items. # Example ```python menu = { \\"burger\\": 5.99, \\"fries\\": 2.99, \\"coke\\": 1.50, \\"salad\\": 4.25 } orders = [\\"burger\\", \\"fries\\", \\"coke\\"] ``` - Input: `menu`, `orders` - Output: `10.48` ```python menu = { \\"pizza\\": 8.99, \\"pasta\\": 7.50, \\"soda\\": 1.25, \\"ice cream\\": 3.75 } orders = [\\"pizza\\", \\"pasta\\", \\"soda\\"] ``` - Input: `menu`, `orders` - Output: `17.74`","solution":"def calculateOrderTotal(menu, orders): Calculate the total cost of the ordered food items. Parameters: menu (dict): A dictionary with food item names as keys and their prices as values. orders (list): A list of food items ordered. Returns: float: The total cost of the orders. total_cost = 0.0 for item in orders: total_cost += menu[item] return total_cost"},{"question":"In this task, you will analyze text documents and create a function to compute the term frequency-inverse document frequency (TF-IDF) matrix. You will write a function called `compute_tfidf` that takes two inputs: 1. `documents` (a list of strings, where each string represents a text document), 2. `unique_terms` (a list of unique terms that appear in the documents). This function will compute the TF-IDF value for each term in each document and return a 2D list (a matrix) where each element `matrix[i][j]` represents the TF-IDF value of the `j`-th term in the `i`-th document. Here are the details for the function you need to implement: ```python def compute_tfidf(documents, unique_terms): Calculate the TF-IDF matrix. Parameters: documents (list of str): The text documents. unique_terms (list of str): The list of unique terms. Returns: list of list of float: A matrix representing the TF-IDF values. pass # Your implementation goes here ``` # Requirements 1. Compute the term frequency (TF) for each term in each document. 2. Compute the inverse document frequency (IDF) for each term. 3. Calculate the TF-IDF value for each term in each document. 4. Use `math.log` function for IDF calculations. 5. Return the TF-IDF matrix as a list of lists. # Examples ```python documents = [\\"the cat sat on the mat\\", \\"the dog chased the cat\\", \\"the cat climbed the tree\\"] unique_terms = [\\"the\\", \\"cat\\", \\"sat\\", \\"on\\", \\"mat\\", \\"dog\\", \\"chased\\", \\"climbed\\", \\"tree\\"] tfidf_matrix = compute_tfidf(documents, unique_terms) for row in tfidf_matrix: print(row) ``` # Notes 1. Term frequency (TF) is the ratio of the number of times a term appears in a document to the total number of terms in that document. 2. Inverse document frequency (IDF) is computed as `log(N / df)`, where `N` is the total number of documents and `df` is the number of documents containing the term. 3. The TF-IDF value is the product of TF and IDF for a given term in a document.","solution":"import math def compute_tfidf(documents, unique_terms): Calculate the TF-IDF matrix. Parameters: documents (list of str): The text documents. unique_terms (list of str): The list of unique terms. Returns: list of list of float: A matrix representing the TF-IDF values. # Number of documents N = len(documents) # Initialize term frequency and document frequency dictionaries term_freqs = [] doc_freqs = {term: 0 for term in unique_terms} for doc in documents: # Split document into words words = doc.split() # Calculate term frequency for the current document term_count = {term: 0 for term in unique_terms} for word in words: if word in term_count: term_count[word] += 1 term_freqs.append(term_count) # Update document frequencies for term in unique_terms: if term_count[term] > 0: doc_freqs[term] += 1 # Initialize the TF-IDF matrix tfidf_matrix = [] for i, term_count in enumerate(term_freqs): doc_length = len(documents[i].split()) tfidf_row = [] for term in unique_terms: # Calculate TF tf = term_count[term] / doc_length # Calculate IDF if doc_freqs[term] > 0: idf = math.log(N / doc_freqs[term]) else: idf = 0 # Calculate TF-IDF tfidf = tf * idf tfidf_row.append(tfidf) tfidf_matrix.append(tfidf_row) return tfidf_matrix"},{"question":"You are required to design a script to manage a simple command-line to-do list application. The application should allow users to add tasks, mark them as completed, and list all tasks with their statuses. **Function Details:** - **Function Name:** `todo_list` - **Arguments:** An action string, which can be one of the following: `\\"add\\"`, `\\"complete\\"`, or `\\"list\\"`. Depending on the action, additional arguments may be supplied: - When the action is `\\"add\\"`, an additional argument `task` (string) will be provided, representing the task to be added. - When the action is `\\"complete\\"`, an additional argument `task_id` (integer) will be provided, representing the ID of the task to be marked as completed. - When the action is `\\"list\\"`, no additional arguments are needed. **Behavior:** - Maintain a list of tasks in memory, where each task is a dictionary with keys `id` (integer), `description` (string), and `completed` (boolean). - When the action is `\\"add\\"`, the function should add a new task to the list with a unique ID and default `completed` status as `False`. - When the action is `\\"complete\\"`, the function should mark the specified task (by `task_id`) as completed. - When the action is `\\"list\\"`, the function should print all tasks with their statuses. Each task should be displayed in the format: `[id] description - status`. **Example Usage:** ```python # The function would be called with different actions: todo_list(\\"add\\", \\"Buy groceries\\") todo_list(\\"add\\", \\"Read a book\\") todo_list(\\"list\\") # Output could be: # [1] Buy groceries - Not Completed # [2] Read a book - Not Completed todo_list(\\"complete\\", 1) todo_list(\\"list\\") # Output could be: # [1] Buy groceries - Completed # [2] Read a book - Not Completed ``` **Requirements:** - All tasks must be stored in memory using a list of dictionaries. - Ensure that task IDs are unique and auto-incrementing starting from 1. - Use print statements to display the list of tasks in a reader-friendly format when the action is `\\"list\\"`. - Implement the function `todo_list` following the given specifications.","solution":"class ToDoList: def __init__(self): self.tasks = [] self.next_id = 1 def add(self, task): self.tasks.append({\\"id\\": self.next_id, \\"description\\": task, \\"completed\\": False}) self.next_id += 1 def complete(self, task_id): for task in self.tasks: if task[\\"id\\"] == task_id: task[\\"completed\\"] = True break def list_tasks(self): for task in self.tasks: status = \\"Completed\\" if task[\\"completed\\"] else \\"Not Completed\\" print(f\\"[{task[\'id\']}] {task[\'description\']} - {status}\\") def todo_list(action, *args): if not hasattr(todo_list, \\"manager\\"): todo_list.manager = ToDoList() if action == \\"add\\": task = args[0] todo_list.manager.add(task) elif action == \\"complete\\": task_id = int(args[0]) todo_list.manager.complete(task_id) elif action == \\"list\\": todo_list.manager.list_tasks()"},{"question":"In this problem, we are going to work with natural language processing to create a function that generates bigrams from a given text. A bigram is a sequence of two adjacent elements from a string of tokens, which can be words, syllables, or letters. For this problem, we will create a function named `generate_bigrams` which will take in a single argument: 1. `text` (a string): A piece of text from which bigrams will be generated. The function should return a list of tuples, where each tuple contains two consecutive words from the input `text`. **Function Signature:** ```python def generate_bigrams(text: str) -> List[Tuple[str, str]]: ``` Requirements: - Split the input text into words. - Generate the bigrams from the list of words. - Return the bigrams as a list of tuples. Constraints: - Ignore punctuation and consider only alphanumeric words. - Handle cases where the input text has less than two words gracefully by returning an empty list. # Example Usage ```python # Example usage of the function bigrams = generate_bigrams(\\"Natural language processing is fun\\") print(bigrams) ``` # Expected Output The output should be a list of bigram tuples generated from the words in the input text. ```python [(\'Natural\', \'language\'), (\'language\', \'processing\'), (\'processing\', \'is\'), (\'is\', \'fun\')] ``` This problem will help you understand how to process text data for natural language processing tasks and work with sequences of tokens.","solution":"import re from typing import List, Tuple def generate_bigrams(text: str) -> List[Tuple[str, str]]: Generate bigrams from the given text. :param text: A piece of text to generate bigrams from (string). :return: A list of tuples representing the bigrams (List[Tuple[str, str]]). # Remove punctuation and split the text into words words = re.findall(r\'bw+b\', text) # Create bigrams from the list of words bigrams = [(words[i], words[i + 1]) for i in range(len(words) - 1)] return bigrams"},{"question":"Write a function named `normalize_dataframe` that normalizes the numeric columns in a given pandas DataFrame. The function should scale each numeric column to a range between 0 and 1. For this task, use the `MinMaxScaler` from the `sklearn.preprocessing` module. # Function Signature ```python def normalize_dataframe(df: pd.DataFrame) -> pd.DataFrame: ... ``` # Parameters - `df` (pd.DataFrame): The input DataFrame containing numeric and non-numeric columns. # Returns - pd.DataFrame: A DataFrame with the same structure as the input DataFrame, but with all numeric columns normalized to the range [0, 1]. # Instructions 1. Identify the numeric columns in the DataFrame. 2. Apply the `MinMaxScaler` to normalize the values in each numeric column. 3. Ensure the non-numeric columns remain unchanged. 4. Return a new DataFrame with the normalized numeric columns and unchanged non-numeric columns. # Example ```python import pandas as pd from sklearn.preprocessing import MinMaxScaler # Example usage data = { \'A\': [10, 20, 30, 40], \'B\': [2.5, 3.5, 4.5, 5.5], \'C\': [\'foo\', \'bar\', \'baz\', \'qux\'] } df = pd.DataFrame(data) normalized_df = normalize_dataframe(df) print(normalized_df) ``` In the example, the function `normalize_dataframe` should produce the following DataFrame: ``` A B C 0 0.0 0.0 foo 1 0.333333 0.333333 bar 2 0.666667 0.666667 baz 3 1.0 1.0 qux ``` # Notes - You need to import `pandas` as `pd` and `MinMaxScaler` from `sklearn.preprocessing`. - Ensure the function correctly identifies and processes only the numeric columns. - Be mindful to preserve the original data structure and types of non-numeric columns.","solution":"import pandas as pd from sklearn.preprocessing import MinMaxScaler def normalize_dataframe(df: pd.DataFrame) -> pd.DataFrame: Normalizes the numeric columns in the given DataFrame to a range between 0 and 1. Parameters: df (pd.DataFrame): The input DataFrame containing numeric and non-numeric columns. Returns: pd.DataFrame: A DataFrame with the same structure as the input DataFrame, but with all numeric columns normalized to the range [0, 1]. # Identify numeric columns numeric_columns = df.select_dtypes(include=[\'number\']).columns # Initialize MinMaxScaler scaler = MinMaxScaler() # Apply MinMaxScaler to numeric columns df[numeric_columns] = scaler.fit_transform(df[numeric_columns]) return df"},{"question":"You have been given a dataset containing temperature readings collected from multiple cities across different months. Your task is to analyze this data and present your findings using the `pandas` and `matplotlib` libraries in Python. Write a function named `analyze_temperature_data` that: 1. Accepts a file path to a CSV file containing the data. The CSV file has columns: \\"City\\", \\"Month\\", \\"Temperature\\". 2. Reads the CSV file into a pandas DataFrame. 3. Calculates the average temperature for each city and month. 4. Creates a line plot to visualize the average temperature for each city over the months. Each city should have a separate line in the plot. 5. Sets the title of the line plot to \\"Average Monthly Temperature by City\\". 6. Labels the x-axis as \\"Month\\" and the y-axis as \\"Average Temperature\\". 7. Creates a bar plot showing the overall average temperature for each city. 8. Sets the title of the bar plot to \\"Overall Average Temperature by City\\". 9. Labels the x-axis as \\"City\\" and the y-axis as \\"Average Temperature\\". 10. Displays both plots. **Function Signature:** ```python def analyze_temperature_data(file_path: str) -> None: ... ``` You are required to use the following APIs: - `pandas.read_csv` - `pandas.DataFrame.groupby` - `matplotlib.pyplot.plot` - `matplotlib.pyplot.bar` - `matplotlib.pyplot.xlabel` - `matplotlib.pyplot.ylabel` - `matplotlib.pyplot.title` - `matplotlib.pyplot.show` **Example:** ```python analyze_temperature_data(\'temperature_data.csv\') ``` **Hints:** - Use the `groupby` method in pandas to calculate average temperatures. - Use the `plot` function from matplotlib to create the line plot. - Use the `bar` function from matplotlib to create the bar plot.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_temperature_data(file_path: str) -> None: # Read the CSV file into a pandas DataFrame. df = pd.read_csv(file_path) # Calculate the average temperature for each city and month. monthly_avg_temp = df.groupby([\'City\', \'Month\'])[\'Temperature\'].mean().reset_index() # Create a line plot to visualize the average temperature for each city over the months. for city in monthly_avg_temp[\'City\'].unique(): city_data = monthly_avg_temp[monthly_avg_temp[\'City\'] == city] plt.plot(city_data[\'Month\'], city_data[\'Temperature\'], label=city) plt.title(\'Average Monthly Temperature by City\') plt.xlabel(\'Month\') plt.ylabel(\'Average Temperature\') plt.legend() plt.show() # Calculate the overall average temperature for each city. overall_avg_temp = df.groupby(\'City\')[\'Temperature\'].mean().reset_index() # Create a bar plot showing the overall average temperature for each city. plt.bar(overall_avg_temp[\'City\'], overall_avg_temp[\'Temperature\']) plt.title(\'Overall Average Temperature by City\') plt.xlabel(\'City\') plt.ylabel(\'Average Temperature\') plt.show()"},{"question":"Implement a function that takes a list of integers and returns a list of integers where each element is replaced by the product of all the elements in the original list except for the one at the current index. Do not use division in your solution. The function should output with: List[int]: A list of integers where each element is the product of all other elements in the original list excluding the element at that index. You should write self-contained code starting with: ``` def task_func(numbers): ```","solution":"def task_func(numbers): Takes a list of integers and returns a list of integers where each element is replaced by the product of all the elements in the original list except for the one at the current index. Args: numbers (List[int]): A list of integers. Returns: List[int]: A list where each element is the product of all other elements in the original list. length = len(numbers) if length == 0: return [] # Initialize two arrays to store the prefix and suffix products prefix_products = [1] * length suffix_products = [1] * length # Calculate prefix products for i in range(1, length): prefix_products[i] = prefix_products[i - 1] * numbers[i - 1] # Calculate suffix products for i in range(length - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * numbers[i + 1] # Compute the result by multiplying prefix and suffix products result = [prefix_products[i] * suffix_products[i] for i in range(length)] return result"},{"question":"You are required to write a function named `calculate_statistics_for_file` that performs the following operations: 1. Accepts a file path as an argument. This file will be a CSV file containing numerical data. 2. Reads the CSV file into a pandas DataFrame. 3. Calculates the mean, median, and standard deviation for each column in the DataFrame. 4. Writes these statistics to a new CSV file named `statistics.csv` which should be saved in the current working directory. 5. Returns the path to the `statistics.csv` file. Specific libraries to use: - `pandas.read_csv` for reading the CSV file into a DataFrame. - `pandas.DataFrame.mean`, `pandas.DataFrame.median`, and `pandas.DataFrame.std` for statistical calculations. - `pandas.DataFrame.to_csv` for writing the DataFrame to a CSV file. Function signature: ```python def calculate_statistics_for_file(file_path: str) -> str: pass ```","solution":"import pandas as pd def calculate_statistics_for_file(file_path: str) -> str: Reads a CSV file, calculates mean, median, and standard deviation for each column, and writes these statistics to a file named \'statistics.csv\'. Args: file_path (str): Path to the input CSV file. Returns: str: Path to the output \'statistics.csv\' file. # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Calculate statistics mean = df.mean() median = df.median() std_dev = df.std() # Create a DataFrame with the statistics stats_df = pd.DataFrame({ \'mean\': mean, \'median\': median, \'std_dev\': std_dev }) # Save the statistics to a new CSV file output_file = \'statistics.csv\' stats_df.to_csv(output_file, index=True) return output_file"},{"question":"In this problem, you are tasked with developing a function `flatten_and_sort(nested_list)` that takes a nested list of integers and returns a single sorted list containing all the integers in non-descending order. You need to recursively flatten the nested list, combining all the integers into a single list before sorting it. Assume that the nested list can contain integers or other lists which might contain further nested lists. The function should follow these specifications: 1. The function accepts one parameter, `nested_list`, which is a list containing integers and/or other nested lists. 2. The function should flatten the nested list into a single list containing all integers. 3. The resulting list should be sorted in non-descending order. 4. The function should handle cases where the nested list contains varying levels of nesting. Example: ```python nested_list = [1, [4, 2], [[5], 3], [6, [7, [8], 0]]] flatten_and_sort(nested_list) ``` Expected output: ``` [0, 1, 2, 3, 4, 5, 6, 7, 8] ``` **Constraints:** - The elements of the nested lists are guaranteed to be integers. - The given nested list can be empty but will not be `None`. Make sure to implement the function using recursion to handle the nested lists effectively.","solution":"def flatten_and_sort(nested_list): Flattens a nested list of integers and returns a sorted list. Args: nested_list (list): A list containing integers and/or other nested lists. Returns: list: A sorted list containing all the integers from the nested list. def flatten(lst): for item in lst: if isinstance(item, list): yield from flatten(item) else: yield item flat_list = list(flatten(nested_list)) return sorted(flat_list)"},{"question":"You are tasked with creating a function named `invert_dict` that takes a dictionary as input and returns a new dictionary with the keys and values swapped. In case a value in the original dictionary is not unique, the function should store all keys that correspond to the same value in a list. Here\'s a detailed description of the function: 1. Iterate through the input dictionary and reverse the keys and values. 2. If a value repeats in the original dictionary, store all corresponding original keys in a list as the new value in the output dictionary. 3. Maintain the order of the original keys while creating the list for duplicate values. Ensure your function adheres to the following signature: ```python def invert_dict(input_dict): ``` # Example: ```python input_dict = {\'a\': 1, \'b\': 2, \'c\': 1} print(invert_dict(input_dict)) ``` # Expected Output: ```python {1: [\'a\', \'c\'], 2: \'b\'} ``` # Constraints: - The input dictionary can have a maximum of 10^4 key-value pairs. - Keys in the input dictionary are strings and values are integers.","solution":"def invert_dict(input_dict): This function takes a dictionary as input and returns a new dictionary with keys and values swapped. If a value in the original dictionary is not unique, the function stores all keys that correspond to the same value in a list. inverted_dict = {} for key, value in input_dict.items(): if value in inverted_dict: # If the value is already a list, append the new key to it. if isinstance(inverted_dict[value], list): inverted_dict[value].append(key) else: # Otherwise, create a list with the existing key and the new key. inverted_dict[value] = [inverted_dict[value], key] else: # For a unique value, simply invert the key-value pair. inverted_dict[value] = key return inverted_dict"},{"question":"Write a function `generateMaze(dim, start, end)` that generates a `dim x dim` rectangular grid representing a maze. The maze should have a start point, an end point, and randomly placed walls. The objective is to ensure that there is at least one valid path from the start point to the end point. **Steps**: 1. Initialize an empty `dim x dim` grid with all cells set to 0. 2. Randomly place walls (cells with value -1) in the maze. 3. Ensure the start and end positions are set to 1, representing open paths. 4. Implement a pathfinding algorithm (such as Depth-First Search or Breadth-First Search) to check if there is at least one valid path from the start to the end. 5. If no valid path exists, adjust the walls until a valid path is found. **Parameters**: - `dim`: An integer representing the dimensions of the square grid. - `start`: A tuple of two integers representing the starting position (row, column). - `end`: A tuple of two integers representing the ending position (row, column). **Return**: - This function should return a 2D list (representing the maze grid) containing the value -1 for walls and 1 for open paths. If ensuring at least one valid path is computationally infeasible, raise an appropriate error. **Example**: ```python dim = 5 start = (0, 0) end = (4, 4) output = generateMaze(dim, start, end) print(output) ``` **Output**: A 5x5 grid that might look like this (values may vary due to random placement of walls): ``` [[1, -1, 1, 1, -1], [1, -1, 1, -1, 1], [1, 1, 1, -1, 1], [-1, -1, 1, 1, 1], [1, -1, -1, -1, 1]] ``` **Notes**: - Ensure to use any necessary randomization libraries or functions. - You can choose your preferred pathfinding algorithm to validate the path between the start and end positions. - Consider the possibility of very dense mazes and ensure that your method can handle such cases efficiently.","solution":"import random from collections import deque def generateMaze(dim, start, end): def initialize_maze(dim): return [[0 for _ in range(dim)] for _ in range(dim)] def randomize_walls(maze, dim): for i in range(dim): for j in range(dim): if (i, j) != start and (i, j) != end: maze[i][j] = -1 if random.random() < 0.3 else 1 def is_valid(x, y, maze, visited, dim): return 0 <= x < dim and 0 <= y < dim and maze[x][y] == 1 and not visited[x][y] def bfs(maze, start, end, dim): queue = deque([start]) visited = [[False] * dim for _ in range(dim)] visited[start[0]][start[1]] = True while queue: x, y = queue.popleft() if (x, y) == end: return True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny, maze, visited, dim): visited[nx][ny] = True queue.append((nx, ny)) return False def ensure_path(maze, start, end, dim): if not bfs(maze, start, end, dim): path = [(start[0], start[1])] while path: x, y = path.pop() maze[x][y] = 1 if bfs(maze, start, end, dim): break for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < dim and 0 <= ny < dim and maze[nx][ny] == -1: path.append((nx, ny)) maze = initialize_maze(dim) randomize_walls(maze, dim) maze[start[0]][start[1]] = 1 maze[end[0]][end[1]] = 1 ensure_path(maze, start, end, dim) return maze"},{"question":"In this problem, you are required to implement a function `topological_sort_with_cycle_detection` that performs a topological sort on a directed acyclic graph (DAG) or detects cycles if they exist. You will work with a `Graph` class that has the following methods: - `add_edge(start, end)`: Adds a directed edge from node `start` to node `end`. - `get_vertices()`: Returns a list of all vertices in the graph. - `get_neighbors(vertex)`: Returns a list of neighboring vertices for a given vertex. The `topological_sort_with_cycle_detection` function should take the following arguments: - `graph`: An instance of the `Graph` class. Your task is to implement the `topological_sort_with_cycle_detection` function that: 1. Detects if there is a cycle in the graph. If a cycle is detected, return the string `\\"Cycle detected\\"` immediately. 2. If no cycle is detected, return a list of vertices in topologically sorted order. Use Depth-First Search (DFS) to both detect cycles and perform the topological sort. Nodes should be marked with three states: - `unvisited`: The node has not been visited yet. - `visiting`: The node is currently being visited (in the call stack). - `visited`: The node has been completely visited. Here is the function signature: ```python def topological_sort_with_cycle_detection(graph): pass ```","solution":"def topological_sort_with_cycle_detection(graph): def dfs(vertex): if vertex in visiting: return False # Cycle detected if vertex in visited: return True # Already visited this node # Mark this vertex as visiting visiting.add(vertex) for neighbor in graph.get_neighbors(vertex): if not dfs(neighbor): return False # Cycle detected in downstream nodes # Mark this vertex as visited visiting.remove(vertex) visited.add(vertex) sorted_vertices.append(vertex) return True visiting = set() visited = set() sorted_vertices = [] for vertex in graph.get_vertices(): if vertex not in visited: if not dfs(vertex): # Cycle detected return \\"Cycle detected\\" return sorted_vertices[::-1] # Reverse the list to get the correct order"},{"question":"**Context:** You are provided with a dataset containing reviews of different products along with their corresponding ratings. Your goal is to perform sentiment analysis to classify these reviews as \'Positive\' or \'Negative\' based on their content using a Logistic Regression model from the `scikit-learn` library. **Dataset:** The dataset is represented as a pandas DataFrame `reviews_df` with two columns: - `review`: The text of the product review. - `rating`: The numerical rating given to the product, ranging from 1 to 5, with 1-2 indicating \'Negative\' sentiment and 4-5 indicating \'Positive\' sentiment. Ratings of 3 are considered neutral and should be excluded from training and testing data. **Objective:** Your task is to write a function `sentiment_analysis_logistic_regression(reviews_df)` that performs the following steps: 1. Filters out reviews with a rating of 3. 2. Converts the numerical ratings into binary labels (\'Positive\' for ratings 4-5, \'Negative\' for ratings 1-2). 3. Splits the data into training and testing sets. 4. Vectorizes the text data using `TfidfVectorizer`. 5. Trains a Logistic Regression model on the training data. 6. Predicts the sentiment for the test data. 7. Calculates and returns the accuracy score of the model. **Function Signature:** ```python def sentiment_analysis_logistic_regression(reviews_df: pd.DataFrame) -> float: pass ``` **Requirements:** - Use the `LogisticRegression` class from the `sklearn.linear_model` module. - Use `TfidfVectorizer` from the `sklearn.feature_extraction.text` module. - Use `train_test_split` from the `sklearn.model_selection` module. - Use `accuracy_score` from the `sklearn.metrics` module. **Example:** ```python import pandas as pd reviews_df = pd.DataFrame({ \'review\': [\\"Great product, highly recommend!\\", \\"Terrible quality, do not buy.\\", \\"Decent, but could be better.\\", \\"Excellent value for money.\\", \\"Worst purchase ever.\\"], \'rating\': [5, 1, 3, 4, 1] }) accuracy = sentiment_analysis_logistic_regression(reviews_df) print(accuracy) # Expected output: Depending on the split, but should indicate a reasonable accuracy score ```","solution":"import pandas as pd from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.linear_model import LogisticRegression from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score def sentiment_analysis_logistic_regression(reviews_df): # Filter out reviews with a rating of 3 filtered_df = reviews_df[reviews_df[\'rating\'] != 3].copy() # Convert ratings to binary labels filtered_df[\'sentiment\'] = filtered_df[\'rating\'].apply(lambda x: \'Positive\' if x >= 4 else \'Negative\') # Split the data into features and labels X = filtered_df[\'review\'] y = filtered_df[\'sentiment\'] # Split the dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Vectorize the text data vectorizer = TfidfVectorizer() X_train_vect = vectorizer.fit_transform(X_train) X_test_vect = vectorizer.transform(X_test) # Train a Logistic Regression model on the training data model = LogisticRegression() model.fit(X_train_vect, y_train) # Predict the sentiment for the test data y_pred = model.predict(X_test_vect) # Calculate and return the accuracy score of the model accuracy = accuracy_score(y_test, y_pred) return accuracy"},{"question":"You are tasked with writing a Python function named `merge_sorted_lists` that takes two arguments, both of which are lists of integers sorted in non-decreasing order. The function should merge these two lists into a single list that is also sorted in non-decreasing order. # Requirements: 1. The input lists may contain duplicate elements. 2. The function should return a new list that contains all elements from both input lists in sorted order. 3. The function should maintain O(n + m) time complexity, where n and m are the lengths of the input lists. # Function Signature ```python def merge_sorted_lists(list1, list2): pass ``` # Example Usage ```python list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8] merged = merge_sorted_lists(list1, list2) print(merged) # Output: [1, 2, 3, 4, 5, 6, 7, 8] list1 = [1, 2, 2, 3] list2 = [2, 5, 6] merged = merge_sorted_lists(list1, list2) print(merged) # Output: [1, 2, 2, 2, 3, 5, 6] ```","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Parameters: list1 (list): A list of integers sorted in non-decreasing order. list2 (list): A list of integers sorted in non-decreasing order. Returns: list: A new list containing all elements from list1 and list2 in sorted order. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements if any while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"We are designing a simple bank account system for managing customer transactions. Your task is to create a class `BankAccount` which allows for deposits, withdrawals, and viewing the account balance. Here are the specifications for the `BankAccount` class: 1. **Initialization**: The class should have an `__init__` method that initializes the account with an initial balance, which defaults to 0. 2. **Deposit Method**: A method `deposit(amount)` which adds the given amount to the current balance. Ensure that the `amount` is positive; if it\'s not, the method should print an error message and not alter the balance. 3. **Withdraw Method**: A method `withdraw(amount)` which subtracts the given amount from the current balance. Ensure that the `amount` is positive and does not exceed the current balance; if either condition is violated, the method should print an error message and not alter the balance. 4. **Balance Inquiry Method**: A method `get_balance()` which returns the current balance as float. The aim of this problem is to demonstrate understanding of classes, instance methods, and basic error checking in Python. Example usage: ```python account = BankAccount(100) account.deposit(50) print(account.get_balance()) # Expected output: 150 account.withdraw(30) print(account.get_balance()) # Expected output: 120 account.withdraw(200) # Error: Insufficient balance print(account.get_balance()) # Expected output: 120 ```","solution":"class BankAccount: def __init__(self, initial_balance=0): Initializes the bank account with an initial balance. self.balance = initial_balance def deposit(self, amount): Adds the given amount to the current balance. if amount <= 0: print(\\"Error: Deposit amount must be positive.\\") return self.balance += amount def withdraw(self, amount): Subtracts the given amount from the current balance. if amount <= 0: print(\\"Error: Withdrawal amount must be positive.\\") return if amount > self.balance: print(\\"Error: Insufficient balance.\\") return self.balance -= amount def get_balance(self): Returns the current balance. return self.balance"},{"question":"You are given a task to simulate a simple social network where users can follow each other and post messages. Write a function `simulate_social_network` that adheres to the following specifications: 1. Create a class `User` with the following attributes: - `username` (str): The username of the user. - `following` (set): A set of users this user is following. - `posts` (list): A list of posts made by this user. 2. Implement the following methods in the `User` class: - `follow(user)`: Adds the specified `user` to the `following` set. - `post(message)`: Adds the `message` to the `posts` list. 3. Create a class `SocialNetwork` with the following attributes: - `users` (dict): A dictionary where the keys are usernames and the values are `User` objects. 4. Implement the following methods in the `SocialNetwork` class: - `add_user(username)`: Creates a new `User` with the specified `username` and adds it to the `users` dictionary. - `follow(follower, followee)`: Makes the `follower` user follow the `followee` user by calling the `follow` method on the appropriate `User` object. - `post_message(username, message)`: Adds a post made by the user with the specified `username` by calling the `post` method on the appropriate `User` object. - `get_news_feed(username)`: Returns a list of posts from the user and all users they are following, sorted in reverse chronological order (most recent first). Function Signature: ```python def simulate_social_network(actions): # implementation goes here ``` Parameters: - `actions` (list): A list of actions where each action is represented by a tuple. The first item in the tuple is a string that indicates the action and the remaining items are the necessary parameters for that action. The function should return the result for `get_news_feed` actions as a list of lists, each representing the news feed for the corresponding `username`. Examples of `actions` list: - `(\\"add_user\\", \\"alice\\")`: Adds a new user with username `alice`. - `(\\"add_user\\", \\"bob\\")`: Adds a new user with username `bob`. - `(\\"follow\\", \\"alice\\", \\"bob\\")`: Makes `alice` follow `bob`. - `(\\"post_message\\", \\"bob\\", \\"Hello world!\\")`: Adds a post for `bob` with the message \\"Hello world!\\". - `(\\"get_news_feed\\", \\"alice\\")`: Retrieves the news feed for `alice`. Example Usage: ```python actions = [ (\\"add_user\\", \\"alice\\"), (\\"add_user\\", \\"bob\\"), (\\"follow\\", \\"alice\\", \\"bob\\"), (\\"post_message\\", \\"bob\\", \\"Hello world!\\"), (\\"post_message\\", \\"alice\\", \\"Hi everyone!\\"), (\\"get_news_feed\\", \\"alice\\") ] print(simulate_social_network(actions)) # Output: [[\'Hi everyone!\', \'Hello world!\']] ``` # Requirements: - Ensure that all posts in the news feed are sorted in reverse chronological order. - Use appropriate data structures to maintain and retrieve user information efficiently.","solution":"class User: def __init__(self, username): self.username = username self.following = set() self.posts = [] def follow(self, user): self.following.add(user) def post(self, message): self.posts.append(message) class SocialNetwork: def __init__(self): self.users = {} def add_user(self, username): if username not in self.users: self.users[username] = User(username) def follow(self, follower, followee): if follower in self.users and followee in self.users: self.users[follower].follow(self.users[followee]) def post_message(self, username, message): if username in self.users: self.users[username].post(message) def get_news_feed(self, username): if username not in self.users: return [] user = self.users[username] all_posts = user.posts[:] for followee in user.following: all_posts.extend(followee.posts) return sorted(all_posts, reverse=True) def simulate_social_network(actions): network = SocialNetwork() result = [] for action in actions: if action[0] == \\"add_user\\": network.add_user(action[1]) elif action[0] == \\"follow\\": network.follow(action[1], action[2]) elif action[0] == \\"post_message\\": network.post_message(action[1], action[2]) elif action[0] == \\"get_news_feed\\": result.append(network.get_news_feed(action[1])) return result"},{"question":"# Problem Statement: You are given a text string and your task is to create a function `character_frequency_histogram(text: str) -> None` that counts the frequency of each character in the text and displays a histogram of these frequencies using `matplotlib`. The function should follow these steps: 1. Count the frequency of each character in the given string. 2. Create a bar chart using `matplotlib.pyplot.bar` where the x-axis represents the characters and the y-axis represents their frequencies. 3. Display the bar chart using `matplotlib.pyplot.show`. To help you start, below are the requirements: - Use Python\'s standard libraries to count character frequencies. - Use `matplotlib.pyplot.bar` to create the bar chart. - Use `matplotlib.pyplot.show` to display the bar chart. # Sample usage: ```python text = \\"hello world\\" character_frequency_histogram(text) ``` # Expected output: The displayed bar chart should show each character in the text string on the x-axis, and their frequencies on the y-axis. # Function signature: ```python def character_frequency_histogram(text: str) -> None: pass ``` Attributes: - `text (str)`: An input string containing the characters whose frequencies need to be counted. You only need to implement the `character_frequency_histogram` function.","solution":"import matplotlib.pyplot as plt from collections import Counter def character_frequency_histogram(text: str) -> None: Creates and displays a histogram showing the frequency of each character in the given text. Args: text (str): The input string whose character frequencies need to be counted. # Count the frequency of each character frequency = Counter(text) # Prepare data for the histogram characters = list(frequency.keys()) counts = list(frequency.values()) # Create the bar chart plt.bar(characters, counts) # Label the axes plt.xlabel(\\"Characters\\") plt.ylabel(\\"Frequency\\") plt.title(\\"Character Frequency Histogram\\") # Display the bar chart plt.show()"},{"question":"You are tasked with writing a Python function that simulates the rolling of multiple dice and calculates the number of times each possible outcome occurs. The function should be able to handle an arbitrary number of dice and roll the dice a specified number of times. Each die has 6 faces, numbered from 1 to 6. The function you need to implement is named `RollDiceSimulation`. It should accept two parameters: `num_dice` which specifies the number of dice to roll, and `num_rolls` which specifies the number of times to roll the dice. Your function signature should look like this: ```python def RollDiceSimulation(num_dice, num_rolls): # Your implementation here ``` # Instructions: 1. Use random generation to simulate the rolling of dice. 2. Sum the results of each roll and record the frequency of each possible outcome. 3. Return the results as a dictionary where the keys are the possible outcomes and the values are the frequencies. # Example usage: ```python num_dice = 2 num_rolls = 1000 result = RollDiceSimulation(num_dice, num_rolls) print(result) ``` Running the above code should output something similar to: ```python {2: 30, 3: 60, 4: 90, 5: 120, 6: 160, 7: 280, 8: 200, 9: 180, 10: 120, 11: 90, 12: 70} ``` # Requirements: - Your implementation must use a random number generator. - Handle edge cases, such as if `num_dice` or `num_rolls` is 0. - Ensure to produce deterministic results in testing (e.g., use a fixed random seed if necessary).","solution":"import random from collections import defaultdict def RollDiceSimulation(num_dice, num_rolls, seed=None): Simulates rolling `num_dice` dice `num_rolls` times and returns the frequency of each possible outcome. Parameters: num_dice (int): The number of dice to roll. num_rolls (int): The number of times to roll the dice. seed (int, optional): Seed for the random number generator to produce deterministic results (for testing). Returns: dict: Dictionary where keys are the possible outcomes and values are the frequencies. if seed is not None: random.seed(seed) outcomes = defaultdict(int) if num_dice <= 0 or num_rolls <= 0: return outcomes for _ in range(num_rolls): roll_sum = sum(random.randint(1, 6) for _ in range(num_dice)) outcomes[roll_sum] += 1 return dict(outcomes)"},{"question":"You are given a JSON file named `\\"inventory.json\\"` which contains information about items in a store\'s inventory. Each item is identified by a unique `item_code`, and each item has properties such as `name`, `quantity`, and `price`. The JSON file has the following structure: ```json { \\"item_code_1\\": {\\"name\\": \\"item_name_1\\", \\"quantity\\": 10, \\"price\\": 5.99}, \\"item_code_2\\": {\\"name\\": \\"item_name_2\\", \\"quantity\\": 5, \\"price\\": 15.49}, \\"item_code_3\\": {\\"name\\": \\"item_name_3\\", \\"quantity\\": 0, \\"price\\": 7.99} } ``` You need to write a function called `update_item_quantity(item_code: str, new_quantity: int)` that updates the quantity of a specific item in the inventory to the new quantity provided. Your task is to read the JSON file, update the specified item\'s quantity, and then write the updated data back to the same JSON file. Use Python\'s `json` library, particularly the `json.dump()` function, to handle the JSON data. Function Signature ```python def update_item_quantity(item_code: str, new_quantity: int) -> dict: ``` Input - `item_code (str)`: The unique code of the item whose quantity needs to be updated. - `new_quantity (int)`: The new quantity to set for the specified item. Output - Returns the updated dictionary after updating the specified item\'s quantity. Example Given the function call: ```python update_item_quantity(\\"item_code_1\\", 15) ``` Assuming the initial content of `inventory.json` is: ```json { \\"item_code_1\\": {\\"name\\": \\"item_name_1\\", \\"quantity\\": 10, \\"price\\": 5.99}, \\"item_code_2\\": {\\"name\\": \\"item_name_2\\", \\"quantity\\": 5, \\"price\\": 15.49}, \\"item_code_3\\": {\\"name\\": \\"item_name_3\\", \\"quantity\\": 0, \\"price\\": 7.99} } ``` The function should return and update the JSON file to: ```json { \\"item_code_1\\": {\\"name\\": \\"item_name_1\\", \\"quantity\\": 15, \\"price\\": 5.99}, \\"item_code_2\\": {\\"name\\": \\"item_name_2\\", \\"quantity\\": 5, \\"price\\": 15.49}, \\"item_code_3\\": {\\"name\\": \\"item_name_3\\", \\"quantity\\": 0, \\"price\\": 7.99} } ```","solution":"import json def update_item_quantity(item_code: str, new_quantity: int) -> dict: # Read the JSON file with open(\'inventory.json\', \'r\') as file: inventory = json.load(file) # Update the quantity of the specified item if item_code in inventory: inventory[item_code][\'quantity\'] = new_quantity # Write the updated inventory back to the file with open(\'inventory.json\', \'w\') as file: json.dump(inventory, file, indent=4) # Return the updated dictionary return inventory"},{"question":"Create a function that takes a CSV file containing user data with columns `Name`, `Age`, `Email`, and `Subscription Date`. Your task is to clean this data and return a cleaned DataFrame. Perform the following steps: - Remove all rows where `Age` is not a valid number. - Ensure the `Email` field contains valid email addresses (use regular expressions). - Convert the `Subscription Date` to datetime format and ensure all dates are not in the future. - Filter out any rows with duplicate `Email` addresses, keeping the first occurrence. - Return the cleaned DataFrame. The function should start with: ``` import pandas as pd import re def clean_user_data(file_path): ```","solution":"import pandas as pd import re from datetime import datetime def clean_user_data(file_path): Cleans user data from a CSV file and returns a cleaned DataFrame. Args: - file_path (str): The path to the CSV file containing user data. Returns: - pd.DataFrame: The cleaned DataFrame. df = pd.read_csv(file_path) # Remove rows where Age is not a valid number df = df[pd.to_numeric(df[\'Age\'], errors=\'coerce\').notnull()] df[\'Age\'] = df[\'Age\'].astype(int) # Ensure Email field contains valid email addresses valid_email_regex = re.compile(r\\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\\") df = df[df[\'Email\'].apply(lambda x: bool(valid_email_regex.match(x)))] # Convert Subscription Date to datetime and ensure dates are not in the future df[\'Subscription Date\'] = pd.to_datetime(df[\'Subscription Date\'], errors=\'coerce\') df = df[df[\'Subscription Date\'] <= datetime.now()] # Filter out duplicate email addresses df = df.drop_duplicates(subset=\'Email\', keep=\'first\') return df"},{"question":"Given a string containing a table with data in CSV (Comma-Separated Values) format, write a function that reads the table and returns a nested dictionary with the structure {\'column names\': {index: value}}. Raise a ValueError if the input is not a string or if it doesn\'t follow a valid CSV format (e.g., uneven number of columns). The function should start with: ``` def parse_csv_to_nested_dict(csv_string): ```","solution":"def parse_csv_to_nested_dict(csv_string): Parses a CSV string and returns a nested dictionary with the structure {\'column names\': {index: value}}. Parameters: csv_string (str): CSV formatted string. Returns: dict: Nested dictionary as described. Raises: ValueError: If the input is not a string or if it doesn\'t follow a valid CSV format. if not isinstance(csv_string, str): raise ValueError(\\"Input must be a string\\") lines = csv_string.strip().split(\'n\') if len(lines) < 2: raise ValueError(\\"CSV string must contain at least one header row and one data row.\\") headers = lines[0].split(\',\') data = [line.split(\',\') for line in lines[1:]] # Ensure all rows have the same number of columns num_columns = len(headers) for row in data: if len(row) != num_columns: raise ValueError(\\"CSV format is invalid. Number of columns does not match header.\\") nested_dict = {header: {} for header in headers} for i, row in enumerate(data): for j, value in enumerate(row): nested_dict[headers[j]][i] = value return nested_dict"},{"question":"Write a function named `longest_balanced_substring` that takes a string `s` consisting of only characters `(` and `)` as input and returns the length of the longest balanced substring. A balanced substring is one where each opening parenthesis `(` has a corresponding closing parenthesis `)` and the parentheses are correctly nested. Your function should efficiently find the longest balanced substring using a linear time complexity approach. **Function Signature:** ```python def longest_balanced_substring(s: str) -> int: pass ``` **Example:** ```python print(longest_balanced_substring(\\"(()\\")) # Output: 2 print(longest_balanced_substring(\\")()())\\")) # Output: 4 print(longest_balanced_substring(\\"()(()))))\\")) # Output: 6 ``` Requirements: - The solution should run with linear time complexity O(n). - Only use characters `(` and `)` in the input string. **Hints:** - Utilize a stack or two-pass approach to solve the problem efficiently. - Pay attention to indices and unmatched parentheses to find the longest valid substring.","solution":"def longest_balanced_substring(s: str) -> int: max_length = 0 stack = [-1] # Initialize stack with -1 to handle edge case of a valid substring from beginning for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"You are tasked with designing a function `analyzeLogData` to process and analyze web server log data. The log data is provided as a list of dictionaries, where each dictionary represents a single log entry with the following keys: `timestamp`, `user_id`, `resource`, and `response_time`. **Requirements:** 1. The function should take a list of log entries as input. 2. Calculate the total number of log entries. 3. Identify the unique `user_id`s and count them. 4. Determine the maximum, minimum, and average `response_time`. 5. Identify the most frequently accessed `resource`. Your task is to implement the function `analyzeLogData()` that performs the above analysis and returns the results as a dictionary. **Function Signature:** ```python def analyzeLogData(logs: list) -> dict: pass ``` **Example:** Given the input `logs`: ```python logs = [ {\\"timestamp\\": \\"2023-10-01T12:00:00Z\\", \\"user_id\\": \\"user1\\", \\"resource\\": \\"/home\\", \\"response_time\\": 120}, {\\"timestamp\\": \\"2023-10-01T12:01:00Z\\", \\"user_id\\": \\"user2\\", \\"resource\\": \\"/about\\", \\"response_time\\": 80}, {\\"timestamp\\": \\"2023-10-01T12:02:00Z\\", \\"user_id\\": \\"user1\\", \\"resource\\": \\"/home\\", \\"response_time\\": 100}, {\\"timestamp\\": \\"2023-10-01T12:03:00Z\\", \\"user_id\\": \\"user3\\", \\"resource\\": \\"/contact\\", \\"response_time\\": 200}, {\\"timestamp\\": \\"2023-10-01T12:04:00Z\\", \\"user_id\\": \\"user2\\", \\"resource\\": \\"/home\\", \\"response_time\\": 90}, ] ``` The function should return: ```python { \\"total_entries\\": 5, \\"unique_users\\": 3, \\"max_response_time\\": 200, \\"min_response_time\\": 80, \\"average_response_time\\": 118.0, \\"most_frequent_resource\\": \\"/home\\", } ``` In the example above, there are 5 log entries, 3 unique users, the response times range from 80 to 200, the average response time is 118, and the \\"/home\\" resource is accessed most frequently.","solution":"def analyzeLogData(logs): Analyzes web server log data and returns various statistics. Parameters: logs (list): A list of dictionaries representing log entries. Each dictionary contains the keys: \'timestamp\', \'user_id\', \'resource\', and \'response_time\'. Returns: dict: A dictionary containing the analysis results. if not logs: return { \\"total_entries\\": 0, \\"unique_users\\": 0, \\"max_response_time\\": None, \\"min_response_time\\": None, \\"average_response_time\\": None, \\"most_frequent_resource\\": None, } total_entries = len(logs) unique_users = len(set(log[\'user_id\'] for log in logs)) response_times = [log[\'response_time\'] for log in logs] max_response_time = max(response_times) min_response_time = min(response_times) average_response_time = sum(response_times) / total_entries resource_count = {} for log in logs: resource = log[\'resource\'] if resource in resource_count: resource_count[resource] += 1 else: resource_count[resource] = 1 most_frequent_resource = max(resource_count, key=resource_count.get) return { \\"total_entries\\": total_entries, \\"unique_users\\": unique_users, \\"max_response_time\\": max_response_time, \\"min_response_time\\": min_response_time, \\"average_response_time\\": average_response_time, \\"most_frequent_resource\\": most_frequent_resource, }"},{"question":"Write a function that takes a directory path as an argument, recursively walks through all subdirectories, and counts the total number of files and total number of directories. The function should return a dictionary with the counts. The dictionary should have two keys: - \\"files\\": The total count of files. - \\"directories\\": The total count of directories. The function should handle exceptions for: - FileNotFoundError: If the provided directory path does not exist. - NotADirectoryError: If the provided path is not a directory. You should write self-contained code starting with: ``` import os def count_files_and_directories(directory_path): ```","solution":"import os def count_files_and_directories(directory_path): Recursively counts the total number of files and directories in a given directory. Parameters: directory_path (str): The path of the directory to count files and directories in. Returns: dict: A dictionary with two keys, \'files\' and \'directories\'. result = {\'files\': 0, \'directories\': 0} if not os.path.exists(directory_path): raise FileNotFoundError(f\\"The directory {directory_path} does not exist.\\") if not os.path.isdir(directory_path): raise NotADirectoryError(f\\"The path {directory_path} is not a directory.\\") for root, dirs, files in os.walk(directory_path): result[\'directories\'] += len(dirs) result[\'files\'] += len(files) return result"},{"question":"**Objective:** Create a Python function named `find_optimal_teams` that takes a list of employees and their respective skill levels, and returns the optimal pairing of employees such that the total difference in skill levels between pairs is minimized. **Context:** You are given a list of employees, where each employee is represented as a tuple containing the employee\'s name and skill level. Your goal is to pair them up in such a way that the absolute difference in skill levels within each pair is as small as possible. **Guidelines:** 1. Sort the list of employees based on their skill levels. 2. Pair the employees in a sequential manner from the sorted list. 3. Return a list of tuples, each containing the paired employees\' names. **Function Signature:** ```python def find_optimal_teams(employees: List[Tuple[str, int]]) -> List[Tuple[str, str]]: pass ``` **Input:** - `employees`: a list of tuples, where each tuple contains a string (employee name) and an integer (skill level). **Output:** - A list of tuples, where each tuple contains two strings representing the names of the paired employees. **Example Usage:** ```python employees = [ (\'Alice\', 5), (\'Bob\', 8), (\'Charlie\', 6), (\'David\', 10) ] result = find_optimal_teams(employees) # Expected output: [(\'Alice\', \'Charlie\'), (\'Bob\', \'David\')] ``` **Notes:** - If the number of employees is odd, the last employee will not be paired. - Skill levels are unique and no two employees have the same skill level.","solution":"from typing import List, Tuple def find_optimal_teams(employees: List[Tuple[str, int]]) -> List[Tuple[str, str]]: Returns the optimal pairing of employees such that the total difference in skill levels is minimized. # Sort employees by skill level sorted_employees = sorted(employees, key=lambda x: x[1]) # Create pairs sequentially from the sorted list pairs = [] for i in range(0, len(sorted_employees) - 1, 2): pairs.append((sorted_employees[i][0], sorted_employees[i + 1][0])) return pairs"},{"question":"You are tasked with writing a Python function called `calculate_statistical_summary` that calculates and returns a dictionary containing the mean, median, mode, and standard deviation of a given list of numbers. This function will help you practice using the `statistics` library to perform various statistical calculations. You are required to use the following functions from the `statistics` module: - `statistics.mean()`: to calculate the mean of the list. - `statistics.median()`: to calculate the median of the list. - `statistics.mode()`: to calculate the mode of the list. - `statistics.stdev()`: to calculate the standard deviation of the list. Your task is to implement the `calculate_statistical_summary` function such that it returns a dictionary with the following keys and corresponding calculated values: 1. \\"mean\\": the mean of the list. 2. \\"median\\": the median of the list. 3. \\"mode\\": the mode of the list. 4. \\"std_dev\\": the standard deviation of the list. Example Usage: ```python numbers = [1, 2, 2, 3, 4] summary = calculate_statistical_summary(numbers) print(summary) ``` Expected Output: ```python { \\"mean\\": 2.4, \\"median\\": 2, \\"mode\\": 2, \\"std_dev\\": 1.140175425099138 } ```","solution":"import statistics def calculate_statistical_summary(numbers): Calculate and return a dictionary with the mean, median, mode, and standard deviation of the given list of numbers. Args: numbers (list): A list of numbers. Returns: dict: A dictionary containing the mean, median, mode, and standard deviation. summary = { \\"mean\\": statistics.mean(numbers), \\"median\\": statistics.median(numbers), \\"mode\\": statistics.mode(numbers), \\"std_dev\\": statistics.stdev(numbers) if len(numbers) > 1 else 0.0 # stdev requires at least 2 data points. } return summary"},{"question":"You need to write a Python function that generates a dictionary from a given list of words where the keys are the words and the values are the lengths of those words. The function will make use of list comprehensions and dictionary comprehensions. **Function Specifications:** - **Function Name:** `words_to_lengths` - **Parameters:** Takes a single parameter `words`, which is a list of strings. - **Returns:** Returns a dictionary where the keys are the words from the input list and the values are their respective lengths. **Requirements:** 1. Use list comprehension to iterate over the given list of words. 2. Use dictionary comprehension to construct the dictionary with each word and its corresponding length. 3. Ensure the function handles an empty list by returning an empty dictionary. # Example Usage: ```python words = [\\"apple\\", \\"banana\\", \\"cherry\\"] result = words_to_lengths(words) # Expected output: {\\"apple\\": 5, \\"banana\\": 6, \\"cherry\\": 6} ``` ```python words = [] result = words_to_lengths(words) # Expected output: {} ``` # Example Code: ```python def words_to_lengths(words): return {word: len(word) for word in words} # Example usage words = [\\"apple\\", \\"banana\\", \\"cherry\\"] print(words_to_lengths(words)) # Output: {\\"apple\\": 5, \\"banana\\": 6, \\"cherry\\": 6} ```","solution":"def words_to_lengths(words): Generates a dictionary from a given list of words where the keys are the words and the values are the lengths of those words. :param words: List of strings :return: Dictionary with words as keys and their lengths as values return {word: len(word) for word in words}"},{"question":"Create a function named `calculate_expression` that takes in a string `expression` containing a mathematical expression involving addition, subtraction, multiplication, and division. The function should evaluate the expression and return the result as a float. You are required to implement this without using the built-in `eval` function for security reasons. To achieve this, you should use Python\'s `re` library functions `re.findall` to parse numbers and operators, and write a parser to evaluate the expression according to the order of operations (PEMDAS/BODMAS rules). **Function Signature:** ```python def calculate_expression(expression: str) -> float: pass ``` **Example:** ```python input_expression = \\"3 + 5 * 2 / (7 - 3)\\" result = calculate_expression(input_expression) print(result) # Should print 5.0 ``` Use the `re` library\'s `re.findall` to split the expression into tokens (numbers and operators), and write a parser to handle the arithmetic according to the correct precedence and associativity rules.","solution":"import re def calculate_expression(expression: str) -> float: def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left / right) def precedence(operator): if operator in (\'+\', \'-\'): return 1 if operator in (\'*\', \'/\'): return 2 return 0 def to_float(value): try: return float(value) except ValueError: raise ValueError(\\"Invalid input\\") tokens = re.findall(r\'d+.?d*|[+-*/()]\', expression) values = [] operators = [] for token in tokens: if token.isdigit() or re.match(r\'d+.?d*\', token): values.append(to_float(token)) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() # remove \'(\' else: # operator while (operators and precedence(operators[-1]) >= precedence(token)): apply_operator(operators, values) operators.append(token) while operators: apply_operator(operators, values) return values[0]"},{"question":"Implement a sorting algorithm in Python using the `numpy` library. You will create a function named `numpy_quick_sort` which implements the quick sort algorithm to sort a given array of numbers in ascending order. You should utilize `numpy` arrays for the operations and recursion to implement the quick sort algorithm. # Function Signature ```python def numpy_quick_sort(arr): Sort an array of numbers in ascending order using the quick sort algorithm. Parameters: arr (numpy array): A numpy array of numbers to be sorted. Returns: sorted_arr (numpy array): The sorted numpy array. ``` # Example Usage Given the input array: ```python arr = np.array([3, 6, 8, 10, 1, 2, 1]) sorted_arr = numpy_quick_sort(arr) print(sorted_arr) # Output: [1 1 2 3 6 8 10] ``` # Task 1. Implement the `numpy_quick_sort` function following the provided function signature. 2. Ensure the use of the `numpy` library for array operations. 3. Validate the function using the example usage provided.","solution":"import numpy as np def numpy_quick_sort(arr): Sort an array of numbers in ascending order using the quick sort algorithm with numpy. Parameters: arr (numpy array): A numpy array of numbers to be sorted. Returns: sorted_arr (numpy array): The sorted numpy array. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = arr[arr < pivot] middle = arr[arr == pivot] right = arr[arr > pivot] return np.concatenate((numpy_quick_sort(left), middle, numpy_quick_sort(right))) # Example usage arr = np.array([3, 6, 8, 10, 1, 2, 1]) sorted_arr = numpy_quick_sort(arr) print(sorted_arr) # Output: [1 1 2 3 6 8 10]"},{"question":"You are tasked with writing a function `valid_arithmetic_expression(s)` that checks if a given string `s` represents a valid arithmetic expression. The string `s` consists of digits, \'+\', \'-\', \'*\', and \'/\' operators, and may contain spaces. # Guidelines: - The function should return `True` if `s` is a valid arithmetic expression and `False` otherwise. - The expression should not have consecutive operators and should not contain any invalid characters. - The expression should not start or end with an operator. - The operators and digits should be appropriately spaced without any misplaced characters. # Parameters: - `s` (string): The input string that needs to be checked for being a valid arithmetic expression. # Example: ```python def valid_arithmetic_expression(s): # Your implementation here pass print(valid_arithmetic_expression(\\"3 + 5 / 2\\")) # Output: True print(valid_arithmetic_expression(\\"3 + + 2\\")) # Output: False print(valid_arithmetic_expression(\\"+ 3 - 2\\")) # Output: False print(valid_arithmetic_expression(\\"3 + 5 *2\\")) # Output: False ``` # Additional Constraints: 1. Consider only the basic arithmetic operators (`+`, `-`, `*`, `/`). 2. The function should handle spaces correctly, i.e., removal or addition of spaces should not impede the validity of the expression. 3. The function should efficiently parse and validate the string using appropriate methods or libraries to keep parsing complex expressions manageable. # Hints: - Use regular expressions from the `re` module to validate the format of the string. - Consider using a state machine approach to ensure the correct sequence of characters in the string. - Removing spaces initially may make the validation process easier by allowing you to focus on operators and operands directly. By implementing this function, you will practice handling strings, regular expressions, or state-driven validation in Python.","solution":"import re def valid_arithmetic_expression(s): Checks if the string s is a valid arithmetic expression. # Remove all spaces from the string s = s.replace(\' \', \'\') # Define a regular expression pattern to check for valid arithmetic expression pattern = re.compile(r\'^d+(.d+)?([+-*/]d+(.d+)?)*\') # Match the pattern with the string s return bool(pattern.match(s))"},{"question":"# Task: Absentee Management You are required to create a function called `absent_days` which takes in the employee\'s name and a list of all attendances registered in the format \\"YYYY-MM-DD-EmployeeName-Status\\". The function should calculate the number of days an employee was absent. The status will be either \'P\' for present or \'A\' for absent. # Instructions: 1. Define the function `absent_days(employee_name, attendance_records)`, where: - `employee_name` is a string representing the name of the employee. - `attendance_records` is a list of strings, where each string contains the date in \\"YYYY-MM-DD\\", employee name, and status separated by hyphens. 2. The function should parse the attendance records and count the number of days where the status is \'A\' for the specified employee. 3. Return an integer representing the number of days the employee was absent. # Example: ```python attendance_data = [ \\"2023-06-01-JohnDoe-P\\", \\"2023-06-02-JohnDoe-A\\", \\"2023-06-03-JaneSmith-P\\", \\"2023-06-04-JohnDoe-A\\" ] result = absent_days(\'JohnDoe\', attendance_data) print(result) # Output: 2 ``` # Additional Information: - The function should be case-sensitive and match the employee name exactly as it appears in the records. - Ensure your function handles the input data efficiently and accurately counts the \'A\' status for the specified employee. - You can assume that the dates are given in a valid format and that no other special characters will be present.","solution":"def absent_days(employee_name, attendance_records): Calculate the number of days an employee was absent. Args: employee_name (str): The name of the employee. attendance_records (list): A list of attendance records in the format \\"YYYY-MM-DD-EmployeeName-Status\\". Returns: int: Number of days the employee was absent. absent_count = 0 for record in attendance_records: date, name, status = record.rsplit(\'-\', 2) if name == employee_name and status == \'A\': absent_count += 1 return absent_count"},{"question":"You are developing a recommendation system and need to evaluate the performance of your collaborative filtering algorithm. Your task is to write a function named `evaluate_recommender` that accepts the following parameters: - `model`: The recommendation model instance that implements the fit and predict methods. - `train_data`: A Pandas DataFrame containing user-item interactions for the training set. It should have columns `user_id`, `item_id`, and `rating`. - `test_data`: A Pandas DataFrame containing user-item interactions for the test set. It should have columns `user_id`, `item_id`, and `rating`. This function should fit the recommendation model using the training data, make predictions on the test data, and return the Root Mean Squared Error (RMSE) of the model\'s predictions using `sklearn.metrics.mean_squared_error`. Below is the signature of the function you need to implement: ```python def evaluate_recommender(model, train_data, test_data): # Your code here pass ``` Ensure to import the necessary libraries within your code. You are expected to fit the model using its `fit` method and make predictions using its `predict` method. Calculate the RMSE by comparing the predicted ratings with the true ratings in the test set. **Example:** Given the following input for training and test sets: ```python import pandas as pd train_data = pd.DataFrame({\'user_id\': [1, 2, 1], \'item_id\': [1, 1, 2], \'rating\': [5, 3, 4]}) test_data = pd.DataFrame({\'user_id\': [1, 2], \'item_id\': [1, 2], \'rating\': [5, 3]}) class MockModel: def fit(self, train_data): pass def predict(self, user_id, item_id): # Mock prediction logic return 4.5 model = MockModel() ``` A call to `evaluate_recommender(model, train_data, test_data)` should return the Root Mean Squared Error of the model\'s predictions on the test set.","solution":"import pandas as pd import numpy as np from sklearn.metrics import mean_squared_error def evaluate_recommender(model, train_data, test_data): Evaluates a recommendation model\'s performance using RMSE. Parameters: model: The recommendation model that implements fit and predict methods. train_data (pd.DataFrame): Training set with columns `user_id`, `item_id`, and `rating`. test_data (pd.DataFrame): Test set with columns `user_id`, `item_id`, and `rating`. Returns: float: The Root Mean Squared Error (RMSE) of the model\'s predictions on the test set. # Fit the model on the training data model.fit(train_data) # Make predictions on the test data test_user_ids = test_data[\'user_id\'].values test_item_ids = test_data[\'item_id\'].values true_ratings = test_data[\'rating\'].values predictions = [model.predict(user_id, item_id) for user_id, item_id in zip(test_user_ids, test_item_ids)] # Calculate RMSE rmse = np.sqrt(mean_squared_error(true_ratings, predictions)) return rmse"},{"question":"Write a function that takes a list of non-negative integers and a target sum as input, and determines if there are two distinct numbers in the list that add up to the target sum. If such a pair exists, return a tuple of these two numbers; otherwise, return None. The function should use a dictionary to achieve an efficient solution. **Function Signature** ```python def find_pair_with_sum(numbers: list[int], target_sum: int) -> tuple[int, int] | None: Determines if there are two distinct numbers in the list that add up to the target sum. Parameters: - numbers (list): A list of non-negative integers. - target_sum (int): The target sum. Returns: - tuple: A tuple containing the pair of numbers that add up to the target sum, or None if no such pair exists. ``` **Constraints:** - The input list, `numbers`, has at least two elements. - The integers in the list are non-negative and the target sum is a non-negative integer. - The function should aim for a time complexity of O(n). **Example usage:** ```python print(find_pair_with_sum([2, 7, 11, 15], 9)) # Output: (2, 7) print(find_pair_with_sum([1, 2, 3, 4, 5], 10)) # Output: None ```","solution":"def find_pair_with_sum(numbers, target_sum): Determines if there are two distinct numbers in the list that add up to the target sum. Parameters: - numbers (list): A list of non-negative integers. - target_sum (int): The target sum. Returns: - tuple: A tuple containing the pair of numbers that add up to the target sum, or None if no such pair exists. num_dict = {} for num in numbers: diff = target_sum - num if diff in num_dict: return (diff, num) num_dict[num] = True return None"},{"question":"You are tasked with implementing a `rotate_matrix` function in Python that rotates a given N x N matrix by 90 degrees clockwise. This is a common operation required in image processing and computer vision. The input matrix is a two-dimensional list of size NxN. The goal is to transform the original matrix by rotating it 90 degrees clockwise. The function signature is as follows: ```python def rotate_matrix(matrix): # Your implementation here ``` The task is to: 1. Implement the `rotate_matrix` function. 2. Ensure that the function efficiently rotates the matrix by 90 degrees clockwise. 3. The function should return the rotated matrix. Here is a sample input and output for reference: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotated = rotate_matrix(matrix) # Expected output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` Another sample input and output: ```python matrix = [ [ 5, 1, 9, 11], [ 2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] rotated = rotate_matrix(matrix) # Expected output: # [ # [15, 13, 2, 5], # [14, 3, 4, 1], # [12, 6, 8, 9], # [16, 7, 10, 11] # ] ```","solution":"def rotate_matrix(matrix): Rotates a given NxN matrix by 90 degrees clockwise. Parameters: matrix (list[list[int]]): NxN matrix to be rotated. Returns: list[list[int]]: Rotated NxN matrix. n = len(matrix) # Create a new NxN matrix initialized with zeros rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"In this problem, you will create a function `reverseWords` that takes a string as input and returns the string with the order of the words reversed. Each word is defined as a sequence of non-space characters, and words are separated by spaces. Given: - A string input containing words separated by spaces. The function should: 1. Split the string by spaces into an array of words. 2. Reverse the order of words in the array. 3. Join the words back into a single string with spaces separating them. You are required to use the following Python string methods to accomplish this: - `str.split`: To split the string into an array of words. - `list.reverse`: To reverse the order of words in the array. - `str.join`: To join the reversed array of words back into a single string. **Function Signature:** ```python def reverseWords(input_str): pass ``` **Input:** - `input_str` (string): A string containing words separated by spaces. **Output:** - A single string with the order of words reversed. **Example:** ```python input_str = \\"the sky is blue\\" reversed_str = reverseWords(input_str) print(reversed_str) # Output should be \\"blue is sky the\\" ```","solution":"def reverseWords(input_str): Reverses the order of words in the given string. Args: input_str (str): A string containing words separated by spaces. Returns: str: A string with the order of words reversed. words = input_str.split() words.reverse() return \' \'.join(words)"},{"question":"You are tasked with creating a function called `normalize_text_file` that reads a text file, normalizes the text, and writes the normalized text back to a new file. Normalization involves converting all characters to lowercase, removing punctuation, and replacing multiple spaces with a single space. For simplicity, you can assume that the text contains only ASCII characters. Your implementation must fulfill the following requirements: 1. Use the `re` module for regular expressions to handle the removal of punctuation and multiple spaces. 2. The function should read the input file, apply the normalization transformations, and write the normalized text to the output file. **Function Signature:** ```python import re def normalize_text_file(input_file: str, output_file: str) -> None: # Your code here ``` **Parameters:** - `input_file` (str): The path to the input text file. - `output_file` (str): The path to the output text file where the normalized text should be written. **Returns:** - None: The function should not return any value, but write the normalized text to the `output_file`. **Example Usage:** Given an input file \\"input.txt\\" with the following content: ``` Hello, World! This is an example. It includes punctuation, and some spaces. ``` Calling the function as follows: ```python normalize_text_file(\\"input.txt\\", \\"output.txt\\") ``` The output file \\"output.txt\\" should contain: ``` hello world this is an example it includes punctuation and some spaces ``` This example demonstrates how the content of \\"input.txt\\" is normalized and written to \\"output.txt\\".","solution":"import re def normalize_text_file(input_file: str, output_file: str) -> None: with open(input_file, \'r\') as infile: text = infile.read() # Convert to lowercase text = text.lower() # Remove punctuation text = re.sub(r\'[^ws]\', \'\', text) # Replace multiple spaces with a single space text = re.sub(r\'s+\', \' \', text).strip() with open(output_file, \'w\') as outfile: outfile.write(text)"},{"question":"In this problem, you are required to implement a function named `find_shortest_path(grid)` that finds the shortest path from the top-left corner to the bottom-right corner of a given 2D grid. The grid is represented by a list of lists containing integers, where a `0` represents an open cell and a `1` represents an obstacle. You can move up, down, left, or right, but not diagonally. The function should return the length of the shortest path. If there is no path, return -1. # Input: - `grid`: A list of lists of integers (0s and 1s) representing the grid. # Output: - An integer representing the length of the shortest path from the top-left corner to the bottom-right corner, or -1 if no such path exists. # Steps to Solve: 1. Use Breadth-First Search (BFS) to explore the shortest path in an unweighted grid. 2. Initialize a queue with the starting point (0,0) and the initial path length. 3. Use a set to keep track of visited cells to avoid cycles. 4. Dequeue a cell, check all possible movements, and enqueue valid cells that haven’t been visited yet. 5. Return the path length when the bottom-right corner is reached or -1 if the queue is exhausted with no valid path. # Example: ```python grid = [ [0, 0, 0, 0], [1, 1, 0, 1], [0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0] ] print(find_shortest_path(grid)) # Output: 8 ``` Here, the shortest path length from the top-left corner to the bottom-right corner of the grid is 8.","solution":"from collections import deque def find_shortest_path(grid): Finds the shortest path from top-left corner to bottom-right corner of a grid. if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == rows - 1 and col == cols - 1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row][new_col] == 0 and (new_row, new_col) not in visited: queue.append((new_row, new_col, dist + 1)) visited.add((new_row, new_col)) return -1"},{"question":"Write a function that takes a list of integers and returns a dictionary containing two keys: \\"mean\\" and \\"median\\". The value corresponding to the \\"mean\\" key should be the arithmetic mean of the list of integers, and the value corresponding to the \\"median\\" key should be the median of the list of integers. If the input list is empty, the function should raise a ValueError with the message \\"Input list is empty\\". Additionally, handle the case where the input list contains non-integer elements by raising a TypeError with the message \\"All elements must be integers\\". The function should output as follows: dict: A dictionary with the arithmetic mean and the median of the list of integers provided. You should write self-contained code starting with: ``` def calculate_statistics(numbers): ```","solution":"def calculate_statistics(numbers): Calculates the mean and median of a list of integers. Parameters: - numbers: list of integers Returns: - dict: Dictionary containing the mean and median of the list Raises: - ValueError: If the input list is empty - TypeError: If the input list contains non-integer elements if len(numbers) == 0: raise ValueError(\\"Input list is empty\\") if not all(isinstance(x, int) for x in numbers): raise TypeError(\\"All elements must be integers\\") n = len(numbers) mean = sum(numbers) / n sorted_numbers = sorted(numbers) if n % 2 == 1: median = sorted_numbers[n // 2] else: median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2 return {\\"mean\\": mean, \\"median\\": median}"},{"question":"The function processes a list of dictionaries containing information about various products and their prices. Each dictionary has two keys: \'Product\' and \'Price\', where \'Product\' is a string representing the product name and \'Price\' is a float indicating the product\'s price. The function calculates the total price and the average price of the products listed. It should also identify the product with the highest price and the product with the lowest price. If the list is empty or if it lacks the required keys, the function simply returns None. The function should output a summary dictionary with the following keys: - \'TotalPrice\': the total price of all products - \'AveragePrice\': the average price of the products - \'MostExpensiveProduct\': a tuple containing the name and price of the most expensive product - \'LeastExpensiveProduct\': a tuple containing the name and price of the least expensive product You should write self-contained code starting with: ``` def process_products(products: list) -> dict: ```","solution":"def process_products(products: list) -> dict: Processes a list of product dictionaries to calculate total price, average price, the most expensive product, and the least expensive product. :param products: List of dictionaries with \'Product\' and \'Price\' keys :return: Dictionary with calculated total price, average price, most expensive product, and least expensive product, or None if the list is empty or invalid. if not products: return None total_price = 0.0 max_price = float(\'-inf\') min_price = float(\'inf\') most_expensive_product = None least_expensive_product = None valid_products = 0 for product in products: if \'Product\' not in product or \'Price\' not in product or not isinstance(product[\'Price\'], (float, int)): continue price = product[\'Price\'] total_price += price valid_products += 1 if price > max_price: max_price = price most_expensive_product = (product[\'Product\'], price) if price < min_price: min_price = price least_expensive_product = (product[\'Product\'], price) if valid_products == 0: return None average_price = total_price / valid_products return { \'TotalPrice\': total_price, \'AveragePrice\': average_price, \'MostExpensiveProduct\': most_expensive_product, \'LeastExpensiveProduct\': least_expensive_product }"},{"question":"You are given a dictionary where the keys are product names and the values are their prices. Your task is to write a function `get_top_n_expensive_products` that takes this dictionary and an integer `n` as input and returns a list of the top `n` most expensive products sorted in descending order of their prices. Specifically, you need to: 1. Validate that `n` is a positive integer and less than or equal to the number of products in the dictionary. 2. Sort the products by their price in descending order. 3. Return the names of the top `n` products in a list. **Function Signature** ```python def get_top_n_expensive_products(products: dict, n: int) -> list: pass ``` **Parameters** - `products` (dict): A dictionary where keys are strings representing product names and values are floats representing their prices. - `n` (int): Number of top most expensive products to return. **Returns** - `list`: A list of strings representing the names of the top `n` most expensive products. **Example Usage** ```python products = { \\"laptop\\": 1500.0, \\"smartphone\\": 800.0, \\"tablet\\": 400.0, \\"monitor\\": 300.0, \\"headphones\\": 100.0 } top_products = get_top_n_expensive_products(products, 3) print(top_products) ``` **Expected Output** ``` [\'laptop\', \'smartphone\', \'tablet\'] ``` **Note:** Ensure your function handles cases where `n` is larger than the number of products appropriately by raising a ValueError.","solution":"def get_top_n_expensive_products(products: dict, n: int) -> list: if not isinstance(n, int) or n <= 0: raise ValueError(\\"n must be a positive integer.\\") if n > len(products): raise ValueError(\\"n cannot be greater than the number of products.\\") # Sort products by price in descending order sorted_products = sorted(products.items(), key=lambda x: x[1], reverse=True) # Get the top n products top_n_products = [product for product, price in sorted_products[:n]] return top_n_products"},{"question":"# Counting Unique Elements in an Array Using Python You are tasked with writing a function to count the number of unique elements in a given 1D array. Uniqueness in this context means the elements that appear only once in the array. # Specific Requirements 1. **Function Name**: `count_unique_elements` 2. **Parameters**: - `arr` (list): The input list of integers you need to process. 3. **Return**: - The function should return an integer representing the count of unique elements in the array. # Constraints - Your solution should have a time complexity of O(n). - You must utilize a dictionary to keep track of the frequency of each element for optimal performance. # Example ```python arr = [4, 3, 2, 7, 8, 2, 3, 1] unique_count = count_unique_elements(arr) print(unique_count) ``` Expected output: ```python 3 ``` Explanation: - In the array `[4, 3, 2, 7, 8, 2, 3, 1]`, the unique elements are `[4, 7, 8, 1]`. The count is 4. # Task Implement the function `count_unique_elements` as described above using dictionaries for optimal performance. ``` def count_unique_elements(arr): # Your code here pass ```","solution":"def count_unique_elements(arr): Returns the count of unique elements in the array, where uniqueness is defined by elements that appear exactly once. element_frequency = {} # Count the frequency of each element for elem in arr: if elem in element_frequency: element_frequency[elem] += 1 else: element_frequency[elem] = 1 # Count elements that appear exactly once unique_count = sum(1 for freq in element_frequency.values() if freq == 1) return unique_count"},{"question":"You are required to write a function `calculate_average_temperature` that utilizes the Pandas library to read a CSV file containing daily temperature data for a year and provides the average temperature for a specific range of dates. The CSV file contains the following fields: - `Date`: The date of the temperature recording (in string format: \'YYYY-MM-DD\'). - `Temperature`: The recorded temperature for that day (in float). The function should be defined as follows: ```python def calculate_average_temperature(file_path, start_date, end_date): pass ``` where: - `file_path` (string): The path to the CSV file containing the temperature data. - `start_date` (string): The start date of the range (inclusive) in the format \'YYYY-MM-DD\'. - `end_date` (string): The end date of the range (inclusive) in the format \'YYYY-MM-DD\'. The function should read the CSV file into a Pandas DataFrame, convert the \'Date\' column to a datetime object using Pandas, filter the DataFrame for the specified date range, and then calculate and return the average temperature for the filtered range. # Example Usage: Example function call: ```python average_temp = calculate_average_temperature(\'temperature_data.csv\', \'2023-01-01\', \'2023-01-31\') ``` This will return the average temperature recorded in January 2023. **Requirements:** - Use Pandas library functions, especially `pandas.read_csv()` to read the CSV file. - Convert the \'Date\' column to a datetime object using Pandas. - Filter the DataFrame for rows where the \'Date\' is within the specified range. - Calculate and return the mean of the \'Temperature\' column for the filtered DataFrame.","solution":"import pandas as pd def calculate_average_temperature(file_path, start_date, end_date): Calculates the average temperature for a specific range of dates from a CSV file. Parameters: - file_path (str): The path to the CSV file containing the temperature data. - start_date (str): The start date of the range (inclusive) in the format \'YYYY-MM-DD\'. - end_date (str): The end date of the range (inclusive) in the format \'YYYY-MM-DD\'. Returns: - float: The average temperature for the specified date range. # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Convert \'Date\' column to datetime df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Filter the DataFrame for the specified date range mask = (df[\'Date\'] >= start_date) & (df[\'Date\'] <= end_date) filtered_df = df.loc[mask] # Calculate and return the mean temperature return filtered_df[\'Temperature\'].mean()"},{"question":"You are tasked with creating a function called `move_zeroes` that rearranges an input list of integers by moving all zeroes to the end of the list while maintaining the relative order of the non-zero elements. The function should modify the list in-place and should not return anything. **Constraints:** - Do not use additional arrays or Python collections (such as lists, sets, queues, etc.). - Aim to perform this operation with a time complexity of O(n). **Your task is to:** 1. Write the function `move_zeroes(nums)`, where `nums` is a list of integers. The function modifies `nums` as described above. 2. Ensure your function meets the requirements specified. Here is the function signature: ```python def move_zeroes(nums): # Your implementation here pass ``` **Example:** ```python nums = [0, 1, 0, 3, 12] move_zeroes(nums) print(nums) # Output should be [1, 3, 12, 0, 0] ```","solution":"def move_zeroes(nums): Rearranges the given list of integers by moving all zeroes to the end while maintaining the relative order of the non-zero elements. n = len(nums) last_non_zero_found_at = 0 for i in range(n): if nums[i] != 0: nums[last_non_zero_found_at], nums[i] = nums[i], nums[last_non_zero_found_at] last_non_zero_found_at += 1"},{"question":"You are required to write a function in Python that determines whether a given string has all unique characters. This problem will test your understanding of string manipulation and the use of data structures to achieve optimal time complexity. **Function Name:** ```python def has_unique_characters(input_string): ``` **Parameters:** - `input_string`: A single string consisting of ASCII characters. **Returns:** - The function should return a boolean value - `True` if the string has all unique characters and `False` otherwise. **Requirements:** - You should aim for an efficient solution with a time complexity of O(n), where n is the number of characters in the input string. - Do not use any additional data structures like lists. **Example Usage:** ```python input_string = \\"abcdefg\\" result = has_unique_characters(input_string) print(result) # Expected output: True input_string = \\"hello\\" result = has_unique_characters(input_string) print(result) # Expected output: False ``` **Additional Requirements:** - You may only use the built-in functions and methods provided by the Python standard library.","solution":"def has_unique_characters(input_string): Determines whether the given string has all unique characters. if len(input_string) > 128: # There are only 128 unique ASCII characters return False char_set = set() for char in input_string: if char in char_set: return False char_set.add(char) return True"},{"question":"You are tasked with creating a Python function that reads a set of coordinates from a CSV file, computes the convex hull of the points using the Graham scan algorithm, and plots the convex hull using the `matplotlib` library. Your function should be named `plot_convex_hull`, and it should save the plot as a PNG image. # Function Details **Function Name:** `plot_convex_hull` **Parameters:** 1. `file_path`: A string representing the path to the input CSV file containing the coordinates. 2. `output_file`: A string representing the path where the output image will be saved. # Requirements and Steps: 1. **Read Coordinates:** - The CSV file will have two columns with headers `x` and `y`, which represent the x and y coordinates of the points. - Implement the `read_coordinates(file_path)` function, which reads the coordinates from the CSV file and returns a list of tuples. 2. **Compute Convex Hull:** - Implement the `graham_scan(points)` function, which takes in a list of tuples representing the coordinates and returns a list of tuples representing the vertices of the convex hull in counter-clockwise order. 3. **Plotting:** - Utilize `matplotlib` for plotting the coordinates and the convex hull. - Plot the points using `plt.scatter`. - Plot the convex hull using `plt.plot`. - Set plot labels for the x-axis and y-axis using `plt.xlabel` and `plt.ylabel`. - Set the plot title using `matplotlib.pyplot.title`. - Save the plot as a PNG file using `matplotlib.pyplot.savefig` with the filename provided in the `output_file` parameter. # Sample Output: - A saved plot image named as specified in `output_file`, depicting the original points and their convex hull overlay. # Example Usage: ```python plot_convex_hull(file_path=\'points.csv\', output_file=\'convex_hull.png\') ``` # Example CSV Input: ```plaintext x,y 1,2 2,3 3,1 5,4 6,2 7,3 ``` # Example Code: ```python import matplotlib.pyplot as plt import pandas as pd def read_coordinates(file_path): df = pd.read_csv(file_path) return list(zip(df[\'x\'], df[\'y\'])) def graham_scan(points): # Implement the Graham scan algorithm points = sorted(points) hull = [] def cross(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) for point in points: while len(hull) >= 2 and cross(hull[-2], hull[-1], point) <= 0: hull.pop() hull.append(point) lower_len = len(hull) for point in reversed(points): while len(hull) > lower_len and cross(hull[-2], hull[-1], point) <= 0: hull.pop() hull.append(point) return list(dict.fromkeys(hull)) # Remove duplicates def plot_convex_hull(file_path, output_file): points = read_coordinates(file_path) hull = graham_scan(points) x_points, y_points = zip(*points) plt.scatter(x_points, y_points) hull.append(hull[0]) hx, hy = zip(*hull) plt.plot(hx, hy, \'r-\') plt.xlabel(\'X\') plt.ylabel(\'Y\') plt.title(\'Convex Hull of Points\') plt.savefig(output_file) # Example usage # plot_convex_hull(file_path=\'points.csv\', output_file=\'convex_hull.png\') ```","solution":"import matplotlib.pyplot as plt import pandas as pd def read_coordinates(file_path): Reads coordinates from a CSV file and returns a list of tuples. df = pd.read_csv(file_path) return list(zip(df[\'x\'], df[\'y\'])) def graham_scan(points): Computes the convex hull of a set of 2D points using the Graham scan algorithm. points = sorted(points) if len(points) < 3: return points hull = [] def cross(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) for point in points: while len(hull) >= 2 and cross(hull[-2], hull[-1], point) <= 0: hull.pop() hull.append(point) lower_len = len(hull) for point in reversed(points): while len(hull) > lower_len and cross(hull[-2], hull[-1], point) <= 0: hull.pop() hull.append(point) return list(dict.fromkeys(hull)) def plot_convex_hull(file_path, output_file): Reads coordinates from a CSV file, computes the convex hull, and plots the points and convex hull, saving the plot as a PNG image. points = read_coordinates(file_path) hull = graham_scan(points) x_points, y_points = zip(*points) plt.scatter(x_points, y_points) hull.append(hull[0]) hx, hy = zip(*hull) plt.plot(hx, hy, \'r-\') plt.xlabel(\'X\') plt.ylabel(\'Y\') plt.title(\'Convex Hull of Points\') plt.savefig(output_file)"},{"question":"You are required to implement a text processing program that converts a given string into its Morse code equivalent. Morse code is a method used in telecommunication to encode messages in sequences of dots and dashes, each representing a character of the alphabet. Here\'s what you need to do: 1. Write a function named `text_to_morse` that takes a single parameter: - `text`: a string containing the message to be converted. The `text_to_morse` function should: 1. Convert the input text to uppercase to standardize the input format. 2. Use the provided Morse code dictionary to map each character in the input text to its Morse code representation. 3. Return the resulting Morse code as a string where each Morse code character is separated by a space. The Morse code dictionary you should use is: ```python MORSE_CODE_DICT = {} ``` **Example Usage:** ```python message = \\"HELLO WORLD\\" morse_code = text_to_morse(message) print(morse_code) # Expected Output: \\".... . .-.. .-.. --- / .-- --- .-. .-.. -..\\" ``` **Additional Notes:** - Any characters in the input text that do not have a Morse code representation should be ignored. - The space character in the input text should be converted to a single slash (\'/\') in Morse code to indicate a space between words. - Ensure that your solution handles both uppercase and lowercase input text by converting everything to uppercase.","solution":"def text_to_morse(text): Converts a given text to its Morse code equivalent. :param text: string containing the message to be converted :return: Morse code string where each Morse code character is separated by a space MORSE_CODE_DICT = {} text = text.upper() morse_code = [] for char in text: if char in MORSE_CODE_DICT: morse_code.append(MORSE_CODE_DICT[char]) return \' \'.join(morse_code)"},{"question":"Implement a function that simulates the rolling of a pair of dice and computes the probability of rolling each possible sum (from 2 to 12). The function should take two arguments: the number of simulations to perform (`num_simulations`) and an optional random seed (`random_state`) to ensure reproducibility. The function should return a dictionary where the keys are the possible sums and the values are their corresponding probabilities. You should write self-contained code starting with: ``` import numpy as np def dice_probability_simulation(num_simulations, random_state=None): ```","solution":"import numpy as np def dice_probability_simulation(num_simulations, random_state=None): Simulate the rolling of a pair of dice and compute the probability of rolling each possible sum (from 2 to 12). Parameters: num_simulations (int): The number of simulations to perform. random_state (int, optional): Seed for the random number generator to ensure reproducibility. Returns: dict: A dictionary where the keys are the possible sums and the values are their corresponding probabilities. if random_state is not None: np.random.seed(random_state) sums = np.random.randint(1, 7, size=(num_simulations, 2)).sum(axis=1) unique, counts = np.unique(sums, return_counts=True) probabilities = counts / num_simulations return dict(zip(unique, probabilities))"},{"question":"You are required to design a function named `order_statistics` which calculates the k-th smallest element in an array using the Quickselect algorithm. The Quickselect algorithm is an efficient selection algorithm to find the k-th smallest element in an unordered list. It is related to the quicksort sorting algorithm. Your function `order_statistics` should take two parameters: - `arr`: a list of integers. - `k`: an integer representing the 1-based index of the desired smallest element. The function should implement the Quickselect algorithm to find and return the k-th smallest element in the array. If `k` is out of bounds (e.g., less than 1 or greater than the length of the array), the function should return `None`. Here is the function signature: ```python def order_statistics(arr: list, k: int) -> int: ``` Example usage: ```python print(order_statistics([7, 10, 4, 3, 20, 15], 3)) # Output should be 7 print(order_statistics([7, 10, 4, 3, 20, 15], 1)) # Output should be 3 print(order_statistics([7, 10, 4, 3, 20, 15], 6)) # Output should be 20 print(order_statistics([7, 10, 4, 3, 20, 15], 0)) # Output should be None ``` Remember to ensure your implementation of Quickselect is efficient and handles edge cases such as an empty array or `k` being out of bounds.","solution":"def order_statistics(arr: list, k: int) -> int: if k < 1 or k > len(arr) or not arr: return None def partition(left, right, pivot_index): pivot_value = arr[pivot_index] arr[pivot_index], arr[right] = arr[right], arr[pivot_index] store_index = left for i in range(left, right): if arr[i] < pivot_value: arr[store_index], arr[i] = arr[i], arr[store_index] store_index += 1 arr[right], arr[store_index] = arr[store_index], arr[right] return store_index def quickselect(left, right, k_smallest): if left == right: return arr[left] pivot_index = (left + right) // 2 pivot_index = partition(left, right, pivot_index) if k_smallest == pivot_index: return arr[k_smallest] elif k_smallest < pivot_index: return quickselect(left, pivot_index - 1, k_smallest) else: return quickselect(pivot_index + 1, right, k_smallest) return quickselect(0, len(arr) - 1, k - 1)"},{"question":"You are responsible for developing a function to process a list of integer exam scores and categorize each score based on predefined grade ranges. Specifically, you need to translate these scores into letter grades according to the following criteria: - 90 to 100: \'A\' - 80 to 89: \'B\' - 70 to 79: \'C\' - 60 to 69: \'D\' - Below 60: \'F\' Write a function named `assignGrades` that accepts a list of integers representing exam scores and returns a list of strings representing the corresponding letter grades. Your function should: - Iterate over the list of scores, applying the grading criteria to each score. - Return a new list where each integer score is replaced by its corresponding letter grade. Here\'s an example of how the function signature should look: ```python def assignGrades(scores): pass ```","solution":"def assignGrades(scores): Assign letter grades to a list of exam scores based on predefined grade ranges. Parameters: scores (list of int): A list of integer exam scores. Returns: list of str: A list of corresponding letter grades. grades = [] for score in scores: if score >= 90: grades.append(\'A\') elif score >= 80: grades.append(\'B\') elif score >= 70: grades.append(\'C\') elif score >= 60: grades.append(\'D\') else: grades.append(\'F\') return grades"},{"question":"In this problem, you are required to write a Python function called `findLongestPalindrome` that finds the longest palindromic substring within a given string. The function must implement a solution with a time complexity of O(n^2) or better. Function Signature: ```python def findLongestPalindrome(s: str) -> str: Finds the longest palindromic substring in the given string. Parameters: s (str): The input string in which to find the longest palindromic substring. Returns: str: The longest palindromic substring within the input string. ``` You must: 1. Iterate through the input string to identify all possible palindromic substrings. 2. Keep track of the longest palindromic substring identified during the iteration. 3. Return the longest palindromic substring from the input string. # Example: Calling `findLongestPalindrome(\\"babad\\")` should return `\\"bab\\"` or `\\"aba\\"` (both are valid as they have the same length). # Constraints: - The input string `s` will contain only lower-case English letters. - The length of the input string `s` will be between 1 and 1000 inclusive. # Hints: - You may consider expanding around the center technique to find palindromes. - Perform checks while expanding to ensure the substring is a palindrome.","solution":"def findLongestPalindrome(s: str) -> str: Finds the longest palindromic substring in the given string. Parameters: s (str): The input string in which to find the longest palindromic substring. Returns: str: The longest palindromic substring within the input string. if len(s) == 0: return \\"\\" def expandAroundCenter(left: int, right: int) -> str: while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest_palindrome = \\"\\" for i in range(len(s)): # Check for odd length palindromes odd_palindrome = expandAroundCenter(i, i) if len(odd_palindrome) > len(longest_palindrome): longest_palindrome = odd_palindrome # Check for even length palindromes even_palindrome = expandAroundCenter(i, i + 1) if len(even_palindrome) > len(longest_palindrome): longest_palindrome = even_palindrome return longest_palindrome"},{"question":"Write a function that takes a pandas DataFrame containing date columns in string format and converts these columns to datetime objects. The function should then create a new column that calculates the difference in days between the earliest and latest date in the DataFrame. The returned DataFrame should include the original date columns in datetime format and the new difference column. You should write self-contained code starting with: ``` import pandas as pd def convert_and_calculate(data, date_columns): ``` Example: ``` # Input: data = pd.DataFrame({ \'start_date\': [\'2023-01-01\', \'2023-01-05\', \'2023-01-10\'], \'end_date\': [\'2023-01-03\', \'2023-01-08\', \'2023-01-14\'] }) date_columns = [\'start_date\', \'end_date\'] # Output: converted_df = convert_and_calculate(data, date_columns) print(converted_df) # Output DataFrame: # start_date end_date date_difference # 0 2023-01-01 2023-01-03 13 # 1 2023-01-05 2023-01-08 13 # 2 2023-01-10 2023-01-14 13 ```","solution":"import pandas as pd def convert_and_calculate(data, date_columns): Convert date columns to datetime and calculate the difference in days between the earliest and latest dates in the DataFrame. Parameters: data (pd.DataFrame): Input DataFrame containing date columns in string format. date_columns (list): List of column names that are to be converted to datetime. Returns: pd.DataFrame: DataFrame with original date columns as datetime objects, and a new column `date_difference` showing the difference in days between the earliest and latest date in the DataFrame. # Convert specified columns to datetime for col in date_columns: data[col] = pd.to_datetime(data[col]) # Calculate the minimum and maximum dates across the specified columns min_date = data[date_columns].min().min() max_date = data[date_columns].max().max() # Calculate the difference in days date_difference = (max_date - min_date).days # Create a new column with the difference in days data[\'date_difference\'] = date_difference return data"},{"question":"# Problem: Calculate the Most Frequent Substring of Length K Write a function named `most_frequent_substring` that takes a string `input_string` and an integer `k` as inputs, and returns the most frequent substring of length `k` found in the string. If there are multiple substrings that appear the maximum number of times, return the lexicographically smallest one. The function should adhere to the following steps: 1. **Check Input Constraints**: If `k` is greater than the length of `input_string`, return an empty string. 2. **Generate Substrings**: Extract all substrings of length `k` from the `input_string`. 3. **Count Frequencies**: Determine the frequency of each substring. 4. **Identify the Most Frequent Substring**: Find the substring with the highest frequency. If there are ties, return the lexicographically smallest one. **Function Signature:** ```python def most_frequent_substring(input_string: str, k: int) -> str: pass ``` # Input: - `input_string` (str): A string where substrings are to be searched. - `k` (int): The length of substrings to be considered. # Output: - Returns a string, which is the most frequent substring of length `k`. # Example: ```python >>> most_frequent_substring(\\"ababcabc\\", 2) \'ab\' >>> most_frequent_substring(\\"ababcabcabc\\", 3) \'abc\' >>> most_frequent_substring(\\"aabbccdd\\", 2) \'aa\' >>> most_frequent_substring(\\"abcd\\", 5) \'\' ``` **Hints**: - Consider using dictionaries to count substring frequencies efficiently. - Use built-in string operations for slicing and comparison of substrings. --- This question involves basic string manipulation and frequency counting, promoting a good understanding of string traversal, hash maps (dictionaries), and handling edge cases.","solution":"def most_frequent_substring(input_string: str, k: int) -> str: if k > len(input_string): return \'\' substring_counts = {} for i in range(len(input_string) - k + 1): substring = input_string[i:i+k] if substring in substring_counts: substring_counts[substring] += 1 else: substring_counts[substring] = 1 max_frequency = max(substring_counts.values()) most_frequent_substrings = [s for s in substring_counts if substring_counts[s] == max_frequency] return min(most_frequent_substrings)"},{"question":"You are required to implement a function named `analyze_text` which processes a text file to generate useful statistics about the content. Your `analyze_text` function should: 1. Read the contents of a file specified by the given file path. 2. Calculate and print the following statistics: - The total number of words. - The average word length. - The number of unique words. 3. Display a bar graph with the five most common words and their frequencies. **Function Signature:** ```python def analyze_text(file_path: str): ``` **Requirements:** - Use the `collections.Counter` class to count word frequencies. - Use `matplotlib.pyplot` to generate the bar graph. - Ignore punctuation and convert all words to lowercase for uniform counting. - Assume words are separated by whitespace. - Print each statistic on a new line. **Example:** Suppose the file contains the following text: ``` Hello world! Hello everybody. This is a simple text file. A simple file with simple text. ``` The output should be: ``` Total number of words: 13 Average word length: 4.0 Number of unique words: 9 ``` The bar graph should display: - hello: 2 - simple: 3 - text: 2 - file: 2 - world: 1","solution":"import re from collections import Counter import matplotlib.pyplot as plt def analyze_text(file_path: str): with open(file_path, \'r\') as file: text = file.read() # Normalize text to lowercase and remove punctuation. words = re.findall(r\'bw+b\', text.lower()) total_words = len(words) avg_word_length = sum(len(word) for word in words) / total_words if total_words > 0 else 0 unique_words = set(words) print(f\\"Total number of words: {total_words}\\") print(f\\"Average word length: {avg_word_length:.2f}\\") print(f\\"Number of unique words: {len(unique_words)}\\") word_counts = Counter(words) most_common_words = word_counts.most_common(5) # Plotting the bar graph words, counts = zip(*most_common_words) plt.figure(figsize=(10, 6)) plt.bar(words, counts, color=\'skyblue\') plt.xlabel(\'Words\') plt.ylabel(\'Frequency\') plt.title(\'Top 5 Most Common Words\') plt.show()"},{"question":"You are given a list of meeting times for a group of employees, where each meeting time is a tuple consisting of a `start_time` and an `end_time`, represented as integers indicating hours in a day (0 to 23). Each meeting cannot overlap with another. A meeting that starts at the same time another ends is considered valid. You need to implement a function `can_attend_all_meetings(meetings: List[tuple]) -> bool` that determines if a person can attend all meetings without any overlap. Your task involves the following steps: 1. Sort the list of meetings by their start times. 2. Check if any meeting overlaps with the next one. 3. Return `True` if no meetings overlap, otherwise return `False`. # Example ```python meetings = [(9, 10), (11, 12), (14, 15), (12, 13)] # Calling the function result = can_attend_all_meetings(meetings) print(result) # Output: True meetings = [(9, 10), (10, 12), (11, 13), (13, 14)] # Calling the function result = can_attend_all_meetings(meetings) print(result) # Output: False ``` # Constraints - The list of meetings contains at least one meeting. - Meeting times are within the range of 0 to 23. - Each meeting tuple is given as (start_time, end_time) where start_time < end_time.","solution":"def can_attend_all_meetings(meetings): Determines if a person can attend all meetings without any overlap. :param meetings: List of meeting times where each meeting is a tuple (start_time, end_time) :return: Boolean value indicating if it\'s possible to attend all meetings # Sort the meetings based on the start time meetings.sort(key=lambda x: x[0]) # Iterate through the sorted list and check for overlaps for i in range(len(meetings) - 1): if meetings[i][1] > meetings[i + 1][0]: return False return True"},{"question":"Design a function that simulates the behavior of a basic LRU (Least Recently Used) Cache. The LRU Cache should have a fixed capacity and should support the following operations: `get(key)` and `put(key, value)`. Your task is to create a class `LRUCache` with the following methods: 1. `__init__(self, capacity: int) -> None`: Initialize the LRU cache with a positive size capacity. 2. `get(self, key: int) -> int`: Return the value of the key if the key exists, otherwise return -1. 3. `put(self, key: int, value: int) -> None`: Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key. Your implementation should ensure the `get` and `put` methods both run in O(1) average time complexity. **Example:** ```python cache = LRUCache(2) # A cache with capacity 2 cache.put(1, 1) cache.put(2, 2) print(cache.get(1)) # Returns 1 cache.put(3, 3) # Evicts key 2 print(cache.get(2)) # Returns -1 (not found) cache.put(4, 4) # Evicts key 1 print(cache.get(1)) # Returns -1 (not found) print(cache.get(3)) # Returns 3 print(cache.get(4)) # Returns 4 ``` **Constraints:** - The number of operations will not exceed 10,000. - Ensure your solution is space-efficient and does not use a direct list traversal inside the operations that would violate the O(1) requirement. Utilize data structures that inherently support O(1) operations for updates and retrieval.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): Initialize the LRU cache with a positive size capacity. self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: Return the value of the key if the key exists, otherwise return -1. if key not in self.cache: return -1 else: self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key. if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"In this problem, you are required to implement a function that detects and replaces outliers in a given Pandas dataframe using the Z-score method. An outlier is a data point that is significantly different from the rest of the data. The Z-score method determines how many standard deviations an element is from the mean. Typically, a Z-score greater than 3 or less than -3 is considered an outlier. Your function `replace_outliers` should: 1. Accept a Pandas dataframe (`df`) that includes the data, a list of feature names (`features`) to check for outliers, and a replacement strategy (`replacement`) that can be either \'mean\' or \'median\'. 2. Calculate the Z-scores for the specified features. 3. Identify outliers based on a Z-score threshold of greater than 3 or less than -3. 4. Replace the outlier values with the mean or median of the respective feature, based on the provided `replacement` strategy. 5. Return the modified dataframe. # Function Signature ```python def replace_outliers(df: pd.DataFrame, features: list, replacement: str = \'mean\') -> pd.DataFrame: pass ``` Example Usage: ```python import pandas as pd import numpy as np from scipy.stats import zscore # Sample DataFrame data = { \'feature1\': np.random.randn(100), \'feature2\': np.random.randn(100), \'feature3\': np.random.randn(100), } # Introduce some outliers data[\'feature1\'][0] = 10 data[\'feature2\'][1] = -9 data[\'feature3\'][2] = 12 df = pd.DataFrame(data) # Feature list features = [\'feature1\', \'feature2\', \'feature3\'] # Call the function df_modified = replace_outliers(df, features, replacement=\'median\') print(df_modified) ```","solution":"import pandas as pd import numpy as np from scipy.stats import zscore def replace_outliers(df: pd.DataFrame, features: list, replacement: str = \'mean\') -> pd.DataFrame: Replaces outliers in the specified features of the dataframe using the Z-score method. Parameters: df (pd.DataFrame): The input dataframe. features (list): List of feature names to check for outliers. replacement (str): Strategy to use for replacing outliers (\'mean\' or \'median\'). Returns: pd.DataFrame: The dataframe with outliers replaced. df = df.copy() for feature in features: # Calculate Z-scores for the feature z_scores = zscore(df[feature]) # Identify outliers outliers = np.abs(z_scores) > 3 if replacement == \'mean\': replacement_value = df[feature].mean() elif replacement == \'median\': replacement_value = df[feature].median() else: raise ValueError(\\"Replacement strategy must be either \'mean\' or \'median\'\\") # Replace outliers df.loc[outliers, feature] = replacement_value return df"},{"question":"You are tasked with creating a simple linear regression model to predict house prices based on a single feature: the size of the house in square feet. Your task is to develop a Python function named `train_and_plot_linear_regression()` which will utilize the `matplotlib.pyplot` library to visualize the regression line over the data points. Detailed steps for the function: 1. Generate a synthetic dataset for house sizes (X) and corresponding house prices (Y) with some added noise. The dataset should have 50 data points. 2. Split the dataset into training and testing sets in the ratio of 80:20. 3. Train a linear regression model using the training set. 4. Print the learned parameters (slope and intercept) of the linear regression model. 5. Use the model to predict house prices on the testing set and print the predicted prices. 6. Calculate and print the Mean Squared Error (MSE) on the testing set. 7. Plot the training data points and the regression line using `matplotlib.pyplot.plot` and display the plot using `matplotlib.pyplot.show`. Your task is to fill in the function `train_and_plot_linear_regression()` to accomplish the above steps.","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error def train_and_plot_linear_regression(): # Step 1: Generate a synthetic dataset np.random.seed(0) # for reproducibility X = 2.5 * np.random.rand(50, 1) # house sizes in square feet Y = 2 + 1.5 * X + np.random.randn(50, 1) # house prices with some noise # Step 2: Split the dataset into training and testing sets (80:20) X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0) # Step 3: Train a linear regression model model = LinearRegression() model.fit(X_train, Y_train) # Step 4: Print the learned parameters (slope and intercept) slope = model.coef_[0] intercept = model.intercept_ print(f\\"Slope: {slope}\\") print(f\\"Intercept: {intercept}\\") # Step 5: Predict house prices on the testing set Y_pred = model.predict(X_test) print(f\\"Predicted prices: {Y_pred.flatten()}\\") # Step 6: Calculate and print the Mean Squared Error (MSE) on the testing set mse = mean_squared_error(Y_test, Y_pred) print(f\\"Mean Squared Error: {mse}\\") # Step 7: Plot the training data points and the regression line plt.scatter(X_train, Y_train, color=\'blue\', label=\'Training data\') plt.plot(X_train, model.predict(X_train), color=\'red\', label=\'Regression line\') plt.xlabel(\'Size of house (square feet)\') plt.ylabel(\'House price\') plt.legend() plt.show()"},{"question":"Consider a scenario where you have a sequence of timestamps in string format, and you need to determine the total number of unique days represented by those timestamps. The timestamps are in the format `\\"YYYY-MM-DD HH:MM:SS\\"`. Write a function `count_unique_days` that takes a list of such timestamp strings and returns the count of unique days. **Your task:** 1. Implement the function `count_unique_days` which takes a list of timestamps and returns the number of unique days. 2. Ensure to parse the input timestamps correctly to extract the date part. **Function Signature:** ```python def count_unique_days(timestamps: List[str]) -> int: ``` **Example:** ```python # Example usage timestamps = [ \\"2023-01-01 12:00:00\\", \\"2023-01-01 15:45:30\\", \\"2023-01-02 08:00:00\\", \\"2023-01-03 20:10:10\\", \\"2023-01-03 22:22:22\\", ] result = count_unique_days(timestamps) print(result) # This should print 3, because there are three unique days: \\"2023-01-01\\", \\"2023-01-02\\", and \\"2023-01-03\\". ``` In this example, convert the list of timestamp strings to extract dates and count the number of unique dates. Use Python\'s built-in string manipulation or date parsing methods to achieve this.","solution":"from typing import List def count_unique_days(timestamps: List[str]) -> int: unique_days = set() for timestamp in timestamps: date_part = timestamp.split(\' \')[0] unique_days.add(date_part) return len(unique_days)"},{"question":"In this problem, you will be working with the `pandas` library to analyze a dataset and perform data manipulation. The dataset is assumed to be in a CSV file named `data.csv` with the following columns: `ID`, `Name`, `Age`, `Country`, and `Score`. You are required to define a function `calculate_average_score_by_country()` that reads the CSV file, groups the data by the `Country` column, and calculates the average `Score` for each country. The function should take no arguments and return a dictionary where the keys are the country names and the values are the corresponding average scores. For this exercise, here is an example structure of a potential `data.csv` file for the sake of context: ``` ID,Name,Age,Country,Score 1,John Doe,28,USA,85 2,Jane Smith,34,Canada,90 3,Bob Johnson,45,USA,78 4,Alice White,23,Canada,92 5,David Brown,30,USA,88 ``` Your task: 1. Implement the function `calculate_average_score_by_country()` to read the CSV file, group the data by the `Country` column, and compute the average `Score` for each country. 2. Return the result as a dictionary with country names as keys and average scores as values. ```python import pandas as pd def calculate_average_score_by_country(): # Your implementation here pass ```","solution":"import pandas as pd def calculate_average_score_by_country(): # Load the dataset df = pd.read_csv(\'data.csv\') # Group by \'Country\' and calculate mean \'Score\' avg_scores = df.groupby(\'Country\')[\'Score\'].mean() # Convert the result to a dictionary avg_scores_dict = avg_scores.to_dict() return avg_scores_dict"},{"question":"You are required to write a function that implements the Merge Sort algorithm to sort an array of integers in ascending order. This task will help you learn about and utilize recursive functions and the divide-and-conquer paradigm in algorithm design. Function Specification: - **Function Name**: `merge_sort` - **Input**: A list of integers `arr` (0 ≤ len(arr) ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9 for any `arr[i]`) - **Output**: A list of integers sorted in ascending order Requirements: 1. **Efficiency**: Your implementation should leverage the divide-and-conquer principle, ensuring a time complexity of O(n log n). 2. **Implementation**: The function should implement the Merge Sort algorithm, using recursion to divide the problem into smaller subproblems and combining their solutions. Example: ```python >>> merge_sort([38, 27, 43, 3, 9, 82, 10]) [3, 9, 10, 27, 38, 43, 82] >>> merge_sort([]) [] >>> merge_sort([5]) [5] >>> merge_sort([4, 4, 4, 3, 1]) [1, 3, 4, 4, 4] ``` Merge Sort works by repeatedly splitting the array into halves until each sub-array contains a single element, then merging those sub-arrays in a manner that results in a sorted array. The merging process involves comparing the elements of the sub-arrays and arranging them in order. Use the following steps as a guide: 1. Define a recursive function that splits the array into two halves. 2. Recursively apply the same function to each half until the base case is reached (single-element arrays). 3. Define a helper function to merge two sorted arrays into one sorted array. 4. After sorting and merging the sub-arrays, return the fully sorted array.","solution":"def merge_sort(arr): Performs merge sort on the input list of integers. Parameters: arr (list of int): The list of integers to be sorted. Returns: list of int: The sorted list of integers. if len(arr) <= 1: return arr # Recursive divide step mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) # Merge step return merge(left_half, right_half) def merge(left, right): Merges two sorted lists into one sorted list. Parameters: left (list of int): The first sorted list. right (list of int): The second sorted list. Returns: list of int: The merged sorted list. merged_list = [] i = j = 0 # Merging the two lists while i < len(left) and j < len(right): if left[i] < right[j]: merged_list.append(left[i]) i += 1 else: merged_list.append(right[j]) j += 1 # If there are remaining elements in left list while i < len(left): merged_list.append(left[i]) i += 1 # If there are remaining elements in right list while j < len(right): merged_list.append(right[j]) j += 1 return merged_list"},{"question":"You are to write a Python function named `extract_emails` that processes a given text file to extract all unique email addresses and save them into a new text file, each email on a new line. The function should handle any common email pattern and ignore duplicates. # Function Signature ```python def extract_emails(input_file: str, output_file: str) -> None: pass ``` # Parameters - `input_file` (str): A string representing the path to the input text file containing raw text that includes email addresses. - `output_file` (str): A string representing the path to the output text file where the extracted unique email addresses will be saved. # Requirements 1. Read the contents of `input_file`. 2. Extract all unique email addresses from the text using regular expressions. 3. Write each unique email address to `output_file`, each on a new line. # Example Assume the content of the input file `emails.txt` is: ``` Hello, You can reach us at info@example.com or support@example.com. For marketing inquiries, contact marketing@example.com. Please do not hesitate to email feedback@example.com or support@example.com for any assistance. Thank you. ``` After running `extract_emails(\\"emails.txt\\", \\"unique_emails.txt\\")`, the content of `unique_emails.txt` should be: ``` info@example.com support@example.com marketing@example.com feedback@example.com ``` # Hint Use the `re` library to match email patterns in the text. Consider a pattern that covers most common email formats.","solution":"import re def extract_emails(input_file: str, output_file: str) -> None: Extracts unique email addresses from the input file and writes them to the output file. Parameters: input_file (str): path to the input text file containing raw text with email addresses. output_file (str): path to the output text file where the extracted unique email addresses will be saved. # Regular expression pattern to match email addresses email_pattern = r\'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\' unique_emails = set() # Read the input file with open(input_file, \'r\') as file: content = file.read() # Find all email addresses using the regular expression emails = re.findall(email_pattern, content) unique_emails.update(emails) # Write the unique emails to the output file with open(output_file, \'w\') as file: for email in sorted(unique_emails): file.write(email + \'n\')"},{"question":"You are given a list of courses and their prerequisite pairs. The objective is to determine the order in which the courses can be completed. If it\'s not possible to finish all the courses, return an empty list. Write a function `find_course_order` that takes in the following parameters: 1. `num_courses`: An integer representing the total number of courses. 2. `prerequisites`: A list of tuples, where each tuple `(a, b)` represents that course `a` has `b` as a prerequisite. The function should return a list of integers representing the order in which the courses can be completed. If it is not possible to complete all courses, the function should return an empty list. # Function Signature ```python def find_course_order(num_courses, prerequisites): pass ``` # Example Input ```python num_courses = 4 prerequisites = [(1, 0), (2, 1), (3, 2)] ``` # Expected Output ```python [0, 1, 2, 3] ``` # Explanation The order in which you can complete the courses is: first course `0`, which is a prerequisite for course `1`, which is a prerequisite for course `2`, which is a prerequisite for course `3`. # Notes: - You may assume that there are no duplicate prerequisite pairs. - There could be multiple valid solutions, for instance in the above example, `[0, 1, 2, 3]` is a valid solution but so is `[0, 2, 1, 3]` since course `1` can be taken at any time after course `0` and before course `2` in the DAG.","solution":"def find_course_order(num_courses, prerequisites): from collections import defaultdict, deque # Create a graph and a dictionary to count in-degrees graph = defaultdict(list) in_degrees = [0] * num_courses # Fill the graph and the in-degree counts based on prerequisites for course, prereq in prerequisites: graph[prereq].append(course) in_degrees[course] += 1 # Queue to maintain courses with no prerequisites (in-degree of 0) queue = deque([i for i in range(num_courses) if in_degrees[i] == 0]) order = [] while queue: # Take the course with no prerequisites course = queue.popleft() order.append(course) # Decrease the in-degree of the neighboring courses by 1 for neighbor in graph[course]: in_degrees[neighbor] -= 1 # If the in-degree of the neighboring course becomes 0, add it to the queue if in_degrees[neighbor] == 0: queue.append(neighbor) # If we could add all the courses to the ordering, return the order if len(order) == num_courses: return order else: return []"},{"question":"You are required to write a function `split_data_by_ratio(data, ratio)` that splits a given dataset into two subsets based on a specified ratio. The function will take two inputs: `data` and `ratio`. The `data` input is a list of data points, and the `ratio` is a float between 0 and 1, representing the proportion of the dataset that should go into the first subset. The function should return two lists: the first list containing the first subset of the data according to the ratio, and the second list containing the remaining data points. Ensure that if the ratio does not perfectly split the dataset (e.g., due to rounding), the function allocates the remainder to the first list. Example: - Input: `data = [1, 2, 3, 4, 5], ratio = 0.6` - Output: `([1, 2, 3], [4, 5])` Please implement the function `split_data_by_ratio(data, ratio)` to meet these requirements.","solution":"def split_data_by_ratio(data, ratio): Splits the dataset into two subsets based on the specified ratio. Parameters: data (list): The dataset to be split. ratio (float): The ratio by which the dataset should be split, between 0 and 1. Returns: tuple: A tuple containing two lists, the first list containing the first subset of the data according to the ratio, and the second list containing the remaining data points. if not (0 <= ratio <= 1): raise ValueError(\\"Ratio should be between 0 and 1\\") split_index = int(len(data) * ratio) first_subset = data[:split_index] second_subset = data[split_index:] return first_subset, second_subset"},{"question":"In this problem, you are required to write a function called `generate_report` that processes employee work logs from a CSV file, calculates the total number of hours worked by each employee, and generates a summary report in a new CSV file. Each log contains the employee\'s name, date, start time, and end time. Your task is to correctly parse the data, compute the working hours, and handle possible inconsistencies in the log data. Here are the specific steps your function should perform: 1. **Read Employee Work Logs from CSV:** Read a CSV file named `\\"work_logs.csv\\"` located in a directory named `\\"work_data\\"`. This file contains columns: `employee_name`, `date`, `start_time`, and `end_time`. 2. **Calculate Working Hours:** For each employee, calculate the total number of hours worked on a given day by subtracting the `start_time` from the `end_time`. Each time is represented in the format `HH:MM`. 3. **Handle Inconsistent Data:** If the end time is earlier than the start time or if any entry is missing or malformed, record the hours worked for that entry as `0`. 4. **Aggregate Total Hours Worked:** Sum up the total hours worked by each employee across all dates. 5. **Save Results to CSV:** Store the summarized total hours worked by each employee in a new CSV file named `\\"work_report.csv\\"` in the same directory. The CSV should have two columns: `employee_name` and `total_hours_worked`. # Function Signature ```python def generate_report(): pass ``` # Example Scenario Given a CSV file named \\"work_logs.csv\\" with the following content: ``` employee_name,date,start_time,end_time Alice,2023-01-10,09:00,17:00 Bob,2023-01-10,09:30,17:30 Alice,2023-01-11,10:00,18:00 Bob,2023-01-11,09:00,15:00 ``` Your function should: - Read the work logs from the CSV. - Calculate the total hours worked by Alice and Bob. - Handle any possible inconsistencies in log data. - Save the results in a CSV file named `\\"work_report.csv\\"`. Expected output in \\"work_report.csv\\": ``` employee_name,total_hours_worked Alice,16.0 Bob,14.0 ``` # Required Libraries - `pandas` - `datetime` Ensure you import these libraries within your function.","solution":"import pandas as pd from datetime import datetime def generate_report(): # Read the CSV file into a DataFrame input_filepath = \\"work_data/work_logs.csv\\" output_filepath = \\"work_data/work_report.csv\\" work_logs = pd.read_csv(input_filepath) # Initialize a dictionary to keep the total hours worked by each employee total_hours = {} for index, row in work_logs.iterrows(): employee_name = row[\'employee_name\'] start_time = row[\'start_time\'] end_time = row[\'end_time\'] try: start_time_dt = datetime.strptime(start_time, \'%H:%M\') end_time_dt = datetime.strptime(end_time, \'%H:%M\') # Calculate worked hours if end_time_dt < start_time_dt: worked_hours = 0 else: worked_hours = (end_time_dt - start_time_dt).total_seconds() / 3600.0 except: worked_hours = 0 # Add worked hours to the employee\'s total if employee_name in total_hours: total_hours[employee_name] += worked_hours else: total_hours[employee_name] = worked_hours # Create the output DataFrame report_data = pd.DataFrame(list(total_hours.items()), columns=[\'employee_name\', \'total_hours_worked\']) # Save the DataFrame to a CSV file report_data.to_csv(output_filepath, index=False)"},{"question":"You are tasked with implementing a Python function `find_shortest_path` that determines the shortest path in an unweighted graph. This will involve reading an adjacency list, performing a breadth-first search (BFS), and returning the shortest path from a start node to an end node. This exercise provides practice in graph traversal and pathfinding algorithms. # Function Signature ```python def find_shortest_path(graph: dict, start: str, end: str) -> list: ``` # Function Parameters - `graph` (dict): A dictionary where keys are node identifiers and values are lists of adjacent nodes. - `start` (str): The starting node identifier. - `end` (str): The ending node identifier for which we need the shortest path. # Steps to Implement 1. **Initialize BFS Structures**: - Utilize a queue to explore nodes in a breadth-first manner. - Maintain a dictionary to store the parent of each visited node to reconstruct the path later. 2. **Perform BFS**: - Start from the `start` node, marking it as visited. - Enqueue the start node. - While the queue is not empty: - Dequeue a node. - For each adjacent node: - If it is unvisited, mark it as visited and set its parent. - Enqueue the adjacent node. - If the adjacent node is the `end` node, break the loop. 3. **Reconstruct the Path**: - Starting from the `end` node, use the parent dictionary to trace back to the `start` node. - Reverse the traced path to get the correct order from start to end. 4. **Handle Edge Cases**: - If the `start` or `end` node is not in the graph, return an empty list. - If no path exists between `start` and `end`, return an empty list. # Additional Requirements - Assume all nodes in the graph have unique identifiers. - The graph is unweighted and can be represented as an undirected graph for simplicity. # Example Usage ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'] } # Find the shortest path from \'A\' to \'F\' print(find_shortest_path(graph, \'A\', \'F\')) # Output: [\'A\', \'C\', \'F\'] ``` **Constraints**: - The function should efficiently handle graphs with up to 1000 nodes.","solution":"from collections import deque def find_shortest_path(graph: dict, start: str, end: str) -> list: if start not in graph or end not in graph: return [] # Initialize BFS structures queue = deque([start]) visited = {start} parents = {start: None} # Perform BFS while queue: node = queue.popleft() if node == end: break for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) parents[neighbor] = node queue.append(neighbor) # Reconstruct the path if end not in parents: return [] path = [] while end: path.append(end) end = parents[end] path.reverse() return path"},{"question":"# Context You are tasked with developing a function that finds the longest contiguous subarray with an equal number of 0s and 1s in a binary array. This problem requires an efficient approach to determine such subarrays. # Requirements Implement a function named `findMaxLength` that takes a single parameter `nums`, which is a list of binary digits (`0`s and `1`s), and returns the length of the longest contiguous subarray with an equal number of `0`s and `1`s. # Instructions 1. Utilize an appropriate data structure to keep track of indices that have been encountered and the cumulative sum of elements up to that index. 2. Adjust cumulative sums by transforming the `0`s to `-1`s for easier handling of zero-sum subarrays. 3. Iterate through the input list once, updating the necessary variables and tracking maximum lengths found during iterations. 4. Ensure the implementation has an optimal time complexity, ideally O(n). # Usage ```python def findMaxLength(nums): # Function implementation should be here pass ``` # Example ```python print(findMaxLength([0,1])) # Output: 2 print(findMaxLength([0,1,0])) # Output: 2 print(findMaxLength([0,1,1,0,1,1,1,0])) # Output: 4 ``` # Note The function should handle edge cases such as empty lists or lists with no valid subarrays gracefully. Ensure proper updates of cumulative sums and indexing to find the maximum length effectively.","solution":"def findMaxLength(nums): Returns the length of the longest contiguous subarray with an equal number of 0s and 1s. max_length = 0 count = 0 count_index_map = {0: -1} # Initialize with count 0 at index -1 to handle edge case for i, num in enumerate(nums): # Convert 0 to -1 and accumulate count += -1 if num == 0 else 1 if count in count_index_map: # If the count has been seen before, a subarray with equal number of 0s and 1s is found max_length = max(max_length, i - count_index_map[count]) else: # Store the first occurrence of this count count_index_map[count] = i return max_length"},{"question":"In this problem, you will practice working with classes and static methods in Python. Static methods, marked with the `@staticmethod` decorator, do not require a class instance to be called and do not have access to the `self` or `cls` parameters. **Task:** You need to create a class called `TemperatureConverter` that includes various static methods to convert temperatures between Fahrenheit, Celsius, and Kelvin. **Class Definition:** ```python class TemperatureConverter: pass ``` **Detailed Requirements:** 1. The class should have the following static methods: - `fahrenheit_to_celsius(fahrenheit)`: Converts a temperature from Fahrenheit to Celsius. - `celsius_to_fahrenheit(celsius)`: Converts a temperature from Celsius to Fahrenheit. - `celsius_to_kelvin(celsius)`: Converts a temperature from Celsius to Kelvin. - `kelvin_to_celsius(kelvin)`: Converts a temperature from Kelvin to Celsius. 2. Each static method should perform the appropriate calculation using the provided formulas: - Celsius to Fahrenheit: `(celsius * 9/5) + 32` - Fahrenheit to Celsius: `(fahrenheit - 32) * 5/9` - Celsius to Kelvin: `celsius + 273.15` - Kelvin to Celsius: `kelvin - 273.15` **Example Usage:** ```python f_to_c = TemperatureConverter.fahrenheit_to_celsius(98.6) print(f_to_c) # Expected Output: 37.0 c_to_f = TemperatureConverter.celsius_to_fahrenheit(0) print(c_to_f) # Expected Output: 32.0 c_to_k = TemperatureConverter.celsius_to_kelvin(0) print(c_to_k) # Expected Output: 273.15 k_to_c = TemperatureConverter.kelvin_to_celsius(273.15) print(k_to_c) # Expected Output: 0.0 ``` This problem will help you understand the use of static methods in a class context and how to implement basic temperature conversion formulas.","solution":"class TemperatureConverter: @staticmethod def fahrenheit_to_celsius(fahrenheit): return (fahrenheit - 32) * 5/9 @staticmethod def celsius_to_fahrenheit(celsius): return (celsius * 9/5) + 32 @staticmethod def celsius_to_kelvin(celsius): return celsius + 273.15 @staticmethod def kelvin_to_celsius(kelvin): return kelvin - 273.15"},{"question":"You are given a dataset of customer transactions from an e-commerce platform, provided as a pandas DataFrame, `transactions_df`. The DataFrame contains columns such as `\\"CustomerID\\"`, `\\"TransactionAmount\\"`, and `\\"TransactionTime\\"`. Write a function named `customer_stats` that calculates and displays the following statistics based on the provided data: 1. The total number of unique customers. 2. The total transaction amount. 3. The date and time of the first transaction in the dataset. 4. The date and time of the last transaction in the dataset. 5. Display the average transaction amount rounded to two decimal places. **Requirements:** 1. The total number of unique customers should be calculated using the `\\"CustomerID\\"` column. 2. The total transaction amount should be calculated using the `\\"TransactionAmount\\"` column. 3. The date and time of the first and last transactions should be derived from the `\\"TransactionTime\\"` column. 4. The average transaction amount should be displayed with two decimal precision. **Function Signature:** ```python def customer_stats(transactions_df: pd.DataFrame) -> None: ``` **Library to be used:** - `pandas`: You must use this Python library for data manipulation and analysis. Here is the format of the DataFrame `transactions_df` you will receive: ``` CustomerID TransactionAmount TransactionTime 0 1 52.50 2021-01-01 08:30:00 1 2 23.75 2021-01-01 09:15:00 2 1 45.00 2021-01-01 10:00:00 ... ```","solution":"import pandas as pd def customer_stats(transactions_df: pd.DataFrame) -> None: Displays statistics based on the provided transactions data. Parameters: transactions_df (pd.DataFrame): DataFrame containing customer transactions. # Calculate total number of unique customers total_unique_customers = transactions_df[\'CustomerID\'].nunique() # Calculate total transaction amount total_transaction_amount = transactions_df[\'TransactionAmount\'].sum() # Get date and time of the first transaction in the dataset first_transaction_time = transactions_df[\'TransactionTime\'].min() # Get date and time of the last transaction in the dataset last_transaction_time = transactions_df[\'TransactionTime\'].max() # Calculate average transaction amount rounded to two decimal places average_transaction_amount = transactions_df[\'TransactionAmount\'].mean() # Display the statistics print(f\\"Total number of unique customers: {total_unique_customers}\\") print(f\\"Total transaction amount: {total_transaction_amount:.2f}\\") print(f\\"Date and time of first transaction: {first_transaction_time}\\") print(f\\"Date and time of last transaction: {last_transaction_time}\\") print(f\\"Average transaction amount: {average_transaction_amount:.2f}\\")"},{"question":"Your task is to implement the `calculate_flights()` function which determines the minimum number of planes needed to transport a specified number of passengers across multiple destinations. Each route has a fixed passenger capacity, and planes can only carry up to a maximum number of passengers at once. # Guidelines - Implement a function `calculate_flights(destinations: Dict[str, int], max_capacity: int) -> int` that takes in: - **destinations**: A dictionary where keys are destination names and values are the number of passengers for each destination. - **max_capacity**: An integer representing the maximum number of passengers a plane can carry. - The function should return an integer representing the minimum number of flights required to transport all passengers to their respective destinations. # Approach For each destination, compute the number of flights needed and sum them up to get the total number of flights. Remember that the number of flights for a destination is the ceiling of the division of the number of passengers by the plane\'s capacity. # Input - **destinations** (Dict[str, int]): A dictionary where keys are destination names and values are integers representing the number of passengers. - **max_capacity** (int): An integer representing the maximum capacity of a plane. # Output - Returns an integer representing the minimum number of flights required. # Example Input: ```python destinations = { \\"New York\\": 350, \\"Los Angeles\\": 275, \\"Chicago\\": 620 } max_capacity = 200 ``` Output: ```python 7 ``` Explanation: - For \\"New York\\", 350 passengers will need 2 flights (350 / 200 = 1.75, rounded up to 2). - For \\"Los Angeles\\", 275 passengers will need 2 flights (275 / 200 = 1.375, rounded up to 2). - For \\"Chicago\\", 620 passengers will need 4 flights (620 / 200 = 3.1, rounded up to 4). Total flights needed = 2 + 2 + 4 = 8. Therefore, the function should return 8.","solution":"import math from typing import Dict def calculate_flights(destinations: Dict[str, int], max_capacity: int) -> int: Determines the minimum number of flights required to transport all passengers across multiple destinations. Args: destinations (Dict[str, int]): Dictionary where keys are destination names and values are the number of passengers. max_capacity (int): Maximum number of passengers a plane can carry at once. Returns: int: Minimum number of flights needed. total_flights = 0 for passengers in destinations.values(): flights = math.ceil(passengers / max_capacity) total_flights += flights return total_flights"},{"question":"You are developing a simple notification tracking system for an app. Each notification has attributes such as `title`, `message`, `timestamp`, `user_id`, and `status`. The status can be \\"unread\\", \\"read\\", or \\"archived\\". Your goal is to write a function named `filter_notifications` that filters notifications based on certain criteria. The function should take three arguments: a list of dictionaries, where each dictionary represents a notification, a `user_id` string to filter notifications specific to that user, and a `status` string to filter notifications by their status. Here\'s an example of the function signature: ```python def filter_notifications(notifications, user_id, status): pass ``` # Example Usage: ```python notifications = [ {\\"title\\": \\"Welcome\\", \\"message\\": \\"Welcome to the app!\\", \\"timestamp\\": \\"2023-01-01T12:00:00Z\\", \\"user_id\\": \\"user_1\\", \\"status\\": \\"unread\\"}, {\\"title\\": \\"Update\\", \\"message\\": \\"Here\'s an app update.\\", \\"timestamp\\": \\"2023-01-02T14:00:00Z\\", \\"user_id\\": \\"user_2\\", \\"status\\": \\"read\\"}, {\\"title\\": \\"Reminder\\", \\"message\\": \\"Don\'t forget to check out new features!\\", \\"timestamp\\": \\"2023-01-03T16:00:00Z\\", \\"user_id\\": \\"user_1\\", \\"status\\": \\"archived\\"}, # Other notifications... ] user_id = \\"user_1\\" status = \\"unread\\" filtered_notifications = filter_notifications(notifications, user_id, status) ``` The `filter_notifications` function should return a list of dictionaries containing only the notifications for the specified `user_id` and `status`. # Requirements: - Use list comprehensions or filter functions to effectively filter the lists. - Ensure that the function returns an empty list if no notifications match the given criteria. - Handle cases where notifications list is empty or doesn\'t contain any matching notifications gracefully.","solution":"def filter_notifications(notifications, user_id, status): Filters notifications based on user_id and status. Args: notifications (list): List of dictionary where each dictionary represents a notification. user_id (str): User ID to filter notifications. status (str): Status to filter notifications. Returns: list: Filtered list of notifications. return [notification for notification in notifications if notification[\\"user_id\\"] == user_id and notification[\\"status\\"] == status]"},{"question":"You are required to implement a function `generate_report` that takes in a dataset and generates a summary report. The function should be able to handle data provided as a `pandas.DataFrame` or a file path to a `csv`, `xlsx`, or `txt` file. The report should include basic statistics, missing value analysis, and unique value counts for each column. Additionally, the function should provide options to save the report as a text file and to exclude specific columns from the report. The function signature is as follows: ```python def generate_report(data, exclude_columns=None, save_to_file=None): ... ``` Parameters: - `data`: The input data, which can either be a `pandas.DataFrame` or a file path to a `csv`, `xlsx`, or `txt` file. - `exclude_columns`: List of columns to exclude from the report (default is None). - `save_to_file`: Optional file path to save the report as a text file (default is None). Returns: - A dictionary containing the summary report with basic statistics, missing value analysis, and unique value counts for each column. # Requirements: - Raise a `ValueError` if the data input is not a `pandas.DataFrame` or a valid file path. - Load the provided file path into a `pandas.DataFrame` if necessary. - Compute basic statistics (mean, median, standard deviation, min, max) for numerical columns. - Compute the count and percentage of missing values for each column. - Compute the number of unique values in each column. - Exclude specified columns from the report. - If `save_to_file` is provided, save the report in a well-formatted text file. # Example: ```python import pandas as pd data = { \'name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\'], \'age\': [25, 30, None, 22], \'gender\': [\'F\', \'M\', \'M\', \'M\'], \'score\': [85.5, 92.3, 88.0, None] } df = pd.DataFrame(data) report = generate_report(df, exclude_columns=[\'gender\'], save_to_file=\'report.txt\') print(report) ``` In this example, the `generate_report` function should return a dictionary containing the summary report for the `df` DataFrame, excluding the \'gender\' column, and save the report as \'report.txt\'. # Additional Information: - You must use the `pandas` library for handling DataFrame operations. - Ensure to properly handle file paths for compatibility across different operating systems. - The text file report should be well-structured for readability.","solution":"import pandas as pd import os def generate_report(data, exclude_columns=None, save_to_file=None): Generate a summary report including basic statistics, missing value analysis, and unique value counts for each column in a pandas DataFrame or a file path. Parameters: - data: Input pandas DataFrame or file path to csv, xlsx, or txt file. - exclude_columns: List of columns to exclude from the report (default is None). - save_to_file: Optional file path to save the report as a text file (default is None). Returns: - Dictionary containing the summary report. # Load data if a file path is provided if isinstance(data, str): if data.endswith(\'.csv\'): df = pd.read_csv(data) elif data.endswith(\'.xlsx\'): df = pd.read_excel(data) elif data.endswith(\'.txt\'): df = pd.read_csv(data, delimiter=\'t\') else: raise ValueError(\\"Unsupported file type. Supported extensions: .csv, .xlsx, .txt\\") elif isinstance(data, pd.DataFrame): df = data else: raise ValueError(\\"Input data must be a pandas DataFrame or a valid file path.\\") # Exclude specified columns if exclude_columns: df = df.drop(columns=exclude_columns) report = {} # Basic Statistics report[\'basic_statistics\'] = df.describe().to_dict() # Missing Values missing_values = df.isnull().sum() missing_percentage = (missing_values / len(df)) * 100 report[\'missing_values\'] = { \'count\': missing_values.to_dict(), \'percentage\': missing_percentage.to_dict() } # Unique Values report[\'unique_values\'] = df.nunique().to_dict() # Save report to file if requested if save_to_file: with open(save_to_file, \'w\') as file: file.write(\'Basic Statistics:n\') file.write(df.describe().to_string()) file.write(\'nnMissing Values:n\') file.write(missing_values.to_string()) file.write(\'nnMissing Values Percentage:n\') file.write(missing_percentage.to_string()) file.write(\'nnUnique Values:n\') file.write(df.nunique().to_string()) return report"},{"question":"Given a list of integers, write a function that returns a list of tuples. Each tuple should contain an integer from the original list and a boolean indicating whether the integer is a prime number. For the purpose of this exercise, a prime number is any integer greater than 1 that is only divisible by 1 and itself. The function should raise the exception for: TypeError if the input is not a list of integers or contains non-integer elements. The function should output: list: A list of tuples, each containing an integer from the input list and a boolean indicating its primality. You should write self-contained code starting with: ``` def is_prime(n): # Helper function to check if a number is prime if n <= 1: return False elif n <= 3: return True elif n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def task_func(input_list): ```","solution":"def is_prime(n): # Helper function to check if a number is prime if n <= 1: return False elif n <= 3: return True elif n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def task_func(input_list): if not isinstance(input_list, list): raise TypeError(\\"Input must be a list\\") for item in input_list: if not isinstance(item, int): raise TypeError(\\"All elements in the list must be integers\\") result = [] for number in input_list: result.append((number, is_prime(number))) return result"},{"question":"You are required to implement a function called `generate_calendar` which takes two parameters `year` (an integer representing a year) and `month` (an integer representing a month), and returns a calendar for the specified month of the given year in a string format. You will be utilizing the `calendar` module to generate this calendar. The function should: 1. Create a calendar for the given month and year. 2. Format this calendar as a string to be returned. 3. Ensure the calendar output is properly aligned, with weeks starting on Monday. 4. Include the appropriate headers for the days of the week (\\"Mo\\", \\"Tu\\", \\"We\\", \\"Th\\", \\"Fr\\", \\"Sa\\", \\"Su\\"). Here is the function signature you need to adhere to: ```python def generate_calendar(year, month): # Your implementation here ``` **Assumptions:** - Both `year` and `month` are valid integers. - You do not need to handle invalid inputs. # Example Usage: ```python print(generate_calendar(2022, 10)) ``` # Expected Output: ```plaintext October 2022 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ``` # Requirements: 1. Correctly use the `calendar.TextCalendar` class from the `calendar` module. 2. Ensure the output string is formatted with appropriate spacing and newlines. # Additional Libraries: You may import `calendar`. Other imports are not allowed for this problem.","solution":"import calendar def generate_calendar(year, month): Generates a formatted string calendar for a given month and year. Parameters: year (int): The year for the calendar. month (int): The month for the calendar. Returns: str: The formatted calendar string for the given month and year. cal = calendar.TextCalendar(firstweekday=0) # 0 means Monday cal_str = cal.formatmonth(year, month) return cal_str"},{"question":"You are required to write a Python function named `common_elements` that finds common elements in three sorted arrays. The function will take three lists `arr1`, `arr2`, and `arr3` as input, which are sorted in non-decreasing order. You should implement the following function signature: ```python def common_elements(arr1, arr2, arr3): ... ``` The function should perform the following tasks: 1. Initialize three pointers, `i`, `j`, and `k`, to zero. These pointers will iterate over the three lists `arr1`, `arr2`, and `arr3`, respectively. 2. Use a while loop to traverse all three arrays simultaneously until any one of the pointers exceeds the length of its corresponding array. 3. At each step in the loop, compare the elements at the current positions of the pointers: - If the values pointed to by `i`, `j`, and `k` are equal, append the value to the result list and increment all three pointers by one. - If the value in `arr1[i]` is the smallest, increment `i`. - If the value in `arr2[j]` is the smallest, increment `j`. - If the value in `arr3[k]` is the smallest, increment `k`. 4. Return the list containing all common elements. The solution should be efficient with a time complexity of O(n), where n is the length of the arrays, assuming they all have similar lengths. Example: ```python arr1 = [1, 5, 10, 20, 40, 80] arr2 = [6, 7, 20, 80, 100] arr3 = [3, 4, 15, 20, 30, 70, 80, 120] print(common_elements(arr1, arr2, arr3)) # Output: [20, 80] ``` Note: If there are no common elements, return an empty list.","solution":"def common_elements(arr1, arr2, arr3): Finds common elements in three sorted arrays. :param arr1: List[int] :param arr2: List[int] :param arr3: List[int] :return: List[int] result = [] i, j, k = 0, 0, 0 while i < len(arr1) and j < len(arr2) and k < len(arr3): if arr1[i] == arr2[j] == arr3[k]: result.append(arr1[i]) i += 1 j += 1 k += 1 elif arr1[i] < arr2[j]: i += 1 elif arr2[j] < arr3[k]: j += 1 else: k += 1 return result"},{"question":"You are tasked with creating a function that manages a simple to-do list application. This function should be able to perform the basic operations of adding tasks, marking tasks as completed, and removing tasks. The input to your function is an object that has the following attributes: - `tasks`: a list of dictionaries, where each dictionary represents a task with the following keys: - `id`: an integer representing the task identifier. - `description`: a string describing the task. - `completed`: a boolean indicating whether the task is completed or not. Your task is to define a function `manage_tasks(ob, operation, task=None)` that modifies the `tasks` list based on the provided operation. The function should: 1. `operation = \\"add\\"`: Add a new task to the `tasks` list. The new task is provided by the `task` parameter, which is a dictionary with `id`, `description`, and `completed` set to `False`. 2. `operation = \\"complete\\"`: Mark the task specified by the `task` parameter\'s `id` as completed. 3. `operation = \\"remove\\"`: Remove the task specified by the `task` parameter\'s `id` from the list of tasks. Here is the signature of the function you need to write: ```python def manage_tasks(ob, operation, task=None): pass ``` Example: ```python class TodoList: def __init__(self): self.tasks = [] ob = TodoList() manage_tasks(ob, \\"add\\", {\\"id\\": 1, \\"description\\": \\"Buy milk\\"}) manage_tasks(ob, \\"add\\", {\\"id\\": 2, \\"description\\": \\"Read a book\\"}) manage_tasks(ob, \\"complete\\", {\\"id\\": 1}) manage_tasks(ob, \\"remove\\", {\\"id\\": 2}) ```","solution":"def manage_tasks(ob, operation, task=None): if operation == \\"add\\": ob.tasks.append({\\"id\\": task[\\"id\\"], \\"description\\": task[\\"description\\"], \\"completed\\": False}) elif operation == \\"complete\\": for t in ob.tasks: if t[\\"id\\"] == task[\\"id\\"]: t[\\"completed\\"] = True break elif operation == \\"remove\\": ob.tasks = [t for t in ob.tasks if t[\\"id\\"] != task[\\"id\\"]] # Example usage: class TodoList: def __init__(self): self.tasks = [] ob = TodoList() manage_tasks(ob, \\"add\\", {\\"id\\": 1, \\"description\\": \\"Buy milk\\"}) manage_tasks(ob, \\"add\\", {\\"id\\": 2, \\"description\\": \\"Read a book\\"}) manage_tasks(ob, \\"complete\\", {\\"id\\": 1}) manage_tasks(ob, \\"remove\\", {\\"id\\": 2})"},{"question":"You are required to implement a class `Rectangle` which represents a rectangle on a 2D plane. The class should support the following functionality: 1. **Initialization**: Create a rectangle given its bottom-left and top-right coordinates. 2. **Area Calculation**: Calculate and return the area of the rectangle. 3. **Perimeter Calculation**: Calculate and return the perimeter of the rectangle. 4. **Point Containment**: Determine if a given point lies within or on the border of the rectangle. # Class Definition Implement the class in Python with the following methods: - `__init__(self, bottom_left: (int, int), top_right: (int, int))`: Initializes the rectangle with its bottom-left and top-right corners. - `area(self) -> float`: Returns the area of the rectangle. - `perimeter(self) -> float`: Returns the perimeter of the rectangle. - `contains(self, point: (int, int)) -> bool`: Returns `True` if the point lies within or on the border of the rectangle, and `False` otherwise. # Constraints: 1. The coordinates given for initialization will always be valid, i.e., the bottom-left corner will have both coordinates less than or equal to the top-right corner\'s. 2. The rectangle sides are always aligned with the coordinate axes (i.e., no rotation). # Example: ```python class Rectangle: def __init__(self, bottom_left: (int, int), top_right: (int, int)): self.bottom_left = bottom_left self.top_right = top_right def area(self) -> float: width = self.top_right[0] - self.bottom_left[0] height = self.top_right[1] - self.bottom_left[1] return width * height def perimeter(self) -> float: width = self.top_right[0] - self.bottom_left[0] height = self.top_right[1] - self.bottom_left[1] return 2 * (width + height) def contains(self, point: (int, int)) -> bool: return (self.bottom_left[0] <= point[0] <= self.top_right[0] and self.bottom_left[1] <= point[1] <= self.top_right[1]) # Example usage rect = Rectangle((1, 1), (4, 5)) print(rect.area()) # Output: 12 print(rect.perimeter()) # Output: 14 print(rect.contains((3, 3))) # Output: True print(rect.contains((0, 0))) # Output: False ``` # Class Signature: ```python class Rectangle: def __init__(self, bottom_left: (int, int), top_right: (int, int)): def area(self) -> float: def perimeter(self) -> float: def contains(self, point: (int, int)) -> bool: ``` Ensure that your code is clean, well-documented, and adheres to best practices for readability and efficiency.","solution":"class Rectangle: def __init__(self, bottom_left: (int, int), top_right: (int, int)): Initializes the rectangle with its bottom-left and top-right corners. :param bottom_left: Tuple containing the x and y coordinates of the bottom-left corner. :param top_right: Tuple containing the x and y coordinates of the top-right corner. self.bottom_left = bottom_left self.top_right = top_right def area(self) -> float: Returns the area of the rectangle. :return: Area of the rectangle. width = self.top_right[0] - self.bottom_left[0] height = self.top_right[1] - self.bottom_left[1] return width * height def perimeter(self) -> float: Returns the perimeter of the rectangle. :return: Perimeter of the rectangle. width = self.top_right[0] - self.bottom_left[0] height = self.top_right[1] - self.bottom_left[1] return 2 * (width + height) def contains(self, point: (int, int)) -> bool: Determines if a given point lies within or on the border of the rectangle. :param point: Tuple containing the x and y coordinates of the point. :return: True if the point lies within or on the border of the rectangle, False otherwise. return (self.bottom_left[0] <= point[0] <= self.top_right[0] and self.bottom_left[1] <= point[1] <= self.top_right[1])"},{"question":"Write a Python function named `count_word_occurrences(text, word)`. The purpose of this function is to count the number of occurrences of a specific word in the given text. The function should perform a case-insensitive count and disregard any punctuation attached to the words. To complete this task, use the following strategies or functions from the standard libraries: - `str.lower` method for converting the text to lowercase. - `str.translate` method to remove punctuation using the `str.maketrans` helper. - `str.split` method to split the text into individual words. # Function Signature: ```python def count_word_occurrences(text: str, word: str) -> int: pass ``` # Parameters: - `text` (str): The input text in which to search for the word. - `word` (str): The specific word to count within the text. # Returns: - `int`: The number of times the word occurs in the text. # Requirements: 1. Convert the entire text to lowercase using `str.lower`. 2. Remove punctuation from the text using `str.translate` and `str.maketrans`. 3. Split the text into words using `str.split`. 4. Perform a case-insensitive comparison of each word in the text to count occurrences of the given word. # Example: Suppose the text is \\"Hello, world! Hello, everyone. hello there.\\" ```python count_word_occurrences(\\"Hello, world! Hello, everyone. hello there.\\", \\"hello\\") ``` Output: ``` 3 ``` If the word to count is \\"world\\": ```python count_word_occurrences(\\"Hello, world! Hello, everyone. hello there.\\", \\"world\\") ``` Output: ``` 1 ```","solution":"def count_word_occurrences(text: str, word: str) -> int: Counts the number of occurrences of a specific word in the given text. This count is case-insensitive and ignores any punctuation attached to the words. Parameters: text (str): The input text in which to search for the word. word (str): The specific word to count within the text. Returns: int: The number of times the word occurs in the text. # Convert text to lowercase text = text.lower() word = word.lower() # Remove punctuation punctuation = str.maketrans(\'\', \'\', \'!\\"#%&\'()*+,-./:;<=>?@[]^_`{|}~\') text = text.translate(punctuation) # Split text into words words = text.split() # Count occurrences count = words.count(word) return count"},{"question":"You are assigned to implement a function named `process_scores` that reads a CSV file named `student_scores.csv` containing students\' scores for different subjects. The function should calculate the average score for each subject and the overall average score across all subjects and students. The CSV file is structured as follows: ``` Student,Math,Science,English John,85,90,78 Alice,92,88,85 Bob,78,74,80 ``` Your function should: 1. Read the CSV file and parse its content. 2. Calculate the average score for each subject. 3. Calculate the overall average score across all subjects and students. The function should return a tuple containing: 1. A dictionary where keys are subject names and values are their corresponding average scores. 2. The overall average score as a float. Use Python\'s built-in `csv` module for reading the CSV file. Here is the signature for the function: ```python def process_scores() -> tuple: # Your code here ``` **Example** Given the following content in `student_scores.csv`: ``` Student,Math,Science,English John,85,90,78 Alice,92,88,85 Bob,78,74,80 ``` The expected output of `process_scores()` would be: ```python ( { \\"Math\\": 85.0, \\"Science\\": 84.0, \\"English\\": 81.0 }, 83.33333333333333 ) ``` **Constraints**: - Assume that the first row always contains the headers and the number of entries in each row is consistent. - Scores are integers ranging from 0 to 100. - There is at least one student and one subject in the CSV file.","solution":"import csv def process_scores() -> tuple: Reads a CSV file named \'student_scores.csv\' and calculates the average score for each subject and the overall average score. Returns: - Dictionary with subject names as keys and their average scores as values. - Overall average score as a float. with open(\'student_scores.csv\', mode=\'r\', newline=\'\') as file: csv_reader = csv.DictReader(file) subjects = csv_reader.fieldnames[1:] # Skip the first column which is \'Student\' subject_totals = {subject: 0 for subject in subjects} total_scores = 0 student_count = 0 for row in csv_reader: student_count += 1 for subject in subjects: score = int(row[subject]) subject_totals[subject] += score total_scores += score # Calculate average scores subject_averages = {subject: total / student_count for subject, total in subject_totals.items()} overall_average = total_scores / (student_count * len(subjects)) return (subject_averages, overall_average)"},{"question":"Given a list of strings containing information about employees (each string follows the format \\"Name-Age-Department\\"), create a function `analyze_employee_data(employee_list, department)` that takes in the employee list and a department name as input and returns a summary of the average age, the number of employees, and the list of employee names in the specified department. **Requirements:** 1. The input list, `employee_list`, contains employee details formatted as \\"Name-Age-Department\\". 2. The function should filter out the employees belonging to the specified department. 3. Compute the average age of the employees in the specified department. 4. Return a dictionary containing the average age (rounded to 2 decimal places), the total number of employees, and a list of names of these employees in the specified department. 5. If the department does not have any employees, return a dictionary with an average age of 0.0, a count of 0, and an empty list of names. **Function Signature:** ```python def analyze_employee_data(employee_list, department): pass ``` **Example Usage:** ```python # Employee data example employee_list = [ \\"Alice-30-Sales\\", \\"Bob-24-HR\\", \\"Charlie-34-Sales\\", \\"David-40-Engineering\\", \\"Eve-29-HR\\", \\"Frank-50-Sales\\" ] # Analyze employee data for \'Sales\' department print(analyze_employee_data(employee_list, \'Sales\')) # Output: {\'average_age\': 38.0, \'employee_count\': 3, \'employee_names\': [\'Alice\', \'Charlie\', \'Frank\']} # Analyze employee data for \'HR\' department print(analyze_employee_data(employee_list, \'HR\')) # Output: {\'average_age\': 26.5, \'employee_count\': 2, \'employee_names\': [\'Bob\', \'Eve\']} # Analyze employee data for \'Marketing\' department which has no employees in the list print(analyze_employee_data(employee_list, \'Marketing\')) # Output: {\'average_age\': 0.0, \'employee_count\': 0, \'employee_names\': []} ```","solution":"def analyze_employee_data(employee_list, department): Analyzes employee data for a specified department and returns average age, count, and list of names. Parameters: employee_list (list of str): List containing employee information in the format \\"Name-Age-Department\\". department (str): The department to filter and analyze. Returns: dict: A dictionary with keys \'average_age\', \'employee_count\', \'employee_names\'. department_employees = [emp for emp in employee_list if emp.split(\'-\')[-1] == department] if not department_employees: return {\'average_age\': 0.0, \'employee_count\': 0, \'employee_names\': []} total_age = 0 employee_names = [] for emp in department_employees: name, age, dept = emp.split(\'-\') total_age += int(age) employee_names.append(name) average_age = round(total_age / len(department_employees), 2) return {\'average_age\': average_age, \'employee_count\': len(department_employees), \'employee_names\': employee_names}"},{"question":"In the field of data structures, a stack is a linear collection that follows the Last In First Out (LIFO) principle. One important operation performed on a stack is to reverse the elements of the stack. Your task is to implement a function called `reverse_stack` that takes a stack as input and reverses its elements. For simplicity, you can assume the stack is represented as a Python list, where the end of the list represents the top of the stack. Function Signature: ```python def reverse_stack(stack: list) -> list: ``` Inputs: - **stack** (list): A list representing the stack, where the end of the list is the top of the stack. Output: - **reversed_stack** (list): The stack with its elements reversed. You are not allowed to use any additional data structures like another list, queues, or built-in Python list methods (such as `reverse`, `pop`, or `append`) to directly reverse the list. Hints: - You can use recursion to solve this problem. - Create a helper function that can insert elements at the bottom of the stack. Write the function `reverse_stack` that follows the above description and reverses the elements of the stack using the described constraints.","solution":"def insert_at_bottom(stack, item): if not stack: stack.append(item) else: temp = stack.pop() insert_at_bottom(stack, item) stack.append(temp) def reverse_stack(stack): if stack: temp = stack.pop() reverse_stack(stack) insert_at_bottom(stack, temp) return stack"},{"question":"Your task is to write a function called `next_power_of_two` that finds the smallest power of two greater than or equal to a given non-negative integer. # Requirements: 1. **Function Signature**: ```python def next_power_of_two(value: int) -> int ``` 2. **Input**: - `value`: A non-negative integer. 3. **Output**: - Return an integer representing the smallest power of two greater than or equal to the given `value`. # Example: ```python # Example 1 next_power_of_two(0) => 1 # Explanation: The smallest power of two greater than or equal to 0 is 1. # Example 2 next_power_of_two(5) => 8 # Explanation: The smallest power of two greater than or equal to 5 is 8 (2^3). # Example 3 next_power_of_two(16) => 16 # Explanation: 16 is already a power of two (2^4). # Example 4 next_power_of_two(31) => 32 # Explanation: The smallest power of two greater than or equal to 31 is 32 (2^5). ``` # Constraints: - The input integer will be within the range of a standard 32-bit signed integer. - Pay careful attention to handling edge cases, such as the smallest possible inputs.","solution":"import math def next_power_of_two(value: int) -> int: Returns the smallest power of two greater than or equal to the given value. if value < 1: return 1 return 1 << (value - 1).bit_length()"},{"question":"You are tasked with creating a function named `reverse_substrings` which takes a single string as an input and returns a new string with all substrings separated by spaces reversed. A substring is defined as any sequence of characters bounded by spaces in the input string. The function should follow these specific steps: 1. Split the input string into a list of substrings. 2. Reverse each substring individually. 3. Join the reversed substrings back together with spaces to form the output string. You must handle edge cases such as multiple spaces between words, leading or trailing spaces, and an input string consisting solely of one long substring without any spaces. # Function Signature ```python def reverse_substrings(s: str) -> str: # implementation here ``` # Example Usage ```python input_string = \\"hello world this is a test\\" output_string = reverse_substrings(input_string) print(output_string) # Expected: \\"olleh dlrow siht si a tset\\" input_string = \\" leading and trailing spaces \\" output_string = reverse_substrings(input_string) print(output_string) # Expected: \\"gnidael dna gniliart secaps\\" ``` # Requirements - Do not use Python\'s built-in `reversed` function. - Handle multiple spaces between words and at the edges of the string correctly. - Ensure the output preserves the same spacing as the input.","solution":"def reverse_substrings(s: str) -> str: This function takes a string s and returns a new string with all substrings separated by spaces reversed while maintaining the original spacing. # Split the input string into substrings separated by spaces substrings = s.split(\' \') # Function to reverse a single word def reverse_word(word): reversed_word = [] for char in word: reversed_word.insert(0, char) return \'\'.join(reversed_word) # Reverse each substring individually reversed_substrings = [reverse_word(substring) for substring in substrings] # Join the reversed substrings with spaces return \' \'.join(reversed_substrings)"},{"question":"Create a function that calculates the moving average of a specified column in a pandas DataFrame. The function should take two arguments: the DataFrame and an integer representing the window size. The function should add a new column to the DataFrame, where each value is the moving average of the previous values in the specified column, calculated over the given window size. The new column should be named with the original column name suffixed by \'_moving_avg\'. If the specified column is not found in the DataFrame, the function should raise a KeyError. Ensure the function handles both integer and float data types within the specified column, and returns the DataFrame after adding the new moving average column. The function should output: pd.DataFrame: The original DataFrame with an additional column for the moving average. You should write self-contained code starting with: ``` import pandas as pd def calculate_moving_average(df, column, window_size): ```","solution":"import pandas as pd def calculate_moving_average(df, column, window_size): Calculate the moving average of a specified column in a DataFrame. Parameters: df (pd.DataFrame): The input DataFrame. column (str): The name of the column for which to calculate the moving average. window_size (int): The window size to use for calculating the moving average. Returns: pd.DataFrame: The original DataFrame with a new column for the moving average. Raises: KeyError: If the specified column is not found in the DataFrame. if column not in df.columns: raise KeyError(f\\"Column \'{column}\' not found in DataFrame.\\") df[f\\"{column}_moving_avg\\"] = df[column].rolling(window=window_size, min_periods=1).mean() return df"},{"question":"# Objective: In this problem, you need to implement a function that calculates the Levenshtein distance between two given strings. The Levenshtein distance is a measure of the similarity between two strings, defined as the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one string into the other. # Context: The Levenshtein distance is a widely used metric in various fields such as bioinformatics, spell checking, and natural language processing. It allows comparing the similarity of two sequences by quantifying the differences between them. # Requirements: - Implement the function `levenshtein_distance(s1, s2)`. - `s1`: A string representing the first sequence. - `s2`: A string representing the second sequence. # Specific Tasks: 1. **Create a 2D list (matrix) to store the Levenshtein distances between all prefixes of `s1` and `s2`.** 2. **Initialize the matrix with appropriate values, so that it represents empty string comparisons.** 3. **Use a nested loop to fill in the matrix based on the minimum edit operations required to change prefixes of `s1` into prefixes of `s2`.** 4. **Return the Levenshtein distance as the value in the bottom-right cell of the matrix.** # Constraints: - The function should handle up to 1000 characters long for each input string. - Your implementation should have a time complexity of O(m * n), where `m` and `n` are the lengths of `s1` and `s2`, respectively. # Example Execution: ```python def levenshtein_distance(s1, s2): # Your implementation here pass # Example data s1 = \\"kitten\\" s2 = \\"sitting\\" # Function call distance = levenshtein_distance(s1, s2) print(distance) # Output: 3 ``` In this example, the Levenshtein distance between \\"kitten\\" and \\"sitting\\" is 3, meaning three edits (substitution of \'k\' with \'s\', substitution of \'e\' with \'i\', and insertion of \'g\') are required to transform \\"kitten\\" into \\"sitting\\".","solution":"def levenshtein_distance(s1, s2): Returns the Levenshtein distance between two strings s1 and s2. m, n = len(s1), len(s2) # Edge case: if one of the strings is empty if m == 0: return n if n == 0: return m # Create a 2D list (matrix) to store the distances dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the matrix with base cases for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill in the matrix with the Levenshtein distances for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: cost = 0 else: cost = 1 dp[i][j] = min(dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + cost) # Substitution # Return the final value, which is the distance return dp[m][n]"},{"question":"You are given the task of determining whether a given list of integers can be split into two sublists with an equal sum. More formally, you have to check if it\'s possible to partition the list into two non-empty subsets such that the sum of the elements in both subsets is the same. Your task is to implement a function `can_partition(nums)` that returns `True` if the list can be partitioned into two subsets with an equal sum, otherwise `False`. **Function Signature:** ```python def can_partition(nums): ``` **Parameters:** - `nums` (list of integers): A list of integers to be partitioned. **Returns:** - `bool`: Returns `True` if the list can be partitioned into two subsets with equal sum, otherwise `False`. # Constraints - All elements in the list are positive integers. - The length of the list is at most 100. **Example:** ```python print(can_partition([1, 5, 11, 5])) # Returns: True because [1, 5, 5] and [11] both sums to 11 print(can_partition([1, 2, 3, 5])) # Returns: False because it cannot be partitioned into equal sum subsets ``` # Hints: - Consider using a dynamic programming approach to solve this problem. - You can use a 2D boolean array where dp[i][j] means whether a subset with sum j can be achieved using the first i numbers. - You might only need a 1D array to save space by iterating backwards when ed updating the dp array.","solution":"def can_partition(nums): Returns True if the nums list can be partitioned into two subsets with equal sum, otherwise returns False. total_sum = sum(nums) # If the total sum is odd, we cannot split it into two equal parts if total_sum % 2 != 0: return False # We need to find a subset with sum equal to total_sum // 2 target = total_sum // 2 # Initialize a dp array to keep track of possible sums dp = [False] * (target + 1) dp[0] = True # Zero sum is always possible for num in nums: # Update DP array from back to avoid reusing the same element for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"Write a function `find_contiguous_blocks` that identifies contiguous blocks of digits within a string and determines their respective lengths. This function will segment digits into groups wherever they appear consecutively, without any intervening non-digit characters. # Details: 1. **Function Signature**: ```python def find_contiguous_blocks(text: str) -> list: ``` 2. **Parameters**: - `text` (str): The input string containing a mix of digits and non-digit characters. 3. **Output**: - The function should return a list of tuples, where each tuple contains: - The contiguous block of digits (as a string). - The length of this block (as an integer). 4. **Requirements**: - The function must use the `re.findall` method from the `re` library to identify groups of consecutive digits. - Overlapping groups should not be counted more than once. # Example: ```python text = \\"abc123def45gh6789ij0\\" output = find_contiguous_blocks(text) print(output) ``` Expected Sample Output: ``` [ (\'123\', 3), (\'45\', 2), (\'6789\', 4), (\'0\', 1) ] ``` # Additional Notes: - If there are no digits in the given text, the function should return an empty list. - Ensure the input string is processed efficiently to handle cases with large texts.","solution":"import re def find_contiguous_blocks(text: str) -> list: Identifies contiguous blocks of digits within a string and determines their respective lengths. Parameters: text (str): The input string containing a mix of digits and non-digit characters. Returns: list: A list of tuples, where each tuple contains a block of digits and its length. # Find all contiguous blocks of digits using `re.findall`. digit_blocks = re.findall(r\'d+\', text) # Create a list of tuples (block, length). result = [(block, len(block)) for block in digit_blocks] return result"},{"question":"Develop a function to translate a sequence of numerical coordinates into a well-formed SVG path. Your task is to write a Python function named `coordinates_to_svg_path` that takes a list of tuples, where each tuple represents a point (x, y) in 2D space, and outputs a string corresponding to the SVG path notation. To achieve this: 1. **Initialize the Path**: Begin the SVG path with the \\"Move To\\" command (`M`) using the coordinates of the first point. 2. **Construct the Path**: Sequentially append \\"Line To\\" commands (`L`) for each of the remaining points in the list. 3. **Return the Path**: Output the complete SVG path string. For example, given the coordinates `[(10, 10), (20, 20), (30, 15)]`, the resulting SVG path should be `\\"M 10 10 L 20 20 L 30 15\\"`. Here is a template of the function for you to complete: ```python def coordinates_to_svg_path(coordinates): if not coordinates: return \\"\\" # 1. Initialize the path with the \\"Move To\\" command path = f\\"M {coordinates[0][0]} {coordinates[0][1]}\\" # 2. Append \\"Line To\\" commands for the remaining points for x, y in coordinates[1:]: path += f\\" L {x} {y}\\" # 3. Return the complete SVG path string return path # Example usage coordinates = [(10, 10), (20, 20), (30, 15)] svg_path = coordinates_to_svg_path(coordinates) print(svg_path) # Output: \\"M 10 10 L 20 20 L 30 15\\" ```","solution":"def coordinates_to_svg_path(coordinates): if not coordinates: return \\"\\" # 1. Initialize the path with the \\"Move To\\" command path = f\\"M {coordinates[0][0]} {coordinates[0][1]}\\" # 2. Append \\"Line To\\" commands for the remaining points for x, y in coordinates[1:]: path += f\\" L {x} {y}\\" # 3. Return the complete SVG path string return path"},{"question":"You are given a string representing a mathematical expression in infix notation. Your task is to convert this infix expression into its corresponding postfix (Reverse Polish Notation) notation. The expression will only include non-negative integers and the operators `+`, `-`, `*`, `/` with standard precedence rules (i.e., `*` and `/` take precedence over `+` and `-`). Write a Python function `infix_to_postfix(expression: str) -> str` that performs the conversion. Your function should use the following algorithm: 1. Initialize an empty stack for operators and an output list for the resulting postfix expression. 2. Iterate through each character in the expression: - If the character is an operand (i.e., a digit), append it to the output list. - If the character is an operator, pop all operators from the stack with greater or equal precedence and append them to the output list. Then push the current operator onto the stack. - If an open parenthesis `(` is encountered, push it onto the stack. - If a closing parenthesis `)` is encountered, pop from the stack and append to the output list until an open parenthesis `(` is encountered. 3. After processing all characters in the expression, pop any remaining operators from the stack and append them to the output list. The function should return the postfix expression as a string with each token separated by a space. # Example: ```python print(infix_to_postfix(\\"3 + 5 * 2 - ( 8 / 4 )\\")) # Output: \\"3 5 2 * + 8 4 / -\\" ``` # Notes: - Assume that the input expression is a valid infix expression. - Do not handle any errors or invalid inputs. - The operators `+` and `-` have lower precedence than `*` and `/`. - Use a space to separate the tokens in the resulting postfix expression.","solution":"def infix_to_postfix(expression: str) -> str: precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} stack = [] output = [] tokens = expression.split() for token in tokens: if token.isdigit(): output.append(token) elif token in precedence: while stack and stack[-1] in precedence and precedence[stack[-1]] >= precedence[token]: output.append(stack.pop()) stack.append(token) elif token == \'(\': stack.append(token) elif token == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() while stack: output.append(stack.pop()) return \' \'.join(output)"},{"question":"You are asked to write a function named `unique_sums` that takes a list of integers as input and outputs a list of all unique sums that can be created by adding any two different integers from the list. To achieve this task, you must iterate through all possible pairs of integers in the input list. Ensure that the output list contains only unique sums and is sorted in ascending order. Here are the detailed requirements: 1. The function should be named `unique_sums`. 2. The input will be a single list of integers. 3. Your function should: - Iterate through all possible pairs of integers in the list. - Calculate the sum for each unique pair. - Ensure no duplicate sums are included in the output. - Return the list of unique sums sorted in ascending order. **Example:** ```python print(unique_sums([1, 3, 5, 7])) ``` **Output:** ``` [4, 6, 8, 10, 12] ``` In this example, the unique pairs of integers are (1, 3), (1, 5), (1, 7), (3, 5), (3, 7), and (5, 7). Their sums are 4, 6, 8, 10, 10, and 12. After removing duplicates and sorting, the final list of unique sums is [4, 6, 8, 10, 12]. **Hints:** - Use a set to store sums and avoid duplicates. - Use nested loops to generate all possible pairs. - Convert the set to a sorted list before returning the result.","solution":"def unique_sums(nums): Returns a sorted list of all unique sums that can be created by adding any two different integers from the list. sums_set = set() length = len(nums) for i in range(length): for j in range(i + 1, length): sums_set.add(nums[i] + nums[j]) return sorted(sums_set)"},{"question":"Given a string containing a series of positive integers separated by spaces, write a function `find_missing_number(sequence: str) -> int` that finds and returns the missing number in the sequence. If there is no missing number or the sequence is invalid, the function should return `-1`. The sequence is supposed to have no duplicates, and the numbers should be in a consecutive order starting from 1. Function Signature ```python def find_missing_number(sequence: str) -> int: pass ``` Parameters: - `sequence`: A string containing a series of positive integers separated by spaces. Returns: - An integer representing the missing number in the sequence. If the sequence is invalid or no number is missing, returns `-1`. Example: ```python print(find_missing_number(\\"1 2 4 5\\")) # Output: 3 print(find_missing_number(\\"1 2 3\\")) # Output: -1 print(find_missing_number(\\"2 3 4 5\\")) # Output: 1 print(find_missing_number(\\"1 2 3 4 5\\")) # Output: -1 print(find_missing_number(\\"1 3 4 5\\")) # Output: 2 print(find_missing_number(\\"a b c\\")) # Output: -1 ``` Requirements: - Assume that the sequence will contain at least two elements. - The function should handle sequences with up to `1000` integers efficiently. - If the input string consists of any invalid characters (non-digit or non-space), return `-1`.","solution":"def find_missing_number(sequence: str) -> int: Finds the missing number in a given sequence of positive integers. If the sequence is invalid or no number is missing, returns -1. try: # Split the sequence by spaces and convert to a list of integers number_list = list(map(int, sequence.split())) # Check for invalid conditions if len(number_list) != len(set(number_list)): # Check for duplicates return -1 # Sequence must start at 1 and increase consecutively max_num = max(number_list) # Create a set of numbers that should be in the sequence expected_numbers = set(range(1, max_num + 1)) actual_numbers = set(number_list) # Find the missing number missing_numbers = expected_numbers - actual_numbers # Determine the result based on how many numbers are missing if len(missing_numbers) == 0: return -1 # No missing number elif len(missing_numbers) == 1: return missing_numbers.pop() else: return -1 # More than one number missing, invalid sequence except ValueError: # If ValueError occurs during conversion, invalid sequence return -1"},{"question":"You are given a list of integers representing the heights of contiguous buildings in a city skyline. Your task is to write a function that calculates the maximum rectangular area of the skyline that can be formed using these building heights. Each building has a width of 1 unit. The function must be named `max_skyline_area`, and it should take the following parameter: - `heights`: A list of integers representing the heights of the buildings. The function should return an integer representing the maximum rectangular area that can be formed in the skyline. Use a time-efficient algorithm to ensure optimal performance, aiming for a solution with a complexity of O(n). Here is the expected behavior of the `max_skyline_area` function: 1. Traverse through the list of building heights to determine possible rectangular areas. 2. Use an efficient approach, such as a stack-based algorithm, to keep track of the building heights and their positions. **Requirements:** - Ensure the function handles edge cases, such as an empty list of building heights or a list with a single building. - The function should have a time complexity of O(n). **Example:** ```python # List of building heights heights = [2, 1, 5, 6, 2, 3] # Expected output: 10 # Explanation: The maximum rectangular area that can be formed is 10 (using heights 5 and 6). ``` ```python def max_skyline_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area ```","solution":"def max_skyline_area(heights): Calculates the maximum rectangular area of the skyline that can be formed using the given building heights. :param heights: A list of integers representing the heights of the buildings. :return: An integer representing the maximum rectangular area that can be formed. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are responsible for creating a function that simulates the functionality of an elevator system within a building. The elevator can respond to requests to go up or down to different floors and must handle these requests in an efficient manner. Specifically, you need to write a function called `operateElevator` that adheres to the following specifications: 1. Function signature: ```python def operateElevator(current_floor, requests, max_floor, min_floor): ``` 2. Parameters: - `current_floor` (int): The floor where the elevator is currently located. - `requests` (list of ints): A list of floor numbers where people have requested the elevator to stop. - `max_floor` (int): The highest floor in the building. - `min_floor` (int): The lowest floor in the building. 3. Returns: - An updated `current_floor` (int) after handling one request, with the list `requests` updated to reflect the remaining requests. 4. Constraints: - The elevator can only move one floor at a time (up or down) and must move towards a requested floor. - If multiple requests are present, the elevator should prioritize the closest request in the direction it is currently moving. - The elevator should not surpass the `max_floor` or go below the `min_floor`. # Example Usage - Given the elevator\'s initial position and a list of floor requests, compute the elevator\'s new position and updated requests after servicing one request. ```python current_floor, updated_requests = operateElevator(3, [1, 4, 6], 10, 1) print(current_floor, updated_requests) ``` Ensure to handle the selection and processing of the closest floor request efficiently to simulate the elevator\'s movement properly.","solution":"def operateElevator(current_floor, requests, max_floor, min_floor): Simulates the operation of an elevator by moving it one step toward the closest requested floor. :param current_floor: Current floor where the elevator is located. :param requests: List of floor numbers where the elevator has been requested to stop. :param max_floor: The highest floor in the building. :param min_floor: The lowest floor in the building. :return: Tuple containing the updated current floor and the remaining requests. if not requests: # If there are no requests, the elevator stays at the current floor. return current_floor, requests # Find the closest request closest_request = min(requests, key=lambda x: abs(x - current_floor)) if closest_request > current_floor: new_floor = min(current_floor + 1, max_floor) elif closest_request < current_floor: new_floor = max(current_floor - 1, min_floor) else: # When the elevator is already at the requested floor new_floor = current_floor requests.remove(closest_request) # Move towards the closest request floor if not already there if new_floor != closest_request: new_requests = requests else: new_requests = [req for req in requests if req != closest_request] return new_floor, new_requests"},{"question":"You have been provided with a list of integers that might represent daily temperatures. You need to write a function `find_unique_temperatures(temperatures)` that returns a list of unique temperatures in ascending order. Your function should: - Take in a list of integers `temperatures`, representing daily temperatures. - Remove any duplicate temperatures from the list. - Return the list of unique temperatures sorted in ascending order. Here is the signature of the function you need to implement: ```python def find_unique_temperatures(temperatures): # Your code here ``` **Example:** ```python listen_temps = [30, 20, 20, 30, 25, 25, 25, 20, 15] print(find_unique_temperatures(listen_temps)) ``` **Output:** ``` [15, 20, 25, 30] ```","solution":"def find_unique_temperatures(temperatures): Returns a list of unique temperatures sorted in ascending order. return sorted(set(temperatures))"},{"question":"You are tasked with designing a simple word guessing game similar to \\"Hangman.\\" The game will randomly choose a word from a predefined list, and the player will attempt to guess the word by suggesting letters within a certain number of attempts. If the player guesses a letter that is in the word, all occurrences of that letter are revealed. Otherwise, they lose one attempt. The game continues until the player either guesses the word or runs out of attempts. You will write a function called `word_guess_game` that will simulate this game. The function will take in no arguments and will use the `random.choice` function to select a word from a predefined list. The game should be case insensitive, meaning \'A\' and \'a\' are considered the same. Here are the core requirements for the `word_guess_game` function: 1. Define a list of words from which the game will randomly select one word. 2. Prompt the player to guess a letter while displaying the current state of the word with unguessed letters as underscores (e.g., \'_ a _ a _ \' for \\"apple\\" if \'a\' has been guessed). 3. Check if the guessed letter is in the word, and reveal all instances of the letter if it is correct. 4. Deduct an attempt if the guessed letter is not in the word. 5. Display the player\'s progress and remaining attempts after each guess. 6. End the game when the word is guessed completely or when the player runs out of attempts, and display an appropriate win/lose message. You may use the `time.sleep` function to add a brief pause (e.g., 1 second) after each guess for clarity.","solution":"import random import time words_list = [\\"python\\", \\"javascript\\", \\"hangman\\", \\"programming\\", \\"debugging\\"] def word_guess_game(): word = random.choice(words_list).lower() # Select a random word and convert it to lowercase word_progress = [\'_\'] * len(word) # Create a list to track the letters guessed correctly guessed_letters = set() # Set to track letters that have been guessed attempts = 6 # Number of attempts player has def display_progress(): print(\\"Current Progress: \\" + \' \'.join(word_progress)) print(f\\"Remaining attempts: {attempts}\\") print(\\"Welcome to the Word Guess Game!\\") display_progress() while attempts > 0 and \'_\' in word_progress: guess = input(\\"Guess a letter: \\").lower() # Read the player\'s guess and convert it to lowercase if len(guess) != 1 or not guess.isalpha(): print(\\"Please guess a single alphabet character.\\") continue if guess in guessed_letters: print(\\"You have already guessed that letter.\\") continue guessed_letters.add(guess) if guess in word: # Update word progress for idx, char in enumerate(word): if char == guess: word_progress[idx] = guess print(\\"Good guess!\\") else: attempts -= 1 print(\\"Incorrect guess.\\") display_progress() time.sleep(1) # Pause for clarity if \'_\' not in word_progress: print(\\"Congratulations! You\'ve guessed the word:\\", word) else: print(\\"Sorry, you\'ve run out of attempts. The word was:\\", word)"},{"question":"Write a function to merge two dictionaries such that if a key exists in both dictionaries, their values (assumed to be lists) are concatenated. If a key only exists in one dictionary, its value is retained as is. Return the merged dictionary as a JSON formatted string. This will test the candidate\'s ability to manipulate dictionaries, handle merging with conditions, and use JSON for output formatting. The function should output with: str: A JSON string representing the merged dictionary. You should write self-contained code starting with: ``` import json def merge_dicts(dict1, dict2): ```","solution":"import json def merge_dicts(dict1, dict2): Merge two dictionaries such that if a key exists in both dictionaries, their values (assumed to be lists) are concatenated. If a key only exists in one dictionary, its value is retained as is. Returns the merged dictionary as a JSON formatted string. merged_dict = {} for key in dict1.keys() | dict2.keys(): if key in dict1 and key in dict2: merged_dict[key] = dict1[key] + dict2[key] elif key in dict1: merged_dict[key] = dict1[key] else: merged_dict[key] = dict2[key] return json.dumps(merged_dict)"},{"question":"You need to create a function `evaluate_polynomial` that takes two arguments: 1. A list of coefficients (`coeffs`) representing the polynomial coefficients in decreasing order of powers. 2. A value `x` at which to evaluate the polynomial. The function should accomplish the following tasks: 1. Calculate the value of the polynomial at the given `x`. 2. Return the computed value. For example, if `coeffs` is `[3, 0, -2, 1]` and `x` is `2`, the polynomial represented is (3x^3 - 2x + 1). The function should compute the value of this polynomial at `x = 2` and return it. Here is the signature of the function you need to implement: ```python def evaluate_polynomial(coeffs, x): # Your code here ```","solution":"def evaluate_polynomial(coeffs, x): Evaluates a polynomial with given coefficients at the value x. Args: coeffs (list): List of coefficients representing the polynomial, in decreasing order of powers. x (float): The value at which to evaluate the polynomial. Returns: float: The polynomial value at x. result = 0 n = len(coeffs) for i in range(n): result += coeffs[i] * (x ** (n - 1 - i)) return result"},{"question":"You are asked to write a Python function to simulate and visualize a simple random walk in one dimension. This task will help you become familiar with generating random numbers, handling lists or numpy arrays, and using matplotlib for plotting. Write a function named `random_walk_plot` with the following signature: ```python def random_walk_plot(steps, seed): ``` This function should: 1. Initialize the random number generator with the provided `seed` to ensure reproducibility. 2. Generate a 1D random walk where: - The random walk starts at position 0. - Each step is either +1 or -1, chosen randomly with equal probability. - The total number of steps is specified by the `steps` parameter. 3. Create a time series visualization of the random walk using Matplotlib, displaying the position on the y-axis and the step number on the x-axis. 4. Save the plot as an image file named `random_walk.png` without displaying it on the screen. Your function should return: - A list or numpy array containing the positions at each step of the random walk. For example, calling `random_walk_plot(100, 42)` might generate a plot saved as `random_walk.png` and return an array of 101 positions.","solution":"import numpy as np import matplotlib.pyplot as plt def random_walk_plot(steps, seed): Simulates a 1D random walk and plots the results. Parameters: steps (int): The number of steps in the random walk. seed (int): The seed for the random number generator. Returns: list: The positions at each step of the random walk. np.random.seed(seed) steps_list = np.random.choice([-1, 1], size=steps) positions = np.cumsum(steps_list) positions = np.insert(positions, 0, 0) # Starting position is 0 plt.figure(figsize=(10, 6)) plt.plot(range(steps + 1), positions, marker=\'o\') plt.title(\'1D Random Walk\') plt.xlabel(\'Step Number\') plt.ylabel(\'Position\') plt.grid(True) plt.savefig(\'random_walk.png\') plt.close() return positions"},{"question":"You are tasked with writing a function `process_string` that performs several operations on a given input string `s`. The specific operations that need to be carried out are as follows: 1. Convert all characters to uppercase. 2. Reverse the string. 3. Replace all vowels (`A`, `E`, `I`, `O`, `U`) with the character `\'*\'`. 4. Find the longest word in the string. If there are multiple words with the same length, return the first one. Your function should return a dictionary with the results of these operations as follows: - The key `\'uppercase\'` should map to the uppercase string. - The key `\'reversed\'` should map to the reversed string. - The key `\'replaced_vowels\'` should map to the string with vowels replaced. - The key `\'longest_word\'` should map to the longest word in the original string. **Function Signature:** ```python def process_string(s: str) -> dict: pass ``` **Example:** ```python s = \\"hello world, welcome to the universe\\" output = process_string(s) print(output) # Output should be: {\'uppercase\': \'HELLO WORLD, WELCOME TO THE UNIVERSE\', \'reversed\': \'esrevinu eht ot emoclew ,dlrow olleh\', \'replaced_vowels\': \'h*ll* w*rld, w*lc*m* t* th* *n*v*rs*\', \'longest_word\': \'universe\'} ``` **Constraint:** - The input string `s` will only contain alphabets, spaces, and punctuation marks.","solution":"def process_string(s: str) -> dict: Perform several operations on the input string s. # Convert all characters to uppercase uppercase_str = s.upper() # Reverse the string reversed_str = s[::-1] # Replace all vowels with \'*\' vowels = \\"AEIOUaeiou\\" replaced_vowels_str = \'\'.join(\'*\' if char in vowels else char for char in s) # Find the longest word words = s.split() longest_word = max(words, key=len) if words else \'\' return { \'uppercase\': uppercase_str, \'reversed\': reversed_str, \'replaced_vowels\': replaced_vowels_str, \'longest_word\': longest_word }"},{"question":"In this exercise, you will create a function that processes weather data from an open-source API to display the highest temperature recorded on a given date for a specified city. The API you can use for this data is the OpenWeatherMap API. Requirements: 1. **API Information**: You will need to sign up for a free API key at [OpenWeatherMap](https://home.openweathermap.org/users/sign_up) if you do not already have one. 2. **Python Libraries**: You must use the following libraries: - `requests` for sending HTTP requests. - `pandas` for creating and manipulating dataframes. - `datetime` for date manipulations. 3. **Function Name**: The function you need to implement is called `get_highest_temperature`. 4. **Function Parameters**: - `city` (str): The name of the city for which you want to retrieve the weather data. - `date` (str): The date in \\"YYYY-MM-DD\\" format for which you want to get the highest temperature. 5. **Function Task**: The function should: - Fetch the weather data for the specified city using the OpenWeatherMap API. - Parse the JSON response to extract temperature data for each hour of the specified date. - Identify the highest temperature recorded on that date. - Return a pandas DataFrame with the following columns: - `Date` (str): The date for which the highest temperature is recorded. - `City` (str): The name of the city. - `Highest Temperature` (float): The highest temperature recorded on the given date in Celsius. 6. **Output**: Return the pandas DataFrame containing this data. # Full Example Here is the target structure of the DataFrame, using column names: ``` Date City Highest Temperature 0 2023-04-01 London 15.5 ``` Feel free to think of any edge cases and handle them accordingly.","solution":"import requests import pandas as pd from datetime import datetime def get_highest_temperature(city, date): Fetch the highest temperature recorded on a given date for a specified city using OpenWeatherMap API. Parameters: city (str): Name of the city. date (str): Date in \\"YYYY-MM-DD\\" format. Returns: pd.DataFrame: DataFrame with the highest temperature recorded on the given date. API_KEY = \'your_openweathermap_api_key\' # Replace with your API key url = f\\"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY}&units=metric\\" response = requests.get(url) weather_data = response.json() # Check for response error if weather_data[\'cod\'] != \'200\': raise ValueError(\\"Error fetching data from OpenWeatherMap API. Please check API key and city name.\\") highest_temp = None forecast_data = weather_data.get(\'list\', []) for entry in forecast_data: entry_date = entry[\'dt_txt\'][:10] if entry_date == date: temp = entry[\'main\'][\'temp\'] if highest_temp is None or temp > highest_temp: highest_temp = temp if highest_temp is None: raise ValueError(f\\"No temperature data available for {date} in {city}.\\") result = pd.DataFrame([[date, city, highest_temp]], columns=[\\"Date\\", \\"City\\", \\"Highest Temperature\\"]) return result"},{"question":"In a popular image processing task, you are required to smooth an image to reduce noise and detail. Implement a function that takes an `m x n` integer matrix `image` representing the pixel values of an image and returns a smoothed version of the matrix. Each value in the smoothed matrix should be the average of the neighboring values including the value itself, and the result should be an integer (rounded down if necessary). To calculate the average value of each cell in the smoothed matrix, for each cell in the original matrix, consider all the 8 cells surrounding it and the cell itself (a total of 9 cells). If a cell is on the edge or a corner of the matrix, only consider the cells that are within the bounds of the matrix. Write a function `image_smoother(image: List[List[int]]) -> List[List[int]]` that performs the smoothing as described. **Function Signature:** ```python def image_smoother(image: List[List[int]]) -> List[List[int]]: ... ``` **Parameters:** - `image` (List[List[int]]): A 2D list of integers representing the pixel values of the image. **Returns:** - `List[List[int]]`: A 2D list of integers representing the smoothed image. **Example:** - Input: `image = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]` - Output: `[[0, 0, 0], [0, 0, 0], [0, 0, 0]]` - Input: `image = [[100, 200, 100], [200, 50, 200], [100, 200, 100]]` - Output: `[[137, 141, 137], [141, 138, 141], [137, 141, 137]]`","solution":"from typing import List def image_smoother(image: List[List[int]]) -> List[List[int]]: def get_neighbors(i, j, m, n): # Define potential neighbors positions relative to (i, j) positions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 0), (0, 1), (1, -1), (1, 0), (1, 1)] neighbors = [] for di, dj in positions: ni, nj = i + di, j + dj if 0 <= ni < m and 0 <= nj < n: neighbors.append((ni, nj)) return neighbors m, n = len(image), len(image[0]) smoothed_image = [[0] * n for _ in range(m)] for i in range(m): for j in range(n): neighbors = get_neighbors(i, j, m, n) total, count = 0, 0 for ni, nj in neighbors: total += image[ni][nj] count += 1 smoothed_image[i][j] = total // count return smoothed_image"},{"question":"You are tasked with writing a function that simulates a simple inventory management system for a small store. The function will take two inputs: a list of current inventory items and a list of transactions. Each transaction is an object that represents a purchase or a sale. The inventory list contains objects with two properties: `item_name` and `quantity`. The transaction objects will also have `item_name` and `quantity`, but will include a `transaction_type` property which can either be `\\"sale\\"` or `\\"purchase\\"`. Your goal is to update the current inventory based on the transactions. For each purchase transaction, you will increase the quantity of the item in the inventory. For each sale transaction, you will decrease the quantity. If a sale transaction tries to remove more items than available, it should ignore the transaction and move to the next one. After processing all transactions, return the updated list of inventory items sorted by `item_name` in alphabetical order. # Function Signature ```python def update_inventory(inventory: list, transactions: list) -> list: pass ``` # Example Usage ```python inventory = [ {\\"item_name\\": \\"apple\\", \\"quantity\\": 10}, {\\"item_name\\": \\"banana\\", \\"quantity\\": 5} ] transactions = [ {\\"item_name\\": \\"apple\\", \\"quantity\\": 3, \\"transaction_type\\": \\"sale\\"}, {\\"item_name\\": \\"banana\\", \\"quantity\\": 2, \\"transaction_type\\": \\"purchase\\"}, {\\"item_name\\": \\"orange\\", \\"quantity\\": 5, \\"transaction_type\\": \\"sale\\"} ] updated_inventory = update_inventory(inventory, transactions) print(updated_inventory) # Expected Output: # [ # {\\"item_name\\": \\"apple\\", \\"quantity\\": 7}, # {\\"item_name\\": \\"banana\\", \\"quantity\\": 7} # ] ``` # Constraints 1. `inventory` will be a list of dictionaries, each with `item_name` (string) and `quantity` (integer). 2. `transactions` will be a list of dictionaries, each with `item_name` (string), `quantity` (integer), and `transaction_type` (string). 3. `quantity` will be a non-negative integer. 4. `transaction_type` will always be either `\\"sale\\"` or `\\"purchase\\"`. 5. All item names (`item_name`) will be non-empty and contain only alphabetical characters. # Implementation Notes - Ensure to properly update the inventory quantities while considering the constraints mentioned. - Handle transactions in the order they are provided. - Ignore transactions that result in a negative inventory quantity. - Carefully sort the final inventory list for the correct output format.","solution":"def update_inventory(inventory, transactions): inventory_dict = {item[\'item_name\']: item[\'quantity\'] for item in inventory} for transaction in transactions: item_name = transaction[\'item_name\'] quantity = transaction[\'quantity\'] transaction_type = transaction[\'transaction_type\'] if transaction_type == \'sale\': if item_name in inventory_dict and inventory_dict[item_name] >= quantity: inventory_dict[item_name] -= quantity elif transaction_type == \'purchase\': if item_name in inventory_dict: inventory_dict[item_name] += quantity else: inventory_dict[item_name] = quantity updated_inventory = [{\\"item_name\\": key, \\"quantity\\": value} for key, value in sorted(inventory_dict.items()) if value > 0] return updated_inventory"},{"question":"You are given a class `Matrix` that encapsulates a 2-dimensional array (a list of lists) and provides basic matrix operations such as addition, subtraction, and multiplication. Your task is to implement the key methods of this class ensuring they function correctly for the given operations. **Class Requirements:** - Name: `Matrix` - Attributes: - `data` (List[List[int]]): The 2-dimensional array representing the matrix. **Methods to Implement:** 1. `__init__(self, data: List[List[int]]) -> None`: Initialize the matrix with the provided 2-dimensional array. 2. `__add__(self, other: \'Matrix\') -> \'Matrix\'`: Add two matrices. 3. `__sub__(self, other: \'Matrix\') -> \'Matrix\'`: Subtract one matrix from another. 4. `__mul__(self, other: \'Matrix\') -> \'Matrix\'`: Multiply two matrices. 5. `__str__(self) -> str`: Return a string representation of the matrix. **Constraints:** - Matrix addition and subtraction are only valid for matrices of the same dimensions. - Matrix multiplication follows the linear algebra rule where the number of columns of the first matrix is equal to the number of rows of the second matrix. - Each operation must raise a `ValueError` if the input matrices do not satisfy the above constraints. **Example:** ```python m1 = Matrix([[1, 2], [3, 4]]) m2 = Matrix([[5, 6], [7, 8]]) # Addition print(m1 + m2) # Should output: # 6 8 # 10 12 # Subtraction print(m1 - m2) # Should output: # -4 -4 # -4 -4 # Multiplication m3 = Matrix([[2, 0], [1, 2]]) print(m1 * m3) # Should output: # 4 4 # 10 8 ``` **Implementation:** Here\'s a template for the class: ```python from typing import List class Matrix: def __init__(self, data: List[List[int]]) -> None: self.data = data def __add__(self, other: \'Matrix\') -> \'Matrix\': if len(self.data) != len(other.data) or len(self.data[0]) != len(other.data[0]): raise ValueError(\\"Matrices must have the same dimensions for addition\\") result = [ [self.data[i][j] + other.data[i][j] for j in range(len(self.data[0]))] for i in range(len(self.data)) ] return Matrix(result) def __sub__(self, other: \'Matrix\') -> \'Matrix\': if len(self.data) != len(other.data) or len(self.data[0]) != len(other.data[0]): raise ValueError(\\"Matrices must have the same dimensions for subtraction\\") result = [ [self.data[i][j] - other.data[i][j] for j in range(len(self.data[0]))] for i in range(len(self.data)) ] return Matrix(result) def __mul__(self, other: \'Matrix\') -> \'Matrix\': if len(self.data[0]) != len(other.data): raise ValueError(\\"Number of columns of the first matrix must equal number of rows of the second matrix.\\") result = [ [ sum(self.data[i][k] * other.data[k][j] for k in range(len(other.data))) for j in range(len(other.data[0])) ] for i in range(len(self.data)) ] return Matrix(result) def __str__(self) -> str: return \'n\'.join(\' \'.join(map(str, row)) for row in self.data) ```","solution":"from typing import List class Matrix: def __init__(self, data: List[List[int]]) -> None: self.data = data def __add__(self, other: \'Matrix\') -> \'Matrix\': if len(self.data) != len(other.data) or len(self.data[0]) != len(other.data[0]): raise ValueError(\\"Matrices must have the same dimensions for addition\\") result = [ [self.data[i][j] + other.data[i][j] for j in range(len(self.data[0]))] for i in range(len(self.data)) ] return Matrix(result) def __sub__(self, other: \'Matrix\') -> \'Matrix\': if len(self.data) != len(other.data) or len(self.data[0]) != len(other.data[0]): raise ValueError(\\"Matrices must have the same dimensions for subtraction\\") result = [ [self.data[i][j] - other.data[i][j] for j in range(len(self.data[0]))] for i in range(len(self.data)) ] return Matrix(result) def __mul__(self, other: \'Matrix\') -> \'Matrix\': if len(self.data[0]) != len(other.data): raise ValueError(\\"Number of columns of the first matrix must equal number of rows of the second matrix.\\") result = [ [ sum(self.data[i][k] * other.data[k][j] for k in range(len(other.data))) for j in range(len(other.data[0])) ] for i in range(len(self.data)) ] return Matrix(result) def __str__(self) -> str: return \'n\'.join(\' \'.join(map(str, row)) for row in self.data)"},{"question":"Write a function to find the first non-repeated character in a string. If all characters are repeated or the string is empty, return an empty string. The function should efficiently find the character using a single pass through the string and should handle both upper and lower case characters. The function should start with: ```python def first_non_repeated_char(s): ``` Function Signature ```python def first_non_repeated_char(s): This function finds the first non-repeated character in a given string `s`. If there\'s no such character, it returns an empty string. Parameters: - s: str - Input string to be processed Returns: - str: The first non-repeated character or an empty string if none exists ``` # Examples ```python assert first_non_repeated_char(\\"swiss\\") == \\"w\\" assert first_non_repeated_char(\\"moon\\") == \\"m\\" assert first_non_repeated_char(\\"aabbcc\\") == \\"\\" assert first_non_repeated_char(\\"\\") == \\"\\" assert first_non_repeated_char(\\"aAbBABac\\") == \\"b\\" ``` # Guidelines - Assume the input string contains only alphabetic characters. - The function should consider case sensitivity, meaning \'a\' and \'A\' are distinct characters. - Aim for a solution with a time complexity of O(n).","solution":"def first_non_repeated_char(s): This function finds the first non-repeated character in a given string `s`. If there\'s no such character, it returns an empty string. Parameters: - s: str - Input string to be processed Returns: - str: The first non-repeated character or an empty string if none exists # We use a dictionary to count occurrences of each character char_count = {} # First pass: record count of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass: find the first character with a count of 1 for char in s: if char_count[char] == 1: return char # If no non-repeated character is found, return an empty string return \\"\\""},{"question":"You are tasked with implementing a function `count_matching_subsequences` that finds the number of times a subsequence appears in a string. A subsequence does not need to be contiguous but should maintain relative order. The function should take two parameters: - `s` (a string): The main string in which to find subsequences. - `words` (a list of strings): List of words, which are the potential subsequences. Your job is to return an integer representing the number of words in the list that are subsequences of the string `s`. Implement the function using the following signature: ```python def count_matching_subsequences(s, words): # Your implementation goes here pass ``` # Example ```python s = \\"abcde\\" words = [\\"a\\", \\"bb\\", \\"acd\\", \\"ace\\"] print(count_matching_subsequences(s, words)) # Output: 3 ``` # Explanation In the example above: - \\"a\\" is a subsequence of \\"abcde\\" - \\"bb\\" is not a subsequence of \\"abcde\\" - \\"acd\\" is a subsequence of \\"abcde\\" - \\"ace\\" is a subsequence of \\"abcde\\" Thus, the function returns 3, as there are three words that are subsequences of \\"abcde\\". # Constraints - The length of the string `s` does not exceed 5000 characters. - The total length of all words in the list `words` does not exceed 5000 characters.","solution":"def count_matching_subsequences(s, words): def is_subsequence(word, s): it = iter(s) return all(char in it for char in word) count = 0 for word in words: if is_subsequence(word, s): count += 1 return count"},{"question":"Write a function that accepts a list of integers and returns a dictionary with the count of each unique integer. The function should also provide a method to reconstruct the original list from the dictionary. Include the following functionality: - Compute the frequency of each integer in the list. - Store the frequency data in a dictionary where the keys are the integers and the values are their respective counts. - Provide a method to use the dictionary to reconstruct the original list. You should write self-contained code starting with: ``` def count_and_reconstruct(int_list=[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]): def count_elements(lst): count_dict = {} for num in lst: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict def reconstruct_list(count_dict): reconstructed_list = [] for num, count in count_dict.items(): reconstructed_list.extend([num] * count) return reconstructed_list frequency_dict = count_elements(int_list) reconstructed_lst = reconstruct_list(frequency_dict) return frequency_dict, reconstructed_lst ```","solution":"def count_and_reconstruct(int_list): def count_elements(lst): count_dict = {} for num in lst: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict def reconstruct_list(count_dict): reconstructed_list = [] for num, count in count_dict.items(): reconstructed_list.extend([num] * count) return reconstructed_list frequency_dict = count_elements(int_list) reconstructed_lst = reconstruct_list(frequency_dict) return frequency_dict, reconstructed_lst"},{"question":"You are tasked with writing a function that reads a text file, counts the occurrence of each word in the file, and writes the word counts to an output file. The function should ignore punctuation and treat words as case-insensitive. Additionally, the words in the output file should be sorted in descending order by their count, and in the case of ties, alphabetically. For this task, you need to use Python\'s built-in file handling features. You may also use libraries like `collections` to manage word counts. Function Signature: ```python def word_count(input_file: str, output_file: str) -> None: Count the occurrence of each word in the input file and write the results to the output file, sorted by count in descending order, and alphabetically in case of ties. Args: input_file (str): The path of the input text file. output_file (str): The path of the output text file. ``` **Input:** - A string `input_file` representing the file path of the input text file. - A string `output_file` representing the file path of the output text file. **Output:** - None. The function should write the word counts to the `output_file`. **Example:** ```python # Assuming the content of \'example.txt\' is: # \\"Hello, world! Hello universe.\\" # The function should create \'word_counts.txt\' with the following content: # hello: 2 # universe: 1 # world: 1 word_count(\'example.txt\', \'word_counts.txt\') # If the content of \'empty.txt\' is an empty file: # The function should create \'output_empty.txt\' with no content. word_count(\'empty.txt\', \'output_empty.txt\') ```","solution":"import collections import re def word_count(input_file: str, output_file: str) -> None: # Initialize a counter for word counts word_counts = collections.Counter() # Define a regular expression pattern to match words (ignoring punctuation) word_pattern = re.compile(r\'bw+b\') # Read the input file with open(input_file, \'r\', encoding=\'utf-8\') as file: for line in file: # Find all words in the line, treat them as lowercase words = word_pattern.findall(line.lower()) # Update the counter with the words found word_counts.update(words) # Create a sorted list of word counts sorted_word_counts = sorted(word_counts.items(), key=lambda item: (-item[1], item[0])) # Write the sorted word counts to the output file with open(output_file, \'w\', encoding=\'utf-8\') as file: for word, count in sorted_word_counts: file.write(f\\"{word}: {count}n\\")"},{"question":"Create a function named `anagrams_in_string(s1, s2)` that takes two strings `s1` and `s2` as arguments and returns `True` if any anagram of `s1` is a substring of `s2`, and `False` otherwise. An anagram is a rearrangement of letters of one word to form another word using all the original letters exactly once. Your function should: 1. Ensure that both inputs `s1` and `s2` are of type `str`. If any input is not a string, raise a `RuntimeError` with the message \\"Input is not a string\\". 2. Handle cases where `s1` is longer than `s2` by immediately returning `False`. 3. Efficiently check for anagrams of `s1` within `s2` using a sliding window approach. Example: ```python print(anagrams_in_string(\\"ab\\", \\"eidbaooo\\")) # True print(anagrams_in_string(\\"ab\\", \\"eidboaoo\\")) # False print(anagrams_in_string(\\"abc\\", \\"cbaebabacd\\")) # True ``` Use the following template for your solution: ```python def anagrams_in_string(s1, s2): # Your implementation here ```","solution":"def anagrams_in_string(s1, s2): Checks if any anagram of s1 is a substring of s2. Parameters: s1 (str): The string to find anagrams of. s2 (str): The string to search within. Returns: bool: True if any anagram of s1 is a substring of s2, False otherwise. Raises: RuntimeError: If any input is not a string. # Validate input types if not isinstance(s1, str) or not isinstance(s2, str): raise RuntimeError(\\"Input is not a string\\") # Handle the case where s1 is longer than s2 if len(s1) > len(s2): return False from collections import Counter # Initialize counters for s1 and the first window of s2 s1_counter = Counter(s1) window_counter = Counter(s2[:len(s1)]) # Slide the window over s2 for i in range(len(s1), len(s2)): if s1_counter == window_counter: return True # Remove the character that\'s sliding out of the window window_counter[s2[i - len(s1)]] -= 1 if window_counter[s2[i - len(s1)]] == 0: del window_counter[s2[i - len(s1)]] # Add the character that\'s coming into the window window_counter[s2[i]] += 1 # Check the last window return s1_counter == window_counter"},{"question":"Reads a log file and process each line to extract timestamps and corresponding log messages. The function should then filter out logs which have timestamps within a specific time range and return them as a list of dictionaries. Each dictionary should contain two keys: \'timestamp\' and \'message\'. If the log file does not exist, the function should raise a `FileNotFoundError`. If the timestamps in the log file do not follow the specified format, raise a `ValueError`. The function should output with: list: A list of dictionaries containing filtered log messages. You should write self-contained code starting with: ```python import re from datetime import datetime def process_log_file(log_file_path, start_time, end_time): ```","solution":"import re from datetime import datetime def process_log_file(log_file_path, start_time, end_time): Processes a log file and extracts log messages within a specific time range. Args: log_file_path (str): Path to the log file. start_time (str): The start of the time range in the format \'YYYY-MM-DD HH:MM:SS\'. end_time (str): The end of the time range in the format \'YYYY-MM-DD HH:MM:SS\'. Returns: list: A list of dictionaries containing \'timestamp\' and \'message\' keys. Raises: FileNotFoundError: If the log file does not exist. ValueError: If log timestamps do not follow the \'YYYY-MM-DD HH:MM:SS\' format. try: with open(log_file_path, \'r\') as file: logs = file.readlines() except FileNotFoundError: raise FileNotFoundError(f\\"The log file at {log_file_path} does not exist.\\") # Define the expected timestamp format timestamp_format = \'%Y-%m-%d %H:%M:%S\' start_dt = datetime.strptime(start_time, timestamp_format) end_dt = datetime.strptime(end_time, timestamp_format) filtered_logs = [] timestamp_re = re.compile(r\'^d{4}-d{2}-d{2} d{2}:d{2}:d{2}\') for log in logs: timestamp_match = timestamp_re.match(log) if not timestamp_match: raise ValueError(f\\"Timestamp in log does not follow the format \'YYYY-MM-DD HH:MM:SS\': {log}\\") timestamp_str = timestamp_match.group() log_message = log[len(timestamp_str):].strip() log_dt = datetime.strptime(timestamp_str, timestamp_format) if start_dt <= log_dt <= end_dt: filtered_logs.append({ \'timestamp\': timestamp_str, \'message\': log_message }) return filtered_logs"},{"question":"You are developing a product inventory management system. Products can be added to the inventory with a unique product ID, name, and quantity. Write a function `AddProduct` to add new products to a JSON file `inventory.json`. **Requirements:** 1. **Function Name:** `AddProduct` 2. **Parameters:** `product_id` (str), `product_name` (str), `quantity` (int) 3. **Output:** None (function writes to a file and has side-effects) 4. **Behavior:** - This function should read the existing inventory from the `inventory.json` file. - Add the new product\'s ID, name, and quantity to the JSON object. - Serialize the modified JSON object to a string using `json.dumps`. - Write the serialized string to the file `inventory.json`. - Ensure the product ID is unique, if a product with the same ID already exists, update its name and quantity. Assume the `inventory.json` file initially contains the following content: ```json { \\"products\\": [] } ``` You need to use `json.dumps` function, ensure proper formatting, and manage file operations carefully.","solution":"import json import os def AddProduct(product_id, product_name, quantity): Adds or updates a product in the inventory stored in \'inventory.json\'. Parameters: - product_id (str): The unique ID of the product. - product_name (str): The name of the product. - quantity (int): The quantity of the product. Returns: - None inventory_file = \'inventory.json\' if os.path.exists(inventory_file): # Read the existing inventory with open(inventory_file, \'r\') as f: inventory = json.load(f) else: inventory = {\'products\': []} # Check if the product ID already exists product_found = False for product in inventory[\'products\']: if product[\'product_id\'] == product_id: # Update the existing product details product[\'product_name\'] = product_name product[\'quantity\'] = quantity product_found = True break # If the product ID is new, add a new product if not product_found: new_product = { \'product_id\': product_id, \'product_name\': product_name, \'quantity\': quantity } inventory[\'products\'].append(new_product) # Serialize the inventory and write it back to the file with open(inventory_file, \'w\') as f: f.write(json.dumps(inventory, indent=4))"},{"question":"In this problem, you will write a function called `image_blur` to apply a blur filter to a grayscale image using a Gaussian kernel. The function will read the image data, create a Gaussian kernel, apply the kernel to the image to produce the blurred output, and save the resulting image to a file. You will utilize the `numpy`, `scipy`, and `PIL` (Pillow) libraries for this purpose. **Function Signature**: ```python def image_blur(input_image_path: str, output_image_path: str, kernel_size: int, sigma: float) -> None: ... ``` **Parameters**: - `input_image_path` (str): Path to the input grayscale image file. - `output_image_path` (str): Path to save the resulting blurred image file. - `kernel_size` (int): Size of the Gaussian kernel (must be an odd number). - `sigma` (float): Standard deviation of the Gaussian function used for the blur filter. **Description**: 1. **Read the Image**: - Use `PIL.Image.open` to read the grayscale image from `input_image_path`. 2. **Create Gaussian Kernel**: - Generate a 2D Gaussian kernel using the specified `kernel_size` and `sigma`. 3. **Apply Gaussian Blur**: - Convolve the Gaussian kernel with the image data to apply the blur effect using `scipy.ndimage.convolve`. 4. **Save Blurred Image**: - Save the resulting blurred image to `output_image_path` using `PIL.Image.save`. **Hints**: - You can use `numpy.meshgrid` and `numpy.exp` to create the Gaussian kernel. - Normalize the kernel so that the sum of its elements is 1. - Ensure the image is properly converted to and from `numpy` arrays using `numpy.array` and `PIL.Image.fromarray`. **Requirements**: - The blurred image should maintain the original dimensions. - Ensure that the kernel size is validated (must be a positive odd number). - Proper error handling for file I/O and invalid parameters should be included. **Example**: ```python # Example usage image_blur(\\"input.png\\", \\"output.png\\", kernel_size=5, sigma=1.0) ```","solution":"import numpy as np from scipy.ndimage import convolve from PIL import Image def image_blur(input_image_path: str, output_image_path: str, kernel_size: int, sigma: float) -> None: if not (kernel_size > 0 and kernel_size % 2 == 1): raise ValueError(\\"kernel_size must be a positive odd number\\") # Read the input image img = Image.open(input_image_path).convert(\'L\') img_array = np.array(img) # Create Gaussian kernel def gaussian_kernel(size: int, sigma: float) -> np.ndarray: ax = np.linspace(-(size // 2), size // 2, size) xx, yy = np.meshgrid(ax, ax) kernel = np.exp(-0.5 * (np.square(xx) + np.square(yy)) / np.square(sigma)) return kernel / np.sum(kernel) kernel = gaussian_kernel(kernel_size, sigma) # Apply Gaussian blur blurred_img_array = convolve(img_array, kernel) # Save the processed image blurred_img = Image.fromarray(blurred_img_array.astype(np.uint8)) blurred_img.save(output_image_path)"},{"question":"You are given a string `text` consisting of lowercase and uppercase alphabetical characters. Implement a function named `longestPalindromeSubseq` that computes the length of the longest palindromic subsequence in the given string. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. A palindrome is a string that reads the same backward as forward. To solve this problem, you can use dynamic programming. Use a 2D array `dp`, where `dp[i][j]` represents the length of the longest palindromic subsequence of the substring of `text` starting at index `i` and ending at index `j`. **Function Signature:** ```python def longestPalindromeSubseq(text: str) -> int: ``` **Input:** - `text` (str): A string of lowercase and uppercase alphabetical characters (1 ≤ len(text) ≤ 1000). **Output:** - int: The length of the longest palindromic subsequence. **Example:** ```python text = \\"bbbab\\" print(longestPalindromeSubseq(text)) # Output: 4 ``` In this example, the longest palindromic subsequence is \\"bbbb\\" with a length of 4. ```python text = \\"cbbd\\" print(longestPalindromeSubseq(text)) # Output: 2 ``` In this example, the longest palindromic subsequence is \\"bb\\" with a length of 2. **Note:** - You may assume that the dynamic programming solution has a time complexity of O(n^2) where `n` is the length of the input string.","solution":"def longestPalindromeSubseq(text: str) -> int: n = len(text) dp = [[0] * n for _ in range(n)] for i in range(n-1, -1, -1): dp[i][i] = 1 for j in range(i+1, n): if text[i] == text[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1]"},{"question":"Problem Overview: You are required to create a function that simulates the rolling of a certain number of dice and calculates the total sum of their faces. This program should also return the counts for each possible face value (from 1 to 6) across all the dice rolled. The rolling of dice should be implemented using Python\'s standard `random` library. Function Specification: - **Function Name:** `roll_dice` - **Parameters:** - `n` (an integer): The number of dice to roll, where `n` is a positive integer. - **Returns:** A tuple containing: - The total sum of the face values of the rolled dice. - A dictionary mapping each face value (from 1 to 6) to the count of times that face appeared. Rolling Criteria: - Each die has 6 faces, showing numbers from 1 to 6. - For each die roll, generate a random number between 1 and 6 (inclusive) to simulate the face value. Additional Instructions: 1. Ensure you use Python\'s `random.randint(a, b)` function to simulate the dice roll, where `a` is the minimum and `b` is the maximum face value of a die. 2. You need to maintain the count of occurrences for each face value in a dictionary. Initialize the dictionary with keys from 1 to 6, each set to 0. Example: ```python roll_dice(5) ``` If the simulated rolls are `[2, 6, 3, 3, 1]`, the function should return: ```python (15, {1: 1, 2: 1, 3: 2, 4: 0, 5: 0, 6: 1}) ``` The output indicates that the total sum of the dice is 15 and the counts of the faces are as shown in the dictionary.","solution":"import random def roll_dice(n): Rolls n dice and returns the total sum and counts of each face value (1 to 6). Parameters: n (int): The number of dice to roll. Returns: tuple: A tuple containing: - The total sum of the face values of the rolled dice. - A dictionary mapping each face value (from 1 to 6) to the count of times that face appeared. if n <= 0: raise ValueError(\\"The number of dice must be a positive integer\\") face_counts = {i: 0 for i in range(1, 7)} total_sum = 0 for _ in range(n): roll = random.randint(1, 6) total_sum += roll face_counts[roll] += 1 return total_sum, face_counts"},{"question":"Create a function named `find_deadlock` that detects a deadlock in a process interaction scenario. The function will take a list of processes and a resource allocation matrix as input. A deadlock occurs when a set of processes are each waiting for a resource held by another process in the set. Your `find_deadlock` function should identify and return a list of processes involved in a deadlock. You can assume that the input list of processes is unique and the resource allocation matrix indicates which processes are waiting for which resources. **Function Signature:** ```python def find_deadlock(processes: list, allocation: list) -> list: pass ``` **Input:** - processes: A list of process names (strings). - allocation: A square matrix (list of lists) where `allocation[i][j]` is non-zero if process `i` is currently holding a resource that process `j` needs, otherwise it is zero. **Output:** - A list of processes involved in a deadlock, or an empty list if no deadlock is detected. **Example:** ```python processes = [\\"P1\\", \\"P2\\", \\"P3\\", \\"P4\\"] allocation = [ [0, 1, 0, 0], # P1 holds a resource needed by P2 [0, 0, 1, 0], # P2 holds a resource needed by P3 [0, 0, 0, 1], # P3 holds a resource needed by P4 [1, 0, 0, 0] # P4 holds a resource needed by P1 (completing the cycle) ] find_deadlock(processes, allocation) # Output: [\\"P1\\", \\"P2\\", \\"P3\\", \\"P4\\"] ``` **Requirements:** - Use graph theory concepts to detect cycles which indicate the presence of a deadlock. - Ensure that the function is well-documented and includes any necessary error handling.","solution":"def find_deadlock(processes, allocation): Detect and return a list of processes involved in a deadlock. :param processes: List of process names. :param allocation: Square matrix indicating resource allocation. :return: List of processes involved in a deadlock or an empty list if no deadlock. def dfs(process_index, visited, stack): visited[process_index] = True stack[process_index] = True for adj, val in enumerate(allocation[process_index]): if val != 0: # There is a resource allocation if not visited[adj]: if dfs(adj, visited, stack): return True elif stack[adj]: return True stack[process_index] = False return False n = len(processes) visited = [False] * n stack = [False] * n for process_index in range(n): if not visited[process_index]: if dfs(process_index, visited, stack): deadlocked_processes = [processes[i] for i in range(n) if stack[i]] return deadlocked_processes return []"},{"question":"You are given a function where you need to calculate the minimum cost to climb stairs where each step has a cost associated with it. You can either start from the step with index 0 or the step with index 1. Function Requirements - **Function Name:** `min_cost_climbing_stairs` - **Parameters:** - `cost` (List[int]): A list of integers where `cost[i]` is the cost of the ith step on a staircase. Rules 1. Once you pay the cost, you can either climb one or two steps. 2. You need to reach the top of the floor, which is beyond the last step, with minimum cost. Detailed Description - The function should compute the minimal cost required to reach the top of the floor. - Return the minimum cost to reach the top of the floor. Constraints - The length of `cost` will be between 2 and 1000, inclusive. - Each cost will be between 0 and 999, inclusive. Example ```python cost = [10, 15, 20] print(min_cost_climbing_stairs(cost)) # Output: 15 cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] print(min_cost_climbing_stairs(cost)) # Output: 6 ``` Hints - Use dynamic programming to keep a running total of costs. - Consider the cost to reach each step from either one or two steps before.","solution":"def min_cost_climbing_stairs(cost): Returns the minimum cost to reach the top of the floor beyond the last step. :param cost: List[int] - list of costs associated with each step :return: int - minimum cost to reach the top n = len(cost) if n == 2: return min(cost) dp = [0] * (n + 1) dp[0], dp[1] = 0, 0 # Starting on either step 0 or step 1 for i in range(2, n + 1): dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]) return dp[n]"},{"question":"You have been given a dataset containing information about various books, including their titles, authors, publication year, and user ratings. Your task is to write a function named `plot_top_rated_books(df, n)` that identifies the top `n` books with the highest average user ratings and plots a bar chart displaying these books along with their average ratings. The dataset is provided as a pandas DataFrame `df` where each row represents a book. The columns include: - `\'title\'`: Title of the book. - `\'author\'`: Author of the book. - `\'year\'`: Year the book was published. - `\'rating\'`: User rating of the book (on a scale of 1 to 5). The function should: 1. Group the DataFrame by title and calculate the average user rating for each book. 2. Sort the books based on their average rating in descending order. 3. Select the top `n` books with the highest average ratings. 4. Plot a bar chart where the x-axis represents the book titles and the y-axis represents the average rating. 5. Appropriately label the x-axis as \\"Book Titles\\", y-axis as \\"Average Rating\\", and the title as \\"Top Rated Books\\". **Function Prototype:** ```python def plot_top_rated_books(df, n): pass ``` **Libraries to Use:** - `matplotlib.pyplot.bar` - `matplotlib.pyplot.xlabel` - `matplotlib.pyplot.ylabel` - `matplotlib.pyplot.title` - `pandas.DataFrame.groupby` - `pandas.DataFrame.sort_values` **Data Assumptions:** - The DataFrame `df` contains the columns `\'title\'`, `\'author\'`, `\'year\'`, and `\'rating\'`. - The user rating values in the \'rating\' column are floats between 1 and 5. Use `matplotlib.pyplot` methods for labeling and displaying the plot as per the provided Library API documentation.","solution":"import matplotlib.pyplot as plt import pandas as pd def plot_top_rated_books(df, n): Plots a bar chart of the top n books with the highest average ratings. Parameters: df (DataFrame): The dataframe containing book information. n (int): The number of top-rated books to plot. # Group by title and calculate the average rating for each book avg_ratings = df.groupby(\'title\')[\'rating\'].mean().reset_index() # Sort the books based on their average rating in descending order top_books = avg_ratings.sort_values(by=\'rating\', ascending=False).head(n) # Plot a bar chart plt.figure(figsize=(10, 6)) plt.bar(top_books[\'title\'], top_books[\'rating\'], color=\'skyblue\') plt.xlabel(\'Book Titles\') plt.ylabel(\'Average Rating\') plt.title(\'Top Rated Books\') plt.xticks(rotation=45, ha=\'right\') plt.tight_layout() # Display the plot plt.show()"},{"question":"You are given a dataset containing information about users, stored in a CSV file named `users.csv`. This dataset includes columns like `userId`, `name`, `email`, `age`, and `country`. Your task is to preprocess this data so it can be used for analysis and visualization purposes, focusing on ensuring data quality and meaningful transformations. The task involves the following steps: 1. **Read the CSV File**: Load the dataset into a pandas DataFrame. 2. **Set Index**: Use the `userId` column as the index of the DataFrame. 3. **Handle Missing Values**: For the `age` column, replace missing or invalid values (values not in the range 0-120) with the average age of the users. 4. **Convert Country to Categorical**: Convert the `country` column into a categorical variable. 5. **Standardize Email Domain**: Extract the domain from the `email` column and standardize it to lowercase. 6. **Extract Year of Birth**: Calculate the year of birth for each user based on the `age` and add it as a new column called `yearOfBirth`. To help you accomplish these steps, several preprocessing techniques and pandas functions are required. The function header is given as: ```python def preprocess_user_data(csv_path: str) -> pd.DataFrame: ``` **Input**: - `csv_path`: A string representing the file path to the `users.csv` file. **Output**: - A pandas DataFrame with `userId` as the index, cleaned and preprocessed according to the steps outlined above. Here is a sample structure of the `users.csv` file: ``` userId,name,email,age,country 1,John Doe,john.doe@example.com,25,USA 2,Jane Smith,jane.smith@Example.com,NA,Canada ... ``` Write the `preprocess_user_data` function which accomplishes the above data preprocessing tasks step by step.","solution":"import pandas as pd def preprocess_user_data(csv_path: str) -> pd.DataFrame: df = pd.read_csv(csv_path) # Setting the userId as the index df.set_index(\'userId\', inplace=True) # Handle Missing Values and Invalid Values in \'age\' column # Replace missing or invalid age values with the average age (ages must be between 0 and 120) valid_ages = df[\'age\'].apply(lambda x: pd.to_numeric(x, errors=\'coerce\')) valid_ages = valid_ages[(valid_ages >= 0) & (valid_ages <= 120)] average_age = valid_ages.mean() df[\'age\'] = pd.to_numeric(df[\'age\'], errors=\'coerce\') df.loc[~df[\'age\'].between(0, 120), \'age\'] = average_age # Convert country to categorical variable df[\'country\'] = pd.Categorical(df[\'country\']) # Standardize email domain df[\'email\'] = df[\'email\'].str.lower() df[\'email_domain\'] = df[\'email\'].str.split(\'@\').str[1] # Extract year of birth current_year = pd.Timestamp.now().year df[\'yearOfBirth\'] = (current_year - df[\'age\']).astype(int) return df"},{"question":"Binary Tree Level Order Traversal In this problem, you are asked to implement a function that performs a level order traversal on a binary tree. Level order traversal visits nodes level by level from top to bottom and from left to right. # Objective Create a function `level_order_traversal(root: TreeNode) -> List[List[int]]` that: 1. Takes the root node of a binary tree as input. 2. Returns a list of lists, where each sublist contains the values of the nodes at each level of the binary tree. # Inputs - **root**: The root node of a binary tree. Each node has the following attributes: - `val` (int): The integer value of the node. - `left` (TreeNode): The pointer to the left child node. - `right` (TreeNode): The pointer to the right child node. # Outputs - **levels**: A list of lists. Each sublist represents the node values at each level of the binary tree, from the root level to the leaf level. # Example Given the following binary tree: ``` 3 / 9 20 / 15 7 ``` ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20, TreeNode(15), TreeNode(7)) ``` A function call: ```python level_order_traversal(root) ``` Should return: ```python [[3], [9, 20], [15, 7]] ``` # Constraints 1. The number of nodes in the tree is in the range [0, 2000]. 2. `-1000 <= Node.val <= 1000` Implement the function to perform a breadth-first level order traversal to achieve the objective.","solution":"from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] result = [] queue = [root] while queue: level_size = len(queue) level = [] for i in range(level_size): node = queue.pop(0) # Remove the first element from the queue level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level) return result"},{"question":"Your task is to implement a function called `KMeans_Clustering_Experiment` that performs a clustering experiment using the K-Means algorithm. The function will measure the time taken to fit the model and output the cluster centroids, labels, and inertia. You are required to use the `time.time()` function from the Python standard library to measure the elapsed time for this operation. The `KMeans_Clustering_Experiment` function has the following signature: ```python def KMeans_Clustering_Experiment(X, n_clusters, verbose=False): \'\'\' Run an experiment on K-Means Clustering @param X: array of data to be clustered n_clusters: the number of clusters to form as well as the number of centroids to generate verbose: whether to print a single line summary or a full report to the console @return None \'\'\' ``` # Parameters: - `X`: An array containing the data to be clustered. - `n_clusters`: An integer setting the number of clusters for the algorithm. - `verbose`: A boolean flag. If `False`, the function prints a concise summary of the results. If `True`, it prints detailed information including cluster centroids and labels. # Requirements: 1. **Time Measurement**: Use the `time.time()` function to measure the duration of the experiment. 2. **Fitting**: Use a helper function `build_KMeans_model(X, n_clusters)` to create and fit the K-Means model. 3. **Evaluation**: After fitting, capture the cluster centroids, labels, and inertia. 4. **Metrics**: - Print the amount of inertia (sum of squared distances of samples to their closest cluster center) of the clustering. - Print the time taken for the operation. - If `verbose` is `True`, print the cluster centroids and labels. **Note**: Assume the existence of the helper function `build_KMeans_model(X, n_clusters)` and the required libraries (`sklearn`, etc.) for model building and clustering analysis are already imported. # Example: ```python X = load_some_data() # Assume this function loads your data KMeans_Clustering_Experiment(X, 5) ```","solution":"import time from sklearn.cluster import KMeans def build_KMeans_model(X, n_clusters): \'\'\' Helper function to build and fit a KMeans model. @param X: array of data to be clustered n_clusters: the number of clusters to form as well as the number of centroids to generate @return A fitted KMeans model \'\'\' model = KMeans(n_clusters=n_clusters, random_state=42) model.fit(X) return model def KMeans_Clustering_Experiment(X, n_clusters, verbose=False): \'\'\' Run an experiment on K-Means Clustering @param X: array of data to be clustered n_clusters: the number of clusters to form as well as the number of centroids to generate verbose: whether to print a single line summary or a full report to the console @return None \'\'\' start_time = time.time() model = build_KMeans_model(X, n_clusters) end_time = time.time() duration = end_time - start_time centroids = model.cluster_centers_ labels = model.labels_ inertia = model.inertia_ if verbose: print(f\\"Cluster centroids:n{centroids}\\") print(f\\"Labels:n{labels}\\") print(f\\"Inertia: {inertia}\\") print(f\\"Time taken: {duration:.4f} seconds\\")"},{"question":"You are tasked with writing a Python function named `find_longest_consecutive_sequence` that finds the longest consecutive elements sequence in an unsorted list of integers. The goal is to understand how to manipulate sets and lists to efficiently solve sequence problems. Given the following parameter: - `nums`: A list of integers which may contain duplicates and is not necessarily sorted. Your task is to determine the length of the longest consecutive elements sequence in `nums`. For example, given the list [100, 4, 200, 1, 3, 2], the longest consecutive elements sequence is [1, 2, 3, 4]. Here\'s a breakdown of what the function should do: 1. Convert the list `nums` to a set to eliminate duplicates and allow O(1) time complexity checks for existence. 2. Iterate through the original list, and for each element, check whether it could be the potential start of a sequence (i.e., the element minus one is not in the set). 3. If it is the start, count the length of the sequence starting from that element by continuously checking if the subsequent consecutive element exists in the set. 4. Keep track of the maximum sequence length found during the iterations. The function signature is: ```python def find_longest_consecutive_sequence(nums): # Your code here ``` Note: Your implementation should handle cases where the input list is empty. The expected time complexity is O(n). Ensure that you test your solution to verify its correctness.","solution":"def find_longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence in an unsorted list of integers. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: # Check if it is the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are required to implement a function that verifies the validity of an IPv4 address. An IPv4 address is a string in the form \\"x.x.x.x\\", where each \\"x\\" is a number from 0 to 255 and represents a byte of the address. The function should check if the given string is a valid IPv4 address and return `True` if it is valid, otherwise return `False`. To be considered valid: 1. Each segment \\"x\\" must be a number from 0 to 255. 2. Each segment should not have leading zeros (e.g., \\"01\\", \\"001\\" are considered invalid, instead it should be \\"1\\"). 3. The string should only contain four segments separated by dots. # Function Signature: ```python def is_valid_ipv4(address: str) -> bool: ``` # Parameters: - `address` (str): The IPv4 address string that needs to be validated. # Returns: - `bool`: `True` if the IPv4 address is valid, `False` otherwise. # Example: ```python assert is_valid_ipv4(\\"192.168.1.1\\") == True assert is_valid_ipv4(\\"255.255.255.255\\") == True assert is_valid_ipv4(\\"256.256.256.256\\") == False assert is_valid_ipv4(\\"192.168.01.1\\") == False assert is_valid_ipv4(\\"192.168.1\\") == False assert is_valid_ipv4(\\"192.168..1.1\\") == False ```","solution":"def is_valid_ipv4(address: str) -> bool: Verifies if the given address is a valid IPv4 address. Parameters: - address (str): The IPv4 address string that needs to be validated. Returns: - bool: True if the IPv4 address is valid, False otherwise. parts = address.split(\'.\') # IPv4 address must contain exactly 4 parts if len(parts) != 4: return False for part in parts: # Each part must be a digit and must not have leading zeros unless it is \'0\' if not part.isdigit() or (part[0] == \'0\' and len(part) > 1): return False # Each part must be in the range 0 - 255 num = int(part) if num < 0 or num > 255: return False return True"},{"question":"You are tasked with implementing a function called `filter_high_scorers` using the `pandas` library. This function takes two arguments: 1. `dataframe`: A pandas DataFrame containing columns \'Name\' (string), \'Score\' (integer), and \'Date\' (string in the format \'YYYY-MM-DD\'). 2. `threshold`: An integer representing the minimum score a person must have to be considered a high scorer. Your function should return a new DataFrame that includes only the rows where the \'Score\' is greater than or equal to the given `threshold`. The rows in the returned DataFrame should be sorted by \'Date\' in ascending order. # Requirements: 1. Use the `pandas` library to filter and sort the DataFrame. 2. Ensure that the input DataFrame is not modified outside the scope of the function. Here is an example of how your function should functionally behave: ```python import pandas as pd data = { \'Name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Eva\'], \'Score\': [85, 95, 76, 88, 92], \'Date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-01\', \'2023-01-03\', \'2023-01-02\'] } df = pd.DataFrame(data) threshold = 90 high_scorers_df = filter_high_scorers(df, threshold) print(high_scorers_df) ``` Ensure to handle any potential exceptions and provide robust error handling. **Hint:** Utilize DataFrame methods such as `query` or boolean indexing for filtering and `sort_values` for sorting.","solution":"import pandas as pd def filter_high_scorers(dataframe, threshold): Returns a DataFrame containing rows where the \'Score\' is greater than or equal to the given threshold, sorted by \'Date\' in ascending order. Parameters: dataframe (pd.DataFrame): The input DataFrame with columns \'Name\', \'Score\', and \'Date\'. threshold (int): The minimum score to filter the DataFrame on. Returns: pd.DataFrame: Filtered and sorted DataFrame. if \'Score\' not in dataframe.columns or \'Date\' not in dataframe.columns: raise ValueError(\\"Input DataFrame must contain \'Score\' and \'Date\' columns\\") # Filter rows based on the threshold filtered_df = dataframe[dataframe[\'Score\'] >= threshold] # Sort the filtered DataFrame by \'Date\' in ascending order sorted_df = filtered_df.sort_values(by=\'Date\') return sorted_df.reset_index(drop=True)"},{"question":"You need to implement a Python function that takes a list of integers and returns a dictionary where the keys are the unique integers from the list, and the values are the counts of their occurrences. **Function Name:** ```python def count_occurrences(lst: List[int]) -> Dict[int, int] ``` **Parameters:** - `lst`: A list of integers. (1 ≤ len(lst) ≤ 1000; -1000 ≤ lst[i] ≤ 1000) **Returns:** - A dictionary where the keys are the integers from the list and the values are the counts of their occurrences. **Example Usage:** ```python assert count_occurrences([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3} assert count_occurrences([4, 4, 4, 4]) == {4: 4} assert count_occurrences([1, -1, 1, -1, 0]) == {1: 2, -1: 2, 0: 1} ``` # Detailed Instructions: - You need to iterate over the list and keep track of the occurrences of each integer. - Use a dictionary to store the counts. - Ensure the function runs efficiently even for the maximum input size. Your implementation should not print anything or read any input; instead, it should only return the dictionary with the counts.","solution":"from typing import List, Dict def count_occurrences(lst: List[int]) -> Dict[int, int]: Returns a dictionary where the keys are the unique integers from the list, and the values are the counts of their occurrences. count_dict = {} for num in lst: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict"},{"question":"You are requested to implement a Python function that takes a list of strings and a list of integers as input and returns a dictionary. The function should map each string to the associated integer from the two lists using their respective positions as keys and values. If the lists are of unequal length, the function should only map up to the length of the shorter list, ignoring any extra elements. Here is a detailed breakdown of what the function should do: 1. **Input Lists**: - `strings` is a list of strings. - `integers` is a list of integers. 2. **Mapping**: - Create a dictionary that maps each string to the corresponding integer from their respective positions in the lists. - If the lists are of different lengths, ignore any additional elements from the longer list. 3. **Return Dictionary**: - Return the resulting dictionary. **Function Signature**: ```python def map_strings_to_integers(strings: list, integers: list) -> dict: ``` **Example**: ```python strings = [\\"a\\", \\"b\\", \\"c\\", \\"d\\"] integers = [1, 2, 3] result = map_strings_to_integers(strings, integers) print(result) # Output: {\'a\': 1, \'b\': 2, \'c\': 3} ``` ```python strings = [\\"apple\\", \\"banana\\"] integers = [5, 10, 15] result = map_strings_to_integers(strings, integers) print(result) # Output: {\'apple\': 5, \'banana\': 10} ```","solution":"def map_strings_to_integers(strings: list, integers: list) -> dict: Maps each string in the `strings` list to the corresponding integer in the `integers` list. If the lists are of unequal length, only maps up to the length of the shorter list. Parameters: strings (list): A list of strings. integers (list): A list of integers. Returns: dict: A dictionary where the keys are the strings and the values are the integers. return dict(zip(strings, integers))"},{"question":"In this problem, you are required to write a Python function named `find_longest_substring` that takes a string `s` as an input and returns the longest substring of `s` in which every character appears at least `k` times. The aim is to understand string manipulation and efficient substring analysis using sliding window techniques or dynamic programming. Here are the steps and requirements: 1. The function should initially validate the input to ensure that `s` is a non-empty string and `k` is a positive integer. 2. Traverse through different possible substrings of `s` to find the longest substring where each character\'s frequency is at least `k`. 3. Use efficient data structures such as dictionaries to keep track of character frequencies within the current sliding window. 4. Adjust the sliding window boundaries to satisfy the condition that every character in the substring appears at least `k` times. **Function Signature:** ```python def find_longest_substring(s: str, k: int) -> str: pass ``` **Example Usage:** ```python # Example 1 s = \\"aaabb\\" k = 3 # The longest substring where each character appears at least 3 times is \\"aaa\\". print(find_longest_substring(s, k)) # Output: \\"aaa\\" # Example 2 s = \\"ababbc\\" k = 2 # The longest substring where each character appears at least 2 times is \\"ababb\\". print(find_longest_substring(s, k)) # Output: \\"ababb\\" ``` **Constraints:** - 1 <= len(s) <= 10^4 - 1 <= k <= len(s) Make sure to handle edge cases, such as when `s` has no valid substring meeting the criteria or when `k` exceeds the length of `s`. The goal is to ensure efficiency while processing substrings and provide correct results within reasonable time limits.","solution":"def find_longest_substring(s: str, k: int) -> str: if not s or k <= 0: return \\"\\" def valid_count(char_count, k): for count in char_count.values(): if count > 0 and count < k: return False return True n = len(s) max_len = 0 longest_substring = \\"\\" for unique_chars in range(1, 27): # max 26 letters in English alphabet left = 0 right = 0 char_count = {} current_unique = 0 count_at_least_k = 0 while right < n: if current_unique <= unique_chars: if s[right] in char_count: if char_count[s[right]] == 0: current_unique += 1 char_count[s[right]] += 1 if char_count[s[right]] == k: count_at_least_k += 1 else: char_count[s[right]] = 1 current_unique += 1 if char_count[s[right]] == k: count_at_least_k += 1 right += 1 else: if s[left] in char_count: if char_count[s[left]] == k: count_at_least_k -= 1 char_count[s[left]] -= 1 if char_count[s[left]] == 0: current_unique -= 1 left += 1 if current_unique == count_at_least_k: if right - left > max_len: max_len = right - left longest_substring = s[left:right] return longest_substring"},{"question":"Create a function that identifies and plots the peaks in a noisy sine wave signal. First, generate a noisy sine wave dataset. Next, use scipy.signal.find_peaks to detect the peaks of this signal. Finally, plot the original noisy sine wave and mark the identified peaks using matplotlib. The function should output: tuple: Axes: The matplotlib Axes object of the plot. ndarray: The indices of the detected peaks. You should write self-contained code starting with: ```python import numpy as np import matplotlib.pyplot as plt from scipy.signal import find_peaks def task_func(frequency=5, sample_rate=1000, duration=2, noise_level=0.3): ```","solution":"import numpy as np import matplotlib.pyplot as plt from scipy.signal import find_peaks def task_func(frequency=5, sample_rate=1000, duration=2, noise_level=0.3): Identifies and plots the peaks in a noisy sine wave signal. Parameters: - frequency: Frequency of the sine wave. - sample_rate: Sampling rate of the signal. - duration: Duration of the signal in seconds. - noise_level: Standard deviation of the Gaussian noise added to the sine wave. Returns: - Axes: The matplotlib Axes object of the plot. - ndarray: The indices of the detected peaks. # Generate time array t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False) # Generate noisy sine wave signal signal = np.sin(2 * np.pi * frequency * t) + noise_level * np.random.randn(t.size) # Find peaks in the signal peaks, _ = find_peaks(signal) # Plotting the signal and peaks fig, ax = plt.subplots() ax.plot(t, signal, label=\'Noisy Sine Wave\') ax.plot(t[peaks], signal[peaks], \'rx\', label=\'Detected Peaks\') ax.legend() ax.set_xlabel(\'Time [s]\') ax.set_ylabel(\'Amplitude\') ax.set_title(\'Detected Peaks in Noisy Sine Wave\') plt.show() return ax, peaks"},{"question":"In this problem, you are required to implement a function named `median_house_value` that finds the median house value in a given dataset of house prices. The dataset will be a list of integers where each integer represents the price of a house in a particular region. Your task is to implement the following: 1. **Read and Parse Data**: The function will receive a list of integers which represent house prices. 2. **Calculate Median**: Compute the median value of the house prices. 3. **Return Result**: Your function should return this median value. # Function Signature ```python def median_house_value(prices: List[int]) -> float: ``` # Example Below are some examples of how your function will be called and its expected output: ```python example_1 = [100000, 150000, 120000, 130000, 125000] print(median_house_value(example_1)) # Output: 125000 example_2 = [50000, 40000, 60000, 30000, 70000, 80000] print(median_house_value(example_2)) # Output: 55000.0 ``` # Requirements - You must handle both even and odd number of house prices correctly. - The function should be efficient and handle large datasets gracefully. - You are not allowed to use external libraries for calculating the median, except for `statistics`. # Note - The list of house prices provided as input will not be empty. - The house prices can be large numbers, ensure you handle them correctly.","solution":"from typing import List def median_house_value(prices: List[int]) -> float: Returns the median value of a list of house prices. :param prices: List of integers where each integer represents the price of a house. :return: The median value of the house prices. prices.sort() n = len(prices) if n % 2 == 1: return prices[n // 2] else: mid1 = n // 2 mid2 = mid1 - 1 return (prices[mid1] + prices[mid2]) / 2.0"},{"question":"Write a function that reads a CSV file containing product data and outputs a summary of products within a specified price range and category. The function should be able to handle the following cases: 1. If the CSV file does not exist, raise a FileNotFoundError. 2. If the category does not exist in the CSV file, return an empty list. 3. If there are no products within the specified price range, return an empty list. The CSV file will have the following columns: `id`, `name`, `category`, `price`. The function should output: - a list of product names that fall within the specified price range and category. - If there are no products or the category does not exist, return an empty list. You should write self-contained code starting with: ``` import csv def filter_products(csv_file_path, min_price, max_price, category): ```","solution":"import csv def filter_products(csv_file_path, min_price, max_price, category): try: with open(csv_file_path, mode=\'r\') as file: reader = csv.DictReader(file) products = [row[\'name\'] for row in reader if category == row[\'category\'] and min_price <= float(row[\'price\']) <= max_price] return products except FileNotFoundError as e: raise FileNotFoundError(f\\"The file {csv_file_path} does not exist.\\") from e"},{"question":"In a banking system, you need to write a function `process_transactions` that takes a list of transaction records and generates a summary for each account involved. Each transaction record includes the `transaction_id`, `account_id`, `type` (\\"credit\\" or \\"debit\\"), and `amount`. The summary for each account should include the total balance, total credit amount, and total debit amount. Your function must meet the following requirements: 1. Accumulate the balance for each account by processing the list of transactions: - For a \\"credit\\" transaction, increase the account balance by the transaction amount. - For a \\"debit\\" transaction, decrease the account balance by the transaction amount. 2. Maintain a summary that tracks, for each account: - The total balance. - The total amount credited to the account. - The total amount debited from the account. 3. Return the summary as a dictionary mapping from `account_id` to another dictionary with keys `balance`, `total_credit`, and `total_debit`. Function signature: ```python def process_transactions(transactions: List[Dict[str, Union[str, int, float]]]) -> Dict[int, Dict[str, float]]: ``` Arguments: - `transactions` (List[Dict[str, Union[str, int, float]]]): A list of dictionaries, each containing: - `transaction_id` (str): A unique identifier for the transaction. - `account_id` (int): The ID of the account involved in the transaction. - `type` (str): The type of the transaction, either \\"credit\\" or \\"debit\\". - `amount` (float): The amount of the transaction. Returns: - `summary` (Dict[int, Dict[str, float]]): A dictionary where each key is an `account_id` and the corresponding value is a dictionary with keys: - `balance` (float): The total balance of the account after processing all transactions. - `total_credit` (float): The total amount credited to the account. - `total_debit` (float): The total amount debited from the account.","solution":"from typing import List, Dict, Union def process_transactions(transactions: List[Dict[str, Union[str, int, float]]]) -> Dict[int, Dict[str, float]]: summary = {} for transaction in transactions: account_id = transaction[\'account_id\'] trans_type = transaction[\'type\'] amount = transaction[\'amount\'] if account_id not in summary: summary[account_id] = {\'balance\': 0.0, \'total_credit\': 0.0, \'total_debit\': 0.0} if trans_type == \'credit\': summary[account_id][\'balance\'] += amount summary[account_id][\'total_credit\'] += amount elif trans_type == \'debit\': summary[account_id][\'balance\'] -= amount summary[account_id][\'total_debit\'] += amount return summary"},{"question":"You are tasked with creating a function named `optimizePortfolio` that helps in determining the optimal distribution of an investment portfolio. The function should take as input a list of expected returns for each asset, a correlation matrix which represents the correlation coefficients between each pair of assets, and a risk tolerance parameter. The provided code snippet outlines basic structure to simulate return distributions and optimize the investment portfolio: ```python def simulateReturns(expected_returns, correlation_matrix): # Simulate normally distributed returns based on expected returns and correlation structure pass def optimizeWeights(simulated_returns, risk_tolerance): # Optimize weights based on simulated returns and risk tolerance pass ``` However, the code is incomplete. Your task is to: 1. Implement the function `simulateReturns` which generates a simulation of asset returns. For simplicity, assume this function returns a normally distributed random matrix of returns where the mean of each asset\'s returns is given by `expected_returns` and the covariance matrix is derived from `correlation_matrix`. 2. Implement the function `optimizeWeights` which performs the optimization to distribute weights to assets based on the simulated returns and risk tolerance. Assume that this function minimizes the risk (standard deviation) under the constraint that the expected return is above a threshold determined by the risk tolerance. # Function Signature: ```python def optimizePortfolio(expected_returns: list, correlation_matrix: list, risk_tolerance: float) -> list: ``` # Parameters: - `expected_returns`: A list of expected return percentages for each asset. - `correlation_matrix`: A 2D list representing a symmetric matrix with correlation coefficients for each pair of assets. - `risk_tolerance`: A float representing the risk tolerance parameter. Higher values indicate higher tolerance for risk. # Returns: - A list of weights representing the proportion of total investment assigned to each asset. # Example: ```python # Example input expected_returns = [0.05, 0.1, 0.07] correlation_matrix = [ [1.0, 0.2, 0.15], [0.2, 1.0, 0.3], [0.15, 0.3, 1.0] ] risk_tolerance = 0.1 # Example output # The output should be computed based on the optimization algorithm, # ensuring expected return is above the threshold defined by risk tolerance # and minimizing the portfolio risk (standard deviation). weights = [0.4, 0.3, 0.3] ``` Note: Use appropriate libraries like `numpy` to handle matrix operations and `scipy.optimize` for optimization.","solution":"import numpy as np from scipy.optimize import minimize def simulateReturns(expected_returns, correlation_matrix, num_simulations=1000): Generate a simulation of asset returns. :param expected_returns: A list of expected return percentages for each asset. :param correlation_matrix: A 2D list representing a symmetric matrix with correlation coefficients for each pair of assets. :param num_simulations: Number of simulations to perform. :return: A matrix where each row is a simulated returns vector. mean = np.array(expected_returns) cov_matrix = np.multiply(np.outer(mean, mean), correlation_matrix) simulated_returns = np.random.multivariate_normal(mean, cov_matrix, num_simulations) return simulated_returns def optimizeWeights(simulated_returns, risk_tolerance): Optimizes weights based on simulated returns and risk tolerance. :param simulated_returns: A matrix where each row is a simulated returns vector. :param risk_tolerance: A float representing the risk tolerance parameter. :return: A list of optimized weights. num_assets = simulated_returns.shape[1] def portfolio_performance(weights): returns = np.dot(simulated_returns, weights) expected_return = np.mean(returns) risk = np.std(returns) return expected_return, risk def objective_function(weights): _, risk = portfolio_performance(weights) return risk constraints = ( {\'type\': \'eq\', \'fun\': lambda weights: np.sum(weights) - 1}, {\'type\': \'ineq\', \'fun\': lambda weights: np.mean(np.dot(simulated_returns, weights)) - risk_tolerance} ) bounds = tuple((0, 1) for _ in range(num_assets)) initial_guess = np.array(num_assets * [1. / num_assets]) result = minimize(objective_function, initial_guess, method=\'SLSQP\', bounds=bounds, constraints=constraints) return result.x def optimizePortfolio(expected_returns, correlation_matrix, risk_tolerance): Optimize the investment portfolio. :param expected_returns: A list of expected return percentages for each asset. :param correlation_matrix: A 2D list representing a symmetric matrix with correlation coefficients for each pair of assets. :param risk_tolerance: A float representing the risk tolerance parameter. :return: A list of weights representing the proportion of total investment assigned to each asset. simulated_returns = simulateReturns(expected_returns, correlation_matrix) weights = optimizeWeights(simulated_returns, risk_tolerance) return weights"},{"question":"You are asked to write a function that simulates an inventory management system for a small store. The function should keep track of the stock levels of various items and respond to customer purchase attempts. You will write a function `inventory_system(actions)` that takes in a list of tuples, `actions`, where each tuple represents an action to be performed. Each tuple consists of two elements: 1. A string that specifies the type of action: either \\"add\\" or \\"purchase\\". 2. A string that specifies the item involved in the action. The function should: 1. Maintain a dictionary to keep track of the stock levels of each item. 2. If the action is \\"add\\": - Increase the stock level of the specified item by 1. 3. If the action is \\"purchase\\": - If the stock level of the specified item is greater than 0: - Decrease the stock level by 1. - Print \\"Purchase successful\\". - If the stock level is 0: - Print \\"Item out of stock\\". Here is the function signature you need to create: ```python def inventory_system(actions): # Your code here ``` **Example:** ```python actions = [(\\"add\\", \\"apple\\"), (\\"add\\", \\"banana\\"), (\\"purchase\\", \\"apple\\"), (\\"purchase\\", \\"apple\\"), (\\"purchase\\", \\"banana\\")] inventory_system(actions) ``` In this example, the function will perform the following: - Add one apple to the stock. - Add one banana to the stock. - Successfully purchase one apple. - Print \\"Item out of stock\\" when attempting to purchase another apple (since it\'s already been bought). - Successfully purchase one banana.","solution":"def inventory_system(actions): Manages stock levels of various items based on \\"add\\" and \\"purchase\\" actions. Parameters: actions (list of tuples): A list of tuples where each tuple consists of an action (\\"add\\" or \\"purchase\\") and an item. inventory = {} for action, item in actions: if action == \\"add\\": if item in inventory: inventory[item] += 1 else: inventory[item] = 1 elif action == \\"purchase\\": if item in inventory and inventory[item] > 0: inventory[item] -= 1 print(\\"Purchase successful\\") else: print(\\"Item out of stock\\")"},{"question":"Write a function `subarray_sum` that calculates the number of continuous subarrays whose sum equals a given target value. A subarray is a contiguous part of an array. Function Specification - Function Name: `subarray_sum` - Parameters: - `arr` (List[int]): A list of integers - `target` (int): The target sum of the subarrays - Returns: - `int`: The number of continuous subarrays whose sum equals the target value Requirements 1. Iterate through the list to check all possible continuous subarrays. 2. Keep track of the sum of the current subarray and reset it when needed. 3. Ensure the function handles both positive and negative integers. # Example ```python subarray_sum([1, 1, 1], 2) ``` Output should be 2, as the subarrays [1, 1] and [1, 1] both sum to 2. # Example ```python subarray_sum([1, -1, 0], 0) ``` Output should be 3, as the subarrays [1, -1], [-1, 0], and [0] all sum to 0. # Hints - Consider using a dictionary to keep track of the cumulative sums and their frequencies. - Initialize the counter for cumulative sum 0 to handle subarrays that sum to the target value starting from the beginning of the array.","solution":"def subarray_sum(arr, target): Calculate the number of continuous subarrays whose sum equals the target value. Parameters: - arr: List[int] - A list of integers - target: int - The target sum of the subarrays Returns: - int - The number of continuous subarrays whose sum equals the target value sum_counts = {0: 1} curr_sum = 0 count = 0 for num in arr: curr_sum += num if curr_sum - target in sum_counts: count += sum_counts[curr_sum - target] sum_counts[curr_sum] = sum_counts.get(curr_sum, 0) + 1 return count"},{"question":"In this problem, you will write a Python function called `longest_common_substring` that finds the longest common substring between two given strings. The longest common substring is defined as the longest sequence of characters that appear contiguously in both strings in the same order. **Function Signature:** ```python def longest_common_substring(str1: str, str2: str) -> str: pass ``` **Parameters:** - `str1`: A string consisting of ASCII characters. - `str2`: A string consisting of ASCII characters. **Returns:** - A string representing the longest common substring. If there are multiple substrings of the same length, return the one that appears first in `str1`. If no common substring is found, return an empty string. **Given Constraints:** 1. Input strings are non-empty and consist only of ASCII characters. 2. The maximum length of each string is 1000 characters. **Example Usage:** ```python longest_common_substring(\\"abcdfgh\\", \\"abedfhr\\") # Returns: \\"ab\\" ``` **Hints:** - Use dynamic programming to keep track of the lengths of common substrings ending at different positions of `str1` and `str2`. - Consider using a matrix to store the lengths of common substrings. - Iterate through each character of both strings to update the matrix and find the maximum value. **Relevant Library Function:** - None required, but you may use standard Python libraries for string manipulation and matrix operations.","solution":"def longest_common_substring(str1: str, str2: str) -> str: # Get lengths of both strings m, n = len(str1), len(str2) # Create a 2D array to store the length of longest common suffixes dp = [[0] * (n + 1) for _ in range(m + 1)] # To store length of the longest common substring length_of_lcsub = 0 # To store the ending point of longest common substring in str1 end_index_str1 = 0 # Build dp array for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > length_of_lcsub: length_of_lcsub = dp[i][j] end_index_str1 = i else: dp[i][j] = 0 # If no common substring found, return empty string if length_of_lcsub == 0: return \\"\\" # Longest common substring start_index_str1 = end_index_str1 - length_of_lcsub return str1[start_index_str1:end_index_str1]"},{"question":"You are required to create a function called `analyze_sales_data` to analyze and summarize sales data from multiple CSV files. This analysis will be implemented in a command-line interface (CLI) using Python\'s `argparse` for argument parsing, `pandas` for data manipulation, and `matplotlib` for visualizations. The `analyze_sales_data` function should: 1. Take a list of file paths to CSV files as input via command line arguments. 2. Read each CSV file into a pandas DataFrame. 3. Merge all DataFrames into a single DataFrame, assuming common columns across files. 4. Calculate the total sales for each product. 5. Generate summary statistics for the entire dataset (mean, median, and standard deviation of sales). 6. Create a bar chart of total sales per product using `matplotlib`. 7. Save the bar chart to an output file and print the summary statistics. The `analyze_sales_data` function should be structured as follows: ```python import argparse import pandas as pd import matplotlib.pyplot as plt def analyze_sales_data(file_paths): # Your implementation here pass if __name__ == \\"__main__\\": parser = argparse.ArgumentParser(description=\\"Analyze sales data from multiple CSV files.\\") parser.add_argument(\'file_paths\', nargs=\'+\', help=\\"Paths to CSV files to be analyzed.\\") args = parser.parse_args() analyze_sales_data(args.file_paths) ``` Libraries: - `argparse` (for command-line argument parsing) - `pandas` (for data manipulation) - `matplotlib` (for data visualization) **Input:** - A list of CSV file paths provided via command-line arguments. **Output:** - A saved bar chart image file of total sales per product. - Printed summary statistics. Example usage: ```bash python analyze_sales_data.py sales_january.csv sales_february.csv ``` The CSV files are assumed to have at least the following columns: - `Product`: The name of the product. - `Sales`: The number of units sold. Ensure the function handles: - Reading multiple CSV files. - Data merging and aggregation. - Error handling for file reading and data consistency. - Generation and saving of the bar chart. - Calculation and display of summary statistics.","solution":"import argparse import pandas as pd import matplotlib.pyplot as plt def analyze_sales_data(file_paths): # Read each CSV file dataframes = [pd.read_csv(file_path) for file_path in file_paths] # Merge all DataFrames merged_df = pd.concat(dataframes, ignore_index=True) # Calculate total sales for each product total_sales = merged_df.groupby(\'Product\')[\'Sales\'].sum() # Summary statistics summary_stats = merged_df[\'Sales\'].describe()[[\'mean\', \'50%\', \'std\']] summary_stats = summary_stats.rename({\'50%\': \'median\'}) # Plot the total sales per product plt.figure(figsize=(10, 6)) total_sales.plot(kind=\'bar\') plt.title(\'Total Sales per Product\') plt.xlabel(\'Product\') plt.ylabel(\'Total Sales\') plt.tight_layout() plt.savefig(\'total_sales_per_product.png\') # Print the summary statistics print(\\"Summary Statistics:\\") print(summary_stats) if __name__ == \\"__main__\\": parser = argparse.ArgumentParser(description=\\"Analyze sales data from multiple CSV files.\\") parser.add_argument(\'file_paths\', nargs=\'+\', help=\\"Paths to CSV files to be analyzed.\\") args = parser.parse_args() analyze_sales_data(args.file_paths)"},{"question":"**Context:** You are working on a project that requires processing a string of letters to find all anagrams of a given word within that string. An anagram is formed by rearranging the letters of a word to produce a new word, using all the original letters exactly once. Your task is to write a function that identifies all starting indices of substrings in the given string, which are anagrams of the specified word. **Function to Implement:** - **Function Name:** `find_anagrams` - **Input Parameters:** 1. `s`: A string in which to search for anagrams (composed of lowercase English letters). 2. `p`: A word for which to find anagrams within the given string (composed of lowercase English letters). - **Output:** - `result`: A list of integer indices representing the starting positions of each anagram of the word `p` found within the string `s`. **Instructions:** - Implement the function `find_anagrams` as specified above. - Use efficient methods to ensure the solution works within a reasonable time frame, even for large strings. - Assume the users are familiar with string manipulation and basic algorithmic concepts. ```python def find_anagrams(s, p): from collections import Counter result = [] p_len = len(p) s_len = len(s) if p_len > s_len: return result p_counter = Counter(p) s_counter = Counter(s[:p_len-1]) for i in range(p_len-1, s_len): s_counter[s[i]] += 1 if s_counter == p_counter: result.append(i-p_len+1) s_counter[s[i-p_len+1]] -= 1 if s_counter[s[i-p_len+1]] == 0: del s_counter[s[i-p_len+1]] return result ``` #","solution":"def find_anagrams(s, p): from collections import Counter result = [] p_len = len(p) s_len = len(s) if p_len > s_len: return result # Set up initial counters p_counter = Counter(p) s_counter = Counter(s[:p_len-1]) for i in range(p_len-1, s_len): # Add the next character in the window s_counter[s[i]] += 1 # If the windows match, record the start index if s_counter == p_counter: result.append(i - p_len + 1) # Remove the character that is left behind as window moves right s_counter[s[i - p_len + 1]] -= 1 if s_counter[s[i - p_len + 1]] == 0: del s_counter[s[i - p_len + 1]] return result"},{"question":"In this problem, you need to implement a function named `reverse_words` which takes a string as input and reverses the words in the string while maintaining the original whitespaces. For this problem, a word is defined as a sequence of non-space characters. Consider the following points while implementing the function: 1. You should preserve multiple spaces between words. 2. The function should handle leading and trailing spaces. 3. Handle if the input string is empty or contains only spaces. Your task is to write a function `reverse_words(s)` that takes a string `s` as input and returns a new string where the words are reversed in order. **Example:** ```python def reverse_words(s): # Your implementation here s = \\" the sky is blue \\" print(reverse_words(s)) ``` Output: ``` \\" blue is sky the \\" ``` #","solution":"def reverse_words(s): Reverses the words in the input string while maintaining the original whitespaces. # Split the string by whitespaces while preserving them words = s.split(\\" \\") # Reverse the list of words reversed_words = words[::-1] # Join the reversed words with a space character to form the final result reversed_s = \\" \\".join(reversed_words) return reversed_s"},{"question":"You are required to implement a function `find_shortest_path` aimed at finding the shortest path in a weighted directed graph using Dijkstra\'s algorithm. The function will receive the graph representation as an adjacency list, the start node, and the target node as inputs. The function should follow this signature: ```python def find_shortest_path(graph, start, target): ``` - `graph`: A dictionary where the keys are node identifiers and the values are dictionaries of neighboring node identifiers with their corresponding edge weights. - `start`: The starting node from which to calculate the shortest path. - `target`: The target node to which the shortest path is calculated. **Requirements:** 1. **Initialize data structures**: Use a priority queue (min-heap) to keep track of nodes to explore, a dictionary to store the shortest distances from the start node to each node, and a set to keep track of visited nodes. 2. **Priority queue setup**: Push the starting node into the priority queue with a distance of 0. 3. **Distance updates**: For each node, if the current shortest distance is greater than the new found distance, update and push the new distance with the corresponding node into the priority queue. 4. **Path reconstruction**: Use a dictionary to store the predecessors of each node to reconstruct the shortest path from start to target. 5. **Return the shortest path** as a list of nodes traversed from start to target and the total distance. If no path exists, return an empty list and a distance of infinity. Example implementation: ```python # Example graph structure graph = { \'A\': {\'B\': 1, \'C\': 4}, \'B\': {\'C\': 2, \'D\': 5}, \'C\': {\'D\': 1}, \'D\': {} } # Example function usage path, distance = find_shortest_path(graph, \'A\', \'D\') # should return ([\'A\', \'B\', \'C\', \'D\'], 4) ``` **Objective**: - Implement the find_shortest_path function using Dijkstra\'s algorithm. - Ensure the function returns both the shortest path as a list of nodes and the associated distance.","solution":"import heapq def find_shortest_path(graph, start, target): Implements Dijkstra\'s algorithm to find the shortest path in a weighted directed graph. :param graph: Dictionary where the keys are node identifiers and the values are dictionaries of neighboring node identifiers with their corresponding edge weights. :param start: The starting node identifier. :param target: The target node identifier. :return: A tuple containing the shortest path as a list of nodes and the total distance. If no path exists, returns ([], float(\'inf\')). # Initialize the priority queue, distances, and paths priority_queue = [] heapq.heappush(priority_queue, (0, start)) distances = {node: float(\'inf\') for node in graph} distances[start] = 0 previous_nodes = {node: None for node in graph} visited = set() while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_node in visited: continue visited.add(current_node) if current_node == target: path = [] while previous_nodes[current_node] is not None: path.insert(0, current_node) current_node = previous_nodes[current_node] path.insert(0, start) return path, current_distance for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance previous_nodes[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) return [], float(\'inf\')"},{"question":"Implement a function that takes a pandas DataFrame and a list of categorical column names. The function should one-hot encode these categorical columns and return a new DataFrame with the original columns replaced by the one-hot encoded columns. Ensure that the new DataFrame maintains the original column order, with the one-hot encoded columns replacing the original categorical columns in their respective positions. The function should raise the following exceptions: - ValueError: Raised if any of the columns listed in `cols` are not present in the DataFrame or are not categorical columns. - TypeError: Raised if input parameters are not of expected types (i.e., `df` is not a DataFrame, or `cols` is not a list). The function should output: - pandas.DataFrame: A pandas DataFrame with the specified categorical columns replaced by one-hot encoded columns. You should write self-contained code starting with: ``` import pandas as pd def one_hot_encode(df, cols): ```","solution":"import pandas as pd def one_hot_encode(df, cols): One-hot encodes the specified categorical columns in the dataframe and returns a new DataFrame with the original categorical columns replaced by the one-hot encoded columns. Args: df (pd.DataFrame): The dataframe to one-hot encode. cols (list): List of column names to one-hot encode. Returns: pd.DataFrame: A new DataFrame with the specified columns one-hot encoded. Raises: ValueError: If any of the columns listed in `cols` are not present in the DataFrame or are not categorical columns. TypeError: If `df` is not a DataFrame or `cols` is not a list. if not isinstance(df, pd.DataFrame): raise TypeError(\\"Input df must be a pandas DataFrame\\") if not isinstance(cols, list): raise TypeError(\\"Input cols must be a list\\") for col in cols: if col not in df.columns: raise ValueError(f\\"Column {col} not found in DataFrame\\") if not pd.api.types.is_categorical_dtype(df[col]) and not pd.api.types.is_object_dtype(df[col]): raise ValueError(f\\"Column {col} is not a categorical column\\") return pd.get_dummies(df, columns=cols)"},{"question":"**Context:** You have a list of words and you need to determine if any of them are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. **Task:** You\'re required to write a function named `find_anagrams(word_list)` that: 1. Takes a list of words as input. 2. Identifies and groups words that are anagrams of each other. 3. Returns a list of groups, where each group is a list of anagrams. **Function Arguments:** - `word_list (list of str)`: A list of words (e.g., [\'listen\', \'silent\', \'enlist\', \'google\', \'gogole\', \'rat\', \'tar\', \'art\']). **Function Returns:** - `anagram_groups (list of list of str)`: A list where each element is a list of anagrams (e.g., [[\'listen\', \'silent\', \'enlist\'], [\'google\', \'gogole\'], [\'rat\', \'tar\', \'art\']]). **Example Scenario:** ```python anagrams = find_anagrams([\'listen\', \'silent\', \'enlist\', \'google\', \'gogole\', \'rat\', \'tar\', \'art\']) print(anagrams) ``` In this example, the function should identify and group the anagrams \'listen\', \'silent\', and \'enlist\' together, \'google\' and \'gogole\' together, and \'rat\', \'tar\', and \'art\' together. The output should be: ```python [[\'listen\', \'silent\', \'enlist\'], [\'google\', \'gogole\'], [\'rat\', \'tar\', \'art\']] ``` **Assumption:** - No word in the list will be an anagram of itself. #","solution":"def find_anagrams(word_list): from collections import defaultdict anagrams = defaultdict(list) # Iterate over each word and group them by their sorted tuple of characters for word in word_list: sorted_word = tuple(sorted(word)) anagrams[sorted_word].append(word) # Extract only those groups which have more than 1 member to avoid non-anagram groups return [group for group in anagrams.values() if len(group) > 1]"},{"question":"You need to write a Python function called `calculate_average_grades()` that reads student grades from a CSV file and calculates the average grade for each student. The input CSV file has the following columns: `StudentID`, `Name`, `Subject`, and `Grade`. Your function should return a dictionary where the keys are student names and the values are their average grades. Here are the steps your function should perform: 1. Read the CSV file and parse its contents. 2. For each student, accumulate the grades for all subjects. 3. Calculate the average grade for each student. 4. Return a dictionary with student names as keys and their respective average grades as values. Assume the CSV file is located at: `\\"/path/to/student_grades.csv\\"` To summarize, implement a function with the following signature: ```python def calculate_average_grades(file_path: str) -> dict: pass ``` Make sure to handle any necessary imports and corner cases (e.g., missing or malformed data) within your function.","solution":"import csv from collections import defaultdict def calculate_average_grades(file_path: str) -> dict: Reads student grades from a CSV file and calculates the average grade for each student. Args: file_path (str): The path to the CSV file containing student grades. Returns: dict: A dictionary where keys are student names and values are their average grades. student_grades = defaultdict(list) try: with open(file_path, mode=\'r\', newline=\'\') as file: reader = csv.DictReader(file) for row in reader: try: student_name = row[\'Name\'] grade = float(row[\'Grade\']) student_grades[student_name].append(grade) except ValueError: pass # Ignore rows with invalid grade values except FileNotFoundError: raise FileNotFoundError(f\\"The file at {file_path} was not found.\\") average_grades = {} for student_name, grades in student_grades.items(): if grades: average_grades[student_name] = sum(grades) / len(grades) return average_grades"},{"question":"You are tasked with writing a function `calculate_flights_delay(airlines_data: List[Dict[str, Union[str, int]]], delay_threshold: int) -> Tuple[str, int]` that analyzes flight delays to determine which airline has the highest number of delayed flights exceeding a specified delay threshold. Your function should do the following: 1. Iterate through a list of dictionaries where each dictionary represents a flight, containing the keys \'airline\', \'flight_number\', and \'delay\' (in minutes). 2. Count the number of flights for each airline that exceed the specified delay threshold. 3. Determine which airline has the highest count of such delayed flights. 4. Return a tuple containing the airline name and the count of delays. Note: The dataset may contain multiple airlines and multiple flights per airline. Here is a template of how your function header should look: ```python from typing import List, Dict, Union, Tuple def calculate_flights_delay(airlines_data: List[Dict[str, Union[str, int]]], delay_threshold: int) -> Tuple[str, int]: # Your implementation here ``` # Example Usage: ```python airlines_data = [ {\'airline\': \'AirlineA\', \'flight_number\': \'A1\', \'delay\': 15}, {\'airline\': \'AirlineB\', \'flight_number\': \'B1\', \'delay\': 10}, {\'airline\': \'AirlineA\', \'flight_number\': \'A2\', \'delay\': 45}, {\'airline\': \'AirlineC\', \'flight_number\': \'C1\', \'delay\': 60}, {\'airline\': \'AirlineB\', \'flight_number\': \'B2\', \'delay\': 5}, {\'airline\': \'AirlineA\', \'flight_number\': \'A3\', \'delay\': 55}, {\'airline\': \'AirlineC\', \'flight_number\': \'C2\', \'delay\': 70} ] result = calculate_flights_delay(airlines_data, 30) # Should return (\'AirlineA\', 2) ``` # Requirements: - Ensure the function correctly identifies and counts the number of delayed flights per airline. - Use standard dictionary and list operations to perform your calculations. - Return the airline with the most delays over the given threshold and the corresponding delay count as a tuple.","solution":"from typing import List, Dict, Union, Tuple def calculate_flights_delay(airlines_data: List[Dict[str, Union[str, int]]], delay_threshold: int) -> Tuple[str, int]: airline_delays = {} for flight in airlines_data: airline = flight[\'airline\'] delay = flight[\'delay\'] if delay > delay_threshold: if airline in airline_delays: airline_delays[airline] += 1 else: airline_delays[airline] = 1 max_delays = 0 max_airline = None for airline, delays in airline_delays.items(): if delays > max_delays: max_delays = delays max_airline = airline return (max_airline, max_delays)"},{"question":"Write a function `string_matrix_multiply` to multiply a square matrix of strings with a given integer. The matrix is represented as a list of lists where each element is a string of digits. Your function should return a new matrix where each element is a string of digits, resulting from multiplying the integer with the numeric value of the corresponding original element. ```python def string_matrix_multiply(matrix, multiplier): # Your implementation here ``` Function Parameters: - `matrix`: A list of lists where each element is a string consisting of digits, representing a square matrix. - `multiplier`: Integer to multiply each element in the matrix. Function Behavior: 1. **Create a new matrix** where each element is an empty string initially. 2. **Populate the new matrix** such that each element is the numeric product of the corresponding element in the original matrix and the `multiplier`, represented as a string. 3. Return the new matrix. Requirements: - The original matrix elements must be converted from strings to integers for multiplication. - The resulting product should be converted back to strings before storing them in the new matrix. - Maintain the structure of the original matrix. # Example Input: ```python matrix = [ [\\"1\\", \\"2\\", \\"3\\"], [\\"4\\", \\"5\\", \\"6\\"], [\\"7\\", \\"8\\", \\"9\\"] ] multiplier = 3 ``` Output: ```python [ [\\"3\\", \\"6\\", \\"9\\"], [\\"12\\", \\"15\\", \\"18\\"], [\\"21\\", \\"24\\", \\"27\\"] ] ```","solution":"def string_matrix_multiply(matrix, multiplier): Multiply each element of a square matrix of strings by a given integer. Args: matrix (list of list of str): Square matrix where each element is a string of digits. multiplier (int): Multiplier to apply to each element of the matrix. Returns: list of list of str: New matrix where each element is the product of the original element and the multiplier, represented as a string. # Create a new matrix to hold the results result_matrix = [] # Iterate over each row in the matrix for row in matrix: # Create a new row for the result new_row = [] # Iterate over each element in the row for element in row: # Convert the element to an integer, multiply by the multiplier, # and convert back to string new_element = str(int(element) * multiplier) # Add the new element to the new row new_row.append(new_element) # Add the new row to the result matrix result_matrix.append(new_row) return result_matrix"},{"question":"**You are required to implement a function called `process_transactions(transactions_file, threshold)`. This function will read a CSV file containing user transaction data, filter out transactions that exceed a specified threshold, and save the valid transactions into a new CSV file called `filtered_transactions.csv`. Each transaction record includes the following columns: `transaction_id`, `user_id`, `amount`. **Functionality:** 1. Read the CSV file located at `transactions_file`. 2. Parse each transaction and check if the `amount` is less than or equal to the given `threshold`. 3. Write the filtered transactions to a new CSV file named `filtered_transactions.csv` in the same directory. Required libraries: `csv`, `os` **Function Signature:** ```python import os import csv def process_transactions(transactions_file, threshold): # implementation here ``` Example: if the `transactions_file` contains the following data and the `threshold` is 500: ``` transaction_id,user_id,amount 1,10,300 2,12,600 3,11,450 4,14,200 5,13,750 ``` The resulting `filtered_transactions.csv` should have content: ``` transaction_id,user_id,amount 1,10,300 3,11,450 4,14,200 ``` **Notes:** - Ensure the header is included in the output CSV file. - Validate that the input file exists and is properly formatted. - Handle any potential exceptions that may occur during file reading/writing operations.","solution":"import os import csv def process_transactions(transactions_file, threshold): if not os.path.isfile(transactions_file): raise FileNotFoundError(\\"The file specified does not exist\\") filtered_transactions = [] try: with open(transactions_file, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) if \'transaction_id\' not in reader.fieldnames or \'user_id\' not in reader.fieldnames or \'amount\' not in reader.fieldnames: raise ValueError(\\"CSV file is missing required columns\\") for row in reader: if float(row[\'amount\']) <= threshold: filtered_transactions.append(row) except Exception as e: raise e with open(\'filtered_transactions.csv\', \'w\', newline=\'\') as csvfile: fieldnames = [\'transaction_id\', \'user_id\', \'amount\'] writer = csv.DictWriter(csvfile, fieldnames=fieldnames) writer.writeheader() for row in filtered_transactions: writer.writerow(row)"},{"question":"Write a function `decode_phone_mnemonic` that takes a string representing a phone number mnemonic and returns all possible phone numbers it can represent. Assume the phone number is a standard 7-digit phone number, where each digit can be mapped to a set of letters as shown below: - 2: \\"ABC\\" - 3: \\"DEF\\" - 4: \\"GHI\\" - 5: \\"JKL\\" - 6: \\"MNO\\" - 7: \\"PQRS\\" - 8: \\"TUV\\" - 9: \\"WXYZ\\" The function should generate every possible combination of digits that corresponds to the given mnemonic string by substituting each letter with its respective digit. The mnemonic string will only include capital letters A-Z and must be exactly 7 characters long. ```python def decode_phone_mnemonic(mnemonic): Decodes a phone number mnemonic to all possible phone numbers. Parameters ---------- mnemonic : str A string of length 7 containing only capital letters A-Z. Returns ------- list A list containing all possible phone numbers as strings. pass ``` **Constraints:** - The input string will always be 7 characters long. - The input string will only contain capital letters A-Z. **Example:** ```python mnemonic = \\"CALLNOW\\" result = decode_phone_mnemonic(mnemonic) # Output: A list of phone numbers like [\'2255669\', \'2255666\', \'2255661\', ...] ``` The output list may contain multiple entries based on all the possible combinations derived from the provided mnemonic.","solution":"def decode_phone_mnemonic(mnemonic): Decodes a phone number mnemonic to all possible phone numbers. Parameters ---------- mnemonic : str A string of length 7 containing only capital letters A-Z. Returns ------- list A list containing all possible phone numbers as strings. digit_map = { \'A\': \'2\', \'B\': \'2\', \'C\': \'2\', \'D\': \'3\', \'E\': \'3\', \'F\': \'3\', \'G\': \'4\', \'H\': \'4\', \'I\': \'4\', \'J\': \'5\', \'K\': \'5\', \'L\': \'5\', \'M\': \'6\', \'N\': \'6\', \'O\': \'6\', \'P\': \'7\', \'Q\': \'7\', \'R\': \'7\', \'S\': \'7\', \'T\': \'8\', \'U\': \'8\', \'V\': \'8\', \'W\': \'9\', \'X\': \'9\', \'Y\': \'9\', \'Z\': \'9\' } phone_number = \'\'.join(digit_map[char] for char in mnemonic) return [phone_number]"},{"question":"You are required to create a Python function that generates a summarized report of transactions for a user\'s bank account. The function should take a username and a list of transactions as arguments and output a detailed report of the total amount of deposits and withdrawals, along with the current balance. Each transaction in the list is a dictionary with the following structure: ```python { \\"amount\\": float, # a positive or negative value \\"type\\": string # either \'deposit\' or \'withdrawal\' } ``` The key requirements for this function are: 1. The function should correctly differentiate between deposits and withdrawals. 2. Calculate the total amount of deposits and the total amount of withdrawals. 3. Calculate the current balance, starting from an initial balance of 0. 4. Print a detailed report of the user\'s transactions, including two separate lists for deposits and withdrawals with their respective amounts and types. 5. Return a dictionary containing the total deposits, total withdrawals, and the current balance. Function Specifications: - **Function Name:** `generate_report` - **Input Parameters:** - `username`: Name of the user (string). - `transactions`: List of transactions, where each transaction is a dictionary as described above. - **Output:** A dictionary containing: - `total_deposits`: Sum of all deposits. - `total_withdrawals`: Sum of all withdrawals. - `current_balance`: The current balance after all transactions. Ensure to implement the required calculations and formatting for generating the report. Example Usage: ```python transactions = [ {\\"amount\\": 100.0, \\"type\\": \\"deposit\\"}, {\\"amount\\": -50.0, \\"type\\": \\"withdrawal\\"}, {\\"amount\\": 200.0, \\"type\\": \\"deposit\\"}, {\\"amount\\": -30.0, \\"type\\": \\"withdrawal\\"} ] report = generate_report(\'JohnDoe\', transactions) ``` # Expected Output: 1. Print the report in the following format: ``` User: JohnDoe Transactions: Deposits: - 100.0 (deposit) - 200.0 (deposit) Withdrawals: - -50.0 (withdrawal) - -30.0 (withdrawal) Total Deposits: 300.0 Total Withdrawals: -80.0 Current Balance: 220.0 ``` 2. Return the dictionary: ```python { \\"total_deposits\\": 300.0, \\"total_withdrawals\\": -80.0, \\"current_balance\\": 220.0 } ``` Constraints: - The transactions list will always contain valid dictionary structures as specified. - All amounts in the transactions will be float values, and the \\"type\\" field will always have correct values (\'deposit\' or \'withdrawal\'). Libraries: No external libraries are required.","solution":"def generate_report(username, transactions): Generates a summarized report of transactions for a user\'s bank account. Parameters: - username: Name of the user (string). - transactions: List of transactions, where each transaction is a dictionary with \\"amount\\" and \\"type\\". Output: - Prints a detailed report. - Returns a dictionary with total deposits, total withdrawals, and current balance. total_deposits = 0.0 total_withdrawals = 0.0 current_balance = 0.0 deposits = [] withdrawals = [] for transaction in transactions: amount = transaction[\\"amount\\"] t_type = transaction[\\"type\\"] if t_type == \\"deposit\\": total_deposits += amount deposits.append(transaction) elif t_type == \\"withdrawal\\": total_withdrawals += amount withdrawals.append(transaction) current_balance += amount # Print report print(f\\"User: {username}\\") print(\\"Transactions:\\") print(\\"Deposits:\\") for deposit in deposits: print(f\\"- {deposit[\'amount\']} ({deposit[\'type\']})\\") print(\\"Withdrawals:\\") for withdrawal in withdrawals: print(f\\"- {withdrawal[\'amount\']} ({withdrawal[\'type\']})\\") print(f\\"Total Deposits: {total_deposits}\\") print(f\\"Total Withdrawals: {total_withdrawals}\\") print(f\\"Current Balance: {current_balance}\\") return { \\"total_deposits\\": total_deposits, \\"total_withdrawals\\": total_withdrawals, \\"current_balance\\": current_balance }"},{"question":"Write a function that reads a text file, computes the frequency of each word, and returns the `n` most common words as a list of tuples. Each tuple should contain the word and its frequency. Words should be compared in a case-insensitive manner and punctuation should be ignored. The function should: - Open a text file specified by the user. - Count the frequency of each word in the file, ignoring case and punctuation. - Return the `n` most common words along with their frequencies. You should write self-contained code starting with: ``` import re from collections import Counter def most_common_words(filename, n): ```","solution":"import re from collections import Counter def most_common_words(filename, n): Reads a text file, computes the frequency of each word, and returns the n most common words. Args: filename (str): The path to the text file. n (int): The number of most common words to return. Returns: List[Tuple[str, int]]: A list of tuples where each tuple contains a word and its frequency. with open(filename, \'r\') as file: text = file.read().lower() # Remove punctuation text = re.sub(r\'[W_]+\', \' \', text) words = text.split() # Count word frequencies word_counts = Counter(words) # Get the n most common words most_common = word_counts.most_common(n) return most_common"},{"question":"You are working on a sensor data processing system that needs to handle periodic readings from sensors. Each reading consists of three values: a timestamp, a sensor ID, and a reading value. Your task is to write a function that identifies and filters out noisy sensor data. A sensor reading is considered noisy if the difference between it and the previous valid reading from the same sensor exceeds a certain threshold. Write the function `filter_noisy_readings` that: 1. Takes a list of sensor readings, each represented as a tuple `(timestamp, sensor_id, value)`. 2. Takes a noise threshold, which is an integer. 3. Returns a new list of tuples with the noisy readings removed. The function signature should be: ```python def filter_noisy_readings(readings, threshold): ``` Example: ```python readings = [(1, \'A\', 100), (2, \'A\', 105), (3, \'A\', 200), (4, \'B\', 50), (5, \'B\', 52), (6, \'B\', 60), (7, \'A\', 110)] threshold = 10 filtered_readings = filter_noisy_readings(readings, threshold) print(filtered_readings) ``` Output: ```python [(1, \'A\', 100), (2, \'A\', 105), (4, \'B\', 50), (5, \'B\', 52), (6, \'B\', 60), (7, \'A\', 110)] ```","solution":"def filter_noisy_readings(readings, threshold): Filters out noisy sensor readings based on the given threshold. Args: readings (list of tuples): A list of tuples where each tuple contains (timestamp, sensor_id, value). threshold (int): The noise threshold. A reading is considered noisy if its value differs from the previous reading from the same sensor by more than the threshold. Returns: list of tuples: A list of tuples with noisy readings removed. last_valid_reading = {} filtered_readings = [] for timestamp, sensor_id, value in readings: if sensor_id in last_valid_reading: last_valid_value = last_valid_reading[sensor_id] if abs(value - last_valid_value) <= threshold: filtered_readings.append((timestamp, sensor_id, value)) last_valid_reading[sensor_id] = value else: filtered_readings.append((timestamp, sensor_id, value)) last_valid_reading[sensor_id] = value return filtered_readings"},{"question":"Create a function `findLongestConsecutiveSubsequence(nums)` that finds the length of the longest consecutive elements subsequence in an unsorted list of integers. The subsequence is considered consecutive if the elements range from some integer `n` to `n+k` (inclusive) without any gaps. The function should have the following structure: ```python def findLongestConsecutiveSubsequence(nums): # implementation ``` **Example:** ```python findLongestConsecutiveSubsequence([100, 4, 200, 1, 3, 2]) # returns 4 since the longest consecutive subsequence is [1, 2, 3, 4] findLongestConsecutiveSubsequence([0, 0, -1]) # returns 2 since the longest consecutive subsequence is [-1, 0] ``` **Instructions:** 1. The function will take one argument: - `nums`: a list of integers. 2. Initialize the maximum length of consecutive subsequence to 0. 3. Convert the list to a set to enable O(1) look-ups. 4. Iterate through each number in the list: - For each number `num`, if `num - 1` is not present in the set, it indicates the start of a new sequence. - Initialize variable `current_num` to `num` and `current_streak` to 1. - Continuously increment `current_num` and `current_streak` while `current_num + 1` exists in the set. 5. Update the maximum length if the current streak is longer than the previous longest streak. 6. Return the maximum length found.","solution":"def findLongestConsecutiveSubsequence(nums): Returns the length of the longest consecutive elements subsequence in an unsorted list of integers. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums: # Check if this number is the start of a sequence if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"In this problem, you are tasked with simulating a simple predator-prey model known as the Lotka-Volterra equations, using the `numpy` library for numerical operations and `matplotlib` for plotting the population dynamics of prey and predators over time. You are required to write a function named `plot_predator_prey` that performs the following steps: 1. Define the differential equations for the predator-prey model. 2. Use the Euler method to numerically integrate these equations over the specified time period. 3. Plot the population dynamics of both prey and predators on the same graph. The Lotka-Volterra equations are given by: - dR/dt = aR - bRP - dP/dt = -cP + dRP Where: - R is the prey (rabbit) population. - P is the predator (fox) population. - a is the natural growth rate of rabbits in the absence of predation. - b is the predation rate coefficient. - c is the natural death rate of foxes in the absence of food (rabbits). - d is the reproduction rate of foxes per rabbit eaten. Use the following specifications: - Initial rabbit population (`R0`): 40 - Initial fox population (`P0`): 9 - Rate constants `a`, `b`, `c`, `d`: 0.1, 0.02, 0.3, 0.01 respectively - Simulation time (`T`): 200 time units - Time step (`dt`): 0.1 time units **Function Signature:** ```python def plot_predator_prey(): pass ``` **Requirements:** - Use Euler\'s method to solve the differential equations. - Use `numpy` arrays for storing population values. - Use `matplotlib` to plot the populations of rabbits and foxes over time. Your task is to fill in the `plot_predator_prey` function code such that it accurately simulates, plots, and labels the prey and predator populations over the given time period.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_predator_prey(): # Initial conditions R0 = 40 # initial rabbit population P0 = 9 # initial fox population # Parameters a = 0.1 # natural growth rate of rabbits b = 0.02 # predation rate coefficient c = 0.3 # natural death rate of foxes d = 0.01 # reproduction rate of foxes per rabbit eaten # Time settings T = 200 # total time dt = 0.1 # time step num_steps = int(T / dt) + 1 # number of time steps # Arrays to store populations rabbits = np.zeros(num_steps) foxes = np.zeros(num_steps) # Initial values rabbits[0] = R0 foxes[0] = P0 # Euler integration for step in range(1, num_steps): dR = a * rabbits[step-1] - b * rabbits[step-1] * foxes[step-1] dP = -c * foxes[step-1] + d * rabbits[step-1] * foxes[step-1] rabbits[step] = rabbits[step-1] + dR * dt foxes[step] = foxes[step-1] + dP * dt # Time array for plotting time = np.linspace(0, T, num_steps) # Plotting plt.figure(figsize=(10, 6)) plt.plot(time, rabbits, label=\'Rabbits (Prey)\') plt.plot(time, foxes, label=\'Foxes (Predators)\') plt.xlabel(\'Time\') plt.ylabel(\'Population\') plt.title(\'Predator-Prey Population Dynamics\') plt.legend() plt.grid(True) plt.show()"},{"question":"Create a function to process a list of dictionaries representing students and their scores across multiple subjects. Calculate the average score for each student, determine the top scorer, and return a summary that includes each student\'s average score, the top scorer\'s name, and their highest score. The function should output: list: A list of dictionaries where each dictionary contains a student\'s name and their average score. dict: A dictionary containing the name of the top scorer and their highest score. You should write self-contained code starting with: ``` def calculate_student_scores(students): ``` Example Input: ``` students = [ {\\"name\\": \\"Alice\\", \\"math\\": 85, \\"science\\": 90, \\"history\\": 78}, {\\"name\\": \\"Bob\\", \\"math\\": 82, \\"science\\": 79, \\"history\\": 88}, {\\"name\\": \\"Charlie\\", \\"math\\": 91, \\"science\\": 85, \\"history\\": 92} ] ``` Example Output: ``` ([ {\\"name\\": \\"Alice\\", \\"average_score\\": 84.33}, {\\"name\\": \\"Bob\\", \\"average_score\\": 83.0}, {\\"name\\": \\"Charlie\\", \\"average_score\\": 89.33} ], { \\"top_scorer\\": \\"Charlie\\", \\"highest_score\\": 92 }) ```","solution":"def calculate_student_scores(students): Calculates the average score for each student and determines the top scorer with their highest score. Args: students (list): List of dictionaries where each dictionary contains a student\'s name and their scores in various subjects. Returns: tuple: A list of dictionaries containing each student\'s name and their average score and a dictionary with the name of the top scorer and their highest score. result = [] top_scorer = {\\"top_scorer\\": \\"\\", \\"highest_score\\": 0} for student in students: name = student[\\"name\\"] scores = [score for subject, score in student.items() if subject != \\"name\\"] average_score = sum(scores) / len(scores) result.append({\\"name\\": name, \\"average_score\\": round(average_score, 2)}) highest_score = max(scores) if highest_score > top_scorer[\\"highest_score\\"]: top_scorer[\\"top_scorer\\"] = name top_scorer[\\"highest_score\\"] = highest_score return result, top_scorer"},{"question":"You are tasked with implementing a simplified parking lot management system. The system should be able to park and remove cars, and maintain the total count of parked cars. Additionally, the system needs to track the arrival and departure times of each car. # Requirements: 1. **Class Name:** `ParkingLot` 2. **Attributes:** - `capacity` (int): The maximum number of cars the parking lot can accommodate. - `parked_cars` (dict): A dictionary to keep track of parked cars. The keys are car registration numbers (strings), and the values are tuples containing the arrival time (string) and departure time (string). - `current_parked` (int): The current number of parked cars. 3. Implement the following methods: - **`__init__(self, capacity)`**: Initializes the parking lot with a given capacity. - **`park_car(self, reg_num, arrival_time)`**: Parks a new car with the given registration number and arrival time. If the parking lot is full, print \\"Parking lot is full\\" and do not park the car. If the car with the same registration number is already parked, print \\"Car is already parked\\" and do not park the car. - **`remove_car(self, reg_num, departure_time)`**: Removes the car with the given registration number and records the departure time. If the car is not found, print \\"Car not found\\". - **`current_count(self)`**: Returns the current number of parked cars. - **`parked_cars_info(self)`**: Prints the registration number of each parked car along with its arrival and departure times. # Detailed Instructions: 1. The `park_car` method should check if the parking lot has reached its capacity. If not, it should add the car\'s registration number and arrival time to the `parked_cars` dictionary and increment the `current_parked` count. 2. The `remove_car` method should look up the car by its registration number. If found, it should update the car\'s record in the `parked_cars` dictionary with the departure time and decrement the `current_parked` count. 3. The `current_count` method should return the number of currently parked cars. 4. The `parked_cars_info` method should print all the cars currently parked in the format \\"RegNum: ArrivalTime -> DepartureTime\\". **Example Usage:** ```python lot = ParkingLot(2) lot.park_car(\\"ABC123\\", \\"10:00 AM\\") # Should park the car lot.park_car(\\"XYZ987\\", \\"10:30 AM\\") # Should park the car lot.park_car(\\"LMN456\\", \\"11:00 AM\\") # Should print \\"Parking lot is full\\" lot.current_count() # Should return 2 lot.parked_cars_info() # Should print \\"ABC123: 10:00 AM -> NonenXYZ987: 10:30 AM -> None\\" lot.remove_car(\\"ABC123\\", \\"2:00 PM\\") # Should update departure time and remove the car lot.current_count() # Should return 1 lot.parked_cars_info() # Should print \\"XYZ987: 10:30 AM -> None\\" lot.remove_car(\\"DEF456\\", \\"1:00 PM\\") # Should print \\"Car not found\\" ```","solution":"class ParkingLot: def __init__(self, capacity): self.capacity = capacity self.parked_cars = {} self.current_parked = 0 def park_car(self, reg_num, arrival_time): if self.current_parked >= self.capacity: print(\\"Parking lot is full\\") return if reg_num in self.parked_cars: print(\\"Car is already parked\\") return self.parked_cars[reg_num] = (arrival_time, None) self.current_parked += 1 def remove_car(self, reg_num, departure_time): if reg_num not in self.parked_cars: print(\\"Car not found\\") return arrival_time, _ = self.parked_cars[reg_num] self.parked_cars[reg_num] = (arrival_time, departure_time) self.current_parked -= 1 def current_count(self): return self.current_parked def parked_cars_info(self): for reg_num, (arrival, departure) in self.parked_cars.items(): print(f\\"{reg_num}: {arrival} -> {departure}\\")"},{"question":"You are tasked with writing a function called `merge_unique_elements(data: str) -> str`. This function takes as input a JSON-encoded string `data`, which includes two entries: a list of strings `\\"list1\\"` and a list of strings `\\"list2\\"`. The goal is to merge these two lists into a single list that contains only unique values from both lists, preserving the order of their first appearance. The function should return a JSON-encoded string containing an object with a key `\\"result\\"` mapping to the merged list of unique values. You must use Python\'s `json` library, specifically `json.loads` to parse the input JSON string and `json.dumps` to produce the output JSON string. Here\'s an example to make it clear: - Input: `\'{\\"list1\\": [\\"a\\", \\"b\\", \\"c\\", \\"d\\"], \\"list2\\": [\\"c\\", \\"d\\", \\"e\\", \\"f\\"]}\'` - Output: `\'{\\"result\\": [\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\"]}\'` Your task is to implement the `merge_unique_elements` function using the specified JSON methods.","solution":"import json def merge_unique_elements(data: str) -> str: Merges two lists from a JSON-encoded string into a single list with unique values, preserving the order of their first appearance. Returns a JSON-encoded string containing the merged list. :param data: A JSON-encoded string containing two lists under keys \\"list1\\" and \\"list2\\". :return: A JSON-encoded string containing the merged list with unique values. parsed_data = json.loads(data) list1 = parsed_data[\\"list1\\"] list2 = parsed_data[\\"list2\\"] merged_list = [] seen_elements = set() for item in list1 + list2: if item not in seen_elements: merged_list.append(item) seen_elements.add(item) result = {\\"result\\": merged_list} return json.dumps(result)"},{"question":"Create a function that analyzes a text file containing customer reviews. The function should: 1. Read the text data from the file. 2. Tokenize the sentences and words while removing punctuation. 3. Perform sentiment analysis on each review using a predefined dictionary of positive and negative words. 4. Calculate the overall sentiment score for each review. 5. Generate a summary report containing the number of positive, negative, and neutral reviews. The function should output: A dictionary with keys \'positive\', \'negative\', and \'neutral\', and their corresponding counts, along with a list of sentiment scores for each review. You should write self-contained code starting with: ``` import string from collections import defaultdict def load_sentiment_dictionary(): positive_words = [...] negative_words = [...] return positive_words, negative_words def analyze_reviews(file_path): ```","solution":"import string from collections import defaultdict def load_sentiment_dictionary(): positive_words = [\\"good\\", \\"great\\", \\"fantastic\\", \\"excellent\\", \\"positive\\", \\"love\\", \\"happy\\"] negative_words = [\\"bad\\", \\"terrible\\", \\"awful\\", \\"poor\\", \\"negative\\", \\"hate\\", \\"sad\\"] return positive_words, negative_words def analyze_reviews(file_path): positive_words, negative_words = load_sentiment_dictionary() def tokenize(text): text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) sentences = text.split(\'.\') words = [sentence.strip().lower().split() for sentence in sentences if sentence.strip()] return words def compute_sentiment_score(words): score = 0 for word_list in words: for word in word_list: if word in positive_words: score += 1 elif word in negative_words: score -= 1 return score review_scores = [] review_counts = {\'positive\': 0, \'negative\': 0, \'neutral\': 0} with open(file_path, \'r\') as file: reviews = file.readlines() for review in reviews: words = tokenize(review) score = compute_sentiment_score(words) review_scores.append(score) if score > 0: review_counts[\'positive\'] += 1 elif score < 0: review_counts[\'negative\'] += 1 else: review_counts[\'neutral\'] += 1 return { \'review_counts\': review_counts, \'review_scores\': review_scores }"},{"question":"You are working on a system that requires the analysis of user purchase data to determine purchasing patterns. Users make purchases over a range of days, and you need to identify the longest contiguous period during which users made purchases every day. **Function Name:** `longestPurchaseStreak` **Arguments:** - `purchases` (list of strings): A list of dates (strings in \\"YYYY-MM-DD\\" format) when purchases were made, not necessarily sorted. **Returns:** - `int`: The length (number of days) of the longest streak of contiguous days with purchases. **Requirements:** 1. Use the `datetime` module to handle and manipulate the dates. 2. Convert the list of strings into `datetime` objects. 3. Identify the longest sequence of consecutive dates. 4. If there are no purchases, the function should return 0. **Example input and output:** ```python # Example input: List of purchase dates purchases = [ \\"2023-10-01\\", \\"2023-10-02\\", \\"2023-10-03\\", \\"2023-10-05\\", \\"2023-10-06\\", \\"2023-10-07\\", \\"2023-10-10\\" ] # Find the longest streak of contiguous purchase dates longest_streak = longestPurchaseStreak(purchases) # Expected output: 3, because the longest contiguous streak is from \\"2023-10-01\\" to \\"2023-10-03\\" ``` Implement the function `longestPurchaseStreak` according to the given details.","solution":"from datetime import datetime, timedelta def longestPurchaseStreak(purchases): if not purchases: return 0 # Sort and convert the dates from strings to datetime objects purchase_dates = sorted(datetime.strptime(date, \\"%Y-%m-%d\\") for date in purchases) max_streak = 1 current_streak = 1 for i in range(1, len(purchase_dates)): if purchase_dates[i] == purchase_dates[i - 1] + timedelta(days=1): current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 1 return max_streak"},{"question":"In this problem, you are required to create a function named `calculate_metrics` that analyzes a given list of student scores and calculates specific metrics. The function should perform the following tasks: 1. Accept a list of integers `scores`, where each integer represents the score of a student. 2. Compute and return a dictionary with the following keys and corresponding values: - `\'average\'`: The average score of the students. - `\'median\'`: The median score of the students. - `\'mode\'`: The mode of the scores (the score that appears most frequently). - `\'highest\'`: The highest score among the students. - `\'lowest\'`: The lowest score among the students. Detailed steps for the function `calculate_metrics` are as follows: 1. Calculate the average score by summing all the scores and dividing by the number of scores. 2. Determine the median score by sorting the list and finding the middle value(s). 3. Compute the mode by identifying the score that appears most frequently. 4. Find the highest score using the built-in `max` function. 5. Find the lowest score using the built-in `min` function. 6. Handle cases where scores have multiple modes (return any one of the modes). 7. If the list is empty, return `None` for all metrics. Make sure to handle edge cases, such as an empty list or a list with one score, appropriately. Example usage of the function: ```python scores = [85, 92, 75, 85, 90, 92, 85] metrics = calculate_metrics(scores) # Expected output: # { # \'average\': 86.28571428571429, # \'median\': 85, # \'mode\': 85, # \'highest\': 92, # \'lowest\': 75 # } ``` Note: Use appropriate exception handling techniques to ensure the function can manage unexpected input gracefully.","solution":"def calculate_metrics(scores): Analyzes a list of student scores and returns a dictionary with the average, median, mode, highest, and lowest scores. Parameters: scores (list): List of integers representing student scores. Returns: dict: Dictionary containing the average, median, mode, highest, and lowest scores. if not scores: return {\'average\': None, \'median\': None, \'mode\': None, \'highest\': None, \'lowest\': None} scores_sorted = sorted(scores) n = len(scores) # Calculate average average = sum(scores) / n # Calculate median if n % 2 == 1: median = scores_sorted[n // 2] else: median = (scores_sorted[n // 2 - 1] + scores_sorted[n // 2]) / 2 # Calculate mode from collections import Counter count = Counter(scores) mode = max(count.keys(), key=lambda x: count[x]) # Find highest and lowest scores highest = max(scores) lowest = min(scores) return { \'average\': average, \'median\': median, \'mode\': mode, \'highest\': highest, \'lowest\': lowest }"},{"question":"You are required to check if a given string is an anagram of another string. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. To accomplish this, you need to implement a function that performs the following steps: 1. Create a function `are_anagrams(str1, str2)` that takes in two strings, `str1` and `str2`. 2. Normalize both strings by converting them to lowercase and removing any whitespace. 3. Check if both normalized strings have the same set of characters with the same frequencies. # Function Definition: - `are_anagrams(str1: str, str2: str) -> bool` # Example: - If the inputs are `str1 = \\"Listen\\"` and `str2 = \\"Silent\\"`, the function should return `True`. - If the inputs are `str1 = \\"Triangle\\"` and `str2 = \\"Integral\\"`, the function should return `True`. - If the inputs are `str1 = \\"Apple\\"` and `str2 = \\"Pineapple\\"`, the function should return `False`. # Requirements: - Convert both strings to lowercase and remove all whitespace before comparison. - Use any built-in functions or libraries as necessary to achieve the goal efficiently. # Guidelines: - Ensure that your function correctly handles edge cases such as empty strings, strings with different lengths, and strings with spaces.","solution":"def are_anagrams(str1, str2): Checks if two strings are anagrams of each other. :param str1: First string :param str2: Second string :return: True if the strings are anagrams, False otherwise # Normalize the strings normalized_str1 = \'\'.join(sorted(str1.replace(\\" \\", \\"\\").lower())) normalized_str2 = \'\'.join(sorted(str2.replace(\\" \\", \\"\\").lower())) # Compare the normalized strings return normalized_str1 == normalized_str2"},{"question":"You are required to implement the function `find_duplicate_records(input_file: str, output_file: str) -> None` which is meant to find and output duplicate records from a CSV file. Each CSV file has a header row and multiple rows of data. The function performs the following steps: 1. Opens an existing CSV file `input_file` and reads its content. 2. Identifies the rows that are duplicated (i.e., rows that have the same exact content). 3. Writes these duplicate rows into another CSV file `output_file` while including the header row. 4. If no duplicate records are found, the function writes \\"No duplicates found\\" to the `output_file`. 5. Properly handles any exceptions related to file opening and reading/writing issues. Here is a detailed breakdown of what the function should do: **Function Steps:** 1. Open the `input_file` in read mode and read its content using `csv.reader`. 2. Store each row\'s data into a list, maintaining a count of occurrences of each row using a dictionary. 3. Identify which rows appear more than once. 4. Open the `output_file` in write mode using `csv.writer`. 5. Write the header row to `output_file`. 6. Write each duplicate row to the `output_file` in the order they appear in the `input_file`. 7. If no duplicate rows are found, write a single line \\"No duplicates found\\" to the `output_file`. 8. Handle any exceptions that may occur during file operations. Ensure your implementation handles reading and writing CSV files correctly, and uses appropriate data structures to track duplicate rows efficiently. Please implement the function `find_duplicate_records`.","solution":"import csv from collections import defaultdict def find_duplicate_records(input_file: str, output_file: str) -> None: try: with open(input_file, mode=\'r\', newline=\'\', encoding=\'utf-8\') as infile: reader = csv.reader(infile) rows = list(reader) if len(rows) < 2: # Check if there\'s no data or just the header with open(output_file, mode=\'w\', newline=\'\', encoding=\'utf-8\') as outfile: outfile.write(\\"No duplicates found\\") return header = rows[0] data_rows = rows[1:] # Use a dictionary to count occurrences of rows row_counts = defaultdict(int) for row in data_rows: row_counts[tuple(row)] += 1 # Identify duplicate rows duplicates = [list(row) for row, count in row_counts.items() if count > 1] with open(output_file, mode=\'w\', newline=\'\', encoding=\'utf-8\') as outfile: writer = csv.writer(outfile) if duplicates: writer.writerow(header) for row in data_rows: if row in duplicates: writer.writerow(row) else: outfile.write(\\"No duplicates found\\") except Exception as e: with open(output_file, mode=\'w\', newline=\'\', encoding=\'utf-8\') as outfile: outfile.write(str(e))"},{"question":"Write a function named `calculate_trip_duration` that takes two datetime strings in the format \\"YYYY-MM-DD HH:MM:SS\\" and calculates the total duration of the trip in days, hours, and minutes. The function should return the result as a dictionary containing the keys: \\"days\\", \\"hours\\", and \\"minutes\\". The datetime module should be utilized to parse and manipulate the datetime strings. **Function Signature:** ```python def calculate_trip_duration(start: str, end: str) -> dict: pass ``` **Requirements:** 1. Use the `datetime` module to parse input strings and calculate the difference. 2. Ensure the difference in days, hours, and minutes is correctly computed and combine them into the required dictionary format. 3. Handle cases where the end date is before the start date by returning a dictionary with zeros for all durations. **Example:** Given the input `start = \\"2023-03-01 14:30:00\\"` and `end = \\"2023-03-03 17:45:00\\"`, the function should return: ```python {\'days\': 2, \'hours\': 3, \'minutes\': 15} ``` Given the input `start = \\"2023-03-01 14:30:00\\"` and `end = \\"2023-02-28 12:00:00\\"`, the function should return: ```python {\'days\': 0, \'hours\': 0, \'minutes\': 0} ```","solution":"from datetime import datetime def calculate_trip_duration(start: str, end: str) -> dict: Calculate the duration between two datetime strings in the format \\"YYYY-MM-DD HH:MM:SS\\". Returns the duration in days, hours, and minutes as a dictionary. # Parsing the input strings to datetime objects start_dt = datetime.strptime(start, \\"%Y-%m-%d %H:%M:%S\\") end_dt = datetime.strptime(end, \\"%Y-%m-%d %H:%M:%S\\") # Calculate the difference if end_dt < start_dt: return {\\"days\\": 0, \\"hours\\": 0, \\"minutes\\": 0} delta = end_dt - start_dt # Extract days, hours, and minutes days = delta.days hours, remainder = divmod(delta.seconds, 3600) minutes = remainder // 60 return {\\"days\\": days, \\"hours\\": hours, \\"minutes\\": minutes}"},{"question":"Write a Python function `rotate_matrix(matrix)` that takes a 2D list representing a square matrix and rotates it 90 degrees clockwise. Your function should perform this rotation in place, modifying the input matrix directly without using any additional matrices or lists. Consider the following example for clarification: ``` Input: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` To perform the rotation, you need to follow these steps: 1. Transpose the matrix: Swap the rows with columns. 2. Reverse each row: Swap the elements in each row from left to right. Your function should handle any square matrix of size NxN. **Function Signature:** ```python def rotate_matrix(matrix: List[List[int]]) -> None: pass ``` **Example:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # Output matrix should be updated to: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ```","solution":"def rotate_matrix(matrix): Rotate the given N x N matrix 90 degrees clockwise in place. n = len(matrix) # Step 1: Transpose the matrix (swap rows with columns) for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are given a list of strings containing file names with extensions. Your task is to organize the list by grouping files with the same extension together and sorting each group alphabetically. Extensions should be sorted alphabetically as well. # Requirements: 1. Define a function `organize_files(file_list: List[str]) -> List[str]`. 2. Use the following steps: - Separate the file name and extension for each element in the input list. - Group the files by their extensions. - Sort each group of files alphabetically by their names. - Sort the extensions alphabetically. - Concatenate the sorted file names back into a single list, grouped by their sorted extensions. # Context and Steps: 1. **Input**: - A list of file names with extensions, for example: `[\'file1.txt\', \'file2.txt\', \'image1.jpeg\', \'document.pdf\', \'image2.jpeg\', \'report.doc\']`. 2. **Processing**: - Split each file name into `name` and `extension`. - Group by extensions and sort each group. - Sort the extensions. 3. **Output**: - A list of sorted files grouped by their sorted extensions. # Example: ```python from typing import List def organize_files(file_list: List[str]) -> List[str]: extension_dict = {} for file in file_list: name, extension = file.rsplit(\'.\', 1) if extension not in extension_dict: extension_dict[extension] = [] extension_dict[extension].append(name) sorted_files = [] for ext in sorted(extension_dict.keys()): sorted_names = sorted(extension_dict[ext]) sorted_files.extend(f\\"{name}.{ext}\\" for name in sorted_names) return sorted_files # Example Usage file_list = [\'file1.txt\', \'file2.txt\', \'image1.jpeg\', \'document.pdf\', \'image2.jpeg\', \'report.doc\'] sorted_file_list = organize_files(file_list) print(sorted_file_list) ``` # Expected Output: ```python [\'report.doc\', \'image1.jpeg\', \'image2.jpeg\', \'document.pdf\', \'file1.txt\', \'file2.txt\'] ```","solution":"from typing import List def organize_files(file_list: List[str]) -> List[str]: extension_dict = {} for file in file_list: name, extension = file.rsplit(\'.\', 1) if extension not in extension_dict: extension_dict[extension] = [] extension_dict[extension].append(name) sorted_files = [] for ext in sorted(extension_dict.keys()): sorted_names = sorted(extension_dict[ext]) sorted_files.extend(f\\"{name}.{ext}\\" for name in sorted_names) return sorted_files"},{"question":"Write a function that takes a list of tuples where each tuple contains two elements - a string, and a number representing a score. The function should return a pandas DataFrame with the strings as the index and the scores as the values. Additionally, it should sort the DataFrame based on the scores in descending order. The function should output: pandas.DataFrame: A DataFrame with strings as the index and scores as values, sorted by the scores in descending order. You should write self-contained code starting with: ``` import pandas as pd def task_func(tuples_list): ```","solution":"import pandas as pd def task_func(tuples_list): Takes a list of tuples where each tuple contains a string and a score. Returns a pandas DataFrame with strings as the index and scores as the values, sorted by the scores in descending order. df = pd.DataFrame(tuples_list, columns=[\'String\', \'Score\']) df.set_index(\'String\', inplace=True) df.sort_values(by=\'Score\', ascending=False, inplace=True) return df"},{"question":"In this problem, you\'ll need to write a function named `reverse_words_in_string(s)` that takes a single argument `s`, which is a string containing multiple words separated by spaces, and returns a string where the words are in reverse order without altering the individual characters of each word. Requirements: 1. **Function Name**: `reverse_words_in_string` 2. **Input**: A string `s` which represents a sequence of words separated by spaces. 3. **Output**: A string where the words are in reverse order. Example: ```python s = \\"hello world\\" reversed_string = reverse_words_in_string(s) print(reversed_string) # Output should be: \\"world hello\\" ``` Detailed Steps: 1. **Split the String**: Use the `split()` method to split the input string `s` into a list of words. 2. **Reverse the List**: Reverse the list of words using slicing or the `reverse()` method. 3. **Join the Words**: Use the `join()` method to concatenate the reversed list of words back into a single string, with spaces in between each word. This function will help in understanding how to manipulate strings and lists in Python.","solution":"def reverse_words_in_string(s): Return a string where the words are in reverse order without altering the individual characters of each word. Parameters: s (str): A string containing multiple words separated by spaces. Returns: str: A string with words in reverse order. words = s.split() # Split the string into a list of words reversed_words = words[::-1] # Reverse the list of words reversed_string = \\" \\".join(reversed_words) # Join the reversed list of words into a string return reversed_string"},{"question":"You are tasked with writing a function that determines whether a sentence is a palindrome, ignoring punctuation, case, and spacing. The function should be named `is_palindrome_sentence`. # Function Signature: ```python def is_palindrome_sentence(s: str) -> bool: pass ``` # Parameters: - `s` (str): A string representing the sentence to be checked. # Returns: - (bool): A boolean value indicating whether the given sentence is a palindrome. # Description: The function should check if the given sentence is a palindrome or not. A palindrome is a sequence that reads the same backward as forward, after removing all non-alphanumeric characters and converting to lowercase. # Example: ```python # Example input s = \\"A man, a plan, a canal: Panama\\" # Example output True # Example input s = \\"race a car\\" # Example output False ``` # Requirements: - Ignore punctuation, case, and spacing when determining if the sentence is a palindrome. - Consider only alphanumeric characters and ignore any other characters. # Constraints: - The input string `s` will have a length between 1 and 1000. Write the function `is_palindrome_sentence` as described above.","solution":"import re def is_palindrome_sentence(s: str) -> bool: Determines whether a sentence is a palindrome, ignoring punctuation, case, and spacing. Parameters: s (str): The sentence to be checked. Returns: bool: True if the sentence is a palindrome, False otherwise. # Remove all non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"Given a list of 2D points, write a function to find the pair of points that are the farthest apart, and plot these points along with a line connecting them. - The function should raise a ValueError if the number of points in the list is less than 2. - The function should return the two farthest points and the distance between them. - The function should output: ```python Tuple[Tuple[float, float], Tuple[float, float], float]: A tuple containing two 2D points and the distance between them ``` - You should write self-contained code starting with: ```python import numpy as np import matplotlib.pyplot as plt from typing import List, Tuple def find_farthest_points(points: List[Tuple[float, float]]) -> Tuple[Tuple[float, float], Tuple[float, float], float]: ```","solution":"import numpy as np import matplotlib.pyplot as plt from typing import List, Tuple from itertools import combinations import math def find_farthest_points(points: List[Tuple[float, float]]) -> Tuple[Tuple[float, float], Tuple[float, float], float]: if len(points) < 2: raise ValueError(\\"The number of points must be at least 2.\\") def euclidean_distance(p1: Tuple[float, float], p2: Tuple[float, float]) -> float: return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) max_dist = 0 farthest_pair = (points[0], points[1]) for p1, p2 in combinations(points, 2): dist = euclidean_distance(p1, p2) if dist > max_dist: max_dist = dist farthest_pair = (p1, p2) p1, p2 = farthest_pair # Plotting plt.scatter(*zip(*points), color=\'blue\', label=\'Points\') plt.scatter(*p1, color=\'red\', label=\'Farthest Point 1\') plt.scatter(*p2, color=\'green\', label=\'Farthest Point 2\') plt.plot([p1[0], p2[0]], [p1[1], p2[1]], \'r--\', label=\'Max Distance Line\') plt.legend() plt.grid() plt.show() return p1, p2, max_dist"},{"question":"You are tasked with developing a function called `manage_inventory` that handles an inventory system for a small store. The function should provide options to add, remove, and search for items in the inventory. The inventory data should be stored in a SQLite database. Your function should perform the following tasks: 1. Add a new item to the inventory with fields `name`, `quantity`, and `price`. 2. Remove an item from the inventory based on its `name`. 3. Search for items by their `name` and return their details. 4. Validate the inputs to ensure correctness and prevent SQL injection. Here are the detailed steps your function should follow: - Prompt the user for the operation they want to perform: add, remove, or search. - Validate that the `name`, `quantity`, and `price` inputs are not empty or contain only whitespace for the add operation. - Sanitize the `name` input using `re.sub` to replace single quotes with double single quotes to prevent SQL injection. - Connect to a SQLite database named \'inventory.db\' using `sqlite3.connect`. - Perform the appropriate SQL operation based on the user\'s input (add, remove, or search). The table `inventory` should have the following columns: - `id` (INTEGER PRIMARY KEY AUTOINCREMENT) - `name` (TEXT) - `quantity` (INTEGER) - `price` (REAL) ```python def manage_inventory(): # Your code goes here pass ``` You are provided with the following API required documentation: ```python re.sub(pattern, repl, string, count=0, flags=0) # Return the string obtained by replacing the leftmost # non-overlapping occurrences of the pattern in string by the # replacement repl. repl can be either a string or a callable; # if a string, backslash escapes in it are processed. If it is # a callable, it\'s passed the Match object and must return # a replacement string to be used. sqlite3.connect(database[, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri]) # Opens a connection to the SQLite database file *database*. You can use # \\":memory:\\" to open a database connection to a database that resides in # RAM instead of on disk. ``` Write the `manage_inventory` function by following the provided instructions while making use of the `re` and `sqlite3` library APIs.","solution":"import sqlite3 import re def manage_inventory(operation, name=None, quantity=None, price=None): # Database connection conn = sqlite3.connect(\'inventory.db\') cursor = conn.cursor() # Create table if it doesn\'t exist cursor.execute(\'\'\'CREATE TABLE IF NOT EXISTS inventory ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, quantity INTEGER NOT NULL, price REAL NOT NULL)\'\'\') if operation == \'add\': if not name or not name.strip() or quantity is None or price is None: raise ValueError(\\"Name, quantity, and price must be provided.\\") # Sanitize inputs sanitized_name = re.sub(\\"\'\\", \\"\'\'\\", name) cursor.execute(\'INSERT INTO inventory (name, quantity, price) VALUES (?, ?, ?)\', (sanitized_name, quantity, price)) conn.commit() elif operation == \'remove\': if not name or not name.strip(): raise ValueError(\\"Name must be provided.\\") # Sanitize inputs sanitized_name = re.sub(\\"\'\\", \\"\'\'\\", name) cursor.execute(\'DELETE FROM inventory WHERE name = ?\', (sanitized_name,)) conn.commit() elif operation == \'search\': if not name or not name.strip(): raise ValueError(\\"Name must be provided.\\") # Sanitize inputs sanitized_name = re.sub(\\"\'\\", \\"\'\'\\", name) cursor.execute(\'SELECT * FROM inventory WHERE name = ?\', (sanitized_name,)) result = cursor.fetchall() return result else: raise ValueError(\\"Invalid operation. Must be \'add\', \'remove\', or \'search\'.\\") conn.close()"},{"question":"In this problem, you will write a function called `find_max_occurrences_of_substring()` that takes a string `text` and a list of strings `substrings` as input, and returns the substring that appears the most frequently within the text. In case of a tie, return the substring that appears first in the input list. The goal is to practice string manipulation and counting occurrences of substrings. Implement the following function: ```python def find_max_occurrences_of_substring(text, substrings): Returns the substring that appears the most frequently in the given text. In case of a tie, returns the substring that appears first in the list. Parameters: text (str): The text in which to count occurrences of substrings. substrings (list of str): The list of substrings to search for in the text. Returns: str: The substring that appears most frequently. # Your code here ``` Requirements: 1. Iterate through each substring in the input list and count its occurrences in the text. 2. Keep track of the maximum occurrence count and the corresponding substring. 3. Return the substring with the highest count. In case of a tie, prioritize the substring that appears first in the input list. The function should handle cases where: - The input list of substrings is empty, returning an empty string. - Some substrings might not appear in the text at all. Example: ```python # Example 1 text = \\"banana bandana banana\\" substrings = [\\"ban\\", \\"ana\\", \\"a\\"] print(find_max_occurrences_of_substring(text, substrings)) # Output: \\"a\\" # Example 2 text = \\"hello world, hello universe\\" substrings = [\\"hello\\", \\"world\\", \\"universe\\"] print(find_max_occurrences_of_substring(text, substrings)) # Output: \\"hello\\" # Example 3 text = \\"abcd abcd acbd\\" substrings = [\\"abc\\", \\"bcd\\", \\"da\\"] print(find_max_occurrences_of_substring(text, substrings)) # Output: \\"abc\\" ```","solution":"def find_max_occurrences_of_substring(text, substrings): Returns the substring that appears the most frequently in the given text. In case of a tie, returns the substring that appears first in the list. Parameters: text (str): The text in which to count occurrences of substrings. substrings (list of str): The list of substrings to search for in the text. Returns: str: The substring that appears most frequently. if not substrings: return \\"\\" max_count = 0 max_substring = \\"\\" for substring in substrings: count = text.count(substring) if count > max_count: max_count = count max_substring = substring return max_substring"},{"question":"Implement a function that reads a text file containing sentences, counts the frequency of each word across all sentences (ignoring case), and returns a dictionary with words as keys and their respective frequencies as values. Handle exceptions related to file presence and ensure that the file exists before processing. The function should raise the exception for: - FileNotFoundError: If the text file does not exist at the specified path. The function should output: - dict: A dictionary where keys are words (in lowercase) and values are their frequencies. You should write self-contained code starting with: ``` def count_word_frequencies(file_path=\'sentences.txt\'): ```","solution":"import os def count_word_frequencies(file_path=\'sentences.txt\'): Reads a text file, counts the frequency of each word ignoring case, and returns a dictionary with words as keys and their respective frequencies as values. Args: file_path: str : Path to the text file containing sentences. Returns: dict : A dictionary with words as keys and their frequencies as values. Raises: FileNotFoundError : If the text file does not exist at the specified path. if not os.path.exists(file_path): raise FileNotFoundError(f\\"The file {file_path} does not exist.\\") word_freq = {} with open(file_path, \'r\') as file: for line in file: words = line.strip().lower().split() for word in words: word_freq[word] = word_freq.get(word, 0) + 1 return word_freq"},{"question":"In this problem, you are required to write a function that processes a list of employee records and calculates the monthly salary expenditure for a company. The function should: 1. Validate the input list to ensure it contains the required employee data. 2. Calculate the monthly salary for each employee based on their hourly wage and hours worked per week. 3. Provide a summary of total monthly expenditure for the company. Function Name: `calculate_monthly_expenditure` # Function Signature ```python def calculate_monthly_expenditure(employee_data: List[Dict[str, Union[str, float]]]) -> float: ``` # Inputs - `employee_data` (List[Dict[str, Union[str, float]]]): A list of dictionaries where each dictionary represents an employee record with the keys `name` (str), `hourly_wage` (float), and `hours_per_week` (float). # Outputs - Returns a float representing the total monthly salary expenditure for the company. # Assumptions and Constraints - Assume there are 4 weeks in a month. - Each employee record must have `name`, `hourly_wage`, and `hours_per_week` keys. - If the input list is empty or contains invalid data, raise a `ValueError`. # Example ```python employee_data = [ {\\"name\\": \\"Alice\\", \\"hourly_wage\\": 25.0, \\"hours_per_week\\": 40}, {\\"name\\": \\"Bob\\", \\"hourly_wage\\": 15.0, \\"hours_per_week\\": 30}, {\\"name\\": \\"Charlie\\", \\"hourly_wage\\": 20.0, \\"hours_per_week\\": 25} ] total_expenditure = calculate_monthly_expenditure(employee_data) print(total_expenditure) # Output should be the total monthly expenditure based on the input data ``` In this example, `calculate_monthly_expenditure` should calculate the total monthly expenditure for the given employee data.","solution":"from typing import List, Dict, Union def calculate_monthly_expenditure(employee_data: List[Dict[str, Union[str, float]]]) -> float: Calculate the monthly salary expenditure for the company based on employee records. Parameters: employee_data (List[Dict[str, Union[str, float]]]): A list of dictionaries where each dictionary represents an employee record with `name`, `hourly_wage`, and `hours_per_week` keys. Returns: float: Total monthly salary expenditure for the company. Raises: ValueError: If the input list is empty or contains invalid data. if not employee_data: raise ValueError(\\"Employee data list is empty.\\") total_expenditure = 0.0 for record in employee_data: if not isinstance(record, dict) or \'name\' not in record or \'hourly_wage\' not in record or \'hours_per_week\' not in record: raise ValueError(\\"Invalid employee data.\\") try: hourly_wage = float(record[\'hourly_wage\']) hours_per_week = float(record[\'hours_per_week\']) except (ValueError, TypeError) as e: raise ValueError(\\"Invalid data type for hourly_wage or hours_per_week.\\") from e weekly_salary = hourly_wage * hours_per_week monthly_salary = weekly_salary * 4 total_expenditure += monthly_salary return total_expenditure"},{"question":"In this problem, you\'ll practice working with Python\'s dictionaries and lists. You will write a function that manipulates data to create a nested dictionary structure. Your task is to write a function called `create_nested_dicts` that takes a single argument: - `data` (List[Tuple[str, str, int]]): A list of tuples where each tuple consists of a country name (str), a city name (str), and a population count (int). The function should create a nested dictionary where the outer keys are country names, the inner keys are city names, and the values are population counts. Steps to achieve this: 1. Initialize an empty dictionary to hold the nested structure. 2. Iterate over each tuple in the input list. 3. For each tuple, do the following: - Extract the country name, city name, and population count. - If the country name is not already a key in the dictionary, add it with an empty dictionary as its value. - Add the city name and population count under the corresponding country dictionary. 4. Return the completed nested dictionary. **Function Signature:** ```python def create_nested_dicts(data: List[Tuple[str, str, int]]) -> dict: pass ``` Example: ```python data = [ (\\"USA\\", \\"New York\\", 8175133), (\\"USA\\", \\"Los Angeles\\", 3792621), (\\"France\\", \\"Paris\\", 2140526), (\\"France\\", \\"Marseille\\", 861635) ] result = create_nested_dicts(data) expected_output = { \\"USA\\": { \\"New York\\": 8175133, \\"Los Angeles\\": 3792621 }, \\"France\\": { \\"Paris\\": 2140526, \\"Marseille\\": 861635 } } print(result == expected_output) # should print True ```","solution":"from typing import List, Tuple def create_nested_dicts(data: List[Tuple[str, str, int]]) -> dict: Creates a nested dictionary from a list of tuples consisting of country name, city name, and population count. nested_dict = {} for country, city, population in data: if country not in nested_dict: nested_dict[country] = {} nested_dict[country][city] = population return nested_dict # Example usage: data = [ (\\"USA\\", \\"New York\\", 8175133), (\\"USA\\", \\"Los Angeles\\", 3792621), (\\"France\\", \\"Paris\\", 2140526), (\\"France\\", \\"Marseille\\", 861635) ] result = create_nested_dicts(data) expected_output = { \\"USA\\": { \\"New York\\": 8175133, \\"Los Angeles\\": 3792621 }, \\"France\\": { \\"Paris\\": 2140526, \\"Marseille\\": 861635 } } print(result == expected_output) # should print True"},{"question":"Write a function that takes a list of tuples, where each tuple contains two elements: a string representing a product name and a float representing the price of the product. The function should return a dictionary where each key is a product name and the value is the average price of that product, calculated from the provided list of tuples. The function should handle cases where the list is empty or the product names are repeated. You should write self-contained code starting with: ``` def average_price(product_tuples): ```","solution":"def average_price(product_tuples): Returns a dictionary where each key is a product name and the value is the average price of that product. Parameters: product_tuples (list of tuples): A list of tuples where each tuple contains a string (product name) and a float (product price) Returns: dict: A dictionary with product names as keys and average prices as values. if not product_tuples: return {} product_sum = {} product_count = {} for name, price in product_tuples: if name in product_sum: product_sum[name] += price product_count[name] += 1 else: product_sum[name] = price product_count[name] = 1 average_prices = {name: product_sum[name]/product_count[name] for name in product_sum} return average_prices"},{"question":"You are given a pandas DataFrame which contains datetime information in one of its columns. Your task is to create a function called `extract_datetime_features(df, column)` that extracts multiple useful features from the datetime column. Your function, `extract_datetime_features(df, column)`, must: 1. Accept two parameters: - `df`: A pandas DataFrame. - `column`: The name of the column containing datetime information. 2. Ensure that the specified column is converted to the datetime type. 3. Create new columns in the DataFrame for the following features: - Year - Month - Day - Hour - Minute - Day of the Week (from 0=Monday to 6=Sunday) 4. Drop the original datetime column from the DataFrame. 5. Return the transformed DataFrame with the new datetime feature columns. **Educational Objective:** This exercise aims to enhance your skills in handling datetime data in pandas and effectively extracting useful time-based features for further analysis. Write the function `extract_datetime_features(df, column)` according to these guidelines. # Example ```python import pandas as pd data = { \'event\': [\'event1\', \'event2\', \'event3\'], \'timestamp\': [\'2022-01-01 01:23:45\', \'2022-02-15 14:56:00\', \'2022-03-20 08:18:30\'] } df = pd.DataFrame(data) transformed_df = extract_datetime_features(df, \'timestamp\') print(transformed_df) ``` **Expected Output:** ``` event Year Month Day Hour Minute Day_of_Week 0 event1 2022 1 1 1 23 5 1 event2 2022 2 15 14 56 1 2 event3 2022 3 20 8 18 6 ``` # Constraints - Only use the `pandas` library.","solution":"import pandas as pd def extract_datetime_features(df, column): Extracts datetime features from the specified column in the DataFrame. Parameters: df (pd.DataFrame): The input DataFrame. column (str): The name of the column containing datetime information. Returns: pd.DataFrame: The DataFrame with extracted datetime features and the original datetime column dropped. df[column] = pd.to_datetime(df[column]) df[\'Year\'] = df[column].dt.year df[\'Month\'] = df[column].dt.month df[\'Day\'] = df[column].dt.day df[\'Hour\'] = df[column].dt.hour df[\'Minute\'] = df[column].dt.minute df[\'Day_of_Week\'] = df[column].dt.dayofweek df = df.drop(columns=[column]) return df"},{"question":"A cybersecurity firm has enlisted your help to enhance their system\'s surveillance capabilities by analyzing log entries for potential suspicious activity. You need to implement a function called `detect_suspicious_logins` that identifies and counts consecutive failed login attempts. Your task is to: 1. Define a function `detect_suspicious_logins`, which takes as input a list of log entries and an integer `threshold`. 2. Each log entry is represented as a dictionary with two keys: `\\"timestamp\\"` and `\\"status\\"`. The `\\"timestamp\\"` is a string representing the time the login attempt was made, and the `\\"status\\"` is either `\\"success\\"` or `\\"failure\\"`. 3. The function should identify sequences of consecutive `\\"failure\\"` statuses that are at least as long as the `threshold`. Here is a breakdown of what your function should do: - Return the count of these sequences. - If no such sequences exist, return 0. Consider the following example: ```python logs = [ {\\"timestamp\\": \\"2023-10-01T12:00:00Z\\", \\"status\\": \\"failure\\"}, {\\"timestamp\\": \\"2023-10-01T12:01:00Z\\", \\"status\\": \\"failure\\"}, {\\"timestamp\\": \\"2023-10-01T12:02:00Z\\", \\"status\\": \\"success\\"}, {\\"timestamp\\": \\"2023-10-01T12:03:00Z\\", \\"status\\": \\"failure\\"}, {\\"timestamp\\": \\"2023-10-01T12:04:00Z\\", \\"status\\": \\"failure\\"}, {\\"timestamp\\": \\"2023-10-01T12:05:00Z\\", \\"status\\": \\"failure\\"}, ] threshold = 2 # The function should detect two sequences of failures: # 1. [\\"2023-10-01T12:00:00Z\\", \\"2023-10-01T12:01:00Z\\"] # 2. [\\"2023-10-01T12:03:00Z\\", \\"2023-10-01T12:04:00Z\\", \\"2023-10-01T12:05:00Z\\"] output = 2 ``` Your implementation of `detect_suspicious_logins` should follow these guidelines and analyze the provided log entries to correctly count the sequences of consecutive failures.","solution":"def detect_suspicious_logins(logs, threshold): Identifies and counts sequences of consecutive failed login attempts that are at least as long as the threshold. :param logs: List of log entries, each entry is a dictionary with keys \\"timestamp\\" and \\"status\\". :param threshold: Integer threshold for considering suspicious consecutive failures. :return: Integer count of sequences of consecutive failures meeting or exceeding the threshold. count = 0 consecutive_failures = 0 for log in logs: if log[\\"status\\"] == \\"failure\\": consecutive_failures += 1 else: if consecutive_failures >= threshold: count += 1 consecutive_failures = 0 # Check for the last sequence in case it ends with failures if consecutive_failures >= threshold: count += 1 return count"},{"question":"You are required to write a function named `generate_report_card` for a student management system. The system should read existing student records from a CSV file and allow users to update or add student grades. The function will: 1. Read from a CSV file named `students.csv` which contains existing student records. 2. Use the `csv.DictReader` function to load the records. 3. Handle the possibility of the CSV file being empty or not properly formatted. 4. Prompt the user to input a student\'s ID. Check if the ID already exists in the records. 5. If the student ID exists, prompt the user for updated grades for each subject. If it does not exist, prompt the user for the student\'s details, including Name, Age, and Grades for each subject. 6. Update or add the student\'s information to the records. 7. Save the updated records back into the `students.csv` file using the `csv.DictWriter` function with appropriate fieldnames. Function Signature: ```python def generate_report_card(): pass ``` You can assume the following about the records: - The CSV contains columns for \\"ID\\", \\"Name\\", \\"Age\\", and one column for each subject (e.g., \\"Math\\", \\"Science\\", \\"English\\"). - Example structure of the CSV file: ``` ID,Name,Age,Math,Science,English 123,John Doe,15,85,90,75 456,Jane Smith,16,92,88,91 ``` Implemented the function `generate_report_card` in Python.","solution":"import csv import os def generate_report_card(): file_name = \'students.csv\' # Check if the file exists if not os.path.isfile(file_name): print(f\\"{file_name} does not exist.\\") return # Load existing student records records = [] fieldnames = [] try: with open(file_name, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) fieldnames = reader.fieldnames if fieldnames is None: print(\\"The CSV file is malformed (no header row).\\") return for row in reader: records.append(row) except Exception as e: print(f\\"Error reading {file_name}: {e}\\") return if not fieldnames or len(fieldnames) < 4: print(\\"The file should contain at least columns for ID, Name, Age, and one subject.\\") return student_id = input(\\"Enter student ID: \\").strip() student_record = None for record in records: if record[\'ID\'] == student_id: student_record = record break if student_record: print(f\\"Updating the record for student ID: {student_id}\\") for subject in fieldnames[3:]: new_grade = input(f\\"Enter new grade for {subject} (current: {student_record[subject]}): \\").strip() if new_grade: student_record[subject] = new_grade else: print(f\\"Adding a new record for student ID: {student_id}\\") new_student = {\'ID\': student_id} new_student[\'Name\'] = input(\\"Enter student Name: \\").strip() new_student[\'Age\'] = input(\\"Enter student Age: \\").strip() for subject in fieldnames[3:]: new_student[subject] = input(f\\"Enter grade for {subject}: \\").strip() records.append(new_student) try: with open(file_name, \'w\', newline=\'\') as csvfile: writer = csv.DictWriter(csvfile, fieldnames=fieldnames) writer.writeheader() writer.writerows(records) print(\\"Student records updated successfully.\\") except Exception as e: print(f\\"Error writing to {file_name}: {e}\\")"},{"question":"You are asked to write a Python function to simulate an \\"elevator system\\" in a building. The function should take a list of requests, where each request is a tuple representing the starting floor and the destination floor. The function should return a list of floors visited by the elevator as it processes each request in the given order. # Function Signature ```python def elevator_system(requests: List[Tuple[int, int]]) -> List[int]: pass ``` # Inputs 1. `requests` (List[Tuple[int, int]]): A list of tuples, where each tuple represents a request with the starting floor and the destination floor. # Output - Return a list of integers representing the floors visited by the elevator as it processes each request. # Example Suppose `requests` is given as: ```python requests = [(2, 5), (1, 3), (4, 2)] ``` Then the output of `elevator_system(requests)` would be: ```python [2, 5, 1, 3, 4, 2] ``` # Requirements 1. The elevator starts at the ground floor (floor 0). 2. The elevator should first go to the starting floor of the request, then to the destination floor. 3. Each movement of the elevator (from one floor to another) must be recorded. # Hint You may need to iterate through the list of requests and track the current floor of the elevator as it processes each request.","solution":"def elevator_system(requests): Simulates the operation of an elevator in a building. Args: requests (List[Tuple[int, int]]): A list of tuples representing the requests, where each tuple consists of (start_floor, dest_floor) Returns: List[int]: A list of floors visited by the elevator as it processes each request in order. current_floor = 0 visited_floors = [] for start_floor, dest_floor in requests: # Move from the current floor to the start floor visited_floors.append(start_floor) # Move from the start floor to the destination floor visited_floors.append(dest_floor) # Update current floor to the destination floor current_floor = dest_floor return visited_floors"},{"question":"You are tasked with writing a Python function named `find_longest_word` that identifies the longest word in a given list of words. If there are multiple words with the same maximum length, the function should return the first one encountered in the list. The function signature should be: ```python def find_longest_word(words: list) -> str: ``` Given a `words` list, the function should: 1. Traverse the list to compare word lengths. 2. Identify and return the longest word based on character count. # Requirements: 1. Handle an empty list by returning an empty string. 2. Ensure words consisting of non-alphabetic characters are considered. # Example: ```python find_longest_word([\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"]) ``` This call should return `\\"banana\\"`. # Hints: - Use the built-in `max` function with an appropriate key to find the longest word. - Ensure the function handles different edge cases, such as lists with words of the same length or special characters within the words. # Edge Cases: - If the list contains only one word, that word should be returned. - If words have the same length, the first occurrence should be returned. # Constraints: - The input list contains non-empty strings only. - The function should have a time complexity of O(n), where n is the number of words in the list.","solution":"def find_longest_word(words: list) -> str: Finds the longest word in the given list of words. If there are multiple words with the same length, returns the first one encountered. if not words: return \\"\\" longest_word = words[0] longest_length = len(longest_word) for word in words[1:]: if len(word) > longest_length: longest_word = word longest_length = len(word) return longest_word"},{"question":"You are working on a text-based game and need to implement a function that determines the highest-scoring player in a given round. The game consists of multiple players, each of whom has a unique identifier and a list of integers representing their scores from different rounds. # Details: - Implement a function `highestScoringPlayer(players, roundIndex)` that receives the following parameters: - `players` (list of dictionaries): Each dictionary contains two keys: - `id` (int): The unique identifier of the player. - `scores` (list of ints): List of integers representing the player\'s scores in each round. - `roundIndex` (int): The index of the specific round whose scores need to be evaluated. # Operations: 1. Iterate over the list of players. 2. For each player, extract the score at `roundIndex` from the `scores` list. 3. Keep track of the highest score and the player with that score. 4. If multiple players have the highest score, return the player with the lowest identifier. 5. If no players are found (i.e., the `players` list is empty), return `None`. # Example Input: ```python players = [ {\'id\': 1, \'scores\': [15, 25, 10]}, {\'id\': 2, \'scores\': [20, 20, 30]}, {\'id\': 3, \'scores\': [15, 30, 10]} ] roundIndex = 1 ``` # Example Output: ``` 2 ``` # Explanation: In this example, the scores for round 1 are: - Player 1: 25 - Player 2: 20 - Player 3: 30 The highest score for round 1 is 30, which belongs to player 3. The function should return the player\'s unique identifier, which is 3. # Task: Implement the function `highestScoringPlayer(players, roundIndex)` to determine and return the highest-scoring player\'s identifier in the specified round. Ensure your function handles edge cases, such as empty player lists or invalid round indices.","solution":"def highestScoringPlayer(players, roundIndex): Determines the highest-scoring player in a given round. Args: players (list of dict): Each dictionary contains two keys: - id (int): The unique identifier of the player. - scores (list of int): List of integers representing the player\'s scores in each round. roundIndex (int): The index of the specific round whose scores need to be evaluated. Returns: int: The identifier of the player with the highest score in the specified round. If there are multiple players with the highest score, the player with the lowest identifier is returned. If no players are found, returns None. if not players: return None highest_score = float(\'-inf\') highest_scoring_player_id = None for player in players: if roundIndex < len(player[\'scores\']): # Validate the round index score = player[\'scores\'][roundIndex] if score > highest_score or (score == highest_score and player[\'id\'] < highest_scoring_player_id): highest_score = score highest_scoring_player_id = player[\'id\'] return highest_scoring_player_id"},{"question":"Parse a log file to extract and count occurrences of specific entry patterns. The function should: - Read the content of a log file. - Use a regex pattern to identify and count specific log entries. - Return a dictionary where keys are the matched patterns and values are their respective counts. The function should raise the exception for: FileNotFoundError: If the log file does not exist. The function should output: dict: A dictionary with pattern counts from the log file. You should write self-contained code starting with: ``` import re def parse_log(log_file, pattern): ```","solution":"import re def parse_log(log_file, pattern): Parses the log file to count occurrences of specific entry patterns. Args: - log_file (str): Path to the log file. - pattern (str): The regex pattern to identify specific log entries. Returns: - dict: A dictionary where keys are the matched patterns and values are their respective counts. Raises: - FileNotFoundError: If the log file does not exist. try: with open(log_file, \'r\') as file: log_data = file.read() matches = re.findall(pattern, log_data) pattern_counts = {match: matches.count(match) for match in set(matches)} return pattern_counts except FileNotFoundError as e: raise e"},{"question":"You are tasked with writing a function `reverse_words` that takes a string containing an English sentence and returns a string where the words are reversed but the order of characters within each word is preserved. Challenges to implement: 1. Correctly identify word boundaries. 2. Preserve punctuation and capitalization. 3. Maintain whitespace characters (including multiple spaces) exactly as they appear. The function should return the resulting string. The function should handle edge cases like empty strings or strings with only whitespace characters. Name your function `reverse_words`. Example: ```python reverse_words(\\"Hello world!\\") # Output: \\"world! Hello\\" reverse_words(\\"Coding is fun.\\") # Output: \\"fun. is Coding\\" reverse_words(\\" Test spaces \\") # Output: \\" spaces Test \\" ``` ```python def reverse_words(sentence): pass ```","solution":"def reverse_words(sentence): Reverses the words in the input sentence while preserving the order of characters within each word, punctuation, capitalization, and whitespace exactly as they appear. if not sentence: return sentence # Split on spaces to identify words words = sentence.split(\' \') # Reverse the list of words reversed_words = words[::-1] # Join the reversed words by spaces to form the final string return \' \'.join(reversed_words)"},{"question":"Construct a binary tree from a list of integers in level order, compute the sum of all its nodes, and return the sum. If the list is empty, return 0. The function should handle: ValueError: If any element in the list is not an integer. The function should output: int: The sum of all nodes in the binary tree. You should write self-contained code starting with: ``` class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def construct_tree_and_sum(nums): ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def construct_tree_and_sum(nums): if not nums: return 0 if any(not isinstance(x, int) for x in nums): raise ValueError(\\"All elements in the list must be integers.\\") # Helper function to create a binary tree in level order def level_order_insert(root, i, n): if i < n: temp = TreeNode(nums[i]) root = temp # insert left child root.left = level_order_insert(root.left, 2 * i + 1, n) # insert right child root.right = level_order_insert(root.right, 2 * i + 2, n) return root n = len(nums) root = level_order_insert(None, 0, n) # Helper function to calculate the sum of nodes def calculate_sum(node): if not node: return 0 return node.val + calculate_sum(node.left) + calculate_sum(node.right) return calculate_sum(root)"},{"question":"Write a function named `matrix_diagonal_sum`, which computes the sum of the main diagonal and the anti-diagonal for a given square matrix. The main diagonal of a matrix runs from the top-left corner to the bottom-right corner, while the anti-diagonal runs from the top-right corner to the bottom-left corner. The function should take the following arguments: 1. `matrix`: A 2D list representing the square matrix. The function should return the sum of the main diagonal and anti-diagonal elements. If there are any overlapping elements (i.e., the center element in an odd-dimensional matrix), it should be added only once. # Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(matrix_diagonal_sum(matrix)) # Output should be 25 ``` In this example, the main diagonal elements are [1, 5, 9], and the anti-diagonal elements are [3, 5, 7]. Note that the element \'5\' in an odd-dimensional matrix is counted only once. # Guidelines: - Assume all input matrices are square (i.e., number of rows and columns are equal). - Ensure the code handles both even and odd dimensions of matrices correctly. - The matrix can be of any size, but it will be a square matrix with at least one element. Implement the function `matrix_diagonal_sum(matrix)` in Python: ```python def matrix_diagonal_sum(matrix): size = len(matrix) main_diagonal_sum = sum(matrix[i][i] for i in range(size)) anti_diagonal_sum = sum(matrix[i][size - 1 - i] for i in range(size)) if size % 2 == 1: center = matrix[size // 2][size // 2] return main_diagonal_sum + anti_diagonal_sum - center else: return main_diagonal_sum + anti_diagonal_sum ```","solution":"def matrix_diagonal_sum(matrix): Computes the sum of the main diagonal and the anti-diagonal for a given square matrix. Parameters: matrix (list of lists): The square matrix. Returns: int: The sum of the main and anti-diagonal elements, with the center element counted once if it overlaps. size = len(matrix) main_diagonal_sum = sum(matrix[i][i] for i in range(size)) anti_diagonal_sum = sum(matrix[i][size - 1 - i] for i in range(size)) if size % 2 == 1: center = matrix[size // 2][size // 2] return main_diagonal_sum + anti_diagonal_sum - center else: return main_diagonal_sum + anti_diagonal_sum"},{"question":"You are assigned to implement a function `longestSubstringWithoutRepeatingCharacters` that finds the length of the longest substring without repeating characters in a given string `s`. Your function should have the signature: ```python def longestSubstringWithoutRepeatingCharacters(s: str) -> int: ``` **Parameters:** - `s` (str): A string which may consist of English letters, digits, symbols and spaces. **Returns:** - int: The length of the longest substring without repeating characters. For example, given `s = \\"abcabcbb\\"`, your function should return `3`, because the longest substring without repeating characters is `\\"abc\\"`. **Constraints:** - The input string `s` has length in the range `[0, 5 * 10^4]`. **Instructions:** You should use a sliding window approach to efficiently find the longest substring without repeating characters. The idea is to use a set to store these characters as you iterate through the string, expanding and contracting the window to ensure there are no repeating characters within the window.","solution":"def longestSubstringWithoutRepeatingCharacters(s: str) -> int: Returns the length of the longest substring without repeating characters. char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"You\'re tasked with developing a function called `find_best_store` that helps identify the best store for purchasing an item based on price comparison across different stores. You will be given a list of dictionaries where each dictionary represents a store with its name and a dictionary of items available in the store with their corresponding prices. Your function should: - Accept one parameter `stores`, which is a list of dictionaries. Each store dictionary contains: - `\'name\'`: The name of the store (string). - `\'items\'`: A dictionary with item names (strings) as keys and their prices (float) as values. - Accept one parameter `target_item`, which is a string representing the name of the item to search for. - Determine which store offers the target item at the lowest price. - Return the name of the store with the lowest price for the target item. If the item is not available in any store, return `None`. Here are the required steps: 1. Iterate through the list of stores. 2. For each store, check if the target item is available in the store\'s items dictionary. 3. Compare prices and keep track of the store with the lowest price. 4. Return the name of the store with the lowest price. If no stores have the target item, return `None`. Function Signature: ```python def find_best_store(stores, target_item): pass ``` Example usage: ```python stores = [ { \'name\': \'Store A\', \'items\': {\'apple\': 1.00, \'banana\': 0.50, \'orange\': 0.75} }, { \'name\': \'Store B\', \'items\': {\'apple\': 0.90, \'banana\': 0.55, \'grape\': 2.00} }, { \'name\': \'Store C\', \'items\': {\'banana\': 0.60, \'orange\': 0.80} } ] target_item = \'banana\' # Expected Output: \'Store A\' print(find_best_store(stores, target_item)) ```","solution":"def find_best_store(stores, target_item): Determines which store offers the target item at the lowest price. Parameters: stores (list): A list of dictionaries where each dictionary represents a store. target_item (str): The name of the item to search for. Returns: str: The name of the store with the lowest price for the target item. If the item is not available in any store, returns None. best_store_name = None lowest_price = float(\'inf\') for store in stores: if target_item in store[\'items\']: price = store[\'items\'][target_item] if price < lowest_price: lowest_price = price best_store_name = store[\'name\'] return best_store_name"},{"question":"Create a function named `word_frequencies` that calculates the frequency of each unique word in a given text file and writes the result to a new file in JSON format. You should use the `collections.Counter` class to count the word frequencies. Your function should have the following signature: ```python def word_frequencies(input_file: str, output_file: str) -> None: ``` # Parameters: - `input_file` (str): The path to the input text file. - `output_file` (str): The path to the output JSON file where the word frequencies should be saved. # Instructions: 1. Read the content of the input file. 2. Split the text into words. For simplicity, you can assume words are separated by whitespace and punctuation marks are not part of words. 3. Use `collections.Counter` to count the frequency of each unique word. 4. Write the word frequencies to the output JSON file. The JSON file should have the format: `{\\"word\\": frequency}`. # Example: Suppose you have the following content in `input.txt`: ``` Hello world! Hello everyone. This is a test file. This file is just for testing. ``` After running `word_frequencies(\\"input.txt\\", \\"output.json\\")`, the `output.json` file should look like: ```json { \\"Hello\\": 2, \\"world\\": 1, \\"everyone\\": 1, \\"This\\": 2, \\"is\\": 2, \\"a\\": 1, \\"test\\": 1, \\"file\\": 2, \\"just\\": 1, \\"for\\": 1, \\"testing\\": 1 } ``` # Note: - Make sure to handle potential errors, such as the case when the input file does not exist. - Assume that the text in the input file is in English and words are case-sensitive (i.e., \\"Hello\\" and \\"hello\\" are considered different words).","solution":"import json from collections import Counter import re def word_frequencies(input_file: str, output_file: str) -> None: try: with open(input_file, \'r\') as file: text = file.read() # Use regex to find words, assuming words are separated by whitespace and punctuation marks are not part of words. words = re.findall(r\'bw+b\', text) # Calculating word frequencies word_count = Counter(words) # Writing the result to a JSON file with open(output_file, \'w\') as json_file: json.dump(word_count, json_file, indent=4) except FileNotFoundError: print(f\\"Error: The file {input_file} was not found.\\")"},{"question":"Create a function `generate_report_card(student_scores)` that takes a dictionary `student_scores` where keys are student names (strings) and values are lists of their scores (integers). The function should compute the following for each student: 1. Average score 2. Highest score 3. Lowest score The function should return a dictionary where the keys are student names and the values are dictionaries containing \'average\', \'highest\', and \'lowest\' keys corresponding to their respective scores. Additionally, if the list of scores for a student is empty, the function should denote their \'average\', \'highest\', and \'lowest\' scores as `None`. Example input: ```python student_scores = { \\"Alice\\": [87, 92, 78], \\"Bob\\": [100, 85, 91, 76], \\"Charlie\\": [], \\"David\\": [89, 72, 95] } ``` Expected output: ```python { \\"Alice\\": {\\"average\\": 85.67, \\"highest\\": 92, \\"lowest\\": 78}, \\"Bob\\": {\\"average\\": 88.0, \\"highest\\": 100, \\"lowest\\": 76}, \\"Charlie\\": {\\"average\\": None, \\"highest\\": None, \\"lowest\\": None}, \\"David\\": {\\"average\\": 85.33, \\"highest\\": 95, \\"lowest\\": 72} } ``` Note: The average score should be rounded to two decimal places.","solution":"def generate_report_card(student_scores): Generates a report card for each student with their average, highest, and lowest scores. Parameters: student_scores (dict): A dictionary where keys are student names and values are lists of their scores. Returns: dict: A dictionary where keys are student names and values are dictionaries containing \'average\', \'highest\', and \'lowest\' scores. report_card = {} for student, scores in student_scores.items(): if scores: average_score = round(sum(scores) / len(scores), 2) highest_score = max(scores) lowest_score = min(scores) else: average_score = None highest_score = None lowest_score = None report_card[student] = { \\"average\\": average_score, \\"highest\\": highest_score, \\"lowest\\": lowest_score } return report_card"},{"question":"You are asked to implement a function that filters and returns words from a list that have exactly three vowels (a, e, i, o, u) in them. This function will help in text processing tasks where vowel patterns are significant. **Function to Implement:** ```python def filter_words_with_three_vowels(words_list): pass ``` **Parameters:** - `words_list`: A list of strings, where each string represents a word. **Task:** 1. Create a helper function to count the vowels in a given word. 2. Iterate over the `words_list` and use the helper function to filter words with exactly three vowels. 3. Return a list of words that meet the criteria. **Requirements:** - Handle both uppercase and lowercase vowel occurrences. **Example:** ```python words_list = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"kiwi\\", \\"orange\\", \\"grapefruit\\"] result = filter_words_with_three_vowels(words_list) print(result) # Expected Output: # [\'banana\', \'orange\'] ``` **Instruction:** Write the implementation of the `filter_words_with_three_vowels` function in Python. Make sure to provide a detailed explanation of the logic used in your solution, particularly how vowels are counted and how the filtering is performed.","solution":"def filter_words_with_three_vowels(words_list): def count_vowels(word): vowels = \\"aeiouAEIOU\\" return sum(1 for char in word if char in vowels) return [word for word in words_list if count_vowels(word) == 3]"},{"question":"Create a function that simulates a simplified queue management system for a bank. The function should allow adding customers to the queue, serving them in turn, and reprioritizing certain customers in case of emergencies. **Function Specifications**: 1. Function Name: `QueueManager` - This will be a class dealing with the queue operations. 2. Methods: - `__init__(self)`: Initializes an empty queue. - `add_customer(self, customer_id)`: Adds a customer to the end of the queue. `customer_id` is a unique identifier for the customer. - `serve_customer(self)`: Removes and returns the `customer_id` of the customer at the front of the queue, simulating serving the customer. - `reprioritize_customer(self, customer_id)`: Moves a specific customer to the front of the queue for emergency purposes. If the customer is not found, an exception should be thrown. **Function Output**: - `add_customer` does not return a value. - `serve_customer` returns the `customer_id` of the served customer. - `reprioritize_customer` does not return a value but modifies the queue. **Requirements**: - Use a list to maintain the queue. - Handle cases where operations are called on an empty queue appropriately. Example Usage: ```python qm = QueueManager() qm.add_customer(\'cust_1\') qm.add_customer(\'cust_2\') qm.add_customer(\'cust_3\') print(qm.serve_customer()) # Outputs: \'cust_1\' qm.reprioritize_customer(\'cust_3\') print(qm.serve_customer()) # Outputs: \'cust_3\' ```","solution":"class QueueManager: def __init__(self): self.queue = [] def add_customer(self, customer_id): self.queue.append(customer_id) def serve_customer(self): if not self.queue: raise Exception(\\"No customers in the queue.\\") return self.queue.pop(0) def reprioritize_customer(self, customer_id): if customer_id not in self.queue: raise Exception(\\"Customer not found in the queue.\\") self.queue.remove(customer_id) self.queue.insert(0, customer_id)"},{"question":"You are working on a text processing task using the Python `pandas` library. Your objective is to create a function named `most_frequent_words` that will identify the most frequent words in a column of textual data within a pandas DataFrame. The function should return a DataFrame with each word and its corresponding frequency count, sorted in descending order of frequency. # Function Specification: - **Function Name**: `most_frequent_words` - **Inputs**: - `df`: A pandas DataFrame that includes a column named `\\"Text\\"`, which contains textual data. - `n`: An integer specifying the number of top frequent words to return. - **Outputs**: A pandas DataFrame with two columns: - `\\"Word\\"`: The words found in the text data. - `\\"Frequency\\"`: The frequency count of each word. The output should be sorted by the `\\"Frequency\\"` in descending order, and should only include the top `n` most frequent words. # Requirements: 1. Use `pandas.Series.str.split` to split the text into individual words. 2. Leverage `pandas.Series.explode` to transform the list of words into a long format. 3. Use `pandas.Series.value_counts` to count the word frequencies. 4. Ensure that the function handles case sensitivity (e.g., \'Word\' and \'word\' should be treated as the same word). 5. Consider punctuation so that words are not split incorrectly. **Example Usage:** ```python import pandas as pd data = {\'Text\': [\'This is a test. This test is only a test.\', \'Another test of the text processing function.\']} df = pd.DataFrame(data) most_frequent_words(df, 3) ``` **Expected Output:** ```plaintext Word Frequency 0 test 3 1 this 2 2 is 2 ``` **Note**: The function should be efficient, making use of `pandas` intrinsic methods where applicable to handle the data transformation and aggregation.","solution":"import pandas as pd import re def most_frequent_words(df, n): Identifies the most frequent words in the \\"Text\\" column of a pandas DataFrame. Args: df (pd.DataFrame): DataFrame with a column named \\"Text\\". n (int): Number of top frequent words to return. Returns: pd.DataFrame: DataFrame with columns \\"Word\\" and \\"Frequency\\", sorted by \\"Frequency\\" in descending order. # Ensure the text is in lower case and remove punctuation using regex df[\'Text\'] = df[\'Text\'].str.lower().str.replace(r\'[^ws]\', \'\', regex=True) # Split the text into words and expand the list of words into separate rows words = df[\'Text\'].str.split().explode() # Count the frequency of each word word_counts = words.value_counts().reset_index() word_counts.columns = [\'Word\', \'Frequency\'] # Return the top \'n\' most frequent words return word_counts.head(n)"},{"question":"Create a function that accepts a list of integers and returns a DataFrame with two columns: \\"odd\\" containing all the odd numbers from the list, and \\"even\\" containing all the even numbers from the list. If the list length is odd, the extra column should be filled with NaN values for the shorter column. Additionally, plot a line graph with odd numbers on the x-axis and even numbers on the y-axis. The function should output with: tuple: A tuple containing: DataFrame: The generated DataFrame. matplotlib.figure.Figure: The figure object containing the plotted line graph. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(nums): ```","solution":"import pandas as pd import matplotlib.pyplot as plt import numpy as np def task_func(nums): Generate a DataFrame with \'odd\' and \'even\' columns and plot a line graph. Parameters: nums (list of int): A list of integers Returns: tuple: A tuple containing: - DataFrame with \'odd\' and \'even\' columns - matplotlib.figure.Figure object containing the plotted line graph # Splitting the list into odd and even numbers odd_nums = [num for num in nums if num % 2 != 0] even_nums = [num for num in nums if num % 2 == 0] # Creating a DataFrame max_len = max(len(odd_nums), len(even_nums)) odd_nums += [np.nan] * (max_len - len(odd_nums)) even_nums += [np.nan] * (max_len - len(even_nums)) df = pd.DataFrame({\\"odd\\": odd_nums, \\"even\\": even_nums}) # Creating a plot fig, ax = plt.subplots() ax.plot(df[\'odd\'], df[\'even\'], marker=\'o\', linestyle=\'-\') ax.set_xlabel(\'Odd Numbers\') ax.set_ylabel(\'Even Numbers\') ax.set_title(\'Line Graph of Odd vs Even Numbers\') return df, fig"},{"question":"You are tasked with creating a function that processes a DataFrame containing information about different financial investments and then produces a summary and visualization of the performance metrics. This problem will help you learn to manipulate DataFrames and plot statistical distributions using the `matplotlib` library. To achieve this, you need to write a function `investment_analysis` that handles data transformation, statistical summary, and visualization. The function `investment_analysis` should follow these steps: 1. Calculate the mean and standard deviation for each investment\'s return. 2. Determine the best and worst performing investments based on their mean return. 3. Create a histogram for each investment to visualize the distribution of returns. 4. Save the histogram plot as \'investment_distribution.png\'. 5. Return a dictionary containing summary statistics (mean and standard deviation) for each investment. Below is the DataFrame you will work with: ```python import pandas as pd data = { \\"Investment_A\\": [0.1, 0.12, 0.1, 0.08, 0.09], \\"Investment_B\\": [0.15, 0.14, 0.16, 0.15, 0.14], \\"Investment_C\\": [0.05, 0.07, 0.08, 0.06, 0.05], \\"Investment_D\\": [0.2, 0.18, 0.21, 0.2, 0.19], } df = pd.DataFrame(data) ``` The function signature should be: ```python def investment_analysis(df): ... ``` Hint: Use the following libraries in your implementation: - `import pandas as pd` - `import matplotlib.pyplot as plt` The function should output a histogram graph saved as \'investment_distribution.png\' and a dictionary structured like this: ```python { \\"Investment_A\\": {\\"mean\\": mean_value, \\"std\\": std_value}, \\"Investment_B\\": {\\"mean\\": mean_value, \\"std\\": std_value}, \\"Investment_C\\": {\\"mean\\": mean_value, \\"std\\": std_value}, \\"Investment_D\\": {\\"mean\\": mean_value, \\"std\\": std_value}, } ```","solution":"import pandas as pd import matplotlib.pyplot as plt def investment_analysis(df): summary = {} for column in df.columns: mean_value = df[column].mean() std_value = df[column].std() summary[column] = {\'mean\': mean_value, \'std\': std_value} # Plotting histogram plt.hist(df[column], bins=10, alpha=0.5, label=column) # Adding labels and title plt.xlabel(\\"Return\\") plt.ylabel(\\"Frequency\\") plt.legend(loc=\'upper right\') plt.title(\\"Distribution of Investment Returns\\") # Saving the histogram plot plt.savefig(\'investment_distribution.png\') plt.close() # Close the plot to avoid display issues in some environments return summary"},{"question":"You are required to implement a Python function called `most_frequent_words` that analyzes a text file and returns a list of the k most frequent words in descending order of their frequencies. If multiple words have the same frequency, they should be included in the list in lexicographical order. Requirements 1. Your function should read text from a file. 2. The function should process the text to ignore case and remove punctuation. 3. It should then determine the frequency of each word. 4. The function should return a list of k words sorted first by frequency in descending order, then by lexicographical order if frequencies are the same. Function to Implement - **Function Name**: `most_frequent_words` - **Parameters**: `file_path` (str), `k` (int) - **Returns**: A list of the k most frequent words (list of str). Example Usage Assume a file `sample.txt` with the following content: ``` Hello world! This is a test. Hello again, world. ``` ```python most_frequent_words(\'sample.txt\', 2) ``` Expected Output: ```python [\'hello\', \'world\'] ``` Contextual Information - You may use the `collections` module, particularly `Counter` to simplify frequency counting. - To handle punctuation, consider using `str.translate` and `str.maketrans`. - Ensure the function handles common cases of text processing such as handling newlines and varying whitespace. Please provide a complete implementation of the `most_frequent_words` function as described above.","solution":"import string from collections import Counter def most_frequent_words(file_path, k): Analyzes a text file and returns a list of the k most frequent words in descending order of their frequencies. If multiple words have the same frequency, they are sorted lexicographically. Parameters: - file_path (str): The path to the text file. - k (int): The number of most frequent words to return. Returns: - list: A list of the k most frequent words. # Reading the file content with open(file_path, \'r\') as file: text = file.read() # Converting text to lowercase and removing punctuation translator = str.maketrans(string.punctuation, \' \' * len(string.punctuation)) text = text.translate(translator).lower() # Tokenizing the text into words words = text.split() # Counting the frequency of each word word_counts = Counter(words) # Sorting words by frequency and then lexicographically sorted_words = sorted(word_counts.keys(), key=lambda word: (-word_counts[word], word)) # Returning the top k words return sorted_words[:k]"},{"question":"In database applications, sorting functionality is frequently required. Many programming languages, including Python, provide robust methods for sorting data. Your task is to implement a custom sorting function without using any built-in sort functions. Specifically: 1. Write a Python function named `custom_sort` that takes a list of integers as input. 2. Implement the quicksort algorithm to sort these integers in ascending order within the function. 3. The function should return the sorted list. The quicksort algorithm should follow these steps: - Choose a pivot element from the list. - Partition the other elements into two sublists, according to whether they are less than or greater than the pivot. - Recursively sort the sublists and concatenate them with the pivot to form the sorted list. Here is an example of how the provided function could be called: ```python custom_sort([5, 3, 8, 4, 2]) ``` The output of the above call should be: ```python [2, 3, 4, 5, 8] ```","solution":"def custom_sort(arr): Sorts a list of integers using the quicksort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return custom_sort(left) + middle + custom_sort(right)"},{"question":"You are provided with a DataFrame `tickets_df` that contains the following columns: - `ticket_id`: This column contains unique ticket identifiers. - `department`: This column contains the names of the departments handling the tickets. - `priority`: This column contains the priority levels of the tickets. The priority can be `Low`, `Medium`, or `High`. - `time_open`: This column contains the timestamp of when the ticket was opened. - `time_closed`: This column contains the timestamp of when the ticket was closed, if the ticket hasn\'t been closed, this value will be `NaT`. You are required to write a function named `ticket_analysis` which performs the following analyses: 1. Calculate the average resolution time for tickets with `High` priority. (Resolution time is the difference between `time_closed` and `time_open`). 2. Determine the department with the highest number of `Medium` priority tickets. 3. Calculate the percentage of tickets that are still open (i.e., have `NaT` in the `time_closed` column). 4. Determine the number of tickets for each priority level (`Low`, `Medium`, `High`) for the department with the most tickets overall. The function should return a dictionary with the following keys and their corresponding values: - `\'avg_resolution_time_high\'`: The result of analysis 1 as a floating-point number representing time in hours rounded to two decimal places. - `\'department_most_medium\'`: The result of analysis 2 as a string. - `\'open_ticket_percentage\'`: The result of analysis 3 as a percentage rounded to one decimal place. - `\'ticket_count_per_priority\'`: A dictionary containing the count of `Low`, `Medium`, and `High` priority tickets for the department with the most tickets overall. The keys of this inner dictionary should be `\'Low\'`, `\'Medium\'`, and `\'High\'` with their corresponding integer counts. You are required to use the `pandas.Series` and `pandas.DataFrame` classes for data handling and manipulation in the function. Ensure appropriate handling of data types and any necessary data cleaning to perform the calculations.","solution":"import pandas as pd def ticket_analysis(tickets_df): Analyzes ticket data from the provided DataFrame. Returns a dictionary with the required analysis results. # Filter out High priority tickets and calculate average resolution time in hours high_priority_tickets = tickets_df[tickets_df[\'priority\'] == \'High\'] high_priority_tickets = high_priority_tickets.dropna(subset=[\'time_closed\']) high_priority_tickets[\'resolution_time\'] = (high_priority_tickets[\'time_closed\'] - high_priority_tickets[\'time_open\']).dt.total_seconds() / 3600 # Convert seconds to hours avg_resolution_time_high = high_priority_tickets[\'resolution_time\'].mean().round(2) # Determine the department with the highest number of Medium priority tickets medium_priority_counts = tickets_df[tickets_df[\'priority\'] == \'Medium\'][\'department\'].value_counts() department_most_medium = medium_priority_counts.idxmax() # Calculate the percentage of tickets that are still open open_tickets = tickets_df[\'time_closed\'].isna().sum() open_ticket_percentage = ((open_tickets / len(tickets_df)) * 100).round(1) # Determine the department with the most tickets overall and count priority levels most_common_department = tickets_df[\'department\'].value_counts().idxmax() priority_counts = tickets_df[tickets_df[\'department\'] == most_common_department][\'priority\'].value_counts() ticket_count_per_priority = { \'Low\': priority_counts.get(\'Low\', 0), \'Medium\': priority_counts.get(\'Medium\', 0), \'High\': priority_counts.get(\'High\', 0) } # Compose the result dictionary result = { \'avg_resolution_time_high\': avg_resolution_time_high, \'department_most_medium\': department_most_medium, \'open_ticket_percentage\': open_ticket_percentage, \'ticket_count_per_priority\': ticket_count_per_priority } return result"},{"question":"You are tasked with developing a function, `generate_report_card()`, for a school\'s student management system. The function will be responsible for generating a student\'s report card based on their grades in various subjects. Here are the step-by-step requirements of the function: 1. Display a title indicating that this is the report card generation process. 2. Prompt the user to input the student\'s first name, last name, and student ID. 3. Gather grades for five subjects: Mathematics, Science, English, History, and Art. Ensure each grade is between 0 and 100. 4. Calculate the average grade for the student. 5. Determine the student\'s grade classification based on the average grade: - 90-100: Excellent - 75-89: Good - 60-74: Average - 40-59: Pass - Below 40: Fail 6. Display the report card which includes the student\'s name, student ID, each subject\'s grade, the average grade, and the grade classification. To simulate the process, use the following placeholder implementation: ```python class Student: def __init__(self, first_name, last_name, student_id): self.first_name = first_name self.last_name = last_name self.student_id = student_id self.grades = {} self.average_grade = 0 self.classification = \'\' def generate_report_card(): print(\\"Student Report Card Generation\\") first_name = input(\\"Enter the student\'s first name: \\") last_name = input(\\"Enter the student\'s last name: \\") student_id = input(\\"Enter the student\'s ID: \\") student = Student(first_name, last_name, student_id) subjects = [\\"Mathematics\\", \\"Science\\", \\"English\\", \\"History\\", \\"Art\\"] for subject in subjects: while True: try: grade = float(input(f\\"Enter the grade for {subject}: \\")) if 0 <= grade <= 100: student.grades[subject] = grade break else: print(\\"Grade must be between 0 and 100. Please try again.\\") except ValueError: print(\\"Invalid input. Please enter a numeric value.\\") student.average_grade = sum(student.grades.values()) / len(subjects) if 90 <= student.average_grade <= 100: student.classification = \\"Excellent\\" elif 75 <= student.average_grade < 90: student.classification = \\"Good\\" elif 60 <= student.average_grade < 75: student.classification = \\"Average\\" elif 40 <= student.average_grade < 60: student.classification = \\"Pass\\" else: student.classification = \\"Fail\\" print(\\"nReport Card:\\") print(f\\"Student Name: {student.first_name} {student.last_name}\\") print(f\\"Student ID: {student.student_id}\\") for subject, grade in student.grades.items(): print(f\\"{subject}: {grade}\\") print(f\\"Average Grade: {student.average_grade}\\") print(f\\"Classification: {student.classification}\\") ```","solution":"class Student: def __init__(self, first_name, last_name, student_id): self.first_name = first_name self.last_name = last_name self.student_id = student_id self.grades = {} self.average_grade = 0 self.classification = \'\' def mock_input(inputs): def inner(prompt): return inputs.pop(0) return inner def generate_report_card(input_func=input): print(\\"Student Report Card Generation\\") first_name = input_func(\\"Enter the student\'s first name: \\") last_name = input_func(\\"Enter the student\'s last name: \\") student_id = input_func(\\"Enter the student\'s ID: \\") student = Student(first_name, last_name, student_id) subjects = [\\"Mathematics\\", \\"Science\\", \\"English\\", \\"History\\", \\"Art\\"] for subject in subjects: while True: try: grade = float(input_func(f\\"Enter the grade for {subject}: \\")) if 0 <= grade <= 100: student.grades[subject] = grade break else: print(\\"Grade must be between 0 and 100. Please try again.\\") except ValueError: print(\\"Invalid input. Please enter a numeric value.\\") student.average_grade = sum(student.grades.values()) / len(subjects) if 90 <= student.average_grade <= 100: student.classification = \\"Excellent\\" elif 75 <= student.average_grade < 90: student.classification = \\"Good\\" elif 60 <= student.average_grade < 75: student.classification = \\"Average\\" elif 40 <= student.average_grade < 60: student.classification = \\"Pass\\" else: student.classification = \\"Fail\\" report_card = { \\"Student Name\\": f\\"{student.first_name} {student.last_name}\\", \\"Student ID\\": student.student_id, \\"Grades\\": student.grades, \\"Average Grade\\": student.average_grade, \\"Classification\\": student.classification } print(\\"nReport Card:\\") for key, value in report_card.items(): if key == \\"Grades\\": for subject, grade in value.items(): print(f\\"{subject}: {grade}\\") else: print(f\\"{key}: {value}\\") return report_card"},{"question":"You are given a string of words separated by spaces. You need to write a function that analyses the string to summarize the frequency of each word\'s occurrence, ignoring case. The function should return a dictionary where the keys are the words from the string and the values are the number of occurrences of each word. Write a function `word_frequency(sentence)` that takes a single argument `sentence`, which is a string containing multiple words separated by spaces, and returns a dictionary with the word count per word ignoring case sensitivity. **Requirements:** - Convert the sentence to lower case to ensure case insensitivity. - Split the sentence into individual words based on spaces. - Count the frequency of each word and store this in a dictionary, where keys are the words and values are their respective counts. - Punctuation separated from words by spaces should be treated as separate words. Assumptions: 1. The function will be called with a valid string containing words. 2. The words are separated by single spaces and the string doesn\'t contain leading or trailing spaces. 3. Punctuation marks immediately following or preceding words are considered as separate words. Example: ```python sentence = \\"Hello world, hello\\" output = word_frequency(sentence) print(output) ``` Expected output: ``` {\'hello\': 2, \'world,\': 1} ``` Additional example: ```python sentence = \\"This is a test. This test is easy!\\" output = word_frequency(sentence) print(output) ``` Expected output: ``` {\'this\': 2, \'is\': 2, \'a\': 1, \'test.\': 1, \'test\': 1, \'easy!\': 1} ```","solution":"def word_frequency(sentence): Returns a dictionary with the word frequency count of each word in the sentence, ignoring case sensitivity. Punctuation attached to words is treated as part of the word. :param sentence: A string containing multiple words separated by spaces. :return: A dictionary with words as keys and their frequencies as values. words = sentence.lower().split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"You are tasked with writing a function `generate_breadcrumb_trail(url)` that takes a URL string as input and generates a breadcrumb trail for navigation. The breadcrumb trail should represent the hierarchical structure of the URL, which can be used for easy navigation back to previous sections. Specifically, the function should: 1. Parse the URL and break it down into its hierarchical components. 2. Return a string that represents the breadcrumb trail. Each part of the trail should be clickable and separated by a `>`. 3. The home page should always be the first part of the trail and be represented as \\"Home\\". # Function Signature ```python def generate_breadcrumb_trail(url: str) -> str: pass ``` # Parameters - `url` (str): The input URL string. # Returns - `str`: A string representing the breadcrumb trail with each part separated by a `>`. # Background Information - **Breadcrumb Trail**: A navigation aid used in user interfaces to help users keep track of their locations within programs, documents, or websites. - **URL Parsing**: The process of breaking down a URL into its component parts and using that structure to build the breadcrumb trail. # Example Here\'s an example of how the function might be used: ```python # Example URL url = \\"http://example.com/category/subcategory/item\\" # Generate breadcrumb trail breadcrumb_trail = generate_breadcrumb_trail(url) # Output: \\"Home > category > subcategory > item\\" print(breadcrumb_trail) ``` # Guidelines - Use Python\'s `urllib.parse` library to handle the URL parsing. - Assume that the URL follows a standard structure: `http://domain/part1/part2/part3`. - Only the path parts of the URL should be included in the breadcrumb trail. - Ensure that each part of the breadcrumb trail is correctly formatted and separated from the next part by `>`. # Libraries Required - `urllib.parse`: Python\'s standard library module for parsing URLs.","solution":"from urllib.parse import urlparse def generate_breadcrumb_trail(url: str) -> str: Generates a breadcrumb trail for navigation from a given URL. Parameters: url (str): The input URL string. Returns: str: A string representing the breadcrumb trail with each part separated by a \'>\'. # Parse the URL parsed_url = urlparse(url) # Extract the path and split by \'/\' path_parts = parsed_url.path.strip(\'/\').split(\'/\') # Generate the breadcrumb trail breadcrumbs = [\'Home\'] for part in path_parts: if part: breadcrumbs.append(part) return \' > \'.join(breadcrumbs)"},{"question":"Develop a function that generates a square matrix filled with random integers within a given range, then finds and returns the row and column indices of the largest sum of elements among the rows and columns. The function should raise an error if the matrix size is non-positive or if the range values are invalid. The function signature should be: ``` import numpy as np def find_max_sum_indices(matrix_size, value_range): Generate a matrix of given size with random integers in the specified range and find the indices of the row and column with the highest sums. Parameters: - matrix_size (int): Size of the square matrix (n x n). - value_range (tuple): A tuple (min_value, max_value) specifying the range of values. Returns: - tuple: Indices of the row with the highest sum. - tuple: Indices of the column with the highest sum. ```","solution":"import numpy as np def find_max_sum_indices(matrix_size, value_range): Generate a matrix of given size with random integers in the specified range and find the indices of the row and column with the highest sums. Parameters: - matrix_size (int): Size of the square matrix (n x n). - value_range (tuple): A tuple (min_value, max_value) specifying the range of values. Returns: - tuple: (index_of_max_sum_row, index_of_max_sum_column) # Check for invalid matrix size if matrix_size <= 0: raise ValueError(\\"Matrix size should be a positive integer\\") min_value, max_value = value_range # Check for invalid range values if min_value >= max_value: raise ValueError(\\"Invalid value range: min_value should be less than max_value\\") # Generate the random matrix matrix = np.random.randint(min_value, max_value, size=(matrix_size, matrix_size)) # Sum of rows and columns row_sums = np.sum(matrix, axis=1) col_sums = np.sum(matrix, axis=0) # Indices of max sum row and column max_sum_row_index = np.argmax(row_sums) max_sum_column_index = np.argmax(col_sums) return (max_sum_row_index, max_sum_column_index)"},{"question":"You are required to create a function that rearranges the characters in a given string such that each character appears exactly once, and the remaining characters are removed. The function should also maintain the order of the first occurrence of each character. **Function Name:** `unique_chars(text)` **Parameters:** - `text` (string): A string where each character may appear zero or more times. **Returns:** - A string where each character from the input string appears once and in the same order as their first occurrence in the input string. **Instructions:** 1. Initialize an empty set to keep track of seen characters. 2. Iterate through each character in the input string `text`. 3. For each character, check if it has been seen before: - If it hasn\'t been seen, add it to the result string and mark it as seen. - If it has been seen, skip to the next character. 4. Return the result string containing unique characters in the order of their first occurrence. **Example:** For the input string `\'programming\'`, the output should be `\'progam\'`. For the input string `\'hello world\'`, the output should be `\'helo wrd\'`. ```python def unique_chars(text): result = \\"\\" seen = set() for char in text: if char not in seen: result += char seen.add(char) return result # Examples print(unique_chars(\'programming\')) # Output: \'progam\' print(unique_chars(\'hello world\')) # Output: \'helo wrd\' ```","solution":"def unique_chars(text): Rearranges characters in the input string such that each character appears exactly once in the same order of their first occurrence. Args: text (str): The input string. Returns: str: A string where each character from the input string appears once in the order of their first occurrence. result = \\"\\" seen = set() for char in text: if char not in seen: result += char seen.add(char) return result"},{"question":"Write a function that simulates data for a linear regression analysis. The function should generate a dataset with one predictor variable and a response variable, both containing user-specified numbers of observations. The predictor variable should be generated from a uniform distribution, and the response variable should be linearly related to the predictor with some added Gaussian noise. Ensure that the response variable follows the model: ( y = beta_0 + beta_1 * x + epsilon ), where ( epsilon ) is a normally distributed error term with mean 0 and a user-specified standard deviation. The function should output: - A dictionary containing \'predictor\' and \'response\' keys with their corresponding lists of generated values. You should write self-contained code starting with: ```python import random import numpy as np def generate_linear_regression_data(n_observations=100, beta_0=2.0, beta_1=3.0, noise_std=1.0, random_seed=42): ```","solution":"import random import numpy as np def generate_linear_regression_data(n_observations=100, beta_0=2.0, beta_1=3.0, noise_std=1.0, random_seed=42): Generates dataset for linear regression analysis. Parameters: - n_observations (int): The number of observations to generate. - beta_0 (float): The intercept of the linear model. - beta_1 (float): The slope of the linear model. - noise_std (float): The standard deviation of the Gaussian noise. - random_seed (int): The random seed for reproducibility. Returns: - dict: A dictionary with \'predictor\' and \'response\' keys containing lists of generated values. random.seed(random_seed) np.random.seed(random_seed) predictor = np.random.uniform(0, 1, n_observations) noise = np.random.normal(0, noise_std, n_observations) response = beta_0 + beta_1 * predictor + noise return {\'predictor\': predictor.tolist(), \'response\': response.tolist()}"},{"question":"In this problem, you are required to create a function called `partition_list` which partitions a list of integers into two subsets where the absolute difference of their sums is minimized. You should avoid using any built-in library functions for this task; instead, implement the logic manually. The goal is to split the list into two subsets such that the sum of the elements in each subset is as close as possible. You can assume all integers in the list are positive. Function Signature: ```python def partition_list(nums: list) -> tuple: ``` Input: - `nums` (list): A list of positive integers. Output: - (tuple): A tuple containing two lists (subsets). Example: ```python print(partition_list([1, 6, 11, 5])) # Output: ([1, 6, 5], [11])[OR] ([11], [1, 6, 5]) print(partition_list([3, 1, 4, 2, 2])) # Output: ([3, 2, 1], [4, 2])[OR] ([4, 2], [3, 2, 1]) ``` Explanation: For the first example, the sum of the list `[1, 6, 11, 5]` is 23. By partitioning it into two subsets `[1, 6, 5]` and `[11]`, the sum of the elements in each subset is 12 and 11, respectively. The absolute difference is 1, which is minimized. For the second example, there are multiple possible ways to partition the list into two subsets with minimal absolute difference between their sums. The function should handle such variations and return a valid partition.","solution":"def partition_list(nums): Partitions a list of integers into two subsets such that the absolute difference of their sums is minimized. total_sum = sum(nums) n = len(nums) # Create a dp array to store achievable subset sums dp = [[False] * (total_sum // 2 + 1) for _ in range(n+1)] dp[0][0] = True for i in range(1, n+1): for j in range(total_sum // 2 + 1): if nums[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]] else: dp[i][j] = dp[i-1][j] # Find the subset with the largest possible sum <= total_sum // 2 max_sum_half = 0 for j in range(total_sum // 2 + 1): if dp[n][j]: max_sum_half = j subset1 = [] subset2 = nums[:] # Backtracking to find the subset1 based on dp table w = max_sum_half for i in range(n, 0, -1): if dp[i][w] and not dp[i-1][w]: subset1.append(nums[i-1]) subset2.remove(nums[i-1]) w -= nums[i-1] return (subset1, subset2)"},{"question":"Implement a Python function `move_zeroes(nums)` that takes a list of integers and moves all the zeroes to the end while maintaining the relative order of the non-zero elements. The function should follow these specific steps: 1. Iterate through the list and identify non-zero elements. 2. Reassemble the list with all the identified non-zero elements followed by all the zero elements moved to the end. **Requirements**: You should not make a copy of the list (i.e., you should modify the original list in place). The relative order of non-zero elements must be preserved. **Function Definition**: ```python def move_zeroes(nums): ``` Where: - `nums` (List[int]) : the list of integers provided as input. **Example Usage**: ```python # Suppose we have the following list: nums = [0, 1, 0, 3, 12] # Call the function: move_zeroes(nums) # The list will be modified to: print(nums) # Output: [1, 3, 12, 0, 0] ``` **Additional Notes**: - You should aim to complete this task with an O(n) time complexity. - Avoid using extra space for another list; operate on the input list directly.","solution":"def move_zeroes(nums): Move all zeroes in the list to the end while maintaining the order of non-zero elements. Performs the operation in place. Args: nums (list of int): The list of integers to be modified. last_non_zero_found_at = 0 # If the current element is not 0, then we need to # append it just in front of the last non-zero element we found. for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at] = nums[i] last_non_zero_found_at += 1 # After we have finished processing new elements, # all the non-zero elements are already at the beginning of the array. # We just need to fill the remaining array with 0\'s. for i in range(last_non_zero_found_at, len(nums)): nums[i] = 0"},{"question":"You are asked to implement a function that simulates the rotation of a 2D matrix by 90 degrees clockwise. This task is useful for developing your understanding of matrix manipulation and indexing in Python. Your function should take a square matrix (a list of lists) as input and produce a new matrix that is the result of rotating the input matrix 90 degrees clockwise. For example, given the input matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The output should be: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Your function should be named `rotate_matrix` and should adhere to the following signature: ```python def rotate_matrix(matrix): # Your code here ``` Guidelines: - Assume that the input matrix is a non-empty, square matrix. - Do not use any built-in functions that perform matrix rotation. - Aim to complete the rotation in-place (modifying the existing matrix) if possible. Here is the function signature: ```python def rotate_matrix(matrix): # Your implementation goes here. ```","solution":"def rotate_matrix(matrix): Rotates a square matrix 90 degrees clockwise. Args: matrix (list of list of int): The input square matrix. Returns: list of list of int: The rotated matrix. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"You need to implement a function `game_action(command)` that processes different commands issued in a text-based adventure game. The function should take a single string `command` and respond appropriately based on the type of command. The following actions should be recognized: 1. **Move Command**: - If the command is \\"Move north\\" or \\"Go north\\", the function should return \\"You move north.\\" - If the command is \\"Move south\\" or \\"Go south\\", the function should return \\"You move south.\\" - If the command is \\"Move east\\" or \\"Go east\\", the function should return \\"You move east.\\" - If the command is \\"Move west\\" or \\"Go west\\", the function should return \\"You move west.\\" 2. **Look Command**: - If the command is \\"Look around\\" or \\"Examine surroundings\\", the function should return \\"You see a densely forested area with towering trees all around.\\" 3. **Inventory Command**: - If the command is \\"Check inventory\\" or \\"Inventory\\", the function should return a string listing the items in the player\'s inventory. Assume the items are stored in a list `inventory`, which is pre-defined. 4. **Help Command**: - If the command is \\"Help\\" or \\"Show commands\\", the function should return a list of the available commands. This list is predefined and contains all the command options mentioned above. Use the following predefined lists and import: ```python inventory = [\\"sword\\", \\"shield\\", \\"potion\\"] available_commands = [\\"Move north\\", \\"Move south\\", \\"Move east\\", \\"Move west\\", \\"Look around\\", \\"Examine surroundings\\", \\"Check inventory\\", \\"Inventory\\", \\"Help\\", \\"Show commands\\"] import random ``` # Function Signature: ```python def game_action(command: str): ``` # Example Usage: ```python print(game_action(\\"Move north\\")) # Output: You move north. print(game_action(\\"Check inventory\\")) # Output: Inventory: sword, shield, potion ```","solution":"inventory = [\\"sword\\", \\"shield\\", \\"potion\\"] available_commands = [\\"Move north\\", \\"Move south\\", \\"Move east\\", \\"Move west\\", \\"Look around\\", \\"Examine surroundings\\", \\"Check inventory\\", \\"Inventory\\", \\"Help\\", \\"Show commands\\"] import random def game_action(command: str): if command in [\\"Move north\\", \\"Go north\\"]: return \\"You move north.\\" elif command in [\\"Move south\\", \\"Go south\\"]: return \\"You move south.\\" elif command in [\\"Move east\\", \\"Go east\\"]: return \\"You move east.\\" elif command in [\\"Move west\\", \\"Go west\\"]: return \\"You move west.\\" elif command in [\\"Look around\\", \\"Examine surroundings\\"]: return \\"You see a densely forested area with towering trees all around.\\" elif command in [\\"Check inventory\\", \\"Inventory\\"]: return f\\"Inventory: {\', \'.join(inventory)}\\" elif command in [\\"Help\\", \\"Show commands\\"]: return available_commands else: return \\"Unknown command.\\""},{"question":"You are given a list of dictionaries `products`, where each dictionary represents a product with keys \'name\', \'category\', and \'price\'. Your task is to write a function `average_price_by_category` that computes the average price of products for each category. The function should perform the following tasks: 1. Iterate through the list of products and group them by category. 2. Calculate the average price for each category. 3. Return a dictionary where the keys are the categories and the values are the average prices of the products in those categories, rounded to two decimal places. Here is an example of the `products` list: ```python products = [ {\'name\': \'Product 1\', \'category\': \'Electronics\', \'price\': 99.99}, {\'name\': \'Product 2\', \'category\': \'Electronics\', \'price\': 199.99}, {\'name\': \'Product 3\', \'category\': \'Books\', \'price\': 9.99}, {\'name\': \'Product 4\', \'category\': \'Books\', \'price\': 14.99}, {\'name\': \'Product 5\', \'category\': \'Clothing\', \'price\': 29.99} ] ``` In this example, the function should return: ```python { \'Electronics\': 149.99, \'Books\': 12.49, \'Clothing\': 29.99 } ``` **Function Signature:** ```python def average_price_by_category(products: List[Dict[str, Union[str, float]]]) -> Dict[str, float]: pass ```","solution":"from typing import List, Dict, Union def average_price_by_category(products: List[Dict[str, Union[str, float]]]) -> Dict[str, float]: Computes the average price of products for each category. :param products: List of dictionaries where each dictionary represents a product. :return: A dictionary where keys are categories and values are average prices rounded to two decimal places. from collections import defaultdict category_totals = defaultdict(lambda: {\'total_price\': 0, \'count\': 0}) for product in products: category = product[\'category\'] price = product[\'price\'] category_totals[category][\'total_price\'] += price category_totals[category][\'count\'] += 1 average_prices = {category: round(info[\'total_price\'] / info[\'count\'], 2) for category, info in category_totals.items()} return average_prices"},{"question":"In this problem, you are mandated to employ the basics of Python\'s `datetime` library to create a function named `days_until_birthday` that calculates the number of days left until the next occurrence of a given birthday. You should perform the following tasks: 1. Receive the `birthday` as an input parameter in the format `YYYY-MM-DD`. 2. Parse the given birthday date string into a `datetime` object using the `datetime.strptime` method. 3. Consider the current date using the `datetime.now()` method. 4. Calculate the date of the next birthday. Take into account whether the birthday in the current year has already passed and accordingly set it for this year or the next year. 5. Compute the difference in days between the next birthday and the current date. 6. Return the number of days left until the next birthday. Here is a brief overview of the necessary components: - Use `datetime.strptime(date_string, format)` to parse the birthdate string. - Use `datetime.now()` to get the current date and time. - Use basic date arithmetic to calculate the days remaining. Assume the function will be called with valid input meeting the date format requirements. **Function Signature:** ```python def days_until_birthday(birthday: str) -> int: ``` Implement the function considering the above instructions.","solution":"from datetime import datetime def days_until_birthday(birthday: str) -> int: Calculates the number of days left until the next occurrence of the given birthday. Args: birthday (str): The birthday in the format \'YYYY-MM-DD\'. Returns: int: Number of days until the next birthday. birthday_date = datetime.strptime(birthday, \\"%Y-%m-%d\\") current_date = datetime.now() # Construct the next birthday date in the current year next_birthday = datetime(current_date.year, birthday_date.month, birthday_date.day) # If the next birthday this year has already passed, add one year if next_birthday < current_date: next_birthday = datetime(current_date.year + 1, birthday_date.month, birthday_date.day) # Calculate the difference in days delta = next_birthday - current_date return delta.days"},{"question":"You are asked to implement a function named `group_elements` using Python. The goal of this function is to group elements of a list into sublists of a specified size. **Function Signature:** ```python def group_elements(elements: list, group_size: int) -> list: pass ``` **Function Description:** - **Parameters:** - `elements` (list): The list of elements to be grouped. - `group_size` (int): The size of each sublist. - **Behavior:** - The function should return a list of sublists, where each sublist contains exactly `group_size` elements. - If the number of elements in the `elements` list is not perfectly divisible by `group_size`, the last sublist should contain the remaining elements. **Example:** ```python group_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) ``` Running the above example should return `[[1, 2, 3], [4, 5, 6], [7, 8, 9]]`. ```python group_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) ``` Running the above example should return `[[1, 2, 3, 4], [5, 6, 7, 8], [9]]`. **Requirements:** - The function must maintain the original order of elements while grouping. - Ensure that input validation checks are included: - The `group_size` must be a positive integer greater than zero. - The `elements` list should be of type `list`. **Task:** Implement the function `group_elements` as described.","solution":"def group_elements(elements, group_size): Groups elements of a list into sublists of a specified size. Parameters: - elements (list): The list of elements to be grouped. - group_size (int): The size of each sublist. Returns: - List of sublists, where each sublist contains up to group_size elements. # Input validation if not isinstance(elements, list): raise ValueError(\\"The elements parameter must be a list.\\") if not isinstance(group_size, int) or group_size <= 0: raise ValueError(\\"The group_size parameter must be a positive integer greater than zero.\\") # Creating groups result = [elements[i:i + group_size] for i in range(0, len(elements), group_size)] return result"},{"question":"You are tasked with processing a CSV file named `students.csv` that contains information about students and their respective grades in various subjects. The purpose is to calculate and append the average grade for each student to the CSV file. You need to create a function named `calculate_average_grades` that reads the data, calculates average grades for each student, and writes the updated data back to the same `students.csv` file. **Requirements:** 1. Use the `csv` library, specifically the `csv.reader` function, to read the CSV content. 2. Use the `csv.writer` function to write the updated data back to the file. 3. Ensure the new CSV file includes an additional column labeled \\"Average\\" which contains the calculated average grade for each student. 4. Handle possible edge cases, such as a student having no grades, by setting their average grade to `0`. Here’s an illustrative example of the `students.csv` structure: ``` Name,Math,Physics,Chemistry Alice,85,92,88 Bob,78,85,90 Charlie,90,85,94 ``` The resulting CSV after processing could look like this: ``` Name,Math,Physics,Chemistry,Average Alice,85,92,88,88.33 Bob,78,85,90,84.33 Charlie,90,85,94,89.67 ``` Write the function `calculate_average_grades()` to achieve this task.","solution":"import csv def calculate_average_grades(file_path): Reads CSV data from file_path, calculates average grades, and writes updated data back to the file. # Read the data with open(file_path, \'r\') as file: reader = csv.reader(file) rows = list(reader) # Calculate the averages and write the updated data if len(rows) == 0: return # Empty file, nothing to process header = rows[0] + [\\"Average\\"] updated_rows = [header] for row in rows[1:]: grades = [float(grade) for grade in row[1:] if grade != \\"\\"] average = round(sum(grades) / len(grades), 2) if grades else 0 updated_rows.append(row + [average]) # Write the updated rows back to the file with open(file_path, \'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerows(updated_rows)"},{"question":"You are tasked with writing a Python function named `summarize_text` that accepts a string representing a block of text and an integer representing the maximum number of words allowed in the summary. Your function must return a summarized version of the text that only includes up to the specified number of words. If the original text exceeds this limit, truncate it at the nearest word boundary and add an ellipsis (\\"...\\") to indicate that it has been shortened. If the text is shorter than or equal to the limit, return it unchanged. # Requirements: 1. **Function Name:** `summarize_text` 2. **Parameters:** - `text` (string): The block of text to be summarized. - `max_words` (integer): The maximum number of words allowed in the summary. 3. **Return Value:** A string representing the summarized text, ending with an ellipsis if the original text was truncated. 4. **Assumptions:** - Words are defined as sequences of characters separated by spaces. - Preserve all punctuation and capitalization in the text. # Example: ```python summarize_text(\\"The quick brown fox jumps over the lazy dog.\\", 4) # Should return \\"The quick brown fox...\\" summarize_text(\\"The quick brown fox\\", 5) # Should return \\"The quick brown fox\\" summarize_text(\\"The quick brown fox\\", 3) # Should return \\"The quick brown fox...\\" ``` **Note:** Ensure the function handles edge cases such as empty strings, various punctuation, and multiple consecutive spaces appropriately.","solution":"def summarize_text(text, max_words): Summarizes the input text to include up to max_words words. Parameters: text (str): The block of text to be summarized. max_words (int): The maximum number of words allowed in the summary. Returns: str: The summarized text, possibly ending with an ellipsis if truncated. if max_words <= 0: return \\"...\\" words = text.split() if len(words) <= max_words: return text return \' \'.join(words[:max_words]) + \\"...\\""},{"question":"Sum Root to Leaf Numbers In this problem, you are given the root of a binary tree where each node contains a single digit (0-9). You should write a function that computes the sum of all the numbers formed by root-to-leaf paths. You need to write a function with the following signature: ```python def sumNumbers(root): pass ``` Here’s what the function parameters should represent: - `root` (TreeNode): A TreeNode object representing the root of the binary tree. The `TreeNode` class is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` The `sumNumbers` function should: 1. Traverse the binary tree from the root to each leaf. 2. Form a number by concatenating the values of the nodes along the path from the root to each leaf. 3. Sum all these numbers and return the total sum. **Example Usage:** ```python # Create a binary tree: # 1 # / # 2 3 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) # The numbers formed are 12 and 13, so the sum is 25. print(sumNumbers(root)) # Output: 25 # Create a binary tree: # 4 # / # 9 0 # / # 5 1 root = TreeNode(4) root.left = TreeNode(9) root.right = TreeNode(0) root.left.left = TreeNode(5) root.left.right = TreeNode(1) # The numbers formed are 495, 491, and 40, so the sum is 1026. print(sumNumbers(root)) # Output: 1026 ``` **Constraints:** - The number of nodes in the tree is in the range [1, 1000]. - Each node\'s value is a digit from 0 to 9.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sumNumbers(root): def dfs(node, current_sum): if not node: return 0 current_sum = current_sum * 10 + node.val if not node.left and not node.right: # if it\'s a leaf node return current_sum return dfs(node.left, current_sum) + dfs(node.right, current_sum) return dfs(root, 0)"},{"question":"You are tasked with creating a function to calculate and visualize a line of best fit using the Matplotlib library, making good use of the `xlabel`, `ylabel`, and `title` functions provided by the library. Context Your task is to create a function `plot_regression` that will take in a list of x-values and y-values, and then plot the scatter plot of the given data along with the line of best fit. The function should also add appropriate labels for the x-axis, y-axis, and a title indicating the equation of the line of best fit. Function Signature ```python def plot_regression(x_values, y_values): ``` Parameters - `x_values` (list of floats): A list of numerical values representing the x-coordinates of the data points. - `y_values` (list of floats): A list of numerical values representing the y-coordinates of the data points. Requirements 1. Use `numpy.polyfit` to compute the coefficients (slope and intercept) of the best fit line. 2. Plot the original data as a scatter plot. 3. Plot the line of best fit using the calculated coefficients from `numpy.polyfit`. 4. Use `xlabel` from `matplotlib.pyplot` to label the x-axis as \\"X Values\\". 5. Use `ylabel` from `matplotlib.pyplot` to label the y-axis as \\"Y Values\\". 6. Use `title` from `matplotlib.pyplot` to set the title of the plot to \\"Line of Best Fit: y = mx + b\\" where `m` is the slope and `b` is the intercept. # Example ```python x_values = [1, 2, 3, 4, 5] y_values = [2, 3, 5, 4, 6] plot_regression(x_values, y_values) ``` This will generate a scatter plot of the data along with the line of best fit and the equation of the line as the title.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_regression(x_values, y_values): Plots a scatter plot of the given data along with the line of best fit. :param x_values: A list of numerical values representing the x-coordinates of the data points. :param y_values: A list of numerical values representing the y-coordinates of the data points. # Convert input lists to numpy arrays x = np.array(x_values) y = np.array(y_values) # Calculate the coefficients of the best fit line slope, intercept = np.polyfit(x, y, 1) # Generate the line of best fit best_fit_line = slope * x + intercept # Plot the original data as a scatter plot plt.scatter(x, y, color=\'blue\', label=\'Data Points\') # Plot the line of best fit plt.plot(x, best_fit_line, color=\'red\', label=f\'Best Fit Line: y = {slope:.2f}x + {intercept:.2f}\') # Set the labels and title plt.xlabel(\'X Values\') plt.ylabel(\'Y Values\') plt.title(f\'Line of Best Fit: y = {slope:.2f}x + {intercept:.2f}\') # Add a legend plt.legend() # Show the plot plt.show()"},{"question":"Write a function that accepts a list of dictionaries representing student test results. Each dictionary contains three keys: \'student_id\', \'subject\', and \'score\'. Your function should compute the average score for each student across all subjects, and then return a list of dictionaries where each dictionary contains \'student_id\' and \'average_score\'. The output must list students sorted by their \'student_id\' in ascending order. The function should have the following signature: ``` def calculate_average_scores(test_results): ``` Example: ``` input = [{\\"student_id\\": \\"A123\\", \\"subject\\": \\"Math\\", \\"score\\": 85}, {\\"student_id\\": \\"A123\\", \\"subject\\": \\"Science\\", \\"score\\": 90}, {\\"student_id\\": \\"B456\\", \\"subject\\": \\"Math\\", \\"score\\": 78}, {\\"student_id\\": \\"B456\\", \\"subject\\": \\"Science\\", \\"score\\": 82}] output = [{\\"student_id\\": \\"A123\\", \\"average_score\\": 87.5}, {\\"student_id\\": \\"B456\\", \\"average_score\\": 80.0}] ```","solution":"def calculate_average_scores(test_results): Calculate the average score for each student across all subjects. Parameters: test_results (list): A list of dictionaries, where each dictionary represents a test result with \'student_id\', \'subject\', and \'score\'. Returns: list: A list of dictionaries containing \'student_id\' and \'average_score\', sorted by \'student_id\'. from collections import defaultdict # Dictionary to hold total scores and count of subjects for each student student_scores = defaultdict(lambda: {\'total_score\': 0, \'subject_count\': 0}) # Aggregate scores and subject count for each student for result in test_results: student_id = result[\'student_id\'] score = result[\'score\'] student_scores[student_id][\'total_score\'] += score student_scores[student_id][\'subject_count\'] += 1 # Calculate average scores and create the final result list average_scores = [] for student_id, scores in student_scores.items(): average_score = scores[\'total_score\'] / scores[\'subject_count\'] average_scores.append({\'student_id\': student_id, \'average_score\': average_score}) # Sort the result list by student_id average_scores.sort(key=lambda x: x[\'student_id\']) return average_scores"},{"question":"You are provided with a list of positive integers representing the prices of items in a store. A customer has a limited budget and wants to buy the maximum number of unique items without exceeding their budget. Your task is to write a function that determines the maximum number of unique items the customer can purchase. **Function Specification:** - **Function Name:** `max_unique_items` - **Parameters:** - `prices` (list of int): A list of integers representing the prices of items. - `budget` (int): The total budget the customer has. - **Returns:** An integer representing the maximum number of unique items the customer can buy without exceeding the budget. **Requirements:** 1. Sort the list of item prices in ascending order to optimize for the maximum number of items purchased. 2. Incrementally add item prices to a running total until adding another item would exceed the budget. 3. Ensure that the function correctly handles edge cases, such as an empty list of prices or a budget of zero. **Examples:** ```python # Example 1 prices = [20, 10, 50, 30, 40] budget = 70 # After executing max_unique_items(prices, budget), the function should return 3 # Explanation: The customer can buy items priced at 10, 20, and 30 without exceeding their budget. # Example 2 prices = [15, 10, 20, 35, 25] budget = 60 # After executing max_unique_items(prices, budget), the function should return 3 # Explanation: The customer can buy items priced at 10, 15, and 20 without exceeding their budget. ``` The solution should be efficient in terms of time complexity, and the implementation should primarily focus on solving the problem within the constraints of sorting and budgeting.","solution":"def max_unique_items(prices, budget): Returns the maximum number of unique items that can be purchased without exceeding the budget. sorted_prices = sorted(prices) total_cost = 0 count = 0 for price in sorted_prices: if total_cost + price <= budget: total_cost += price count += 1 else: break return count"},{"question":"In this problem, you are tasked with processing a list of sentences represented as strings. Each sentence contains words that are either lowercase letters, uppercase letters, or a combination of both. The goal is to sort the words in each sentence lexicographically while preserving their original case. Write a function `sort_sentences(sentences: List[str]) -> List[str]` that sorts the words in each sentence in lexicographical order, without altering their cases. Note that uppercase letters should be considered different from lowercase ones in terms of sorting. **Requirements:** 1. Split each sentence into words. 2. Sort the words lexicographically. 3. Join the sorted words back into a sentence. 4. Return the modified list of sentences. **Example:** Given the input list: ```python sentences = [ \\"apple Banana apple\\", \\"dog Cat Elephant bee\\", \\"zebra Xylophone dog apple\\", \\"Apple banana apple\\" ] ``` The output should be: ```python [ \\"Banana apple apple\\", \\"Cat Elephant bee dog\\", \\"Xylophone apple dog zebra\\", \\"Apple apple banana\\" ] ``` **Explanation:** - The first sentence: \\"Banana\\" comes before \\"apple\\" and the second \\"apple\\" remains. - The second sentence: \\"Cat\\" comes before \\"Elephant,\\" which is followed by \\"bee\\" and \\"dog.\\" - The third sentence: \\"Xylophone\\" comes before \\"apple,\\" then \\"dog\\" and \\"zebra.\\" - The fourth sentence: \\"Apple\\" and \\"apple\\" are sorted, followed by \\"banana.\\"","solution":"from typing import List def sort_sentences(sentences: List[str]) -> List[str]: Sorts the words in each sentence lexicographically without altering their cases. Args: sentences (List[str]): List of sentences where each sentence is a string. Returns: List[str]: List of sentences with words sorted lexicographically. sorted_sentences = [] for sentence in sentences: words = sentence.split() words.sort() sorted_sentence = \\" \\".join(words) sorted_sentences.append(sorted_sentence) return sorted_sentences"},{"question":"You are given a list of integers and you need to implement a function that checks if there exists a triplet (a, b, c) in the given list which satisfies the equation a + b + c = 0. The function should return a list of all unique triplets that satisfy the condition. Each triplet in the output list must be ordered such that a ≤ b ≤ c, and the list of triplets must be sorted in ascending order by their first elements, and for triplets with the same first element, by their second, and then by their third elements. Your task is to write a function called `find_triplets` that takes a list of integers `nums` as input and returns a list of all unique triplets that sum up to zero. Specifically, you need to write a function `find_triplets(nums)` where: - `nums`: A list of integers. The function should: 1. Find all unique triplets (a, b, c) in `nums` such that a + b + c = 0. 2. Ensure each triplet in the result is sorted in non-decreasing order. 3. Ensure the output list is sorted in ascending order as described above. Example: ``` find_triplets([-1, 0, 1, 2, -1, -4]) ``` Expected Output: ``` [[-1, -1, 2], [-1, 0, 1]] ``` Constraints: - All numbers in the input list are distinct by absolute values. - The length of the input list is at least 3 and at most 3000.","solution":"def find_triplets(nums): Finds all unique triplets in the list that sum up to zero. Args: nums (list): A list of integers. Returns: list: A list of unique triplets where the sum of the triplet is zero. nums.sort() triplets = [] n = len(nums) for i in range(n-2): # Skip the duplicates for the first element if i > 0 and nums[i] == nums[i-1]: continue left, right = i+1, n-1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: triplets.append([nums[i], nums[left], nums[right]]) # Skip duplicates for the second and third elements while left < right and nums[left] == nums[left+1]: left += 1 while left < right and nums[right] == nums[right-1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return triplets"},{"question":"You are required to write a Python function that simulates a basic task scheduling system. The function accepts a list of tasks and the time duration for each task, and then executes each task with a delay equal to the given duration. The function `execute_tasks` takes one argument: - `tasks`: a list of tuples, where each tuple contains two elements: 1. `task`: a callable object (usually a function) that represents the task to be executed. 2. `duration`: a floating-point number representing the number of seconds to wait before executing the next task. You need to: 1. Loop through each task in the list. 2. Use `time.sleep` to wait for the specified duration before executing the task. 3. Execute the task (call the function). 4. Track and return the total time taken to execute all tasks. To accurately track the total time, make use of the `time.time` function from the `time` module to mark the start and end times. # Example Usage ```python import time def task1(): print(\\"Task 1 is running\\") def task2(): print(\\"Task 2 is running\\") tasks_list = [(task1, 2.0), (task2, 3.5)] total_time = execute_tasks(tasks_list) print(f\\"Total time taken: {total_time} seconds\\") ``` This function should print: ``` Task 1 is running (wait for 2 seconds) Task 2 is running (wait for 3.5 seconds) Total time taken: 5.5 seconds (approximately) ```","solution":"import time def execute_tasks(tasks): Executes a list of tasks with specified delays between them. Parameters: tasks (list of tuples): Each tuple contains a task (callable) and its delay (float). Returns: float: Total time taken to execute all tasks. start_time = time.time() for task, duration in tasks: time.sleep(duration) task() end_time = time.time() total_time = end_time - start_time return total_time"},{"question":"You are required to write a Python function called `memoize` which will utilize a dictionary to store the results of expensive function calls and return the cached result when the same inputs occur again. 1. Your function, `memoize`, must be a decorator that can be applied to other functions to cache their results. 2. Use a dictionary to store the results of function calls, with the function\'s arguments as keys and the result as values. 3. If a function is called with arguments that are already in the cache, return the cached result instead of recomputing the function. 4. Ensure that the decorated function retains its original function name and docstring using the `functools.wraps` decorator. 5. Ensure that the `memoize` decorator works correctly with any function it decorates, including those with multiple arguments. Your solution should demonstrate an understanding of decorators in Python, how to use dictionaries for caching, and how to use the `functools.wraps` decorator correctly. Use the following example function to indicate how the `memoize` decorator can be applied: ```python @memoize def fibonacci(n): Compute the nth Fibonacci number if n <= 1: return n return fibonacci(n-1) + fibonacci(n-2) print(fibonacci(10)) ``` **Expected Output:** ``` 55 ``` The `memoize` decorator should ensure that subsequent calls to `fibonacci` with the same argument do not recompute the value, thus improving performance.","solution":"import functools def memoize(func): cache = {} @functools.wraps(func) def memoized_func(*args): if args in cache: return cache[args] result = func(*args) cache[args] = result return result return memoized_func"},{"question":"# Context: In text processing, palindrome detection is a common task. A palindrome is a word, phrase, number, or sequence of words that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, \\"A man, a plan, a canal, Panama\\" is a palindrome. # Task: Write a Python function named `longest_palindromic_substring(s)` that performs the following tasks: 1. Takes a string `s` as input. 2. Finds and returns the longest palindromic substring in `s`. 3. If there are multiple substrings of the same maximum length, return the first one that occurs. # Function Signature: ```python def longest_palindromic_substring(s: str) -> str: ``` # Input: - **s**: A string `s` containing only alphanumeric characters. # Output: - Returns a string representing the longest palindromic substring in `s`. # Instructions: - The function should not consider spaces, punctuation, or case differences when determining if a substring is a palindrome. - You can assume the input string `s` has a maximum length of 1000 characters. # Example: ```python longest_palindromic_substring(\\"racecar\\") ``` Expected Output: ``` \\"racecar\\" ``` # Example: ```python longest_palindromic_substring(\\"babad\\") ``` Expected Output: ``` \\"bab\\" or \\"aba\\" ``` # Note: - Ensure your function has an optimal performance to handle the input size efficiently. - Do not use any external libraries for palindrome detection.","solution":"def longest_palindromic_substring(s: str) -> str: def pre_process(s: str): return \'\'.join([char.lower() for char in s if char.isalnum()]) def expand_from_center(s: str, left: int, right: int) -> str: while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] s = pre_process(s) if len(s) == 0: return \\"\\" longest = \\"\\" for i in range(len(s)): # Odd length palindromes temp = expand_from_center(s, i, i) if len(temp) > len(longest): longest = temp # Even length palindromes temp = expand_from_center(s, i, i + 1) if len(temp) > len(longest): longest = temp return longest"},{"question":"Write a function that takes an input string containing a mathematical expression involving addition, subtraction, multiplication, and division, and returns the result of the expression. The input string may contain white spaces, which should be ignored in the computation. You should implement the function without using the built-in `eval()` function. Ensure proper order of operations is adhered to. The function should output with: float: The result of the evaluated expression rounded to two decimal places. You should write self-contained code starting with: ``` def evaluate_expression(expression): ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression given as a string. Handles algebraic operations: addition, subtraction, multiplication, and division. Ignores any white spaces in the input. Proper order of operations is maintained (PEMDAS/BODMAS rules). Parameters: expression (str): Input string containing the mathematical expression. Returns: float: The result of the evaluated expression rounded to two decimal places. import re def operate(a, b, operator): if operator == \'+\': return a + b elif operator == \'-\': return a - b elif operator == \'*\': return a * b elif operator == \'/\': return a / b # Remove white spaces from expression expression = expression.replace(\' \', \'\') # Tokenize the input string into numbers and operators tokens = re.findall(r\'d+.?d*|[+-*/()]\', expression) def evaluate(tokens): op_stack = [] val_stack = [] def apply_operator(): operator = op_stack.pop() right = val_stack.pop() left = val_stack.pop() val_stack.append(operate(left, right, operator)) i = 0 while i < len(tokens): token = tokens[i] if token.isnumeric() or re.match(r\'d+.?d*\', token): val_stack.append(float(token)) elif token == \'(\': op_stack.append(token) elif token == \')\': while op_stack and op_stack[-1] != \'(\': apply_operator() op_stack.pop() # pop \'(\' else: while (op_stack and op_stack[-1] in (\'*\', \'/\', \'+\', \'-\') and (token in (\'+\', \'-\') or op_stack[-1] in (\'*\', \'/\'))): apply_operator() op_stack.append(token) i += 1 while op_stack: apply_operator() return val_stack[0] result = evaluate(tokens) return round(result, 2)"},{"question":"Create a function that accepts a list of dictionaries and a list of keys. The function should return a new list, filtering out dictionaries that do not contain all the specified keys. Additionally, sort the final list of dictionaries based on the values associated with one of the specified keys in ascending order. If multiple dictionaries have the same value for the specified key, maintain their original relative order (stable sort). The function should output: ``` List[Dict]: A new list of dictionaries filtered and sorted based on the criteria. ``` You should write self-contained code starting with: ``` from typing import List, Dict def filter_and_sort_dicts(dicts: List[Dict], keys: List[str], sort_key: str) -> List[Dict]: ```","solution":"from typing import List, Dict def filter_and_sort_dicts(dicts: List[Dict], keys: List[str], sort_key: str) -> List[Dict]: Return a new list of dictionaries filtered to include only those that contain all specified keys and sorted by the value of the specified sort_key in ascending order. # Step 1: Filter out dictionaries that do not contain all specified keys filtered_dicts = [d for d in dicts if all(key in d for key in keys)] # Step 2: Sort the filtered list by the sort_key sorted_dicts = sorted(filtered_dicts, key=lambda d: d[sort_key]) return sorted_dicts"},{"question":"Design a function that calculates the moving average of a stream of numbers over a specified window size. The function will take two arguments: the stream of numbers (a list) and the window size (an integer). It will return a list of the moving averages for each position in the input list where a complete window exists. You should write self-contained code starting with: ``` def moving_average(stream, window_size): ``` Example: ``` stream = [1, 2, 3, 4, 5] window_size = 3 ``` Expected output: ``` [2.0, 3.0, 4.0] # Calculated as [(1+2+3)/3, (2+3+4)/3, (3+4+5)/3] ```","solution":"def moving_average(stream, window_size): Calculate the moving average of a stream of numbers over a specified window size. :param stream: List of numbers :param window_size: Integer window size :return: List of moving averages if not stream or window_size <= 0 or window_size > len(stream): return [] moving_averages = [] for i in range(len(stream) - window_size + 1): window = stream[i:i + window_size] avg = sum(window) / window_size moving_averages.append(avg) return moving_averages"},{"question":"You are required to develop a Python function named `analyze_customer_purchases` that processes a DataFrame containing customer purchase data and analyzes the total purchase amount per customer. The function needs to calculate the total purchase amount for each customer and return a DataFrame with the customer IDs and their corresponding total purchase amounts. The input DataFrame `df` contains the following columns: - `CustomerID`: Unique identifier for each customer. - `PurchaseAmount`: The amount spent by the customer in each purchase. Your task is to implement the function `analyze_customer_purchases` that performs the following steps: 1. Group the data by \'CustomerID\'. 2. Calculate the sum of \'PurchaseAmount\' for each customer. 3. Sort the resulting DataFrame by the total purchase amount in descending order. 4. Return a DataFrame with two columns: \'CustomerID\' and \'TotalPurchaseAmount\'. Here is the function signature for reference: ```python def analyze_customer_purchases(df): Analyzes the total purchase amount per customer. Parameters: df (DataFrame): A DataFrame containing customer purchase data with columns \'CustomerID\' and \'PurchaseAmount\'. Returns: DataFrame: A DataFrame with columns \'CustomerID\' and \'TotalPurchaseAmount\', sorted by the total purchase amount in descending order. ```","solution":"import pandas as pd def analyze_customer_purchases(df): Analyzes the total purchase amount per customer. Parameters: df (DataFrame): A DataFrame containing customer purchase data with columns \'CustomerID\' and \'PurchaseAmount\'. Returns: DataFrame: A DataFrame with columns \'CustomerID\' and \'TotalPurchaseAmount\', sorted by the total purchase amount in descending order. grouped = df.groupby(\'CustomerID\')[\'PurchaseAmount\'].sum().reset_index() grouped = grouped.rename(columns={\'PurchaseAmount\': \'TotalPurchaseAmount\'}) sorted_grouped = grouped.sort_values(by=\'TotalPurchaseAmount\', ascending=False).reset_index(drop=True) return sorted_grouped"},{"question":"Write a function that monitors the memory usage of the system for 10 seconds, storing the memory percentage used at each second. After 10 seconds, print the list of memory usage percentages and write these values into a text file named \\"memory_usage.txt\\". Use the psutil library to get memory usage and time library to introduce a delay of 1 second between each read. The function should output with: - list: A list of 10 recorded memory usage percentages. You should write self-contained code starting with: ``` import psutil import time def monitor_memory(): ```","solution":"import psutil import time def monitor_memory(): memory_usage_list = [] for _ in range(10): memory_info = psutil.virtual_memory() memory_usage_list.append(memory_info.percent) time.sleep(1) with open(\\"memory_usage.txt\\", \\"w\\") as f: for usage in memory_usage_list: f.write(f\\"{usage}n\\") return memory_usage_list"},{"question":"Given a sorted list of integers `nums` and an integer `m`, you need to implement a function `split_array` that splits the list into `m` non-empty contiguous subarrays such that the largest sum among these subarrays is minimized. You should return the minimized largest sum. The function signature is: ```python def split_array(nums: List[int], m: int) -> int: ``` # Constraints: - `1 <= len(nums) <= 1000` - `0 <= nums[i] <= 10^6` - `1 <= m <= len(nums)` # Example 1: ``` Input: nums = [7,2,5,10,8] m = 2 Output: 18 Explanation: There are four ways to split `nums` into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is `18`, which is minimized in this case. ``` # Example 2: ``` Input: nums = [1,2,3,4,5] m = 2 Output: 9 Explanation: There are several ways to split `nums` into two subarrays. The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is `9`, which is minimized in this case. ``` # Note To solve the problem efficiently, consider using binary search on the result.","solution":"from typing import List def split_array(nums: List[int], m: int) -> int: def valid(mid: int) -> bool: current_sum = 0 subarrays = 1 for num in nums: current_sum += num if current_sum > mid: subarrays += 1 current_sum = num if subarrays > m: return False return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if valid(mid): right = mid else: left = mid + 1 return left"},{"question":"**Objective**: Write a function that takes two strings representing positive integers and returns their sum as a string. Your implementation should not use any direct integer conversion functions such as `int()` or `str()` during the calculation. **Requirements**: Do not use built-in functions for direct integer conversion (like `int()` or `str()` for parsing). Instead, simulate the addition process as if you were performing it by hand. **Function Name**: `add_strings` **Function Signature**: ```python def add_strings(num1: str, num2: str) -> str: ``` **Parameters**: 1. `num1` (str): A string representing the first positive integer. 2. `num2` (str): A string representing the second positive integer. **Returns**: - A string representing the sum of the two numbers. **Instructions**: 1. Initialize a variable to keep track of the carry. 2. Iterate through the two strings from the least significant digit to the most significant digit. 3. Add corresponding digits along with the carry from the previous addition. 4. Store the result\'s corresponding digit and update the carry. 5. After completing the iteration, if there is any remaining carry, append it to the result. 6. Return the resulting string representing the sum. # Example Usage: ```python num1 = \\"123\\" num2 = \\"456\\" result = add_strings(num1, num2) print(result) # Should print \\"579\\" ``` # Additional Notes: - The input strings are guaranteed to be valid representations of positive integers with no leading zeros. - The function should handle the addition of very large numbers correctly by manually simulating the process of addition digit by digit.","solution":"def add_strings(num1: str, num2: str) -> str: Adds two positive integers represented as strings and returns their sum as a string. # Reverse the strings to simplify the addition process num1, num2 = num1[::-1], num2[::-1] carry = 0 result = [] # Iterate through the digits from least significant to most significant for i in range(max(len(num1), len(num2))): digit1 = int(num1[i]) if i < len(num1) else 0 digit2 = int(num2[i]) if i < len(num2) else 0 # Sum the digits along with the carry total = digit1 + digit2 + carry result_digit = total % 10 carry = total // 10 # Append the result digit result.append(str(result_digit)) # If there\'s any remaining carry, append it as well if carry > 0: result.append(str(carry)) # Reverse the result to form the final sum as a string return \'\'.join(result[::-1])"},{"question":"Suppose you are developing a simple e-commerce application and you need to implement a function to process orders. Each order consists of multiple items, and you want to calculate the total cost of the order after applying a discount on each item (if a discount is applicable). The function will take a list of tuples as input, where each tuple contains: 1. The item price as a float. 2. A boolean indicating whether a discount should be applied to that item. 3. The discount rate as a float (e.g., 0.1 for 10% discount). Your function should: 1. Iterate through the list of items. 2. For each item, check if a discount should be applied. 3. If yes, apply the discount to the item\'s price. 4. Sum up the total cost of all the items after applying discounts. 5. Return the total cost rounded to two decimal places. Write the function: ```python def calculate_order_total(items): ... ``` Example: ```python items = [ (100.0, True, 0.1), # price 100.0, apply 10% discount (200.0, False, 0.05), # price 200.0, no discount (50.0, True, 0.2) # price 50.0, apply 20% discount ] total = calculate_order_total(items) print(total) # Output should be: 315.00 ``` Ensure your implementation handles the items correctly and returns the total cost rounded to two decimal places.","solution":"def calculate_order_total(items): Calculates the total cost of an order after applying discounts. Arguments: items (list of tuples): Each tuple contains: - item price (float) - boolean indicating if a discount is applicable - discount rate (float) Returns: float: The total cost of the order rounded to two decimal places. total_cost = 0.0 for price, apply_discount, discount_rate in items: if apply_discount: price -= price * discount_rate total_cost += price return round(total_cost, 2)"},{"question":"Your task is to write a function `reorder_by_indices(arr, indices)` that reorders elements in a given array based on a specified list of indices. This function should use the `numpy` library for array manipulation. Function Specification: - **Function Name:** `reorder_by_indices` - **Parameters:** - `arr`: A one-dimensional numpy array containing the elements to be reordered. - `indices`: A one-dimensional numpy array of integer indices that specify the new order for the elements in `arr`. - **Returns:** - `reordered_arr`: A one-dimensional numpy array with elements reordered according to the specified indices. Instructions: 1. Ensure that the length of `indices` matches the length of `arr`. 2. Use `numpy` operations to reorder `arr` based on `indices`. 3. Return the reordered array. Example Usage: ```python import numpy as np arr = np.array([10, 20, 30, 40]) indices = np.array([3, 1, 0, 2]) reordered_arr = reorder_by_indices(arr, indices) print(\\"Reordered Array:\\", reordered_arr) ``` In this example, the input array `arr` will be reordered based on the `indices` array, resulting in the output array `[40, 20, 10, 30]`.","solution":"import numpy as np def reorder_by_indices(arr, indices): Reorders elements in the input array based on the specified indices using numpy. Parameters: arr (numpy.ndarray): A one-dimensional numpy array to be reordered. indices (numpy.ndarray): A one-dimensional numpy array of integer indices specifying the new order. Returns: numpy.ndarray: A one-dimensional numpy array with elements reordered according to the specified indices. if len(arr) != len(indices): raise ValueError(\\"Length of indices must match the length of arr.\\") return arr[indices]"},{"question":"You are required to implement a function that processes an input list containing a mix of data types (integers, floats, and strings). The function should parse through the list and perform the following operations: 1. Separate the data into three distinct lists: integers, floats, and strings. 2. Compute the sum of the integers and the sum of the floats. 3. Concatenate all the strings into a single string. 4. Return a tuple containing three elements: - The sum of the integers. - The sum of the floats. - The concatenated string of all input strings. Write a function named `process_mixed_list` with the following signature: ```python def process_mixed_list(data: list) -> tuple: ``` **Input:** A list of elements where each element is either an integer, a float, or a string. **Output:** A tuple consisting of: 1. The sum of all integer elements. 2. The sum of all float elements. 3. A single string that is the concatenation of all string elements. **Example:** ```python data = [3, \'hello\', 2.5, 7, \'world\', 3.3] result = process_mixed_list(data) # result should be (10, 5.8, \'helloworld\') ``` Ensure your code is general enough to handle any list containing a mix of the mentioned data types.","solution":"def process_mixed_list(data: list) -> tuple: Processes a list containing a mix of integers, floats, and strings. Args: data (list): A list containing integers, floats, and strings. Returns: tuple: A tuple containing the sum of integers, the sum of floats, and concatenated string of all input strings. sum_of_integers = 0 sum_of_floats = 0.0 concatenated_string = \\"\\" for item in data: if isinstance(item, int): sum_of_integers += item elif isinstance(item, float): sum_of_floats += item elif isinstance(item, str): concatenated_string += item return (sum_of_integers, sum_of_floats, concatenated_string)"},{"question":"You are asked to design a Python function named `generate_pascal_row` that takes a single integer `n` and returns the nth row of Pascal\'s Triangle. In this problem, rows are indexed starting from 0. For example, if `n = 0`, the function should return `[1]`, and if `n = 3`, it should return `[1, 3, 3, 1]`. Pascal\'s Triangle can be constructed using the binomial coefficient. The value at each position in the triangle can be calculated using the formula: [ C(n, k) = frac{n!}{k! cdot (n - k)!} ] where: - ( n! ) denotes the factorial of `n`. - ( k! ) denotes the factorial of `k`. - `k` is the position in the row, where `0 <= k <= n`. Your task is to implement the following steps: 1. Create an array `row` of length `n + 1`. 2. Use a loop to compute each value in the row using the binomial coefficient formula. 3. Store each computed value in the appropriate position in the array `row`. 4. Return the array `row`. Here are the specific requirements for the function: - Function Name: `generate_pascal_row` - Input: A single integer `n`. - Output: A list representing the nth row of Pascal\'s Triangle. You may use the factorial function from Python\'s `math` module to compute the factorial values. Example: ```python from typing import List from math import factorial def generate_pascal_row(n: int) -> List[int]: row = [0] * (n + 1) for k in range(n + 1): row[k] = factorial(n) // (factorial(k) * factorial(n - k)) return row # Example Usage # print(generate_pascal_row(3)) # Output: [1, 3, 3, 1] ``` Ensure that your function handles edge cases, such as when `n = 0` or `n = 1`.","solution":"from typing import List from math import factorial def generate_pascal_row(n: int) -> List[int]: Generates the nth row of Pascal\'s Triangle. Parameters: n (int): The index of the row to generate, starting from 0. Returns: List[int]: The nth row of Pascal\'s Triangle. row = [0] * (n + 1) for k in range(n + 1): row[k] = factorial(n) // (factorial(k) * factorial(n - k)) return row"},{"question":"In this exercise, you are going to practice working with random forests using scikit-learn\'s `RandomForestRegressor` API. Specifically, you will implement a function `train_random_forest` to fit a random forest model to a training dataset and evaluate its performance on both training and test datasets using the Mean Squared Error (MSE) score. **Function Signature:** ```python def train_random_forest(X_train, y_train, X_test, y_test, n_estimators=100): # Your code here pass ``` **Inputs:** - `X_train`, `X_test`: 2-dimensional numpy arrays representing the independent variables for the training and testing datasets respectively. - `y_train`, `y_test`: numpy arrays representing the dependent variable or target values for the training and testing datasets respectively. - `n_estimators`: An integer representing the number of trees in the random forest (default is 100). **Output:** - The function should return a tuple of two floats: - `train_mse`: MSE score on the training set. - `test_mse`: MSE score on the test set. **Specific Requirements:** - Utilize `RandomForestRegressor` from `sklearn.ensemble` to implement the random forest model. - Compute MSE scores using `mean_squared_error` from `sklearn.metrics`. - Ensure the random forest is trained on the training data and evaluated on both the training and test data. ```python # Example usage: from sklearn.datasets import make_regression X_train, y_train = make_regression(n_samples=100, n_features=4, noise=0.1) X_test, y_test = make_regression(n_samples=50, n_features=4, noise=0.1) train_mse, test_mse = train_random_forest(X_train, y_train, X_test, y_test) print(train_mse) # Example output: 0.01 print(test_mse) # Example output: 0.02 ``` **Additional Context:** - Random forests are ensemble methods that combine multiple decision trees to improve model performance. By evaluating the MSE scores, we can understand how well the model is performing on both training and test data.","solution":"from sklearn.ensemble import RandomForestRegressor from sklearn.metrics import mean_squared_error def train_random_forest(X_train, y_train, X_test, y_test, n_estimators=100): Train a RandomForestRegressor and evaluate its performance on training and test datasets. Parameters: X_train (np.array): Training dataset features y_train (np.array): Training dataset target values X_test (np.array): Test dataset features y_test (np.array): Test dataset target values n_estimators (int): Number of trees in the random forest Returns: Tuple of floats: (train_mse, test_mse) # Initialize the RandomForestRegressor model = RandomForestRegressor(n_estimators=n_estimators) # Fit the model on the training data model.fit(X_train, y_train) # Predict on the training and test data y_train_pred = model.predict(X_train) y_test_pred = model.predict(X_test) # Calculate the Mean Squared Error (MSE) for training and test data train_mse = mean_squared_error(y_train, y_train_pred) test_mse = mean_squared_error(y_test, y_test_pred) return train_mse, test_mse"},{"question":"You are required to implement a Python function to standardize the numerical columns of a given Pandas DataFrame. Standardization rescales the data to have a mean of 0 and a standard deviation of 1, making it suitable for various statistical analyses. The function should be named `standardize_df` and have the following parameters: - `dataframe`: The input DataFrame with numerical columns to be standardized. - `columns`: A list of column names to be standardized. If not specified, all numerical columns will be standardized by default. The function should return a new DataFrame with the specified columns standardized, while non-numerical columns and columns not specified for standardization should remain unchanged. Your implementation should handle columns that contain NaN values by ignoring these values when calculating the mean and standard deviation. Example: ```python import pandas as pd import numpy as np data = { \'A\': [1, 2, 3, 4, 5], \'B\': [10, 20, 30, 40, np.nan], \'C\': [\'foo\', \'bar\', \'baz\', \'qux\', \'quux\'] } df = pd.DataFrame(data) standardized_df = standardize_df(df, columns=[\'A\', \'B\']) ``` Expected Output: ``` A B C 0 -1.264911 -1.341641 foo 1 -0.632456 -0.447214 bar 2 0.000000 0.447214 baz 3 0.632456 1.341641 qux 4 1.264911 NaN quux ``` Your implementation should make use of the Pandas library for data manipulation and calculations.","solution":"import pandas as pd def standardize_df(dataframe, columns=None): Standardize the specified columns of a DataFrame. Parameters: - dataframe (pd.DataFrame): The input DataFrame. - columns (list): A list of column names to be standardized. If None, standardize all numerical columns. Returns: - pd.DataFrame: A new DataFrame with standardized columns. if columns is None: columns = dataframe.select_dtypes(include=\'number\').columns.tolist() standardized_df = dataframe.copy() for column in columns: if column in dataframe.columns: mean = dataframe[column].mean(skipna=True) std = dataframe[column].std(skipna=True) standardized_df[column] = (dataframe[column] - mean) / std return standardized_df"},{"question":"You are tasked with creating a function to analyze and manipulate string input based on specific patterns using the `re` module in Python. The purpose of this exercise is to practice using `re.search` and `re.sub` functions from the `re` module in Python. **Function Name:** `extract_and_replace` **Function Signature:** ```python def extract_and_replace(input_string: str) -> dict: ... ``` **Objective:** 1. **Pattern Extraction:** - The function should first search the input string for a specific pattern. The pattern to search for is any sequence of digits followed by a word character (a-z, A-Z, 0-9, or underscore). - If the pattern is found, extract the first match and create a dictionary with one key: - `extracted`: the matched sequence. - If no such pattern exists in the string, add the key `extracted` with the value `None`. 2. **Replacement:** - Replace all occurrences of the found pattern with the string `\\"REPLACED\\"`. - Add another key to the dictionary: - `replaced_string`: the modified string after replacements. **Requirements:** - Utilize `re.search` to find and extract the pattern from the input string. - Use `re.sub` to replace all occurrences of the found pattern in the input string. **Regular Expression:** - The regular expression should match a sequence of one or more digits followed immediately by a word character (a-z, A-Z, 0-9, or underscore). # Example Usage: ```python >>> extract_and_replace(\\"abc123def456gh789i\\") {\'extracted\': \'123d\', \'replaced_string\': \'abcREPLACEDef456gh789i\'} >>> extract_and_replace(\\"no_digits_here\\") {\'extracted\': None, \'replaced_string\': \'no_digits_here\'} >>> extract_and_replace(\\"start2022middle303end\\") {\'extracted\': \'2022m\', \'replaced_string\': \'startREPLACEDmiddle303end\'} ``` Please implement the `extract_and_replace` function to achieve the above objectives using the provided `re.search` and `re.sub` methods.","solution":"import re def extract_and_replace(input_string: str) -> dict: Extracts the first sequence of digits followed by a word character and replaces all occurrences of that sequence with the string \\"REPLACED\\". Parameters: input_string (str): The string to be analyzed and manipulated. Returns: dict: A dictionary containing the first extracted match and the modified string. pattern = r\'d+w\' match = re.search(pattern, input_string) if match: extracted = match.group(0) replaced_string = re.sub(re.escape(extracted), \'REPLACED\', input_string) else: extracted = None replaced_string = input_string return {\'extracted\': extracted, \'replaced_string\': replaced_string}"},{"question":"A company wants to analyze the performance of its sales team by examining sales data stored in a JSON file. Each entry in the JSON file contains a salesperson\'s ID, a timestamp of the sale, and the amount of the sale. The goal is to generate a report that shows the total sales per salesperson and saves this report as a new JSON file. The function should raise the exception for: FileNotFoundError: Raised if the specified file_path does not exist. ValueError: Raised if the JSON format is invalid. The function should output: dict: A dictionary with salesperson IDs as keys and their total sales as values. str: The name of the JSON file where the generated report is saved. You should write self-contained code starting with: ``` import json import os def generate_sales_report(file_path=\'sales_data.json\', output_file=\'sales_report.json\'): ```","solution":"import json import os def generate_sales_report(file_path=\'sales_data.json\', output_file=\'sales_report.json\'): if not os.path.exists(file_path): raise FileNotFoundError(f\\"The file {file_path} does not exist.\\") try: with open(file_path, \'r\') as f: sales_data = json.load(f) except json.JSONDecodeError: raise ValueError(\\"Invalid JSON format.\\") sales_report = {} for entry in sales_data: salesperson_id = entry.get(\'salesperson_id\') sale_amount = entry.get(\'amount\', 0) if salesperson_id in sales_report: sales_report[salesperson_id] += sale_amount else: sales_report[salesperson_id] = sale_amount with open(output_file, \'w\') as f: json.dump(sales_report, f) return sales_report, output_file"},{"question":"Reads a text file containing multiple lines of text, and returns a dictionary where each key is a word length, and the value is a list of words of that length. The function should output: dict: A dictionary where each key is a word length and the value is a list of words of that length found in the text file. You should write self-contained code starting with: ``` def task_func(file_path): word_length_dict = {} with open(file_path, \'r\') as file: for line in file: words = line.split() for word in words: word = re.sub(r\'W+\', \'\', word) if word: length = len(word) if length not in word_length_dict: word_length_dict[length] = [] word_length_dict[length].append(word) return word_length_dict ```","solution":"import re def task_func(file_path): Reads a text file and returns a dictionary where each key is a word length, and the value is a list of words of that length. word_length_dict = {} with open(file_path, \'r\') as file: for line in file: words = line.split() for word in words: word = re.sub(r\'W+\', \'\', word) # Remove any non-alphanumeric characters if word: # If the word is not empty after cleaning length = len(word) if length not in word_length_dict: word_length_dict[length] = [] word_length_dict[length].append(word) return word_length_dict"},{"question":"Read a list of integers from a text file and determine the length of the longest consecutive sequence of identical numbers. Ensure the function handles the case where the file is empty by printing an error message to the console. The function should output with: int: The length of the longest consecutive sequence of identical numbers. You should write self-contained code starting with: ``` def longest_consecutive_sequence(file_path): ```","solution":"def longest_consecutive_sequence(file_path): Determines the length of the longest consecutive sequence of identical numbers in a list read from a file. Parameters: file_path (str): The path to the file containing the list of integers. Returns: int: The length of the longest consecutive sequence of identical numbers. Prints an error message and returns 0 if the file is empty. try: with open(file_path, \'r\') as file: numbers = file.read().strip().split() if not numbers: print(\\"Error: The file is empty.\\") return 0 numbers = list(map(int, numbers)) max_sequence_length = 0 current_sequence_length = 1 for i in range(1, len(numbers)): if numbers[i] == numbers[i - 1]: current_sequence_length += 1 else: max_sequence_length = max(max_sequence_length, current_sequence_length) current_sequence_length = 1 max_sequence_length = max(max_sequence_length, current_sequence_length) return max_sequence_length except FileNotFoundError: print(\\"Error: The file was not found.\\") return 0 except ValueError: print(\\"Error: The file contains non-integer values.\\") return 0"},{"question":"Create a function that takes a CSV file path as an input, reads the file into a Pandas DataFrame, filters the data by removing rows where any column has a null value, and then writes the filtered DataFrame back to a new CSV file. The function should return the file path of the new CSV file. The function should output with: The file path of the new CSV file containing the filtered data. You should write self-contained code starting with: ``` import pandas as pd def filter_and_save_csv(input_csv, output_csv=\'filtered_data.csv\'): ```","solution":"import pandas as pd def filter_and_save_csv(input_csv, output_csv=\'filtered_data.csv\'): Reads a CSV file, filters out rows with any null values, and writes the filtered data to a new CSV file. :param input_csv: str, path to the input CSV file :param output_csv: str, path to the output CSV file (default is \'filtered_data.csv\') :return: str, path to the filtered CSV file # Read the CSV file into a DataFrame df = pd.read_csv(input_csv) # Filter out rows with any null values df_filtered = df.dropna() # Write the filtered DataFrame to a new CSV file df_filtered.to_csv(output_csv, index=False) return output_csv"},{"question":"You are tasked with implementing an encryption and decryption system for a simple text-based communication. The system will use a basic substitution cipher where each letter of the alphabet is shifted by a specified number of places. Additionally, you need to implement functions to encrypt and decrypt messages using the substitution cipher. You need to implement the functions `encrypt(message: str, shift: int) -> str` and `decrypt(message: str, shift: int) -> str`. These functions will: 1. Convert each letter in the `message` to a new letter shifted by `shift` positions in the alphabet. When shifting past the end of the alphabet, wrap around to the beginning. 2. Preserve the case of each letter (uppercase and lowercase should be encrypted/decrypted separately). 3. Leave non-letter characters unchanged in the encrypted/decrypted message. # Requirements: - Only letters (`a-z` and `A-Z`) should be shifted. - Non-letter characters should remain unchanged in both the `encrypt` and `decrypt` functions. - The `shift` parameter can be a positive or negative integer. **Function Signatures:** ```python def encrypt(message: str, shift: int) -> str: pass def decrypt(message: str, shift: int) -> str: pass ``` # Example: Given `message` as `\\"Hello, World!\\"` and `shift` as `3`: ```python encrypted_message = encrypt(\\"Hello, World!\\", 3) print(encrypted_message) ``` The output might be: ```python \\"Khoor, Zruog!\\" ``` Given `encrypted_message` as `\\"Khoor, Zruog!\\"` and `shift` as `3`: ```python decrypted_message = decrypt(\\"Khoor, Zruog!\\", 3) print(decrypted_message) ``` The output might be: ```python \\"Hello, World!\\" ``` # Implementation Details: - Create helper functions, if needed, to handle the character shifting. - Ensure the system handles edge cases, such as large positive or negative shifts (e.g., `shift` larger than the length of the alphabet). - Validate inputs to handle possible errors gracefully.","solution":"def shift_char(char, shift): Helper function to shift a single character and return the shifted character. if char.isalpha(): base = ord(\'A\') if char.isupper() else ord(\'a\') return chr((ord(char) - base + shift) % 26 + base) return char def encrypt(message: str, shift: int) -> str: Encrypts the given message using a basic substitution cipher with the specified shift. return \'\'.join(shift_char(char, shift) for char in message) def decrypt(message: str, shift: int) -> str: Decrypts the given message using the same substitution cipher with the specified shift. return \'\'.join(shift_char(char, -shift) for char in message)"},{"question":"You are required to write a function `moving_average` that computes the moving average of a list of numbers. The moving average is a commonly used metric in time series analysis that helps to smooth out short-term fluctuations and highlight longer-term trends or cycles. Given an array `arr` of `n` integers and a positive integer `k`, the moving average is defined as the mean of elements within each window of size `k`. # Function Signature ```python def moving_average(arr: List[int], k: int) -> List[float]: ``` # Parameters - `arr` (List[int]): A list of `n` integers. - `k` (int): A positive integer representing the size of the moving window. # Returns - List[float]: A list of floating-point numbers representing the moving average for each window of size `k`. The length of this list should be `n - k + 1`. # Example ```python arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100] k = 3 result = moving_average(arr, k) print(result) # Output: [20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0] ``` # Constraints - The input list `arr` will have at least `k` elements. - The value of `k` will be at least 1. - The function must compute the moving average without using any external libraries. # Description For a given list `arr` and an integer `k`, the moving average is calculated by summing up each window of `k` consecutive elements and dividing the sum by `k`. This process is repeated for each window in `arr`. # Calculation Given `arr = [a1, a2, a3, ..., an]` and `k`, the moving average is calculated as: [ text{Moving Average}_i = frac{a_i + a_{i+1} + ... + a_{i+k-1}}{k} ] for ( i ) ranging from `0` to `n - k`. Ensure that the code implementation effectively handles edge cases and is optimized for performance.","solution":"from typing import List def moving_average(arr: List[int], k: int) -> List[float]: Computes the moving average of a list of numbers. Parameters: arr (List[int]): A list of n integers. k (int): A positive integer representing the size of the moving window. Returns: List[float]: A list of floating-point numbers representing the moving average for each window of size k. n = len(arr) if n < k: return [] avg_list = [] window_sum = sum(arr[:k]) avg_list.append(window_sum / k) for i in range(k, n): window_sum = window_sum - arr[i - k] + arr[i] avg_list.append(window_sum / k) return avg_list"},{"question":"In this problem, you are required to write a Python function `unique_elements_frequency` that calculates the frequency of unique elements in a given list of integers. The function should return a dictionary where the keys are the unique elements from the list, and the values are the corresponding frequencies of those elements. You must use the `collections.Counter` class to achieve this. Function signature: ```py def unique_elements_frequency(nums: List[int]) -> Dict[int, int]: Calculates the frequency of unique elements in the list. Args: nums (List[int]): A list of integers. Returns: Dict[int, int]: A dictionary with unique elements as keys and their frequencies as values. ``` **Requirements:** 1. You must use the `Counter` class from the `collections` module to count the frequencies. 2. Ensure that you handle the empty list case appropriately and return an empty dictionary. 3. Your solution should be efficient and concise, leveraging the `Counter` class. Here is an example of what your function might look like: ```py from typing import List, Dict from collections import Counter def unique_elements_frequency(nums: List[int]) -> Dict[int, int]: pass # Your code goes here ``` **Example Usage:** ```py # Example usage: nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] result = unique_elements_frequency(nums) print(result) ``` **Expected Output:** If the input list `nums` is: ```py [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] ``` Then, the function should output: ```py {1: 1, 2: 2, 3: 3, 4: 4} ``` This problem is designed to help you practice using the `Counter` class from the `collections` module, emphasizing efficient computation of frequencies in a list.","solution":"from typing import List, Dict from collections import Counter def unique_elements_frequency(nums: List[int]) -> Dict[int, int]: Calculates the frequency of unique elements in the list. Args: nums (List[int]): A list of integers. Returns: Dict[int, int]: A dictionary with unique elements as keys and their frequencies as values. return dict(Counter(nums))"},{"question":"You are required to design a Python function, `find_connected_components`, that accepts an adjacency list representing an undirected graph and returns all the connected components within the graph. A connected component is a subset of the graph where any two vertices are connected by paths, and which is connected to no additional vertices in the rest of the graph. The function should utilize Depth-First Search (DFS) to explore the graph and should have the following signature: ```python def find_connected_components(graph: dict) -> list: ``` - **graph**: a dictionary representing the adjacency list of an undirected graph. The keys are nodes, and the values are lists of nodes connected to the key node. The function should return a list of lists, where each list represents a connected component and contains the nodes in that component. Example Usage ```python graph = { 1: [2], 2: [1, 3], 3: [2], 4: [5], 5: [4] } ``` The result would look like: ```python find_connected_components(graph) ``` Output: ``` [[1, 2, 3], [4, 5]] ``` In this example, the graph has two connected components: one consisting of nodes 1, 2, and 3, and the other consisting of nodes 4 and 5.","solution":"def find_connected_components(graph): Finds all connected components in an undirected graph represented by an adjacency list. Args: graph (dict): An adjacency list where keys are nodes and values are lists of connected nodes. Returns: list: A list of connected components, each being a list of nodes in that component. visited = set() components = [] def dfs(node, component): Helper function to perform depth-first search visited.add(node) component.append(node) for neighbor in graph[node]: if neighbor not in visited: dfs(neighbor, component) for node in graph: if node not in visited: component = [] dfs(node, component) components.append(component) return components"},{"question":"You are tasked with implementing a function to compress a sorted list of integers into a range-based representation. The function will take a list of integers and return a more compact format that consolidates consecutive sequences. # Objectives 1. Define a function named `compress_ranges` that accepts a single parameter: - `numbers` (list of int): A sorted list of integers. 2. This function should create a compressed representation of consecutive sequences in the list using ranges, while non-consecutive numbers are represented as individual elements. 3. The resulting format should be a list of strings where: - Consecutive sequences of three or more numbers are represented in the format `\\"start-end\\"`. - Single elements or pairs are represented as individual numbers in string format. # Function Signature ```python def compress_ranges(numbers: list) -> list: # Your implementation here ``` # Example ```python # Test cases print(compress_ranges([1, 2, 3, 4, 5, 7, 8, 10])) # Output: [\\"1-5\\", \\"7\\", \\"8\\", \\"10\\"] print(compress_ranges([4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16])) # Output: [\\"4-6\\", \\"8-9\\", \\"11-16\\"] ``` # Instructions - Ensure your function accurately captures sequences of three or more integers in the compressed range format. - Handle cases where the list contains single elements or pairs correctly.","solution":"def compress_ranges(numbers): Compress a sorted list of integers into range-based representation. Parameters: numbers (list): A sorted list of integers. Returns: list: A list of strings with compressed range-based representation. if not numbers: return [] compressed = [] start = numbers[0] end = numbers[0] for i in range(1, len(numbers)): if numbers[i] == end + 1: end = numbers[i] else: if end - start >= 2: compressed.append(f\\"{start}-{end}\\") else: compressed.extend(map(str, range(start, end + 1))) start = numbers[i] end = numbers[i] if end - start >= 2: compressed.append(f\\"{start}-{end}\\") else: compressed.extend(map(str, range(start, end + 1))) return compressed"},{"question":"You are required to implement a function called `calculate_bmi` which takes one argument: 1. `data` (type: list of tuples) — a list where each tuple contains the height (in meters) and weight (in kilograms) of an individual (e.g., `[(1.75, 70), (1.60, 60)]`). Your function should perform the following operations: 1. For each individual in the list, calculate the Body Mass Index (BMI) using the formula: BMI = weight / (height ** 2). Round the result to two decimal places. 2. Return a list of BMIs corresponding to each individual. **Requirements**: - Ensure the function handles an empty list input by returning an empty list. - Handle invalid inputs gracefully by raising a `ValueError` with a descriptive message if height is less than or equal to zero or weight is less than zero. **Example Usage**: ```python # Calculate BMI for a list of individuals bmi_values = calculate_bmi([(1.75, 70), (1.60, 60), (1.80, 90)]) # The expected output should be: # [22.86, 23.44, 27.78] print(bmi_values) ```","solution":"def calculate_bmi(data): Calculates the BMI for each individual in the provided list. Args: - data (list of tuples): Each tuple contains the height (in meters) and weight (in kilograms) Returns: - list of floats: List of BMIs, rounded to two decimal places. Raises: - ValueError: If height is less than or equal to zero, or weight is less than zero. bmi_list = [] for height, weight in data: if height <= 0: raise ValueError(\\"Height must be greater than zero.\\") if weight < 0: raise ValueError(\\"Weight must be zero or greater.\\") bmi = weight / (height ** 2) bmi_list.append(round(bmi, 2)) return bmi_list # Example Usage bmi_values = calculate_bmi([(1.75, 70), (1.60, 60), (1.80, 90)]) print(bmi_values) # Output: [22.86, 23.44, 27.78]"},{"question":"You are required to write a function named `find_distinct_pythagorean_triplets` that identifies all unique Pythagorean triplets (a, b, c) in a given list of positive integers. A Pythagorean triplet is a set of three integers a, b, and c such that ( a^2 + b^2 = c^2 ). Ensure that each triplet (a, b, c) is ordered such that ( a < b < c ), and the function returns these triplets in lexicographical order. # Function Signature ```python def find_distinct_pythagorean_triplets(numbers: list[int]) -> list[tuple[int, int, int]]: ``` # Arguments - `numbers`: A list of positive integers. # Description The function should: 1. Iterate over all possible combinations of three distinct integers from the input list. 2. Check if each combination forms a Pythagorean triplet. 3. Ensure that each triplet is stored in the order (a, b, c) where ( a < b < c ). 4. Return a list of all unique Pythagorean triplets, sorted in lexicographical order. # Example For example, given the input list: ```python numbers = [3, 4, 5, 6, 8, 10, 15, 20, 25] ``` The function should return: ```python [(3, 4, 5), (6, 8, 10), (15, 20, 25)] ``` # Constraints - The list length will not exceed 1000 elements. - It is guaranteed that all elements in the list are distinct integers between 1 and 30000.","solution":"from itertools import combinations def find_distinct_pythagorean_triplets(numbers): triplets = set() numbers = sorted(numbers) for a, b, c in combinations(numbers, 3): if a * a + b * b == c * c: triplets.add((a, b, c)) return sorted(triplets)"},{"question":"You are required to create a function named `organize_student_data` to process and organize student coursework data from a given file. The file contains data in the following format: `student_name,course_name,score` (e.g., `Alice,Mathematics,95`, `Bob,Physics,88`). The task is to create two separate CSV files: 1. One file named `course_averages.csv` containing the average score for each course. 2. Another file named `student_scores.csv` containing each student\'s total score across all courses. To handle the CSV files, you should use the Python standard library functions: - `csv.reader` - `csv.writer` **Function Signature:** ```python def organize_student_data(input_file: str) -> None: pass ``` **Example:** If the input file `students.csv` contains the following data: ``` Alice,Mathematics,95 Alice,Physics,85 Bob,Mathematics,75 Bob,Physics,88 Charlie,Mathematics,90 Charlie,Chemistry,80 ``` The `course_averages.csv` file should contain: ``` course_name,average_score Mathematics,86.67 Physics,86.5 Chemistry,80 ``` The `student_scores.csv` file should contain: ``` student_name,total_score Alice,180 Bob,163 Charlie,170 ``` Write a function that processes the input data and generates the required output files accurately.","solution":"import csv from collections import defaultdict def organize_student_data(input_file: str) -> None: Processes student coursework data and generates two CSV files: `course_averages.csv` and `student_scores.csv`. `course_averages.csv` contains the average score for each course. `student_scores.csv` contains each student\'s total score across all courses. course_totals = defaultdict(list) student_totals = defaultdict(int) # Reading the input file with open(input_file, \'r\') as infile: reader = csv.reader(infile) for row in reader: student_name, course_name, score = row[0], row[1], int(row[2]) course_totals[course_name].append(score) student_totals[student_name] += score # Writing course averages to course_averages.csv with open(\'course_averages.csv\', \'w\', newline=\'\') as course_file: writer = csv.writer(course_file) writer.writerow([\'course_name\', \'average_score\']) for course_name, scores in course_totals.items(): average_score = round(sum(scores) / len(scores), 2) writer.writerow([course_name, average_score]) # Writing student scores to student_scores.csv with open(\'student_scores.csv\', \'w\', newline=\'\') as student_file: writer = csv.writer(student_file) writer.writerow([\'student_name\', \'total_score\']) for student_name, total_score in student_totals.items(): writer.writerow([student_name, total_score])"},{"question":"You are given a grid representing a city where cars are initially parked. The grid consists of empty cells (`\\".\\"`), and parked cars denoted by a car ID which is an integer. Each car can move up, down, left, or right, and you need to find a way to navigate each car to the nearest parking lot designated by `\\"P\\"`. Function to be implemented: ```python def park_cars(city_grid): ``` Parameters: - `city_grid`: A 2D list of strings representing the parking grid, where each `\\".\\"` is an empty cell, each `\\"P\\"` is a parking lot, and each integer (e.g., `1`, `2`, `3`,...) represents a car with a unique ID. The function should: 1. For each car, find the shortest path to any parking lot. If there are multiple shortest paths, choose one arbitrarily. 2. A car can move up, down, left, or right into an empty cell or directly to a parking lot. 3. Return a dictionary where keys are car IDs and values are lists of tuples representing the sequence of grid positions that the car will take from its starting position to its respective parking lot. Note: - Assume that there is always at least one parking lot and each car has at least one valid path to a parking lot. - Assume city grid is bounded and small enough for a breadth-first search to complete in reasonable time. - Do not modify the input list `city_grid`. Example: ```python city_grid = [ [\\".\\", \\".\\", \\".\\", \\".\\", \\"P\\"], [\\".\\", \\".\\", \\"2\\", \\".\\", \\".\\"], [\\".\\", \\"1\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\"3\\", \\".\\"], [\\"P\\", \\".\\", \\".\\", \\".\\", \\".\\"] ] result = park_cars(city_grid) print(result) ``` Expected output for the example: ```python { 1: [(2, 1), (1, 1), (0, 1), (0, 2), (0, 3), (0, 4)], # example path for car 1 to a parking lot 2: [(1, 2), (0, 2), (0, 3), (0, 4)], # example path for car 2 to a parking lot 3: [(3, 3), (2, 3), (1, 3), (0, 3), (0, 4)] # example path for car 3 to a parking lot } ``` The actual paths might slightly vary as long as they follow the constraints of moving to the nearest parking lot.","solution":"from collections import deque def park_cars(city_grid): # Get dimensions of the grid rows = len(city_grid) cols = len(city_grid[0]) # Find all parking lots and cars positions parking_lots = [] cars = {} for r in range(rows): for c in range(cols): if city_grid[r][c] == \'P\': parking_lots.append((r, c)) elif city_grid[r][c].isdigit(): cars[int(city_grid[r][c])] = (r, c) # Function to perform a BFS and find the shortest path def bfs(start, grid, target): queue = deque([([start], start)]) # (path, current_pos) visited = set([start]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # (up, down, left, right) while queue: path, (x, y) = queue.popleft() if (x, y) in target: return path for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in visited and (grid[nx][ny] == \'.\' or grid[nx][ny] == \'P\'): visited.add((nx, ny)) queue.append((path + [(nx, ny)], (nx, ny))) return [] # For each car, find the shortest path to any parking lot result = {} for car_id, start_pos in cars.items(): shortest_path = bfs(start_pos, city_grid, parking_lots) result[car_id] = shortest_path return result"},{"question":"You are required to write a function `longest_common_subsequence(str1: str, str2: str) -> str` that finds the longest common subsequence between two given strings. The function should return the longest common subsequence in the form of a string. A common subsequence is a sequence that appears in the same relative order, but not necessarily consecutively, in both strings. It is important that the function should handle cases sensitively and preserve the case of the characters. **Requirements**: - The function should efficiently handle strings of lengths up to 1000. - If there are multiple longest common subsequences of the same length, return the one which appears first in `str1`. **Example**: ```python longest_common_subsequence(\\"ABAZDC\\", \\"BACBAD\\") ``` Should return: ```python \\"ABAD\\" ``` ```python longest_common_subsequence(\\"AGGTAB\\", \\"GXTXAYB\\") ``` Should return: ```python \\"GTAB\\" ```","solution":"def longest_common_subsequence(str1: str, str2: str) -> str: Finds the longest common subsequence between two given strings. Parameters: str1 (str): First input string. str2 (str): Second input string. Returns: str: The longest common subsequence. n, m = len(str1), len(str2) # Create a 2D array to store lengths of longest common subsequence at each position dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill dp table for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct longest common subsequence i, j = n, m lcs = [] while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs.append(str1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return \'\'.join(reversed(lcs))"},{"question":"You are tasked with designing a function called `draw_square_spiral()` using Python\'s `turtle` graphics library. The `draw_square_spiral()` function should draw a spiral made of squares on the screen. The function should follow these steps: 1. Set the initial side length of the square to 20 units. 2. Use a loop to draw 15 squares, each time increasing the side length by 10 units after completing a square. 3. For each side of a square: - Move the turtle forward by the current side length. - Turn the turtle right by 90 degrees to create the square corners. 4. After each square is completed, turn the turtle right by 15 degrees to give the spiral effect. 5. Ensure the pen is in the \\"pen down\\" state to draw, and lift it up after completing all squares. Use the given `turtle.forward`, `turtle.right`, `turtle.down`, and `turtle.up` functions per their documentation. Your task: 1. Implement the `draw_square_spiral()` function only, using the `turtle` graphics library, according to the above instructions. 2. Ensure you explicitly use `turtle.forward`, `turtle.right`, `turtle.down`, and `turtle.up` where necessary.","solution":"import turtle def draw_square_spiral(): # Setting up the turtle turtle.down() side_length = 20 for _ in range(15): for _ in range(4): turtle.forward(side_length) turtle.right(90) side_length += 10 turtle.right(15) turtle.up() # Finalize drawing turtle.hideturtle() turtle.done()"},{"question":"You are developing software for a library management system. The library needs to maintain a catalog of all the books and store the details of issued books in a text file named `issued_books.txt`. Your task is to create a function that will record the details of a book issued and also generate a report of all issued books based on the text file data. The function to be created should be named `record_issue_and_generate_report`. This function should take six parameters: 1. `issue_date`: String representing the date the book was issued 2. `book_title`: String representing the title of the issued book 3. `issuer_name`: String representing the name of the person who issued the book 4. `return_date`: String representing the expected return date for the book 5. `log_file`: String representing the file name (including the relative or absolute path) to which the issued book information should be appended (default is `\\"issued_books.txt\\"`) 6. `report_file`: String representing the file name (including the relative or absolute path) where the report should be generated (default is `\\"report.txt\\"`) The function should: 1. Append the issued book details to the provided log file. 2. Read all entries from the log file and generate a report listing all issued books along with their information. 3. Write the generated report to the specified report file. Here is the sample format for the logged issued book information: ``` Issue Date: {issue_date} Title: {book_title} Issuer: {issuer_name} Return Date: {return_date} --------------------------------------------------------------- ``` And here is the sample format for the generated report: ``` Issued Books Report =================== Issue Date: {issue_date} Title: {book_title} Issuer: {issuer_name} Return Date: {return_date} --------------------------------------------------------------- ... (list continues for other issued books) ```","solution":"def record_issue_and_generate_report(issue_date, book_title, issuer_name, return_date, log_file=\\"issued_books.txt\\", report_file=\\"report.txt\\"): Records the issue of a book and generates a report of all issued books. Parameters: - issue_date (str): The date the book was issued - book_title (str): The title of the book - issuer_name (str): The name of the person who issued the book - return_date (str): The expected return date for the book - log_file (str): File to which the issued book information should be appended (default \\"issued_books.txt\\") - report_file (str): File where the report should be generated (default \\"report.txt\\") # Record the issued book details issue_entry = ( f\\"Issue Date: {issue_date}n\\" f\\"Title: {book_title}n\\" f\\"Issuer: {issuer_name}n\\" f\\"Return Date: {return_date}n\\" \\"---------------------------------------------------------------n\\" ) with open(log_file, \'a\') as lf: lf.write(issue_entry) # Read all entries from the log file with open(log_file, \'r\') as lf: issued_books = lf.readlines() # Generate the report report_content = \\"Issued Books Reportn===================nn\\" report_content += \'\'.join(issued_books) # Write the report to the specified report file with open(report_file, \'w\') as rf: rf.write(report_content)"},{"question":"Write a function that takes a string `s` as an input and returns a list of all possible unique permutations of the string. The function should handle strings with duplicate characters efficiently, without generating duplicate permutations. You should not use any built-in libraries for permutation generation. Only standard libraries are allowed. ``` def unique_permutations(s: str): ```","solution":"def unique_permutations(s: str): Returns a list of all unique permutations of the input string `s`. def backtrack(start, end): if start == end: perm = \'\'.join(chars) if perm not in seen: seen.add(perm) result.append(perm) return for i in range(start, end): if i != start and chars[i] == chars[start]: continue chars[start], chars[i] = chars[i], chars[start] backtrack(start + 1, end) chars[start], chars[i] = chars[i], chars[start] chars = sorted(list(s)) result = [] seen = set() backtrack(0, len(s)) return result"},{"question":"You are required to implement the function `find_most_frequent_integer(arr)`. This function will identify the integer that appears most frequently in a given list and return it. If there are multiple integers with the same highest frequency, return the smallest one. Function Signature: ```python def find_most_frequent_integer(arr: List[int]) -> int: ``` Input: - `arr`: A list of integers. Output: - An integer that is the most frequent element in the list. If there\'s a tie, return the smallest integer among them. Constraints: - The input list will have at least one integer. - List size will not exceed 10^6 elements. - Elements in the list will be within the range of -10^9 to 10^9. Explanation: The function should traverse through the list to compute the frequency of each element. After computing the frequencies, identify the maximum frequency and find the smallest integer with that frequency. Return the integer that satisfies these conditions.","solution":"from typing import List def find_most_frequent_integer(arr: List[int]) -> int: This function finds and returns the most frequent integer in the list. If there are multiple integers with the same highest frequency, it returns the smallest one. from collections import Counter # Count the frequency of each element in the array frequency = Counter(arr) # Initialize variables to track the current most frequent element and its count most_frequent_element = None highest_frequency = -1 # Iterate through the frequency dictionary for element, freq in frequency.items(): if freq > highest_frequency or (freq == highest_frequency and element < most_frequent_element): most_frequent_element = element highest_frequency = freq return most_frequent_element"},{"question":"You are provided with a function template `validate_html_tags(html_string)` that checks if the HTML tags in the given string are balanced and properly nested. Your task is to implement this function to validate HTML string by ensuring that every opening tag has a corresponding closing tag and the tags are properly nested. The function should follow this prototype: ```python def validate_html_tags(html_string): # Implement this function ``` **Functionality Requirements:** 1. Identify the opening and closing HTML tags in the given `html_string`. 2. Use a stack data structure to keep track of the tags. 3. When encountering an opening tag, push it onto the stack. 4. When encountering a closing tag, check if it matches the tag on top of the stack: - If it matches, pop the stack. - If it doesn\'t match or the stack is empty, the tags are not properly nested. 5. After processing all characters in the string, ensure the stack is empty indicating all tags were properly closed. **Considerations:** - HTML tags have the format `<tag_name>` for opening tags and `</tag_name>` for closing tags. - Tags can contain attributes but for this task you can ignore attributes, entries like `<div id=\\"main\\">` should be treated simply as `<div>`. - You need to handle self-closing tags like `<br/>` as correctly nested. Here is a template you should build upon: ```python def validate_html_tags(html_string): import re tag_re = re.compile(r\'<(/?[^>]+)>\') tags = tag_re.findall(html_string) stack = [] for tag in tags: if not tag.startswith(\'/\'): if not tag.endswith(\'/\'): stack.append(tag) else: if not stack: return False if stack[-1] == tag[1:]: stack.pop() else: return False return not stack ``` **Examples:** ```python print(validate_html_tags(\'<div><p>Hello</p></div>\')) # Should return True print(validate_html_tags(\'<div><p>Hello</div></p>\')) # Should return False print(validate_html_tags(\'<div><p><br/></p></div>\')) # Should return True ``` Implement the function `validate_html_tags(html_string)` ensuring it follows the above requirements.","solution":"def validate_html_tags(html_string): import re tag_re = re.compile(r\'</?([a-zA-Z]+)[^>]*>\') tags = tag_re.findall(html_string) stack = [] for full_tag in tag_re.finditer(html_string): tag = full_tag.group(0) tag_name = full_tag.group(1) if not tag.startswith(\'</\'): if not tag.endswith(\'/>\'): stack.append(tag_name) else: if not stack or stack[-1] != tag_name: return False stack.pop() return not stack"},{"question":"# Binary Search Tree Validation Binary Search Trees (BSTs) are fundamental data structures in computer science. One important property of BSTs is that for any given node, all values in its left subtree are less than its own value, and all values in its right subtree are greater than its own value. This task requires you to implement a function to validate whether a given binary tree is a valid BST. You are given a binary tree where each node contains an integer value. Each node is represented as a class with `val`, `left`, and `right` attributes. Your task is to implement a function `is_valid_bst` that checks if the binary tree satisfies the properties of a BST. The function signature should be: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root): Determine if a binary tree is a valid binary search tree. Parameters: - root: TreeNode, the root node of the binary tree Returns: - bool: True if the binary tree is a valid BST, False otherwise pass ``` **Constraints:** - The number of nodes in the tree is in the range `[1, 10^4]`. - `-10^4 <= Node.val <= 10^4` To implement the `is_valid_bst` function, consider performing an in-order traversal of the tree and ensure that the values are in ascending order. Alternatively, you may use recursion and keep track of the valid range for each node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root): Determine if a binary tree is a valid binary search tree. Parameters: - root: TreeNode, the root node of the binary tree Returns: - bool: True if the binary tree is a valid BST, False otherwise def validate(node, low=-float(\'inf\'), high=float(\'inf\')): if not node: return True if not (low < node.val < high): return False return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root)"},{"question":"You have been assigned the task of developing a function to optimize the loading of boxes into delivery trucks. Each truck has a maximum weight capacity, and each box has a specific weight. You need to maximize the number of boxes loaded into the trucks until they reach their weight capacity without exceeding it. Write a function named `maximum_boxes(truck_capacity: int, box_weights: List[int]) -> int` that meets the following specification: 1. The function should accept two parameters: - `truck_capacity`: An integer representing the maximum weight capacity of the truck. - `box_weights`: A list of integers representing the weights of the boxes. 2. The function should return an integer representing the maximum number of boxes that can be loaded into the truck without exceeding the weight capacity. In this problem, you may find it useful to sort the list of box weights to prioritize lighter boxes first and iteratively add them until the capacity is met. # Example ```python assert maximum_boxes(50, [10, 20, 30, 40, 25, 15]) == 3 assert maximum_boxes(35, [5, 10, 15, 20, 25]) == 3 ``` **Explanation:** - `maximum_boxes(50, [10, 20, 30, 40, 25, 15])`: - Sorted box weights: [10, 15, 20, 25, 30, 40] - First box: 10 (Total weight: 10) - Second box: 15 (Total weight: 25) - Third box: 20 (Total weight: 45) - Fourth box: 25 (Total weight: 70, exceeds capacity) - Maximum boxes: 3 (weights: 10, 15, 20) - `maximum_boxes(35, [5, 10, 15, 20, 25])`: - Sorted box weights: [5, 10, 15, 20, 25] - First box: 5 (Total weight: 5) - Second box: 10 (Total weight: 15) - Third box: 15 (Total weight: 30) - Fourth box: 20 (Total weight: 50, exceeds capacity) - Maximum boxes: 3 (weights: 5, 10, 15) # Constraints 1. Each integer in the list `box_weights` will be in the range [1, 1,000,000]. 2. `len(box_weights)` will be in the range [1, 100,000]. 3. `truck_capacity` will be in the range [1, 10,000,000]. Ensure the function handles large inputs efficiently, both in terms of time and space complexity. # Hint Consider using a greedy approach by sorting the list of box weights and adding the smallest possible boxes first to optimize the number of boxes loaded.","solution":"from typing import List def maximum_boxes(truck_capacity: int, box_weights: List[int]) -> int: Returns the maximum number of boxes that can be loaded into the truck without exceeding the weight capacity. # Sort the list of box weights in ascending order box_weights.sort() # Initialize variables to keep track of current weight and box count current_weight = 0 box_count = 0 # Iterate through the sorted list and add boxes until capacity is reached for weight in box_weights: if current_weight + weight <= truck_capacity: current_weight += weight box_count += 1 else: break return box_count"},{"question":"In this task, you need to create a function `calculate_discounted_price` for an e-commerce application. This function handles calculating the final price of a product after applying a discount. The function will receive the original price of the product and a discount percentage, and it should return the final price after the discount is applied. **Instructions:** 1. Implement the `calculate_discounted_price` function. 2. The function should take in two parameters: - `original_price` (float): The original price of the product. - `discount_percent` (float): The discount percentage to be applied to the product. 3. The function should calculate the final price after applying the given discount percentage. 4. Ensure the final price is correctly rounded to two decimal places. 5. If the discount percentage is greater than 100, it should be capped at 100%. 6. If the discount percentage is less than 0, it should be considered as 0%. **Function Signature:** ```python def calculate_discounted_price(original_price, discount_percent): pass ``` **Examples:** ```python # Provided examples to understand the functionality calculate_discounted_price(100, 20) # Expected output: 80.00 calculate_discounted_price(150.50, 50) # Expected output: 75.25 calculate_discounted_price(200, -10) # Expected output: 200.00 calculate_discounted_price(175, 105) # Expected output: 0.00 ``` **Notes:** - Ensure your implementation handles edge cases and rounding correctly. - Make sure the function is efficient and concise.","solution":"def calculate_discounted_price(original_price, discount_percent): Calculate the final price after applying a discount percentage to the original price. Parameters: - original_price (float): The original price of the product. - discount_percent (float): The discount percentage to be applied. Returns: - float: The final price after applying the discount, rounded to two decimal places. if discount_percent < 0: discount_percent = 0 if discount_percent > 100: discount_percent = 100 discount_amount = (original_price * discount_percent) / 100 final_price = original_price - discount_amount return round(final_price, 2)"},{"question":"Write a function called `flatten_nested_list` that takes a list which can contain nested lists of arbitrary depth, and returns a flattened version of the list, where all nested elements are extracted and included in a single, continuous list. The function should not make use of Python\'s built-in `itertools.chain` or similar shortcuts; it should instead implement the flattening process using recursion. # Function Signature: ```python def flatten_nested_list(nested_list: list) -> list: ``` # Parameters: - `nested_list`: A list that may contain other lists or elements of any type. # Returns: - A flat list containing all the elements of the original nested list in the same order. # Example: ```python print(flatten_nested_list([1, [2, [3, 4], 5], 6])) # Output: [1, 2, 3, 4, 5, 6] print(flatten_nested_list([\'a\', [\'b\', \'c\', [\'d\', [\'e\']]], \'f\'])) # Output: [\'a\', \'b\', \'c\', \'d\', \'e\', \'f\'] ``` # Requirements: 1. Implement the flattening process using recursion. 2. Maintain the order of elements as they appear in the input list.","solution":"def flatten_nested_list(nested_list: list) -> list: Flattens a nested list of arbitrary depth into a single list with all elements. Parameters: nested_list (list): List which may contain nested lists. Returns: list: Flattened list with all elements. flat_list = [] for item in nested_list: if isinstance(item, list): flat_list.extend(flatten_nested_list(item)) else: flat_list.append(item) return flat_list"},{"question":"You are given a list of student scores and are required to implement a function to compute the top `k` highest average scores for a specific subject from a given list of students. Each student has multiple scores for different subjects, and your task is to identify those with the highest average scores for a given subject. # Your Task: Implement the function `top_k_students_by_subject(subject: str, scores: list, k: int) -> list`. This function accepts the following parameters: - `subject`: A string representing the subject for which the highest average scores are required. - `scores`: A list of dictionaries, where each dictionary represents a student and contains their name and scores for different subjects. Each dictionary has the format: ```python { \'name\': \'student_name\', \'math\': [scores], \'science\': [scores], \'history\': [scores], ... } ``` - `k`: An integer, specifying the number of top students to return based on their average score for the specified subject. # Functionality: 1. Calculate the average score for each student in the specified subject. 2. Identify the top `k` students with the highest average score in that subject. 3. If there are fewer students than `k`, return the average scores for all available students. 4. Return a sorted list of dictionaries with the students\' names and their average score in the given subject. The list should be sorted in descending order based on the average scores. # Example: Consider the following list of `scores`: ```python [ {\'name\': \'Alice\', \'math\': [80, 85, 90], \'science\': [75, 78, 80], \'history\': [89, 92, 94]}, {\'name\': \'Bob\', \'math\': [78, 80, 82], \'science\': [82, 85, 88], \'history\': [80, 83, 85]}, {\'name\': \'Charlie\', \'math\': [92, 95, 98], \'science\': [85, 88, 92], \'history\': [78, 80, 82]}, {\'name\': \'David\', \'math\': [70, 72, 75], \'science\': [80, 82, 83], \'history\': [88, 89, 90]} ] ``` And you call the function with: ```python top_k_students_by_subject(\'math\', scores, 2) ``` The function should return: ```python [ {\'name\': \'Charlie\', \'average_math_score\': 95.0}, {\'name\': \'Alice\', \'average_math_score\': 85.0} ] ``` # Note: - Ensure you handle cases where the subject is not present in the student\'s score dictionary gracefully. - Input validation (such as checking for valid `k` or empty score lists) is not required for simplicity; you may assume that the inputs are well-formed.","solution":"def top_k_students_by_subject(subject, scores, k): Returns the top k students with the highest average scores for a given subject. Parameters: subject (str): The subject for which the highest average scores are required. scores (list): A list of dictionaries with each dictionary representing a student. k (int): The number of top students to return. Returns: list: A sorted list of dictionaries with the students\' names and their average scores in the given subject. students_avg_scores = [] for student in scores: if subject in student and student[subject]: avg_score = sum(student[subject]) / len(student[subject]) students_avg_scores.append({\'name\': student[\'name\'], f\'average_{subject}_score\': avg_score}) top_students = sorted(students_avg_scores, key=lambda x: x[f\'average_{subject}_score\'], reverse=True)[:k] return top_students"},{"question":"Write a function that takes a list of 2D points, where each point is represented as a tuple of coordinates (x, y), and computes the convex hull of these points. The convex hull is the smallest polygon that can enclose all the given points. Use the Graham scan algorithm for this purpose. The function should return a list of points that form the vertices of the convex hull in counter-clockwise order. You should write self-contained code starting with: ``` def calculate_convex_hull(points): ```","solution":"def calculate_convex_hull(points): def orientation(p, q, r): To find the orientation of the ordered triplet (p, q, r). The function returns: 0 -> p, q and r are collinear 1 -> Clockwise 2 -> Counterclockwise val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]) if val == 0: return 0 elif val > 0: return 1 else: return 2 def sort_by_polar_angle(points, lowest_point): Sorts the points in counter-clockwise order around the lowest point. def polar_angle(p): from math import atan2 return atan2(p[1] - lowest_point[1], p[0] - lowest_point[0]) return sorted(points, key=polar_angle) # Step 1: Find the lowest y-coordinate point (and leftmost if tie) lowest_point = min(points, key=lambda p: (p[1], p[0])) # Step 2: Sort the points based on polar angle with the lowest point sorted_points = sort_by_polar_angle(points, lowest_point) # Step 3: Initialize the convex hull with the first two points hull = [lowest_point, sorted_points[0]] # Step 4: Process the sorted points and build the convex hull for point in sorted_points[1:]: while len(hull) > 1 and orientation(hull[-2], hull[-1], point) != 2: hull.pop() hull.append(point) return hull"},{"question":"You need to implement a function for managing a to-do list application. The function `addTask(todo_list, task_description)` aims to add a new task to the to-do list. The to-do list is represented by a dictionary called `todo_list` where the keys are task IDs (unique integers) and the values are task descriptions (strings). Here are your requirements: 1. The function should generate a new task ID automatically. The new task ID should be one greater than the current maximum task ID in the list. If the list is empty, the first task ID should be 1. 2. The function should add the new task to the `todo_list` with the generated task ID as the key and the `task_description` as the value. 3. The function should return the updated `todo_list`. Implement the function `addTask(todo_list, task_description)` that fulfills the above requirements. *Note*: Ensure that the task descriptions are non-empty strings. If an empty string is passed as `task_description`, the function should raise a `ValueError` with the message \\"Task description cannot be empty\\".","solution":"def addTask(todo_list, task_description): Adds a new task to the todo_list with a unique task ID and the given task description. Parameters: todo_list (dict): The current to-do list where the keys are task IDs and the values are task descriptions. task_description (str): The description of the new task. Returns: dict: The updated to-do list with the new task added. Raises: ValueError: If task_description is an empty string. if not task_description: raise ValueError(\\"Task description cannot be empty\\") if not todo_list: new_task_id = 1 else: new_task_id = max(todo_list.keys()) + 1 todo_list[new_task_id] = task_description return todo_list"},{"question":"Your task is to implement a function named `sort_and_merge` that sorts and merges a list of lists of integers. The function should first sort each sublist individually, and then merge all the sorted sublists into one sorted list. **Context:** - You receive a list of lists of integers. - Each sublist needs to be sorted in ascending order. - After sorting the sublists, merge all the sublists into a single sorted list. **Function Signature:** ```python def sort_and_merge(lists: List[List[int]]) -> List[int]: ``` **Parameters:** - `lists` (List[List[int]]): A list containing multiple sublists of integers. **Returns:** - `List[int]`: A single list of integers sorted in ascending order. **Details:** 1. Sort each individual sublist first. 2. Merge the sorted sublists into one sorted list. 3. Use an efficient algorithm for the merge step to ensure optimal performance for large inputs. **Example:** Here\'s an example to demonstrate the function\'s behavior: ```python lists = [ [3, 1, 4], [1, 5, 9], [2, 6, 5], [3, 5, 8], ] result = sort_and_merge(lists) print(result) # Output should be [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 8, 9] ``` **Requirements:** - Ensure that the function handles edge cases, such as empty sublists or a list of empty sublists. - Aim for efficiency, particularly in the merge step, to handle large inputs effectively.","solution":"from typing import List import heapq def sort_and_merge(lists: List[List[int]]) -> List[int]: Sorts each sublist and then merges all sorted sublists into one sorted list. Uses heapq.merge to merge sorted sublists efficiently. # Sort each sublist individually sorted_sublists = [sorted(sublist) for sublist in lists] # Merge all sorted sublists into one sorted list merged_list = list(heapq.merge(*sorted_sublists)) return merged_list"},{"question":"Write a function to find and return the most frequent word in a given text file. The function should handle punctuation marks and case sensitivity. If there is a tie, return the word that appears first in the file. Ensure the function properly handles file reading exceptions. The function signature should be: ``` def find_most_frequent_word(file_path): ``` The function should output the most frequent word as a string.","solution":"import string from collections import Counter def find_most_frequent_word(file_path): Finds and returns the most frequent word in a given text file. Handles punctuation marks and case sensitivity. Returns the word that appears first in case of a tie. try: with open(file_path, \'r\') as file: text = file.read() except FileNotFoundError: return \\"File not found.\\" # Remove punctuation and convert to lowercase translator = str.maketrans(\'\', \'\', string.punctuation) text = text.translate(translator).lower() words = text.split() word_count = Counter(words) # Find the word with maximum frequency most_frequent_word = None max_frequency = 0 for word in words: if word_count[word] > max_frequency: most_frequent_word = word max_frequency = word_count[word] return most_frequent_word"},{"question":"In this problem, you will implement a basic simulation of an ATM machine. The goal is to practice working with dictionaries, loops, and conditional statements in Python. You will write a single function named `atm_simulation()`. This function will simulate basic ATM operations including checking the account balance, depositing money, and withdrawing money. The user\'s accounts and transactions will be managed using a dictionary. Your function should include the following features: 1. A dictionary to store account information with account numbers as keys and balances as values. 2. An initial prompt asking the user to input their account number. 3. A loop that repeatedly offers options to check the balance, deposit money, withdraw money, or exit the ATM session. 4. Validation for account numbers: If an account number is not found in the dictionary, display an appropriate message and prompt the user to try again. 5. Correct handling of balance inquiries, deposits, and withdrawals: - For balance inquiries, display the current balance. - For deposits, prompt the user to input the deposit amount, update the balance, and display the new balance. - For withdrawals, prompt the user for the withdrawal amount, check if sufficient funds are available, update the balance if the withdrawal is successful, and display the remaining balance. If insufficient funds, display an appropriate message. 6. Provide an option to exit the session, which will terminate the loop and end the function. Here\'s a breakdown of how the function should work: - Initialize the account dictionary with at least two accounts and associated balances. - Prompt the user to enter their account number. - If the account number is valid, enter into a loop to offer the options as described. - Perform the appropriate action based on the user’s input and display messages accordingly. - Ensure proper handling and updating of account balances. - Exit the loop and end the function when the user chooses to exit. This problem aims to practice handling user input, performing dictionary operations, and implementing a loop with conditionals to manage different ATM operations.","solution":"def atm_simulation(): accounts = { \'123456\': 1000, \'654321\': 2000 } while True: account_number = input(\\"Enter your account number: \\") if account_number not in accounts: print(\\"Account not found. Please try again.\\") continue while True: print(\\"nOptions:\\") print(\\"1. Check Balance\\") print(\\"2. Deposit Money\\") print(\\"3. Withdraw Money\\") print(\\"4. Exit\\") choice = input(\\"Choose an option (1-4): \\") if choice == \'1\': print(f\\"Your balance is: {accounts[account_number]}\\") elif choice == \'2\': deposit_amount = float(input(\\"Enter deposit amount: \\")) accounts[account_number] += deposit_amount print(f\\"New balance: {accounts[account_number]}\\") elif choice == \'3\': withdraw_amount = float(input(\\"Enter withdrawal amount: \\")) if withdraw_amount > accounts[account_number]: print(\\"Insufficient funds.\\") else: accounts[account_number] -= withdraw_amount print(f\\"New balance: {accounts[account_number]}\\") elif choice == \'4\': print(\\"Exiting. Thank you for using the ATM.\\") break else: print(\\"Invalid option, please try again.\\") if choice == \'4\': break"},{"question":"Given a list of dictionaries where each dictionary contains details of a product (`name`, `price`, `quantity`), write a function to compute the total stock value of each product and return the result as a list of dictionaries. Each dictionary should include the `name` and `total_value`, where `total_value` is the product of `price` and `quantity` for that product. This function is useful for inventory management to quickly understand the value of stocks for each product. The function should output: list: A list of dictionaries, where each dictionary contains `name` and `total_value` of the corresponding product. You should write self-contained code starting with: ``` def calculate_stock_value(products): ```","solution":"def calculate_stock_value(products): Calculate the total stock value for each product in the list. Args: products (list of dict): A list of dictionaries where each dictionary contains \'name\', \'price\' and \'quantity\' of the product. Returns: list of dict: A list of dictionaries, each containing \'name\' and \'total_value\' for the corresponding product. result = [] for product in products: total_value = product[\'price\'] * product[\'quantity\'] result.append({\'name\': product[\'name\'], \'total_value\': total_value}) return result"},{"question":"You are tasked with developing a function to predict the average daily temperature of a city for the next week based on historical data. The function `predict_average_temperature(temperatures, daysInWeek=7)` should be implemented with the following parameters: - `temperatures` (list of floats): A list containing recorded daily temperatures. - `daysInWeek` (int, optional): The number of days in a week, default is 7. The function should calculate the average temperature of the most recent `daysInWeek` days and use that as the predicted average daily temperature for the next `daysInWeek` days. If the length of the `temperatures` list is less than `daysInWeek`, the function should return `None`. # Instructions 1. Calculate the average temperature of the last `daysInWeek` days. 2. Return this average as the predicted average daily temperature for the upcoming week. 3. Implement proper error handling to manage scenarios where input data may be insufficient. # Example Usage ```python temperatures = [23.5, 24.0, 22.8, 21.9, 23.1, 24.3, 25.0, 26.2] predicted_temperature = predict_average_temperature(temperatures) print(predicted_temperature) # This should print the predicted average daily temperature based on the given inputs. ``` # Notes - Ensure that your solution handles edge cases, such as lists with fewer elements than `daysInWeek`. - Include comprehensive documentation within your function to explain the logic and calculations.","solution":"def predict_average_temperature(temperatures, daysInWeek=7): Predicts the average daily temperature for the next `daysInWeek` days based on historical data. :param temperatures: List of floats containing recorded daily temperatures. :param daysInWeek: The number of days in a week (default is 7). :return: The predicted average daily temperature if there are enough data points, otherwise None. if len(temperatures) < daysInWeek: return None most_recent_temperatures = temperatures[-daysInWeek:] average_temperature = sum(most_recent_temperatures) / daysInWeek return average_temperature"},{"question":"You are tasked with creating a function that performs matrix multiplication for two given matrices. This function, named `matrix_multiply`, will take two arguments, `A` and `B`, which are the two matrices to be multiplied. The function should return the product of the matrices as a new matrix. The matrices will be represented as lists of lists, where each list within the main list represents a row in the matrix. Key requirements: - Ensure that the number of columns in matrix `A` matches the number of rows in matrix `B`. If not, raise a `ValueError` with an appropriate error message. - The elements of the resulting matrix should be computed using the standard matrix multiplication rules. - You are NOT to use any external libraries like `numpy` for this implementation. Function signature: `def matrix_multiply(A: List[List[int]], B: List[List[int]]) -> List[List[int]]` Example: ```python A = [[1, 2, 3], [4, 5, 6]] B = [[7, 8], [9, 10], [11, 12]] matrix_multiply(A, B) ``` Output: ```python [[58, 64], [139, 154]] ```","solution":"from typing import List def matrix_multiply(A: List[List[int]], B: List[List[int]]) -> List[List[int]]: Multiplies two matrices A and B and returns the result as a new matrix. If the number of columns in A does not match the number of rows in B, raises a ValueError. # Get the dimensions of the matrices rows_A, cols_A = len(A), len(A[0]) rows_B, cols_B = len(B), len(B[0]) # Check if matrices can be multiplied if cols_A != rows_B: raise ValueError(\\"The number of columns in A must match the number of rows in B.\\") # Initialize the result matrix with zeros result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): # or range(rows_B) since cols_A == rows_B result[i][j] += A[i][k] * B[k][j] return result"},{"question":"In this problem, you are required to simulate a basic ticket booking system for a train service. Specifically, you need to write a class `TicketBookingSystem` which will accomplish the following tasks: 1. Initialize with a specified number of seats available. 2. Allow booking a ticket by reducing the number of seats available. 3. Report the number of available seats at any given time. 4. Refill seats to full capacity if needed. 5. Ensure that bookings do not exceed the number of available seats, and handle such cases gracefully. Here\'s a detailed breakdown of the requirements: # Requirements - The class should be initialized with an integer representing the total number of seats. - Implement a method `book_ticket(num_of_tickets)` that reduces the number of available seats by `num_of_tickets`. If the requested tickets exceed available seats, print a message indicating inadequate availability. - Implement a method `available_seats()` that returns the count of available seats. - Implement a method `refill_seats()` that resets the number of available seats to the initial full capacity. # Class Signature ```python class TicketBookingSystem: def __init__(self, total_seats: int): pass def book_ticket(self, num_of_tickets: int): pass def available_seats(self) -> int: pass def refill_seats(self): pass ``` # Example Usage ```python # Initialize the booking system with 100 seats system = TicketBookingSystem(100) # Attempt to book 30 tickets system.book_ticket(30) print(system.available_seats()) # Output: 70 # Attempt to book 80 tickets system.book_ticket(80) # Output: \\"Not enough available seats.\\" # Refill the seats system.refill_seats() print(system.available_seats()) # Output: 100 ``` Your task is to implement the `TicketBookingSystem` class with the specified methods and ensure that all requirements are met.","solution":"class TicketBookingSystem: def __init__(self, total_seats: int): self.total_seats = total_seats self.available_seats_count = total_seats def book_ticket(self, num_of_tickets: int): if num_of_tickets <= self.available_seats_count: self.available_seats_count -= num_of_tickets return True else: print(\\"Not enough available seats.\\") return False def available_seats(self) -> int: return self.available_seats_count def refill_seats(self): self.available_seats_count = self.total_seats"},{"question":"Create a function that finds the root(s) of a non-linear equation using the Newton-Raphson method and plots the function with the identified root(s) marked. The function should also evaluate the derivative numerically if an analytic form is not provided. The function should raise exceptions for: - ValueError: If the input function or initial guess is not provided. - RuntimeError: If the method fails to converge after a specified number of iterations. The function should output: tuple: A tuple containing (float or numpy.ndarray, matplotlib.axes.Axes). The float or numpy array will contain the root(s) of the equation. The Axes object will be for the generated plot. You should write self-contained code starting with: ```python import numpy as np import matplotlib.pyplot as plt def newton_raphson_solver(func, initial_guess, f_prime=None, tol=1e-6, max_iter=1000): ```","solution":"import numpy as np import matplotlib.pyplot as plt def newton_raphson_solver(func, initial_guess, f_prime=None, tol=1e-6, max_iter=1000): if func is None or initial_guess is None: raise ValueError(\\"Function and initial guess must be provided\\") if f_prime is None: def numerical_derivative(x): h = 1e-5 return (func(x + h) - func(x - h)) / (2 * h) f_prime = numerical_derivative x_current = initial_guess for _ in range(max_iter): fx = func(x_current) fpx = f_prime(x_current) if abs(fpx) < np.finfo(float).eps: raise RuntimeError(f\\"Derivative near zero; newton-raphson method failed to converge after {_+1} iterations\\") x_new = x_current - fx / fpx if abs(x_new - x_current) < tol: break x_current = x_new else: raise RuntimeError(f\\"Maximum iterations ({max_iter}) reached without convergence\\") root = x_current # Plotting x_values = np.linspace(initial_guess - 10, initial_guess + 10, 400) y_values = func(x_values) fig, ax = plt.subplots() ax.plot(x_values, y_values, label=\'f(x)\') ax.axhline(0, color=\'gray\', linewidth=0.7) ax.plot(root, func(root), \'ro\', label=\'Root\') ax.legend() return root, ax"},{"question":"You are working with movements of various stocks in a financial dataset. Your task is to write a function named `calculate_moving_average`, which computes the moving average of the stock prices over a specified window and filters out the stocks that meet a threshold based on their moving average. The dataset contains timestamped stock prices and other related information. The function should utilize the `pandas` library to read and process the data. Requirements: 1. Use `pandas.read_csv` to load the stock data from a file. 2. Use the `pandas.to_datetime` function to handle the timestamp parsing and manipulations. 3. Calculate the moving average of the stock prices over a specified window size. 4. Filter the stock records that meet or exceed a specified threshold based on the moving average. Input: - `file_path` (str): The file path to the CSV file containing the stock data. - `window` (int): The window size for calculating the moving average. - `threshold` (float): The threshold to filter the stocks based on their moving average. The CSV file contains the following columns: \'Timestamp\', \'Stock\', \'Price\'. Output: - A `pandas.DataFrame` containing the filtered stock data where the moving average of the \'Price\' meets or exceeds the specified threshold. Example Function Definition: ```python def calculate_moving_average(file_path, window, threshold): # your implementation here ```","solution":"import pandas as pd def calculate_moving_average(file_path, window, threshold): Calculates the moving average of stock prices over a specified window and filters stocks that meet or exceed a specified threshold based on their moving average. Parameters: file_path (str): The file path to the CSV file containing the stock data. window (int): The window size for calculating the moving average. threshold (float): The threshold to filter the stocks based on their moving average. Returns: pd.DataFrame: Filtered dataframe where the moving average of the \'Price\' meets or exceeds the threshold. # Read the CSV file df = pd.read_csv(file_path) # Ensure Timestamp is in datetime format df[\'Timestamp\'] = pd.to_datetime(df[\'Timestamp\']) # Calculate the moving average of the \'Price\' df[\'Moving_Avg\'] = df[\'Price\'].rolling(window=window).mean() # Filter records where the Moving_Avg meets or exceeds the threshold filtered_df = df[df[\'Moving_Avg\'] >= threshold] return filtered_df"},{"question":"You are tasked with creating a function called `filtered_words` which processes a given list of words and filters out those that contain any vowel (a, e, i, o, u). The function should also be able to accept an additional optional parameter `include_y` which, if set to `True`, will also treat the letter \'y\' as a vowel and filter out words containing \'y\' as well. By default, `include_y` should be `False`. Here is the specific behavior expected: 1. **Filter out words with vowels**: By default, remove words containing `a, e, i, o, u` (case insensitive). 2. **Optional Y Inclusion**: If the parameter `include_y` is set to `True`, additionally remove words containing the letter `y` (case insensitive). 3. **Output Format**: Return the list of filtered words that do not contain the specified vowels. **Function Signature:** ```python def filtered_words(words: list, include_y: bool = False) -> list: # Implementation here ``` **Example Usage:** ```python words = [\\"sky\\", \\"blue\\", \\"myth\\", \\"hello\\", \\"world\\"] print(filtered_words(words)) # Output: [\'sky\', \'myth\'] print(filtered_words(words, include_y=True)) # Output: [] ``` # Guidelines: - Use list comprehensions to perform the filtering efficiently. - Implement the filtering logic to be case insensitive. - Ensure proper handling of the optional `include_y` parameter.","solution":"def filtered_words(words: list, include_y: bool = False) -> list: vowels = \\"aeiou\\" if include_y: vowels += \\"y\\" return [ word for word in words if not any(char in vowels for char in word.lower()) ]"},{"question":"In this problem, you are required to simulate a basic elevator system using Python. An elevator moves between floors in a building with a limited number of floors. Each time the elevator stops at a floor, it updates its current position and waits for a new command. You must write a class called `Elevator` with the following methods: 1. `__init__(self, floors)`: Initializes the elevator with a given number of floors. The elevator starts at the ground floor (floor 0). 2. `move_to_floor(self, target_floor)`: Moves the elevator to the `target_floor` if the target floor is within the range of available floors. If the target floor is out of range, the elevator should stay at the current floor. The method should return the current floor after the move. 3. `current_floor(self)`: Returns the current floor where the elevator is located. # Example ```python elevator = Elevator(5) # Initialize elevator in a building with 5 floors (0 to 4). print(elevator.current_floor()) # Output: 0 print(elevator.move_to_floor(3)) # Output: 3 (elevator moves to the 3rd floor) print(elevator.current_floor()) # Output: 3 print(elevator.move_to_floor(5)) # Output: 3 (floor 5 is out of range, elevator stays at 3) print(elevator.move_to_floor(0)) # Output: 0 (elevator moves to the ground floor) ``` # Constraints - The number of floors (`floors`) will be a positive integer greater than zero. - `target_floor` will be an integer (positive, negative, or zero).","solution":"class Elevator: def __init__(self, floors): Initializes the elevator with a given number of floors. The elevator starts at the ground floor (floor 0). :param floors: Number of floors in the building (including ground floor) self.floors = floors self.current = 0 def move_to_floor(self, target_floor): Moves the elevator to the target_floor if the floor is within range. If the target floor is out of range, the elevator stays at the current floor. :param target_floor: Target floor to move to :return: Current floor after the move if 0 <= target_floor < self.floors: self.current = target_floor return self.current def current_floor(self): Returns the current floor where the elevator is located. :return: Current floor return self.current"},{"question":"In this problem, you are required to write a function `is_valid_sequence(nums, queries)` which takes in two inputs: a list of integers `nums` and a list of queries `queries`. Each query is represented as a tuple `(start, end)` and you need to determine if the subarray from index `start` to `end` in `nums` forms an arithmetic sequence. An arithmetic sequence is a sequence of numbers in which the difference between consecutive terms is constant. The function will be broken down into several parts: 1. **Extract Subarray**: For each query, extract the subarray from the `nums` list. 2. **Check Arithmetic Sequence**: Check if the extracted subarray forms an arithmetic sequence. You need to return a list of boolean values indicating whether each subarray forms an arithmetic sequence. # Example Here\'s a step-by-step example to illustrate the process: ```python Input: nums = [1, 3, 5, 7, 9], queries = [(0, 2), (1, 3), (0, 4)] Output: [True, True, True] Explanation: 1. For query (0, 2), the subarray is [1, 3, 5], which forms an arithmetic sequence with common difference 2. 2. For query (1, 3), the subarray is [3, 5, 7], which forms an arithmetic sequence with common difference 2. 3. For query (0, 4), the subarray is [1, 3, 5, 7, 9], which forms an arithmetic sequence with common difference 2. Therefore, all queries return True. ``` # Function Signature ```python def is_valid_sequence(nums: List[int], queries: List[Tuple[int, int]]) -> List[bool]: ``` # Constraints - The input list `nums` contains at least one element and at most 10^4 elements. - Each query `(start, end)` is valid and `0 <= start <= end < len(nums)`.","solution":"from typing import List, Tuple def is_valid_sequence(nums: List[int], queries: List[Tuple[int, int]]) -> List[bool]: def is_arithmetic_sequence(subarray: List[int]) -> bool: if len(subarray) < 2: return True diff = subarray[1] - subarray[0] for i in range(2, len(subarray)): if subarray[i] - subarray[i-1] != diff: return False return True result = [] for start, end in queries: subarray = nums[start:end+1] result.append(is_arithmetic_sequence(subarray)) return result"},{"question":"You are asked to create a function `find_palindromes(numbers)` that takes a list of integers and returns a list containing only the palindromic numbers from the original list. A palindromic number is a number that remains the same when its digits are reversed. For example: - 121 is a palindromic number. - 34543 is a palindromic number. - 123 is not a palindromic number. Your task is to implement `find_palindromes` function with the following signature: ```python def find_palindromes(numbers): # sig: list of int -> list of int ``` # Requirements: 1. Iterate through each integer in the input list. 2. Convert each integer to a string and check if it reads the same forwards and backwards. 3. Collect and return the list of palindromic numbers. # Example: ```python print(find_palindromes([121, 345, 34543, 123, 454])) # Output: [121, 34543, 454] ```","solution":"def find_palindromes(numbers): Returns a list of palindromic numbers from the input list. A palindromic number is a number that remains the same when its digits are reversed. Args: numbers (list of int): The list of integers to check. Returns: list of int: The list of palindromic integers. def is_palindrome(n): s = str(n) return s == s[::-1] return [num for num in numbers if is_palindrome(num)]"},{"question":"You are tasked with implementing a function that simulates the movement of a robot on a 2D grid. The robot can move in four directions: up, down, left, and right, based on a given set of commands. The grid has boundaries, and the robot cannot move outside the grid. Write a function `robot_movement(n, m, commands)` that simulates the robot\'s movement on an `n x m` grid and returns the final position of the robot after executing all the commands. The function should take the following arguments: - `n`: An integer representing the number of rows in the grid. - `m`: An integer representing the number of columns in the grid. - `commands`: A list of strings where each string is a command of \'U\', \'D\', \'L\', or \'R\' representing the directions up, down, left, and right, respectively. The robot starts at the top-left corner of the grid, which is position `(0, 0)`. The function should return: - A tuple `(x, y)` representing the final position of the robot on the grid. The robot should not move out of the grid boundaries. If a command would move the robot out of the grid, it should ignore that command. # Example: ```python def robot_movement(n, m, commands): # Initialize the starting position of the robot x, y = 0, 0 # Define the movement directions move_map = { \'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1) } # Process each command for command in commands: if command in move_map: dx, dy = move_map[command] # Calculate new position new_x, new_y = x + dx, y + dy # Check if the new position is within the grid boundaries if 0 <= new_x < n and 0 <= new_y < m: x, y = new_x, new_y return (x, y) # Example usage: n = 3 m = 3 commands = [\'R\', \'D\', \'R\', \'U\', \'L\', \'D\'] final_position = robot_movement(n, m, commands) print(final_position) ``` Expected Output: ```python (1, 1) ``` # Requirements - Ensure the robot does not move out of grid boundaries. - Include appropriate comments in your code to explain each step.","solution":"def robot_movement(n, m, commands): Simulates the robot\'s movement on an n x m grid and returns the final position. Parameters: n (int): The number of rows in the grid. m (int): The number of columns in the grid. commands (list of str): A list of commands where \'U\' is up, \'D\' is down, \'L\' is left, and \'R\' is right. Returns: tuple: The final position of the robot as (x, y). # Initialize the starting position of the robot x, y = 0, 0 # Define the movement directions move_map = { \'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1) } # Process each command for command in commands: if command in move_map: dx, dy = move_map[command] # Calculate new position new_x, new_y = x + dx, y + dy # Check if the new position is within the grid boundaries if 0 <= new_x < n and 0 <= new_y < m: x, y = new_x, new_y return (x, y)"},{"question":"You are given a list of dictionaries, where each dictionary represents a student and contains their name and a list of their scores in various subjects. Your task is to implement a function named `find_top_student` that identifies the student with the highest average score. The function should return the name of the student with the highest average score. If there are multiple students with the same highest average score, return the lexicographically smallest name. Function signature: ```python def find_top_student(students: List[Dict[str, Any]]) -> str: pass ``` # Constraints: 1. The `students` list contains at least one student. 2. Each student dictionary has two keys: \\"name\\" (a string) and \\"scores\\" (a list of integers representing their scores in different subjects). 3. The average score is the mean of the scores in each student\'s \\"scores\\" list. 4. Each student has at least one score. 5. You should handle edge cases such as empty score lists gracefully (though they should not appear as per constraints). # Example: ```python students = [ {\\"name\\": \\"Alice\\", \\"scores\\": [90, 92, 85, 88]}, {\\"name\\": \\"Bob\\", \\"scores\\": [85, 85, 90, 90]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [95, 85, 85, 85]} ] assert find_top_student(students) == \\"Alice\\" ``` # Hints: - You can use the `statistics.mean` function to calculate the average of a list of scores. - Use the built-in `min` function with a custom key to determine the student with the highest average and the lexicographically smallest name in case of a tie.","solution":"from statistics import mean from typing import List, Dict, Any def find_top_student(students: List[Dict[str, Any]]) -> str: Returns the name of the student with the highest average score. If multiple students have the same highest average score, returns the lexicographically smallest name. top_student = min(students, key=lambda student: (-mean(student[\'scores\']), student[\'name\'])) return top_student[\'name\']"},{"question":"You are required to write a Python function named `remove_even_values` that takes a dictionary as input and removes all key-value pairs where the value is an even number. The function should then return the modified dictionary. Here’s the specific requirement for your task: Implement the `remove_even_values` function which: 1. Iterates through the input dictionary. 2. Removes key-value pairs where the value is an even number. 3. Returns the updated dictionary. # Example Usage: ```python # Initial dictionary sample_dict = {\'a\': 1, \'b\': 2, \'c\': 3, \'d\': 4} # Call the function result_dict = remove_even_values(sample_dict) print(result_dict) # Expected output should be {\'a\': 1, \'c\': 3} ``` # Constraints: - Do not use dictionary comprehension to solve this problem. - Use the appropriate methods to modify the dictionary in-place. **Ensure you manage the dictionary iteration and modification carefully to avoid runtime errors.**","solution":"def remove_even_values(input_dict): Removes all key-value pairs from the dictionary where the value is an even number. Args: input_dict (dict): The input dictionary. Returns: dict: The updated dictionary with even values removed. keys_to_remove = [key for key, value in input_dict.items() if value % 2 == 0] for key in keys_to_remove: del input_dict[key] return input_dict # Example usage: # sample_dict = {\'a\': 1, \'b\': 2, \'c\': 3, \'d\': 4} # result_dict = remove_even_values(sample_dict) # print(result_dict) # Expected output: {\'a\': 1, \'c\': 3}"},{"question":"You are tasked with creating a function `process_tasks_concurrently` that demonstrates efficient use of the `concurrent.futures` module from the Python standard library. The purpose of this function is to manage a pool of threads, distribute tasks among them, and collect the results. To implement this, follow the steps below: 1. Define a function named `task_function(n)` that: - Prints the current thread\'s name and a start message. - Simulates a job by squaring the input number `n`. - Prints the current thread\'s name and a finish message, along with the result. - Returns the squared value of `n`. 2. Define another function named `process_tasks_concurrently` which: - Takes a list of integers as input. - Creates a thread pool executor to handle the tasks. - Submits each integer from the list to `task_function(n)` using the thread pool. - Collects the results of the calculations and returns them as a list. Ensure that your implementation correctly utilizes the `concurrent.futures` module to manage multiple threads and collect results efficiently. Here’s a brief description of the relevant methods from `concurrent.futures`: *concurrent.futures.ThreadPoolExecutor.submit(fn, *args, **kwargs)* Submit a callable to be executed with the given arguments. Returns a Future object representing the execution of the callable. *concurrent.futures.as_completed(fs)* Returns an iterator that yields futures as they complete. **Example Usage:** ```python results = process_tasks_concurrently([1, 2, 3, 4]) print(results) ``` Expected output (actual order of start and finish messages may vary due to concurrent execution): ``` ThreadPoolExecutor-0_0 start ThreadPoolExecutor-0_1 start ThreadPoolExecutor-0_2 start ThreadPoolExecutor-0_3 start ThreadPoolExecutor-0_0 finish: 1 ThreadPoolExecutor-0_1 finish: 4 ThreadPoolExecutor-0_2 finish: 9 ThreadPoolExecutor-0_3 finish: 16 [1, 4, 9, 16] ```","solution":"import concurrent.futures import threading def task_function(n): Simulates a task by squaring the input number n. Prints start and finish messages indicating the current thread name. Returns the squared value of n. print(f\\"{threading.current_thread().name} start\\") result = n * n print(f\\"{threading.current_thread().name} finish: {result}\\") return result def process_tasks_concurrently(numbers): Processes a list of numbers concurrently, using threads to square each number. Collects and returns the results as a list. results = [] with concurrent.futures.ThreadPoolExecutor() as executor: futures = [executor.submit(task_function, num) for num in numbers] for future in concurrent.futures.as_completed(futures): results.append(future.result()) return results"},{"question":"You are tasked with implementing a function `analyze_entries(log_entries)` that processes a list of log entries and extracts information about the number of unique users for each day. Each log entry is a string in the format \\"YYYY-MM-DD USERID\\" where `YYYY-MM-DD` is the date of the log entry, and `USERID` is a string representing the user ID. The function should return a dictionary where the keys are the dates, and the values are the counts of unique users for that date. # Function Signature ```python def analyze_entries(log_entries: list) -> dict: ``` # Parameters - **log_entries** (`list`): A list of strings, where each string is a log entry in the format \\"YYYY-MM-DD USERID\\". # Returns - **dict**: A dictionary with dates as keys and counts of unique users as values. # Constraints - The log entries list will have at most 10^5 entries. - The date format will always be valid and consistent. - The user IDs are alphanumeric strings and are case-sensitive. # Example ```python log_entries = [ \\"2023-01-01 user1\\", \\"2023-01-01 user2\\", \\"2023-01-01 user1\\", \\"2023-01-02 user1\\", \\"2023-01-02 user3\\" ] expected_result = { \\"2023-01-01\\": 2, \\"2023-01-02\\": 2 } assert analyze_entries(log_entries) == expected_result ```","solution":"def analyze_entries(log_entries): Returns a dictionary with dates as keys and the count of unique users as values. from collections import defaultdict # Create a dictionary to hold the unique user IDs for each date date_users_dict = defaultdict(set) # Process each log entry for entry in log_entries: date, user_id = entry.split() date_users_dict[date].add(user_id) # Create the result dictionary with counts of unique users for each date result = {date: len(users) for date, users in date_users_dict.items()} return result"},{"question":"You are tasked with creating a Python function that simulates a simple vending machine. The function, named `vending_machine`, should accept an integer amount of money (in cents) and a list of available items in the machine. Each item is represented as a tuple containing the name of the item and its price in cents. The behavior of the function should be as follows: 1. Accept the amount of money (an integer value representing cents) and a list of items available in the machine. 2. Display the available items to the user. 3. Allow the user to select an item by inputting its name. 4. Check if the user-selected item is available in the machine: - If the item is available and the user has enough money to buy it, deduct the item\'s price from the user\'s balance and print a message confirming the purchase and showing the remaining balance. - If the item is available but the user does not have enough balance, print a message indicating insufficient funds. - If the item is not available, print a message indicating the item is unavailable. 5. Continue to prompt the user for additional purchases until they choose to exit by entering \'exit\'. 6. Display the total amount spent and any remaining balance when the user exits. Here is how you could call the function: ```python items = [(\\"Soda\\", 125), (\\"Chips\\", 150), (\\"Chocolate\\", 200)] vending_machine(500, items) ``` Here is an example of how it might work: ``` Available items: 1. Soda - 125 cents 2. Chips - 150 cents 3. Chocolate - 200 cents Enter the name of the item you wish to purchase or \'exit\' to finish: Soda You purchased Soda for 125 cents. Remaining balance: 375 cents. Enter the name of the item you wish to purchase or \'exit\' to finish: Chips You purchased Chips for 150 cents. Remaining balance: 225 cents. Enter the name of the item you wish to purchase or \'exit\' to finish: Water Item \'Water\' is unavailable. Enter the name of the item you wish to purchase or \'exit\' to finish: Chocolate You purchased Chocolate for 200 cents. Remaining balance: 25 cents. Enter the name of the item you wish to purchase or \'exit\' to finish: exit Total spent: 475 cents. Remaining balance: 25 cents. ```","solution":"def vending_machine(money, items): Simulates a simple vending machine which accepts an amount of money and a list of available items, allowing purchases based on user input. Parameters: money (int): Amount of money in cents. items (list of tuple): Each tuple contains the name of the item and its price in cents. Returns: tuple: Total spent and remaining balance. total_spent = 0 items_dict = {item[0]: item[1] for item in items} while True: print(\\"nAvailable items:\\") for name, price in items: print(f\\"{name} - {price} cents\\") user_input = input(\\"Enter the name of the item you wish to purchase or \'exit\' to finish: \\").strip() if user_input.lower() == \'exit\': break elif user_input in items_dict: item_price = items_dict[user_input] if money >= item_price: money -= item_price total_spent += item_price print(f\\"You purchased {user_input} for {item_price} cents. Remaining balance: {money} cents.\\") else: print(f\\"Insufficient funds to purchase {user_input}.\\") else: print(f\\"Item \'{user_input}\' is unavailable.\\") print(f\\"nTotal spent: {total_spent} cents. Remaining balance: {money} cents.\\") return total_spent, money"},{"question":"You are required to write a function named `running_average` that computes the running average of numbers from an input iterable. Each value in the output should represent the average of all the elements up to that point in the input iterable. # Function Signature ```python def running_average(iterable: Iterable[float]) -> List[float]: pass ``` # Input - An iterable: any iterable type (list, tuple, etc.) containing numbers (int or float). # Output - A list containing the running averages of the input iterable. # Instructions 1. Initialize an empty list to hold the running averages. 2. Iterate over the input iterable while maintaining a cumulative sum of the elements. 3. For each element, compute the average by dividing the cumulative sum by the number of elements encountered so far. 4. Append each calculated average to the running averages list. 5. Return the list of running averages. # Examples ```python # Example 1 result = running_average([1, 2, 3, 4]) print(result) # Output: [1.0, 1.5, 2.0, 2.5] # Example 2 result = running_average([10, 20, 30]) print(result) # Output: [10.0, 15.0, 20.0] # Example 3 result = running_average([-1, 1, -1, 1]) print(result) # Output: [-1.0, 0.0, -0.3333333333333333, 0.0] # Example 4 result = running_average([5]) print(result) # Output: [5.0] ``` Create the `running_average` function that meets the above requirements.","solution":"from typing import Iterable, List def running_average(iterable: Iterable[float]) -> List[float]: Computes the running average of numbers from an input iterable, returning a list of running averages. running_sum = 0.0 running_averages = [] for index, value in enumerate(iterable): running_sum += value current_average = running_sum / (index + 1) running_averages.append(current_average) return running_averages"},{"question":"In this problem, you are required to implement a function `process_inventory(items_list: List[str], action: str) -> Dict[str, int]`. The function objectives are as follows: 1. Load a JSON file named `inventory.json` which contains a dictionary with item names as keys and their quantities as values. 2. If the `action` is \\"add\\", increment the quantities of the items in the `items_list` by 1, adding new items to the inventory if they do not already exist. 3. If the `action` is \\"remove\\", decrement the quantities of the items in `items_list` by 1, ensuring that no item\'s quantity falls below 0. 4. Save the updated inventory back to the `inventory.json` file. 5. Return the updated inventory as a dictionary. This problem is educational for practicing JSON file handling, dictionary operations, and conditional logic in Python. # Function Signature: ```python def process_inventory(items_list: List[str], action: str) -> Dict[str, int]: pass ``` # Constraints: - The JSON file `inventory.json` will already exist in the same directory as your script. - The file `inventory.json` contains a dictionary where keys are item names and values are their corresponding quantities. - `action` will be either \\"add\\" or \\"remove\\". # Example: Suppose `inventory.json` initially contains: ```json { \\"apple\\": 2, \\"banana\\": 5, \\"orange\\": 3 } ``` **Input:** ```python process_inventory([\\"apple\\", \\"banana\\", \\"cherry\\"], \\"add\\") ``` **Output:** ```python { \\"apple\\": 3, \\"banana\\": 6, \\"orange\\": 3, \\"cherry\\": 1 } ``` **Explanation:** Each item in the `items_list` is added to the inventory. \\"apple\\" becomes 3, \\"banana\\" becomes 6, and \\"cherry\\" is added with a quantity of 1. # Notes: - Ensure you handle file operations (open, read, write) correctly. - Make sure to account for the case when `action` is \\"remove\\" and avoid negative quantities.","solution":"import json from typing import List, Dict def process_inventory(items_list: List[str], action: str) -> Dict[str, int]: # Load current inventory from JSON file with open(\'inventory.json\', \'r\') as file: inventory = json.load(file) # Update inventory based on action for item in items_list: if action == \\"add\\": if item in inventory: inventory[item] += 1 else: inventory[item] = 1 elif action == \\"remove\\": if item in inventory and inventory[item] > 0: inventory[item] -= 1 # Save updated inventory back to JSON file with open(\'inventory.json\', \'w\') as file: json.dump(inventory, file) # Return updated inventory as a dictionary return inventory"},{"question":"In this task, you are required to implement a Python function that processes and analyzes data from a CSV file. The function will read data, perform specific analyses, and generate a summary report. The goal is to handle CSV files using Python\'s `csv` module. The function should be named `process_csv`. Here are the details of what the function should do: 1. **Reading Arguments:** - The function should take two arguments: - `filename`: A file path (string) to the CSV file that needs to be processed. - `column_name`: The specific column in the CSV file on which analysis will be performed. 2. **CSV File Reading:** - Read the contents of the CSV file. Assume that the first row contains headers and all data is numeric. 3. **Data Validation:** - Ensure that the specified `column_name` exists in the CSV file. If it does not, raise an appropriate exception with a message `\'Column not found\'`. 4. **Computations and Analysis:** - Calculate the following statistics for the specified column: - Mean (average) - Median - Standard Deviation - Implement helper functions as necessary to perform individual computations. 5. **Summary Report:** - Generate a summary report as a dictionary with the following keys: `mean`, `median`, `std_dev`. - If the CSV file is empty (excluding headers), the summary dictionary should contain `None` for all statistics values. # Example Usage: ```python results = process_csv(\'data.csv\', \'age\') print(results) # Output: {\'mean\': 35.5, \'median\': 34, \'std_dev\': 10.2} ``` # Implementation Details: - Use the `csv` module for reading CSV files. - Ensure that the function `process_csv` handles exceptions gracefully where necessary. - Assume the CSV file is well-formed (i.e., no missing data within the specified column).","solution":"import csv import math import statistics def process_csv(filename, column_name): Process a CSV file and analyze data in a specific column. Params: - filename (str): Path to the CSV file. - column_name (str): The specific column to analyze. Returns: - dict: Summary report with statistics {\'mean\': float, \'median\': float, \'std_dev\': float} data = [] # Read the CSV file with open(filename, \'r\') as file: reader = csv.DictReader(file) # Check if the column name exists if column_name not in reader.fieldnames: raise ValueError(\'Column not found\') # Collect data for the specific column for row in reader: try: data.append(float(row[column_name])) except ValueError: pass # exclude non-numeric data # If the data list is empty, the file might be empty (excluding headers) if not data: return {\'mean\': None, \'median\': None, \'std_dev\': None} # Calculate statistics mean_val = statistics.mean(data) median_val = statistics.median(data) std_dev_val = statistics.stdev(data) return {\'mean\': mean_val, \'median\': median_val, \'std_dev\': std_dev_val}"},{"question":"You have been provided with a JSON file named `students.json`. This file contains a list of students with their names, ages, and grades. The format of the JSON file is as follows: ```json [ {\\"name\\": \\"John\\", \\"age\\": 19, \\"grade\\": 88}, {\\"name\\": \\"Alice\\", \\"age\\": 21, \\"grade\\": 92}, {\\"name\\": \\"Bob\\", \\"age\\": 20, \\"grade\\": 75} ] ``` Your task is to write a Python function named `filter_students_by_grade` that reads the content from `students.json` and outputs a new JSON file named `top_students.json` containing only the students who have a grade of 85 or higher. The new JSON file should be formatted in the same way as the input file but include only the students who meet the grade criteria. Use the `json` module to accomplish this task. Ensure that the output JSON file (`top_students.json`) has the same structure as the input file but with the filtered content. Your function should not require any input argument and should perform all operations internally. You may assume that `students.json` is present in the current working directory. Function Signature: `def filter_students_by_grade():`","solution":"import json def filter_students_by_grade(): Reads the content from \'students.json\' and outputs a new JSON file named \'top_students.json\' containing only the students who have a grade of 85 or higher. with open(\'students.json\', \'r\') as infile: students = json.load(infile) top_students = [student for student in students if student[\'grade\'] >= 85] with open(\'top_students.json\', \'w\') as outfile: json.dump(top_students, outfile, indent=4)"},{"question":"# Objective Write a function named `find_all_prime_factors` that takes in a single integer and returns a list of all prime factors of that integer in ascending order. A prime factor is a factor that is a prime number. # Function Signature ```python def find_all_prime_factors(n): Find all prime factors of a given integer n Inputs: - n: Integer, the positive integer whose prime factors are to be found Returns: - List of integers: A list containing all prime factors of n in ascending order ``` # Requirements - The function should correctly handle cases where the integer `n` is 1 or a prime number. - The function should return an empty list if `n` is 1. - The function should use efficient algorithms for prime factorization. # Input 1. `n`: A positive integer greater than or equal to 1. # Output - A list of all prime factors of `n` in ascending order. # Example ```python print(find_all_prime_factors(28)) # Output: [2, 7] print(find_all_prime_factors(29)) # Output: [29] print(find_all_prime_factors(1)) # Output: [] ```","solution":"def find_all_prime_factors(n): Find all prime factors of a given integer n. Inputs: - n: Integer, the positive integer whose prime factors are to be found. Returns: - List of integers: A list containing all prime factors of n in ascending order. if n <= 1: return [] prime_factors = [] divisor = 2 while n >= divisor * divisor: if n % divisor == 0: prime_factors.append(divisor) while n % divisor == 0: n //= divisor divisor += 1 if n > 1: prime_factors.append(n) return prime_factors"},{"question":"Write a function that takes a list of strings, representing names of people, and a corresponding list of their ages. The function should group the people into age brackets of 10 years each (0-9, 10-19, 20-29, etc.), then construct and return a DataFrame where each row contains the names of people within the same age bracket. The DataFrame columns should be \'Age_Bracket\' and \'Names\', where \'Age_Bracket\' represents the age range and \'Names\' is a list of all names falling into that range. The function should output: DataFrame: A pandas DataFrame with age brackets and names grouped accordingly. You should write self-contained code starting with: ``` import pandas as pd def group_people_by_age(names, ages): ```","solution":"import pandas as pd def group_people_by_age(names, ages): Groups people by age brackets of 10 years each and returns a DataFrame. Parameters: names (list of str): List of people\'s names. ages (list of int): Corresponding list of people\'s ages. Returns: pd.DataFrame: A DataFrame with \'Age_Bracket\' and \'Names\' columns. age_dict = {} for name, age in zip(names, ages): bracket = f\\"{(age//10)*10}-{(age//10)*10+9}\\" if bracket not in age_dict: age_dict[bracket] = [] age_dict[bracket].append(name) data = {\'Age_Bracket\': [], \'Names\': []} for bracket, names in age_dict.items(): data[\'Age_Bracket\'].append(bracket) data[\'Names\'].append(names) return pd.DataFrame(data)"},{"question":"In this exercise, you\'ll deepen your understanding of working with 2D lists (matrices) in Python by implementing a function to determine if a square matrix is symmetric. A matrix is symmetric if it is equal to its transpose. # Task 1. **Function Name**: `is_symmetric` 2. **Parameters**: - `matrix`: A 2D list of integers representing a square matrix (i.e., the number of rows is equal to the number of columns). 3. **Objective**: Write a function that checks whether the given square matrix is symmetric. 4. **Details**: - If the matrix is empty, consider it symmetric. - Compare each element `matrix[i][j]` with `matrix[j][i]` to determine if the matrix is symmetric. 5. **Output**: The function should return `True` if the matrix is symmetric, and `False` otherwise. # Example: ```python def is_symmetric(matrix): n = len(matrix) if n == 0: return True for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return False return True # Example usage: # matrix = [ # [1, 2, 3], # [2, 4, 5], # [3, 5, 6] # ] # print(is_symmetric(matrix)) # Output: True # # matrix = [ # [1, 0, 3], # [2, 4, 5], # [3, 5, 6] # ] # print(is_symmetric(matrix)) # Output: False ```","solution":"def is_symmetric(matrix): Checks whether the given square matrix is symmetric. Parameters: matrix (list of list of int): 2D list representing a square matrix. Returns: bool: True if the matrix is symmetric, False otherwise. n = len(matrix) if n == 0: return True for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"You are required to write a function named `parse_book_info` that processes information about books from the Google Books API. The function should make an HTTP GET request to the Google Books API using the `requests` library to fetch the book data and then organize the data into a structured DataFrame using the `pandas` library. The function should follow this signature: ```python def parse_book_info(api_key, query, max_results): # your code here ``` Parameters: - `api_key` (str): Your Google Books API key. - `query` (str): The search query string (e.g., book title or author name). - `max_results` (int): The maximum number of results to return. Example: ```python df = parse_book_info( api_key=\'YOUR-API-KEY\', query=\'Harry Potter\', max_results=5 ) ``` The returned DataFrame should have the following columns: - `Title` - `Authors` - `Publisher` - `Published Date` - `Description` - `Page Count` - `Categories` - `Average Rating` - `Ratings Count` - `Language` Instructions: - Utilize the `requests.get` function to perform the API call. - Use the `pandas.DataFrame` constructor to properly structure the DataFrame with the required columns. - Manage any potential errors from the API call (e.g., invalid API key, request timeouts, or no results found). - Ensure that the function returns a DataFrame with the specified columns populated with data from the API response.","solution":"import requests import pandas as pd def parse_book_info(api_key, query, max_results): url = \'https://www.googleapis.com/books/v1/volumes\' params = { \'q\': query, \'maxResults\': max_results, \'key\': api_key } response = requests.get(url, params=params) if response.status_code != 200: raise Exception(f\\"API request failed with status code {response.status_code}\\") data = response.json() if \'items\' not in data: return pd.DataFrame(columns=[ \'Title\', \'Authors\', \'Publisher\', \'Published Date\', \'Description\', \'Page Count\', \'Categories\', \'Average Rating\', \'Ratings Count\', \'Language\' ]) books = data[\'items\'] book_info_list = [] for book in books: volume_info = book.get(\'volumeInfo\', {}) book_info = { \'Title\': volume_info.get(\'title\', \'N/A\'), \'Authors\': \', \'.join(volume_info.get(\'authors\', [])), \'Publisher\': volume_info.get(\'publisher\', \'N/A\'), \'Published Date\': volume_info.get(\'publishedDate\', \'N/A\'), \'Description\': volume_info.get(\'description\', \'N/A\'), \'Page Count\': volume_info.get(\'pageCount\', \'N/A\'), \'Categories\': \', \'.join(volume_info.get(\'categories\', [])), \'Average Rating\': volume_info.get(\'averageRating\', \'N/A\'), \'Ratings Count\': volume_info.get(\'ratingsCount\', \'N/A\'), \'Language\': volume_info.get(\'language\', \'N/A\') } book_info_list.append(book_info) df = pd.DataFrame(book_info_list, columns=[ \'Title\', \'Authors\', \'Publisher\', \'Published Date\', \'Description\', \'Page Count\', \'Categories\', \'Average Rating\', \'Ratings Count\', \'Language\' ]) return df"},{"question":"You are tasked with implementing a function `parse_equation` in Python that parses a mathematical equation represented as a string and evaluates it. The function should handle the basic arithmetic operations: addition, subtraction, multiplication, and division. You can assume that the input string will contain valid mathematical expressions including integers, spaces, and the operators `+`, `-`, `*`, and `/`. Your function should accept a single string `equation` and return a floating-point number that is the result of the evaluated equation. The function should: 1. Remove any unnecessary spaces from the input string. 2. Evaluate the arithmetic expression while respecting the standard operator precedence rules (multiplication and division before addition and subtraction). The function should be named `parse_equation`. # Function Signature ```python def parse_equation(equation: str) -> float: pass ``` # Example Usage ```python # Example 1 equation1 = \\"3 + 5 * 2\\" print(parse_equation(equation1)) # Output: 13.0 # Example 2 equation2 = \\"10 / 2 - 3\\" print(parse_equation(equation2)) # Output: 2.0 # Example 3 equation3 = \\"4 + 18 / ( 9 - 3 )\\" print(parse_equation(equation3)) # Output: 7.0 ``` # Constraints - You may not use the `eval` function or any other built-in function that directly evaluates the expression. - You should handle typical mathematical operator precedence and associativity. - Ensure your function can handle both integer and floating-point division. - Do not worry about parentheses; assume that the input equation is a linear sequence of operations with the correct precedence.","solution":"def parse_equation(equation: str) -> float: Parses and evaluates a mathematical equation from a string. Supports +, -, *, and / operations with appropriate precedence. import operator # Define the operators and their precedence ops = { \'+\': (1, operator.add), \'-\': (1, operator.sub), \'*\': (2, operator.mul), \'/\': (2, operator.truediv) } def parse_expression(tokens): Parses and computes the value of the expression given as a list of tokens. def parse_term(tokens, index): Parses terms and handles * and / precedence. op_stack = [] num_stack = [] while index < len(tokens): token = tokens[index] if token in ops: precedence, operation = ops[token] while (op_stack and ops[op_stack[-1]][0] >= precedence): top_op = op_stack.pop() rhs = num_stack.pop() lhs = num_stack.pop() num_stack.append(ops[top_op][1](lhs, rhs)) op_stack.append(token) else: num_stack.append(float(token)) index += 1 while op_stack: top_op = op_stack.pop() rhs = num_stack.pop() lhs = num_stack.pop() num_stack.append(ops[top_op][1](lhs, rhs)) return num_stack[0] return parse_term(tokens, 0) # Remove whitespace and tokenize the input equation tokens = [] number = \'\' for char in equation: if char.isdigit() or char == \'.\': number += char else: if number: tokens.append(number) number = \'\' if char in ops: tokens.append(char) if number: tokens.append(number) return parse_expression(tokens)"},{"question":"You are tasked with implementing a class `Library` that manages a collection of books. Each book has a title, author, publication year, and a unique identifier (ID). The library should support operations to add a book, remove a book by ID, find a book by title, and list all books sorted by a chosen attribute. 1. Implement a `Book` class with `title`, `author`, `year`, and `book_id` attributes. 2. Implement a `Library` class with methods to: - `add_book(book)`: Adds a book to the library. - `remove_book(book_id)`: Removes the book with the specified ID from the library. - `find_book_by_title(title)`: Returns a list of books matching the given title. - `list_books_sorted_by(attribute)`: Lists all books sorted by the given attribute, which can be one of `title`, `author`, or `year`. Your solution should handle potential issues such as trying to remove a book that doesn\'t exist, or sorting by an invalid attribute. Implement the `Library` class with the following signature: ```python class Book: def __init__(self, title: str, author: str, year: int, book_id: int): self.title = title self.author = author self.year = year self.book_id = book_id class Library: def __init__(self): self.books = [] def add_book(self, book: Book): # Your implementation here def remove_book(self, book_id: int): # Your implementation here def find_book_by_title(self, title: str): # Your implementation here def list_books_sorted_by(self, attribute: str): # Your implementation here ``` The `list_books_sorted_by(attribute)` method should print the sorted list of books.","solution":"class Book: def __init__(self, title: str, author: str, year: int, book_id: int): self.title = title self.author = author self.year = year self.book_id = book_id class Library: def __init__(self): self.books = [] def add_book(self, book: Book): self.books.append(book) def remove_book(self, book_id: int): self.books = [book for book in self.books if book.book_id != book_id] def find_book_by_title(self, title: str): return [book for book in self.books if book.title == title] def list_books_sorted_by(self, attribute: str): if attribute not in [\'title\', \'author\', \'year\']: raise ValueError(\\"Invalid attribute\\") return sorted(self.books, key=lambda book: getattr(book, attribute))"},{"question":"You have been tasked with creating a utility function for a sports league management system. The function should automatically schedule matches between all teams in a round-robin fashion so that each team plays against every other team exactly once. Given a list of team names as input, return a list of tuples representing each match. Each tuple should contain two elements: the names of the two teams playing against each other. For example, if you have three teams `A`, `B`, and `C`, the output should be `[(\'A\', \'B\'), (\'A\', \'C\'), (\'B\', \'C\')]`. Requirements: - Your function should be named `schedule_matches`. - It should accept a single list of strings as input. - It should return a list of tuples, with each tuple containing two strings. Write the `schedule_matches` function as described above. Here is the starting point of your code: ```python def schedule_matches(teams): # Your code here ``` Examples: ```python # Example 1 teams = [\\"A\\", \\"B\\", \\"C\\"] print(schedule_matches(teams)) # Output: [(\'A\', \'B\'), (\'A\', \'C\'), (\'B\', \'C\')] # Example 2 teams = [\\"X\\", \\"Y\\"] print(schedule_matches(teams)) # Output: [(\'X\', \'Y\')] ```","solution":"def schedule_matches(teams): Given a list of team names, returns a list of tuples representing each match. Each tuple contains two elements: the names of the two teams playing against each other. matches = [] n = len(teams) for i in range(n): for j in range(i + 1, n): matches.append((teams[i], teams[j])) return matches"},{"question":"You are given a text file named `crime_data.txt` containing information about reported crimes in a city. Each line in the file provides details of a single crime incident formatted as \\"CrimeType,Location,Date\\". The objective is to analyze the frequency of each type of crime and determine the most common crime type. Additionally, you should visualize the frequency of crime types using a bar chart. Your task is to write a function named `plot_crime_type_frequency` that reads the text file, calculates the frequency of each type of crime, and generates a bar chart showing the frequency of different crime types. Use the `matplotlib.pyplot.bar` function for visualization. # Function Signature ```python def plot_crime_type_frequency(file_path: str): pass ``` # Input - `file_path` (str): The path to the text file (`crime_data.txt`). # Output - The function should not return anything. It should display a bar chart with: - Crime types along the x-axis. - Frequencies along the y-axis. - A title \\"Crime Type Frequency\\" centered at the top of the chart. # Instructions 1. Read the data from the text file. 2. Parse each line to extract the crime type. 3. Calculate the frequency of each type of crime. 4. Plot the frequencies using `matplotlib`. 5. Add a title to the plot using `matplotlib.pyplot.title`. The title should be \\"Crime Type Frequency\\" and should be centered. Here\'s an example of how the text file content might look: ``` Theft,Downtown,2023-05-01 Assault,Suburb,2023-05-02 Burglary,Suburb,2023-05-03 ... (more lines) ```","solution":"import matplotlib.pyplot as plt from collections import Counter def plot_crime_type_frequency(file_path: str): Reads the text file at `file_path`, calculates the frequency of each type of crime, and generates a bar chart showing the frequency of different crime types. Parameters: - file_path (str): The path to the text file containing the crime data. crime_counter = Counter() with open(file_path, \'r\') as file: for line in file: crime_type = line.strip().split(\',\')[0] crime_counter[crime_type] += 1 crime_types = list(crime_counter.keys()) frequencies = list(crime_counter.values()) plt.figure(figsize=(10, 6)) plt.bar(crime_types, frequencies, color=\'skyblue\') plt.xlabel(\'Crime Type\') plt.ylabel(\'Frequency\') plt.title(\'Crime Type Frequency\') plt.xticks(rotation=45, ha=\'right\') plt.tight_layout() plt.show()"},{"question":"In this problem, you are required to write a function named `calculate_area` that computes the area of various geometric shapes. The function should accept a dictionary as its parameter. This dictionary will contain two keys: `shape` and `dimensions`. The value of the `shape` key will be a string that specifies the type of shape (\\"circle\\", \\"rectangle\\", or \\"triangle\\"). The value of the `dimensions` key will be a list that provides the necessary dimensions for calculating the shape\'s area: 1. **Circle**: The list contains one value representing the radius. 2. **Rectangle**: The list contains two values representing the width and height. 3. **Triangle**: The list contains two values representing the base and the height. The function should compute the area of the shape based on the given dimensions and return the area as a float. If the dictionary does not conform to the expected structure, or if the `shape` key contains an unsupported shape type, the function should return `None`. You are required to implement exception handling to manage any potential errors in accessing dictionary values or performing calculations. The function signature should be as follows: ```python def calculate_area(shape_info: dict) -> Optional[float]: ``` Here are some example usages and their expected outputs: ```python assert calculate_area({\\"shape\\": \\"circle\\", \\"dimensions\\": [3]}) == 28.274333882308138 assert calculate_area({\\"shape\\": \\"rectangle\\", \\"dimensions\\": [4, 5]}) == 20.0 assert calculate_area({\\"shape\\": \\"triangle\\", \\"dimensions\\": [3, 4]}) == 6.0 assert calculate_area({\\"shape\\": \\"square\\", \\"dimensions\\": [2, 2]}) is None assert calculate_area({\\"shape\\": \\"rectangle\\", \\"dimensions\\": [4]}) is None ```","solution":"from typing import Optional, Dict import math def calculate_area(shape_info: Dict[str, list]) -> Optional[float]: Calculates the area of a given shape based on the provided dimensions. Parameters: shape_info (dict): A dictionary with \'shape\' and \'dimensions\' keys. Returns: Optional[float]: The area of the shape or None if input is invalid. try: shape = shape_info[\'shape\'] dimensions = shape_info[\'dimensions\'] if shape == \'circle\' and len(dimensions) == 1: radius = dimensions[0] return math.pi * radius * radius elif shape == \'rectangle\' and len(dimensions) == 2: width, height = dimensions return width * height elif shape == \'triangle\' and len(dimensions) == 2: base, height = dimensions return 0.5 * base * height else: return None except (KeyError, TypeError, ValueError): return None"},{"question":"In this task, you will explore the implementation of a caching mechanism to optimize the performance of repetitive function calls. Your job is to write a class named `LRUCache` implementing a Least Recently Used (LRU) cache mechanism. The cache should have a fixed size, and it should evict the least recently used item when it reaches its capacity. # Requirements: 1. **Class Name**: `LRUCache` 2. **Methods**: - `__init__(self, capacity: int)`: Initialize the LRU cache with a given capacity. - `get(self, key: int) -> int`: Return the value of the key if the key is present in the cache. Otherwise, return -1. - `put(self, key: int, value: int) -> None`: Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the cache reaches its capacity, evict the least recently used item before inserting the new item. # Constraints: - You must implement the cache using a combination of a dictionary and a double-linked list. - All operations (`get` and `put`) must have an average time complexity of O(1). # Example: ```python # Example usage: cache = LRUCache(2) cache.put(1, 1) # Cache is {1=1} cache.put(2, 2) # Cache is {1=1, 2=2} print(cache.get(1)) # returns 1 cache.put(3, 3) # Evicts key 2, Cache is {1=1, 3=3} print(cache.get(2)) # returns -1 (not found) cache.put(4, 4) # Evicts key 1, Cache is {4=4, 3=3} print(cache.get(1)) # returns -1 (not found) print(cache.get(3)) # returns 3 print(cache.get(4)) # returns 4 ``` # Notes: - Consider using `collections.OrderedDict` in Python to maintain the order of insertion and update the usage pattern efficiently. - You must handle edge cases such as accessing and updating an empty cache, or updating values for keys that do not exist initially. This problem will enhance your understanding of data structures and algorithms, specifically those that provide efficient data retrieval and storage with controlled memory usage using the LRU caching strategy.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"**Context:** Data structures form the backbone of efficient algorithm design, allowing the organization and management of large amounts of data. One fundamental data structure is the binary search tree (BST), which supports efficient insertion, deletion, and lookup operations. **Problem Statement:** You need to implement a function named `find_kth_smallest_element(root: TreeNode, k: int) -> int` that finds the k-th smallest element in a given Binary Search Tree (BST). **Requirements:** The function should follow these steps: 1. Implement an in-order traversal to ensure the nodes are visited in ascending order. 2. Utilize a counter to keep track of the number of nodes visited. 3. Once the counter equals k, return the value of the current node. **TreeNode Class Definition:** ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` **Function Signature:** ```python def find_kth_smallest_element(root: TreeNode, k: int) -> int: pass ``` **Example:** Given a BST: ``` 5 / 3 6 / 2 4 / 1 ``` Input: ```python root = TreeNode(5) root.left = TreeNode(3) root.right = TreeNode(6) root.left.left = TreeNode(2) root.left.right = TreeNode(4) root.left.left.left = TreeNode(1) k = 3 ``` Output: ```python 3 ``` **Explanation:** The elements in the BST in ascending order are [1, 2, 3, 4, 5, 6]. The 3rd smallest element is 3.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def find_kth_smallest_element(root: TreeNode, k: int) -> int: def in_order_traversal(node: TreeNode): if node is not None: yield from in_order_traversal(node.left) yield node.val yield from in_order_traversal(node.right) generator = in_order_traversal(root) for _ in range(k - 1): next(generator) return next(generator)"},{"question":"Create a function that simulates the propagation of heat in a 2D grid over time, given certain initial conditions and the thermal diffusion coefficient. The goal is to visualize how the heat spreads across the grid using Matplotlib. Here\'s what you need to do: 1. Define a function `animate_heat_propagation(initial_grid, alpha, dt, steps, fps=30.0)` that takes in the following parameters: - `initial_grid`: A 2D NumPy array representing the initial temperature distribution across the grid. - `alpha`: The thermal diffusion coefficient (a positive float). - `dt`: The time step between each update. - `steps`: The number of time steps to simulate. - `fps`: Frames per second for the animation (default is 30.0). 2. The function should update the temperature distribution in the grid over time using the finite difference method for the heat equation: [ frac{partial u}{partial t} = alpha left( frac{partial^2 u}{partial x^2} + frac{partial^2 u}{partial y^2} right) ] 3. Use the `matplotlib.pyplot.figure()` function to create a new figure for the animation. 4. Ensure the animation updates properly to show the heat distribution changing over time. 5. Loop over the time steps, updating the temperature grid at each step, and update the figure to visualize the heat propagation. **Note:** You need to implement a helper function `update_temperature(grid, alpha, dt)` that updates the grid using the finite difference method. **Helper Function:** ```python import numpy as np def update_temperature(grid, alpha, dt): new_grid = grid.copy() for i in range(1, grid.shape[0] - 1): for j in range(1, grid.shape[1] - 1): new_grid[i, j] = grid[i, j] + alpha * dt * ( (grid[i+1, j] - 2*grid[i, j] + grid[i-1, j]) / (1.0**2) + (grid[i, j+1] - 2*grid[i, j] + grid[i, j-1]) / (1.0**2) ) return new_grid ``` **Example Usage:** ```python import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation # Example initial grid data initial_grid = np.zeros((10, 10)) initial_grid[4:6, 4:6] = 100 # Initial heat source alpha = 0.1 dt = 0.1 steps = 100 def animate_heat_propagation(initial_grid, alpha, dt, steps, fps=30.0): fig, ax = plt.subplots() im = ax.imshow(initial_grid, cmap=\'hot\', interpolation=\'nearest\') def update(frame): global grid grid = update_temperature(grid, alpha, dt) im.set_array(grid) return [im] global grid grid = initial_grid.copy() ani = FuncAnimation(fig, update, frames=steps, blit=True, interval=1000/fps) plt.show() animate_heat_propagation(initial_grid, alpha, dt, steps) ```","solution":"import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation def update_temperature(grid, alpha, dt): new_grid = grid.copy() for i in range(1, grid.shape[0] - 1): for j in range(1, grid.shape[1] - 1): new_grid[i, j] = grid[i, j] + alpha * dt * ( (grid[i+1, j] - 2*grid[i, j] + grid[i-1, j]) + (grid[i, j+1] - 2*grid[i, j] + grid[i, j-1]) ) return new_grid def animate_heat_propagation(initial_grid, alpha, dt, steps, fps=30.0): fig, ax = plt.subplots() im = ax.imshow(initial_grid, cmap=\'hot\', interpolation=\'nearest\', animated=True) def update(frame): nonlocal grid grid = update_temperature(grid, alpha, dt) im.set_array(grid) return [im] grid = initial_grid.copy() ani = FuncAnimation(fig, update, frames=range(steps), blit=True, interval=1000/fps) plt.show()"},{"question":"You are tasked with writing a function `calendar_event_details` that takes two arguments: an `event_id` string and an `api_key` string. The function should query the Google Calendar API to fetch details about the specified event using the event ID and return those details in a dictionary. Use the `requests` library to send an HTTP GET request to the Google Calendar API and the `json` library to parse the JSON response. The URL to query the Google Calendar API is: ``` https://www.googleapis.com/calendar/v3/calendars/primary/events/{eventId}?key={apiKey} ``` Where `{eventId}` should be replaced with the `event_id` argument and `{apiKey}` replaced with the `api_key` argument. Your function should return a dictionary with the following keys: - `\\"summary\\"`: The summary or title of the event. - `\\"description\\"`: The description of the event. - `\\"location\\"`: The location of the event. - `\\"start_time\\"`: The start time of the event in RFC3339 format. - `\\"end_time\\"`: The end time of the event in RFC3339 format. - `\\"attendees\\"`: A list of email addresses of the attendees. If any of these fields are not available in the JSON response, the corresponding key should have a value of `None`. Your task: Implement the `calendar_event_details` function.","solution":"import requests import json def calendar_event_details(event_id, api_key): Fetch details of a Google Calendar event and return them as a dictionary. Args: - event_id (str): The event ID. - api_key (str): The API key for accessing Google Calendar API. Returns: - dict: A dictionary containing event details. url = f\\"https://www.googleapis.com/calendar/v3/calendars/primary/events/{event_id}?key={api_key}\\" response = requests.get(url) if response.status_code != 200: raise Exception(\\"Failed to fetch event details\\") event_data = response.json() event_details = { \\"summary\\": event_data.get(\\"summary\\", None), \\"description\\": event_data.get(\\"description\\", None), \\"location\\": event_data.get(\\"location\\", None), \\"start_time\\": event_data.get(\\"start\\", {}).get(\\"dateTime\\", None), \\"end_time\\": event_data.get(\\"end\\", {}).get(\\"dateTime\\", None), \\"attendees\\": [attendee[\\"email\\"] for attendee in event_data.get(\\"attendees\\", []) if \\"email\\" in attendee] } return event_details"},{"question":"In this problem, you are asked to work with an airline\'s flight data to help analyze the on-time performance of the flights. The dataset includes information such as flight number, airline, origin, destination, departure time, and arrival time. Your task is to **write a function `analyze_flight_data(FLIGHT_FILE)` that processes this dataset** and prints specific statistical measures, leveraging the Python `datetime` module and the `statistics` library. The function should follow these steps: 1. **Read the CSV File**: Similar to the previous problem, ensure the dataset is read without using the `csv` library directly. 2. **Convert Data to Appropriate Types**: Ensure that the departure and arrival times are converted to `datetime` objects to perform time calculations. 3. **Calculate and Print**: - Total number of flights in the dataset. - Count of flights for each airline. - Mean flight duration (in minutes) using both the `statistics.mean` method and a custom mean function. - Mean flight duration (in minutes) for flights originating from \'JFK\' airport (using both the `statistics.mean` method and a custom mean function). - Median departure time (using both the `statistics.median` method and a custom median function). - Median arrival time for flights destined to \'LAX\' airport (using both the `statistics.median` method and a custom median function). Required Function and its Behavior: - **Function Name**: `analyze_flight_data` - **Argument**: `FLIGHT_FILE` - The file path to the flight dataset (in CSV format). - **Output**: The function should print the specified statistical information. # **Example**: Suppose the dataset (`FLIGHT_FILE`) contains the following entries: ``` flight_number,airline,origin,destination,departure_time,arrival_time 101,Delta,ATL,JFK,2023-10-01 05:30:00,2023-10-01 08:30:00 202,United,JFK,LAX,2023-10-01 06:00:00,2023-10-01 09:00:00 ... 303,American,JFK,LAX,2023-10-01 07:00:00,2023-10-01 10:30:00 ``` The function would process these entries and output the following statistics: ``` Total number of flights: 300 Flights by airline: {\'Delta\': 100, \'United\': 100, \'American\': 100} Mean flight duration (statistics): <calculated_value> Mean flight duration (custom): <calculated_value> Mean flight duration (JFK, statistics): <calculated_value> Mean flight duration (JFK, custom): <calculated_value> Median departure time (statistics): <calculated_value> Median departure time (custom): <calculated_value> Median arrival time (LAX, statistics): <calculated_value> Median arrival time (LAX, custom): <calculated_value> ``` # **Constraints**: - Use the Python `datetime` module to handle time-related calculations. - Use the `statistics` library functions: `mean`, `median`, `mode` where appropriate. - Ensure proper data parsing and type conversion for accurate calculations.","solution":"import csv from datetime import datetime import statistics def custom_mean(data): return sum(data) / len(data) def custom_median(data): sorted_data = sorted(data) n = len(data) if n % 2 == 0: return (sorted_data[n//2 - 1] + sorted_data[n//2]) / 2 else: return sorted_data[n//2] def analyze_flight_data(FLIGHT_FILE): with open(FLIGHT_FILE, \'r\') as file: lines = file.readlines() flights = [] for line in lines[1:]: flight_number, airline, origin, destination, departure_time, arrival_time = line.strip().split(\',\') departure_time = datetime.strptime(departure_time, \'%Y-%m-%d %H:%M:%S\') arrival_time = datetime.strptime(arrival_time, \'%Y-%m-%d %H:%M:%S\') flights.append((flight_number, airline, origin, destination, departure_time, arrival_time)) total_flights = len(flights) print(f\\"Total number of flights: {total_flights}\\") airline_count = {} for _, airline, _, _, _, _ in flights: if airline in airline_count: airline_count[airline] += 1 else: airline_count[airline] = 1 print(f\\"Flights by airline: {airline_count}\\") durations = [(arrival_time - departure_time).total_seconds() / 60 for _, _, _, _, departure_time, arrival_time in flights] mean_duration_stat = statistics.mean(durations) mean_duration_custom = custom_mean(durations) print(f\\"Mean flight duration (statistics): {mean_duration_stat}\\") print(f\\"Mean flight duration (custom): {mean_duration_custom}\\") jfk_durations = [(arrival_time - departure_time).total_seconds() / 60 for _, _, origin, _, departure_time, arrival_time in flights if origin == \'JFK\'] mean_jfk_duration_stat = statistics.mean(jfk_durations) mean_jfk_duration_custom = custom_mean(jfk_durations) print(f\\"Mean flight duration (JFK, statistics): {mean_jfk_duration_stat}\\") print(f\\"Mean flight duration (JFK, custom): {mean_jfk_duration_custom}\\") departure_times = [departure_time for _, _, _, _, departure_time, _ in flights] median_departure_time_stat = statistics.median(departure_times) median_departure_time_custom = datetime.fromtimestamp(custom_median([dt.timestamp() for dt in departure_times])) print(f\\"Median departure time (statistics): {median_departure_time_stat}\\") print(f\\"Median departure time (custom): {median_departure_time_custom}\\") lax_arrival_times = [arrival_time for _, _, _, destination, _, arrival_time in flights if destination == \'LAX\'] median_lax_arrival_time_stat = statistics.median(lax_arrival_times) median_lax_arrival_time_custom = datetime.fromtimestamp(custom_median([at.timestamp() for at in lax_arrival_times])) print(f\\"Median arrival time (LAX, statistics): {median_lax_arrival_time_stat}\\") print(f\\"Median arrival time (LAX, custom): {median_lax_arrival_time_custom}\\")"},{"question":"**Objective**: Write a function `generate_maze(n, m, start, end)` that generates and visualizes a maze using the depth-first search algorithm. This function takes in four arguments: 1. `n`: The number of rows in the maze. 2. `m`: The number of columns in the maze. 3. `start`: A tuple `(x, y)` representing the starting cell coordinates. 4. `end`: A tuple `(x, y)` representing the ending cell coordinates. **Requirements**: 1. Use the depth-first search algorithm to create a perfect maze. 2. Utilize the `matplotlib.figure.Figure` to visualize the maze. 3. The maze should have only one unique path between any two cells. 4. Ensure the visualization illustrates the start and end points clearly. **Instructions**: 1. Initialize the maze with all walls present. 2. Randomly pick a cell (starting point) and start carving passages to neighboring cells. 3. If a neighbor has not been visited, carve a passage and recursively apply the depth-first search. 4. Stop when there are no more unvisited neighboring cells. 5. Visualize the maze using `matplotlib`, marking the start cell and end cell distinctly. The function should output a matplotlib figure that visually represents the generated maze from the start to the end coordinate. # Example ```python import matplotlib.pyplot as plt import numpy as np def generate_maze(n, m, start, end): def carve_passages_from(cx, cy, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] np.random.shuffle(directions) for direction in directions: nx, ny = cx + direction[0], cy + direction[1] if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 1: grid[cx][cy] = 0 grid[nx][ny] = 0 carve_passages_from(nx, ny, grid) grid = np.ones((n, m), dtype=int) carve_passages_from(start[0], start[1], grid) fig, ax = plt.subplots(figsize=(10, 10)) ax.imshow(grid, cmap=plt.cm.binary) ax.scatter([start[1]], [start[0]], color=\'blue\', s=100, label=\'Start\') ax.scatter([end[1]], [end[0]], color=\'red\', s=100, label=\'End\') ax.legend() plt.show() # Example usage: n = 10 m = 10 start = (0, 0) end = (9, 9) generate_maze(n, m, start, end) ``` This should generate and display a maze of size 10x10, with the start point at the top-left corner and the end point at the bottom-right corner.","solution":"import matplotlib.pyplot as plt import numpy as np def generate_maze(n, m, start, end): def carve_passages_from(cx, cy, grid, visited): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] np.random.shuffle(directions) for direction in directions: nx, ny = cx + direction[0], cy + direction[1] if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: grid[cx][cy] = 0 grid[nx][ny] = 0 visited[nx][ny] = True carve_passages_from(nx, ny, grid, visited) grid = np.ones((n, m), dtype=int) visited = np.zeros((n, m), dtype=bool) visited[start[0]][start[1]] = True carve_passages_from(start[0], start[1], grid, visited) grid[start[0]][start[1]] = 0 grid[end[0]][end[1]] = 0 fig, ax = plt.subplots(figsize=(10, 10)) ax.imshow(grid, cmap=plt.cm.binary, interpolation=\'none\') ax.scatter([start[1]], [start[0]], color=\'blue\', s=100, label=\'Start\') ax.scatter([end[1]], [end[0]], color=\'red\', s=100, label=\'End\') ax.legend() plt.show() # Example usage: n = 10 m = 10 start = (0, 0) end = (9, 9) generate_maze(n, m, start, end)"},{"question":"You are given a list of tasks to be performed by a single processor. Each task has a specific execution time and a deadline by which it should be completed. Your objective is to write a function that schedules these tasks optimally to minimize the total lateness. The lateness of a task is defined as the difference between its completion time and its deadline, but it is considered to be zero if the task is completed before its deadline. Your task is to implement the function `schedule_tasks` using Python. The function should be defined as: ```python def schedule_tasks(tasks): Schedules tasks to minimize total lateness. Parameters: - tasks: A list of tuples, where each tuple contains two integers: - execution_time: The time required to complete the task. - deadline: The deadline by which the task should be completed. Returns: - scheduled_tasks: A list of tuples representing the order of tasks to be executed, minimizing total lateness. ``` **Function Requirements:** 1. Sort the tasks based on the earliest deadline first (EDF) principle. 2. Implement the scheduling in such a way that the cumulative execution time is tracked, and tasks are added in the order that minimizes lateness. **Context:** - You are given a list of tasks with their respective execution times and deadlines. - The goal is to order the tasks to minimize how late the tasks are finished beyond their deadlines. - It is possible that some tasks might not be completed within their deadlines, but the function should aim to minimize the total lateness. Implement this function to effectively schedule the tasks and minimize the total lateness.","solution":"def schedule_tasks(tasks): Schedules tasks to minimize total lateness. Parameters: - tasks: A list of tuples, where each tuple contains two integers: - execution_time: The time required to complete the task. - deadline: The deadline by which the task should be completed. Returns: - scheduled_tasks: A list of tuples representing the order of tasks to be executed, minimizing total lateness. # Sort tasks by their deadline tasks_sorted = sorted(tasks, key=lambda x: x[1]) return tasks_sorted"},{"question":"**Objective:** Your task is to implement a function called `matrix_multiplication` that takes two 2D matrices as input and returns their product using NumPy. **Context:** Matrix multiplication is a fundamental operation in many computational applications, including graphics, machine learning, and scientific simulations. In matrix multiplication, the element at position (i, j) in the resulting matrix is computed as the dot product of the i-th row from the first matrix and the j-th column from the second matrix. **Function Signature:** ```python def matrix_multiplication(A: np.ndarray, B: np.ndarray) -> np.ndarray: Compute the product of two 2D matrices A and B. Parameters: A (np.ndarray): First input matrix. B (np.ndarray): Second input matrix. Returns: np.ndarray: The product of matrix A and matrix B. ``` **Requirements:** - Utilize the `numpy.dot` or `numpy.matmul` function as specified in the Python Library Documentation to perform the matrix multiplication. - Ensure that your function raises an appropriate error if the matrices cannot be multiplied due to dimension mismatch. **Input:** - Two NumPy 2D arrays `A` and `B`, representing the matrices to be multiplied. **Output:** - A NumPy 2D array that is the product of matrices `A` and `B`. **Examples:** ```python import numpy as np # Example 1 A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) print(matrix_multiplication(A, B)) # Output: array([[19, 22], # [43, 50]]) # Example 2 A = np.array([[1, 2, 3], [4, 5, 6]]) B = np.array([[7, 8], [9, 10], [11, 12]]) print(matrix_multiplication(A, B)) # Output: array([[ 58, 64], # [139, 154]]) ```","solution":"import numpy as np def matrix_multiplication(A: np.ndarray, B: np.ndarray) -> np.ndarray: Compute the product of two 2D matrices A and B. Parameters: A (np.ndarray): First input matrix. B (np.ndarray): Second input matrix. Returns: np.ndarray: The product of matrix A and matrix B. Raises: ValueError: If the number of columns in A is not equal to the number of rows in B. if A.shape[1] != B.shape[0]: raise ValueError(\\"Number of columns in A must be equal to number of rows in B for matrix multiplication.\\") return np.matmul(A, B)"},{"question":"You are to create a function named `merge_sorted_arrays` that takes two input lists, `arr1` and `arr2`, each containing integers sorted in non-decreasing order. The function should merge the two lists into a single list, which should also be sorted in non-decreasing order. You are not allowed to use any built-in sorting functions. The function signature should be: ```python def merge_sorted_arrays(arr1: list, arr2: list) -> list: ``` Here are the specifics of the task: 1. You should traverse both input lists and repeatedly pick the smaller element to add to the merged list. 2. If one of the lists is exhausted, add the remaining elements from the other list to the merged list. **Example Usages:** ```python merge_sorted_arrays([1, 3, 5], [2, 4, 6]) # Should return [1, 2, 3, 4, 5, 6] merge_sorted_arrays([0, 2, 8], [1, 7, 9]) # Should return [0, 1, 2, 7, 8, 9] merge_sorted_arrays([], [1, 2, 3]) # Should return [1, 2, 3] merge_sorted_arrays([1, 2, 3], []) # Should return [1, 2, 3] ```","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted lists into one sorted list. Parameters: arr1 (list): A sorted list of integers. arr2 (list): Another sorted list of integers. Returns: list: A merged sorted list containing all elements from arr1 and arr2. merged_array = [] i = 0 j = 0 # Traverse both arrays and insert smaller element from arr1 or arr2 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1, add them to merged_array while i < len(arr1): merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2, add them to merged_array while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are required to write a Python function named `invert_matrix` that takes a single parameter: 1. `matrix` (List[List[float]]): A 2D list representing a square matrix of floating point numbers. The goal of the function is to compute the inverse of the given matrix. If the matrix is not invertible (i.e., it has no inverse), the function should return `None`. You should ensure that the function can handle matrices of varying sizes as long as they are square (i.e., same number of rows and columns). **Function Signature:** ```python def invert_matrix(matrix: List[List[float]]) -> Optional[List[List[float]]]: pass ``` **Requirements:** - Use the NumPy library to perform matrix inversion. - Make sure to handle cases where the matrix is not invertible by returning `None`. - Ensure the input matrix is a square matrix. **Example Usages:** ```python matrix = [ [4.0, 7.0], [2.0, 6.0] ] inverted = invert_matrix(matrix) # Inverted should be: # [ # [0.6, -0.7], # [-0.2, 0.4] # ] matrix_non_invertible = [ [1.0, 2.0], [2.0, 4.0] ] inverted_non_invertible = invert_matrix(matrix_non_invertible) # Because this matrix is not invertible (determinant is zero), # the result should be None. ``` Consider edge cases such as a 1x1 matrix, a matrix with very small (close to zero) or very large values, and non-square matrices. Note that this function should only handle cases where the input is a valid square matrix. Non-square matrices or improperly formatted input should raise an appropriate error.","solution":"from typing import List, Optional def invert_matrix(matrix: List[List[float]]) -> Optional[List[List[float]]]: import numpy as np try: np_matrix = np.array(matrix) if np_matrix.shape[0] != np_matrix.shape[1]: raise ValueError(\\"The input matrix is not square.\\") inverse_matrix = np.linalg.inv(np_matrix) return inverse_matrix.tolist() except np.linalg.LinAlgError: # This exception is raised when the matrix is not invertible return None except ValueError as e: print(e) return None"},{"question":"**You are required to write a Python function `find_longest_word` that finds the longest word in a given sentence. The function should ignore any punctuation marks and consider words to be sequences of alphabetic characters only. Here are the requirements for the `find_longest_word` function: - It should take one argument: a sentence (a string). - The sentence may contain alphabetic characters, spaces, and basic punctuation (e.g., periods, commas, exclamation marks, question marks, etc.). - The function should return the longest word in the sentence. If there are multiple words with the same length, return the first one that appears. - Ignore punctuation marks while considering words. - Ensure that the function handles edge cases, such as an empty string or a string with no alphabetic characters. Use the following template to get started: ```python import re def find_longest_word(sentence): # Your implementation here ``` Example: ```python print(find_longest_word(\\"Hello, world!\\")) # Output: \\"Hello\\" print(find_longest_word(\\"A quick brown fox jumps over the lazy dog.\\")) # Output: \\"jumps\\" print(find_longest_word(\\"...!\\")) # Output: \\"\\" ```**","solution":"import re def find_longest_word(sentence): Finds the longest word in the given sentence. Ignores punctuation. Parameters: sentence (str): The input sentence Returns: str: The longest word in the sentence. # Remove punctuation using regex and split the sentence into words words = re.findall(r\'bw+b\', sentence) if not words: return \\"\\" # Find the longest word longest_word = max(words, key=len) return longest_word"},{"question":"Develop a function called `average_temperature(data)` that takes a list of dictionaries `data` as input and calculates the average temperature for each city. Each dictionary in the list represents temperature data for a specific day and contains two keys: \\"City\\" and \\"Temperature\\". To compute the average temperature for each city, you should first aggregate the temperature readings by city, then calculate the average for each city and return the results as a dictionary. The output dictionary should have the city names as keys and their corresponding average temperatures as values. Here is an example list of dictionaries that could be used as input: ``` data = [ {\'City\': \'Austin\', \'Temperature\': 75}, {\'City\': \'Austin\', \'Temperature\': 80}, {\'City\': \'Dallas\', \'Temperature\': 77}, {\'City\': \'Dallas\', \'Temperature\': 79}, {\'City\': \'Austin\', \'Temperature\': 74}, {\'City\': \'Dallas\', \'Temperature\': 81} ] ``` The `average_temperature(data)` function should process the input and generate a dictionary like this: ``` {\'Austin\': 76.33333333333333, \'Dallas\': 79.0} ``` Write the `average_temperature(data)` function to achieve this result.","solution":"def average_temperature(data): This function takes a list of dictionaries containing temperature data per city and returns a dictionary with the average temperature for each city. temp_sum = {} temp_count = {} for entry in data: city = entry[\\"City\\"] temperature = entry[\\"Temperature\\"] if city in temp_sum: temp_sum[city] += temperature temp_count[city] += 1 else: temp_sum[city] = temperature temp_count[city] = 1 average_temp = {} for city in temp_sum: average_temp[city] = temp_sum[city] / temp_count[city] return average_temp"},{"question":"You are tasked to write a function that calculates the factorial of a given positive integer using iterative approach. The factorial of a number is the product of all positive integers up to that number. For instance, the factorial of 5 is `5*4*3*2*1 = 120`. # Function Requirements: * **Function Name**: `iterative_factorial` * **Arguments**: `n: int` * **Return Type**: `int` # Function Description: 1. **iterative_factorial(n: int) -> int**: This function should compute the factorial of the input integer `n` using an iterative approach and return the result. # Detailed Instructions: - Initialize a variable to store the factorial result (start with value 1). - Use a loop to multiply the values from `1` to `n` in descending order and update the factorial result. - Return the final computed factorial value. - If the input `n` is 0, by definition, its factorial is 1. # Example: ```python >>> print(iterative_factorial(5)) 120 >>> print(iterative_factorial(0)) 1 ``` # Notes: - Ensure the function handles simple cases like `iterative_factorial(1)` and `iterative_factorial(0)` correctly. - The iterative approach should not make use of recursion or any additional libraries.","solution":"def iterative_factorial(n): Returns the factorial of the given positive integer `n` using an iterative approach. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"You are required to write a function `analyze_temperature_data` that takes in two parameters: `dates` and `temperatures`. `dates` is a list of strings representing dates in the format \\"YYYY-MM-DD\\", and `temperatures` is a list of integers representing the corresponding temperature readings for each date. The function should: 1. Calculate and return the average temperature over the given period. 2. Identify and return the date with the highest temperature and the date with the lowest temperature. 3. Generate a line plot using `matplotlib.pyplot.plot` to visualize the temperature trends over time. The x-axis should represent the dates and the y-axis should represent the temperatures. 4. Ensure the plot is clearly labeled, with the x-axis labeled as \\"Date\\" and the y-axis labeled as \\"Temperature (°C)\\". 5. Display the plot with a proper title. The goal of this task is to help you become familiar with handling date-time data and plotting time-series data using the `matplotlib` library. **Function Signature:** ```python def analyze_temperature_data(dates, temperatures): pass ``` **Example:** ```python dates = [\\"2023-01-01\\", \\"2023-01-02\\", \\"2023-01-03\\", \\"2023-01-04\\", \\"2023-01-05\\"] temperatures = [5, 6, 8, 7, 6] average_temperature, highest_temp_date, lowest_temp_date = analyze_temperature_data(dates, temperatures) print(\\"Average Temperature:\\", average_temperature) print(\\"Date with Highest Temperature:\\", highest_temp_date) print(\\"Date with Lowest Temperature:\\", lowest_temp_date) ``` In the example above, you should: 1. Calculate and return that the average temperature is 6.4. 2. Identify and return that the highest temperature of 8°C occurred on \\"2023-01-03\\" and the lowest temperature of 5°C occurred on \\"2023-01-01\\". 3. Generate and display a line plot showing the temperature trend over the given dates.","solution":"import matplotlib.pyplot as plt def analyze_temperature_data(dates, temperatures): Analyzes temperature data to calculate average temperature, find dates with highest and lowest temperatures, and plot the temperature trends over time. Parameters: dates (list of str): Dates in \\"YYYY-MM-DD\\" format. temperatures (list of int): Corresponding temperatures for each date. Returns: float: Average temperature. str: Date with highest temperature. str: Date with lowest temperature. if not dates or not temperatures or len(dates) != len(temperatures): raise ValueError(\\"Invalid input data. Dates and temperatures must be non-empty and of the same length.\\") average_temperature = sum(temperatures) / len(temperatures) max_temperature = max(temperatures) min_temperature = min(temperatures) highest_temp_date = dates[temperatures.index(max_temperature)] lowest_temp_date = dates[temperatures.index(min_temperature)] plt.plot(dates, temperatures, marker=\'o\') plt.xlabel(\'Date\') plt.ylabel(\'Temperature (°C)\') plt.title(\'Temperature Trends Over Time\') plt.grid(True) plt.xticks(rotation=45, ha=\'right\') plt.tight_layout() plt.show() return average_temperature, highest_temp_date, lowest_temp_date"},{"question":"You are required to implement a function named `balance_tracks` that helps in distributing songs into two playlists as evenly as possible based on their durations. Each playlist should have a total duration that is as close as possible to the other. Given the following parameters: - `songs`: A list of tuples, where each tuple contains two elements: the song name (a string) and its duration in seconds (an integer). The function should return a tuple containing two lists of songs, each list representing a playlist. **Function Signature** ```python def balance_tracks(songs: list) -> tuple: pass ``` **Objective:** - Distribute songs into two playlists such that the total duration of songs in each playlist is as balanced as possible. **Requirements:** - The function must return two lists of song names, each list representing a playlist. - Ensure that the difference in total duration between the two playlists is minimized. **Example:** ```python songs = [(\\"Song A\\", 300), (\\"Song B\\", 200), (\\"Song C\\", 150), (\\"Song D\\", 200)] playlist1, playlist2 = balance_tracks(songs) # Possible Output: # playlist1 = [\\"Song A\\", \\"Song D\\"] # playlist2 = [\\"Song B\\", \\"Song C\\"] ``` In this example, one possible distribution of songs would result in playlist1 having a total duration of 500 seconds and playlist2 having a total duration of 350 seconds, thereby balancing the total durations as closely as possible.","solution":"def balance_tracks(songs): Distributes songs into two playlists such that total durations are as balanced as possible. :param songs: List of tuples, where each tuple contains the song name as a string, and its duration as an integer in seconds. :return: Tuple containing two lists of song names, each list representing a playlist. # Sort songs by duration in descending order sorted_songs = sorted(songs, key=lambda x: x[1], reverse=True) playlist1 = [] playlist2 = [] duration1 = 0 duration2 = 0 for song in sorted_songs: name, duration = song if duration1 <= duration2: playlist1.append(name) duration1 += duration else: playlist2.append(name) duration2 += duration return (playlist1, playlist2)"},{"question":"You have been given a dataset of online retail transactions and are tasked with summarizing sales data by a specific customer and period. The dataset contains columns such as \'CustomerID\', \'InvoiceDate\', and \'SalesAmount\'. For this task, you need to write a function `summarize_sales` that uses the pandas library to load and summarize the sales data. This function should adhere to the following specifications: 1. **Function Name**: `summarize_sales` 2. **Parameters**: - `filepath` (str): Path to the CSV file containing the retail transactions data. - `customer_id` (int): ID of the customer to summarize sales for. - `start_date` (str): Start date (inclusive) of the period to summarize in \'YYYY-MM-DD\' format. - `end_date` (str): End date (inclusive) of the period to summarize in \'YYYY-MM-DD\' format. 3. **Returns**: A pandas DataFrame containing the summarized sales data for the specified customer and period. **Detailed Steps**: 1. Load the dataset from the provided `filepath`. 2. Convert the \'InvoiceDate\' column to datetime format. 3. Filter the data to include only rows where \'CustomerID\' matches the specified customer_id. 4. Filter the data to include only rows where \'InvoiceDate\' falls within the specified date range (inclusive). 5. Group the filtered data by \'InvoiceDate\' and calculate the total \'SalesAmount\' for each day. 6. Rename the columns of the resulting DataFrame to \'Date\' and \'TotalSales\'. # Example: ```python summarize_sales(\'retail_data.csv\', 12345, \'2021-01-01\', \'2021-01-31\') ``` This would load the \'retail_data.csv\' file, filter the data to include only transactions made by customer 12345 between January 1, 2021, and January 31, 2021, and return a DataFrame summarizing the total sales amount for each day in the specified period. # Constraint: - You must use the `pandas.read_csv` function from the pandas library to load the data.","solution":"import pandas as pd def summarize_sales(filepath, customer_id, start_date, end_date): Summarizes sales data for a specific customer and period. Parameters: - filepath (str): Path to the CSV file containing the retail transactions data. - customer_id (int): ID of the customer to summarize sales for. - start_date (str): Start date (inclusive) of the period to summarize in \'YYYY-MM-DD\' format. - end_date (str): End date (inclusive) of the period to summarize in \'YYYY-MM-DD\' format. Returns: - pandas.DataFrame: A DataFrame containing the summarized sales data for the specified customer and period. # Load the dataset df = pd.read_csv(filepath) # Convert \'InvoiceDate\' to datetime format df[\'InvoiceDate\'] = pd.to_datetime(df[\'InvoiceDate\']) # Filter data to include only rows where \'CustomerID\' matches the specified customer_id customer_df = df[df[\'CustomerID\'] == customer_id] # Filter data to include only rows where \'InvoiceDate\' falls within the specified date range date_filtered_df = customer_df[(customer_df[\'InvoiceDate\'] >= start_date) & (customer_df[\'InvoiceDate\'] <= end_date)] # Group the filtered data by \'InvoiceDate\' and calculate the total \'SalesAmount\' for each day summary_df = date_filtered_df.groupby(\'InvoiceDate\').agg({\'SalesAmount\': \'sum\'}).reset_index() # Rename the columns of the resulting DataFrame to \'Date\' and \'TotalSales\' summary_df.columns = [\'Date\', \'TotalSales\'] return summary_df"},{"question":"Create a function that takes a list of integers, filters out all the even numbers, and then computes the factorial of each remaining number. Finally, return a dictionary with the original odd numbers as keys and their corresponding factorials as values. The function should output with: A dictionary You should write self-contained code starting with: ``` import math def task_func(int_list): ```","solution":"import math def task_func(int_list): Takes a list of integers, filters out all the even numbers, computes the factorial of each remaining number, and returns a dictionary with the original odd numbers as keys and their corresponding factorials as values. :param int_list: List of integers :return: Dictionary with odd numbers as keys and their factorials as values result = {} for num in int_list: if num % 2 != 0: # Check if the number is odd result[num] = math.factorial(num) return result"},{"question":"You are to create a Python function `vector_dot_product(vec1, vec2)` that computes the dot product of two vectors given as lists of integers. The dot product of two vectors is defined as the sum of the products of their corresponding components. Here are the steps your function should perform: 1. Check if both input lists (`vec1` and `vec2`) have the same length. If not, return `None`. 2. If they have the same length, compute the dot product by multiplying corresponding elements and summing the results. 3. Return the computed dot product. The function signature should be: ```python def vector_dot_product(vec1, vec2): ``` You can assume that the input lists will only contain integers and may be of any non-negative length, including zero length, where the dot product should be defined as 0. For example: ```python vector_dot_product([1, 2, 3], [4, 5, 6]) # should return 32 vector_dot_product([1, 2], [1, 2, 3]) # should return None vector_dot_product([0, 0, 0], [1, 2, 3]) # should return 0 ```","solution":"def vector_dot_product(vec1, vec2): Computes the dot product of two vectors represented as lists of integers. Parameters: vec1 (list of int): The first vector. vec2 (list of int): The second vector. Returns: int: The dot product of the two vectors if they are of the same length, otherwise None. # Check if both vectors have the same length if len(vec1) != len(vec2): return None # Compute the dot product dot_product = sum(x * y for x, y in zip(vec1, vec2)) return dot_product"},{"question":"You are given a dataset in CSV format named `Global_Temperature_Change.csv`. The task is to visualize the temperature variance over time using the `matplotlib` library in Python. Create a line graph that displays the global temperature anomaly (difference from the base period average) for each year from the dataset. Write a function called `plot_temperature_anomaly` which takes the name of the CSV file as input. This function should: 1. Load the CSV data into a DataFrame. 2. Extract the columns \'Year\' and \'Temperature Anomaly\'. 3. Create a line plot with \'Year\' on the x-axis and \'Temperature Anomaly\' on the y-axis. 4. Customize the line color to be blue and the style to be dashed. 5. Add appropriate axis labels, title, and a grid for better readability. **Function Signature**: ```python def plot_temperature_anomaly(csv_file: str) -> None: pass ``` **Example Usage**: ```python plot_temperature_anomaly(\'Global_Temperature_Change.csv\') ``` **Requirements**: 1. The `pandas` library should be used to load the CSV data. 2. The `matplotlib` library should be used for creating the line plot. 3. Ensure the line plot has blue dashed lines, a title, axis labels, and a grid.","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_temperature_anomaly(csv_file: str) -> None: Given the path to a CSV file containing \'Year\' and \'Temperature Anomaly\' columns, plot the global temperature anomaly over time. Parameters: csv_file (str): The path to the CSV file. # Load the CSV data into a DataFrame. df = pd.read_csv(csv_file) # Extract the relevant columns. years = df[\'Year\'] temperature_anomalies = df[\'Temperature Anomaly\'] # Create the line plot. plt.figure(figsize=(10, 5)) plt.plot(years, temperature_anomalies, color=\'blue\', linestyle=\'--\') # Customize the plot with title, labels, and grid. plt.title(\'Global Temperature Anomaly Over Time\') plt.xlabel(\'Year\') plt.ylabel(\'Temperature Anomaly (°C)\') plt.grid(True) # Display the plot. plt.show()"},{"question":"**Objective**: Develop a function `transform_and_rotate_matrix` to transpose and rotate a given square matrix by 90 degrees clockwise using specific `numpy` library functions as described below. **Background**: In linear algebra, matrix transformations, such as transposing a matrix and rotations, are fundamental operations. These operations can be efficiently realized using functions from the `numpy` library. **Specifications**: 1. **Function Name**: `transform_and_rotate_matrix` 2. **Inputs**: - `matrix`: A 2D numpy array representing a square matrix. 3. **Outputs**: - Returns a 2D numpy array representing the transformed matrix after transposition and rotation by 90 degrees clockwise. **API Requirements**: - Use `numpy.transpose` to transpose the matrix. - Use `numpy.flip` to rotate the matrix. **Instructions**: - Transpose the input matrix. - Rotate the transposed matrix by 90 degrees clockwise. Example: ```python import numpy as np def transform_and_rotate_matrix(matrix): # Your implementation here pass # Test the function matrix = np.array([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) transformed_matrix = transform_and_rotate_matrix(matrix) print(transformed_matrix) ``` Expected output: ```python array([ [7, 4, 1], [8, 5, 2], [9, 6, 3] ]) ```","solution":"import numpy as np def transform_and_rotate_matrix(matrix): Transpose and then rotate the given square matrix by 90 degrees clockwise. Parameters: matrix (numpy.ndarray): A 2D numpy array representing a square matrix. Returns: numpy.ndarray: The transformed matrix. # Transpose the matrix transposed_matrix = np.transpose(matrix) # Rotate the transposed matrix by 90 degrees clockwise rotated_matrix = np.flip(transposed_matrix, axis=1) return rotated_matrix"},{"question":"You are required to implement a function named `verify_email_addresses()` that uses the `re` module to validate email addresses from an input list and categorize them based on their validity. # Requirements: 1. **Validate Email Addresses:** Use regular expressions to validate email addresses. An email address is considered valid if it matches the following pattern: - Starts with one or more alphanumeric characters (including dot, underscore, and hyphen). - Followed by the `@` symbol. - Followed by a domain name that consists of one or more alphanumeric characters. - Followed by a dot (`.`). - Ends with a domain extension that consists of 2 to 6 alphabetic characters. 2. **Categorize Emails:** Categorize the email addresses into two lists: - `valid_emails`: Contains all valid email addresses. - `invalid_emails`: Contains all invalid email addresses. 3. **Output the Statistics:** Return a dictionary with three keys: - `valid_count`: The number of valid email addresses. - `invalid_count`: The number of invalid email addresses. - `valid_emails`: The list of all valid email addresses. # Function Signature: ```python def verify_email_addresses(emails: list) -> dict: ``` The function should take a list of email addresses as input and return a dictionary with the count and list of valid and invalid email addresses. # Example: ```python emails = [\\"example.email@domain.com\\", \\"invalid-email@domain\\", \\"valid.email@domain.co.uk\\", \\"bad@address\\"] result = verify_email_addresses(emails) print(result) # Should print something similar to: # { # \\"valid_count\\": 2, # \\"invalid_count\\": 2, # \\"valid_emails\\": [\\"example.email@domain.com\\", \\"valid.email@domain.co.uk\\"] # } ``` Ensure that your implementation handles the validation of email addresses using regular expressions appropriately.","solution":"import re def verify_email_addresses(emails): Validates email addresses from an input list and categorizes them. Parameters: emails (list): List of email addresses to be validated. Returns: dict: Dictionary with the count and list of valid and invalid email addresses. email_pattern = re.compile(r\'^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,6}\') valid_emails = [] invalid_emails = [] for email in emails: if email_pattern.match(email): valid_emails.append(email) else: invalid_emails.append(email) return { \\"valid_count\\": len(valid_emails), \\"invalid_count\\": len(invalid_emails), \\"valid_emails\\": valid_emails }"},{"question":"Convert a given list of integers into a balanced binary search tree (BST). Each node in the BST should follow the property where the left child is less than the parent node and the right child is greater than the parent node. The function should return the root of the BST. The definition of the TreeNode class should be as follows: ``` class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` You should write self-contained code starting with: ``` from typing import List, Optional class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sortedListToBST(nums: List[int]) -> Optional[TreeNode]: ```","solution":"from typing import List, Optional class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sortedListToBST(nums: List[int]) -> Optional[TreeNode]: Converts a sorted list of integers into a balanced binary search tree (BST). def helper(left: int, right: int) -> Optional[TreeNode]: if left > right: return None # Middle element to maintain the balance mid = (left + right) // 2 node = TreeNode(nums[mid]) node.left = helper(left, mid - 1) node.right = helper(mid + 1, right) return node return helper(0, len(nums) - 1)"},{"question":"You are given a task to implement a system that handles the inventory management of a bookstore. The primary function of this system should be to add new books, update the inventory for existing books, and search for books based on different criteria. Your function should be called `manage_inventory` and take a list of operations as its input. Each operation is represented as a dictionary with a specific structure. The function should handle the following types of operations: 1. \\"add\\": Add a new book to the inventory. Each book has an ISBN, title, author, and quantity. 2. \\"update\\": Update the quantity of an existing book in the inventory based on the ISBN. 3. \\"search\\": Search for books by a given title or author. The function should return a list of books matching the search criteria. The `manage_inventory` function should: 1. Maintain an inventory of books as a list of dictionaries, where each dictionary represents a book with its attributes. 2. Handle the addition of new books, ensuring that no duplicate ISBNs are added. 3. Update the quantity of books correctly without altering other book attributes. 4. Allow for efficient searching of books based on title or author. Here is the function signature and an example input to help you get started: ```python def manage_inventory(operations: list) -> list: Manage the inventory of a bookstore based on the operations provided. Parameters: operations (list): List of operations to perform on the inventory Returns: list: List of books matching search criteria when a search operation is requested # Your code here ``` # Example Usage: Suppose you have the following operations: - Operation 1: Add a book with ISBN 12345, title \\"Python Programming\\", author \\"John Doe\\", and quantity 10. - Operation 2: Add a book with ISBN 67890, title \\"Data Science Handbook\\", author \\"Jane Smith\\", and quantity 5. - Operation 3: Update the quantity of the book with ISBN 12345 to 15. - Operation 4: Search for books with title containing \\"Python\\". Operations input: ```python operations = [ {\\"type\\": \\"add\\", \\"isbn\\": 12345, \\"title\\": \\"Python Programming\\", \\"author\\": \\"John Doe\\", \\"quantity\\": 10}, {\\"type\\": \\"add\\", \\"isbn\\": 67890, \\"title\\": \\"Data Science Handbook\\", \\"author\\": \\"Jane Smith\\", \\"quantity\\": 5}, {\\"type\\": \\"update\\", \\"isbn\\": 12345, \\"quantity\\": 15}, {\\"type\\": \\"search\\", \\"criteria\\": {\\"title\\": \\"Python\\"}} ] ``` Calling the function: ```python results = manage_inventory(operations) ``` The `results` should be: ```python [ {\\"isbn\\": 12345, \\"title\\": \\"Python Programming\\", \\"author\\": \\"John Doe\\", \\"quantity\\": 15} ] ```","solution":"def manage_inventory(operations: list) -> list: Manage the inventory of a bookstore based on the operations provided. Parameters: operations (list): List of operations to perform on the inventory Returns: list: List of books matching search criteria when a search operation is requested inventory = [] isbn_index = {} for operation in operations: op_type = operation.get(\'type\') if op_type == \'add\': isbn = operation[\'isbn\'] if isbn in isbn_index: continue # ISBN already in the inventory, skip adding book = { \\"isbn\\": operation[\'isbn\'], \\"title\\": operation[\'title\'], \\"author\\": operation[\'author\'], \\"quantity\\": operation[\'quantity\'] } inventory.append(book) isbn_index[isbn] = book elif op_type == \'update\': isbn = operation[\'isbn\'] if isbn in isbn_index: isbn_index[isbn][\'quantity\'] = operation[\'quantity\'] elif op_type == \'search\': criteria = operation[\'criteria\'] result = [] for book in inventory: if (\'title\' in criteria and criteria[\'title\'] in book[\'title\']) or (\'author\' in criteria and criteria[\'author\'] in book[\'author\']): result.append(book) return result return []"},{"question":"Write a function that takes a list of strings representing dates in the format \\"YYYY-MM-DD\\" and returns a new list of these dates sorted chronologically. The function should handle variable string lengths and invalid dates appropriately by excluding them from the final sorted list. The function should output: list: A list of date strings sorted in chronological order. You should write self-contained code starting with: ``` from datetime import datetime def sort_dates(date_list: list) -> list: ```","solution":"from datetime import datetime def sort_dates(date_list: list) -> list: Takes a list of strings representing dates in the format \\"YYYY-MM-DD\\" and returns a new list of these dates sorted chronologically. Invalid dates are excluded. Args: date_list (list): List of date strings in the format \\"YYYY-MM-DD\\". Returns: list: A list of valid date strings sorted in chronological order. valid_dates = [] for date_str in date_list: try: # Try to create a datetime object from the string valid_date = datetime.strptime(date_str, \\"%Y-%m-%d\\") valid_dates.append(date_str) except ValueError: # If the string is not a valid date, skip it continue # Sort the valid date strings valid_dates.sort() return valid_dates"},{"question":"** You are given an integer array `nums` representing the cost of elements, and an integer `X` representing the maximum number of elements that can be chosen. Your task is to write a Python function that returns the minimum total cost required to choose exactly `X` elements from the array, but each chosen element must be from a unique sequence in the array, following the incremental model starting from the beginning. You are allowed to reorder the elements in `nums`. The input will consist of: - An integer `X` representing the number of elements to choose. - A list of integers `nums` representing the cost of each element. You are required to write a function `minimum_total_cost(X, nums)` that returns the minimum total cost required to choose exactly `X` elements from the provided list according to the above conditions. **Function Signature:** ```python def minimum_total_cost(X: int, nums: List[int]) -> int: pass ``` **Example:** ```python X = 3 nums = [1, 3, 2, 1, 4, 5] print(minimum_total_cost(X, nums)) # Output: 4 ``` **Explanation:** In the given example, the chosen elements are `[1, 1, 2]` with a total cost of `4`. These are the unique smallest elements if chosen in an optimal way. **","solution":"from typing import List def minimum_total_cost(X: int, nums: List[int]) -> int: Returns the minimum total cost required to choose exactly X elements from nums. if X > len(nums): raise ValueError(\\"X cannot be greater than the length of nums.\\") nums.sort() return sum(nums[:X])"},{"question":"You need to implement a function called `flatten_dict` that transforms a nested dictionary into a flattened dictionary with concatenated keys. Here is the specific implementation requirement for the function `flatten_dict`: - **Function Signature**: `def flatten_dict(d: dict, parent_key: str = \'\', separator: str = \'.\'):` - **Parameters**: - `d` (dict): A nested dictionary that needs to be flattened. - `parent_key` (str, optional): A string that is prepended to the keys. Default is an empty string. - `separator` (str, optional): A string that separates concatenated keys. Default is \'.\'. - **Returns**: - A flattened dictionary where nested keys are concatenated into a single level. # Functional Requirements: 1. The function should handle dictionaries nested to any depth. 2. If `parent_key` is provided, it should be used as the prefix for all keys in the flattened dictionary. 3. The `separator` should be used to concatenate keys. 4. Only dictionary elements should be recursively flattened. Other data types should be assigned directly to the flattened dictionary. # Example Usage: ```python nested_dict = { \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3 } } } flattened_dict = flatten_dict(nested_dict) print(flattened_dict) # Output should be: {\'a\': 1, \'b.c\': 2, \'b.d.e\': 3} ``` # Constraints: - The input dictionary `d` will not contain any cycles or infinite recursion scenarios. - The keys in the dictionary are strings, and the values can be any data type. # Goal: By completing this exercise, you will gain experience with recursion, string manipulation, and working with nested data structures in Python.","solution":"def flatten_dict(d: dict, parent_key: str = \'\', separator: str = \'.\') -> dict: This function takes a nested dictionary and returns a flattened dictionary with concatenated keys. Parameters: d (dict): A nested dictionary that needs to be flattened. parent_key (str, optional): A string that is prepended to the keys. Default is an empty string. separator (str, optional): A string that separates concatenated keys. Default is \'.\'. Returns: dict: A flattened dictionary where nested keys are concatenated into a single level. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{separator}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, separator=separator).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Write a function named `generate_pascals_triangle` that takes an integer `n` as input and returns a 2D list containing the first `n` rows of Pascal\'s triangle. **Constraints:** - The input integer `n` will be in the range [1, 30]. **Details:** - Pascal\'s triangle is a triangular array of binomial coefficients. The rows are enumerated from 0, with the element at row `i` and column `j` being `i choose j`. **Function Signature:** ```python def generate_pascals_triangle(n: int) -> list[list[int]]: ``` **Example Usage:** ```python # Generate the first 5 rows of Pascal\'s triangle print(generate_pascals_triangle(5)) ``` Expected Output: ```python [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ```","solution":"def generate_pascals_triangle(n: int) -> list[list[int]]: Generates the first n rows of Pascal\'s triangle. :param n: The number of rows to generate :return: A 2D list representing the first n rows of Pascal\'s triangle if n <= 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"You are given the task of writing a function `serialize_and_sort_books(file_name: str) -> List[Dict[str, Any]]` in Python that reads data from a JSON file and returns a list of dictionaries containing book information. The books must be sorted by their publication year and formatted as specified. The JSON file contains a list of books, with each book represented as a dictionary with the keys `title`, `author`, `year`, and `price`. Your function, `serialize_and_sort_books`, should perform the following tasks: 1. Open the JSON file specified by `file_name`. 2. Read the content of the file and parse it into a list of dictionaries. 3. Sort the list of dictionaries by the `year` field in ascending order. 4. Close the file. 5. Return the sorted list of dictionaries. Example Input File (`books.json`): ```json [ {\\"title\\": \\"Book A\\", \\"author\\": \\"Author A\\", \\"year\\": 2000, \\"price\\": 39.99}, {\\"title\\": \\"Book B\\", \\"author\\": \\"Author B\\", \\"year\\": 1995, \\"price\\": 29.99}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Author C\\", \\"year\\": 2010, \\"price\\": 49.99} ] ``` Example Output: ```python [ {\\"title\\": \\"Book B\\", \\"author\\": \\"Author B\\", \\"year\\": 1995, \\"price\\": 29.99}, {\\"title\\": \\"Book A\\", \\"author\\": \\"Author A\\", \\"year\\": 2000, \\"price\\": 39.99}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Author C\\", \\"year\\": 2010, \\"price\\": 49.99} ] ``` You need to use the `json` module for reading and parsing the file content as part of your solution.","solution":"import json from typing import List, Dict, Any def serialize_and_sort_books(file_name: str) -> List[Dict[str, Any]]: Reads a JSON file containing a list of books, sorts the books by their publication year, and returns the sorted list. with open(file_name, \'r\') as file: books = json.load(file) sorted_books = sorted(books, key=lambda x: x[\'year\']) return sorted_books"},{"question":"You are tasked with implementing a function that draws a star using the `turtle` graphics library in Python. The function should set the initial position of the turtle, configure the turtle to draw in a specified color, and then render a star shape of specified size. **Specifications:** 1. The function should be named `draw_star`. 2. It should take four parameters: `side_length`, `num_points`, `x1`, and `y1`. 3. Inside the function: - Move the turtle to the starting position (`x1`, `y1`), without drawing a line. - Set the turtle to draw with a specified color (e.g., \\"red\\"). - Draw a star with the specified number of points and side length. - To draw a star using the turtle, use the formula for the interior angle: ( theta = left(frac{180 times (text{num_points} - 2)}{text{num_points}}right) div 2 ). **Note:** Perform necessary imports of the `turtle` module and use its methods accordingly. **Example:** ```python # Example usage: draw_star(100, 5, 0, 0) ``` In this example, the function `draw_star` should set the turtle at the position (0, 0) and draw a red star with five points, each side of the star having a length of 100 units.","solution":"import turtle def draw_star(side_length, num_points, x1, y1): Draws a star using the turtle graphics library. Parameters: side_length (int): The length of each side of the star. num_points (int): The number of points of the star. x1 (int): The x-coordinate of the starting position. y1 (int): The y-coordinate of the starting position. wn = turtle.Screen() star_turtle = turtle.Turtle() star_turtle.color(\\"red\\") # Move the turtle to the starting position star_turtle.penup() star_turtle.goto(x1, y1) star_turtle.pendown() # Calculate the interior angle angle = 180 - (180 / num_points) for _ in range(num_points): star_turtle.forward(side_length) star_turtle.right(angle) turtle.done()"},{"question":"Write a function that takes a list of email addresses and returns a dictionary with two keys: \'valid\' and \'invalid\'. The \'valid\' key should map to a list of email addresses that are valid according to a simplified email validation criteria: the email should contain one \'@\' symbol and at least one \'.\' symbol after the \'@\'. The \'invalid\' key should map to a list containing the remaining email addresses. The function should output with: ``` dict: A dictionary containing \'valid\' and \'invalid\' email addresses. ``` You should write self-contained code starting with: ``` import re def validate_emails(email_list): ```","solution":"import re def validate_emails(email_list): Validates a list of email addresses and separates them into valid and invalid. Parameters: - email_list (list): A list of email strings to validate. Returns: - dict: A dictionary with keys \'valid\' and \'invalid\' mapping to lists of valid and invalid email addresses, respectively. result = {\'valid\': [], \'invalid\': []} email_pattern = re.compile(r\'^[^@]+@[^@]+.[^@]+\') for email in email_list: if email_pattern.match(email): result[\'valid\'].append(email) else: result[\'invalid\'].append(email) return result"},{"question":"In this problem, you are required to implement a function called `remove_duplicates_sort(input_list)` that takes a list of integers as an input and returns a new list with all duplicates removed and the remaining elements sorted in ascending order. The function should preserve the order of first occurrences from the original list when removing duplicates. # Function Definition ```python def remove_duplicates_sort(input_list: list) -> list: ... ``` # Parameters - `input_list`: A list of integers that may contain duplicates. # Returns - A new list of integers with duplicates removed and remaining elements sorted in ascending order. # Example ```python # Given the input list [4, 5, 2, 4, 1, 2, 3], the function should return [1, 2, 3, 4, 5] print(remove_duplicates_sort([4, 5, 2, 4, 1, 2, 3])) # Output: [1, 2, 3, 4, 5] # Given the input list [1, 1, 1, 1, 1], the function should return [1] print(remove_duplicates_sort([1, 1, 1, 1, 1])) # Output: [1] # Given the input list [10, 5, 7, 5, 10, 7, 3], the function should return [3, 5, 7, 10] print(remove_duplicates_sort([10, 5, 7, 5, 10, 7, 3])) # Output: [3, 5, 7, 10] ``` # Notes - Your function should handle an empty list and return an empty list. - Elements in the input list may appear multiple times, but the function\'s output should contain each integer only once in the result. - The original order of first occurrences of elements in `input_list` must be considered when removing duplicates, but the final returned list must be sorted. - The function must handle both positive and negative integers. # Approach - You can use a `set` to keep track of seen elements. - Use another list to order the first occurrences. - Sort the final list before returning it.","solution":"def remove_duplicates_sort(input_list: list) -> list: seen = set() unique_elements = [] for number in input_list: if number not in seen: seen.add(number) unique_elements.append(number) return sorted(unique_elements)"},{"question":"You are tasked with writing a function `parse_sales_data` which retrieves data from a given set of sales records in JSON format from a RESTful API. The function should process only the sales records for a specific year and calculate the total sales for each month of that year. Implement the `parse_sales_data` function according to the following specifications: 1. The endpoint to fetch sales data is: `\\"https://api.example.com/sales-records\\"` 2. Use the `requests` library to send HTTP GET requests. Ensure that the request is successful (status code `200`), otherwise, raise an assertion error with the response status code. 3. The JSON response contains sales data in the following format: ```json [ {\\"date\\": \\"YYYY-MM-DD\\", \\"amount\\": number}, ... ] ``` Each entry contains a sales date in the format `YYYY-MM-DD` and the sales amount for that date. 4. The function should have a parameter `year` to filter sales records by the specified year. 5. Calculate the total sales amount for each month of the given year. Return the results as a dictionary with the month (as a zero-padded string e.g., \\"01\\" for January) as keys and the total sales amount for that month as values. # Function Signature: ```python def parse_sales_data(year: int) -> dict: ``` # Example Usage: ```python # Assuming the year of interest is 2022 monthly_sales = parse_sales_data(2022) print(monthly_sales) # Example Output: {\\"01\\": 15300.0, \\"02\\": 12600.0, \\"03\\": 20400.0, ..., \\"12\\": 32000.0} ``` **Note:** You may assume that the `requests` library is installed in your environment. You do not need to handle pagination or other query parameters for the API in this task.","solution":"import requests def parse_sales_data(year: int) -> dict: Fetch sales data from the provided API endpoint and calculate the total sales for each month of the given year. :param year: The year to filter sales records by. :return: A dictionary with the month (zero-padded) as keys and the total sales amount for that month as values. url = \\"https://api.example.com/sales-records\\" response = requests.get(url) # Ensure the request was successful assert response.status_code == 200, f\\"Failed to fetch data: {response.status_code}\\" sales_data = response.json() monthly_sales = {str(month).zfill(2): 0.0 for month in range(1, 13)} for record in sales_data: date = record[\\"date\\"] amount = record[\\"amount\\"] record_year = int(date[:4]) record_month = date[5:7] if record_year == year: monthly_sales[record_month] += amount return monthly_sales"},{"question":"Design a function that rotates the elements of a 2D list (matrix) 90 degrees clockwise. The function should take a 2D list of integers as input and output a new 2D list where each element is rotated accordingly. The input matrix will always be a square matrix (n x n). Ensure that your solution includes handling edge cases such as an empty matrix and a single element matrix. You should write self-contained code starting with: ``` def rotate_matrix(matrix): ```","solution":"def rotate_matrix(matrix): Rotates the elements of a square 2D list (matrix) 90 degrees clockwise. Args: matrix (list of list of int): The input 2D list. Returns: list of list of int: The matrix rotated 90 degrees clockwise. if not matrix: return [] n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n-1-i] = matrix[i][j] return rotated"},{"question":"**Title:** Sorting Complex Custom Objects in Python You are given a list of custom objects `Book`. Each `Book` object has three attributes: `title` (str), `author` (str), and `year_published` (int). Your task is to create a function `sort_books` that sorts the list of books in descending order based on the `year_published`. If two books have the same `year_published`, they should be sorted alphabetically by the `title`. **Function Requirements:** The function `sort_books` should take a list of `Book` objects and return a new list of `Book` objects sorted as described above. **Class Definition:** You can assume the `Book` class is defined as follows: ```python class Book: def __init__(self, title: str, author: str, year_published: int): self.title = title self.author = author self.year_published = year_published def __repr__(self): return f\\"<Book(title={self.title}, author={self.author}, year_published={self.year_published})>\\" ``` **Function Signature:** ```python def sort_books(books: List[Book]) -> List[Book]: pass ``` **Example Usage:** ```python # Assuming the class Book is already defined books = [ Book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960), Book(\\"1984\\", \\"George Orwell\\", 1949), Book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925), Book(\\"Pride and Prejudice\\", \\"Jane Austen\\", 1813), Book(\\"The Catcher in the Rye\\", \\"J.D. Salinger\\", 1951) ] sorted_books = sort_books(books) print(sorted_books) # Output should be sorted by year_published in descending order, # and by title in ascending order within the same year. ``` **Constraints:** - The `Book` class and list of books should not be modified. - Use built-in sorting functionalities. - Try to achieve the desired sorting in a Pythonic and efficient manner. Implement this `sort_books` function to fulfill the requirements and ensure correct sorting of the list of `Book` objects.","solution":"from typing import List class Book: def __init__(self, title: str, author: str, year_published: int): self.title = title self.author = author self.year_published = year_published def __repr__(self): return f\\"<Book(title={self.title}, author={self.author}, year_published={self.year_published})>\\" def sort_books(books: List[Book]) -> List[Book]: return sorted(books, key=lambda book: (-book.year_published, book.title))"},{"question":"In the context of data structures, the concept of \\"heap\\" is often used to create priority queues. A heap is a special tree-based data structure that satisfies the heap property. For a max-heap, for any given node I, the value of I is greater than or equal to the values of its children. For a min-heap, the value of I is less than or equal to the values of its children. Given an array of integers, your task is to implement a function named `heapify` that converts the array into a max-heap. This function should not return anything; rather, it should modify the input array in place to represent the max-heap. Here is the function signature: ```python def heapify(arr: list) -> None: # Your code here ``` # Examples: ```python arr = [3, 5, 1, 10, 2] heapify(arr) print(arr) # Prints [10, 5, 1, 3, 2] arr = [9, 6, 8, 2, 1] heapify(arr) print(arr) # Prints [9, 6, 8, 2, 1] ``` The `heapify` function should follow these steps: 1. Start from the last non-leaf node and move upward to the root. 2. Apply the \\"shift down\\" operation to maintain the max-heap property. You can use the following helper function to perform the \\"shift down\\" operation for the heapify process: ```python def shift_down(arr: list, start: int, end: int) -> None: root = start while True: child = 2 * root + 1 if child > end: break if child + 1 <= end and arr[child] < arr[child + 1]: child += 1 if arr[root] < arr[child]: arr[root], arr[child] = arr[child], arr[root] root = child else: break ``` This problem will help reinforce your understanding of heaps and the in-place heapifying process, which is a fundamental operation in many algorithms, such as heapsort and priority queue management.","solution":"def shift_down(arr: list, start: int, end: int) -> None: root = start while True: child = 2 * root + 1 if child > end: break if child + 1 <= end and arr[child] < arr[child + 1]: child += 1 if arr[root] < arr[child]: arr[root], arr[child] = arr[child], arr[root] root = child else: break def heapify(arr: list) -> None: count = len(arr) start = (count - 2) // 2 # the index of the last non-leaf node while start >= 0: shift_down(arr, start, count - 1) start -= 1"},{"question":"Design a function `analyze_sales_data` that reads sales data from a CSV file and performs various data analysis tasks. The file contains columns for `Date`, `Product`, `Units Sold`, `Unit Price`, and `Total Revenue`. Your function should: 1. Take a single argument `file_path` which represents the file path to the CSV file. 2. Read the data into a Pandas DataFrame. 3. Parse the `Date` column as a date format. 4. Create a new column `Total Revenue` by multiplying `Units Sold` and `Unit Price` if it doesn\'t exist. 5. Compute the total sales (`Total Revenue`) for each product. 6. Determine the product with the highest total sales. 7. Find the average `Units Sold` per day. 8. Return a tuple with the DataFrame, a dictionary of total sales per product, the product with the highest total sales, and the average units sold per day. **Input File Format Example (SalesData.csv)**: ``` Date,Product,Units Sold,Unit Price 2023-01-01,Product A,10,20.0 2023-01-01,Product B,5,30.0 2023-01-02,Product A,15,20.0 ``` **Function Signature**: ```python def analyze_sales_data(file_path: str) -> tuple: # Your implementation here pass ``` **Example**: ```python df, total_sales, top_product, avg_units_sold = analyze_sales_data(\\"SalesData.csv\\") print(df.head()) print(total_sales) print(f\\"Top product: {top_product}\\") print(f\\"Average units sold per day: {avg_units_sold}\\") ```","solution":"import pandas as pd def analyze_sales_data(file_path: str) -> tuple: # Read the data into a Pandas DataFrame df = pd.read_csv(file_path) # Parse the Date column as a date format df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Create the Total Revenue column if it doesn\'t exist if \'Total Revenue\' not in df.columns: df[\'Total Revenue\'] = df[\'Units Sold\'] * df[\'Unit Price\'] # Compute total sales for each product total_sales = df.groupby(\'Product\')[\'Total Revenue\'].sum().to_dict() # Determine the product with the highest total sales top_product = max(total_sales, key=total_sales.get) # Find the average Units Sold per day daily_units_sold = df.groupby(\'Date\')[\'Units Sold\'].sum() avg_units_sold = daily_units_sold.mean() # Return the results as a tuple return df, total_sales, top_product, avg_units_sold"},{"question":"You are required to implement a function called `calculate_degrees_of_separation` to determine the shortest path between two people in a social network. This function should build a graph from a given list of friendships and then employ the Breadth-First Search (BFS) algorithm to find the shortest path between two specified individuals. **Function Signature:** ```python def calculate_degrees_of_separation(friendships: List[Tuple[str, str]], person1: str, person2: str) -> int: pass ``` # Input - `friendships`: a list of tuples, where each tuple contains two strings representing a friendship between two people, e.g., `[(\\"Alice\\", \\"Bob\\"), (\\"Bob\\", \\"Charlie\\")]`. - `person1`: a string representing the name of the first person. - `person2`: a string representing the name of the second person. # Output - An integer representing the shortest number of connections (degrees of separation) between `person1` and `person2`. If no connection exists, return `-1`. # Instructions 1. Construct an undirected graph using an adjacency list from the given list of friendships. 2. Implement the BFS algorithm to find the shortest path between `person1` and `person2`. 3. Return the number of edges (degrees of separation) in the shortest path. If no path exists, return `-1`. Here is an example call of the function: ```python friendships = [(\\"Alice\\", \\"Bob\\"), (\\"Bob\\", \\"Charlie\\"), (\\"Charlie\\", \\"David\\"), (\\"Eve\\", \\"Frank\\")] degrees = calculate_degrees_of_separation(friendships, \\"Alice\\", \\"David\\") print(degrees) # Should print 3 ``` # Example Suppose the following: - `friendships` = `[(\\"Alice\\", \\"Bob\\"), (\\"Bob\\", \\"Charlie\\"), (\\"Charlie\\", \\"David\\"), (\\"Eve\\", \\"Frank\\")]` - `person1` = `\\"Alice\\"` - `person2` = `\\"David\\"` A successful call would print `3`, indicating that the shortest path from Alice to David goes through Bob and Charlie. If `person1` or `person2` don\'t exist in the graph, or there\'s no possible connection, the function should return `-1`. **Important Requirements:** - Use the Breadth-First Search (BFS) algorithm to find the shortest path. - Make sure to handle edge cases where the people are not connected or don\'t exist in the given friendships list. This exercise helps you understand how to represent graphs using adjacency lists and apply graph traversal algorithms to solve real-world problems.","solution":"from typing import List, Tuple from collections import deque, defaultdict def calculate_degrees_of_separation(friendships: List[Tuple[str, str]], person1: str, person2: str) -> int: if person1 == person2: return 0 graph = defaultdict(list) for friend1, friend2 in friendships: graph[friend1].append(friend2) graph[friend2].append(friend1) visited = set() queue = deque([(person1, 0)]) while queue: current_person, degree = queue.popleft() if current_person == person2: return degree if current_person not in visited: visited.add(current_person) for neighbour in graph[current_person]: if neighbour not in visited: queue.append((neighbour, degree + 1)) return -1"},{"question":"You are given a dataset and your goal is to discretize a continuous variable into discrete intervals using k-means clustering. Write a function named `discretize_variable` that will convert the continuous variable into k clusters. # Instructions: 1. **Function Name**: The function should be named `discretize_variable`. 2. **Parameters**: - `data` (pd.Series): A pandas Series representing the continuous variable to discretize. - `k` (int): The number of clusters to form. 3. **Returns**: - `discretized` (pd.Series): A pandas Series where each value is replaced by the label of the cluster to which it belongs. # Steps: 1. Validate the input `k` to ensure it is a positive integer and `data` is a pandas Series. 2. Use k-means clustering to fit the data and predict the clusters for each value in the series. 3. Replace each value in the original series with the cluster label it belongs to. # Requirements: - You must use the k-means implementation from `sklearn.cluster`. - Ensure that your function performs necessary checks and handles edge cases gracefully. Here\'s a mini-example of the dataset structure: ```python data = pd.Series([1.2, 3.4, 2.6, 8.7, 7.2]) k = 3 ``` Implement the function `discretize_variable` to discretize the continuous variable into k clusters.","solution":"import pandas as pd from sklearn.cluster import KMeans def discretize_variable(data, k): Discretizes a continuous variable into k clusters. Parameters: data (pd.Series): A pandas Series representing the continuous variable to discretize. k (int): The number of clusters to form. Returns: pd.Series: A pandas Series where each value is replaced by the label of the cluster it belongs to. if not isinstance(data, pd.Series): raise ValueError(\\"The data input must be a pandas Series.\\") if not (isinstance(k, int) and k > 0): raise ValueError(\\"The number of clusters (k) must be a positive integer.\\") # Reshape data for k-means clustering reshaped_data = data.values.reshape(-1, 1) # Perform k-means clustering kmeans = KMeans(n_clusters=k, random_state=0) clusters = kmeans.fit_predict(reshaped_data) # Return a pandas Series with the cluster labels return pd.Series(clusters, index=data.index)"},{"question":"Write a Python function that calculates the factorial of a number using recursion. The factorial of a positive integer `n` is the product of all positive integers less than or equal to `n`. The function should handle the base case where the input is 0, which has a factorial value of 1. The function should be named `recursive_factorial` and take a single positive integer `n` as its parameter. Ensure that your function handles large values efficiently by leveraging the concept of recursion. Function Signature: ```python def recursive_factorial(n: int) -> int: ... ``` # Example: ```python print(recursive_factorial(5)) ``` This function call should return `120` because `5! = 5 * 4 * 3 * 2 * 1 = 120`. # Hints: - Use if-else statements or ternary conditional operators to differentiate between the base case and the recursive case. - Remember that the factorial of 0 is defined as 1.","solution":"def recursive_factorial(n: int) -> int: Calculates the factorial of a number using recursion. :param n: A non-negative integer :return: The factorial of the number n if n == 0: return 1 else: return n * recursive_factorial(n - 1)"},{"question":"You have been hired to create a function that analyzes sales data from a text file and calculates the total revenue for each item. The data is given in a text format where each line represents a sale with the item name and the revenue separated by a colon. Your task is to write a function called `calculate_total_revenue` that performs the following tasks: 1. Accepts a string representing the file path of the sales data. 2. Reads the content of the file and calculates the total revenue for each item. 3. Returns a dictionary where each key is an item name and each value is the total revenue for that item. The sales data file has the following format: ``` Item A: 100 Item B: 150 Item A: 200 Item C: 300 Item B: 100 ``` For the provided example, the function should return the following dictionary: ```python { \'Item A\': 300, \'Item B\': 250, \'Item C\': 300 } ``` Make sure to handle cases where the file might be empty by returning an empty dictionary. You can assume that the item names and sales values are correctly formatted in the file. The function should raise an error if the file cannot be read (e.g., if it does not exist).","solution":"def calculate_total_revenue(file_path): Reads sales data from a specified file and calculates the total revenue for each item. :param file_path: str: Path to the sales data file :return: dict: A dictionary with item names as keys and their total revenue as values total_revenue = {} try: with open(file_path, \'r\') as f: lines = f.readlines() for line in lines: item, revenue = line.strip().split(\': \') revenue = int(revenue) if item in total_revenue: total_revenue[item] += revenue else: total_revenue[item] = revenue except FileNotFoundError: raise FileNotFoundError(\\"The specified file does not exist.\\") except Exception as e: raise e return total_revenue"},{"question":"In this problem, you will implement a function `count_words_in_files` that reads multiple text files from a specified directory and counts the occurrences of each word across all files. The function should return a dictionary where keys are words and values are the counts of those words in all the files combined. To accomplish the task, you should use the following: 1. `os.listdir` to get the list of files in the directory. 2. `re.findall` to extract words from the text. 3. `collections.Counter` to count the occurrences of words. Your function `count_words_in_files` should have the following signature: ```python def count_words_in_files(directory): pass ``` - `directory`: A string representing the path to the directory containing text files. You should ensure the function properly reads each file, handles any potential issues (e.g., non-text files or file reading errors), and uses the specified functions as mentioned. Additionally, please include the following constraints: - Only consider files with `.txt` extension. - Ignore case (treat \\"Word\\" and \\"word\\" as the same). - Handle punctuation properly (words should not include punctuation marks).","solution":"import os import re from collections import Counter def count_words_in_files(directory): Reads multiple text files from the specified directory and counts the occurrences of each word across all files, ignoring case and punctuation. :param directory: A string representing the path to the directory containing text files. :return: A dictionary where keys are words and values are the counts of those words in the files. word_counter = Counter() word_pattern = re.compile(r\'bw+b\') try: files = [file for file in os.listdir(directory) if file.endswith(\'.txt\')] for file in files: file_path = os.path.join(directory, file) try: with open(file_path, \'r\', encoding=\'utf-8\') as f: text = f.read().lower() # Convert text to lowercase to ignore case words = word_pattern.findall(text) word_counter.update(words) except (IOError, UnicodeDecodeError): # If there\'s an error reading a file, we can skip it or log the error. continue except FileNotFoundError: # If the directory doesn\'t exist, return an empty counter return {} return dict(word_counter)"},{"question":"Read a JSON file containing nested objects and convert it into a flat pandas DataFrame. The JSON file may contain nested dictionaries up to three levels deep. Each level\'s keys should be concatenated with an underscore (_) to form the DataFrame\'s column names. Assume the JSON file is named \'nested_data.json\' and is located in the current directory. If the JSON file is empty or invalid, an empty DataFrame should be returned. The function should output: pd.DataFrame: A DataFrame containing the flattened data from the JSON file. You should write self-contained code starting with: ``` import pandas as pd import json from pandas import json_normalize # Constants FILE_PATH = \'nested_data.json\' def flatten_json(json_obj): df = json_normalize(json_obj) return df def task_func(): ```","solution":"import pandas as pd import json import os from pandas import json_normalize # Constants FILE_PATH = \'nested_data.json\' def flatten_json(json_obj): Flatten a nested JSON object. if not json_obj: return pd.DataFrame() return json_normalize(json_obj) def task_func(): Reads a JSON file and converts it into a flat pandas DataFrame. if not os.path.isfile(FILE_PATH): return pd.DataFrame() # Return empty DataFrame if file does not exist try: with open(FILE_PATH, \'r\') as file: json_obj = json.load(file) except (json.JSONDecodeError, IOError): return pd.DataFrame() # Return empty DataFrame if JSON is invalid or file read error return flatten_json(json_obj)"},{"question":"Create a function that generates a line plot of multiple series. Each series represents a pair of lists with x and y coordinates. The function should accept a dictionary where keys are the series names and values are tuples containing the x and y coordinates for each series. Additionally, each series should be plotted with a distinct line style chosen randomly from a predefined set of styles. The function should also add a legend indicating the name of each series along with its respective line style. Constants: - PLOT_TITLE: Title of the plot (default is \'Line Plot\'). - X_LABEL: Label for the x-axis (default is \'X-axis\'). - Y_LABEL: Label for the y-axis (default is \'Y-axis\'). - LINE_STYLES: A list of line styles for the plot. The function should output with: matplotlib.axes._axes.Axes: The axes object representing the line plot. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt import random # Constants PLOT_TITLE = \'Line Plot\' X_LABEL = \'X-axis\' Y_LABEL = \'Y-axis\' LINE_STYLES = [\'-\', \'--\', \'-.\', \':\'] def task_func(series_dict): ```","solution":"import matplotlib.pyplot as plt import random # Constants PLOT_TITLE = \'Line Plot\' X_LABEL = \'X-axis\' Y_LABEL = \'Y-axis\' LINE_STYLES = [\'-\', \'--\', \'-.\', \':\'] def task_func(series_dict): Generates a line plot of multiple series. Parameters: series_dict (dict): A dictionary where keys are the series names and values are tuples containing the x and y coordinates for each series. Returns: matplotlib.axes._axes.Axes: The axes object representing the line plot. fig, ax = plt.subplots() for series_name, (x, y) in series_dict.items(): line_style = random.choice(LINE_STYLES) ax.plot(x, y, linestyle=line_style, label=f\'{series_name} ({line_style})\') ax.set_title(PLOT_TITLE) ax.set_xlabel(X_LABEL) ax.set_ylabel(Y_LABEL) ax.legend() return ax"},{"question":"Write a Python function named `zigzag_conversion` that converts a given string into a zigzag pattern on a given number of rows, then reads it row by row to produce a new string. The zigzag pattern starts from the first row and descends to the last row, then ascends back to the first row, and so on. The function signature should be: ```python def zigzag_conversion(s, numRows): # implementation here ``` # Input: - **s**: A string `s` to be converted to the zigzag pattern. - **numRows**: An integer `numRows` representing the number of rows in the zigzag pattern. # Output: - The function should return a string representing the new zigzag form read line by line from top to bottom. # Example Usage: ```python s = \\"PAYPALISHIRING\\" numRows = 3 result = zigzag_conversion(s, numRows) print(result) # Expected output: \\"PAHNAPLSIIGYIR\\" ``` # Constraints: - `1 <= len(s) <= 1000` - `1 <= numRows <= 1000` # Explanation: For the example given, the zigzag pattern on 3 rows would look like: ``` P A H N A P L S I I G Y I R ``` Reading line by line, the resulting string is \\"PAHNAPLSIIGYIR\\". This problem aims to test your ability to manipulate strings and implement custom iterating logic to transform data based on specified patterns.","solution":"def zigzag_conversion(s, numRows): if numRows == 1 or numRows >= len(s): return s # Create an array of strings for all numRows zigzag = [\'\' for _ in range(numRows)] current_row = 0 going_down = False # Iterate over the string adding characters to the appropriate rows for char in s: zigzag[current_row] += char if current_row == 0 or current_row == numRows - 1: going_down = not going_down current_row += 1 if going_down else -1 # Join all rows to get the final string return \'\'.join(zigzag)"},{"question":"You are tasked to create a Python function that generates all unique combinations of `k` numbers out of the first `n` natural numbers. The function should be named `combinations_k_out_of_n`. You need to utilize the `itertools` library, specifically the `itertools.combinations` function. The function signature should be: ```python def combinations_k_out_of_n(n, k): ... ``` Where: - `n` is the number of the first `n` natural numbers (an integer) - `k` is the number of elements in each combination (an integer) The function needs to: 1. Generate all unique combinations of `k` numbers taken from the set `{1, 2, ..., n}`. 2. Return a list of tuples, where each tuple represents a unique combination. Your implementation should accurately generate and return these combinations using the `itertools.combinations` function. # Example ```python print(combinations_k_out_of_n(5, 3)) ``` Output: ```python [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)] ```","solution":"import itertools def combinations_k_out_of_n(n, k): Generate all unique combinations of `k` numbers out of the first `n` natural numbers. Parameters: n (int): The number of the first `n` natural numbers (1 to n). k (int): The number of elements in each combination. Returns: list: A list of tuples, where each tuple represents a unique combination. return list(itertools.combinations(range(1, n+1), k))"},{"question":"You are working on a system that monitors real-time temperature data from multiple sensors located in different cities. The goal is to process and visualize the sensor data, providing insights about temperature trends and anomalies. Your task is to write a function named `analyze_temperature` which loads data from a CSV file and performs the following actions: 1. Reads the CSV file into a Pandas DataFrame. 2. Parses the timestamps and converts them to datetime objects. 3. Calculates the daily average temperature for each city. 4. Identifies days with abnormal temperature changes (e.g., a change greater than 10 degrees Celsius from the previous day) and logs these anomalies. 5. Visualizes the daily average temperature trends for each city, saving the plot as an image file. **Input:** - A CSV file with columns: - `Timestamp`: The timestamp of the sensor reading. - `City`: The name of the city where the sensor is located. - `Temperature`: The temperature reading from the sensor. **Output:** - A log file `temperature_anomalies.log` that contains days with abnormal temperature changes for each city. - An image file `temperature_trends.png` that visualizes the daily average temperature trends for each city. **Function Signature:** ```python def analyze_temperature(file_path: str): pass ```","solution":"import pandas as pd import matplotlib.pyplot as plt from datetime import timedelta def analyze_temperature(file_path: str): # Step 1: Read the CSV file into a Pandas DataFrame df = pd.read_csv(file_path) # Step 2: Parse the timestamps and convert them to datetime objects df[\'Timestamp\'] = pd.to_datetime(df[\'Timestamp\']) # Step 3: Calculate the daily average temperature for each city df[\'Date\'] = df[\'Timestamp\'].dt.date daily_avg_temp = df.groupby([\'Date\', \'City\'])[\'Temperature\'].mean().reset_index() # Step 4: Identify days with abnormal temperature changes daily_avg_temp[\'Temp_Change\'] = daily_avg_temp.groupby(\'City\')[\'Temperature\'].diff() anomalies = daily_avg_temp[abs(daily_avg_temp[\'Temp_Change\']) > 10] with open(\'temperature_anomalies.log\', \'w\') as log_file: for index, row in anomalies.iterrows(): log_file.write(f\\"{row[\'Date\']} - {row[\'City\']}: {row[\'Temp_Change\']}°C changen\\") # Step 5: Visualize the daily average temperature trends for each city plt.figure(figsize=(10, 6)) for city in daily_avg_temp[\'City\'].unique(): city_data = daily_avg_temp[daily_avg_temp[\'City\'] == city] plt.plot(city_data[\'Date\'], city_data[\'Temperature\'], label=city) plt.xlabel(\'Date\') plt.ylabel(\'Average Temperature (°C)\') plt.title(\'Daily Average Temperature Trends\') plt.legend() plt.savefig(\'temperature_trends.png\') plt.close()"},{"question":"You need to implement a Python function called `find_missing_number` which takes a list of integers that represents a sequence from 1 to n with one number missing. The function should return the missing number. The list will contain `n-1` integers, and the function needs to find and return the only number missing from the list. **Function signature:** ```python def find_missing_number(nums: list) -> int: pass ``` **Constraints:** - The list will contain integers ranging from `1` to `n` with exactly one number missing. - The list will contain distinct integers. - The length of the list will be at least 1 and at most 10^6. Example: ```python find_missing_number([1, 2, 4, 6, 3, 7, 8]) # Output: 5 # Explanation: The number 5 is missing in the sequence from 1 to 8. find_missing_number([1, 3]) # Output: 2 # Explanation: The number 2 is missing in the sequence from 1 to 3. ``` Your task is to implement the `find_missing_number` function so that it correctly identifies and returns the missing number from the given list.","solution":"def find_missing_number(nums): Finds the missing number in a list containing a sequence from 1 to n with one number missing. Args: nums (list): A list of integers from 1 to n with one number missing. Returns: int: The missing number. n = len(nums) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) missing_number = expected_sum - actual_sum return missing_number"},{"question":"You are tasked with creating a function named `merge_dictionaries_and_sort` that merges two dictionaries and returns a sorted list of tuples representing the key-value pairs in the merged dictionary. The resulting list should be sorted by keys in ascending order. Below are the specific criteria: - **Function Name:** `merge_dictionaries_and_sort` - **Parameters:** - `dict1` (dict): The first dictionary to merge. - `dict2` (dict): The second dictionary to merge. - **Returns:** - A sorted list of tuples representing the key-value pairs in the merged dictionary. **Steps:** 1. Merge the two dictionaries. If a key is present in both dictionaries, the value from `dict2` should overwrite the value from `dict1`. 2. Convert the merged dictionary into a list of tuples. 3. Sort the list of tuples by the keys in ascending order. 4. Return the sorted list of tuples. Here is the function signature: ```python def merge_dictionaries_and_sort(dict1: dict, dict2: dict) -> list: pass ``` **Example:** ```python dict1 = {\'a\': 1, \'b\': 2} dict2 = {\'b\': 3, \'c\': 4} merge_dictionaries_and_sort(dict1, dict2) # Expected Output: [(\'a\', 1), (\'b\', 3), (\'c\', 4)] ```","solution":"def merge_dictionaries_and_sort(dict1, dict2): Merges two dictionaries and returns a sorted list of tuples representing the key-value pairs in the merged dictionary. If a key is present in both dictionaries, the value from dict2 overwrites the value from dict1. :param dict1: The first dictionary to merge. :param dict2: The second dictionary to merge. :return: A sorted list of tuples representing the key-value pairs in the merged dictionary. # Merge the two dictionaries with dict2 values overwriting dict1 values if keys conflict merged_dict = {**dict1, **dict2} # Convert to list of tuples and sort by the keys in ascending order sorted_tuples = sorted(merged_dict.items()) return sorted_tuples"},{"question":"In certain situations, you might need to determine if a string can be rearranged to form a palindrome. A palindrome is a string that reads the same backward as forward, such as \\"racecar\\" or \\"level\\". Write a function `can_form_palindrome` that takes a single argument: - `s` (a string): The input string which may contain a mix of uppercase and lowercase characters. The function should: 1. Determine if it is possible to rearrange the characters of `s` to form a palindrome. 2. Return `True` if such a rearrangement exists, and `False` otherwise. To accomplish this, note the following: - A palindrome can have at most one character with an odd frequency (in the case of odd-length palindromes). - For even-length palindromes, all characters must have even frequencies. - The function should be case-sensitive, i.e., \'A\' is considered different from \'a\'. # Example: Given the input strings: ```python \\"civic\\" \\"ivicc\\" \\"aabbc\\" \\"hello\\" ``` The output of the `can_form_palindrome` function should be: ```python True True True False ``` # Constraints: - You should not use any external libraries for string manipulation. - Only use built-in Python functions and methods wherever necessary.","solution":"def can_form_palindrome(s): Determines if the input string can be rearranged to form a palindrome. Parameters: s (str): The input string which may contain a mix of uppercase and lowercase characters. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. # Create a dictionary to count frequencies of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count the number of characters with odd frequencies odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # In a palindrome, there can be at most one character with an odd frequency return odd_count <= 1"},{"question":"You are asked to implement a function that simulates a simplified version of the game of life on a finite grid. The grid contains cells that are either alive (represented by a 1) or dead (represented by a 0). The function should compute the next state of the grid based on the following rules: - Any live cell with fewer than two live neighbors dies (underpopulation). - Any live cell with two or three live neighbors lives on to the next generation. - Any live cell with more than three live neighbors dies (overcrowding). - Any dead cell with exactly three live neighbors becomes a live cell (reproduction). Write a function named `next_game_of_life_state` which takes a single parameter: 1. `current_state` - A list of lists representing the current state of the grid, where each sublist represents a row of the grid. The function should return a new list of lists representing the next state of the grid after applying the game\'s rules. **Example:** ```python current_state = [ [0, 1, 0], [0, 0, 1], [1, 1, 1] ] next_state = next_game_of_life_state(current_state) print(next_state) ``` Expected output: ``` [ [0, 0, 0], [1, 0, 1], [0, 1, 1] ] ```","solution":"def next_game_of_life_state(current_state): def count_live_neighbors(grid, x, y): directions = [ (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1) ] count = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]): count += grid[nx][ny] return count rows = len(current_state) cols = len(current_state[0]) next_state = [[0 for _ in range(cols)] for _ in range(rows)] for r in range(rows): for c in range(cols): live_neighbors = count_live_neighbors(current_state, r, c) if current_state[r][c] == 1: if live_neighbors < 2 or live_neighbors > 3: next_state[r][c] = 0 else: next_state[r][c] = 1 else: if live_neighbors == 3: next_state[r][c] = 1 return next_state"},{"question":"Write a function named `weather_forecast` to query weather information using the OpenWeatherMap API and process the data. The function will perform the following tasks: 1. The function will take two parameters: `city` (the name of the city for which the weather information is requested) and `api_key` (the API key for authenticating requests with the OpenWeatherMap API). 2. It will construct a URL to request the current weather information from the OpenWeatherMap API. 3. It will make an HTTP GET request to the OpenWeatherMap API to retrieve the weather data. 4. The function should read the JSON response from the HTTP GET request and extract specific weather details: temperature (in Celsius), humidity, and weather description. 5. The function should return a dictionary containing the extracted weather details. 6. For demonstration purposes, the function should print the weather details in a readable format. **Function Signature:** ```python def weather_forecast(city: str, api_key: str) -> dict: ``` **Constraints:** - You must use the `requests.get` method from the `requests` library to make HTTP requests. - You must use the `json.loads` method from the `json` library to parse the JSON response. - The temperature should be converted from Kelvin (default unit) to Celsius. Here is an example of how your function might be used: ```python # Example city = \'London\' api_key = \'your_api_key\' weather = weather_forecast(city, api_key) print(weather) # Should print the dictionary with weather details, e.g., # { # \'temperature\': 15.0, # \'humidity\': 75, # \'description\': \'light rain\' # } ```","solution":"import requests def weather_forecast(city: str, api_key: str) -> dict: Takes a city name and an API key to fetch and return weather information from the OpenWeatherMap API in the form of a dictionary. # Construct the URL to request the current weather information url = f\\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}\\" # Make an HTTP GET request to the OpenWeatherMap API response = requests.get(url) # Check if the response status is OK (200) if response.status_code != 200: raise ValueError(f\\"Error fetching data from OpenWeatherMap API: {response.status_code}\\") # Parse the JSON response data = response.json() # Extract specific weather details temperature_kelvin = data[\'main\'][\'temp\'] temperature_celsius = temperature_kelvin - 273.15 humidity = data[\'main\'][\'humidity\'] description = data[\'weather\'][0][\'description\'] # Create a dictionary with the extracted weather details weather_details = { \'temperature\': round(temperature_celsius, 2), \'humidity\': humidity, \'description\': description } # Print the weather details in a readable format print(f\\"City: {city}\\") print(f\\"Temperature: {weather_details[\'temperature\']} °C\\") print(f\\"Humidity: {weather_details[\'humidity\']}%\\") print(f\\"Weather description: {weather_details[\'description\']}\\") return weather_details"},{"question":"You are assigned to create a function `investment_forecast` that visualizes the growth of an investment over time with varying interest rates. The investment starts with an initial amount, and every year it increases by a given interest rate. Use the `matplotlib` library to plot the growth curve of the investment over a specified period. Your function should perform the following tasks: 1. Accept three parameters: - `initial_amount`: the starting amount of the investment (float). - `interest_rate`: the annual interest rate in percentage (float). - `years`: the number of years for which the investment will grow (int). 2. Calculate the investment value at the end of each year, accumulating the interest. 3. Plot the growth of the investment over the specified number of years, with the year on the x-axis and the investment value on the y-axis. 4. Display the plot on the screen. Below is a template to guide you: ```python import matplotlib.pyplot as plt def investment_forecast(initial_amount, interest_rate, years): # Step 1: Create a list to hold the investment values for each year. # Step 2: Use a loop to calculate the investment value for each year. # Step 3: Append the calculated values to the list. # Step 4: Plot the investment growth. # Step 5: Display the plot using matplotlib.pyplot.show(). pass ``` **Requirements**: - You must use the `matplotlib.pyplot.show` method to display the plot. Good luck with your task!","solution":"import matplotlib.pyplot as plt def investment_forecast(initial_amount, interest_rate, years): Visualize the growth of an investment over time with varying interest rates. Parameters: initial_amount (float): The starting amount of the investment. interest_rate (float): The annual interest rate in percentage. years (int): The number of years for which the investment will grow. # Step 1: Create a list to hold the investment values for each year. investment_values = [] # Step 2: Use a loop to calculate the investment value for each year. current_amount = initial_amount for year in range(years + 1): # Step 3: Append the calculated values to the list. investment_values.append(current_amount) current_amount += current_amount * (interest_rate / 100) # Step 4: Plot the investment growth. plt.figure(figsize=(10, 6)) plt.plot(range(years + 1), investment_values, marker=\'o\') plt.title(\\"Investment Growth Over Time\\") plt.xlabel(\\"Years\\") plt.ylabel(\\"Investment Value\\") plt.grid(True) # Step 5: Display the plot using matplotlib.pyplot.show(). plt.show()"},{"question":"Design a function that takes two lists of integers and returns a dictionary with pairwise sums as keys and tuples of indices as values. Each key should represent a unique sum of pairs from the two lists, and each value should be a list of tuples containing indices of the elements from both lists that add up to the key. Raise a ValueError if either list is empty or contains non-integer elements. For example, given lists [1, 2, 3] and [4, 5], the function should return: ``` { 5: [(0, 0)], 6: [(0, 1), (1, 0)], 7: [(1, 1), (2, 0)], 8: [(2, 1)] } ``` Then write your own implementation starting with: ```python def pairwise_sums(list1, list2): if not list1 or not list2: raise ValueError(\\"Input lists must not be empty.\\") if not all(isinstance(x, int) for x in list1 + list2): raise ValueError(\\"All elements of input lists must be integers.\\") sum_dict = {} for i, num1 in enumerate(list1): for j, num2 in enumerate(list2): pair_sum = num1 + num2 if pair_sum not in sum_dict: sum_dict[pair_sum] = [] sum_dict[pair_sum].append((i, j)) return sum_dict ```","solution":"def pairwise_sums(list1, list2): if not list1 or not list2: raise ValueError(\\"Input lists must not be empty.\\") if not all(isinstance(x, int) for x in list1 + list2): raise ValueError(\\"All elements of input lists must be integers.\\") sum_dict = {} for i, num1 in enumerate(list1): for j, num2 in enumerate(list2): pair_sum = num1 + num2 if pair_sum not in sum_dict: sum_dict[pair_sum] = [] sum_dict[pair_sum].append((i, j)) return sum_dict"},{"question":"You are required to write a function named `track_inventory` that processes a text file representing an inventory of items in a store and returns a list of items below a specified stock level. The inventory text file, named \\"inventory.txt\\", contains multiple lines where each line represents an item’s name, quantity, and price, separated by commas. The first line of the file is a header (\\"Name,Quantity,Price\\"), which should be ignored when processing. Your function should: 1. Take an integer input `threshold` which specifies the stock level to be checked against. 2. Read the content of the \\"inventory.txt\\" file. 3. Parse the data into a list of tuples, where each tuple contains an item’s name, quantity, and price. 4. Check the quantity of each item against the given `threshold`. 5. Compile and return a list of tuples containing the name and quantity of items that have a stock level below the threshold. Additionally, to handle file reading correctly, incorporate the use of the `with` statement to ensure proper handling of the file. Here are the step-by-step requirements: 1. Take an integer input `threshold`. 2. Open and read from the \\"inventory.txt\\" file using the `with` statement. 3. Process the file content to create a list of tuples (name, quantity, price). 4. Filter out the items whose quantity is below the specified threshold. 5. Return a list of tuples with the name and quantity of these filtered items. Example of \\"inventory.txt\\" content: ``` Name,Quantity,Price Apples,50,0.5 Bananas,20,0.3 Cherries,5,2.0 Dates,100,1.5 ``` Function signature: ```python def track_inventory(threshold): pass ```","solution":"def track_inventory(threshold): Returns a list of items below the specified stock level. Args: threshold (int): Stock level threshold to check against. Returns: List[Tuple[str, int]]: List of items with stock levels below the threshold. below_threshold_items = [] # Open and read the \\"inventory.txt\\" file with open(\'inventory.txt\', \'r\') as file: lines = file.readlines() # Skip the header for line in lines[1:]: name, quantity, price = line.strip().split(\',\') quantity = int(quantity) # Check if the quantity is below the threshold if quantity < threshold: below_threshold_items.append((name, quantity)) return below_threshold_items"},{"question":"Create a function named `unique_adventure_story`. This function should generate and print a unique short adventure story based on the provided inputs. The story should utilize randomization to create variability in the narrative. # Input: - The function `unique_adventure_story` accepts three arguments: - `hero` (str): the name of the hero of the story - `place` (str): the name of the place where the adventure occurs - `treasure` (str): the name of the treasure that is being sought # Output: - The function should print a short adventure story integrating the provided inputs and some predefined sentences. # Function Requirements: - The story should be built by selecting phrases from predefined lists and combining them with the input arguments. - Use the `random.choice` method from the `random` library to select parts of the story. - Ensure that the story has a beginning, middle, and an end. Here is the structure of phrases for building the story: ```python beginnings = [\\"Once upon a time in \\", \\"In the faraway land of \\", \\"Long ago in the mystical place called \\"] middles = [\\" embarked on a quest to find the legendary \\", \\" set out on an adventure to seek the enchanted \\", \\" was determined to uncover the hidden \\"] endings = [\\" and emerged victorious.\\", \\" and discovered the true meaning of bravery.\\", \\" and made history as a legendary hero.\\"] sidekicks = [\\"a loyal dragon\\", \\"an enchanted fox\\", \\"a wise old wizard\\", \\"a brave knight\\"] obstacles = [\\"a dark forest\\", \\"an ancient curse\\", \\"a band of merciless pirates\\", \\"a treacherous mountain\\"] ``` # Instructions: - Implement the `unique_adventure_story` function. - The function should construct the story by selecting random elements from the predefined lists and inserting the inputs at the appropriate places. - The story should include at least one obstacle and one sidekick that must be integrated dynamically. # Example Usage: ```python unique_adventure_story(\\"Aragorn\\", \\"Rivendell\\", \\"Elfstone\\") ``` This would output a story similar to: ``` Once upon a time in Rivendell, Aragorn embarked on a quest to find the legendary Elfstone. Along the way, he was joined by a wise old wizard and faced the ancient curse. Through courage and wit, Aragorn overcame the obstacles and discovered the true meaning of bravery. ```","solution":"import random def unique_adventure_story(hero, place, treasure): Generates and prints a unique short adventure story based on the provided inputs. Parameters: hero (str): the name of the hero of the story place (str): the name of the place where the adventure occurs treasure (str): the name of the treasure that is being sought beginnings = [\\"Once upon a time in \\", \\"In the faraway land of \\", \\"Long ago in the mystical place called \\"] middles = [\\" embarked on a quest to find the legendary \\", \\" set out on an adventure to seek the enchanted \\", \\" was determined to uncover the hidden \\"] endings = [\\" and emerged victorious.\\", \\" and discovered the true meaning of bravery.\\", \\" and made history as a legendary hero.\\"] sidekicks = [\\"a loyal dragon\\", \\"an enchanted fox\\", \\"a wise old wizard\\", \\"a brave knight\\"] obstacles = [\\"a dark forest\\", \\"an ancient curse\\", \\"a band of merciless pirates\\", \\"a treacherous mountain\\"] beginning = random.choice(beginnings) middle = random.choice(middles) ending = random.choice(endings) sidekick = random.choice(sidekicks) obstacle = random.choice(obstacles) story = (f\\"{beginning}{place}, {hero}{middle}{treasure}. \\" f\\"Along the way, {hero} was joined by {sidekick} and faced {obstacle}. \\" f\\"Through courage and wit, {hero} overcame the obstacles{ending}\\") print(story)"},{"question":"You are required to implement a function `find_longest_substring(s, k)` that finds the length of the longest substring of the given string `s` that contains at most `k` distinct characters. Function Signature: ```python def find_longest_substring(s, k): pass ``` Parameters: - `s` (str): A string consisting of English letters. - `k` (int): An integer representing the maximum number of distinct characters allowed in the substring. Returns: - `int`: The length of the longest substring that contains at most `k` distinct characters. Example: ```python s = \\"eceba\\" k = 2 result = find_longest_substring(s, k) print(result) ``` Expected Output: ``` 3 ``` Explanation: In the given example, the longest substring with at most 2 distinct characters is \\"ece\\", which has a length of 3. Requirements: To create an efficient solution, you must use the sliding window technique in combination with a hashmap (or dictionary) to track the frequency of each character within the window.","solution":"def find_longest_substring(s, k): Returns the length of the longest substring of s that contains at most k distinct characters. if k == 0: return 0 char_freq = {} left = 0 max_length = 0 for right in range(len(s)): char = s[right] if char in char_freq: char_freq[char] += 1 else: char_freq[char] = 1 while len(char_freq) > k: left_char = s[left] char_freq[left_char] -= 1 if char_freq[left_char] == 0: del char_freq[left_char] left += 1 current_length = right - left + 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are tasked with writing a function called `generate_invoice` for a small business application. This function will handle the creation of an invoice using given order details and update the inventory records in a SQLite database. # Function Details - **Inputs**: The function will take three arguments: 1. `customer_name` (string): The name of the customer. 2. `order_list` (list of tuples): Each tuple contains the product ID and the quantity ordered. 3. `database_file` (string): The name of the SQLite database file. - **Database Structure**: - `inventory` table with columns `product_id`, `product_name`, `price`, and `stock` (remaining stock of the product). - `invoices` table with columns `invoice_id` (auto-incremented), `customer_name`, `product_id`, `quantity`, `total_price`. # Requirements 1. Establish a connection to the provided `database_file` using SQLite. 2. For each product in the `order_list`: - Retrieve the product details (name, price, and stock) from the `inventory` table. - Verify that the ordered quantity does not exceed the available stock. - Calculate the total price for the order by multiplying the ordered quantity by the product price. - Update the `inventory` table to reduce the stock by the ordered quantity. - Insert a new record into the `invoices` table with the customer name, product ID, quantity, and calculated total price. 3. If any product in the `order_list` has an insufficient stock: - Print an error message indicating the product and terminate the function without making any database changes. 4. If all products have sufficient stock: - Print the generated invoice with all ordered products, their prices, and the total amount due. # Task Implement the function `generate_invoice` following the guidelines provided, ensuring proper database interactions and error handling. ---","solution":"import sqlite3 def generate_invoice(customer_name, order_list, database_file): Generates an invoice for the given order and updates the inventory. Arguments: customer_name: str - The name of the customer. order_list: list of tuples - List of (product_id, quantity) tuples. database_file: str - SQLite database file name. Returns None. Prints the invoice or an error message. try: conn = sqlite3.connect(database_file) cursor = conn.cursor() # List to hold generated invoice details invoice_details = [] total_amount_due = 0 # Check all products for sufficient stock for product_id, quantity in order_list: cursor.execute(\\"SELECT product_name, price, stock FROM inventory WHERE product_id = ?\\", (product_id,)) product = cursor.fetchone() if product is None: print(f\\"Error: Product with ID {product_id} does not exist.\\") return product_name, price, stock = product if quantity > stock: print(f\\"Error: Insufficient stock for product \'{product_name}\' (ID: {product_id}).\\") return total_price = quantity * price invoice_details.append((customer_name, product_id, quantity, total_price)) total_amount_due += total_price # If no errors, proceed to update the inventory and insert the invoice records for customer_name, product_id, quantity, total_price in invoice_details: cursor.execute(\\"UPDATE inventory SET stock = stock - ? WHERE product_id = ?\\", (quantity, product_id)) cursor.execute(\\"INSERT INTO invoices (customer_name, product_id, quantity, total_price) VALUES (?, ?, ?, ?)\\", (customer_name, product_id, quantity, total_price)) conn.commit() # Print the invoice details print(\\"Invoice Generated:\\") print(\\"=================\\") for customer_name, product_id, quantity, total_price in invoice_details: print(f\\"Product ID: {product_id}, Quantity: {quantity}, Total Price: {total_price:.2f}\\") print(\\"=================\\") print(f\\"Total Amount Due: {total_amount_due:.2f}\\") except sqlite3.Error as e: print(f\\"Database error: {e}\\") finally: if conn: conn.close()"},{"question":"You are tasked with writing a Python function `factorial_digit_sum(n)` that calculates the sum of the digits of the factorial of a given positive integer (n). The factorial of a non-negative integer ( n ), denoted as ( n! ), is the product of all positive integers less than or equal to ( n ). Your function, `factorial_digit_sum`, should take one input: 1. `n` (an integer, ( n geq 1 )): The number to compute the factorial of. The function should return the sum of the digits of the factorial of (n). To compute the factorial, use the `math.factorial` function from the Python `math` library. **Example:** ```python print(factorial_digit_sum(5)) # Expected to calculate 5! = 120 and return the sum of the digits, which is 1 + 2 + 0 = 3 ``` **Constraints:** - Use the `math.factorial` function to compute the factorial. - The input `n` will always be a positive integer.","solution":"import math def factorial_digit_sum(n): Calculates the sum of the digits of the factorial of a given positive integer n. factorial = math.factorial(n) digit_sum = sum(int(digit) for digit in str(factorial)) return digit_sum"},{"question":"You are required to write a Python function named `matrix_diagonal_sum` that calculates the sum of the elements on the primary diagonal of a given square matrix. The function should accept a 2D list (NxN matrix) as its argument and return an integer representing the sum. The primary diagonal of a matrix comprises elements from the top-left to the bottom-right of the matrix (i.e., elements at positions (0,0), (1,1), (2,2), etc.). For example, given the following 3x3 matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The primary diagonal elements are: 1, 5, and 9. Therefore, the function should return 15 (i.e., 1 + 5 + 9). The main structure of the function should look like this: ```python def matrix_diagonal_sum(matrix): # Implement the function to calculate the primary diagonal sum pass ``` Ensure you: - Iterate over the elements on the primary diagonal of the provided square matrix. - Correctly calculate the sum of these diagonal elements. - Return the resultant sum as an integer. You don\'t need to handle user input or output for this problem.","solution":"def matrix_diagonal_sum(matrix): Calculate the sum of the primary diagonal elements of a given square matrix. Args: matrix (list of list of int): 2D list representing the square matrix. Returns: int: Sum of the primary diagonal elements. return sum(matrix[i][i] for i in range(len(matrix)))"},{"question":"You are tasked with creating a function to identify the most frequent string pattern in a given list of strings. Each string can be thought of as a \\"pattern\\" of characters. Your goal is to find the pattern that occurs most frequently in the input list and determine its frequency of occurrence. To achieve this, you will: 1. Traverse the list of strings and count the occurrence of each unique string. 2. Determine the string with the highest frequency. 3. If there are multiple strings with the same highest frequency, return the lexicographically smallest one. 4. Return a tuple containing the most frequent string and its count. Your function should be named `find_most_frequent_pattern` and have the following signature: ```python from typing import List, Tuple from collections import Counter def find_most_frequent_pattern(strings: List[str]) -> Tuple[str, int]: ... ``` **Input:** - `strings` (List[str]): A list of strings representing the patterns. **Output:** - A tuple containing: - The most frequent string (pattern). - The count of its occurrences. **Constraints:** - The list of strings will contain at least one string. - All strings will have a length of at most 100 characters. # Example ```python patterns = [\\"abc\\", \\"def\\", \\"abc\\", \\"ghi\\", \\"def\\", \\"abc\\"] print(find_most_frequent_pattern(patterns)) # Output: (\\"abc\\", 3) patterns = [\\"abc\\", \\"def\\", \\"def\\", \\"ghi\\", \\"ghi\\"] print(find_most_frequent_pattern(patterns)) # Output: (\\"def\\", 2) ```","solution":"from typing import List, Tuple from collections import Counter def find_most_frequent_pattern(strings: List[str]) -> Tuple[str, int]: Finds the most frequent string pattern in the list of strings and its frequency. If there are multiple strings with the same highest frequency, the lexicographically smallest one is returned. Args: strings (List[str]): A list of strings representing the patterns. Returns: Tuple[str, int]: A tuple containing the most frequent string and its count. # Count the occurrences of each string string_count = Counter(strings) # Find the maximum frequency max_frequency = max(string_count.values()) # Find the strings with the maximum frequency most_frequent_patterns = [pattern for pattern, count in string_count.items() if count == max_frequency] # Return the lexicographically smallest pattern with its frequency return min(most_frequent_patterns), max_frequency"},{"question":"In graph theory, Depth-First Search (DFS) is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node and explores as far as possible along each branch before backtracking. This problem involves implementing the DFS algorithm to determine the traversal order of a given graph. Your task is to write a function `dfs_traversal` that performs a depth-first search on a graph represented as an adjacency list and returns the order of traversal. Function Signature ```python def dfs_traversal(graph: Dict[int, List[int]], start: int) -> List[int]: ``` Parameters - `graph` (Dictionary of integers to lists of integers): The graph represented as an adjacency list where the keys are node labels and the values are lists of neighboring nodes. - `start` (integer): The starting node for the DFS traversal. Returns - `List of integers`: The list of nodes in the order they are visited during the DFS traversal. Example Given the graph: ```python { 0: [1, 2], 1: [0, 3, 4], 2: [0], 3: [1], 4: [1, 5], 5: [4] } ``` and a starting node of `0`, a possible DFS traversal order is: ```python [0, 1, 3, 4, 5, 2] ``` Constraints - The graph is connected and undirected. - There are no duplicate edges or self-loops in the graph. - All nodes have unique integer labels. - The graph may contain up to 1000 nodes. Use this [Documentation](https://en.wikipedia.org/wiki/Depth-first_search) for reference on the Depth-First Search algorithm.","solution":"def dfs_traversal(graph, start): Perform DFS traversal on a graph. :param graph: Dictionary of integers to lists of integers representing the adjacency list of the graph. :param start: Integer representing the starting node for the DFS traversal. :return: List of integers in the order they are visited during the DFS traversal. visited = [] stack = [start] while stack: node = stack.pop() if node not in visited: visited.append(node) # Add the neighbors in reverse order to visit them in the correct order stack.extend(reversed(graph[node])) return visited"},{"question":"Create a function that takes a list of integers and returns a tuple containing two elements. The first element is a list of integers that are the cumulative sum of the input list. The second element is a line plot that visualizes the cumulative sum over the original index positions. The function should output: tuple: list: The cumulative sum of the input list. plt.Axes: An Axes object with the line plot of the cumulative sum. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt def task_func(numbers): ``` Examples: ``` numbers = [1, 2, 3, 4] result = task_func(numbers) print(result[0]) # Output: [1, 3, 6, 10] result[1].show() ```","solution":"import matplotlib.pyplot as plt def task_func(numbers): Returns a tuple containing the cumulative sum list and a line plot of the cumulative sum. Args: numbers (list of int): The input list of integers. Returns: tuple: A tuple containing the cumulative sum list and the matplotlib Axes object. if not numbers: # Handle empty input list return ([], None) cum_sum = [] current_sum = 0 for number in numbers: current_sum += number cum_sum.append(current_sum) fig, ax = plt.subplots() ax.plot(range(len(cum_sum)), cum_sum, marker=\'o\', linestyle=\'-\') ax.set_title(\'Cumulative Sum Plot\') ax.set_xlabel(\'Index\') ax.set_ylabel(\'Cumulative Sum\') return (cum_sum, ax)"},{"question":"You are tasked with creating a function named `generate_reports` in Python, which will automate the process of creating and writing reports for a list of employees. The goal is to use the relevant libraries required in typical filesystem and CSV operations, specifically focusing on creating directories, files, and writing data to CSV files. Your function `generate_reports` should take two parameters: - `directory_name` (a string) - representing the name of the directory where all reports will be stored. - `employees` (a list of dictionaries) - each dictionary contains the following keys for an employee: - `\'name\'` (a string) - the employee\'s name - `\'id\'` (an integer) - the employee\'s ID - `\'department\'` (a string) - the department the employee works in - `\'salary\'` (a floating-point number) - the employee\'s salary Here\'s the detailed workflow of what the function should do: 1. **Check if the directory exists**: If the directory named `directory_name` already exists, print \\"The directory already exists\\" and terminate the program using `sys.exit()`. 2. **Create the reports directory**: If the directory does not exist, create it and if successful, print \\"Reports Directory Created\\". 3. **Generate a CSV file for each employee**: - For each employee in the `employees` list, create a CSV file named `{employee_id}_{employee_name}.csv` inside the new directory. - Write the following content into each CSV file: ```csv ID,Name,Department,Salary employee_id,employee_name,department,salary ``` - Print \\"Report for {employee_name} Created\\" after this operation. Use the `sys.exit()` function from the `sys` library to terminate the program when the directory already exists. # Required Libraries - `sys` - `os` - `csv` # Function Signature ```python def generate_reports(directory_name: str, employees: list) -> None: ``` # Examples 1. If the directory \\"EmployeeReports\\" does not exist: ```python employees = [ {\'name\': \'Alice\', \'id\': 1, \'department\': \'Engineering\', \'salary\': 100000.0}, {\'name\': \'Bob\', \'id\': 2, \'department\': \'Sales\', \'salary\': 80000.0} ] generate_reports(\\"EmployeeReports\\", employees) ``` Output: ``` Reports Directory Created Report for Alice Created Report for Bob Created ``` 2. If the directory \\"ExistingReports\\" already exists: ```python employees = [ {\'name\': \'Carol\', \'id\': 3, \'department\': \'HR\', \'salary\': 75000.0} ] generate_reports(\\"ExistingReports\\", employees) ``` Output: ``` The directory already exists ```","solution":"import os import csv import sys def generate_reports(directory_name: str, employees: list) -> None: if os.path.exists(directory_name): print(\\"The directory already exists\\") sys.exit() os.makedirs(directory_name) print(\\"Reports Directory Created\\") for employee in employees: filename = f\\"{employee[\'id\']}_{employee[\'name\']}.csv\\" filepath = os.path.join(directory_name, filename) with open(filepath, mode=\'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([\'ID\', \'Name\', \'Department\', \'Salary\']) writer.writerow([employee[\'id\'], employee[\'name\'], employee[\'department\'], employee[\'salary\']]) print(f\\"Report for {employee[\'name\']} Created\\")"},{"question":"You are required to implement a function that reads configuration settings from a YAML file and updates these settings based on user input. The function should be named `update_config_settings`. Utilize the `yaml` library to parse and update the YAML file. Here\'s the detailed breakdown of what the `update_config_settings` function should do: 1. **Read the YAML File:** - Assume the YAML file is named `config.yaml` and is located in the current directory. - The file contains configuration settings in key-value pairs. 2. **Update Settings:** - Prompt the user to input new values for specific configuration settings. For simplicity, assume a function `get_config_updates()` exists, which returns a dictionary with the updated configuration settings. This function can just be simulated for this problem. 3. **Write Back to YAML:** - Update the original `config.yaml` file with the new configuration settings. Ensure that the file is overwritten with the updated values and maintains a neat format. 4. **Output Updated Settings:** - Print out the updated configuration settings after writing them back to the file. Your task is to write the function `update_config_settings` which performs these operations. # Example: Given the initial YAML file content: ```yaml server: localhost port: 8080 enable_logging: true ``` If the user inputs updates are: ``` server: 192.168.1.1 enable_logging: false ``` The YAML file after updating should look like: ```yaml server: 192.168.1.1 port: 8080 enable_logging: false ``` And the function should print the updated settings: ``` { \\"server\\": \\"192.168.1.1\\", \\"port\\": 8080, \\"enable_logging\\": false } ``` # Note: You don\'t need to handle user input validation or error handling robustly in this problem. Assume the `get_config_updates()` function is provided and correctly works and that the YAML file exists and is properly formatted. # Constraints: - The configuration settings in the YAML file must be updated in place. - Assume all necessary libraries (`yaml`) are already installed.","solution":"import yaml def get_config_updates(): Simulated function that returns a dictionary of configuration updates. In a real application, this function could get input from the user or another source. return { \\"server\\": \\"192.168.1.1\\", \\"enable_logging\\": False } def update_config_settings(): # Step 1: Read the YAML File with open(\\"config.yaml\\", \\"r\\") as file: config = yaml.safe_load(file) # Step 2: Update Settings updates = get_config_updates() config.update(updates) # Step 3: Write Back to YAML with open(\\"config.yaml\\", \\"w\\") as file: yaml.safe_dump(config, file, default_flow_style=False) # Step 4: Output Updated Settings print(config)"},{"question":"**Problem Statement:** You are given a list of transactions where each transaction is represented as a dictionary containing \'id\', \'amount\', and \'type\' keys. Your task is to write a Python function `filter_and_summarize(transactions, min_amount, transaction_type)` to perform the following operations: 1. Filter the transactions to include only those with \'amount\' greater than `min_amount` and \'type\' matching `transaction_type`. 2. Sort the filtered transactions by \'amount\' in descending order. 3. Calculate the total sum of the \'amount\' for the filtered transactions. 4. Return the sorted list of filtered transactions and the calculated sum as a tuple. **Function Signature:** ```python def filter_and_summarize(transactions: list, min_amount: float, transaction_type: str) -> tuple: pass ``` **Transaction Structure:** - Each transaction is a dictionary with the following structure: ```python { \'id\': int, \'amount\': float, \'type\': str } ``` **Constraints:** - The \'id\' is a unique integer identifier for the transaction. - The \'amount\' is a floating point number representing the transaction amount. - The \'type\' is a string indicating the type of transaction (e.g., \'debit\', \'credit\'). **Example:** Assume the input list of transactions is as follows: ```python transactions = [ {\'id\': 1, \'amount\': 150.0, \'type\': \'debit\'}, {\'id\': 2, \'amount\': 100.0, \'type\': \'credit\'}, {\'id\': 3, \'amount\': 200.0, \'type\': \'debit\'}, {\'id\': 4, \'amount\': 50.0, \'type\': \'debit\'}, {\'id\': 5, \'amount\': 300.0, \'type\': \'credit\'} ] ``` The function call `filter_and_summarize(transactions, 100.0, \'debit\')` should return: ```python ( [ {\'id\': 3, \'amount\': 200.0, \'type\': \'debit\'}, {\'id\': 1, \'amount\': 150.0, \'type\': \'debit\'} ], 350.0 ) ``` In this example, the filtered and sorted transactions are those with \'amount\' greater than 100.0 and \'type\' as \'debit\'. The total sum of the \'amount\' for these transactions is 350.0.","solution":"def filter_and_summarize(transactions, min_amount, transaction_type): Filters transactions by minimum amount and type, sorts them, and summarizes the amount. :param transactions: List of transaction dictionaries. :param min_amount: Minimum amount threshold. :param transaction_type: Type of transaction to filter on. :return: Tuple of sorted filtered transactions and their summed amount. # Filter transactions based on the criteria filtered_transactions = [tx for tx in transactions if tx[\'amount\'] > min_amount and tx[\'type\'] == transaction_type] # Sort the filtered transactions by amount in descending order sorted_transactions = sorted(filtered_transactions, key=lambda x: x[\'amount\'], reverse=True) # Calculate the total sum of the \'amount\' for the filtered transactions total_sum = sum(tx[\'amount\'] for tx in sorted_transactions) return sorted_transactions, total_sum"},{"question":"Write a function to read data from a CSV file containing information about different products. The function should filter out products based on a specified price range and availability status, and then sort the filtered products by a specified column. Finally, save the filtered and sorted data into a new CSV file. The function should raise the exception for: FileNotFoundError: If the input CSV file does not exist. ValueError: If the specified column for sorting is not in the DataFrame or if no data remains after filtering. Return the number of products in the filtered data. The function should output: int: The number of products in the filtered data. You should write self-contained code starting with: ``` import pandas as pd def filter_and_sort_products(input_csv_file, output_csv_file, price_range, availability, sort_column): ```","solution":"import pandas as pd def filter_and_sort_products(input_csv_file, output_csv_file, price_range, availability, sort_column): try: # Read data from CSV file df = pd.read_csv(input_csv_file) except FileNotFoundError: raise FileNotFoundError(f\\"The file `{input_csv_file}` does not exist.\\") # Filter the data based on price range and availability filtered_df = df[(df[\'price\'] >= price_range[0]) & (df[\'price\'] <= price_range[1]) & (df[\'availability\'] == availability)] if filtered_df.empty: raise ValueError(\\"No data available after applying the filters.\\") if sort_column not in filtered_df.columns: raise ValueError(f\\"The column `{sort_column}` does not exist in the DataFrame.\\") # Sort the filtered data by the specified column sorted_df = filtered_df.sort_values(by=sort_column) # Save the filtered and sorted data to a new CSV file sorted_df.to_csv(output_csv_file, index=False) # Return the number of products in the filtered data return len(sorted_df)"},{"question":"You are tasked with implementing a function called `merge_k_sorted_lists`, which takes a list of k sorted integer lists and returns a single sorted list containing all elements from the input lists. Your task is to effectively use specific Python libraries to achieve an optimal solution. Specifically, you are required to utilize the following: 1. `heapq.heappush` - This function helps you to push a new item onto the heap, maintaining the heap invariant. 2. `heapq.heappop` - This function helps you to pop and return the smallest item from the heap, maintaining the heap invariant. 3. `heapq.merge` - This function enables you to merge multiple sorted inputs into one sorted output. # Function Signature ```python def merge_k_sorted_lists(lists: List[List[int]]) -> List[int]: ``` # Input - `lists`: A list of `List[int]`, where each `List[int]` is sorted in non-decreasing order. # Output - The function should return a single `List[int]`, which contains all elements from the input lists in non-decreasing order. # Example ```python assert merge_k_sorted_lists([[1, 4, 5], [1, 3, 4], [2, 6]]) == [1, 1, 2, 3, 4, 4, 5, 6] assert merge_k_sorted_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9] ``` # Constraints 1. You must use the `heapq.heappush`, `heapq.heappop`, and `heapq.merge` libraries. 2. Assume each individual list is already sorted in non-decreasing order. 3. Consider edge cases like empty lists or a mix of empty and non-empty lists. # Tips - Utilize a min-heap to keep track of the smallest elements across the k lists. - Use `heapq.merge` for a straightforward implementation. - Handle lists of varying lengths gracefully.","solution":"import heapq def merge_k_sorted_lists(lists): Merges k sorted lists into a single sorted list. Parameters: lists (List[List[int]]): A list of k sorted lists. Returns: List[int]: A single sorted list containing all elements from the input lists. merged_list = list(heapq.merge(*lists)) return merged_list"},{"question":"In this problem, you are tasked with implementing a function called `detect_and_replace` which will analyze a given text string to find and replace all email addresses with a placeholder text \\"[EMAIL SCRUBBED]\\". The function will adhere to the following detailed requirements: 1. The function should take in a string `text` that contains one or more sentences. 2. It should use regular expressions to identify email addresses within the text. Assume email addresses follow the general form `username@domain.extension`. 3. For simplicity, consider email addresses that: - Have alphanumeric characters for the username (you can include dots, underscores, and hyphens optionally). - The domain part contains only alphanumeric characters and may include dots (.) between them. - The extension consists of only alphabetical characters (2 to 4 characters long). 4. Each detected email address should be replaced with the text \\"[EMAIL SCRUBBED]\\". 5. The function should return the modified text string. Here is the prototype of the function you need to implement: ```python def detect_and_replace(text): # Your code goes here ``` Here is an example input and output: Example: ```python text = \\"Please contact us at support@example.com for further assistance. Alternatively, you can email john.doe123@domain.co.uk.\\" result = detect_and_replace(text) print(result) # Output: \\"Please contact us at [EMAIL SCRUBBED] for further assistance. Alternatively, you can email [EMAIL SCRUBBED].\\" ```","solution":"import re def detect_and_replace(text): This function analyzes the given text string to find and replace all email addresses with \\"[EMAIL SCRUBBED]\\". Args: text (str): The input text containing one or more sentences. Returns: str: The modified text with email addresses replaced by \\"[EMAIL SCRUBBED]\\". # Regular expression pattern to identify email addresses email_pattern = r\'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}\' # Replacing email addresses with \\"[EMAIL SCRUBBED]\\" modified_text = re.sub(email_pattern, \\"[EMAIL SCRUBBED]\\", text) return modified_text"},{"question":"**Title:** Weather Data Analyzer **Objective:** Create a function named `analyze_weather_data(data: List[Dict[str, Union[str, int]]]) -> Dict[str, Union[float, str]]` that processes a list of weather data dictionaries and returns a dictionary containing the average temperature, average humidity, and the date with the highest temperature. **Detailed Requirements:** 1. The input data is a list of dictionaries, each containing weather information for a given day. Each dictionary has the keys \'date\' (a string in \\"YYYY-MM-DD\\" format), \'temperature\' (an integer representing the temperature in Celsius), and \'humidity\' (an integer representing the humidity percentage). 2. The function should calculate the average temperature and average humidity across all the provided data. 3. The function should identify the date with the highest temperature. 4. Return a dictionary with the following structure: - \'average_temperature\': Average temperature as a float rounded to 2 decimal places. - \'average_humidity\': Average humidity as a float rounded to 2 decimal places. - \'hottest_day\': Date string (in \\"YYYY-MM-DD\\" format) with the highest temperature. **Function Signature:** ```python def analyze_weather_data(data: List[Dict[str, Union[str, int]]]) -> Dict[str, Union[float, str]]: pass ``` **Example Input:** ```python data = [ {\\"date\\": \\"2023-01-01\\", \\"temperature\\": 5, \\"humidity\\": 80}, {\\"date\\": \\"2023-01-02\\", \\"temperature\\": 7, \\"humidity\\": 85}, {\\"date\\": \\"2023-01-03\\", \\"temperature\\": 6, \\"humidity\\": 82} ] ``` **Example Output:** ```python { \\"average_temperature\\": 6.00, \\"average_humidity\\": 82.33, \\"hottest_day\\": \\"2023-01-02\\" } ``` **Notes:** - Handle cases where the input list is empty by returning averages as 0.0 and an empty string for the hottest day. - Ensure appropriate error handling for invalid data formats or types. - Assume all dates in the input data are unique and properly formatted.","solution":"from typing import List, Dict, Union def analyze_weather_data(data: List[Dict[str, Union[str, int]]]) -> Dict[str, Union[float, str]]: Processes a list of weather data dictionaries and returns a dictionary containing the average temperature, average humidity, and the date with the highest temperature. if not data: return { \\"average_temperature\\": 0.0, \\"average_humidity\\": 0.0, \\"hottest_day\\": \\"\\" } total_temperature = 0 total_humidity = 0 hottest_day = data[0][\\"date\\"] highest_temperature = data[0][\\"temperature\\"] for entry in data: total_temperature += entry[\\"temperature\\"] total_humidity += entry[\\"humidity\\"] if entry[\\"temperature\\"] > highest_temperature: highest_temperature = entry[\\"temperature\\"] hottest_day = entry[\\"date\\"] average_temperature = round(total_temperature / len(data), 2) average_humidity = round(total_humidity / len(data), 2) return { \\"average_temperature\\": average_temperature, \\"average_humidity\\": average_humidity, \\"hottest_day\\": hottest_day }"},{"question":"You are tasked with writing a function called `filter_and_save_even_numbers` which reads data from a given text file and filters out all the even numbers. The function should then write these even numbers into a new text file called `even_numbers.txt`. Your function should: 1. Open and read the input text file. 2. Filter out all the even numbers from the content of the file. 3. Write the filtered even numbers into a new text file named `even_numbers.txt`, each on a new line. The function signature should be: ```python def filter_and_save_even_numbers(file_path: str) -> None: # your function implementation here ``` Here is an example of what the input text file might look like: ``` 3 44 21 18 7 60 35 22 ``` The output text file `even_numbers.txt` should look like this: ``` 44 18 60 22 ```","solution":"def filter_and_save_even_numbers(file_path: str) -> None: with open(file_path, \'r\') as f: numbers = f.readlines() even_numbers = [number.strip() for number in numbers if int(number) % 2 == 0] with open(\'even_numbers.txt\', \'w\') as f: for number in even_numbers: f.write(f\\"{number}n\\")"},{"question":"Create a function called `generate_password` that generates a random password according to the following rules: 1. Length of the password should be 12 characters. 2. The password must contain at least: - One uppercase letter - One lowercase letter - One digit - One special character (from the set `!@#%^&*()-_=+`) 3. The password should be randomly shuffled to ensure a mix of all the required characters. You must use Python\'s `random` and `string` modules to generate and shuffle the password. # Function Signature ```python def generate_password(): pass ``` # Example Output An example of a generated password might be: ``` A8rkf9Gb1p@ ``` **Note:** The actual output will vary each time you run the function because of the randomness involved.","solution":"import random import string def generate_password(): Generates a random password that is 12 characters long, containing at least one uppercase letter, one lowercase letter, one digit, and one special character. special_characters = \\"!@#%^&*()-_=+\\" password = [ random.choice(string.ascii_uppercase), # One uppercase letter random.choice(string.ascii_lowercase), # One lowercase letter random.choice(string.digits), # One digit random.choice(special_characters) # One special character ] # Fill the rest of the password length with random characters from all allowed sets all_characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + special_characters for _ in range(8): password.append(random.choice(all_characters)) # Shuffle the resulting list to ensure randomness random.shuffle(password) # Join the list into a single string and return return \'\'.join(password)"},{"question":"** You are required to implement a function in Python that determines the most frequently occurring word in a given text string. The function should be named `most_frequent_word` and accept a single parameter: 1. `text` (str): A string containing the input text. The function should return a tuple with two elements: 1. A string representing the most frequent word. 2. An integer representing the occurrence count of that word. In the case of a tie (i.e., multiple words have the same highest frequency), return the word that appears first in the text string. For the purpose of this task, words are defined as sequences of characters separated by spaces, punctuation, or other non-alphanumeric characters. You can assume that the input string consists of words made up of alphabetic characters and spaces only. Do not use any external libraries for text processing. Instead, utilize Python\'s built-in string handling functions and collections module where necessary. **Hints:** - Consider using the `collections.Counter` class to count the occurrences of each word. - You may find the `str.split()` method useful to break the text into words. **Example Usage:** ```python result = most_frequent_word(\\"hello world hello\\") print(result) ``` **Expected Output:** ``` (\'hello\', 2) ``` **Another Example Usage:** ```python result = most_frequent_word(\\"a quick brown fox jumps over the lazy dog a quick dog\\") print(result) ``` **Expected Output:** ``` (\'a\', 2) ```","solution":"from collections import Counter import string def most_frequent_word(text): Returns the most frequently occurring word in the given text and its count. If there is a tie, returns the word that appears first in the text. Args: text (str): A string containing the input text. Returns: (str, int): A tuple with the most frequent word and its occurrence count. # Remove punctuation and convert text to lowercase text = text.translate(str.maketrans(\'\', \'\', string.punctuation)).lower() words = text.split() # Count the frequency of each word counter = Counter(words) # Find the word with the maximum frequency most_common_word, max_count = None, 0 for word in words: if counter[word] > max_count: most_common_word, max_count = word, counter[word] return (most_common_word, max_count)"},{"question":"Given a string representing a mathematical expression containing only digits and the operators \'+\', \'-\', \'*\', and \'/\', write a function that evaluates and returns the result of the expression. The function should parse the expression and compute the result with the correct order of operations. You may assume the input expression is always valid and does not contain any whitespace or parentheses. You should write self-contained code starting with: ``` def evaluate_expression(expression): ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing only digits and the operators \'+\', \'-\', \'*\', and \'/\'. Returns the result of the expression. def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left / right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 values.append(num) else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"You are required to write a function `find_path` that finds and returns the shortest path in a given grid from the top-left corner to the bottom-right corner, navigating only through cells containing 1. You can only move up, down, left, or right. The grid is represented as a 2D list of 1s and 0s, where 1 represents a navigable cell and 0 represents an obstacle. # Function Signature ```python from collections import deque def find_path(grid): Parameters: grid (list of list of int): 2D grid of integers where each cell is either 1 (navigable) or 0 (obstacle). Returns: list of tuple of int: List of coordinates representing the shortest path. Each coordinate is a tuple (row, col). pass ``` # Requirements: 1. **Breadth-First Search (BFS):** Implement BFS to explore the shortest path from the top-left corner to the bottom-right corner. 2. **Edge Cases:** Consider edge cases where there is no possible path from the start to the destination. 3. **Path Tracking:** Track and return the actual path taken in order of the visited cells. # Example: ```python grid = [ [1, 0, 0, 1, 1], [1, 1, 1, 0, 1], [0, 1, 0, 0, 1], [1, 1, 1, 1, 1] ] path = find_path(grid) print(path) # Output might be something like [(0, 0), (1, 0), (1, 1), (2, 1), (3, 1), (3, 2), (3, 3), (3, 4)] ``` # Constraints: - The size of the grid (number of rows and columns) can range from 1 to 100. - The grid will have at least one cell where the start and destination are navigable (i.e., grid[0][0] == 1 and grid[-1][-1] == 1). ---","solution":"from collections import deque def find_path(grid): Finds the shortest path from the top-left corner to the bottom-right corner in the given grid. Parameters: grid (list of list of int): 2D grid of integers where each cell is either 1 (navigable) or 0 (obstacle). Returns: list of tuple of int: List of coordinates representing the shortest path. Each coordinate is a tuple (row, col). Returns an empty list if there is no path. if not grid or grid[0][0] == 0 or grid[-1][-1] == 0: return [] rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0)]) visited = set([(0, 0)]) parent_map = {} while queue: current = queue.popleft() if current == (rows-1, cols-1): path = [] while current: path.append(current) current = parent_map.get(current, None) return path[::-1] for direction in directions: new_row, new_col = current[0] + direction[0], current[1] + direction[1] if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row][new_col] == 1: new_cell = (new_row, new_col) if new_cell not in visited: visited.add(new_cell) parent_map[new_cell] = current queue.append(new_cell) return []"},{"question":"** Design a function `matrix_chain_multiplication(dims)` that determines the minimum number of scalar multiplications needed to compute the product of a chain of matrices. The function should implement the Matrix Chain Multiplication algorithm using dynamic programming. # Explanation Given a chain of `n` matrices, where the dimensions of the `i`th matrix are represented by `dims[i-1]` x `dims[i]`, the goal is to determine the optimal multiplication order that minimizes the number of scalar multiplications required. # Example Suppose we have 4 matrices with dimensions: - Matrix A1: 10 x 20 - Matrix A2: 20 x 30 - Matrix A3: 30 x 40 - Matrix A4: 40 x 30 The `dims` array representing these matrices would be `[10, 20, 30, 40, 30]`. # Function Signature ```python def matrix_chain_multiplication(dims: list[int]) -> int: pass ``` # Input - `dims`: A list of integers where `dims[i-1]` x `dims[i]` represents the dimensions of the `i`th matrix. The length of `dims` is `n + 1` for `n` matrices. # Output - The function should return an integer representing the minimum number of scalar multiplications needed. # Requirements 1. Use dynamic programming to compute the minimum number of multiplications. 2. Create a table to store intermediate results. # Constraints - The length of `dims` will be at least 2 and at most 100. - All values in `dims` will be positive integers less than or equal to 1000. **Hint:** Use a 2D array `dp` where `dp[i][j]` stores the minimum number of multiplications needed to compute the product of matrices from `i` to `j`. # Example Implementation Consider the array `dims = [10, 20, 30, 40, 30]` representing the matrices dimensions. The function call `matrix_chain_multiplication(dims)` should return `30000`. The optimal order of multiplication in this example is: - First, multiply matrices A2 and A3 (20 x 30) and (30 x 40), resulting in 24000 multiplications. - Then, multiply the resulting matrix with A4 (40 x 30), adding 36000 multiplications. - Finally, multiply the resulting matrix with A1 (10 x 20), adding 6000 multiplications. - The total is `24000 + 36000 + 6000 = 66000` scalar multiplications. **Expected Output** The function should return the minimum number of multiplications, which for the example provided would be 30000. ```python dims = [10, 20, 30, 40, 30] matrix_chain_multiplication(dims) # Expected Output: 30000 ``` **","solution":"def matrix_chain_multiplication(dims: list[int]) -> int: Compute the minimum number of scalar multiplications needed to compute the product of a chain of matrices using dynamic programming. :param dims: List of dimensions such that the i-th matrix has dimensions dims[i-1] x dims[i]. :return: Minimum number of scalar multiplications. n = len(dims) - 1 # Number of matrices dp = [[0]*n for _ in range(n)] for length in range(2, n + 1): # length of the subchain for i in range(n - length + 1): j = i + length - 1 dp[i][j] = float(\'inf\') for k in range(i, j): q = dp[i][k] + dp[k + 1][j] + dims[i] * dims[k + 1] * dims[j + 1] if q < dp[i][j]: dp[i][j] = q return dp[0][n - 1]"},{"question":"Your task is to write a function called `complex_addition` that adds two complex numbers. A complex number is represented as a tuple of two integers (or floats), where the first element is the real part and the second element is the imaginary part. The function will receive two parameters, `c1` and `c2`, which are the complex numbers to be added. The function will return a tuple representing the resultant complex number from the addition. # Guidelines: 1. Implement the function `complex_addition` with the following signature: ```python def complex_addition(c1, c2): ``` 2. Each parameter, `c1` and `c2`, will be a tuple of two integers (or floats). 3. The function should return a tuple containing the real part and the imaginary part of the resulting complex number. # Example: ```python result = complex_addition((3, 2), (1, 7)) print(result) # Expected output: (4, 9) ``` In this example, the first complex number is (3 + 2i) and the second is (1 + 7i). The resulting complex number after addition is (4 + 9i).","solution":"def complex_addition(c1, c2): Adds two complex numbers represented as tuples. Args: c1 (tuple): The first complex number as a tuple (real1, imag1). c2 (tuple): The second complex number as a tuple (real2, imag2). Returns: tuple: The resultant complex number as a tuple (real, imag). real = c1[0] + c2[0] imag = c1[1] + c2[1] return (real, imag)"},{"question":"Your task is to create a function named `aggregate_sales_data(start: int = 2015, end: int = 2020) -> pd.DataFrame` that fetches monthly sales data from a series of JSON files stored in a local directory and aggregates them into a single Pandas DataFrame. Each year\'s data is subdivided into numerous monthly JSON files with the following path structure: ``` /data/sales/<year>/<month>.json ``` # Requirements: 1. **Input Parameters:** - `start`: An integer representing the starting year (inclusive). Default is 2015. - `end`: An integer representing the ending year (inclusive). Default is 2020. 2. **Output:** - The function should return an aggregated Pandas DataFrame containing all sales data from the specified years and months. 3. **Constraints:** - The valid range for years is from 2015 through 2020, inclusive. - You must use the `pandas.concat` function to concatenate the data frames. - Handle missing files or invalid dates gracefully, skipping any months where data files are not found. # Function Behavior: - The function should iterate through each year from `start` to `end`, and for each year, loop through each month from January to December (1 to 12). - Convert the year and month to a zero-padded format to locate the corresponding JSON file. - Read each JSON file into a DataFrame, and populate a dictionary where keys represent the year and month, and values are the DataFrames for those periods. - Use `pd.concat` to combine these DataFrames into a single DataFrame. - Return this aggregated DataFrame. # Example: Suppose the directories and files in your local system are structured as specified. If you call `aggregate_sales_data(2018, 2019)`, it should read the JSON files: ``` /data/sales/2018/01.json /data/sales/2018/02.json ... /data/sales/2018/12.json /data/sales/2019/01.json ... /data/sales/2019/12.json ``` And then return a combined DataFrame containing sales data from all specified months. # Libraries and Functions: - Use the `pandas` library to handle JSON file reading and DataFrame operations. - Use the `pandas.concat` function to combine the DataFrames. Ensure that the code handles edge cases such as missing files, invalid date inputs, and partial data gracefully.","solution":"import pandas as pd import os def aggregate_sales_data(start: int = 2015, end: int = 2020) -> pd.DataFrame: # Initialize an empty list to store individual DataFrames frames = [] # Loop over each year from start to end inclusive for year in range(start, end + 1): for month in range(1, 13): # Format year and month to zero-padded strings year_str = str(year) month_str = f\\"{month:02d}\\" # Construct the file path file_path = f\\"./data/sales/{year_str}/{month_str}.json\\" # Check if file exists if os.path.exists(file_path): try: # Read the JSON file into a DataFrame df = pd.read_json(file_path) frames.append(df) except ValueError as e: # Handling the case where JSON is malformed or cannot be read print(f\\"Error reading {file_path}: {e}\\") else: print(f\\"File not found: {file_path}\\") # Concatenate all accumulated DataFrames if frames: result = pd.concat(frames, ignore_index=True) else: result = pd.DataFrame() # Return an empty DataFrame if no frames have been collected return result"},{"question":"Your task is to implement a function `denest_list` that takes a nested list as input and returns a list flattened to one dimension, while maintaining the order of the original elements. Nested lists can contain elements that are lists themselves, and these lists can be arbitrarily deep. You cannot use any pre-built flattening functions like `itertools.chain` or specialized flattening libraries; instead, you should implement the flattening logic from scratch. The specific requirements that should be met are: 1. If the input list is empty, return an empty list. 2. If the input is not a list, return an empty list. 3. Recursively traverse any list elements to extract all non-list items and include them in the result. 4. Maintain the ordering of elements as they appear in the original nested list. Function Signature: ```python def denest_list(nested_list) -> list: ``` Example: ```python assert denest_list([1, [2, [3, 4], 5], 6]) == [1, 2, 3, 4, 5, 6] assert denest_list([[[1]], 2, [[3, [4, 5]]], 6, []]) == [1, 2, 3, 4, 5, 6] assert denest_list([]) == [] assert denest_list([1, 2, 3]) == [1, 2, 3] assert denest_list(None) == [] ```","solution":"def denest_list(nested_list): Flattens a nested list to a one-dimensional list. If the input is not a list or is empty, returns an empty list. if not isinstance(nested_list, list): return [] flat_list = [] def flatten(nested): for element in nested: if isinstance(element, list): flatten(element) else: flat_list.append(element) flatten(nested_list) return flat_list"},{"question":"The Knapsack Problem is a well-known optimization problem. You are given a set of items, each with a weight and a value. Determine the maximum value you can achieve with a given weight capacity of the knapsack, where you can also take fractional quantities of an item (i.e., the Fractional Knapsack Problem). Your task is to write a function `fractional_knapsack(capacity: float, weights: List[float], values: List[float]) -> float` that solves the problem using a greedy algorithm. The function should return the maximum value achievable with the given capacity. 1. Initialize the total value to zero and the remaining capacity to the knapsack\'s capacity. 2. For each item, calculate its value-to-weight ratio. 3. Sort the items by their value-to-weight ratio in descending order. 4. Iterate over the sorted items and add as much of each item to the knapsack as possible without exceeding the capacity. 5. If the remaining capacity is less than the current item\'s weight, add a fraction of the item to the knapsack to fill it completely. **Input**: - `capacity`: A float representing the maximum weight the knapsack can hold. - `weights`: A list of floats where `weights[i]` is the weight of the `i`-th item. - `values`: A list of floats where `values[i]` is the value of the `i`-th item. **Output**: - A float representing the maximum value achievable with the given capacity. **Example**: ```python capacity = 50.0 weights = [10.0, 20.0, 30.0] values = [60.0, 100.0, 120.0] max_value = fractional_knapsack(capacity, weights, values) print(max_value) # Output: 240.0 ``` **Notes**: - Ensure that you sort the items by their value-to-weight ratio before taking them. - The function should handle the case where you can only take a fraction of an item due to capacity constraints. - Utilize appropriate data structures to maintain code efficiency and clarity.","solution":"from typing import List def fractional_knapsack(capacity: float, weights: List[float], values: List[float]) -> float: Returns the maximum value achievable with the given capacity using fractional knapsack. :param capacity: The maximum weight the knapsack can hold. :param weights: A list of weights of the items. :param values: A list of values of the items. :return: The maximum value achievable. # Calculate value to weight ratio for each item items = [(values[i] / weights[i], weights[i], values[i]) for i in range(len(weights))] # Sort items by value to weight ratio in descending order items.sort(key=lambda x: x[0], reverse=True) total_value = 0.0 remaining_capacity = capacity for value_to_weight_ratio, weight, value in items: if remaining_capacity == 0: break if weight <= remaining_capacity: # If the item can fit into the knapsack completely total_value += value remaining_capacity -= weight else: # If we can only take a fraction of the item fraction = remaining_capacity / weight total_value += value * fraction remaining_capacity = 0 # Knapsack is full return total_value"},{"question":"You are tasked with building a scoring system for a quiz application. For this problem, you need to write a function called `calculate_score()` that takes a list of answers provided by a user and a list of correct answers, and calculates the user\'s total score based on the following criteria: - Each correct answer scores 4 points. - Each incorrect answer deducts 1 point. - Each unanswered question (represented by an empty string) scores 0 points. Your function should return the total score as an integer. **Function Signature**: ```python def calculate_score(user_answers: List[str], correct_answers: List[str]) -> int: ``` # Input - `user_answers` (List[str]): A list of strings representing the answers provided by the user. The length of this list may vary. - `correct_answers` (List[str]): A list of strings representing the correct answers. This list will always have the same length as `user_answers`. # Output - Return an integer representing the total score based on the criteria mentioned above. # Example ```python user_answers = [\\"A\\", \\"B\\", \\"C\\", \\"\\", \\"D\\"] correct_answers = [\\"A\\", \\"C\\", \\"C\\", \\"D\\", \\"D\\"] print(calculate_score(user_answers, correct_answers)) # Output: 7 ``` # Explanation - The user answers correctly for the first question (+4 points) and answers incorrectly for the second question (-1 point). - The user answers correctly for the third question (+4 points) and leaves the fourth question unanswered (0 points). - The user answers correctly for the fifth question (+4 points). - Total score: 4 + (-1) + 4 + 0 + 4 = 11.","solution":"from typing import List def calculate_score(user_answers: List[str], correct_answers: List[str]) -> int: score = 0 for user_answer, correct_answer in zip(user_answers, correct_answers): if user_answer == \\"\\": continue elif user_answer == correct_answer: score += 4 else: score -= 1 return score"},{"question":"# Analyzing Stock Price Trends and Volatility Visualization You have been assigned the task of analyzing and visualizing the stock price trends over a given period. The daily closing prices of the stock are given in a list, and you need to visualize two specific aspects of the stock prices: 1. The daily percentage change in the stock prices. 2. The rolling volatility of the stock prices over a specified window. # Objective Write a function named `plot_stock_analysis` that takes in the following: - `prices`: a list of daily closing prices of the stock. - `window_size`: an integer representing the window size for calculating rolling volatility. - `stock_name`: a string representing the stock name or identifier. The function should perform the following: 1. Use `matplotlib` and `numpy` libraries. 2. Plot the daily percentage change in stock prices in one subplot. 3. Plot the rolling volatility over the specified window size in a separate subplot. 4. Provide proper x and y labels, plot titles, and grid lines where appropriate. # Example ```python prices = [100, 102, 105, 103, 98, 101, 102] window_size = 3 stock_name = \\"Example Stock\\" plot_stock_analysis(prices, window_size, stock_name) ``` This should generate a plot with two subplots: one showing the daily percentage changes and the other showing the rolling volatility over the specified window. # Requirements - You *must* use the following functions from the respective libraries: - `matplotlib.pyplot.subplot` - `numpy.diff` - `matplotlib.pyplot.plot` - `matplotlib.pyplot.xlabel` # Hints - Use `numpy.diff` and percentage calculation for percentage changes. - To calculate rolling volatility, consider using the standard deviation over the specified window. - Use `matplotlib.pyplot.subplot` to create subplots. - Use `matplotlib.pyplot.plot` to plot the data. - Use `matplotlib.pyplot.xlabel` to label the x-axis.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_stock_analysis(prices, window_size, stock_name): prices = np.array(prices) # Calculate daily percentage change daily_pct_change = np.diff(prices) / prices[:-1] * 100 # Calculate rolling volatility rolling_volatility = [] for i in range(window_size, len(prices)): window_prices = prices[i-window_size:i] window_volatility = np.std(window_prices) rolling_volatility.append(window_volatility) # Plot daily percentage changes plt.subplot(2, 1, 1) plt.plot(daily_pct_change, marker=\'o\') plt.ylabel(\'Daily % Change\') plt.title(f\'{stock_name} Stock Analysis\') plt.grid(True) # Plot rolling volatility plt.subplot(2, 1, 2) plt.plot(range(window_size, len(prices)), rolling_volatility, marker=\'o\') plt.xlabel(\'Day\') plt.ylabel(\'Rolling Volatility\') plt.grid(True) plt.tight_layout() plt.show()"},{"question":"Write a function named `frequency_analysis` that analyzes the frequency of each character in a given string, using the `collections.Counter` library. The function should take one parameter: 1. `text` (string): The input string for frequency analysis. The function should: - Assert that `text` is not `None` and is of type `str`. - Use the `collections.Counter` library to count the frequency of each character in the string. - Return a dictionary where the keys are characters and the values are their respective counts. - Ignore spaces and be case-insensitive (i.e., count \'A\' and \'a\' as the same character). Example: ```python frequency_analysis(\\"Hello World\\") ``` This should return a dictionary like: `{\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1}`.","solution":"from collections import Counter def frequency_analysis(text): Returns the frequency of each character in the given string. Parameters: text (str): The input string for frequency analysis. Returns: dict: A dictionary where the keys are characters and the values are their respective counts. assert text is not None, \\"Input text should not be None.\\" assert isinstance(text, str), \\"Input text should be a string.\\" # Convert the text to lowercase and remove spaces text = text.lower().replace(\' \', \'\') # Use Counter to count the frequency of each character return dict(Counter(text))"},{"question":"Develop a program that reads data from a CSV file, filters rows based on a specific column value, and writes the filtered data to a new CSV file. This function should take three parameters: the input CSV file path, the output CSV file path, and the filter criterion. The filter criterion is a dictionary where keys represent column names and values represent the required value for filtering. For example, if the filter criterion is `{\'status\': \'active\'}` and the column \'status\' has the value \'active\' in a row, that row must be included in the output file. The function should ensure that the headers of the original CSV file are retained in the output file. If the column specified in the filter criterion does not exist in the CSV, the function should raise a ValueError. You should write self-contained code starting with: ``` import csv def filter_csv(input_csv, output_csv, filter_criterion): ```","solution":"import csv def filter_csv(input_csv, output_csv, filter_criterion): Reads data from a CSV file, filters rows based on a specific column value, and writes the filtered data to a new CSV file. Parameters: - input_csv (str): path to the input CSV file. - output_csv (str): path to the output CSV file. - filter_criterion (dict): a dictionary where keys represent column names and values represent the required value for filtering. Raises: - ValueError: If the column specified in the filter criterion does not exist in the CSV. with open(input_csv, mode=\'r\', newline=\'\', encoding=\'utf-8\') as infile: reader = csv.DictReader(infile) # Check if all filter criterion keys are valid columns for key in filter_criterion.keys(): if key not in reader.fieldnames: raise ValueError(f\\"Column \'{key}\' does not exist in the input CSV file\\") filtered_rows = [] for row in reader: include_row = all(row[key] == str(value) for key, value in filter_criterion.items()) if include_row: filtered_rows.append(row) with open(output_csv, mode=\'w\', newline=\'\', encoding=\'utf-8\') as outfile: writer = csv.DictWriter(outfile, fieldnames=reader.fieldnames) writer.writeheader() writer.writerows(filtered_rows)"}]'),F={name:"App",components:{PoemCard:C},data(){return{searchQuery:"",visibleCount:4,poemsData:I,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(a)||e.solution&&e.solution.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},D={class:"search-container"},R={class:"card-container"},P={key:0,class:"empty-state"},Y=["disabled"],z={key:0},N={key:1};function L(a,e,l,p,r,s){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",D,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",R,[(n(!0),i(w,null,b(s.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+d(r.searchQuery)+'". ',1)):u("",!0)]),s.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[r.isLoading?(n(),i("span",N,"Loading...")):(n(),i("span",z,"See more"))],8,Y)):u("",!0)])}const j=c(F,[["render",L],["__scopeId","data-v-e9219366"]]),U=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/34.md","filePath":"chatai/34.md"}'),O={name:"chatai/34.md"},V=Object.assign(O,{setup(a){return(e,l)=>(n(),i("div",null,[x(j)]))}});export{U as __pageData,V as default};
