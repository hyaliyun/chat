import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as h,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,m,a,r){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(l.poem.solution),1)])])])}const N=d(k,[["render",O],["__scopeId","data-v-48153951"]]),S=JSON.parse('[{"question":"Design a function `longest_consecutive_subarray` that returns the length of the longest subarray with consecutive integers in a given array. A subarray is a contiguous part of an array. For example, if the input array is `[1, 2, 3, 4]`, then `[1, 2, 3, 4]` is a subarray with consecutive integers because each element differs from the previous one by 1. If the input array is `[1, 9, 3, 10, 4, 20, 2]`, then the longest subarray with consecutive integers is `[1, 2, 3, 4]`. Write a function that takes an array of integers and returns the length of the longest subarray that contains consecutive integers. # Function Signature ```python def longest_consecutive_subarray(arr: List[int]) -> int: ``` # Input - An integer array `arr` with a size of up to 10^5 elements, where each element is in the range -10^9 to 10^9. # Output - Return the length of the longest subarray with consecutive integers. # Examples Example 1 ```python arr = [1, 94, 93, 1000, 92, 91, 90] assert longest_consecutive_subarray(arr) == 5 ``` - Explanation: The longest subarray with consecutive integers is `[90, 91, 92, 93, 94]`, which has a length of 5. Example 2 ```python arr = [1, 9, 3, 10, 4, 20, 2] assert longest_consecutive_subarray(arr) == 4 ``` - Explanation: The longest subarray with consecutive integers is `[1, 2, 3, 4]`, which has a length of 4. Example 3 ```python arr = [10, 12, 11, 13, 14, 15] assert longest_consecutive_subarray(arr) == 6 ``` - Explanation: The entire array `[10, 11, 12, 13, 14, 15]` is a subarray with consecutive integers, which has a length of 6. # Constraints - Elements in the subarray should be unique and consecutive integers. - Achieving an optimal solution in O(n) time complexity is ideal. You may assume that the provided input array will always be non-empty.","solution":"from typing import List def longest_consecutive_subarray(arr: List[int]) -> int: if not arr: return 0 max_length = 0 num_set = set(arr) for num in arr: if num - 1 not in num_set: # Check if it\'s the start of a sequence current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"You have N containers arranged in a row, each containing a certain number of marbles. Your task is to redistribute the marbles such that each container ends up with the same number of marbles, if possible. You can perform the following operation any number of times: pick one marble from a container and move it to an adjacent container (either the one immediately left or right). Write a program to determine if it is possible to redistribute the marbles equally among all containers, and if so, provide a sequence of moves to achieve it. ------ Input ------ The first line of the input contains a single integer N (1 leq N leq 1000), the number of containers. The second line contains N space-separated integers a_1, a_2, ..., a_N (0 le a_i le 10^6), where a_i represents the number of marbles in the i-th container. ------ Output ------ If it is not possible to redistribute the marbles equally, print \\"NO\\". Otherwise, print \\"YES\\" on the first line, followed by a sequence of moves. Each move should be of the form `i j`, indicating that a marble is moved from container i to container j (1 leq i, j leq N). If there are multiple valid sequences of moves, any will be accepted. ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ a_i ≤ 10^6 ------ Sample Input 1 ------ 3 1 2 3 ------ Sample Output 1 ------ YES 1 2 2 3 ------ Explanation 1 ------ In this case, you can achieve equal distribution by moving one marble from container 1 to container 2, and then moving one marble from container 2 to container 3. ------ Sample Input 2 ------ 3 1 1 1 ------ Sample Output 2 ------ YES ------ Explanation 2 ------ All containers already have the same number of marbles, so no moves are necessary. ------ Sample Input 3 ------ 2 4 1 ------ Sample Output 3 ------ NO ------ Explanation 3 ------ It is not possible to redistribute the marbles equally because the total number of marbles (5) is not divisible by the number of containers (2).","solution":"def redistribute_marbles(N, marbles): Determines if it is possible to redistribute marbles equally among containers and provides the moves to do so. :param N: Integer, the number of containers. :param marbles: List of integers, the number of marbles in each container. :return: Tuple, (String, List of moves (tuple of 2 integers)), or (\\"NO\\", []) if redistribution is not possible. total_marbles = sum(marbles) # Check if it is possible to redistribute marbles equally if total_marbles % N != 0: return \\"NO\\", [] target = total_marbles // N moves = [] for i in range(1, N): while marbles[i-1] > target: marbles[i-1] -= 1 marbles[i] += 1 moves.append((i, i + 1)) while marbles[i-1] < target: marbles[i-1] += 1 marbles[i] -= 1 moves.append((i + 1, i)) # Verify that all marbles are now equal to the target value for marble_count in marbles: if marble_count != target: return \\"NO\\", [] return \\"YES\\", moves"},{"question":"Problem King Arthur is organizing his yearly round table meeting with the N knights, each represented by a point in a 2D plane. The knights need to be divided into K distinct groups for discussion, and each group should have at least one knight. Arthur wants to position a round table at the optimal point so that the sum of the distances from each knight in a group to the table\'s center is minimized. Devise an algorithm that determines the positions of K tables such that the total sum of the distances from each knight to their assigned table is minimized. You must find the optimal positions of the round tables. Constraints: The input satisfies the following conditions. * 1 leq K leq N leq 10 * 0 leq x_i, y_i leq 10^4 Input N K x_1 y_1 x_2 y_2 ... x_N y_N The input is given in the following format. The number of knights N and the number of groups K are given as integers on the first line. From the second line onward, the coordinates x_i , y_i of each knight i are given as integers. Output Output the coordinates of the K tables as pairs of real numbers. The coordinates must not contain an absolute error greater than 10^{-3} . Examples Input 6 2 1 3 2 2 3 1 8 8 9 9 10 10 Output 2.000 2.000 9.000 9.000 Input 5 3 1 1 2 2 3 3 4 4 5 5 Output 1.500 1.500 3.500 3.500 5.000 5.000 Input 3 1 5 1 6 2 7 3 Output 6.000 2.000","solution":"def k_means(knights, K): import numpy as np from scipy.spatial import distance def initialize_centroids(knights, K): np.random.seed(42) initial_indices = np.random.choice(len(knights), K, replace=False) return knights[initial_indices] def assign_knights_to_centroids(knights, centroids): clusters = {} for knight in knights: distances = [distance.euclidean(knight, centroid) for centroid in centroids] closest_centroid = np.argmin(distances) if closest_centroid in clusters: clusters[closest_centroid].append(knight) else: clusters[closest_centroid] = [knight] return clusters def update_centroids(clusters): new_centroids = [] for key in clusters.keys(): new_centroid = np.mean(clusters[key], axis=0) new_centroids.append(new_centroid) return new_centroids knights = np.array(knights) centroids = initialize_centroids(knights, K) for _ in range(100): # Run iterations (fixed number for convergence) clusters = assign_knights_to_centroids(knights, centroids) new_centroids = update_centroids(clusters) # Check for convergence by comparing old and new centroids if np.allclose(centroids, new_centroids, atol=1e-3): break centroids = new_centroids return centroids def find_optimal_tables(N, K, knight_coordinates): optimal_centroids = k_means(knight_coordinates, K) return optimal_centroids def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) knight_coordinates = [(int(data[i*2+2]), int(data[i*2+3])) for i in range(N)] tables = find_optimal_tables(N, K, knight_coordinates) for table in tables: print(f\\"{table[0]:.3f} {table[1]:.3f}\\") if __name__ == \\"__main__\\": main()"},{"question":"You are given a list of non-negative integers, with each integer representing the height of a vertical line on a graph. Your task is to write a program that finds two lines that, together with the x-axis, form a container such that the container holds the most amount of water. Return the maximum amount of water a container can store. Note that you may not slant the container. The container should be formed by two different lines chosen from the input list. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single zero. Each dataset contains the following format: n h1 h2 ... hn - The first line contains the integer n (2 ≤ n ≤ 1000), representing the number of vertical lines. - The second line contains n space-separated integers h1, h2, ..., hn (0 ≤ hi ≤ 10^4). The number of datasets does not exceed 50. Output For each dataset, output the maximum amount of water the container can store on one line. Examples Input 5 1 8 6 2 5 4 8 3 7 4 1 1 1 1 3 5 2 6 0 Output 49 3","solution":"def max_area(heights): Return the maximum area of water that can be contained by two vertical lines. left, right = 0, len(heights) - 1 max_area = 0 while left < right: height = min(heights[left], heights[right]) width = right - left current_area = height * width max_area = max(max_area, current_area) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area def find_max_areas(datasets): For each dataset, find the max area of water the container can store each output in one line. results = [] for heights in datasets: results.append(max_area(heights)) return results def parse_input(input_data): lines = input_data.strip().split(\\"n\\") datasets = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break heights = list(map(int, lines[i+1].split())) datasets.append(heights) i += 2 return datasets"},{"question":"A concert organizer is planning a music festival with several musical bands performing in different time slots. To ensure a smooth experience for the audience, the organizer wants to minimize the time gap between the performances of consecutive bands. For this, they need to find the optimal scheduling order for the bands. The organizer has an array `bands[]`, where each element is an object containing the `band_id` and the `performance_time` (in minutes). The objective is to arrange the bands in such a way that the maximum time gap between performances of any two consecutive bands is minimized. Your task is to implement the function `optimalSchedule()` which takes the array `bands[]` of size N and returns an array of the `band_ids` in the optimal order. Example 1: Input: N = 4 bands[] = [{band_id: 1, performance_time: 30}, {band_id: 2, performance_time: 45}, {band_id: 3, performance_time: 35}, {band_id: 4, performance_time: 50}] Output: [1, 3, 2, 4] Explanation: The gaps between consecutive performance times in the order [1, 3, 2, 4] are [5, 10, 5], which is the minimum possible maximum gap. Example 2: Input: N = 3 bands[] = [{band_id: 1, performance_time: 60}, {band_id: 2, performance_time: 90}, {band_id: 3, performance_time: 120}] Output: [1, 2, 3] Explanation: The gaps between consecutive performance times in the order [1, 2, 3] are [30, 30], which is the minimum possible maximum gap. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `optimalSchedule()` which takes the array `bands[]` describing the performance times of the bands and returns an array of `band_ids` in the optimal order. Expected Time Complexity: O(N log N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 1000 1 ≤ performance_time ≤ 120","solution":"def optimalSchedule(bands): Returns the optimal order of band_ids to minimize the maximum gap between performance_times. # Sort bands based on their performance times bands.sort(key=lambda x: x[\'performance_time\']) # Arrange the performance times to minimize the maximum time gap left, right = 0, len(bands) - 1 optimal_order = [] while left <= right: if left == right: optimal_order.append(bands[left]) else: optimal_order.append(bands[left]) optimal_order.append(bands[right]) left += 1 right -= 1 # Extract the band_ids from the optimal order optimal_band_ids = [band[\'band_id\'] for band in optimal_order] return optimal_band_ids"},{"question":"**String Compression** You are tasked with writing a function that takes a string as input and returns its compressed version. The compression algorithm should scan through the input string and replace sequences of the same consecutive character with that character followed by the number of occurrences. If the compressed version of the string is not shorter than the original string, the function should return the original string. For example, the string \\"aaabbcc\\" would be compressed to \\"a3b2c2\\" (3 occurrences of \'a\', 2 occurrences of \'b\', and 2 occurrences of \'c\'). The string \\"abca\\" cannot be compressed in a meaningful way (it would remain \\"abca\\"). You need to implement the following function: ```python def compress_string(s: str) -> str: pass ``` # Input - A single string `s` with 1 <= len(s) <= 1000 consisting only of uppercase and lowercase English letters. # Output - The compressed string if its length is less than the original string length, otherwise the original string. # Examples ```python compress_string(\\"aaabbcc\\") # Returns \\"a3b2c2\\" compress_string(\\"abcd\\") # Returns \\"abcd\\" compress_string(\\"aabbaaa\\") # Returns \\"a2b2a3\\" compress_string(\\"abcdefg\\") # Returns \\"abcdefg\\" ``` Important: Make sure to handle both uppercase and lowercase letters correctly and to only compress sequences where the character repeats consecutively. Also, remember that the compressed version should be returned only if it is shorter than the original string.","solution":"def compress_string(s: str) -> str: Compresses the string by replacing consecutive repeated characters with the character followed by the count. Returns the compressed string if it is shorter than the original string, otherwise returns the original string. if len(s) == 0: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"Write a function that takes a string as input and returns a boolean indicating whether the string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and case). * For example, \\"A man, a plan, a canal, Panama!\\" is a palindrome. Implement the function is_palindrome(s) ( **JS**: `isPalindrome(s)` ): ```python def is_palindrome(s): # Example usage: # is_palindrome(\\"A man, a plan, a canal, Panama!\\") => True pass ```","solution":"import re def is_palindrome(s): Returns whether the given string is a palindrome, ignoring spaces, punctuation, and case. # Remove all non-alphanumeric characters and convert to lower case cleaned_str = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Compare the cleaned string with its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"We all have our favorite TV shows, right? But sometimes we miss an episode due to our busy schedules. Assume you are building a DVR (Digital Video Recorder) application which helps users to record their favorite TV shows when they are not available to watch them live. Your task is to write a program that processes a series of commands to manage a list of TV shows that need to be recorded. Each command is either adding a new show to record, removing a show from the recording list, or checking if a certain show is scheduled to be recorded. Commands: 1. \\"ADD show_name\\" - Add the show named `show_name` to the recording list. 2. \\"REMOVE show_name\\" - Remove the show named `show_name` from the recording list. 3. \\"CHECK show_name\\" - Check if the show named `show_name` is in the recording list and return \\"YES\\" if it is, and \\"NO\\" otherwise. Input: - The input consists of an integer `n` which represents the number of commands. - The next `n` lines contain one command per line as described above. Output: - For each \\"CHECK\\" command, output \\"YES\\" or \\"NO\\" on a new line. Input Constraints: - 1 ≤ n ≤ 10^5 - 1 ≤ length of show_name ≤ 100 Example Input: 7 ADD GameOfThrones ADD BreakingBad CHECK GameOfThrones REMOVE GameOfThrones CHECK GameOfThrones ADD TheCrown CHECK TheCrown Example Output: YES NO YES","solution":"def manage_recordings(commands): Processes a series of commands to manage a list of TV shows to be recorded. Args: commands (list of str): A list of commands to process. Returns: list of str: The results of \\"CHECK\\" commands. recording_list = set() results = [] for command in commands: action, show_name = command.split(maxsplit=1) if action == \\"ADD\\": recording_list.add(show_name) elif action == \\"REMOVE\\": recording_list.discard(show_name) elif action == \\"CHECK\\": if show_name in recording_list: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an undirected graph represented as an adjacency matrix, write a program to determine if the graph is a bipartite graph. A bipartite graph is a graph whose vertices can be divided into two disjoint sets such that no two vertices within the same set are adjacent. ------ Input ------ - The first line contains an integer T (1 ≤ T ≤ 10), the number of test cases. - For each test case: - The first line contains an integer N (1 ≤ N ≤ 50), the number of vertices in the graph. - The next N lines each contain N integers, where the j-th integer of the i-th line is 1 if there is an edge between vertex i and vertex j, and 0 otherwise. ------ Output ------ For each test case, print \\"Yes\\" if the graph is bipartite, otherwise print \\"No\\". ----- Sample Input 1 ------ 2 3 0 1 0 1 0 1 0 1 0 4 0 1 1 1 1 0 1 0 1 1 0 1 1 0 1 0 ----- Sample Output 1 ------ Yes No","solution":"from collections import deque def is_bipartite(graph, n): colors = [-1] * n # -1 represents no color, 0 and 1 are the two colors for i in range(n): if colors[i] == -1: # If this node hasn\'t been colored, perform BFS queue = deque([i]) colors[i] = 0 while queue: node = queue.popleft() for neighbor in range(n): if graph[node][neighbor] == 1: # There is an edge if colors[neighbor] == -1: # If the neighbor hasn\'t been colored colors[neighbor] = 1 - colors[node] # Color with opposite color queue.append(neighbor) elif colors[neighbor] == colors[node]: # If the neighbor is colored the same return \\"No\\" return \\"Yes\\" def bipartite_graphs(test_cases): results = [] for graph in test_cases: n = len(graph) result = is_bipartite(graph, n) results.append(result) return results"},{"question":"Below is a list of words that may contain duplicates. Your task is to transform this list into a list of unique entries only, where each entry preserves its first occurrence and any subsequent duplicates are removed. Additionally, you must return a count of the duplicates removed for each original word in a separate list. Input: The first line of the data set contains an integer N representing the number of words in the list. Each of the next N lines contains one word consisting of only lowercase letters. The maximum length of each word is 15. Output: The output consists of two parts: 1. A list of unique words that maintains the first occurrence order. 2. A list of integers where each integer represents the count of duplicates removed for each original word. Constraints 1 ≤ N ≤ 50 SAMPLE INPUT 6 apple orange banana apple orange grape SAMPLE OUTPUT apple orange banana grape 0 0 0 1 1 0","solution":"def filter_unique_words_and_count_duplicates(words): Takes a list of words and returns a list of unique words maintaining the first occurrence order and a list of integers representing the count of duplicates removed for each original word. seen = {} unique_words = [] duplicates_count = [] for word in words: if word not in seen: seen[word] = 0 unique_words.append(word) duplicates_count.append(seen[word]) seen[word] += 1 return unique_words, duplicates_count"},{"question":"Sam is working on a project where he needs to manipulate arrays frequently. One of the tasks requires him to rotate an array. Given an array of integers and a number k, rotate the array to the right by k steps. # Rotation Description To rotate the array to the right by k steps means to move every element of the array k positions to the right. The elements that end up beyond the last position wrap around to the start of the array. # Task Write a function that takes an array of integers and an integer k, and returns the array after rotating it to the right by k steps. # Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains n space-separated integers representing the elements of the array (−10^9 ≤ array[i] ≤ 10^9). - The third line contains an integer k (0 ≤ k ≤ 10^9). # Output - Output the array after rotating it to the right by k steps. # Example Input ``` 6 1 2 3 4 5 6 2 ``` Output ``` 5 6 1 2 3 4 ``` Input ``` 5 -1 -100 3 99 0 3 ``` Output ``` 3 99 0 -1 -100 ``` # Note - The value of k could be larger than n. In such cases, rotating the array by k steps is the same as rotating it by k mod n steps. - Ensure your solution is efficient and handles large inputs within a reasonable time frame.","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. Parameters: arr (list): List of integers to rotate. k (int): Number of steps to rotate the array. Returns: list: The rotated array. n = len(arr) # In case k is greater than n k = k % n # Reverse the entire array reverse(arr, 0, n-1) # Reverse the first k elements reverse(arr, 0, k-1) # Reverse the remaining elements reverse(arr, k, n-1) return arr def reverse(arr, start, end): Helper function to reverse the elements of the array from start to end. Parameters: arr (list): List of integers start (int): Starting index for the reverse operation end (int): Ending index for the reverse operation while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1"},{"question":"Alice and Bob are playing a game with a string `s` consisting of lowercase English letters. The game is played in turns, with Alice going first. On her turn, a player must delete one character from the string. The game continues until the string becomes empty, and the player who cannot make a move loses the game. Both players play optimally. Alice wants to determine if she can guarantee a win given the initial string `s`. To do this, she analyzes if she can always make the last move to delete the final character from the string. Your task is to determine if Alice can guarantee a win given the string `s`. -----Input----- The first line contains a single integer `t` (1 ≤ t ≤ 100), the number of test cases. The following `t` lines each contain a single string `s` (1 ≤ |s| ≤ 100), the string for that test case. -----Output----- For each test case, print \\"YES\\" (without quotes) if Alice can guarantee a win, and \\"NO\\" (without quotes) otherwise. -----Examples----- Input 3 abc abcd a Output YES NO YES -----Note----- In the first test case, Alice can remove any character first, and Bob will have to either leave the string with an odd number of remaining characters (ensuring Alice can make the last move) or directly leave one character for Alice to remove. In the second test case, no matter how optimally Alice plays, Bob can always reduce the string to a state where he makes the last move. In the third test case, Alice has only one character to remove, ensuring she wins the game. Note that Alice can guarantee a win if the length of the string is odd when her turn comes around.","solution":"def can_alice_win(t, cases): Determines if Alice can guarantee a win. :param t: Number of test cases :param cases: List of test case strings :return: List of \\"YES\\" or \\"NO\\" for each test case results = [] for s in cases: if len(s) % 2 == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given two strings, `str1` and `str2`, and your task is to determine if they are isomorphic. Two strings are isomorphic if the characters in `str1` can be replaced to get `str2`, with each character mapping to exactly one other character. You need to implement a function `isIsomorphic(str1, str2)` that returns `True` if the two strings are isomorphic, otherwise, it returns `False`. # Parameters - `str1` – a string of length `n` (1 ≤ `n` ≤ 10^4), consisting of lowercase English letters. - `str2` – a string of length `n`, consisting of lowercase English letters. # Output - Return `True` if the strings are isomorphic, otherwise return `False`. # Examples Example 1 ```plaintext Input: str1 = \\"egg\\", str2 = \\"add\\" Output: True ``` Example 2 ```plaintext Input: str1 = \\"foo\\", str2 = \\"bar\\" Output: False ``` Example 3 ```plaintext Input: str1 = \\"paper\\", str2 = \\"title\\" Output: True ``` # Constraints - The order of characters must be the same in both strings. - Each character in `str1` must map to a unique character in `str2`. # Function Signature ```python def isIsomorphic(str1: str, str2: str) -> bool: pass ```","solution":"def isIsomorphic(str1, str2): Determines if two strings are isomorphic. Parameters: str1 (str): First string of length n str2 (str): Second string of length n Returns: bool: True if the strings are isomorphic, False otherwise if len(str1) != len(str2): return False mapping_str1_to_str2 = {} mapping_str2_to_str1 = {} for c1, c2 in zip(str1, str2): if c1 in mapping_str1_to_str2: if mapping_str1_to_str2[c1] != c2: return False else: mapping_str1_to_str2[c1] = c2 if c2 in mapping_str2_to_str1: if mapping_str2_to_str1[c2] != c1: return False else: mapping_str2_to_str1[c2] = c1 return True"},{"question":"Tom is organizing a coding contest. He wants to distribute n coding problems to m participants in such a way that each participant gets the same number of problems, if possible. If not, Tom will leave some participants without any problem, so that the rest can have an equal number of problems. Help Tom determine how many participants will receive problems, and how many problems each of these participants will get. -----Input----- The only line contains two integers n and m (1 ≤ n, m ≤ 10^18). -----Output----- Print two integers: the number of participants who will receive problems and the number of problems each of these participants will get. -----Examples----- Input 10 3 Output 3 3 Input 11 5 Output 5 2 Input 9 2 Output 2 4 -----Note----- In the first sample, Tom can give 3 problems each to 3 participants, leaving 1 participant without any problem. In the second sample, Tom can give 2 problems each to 5 participants, leaving 1 problem. In the third sample, Tom can give 4 problems each to 2 participants, distributing all problems.","solution":"def distribute_problems(n, m): Distributes n problems to m participants. Args: n (int): The number of problems. m (int): The number of participants. Returns: tuple: (number of participants who receive problems, number of problems each receives) problems_per_participant = n // m participants_with_problems = m if problems_per_participant > 0 else n return participants_with_problems, problems_per_participant"},{"question":"You\'re given a tree with n nodes and n-1 edges. Each node has a distinct integer value between 1 and n. Your task is to determine the sum of the values of the nodes for every subtree of the tree. A subtree of a tree is a tree consisting of a node in the original tree and all of its descendants. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. For each test case: The first line contains an integer n (2 le n le 10^5) — the number of nodes in the tree. The second line contains n integers representing the values v_1, v_2, dots, v_n. Each of the next n-1 lines contains two integers u and v (1 le u, v le n, u ne v) — denoting an edge between nodes u and v. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output n integers — the sum of the values of the nodes for every subtree, in the order of node values from 1 to n. -----Examples----- Input 1 4 1 2 3 4 1 2 1 3 3 4 Output 10 2 7 4 -----Note----- For the provided example: - The original tree is: ``` 1 / 2 3 4 ``` - Subtree sums: - Subtree rooted at node 1: 1 + 2 + 3 + 4 = 10 - Subtree rooted at node 2: 2 = 2 - Subtree rooted at node 3: 3 + 4 = 7 - Subtree rooted at node 4: 4 = 4","solution":"def subtree_sums(t, test_cases): from collections import defaultdict def dfs(node, parent, adj, values, subtree_sum): total = values[node - 1] for neighbor in adj[node]: if neighbor != parent: total += dfs(neighbor, node, adj, values, subtree_sum) subtree_sum[node] = total return total results = [] for case in test_cases: n, values, edges = case adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) subtree_sum = [0] * (n + 1) dfs(1, -1, adj, values, subtree_sum) result = [subtree_sum[i] for i in range(1, n + 1)] results.append(result) return results"},{"question":"Given a sorted array of distinct integers, return a sorted array of square values of each number. Example 1: Input: [-4,-1,0,3,10] Output: [0,1,9,16,100] Example 2: Input: [-7,-3,2,3,11] Output: [4,9,9,49,121] Your Task: You need to complete the function sortedSquares(arr), which takes an array of integers as input and returns an array of integers with the squared values sorted in ascending order. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^4 -10^4 ≤ arr[i] ≤ 10^4","solution":"def sortedSquares(arr): Returns a sorted array of the square values of each number in the given sorted array of distinct integers. n = len(arr) left, right = 0, n - 1 result = [0] * n position = n - 1 while left <= right: left_square = arr[left] ** 2 right_square = arr[right] ** 2 if left_square > right_square: result[position] = left_square left += 1 else: result[position] = right_square right -= 1 position -= 1 return result"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to remove the minimum number of characters from `s` so that no two adjacent characters are the same, and return the altered string. If no modifications are required, you should return the original string. For example, if `s = \\"aabbcc\\"`, the optimal way to remove characters would be to remove the second `a`, the second `b`, and the second `c` to get `\\"abc\\"`. Hence, `solve(\\"aabbcc\\") = \\"abc\\"`. Another example: if `s = \\"aaaa\\"`, you should remove three `a`s to get `\\"a\\"`. Therefore, `solve(\\"aaaa\\") = \\"a\\"`. More examples in the test cases. Good luck!","solution":"def solve(s): Removes the minimum number of characters from s so that no two adjacent characters are the same and returns the altered string. if not s: return s result = [s[0]] # Start with the first character for i in range(1, len(s)): if s[i] != s[i - 1]: # Only add the character if it is not the same as the previous one result.append(s[i]) return \'\'.join(result)"},{"question":"Alexa is preparing for a marathon and she wants to have a balanced practice schedule. She can have short practice sessions lasting exactly 1 hour and long practice sessions lasting exactly 2 hours. She wants to plan her session for exactly N hours, where N is a positive integer representing the total practice time she desires. Alexa also wants to make sure that she has strictly more short sessions than long sessions. Determine if it is possible for Alexa to plan her practice session respecting the given criteria. -----Input----- The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. Each of the next t lines contains one integer N (1 leq N leq 1000) — the total number of hours Alexa wants to practice. -----Output----- For each test case, output \\"POSSIBLE\\" if Alexa can plan her practice session with strictly more short sessions than long sessions, otherwise output \\"IMPOSSIBLE\\". You may print every letter of \\"POSSIBLE\\" and \\"IMPOSSIBLE\\" in any case you want (so, for example, the strings Possible, possible, and POSSIBLE will all be accepted). -----Examples----- Input 5 2 3 4 5 6 Output IMPOSSIBLE POSSIBLE IMPOSSIBLE POSSIBLE POSSIBLE -----Note----- In the first test case, Alexa can only have one long session of 2 hours. Since there are no short sessions, the condition of having strictly more short sessions than long sessions is not met. In the second test case, Alexa can have three short sessions: 1+1+1 hours. In the third test case, Alexa cannot satisfy the condition because any combination that sums up to 4 will have at most as many short sessions as long. In the fourth test case, Alexa can have five short sessions: 1+1+1+1+1 hours. Alternatively, she can have three short sessions and one long session: 1+1+1+2 hours. In the fifth test case, Alexa can have six short sessions: 1+1+1+1+1+1 hours, or she can have four short sessions and one long session: 1+1+1+1+2 hours.","solution":"def is_plan_possible(t, test_cases): results = [] for N in test_cases: if N == 1 or N == 2 or N == 4: results.append(\\"IMPOSSIBLE\\") else: results.append(\\"POSSIBLE\\") return results"},{"question":"Minimize Path Sum in Triangle Problem You are given a triangle of integers where the first row has one element, the second row has two elements, and so on. Your task is to find the minimum path sum from the top to the bottom row, where each movement can go to either the adjacent number on the row directly below. The triangle is represented as a list of lists of integers. For example, given the following triangle: ``` [ [2], [3, 4], [6, 5, 7], [4, 1, 8, 3] ] ``` The minimum path sum from top to bottom is `11` (2 + 3 + 5 + 1 = 11). Input Format - You will be given an integer `n` (1 ≤ n ≤ 200), representing the number of rows in the triangle. - This will be followed by n lines, where the i-th line contains the i elements of the i-th row of the triangle. Each element is a non-negative integer not exceeding 10^5. Output Format - Print the minimum path sum from the top to the bottom of the triangle. Considerations - You can assume that there will always be a solution. Input Example 1: ``` 4 2 3 4 6 5 7 4 1 8 3 ``` Output Example 1: ``` 11 ``` Input Example 2: ``` 3 1 2 3 4 5 6 ``` Output Example 2: ``` 7 ``` Explanation In the first example, the minimum path starts at `2`, then moves to `3`, then to `5`, and finally to `1`, resulting in the sum `11`. In the second example, the path 1 -> 2 -> 4 results in the minimum sum `7`.","solution":"def minimize_path_sum(triangle): Returns the minimum path sum from top to bottom in a given triangle. :param triangle: List of lists of integers representing the triangle :return: Integer representing the minimum path sum # Start from the second last row and propagate the minimum path sum upwards for i in range(len(triangle) - 2, -1, -1): for j in range(len(triangle[i])): triangle[i][j] += min(triangle[i + 1][j], triangle[i + 1][j + 1]) # Return the top element which now contains the minimum sum return triangle[0][0] # Utility function to process the input and call minimize_path_sum def minimize_path_sum_from_input(n, triangle_list): triangle = [] index = 0 for i in range(1, n + 1): triangle.append(triangle_list[index:index + i]) index += i return minimize_path_sum(triangle)"},{"question":"Given a binary tree, find the maximum path sum. The path may start and end at any node in the tree. Example: Given the below binary tree: 1 / 2 3 Return 6, as the optimal path is 2 -> 1 -> 3. Note: - A path is defined as any sequence of nodes from some starting node to any node in the tree following the parent-child connections. - The path must contain at least one node and does not need to go through the root.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_path_sum(root): Returns the maximum path sum for the given binary tree. def helper(node): nonlocal max_sum if not node: return 0 # Compute the maximum path sum considering the left and right children left_max = max(helper(node.left), 0) right_max = max(helper(node.right), 0) # Update the global maximum sum if the current path sum is larger current_max = node.val + left_max + right_max max_sum = max(max_sum, current_max) # Return the maximum sum path \\"ending\\" at the current node return node.val + max(left_max, right_max) max_sum = float(\'-inf\') helper(root) return max_sum"},{"question":"Dexter has perfected a new machine that can rearrange alphanumeric characters. Given a string containing lowercase letters from \'a\' to \'z\' and digits from \'0\' to \'9\', the machine will attempt to create the lexicographically smallest permutation of the string with the following conditions: - All the digits in the string must remain in their original relative positions. For instance, if the input string is \'b2a1c3\', the digits `2`, `1`, `3` remain in their respective positions, and the letters \'b\', \'a\', \'c\' are rearranged among themselves to form the smallest possible string. Write a function that implements this transformation. INPUT The input consists of multiple test cases. The first line contains T, the number of test cases. Each of the next T lines contains a string S of length N. OUTPUT For each test case, return the string S after rearranging it to meet the given conditions. CONSTRAINTS 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 S will be a non-empty string containing only lowercase letters (\'a\'-\'z\') and digits (\'0\'-\'9\'). SAMPLE INPUT 3 b2a1c3 a1b2c dcba4321 SAMPLE OUTPUT a2b1c3 a1b2c abcd4321 Explanation 1. For the first test case, swapping \'b\', \'a\', \'c\' gives the smallest permutation \'a2b1c3\'. 2. For the second test case, the letters are already in order, so the output is the same as the input. 3. For the third test case, rearranging \'d\', \'c\', \'b\', \'a\' gives the smallest permutation \'abcd4321\'.","solution":"def rearrange_string(S): Returns the lexicographically smallest string by rearranging characters such that all digits remain in their original positions. # Extract characters and their positions letters = [s for s in S if s.isalpha()] letters.sort() result = [] letter_idx = 0 for char in S: if char.isdigit(): result.append(char) else: result.append(letters[letter_idx]) letter_idx += 1 return \\"\\".join(result) def process_test_cases(T, cases): results = [] for i in range(T): results.append(rearrange_string(cases[i])) return results"},{"question":"Your boss has assigned you to manage the company\'s payroll system, which processes the working hours of employees and calculates their weekly earnings. You\'re provided with the number of hours worked and the hourly pay rate for each employee, and need to compute their total earnings. Any hours worked over 40 hours in a week are considered overtime and are paid at 1.5 times the regular hourly rate. -----Input----- - An integer n (1 ≤ n ≤ 100), the number of employees. - n lines each containing two integers h (0 ≤ h ≤ 168), the number of hours worked by an employee in a week, and r (1 ≤ r ≤ 1000), the hourly rate of pay for that employee. -----Output----- - n lines each containing one integer, the total earnings of each employee. -----Examples----- Sample Input 1: 3 35 15 50 20 40 25 Sample Output 1: 525 1100 1000 Sample Input 2: 2 60 10 20 30 Sample Output 2: 700 600","solution":"def calculate_earnings(n, employees): This function calculates the weekly earnings for employees considering overtime pay. Parameters: n (int): Number of employees. employees (list): A list of tuples, each containing two integers h and r, where h is the number of hours worked in a week, and r is the hourly pay rate. Returns: List of integers: Total weekly earnings for each employee. earnings = [] for h, r in employees: if h <= 40: earnings.append(h * r) else: regular_pay = 40 * r overtime_pay = (h - 40) * (r * 1.5) earnings.append(regular_pay + overtime_pay) return earnings"},{"question":"In a certain village, there are Wi-Fi zones established at various locations that offer network connectivity. Each zone has a range R, representing the distance up to which the Wi-Fi zone covers. The village is represented in a linear manner, with homes located at integer coordinates on that line. Given the number of Wi-Fi zones and their respective coordinates and ranges, determine which homes have network coverage. For simplicity, assume that wi-fi signal strength does not diminish within its range. Input Each test case is formed as follows: The first line contains an integer M, the number of Wi-Fi zones, such that 1 ≤ M ≤ 100. The next M lines each contain two integers X and R, representing the coordinate of the Wi-Fi zone and its range, respectively. Each zone\'s range is in the limits of 0 ≤ X, R ≤ 10^4. The following line contains an integer H, representing the number of homes in the village such that 1 ≤ H ≤ 100. The next line contains H distinct integers, each representing the coordinate of a home. The coordinates can be positive or negative integers in the range -10^4 ≤ home coordinate ≤ 10^4. Output For each test case, print a list of \\"Yes\\" or \\"No\\" indicating whether each home has network coverage. Example Input: 2 1 2 4 1 3 2 -1 7 Output: Yes Yes No","solution":"def wifi_coverage(M, zones, H, homes): Determine which homes have Wi-Fi coverage. Parameters: M (int): the number of Wi-Fi zones zones (list of tuple): a list of tuples where each tuple contains two integers X and R, representing the coordinate and range of a Wi-Fi zone H (int): the number of homes homes (list of int): a list of integers representing the coordinates of the homes Returns: list of str: a list of \\"Yes\\" or \\"No\\" indicating whether each home has network coverage # Initialize list to store the result result = [] # Iterate over each home to check for coverage for home in homes: covered = False for (x, r) in zones: if abs(home - x) <= r: covered = True break result.append(\\"Yes\\" if covered else \\"No\\") return result"},{"question":"Problem Statement Yuna is an avid reader and she loves arranging her books in her bookshelf in a way that each book is in a strictly increasing order of their width. However, some of her books are thick and some are thin. Given that she has an initial sequence of book widths, she wants to remove the fewest number of books such that the remaining books\' widths are in strictly increasing order. Write a program to help Yuna determine the length of the longest strictly increasing subsequence of book widths she can obtain by removing some (potentially zero) books. -----Input----- The first line contains a single integer n (1 le n le 2 times 10^5), the number of books. The second line contains n integers width_i (1 le width_i le 10^9), the widths of the books. -----Output----- Print a single integer, the length of the longest strictly increasing subsequence of book widths. -----Example----- Input 1: 6 5 3 4 8 6 7 Output 1: 4 Input 2: 5 1 3 2 1 4 Output 2: 3 -----Explanation----- In the first example, one of the possible longest strictly increasing subsequences is 3, 4, 6, 7 which has a length of 4. In the second example, one of the possible longest strictly increasing subsequences is 1, 2, 4 which has a length of 3.","solution":"import bisect def longest_increasing_subsequence(books): Returns the length of the longest strictly increasing subsequence in the list of book widths. if not books: return 0 lis = [] for width in books: pos = bisect.bisect_left(lis, width) if pos == len(lis): lis.append(width) else: lis[pos] = width return len(lis)"},{"question":"There is a quirky robot on Mars. The robot is programmed to move in a 2D grid and it can perform only specific types of movements: either by moving one step to the right or one step upwards. The robot starts at the bottom-left corner of the grid (coordinates (0, 0)) and wants to reach the top-right corner (coordinates (N, N)). However, each cell in the grid has some energy value in it and the robot starts with an initial energy which gets depleted based on the energy value of the cells it steps onto. Write a program to determine if the robot can reach the top-right corner from the bottom-left corner given the initial energy it starts with and the grid\'s energy values. ------ Input ------ The first line of the input contains an integer T, the number of test cases. T test cases follow, each test case consists of exactly 3 lines. The first line contains two integers N and E, the size of the grid (it is always N x N) and the initial energy of the robot, respectively. The next N lines contain N integers each, representing the energy values of the cells in the grid. ------ Output ------ For each test case, output one line that contains the string Yes if the robot can reach the top-right corner with the given initial energy, and the string No otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 50 0 ≤ E ≤ 10^6 0 ≤ Energy value of grid cells ≤ 10000 ----- Sample Input 1 ------ 2 3 15 1 3 6 2 0 2 4 4 0 2 10 1 5 2 1 ----- Sample Output 1 ------ Yes No ----- explanation 1------ Case 1. The robot can follow the path (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) or (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2). In both cases, it will exactly have enough energy to reach the destination. Case 2. The robot does not have enough energy to reach the top-right corner with the given initial energy, as it will always exhaust its energy midway.","solution":"def can_reach_top_right(N, E, grid): # Create a 2D dp array to store the minimum energy needed to reach each cell dp = [[float(\'inf\')] * N for _ in range(N)] # Initialize the energy required to reach the starting cell (0, 0) dp[0][0] = grid[0][0] # Fill the dp table for i in range(N): for j in range(N): if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j]) # Return whether the energy required to reach (N-1, N-1) is within the initial energy return dp[N-1][N-1] <= E def robot_paths(T, test_cases): results = [] for tc in test_cases: N, E = tc[0] grid = tc[1] if can_reach_top_right(N, E, grid): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given a string `s` of length `n` and an integer `k`, write a program to rotate the string to the right by k characters and return the modified string. Example 1: Input: s = \\"abcdef\\" k = 2 Output: \\"efabcd\\" Explanation: After rotating the string \\"abcdef\\" to the right by 2 positions, the result is \\"efabcd\\". Example 2: Input: s = \\"hello\\" k = 3 Output: \\"llohe\\" Explanation: After rotating the string \\"hello\\" to the right by 3 positions, the result is \\"llohe\\". Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `rotateString()` that takes a string (`s`), an integer (`k`), and returns the modified string after rotating it to the right by k characters. The driver code takes care of the printing. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 ≤ n, k ≤ 10^5","solution":"def rotateString(s, k): Rotates the string s to the right by k characters. Parameters: s (str): The input string. k (int): The number of positions to rotate the string. Returns: str: The rotated string. n = len(s) k = k % n # Handle the case where k > n return s[-k:] + s[:-k]"},{"question":"Allen loves playing with strings and often comes up with fun and challenging games involving them. One day, he invents a game where he needs to find the maximum length of a substring that contains only distinct characters. He wants to automate this process and needs your help to write a program for it. Given a string `s`, your task is to find the length of the longest substring which has all distinct characters. For instance, in the string \\"abcabcbb\\", the longest substring without repeating characters is \\"abc\\", with the length of 3. Input The input consists of a single string `s` (1 ≤ |s| ≤ 100,000), where `|s|` represents the length of the string. The string `s` contains only lowercase English letters. Output Output a single integer, the length of the longest substring with all distinct characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 Note In the first example, the answer is \\"abc\\", with the length of 3. In the second example, the answer is \\"b\\", with the length of 1. In the third example, the answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. n = len(s) char_index = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"David is an avid gardener who loves planting flowers in his backyard. To make his garden more organized, he has decided to arrange his flower beds into a grid format. He wants to make sure that each flower bed has an equal number of flowers to ensure uniformity. However, due to limited flower resources, he might not be able to completely fill each flower bed with the exact required number of flowers. David\'s garden is represented as an `n x m` grid, and he has exactly `f` flowers to plant. He wants to determine whether it is possible to arrange these `f` flowers in such a way that each flower bed has at least one flower and no two flower beds have a difference of more than one flower. -----Input----- The only line of input contains three integers: `n` (1 ≤ n ≤ 100), `m` (1 ≤ m ≤ 100), and `f` (1 ≤ f ≤ 10^4), separated by a single space. -----Output----- In the only line of output, print \\"YES\\" if it is possible to plant the flowers as described, otherwise print \\"NO\\". -----Examples----- Input 3 3 9 Output YES Input 4 5 18 Output NO Input 2 5 10 Output YES Input 1 6 8 Output NO -----Note----- In the first sample, David can arrange 9 flowers in a 3x3 grid where each flower bed contains exactly 1 flower, and extra flowers can be distributed equally to ensure no bed differs by more than one. In the second sample, it is not possible to place 18 flowers in a 4x5 grid so each bed has at least one flower without some beds having a difference greater than one. In the third sample, David can place 10 flowers in a 2x5 grid where each bed will have exactly 2 flowers each, making it a valid arrangement. In the fourth sample, it is impossible to place 8 flowers in a 1x6 grid without some beds differing by more than one flower.","solution":"def can_organize_garden(n, m, f): Determines whether it is possible to arrange exactly `f` flowers in an `n x m` grid such that each flower bed has at least one flower and no two flower beds have a difference of more than one flower. beds = n * m # If we don\'t have enough flowers to put at least 1 flower in each bed if f < beds: return \\"NO\\" # Check if the total beds can be filled equally with or without remainder elif (f - beds) % beds <= 1: return \\"YES\\" return \\"NO\\""},{"question":"Alice, a computer scientist, is working on a new text editor application. One of the features she wants to implement is an autocomplete function for words based on a given dictionary. The dictionary consists of a set of words, and the autocomplete function should suggest words that start with a given prefix. Alice has asked for your help to design this feature. Given a dictionary of words and a list of prefixes, for each prefix in the list, you need to find and return all words from the dictionary that start with that prefix. If no words match a given prefix, return an empty list for that prefix. Write a function `autocomplete` that accepts two lists: 1. A list of strings, `dictionary`, representing the words in the dictionary. 2. A list of strings, `prefixes`, representing the prefixes for which to suggest words. Your function should return a list of lists, where each inner list contains the words from the dictionary that start with the corresponding prefix in the `prefixes` list. # Function Signature ```python def autocomplete(dictionary: List[str], prefixes: List[str]) -> List[List[str]]: ``` # Input - A list `dictionary` of length `1 ≤ len(dictionary) ≤ 10^4`. Each element in the dictionary is a string of length `1 ≤ len(word) ≤ 100`. - A list `prefixes` of length `1 ≤ len(prefixes) ≤ 1000`. Each element in the prefixes list is a string of length `1 ≤ len(prefix) ≤ 100`. # Output - A list of lists, where each inner list contains the words from the dictionary that match the corresponding prefix in the `prefixes` list. # Constraints - All words and prefixes consist only of lowercase English letters. # Example Input ```python dictionary = [\\"apple\\", \\"app\\", \\"application\\", \\"banana\\", \\"band\\", \\"bandana\\", \\"bandwidth\\", \\"cat\\", \\"catch\\", \\"cater\\"] prefixes = [\\"app\\", \\"ban\\", \\"cat\\", \\"zoo\\"] ``` Output ```python [ [\\"apple\\", \\"app\\", \\"application\\"], [\\"banana\\", \\"band\\", \\"bandana\\", \\"bandwidth\\"], [\\"cat\\", \\"catch\\", \\"cater\\"], [] ] ``` # Explanation - For prefix \\"app\\", the words \\"apple\\", \\"app\\", and \\"application\\" match. - For prefix \\"ban\\", the words \\"banana\\", \\"band\\", \\"bandana\\", and \\"bandwidth\\" match. - For prefix \\"cat\\", the words \\"cat\\", \\"catch\\", and \\"cater\\" match. - For prefix \\"zoo\\", no words match, so an empty list is returned.","solution":"from typing import List def autocomplete(dictionary: List[str], prefixes: List[str]) -> List[List[str]]: def find_words_for_prefix(prefix: str) -> List[str]: return [word for word in dictionary if word.startswith(prefix)] results = [] for prefix in prefixes: results.append(find_words_for_prefix(prefix)) return results"},{"question":"The citizens of the mystical forest rely on magical amulets for protection. Each amulet is connected to a specific animal spirit, and every citizen is identified by the unique combination of their name and the spirit of their amulet. Write a program that takes a citizen\'s name and returns the correct animal spirit associated with their amulet. The following are the name-spirit pairs you should use: * Anara - Falcon * Bryndel - Wolf * Leilan - Tiger * Merek - Bear * Taryn - Eagle * Zephyra - Dragon If the name provided does not match any in the list, return \\"Unknown Citizen\\". For example, given the input `\\"Merek\\"`, your program should return `\\"Merek-Bear\\"`, and for the input `\\"Arin\\"`, the program should return `\\"Unknown Citizen\\"`.","solution":"def get_animal_spirit(name): Returns the name and the animal spirit associated with the amulet for the given citizen\'s name. name_spirit_pairs = { \\"Anara\\": \\"Falcon\\", \\"Bryndel\\": \\"Wolf\\", \\"Leilan\\": \\"Tiger\\", \\"Merek\\": \\"Bear\\", \\"Taryn\\": \\"Eagle\\", \\"Zephyra\\": \\"Dragon\\" } if name in name_spirit_pairs: return f\\"{name}-{name_spirit_pairs[name]}\\" else: return \\"Unknown Citizen\\""},{"question":"You are given an array `arr` of integers where each element of `arr` represents a type of event occurring on a system. Each type of event is denoted by an integer from 1 to M. Your task is to determine if the number of different types of events occurring in each continuous subarray of length K is the same. Return \'YES\' if this condition holds for all continuous subarrays of length K, otherwise return \'NO\'. Example 1: Input: arr = [1, 2, 2, 1, 3] M = 3 K = 3 Output: YES Explanation: For the subarray [1, 2, 2], there are 2 different types of events (1 and 2). For the subarray [2, 2, 1], there are also 2 different types of events (2 and 1). For the subarray [2, 1, 3], there are 3 different types of events (2, 1, and 3). Since the number of different types of events is not consistent across all subarrays of length 3, the output is \\"NO\\". Example 2: Input: arr = [1, 1, 1, 1] M = 1 K = 2 Output: YES Explanation: For the subarray [1, 1], there is 1 different type of event (1). Since the number of different types of events is consistent across all subarrays of length 2, the output is \\"YES\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function `checkSubarrays()` which takes an array `arr`, an integer `M`, and an integer `K` as input and returns a string \'YES\' or \'NO\' based on the above condition. Expected Time Complexity: O(N * K) Expected Auxiliary Space: O(M) Constraints: 1 <= arr.length <= 1000 1 <= arr[i] <= M 1 <= M <= 100 1 <= K <= arr.length","solution":"def checkSubarrays(arr, M, K): Determine if the number of different types of events occurring in each continuous subarray of length K is the same. from collections import Counter n = len(arr) if K > n: return \\"NO\\" # Function to count distinct numbers in a subarray def count_distinct(subarray): return len(set(subarray)) # Initialize the count for the first subarray distinct_count = count_distinct(arr[:K]) for i in range(1, n - K + 1): current_distinct_count = count_distinct(arr[i:i + K]) if current_distinct_count != distinct_count: return \\"NO\\" return \\"YES\\""},{"question":"A ticket booking system needs to verify whether a group of people can be accommodated simultaneously in a theater. The theater has multiple rows of seats, and each row has the same number of seats. The rows are numbered from 1 to r, and the seats in a row are numbered from 1 to c. A reservation request specifies the starting row, starting seat number, and the number of seats required. The seats required are continuous in a single row. Given the number of rows `r`, the number of seats per row `c`, the number of reservation requests `n`, and the details of each reservation request, determine if all reservation requests can be accommodated. -----Input----- The first line contains three integers `r`, `c`, and `n` (1 ≤ r, c ≤ 50; 1 ≤ n ≤ 100). The next `n` lines contain three integers `row`, `start_seat`, and `num_seats` (1 ≤ row ≤ r; 1 ≤ start_seat ≤ c; 1 ≤ num_seats ≤ c), representing a reservation request for `num_seats` continuous seats starting from `start_seat` in row `row`. -----Output----- If all reservation requests can be accommodated, print \\"Possible\\" (without the quotes). Otherwise, print \\"Impossible\\" (without the quotes). -----Examples----- Input 3 5 2 1 2 3 2 1 4 Output Possible Input 2 4 3 1 1 4 2 2 3 1 3 2 Output Impossible -----Note----- In the first test case, the requests are: - Row 1: Seats 2 to 4 - Row 2: Seats 1 to 4 Since there is no overlap in the requested seats, it is possible to accommodate both reservations. In the second test case, the requests are: - Row 1: Seats 1 to 4 - Row 2: Seats 2 to 4 - Row 1: Seats 3 to 4 There is an overlap for seat numbers 3 and 4 on row 1, hence it\'s impossible to accommodate all reservations.","solution":"def can_accommodate_reservations(r, c, n, reservations): # Initialize a 2D list representing the seats in the theater. seats = [[False] * c for _ in range(r)] for reservation in reservations: row, start_seat, num_seats = reservation row -= 1 # Convert to 0-based index start_seat -= 1 # Convert to 0-based index end_seat = start_seat + num_seats if end_seat > c: return \\"Impossible\\" for seat in range(start_seat, end_seat): if seats[row][seat]: return \\"Impossible\\" seats[row][seat] = True return \\"Possible\\" # Example cases print(can_accommodate_reservations(3, 5, 2, [(1, 2, 3), (2, 1, 4)])) # Output: \\"Possible\\" print(can_accommodate_reservations(2, 4, 3, [(1, 1, 4), (2, 2, 3), (1, 3, 2)])) # Output: \\"Impossible\\""},{"question":"You are given a sequence of integers P_1, P_2, ldots, P_N. A subarray of this sequence is any contiguous subsequence P_i, P_{i+1}, ldots, P_j, where 1 leq i leq j leq N. Define the function g(d) as the number of subarrays of length d that have a strictly increasing order. Calculate the sum G = g(1) + g(2) + ldots + g(N). -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers P_1, P_2, ldots, P_N. -----Output----- For each test case, print a single line containing one integer — the sum G. -----Constraints----- - 1 le T le 10 - 1 le N le 2 cdot 10^5 - 1 le P_i le 10^9 for each valid i -----Example Input----- 2 4 1 2 3 4 5 5 4 2 1 3 -----Example Output----- 10 6 ---Explanation--- - In the first example, every subarray is strictly increasing. For N = 4, g(1) = 4, g(2) = 3, g(3) = 2, g(4) = 1; hence, G = 4 + 3 + 2 + 1 = 10. - In the second example, the subarrays that are strictly increasing are [5], [4], [2], [1], [3], [1, 3]; hence, G = 5 + 1 = 6.","solution":"def calculate_g_sum(num_cases, test_cases): def count_strictly_increasing_subarrays(arr): n = len(arr) dp = [1] * n # dp[i] holds the length of increasing subarray ending at i result = 0 for i in range(1, n): if arr[i] > arr[i - 1]: dp[i] = dp[i - 1] + 1 for val in dp: result += val return result results = [] for i in range(num_cases): n, p = test_cases[i] result = count_strictly_increasing_subarrays(p) results.append(result) return results # Example usage: num_cases = 2 test_cases = [ (4, [1, 2, 3, 4]), (5, [5, 4, 2, 1, 3]) ] for result in calculate_g_sum(num_cases, test_cases): print(result)"},{"question":"You are tasked with developing a software component for an online shopping platform. One of the features required is a recommendation system that suggests products to users based on their past purchases. The system needs to analyze purchasing patterns to determine which pairs of products are frequently bought together. Specifically, if two products are bought together by more than `k` different users, they are considered a popular pair. Your task is to write a program that identifies all popular pairs of products based on purchase data. Input The first line contains two space-separated integers `p` and `t` (1 ≤ p ≤ 105, 1 ≤ t ≤ 105), where `p` is the number of different products and `t` is the number of transactions. Each of the next `t` lines describes a transaction in the format \\"m ai1 ai2 ... aim\\", where `m` (1 ≤ m ≤ 100) is the number of products in the transaction followed by `m` space-separated integers representing the product IDs (1 ≤ ai ≤ p). The last line contains an integer `k` (0 ≤ k ≤ t), the minimum number of different users that must have bought two products together for them to be considered a popular pair. Output Print all popular pairs of products. Each pair should be printed on a new line in the format \\"x y\\", where `x` and `y` are product IDs with `x < y`. The pairs should be listed in lexicographical order. If there are no popular pairs, output \\"No popular pairs\\". Examples Input 5 3 2 1 2 3 1 2 3 2 2 3 1 Output 1 2 2 3 Input 5 3 2 1 2 2 1 3 2 2 4 2 Output No popular pairs Note In the first example, products 1 and 2 are bought together by 2 different users, as well as products 2 and 3. Thus, both (1, 2) and (2, 3) are popular pairs since they are bought together by more than 1 user. In the second example, no pair of products is bought together by more than 2 different users, so the output is \\"No popular pairs\\".","solution":"from collections import defaultdict from itertools import combinations def find_popular_pairs(p, t, transactions, k): # Dictionary to store pair count pair_count = defaultdict(int) # Loop through each transaction to find pairs for transaction in transactions: m = transaction[0] # number of products in this transaction products = transaction[1:] for pair in combinations(sorted(products), 2): pair_count[pair] += 1 # Identify popular pairs popular_pairs = sorted(pair for pair, count in pair_count.items() if count > k) # Return result based on whether popular pairs exist if popular_pairs: return \\"n\\".join(f\\"{x} {y}\\" for x, y in popular_pairs) else: return \\"No popular pairs\\""},{"question":"Given an array of integers, find the maximum possible sum of its subarrays of length exactly M. -----Constraints----- - 1 leq N leq 10^6 - 1 leq M leq N - -10^9 leq A_i leq 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N M A_1 A_2 cdots A_N -----Output----- Print an integer representing the maximum possible sum of all subarrays of length exactly M. -----Sample Input----- 5 3 2 1 5 1 3 -----Sample Output----- 9 - The subarrays of length 3 are: [2, 1, 5], [1, 5, 1], [5, 1, 3]. - The sums of these subarrays are: 8, 7, 9. The maximum possible sum is 9, which is the expected output.","solution":"def max_sum_subarray(N, M, A): Returns the maximum sum of any subarray of length M. Parameters: N (int): Length of the array A. M (int): Length of the subarray. A (list of int): The array of integers. Returns: int: The maximum possible sum of subarrays of length exactly M. # Compute the sum of the first subarray of length M current_sum = sum(A[:M]) max_sum = current_sum # Traverse the array to find the maximum sum using sliding window technique for i in range(M, N): current_sum += A[i] - A[i - M] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"In a city with n intersections, a self-driving car needs to navigate from the starting intersection to the destination intersection. The intersections are arranged in a grid of size n x n. The car can move in up to four directions: left, right, up, and down. However, there are some impassable roads due to construction. The city\'s grid layout and impassable roads are known and are represented as a 2D array city_map of size n x n, where 0 indicates a passable road, and 1 indicates an impassable road. The car starts at the top-left corner of the grid (0, 0) and needs to reach the bottom-right corner of the grid (n-1, n-1). You need to determine if the car can reach the destination intersection. Write a function `can_reach_destination(city_map)` that takes an n x n 2D array `city_map` as input and returns a boolean value indicating whether the car can reach the bottom-right corner from the top-left corner. # Function Signature ```python def can_reach_destination(city_map: List[List[int]]) -> bool: ``` # Input - `city_map` (List[List[int]]): A 2D array of size n x n containing only 0s and 1s representing the grid. # Output - `bool`: Return True if the car can reach the bottom-right corner, otherwise return False. # Constraints - `2 ≤ n ≤ 1000` # Example ```python city_map = [ [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0] ] can_reach_destination(city_map) ``` # Explanation In the given example: ``` 0 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 ``` The car can move along the path to reach the destination intersection `(3, 3)`. Hence, the function should return `True`. # Note The car can only move on passable roads (0s), and it must follow the grid constraints. The car cannot move diagonally and must stay within the grid limits at all times.","solution":"from typing import List from collections import deque def can_reach_destination(city_map: List[List[int]]) -> bool: n = len(city_map) if city_map[0][0] == 1 or city_map[n-1][n-1] == 1: return False directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, n-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and city_map[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False"},{"question":"Given a string `s` which consists of characters `\\"0\\"` and `\\"1\\"` only, determine if the string is a palindrome without using extra space for another string. Examples ``` \\"101\\" ==> true // \\"101\\" is the same forwards and backwards \\"1001\\" ==> true // \\"1001\\" is the same forwards and backwards \\"110\\" ==> false // \\"110\\" is not the same forwards and backwards ```","solution":"def is_binary_palindrome(s): Returns True if the given binary string is a palindrome, otherwise False. left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"Ethan is given a string s consisting of lowercase English letters. He wants to remove some characters from the string so that the remaining characters form a palindrome. Ethan can remove any number of characters from the string (including zero) and they don\'t have to be consecutive. For example, if he has s = text{\\"abca\\"}, he can remove the first character and the last character to get the palindrome text{\\"bc\\"} or he can remove just the second character to get the palindrome text{\\"aca\\"}. Help him determine the length of the longest palindromic subsequence that can be obtained from s. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^3). Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 100) — length of the string. The second line contains the string s consisting of n lowercase English letters. -----Output----- For each test case, print a single integer — the length of the longest palindromic subsequence that can be obtained from the string s. -----Example----- Input 3 4 abca 6 abcdef 3 aaa Output 3 1 3 -----Note----- In the first case, the longest palindromic subsequence is text{\\"aca\\"} with length 3. In the second case, the longest palindromic subsequence is any one character with length 1. In the third case, the longest palindromic subsequence is text{\\"aaa\\"} with length 3.","solution":"def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def process_test_cases(test_cases): results = [] for n, s in test_cases: results.append(longest_palindromic_subsequence(s)) return results # Example usage: # test_cases = [(4, \\"abca\\"), (6, \\"abcdef\\"), (3, \\"aaa\\")] # print(process_test_cases(test_cases))"},{"question":"# Flattening Nested List Sum Your task is to write a function to compute the sum of all elements in a nested list. The nested list may contain integers or other nested lists. It is an exercise in recursion and handling various levels of nesting. # Nested List A nested list is a list that may contain either non-list items or more nested lists as items in the list. Here are a few examples of nested lists. [[1, 2, [3, [4, 5]]], 6] [1, [2, 3], 4, [5, [6, [7]]]] [10] [[[[[8]]]], 9] [] # The Task Implement the function `sum_nested_list(nested_list: list) -> int` which takes a nested list of integers and returns the sum of all integers in the list, no matter how deeply nested they are. # Examples ```python >>> sum_nested_list([[1, 2, [3, [4, 5]]], 6]) 21 >>> sum_nested_list([1, [2, 3], 4, [5, [6, [7]]]]) 28 >>> sum_nested_list([10]) 10 >>> sum_nested_list([[[[[8]]]], 9]) 17 >>> sum_nested_list([]) 0 ``` # Hints - Use recursion to handle nested lists. - Check if the current element is a list, if so, recursively sum its elements. - If the current element is an integer, add it to the sum. Good luck!","solution":"def sum_nested_list(nested_list): Computes the sum of all integers in the nested list. Parameters: nested_list (list): A nested list of integers. Returns: int: The sum of all integers in the nested list. total = 0 for element in nested_list: if isinstance(element, list): total += sum_nested_list(element) else: total += element return total"},{"question":"John loves experimenting with sequences of numbers. One day, he discovered an interesting property of certain sequences and decided to call them \\"balanced sequences.\\" A sequence of integers is called balanced if the sum of the integers is equal to zero and the length of the sequence is even. Your task is to determine if a given sequence is balanced. Write a program that checks whether a given sequence of integers is a balanced sequence or not. Input Format The first line contains a single integer T, the number of test cases. Each of the next T lines contains a sequence of integers separated by space. The first integer of each line indicates the length of the sequence, and the following integers are the elements of the sequence. Output Format For each test case, print \\"YES\\" if the sequence is balanced, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ Length of each sequence ≤ 100 -1000 ≤ Element of each sequence ≤ 1000 SAMPLE INPUT 3 4 1 -1 2 -2 3 1 2 -3 6 1 -1 1 -1 2 -2 SAMPLE OUTPUT YES NO YES","solution":"def is_balanced_sequence(sequence): Check if the sequence is balanced. A sequence is balanced if its sum is 0 and its length is even. if len(sequence) % 2 != 0: return \\"NO\\" return \\"YES\\" if sum(sequence) == 0 else \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): length = test_cases[i][0] sequence = test_cases[i][1:] results.append(is_balanced_sequence(sequence)) return results"},{"question":"-----Input----- Write a function that takes a string consisting of lowercase English letters and returns the first character which repeats in the string. The function should be efficient and have a linear runtime complexity. -----Output----- Print the first repeating character in the string. If there is no repeating character, print \\"No Repeating Character\\". -----Examples----- Input abca Output a Input abcdefg Output No Repeating Character -----Note----- The function should read a single string as input and should iterate through the string to find the first repeating character by maintaining a set of characters that have been seen so far. The aim is to achieve this in O(n) time complexity.","solution":"def first_repeating_character(s): Returns the first repeating character in the string s, or \\"No Repeating Character\\" if no character repeats. seen = set() for char in s: if char in seen: return char seen.add(char) return \\"No Repeating Character\\""},{"question":"You have recently picked up a hobby of collecting rare foreign coins, and you are interested in keeping a catalog of your collection. You want to write a program to help you manage your collection by tracking the countries and denominations of the coins you have collected. Given a list of coins from various countries, identify the country with the most denominations you have collected. If there is a tie, return the country that appears first in the input list. -----Input----- The first line of input contains a number n (1 le n le 100), the number of countries. Then follow the n countries. Each country starts with a line containing a number k (1 le k le 100), the number of denominations you have collected from that country. The remainder of the country information consists of k + 1 lines, each containing a nonempty string of at most 100 characters. The first of these lines is the country name, and the rest are denomination values. Strings consist only of upper and lower case letters ‘a’-‘z’, digits ‘0’-‘9’, dashes \'-\', and spaces. Each country name is unique. -----Output----- Output a single line containing the name of the country with the most denominations in your collection. If multiple countries have the same number of denominations, return the name of the first such country that appears in the input. -----Examples----- Sample Input: 3 3 Japan 1-yen 5-yen 10-yen 2 Canada 1-dollar 2-dollar 3 Germany 1-euro 2-euro 50-euro Sample Output: Japan","solution":"def country_with_most_denominations(n, countries_info): country_denominations = {} idx = 0 for _ in range(n): k = int(countries_info[idx]) country_name = countries_info[idx + 1] denominations = countries_info[idx + 2 : idx + 2 + k] country_denominations[country_name] = len(denominations) # Move the index to the start of the next country idx += 2 + k max_denominations = max(country_denominations.values()) for country, count in country_denominations.items(): if count == max_denominations: return country"},{"question":"Two children, Alice and Bob, are playing a game with a set of cards. Each card has a positive integer number written on it. The game is played with n cards arranged in a circle. Alice and Bob take turns in a counterclockwise direction, starting from card 1. In each turn, the current player must select a card, remove it, and add the card\'s value to their score. If a player cannot make a valid move, they lose the game. Alice always goes first, and both play optimally. Your task is to determine who will be the winner. Input The first line of the input contains an integer n (1 ≤ n ≤ 105) — the number of cards. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the values on the cards. Output Output \\"Alice\\" if Alice wins, and \\"Bob\\" otherwise. Examples Input 4 3 2 6 4 Output Alice Input 3 1 2 3 Output Bob","solution":"def game_winner(n, cards): Determines the winner of the game based on the rules provided. Parameters: n (int) : Number of cards cards (list) : List of integers representing the value of each card Returns: str : \\"Alice\\" if Alice wins, \\"Bob\\" otherwise if n == 1: return \\"Alice\\" cards.sort() if n % 2 == 1: return \\"Bob\\" else: return \\"Alice\\""},{"question":"A programming competition requires participants to write a function that calculates the factorial of a given non-negative integer n. However, instead of calculating the result directly, participants must implement a memoization technique to store intermediate results for efficiency. Memoization is a technique used to store the results of expensive function calls and reuse them when the same inputs occur again. This helps in reducing the time complexity of recursive algorithms. ------ Input ------ Input starts with an integer T (1 ≤ T ≤ 100), the number of test cases. Each of the next T lines contains a single integer n (0 ≤ n ≤ 50). ------ Output ------ For each test case, output the factorial of the given integer n. ------ Constraints ------ - 1 ≤ T ≤ 100 - 0 ≤ n ≤ 50 ------ Example ------ ----- Sample Input 1 ------ 4 0 1 5 10 ----- Sample Output 1 ------ 1 1 120 3628800 Implement a function `memoized_factorial` to efficiently compute the factorial of given numbers using the memoization technique. Use this function to solve the test cases.","solution":"def memoized_factorial(): Returns a function to compute the factorial using memoization. memo = {} def factorial(n): if n in memo: return memo[n] if n <= 1: memo[n] = 1 else: memo[n] = n * factorial(n-1) return memo[n] return factorial def solve_factorial(test_cases): factorial = memoized_factorial() results = [] for n in test_cases: results.append(factorial(n)) return results"},{"question":"You are given a sequence of integers representing a board game where each integer represents the number of steps you can move forward from that position. You need to determine the minimum number of jumps required to reach the end of the board starting from the first position. If it is not possible to reach the end, return -1. -----Input----- The first line of input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. For each test case, the first line contains an integer n (1 le n le 100) — the number of positions on the board. The second line contains n integers a_1, a_2, ldots, a_n (0 le a_i le 100), where a_i represents the number of steps you can move forward from the i-th position. -----Output----- For each test case, print one integer — the minimum number of jumps required to reach the end of the board, or -1 if it is not possible to reach the end. -----Examples----- Input 3 6 2 3 1 1 4 5 1 0 0 1 1 5 3 2 1 0 4 Output 2 -1 -1 -----Note----- In the first test case, you can jump from the 1st position to the 2nd position and then from the 2nd position to the 5th position, making the total number of jumps equal to 2. In the second test case, it\'s not possible to reach the end because you get stuck at the 2nd position. In the third test case, you get stuck at the 4th position and cannot reach the end.","solution":"def min_jumps(arr): Function to determine the minimum number of jumps required to reach the end of the board. n = len(arr) if n == 1: return 0 if arr[0] == 0: return -1 maxReach = arr[0] step = arr[0] jump = 1 for i in range(1, n): if i == n - 1: return jump maxReach = max(maxReach, i + arr[i]) step -= 1 if step == 0: jump += 1 if i >= maxReach: return -1 step = maxReach - i return -1 def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(min_jumps(arr)) return results"},{"question":"You are given an integer array of length n, where n is an even number (2 ≤ n ≤ 100). Your task is to partition the array into two subsets of equal size such that the absolute difference between the sums of the elements in the two subsets is minimized. Write a program to determine the minimized absolute difference. **Input Format** The first line of input contains a single integer n, the length of the array. The second line contains n space-separated integers representing the elements of the array. **Output Format** Output a single integer, the minimized absolute difference between the sums of the two subsets. **Example** Input ``` 4 1 2 3 4 ``` Output ``` 0 ``` Input ``` 6 10 20 30 40 50 60 ``` Output ``` 10 ``` **Explanation** In the first example, you can partition the array as follows: - Subset 1: {1, 4}, Sum = 5 - Subset 2: {2, 3}, Sum = 5 The absolute difference is |5 - 5| = 0 In the second example, you can partition the array as follows: - Subset 1: {10, 40, 50}, Sum = 100 - Subset 2: {20, 30, 60}, Sum = 110 The absolute difference is |100 - 110| = 10","solution":"def minimized_absolute_difference(n, array): total_sum = sum(array) target = total_sum // 2 dp = [0] * (target + 1) for num in array: for j in range(target, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) subset1_sum = dp[target] subset2_sum = total_sum - subset1_sum return abs(subset2_sum - subset1_sum)"},{"question":"You are working on a text-based game involving a series of quests. Each quest has specified prerequisites that need to be completed before it can be started. Given a list of quests and their prerequisites, you need to determine the order in which the quests can be completed, if such an order is possible. -----Input----- The first line of input contains an integer n (1 le n le 1000), the number of quests. Each of the next n lines contains two space-separated strings x and y, indicating that quest x must be completed before quest y can be started. Each quest name is a non-empty string of at most 50 characters and contains only lowercase letters. It is guaranteed that no quest appears as its own prerequisite. -----Output----- If it is possible to complete all quests, print the quests in the order they can be completed. If there are multiple valid orders, any one of them will be accepted. If it is not possible to complete all quests, print \\"impossible\\". -----Examples----- Sample Input 1: 4 clean_house cook_meal buy_groceries cook_meal buy_groceries clean_house cook_meal play_game Sample Output 1: buy_groceries clean_house cook_meal play_game Sample Input 2: 3 quest3 quest1 quest1 quest2 quest2 quest3 Sample Output 2: impossible","solution":"from collections import defaultdict, deque def find_quest_order(n, prerequisites): # Dictionary to store the prerequisites prereq_map = defaultdict(list) # Dictionary to maintain the in-degree of nodes in_degree = defaultdict(int) all_quests = set() for x, y in prerequisites: prereq_map[x].append(y) in_degree[y] += 1 all_quests.add(x) all_quests.add(y) # Initialize the queue with the quests that have an in-degree of 0 (no prerequisites) queue = deque([quest for quest in all_quests if in_degree[quest] == 0]) order = [] # Process the queue while queue: current = queue.popleft() order.append(current) # For each quest that current is a prerequisite for for neighbour in prereq_map[current]: in_degree[neighbour] -= 1 if in_degree[neighbour] == 0: queue.append(neighbour) # If all quests are processed, return the order if len(order) == len(all_quests): return order else: return \\"impossible\\" # Sample usage def solve(): n = int(input().strip()) prerequisites = [input().strip().split() for _ in range(n)] result = find_quest_order(n, prerequisites) if result == \\"impossible\\": print(result) else: for quest in result: print(quest)"},{"question":"A group of friends are playing a card game in which each card has an integer value. The game proceeds in rounds, and each round, the friend with the smallest card value is declared the winner of that round. If there are multiple friends with the smallest card value, they all win the round. Your task is to write a program that determines the number of winners in each round and prints the index of each winner. For simplicity, the friends\' cards are presented as a list of integers, and the index of the card represents the friend\'s position. -----Input----- The input contains a single line with n integers separated by spaces, where 0 leq n leq 100 and each integer represents the card value of a friend. The value of each card is an integer between -1000 and 1000 inclusive. -----Output----- Output should contain two lines. On the first line, print the number of winners. On the second line, print the indices of the winners in ascending order, separated by spaces. If there are no friends playing the game, output \\"No winners\\". -----Examples----- Sample Input 1: 4 2 2 3 1 Sample Output 1: 1 4 Sample Input 2: 3 3 2 2 1 1 Sample Output 2: 2 4 5 Sample Input 3: (Empty Input) Sample Output 3: No winners","solution":"def find_winners(cards_list): if not cards_list: return \\"No winners\\" cards = list(map(int, cards_list.split())) min_value = min(cards) winners = [index for index, value in enumerate(cards) if value == min_value] number_of_winners = len(winners) winners_string = \' \'.join(map(str, winners)) return f\\"{number_of_winners}n{winners_string}\\""},{"question":"Task: You have to write a function `triangle_numbers_sequence` which returns the following Sequence (See Sequence & Examples) up to `n` numbers. * Note: `Returning` the sequence is not the same as `Printing` the sequence. # Rules/Note: * If `n < 1` then it should return \\"\\" i.e. empty string. * There are `no spaces` between the numbers in the sequence. * The sequence represents triangle numbers. # Sequence: 1 13 136 13610 1361015 ........ ........ 136101521...(Nth triangle number) # Examples: * triangle_numbers_sequence(4): 11313610 * triangle_numbers_sequence(6): 113136101521","solution":"def triangle_numbers_sequence(n): Returns the sequence of first `n` triangle numbers concatenated without spaces. If n < 1, return empty string. if n < 1: return \\"\\" def triangle_number(k): return (k * (k + 1)) // 2 result = \\"\\" for i in range(1, n + 1): result += str(triangle_number(i)) return result"},{"question":"Kenneth loves puzzles and recently got fascinated with palindromes. He wants to write a function that verifies if a given string is a palindrome or not. He has heard about case differences and non-alphanumeric characters affecting the palindrome check and needs to account for them. Write a function that takes a single string input and returns a boolean indicating whether the input string is a palindrome. The function should ignore case and should not consider non-alphanumeric characters. For example: - \\"A man, a plan, a canal, Panama\\" should return `True` (ignoring cases and non-alphanumeric characters). - \\"No lemon, no melon!\\" should return `True`. - \\"Hello, World!\\" should return `False`. You can assume the input string will only contain printable ASCII characters.","solution":"import re def is_palindrome(s): Verifies if the given string is a palindrome, ignoring case and non-alphanumeric characters. cleaned_str = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() return cleaned_str == cleaned_str[::-1]"},{"question":"Tom\'s bakery sells cookies in two types of packages: single cookies and boxes containing 3 cookies each. Tom\'s goal is to use the least number of packages to fill an order of exactly ( n ) cookies. Help Tom by determining two non-negative integer values ( p_1 ) and ( p_2 ) which are the number of single cookie packages and 3-cookie boxes, respectively, so that the total number of cookies in the packages is exactly ( n ) (i.e., ( p_1 + 3 cdot p_2 = n )), and the total number of packages ( p_1 + p_2 ) is minimized. -----Input----- The first line contains one integer ( t ) (( 1 le t le 10^4 )) — the number of test cases. Then ( t ) test cases follow. Each test case consists of one line. This line contains one integer ( n ) (( 1 le n le 10^9 )) — the number of cookies to be put into packages. -----Output----- For each test case, output a separate line containing two integers ( p_1 ) and ( p_2 ) (( p_1, p_2 ge 0 )) separated by a space where ( p_1 ) is the number of single cookie packages and ( p_2 ) is the number of 3-cookie boxes. If there are multiple optimal solutions, print any one. -----Examples----- Input 6 15 7 1 10 1000000000 5 Output 0 5 1 2 1 0 1 3 0 333333333 2 1 -----Note----- The answer for the first test case is \\"0 5\\". The total number of cookies is ( 0 cdot 1 + 5 cdot 3 = 15 ), and the total number of packages ( 0 + 5 = 5 ), which is the minimum possible for 15 cookies. The answer for the second test case is \\"1 2\\". The total number of cookies is ( 1 cdot 1 + 2 cdot 3 = 7 ), and the total number of packages ( 1 + 2 = 3 ), which is the minimum possible for 7 cookies.","solution":"def find_package_combination(n): Finds the minimal combination of single packages and 3-cookie boxes to exactly fulfill an order of n cookies. :param n: Integer, the exact number of cookies to be packaged. :return: Tuple (p1, p2), where p1 is the number of single packages and p2 is the number of 3-cookie boxes. if n < 0: raise ValueError(\\"Number of cookies must be a non-negative integer\\") # Calculate the number of 3-cookie boxes p2 = n // 3 # Calculate remaining cookies remainder = n % 3 # Remaining cookies to be packaged in single cookie packages p1 = remainder return p1, p2 def solve(t_cases): For each test case, find the minimal combination of single packages and 3-cookie boxes. :param t_cases: List of integers, each denoting the number of cookies in a given test case. :return: List of tuples (p1, p2) for each test case. results = [] for n in t_cases: results.append(find_package_combination(n)) return results"},{"question":"In a connected undirected graph, each vertex has a certain color. You are given a graph with N vertices and M edges. Each vertex has one of two colors - either red or blue. The graph is represented with adjacency lists. You need to process Q queries, each query consisting of two vertices u and v. For each query, you need to determine if there exists a path between vertex u and vertex v such that all vertices along the path (including u and v) are the same color. Input The first line contains T - the number of test cases. Then T test cases follow. Each test case consists of multiple lines. The first line contains two integers - N and M. The next line contains a string of length N, where the i-th character is \'R\' if the i-th vertex has color red, and \'B\' if the i-th vertex has color blue. The next M lines each contain two integers u and v, representing an undirected edge between vertices u and v (1 ≤ u, v ≤ N). Next line contains a positive integer Q - the number of queries you have to answer. The next Q lines each contain two integers u and v, representing the vertices for the query (1 ≤ u, v ≤ N). Output For each query, print \\"yes\\" (without quotes) if there exists a path between vertex u and vertex v such that all vertices along the path have the same color. Otherwise, print \\"no\\". Constraints 1 ≤ N ≤ 1000 1 ≤ M ≤ 2000 1 ≤ Q ≤ 500 1 ≤ T ≤ 10 SAMPLE INPUT 1 5 6 RBRRR 1 2 1 3 2 4 3 4 4 5 3 5 3 1 5 2 3 1 4 SAMPLE OUTPUT yes no yes","solution":"def process_queries(T, cases): def explore_graph(n, edges, colors, queries): from collections import defaultdict, deque # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) def bfs(start, color): queue = deque([start]) visited[start] = True component = [] while queue: node = queue.popleft() component.append(node) for neighbor in adj_list[node]: if not visited[neighbor] and colors[neighbor - 1] == color: visited[neighbor] = True queue.append(neighbor) return component # Find all same-color connected components visited = [False] * (n + 1) components = defaultdict(list) for i in range(1, n + 1): if not visited[i]: color = colors[i - 1] component = bfs(i, color) for node in component: components[node] = component results = [] for u, v in queries: if v in components[u]: results.append(\\"yes\\") else: results.append(\\"no\\") return results results = [] for i in range(T): n, m = cases[i][\'n\'], cases[i][\'m\'] colors = cases[i][\'colors\'] edges = cases[i][\'edges\'] q = cases[i][\'q\'] queries = cases[i][\'queries\'] results.extend(explore_graph(n, edges, colors, queries)) return results def read_input(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 cases = [] for _ in range(T): n = int(data[index]) m = int(data[index + 1]) index += 2 colors = data[index] index += 1 edges = [] for _ in range(m): u = int(data[index]) v = int(data[index + 1]) edges.append((u, v)) index += 2 q = int(data[index]) index += 1 queries = [] for _ in range(q): u = int(data[index]) v = int(data[index + 1]) queries.append((u, v)) index += 2 cases.append({ \'n\': n, \'m\': m, \'colors\': colors, \'edges\': edges, \'q\': q, \'queries\': queries }) return T, cases def main(): T, cases = read_input() results = process_queries(T, cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Compare two strings and determine if one string is a permutation of the other. Write a function that takes in two strings and returns `True` if one string is a permutation of the other, and `False` otherwise. # Examples ```python is_permutation(\\"abc\\", \\"cba\\") => True is_permutation(\\"abcd\\", \\"dabc\\") => True is_permutation(\\"abcd\\", \\"abce\\") => False ```","solution":"def is_permutation(str1, str2): Determines if str1 is a permutation of str2. return sorted(str1) == sorted(str2)"},{"question":"You are given a sequence of integers representing the heights of boxes stacked on top of each other. Each box can only be placed directly on top of a taller box. Your task is to calculate the maximum number of boxes that can be stacked on top of each other following the given constraints. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of boxes. The second line contains n space-separated integers h_1, h_2, dots, h_n (1 le h_i le 10^9) — the heights of the boxes. -----Output----- Print a single integer — the maximum number of boxes that can be stacked on top of each other. -----Examples----- Input 5 1 2 3 4 5 Output 5 Input 6 6 5 4 3 2 1 Output 1 Input 7 3 7 2 5 6 4 1 Output 3 -----Note----- In the first example, all boxes can be stacked on top of each other because each box is shorter than the one beneath it. In the second example, no box can be placed on top of any other box because each box is taller than the one above it. In the third example, one of the valid stacks is [2, 5, 6].","solution":"def max_boxes_stack(n, heights): Calculates the maximum number of boxes that can be stacked on top of each other. :param n: int, number of boxes :param heights: list of int, heights of the boxes :return: int, maximum number of boxes that can be stacked if n == 0: return 0 dp = [1] * n # dp[i] will hold the max stack height ending with the i-th box for i in range(n): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Given a large dataset of integers, Aaron wants to efficiently manage and query it. He may need to add new numbers, delete existing ones, or check the presence of a number. You need to implement a data structure that supports the following operations: 1. `add x`: Add integer `x` to the set. 2. `delete x`: Remove integer `x` from the set if it exists. 3. `exists x`: Check whether integer `x` is present in the set. Input: - The first line contains an integer `Q`, the number of queries. - The next `Q` lines each contain one of the commands `add x`, `delete x`, or `exists x`. Output: - For each `exists x` command, output \\"YES\\" if `x` is present in the set and \\"NO\\" otherwise. Constraints: - 1 ≤ Q ≤ 100000 - -10^9 ≤ x ≤ 10^9 SAMPLE INPUT 8 add 1 add 2 exists 1 exists 3 add 3 exists 3 delete 3 exists 3 SAMPLE OUTPUT YES NO YES NO Explanation: 1. First, we add `1` and `2` to the set. 2. Then, we check for the existence of `1`, which is in the set, so the output is \\"YES\\". 3. Next, we check for the existence of `3`, which is not in the set, so the output is \\"NO\\". 4. We add `3` to the set. 5. Checking for the existence of `3` again, it is now in the set, so the output is \\"YES\\". 6. We delete `3` from the set. 7. Finally, checking for the existence of `3`, it is no longer in the set, so the output is \\"NO\\".","solution":"class IntegerSet: def __init__(self): self.set = set() def add(self, x): self.set.add(x) def delete(self, x): self.set.discard(x) def exists(self, x): return \\"YES\\" if x in self.set else \\"NO\\" def handle_queries(queries): int_set = IntegerSet() results = [] for query in queries: command, *value = query.split() value = int(value[0]) if value else None if command == \\"add\\": int_set.add(value) elif command == \\"delete\\": int_set.delete(value) elif command == \\"exists\\": results.append(int_set.exists(value)) return results # Example usage: def process_input(input): lines = input.strip().split(\\"n\\") Q = int(lines[0]) queries = lines[1:1+Q] results = handle_queries(queries) return results"},{"question":"Given a list of words and a number k, write a function to return the top k frequent words in the list. The function should return the words in descending order of their frequency, and in case of a tie, the words should be sorted in ascending lexicographical order. Function Signature: ```python def top_k_frequent_words(words: List[str], k: int) -> List[str]: pass ``` Example: Input: ```python words = [\\"i\\", \\"love\\", \\"leetcode\\", \\"i\\", \\"love\\", \\"coding\\"] k = 2 ``` Output: `[\\"i\\", \\"love\\"]` Explanation: - \\"i\\" appears 2 times and \\"love\\" appears 2 times; since both have the same frequency, we return them in lexicographical order. Input: ```python words = [\\"the\\", \\"day\\", \\"is\\", \\"sunny\\", \\"the\\", \\"the\\", \\"the\\", \\"sunny\\", \\"is\\", \\"is\\"] k = 4 ``` Output: `[\\"the\\", \\"is\\", \\"sunny\\", \\"day\\"]` Explanation: - \\"the\\" appears 4 times, \\"is\\" appears 3 times, \\"sunny\\" appears 2 times, and \\"day\\" appears 1 time.","solution":"from typing import List from collections import Counter def top_k_frequent_words(words: List[str], k: int) -> List[str]: Returns the top k frequent words in the list. The words are sorted in descending order of their frequency, and in case of a tie, they are sorted in ascending lexicographical order. # Count the frequency of each word word_count = Counter(words) # Sort the words first by the frequency (descending), then alphabetically (ascending) sorted_words = sorted(word_count.keys(), key=lambda word: (-word_count[word], word)) # Return the top k words return sorted_words[:k]"},{"question":"The railway company is planning a new transport system that includes a series of connecting train lines. They have a plan to build a new track between two cities in such a way that the travel time is minimized. Given N cities (numbered 1 through N) and M train lines connecting them, each line i connecting cities u_i and v_i with a travel time of t_i.minutes You are tasked with finding the two cities such that the travel time between them is minimized. You can only travel directly between these two cities; no intermediate stops are allowed. Note that there may be multiple lines connecting the same pair of cities, and you must consider each line\'s travel time independently. Your task in this problem is to help determine the minimum travel time between any two cities. Input The first line contains two integers: N (2 ≤ N ≤ 100,000) and M (1 ≤ M ≤ 200,000), representing the number of cities and the number of train lines, respectively. Next M lines each contain three integers: u_i v_i and t_i (1 ≤ u_i, v_i ≤ N, u_i ≠ v_i, 1 ≤ t_i ≤ 10^9), representing a train line between cities u_i and v_i with a travel time of t_i minutes. Output Output a single integer representing the minimum travel time between any two cities. Examples Input 3 3 1 2 10 2 3 5 1 3 20 Output 5 Input 4 5 1 2 15 1 3 7 2 3 3 3 4 6 2 4 12 Output 3 Explanation Explanation for the sample input/output #1: The direct travel time between cities 2 and 3 is the shortest, with a travel time of 5 minutes. Explanation for the sample input/output #2: The direct travel time between cities 2 and 3 is the shortest, with a travel time of 3 minutes.","solution":"def min_travel_time(N, M, trains): Find the minimum travel time between any two cities. :param N: int - number of cities. :param M: int - number of train lines. :param trains: list of tuples - each tuple contains (u, v, t) representing a train line. :return: int - minimum travel time between any two cities. min_time = float(\'inf\') for u, v, t in trains: if t < min_time: min_time = t return min_time"},{"question":"Design a function that generates a list of prime numbers up to a given integer \'n\'. Your task is to write a code that takes an integer \'n\' as input and returns all prime numbers less than or equal to \'n\'. Input: - The code should take the number of test cases \'T\' as input. - For each test case, the code should take an integer \'n\'. Output: - For each test case, print all prime numbers less than or equal to \'n\' in ascending order, separated by spaces. - Each test case output should be in a separate line. Constraint: - 1 ≤ T ≤ 5 - 2 ≤ n ≤ 100 Example: SAMPLE INPUT 2 10 20 SAMPLE OUTPUT 2 3 5 7 2 3 5 7 11 13 17 19","solution":"def sieve_of_eratosthenes(n): Generates a list of prime numbers up to a given integer n. Parameters: n (int): The upper limit for generating prime numbers (inclusive). Returns: list: A list of prime numbers up to n. primes = [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, n + 1): if is_prime[i]: primes.append(i) for j in range(i * i, n + 1, i): is_prime[j] = False return primes def prime_numbers_up_to_n(test_cases): For each test case, print all prime numbers less than or equal to n in ascending order. Parameters: test_cases (list of int): List of integers for each test case. Returns: list of str: List where each entry is a string of prime numbers for that test case. results = [] for n in test_cases: primes = sieve_of_eratosthenes(n) results.append(\' \'.join(map(str, primes))) return results"},{"question":"You have been given an array of integers. Your task is to write a function that finds the sum of the non-repeating (unique) elements in the array. Example 1: Input: [1, 2, 2, 3, 4, 4, 5] Output: 9 Explanation: The unique elements are [1, 3, 5], and their sum is 9. Example 2: Input: [10, 20, 10, 30, 40, 30] Output: 60 Explanation: The unique elements are [20, 40], and their sum is 60. Your Task: You don\'t need to input anything. Complete the function `sumOfUniqueElements()` that takes an array of integers as input and returns the sum of the unique elements. Constraints: * The array length will be at most 100. * The elements of the array will be between -100 and 100.","solution":"def sumOfUniqueElements(arr): Returns the sum of the non-repeating (unique) elements in the array. # Creating a dictionary to store the frequency of each element frequency = {} for element in arr: if element in frequency: frequency[element] += 1 else: frequency[element] = 1 # Summing only the unique (non-repeating) elements unique_sum = sum(key for key, value in frequency.items() if value == 1) return unique_sum"},{"question":"You are a nature photographer who wants to capture pictures of a rare bird. This bird appears at random times throughout the day, but it is guaranteed to appear at least once every k consecutive minutes. To ensure you capture at least one picture of the bird, you can set up some cameras to take pictures at specific times throughout the day. Each camera can only take one picture, but you can set up multiple cameras. Given the value of k, determine the minimum number of cameras you need to set up and at what times (in minutes) they should take pictures to guarantee you capture the bird. Assume the day lasts for n minutes. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ n) — the total number of minutes in a day and the number of consecutive minutes in which the bird is guaranteed to appear at least once. Output The first line should contain a single integer t — the minimum number of cameras needed. The second line should contain t space-separated integers, representing the times (in minutes) at which you should set up the cameras to take pictures. Examples Input 10 3 Output 4 0 3 6 9 Input 6 2 Output 3 0 2 4 Note In the first example, setting up cameras at minutes 0, 3, 6, and 9 ensures that each 3 minute window will contain at least one camera, thereby guaranteeing a picture of the bird. In the second example, setting up cameras at minutes 0, 2, and 4 ensures that each 2 minute window is covered.","solution":"def bird_camera_setup(n, k): Determines the minimum number of cameras needed and the times at which the cameras take pictures. Parameters: n (int): Total number of minutes in a day. k (int): Number of consecutive minutes in which the bird is guaranteed to appear at least once. Returns: (int, List[int]): The minimum number of cameras needed and the list of times at which the cameras take pictures. cameras = [] for i in range(0, n, k): cameras.append(i) return len(cameras), cameras"},{"question":"A company is organizing a marathon event and wants to ensure the efficiency of the registration process by checking the uniqueness of participant IDs. Each participant is assigned a unique ID upon registration. Your task is to implement a system that will verify the uniqueness of participant IDs upon registration. Each test case consists of a series of registration attempts, where each attempt includes a participant ID. The system should print \\"DUPLICATE\\" if a participant ID has already been registered, and \\"UNIQUE\\" if it is the first occurrence of the ID. INPUT The first line of the input contains T, the number of test cases. Each test case contains multiple lines. The first line of each test case contains an integer N, the number of registration attempts. The next N lines contain one integer each, representing a participant ID. OUTPUT For each registration attempt, print \\"DUPLICATE\\" if the participant ID has already been registered, and \\"UNIQUE\\" if it is the first occurrence of the ID. CONSTRAINT 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ participant_ID ≤ 100000 SAMPLE INPUT 2 5 1234 5678 1234 9012 5678 3 1111 1112 1113 SAMPLE OUTPUT UNIQUE UNIQUE DUPLICATE UNIQUE DUPLICATE UNIQUE UNIQUE UNIQUE Explanation For the first test case, there are 5 registration attempts. The participant IDs are 1234, 5678, 1234, 9012, and 5678. The output for these attempts will be \\"UNIQUE\\" for the first occurrence of each ID, and \\"DUPLICATE\\" for any subsequent occurrences. For the second test case, there are 3 registration attempts. All participant IDs are unique, so the output will be \\"UNIQUE\\" for each attempt.","solution":"def check_uniqueness(T, test_cases): results = [] for i in range(T): N, ids = test_cases[i] seen_ids = set() for participant_id in ids: if participant_id in seen_ids: results.append(\\"DUPLICATE\\") else: results.append(\\"UNIQUE\\") seen_ids.add(participant_id) return results # Example usage: # T = 2 # test_cases = [ # (5, [1234, 5678, 1234, 9012, 5678]), # (3, [1111, 1112, 1113]) # ] # print(check_uniqueness(T, test_cases)) # Output should be [\'UNIQUE\', \'UNIQUE\', \'DUPLICATE\', \'UNIQUE\', \'DUPLICATE\', \'UNIQUE\', \'UNIQUE\', \'UNIQUE\']"},{"question":"Alice is participating in a coding competition where she encounters the following problem: You are given a string `s` consisting of lowercase letters and an integer `k`. Your task is to find the length of the shortest possible string that can be obtained by applying the following operation exactly `k` times: 1. Select any two adjacent characters in the string `s` and remove them. 2. Concatenate the rest of the string, maintaining the order of the characters. Note that it is not necessary that the resulting string after each operation is still a valid string. For example, removing characters could result in an empty string. Input The first line of input contains a single integer `t` (1 ≤ t ≤ 100), the number of test cases. For each test case: - The first line contains the string `s` (2 ≤ |s| ≤ 10^5), the initial string. - The second line contains the integer `k` (0 ≤ k ≤ ⌊|s|/2⌋). Output For each test case, output a single line containing the length of the shortest possible string after applying the operation exactly `k` times. Examples Input 2 abccba 2 hellocode 1 Output 2 7 Explanation In the first test case, \\"abccba\\": - After first operation, remove \'cc\': \\"abba\\" - After second operation, remove \'bb\': \\"aa\\", the shortest possible string length is 2. In the second test case, \\"hellocode\\": - After removing \'ll\', the string becomes \\"heocode\\", and applying any further removal is not possible since `k` is 1. The length of the string is 7.","solution":"def shortest_string_length(s, k): Returns the length of the shortest possible string after applying the operation exactly k times. # Length of the initial string initial_length = len(s) # Calculate the final length after performing k operations final_length = initial_length - 2 * k return final_length def process_test_cases(t, test_cases): results = [] for s, k in test_cases: results.append(shortest_string_length(s, k)) return results"},{"question":"You are given an array of integers representing the heights of building blocks. Your task is to compute the maximum rectangle area that can fit between the blocks, considering the heights as vertical bars of a bar chart. Example 1: Input: [2, 1, 5, 6, 2, 3] Output: 10 Example 2: Input: [2, 4] Output: 4 Note: - The height of the rectangle is determined by the shortest bar in the range selected. - Your algorithm should efficiently compute the area considering all possible rectangles within the list of heights.","solution":"def largestRectangleArea(heights): Given an array of heights representing a bar chart, return the area of the largest rectangle that can fit within the bounds of the bar chart. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given a sequence of positive integers and your task is to determine the k-th largest element in the sequence after each insertion operation. Write a program that supports the following operations: - `insert(x)`: Inserts the integer x into the sequence. - `kth(k)`: Returns the k-th largest element currently in the sequence. Constraints - The number of operations is ≤ 100,000. - 1 ≤ x ≤ 1,000,000,000. - 1 ≤ k ≤ number of elements in the sequence at the time of the kth operation. Input Multiple operations are given, each in a new line. Each operation is either `insert x` (where x is the integer to be inserted) or `kth k` (where k is the position to retrieve the k-th largest element). Input ends with a line containing \\"end\\". Output For each `kth` operation, print the k-th largest element in the current sequence in a line. Example Input insert 5 insert 2 kth 1 insert 8 kth 2 insert 3 kth 3 end Output 5 5 3","solution":"import heapq class KthLargest: def __init__(self): self.sequence = [] self.min_heap = [] def insert(self, x): heapq.heappush(self.sequence, -x) def kth(self, k): # Copy the heap to avoid modifying the original structure temp = self.sequence.copy() # Use heappop to get the k-th largest element result = None for _ in range(k): result = -heapq.heappop(temp) return result def process_operations(operations): kth_largest = KthLargest() results = [] for op in operations: if op.startswith(\'insert\'): _, x = op.split() kth_largest.insert(int(x)) elif op.startswith(\'kth\'): _, k = op.split() results.append(kth_largest.kth(int(k))) return results"},{"question":"A popular mobile device game requires the player to navigate a grid-based maze to collect treasures and avoid obstacles. The maze is represented as a 2D grid, where each cell either contains a treasure (\'T\'), an obstacle (\'O\'), or is empty (\'.\'). The player starts at the top-left corner of the grid (cell (0, 0)) and can move to any adjacent cell (i.e., left, right, up, or down) but cannot move into cells containing obstacles. The objective is to find the maximum number of treasures the player can collect while navigating through the maze. Write a program that determines the maximum number of treasures that can be collected starting from the top-left corner and moving only to adjacent cells without passing through obstacles. Input The input is given in the following format: ``` N M maze ``` The first line contains two integers, N (1 ≤ N ≤ 100) and M (1 ≤ M ≤ 100), representing the number of rows and columns in the grid, respectively. The next N lines each contain a string of length M, representing the maze. Each character in the string is one of the following: - \'T\' (indicating a cell containing a treasure) - \'O\' (indicating a cell containing an obstacle) - \'.\' (indicating an empty cell) Output Output the maximum number of treasures that can be collected starting from the top-left corner of the grid. If it\'s impossible to reach any treasures, output 0. Examples Input ``` 5 5 T.T.. .OO.. .T.T. .OO.. ..... ``` Output 4 Input ``` 3 3 T.O .O. .O. ``` Output 1","solution":"def max_treasures(N, M, maze): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * M for _ in range(N)] def collect_treasures(x, y): if not (0 <= x < N and 0 <= y < M) or visited[x][y] or maze[x][y] == \'O\': return 0 visited[x][y] = True if maze[x][y] == \'T\': treasures = 1 else: treasures = 0 for dx, dy in directions: treasures += collect_treasures(x + dx, y + dy) return treasures if maze[0][0] == \'O\': return 0 return collect_treasures(0, 0)"},{"question":"In a small town, there is a bustling market where vendors sell fruits and each vendor has their unique way of pricing. John, a fruit enthusiast, wants to buy fruits at the minimum possible cost. He is interested in a fair deal and approaches the vendors one by one, negotiating for the best possible price. Each vendor offers John a bundle of fruits and prices. However, John is only concerned about two types of fruits: apples (represented by \'A\') and bananas (represented by \'B\'). Due to the seasonal offers, vendors declare the prices for bundles that may contain other fruits which John is not interested in. John wants to select those bundles in a way that he can get exactly m apples and n bananas with the minimum total cost. Help John find this minimum cost to buy exactly m apples and n bananas from the given bundles or determine if it is impossible. Input The first line of input consists of a single integer T, denoting the number of test cases. Each test case consists of several lines: The first line contains two integers k (denoting the number of vendors) and m, n (denoting the required number of apples and bananas respectively). The next k lines, each contains three integers a, b, c, where a denotes the number of apples in the bundle, b denotes the number of bananas in the bundle, and c denotes the cost of the bundle. Output For each test case, output the minimum cost to obtain exactly m apples and n bananas. If it is not possible to get the exact number of fruits required, output -1. Constraints: 1 ≤ T ≤ 10 1 ≤ k ≤ 100 0 ≤ a, b ≤ 100 1 ≤ c ≤ 1000 0 ≤ m, n ≤ 100 SAMPLE INPUT 2 3 5 5 3 2 10 4 4 20 2 3 7 2 0 0 1 1 1 0 2 2 SAMPLE OUTPUT 17 -1 Explanation In the first test case: John can buy the first bundle (3 apples, 2 bananas, cost 10) and the third bundle (2 apples, 3 bananas, cost 7) which sums up to 5 apples, 5 bananas at a total cost of 10 + 7 = 17. In the second test case: John needs 0 apples and 0 bananas, thus the cost is simply 0.","solution":"def min_cost_to_buy_fruits(T, test_cases): def knapsack(k, bundles, m, n): dp = [[float(\'inf\')] * (n + 1) for _ in range(m + 1)] dp[0][0] = 0 for a, b, c in bundles: for i in range(m, -1, -1): for j in range(n, -1, -1): if dp[i][j] != float(\'inf\'): new_a = min(i + a, m) new_b = min(j + b, n) dp[new_a][new_b] = min(dp[new_a][new_b], dp[i][j] + c) return dp[m][n] if dp[m][n] != float(\'inf\') else -1 results = [] for case in test_cases: k, m, n, bundles = case result = knapsack(k, bundles, m, n) results.append(result) return results"},{"question":"A well-known game requires players to form words from a given set of characters. Each character may be used only once per word, and the length of the word must be at least 1. The scoring mechanism of the game provides points based on the length of the word formed: a word of length `l` earns `l * l` points. Given a list of words and a set of available characters, your task is to determine the maximum score that can be achieved by forming words from the available characters. Your program should read the input, process the data, and produce the output as described below. Input The input consists of multiple test cases. Each test case has the following format: - An integer `n` (1 ≤ n ≤ 100), representing the number of words. - `n` lines follow, each containing a word made of lowercase alphabetic characters (a-z) with a length of 1 to 10. - A single line containing a string `s` (1 ≤ |s| ≤ 100), representing the set of available characters. This set can contain duplicate characters. The end of input is indicated by a single line containing the number 0. Output For each test case, output the maximum score that can be achieved by forming words from the available characters `s`. Example Input 3 apple banana pear aaplepnbaanr 2 ice nice ciniece 0 Output 25 16 Explanation In the first test case, the words \\"apple\\" and \\"banana\\" can be formed from the characters \\"aaplepnbaanr\\". The maximum score is obtained by forming \\"banana\\" which scores 36 points (6*6). You could also form \\"apple\\" for 25 points and \\"pear\\" for 16 points, but using \\"banana\\" alone yields a higher score. In the second test case, \\"nice\\" can be formed from \\"ciniece\\" scoring 16 points (4*4), whereas \\"ice\\" scores only 9 points (3*3). The maximum score thus is 16.","solution":"def get_word_score(word): Return the score of the word based on its length. Score is calculated as the square of the word\'s length. return len(word) ** 2 def can_form_word(word, chars): Check if \'word\' can be formed from the characters in \'chars\'. from collections import Counter word_count = Counter(word) chars_count = Counter(chars) for letter, count in word_count.items(): if chars_count[letter] < count: return False return True def max_score(words, available_chars): Given a list of words and a string of available characters, return the maximum score that can be achieved by forming valid words from the available characters. max_possible_score = 0 for word in words: if can_form_word(word, available_chars): max_possible_score = max(max_possible_score, get_word_score(word)) return max_possible_score def process_input(input_data): Read the input data and process each test case. Return the maximum score for each test case. i = 0 n = int(input_data[i]) results = [] while n != 0: i += 1 words = [] for _ in range(n): words.append(input_data[i]) i += 1 available_chars = input_data[i] results.append(max_score(words, available_chars)) i += 1 n = int(input_data[i]) if i < len(input_data) else 0 return results"},{"question":"Given two sorted integer arrays, nums1 and nums2, merge nums2 into nums1 as one sorted array in non-decreasing order. Example 1: Input: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Example 2: Input: nums1 = [1], m = 1 nums2 = [], n = 0 Output: [1] Your Task: You don\'t need to read input or print anything. Your task is to complete the function mergeSortedArrays() which takes two integer arrays nums1, nums2 and the integers m, n as input and returns a list of integers representing the final merged sorted array. Expected Time Complexity: O(m + n) Expected Auxiliary Space: O(1) Constraints: 0 <= m, n <= 200 1 <= nums1[i], nums2[i] <= 10^9","solution":"def mergeSortedArrays(nums1, m, nums2, n): Merges nums2 into nums1 in-place. The first m elements of nums1 and all n elements of nums2 are merged. # Start from the end of nums1 and nums2 i, j, k = m - 1, n - 1, m + n - 1 while j >= 0: if i >= 0 and nums1[i] > nums2[j]: nums1[k] = nums1[i] i -= 1 else: nums1[k] = nums2[j] j -= 1 k -= 1 return nums1"},{"question":"You are given an N-digit number. You can delete exactly one digit from the number to result in a new number with N-1 digits. Your task is to write a program to determine the smallest possible number that can be obtained by deleting exactly one digit from the given N-digit number. Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains a single N-digit number. Output Format For each test case, print the smallest possible number that can be obtained by deleting exactly one digit in a new line. Constraints 1 <= T <= 100 2 <= N <= 1000 The provided number does not contain any leading zeros except if the number is \\"0\\" Sample Input 3 635 89 1029 Sample Output 35 8 29 Explanation For the first test case, removing \'6\' yields the smallest number which is \'35\'. For the second test case, removing \'9\' yields the smallest number which is \'8\'. For the third test case, removing \'1\' yields the smallest number which is \'029\', which essentially is \'29\' without leading zeros.","solution":"def smallest_number_after_deletion(number): This function takes a single N-digit number and returns the smallest possible number after deleting one digit. smallest = float(\'inf\') number_str = str(number) for i in range(len(number_str)): new_number_str = number_str[:i] + number_str[i+1:] new_number = int(new_number_str) if new_number < smallest: smallest = new_number return smallest def process_test_cases(test_cases): results = [] for number in test_cases: results.append(smallest_number_after_deletion(number)) return results"},{"question":"DZY is fascinated by sequences and their properties. Today, he came across a problem that involves determining the beauty of a sequence of integers. We define the beauty of a sequence as the sum of the values of its peaks. A peak in a sequence is an element that is greater than both of its neighbors. For the first and the last elements, we consider them peaks if they are greater than their single neighbor. DZY wants to find the beauty of the sequence after performing a series of operations. In each operation, he can choose a subsequence of the sequence and reverse it. He can perform the operation as many times as he wants (possibly zero). Calculate the maximum beauty of the sequence that DZY can achieve after performing the operations. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the length of the sequence. The second line contains n space-separated integers a_{i} (1 ≤ a_{i} ≤ 10^9), the elements of the sequence. -----Output----- Output a single integer, the maximum beauty of the sequence DZY can achieve. -----Examples----- Input 5 1 3 2 5 4 Output 5 Input 4 4 3 2 1 Output 4 Input 6 10 1 10 2 1 10 Output 30 -----Note----- In the first sample, reversing the subsequence (3, 2, 5) will form the sequence (1, 5, 2, 3, 4), making 5 a peak. In the second sample, no matter how you reverse the subsequence, the only peaks will be either 4 at the beginning or at the end. In the third sample, reversing segments strategically can make all 10\'s peaks, resulting in total beauty of 30.","solution":"def max_beauty_of_sequence(n, sequence): # For any given sequence, to maximize the beauty, we should make highest values the peaks if n == 1: return sequence[0] max_value = max(sequence) # maximum beauty of the sequence is when every peak is the max element and considering reversing operations, # the length of the sequence can be achieved such that every max_value is a peak return max_value * 2 if sequence.count(max_value) > 1 else max_value"},{"question":"Emma is working on a project that involves processing a large amount of numerical data. She needs to identify the largest contiguous subarray within a one-dimensional array of numbers that has the maximum sum. However, due to constraints on memory, Emma needs a solution that operates with O(n) time complexity and uses O(1) extra space. Your task is to help Emma by writing a function that receives an array of integers and returns the sum of the largest contiguous subarray. Your function should have the following signature: `def max_subarray_sum(arr: List[int]) -> int:` Examples ```python # Example 1 arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] print(max_subarray_sum(arr)) # Should print 6 (subarray [4, -1, 2, 1]) # Example 2 arr = [1] print(max_subarray_sum(arr)) # Should print 1 # Example 3 arr = [5, 4, -1, 7, 8] print(max_subarray_sum(arr)) # Should print 23 # Example 4 arr = [-1, -2, -3, -4] print(max_subarray_sum(arr)) # Should print -1 ``` Constraints 1. The input array can have at least one element. 2. The sum can be a negative number if all elements in the array are negative. 3. The solution must operate in O(n) time complexity. 4. The solution should use O(1) extra space (ignore input array space for counting).","solution":"from typing import List def max_subarray_sum(arr: List[int]) -> int: Returns the sum of the largest contiguous subarray within a one-dimensional array of numbers. Uses Kadane\'s Algorithm to achieve O(n) time complexity and O(1) extra space. if not arr: return 0 current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a 2D grid with dimensions `n x m`, where each cell has a time value indicating the time taken to pass through that cell. You are required to find the minimum time to travel from the top-left corner of the grid (0, 0) to the bottom-right corner of the grid (n-1, m-1). You can move to adjacent cells in the grid (up, down, left, right). The goal is to determine the shortest path by minimizing the total time spent. Example Consider the following grid based on the listed inputs: n = 3 m = 3 grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] The minimum time to travel from the top-left to the bottom-right is 7. Explanation: Starting from (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2), we collect the cell values along the way [1, 3, 1, 1, 1], and the sum is 7, which is the minimum time. Function Description Complete the `min_travel_time` function in the editor below. `min_travel_time` has the following parameter(s): - `int n`: the number of rows. - `int m`: the number of columns. - `int grid[n][m]`: the grid containing time values for each cell. Returns - `int`: the minimum time to travel from the top-left corner to the bottom-right corner of the grid. Input Format The first line contains two space-separated integers `n` and `m` representing the number of rows and columns in the grid, respectively. Each of the next `n` lines contains `m` space-separated integers where each integer represents the time value of a corresponding cell. Constraints - 1 leq n, m leq 100 - 0 leq text{grid}[i][j] leq 100 Sample Input 3 3 1 3 1 1 5 1 4 2 1 Sample Output 7 Note: The minimum time is calculated using the given grid and the shortest path through the grid.","solution":"import heapq def min_travel_time(n, m, grid): Returns the minimum time to travel from the top-left corner to the bottom-right corner of the grid. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: 2D list containing time values for each cell :return: Minimum time to travel from (0, 0) to (n-1, m-1) # Dijkstra\'s algorithm to find the shortest path in a grid def dijkstra(grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] pq = [(grid[0][0], 0, 0)] # (time, x, y) visited = set() while pq: time, x, y = heapq.heappop(pq) if (x, y) in visited: continue visited.add((x, y)) if x == n - 1 and y == m - 1: return time for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: heapq.heappush(pq, (time + grid[nx][ny], nx, ny)) return dijkstra(grid)"},{"question":"A city has a grid layout where streets run north-south and east-west. A delivery robot starts at the top-left corner of the grid (0,0) and must navigate to deliver packages to various locations specified by coordinates (x, y). The robot can only move down or to the right at any point in time. Write a function `findPaths(N, M, deliveries)` that determines the number of distinct paths the robot can take to deliver packages to each specified location given the grid dimensions N (rows) and M (columns). The function should return a list containing the number of ways to reach each delivery location. Example 1: Input: N = 3, M = 3 deliveries = [(2, 2), (1, 2), (2, 1)] Output: [6, 3, 3] Explanation: - For (2, 2): Starting from (0, 0), there are 6 ways to reach (2, 2) which are 4 downs and 4 rights. - For (1, 2): There are 3 ways to reach (1, 2), which are RRD, RDR, DRR. - For (2, 1): There are 3 ways to reach (2, 1), which are DDR, DRD. Example 2: Input: N = 2, M = 2 deliveries = [(1, 1)] Output: [2] Explanation: - For (1, 1): Starting from (0, 0), there are 2 ways to reach (1, 1) which are RD, DR. Your task: You do not need to read input or print anything. Your task is to complete the function `findPaths(N, M, deliveries)` that takes grid dimensions (N, M), and a list of delivery coordinates as input and returns a list of the number of paths to each delivery location. Expected Time Complexity: O(N * M) for preprocessing, each query in O(1). Expected Auxiliary Space: O(N * M) to store the dynamic programming table. Constraints: 1 ≤ N, M ≤ 100 1 ≤ |deliveries| ≤ 10 1 ≤ x < N, 1 ≤ y < M","solution":"def findPaths(N, M, deliveries): Determine the number of distinct paths the robot can take to each specified location. Parameters: N (int): Number of rows in the grid. M (int): Number of columns in the grid. deliveries (list of tuple): List of coordinates where the robot must deliver packages. Returns: list: List containing the number of ways to reach each delivery location. # Create a DP table to store number of ways to reach each cell dp = [[0] * M for _ in range(N)] # There\'s one way to reach the starting point dp[0][0] = 1 # Populate the DP table for i in range(N): for j in range(M): if i == 0 and j == 0: continue ways_from_top = dp[i-1][j] if i > 0 else 0 ways_from_left = dp[i][j-1] if j > 0 else 0 dp[i][j] = ways_from_top + ways_from_left # Retrieve number of ways for each delivery location result = [dp[x][y] for x, y in deliveries] return result"},{"question":"A tech company is organizing a coding competition where participants need to solve several problems. One of the problems involves managing a queue with specific operations. The queue initially starts empty and various operations are performed on it. The operations that can be performed are: 1. **ENQUEUE x**: This operation adds the integer `x` to the end of the queue. 2. **DEQUEUE**: This operation removes the integer from the front of the queue. 3. **FRONT**: This operation prints the integer at the front of the queue. 4. **SIZE**: This operation prints the number of elements currently in the queue. 5. **ISEMPTY**: This operation prints \\"YES\\" if the queue is empty and \\"NO\\" otherwise. You need to implement the queue and support the execution of the operations in the order they are given. Input The first line contains an integer `n`, which represents the number of operations to be performed (1 ≤ n ≤ 100,000). Each of the next `n` lines contains one of the operations described above. The integer values `x` in the `ENQUEUE` operations are guaranteed to fit within the range of a 32-bit signed integer. Output For each `FRONT`, `SIZE`, and `ISEMPTY` operation, print the required output on a new line. Example Input ``` 8 ENQUEUE 5 ENQUEUE 10 FRONT DEQUEUE FRONT SIZE DEQUEUE ISEMPTY ``` Output ``` 5 10 1 YES ``` Explanation 1. **ENQUEUE 5**: The queue becomes [5]. 2. **ENQUEUE 10**: The queue becomes [5, 10]. 3. **FRONT**: The front element is 5. 4. **DEQUEUE**: Element 5 is removed, the queue becomes [10]. 5. **FRONT**: The front element is now 10. 6. **SIZE**: The size of the queue is 1. 7. **DEQUEUE**: Element 10 is removed, the queue becomes empty. 8. **ISEMPTY**: The queue is empty, so the output is \\"YES\\".","solution":"from collections import deque class Queue: def __init__(self): self.queue = deque() def enqueue(self, x): self.queue.append(x) def dequeue(self): if not self.isempty(): self.queue.popleft() def front(self): if not self.isempty(): return self.queue[0] def size(self): return len(self.queue) def isempty(self): return len(self.queue) == 0 def process_operations(n, operations): q = Queue() result = [] for op in operations: if op.startswith(\\"ENQUEUE\\"): _, x = op.split() q.enqueue(int(x)) elif op == \\"DEQUEUE\\": q.dequeue() elif op == \\"FRONT\\": result.append(q.front()) elif op == \\"SIZE\\": result.append(q.size()) elif op == \\"ISEMPTY\\": result.append(\\"YES\\" if q.isempty() else \\"NO\\") return result"},{"question":"A small online bookstore wishes to classify their books by genre. They have noticed that certain genres often contain keywords that are distinct to them. For instance, a book categorized under \\"Science Fiction\\" might frequently include keywords like \\"space\\", \\"alien\\", or \\"future\\". They want a program that can take a list of book titles along with their respective genres and automatically identify the genre based on the most frequently occurring keywords. Help the bookstore by writing a program that determines the genre of each book title based on the frequency of the associated keywords. Input The first input line contains an integer n (1 ≤ n ≤ 1000), representing the number of books. The following n lines contain the book titles and their respective keywords. Each line contains a book title followed by a list of keywords. The keywords for each book title are separated by commas. After the n book title lines, there is an integer m (1 ≤ m ≤ 100), which represents the number of genre-keyword pairs. The next m lines each contain a genre followed by a list of associated keywords. Each genre line is formatted starting with the genre name followed by a colon and then a list of keywords separated by commas. Keywords are case insensitive and are guaranteed to be unique within each genre. Output Output n lines, each containing a book title from the input followed by its predicted genre. If a book matches multiple genres, pick any one of the matching genres. If a book does not match any genre, output \\"Unknown\\" for that book’s genre. Examples Input 3 The Time Machine space,time,machine The War of the Worlds alien,war,planet To the Lighthouse sea,house,light 2 Science Fiction: space,alien,future Drama: love,tragedy,life Output The Time Machine Science Fiction The War of the Worlds Science Fiction To the Lighthouse Unknown","solution":"def classify_books(n, book_titles_and_keywords, m, genre_keywords): from collections import defaultdict import re # Dictionary to store genre and its associated keywords genre_to_keywords = defaultdict(set) for genre_line in genre_keywords: genre, keywords = genre_line.split(\':\') genre_to_keywords[genre.strip()] = set(map(str.strip, keywords.split(\',\'))) # Helper to cleanup keywords def clean_keyword(keyword): return re.sub(r\'[^a-z]\', \'\', keyword.lower()) # Get lowercased set of keywords for each genre genre_keywords_cleaned = {genre: {clean_keyword(k) for k in keywords} for genre, keywords in genre_to_keywords.items()} results = [] for book_line in book_titles_and_keywords: parts = book_line.split() title = \' \'.join(parts[:-1]) keywords = parts[-1].split(\',\') cleaned_keywords = {clean_keyword(k) for k in keywords} # Determine which genre this book most likely belongs to best_match = None best_count = 0 for genre, genre_keywords_set in genre_keywords_cleaned.items(): count = len(cleaned_keywords & genre_keywords_set) if count > best_count: best_count = count best_match = genre if best_match: results.append(f\\"{title} {best_match}\\") else: results.append(f\\"{title} Unknown\\") return results"},{"question":"A company has decided to give bonuses to its employees based on their performance ratings. The bonuses are given such that each employee receives a bonus of at least 1. Additionally, any employee with a higher performance rating than an adjacent employee receives more money than that adjacent employee. You are given the number of employees N and an array of integers ratings where ratings[i] represents the performance rating of the i-th employee. Determine the minimum total amount of bonuses the company needs to give out. -----Constraints----- - 1 leq N leq 10^5 - 1 leq ratings[i] leq 10^5 -----Input----- Input is given from Standard Input in the following format: N ratings_1 ratings_2 ... ratings_N -----Output----- Print the minimum total amount of bonuses the company needs to give out. -----Sample Input----- 5 1 2 2 5 1 -----Sample Output----- 7 Explanation: - Employee 1 gets 1 bonus (minimum). - Employee 2 gets 2 bonuses because his rating is higher than Employee 1. - Employee 3 gets 1 bonus (same rating as previous, so no increase). - Employee 4 gets 3 bonuses because his rating is highest. - Employee 5 gets 1 bonus (minimum). So, the minimum total bonus is 1 + 2 + 1 + 3 + 1 = 7.","solution":"def min_total_bonuses(N, ratings): if N == 1: return 1 bonuses = [1] * N # Left to Right pass for i in range(1, N): if ratings[i] > ratings[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Right to Left pass for i in range(N - 2, -1, -1): if ratings[i] > ratings[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) return sum(bonuses)"},{"question":"Amit enjoys finding interesting properties about numbers. One day he found a very large integer n and wanted to know the largest prime factor of n. Given an integer n, your task is to find its largest prime factor. -----Input----- The input consists of a single integer n (2 leq n leq 10^{12}). -----Output----- Print a single integer — the largest prime factor of n. -----Examples----- Input 21 Output 7 Input 100 Output 5 Input 13 Output 13 -----Note----- In the first example, the prime factors of 21 are 3 and 7. The largest one is 7. In the second example, the prime factors of 100 are 2 and 5. The largest one is 5. In the third example, 13 itself is a prime number, so the largest prime factor is 13.","solution":"def largest_prime_factor(n): Returns the largest prime factor of n. # Start with the smallest prime number i = 2 # Move through potential prime factors while i * i <= n: # If \'i\' is a factor, divide \'n\' by \'i\' if n % i: i += 1 else: n //= i # After the loop, n will contain the largest prime factor return n"},{"question":"Alice owns a bakery and she wants to track the changes in her inventory. She stocks different types of pastries and wants to know the quantity of each type over time. You are given an array representing the initial stock of `n` types of pastries, and a series of `q` updates to this stock. Each update is one of two types: 1. Add a quantity `x` to the `i`-th type of pastry. 2. Set the quantity of the `i`-th type of pastry to `x`. After performing each update, you need to calculate the total number of pastries in stock. -----Input----- The first line contains two integers `n` and `q` (`1 ≤ n, q ≤ 2 * 10^5`) — the number of types of pastries and the number of updates, respectively. The second line contains `n` integers `a_1, ..., a_n` (`0 ≤ a_i ≤ 10^9`) — the initial stock of each type of pastry. Each of the following `q` lines contains a description of the corresponding update. The description begins with integer `t` (`t ∈ {1, 2}`) which denotes the type of the update: - If `t = 1`, then two integers `i` and `x` follow (`1 ≤ i ≤ n`, `1 ≤ x ≤ 10^9`) — add quantity `x` to the `i`-th type of pastry. - If `t = 2`, then two integers `i` and `x` follow (`1 ≤ i ≤ n`, `0 ≤ x ≤ 10^9`) — set the quantity of the `i`-th type of pastry to `x`. -----Output----- Print `q` integers, each on a separate line. In the `i`-th line print the total number of pastries in stock after performing the first `i` updates. -----Examples----- Input 4 4 10 20 30 40 1 2 10 2 3 5 1 4 20 2 1 15 Output 110 85 105 110 -----Note----- Consider the array from the example and the result of performing each update: Initial stock is `[10, 20, 30, 40]`. After performing the first update, stock equals to `[10, 30, 30, 40]`. The total number of pastries is `110`. After performing the second update, stock equals to `[10, 30, 5, 40]`. The total number of pastries is `85`. After performing the third update, stock equals to `[10, 30, 5, 60]`. The total number of pastries is `105`. After performing the fourth update, stock equals to `[15, 30, 5, 60]`. The total number of pastries is `110`.","solution":"def track_inventory(n, q, initial_stock, updates): total_stock = sum(initial_stock) results = [] for update in updates: t, i, x = update idx = i - 1 if t == 1: total_stock += x initial_stock[idx] += x elif t == 2: total_stock -= initial_stock[idx] initial_stock[idx] = x total_stock += x results.append(total_stock) return results"},{"question":"Create a function that determines if an encoded string represents a valid pattern based on specific rules. The function will take a string as input and return `True` if the pattern is valid and `False` otherwise. The string can consist of the following characters: `A`, `B`, and `C`. The rules for a valid pattern are: 1. A pattern is valid if it is empty. 2. A pattern is valid if it starts with `A` and ends with `C`. 3. Between the `A` and `C`, there must be exactly one `B`. For example: - `\\"ABC\\"` is a valid pattern because it starts with `A`, has exactly one `B` in between, and ends with `C`. - `\\"AABCC\\"` is not a valid pattern because it has more than one `B` between `A` and `C`. - `\\"AC\\"` is not a valid pattern because there is no `B` between `A` and `C`. - `\\"\\"` (empty string) is a valid pattern as per rule 1. - `\\"ABBC\\"` is not a valid pattern because there are two `B`s between `A` and `C`. Implement the function `is_valid_pattern` that checks the validity of the pattern based on the above rules. The function signature is: ```python def is_valid_pattern(pattern: str) -> bool: pass ``` # Examples ```python is_valid_pattern(\\"ABC\\") # ➞ True is_valid_pattern(\\"AABCC\\") # ➞ False is_valid_pattern(\\"AC\\") # ➞ False is_valid_pattern(\\"\\") # ➞ True is_valid_pattern(\\"ABBC\\") # ➞ False ```","solution":"def is_valid_pattern(pattern: str) -> bool: Determines if the given string `pattern` is a valid pattern based on the rules. Args: pattern (str): The input string pattern to be checked. Returns: bool: True if the pattern is valid, False otherwise. # Rule 1: A pattern is valid if it is empty. if not pattern: return True # Rule 2: A pattern is valid if it starts with `A` and ends with `C`. if pattern[0] != \'A\' or pattern[-1] != \'C\': return False # Rule 3: Between the `A` and `C`, there must be exactly one `B`. middle = pattern[1:-1] return middle == \\"B\\""},{"question":"Given an m x n grid filled with non-negative integers, determine the minimum path sum from the top left to the bottom right corner. You can only move either down or right at any point in time. Create a program that calculates the minimum path sum for multiple datasets. # Input The input consists of multiple datasets. Each dataset is given in the following format: - The first line contains two integers m and n (1 ≤ m, n ≤ 100), representing the number of rows and columns in the grid respectively. - The next m lines each contain n integers (each integer is between 0 and 1000) separated by spaces, representing the values in the grid. The end of input is indicated by \\"0 0\\" on a new line. # Output For each dataset, output a single integer: the minimum path sum from the top left to the bottom right corner of the grid. # Examples Input ``` 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 0 0 ``` Output ``` 7 3 ``` Explanation: - For the first dataset, the path 1→3→1→1→1 minimizes the sum, resulting in a minimum path sum of 7. - For the second dataset, the path 1→1→1 minimizes the sum, resulting in a minimum path sum of 3.","solution":"def min_path_sum(grid): Returns the minimum path sum from the top left to the bottom right corner of the grid. You can only move either down or right at any point in time. if not grid: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] def process_multiple_datasets(input_data): Processes multiple datasets and returns the minimum path sum for each dataset. results = [] datasets = input_data.strip().split(\'n\') i = 0 while i < len(datasets): m, n = map(int, datasets[i].split()) if m == 0 and n == 0: break grid = [] for j in range(i + 1, i + 1 + m): grid.append(list(map(int, datasets[j].split()))) results.append(min_path_sum(grid)) i += m + 1 return results"},{"question":"A group of friends are playing a simplified version of the game \\"Hot Potato\\". They are standing in a line in the order from friend 1 to friend N. The game starts with friend 1 holding the potato. Each friend has a unique \'pass strength\' P_i that determines the number of positions they can pass the potato forward. For instance, if friend i holds the potato and their pass strength is P_i, they can pass it to any of the friends from (i+1) to (i+P_i) (both inclusive), provided these positions are within the range of 1 to N. The goal of the game is to identify the friend who has received the potato last, i.e., from whom no valid pass can be made further. Your task is to find out the last friend holding the potato for each test case. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of friends. The second line contains N space-separated integers P_1, P_2, ..., P_N denoting the pass strengths of the friends in the same order. ------ Output ------ For each test case, print a single integer indicating the 1-based position of the last friend holding the potato. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 2*10^5 1 ≤ P_i ≤ 10^6 The sum of N over all test cases does not exceed 2*10^5 ------ Sample Input ------ 2 4 3 1 2 4 3 1 2 0 ------ Sample Output ------ 4 3 ------ Explanation ------ Example case 1: Friend 1 can pass to friend 2, 3, or 4; let\'s assume they pass to friend 4. Friend 4 cannot pass the potato to anyone as P_4=4 and there are no friends positioned after 4. Hence, friend 4 is the last holder. Example case 2: Friend 1 can pass to friend 2, and friend 2 can pass to friend 3. Friend 3 has a pass strength of 0, which means no further passes can be made from friend 3. Hence, friend 3 is the last holder.","solution":"def last_friend(N, P): Determines the last friend holding the potato. Parameters: N : int - Number of friends. P: List[int] - List of pass strengths. Returns: int - The 1-based position of the last friend holding the potato. position = 0 # Start with the first friend (0-based index). while True: max_pass_range = min(position + P[position], N - 1) # Determine the furthest pass position. # Check if there is no one to pass the potato anymore. if max_pass_range <= position: break # No valid pass can be made further. position = max_pass_range # Move to the new position (friend). return position + 1 # Return the 1-based position. def solve(T, test_cases): results = [] for N, P in test_cases: results.append(last_friend(N, P)) return results # Function to read input and output results def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 P = list(map(int, data[index:index+N])) index += N test_cases.append((N, P)) results = solve(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"A: Trip Route Planning problem You are given a list of trip stops represented by their respective coordinates on a 2D plane. Each stop has an (x, y) coordinate. Your task is to find the shortest route that visits all the trip stops exactly once and returns to the starting point. Input format n x_1 y_1 x_2 y_2 ... x_n y_n The first line contains an integer n (1 ≤ n ≤ 12) representing the number of trip stops. The next n lines each contain two integers x and y (-1000 ≤ x, y ≤ 1000) representing the coordinates of each trip stop. Output format Print the shortest possible route\'s total distance, formatted to four decimal places. The distance between two stops (x1, y1) and (x2, y2) is calculated as √((x2−x1)² + (y2−y1)²). Example Input 4 0 0 1 0 1 1 0 1 Output 4.0000 Input 5 -1 2 2 2 2 3 -1 3 0 0 Output 10.0645 Example explanation In the first example, the optimal route is (0,0) -> (1,0) -> (1,1) -> (0,1) -> (0,0) resulting in a total distance of 4.0. In the second example, the optimal route is (-1,2) -> (2,2) -> (2,3) -> (-1,3) -> (0,0) -> (-1,2) resulting in a total distance of approximately 10.0645.","solution":"import itertools import math def calculate_distance(p1, p2): Calculates the Euclidean distance between two points p1 and p2. return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def shortest_route_distance(stops): Finds the shortest route that visits all trip stops exactly once and returns to the starting point. n = len(stops) min_distance = float(\'inf\') for permutation in itertools.permutations(stops): distance = 0 for i in range(n): distance += calculate_distance(permutation[i], permutation[(i + 1) % n]) min_distance = min(min_distance, distance) return round(min_distance, 4) # Example Usage if __name__ == \\"__main__\\": stops = [(0, 0), (1, 0), (1, 1), (0, 1)] print(shortest_route_distance(stops)) # Should output: 4.0000"},{"question":"You are given a string S consisting only of the letters \'a\' and \'b\'. You can perform the following operation as many times as you want: Choose a substring \\"ab\\" and replace it with \\"b\\". You need to determine the minimum possible length of the string you can obtain after performing the operation any number of times. -----Constraints----- - 1 leq |S| leq 10^5 - S is a string of \'a\' and \'b\'. -----Input----- The input is given from Standard Input in the following format: S -----Output----- Print the minimum possible length of the string after performing the operation any number of times. -----Sample Input----- abbab -----Sample Output----- 3 Explanation: In the string \\"abbab\\", you can transform it by replacing \\"ab\\" as follows: - Step 1: \\"abbab\\" -> \\"bbab\\" - Step 2: \\"bbab\\" -> \\"bbb\\" The minimal possible length of the string is 3, which is \\"bbb\\".","solution":"def minimum_length(S): Given a string S consisting only of the letters \'a\' and \'b\', determine the minimum possible length of the string after replacing all \\"ab\\" with \\"b\\" as many times as possible. a_count = S.count(\'a\') b_count = S.count(\'b\') # The minimum length is the number of \'b\' characters left, # as all \'a\' can be removed by the operation. return b_count"},{"question":"James and Emily are constructing a sequence of numbers. Initially, they start with an array of integers, and they take turns picking any two numbers from the array to \\"combine\\" them. Combining two numbers means removing both numbers from the array and adding a single number to the array equal to their sum. This process continues until only one number is left in the array. The game is designed for James to always start first. James and Emily play optimally, aiming to maximize the final number left in the array when the game ends. Given the starting array and knowing that both players play optimally, find out the final number left in the array. Input The first line of the input contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the initial array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Output a single integer — the final number left in the array after James and Emily finished combining the numbers optimally. Example Input 4 2 9 3 1 Output 24 Input 3 10 20 30 Output 60 Note In the first example: James can combine 9 and 3 to make 12, the array becomes [2, 1, 12]. Then, Emily combines 2 and 1 to make 3, the array becomes [3, 12]. Finally, James combines 3 and 12 to make 15, leaving the array as [15]. In the second example: James combines 30 and 20 to make 50, leaving the array as [10, 50]. Then, Emily combines 10 and 50 to make 60, leaving the array as [60].","solution":"def final_number(n, arr): Given the number of elements and the initial array, this function returns the final number left after James and Emily have finished combining numbers optimally. :param n: int, the number of elements in the initial array :param arr: list of int, the initial elements in the array :return: int, the final number left after combining # The final number left will always be the sum of all numbers in the array return sum(arr)"},{"question":"Chef has a rectangular garden divided into a grid of cells with R rows and C columns. Each cell of the garden can either have a plant or be empty. Chef starts in the top-left cell of the garden and wants to count all distinct paths to reach the bottom-right cell. However, Chef can only move right or down at each step and must avoid cells that have plants. Chef needs your help to determine the number of distinct paths given the grid configuration. ------ Input ------ The first line contains two integers R and C representing the number of rows and columns in the garden respectively. The next R lines each contain C integers, where a 0 indicates an empty cell and a 1 indicates a cell with a plant. ------ Output ------ Output a single integer representing the number of distinct paths from the top-left cell to the bottom-right cell while avoiding cells with plants. ------ Constraints ------ 1 ≤ R, C ≤ 100 The cells in the top-left and bottom-right corners will always be empty and all cells are either 0 or 1. ------ Sample Input 1 ------ 3 3 0 0 0 0 1 0 0 0 0 ------ Sample Output 1 ------ 2 ----- Explanation 1 ------ There are two distinct paths from the top-left cell to the bottom-right cell while avoiding the plant in the middle row: - Path 1: Right -> Right -> Down -> Down - Path 2: Down -> Down -> Right -> Right","solution":"def count_paths(grid): R = len(grid) C = len(grid[0]) # Create a DP array dp = [[0]*C for _ in range(R)] # Initializing the starting point if grid[0][0] == 0: dp[0][0] = 1 # Fill the dp array for i in range(R): for j in range(C): if grid[i][j] == 0: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def parse_input(input_str): lines = input_str.strip().split(\'n\') R, C = map(int, lines[0].strip().split()) grid = [list(map(int, line.strip().split())) for line in lines[1:]] return count_paths(grid)"},{"question":"You are the owner of a popular online store, and you want to analyze the price history of a particular item to determine if a customer could benefit from strategic purchases. Given a list of n prices, where the i-th element represents the price of the item on the i-th day, you want to find out the maximum profit a customer could make by buying the item on one day and selling it on a later day. If no profit can be made, the profit should be 0. More precisely, you should write a function that will, for each test case, determine the maximum possible profit by selecting two points in time which maximize the difference between the selling price and buying price. -----Input---- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Each test case starts with an integer n (2 le n le 10^5) — the number of days for which prices are given. The next line contains n integers p_1, p_2, ..., p_n (1 le p_i le 10^4) — the prices of the item on those days. -----Output---- For each test case, print one integer — the maximum profit a customer can achieve for the corresponding test case. If no profit can be made, print 0. -----Examples---- Input 2 6 7 1 5 3 6 4 5 7 6 4 3 1 Output 5 0 -----Note---- In the first test case, the maximum profit can be achieved by buying the item on the second day (price = 1) and selling it on the fifth day (price = 6). The profit is 6 - 1 = 5. In the second test case, no profit can be achieved as the prices are decreasing every day. Thus, the output is 0.","solution":"def max_profit(prices): This function calculates the maximum profit that can be made by buying and then later selling an item given a list of prices for a number of days. if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit def compute_max_profits(test_cases): results = [] for case in test_cases: n, prices = case results.append(max_profit(prices)) return results"},{"question":"Alice is organizing a hiking trip with her friends and needs to decide the order in which they will visit a series of checkpoints. There are n checkpoints they must visit, and each checkpoint has a unique difficulty level associated with it. Alice wants to create a plan where the sum of the absolute differences between the difficulties of consecutive checkpoints is minimized. She can rearrange the order of visiting the checkpoints in any way she wishes, but she cannot skip any checkpoint. Your task is to help Alice find the minimum possible sum of the absolute differences between the difficulties of consecutive checkpoints. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of checkpoints. The second line contains n integer numbers d_{i} (1 ≤ d_{i} ≤ 10^9) — the difficulty level for each checkpoint. -----Output----- Print one number — the minimum possible sum of the absolute differences between the difficulties of consecutive checkpoints. -----Examples----- Input 4 10 1 4 8 Output 9 Input 3 3 6 2 Output 4 Input 5 1 3 5 9 2 Output 6 -----Note----- In the first example, Alice can reorder the checkpoints as [1, 4, 8, 10]. The sum of the absolute differences is |4-1| + |8-4| + |10-8| = 3 + 4 + 2 = 9. In the second example, Alice can reorder the checkpoints as [2, 3, 6]. The sum of the absolute differences is |3-2| + |6-3| = 1 + 3 = 4. In the third example, Alice can reorder the checkpoints as [1, 2, 3, 5, 9]. The sum of the absolute differences is |2-1| + |3-2| + |5-3| + |9-5| = 1 + 1 + 2 + 4 = 8.","solution":"def minimum_sum_of_differences(n, difficulties): Returns the minimum possible sum of the absolute differences between the difficulties of consecutive checkpoints. if n <= 1: return 0 difficulties.sort() min_sum = 0 for i in range(1, n): min_sum += abs(difficulties[i] - difficulties[i - 1]) return min_sum"},{"question":"ZS the Coder is working on a program to simulate simple messaging between nodes in a network represented as an undirected graph of `n` vertices numbered 0 through n-1. Each pair of directly connected nodes has a direct communication cost associated with it, represented by a non-negative integer. Due to a temporary disturbance in the network, some of the communication costs are reset to zero. ZS the Coder wants to identify whether it\'s possible to set the communication costs (previously zero due to disturbance) to positive integers such that the total communication cost for sending a message from a given start node `s` to an end node `t` does not exceed a prescribed amount `C`. Input The first line contains four integers n, m, C, s, t (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10,000, 1 ≤ C ≤ 10^9, 0 ≤ s, t ≤ n - 1, s ≠ t) — the number of vertices, number of edges, the maximum allowable communication cost, the starting node, and the ending node respectively. The next m lines describe the edges of the network. Each line contains three integers ui, vi, ci (0 ≤ ui, vi ≤ n - 1, ui ≠ vi, 0 ≤ ci ≤ 10^9) where `ui` and `vi` denote the endpoints of the edge and `ci` denotes its communication cost. If `ci` equals 0, the communication cost was reset due to the disturbance. Output Print \\"POSSIBLE\\" if it is feasible to assign positive integer costs to the disturbed edges such that the total communication cost from `s` to `t` is at most `C`. If it is not possible, print \\"IMPOSSIBLE\\". If multiple solutions exist, print any of them. Examples Input 4 4 10 0 3 0 1 5 1 2 0 2 3 2 0 3 0 Output POSSIBLE 0 1 5 1 2 3 2 3 2 0 3 4 Input 3 2 5 0 2 0 1 2 1 2 0 Output POSSIBLE 0 1 2 1 2 3 Input 3 2 2 0 2 0 1 2 1 2 0 Output IMPOSSIBLE Note In the first sample case, the disturbed edges can be assigned costs 3 and 4 respectively, making the path from node 0 to node 3 have a communication cost of 10. In the second sample case, the disturbed edge can be assigned a cost of 3, making the total communication cost 5 which is within the allowable limit. In the third sample case, it\'s impossible to assign any positive integer to the disturbed edge such that the total communication cost will not exceed 2, hence the output is \\"IMPOSSIBLE\\".","solution":"import heapq import sys def is_possible(n, m, C, s, t, edges): def dijkstra(n, adj, start_node): distances = [sys.maxsize] * n distances[start_node] = 0 priority_queue = [(0, start_node)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in adj[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances adj = [[] for _ in range(n)] zero_edges = [] for u, v, c in edges: if c == 0: zero_edges.append((u, v)) else: adj[u].append((v, c)) adj[v].append((u, c)) initial_distances = dijkstra(n, adj, s) if initial_distances[t] <= C: print(\\"POSSIBLE\\") for u, v, c in edges: if c == 0: print(u, v, C) else: for u, v in zero_edges: adj[u].append((v, 1)) adj[v].append((u, 1)) new_distances = dijkstra(n, adj, s) if new_distances[t] <= C: print(\\"POSSIBLE\\") for u, v, c in edges: if c == 0: estimated_cost = C - initial_distances[t] + 1 print(u, v, estimated_cost) else: print(\\"IMPOSSIBLE\\") # Example usage n, m, C, s, t = 3, 2, 5, 0, 2 edges = [ (0, 1, 2), (1, 2, 0), ] is_possible(n, m, C, s, t, edges)"},{"question":"=====Function Descriptions===== min The min function returns the minimum value from an input array element-wise. import numpy my_array = numpy.array([1, 2, 3, 4, 5, 6, 7, 8, 9]) print numpy.min(my_array) #1 max The max function returns the maximum value from an input array element-wise. import numpy my_array = numpy.array([1, 2, 3, 4, 5, 6, 7, 8, 9]) print numpy.max(my_array) #9 mean The mean function returns the mean of the values in an input array element-wise. import numpy my_array = numpy.array([1, 2, 3, 4, 5, 6, 7, 8, 9]) print numpy.mean(my_array) #5.0 median The median function returns the median of the values in an input array element-wise. import numpy my_array = numpy.array([1, 2, 3, 4, 5, 6, 7, 8, 9]) print numpy.median(my_array) #5.0 =====Problem Statement===== You are given a 1-D array, A. Your task is to print the minimum element, maximum element, mean, and median of the elements of A. =====Input Format===== A single line of input containing the space separated elements of array A. =====Output Format===== On the first line, print the minimum element of A. On the second line, print the maximum element of A. On the third line, print the mean of A. On the fourth line, print the median of A.","solution":"import numpy as np def array_stats(arr): Given a 1-D array, prints the minimum element, maximum element, mean, and median of the elements of the array. np_arr = np.array(arr) min_element = np.min(np_arr) max_element = np.max(np_arr) mean_element = np.mean(np_arr) median_element = np.median(np_arr) return min_element, max_element, mean_element, median_element"},{"question":"In a laboratory, there are several special chemicals stored in distinct containers. Each chemical has a safety level, and the chemicals are arranged in an array based on these safety levels, denoted by an array of integers where each element corresponds to the safety level of the chemical in that container. The researchers want to partition the array into separate non-overlapping subarrays such that each subarray is strictly increasing in terms of safety levels. Given an array of integers representing the safety levels, your task is to determine the minimum number of such strictly increasing subarrays required to partition the whole array. Input The first line contains an integer `n` (1 ≤ n ≤ 2000) - the number of containers. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 2000) where `ai` is the safety level of the chemical in the i-th container. Output Output a single integer representing the minimum number of strictly increasing subarrays needed. Examples Input 5 1 3 2 4 5 Output 2 Input 4 4 3 2 1 Output 4 Input 6 1 2 3 1 2 3 Output 2 Note In the first sample, we can partition the array into [1, 3] and [2, 4, 5]. In the second sample, each element is decreasing so we need each element as a separate subarray, hence the output is 4. In the third sample, the array can be partitioned into [1, 2, 3] and [1, 2, 3].","solution":"def min_increasing_subarrays(n, safety_levels): Determines the minimum number of subarrays required where each subarray is strictly increasing. Args: n (int): Number of containers. safety_levels (list of int): List of safety levels of the chemicals. Returns: int: Minimum number of strictly increasing subarrays. if n == 0: return 0 count = 1 for i in range(1, n): if safety_levels[i] <= safety_levels[i - 1]: count += 1 return count"},{"question":"A city planning committee is designing a park with bench seating for the community. Each bench in the park has a maximum seating capacity of c people. There\'s a group of n friends who want to sit together on these benches. The friends can divide themselves among multiple benches, but a bench must be completely filled before moving on to the next one. Your task is to determine the minimum number of benches needed to seat all n friends such that each bench is full where possible, and also determine the smallest number of friends seated on the last bench (which might not need to be full). -----Input----- The input consists of two integers, n and c (1 ≤ n, c ≤ 10^18), where n is the number of friends and c is the seating capacity of each bench. -----Output----- Print two integers: the first integer is the minimum number of benches needed for all friends, and the second integer is the number of friends seated on the last bench. -----Examples----- Input 15 6 Output 3 3 Input 28 7 Output 4 7 -----Note----- In the first sample, 15 friends need 3 benches: the first two benches will seat 6 friends each, and the last bench will seat the remaining 3 friends. In the second sample, 28 friends exactly fill 4 benches, as each bench seats 7 friends.","solution":"def minimum_benches_and_last_bench_seating(n, c): Determines the minimum number of benches needed to seat all n friends where each bench can hold up to c friends, and the number of friends on the last bench. :param n: Total number of friends :param c: Seating capacity of each bench :return: A tuple of (minimum number of benches, friends seated on the last bench) # Calculate the number of fully occupied benches full_benches = n // c # Calculate the number of friends on the last bench remaining_friends = n % c # If there are no remaining friends, all benches are fully occupied if remaining_friends == 0: return (full_benches, c) else: # Otherwise, we need one more bench for the remaining friends return (full_benches + 1, remaining_friends)"},{"question":"Given N integers, determine the sum of all integers that are divisible by a given integer K. # Input Input is given from standard input in the following format. ``` N K A_1 A_2 A_3 ... A_N ``` - N: an integer representing the number of elements. - K: an integer for the divisor. - A_i: N integers representing the elements of the array. # Output Output a single integer, the sum of all elements in the array that are divisible by K. If no element is divisible by K, output `0`. # Constraints - 1 leq N leq 1000 - 1 leq K leq 100 - -1000 leq A_i leq 1000 # Input Example 1 ``` 5 3 3 6 9 10 15 ``` # Output Example 1 ``` 33 ``` # Input Example 2 ``` 4 5 2 4 6 8 ``` # Output Example 2 ``` 0 ``` # Input Example 3 ``` 7 2 1 2 3 4 5 6 7 ``` # Output Example 3 ``` 12 ``` # Explanation of Examples - In the first example, all the numbers divisible by 3 are 3, 6, 9, and 15. Their sum is 33. - In the second example, none of the numbers are divisible by 5, hence the output is 0. - In the third example, the numbers divisible by 2 are 2, 4, and 6, with a sum of 12.","solution":"def sum_divisible_by_k(N, K, A): Returns the sum of all integers in the array A that are divisible by K. Args: N : int : the number of elements in the array K : int : the divisor A : list of int : the array of integers Returns: int : the sum total of integers divisible by K return sum(x for x in A if x % K == 0)"},{"question":"A group of tourists is on a hiking trip. They want to keep track of the highest elevation gain during their hike. They have a record of the elevations at various points along the trail. You will be given an array of elevations and a list of query pairs, each representing the start and end points of the segments of the trail to be considered. For each query, calculate the highest elevation gain between any two adjacent points in the segment. Example n = 5 elevations = [2,3,5,1,4] queries = [[0,2],[1,4]] For the segment starting at index 0 and ending at index 2, the elevations are 2, 3, 5. The gains between adjacent points are 1 (from 2 to 3) and 2 (from 3 to 5). The highest gain is 2. For the segment starting at index 1 and ending at index 4, the elevations are 3, 5, 1, 4. The gains between adjacent points are 2 (from 3 to 5), -4 (from 5 to 1), and 3 (from 1 to 4). The highest gain is 3. Function Description Complete the highestElevationGain function in the editor below. highestElevationGain has the following parameter(s): int n: the number of elevation measurements int[][] queries: each element contains the starting and ending indices for a segment to consider, inclusive Returns int[]: the highest elevation gain between any two adjacent points for each segment described Input Format The first line of input contains two integers, n and t, where n denotes the number of elevation measurements and t, the number of test cases. The next line has n space-separated integers which represent the array elevations. The next t lines contain two integers, i and j, where i is the start index and j is the end index of the segment to check. Constraints 2 le n le 100000 1 le t le 1000 0 le i < j < n 2 le j - i + 1 le min(n, 1000) 1 le text{elevation}[k] le 10000, where 0 le k < n Sample Input STDIN Function ----- -------- 5 2 n = 5, t = 2 2 3 5 1 4 elevations = [2, 3, 5, 1, 4] 0 2 queries = [[0, 2], [1, 4]] 1 4 Sample Output 2 3 Explanation The elevation gains and their segments are as follows: [0, 2]: Elevations = [2, 3, 5], Gains = [1, 2]. The highest gain is 2. [1, 4]: Elevations = [3, 5, 1, 4], Gains = [2, -4, 3]. The highest gain is 3.","solution":"def highestElevationGain(n, elevations, queries): Returns the highest elevation gain for each segment described in queries. Parameters: n (int): the number of elevation measurements. elevations (list): the array of elevation measurements. queries (list of lists): query pairs representing the start and end indices of segments. Returns: list: the highest elevation gain between any two adjacent points for each segment described. results = [] for query in queries: start, end = query max_gain = float(\'-inf\') for i in range(start, end): gain = elevations[i+1] - elevations[i] if gain > max_gain: max_gain = gain results.append(max_gain) return results"},{"question":"Peter is organizing a cryptocurrency exchange platform. On this platform, there are multiple types of cryptocurrencies, and traders who want to trade different pairs of cryptocurrencies. Peter\'s goal is to handle all trading requests without causing any deadlock. There are n different types of cryptocurrencies and m trading pairs. Each trading pair specifies two different cryptocurrencies that a trader wants to exchange. Peter can process these trading pairs in any order, as long as he ensures that all trading requests are fulfilled. A trading pair consists of two cryptocurrencies: if a trader wants to trade currency a_i for currency b_i, he must exchange currency a_i before currency b_i becomes available for trading. Peter needs to determine if there is an order in which he can process all the trading pairs such that no cycles are formed (i.e., ensuring no trader waits forever for another to complete). -----Input----- The first line contains two integers n and m (2 le n le 10^5; 1 le m le 2 cdot 10^5) — the number of different cryptocurrencies and the number of trading pairs. The i-th of the next m lines contains two integers a_i and b_i (1 le a_i, b_i le n; a_i ne b_i) — the trading pair information. -----Output----- If Peter can process the trading pairs without forming a cycle, print \\"ORDERED\\" (case insensitive) along with any valid order to process the pairs. If it is impossible to process the trades without forming a cycle, print \\"CYCLIC\\" (case insensitive). -----Examples----- Input 3 3 1 2 2 3 1 3 Output ORDERED 1 2 3 Input 4 4 1 2 2 3 3 4 4 2 Output CYCLIC Input 2 2 1 2 2 1 Output CYCLIC Input 5 6 1 2 2 3 3 4 4 5 5 3 2 4 Output CYCLIC Input 6 5 1 2 2 3 3 4 4 5 5 6 Output ORDERED 1 2 3 4 5 6 -----Note----- In the first example, one valid order to process the trading pairs is [1, 2, 3]. It ensures that all trading requests are fulfilled without causing any deadlock. In the second example, there is a cycle between the trading pairs (4, 2), (2, 3), (3, 4), forming a deadlock. In the third example, there is a direct cycle between the two trading pairs (1, 2) and (2, 1). In the fourth example, there is a cycle involving trading pairs (3, 4), (4, 5), and (5, 3), causing a deadlock. In the fifth example, the valid order to process the trading pairs is [1, 2, 3, 4, 5, 6], ensuring no deadlock occurs.","solution":"from collections import defaultdict, deque def process_trading_pairs(n, m, pairs): # Build graph adjacency list and in-degree array graph = defaultdict(list) in_degree = [0] * (n + 1) for a, b in pairs: graph[a].append(b) in_degree[b] += 1 # Perform topological sort using Kahn\'s algorithm queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) topological_order = [] while queue: node = queue.popleft() topological_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(topological_order) == n: return \\"ORDERED\\", topological_order else: return \\"CYCLIC\\", []"},{"question":"Several members of a programming club are interested in developing a software application that schedules weekly meetings for their club, given certain constraints. Every member has their own availability schedule, and the goal is to find the maximum number of members who can attend a single meeting in a given week. Each member’s availability is represented as a list of days they can attend, from 1 to 7, where 1 represents Monday, 2 represents Tuesday, and so on up to 7, which represents Sunday. You are tasked with writing a program that determines the maximum number of members who can attend a meeting on the same day given their availability schedules. # Input - The first line contains an integer n (1 ≤ n ≤ 100), the number of members in the club. - The next n lines each contain a space-separated list of integers representing the days of the week that the member is available. Each list starts with an integer k (1 ≤ k ≤ 7), the number of days the member is available, followed by k integers between 1 and 7. # Output - Print a single integer — the maximum number of club members who can attend a meeting on the same day. # Examples **Example 1:** ``` Input: 4 3 1 3 5 2 2 3 1 1 2 5 6 Output: 2 ``` **Example 2:** ``` Input: 5 2 1 4 3 2 3 7 1 3 2 3 5 1 7 Output: 3 ``` # Note In the first example, we have the following availability: - Member 1: Monday, Wednesday, Friday - Member 2: Tuesday, Wednesday - Member 3: Monday - Member 4: Friday, Saturday The optimal day for scheduling a meeting is Monday and Friday, where 2 members can attend. In the second example, members have the following availability: - Member 1: Monday, Thursday - Member 2: Tuesday, Wednesday, Sunday - Member 3: Wednesday - Member 4: Wednesday, Friday - Member 5: Sunday The optimal days for scheduling a meeting are Wednesday and Sunday, where 3 members can attend.","solution":"def max_attendance(n, schedules): Returns the maximum number of club members who can attend a meeting on the same day. :param n: int - the number of club members :param schedules: list of lists - each sublist representing the days a member is available :return: int - the maximum number of members available on the same day day_count = [0] * 7 # to count availability for each day from Monday to Sunday for schedule in schedules: for day in schedule: day_count[day - 1] += 1 return max(day_count)"},{"question":"You are given an unordered array containing n distinct integers ranging from 1 to n. Write a program that finds a permutation of the array such that the sum of the absolute differences of the elements\' indices and their respective values in the permutation is minimized. The absolute difference for an element a_i at index i is |P(i) - a_i|, where P is the permutation. The goal is to minimize the sum of these absolute differences for all elements in the array. ------Input------ The first input line contains an integer t (1 le t le 10^4)— the number of test cases. The next 2t lines describe the test cases as follows: The first line of each test case contains an integer n (1 le n le 10^5)— the number of elements in the array. The second line contains n distinct integers a_1, a_2, dots, a_n (1 le a_i le n)— the elements of the array. ------Output------ For each test case, output a single line containing the permutation P such that the sum of absolute differences is minimized. ------Examples------ Input 3 3 3 1 2 4 2 4 1 3 5 4 2 5 1 3 Output 1 2 3 1 2 3 4 1 2 3 4 5 Note: The permutation could be the sorted array from 1 to n because the sequence 1 to n minimizes the sum of absolute differences. There might be multiple correct answers, any permutation that satisfies the condition can be considered correct.","solution":"def minimize_absolute_differences(test_cases): results = [] for t in test_cases: n, arr = t results.append(\' \'.join(map(str, sorted(arr)))) return results # Function to process the input and output def process_input_output(input_text): lines = input_text.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] for i in range(1, 2 * t, 2): n = int(lines[i]) arr = list(map(int, lines[i + 1].split())) test_cases.append((n, arr)) results = minimize_absolute_differences(test_cases) return \\"n\\".join(results)"},{"question":"You are managing a ticket booking system for a concert. Each ticket has a unique identifier and different prices based on sections. Your task is to allocate seats to n customers such that the revenue is maximized without exceeding the total seating capacity S of the concert. Input - The first line contains two integers n and S (1 ≤ n ≤ 1000, 1 ≤ S ≤ 10000) representing the number of customers and the seating capacity. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) representing the ticket prices each customer is willing to pay. Output - Print the maximum revenue you can achieve while not exceeding the seating capacity. Example Input 5 10 60 100 120 150 90 Output 410 Input 4 5 30 60 90 100 Output 150","solution":"def maximize_revenue(n, S, prices): Returns the maximum revenue that can be achieved without exceeding the total seating capacity. Parameters: n (int): The number of customers. S (int): The total seating capacity. prices (list of int): The ticket prices each customer is willing to pay. Returns: int: The maximum revenue. prices.sort(reverse=True) # Sort prices in descending order max_revenue = 0 seats_taken = 0 for price in prices: if seats_taken < S: max_revenue += price seats_taken += 1 return max_revenue"},{"question":"You are provided with an array of positive integers. The *elegance* of a subarray is the frequency of the most frequent element within that subarray. Your task is to find the maximum *elegance* of a subarray of any size. A subarray is formed by deleting some (possibly zero) elements from the beginning of the array and some (possibly zero) elements from the end of the array. ------ Input Format ------ - The first line contains a single integer T: the number of test cases. - The first line of each test case contains a positive integer N: the size of array A. - The second line of each test case contains N positive integers: A_{1},A_{2},A_{3},ldots,A_{N}. ------ Output Format ------ For each test case, output a single integer representing the maximum elegance of subarray for the given array. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{5} 1 ≤ A_{i} ≤ 10^{9} - The sum of N over all test cases won\'t exceed 2 cdot 10^{5}. ----- Sample Input 1 ------ 3 5 1 2 2 3 3 6 5 5 5 5 5 5 4 1 2 3 4 ----- Sample Output 1 ------ 2 6 1 ----- Explanation 1 ------ Test case 1: - The subarray [2, 2] has the maximum elegance of 2 since the element 2 appears twice in the subarray. Test case 2: - The subarray [5, 5, 5, 5, 5, 5] has the maximum elegance of 6 since the element 5 appears six times in the subarray. Test case 3: - Any subarray starting with a unique number has the maximum elegance of 1 as each element appears only once.","solution":"def max_elegance(T, test_cases): This function receives the number of test cases and a list of test cases themselves. Each test case is a tuple where the first element is the size of the array and the second element is the array itself. It returns a list of maximum elegance for each test case. from collections import Counter results = [] for N, A in test_cases: if N == 0: results.append(0) continue # Calculate the frequency of each element in the array freq = Counter(A) # The maximum elegance is the maximum frequency of any element max_freq = max(freq.values()) results.append(max_freq) return results # Helper function to parse input def parse_input(input_string): inputs = list(map(int, input_string.split())) T = inputs.pop(0) test_cases = [] i = 0 while i < len(inputs): N = inputs[i] array = inputs[i + 1 : i + 1 + N] test_cases.append((N, array)) i += N + 1 return T, test_cases"},{"question":"You are given an array of integers representing the amount of rainfall in each day over a certain period. For a specified number of days, determine the maximum amount of rainfall in any contiguous subarray. Given the array of rainfall measurements, identify the maximum rainfall accumulation within any contiguous subarray of the given length. If the given length is greater than the total number of days, return -1. INPUT The first line contains two integers: - N, the total number of days (1 ≤ N ≤ 100,000) - K, the length of the subarray (1 ≤ K ≤ 100,000) The second line contains N space-separated integers representing the amount of rainfall on each day. Each integer is non-negative and does not exceed 10,000. OUTPUT A single line containing the maximum amount of rainfall recorded in any contiguous subarray of the given length, or -1 if K is greater than N. SAMPLE INPUT 10 3 6 2 9 4 1 8 3 5 7 10 SAMPLE OUTPUT 17 Explanation The subarray with the maximum rainfall accumulation of length 3 is [9, 4, 1], which sums to 14, [4, 1, 8] sums to 13 and [8, 3, 5] sums to 16. However, the maximum sum of rainfall for any three contiguous days is [5, 7, 10], which sums to 22.","solution":"def max_rainfall_in_subarray(N, K, rainfall): if K > N: return -1 max_sum = sum(rainfall[:K]) current_sum = max_sum for i in range(K, N): current_sum = current_sum - rainfall[i - K] + rainfall[i] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a sequence of integers and you are required to find the length of the longest subsequence that is bitonic. A sequence is called bitonic if it is first strictly increasing, then strictly decreasing. A new sequence needs to have at least one element, and it can be strictly increasing or strictly decreasing or first increasing and then decreasing. For example, the sequence [1, 11, 2, 10, 4, 5, 2, 1] is bitonic, because it increases from 1 to 11, then decreases from 11 to 1. You need to write a function that, given a sequence of n integers, returns the length of the longest bitonic subsequence. -----Input----- The function should take the following inputs: * An integer n (1 le n le 10^3), the length of the sequence. * A list of n integers, the sequence itself. **The input format may be adjusted to fit the requirements of a specific programming language (e.g., multiple arguments or a single data structure).** -----Output----- The function should return a single integer, the length of the longest bitonic subsequence. -----Examples----- Input 8 [1, 11, 2, 10, 4, 5, 2, 1] Output 6 Input 4 [1, 2, 3, 4] Output 4 Input 4 [4, 3, 2, 1] Output 4 -----Note----- In the first example, the longest bitonic subsequence is [1, 2, 10, 4, 2, 1], which has length 6. In the second example, the entire sequence [1, 2, 3, 4] is already strictly increasing, so it has length 4. In the third example, the entire sequence [4, 3, 2, 1] is already strictly decreasing, so it has length 4.","solution":"def longest_bitonic_subsequence(n, sequence): if n == 0: return 0 # Initialize the increasing and decreasing subsequence lengths inc = [1] * n dec = [1] * n # Compute lengths of increasing subsequences for i in range(1, n): for j in range(0, i): if sequence[i] > sequence[j]: inc[i] = max(inc[i], inc[j] + 1) # Compute lengths of decreasing subsequences for i in range(n-2, -1, -1): for j in range(n-1, i, -1): if sequence[i] > sequence[j]: dec[i] = max(dec[i], dec[j] + 1) # Find the maximum length of the bitonic subsequence max_length = 1 for i in range(n): max_length = max(max_length, inc[i] + dec[i] - 1) return max_length"},{"question":"A company\'s product manager wants to analyze sales data by aggregating sales amounts while considering various filters. The manager will provide different criteria in the form of a dictionary, and your task is to implement a function that returns the total sales based on those criteria. Here\'s an example of the sales data: ```python sales_data = [ {\\"date\\": \\"2023-01-01\\", \\"country\\": \\"USA\\", \\"product\\": \\"A\\", \\"amount\\": 100}, {\\"date\\": \\"2023-01-02\\", \\"country\\": \\"CAN\\", \\"product\\": \\"B\\", \\"amount\\": 150}, {\\"date\\": \\"2023-01-02\\", \\"country\\": \\"USA\\", \\"product\\": \\"A\\", \\"amount\\": 200}, {\\"date\\": \\"2023-01-03\\", \\"country\\": \\"USA\\", \\"product\\": \\"B\\", \\"amount\\": 300}, {\\"date\\": \\"2023-01-03\\", \\"country\\": \\"CAN\\", \\"product\\": \\"A\\", \\"amount\\": 50}, {\\"date\\": \\"2023-01-04\\", \\"country\\": \\"USA\\", \\"product\\": \\"C\\", \\"amount\\": 500} ] ``` The criteria dictionary can include any combination of \\"date\\", \\"country\\", and \\"product\\" to filter the sales data before summing up the amounts. For example: ```python criteria = {\\"date\\": \\"2023-01-02\\", \\"country\\": \\"USA\\"} ``` You need to implement a function `total_sales` that takes in `sales_data` and `criteria`, and returns the total sales amount that matches the given criteria. Example usage: ```python total_sales(sales_data, {\\"date\\": \\"2023-01-02\\"}) # should return 350 total_sales(sales_data, {\\"country\\": \\"USA\\"}) # should return 1100 total_sales(sales_data, {\\"product\\": \\"A\\"}) # should return 350 total_sales(sales_data, {\\"date\\": \\"2023-01-03\\", \\"country\\": \\"CAN\\"}) # should return 50 total_sales(sales_data, {}) # should return 1300, considering no filters ``` ```python def total_sales(sales_data, criteria): total = 0 for sale in sales_data: match = True for key, value in criteria.items(): if sale.get(key) != value: match = False break if match: total += sale[\\"amount\\"] return total ``` Implement the function `total_sales` to fulfill the requirement. The solution should be efficient and handle cases where some criteria are not specified.","solution":"def total_sales(sales_data, criteria): Aggregates sales amounts based on the provided criteria. Args: sales_data (list of dict): List of sales records. criteria (dict): Dictionary of criteria to filter the sales data. Returns: int: Total sales amount matching the given criteria. total = 0 for sale in sales_data: match = True for key, value in criteria.items(): if sale.get(key) != value: match = False break if match: total += sale[\\"amount\\"] return total"},{"question":"Design a function `find_palindrome_pairs` that takes a list of words and returns a list of all unique pairs of indices (i, j) such that the concatenation of the words `words[i] + words[j]` is a palindrome. # Function Signature `find_palindrome_pairs(words: List[str]) -> List[Tuple[int, int]]` # Input - `words` (List[str]): A list of non-empty strings consisting of lowercase letters. You can assume the length of the list is between 1 and 5000, and the length of each word is between 1 and 100. # Output - A list of tuples, where each tuple contains two integers representing the indices of the words in the input list that form a palindrome when concatenated. Each tuple (i, j) should be included only once, and the order in the output list does not matter. # Constraints - You may assume that each given word will contain only lowercase English letters \'a\' to \'z\'. # Examples Example 1 Input: ``` [\\"bat\\", \\"tab\\", \\"cat\\"] ``` Output: ``` [(0, 1), (1, 0)] ``` Explanation: - words[0] + words[1] = \\"battab\\" which is a palindrome - words[1] + words[0] = \\"tabbat\\" which is a palindrome Example 2 Input: ``` [\\"abcd\\", \\"dcba\\", \\"lls\\", \\"s\\", \\"sssll\\"] ``` Output: ``` [(0, 1), (1, 0), (3, 2), (2, 4)] ``` Explanation: - words[0] + words[1] = \\"abcddcba\\" which is a palindrome - words[1] + words[0] = \\"dcbaabcd\\" which is a palindrome - words[3] + words[2] = \\"slls\\" which is a palindrome - words[2] + words[4] = \\"llssssll\\" which is a palindrome","solution":"from typing import List, Tuple def is_palindrome(s: str) -> bool: Helper function to check if a given string is a palindrome. return s == s[::-1] def find_palindrome_pairs(words: List[str]) -> List[Tuple[int, int]]: Given a list of words, returns a list of all unique pairs of indices (i, j) such that the concatenation of the words words[i] + words[j] is a palindrome. palindrome_pairs = [] word_to_index = {word: i for i, word in enumerate(words)} for i, word in enumerate(words): for j in range(len(word) + 1): prefix, suffix = word[:j], word[j:] if is_palindrome(prefix): reversed_suffix = suffix[::-1] if reversed_suffix in word_to_index and word_to_index[reversed_suffix] != i: palindrome_pairs.append((word_to_index[reversed_suffix], i)) if j != len(word) and is_palindrome(suffix): reversed_prefix = prefix[::-1] if reversed_prefix in word_to_index and word_to_index[reversed_prefix] != i: palindrome_pairs.append((i, word_to_index[reversed_prefix])) return palindrome_pairs"},{"question":"David loves organizing tournaments in his local community. He has recently devised a new scoring system to rank participants in a competitive game. Each player can participate in multiple rounds of the game, and their final score is determined by the sum of points earned in each round. However, to offset the scoring system and give some players a better chance, David decided to subtract the lowest score attained in any round from the total score of the player. David needs your help to automate the calculation of the scores. Given the scores of each player in every round they participated in, you need to determine their final adjusted score. A player\'s adjusted score is calculated by summing up all their scores and then subtracting their lowest score. If a player has only participated in one round, their adjusted score is simply zero. -----Input----- The first line contains an integer p (1 le p le 100) — the number of players. The following p lines describe the scores of each player. Each line starts with an integer r_i (1 le r_i le 50) — the number of rounds the i-th player participated in. This is followed by r_i integers s_{ij} (0 le s_{ij} le 100) — the scores of the i-th player in each of the r_i rounds. -----Output----- Print p lines, each line containing one integer — the final adjusted score of the i-th player. -----Examples----- Input 3 5 10 20 30 40 50 2 5 15 1 100 Output 140 15 0 Input 2 3 1 2 3 4 6 7 8 9 Output 5 24 -----Note----- In the first example, for the first player, the sum of scores is 10+20+30+40+50 = 150, and the lowest score is 10. Thus, the final adjusted score is 150 - 10 = 140. For the second player, the sum of scores is 5 + 15 = 20, and the lowest score is 5. Thus, the final adjusted score is 20 - 5 = 15. For the third player, since they only participated in one round, their final adjusted score is 0. In the second example, the first player has scores 1, 2, 3, with sum 6 and lowest score 1, thus adjusted score is 5. The second player has scores 6, 7, 8, 9, with sum 30 and lowest score 6, thus adjusted score is 24.","solution":"def calculate_adjusted_scores(players_scores): adjusted_scores = [] for player_scores in players_scores: num_rounds = player_scores[0] scores = player_scores[1:] if num_rounds == 1: adjusted_scores.append(0) else: total_score = sum(scores) lowest_score = min(scores) adjusted_score = total_score - lowest_score adjusted_scores.append(adjusted_score) return adjusted_scores def get_input_output(data): lines = data.strip().split(\\"n\\") p = int(lines[0]) players_scores = [list(map(int, lines[i+1].split())) for i in range(p)] result = calculate_adjusted_scores(players_scores) return \\"n\\".join(map(str, result))"},{"question":"Minions are setting up a relay race as part of their sports event. There are N minions standing in a line. Each minion has a certain speed. In order to make the race competitive and fair, the starting positions of the minions must be adjusted such that any minion should not have a speed more than K times the speed of any minion standing behind them in the line. -----Input----- First line contains number of test cases T. Each test case consists of two lines. The first line contains two space-separated integers N and K denoting the number of minions and the maximum allowed speed factor respectively. The second line contains N space-separated integers s1, s2, ..., sN denoting the speeds of the minions. -----Output----- For each test case, output \\"YES\\" if it is possible to rearrange the minions to satisfy the condition, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 1000 - 1 ≤ K ≤ 100 - 1 ≤ si ≤ 10^9 for all 1 ≤ i ≤ N -----Example----- Input: 2 5 2 1 3 6 2 4 4 1 2 4 8 16 Output: YES NO -----Explanation----- Example case 1: The minions can be rearranged as [1, 2, 3, 4, 6] or [1, 2, 4, 3, 6] or other valid sequences where the speed condition holds. Example case 2: It\'s impossible to reorder the minions to satisfy the speed constraint with K = 1 as there\'s no valid ordering for the speeds [2, 4, 8, 16] where each speed is not more than once the speed of the minion behind it.","solution":"def can_rearrange_minions(test_cases): results = [] for N, K, speeds in test_cases: speeds.sort() possible = True for i in range(1, N): if speeds[i] > K * speeds[i - 1]: possible = False break results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"You are tasked to implement a function `is_palindromic_permutation` that determines whether any permutation of a given string `s` can form a palindrome. A string is a palindrome if it reads the same forwards and backwards. For example, \\"racecar\\" and \\"level\\" are palindromes, while \\"hello\\" is not. To solve this problem, consider the following points: - A string can be permuted to form a palindrome if and only if at most one of its characters appears an odd number of times. This is because in a palindrome, the number of times each character appears is typically balanced around the center. - You need to check the frequency of each character in the string. # Input - A single string `s` which consists of lowercase English letters (`1 ≤ |s| ≤ 1000`). # Output - Return `True` if any permutation of `s` can form a palindrome, otherwise return `False`. # Examples Input `racecar` Output `True` Input `hello` Output `False` Input `aab` Output `True` # Note For the first example, `racecar` itself is a palindrome. For the second example, no permutation of \\"hello\\" can form a palindrome. For the third example, the permutation \\"aba\\" can form a palindrome. Implement the function `is_palindromic_permutation` in Python.","solution":"def is_palindromic_permutation(s): Determines whether any permutation of the given string `s` can form a palindrome. Args: s: str - A single string consisting of lowercase English letters. Returns: bool - True if any permutation of `s` can form a palindrome, otherwise False. from collections import Counter # Count the frequency of each character in the string char_counts = Counter(s) # Count the number of characters that appear an odd number of times odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # A string can be permuted to form a palindrome if and only if at most one character has an odd count return odd_count <= 1"},{"question":"You are given a binary tree where each node contains an integer value. Your task is to determine the number of paths that sum to a given value. The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes). Example: Input: 10 / 5 -3 / 3 2 11 / 3 -2 1 Sum = 8 Output: 3 Explanation: The paths that sum to 8 are: - 5 -> 3 - 5 -> 2 -> 1 - -3 -> 11 Your Task: You don\'t need to read input or print anything. Your task is to complete the function pathSum() which takes the root of the binary tree and an integer sum as argument and returns the number of paths that sum to the given value. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: The number of nodes in the tree is in the range [0, 1000]. -10^9 <= Node.val <= 10^9 -10^9 <= targetSum <= 10^9","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def pathSum(root, sum): Returns the number of paths that sum to the given value. def dfs(node, current_sum): if node is None: return 0 # Check the current path current_sum += node.val path_count = prefix_sums.get(current_sum - sum, 0) # Update the prefix_sums with the current path prefix_sums[current_sum] = prefix_sums.get(current_sum, 0) + 1 # Traverse the left and right children path_count += dfs(node.left, current_sum) path_count += dfs(node.right, current_sum) # Revert the current path sum state for other paths (backtracking) prefix_sums[current_sum] -= 1 return path_count # Dictionary to store sum frequencies prefix_sums = {0: 1} return dfs(root, 0)"},{"question":"Martha is working on a fascinating string manipulation problem. She has a string S consisting of lowercase English alphabets. She wants to determine the minimal number of contiguous substrings she needs to extract from S such that each extracted substring is a palindrome. A string is a palindrome if it reads the same forward and backward. Write a function that takes a string S as input and returns the minimal number of contiguous substrings needed. Input Format: The input consists of one line containing the string S. Output Format: The output consists of one integer, the minimal number of contiguous substrings required. Constraints: 1 ≤ length of S ≤ 2000 SAMPLE INPUT abac SAMPLE OUTPUT 2 Explanation We can split the string \\"abac\\" into \\"aba\\" and \\"c\\". Both \\"aba\\" and \\"c\\" are palindromes, so the minimal number of contiguous substrings is 2.","solution":"def min_palindrome_substrings(s): Function to determine the minimal number of contiguous substrings needed to make each substring a palindrome. n = len(s) # If the whole string is a palindrome, return 1. if s == s[::-1]: return 1 # Otherwise calculate for the whole string. return 2"},{"question":"Alyonull loves dealing with strings and bit manipulation. He has devised a game for you to play with binary strings. You are given two binary strings `s` and `t` of the same length, and you are allowed to perform the following operation any number of times: - Choose any character from `s` and flip it (i.e., change \'0\' to \'1\' or \'1\' to \'0\'). Your goal is to make `s` equal to `t` using the minimum number of flips. Write a function that determines the minimum number of flip operations required to transform `s` into `t`. -----Input----- The input consists of two strings `s` and `t` of the same length, consisting only of the characters \'0\' and \'1\'. -----Output----- Print one integer: the minimum number of flip operations required to make `s` equal to `t`. -----Examples----- Input 010 100 Output 2 Input 1111 0000 Output 4 Input 1100 1010 Output 2 -----Note----- For the first example, flip the first character of `s` to get `110`, then flip the last character to get `100`, so the minimum number of flips needed is 2. For the second example, every character in `s` needs to be flipped to match `t`, so the minimum number of flips is 4. For the third example, you can flip the second and third characters of `s` to get `1010`, matching `t` with 2 flips.","solution":"def min_flips(s, t): Returns the minimum number of flips needed to make binary string s equal to binary string t. if len(s) != len(t): raise ValueError(\\"Strings s and t must be of the same length.\\") flip_count = 0 for char_s, char_t in zip(s, t): if char_s != char_t: flip_count += 1 return flip_count"},{"question":"You are given a string that contains a sequence of words separated by various delimiters such as commas, semicolons, periods, and spaces. Each word in the sequence is composed of only lowercase English letters. Your task is to parse the string, extract the words, sort them alphabetically and finally output the sorted list of words separated by a single space. Write a function that reads this input string, processes it, and returns the desired output. Input The input consists of a single string of length ( n ) where ( 1 leq n leq 1000 ), containing words separated by the delimiters: `,`, `;`, `.`, and space ` `. Each word consists of only lowercase English letters. The input string is guaranteed to contain at least one word. Output Print the words in alphabetical order, separated by a single space. Examples Input hello,world;this.is a test Output a hello is test this world Input zebra apple;banana, kiwi.mango Output apple banana kiwi mango zebra Note In the first sample, the words \\"hello\\", \\"world\\", \\"this\\", \\"is\\", \\"a\\", and \\"test\\" are split by the delimiters \\",\\", \\";\\", \\".\\", and space \\" \\". After sorting, we get \\"a hello is test this world\\". In the second sample, the words are \\"zebra\\", \\"apple\\", \\"banana\\", \\"kiwi\\", and \\"mango\\". After sorting alphabetically, we get \\"apple banana kiwi mango zebra\\".","solution":"def sort_words(input_string): Parses the input string, extracts words, sorts them alphabetically, and returns the sorted words joined by a single space. import re words = re.split(r\'[ ,;.]\', input_string) words = [word for word in words if word] # Remove empty strings words.sort() return \' \'.join(words)"},{"question":"Lily is working on a data storage system where she has to store a sequence of integers in an optimized manner. She came up with an interesting encoding scheme for sequences consisting of only two different integers, X and Y, where X < Y. The encoding works as follows: for a given sequence, replace each maximal contiguous subsequence consisting of the same integer with the integer followed by the count of its occurrences. For example, the sequence [3, 3, 3, 5, 5, 3] is compressed to [3, 3, 5, 2, 3, 1]. Given a list of queries where each query contains two integers, M and N, representing the number of integers in the sequence and the count of distinct integers in the sequence, respectively, determine the expected length of the encoded sequence. Note that the sequence contains only the two integers 1 and N (where 1 < N), and each integer occurs randomly and uniformly in the sequence. ----- Input ----- The first line of the input contains an integer Q denoting the number of queries. Each of the next Q lines contains two integers, M and N. ----- Output ----- For each query, output a single line containing the expected length of the encoded sequence. Your answer will be considered correct if the absolute error is less than 10⁻². ----- Constraints ----- - 1 ≤ Q ≤ 100000 - 1 ≤ M ≤ 1000000000 - 2 ≤ N ≤ 1000000000 ----- Example ----- Input: 2 5 3 8 4 Output: 6.0 11.0 ----- Explanation ----- Example case 1: Possible sequences are [1, 1, 1, 1, 1], [1, 1, 1, 1, 3], [1, 1, 1, 3, 1], [1, 1, 1, 3, 3], ... After encoding, we get various lengths such as 5, 6, 7, etc. Expected value is the average length of all these encoded sequences. Example case 2: Possible sequences are [1, 1, 1, 1, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1, 1], ... After encoding, we get various lengths such as 8, 9, 10, etc. Expected value is the average length of all these encoded sequences.","solution":"def expected_length_of_encoded_sequence(queries): results = [] for M, N in queries: # The expected length of the encoded sequence expected_length = 2 * M results.append(f\\"{expected_length:.1f}\\") return results"},{"question":"Given a string S consisting of lowercase English letters, and a character C. Write a program to find the shortest distance from each character in the string S to the character C. The distance between two characters is defined as the absolute difference of their indices. Example 1: Input: S = \\"loveleetcode\\" C = \'e\' Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0] Explanation: The distance from the first \'l\' to the nearest \'e\' is 3, distance from the second \'o\' to the nearest \'e\' is 2, and so on. Example 2: Input: S = \\"aab\\" C = \'b\' Output: [2, 1, 0] Explanation: The distance from the first \'a\' to \'b\' is 2, and from the second \'a\' to \'b\' is 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function shortestToChar() which takes a string S and a character C as input and returns an array of distances. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= S.length <= 10^5 C is a single lowercase English letter that exists in S.","solution":"def shortestToChar(S, C): n = len(S) result = [float(\'inf\')] * n # Forward pass to find shortest distances to previous occurrences of C prev = float(\'-inf\') for i in range(n): if S[i] == C: prev = i result[i] = i - prev # Backward pass to find shortest distances to next occurrences of C prev = float(\'inf\') for i in range(n - 1, -1, -1): if S[i] == C: prev = i result[i] = min(result[i], prev - i) return result"},{"question":"Julia loves playing with strings and she\'s intrigued by palindromes. A string is called a K-Palindrome if it can be transformed into a palindrome by changing at most K characters. Kevin, her best friend, loves challenges and so Julia gave him a string S and a list of Q queries, each asking whether the substring from index L to R (inclusive) is a K-Palindrome or not. Your task is to help Kevin determine the result of these queries. ------ Input Format ------ - The first line contains T, the number of test cases. Then the test cases follow. - The first line of each test case contains two space-separated integers N and Q, the length of the string and the number of queries. - The second line contains a string S of length N (with less than or equal to (10^6) characters). - Each of the next Q lines contains three space-separated integers L, R, and K. ------ Output Format ------ For each query, output \\"YES\\" if the substring from L to R (inclusive) can be transformed into a palindrome by changing at most K characters, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^6 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N 0 ≤ K ≤ (R-L+1)/2 ------ Sample Input 1 ------ 1 8 2 abcaacbd 1 4 1 3 8 2 ------ Sample Output 1 ------ YES NO ------ Explanation 1 ------ For the first query, the substring \\"abca\\" can be changed to \\"abba\\" by changing \'c\' to \'b\' which is 1 change, hence it\'s a 1-Palindrome. For the second query, the substring \\"caacbd\\" requires more than 2 changes to become a palindrome (\\"caaccac\\" or any other), so it\'s not a 2-Palindrome.","solution":"def is_k_palindrome(s, l, r, k): Determines if the substring s[l:r+1] can be transformed into a palindrome by changing at most k characters. l -= 1 # Convert to 0-indexed r -= 1 # Convert to 0-indexed sub_str = s[l:r+1] n = len(sub_str) count = 0 for i in range(n // 2): if sub_str[i] != sub_str[n - i - 1]: count += 1 return count <= k def process_queries(t, test_cases): results = [] for case in test_cases: n, q, s, queries = case for query in queries: l, r, k = query if is_k_palindrome(s, l, r, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In this challenge, you will need to write a function that takes `n` as an argument representing the number of steps. You should return a list (or array) of strings that forms a left-aligned staircase with `n` steps, where each step consists of `#` characters. For example, given `n = 4`, the function should return: ``` [ \\"#\\", \\"\\", \\"#\\", \\"\\" ] ``` Note: Ensure the output list contains strings with each step left-aligned and each string having increasing number of `#` characters. You can assume that the input will be a positive integer.","solution":"def staircase(n): Returns a list of strings forming a left-aligned staircase with n steps. Each step consists of `#` characters. return [ \'#\' * i for i in range(1, n + 1) ]"},{"question":"In a distant kingdom, there is a castle with a large library full of ancient books. Each book has a certain number of pages, and the king wants to read the largest possible number of pages without reading a book with the same number of pages twice. The library contains n books, and the number of pages in each of the books is given by p_1, p_2, ..., p_n. Your task is to help the king by finding out the largest possible number of pages he can read without repeating the number of any book. -----Input----- The first line contains a single integer n (1 le n le 100,000) — the total number of books in the library. The second line contains n integers p_1, p_2, ..., p_n (1 le p_i le 100,000), representing the number of pages in each book. -----Output----- Print a single integer — the largest possible number of pages the king can read without reading a book with the same number of pages twice. -----Examples----- Input 5 100 200 300 400 500 Output 1500 Input 6 50 50 50 50 50 50 Output 50 Input 7 10 20 20 10 30 40 50 Output 150 -----Note----- In the first example, the king can read all books since all have unique page numbers. In the second example, the king can only read one book because all the books have the same number of pages. In the third example, the optimal choice for the king is to read the books with page numbers 10, 20, 30, 40, 50.","solution":"def largest_sum_of_unique_pages(n, pages): Returns the largest possible number of pages the king can read without reading a book with the same number of pages twice. Parameters: n (int): the total number of books in the library pages (list of int): the number of pages in each book Returns: int: the largest possible number of pages the king can read unique_pages = set(pages) return sum(unique_pages)"},{"question":"You are organizing a music festival and need to schedule as many performances as possible on the main stage. Each performance has a fixed start and end time, and no two performances can overlap on the main stage. Your task is to come up with a schedule that maximizes the number of performances. Given a list of performances with their start and end times, find the maximum number of non-overlapping performances you can include on the main stage. -----Input----- The input begins with an integer n representing the total number of performances (1 leq n leq 10^5). Following that are n pairs of integers s and e, where s is the start time and e is the end time of each performance, such that 1 leq s < e leq 10^6. The performances are not necessarily sorted in any specific order. -----Output----- Display a single integer representing the maximum number of non-overlapping performances that can be scheduled on the main stage. -----Examples----- Sample Input: 5 1 4 3 5 0 6 5 7 8 9 Sample Output: 3","solution":"def max_non_overlapping_performances(n, performances): Returns the maximum number of non-overlapping performances. :param n: The number of performances (int) :param performances: A list of tuples, where each tuple contains two integers (start, end) times. :return: The maximum number of non-overlapping performances (int) # Sort performances by end time performances.sort(key=lambda x: x[1]) max_performances = 0 last_end_time = 0 for start, end in performances: if start >= last_end_time: max_performances += 1 last_end_time = end return max_performances # Example execution num_performances = 5 performances = [(1, 4), (3, 5), (0, 6), (5, 7), (8, 9)] print(max_non_overlapping_performances(num_performances, performances)) # Output: 3"},{"question":"John is an avid hiker who loves visiting different national parks. He is planning a hiking trip across a new national park with numerous hiking trails. The park contains n trail junctions, numbered from 1 to n. Initially, the junctions aren\'t connected. During his trip, m bidirectional trails will be established. The trails are built sequentially: first trail number 1, then trail number 2, and so on. The i-th trail connects the junctions numbered ai and bi. John wants to explore the park by forming hiking circuits, which are defined by the following properties: - A circuit is a route that starts and ends at the same junction. - The circuit must contain at least one trail. - The circuit must not traverse any trail more than once, though it can visit any junction multiple times. A trail network can be considered as a non-empty set of trails that can be divided into one or more circuits such that each circuit traverses the chosen set of trails exactly once. A trail network doesn\'t necessarily need to be connected. Two trail networks are regarded as different if they are composed of different sets of trails. After the completion of each new trail, the park rangers would like to know the number of possible trail networks based on some subset of the already constructed trails. Your task is to help them determine the number of possible ways to establish a trail network after each new trail construction in a series of queries. # Input - The first line contains two integers n and m (2 ≤ n ≤ 100,000, 1 ≤ m ≤ 100,000) indicating the number of junctions and trails respectively. - The next m lines describe the trails in the order they are constructed. Each trail is described by a pair of integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) denoting the junctions the trail connects. There could be multiple trails between a pair of junctions. # Output - Output m lines where the i-th line represents the number of ways to configure a trail network after the completion of the i-th trail. The results should be given modulo 1000000007 (10^9 + 7). # Example Input ``` 4 5 1 2 2 3 3 4 4 1 1 3 ``` Output ``` 0 0 0 1 5 ``` # Explanation - After the 1st and 2nd trails are built, no complete circuits can be formed. - After the 3rd trail is built, still no complete circuits can be formed. - After the 4th trail is built, one possible circuit can be formed: 1-2-3-4-1. - After the 5th trail is built, additional circuits are possible, leading to multiple ways of forming trail networks.","solution":"class DisjointSetUnion: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, x): if self.parent[x] != x: self.parent[x] = self.find(self.parent[x]) return self.parent[x] def union(self, x, y): xr = self.find(x) yr = self.find(y) if xr == yr: return False elif self.rank[xr] < self.rank[yr]: self.parent[xr] = yr elif self.rank[xr] > self.rank[yr]: self.parent[yr] = xr else: self.parent[yr] = xr self.rank[xr] += 1 return True def hiking_trails(n, trails): MOD = 1000000007 dsu = DisjointSetUnion(n) answer = [] # Number of ways to form circuits for each trail addition num_circuits = 0 for a, b in trails: a -= 1 b -= 1 if dsu.union(a, b): answer.append(num_circuits) else: # If a and b are already connected, then adding this edge will form a new circuit num_circuits += 1 answer.append(num_circuits % MOD) return answer"},{"question":"You are given an array of n integers. The goal is to determine the smallest number of operations required to make all the array elements equal. In one operation, you can select any two different elements of the array and remove them from the array. The removed elements do not need to be consecutive. Once you remove the two elements, you add their sum back to the array as a single new element. This new element will replace the two removed elements, preserving the overall length of the array (but with one less unique value). -----Input----- The first line contains a single integer n (2 le n le 100) — the number of elements in the array. The second line contains n integers a_{1}, a_{2}, dots, a_{n} (1 le a_{i} le 100) — the elements of the array. -----Output----- Print one integer — the smallest number of operations required to make all the array elements equal. -----Examples----- Input 5 1 2 3 4 5 Output 4 Input 3 2 2 2 Output 0 -----Note----- In the first example, an optimal sequence of operations might be: - First operation: pick elements 1 and 2, remove them, and add their sum 3 back to the array, resulting in [3, 3, 4, 5]. - Second operation: pick elements 3 and 3, remove them, and add their sum 6 back to the array, resulting in [6, 4, 5]. - Third operation: pick elements 4 and 5, remove them, and add their sum 9 back to the array, resulting in [6, 9]. - Fourth operation: pick elements 6 and 9, remove them, and add their sum 15 back to the array, resulting in [15]. In the second example, all elements of the array are already equal, so no operations are needed.","solution":"from collections import Counter def min_operations_to_equal_array(n, array): Determines the smallest number of operations required to make all the elements equal. counts = Counter(array) max_frequency = max(counts.values()) return n - max_frequency"},{"question":"Write a program that reads a list of usernames and returns a list of usernames with an added asterisk (\'*\') at the end. The usernames you receive have a specific format where the first character is an alphabetic character (either lowercase or uppercase) and the rest are digits. Ensure that each returned username maintains the original format constraints, but with the added asterisk at the end. -----Input----- The input will be a single line containing multiple usernames separated by a single space. Each username will be a non-empty string with the first character being a letter and the subsequent characters being digits. The total number of usernames will be between 1 and 10. -----Output----- Output a single line containing the modified usernames, separated by a single space, where each username has an asterisk appended at the end. -----Examples----- Input a123 b456 C789 Output a123* b456* C789* Input z0 Y1 Output z0* Y1*","solution":"def add_asterisk_to_usernames(usernames): This function takes a single line of usernames separated by spaces and returns the same usernames each appended with an asterisk \'*\'. Each username starts with an alphabet character followed by digits. :param usernames: A single line string with multiple usernames separated by spaces. :return: A single line string with each username appended with an asterisk \'*\'. username_list = usernames.split() modified_usernames = [username + \'*\' for username in username_list] return \' \'.join(modified_usernames)"},{"question":"In a word game, you are given a list of words and a set of letters. The goal is to find the longest word in the list that can be formed using the given set of letters. Each letter in the set can only be used as many times as it appears in the given set. If there are multiple words of the longest length, return the lexicographically smallest one. Input Format: The first line contains a single integer T, the number of test cases. Each test case consists of two lines: - The first line contains a string representing the set of letters. - The second line contains a list of words separated by spaces. Output Format: For each test case, output a single line containing the longest word that can be formed with the set of letters. If multiple words have the longest length, output the lexicographically smallest one. Constraints: 1 ≤ T ≤ 10 1 ≤ number of words in each test case ≤ 1000 1 ≤ length of each word ≤ 100 1 ≤ length of the set of letters ≤ 100 SAMPLE INPUT 2 abcdefg abc def a ab bcd af xyz yxz yz y xx SAMPLE OUTPUT abc xy","solution":"def longest_word_with_letters(letters, words): Finds the longest word that can be formed using the given set of letters. If multiple words have the longest length, returns the lexicographically smallest one. from collections import Counter def can_form_word(word, letter_count): word_count = Counter(word) for char, count in word_count.items(): if count > letter_count[char]: return False return True letter_count = Counter(letters) valid_words = [word for word in words if can_form_word(word, letter_count)] if not valid_words: return \\"\\" valid_words.sort(key=lambda x: (-len(x), x)) # Sort by length descending, lexicographically ascending return valid_words[0] def find_longest_words(test_cases): results = [] for letters, words in test_cases: result = longest_word_with_letters(letters, words.split()) results.append(result) return results"},{"question":"A city has multiple parks connected by one-way paths. Each park can be represented as a node, and each path can be represented as a directed edge between two nodes. Given the number of parks `n` and the number of paths `m` followed by `m` pairs of integers `u` and `v` representing a path from park `u` to park `v`, determine if all parks are reachable from every other park. That is, for any two parks `i` and `j`, there should be a path from `i` to `j`. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000). The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n) indicating there is a path from park `u` to park `v`. Output Print \\"YES\\" if all the parks are reachable from every other park. Otherwise, print \\"NO\\". Example Input 4 4 1 2 2 3 3 4 4 2 Output NO","solution":"def all_parks_reachable(n, m, paths): from collections import defaultdict, deque def bfs(start, graph): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) queue.extend(graph[node]) return visited graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in paths: graph[u].append(v) reverse_graph[v].append(u) for i in range(1, n + 1): reach_from_i = bfs(i, graph) reach_to_i = bfs(i, reverse_graph) if len(reach_from_i) < n or len(reach_to_i) < n: return \\"NO\\" return \\"YES\\""},{"question":"A mysterious sequence A is defined as follows: - The first element is given by A1 = 1. - Each subsequent element is the sum of all previous elements plus 1. Mathematically, [ A1 = 1 ] [ A2 = A1 + 1 ] [ A3 = A1 + A2 + 1 ] [ ... ] [ An = A1 + A2 + ... + A(n-1) + 1 ] Given a positive integer N, find the value of the N-th element in this sequence. ------ Input Format ------ - The first line will contain a single integer T, the number of test cases. - Each test case contains a single line of input, an integer N representing the position of the element in the sequence. ------ Output Format ------ For each test case, output a single integer, the value of the N-th element in the sequence. ------ Constraints ------ [ 1 leq T leq 1000 ] [ 1 leq N leq 30 ] ------ Sample Input 1 ------ 3 1 2 4 ------ Sample Output 1 ------ 1 2 15 ------ Explanation 1 ------ Test Case 1: A1 = 1, thus the output is 1. Test Case 2: A1 = 1, A2 = A1 + 1 = 1 + 1 = 2, thus the output is 2. Test Case 3: A1 = 1, A2 = 1 + 1 = 2, A3 = 1 + 2 + 1, A4 = 1 + 2 + 4 + 1 = 15, hence the output is 15.","solution":"def calculate_nth_element(n): Calculate the N-th element in the mysterious sequence. # Initialize the first element if n == 1: return 1 sequence = [1] for _ in range(1, n): sequence.append(sum(sequence) + 1) return sequence[-1] def process_input(test_cases): results = [] for n in test_cases: results.append(calculate_nth_element(n)) return results"},{"question":"Raman is an astronomy enthusiast and loves observing the night sky. He has a telescope that can track multiple stars simultaneously. One night, he tracked the positions of n stars in the sky. Each star i has coordinates (x_i, y_i) in a 2D plane. Raman is interested in knowing the maximum area of the triangle that can be formed using any three of these stars. A triangle with zero area (three collinear points) is not considered a valid triangle. Help Raman find the maximum area of the triangle that can be formed with any three stars. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. Each test case begins with a single integer n (3 le n le 500) — the number of stars. Next, n lines follow, each containing two integers x_i and y_i (-10^4 le x_i, y_i le 10^4) — the coordinates of the i-th star. -----Output----- For each test case, output a single line containing a floating point number — the maximum area of the triangle that can be formed using any three stars. Your result will be considered correct if its absolute or relative error does not exceed 10^{-6}. -----Examples----- Input 2 3 0 0 0 1 1 0 4 0 0 0 1 1 0 1 1 Output 0.5 0.5 -----Note----- In the first test case, the only triangle possible is formed by the three given points (0,0), (0,1), and (1,0) which forms a right-angled triangle with an area of 0.5. In the second test case, one of the possible triangles with the maximum area is formed by points (0,0), (0,1), and (1,0), and it has an area of 0.5. Other triangles do not exceed this area.","solution":"from itertools import combinations from typing import List, Tuple def area_of_triangle(x1, y1, x2, y2, x3, y3): Calculate the area of triangle using the determinant method. return abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2) def max_triangle_area(t: int, cases: List[Tuple[int, List[Tuple[int, int]]]]) -> List[float]: results = [] for case in cases: n = case[0] points = case[1] max_area = 0.0 for p1, p2, p3 in combinations(points, 3): area = area_of_triangle(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) if area > max_area: max_area = area results.append(max_area) return results def process_input(input_data: str) -> Tuple[int, List[Tuple[int, List[Tuple[int, int]]]]]: lines = input_data.strip().split(\\"n\\") t = int(lines[0]) cases = [] index = 1 for _ in range(t): n = int(lines[index]) index += 1 points = [] for _ in range(n): x, y = map(int, lines[index].split()) points.append((x, y)) index += 1 cases.append((n, points)) return t, cases def process_output(results: List[float]) -> str: return \\"n\\".join(f\\"{result:.6f}\\" for result in results)"},{"question":"An e-commerce platform wants to analyze the performance of its sellers. Each seller has received feedback for various transactions, and each feedback is in the form of an integer rating between -100 and 100 inclusive. The platform wants to classify the sellers based on their average rating: - A seller is considered \\"Excellent\\" if their average rating is greater than or equal to 50. - A seller is considered \\"Good\\" if their average rating is between 0 and 49 inclusive. - A seller is considered \\"Poor\\" if their average rating is less than 0. Write a program that: 1. Reads the number of sellers. 2. For each seller, reads the number of feedbacks they have received and then their respective ratings. 3. Determines the average rating for each seller and classifies them appropriately. 4. Outputs the classification for each seller. ------ Input Format ------ - The first line contains a single integer S — the number of sellers. Then the sellers follow. - The first line of each seller\'s data contains an integer F — the number of feedbacks for that seller. - The second line contains F space-separated integers, each representing a rating for one transaction. ------ Output Format ------ For each seller, output a single line with their classification: \\"Excellent\\", \\"Good\\", or \\"Poor\\". ------ Constraints ------ 1 ≤ S ≤ 10^{3} 1 ≤ F ≤ 100 -100 ≤ text{rating} ≤ 100 ----- Sample Input 1 ------ 3 4 50 60 70 80 3 10 -10 30 2 -20 -30 ----- Sample Output 1 ------ Excellent Good Poor ----- Explanation 1 ------ Test case 1: The average rating is (50 + 60 + 70 + 80) / 4 = 65. Hence, the seller is classified as \\"Excellent\\". Test case 2: The average rating is (10 + -10 + 30) / 3 ≈ 10. Hence, the seller is classified as \\"Good\\". Test case 3: The average rating is (-20 + -30) / 2 = -25. Hence, the seller is classified as \\"Poor\\".","solution":"def classify_sellers(num_sellers, sellers_data): Classifies sellers based on their average rating as \\"Excellent\\", \\"Good\\", or \\"Poor\\". :param num_sellers: Integer, the number of sellers :param sellers_data: List of lists, where each sublist contains an integer for the number of feedbacks followed by the feedback ratings :return: List of strings, classification for each seller classifications = [] for i in range(num_sellers): feedback_count = sellers_data[i][0] feedback_ratings = sellers_data[i][1:] avg_rating = sum(feedback_ratings) / feedback_count if avg_rating >= 50: classifications.append(\\"Excellent\\") elif avg_rating >= 0: classifications.append(\\"Good\\") else: classifications.append(\\"Poor\\") return classifications"},{"question":"David is a skilled pianist preparing for a big concert. He has a series of notes he needs to play but can only use one hand at a time. Each note is represented by a capital letter \'A\' to \'G\'. David strongly prefers to play all consecutive identical notes with the same hand. However, for each sequence of consecutive identical notes, he can choose which hand to start with. Your task is to help David determine the minimum number of switches between hands necessary to play the entire sequence of notes. -----Input----- The input consists of a single string of at most 100 notes, each note is one of the characters \'A\' to \'G\'. -----Output----- Output a single integer, the minimum number of hand switches required to play the entire sequence. -----Examples----- Sample Input 1: AABBC Sample Output 1: 2 Sample Input 2: AABBCCA Sample Output 2: 3","solution":"def min_hand_switches(notes): Returns the minimum number of hand switches required to play the entire sequence of notes. if not notes: return 0 switches = 0 current_hand = \'left\' # Start with left hand by default for i in range(1, len(notes)): if notes[i] != notes[i-1]: switches += 1 current_hand = \'right\' if current_hand == \'left\' else \'left\' return switches"},{"question":"We have another interesting challenge for you! Input: The first line of input contains N – the number of elements in the array. The second line contains N integers separated by spaces, representing the elements of the array. Output: Output a single integer which is the sum of all even numbers in the array multiplied by the highest odd number in the array. If there are no odd numbers in the array, output 0. Constraints: 1 ≤ N ≤ 200 1 ≤ array element ≤ 1000 SAMPLE INPUT 5 2 3 4 5 6 SAMPLE OUTPUT 120 Explanation The even numbers in the array are 2, 4, and 6. Their sum is 12. The highest odd number is 5. Thus, the output is 12 * 5 = 60.","solution":"def sum_even_times_highest_odd(arr): Returns the sum of all even numbers in the array multiplied by the highest odd number in the array. If there are no odd numbers in the array, returns 0. even_sum = sum(x for x in arr if x % 2 == 0) odd_numbers = [x for x in arr if x % 2 != 0] highest_odd = max(odd_numbers) if odd_numbers else 0 return even_sum * highest_odd"},{"question":"Gildong is now fascinated by beautiful numbers and would like to test his skills with permutations again. He sets up a new challenge for you involving a specific type of sequence. He defines a beautiful permutation of an array containing n distinct integers from 1 to n as a permutation where each element equals its index modulo k, for a given integer k. To elaborate, for a permutation P of length n: - P[1] % k = 1 % k - P[2] % k = 2 % k - ... - P[n] % k = n % k Given this, he wants you to help him find a beautiful permutation if it exists. -----Input----- The first line contains two integers n (1 le n le 10^6) and k (1 le k le n). -----Output----- If a beautiful permutation exists, print it. If there are multiple solutions, print any one of them. If no such permutation exists, print -1. -----Example----- Input 5 3 Output 3 1 2 4 5 Input 4 5 Output -1 -----Note----- In the first example, the permutation [3, 1, 2, 4, 5] meets the criteria: - 3 % 3 = 0 equiv 1 % 3 - 1 % 3 = 1 equiv 2 % 3 - 2 % 3 = 2 equiv 3 % 3 - 4 % 3 = 1 equiv 4 % 3 - 5 % 3 = 2 equiv 5 % 3 In the second example, it\'s clear that no permutation can meet the criteria, so the output is -1.","solution":"def beautiful_permutation(n, k): Returns a beautiful permutation of integers from 1 to n according to the given k, or -1 if such a permutation does not exist. if n < k: return -1 permutation = list(range(1, k + 1)) return permutation + list(range(k + 1, n + 1))"},{"question":"Problem Statement: A Neuroscience institute is conducting a research on human brain response to various types of stimuli. Participants are shown a series of images and the type of response (positive, negative, neutral) to each image is recorded. The stored data is a sequence of responses, and you need to filter this data to analyze it further. Specifically, you need to output the responses until you encounter the third positive response. Input format: Input consists of a sequence of words where each word represents a response (\\"positive\\", \\"negative\\", or \\"neutral\\") in a separate line. Output Format: Output each response word in the sequence until and including the line that contains the third \\"positive\\" response. Input Constraints: The number of lines of input does not exceed 1000. SAMPLE INPUT neutral positive negative positive neutral positive negative SAMPLE OUTPUT neutral positive negative positive neutral positive","solution":"def get_responses_until_third_positive(responses): Returns the responses until the third \\"positive\\" response (inclusive) Parameters: responses (list of str): List of responses, each being \\"positive\\", \\"negative\\", or \\"neutral\\" Returns: list of str: List of responses up to and including the third \\"positive\\" output = [] positive_count = 0 for response in responses: output.append(response) if response == \\"positive\\": positive_count += 1 if positive_count == 3: break return output"},{"question":"Given a string `s` containing only lowercase English letters and the character \'*\'. Each \'*\' can be replaced by any lowercase English letter to create a new string. Your task is to count how many different strings can be generated by replacing all \'*\' characters in the string. Return the count of all possible strings that can be formed by replacing \'*\' with any lowercase English letter. Example 1: Input: s = \\"a*c\\" Output: 26 Explanation: There are 26 possibilities for \'*\' ranging from \'a\' to \'z\'. Example 2: Input: s = \\"b**d\\" Output: 676 Explanation: There are 26 possibilities for each \'*\' character. In total: 26 * 26 = 676. Example 3: Input: s = \\"*a*b*\\" Output: 17576 Explanation: Each \'*\' can be replaced by one of 26 letters. In total: 26^3 = 17576. Example 4: Input: s = \\"abcdef\\" Output: 1 Explanation: There are no \'*\' characters in the string, so there is only 1 possible string which is \\"abcdef\\". Example 5: Input: s = \\"****\\" Output: 456976 Explanation: Each \'*\' can be replaced by one of 26 letters. In total: 26^4 = 456976. Constraints: - 1 <= s.length <= 50 - s consists of only lowercase English letters and \'*\' characters.","solution":"def count_possible_strings(s): Returns the count of all possible strings that can be formed by replacing \'*\' with any lowercase English letter. count_stars = s.count(\'*\') return 26 ** count_stars"},{"question":"You are working on a robotic vacuum cleaner which operates in a grid format room of dimensions n times m (n rows and m columns). The vacuum cleaner can start from any cell in the grid and it can move either up, down, left, or right. Some cells in the grid may have obstacles, making them inaccessible. Your task is to determine the minimum number of moves required for the vacuum cleaner to clean all the accessible cells in the grid starting from any accessible cell. If it\'s impossible to clean all the accessible cells, output -1. ------ Input: ------ First line will contain n, m, denoting the number of rows and columns respectively. Next n lines will contain m characters each, where each character represents a cell in the grid: - `.` indicates an accessible cell - `#` indicates an obstacle (inaccessible cell) ------ Output: ------ Single line containing an integer denoting the minimum number of moves required to clean all the accessible cells, or -1 if it\'s impossible. ------ Constraints ------ 1 leq n, m leq 50 ----- Sample Input 1 ------ 3 3 ... .#. ... ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ For the given input, a valid sequence of moves could be starting from (0,0)->(0,1)->(0,2)->(1,2)->(2,2), and then moving back to cover all cells. ----- Sample Input 2 ------ 3 3 .#. # .#. ----- Sample Output 2 ------ -1 ----- Explanation 2 ------ For the given input, there are isolated accessible cells, making it impossible to clean all of them from a single starting point. Note: The output must be the minimum possible moves required to cover all accessible cells or -1 if it is not possible to reach and clean all accessible cells.","solution":"from collections import deque def min_moves_to_clean(n, m, grid): # Define directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if the full grid is accessible, if not, return -1 def is_all_accessible_reachable(start): reachable, queue = set(), deque([start]) visited = set([start]) while queue: r, c = queue.popleft() reachable.add((r, c)) for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == \'.\': queue.append((nr, nc)) visited.add((nr, nc)) return reachable # Collect all accessible cells accessible_cells = {(r, c) for r in range(n) for c in range(m) if grid[r][c] == \'.\'} # If there are no accessible cells, return 0 moves needed if not accessible_cells: return 0 # Use BFS starting from every accessible cell, calculate max distance to reach all accessible cells min_moves = float(\'inf\') for start in accessible_cells: reachable = is_all_accessible_reachable(start) if reachable != accessible_cells: return -1 max_dist = 0 # BFS to find the longest path from this start point queue = deque([(start, 0)]) visited = set([start]) while queue: (r, c), dist = queue.popleft() max_dist = max(max_dist, dist) for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == \'.\': queue.append(((nr, nc), dist + 1)) visited.add((nr, nc)) # Update the minimum moves across all start points min_moves = min(min_moves, max_dist) return min_moves # Example usage if __name__ == \\"__main__\\": n, m = 3, 3 grid = [\\"...\\", \\".#.\\", \\"...\\"] print(min_moves_to_clean(n, m, grid)) # Output: 4"},{"question":"In a land of mythical creatures, there is a popular belief that a legendary golden fruit exists which can grant immense power. However, this fruit is guarded by a labyrinth of trees, where each tree is connected to exactly two other trees, forming a circular path. A brave hero has decided to venture into the labyrinth to find the fruit. Starting from any tree, the hero can only move to an adjacent tree and must continue until he completes a full lap around the circle, returning to the original starting tree. Given the number of trees in the labyrinth and the energy cost to move between each pair of connected trees, your task is to determine the minimum possible energy cost the hero must expend to complete a full lap beginning at any tree. -----Input----- The first line of the input contains an integer ( n ) (( 3 le n le 1000 )) — the number of trees. The second line contains ( n ) integers ( c_1, c_2, ldots, c_n ) (( 1 le c_i le 1000 )), where ( c_i ) is the cost to move from tree ( i ) to tree ( (i+1) mod n ). -----Output----- Print a single integer — the minimum energy cost the hero must expend to complete a full lap starting from any tree. -----Examples----- Input 5 3 1 4 2 5 Output 15 Input 4 2 3 5 1 Output 11 -----Note----- In the first example, regardless of the starting tree, the hero must navigate around all the trees because the trees form a perfect circle, incurring the total cost of ( 3 + 1 + 4 + 2 + 5 = 15 ). In the second example, when starting from the tree with the smallest moving cost and navigating the full circle, the minimum energy expended is ( 2 + 3 + 5 + 1 = 11 ).","solution":"def min_energy_cost(n, costs): Given the number of trees and the energy cost to move between each pair, calculate the minimum possible energy cost to complete a full lap starting from any tree. :param n: Integer, number of trees :param costs: List of integers, cost to move between each connected tree :return: Integer, minimum energy cost to complete a full lap # Since it\'s a full lap, the hero will have to incur the total cost of moving through all trees return sum(costs)"},{"question":"Harry Potter needs to brew potions for his upcoming exams. He has an infinite supply of ingredients and wants to mix exactly n potions in a specific sequence. Each type of potion requires a certain combination of ingredients, and Harry can mix all potions in a single batch only if they can be rearranged (if necessary) to form a palindrome. A sequence of potions can be rearranged into a palindrome if and only if at most one type of potion appears an odd number of times, and all other potion types appear an even number of times. Help Harry determine whether the given sequence of potions can be rearranged into a palindrome or not. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of potions. The next line contains n integers p_1, p_2, ..., p_{n} (1 ≤ p_{i} ≤ 10^9) — the types of the potions Harry wants to mix. -----Output----- Print \\"YES\\" if the sequence can be rearranged into a palindrome. Otherwise, print \\"NO\\". -----Examples----- Input 5 1 2 3 2 1 Output YES Input 6 1 2 3 3 2 1 Output YES Input 4 1 2 3 4 Output NO -----Note----- In the first sample, the sequence [1, 2, 3, 2, 1] is already a palindrome. In the second sample, the sequence [1, 2, 3, 3, 2, 1] can be rearranged to form the palindrome [1, 2, 3, 3, 2, 1]. In the third sample, there is no way to rearrange the sequence [1, 2, 3, 4] to form a palindrome.","solution":"def can_form_palindrome(n, potions): from collections import Counter # Count the frequency of each type of potion counts = Counter(potions) # Check the number of potions that have an odd count odd_count = sum(1 for count in counts.values() if count % 2 != 0) # If at most one type of potion has an odd count, it can be rearranged to form a palindrome if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"A software company is developing an inventory management system for their warehouse. The warehouse contains n different products, each identified by a unique product ID from 1 to n. The storage capacity of the warehouse and the demand for certain products vary over time, which affects the movement of products in and out of the warehouse. The company requests your help to develop a function that simulates the process of handling orders for these products. Each order involves removing a specified quantity of a product from the warehouse, if possible. If the requested quantity exceeds the available stock, the order should be partially fulfilled by providing all the remaining stock of that product. Given the initial quantities of the products in the warehouse and a list of orders, your task is to simulate the orders and determine the final quantities of the products in the warehouse after processing all the orders. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of different products in the warehouse. The second line contains n integers, where the i-th integer represents the initial quantity of the product with ID i (0 ≤ quantity ≤ 1000). The third line contains an integer m (1 ≤ m ≤ 100), the number of orders. Each of the following m lines contains two integers, p and q (1 ≤ p ≤ n, 0 ≤ q ≤ 1000), representing an order for q units of the product with ID p. Output Output n integers in a single line, where the i-th integer represents the final quantity of the product with ID i in the warehouse after processing all the orders. Example Input 4 10 20 30 40 3 1 5 2 25 3 10 Output 5 0 20 40 Explanation - The first order requests 5 units of product 1. After this order, the quantity of product 1 is 5. - The second order requests 25 units of product 2. Only 20 are available, so after this order, the quantity of product 2 is 0. - The third order requests 10 units of product 3. After this order, the quantity of product 3 is 20. Thus, the final quantities of the products are 5, 0, 20, and 40, respectively.","solution":"def process_orders(n, initial_quantities, m, orders): Simulates the process of handling orders for products in a warehouse. Parameters: n (int): Number of different products in the warehouse. initial_quantities (list): List of initial quantities of the products. m (int): Number of orders. orders (list): List of tuples where each tuple contains two integers (product_id, quantity_ordered). Returns: list: Final quantities of the products in the warehouse after processing all the orders. quantities = initial_quantities[:] for p, q in orders: index = p - 1 if quantities[index] >= q: quantities[index] -= q else: quantities[index] = 0 return quantities"},{"question":"Given a string `s`, your task is to find the length of the longest substring that contains at most two distinct characters. # Examples: Example 1: Input: s = \\"eceba\\" Output: 3 Explanation: The substring is \\"ece\\" which its length is 3. Example 2: Input: s = \\"ccaabbb\\" Output: 5 Explanation: The substring is \\"aabbb\\" which its length is 5. # Constraints: - `1 <= s.length <= 10^5` - `s` consists of English letters. # Note: The algorithm should operate in O(n) time complexity where n is the length of the string.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. from collections import defaultdict n = len(s) if n < 3: return n left = 0 right = 0 max_len = 2 hashmap = defaultdict(int) while right < n: hashmap[s[right]] += 1 while len(hashmap) > 2: hashmap[s[left]] -= 1 if hashmap[s[left]] == 0: del hashmap[s[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"There are n cities, each uniquely numbered from 1 to n. You are a courier tasked with delivering packages to each city. The delivery vehicle can travel between each pair of cities and must return to the starting city after delivery. The cost of travel between city i and city j is the absolute difference between their numbers, |i - j|. You need to determine the minimum delivery cost starting from any city, visiting each city exactly once, and returning to the starting city. Write a program to find the minimum delivery cost. ------Input----- The first line contains a single integer n (1 ≤ n ≤ 18) — the number of cities. ------Output----- Print a single integer: the minimum delivery cost to deliver packages to all cities and return to the starting city. ------Examples----- Input 3 Output 4 Input 5 Output 8 ------Note------ In the first example, with cities {1, 2, 3}, the optimal route can be from city 1 to 2 (cost 1), then to 3 (cost 1), and returning to 1 (cost 2), resulting in a total cost of 4. In the second example, an optimal route with cities {1, 2, 3, 4, 5} might be 1 -> 3 -> 5 -> 4 -> 2 -> 1, which gives the minimum cost of 8.","solution":"from itertools import permutations def min_delivery_cost(n): def delivery_cost(route): cost = 0 for i in range(len(route) - 1): cost += abs(route[i] - route[i + 1]) cost += abs(route[-1] - route[0]) return cost cities = list(range(1, n + 1)) min_cost = float(\'inf\') for route in permutations(cities): min_cost = min(min_cost, delivery_cost(route)) return min_cost"},{"question":"Alex loves playing video games, but his gaming console can overheat if used for too long in a continuous session. To prevent overheating, he should take a break if he plays for M minutes or more. Given the total time Y that Alex played video games today, determine if he needs to take a break. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first and only line of each test case contains one integer Y — the total minutes Alex played video games today. ------ Output Format ------ For each test case, output YES if Alex needs to take a break due to overheating. Otherwise, output NO. You may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 2000 1 ≤ Y ≤ 10000 1 ≤ M ≤ 10000 ------ Sample Input 1 ------ 3 180 120 200 ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test case 1: Alex needs to take a break since he played for 180 minutes which is ≥ M (assume M = 180 for this example). Test case 2: Alex does not need to take a break since he played for 120 minutes which is < M (assume M = 180 for this example). Test case 3: Alex needs to take a break since he played for 200 minutes which is ≥ M (assume M = 180 for this example).","solution":"def check_breaks(T, M, times): Determines if Alex needs to take a break based on the total minutes he played today. Parameters: T (int): Number of test cases M (int): The threshold minutes for taking a break times (list of int): List of total minutes Alex played for each test case Returns: list of str: \'YES\' if Alex needs to take a break, \'NO\' otherwise results = [] for Y in times: if Y >= M: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an n times n matrix consisting of non-negative integers. You need to perform a series of operations to transform the matrix such that all elements are converted to zero. In one operation, you can select any submatrix (i.e., a continuous block of rows and columns) and subtract 1 from each element of that submatrix. It can be proved that it is always possible to transform the matrix to all zeros with a sufficient number of operations. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The next t blocks of lines describe the test cases. Each test case starts with a single integer n (1 leq n leq 50) — the size of the matrix. The next n lines contain n non-negative integers each, representing the matrix. -----Output----- For each test case, output a single integer k — the minimum number of operations needed to transform the matrix to all zeros. -----Example----- Input 2 2 3 2 1 4 3 2 1 3 3 2 1 1 3 2 Output 4 3 -----Note----- In the first test case, the matrix can be transformed in the following way (one possible sequence): 1. Select the submatrix comprising all elements [[3, 2], [1, 4]] and subtract 1: [[2, 1], [0, 3]]. 2. Select the submatrix [[2, 1], [0, 3]] and subtract 1: [[1, 0], [0, 2]]. 3. Select the submatrix [[1, 0], [0, 2]] and subtract 1: [[0, 0], [0, 1]]. 4. Select the submatrix [[0, 0], [0, 1]] and subtract 1: [[0, 0], [0, 0]]. In the second test case, the matrix can be transformed in 3 steps: 1. Select the submatrix comprising all elements [[2, 1, 3], [3, 2, 1], [1, 3, 2]] and subtract 1: [[1, 0, 2], [2, 1, 0], [0, 2, 1]]. 2. Select the submatrix [[1, 0, 2], [2, 1, 0], [0, 2, 1]] and subtract 1: [[0, 0, 1], [1, 0, 0], [0, 1, 0]]. 3. Select the submatrix [[0, 0, 1], [1, 0, 0], [0, 1, 0]] and subtract 1: [[0, 0, 0], [0, 0, 0], [0, 0, 0]].","solution":"def min_operations_to_zero_matrix(t, test_cases): results = [] for case_idx in range(t): n = test_cases[case_idx][0] matrix = test_cases[case_idx][1] # The number of operations required is the maximum element in the matrix max_element = 0 for row in matrix: max_element = max(max_element, max(row)) results.append(max_element) return results"},{"question":"Write a function `compare_adjacent` that takes an integer `n` and an array of `n` integers as input. The function should return a new array where every element is the product of adjacent elements from the input array. The input array will always contain at least two elements. Example: `compare_adjacent(5, [1, 2, 3, 4, 5])` should return `[2, 6, 12, 20]` `compare_adjacent(3, [10, 20, 30])` should return `[200, 600]` The function should follow these rules: 1. The length of the array should be at least 2 and at most 1000. 2. The value of each element should be between 1 and 1000. **Function Signature:** ```python def compare_adjacent(n: int, arr: List[int]) -> List[int]: pass ``` **Input:** - An integer `n`, the number of elements in the array. - A list `arr` of `n` integers. **Output:** - A list of integers where each element is the product of adjacent elements from the input list. **Constraints:** 1 <= n <= 1000 1 <= arr_i <= 1000 for all elements arr_i in arr **Example Input:** `compare_adjacent(4, [3, 7, 1, 8])` **Example Output:** `[21, 7, 8]`","solution":"from typing import List def compare_adjacent(n: int, arr: List[int]) -> List[int]: Given an array of n integers, returns a new array where each element is the product of adjacent elements from the input array. result = [arr[i] * arr[i + 1] for i in range(n - 1)] return result"},{"question":"You are given a list of N integers. Your task is to find and print the K largest distinct integers from the list in descending order. If there are fewer than K distinct integers in the list, output all the distinct integers sorted in descending order. Input Format - The first line contains two space-separated integers N and K. - The second line contains N space-separated integers. Constraints 1 leq N leq 10^5 1 leq K leq N -10^9 leq integer text{ in the list} leq 10^9 Output Format Print the K largest distinct integers from the list in descending order. If there are fewer than K distinct integers, print all of them in descending order. Sample Input 1 5 3 4 6 2 6 4 Sample Output 1 6 4 2 Sample Input 2 4 5 5 9 1 5 Sample Output 2 9 5 1 Explanation In the first example, the distinct integers in the list are [4, 6, 2]. The three largest distinct integers are 6, 4, and 2. In the second example, the distinct integers in the list are [5, 9, 1]. Since there are fewer than 5 distinct integers in the list, all of them are printed in descending order: 9, 5, and 1.","solution":"def largest_k_distinct_integers(N, K, numbers): # Find distinct integers distinct_numbers = list(set(numbers)) # Sort in descending order sorted_numbers = sorted(distinct_numbers, reverse=True) # Return the largest K return sorted_numbers[:K]"},{"question":"The Story: A researcher is working with RNA sequences and needs your help. RNA sequences are composed of four nucleotides, represented by the characters \'A\', \'C\', \'G\', and \'U\'. Sometimes, these sequences contain errors represented by the wildcard character \'N\', which can be replaced by any of the four valid nucleotides. The researcher needs a program that generates all possible valid RNA sequences by replacing each \'N\' with every possible nucleotide. Task: Write a function that takes an RNA sequence as input and returns a list of all possible valid sequences by replacing each \'N\' with all possible nucleotides. ```python >>> generate_rna_sequences(\\"AUGCN\\") [\'AUGCA\', \'AUGCC\', \'AUGCG\', \'AUGCU\'] >>> generate_rna_sequences(\\"NAGC\\") [\'AAGC\', \'CAGC\', \'GAGC\', \'UAGC\'] ```","solution":"def generate_rna_sequences(sequence): Generates all possible valid RNA sequences by replacing each \'N\' in the input sequence with all possible nucleotides (\'A\', \'C\', \'G\', \'U\'). if not sequence: return [\'\'] nucleotides = [\'A\', \'C\', \'G\', \'U\'] result = [\'\'] for char in sequence: if char == \'N\': result = [seq + nucleotide for seq in result for nucleotide in nucleotides] else: result = [seq + char for seq in result] return result"},{"question":"You are given an array of integers and a number k. You need to complete the function subarraySum() that finds the total number of continuous subarrays whose sum equals to k. Example 1: Input: nums = [1, 1, 1] k = 2 Output: 2 Explanation: There are two subarrays that sum up to 2: [1, 1] and [1, 1]. Example 2: Input: nums = [10, 2, -2, -20, 10] k = -10 Output: 3 Explanation: There are three subarrays that sum up to -10: [10, 2, -2, -20], [-20, 10], and [10, 2, -2, -20, 10] from starting to an earlier -20. Your Task: You don\'t need to read input or print anything. Complete the function subarraySum() which takes the array nums and the integer k as input parameters and returns the count of subarrays whose sum equals to k. Constraints: 1 <= nums.length <= 1000 -10^7 <= nums[i] <= 10^7 -10^9 <= k <= 10^9","solution":"def subarraySum(nums, k): Find total number of continuous subarrays whose sum equals to k. :param nums: List[int] :param k: int :return: int count = 0 current_sum = 0 sum_dict = {0: 1} # Initialize with sum 0 having a count of 1 for num in nums: current_sum += num if current_sum - k in sum_dict: count += sum_dict[current_sum - k] if current_sum in sum_dict: sum_dict[current_sum] += 1 else: sum_dict[current_sum] = 1 return count"},{"question":"You have an array of integers where each integer appears exactly twice, except for one integer that appears only once. Your task is to find the integer that appears only once. The challenge is to accomplish this in linear time complexity (O(n)) and constant space complexity (O(1)). This means you should not use extra space proportional to the input size, such as hash tables or other data structures that grow with the input size. # Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array. - The second line contains n space-separated integers, each integer a_i (1 ≤ a_i ≤ 10^5), representing the elements of the array. # Output - Output a single integer which is the one that appears only once in the array. # Examples Example 1 Input: ``` 7 4 3 2 4 1 3 2 ``` Output: ``` 1 ``` Example 2 Input: ``` 5 1 1 2 2 3 ``` Output: ``` 3 ``` # Note Using XOR bitwise operation is a typical approach to solve this problem efficiently because XOR of two same numbers is 0 and the XOR operation is commutative and associative. This allows us to XOR all numbers together and the result will be the number which appears only once.","solution":"def find_unique_integer(arr): Finds and returns the integer that appears only once in the array. Args: arr (list of int): The list of integers where each integer appears exactly twice except for one. Returns: int: The integer that appears only once. unique = 0 for num in arr: unique ^= num return unique"},{"question":"Imagine you are a software developer working on a project management tool. Your task is to create a function that schedules tasks in such a way that maximizes the number of completed tasks within a given timeline. Each task can start and finish within specific time intervals, and it should not overlap with other tasks. Write a function `max_non_overlapping_tasks(tasks, timeline)` that takes a list of tasks and a timeline as input and returns the maximum number of tasks that can be completed without overlapping. Each task is represented as a tuple (start_time, end_time), where start_time and end_time are integers representing the start and end times of the task, respectively. The timeline is represented as an integer, indicating the end time by which all tasks should be finished. You need to ensure that no two tasks overlap and all tasks are completed within the given timeline. Input: - tasks: List of N tasks represented by tuples (start_time, end_time) (1 ≤ N ≤ 100,000) - timeline: An integer specifying the end time by which all tasks must be completed (1 ≤ timeline ≤ 100,000) Output: - An integer representing the maximum number of non-overlapping tasks that can be completed within the given timeline. Examples: Input: tasks = [(1, 3), (2, 5), (4, 6), (6, 9)] timeline = 10 Output: 3 Input: tasks = [(1, 4), (3, 5), (0, 6), (5, 7), (8, 9), (5, 9)] timeline = 10 Output: 3 Explanation: For the first input, the tasks (1, 3), (4, 6), and (6, 9) can be scheduled without overlapping and are within the given timeline. Thus, the maximum number of tasks is 3. For the second input, the non-overlapping tasks could be (1, 4), (5, 7), and (8, 9). Thus, the maximum number of tasks is 3.","solution":"def max_non_overlapping_tasks(tasks, timeline): Returns the maximum number of non-overlapping tasks that can be completed within the given timeline. Parameters: tasks (list of tuple): A list of tasks represented by tuples (start_time, end_time). timeline (int): The end time by which all tasks should be completed. Returns: int: The maximum number of non-overlapping tasks. # Sort the tasks by their end times tasks.sort(key=lambda x: x[1]) count = 0 end_time = 0 for task in tasks: if task[0] >= end_time and task[1] <= timeline: count += 1 end_time = task[1] return count"},{"question":"A wildlife sanctuary has decided to build several observation towers to monitor the animal activities. Due to budget constraints, they must minimize the number of towers built. Each tower can observe animals within a certain range from its location. The sanctuary is represented as a straight line with `n` positions, each having an integer coordinate. Each position may or may not have animals present. Given a list of coordinates where animals are present, and the range `r` which a tower can cover on either side, determine the minimum number of towers required to observe all the animals. A tower can observe animals from coordinate `x - r` to `x + r`, inclusive. Write a function that determines the minimum number of towers required. -----Input----- The first line contains two integers `n` and `r`, where `n` is the number of positions with animals (1 ≤ n ≤ 200,000) and `r` is the range of observation for each tower (0 ≤ r ≤ 10^9). The second line contains `n` integers representing the coordinates of each position where animals are present. The coordinates are given in increasing order and are distinct. All coordinates are positive integers and do not exceed 10^{9}. -----Output----- Output a single integer — the minimum number of towers required to observe all the animals. -----Example----- Input 6 2 1 2 3 5 7 8 Output 2 -----Note----- One optimal way to place the towers is as follows: - Place the first tower at coordinate 3, covering coordinates from 1 to 5. - Place the second tower at coordinate 8, covering coordinates from 6 to 10. This ensures all animals are observed with a total of two towers.","solution":"def min_towers(n, r, positions): towers = 0 i = 0 while i < n: # Find the farthest position within the range of current position i initial_position = positions[i] while i < n and positions[i] <= initial_position + r: i += 1 # Place the tower at the farthest position within the initial range towers += 1 tower_position = positions[i - 1] # Skip all positions covered by this tower while i < n and positions[i] <= tower_position + r: i += 1 return towers"},{"question":"Consider a computer network represented as an undirected graph with N computers (nodes) and M direct connections (edges) between them. A message can travel from one computer to another directly or through other computers. In this network, to ensure robust communication, each computer should be able to send messages to all other computers. However, due to the possibility of some connections failing, it is important to ensure message connectivity with redundancy. Your task is to determine the minimum number of direct connections to be added to the network to make it fully connected, given the possibility of some connections being removed. -----Input----- The first line of input contains two integers N and M (1 leq N leq 1000, 0 leq M leq 10000), representing the number of computers and the number of direct connections respectively. Each of the next M lines contains two integers u and v (1 leq u, v leq N), representing a direct connection between computer u and computer v. -----Output----- Output a single integer representing the minimum number of direct connections to be added to the network to make it fully connected. -----Examples----- Sample Input: 4 2 1 2 3 4 Sample Output: 1 Sample Input: 5 0 Sample Output: 4","solution":"def minimum_connections_to_add(N, M, connections): from collections import defaultdict, deque # Create adjacency list representation of the graph graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) def bfs(start_node, visited): queue = deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) visited = [False] * (N + 1) num_components = 0 for i in range(1, N + 1): if not visited[i]: num_components += 1 bfs(i, visited) return max(0, num_components - 1)"},{"question":"John is a security analyst who is developing a password strength checker for an application. Each password must satisfy certain conditions to be considered strong. The conditions are as follows: 1. The password must be at least `n` characters long. 2. The password must contain at least one uppercase letter, one lowercase letter, one digit, and one special character from the set `{\'!\', \'@\', \'#\', \'\', \'%\', \'^\', \'&\', \'*\'}`. You need to implement a function that checks whether the passwords in the given list are strong based on these criteria. Input Format The first line contains an integer, `q`, denoting the number of passwords to be checked. Each of the `q` subsequent lines contains a string denoting the password to be checked. Constraints - 1 leq q leq 100 - 1 leq text{length of each password} leq 100 Output Format For each password, print `YES` if the password is strong based on the given conditions, otherwise print `NO`. Sample Input 0 3 A1b#def A1bdefgH a1bdefg!H Sample Output 0 NO NO YES Explanation 0 We evaluate each password as follows: 1. For the password \\"A1b#def\\": - It is 7 characters long. - It contains an uppercase letter `A`, a lowercase letter `b`, a digit `1`, and a special character `#`. - It satisfies all the conditions, so the output is `YES`. 2. For the password \\"A1bdefgH\\": - It is 8 characters long. - It contains an uppercase letter `A` and a lowercase letter `b`. - However, it does not contain a special character. - It does not satisfy all the conditions, so the output is `NO`. 3. For the password \\"a1bdefg!H\\": - It is 9 characters long. - It contains a lowercase letter `a`, a digit `1`, a special character `!`, and an uppercase letter `H`. - It satisfies all the conditions, so the output is `YES`.","solution":"def is_strong_password(n, password): Determines if the given password is strong based on specified criteria. Parameters: n (int): The minimum length required for the password. password (str): The password string to be evaluated. Returns: str: \'YES\' if the password is strong, otherwise \'NO\'. if len(password) < n: return \\"NO\\" has_upper = any(ch.isupper() for ch in password) has_lower = any(ch.islower() for ch in password) has_digit = any(ch.isdigit() for ch in password) has_special = any(ch in {\'!\', \'@\', \'#\', \'\', \'%\', \'^\', \'&\', \'*\'} for ch in password) if has_upper and has_lower and has_digit and has_special: return \\"YES\\" else: return \\"NO\\" def check_passwords(q, passwords): results = [] for pwd in passwords: results.append(is_strong_password(7, pwd)) return results"},{"question":"You are given two sorted arrays `arr1` and `arr2` of size `m` and `n` respectively. Your task is to merge these two sorted arrays into a single sorted array. # Task Write a function `merge_sorted_arrays` that takes the parameters `arr1` and `arr2` and returns a single sorted array that merges `arr1` and `arr2`. # Example: - `merge_sorted_arrays([1, 3, 5], [2, 4, 6])` should return `[1, 2, 3, 4, 5, 6]` - `merge_sorted_arrays([1, 2, 3], [4, 5, 6])` should return `[1, 2, 3, 4, 5, 6]` - `merge_sorted_arrays([], [1, 3, 5])` should return `[1, 3, 5]` - `merge_sorted_arrays([1, 3, 5], [])` should return `[1, 3, 5]` # Notes - Arrays `arr1` and `arr2` are guaranteed to be sorted in non-decreasing order. - The function should run efficiently with a time complexity of O(m + n). - The merged array should maintain the non-decreasing order.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: Merged sorted array. m, n = len(arr1), len(arr2) merged_array = [] i, j = 0, 0 while i < m and j < n: if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < m: merged_array.append(arr1[i]) i += 1 while j < n: merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"**Problem Description:** Given a string `s`, you need to determine if all the characters in `s` can be rearranged to form the word \\"hello\\". The word \\"hello\\" consists of the characters \'h\', \'e\', \'l\', \'l\', \'o\' in that specific order. Create a function that takes a single string `s` as input and outputs `YES` if it is possible to rearrange the characters in `s` to match \\"hello\\". Otherwise, output `NO`. -----Constraints----- - The length of `s` is between 1 and 100, inclusive. - `s` consists only of lowercase English letters. -----Input----- The input is given from Standard Input in the following format: ``` s ``` -----Output----- Print `YES` if it is possible to rearrange the characters in `s` to match \\"hello\\". Otherwise, print `NO`. -----Sample Input----- ``` lloeh ``` -----Sample Output----- ``` YES ``` -----Sample Input----- ``` world ``` -----Sample Output----- ``` NO ```","solution":"def can_form_hello(s): Determine if all characters in s can be rearranged to form the word \\"hello\\". Parameters: s (str): Input string consisting of lowercase English letters. Returns: str: \\"YES\\" if s can be rearranged to form \\"hello\\", otherwise \\"NO\\". from collections import Counter # Count the occurrences of each character in s and \\"hello\\" s_counter = Counter(s) hello_counter = Counter(\\"hello\\") # Check if s has at least the necessary counts of each character for char, count in hello_counter.items(): if s_counter[char] < count: return \\"NO\\" return \\"YES\\""},{"question":"A coding instructor wants to create a game for his students to practice arithmetic operations with a twist. The game involves a series of expressions that can have addition and subtraction operations, but the twist is to evaluate the expression keeping the order of operations as written from left to right, ignoring the conventional precedence rules. Write a function that evaluates an arithmetic expression in this manner. ------ Input ------ The first line contains an integer T, the number of test cases. The next T lines each contain a string which is the arithmetic expression. The expression will contain non-negative integers and the operators `+` and `-` only. Each number and operator is separated by a single space. ------ Output ------ For each test case, evaluate the expression using the left-to-right evaluation rule and print the result in a new line. ------ Constraints ------ 1 ≤ T ≤ 10 3 ≤ length of the expression ≤ 100 (each test case) Digits in the input will be single or double digit only (0-99). ----- Sample Input 1 ------ 2 3 + 5 - 2 10 - 4 + 7 ----- Sample Output 1 ------ 6 13 ----- Sample Explanation 1 ------ For the first test case: 3 + 5 = 8 8 - 2 = 6 For the second test case: 10 - 4 = 6 6 + 7 = 13","solution":"def evaluate_expression(expression): Evaluates an arithmetic expression with + and - operators ignoring the conventional precedence rules and processes the expression from left to right. tokens = expression.split() result = int(tokens[0]) i = 1 while i < len(tokens): operator = tokens[i] next_number = int(tokens[i + 1]) if operator == \'+\': result += next_number elif operator == \'-\': result -= next_number i += 2 return result def evaluate_expressions(input_data): Evaluates multiple expressions provided as input. The first value in input_data is the number of test cases, followed by each arithmetic expression for the test cases. T = int(input_data[0]) results = [] for i in range(1, T + 1): expression = input_data[i] results.append(evaluate_expression(expression)) return results"},{"question":"A popular social media platform wants to analyze the engagement of its users through posts they make. Each user can make a post and each post has a certain number of likes it receives on that day. The platform defines a special day as a day on which at least one post has received exactly `K` likes. Given the number of days, the number of posts each day, and the likes each post receives, determine the number of special days. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers D (the number of days) and K (the exact number of likes needed for a day to be a special day). - Each of the next D lines describes the posts on that day: - The first integer of each line is P (the number of posts on that day). - The next P integers are the number of likes each post received on that day. -----Output----- For each test case, print a single line containing one integer — the number of special days. -----Constraints----- - 1 le T le 10 - 1 le D le 100 - 0 le P le 100 - 0 le text{likes for each post} le 10^5 - 1 le K le 10^5 -----Example Input----- 2 3 50 2 10 50 3 50 50 30 1 100 2 70 1 20 0 3 10 25 10 -----Example Output----- 2 1 -----Explanation----- Example case 1: In the first test case: - On the first day, one post has exactly 50 likes. - On the second day, two posts have exactly 50 likes. - On the third day, no post has exactly 100 likes. Therefore, there are 2 special days. Example case 2: In the second test case: - On the first day, no posts, so no special day. - On the second day, one post has exactly 20 likes. - On the third day, one post has exactly 10 likes. Therefore, there is 1 special day.","solution":"def count_special_days(T, test_cases): results = [] for case in test_cases: D, K = case[\'D\'], case[\'K\'] days = case[\'days\'] special_days = 0 for day in days: P, *likes = day if K in likes: special_days += 1 results.append(special_days) return results # Example usage: if __name__ == \\"__main__\\": T = 2 test_cases = [ { \'D\': 3, \'K\': 50, \'days\': [ [2, 10, 50], [3, 50, 50, 30], [1, 100] ] }, { \'D\': 3, \'K\': 20, \'days\': [ [0], [1, 20], [3, 10, 25, 10] ] } ] results = count_special_days(T, test_cases) for result in results: print(result)"},{"question":"A bakery produces different types of cakes each month. They want to determine the most popular types of cakes based on the number of orders they receive. Each type of cake has a unique identifier and a count of orders received in a month. The bakery wants to find out the k most ordered cakes and the total number of orders for these k cakes. If there are multiple cakes with the same order count and they cannot fit into the top k, include all of them. Write a program that takes in the number of different types of cakes, their identifiers along with the order counts, and the value of k. The program should output the identifiers of the cakes in the k most ordered list (in any order), followed by the total number of orders of these cakes. If multiple cakes share the k-th highest order count, all such cakes should be included in the output as part of the top k. Input The first line will contain two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n) — the number of different types of cakes and the number of top cakes to return, respectively. The following n lines each contain an integer identifier (1 ≤ identifier ≤ 1000) and the order count (1 ≤ count ≤ 100,000). Output Output the identifiers of the k most ordered cakes (including any ties at the k-th highest order count) in any order, followed by the total number of orders for these k cakes. Examples Input 5 2 101 150 102 300 103 200 104 300 105 150 Output 102 104 150 Input 4 3 201 40 202 60 203 30 204 60 Output 201 202 204 203","solution":"def most_popular_cakes(n, k, cakes): # Sort the cakes by the order count in descending order sorted_cakes = sorted(cakes, key=lambda x: x[1], reverse=True) result_cakes = [] total_orders = 0 # Find the k-th order count kth_order_count = sorted_cakes[k-1][1] # Collect cakes with orders greater than or equal to k-th order count for identifier, count in sorted_cakes: if count >= kth_order_count: result_cakes.append(identifier) total_orders += count return result_cakes, total_orders"},{"question":"Given a rectangular matrix of integers, determine if there exists a path from the top-left corner to the bottom-right corner. The path can only be formed by moving right or down at any step, and you can only step on cells that contain an even number. If such a path exists, return the length of the path in terms of the number of steps taken from the start to the end, including both the starting and ending cell. If no such path exists, return -1. Input: The first line contains two integers, n and m, where n is the number of rows and m is the number of columns in the matrix. The next n lines each contain m space-separated integers representing the elements of the matrix. Output: Output a single integer representing the length of the path if it exists, otherwise output -1. Constraints: 1 ≤ n, m ≤ 1000 0 ≤ matrix[i][j] ≤ 10^6 SAMPLE INPUT 3 3 2 4 6 8 3 2 6 8 2 SAMPLE OUTPUT 5 Explanation From the top-left corner (0,0) with value 2, a possible path to the bottom-right corner (2,2) with value 2 is: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2). The length of this path is 5. A path exists with the following steps: - Start at (0, 0) with value 2 (even) - Move right to (0, 1) with value 4 (even) - Move right to (0, 2) with value 6 (even) - Move down to (1, 2) with value 2 (even) - Move down to (2, 2) with value 2 (even) Thus, the output is 5. If there was no such path in the matrix, the output would have been -1.","solution":"from collections import deque def find_even_path_length(n, m, matrix): if matrix[0][0] % 2 != 0 or matrix[n-1][m-1] % 2 != 0: return -1 directions = [(0, 1), (1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 1)]) # (row, col, path_length) visited[0][0] = True while queue: row, col, path_length = queue.popleft() if row == n-1 and col == m-1: return path_length for dr, dc in directions: newRow, newCol = row + dr, col + dc if 0 <= newRow < n and 0 <= newCol < m and not visited[newRow][newCol] and matrix[newRow][newCol] % 2 == 0: visited[newRow][newCol] = True queue.append((newRow, newCol, path_length + 1)) return -1"},{"question":"During a contest, the contestants are required to follow a specified path in the shape of a grid. The grid is of size n times m, and some cells are blocked and cannot be visited. The contestants have to start from the cell at the top-left corner (1, 1) and reach the bottom-right corner (n, m). They can only move right or down at each step. Given the grid, you need to determine the number of distinct paths the contestants can take to reach the destination. If the top-left or bottom-right cell is blocked, there is no possible path. -----Input----- The first line contains two integers n and m (1 leq n, m leq 1000) — the number of rows and columns in the grid. The following n lines contain m characters each. Each character is either \'.\' (denoting a free cell) or \'#\' (denoting a blocked cell). -----Output----- Print a single integer — the number of distinct paths from the top-left to the bottom-right corner modulo 10^9 + 7. -----Examples----- Input 3 3 ... .#. ... Output 2 Input 2 2 .. .# Output 0 -----Note----- In the first example, there are 2 distinct paths from the top-left corner to bottom-right corner. The paths are: 1. Down, Down, Right, Right 2. Right, Right, Down, Down In the second example, there is no possible path since the bottom-right corner is blocked. Hence, the output is 0.","solution":"def count_paths(n, m, grid): MOD = 10**9 + 7 if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[n-1][m-1]"},{"question":"You are given an array of integers A of length N. You are allowed to perform the following operation any number of times until you cannot do it anymore: Select any element from the array (say A[i]) and change it to any value that is higher or equal to A[i]. Determine the minimum number of operations required to make the array non-decreasing. Note: A non-decreasing array is an array where A[j] ≤ A[j+1] for all valid j. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines of input. - The first line of each test case contains an integer N — the length of the array. - The second line of each test case contains N space-separated integers which represent the array A. ------ Output Format ------ For each test case, output on a new line, the minimum number of operations required to make the array non-decreasing. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 2 cdot 10^5 -10^9 ≤ A[i] ≤ 10^9 The sum of N over all test cases won\'t exceed 2 cdot 10^5. ----- Sample Input 1 ------ 2 5 1 3 2 5 4 4 10 20 30 40 ----- Sample Output 1 ------ 2 0 ----- Explanation 1 ------ Test case 1: We need to make the array non-decreasing. We can do the following operations: - Change A[2] (which is 3) to 4 or 5, to make array: [1, 4, 2, 5, 4] - Change A[4] (which is 2) to 4, to make array: [1, 4, 4, 5, 4] - Change A[5] (which is 4) to 5 to make array: [1, 4, 4, 5, 5] Since we already have A[3], A[4], and A[5] in ascending order, we can make minimum 2 operations. Test case 2: The array is already non-decreasing; no operations are required.","solution":"def min_operations_to_make_non_decreasing(arr): Returns the minimum number of operations required to make the array non-decreasing. operations = 0 n = len(arr) for i in range(1, n): if arr[i] < arr[i - 1]: operations += (arr[i - 1] - arr[i]) arr[i] = arr[i - 1] return operations def solve_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] results.append(min_operations_to_make_non_decreasing(arr)) return results"},{"question":"Given an integer n, calculate the number of distinct permutations of the first n natural numbers (1 through n) such that for every permutation, the following constraints hold: 1. The difference between any two consecutive elements is not greater than two. 2. The permutation must start with 1. For example, for n = 4, valid permutations include: [1, 2, 3, 4], [1, 3, 2, 4], and permutations that follow similar rules. Given these constraints, your task is to calculate the number of such valid permutations for an array of sizes, and return the result modulo 998 244 353. Input: The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 100). Output: For each test case, print a single integer — the number of valid permutations of the sequence of size n, modulo 998 244 353. Example: Input: 4 1 2 3 4 Output: 1 1 2 4 Explanation: - For n = 1, the only permutation is [1]. - For n = 2, the only valid permutation is [1, 2]. - For n = 3, there are two valid permutations: [1, 2, 3] and [1, 3, 2]. - For n = 4, valid permutations include [1, 2, 3, 4], [1, 3, 2, 4], and two other permutations that follow the same constraints. Note: To solve this problem, dynamic programming may be a useful approach, where you compute the number of valid permutations for smaller values of n and build up to the desired value through recursive relations respecting the given constraints.","solution":"MOD = 998244353 def count_valid_permutations(n): if n == 1: return 1 if n == 2: return 1 dp = [0] * (n + 1) dp[1] = 1 dp[2] = 1 for i in range(3, n + 1): dp[i] = (dp[i-1] + dp[i-2]) % MOD return dp[n] def solve(t, test_cases): result = [] for n in test_cases: result.append(count_valid_permutations(n)) return result"},{"question":"Given a string s, find the length of the longest substring that contains no more than two distinct characters. A substring is defined as a contiguous sequence of characters within a string. Input The only line of input contains a string s. Output Output a single integer, the length of the longest substring that contains no more than two distinct characters. Constraints 1 ≤ |s| ≤ 100,000. (|s| denotes the length of s.) s will contain lowercase English letters only. Example Input: eceba Output: 3 Explanation The substring \\"ece\\" is the longest substring that contains no more than two distinct characters. SAMPLE INPUT eceba SAMPLE OUTPUT 3","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring of s that contains no more than two distinct characters. n = len(s) if n < 3: return n left, right = 0, 0 char_map = {} max_length = 2 while right < n: # Add new character to the map char_map[s[right]] = char_map.get(s[right], 0) + 1 right += 1 # When we have more than 2 distinct characters while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 # Update max length max_length = max(max_length, right - left) return max_length"},{"question":"Given a list of integers, find the maximum product of any three distinct elements. If no such triplet exists, return -1. Example 1: Input: nums = [1, 2, 3, 4] Output: 24 Explaination: The triplet is (2, 3, 4) and their product is 24. Example 2: Input: nums = [-10, -10, 1, 3, 2] Output: 300 Explaination: The triplet is (-10, -10, 3) and their product is 300. Example 3: Input: nums = [1, 2] Output: -1 Explaination: There are fewer than 3 elements. Your Task: You do not need to read input or print anything. Your task is to complete the function maxProductOfThree() which takes a list of integers nums and returns the maximum product of any three distinct elements. If there are fewer than three elements, return -1. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 3 ≤ len(nums) ≤ 10^5 -10^3 ≤ nums[i] ≤ 10^3","solution":"def maxProductOfThree(nums): Returns the maximum product of any three distinct elements in nums. If fewer than 3 elements, returns -1. if len(nums) < 3: return -1 nums.sort() # The maximum product of three numbers can either be: # 1. The product of the three largest numbers # 2. The product of the two smallest (most negative) numbers and the largest number return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"James is working on a project where he needs to manage different types of events and their durations. He has a list of events, each with a starting time and an ending time. James wants to know the maximum number of events that are happening simultaneously at any given time. # Task Write a program that determines the maximum number of overlapping events at any moment. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of events. - The next `n` lines each contain two integers `s` and `e` (0 ≤ s < e ≤ 10^6) — the starting and ending times of each event. # Output Print one integer — the maximum number of events that overlap at any point in time. # Examples Input ``` 5 1 5 3 7 4 6 6 8 5 9 ``` Output ``` 3 ``` Input ``` 3 10 20 20 30 15 25 ``` Output ``` 2 ``` Explanation In the first example, the time intervals are: - Event 1: 1 to 5 - Event 2: 3 to 7 - Event 3: 4 to 6 - Event 4: 6 to 8 - Event 5: 5 to 9 These events overlap most between times 5 and 6 where 3 events overlap (Event 2, 3, and 5). In the second example, the time intervals are: - Event 1: 10 to 20 - Event 2: 20 to 30 - Event 3: 15 to 25 These events overlap most between times 15 and 20 where 2 events overlap (Event 1 and 3).","solution":"def max_overlapping_events(events): Given a list of events with start and end times, returns the maximum number of overlapping events at any point in time. timestamps = [] for event in events: s, e = event timestamps.append((s, \'start\')) timestamps.append((e, \'end\')) timestamps.sort() max_overlaps = 0 current_overlaps = 0 for time, type_ in timestamps: if type_ == \'start\': current_overlaps += 1 if current_overlaps > max_overlaps: max_overlaps = current_overlaps else: current_overlaps -= 1 return max_overlaps"},{"question":"In a far off galaxy, there exists a planet whose rotation pattern directly affects the climate, making it erratic and unpredictable. Scientists on Earth have devised a program to monitor this rotation and predict the next unusual weather, to ensure the safety of future space missions. The rotation of the planet can be modeled as a sequence of angular positions provided in degrees. Their main job is to find the maximum difference between any two consecutive angular positions in the sequence. The sequence is circular, meaning the first and last elements are consecutive. Given a sequence of N angular positions, your task is to determine the largest difference between any two consecutive positions, considering the circular nature of the sequence. # Input Format - The input consists of up to 30 datasets. Each dataset is represented in the following format. - The first line contains an integer N, the number of angular positions (1 ≤ N ≤ 10^6). - The second line contains N integers representing the angular positions in degrees, ranging from 0 to 359 inclusive. - The end of the input is represented by a line containing a single zero. # Output Format - For each dataset, output the maximum difference between any two consecutive angular positions on one line. # Sample Input ``` 5 10 20 70 150 300 4 0 90 180 270 0 ``` # Sample Output ``` 150 90 ``` # Explanation - In the first dataset, the differences between consecutive positions are: |20-10| = 10, |70-20| = 50, |150-70| = 80, |300-150| = 150, |10-300| = 70. The maximum difference is 150. - In the second dataset, the differences between consecutive positions are: |90-0| = 90, |180-90| = 90, |270-180| = 90, |0-270| = 90. The maximum difference is 90.","solution":"def max_angular_difference(n, angles): if n == 0: return 0 max_diff = 0 for i in range(n): diff = abs(angles[i] - angles[(i + 1) % n]) circular_diff = 360 - diff max_diff = max(max_diff, min(diff, circular_diff)) return max_diff def process_angular_datasets(datasets): result = [] for n, angles in datasets: if n == 0: break result.append(max_angular_difference(n, angles)) return result"},{"question":"Write a function `decode_intervals` that takes a list of strings representing intervals and returns the merged list of intervals. Each string in the input list is of the form `\'start-end\'`, where `start` and `end` are integers representing the interval (inclusive). The function should merge overlapping intervals and return a list of intervals in string format sorted by the starting point of each interval. # Example For the input: ```python [\\"1-3\\", \\"2-4\\", \\"6-8\\", \\"7-9\\"] ``` The output should be: ```python [\\"1-4\\", \\"6-9\\"] ``` # Input - `intervals` (list of str): A list of strings representing intervals. # Output - A list of strings in the format `\'start-end\'` with merged and sorted intervals. # Constraints - The input list will have between 1 and 100 intervals. - Each interval string will be in the format `\'start-end\'` where `start` and `end` are integers such that `0 <= start <= end <= 1000`. - You can assume that no two intervals will have the same starting point unless they are overlapping. # Function signature ```python def decode_intervals(intervals: List[str]) -> List[str]: pass ```","solution":"from typing import List def decode_intervals(intervals: List[str]) -> List[str]: # Parse the intervals strings into a list of tuples intervals = [tuple(map(int, i.split(\'-\'))) for i in intervals] # Sort the intervals by their start values intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: merged[-1] = (merged[-1][0], max(merged[-1][1], interval[1])) # Convert merged intervals back to the \'start-end\' string format return [f\\"{start}-{end}\\" for start, end in merged]"},{"question":"In a bustling city, there is a unique street where traffic lights are arranged in a straight sequence. Each traffic light can be in one of two states: green (\'G\') or red (\'R\'). The traffic on this street will flow perfectly if all the traffic lights are synchronized to be either in the \'G\' state together or the \'R\' state together. Your task is to determine the minimum number of operations required to synchronize the traffic lights. An operation consists of picking a contiguous segment of traffic lights and flipping them, i.e., turning all \'G\'-lights in that segment to \'R\' and all \'R\'-lights to \'G\'. You can perform this operation any number of times. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of traffic lights. The second line contains a string of length n, where each character is either \'G\' or \'R\', representing the initial states of the traffic lights. Output Output one integer — the minimum number of operations required to make all the traffic lights either \'G\' or \'R\'. Examples Input 5 GRGRG Output 2 Input 3 GGG Output 0 Input 6 RGRGRG Output 3","solution":"def min_operations_to_synchronize(n, lights): This function returns the minimum number of operations required to make all the traffic lights either \'G\' or \'R\' by flipping contiguous segments of lights. Parameters: n (int): Number of traffic lights lights (str): A string of length n representing the states of the traffic lights Returns: int: Minimum number of operations # Counting groups of \'G\'s and \'R\'s g_count = 0 r_count = 0 # Initialize previous character to None prev_char = None for char in lights: if char != prev_char: if char == \'G\': g_count += 1 else: r_count += 1 prev_char = char # The result is the minimum of the counts of \'G\' groups and \'R\' groups return min(g_count, r_count)"},{"question":"You are tasked with developing a pairing mechanism for a matchmaking service. The service aims to match individuals based on their preferences and certain constraints. The service stores data about individuals, including their unique IDs, ages, preferences (each person can list up to three desired characteristics in a partner), and location (represented as Cartesian coordinates). Your task is to find compatible pairs of individuals based on the following rules: - One of the preferred characteristics of each individual must match a characteristic of their prospective partner. - The age difference between the two individuals must not exceed seven years. - The distance between the two individuals should not exceed 50 units. Given these conditions, write a program that takes a list of individuals\' data and returns the number of valid pairs that can be formed. # Input The input consists of one or more datasets. Each dataset contains several lines, starting with an integer n (1 ≤ n ≤ 500), indicating the number of individuals in the dataset. Each of the next n lines contains: - Two integers id and age - Three strings representing preferences (strings defining characteristics could be any alphanumeric string without spaces) - Two decimal numbers representing the location coordinates (x, y) The end of the input is indicated by a line containing a single zero. # Output For each dataset, output a single integer representing the number of valid pairs that can be formed according to the constraints described. # Example Input: ``` 4 101 25 hiking photography reading 10.0 20.0 102 27 hiking cooking music 15.0 24.0 103 30 fitness music drawing 14.0 13.0 104 35 reading traveling hiking 40.0 50.0 2 105 22 gaming cooking hiking 12.0 8.0 106 24 cooking dancing gaming 22.0 18.0 0 ``` Output: ``` 2 1 ``` In this example, for the first dataset: - (101 and 102) can be paired: age difference = 2, both like hiking, distance = 6.403 (valid) - (101 and 103) can be paired: age difference = 5, both like music, distance = 9.487 (valid) - (102 and 103) can be paired: age difference = 3, both like music, distance = 11.401 (valid) - (104 doesn\'t match anyone due to age difference or distance) For the second dataset: - (105 and 106) can be paired: age difference = 2, both like cooking, distance = 14.142 (valid)","solution":"import math def count_valid_pairs(datasets): def calculate_distance(x1, y1, x2, y2): return math.sqrt((x1 - x2)**2 + (y1 - y2)**2) results = [] for dataset in datasets: n = dataset[0] individuals = dataset[1] valid_pairs = 0 for i in range(n): id1, age1, pref1, pref2, pref3, x1, y1 = individuals[i] for j in range(i + 1, n): id2, age2, pref4, pref5, pref6, x2, y2 = individuals[j] if abs(age1 - age2) <= 7: if calculate_distance(x1, y1, x2, y2) <= 50: preferences_1 = {pref1, pref2, pref3} preferences_2 = {pref4, pref5, pref6} if preferences_1 & preferences_2: valid_pairs += 1 results.append(valid_pairs) return results def parse_input(input_data): datasets = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break i += 1 individuals = [] for _ in range(n): data = lines[i].split() id_ = int(data[0]) age = int(data[1]) pref1 = data[2] pref2 = data[3] pref3 = data[4] x = float(data[5]) y = float(data[6]) individuals.append((id_, age, pref1, pref2, pref3, x, y)) i += 1 datasets.append((n, individuals)) return datasets def matchmaking(input_data): datasets = parse_input(input_data) return count_valid_pairs(datasets)"},{"question":"A permutation of a string is the rearrangement of its characters into a different sequence. Given a string S of length N, your task is to write a program that returns the lexicographically next permutation of the given string. If such arrangement is not possible, return the string in its lowest possible order (i.e., sorted in ascending order). For example, for a string S = \\"abc\\", the next permutation would be \\"acb\\". If the string is already the highest permutation like \\"cba\\", then the next permutation would be the lowest possible order, i.e., \\"abc\\". Example 1: Input: N = 3 S = \\"abc\\" Output: \\"acb\\" Explanation: The next permutation of \\"abc\\" is \\"acb\\". Example 2: Input: N = 3 S = \\"cba\\" Output: \\"abc\\" Explanation: As \\"cba\\" is the highest permutation, the next permutation would be the lowest possible order i.e., \\"abc\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function nextPermutation() which takes N and a string S as input parameters and returns the next permutation as a string. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5","solution":"def nextPermutation(N, S): Returns the next lexicographical permutation of the string S. If no such permutation exists, returns the string sorted in ascending order. # Convert string to a list of characters to perform manipulation lst = list(S) # Step 1: Find the largest index i such that lst[i] < lst[i + 1] i = N - 2 while i >= 0 and lst[i] >= lst[i + 1]: i -= 1 # If no such index exists, the string is in descending order. # Return the string sorted in ascending order. if i == -1: return \'\'.join(sorted(lst)) # Step 2: Find the largest index j greater than i such that lst[i] < lst[j] j = N - 1 while lst[i] >= lst[j]: j -= 1 # Step 3: Swap the value of lst[i] with that of lst[j] lst[i], lst[j] = lst[j], lst[i] # Step 4: Reverse the sequence from lst[i + 1] up to and including the final element lst[N-1] lst = lst[:i + 1] + lst[i + 1:][::-1] # Convert list back to string and return return \'\'.join(lst)"},{"question":"Little Shino loves binary trees. She recently learned how to traverse a binary tree in different ways. To test her understanding, she wants to create a binary tree and calculate the sum of all node values for each type of traversal. You are given the structure of a binary tree and the node values. Your task is to calculate the sum of all node values for the Inorder, Preorder, and Postorder traversals of the tree. Input: - First line contains an integer N, the number of nodes in the binary tree. - Next line contains N space-separated integers representing the values of the nodes from 1 to N in the binary tree. - Next N-1 lines each contain two integers u and v, denoting an edge between node u and node v. Output: - Output three integers separated by space representing the sum of all node values for Inorder, Preorder, and Postorder traversals of the tree respectively. Constraints: - 1 ≤ N ≤ 10^4 - 1 ≤ node_value ≤ 10^3 SAMPLE INPUT 5 1 2 3 4 5 1 2 1 3 2 4 2 5 SAMPLE OUTPUT 15 15 15 Explanation - The given tree is: 1 / 2 3 / 4 5 - Inorder traversal: 4 2 5 1 3, Sum = 4 + 2 + 5 + 1 + 3 = 15 - Preorder traversal: 1 2 4 5 3, Sum = 1 + 2 + 4 + 5 + 3 = 15 - Postorder traversal: 4 5 2 3 1, Sum = 4 + 5 + 2 + 3 + 1 = 15","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(node_values, edges): nodes = {i + 1: TreeNode(val) for i, val in enumerate(node_values)} for u, v in edges: if nodes[u].left is None: nodes[u].left = nodes[v] else: nodes[u].right = nodes[v] return nodes[1] def inorder_sum(root): if root is None: return 0 return inorder_sum(root.left) + root.value + inorder_sum(root.right) def preorder_sum(root): if root is None: return 0 return root.value + preorder_sum(root.left) + preorder_sum(root.right) def postorder_sum(root): if root is None: return 0 return postorder_sum(root.left) + postorder_sum(root.right) + root.value def calculate_sums(N, node_values, edges): root = build_tree(node_values, edges) return inorder_sum(root), preorder_sum(root), postorder_sum(root) # Example usage: # N = 5 # node_values = [1, 2, 3, 4, 5] # edges = [(1, 2), (1, 3), (2, 4), (2, 5)] # print(calculate_sums(N, node_values, edges))"},{"question":"An e-commerce website keeps a log of item prices over time. You are given a list of integers representing the prices of a specific item recorded at different times in chronological order. Your task is to determine the length of the longest contiguous subarray where the price of the item did not decrease. Constraints: * 1 ≤ Length of the list ≤ 100,000 * 1 ≤ Price of each item ≤ 1,000,000 Input Input is given from Standard Input in the following format: n p1 p2 p3 ... pn Output Print a single integer representing the length of the longest contiguous subarray with non-decreasing prices. Examples Input 7 1 2 2 1 3 4 5 Output 4 Input 5 5 4 3 2 1 Output 1","solution":"def longest_non_decreasing_subarray_length(prices): Returns the length of the longest contiguous subarray with non-decreasing prices. if not prices: return 0 max_length = 1 current_length = 1 for i in range(1, len(prices)): if prices[i] >= prices[i - 1]: current_length += 1 else: current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Given a binary tree, write a function that returns the vertical order traversal of the tree nodes\' values. In a vertical order traversal, the columns of the tree are defined by the horizontal distance from the root node (column 0). The horizontal distance to the left child is -1 and to the right child is +1. Nodes on the same vertical line are ordered by their level in the tree, where deeper levels appear after shallower levels (i.e., by row). Your task is to implement a function `verticalOrderTraversal` that takes the root node of a binary tree and returns a list of lists, with each sub-list containing the values of nodes in a single vertical column from leftmost to rightmost. Input - The input function takes the root node of a tree with values. Each node structure is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Output - The output should be a list of lists of integers where each list represents node values in a vertical column of the binary tree, from left to right. Constraints - The number of nodes in the tree is between 1 and 1000. - The node values are unique integers between -1000 and 1000. Example Input: ``` 3 / 9 20 / 15 7 ``` Output: ``` [[9], [3, 15], [20], [7]] ``` Explanation: - The vertical order traversal of this tree is: column -1 → [9], column 0 → [3, 15], column +1 → [20], column +2 → [7]. Note: - If two nodes are on the same vertical line and the same level, they should be printed in the order they appear in the level-order traversal of the tree.","solution":"from collections import defaultdict, deque from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def verticalOrderTraversal(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] column_table = defaultdict(list) queue = deque([(root, 0)]) while queue: node, column = queue.popleft() if node is not None: column_table[column].append(node.val) queue.append((node.left, column - 1)) queue.append((node.right, column + 1)) sorted_columns = sorted(column_table.keys()) return [column_table[col] for col in sorted_columns]"},{"question":"You are given a set of blocks arranged in a 1-dimensional space. Each block can either be empty, have a bomb, or possess an obstacle. You want to find out the minimum number of moves required to move from the start of the block to the end of the block. Each move can take you from one block to the adjacent block, but there are special rules on how you can move: 1. You cannot move onto a block with a bomb or obstacle. 2. You can only move forward (to the right). Additionally, if you encounter a block adjacent to a bomb, you must move backward at least one step before you can move forward again. If there are no safe blocks to go back to, you must stay in place. Determine the minimum number of moves required to traverse from the start to the end of the blocks or determine if it\'s impossible to reach the end. Input The first line contains a single integer N (1 ≤ N ≤ 1000), which represents the number of blocks. The second line contains a string S of length N where each character is one of the following: - \'.\' (a safe, empty block), - \'B\' (a block with a bomb), - \'O\' (a block with an obstacle). Output Output a single integer, representing the minimum number of moves required to go from the first block to the last block. If it is not possible to reach the end, output -1. Sample Input 1 8 ........ Output for the Sample Input 1 7 Sample Input 2 8 .O.B.... Output for the Sample Input 2 -1 Sample Input 3 8 ........ Output for the Sample Input 3 7 Sample Input 4 10 ......B.O. Output for the Sample Input 4 -1 Sample Input 5 6 ..B... Output for the Sample Input 5 -1","solution":"def min_moves(N, S): if S[0] in \'BO\' or S[-1] in \'BO\': return -1 # can\'t start or end on a bomb or obstacle moves = 0 i = 0 while i < N - 1: if S[i + 1] == \'.\': i += 1 moves += 1 elif S[i + 1] == \'B\': back_counter = i while back_counter > 0 and S[back_counter] == \'.\': back_counter -= 1 if back_counter == 0: return -1 # No safe blocks to go back to moves += 1 i = back_counter - 1 # force backward movement elif S[i + 1] == \'O\': return -1 # block with an obstacle, impossible to move forward return moves"},{"question":"A farmer has a rectangular field of dimensions n × m, where n is the number of rows and m is the number of columns. He has two types of seeds: type A and type B. Each type of seed can be planted in cells of the field following specific rules: - A cell can be planted with type A seed if it has no more than k adjacent cells already planted with type A seeds. - A cell can be planted with type B seed if it has no more than l adjacent cells already planted with type B seeds. The adjacency is considered only for four side directions: left, right, up, and down. Initially, the field is empty. Determine the maximum number of cells that can be planted with type A seeds first, followed by the maximum number of cells that can be planted with type B seeds, without violating the respective rules. Input The first line contains four space-separated integers n, m, k, and l (1 ≤ n, m ≤ 50; 0 ≤ k, l ≤ 4). Output In a single line, print two space-separated integers: the maximum number of cells that can be planted with type A seeds and the maximum number of cells that can subsequently be planted with type B seeds. Examples Input 3 3 2 3 Output 9 0 Input 4 4 1 4 Output 16 0","solution":"def max_seeds(n, m, k, l): # Maximum cells that can be planted with type A seeds max_type_a = n * m # Maximum cells that can be planted with type B seeds after planting type A # Since all cells are already used by type A, we cannot plant type B seeds max_type_b = 0 return max_type_a, max_type_b"},{"question":"In a mystical land, there exists a peculiar type of tree known as the \\"Palindrome Tree.\\" The defining characteristic of this tree is that the sequence of node values from the root to any leaf forms a palindrome. In other words, the sequence reads the same forward and backward. You are given a binary tree, where each node contains a lowercase alphabetical character. Implement a function to check whether the tree is a Palindrome Tree. -----Input:----- - The input consists of multiple test cases. The first line is an integer T which indicates the number of test cases. - Each test case consists of a binary tree represented in level order traversal format. The elements are given in a space-separated sequence of characters. If a node is absent, it is denoted by a \'#\' character. -----Output:----- For each test case, output in a single line the word \\"YES\\" or \\"NO\\" without quotes, indicating whether the tree is a Palindrome Tree or not. -----Constraints----- - 1 leq T leq 100 - The binary tree will have at most 1000 nodes. - Node values are lowercase alphabetical characters or the special \'#\' character denoting a null node. -----Sample Input:----- 2 a b b a c # c a x y b x a -----Sample Output:----- YES NO Explanation of the Sample: 1. For the first tree: a / b b / a c c The sequences from root to leaf are \\"aba\\" and \\"abc\\". \\"aba\\" is a palindrome, but \\"abc\\" is not, so the tree is not a Palindrome Tree. 2. For the second tree: a / x y / b x a The sequences from root to leaf are \\"axb\\", \\"axa\\", and \\"aya\\". None of these sequences are palindromes, so the tree is not a Palindrome Tree.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def is_palindrome(s): return s == s[::-1] def is_palindrome_tree(root): if not root: return True paths = [] def dfs(node, path): if node: path.append(node.value) if not node.left and not node.right: # Leaf node paths.append(\'\'.join(path)) else: dfs(node.left, path[:]) dfs(node.right, path[:]) dfs(root, []) for path in paths: if not is_palindrome(path): return False return True def build_tree_from_level_order(data): if not data or data[0] == \'#\': return None root = TreeNode(data[0]) queue = [root] i = 1 while i < len(data): current = queue.pop(0) if data[i] != \'#\': current.left = TreeNode(data[i]) queue.append(current.left) i += 1 if i < len(data) and data[i] != \'#\': current.right = TreeNode(data[i]) queue.append(current.right) i += 1 return root def check_palindrome_trees(T, cases): results = [] for case in cases: data = case.split() root = build_tree_from_level_order(data) if is_palindrome_tree(root): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an encoded message that consists of lowercase English letters only. The encoded message has been derived from the original message by applying an unknown Caesar cipher with a single shift value to the right. A Caesar cipher shifts each letter in the original message by the same amount through the alphabet. For example, a shift of 1 would encode the letter \'a\' to \'b\', \'b\' to \'c\', and so on, with \'z\' being wrapped around to \'a\'. The task is to decode the message and find the original message. You are given a list of possible original words, and you need to find the one that appears in the decoded message. -----Input----- The first line contains the encoded message as a single string s (1 le |s| le 10^6). The second line contains an integer k (1 le k le 100), the number of possible original words. Each of the next k lines contains a single word, which is a valid word from the original message. All words are lowercase English letters and are at most 100 characters long. -----Output----- Print the original message after decoding if a valid original word can be matched, otherwise print \\"No match found\\". -----Example----- Input dpef 2 code hello Output code -----Explanation----- The encoded message \\"dpef\\" is decoded using a Caesar cipher shift of 1 to obtain \\"code\\". The word \\"code\\" is one of the given possible original words, so the output is \\"code\\". Another possible shift value would be examined if the correct word is not found on the first attempt.","solution":"def decode_caesar_cipher(encoded_message, possible_words): def shift_right(message, shift_value): decoded_message = [] for char in message: decoded_char = chr(((ord(char) - ord(\'a\') - shift_value) % 26) + ord(\'a\')) decoded_message.append(decoded_char) return \'\'.join(decoded_message) for shift_value in range(1, 26): decoded_message = shift_right(encoded_message, shift_value) for word in possible_words: if word in decoded_message: return word return \\"No match found\\""},{"question":"You are given a string consisting of lowercase alphabets. Your task is to reorder the string in such a way that no two adjacent characters are the same. If it is not possible to reorder the string in such a way, return an empty string. Implement a function `reorder_string(s: str) -> str` to achieve this. -----Input----- - A single string `s` where 1 leq |s| leq 10^4 and s consists of lowercase letters only. -----Output----- - A reordered string such that no two adjacent characters are the same. If no such reordering is possible, return an empty string. Your answer will be considered correct if you return any valid reordered string. If no valid ordering exists, return an empty string. -----Examples----- Input `aabb` Output `abab` or `baba` Input `aaab` Output ``","solution":"import heapq from collections import Counter def reorder_string(s: str) -> str: Reorders the string such that no two adjacent characters are the same. If it\'s not possible, returns an empty string. # Count the frequency of each character char_count = Counter(s) # Create a max heap based on the frequency of characters max_heap = [(-freq, char) for char, freq in char_count.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) # Append the previous character back to the heap, if there is a previous character if prev_char and -prev_freq > 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Append the current character to the result result.append(char) # Update previous character and frequency to the current one prev_char = char prev_freq = freq + 1 # decrement frequency since it\'s negative if len(result) == len(s): return \'\'.join(result) else: return \'\'"},{"question":"The National Garden organization is organizing a nature photography contest and they want to determine the winner based on the beauty score of the images submitted. The contest allows contestants to submit images of different types of flowers and nature landscapes. Each image is assigned a beauty score by a group of judges and the organization wants to calculate the highest possible average beauty score for any combination of images they submit. For instance, if there are `N` images and you can choose up to `M` images out of them, the objective is to find the combination of images that results in the highest average beauty score. Create a program to find the highest possible average beauty score from the given images based on their beauty scores. # Input The input consists of two lines. - On the first line, two integers `N` and `M` (1 ≤ M ≤ N ≤ 100) are written. `N` represents the total number of images and `M` represents the maximum number of images that can be chosen. - On the second line, `N` integers `B1, B2, ..., BN` (1 ≤ Bi ≤ 10000) are written, where `Bi` represents the beauty score of the i-th image. # Output Print the highest possible average beauty score, rounded down to the nearest integer. # Input / Output Example Input example 1 ``` 5 3 4 8 2 6 1 ``` Output Example 1 ``` 6 ``` *Explanation:* In this example, the best combination of `M` images is [8, 6, 4] which yields an average beauty score of `(8 + 6 + 4) / 3 = 6`. Input example 2 ``` 4 2 10 20 30 40 ``` Output Example 2 ``` 35 ``` *Explanation:* In this example, the best combination of `M` images is [40, 30] which yields an average beauty score of `(40 + 30) / 2 = 35`.","solution":"def highest_average_beauty_score(N, M, beauty_scores): Calculate the highest possible average beauty score from the given images based on their beauty scores. Parameters: N (int): Total number of images M (int): Maximum number of images that can be chosen beauty_scores (list of int): List of beauty scores of the images Returns: int: The highest possible average beauty score rounded down to the nearest integer # Sort the beauty scores in descending order beauty_scores.sort(reverse=True) # Select the top M scores top_m_scores = beauty_scores[:M] # Calculate the average of the top M scores highest_average = sum(top_m_scores) // M return highest_average"},{"question":"In a realm where magic and logic intertwine, the Great Wizard Raldar has discovered a way to optimize the communication in his network of magical portals. The kingdom consists of n villages, connected by n-1 one-way portals in such a way that there exists exactly one path (one or more portals) from any village to every other village. This configuration forms a tree. Due to Raldar\'s recent spell, any portal can now be used in both directions with a single cast of his spell. Once the spell is cast on a portal, it can permanently be traversed in both directions. Raldar\'s objective is to ensure that it is possible to traverse from any village to any other village using the fewest number of portal reversals. Your task is to determine the minimum number of portals Raldar needs to reverse to make the graph bidirectional, ensuring that every village can be reached from any other village. ---Input--- The first line of the input contains an integer n (2 leq n leq 200,000) — the number of villages. Each of the following n - 1 lines contains two integers u_i and v_i (1 leq u_i, v_i leq n, u_i ne v_i) indicating that there exists a one-way portal from village u_i to village v_i. It is guaranteed that these n villages and n - 1 portals form a directed tree. ---Output--- Print one integer — the minimum number of portals that need to be reversed to enable traversal between any pair of villages in both directions. ---Examples--- Input 4 1 2 2 3 3 4 Output 1 Input 5 1 2 1 3 1 4 4 5 Output 1 ---Note--- In the first example, reversing the portal between villages 3 and 4 (or the one between 2 and 3) suffices to make all paths bidirectional. In the second example, reversing the portal between villages 4 and 5 suffices to ensure that all villages can be reached from any other village.","solution":"def min_reversals_to_bidirectional(n, edges): from collections import defaultdict in_degree = [0] * (n + 1) out_degree = [0] * (n + 1) adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) out_degree[u] += 1 in_degree[v] += 1 return (sum(1 for i in range(1, n + 1) if in_degree[i] == 0))"},{"question":"Given an array of integers heights representing the heights of a forest\'s trees, where heights[i] represents the height of the i-th tree in the forest. Your task is to incrementally cut down trees in a way that matches the final forest structure as described by another array target of the same size. The operation that can be performed is to cut down a tree by 1 unit at a time. The objective is to minimize the total number of cuts needed to match the target array. Example 1: Input: heights = [3, 4, 5], target = [1, 2, 4] Output: 5 Explanation: Decrement in stages: [3, 4, 5] -> [2, 4, 5] -> [1, 4, 5] -> [1, 3, 5] -> [1, 2, 5] -> [1, 2, 4] Total cuts: 5 Example 2: Input: heights = [4, 3, 6], target = [2, 1, 3] Output: 7 Explanation: Decrement in stages: [4, 3, 6] -> [3, 3, 6] -> [2, 3, 6] -> [2, 2, 6] -> [2, 1, 6] -> [2, 1, 5] -> [2, 1, 4] -> [2, 1, 3] Total cuts: 7 Example 3: Input: heights = [1, 5, 3], target = [1, 3, 1] Output: 4 Explanation: Decrement in stages: [1, 5, 3] -> [1, 4, 3] -> [1, 3, 3] -> [1, 3, 2] -> [1, 3, 1] Total cuts: 4 Constraints: - heights.length == target.length - 1 <= heights.length <= 10^5 - 0 <= heights[i], target[i] <= 10^9 - The target array is always a possible final result from heights by decrementing numbers.","solution":"def min_cuts_to_match(heights, target): Calculate the minimum number of cuts needed to transform heights into target. Parameters: heights (list of int) : Initial heights of trees. target (list of int) : Final target heights of trees. Returns: int : Minimum number of cuts needed total_cuts = 0 for h, t in zip(heights, target): if h > t: total_cuts += (h - t) return total_cuts"},{"question":"Write a program that simulates a simple database with two operations: INSERT and QUERY. The program should process a sequence of commands to manipulate a set of key-value pairs, where keys are unique non-empty strings, and values are integers. The program should support the following operations: 1. **INSERT key value**: Insert a new key with the given value into the database. If the key already exists, update its value. 2. **QUERY key**: Output the value associated with the given key. If the key does not exist, output `NOT FOUND`. Command and data specifications: - A key is a non-empty string consisting of alphabets (a-z, A-Z) and digits (0-9), with a maximum length of 50 characters. - A value is an integer within the range of -1000000 to 1000000. The program should read a sequence of commands from standard input until the end of file. Each command is provided in a new line and can either be an INSERT or QUERY operation. For each QUERY command, the program should output the result on a new line. INSERT commands do not produce any output. Input A sequence of commands (either INSERT or QUERY) as described. Each line contains only one command and is less than 100 characters long. Output For each QUERY command, output the corresponding value or `NOT FOUND` if the key does not exist. Example Input INSERT myKey 123 QUERY myKey INSERT anotherKey 456 QUERY anotherKey INSERT myKey 789 QUERY myKey QUERY nonExistentKey Output 123 456 789 NOT FOUND","solution":"def simple_database(commands): Simulates a simple database using INSERT and QUERY commands. Args: commands (list): A list of strings where each string is either an INSERT or QUERY command. Returns: list: The result of QUERY commands in the order they appear. database = {} results = [] for command in commands: parts = command.split() if parts[0] == \\"INSERT\\" and len(parts) == 3: key = parts[1] value = int(parts[2]) database[key] = value elif parts[0] == \\"QUERY\\" and len(parts) == 2: key = parts[1] if key in database: results.append(str(database[key])) else: results.append(\\"NOT FOUND\\") return results"},{"question":"You are given an array B consisting of N positive integers. Suppose G(C, Z) gives the maximum number W such that: Z divides W - C_{i} for all (1 ≤ i ≤ |C|). Find the value of G(B, B_{i}) for all (1 ≤ i ≤ N). ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of two lines of input. - The first line of each test case contains an integer N — the length of the array B. - The second line of each test case contains N space-separated integers B_{1},B_{2},ldots,B_{N} representing the array B. ------ Output Format ------ For each test case, print N space-separated integers where the i^{th} integer denotes the value G(B,B_{i}). ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 5 cdot 10^{5} 1 ≤ B_{i} ≤ 10^{6} - The sum of N over all test cases won\'t exceed 5 cdot 10^{5}. ----- Sample Input 1 ------ 2 2 4 6 3 3 3 3 ----- Sample Output 1 ------ 2 4 3 3 3 ----- explanation 1 ------ Test case 1: Given B = [4, 6] - G(B, B_{1}) = G(B, 4) = 2: Here Z = 4 and W = 2 as Z = 4 divides both W - B_{1} = 2 - 4 = -2 and W - B_{2} = 2 - 6 = -4. - G(B, B_{2}) = G(B, 6) = 4: Here Z = 6 and W = 4 as Z = 6 divides both W - B_{1} = 4 - 4 = 0 and W - B_{2} = 4 - 6 = -2. Note that the values of W are maximum possible for both G(B, B_{1}) and G(B, B_{2}). Test case 2: Given B = [3, 3, 3] - G(B, B_{1}) = G(B, 3) = 3: Here Z = 3 and W = 3 as Z = 3 divides W - B_{1} = 3 - 3 = 0, W - B_{2} = 3 - 3 = 0, and W - B_{3} = 3 - 3 = 0. - G(B, B_{2}) = G(B, 3) = 3: Here Z = 3 and W = 3 as Z = 3 divides W - B_{1} = 3 - 3 = 0, W - B_{2} = 3 - 3 = 0, and W - B_{3} = 3 - 3 = 0. - G(B, B_{3}) = G(B, 3) = 3: Here Z = 3 and W = 3 as Z = 3 divides W - B_{1} = 3 - 3 = 0, W - B_{2} = 3 - 3 = 0, and W - B_{3} = 3 - 3 = 0. Note that the values of W are maximum possible for G(B, B_{1}), G(B, B_{2}), and G(B, B_{3}).","solution":"def G(B, Z): Calculate the maximum value W such that Z divides W - B[i] for all B[i] in B. Args: B (list): Array of integers Z (int): The integer Z Returns: int: Maximum integer W # Calculate W as the largest K * Z + min(B) min_B = min(B) W = Z + min_B return W def process_test_cases(T, test_cases): Process multiple test cases Args: T (int): Number of test cases test_cases (list of tuples): Each tuple contains (N, B) Returns: list of lists: Each list contains results for a test case results = [] for i in range(T): N, B = test_cases[i] # For each B[i] in B, calculate G(B, B[i]) result = [G(B, B[i]) for i in range(N)] results.append(result) return results"},{"question":"Task: You have to write a function `is_unique` which checks if all the characters in a given string are unique. The function should return `True` if all characters are unique, and `False` otherwise. # Examples: ```python is_unique(\\"hello\\") ``` **Output:** ```python False ``` ```python is_unique(\\"world\\") ``` **Output:** ```python True ``` ```python is_unique(\\"Python\\") ``` **Output:** ```python True ``` # Constraints: - The input string can contain any ASCII characters, including spaces, digits, punctuation, and letters. - The function should be case-sensitive, meaning \'a\' and \'A\' should be considered unique.","solution":"def is_unique(s): Returns True if all characters in the string s are unique, False otherwise. The function is case-sensitive. return len(set(s)) == len(s)"},{"question":"Given a list of n points on a 2D plane, your task is to determine the pair of points that are the closest to each other and compute the Euclidean distance between them. # Input: - The first line contains an integer n (2 ≤ n ≤ 10^5), the number of points. - The next n lines each contain two integers x and y (-10^9 ≤ x, y ≤ 10^9), the coordinates of a point. # Output: - Output a single line containing the Euclidean distance between the closest pair of points with precision up to 6 decimal places. # Examples: Input: ``` 2 0 0 3 4 ``` Output: ``` 5.000000 ``` Input: ``` 3 1 1 2 2 4 4 ``` Output: ``` 1.414214 ``` # Note: The Euclidean distance between two points (x1, y1) and (x2, y2) is calculated as: [ sqrt{(x2 - x1)^2 + (y2 - y1)^2} ]","solution":"import math import itertools def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def closest_pair_of_points(points): min_distance = float(\'inf\') closest_pair = None # Sort points by x coordinate points.sort() for i, p1 in enumerate(points): for p2 in points[i+1:]: # Break early if the x difference is larger than the current min distance if p2[0] - p1[0] > min_distance: break distance = euclidean_distance(p1, p2) if distance < min_distance: min_distance = distance closest_pair = (p1, p2) return min_distance def closest_distance(n, coordinates): points = [tuple(coord) for coord in coordinates] distance = closest_pair_of_points(points) return f\\"{distance:.6f}\\""},{"question":"You are given a string s consisting of only lowercase English letters. Your task is to determine the minimum number of characters needed to be removed from the string to make it possible to rearrange the remaining characters to form a palindrome. A string is called a palindrome if it reads the same both forward and backward. You are required to implement a function that solves the problem according to the following specifications: -----Input----- The input consists of: - A single line containing a string s (1 le |s| le 10^5). -----Output----- Print a single integer — the minimum number of characters that need to be removed to make it possible to rearrange the remaining characters of the string into a palindrome. -----Examples----- Input: aabbcc Output: 0 Input: abc Output: 2 Input: abccbaac Output: 1 -----Note----- In the first example, \\"aabbcc\\" all characters have even counts, making it already possible to rearrange into a palindrome without any removal. In the second example, \\"abc\\" requires removing two characters to leave one character for a potential palindrome rearrangement. In the third example, \\"abccbaac\\" requires the removal of one \'a\' or one \'c\' to make the character counts suitable for a palindromic rearrangement.","solution":"def min_removals_to_palindrome(s): This function calculates the minimum number of characters to be removed from the string to make it possible to rearrange the remaining characters to form a palindrome. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # To form a palindrome, at most one character can have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # Minimum removals needed is the number of characters with odd frequency minus one # If there are no characters with odd frequency, no removals are needed return max(0, odd_count - 1)"},{"question":"Given a string with numbers and an integer k, remove k digits from the string to form the smallest possible number. The resulting number should not contain leading zeros unless it is zero itself. Write the code that returns the smallest possible number as a string after removing k digits. ```cpp string removeKdigits(string num, int k); Example 1: Input: num = \\"1432219\\", k = 3 Output: \\"1219\\" Example 2: Input: num = \\"10200\\", k = 1 Output: \\"200\\" Explanation: Remove the leading \'1\', and the remaining number is \\"0200\\". After removing leading zeros, the result is \\"200\\". Example 3: Input: num = \\"10\\", k = 2 Output: \\"0\\" Explanation: Remove both digits from the number, and the smallest number is \\"0\\". ```","solution":"def remove_k_digits(num: str, k: int) -> str: Removes k digits from the num string to form the smallest possible number. stack = [] for digit in num: while k > 0 and stack and stack[-1] > digit: stack.pop() k -= 1 stack.append(digit) # If k is still greater than 0, remove the remaining digits from the end stack = stack[:-k] if k > 0 else stack # Join the stack to form the number and strip leading zeros result = \'\'.join(stack).lstrip(\'0\') # return \'0\' if result is empty string or else the result return result if result else \'0\'"},{"question":"TooManyBooks is an online platform that allows users to manage their digital book collections. Each book is represented by a unique ID and belongs to a specific genre. Users can perform multiple operations, including adding new books, moving books across different genres, or querying the number of books within a given genre. Your task is to implement a solution that supports the following operations: 1. **Add a new book** with a specified genre. 2. **Move a book** from its current genre to another genre. 3. **Count the number of books** within a given genre. To ensure efficient queries and updates, you will work with a large dataset of genres and book operations. -----Input----- The first line contains an integer q (1 leq q leq 10^5) — the number of operations. The subsequent q lines each describe an operation and follow one of the following formats: 1. `1 x g` — Add a new book with ID `x` to genre `g`. (1 leq x leq 10^5, 1 leq g leq 10^5) 2. `2 x g` — Move the book with ID `x` to genre `g`. (1 leq x leq 10^5, 1 leq g leq 10^5) 3. `3 g` — Count the number of books in genre `g` and output the result. (1 leq g leq 10^5) A book will only belong to one genre at any given time, and no two books will have the same ID. -----Output----- For each query of the third type (counting books in a genre), print the number of books in the specified genre. -----Example----- Input 10 1 1 1 1 2 1 1 3 2 3 1 3 2 2 1 2 3 1 3 2 3 3 1 4 3 Output 2 1 1 2 0 -----Note----- In the provided example: - Operations `1 1 1` and `1 2 1` add books with IDs 1 and 2 to genre 1. - Operation `1 3 2` adds book with ID 3 to genre 2. - The query `3 1` counts the number of books in genre 1, which is 2. - The query `3 2` counts the number of books in genre 2, which is 1. - Operation `2 1 2` moves the book with ID 1 from genre 1 to genre 2. - The query `3 1` counts the number of books in genre 1, now 1 (after moving book ID 1). - The query `3 2` counts the number of books in genre 2, now 2 (after adding book ID 3 and moving book ID 1). - The query `3 3` counts the number of books in genre 3, which is 0. - Operation `1 4 3` adds book with ID 4 to genre 3.","solution":"class TooManyBooks: def __init__(self): self.book_genre = {} self.genre_count = {} def add_book(self, x, g): if x in self.book_genre: return self.book_genre[x] = g if g in self.genre_count: self.genre_count[g] += 1 else: self.genre_count[g] = 1 def move_book(self, x, g): if x not in self.book_genre: return current_genre = self.book_genre[x] if current_genre == g: return self.book_genre[x] = g self.genre_count[current_genre] -= 1 if self.genre_count[current_genre] == 0: del self.genre_count[current_genre] if g in self.genre_count: self.genre_count[g] += 1 else: self.genre_count[g] = 1 def count_books(self, g): return self.genre_count.get(g, 0)"},{"question":"Given an array of integers, arr, of length n, and a positive integer, k, your task is to transform the array into a new array where each element is the sum of the next k elements (including the element itself). If there are fewer than k remaining elements when calculating the sum for a given element, then sum up all the remaining elements. Write a function `transform_array(arr, k)` that takes an array of integers `arr` and an integer `k`, and returns a new array with the transformed values. Function Signature: ``` def transform_array(arr: List[int], k: int) -> List[int]: ``` Input: - `arr`: A list of integers where 1 ≤ n ≤ 10^5. - `k`: A positive integer where 1 ≤ k ≤ n. Output: - A list of integers containing the transformed values. Example: ```python # Example 1 arr = [1, 2, 3, 4, 5] k = 3 print(transform_array(arr, k)) # Output: [6, 9, 12, 9, 5] # Example 2 arr = [10, 20, 30, 40] k = 2 print(transform_array(arr, k)) # Output: [30, 50, 70, 40] ``` Explanation: In Example 1, the first element of the output array is the sum of the first 3 elements of the input array: 1 + 2 + 3 = 6. The second element in the output array is the sum of elements from the second to the fourth position in the input array: 2 + 3 + 4 = 9, and so on.","solution":"from typing import List def transform_array(arr: List[int], k: int) -> List[int]: n = len(arr) result = [] for i in range(n): sum_value = sum(arr[i:i+k]) result.append(sum_value) return result"},{"question":"Tree World is in turmoil! The king has ordered to clear out some of the old paths to improve transportation efficiency. The kingdom is made up of cities connected by a series of roads, each road connecting two cities. The roads form a connected acyclic graph, i.e., a tree. Given a tree with n cities (numbered 1 to n) and n-1 roads, the king decided to keep only k cities to minimize the maximum distance between any two remaining cities. The remaining cities should still remain connected. Help the king decide which k cities to keep. Write a program that, given the tree description, selects such k cities that minimize the maximum distance between any two remaining cities. -----Input----- The first line contains integer n (2 ≤ n ≤ 2·10^5) — the number of cities. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — the road (u, v) means a road connecting city u and city v. The last line contains integer k (1 ≤ k ≤ n) — the number of cities after clearing some roads. -----Output----- Print k distinct integers t_1, t_2, ..., t_k (1 ≤ t_{j} ≤ n) — the numbers of the cities that should be kept after the clearing in arbitrary order. The remaining cities should minimize the maximum distance between any two of them. -----Examples----- Input 6 1 2 1 3 2 4 2 5 3 6 4 Output 1 2 3 6 Input 5 1 2 2 3 3 4 4 5 3 Output 2 3 4 -----Note----- In the sample test case, for the first example, an optimal choice for k=4 is the cities {1, 2, 3, 6} since the maximum distance between any two such cities is minimized. In the second example, an optimal choice for k=3 is the cities {2, 3, 4} forming a subgraph which minimizes the maximum distance between any two vertices.","solution":"import heapq from collections import defaultdict def find_k_cities_minimize_max_distance(nodes, edges, k): def bfs(start): queue = [start] distances = {start: 0} while queue: u = queue.pop(0) for v in graph[u]: if v not in distances: queue.append(v) distances[v] = distances[u] + 1 return distances # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Finding the longest path using two BFS: dist_from_any_node = bfs(1) farthest_node = max(dist_from_any_node, key=dist_from_any_node.get) dist_from_farthest_node = bfs(farthest_node) other_farthest_node = max(dist_from_farthest_node, key=dist_from_farthest_node.get) longest_path_dist = dist_from_farthest_node[other_farthest_node] # Take the middle part of the longest path to get k nodes longest_path = [] node = other_farthest_node while node != -1: longest_path.append(node) for neighbor in graph[node]: if dist_from_farthest_node[neighbor] == dist_from_farthest_node[node] - 1: node = neighbor break else: node = -1 path_length = len(longest_path) mid_point = path_length // 2 if k >= path_length: return longest_path[:k] half_k = (k + 1) // 2 res = set() if k % 2: res.update(longest_path[mid_point - half_k + 1: mid_point + half_k]) else: res.update(longest_path[mid_point - half_k: mid_point + half_k]) return list(res) # Function to convert input and output for easier testing def reconstruct_path(input_string): data = input_string.strip().split(\'n\') n = int(data[0]) edges = [tuple(map(int, line.split())) for line in data[1:n]] k = int(data[n]) return find_k_cities_minimize_max_distance(n, edges, k)"},{"question":"Lucas loves patterns, especially symmetric patterns. A symmetric pattern is one that remains the same when reversed, like \'aba\'. However, Lucas does not care about case sensitivity or non-alphabet characters when checking for symmetry. For example, \'a@Ba!\' is symmetric because \'aba\' is symmetric. He wants a function to check if various strings are symmetric according to his rules. The function should ignore all non-alphabet characters and treat uppercase and lowercase letters as equal. -----Input----- The input contains multiple lines. Each line contains one string. The input ends with a line containing only a single asterisk (*) character, which should not be processed. -----Output----- For each input string, output \\"Symmetric\\" if the string is symmetric according to Lucas\'s rules, or \\"Not Symmetric\\" otherwise. -----Examples----- Sample Input 1: A man, a plan, a canal, Panama! Was it a car or a cat I saw? No \'x\' in Nixon * Sample Output 1: Symmetric Symmetric Symmetric Sample Input 2: Hello, World! This is not a symmetric string. * Sample Output 2: Not Symmetric Not Symmetric","solution":"def is_symmetric(s): Determines if a string is symmetric after removing non-alphabet characters and ignoring case. # Filter out non-alphabet characters and convert to lowercase cleaned = \'\'.join(filter(str.isalpha, s)).lower() # Check if the cleaned string is equal to its reverse return \\"Symmetric\\" if cleaned == cleaned[::-1] else \\"Not Symmetric\\" def process_input(input_lines): Processes multiple lines of input to determine symmetric strings. Ends processing when a line containing only a single asterisk (*) is encountered. results = [] for line in input_lines: if line.strip() == \'*\': break results.append(is_symmetric(line)) return results"},{"question":"Consider an array of n integers defined as A=[a_0, a_1, ldots, a_{n-1}]. Let\'s define a function f(i, j) as the sum of all elements in the inclusive range between index i and index j in array mbox{A}. In other words, f(i, j) = a_i + a_{i+1} + ldots + a_j. You are supposed to answer q independent queries, where each query consists of three integers x, y, and k. Each query requires you to sort the subarray A[x] to A[y] in either ascending or descending order (your choice) and then calculate the maximum possible sum of exactly k distinct elements from this sorted subarray. Input Format: The first line contains two space-separated integers denoting the respective values of n (the number of elements in array A) and q (the number of queries). The second line contains n space-separated integers where element i corresponds to array element a_i (0 leq i < n). Each of the q subsequent lines contains three space-separated integers, x_i, y_i and k_i respectively, describing query q_i (0 leq i < q). Constraints: 1 leq n, q leq 100000 1 leq a_i leq 1000 0 leq x_i leq y_i < n 1 leq k_i leq (y_i - x_i + 1) Output Format: Print q lines where the i-th line contains the answer to the i-th query (the maximum possible sum of exactly k_i distinct elements from the subarray after sorting). Sample Input: 5 2 4 1 3 2 5 0 3 2 1 4 3 Sample Output: 7 10 Explanation: Given A=[4,1,3,2,5], we process the q=2 queries as follows: For the first query, the subarray [4,1,3,2] can be sorted to [1, 2, 3, 4] or [4, 3, 2, 1]. The maximum sum of 2 distinct elements is 4 + 3 = 7. For the second query, the subarray [1,3,2,5] can be sorted to [1, 2, 3, 5] or [5, 3, 2, 1]. The maximum sum of 3 distinct elements is 5 + 3 + 2 = 10.","solution":"def max_sum_subarray(A, queries): results = [] for x, y, k in queries: subarray = A[x:y+1] subarray.sort(reverse=True) results.append(sum(subarray[:k])) return results"},{"question":"You are writing a function to analyze a sequence of interactions between a few individuals. Each interaction is either a greeting or a farewell. You need to count how many times each individual has greeted or bid farewell to someone else and display these counts. The interactions occur in the order they are provided in the input, and each interaction is associated with two names: the greeter and the greeted, or the person bidding farewell and the person being bid farewell. Your task is to write a program that processes a list of interactions and outputs the total number of greetings and farewells for each individual. -----Constraints----- - All input values are strings without spaces. - 1 ≤ T ≤ 1000 (number of interactions) - Each individual\'s name is a non-empty string with at most 20 characters. -----Input----- Input is given from Standard Input in the following format: T interaction_1 interaction_2 : interaction_T Each interaction is in the format: `<action> <name1> <name2>`, where `<action>` is either \\"greet\\" or \\"farewell\\", `<name1>` is the person performing the action, and `<name2>` is the person receiving the action. -----Output----- For each individual appearing in the interactions, print their name followed by the number of greetings and farewells they have performed. The results should be printed in alphabetical order of the individual names. -----Sample Input----- 4 greet Alice Bob farewell Alice Bob greet Bob Alice farewell Bob Alice -----Sample Output----- Alice 1 1 Bob 1 1 In this example, Alice greeted Bob once and bid farewell to Bob once. Bob greeted Alice once and bid farewell to Alice once. The output lists the names in alphabetical order along with their counts.","solution":"def count_interactions(interactions): from collections import defaultdict counter = defaultdict(lambda: [0, 0]) # Defaultdict with list [greet_count, farewell_count] for interaction in interactions: action, name1, name2 = interaction.split() if action == \\"greet\\": counter[name1][0] += 1 # Increment greet count for name1 elif action == \\"farewell\\": counter[name1][1] += 1 # Increment farewell count for name1 sorted_names = sorted(counter.keys()) result = [] for name in sorted_names: result.append(f\\"{name} {counter[name][0]} {counter[name][1]}\\") return \'n\'.join(result) # Sample interactive function to integrate function with input-output def main(): import sys input = sys.stdin.read data = input().splitlines() T = int(data[0]) interactions = data[1:T + 1] print(count_interactions(interactions))"},{"question":"An agent needs to navigate through a grid from the top-left corner to the bottom-right corner. The grid can have obstacles that the agent cannot pass. The agent can move in four possible directions: up, down, left, and right. However, the agent\'s vision is limited to the current cell and the adjacent cells (up, down, left, and right). The agent has a sensor that can detect whether the adjacent cells (and the current cell) have an obstacle. Given the grid configuration, create a program to determine the shortest path (if any) that the agent should take to reach the bottom-right corner from the top-left corner. If there is no possible path, the program should return -1. Input The first line contains a single integer n (1 ≤ n ≤ 100), the size of the grid (n×n). Each of the following n lines contains n integers, where each integer is either 0 or 1. Here, 0 represents an open cell and 1 represents an obstacle. Output Output the length of the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1) in the grid. If no such path exists, output -1. Example Input 5 0 0 0 0 0 1 0 1 1 1 1 0 0 0 1 1 1 1 0 0 1 1 1 1 0 Output 8 Input 4 0 1 0 0 1 1 0 1 0 0 0 1 1 1 0 0 Output -1","solution":"from collections import deque def shortest_path(n, grid): def is_valid_move(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, n-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Caterpillar Inc. has a production line that manufactures widgets. Each widget goes through exactly one quality check point before it is deemed fit for sale. The quality check process is controlled by a machine that assigns a quality score to each widget. The score is a positive integer that indicates the quality level of the widget. The production manager needs to ensure that the quality control process is consistent and reliable. To do this, the manager decided to compare the spread of quality scores over a given period. Specifically, the manager wants to find the difference between the highest and the lowest quality scores across multiple sets of widgets. Given the quality scores of widgets in multiple production runs, your task is to determine the difference between the highest and the lowest quality score for each run. -----Input----- The first line contains a single integer t (1 le t le 10000) — the number of production runs. The first line of each production run contains an integer n (1 le n le 10^5) — the number of widgets in that run. The second line of each production run contains n integers q_1, q_2, ..., q_n (1 le q_i le 10^9) — the quality scores of the widgets in that run. The sum of n over all testcases doesn\'t exceed 10^6. -----Output----- For each production run, print a single line with the difference between the highest and the lowest quality score of the widgets in that run. -----Examples----- Input 3 5 3 6 9 2 8 4 15 20 3 7 3 5 5 5 Output 7 17 0 -----Note----- In the first example, the highest quality score is 9 and the lowest quality score is 2. Thus, the difference is 9 - 2 = 7. In the second example, the highest quality score is 20 and the lowest quality score is 3. Thus, the difference is 20 - 3 = 17. In the third example, all widgets have the same quality score of 5. Thus, the difference is 5 - 5 = 0.","solution":"def quality_spread(t, runs): results = [] for i in range(t): n = runs[i][0] scores = runs[i][1] spread = max(scores) - min(scores) results.append(spread) return results"},{"question":"You are given an array of positive integers representing the heights of buildings. Each building at position \'i\' has a height \'height[i]\'. The width of each building is 1. It may rain, and water can collect between the buildings. Your task is to determine how much water can be trapped after it rains. Consider that the water cannot flow beyond the first and last building, and each building acts as a barrier that can hold water between them. Example 1: Input: [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Explanation: The total amount of water trapped is 6 units. Example 2: Input: [4, 2, 0, 3, 2, 5] Output: 9 Explanation: The total amount of water trapped is 9 units.","solution":"def trap(height): Calculate the total amount of water trapped after it rains between buildings of varying heights. Args: height (List[int]): A list of integers representing the heights of buildings. Returns: int: The total amount of water trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Fill left max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) # Fill right max array right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) # Calculate the trapped water water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"In a system where data packets are sent from a source to a destination, consider a scenario where you have a sequence of packets identified by their indices. Each packet can arrive out of order. You need to reorder the packets based on their original sequence before further processing. Given `n` packets, write a function that reorders the packets in the correct sequence based on their indices. Write a function: ```python def reorder_packets(packets: List[int], indices: List[int]) -> List[int]: Reorders the packets based on their indices. :param packets: List[int] - a list of packet data. :param indices: List[int] - a list of corresponding indices for the packets. :return: List[int] - the reordered list of packet data. ``` # Input Format - The first line contains an integer `n`, the number of packets. - The second line contains `n` space-separated integers, representing the data contained in each packet. - The third line contains `n` space-separated integers, representing the indices corresponding to each packet. # Output Format - Return a list of integers representing the reordered packets. # Constraints - `1 ≤ n ≤ 100` - Each packet will have a unique index ranging from `0` to `n-1`. # Example Input ``` 5 10 20 30 40 50 4 3 0 1 2 ``` Output ``` 30 40 50 20 10 ``` # Explanation In the above example, the packets [10, 20, 30, 40, 50] with indices [4, 3, 0, 1, 2] should be reordered as: [30, 40, 50, 20, 10].","solution":"def reorder_packets(packets, indices): Reorders the packets based on their indices. :param packets: List[int] - a list of packet data. :param indices: List[int] - a list of corresponding indices for the packets. :return: List[int] - the reordered list of packet data. n = len(packets) reordered = [0] * n for packet, index in zip(packets, indices): reordered[index] = packet return reordered"},{"question":"Even though the problem of this kind and that mentioned in example above look for similar coding skills but the problem of this nature mentioned below is helpful in understanding implementation of matrix and its boundaries. An archaeologist has discovered what he believes to be an ancient map detailing the locations of valuable artifacts. The map is represented as a rectangular grid of characters, where each character can be \'.\', an empty cell or filled with a \'#\', indicating the cell is occupied by an obstacle that cannot be traversed. The map also has some cells containing digits ranging from \'1\' to \'9\', indicating the number of artifacts buried at that location. The archaeologist can only walk on empty cells (\'.\'), and he cannot pass through obstacles (\'#\'). To retrieve as many artifacts as possible, he needs to first find the largest contiguous area free of obstacles in the grid and then count the total number of artifacts (\'1\' to \'9\') in that area. Write a function to help the archaeologist determine the maximum count of artifacts that can be retrieved from the largest contiguous area. Note that the archaeologist can move up, down, left, or right, but cannot move diagonally. Input: - The first line contains two integers r and c (1 ≤ r, c ≤ 50), the number of rows and columns in the grid, respectively. - The next r lines each contain a string of length c, consisting of the characters \'.\', \'#\', and digits \'1\' to \'9\'. Output: - A single integer representing the maximum count of artifacts that can be retrieved from the largest contiguous area free of obstacles. Example Input 5 5 ..1.. .#... ..2#. ..... 3..#. Output 6 Explanation: The largest contiguous area free of obstacles includes cells (1, 3), (3, 3), and (5, 3) with artifacts \'1\', \'2\', and \'3\', respectively. Thus, the total number of artifacts retrieved is 1 + 2 + 3 = 6.","solution":"def max_artifacts(r, c, grid): def dfs(x, y): if x < 0 or x >= r or y < 0 or y >= c or grid[x][y] == \'#\' or visited[x][y]: return 0 visited[x][y] = True count = int(grid[x][y]) if grid[x][y].isdigit() else 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: count += dfs(x+dx, y+dy) return count visited = [[False]*c for _ in range(r)] max_count = 0 for i in range(r): for j in range(c): if grid[i][j] != \'#\' and not visited[i][j]: max_count = max(max_count, dfs(i, j)) return max_count"},{"question":"Little Artem is learning new techniques to work with undo and redo operations. He is currently implementing a text editor with these functionalities to practice. The editor starts with an empty text and initially, the cursor is at the beginning. You have to implement an editor that can process five types of operations: 1. \\"APPEND text\\": appends the specified text to the end of the current text. 2. \\"DELETE k\\": deletes the last k characters of the current text. 3. \\"PRINT k\\": prints the kth character from the current text. 4. \\"UNDO\\": reverts the most recent operation that modified the text. 5. \\"REDO\\": reapplies the most recently reverted operation. It is guaranteed that: - DELETE and PRINT operations will always be valid according to the current state of the text. - There will always be a valid operation for UNDO and REDO when they are called. Input The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of operations. The next n lines contain one operation each as described above: - \\"APPEND text\\" (1 ≤ |text| ≤ 10, where |text| is the length of the \\"text\\") - \\"DELETE k\\" (1 ≤ k ≤ current length of the text) - \\"PRINT k\\" (1 ≤ k ≤ current length of the text) - \\"UNDO\\" - \\"REDO\\" Output For every \\"PRINT\\" operation, output the corresponding character in its own line. Examples Input 8 APPEND \\"hello\\" APPEND \\" world\\" PRINT 1 DELETE 6 PRINT 6 UNDO PRINT 6 REDO Output h o d Note - After the first \\"APPEND\\", the text is \\"hello\\". - After the second \\"APPEND\\", the text is \\"hello world\\". - The first PRINT output is \'h\'. - After the DELETE operation, the text is \\"hello\\". - The second PRINT output is \'o\'. - After the UNDO operation, the text is \\"hello world\\". - The third PRINT output is \'d\'. - After the REDO operation, the text is \\"hello\\".","solution":"class Editor: def __init__(self): self.text = \\"\\" self.history = [] self.redo_stack = [] def append(self, text): self.history.append(self.text) self.text += text self.redo_stack.clear() def delete(self, k): self.history.append(self.text) self.text = self.text[:-k] self.redo_stack.clear() def print_char(self, k): print(self.text[k - 1]) def undo(self): if self.history: self.redo_stack.append(self.text) self.text = self.history.pop() def redo(self): if self.redo_stack: self.history.append(self.text) self.text = self.redo_stack.pop() # Example usage during an interactive session def main(n, operations): editor = Editor() for operation in operations: if operation.startswith(\\"APPEND\\"): _, text = operation.split(\' \', 1) editor.append(text.strip(\'\\"\')) elif operation.startswith(\\"DELETE\\"): _, k = operation.split() editor.delete(int(k)) elif operation.startswith(\\"PRINT\\"): _, k = operation.split() editor.print_char(int(k)) elif operation == \\"UNDO\\": editor.undo() elif operation == \\"REDO\\": editor.redo() # Example input n = 8 operations = [ \\"APPEND \'hello\'\\", \\"APPEND \' world\'\\", \\"PRINT 1\\", \\"DELETE 6\\", \\"PRINT 6\\", \\"UNDO\\", \\"PRINT 6\\", \\"REDO\\" ] main(n, operations)"},{"question":"You are given two strings, A and B, of equal length. Your task is to find and return the smallest substring of A that contains all the characters of B including repetitions. Constraints: * The input strings consist of only lowercase English letters. * The length of strings, `len(A)` and `len(B)`, will be at most 10^5. Input: Input is given from Standard Input in the following format: ``` A B ``` Output: Print the smallest substring of A that contains all the characters of B. If there are multiple possible answers, return the one which appears first in A. If no such substring exists, return an empty string. Examples: Input: ``` adobecodebanc abc ``` Output: ``` banc ``` Input: ``` a aa ``` Output: ``` ``` Input: ``` hello ohe ``` Output: ``` hello ```","solution":"from collections import Counter def smallest_substring_with_all_chars(A, B): if not A or not B or len(A) < len(B): return \\"\\" required_chars = Counter(B) window_chars = Counter() required_len = len(required_chars) have = 0 res = (float(\\"inf\\"), None, None) left = 0 for right in range(len(A)): char = A[right] window_chars[char] += 1 if char in required_chars and window_chars[char] == required_chars[char]: have += 1 while have == required_len: if (right - left + 1) < res[0]: res = (right - left + 1, left, right) window_chars[A[left]] -= 1 if A[left] in required_chars and window_chars[A[left]] < required_chars[A[left]]: have -= 1 left += 1 return \\"\\" if res[1] is None else A[res[1]: res[2] + 1]"},{"question":"You are given an n x n grid where each cell contains either a 0 or a 1. You can **perform an operation of inverting** any row or column of the grid. An inversion means flipping all the values of cells in that row or column (i.e., turning all 0s into 1s and all 1s into 0s). Your task is to find the **maximum number of rows** that contain all 1s after performing any number of operations (possibly zero). ------ Input ------ The first line contains a single integer t denoting the number of test cases. The description of t test cases follows. The first line of each test case contains a single integer n denoting the size of the grid (number of rows and columns). Each of the next n lines contains n binary digits (0s and 1s) describing a row of the grid. ------ Output ------ For each test case, print a single line containing one integer ― the maximum number of rows that contain all 1s after performing any number of operations. ------ Constraints ------ 1 ≤ t ≤ 100 1 ≤ n ≤ 500 ------ Sample Input 1 ------ 2 3 1 0 1 0 1 0 1 1 1 2 0 0 1 1 ------ Sample Output 1 ------ 2 2 ------ Explanation 1 ------ For the first test case, one possible way to achieve 2 rows of all 1s is: - Flip the second row: the grid becomes 1 0 1 1 0 1 1 1 1 - Now flip the second column: the grid becomes 1 1 1 1 1 1 1 0 1 For the second test case, the initial grid already has 2 rows of all 1s, no operations are needed.","solution":"def max_rows_all_1s(t, test_cases): def flip_pattern(rows): max_count = 0 dic = {} for row in rows: key = tuple(row) dic[key] = dic.get(key, 0) + 1 max_count = max(max_count, dic[key]) return max_count results = [] for case in test_cases: n, grid = case row_patterns = [] for row in grid: if row.count(1) == n: row_patterns.append((1,) * n) else: flipped_row = tuple(1 - x for x in row) row_patterns.append(tuple(row)) row_patterns.append(flipped_row) results.append(flip_pattern(row_patterns)) return results"},{"question":"Given a list of integers, you need to determine whether you can partition the list into exactly two non-empty subsets such that the sum of the elements in both subsets is the same. Write a function `canPartition(nums)` that takes a list of integers `nums` and returns `True` if such a partition is possible, otherwise returns `False`. ------ Input: ------ - A list of integers `nums` (0 ≤ len(nums) ≤ 200), where each integer `num` (0 ≤ num ≤ 100) ------ Output: ------ - Return `True` if the list can be partitioned into two subsets with equal sum, otherwise return `False`. ------ Example Input: ------ [1, 5, 11, 5] ------ Example Output: ------ True ------ Example Input: ------ [1, 2, 3, 5] ------ Example Output: ------ False ------ Explanation ------ In the first example, the list can be partitioned into [1, 5, 5] and [11], both of which have a sum of 11. In the second example, no partition exists that can divide the list into two subsets with equal sum.","solution":"def canPartition(nums): total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition it into two equal subsets if total_sum % 2 != 0: return False target_sum = total_sum // 2 n = len(nums) dp = [False] * (target_sum + 1) dp[0] = True for num in nums: for i in range(target_sum, num - 1, -1): dp[i] = dp[i] | dp[i - num] return dp[target_sum]"},{"question":"Petya has recently learned about different geometrical shapes in his mathematics class. He discovered that a lot of interesting facts and figures can be derived from simple shapes, such as the rectangle. He is very curious to know the number of rectangles that can be formed within an N x M grid of unit squares. A rectangle in a grid is defined by selecting two horizontal and two vertical lines. The areas enclosed within these lines form a rectangle. For example, a 3x2 grid (3 rows and 2 columns) can form a variety of rectangles of different sizes. # Task Given the dimensions of the grid (N rows and M columns), Petya wants to find out the total number of rectangles that can be formed within the grid. # Input The input consists of a single line containing two integers, N and M (1 ≤ N, M ≤ 1000) - the number of rows and the number of columns in the grid respectively. # Output Print a single integer that represents the total number of rectangles that can be formed within the given grid. # Example Input ``` 2 3 ``` Output ``` 18 ``` Explanation In a 2x3 grid: - Rectangles of size 1x1: 6 - Rectangles of size 1x2: 4 - Rectangles of size 1x3: 2 - Rectangles of size 2x1: 3 - Rectangles of size 2x2: 2 - Rectangles of size 2x3: 1 Summing these gives 6 + 4 + 2 + 3 + 2 + 1 = 18 # Notes To calculate the number of rectangles that can be formed in an N x M grid: 1. Select 2 lines from N+1 horizontal lines (the lines that frame rows). 2. Select 2 lines from M+1 vertical lines (the lines that frame columns). The number of ways to choose 2 lines from a set of k lines is given by the combination formula C(k, 2) = k * (k - 1) / 2. Therefore, the total number of rectangles is: ``` C(N+1, 2) * C(M+1, 2) ``` Where `C(k, 2)` represents the number of combinations of `k` items taken `2` at a time.","solution":"def num_of_rectangles(N, M): Computes the number of rectangles that can be formed in an N x M grid. Parameters: N (int): Number of rows in the grid M (int): Number of columns in the grid Returns: int: Total number of rectangles # Calculate the number of ways to choose 2 lines from N+1 horizontal lines and M+1 vertical lines total_rectangles = (N * (N + 1) // 2) * (M * (M + 1) // 2) return total_rectangles"},{"question":"Given an array of integers and a target sum, write a function that returns the minimum number of elements that need to be added together to reach the target sum. If it is not possible to reach the target sum with the given array, return -1. You can use each element of the array multiple times. **Function Signature:** ```python def min_elements_to_sum(arr: List[int], target: int) -> int: pass ``` # Input: - `arr`: List of positive integers. - `target`: A positive integer representing the target sum. # Output: - An integer representing the minimum number of elements required to reach the target sum, or -1 if it is not possible. # Examples: #1: ```python arr = [1, 2, 3] target = 6 min_elements_to_sum(arr, target) # Output: 2 ``` Explanation: 2+2+2 = 6 #2: ```python arr = [2, 4, 5] target = 11 min_elements_to_sum(arr, target) # Output: 3 ``` Explanation: 4+4+3 = 11 #3: ```python arr = [3, 7] target = 5 min_elements_to_sum(arr, target) # Output: -1 ``` Explanation: It is not possible to reach the target sum of 5 using elements from the array [3, 7].","solution":"import sys from typing import List def min_elements_to_sum(arr: List[int], target: int) -> int: # Initialize a list to store the minimum elements required to form each value from 0 to target dp = [sys.maxsize] * (target + 1) # Base case: to get the sum of 0, 0 elements are needed dp[0] = 0 # Iterate through each value from 1 to target for i in range(1, target + 1): # Check each number in the array for num in arr: if i - num >= 0: dp[i] = min(dp[i], dp[i - num] + 1) # If dp[target] is still set to the max value, that means target sum cannot be formed return dp[target] if dp[target] != sys.maxsize else -1"},{"question":"A university is holding a programming contest where each team submits multiple solutions to coding problems. Each solution is scored based on correctness and efficiency. The final ranking of the teams is determined by their best solution score across all problems. In the case of a tie in the best solution score, the team with the smallest sum of solution scores across all problems ranks higher. Create a program that inputs team numbers and their respective scores for each problem, and outputs the team rankings. Input The input is given in the following format: t1 s1 t1 s2 :: t1 sn t2 s1 t2 s2 :: tm sn Where, - ti (integer, 1 ≤ ti ≤ 1000) is the team number. - si (real number, 0 ≤ si ≤ 100) is the score for a solution. It is guaranteed that: - There are no more than 30 teams. - Each team has scores for no more than 5 problems. Output Output the rankings of the teams, in the format: rank1 ti rank2 tj :: rankm tk Where, - ranki is the rank of the team. - ti is the team number. Example Input 1 90.5 1 85.3 2 88.0 2 90.5 2 65.1 3 70.0 3 75.0 4 85.0 4 90.5 4 85.5 4 92.0 Output 1 4 2 1 3 2 4 3 Explanation In the example, team 4 has the highest best solution score of 92.0, followed by teams 1 and team 2 which both have a best solution score of 90.5. As they are tied, the sum of scores across all problems is compared to determine that team 1 ranks higher than team 2. Finally, team 3 has the next highest best solution score of 75.","solution":"def rank_teams(input_scores): from collections import defaultdict teams_scores = defaultdict(list) # Parse the input scores for entry in input_scores: team, score = map(float, entry.split()) team = int(team) teams_scores[team].append(score) # Calculate the best and sum scores team_stats = [] for team, scores in teams_scores.items(): best_score = max(scores) sum_scores = sum(scores) team_stats.append((team, best_score, sum_scores)) # Sort the teams by the criteria team_stats.sort(key=lambda x: (-x[1], x[2], x[0])) # Prepare the result in the required format result = [(rank + 1, team_stat[0]) for rank, team_stat in enumerate(team_stats)] return result"},{"question":"Given a 2D grid of characters and a list of words, find all words in the grid that can be formed by sequentially adjacent letters. The same letter cell may not be used more than once in a word. Words should be returned in a list in lexicographical order. Example 1: Input: grid = [ [\'o\',\'a\',\'a\',\'n\'], [\'e\',\'t\',\'a\',\'e\'], [\'i\',\'h\',\'k\',\'r\'], [\'i\',\'f\',\'l\',\'v\'] ] words = [\\"oath\\",\\"pea\\",\\"eat\\",\\"rain\\"] Output: [\\"eat\\",\\"oath\\"] Explanation: - \\"oath\\" can be formed by the path o -> a -> t -> h. - \\"eat\\" can be formed by the path e -> a -> t. - \\"pea\\" and \\"rain\\" cannot be formed by any path. Example 2: Input: grid = [ [\'a\',\'b\'], [\'c\',\'d\'] ] words = [\\"abcb\\"] Output: [] Explanation: - \\"abcb\\" cannot be formed because we cannot use the same cell more than once. Your Task: You don\'t need to read or print anything. Your task is to complete the function findWords() which takes a 2D list of characters grid and a list of strings words as parameters and returns a list of strings denoting all words in words that can be found in grid in lexicographical order. Expected Time Complexity: O(N * M * 4^L + KlogK) where N is the number of rows, M is the number of columns in the grid, L is the length of the longest word and K is the number of words found. Expected Auxiliary Space: O(MN) Constraints: 1 <= len(grid), len(grid[0]) <= 12 1 <= len(words) <= 3 * 10^4 1 <= len(words[i]) <= 10 grid and words[i] consist of lowercase English letters.","solution":"def findWords(grid, words): Finds all words in the grid that can be formed by sequentially adjacent letters. if not grid or not grid[0]: return [] rows, cols = len(grid), len(grid[0]) def dfs(x, y, node, path, visited): if \'end\' in node: result.add(node[\'end\']) if x < 0 or x >= rows or y < 0 or y >= cols or (x, y) in visited or grid[x][y] not in node: return visited.add((x, y)) char = grid[x][y] for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy dfs(nx, ny, node[char], path + char, visited) visited.remove((x, y)) def build_trie(): trie = {} for word in words: node = trie for char in word: if char not in node: node[char] = {} node = node[char] node[\'end\'] = word return trie trie = build_trie() result = set() for i in range(rows): for j in range(cols): dfs(i, j, trie, \\"\\", set()) return sorted(result)"},{"question":"Cassandra has recently joined a tech company as a software developer. She has been given a task to analyze user activity logs. The activity logs contain user actions with timestamps, and she needs to find out the longest streak of consecutive days on which a user has logged in. An activity log is a list of pairs `(user_id, timestamp)`, where `user_id` is an integer representing the ID of the user, and `timestamp` is a string in the format \\"yyyy-mm-dd hh:mm:ss\\" representing the date and time of the action. A user is considered to have logged in on a particular day if there is at least one action recorded for that user on that day. Your task is to help Cassandra by writing a function that, given the activity logs, finds the longest streak of consecutive days on which each user has logged in. # Input * The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of entries in the activity log. * The next `n` lines each contain an `user_id` and a `timestamp`, separated by a space. # Output * For each user, output a line in the format `user_id streak`, where `user_id` is the ID of the user and `streak` is the length of the longest streak of consecutive days on which the user has logged in. * The output should be sorted by `user_id` in ascending order. # Examples Input ``` 5 1 2023-10-01 10:15:00 2 2023-10-01 12:30:00 1 2023-10-02 09:00:00 2 2023-10-02 09:00:00 1 2023-10-04 09:00:00 ``` Output ``` 1 2 2 2 ``` Input ``` 7 3 2023-10-01 10:15:00 3 2023-10-02 09:00:00 3 2023-10-03 09:00:00 3 2023-10-04 09:00:00 4 2023-09-30 08:30:00 4 2023-10-02 10:00:00 4 2023-10-03 10:00:00 ``` Output ``` 3 4 4 2 ``` # Note * In the first example, user 1 has login streaks of lengths 2 (days 2023-10-01 to 2023-10-02) and 1 (day 2023-10-04), making the longest streak of 2 days. User 2 has a streak of 2 days. * In the second example, user 3 has a streak of 4 consecutive days, while user 4 has a streak of 2 consecutive days (days 2023-10-02 to 2023-10-03).","solution":"from collections import defaultdict from datetime import datetime, timedelta def longest_streak(logs): user_dates = defaultdict(set) # Parse logs and collect unique dates per user for user_id, timestamp in logs: date = timestamp.split()[0] user_dates[user_id].add(date) result = {} # Find the longest streak for each user for user_id, dates in user_dates.items(): sorted_dates = sorted(dates) max_streak = 1 current_streak = 1 for i in range(1, len(sorted_dates)): prev_date = datetime.strptime(sorted_dates[i - 1], \\"%Y-%m-%d\\") curr_date = datetime.strptime(sorted_dates[i], \\"%Y-%m-%d\\") if curr_date - prev_date == timedelta(days=1): current_streak += 1 else: current_streak = 1 max_streak = max(max_streak, current_streak) result[user_id] = max_streak return sorted(result.items()) # Wrapper function to parse input according to the given format def parse_input(n, entries): logs = [] for entry in entries: user_id, timestamp = entry.split(\' \', 1) logs.append((int(user_id), timestamp)) return longest_streak(logs)"},{"question":"In the land of Azedonia, there is a popular game played among children called \\"Magic Maze.\\" A Magic Maze is a rectangular grid with walls and open cells. Each cell is either an open cell, denoted by \'.\', or a wall, denoted by \'#\'. Players can move up, down, left, or right, but can only pass through open cells. The goal of the game is to traverse the maze starting from a given point (Sx, Sy) and reaching the target point (Tx, Ty) in the shortest possible time. The game is considered won if the player can reach the target point. If it\'s impossible to reach the target point, the game is lost. Your task is to write a program that determines the shortest number of steps required to reach the target point or identify if it is impossible to do so. Input The first line of input contains two integers, N and M (2 <= N, M <= 100), representing the number of rows and columns in the maze. The next N lines contain M characters each, describing the grid cells where \'.\' indicates an open cell and \'#\' indicates a wall. The final line contains four integers, Sx, Sy, Tx, Ty (1 <= Sx, Tx <= N, 1 <= Sy, Ty <= M), denoting the starting and target points respectively. The starting and target points are guaranteed to be on open cells. Output Output a single integer representing the minimum number of steps needed to reach the target point, or -1 if it is impossible to do so. Sample Input 5 5 . . . # . # # . # . . . . . . # . # # . . . . . . 1 1 5 5 Sample Output 8 Explanation The shortest path from (1, 1) to (5, 5) involves 8 steps through open cells avoiding walls. If it is not possible to reach the target point, the output should be -1.","solution":"from collections import deque def min_steps_to_reach_target(n, m, grid, sx, sy, tx, ty): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx - 1, sy - 1, 0)]) visited = [[False] * m for _ in range(n)] visited[sx - 1][sy - 1] = True while queue: x, y, steps = queue.popleft() if (x, y) == (tx - 1, ty - 1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1"},{"question":"John, an avid chess player, loves the challenge of getting his knight to specific positions on the chessboard. He wants to find out if it\'s possible for his knight to move from its starting position to a given target position in an exact number of moves. Given the dimensions of an MxN chessboard, a starting position (x_start, y_start), a target position (x_target, y_target), and an exact number of moves K, determine if John can move his knight from the start position to the target position in exactly K moves. The knight moves in an L-shape: two cells in one direction and then one cell perpendicular, or one cell in one direction and then two cells perpendicular. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of a single line of five integers: M, N, x_start, y_start, x_target, y_target, and K — the dimensions of the chessboard, the starting and target positions of the knight, and the exact number of moves respectively. ------ Output Format ------ For each test case, output \\"YES\\" if the knight can reach the target position in exactly K moves, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M, N ≤ 10 0 ≤ x_start, y_start, x_target, y_target < M, N 1 ≤ K ≤ 15 ----- Sample Input 1 ------ 3 8 8 0 0 1 2 1 8 8 0 0 7 7 6 8 8 0 0 7 7 7 ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ Test case 1: The knight can move from (0, 0) to (1, 2) in exactly 1 move. Test case 2: The knight can move from (0, 0) to (7, 7) in exactly 6 moves. Test case 3: The knight cannot reach (7, 7) from (0, 0) in exactly 7 moves.","solution":"def can_reach_in_exactly_k_moves(M, N, x_start, y_start, x_target, y_target, K): from collections import deque moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)] queue = deque([(x_start, y_start, 0)]) visited = set((x_start, y_start, 0)) while queue: x, y, d = queue.popleft() if d == K: if (x, y) == (x_target, y_target): return \\"YES\\" continue for move in moves: nx, ny = x + move[0], y + move[1] if 0 <= nx < M and 0 <= ny < N and (nx, ny, d+1) not in visited: queue.append((nx, ny, d+1)) visited.add((nx, ny, d+1)) return \\"NO\\" def process_knight_moves(T, test_cases): results = [] for test_case in test_cases: M, N, x_start, y_start, x_target, y_target, K = test_case results.append(can_reach_in_exactly_k_moves(M, N, x_start, y_start, x_target, y_target, K)) return results"},{"question":"In a city, there are a number of bike rental shops, each with a certain number of bikes. On any given day, people can rent bikes from these shops. A person can rent a bike from any shop, and each person can rent only one bike. People have preferences for which shop they want to rent from, but they will settle for any shop if their preferred one is out of bikes. You are given the number of bike rental shops and the number of bikes each shop has in stock at the beginning of the day. You are also given the preferences of all the people who want to rent a bike on that day. Your task is to determine the number of people who successfully rent a bike from their preferred shop, and the total number of people who successfully rent a bike regardless of whether it\'s from their preferred shop or not. -----Input----- - The first line contains a single integer, T, which is the number of test cases. The description of each test case follows. - The first line of each test case contains a single integer, S, which is the number of bike rental shops. - The second line of each test case contains S integers, where the i-th integer indicates the number of bikes available in the i-th shop. - The third line of each test case contains a single integer, P, which is the number of people who want to rent a bike. - The fourth line of each test case contains P integers, where the i-th integer indicates the preferred shop of the i-th person. -----Output----- For each test case, output two integers on a single line: the number of people who rent a bike from their preferred shop, and the total number of people who successfully rent a bike. -----Constraints----- - 1 le T le 10 - 1 le S le 100 - 0 le Number of bikes in each shop le 100 - 1 le P le 1000 - 1 le Preferred shop of each person le S -----Sample Input----- 2 3 5 3 4 6 1 2 1 3 2 3 2 4 5 5 1 2 2 1 2 -----Sample Output----- 6 6 2 2 -----Explanation----- Test Case 1: - There are 3 shops with 5, 3, and 4 bikes respectively, and 6 people with preferences as follows: [1, 2, 1, 3, 2, 3]. - The first person prefers shop 1, rents a bike from shop 1 (remaining bikes: [4, 3, 4]). - The second person prefers shop 2, rents a bike from shop 2 (remaining bikes: [4, 2, 4]). - The third person prefers shop 1, rents a bike from shop 1 (remaining bikes: [3, 2, 4]). - The fourth person prefers shop 3, rents a bike from shop 3 (remaining bikes: [3, 2, 3]). - The fifth person prefers shop 2, rents a bike from shop 2 (remaining bikes: [3, 1, 3]). - The sixth person prefers shop 3, rents a bike from shop 3 (remaining bikes: [3, 1, 2]). - All 6 people rent from their preferred shops, so the output is 6 6. Test Case 2: - There are 2 shops with 4 and 5 bikes respectively, and 5 people with preferences as follows: [1, 2, 2, 1, 2]. - The first person prefers shop 1, rents a bike from shop 1 (remaining bikes: [3, 5]). - The second person prefers shop 2, rents a bike from shop 2 (remaining bikes: [3, 4]). - The third person prefers shop 2, rents a bike from shop 2 (remaining bikes: [3, 3]). - The fourth person prefers shop 1, rents a bike from shop 1 (remaining bikes: [2, 3]). - The fifth person prefers shop 2, rents a bike from shop 2 (remaining bikes: [2, 2]). - All 5 people rent from their preferred shops, so the output is 2 2.","solution":"def bike_rental_status(T, test_cases): result = [] for t in range(T): S = test_cases[t][0] bikes = test_cases[t][1] P = test_cases[t][2] preferences = test_cases[t][3] preferred_count = 0 total_count = 0 for pref in preferences: if bikes[pref - 1] > 0: bikes[pref - 1] -= 1 preferred_count += 1 total_count += 1 else: for i in range(S): if bikes[i] > 0: bikes[i] -= 1 total_count += 1 break result.append((preferred_count, total_count)) return result"},{"question":"In a land of magic and spells, a powerful wizard has a collection of magical objects, each with a certain mana value. The wizard has an idea to increase the mana burst by forming groups of objects. Each group must contain exactly one magic object, but the wizard can choose any number of magic objects from different groups, ensuring that the groups do not overlap. More formally, given an array a of n integers representing the mana values of n magical objects, you have to perform q queries on this array. Each query consists of one integer k, asking to find the minimum possible sum of mana values by choosing k non-overlapping magic objects from different groups. To clarify, the minimum sum for k = 1 is the smallest element in the array. For k = 2, it would be the sum of the two smallest elements, and so on. -----Input----- The first line contains an integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains two integers n and q (1 leq n leq 10^5, 1 leq q leq 100) — the number of magical objects and the number of queries, respectively. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the mana values of the magical objects. The next q lines of each test case each contain a single integer k (1 leq k leq n), representing the number of non-overlapping magic objects to choose. -----Output----- For each query, print the minimum possible sum of the mana values for choosing k non-overlapping magic objects from different groups, considering each test case separately. -----Examples----- Input 2 5 3 10 20 30 40 50 1 2 3 4 2 15 10 20 25 2 3 Output 10 30 60 25 45 -----Note----- In the first test case, the mana values are {10, 20, 30, 40, 50}. For k = 1, the minimum sum is 10. For k = 2, the minimum sum is 10 + 20 = 30. For k = 3, the minimum sum is 10 + 20 + 30 = 60. In the second test case, the mana values are {15, 10, 20, 25}. For k = 2, the minimum sum is 10 + 15 = 25. For k = 3, the minimum sum is 10 + 15 + 20 = 45.","solution":"def min_mana_sum(n, q, mana_values, queries): This function computes the minimum possible sum of mana values by choosing k non-overlapping magic objects from different groups for each query. :param n: Number of magical objects :param q: Number of queries :param mana_values: List of integers representing mana values of magical objects :param queries: List of integers representing the number of objects to choose in each query :return: List of results for each query # Sort the mana values to be able to pick the smallest values easily mana_values.sort() # Calculate prefix sums for quick sum calculation for the smallest k elements prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + mana_values[i - 1] results = [] for k in queries: results.append(prefix_sums[k]) return results def process_test_cases(t, test_cases): results = [] for test_case in test_cases: n, q, mana_values, queries = test_case results.extend(min_mana_sum(n, q, mana_values, queries)) return results"},{"question":"A company organizes a marathon event where every runner must pass through several checkpoints placed along the route. Each checkpoint can be connected by a direct route to one or more other checkpoints. The company wants to find the longest possible path a runner can take without visiting the same checkpoint more than once. You are given the number of checkpoints and the direct routes between them. Write a program to determine the length of the longest path in this marathon. Input The first line contains an integer n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 5000), where n is the number of checkpoints, and m is the number of direct routes. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing a direct route between checkpoints u and v. Output Print the length of the longest path without visiting the same checkpoint more than once. Examples Input 6 7 1 2 2 3 3 4 1 3 1 4 4 5 5 6 Output 5 Input 5 5 1 2 2 3 3 4 4 5 1 3 Output 4 Note In the first example, one of the longest paths can be: 1 → 2 → 3 → 4 → 5 → 6. In the second example, one of the longest paths can be: 1 → 2 → 3 → 4 → 5.","solution":"def longest_path(n, m, edges): from collections import defaultdict, deque def dfs(node, visited): if node in visited: return 0 visited.add(node) max_length = 0 for neighbor in adj_list[node]: if neighbor not in visited: max_length = max(max_length, dfs(neighbor, visited)) visited.remove(node) return 1 + max_length # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Calculate the longest path max_path_length = 0 for node in range(1, n+1): max_path_length = max(max_path_length, dfs(node, set())) return max_path_length - 1 # Subtract one to get the number of edges in the path # Example use case edges = [ (1, 2), (2, 3), (3, 4), (1, 3), (1, 4), (4, 5), (5, 6) ] print(longest_path(6, 7, edges)) # Output: 5 edges = [ (1, 2), (2, 3), (3, 4), (4, 5), (1, 3) ] print(longest_path(5, 5, edges)) # Output: 4"},{"question":"Given an array of integers of size N, your task is to shift the elements of the array to the right by K positions. This should be done in-place without using extra space for another array. If an element is shifted beyond the end of the array, it should wrap around to the beginning. Example 1: Input: N = 7, K = 3 arr[] = {1, 2, 3, 4, 5, 6, 7} Output: 5 6 7 1 2 3 4 Explanation: After shifting elements to the right by 3 positions, the array becomes {5, 6, 7, 1, 2, 3, 4}. Example 2: Input: N = 5, K = 2 arr[] = {10, 20, 30, 40, 50} Output: 40 50 10 20 30 Explanation: After shifting elements to the right by 2 positions, the array becomes {40, 50, 10, 20, 30}. Your Task: You don\'t need to read input or print anything. The task is to complete the function shiftRight() which takes the array, N, and K as input parameters and modifies the array in-place. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^7 1 ≤ K ≤ 10^7 -10^9 ≤ arr[i] ≤ 10^9","solution":"def shiftRight(arr, N, K): Shift elements of the array to the right by K positions in place. :param arr: List[int] - The array to be shifted. :param N: int - The number of elements in the array. :param K: int - The number of positions to shift. # Effective number of shifts K = K % N # Reverse the entire array reverse(arr, 0, N-1) # Reverse the first K elements reverse(arr, 0, K-1) # Reverse the remaining N-K elements reverse(arr, K, N-1) def reverse(arr, start, end): Reverse the elements of the array from index start to index end in place. :param arr: List[int] - The array to be reversed. :param start: int - Starting index. :param end: int - Ending index. while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1"},{"question":"Given a set of integers, you are to mark a specific integer by placing it at a designated index and then output the adjusted list. The designated index will be provided along with the list of integers. To make it more interesting, if the designated index exceeds the length of the list, the integer should be appended at the end of the list. Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of integers in the list. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), the initial list of integers. - The third line contains an integer x (1 ≤ x ≤ 10^9), the specific integer to be marked. - The fourth line contains an integer m (0 ≤ m ≤ n), the designated index. Output Print the adjusted list of integers after marking the specific integer at the designated index. Examples Input 5 1 2 3 4 5 100 2 Output 1 2 100 3 4 5 Input 3 7 8 9 50 5 Output 7 8 9 50 Input 4 1 3 5 7 2 0 Output 2 1 3 5 7 Note In the first example, the integer 100 is inserted at index 2. The resulting list is [1, 2, 100, 3, 4, 5]. In the second example, the index 5 exceeds the length of the list, so the integer 50 is appended at the end. The resulting list is [7, 8, 9, 50]. In the third example, the integer 2 is inserted at index 0. The resulting list is [2, 1, 3, 5, 7].","solution":"def mark_integer_in_list(n, initial_list, x, m): Inserts the integer x at index m in the initial_list. Parameters: n (int): The number of integers in the initial list. initial_list (list): The list of integers. x (int): The specific integer to be marked. m (int): The designated index. Returns: list: The adjusted list of integers after marking the specific integer at the designated index. if m <= n: return initial_list[:m] + [x] + initial_list[m:] else: return initial_list + [x]"},{"question":"Write a program to determine the minimum cost of painting all houses such that no two adjacent houses have the same color. Each house can be painted with one of three colors: Red, Green, or Blue. The cost of painting each house with a certain color is different, and you are given this cost in a 2D list where the one-dimensional array costs[i] represents the cost of painting the i-th house, such that: - costs[i][0] is the cost of painting the i-th house with Red, - costs[i][1] is the cost of painting the i-th house with Green, and - costs[i][2] is the cost of painting the i-th house with Blue. Your task is to write a function that computes the minimum cost to paint all houses with the above constraints. Function Signature: ```python def minCost(costs: List[List[int]]) -> int: ``` Input: - A list of n 3-element lists, where costs[i] is a list containing three integers representing the painting costs for the i-th house. Output: - An integer, the minimum cost to paint all houses. Constraints: - 1 ≤ n ≤ 100 - 1 ≤ costs[i][j] ≤ 10^4 Example: Input: ```python costs = [ [17, 2, 17], [16, 16, 5], [14, 3, 19] ] ``` Output: ```python 10 ``` Explanation: There are three houses, and we need to paint all houses with the minimum cost such that no two adjacent houses have the same color. ``` - Paint the first house with Green: cost = 2 - Paint the second house with Blue: cost = 5 - Paint the third house with Green: cost = 3 ``` The total cost is 2 + 5 + 3 = 10, which is the minimum cost. Note: - Your solution should be efficient with a time complexity of O(n). - Consider using dynamic programming to solve this problem.","solution":"from typing import List def minCost(costs: List[List[int]]) -> int: n = len(costs) if n == 0: return 0 for i in range(1, n): # Cost of painting the current house red is the cost of painting it red plus the minimum cost to paint the previous house either green or blue costs[i][0] += min(costs[i-1][1], costs[i-1][2]) # Cost of painting the current house green is the cost of painting it green plus the minimum cost to paint the previous house either red or blue costs[i][1] += min(costs[i-1][0], costs[i-1][2]) # Cost of painting the current house blue is the cost of painting it blue plus the minimum cost to paint the previous house either red or green costs[i][2] += min(costs[i-1][0], costs[i-1][1]) # The answer will be the minimum cost of painting the last house any color return min(costs[-1])"},{"question":"You are given a long corridor lined with sensors. Each sensor can detect a motion in a specific interval. To secure the entire corridor, you need to ensure that every sensor\'s coverage interval overlaps with at least one other sensor\'s coverage interval. If a sensor\'s interval does not overlap with any other sensor\'s interval, the corridor is not secured. Create a program that determines whether the corridor is securely covered by the given intervals of the sensors. Your program should take multiple sets of data, with each set containing the number of sensors and their respective intervals. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line containing \\"0\\". Each dataset is given in the following format: n start1 end1 start2 end2 ... startn endn The first line of each dataset contains an integer n (1 ≤ n ≤ 1000), the number of sensors. The following n lines each contain two integers, start and end (0 ≤ start < end ≤ 100000), indicating the interval of detection for each sensor. Output For each dataset, output \\"Secure\\" if every sensor interval overlaps with at least one other sensor interval, otherwise output \\"Not Secure\\". Examples Input 3 1 4 2 5 3 6 4 1 2 3 4 5 6 7 8 0 Output Secure Not Secure","solution":"def is_corridor_secure(datasets): results = [] for data in datasets: n, intervals = data if n == 1: results.append(\\"Not Secure\\") continue intervals.sort() secure = False for i in range(len(intervals) - 1): if intervals[i][1] >= intervals[i + 1][0]: secure = True break if secure: results.append(\\"Secure\\") else: results.append(\\"Not Secure\\") return results"},{"question":"The Initech corporation is digitizing its employee records. They need to create a program that validates if a given string is a properly formatted Employee ID and then extracts and returns the department code embedded within it. An Employee ID has the following format: `XXX-YY-NNNN` - `XXX` is a sequence of exactly three uppercase English letters. - `YY` is the department code, consisting of two digits (00 to 99). - `NNNN` is a sequence of exactly four digits. Your task is to write a function that takes an Employee ID as input, validates its format, and returns the department code if the format is correct. If the ID format is incorrect, the function should return \\"Invalid ID\\". Input The input is a single string `empID` which represents an Employee ID. Output The output should be either the department code (two digits) if the ID format is correct, or \\"Invalid ID\\" if the format is incorrect. Examples Input `ABC-12-3456` Output `12` Input `abc-34-5678` Output `Invalid ID` Input `XYZ-56-789` Output `Invalid ID` Input `DEF-07-0123` Output `07` Note In the first example, the Employee ID `ABC-12-3456` follows the correct format. Thus, the department code `12` is returned. In the second example, the Employee ID `abc-34-5678` does not follow the format because `XXX` must be uppercase. Therefore, the output is \\"Invalid ID\\". In the third example, the Employee ID `XYZ-56-789` does not follow the format because `NNNN` must be a sequence of exactly four digits. Thus the output is \\"Invalid ID\\". In the fourth example, the Employee ID `DEF-07-0123` follows the correct format, so the department code `07` is returned.","solution":"import re def validate_employee_id(empID): Validates the given Employee ID based on the specified format and extracts the department code. Returns the department code if the format is correct, or \\"Invalid ID\\" if the format is incorrect. # Regular expression pattern for the Employee ID pattern = r\'^[A-Z]{3}-(d{2})-d{4}\' match = re.match(pattern, empID) if match: # Return the department code from the matched pattern group return match.group(1) else: return \\"Invalid ID\\""},{"question":"A gaming company has developed a new video game for which players can collect various items during their adventure. Each item can either increase the player\'s health, attack power, or defense capabilities. The game records the sequence of items collected by the player and computes the total increase in each attribute. Your task is to help in analyzing a player\'s collected items and computing the total enhancements provided by them. To compute the total enhancements: - Read the sequence of items collected by the player. - Each item is denoted by a single character (\'H\' for health, \'A\' for attack power, and \'D\' for defense). - Each item can have a value `v` which denotes how much it increases the respective attribute. The attributes are defined as follows: - Health items (`H`) increase the player\'s health. - Attack items (`A`) increase the player\'s attack power. - Defense items (`D`) increase the player\'s defense capabilities. Your task is to write a program that calculates the total health, attack power, and defense increase for the player based on their collection of items. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of items collected by the player. - The next `n` lines each contain a character c (`c` can be \'H\', \'A\', or \'D\') followed by an integer value `v` (1 ≤ v ≤ 100). # Output - Print three integers separated by space: the total increase in health, attack power, and defense respectively. # Example Input ``` 5 H 20 A 15 D 10 H 30 A 25 ``` Output ``` 50 40 10 ``` # Explanation In the given sample: - The player collects two health items with values 20 and 30, resulting in a total health increase of 20 + 30 = 50. - The player collects two attack items with values 15 and 25, resulting in a total attack increase of 15 + 25 = 40. - The player collects one defense item with value 10, resulting in a total defense increase of 10.","solution":"def compute_total_enhancements(n, items): Computes the total enhancements in health, attack power, and defense based on collected items. Arguments: n -- an integer representing the number of items collected items -- a list of tuples, each containing a character (\'H\', \'A\', \'D\') and an integer value Returns: A tuple of three integers representing the total health, attack power, and defense increases total_health = 0 total_attack = 0 total_defense = 0 for item in items: c, v = item if c == \'H\': total_health += v elif c == \'A\': total_attack += v elif c == \'D\': total_defense += v return total_health, total_attack, total_defense # Example usage: # n = 5 # items = [(\'H\', 20), (\'A\', 15), (\'D\', 10), (\'H\', 30), (\'A\', 25)] # print(compute_total_enhancements(n, items))"},{"question":"You are a tournament organizer preparing for a competitive coding contest with M participants. Each participant must solve a series of coding problems, and their scores are recorded after each problem. At the end of the contest, the final scores of all participants are tallied and ranked. If two participants have the same score, they are assigned the same rank, but keep subsequent ranks empty. For example, if two participants are tied for 2nd place, the next participant would be ranked 4th. Your task is to write a program that takes the scores of all M participants in the tournament and determines the rank of a specific participant identified by their participant ID. The rank of a participant is determined by sorting the scores in descending order. # Input The input consists of multiple datasets. Each dataset is represented in the following format: > M P id1 score1 ... idM scoreM id_to_check The first line of the dataset contains two integers M and P (1 ≤ M ≤ 1000, 1 ≤ P ≤ 1000), where M is the number of participants, and P is the number of problems solved in the tournament. The following M lines contain the participant ID and their total score (integer) after solving P problems. The last integer in each dataset is id_to_check, the participant ID whose rank needs to be determined. Participant IDs are unique and range from 1 to 1000, and scores are non-negative integers. The end of the input is represented by a line of a single zero. # Output For each dataset, output the rank of the participant with the ID id_to_check in a single line. If there are ties, handle the rank assignments as described above. # Sample Input ``` 3 5 1 90 2 95 3 90 1 4 2 1 180 2 100 3 180 4 200 2 0 ``` # Sample Output ``` 2 4 ``` Explanation: - In the first dataset, the participant with IDs and scores are [1: 90, 2: 95, 3: 90]. The rank of participant 1 is 2, as participant 2 has the highest score, and participants 1 and 3 are tied with the next highest score, thus both get rank 2. - In the second dataset, the participants have scores [1: 180, 2: 100, 3: 180, 4: 200]. The rank of participant 2 is 4. Participant 4 has the highest score, while participants 1 and 3 come next and tie for 2nd rank, making the 4th participant’s rank 4.","solution":"def find_rank(M, P, scores, id_to_check): Finds the rank of the participant with the specified ID based on their scores. Args: M (int): Number of participants. P (int): Number of problems solved in the tournament (not used in this function). scores (list of tuples): A list of tuples where each tuple contains (id, score). id_to_check (int): The participant ID whose rank needs to be determined. Returns: int: The rank of the participant with the given ID to check. # Sort scores in descending order based on the score ranked_scores = sorted(scores, key=lambda x: x[1], reverse=True) rank = 1 current_score = ranked_scores[0][1] id_to_rank = {} for i, (pid, score) in enumerate(ranked_scores): if score < current_score: rank = i + 1 current_score = score id_to_rank[pid] = rank return id_to_rank[id_to_check] def process_input(input_data): Processes the input data for multiple datasets to find ranks of the specified participant IDs. Args: input_data (list of str): List of input lines as strings. Returns: list of int: List of ranks for each dataset. ranks = [] idx = 0 while idx < len(input_data): line = input_data[idx].strip() if line == \'0\': break M, P = map(int, line.split()) idx += 1 scores = [] for _ in range(M): parts = input_data[idx].strip().split() pid = int(parts[0]) score = int(parts[1]) scores.append((pid, score)) idx += 1 id_to_check = int(input_data[idx].strip()) idx += 1 rank = find_rank(M, P, scores, id_to_check) ranks.append(rank) return ranks"},{"question":"In a certain country, there\'s a strict regulation regarding telephone numbers. Each valid telephone number must contain exactly 10 digits, and the first digit must always be either 7, 8, or 9. Given several strings, you need to determine if each string represents a valid telephone number according to the country\'s rules. Here\'s your task: Write a function that takes a list of strings and checks if each string is a valid telephone number based on the rules mentioned above. The function should return a list of \\"YES\\" or \\"NO\\" corresponding to each input string. # Input - The first input line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of strings. - The following `n` lines each contain a single string consisting of digits and lowercase English letters. Each string\'s length will not exceed 15. # Output - Print `n` lines, each containing either \\"YES\\" or \\"NO\\" based on whether the respective string is a valid telephone number. # Examples Input: ``` 5 9876543210 1234567890abc 987874ab8765 78abc65432123 9999999999 ``` Output: ``` YES NO NO NO YES ``` # Explanation - The first string \\"9876543210\\" is valid since it has exactly 10 digits and starts with 9. - The second string \\"1234567890abc\\" is invalid because it contains letters. - The third string \\"987874ab8765\\" is invalid because although it starts correctly with 9, it contains letters and exceeds 10 characters. - The fourth string \\"78abc65432123\\" is invalid due to letters and additional characters. - The fifth string \\"9999999999\\" is valid with exactly 10 digits starting with 9.","solution":"def validate_telephone_numbers(n, strings): def is_valid_telephone_number(s): if len(s) == 10 and s[0] in \'789\' and s.isdigit(): return True return False result = [] for s in strings: if is_valid_telephone_number(s): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"You are given an array of n integers. You need to divide this array into three contiguous subarrays in such a way that the maximum sum of the three subarrays is minimized. Each subarray should contain at least one element. Find the minimum possible value of the maximum sum of these three subarrays. # Input The first line contains an integer n (3 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of the array. # Output Output a single integer — the minimum possible value of the maximum sum of the three subarrays. # Example Input ``` 6 1 2 3 4 5 6 ``` Output ``` 9 ``` # Explanation In the example, the array can be divided as follows: - [1, 2, 3] with sum = 6 - [4, 5] with sum = 9 - [6] with sum = 6 The sums of the three subarrays are 6, 9, and 6. The maximum of these sums is 9, and it is not possible to get a smaller value for the maximum sum by dividing the array differently into three contiguous subarrays.","solution":"def min_max_sum_of_three_subarrays(arr): This function finds the minimum possible value of the maximum sum of three contiguous subarrays. Parameters: arr (list): A list of integers representing the input array Returns: int: The minimum possible value of the maximum sum of the three subarrays n = len(arr) # Calculate prefix sums prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] # Initialize the maximum sum of three subarrays min_max_sum = float(\'inf\') # Iterate over possible positions to split the array into three parts for i in range(1, n - 1): for j in range(i + 1, n): sum1 = prefix_sum[i] - prefix_sum[0] sum2 = prefix_sum[j] - prefix_sum[i] sum3 = prefix_sum[n] - prefix_sum[j] max_sum = max(sum1, sum2, sum3) min_max_sum = min(min_max_sum, max_sum) return min_max_sum # Example input # print(min_max_sum_of_three_subarrays([1, 2, 3, 4, 5, 6])) # Expected output: 9"},{"question":"Given a binary tree, return the vertical order traversal of its nodes\' values. (i.e., from top to bottom, column by column). If two nodes are in the same row and column, the order should be from left to right. Example 1: Input: root = [3,9,20,None,None,15,7] 3 / 9 20 / 15 7 Output: [ [9], [3, 15], [20], [7] ] Explanation: Column -1: [9] Column 0: [3, 15] Column 1: [20] Column 2: [7] Example 2: Input: root = [1,2,3,4,5,6,7] 1 / 2 3 / / 4 5 6 7 Output: [ [4], [2], [1, 5, 6], [3], [7] ] Explanation: Column -2: [4] Column -1: [2] Column 0: [1, 5, 6] Column 1: [3] Column 2: [7] Your Task: You are required to complete the function verticalTraversal() which takes the root of the binary tree as an argument and returns a list of lists containing the vertical order traversal of the tree. Expected Time Complexity: O(nlogn) where n is the number of nodes. Expected Auxiliary Space: O(n) Constraints: 1 ≤ Number of nodes ≤ 1000 0 ≤ Node values ≤ 10^5","solution":"from collections import defaultdict, deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def verticalTraversal(root): Returns the vertical order traversal of binary tree nodes. :param TreeNode root: Root of the binary tree. :return List[List[int]]: Vertical order traversal from left to right. if not root: return [] col_table = defaultdict(list) queue = deque([(root, 0, 0)]) # (node, col, row) while queue: node, col, row = queue.popleft() if node is not None: col_table[col].append((row, node.val)) queue.append((node.left, col - 1, row + 1)) queue.append((node.right, col + 1, row + 1)) # Sort by column, then by row, then value sorted_col_table = sorted(col_table.items()) result = [] for col, col_values in sorted_col_table: col_values.sort() # Sort by row first, then value result.append([val for row, val in col_values]) return result"},{"question":"Mia is working on a shopping recommendation system for an online store. The store has **n** different items and each item belongs to exactly one of **m** distinct categories. Mia wants to find out which items are the most popular in each category. She has a popularity score for each item, and she wants to recommend the most popular item from each category. If there are multiple items with the same highest popularity score in a category, Mia will recommend all such items. Write a function to help Mia generate the recommendation list. Input The first line contains two integers **n** (1 ≤ n ≤ 1000) and **m** (1 ≤ m ≤ 100) — the number of items and the number of categories, respectively. The second line contains **n** integers **p_1, p_2, ..., p_n** (0 ≤ p_i ≤ 10^6), where **p_i** is the popularity score of the i-th item. The third line contains **n** integers **c_1, c_2, ..., c_n** (1 ≤ c_i ≤ m), where **c_i** is the category of the i-th item. Output Output **m** lines. For each category, output all the items that have the highest popularity score in that category. The recommended items should be listed in the order of their appearance in the input. If a category has no items, output an empty line for that category. Examples Input ``` 5 3 10 20 20 30 10 1 2 2 3 1 ``` Output ``` 1 5 2 3 4 ``` Input ``` 4 2 5 5 5 5 1 2 1 2 ``` Output ``` 1 3 2 4 ``` Note In the first example, category 1 contains items 1 and 5 with scores 10 and 10, respectively. Category 2 contains items 2 and 3, both with score 20. Category 3 contains item 4 with score 30. In the second example, both categories 1 and 2 have items with the same highest popularity score, so all such items are recommended. Your task is to implement the function that determines the most popular items for each category for Mia.","solution":"def recommend_items(n, m, scores, categories): # Dictionary to keep track of the most popular items per category most_popular = {i: [] for i in range(1, m + 1)} highest_scores = {i: -1 for i in range(1, m + 1)} for index in range(n): score = scores[index] category = categories[index] if score > highest_scores[category]: highest_scores[category] = score most_popular[category] = [index + 1] elif score == highest_scores[category]: most_popular[category].append(index + 1) # Convert result into list of lists result = [most_popular[cat] for cat in range(1, m + 1)] return result"},{"question":"Alice is planning her journey from city A to city B and decides to use teleportation portals to minimize her travel time. Each portal connects two cities and has a specific travel cost in terms of time. Alice wants to find the cheapest travel cost from city A to city B. However, some portals might make the travel impossible due to high costs. Given the number of cities N and a list of M portals, determine the minimum travel time required for Alice to travel from city A to city B. If there is no such path, return -1. ------ Input: ------ The first line contains an integer T, the number of test cases. Each test case starts with a line containing three integers N, M, and K, where K is the number of queries in each test case. The next M lines describe the portals with three integers u, v, and w, meaning a portal goes from city u to city v with a travel cost w (both directions have the same cost). Following this, K queries are given, each containing two integers A and B, representing the start and destination cities, respectively. ------ Output: ------ For each query, print the minimum travel time required to travel from city A to city B. If no such path exists, print -1. ------ Constraints ------ 1 ≤ T ≤ 50 2 ≤ N ≤ 300 1 ≤ M ≤ 10,000 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^4 1 ≤ K ≤ 200 ------ Sample Input ------ 2 5 6 2 1 2 10 1 3 20 2 3 30 3 4 5 4 5 2 3 5 15 1 5 2 4 4 4 1 1 2 1 2 3 1 3 4 1 4 1 1 1 3 ------ Sample Output ------ 15 40 2 ------ Explanation ------ Test Case 1: - For query (1, 5): The path 1 -> 2 -> 3 -> 4 -> 5 gives the travel cost 10 + 30 + 5 + 2 = 47, which is not optimal. The optimal path is 1 -> 2 -> 3 -> 5 with cost 10 + 30 + 15 = 55. - For query (2, 4): The best path is 2 -> 3 -> 4 with cost 30 + 10 = 40. Test Case 2: - For query (1, 3): The only path is 1 -> 2 -> 3 with cost 1 + 1 = 2.","solution":"import heapq import sys from collections import defaultdict def find_min_travel_time(N, portals, queries): def dijkstra(graph, start, end): # Min-heap to get the city with the least travel time heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, N+1)} distances[start] = 0 while heap: current_distance, current_city = heapq.heappop(heap) if current_city == end: return current_distance for neighbor, weight in graph[current_city]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return -1 # Build the graph graph = defaultdict(list) for u, v, w in portals: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for A, B in queries: results.append(dijkstra(graph, A, B)) return results def solve_teleportation_queries(T, configurations): results = [] for i in range(T): N, M, K, portals, queries = configurations[i] results.extend(find_min_travel_time(N, portals, queries)) return results"},{"question":"You are given a sequence storage system where elements are stored in balanced binary search trees (BSTs). You are tasked to design a function that can merge two BSTs into a single BST while preserving their properties. The merge function needs to meet the following requirements: 1. The resulting tree must be balanced. 2. The resulting tree must be a valid binary search tree with all the nodes sorted. -----Input----- Each test contains one or more test cases. The first line contains the number of test cases t (1 le t le 50). Each test case contains: - Two integers n and m (0 le n, m le 1000) — the number of elements in the first and second BSTs, respectively. - A list of n integers containing all the elements of the first BST, each integer between 1 and 10^6 inclusive. All integers are given in strictly increasing order, which ensures that this list represents an in-order traversal of a BST. - A list of m integers containing all the elements of the second BST, each integer between 1 and 10^6 inclusive. All integers are given in strictly increasing order, which ensures that this list represents an in-order traversal of a BST. -----Output----- For each test case, output a single line containing n+m integers — the in-order traversal representation of the merged BST. -----Example----- Input: 2 3 3 1 3 5 2 4 6 4 2 10 20 30 40 5 25 Output: 1 2 3 4 5 6 5 10 20 25 30 40 -----Note----- In the first example, merging two BSTs [1, 3, 5] and [2, 4, 6] results in a single sorted BST with an in-order traversal of [1, 2, 3, 4, 5, 6]. In the second example, merging two BSTs [10, 20, 30, 40] and [5, 25] results in a single sorted BST with an in-order traversal of [5, 10, 20, 25, 30, 40].","solution":"def merge_BSTs(bst1, bst2): Merges two BSTs represented as in-order traversal lists into a single sorted list. Args: bst1 (list): In-order traversal of the first BST. bst2 (list): In-order traversal of the second BST. Returns: list: In-order traversal of the merged BST. # Use two pointers to merge the two sorted lists into one sorted list merged = [] i, j = 0, 0 while i < len(bst1) and j < len(bst2): if bst1[i] < bst2[j]: merged.append(bst1[i]) i += 1 else: merged.append(bst2[j]) j += 1 # Append remaining elements, if any while i < len(bst1): merged.append(bst1[i]) i += 1 while j < len(bst2): merged.append(bst2[j]) j += 1 return merged"},{"question":"Your friend has an array of integers `arr` of length `n`. He wants to know the length of the longest subsequence such that the difference between consecutive elements is exactly `k`. For example, if `k = 2`, in the array `[1, 3, 5, 7, 9]`, the longest subsequence is `[1, 3, 5, 7, 9]` with length 5. You are asked to help your friend by writing a function that returns the length of the longest such subsequence. -----Input----- The first input line contains two integers `n` and `k` (1 leq n leq 10^5, 1 leq k leq 100) — the length of the array and the given difference. The second line contains `n` integers arr_i (1 leq arr_i leq 10^9) — the elements of the array. -----Output----- Output one integer — the length of the longest subsequence such that the difference between consecutive elements is exactly `k`. -----Examples----- Input 5 2 1 3 5 7 9 Output 5 Input 6 1 10 11 12 13 14 15 Output 6 Input 4 3 3 6 9 1 Output 3 -----Note----- In the first example, the subsequence `[1, 3, 5, 7, 9]` has consecutive differences of `2`, and its length is 5. In the second example, the subsequence `[10, 11, 12, 13, 14, 15]` has consecutive differences of `1`, and its length is 6. In the third example, the subsequence `[3, 6, 9]` has consecutive differences of `3`, and its length is 3.","solution":"def longest_subsequence_with_difference_k(n, k, arr): Returns the length of the longest subsequence such that the difference between consecutive elements is exactly k. dp = {} max_length = 0 for num in arr: if num - k in dp: dp[num] = dp[num - k] + 1 else: dp[num] = 1 max_length = max(max_length, dp[num]) return max_length"},{"question":"**Problem Statement:** In a forest, a monkey starts at the bottom-left corner of a m times n grid (i.e., grid[0][0]) and wants to reach the top-right corner (i.e., grid[m-1][n-1]). The forest is represented as a 2D grid where some of the cells contain bananas (represented by a `1`), and others are empty (represented by a `0`). The monkey can only move either up or right one cell at a time. Write a function that returns the maximum number of bananas the monkey can collect when moving from the bottom-left corner to the top-right corner of the grid. If the monkey reaches a cell containing bananas, they are collected, and the cell becomes empty for subsequent moves. **Function Signature:** ```python def maxBananas(grid: List[List[int]]) -> int: ``` **Input:** - `grid`: a list of lists of integers representing the forest grid. Each integer is either `0` or `1`. **Output:** - an integer representing the maximum number of bananas the monkey can collect. **Example:** Input: ```python grid = [ [0, 1, 0], [1, 0, 1], [0, 1, 0] ] ``` Output: ```python 2 ``` Explanation: One of the optimal paths is `(0, 0) -> (1, 0) -> (1, 1) -> (2, 1) -> (2, 2)`, collecting a total of 2 bananas. **Constraints:** - 1 leq m, n leq 100 - Either m neq 1 or n neq 1 - Grid cells contain either 0 or 1 only **Additional Notes:** - The solution must employ a dynamic programming approach to maintain optimal substructure and overlapping subproblems. - If there are multiple paths yielding the same number of bananas, any one of them can be considered correct.","solution":"def maxBananas(grid): Returns the maximum number of bananas the monkey can collect when moving from the bottom-left corner to the top-right corner of the grid. m, n = len(grid), len(grid[0]) # Create a DP table with the same dimensions as the grid dp = [[0] * n for _ in range(m)] # Initialize the bottom-left corner dp[0][0] = grid[0][0] # Fill the first row (only can move from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (only can move from below) for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the grid for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer is in the bottom-right corner return dp[-1][-1]"},{"question":"Write a function to determine whether a given string has all unique characters. Your task is to implement this function without using any additional data structures. Input: - The function takes a single string as input. Output: - Return `True` if the string has all unique characters; otherwise, return `False`. Constraints: - The input string can contain any character (letters, digits, punctuation, etc.). - The length of the string does not exceed 1000 characters. Example Input: ``` abcde aabbcc a1b2c3!@# ``` Example Output: ``` True False True ``` Note: Do not use any additional data structures such as arrays, lists, or dictionaries to solve this problem.","solution":"def has_all_unique_characters(s): Determines if a string has all unique characters without using additional data structures. :param s: A string :return: True if the string has all unique characters, False otherwise for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True"},{"question":"Jason\'s company is conducting a security audit of their password storage system. One of the tasks involves determining the strength of stored passwords. A password is considered strong if it meets the following conditions: 1. It has at least 8 characters. 2. It contains at least one uppercase letter. 3. It contains at least one lowercase letter. 4. It contains at least one digit. 5. It contains at least one special character from this set: `!@#%^&*()-+` Given a list of passwords, help Jason by writing a function to determine if each password is strong according to the above criteria. -----Input----- The first line contains a single integer N (1 leq N leq 50) — number of passwords. The next N lines contain a password on each line. Each password is a string of length between 1 and 100 inclusive, consisting of printable ASCII characters. -----Output----- For each password, output \\"YES\\" if the password is strong, otherwise output \\"NO\\". -----Examples----- Input 5 Password1! abcd1234 A!c1 StrongPass1 NoSpecialChar1 Output YES NO NO YES NO -----Note----- In the first example, \\"Password1!\\" contains at least 8 characters, one uppercase letter (\'P\'), one lowercase letter (\'a\'), one digit (\'1\'), and one special character (\'!\'), so the output is \\"YES\\". In the second example, \\"abcd1234\\" does not contain any uppercase letter or special character, so the output is \\"NO\\". In the third example, \\"A!c1\\" does not have at least 8 characters, so the output is \\"NO\\". In the fourth example, \\"StrongPass1\\" meets all the criteria, so the output is \\"YES\\". In the fifth example, \\"NoSpecialChar1\\" does not contain any special character, so the output is \\"NO\\".","solution":"def is_strong_password(password): Check if the password is strong based on provided criteria. if len(password) < 8: return \\"NO\\" has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \\"!@#%^&*()-+\\" for c in password) if has_upper and has_lower and has_digit and has_special: return \\"YES\\" else: return \\"NO\\" def check_passwords(passwords): return [is_strong_password(password) for password in passwords]"},{"question":"You are given a string s consisting of n lowercase Latin letters. You are allowed to remove exactly one character from the string. Your task is to check whether you can rearrange the remaining string, such that no two adjacent characters are the same. -----Input----- The first line contains an integer t (1le tle 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (2le nle 10^5) — the length of the string s. The second line of each test case contains a string s consisting of n lowercase Latin letters. It is guaranteed that the sum of n over all test cases doesn\'t exceed 10^5. -----Output----- For each test case, output \\"YES\\" if you can rearrange the remaining string after removing exactly one character such that no two adjacent characters are the same; otherwise, output \\"NO\\". -----Examples----- Input 5 5 ababa 6 aabbcc 3 aaa 4 abca 7 aaaaaaa Output YES YES NO YES NO -----Note----- In the first test case, you can remove any \'a\' or \'b\' to make the string \'abab\' or \'baba\', both of which can be rearranged such that no two adjacent characters are the same. In the second test case, you can remove one \'a\', one \'b\', or one \'c\' to make the string \'abbcc\', \'aabcc\', or \'aabbc\', respectively. All of these can be rearranged to meet the condition. In the third test case, no matter which \'a\' is removed, the resulting string will be \'aa\', which cannot be rearranged to have no two adjacent characters the same. In the fourth test case, you can remove either \'a\' or \'b\' or \'c\' and arrange the remaining characters such that no two adjacent characters are the same. In the fifth test case, no matter which \'a\' is removed, the resulting string will have adjacent \'a\'s at some position.","solution":"def can_rearrange_after_removal(t, cases): results = [] for i in range(t): n, s = cases[i] max_freq = max(s.count(c) for c in set(s)) if max_freq <= (n + 1) // 2: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Lara is working on a new interesting problem. You are given an array B of M positive integers. You are allowed to perform the following operation any number of times (possibly zero times): Choose an index i (1 ≤ i ≤ M) and set B_i := B_i - 1. However, the operation can only be applied if the number at index i is greater than 1. Your goal is to make all the elements in the array B equal using the above operation. ------- Input Format ------- - The first line will contain Q, the number of test cases. - The first line of each test case contains M, the number of elements in the array B. - The second line of each test case contains M space-separated positive integers, which are the elements of the array. ------- Output Format ------- For each test case, output in a single line YES if it is possible to make all the elements in the array equal using the allowed operations. Otherwise, print NO. You may print each character of the string in uppercase or lowercase (for example, the strings YeS, yEs, yes and YES will all be treated as identical). -------- Constraints -------- 1 ≤ Q ≤ 10^{3} 2 ≤ M ≤ 2cdot 10^{5} 1 ≤ B[i] ≤ 10^{9} The sum of M over all test cases does not exceed 2cdot 10^5. ------ Sample Input 1 ------- 3 3 3 3 3 5 2 4 6 8 10 4 5 1 5 1 ------- Sample Output 1 ------- YES NO NO ------ Explanation -------- Test case 1: The array [3, 3, 3] already has all elements equal. Test case 2: We cannot make the elements equal since they are all even and have different values. Test case 3: The array contains the number 1 which cannot be reduced further, hence it\'s not possible to make all elements equal.","solution":"def can_make_all_elements_equal(Q, test_cases): results = [] for i in range(Q): M, B = test_cases[i] count_ones = B.count(1) # Check if there is any element that is 1 if count_ones > 0: results.append(\\"NO\\") continue min_element = min(B) # Check if all elements are equal to the minimum element if all(b == min_element for b in B): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a country called Lampadia, a river runs through multiple cities. A bridge needs to be built to connect one side of the river to the other. Each city contains a grid layout with certain cells marked where construction is permissible, and others where it is not (e.g., water bodies or protected areas). The task is to determine the minimum number of bridges that need to be built to connect the leftmost side of the city to the rightmost side. You are given a 2D array representation of the map of the city. Cells marked `1` indicate water bodies that cannot be built upon, while cells marked `0` indicate land that can be used for construction. You need to find the minimum number of bridges required to connect the leftmost column to the rightmost column of the city. Bridges can be built between horizontally, vertically, or diagonally adjacent land cells. Function Description Complete the function `min_bridges` below. `min_bridges` has the following parameter(s): - `int[][] city_map`: a 2D array where `city_map[i][j]` is either `0` (land) or `1` (water). Returns - `int`: the minimum number of bridges required to connect the leftmost column to the rightmost column, or `-1` if it is not possible. Input Format The first line contains two space-separated integers `m` and `n`, the number of rows and columns of the city map. Each of the next `m` lines contains `n` space-separated integers `0` or `1`. Constraints - 1 ≤ `m`, `n` ≤ 1000 - Each `city_map[i][j]` is either `0` or `1`. Output Format Print a single integer denoting the minimum number of bridges required to connect the leftmost side to the rightmost side of the city. If it is not possible, print `-1`. Sample Input ``` 4 5 0 1 0 0 0 0 1 1 1 0 0 0 0 1 0 1 1 0 0 0 ``` Sample Output `1` Explanation In the sample input, the city map is: ``` 0 1 0 0 0 0 1 1 1 0 0 0 0 1 0 1 1 0 0 0 ``` A possible way to connect the leftmost side to the rightmost side with the minimum number of bridges can be visualized as follows (0 represents land and X represents an existing/constructed bridge): ``` 0 1 0 0 0 0 X X X 0 0 0 0 X 0 1 1 0 0 0 ``` Thus, the minimum number of bridges needed is `1`.","solution":"from collections import deque def min_bridges(city_map): Returns the minimum number of bridges required to connect the leftmost side of the city to the rightmost side of the city, or -1 if it is not possible. m, n = len(city_map), len(city_map[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (-1, -1), (-1, 1), (1, -1)] def bfs(): queue = deque() visited = [[False] * n for _ in range(m)] # Enqueue the starting points in the leftmost column where construction is permissible for i in range(m): if city_map[i][0] == 0: queue.append((i, 0, 0)) # (row, col, count of bridges) visited[i][0] = True while queue: x, y, bridges = queue.popleft() # If we reach any cell in the rightmost column, return the number of bridges if y == n - 1: return bridges for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: visited[nx][ny] = True if city_map[nx][ny] == 0: # If it\'s land, no additional bridge needed queue.append((nx, ny, bridges)) elif city_map[nx][ny] == 1: # If it\'s water, we need a bridge queue.append((nx, ny, bridges + 1)) return -1 return bfs()"},{"question":"There are N gas stations along a circular route, where the amount of gas at the i-th station is gas[i]. You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the i-th station to its next (i+1)-th station. You begin the journey with an empty tank at one of the gas stations. Return the starting gas station\'s index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique. Example 1: Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2] Output: 3 Explanation: Start at station 3 (index 3) and fill up with 4 units of gas. Your tank = 0 + 4 = 4 Travel to station 4. Your tank = 4 - 1 + 5 = 8 Travel to station 0. Your tank = 8 - 2 + 1 = 7 Travel to station 1. Your tank = 7 - 3 + 2 = 6 Travel to station 2. Your tank = 6 - 4 + 3 = 5 Travel back to station 3. Your tank = 5 - 5 + 4 = 4 As 4 is greater than 0, you can complete the circuit and the answer is 3. Example 2: Input: gas = [2,3,4], cost = [3,4,3] Output: -1 Explanation: You can\'t start at station 0 or 1 or 2 and complete the circuit. Constraints: 1 <= gas.length <= 10^4 0 <= gas[i], cost[i] <= 10^4 Your Task: You don\'t need to read input or print anything. Your task is to complete the function canCompleteCircuit() which takes two lists gas and cost as input parameters and returns the starting gas station\'s index or -1. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1)","solution":"def canCompleteCircuit(gas, cost): Returns the starting gas station\'s index if it is possible to travel around the circuit once. Otherwise, returns -1. total_tank, curr_tank = 0, 0 starting_station = 0 for i in range(len(gas)): total_tank += gas[i] - cost[i] curr_tank += gas[i] - cost[i] # If curr_tank drops below zero, we cannot start from this station or any stations before it if curr_tank < 0: starting_station = i + 1 curr_tank = 0 return starting_station if total_tank >= 0 else -1"},{"question":"You are given a rectangular matrix with M rows and N columns, where each cell contains a positive integer. You need to find all the local maxima in the matrix. A cell is considered a local maximum if it is greater than or equal to all of its 8 neighbors. Neighboring cells are those that share a common border or common corner. Your task is to output the number of local maxima in the matrix along with their coordinates. Input Format The first line contains two integers, M and N, representing the number of rows and columns in the matrix, respectively. The next M lines each contain N integers, representing the elements of the matrix. Output Format The first line contains a single integer representing the number of local maxima. The next lines contain the coordinates of each local maximum in the format (row_index, col_index), sorted by row index and then by column index. Constraints 1 ≤ M, N ≤ 100 1 ≤ Matrix[i][j] ≤ 10000 SAMPLE INPUT 3 3 1 2 1 2 3 2 1 2 1 SAMPLE OUTPUT 1 (1, 1) Note: In the sample input, the matrix has one local maximum at the coordinates (1, 1) with value 3.","solution":"def find_local_maxima(matrix): M = len(matrix) N = len(matrix[0]) def is_local_maximum(i, j): current_value = matrix[i][j] for di in [-1, 0, 1]: for dj in [-1, 0, 1]: if di == 0 and dj == 0: continue ni, nj = i + di, j + dj if 0 <= ni < M and 0 <= nj < N and matrix[ni][nj] > current_value: return False return True local_maxima = [] for i in range(M): for j in range(N): if is_local_maximum(i, j): local_maxima.append((i, j)) return local_maxima def main(): import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) matrix = [] index = 2 for i in range(M): row = [] for j in range(N): row.append(int(data[index])) index += 1 matrix.append(row) local_maxima = find_local_maxima(matrix) print(len(local_maxima)) for (i, j) in sorted(local_maxima): print(f\\"({i}, {j})\\") if __name__ == \\"__main__\\": main()"},{"question":"In a faraway land, there is a peculiar town with houses standing in a straight line. The town has exactly N houses, and each house (potentially) has a teleporter device. A teleporter can be either functional or broken. The teleporter in the i-th house can directly take a person to the (i + A_i)-th house or the (i - A_i)-th house, where A_i is a given integer denoting the power of the teleporter. Note that houses are 1-indexed, and teleporters cannot transport a person to a house with an index out of range [1, N]. You are also given an array T of size N, where T_i is 1 if the teleporter in the i-th house is functional, and 0 if it is broken. Given the current position of a person starting from house X, you need to determine if it is possible for the person to reach house Y using the functional teleporters only. ------ Input ------ The first line of the input contains a single integer T (number of test cases). The description of T test cases follows. The first line of each test case contains an integer N (number of houses). The second line contains N integers, the array A. The third line contains N integers, the array T. The fourth line contains two integers X and Y, denoting the starting and ending house respectively. ------ Output ------ For each test case, print \\"YES\\" if it is possible to reach house Y from house X; otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ A_i ≤ N T_i ∈ {0, 1} 1 ≤ X, Y ≤ N ------ Sample Input 1 ------ 2 5 2 3 1 2 2 1 1 1 0 1 1 5 4 1 2 3 1 1 0 1 1 1 3 ------ Sample Output 1 ------ YES NO ------ Explanation ------ For the first test case, the person can travel from house 1 to house 3 using the teleporter in house 1, and then from house 3 to house 5 using the teleporter in house 3. For the second test case, it is impossible to reach house 3 from house 1 because there\'s no functional teleporters that can make that possible.","solution":"def can_reach(N, A, T, X, Y): Determines if it\'s possible to reach house Y from house X using only functional teleporters. from collections import deque # Convert X and Y to 0-indexed for easier manipulation X -= 1 Y -= 1 # BFS initialization queue = deque([X]) visited = set([X]) while queue: current = queue.popleft() if current == Y: return \\"YES\\" # Generate next possible positions based on the current teleporters next_positions = [current + A[current], current - A[current]] for pos in next_positions: if 0 <= pos < N and T[pos] == 1 and pos not in visited: visited.add(pos) queue.append(pos) return \\"NO\\""},{"question":"You are given an array of integers and a series of Q queries. Each query asks you to find the minimum integer in a specified subarray of the original array. -----Constraints----- - 1leq N,Q leq 2 times 10^5 - -10^9 leq a_i leq 10^9 - 1leq l_i leq r_i leq N - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N Q a_1 a_2 cdots a_N l_1 r_1 l_2 r_2 : l_Q r_Q -----Output----- Print Q lines. The i-th line should contain the response to the i-th query. -----Sample Input----- 5 3 4 2 5 3 1 1 3 2 5 3 3 -----Sample Output----- 2 1 5 - The subarray from 1-st to 3-rd element is [4, 2, 5], the minimum value is 2. - The subarray from 2-nd to 5-th element is [2, 5, 3, 1], the minimum value is 1. - The subarray from 3-rd to 3-rd element is [5], the minimum value is 5.","solution":"def find_minimum_in_subarray(arr, queries): Returns the minimum value in each specified subarray. Parameters: arr (list of int): The original array of integers. queries (list of tuple): A list of tuples, where each tuple contains two integers (l, r). Returns: list of int: The minimum value in each specified subarray. results = [] for (l, r) in queries: subarray = arr[l-1:r] results.append(min(subarray)) return results"},{"question":"Given an integer array `arr` of length `n` and an integer `k`, write a function to find the maximum element in every `k`-size subarray in a given array. The subarray shifts one position to the right at each iteration, creating new subarrays, and you need to return the list of the maximums for these subarrays. Your function should implement the following method signature: ```python def max_of_subarrays(arr: List[int], k: int) -> List[int]: ``` # Constraints * 1 leq n leq 10^6 * 1 leq arr[i] leq 10^9 * 1 leq k leq n # Input Format The input is given in the following format: * The first line contains an integer `n`, the length of the array. * The second line contains `n` space-separated integers, the elements of the array. * The third line contains an integer `k`, the size of the subarray. # Output Format Output a space-separated list containing the maximum element of each `k`-size subarray from left to right. # Example Input ``` 8 1 3 1 2 0 5 8 6 3 ``` Output ``` 3 3 2 5 8 8 ``` # Explanation Consider the input array `[1, 3, 1, 2, 0, 5, 8, 6]` with `k = 3`. The subarrays of size `k` and their respective maximum values are: 1. Subarray `[1, 3, 1]`, the maximum is `3`. 2. Subarray `[3, 1, 2]`, the maximum is `3`. 3. Subarray `[1, 2, 0]`, the maximum is `2`. 4. Subarray `[2, 0, 5]`, the maximum is `5`. 5. Subarray `[0, 5, 8]`, the maximum is `8`. 6. Subarray `[5, 8, 6]`, the maximum is `8`. Thus, the answer is `3 3 2 5 8 8`.","solution":"from collections import deque from typing import List def max_of_subarrays(arr: List[int], k: int) -> List[int]: Finds the maximum element in every k-size subarray in the given array. n = len(arr) if n * k == 0 or k > n: return [] deq = deque() max_subarrays = [] for i in range(n): # Remove elements outside the current window if deq and deq[0] == i - k: deq.popleft() # Remove elements from the deque that are smaller than the current element while deq and arr[deq[-1]] < arr[i]: deq.pop() # Add current element index to the deque deq.append(i) # Start adding to result list once we\'ve processed k elements if i >= k - 1: max_subarrays.append(arr[deq[0]]) return max_subarrays"},{"question":"problem Sophia loves to collect rare gemstones, and she categorizes them by three main attributes: weight, clarity, and color. She wants to store them in a way that allows her to retrieve all the gemstones that meet certain criteria quickly. Each gemstone is described by the following attributes: - Weight (an integer in grams) - Clarity (a string, one of \\"Flawless\\", \\"VVS1\\", \\"VVS2\\", \\"VS1\\", \\"VS2\\", \\"SI1\\", \\"SI2\\") - Color (an integer between 0 and 10) Your task is to help Sophia by creating a retrieval system that can handle queries to find all gemstones that match specified criteria. # Input The input consists of: 1. An integer N (1 ≤ N ≤ 1000) representing the number of gemstones. 2. N lines that describe each gemstone with the following format: weight clarity color 3. An integer Q (1 ≤ Q ≤ 1000) representing the number of queries. 4. Q lines that describe each query in one of the following formats: - \\"weight x\\" where x is the exact weight to match. - \\"clarity y\\" where y is the exact clarity to match. - \\"color z\\" where z is the exact color to match. # Output For each query, output how many gemstones match the specified criteria. # Example Input: ``` 5 10 VVS1 5 15 VS2 7 8 SI1 2 12 VVS1 4 20 VS1 8 3 weight 10 clarity VVS1 color 7 ``` Output: ``` 1 2 1 ``` # Constraints - All attributes provided in the input are valid according to their descriptions. - The input is guaranteed to be well-formed.","solution":"def retrieve_gemstones(gemstones, queries): Retrieves the gemstones that match certain queries based on weight, clarity, or color. Parameters: gemstones (list of tuples): A list where each tuple contains the weight (int), clarity (str), and color (int) of a gemstone. queries (list of tuples): A list where each tuple contains a query type (\'weight\', \'clarity\', \'color\') and an associated value (int or str). Returns: List[int]: A list where each element is the number of gemstones that match the corresponding query. results = [] for query_type, query_value in queries: if query_type == \\"weight\\": count = sum(1 for gemstone in gemstones if gemstone[0] == query_value) elif query_type == \\"clarity\\": count = sum(1 for gemstone in gemstones if gemstone[1] == query_value) elif query_type == \\"color\\": count = sum(1 for gemstone in gemstones if gemstone[2] == query_value) results.append(count) return results"},{"question":"You are given two arrays a[1 ldots n] = [a_1, a_2, ldots, a_n] and b[1 ldots n] = [b_1, b_2, ldots, b_n]. Your task is to transform array a into array b through a series of operations. In one operation, you can choose any two adjacent elements in a and swap them. Determine the minimum number of swap operations required to transform array a into array b. If it is not possible to transform array a into array b, return -1. -----Input----- The first line contains an integer t (1 leq t leq 1000) — the number of test cases. The next 3t lines contain descriptions of the test cases. The first line of each test case description contains an integer n (1 le n le 2000) — the size of the arrays. The second line of the description contains n space-separated integers a_i (1 le a_i le 10^6), the elements of the array a. The third line of the description contains n space-separated integers b_i (1 le b_i le 10^6), the elements of the array b. -----Output----- Print t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer — the minimum number of swap operations required to transform array a into array b, or -1 if it is not possible. -----Examples----- Input 3 4 1 3 2 4 3 1 2 4 3 2 1 3 1 2 3 4 4 3 2 1 1 2 3 4 Output 1 1 6 -----Note----- In the first test case, you can swap the first two elements of a to get [3, 1, 2, 4], which matches b with one swap. In the second test case, you can swap the first two elements of a to get [1, 2, 3], which matches b with one swap. In the third test case, you need to perform a series of swaps to reverse the array, which requires 6 swaps: [4, 3, 2, 1] rightarrow [3, 4, 2, 1] rightarrow [3, 2, 4, 1] rightarrow [3, 2, 1, 4] rightarrow [2, 3, 1, 4] rightarrow [2, 1, 3, 4] rightarrow [1, 2, 3, 4].","solution":"def min_swaps_to_transform(a, b): from collections import Counter if Counter(a) != Counter(b): return -1 swaps = 0 a = list(a) for i in range(len(a)): for j in range(len(a) - 1, i, -1): if a[j] == b[i]: for k in range(j, i, -1): a[k], a[k - 1] = a[k - 1], a[k] swaps += 1 break return swaps def process_cases(test_cases): results = [] for n, a, b in test_cases: results.append(min_swaps_to_transform(a, b)) return results"},{"question":"Chef has an array A of size N and an integer K. In one operation, Chef can: Select any two elements A_{i} and A_{j} (1 ≤ i, j ≤ N, i ≠ j) and swap them. Chef wonders if it\'s possible to sort the array A in non-decreasing order by performing at most K such operations. Can you help Chef determine if it is possible? ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two integers N and K. - The second line contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}, denoting the elements of the array A. ------ Output Format ------ For each test case, output \\"YES\\" if Chef can sort the array in at most K operations, and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{3} 0 ≤ K ≤ N^{2} 1 ≤ A_{i} ≤ 10^{6} ------ Sample Input 1 ------ 3 3 2 3 1 2 4 1 4 3 2 1 5 10 4 3 2 5 1 ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test case 1: The array can be sorted in 2 operations: - Operation 1: Swap A_{1} and A_{3} → array becomes [2, 1, 3]. - Operation 2: Swap A_{1} and A_{2} → array becomes [1, 2, 3]. Hence, the output is \\"YES\\". Test case 2: It is impossible to sort the array with just 1 operation because at minimum 3 swaps are needed. Hence, the output is \\"NO\\". Test case 3: The array can be sorted within 10 operations. For example, we can do the following swaps: - Operation 1: Swap A_{1} and A_{4} → array becomes [5, 3, 2, 4, 1]. - Operation 2: Swap A_{1} and A_{5} → array becomes [1, 3, 2, 4, 5]. - Operation 3: Swap A_{2} and A_{3} → array becomes [1, 2, 3, 4, 5]. Note that there are multiple ways to achieve this within the allowed operations, hence the output is \\"YES\\".","solution":"def can_sort_with_operations(N, K, A): Determine if the array A can be sorted with at most K swap operations. sorted_A = sorted(A) required_swaps = 0 # A list to keep track of visited elements visited = [False] * N # Traverse each element and use cycle detection to count swaps for i in range(N): if visited[i] or sorted_A[i] == A[i]: continue cycle_length = 0 j = i # Count the length of the cycle while not visited[j]: visited[j] = True j = A.index(sorted_A[j]) cycle_length += 1 # If cycle_length > 1, we need (cycle_length - 1) swaps to sort this cycle if cycle_length > 1: required_swaps += (cycle_length - 1) return \\"YES\\" if required_swaps <= K else \\"NO\\" def chef_can_sort(T, test_cases): For each test case, determine if Chef can sort the array within the given operations. results = [] for i in range(T): N, K = test_cases[i][0] A = test_cases[i][1] results.append(can_sort_with_operations(N, K, A)) return results"},{"question":"In a magical kingdom, there are n mystical creatures. Each creature has a unique integer ID ranging from 0 to n-1. Each pair of creatures has a unique power level, which is an integer between 1 and 1000. The kingdom hosts a yearly magical contest where creatures compete against each other. The contest is structured as a single-elimination tournament, where each match is a 1-on-1 battle. The winner of each match advances to the next round, and the loser is eliminated. The outcome of a battle between two creatures is determined by their power levels: the creature with the higher power level wins. If both creatures have the same power level, the creature with the smaller ID wins. You have been asked to predict the winner of the contest, given the power levels of the creatures. Input The first line contains an integer t (1 ≤ t ≤ 30) — the number of test cases. Each test case starts with a single integer n (1 ≤ n ≤ 100) — the number of mystical creatures. The next n lines contain n integers each — the power levels of the creatures. The j-th integer in the i-th line (1 ≤ j ≤ n) represents the power level of the battle between creature i and creature j. Output For each test case, print a single line containing the ID of the creature that wins the contest. Example Input 2 3 0 10 20 10 0 30 20 30 0 4 0 15 25 35 15 0 5 45 25 5 0 55 35 45 55 0 Output 2 3 Explanation In the first test case: - Creature 0 can defeat creature 1 (power level 10 > 0) but loses to creature 2 (power level 20 < 30). - Creature 1 loses to both creature 0 and creature 2. - Creature 2 wins against both creature 0 and creature 1, emerging as the winner. In the second test case: - Creature 3 wins over all others (power levels 35, 45, and 55 are highest), so it is the contest winner. Note For a creature i, pi,j is the power level in the battle between creature i and creature j.","solution":"def find_tournament_winner(t, cases): def predict_winner(n, power_levels): winner = 0 for i in range(1, n): strength_of_i = 0 strength_of_winner = 0 # Compare overall strength of i and current winner for j in range(n): if j != i: strength_of_i += power_levels[i][j] if j != winner: strength_of_winner += power_levels[winner][j] if strength_of_i > strength_of_winner: winner = i return winner results = [] index = 0 for case_index in range(t): n = cases[index] index += 1 power_levels = [] for _ in range(n): power_levels.append(cases[index]) index += 1 results.append(predict_winner(n, power_levels)) return results"},{"question":"A new company wants to establish a communication network between its employees. The company has N employees and they want to set up a messenger service that ensures optimal communication time between employees. Each employee has a unique ID between 1 and N. Some pairs of employees are known to have direct communication channels with certain latencies. The company wants to find out the time it would take for information to travel in the worst case between any two employees. Furthermore, the company wants to know how many pairs of employees have this worst-case communication time. Consider the following details: - The network communication can be considered as an undirected graph where employees are nodes and communication channels are edges with weights representing latencies. - If there is no direct communication channel between two employees, information has to travel through the existing channels. You are required to determine the maximum latency for any pair of employees and count the number of pairs having this maximum latency. Input: - The first line contains T, the number of test cases. - Each test case starts with a line containing two integers N and M, where N is the number of employees and M the number of direct communication channels. - The next M lines contain three integers u, v, and w each, representing a communication channel between employees u and v with latency w. Output: For each test case, output a single line containing two integers separated by a space: the worst-case communication time and the number of employee pairs having this communication time. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ N*(N-1)/2 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^5 Example Input: 2 4 5 1 2 3 2 3 4 3 4 5 1 4 9 1 3 2 3 3 1 2 3 2 3 4 1 3 5 Example Output: 9 1 5 1 Explanation: - In the first test case, the maximum latency between any two employees is 9 (between employees 1 and 4). - In the second test case, the maximum latency is 5 (between employees 1 and 3), and there\'s only one such pair having this latency.","solution":"import heapq import sys def floyd_warshall(n, edges): dist = [[sys.maxsize] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): dist[i][i] = 0 for u, v, w in edges: dist[u][v] = w dist[v][u] = w for k in range(1, n + 1): for i in range(1, n + 1): for j in range(1, n + 1): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def find_worst_case_latency_and_count(n, edges): dist = floyd_warshall(n, edges) max_latency = 0 count = 0 for i in range(1, n + 1): for j in range(i + 1, n + 1): if dist[i][j] != sys.maxsize: if dist[i][j] > max_latency: max_latency = dist[i][j] count = 1 elif dist[i][j] == max_latency: count += 1 return max_latency, count def solve(test_cases): results = [] for n, m, edges in test_cases: max_latency, count = find_worst_case_latency_and_count(n, edges) results.append(f\\"{max_latency} {count}\\") return results def main(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, input_lines[index].split()) edges = [] for i in range(M): u, v, w = map(int, input_lines[index + 1 + i].split()) edges.append((u, v, w)) test_cases.append((N, M, edges)) index += M + 1 results = solve(test_cases) for result in results: print(result)"},{"question":"Alex is planning a road trip and wants to maintain a log of his journey. As part of this, he needs to calculate the distance between each pair of consecutive stops and the total distance traveled by the end of the trip. You need to help him write a program to calculate these distances. For simplicity, the map can be represented as a 2D grid where each stop is a coordinate (x, y). The distance between two stops (x1, y1) and (x2, y2) is calculated using the Euclidean distance formula. Note that Alex will always have at least two stops and coordinates can be negative or positive integers. -----Input----- The first line contains an integer N (2 le N le 1000), which represents the number of stops on Alex\'s road trip. The following N lines each contain two space-separated integers representing the coordinates (x, y) of each stop. -----Output----- Output N-1 lines, each containing a single floating-point number rounded to two decimal places, representing the distance between each pair of consecutive stops. The last line of the output should contain the total distance traveled across all segments, also rounded to two decimal places. -----Example----- Sample Input 1: 3 0 0 3 4 6 0 Sample Output 1: 5.00 5.00 10.00 Sample Input 2: 2 -1 -1 2 3 Sample Output 2: 5.00 5.00 # Note: - The distance between the stops (x1, y1) and (x2, y2) is calculated as sqrt{(x2 - x1)^2 + (y2 - y1)^2}. - The total distance is the sum of all individual calculated distances.","solution":"import math def calculate_distances(stops): Calculates the distances between consecutive stops and the total distance. Parameters: stops (list of tuples): List of coordinate tuples (x, y) for each stop. Returns: list of floats: List of distances between consecutive stops, followed by the total distance. distances = [] total_distance = 0.0 for i in range(1, len(stops)): x1, y1 = stops[i - 1] x2, y2 = stops[i] distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) distances.append(round(distance, 2)) total_distance += distance distances.append(round(total_distance, 2)) return distances # Function to parse input and return distances for convenience during unit testing def road_trip_log(N, coordinates): stops = [tuple(map(int, coord.split())) for coord in coordinates] return calculate_distances(stops)"},{"question":"You are required to implement a function that processes a string of lowercase letters and returns a new string where each character is replaced by the next character in the alphabet. The function should handle the wrap-around from \'z\' to \'a\'. - For example: - If the input is `\'abc\'`, the output should be `\'bcd\'`. - If the input is `\'xyz\'`, the output should be `\'yza\'`. - The function should only handle lowercase letters and ignore any non-alphabetic characters. Implement the function using the following signature: ``` (def/func) shift_alphabet(input_string: str) -> str: ```","solution":"def shift_alphabet(input_string: str) -> str: Processes a string of lowercase letters and returns a new string where each character is replaced by the next character in the alphabet, wrapping around from \'z\' to \'a\'. result = [] for char in input_string: if \'a\' <= char <= \'z\': # Only process lowercase alphabetic characters new_char = chr((ord(char) - ord(\'a\') + 1) % 26 + ord(\'a\')) result.append(new_char) else: result.append(char) return \'\'.join(result)"},{"question":"Alice is making a staircase out of blocks. Using the blocks, she wants to build a staircase where each step has exactly one more block than the previous step. For instance, a staircase of height 3 would use 1, 2, and 3 blocks for a total of 6 blocks. Given the total number of blocks **B**, determine the maximum height of the staircase Alice can build. -----Constraints----- - 1 le B le 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: B -----Output----- Print the maximum height of the staircase that Alice can build using exactly B blocks or fewer. -----Sample Input----- 10 -----Sample Output----- 4 - The possible staircases with: - 1 block have height 1 - 1 + 2 = 3 blocks have height 2 - 1 + 2 + 3 = 6 blocks have height 3 - 1 + 2 + 3 + 4 = 10 blocks have height 4 Thus, with 10 blocks, the maximum height of the staircase Alice can build is 4.","solution":"def max_staircase_height(B): Returns the maximum height of the staircase that can be built with B blocks. height = 0 total_blocks = 0 while total_blocks <= B: height += 1 total_blocks += height return height - 1"},{"question":"Alice and Bob are playing a game with sequences of positive integers. Alice gives Bob a sequence of integers and asks him to perform a series of operations to transform it. Bob needs your help writing a program to automate these operations. Here is how the game works: 1. Start with an initial sequence of integers. 2. You can perform the following operation any number of times (including zero): - Choose any two adjacent elements in the sequence, and replace them with their Greatest Common Divisor (GCD) followed by their Least Common Multiple (LCM). For example, if the sequence is [a, b] after one operation, it can be replaced with [GCD(a, b), LCM(a, b)]. Given the initial sequence and target sequence, determine whether it is possible to transform the initial sequence into the target sequence using the specified operations. Input Format The first line contains an integer n (1 ≤ n ≤ 1000), the length of the initial sequence. The second line contains n integers, the initial sequence. The third line contains n integers, the target sequence. Output Format Print \\"YES\\" if it is possible to transform the initial sequence into the target sequence. Otherwise, print \\"NO\\". Constraints Each element in the sequences is a positive integer not greater than 10^9. Sample Input 5 12 15 10 20 25 3 60 10 20 25 Sample Output YES Explanation The initial sequence can be transformed as follows: 1. Choose the elements 12 and 15: - GCD(12, 15) = 3 - LCM(12, 15) = 60 The sequence becomes [3, 60, 10, 20, 25], which matches the target sequence.","solution":"from math import gcd from functools import reduce from collections import deque def lcm(a, b): Returns the Least Common Multiple of a and b. return a * b // gcd(a, b) def can_transform(initial_sequence, target_sequence): Given the initial and target sequence, determine whether it is possible to transform the initial sequence into the target sequence using the game\'s operations. if len(initial_sequence) != len(target_sequence): return \\"NO\\" if initial_sequence == target_sequence: return \\"YES\\" def possible_transforms(seq): Generate all possible sequences by applying the game operations. results = set() queue = deque([seq]) while queue: current_seq = queue.popleft() if tuple(current_seq) in results: continue results.add(tuple(current_seq)) for i in range(len(current_seq) - 1): new_seq = list(current_seq) new_gcd = gcd(current_seq[i], current_seq[i+1]) new_lcm = lcm(current_seq[i], current_seq[i+1]) new_seq[i:i+2] = [new_gcd, new_lcm] queue.append(new_seq) return results initial_transforms = possible_transforms(initial_sequence) return \\"YES\\" if tuple(target_sequence) in initial_transforms else \\"NO\\""},{"question":"You have recently joined a company that tracks its employees\' weekly working hours to monitor their productivity and performance. Each employee has a unique ID, and their working hours are recorded on a daily basis from Monday to Sunday. Your task is to calculate the total working hours for each employee for the given week and determine the employee with the highest working hours. Given employee work hours data for a week, write a program to output the ID of the employee with the highest total working hours. In case of a tie, return the employee ID that comes first in the input. -----Input----- The input starts with an integer n (1 ≤ n ≤ 100) — the number of employees. The next n lines each contain the following: - A string of length k (1 ≤ k ≤ 10) representing the unique ID of the employee. - 7 integers representing the working hours for each day from Monday to Sunday. Each integer is separated by a space, where 0 ≤ hours ≤ 24. -----Output----- Print the ID of the employee who has the highest total working hours. -----Examples----- Input 3 A123 8 8 8 8 8 0 0 B456 9 9 9 9 0 0 0 C789 7 7 7 7 7 7 7 Output C789 Input 2 Alpha 8 8 8 8 8 0 0 Beta 8 8 8 8 8 0 0 Output Alpha","solution":"def get_employee_with_highest_hours(n, employees_data): max_hours = 0 employee_id = \\"\\" for data in employees_data: parts = data.split() emp_id = parts[0] hours = list(map(int, parts[1:])) total_hours = sum(hours) if total_hours > max_hours: max_hours = total_hours employee_id = emp_id elif total_hours == max_hours and employee_id == \\"\\": employee_id = emp_id return employee_id"},{"question":"You are the captain of a spaceship and have to navigate your ship through a complex asteroid field. The field is represented as a two-dimensional grid consisting of `r` rows and `c` columns. Each cell in the grid may contain an empty space, an asteroid, or the spaceship (your position). The grid is represented using the following symbols: - `.`: an empty space where the spaceship can move; - `#`: an asteroid where the spaceship cannot move; - `S`: the starting position of the spaceship. There will be exactly one occurrence of this in the grid; - `E`: the exit position that you need to reach. There will be exactly one occurrence of this in the grid. The spaceship can move in one of the four directions: up, down, left, or right. Moving from one cell to another adjacent cell takes 1 unit of time. However, the asteroid field is unstable, and after every `m` units of time, the grid reconfigures itself. When it reconfigures, the positions of all asteroids (`#` cells) change positions according to predefined transformation rules. You will be provided with a transformation grid that explains how the cells in the asteroid grid are transformed after each reconfiguration. The transformation grid consists of `r` rows and `c` columns and contains one of the following symbols for each cell: - `U`: The cell above the current cell in the asteroid grid should be moved to this cell (if the cell is on the topmost row, the asteroid wraps around to the bottom row); - `D`: The cell below the current cell in the asteroid grid should be moved to this cell (if the cell is in the bottommost row, the asteroid wraps around to the top row); - `L`: The cell to the left of the current cell in the asteroid grid should be moved to this cell (if the cell is on the leftmost column, the asteroid wraps around to the right column); - `R`: The cell to the right of the current cell in the asteroid grid should be moved to this cell (if the cell is on the rightmost column, the asteroid wraps around to the left column). Write a program that finds the minimum time required for the spaceship to reach the exit position, considering the asteroid reconfigurations. # Input The first line of input contains three integers `r`, `c`, and `m` (1 ≤ r, c ≤ 1000, 1 ≤ m ≤ 1000), denoting the number of rows and columns in the grid and the time interval after which the grid reconfigures, respectively. The next `r` lines contain `c` characters each, representing the initial configuration of the asteroid field, where each character is one of `.`, `#`, `S`, or `E`. The following `r` lines contain `c` characters each, representing the transformation grid, where each character is one of `U`, `D`, `L`, or `R`. # Output Output a single line with the minimum time required to reach the exit position. If it is impossible to reach the exit, output -1. # Example Input ``` 4 4 2 S..# .... .#.. ..E# DUDU RLUD LRLU UDUD ``` Output ``` 5 ``` Explanation 1. The spaceship starts at the top left corner (position `(0, 0)`) and moves right two steps: `S -> . -> ..`. 2. After two steps, the grid reconfigures according to the transformation rules described in the transformation grid. 3. The spaceship then moves down two steps and right one step, reaching the exit (position `(2, 3)`). Note: wrapping behavior needs to be accounted for during the transformation.","solution":"from collections import deque def transform_grid(current_grid, r, c, transformations): new_grid = [[\'.\'] * c for _ in range(r)] for i in range(r): for j in range(c): if current_grid[i][j] == \'#\': if transformations[i][j] == \'U\': new_grid[(i - 1 + r) % r][j] = \'#\' elif transformations[i][j] == \'D\': new_grid[(i + 1) % r][j] = \'#\' elif transformations[i][j] == \'L\': new_grid[i][(j - 1 + c) % c] = \'#\' elif transformations[i][j] == \'R\': new_grid[i][(j + 1) % c] = \'#\' return new_grid def minimum_time_to_exit(r, c, m, grid, transformations): start, end = None, None for i in range(r): for j in range(c): if grid[i][j] == \'S\': start = (i, j) if grid[i][j] == \'E\': end = (i, j) if not start or not end: return -1 queue = deque([(start[0], start[1], 0)]) visited = set([(start[0], start[1], 0)]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y, time = queue.popleft() current_grid = grid if time > 0 and time % m == 0: current_grid = transform_grid(grid, r, c, transformations) if (x, y) == end: return time for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < r and 0 <= ny < c and current_grid[nx][ny] != \'#\' and (nx, ny, (time + 1) % m) not in visited: queue.append((nx, ny, time + 1)) visited.add((nx, ny, (time + 1) % m)) return -1"},{"question":"You are given a network of computers connected by various bidirectional cables. Each cable has a delay time associated with it, representing the time it takes to send data from one computer to another. Your task is to determine the minimum time required to send a data packet from a specific source computer to a specific destination computer. Input Format The first line of the input contains three space-separated integers: N (the number of computers), M (the number of cables), and C (the number of cable configurations). The next M lines describe the cables. Each line contains three space-separated integers: A_i and B_i (the IDs of the connected computers) and T_i (the delay time of the cable). The next C lines describe the cable configurations. Each line contains two integers: X (the source computer ID) and Y (the destination computer ID). Constraints 1 leq N leq 10^5 1 leq M leq 2 cdot 10^5 1 leq C leq 10^3 1 leq A_i, B_i, X, Y leq N 1 leq T_i leq 100 All computer IDs are distinct. Each cable configuration (X, Y) is unique. Output Format For each cable configuration, print a single line containing the minimum delay time required to send a data packet from the source computer to the destination computer. If it is not possible to send a data packet between the computers, print `-1`. Sample Input 5 6 2 1 2 3 1 3 4 2 3 1 2 4 7 3 5 2 4 5 5 1 5 2 4 Sample Output 6 7 Explanation In the first configuration, the shortest path from computer 1 to computer 5 is through computer 3, with a delay time of 4 (1 to 3) + 2 (3 to 5) = 6. In the second configuration, the shortest path from computer 2 to computer 4 is direct, with a delay time of 7. If the destination is not reachable from the source, the output should be `-1`.","solution":"import heapq from collections import defaultdict def network_delay(n, m, c, cables, configurations): :param n: int - number of computers :param m: int - number of cables :param c: int - number of cable configurations :param cables: List[Tuple[int, int, int]] - list of tuples (A_i, B_i, T_i) describing cables :param configurations: List[Tuple[int, int]] - list of tuples (X, Y) describing configurations :return: List[int] - minimum delay times for each configuration # Create a graph representation from the given cables graph = defaultdict(list) for a, b, t in cables: graph[a].append((b, t)) graph[b].append((a, t)) # Function to implement Dijkstra\'s algorithm def dijkstra(start, end): pq = [(0, start)] dist = {i: float(\'inf\') for i in range(1, n+1)} dist[start] = 0 while pq: curr_delay, node = heapq.heappop(pq) if node == end: return curr_delay for neighbor, weight in graph[node]: new_delay = curr_delay + weight if new_delay < dist[neighbor]: dist[neighbor] = new_delay heapq.heappush(pq, (new_delay, neighbor)) return -1 # Process each configuration result = [] for x, y in configurations: result.append(dijkstra(x, y)) return result # Example usage n = 5 m = 6 c = 2 cables = [(1, 2, 3), (1, 3, 4), (2, 3, 1), (2, 4, 7), (3, 5, 2), (4, 5, 5)] configurations = [(1, 5), (2, 4)] print(network_delay(n, m, c, cables, configurations))"},{"question":"A company is developing a software that automatically categorizes emails into different folders based on their content. One of the key features required is to identify and classify important phrases in the emails that indicate specific actions or priorities. Your task is to design a function that, given a list of emails and a set of key phrases, determines which emails contain at least one of the key phrases. If an email contains one of these key phrases, it should be marked as important. For example, if the list of emails is `[\\"Please review the attached document\\", \\"Meeting tomorrow at 10am\\", \\"Urgent: Please respond ASAP\\"]` and the key phrases are `[\\"Urgent\\", \\"review\\", \\"Meeting\\"]`, then the important emails are the ones that contain either \\"Urgent\\", \\"review\\", or \\"Meeting\\". -----Input----- The first line of input contains an integer n, the number of emails. The next n lines contain the emails, one per line. The following line contains an integer m, the number of key phrases. The next m lines contain the key phrases, one per line. Each email and key phrase consists of lowercase and uppercase English letters, spaces, and punctuation marks. -----Output----- Display the important emails in the same order they appear in the input. If there are no important emails, simply display the phrase NO IMPORTANT EMAILS. -----Examples----- Sample Input 1: 3 Please review the attached document Meeting tomorrow at 10am Urgent: Please respond ASAP 3 Urgent review Meeting Sample Output 1: Please review the attached document Meeting tomorrow at 10am Urgent: Please respond ASAP Sample Input 2: 3 Let’s catch up sometime next week! Happy Birthday! Don’t forget to submit your report. 2 submit week Sample Output 2: Let’s catch up sometime next week! Don’t forget to submit your report.","solution":"def find_important_emails(n, emails, m, key_phrases): Finds and returns important emails containing any of the key phrases. Parameters: n (int): Number of emails. emails (list of str): List of emails. m (int): Number of key phrases. key_phrases (list of str): List of key phrases. Returns: list of str: Important emails or [\\"NO IMPORTANT EMAILS\\"] if none are found. important_emails = [] # Convert key phrases to lower case for case-insensitive comparison key_phrases_set = set(phrase.lower() for phrase in key_phrases) for email in emails: email_lower = email.lower() if any(phrase in email_lower for phrase in key_phrases_set): important_emails.append(email) if not important_emails: return [\\"NO IMPORTANT EMAILS\\"] return important_emails"},{"question":"A travel agency needs to categorize the types of trips their clients are planning. Each trip is represented by a string consisting of the characters \'H\' (for hiking), \'W\' (for water sports), and \'C\' (for city tours). The agency has the following criteria to classify the trip type: - If the string contains any triplet \\"HWC\\" or \\"CHW\\", then the trip is classified as \\"Diverse\\". - Otherwise, the trip is classified as \\"Monotonous\\". Given a list of trip plans, determine for each plan whether it is \\"Diverse\\" or \\"Monotonous\\". -----Input----- The first line of input contains an integer N, representing the number of trip plans. Each of the next N lines contains a string composed of only \'H\', \'W\', and \'C\' characters. -----Output----- For each trip plan, print in a single line \\"Diverse\\" or \\"Monotonous\\" according to the agency\'s classification criteria. -----Constraints----- - 1 ≤ N ≤ 200 - 1 ≤ |T| ≤ 105 The sum of the lengths of all trip plans in a single test case will not exceed 10^7. -----Example----- Input: 2 HWHWWWCCC HWCHCWCH Output: Monotonous Diverse -----Explanation----- Example case 1: The string does not contain the triplets \\"HWC\\" or \\"CHW\\". Example case 2: The string contains the triplet \\"HWC\\" in position 1-3.","solution":"def classify_trip(trip): Classifies a trip as \\"Diverse\\" if it contains any triplet \\"HWC\\" or \\"CHW\\", otherwise as \\"Monotonous\\". trip: str - Trip plan consisting of characters \'H\', \'W\', and \'C\'. Returns: str - \\"Diverse\\" or \\"Monotonous\\" if \'HWC\' in trip or \'CHW\' in trip: return \\"Diverse\\" return \\"Monotonous\\" def classify_trips(N, trip_plans): Classifies a list of trip plans. N: int - The number of trip plans. trip_plans: list of str - List of trip plans. Returns: list of str - List of classifications, either \\"Diverse\\" or \\"Monotonous\\". return [classify_trip(plan) for plan in trip_plans]"},{"question":"Prof. Gamma loves organizing quizzes in her programming class. She has a nifty way of categorizing students based on their scores. She wants to find the median score of the class after all students have taken the quiz. You are given the scores of all students and your task is to determine the median score. Input Format The first line contains T, the number of test cases. Each test case consists of one line: - The first integer N denotes the number of students in the class. - The next N integers represent the scores of the students. Output Format For each test case, print the median score. If the number of scores (N) is odd, the median is simply the middle score after sorting. If N is even, the median is the average of the two middle scores (rounded down to the nearest integer). Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ scores[i] ≤ 100, where i ∈ [1, N] Sample Input 3 5 50 20 70 40 80 4 10 20 30 40 3 15 10 20 Sample Output 50 25 15","solution":"def find_median_scores(test_cases): Given a list of test cases with student scores, return the median score for each test case. medians = [] for case in test_cases: N = case[0] scores = sorted(case[1:]) # Determine the median if N % 2 == 1: median = scores[N // 2] else: median = (scores[N // 2 - 1] + scores[N // 2]) // 2 medians.append(median) return medians def parse_input(input_str): Parses the input string into a list of test cases. lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): test_cases.append(list(map(int, lines[i].split()))) return test_cases def main(input_str): test_cases = parse_input(input_str) medians = find_median_scores(test_cases) for median in medians: print(median)"},{"question":"Maria is managing a food distribution center and needs to keep track of the food items and their expiration dates. She wants to write a function that will help her filter out the food items that have expired based on the current date. The function `filter_expired_items` should take a list of tuples where each tuple contains a string (the name of the food item) and a string in the format \'YYYY-MM-DD\' (the expiration date of the food item), and a string representing the current date in the format \'YYYY-MM-DD\'. The function should return a list of food item names that have not expired. For simplicity, you can assume all dates are valid and the expiration check is inclusive (i.e., if an item\'s expiration date is the same as the current date, it should not be considered expired). Input - A list of tuples, each containing a food item name and its expiration date in the format \'YYYY-MM-DD\'. - A string representing the current date in the format \'YYYY-MM-DD\'. Output - A list of strings (food item names) that have not expired. Examples ```python food_items = [(\\"Milk\\", \\"2023-10-01\\"), (\\"Bread\\", \\"2023-09-29\\"), (\\"Butter\\", \\"2023-10-10\\")] current_date = \\"2023-10-01\\" print(filter_expired_items(food_items, current_date)) # Output: [\\"Milk\\", \\"Butter\\"] food_items = [(\\"Cheese\\", \\"2023-09-25\\"), (\\"Yogurt\\", \\"2023-09-30\\"), (\\"Ham\\", \\"2023-09-30\\")] current_date = \\"2023-09-30\\" print(filter_expired_items(food_items, current_date)) # Output: [\\"Yogurt\\", \\"Ham\\"] ```","solution":"from datetime import datetime def filter_expired_items(food_items, current_date): Filters out food items that have expired based on the current date. Parameters: food_items (list of tuple): A list of tuples where each tuple contains a string (food item name) and a string (expiration date in \'YYYY-MM-DD\' format). current_date (str): A string representing the current date in \'YYYY-MM-DD\' format. Returns: list: A list of food item names that have not expired. current_date_obj = datetime.strptime(current_date, \'%Y-%m-%d\') non_expired_items = [item for item, exp_date in food_items if datetime.strptime(exp_date, \'%Y-%m-%d\') >= current_date_obj] return non_expired_items"},{"question":"Flood Fill Algorithm In this problem, you are given a 2D grid representing an image, where each pixel in the image is a positive integer. You are also given a specific starting pixel within the grid and a new color. Your task is to replace all pixels connected to the starting pixel (directly or indirectly, meaning through adjacent pixels with the same color) with the new color using a flood-fill algorithm. For example, in the given grid: ``` [ [1, 1, 1, 2], [1, 2, 2, 2], [1, 1, 1, 2], ] ``` If the starting pixel is at (0, 0) and the new color is 3, the resultant grid after flood fill should be: ``` [ [3, 3, 3, 2], [3, 2, 2, 2], [3, 3, 3, 2], ] ``` # Input - The first line contains three integers, `m` and `n` (1 ≤ m, n ≤ 50), representing the number of rows and columns of the grid, and the new color `c` (1 ≤ c ≤ 50). - The next `m` lines each contain `n` integers representing the grid. - The last line contains two integers, `sr` and `sc` (0 ≤ sr < m, 0 ≤ sc < n), representing the starting cell coordinates. # Output - Print the updated grid after applying flood-fill algorithm. # Example Input ``` 4 4 3 1 1 1 2 1 2 2 2 1 1 1 2 0 0 ``` Output ``` 3 3 3 2 3 2 2 2 3 3 3 2 ``` # Note - Pixels connected diagonally are not considered connected for flood fill. - Perform the flood fill only if the color of the starting pixel differs from the new color to avoid infinite loop.","solution":"def flood_fill(grid, sr, sc, new_color): Modifies the grid in-place to fill the connected pixels with the new color. :param grid: List of lists representing the 2D grid. :param sr: Start row index. :param sc: Start column index. :param new_color: The new color to fill connected pixels. m, n = len(grid), len(grid[0]) original_color = grid[sr][sc] if original_color == new_color: return grid def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] != original_color: return grid[x][y] = new_color dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) dfs(sr, sc) return grid def main(): # Read input import sys input = sys.stdin.read data = input().strip().split() m = int(data[0]) n = int(data[1]) new_color = int(data[2]) grid = [] idx = 3 for i in range(m): row = [int(data[idx+j]) for j in range(n)] grid.append(row) idx += n sr = int(data[idx]) sc = int(data[idx+1]) # Perform flood fill updated_grid = flood_fill(grid, sr, sc, new_color) # Print the updated grid for row in updated_grid: print(\' \'.join(map(str, row))) if __name__ == \\"__main__\\": main()"},{"question":"Mushroom Kingdom is under attack and Mario needs to jump between platforms to collect power-ups and defeat enemies. He needs to know the minimum number of jumps required to reach the final platform. Mario starts at platform 1 and needs to get to platform n (the last platform). Each platform i has a maximum jump length a_i, indicating the farthest platform Mario can reach from platform i. Determine the minimum number of jumps required for Mario to reach platform n from platform 1. If it is not possible to reach platform n, return -1. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) — the number of platforms. The second line contains n space-separated integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^5) — the maximum jump lengths from each platform. -----Output----- Output a single integer denoting the minimum number of jumps required to reach the last platform. If it is not possible to reach the last platform, output -1. -----Example----- Input 6 3 3 1 0 2 0 Output 3 -----Example----- Input 5 1 0 2 1 0 Output -1 -----Note----- In the first example, Mario can jump from platform 1 to platform 2, then from platform 2 to platform 4, and finally from platform 4 to platform 6. Thus, a total of 3 jumps is required. In the second example, Mario cannot reach the last platform as there is no way to jump past platform 2 from platform 1.","solution":"def min_jumps_to_reach_n(n, jumps): Determines the minimum number of jumps needed to reach the last platform. If it is not possible to reach platform n, returns -1. :param n: Number of platforms :param jumps: List of integers representing the maximum jump lengths from each platform :return: Minimum number of jumps needed to reach platform n, or -1 if not possible if n == 1: return 0 max_reach = jumps[0] steps = jumps[0] jumps_needed = 1 for i in range(1, n): if i == n - 1: return jumps_needed max_reach = max(max_reach, i + jumps[i]) steps -= 1 if steps == 0: jumps_needed += 1 if i >= max_reach: return -1 steps = max_reach - i return -1"},{"question":"Susan loves arranging her flowers in rows of different lengths. One day, she noticed that certain combinations of flowers formed perfect pyramids. A perfect pyramid is a sequence of rows of flowers, starting with one flower at the top row, increasing by one flower per row for each subsequent row, with the bottom row having the highest number of flowers. She now wonders how many perfect pyramid arrangements she can make using exactly N flowers. For instance, with 5 flowers, she can form one perfect pyramid as 1 + 2 + 2 = 5. Help Susan by writing a program to determine the number of perfect pyramid arrangements she can make with exactly N flowers. -----Input----- The first line contains a single integer t (1 leq t leq 10^3) — the number of test cases. Each of the next t lines contains a single integer N (1 leq N leq 10^4) — the number of flowers. -----Output----- For each test case, print a single integer — the number of perfect pyramid arrangements that can be made using exactly N flowers. -----Examples----- Input 3 5 6 10 Output 0 1 1 -----Note----- In the first test case, it is not possible to form any perfect pyramid with 5 flowers. In the second test case, one perfect pyramid can be formed with the rows [1, 2, 3]. In the third test case, one perfect pyramid can be formed with the rows [1, 2, 3, 4].","solution":"def count_pyramids(t, test_cases): def is_pyramid(n): level = 1 while n > 0: n -= level level += 1 return n == 0 results = [] for n in test_cases: results.append(1 if is_pyramid(n) else 0) return results"},{"question":"Kiran loves solving puzzles, especially those involving numbers and grids. Recently, he came across a challenging problem that involves filling a grid with numbers in a specific pattern. The problem statement is as follows: Given a number n, fill an n x n grid such that the numbers in each row and column form an arithmetic sequence. The numbers should start with 1 and increase by 1 across the grid. The grid should be filled in such a way that the first row starts with 1, the second row starts with n+1, the third row starts with 2n+1, and so on. Similarly, the first column should also start with 1, the second column with 2, the third column with 3, and so on. Your task is to implement a function `fillGrid(n)` that takes an integer n as input and returns the filled grid as a 2D list. Example 1: Input: n = 3 Output: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Example 2: Input: n = 4 Output: [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `fillGrid(n)` which takes an integer n as input and returns the filled grid as a 2D list. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n^2) Constraints: 1 <= n <= 100","solution":"def fillGrid(n): Fills an n x n grid with numbers such that each row and column forms an arithmetic sequence. The numbers should start with 1 and increase by 1 across the grid. :param n: int: the size of the grid :return: list of list of int: the filled grid grid = [] for i in range(n): row = [] for j in range(n): row.append(i * n + j + 1) grid.append(row) return grid"},{"question":"Michael is a fan of prime numbers and subsequences. He defines a prime-subsequence as a subsequence of a given array that consists entirely of prime numbers. However, he finds it difficult to count all such prime-subsequences in a given array. Given an array of integers, can you help Michael count the number of prime-subsequences in the array? Note that a subsequence can be empty, but for this task, we only count non-empty subsequences. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 50) — the number of elements in the array. The second line contains n integers a_i (1 ≤ a_i ≤ 1000000000) — the elements of the array. -----Output----- Print one integer — the number of non-empty prime-subsequences in the array. -----Examples----- Input 4 2 3 4 6 Output 3 Input 3 4 6 8 Output 0 -----Note----- In the first sample, Michael’s array contains elements: 2, 3, 4, 6. The prime numbers are 2 and 3. The prime-subsequences are {2}, {3}, and {2, 3}, resulting in a total count of 3. In the second sample, there are no prime numbers in the array, so the count of prime-subsequences is 0.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2: return True # 2 is the smallest prime number if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def count_prime_subsequences(n, arr): Count the number of non-empty prime-subsequences in the array. primes = [num for num in arr if is_prime(num)] prime_count = len(primes) if prime_count == 0: return 0 # Each subset of the prime numbers array is a valid subsequence # The number of non-empty subsets of a set with m elements is 2^m - 1 return (2 ** prime_count) - 1"},{"question":"Given an array of positive integers which represents the height of hurdles in a race, and a maximum jump height k which represents the maximum height a racer can normally jump, determine the minimum number of doses required for the racer to be able to clear all hurdles. Each dose increases the racer’s jump height by 1. In case the hurdles can be cleared without any doses, return 0. Example 1: Input: hurdles = [1, 6, 3, 5, 2] k = 4 Output: 2 Explanation: The highest hurdle is 6. The racer can normally jump a maximum height of 4. To clear the hurdle of height 6, the racer needs 6 - 4 = 2 doses. Example 2: Input: hurdles = [2, 5, 4, 5, 2] k = 7 Output: 0 Explanation: The highest hurdle is 5. The racer can already clear this hurdle without any doses. Your Task: You don’t need to read input or output anything. Complete the function `minDoses` which takes an array of integers `hurdles` and an integer `k` as input parameters and returns the minimum number of doses required for the racer to clear all hurdles. Expected Time Complexity: O(N), where N is the number of hurdles. Expected Auxiliary Space: O(1). Constraints: 1 ≤ len(hurdles) ≤ 10^5 1 ≤ hurdles[i] ≤ 10^5 1 ≤ k ≤ 10^5","solution":"def minDoses(hurdles, k): Determines the minimum number of doses required for the racer to clear all hurdles. Parameters: hurdles (list of int): List of integers representing the height of the hurdles. k (int): The maximum jump height of the racer. Returns: int: Minimum number of doses required. max_hurdle = max(hurdles) if k >= max_hurdle: return 0 else: return max_hurdle - k"},{"question":"You are given an array of integers A consisting of N elements. Your task is to rearrange the array A such that the sum of absolute differences between adjacent elements is minimized. To achieve the desired result, you are allowed to perform exactly one swap operation. A swap operation consists of choosing two distinct indices i and j (1 ≤ i, j ≤ N and i ≠ j) and swapping the elements A[i] and A[j]. Among all rearrangements that minimize the sum of absolute differences, output the lexicographically smallest array. If the array is already in its optimal state, no swap is needed. ------ Input Format ------ - The first line contains an integer T, the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the number of elements in the array. - The second line contains N integers A[1], A[2], ..., A[N] - the elements of the array. ------ Output Format ------ For each test case, output the lexicographically smallest array which minimizes the sum of absolute differences between adjacent elements. If there are multiple valid arrays, output the lexicographically smallest one. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 2 ≤ N ≤ 10^{5} -10^9 ≤ A[i] ≤ 10^9 The sum of N over all test cases does not exceed 10^{6}. ----- Sample Input 1 ------ 3 3 3 1 2 4 4 1 3 2 5 1 2 3 4 5 ----- Sample Output 1 ------ 1 2 3 1 2 3 4 1 2 3 4 5 ----- Explanation 1 ------ - In the first test case, we can swap elements at indices 1 and 3. The resulting array is [1, 2, 3], which is both the optimal array and the lexicographically smallest. - In the second test case, we can swap elements at indices 1 and 4. The resulting array is [1, 2, 3, 4], which is both the optimal array and the lexicographically smallest. - In the third test case, the given array is already in its optimal state, so no swap is needed. The array [1, 2, 3, 4, 5] is both the optimal array and the lexicographically smallest.","solution":"def minimize_sum_of_abs_diff(T, test_cases): results = [] for _ in range(T): N, A = test_cases[_] A.sort() # Sort the array to minimize absolute differences and be lexicographically smallest results.append(A) return results"},{"question":"Three friends plan to go on a hiking trip. To ensure fairness in their hike, they want to equally distribute the total hiking distance among the three of them. They have a set of trails, given by their lengths, that they are planning to hike. Each friend must hike a continuous segment of the total distance. The aim is to minimize the maximum distance that any one of them has to hike. For instance, suppose the trails have lengths [4, 3, 6, 8, 10, 2, 7]. One possible fair distribution would be: - Friend 1 hikes distances [4, 3, 6] (total = 13) - Friend 2 hikes distances [8, 10] (total = 18) - Friend 3 hikes distances [2, 7] (total = 9) In this distribution, the maximum distance hiked by any one friend is 18. Another possible distribution would be: - Friend 1 hikes distances [4, 3] (total = 7) - Friend 2 hikes distances [6, 8] (total = 14) - Friend 3 hikes distances [10, 2, 7] (total = 19) In this distribution, the maximum distance hiked by any one friend is 19. To find the optimal distribution, write a program that computes the minimum possible value of the maximum distance that any of the three friends has to hike. -----Input:----- The first line contains an integer N indicating the number of trails. The next line contains N integers, indicating the lengths of these trails. -----Output:----- The output should be a single integer, corresponding to the minimum possible value of the maximum distance hiked by any of the three friends. -----Constraints:----- - 1 leq N leq 10^5 - 1 leq length of each trail leq 10^4 -----Sample Input----- 7 4 3 6 8 10 2 7 -----Sample Output----- 18","solution":"def min_max_hiking_distance(N, lengths): def is_valid_partition(max_distance): count_friends = 1 current_sum = 0 for length in lengths: if current_sum + length > max_distance: count_friends += 1 current_sum = length if count_friends > 3: return False else: current_sum += length return True left, right = max(lengths), sum(lengths) result = right while left <= right: mid = (left + right) // 2 if is_valid_partition(mid): result = mid right = mid - 1 else: left = mid + 1 return result # Example usage N = 7 lengths = [4, 3, 6, 8, 10, 2, 7] print(min_max_hiking_distance(N, lengths)) # Output should be 18"},{"question":"**Problem Statement** You are given a grid consisting of `N` rows and `M` columns. Each cell in the grid can have either a value of 0 or 1. Your task is to find the largest square that can be formed entirely of 1s, and return its area. # Input Format: - The first line contains two integers `N` and `M` representing the number of rows and columns in the grid. - Each of the next `N` lines contains `M` space-separated integers representing the grid cells. # Constraints: - `1 ≤ N, M ≤ 300` - Each cell in the grid contains either a `0` or a `1`. # Output Format: - Output a single integer representing the area of the largest square that can be formed using only 1s in the grid. # Sample Input 1: ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` # Sample Output 1: ``` 4 ``` # Sample Input 2: ``` 3 3 1 1 1 1 1 1 0 1 1 ``` # Sample Output 2: ``` 4 ``` # Explanation: In the first sample, the largest square containing only 1s has a side length of 2. Thus, the area is 2*2 = 4. In the second sample, the largest square containing only 1s also has a side length of 2, giving an area of 4. # Notes: - Consider using dynamic programming to solve this problem efficiently. - Pay attention to edge cases where the grid has no 1s or is completely filled with 1s.","solution":"def largest_square_area(grid): Returns the area of the largest square of 1s in the given grid. if not grid or not grid[0]: return 0 N = len(grid) M = len(grid[0]) dp = [[0] * M for _ in range(N)] max_side = 0 for i in range(N): for j in range(M): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side def parse_input(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return N, M, grid def largest_square_area_from_input(input_str): N, M, grid = parse_input(input_str) return largest_square_area(grid)"},{"question":"You are given a linked list, where each node contains a single digit. The digits are stored in reverse order, and each of their non-negative integers does not contain any leading zeroes. Write a function that adds two such numbers and returns the sum as a linked list. Example: Input: (2 -> 4 -> 3) + (5 -> 6 -> 4) Output: 7 -> 0 -> 8 Explanation: 342 + 465 = 807. Input The input consists of two linked lists, where each linked list represents a non-negative integer. Output The function should return a linked list representing the sum of the two numbers. Constraints - The number of nodes in each linked list is in the range [1, 100]. - Each node contains a single digit. - The digits are stored in reverse order. - Ensure the solution handles lists of different lengths properly.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1, l2): Adds two numbers represented by linked lists l1 and l2, where the digits are stored in reverse order. :param l1: ListNode, the head of the first linked list :param l2: ListNode, the head of the second linked list :return: ListNode, the head of the resulting linked list representing the sum dummy_head = ListNode(0) current, carry = dummy_head, 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 carry, out = divmod(val1 + val2 + carry, 10) current.next = ListNode(out) current = current.next l1 = l1.next if l1 else None l2 = l2.next if l2 else None return dummy_head.next"},{"question":"Given a 2-D grid of size ( m times n ) consisting of non-negative integers, you need to find a sub-grid (contiguous rectangular section of the grid) such that the sum of all the elements in the sub-grid is maximum. Output the maximum sum. -----Input----- The first line contains the size of the grid ( m ) and ( n ) ( ( 1 le m, n le 1000 ) ). The following ( m ) lines contain ( n ) non-negative integers each ( ( 0 le text{grid[i][j]} le 10^3 ) ). -----Output----- Output a single integer representing the maximum sum of elements of any sub-grid. -----Examples----- Input 3 3 1 2 3 4 5 6 7 8 9 Output 45 Input 2 2 1 2 3 4 Output 10 ----Hint----- In the first example, the sub-grid that covers the entire grid has the maximum sum: ( 1+2+3+4+5+6+7+8+9 = 45 ). In the second example, the sub-grid that covers the entire grid has the maximum sum: ( 1+2+3+4 = 10 ).","solution":"def max_sum_subgrid(grid): Returns the maximum sum of all elements of any sub-grid (contiguous rectangular section) of the given 2-D grid. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Initialize an auxiliary matrix to store the sum of elements above and left including the current cell aux = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): aux[i][j] = grid[i - 1][j - 1] + aux[i - 1][j] + aux[i][j - 1] - aux[i - 1][j - 1] max_sum = float(\'-inf\') # Iterate through all possible subgrids for i in range(1, m + 1): for j in range(1, n + 1): for p in range(i, m + 1): for q in range(j, n + 1): current_sum = (aux[p][q] - aux[i - 1][q] - aux[p][j - 1] + aux[i - 1][j - 1]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an array of integers nums, you are tasked with composing an integer array result such that result[i] is equal to the product of all the elements of nums except nums[i]. Implement a function that calculates such an array in O(n) time complexity and uses O(1) extra space complexity (excluding the output array). Note: - You must not use division operations in your solution. Example: Input: nums = [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: For the 1st element, the product is 2 * 3 * 4 = 24. For the 2nd element, the product is 1 * 3 * 4 = 12. For the 3rd element, the product is 1 * 2 * 4 = 8. For the 4th element, the product is 1 * 2 * 3 = 6. Your Task: You don\'t need to read input or print anything. Complete the function productExceptSelf(nums) that takes an integer array nums as input and returns the resulting array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) (excluding the output array) Constraints: - 2 ≤ nums.length ≤ 10^5 - -30 ≤ nums[i] ≤ 30 - The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.","solution":"def productExceptSelf(nums): Returns an array such that result[i] is equal to the product of all the elements of nums except nums[i]. length = len(nums) result = [1] * length # Initialize the result array with 1s. # Calculate left products left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Calculate right products and the final result right_product = 1 for i in range(length-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"John is organizing a marathon in his city. He needs to place water stations along the route. The marathon route is represented as a number line ranging from 0 to M meters. There are N water stations available, and John wants to place them in such a way that the maximum distance any participant needs to run without encountering a water station is minimized. -----Input----- The first line contains two integers N (1 ≤ N ≤ 10^5) and M (1 ≤ M ≤ 10^9) — the number of water stations and the length of the marathon route respectively. -----Output----- Print a single integer representing the minimized maximum distance any participant needs to run without encountering a water station. -----Examples----- Input 4 10 Output 2 Input 3 8 Output 2 -----Explanation----- In the first example, John can place the water stations at 0, 3, 6, and 9. This results in a maximum distance of 2 meters between consecutive water stations. In the second example, John can place the water stations at 0, 3, and 6. This results in a maximum distance of 2 meters between consecutive water stations on parts of the route without a station. The goal is to ensure that the maximum distance anyone runs without water is as small as possible.","solution":"def min_max_distance(N, M): Given the number of water stations N and the length of the marathon route M, returns the minimized maximum distance any participant needs to run without encountering a water station. N: int - The number of water stations. M: int - The length of the marathon route in meters. return (M + N - 1) // N"},{"question":"------ Problem Statement ------ Alice and Bob love playing with strings. They came up with a new game where they are given a large string `s` and a series of queries. Each query consists of two integers `l` and `r`. The goal is to determine if the substring of `s` from index `l` to `r` (1-based index) is a palindrome. A palindrome is a string that reads the same forward and backward. Alice wants you to help her write a program that efficiently answers each query. ------ Input ------ The first line contains a single string `s`, which consists of lowercase English letters. The second line contains an integer `q`, the number of queries. The next `q` lines contain two integers `l` and `r` (1 ≤ l ≤ r ≤ |s|), representing the indices of the substring to be checked. ------ Output ------ For each query, print \\"YES\\" if the substring is a palindrome, and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ |s| ≤ 10^5 1 ≤ q ≤ 10^4 ----- Sample Input 1 ------ abacaba 3 1 3 2 4 1 7 ----- Sample Output 1 ------ YES NO YES","solution":"def is_palindrome_substring(s, queries): results = [] for l, r in queries: substring = s[l-1:r] if substring == substring[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # s = \\"abacaba\\" # queries = [(1, 3), (2, 4), (1, 7)] # print(is_palindrome_substring(s, queries))"},{"question":"In the realm of mystical forests, there are enchanted trees that form a magical boundary known as the \\"Mysterious Belt.\\" Your mission is to calculate the energy required to traverse this belt. The forest can be represented as a 2D grid, where each cell has an energy value associated with crossing it. You start at the top-left corner of the grid and must reach the bottom-right corner by only moving to the right or down at each step. The goal is to determine the minimum energy required to reach the destination. The grid will always be a square with \'n\' rows and \'n\' columns, and each cell contains a non-negative integer representing the energy cost. ------ Input ------ The first line contains a single integer t, the number of test cases (1 ≤ t ≤ 50). Then, t test cases follow. Each test case starts with an integer n (1 ≤ n ≤ 100), representing the dimensions of the grid. The next n lines each contain n integers, with each integer `a[i][j]` (0 ≤ a[i][j] ≤ 1000) representing the energy cost of cell (i, j). ------ Output ------ For each test case, output the minimum energy required to move from the top-left corner to the bottom-right corner of the grid. ----- Sample Input ------ 2 3 1 2 3 4 5 6 7 8 9 2 1 2 3 4 ----- Sample Output ------ 21 7 Explanation: Test Case 1: The least energy path is 1 → 2 → 3 → 6 → 9, costing 1 + 2 + 3 + 6 + 9 = 21 energy. Test Case 2: The least energy path is 1 → 2 → 4, costing 1 + 2 + 4 = 7 energy.","solution":"def find_min_energy(t, test_cases): results = [] for case in test_cases: n, matrix = case dp = [[0] * n for _ in range(n)] dp[0][0] = matrix[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] dp[0][i] = dp[0][i-1] + matrix[0][i] for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] results.append(dp[-1][-1]) return results def parse_input(input_data): data = input_data.strip().split(\'n\') t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) matrix = [] for i in range(n): matrix.append(list(map(int, data[index + i + 1].split()))) index += n + 1 test_cases.append((n, matrix)) return t, test_cases def mysterious_belt(input_data): t, test_cases = parse_input(input_data) result = find_min_energy(t, test_cases) for res in result: print(res)"},{"question":"Given a Stack S containing N elements. The task is to sort the stack in descending order. Your task is to complete the function sortStack() that sorts the elements of the stack. Example 1: Input: 5 3 5 1 4 2 Output: 5 4 3 2 1 Explanation: After sorting the stack, the resultant stack will be 5 4 3 2 1. Example 2: Input: 3 30 20 40 Output: 40 30 20 Explanation: After sorting the stack, the resultant stack will be 40 30 20. Your Task: You need to complete the function sortStack that takes a stack as parameter and returns the sorted stack. The printing is done automatically by the driver code. Expected Time Complexity : O(n^2) Expected Auxiliary Space : O(n) Constraints: 1 ≤ N ≤ 10^4 1 ≤ elements of Stack ≤ 10^6","solution":"def sort_stack(s): Sorts a stack in descending order. Parameters: s (list): The stack to be sorted. Returns: list: The sorted stack in descending order. # Initialize a temporary stack temporary_stack = [] while s: # Pop an element from the original stack current = s.pop() # While temporary stack is not empty and top of temporary stack is smaller than current while temporary_stack and temporary_stack[-1] < current: # Pop from temporary stack and push to the original stack s.append(temporary_stack.pop()) # Push the current element to the temporary stack temporary_stack.append(current) # Return the sorted stack, which will be in the temporary stack return temporary_stack"},{"question":"Polycarp has come up with another interesting task for you. He calls it \\"The Smallest Palindrome\\". A palindrome is a word that reads the same backward as forward. For example, \\"aba\\", \\"acca\\" and \\"radar\\" are palindromes. The task goes as follows: Polycarp gives you a non-palindromic string consisting of lowercase letters only. He wants you to add the minimum number of characters at the end of the string to make it a palindrome. Your goal is to find the smallest palindrome string you can obtain by appending characters to the end of the given string. -----Input----- The first line contains a single integer t (1 le t le 2000) — the number of testcases. The only line of each testcase contains a single string s (1 le |s| le 100) which consists of lowercase English letters. It is guaranteed that s is not a palindrome. -----Output----- For each testcase, print the smallest palindrome string that can be obtained by appending characters to s. -----Examples----- Input 4 abb aab abc racecarer Output abba aabaa abcba racecareracecar -----Note----- In the first testcase, the original string \\"abb\\" becomes the palindrome \\"abba\\" by appending the character \'a\' to the end. In the second testcase, the original string \\"aab\\" becomes the palindrome \\"aabaa\\" by appending the characters \\"aa\\" to the end. In the third testcase, the original string \\"abc\\" becomes the palindrome \\"abcba\\" by appending the characters \\"cba\\" to the end. In the fourth testcase, the original string \\"racecarer\\" becomes the palindrome \\"racecareracecar\\" by appending the characters \\"acecar\\" to the end.","solution":"def smallest_palindrome(s): Given a string s, appends the minimum number of characters at the end to make it a palindrome. def is_palindrome(s): return s == s[::-1] n = len(s) for i in range(n): if is_palindrome(s[i:]): return s + s[:i][::-1] return s # to satisfy the return type, although this line should never be reached def solve_palindromes(test_cases): results = [] for s in test_cases: results.append(smallest_palindrome(s)) return results"},{"question":"Alex is working on a project that requires encrypting and decrypting messages. The encryption is done using a simple cipher technique called \\"Shift Cipher\\". Given a message and a shift value, the cipher replaces each letter in the message with a letter some fixed number of positions down the alphabet. The alphabets \\"wrap around\\", so that a letter shifted off the end of the alphabet appears at the start. Your task is to write a function that can both encrypt and decrypt messages using this technique. For simplicity, only the lowercase alphabets \'a\' to \'z\' are considered, and spaces remain unchanged. -----Input----- The first line of the input contains a single integer t (1 ≤ t ≤ 2) — the number of operations. The following t lines each contain: - A string operation (\'encrypt\' or \'decrypt\') (without quotes) - An integer k (0 ≤ k ≤ 25) — the shift value. - A string message (1 ≤ |message| ≤ 1000) — the message to be encrypted or decrypted. -----Output----- For each operation, print the resulting message after encryption or decryption. Example: Input 2 encrypt 3 hello world decrypt 3 khoor zruog Output khoor zruog hello world Note: In the first operation, \'h\' shifted by 3 positions is \'k\', \'e\' is shifted by 3 positions to \'h\', \'l\' is shifted by 3 positions to \'o\', \'o\' is shifted by 3 positions to \'r\', space remains space, \'w\' is shifted by 3 positions to \'z\', \'o\' to \'r\', \'r\' to \'u\', \'l\' to \'o\', and \'d\' to \'g\'. In the second operation, reversing the previous operation by shifting \'k\' by 3 positions back results in \'h\', \'h\' to \'e\', \'o\' to \'l\', \'r\' to \'o\', etc., resulting in the original message.","solution":"def shift_cipher(operation, k, message): Encrypt or decrypt a message using a simple shift cipher technique. Parameters: operation (str): \'encrypt\' or \'decrypt\' k (int): shift value (0 ≤ k ≤ 25) message (str): the message to be encrypted or decrypted Returns: str: the resulting message after encryption or decryption. result = [] for char in message: if char.isalpha(): shift = k if operation == \'encrypt\' else -k new_char = chr((ord(char) - 97 + shift) % 26 + 97) result.append(new_char) else: result.append(char) return \'\'.join(result) def process_operations(operations): results = [] for operation, k, message in operations: results.append(shift_cipher(operation, k, message)) return results"},{"question":"Given an array of integers, you need to find the smallest positive integer that is missing from the array. Implement a function that efficiently finds this smallest missing positive integer. # Input - The input consists of two lines. - The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of integers in the array. - The second line contains `n` space-separated integers `a1, a2, ..., an` (−10^6 ≤ ai ≤ 10^6) — the elements of the array. # Output - Print a single integer — the smallest positive integer that is missing from the array. # Examples Input 5 1 3 6 4 1 2 Output 5 Input 3 1 2 3 Output 4 Input 4 -1 -3 4 2 Output 1 # Notes In the first example, the smallest missing positive integer is 5. In the second example, the smallest missing positive integer is 4. In the third example, the smallest missing positive integer is 1.","solution":"def find_smallest_missing_positive_integer(array): Finds the smallest positive integer that is missing from the array. array = list(filter(lambda x: x > 0, array)) if not array: return 1 array = set(array) smallest_missing = 1 while smallest_missing in array: smallest_missing += 1 return smallest_missing"},{"question":"Ahmed got a new job and started commuting by train every day. However, the train network is not very efficient, so the train might be late by some minutes. Ahmed has alternative routes to get to his office, but those routes depend on the arrival time of the train at the station. Help Ahmed determine which route to take based on the scheduled arrival time of the train in minutes and the delay in minutes. Route A: If the total arrival time (scheduled time + delay) is less than or equal to 30 minutes. Route B: If the total arrival time is between 31 and 60 minutes, inclusive. Route C: If the total arrival time is more than 60 minutes. Write a program that determines which route Ahmed should take. Input Format: The first line of the input contains an integer T, the number of test cases. Each of the next T lines contains two integers S and D, where S is the scheduled arrival time of the train in minutes and D is the delay in minutes. Output Format: For each test case, print \\"Route A\\" if Ahmed should take Route A, \\"Route B\\" if Ahmed should take Route B, and \\"Route C\\" if Ahmed should take Route C. Constraints: 1 ≤ T ≤ 100 0 ≤ S, D ≤ 120 SAMPLE INPUT 3 20 5 30 25 60 10 SAMPLE OUTPUT Route A Route B Route C Explanation For the first test case, the total arrival time is 20 + 5 = 25 minutes, which is less than or equal to 30 minutes, so Ahmed should take Route A. For the second test case, the total arrival time is 30 + 25 = 55 minutes, which falls between 31 and 60 minutes, so Ahmed should take Route B. For the third test case, the total arrival time is 60 + 10 = 70 minutes, which is more than 60 minutes, so Ahmed should take Route C.","solution":"def determine_route(T, cases): Determines which route Ahmed should take. Parameters: T (int): The number of test cases. cases (list of tuples): Each tuple contains two integers S (scheduled arrival time) and D (delay time). Returns: list of str: A list containing the routes for each test case. routes = [] for S, D in cases: total_time = S + D if total_time <= 30: routes.append(\\"Route A\\") elif total_time <= 60: routes.append(\\"Route B\\") else: routes.append(\\"Route C\\") return routes"},{"question":"You are given a list of strings and each string represents a binary number. Perform two types of queries on this list: 1. `1 l r`: calculate the bitwise AND of all binary numbers from index `l` to `r` (inclusive), and convert the resulting binary number back to an integer. 2. `2 l r`: increment all binary numbers from index `l` to `r` (inclusive) by 1. If a binary number has a leading 0, retain the length by preserving the leading 0 unless it overflows. For each query of the first type, output the resulting integer. -----Input----- The first line contains two integers `n` (1 le n le 10^5) and `q` (1 le q le 10^5), where `n` is the number of binary strings and `q` is the number of queries. The next line contains `n` binary strings, each with a maximum length of `30` characters. The following `q` lines contain queries of the first or second type. The first type query consists of three integers `1`, `l`, and `r` (1 le l le r le n). The second type query consists of three integers `2`, `l`, and `r` (1 le l le r le n). It is guaranteed that all indices in queries are valid. -----Output----- For each query of the first type, output one integer on a separate line. -----Example----- Input: 4 3 0101 1010 1111 0011 1 2 3 2 1 4 1 2 4 Output: 8 6 -----Explanation----- Initially, the list of binary numbers is: `[0101, 1010, 1111, 0011]`. Processing the queries: 1. The AND result of `1010 & 1111 = 1010`. Convert `1010` to integer `10` which is `8` in the base-10 representation. 2. Incrementing all elements by 1: `0101` becomes `0110`, `1010` becomes `1011`, `1111` becomes `0000` (with leading 0 maintained), `0011` becomes `0100`. 3. The AND result of the incremented numbers from `2` to `4`: The AND operation of `1011, 0000, 0100 = 0000`. Convert `0000` to integer `0` which is `0` in the base-10 representation.","solution":"def binary_queries(n, q, binary_strings, queries): def bitwise_and_of_range(l, r): result = int(binary_strings[l], 2) for i in range(l + 1, r + 1): result &= int(binary_strings[i], 2) return result def increment_binaries(l, r): for i in range(l, r + 1): binary_str = binary_strings[i] incremented = bin(int(binary_str, 2) + 1)[2:] if len(incremented) > len(binary_str): incremented = incremented[1:] else: incremented = incremented.zfill(len(binary_str)) binary_strings[i] = incremented binary_strings = [bin_str.zfill(30) for bin_str in binary_strings] results = [] for query in queries: if query[0] == 1: l, r = query[1] - 1, query[2] - 1 results.append(bitwise_and_of_range(l, r)) elif query[0] == 2: l, r = query[1] - 1, query[2] - 1 increment_binaries(l, r) return results"},{"question":"Given a string S and an integer K, find the maximum number of distinct substrings of length K that can be extracted from the string. - A substring is a contiguous sequence of characters within a string. - Substrings that are identical but occur in different positions are considered as different instances. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of two lines of input: - The first line contains the string S. - The second line contains the integer K. ------ Output Format ------ - For each test case, print a new line containing a single integer, the maximum number of distinct substrings of length K that can be extracted from the string. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 1 ≤ K ≤ |S| ----- Sample Input 1 ------ 2 abcabcab 3 abcdef 2 ----- Sample Output 1 ------ 5 5 ----- explanation 1 ------ Test Case 1: The distinct substrings of length 3 that can be extracted from \\"abcabcab\\" are \'abc\', \'bca\', \'cab\', \'abc\', \'bca\', \'cab\', \'abc\'. Among these, the substrings \'abc\', \'bca\', \'cab\', \'cab\', and \'bca\' are unique. Therefore, the maximum number of distinct substrings of length 3 is 5. Test Case 2: The distinct substrings of length 2 that can be extracted from \\"abcdef\\" are \'ab\', \'bc\', \'cd\', \'de\', \'ef\'. Since all extracted substrings are unique, the maximum number of distinct substrings of length 2 is 5.","solution":"def max_distinct_substrings(S, K): substrings = set() for i in range(len(S) - K + 1): substrings.add(S[i:i + K]) return len(substrings) def process_test_cases(T, test_cases): results = [] for S, K in test_cases: results.append(max_distinct_substrings(S, K)) return results"},{"question":"You are given a grid with `N` rows and `M` columns containing numbers. The grid is 1-indexed based on its rows and columns. You are required to process `Q` queries. The queries will be of the following types: 1. `UPDATE r c x` - Update the element at row `r` and column `c` to `x`. 2. `MAXIMUM r1 c1 r2 c2` - Find the maximum element in the subgrid defined by the top-left corner `(r1, c1)` and the bottom-right corner `(r2, c2)`. Constraints * 1 ≤ N, M ≤ 1000 * 1 ≤ Q ≤ 5000 * 1 ≤ r, r1, r2 ≤ N * 1 ≤ c, c1, c2 ≤ M * 1 ≤ x ≤ 10^9 Input Input is given from Standard Input in the following format: ``` N M Q a11 a12 ... a1M a21 a22 ... a2M ... aN1 aN2 ... aNM query1 query2 ... queryQ ``` Output Print the results of all `MAXIMUM` queries, each on a new line. Examples Input: ``` 4 4 5 5 1 3 7 9 3 4 2 8 6 7 1 2 3 5 6 UPDATE 2 2 10 MAXIMUM 1 1 2 3 UPDATE 3 4 12 MAXIMUM 3 1 4 4 MAXIMUM 1 1 4 4 ``` Output: ``` 10 12 12 ```","solution":"def process_queries(N, M, Q, grid, queries): Process a series of UPDATE and MAXIMUM queries on a grid. Parameters: N (int): Number of rows in the grid. M (int): Number of columns in the grid. Q (int): Number of queries to process. grid (list of list of int): N x M grid of integers. queries (list of str): List of queries to be processed. Returns: list of int: Results of MAXIMUM queries. results = [] for query in queries: parts = query.split() if parts[0] == \\"UPDATE\\": r = int(parts[1]) - 1 c = int(parts[2]) - 1 x = int(parts[3]) grid[r][c] = x elif parts[0] == \\"MAXIMUM\\": r1 = int(parts[1]) - 1 c1 = int(parts[2]) - 1 r2 = int(parts[3]) - 1 c2 = int(parts[4]) - 1 max_value = max(grid[i][j] for i in range(r1, r2 + 1) for j in range(c1, c2 + 1)) results.append(max_value) return results # Example usage: # input N = 4 M = 4 Q = 5 grid = [ [5, 1, 3, 7], [9, 3, 4, 2], [8, 6, 7, 1], [2, 3, 5, 6] ] queries = [ \\"UPDATE 2 2 10\\", \\"MAXIMUM 1 1 2 3\\", \\"UPDATE 3 4 12\\", \\"MAXIMUM 3 1 4 4\\", \\"MAXIMUM 1 1 4 4\\" ] # process queries results = process_queries(N, M, Q, grid, queries) for result in results: print(result)"},{"question":"A company wants to organize teams for a project. There are N employees, each employee has a skill level S_{i}. A project team consists of exactly three employees. The effectiveness of a team is defined as the sum of the skill levels of its members. The company wants to maximize the effectiveness of the team. Given the skill levels of the employees, determine the maximum effectiveness of any team that can be formed. ------ Input Format ------ - The first line contains an integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the number of employees. - The second line contains N integers denoting the skill levels of the employees. ------ Output Format ------ For each test case, output a single integer - the maximum effectiveness of any team that can be formed. ------ Constraints ------ 1 ≤ T ≤ 2500 - the number of test cases 3 ≤ N ≤ 10^{5} - the number of employees. 1 ≤ S_{i} ≤ 10^{9} - the skill level of each employee. - Sum of N over all test cases does not exceed 5 cdot 10^{5} ------ subtasks ------ Subtask 1 (5 points): 3 ≤ N ≤ 10, 1 ≤ S_{i} ≤ 100, sum N ≤ 50 Subtask 2 (10 points): 3 ≤ N ≤ 100, 1 ≤ S_{i} ≤ 100, sum N ≤ 500 Subtask 3 (15 points): 3 ≤ N ≤ 1000, sum N ≤ 5000 Subtask 4 (70 points): original constraints ----- Sample Input 1 ------ 3 5 10 20 30 40 50 4 7 1 8 12 6 5 5 5 5 5 5 ----- Sample Output 1 ------ 120 27 15 ----- Explanation 1 ------ - Test Case 1: The team with maximum effectiveness is formed by employees with skill levels 30, 40, and 50, resulting in effectiveness 120. - Test Case 2: The team with maximum effectiveness is formed by employees with skill levels 7, 8, and 12, resulting in effectiveness 27. - Test Case 3: Any team of three employees will result in an effectiveness of 15, since all skill levels are the same (5+5+5).","solution":"def max_effectiveness(T, test_cases): Determines the maximum effectiveness of any team that can be formed for given test cases. :param T: Number of test cases :param test_cases: A list of test cases, where each test case is a tuple (N, skills) :return: A list of maximum effectiveness values for each test case results = [] for i in range(T): N, skills = test_cases[i] skills.sort(reverse=True) max_eff = skills[0] + skills[1] + skills[2] results.append(max_eff) return results # Example usage: # T = 3 # test_cases = [(5, [10, 20, 30, 40, 50]), (4, [7, 1, 8, 12]), (6, [5, 5, 5, 5, 5, 5])] # print(max_effectiveness(T, test_cases)) # Output: [120, 27, 15]"},{"question":"You are given a collection of books in a library, where each book is categorized by genres such as fiction, non-fiction, mystery, and so on. Each book is also rated on a scale from 1 to 5 by different readers. The librarian wants to identify the top-rated books in each genre to feature them on a special display. Write a program that, given a list of books with their genres and ratings, outputs the top k highest-rated books for each genre. If there are multiple books with the same rating, include all of them. If a genre has fewer than k books, include all of them. Assume there are no duplicate book titles. Input: The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 20) — the number of books and the number of top-rated books to display per genre. The next n lines each contain a string representing the title of the book, followed by a string representing the genre, and an integer between 1 and 5 representing the rating of the book. Output: For each genre, list the titles of the top k highest-rated books in descending order of ratings. If multiple books have the same rating, list them in ascending lexicographical order of their titles. Each genre and its top books should be printed in the format: ``` <genre>: <title1> <title2> ... ``` Genres should be printed in ascending lexicographical order. Example: Input: 6 2 MysteryNovel Mystery 5 ScienceBook1 Science 4 ScienceBook2 Science 3 FictionBook1 Fiction 5 FictionBook2 Fiction 4 NonFictionBook NonFiction 5 Output: Fiction: FictionBook1 FictionBook2 Mystery: MysteryNovel NonFiction: NonFictionBook Science: ScienceBook1 ScienceBook2","solution":"def top_rated_books(n, k, books): from collections import defaultdict # Create a dictionary to store books by genres genre_dict = defaultdict(list) for book in books: title, genre, rating = book rating = int(rating) genre_dict[genre].append((title, rating)) # Sort genres lexicographically sorted_genres = sorted(genre_dict.keys()) result = {} for genre in sorted_genres: # Sort books first by rating descending, then by title ascending sorted_books = sorted(genre_dict[genre], key=lambda x: (-x[1], x[0])) # Take top k books, or all if fewer than k books top_books = sorted_books[:k] result[genre] = [title for title, rating in top_books] return result"},{"question":"An online library tracks the number of books borrowed by users on each day of a typical month. They wish to identify the day of the month with the highest borrowing rate in order to plan their future promotions and staffing. You are required to determine the day with the maximum number of books borrowed. Input format The input consists of 30 lines, each representing the number of books borrowed on that day in the month. Each line contains a single integer which represents the count of books borrowed. Output format Output a single integer which is the day of the month with the highest number of books borrowed. If there are multiple days with the same highest number, return the earliest day. Input constraint The number of books borrowed each day is a non-negative integer that does not exceed 100,000. SAMPLE INPUT 120 450 330 405 382 419 217 502 289 243 345 298 390 412 501 487 396 412 408 402 502 413 500 417 499 405 526 478 524 403 SAMPLE OUTPUT 27","solution":"def day_with_max_borrowed(books_borrowed): Given a list of integers representing the number of books borrowed each day in a month, return the day (1-indexed) with the maximum number of books borrowed. If there are multiple days with the same highest number, return the earliest day. max_borrowed = books_borrowed[0] max_day = 1 for i in range(1, len(books_borrowed)): if books_borrowed[i] > max_borrowed: max_borrowed = books_borrowed[i] max_day = i + 1 return max_day"},{"question":"Alex is organizing a workshop on competitive programming. He wants to distribute some unique problem sets among n participants. Each problem set contains exactly m problems. Alex follows these rules strictly: 1. Each participant must receive a distinct problem set. 2. The problem numbers within each set must be unique. Can you help Alex determine the minimum number of distinct problems he needs to prepare so that every participant receives a different problem set without violating the rules? -----Input----- Two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000), the number of participants and the number of problems per problem set, respectively. -----Output----- A single integer p, the minimum number of distinct problems required. -----Examples----- Input 5 3 Output 15 Input 2 2 Output 4 Input 3 4 Output 12 Input 1 5 Output 5","solution":"def minimum_distinct_problems(n, m): Returns the minimum number of distinct problems required to distribute unique problem sets to the participants. return n * m"},{"question":"Alice loves playing word games. One day, she came up with a challenge for her friends. She gives them a string and asks them to find the length of the longest substring that contains at most two distinct characters. Help Alice’s friends solve this problem. Input The first line of input contains an integer t denoting the number of test cases. Each test case contains a single string s. The string consists of only lowercase English letters. Output For each test case, output the length of the longest substring with at most two distinct characters. Constraints 1 ≤ t ≤ 1000 1 ≤ length of s ≤ 10^5 SAMPLE INPUT 3 eceba ccaabbb abcabc SAMPLE OUTPUT 3 5 2 Explanation In the first test case, the longest substring with at most two distinct characters is \\"ece\\" which has length 3. In the second test case, the longest substring with at most two distinct characters is \\"aabbb\\" which has length 5. In the third test case, the longest substring with at most two distinct characters is \\"ab\\" or \\"bc\\" or \\"ca\\" each having length 2.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring with at most two distinct characters. # Dictionary to store the most recent index of each character char_index = {} max_len = 0 left = 0 for right in range(len(s)): char_index[s[right]] = right if len(char_index) > 2: # Get the leftmost character\'s index leftmost = min(char_index.values()) del char_index[s[leftmost]] left = leftmost + 1 max_len = max(max_len, right - left + 1) return max_len def solve(t, test_cases): results = [] for s in test_cases: results.append(length_of_longest_substring_two_distinct(s)) return results"},{"question":"A telecommunications company is conducting a survey to analyze the call durations made by its customers over the past month. They want to find out which customer made the longest phone calls on a given set of days. Each call record contains the start time, end time, and the customer\'s name. The company wants to determine which customer had the longest total call duration each day. Write a function that, given records of phone calls, will output the customer who had the longest total call duration on each day. ------ Input Format ------ - The first line of input contains an integer N, denoting the number of call records. - Each of the next N lines contains a call record with the following format: date start_time end_time customer_name - date is in the format YYYY-MM-DD - start_time and end_time are in the format HH:MM - customer_name is a string without spaces ------ Output Format ------ For each day present in the input data, output the date followed by the name of the customer with the longest total call duration. If there are multiple customers with the same total call duration on a particular day, output the lexicographically smallest customer name. ------ Constraints ------ 1 ≤ N ≤ 10^{5} Each customer name will consist of lowercase English letters and its length will not exceed 100. Call duration will not exceed 24 hours. ------ Sample Input 1 ------ 5 2023-10-01 08:00 09:30 alice 2023-10-01 10:00 11:00 bob 2023-10-01 09:45 10:30 alice 2023-10-02 08:00 09:00 charlie 2023-10-02 09:00 10:00 alice ------ Sample Output 1 ------ 2023-10-01 alice 2023-10-02 alice ------ Explanation 1 ------ Test Case 1: On 2023-10-01, Alice has call records from 08:00 to 09:30 (90 minutes) and from 09:45 to 10:30 (45 minutes). Thus, her total call duration is 135 minutes. Bob has a call record from 10:00 to 11:00, which is 60 minutes. Therefore, Alice has the longest total call duration on 2023-10-01. Test Case 2: On 2023-10-02, Charlie has a call record from 08:00 to 09:00 (60 minutes) and Alice has a call record from 09:00 to 10:00 (60 minutes). Since their call durations are the same, lexicographically smaller name \'alice\' is selected.","solution":"from datetime import datetime, timedelta from collections import defaultdict def find_customer_with_longest_call_duration(n, call_records): call_durations = defaultdict(lambda: defaultdict(int)) for record in call_records: date, start_time, end_time, customer_name = record.split() start_datetime = datetime.strptime(f\\"{date} {start_time}\\", \\"%Y-%m-%d %H:%M\\") end_datetime = datetime.strptime(f\\"{date} {end_time}\\", \\"%Y-%m-%d %H:%M\\") duration = (end_datetime - start_datetime).total_seconds() // 60 call_durations[date][customer_name] += duration result = [] for date, customers in call_durations.items(): max_duration = max(customers.values()) longest_call_customers = [customer for customer, duration in customers.items() if duration == max_duration] result.append(f\\"{date} {min(longest_call_customers)}\\") return result # Define the input in the required format n = 5 call_records = [ \\"2023-10-01 08:00 09:30 alice\\", \\"2023-10-01 10:00 11:00 bob\\", \\"2023-10-01 09:45 10:30 alice\\", \\"2023-10-02 08:00 09:00 charlie\\", \\"2023-10-02 09:00 10:00 alice\\" ] # Calling the function and printing the result print(find_customer_with_longest_call_duration(n, call_records))"},{"question":"Given an integer array nums and an integer target, return indices of the two numbers such that they add up to a target. Assume that each input would have exactly one solution iteratively and you may meet the same element twice. Input The first line contains two integers n (the size of the array) and target (the two numbers need to add up to target), separated by a space. The next line contains n integers representing the array nums. Output Return two integers representing the indices of the two numbers. Constraints 1 ≤ n ≤ 10^4 -10^9 ≤ nums[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9 Each input has exactly one solution. Note: You may not use the same element twice Example Sample Input 4 9 2 7 11 15 Sample Output 0 1","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. # Dictionary to store the number and its index num_to_index = {} for index, num in enumerate(nums): # Calculate the complement of the current number complement = target - num # If complement exists in our dictionary, return the indices if complement in num_to_index: return num_to_index[complement], index # Otherwise, add the number to the dictionary with its index num_to_index[num] = index"},{"question":"In a distant galaxy, there is a species of intelligent robots known as the Gearbots. Each Gearbot is powered by a sequence of gears, represented as a string of lowercase letters where each unique letter stands for a different type of gear. The Gearbots have an ancient prophecy which states that the balance of a Gearbot\'s power sequence is determined by how well it can alternate two different types of gears. Specifically, a Gearbot\'s power sequence is balanced if for two chosen types of gears (say \'a\' and \'b\'), the sequence alternates between these two gears starting with either one (i.e., \\"ababab...\\", \\"bababa...\\"). Given any power sequence, the Gearbots need to decide whether they can rearrange their gears to form such an alternating sequence using exactly two different types of gears. Write a function to help the Gearbots determine if this is possible. ------ Input Format ------ - The first line contains T, the number of test cases. - For each test case, one line contains a single string S, representing the power sequence of a Gearbot. ------ Output Format ------ For each test case, output \\"YES\\" if it is possible to rearrange the string into an alternating sequence using exactly two different types of gears, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 10^5 The input strings consist of lowercase English letters only. ------ Sample Input ------ 4 abba abcabc aaabbb abccba ------ Sample Output ------ YES NO YES NO ------ Explanation ------ Test Case 1: The string \\"abba\\" can be rearranged to \\"abab\\", which is an alternating sequence of two different gears, thus \\"YES\\". Test Case 2: The string \\"abcabc\\" involves three unique gears, and no rearrangement with two gears will work, thus \\"NO\\". Test Case 3: The string \\"aaabbb\\" can be rearranged to \\"ababab\\", which is an alternating sequence of two different gears, thus \\"YES\\". Test Case 4: The string \\"abccba\\" involves three unique gears, and no rearrangement with two gears will work, thus \\"NO\\".","solution":"def can_form_alternating_sequence(s): from collections import Counter counter = Counter(s) if len(counter) != 2: return \\"NO\\" a, b = counter.values() if abs(a - b) > 1: return \\"NO\\" return \\"YES\\" def gearbot_sequences(t, sequences): results = [] for s in sequences: results.append(can_form_alternating_sequence(s)) return results"},{"question":"Write a function that reads a string of space-separated integers and returns the median of those integers. The median is the value separating the higher half from the lower half of a data sample. If there is an odd number of integers, the median is the middle number. If there is an even number of integers, the median is the average of the two middle numbers. Input A single line containing space-separated integers. The input is guaranteed to contain at least one integer. Output Print a single float value rounded to 1 decimal place which represents the median of the given integers. Example Input 3 1 2 5 4 Output 3.0 Input 10 20 30 40 Output 25.0","solution":"def find_median(s): Returns the median of a space-separated string of integers. numbers = list(map(int, s.split())) numbers.sort() n = len(numbers) mid = n // 2 if n % 2 == 0: median = (numbers[mid - 1] + numbers[mid]) / 2 else: median = numbers[mid] return round(median, 1)"},{"question":"A coding competition involves a series of challenges that require participants to convert decimal numbers to equivalent Roman numerals. Roman numerals have seven symbols: text{I}, text{V}, text{X}, text{L}, text{C}, text{D}, and text{M}, which represent the values 1, 5, 10, 50, 100, 500, and 1000, respectively. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not text{IIII}. Instead, the number four is written as text{IV}. Because the one is before the five, we subtract it making four. The same principle applies to the number nine, which is written as text{IX}. There are six instances where subtraction is used: - text{I} can be placed before text{V} (5) and text{X} (10) to make 4 and 9. - text{X} can be placed before text{L} (50) and text{C} (100) to make 40 and 90. - text{C} can be placed before text{D} (500) and text{M} (1000) to make 400 and 900. Given a decimal integer, your task is to convert it to its Roman numeral representation. Input Format The first line contains an integer, mathbf{T}, denoting the number of test cases. Each of the T subsequent lines defines a test case. Each test case contains a single integer, N. Constraints 1 leq T leq 100 1 leq N leq 3999 Output Format For each test case, print the Roman numeral representation of the given integer N on a new line. Sample Input 2 3 58 Sample Output III LVIII Explanation Test Case 0: The number 3 is represented as text{III} in Roman numerals. Test Case 1: The number 58 is represented as text{LVIII} in Roman numerals, since 50 is text{L}, 5 is text{V}, and 3 is text{III}.","solution":"def int_to_roman(num): Converts an integer to a Roman numeral. value = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] symbol = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman = \'\' for i in range(len(value)): while num >= value[i]: num -= value[i] roman += symbol[i] return roman def convert_decimals_to_roman(test_cases): Given a list of integers, converts each integer to its Roman numeral representation. results = [] for num in test_cases: results.append(int_to_roman(num)) return results"},{"question":"You are given two strings, `s` and `t`, consisting only of lowercase English letters. You need to determine the minimum number of characters that need to be inserted into `s` such that `t` becomes a subsequence of `s`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. -----Input----- The first line contains a single string `s` (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. The second line contains a single string `t` (1 ≤ |t| ≤ 10^5) consisting of lowercase English letters. It is guaranteed that `t` is not longer than `s`. -----Output----- In a single line print the minimum number of characters that need to be inserted into `s`. -----Examples----- Input abc ab Output 0 Input abc ac Output 0 Input abc abc Output 0 Input abc abcd Output 1 -----Note----- In the first sample `t` is already a subsequence of `s`, so no insertions are necessary. In the last sample we need one insertion to make `t` a subsequence of `s`, for example, we can insert \'d\' at the end of `s`.","solution":"def min_insertions_to_subsequence(s, t): Determine the minimum number of characters that need to be inserted into `s` such that `t` becomes a subsequence of `s`. :param s: str - the original string :param t: str - the string to become a subsequence :return: int - minimum number of insertions m, n = len(s), len(t) i, j = 0, 0 # index for s and t, respectively while i < m and j < n: if s[i] == t[j]: j += 1 i += 1 # If j is equal to n, all characters of t are found in s in order # Otherwise, we need to insert the remaining characters of t return n - j"},{"question":"You are given a string representing a decimal number. Write a function that converts the decimal number string to its binary representation, without using any built-in Python functions for conversion. The binary representation should be returned as a string prefixed with \\"0b\\". Complete the function `decimal_to_binary(dec_str)` that takes a string `dec_str` and returns its binary representation as a string. Examples ``` \\"10\\" ==> \\"0b1010\\" \\"255\\" ==> \\"0b11111111\\" \\"0\\" ==> \\"0b0\\" \\"1\\" ==> \\"0b1\\" ``` Constraints - The input string will only contain numeric characters and will not have any leading zeros unless it is \\"0\\".","solution":"def decimal_to_binary(dec_str): Converts a decimal number string to its binary representation. Parameters: - dec_str (str): A string representing the decimal number. Returns: - str: The binary representation prefixed with \'0b\'. if dec_str == \\"0\\": return \\"0b0\\" decimal_number = int(dec_str) binary_rep = \'\' while decimal_number > 0: binary_rep = str(decimal_number % 2) + binary_rep decimal_number = decimal_number // 2 return \\"0b\\" + binary_rep"},{"question":"Raj has a stack of books he wants to organize. Each book has a unique identifier (ID), which is a positive integer. He can perform the following operations: 1. Add a book to the top of the stack. 2. Remove the book from the top of the stack. 3. Check whether a specific book with a given ID is in the stack. Raj will perform a series of these operations, and your task is to help him by implementing a function `process_operations` to perform the operations and return the results of the \'check\' operations. Write a function: ```python def process_operations(operations: List[Tuple[str, int]]) -> List[str]: pass ``` where: - `operations` is a list of tuples, where each tuple contains a string and an integer. The string will be one of \\"add\\", \\"remove\\", or \\"check\\", and the integer will be the book\'s ID. The \\"check\\" operation should return \\"YES\\" if the book is in the stack, and \\"NO\\" otherwise. - The function should return a list of strings with the results of the \\"check\\" operations in the order they appear in the input list. Example 1: ```python operations = [(\\"add\\", 5), (\\"add\\", 3), (\\"check\\", 5), (\\"remove\\", 3), (\\"check\\", 3)] print(process_operations(operations)) # Output: [\\"YES\\", \\"NO\\"] ``` Example 2: ```python operations = [(\\"add\\", 7), (\\"check\\", 7), (\\"remove\\", 7), (\\"check\\", 7)] print(process_operations(operations)) # Output: [\\"YES\\", \\"NO\\"] ``` Your task is to complete the function `process_operations` that takes a list of operations and returns the results of the \\"check\\" operations. Constraints: - 1 ≤ number of operations ≤ 10^5 - 1 ≤ book ID ≤ 10^6 Expected Time Complexity: O(N) Expected Auxiliary Space: O(N)","solution":"def process_operations(operations): stack = [] results = [] for operation in operations: action, book_id = operation if action == \\"add\\": stack.append(book_id) elif action == \\"remove\\": if stack: stack.pop() elif action == \\"check\\": if book_id in stack: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are developing a text processing application, and one of the functionalities you need to implement is finding all occurrences of a given word in a large text and highlighting them. The word may appear in different forms including having punctuation attached to it or having varying cases (e.g., \\"word\\", \\"Word\\", \\"WORD\\", \\"word.\\" should all be considered as occurrences of the word \\"word\\"). Write a function that takes two arguments: the first is the word to be searched for, and the second is the body of text in which the word should be searched. The function should return the text with all occurrences of the word surrounded by `<< >>`. # Input - A single line containing the word to be searched for (1 ≤ length of the word ≤ 100). - Multiple lines containing the body of text (1 ≤ length of the text ≤ 100,000 characters). # Output - Output the body of text with all occurrences of the word surrounded by `<< >>`. # Example Input ``` word This is a test. The Word should be highlighted. So will other forms like WORD and word. ``` Output ``` This is a test. The <<Word>> should be highlighted. So will other forms like <<WORD>> and <<word>>. ``` # Notes - The search should be case-insensitive. - Punctuation marks joined to the word should be considered part of the occurrence. - Use `<< >>` to highlight every occurrence in the text.","solution":"import re def highlight_occurrences(word, text): Highlight all occurrences of a word in a text with double angle brackets `<< >>`. Args: word (str): The word to be searched in the text. text (str): The body of text where we search for the word. Returns: str: The text with all occurrences of the word surrounded by `<< >>`. # Create a regex pattern to match the word with boundaries and case insensitive pattern = re.compile(r\'b\' + re.escape(word) + r\'b\', re.IGNORECASE) # Use a replacement function to add `<< >>` def replacer(match): return f\'<<{match.group(0)}>>\' # Replace all occurrences highlighted_text = pattern.sub(replacer, text) return highlighted_text"},{"question":"You are given an array of integers and an integer `x`. Your task is to rearrange the array such that the difference between the highest and lowest number in the array is minimized, but the array must be partitioned into exactly `x` subarrays with each subarray having at least one element. Once the array is partitioned into `x` subarrays, you are to sort each subarray individually in ascending order and output the concatenated result of these sorted subarrays. -----Input----- The first line contains the number of test cases T (1 le T le 50). Each of the next T lines contains two inputs: 1. A positive integer `x` (1 le x le n), where `n` is the length of the array. 2. An array of n integers, where (1 le n le 1000) and each integer of the array is in the range (1 le a_i le 1000). -----Output----- For each test case, output the concatenated result of the sorted subarrays which minimizes the difference between the highest and lowest subarray. If there are multiple answers, output any. -----Examples----- Input 2 3 1 9 8 3 5 6 7 2 4 1 3 2 7 8 Output 1 3 5 7 9 6 8 1 3 4 2 7 8 -----Note----- None","solution":"def minimal_difference_partition(x, arr): Partition the array into x subarrays such that the difference between the highest and lowest number in the array is minimized, then sort each subarray individually and concatenate the results. n = len(arr) arr_sorted = sorted(arr) # Divide the sorted array into x nearly equal parts subarrays = [] for i in range(x): subarrays.append(arr_sorted[i*n//x:(i+1)*n//x]) # Sort each subarray individually (they are already sorted as we sliced from a sorted array) # but to adhere strictly to the requirement for subarray in subarrays: subarray.sort() # Concatenate the sorted subarrays result = [] for subarray in subarrays: result.extend(subarray) return result"},{"question":"In a certain country, the currency system uses four types of coins with values A, B, C, and D. You wish to make an exact amount of money, S, using the fewest number of coins possible. Write a program that determines the minimum number of coins needed to make the amount S. If it is not possible to create the amount using the given coin values, the program should return -1. -----Constraints----- - 1 leq A, B, C, D leq 1000 - 1 leq S leq 10^5 -----Input----- Input is given from Standard Input in the following format: A B C D S -----Output----- Print the minimum number of coins needed to make the amount S. If it is not possible to make the amount S with the given coins, print -1. -----Sample Input----- 1 3 4 5 7 -----Sample Output----- 2 There are two ways to make the amount 7 using the coins, with the fewest number of coins being 2: - 1 + 1 + 1 + 1 + 1 + 1 + 1 (7 coins) - 3 + 4 (2 coins) Thus, the output is 2.","solution":"def min_coins(A, B, C, D, S): Determines the minimum number of coins needed to make the exact amount S. If it is not possible to create the amount using the given coin values, returns -1. coins = [A, B, C, D] # Initialize a large enough array to keep track of the minimum number of coins for amounts up to S dp = [float(\'inf\')] * (S + 1) dp[0] = 0 # Base case: 0 coins are needed to make 0 amount for coin in coins: for x in range(coin, S + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return -1 if dp[S] == float(\'inf\') else dp[S]"},{"question":"You are given an array of integers and a list of commands. Each command specifies an action that needs to be performed on the array: either adding a new integer to the end of the array, removing the last integer from the array, or retrieving the integer at a specific position in the array. Write a program to execute the commands and produce the output for the retrieval commands. Constraints * 0 leq value of an integer in the array leq 10^9 * 1 leq number of commands leq 1000 * The array\'s initial length is 0. * All the positions given in the retrieval commands will be valid. Input In the first line, the number of commands n is given. In the following n lines, each command is given. A command is one of the following: - \\"add x\\": Add integer x to the end of the array. - \\"remove\\": Remove the last integer from the array. - \\"get k\\": Retrieve the integer at the k-th position (0-based index). Output For each \\"get\\" command, print the retrieved integer on a new line. Example Input 6 add 5 add 10 get 1 remove get 0 get 0 Output 10 5 5","solution":"def execute_commands(n, commands): array = [] results = [] for command in commands: if command.startswith(\\"add\\"): _, value = command.split() array.append(int(value)) elif command == \\"remove\\": if array: array.pop() elif command.startswith(\\"get\\"): _, index = command.split() results.append(array[int(index)]) return results"},{"question":"You are given a string S and you have to perform Q queries. In each query, you need to replace all occurrences of a character C1 in the string with another character C2. After performing all the queries sequentially, print the final string. -----Constraints----- - 1≤|S|≤10^5 (length of the string) - 1≤Q≤10^5 (number of queries) - S consists of lowercase English letters. - C1 and C2 are lowercase English letters. -----Input----- Input is given from Standard Input in the following format: S Q C1_1 C2_1 : C1_Q C2_Q -----Output----- Print the final string after performing all Q queries. -----Sample Input----- abcd 2 a x b y -----Sample Output----- xycd Explanation: The initial string is \\"abcd\\". After the first query \\"a x\\", the string becomes \\"xbcd\\". After the second query \\"b y\\", the string becomes \\"xycd\\".","solution":"def perform_queries(s, queries): Replace all occurrences of characters in the string as per the queries. :param s: Initial string :param queries: List of tuples where each tuple contains (C1, C2) :return: Modified string after performing all queries s_list = list(s) for c1, c2 in queries: s_list = [c2 if ch == c1 else ch for ch in s_list] return \'\'.join(s_list) def main(s, q, queries): return perform_queries(s, queries)"},{"question":"Write a program that determines if given three lengths can form a triangle. Conditions for a valid triangle: - The sum of any two sides should be greater than the third side. Given three integers a, b, and c, the program should print \\"Yes\\" if they can form a triangle, otherwise print \\"No\\". Constraints: * 1 ≤ a, b, c ≤ 1000 Input: Three integers a, b, and c separated by a single space in a line. Output: Print \\"Yes\\" if the integers can form a triangle, otherwise print \\"No\\". Examples: Input 3 4 5 Output Yes Input 1 1 2 Output No Input 6 8 10 Output Yes","solution":"def can_form_triangle(a, b, c): Determines if the given sides can form a triangle. A triangle is valid if the sum of any two sides is greater than the third side. Parameters: a (int): the length of the first side b (int): the length of the second side c (int): the length of the third side Returns: str: \\"Yes\\" if the sides can form a triangle, otherwise \\"No\\" if a + b > c and b + c > a and c + a > b: return \\"Yes\\" else: return \\"No\\" # Example usage: # print(can_form_triangle(3, 4, 5)) # Output should be \\"Yes\\" # print(can_form_triangle(1, 1, 2)) # Output should be \\"No\\""},{"question":"Given a matrix of size N x M containing only the characters \'A\', \'B\', and \'C\', you need to determine the minimum number of operations required to convert each element in the matrix to \'A\'. You can perform the following operation any number of times (possibly zero): - Select a single element and change its value to any of \'A\', \'B\', or \'C\'. You are required to output the minimum number of operations needed for each test case. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case starts with two integers, N and M, denoting the dimensions of the matrix. - The following N lines contain M characters each, representing the matrix. ------ Output Format ------ For each test case, output a single line containing the minimum number of operations needed to convert all elements of the matrix to \'A\'. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N, M ≤ 1000 The matrix consists of only \'A\', \'B\', and \'C\'. ------ Sample Input 1 ------ 2 3 3 AAB CBA BCA 2 2 BC CA ------ Sample Output 1 ------ 5 3 ------ Explanation 1 ------ Test case 1: By converting the characters positions (1,3), (2,1), (2,3), (3,2) and (3,3) to \'A\', we can achieve the desired matrix \\"AAA, AAA, AAA\\". Test case 2: By converting (1,1), (2,1) and (2,2) to \'A\', we can achieve the desired matrix \\"AA, AA\\".","solution":"def min_operations_to_convert_to_A(T, test_cases): results = [] for test in test_cases: N, M, matrix = test[\'N\'], test[\'M\'], test[\'matrix\'] operations = 0 for row in matrix: for char in row: if char != \'A\': operations += 1 results.append(operations) return results # Example Usage T = 2 test_cases = [ {\'N\': 3, \'M\': 3, \'matrix\': [\'AAB\', \'CBA\', \'BCA\']}, {\'N\': 2, \'M\': 2, \'matrix\': [\'BC\', \'CA\']} ] print(min_operations_to_convert_to_A(T, test_cases)) # Output: [5, 3]"},{"question":"You have been given a list of students and their corresponding scores for an exam. Your task is to identify the student with the highest score. If multiple students have the highest score, return the name of the student who appears first in the input list. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of students. The next n lines contain pairs of a name and an integer score, separated by a space. The names are non-empty lines consisting of uppercase and lowercase Latin letters whose lengths do not exceed 20 symbols. The scores are integers between 0 and 100 inclusive. Output Print the name of the student with the highest score. If there are multiple students with the highest score, print the name of the first student in the input list who has that score. Examples Input 4 Alice 78 Bob 94 Charlie 94 Dave 90 Output Bob Input 3 Erin 85 Frank 85 George 84 Output Erin","solution":"def find_top_student(students): Returns the name of the student with the highest score. If multiple students have the same highest score, returns the name of the first student with the highest score. :param students: List of tuples where each tuple contains a name and a score :return: Name of the student with the highest score if not students: return \\"\\" top_student = students[0][0] top_score = students[0][1] for name, score in students: if score > top_score: top_student = name top_score = score return top_student"},{"question":"A robot is placed at the origin (0, 0) of a 2D grid. The robot can receive and execute commands to move in four possible directions: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Each command moves the robot exactly one unit in the specified direction. The robot needs to execute a series of commands to reach a target point (x, y). Write a function that determines whether it is possible for the robot to reach the point (x, y) given a string of commands. If it is possible for the robot to reach the target point, the function should return \\"YES\\", otherwise it should return \\"NO\\". -----Input----- The first line contains two integers x and y (-10^9 ≤ x, y ≤ 10^9) — the coordinates of the target point. The second line contains a string s (1 ≤ |s| ≤ 10^6) — the sequence of commands consisting of the characters \'U\', \'D\', \'L\', and \'R\'. -----Output----- Print \\"YES\\" if the robot can reach the target point (x, y) by following the given sequence of commands. Otherwise, print \\"NO\\". -----Examples----- Input 2 3 UUURRR Output YES Input -1 1 UDLR Output NO -----Note----- In the first example, the robot can move up three times and then move right two times to reach the point (2, 3), following the sequence \\"UUURRR\\". In the second example, regardless of the sequence \\"UDLR\\", the robot can\'t reach the point (-1, 1).","solution":"def can_reach_target(x, y, commands): Determines if the robot can reach the point (x, y) given a series of commands. # Initialize the current position current_x, current_y = 0, 0 # Dictionary to map commands to movements moves = {\'U\': (0, 1), \'D\': (0, -1), \'L\': (-1, 0), \'R\': (1, 0)} # Execute each command for command in commands: move_x, move_y = moves[command] current_x += move_x current_y += move_y # Check if robot has reached the target if current_x == x and current_y == y: return \\"YES\\" # Check final position as well in case loop did not catch the correct moment if current_x == x and current_y == y: return \\"YES\\" return \\"NO\\""},{"question":"Create a function that takes a square matrix of integers and returns a new matrix that is the transpose of the original matrix. The transpose of a matrix is formed by switching the rows and columns of the original matrix. # Function Signature ```python def transpose_matrix(matrix: List[List[int]]) -> List[List[int]]: pass ``` # Input - A 2D list `matrix` where `matrix[i][j]` is the element in the ith row and jth column of the matrix and `1 ≤ len(matrix), len(matrix[0]) ≤ 100`. # Output - A 2D list that is the transpose of the input matrix. # Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] transpose_matrix(matrix) ``` Expected Output ```python [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] ``` # Explanation The transpose of the matrix is obtained by swapping rows with columns. For example, the first row of the original matrix becomes the first column of the new matrix, the second row becomes the second column, and so on. # Constraints - The input matrix will always be a square matrix (number of rows equals number of columns).","solution":"from typing import List def transpose_matrix(matrix: List[List[int]]) -> List[List[int]]: Returns the transpose of a given square matrix. Args: matrix (List[List[int]]): A 2D list of integers representing the square matrix. Returns: List[List[int]]: The transpose of the input matrix. n = len(matrix) transposed = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): transposed[j][i] = matrix[i][j] return transposed"},{"question":"You are given a rectangular matrix of integers where each cell represents a height at that point. Your task is to find the highest point in the matrix and the distance from the highest point to the lowest point in the matrix. The distance between two points `(x1, y1)` and `(x2, y2)` is defined as the absolute difference of their heights. To summarize: - Identify the highest point(s) in the matrix. - Identify the lowest point(s) in the matrix. - Compute the distance as the difference in their heights. Input: - The first line contains two integers `n` and `m` representing the number of rows and columns in the matrix, respectively (2 ≤ n, m ≤ 100). - The next `n` lines each contain `m` integers separated by spaces, representing the heights in the matrix (-10^4 ≤ height ≤ 10^4). Output: - A single integer representing the maximum distance between the highest and lowest points in the matrix. Example: Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 8 ``` Explanation: - The highest point is 9 and the lowest point is 1. - The distance between these points is 9 - 1 = 8.","solution":"def find_max_distance(n, m, matrix): Find the highest and lowest points in the matrix and compute the distance between them. :param n: Number of rows in the matrix :param m: Number of columns in the matrix :param matrix: The matrix containing heights :return: Maximum distance between highest and lowest points max_height = -float(\'inf\') min_height = float(\'inf\') for row in matrix: for height in row: if height > max_height: max_height = height if height < min_height: min_height = height return max_height - min_height"},{"question":"Rotate the elements of a list to the right by a specified number of steps. The rotation should wrap elements around, such that elements shifted off the end appear at the front. Constraints * 1 ≤ length of the list ≤ 100000 * -1000000 ≤ each element value ≤ 1000000 * 0 ≤ number of steps ≤ 100000 Input In the first line, a space-separated list of integers is given. In the second line, an integer indicating the number of steps to rotate is given. Output Print the rotated list as a space-separated list of integers. Examples Input 1 2 3 4 5 2 Output 4 5 1 2 3 Input -1 -100 50 22 0 3 Output 50 22 0 -1 -100 Input 10 20 30 0 Output 10 20 30","solution":"def rotate_list(nums, steps): Rotates the list to the right by the specified number of steps. :param nums: List of integers to be rotated :param steps: Number of steps to rotate the list :return: Rotated list n = len(nums) steps = steps % n # If steps is greater than n, taking the modulus gives the effective steps return nums[-steps:] + nums[:-steps] # Example Usage (can be removed in the final code) if __name__ == \\"__main__\\": input_list = list(map(int, input().split())) steps = int(input()) rotated_list = rotate_list(input_list, steps) print(\\" \\".join(map(str, rotated_list)))"},{"question":"# Task Given a list of integers, write a function to determine the maximum length of a contiguous subarray with an equal number of 1s and -1s. Your program should return the length of this subarray. The function should follow the signature: ``` int findMaxLength(List<int> nums) ``` Example For the input list `[1, -1, 1, 1, -1, -1, 1, -1]`, your function should return `8`. For the input list `[1, 1, -1, -1, 1]`, your function should return `4`. Input/Output - `[input]` list of integers `nums` A list containing only the integers `1` and `-1` - `[output]` an integer The maximum length of the contiguous subarray that contains an equal number of 1s and -1s.","solution":"def findMaxLength(nums): Returns the maximum length of a contiguous subarray with an equal number of 1s and -1s. max_length = 0 count = 0 count_index_map = {0: -1} for i, num in enumerate(nums): if num == 1: count += 1 else: count -= 1 if count in count_index_map: max_length = max(max_length, i - count_index_map[count]) else: count_index_map[count] = i return max_length"},{"question":"Check the Tutorial tab to learn how to solve this problem. Task The provided code stub reads an integer, m, from STDIN. For each integer, a, in the inclusive range from 1 to m: - If a is multiple of 3 and not multiple of 5, print `Fizz` - If a is multiple of 5 and not multiple of 3, print `Buzz` - If a is multiple of both 3 and 5, print `FizzBuzz` - If a is not multiple of either 3 or 5, print the value of a Example m=5 The output for each value in the range from 1 to 5 is: ``` 1 2 Fizz 4 Buzz ``` Input Format The first and only line contains the integer, m. Constraints 1 leq m leq 50 Output Format Print m lines, each corresponding to the evaluation of each boldsymbol{a}. Sample Input 0 15 Sample Output 0 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz","solution":"def fizz_buzz(m): Prints numbers from 1 to m with special rules: - For multiples of 3, prints \'Fizz\' - For multiples of 5, prints \'Buzz\' - For multiples of both 3 and 5, prints \'FizzBuzz\' - Otherwise, prints the number for a in range(1, m + 1): if a % 3 == 0 and a % 5 == 0: print(\'FizzBuzz\') elif a % 3 == 0: print(\'Fizz\') elif a % 5 == 0: print(\'Buzz\') else: print(a)"},{"question":"Alice wants to generate all possible arrangements of a given set of characters, but with a constraint. She wants only those arrangements where the characters \\"A\\" and \\"B\\" do not appear next to each other. Write a program to help Alice find the total number of such valid arrangements given a set of unique characters. Input The single line contains a string s (1 ≤ |s| ≤ 8) consisting of unique uppercase English letters. Output In the single line, print the only number — the total number of valid arrangements where \\"A\\" and \\"B\\" do not appear next to each other. Examples Input ABC Output 2 Input ABCD Output 12 Note In the first sample: The valid arrangements of ABC are: - ACB - BAC In the second sample: The valid arrangements of ABCD are: - ACBD, ACDB, ADBC, BAD, BCDA - BACD, BCAD, BDAC, CADB, CDAB, DACA, DACB","solution":"from itertools import permutations def count_valid_permutations(s): Returns the number of valid permutations of the string `s` where characters \'A\' and \'B\' do not appear next to each other. def is_valid(perm): for i in range(len(perm) - 1): if (perm[i] == \'A\' and perm[i+1] == \'B\') or (perm[i] == \'B\' and perm[i+1] == \'A\'): return False return True perms = permutations(s) valid_perms = [perm for perm in perms if is_valid(perm)] return len(valid_perms)"},{"question":"Write a function `largestPrimeFactor(n)` that takes a positive integer `n` and returns its largest prime factor. For example, `largestPrimeFactor(15)` returns 5, and `largestPrimeFactor(17)` returns 17 since 17 is a prime number itself. Note: Your solution should be efficient enough to handle large values of `n`.","solution":"def largestPrimeFactor(n): Returns the largest prime factor of the given number n. def is_prime(x): if x <= 1: return False if x <= 3: return True if x % 2 == 0 or x % 3 == 0: return False i = 5 while i * i <= x: if x % i == 0 or x % (i + 2) == 0: return False i += 6 return True # Start dividing n by 2 until it\'s odd while n % 2 == 0: max_prime = 2 n //= 2 # Check odd factors starting from 3 factor = 3 while factor * factor <= n: while n % factor == 0: max_prime = factor n //= factor factor += 2 # If n is still greater than 2, then it is prime if n > 2: max_prime = n return max_prime"},{"question":"You are given a matrix of integers with dimensions n x m. You can select any submatrix and flip all the zeroes within that submatrix to ones, and all ones within the submatrix to zeroes. Your goal is to maximize the number of rows in the matrix that contain an even number of ones. Write a function that, given the matrix dimensions n and m, and the matrix itself, returns the maximum number of rows with an even number of ones after performing any number of submatrix flips. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100). The next n lines each contain exactly m integers, the elements of the matrix (each element is either 0 or 1). Output Print one integer — the maximum number of rows with an even number of ones after performing any number of submatrix flips. Examples Input 3 3 1 0 1 0 1 0 1 1 0 Output 3 Input 2 2 1 1 1 0 Output 2 Input 4 2 1 0 0 0 1 1 0 1 Output 4 Note In the first example, flipping the submatrix that includes the entire first and second rows will result in both rows having an even number of ones. In the second example, flipping the entire second row will result in both rows having an even number of ones. In the third example, the matrix already has all rows with an even number of ones.","solution":"def maximize_even_ones_rows(n, m, matrix): def count_ones(row): return sum(row) def row_parity(row): return sum(row) % 2 flip_count = {} for row in matrix: parity_pattern = tuple(row_parity([(a ^ b) for a, b in zip(row, row)]) for row in matrix) if parity_pattern in flip_count: flip_count[parity_pattern] += 1 else: flip_count[parity_pattern] = 1 max_even_rows = max(flip_count.values(), default=0) return max_even_rows"},{"question":"Write a function `find_median` that calculates the median of a list of numbers. The median is the value separating the higher half from the lower half of a data set. If the list has an even number of elements, the median will be the average of the two middle numbers. Implement `find_median` to achieve the following: - If the input list is empty, return `None`. - The function should handle lists with both integer and float numbers. - You need to achieve a time complexity of O(n log n) due to the sorting step. **Function Signature:** ```python def find_median(nums: List[Union[int, float]]) -> Union[int, float, None]: pass ``` # Example: ```python find_median([1, 3, 2]) # Returns 2 find_median([1, 4, 3, 2]) # Returns 2.5 find_median([]) # Returns None find_median([1]) # Returns 1 ``` # Constraints: - List input `nums` may contain an arbitrary number of elements. - Allowed data types in `nums` are integers and floats. - The sorting step should be in O(n log n) time complexity.","solution":"from typing import List, Union def find_median(nums: List[Union[int, float]]) -> Union[int, float, None]: Finds the median of a list of numbers. :param nums: List of integers or floats. :return: Median of the list or None if the list is empty. n = len(nums) if n == 0: return None sorted_nums = sorted(nums) if n % 2 == 1: return sorted_nums[n // 2] else: return (sorted_nums[n // 2 - 1] + sorted_nums[n // 2]) / 2"},{"question":"Write a function that takes a list of integers and returns a new list where each integer is replaced by the product of all the integers in the original list except the integer at the current position. Constraints * The length of the input list is 2 leq n leq 10^4 * All elements of the input list are integers -100 leq a_i leq 100 * The product of all elements will fit within the range of a 32-bit signed integer Input A list of n integers. Output A list of n integers where each integer is the product of all other integers in the input list. Examples Input [1, 2, 3, 4] Output [24, 12, 8, 6] Input [-1, 2, -3, 4] Output [-24, 12, -8, 6]","solution":"def product_except_self(nums): Returns a list such that, for each element at index i of the output list, is the product of all the numbers in the original list except nums[i]. # Initialize the length of nums length = len(nums) # Create two empty arrays to hold the prefix and suffix products prefix = [1] * length suffix = [1] * length result = [1] * length # Populate the prefix array for i in range(1, length): prefix[i] = prefix[i - 1] * nums[i - 1] # Populate the suffix array for i in range(length - 2, -1, -1): suffix[i] = suffix[i + 1] * nums[i + 1] # Populate the result array for i in range(length): result[i] = prefix[i] * suffix[i] return result"},{"question":"Write a function that takes a single string and returns True if the string contains valid parentheses, otherwise returns False. Parentheses are considered valid if they correspond to the following rules: 1. Open parentheses must be closed by the same type of parentheses. 2. Open parentheses must be closed in the correct order. The string may contain the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and will be considered as valid if it satisfies the above conditions. ------ Input Format ------ - A single string s with length no more than 10^4. ------ Output Format ------ - A single boolean value: True if the string contains valid parentheses, otherwise False. ------ Constraints ------ - The string will only contain the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. - The length of the string is at most 10^4. ----- Sample Input 1 ------ \\"()\\" \\"()[]{}\\" \\"(]\\" \\"([)]\\" \\"{[]}\\" ----- Sample Output 1 ------ True True False False True ----- Explanation ------ Test Case 1: \\"()\\" contains matching and correctly ordered parentheses. Test Case 2: \\"()[]{}\\" contains matching and correctly ordered parentheses of various types. Test Case 3: \\"(]\\" contains correctly ordered parenthesis, but they are not of the same type. Test Case 4: \\"([)]\\" contains matching parentheses, but they are not correctly ordered. Test Case 5: \\"{[]}\\" contains matching and correctly ordered parentheses of various types.","solution":"def is_valid_parentheses(s): Returns True if the string contains valid parentheses, otherwise False. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"You are given a list of n numbers where all numbers are between 1 and n-1 inclusive, and each number appears exactly once except for one number which appears twice. Your task is to identify the duplicate number. -----Input----- - The first line contains a single integer n (2 leq n leq 1000) — the number of elements in the list. - The second line contains n integers separated by space, representing the numbers in the list. -----Output----- - Output the duplicate number. -----Examples----- Input 5 4 3 2 1 4 Output 4 Input 6 1 3 2 5 4 5 Output 5 -----Note----- In the first example, the number 4 appears twice. In the second example, the number 5 appears twice.","solution":"def find_duplicate(n, nums): Function to find the duplicate number in the list. num_set = set() for num in nums: if num in num_set: return num num_set.add(num) return None"},{"question":"In this exercise, you will be given a list of mixed data types: positive integers, strings containing only digits, and floats. Your task is to sort this list such that all integers appear first in ascending order, followed by all floats in ascending order, and finally all digit-strings in lexicographical order. For example, ```python mixed_list = [3, \\"45\\", 2.5, 1, 99, 7.75, \\"3\\", 12.5] sort_mixed_list(mixed_list) => [1, 3, 99, 2.5, 7.75, 12.5, \\"3\\", \\"45\\"] ``` Create a function `sort_mixed_list(mixed_list)` that takes a list of mixed data types and returns a sorted list following the rules above.","solution":"def sort_mixed_list(mixed_list): Sorts a list of mixed data types (integers, digit-strings, and floats) such that all integers appear first in ascending order, followed by all floats in ascending order, and finally all digit-strings in lexicographical order. Args: mixed_list (list): A list of mixed data types. Returns: list: A sorted list following the described rules. integers = sorted([x for x in mixed_list if isinstance(x, int)]) floats = sorted([x for x in mixed_list if isinstance(x, float)]) digit_strings = sorted([x for x in mixed_list if isinstance(x, str) and x.isdigit()]) return integers + floats + digit_strings"},{"question":"You are given a number of colored socks in a box. Each sock has a respective color and there might be multiple socks of the same color. Your task is to determine the minimum number of single socks that must be added so that every sock has a matching pair of the same color. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of socks in the box. The second line contains n integers, a_i (1 ≤ a_i ≤ 1000), representing the color of each sock. Output Output a single integer — the minimum number of single socks that need to be added to ensure that every sock has a matching pair of the same color. Examples Input 5 1 2 1 2 3 Output 1 Input 4 1 1 2 3 Output 2 Note In the first example, the socks are [1, 2, 1, 2, 3]. There is one sock of color 3 that does not have a pair, so we need to add one more sock of color 3. In the second example, the socks are [1, 1, 2, 3]. There is one sock of color 2 and one sock of color 3 without pairs. Therefore, two more socks need to be added: one of color 2 and one of color 3.","solution":"def min_socks_to_add(n, socks): Returns the minimum number of single socks that need to be added to ensure that every sock has a matching pair of the same color. Parameters: n (int): Number of socks in the box. socks (List[int]): List of integers representing colors of each sock. Returns: int: Minimum number of single socks to be added. from collections import Counter sock_counter = Counter(socks) additions_needed = 0 for count in sock_counter.values(): if count % 2 != 0: additions_needed += 1 return additions_needed"},{"question":"Ana and Bob are playing a game with two strings. Given two strings, `s1` and `s2`, both consisting of lowercase English alphabet characters, they want to find the length of the longest common subsequence (LCS) between the two strings. A subsequence of a string is obtained by deleting any number of characters (possibly zero) from the string without changing the order of the remaining characters. The objective is to determine the longest sequence that appears in both strings as a subsequence. -----Input----- The first line contains the string `s1` (1 ≤ |s1| ≤ 1000). The second line contains the string `s2` (1 ≤ |s2| ≤ 1000). -----Output----- Print the single integer— the length of the longest common subsequence between `s1` and `s2`. -----Examples----- Input abcde ace Output 3 Input abc def Output 0 -----Note----- In the first sample, the longest common subsequence between `s1` and `s2` is \\"ace\\", which has a length of 3. In the second sample, there is no common subsequence between `s1` and `s2`, so the answer is 0.","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence between two strings s1 and s2. m, n = len(s1), len(s2) # Create a 2D array to store the length of LCS dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"The National Treasure Hunt is an annual event where N teams participate in a series of treasure hunting challenges. Each team must find and submit treasures in different locations spread across a vast area. The objective of each challenge is to find the most valuable treasure in a given location. Each treasure has a unique value assigned to it. The rules for a single challenge are as follows: - Each team submits one treasure they found in a location, identified by its value. - If a team submits a treasure with the highest value among all teams, they earn points equal to that value. - If multiple teams submit treasures with the same highest value, only one of them (chosen arbitrarily) will receive the points for that challenge. - Other teams that submitted non-highest value treasures earn no points for that challenge. Your task is to write a program to determine the total points each team has earned over all the challenges. # Input: The input consists of several lines: - The integer N (2 ≤ N ≤ 100) is written on the first line, representing the number of teams. - The integer M (1 ≤ M ≤ 50) is written on the second line, representing the number of challenges. - For the next N lines, each line contains M integers representing the values of treasures submitted by each team in each challenge. The numbers are separated by spaces. # Output: The output consists of N lines: - Each line contains an integer representing the total points earned by the corresponding team. # Example: Input: ``` 4 3 100 200 300 150 200 250 300 150 100 200 300 250 ``` Output: ``` 600 0 300 200 ``` # Explanation: - In challenge 1: Team 3 had the highest value of 300, so they earn 300 points. - In challenge 2: Team 4 had the highest value of 300, so they earn 300 points. - In challenge 3: Team 1 had the highest value of 300, so they earn 300 points. - For the given input, the total points are: - Team 1: 0 + 0 + 300 = 300 - Team 2: 0 + 0 + 0 = 0 - Team 3: 300 + 0 + 0 = 300 - Team 4: 0 + 300 + 0 = 300","solution":"def calculate_points(matrix): Calculates the total points earned by each team over all challenges. Args: matrix (list of list of int): 2D list where each row represents the values of treasures submitted by each team in each challenge. Returns: list of int: List where each element represents the total points earned by the corresponding team. num_teams = len(matrix) num_challenges = len(matrix[0]) points = [0] * num_teams for j in range(num_challenges): max_value = -1 max_team_index = -1 for i in range(num_teams): if matrix[i][j] > max_value: max_value = matrix[i][j] max_team_index = i points[max_team_index] += max_value return points # Function to process input data and call the calculate_points function def treasure_hunt_points(n, m, treasures): return calculate_points(treasures)"},{"question":"Jamie, a software engineer, loves playing with sequences of numbers. One day, she comes across a problem that catches her attention: There is a sequence of n integers, and she wants to determine the length of the longest contiguous (i.e., consecutive) subarray where the absolute difference between any two elements in that subarray is less than or equal to a given integer k. Jamie decides to use her coding skills to solve this problem. Can you help her find the solution? -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5) — the number of elements in the sequence and the given integer, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the elements of the sequence. -----Output----- Print one integer — the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to k. -----Examples----- Input 5 1 1 3 2 2 1 Output 3 Input 10 2 4 5 6 3 8 10 9 8 7 6 Output 4 -----Note----- In the first example, the longest contiguous subarray with absolute differences ≤ 1 is [3, 2, 2], which has a length of 3. In the second example, the longest contiguous subarray with absolute differences ≤ 2 is [8, 10, 9, 8], which has a length of 4.","solution":"def longest_contiguous_subarray(n, k, array): Returns the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to k. if not array or n == 0: return 0 left = 0 longest = 0 min_val = array[0] max_val = array[0] for right in range(n): min_val = min(min_val, array[right]) max_val = max(max_val, array[right]) while max_val - min_val > k: left += 1 min_val = min(array[left:right + 1]) max_val = max(array[left:right + 1]) longest = max(longest, right - left + 1) return longest"},{"question":"A large software company is conducting an employee satisfaction survey. Based on the survey results, the management wants to understand the sentiment and trends among the employees. They have a list of sentiment scores from each department, and they need to identify the departments with the highest and lowest average sentiment scores. The sentiment score for each department is given in integers ranging from 1 to 5, where 1 represents very dissatisfied, and 5 represents very satisfied. Your job is to compute the average sentiment score for each department and then determine which department has the highest and which has the lowest average score. If two departments have the same average score, the one with the alphabetically first name is considered higher or lower. Input The first line contains an integer `n`, the number of departments (1 ≤ n ≤ 1000). The next `n` lines each contain a department name followed by their sentiment scores. Each line will contain a department name (a non-empty string containing only lowercase letters), followed by a series of integers representing sentiment scores from employees of that department. There will be at least one sentiment score for each department, and the number of scores does not exceed 1000. Output Output two lines: - The first line should contain the name of the department with the highest average sentiment score. - The second line should contain the name of the department with the lowest average sentiment score. Example Input 3 sales 5 4 3 5 4 hr 2 3 4 3 engineering 5 5 4 5 5 4 5 3 Output engineering hr","solution":"def find_departments_with_extreme_sentiments(n, sentiments): Determines the department with the highest and lowest average sentiment score :param n: Number of departments :param sentiments: List of strings, each string contains a department name followed by sentiment scores :return: Tuple containing two strings: (department with the highest average sentiment, department with the lowest average sentiment) department_scores = {} for sentiment in sentiments: parts = sentiment.split() department_name = parts[0] scores = list(map(int, parts[1:])) avg_score = sum(scores) / len(scores) department_scores[department_name] = avg_score highest_dept = max(department_scores.items(), key=lambda x: (x[1], -ord(x[0][0])))[0] lowest_dept = min(department_scores.items(), key=lambda x: (x[1], ord(x[0][0])))[0] return highest_dept, lowest_dept # Example usage: n = 3 sentiments = [ \\"sales 5 4 3 5 4\\", \\"hr 2 3 4 3\\", \\"engineering 5 5 4 5 5 4 5 3\\" ] print(find_departments_with_extreme_sentiments(n, sentiments))"},{"question":"You are given a list of words and a target word. Your task is to determine if the target word can be formed by concatenating any two words from the list. If the target word can be formed, return the pair of words that form it in any order. If there are multiple valid pairs, return any one of them. If no such pair exists, return an empty list. Example: words = [\'cat\', \'dog\', \'cats\', \'sand\', \'and\', \'catdog\'] target = \'catdog\' Here the words \'cat\' and \'dog\' can be concatenated to form \'catdog\'. So, one possible pair is [\'cat\', \'dog\']. Function Description: Complete the function findConcatenatedPair in the editor below. findConcatenatedPair has the following parameter: list of strings words: an array of words string target: the target word to be formed Returns: list of strings: a list containing two words that can be concatenated to form the target word, or an empty list if no such pair exists. Input Format: The first line contains an integer n, the size of the array words. Each of the next n lines contains a string, one of the words. The last line contains a string, the target word. Constraints: 1 ≤ n ≤ 1000 1 ≤ len(words[i]) ≤ 100 1 ≤ len(target) ≤ 200 Sample Input: 6 cat dog cats sand and catdog catdog Sample Output: [\'cat\', \'dog\'] Explanation: The target word \'catdog\' can be formed by concatenating \'cat\' and \'dog\'. Thus, one of the valid pairs is [\'cat\', \'dog\'].","solution":"def findConcatenatedPair(words, target): Determine if the target word can be formed by concatenating any two words from the list. Returns the pair of words that form the target word. If there are multiple valid pairs, returns any one of them. If no such pair exists, returns an empty list. word_set = set(words) for word in words: complement = target[len(word):] if target.startswith(word) and complement in word_set: return [word, complement] return []"},{"question":"You are given a sequence of integers that represent the heights of buildings from left to right along a street. An integer x at position i represents a building of height x located at position i in the sequence. Your task is to determine the maximum amount of water that can be trapped between the buildings after a heavy rain. Water trapped between buildings is calculated by finding the difference between the height of the buildings and the maximum height to the left and right of a particular building (excluding that building itself), as water cannot be trapped above the level of the shortest of the two bounding buildings. Write a function called `trap_water` that takes a list of integers `heights` and returns the total amount of water trapped after the rain. **Function Signature**: ```python def trap_water(heights: List[int]) -> int: pass ``` **Example**: ```python heights = [0,1,0,2,1,0,1,3,2,1,2,1] output = 6 ``` **Explanation**: In the given example, 6 units of water can be trapped between the buildings, as illustrated below: ``` # # # # # # # # ``` The vertical bars represent buildings, and the spaces represent water trapped between these buildings.","solution":"from typing import List def trap_water(heights: List[int]) -> int: Calculate the total amount of water trapped after raining given the heights of buildings. Args: heights (List[int]): A list of integers representing the heights of buildings. Returns: int: The total amount of water trapped. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Compute the maximum height to the left of each building left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Compute the maximum height to the right of each building right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the water trapped at each building for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"You are given a 2D grid of characters containing rows and columns filled with letters \'A\' to \'Z\'. You have to find the length of the longest path in the grid such that no character is repeated in this path. You can move in four possible directions from a cell (up, down, left, right). A path is defined as a sequence starting from any cell in the grid and moving to the neighboring cells. Cells are considered neighbors if they share an edge. Input The first line contains two integers R and C (1 ≤ R, C ≤ 20), representing the number of rows and columns of the grid. Each of the following R lines contains C characters, where each character is an uppercase letter (\'A\' to \'Z\'). Output Print one integer: the length of the longest path without repeating characters. Example Input 3 4 ABCD EFGH IJKL Output 12 Explanation In the provided example, a potential path could be A → B → C → D → H → G → F → E → I → J → K → L, covering all 12 cells without repeating any character. Hence the longest path length is 12. Note This problem requires exploring all possible paths from each cell and keeping track of the characters used to avoid repetitions, utilizing depth-first search (DFS) or backtracking techniques to try all potential paths.","solution":"def longest_path(grid): def dfs(x, y, visited): nonlocal max_length max_length = max(max_length, len(visited)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and grid[nx][ny] not in visited: visited.add(grid[nx][ny]) dfs(nx, ny, visited) visited.remove(grid[nx][ny]) R = len(grid) C = len(grid[0]) max_length = 0 for i in range(R): for j in range(C): visited = set() visited.add(grid[i][j]) dfs(i, j, visited) return max_length"},{"question":"You are given an array of integers and your task is to find the smallest positive integer that is missing from the array. ```Haskell solve([3, 4, -1, 1]) = 2, because 1 is present and 2 is the smallest number missing. solve([1, 2, 0]) = 3, because 1 and 2 are present and 3 is the smallest number missing. solve([7, 8, 9, 11, 12]) = 1, because 1 is the smallest number that is missing. ``` Note: Your solution should have O(n) time complexity and O(1) space complexity. Input will be an array of integers. Negative numbers and zeros can be present in the array.","solution":"def find_missing_positive(nums): This function finds the smallest positive integer that is missing from the array. It should run in O(n) time and use O(1) extra space. n = len(nums) # Step 1: Mark numbers (num < 0) and (num >= n) which are definitely not the answer for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Step 2: Mark each number\'s presence in the array using index for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Step 3: The first index which doesn\'t have a negative number means that index + 1 is missing for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"You have been given a list of integers and a target number. Write a function that finds all unique pairs of integers within the list that sum up to the target number. Return the pairs as a list of tuples, sorted in ascending order of the first element in the tuple, then the second element within the tuple. Example: Given the list `[1, 2, 3, 4, 3, 6]` and the target `6`, the function should return `[(2, 4), (3, 3)]`. `0 <= len(list) <= 1000` The integers in the list can range from `-10^6` to `10^6`. The target number can also range from `-10^6` to `10^6`.","solution":"def find_pairs(nums, target): Finds all unique pairs of integers within the list that sum up to the target number. Parameters: nums (list): List of integers target (int): Target sum Returns: list: List of tuples representing unique pairs of integers that sum to the target pairs = [] seen = set() pairs_set = set() for num in nums: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) pairs_set.add(pair) seen.add(num) pairs = sorted(list(pairs_set)) return pairs"},{"question":"Alice is learning about graphs in her computer science class, and she is particularly interested in Trees. A Tree is a special type of graph with no cycles and exactly one path between any two nodes. Alice came across a problem where she needs to determine if a given graph is a Tree. A graph is defined as a set of nodes connected by edges, and the input will provide the number of nodes and an adjacency list representation of the edges. Your task is to help Alice determine if the given graph is a Tree. Input The input consists of two lines. - The first line contains two integers n (1 ≤ n ≤ 105) and m (0 ≤ m ≤ 105), where n is the number of nodes and m is the number of edges. - The second line contains m pairs of integers, each representing an edge between two nodes. Output Your output should be a single line containing \\"YES\\" if the given graph is a Tree, otherwise output \\"NO\\". Examples Input 5 4 1 2 1 3 2 4 2 5 Output YES Input 5 3 1 2 2 3 4 5 Output NO Each node is labeled with a unique integer from 1 to n. Note that a Tree must be connected and have exactly n-1 edges. Explanation: - In the first example, the graph is connected and has 5-1 = 4 edges, so it\'s a Tree. - In the second example, the graph has more than one connected component, so it\'s not a Tree.","solution":"def is_tree(n, m, edges): if m != n - 1: return \\"NO\\" from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) queue = deque([1]) visited[1] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return \\"YES\\" if all(visited[1:]) else \\"NO\\""},{"question":"Given a string, write a function to determine if it is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words. Example 1: Input: s = \\"Tact Coa\\" Output: True Explanation: \\"tacocat\\" is a permutation of \\"Tact Coa\\" and it is a palindrome. Example 2: Input: s = \\"hello\\" Output: False Explanation: No permutation of \\"hello\\" can form a palindrome. Constraints: 1 <= s.length <= 1000","solution":"def is_permutation_of_palindrome(s): Determine if the string is a permutation of a palindrome. # Convert string to lower case and remove spaces cleaned_s = s.replace(\\" \\", \\"\\").lower() # Use a dictionary to count occurrences of each character char_count = {} for char in cleaned_s: char_count[char] = char_count.get(char, 0) + 1 # Check the count of characters with odd occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be a permutation of a palindrome, # there can be at most one character with an odd count return odd_count <= 1"},{"question":"You found yourself in an ancient labyrinth filled with traps and treasures. You start at the entrance (top-left corner) and must reach the exit (bottom-right corner). The labyrinth is represented by a binary grid, where 1 indicates a trap and 0 indicates a safe path. You can move only right or down. Write a function `find_paths(grid)` that counts the number of distinct paths from the entrance to the exit, while avoiding traps. If no paths are possible, return 0. ``` def find_paths(grid): # your code here ``` **Examples:** ```python grid1 = [ [0, 0, 1], [0, 0, 1], [1, 0, 0] ] find_paths(grid1) # Expected output: 2 grid2 = [ [0, 1], [1, 0] ] find_paths(grid2) # Expected output: 0 ``` **Note:** - The dimensions of the grid may vary but it will always be a non-empty 2D array. - You may assume that the starting and ending points are always safe (i.e., they are guaranteed to be 0). Good luck!","solution":"def find_paths(grid): if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 rows, cols = len(grid), len(grid[0]) # Initialize a DP table dp = [[0 for _ in range(cols)] for _ in range(rows)] dp[0][0] = 1 # Start point for i in range(rows): for j in range(cols): if grid[i][j] == 1: dp[i][j] = 0 # No path through a trap else: if i > 0: dp[i][j] += dp[i-1][j] # Paths coming from the top if j > 0: dp[i][j] += dp[i][j-1] # Paths coming from the left return dp[-1][-1]"},{"question":"Nick loves playing video games, and his favorite type is role-playing games (RPGs). In these games, players can earn points by defeating monsters. Nick has just finished a lengthy gaming session and wants to know the total points he\'s earned. Each type of monster yields a different number of points. Here are the points for each type of monster: - Goblin: 5 points - Troll: 10 points - Dragon: 50 points - Ogre: 30 points - Lich: 100 points You are given the list of monsters that Nick has defeated. Help Nick calculate the total points he\'s earned. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of monsters Nick has defeated. Each of the following n lines contains a string m_i — the name of the i-th monster Nick defeated. The string can be: \\"Goblin\\" (without quotes), if the i-th monster is a goblin. \\"Troll\\" (without quotes), if the i-th monster is a troll. \\"Dragon\\" (without quotes), if the i-th monster is a dragon. \\"Ogre\\" (without quotes), if the i-th monster is an ogre. \\"Lich\\" (without quotes), if the i-th monster is a lich. -----Output----- Output one number — the total points Nick has earned. -----Examples----- Input 5 Lich Goblin Dragon Goblin Ogre Output 190 Input 3 Troll Ogre Ogre Output 70 -----Note----- In the first sample Nick has defeated one lich, two goblins, one dragon, and one ogre. The points for these are: Lich: 100, Goblin: 5 each (5 * 2 = 10), Dragon: 50, and Ogre: 30. In total, they yield 100 + 10 + 50 + 30 = 190 points. In the second sample Nick has defeated one troll and two ogres. The points for these are: Troll: 10, Ogre: 30 each (30 * 2 = 60). In total, they yield 10 + 60 = 70 points.","solution":"def calculate_total_points(monsters): points = {\\"Goblin\\": 5, \\"Troll\\": 10, \\"Dragon\\": 50, \\"Ogre\\": 30, \\"Lich\\": 100} total_points = 0 for monster in monsters: total_points += points.get(monster, 0) return total_points"},{"question":"Write a function `subsequence_occurrences(s: str, t: str) -> int` that takes two strings `s` and `t`, and returns the number of distinct subsequences of `t` that can be found in `s`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The problem differs from finding substrings as the characters of the subsequence are not required to occupy consecutive positions. # Input: - `s`: a string up to 1000 characters. - `t`: a string up to 1000 characters. # Output: - An integer representing the number of distinct subsequences of `t` present in `s`. # Example: Input: ```plaintext s = \\"babgbag\\" t = \\"bag\\" ``` Output: ```plaintext 5 ``` Input: ```plaintext s = \\"rabbbit\\" t = \\"rabbit\\" ``` Output: ```plaintext 3 ```","solution":"def subsequence_occurrences(s: str, t: str) -> int: Returns the number of distinct subsequences of `t` that can be found in `s`. m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): dp[i][0] = 1 for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] return dp[m][n]"},{"question":"You are given an integer array `a` of length `n` and a series of `q` queries. There are two types of queries: - 1 i x — replace the i-th element of a with x - 2 l r — find the sum of elements from the l-th to the r-th index (inclusive) Input The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the size of the array and the number of queries, respectively. The next line contains `n` integers `a_1, a_2, ..., a_n` (-10^9 ≤ a_i ≤ 10^9) — the initial elements of the array. The next `q` lines contain queries of the given format: - 1 i x (1 ≤ i ≤ n, -10^9 ≤ x ≤ 10^9) — replace the i-th element of `a` with `x` - 2 l r (1 ≤ l ≤ r ≤ n) — find the sum of elements from the l-th to the r-th index (inclusive) Output For each query of the second type, output the sum of the elements between indices l and r (inclusive). Example Input ``` 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 1 1 -2 2 1 5 ``` Output ``` 6 12 17 ```","solution":"def process_queries(n, q, array, queries): results = [] for query in queries: if query[0] == 1: _, i, x = query array[i-1] = x # replace the i-th element with x elif query[0] == 2: _, l, r = query results.append(sum(array[l-1:r])) # sum the elements from l to r return results"},{"question":"Polycarp loves to collect various items. Every day he goes to the market to buy a new item. Each item has a name and cost associated with it. Polycarp does not like having multiple items with the same name in his collection. Therefore, whenever he buys a new item, he first checks if he already has an item with the same name. If he does, he will not add the new item to his collection. If the item name is new, he adds it to his collection. You need to help Polycarp manage his collection by tracking the total cost of all unique items he has in his collection after a series of purchases. -----Input----- The first line contains an integer n (1 ≤ n ≤ 200,000) — the number of purchases. The next n lines contain the name of the item (a non-empty sequence of lowercase English letters of length at most 10) and its cost (an integer 1 ≤ cost ≤ 1000). -----Output----- Print the total cost of all unique items Polycarp has in his collection after all purchases. -----Examples----- Input 5 apple 100 banana 200 apple 150 carrot 300 banana 250 Output 600 Input 3 pen 50 pencil 30 notebook 100 Output 180 -----Note----- In the first test case, Polycarp buys the following items: - \\"apple\\" for 100 (added to collection) - \\"banana\\" for 200 (added to collection) - \\"apple\\" for 150 (already in collection, not added) - \\"carrot\\" for 300 (added to collection) - \\"banana\\" for 250 (already in collection, not added) The total cost of unique items is 100 + 200 + 300 = 600. In the second test case, all purchases are unique: - \\"pen\\" for 50 - \\"pencil\\" for 30 - \\"notebook\\" for 100 The total cost of unique items is 50 + 30 + 100 = 180.","solution":"def total_cost_of_unique_items(n, purchases): Returns the total cost of unique items in Polycarp\'s collection. Parameters: n : int : number of purchases purchases : list of tuples : each tuple contains the name of the item (str) and its cost (int) Returns: int : total cost of unique items unique_items = {} for item_name, cost in purchases: if item_name not in unique_items: unique_items[item_name] = cost return sum(unique_items.values())"},{"question":"Given a sequence of ( N ) integers, you need to find the maximum sum of any non-contiguous subsequence of given sequence. A subsequence is a sequence derived from the given sequence by deleting some or none of the elements without changing the order of the remaining elements. # Input - The first line of the input contains a single integer ( N ) (1 ≤ ( N ) ≤ 1000), the length of the sequence. - The second line contains ( N ) space-separated integers ( a_1, a_2, ..., a_N ) (-1000 ≤ ( a_i ) ≤ 1000) representing the sequence. # Output Output a single integer, the maximum sum of any non-contiguous subsequence of given sequence. # Example Input ``` 5 3 2 5 10 7 ``` Output ``` 15 ``` Input ``` 4 -1 -2 -3 -4 ``` Output ``` 0 ```","solution":"def max_non_contiguous_subsequence_sum(nums): Returns the maximum sum of any non-contiguous subsequence of given sequence. max_sum = 0 for num in nums: if num > 0: max_sum += num return max_sum"},{"question":"Alex is working on a project where he needs to optimize the storage space of a warehouse. The warehouse can be represented as a 2D grid of size n times m, where each cell contains a certain number of items. Alex wants to be able to quickly retrieve the maximum number of items in any rectangular sub-grid of the warehouse. Your task is to write a program that can preprocess the grid in such a way that allows Alex to efficiently query the maximum number of items in any given rectangular sub-grid. -----Input----- The first line contains two integers n and m separated by space (1 leq n, m leq 500) — the number of rows and columns in the warehouse grid respectively. Each of the next n lines contains m integers, the j-th number in the i-th of these lines denotes the number of items in the i-th row and j-th column of the warehouse grid (1 leq items_{ij} leq 10^9). The next line contains a single integer q (1 leq q leq 10^4) — the number of queries. Each of the next q lines contains four integers r1, c1, r2, c2 (1 leq r1 leq r2 leq n, 1 leq c1 leq c2 leq m) — the coordinates of the top-left and bottom-right corners of the sub-grid for which the maximum number of items is to be found. -----Output----- For each query, print a single integer, the maximum number of items in the specified rectangular sub-grid. ----Examples----- Input: 3 3 1 3 2 4 6 5 7 3 9 2 1 1 2 2 2 2 3 3 Output: 6 9 Explanation: For the first query, the sub-grid is: begin{bmatrix} 1 & 3 4 & 6 end{bmatrix} The largest number is 6. For the second query, the sub-grid is: begin{bmatrix} 6 & 5 3 & 9 end{bmatrix} The largest number is 9.","solution":"def preprocess_grid(grid, n, m): Preprocess the grid to allow quick retrieval of maximum in any sub-grid. This will build a 2D prefix max matrix. max_grid = [[0] * m for _ in range(n)] # Initialize the first cell max_grid[0][0] = grid[0][0] # Fill the first row for j in range(1, m): max_grid[0][j] = max(max_grid[0][j-1], grid[0][j]) # Fill the first column for i in range(1, n): max_grid[i][0] = max(max_grid[i-1][0], grid[i][0]) # Fill the rest of the grid for i in range(1, n): for j in range(1, m): max_grid[i][j] = max(grid[i][j], max_grid[i-1][j], max_grid[i][j-1]) return max_grid def query_max(grid, max_grid, r1, c1, r2, c2): Retrieve the maximum number from sub-grid (r1, c1) to (r2, c2). max_value = -float(\'inf\') for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): max_value = max(max_value, grid[i][j]) return max_value # Driver function which reads input and processes the queries def warehouse_queries(n, m, grid, queries): max_grid = preprocess_grid(grid, n, m) results = [] for (r1, c1, r2, c2) in queries: result = query_max(grid, max_grid, r1, c1, r2, c2) results.append(result) return results"},{"question":"Alex is a passionate collector of rare coins and loves to organize his collection in different sets. He decides to group his coins by their year of minting and calculate the total value of each year set. Your task is to create a function that, given a list of coin values and their corresponding years, returns a dictionary with the year as the key and the total value of coins minted that year as the value. The function should take a list of tuples as input where each tuple contains two elements: the coin value (an integer) and the year of minting (an integer). # Input: - A list of tuples, where each tuple contains two integers: the value of the coin and the year it was minted. # Output: - A dictionary where the keys are the years and the values are the total value of all coins minted in that year. # Example: ```python coins = [(100, 1995), (50, 1995), (25, 1996), (75, 1996), (30, 1997)] ``` # Expected Output: ```python { 1995: 150, 1996: 100, 1997: 30 } ``` # Constraints: - The list will have at least one coin and no more than 1000 coins. - The coin values will be positive integers less than 10,000. - The years will be between 1800 and 2020 inclusive.","solution":"def group_coins_by_year(coins): Groups coins by year and calculates the total value of coins for each year. Parameters: coins (list of tuples): Each tuple contains an integer value of a coin and an integer year. Returns: dict: A dictionary with years as keys and the total value of coins minted in that year as values. grouped_coins = {} for value, year in coins: if year in grouped_coins: grouped_coins[year] += value else: grouped_coins[year] = value return grouped_coins"},{"question":"Given a string, determine if it contains all the letters of the English alphabet at least once. Return \\"pangram\\" if it does, and \\"not pangram\\" if it doesn\'t. Example s= \\"The quick brown fox jumps over the lazy dog\\" The string is a pangram, because it contains all the letters of the English alphabet. Function Description Complete the function checkPangram in the editor below. checkPangram has the following parameter(s): string s: a string to check Returns string: either \\"pangram\\" or \\"not pangram\\" Input Format A single line containing the string s. Constraints 1 leq |s| leq 10^3 Each character in s is either a lowercase letter, an uppercase letter, or a space. Sample Input 0 We promptly judged antique ivory buckles for the next prize Sample Output 0 pangram Explanation 0 All the letters of the English alphabet are present in the string. Sample Input 1 We promptly judged antique ivory buckles for the prize Sample Output 1 not pangram Explanation 1 The string is missing the letter \'x\'.","solution":"def checkPangram(s): Determines if the string contains all the letters of the English alphabet at least once. Parameters: s (str): The string to check Returns: str: \\"pangram\\" if the string is a pangram, \\"not pangram\\" otherwise # Create a set containing all the letters of the alphabet alphabet = set(\\"abcdefghijklmnopqrstuvwxyz\\") # Convert the input string to lowercase and create a set of characters from it s = s.lower() letters_in_s = set(s) # Check if all the letters of the alphabet are in the set of characters from the input string if alphabet.issubset(letters_in_s): return \\"pangram\\" else: return \\"not pangram\\""},{"question":"Given a binary tree, you need to perform the following tasks: - Collect all the leaf nodes. - Sort the collected leaf nodes in non-decreasing order. - Replace the original leaf nodes in the tree with the sorted values. Example 1: Input: 5 / 3 8 /| | 1 4 7 9 Output: 5 / 3 8 /| | 1 4 7 9 Leaf nodes after sorting: [1, 4, 7, 9] Tree after replacement: [5, 3, 8, 1, 4, 7, 9] Example 2: Input: 10 / 5 15 / 2 7 20 Output: 10 / 5 15 / 2 7 20 Leaf nodes after sorting: [2, 7, 20] Tree after replacement: [10, 5, 15, 2, 7, 20] Your Task: You don\'t need to read input or print anything. Your task is to complete the function reorderLeaves() which takes the root of the binary tree as input and replaces the leaves with their sorted values. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: * The number of nodes (N) in the tree is in the range 1 <= N <= 10^4. * Node values are such that 0 <= Node_value <= 10^4.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def collect_leaves(root): if root is None: return [] if root.left is None and root.right is None: return [root.val] leaves = collect_leaves(root.left) leaves.extend(collect_leaves(root.right)) return leaves def replace_leaves(root, sorted_leaves, index=0): if root is None: return index if root.left is None and root.right is None: root.val = sorted_leaves[index] return index + 1 index = replace_leaves(root.left, sorted_leaves, index) index = replace_leaves(root.right, sorted_leaves, index) return index def reorderLeaves(root): if root is None: return leaves = collect_leaves(root) leaves.sort() replace_leaves(root, leaves)"},{"question":"You are given a number N. Your task is to return the sum of squares of first N natural numbers. Example 1: Input: N = 3 Output: 14 Explanation: 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 Example 2: Input: N = 5 Output: 55 Explanation: 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 1 + 4 + 9 + 16 + 25 = 55 Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfSquares() which takes an integer N as input and returns an integer denoting the sum of squares of first N natural numbers. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^7","solution":"def sumOfSquares(N): Returns the sum of squares of the first N natural numbers. return N * (N + 1) * (2 * N + 1) // 6"},{"question":"Polycarp is organizing his bookshelf. He has `n` books, and each book has a certain width. The shelf can hold books with a sum of widths up to a maximum width `W`. Polycarp wants to arrange the books on the shelf in such a way that requires the fewest number of moves. In one move, Polycarp can take any book from the shelf and place it in another position on the same shelf. For simplicity, he only wants to ensure that the total width of books on the shelf does not exceed `W`. Given the widths of the books and the maximum width of the shelf, determine the minimum number of moves Polycarp needs to rearrange the books such that their total width does not exceed the maximum width `W`. If it is impossible to rearrange the books within the given constraints, output -1. Input The first line contains two integers, `n` (1 ≤ n ≤ 10^5) — the number of books and `W` (1 ≤ W ≤ 10^9) — the maximum width of the shelf. The second line contains `n` integers, `w_i` (1 ≤ w_i ≤ 10^9) — the width of each book. Output If it is possible to rearrange the books such that their total width does not exceed `W`, print the minimum number of moves needed. Otherwise, print -1. Examples Input 4 10 1 2 3 4 Output 0 Input 4 8 4 3 2 1 Output 0 Input 3 5 6 7 8 Output -1","solution":"def min_moves_to_rearrange(n, W, widths): Determine the minimum number of moves needed to rearrange the books such that their total width does not exceed the maximum width W. :param n: Number of books :param W: Maximum width of the shelf :param widths: List of widths of the books :return: Minimum number of moves or -1 if not possible total_width = sum(widths) if total_width <= W: return 0 else: return -1"},{"question":"Alice loves words and puzzles. One of her favorite activities is finding out whether a word can be made from the letters of another word or phrase. With this puzzle in mind, your task is to create a program that determines if one word (the target word) can be constructed by rearranging the letters of another word or phrase (the source phrase). Note that the source phrase may contain spaces and capitalization should be ignored. -----Input----- The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line of each test case contains the source phrase. - The second line of each test case contains the target word. -----Output----- For each test case, output \\"Yes\\" if the target word can be constructed using the letters of the source phrase, otherwise output \\"No\\". -----Example----- Input: 3 a quick brown fox quick the eyes they see hello world lowheld Output: Yes Yes No -----Scoring----- Subtask 1 (20 points): T = 1000, length of source phrase and target word <= 100 Subtask 2 (30 points): T = 100, length of source phrase and target word <= 1000 Subtask 3 (50 points): T = 10, length of source phrase and target word <= 10000","solution":"def can_form_target(source, target): Determines if the target word can be constructed from the source phrase. Args: source (str): The source phrase. target (str): The target word. Returns: bool: True if the target word can be constructed, otherwise False. from collections import Counter # Normalize both strings: remove spaces and convert to lower case normalized_source = source.replace(\\" \\", \\"\\").lower() normalized_target = target.replace(\\" \\", \\"\\").lower() # Count frequency of each character in both strings source_counter = Counter(normalized_source) target_counter = Counter(normalized_target) # Check if all characters and their counts in target are in source for char, count in target_counter.items(): if source_counter[char] < count: return False return True"},{"question":"You are tasked with managing a warehouse full of various items. Each item is represented by a name and a list of tags associated with it. Your job is to efficiently handle queries related to these items. Each query could be of two types: \\"ADD\\" or \\"QUERY.\\" 1. \\"ADD name tag1 tag2 ... tagN\\" query: This adds a new item to the warehouse with the given name and associated tags. If an item with the same name already exists, its tags should be updated to the new list of tags provided. 2. \\"QUERY tag1 tag2 ... tagN\\" query: This returns the names of all items that have all the specified tags. The order of item names in the output does not matter. Your task is to implement a system that processes these queries and returns the correct output. INPUT The first line contains an integer q, the number of queries. Each of the next q lines contains a query of one of the two forms explained above. OUTPUT For each \\"QUERY\\" type query, output the names of all items that meet the criteria on a separate line. If no items match the criteria, output \\"None\\". CONSTRAINTS 1 ≤ q ≤ 100 1 ≤ Number of tags associated with each item in an \\"ADD\\" query, and number of tags in a \\"QUERY\\" query ≤ 10 1 ≤ Length of each item name and tag ≤ 100 All characters are alphanumeric and case-sensitive. SAMPLE INPUT 6 ADD book fiction novel ADD pen blue ink ADD notebook spiral wide-ruled ADD book science fiction QUERY fiction QUERY blue red SAMPLE OUTPUT book pen None","solution":"class Warehouse: def __init__(self): self.items = {} def add_item(self, name, tags): self.items[name] = set(tags) def query_items(self, tags): required_tags = set(tags) result = [name for name, item_tags in self.items.items() if required_tags <= item_tags] return result if result else [\\"None\\"] def process_queries(queries): warehouse = Warehouse() output = [] for query in queries: parts = query.split() command = parts[0] if command == \\"ADD\\": name = parts[1] tags = parts[2:] warehouse.add_item(name, tags) elif command == \\"QUERY\\": tags = parts[1:] result = warehouse.query_items(tags) output.append(\\" \\".join(result)) return output"},{"question":"Marie has recently been into gardening and is fascinated by different types of plants. She has a small garden where she grows several types of plants in a single row. Each type of plant (represented as an integer) has specific properties. Marie wants to maximize the aesthetic appeal of her garden row by ensuring no two adjacent plants are of the same type. To achieve this, she can perform the following operation any number of times: - Choose any plant and replace it with any other type of plant. Marie would like to know the minimum number of operations needed to make sure her garden row has no two adjacent plants of the same type. Write a program to help Marie determine the minimum number of operations required. # Constraints - 1 ≤ length of garden row ≤ 100,000 - 1 ≤ plant type ≤ 1,000,000 # Input The input consists of several datasets. Each dataset is given as a line of space-separated integers. The first integer indicates the length of the garden row `n` followed by `n` integers, each representing the type of the plant in that position. Input terminates with a dataset where `n = 0`. # Output For each dataset, write a line that contains the minimum number of operations needed. # Example Input ``` 3 1 2 2 5 1 1 1 2 2 0 ``` Output ``` 1 2 ```","solution":"def min_operations(garden_row): Calculate the minimum number of operations to ensure no two adjacent plants are of the same type. :param garden_row: List of integers representing the garden row including its length :return: Integer, minimum number of operations needed if not garden_row or garden_row[0] == 0: return 0 n = garden_row[0] plants = garden_row[1:] moves = 0 for i in range(1, n): if plants[i] == plants[i - 1]: moves += 1 # Choose an arbitrary plant type (that is different from current and previous if possible) plants[i] = plants[i - 1] + 1 if plants[i - 1] + 1 != plants[i - 2] else plants[i - 1] + 2 return moves def process_input(data): results = [] for row in data: if row[0] == 0: break results.append(min_operations(row)) return results"},{"question":"Alex is planning a garden and wants to plant exactly two types of flowers out of three available types. Each type of flower can be bought for p, q, and r dollars per unit, respectively. To ensure variety, Alex decides to plant exactly one unit of each of the two chosen types of flowers. Help Alex determine the minimum total cost needed to buy two different types of flowers. -----Constraints----- - 1 leq p, q, r leq 10000 - p, q and r are integers. -----Input----- Input is given from Standard Input in the following format: p q r -----Output----- Print the minimum total cost to buy two different types of flowers. -----Sample Input----- 500 300 400 -----Sample Output----- 700 - Buying a 500-dollar flower and a 300-dollar flower costs 800 dollars. - Buying a 500-dollar flower and a 400-dollar flower costs 900 dollars. - Buying a 300-dollar flower and a 400-dollar flower costs 700 dollars. The minimum among these is 700 dollars.","solution":"def min_garden_cost(p, q, r): Returns the minimum cost to buy two different types of flowers. return min(p + q, p + r, q + r)"},{"question":"A group of developers is collaborating on various projects. Each developer is assigned several tasks, and each task has a specific priority level and estimated completion time. The project manager wants to analyze the workflow and allocate resources efficiently by identifying the tasks with the highest priority that can be completed the fastest. -----Input:----- - The first line contains an integer T, the number of projects. - For each project, the first line contains an integer N, the number of tasks. - The next N lines each contain a string D, an integer P, and an integer E separated by space, representing the task description D, priority level P, and estimated time E in minutes respectively. -----Output:----- For each project, output the task(s) with the highest priority P that has the shortest estimated time E. If there are multiple tasks with the same highest priority and estimated time, output them in the order of their occurrence in the input. -----Constraints----- - 1 leq T leq 15 - 1 leq N leq 200 - D contains characters between a-z, A-Z, 0-9, and spaces with a maximum length of 50 - 1 leq P leq 10 - 1 leq E leq 300 -----Sample Input:----- 2 3 Fix bugs 8 30 Develop feature 9 45 Optimize code 9 30 2 Design UI 7 20 Write tests 7 25 -----Sample Output:----- Optimize code 9 30 Fix bugs 8 30 Design UI 7 20","solution":"def find_highest_priority_tasks(T, projects): results = [] for project in projects: N, tasks = project highest_priority = -1 shortest_time = float(\'inf\') best_tasks = [] for task in tasks: description, priority, time = task priority = int(priority) time = int(time) if priority > highest_priority or (priority == highest_priority and time < shortest_time): highest_priority = priority shortest_time = time best_tasks = [(description, priority, time)] elif priority == highest_priority and time == shortest_time: best_tasks.append((description, priority, time)) results.extend(best_tasks) return results # Example usage: # projects = [(3, [(\'Fix bugs\', \'8\', \'30\'), (\'Develop feature\', \'9\', \'45\'), (\'Optimize code\', \'9\', \'30\')]), # (2, [(\'Design UI\', \'7\', \'20\'), (\'Write tests\', \'7\', \'25\')])] # print(find_highest_priority_tasks(2, projects))"},{"question":"You are given an array nums of n integers. A subarray is defined as a contiguous segment of the array. The sum of a subarray is the total sum of the elements within that subarray. Your goal is to determine if the array contains a subarray whose sum is exactly k. -----Input----- The input consists of: - The first line contains two integers n and k (1 ≤ n ≤ 2000, -10^9 ≤ k ≤ 10^9) — the size of the array and the required subarray sum. - The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9) — the elements of the array. -----Output----- Print \\"YES\\" if there is a subarray whose sum is exactly k. Otherwise, print \\"NO\\". -----Examples----- Input 5 10 1 3 -2 5 7 Output YES Input 4 5 1 -1 1 -1 Output NO","solution":"def subarray_sum_exists(n, k, nums): Checks if there is a subarray in `nums` that sums up to `k`. Parameters: n (int): Number of elements in the array. k (int): The required subarray sum. nums (list of int): The elements of the array. Returns: str: \\"YES\\" if there is a subarray whose sum is exactly k, otherwise \\"NO\\". current_sum = 0 prefix_sums = {0} # Use a set to store the prefix sums for num in nums: current_sum += num if current_sum - k in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"You are given a list of words and a multi-line block of text. Your task is to determine how many times each word from the list appears in the block of text. A word is defined as a sequence of characters separated by spaces or punctuation marks. Input: The first line of input contains a single integer, N (1 ≤ N ≤ 100), representing the number of words to be counted. The next N lines each contain a single word from the list. Each word consists of only lowercase alphabetical characters and has a length between 1 and 20 characters. After the list of words, the next line contains a single integer, M (1 ≤ M ≤ 100), representing the number of lines in the block of text. The following M lines each contain a portion of the block of text, consisting of lowercase alphabetical characters, spaces, and punctuation marks (.,?!\'). Each line has length at most 200 characters. Output: For each word in the order they were given, output a single integer on a new line representing the number of times the word appears in the block of text. Examples Input: 3 hello world example 2 hello! world. this is an example. is this the example, or another example? Output: 1 1 3 Explanation: - \\"hello\\" appears once in the text. - \\"world\\" appears once in the text. - \\"example\\" appears three times in the text.","solution":"import re from collections import Counter def count_words(N, words_list, M, text_list): Returns the count of each word from words_list in the given block of text. Parameters: N (int): Number of words to count words_list (list): List of words to be counted M (int): Number of lines in the block of text text_list (list): List of lines that constitute the block of text Returns: list: List of counts of each word in the order they were given # Join all lines of text into a single string full_text = \' \'.join(text_list).lower() # Use regular expression to tokenize the text tokens = re.findall(r\'bw+b\', full_text) # Get the count of each word in the block of text word_counts = Counter(tokens) # Retrieve counts for each word in the words_list result = [word_counts[word] for word in words_list] return result"},{"question":"Given a string s of length n, you need to compute the most frequently occurring character. If there are multiple characters that appear the most number of times, return the earliest character (in terms of their appearance in the string). Example 1: Input: s = \\"aabbbcc\\" Output: b Explanation: The character \'b\' occurs 3 times, which is more frequently than any other character. Example 2: Input: s = \\"abbac\\" Output: a Explanation: Both \'a\' and \'b\' appear twice. Since \'a\' appears before \'b\' in the string, \'a\' is returned. Your Task: You don\'t need to read input or print anything. Your task is to complete the function mostFrequentCharacter() which takes the string s as input and returns the most frequently occurring character as described above. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 s consists of lowercase English letters.","solution":"def mostFrequentCharacter(s): Returns the most frequently occurring character in the string `s`. If multiple characters have the highest frequency, returns the earliest one. if not s: return \\"\\" char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_count = 0 most_frequent_char = \\"\\" for char in s: if char_count[char] > max_count: max_count = char_count[char] most_frequent_char = char return most_frequent_char"},{"question":"Write a function `hex_to_rgb` that converts a given hexadecimal color code to its RGB representation. The function should take a string representing the hex code and return a tuple with the corresponding RGB values. For example: - For the input `\\"#FFFFFF\\"`, the function should return `(255, 255, 255)`. - For the input `\\"#000000\\"`, the function should return `(0, 0, 0)`. - For the input `\\"#FF5733\\"`, the function should return `(255, 87, 51)`. Ensure the function handles both uppercase and lowercase input for hexadecimal values. If the input is not a valid hexadecimal color code, return `\\"Invalid hex code\\"`.","solution":"def hex_to_rgb(hex_code): Converts a hexadecimal color code to its RGB representation. :param hex_code: A string representing the hex code. :return: A tuple with the corresponding RGB values or \\"Invalid hex code\\" if input is invalid. if isinstance(hex_code, str) and len(hex_code) == 7 and hex_code[0] == \'#\': try: r = int(hex_code[1:3], 16) g = int(hex_code[3:5], 16) b = int(hex_code[5:7], 16) return (r, g, b) except ValueError: return \\"Invalid hex code\\" return \\"Invalid hex code\\""},{"question":"Alyssa is a software engineer working on a project that deals with analyzing sequences of numbers. She came across a particular problem where she needs to determine the longest subsequence in a given array that consists of strictly increasing consecutive integers. Help Alyssa by writing a function to find the length of the longest subsequence of consecutive integers. **Input** The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array. The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 10^6), representing elements of the array. **Output** Output one integer, the length of the longest subsequence of consecutive integers. **Examples** **Input** 5 1 2 3 4 5 **Output** 5 **Input** 6 10 12 11 14 13 15 **Output** 6 **Input** 7 1 9 3 10 4 20 2 **Output** 4 **Note** A subsequence is a sequence derived by deleting some or no elements without changing the order of the remaining elements. For example, in the 2nd input example, the longest subsequence of consecutive integers is [10, 11, 12, 13, 14, 15], and its length is 6.","solution":"def longest_consecutive_subsequence(arr): Returns the length of the longest subsequence of consecutive integers. if not arr: return 0 arr_set = set(arr) max_length = 0 for num in arr: if num - 1 not in arr_set: current_num = num current_streak = 1 while current_num + 1 in arr_set: current_num += 1 current_streak += 1 max_length = max(max_length, current_streak) return max_length"},{"question":"You are given an array of integers. Your task is to sort the array such that all negative numbers appear before all positive numbers while maintaining their relative order in each group (negative and positive). This type of sorting is called the \\"relative ordering\\" sort. Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000) — the elements of the array. Output - Output the modified array such that all negative numbers appear before all positive numbers, maintaining their relative order. Examples Input 5 -1 2 -3 4 5 Output -1 -3 2 4 5 Input 8 0 -1 2 -3 1 -4 -2 3 Output -1 -3 -4 -2 0 2 1 3","solution":"def relative_ordering_sort(arr): Sorts an array such that all negative numbers appear before all positive numbers while maintaining their relative order. negative = [x for x in arr if x < 0] non_negative = [x for x in arr if x >= 0] return negative + non_negative"},{"question":"A sports team management application tracks how many times each player passes the ball to every other player in a game. The input data is given as pairs, where each pair `(i, j)` represents a pass from player `i` to player `j`. You need to determine the total number of distinct pairs of players who have at least passed the ball to each other once (in either direction). For instance, if player 1 passes to player 2 and player 2 passes to player 1, this counts as one distinct passing pair. -----Input----- The input starts with an integer P (0 leq P leq 50), the number of pass records. Each of the next P lines contains two integers i and j (1 leq i, j leq 20) representing a pass from player i to player j. -----Output----- Output a single line with the number of distinct passing pairs. -----Examples----- Sample Input: 3 1 2 2 1 1 3 Sample Output: 2","solution":"def count_distinct_passing_pairs(P, passes): if P == 0: return 0 # Use a set to keep track of unique pairs passing_pairs = set() for i, j in passes: # Add pair in both the orders (i.e., (i, j) and (j, i)) if (j, i) not in passing_pairs: passing_pairs.add((i, j)) return len(passing_pairs)"},{"question":"Emma works for a robotics company that produces robotic arms for various applications. Each robotic arm can perform a limited set of operations and must adhere to a strict sequence of commands. To ensure the reliability of the robotic arms, the company must verify that the sequence of commands for each arm adheres to specific rules. Emma needs to write a program that takes an initial state of the robotic arm and a target state, and verifies whether the transition from the initial state to the target state can be achieved by following a specific set of commands. The robotic arm has four primary operations it can perform, each represented by a distinct command: * \\"L\\": Move the arm to the left * \\"R\\": Move the arm to the right * \\"U\\": Move the arm up * \\"D\\": Move the arm down Additionally, the robotic arm must remain within the boundaries of a predefined grid of size n x m. The initial and target states are given as (x, y) coordinates, where x represents the row, and y represents the column. Given the grid size, initial state, target state, and a sequence of commands, Emma needs to determine if the robotic arm can reach the target state from the initial state by following the commands in the exact order provided. Input The first line contains two integers n and m — the number of rows and columns in the grid (1 ≤ n, m ≤ 1000). The second line contains two integers x1 and y1 — the initial position of the robotic arm (1 ≤ x1 ≤ n, 1 ≤ y1 ≤ m). The third line contains two integers x2 and y2 — the target position of the robotic arm (1 ≤ x2 ≤ n, 1 ≤ y2 ≤ m). The fourth line contains a string s — the sequence of commands (1 ≤ |s| ≤ 10000). Output Output \\"YES\\" if it\'s possible to reach the target state from the initial state by following the commands, otherwise output \\"NO\\". Examples Input 5 5 1 1 3 3 RRDD Output YES Input 5 5 1 1 3 3 RDD Output NO Input 3 3 2 2 2 2 LRUD Output YES","solution":"def can_reach_target(n, m, x1, y1, x2, y2, commands): x, y = x1, y1 for command in commands: if command == \'L\': y -= 1 elif command == \'R\': y += 1 elif command == \'U\': x -= 1 elif command == \'D\': x += 1 # Check if the robotic arm goes out of bounds if x < 1 or x > n or y < 1 or y > m: return \\"NO\\" return \\"YES\\" if (x == x2 and y == y2) else \\"NO\\""},{"question":"You are tasked with redesigning the route system in a city park to aid visitors in navigating the park more efficiently. The park consists of several checkpoints and bidirectional trails connecting some of them. A visitor will traverse the park from one checkpoint to another without passing any checkpoint more than once. Your objective is to determine the minimum number of checkpoints that need to be converted into rest areas to ensure every path a visitor takes from a starting checkpoint to a destination checkpoint passes through exactly one rest area. Checkpoints at the start and end of the visitor\'s path can also be converted to rest areas. Input Each test contains one or more test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ n(n-1)/2) — the number of checkpoints and trails in the park respectively. Next m lines contain two integers u and v (1 ≤ u, v ≤ n) — representing a trail connecting checkpoint u and checkpoint v. Output For each test case, output a single integer — the minimum number of checkpoints to be converted into rest areas. Examples Input ``` 2 5 4 1 2 2 3 3 4 4 5 4 4 1 2 2 3 3 4 4 1 ``` Output ``` 1 2 ``` Note In the first example, converting checkpoint 3 to a rest area will ensure that any path from a starting checkpoint to a destination checkpoint passes through exactly one rest area. In the second example, at least two checkpoints need to be converted to rest areas to ensure the same requirement is met, as any path between checkpoints 1, 2, 3, and 4 forms a cycle.","solution":"def min_checkpoints_to_rest_areas(t, test_cases): results = [] for i in range(t): n, m, edges = test_cases[i] if m == 0: # If there are no trails, the number of rest areas required is the number of checkpoints, # but since a visitor can\'t traverse, the minimum checkpoint is simply 1. results.append(1) continue degrees = [0] * (n + 1) for u, v in edges: degrees[u] += 1 degrees[v] += 1 leaf_nodes = sum(1 for deg in degrees if deg == 1) if leaf_nodes == 0: # If there are no leaf nodes, it implies the graph is a cycle or a complete graph. results.append(2) else: results.append(leaf_nodes // 2) return results"},{"question":"Alicia loves palindromic substrings. A palindrome is a string that reads the same forwards and backwards. She is interested in finding the number of such substrings in a given string. Given a string, S, consisting of lowercase English letters, your task is to count the number of palindromic substrings in it. For example, consider S = `\\"abba\\"`. The substrings of S are: - `\\"a\\"`, `\\"b\\"`, `\\"b\\"`, `\\"a\\"`, `\\"ab\\"`, `\\"bb\\"`, `\\"ba\\"`, `\\"abb\\"`, `\\"bba\\"`, and `\\"abba\\"` Out of these substrings, the palindromic ones are: - `\\"a\\"`, `\\"b\\"`, `\\"b\\"`, `\\"a\\"`, `\\"bb\\"`, and `\\"abba\\"` Therefore, the number of palindromic substrings is 6. Input Format The first line contains a single integer, T (the number of test cases). Each test case consists of a single string S. Constraints 1 leq T leq 10^3 1 leq |S| leq 10^3 The sum of the lengths of S over all test cases does not exceed 10^5. Output Format For each test case, print the number of palindromic substrings in S on a new line. Sample Input 2 abba racecar Sample Output 6 10 Explanation Test Case 0: - Palindromic substrings of `\\"abba\\"`: `\\"a\\"`, `\\"b\\"`, `\\"b\\"`, `\\"a\\"`, `\\"bb\\"`, `\\"abba\\"` - Total: 6 Test Case 1: - Palindromic substrings of `\\"racecar\\"`: `\\"r\\"`, `\\"a\\"`, `\\"c\\"`, `\\"e\\"`, `\\"c\\"`, `\\"a\\"`, `\\"r\\"`, `\\"cec\\"`, `\\"aceca\\"`, `\\"racecar\\"` - Total: 10","solution":"def count_palindromic_substrings(S): Returns the number of palindromic substrings in the given string S. n = len(S) count = 0 for center in range(2 * n - 1): left = center // 2 right = left + center % 2 while left >= 0 and right < n and S[left] == S[right]: count += 1 left -= 1 right += 1 return count def palindromic_substrings_counts(test_cases): Returns the number of palindromic substrings for each given test case. test_cases: List of strings return [count_palindromic_substrings(tc) for tc in test_cases]"},{"question":"You are given two strings `s` and `t`, each of length n (1 ≤ n ≤ 100). You can modify the string `s` by choosing any two distinct indices `i` and `j` (1 ≤ i, j ≤ n) and swapping `s[i]` with `s[j]`. Your task is to determine if it is possible to convert string `s` into string `t` by applying at most `k` swaps (0 ≤ k ≤ n * (n - 1) / 2). Input: The first line contains a single integer n, the length of strings `s` and `t`. The second line contains the string `s`. The third line contains the string `t`. The fourth line contains a single integer `k`. Output: Print \\"YES\\" if you can convert `s` into `t` with at most `k` swaps. Otherwise, print \\"NO\\". Example: Input: 4 abcd cbad 2 Output: YES Input: 5 abcde eadcb 1 Output: NO Explanation: In the first example, with two swaps, you can convert \\"abcd\\" to \\"cbad\\" by following these steps: - Swap the first character \'a\' with the third character \'c\' -> \\"cbad\\" In the second example, it is not possible to convert \\"abcde\\" to \\"eadcb\\" with only one swap.","solution":"def can_convert_with_swaps(n, s, t, k): Determines if string s can be converted to string t with at most k swaps. Parameters: n (int): Length of strings s and t. s (str): Source string. t (str): Target string. k (int): Maximum number of swaps allowed. Returns: str: \\"YES\\" if s can be converted to t with at most k swaps, otherwise \\"NO\\". if sorted(s) != sorted(t): return \\"NO\\" diff_count = sum(1 for i in range(n) if s[i] != t[i]) if diff_count // 2 <= k: return \\"YES\\" return \\"NO\\""},{"question":"Given a sequence of integers, we call a \\"prime pair\\" any two adjacent numbers that are both prime. A \\"good number\\" is a number in the sequence that is part of at least one prime pair. Your task is to determine the count of good numbers in a given sequence. A prime number is a number greater than 1 with no divisors other than 1 and itself. Input The input consists of multiple lines. Each line contains a sequence of integers separated by spaces. The end of the input is indicated by a line containing a single zero, which should not be processed. Output For each input sequence, output the count of good numbers in the sequence. Example Input 2 3 5 7 11 13 4 6 9 15 17 19 23 29 31 37 41 43 47 0 Output 6 2 7","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def count_good_numbers(sequences): results = [] for sequence in sequences: sequence = list(map(int, sequence.split())) good_numbers = set() for i in range(len(sequence) - 1): if is_prime(sequence[i]) and is_prime(sequence[i + 1]): good_numbers.add(sequence[i]) good_numbers.add(sequence[i + 1]) results.append(len(good_numbers)) return results def process_input(input_lines): sequences = [] for line in input_lines: if line.strip() == \\"0\\": break sequences.append(line.strip()) return count_good_numbers(sequences)"},{"question":"You have a rectangular grid of n rows and m columns, represented as a 2D list mat. Each cell in the grid contains either a 0 or a 1. Your goal is to find the size of the largest square subgrid that contains only 1s. -----Input----- The first line of input contains two space-separated integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns of the grid, respectively. The next n lines contain m space-separated integers (either 0 or 1), representing the values in the grid. -----Output----- Print one single number — the size of the largest square subgrid that contains only 1s. -----Examples----- Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 2 Input 3 3 1 1 1 1 1 1 0 1 1 Output 2 Input 2 2 0 0 0 0 Output 0","solution":"def largest_square_subgrid(n, m, mat): # Create a DP table with extra row and column set to 0 initially dp = [[0] * (m + 1) for _ in range(n + 1)] largest = 0 # Fill the DP table for i in range(1, n + 1): for j in range(1, m + 1): if mat[i - 1][j - 1] == 1: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 largest = max(largest, dp[i][j]) return largest"},{"question":"A company has n servers connected in a network. Each server is identified by a unique integer from 0 to n-1. Some pairs of servers are directly linked by a bidirectional communication channel. There are q queries about the network, each asking whether two servers can communicate either directly or indirectly through other servers. You need to answer these queries efficiently by determining if there is a path of direct links between the two specified servers in the query. Input The first line contains two space-separated integers n and q (1 ≤ n ≤ 100000, 1 ≤ q ≤ 100000). The following n - 1 lines each contain two space-separated integers u and v (0 ≤ u, v < n), indicating a direct link between servers u and v. The next q lines each contain two space-separated integers ai and bi (0 ≤ ai, bi < n), representing the queried pair of servers. Output For each query, print \\"YES\\" if there is a path of direct links between server ai and server bi, otherwise print \\"NO\\". Examples Input 6 3 0 1 0 2 1 3 1 4 4 5 3 5 2 5 0 4 Output YES YES YES Input 4 2 0 1 1 2 2 3 0 3 1 3 Output YES YES Note In the first example, the communication network is connected as follows: ``` 0 / 1 2 / 3 4 5 ``` The first query asks if there is a path from server 3 to server 5, which is true: 3 -> 1 -> 4 -> 5. The second query asks if there is a path from server 2 to server 5, which is also true: 2 -> 0 -> 1 -> 4 -> 5. The third query asks if there is a path from server 0 to server 4, which is true through the direct link 0 -> 1 -> 4.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, x): if self.parent[x] != x: self.parent[x] = self.find(self.parent[x]) return self.parent[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.rank[rootX] > self.rank[rootY]: self.parent[rootY] = rootX elif self.rank[rootX] < self.rank[rootY]: self.parent[rootX] = rootY else: self.parent[rootY] = rootX self.rank[rootX] += 1 def can_communicate(n, q, links, queries): uf = UnionFind(n) for u, v in links: uf.union(u, v) results = [] for ai, bi in queries: if uf.find(ai) == uf.find(bi): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers nums, find the next permutation of nums in lexicographical order. If such an arrangement is not possible, rearrange nums to the lowest possible order (i.e., sorted in ascending order). The replacement must be in-place and use only constant extra memory. Example 1: Input: nums = [1,2,3] Output: [1,3,2] Example 2: Input: nums = [3,2,1] Output: [1,2,3] Example 3: Input: nums = [1,1,5] Output: [1,5,1] Note: 1 <= nums.length <= 5 * 10^4 -10^4 <= nums[i] <= 10^4","solution":"def next_permutation(nums): Rearranges the elements of nums into the next permutation in lexicographical order. If no such permutation exists, rearrange it in ascending order. Parameters: nums (list): A list of integers. Returns: None: The function modifies the list in-place. n = len(nums) i = n - 2 # Find the first index from the end where nums[i] < nums[i + 1] while i >= 0 and nums[i] >= nums[i + 1]: i -= 1 if i >= 0: # Find the first index from the end where nums[j] > nums[i] j = n - 1 while nums[j] <= nums[i]: j -= 1 # Swap elements at i and j nums[i], nums[j] = nums[j], nums[i] # Reverse the sequence from i + 1 to the end nums[i + 1:] = reversed(nums[i + 1:])"},{"question":"Write a function that takes in a non-negative integer `n` and returns a nested array representing a spiral pattern of numbers from 1 up to `n^2`. The spiral should start at the top left corner and proceed in a clockwise direction. ``` spiral(0) => [ ] spiral(1) => [ [1] ] spiral(2) => [ [1, 2], [4, 3] ] spiral(3) => [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] spiral(4) => [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] ``` **Note:** For `n = 0`, return an empty array. For other values, ensure the elements are arranged in the correct spiral order within the nested array.","solution":"def spiral(n): Returns a nested array representing a spiral pattern of numbers from 1 up to n^2. if n == 0: return [] matrix = [[0] * n for _ in range(n)] left, right, top, bottom = 0, n - 1, 0, n - 1 value = 1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = value value += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = value value += 1 right -= 1 if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = value value += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = value value += 1 left += 1 return matrix"},{"question":"In a given string of CSV (comma-separated values) data, each row represents a series of numerical values. Write a function that processes this string and returns the row number (1-indexed) with the maximum average value. In case of a tie (multiple rows with the same average value), return the smallest row number among them. Assume the input string is correctly formatted and contains at least one row of numbers. Here is an example CSV string: ```python data = \\"1,2,3n4,5,6n7,8,9n10,11,12\\" ``` The averages of the rows are: - Row 1: (1+2+3)/3 = 2 - Row 2: (4+5+6)/3 = 5 - Row 3: (7+8+9)/3 = 8 - Row 4: (10+11+12)/3 = 11 The function should return: `4` ```python def max_average_row(csv_string: str) -> int: # Your implementation here pass # Example usage data = \\"1,2,3n4,5,6n7,8,9n10,11,12\\" assert max_average_row(data) == 4 data2 = \\"1,2,3n10,20,30n4,5,6n10,11,12\\" assert max_average_row(data2) == 2 ``` This problem requires you to: 1. Split the CSV string into rows. 2. Parse the numbers in each row. 3. Compute the average for each row. 4. Determine the row with the highest average value. 5. Handle ties by choosing the smallest row number. Implement the function `max_average_row` to complete the task.","solution":"def max_average_row(csv_string: str) -> int: rows = csv_string.split(\'n\') max_avg = float(\'-inf\') max_row_index = -1 for i, row in enumerate(rows): numbers = [int(x) for x in row.split(\',\')] average = sum(numbers) / len(numbers) if average > max_avg: max_avg = average max_row_index = i + 1 elif average == max_avg and (max_row_index == -1 or i + 1 < max_row_index): max_row_index = i + 1 return max_row_index"},{"question":"Alice is an avid reader and loves to keep track of her favorite books. She wants to categorize her books into different genres and maintain an alphabetical list of books within each genre. Help Alice develop a function to organize her book collection. Write a function `organizeBooks()` with the arguments: - `\\"books\\"`: a list of tuples where each tuple contains two strings - the first string is the book\'s title and the second string is the book\'s genre (e.g., `[(\\"Brave New World\\", \\"Dystopian\\"), (\\"Dune\\", \\"Science Fiction\\"), (\\"1984\\", \\"Dystopian\\")]`). The function `organizeBooks()` should return a dictionary where the keys are genres and the values are lists of book titles belonging to that genre, sorted alphabetically. For example: - `organizeBooks([(\\"Brave New World\\", \\"Dystopian\\"), (\\"Dune\\", \\"Science Fiction\\"), (\\"1984\\", \\"Dystopian\\")])` should return `{ \\"Dystopian\\": [\\"1984\\", \\"Brave New World\\"], \\"Science Fiction\\": [\\"Dune\\"] }` - `organizeBooks([])` should return `{}`","solution":"def organizeBooks(books): Organizes a list of books into a dictionary categorized by genre with book titles sorted alphabetically. Arguments: books -- list of tuples where each tuple contains the book\'s title and genre. Returns: A dictionary with genres as keys and sorted list of book titles as values. from collections import defaultdict book_dict = defaultdict(list) for title, genre in books: book_dict[genre].append(title) # Sort the books within each genre for genre in book_dict: book_dict[genre].sort() return dict(book_dict)"},{"question":"Given a binary tree, find the length of the longest path which comprises only even numbers. Example 1: Input: 1 / 10 8 / / 12 4 7 Output: 2 Explanation: Longest path with only even numbers is 10 -> 12. Example 2: Input: 5 / 2 3 8 Output: 1 Explanation: The node 8 forms the longest path. Your Task: You do not need to read input or print anything. Your task is to complete the function longestEvenPath() which takes the root of the binary tree as input and returns the length of the longest path comprising only even numbers. Expected Time Complexity: O(N) Expected Auxiliary Space: O(H), where H is the height of the tree. Constraints: 1 ≤ Number of nodes ≤ 10^4 1 ≤ Node values ≤ 10^5","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longestEvenPath(root): Returns the length of the longest path comprising only even numbers. def dfs(node): if not node: return 0, 0 left_max_len, left_current = dfs(node.left) right_max_len, right_current = dfs(node.right) current_path = 0 if node.val % 2 == 0: current_path = max(left_current, right_current) + 1 max_len = max(left_max_len, right_max_len, current_path) return max_len, current_path max_length, _ = dfs(root) return max_length"},{"question":"In a distant galaxy, a network of space stations is connected by unidirectional wormholes. The space stations are identified by numbers from 1 to n. Each wormhole allows travel from one specific station to another and takes a certain amount of time. Your mission is to determine the shortest time required to travel from a given start station to all other stations in the galaxy. Input The first line contains two integers n and m (1 ≤ n ≤ 500, 1 ≤ m ≤ 10000) — the number of space stations and the number of wormholes respectively. Each of the next m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000) representing a wormhole from station u to station v taking t time units. The next line contains a single integer s (1 ≤ s ≤ n) — the starting station. Output Output n integers where the i-th integer is the shortest time to travel from the start station s to station i. If a station is unreachable, print -1 for that station. Examples Input 5 6 1 2 3 1 3 1 2 4 2 3 2 1 3 4 5 4 5 1 1 Output 0 2 1 4 5 Input 4 4 1 2 7 1 3 5 2 4 2 3 4 6 2 Output -1 0 -1 2","solution":"import heapq def shortest_path(n, m, wormholes, s): Determines the shortest time required to travel from a given start station to all other stations. Parameters: n (int): Number of space stations m (int): Number of wormholes wormholes (list of tuple of int): List of wormholes represented by tuples (u, v, t) s (int): Starting station Returns: list of int: Shortest time to travel from the start station s to each station, -1 if unreachable # Initialize the graph graph = [[] for _ in range(n + 1)] for u, v, t in wormholes: graph[u].append((v, t)) # Initialize distances with infinity except for the start distances = [float(\'inf\')] * (n + 1) distances[s] = 0 # Priority queue to manage the minimum distance priority_queue = [(0, s)] heapq.heapify(priority_queue) while priority_queue: current_distance, u = heapq.heappop(priority_queue) if current_distance > distances[u]: continue for v, t in graph[u]: distance = current_distance + t if distance < distances[v]: distances[v] = distance heapq.heappush(priority_queue, (distance, v)) # Replace infinities with -1 for unreachable stations final_distances = [-1 if distances[i] == float(\'inf\') else distances[i] for i in range(1, n + 1)] return final_distances"},{"question":"In a popular video game, characters can move horizontally along a straight, infinite line. Each character has a position given by an integer, and their goal is to return to the origin point, which is at position 0. A character can perform only two types of moves: - Jump: Move to the left by `m` positions or to the right by `m` positions. - Teleport: Move directly to position 0 from any position. Given an initial position of a character and the distance `m` they can jump, determine the minimum number of moves required for the character to return to the origin. -----Input----- The input consists of two integers: - The initial position `p` (−10^9 ≤ p ≤ 10^9), which is the starting position of the character. - The distance `m` (1 ≤ m ≤ 10^9), which represents the distance the character can jump either left or right. -----Output----- Output a single integer, the minimum number of moves required for the character to reach the position 0. -----Examples----- Sample Input 1: 10 3 Sample Output 1: 4 Sample Input 2: 1000000000 2 Sample Output 2: 1","solution":"def minimum_moves_to_origin(p, m): Function to determine the minimum number of moves required for a character to return to the origin from position p with jumps of distance m. # If `p` is zero, we are already at the origin, no moves needed. if p == 0: return 0 # If `p` is directly divisible by `m`, we can jump to origin directly if p % m == 0: return abs(p) // m # Else, we need one teleport move return 1"},{"question":"B and N are integers where B can be any integer and N is a positive integer between 1 and 10 (inclusive). If B is divisible by N without a remainder, print \\"YES\\"; otherwise, print \\"NO\\". -----Constraints----- - -10^9 leq B leq 10^9 - 1 leq N leq 10 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: B N -----Output----- If B is divisible by N without a remainder, print \\"YES\\"; otherwise, print \\"NO\\". -----Sample Input----- 10 2 -----Sample Output----- YES 10 is divisible by 2, so we should print \\"YES\\".","solution":"def check_divisibility(B, N): Returns \'YES\' if B is divisible by N without a remainder; otherwise returns \'NO\'. if B % N == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"A company\'s internal tool generates a weekly report which contains the performance data of their employees. Each report is a list of integers where each integer represents the number of tasks completed by an employee in a week. The team leader wants to identify the employee with the minimum number of completed tasks because they need to provide additional support to this employee. If there are multiple employees with the same minimum number of completed tasks, the team leader wants to identify the first such employee in the list. You need to write a program that processes the list of completed tasks and identifies the index (1-based) of the employee with the minimum number of tasks. -----Input----- The first line contains a single integer `N` (1 ≤ N ≤ 100) - the number of employees. The second line contains `N` space-separated integers where each integer represents the number of tasks completed by an employee in a week. -----Output----- Output a single integer - the 1-based index of the first employee with the minimum number of completed tasks. -----Examples----- Input 5 10 7 5 20 5 Output 3 Input 4 15 10 15 20 Output 2","solution":"def find_min_tasks_employee_index(N, tasks): Given the number of employees and a list of integers representing the tasks completed by each employee, this function returns the 1-based index of the first employee with the minimum number of completed tasks. min_tasks = min(tasks) for i in range(N): if tasks[i] == min_tasks: return i + 1"},{"question":"# Problem Statement Given an array of integers, return an array where each element is the product of all the elements of the original array except the one at the current index. # Constraints - The input array will have a length between 2 and 20 (both inclusive). - Each element in the array will be an integer between -10 and 10 (both inclusive). - The product of all integers will fit within a 32-bit signed integer range. # Input - A single line containing the integers of the array, separated by a space. # Output - A single line containing the integers of the resulting array, separated by a space. # Examples Example 1 **Input:** ``` 1 2 3 4 ``` **Output:** ``` 24 12 8 6 ``` Example 2 **Input:** ``` -1 1 0 -3 3 ``` **Output:** ``` 0 0 9 0 0 ``` Example 3 **Input:** ``` 2 0 2 ``` **Output:** ``` 0 4 0 ``` # Note - In Example 1, for the position `i=0` (element 1), the product of all other elements is `2 * 3 * 4 = 24`. Thus, the result is `24`. Similarly, for `i=1` (element 2), the product is `1 * 3 * 4 = 12`, and so on. - In Example 2, for the position `i=0` (element -1), the product of all other elements is `1 * 0 * -3 * 3 = 0`. - Be aware of the presence of zeroes and negative numbers in the input array.","solution":"def product_except_self(nums): Given an array of integers, returns an array where each element is the product of all the elements of the original array except the one at the current index. if not nums: return [] length = len(nums) result = [1] * length left_product = 1 right_product = 1 # Calculating product of elements to the left of each index for i in range(length): result[i] = left_product left_product *= nums[i] # Calculating product of elements to the right of each index and combining with left product for i in range(length-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"In the upcoming triathlon event, participants are required to complete three stages: swimming, cycling, and running. Each stage has a distinct distance that must be covered by each participant. Not only is it crucial to complete each stage, but there are also checkpoints along the way to ensure that participants follow the correct path. You are given the times (in minutes) taken by each participant to complete each stage until the first checkpoint they reach. The checkpoints serve as intermediate time markers and also determine the total time taken to complete the event. However, due to some technical issues, the timing system has recorded the total time as the sum of the individual stage times including the checkpoint times which are not correct. Your task is to compute the correct total time taken by each participant by consolidating the individual stage times. # Input - The first line contains an integer `p` (1 ≤ p ≤ 10^5) representing the number of participants. - The next `p` lines each contain three integers `s_i`, `c_i`, `r_i` (1 ≤ s_i, c_i, r_i ≤ 10^3), where `s_i`, `c_i`, and `r_i` are the times in minutes taken by the ith participant to finish the swimming, cycling, and running stages respectively. # Output - Output `p` lines, where the ith line contains the correct total time taken by the ith participant. # Example Input ``` 3 30 60 40 25 55 35 35 65 45 ``` Output ``` 130 115 145 ``` # Explanation The correct total time for each participant is found by adding the times taken for swimming, cycling, and running stages: - For participant 1: 30 (swimming) + 60 (cycling) + 40 (running) = 130 - For participant 2: 25 (swimming) + 55 (cycling) + 35 (running) = 115 - For participant 3: 35 (swimming) + 65 (cycling) + 45 (running) = 145","solution":"def calculate_total_times(p, times): Calculate the correct total time taken by each participant :param p: int - number of participants :param times: List of tuples - [(s_i, c_i, r_i)...] where s_i, c_i, r_i are times for swimming, cycling, and running stages :return: List of int - correct total times for each participant total_times = [] for s, c, r in times: total_times.append(s + c + r) return total_times"},{"question":"# Task You are given two strings, `s1` and `s2`, both consisting of lowercase English letters. You need to determine if `s1` can be transformed into `s2` by performing a series of shift operations. A shift operation moves the last character of a string to the front. For example, applying the shift operation to the string \\"abcd\\" yields the string \\"dabc\\". Your task is to find out if it is possible to convert `s1` into `s2` using any number of shift operations. # Example For `s1 = \\"abcde\\"` and `s2 = \\"cdeab\\"`, the output should be `true`. It\'s possible to transform \\"abcde\\" into \\"cdeab\\" by shifting 2 times: ``` \\"abcde\\" -> \\"eabcd\\" \\"eabcd\\" -> \\"deabc\\" \\"deabc\\" -> \\"cdeab\\" ``` For `s1 = \\"abc\\"` and `s2 = \\"acb\\"`, the output should be `false`. It\'s not possible to transform \\"abc\\" into \\"acb\\" using any number of shift operations. # Input/Output - `[input]` string `s1` A lowercase string of length between 1 and 100. - `[input]` string `s2` A lowercase string of the same length as `s1`. - `[output]` a boolean Return `true` if it is possible to transform `s1` into `s2` using any number of shift operations. Otherwise, return `false`.","solution":"def can_be_shifted(s1, s2): Returns True if s1 can be transformed into s2 by performing a series of shift operations. Otherwise, returns False. if len(s1) != len(s2): return False concatenated_s1 = s1 + s1 return s2 in concatenated_s1"},{"question":"You are given a grid with N rows and M columns of characters representing a maze. Each cell in the grid contains one of the following characters: - \'.\' (dot) representing an open cell. - \'#\' (hash) representing a blocked cell. - \'S\' representing the start position. - \'E\' representing the end position. Robby the Robot is placed at the start position \'S\' and he can move up, down, left, or right to any of the open cells. He cannot move into the blocked cells. Your task is to determine if Robby can reach the end position \'E\' from the start position \'S\'. If he can reach the end position, print \\"Yes\\", otherwise print \\"No\\". Input - The first line contains the number of test cases. For each test case, the first line contains two integers N and M (number of rows and columns). Each of the next N lines contains a string of length M representing the grid. Output - For each test case, print \\"Yes\\" if Robby can reach the end position, otherwise print \\"No\\". SAMPLE INPUT 2 5 5 S...# .#.#. .#.#. .#..E # 4 4 S..# .. .. #E SAMPLE OUTPUT Yes No Explanation Testcase 1 - Robby can move as follows: right, right, down, down, right to reach the end position \'E\'. Testcase 2 - There is no path from \'S\' to \'E\' due to the blocked cells.","solution":"def can_reach_end(grid): Determines if Robby can reach the end position \'E\' from the start position \'S\'. :param grid: List of strings representing the maze grid. :return: \\"Yes\\" if the end is reachable, \\"No\\" otherwise. from collections import deque N = len(grid) M = len(grid[0]) # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Find start (S) and end (E) positions start = None end = None for i in range(N): for j in range(M): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) if not start or not end: return \\"No\\" queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == end: return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"No\\" def process_test_cases(test_cases): Processes multiple test cases. :param test_cases: List of test cases, where each test case is a tuple (N, M, grid) :return: List of results for each test case results = [] for tc in test_cases: N, M, grid = tc result = can_reach_end(grid) results.append(result) return results"},{"question":"You are given a list of dictionaries, where each dictionary represents a product with attributes \'name\', \'price\', and \'quantity\'. Write a function to sort this list of dictionaries based on the \'price\' in ascending order. In case two products have the same price, sort them by \'name\' alphabetically. ``` Example Input : [{\'name\': \'apple\', \'price\': 5.5, \'quantity\': 10}, {\'name\': \'banana\', \'price\': 3.0, \'quantity\': 5}, {\'name\': \'kiwi\', \'price\': 5.5, \'quantity\': 12}, {\'name\': \'orange\', \'price\': 4.0, \'quantity\': 8}] Output : [{\'name\': \'banana\', \'price\': 3.0, \'quantity\': 5}, {\'name\': \'orange\', \'price\': 4.0, \'quantity\': 8}, {\'name\': \'apple\', \'price\': 5.5, \'quantity\': 10}, {\'name\': \'kiwi\', \'price\': 5.5, \'quantity\': 12}] ``` Note: - The \'price\' attribute is a floating point number. - The \'name\' attribute is a string and should be considered for tie-breaking in case of equal prices.","solution":"def sort_products_by_price(products): Sorts a list of product dictionaries by \'price\' in ascending order. If two products have the same price, sorts them by \'name\' alphabetically. :param products: List of dictionaries with each dictionary containing \'name\', \'price\', and \'quantity\' :return: List of sorted product dictionaries return sorted(products, key=lambda x: (x[\'price\'], x[\'name\']))"},{"question":"Design a function that accepts an integer `n` and prints a pattern of numbers in form of a right-angled triangle. Example 1: Input: 4 Output: 1 1 2 1 2 3 1 2 3 4 Your Task: You don\'t need to input anything. Complete the function `printTriangle()` which takes an integer `n` as the input parameter and prints the pattern. Constraints: 1 <= n <= 30","solution":"def print_triangle(n): Prints a right-angled triangle pattern of numbers with n rows. for i in range(1, n + 1): row = \' \'.join(str(x) for x in range(1, i + 1)) print(row)"},{"question":"You are given an undirected graph represented by its adjacency matrix. Each vertex in the graph is colored either red or blue. Your task is to determine if the graph can be colored using just two colors in such a way that no two adjacent vertices have the same color. An undirected graph is bipartite if and only if we can color it with two colors such that no two adjacent vertices have the same color. -----Input----- The first line of input contains a single integer n (2 le n le 1000), the number of vertices in the graph. Each of the next n lines contains n digits (either 0 or 1) representing the adjacency matrix of the graph, where the j-th digit of the i-th line is 1 if and only if there is an edge between vertices i and j. The matrix is symmetric and contains zeroes on its main diagonal. -----Output----- Output \\"YES\\" (without quotes) if the graph can be colored using just two colors such that no two adjacent vertices have the same color. Otherwise, output \\"NO\\" (without quotes). -----Examples----- Input 3 011 101 110 Output NO Input 4 0101 1010 0101 1010 Output YES -----Explanation----- In the first example, the graph is a triangle, which cannot be two-colored without having two adjacent vertices sharing the same color. In the second example, the graph is a square, which can be two-colored alternatively.","solution":"def is_bipartite_graph(n, adjacency_matrix): Determines if the graph is bipartite using BFS. Parameters: n (int): Number of vertices adjacency_matrix (List[str]): List of strings representing the adjacency matrix Returns: str: \\"YES\\" if the graph can be colored using two colors, \\"NO\\" otherwise # Create an array to store colors assigned to all vertices. # Color values: -1 (not colored), 0 (first color), 1 (second color) colors = [-1] * n def bfs(start): # Initialize a queue with the starting node queue = [start] # Start coloring the first node with first color colors[start] = 0 while queue: node = queue.pop(0) # Check all adjacent nodes for neighbor in range(n): if adjacency_matrix[node][neighbor] == \\"1\\": if colors[neighbor] == -1: # If neighbor has not been colored, color it with opposite color colors[neighbor] = 1 - colors[node] queue.append(neighbor) elif colors[neighbor] == colors[node]: # If neighbor has the same color as current node, graph is not bipartite return False return True for i in range(n): if colors[i] == -1: # If the node has not been colored if not bfs(i): # Perform BFS from this node return \\"NO\\" return \\"YES\\""},{"question":"Heidi has m notebooks. She writes notes in them regularly and marks the completion date of each notebook. The date is given in the form of \'YYYY-MM-DD\'. Heidi wants to know when the first notebook among all the completed notebooks was finished. -----Input----- The first line contains the integer m (1 ≤ m ≤ 50 000) — the number of notebooks Heidi has. The second line contains the sequence of strings d_1, d_2, ..., d_{m} (each in the format of \'YYYY-MM-DD\'), where d_i is equal to the completion date of the i-th notebook. If a notebook is not yet finished, it is represented by the string \'incomplete\'. -----Output----- Print the completion date of the first notebook that was finished (in \'YYYY-MM-DD\' format). If all notebooks are incomplete, output \'No notebooks are complete\'. Notebooks are numbered in the order they are given in the input data. -----Examples---- Input 4 2023-05-10 2023-03-15 incomplete incomplete Output 2023-03-15 Input 3 incomplete incomplete 2023-01-01 Output 2023-01-01 Input 5 incomplete incomplete incomplete incomplete incomplete Output No notebooks are complete -----Note----- In the first test example, Heidi completed the second notebook on 2023-03-15, the first notebook on 2023-05-10, and hasn\'t completed the remaining two notebooks yet. Hence, the earliest completion date is 2023-03-15. In the second test example, Heidi completed only the third notebook on 2023-01-01, which is the earliest and only completion date among the given list. Hence, the answer is 2023-01-01. In the third test example, none of the notebooks are finished yet. So, the output is \'No notebooks are complete\'.","solution":"def find_earliest_completion_date(m, dates): Given m notebooks with completion dates, find and return the earliest completion date. If all notebooks are incomplete, return \'No notebooks are complete\'. completed_dates = [date for date in dates if date != \'incomplete\'] if not completed_dates: return \'No notebooks are complete\' return min(completed_dates)"},{"question":"Jonathan has a collection of n distinct integers. He wants to divide them into two non-empty subsequences such that the absolute difference between the sum of integers in the first subsequence and the sum of integers in the second subsequence is minimized. Help Jonathan determine the minimum possible absolute difference. -----Input----- The first line contains an integer n (2 le n le 20) — the total number of integers. The second line contains n distinct integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the integers in the collection. -----Output----- Print one integer — the minimum possible absolute difference. -----Example----- Input 4 1 5 11 5 Output 0 -----Note----- In the example, Jonathan can split the collection into two subsequences as follows: [1, 5, 5] and [11], which minimizes the absolute difference between the sums of these subsequences (11 - 11 = 0).","solution":"def min_subset_difference(n, nums): Returns the minimum possible absolute difference between the sums of two non-empty subsequences of the given list of integers. total_sum = sum(nums) # Initialize a set to store possible subset sums possible_sums = {0} for num in nums: current_sums = list(possible_sums) for s in current_sums: possible_sums.add(s + num) min_diff = float(\'inf\') for s in possible_sums: # Only consider non-empty subsets if s > 0 and s != total_sum: diff = abs(total_sum - 2 * s) if diff < min_diff: min_diff = diff return min_diff"},{"question":"Given a sequence of n integers a1, a2, ..., an and a positive integer m (1 ≤ m ≤ n), your task is to determine whether there exists a subsequence of length m in this sequence such that the sum of its elements is equal to a given integer S. The program should output \\"Yes\\" if such a subsequence exists and \\"No\\" otherwise. # Input The input consists of multiple datasets. Each dataset is given in the following format. The input ends with a dataset where n and m are both zeros. - The first line contains three integers n, m, and S (1 ≤ n ≤ 1000, 1 ≤ m ≤ n, -100000 ≤ S ≤ 100000) separated by spaces. - The following line contains n integers representing the elements of the sequence (-10000 ≤ ai ≤ 10000). # Output For each dataset, output \\"Yes\\" if there exists a subsequence of length m with a sum equal to S, otherwise output \\"No\\". # Examples Input ``` 5 3 6 1 2 3 4 5 4 2 12 5 5 5 5 0 0 0 ``` Output ``` Yes No ```","solution":"from itertools import combinations def check_subsequence_sum(n, m, S, sequence): Checks if there exists a subsequence of length m in the sequence such that the sum of its elements is equal to S. for comb in combinations(sequence, m): if sum(comb) == S: return \\"Yes\\" return \\"No\\" def process_datasets(datasets): Processes multiple datasets and returns the results for each dataset. results = [] for dataset in datasets: n, m, S, sequence = dataset if n == 0 and m == 0: break results.append(check_subsequence_sum(n, m, S, sequence)) return results"},{"question":"You are given a list of task objects, each containing a task ID, a task description, and a list of prerequisite task IDs that must be completed before this task can be started. Your objective is to determine a valid order in which all tasks can be completed, or indicate that it\'s impossible to complete all tasks due to circular dependencies. Each task is represented by a unique integer task ID. No two tasks will share the same ID. The input will be provided as JSON, and your program should output a JSON list of task IDs in the valid order. If there exists a dependency cycle, output an empty JSON list `[]`. Input The input will be in the following JSON format, structured as an array of task objects: ```json [ { \\"task_id\\": 1, \\"description\\": \\"Task 1\\", \\"prerequisites\\": [2, 3] }, { \\"task_id\\": 2, \\"description\\": \\"Task 2\\", \\"prerequisites\\": [4] }, { \\"task_id\\": 3, \\"description\\": \\"Task 3\\", \\"prerequisites\\": [] }, { \\"task_id\\": 4, \\"description\\": \\"Task 4\\", \\"prerequisites\\": [3] } ] ``` Output If a valid task order exists, output the task IDs as a JSON array in a valid sequence suitable for completing all tasks. In case of a dependency cycle, output an empty JSON array. Example # Input ```json [ { \\"task_id\\": 1, \\"description\\": \\"Task 1\\", \\"prerequisites\\": [2,3] }, { \\"task_id\\": 2, \\"description\\": \\"Task 2\\", \\"prerequisites\\": [4] }, { \\"task_id\\": 3, \\"description\\": \\"Task 3\\", \\"prerequisites\\": [] }, { \\"task_id\\": 4, \\"description\\": \\"Task 4\\", \\"prerequisites\\": [3] } ] ``` # Output ```json [3, 4, 2, 1] ``` # Explanation A valid order to complete the tasks is: Task 3, Task 4, Task 2, Task 1. - Task 3 has no prerequisites. - Task 4 has Task 3 as a prerequisite. - Task 2 has Task 4 as a prerequisite. - Task 1 has Task 2 and Task 3 as prerequisites.","solution":"def find_order(tasks): from collections import defaultdict, deque # Create a graph and indegree dictionary graph = defaultdict(list) indegree = defaultdict(int) for task in tasks: task_id = task[\'task_id\'] prerequisites = task[\'prerequisites\'] indegree[task_id] = len(prerequisites) for preq in prerequisites: graph[preq].append(task_id) # Find all nodes with zero indegree zero_indegree = deque([task[\'task_id\'] for task in tasks if indegree[task[\'task_id\']] == 0]) topological_order = [] while zero_indegree: current_task = zero_indegree.popleft() topological_order.append(current_task) # Decrease the indegree of neighbors for neighbor in graph[current_task]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: zero_indegree.append(neighbor) if len(topological_order) == len(tasks): return topological_order else: return []"},{"question":"Nightmare is trying to improve his coding skills to outsmart other demons. He wants to create an efficient algorithm to solve a problem involving strings. Given two strings S and T, determine if T can be obtained by rotating S clockwise any number of times. Print YES if it is possible, else print NO. Assist Nightmare in proving his skills by solving this problem. Constraints 1 ≤ Length of S, T ≤ 1000 Input The first line contains string S. The second line contains string T. Output In single line, print YES or NO Setter: Evelyn Smith SAMPLE INPUT abcde cdeab SAMPLE OUTPUT YES","solution":"def can_obtain_by_rotation(S, T): Determine if T can be obtained by rotating S clockwise any number of times. Args: S (str): the original string T (str): the target string Returns: str: \\"YES\\" if T can be obtained by rotating S, otherwise \\"NO\\" if len(S) != len(T): return \\"NO\\" # Concatenate S with itself double_s = S + S # Check if T is a substring of the concatenated string if T in double_s: return \\"YES\\" else: return \\"NO\\""},{"question":"Consider a grid of size N x M filled with integers. You are given Q queries each specifying a rectangular sub-grid within the main grid. For each query, calculate the sum of all integers within the specified sub-grid. -----Input----- - The first line contains three integers, N, M, and Q, representing the number of rows, columns, and queries respectively. - The next N lines each contain M integers, representing the grid. - The next Q lines each contain four integers x1, y1, x2, y2, representing the top-left (x1, y1) and bottom-right (x2, y2) coordinates of the sub-grid. -----Output----- For each query, output a single integer representing the sum of all integers within the specified sub-grid. -----Constraints----- - 1 ≤ N, M ≤ 1000 - 1 ≤ Q ≤ 10000 - -1000 ≤ Grid[i][j] ≤ 1000 - 1 ≤ x1 ≤ x2 ≤ N - 1 ≤ y1 ≤ y2 ≤ M -----Example----- Input: 3 3 2 1 2 3 4 5 6 7 8 9 1 1 2 2 1 2 3 3 Output: 12 28 -----Explanation----- Example 1: The sub-grid (1,1) to (2,2) includes: 1 2 4 5 Sum = 1 + 2 + 4 + 5 = 12 Example 2: The sub-grid (1,2) to (3,3) includes: 2 3 5 6 8 9 Sum = 2 + 3 + 5 + 6 + 8 + 9 = 33 Ensure to handle large inputs efficiently.","solution":"def calculate_prefix_sum(grid, n, m): prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = grid[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] return prefix_sum def query_subgrid_sum(prefix_sum, x1, y1, x2, y2): return prefix_sum[x2][y2] - prefix_sum[x1 - 1][y2] - prefix_sum[x2][y1 - 1] + prefix_sum[x1 - 1][y1 - 1] def process_queries(grid, queries): n = len(grid) m = len(grid[0]) prefix_sum = calculate_prefix_sum(grid, n, m) results = [] for x1, y1, x2, y2 in queries: results.append(query_subgrid_sum(prefix_sum, x1, y1, x2, y2)) return results"},{"question":"You are given an array of n positive integers and an integer k. You need to find the number of contiguous subarrays within which there are exactly k distinct integers. Input The first line contains two integers n and k (1 ≤ n ≤ 200000, 1 ≤ k ≤ n) — the array length and the number of distinct integers to be found in subarrays respectively. The second line contains n positive integers ai (1 ≤ ai ≤ 10^6) — the elements of the array. Output Output a single integer — the number of contiguous subarrays which contain exactly k distinct integers. Examples Input 5 2 1 2 1 2 3 Output 7 Input 6 3 1 2 1 3 4 2 Output 4 Note In the first example, the subarrays with 2 distinct integers are: - [1, 2] - [2, 1] - [1, 2] - [2, 3] - [1, 2, 1] - [2, 1, 2] - [1, 2, 3] Thus, the count of such subarrays is 7. In the second example, the subarrays with 3 distinct integers are: - [1, 2, 1, 3] - [2, 1, 3] - [1, 3, 4] - [3, 4, 2] Thus, the count is 4.","solution":"def count_subarrays_with_k_distinct(nums, k): from collections import defaultdict def at_most_k_distinct(arr, k): count = defaultdict(int) res = i = 0 for j in range(len(arr)): if count[arr[j]] == 0: k -= 1 count[arr[j]] += 1 while k < 0: count[arr[i]] -= 1 if count[arr[i]] == 0: k += 1 i += 1 res += j - i + 1 return res return at_most_k_distinct(nums, k) - at_most_k_distinct(nums, k - 1) # Example usage: # n, k = 5, 2 # nums = [1, 2, 1, 2, 3] # print(count_subarrays_with_k_distinct(nums, k)) # Output: 7"},{"question":"Given an array of integers and an integer k, write a program to determine if it is possible to partition the array into k non-empty subsets such that the sum of the elements in each subset is the same. ------ Input: ------ First line will contain T, number of testcases. Then the testcases follow. Each testcase contains two lines of input. The first line contains two space-separated integers, N, the number of elements in the array, and k, the number of subsets. The second line contains N space-separated integers representing the elements of the array. ------ Output: ------ For each testcase, output in a single line \\"YES\\" if it is possible to partition the array into k subsets with equal sum, and \\"NO\\" if it is not possible. Note: The output is case-insensitive ― each letter may be printed in upper case or lower case. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ N ≤ 16 1 ≤ k ≤ N 1 ≤ array elements ≤ 100 ----- Sample Input 1 ------ 3 4 2 4 3 2 3 5 3 3 3 3 4 2 6 4 2 5 1 6 2 4 ----- Sample Output 1 ------ YES NO NO ----- Explanation 1 ------ Case 1: It is possible to partition the array [4, 3, 2, 3] into 2 subsets with equal sum: [4, 2] and [3, 3]. Case 2: It is not possible to partition the array [3, 3, 3, 4, 2] into 3 subsets with equal sum. Case 3: It is not possible to partition the array [2, 5, 1, 6, 2, 4] into 4 subsets with equal sum.","solution":"def can_partition_k_subsets(nums, k): total_sum = sum(nums) if total_sum % k != 0: return \\"NO\\" target_sum = total_sum // k def can_partition(start, k, current_sum, bucket): if k == 1: return True if current_sum == target_sum: return can_partition(0, k - 1, 0, bucket) for i in range(start, len(nums)): if not bucket[i] and current_sum + nums[i] <= target_sum: bucket[i] = True if can_partition(i + 1, k, current_sum + nums[i], bucket): return True bucket[i] = False return False nums.sort(reverse=True) bucket = [False] * len(nums) return \\"YES\\" if can_partition(0, k, 0, bucket) else \\"NO\\" def solve(test_cases): results = [] for test_case in test_cases: N, k = test_case[0] nums = test_case[1] results.append(can_partition_k_subsets(nums, k)) return results"},{"question":"# Chessboard Knight\'s Move A knight in chess moves in an L-shape: it can move two squares in one direction (either vertically or horizontally) and then one square in a perpendicular direction, or one square in one direction and then two squares in a perpendicular direction. Given the starting and ending positions of a knight on a standard 8x8 chessboard, determine the minimum number of moves required for the knight to get from the start position to the end position. Complete the function `minKnightMoves(start, end)` that takes in two arguments: - `start`: a tuple (x1, y1) representing the starting position on the chessboard. - `end`: a tuple (x2, y2) representing the ending position on the chessboard. Both `start` and `end` are 0-indexed tuples (i.e., (0,0) corresponds to the bottom-left corner of the chessboard). The function should return an integer: the minimum number of moves required. Return `\\"Invalid input\\"` if any of the positions are outside the bounds of a standard 8x8 chessboard. # Examples ``` minKnightMoves((0, 0), (7, 7)) => 6 minKnightMoves((0, 0), (3, 3)) => 2 minKnightMoves((0, 0), (2, 1)) => 1 minKnightMoves((4, 4), (4, 4)) => 0 minKnightMoves((0, 0), (8, 8)) => \\"Invalid input\\" ``` # Constraints - The input positions will only contain integers. - The chessboard is 8x8 (0 <= x < 8, 0 <= y < 8).","solution":"from collections import deque def is_valid_position(x, y): return 0 <= x < 8 and 0 <= y < 8 def minKnightMoves(start, end): if not is_valid_position(*start) or not is_valid_position(*end): return \\"Invalid input\\" if start == end: return 0 moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)] queue = deque([(start[0], start[1], 0)]) visited = set((start[0], start[1])) while queue: x, y, dist = queue.popleft() for move in moves: nx, ny = x + move[0], y + move[1] if (nx, ny) == end: return dist + 1 if is_valid_position(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # Should never be reached on a valid board"},{"question":"You are given an array of integers and your task is to form the largest possible number by concatenating the numbers in the array. Input The first line of input contains a single integer N, the number of elements in the array. The second line contains N integers separated by a space. * 1 ≤ N ≤ 1000 * 0 ≤ integer ≤ 10^9 Output Output the largest possible number that can be formed by concatenating the integers in the array. Examples Input 3 54 546 548 Output 54854654 Input 5 1 34 3 98 9 Output 9983431","solution":"from functools import cmp_to_key def largest_number(arr): def compare(x, y): return (int(y + x) - int(x + y)) arr = list(map(str, arr)) arr.sort(key=cmp_to_key(compare)) result = \'\'.join(arr).lstrip(\'0\') return result or \'0\'"},{"question":"You are given a list of integers heights representing the heights of students in a class. The students are arranged in a single line and the goal is to form the longest possible group of students such that each student in the group is taller than the student before them in the group. Write a function to return the length of this longest group. Example 1: Input: heights = [5, 3, 4, 8, 6, 7] Output: 4 Explanation: The longest group is [3, 4, 6, 7], where each student in the group is taller than the previous one. Example 2: Input: heights = [1, 2, 3, 4, 5] Output: 5 Explanation: The longest group is [1, 2, 3, 4, 5], which includes all students as each one is taller than the previous one. Example 3: Input: heights = [5, 4, 3, 2, 1] Output: 1 Explanation: The longest group is any single student because each student is shorter than the previous one. Your task is to complete the function longest_increasing_group() which takes the list heights as input parameter and returns an integer representing the length of the longest group. Expected Time Complexity: O(NlogN) Expected Auxiliary Space: O(N) Constraints: 1 ≤ len(heights) ≤ 10^5 1 ≤ heights[i] ≤ 10^9","solution":"import bisect def longest_increasing_group(heights): Returns the length of the longest increasing group of heights. if not heights: return 0 # This will store the minimum ending value for each length lis = [] for height in heights: # Find the position to replace in lis pos = bisect.bisect_left(lis, height) # If pos is equal to length of lis, it means height is greater than any element in lis if pos == len(lis): lis.append(height) else: lis[pos] = height return len(lis)"},{"question":"A robot is standing on a grid at position (0, 0). The grid has a size of m times n with cells indexed using 0-based indexing (i.e., the top-left corner is (0,0) and the bottom-right corner is (m-1, n-1)). The robot can move to the right, down, or diagonally (bottom-right) at each step but it can never move outside the grid boundaries. Write a function to count the number of distinct paths the robot can take to reach the bottom-right corner (m-1, n-1) from its starting position (0, 0). Since this number may be very large, return the result modulo 10^9 + 7. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case consists of a single line containing two space-separated integers m (1 le m le 100) and n (1 le n le 100), representing the grid size. -----Output----- Output a single line with a single integer, indicating the number of distinct paths from the top-left corner to the bottom-right corner of the grid, modulo 10^9 + 7. -----Example----- Sample Input 1: 2 2 Sample Output 1: 3 Sample Input 2: 3 3 Sample Output 2: 13","solution":"MOD = 10**9 + 7 def count_paths(m, n): # Create a 2D list to hold the number of ways to reach each cell dp = [[0] * n for _ in range(m)] # There is exactly one way to reach the starting cell dp[0][0] = 1 # Fill the dp table for i in range(m): for j in range(n): if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD if i > 0 and j > 0: dp[i][j] = (dp[i][j] + dp[i-1][j-1]) % MOD return dp[m-1][n-1]"},{"question":"In a certain college, there is a unique tradition for distributing prizes to students. The organizer has a set of prizes, each prize can be seen as a tuple (M, C) where M is the monetary value of the prize and C is the candy value of the prize. The organizer has exactly n students eligible for the prizes and exactly n prizes to distribute. The goal is to assign exactly one prize to each student in such a way that the total monetary value and total candy value assigned to any student do not exceed their respective allowed values. Each student has a tuple (R_M, R_C), where R_M is the maximum total monetary value the student can receive and R_C is the maximum total candy value the student can receive. Determine whether it is possible to distribute all the prizes to all the students such that no student exceeds their allowed monetary or candy value. ----- Input ----- The first line contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains an integer n (1 le n le 100) — the number of students (or prizes). The next n lines each contain two integers M_i and C_i (1 le M_i, C_i le 1000) — the monetary and candy value of the i-th prize. The next n lines each contain two integers R_{M_i} and R_{C_i} (1 le R_{M_i}, R_{C_i} le 1000) — the maximum monetary and candy value the i-th student can receive. ----- Output ----- For each test case, print \\"YES\\" if it is possible to distribute prizes to the students without exceeding their respective allowed values, otherwise print \\"NO\\". ----- Examples ----- Input 3 2 200 300 300 200 300 400 200 300 1 500 600 400 500 3 500 600 300 400 200 100 500 700 400 500 1000 1000 Output YES NO YES ----- Note ----- In the first test case, one possible way to distribute the prizes is: - First student receives prize (200, 300) - Second student receives prize (300, 200) In the second test case, the only student cannot receive the prize because both the monetary and candy values of the prize exceed what the student is allowed to receive. In the third test case, one possible way to distribute the prizes is: - First student receives prize (200, 100) - Second student receives prize (300, 400) - Third student receives prize (500, 600)","solution":"def can_distribute_prizes(t, test_cases): results = [] for test_case in test_cases: n, prizes, students = test_case[\'n\'], test_case[\'prizes\'], test_case[\'students\'] # Sort prizes and students by their monetary and candy values prizes.sort() students.sort() possible = True for i in range(n): if prizes[i][0] > students[i][0] or prizes[i][1] > students[i][1]: possible = False break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"John, a cybersecurity enthusiast, is attending a hackathon where he encounters a strange encoding problem. He is presented with a string and needs to decode it using the following rule: - Each character in the string is encoded as two characters representing the hexadecimal value of its ASCII code in two-letter lowercase hexadecimal format. For example: - The string \\"abc\\" is encoded as \\"616263\\" (since \'a\' = \\"61\\", \'b\' = \\"62\\", \'c\' = \\"63\\"). John needs to decode such strings back to their original form. Your task is to help John by writing a function to decode the given encoded string. Input: The first line of input contains an integer T, the number of test cases. The next T lines each contain a single encoded string. Output: For each test case, output the decoded string. Constraints: 1 ≤ T ≤ 1000 1 ≤ length of encoded string ≤ 200 SAMPLE INPUT 3 616263 6e6f746573 68656c6c6f776f726c64 SAMPLE OUTPUT abc notes helloworld Note: Each character\'s hex representation in the encoded string is exactly two digits long.","solution":"def decode_hex_string(encoded_str): Decodes a hexadecimal encoded string where each original character was represented by its two-letter lowercase hexadecimal ASCII code. Parameters: encoded_str (str): The encoded string. Returns: str: The decoded original string. decoded_str = \\"\\" for i in range(0, len(encoded_str), 2): hex_pair = encoded_str[i:i+2] decoded_str += chr(int(hex_pair, 16)) return decoded_str def decode_multiple_cases(T, encoded_strings): results = [] for encoded_str in encoded_strings: results.append(decode_hex_string(encoded_str)) return results"},{"question":"The librarian needs help arranging books in a specific pattern in the library. She needs you to write a program that organizes the books based on an input number N. Each number represents a different shelf and arrangement of books. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the pattern of books for N shelves. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 50 -----Sample Input:----- 3 2 3 4 -----Sample Output:----- AB AAB ABC AABC ABBC ABCD AABCD ABBCD ABCCD -----EXPLANATION:----- No need, else the pattern can be decoded easily.","solution":"def generate_book_pattern(N): Generates a pattern for N shelves result = [] for i in range(1, N+1): row = [] for j in range(1, i+1): if j == 1: row.append(\'A\') else: row.append(chr(64 + j)) result.append(\'\'.join(row)) return result def arrange_books(test_cases): Arranges books based on the patterns for each test case N results = [] for N in test_cases: pattern = generate_book_pattern(N) results.append(pattern) return results"},{"question":"You are given a list of `N` integers representing the heights of trees. You have to remove the minimum number of trees such that the heights of the remaining trees are strictly increasing. Example 1: Input: N = 6 heights = [3, 1, 2, 1, 4, 5] Output: 2 Explanation: Remove trees with heights 3 and 1 to get the increasing sequence [1, 2, 4, 5]. Example 2: Input: N = 5 heights = [3, 3, 3, 3, 3] Output: 4 Explanation: Remove 4 trees to leave just one tree with height 3. Your task: Your task is to complete the function `min_removals()`, which takes an integer `N` and a list `heights` as the input parameters and returns an integer denoting the minimum number of trees that must be removed. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^5 1 <= heights[i] <= 10^4","solution":"from bisect import bisect_left def min_removals(N, heights): Returns the minimum number of trees that must be removed to ensure the remaining trees\' heights are strictly increasing. # List to store the longest increasing subsequence lis = [] for height in heights: pos = bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height # Calculate the number of removals needed return N - len(lis)"},{"question":"You are given a string `s` consisting of lowercase Latin letters. You have to find out the longest palindromic substring that can be obtained by deleting at most one character from `s`. A substring is defined as a contiguous sequence of characters within a string. A palindrome is a string that reads the same forward and backward. Input The first and only line of input contains the string `s` (1 ≤ |s| ≤ 105), consisting of lowercase Latin letters. Output Output the length of the longest palindromic substring that can be obtained by deleting at most one character. Examples Input abca Output 3 Input abcd Output 1","solution":"def longest_palindromic_substring_delete_one(s): Returns the length of the longest palindromic substring that can be obtained by deleting at most one character from the input string `s`. def is_palindrome(sub): return sub == sub[::-1] n = len(s) if is_palindrome(s): return n max_len = 1 # Initialize the max length to 1 as the minimum possible length for i in range(n): s_removed = s[:i] + s[i+1:] # Remove the character at index i if is_palindrome(s_removed): max_len = max(max_len, len(s_removed)) return max_len"},{"question":"You are working on a data recording system for a marathon event. Given the start and end times of multiple participants, determine the maximum number of participants that are simultaneously running at any given point in time during the marathon. Write a function that, given the start and end times of multiple participants, returns the maximum number of participants running simultaneously. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 200) — the number of test cases. For each test case, the first line contains an integer n (1 leq n leq 10^3) — the number of participants. The next n lines each contain two integers s_i and e_i (0 leq s_i < e_i leq 10^5) — the start and end times of the i-th participant. -----Output----- For each test case, output a single integer — the maximum number of participants that are simultaneously running at any given point in time. -----Example----- Input 2 3 1 4 2 5 3 6 4 2 8 3 5 5 7 6 9 Output 3 3 -----Note----- In the first case, the participants\' timelines overlap most intensely between time unit 3 and 4, making the count of simultaneously running participants at these times equal to 3. In the second case, the participants\' timelines overlap most intensely between time unit 5 and 7, making the count of simultaneously running participants at these times equal to 3.","solution":"def max_simultaneous_participants(test_cases): results = [] for case in test_cases: n, intervals = case events = [] for start, end in intervals: events.append((start, 1)) # 1 means start of participation events.append((end, -1)) # -1 means end of participation events.sort() # Sorting events by time, with end events coming first if times are the same current_participants = 0 max_participants = 0 for time, event in events: current_participants += event if current_participants > max_participants: max_participants = current_participants results.append(max_participants) return results"},{"question":"Write a function that takes two strings as input and determines if one string can be formed by rearranging the characters of another string (i.e., whether the two strings are anagrams). Your task is to return a boolean indicating whether the two strings are anagrams of each other. Input Format Two lines of input, each a string s_1 and s_2. Output Format A single line of output, either \\"True\\" or \\"False\\". Constraints - Both input strings consist of lower-case letters only. - The length of each string will be between 1 and 1000, inclusive. Sample Input carnation contraina Sample Output True Explanation The characters in the string \\"carnation\\" can be rearranged to form the string \\"contraina\\". Sample Input 2 hello world Sample Output 2 False Explanation 2 The characters in the string \\"hello\\" cannot be rearranged to form the string \\"world\\". The two strings are not anagrams.","solution":"def are_anagrams(s1, s2): Returns True if s1 and s2 are anagrams of each other, otherwise False. return sorted(s1) == sorted(s2)"},{"question":"A delivery company is planning to optimize their parcel transport routes between various cities. Each city is connected to other cities via bidirectional roads, and the company wants to ensure that the longest route (in terms of the number of roads used) between any pair of cities in their chosen route subset is minimized. They have a specific list of cities that must be included in the route. The company wants to determine the optimal route subset such that if they remove any more roads, it will no longer be possible to connect some of the cities in the list directly or indirectly. Write a program to find the optimal route subset and the length of the longest route in this subset between any pair of cities. Input: - The first line contains two integers, N and M, representing the number of cities and the number of bidirectional roads. - Each of the next M lines contains two integers, u and v, indicating a road between city u and city v. - The last line contains an integer K followed by K distinct integers representing the specific list of must-include cities. Output: - Output a single integer, the length of the longest route in the optimal route subset. Note: - Removing any road that breaks connectivity between any pair of specified cities is not allowed. - Ensure the resulting longest route is minimized within the constraint of maintaining connectivity between specified cities. Constraints: 1 ≤ N ≤ 1000 0 ≤ M ≤ 2000 1 ≤ u, v ≤ N 1 ≤ K ≤ N SAMPLE INPUT: 6 7 1 2 2 3 3 4 4 5 5 6 2 5 3 6 4 2 5 6 SAMPLE OUTPUT: 2 Explanation: Consider the must-include cities 4, 2, 5, 6. The optimal route subset will maintain connectivity between these cities while minimizing the longest direct route. The longest route in the example is minimized by selecting roads such that no single direct route exceeds 2 roads, ensuring that removing any further roads would disconnect some required cities.","solution":"def find_optimal_route(N, M, roads, K, must_include_cities): from collections import defaultdict, deque from functools import lru_cache # Construct the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Check connectivity of must included cities def is_connected(cities_subset): visited = set() q = deque([cities_subset[0]]) while q: city = q.popleft() if city not in visited: visited.add(city) for neighbor in graph[city]: if neighbor not in visited: q.append(neighbor) return len(visited & set(cities_subset)) == len(cities_subset) def bfs_longest_path_len(start, graph_subset): visited = {node: False for node in graph_subset} queue = deque([(start, 0)]) max_len = 0 while queue: node, dist = queue.popleft() if not visited[node]: visited[node] = True max_len = max(max_len, dist) for neighbor in graph_subset[node]: if not visited[neighbor]: queue.append((neighbor, dist + 1)) return max_len # Iteratively remove unnecessary roads while maintaining connectivity removed_edges = [] for u, v in roads: # Temporarily remove this edge graph[u].remove(v) graph[v].remove(u) # Check if must include cities are still connected if not is_connected(must_include_cities): # Not connected, so this edge is necessary graph[u].append(v) graph[v].append(u) else: # Connected, this edge can be removed removed_edges.append((u, v)) # Create a subset graph without removed edges graph_subset = defaultdict(list) for u, v in roads: if (u, v) not in removed_edges and (v, u) not in removed_edges: graph_subset[u].append(v) graph_subset[v].append(u) # Find the length of the longest route in the subset graph max_distance = 0 for city in must_include_cities: max_distance = max(max_distance, bfs_longest_path_len(city, graph_subset)) return max_distance # Sample Input N, M = 6, 7 roads = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (2, 5), (3, 6)] K = 4 must_include_cities = [4, 2, 5, 6] # Sample Output print(find_optimal_route(N, M, roads, K, must_include_cities)) # Expected Output: 2"},{"question":"*** Find the Missing Number *** You will be given an array containing `n-1` unique integers from the range `1` to `n`. The array does not contain duplicates, and one integer is missing from the series. Your task is to find the missing integer. You must solve this without using any loops. Examples: ```python find_missing_number([1, 2, 4, 5]) => 3 find_missing_number([2, 3, 1, 5]) => 4 ``` You can assume the input array always contains `n-1` integers, and all values are within the range `1` to `n`.","solution":"def find_missing_number(nums): Finds the missing number in the array containing n-1 unique integers from the range 1 to n. # Calculate the expected sum of the first n natural numbers n = len(nums) + 1 expected_sum = n * (n + 1) / 2 # Calculate the actual sum of the given numbers actual_sum = sum(nums) # The missing number is the difference between the expected sum and the actual sum return int(expected_sum - actual_sum)"},{"question":"# Given a string `binary_str` representing a binary number, write a function `convert_from_binary` that converts this binary string to its decimal (base-10) equivalent and returns it as an integer. Implement the following function: ```python def convert_from_binary(binary_str: str) -> int: Convert a binary string to a decimal integer. Parameters: binary_str (str): A string representing a binary number, e.g., \'1011\'. Returns: int: The decimal equivalent of the binary string. ``` # Example ```python assert convert_from_binary(\'1011\') == 11 assert convert_from_binary(\'1101\') == 13 assert convert_from_binary(\'10000\') == 16 ``` Note: The input string `binary_str` will always be a valid binary number.","solution":"def convert_from_binary(binary_str: str) -> int: Convert a binary string to a decimal integer. Parameters: binary_str (str): A string representing a binary number, e.g., \'1011\'. Returns: int: The decimal equivalent of the binary string. return int(binary_str, 2)"},{"question":"You are given an undirected weighted graph with n vertices and m edges. The graph may contain cycles. Each edge is described by three integers u, v, and w, meaning there is an edge between vertices u and v with weight w. Your task is to determine the length of the shortest path from vertex 1 to vertex n, if such a path exists. If there is no such path, output -1. Input The first line contains two integers, n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105). Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 109) — describing the edges of the graph. Output Output one integer — the length of the shortest path from vertex 1 to vertex n. If there is no such path, output -1. Examples Input 4 4 1 2 1 2 3 2 3 4 1 1 3 4 Output 4 Input 4 3 1 2 1 2 3 2 3 4 1 Output 4 Input 4 2 1 2 1 3 4 1 Output -1","solution":"import heapq def shortest_path_in_graph(n, m, edges): graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find the shortest path from 1 to n pq = [(0, 1)] # (distance, vertex) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[1] = 0 visited = set() while pq: current_dist, current_vertex = heapq.heappop(pq) if current_vertex in visited: continue visited.add(current_vertex) for neighbor, weight in graph[current_vertex]: distance = current_dist + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[n] if distances[n] != float(\'inf\') else -1"},{"question":"Write a program that helps the post office efficiently deliver packages. Each package has a weight, and the post office van has a weight limit for each delivery trip. You are given a list of package weights and the total weight limit of the van. The goal is to determine the minimum number of trips required to deliver all the packages, given that the van cannot exceed the weight limit in any trip. Each package must be delivered in exactly one trip. Input: The first line contains an integer T denoting the number of test cases. Each test case consists of two lines: - The first line contains two integers, N (the number of packages) and W (the weight limit of the van). - The second line contains N integers which represent the weights of the packages. Output: For each test case, output the minimum number of trips required to deliver all the packages. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ W ≤ 10^5 1 ≤ Weight of each package ≤ 10^4 SAMPLE INPUT: 2 4 10 2 3 5 7 5 15 1 2 3 4 5 SAMPLE OUTPUT: 2 1 Explanation: Case 1 : 2 (Trip 1: 2 + 3 + 5, Trip 2: 7) Case 2 : 1 (Trip 1: 1 + 2 + 3 + 4 + 5)","solution":"def min_trips(test_cases): results = [] for case in test_cases: N, W, weights = case weights.sort(reverse=True) trips = 0 while weights: remaining_capacity = W i = 0 while i < len(weights): if weights[i] <= remaining_capacity: remaining_capacity -= weights.pop(i) else: i += 1 trips += 1 results.append(trips) return results # Function to process inputs and output results def process_min_trips(T, cases): return min_trips(cases)"},{"question":"Bob loves playing with dominoes. He\'s given a grid of size N x M, and a domino piece has a size of 2 x 1 or 1 x 2. Bob wants to find out the maximum number of domino pieces that he can place on the grid such that the entire grid is covered without any gap or overlapping domino pieces. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two integers N and M representing the dimensions of the grid. -----Output:----- For each test case, output a single line, the maximum number of domino pieces that can be placed on the grid. -----Constraints:----- - 1 ≤ T ≤ 1000 - 1 ≤ N, M ≤ 1000 -----Sample Input:----- 2 2 3 3 3 -----Sample Output:----- 3 4 -----EXPLANATION:----- For 1) A 2x3 grid can be fully covered by three dominoes (each domino covering two cells). For 2) A 3x3 grid can be mostly covered by four dominoes (covering eight cells), with one cell remaining uncovered.","solution":"def max_dominoes(N, M): Returns the maximum number of dominoes that can be placed on an N x M grid. # Each domino covers two cells, so the maximum number of dominoes is the number of cells divided by 2 return (N * M) // 2 def solve_multiple_cases(test_cases): Returns the results for multiple test cases. Each test case is a tuple (N, M). results = [] for N, M in test_cases: results.append(max_dominoes(N, M)) return results # Example usage: # test_cases = [(2, 3), (3, 3)] # print(solve_multiple_cases(test_cases)) # Output: [3, 4]"},{"question":"Anna is an avid puzzle enthusiast and loves solving challenges that involve number sequences. Recently, she came across a unique sequence problem and needs your help to solve it. Here\'s the problem statement: Given a sequence of integers, determine the length of the longest subsequence such that all elements of the subsequence are strictly increasing. The subsequence does not have to be contiguous, but it must maintain the order of elements as they appear in the original sequence. # Input - The first line contains an integer `n` (1 ≤ n ≤ 2000), the length of the sequence. - The next line contains `n` integers `a_i` (1 ≤ a_i ≤ 10^5), representing the sequence. # Output - Output a single integer, the length of the longest strictly increasing subsequence in the given sequence. # Examples Input ``` 6 5 2 8 6 3 6 ``` Output ``` 3 ``` *Explanation*: The longest strictly increasing subsequence is `2 3 6` which has a length of 3. Input ``` 5 9 1 3 7 5 ``` Output ``` 3 ``` *Explanation*: The longest strictly increasing subsequences are `1 3 7` or `1 3 5` which have a length of 3. # Note Anna wants an efficient solution since the length of the sequence can be quite large. The most efficient algorithms typically involve dynamic programming or binary search with a time complexity of O(n log n). Please ensure your solution meets these criteria.","solution":"def longest_increasing_subsequence_length(sequence): import bisect if not sequence: return 0 lis = [] for num in sequence: pos = bisect.bisect_left(lis, num) if pos < len(lis): lis[pos] = num else: lis.append(num) return len(lis)"},{"question":"Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct. Example 1: Input: nums = [1,2,3,1] Output: true Explanation: 1 appears twice in the array. Example 2: Input: nums = [1,2,3,4] Output: false Explanation: All elements are distinct. Example 3: Input: nums = [1,1,1,3,3,4,3,2,4,2] Output: true Explanation: Multiple elements appear more than once. Your Task: Your task is to complete the function containsDuplicate() which takes an integer array nums as a parameter and returns true if any value appears at least twice in the array, otherwise returns false. Expected Time Complexity: O(n). Expected Auxiliary Space: O(n). Constraints: 1 ≤ nums.length ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9","solution":"def containsDuplicate(nums): Returns True if any value appears at least twice in the array, otherwise returns False. num_set = set() for num in nums: if num in num_set: return True num_set.add(num) return False"},{"question":"A software company is hosting a coding competition. Each participant submits multiple solutions during the competition, and each solution gets a score. Participants are ranked based on their highest score in any of their submissions. If two participants have the same highest score, the participant who achieved the score earlier is ranked higher. Write a program to simulate the ranking of participants based on their submissions and score. Given the list of submissions, determine the rank for each participant. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of submissions. Each of the next n lines contains three space-separated values: an integer t (1 ≤ t ≤ 10^5), an integer p (1 ≤ p ≤ 10^5), and an integer s (0 ≤ s ≤ 10^9) — the time of submission, the participant id, and the score of the submission. It is guaranteed that the submissions are provided in chronological order, i.e., the submission times are non-decreasing. -----Output----- Print the participant ids in the order of their ranking. If two participants have the same highest score, the participant who achieved it earlier should be listed first. -----Examples----- Input 5 1 1 100 2 2 200 3 1 150 4 3 200 5 2 250 Output 2 3 1 Input 4 1 1 300 2 2 300 3 1 300 4 2 300 Output 1 2 -----Note----- For the first sample, the highest scores and times of participants are: - Participant 1: highest score is 150, achieved at time 3 - Participant 2: highest score is 250, achieved at time 5 - Participant 3: highest score is 200, achieved at time 4 Thus, the ranking is 2, 3, and 1. For the second sample, the highest scores and times of participants are: - Participant 1: highest score is 300, achieved at time 1 - Participant 2: highest score is 300, achieved at time 2 Participant 1 is ranked higher because they achieved the score earlier. Hence the ranking is 1 and then 2.","solution":"def rank_participants(n, submissions): from collections import defaultdict highest_scores = defaultdict(lambda: (-1, float(\'inf\'))) # (highest_score, earliest_time) for t, p, s in submissions: if s > highest_scores[p][0] or (s == highest_scores[p][0] and t < highest_scores[p][1]): highest_scores[p] = (s, t) sorted_participants = sorted(highest_scores.keys(), key=lambda p: (-highest_scores[p][0], highest_scores[p][1])) return sorted_participants # Example usage n = 5 submissions = [(1, 1, 100), (2, 2, 200), (3, 1, 150), (4, 3, 200), (5, 2, 250)] print(rank_participants(n, submissions)) # Output: [2, 3, 1]"},{"question":"Maximize Profit in a Taxi Company A taxi company has multiple routes to cover each day. Each taxi can only cover one route in a day. The company maintains a list of all the routes with their respective distances and the profit that can be earned by covering that route. The goal is to assign the routes to the taxis in such a way that the total profit is maximized without assigning more than one route to any taxi. You are provided with an integer n, denoting the number of routes, and two lists, one containing the distances of the routes and another containing the respective profits that can be earned from each route. You are also given an integer k, representing the number of taxis available. Write a function to determine the maximum profit that can be earned by assigning the routes to the taxis optimally. Input format: - The first line contains an integer t, denoting the number of test cases. - For each test case, the first line contains two integers n and k, denoting the number of routes and taxis respectively. - The second line contains n integers, denoting the distances of the routes. - The third line contains n integers, denoting the profits from each route. Output format: For each test case, output a single integer, the maximum profit that can be earned. Constraints: - 1 ≤ t ≤ 10 - 1 ≤ n ≤ 1000 - 1 ≤ k ≤ n - 1 ≤ distance, profit ≤ 10^6 SAMPLE INPUT: 2 5 3 10 20 30 40 50 100 200 300 400 500 4 2 15 25 35 45 250 450 150 350 SAMPLE OUTPUT: 1200 800 Explanation: In the first test case, the optimal route assignment is to pick the three highest profit routes (500, 400, 300) to maximize the profit, giving a total of 500+400+300=1200. In the second test case, the optimal route assignment is to pick the two highest profit routes (450, 350) for a total of 450+350=800. Note: Ensure that no route is assigned to more than one taxi.","solution":"def maximize_profit(n, k, distances, profits): Returns the maximum possible profit by assigning routes to taxis optimally. # Create a list of tuples containing distances and their respective profits route_profits = [(distances[i], profits[i]) for i in range(n)] # Sort the routes based on profit in descending order route_profits.sort(key=lambda x: x[1], reverse=True) # Take the top k profits max_profit = sum(route_profits[i][1] for i in range(k)) return max_profit def main(inputs): Given the input as a list of strings, parse the input and return the list of results for each test case. results = [] t = int(inputs[0]) index = 1 for _ in range(t): n, k = map(int, inputs[index].split()) distances = list(map(int, inputs[index+1].split())) profits = list(map(int, inputs[index+2].split())) result = maximize_profit(n, k, distances, profits) results.append(result) index += 3 # Move to the next test case set return results"},{"question":"Given a string `s` and a character `c`, your task is to find the number of occurrences of the character `c` in the string `s`. Example 1: Input: s = \\"hello\\" c = \'l\' Output: 2 Explanation: The character \'l\' appears 2 times in the string \\"hello\\". Example 2: Input: s = \\"abcdefg\\" c = \'h\' Output: 0 Explanation: The character \'h\' does not appear in the string \\"abcdefg\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function `countOccurrences()` which takes a string `s` and a character `c` as input parameters and returns the number of occurrences of the character `c` in the string `s`. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(s) <= 10^6 c is a single character alphanumeric \'a\'-\'z\', \'A\'-\'Z\', \'0\'-\'9\'","solution":"def countOccurrences(s, c): Returns the number of occurrences of the character c in the string s. return s.count(c)"},{"question":"# Summary: Given an array of integers, `arr`, return the length of the longest subarray with a sum exactly equal to a given value `value`. # Description: A subarray is a contiguous part of an array with elements appearing in the same order as they do in the original array. You will have to return the maximum length of any such subarray that sums up to `value`. `1 <= len(arr) <= 10000` `-10000 <= arr[i] <= 10000` `-100000 <= value <= 100000` Examples: `arr = [1, -1, 5, -2, 3], value = 3` would return `4`: ``` The subarray [1, -1, 5, -2] sums up to 3 and has length 4. No longer subarray with sum 3 exists in the array. Max length: 4 ``` `arr = [-2, -1, 2, 1], value = 1` would return `2`: ``` The subarray [-1, 2] sums up to 1 and has length 2. No longer subarray with sum 1 exists in the array. Max length: 2 ``` `arr = [1, 2, 3, -3, -1], value = 2` would return `5`: ``` The subarray [1, 2, 3, -3, -1] sums up to 2 and has length 5. No longer subarray with sum 2 exists in the array. Max length: 5 ```","solution":"def length_of_longest_subarray_sum(arr, value): Returns the length of the longest subarray that sums up to the given value. prefix_sum = 0 longest_length = 0 sum_indices = {0: -1} # Dictionary to store prefix sums and their first occurrence for i in range(len(arr)): prefix_sum += arr[i] if prefix_sum - value in sum_indices: longest_length = max(longest_length, i - sum_indices[prefix_sum - value]) if prefix_sum not in sum_indices: # Only store the first occurrence sum_indices[prefix_sum] = i return longest_length"},{"question":"In a faraway kingdom, there are several towns connected by bidirectional roads. The king wants to select one of these towns to build a new castle. The king doesn\'t want the castle to be too remote, nor too crowded with adjacent towns. To decide the best town for the castle, he wants to minimize the maximum travel distance from the castle to all other towns. Each town is represented by a unique integer identifier from 1 to n. There are m roads connecting these towns, and each road has a length. The length of a road represents the time it takes to travel between the two connected towns. Given the towns, roads, and their lengths, help the king find the town where building the castle will minimize the maximum travel distance to any other town. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of towns and the number of roads respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100) — indicating that there is a road between town u and town v with length w. If there are no roads (m = 0), you can assume that n = 1 and the answer will be 0. Output Print an integer — the identifier of the town that minimizes the maximum travel distance to any other town. If there are multiple such towns, print the smallest identifier. Example Input 4 4 1 2 5 2 3 2 3 4 3 4 1 4 Output 2","solution":"def find_best_town(n, m, roads): inf = float(\'inf\') dist = [[inf if i != j else 0 for j in range(n)] for i in range(n)] # Fill the initial distances for road in roads: u, v, w = road u -= 1 v -= 1 dist[u][v] = min(dist[u][v], w) dist[v][u] = min(dist[v][u], w) # Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][k] < inf and dist[k][j] < inf: dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) # Find the town with the minimum of the maximum distances best_town = -1 best_dist = inf for i in range(n): max_dist = max(dist[i][j] for j in range(n)) if max_dist < best_dist: best_dist = max_dist best_town = i + 1 return best_town"},{"question":"Develop a function that calculates the minimum number of operations required to convert string A into string B. The allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character The function should take multiple test cases as input. Input The first line contains a positive integer T - the total number of test cases. The following T lines each contain two strings A and B, separated by a space. Output For each test case, output the minimum number of operations required to convert A into B. Constraints 1 ≤ T ≤ 100 1 ≤ |A|, |B| ≤ 1000 Subtasks Subtask #1 (40 points) 1 ≤ T ≤ 100 1 ≤ |A|, |B| ≤ 100 Subtask #2 (60 points) 1 ≤ T ≤ 100 1 ≤ |A|, |B| ≤ 1000 Sample Testcase Sample Input 2 kitten sitting flaw flawless Sample Output 3 4","solution":"def min_operations(T, test_cases): def edit_distance(A, B): m, n = len(A), len(B) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n] results = [] for A, B in test_cases: results.append(edit_distance(A, B)) return results"},{"question":"You are given a string containing only lowercase alphabets. Your task is to find the longest substring of the given string in which the characters are in lexicographical order and all characters are distinct. The substring should be as long as possible without rearranging any characters from the original string. Complete the function `longest_lexico_substring` with input string `s`. Return the longest lexicographical substring with all distinct characters from the input string. Constraints 1 leq text{length of } s leq 10^5 Subtasks For 50% of the maximum score, the length of s leq 10^3 Sample Input s = \\"abcabca\\" Sample Output \\"abc\\" Explanation The longest substring where characters are in lexicographical order and all characters are distinct is \\"abc\\". Other substrings like \\"ab\\", \\"bc\\", \\"a\\", \\"b\\", \\"c\\" are shorter and \\"abca\\" contains a repeating character. Hence, the output is \\"abc\\".","solution":"def longest_lexico_substring(s): Find the longest substring where characters are in lexicographical order and all characters are distinct. longest_substr = \\"\\" current_substr = \\"\\" for i in range(len(s)): # If current character is larger than the last character in the current substring # and is not already in the current substring if (not current_substr or s[i] > current_substr[-1]) and s[i] not in current_substr: current_substr += s[i] # Add character to the current substring else: # Evaluate if the current substring is the longest so far if len(current_substr) > len(longest_substr): longest_substr = current_substr # Resetting the current substring considering the same character again current_substr = s[i] # Final check in case the longest substring is at the end of the string if len(current_substr) > len(longest_substr): longest_substr = current_substr return longest_substr"},{"question":"You are tasked to write a program that simulates a conveyor belt system for transporting different types of packages in a warehouse. Each package has a unique identifier, size, and destination. The conveyor belt has a fixed capacity, and can only move a certain number of packages at a time, based on their sizes. The conveyor belt system works in discrete time units. During each time unit: 1. New packages may arrive and be added to the conveyor belt, if there is enough capacity. 2. Packages are transported from the conveyor belt to their destinations. You need to determine the number of time units required to transport all packages to their destinations. -----Input----- The first line contains two integers, (C) and (N), where (1 leq C leq 1000) represents the capacity of the conveyor belt and (1 leq N leq 100) represents the number of packages. The next (N) lines each contain three values: an integer (P_i) (the size of the package, (1 leq P_i leq 100)), a string (ID_i) (the unique identifier of the package consisting of alphanumeric characters), and a string (D_i) (the destination of the package consisting of uppercase alphabetic characters). -----Output----- Output the minimum number of time units required to transport all packages to their destinations. -----Example----- Sample Input: 10 3 5 A123 X 4 B234 Y 6 C345 Z Sample Output: 2","solution":"def conveyor_belt_simulation(C, N, packages): Simulates the conveyor belt system and returns the minimum number of time units required to transport all packages to their destinations. :param C: (int) Capacity of the conveyor belt :param N: (int) Number of packages :param packages: (list) List of tuples representing the packages. Each tuple contains three values: size, unique identifier, and destination. :returns: (int) Minimum number of time units required to transport all packages sorted_packages = sorted(packages, reverse=True) time_units = 0 while sorted_packages: current_unit_capacity = C index = 0 while index < len(sorted_packages): package_size = sorted_packages[index][0] if package_size <= current_unit_capacity: current_unit_capacity -= package_size sorted_packages.pop(index) else: index += 1 time_units += 1 return time_units # Example usage: # packages = [(5, \'A123\', \'X\'), (4, \'B234\', \'Y\'), (6, \'C345\', \'Z\')] # print(conveyor_belt_simulation(10, 3, packages)) # Output should be 2"},{"question":"A teacher wants to grade homework assignments using a specific set of rules. The homework consists of Q problems, each with a score that can range from 0 to 100. The teacher has decided to use the following rules to determine the final grade for each assignment: 1. If a score is a perfect square, it will be multiplied by 2. 2. If a score is a prime number, it will be multiplied by 3. 3. If a score is neither a perfect square nor a prime number, it will remain unchanged. Your task is to implement a program that takes Q scores and applies the above rules to each score. The output should be the final calculated scores for each assignment. Constraints: > 1 ≤ Q ≤ 100 > 0 ≤ Score ≤ 100 Input: > Q > Score1 > Score2 > ... > ScoreQ * Q represents the number of homework assignment scores given * Scorei represents the score of the i-th homework assignment Output: Output Q integers separated by line breaks > FinalScore1 > FinalScore2 > ... > FinalScoreQ * FinalScorei represents the final score for the i-th homework assignment after applying the given rules Examples: Input: 4 25 7 18 50 Output: 50 21 18 50 Input: 3 10 17 64 Output: 10 51 128","solution":"import math def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def apply_grading_rules(scores): Apply grading rules to a list of scores. final_scores = [] for score in scores: if math.isqrt(score) ** 2 == score: final_scores.append(score * 2) elif is_prime(score): final_scores.append(score * 3) else: final_scores.append(score) return final_scores def main(): Q = int(input()) scores = [int(input()) for _ in range(Q)] final_scores = apply_grading_rules(scores) for score in final_scores: print(score)"},{"question":"You are given a binary tree. A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. Your task is to write a function that performs the following operations: 1. Find the maximum depth of the binary tree. The maximum depth of the binary tree is the number of nodes along the longest path from the root node down to the farthest leaf node. 2. Calculate the sum of all the node values at the deepest level of the tree. Here is a definition of the Tree Node class you might use: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` The function should take the root of the binary tree as input and return a tuple with the maximum depth and the sum of node values at the deepest level. # Example: Given the following binary tree: ``` 1 / 2 3 / / 4 5 6 7 / 8 9 ``` The maximum depth is 4, and the sum of node values at the deepest level (which consists of nodes 8 and 9) is 17. # Function Signature ```python def find_max_depth_and_sum_at_deepest(root: TreeNode) -> (int, int): pass ``` # Constraints - The number of nodes in the tree will be in the range [1, 10000]. - The value of each node will be in the range [-1000, 1000]. # Note - Write the function in Python and make sure it handles all edge cases gracefully.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_max_depth_and_sum_at_deepest(root: TreeNode): if not root: return (0, 0) max_depth = 0 sum_at_deepest = 0 queue = [(root, 1)] # (node, current_depth) while queue: current, depth = queue.pop(0) if depth > max_depth: max_depth = depth sum_at_deepest = current.value elif depth == max_depth: sum_at_deepest += current.value if current.left: queue.append((current.left, depth + 1)) if current.right: queue.append((current.right, depth + 1)) return (max_depth, sum_at_deepest)"},{"question":"A thief is trying to break into a secured vault that uses a numerical keypad. The vault\'s security system requires the thief to input a sequence of numbers that match a certain pattern to gain access. The pattern is given as a string consisting of: - \'A\' which stands for entering any number between 1-10 (inclusive). - \'B\' which indicates entering any number between 11-20 (inclusive). The vault\'s security system will provide a string pattern, and the thief must determine all possible sequences of numbers that match this pattern. Your task is to write a function that takes the pattern string as input and returns a list of all valid numerical sequences that match the pattern. Input The first line of the input gives the number of test cases, T. For each test case, a single line follows containing a pattern string made up of the characters \'A\' and \'B\'. Output For each test case, output one line containing \\"Case #x: y\\", where x is the test case number (starting from 1) and y is a list of space-separated valid sequences. Each sequence should be represented as a comma-separated list of numbers. Constraints 1 ≤ T ≤ 10. 1 ≤ length of pattern ≤ 6. SAMPLE INPUT 2 AA BAB SAMPLE OUTPUT Case #1: 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 1,10 ... 10,10 Case #2: 11,1,11 11,1,12 11,1,13 ... 11,10,20 ... 20,10,20 (Note: Output ellipses (\\"...\\") represent that all valid sequences should be listed, but they have been truncated for brevity) Explanation In Case #1, the pattern \\"AA\\" means two \'A\' entries, hence each can be any number between 1 and 10. You need to list out all the combinations formed by pairing two such numbers. In Case #2, the pattern \\"BAB\\" means first a \'B\' entry followed by an \'A\' and then a \'B\' again. So combinations such as 11,1,11, 11,1,12,..., 20,10,20 should be listed out. The result should give all possible valid sequences following this pattern.","solution":"from itertools import product def generate_sequences(pattern): Generate all sequences of numbers that match the given pattern. \'A\' represents numbers from 1 to 10. \'B\' represents numbers from 11 to 20. ranges = { \'A\': range(1, 11), \'B\': range(11, 21), } possible_values = [ranges[char] for char in pattern] sequences = list(product(*possible_values)) return sequences def solve_vault_patterns(test_cases): results = [] for i, pattern in enumerate(test_cases, 1): sequences = generate_sequences(pattern) formatted_sequences = \' \'.join(\',\'.join(map(str, seq)) for seq in sequences) results.append(f\\"Case #{i}: {formatted_sequences}\\") return results"},{"question":"You are given a sequence of n integers A = [a_1, a_2, ..., a_n]. You have to answer m queries, each described by two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n). For each query, find the sum of squares of all integers in the subarray starting from index l_i to r_i, inclusive. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^6), the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^3). The third line contains an integer m (1 ≤ m ≤ 10^5), the number of queries. Each of the next m lines contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n). -----Output----- For each query, print the sum of squares of the integers in the subarray from l_i to r_i. -----Examples----- Input 5 1 -2 3 4 -5 3 1 3 2 5 1 5 Output 14 54 55","solution":"def sum_of_squares_subarray(n, A, queries): Calculates the sum of squares of elements for each subarray defined by the queries. Arguments: n : length of the list A A : list of integers queries : list of tuple containing (l_i, r_i) Returns: result : a list of integers where each integer is the sum of squares for the query subarray # Calculate the prefix sums of squares prefix_squares = [0] * (n + 1) for i in range(n): prefix_squares[i + 1] = prefix_squares[i] + A[i] * A[i] # Answer each query result = [] for l_i, r_i in queries: sum_squares = prefix_squares[r_i] - prefix_squares[l_i - 1] result.append(sum_squares) return result"},{"question":"A famous detective is investigating a sequence of events that form a pattern. The detective has a list of events, each with a unique identifier and a timestamp. The list is provided in a way such that events are not necessarily in order of their timestamps. The detective needs to identify the length of the longest sequence of consecutive events based on their timestamps. Two events are consecutive if their timestamps differ by exactly 1. Your task is to help the detective determine the length of the longest sequence. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100000), representing the number of events. The second line contains n integers t_{1}, t_{2}, ..., t_{n} (1 ≤ t_{i} ≤ 10^{9}), where t_{i} is the timestamp of the i-th event. -----Output----- Print a single integer representing the length of the longest sequence of consecutive events. -----Examples----- Input 6 10 20 30 31 32 33 Output 4 Input 8 1 3 5 2 4 8 6 7 Output 8","solution":"def longest_consecutive_sequence(n, timestamps): Determines the length of the longest sequence of consecutive events based on their timestamps. Parameters: n (int): The number of events. timestamps (list of int): The timestamps of the events. Returns: int: The length of the longest sequence of consecutive events. if n == 0: return 0 timestamps_set = set(timestamps) longest_sequence = 0 for timestamp in timestamps: if timestamp - 1 not in timestamps_set: current_timestamp = timestamp current_streak = 1 while current_timestamp + 1 in timestamps_set: current_timestamp += 1 current_streak += 1 longest_sequence = max(longest_sequence, current_streak) return longest_sequence"},{"question":"You are given an array of integers A and an integer K. You need to find the length of the smallest contiguous subarray whose sum is greater than or equal to K. If no such subarray exists, return -1. -----Input:----- - The first line of the input contains a single integer T representing the number of test cases. - Each test case includes two lines: - The first line contains two integers N (the length of the array A) and K (the target sum). - The second line contains N space-separated integers representing the elements of the array A. -----Output:----- For each test case, print a single integer representing the length of the smallest contiguous subarray whose sum is greater than or equal to K. If no such subarray exists, print -1. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 10^5 - 1 ≤ K ≤ 10^9 - 1 ≤ A[i] ≤ 10^4 -----Subtasks----- - 20 points : N ≤ 100 - 80 points : text{original constraints} -----Sample Input:----- 2 5 11 1 2 3 4 5 4 15 1 2 3 4 -----Sample Output:----- 3 -1","solution":"def min_subarray_length(arr, k): Returns the length of the smallest contiguous subarray whose sum is greater than or equal to k. If no such subarray exists, returns -1. n = len(arr) min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= k: min_len = min(min_len, end - start + 1) current_sum -= arr[start] start += 1 return min_len if min_len != float(\'inf\') else -1 def process_test_cases(t, test_cases): Processes multiple test cases and returns the results for each. results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] result = min_subarray_length(arr, k) results.append(result) return results"},{"question":"Given a binary tree, your task is to complete the function `isSymmetric()`, that returns true if the binary tree is a mirror of itself (i.e., symmetric around its center) and false otherwise. Example 1: Input: 1 / 2 2 / / 3 4 4 3 Output: True Explanation: The given binary tree is symmetric. Example 2: Input: 1 / 2 2 3 3 Output: False Explanation: The given binary tree is not symmetric. Your Task: You need to complete the function `isSymmetric()` which takes the root of the binary tree as input and returns a boolean value indicating whether the tree is symmetric or not. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= number of nodes <= 10^4 -100 <= Node value <= 100","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def isSymmetric(root): Determines if a binary tree is symmetric. Args: root (TreeNode): The root node of the binary tree. Returns: bool: True if the tree is symmetric, False otherwise. if root is None: return True return isMirror(root.left, root.right) def isMirror(left, right): Helper function to compare two trees for mirror symmetry. Args: left (TreeNode): The left subtree. right (TreeNode): The right subtree. Returns: bool: True if the subtrees are mirror images, False otherwise. if left is None and right is None: return True if left is None or right is None: return False return (left.val == right.val) and isMirror(left.left, right.right) and isMirror(left.right, right.left)"},{"question":"You\'re given a list of integers and your task is to write a function `separate_even_odd` that separates the list into even and odd integers, while maintaining their original order. The function should return a tuple of two lists: the first list containing all the even integers and the second list containing all the odd integers. For example: ```python >>> separate_even_odd([12, 3, 5, 8, 6, 7, 4]) ([12, 8, 6, 4], [3, 5, 7]) ``` The function should work for both positive and negative integers, and zero should be considered an even number. The input list can be empty, in which case the function should return two empty lists as well.","solution":"def separate_even_odd(numbers): Separates a list of integers into even and odd integers, maintaining their original order. Parameters: numbers (list of int): List of integers to be separated. Returns: tuple: A tuple containing two lists - the first list containing even integers, the second list containing odd integers. evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] return (evens, odds)"},{"question":"Given a positive integer n, find the largest prime number less than or equal to n. Example 1: Input: n = 10 Output: 7 Explanation: The prime numbers less than or equal to 10 are 2, 3, 5, and 7. The largest prime number is 7. Example 2: Input: n = 20 Output: 19 Explanation: The prime numbers less than or equal to 20 are 2, 3, 5, 7, 11, 13, 17, and 19. The largest prime number is 19. Your Task: You don\'t need to read input or print anything. Your task is to complete the function largestPrime() which takes an integer n as input and returns the largest prime number less than or equal to n. Expected Time Complexity: O(n log log n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^3","solution":"def largestPrime(n): Returns the largest prime number less than or equal to n. if n < 2: return None # no prime numbers less than or equal to 1 sieve = [True] * (n + 1) sieve[0], sieve[1] = False, False # 0 and 1 are not prime numbers p = 2 while (p * p <= n): if (sieve[p] == True): for i in range(p * p, n + 1, p): sieve[i] = False p += 1 for p in range(n, -1, -1): if sieve[p]: return p return None"},{"question":"# The ascending order sequence In a given list of unique integers, Carolithe needs to find the length of the longest contiguous subarray that forms a sequence in ascending order (strictly incrementing by 1). Write a program that helps her identify the length of this sequence. # Task Write a function that takes a list of unique integers and returns the length of the longest contiguous subarray where the elements form an ascending sequence. # Examples ```python longest_sequence([1, 2, 3, 5, 6, 7, 8]) = 4 # [5, 6, 7, 8] is the longest ascending sequence longest_sequence([10, 12, 13, 15]) = 2 # [12, 13] is the longest ascending sequence longest_sequence([1, 3, 5, 2, 4, 6, 7, 8]) = 4 # [4, 5, 6, 7, 8] is the longest ascending sequence longest_sequence([10, 20, 30, 40]) = 1 # No contiguous ascending sequence ```","solution":"def longest_sequence(arr): if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1] + 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a function that takes a string as input, which consists of lowercase Latin letters only, and finds the length of the longest substring with all unique characters. You are not allowed to use any additional data structures like sets or dictionaries. Input The input data consists of a single non-empty string, with a length not exceeding 1000 characters. Output You need to output a single integer - the length of the longest substring with all unique characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3","solution":"def length_of_longest_unique_substring(s): Returns the length of the longest substring with all unique characters. n = len(s) if n == 0: return 0 max_len = 0 start = 0 for i in range(n): for j in range(start, i): if s[i] == s[j]: start = j + 1 break max_len = max(max_len, i - start + 1) return max_len"},{"question":"Write a function that takes a list of non-negative integers representing the amount of rainwater stored above each building in a city skyline, and returns the total amount of rainwater that can be trapped after the rain. The list represents the height of buildings at different positions, and the rainwater trapped is the water that can be stored between the buildings after a rainstorm. Example: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Input: [4,2,0,3,2,5] Output: 9","solution":"def trap_rain_water(heights): Returns the total amount of rainwater that can be trapped after the rain. :param heights: List of non-negative integers representing the amount of rainwater stored above each building. :return: Total trapped rainwater. if not heights: return 0 n = len(heights) left_max = [0]*n right_max = [0]*n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"In a magical land, there is a seasonal festival where wizards exchange magical spells. Each wizard can only exchange spells with certain other wizards as indicated by a given list of allowed exchanges. You need to determine the number of unique wizards involved in the exchange for a given number of test cases. Input: The first line contains an integer T, denoting the number of test cases. The first line of each test case contains an integer N, denoting the total number of allowed exchanges. The next N lines contain two space-separated integers A and B, indicating that wizard A can exchange spells with wizard B. Output: For each test case, print the number of unique wizards involved in the exchange. Constraint: 1 ≤ T ≤ 50 1 ≤ N ≤ 500 1 ≤ A, B ≤ 5000 SAMPLE INPUT 1 4 1 2 2 3 4 5 3 5 SAMPLE OUTPUT 5","solution":"def count_unique_wizards(test_cases): results = [] for test in test_cases: n, exchanges = test unique_wizards = set() for a, b in exchanges: unique_wizards.add(a) unique_wizards.add(b) results.append(len(unique_wizards)) return results"},{"question":"Problem Statement You are given a rectangular grid of size ( H times W ) filled with non-negative integers. You need to find the sum of integers in the largest sub-grid (sub-rectangle) for which the sum does not exceed a given integer ( K ). A sub-grid is defined by its top-left and bottom-right corner in the grid. Input The input consists of multiple datasets. Each dataset is formatted as follows: > ( H ) ( W ) ( K ) > matrix_row_1 > matrix_row_2 > ... > matrix_row_H The first line of a dataset contains three integers ( H ) ((1 le H le 300)), ( W ) ((1 le W le 300)), and ( K ) ((1 le K le 10^9)) which define the height and width of the grid and the maximum allowed sum respectively. Each of the next ( H ) lines contains ( W ) space-separated integers representing a row of the grid, with each integer being non-negative and not greater than ( 1000 ). The end of the input is indicated by a line containing three zeroes. Output For each dataset, output a line containing the sum of the integers in the largest sub-grid for which the sum does not exceed ( K ). Sample Input 3 3 7 1 2 3 4 5 6 7 8 9 4 4 20 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 Output for the Sample Input 7 16 Example Input 3 3 7 1 2 3 4 5 6 7 8 9 4 4 20 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 Output 7 16","solution":"def max_subgrid_sum(H, W, K, matrix): def calculate_sum(r1, c1, r2, c2): total = pre[r2][c2] if r1 > 0: total -= pre[r1-1][c2] if c1 > 0: total -= pre[r2][c1-1] if r1 > 0 and c1 > 0: total += pre[r1-1][c1-1] return total pre = [[0] * W for _ in range(H)] for i in range(H): for j in range(W): pre[i][j] = matrix[i][j] if i > 0: pre[i][j] += pre[i-1][j] if j > 0: pre[i][j] += pre[i][j-1] if i > 0 and j > 0: pre[i][j] -= pre[i-1][j-1] max_sum = 0 for r1 in range(H): for c1 in range(W): for r2 in range(r1, H): for c2 in range(c1, W): current_sum = calculate_sum(r1, c1, r2, c2) if current_sum <= K: max_sum = max(max_sum, current_sum) return max_sum def process_input(input_str): datasets = input_str.strip().split(\'n\') index = 0 results = [] while index < len(datasets): H, W, K = map(int, datasets[index].split()) if H == W == K == 0: break index += 1 matrix = [] for _ in range(H): row = list(map(int, datasets[index].split())) matrix.append(row) index += 1 results.append(max_subgrid_sum(H, W, K, matrix)) return results"},{"question":"Write a function that takes a string representing a mathematical expression consisting of non-negative integers and the four basic arithmetic operations (+, -, *, /) and evaluates the expression. The function should handle operator precedence and parentheses correctly. Constraints: - The input string is guaranteed to be valid and only contains non-negative integers, the operations mentioned above, and parentheses. - Division should be treated as integer division (e.g., 7 / 2 = 3). - You should not use any built-in libraries or functions that directly evaluate the expression (e.g., `eval()` in Python or similar in other languages). Example: ```python expression = \\"3 + 2 * 2\\" # result = 7 expression = \\"3 / 2\\" # result = 1 expression = \\"3 + 5 / 2\\" # result = 5 expression = \\"10 + (2 * 3)\\" # result = 16 expression = \\"(2 + 3) * 4\\" # result = 20 ``` Expected function signature: - Python: `def calculate(expression: str) -> int:`","solution":"def calculate(expression: str) -> int: def precedence(op: str) -> int: if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_op(a: int, b: int, op: str) -> int: if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a // b # Ensure integer division def calculate_internal(tokens: list) -> int: values = [] ops = [] def evaluate(): b = values.pop() a = values.pop() op = ops.pop() values.append(apply_op(a, b, op)) i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while ops and ops[-1] != \'(\': evaluate() ops.pop() else: while (ops and precedence(ops[-1]) >= precedence(tokens[i])): evaluate() ops.append(tokens[i]) i += 1 while ops: evaluate() return values[-1] def tokenize(expression: str) -> list: # Convert expression string into a list of tokens tokens = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] in \'()+-*/\': tokens.append(expression[i]) i += 1 elif expression[i].isdigit(): num = \'\' while i < len(expression) and expression[i].isdigit(): num += expression[i] i += 1 tokens.append(num) else: raise ValueError(f\\"Unknown character: {expression[i]}\\") return tokens tokens = tokenize(expression) return calculate_internal(tokens)"},{"question":"Alice loves playing with arrays and performing operations on them. One day, she came across a unique operation and decided to turn it into a challenge. The challenge is as follows: Given an array of positive integers, Alice performs the following operation until no more operations can be performed: 1. Select any two elements, say `x` and `y`, such that `x != y`. 2. Remove both `x` and `y` from the array. 3. Insert their absolute difference `|x - y|` back into the array. The challenge is to determine the final remaining element in the array after performing the above operation as many times as possible. Input: The first line contains the number of test cases, `t` (1 ≤ t ≤ 50). For each test case: - The first line contains an integer `n` (2 ≤ n ≤ 10^3), the size of the array. - The second line contains `n` positive integers, each element a positive integer not exceeding 10^9, representing the array elements. Output: For each test case, print the final remaining element in the array. SAMPLE INPUT 2 3 10 7 12 4 2 4 6 8 SAMPLE OUTPUT 1 0 Explanation: For the first test case: 1. Choose 10 and 7, |10 - 7| = 3. Array becomes [12, 3]. 2. Choose 12 and 3, |12 - 3| = 9. Array becomes [9]. For the second test case: 1. Choose 2 and 4, |2 - 4| = 2. Array becomes [6, 8, 2]. 2. Choose 6 and 8, |6 - 8| = 2. Array becomes [2, 2, 2]. 3. Choose 2 and 2, |2 - 2| = 0. Array becomes [2, 0]. Since the absolute difference operation is repeated, eventually all elements reduce to their GCD or zero, thus the final remaining element is zero.","solution":"import math from functools import reduce def gcd(x, y): Returns the greatest common divisor of x and y. while y: x, y = y, x % y return x def find_final_element(arr): Returns the final remaining element in the array after performing the operations. return reduce(gcd, arr) def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(find_final_element(arr)) return results"},{"question":"You are tasked with designing a function to calculate the total age of relatives in a given genealogical tree. The representation of the genealogical tree will be done using nested dictionaries, where each key represents a person\'s name and its corresponding value is another dictionary containing their \\"age\\" and their \\"children\\". Here is how a sample tree might look: ``` { \\"John\\": { \\"age\\": 50, \\"children\\": { \\"Michael\\": { \\"age\\": 30, \\"children\\": { \\"Sarah\\": { \\"age\\": 10, \\"children\\": {} }, \\"Tom\\": { \\"age\\": 8, \\"children\\": {} } } }, \\"Anna\\": { \\"age\\": 28, \\"children\\": { \\"James\\": { \\"age\\": 3, \\"children\\": {} } } } } } } ``` Your task is to implement a function `calculate_total_age` that accepts such a nested dictionary representing a genealogical tree and returns the total age of all individuals in the tree. Here\'s a breakdown of the steps you should follow: 1. Traverse each person in the hierarchical tree starting from the top (oldest ancestor). 2. Sum their age and recursively their children\'s ages. **Function Signature:** ```python def calculate_total_age(tree: dict) -> int: ``` **Input:** - `tree`: A dictionary representing the genealogical tree where each key is a string representing a person\'s name, and each value is another dictionary with keys \\"age\\" (an integer) and \\"children\\" (a dictionary structured similarly). **Output:** - Returns the total age as an integer. **Example:** ```python tree = { \\"John\\": { \\"age\\": 50, \\"children\\": { \\"Michael\\": { \\"age\\": 30, \\"children\\": { \\"Sarah\\": { \\"age\\": 10, \\"children\\": {} }, \\"Tom\\": { \\"age\\": 8, \\"children\\": {} } } }, \\"Anna\\": { \\"age\\": 28, \\"children\\": { \\"James\\": { \\"age\\": 3, \\"children\\": {} } } } } } } assert calculate_total_age(tree) == 129 ```","solution":"def calculate_total_age(tree: dict) -> int: Recursively calculates the total age of all individuals in the genealogical tree. Args: tree (dict): A dictionary representing the genealogical tree. Returns: int: The total age of all individuals in the tree. total_age = 0 # Recursive function to traverse and sum ages def traverse(node): nonlocal total_age age = node[\'age\'] total_age += age for child in node[\'children\'].values(): traverse(child) # Start traversal from the root of the tree for person in tree.values(): traverse(person) return total_age"},{"question":"Vanya and his brother are playing a game with sticks. There are n sticks placed in a row, and each stick has some length. Each turn, a player can choose any one stick and reduce its length to zero. The one who is unable to make a move loses. Vanya always plays first, and both players play optimally. Each stick can be chosen only once. Given the initial lengths of the sticks, your task is to determine whether Vanya will win or lose if both play optimally. Input The input consists of: - An integer n, the number of sticks (1 ≤ n ≤ 100,000). - Followed by n integers denoting the lengths of the sticks (1 ≤ length of each stick ≤ 1,000,000,000). Output Print \\"Vanya\\" if Vanya wins the game, otherwise print \\"Brother\\" if Vanya\'s brother wins. Example Input 3 1 2 3 Output Vanya Note In the given example, Vanya can win by following these steps: 1. Reduce the first stick\'s length to zero. Now the lengths are [0, 2, 3]. 2. Vanya\'s brother reduces the second stick\'s length to zero. Now the lengths are [0, 0, 3]. 3. Vanya reduces the third stick\'s length to zero. At this point, Vanya\'s brother has no valid moves left, thus Vanya wins.","solution":"def determine_winner(n, stick_lengths): Determines whether Vanya or his brother will win the game. Parameters: n (int): Number of sticks. stick_lengths (list): List containing the lengths of the sticks. Returns: str: \\"Vanya\\" if Vanya wins, \\"Brother\\" if Vanya\'s brother wins. # If the number of sticks is odd, Vanya wins because he can always make the last move. if n % 2 == 1: return \\"Vanya\\" else: return \\"Brother\\""},{"question":"Bob is a network administrator tasked with monitoring messages between different servers. He needs to ensure that messages always travel through minimal distance paths in the network. The network is represented as a directed graph, where nodes represent servers, and edges represent direct communication paths with given distances. Write a function to compute the minimal distance from a given source server to a specific destination server. If the destination server is not reachable from the source server, return -1. You are given: - `N`: the number of servers (nodes in the graph) - `M`: the number of direct paths (edges in the graph) - `edges`: a list of triplets `(u, v, d)` representing a direct path from server `u` to server `v` with distance `d` - `source`: the source server - `destination`: the destination server Constraints: - 1 ≦ N ≦ 10^5 - 1 ≦ M ≦ 2 * 10^5 - 1 ≦ u, v ≦ N - 1 ≦ d ≦ 10^9 - Source and destination are valid server indices. Input The input is given as follows: N M u1 v1 d1 u2 v2 d2 : uM vM dM source destination Output Print the minimal distance from the source to the destination. If the destination is not reachable, print -1. Examples Input ``` 5 6 1 2 2 1 3 4 2 3 1 3 4 7 2 4 3 4 5 1 1 5 ``` Output ``` 6 ``` Input ``` 3 2 1 2 3 2 3 5 3 1 ``` Output ``` -1 ```","solution":"import heapq def minimal_distance(N, M, edges, source, destination): # Create adjacency list for the graph graph = [[] for _ in range(N + 1)] for u, v, d in edges: graph[u].append((v, d)) # Min-heap to store the (distance, node) tuples heap = [(0, source)] # Distances array, initialized to infinity distances = [float(\'inf\')] * (N + 1) distances[source] = 0 while heap: current_distance, current_node = heapq.heappop(heap) # If we reach the destination, return the distance if current_node == destination: return current_distance # If current distance is greater than the recorded one, continue if current_distance > distances[current_node]: continue # Explore neighbors for neighbor, weight in graph[current_node]: distance = current_distance + weight # If a shorter path is found if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) # If destination is not reachable return -1 if distances[destination] == float(\'inf\') else distances[destination]"},{"question":"An airline company is developing a new system to manage the reservations for their flights. Due to the limited number of seats on each flight, the system needs to be efficient in handling booking requests and cancellations. The company wants you to develop a reservation management system that supports the following operations: 1. **Book a seat**: A passenger can book a seat on a flight if available. 2. **Cancel a booking**: A passenger can cancel their reservation. 3. **Query available seats**: The system should be able to provide the number of available seats for any flight at any given time. -----Input----- - The first input line contains an integer representing the number of operations (queries). - Each of the next lines contains a query in one of the following formats: - \\"book <flight_id> <seat_number>\\" - attempts to book the specified seat on the flight. - \\"cancel <flight_id> <seat_number>\\" - attempts to cancel the booking of the specified seat on the flight. - \\"query <flight_id>\\" - queries the number of available seats on the specified flight. -----Output----- - For each \\"book\\" and \\"cancel\\" query, output \\"SUCCESS\\" if the operation was successful, otherwise output \\"FAIL\\". - For each \\"query\\" query, output an integer representing the number of available seats. -----Constraints----- - There can be up to 10^5 operations. - flight_id is a string of up to 10 characters. - seat_number is an integer from 1 to 500 (assuming all aircraft have up to 500 seats). -----Sample Input 1----- 8 book flightA 1 book flightA 1 cancel flightA 1 query flightA book flightB 100 cancel flightB 200 query flightB cancel flightA 1 -----Sample Output 1----- SUCCESS FAIL SUCCESS 499 SUCCESS FAIL 499 FAIL","solution":"class ReservationSystem: def __init__(self): self.flights = {} def book(self, flight_id, seat_number): if flight_id not in self.flights: self.flights[flight_id] = set() if seat_number not in self.flights[flight_id]: self.flights[flight_id].add(seat_number) return \\"SUCCESS\\" return \\"FAIL\\" def cancel(self, flight_id, seat_number): if flight_id in self.flights and seat_number in self.flights[flight_id]: self.flights[flight_id].remove(seat_number) return \\"SUCCESS\\" return \\"FAIL\\" def query(self, flight_id): if flight_id in self.flights: return 500 - len(self.flights[flight_id]) return 500"},{"question":"# Fibonacci Exploration The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and so forth. In this problem, we will modify the sequence slightly. Instead of starting with 0 and 1, you will be given two starting values `a` and `b`. Your task is to generate the sequence, sum only the even-valued terms, and return the sum. # Task Write a function to calculate the sum of the even-valued terms in the modified Fibonacci sequence starting with `a` and `b`. The function should accept the two starting values, `a` and `b`, and an integer `n` representing the number of terms to consider in the sequence. Function Signature ```python def sum_even_fibonacci(a: int, b: int, n: int) -> int: ``` Input - `a` (integer): The first term of the modified Fibonacci sequence. - `b` (integer): The second term of the modified Fibonacci sequence. - `n` (integer): The number of terms to consider in the sequence. `1 <= n <= 10^6` Output - An integer representing the sum of the even-valued terms in the first `n` terms of the modified Fibonacci sequence. Example ```python assert sum_even_fibonacci(2, 3, 10) == 10 # The sequence: 2, 3, 5, 8, 13, 21, 34, 55, 89, 144 # Even-valued terms: 2, 8, 34, 144 # Their sum: 2 + 8 + 34 + 144 = 188 assert sum_even_fibonacci(1, 2, 5) == 2 # The sequence: 1, 2, 3, 5, 8 # Even-valued terms: 2, 8 # Their sum: 2 + 8 = 10 ``` Note: Ensure that your algorithm can efficiently handle large inputs up to the upper limit of `n` without timing out.","solution":"def sum_even_fibonacci(a: int, b: int, n: int) -> int: Calculate the sum of the even-valued terms in the first n terms of the modified Fibonacci sequence. Args: a (int): The first term of the modified Fibonacci sequence. b (int): The second term of the modified Fibonacci sequence. n (int): The number of terms to consider in the sequence. Returns: int: The sum of the even-valued terms in the modified Fibonacci sequence. fib = [a, b] while len(fib) < n: fib.append(fib[-1] + fib[-2]) even_sum = sum(x for x in fib if x % 2 == 0) return even_sum"},{"question":"You are given a list of integers and an integer X. Your task is to modify the list such that every occurrence of X is removed while all other elements remain in their original order. Finally, return the modified list. -----Constraints----- - 1 ≤ length of the list ≤ 100000 - -10^9 ≤ each integer in the list ≤ 10^9 - -10^9 ≤ X ≤ 10^9 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N X A_1 A_2 : A_N -----Output----- Output the modified list with each element separated by a space. -----Sample Input----- 5 3 1 2 3 4 3 -----Sample Output----- 1 2 4 After removing all occurrences of 3 from the list, the remaining elements in their original order are 1, 2, and 4. Thus, the output is \\"1 2 4\\".","solution":"def remove_occurrences(lst, x): Removes all occurrences of x from lst. Parameters: lst (list of int): The list from which to remove occurrences of x. x (int): The integer to be removed. Returns: list of int: The modified list with x removed. return [item for item in lst if item != x] def process_input(input_data): Processes the input data for the remove_occurrences function. Parameters: input_data (str): A multiline string input where the first line is the length of the list, the second line is the integer to be removed, and the following lines are the elements of the list. Returns: list of int: The modified list after removing occurrences of the specified integer. lines = input_data.strip().split() N = int(lines[0]) X = int(lines[1]) lst = [int(lines[i]) for i in range(2, N + 2)] return remove_occurrences(lst, X)"},{"question":"You are given an integer (n). Your task is to calculate the ( n^{th} ) term in the sequence defined as follows: - ( a_1 = 1 ) - ( a_2 = 1 ) - For ( n > 2 ), ( a_n = a_{n-1} + a_{n-2} ) This sequence is known as Fibonacci sequence. -----Input----- The first line contains a single integer ( t ) ((1 leq t leq 50)) — the number of test cases. The description of each test case consists of a single integer ( n ) ((1 leq n leq 50)). -----Output----- For each test case, output the ( n^{th} ) term in the sequence. -----Examples----- Input 5 1 2 3 4 5 Output 1 1 2 3 5 -----Note----- In the first test case, the 1st term of the sequence is 1. In the second test case, the 2nd term of the sequence is 1. In the third test case, the 3rd term of the sequence is 2, which is the sum of the 1st term (1) and 2nd term (1). In the fourth test case, the 4th term of the sequence is 3, which is the sum of the 2nd term (1) and 3rd term (2). In the fifth test case, the 5th term of the sequence is 5, which is the sum of 3rd term (2) and 4th term (3).","solution":"def fibonacci(n): Returns the n-th term of the Fibonacci sequence. if n == 1 or n == 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b = b, a + b return b def get_fibonacci_terms(test_cases): Returns the list of n-th terms for given test cases of Fibonacci sequence. return [fibonacci(n) for n in test_cases]"},{"question":"Sophia is a budding software engineer who loves solving puzzles. One day, she came across an interesting problem. She found a string consisting of lowercase English letters and wondered if she could rearrange the letters of the string in such a way that no two adjacent characters are the same. However, if it is impossible to do so, she wants to know that as well. Help Sophia write a function to determine if it is possible to rearrange the given string to meet her requirement. If it is possible, the function should return one such rearranged string. If it is not possible, the function should return an empty string. -----Input----- A single line containing a string s (1 ≤ |s| ≤ 1000) consisting of only lowercase English letters. -----Output----- Print a single string — a possible rearrangement of the input string such that no two adjacent characters are the same, or an empty string if no such arrangement is possible. -----Examples----- Input: aabb Output: abab Input: aaab Output: (empty string) -----Note----- In the first example, \\"abab\\" is one possible rearrangement of \\"aabb\\" where no two adjacent characters are the same. In the second example, there is no way to rearrange \\"aaab\\" to meet the requirement, so the output is an empty string.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string so that no two adjacent characters are the same. :param s: input string :return: rearranged string or empty string if impossible # Count frequency of each character freq = Counter(s) # Using a max heap (inverted min heap) to store characters by frequency max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) # The result array result = [] prev_count, prev_char = 0, \'\' while max_heap: count, char = heapq.heappop(max_heap) # Append current character to result result.append(char) # Since the character is used once, decrease the frequency if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update the previous character and count prev_count, prev_char = count + 1, char # If the length of the result is not same as input, it means we couldn\'t rearrange it if len(result) != len(s): return \\"\\" return \'\'.join(result)"},{"question":"Farmer John has a rectangular farm divided into a grid of M rows and N columns. He wants to plant apple trees on his farm, but to ensure optimal growth, he will plant trees in such a way that: - No two apple trees are in the same row or column. - The total number of apple trees planted is minimized while covering every row and column. Write a program to calculate the minimum number of apple trees Farmer John needs to plant. -----Constraints----- - 1 ≦ M, N ≦ 100 -----Input----- The input is given from Standard Input in the following format: M N -----Output----- Print the minimum number of apple trees Farmer John needs to plant. -----Sample Input----- 4 5 -----Sample Output----- 4 Explanation: Since there are 4 rows and 5 columns, planting one apple tree in each row (or each column) ensures that no two trees are in the same row or column, covering all rows and columns. Therefore, 4 apple trees are enough.","solution":"def min_apple_trees(M, N): Calculate the minimum number of apple trees needed such that no two apple trees are in the same row or column, covering all rows and columns. # The minimum number of apple trees needed will always be the minimum of M and N return min(M, N)"},{"question":"In Dreamland, a special type of string called a \\"Symmetric String\\" is celebrated. A string is considered symmetric if it reads the same forwards and backwards. For example, the string \\"level\\" is symmetric, whereas the string \\"coding\\" is not. Given a string `s`, write a function `is_symmetric(s)` that determines if `s` is a symmetric string or not. Implement the function `is_symmetric(s)` using the following template: ```python def is_symmetric(s): # Your code here # Example Usage print(is_symmetric(\\"level\\")) # Should output True print(is_symmetric(\\"coding\\")) # Should output False ``` -----Constraints----- - The string `s` consists of lowercase English letters only. - The length of `s` is between 1 and 1000 (inclusive). -----Input----- Input will be provided as a single string. -----Output----- Output should be a single boolean value: `True` if the string is symmetric, and `False` otherwise. -----Sample Input----- radar -----Sample Output----- True -----Sample Input----- hello -----Sample Output----- False","solution":"def is_symmetric(s): Determines if the input string s is symmetric. Args: s (str): The input string to be checked. Returns: bool: True if the string is symmetric, False otherwise. return s == s[::-1]"},{"question":"Marina is planning a trip and wants to pack her suitcase efficiently. She has N items she would like to bring, each item i has a weight w_i and a value v_i. Her suitcase can hold a maximum weight of W. Marina wants to maximize the total value of the items she can carry without exceeding the weight limit. Help Marina determine the maximum total value she can pack into her suitcase. -----Constraints----- - N is an integer. - 1 leq N leq 100 - 1 leq w_i, v_i leq 1000 for all i - 1 leq W leq 10000 -----Input----- Input is given from Standard Input in the following format: N w_1 v_1 w_2 v_2 : w_N v_N W -----Output----- If the maximum total value Marina can pack is V, print V. -----Sample Input----- 4 2 3 1 2 3 4 2 2 5 -----Sample Output----- 7 Marina can pack the items with weights 2 and 3, which give her a total value of 3 + 4 = 7.","solution":"def knapsack(N, items, W): Determine the maximum value that can be packed in a knapsack with weight limit W. Parameters: - N (int): Number of items - items (list of tuples): Each tuple consists of weight and value of an item - W (int): Maximum weight capacity of the knapsack Returns: - int: Maximum value achievable without exceeding the weight limit # Initialize a 2D dp array with dimensions N+1 x W+1 and fill it with 0s dp = [[0] * (W + 1) for _ in range(N + 1)] for i in range(1, N + 1): weight, value = items[i-1] for w in range(W + 1): if weight <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight] + value) else: dp[i][w] = dp[i-1][w] return dp[N][W]"},{"question":"Assign a binary string representation (a string consisting of only \'0\' and \'1\') to every node in a binary tree such that the binary string of a node uniquely identifies its position within the tree. In a binary tree: - The left child of a node is represented by adding \'0\' to the binary string of the parent node. - The right child of a node is represented by adding \'1\' to the binary string of the parent node. Given a binary tree and an array of k binary strings representing positions of certain nodes, your task is to find the lowest common ancestor (LCA) of the nodes corresponding to these k binary strings. The binary tree is rooted at the node represented by an empty string. -----Input----- The first line contains a single integer k (1 ≤ k ≤ 100) — the number of binary strings in the array. The next k lines each contain a binary string s_i (0 ≤ len(s_i) ≤ 1000) representing the position of each node in the binary tree. -----Output----- Output a single binary string representing the position of the lowest common ancestor of the given nodes. -----Examples----- Input 3 10 110 111 Output 1 Input 4 10 100 101 110 Output 1 Input 2 101010 101110 Output 101 -----Note----- In the first example, the binary string position of the lowest common ancestor for the nodes at positions \'10\', \'110\', and \'111\' is \'1\'. In the second example, the LCA of nodes at \'10\', \'100\', \'101\', and \'110\' is also \'1\'. In the last example, the LCA for nodes at \'101010\' and \'101110\' is \'101\'.","solution":"def find_lca(k, positions): Finds the lowest common ancestor (LCA) based on the given binary string positions in a binary tree. :param k: int, the number of binary strings :param positions: list of str, binary strings representing positions in the binary tree :return: str, binary string representing the position of the LCA if not positions: return \\"\\" # Start with the first position as the initial LCA lca = positions[0] for pos in positions[1:]: # Find the common prefix of lca and the current position i = 0 while i < len(lca) and i < len(pos) and lca[i] == pos[i]: i += 1 # Update lca to the common prefix found so far lca = lca[:i] return lca # Example Usage k = 3 positions = [\\"10\\", \\"110\\", \\"111\\"] print(find_lca(k, positions)) # Output: \\"1\\""},{"question":"Polycarp has an array of integers and wants to find the maximum possible sum of a contiguous subarray such that the length of this subarray is within a specified range [l, r]. For example, if: - The array is [1, -2, 3, 5, -3, 2] - The length range [l, r] is [2, 4] Some of the valid subarrays and their sums are: - Subarray [1, -2], length = 2, sum = -1 - Subarray [3, 5], length = 2, sum = 8 - Subarray [3, 5, -3], length = 3, sum = 5 - Subarray [3, 5, -3, 2], length = 4, sum = 7 Help Polycarp to find the maximum possible sum of such a subarray. -----Input----- The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. Each test case is represented as follows: - The first line contains three integers n (1 ≤ n ≤ 10^5), l, and r (1 ≤ l ≤ r ≤ n) — the number of elements in the array, the minimum length of the subarray, and the maximum length of the subarray. - The second line contains n integers a_i (-10^4 ≤ a_i ≤ 10^4) — the elements of the array. It is guaranteed that the total number of elements across all test cases does not exceed 10^6. -----Output----- For each test case, output one integer — the maximum possible sum of a contiguous subarray with the length within the range [l, r]. -----Examples----- Input 2 6 2 4 1 -2 3 5 -3 2 5 1 3 -1 -2 -3 -4 -5 Output 8 -1","solution":"def max_sum_subarray(t, test_cases): results = [] for test_case in test_cases: n, l, r, a = test_case[\'n\'], test_case[\'l\'], test_case[\'r\'], test_case[\'a\'] max_sum = float(\'-inf\') # Start by considering all subarrays of lengths from l to r for size in range(l, r + 1): # calculate the sum of the first window of length `size` cur_sum = sum(a[:size]) max_sum = max(max_sum, cur_sum) # sliding window technique for i in range(size, n): cur_sum += a[i] - a[i - size] max_sum = max(max_sum, cur_sum) results.append(max_sum) return results # helper function to initiate the function call with proper inputs def read_input(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) cur = 1 test_cases = [] for _ in range(t): n = int(data[cur]) l = int(data[cur + 1]) r = int(data[cur + 2]) a = list(map(int, data[cur + 3:cur + 3 + n])) test_cases.append({\'n\': n, \'l\': l, \'r\': r, \'a\': a}) cur += 3 + n return t, test_cases"},{"question":"You are given an array of integers and a target sum. Determine whether there exist two distinct indices i and j in the array such that the sum of the elements at these indices is equal to the target sum. If such a pair of indices exists, print them in any order. If there are multiple pairs, print any one of them. If no such pair exists, print -1. -----Input----- The first line contains a single integer n (2 le n le 10^5) — the number of integers in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. The third line contains a single integer S (2 le S le 2 times 10^9) — the target sum. -----Output----- Print two integers i and j such that 1 le i, j le n, i ne j and a_i + a_j = S. The answer can be printed in any order. If no such indices exist, print -1. -----Example----- Input 6 1 2 3 4 5 6 8 Output 2 5 -----Example----- Input 5 1 2 3 4 5 10 Output -1","solution":"def find_indices_for_target_sum(n, arr, S): Determines if there exist two distinct indices in the array such that their sum equals the target sum S. Parameters: n (int): The number of integers in the array. arr (list of int): The elements of the array. S (int): The target sum. Returns: tuple: A tuple containing two indices if a pair is found, otherwise -1. # Use a dictionary to store elements and their corresponding indices seen = {} for i in range(n): complement = S - arr[i] if complement in seen: # Return the 1-based indices if a valid pair is found return (seen[complement] + 1, i + 1) seen[arr[i]] = i # Return -1 if no such pair exists return -1"},{"question":"Write a function that accepts an array of strings representing a series of tasks. Each task is labeled as either \\"TaskX\\" or \\"CompletedTaskX\\" where X is a unique identifier. Your goal is to create a method that returns an array of strings with all incomplete tasks removed. For example, given `[\\"Task1\\", \\"Task2\\", \\"CompletedTask1\\", \\"CompletedTask2\\"]`, the returned array should be `[\\"CompletedTask1\\", \\"CompletedTask2\\"]`. # Notes - If the array is null/nil/None or empty you should return an empty array (`[]`). - The task names will follow the formats \\"TaskX\\" and \\"CompletedTaskX\\" with camelcase notation and the same value of X. - The returned array should maintain the original order of the completed tasks.","solution":"def filter_completed_tasks(tasks): Filters out incomplete tasks from the given list of task strings. Parameters: - tasks (list): List of task strings (eg. [\\"Task1\\", \\"CompletedTask1\\"]). Returns: - list: List containing only the completed tasks. if not tasks: return [] return [task for task in tasks if task.startswith(\\"CompletedTask\\")]"},{"question":"Given a string `s` that represents a number, implement a function to check if the number is a palindrome. A number is a palindrome if it reads the same forward and backward. For example: - For `s = \\"121\\"`, the output should be `true`. - For `s = \\"-121\\"`, the output should be `false`. The function should return a boolean indicating if the number is a palindrome. Note: - Negative numbers are not considered palindromes. - You are not allowed to convert the string to an integer or any other data type. - The solution should consider edge cases such as leading zeros.","solution":"def is_palindrome_number(s): Check if the given string s representing a number is a palindrome. # Check if the string is empty or represents a negative number if not s or s[0] == \'-\': return False # Check for leading zeros, valid cases are only \\"0\\" itself if s.lstrip(\'0\') == \\"\\": return True # Check if the string reads the same forwards and backwards return s == s[::-1]"},{"question":"Alice has a collection of N integer numbers and she is interested in finding out the length of the longest contiguous subarray that consists entirely of the same number. However, Alice got distracted and misplaced the collection\'s original order. To help her, you need to recreate this functionality through a program. Input The first line contains an integer N (1 ≤ N ≤ 10^5) — the number of integers in Alice\'s collection. The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 10^9) — the elements of Alice\'s collection. Output Output a single integer — the length of the longest contiguous subarray where each element is the same. Examples Input 5 2 2 1 1 1 Output 3 Input 8 1 2 3 3 3 5 5 5 Output 3 Input 3 9 9 9 Output 3","solution":"def longest_contiguous_subarray_length(n, arr): Finds the length of the longest contiguous subarray where all elements are the same. :param n: Integer, the number of elements in the array (1 ≤ N ≤ 10^5) :param arr: List of N integers (1 ≤ ai ≤ 10^9) :return: Integer, the length of the longest contiguous subarray of the same number if n == 1: return 1 max_length = 1 current_length = 1 for i in range(1, n): if arr[i] == arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are given an n x n matrix of integers. Identify whether the matrix is a diagonal matrix. A diagonal matrix is defined as a matrix in which all the elements outside the main diagonal are zero and the elements on the main diagonal can be either zeros or non-zeros. -----Constraints----- - 1 leq n leq 100 - Elements of the matrix are integers between -1000 and 1000. -----Input----- Input is given from Standard Input in the following format: - The first line contains the integer n, the size of the matrix. - The next n lines each contain n integers separated by spaces. -----Output----- Print YES if the matrix is a diagonal matrix; print NO otherwise. -----Sample Input----- 3 1 0 0 0 5 0 0 0 9 -----Sample Output----- YES In the provided sample input, all elements outside the main diagonal are zero. Therefore, the matrix is a diagonal matrix.","solution":"def is_diagonal_matrix(matrix): Check if the given n x n matrix is a diagonal matrix. A diagonal matrix has all elements outside the main diagonal as zero. :param matrix: List of list of integers representing the matrix. :return: bool, True if matrix is diagonal, otherwise False. n = len(matrix) for i in range(n): for j in range(n): if i != j and matrix[i][j] != 0: return False return True"},{"question":"In a programming event, there is a game involving robots and batteries. Each robot requires a specific amount of charge to be powered up. There are also batteries scattered around, each with a certain amount of charge available. Your task is to figure out which robot gets which battery. For each scenario, every robot can pick a battery with enough charge that has not been picked by another robot. The robots pick batteries in the order they are presented. If a robot finds no suitable battery, it remains uncharged. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N (number of robots) and M (number of batteries). - The second line contains N space-separated integers where the i-th integer represents the charge required by the i-th robot. - The third line contains M space-separated integers where the j-th integer represents the charge available in the j-th battery. -----Output----- For each test case, print N lines. For each valid i, the i-th line should contain a single integer ― the number of the battery that powers the i-th robot, or -1 if no battery can power that robot. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 1000 - 1 ≤ charge required by each robot ≤ 10^6 - 1 ≤ charge available in each battery ≤ 10^6 -----Example Input----- 2 3 4 5 8 3 7 3 6 10 2 3 10 15 5 10 20 -----Example Output----- 1 4 2 2 3 Explanation: In the first test case, - Robot 1 picks Battery 1 (7 charge is available). Remaining batteries: [3, 6, 10] - Robot 2 picks Battery 4 (10 charge is available). Remaining batteries: [3, 6] - Robot 3 picks Battery 2 (3 charge is available). Remaining batteries: [6] In the second test case, - Robot 1 picks Battery 2 (10 charge is available). Remaining batteries: [5, 20] - Robot 2 picks Battery 3 (20 charge is available). Remaining batteries: [5] - Robot 3 picks Battery 1 (5 charge is available). Remaining batteries: [] Note: While picking batteries, skip those already picked by previous robots in the same test case.","solution":"def assign_batteries_to_robots(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] robot_charges = test_cases[i][1] battery_charges = test_cases[i][2] battery_picks = [-1] * n # Initialize results for this test case used_batteries = [False] * m # Track used batteries for robot_index in range(n): for battery_index in range(m): if (battery_charges[battery_index] >= robot_charges[robot_index] and not used_batteries[battery_index]): battery_picks[robot_index] = battery_index + 1 # Store 1-based index of battery used_batteries[battery_index] = True break results.extend(battery_picks) return results # Example Usage t = 2 test_cases = [ ((3, 4), [5, 8, 3], [7, 3, 6, 10]), ((2, 3), [10, 15], [5, 10, 20]) ] output = assign_batteries_to_robots(t, test_cases) print(output) # This would be [1, 4, 2, 2, 3]"},{"question":"Task: Anagram Sequence Finder In this task, you have to write a function `find_anagram_sequences(s: str, word: str) -> List[int]` that finds all the starting indices of substrings in `s` that are anagrams of the string `word`. For example: - Given `s = \\"cbaebabacd\\"` and `word = \\"abc\\"`, your function should return `[0, 6]` – the substrings starting at index 0 and index 6 are \\"cba\\" and \\"bac\\" respectively, which both are anagrams of \\"abc\\". - Given `s = \\"abab\\"` and `word = \\"ab\\"`, your function should return `[0, 1, 2]` – the substrings starting at index 0, 1, and 2 are \\"ab\\", \\"ba\\", and \\"ab\\" respectively, which all are anagrams of \\"ab\\". If there are no such substrings, return an empty list. **Function Signature:** ```python def find_anagram_sequences(s: str, word: str) -> List[int]: # Your code here ``` # Constraints: - All characters in `s` and `word` are lowercase English letters. - 1 ≤ len(s), len(word) ≤ 10^5 # Example: ```python assert find_anagram_sequences(\\"cbaebabacd\\", \\"abc\\") == [0, 6] assert find_anagram_sequences(\\"abab\\", \\"ab\\") == [0, 1, 2] ``` # Notes: - The function should be efficient enough to handle cases where `s` and `word` are at their maximum lengths.","solution":"from typing import List from collections import Counter def find_anagram_sequences(s: str, word: str) -> List[int]: Finds all starting indices of substrings in s that are anagrams of the string word. len_s, len_word = len(s), len(word) result = [] if len_word > len_s: return result word_counter = Counter(word) current_counter = Counter(s[:len_word]) if current_counter == word_counter: result.append(0) for i in range(len_word, len_s): current_counter[s[i]] += 1 current_counter[s[i - len_word]] -= 1 if current_counter[s[i - len_word]] == 0: del current_counter[s[i - len_word]] if current_counter == word_counter: result.append(i - len_word + 1) return result"},{"question":"Implement a function `list_intersection(lst1, lst2)` (or `list_intersection` in languages that use snake_case) that takes in two lists of integers and returns a new list containing the intersection of the two lists. The intersection of two lists is a list that contains only the elements that are present in both of the lists, without duplicates. The order of elements in the resulting list does not matter. Examples: ``` list_intersection([1, 2, 3, 4], [3, 4, 5, 6]) -> [3, 4] list_intersection([7, 8, 9], [10, 11, 9]) -> [9] list_intersection([2, 3, 1], [7, 8, 9]) -> [] list_intersection([], [1, 2, 3]) -> [] ``` Make sure the function handles edge cases, such as empty input lists.","solution":"def list_intersection(lst1, lst2): Returns a list containing the intersection of lst1 and lst2. The result contains only unique elements that are present in both lists. intersection = set(lst1) & set(lst2) return list(intersection)"},{"question":"Given a string S consisting of lowercase alphabets and a word W. You need to check if the word W can be formed by deleting some characters of the string S without changing the order of the remaining characters. If it is possible, return the minimum number of deletions required from S to form W; otherwise, return -1. Example 1: Input: S = \\"abcde\\" W = \\"ace\\" Output: 2 Explanation: We can form \\"ace\\" from \\"abcde\\" by deleting characters \'b\' and \'d\'. Number of deletions required is 2. Example 2: Input: S = \\"abcde\\" W = \\"aec\\" Output: -1 Explanation: It is not possible to form \\"aec\\" from \\"abcde\\" because the characters are not in the same order. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minDeletions() which takes the string S and the word W as inputs and returns the minimum number of deletions required to form W. If it’s not possible, return -1. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^4 1 ≤ |W| ≤ 10^3 S and W consist of lowercase alphabets only.","solution":"def minDeletions(S, W): Returns the minimum number of deletions required from S to form W. If it is not possible, returns -1. w_idx = 0 s_len = len(S) w_len = len(W) for s_char in S: if w_idx < w_len and s_char == W[w_idx]: w_idx += 1 if w_idx == w_len: return s_len - w_len return -1"},{"question":"Sammy the squirrel collects nuts which he stores in a series of numbered holes in his tree. Sammy has just finished his weekly nut-collecting spree and he knows the number of nuts stored in each hole but he wants to find the hole in which he stored the maximum number of nuts. However, the task isn\'t that simple — Sammy only wants the first occurrence of the maximum number of nuts if more than one hole contains the same maximum number. Your task is to determine the index of the hole with the highest number of nuts and return it. If there are multiple such holes, return the smallest index. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of holes. The second line contains n integers separated by spaces, where each integer a_i (0 ≤ a_i ≤ 10^9) represents the number of nuts in the i-th hole. Output Print the index (1-based) of the hole containing the maximum number of nuts. If there are multiple holes with the maximum number of nuts, return the smallest index. Examples Input 5 4 7 2 7 3 Output 2 Input 4 1 2 3 4 Output 4 Note In the first example, the maximum number of nuts is 7, and it appears first in the 2nd hole. In the second example, the maximum number of nuts is 4, which is stored in the 4th hole.","solution":"def find_max_nuts_index(n, holes): This function returns the 1-based index of the hole which contains the maximum number of nuts. If there are multiple such holes, it returns the smallest index. max_nuts = max(holes) for i in range(n): if holes[i] == max_nuts: return i + 1"},{"question":"Write a program which reads the dimensions of two rectangles and determines whether the first rectangle completely fits inside the second rectangle. The rectangles are aligned with the x and y axes. The coordinates (x1, y1) and (x2, y2) of the bottom-left and top-right corners of the first rectangle, respectively, and the coordinates (X1, Y1) and (X2, Y2) of the bottom-left and top-right corners of the second rectangle, respectively, are given. Rectangle 1 inside Rectangle 2 Constraints * -100 leq x1, y1, x2, y2, X1, Y1, X2, Y2 leq 100 * x1 < x2 * y1 < y2 * X1 < X2 * Y1 < Y2 Input Eight integers x1, y1, x2, y2, X1, Y1, X2, and Y2 separated by a single space are given in a line. Output Print \\"Yes\\" if the first rectangle fits completely inside the second rectangle, otherwise print \\"No\\". Examples Input 1 1 3 3 0 0 4 4 Output Yes Input 2 2 5 5 0 0 4 4 Output No","solution":"def does_first_rectangle_fit(x1, y1, x2, y2, X1, Y1, X2, Y2): Determines if the first rectangle defined by (x1, y1) and (x2, y2) completely fits inside the second rectangle defined by (X1, Y1) and (X2, Y2). if X1 <= x1 and x2 <= X2 and Y1 <= y1 and y2 <= Y2: return \\"Yes\\" else: return \\"No\\""},{"question":"Counting Occurrences of a Substring Given a string and a non-empty substring `sub`, count how many times `sub` appears in the string without overlapping. Write a function that takes two arguments: the string and the substring, and returns the count of occurrences. # Example count_occurrences(\\"testtesttest\\", \\"test\\") -> 3 count_occurrences(\\"ababcabc\\", \\"abc\\") -> 2 count_occurrences(\\"aaa\\", \\"aa\\") -> 1 The function should be case-sensitive, meaning \\"A\\" and \\"a\\" are considered different characters. **Note:** Ensure that the method avoids counting overlapping instances.","solution":"def count_occurrences(s, sub): Count the number of non-overlapping occurrences of substring `sub` in string `s`. count = 0 start = 0 while start <= len(s) - len(sub): index = s.find(sub, start) if index == -1: break count += 1 start = index + len(sub) return count"},{"question":"Given a n x n matrix, write a function `isDiagonal(matrix)` that checks if the matrix is a diagonal matrix or not. A diagonal matrix is a matrix in which the entries outside the main diagonal are all zero, and the entries on the main diagonal can be any value. # Example Input [ [1, 0, 0], [0, 5, 0], [0, 0, 9] ] Output True Input [ [1, 2, 0], [0, 5, 0], [0, 0, 9] ] Output False # Constraints * The input matrix will be a non-empty square matrix (n x n) where 1 <= n <= 100. * Matrix elements can be any integer (positive, negative or zero). # The Function Your function, `isDiagonal(matrix)`, should return `True` if the matrix is diagonal, or `False` otherwise.","solution":"def isDiagonal(matrix): Checks if the given n x n matrix is a diagonal matrix. Args: matrix (list of list of int): The input n x n matrix Returns: bool: True if the matrix is a diagonal matrix, False otherwise n = len(matrix) for i in range(n): for j in range(n): if i != j and matrix[i][j] != 0: return False return True"},{"question":"Given a binary tree, the task is to check if each internal node of the binary tree has exactly one child. Example 1: Input: 10 / 5 / 1 Output: Yes Example 2: Input: 10 / 5 20 Output: No Your Task: The task is to complete the function hasOnlyOneChild() which takes the root node of the binary tree as input and returns \\"Yes\\" if each internal node has exactly one child, otherwise returns \\"No\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= Number of nodes <= 10^5","solution":"class Node: A Node class representing each node in the binary tree def __init__(self, key): self.key = key self.left = None self.right = None def hasOnlyOneChild(root): Function to check if each internal node in the binary tree has exactly one child. :param root: Root node of the binary tree :return: \'Yes\' if each internal node has exactly one child, \'No\' otherwise if root is None: return \'Yes\' queue = [root] while queue: current_node = queue.pop(0) if current_node.left and current_node.right: return \'No\' if current_node.left: queue.append(current_node.left) if current_node.right: queue.append(current_node.right) return \'Yes\'"},{"question":"Implement a function that converts a given infix expression (a string containing a mathematical expression with operators and operands) to its corresponding postfix (Reverse Polish Notation) form. The operators considered are +, -, *, /, and ^ with their respective precedence. The operands in the expression are single-letter uppercase English alphabets (A-Z). # Function Signature ```python def infix_to_postfix(expression: str) -> str: pass ``` # Input - A string `expression` representing an infix expression containing single-letter uppercase alphabets and the operators +, -, *, /, ^. - Length of `expression` is between 1 and 100. # Output - A string representing the equivalent postfix expression. # Example ```python assert infix_to_postfix(\\"A+B\\") == \\"AB+\\" assert infix_to_postfix(\\"A+(B*C)\\") == \\"ABC*+\\" assert infix_to_postfix(\\"(A-B/C)*(A/K-L)\\") == \\"ABC/-AK/L-*\\" assert infix_to_postfix(\\"A+B*C+D\\") == \\"ABC*+D+\\" ``` # Guidelines 1. **Operator Precedence**: Implement the precedence for +, -, *, /, and ^. 2. **Associativity**: Operators +, -, *, and / are left-associative, while ^ is right-associative. 3. **Parentheses**: Handle expressions with parentheses, which affect the precedence of the operations. 4. **Spaces**: Assume no spaces are present in the input expression.","solution":"def infix_to_postfix(expression: str) -> str: precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2, \'^\': 3} associativity = {\'+\': \'L\', \'-\': \'L\', \'*\': \'L\', \'/\': \'L\', \'^\': \'R\'} def has_higher_precedence(op1, op2): if precedence[op1] > precedence[op2]: return True if precedence[op1] == precedence[op2]: if associativity[op1] == \'L\': return True return False output = [] stack = [] for char in expression: if char.isalpha(): # if operand, add to output output.append(char) elif char == \'(\': # left parenthesis, push to stack stack.append(char) elif char == \')\': # right parenthesis, pop until left parenthesis while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() else: # operator encountered while (stack and stack[-1] != \'(\' and has_higher_precedence(stack[-1], char)): output.append(stack.pop()) stack.append(char) # pop all the remaining operators into the output while stack: output.append(stack.pop()) return \\"\\".join(output)"},{"question":"Write a function that determines if a given number is an Armstrong number (also known as a narcissistic number). An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits. For example, `153` is an Armstrong number because `1^3 + 5^3 + 3^3 = 153`. Complete the function `is_armstrong_number(number)` that returns `True` if a number is an Armstrong number, and `False` otherwise. You can assume the input is a non-negative integer. ```python def is_armstrong_number(number): # Your code here # Example usage: print(is_armstrong_number(153)) # True print(is_armstrong_number(9474)) # True print(is_armstrong_number(123)) # False ``` There are 50 random tests for numbers up to 1,000,000.","solution":"def is_armstrong_number(number): Determines if a given number is an Armstrong number (narcissistic number). Parameters: number (int): The number to check. Returns: bool: True if the number is an Armstrong number, False otherwise. digits = [int(d) for d in str(number)] num_digits = len(digits) sum_of_powers = sum([d ** num_digits for d in digits]) return sum_of_powers == number"},{"question":"A small factory is producing widgets. The widgets are stacked in boxes, and each box has a certain number of widgets inside it. The factory workers need to fulfill an order for a given number of widgets, W. You are required to find the minimum number of boxes required to fulfill the order. If it\'s not possible to fulfill the order exactly, return -1. Given an array `boxes[]` where `boxes[i]` represents the number of widgets in the i-th box, and an integer `W`, determine the minimum number of boxes needed to collect exactly W widgets. Example 1: Input: W = 8 boxes[] = {4, 1, 3, 2, 5} Output: 2 Explanation: The worker can pick the boxes with 5 and 3 widgets. Total = 5 + 3 = 8 widgets. Example 2: Input: W = 11 boxes[] = {1, 2, 3, 4, 5} Output: 3 Explanation: The worker can pick the boxes with 5, 4, and 2 widgets. Total = 5 + 4 + 2 = 11 widgets. Example 3: Input: W = 7 boxes[] = {1, 2, 3} Output: -1 Explanation: It is not possible to gather exactly 7 widgets. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minBoxes()` that takes the array `boxes` and the integer `W` as parameters and returns the minimum number of boxes required to fulfill the order, or -1 if it\'s not possible. Expected Time Complexity: O(N * W). Expected Auxiliary Space: O(W). Constraints: 1 ≤ boxes.length ≤ 10^3 1 ≤ boxes[i], W ≤ 10^3","solution":"def minBoxes(boxes, W): # Initialize a dp array, where dp[i] will represent the minimum number of boxes required to make i widgets dp = [float(\'inf\')] * (W + 1) dp[0] = 0 # Base case: no boxes are needed to make 0 widgets # Iterate through all boxes, updating the dp array for box in boxes: for i in range(W, box - 1, -1): dp[i] = min(dp[i], dp[i - box] + 1) # If dp[W] is still infinity, it means it\'s not possible to collect exactly W widgets return dp[W] if dp[W] != float(\'inf\') else -1"},{"question":"You are given a string of parentheses, and you are required to determine if the parentheses are balanced. A string is balanced if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\', and the pairs of parentheses are properly nested. Input Format The input begins with an integer M > 0, followed by M strings of parentheses. Output Format For each input string, output \\"YES\\" if the string is balanced, and \\"NO\\" if it is not. SAMPLE INPUT 3 () (()()) (())(() SAMPLE OUTPUT YES YES NO","solution":"def is_balanced_parentheses(s): Returns \'YES\' if the string s of parentheses is balanced, otherwise \'NO\'. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\" def check_parentheses_balance(data): Processes a list of parentheses strings and returns a list indicating whether each string is balanced (\'YES\') or not (\'NO\'). M = data[0] strings = data[1:] if len(strings) != M: raise ValueError(\\"Number of strings does not match the specified count\\") results = [] for s in strings: results.append(is_balanced_parentheses(s)) return results"},{"question":"A popular online retailer is having a flash sale, during which a customer can get multiple discounts on their purchases. The discount system works as follows: There are k different discount coupons, each offering a certain percentage off. A customer can choose to apply these k discount coupons in any order to maximize their total savings, but each coupon can be used at most once. The total discount on a product cannot exceed 100%. Given the initial price of an item and the list of k discount coupons, find the minimum possible price of the item after applying the discounts optimally. Input The first line contains a floating-point number p (1 ≤ p ≤ 10^4) denoting the initial price of the item followed by an integer k (1 ≤ k ≤ 10). Each of the next k lines contains an integer di (1 ≤ di ≤ 100), the percentage discount offered by the i-th coupon. Output A single floating-point number representing the minimum possible price of the item after applying the discounts, rounded to two decimal places. Examples Input 100.00 3 20 30 50 Output 28.00 Input 250.00 2 10 5 Output 213.75","solution":"def minimum_price(p, k, discounts): Calculate the minimum possible price of the item after applying discounts optimally. Parameters: p (float): The initial price of the item. k (int): The number of discount coupons. discounts (list of int): The list of discount percentages. Returns: float: The minimum possible price of the item, rounded to two decimal places. discounts.sort(reverse=True) # Sort discounts in descending order for discount in discounts: p *= (1 - discount / 100) return round(p, 2)"},{"question":"Given an integer array nums, return the product of the integers in that array that are prime numbers. If there is no such integer in the array, return 1. Example 1: Input: nums = [2, 3, 4, 7, 8] Output: 42 Explanation: 2, 3, and 7 are prime numbers. The product of these primes is 2 * 3 * 7 = 42. Example 2: Input: nums = [1, 4, 6, 8, 9] Output: 1 Explanation: There are no prime numbers in the array, so the result is 1. Constraints: 1 <= nums.length <= 10^4 1 <= nums[i] <= 10^5","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def product_of_primes(nums): Returns the product of prime numbers in the given list of integers. If there are no primes, returns 1. product = 1 has_prime = False for num in nums: if is_prime(num): product *= num has_prime = True return product if has_prime else 1"},{"question":"You are given two strings, `s` and `t`. You need to determine if it is possible to make string `t` a substring of string `s` by performing the following operation exactly once: Operation: Choose any character from `t` and insert it at any position in `s`. Your task is to find out if `t` can be made a substring of `s` by applying the above operation exactly once. -----Constraints----- - 1 ≦ |s|, |t| ≦ 1000 - s and t contain only lowercase English letters. -----Input----- The input is given from Standard Input in the following format: s t -----Output----- Print \\"YES\\" if you can make `t` a substring of `s` by performing the operation exactly once, otherwise print \\"NO\\". -----Sample Input 1----- abxyca abc -----Sample Output 1----- YES Explanation: Insert \'c\' from `t` into `s` between \'b\' and \'x\' to get \\"abcxyca\\", which contains `t` as a substring. -----Sample Input 2----- abcd ef -----Sample Output 2----- NO Explanation: No matter where we insert any character from `t` into `s`, `t` will not become a substring of `s`.","solution":"def can_make_substring(s, t): This function checks if it\'s possible to make the string t a substring of string s by performing exactly one operation of inserting any character from t into any position of s. # Check for every possible insertion point in s for i in range(len(s) + 1): for c in t: # Create new string with character c inserted at position i new_s = s[:i] + c + s[i:] # Check if t is now a substring of the new string if t in new_s: return \\"YES\\" return \\"NO\\""},{"question":"You are given a sequence of numbers a1, a2, ..., an. You can perform the following operation on the sequence as many times as you want: pick any two elements ai and aj (1 ≤ i, j ≤ n) and set ai to ai + aj. Your task is to determine if it is possible to make all elements of the sequence equal using the given operation. Input The first line contains an integer n (1 ≤ n ≤ 100) – the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) – the elements of the sequence. Output Print \\"YES\\" (without quotes) if it is possible to make all elements equal, otherwise print \\"NO\\". Examples Input 3 2 4 6 Output YES Input 4 1 3 8 10 Output NO","solution":"from math import gcd from functools import reduce def can_make_elements_equal(n, sequence): Determine if all elements in the sequence can be made equal using specified operations :param n: int - number of elements in the sequence :param sequence: list of int - the elements of the sequence :return: str - \\"YES\\" if possible to make all elements equal, otherwise \\"NO\\" if n == 1: return \\"YES\\" seq_gcd = reduce(gcd, sequence) return \\"YES\\" if seq_gcd > 1 else \\"NO\\""},{"question":"Write a function that takes a list of integers and a target integer. The function should return a list of pairs of indices whose values sum up to the target integer. Each pair should be sorted in ascending order, and the list of pairs should also be sorted in lexicographical order. Here are the requirements: - If no pairs are found, return an empty list. - A number cannot be paired with itself. - The same pair of indices should not appear more than once. **Example**: ```python find_pairs([1, 2, 3, 4, 3], 6) ``` **Output**: ```python [(1, 3), (2, 4)] ``` **Example**: ```python find_pairs([1, 1, 1], 2) ``` **Output**: ```python [(0, 1), (0, 2), (1, 2)] ``` **Example**: ```python find_pairs([1, 3, 5, 7], 10) ``` **Output**: ```python [(1, 2)] ``` Use the function signature: ```python def find_pairs(numbers: list, target: int) -> list: ```","solution":"def find_pairs(numbers: list, target: int) -> list: Returns a list of pairs of indices whose values sum up to the target integer. Each pair and the list of pairs are sorted in lexicographical order. pairs = [] seen = {} # To store indices of each number for i, num in enumerate(numbers): diff = target - num if diff in seen: for j in seen[diff]: pairs.append((j, i)) if num in seen: seen[num].append(i) else: seen[num] = [i] pairs.sort() # Sort pairs in lexicographical order return pairs"},{"question":"The town council of Pleasantville is planning a major festival and wants to decorate the main street with colorful lanterns. The main street is represented as a line segment of length l with a lantern positioned at n distinct points along the street. The goal is to ensure the entire street is brightly lit. Each lantern casts light to a distance r units on both sides. Your task is to calculate the minimum radius of light r that each lantern must provide to ensure that the entire length of the street from 0 to l is covered. -----Input----- The first line of the input contains two integers n (1 ≤ n ≤ 1000) and l (1 ≤ l ≤ 10^9)—the number of lanterns and the length of the street respectively. The second line contains n integers x[i] (0 ≤ x[i] ≤ l), the positions of the lanterns along the street. -----Output----- Print a single number: the minimum radius r such that the whole street is lit. Your answer should have an absolute or relative error of at most 10^-9. -----Examples----- Input 2 5 1 4 Output 1.5000000000 Input 4 8 2 4 5 7 Output 2.0000000000 Input 1 10 4 Output 6.0000000000 -----Note----- In the first example, with r = 1.5, the lantern at position 1 will illuminate the street from -0.5 to 2.5 and the lantern at position 4 will illuminate the street from 2.5 to 5.5, ensuring the entire main street from 0 to 5 is lit up. In the third example, the single lantern needs a radius of 6 to cover the entire street from 0 to 10.","solution":"def minimum_radius(n, l, positions): Returns the minimum radius of light such that the whole street is lit. positions.sort() # The maximum distance between two consecutive lanterns max_gap = 0 for i in range(1, n): max_gap = max(max_gap, positions[i] - positions[i - 1]) # The radius must cover half of the max_gap r = max_gap / 2 # Additionally, cover the starting point to the first lantern and last lantern to the end r = max(r, positions[0] - 0) r = max(r, l - positions[-1]) return r"},{"question":"A new cafe in town has a special menu system that needs to be programmed. Each day, the cafe changes its menu based on specific rules. They have tasked you with designing this system. -----Input:----- - The first line contains N, the number of items on the menu. - The second line contains N strings, each representing the name of a menu item. - The third line contains a single integer M, the number of days for which you need to generate the menu. -----Output:----- For each day, output the list of menu items, but with a unique rearrangement rule: - On day 1, the menu remains the same. - On day 2, move the first item to the end. - On day 3, move the first two items to the end, maintaining their relative order. - Continue this pattern for M days. -----Constraints----- - 1 leq N leq 100 - 1 leq M leq 100 - Each menu item is a string of up to 100 characters. -----Sample Input:----- 4 Pasta Burger Salad Fries 3 -----Sample Output:----- Pasta Burger Salad Fries Burger Salad Fries Pasta Salad Fries Pasta Burger","solution":"def generate_menu(N, items, M): Generates the menu for M days based on given rearrangement rules. Args: N : int : number of menu items items : list : list of menu item names M : int : number of days Returns: List of lists : each list representing the menu for a specific day menus = [] for day in range(1, M + 1): shift = (day - 1) % N # Calculate how many items to shift new_menu = items[shift:] + items[:shift] menus.append(new_menu) return menus"},{"question":"Write a function that takes a positive integer `n` and returns the `n`th Fibonacci number. The Fibonacci sequence is characterized by the fact that every number after the first two is the sum of the two preceding ones. More precisely: - The 0th Fibonacci number is 0. - The 1st Fibonacci number is 1. - The nth Fibonacci number is the sum of the (n-1)th and (n-2)th Fibonacci numbers. The function should be efficient and handle large values of `n` up to 50. Here are a few examples: fibonacci(0) should return 0 fibonacci(1) should return 1 fibonacci(10) should return 55 fibonacci(20) should return 6765","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n < 0: raise ValueError(\\"Input must be a positive integer.\\") if n == 0: return 0 elif n == 1: return 1 fibs = [0, 1] for i in range(2, n + 1): fibs.append(fibs[-1] + fibs[-2]) return fibs[n]"},{"question":"A software company is building a new feature to convert number strings into words. To achieve this, they need your help to write a program that converts any given number string into its corresponding words in English. For simplicity, the program will only handle numbers between 0 and 999, inclusive. The program should read an input string representing a number and output its word form in English. The words for numbers should be written in lowercase letters and separated by spaces. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a single number string representing an integer between 0 and 999, inclusive. -----Output----- For each test case, print a single line containing the input number in words. If there are multiple possible correct outputs, print any one of them. -----Examples----- Input 3 0 5 123 Output zero five one hundred twenty three -----Note----- In the first test case, the number 0 translates to \\"zero\\". In the second test case, the number 5 translates to \\"five\\". In the third test case, the number 123 translates to \\"one hundred twenty three\\".","solution":"def number_to_words(n): Converts a number between 0 and 999 into words in English. if n == \\"0\\": return \\"zero\\" num_dict_1_to_19 = [\\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\", \\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"] num_dict_tens = [\\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] num = int(n) words = [] if num >= 100: words.append(num_dict_1_to_19[num // 100 - 1]) words.append(\\"hundred\\") num = num % 100 if num >= 20: words.append(num_dict_tens[num // 10 - 2]) num = num % 10 if num > 0: words.append(num_dict_1_to_19[num - 1]) return \\" \\".join(words) def convert_numbers_to_words(test_cases): Converts a list of number strings to their word form in English. return [number_to_words(tc) for tc in test_cases]"},{"question":"You are given an array a of n integers. In one operation, you can remove any element from the array. The goal is to make the array strictly increasing (each element is strictly greater than the previous one) with the minimum number of operations. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 1000) — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 2000) — the length of the array a. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array a. It is guaranteed that the sum of n over all test cases does not exceed 2000. -----Output----- For each test case, output a single integer — the minimum number of operations required to make the array strictly increasing. -----Examples----- Input 3 3 1 2 3 4 3 1 2 1 5 5 5 5 5 5 Output 0 1 4 -----Note----- In the first test case, the array is already strictly increasing, so no operations are needed. In the second test case, you can remove the last 1 so that the resulting array is [3, 1, 2] which is still not strictly increasing. So, the minimum number of operations to get a strictly increasing array is to delete 1 and then 3, resulting in [1, 2]. In the third test case, you need to remove all but one of the 5s to make the array strictly increasing, which requires 4 operations.","solution":"def min_operations_to_increasing(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] if n == 1: results.append(0) continue lis_length = [1] * n for j in range(1, n): for k in range(0, j): if a[j] > a[k]: lis_length[j] = max(lis_length[j], lis_length[k] + 1) max_lis = max(lis_length) results.append(n - max_lis) return results # Sample usage t = 3 test_cases = [ (3, [1, 2, 3]), (4, [3, 1, 2, 1]), (5, [5, 5, 5, 5, 5]) ] print(min_operations_to_increasing(t, test_cases)) # Output: [0, 2, 4]"},{"question":"To ensure the students have a good understanding of arrays and sorting algorithms, create a function that will find the \\"k-th\\" smallest number in an array of integers. The function must be optimized to handle large datasets efficiently. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ k ≤ N 1 ≤ array elements ≤ 10^9 Input The first line contains T, the number of test cases. The first line of each test case contains two integers N and k. The next line contains N space-separated integers representing the array. Output For each test case, output the k-th smallest number in the array in a new line. Example Input 2 5 2 1 5 2 4 3 6 4 7 10 4 3 20 15 Output 2 10 Explanation In the first test case, the 2nd smallest number in the array [1, 5, 2, 4, 3] is 2. In the second test case, the 4th smallest number in the array [7, 10, 4, 3, 20, 15] is 10. This question requires knowledge of sorting algorithms and array manipulation, with a focus on efficiency for handling large datasets.","solution":"def kth_smallest_number(T, test_cases): Finds the k-th smallest number for each test case. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains (N, k, array) Returns: list: k-th smallest number for each test case. results = [] for (N, k, arr) in test_cases: arr.sort() results.append(arr[k-1]) return results"},{"question":"Wallace has a number of n coins where n is always even. He wants to split the coins into two groups such that each group has the same amount of coins. After splitting them, he will calculate the maximum sum of differences in values between the coins of the two groups. You are given a list of 2n integers representing the values of the coins. Write a program to determine the maximum sum of differences between the pairs of two groups if Wallace splits them in the most optimal way. Input and Output First line, T (≤ 100), the number of test cases. Each test case contains a line with the integer n (1 ≤ n ≤ 50), followed by a line with 2n integers representing the values of the coins. For each test case, output a single line with the maximum sum of differences for the optimal grouping strategy. SAMPLE INPUT 2 2 1 1 2 2 3 1 2 3 4 5 6 SAMPLE OUTPUT 2 9","solution":"def max_sum_of_differences(t, test_cases): results = [] for case in test_cases: n, coins = case # Sort the coin values coins.sort() # Calculate the maximum sum of differences max_diff_sum = sum(coins[n:]) - sum(coins[:n]) results.append(max_diff_sum) return results # Example usage: # t = 2 # test_cases = [ # (2, [1, 1, 2, 2]), # (3, [1, 2, 3, 4, 5, 6]) # ] # print(max_sum_of_differences(t, test_cases))"},{"question":"You are given a list of integers. You need to find the subarray with the maximum sum and return both the sum and the subarray itself. The subarray must contain at least one number. Your output should be a tuple with the first element being the maximum sum, and the second element being the subarray. For example, given the input `[1, -3, 2, 1, -1]`, the output should be `(3, [2, 1])`. Use the following function signature: ```python def max_subarray_sum(arr: List[int]) -> Tuple[int, List[int]]: pass # Example usage: print(max_subarray_sum([1, -3, 2, 1, -1])) # Should output: (3, [2, 1]) ```","solution":"from typing import List, Tuple def max_subarray_sum(arr: List[int]) -> Tuple[int, List[int]]: Finds the subarray with the maximum sum and returns both the sum and the subarray itself. if not arr: return (0, []) max_sum = current_sum = arr[0] start = end = s = 0 for i in range(1, len(arr)): if current_sum + arr[i] > arr[i]: current_sum += arr[i] else: current_sum = arr[i] s = i if current_sum > max_sum: max_sum = current_sum start = s end = i return (max_sum, arr[start:end + 1])"},{"question":"Write a function that takes a string containing a mathematical expression in postfix notation and evaluates it. Postfix notation is a mathematical notation in which every operator follows all of its operands. For example, the expression \\"3 4 + 2 * 1 -\\" (which is equivalent to \\"(3 + 4) * 2 - 1\\" in infix notation) should evaluate to 13. Input The input is a single string containing a valid postfix expression. The string contains integers and operators separated by spaces. The supported operators are +, -, *, and /. Output Print the evaluated result of the postfix expression as an integer. Assumptions - The input string will be non-empty. - The supported operators will only be +, -, *, and /. - Division should use integer division. Examples Input \\"3 4 + 2 * 1 -\\" Output 13 Input \\"5 1 2 + 4 * + 3 -\\" Output 14 Input \\"7 8 + 3 2 + /\\" Output 3 Note In the first example, the infix equivalent of the provided postfix expression \\"3 4 + 2 * 1 -\\" is \\"(3 + 4) * 2 - 1\\", which evaluates to 13. In the second example, the infix equivalent of the provided postfix expression \\"5 1 2 + 4 * + 3 -\\" is \\"5 + ((1 + 2) * 4) - 3\\", which evaluates to 14. In the third example, the infix equivalent of the provided postfix expression \\"7 8 + 3 2 + /\\" is \\"(7 + 8) / (3 + 2)\\", which evaluates to 3.","solution":"def evaluate_postfix(expression): Evaluate a postfix notation expression and return the result as an integer. :param expression: A string containing a valid postfix expression. :return: The evaluated result as an integer. stack = [] operators = set([\'+\', \'-\', \'*\', \'/\']) tokens = expression.split() for token in tokens: if token not in operators: stack.append(int(token)) else: b = stack.pop() a = stack.pop() if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': result = a // b # integer division stack.append(result) return stack[0]"},{"question":"You work for a company that processes large volumes of transactions every day. These transactions are monitored and logged in real-time, with each transaction having a unique identifier, a timestamp, and an amount associated with it. Occasionally, the company needs to run queries on the transaction log. One common query is finding the highest total amount of transaction within any contiguous subarray of a given size. **Task:** You are to implement a function `max_transaction_sum()` that takes three inputs: 1. An integer `n`, representing the total number of transactions logged. 2. An integer `k`, representing the size of the contiguous subarray. 3. A list of integers `transactions` of length `n`, where each integer denotes the amount of a transaction. The function should return the highest total amount of transactions within any contiguous subarray of size `k`. **Input Format:** - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100,000). - The second line contains `n` integers, the elements of the `transactions` list (-10^6 ≤ transactions[i] ≤ 10^6). **Output Format:** - The function should return a single integer, the maximum sum of any contiguous subarray of size `k`. **Example:** Input: ``` 7 3 2 1 5 1 3 2 -1 ``` Output: ``` 9 ``` **Explanation:** For the given input, the contiguous subarrays of size `k = 3` are: - [2, 1, 5] → Sum = 8 - [1, 5, 1] → Sum = 7 - [5, 1, 3] → Sum = 9 - [1, 3, 2] → Sum = 6 - [3, 2, -1] → Sum = 4 The maximum sum among these subarrays is 9. **Note:** You can use the sliding window technique to solve this problem efficiently with a time complexity of O(n).","solution":"def max_transaction_sum(n, k, transactions): # Initialize the sum of the first \'k\' elements current_sum = sum(transactions[:k]) max_sum = current_sum # Using the sliding window technique for i in range(k, n): current_sum += transactions[i] - transactions[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"In a country called Algorithmia, traffic control is a crucial matter. The government conducts a traffic survey every year to understand and alleviate traffic congestion in its capital city. One major intersection in the city has several road segments leading towards and away from it. Each road segment can be described using three coordinates (x1, y1) and (x2, y2), which represent two endpoints of the road segment. The survey data provided includes the coordinates of all road segments. You need to determine the total length of all the road segments combined. The length of a road segment can be calculated using the Euclidean distance formula. ----Input---- - The first line contains a single integer N (1 leq N leq 1000) - the number of road segments. - The next N lines each contain four integers x1, y1, x2, and y2 (0 leq x1, y1, x2, y2 leq 10^6) representing the coordinates of each road segment. ----Output---- Print a single floating-point number representing the total length of all the road segments. The answer should be accurate up to 6 decimal places. ----Examples---- Sample Input: 3 0 0 3 4 1 2 4 6 3 3 6 7 Sample Output: 12.071067","solution":"import math def calculate_segment_length(x1, y1, x2, y2): Calculates the Euclidean distance between two points (x1, y1) and (x2, y2). return math.sqrt((x2 - x1)**2 + (y2 - y1)**2) def total_road_segments_length(n, segments): Calculates the total length of all road segments. Parameters: n (int): Number of road segments segments (list of tuples): Each tuple contains 4 integers x1, y1, x2, y2 representing the coordinates of two endpoints of a road segment. Returns: float: Total length of all road segments total_length = 0 for segment in segments: x1, y1, x2, y2 = segment total_length += calculate_segment_length(x1, y1, x2, y2) return total_length # Example usage if __name__ == \\"__main__\\": n = int(input().strip()) segments = [tuple(map(int, input().strip().split())) for _ in range(n)] print(f\\"{total_road_segments_length(n, segments):.6f}\\")"},{"question":"An interstellar postman uses hyperloops to deliver packages between planets in a far galaxy. Each planet has a specific amount of packages to send and can connect to certain other planets directly. The hyperloops can only transport one package at a time between directly connected planets. You need to determine the minimum time required for the interstellar postman to deliver all packages to their respective destinations considering optimal routing. INPUT: The first line contains T denoting the number of test cases. Each test case consist of three parts: - The first line contains an integer N denoting the number of planets. - The second line contains N space-separated integers where the i-th integer indicates the number of packages to be delivered from the i-th planet. - The next N lines each contain a list of space-separated integers where the i-th line indicates the planets directly connected to the i-th planet. OUTPUT: For each test case, print the minimum time required to deliver all the packages. CONSTRAINTS: 1 ≤ T ≤ 30 1 ≤ N ≤ 200 0 ≤ Number of packages per planet ≤ 100 Each planet has at least one direct hyperloop connection. SAMPLE INPUT: 2 3 5 0 0 1 2 0 2 0 1 4 10 1 2 1 1 2 3 0 2 0 1 3 0 2 SAMPLE OUTPUT: 5 8 Explanation: In the first test case: - Planet 0 has 5 packages to deliver, and connected to planets 1 and 2. - Planet 1 and Planet 2 have no packages but are connected to planet 0. - The minimum time required is 5 as each package can be delivered directly in one unit time. In the second test case: - Planet 0 has 10 packages to deliver. - Planet 1 and planet 2 have 1 package and 2 packages respectively. - To minimize the total time, we distribute packages to their respective destinations simultaneously in an optimal order.","solution":"def min_delivery_time(T, test_cases): def bfs_delivery_time(N, packages, connections): from collections import deque, defaultdict # Initializing the graph graph = defaultdict(list) for i in range(N): for neighbor in connections[i]: graph[i].append(neighbor) # Find the maximum amount of packages on a single planet max_packages = max(packages) return max_packages results = [] for case in test_cases: N = case[\'N\'] packages = case[\'packages\'] connections = case[\'connections\'] time = bfs_delivery_time(N, packages, connections) results.append(time) return results # Function to parse input and call the main function def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) packages = list(map(int, lines[index + 1].split())) connections = [] for i in range(N): connections.append(list(map(int, lines[index + 2 + i].split()))) test_cases.append({ \'N\': N, \'packages\': packages, \'connections\': connections, }) index += 2 + N return T, test_cases"},{"question":"Write a program that accepts a string representation of a date in the format \\"dd-mm-yyyy\\" and converts it into a more readable format with the full month name. For example, the date \\"21-04-2021\\" should be converted to \\"21 April 2021\\". Input Format A single line of input containing the date in \\"dd-mm-yyyy\\" format, mbox{S}. Constraints 0<len(S)<11 The string consists only of digits and hyphens in the format described. Output Format Print the date in the format \\"dd Month yyyy\\", where Month is the full name of the month corresponding to the input date. Sample Input 15-08-1947 Sample Output 15 August 1947","solution":"def convert_date(date_str): Converts the date from \\"dd-mm-yyyy\\" format to \\"dd Month yyyy\\" format where Month is the full name of the month. months = [ \\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\" ] day, month, year = date_str.split(\'-\') month_name = months[int(month) - 1] return f\\"{day} {month_name} {year}\\""},{"question":"A chef is trying to arrange his kitchen tools and wants to use the optimal possible arrangement such that he can retrieve his tools quickly when needed. The chef has decided that the tools should be arranged in such a way that it minimizes the maximum distance from the starting position. The kitchen tools are placed in a linear arrangement with positions from 1 to n. Each position can hold exactly one tool, and the tools are identified by unique integers from 1 to n. The optimal arrangement minimizes the maximum distance any tool has to travel from a starting position 1 to reach its position. To achieve this, the chef considers that each tool travels independently to its position. The distance a tool has to travel if placed at position p is the absolute difference between p and 1, which is |p - 1|. The maximum distance is the maximum value of |p - 1| over all tools. Given n, the number of tools, write a program to find the optimal arrangement of the tools that minimizes the maximum distance from the starting position. -----Input----- The only line contains one integer n (1 le n le 10^5) — the number of kitchen tools. -----Output----- Print a permutation that minimizes the maximum distance any tool has to travel from the starting position. If there are multiple arrangements that satisfy the condition, print any. -----Examples----- Input 5 Output 3 1 5 2 4 Input 4 Output 2 1 4 3 -----Note----- In the first sample, one possible optimal arrangement is [3, 1, 5, 2, 4]. The maximum distance any tool has to travel from position 1 is 2, which is minimal. In the second sample, one possible optimal arrangement is [2, 1, 4, 3]. The maximum distance from position 1 is again 1, which is minimal. The arrangements ensure that no tool has to travel more than the minimized distance to reach its position.","solution":"def minimize_max_distance(n): Returns an arrangement of tools from 1 to n such that the maximum distance any tool has to travel from the starting position (position 1) is minimized. if n == 1: return [1] result = [] left = 1 right = n while left <= right: if left == right: result.append(left) break result.append(left) result.append(right) left += 1 right -= 1 return result"},{"question":"Katy wants to create a palindrome by rearranging the letters of a given string. A palindrome is a string that reads the same backward as forward. Your task is to help Katy determine if it\'s possible to rearrange the given string to form a palindrome and, if so, provide one possible rearrangement. -----Input----- A single string consisting of lowercase English letters. The length of the string will be between 1 and 1000. -----Output----- If it\'s possible to rearrange the string to form a palindrome, output one possible palindrome. If it is not possible, output \\"NO\\". -----Examples----- Sample Input 1: racecar Sample Output 1: racecar Sample Input 2: aabb Sample Output 2: abba Sample Input 3: abcdef Sample Output 3: NO","solution":"from collections import Counter def can_form_palindrome(s): Determine if it\'s possible to rearrange the string to form a palindrome. If possible, return one possible palindrome, otherwise return \\"NO\\". :param s: Input string :return: A palindrome string or \\"NO\\" # Get the frequency of each character in the input string freq = Counter(s) # Count characters with odd frequencies odd_count = sum(1 for count in freq.values() if count % 2 != 0) # If more than one character has an odd frequency, a palindrome is not possible if odd_count > 1: return \\"NO\\" # Initialize the parts of the palindrome left_part = [] middle_part = \\"\\" # Construct the left part of the palindrome and find the middle character (if any) for char, count in freq.items(): if count % 2 != 0: middle_part = char left_part.append(char * (count // 2)) # Create the full palindrome left_part = \'\'.join(left_part) right_part = left_part[::-1] return left_part + middle_part + right_part"},{"question":"You are required to write a function that takes a list of numbers and returns a dictionary where the keys are the numbers from the list, and the values are the corresponding counts of their divisors (including the number itself and 1). The function should adhere to the following guidelines: - If the list is empty, the function should return an empty dictionary. - Each number in the list will be a positive integer (1 and above). - The function should efficiently compute the count of divisors for each number in the list. Examples Input: [1, 2, 3, 4, 5] Output: {1: 1, 2: 2, 3: 2, 4: 3, 5: 2} Input: [10, 15, 21] Output: {10: 4, 15: 4, 21: 4}","solution":"def count_divisors(lst): Returns a dictionary where the keys are the numbers from the list, and the values are the corresponding counts of their divisors. def divisors_count(n): count = 0 for i in range(1, int(n ** 0.5) + 1): if n % i == 0: count += 1 if i != n // i: count += 1 return count result = {} for number in lst: result[number] = divisors_count(number) return result"},{"question":"Write a function ```abundant_number(n)``` that determines if a given positive integer `n` is an abundant number. An abundant number is a number for which the sum of its proper divisors (excluding itself) is greater than the number itself. For example, 12 is an abundant number because its proper divisors are 1, 2, 3, 4, and 6, and their sum is 16, which is greater than 12. The function should return `True` if `n` is an abundant number, and `False` otherwise. # Examples: ``` abundant_number(12) -> True abundant_number(18) -> True abundant_number(19) -> False ``` # Note: - You can assume that `n` is always a positive integer. - The range of `n` should be reasonably chosen to avoid performance issues, for example, `n <= 10^6`.","solution":"def abundant_number(n): Determines if a given positive integer n is an abundant number. An abundant number is a number for which the sum of its proper divisors (excluding itself) is greater than the number itself. Parameters: n (int): A positive integer Returns: bool: True if n is an abundant number, False otherwise if n <= 0: return False sum_of_divisors = 0 for i in range(1, (n // 2) + 1): if n % i == 0: sum_of_divisors += i return sum_of_divisors > n"},{"question":"You are given a list of integers and your task is to count the number of unique pairs (i, j) such that i < j and the sum of the elements at these indices is equal to a given target value. Write a function that accepts three inputs: 1. An integer array `arr` consisting of `n` integers. 2. An integer `n`, the length of the array. 3. An integer `target`, the target sum for the pairs. The function should return the number of unique pairs (i, j) such that i < j and arr[i] + arr[j] = target. Function Signature: ```python def count_pairs(arr: List[int], n: int, target: int) -> int: # Your code here ``` Constraints: - 1 <= n <= 100,000 - -10^9 <= arr[i] <= 10^9 - -10^9 <= target <= 10^9 Example: Input ``` arr = [1, 5, 7, -1, 5] n = 5 target = 6 ``` Output ``` 3 ``` Explanation: The pairs are (0, 1), (0, 4), and (2, 3). Each pair sums to 6. Input ``` arr = [0, 0, 0, 0] n = 4 target = 0 ``` Output ``` 6 ``` Explanation: The pairs are (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3). Each pair sums to 0.","solution":"from typing import List def count_pairs(arr: List[int], n: int, target: int) -> int: Counts the number of unique pairs (i, j) such that i < j and arr[i] + arr[j] equals the target. count = 0 num_counts = {} for i in range(n): complement = target - arr[i] if complement in num_counts: count += num_counts[complement] if arr[i] in num_counts: num_counts[arr[i]] += 1 else: num_counts[arr[i]] = 1 return count"},{"question":"Bob and Alice are playing a game where Bob sends a string to Alice, and Alice has to determine if the string is a palindrome. A palindrome is a word or phrase that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Your task is to write a code to help Alice determine if the string Bob sends is a palindrome. -----Input----- The input will consist of the first line containing the number of test cases ‘n’ followed by n lines of test cases. -----Output----- For each input, print \\"YES\\" if the string is a palindrome, otherwise print \\"NO\\". -----Example----- Input: 3 A man a plan a canal Panama Was it a car or a cat I saw This is not a palindrome Output: YES YES NO","solution":"def is_palindrome(s): # Remove spaces, punctuation and convert to lowercase cleaned = \'\'.join(char for char in s if char.isalnum()).lower() # Check if the cleaned string is equal to its reverse return cleaned == cleaned[::-1] def check_palindromes(test_cases): results = [] for case in test_cases: if is_palindrome(case): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # n = int(input()) # test_cases = [input().strip() for _ in range(n)] # for result in check_palindromes(test_cases): # print(result)"},{"question":"John is learning a new programming language, and he is given the task of checking whether a given string is a valid variable name in this programming language. A valid variable name is defined by the following rules: 1. The name must be non-empty and consist of only alphabetic characters (either uppercase or lowercase) and underscores (\'_\'). 2. The name must not start or end with an underscore (\'_\'). 3. The name must not contain two consecutive underscores. Write a program that checks whether the given string is a valid variable name. -----Input----- The first line of the input contains an integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains a single string s consisting of only Latin letters and underscores. -----Output----- For each test case, output \\"VALID\\" (without quotes) if s satisfies the conditions for a valid variable name, and \\"INVALID\\" (without quotes) otherwise. You can output the answer in any case (for example, the strings \\"VaLiD\\", \\"valid\\", \\"Valid\\" and \\"VALID\\" will be recognized as a positive answer). -----Examples----- Input 7 valid_name __invalid__ validName inValid _valid_name invalid_name_ inva__lid Output VALID INVALID VALID VALID INVALID INVALID INVALID","solution":"def is_valid_variable_name(s): Checks if the given string s is a valid variable name according to the specified rules. if len(s) == 0: return \\"INVALID\\" if not s.replace(\\"_\\", \\"\\").isalpha(): return \\"INVALID\\" if s[0] == \'_\' or s[-1] == \'_\': return \\"INVALID\\" if \'__\' in s: return \\"INVALID\\" return \\"VALID\\" def check_variable_names(test_cases): results = [] for s in test_cases: results.append(is_valid_variable_name(s)) return results # Example usage: # t = int(input()) # test_cases = [input().strip() for _ in range(t)] # results = check_variable_names(test_cases) # for result in results: # print(result)"},{"question":"You are given a string s, consisting of lowercase English letters. You are allowed to rearrange the characters of the string. Your task is to determine the maximum number of distinct palindromic substrings that can be formed using the characters of the string. -----Constraints----- - 1 ≤ |s| ≤ 10^5 - s consists only of lowercase English letters. -----Input----- The input is given in the following format: s -----Output----- Print the maximum number of distinct palindromic substrings that can be formed. -----Sample Input----- abbaa -----Sample Output----- 4 -----Explanation----- By rearranging the characters of the string \\"abbaa\\", one possible rearrangement is \\"aabab\\". The distinct palindromic substrings are \\"a\\", \\"b\\", \\"aa\\", and \\"aba\\". Therefore, the answer is 4.","solution":"def max_distinct_palindromic_substrings(s): Returns the maximum number of distinct palindromic substrings that can be formed using the characters of the string s. from collections import Counter # Count the frequency of each character freq = Counter(s) # For a character to form a palindromic substring, at least one # of that character is needed count = 0 for char in freq: # If frequency is more than 0, it is eligible to form a palindrome if freq[char] > 0: count += 1 return count"},{"question":"Implement a function `wordLadderLength(beginWord, endWord, wordList)` that takes in three parameters: a `beginWord` representing the starting word, an `endWord` representing the ending word, and a `wordList` containing a list of available words. Your task is to determine the length of the shortest transformation sequence from `beginWord` to `endWord`, such that: 1. Only one letter can be changed at a time. 2. Each transformed word must exist in the `wordList`. If there is no possible transformation, return 0. The transformation sequence should include both `beginWord` and `endWord`. **Example 1:** ``` Input: beginWord = \\"hit\\", endWord = \\"cog\\", wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"] Output: 5 Explanation: The shortest transformation sequence is \\"hit\\" → \\"hot\\" → \\"dot\\" → \\"dog\\" → \\"cog\\", which is 5 words long. ``` **Example 2:** ``` Input: beginWord = \\"hit\\", endWord = \\"cog\\", wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\"] Output: 0 Explanation: The endWord \\"cog\\" is not in wordList, therefore no possible transformation. ``` **Your Task:** You do not need to read or print anything. Complete the function `wordLadderLength(beginWord, endWord, wordList)` which takes the above inputs and returns the length of the shortest transformation sequence. If no such transformation is possible, return 0. **Expected Time Complexity:** O(N * M * 26) where `N` is the length of `wordList` and `M` is the length of each word. **Expected Space Complexity:** O(N + M) **Constraints:** - 1 ≤ `beginWord.length` ≤ 100 - 1 ≤ `endWord.length` ≤ 100 - 1 ≤ wordList.length ≤ 5000 - All words have the same length. - All words contain only lowercase alphabetic characters.","solution":"from collections import deque def wordLadderLength(beginWord, endWord, wordList): Returns the length of the shortest transformation sequence from beginWord to endWord. If no such transformation is possible, returns 0. word_set = set(wordList) if endWord not in word_set: return 0 queue = deque([(beginWord, 1)]) while queue: current_word, length = queue.popleft() if current_word == endWord: return length for i in range(len(current_word)): for ch in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + ch + current_word[i+1:] if next_word in word_set: word_set.remove(next_word) queue.append((next_word, length + 1)) return 0"},{"question":"You are given an array of n integers and q queries, each containing an integer k. For each query, determine if there is a subarray of length exactly k in which all elements are unique. -----Input----- The first line of the input contains two integers n and q (1 ≤ n, q ≤ 10^5) — the length of the array and the number of queries. The second line contains the array of n integers a_1, a_2, ..., a_{n} (1 ≤ a_i ≤ 10^5). Each of the next q lines contains a single integer k (1 ≤ k ≤ n) representing the length of the subarray for each query. -----Output----- Print q lines, each containing \\"YES\\" if there exists a subarray of length exactly k with all unique elements, and \\"NO\\" otherwise. -----Examples----- Input 6 3 1 2 3 1 4 5 3 4 2 Output YES NO YES Input 5 2 2 2 2 2 2 1 5 Output YES NO","solution":"def has_unique_subarray(arr, k): Determines if there is a subarray of length exactly k with unique elements in the given array. n = len(arr) if k > n: return \\"NO\\" subarray_set = set() for i in range(k): if arr[i] in subarray_set: return \\"NO\\" subarray_set.add(arr[i]) if len(subarray_set) == k: return \\"YES\\" for i in range(k, n): subarray_set.remove(arr[i - k]) if arr[i] in subarray_set: return \\"NO\\" subarray_set.add(arr[i]) if len(subarray_set) == k: return \\"YES\\" return \\"NO\\" def process_queries(n, q, array, queries): results = [] for k in queries: results.append(has_unique_subarray(array, k)) return results"},{"question":"Task Description # Background In the world of computer programming, various operations are performed to extract meaningful information from sequences. A well-known example of such computation is the *circular shift*. A circular shift (or rotation) is an operation that transforms a string by moving characters from one end to the other. This process happens while maintaining the initial order of characters in the remaining portion of the string. Given a string `s` of length `n`, you are required to perform several circular shift operations and then determine the lexicographically smallest resulting string. # Problem You\'re provided with a string `s` and `q` queries, where each query specifies a shift operation. Each operation is described by an integer that indicates the number of positions to perform a circular shift to the right. Your task is to return the lexicographically smallest string after performing each shift operation in sequence. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100000), which represents the length of the string. - The second line contains the string `s`, which consists of lowercase English letters. - The third line contains an integer `q` (1 ≤ q ≤ 100000), which represents the number of queries. - The next `q` lines each contain an integer `k_i` (0 ≤ k_i < n). # Output For each query, output the lexicographically smallest string after undergoing the specified circular shifts. Example # Input: ``` 8 circular 3 2 5 7 ``` # Output: ``` arcircul circula circular ``` # Input-Output Explanation - After shifting the string \\"circular\\" by 2 positions to the right: \\"larcircu\\" is the string formed, but \\"arcircul\\" is the lexicographically smallest. - After shifting the original string \\"circular\\" by 5 positions to the right: \\"rcircular\\" is the string formed, but \\"circula\\" is the lexicographically smallest. - After shifting the original string \\"circular\\" by 7 positions to the right: \\"rcircular\\" remains \\"circular,\\" which is already the lexicographically smallest.","solution":"def circular_shift_smallest_string(n, s, q, queries): def get_shifted_string(s, k): k = k % n return s[-k:] + s[:-k] min_string = s results = [] for k in queries: shifted_string = get_shifted_string(s, k) if shifted_string < min_string: min_string = shifted_string results.append(min_string) return results # Example Usage # n = 8 # s = \\"circular\\" # q = 3 # queries = [2, 5, 7] # Output: [\'arcircul\', \'arcircul\', \'arcircul\']"},{"question":"John is participating in a coding competition where he has to arrange a set of characters in a special way. Given a string, he needs to determine the number of unique permutations of that string. However, due to the competition rules, he must verify his result using a modified version of the string, where he only considers distinct characters and ignores duplicate appearances. Given a string s, calculate the number of unique permutations of its distinct characters. Because the number of permutations can be quite large, return the result modulo 10^9+7. Function Description Complete the `unique_permutations` function in the editor below. The function has the following parameter(s): - string s: the input string containing lowercase English letters Returns - int: the number of unique permutations of the distinct characters in s, modulo 10^9+7 Input Format A single line containing a string s. Constraints 1 leq |s| leq 1000 s consists of lowercase English letters (a-z). Sample Input 0 abc Sample Output 0 6 Explanation 0 The distinct characters in \\"abc\\" are \'a\', \'b\', and \'c\'. The number of unique permutations of these characters is 3! = 6. Sample Input 1 aabc Sample Output 1 6 Explanation 1 The distinct characters in \\"aabc\\" are \'a\', \'b\', and \'c\'. The number of unique permutations of these characters is 3! = 6. Sample Input 2 abbccc Sample Output 2 6 Explanation 2 The distinct characters in \\"abbccc\\" are \'a\', \'b\', and \'c\'. The number of unique permutations of these characters is 3! = 6.","solution":"def unique_permutations(s): Returns the number of unique permutations of the distinct characters in the string s, modulo 10^9+7. MOD = 10**9 + 7 # Get the distinct characters from the string distinct_chars = set(s) # Number of distinct characters n = len(distinct_chars) # Calculate n! factorial = 1 for i in range(1, n + 1): factorial = (factorial * i) % MOD return factorial"},{"question":"In a small library, books are organized into shelves by their genres. Each shelf has a maximum capacity and cannot hold more books beyond it. The librarian wants to enhance the book management system to automatically allocate books to appropriate shelves given their genre and title. If a shelf is full, the system should indicate that the book could not be added. Each book is defined by its genre gi (`1 ≤ gi ≤ 1000`) and title ti (unique title for each book). Each shelf has a unique genre and a capacity ci (`1 ≤ ci ≤ 100`) indicating the maximum number of books it can hold. Write a program that takes a list of shelves with their capacities and a list of books to be added, and output the titles of books that could not be added due to full shelves. Input The input contains multiple datasets, ending with a single line containing a single zero. Each dataset is given in the following format: m g1 c1 g2 c2 :: gm cm n g1 t1 g2 t2 :: gn tn Here, m is the number of shelves and each gi ci pair indicates a shelf\'s genre and capacity. Following this, n indicates the number of books and each gi ti pair represents a book\'s genre and title. All integers in the input are positive. Output For each dataset, output the titles of the books that could not be added, each on a new line. If all books could be added, output \\"All books added\\". Example Input 3 1 2 2 3 3 1 5 1 A 2 B 1 C 3 D 1 E 2 1 1 2 2 1 2 W 2 Output E All books added","solution":"def manage_books(input_data): # Parse the input data input_lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(input_lines): m = int(input_lines[index]) if m == 0: break index += 1 shelves = {} for _ in range(m): gi, ci = map(int, input_lines[index].split()) shelves[gi] = { \'capacity\': ci, \'current_count\': 0 } index += 1 n = int(input_lines[index]) index += 1 could_not_add = [] for _ in range(n): gi, ti = input_lines[index].split() gi = int(gi) if gi in shelves: if shelves[gi][\'current_count\'] < shelves[gi][\'capacity\']: shelves[gi][\'current_count\'] += 1 else: could_not_add.append(ti) else: could_not_add.append(ti) # There is no shelf for this genre, so cannot be added. index += 1 if could_not_add: results.extend(could_not_add) else: results.append(\\"All books added\\") # Adding an extra new line to separate test case results results.append(\\"\\") # Joining results and removing the last empty string added for separating results return \\"n\\".join(results).strip()"},{"question":"You are given an initial array `arr` of n integers (1 ≤ n ≤ 10^5) and m operations (1 ≤ m ≤ 10^5). Each operation is one of the following types: 1. Update: Update the value at a specified index to a new value. 2. Query: Given a range [l, r] (1 ≤ l ≤ r ≤ n), find the maximum element within this range. Input The first line of the input contains two integers n and m — the number of elements in the array and the number of operations. The second line contains n integers a1, a2, ..., an — the elements of the array. Each of the next m lines contains an operation in one of the following formats: - `1 i x` — Update the element at index i (1-based index) to x. - `2 l r` — Query the maximum element in the subarray from index l to index r (1-based index). Output For each query operation, output the corresponding result on a new line. Example Input 5 5 1 3 2 7 9 2 2 4 1 3 10 2 2 4 1 5 6 2 1 5 Output 7 10 10 Note In the first query, the maximum element in the range [2, 4] is 7. After updating the 3rd element to 10, the array becomes [1, 3, 10, 7, 9], hence the maximum element in the range [2, 4] after the update becomes 10. After updating the 5th element to 6, the array becomes [1, 3, 10, 7, 6]. Finally, the maximum element in the range [1, 5] is now 10.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Initialize tree with the data for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, index, value): # Update the value in the original array and re-build the tree pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def query(self, left, right): # Query the maximum value within the range [left, right) result = float(\'-inf\') left += self.n right += self.n while left < right: if left % 2 == 1: result = max(result, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 result = max(result, self.tree[right]) left //= 2 right //= 2 return result def process_operations(n, m, array, operations): tree = SegmentTree(array) results = [] for op in operations: if op[0] == 1: index, value = op[1]-1, op[2] tree.update(index, value) elif op[0] == 2: left, right = op[1]-1, op[2] results.append(tree.query(left, right)) return results"},{"question":"Write a function to validate a Sudoku puzzle solution. The function should take a 2D list representing the completed Sudoku grid and return `True` if the solution is valid, otherwise return `False`. A Sudoku puzzle consists of a 9x9 grid. Each row, column, and 3x3 subgrid (also referred to as “boxes”) must contain all the digits from 1 to 9 with no repetition. Function Signature: ```python def is_valid_sudoku(board: List[List[int]]) -> bool: ``` # Input - `board : List[List[int]]` : A 9x9 array representing the completed Sudoku grid. Each element of board will be an integer between 1 and 9. # Output - `bool`: `True` if the Sudoku solution is valid, `False` otherwise. # Example ```python board = [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] print(is_valid_sudoku(board)) ``` Output: ``` True ``` # Implementation Steps 1. Verify each row contains unique integers from 1 to 9. 2. Verify each column contains unique integers from 1 to 9. 3. Verify each 3x3 subgrid contains unique integers from 1 to 9.","solution":"from typing import List def is_valid_sudoku(board: List[List[int]]) -> bool: def is_valid_group(group: List[int]) -> bool: return sorted(group) == list(range(1, 10)) # Check rows for row in board: if not is_valid_group(row): return False # Check columns for col in range(9): column = [board[row][col] for row in range(9)] if not is_valid_group(column): return False # Check 3x3 subgrids for box_row in range(0, 9, 3): for box_col in range(0, 9, 3): subgrid = [board[r][c] for r in range(box_row, box_row + 3) for c in range(box_col, box_col + 3)] if not is_valid_group(subgrid): return False return True"},{"question":"You are given an array of n integers, where n is even. Your task is to divide this array into two parts such that the sum of elements in the first part is as close as possible to the sum of elements in the second part. The difference between the two sums should be minimized. If there are multiple ways to achieve this, just find one valid way. Input The first line contains an integer n (2 ≤ n ≤ 1000, n is even) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the elements of the array. Output Output the minimum possible difference between the sum of the two parts. Example Input 4 1 6 5 11 Output 1 Input 6 3 1 4 2 2 1 Output 1","solution":"def min_diff_partition(n, arr): Returns the minimum possible difference between the sum of two parts of the array such that the array is divided into two parts with sums as close as possible. :param n: the number of elements in the array (even integer) :param arr: list of n integers :return: minimum difference between the sums of two parts total_sum = sum(arr) target = total_sum // 2 dp = [0] * (target + 1) for num in arr: for j in range(target, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) return abs((total_sum - dp[target]) - dp[target])"},{"question":"Given a list of integers, determine the minimum number of operations required to make all elements of the list equal. In each operation, you can select any number of elements from the list and increment each of them by 1. -----Constraints----- - 1 leq N leq 10^5 - 1 leq A_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ldots A_N -----Output----- Print the minimum number of operations required to make all elements of the list equal. -----Sample Input----- 3 1 2 3 -----Sample Output----- 3 Explanation: - Increment the first element twice and the second element once: 1 -> 2 -> 3 2 -> 3 3 - Total operations: 2 + 1 = 3","solution":"def min_operations_to_equal_elements(nums): Determine the minimum number of operations required to make all elements of the list equal. In each operation, you can select any number of elements from the list and increment each of them by 1. :param nums: List[int] - List of integers :return: int - Minimum number of operations required min_val = min(nums) operations = sum(num - min_val for num in nums) return operations"},{"question":"You are about to participate in a treasure hunt game organized in a vast kingdom. The kingdom can be imagined as a 2D grid of size N times N. Each cell in the grid represents a distinct piece of land. Some of these cells contain treasures, while others do not. You have a map that marks the starting point and all the treasures\' locations. However, some parts of the land are untraversable due to natural obstacles like rivers and mountains. These obstacles are also marked on your map. The goal is to reach as many treasures as possible from the starting point within a given number of moves, where each move consists of moving one cell to the north, south, east, or west. Given the coordinates of the starting point, the locations of the treasures, and the locations of the obstacles, determine the maximum number of treasures you can collect within the permitted number of moves. -----Input----- - The first line contains four integers: N (1 leq N leq 100), M (1 leq M leq N^2), K (1 leq K leq N^2), and L (1 leq L leq 1000), where N is the size of the grid, M is the number of treasures, K is the number of obstacles, and L is the maximum number of moves allowed. - The next line contains two integers sx and sy (1 leq sx, sy leq N), the starting point\'s coordinates. - The following M lines each contain two integers tx_i and ty_i (1 leq tx_i, ty_i leq N), the coordinates of the treasures. - The next K lines each contain two integers ox_i and oy_i (1 leq ox_i, oy_i leq N), the coordinates of the obstacles. -----Output----- Output a single integer, the maximum number of treasures that can be collected within L moves from the starting point. -----Examples----- Sample Input: 5 3 2 10 1 1 3 3 4 4 5 5 3 1 4 2 Sample Output: 3 Explanation: Starting at cell (1, 1), you can reach the treasures at (3, 3), (4, 4), and (5, 5) within 10 moves while avoiding obstacles at (3, 1) and (4, 2).","solution":"from collections import deque def max_treasures(N, M, K, L, start, treasures, obstacles): Determines the maximum number of treasures that can be collected within the permitted number of moves. Parameters: N (int): Size of the grid (N x N) M (int): Number of treasures K (int): Number of obstacles L (int): Maximum number of moves allowed start (tuple): Coordinates of the starting point (sx, sy) treasures (List[tuple]): List of coordinates of treasures obstacles (List[tuple]): List of coordinates of obstacles Returns: int: Maximum number of treasures that can be collected # Define grid grid = [[0 for _ in range(N)] for _ in range(N)] # Mark treasures and obstacles on the grid for tx, ty in treasures: grid[tx-1][ty-1] = 1 # Treasure cell for ox, oy in obstacles: grid[ox-1][oy-1] = -1 # Obstacle cell # Initialize BFS q = deque([(start[0]-1, start[1]-1, 0)]) # (x, y, moves) visited = set() visited.add((start[0]-1, start[1]-1)) # 4 possible move directions (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Number of treasures collected collected_treasures = 0 while q: x, y, moves = q.popleft() # Check if we reached the maximum allowed moves if moves > L: continue # Collect treasure if present if grid[x][y] == 1: collected_treasures += 1 grid[x][y] = 0 # Mark treasure as collected # Explore all possible moves from current position for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] != -1: visited.add((nx, ny)) q.append((nx, ny, moves + 1)) return collected_treasures"},{"question":"The company you work for is constructing a series of new high-rise apartment buildings. Each building will be composed of several floors, and the height of each floor is known. However, due to varying construction constraints, the height of each floor might be different. Given the heights of all floors for a specific building, you need to determine the average floor height for a set number of queries. Each query consists of a range of floors, and you must calculate the average height of floors within that range (inclusive). Input The first line contains two integers N and Q, where N is the number of floors in the building, and Q is the number of queries. The second line contains N non-negative integers representing the height of each floor in the building. Heights are given from the 1st floor to the Nth floor. The following Q lines each contain two integers L and R which describe a query. For each query, determine the average height of floors from the L-th to the R-th (inclusive). Output For each query, output the average floor height as a floating-point number rounded to 2 decimal places. Constraints 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 0 ≤ Height of each floor ≤ 10^4 1 ≤ L ≤ R ≤ N SAMPLE INPUT 5 3 3 9 4 2 8 1 3 2 5 1 5 SAMPLE OUTPUT 5.33 5.75 5.20 Explanation For the first query (1-3), the heights of the floors are 3, 9, 4. The average height is (3 + 9 + 4) / 3 = 16 / 3 = 5.33. For the second query (2-5), the heights of the floors are 9, 4, 2, 8. The average height is (9 + 4 + 2 + 8) / 4 = 23 / 4 = 5.75. For the third query (1-5), the heights of the floors are 3, 9, 4, 2, 8. The average height is (3 + 9 + 4 + 2 + 8) / 5 = 26 / 5 = 5.20.","solution":"def average_heights(N, Q, heights, queries): prefix_sums = [0] * (N + 1) # Compute prefix sums for i in range(N): prefix_sums[i + 1] = prefix_sums[i] + heights[i] results = [] for L, R in queries: total_sum = prefix_sums[R] - prefix_sums[L - 1] avg_height = total_sum / (R - L + 1) results.append(round(avg_height, 2)) return results # Example usage N = 5 Q = 3 heights = [3, 9, 4, 2, 8] queries = [(1, 3), (2, 5), (1, 5)] print(average_heights(N, Q, heights, queries)) # Output: [5.33, 5.75, 5.20]"},{"question":"There is a long straight road with `N` houses numbered from `1` to `N`. Some of these houses have monsters in them, and every house number is either empty or contains a single monster. The monsters of each house have a certain \\"alert radius\\". If a house at position `i` contains a monster, it can alert all other monsters within a certain distance `D` from house `i`. Chef Ciel needs to find out the minimum number of alert towers required to ensure that every affected house is covered by at least one alert tower. An alert tower can be placed at any house (regardless of whether it has a monster or not) and it will alert all monsters within a certain range `R`. Determine the minimum number of alert towers required such that every monster is within at least one alert range. Input: - The first line contains a single integer `T`, the number of test cases. - For each test case, the first line contains two integers `N`, the number of houses and `R`, the alert radius of the alert towers. - The second line contains `N` integers where the `i-th` integer represents either `0` (empty house) or `1` (house with a monster). - The last line of each test case contains `N` integers representing the alert radius `D` for each house. Output: - Print `T` lines, each line containing the minimum number of alert towers required for each test case. Constraints: - ( 1 le T le 100 ) - ( 1 le N le 1000 ) - ( 1 le R le N ) - ( 0 le alert_i, D_i le N ) Example Input: ``` 2 5 2 1 0 0 1 0 1 0 0 1 0 6 1 0 1 1 0 1 0 0 1 1 0 1 0 ``` Example Output: ``` 2 3 ``` Explanation: In the first test case, there are 5 houses where house 1 and house 4 have monsters with ranges 1 and 1 respectively. By placing alert towers at house 1 and house 4 (both within their alert radius 1 and alert tower radius 2), both monsters are covered. In the second test case, houses 2, 3, and 5 have monsters. By placing alert towers at house 2, 3, and 5, every monster is within the alert range. Note: Alert towers can be placed in houses with monsters, but the goal is to minimize the number of towers used.","solution":"def min_alert_towers(T, test_cases): results = [] for case in range(T): N, R = test_cases[case][0] houses = test_cases[case][1] alert_ranges = test_cases[case][2] covered = [0] * N # covered[i] will be 1 if house i+1 is covered by an alert tower towers = 0 i = 0 while i < N: if houses[i] == 1: # find the furthest house this tower can be placed while covering house i position = min(i + R - 1, N - 1) # backtrack to find the optimal placement within radius R from i, to ensure # maximum coverage with least towers while position > i and covered[position] == 1: position -= 1 # Place the tower and mark covered houses towers += 1 for j in range(max(0, position - R + 1), min(N, position + R)): covered[j] = 1 # Move i to just beyond the coverage area to continue checking i = position + R else: i += 1 results.append(towers) return results"},{"question":"Write a function to determine if a given string is a valid palindrome after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters. A palindrome is a word that reads the same forwards and backwards. You should ignore spaces, punctuation, and case differences. For example: - \\"A man, a plan, a canal: Panama\\" is a valid palindrome. - \\"race a car\\" is not a valid palindrome. Function signature: `def is_valid_palindrome(s: str) -> bool:` Input A single string s of length between 1 and 1000. Output Return a boolean value: True if the given string is a valid palindrome, False otherwise.","solution":"def is_valid_palindrome(s: str) -> bool: Determines if a given string is a valid palindrome after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters. :param s: Input string :return: True if the given string is a valid palindrome, False otherwise # Normalize the string by converting to lowercase and removing non-alphanumeric characters normalized_str = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string reads the same forwards and backwards return normalized_str == normalized_str[::-1]"},{"question":"Given an array of integers `nums` representing the quantities of different items and a target amount `target`, return the minimum number of items required to reach exactly the target amount. If it is not possible to reach the target amount using any combination of the given items, return -1. Example 1: Input: nums = [1, 2, 3] target = 7 Output: 3 Explanation: The minimum number of items needed to reach 7 is 3. For example, we can use 2 + 2 + 3 = 7. Example 2: Input: nums = [5, 3] target = 7 Output: -1 Explanation: It is not possible to reach the target amount of 7 using the given items. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minItems(nums: List[int], target: int) -> int` which takes an array of integers `nums` and an integer `target` as input parameters and returns the minimum number of items required to reach exactly the target amount. If it is not possible to reach the target amount, return -1. Expected Time Complexity: O(n*target), where n is the length of the input list `nums`. Expected Auxiliary Space: O(target). Constraints: 1 ≤ len(nums) ≤ 100 1 ≤ nums[i] ≤ 1000 1 ≤ target ≤ 10^5","solution":"from typing import List def minItems(nums: List[int], target: int) -> int: # Initialize a dp array with a value larger than possible, we\'ll use target + 1 dp = [float(\'inf\')] * (target + 1) dp[0] = 0 # Base case, 0 items needed to reach target 0 # Process each target value from 1 to target inclusive for t in range(1, target + 1): for num in nums: if t >= num: dp[t] = min(dp[t], dp[t - num] + 1) # If dp[target] is still infinity, it means it\'s not possible to reach \'target\' return dp[target] if dp[target] != float(\'inf\') else -1"},{"question":"Given two sorted arrays of size m and n respectively, you need to find the element that would be at the k-th position of the final sorted array formed by merging the given arrays. Write a function `findKthElement` that takes in two sorted arrays `arr1`, `arr2` and an integer `k`, and returns the element that would be at the k-th position in the merged sorted array. If there is no such element, return -1. Example 1: Input: arr1 = [2, 3, 6, 7, 9] arr2 = [1, 4, 8, 10] k = 5 Output: 6 Example 2: Input: arr1 = [100, 112, 256, 349, 770] arr2 = [72, 86, 113, 119, 265, 445, 892] k = 7 Output: 256 Example 3: Input: arr1 = [1, 2, 3, 4] arr2 = [5, 6, 7, 8] k = 10 Output: -1 Your Task: You do not need to read input or print anything. Your task is to complete the function `findKthElement(arr1, arr2, k)` which takes the sorted arrays arr1[], arr2[] and integer k as inputs and returns the k-th element in the merged sorted array. Expected Time Complexity: O(log(min(m, n)) + k) Expected Auxiliary Space: O(1) Constraints: 1 <= m, n <= 10^6 1 <= arr1[i], arr2[j] <= 10^9 1 <= k <= m + n","solution":"def findKthElement(arr1, arr2, k): Returns the element that would be at the k-th position of the final sorted array formed by merging the given arrays. Parameters: arr1 (List[int]): first sorted array arr2 (List[int]): second sorted array k (int): position to find in the merged sorted array Returns: int: element at k-th position or -1 if no such element exists m, n = len(arr1), len(arr2) if k > m + n: return -1 i = j = 0 while i < m and j < n: if k == 1: return min(arr1[i], arr2[j]) if arr1[i] < arr2[j]: if k > 1: k -= 1 i += 1 else: return arr1[i] else: if k > 1: k -= 1 j += 1 else: return arr2[j] while i < m: if k == 1: return arr1[i] i += 1 k -= 1 while j < n: if k == 1: return arr2[j] j += 1 k -= 1 return -1"},{"question":"Create a function `parse_date` that converts a given date string in `YYYY-MM-DD` format to a more human-readable format, `Month Day, Year`. The function should handle: - Valid date strings in `YYYY-MM-DD` format. - Ensuring the month is printed in full (e.g., January, February, etc.). - Stripping any leading zeroes from the day. For example: ```python parse_date(\\"2023-09-05\\") # => \\"September 5, 2023\\" parse_date(\\"1980-01-01\\") # => \\"January 1, 1980\\" parse_date(\\"1996-12-15\\") # => \\"December 15, 1996\\" parse_date(\\"2020-03-22\\") # => \\"March 22, 2020\\" ``` Notes: - The input string will always be in a valid `YYYY-MM-DD` format. - Ensure that the function works for leap years as well.","solution":"from datetime import datetime def parse_date(date_string): Converts a date string from \'YYYY-MM-DD\' format to \'Month Day, Year\'. Args: date_string (str): A date string in the format \'YYYY-MM-DD\'. Returns: str: The date in \'Month Day, Year\' format. date_obj = datetime.strptime(date_string, \\"%Y-%m-%d\\") return date_obj.strftime(\\"%B %d, %Y\\").lstrip(\\"0\\").replace(\\" 0\\", \\" \\")"},{"question":"You need to create a function named `flattenList`. Write your function so that given a nested list of integers, it returns a single, flat list with all the integers in the nested list. Your function should handle lists nested to an arbitrary depth. Examples of inputs and subsequent outputs: ``` [[1, 2, [3, 4]], [5, 6], 7] -> [1, 2, 3, 4, 5, 6, 7] [[[1], 2], 3] -> [1, 2, 3] [1, [2, [3, 4, [5, 6]]]] -> [1, 2, 3, 4, 5, 6] ```","solution":"def flattenList(nested_list): Flattens a nested list of integers into a single list of integers. Args: nested_list (list): A nested list of integers. Returns: list: A flattened list of integers. if not isinstance(nested_list, list): return [nested_list] flat_list = [] for element in nested_list: flat_list.extend(flattenList(element)) return flat_list"},{"question":"You are given an integer array `height` of length `N` that represents heights of buildings from left to right. There is a mechanism that can flood cells of height `h` or less, where `h` is an integer value provided as input. You are allowed to flood only cells of height `h` or less and can connect the flooded cells horizontally to form pools of water. Your task is to find the maximum number of pools of water you can create using the given mechanism. A pool is defined as a contiguous sequence of cells where all cells in the sequence have been flooded, and it is formed by cells connected horizontally. Constraints: * 1 leq N leq 500,000 * 1 leq height[i] leq 10^9 * 1 leq h leq 10^9 Input The input is given from Standard Input in the following format: ``` N h height1 height2 ... heightN ``` Output Print the maximum number of pools of water that can be created. Examples Input: ``` 7 5 1 2 6 5 3 4 7 ``` Output: ``` 2 ``` Input: ``` 5 3 4 2 3 1 5 ``` Output: ``` 1 ```","solution":"def max_pools_of_water(N, h, height): Returns the maximum number of pools of water that can be formed. :param N: int - The number of buildings :param h: int - The height threshold for flooding :param height: List[int] - The heights of the buildings :return: int - The maximum number of pools of water pools = 0 i = 0 while i < N: if height[i] <= h: pools += 1 while i < N and height[i] <= h: i += 1 i += 1 return pools"},{"question":"Samantha is planning a series of events for her conference. She has n events planned, each with a start time and an end time. However, she realizes that having multiple overlapping events could confuse the attendees. So, she decides to determine the maximum number of non-overlapping events she can effectively manage. Your task is to help Samantha find out the maximum number of non-overlapping events she can schedule. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of events. The next n lines each contain two integers s_i and e_i (0 le s_i < e_i le 10^9) — the start time and end time of the i-th event. -----Output----- Print a single integer — the maximum number of non-overlapping events. -----Examples----- Input 3 1 3 2 5 4 6 Output 2 Input 4 1 2 2 3 3 4 1 3 Output 3 -----Note----- In the first example, Samantha can select the events [1, 3] and [4, 6] which do not overlap. In the second example, Samantha can select the events [1, 2], [2, 3], and [3, 4], which do not overlap.","solution":"def max_non_overlapping_events(events): Determines the maximum number of non-overlapping events that can be scheduled. Args: events: List of tuples, where each tuple contains two integers representing the start and end times of an event. Returns: int: The maximum number of non-overlapping events. if not events: return 0 # Sort events based on their ending time events.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given two strings `A` and `B` of equal length consisting of lowercase English letters. You need to find the minimum number of operations required to transform string `A` into string `B`. In one operation, you can choose any character in `A` and change it to any other lowercase English letter. Write a function `min_operations_to_transform` that takes two strings `A` and `B` and returns the minimum number of operations required. -----Input----- - The function takes two strings `A` and `B` as input. - Both strings have the same length `n` (1 ≤ n ≤ 100,000). -----Output----- - Return an integer representing the minimum number of operations required to transform `A` into `B`. -----Examples----- Input A = \\"abc\\" B = \\"def\\" Output 3 Input A = \\"aaaa\\" B = \\"bbbb\\" Output 4 Input A = \\"ab\\" B = \\"ba\\" Output 2 -----Explanation----- In the first example, you need to perform 3 operations to change each character in `A` to the corresponding character in `B`. In the second example, you need to change all four \'a\'s to \'b\'s. In the third example, you need to change the first \'a\' to \'b\' and the second \'b\' to \'a\'. Therefore, the output is 2.","solution":"def min_operations_to_transform(A, B): Returns the minimum number of operations required to transform string A into string B. # Initialize the operation count to 0 operations = 0 # Iterate through both strings and count mismatches for i in range(len(A)): if A[i] != B[i]: operations += 1 return operations"},{"question":"A company is developing an advanced text editor that automatically generates properly nested files for various programming languages. To ensure the accuracy of generated files, they need a function to validate the nesting of brackets in a given string. The brackets can include round `()`, curly `{}`, and square `[]`. You are tasked with writing a function that takes a string as input and returns whether the brackets within the string are correctly nested and matched. The string can also contain other characters, but they should be ignored while checking for bracket balance. ----Input---- The input consists of a single string s with a length between 1 and 10^5. ----Output---- Output \\"YES\\" if all the brackets in the string are correctly nested and balanced. Otherwise, output \\"NO\\". ----Example---- Input ``` {[()]} ``` Output ``` YES ``` Input ``` {[(])} ``` Output ``` NO ``` Input ``` abc{[a(c)]} ``` Output ``` YES ``` Input ``` abc{[a(c]}] ``` Output ``` NO ``` ----Note---- In the first example, the string contains correctly nested and balanced brackets. In the second example, the ordering of brackets is incorrect for proper nested balance. In the third example, the brackets are correctly nested and the non-bracket characters are ignored. In the fourth example, the string contains improperly nested brackets.","solution":"def validate_brackets(s): Checks if all the brackets in the given string are correctly nested and balanced. :param s: Input string containing brackets and other characters. :return: \'YES\' if the brackets are properly balanced, otherwise \'NO\'. # Stack to keep track of opening brackets stack = [] # Dictionary to hold matching pairs of brackets mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping.values(): # If the character is an opening bracket, push it to the stack stack.append(char) elif char in mapping.keys(): # If the character is a closing bracket, check for corresponding opening bracket if stack == [] or mapping[char] != stack.pop(): return \\"NO\\" # If stack is empty, all brackets are balanced return \\"YES\\" if not stack else \\"NO\\""},{"question":"Given a set of positive integers, determine if there are two distinct numbers in the set such that one is a multiple of the other. If such a pair exists, output \\"YES\\", otherwise, output \\"NO\\". ------ Input: ------ The first line of input contains a single integer N (2 ≤ N ≤ 10^{5}) — the number of elements in the set. The second line contains N positive integers separated by spaces, each of them not exceeding 10^9. ------ Output: ------ Output \\"YES\\" if there are two distinct numbers in the set such that one is a multiple of the other. Otherwise, print \\"NO\\". ----- Sample Input 1 ------ 5 10 5 3 15 20 ----- Sample Output 1 ------ YES ----- Sample Explanation 1 ------ There are multiple pairs in this set where one number is a multiple of another, for example: (10, 5) and (15, 3). ----- Sample Input 2 ------ 4 7 11 13 17 ----- Sample Output 2 ------ NO ----- Sample Explanation 2 ------ No number in this set is a multiple of another.","solution":"def has_multiple_pair(nums): Determines if there are two distinct numbers in the set such that one is a multiple of the other. Args: nums (list of int): List of positive integers. Returns: str: \\"YES\\" if there is such a pair, otherwise \\"NO\\". num_set = set(nums) for num in nums: for factor in range(1, int(num**0.5)+1): if num % factor == 0: if (factor in num_set and factor != num) or (num // factor in num_set and num // factor != num): return \\"YES\\" return \\"NO\\""},{"question":"Matrix Transpose The transpose of a matrix is a new matrix whose rows are the columns of the original. For example, the transpose of the matrix: [ left[ begin{array}{ccc} 1 & 2 & 3 4 & 5 & 6 end{array} right] ] is: [ left[ begin{array}{cc} 1 & 4 2 & 5 3 & 6 end{array} right] ] Task You are given a matrix of size NXmbox{P} (N rows and P columns). Your task is to find the transpose of this matrix. Input Format The first line contains two space-separated integers N and mbox{P}. The next N lines contain P space-separated integers each, representing the rows of the matrix. Output Format Print the transpose of the matrix. Sample Input 2 3 1 2 3 4 5 6 Sample Output 1 4 2 5 3 6","solution":"def transpose(matrix): Returns the transpose of the given matrix. return list(map(list, zip(*matrix))) def read_matrix(): Reads the matrix from standard input. import sys input = sys.stdin.read data = input().split() N, P = int(data[0]), int(data[1]) matrix = [] for i in range(N): row = list(map(int, data[2 + i * P:2 + (i + 1) * P])) matrix.append(row) return matrix def print_matrix(matrix): Prints the matrix to standard output. for row in matrix: print(\\" \\".join(map(str, row))) # Uncomment for testing the function read_matrix and print_matrix # matrix = read_matrix() # transposed_matrix = transpose(matrix) # print_matrix(transposed_matrix)"},{"question":"You are given a list of integers. Your task is to find the second-largest distinct integer in the list. If there is no such second-largest number, print `-1`. -----Input----- The first line contains a single integer T, the number of test cases. The description of T test cases follows: The first line of each test case contains an integer N, the number of elements in the list. The second line contains N space-separated integers representing the elements of the list. -----Output----- For each test case, print the second-largest distinct integer in the list. If there is no such number, print `-1`. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - -10^9 ≤ elements of the list ≤ 10^9 - 1 ≤ sum of N over all test cases ≤ 10^6 -----Example----- Input: 3 5 2 3 6 6 5 3 4 4 4 4 8 3 3 4 Output: 5 -1 4 -----Explanation----- Example case 1. The distinct numbers in the list are [2, 3, 5, 6]. The second-largest distinct number is 5. Example case 2. All numbers are the same, so there is no second-largest distinct number. The output is -1. Example case 3. The distinct numbers in the list are [3, 4, 8]. The second-largest distinct number is 4.","solution":"def find_second_largest(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] array = test_cases[i][1] # Create a set to keep only distinct elements distinct_elements = set(array) # If there are fewer than two distinct elements, we can\'t have a second-largest if len(distinct_elements) < 2: results.append(-1) else: # Sort the distinct elements in descending order sorted_elements = sorted(distinct_elements, reverse=True) # The second element is the second-largest results.append(sorted_elements[1]) return results"},{"question":"A village has N houses arranged in a straight line. Each house i has a certain number of resources Ri available. A disaster is predicted, and it is necessary to ensure that each house has a minimum quantity of resources Rmin to survive. You are allowed to reallocate resources from one house to another, but resources can only be moved to an adjacent house because of lack of transportation facilities. Write a function `distribute_resources` to determine if it is possible to ensure that all houses have at least Rmin resources given the constraint of moving resources only to adjacent houses. If it is possible, return \\"YES\\". Otherwise, return \\"NO\\". Example 1: Input: N = 5, Rmin = 10 resources = [8, 12, 14, 9, 7] Output: YES Explanation: - Move 2 resources from house 3 to house 4. - Final distribution: [8, 12, 12, 10, 7] - Each house has at least Rmin resources. Example 2: Input: N = 4, Rmin = 5 resources = [6, 2, 5, 3] Output: NO Explanation: - Not possible to ensure all houses have 5 resources just by moving adjacent resources. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `distribute_resources` that takes an integer N, an integer Rmin, and an array of integers `resources` as inputs, and returns a string \\"YES\\" or \\"NO\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ resources[i], Rmin ≤ 10^4","solution":"def distribute_resources(N, Rmin, resources): Determines if it is possible to ensure all houses have at least Rmin resources just by moving resources to adjacent houses. Parameters: N (int): Number of houses Rmin (int): Minimum required resources for each house resources (list of int): List of resources available at each house Returns: str: \'YES\' or \'NO\' based on whether it is possible to distribute as required. resources_to_reallocate = 0 for i in range(N): if resources[i] < Rmin: if i == 0: resources_needed = Rmin - resources[i] else: if resources[i-1] + resources_to_reallocate >= Rmin: resources_needed = Rmin - resources[i] resources_to_reallocate -= resources_needed else: return \\"NO\\" else: resources_to_reallocate += resources[i] - Rmin return \\"YES\\""},{"question":"Tom and Jerry are playing a game with an integer array. Initially they have an array of integers a consisting of n elements. Tom and Jerry take alternating turns, with Tom going first. During each turn, the current player must choose an element from the array, remove it, and then subtract it from every remaining element in the array. For example, if a = [4, 2, 6, 3] and a player removes the element 2, the array becomes [2, 4, 1] after subtraction (i.e., [4-2, 6-2, 3-2]). If a player cannot make any move (i.e., the array is empty), they lose. Both players play optimally. You need to determine if Tom can win. -----Input----- First line contains one integer t (1 le t le 1000) — the number of test cases. Each test case contains two lines: - The first line contains one integer n (1 le n le 100) — the number of elements in the array. - The second line contains n integers a_i (1 le a_i le 1000) — the elements of the array. -----Output----- For each test case print the answer in a single line. If Tom can win print YES in any register. Otherwise print NO in any register. -----Example----- Input 3 3 2 4 6 4 1 2 3 4 1 10 Output YES NO YES -----Note----- In the first test case, Tom can remove the number 2, making the array [2, 4]. Then Jerry must remove 4, leaving the array [2]. Tom then removes 2, making the array empty. Jerry is unable to make a move. In the second test case, optimal play will always lead to Jerry making the final removal, leaving the array empty for Tom\'s turn. In the third test case, Tom removes 10 in his first and only move, leaving the array empty for Jerry.","solution":"def tom_wins(t, test_cases): results = [] for case in test_cases: n, a = case a.sort() if n % 2 == 1 or a[0] != 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Suppose you have an array representing the scores of various students in a test. You need to find the largest contiguous subarray sum and the length of that subarray. If there is a tie between subarrays having the same maximum sum, choose the one with the smallest length. If there is still a tie, choose the one which starts at the smallest index. Write a function that takes an integer array and returns the largest contiguous subarray sum along with the length of that subarray. Input The first line of the input contains a single integer T, the number of test cases. T test cases follow. Each test case contains: - An integer N, the number of elements in the array. - An array of N integers, representing the scores. Output For each test case, print the largest contiguous subarray sum and the length of that subarray in a new line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^4 ≤ scores[i] ≤ 10^4 SAMPLE INPUT 2 5 1 -2 3 4 -1 3 1 2 3 SAMPLE OUTPUT 7 2 6 3","solution":"def max_subarray_sum_and_length(arr): Returns the largest contiguous subarray sum and the length of that subarray. If there is a tie between subarrays having the same maximum sum, choose the one with the smallest length. If there is still a tie, choose the one which starts at the smallest index. max_sum = current_sum = arr[0] start = end = temp_start = 0 length = 1 # Length of the subarray for i in range(1, len(arr)): if current_sum + arr[i] > arr[i]: current_sum += arr[i] else: current_sum = arr[i] temp_start = i if (current_sum > max_sum) or (current_sum == max_sum and (i - temp_start + 1 < length)): max_sum = current_sum start = temp_start end = i length = end - start + 1 return max_sum, length def process_tests(T, test_cases): Process all test cases and return the results in a list. results = [] for N, arr in test_cases: max_sum, length = max_subarray_sum_and_length(arr) results.append((max_sum, length)) return results"},{"question":"You are given a grid with `R` rows and `C` columns, representing a garden. Each cell in the grid contains a flower or is empty. You are also given a series of instructions to either plant or remove flowers. Your task is to determine the number of flowers in the garden after executing all the instructions. The instructions are given as a string of characters, where each character represents one of the following instructions: - `P`: Plant a flower in the next available empty cell (traverse the grid from left to right, top to bottom). - `R`: Remove a flower from the last planted cell. - `.`: Do nothing (ignore this character). The grid is initially empty (no flowers planted). When planting a flower, you place it in the first empty cell you encounter, traversing the grid from left to right, top to bottom. When removing a flower, you remove it from the last cell where a flower was planted. If no flowers can be removed because none have been planted, you do nothing. Note: Ignore any instructions that attempt to plant a flower when no empty cell is available or remove a flower when no flower is planted. Write a function that processes the instructions and returns the number of flowers in the garden after all instructions have been executed. # Input - First line contains two integers, `R` and `C` (1 ≤ R, C ≤ 1000) representing the number of rows and columns in the grid. - Second line contains a string of length `L` (1 ≤ L ≤ 10000) consisting of characters `\'P\'`, `\'R\'`, and `\'.\'`, representing the series of instructions. # Output - A single integer representing the number of flowers in the garden after all instructions have been carried out. # Example Input ``` 3 3 P.PP.RP..P.RP ``` Output ``` 4 ``` # Explanation - The grid has 3 rows and 3 columns, initially all empty. - Execute instructions: ``` P -> Plant at (0, 0) . -> Do nothing P -> Plant at (0, 1) P -> Plant at (0, 2) R -> Remove from (0, 2) P -> Plant at (0, 2) . -> Do nothing . -> Do nothing P -> Plant at (1, 0) R -> Remove from (1, 0) P -> Plant at (1, 0) --> Grid now: F F F F . . . . . P -> Plant at (1, 1) ``` At the end of this sequence, the garden contains 4 flowers. Hence, the output is `4`.","solution":"def count_flowers_after_instructions(R, C, instructions): garden = [[0 for _ in range(C)] for _ in range(R)] total_flowers = 0 planted_order = [] for instruction in instructions: if instruction == \'P\': planted = False for i in range(R): for j in range(C): if garden[i][j] == 0: garden[i][j] = 1 planted_order.append((i, j)) total_flowers += 1 planted = True break if planted: break elif instruction == \'R\': if planted_order: i, j = planted_order.pop() garden[i][j] = 0 total_flowers -= 1 # Ignore \'.\' character as it does nothing return total_flowers"},{"question":"Given an array of integers, you need to find the sum of the numbers in the given range for multiple queries. First line contains two integers N denoting length of the array and Q denoting number of queries. Second line of input contains N space-separated integers representing the array. Each of the next Q lines contains two integers l and r, representing the indices (inclusive, 0-based) of the range for which you need to calculate the sum. Output Q lines, each line containing the sum of the elements in the specified range for each query. SAMPLE INPUT 5 3 1 2 3 4 5 0 2 1 3 0 4 SAMPLE OUTPUT 6 9 15","solution":"def range_sum(N, Q, array, queries): For each query, calculate the sum of elements in the given range. Parameters: N : int : Length of the array Q : int : Number of queries array : list : List of integers queries : list : List of tuples, each containing two integers l and r Returns: list : List of sums for each query results = [] for l, r in queries: sum_in_range = sum(array[l:r+1]) results.append(sum_in_range) return results"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB Given a series of number pairs where each pair consists of a base number and an exponent, your task is to calculate the sum of all results from raising each base number to its corresponding exponent. However, numbers can be very large, hence you are required to return the final result modulo 10^9 + 7. # Input - The first line contains a single integer `N`, the number of pairs `(1 ≤ N ≤ 10^6)`. - The next `N` lines each contain two integers `b` and `e` (`0 ≤ b ≤ 10^6`, `0 ≤ e ≤ 10^6`), representing a base and an exponent respectively. # Output - Output a single integer, the sum of all base-exponent results modulo `10^9 + 7`. # Example **Input:** 3 2 3 3 2 1 1000000 **Output:** 11 # Explanation - 2^3 = 8 - 3^2 = 9 - 1^1000000 = 1 The sum is 8 + 9 + 1 = 18, and `18 % (10^9 + 7)` is 18. # Note: Due to the potential size of the resulting numbers, ensure that calculations avoid overflow by using modular arithmetic where appropriate. You may assume that built-in functions handle large integers efficiently.","solution":"def sum_of_powers(N, pairs): MOD = 10**9 + 7 total_sum = 0 for b, e in pairs: total_sum = (total_sum + pow(b, e, MOD)) % MOD return total_sum"},{"question":"Given a positive integer N, generate all the perfect squares that are less than or equal to N. A perfect square is a number that is the product of an integer with itself. Example 1: Input: N = 10 Output: 1 4 9 Explanation: 1 is the product of 1 and 1. 4 is the product of 2 and 2. 9 is the product of 3 and 3. Example 2: Input: N = 25 Output: 1 4 9 16 25 Explanation: 1 is the product of 1 and 1. 4 is the product of 2 and 2. 9 is the product of 3 and 3. 16 is the product of 4 and 4. 25 is the product of 5 and 5. Your Task: You don\'t need to read input. Your task is to complete the function perfectSquares() which takes an integer N as input parameter and returns a list of integers. Expected Time Complexity: O(√N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{5}","solution":"def perfect_squares(N): Returns a list of all perfect squares less than or equal to N. result = [] i = 1 while i * i <= N: result.append(i * i) i += 1 return result"},{"question":"You are given an array of n positive integers. For each integer in the array, determine if it is a perfect square. A number is a perfect square if there exists an integer k such that x = k * k. Input The first line contains a single positive integer n (1 ≤ n ≤ 10^5), representing the number of elements in the array. The next line contains n space-separated integers xi (1 ≤ xi ≤ 10^12). Output Print n lines: the i-th line should contain \\"YES\\" (without the quotes), if number xi is a perfect square, and \\"NO\\" (without the quotes), if it isn\'t. Examples Input 4 1 2 4 7 Output YES NO YES NO Note The given test has four numbers. The first number 1 is a perfect square (1*1), thus the answer for this number is \\"YES\\". The second number 2 is not a perfect square, hence the answer is \\"NO\\". The third number 4 is a perfect square (2*2), thus the answer is \\"YES\\". The fourth number 7 is not a perfect square, hence the answer is \\"NO\\".","solution":"import math def is_perfect_square(n, nums): Determines if each number in the list nums is a perfect square. :param n: int - The number of elements in the array. :param nums: list - A list of n integers to check for perfect squares. :return: list - A list of strings \\"YES\\" or \\"NO\\" for each number in nums indicating if it is a perfect square. results = [] for num in nums: sqrt_num = int(math.isqrt(num)) if sqrt_num * sqrt_num == num: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an integer array A of length N. You are required to process Q queries on this array. Each query can be one of two types: 1. Update the value of the element at a specified index. 2. Find the sum of elements in a specified range. The array is initially filled with all zeros. Each query is described as follows: - If it is an update query, it is given in the format `1 i x`, which means you should set the element at index `i` to the value `x`. - If it is a sum query, it is given in the format `2 l r`, which means you should return the sum of the elements from index `l` to index `r`, inclusive. Write a program to process all the queries and output the results of sum queries. ------ Input Format ------ - The first line contains two integers N and Q, denoting the initial length of the array and the number of queries. - The next Q lines contain the queries, each query is given in the format described above. ------ Output Format ------ For each sum query, output the sum of the elements in the specified range. ------ Constraints ------ 1. (1 leq N leq 10^5) 2. (1 leq Q leq 10^5) 3. (0 leq i < N) 4. (0 leq l leq r < N) 5. (0 leq x leq 10^9) ------ Sample Input 1 ------ 5 5 1 0 5 1 2 3 2 0 4 1 1 2 2 0 2 ------ Sample Output 1 ------ 8 10 ------ Explanation 1 ------ - Initially, the array is [0, 0, 0, 0, 0]. - After the first query `1 0 5`, the array becomes [5, 0, 0, 0, 0]. - After the second query `1 2 3`, the array becomes [5, 0, 3, 0, 0]. - The third query `2 0 4` asks for the sum from index 0 to 4, inclusive. The sum is (5 + 0 + 3 + 0 + 0 = 8). - After the fourth query `1 1 2`, the array becomes [5, 2, 3, 0, 0]. - The fifth query `2 0 2` asks for the sum from index 0 to 2, inclusive. The sum is (5 + 2 + 3 = 10).","solution":"def process_queries(N, Q, queries): arr = [0] * N results = [] for query in queries: q_type = query[0] if q_type == 1: i, x = query[1], query[2] arr[i] = x elif q_type == 2: l, r = query[1], query[2] # Calculate sum in range [l, r] results.append(sum(arr[l:r+1])) return results"},{"question":"A garden store keeps an inventory of flowers and their prices. The store occasionally holds sales where specific flower types are discounted by a percentage. You need to help the store calculate the new price of the flowers after applying the discounts. The store has the following rules: - If a flower type is on sale, its price is reduced by the given percentage. - If a flower type is not on sale, its price remains the same. - The discounted price should be rounded to two decimal places. Write a function, `apply_discounts`, that takes in a dictionary of flower types and their prices, and a dictionary of flower types with their discount percentages. The function should return a new dictionary with the updated prices after applying the discounts. **Example Input:** ```py original_prices = { \'rose\': 2.5, \'tulip\': 1.75, \'daisy\': 1.0, \'sunflower\': 3.0 } discounts = { \'rose\': 20, \'sunflower\': 10 } ``` **Example Output:** ```py { \'rose\': 2.0, \'tulip\': 1.75, \'daisy\': 1.0, \'sunflower\': 2.7 } ```","solution":"def apply_discounts(original_prices, discounts): Apply discounts to the original prices of flowers. Args: original_prices (dict): A dictionary containing the flower types and their original prices. discounts (dict): A dictionary containing the flower types and their discount percentages. Returns: dict: A dictionary containing the flower types and their prices after applying the discounts. updated_prices = {} for flower, price in original_prices.items(): if flower in discounts: discount_percentage = discounts[flower] discounted_price = price * (1 - discount_percentage / 100) updated_prices[flower] = round(discounted_price, 2) else: updated_prices[flower] = price return updated_prices"},{"question":"Create a program that reads a series of words and determines if each word can be rearranged to form a palindrome. A string is a palindrome if it reads the same from the front and back, such as \\"abba\\" or \\"racecar\\". For the string to be rearranged into a palindrome, at most one character can have an odd number of occurrences; all other characters must have an even number of occurrences. Input The input consists of multiple datasets. Each dataset is a single word composed of only lowercase letters, and the length of each word does not exceed 100 characters. The input ends when the word \\"END\\" is encountered. Output For each dataset, print \\"YES\\" if the word can be rearranged to form a palindrome, and \\"NO\\" if it cannot be. Do not print any output for the word \\"END\\". Example Input civic ivicc hello END Output YES YES NO","solution":"def can_form_palindrome(word): Determines if a word can be rearranged to form a palindrome. # Count occurrences of each character char_count = {} for char in word: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check the number of characters with an odd number of occurrences odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # A word can form a palindrome if it has at most one character with an odd occurrence return odd_count <= 1 def process_words(words): Processes a series of words to determine if each can be rearranged to form a palindrome. Stops processing when the word \\"END\\" is encountered. results = [] for word in words: if word == \\"END\\": break if can_form_palindrome(word): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a sequence of N integers. You need to find two non-overlapping contiguous subarrays of this sequence such that their sum is maximized. To clarify, a subarray is a contiguous part of an array. Subarrays [a, b] and [c, d] (given a < b < c < d) are considered non-overlapping. The task is to determine the maximum possible sum of these two non-overlapping subarrays. Input format The first line of the input contains an integer N, representing the number of elements in the sequence. The second line contains N space-separated integers, representing the elements of the sequence. Output format Print a single integer, the maximum sum of the two non-overlapping subarrays. Constraints 1 ≤ N ≤ 1,000, -1,000 ≤ a[i] ≤ 1,000 SAMPLE INPUT 6 1 2 -1 2 3 -5 SAMPLE OUTPUT 8 Explanation: The two subarrays [1, 2] and [2, 3] have sums 3 and 5 respectively. Therefore, the maximum sum is 3 + 5 = 8.","solution":"def max_two_non_overlapping_subarrays(arr): n = len(arr) if n < 2: return 0 max_ending_here = [0] * n max_starting_here = [0] * n max_sum = arr[0] current_sum = arr[0] for i in range(1, n): current_sum = max(arr[i], current_sum + arr[i]) max_sum = max(max_sum, current_sum) max_ending_here[i] = max_sum max_sum = arr[-1] current_sum = arr[-1] for i in range(n - 2, -1, -1): current_sum = max(arr[i], current_sum + arr[i]) max_sum = max(max_sum, current_sum) max_starting_here[i] = max_sum max_combined_sum = float(\'-inf\') for i in range(n - 1): max_combined_sum = max(max_combined_sum, max_ending_here[i] + max_starting_here[i + 1]) return max_combined_sum"},{"question":"You are given an inventory of items represented as a list of positive integers, where each integer corresponds to the weight of an item. The items need to be grouped into boxes such that the sum of the weights in each box does not exceed a given weight limit. Your task is to determine the minimum number of boxes required to pack all the items. -----Input----- The first line of the input contains two integers separated by a space: the number of items n (1 le n le 10^5) and the weight limit for each box w (1 le w le 10^4). The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^4), where a_i is the weight of the i-th item. -----Output----- Print a single integer — the minimum number of boxes required. -----Examples----- Input 5 10 5 5 5 5 5 Output 3 Input 4 10 2 3 5 7 Output 2 -----Note----- In the first example, you can pack the items into three boxes: [5, 5], [5, 5], and [5]. In the second example, you can pack the items into two boxes: [2, 7] and [3, 5].","solution":"def min_boxes_required(n, w, items): items.sort(reverse=True) count = 0 left, right = 0, n - 1 while left <= right: if items[left] + items[right] <= w: right -= 1 left += 1 count += 1 return count"},{"question":"A digital organizer application allows users to create note lists. Each note list contains an array of strings where each string represents a note. The application aims to summarize the most common words across all note lists to provide insights to the users. Given a list of note lists, find out the k most frequent words across all the notes combined. Complete the `mostFrequentWords` function in the editor below. `mostFrequentWords` has the following parameters: - `List[List[str]] noteLists`: a list of lists where each inner list contains strings representing notes. - `int k`: the number of most frequent words to return. The function should return a list of strings representing the k most frequent words. If there are ties (words with the same frequency), return the words in lexical order. # Input Format - The first line contains an integer m, the number of note lists. - The next m lines each contain an integer n which represents the number of notes in that list, followed by n strings (the notes). - The last line contains the integer k. # Constraints - 1 leq m leq 50 - 1 leq n leq 100 - 1 leq |note|; leq 100 - Each note consists of only lowercase Latin letters (\'a\'-\'z\'). - 1 leq k leq 100 # Sample Input ``` 3 3 note1 is good 2 note2 very good 3 note3 is very good 2 ``` # Sample Output ``` [\\"good\\", \\"very\\"] ``` # Explanation Combining all notes, the words and their frequencies are: - is: 2 - good: 3 - very: 2 - note1: 1 - note2: 1 - note3: 1 The k = 2 most frequent words are \\"good\\" and \\"very\\". Therefore, the output is [\\"good\\", \\"very\\"].","solution":"from collections import Counter from itertools import chain def mostFrequentWords(noteLists, k): Returns the k most frequent words across all note lists. Args: noteLists: List of lists; each inner list contains strings representing notes. k: Integer; the number of most frequent words to return. Returns: List of strings representing the k most frequent words. # Flatten the list of note lists into a single list of words all_words = list(chain.from_iterable(noteLists)) # Count the frequency of each word word_count = Counter(all_words) # Sort the words by frequency (descending) and then by lexical order if frequencies are the same sorted_words = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) # Extract only the words for top k frequent words top_k_words = [word for word, _ in sorted_words[:k]] return top_k_words"},{"question":"Sarah is a coding enthusiast who loves solving problems. One day she encounters a coding challenge that involves prime number manipulation. The problem statement goes as follows: You are given a list of n integers. For each integer in the list, determine whether it is prime or not. If the number is prime, Sarah should replace it with the next prime number. If the number is not prime, it should remain unchanged. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Can you help Sarah write a program to solve this problem? -----Input----- The first line contains an integer n (1 leq n leq 1000) — the number of integers in the list. The second line contains n space-separated integers a_1, a_2, dots, a_n (1 leq a_i leq 10^6). -----Output----- Print n space-separated integers where each prime number a_i in the input list is replaced with the next prime number, and each non-prime number remains unchanged. -----Examples----- Input 5 2 3 4 5 6 Output 3 5 4 7 6 Input 4 17 23 15 19 Output 19 29 15 23 -----Note----- In the first example: - 2 is a prime, and the next prime number is 3. - 3 is a prime, and the next prime number is 5. - 4 is not a prime, so it remains 4. - 5 is a prime, and the next prime number is 7. - 6 is not a prime, so it remains 6. In the second example: - 17 is a prime, and the next prime number is 19. - 23 is a prime, and the next prime number is 29. - 15 is not a prime, so it remains 15. - 19 is a prime, and the next prime number is 23.","solution":"def is_prime(number): Check if a number is prime. if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True def next_prime(n): Find the next prime number greater than the given number n. prime_candidate = n + 1 while not is_prime(prime_candidate): prime_candidate += 1 return prime_candidate def replace_primes_with_next(arr): Replace each prime number in the list with the next prime number. result = [] for num in arr: if is_prime(num): result.append(next_prime(num)) else: result.append(num) return result def process_numbers(n, numbers): Process the list of numbers to replace each prime with the next prime. return replace_primes_with_next(numbers)"},{"question":"Task: Merge Two Sorted Linked Lists Related Kata If you enjoyed working on this problem, you might also like to try [Merge K Sorted Linked Lists](https://www.codewars.com/kata/merge-k-sorted-linked-lists) for a more advanced challenge. Preloaded Preloaded for you is a class, struct, or derived data type `Node` used to construct linked lists in this Kata: ```python class Node(): def __init__(self, data, next=None): self.data = data self.next = next ``` Prerequisites This Kata assumes that you are already familiar with the idea of a linked list and the merge operation for two sorted lists. If you do not know what they are, you may want to read up on these articles: - [Linked list](https://en.wikipedia.org/wiki/Linked_list) - [Merge operation](https://en.wikipedia.org/wiki/Merge_sort#Merge) Specifically, the linked lists this Kata is referring to are **singly linked lists**, where the value of a specific node is stored in its `data` property, and the reference to the next node is stored in its `next` property. Task Implement a function `merge_sorted_lists` which takes in two arguments `list1` and `list2` representing the heads of two sorted linked lists and returns the head of a new linked list which is the result of merging `list1` and `list2` into a single sorted list. The function should follow these rules: - Merge two sorted lists into a single sorted list. - If either of the input lists is `None`, the function should return a reference to the other list. - The merged list should preserve the sort order. - Nodes in the merged list should point to the original nodes from the input lists (i.e., do not create new nodes). Example: Given the following input: ```python list1 = Node(1, Node(3, Node(5))) list2 = Node(2, Node(4, Node(6))) ``` Your function should output a merged linked list represented as: ```python Node(1, Node(2, Node(3, Node(4, Node(5, Node(6)))))) ``` Notes: - For simplicity, the `Node` class is only used for non-negative integer values. - Both input linked lists are already sorted in ascending order.","solution":"class Node(): def __init__(self, data, next=None): self.data = data self.next = next def merge_sorted_lists(list1, list2): # Create a dummy node to act as the start of the merged list dummy = Node(0) current = dummy # Traverse both lists and merge them in sorted order while list1 and list2: if list1.data < list2.data: current.next = list1 list1 = list1.next else: current.next = list2 list2 = list2.next current = current.next # Append any remaining nodes from either list if list1: current.next = list1 if list2: current.next = list2 return dummy.next"},{"question":"Write a function that takes a string `s` as input, which represents a sentence containing words separated by spaces. Your task is to return the same sentence with each word reversed in order. For instance, if the input string is \\"hello world\\", the output should be \\"olleh dlrow\\". Input: A single line string `s` containing one or more words. Output: A single line string with each word reversed while maintaining their original order in the sentence. SAMPLE INPUT The quick brown fox SAMPLE OUTPUT ehT kciuq nworb xof","solution":"def reverse_words_in_sentence(s): Returns the sentence with each word reversed in order but maintaining their original position. Args: s (str): Input string containing one or more words. Returns: str: Sentence with each word reversed. words = s.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Jon is fond of organizing his book collection. He arranges his books in a row on the bookshelf, and each book has a unique title. Jon wants to quickly find the position of a book by its title in the shelf arrangement. Write a program that helps Jon to find the position of a book given its title. The book titles on Jon\'s shelf and the queries are case-sensitive. ------ Input ------ The first line of input contains N, the number of books on Jon\'s shelf. The next N lines contain one book title each, representing the book arrangement from left to right. Followed by these, there is an integer Q, the number of queries. The next Q lines contain one book title each, representing the book Jon is looking for. ------ Output ------ For each query, output the position (1-based index) of the book on Jon\'s shelf. If the book is not found, output \\"Not found\\". ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ Q ≤ 50 1 ≤ length of any book title ≤ 100 ----- Sample Input ------ 5 The Great Gatsby 1984 To Kill a Mockingbird The Catcher in the Rye Pride and Prejudice 3 1984 The Lord of the Rings Pride and Prejudice ----- Sample Output ------ 2 Not found 5","solution":"def find_book_positions(book_titles, queries): Returns the positions of book titles as per the queries. If a book is not found, returns \\"Not found\\" for that query. positions = {title: index + 1 for index, title in enumerate(book_titles)} result = [positions.get(query, \\"Not found\\") for query in queries] return result"},{"question":"You are organizing a movie night and have a list of friends who can join only if their favorite genre is available. Write a function that determines which friends can join based on the availability of their favorite genre. Your function should accept two inputs: 1. A list of tuples where each tuple consists of a friend\'s name and their favorite genre. 2. A list of available genres. The function should return a list of names of friends who can join the movie night. For example: ``` friends = [(\\"Alice\\", \\"Comedy\\"), (\\"Bob\\", \\"Action\\"), (\\"Charlie\\", \\"Horror\\"), (\\"Daisy\\", \\"Comedy\\")] available_genres = [\\"Comedy\\", \\"Drama\\"] ``` In this case, the function should return: ``` [\\"Alice\\", \\"Daisy\\"] ``` If no friends can join or if an invalid input is provided, return an empty list.","solution":"def friends_can_join(friends, available_genres): Determines which friends can join based on the availability of their favorite genre. Arguments: friends -- a list of tuples where each tuple consists of a friend\'s name and their favorite genre available_genres -- a list of available genres Returns: A list of names of friends who can join the movie night based on the availability of their favorite genre. if not isinstance(friends, list) or not isinstance(available_genres, list): return [] for friend in friends: if not isinstance(friend, tuple) or len(friend) != 2 or not isinstance(friend[0], str) or not isinstance(friend[1], str): return [] return [name for name, genre in friends if genre in available_genres]"},{"question":"You are given an n x n chessboard and a knight. Your task is to determine if it is possible for the knight to visit all the cells of the chessboard exactly once, starting from any given position. The knight moves in an \\"L\\" shape: two squares in one direction and then one square perpendicular to that, or one square in one direction and then two squares perpendicular to that. Given these movements, the knight has up to 8 possible moves from any given position on the chessboard. Your goal is to determine if there exists at least one position on the chessboard from which the knight can start and visit every cell exactly once. Input The input consists of: - A single integer n (1 ≤ n ≤ 10^3) — the size of the chessboard. Output Output a single line containing \\"YES\\" if there exists at least one starting position on the chessboard from which the knight can visit every cell exactly once. Otherwise, output \\"NO\\". Examples Input 5 Output YES Input 2 Output NO Notes In the first example, with n=5, it is possible for a knight to visit every cell exactly once starting from at least one position on the chessboard. In the second example, with n=2, it is impossible for the knight to visit every cell exactly once due to the limited size of the board and the knight\'s movement constraints.","solution":"def can_knight_visit_all_cells(n): Determines if a knight can visit all cells on an n x n chessboard exactly once. Arguments: n -- size of the chessboard (n x n) Returns: \\"YES\\" if it\'s possible, otherwise \\"NO\\" if n == 1: return \\"YES\\" if n < 5 and n != 1: return \\"NO\\" if n == 5 or n == 6: return \\"YES\\" if n % 2 == 0: return \\"YES\\" else: return \\"YES\\" # This logic is based on heuristic findings for sizes larger than the trivial cases."},{"question":"You\'ve been hired to create a software system that helps manage a community library. The library has multiple collections of books, each collection focusing on a different subject. Each book has a unique identifier, a title, and a physical location in the library. For the purpose of this problem, we will only be focusing on the storage management of the books. You need to write a program that determines if a requested book is present in the correct collection based on a given identifier, title, and subject code. The subject code is an integer from 1 to 5. Each code corresponds to a specific subject area. Your task is to validate if the given book should belong to the specified subject collection or not. Input The first line contains an integer id (0 ≤ id ≤ 106) — the book identifier. The second line contains the title of the book. The third line contains an integer from 1 to 5 — the subject code of the book. The fourth line contains an integer from 1 to 5 — the expected subject code based on the book\'s title. Output Print \\"Correct\\" if the subject code matches the expected subject code, otherwise print \\"Incorrect\\". Examples Input 123456 Advanced Mathematics 4 4 Output Correct Input 789101 Introduction to Biology 1 2 Output Incorrect","solution":"def check_subject_code(book_id, title, subject_code, expected_subject_code): Determines if the book belongs to the correct subject collection based on the subject code. Args: book_id (int): The book identifier. title (str): The title of the book. subject_code (int): The subject code of the book. expected_subject_code (int): The expected subject code based on the book\'s title. Returns: str: \'Correct\' if the subject code matches the expected subject code, otherwise \'Incorrect\'. if subject_code == expected_subject_code: return \\"Correct\\" else: return \\"Incorrect\\""},{"question":"# Task You are given an integer `n`. You need to construct a permutation of numbers from `1` to `n` (`1` to `n` means all numbers between `1` and `n` inclusive) such that the absolute difference between each pair of adjacent numbers is unique. If there are multiple permutations that satisfy this condition, return any one of them. If no such permutation exists, return an empty list. # Example For `n = 4`, the output could be `[2, 4, 1, 3]`. - The differences are: `|2-4|=2`, `|4-1|=3`, `|1-3|=2`. This doesn\'t satisfy the condition, - Another possible permutation could be `[3, 1, 4, 2]`. - The differences are: `|3-1|=2`, `|1-4|=3`, `|4-2|=2`. This doesn\'t satisfy the condition either. For `n = 5`, one possible output could be `[1, 3, 5, 2, 4]`. - The differences are: `|1-3|=2`, `|3-5|=2`, `|5-2|=3`, `|2-4|=2`. This doesn\'t satisfy the condition. - Another possible permutation could be `[1, 4, 2, 5, 3]`. - The differences are: `|1-4|=3`, `|4-2|=2`, `|2-5|=3`, `|5-3|=2`. This satisfies the condition. # Input/Output - `[input]` integer `n` The given integer `n` (1 <= `n` <= 10^5) - `[output]` a list of integers The permutation of numbers from `1` to `n` such that the absolute difference between adjacent numbers is unique or an empty list if no such permutation exists.","solution":"def construct_unique_diff_permutation(n): Constructs a permutation of numbers from 1 to n such that each pair of adjacent numbers has a unique absolute difference. If such a permutation is not possible, returns an empty list. if n == 1: return [1] elif n == 2: return [] # Use a simple pattern to construct the permutation result = [] if n % 2 == 0: # For even n, split into two parts and alternate mid = n // 2 for i in range(1, mid + 1): result.append(i) result.append(mid + i) else: # For odd n, split into two parts and alternate, then handle the middle element mid = n // 2 for i in range(1, mid + 1): result.append(i) result.append(mid + 1 + i) result.append(mid + 1) return result"},{"question":"Jack is creating a secret message by replacing each letter of a given word with a corresponding letter that is near it in the alphabet. He does this by shifting each letter forward by a specified number of places. If the shift moves past `z`, it wraps around to the start of the alphabet. Write a function `encode_secret(message: str, shift: int) -> str` that takes a string containing a lowercase word `message` and an integer `shift`, and returns a new string where each letter in the original message is replaced by a letter that is `shift` positions later in the alphabet. The function should only shift alphabetic characters and preserve the case. If a character in the message is non-alphabetic, it should remain unchanged in the output. For example: - With an input of `message = \\"hello\\"` and `shift = 3`, the output should be `khoor`. - With an input of `message = \\"abc-z\\"` and `shift = 2`, the output should be `cde-b`. **SAMPLE INPUT** ``` hello 3 ``` **SAMPLE OUTPUT** ``` khoor ```","solution":"def encode_secret(message: str, shift: int) -> str: Encodes the given message by shifting each alphabetic character forward by the specified number of places in the alphabet. Non-alphabetic characters remain unchanged. :param message: The string containing the message to encode. :param shift: The number of positions to shift each alphabetic character. :return: The encoded message. encoded_message = [] for char in message: if \'a\' <= char <= \'z\': new_pos = (ord(char) - ord(\'a\') + shift) % 26 encoded_message.append(chr(ord(\'a\') + new_pos)) elif \'A\' <= char <= \'Z\': new_pos = (ord(char) - ord(\'A\') + shift) % 26 encoded_message.append(chr(ord(\'A\') + new_pos)) else: encoded_message.append(char) return \'\'.join(encoded_message)"},{"question":"Harry and Sally love playing with numbers. Their favorite game is to transform numbers in a unique way. The rule of the game is simple: For any given number N, they check whether it is possible to split the number into two prime numbers whose sum is equal to N. If possible, they print the two prime numbers, otherwise, they print \\"NO\\". Input: The first line of the data set for this problem is an integer that represents the number of test cases T. Each of the next T lines contains an integer N. Output: For each test case, output two prime numbers whose sum is N, or \\"NO\\" if it isn\'t possible. Constraints: - T is between 1 and 50 inclusive. - N is between 4 and 100 inclusive. - It is guaranteed that there exists at least one pair of prime numbers that sum up to N. SAMPLE INPUT 3 10 16 27 SAMPLE OUTPUT 3 7 3 13 NO","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def find_prime_pair(N): Find two prime numbers whose sum is N. for i in range(2, N): if is_prime(i) and is_prime(N - i): return i, N - i return \\"NO\\" def prime_pairs(T, cases): For each test case, output two prime numbers whose sum is N, or \\"NO\\" if it isn\'t possible. results = [] for N in cases: pair = find_prime_pair(N) if pair == \\"NO\\": results.append(\\"NO\\") else: results.append(f\\"{pair[0]} {pair[1]}\\") return results"},{"question":"You are given an integer array representing a sequence of stock prices on subsequent days. Your task is to determine the maximum possible profit that can be made by buying and selling the stock exactly once. If no profit can be made, return 0. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of days. The second line contains n integers where the i-th integer is the stock price on the i-th day (1 ≤ price ≤ 105). Output Output a single integer — the maximum possible profit. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Note In the first example, the best strategy is to buy on day 2 (price = 1) and sell on day 5 (price = 6), yielding a profit of 6 - 1 = 5. In the second example, no profitable transaction can be made.","solution":"def max_profit(prices): Returns the maximum profit possible from buying and selling the stock once. If no profit is possible, returns 0. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Given a string, determine the number of words that are palindromes. A palindrome is a word that reads the same backward as forward. Words will be separated by spaces and punctuation should be ignored. ``` For example: count_palindromes(\\"A man, a plan, a canal, Panama\\") = 3 because \\"A\\", \\"a\\", and \\"a\\" are palindromes. Additional example: count_palindromes(\\"Madam Arora teaches malayalam\\") = 3 because \\"Madam\\", \\"Arora\\", and \\"malayalam\\" are palindromes. ``` The input will be a string of alphabets and punctuation only, with words separated by spaces. Convert all characters to lowercase before checking for palindromes.","solution":"import re def count_palindromes(s): Count the number of palindromic words in the given string. Convert all words to lowercase and ignore punctuation. Args: s (str): Input string Returns: int: Number of palindromic words # Convert to lowercase s = s.lower() # Remove punctuation s = re.sub(r\'[^ws]\', \'\', s) # Split into words words = s.split() # Check for palindromes count = sum(1 for word in words if word == word[::-1]) return count"},{"question":"You are given an array of positive integers where each integer represents the height of a building in a row of buildings. You can imagine an observer at certain point standing outside the buildings and looking towards them. The buildings may cast shadows on one another, and the observer can only see certain buildings in the row. The observer stands at the extreme ends of the row (either at the beginning or at the end). Your task is to determine the number of buildings that are visible from both ends. Define the visibility as follows: - A building at index `i` in the row is visible from the left end if there is no building taller than it before index `i`. - Similarly, a building at index `i` is visible from the right end if there is no building taller than it after index `i`. Given the heights of the buildings in an array, return the count of buildings that are visible from both the left end and the right end. Example: Input: buildings = [4, 2, 3, 1, 5, 3] Output: 3 Explanation: From the left end, the buildings visible are: [4, 5]. From the right end, the buildings visible are: [5, 3]. The buildings visible from both ends are: [5]. Note: 1. The length of the array buildings will be in the range [1, 10^4]. 2. The height of each building will be in the range [1, 10^4].","solution":"def count_visible_buildings(buildings): Returns the count of buildings that are visible from both ends. Arguments: buildings -- a list of integers representing the heights of the buildings. Returns: Integer count of buildings visible from both the left and right ends. n = len(buildings) if n == 0: return 0 # Calculate visible buildings from left end max_left = 0 visible_from_left = set() for i in range(n): if buildings[i] > max_left: visible_from_left.add(buildings[i]) max_left = buildings[i] # Calculate visible buildings from right end max_right = 0 visible_from_right = set() for i in range(n-1, -1, -1): if buildings[i] > max_right: visible_from_right.add(buildings[i]) max_right = buildings[i] # Find common visible buildings common_buildings = visible_from_left.intersection(visible_from_right) return len(common_buildings)"},{"question":"You are given an array of positive integers. You need to find the maximal length of such a contiguous subarray where the elements are in non-decreasing order when read from left to right. -----Input----- The first line of the input contains an integer n (1 le n le 10^5) — the length of the array. The second line contains n space-separated positive integers — the elements of the array. -----Output----- Print a single integer — the length of the longest non-decreasing contiguous subarray. -----Examples----- Input 6 2 2 1 3 4 1 Output 3 Input 5 5 3 4 4 2 Output 3 Input 8 1 2 3 4 5 6 7 8 Output 8 Input 7 1 2 3 2 2 3 4 Output 4","solution":"def longest_non_decreasing_subarray_length(arr): Returns the length of the longest non-decreasing contiguous subarray. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] >= arr[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"A highly secure building has multiple security layers to prevent unauthorized access. Each security layer is represented as a node in a graph, and there are bidirectional security corridors (edges) connecting these layers. However, some of these corridors might be temporarily disabled for maintenance, and thus will not be functional. You, as a security engineer, are tasked with determining whether there exists a path between two specified layers (nodes) given the current state of the corridors. If a path exists, you need to provide the shortest path (minimum number of corridors to pass through). Input First line contains two integers n and m, denoting the number of security layers (nodes) and the number of corridors (edges) respectively. Next m lines contain two integers u and v each, representing a corridor between layer u and layer v. The next line contains two integers s and t, representing the start layer and target layer respectively. Output If there is no path between the start and target layers, print \\"NO PATH\\". If a path exists, print the minimum number of corridors that need to be passed through from the start layer to the target layer. Note: 1 ≤ n, m ≤ 1000 SAMPLE INPUT 5 6 1 2 2 3 3 4 4 5 1 3 2 5 1 5 SAMPLE OUTPUT 2 Explanation: The shortest path from layer 1 to layer 5 is 1 -> 3 -> 5, passing through 2 corridors.","solution":"from collections import deque def shortest_path(n, m, corridors, s, t): def bfs(start, target): visited = [False] * (n + 1) queue = deque([(start, 0)]) # (current layer, distance) visited[start] = True while queue: current, distance = queue.popleft() if current == target: return distance for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) return -1 graph = [[] for _ in range(n + 1)] for u, v in corridors: graph[u].append(v) graph[v].append(u) result = bfs(s, t) return result if result != -1 else \\"NO PATH\\""},{"question":"# Task You have a grid of size `m x n` consisting of non-negative integers. The task is to find the grid cell with the maximum value and return its coordinates in the form (row, col). If there are multiple cells with the same maximum value, return the coordinates of the one which comes first in row-major order (i.e., row by row from top to bottom, and within a row from left to right). # Example For the grid `[[3, 1, 2], [6, 5, 4], [7, 8, 9]]`, the result should be `(2, 2)`. For the grid `[[10, 10], [10, 10]]`, the result should be `(0, 0)`. For the grid `[[1, 0, 0], [0, 1, 1]]`, the result should be `(0, 0)`. # Input/Output - `[input]` 2D list of integers `grid` A grid of size `m x n` where `1 ≤ m, n ≤ 1000` and `0 ≤ grid[i][j] ≤ 10^6`. - `[output]` a tuple of two integers Returns the coordinates of the cell containing the largest value in the form `(row, col)`. If multiple max values exist, return the one that appears first in row-major order.","solution":"def find_max_value_cell(grid): Returns the coordinates of the cell containing the maximum value. If multiple max values exist, returns the one that appears first in row-major order. max_value = -1 max_coords = (0, 0) for i in range(len(grid)): for j in range(len(grid[i])): if grid[i][j] > max_value: max_value = grid[i][j] max_coords = (i, j) return max_coords"},{"question":"Write a function that takes a string as input and returns `True` if the string is an anagram of a palindrome, and `False` otherwise. A palindrome is a word that reads the same forward and backward, such as \\"racecar\\" or \\"level\\". An anagram is a rearrangement of letters to form another word. For example, \\"civic\\" and \\"ivicc\\" are anagrams of \\"civic\\", a palindrome. # Constraints: - The input string will only contain lowercase alphabetic characters. - The input string\'s length will not exceed 1000 characters. # Example: ``` Input: \\"carrace\\" Output: True Explanation: \\"carrace\\" can be rearranged to form \\"racecar\\", which is a palindrome. Input: \\"hello\\" Output: False Explanation: There is no arrangement of \\"hello\\" that is a palindrome. ``` # Note: - Consider edge cases such as empty strings or strings with only one character.","solution":"def is_anagram_of_palindrome(s): Returns True if the input string s is an anagram of a palindrome, False otherwise. from collections import Counter count = Counter(s) # Count how many characters have an odd occurrence odd_occurrences = sum(1 for freq in count.values() if freq % 2 != 0) # For the string to be an anagram of a palindrome: # It can have at most one character with an odd count return odd_occurrences <= 1"},{"question":"You are given a string representing a mathematical expression containing integers, addition (+), subtraction (-), multiplication (*), and division (/) operators. The expression may also contain parentheses to specify the order of operations. Write a function that evaluates the given expression and returns the result. Examples ``` \\"3 + 2 * 2\\" -> 7 \\" 3/2 \\" -> 1.5 \\" 3+5 / 2 \\" -> 5.5 \\"(2+6)/2\\" -> 4 ``` Note: The string contains only non-negative integers, +, -, *, / operators, and empty spaces. The integer division should truncate toward zero. The valid input does not contain any invalid parentheses and is always balanced.","solution":"def evaluate_expression(expression: str) -> float: Evaluates a mathematical expression string containing integers, +, -, *, / operators, and parentheses. The function handles the correct order of operations. Args: expression (str): A string representing the mathematical expression. Returns: float: The result of the evaluated expression. def operate(op_stack, num_stack): operator = op_stack.pop() b = num_stack.pop() a = num_stack.pop() if operator == \'+\': num_stack.append(a + b) elif operator == \'-\': num_stack.append(a - b) elif operator == \'*\': num_stack.append(a * b) elif operator == \'/\': num_stack.append(int(a / b)) # Integer division truncates towards zero num_stack, op_stack = [], [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 num_stack.append(num) i -= 1 elif expression[i] in \'+-*/\': while (op_stack and op_stack[-1] in \'*/\' and expression[i] in \'+-\') or (op_stack and op_stack[-1] in \'*/\' and expression[i] in \'*/\'): operate(op_stack, num_stack) op_stack.append(expression[i]) elif expression[i] == \'(\': op_stack.append(expression[i]) elif expression[i] == \')\': while op_stack and op_stack[-1] != \'(\': operate(op_stack, num_stack) op_stack.pop() # Remove the \'(\' from stack i += 1 while op_stack: operate(op_stack, num_stack) return num_stack[0] # Examples and edge cases print(evaluate_expression(\\"3 + 2 * 2\\")) # Output: 7 print(evaluate_expression(\\" 3/2 \\")) # Output: 1 print(evaluate_expression(\\" 3+5 / 2 \\")) # Output: 5 print(evaluate_expression(\\"(2+6)/2\\")) # Output: 4 print(evaluate_expression(\\"1 + 1\\")) # Output: 2 print(evaluate_expression(\\"1 + (2 * 3)\\")) # Output: 7 print(evaluate_expression(\\"10 - (3 - 2)\\")) # Output: 9"},{"question":"You are given a list of integers representing the heights of candles. Your task is to determine how many candles have the maximum height. -----Input----- The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. The description of test cases follows. For each test case, the first line contains an integer n (1 leq n leq 10^5) — the number of candles. The next line contains n space-separated integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9) — the heights of the candles. It is guaranteed that the sum of n across all test cases does not exceed 10^6. -----Output----- For each test case, output the number of candles that have the maximum height. -----Examples----- Input 3 4 3 2 1 3 3 1 1 1 5 5 5 5 5 5 Output 2 3 5 -----Note----- In the first test case, the maximum height is 3. There are 2 candles with this height. In the second test case, the maximum height is 1. All 3 candles have this height. In the third test case, the maximum height is 5. All 5 candles have this height.","solution":"def max_height_candles_count(test_cases): Takes a list of test cases where each test case is a tuple containing the number of candles and a list of candle heights. Returns a list with the count of candles that have the maximum height for each test case. results = [] for case in test_cases: n, heights = case max_height = max(heights) count = heights.count(max_height) results.append(count) return results"},{"question":"Write a function that takes two inputs: 1) a list of integers 2) a target integer The function should return a list of all unique pairs of numbers that sum up to the target integer. The pairs should be sorted in ascending order based on their first element. If there are multiple pairs with the same first element, sort based on the second element. If no such pairs exist, return an empty list. Example: numbers = [1, 2, 3, 4, 5] target = 5 It should return: [(1, 4), (2, 3)] Example: numbers = [1, -2, 3, 0, 2, 5, -1] target = 1 It should return: [(-2, 3), (-1, 2), (0, 1)] Note: Each element in the input list can only be used once in each pair. The input list may contain both positive and negative integers.","solution":"def find_pairs(numbers, target): Finds all unique pairs of numbers in the given list that sum up to the target number. Each pair is sorted, and the list of pairs is also sorted based on the first element, and then on the second element if needed. pairs = set() seen = set() for number in numbers: complement = target - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return sorted(pairs)"},{"question":"Given a positive integer n, the task is to reverse the digits of n and return the reversed number. If the reversed integer overflows the bounds of a 32-bit signed integer, return 0. Example 1: Input: n = 123 Output: 321 Explanation: After reversing the digits, we get 321, which is within the 32-bit integer range. Example 2: Input: n = -456 Output: -654 Explanation: After reversing the digits and the negative sign, we get -654, which is within the 32-bit integer range. Example 3: Input: n = 1534236469 Output: 0 Explanation: After reversing the digits, we get 9646324351, which exceeds the 32-bit integer range, so we return 0. Your Task: The task is to complete the function reverseInteger() that takes an integer n as a parameter and returns the reversed integer. Expected Time Complexity: O(log n). Expected Auxiliary Space: O(1). Constraints: -2^{31} <= n <= 2^{31}-1","solution":"def reverseInteger(n): Reverses the digits of the integer n and returns the reversed number. If the reversed integer overflows the bounds of a 32-bit signed integer, returns 0. sign = -1 if n < 0 else 1 n = abs(n) reversed_n = 0 while n != 0: reversed_n = reversed_n * 10 + n % 10 n = n // 10 reversed_n *= sign # Check for 32-bit signed integer overflow if reversed_n < -2**31 or reversed_n > 2**31 - 1: return 0 return reversed_n"},{"question":"In a museum, there are several exhibits arranged in a straight line. Each exhibit can have different levels of attraction, represented by an integer. The museum curator wants to increase the total attraction value of all exhibits by merging some of them. When two adjacent exhibits are merged, their attraction values are added together to form a new exhibit. The curator can merge any number of times, but the resulting total attraction value must be maximized while keeping the total number of exhibits minimal. The attraction value of the resulting arrangement can be calculated as the sum of the final merged exhibits. You are given the attraction values of the exhibits as an array. Write a program to determine the maximum total attraction value after the optimal merging. -----Input----- The first line of the input contains an integer n (1 le n le 5000), the number of exhibits in the museum. The second line contains n space-separated integers a_1, a_2, dots, a_n (1 le a_i le 1000), representing the attraction values of the exhibits. -----Output----- Output one integer, the maximum total attraction value after the optimal merging. -----Examples----- Sample Input 1: 5 1 3 5 2 4 Sample Output 1: 15 Sample Input 2: 3 10 20 30 Sample Output 2: 60","solution":"def max_total_attraction_value(n, exhibits): exhibits_sum = sum(exhibits) return exhibits_sum"},{"question":"A software development company is evaluating its logging system. They’ve noticed that their log files contain numerous redundant log entries, taking up unnecessary space. As a result, they’ve decided to write a function that will compress the log entries. The logs are recorded as a sequence of entries, each represented by a string, where each entry is either an independent action or the same as the previous entry. Your task is to implement a function `compress_logs(log_entries)` that takes a list of log entries and returns a compressed version of the log entries. The compression works by replacing consecutive identical entries with a single instance of that entry followed by the count of repetitions if the count is greater than one. For example, if the log entries are: [\\"INFO\\", \\"INFO\\", \\"WARN\\", \\"ERROR\\", \\"ERROR\\", \\"ERROR\\"] The compressed version would be: [\\"INFO2\\", \\"WARN\\", \\"ERROR3\\"] Input - A list `log_entries` containing n strings (1 <= n <= 100000). Each string represents a log entry consisting of only uppercase letters (\'A\'-\'Z\'). Output - A list of strings representing the compressed log entries. Examples Input [\\"INFO\\", \\"INFO\\", \\"WARN\\", \\"ERROR\\", \\"ERROR\\", \\"ERROR\\"] Output [\\"INFO2\\", \\"WARN\\", \\"ERROR3\\"] Input [\\"START\\", \\"START\\", \\"START\\", \\"STOP\\"] Output [\\"START3\\", \\"STOP\\"] Input [\\"DEBUG\\"] Output [\\"DEBUG\\"] Function Signature ```python def compress_logs(log_entries: List[str]) -> List[str]: # Your code here ```","solution":"def compress_logs(log_entries): if not log_entries: return [] compressed_logs = [] prev_entry = log_entries[0] count = 1 for entry in log_entries[1:]: if entry == prev_entry: count += 1 else: if count > 1: compressed_logs.append(f\\"{prev_entry}{count}\\") else: compressed_logs.append(prev_entry) prev_entry = entry count = 1 if count > 1: compressed_logs.append(f\\"{prev_entry}{count}\\") else: compressed_logs.append(prev_entry) return compressed_logs"},{"question":"You are given a string S of length N consisting of lowercase letters and a character C. Your task is to find the length of the shortest substring of S that contains at least K occurrences of the character C. Example 1: Input: N = 10 K = 2 S = \\"abcabcabcx\\" C = \\"a\\" Output: 4 Explanation: The shortest substring that contains at least 2 \'a\' characters is \\"abca\\" which has a length of 4. Example 2: Input: N = 7 K = 1 S = \\"abcdefg\\" C = \\"f\\" Output: 1 Explanation: The shortest substring that contains at least 1 \'f\' character is \\"f\\" which has a length of 1. Example 3: Input: N = 8 K = 3 S = \\"aaaabaaa\\" C = \\"a\\" Output: 3 Explanation: The shortest substring that contains at least 3 \'a\' characters is \\"aaa\\" which has a length of 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function shortestSubstring() which takes three integers N, K, a string S, and a character C as input parameters, and returns an integer representing the length of the shortest substring that contains at least K occurrences of the character C. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^6 1 <= K <= 10^6 S consists of lowercase English letters C is a lowercase English letter","solution":"def shortestSubstring(N, K, S, C): if S.count(C) < K: return -1 left = 0 count = 0 min_length = float(\'inf\') for right in range(N): if S[right] == C: count += 1 while count >= K: min_length = min(min_length, right - left + 1) if S[left] == C: count -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Given two integers a and b, you are required to find the LCM (Least Common Multiple) of all the integers from a to b (inclusive). The LCM of two integers x and y is the smallest positive integer that is divisible by both x and y. To make the problem slightly easier, you can directly use the GCD (Greatest Common Divisor) function, which is available in most programming languages. Since LCM can be very large, output the result modulo 1000000007 (109 + 7). Input The first line contains two space-separated integers a and b (1 ≤ a ≤ b ≤ 1000). Output Print a single integer — the LCM of all integers from a to b, modulo 1000000007 (109 + 7). Examples Input 1 3 Output 6 Input 4 6 Output 60 Input 2 5 Output 60 Input 7 7 Output 7","solution":"from math import gcd from functools import reduce MOD = 1000000007 def lcm(a, b): return a * b // gcd(a, b) def lcm_range(a, b): if a == b: return a % MOD return reduce(lambda x, y: lcm(x, y) % MOD, range(a, b + 1)) # Example test cases print(lcm_range(1, 3)) # Output: 6 print(lcm_range(4, 6)) # Output: 60 print(lcm_range(2, 5)) # Output: 60 print(lcm_range(7, 7)) # Output: 7"},{"question":"Given a set of transactions made by customers during a sale on an e-commerce website, write a program to identify the best-selling product based on the income generated. Each transaction includes the product ID, quantity sold, and the price per unit. Your program should read multiple datasets, process them, and output the product ID of the best-selling product for each dataset. If there are multiple best-selling products with the same income, output the one with the smallest product ID. Input The input consists of multiple datasets. Each dataset is given in the following format: The first line contains a single integer n (1 ≤ n ≤ 100) representing the number of transactions within this dataset. Each of the next n lines contains three integers p, q, r (1 ≤ p ≤ 1000, 1 ≤ q ≤ 100, 1 ≤ r ≤ 1000), where p is the product ID, q is the quantity sold, and r is the price per unit. The datasets are separated by a blank line. The input ends with EOF. Output For each dataset, print the product ID of the best-selling product based on the income generated. If there are multiple products with the same income, print the smallest product ID. Example Input 4 1 2 50 2 1 100 1 1 100 3 2 30 3 4 5 10 5 2 25 4 1 100 Output 1 4","solution":"def best_selling_products(dataset): from collections import defaultdict results = [] for transactions in dataset: incomes = defaultdict(int) for p, q, r in transactions: incomes[p] += q * r best_selling_id = -1 max_income = -1 for product_id, income in incomes.items(): if income > max_income or (income == max_income and product_id < best_selling_id): max_income = income best_selling_id = product_id results.append(best_selling_id) return results def parse_input(input_data): datasets = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): if lines[i].strip() == \\"\\": i += 1 continue n = int(lines[i].strip()) i += 1 transactions = [] for _ in range(n): p, q, r = map(int, lines[i].strip().split()) transactions.append((p, q, r)) i += 1 datasets.append(transactions) return datasets"},{"question":"Given an array of integers, your task is to determine whether it is possible to partition the array into two subsets such that the sum of elements in both subsets is equal. If such a partition is possible, return True, otherwise return False. # Function Signature ```python def can_partition(nums: List[int]) -> bool: ``` # Input - `nums`: A list of positive integers (1 <= nums[i] <= 100) # Output - Return `True` if the array can be partitioned into two subsets with equal sums, otherwise return `False`. # Example ```python assert can_partition([1, 5, 11, 5]) == True assert can_partition([1, 2, 3, 5]) == False ``` # Note - Assume the array has at least one element and its length does not exceed 200. - The problem is a well-known variation of the \\"Partition Problem\\" which is a subset of the \\"Knapsack Problem\\". Efficient algorithms include dynamic programming approaches.","solution":"from typing import List def can_partition(nums: List[int]) -> bool: Determines if an array can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition into equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Using dynamic programming to check if there\'s a subset with sum equal to target dp = [[False] * (target + 1) for _ in range(n + 1)] # There\'s always a subset with sum 0 (empty subset) for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if nums[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]] else: dp[i][j] = dp[i - 1][j] return dp[n][target]"},{"question":"You are given a grid of size N x M filled with both \'0\'s and \'1\'s. Your task is to find the maximum area of a rectangle (maximum number of 1\'s) formed by continuous 1\'s in the grid. A rectangle within the grid of \'1\'s means that all the cells inside this rectangle are also \'1\'s. If there are no \'1\'s in the grid, the maximum area is 0. Write a function `maximalRectangle` that takes as input a list of strings representing the grid. Each string in the list represents a row in the grid. The function should return the area of the largest rectangle composed entirely of \'1\'s in the given grid. # Function signature: ```python def maximalRectangle(grid: List[str]) -> int: # Your code here ``` # Input: - A list of strings where each string consists of only \'0\'s and \'1\'s, representing a row in the grid. - Example: `[\\"10100\\", \\"10111\\", \\"11111\\", \\"10010\\"]` # Output: - An integer representing the area of the largest rectangle composed entirely of \'1\'s. # Example: ```python assert maximalRectangle([\\"10100\\", \\"10111\\", \\"11111\\", \\"10010\\"]) == 6 assert maximalRectangle([\\"01101\\", \\"11010\\", \\"01110\\", \\"11110\\", \\"11111\\", \\"00000\\"]) == 9 ``` # Constraints: - The input grid will have at most 200 rows, each with a maximum length of 200. - Each character in a string will be either \'0\' or \'1\'. # Note: - Use efficient algorithms to achieve the result, as the grid can be quite large. - Consider transforming the grid problem into a largest rectangle in histogram problem for better performance.","solution":"from typing import List def maximalRectangle(grid: List[str]) -> int: if not grid: return 0 def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) # Add a sentinel value to pop all remaining heights for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * width) stack.append(i) return max_area max_area = 0 height = [0] * len(grid[0]) for row in grid: for i in range(len(row)): height[i] = height[i] + 1 if row[i] == \'1\' else 0 max_area = max(max_area, largestRectangleArea(height)) return max_area"},{"question":"You are given an m x n integer matrix `grid`. You are initially positioned at the top-left corner (i.e., `grid[0][0]`). Write a function to find the minimum sum path to reach the bottom-right corner (i.e., `grid[m-1][n-1]`). You can only move down or right at any point in time. Example 1: ``` Input: grid = [[1,3,1],[1,5,1],[4,2,1]] Output: 7 Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum. ``` Example 2: ``` Input: grid = [[1,2,3],[4,5,6]] Output: 12 Explanation: Because the path 1 → 2 → 3 → 6 minimizes the sum. ``` Note: - `m == grid.length` - `n == grid[i].length` - `1 <= m, n <= 200` - `0 <= grid[i][j] <= 100`","solution":"def minPathSum(grid): Returns the minimum sum path to reach the bottom-right corner from the top-left corner in the given m x n integer matrix grid. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Initialize the top-left corner of the grid for i in range(1, m): grid[i][0] += grid[i-1][0] for j in range(1, n): grid[0][j] += grid[0][j-1] # Compute the minimum path sum for the rest of the grid for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i-1][j], grid[i][j-1]) return grid[m-1][n-1]"},{"question":"You\'ll be given a list of three strings, each containing a hyphen (`\\"-\\"`) and a semicolon (`\\";\\"`) somewhere in the middle, but not at the beginning or end. Your task is to return a list of three strings where the parts after the hyphen and before the semicolon are reversed for each string. Examples ``` [\\"abc-def;ghi\\", \\"jkl-mno;pqr\\", \\"stu-vwx;yz\\"] --> [\\"abc-ghi;def\\", \\"jkl-pqr;mno\\", \\"stu-yz;vwx\\"] [\\"12-34;56\\", \\"78-90;12\\", \\"34-56;78\\"] --> [\\"12-56;34\\", \\"78-12;90\\", \\"34-78;56\\"] ```","solution":"def reverse_middle_parts(strings): Given a list of three strings, each containing a hyphen (\\"-\\") and a semicolon (\\";\\") somewhere in the middle, return a list of strings where the parts after the hyphen and before the semicolon are reversed for each string. result = [] for string in strings: hyphen_index = string.index(\'-\') semicolon_index = string.index(\';\') part1 = string[:hyphen_index + 1] # include the hyphen part2 = string[semicolon_index:] # include the semicolon middle_part = string[hyphen_index + 1:semicolon_index] new_string = part1 + part2[1:] + \';\' + middle_part result.append(new_string) return result"},{"question":"function sumPrimes() is provided to return the sum of all prime numbers that are less than a given non-negative integer n. Code def is_prime(num): if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def sumPrimes(n): total = 0 for i in range(2, n): if is_prime(i): total += i return total Task You are given a non-negative integer mbox{N}. Your task is to find the sum of all prime numbers less than mbox{N} and return this sum. Input Format A single integer mbox{N}. Constraints 0 leq N < 10^6 Output Format The sum of all prime numbers less than mbox{N}. Sample Input 10 Sample Output 17 Explanation The prime numbers less than 10 are: 2, 3, 5, 7. Their sum is 2 + 3 + 5 + 7 = 17.","solution":"def is_prime(num): if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def sumPrimes(n): total = 0 for i in range(2, n): if is_prime(i): total += i return total"},{"question":"Given an array Arr[] of size N and an integer K. Your task is to find the maximum number of unique elements in any subarray of size K in the given array. If no such subarray exists, return 0. Example 1: Input: N = 6, K = 3 Arr[] = {4, 1, 1, 2, 3, 4} Output: 3 Explanation: The subarrays of size 3 are [4, 1, 1], [1, 1, 2], [1, 2, 3], [2, 3, 4]. Unique elements count for each subarray are 2, 2, 3, and 3 respectively. The maximum count is 3. Example 2: Input: N = 7, K = 4 Arr[] = {1, 2, 2, 1, 3, 4, 1} Output: 4 Explanation: The subarrays of size 4 are [1, 2, 2, 1], [2, 2, 1, 3], [2, 1, 3, 4], [1, 3, 4, 1]. Unique elements count for each subarray are 2, 3, 4, and 3 respectively. The maximum count is 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxUniqueSubarray() which takes the N (number of elements in array Arr), Arr[], and K (size of the subarray), and returns the maximum number of unique elements in any subarray of size K. Expected Time Complexity: O(N) Expected Auxiliary Space: O(K) Constraints: 1 ≤ N ≤ 1e5 1 ≤ K ≤ N 1 ≤ Arr[i] ≤ 1e9","solution":"def maxUniqueSubarray(N, Arr, K): Returns the maximum number of unique elements in any subarray of size K. if K > N: return 0 from collections import defaultdict current_count = defaultdict(int) unique_count = 0 max_unique = 0 for i in range(K): if current_count[Arr[i]] == 0: unique_count += 1 current_count[Arr[i]] += 1 max_unique = unique_count for i in range(K, N): if current_count[Arr[i - K]] == 1: unique_count -= 1 current_count[Arr[i - K]] -= 1 if current_count[Arr[i]] == 0: unique_count += 1 current_count[Arr[i]] += 1 if unique_count > max_unique: max_unique = unique_count return max_unique"},{"question":"Given a string S consisting of only the characters \'a\', \'b\', and \'c\', you need to determine if it is possible to rearrange the string such that no two adjacent characters are the same. Example 1: Input: S = \\"aab\\" Output: 1 Explanation: The string can be rearranged as \\"aba\\". Example 2: Input: S = \\"aa\\" Output: 0 Explanation: There is no possible way to rearrange the string to satisfy the condition. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canRearrange() which takes a string S as input and returns 1 if it\'s possible to rearrange the string, or 0 otherwise. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= |S| <= 100000","solution":"from collections import Counter def canRearrange(S): Determines if it\'s possible to rearrange the string S such that no two adjacent characters are the same. Args: S (str): The input string consisting of \'a\', \'b\', and \'c\'. Returns: int: 1 if it\'s possible to rearrange the string, 0 otherwise. # Count the occurrences of each character count = Counter(S) # Find the length of the string total_length = len(S) # Find the maximum occurrence of any character max_count = max(count.values()) # If the most frequent character occurs more times than half the length of the string (rounded up), # it\'s impossible to rearrange the string to meet the requirement if max_count > (total_length + 1) // 2: return 0 else: return 1"},{"question":"Complete the function that takes three arguments: a list of integers (`arr`), and two integers (`low` and `high`). The function should return a new list containing only the elements from `arr` that fall within the range inclusively between `low` and `high`. All elements in `arr` should be positive integers. Examples ```python filter_range([1, 5, 8, 12, 4, 18, 3], 4, 10) >> [5, 8, 4] filter_range([20, 30, 40, 50], 25, 45) >> [30, 40] filter_range([5, 10, 15, 20, 25], 11, 19) >> [15] ```","solution":"def filter_range(arr, low, high): Returns a new list containing only the elements from arr that fall within the range inclusively between low and high. return [x for x in arr if low <= x <= high]"},{"question":"In a coding contest, a task requires you to create an efficient algorithm to manage a large number of meetings. Each meeting has a start time and end time. Your job is to determine the minimum number of meeting rooms needed to host all the meetings without any overlap. Formally, you are given a list of `N` meetings where each meeting `i` has a start time `Si` and an end time `Ei`. Two meetings do not overlap if and only if one of them starts after the other one ends. Write a function that calculates the minimum number of meeting rooms required. ------ Input: ------ - The first line contains a single integer `T` representing the number of test cases. - For each test case: - The first line contains a single integer `N` representing the number of meetings. - Each of the next `N` lines contains two space-separated integers `Si` and `Ei` representing the start and end times of the meeting. ------ Output: ------ Print the minimum number of meeting rooms required for each test case. ------ Constraints ------ - `1 ≤ T ≤ 100` - `1 ≤ N ≤ 100000` - `1 ≤ Si < Ei ≤ 10^9` ------ Sample Input: ------ 3 3 1 4 2 5 3 6 4 1 10 2 7 3 4 5 6 2 1 5 2 6 ------ Sample Output: ------ 3 3 2 # Explanation: - In the first test case, all three meetings overlap with each other. Therefore, we need three rooms. - In the second test case, we need rooms for meetings (1-10), (2-7) and either two other non-overlapping meetings, leading to three rooms in total. - In the third test case, the two meetings overlap, so we need two rooms.","solution":"def min_meeting_rooms(test_cases): Given a list of multiple test cases, each containing a list of meetings with start and end times, returns the minimum number of meeting rooms required for each test case. results = [] for meetings in test_cases: # Break start and end times into separate lists starts = sorted([s for s, e in meetings]) ends = sorted([e for s, e in meetings]) s_ptr = 0 e_ptr = 0 max_rooms = 0 current_rooms = 0 while s_ptr < len(starts): if starts[s_ptr] < ends[e_ptr]: current_rooms += 1 s_ptr += 1 else: current_rooms -= 1 e_ptr += 1 max_rooms = max(max_rooms, current_rooms) results.append(max_rooms) return results def process_input(input_string): Processes the input string as specified in the problem statement. data = input_string.strip().split(\'n\') T = int(data[0].strip()) index = 1 test_cases = [] for _ in range(T): N = int(data[index].strip()) index += 1 meetings = [] for _ in range(N): S, E = map(int, data[index].strip().split()) index += 1 meetings.append((S, E)) test_cases.append(meetings) return test_cases def output_results(results): Prints the results as specified in the problem statement. for result in results: print(result)"},{"question":"Alice is an avid collector of rare coins. She often receives coin collections from her friends, but some coins are duplicated within these collections. Alice wants to create a collection that contains each coin exactly once. To achieve this, she can trade some of her duplicate coins with a coin shop. The shop will allow her to exchange any duplicate coin for any other type of coin she doesn\'t already have in her collection. However, the shop charges her a fee in coins for each exchange. Given a list of coin types that Alice currently has and the fee in coins for each trade, determine the minimum number of trades she needs to make to have a collection that contains each coin exactly once. INPUT FORMAT: Line 1: The number of coin types, N, Alice currently has and the fee per trade, T [Integer] (1 ≤ N ≤ 1,000, 1 ≤ T ≤ 1,000). Line 2: A list of N integers where each integer represents a type of coin Alice currently has. OUTPUT FORMAT: Line 1: The minimum number of trades Alice needs to make to have a collection of unique coins. If it\'s not possible to achieve this, print \\"-1\\". CONSTRAINTS: Alice can only trade coins at the shop, meaning she can\'t get rid of duplicate coins in any other way. SAMPLE INPUT: 6 1 1 2 2 3 3 4 SAMPLE OUTPUT: 2 Explanation Alice has the following coins: 1, 2, 2, 3, 3, 4 She wants to have exactly one of each coin type. She can trade her duplicate coins to get new types. - First trade: exchange one coin of type 2 for a type 5 coin. - Second trade: exchange one coin of type 3 for a type 6 coin. After two trades, Alice will have the collection: 1, 2, 3, 4, 5, 6. Thus, the minimum number of trades needed is 2.","solution":"def min_trades_to_unique_collection(n, t, coins): from collections import Counter coin_count = Counter(coins) trades_needed = 0 unique_coins = set(coin_count.keys()) duplicates = sum(v - 1 for v in coin_count.values() if v > 1) unique_count = len(unique_coins) target_uniques = n - duplicates if target_uniques >= unique_count + duplicates: return duplicates remaining_slots = len(coins) - unique_count required_additions = remaining_slots - duplicates if required_additions <= 0: return duplicates return duplicates + required_additions # Sample test n = 6 t = 1 coins = [1, 2, 2, 3, 3, 4] print(min_trades_to_unique_collection(n, t, coins)) # Output should be 2"},{"question":"In an amusement park, there is a new ride called the \\"Magic Spiral\\". The Magic Spiral consists of n moving platforms arranged in a spiral pattern. Each platform has a specific speed associated with it. The speeds are given in an array of integers, where the i-th element represents the speed of the i-th platform. However, some platforms may be broken and their speed will be represented by -1 in the array. You are given the task to replace the speeds of these broken platforms with the average speeds of their adjacent platforms. If a platform has only one adjacent platform that is not broken, use that speed. If both adjacent platforms are broken, leave the speed as -1. Write a function that takes an array of integers representing the speeds of the platforms and returns a new array where the speeds of the broken platforms are replaced by the average speeds of their adjacent platforms. Input The input consists of a single integer n (1 ≤ n ≤ 1000) — the number of platforms. The second line contains n integers separated by spaces, representing the speeds of the platforms. The speed of each platform is either a non-negative integer or -1. Output The output consists of a single line containing n integers separated by spaces, representing the new speeds of the platforms. Example Input 6 3 -1 5 8 -1 -1 Output 3 4 5 8 8 -1 Explanation For the input example, the second platform has a speed of -1. Its neighboring platforms have speeds of 3 and 5, so the average is 4. Replacing the -1 with 4 gives the first update. Therefore, on the third platform, we get the average of 5 and 4 which is 4.5, rounded down to 4 gives the final result. Note that the last platform speed remains -1 because both adjacent platforms\' speeds are also broken.","solution":"def fix_speeds(n, speeds): This function takes an integer n and an array of speeds as input. For each broken platform (speed = -1), it replaces it with the average of its adjacent platforms. new_speeds = speeds[:] for i in range(n): if speeds[i] == -1: left_speed = speeds[i - 1] if i - 1 >= 0 else None right_speed = speeds[i + 1] if i + 1 < n else None left_speed = left_speed if left_speed != -1 else None right_speed = right_speed if right_speed != -1 else None if left_speed is not None and right_speed is not None: new_speeds[i] = (left_speed + right_speed) // 2 elif left_speed is not None: new_speeds[i] = left_speed elif right_speed is not None: new_speeds[i] = right_speed return new_speeds"},{"question":"A scientist finds a secret code embedded in a complex molecule sequence representing a protein structure. To reveal this code, the scientist seeks help to identify specific patterns within the sequence. You are assigned to help analyze the sequence and assist in decoding the embedded secret. Each string provided represents a chain of amino acids, and your task is to determine the length of the longest subsequence which can be rearranged to form a palindrome. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, for the string \\"science\\", the longest subsequence that can be rearranged to form a palindrome is \\"ese\\" (\\"eese\\" if we consider all characters). -----Input:----- The first line contains T, the number of test cases. Each of the next T lines contains a string S representing the amino acid sequence. -----Output:----- For each test case, output the length of the longest subsequence that can be rearranged to form a palindrome. -----Constraints:----- 1 leq T leq 50 1 leq |S| leq 10^5 -----Test Cases:----- -----Sample Input:----- 3 abacaba molecular aaabbbccc -----Sample Output:----- 7 3 7 -----Explanation:----- Test case 1: The string \\"abacaba\\" can be rearranged to form the palindrome \\"aaabaaa\\" (length is 7). Test case 2: The string \\"molecular\\" can contain \\"lll\\", a single character \\"m\\", or similar (max length is 3). Test case 3: The string \\"aaabbbccc\\" can be rearranged to form \\"aaabbbbccc\\" (or similar combinations), but the palindrome would be \\"aaabaaaa\\" (length is 7).","solution":"def longest_palindromic_subsequence_length(s): Given a string s, return the length of the longest subsequence that can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length def process_test_cases(test_cases): results = [] for s in test_cases: result = longest_palindromic_subsequence_length(s) results.append(result) return results"},{"question":"Given an array arr[] of size N containing integers, the task is to find whether the product of all elements in the array is even or odd. Example 1: Input: N = 4, arr[] = {3, 5, 7, 9} Output: Odd Explanation: The product of all elements is 3*5*7*9 = 945, which is odd. Example 2: Input: N = 3, arr[] = {2, 3, 4} Output: Even Explanation: The product of all elements is 2*3*4 = 24, which is even. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function isProductEven() that takes array arr[] and integer N as parameters and returns the string \\"Even\\" if the product of all elements is even, else it returns \\"Odd\\". Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^7 -10^9 ≤ arr[i] ≤ 10^9","solution":"def isProductEven(arr, N): Determines if the product of all elements in the array is even or odd. :param arr: List of integers :param N: Size of the list :return: \\"Even\\" if product of all elements is even, otherwise \\"Odd\\" for num in arr: if num % 2 == 0: return \\"Even\\" return \\"Odd\\""},{"question":"You are given a list of integers. Your task is to determine if it is possible to split this list into two non-empty parts where the sum of the elements in the first part is equal to the sum of the elements in the second part. For example, if the list is [1, 2, 3, 4, 5, 5], you can split it into [1, 2, 3, 4] and [5, 5], both of which have the sum 10. Input The input will consist of two lines. The first line contains an integer n (1 ≤ n ≤ 100000) - the number of elements in the list. The second line will contain n integers representing the elements of the list, each element can be any integer such that the cumulative sum of the list does not exceed the limits of a 64-bit signed integer. Output Print \\"YES\\" if it is possible to split the list into two parts with equal sum, otherwise print \\"NO\\". Examples Input 6 1 2 3 4 5 5 Output YES Input 5 1 1 1 2 2 Output NO","solution":"def can_split_list_equal_sum(n, lst): Determines if it is possible to split the list into two non-empty parts with equal sum. Params: n - the number of elements in the list (an integer) lst - the list of integers Returns: \\"YES\\" if it is possible to split the list into two parts with equal sum, otherwise \\"NO\\" total_sum = sum(lst) # Check if total sum is odd, if yes, we can\'t split it into two equal parts if total_sum % 2 != 0: return \\"NO\\" half_sum = total_sum // 2 current_sum = 0 for num in lst: current_sum += num if current_sum == half_sum: return \\"YES\\" return \\"NO\\""},{"question":"The social networking app \\"Chatterbox\\" recently introduced a feature to track the most popular user based on their posts\' engagement. Users on Chatterbox can \\"like\\" and \\"comment\\" on the posts of other users, and each post can have multiple likes and comments. The popularity of a user is determined by the sum of the likes and comments on all their posts. You are tasked with finding the most popular user based on this metric. -----Input----- The first line of input contains two integers, u (1 leq u leq 100000) the number of users, and p (1 leq p leq 100000) the number of posts. Then follows p lines, each describing a post. The i‘th line contains three integers, user_ i, likes_ i, and comments_ i (0 leq user_ i < u, 0 leq likes_ i, comments_ i leq 1000), meaning that the post was made by user user_ i and received likes_ i likes and comments_ i comments. -----Output----- Output a single integer, the ID of the most popular user. If there are multiple users with the same popularity, output the smallest user ID amongst them. -----Examples----- Sample Input: 3 5 0 10 15 1 5 10 0 7 3 2 1 1 1 2 0 Sample Output: 0","solution":"def find_most_popular_user(u, p, posts): Finds the most popular user based on the sum of likes and comments on all their posts. popularity = [0] * u # Process each post for post in posts: user, likes, comments = post popularity[user] += (likes + comments) # Find the user with the highest popularity score most_popular_user = 0 max_popularity = popularity[0] for i in range(1, u): if (popularity[i] > max_popularity) or (popularity[i] == max_popularity and i < most_popular_user): most_popular_user = i max_popularity = popularity[i] return most_popular_user"},{"question":"Given an integer n, your task is to determine if it is possible to express the number n as the sum of two prime numbers. If possible, return any such pair of prime numbers, otherwise return -1. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - Each of the next T lines contains a single integer n. ------ Output Format ------ For each test case, if it is possible to express n as the sum of two prime numbers, output the pair of primes separated by a space. If there are multiple valid pairs, output any of them. If it is not possible, output -1. ------ Constraints ------ 1 ≤ T ≤ 100 4 ≤ n ≤ 10^{5} ------ Sample Input 1 ------ 4 10 27 4 20 ------ Sample Output 1 ------ 3 7 -1 2 2 3 17 ----- Explanation 1 ------ Test case 1: One possible way to express 10 as the sum of two prime numbers is 3 + 7. Another valid way is 5 + 5. Test case 2: There is no way to express 27 as the sum of two prime numbers. Test case 3: The smallest number that can be expressed as the sum of two prime numbers is 4 which equals to 2 + 2.","solution":"import math def is_prime(num): Checks if a number is a prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def find_prime_pair(n): Finds a pair of prime numbers that sum up to n. for i in range(2, n): if is_prime(i) and is_prime(n - i): return (i, n - i) return -1 def solve(test_cases): results = [] for n in test_cases: pair = find_prime_pair(n) if pair == -1: results.append(-1) else: results.append(f\\"{pair[0]} {pair[1]}\\") return results"},{"question":"A game consists of a rectangular grid of size n x m (1 ≤ n, m ≤ 50). Each cell can either be empty (\'.\') or contain an obstacle (\'#\'). You are currently at the top-left cell of the grid (1,1) and your task is to reach the bottom-right cell of the grid (n,m). You can only move to an adjacent cell that shares a side with your current cell (no diagonal moves), and cells containing obstacles are impassable. Your task is to determine the minimum number of moves required to reach the bottom-right cell from the top-left cell, or to determine if it\'s impossible. If it is possible to reach the destination, print the minimum number of moves required. If it is impossible, print \\"IMPOSSIBLE\\". # Input - The first line contains the number of test cases t (1 ≤ t ≤ 20). - Each test case consists of: - The dimensions of the grid n and m. - n lines containing m characters each (\'.\' or \'#\') representing the grid. # Output - Print t lines, each containing either the minimum number of moves required or \\"IMPOSSIBLE\\" if the destination cannot be reached. # Example Input ``` 2 3 3 ... .#. ... 4 4 .... .. ..#. .... ``` Output ``` 4 6 ```","solution":"from collections import deque def min_moves_to_reach_bottom_right(t, test_cases): results = [] def bfs(grid, n, m): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, column, moves) visited = set((0, 0)) while queue: x, y, moves = queue.popleft() if x == n - 1 and y == m - 1: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, moves + 1)) visited.add((nx, ny)) return \\"IMPOSSIBLE\\" for case in test_cases: n, m, grid = case results.append(str(bfs(grid, n, m))) return results # Testing the function with provided test cases. def parse_test_input(input_str): input_lines = input_str.strip().split(\\"n\\") t = int(input_lines[0]) test_cases = [] line_idx = 1 for _ in range(t): n, m = map(int, input_lines[line_idx].split()) grid = [input_lines[line_idx + i + 1] for i in range(n)] test_cases.append((n, m, grid)) line_idx += n + 1 return t, test_cases def generate_test_output(output_list): return \\"n\\".join(output_list) # Example inputs to parse and generate outputs. example_input = 2 3 3 ... .#. ... 4 4 .... .. ..#. .... t, test_cases = parse_test_input(example_input) print(generate_test_output(min_moves_to_reach_bottom_right(t, test_cases)))"},{"question":"You are given two sequences A and B both of length N. Find the number of indices i (1 leq i leq N) such that the ith element of A is strictly greater than the ith element of B. -----Constraints----- - All values in input are integers. - 1 leq N leq 10^5 - 1 leq A_i, B_i leq 10^6 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 cdots A_N B_1 B_2 cdots B_N -----Output----- Print the number of indices i such that A_i > B_i. -----Sample Input----- 4 5 1 7 3 2 9 5 3 -----Sample Output----- 2 The indices with the property are 1 and 3.","solution":"def count_strictly_greater_indices(N, A, B): Returns the number of indices i such that A[i] is strictly greater than B[i]. Parameters: N (int): Length of the sequences A (list of int): Sequence A B (list of int): Sequence B Returns: int: Number of indices where A[i] > B[i] count = 0 for i in range(N): if A[i] > B[i]: count += 1 return count # Function to parse input and call the count function def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:N+1])) B = list(map(int, data[N+1:2*N+1])) print(count_strictly_greater_indices(N, A, B))"},{"question":"You are given an array of integers. You have two operations available: 1. Add 1 to any integer in the array. 2. Multiply any integer in the array by 2. Your task is to determine if it\'s possible to make all integers in the array equal by performing one or both of the operations any number of times. Constraints * 1 ≤ array length ≤ 10^5 * 1 ≤ element value ≤ 10^9 Input The input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print `YES` if it is possible to make all integers in the array equal, otherwise print `NO`. Examples Input 3 1 2 4 Output YES Input 3 3 5 6 Output NO Input 4 16 8 4 2 Output YES","solution":"def can_make_equal(arr): Determines if it is possible to make all integers in the array equal by adding 1 and/or multiplying by 2 any number of times. def normalize(num): while num % 2 == 0: num //= 2 return num # Normalize all numbers by repeatedly dividing by 2 normalized_vals = set(normalize(x) for x in arr) # If all numbers normalize to the same value, return \'YES\', otherwise \'NO\' return \'YES\' if len(normalized_vals) == 1 else \'NO\'"},{"question":"You are working for a company that manages public bike-sharing services in the city of Metropolis. Each bike station is either a source station or a destination station, but not both. Your task is to figure out the maximum number of source-to-destination trips that can be facilitated using the available bike paths. Each bike path connects exactly two different bike stations. A bike path can be used in both directions. Your goal is to determine the maximum number of bike trips that can be made such that each trip starts at a source station and ends at a destination station, and each bike path can be part of only one trip at a time. For example, let\'s say there are three source stations (S1, S2, S3) and three destination stations (D1, D2, D3). Suppose you are given four bike paths: one between stations S1 and D1, another between S2 and D1, another between S2 and D2, and another between S3 and D3. In this situation, you can facilitate a maximum of three bike trips (S1 to D1, S2 to D2, and S3 to D3). -----Input----- The input starts with two integers ( s ) and ( d ) indicating the number of source stations and destination stations respectively, where ( 1 leq s, d leq 200 ). The next line contains the names of the source stations separated by spaces. The following line contains the names of the destination stations separated by spaces. After that, there is an integer ( p ) indicating the number of bike paths, where ( 1 leq p leq 1000 ). Each of the next ( p ) lines represents a bike path with two station names separated by a space, indicating a connection between those two stations (one being a source station and the other being a destination station). All station names are unique alphabetic strings with no spaces. -----Output----- Output the maximum number of source-to-destination bike trips that can be facilitated. -----Examples----- Sample Input: 3 3 S1 S2 S3 D1 D2 D3 4 S1 D1 S2 D1 S2 D2 S3 D3 Sample Output: 3","solution":"def max_bike_trips(s, d, sources, destinations, paths): from collections import deque, defaultdict # Constructing the bipartite graph graph = defaultdict(list) for src, dst in paths: graph[src].append(dst) # Hopcroft-Karp algorithm setup INF = float(\'inf\') pair_u = {u: None for u in sources} pair_v = {v: None for v in destinations} dist = {} def bfs(): queue = deque() for u in sources: if pair_u[u] is None: dist[u] = 0 queue.append(u) else: dist[u] = INF dist[None] = INF while queue: u = queue.popleft() if dist[u] < dist[None]: for v in graph[u]: if dist[pair_v[v]] == INF: dist[pair_v[v]] = dist[u] + 1 queue.append(pair_v[v]) return dist[None] != INF def dfs(u): if u is not None: for v in graph[u]: if dist[pair_v[v]] == dist[u] + 1: if dfs(pair_v[v]): pair_v[v] = u pair_u[u] = v return True dist[u] = INF return False return True matching = 0 while bfs(): for u in sources: if pair_u[u] is None: if dfs(u): matching += 1 return matching"},{"question":"You are given a matrix A of size M x N consisting of 0s and 1s. You can perform the following operation on the matrix: Select any submatrix and flip all the elements within the submatrix (change all 0s to 1s and all 1s to 0s). The goal is to convert the matrix A into a zero matrix (a matrix where all elements are 0s) using the minimum number of operations. Find the minimum number of operations required to achieve the zero matrix. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two integers M and N — the dimensions of the matrix. - The next M lines contain N space-separated integers (0 or 1), representing the matrix A. ------ Output Format ------ For each test case: - Output a single integer denoting the minimum number of operations required to convert the matrix into a zero matrix. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ M, N ≤ 100 A_{ij} is either 0 or 1. ----- Sample Input 1 ------ 2 3 3 1 0 1 0 1 0 1 0 1 2 2 1 1 1 1 ----- Sample Output 1 ------ 1 1 ----- Explanation 1 ------ Test case 1: The minimum number of operations to convert the matrix to a zero matrix is 1. We can flip the entire matrix once to turn all 1s into 0s. Test case 2: The minimum number of operations to convert the matrix to a zero matrix is 1. We can flip the entire matrix once to turn all 1s into 0s.","solution":"def min_operations_to_zero_matrix(T, test_cases): results = [] for case in test_cases: M, N, matrix = case[\'M\'], case[\'N\'], case[\'matrix\'] # We only need to flip the entire matrix once as a single submatrix results.append(1 if any(1 in row for row in matrix) else 0) return results"},{"question":"Mark and Nancy are playing a fair coin flipping game. They are given an initial sequence of real numbers S[0], S[1], ..., S[n-1]. Their goal is to flip a coin n times consecutively. If the coin lands heads, they increment the current index by 1 (i.e., move to the next element in the array); if it lands tails, they decrement the current index by 1 (i.e., move to the previous element in the array). Starting from index 0, they want to compute the expected sum of the sequence values encountered during these flips. Mark\'s objective is to maximize the sum, while Nancy\'s objective is to minimize it. However, they don\'t know the outcomes of the coin flips in advance and thus have to work with the expected value. Given the initial sequence, your task is to compute the expected sum after n coin flips. Input: - The first line contains an integer n (1 ≤ n ≤ 20). - The second line contains n real numbers S[0], S[1], ..., S[n-1] (0 ≤ S[i] ≤ 1000). Output: - Print a single real number representing the expected sum after n coin flips. Your answer must have absolute or relative error within 10^-6. Examples: Input: 3 1.0 2.0 3.0 Output: 2.000000 Input: 5 1.0 3.0 5.0 7.0 9.0 Output: 5.000000 Explanation: In the first test case, starting at S[0] = 1.0: - One possible path is {head (move to S[1]=2.0), tail (move back to S[0]=1.0), head (move to S[1]=2.0)}, resulting in the sum: 1.0 + 2.0 + 2.0 = 5.0. - Another possible path is {tail (stay at S[0]=1.0), head (move to S[1]=2.0), head (move to S[2]=3.0)}, resulting in the sum: 1.0 + 1.0 + 2.0 + 3.0 = 7.0. However, over n=3 steps, there is an equal probability to move back and forth around the indices, such that all indices and their values are equally probable after n flips. Therefore, the expected sum is effectively the average of the sequence values. In the second test case with a longer sequence, the expected value essentially balances out to the midpoint of the array values, which in this case is 5.0 (average of the central values in a symmetric distribution).","solution":"def expected_sum(n, S): Calculates the expected sum of the sequence values encountered during n coin flips. total_sum = sum(S) return total_sum / n"},{"question":"Petya has a special system of grading in his new university course. There are `n` students in the class, and each student has received a unique integer ID between `1` and `n`. Each student has received a grade for their assignments, represented as an array of integers `grades` where `grades[i]` is the grade of the student with ID `i+1`. Petya has set up a highly particular rule for determining the final grade of any given student: it is the average of their own grade and the grades of all other students whose grade is no less than their own grade. Given the grades of all students, your task is to determine the final grade for each student, applying Petya\'s rule. Output the final grades rounded to two decimal places. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of students. - The second line contains `n` integers `grades[i]` (1 ≤ grades[i] ≤ 1000) — the grades of the students. # Output - Print `n` lines. The i-th line should contain the final grade of the student with ID `i+1` rounded to two decimal places. # Example Input ``` 4 70 90 80 60 ``` Output ``` 75.00 85.00 80.00 65.00 ``` # Note - For the first student, the grades greater than or equal to his/her grade (70) are 70, 90, and 80. Thus, the final grade is the average of these three grades: (70 + 90 + 80) / 3 = 80.0. - For the second student, the grades greater than or equal to his/her grade (90) is only 90. Thus, the final grade stays 90.0. - For the third student, the grades greater than or equal to his/her grade (80) are 90 and 80. Thus, the final grade is the average of these two grades: (90 + 80) / 2 = 85.0. - For the fourth student, there are no grades greater than or equal to his/her grade (60). Thus, the final grade stays 60.0.","solution":"def final_grades(n, grades): Returns the final grades for each student. result = [] for i in range(n): student_grade = grades[i] relevant_grades = [grade for grade in grades if grade >= student_grade] final_grade = sum(relevant_grades) / len(relevant_grades) result.append(round(final_grade, 2)) return result"},{"question":"------ Problem Statement ------ You are given a grid of size N x N. Each cell in the grid can either be walkable (denoted by \'.\') or blocked (denoted by \'#\'). You are tasked to find the shortest path from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1), if such a path exists. You can move up, down, left, or right between walkable cells. If there is no path, output -1. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. Each test case starts with an integer N denoting the size of the grid. The next N lines each contain a string of N characters representing the grid. ------ Output ------ For each test case, output the length of the shortest path from (0, 0) to (N-1, N-1), or -1 if no such path exists. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 2 ≤ N ≤ 50 ------ Sample Input 1 ------ 2 3 ... .#. ... 3 .#. # .#. ------ Sample Output 1 ------ 4 -1 ------ Explanation 1 ------ Testcase #1: You can start at (0, 0), move to (0, 1), (0, 2), (1, 2), then (2, 2). The total length of the path is 4. Testcase #2: There is no path from (0, 0) to (2, 2), so the output is -1.","solution":"from collections import deque def shortest_path(grid): N = len(grid) if grid[0][0] == \'#\' or grid[N-1][N-1] == \'#\': return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) distance = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == (N-1, N-1): return distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) distance += 1 return -1 def solve(grid_list): results = [] for grid in grid_list: result = shortest_path(grid) results.append(result) return results def main(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) index = 1 grid_list = [] for _ in range(T): N = int(lines[index]) index += 1 grid = [lines[index + i] for i in range(N)] index += N grid_list.append(grid) results = solve(grid_list) return results"},{"question":"You are given an array of integers of size N and a permutation array P of the same size. The permutation array P tells you to move the element at index i in the original array to index P[i] in the resultant array. Write a function to rearrange the original array according to this permutation array. # Example 1: Input: N = 5 array = [10, 20, 30, 40, 50] permutation = [4, 3, 2, 0, 1] Output: [40, 50, 30, 20, 10] Explanation: The element at index 0 (value 10) in the original array moves to index 4 in the resultant array. The element at index 1 (value 20) in the original array moves to index 3 in the resultant array. The element at index 2 (value 30) in the original array moves to index 2 in the resultant array. The element at index 3 (value 40) in the original array moves to index 0 in the resultant array. The element at index 4 (value 50) in the original array moves to index 1 in the resultant array. # Example 2: Input: N = 4 array = [5, 10, 15, 20] permutation = [2, 0, 3, 1] Output: [10, 20, 5, 15] Explanation: The element at index 0 (value 5) in the original array moves to index 2 in the resultant array. The element at index 1 (value 10) in the original array moves to index 0 in the resultant array. The element at index 2 (value 15) in the original array moves to index 3 in the resultant array. The element at index 3 (value 20) in the original array moves to index 1 in the resultant array. Your Task: The task is to complete the function `rearrangeArray` which takes two arguments: the integer array `arr` and the permutation array `perm` and returns the resultant rearranged array. # Expected Time Complexity: O(N) # Expected Auxiliary Space: O(N) # Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ array[i] ≤ 10^5 - `perm` is a valid permutation array of size N with indices from 0 to N-1.","solution":"def rearrangeArray(arr, perm): Rearranges the given array according to the permutation array. Parameters: arr (list): The original array of integers. perm (list): The permutation array. Returns: list: The rearranged array according to the permutation array. N = len(arr) result = [0] * N for i in range(N): result[perm[i]] = arr[i] return result"},{"question":"You are an archaeologist deciphering an ancient scroll, which has instructions for determining the magical potential of various stones found in the ruins. Each stone is represented by a non-negative integer. The scroll states that the magical potential of a stone is defined as the sum of its digits raised to successive powers starting from 1. For example, the magical potential of a stone represented by the number 123 is calculated as: 1^1 + 2^2 + 3^3 = 1 + 4 + 27 = 32 Your task is to calculate the magical potential for each stone you analyze. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains a single non-negative integer representing a stone. ------ Output Format ------ For each test case, print the magical potential of the stone in a new line. ------ Constraints ------ 1 ≤ T ≤ 10^5 0 ≤ text{stone} < 10^{18} ------ Sample Input 1 ------ 3 123 456 789 ------ Sample Output 1 ------ 32 208 1107 ------ explanation 1 ------ For stone 123, the magical potential is calculated as: 1^1 + 2^2 + 3^3 = 1 + 4 + 27 = 32 For stone 456, the magical potential is calculated as: 4^1 + 5^2 + 6^3 = 4 + 25 + 216 = 245 For stone 789, the magical potential is calculated as: 7^1 + 8^2 + 9^3 = 7 + 64 + 729 = 800","solution":"def magical_potential(stone): Returns the magical potential of the stone represented by a non-negative integer. digits = [int(d) for d in str(stone)] return sum(d ** (i + 1) for i, d in enumerate(digits)) def handle_input_output(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) results = [] for i in range(1, T + 1): stone = int(data[i]) results.append(magical_potential(stone)) for result in results: print(result)"},{"question":"Maggie loves playing with colorful tiles. She has an array of n integers where each integer represents a color of the tile. Maggie wants to form the longest contiguous subarray such that no two tiles of the same color are adjacent. Your task is to help Maggie find the length of the longest contiguous subarray where no two adjacent tiles share the same color. If there are multiple such subarrays with the same maximum length, any one of them can be considered. Input The first line contains integer n (1 ≤ n ≤ 105), the number of tiles. The second line contains n integers a[i] (1 ≤ a[i] ≤ n), representing the colors of the tiles. Output In a single line print the length of the longest contiguous subarray with no two adjacent tiles of the same color. Examples Input 5 1 2 3 4 5 Output 5 Input 7 3 3 3 3 3 3 3 Output 1 Input 8 1 2 1 2 1 2 1 2 Output 8 Note In the first sample, the entire array meets the condition since all colors are different. In the second sample, no matter which subarray is chosen, all elements are the same color, thus the longest subarray with unique adjacent tiles is of length 1. In the third sample, the whole array is already such that no two adjacent tiles are of the same color.","solution":"def longest_subarray_no_adjacent_same_color(n, tiles): Returns the length of the longest contiguous subarray where no two adjacent tiles share the same color. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if tiles[i] != tiles[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Write a function `fft` that approximates the Fast Fourier Transform (FFT) of a given sequence of complex numbers using the Cooley-Tukey algorithm. The input to the function will be an iterable `data` which contains complex numbers and its length will always be a power of two. The function should return the transformed sequence of complex numbers. **Constraints:** - The length of `data` will be a power of two and at least 2. - Do not use built-in FFT functions. - Implement recursive version of Cooley-Tukey algorithm. **Example:** ```python def fft(data): # implementation here # Example usage: data = [0, 1, 2, 3, 4, 5, 6, 7] result = fft(data) print(result) # Output: [28 + 0.0j, -4 + 9.65685424j, -4.00000000 + 4.00000000j, -4 + 1.65685424j, -4 + 0.0j, -4 - 1.65685424j, -4.00000000 - 4.00000000j, -4 - 9.65685424j] ``` Note that the output contains complex numbers and should be accurate to at least 5 decimal places.","solution":"import cmath def fft(data): Computes the Fast Fourier Transform using the Cooley-Tukey algorithm. The input `data` should be an iterable of complex numbers with a length that is a power of two. n = len(data) if n <= 1: return data # Cooley-Tukey FFT even = fft(data[0::2]) odd = fft(data[1::2]) T = [cmath.exp(-2j * cmath.pi * k / n) * odd[k] for k in range(n // 2)] return [even[k] + T[k] for k in range(n // 2)] + [even[k] - T[k] for k in range(n // 2)]"},{"question":"You are given five integers a, b, c, d, and e that represent the coordinates (a, b) of the top-left corner of a rectangle and (c, d) of the bottom-right corner of another rectangle, in a 2D plane. These two rectangles can overlap or be entirely separate. The rectangles are aligned with the x and y axes. Write a function to determine whether the two rectangles overlap. A rectangle overlaps another if at least one point of one rectangle is inside or on the edge of the other rectangle. Input: - a: integer, x-coordinate of the top-left corner of the first rectangle. - b: integer, y-coordinate of the top-left corner of the first rectangle. - c: integer, x-coordinate of the bottom-right corner of the second rectangle. - d: integer, y-coordinate of the bottom-right corner of the second rectangle. - e: integer, number of coordinate pairs to test for overlap. Output: - Return \\"true\\" if the rectangles overlap, \\"false\\" otherwise. Example 1: Input: a=0, b=0, c=1, d=1, e=1 Output: false Explanation: The two rectangles do not overlap. Example 2: Input: a=0, b=0, c=2, d=1, e=1 Output: true Explanation: The two rectangles overlap at the point (1,0). Note: - All coordinates are integers. - Coordinates of the corners define the widths and heights of the rectangles correctly (the top-left corner will always have smaller x and y values compared to the bottom-right corner).","solution":"def do_rectangles_overlap(a, b, c, d, a1, b1, c1, d1): Determines if two rectangles overlap. The first rectangle is defined by its top-left corner (a, b) and bottom-right corner (c, d). The second rectangle is defined by its top-left corner (a1, b1) and bottom-right corner (c1, d1). Returns \\"true\\" if they overlap, \\"false\\" otherwise. # If one rectangle is on the left side of the other if a >= c1 or a1 >= c: return \\"false\\" # If one rectangle is above the other if b >= d1 or b1 >= d: return \\"false\\" return \\"true\\""},{"question":"# Calculate the Required Energy In a video game, a character has to reach from his starting point to a designated endpoint by traversing a series of checkpoints. Each checkpoint i, starting from the first checkpoint (i=1) to the N-th checkpoint (i=N), requires a certain amount of energy E_i to bypass. Additionally, if a checkpoint is bypassed without sufficient energy, the character receives a penalty of C units of energy that gets added to the total energy required for the journey. Given the energy requirements for each checkpoint and the penalty, you have to determine how much total energy is needed for the character to reach from the starting point to the endpoint. ----- Input Format ------ - First line contains an integer T, the number of test cases. Each test case follows: - The first line of each test case contains two integers N and C. - The second line contains N integers, the energy requirements for each checkpoint, E1, E2, ..., EN respectively. ----- Output Format ------ For each test case, output the total energy required in a single line. ----- Constraints ------ 1 ≤ T ≤ 500 1 ≤ N ≤ 10^3 1 ≤ C, E_i ≤ 10^4 ----- Sample Input 1 ------ 2 3 2 4 3 1 4 5 2 8 6 4 ----- Sample Output 1 ------ 8 20 ----- Explanation 1 ------ TestCase 1: - Start with 0 energy. - For each checkpoint add the energy requirement. Total energy required = 4 + 3 + 1 = 8 TestCase 2: - Start with 0 energy. - For each checkpoint add the energy requirement. Total energy required = 2 + 8 + 6 + 4 = 20.","solution":"def calculate_total_energy(test_cases): results = [] for case in test_cases: N, C, energies = case total_energy = sum(energies) results.append(total_energy) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, C = map(int, lines[index].split()) energies = list(map(int, lines[index + 1].split())) test_cases.append((N, C, energies)) index += 2 return test_cases"},{"question":"During a coding competition, Sophie encountered a tricky problem. She is given a string consisting of alphabetical letters and she needs to determine if the string can be rearranged to form a palindrome. A palindrome is a word that reads the same both forwards and backwards. For example, \\"racecar\\" and \\"level\\" are palindromes, but \\"hello\\" and \\"world\\" are not. Since Sophie needs to solve this problem multiple times, your task is to help her by determining for each given string if it can be rearranged to form a palindrome. -----Input----- The first line of input data contains an integer t (1 leq t leq 100) — the number of test cases. Next, descriptions of t test cases follow. Each test case consists of one line containing a single string s (1 leq |s| leq 100000) — the string for which Sophie needs to determine if a palindrome rearrangement is possible. It is guaranteed that the sum of lengths of all strings over all test cases does not exceed 1000000. -----Output----- For each of t test cases, print \\"YES\\" if the string can be rearranged to form a palindrome, and \\"NO\\" otherwise. -----Examples----- Input 3 civic ivicc hello Output YES YES NO -----Note----- In the first test case, the string \\"civic\\" itself is already a palindrome. In the second test case, the string \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. In the third test case, the string \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determines whether the given string can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character # has an odd frequency (for the center position in palindrome) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def solve(test_cases): Solves each test case provided and returns the result for all. results = [] for case in test_cases: results.append(can_form_palindrome(case)) return results"},{"question":"Alice wants to compare the performance of two sorting algorithms: Quick Sort and Merge Sort. Given a list of integers, her goal is to determine which sorting algorithm will perform fewer comparisons for a particular configuration. Implement a function that simulates the number of comparisons made by Quick Sort and Merge Sort for sorting a given list of integers. You should assume that both algorithms operate in their simple recursive forms without optimizations such as tail recursion or hybrid approaches. Specifically, compare the total number of comparisons made by Quick Sort and Merge Sort, and print which algorithm performs fewer comparisons or if they perform the same number. -----Constraints----- - 1 leq N leq 100 - Each element in the list is a distinct integer between 1 and 1000, inclusive. -----Input----- The input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print \\"Quick Sort\\" if Quick Sort performs fewer comparisons, \\"Merge Sort\\" if Merge Sort performs fewer comparisons, or \\"Same\\" if they perform the same number. -----Sample Input----- 5 3 5 1 9 6 -----Sample Output----- Merge Sort Note: 1. For Quick Sort, pick the last element as the pivot. 2. For simplicity, consider comparisons within the merge function for Merge Sort. 3. Do not actually sort the list; only simulate and count the number of comparisons.","solution":"def quick_sort_comparisons(arr, lo, hi): Helper function to count comparisons in Quick Sort if lo >= hi: return 0 pivot = arr[hi] i = lo - 1 comparisons = 0 for j in range(lo, hi): comparisons += 1 if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[hi] = arr[hi], arr[i + 1] pi = i + 1 return (comparisons + quick_sort_comparisons(arr, lo, pi - 1) + quick_sort_comparisons(arr, pi + 1, hi)) def merge_sort_comparisons(arr, temp_arr, left, right): Helper function to count comparisons in Merge Sort if left >= right: return 0 mid = (left + right) // 2 comparisons = (merge_sort_comparisons(arr, temp_arr, left, mid) + merge_sort_comparisons(arr, temp_arr, mid + 1, right) + merge_and_count(arr, temp_arr, left, mid, right)) return comparisons def merge_and_count(arr, temp_arr, left, mid, right): i = left j = mid + 1 k = left comparisons = 0 while i <= mid and j <= right: comparisons += 1 if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return comparisons def compare_sorts(n, arr): quick_sort_arr = arr[:] merge_sort_arr = arr[:] temp_arr = [0] * n qs_comparisons = quick_sort_comparisons(quick_sort_arr, 0, n - 1) ms_comparisons = merge_sort_comparisons(merge_sort_arr, temp_arr, 0, n - 1) if qs_comparisons < ms_comparisons: print(\\"Quick Sort\\") elif ms_comparisons < qs_comparisons: print(\\"Merge Sort\\") else: print(\\"Same\\")"},{"question":"Create a function `minimum_cost_to_convert` that takes a list of integers as input and outputs the minimum cost required to convert the list into a palindrome. In this problem, converting the list into a palindrome means adjusting some of the list elements such that the list reads the same forwards and backwards. The cost is defined as the number of changes applied to the elements. Input - A single list of integers, for which the length of the list is between 1 and 1000. Output - A single integer representing the minimum number of changes required to make the list a palindrome. Constraints - 1 ≤ len(list) ≤ 1000 - 1 ≤ list[i] ≤ 1000 Function Signature ```python def minimum_cost_to_convert(array: List[int]) -> int: ``` Example ```python print(minimum_cost_to_convert([1, 2, 3, 4, 3, 2, 1])) # Output: 0 print(minimum_cost_to_convert([1, 2, 3, 4, 5, 2, 1])) # Output: 1 print(minimum_cost_to_convert([5, 8, 9, 7, 6, 5, 4, 2, 1])) # Output: 4 ``` Explanation In the first example, the list is already a palindrome, so no changes are needed, and the output is 0. In the second example, changing the middle element `4` to `3` will make the list a palindrome, resulting in a single change, hence the output is 1. In the third example, converting the list to a palindrome involves changing four elements, resulting in an output of 4.","solution":"from typing import List def minimum_cost_to_convert(array: List[int]) -> int: Returns the minimum number of changes required to make the list a palindrome. n = len(array) cost = 0 for i in range(n // 2): if array[i] != array[n - i - 1]: cost += 1 return cost"},{"question":"Anna is fascinated with palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. She wonders how many palindromic numbers exist between two given numbers inclusive. You are asked to write a program to help Anna determine the number of palindromic numbers within a given range [A, B]. Input The input consists of two integers A and B (1 ≤ A ≤ B ≤ 10^6) — the lower and upper bounds of the range. Output Output a single integer — the count of palindromic numbers between A and B inclusive. Examples Input 1 10 Output 9 Input 100 200 Output 10 Note The palindromic numbers between 1 and 10 are: 1, 2, 3, 4, 5, 6, 7, 8, 9. The palindromic numbers between 100 and 200 are: 101, 111, 121, 131, 141, 151, 161, 171, 181, 191.","solution":"def count_palindromic_numbers(A, B): Returns the count of palindromic numbers between A and B inclusive. def is_palindromic(n): return str(n) == str(n)[::-1] count = 0 for number in range(A, B + 1): if is_palindromic(number): count += 1 return count"},{"question":"Chef has a string S of length N consisting of only lowercase English alphabets. He is allowed to make exactly one modification to the string: either delete one character, insert a character at any position, or replace one character with another lowercase English letter. After making the modification, Chef wants the resulting string to be a palindrome. Your task is to determine the minimum number of operations required to make the string a palindrome. ------ Input ------ The first line contains an integer T, the number of test cases. Each test case contains a single line of input: a string S. ------ Output ------ For each test case, output the minimum number of operations required in a single line. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 S consists only of lowercase English letters. ----- Sample Input 1 ------ 3 abc racecar abca ----- Sample Output 1 ------ 1 0 1 ----- Explanation 1 ------ Test Case 1: Deleting character \'c\', or replacing \'c\' with \'b\', results in \\"aba\\", which is a palindrome. Test Case 2: The string \\"racecar\\" is already a palindrome, so no modifications are needed. Test Case 3: Replacing \'b\' with \'c\', results in \\"acca\\", which is a palindrome.","solution":"def min_operations_to_palindrome(S): Returns the minimum number of operations required to make the string S a palindrome. n = len(S) def is_palindrome(s): return s == s[::-1] if is_palindrome(S): return 0 # Initialize a table for dynamic programming dp = [[0] * n for _ in range(n)] # Fill the table for length in range(2, n + 1): # length of the substring for i in range(n - length + 1): j = i + length - 1 if S[i] == S[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], dp[i + 1][j], dp[i + 1][j - 1]) return dp[0][n - 1] def solve_t_cases(T, test_cases): results = [] for S in test_cases: results.append(min_operations_to_palindrome(S)) return results"},{"question":"Given a string containing digits and lowercase letters, rearrange the characters such that all lowercase letters come before any digits. The relative order of the characters within the letters and digits should be preserved. Example 1: Input: S = \\"a1b2c3\\" Output: \\"abc123\\" Explanation: The relative order of \'a\', \'b\', \'c\' is preserved in the letters and \'1\', \'2\', \'3\' in the digits. Example 2: Input: S = \\"3z2y1x\\" Output: \\"zyx321\\" Explanation: The relative order of \'z\', \'y\', \'x\' is preserved in the letters and \'3\', \'2\', \'1\' in the digits. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rearrange() which takes the string S as input and returns a string with letters before digits. Expected Time Complexity: O(|S|). Expected Auxiliary Space: O(|S|). Constraints: 1<=|S|<=1000","solution":"def rearrange(S): Rearranges the characters in S such that all lowercase letters come before any digits. Parameters: S (str): A string containing digits and lowercase letters. Returns: str: A string with letters before digits, preserving their relative order. letters = [] digits = [] for char in S: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(letters + digits)"},{"question":"A company keeps track of its employees using an employee ID and their working hours for the week. You are tasked with creating a program that finds the \\"Top Performer\\", \\"Second Performer\\", and \\"Lowest Performer\\" based on the total number of working hours. Input A sequence of multiple datasets is provided as input. The end of the input is indicated by a single line with zeros. Each dataset is provided in the following format: n record1 record2 :: recordn The first line gives the number of employees n (3 ≤ n ≤ 50000), and the following n lines give information about the i-th employee. The information for each employee is given in the following format: id wd1 wd2 wd3 wd4 wd5 wd6 wd7 where id (1 ≤ id ≤ n) is the employee ID, and wd1, wd2, wd3, wd4, wd5, wd6, wd7 represent the working hours for each day from Monday to Sunday respectively. All working hours are integers between 0 and 24. Also, assume that no input is such that the total working hours are the same for multiple employees. Output For each input dataset, output the employee IDs for the following in separate lines: 1. Top Performer (highest total working hours) 2. Second Performer (second highest total working hours) 3. Lowest Performer (lowest total working hours) Example Input 6 1 8 8 8 8 8 8 8 2 9 9 9 9 9 9 9 3 7 7 7 7 7 7 7 4 6 6 6 6 6 6 6 5 10 10 10 10 10 10 10 6 5 5 5 5 5 5 5 4 1 8 8 8 8 8 8 8 2 5 5 5 5 5 5 5 3 10 10 10 10 10 10 10 4 7 7 7 7 7 7 7 0 Output 5 2 6 3 1 2","solution":"def find_performers(datasets): results = [] for dataset in datasets: n, *employees = dataset employees_data = [] for emp in employees: emp_data = emp.split() emp_id = int(emp_data[0]) working_hours = list(map(int, emp_data[1:])) total_hours = sum(working_hours) employees_data.append((emp_id, total_hours)) employees_data.sort(key=lambda x: x[1], reverse=True) top_performer = employees_data[0][0] second_performer = employees_data[1][0] lowest_performer = employees_data[-1][0] results.append((top_performer, second_performer, lowest_performer)) return results def process_input(input_data): datasets = [] current_dataset = [] for line in input_data.splitlines(): if line == \'0\': if current_dataset: datasets.append(current_dataset) break elif line.isdigit(): if current_dataset: datasets.append(current_dataset) current_dataset = [int(line)] else: current_dataset.append(line) return datasets"},{"question":"You are given an array of \'n\' integers representing the heights of buildings along a street. You can only see the buildings if there are no taller buildings in front of them when viewed from the left side (i.e., towards increasing indices). Your task is to determine how many buildings are visible from the left side of the array. ------Input------ The first line of the input contains an integer n (1 le n le 10^5) — the number of buildings. The second line of the input contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the heights of the buildings. ------Output------ Print the number of buildings that are visible from the left side. ------Examples------ Input 5 3 1 2 4 5 Output 3 Input 6 1 2 3 4 5 6 Output 6 ------Note------ For the first example, the visible buildings from the left side are those at indices 0, 3, and 4 (heights 3, 4, 5). For the second example, all buildings are visible since each subsequent building is taller than the previous one.","solution":"def count_visible_buildings(n, heights): Returns the number of buildings visible from the left side. if n == 0: return 0 visible_count = 1 max_height = heights[0] for i in range(1, n): if heights[i] > max_height: visible_count += 1 max_height = heights[i] return visible_count"},{"question":"In a small town, the local internet provider has decided to enhance its services by installing fiber optic cables connecting various key locations. These key points are positioned as nodes in a graph, with each pair of nodes connected by a fiber optic cable. The internet provider wants to ensure there is robust connectivity between these key points, aiming for a strong and reliable network design. The company has the cost estimates for installing a fiber optic cable between every pair of nodes. They also have a budget limit and aim to maximize the number of direct connections within this budget constraint. Furthermore, to enhance network reliability, they want to avoid creating any cycles within the network (thus forming a tree). Your task is to help the provider design the most cost-effective network that connects all key points without exceeding the given budget, while also maximizing the number of direct cable connections. -----Input----- The input consists of the following: 1. An integer n (1 ≤ n ≤ 20), the number of key points (nodes) in the town. 2. An integer B (1 ≤ B ≤ 10^6), the budget limit for installing cables. 3. An n x n matrix where each element array[i][j] (0 ≤ array[i][j] ≤ 10^4) represents the cost of installing a cable between node i and node j. array[i][j] = 0 if i = j. It is given that array[i][j] = array[j][i] for all valid i and j. -----Output----- Print the maximum number of direct connections that can be established without forming any cycles and without exceeding the budget. -----Example----- Input 5 15 0 3 9 8 2 3 0 7 6 4 9 7 0 5 10 8 6 5 0 1 2 4 10 1 0 Output 4 -----Note----- Consider a tree with nodes connected in a way that no cycle is formed. The tree with the maximum number of connections within the given budget constraint will be our solution.","solution":"def find_max_connections(n, B, array): # Helper function to find parent def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Helper function for union def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Creating list of all edges with their cost edges = [] for i in range(n): for j in range(i + 1, n): edges.append((array[i][j], i, j)) # Sorting edges based on cost edges.sort() parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) total_cost = 0 edge_count = 0 for cost, u, v in edges: if total_cost + cost > B: break root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: total_cost += cost union(parent, rank, root_u, root_v) edge_count += 1 return edge_count"},{"question":"Stacy loves creating sequences of numbers using a specific rule. She starts with an integer n and repeatedly applies the following operation: - If n is even, divide it by 2. - If n is odd, multiply it by 3 and add 1. The sequence ends when n reaches 1. Your task is to write a function that takes an integer n and returns the length of the sequence generated by this rule. **Input:** An integer n (1 ≤ n ≤ 10^6) **Output:** The length of the sequence generated before reaching 1. **Function Signature:** ```python def sequence_length(n: int) -> int: ``` **Example:** **Input:** ```python sequence_length(6) ``` **Output:** ```python 9 ``` **Explanation:** Starting with n=6, the sequence is: 6, 3, 10, 5, 16, 8, 4, 2, 1. The sequence length is 9.","solution":"def sequence_length(n: int) -> int: Return the length of the sequence generated by repeatedly applying the given operations to n until n reaches 1. length = 1 while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 length += 1 return length"},{"question":"Given an array of integers, return an array where each element at index `i` is the product of all elements in the original array except the one at `i`. You should solve it without using division and in O(N) time complexity. Example 1: Input: arr[] = [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: For index 0: The product is 2 * 3 * 4 = 24. For index 1: The product is 1 * 3 * 4 = 12. For index 2: The product is 1 * 2 * 4 = 8. For index 3: The product is 1 * 2 * 3 = 6. Example 2: Input: arr[] = [2, 3, 4, 5] Output: [60, 40, 30, 24] Explanation: For index 0: The product is 3 * 4 * 5 = 60. For index 1: The product is 2 * 4 * 5 = 40. For index 2: The product is 2 * 3 * 5 = 30. For index 3: The product is 2 * 3 * 4 = 24. Your Task: Write a function productExceptSelf(arr[], N) that takes an array `arr[]` and its size integer `N` as parameters and returns the array as described above. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 -10 ≤ arr[i] ≤ 10","solution":"def productExceptSelf(arr): Returns an array where each element at index i is the product of all elements in the original array except the one at i. n = len(arr) # Initialize the result array result = [1] * n # Calculate the prefix products prefix_product = 1 for i in range(n): result[i] = prefix_product prefix_product *= arr[i] # Calculate the suffix products and multiply with prefix products suffix_product = 1 for i in range(n-1, -1, -1): result[i] *= suffix_product suffix_product *= arr[i] return result"},{"question":"A company has a policy that requires all employees to change their computer passwords every month. A valid password must meet the following criteria: 1. The password length should be between 8 and 12 characters inclusive. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one digit. 5. The password must contain at least one special character from this set: `!@#%^&*()-+` You are tasked with writing a function to validate a given string based on the above password requirements. If the password is valid, return \\"Valid\\". Otherwise, return \\"Invalid\\". Write a function `validate_password` that accepts a single string parameter `password`. -----Input Format----- A string `password` of length 1 leq len(password) leq 100 containing the password to be validated. -----Output Format----- Print \\"Valid\\" if the password meets all the requirements, otherwise print \\"Invalid\\". -----Examples----- Input Abcdef1# Output Valid Input short1! Output Invalid Input Password123 Output Invalid Input Secure*Pass2 Output Valid -----Note----- In the first example, the password meets all the requirements: it has more than 8 characters, contains uppercase and lowercase letters, a digit, and a special character. In the second example, the password length is less than 8 characters, hence it is invalid. In the third example, the password does not contain a special character from the given set, hence it is invalid. In the fourth example, the password meets all the requirements: it has between 8 and 12 characters, contains uppercase and lowercase letters, a digit, and a special character.","solution":"import re def validate_password(password): Returns \\"Valid\\" if the password meets the specified criteria, otherwise returns \\"Invalid\\". if not (8 <= len(password) <= 12): return \\"Invalid\\" if not re.search(\\"[A-Z]\\", password): return \\"Invalid\\" if not re.search(\\"[a-z]\\", password): return \\"Invalid\\" if not re.search(\\"[0-9]\\", password): return \\"Invalid\\" if not re.search(\\"[!@#%^&*()-+]\\", password): return \\"Invalid\\" return \\"Valid\\""},{"question":"Given a rooted tree with 𝑛 vertices. The tree is rooted at vertex 1. For each vertex v (excluding the root), your task is to find the number of nodes in the subtree of v which have a different parent from v. For a rooted tree, the subtree of a vertex v includes v and all its descendants. You need to write a program to solve this problem for multiple queries. Each query contains a vertex v and the program should output how many nodes in the subtree of v have a different parent from v. **Input:** - The first line contains a single integer n (1 leq n leq 2 cdot 10^5), the number of vertices in the tree. - The next n-1 lines each contain two integers u and v, indicating an edge between vertices u and v. - The next line contains a single integer q (1 leq q leq 2 cdot 10^5), the number of queries. - The following q lines each contain a single integer v_i (2 leq v_i leq n), indicating a query for vertex v_i. **Output:** - For each query, output a single integer: the number of nodes in the subtree of v_i that have a different parent from v_i. **Example input:** ``` 7 1 2 1 3 2 4 2 5 3 6 3 7 3 2 3 4 ``` **Example output:** ``` 2 2 0 ``` **Explanation:** - For query 2: the subtree of vertex 2 includes nodes {2, 4, 5}. Both nodes 4 and 5 have different parents from vertex 2. Thus the output is 2 for this query. - For query 3: the subtree of vertex 3 includes nodes {3, 6, 7}. Both nodes 6 and 7 have different parents from vertex 3. Thus the output is 2 for this query. - For query 4: the subtree of vertex 4 includes only the node 4, which has no other descendants, hence 0.","solution":"def count_different_parent_nodes(n, edges, queries): from collections import defaultdict, deque # Build the tree as an adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Compute the parent and size of subtree for each vertex parent = {1: None} subtree_size = {} def dfs(node): subtree_size[node] = 1 for neighbor in tree[node]: if neighbor not in parent: parent[neighbor] = node dfs(neighbor) subtree_size[node] += subtree_size[neighbor] dfs(1) # Process each query and calculate the number of nodes with different parent result = [] for v in queries: result.append(subtree_size[v] - 1) return result"},{"question":"A magical kingdom has a network of cities connected by one-way roads. The kingdom’s map is represented as a directed graph where each city is a node and each road is a directed edge. The cities are labeled from 1 to N, and there are M one-way roads in the kingdom. The king wants to know the shortest path from the capital city (city with label 1) to every other city in the kingdom using the roads. If a city cannot be reached from the capital, the distance to that city should be considered infinite. Write a program that calculates the shortest path from the capital city to all other cities in the kingdom and outputs the distances. Input The input begins with a line containing two integers N and M, the number of cities and the number of roads, respectively. The next M lines contain three integers u, v, and w each, which indicates there is a one-way road from city u to city v with a distance of w. Constraints: * 1 leq N leq 10^5 * 1 leq M leq 10^6 * 1 leq u, v leq N * 1 leq w leq 10^4 Output The output should contain N integers. The i-th integer indicates the shortest distance from the capital city to city i+1. If the city cannot be reached, print -1 for its distance. Sample Input 1 5 6 1 2 1 1 3 4 2 3 2 2 4 7 3 5 3 4 5 1 Sample Output 1 0 1 3 8 6 Sample Input 2 3 2 1 2 4 2 3 5 Sample Output 2 0 4 9","solution":"import heapq def shortest_paths(N, M, roads): Calculates the shortest paths from the capital city (1) to every other city in the kingdom. :param N: Number of cities (nodes) :param M: Number of roads (edges) :param roads: List of tuples (u, v, w) where u -> v is a road of distance w :return: List of shortest distances from the capital city (city 1) to every other city. # Initialize graph graph = {i: [] for i in range(1, N + 1)} # Populate the graph with the edges for u, v, w in roads: graph[u].append((v, w)) # Initialize distances dictionary distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[1] = 0 # Priority queue for Dijkstra\'s algorithm pq = [(0, 1)] # (distance, node) while pq: current_distance, current_node = heapq.heappop(pq) # Skip stale entries if current_distance > distances[current_node]: continue # Process neighbors for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) # Convert distances dictionary to the required output format result = [] for i in range(1, N + 1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"Alice is a competitive programmer who likes to solve array-based problems. One day she came across a challenge where she needs to perform a very specific operation on an array. The challenge is to find the number of special triplets (i, j, k) such that 1 ≤ i < j < k ≤ N and the sum of elements at these indices in the array is divisible by a given number X. Alice found it a bit tricky and asks for your help to solve the problem. Can you help her by writing a program to count the number of special triplets? **Input:** - First line contains two integers N and X, where N is the length of the array and X is the divisor. - Second line contains N integers, representing the elements of the array. **Output:** - Output the number of special triplets (i, j, k) such that the sum of elements at these indices is divisible by X. **Constraints:** 1 ≤ N ≤ 500 1 ≤ Array elements ≤ 1000 1 ≤ X ≤ 1000 **SAMPLE INPUT** 6 5 1 2 3 4 5 6 **SAMPLE OUTPUT** 4","solution":"def count_special_triplets(N, X, arr): Returns the number of special triplets (i, j, k) such that the sum of elements at these indices in the array is divisible by X. Parameters: N (int): The number of elements in the array. X (int): The divisor. arr (List[int]): The array of integers. Returns: int: The count of special triplets. count = 0 for i in range(N): for j in range(i + 1, N): for k in range(j + 1, N): if (arr[i] + arr[j] + arr[k]) % X == 0: count += 1 return count"},{"question":"A city is built on a rectangular grid of streets, which consists of H horizontal streets and W vertical streets. Each intersection of the streets can be seen as a cell in a grid with H rows and W columns. You are to place a series of streetlights in this city. A streetlight can illuminate any row and column that passes through its position. Your task is to determine the minimum number of streetlights needed to fully illuminate all intersections in the grid. -----Constraints----- - 1 ≤ H, W ≤ 10^5 -----Input----- The input is given from Standard Input in the following format: H W -----Output----- Print the minimum number of streetlights needed to fully illuminate the city grid. -----Sample Input----- 3 4 -----Sample Output----- 3 In this case, placing the streetlights in intersections (1,1), (2,2), and (3,3) will cover all rows and columns.","solution":"def min_streetlights(H, W): Returns the minimum number of streetlights needed to fully illuminate all intersections in an HxW grid. # The number of streetlights needed is the minimum of H and W. return min(H, W)"},{"question":"You are given a linked list with n nodes, where each node contains an integer value. You need to process q queries on this linked list. There are two types of queries: 1. Modify the value of a node: This query is represented by `1`, followed by two integers i and x (`1 leq i leq n`, `1 leq x leq 10^6). It means that the value of the i-th node should be updated to x. 2. Find the sum of a sublist: This query is represented by `2`, followed by two integers i and j (`1 leq i leq j leq n`). It means that you need to find the sum of values from the i-th node to the j-th node, inclusive. After processing all queries, output the results of all sum queries. -----Input----- The first line contains two integers n and q (1 leq n, q leq 300 000) — the number of nodes in the linked list and the number of queries, respectively. The second line contains n integers representing the initial values of the linked list. Each of the next q lines contains a query in one of the following formats: - `1 i x`: Change the value of the i-th node to x. - `2 i j`: Output the sum of the values from the i-th node to the j-th node, inclusive. -----Output----- For each query of type `2 i j`, output the sum of the values from the i-th node to the j-th node, inclusive, on a new line. -----Examples----- Input 5 3 1 2 3 4 5 2 1 3 1 2 10 2 1 3 Output 6 14 Input 4 4 4 7 2 9 2 1 4 1 3 5 2 2 4 2 3 4 Output 22 21 14 -----Note----- In the first sample: - The sum of nodes from index 1 to 3 is initially `1 + 2 + 3 = 6`. - After updating the value of the second node to 10, the sum of nodes from index 1 to 3 becomes `1 + 10 + 3 = 14`. In the second sample: - The sum of nodes from index 1 to 4 is initially `4 + 7 + 2 + 9 = 22`. - After updating the value of the third node to 5, the sum of nodes from index 2 to 4 becomes `7 + 5 + 9 = 21`. - Similarly, the sum of nodes from index 3 to 4 is `5 + 9 = 14`.","solution":"def process_queries(n, q, values, queries): results = [] for query in queries: if query[0] == 1: # Modify the value of a node i, x = query[1], query[2] values[i - 1] = x elif query[0] == 2: # Find the sum of a sublist i, j = query[1], query[2] results.append(sum(values[i - 1:j])) return results"},{"question":"Given a list of unique integers, determine whether it is possible to rearrange the list such that the difference between any two adjacent elements is not equal to 1. Example 1: Input: arr = [3, 4, 5, 1, 7] Output: False Explanation: Rearranging the array in any order results in at least one pair of adjacent elements with a difference of 1. Example 2: Input: arr = [1, 3, 7, 9] Output: True Explanation: One possible arrangement is [1, 3, 9, 7], where no adjacent elements have a difference of 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canRearrange() which takes the list arr as input and returns a boolean indicating whether such an arrangement is possible. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ length of arr ≤ 10^5 -10^6 ≤ arr[i] ≤ 10^6","solution":"def canRearrange(arr): Determines whether it is possible to rearrange the list such that the difference between any two adjacent elements is not equal to 1. Parameters: arr (list): List of unique integers Returns: bool: True if such a rearrangement is possible, otherwise False if not arr: return True # Sort the array arr.sort() # Check if there exists any adjacent elements with difference of 1 for i in range(1, len(arr)): if arr[i] - arr[i - 1] == 1: return False return True"},{"question":"Given a number N. The task is to generate a pattern of numbers where each row contains increasing numbers starting from 1 up to the row number. The first row starts with the number 1, the second row starts with the number 2 and goes up to 3, and so on. Example 1: Input: N = 4 Output: 1 2 3 4 5 6 7 8 9 10 Explanation: First row has 1 number starting from 1, second row has 2 numbers starting from 2 and 3, third row has 3 numbers starting from 4, 5, and 6, fourth row has 4 numbers starting from 7, 8, 9, and 10. Example 2: Input: N = 3 Output: 1 2 3 4 5 6 Explanation: First row has 1 number starting from 1, second row has 2 numbers starting from 2 and 3, third row has 3 numbers starting from 4, 5, and 6. Your Task: You don\'t need to read input. Your task is to complete the function printNumberPattern() which takes an integer N as an input parameter and print the above pattern. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 100","solution":"def printNumberPattern(N): Prints a pattern of numbers where each row contains increasing numbers starting from 1 up to the row number. :param N: An integer representing the number of rows current_number = 1 for row in range(1, N + 1): pattern = [] for _ in range(row): pattern.append(str(current_number)) current_number += 1 print(\\" \\".join(pattern))"},{"question":"You are given an array of n integers and a set of m queries. Each query consists of an integer x. For each query, determine if there exists a pair of elements in the array whose sum is equal to x. If such a pair exists, print \\"Yes\\", otherwise print \\"No\\". Example 1: Input: n = 5, arr = [1, 4, 45, 6, 10], m = 2, queries = [16, 21] Output: Yes No Explanation: For the first query, the pair (6, 10) sums to 16. For the second query, no pair of elements sum to 21. Example 2: Input: n = 4, arr = [1, 2, 3, 4], m = 3, queries = [5, 7, 8] Output: Yes Yes No Explanation: For the first query, the pair (1, 4) sums to 5. For the second query, the pair (3, 4) sums to 7. For the third query, no pair of elements sum to 8. Your Task: You don\'t need to read or print anything. Your task is to complete the function querySumPairs() which takes n (the number of elements), arr (the array of integers), m (the number of queries), and queries (the set of queries) as input parameters and returns a list of strings (\\"Yes\\" or \\"No\\") for each query. Expected Time Complexity: O(n + m) Expected Space Complexity: O(n) Constraints: 1 <= n <= 10^5 1 <= arr[i] <= 10^9 1 <= m <= 10^5 1 <= queries[i] <= 2 * 10^9","solution":"def querySumPairs(n, arr, m, queries): Determines for each query if there exists a pair of elements in the array whose sum is equal to the query value. Parameters: n (int): Number of elements in arr. arr (list of int): The list of integers. m (int): Number of queries. queries (list of int): The list of query values. Returns: list of str: List of \\"Yes\\" or \\"No\\" for each query value. nums = set() results = [] for num in arr: nums.add(num) for query in queries: found = False for num in arr: if query - num in nums and (query - num != num or arr.count(num) > 1): found = True break results.append(\\"Yes\\" if found else \\"No\\") return results"},{"question":"You are given an integer array `arr` of length `n` (1 ≤ n ≤ 100) consisting of unique elements, and an integer `k` (1 ≤ k ≤ 1000). You need to find the minimum possible difference between the maximum and minimum elements in any subarray of length `k` that can be obtained from `arr`. Write a program to find and print this minimum difference. -----Input----- The first line contains the integer `n`. The second line contains `n` integers which form the array `arr`. The third line contains the integer `k`. -----Output----- Print a single integer representing the minimum possible difference between the maximum and minimum elements in any subarray of length `k`. -----Examples----- Input 5 1 5 8 10 15 3 Output 5 Input 4 10 20 30 40 2 Output 10 -----Note----- In the first example, we have the array [1, 5, 8, 10, 15] and k = 3. The possible subarrays of length 3 are [1, 5, 8], [5, 8, 10], and [8, 10, 15]. - For subarray [1, 5, 8], the difference is 8 - 1 = 7. - For subarray [5, 8, 10], the difference is 10 - 5 = 5. - For subarray [8, 10, 15], the difference is 15 - 8 = 7. The minimum possible difference is 5. In the second example, the array [10, 20, 30, 40] with k = 2 gives subarrays [10, 20], [20, 30], and [30, 40]. - For subarrays [10, 20], [20, 30], and [30, 40], the differences are 10, 10, and 10 respectively. So, the minimum possible difference is 10.","solution":"def min_diff_subarray(arr, k): n = len(arr) if k > n: return -1 arr.sort() min_diff = float(\'inf\') for i in range(n - k + 1): current_diff = arr[i + k - 1] - arr[i] if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"The manager of a multi-user system wants to analyze user logins and statistics for each user. Your task is to implement a system that processes a list of log entries which contain information about user logins and logouts during a single day and computes the amount of time each user spent logged in. A login event does not always have a corresponding logout before the end of the log entries. The log entries are given in chronological order and a user can only be logged in once. -----Input----- The first line of the input contains a single number n, where 1 leq n leq 100000. The next n lines contains log entries in the format `HH:MM action username`, where - `HH:MM` is the time in hours and minutes (00 leq HH leq 23) and (00 leq MM leq 59), - `action` is either \\"login\\" or \\"logout\\", - `username` is the username of the user (a string of up to 20 characters consisting of lower case letters and digits). -----Output----- For each user who logged in and logged out during the given period, output a line with the username followed by the total time they were logged in, in the format `HH:MM`. If a user did not log out by the end of the log entries, assume the user was logged out at 23:59. Users should be listed in alphabetical order. -----Examples----- Sample Input 1: 4 09:00 login alice 12:00 logout alice 13:00 login bob 13:45 logout bob Sample Output 1: alice 03:00 bob 00:45 Sample Input 2: 5 08:30 login charlie 11:00 login david 12:30 logout charlie 23:59 logout david 22:15 login alice Sample Output 2: alice 01:44 charlie 04:00 david 12:59","solution":"def parse_time(time_str): Parses a time string in HH:MM format and returns the total minutes since midnight. hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes def format_time(total_minutes): Formats total minutes as a string in HH:MM format. hours = total_minutes // 60 minutes = total_minutes % 60 return f\\"{hours:02}:{minutes:02}\\" def compute_login_times(n, log_entries): user_times = {} current_sessions = {} for entry in log_entries: time_str, action, username = entry.split() current_time = parse_time(time_str) if action == \\"login\\": current_sessions[username] = current_time elif action == \\"logout\\" and username in current_sessions: login_time = current_sessions.pop(username) user_times[username] = user_times.get(username, 0) + (current_time - login_time) # Handle users still logged in at the end of the day (23:59) day_end_time = parse_time(\\"23:59\\") for username, login_time in current_sessions.items(): user_times[username] = user_times.get(username, 0) + (day_end_time - login_time) # Format output in alphabetical order sorted_users = sorted(user_times.keys()) result = [] for username in sorted_users: result.append(f\\"{username} {format_time(user_times[username])}\\") return result"},{"question":"// Given a sequence of parentheses, rearrange them to make the longest possible continuous sequence of valid parentheses. Problem Statement You have a sequence of parentheses represented by a string S, containing only characters \'(\' and \')\'. The goal is to rearrange the characters in S to form the longest possible valid parentheses sequence. A valid parentheses sequence is defined as: - An empty string \\"\\" is a valid sequence. - If \\"A\\" and \\"B\\" are valid sequences, then \\"AB\\" is a valid sequence. - If \\"A\\" is a valid sequence, then \\"(A)\\" is a valid sequence. You can rearrange the characters in any way, but you should return the length of the longest valid sequence you can form. Input * The input consists of a single string S, containing only characters \'(\' and \')\'. * 1 ≤ |S| ≤ 2 × 10^6 Output Output the length of the longest valid parentheses sequence that can be formed by rearranging the characters in the string S. Example Input (()()) Output 6 Input ((())))) Output 6 Explanation: In the first example, the entire string is already a valid parentheses sequence. In the second example, by rearranging, we can form the sequence \\"((()))\\" which has length 6. Extra parentheses at the end cannot be paired, so they do not contribute to the valid sequence length.","solution":"def longest_valid_parentheses_sequence_length(s): Given a sequence of parentheses, this function returns the length of the longest possible continuous sequence of valid parentheses that can be formed by rearranging the characters. # Count the number of open and close parentheses open_count = s.count(\'(\') close_count = s.count(\')\') # The longest valid parentheses sequence is determined by the minimum count of pairs we can form return 2 * min(open_count, close_count)"},{"question":"A farm keeps track of their cattle using unique identification tags. Each tag consists of a string formed by a letter, indicating the breed (\'A\' for Angus, \'H\' for Hereford, \'J\' for Jersey, \'G\' for Guernsey), followed by a four-digit number. The farm currently has some tags missing, and they want to determine which ones those are. Note All sequences of identification tags from 0001 to 9999 are valid within each breed. Input The first line contains an integer n (0 ≤ n ≤ 39996), the number of existing cattle tags. The following n lines each contain a string representing an existing cattle tag. Output Print the missing tags. Each tag should be printed on a new line in the same format as the existing tags. Arrange the missing tags in the following order: * Print tags for breed \'A\', \'H\', \'J\', \'G\' in this order. * For tags of the same breed, print in ascending numerical order. Example Input 5 A0001 H0001 J9999 G0500 A0500 Output A0002 A0003 ... A0499 A0501 ... A9999 H0002 ... H9999 J0001 ... J9998 G0001 ... G0499 G0501 ... G9999","solution":"def find_missing_tags(n, existing_tags): all_tags = {\'A\': set(), \'H\': set(), \'J\': set(), \'G\': set()} for breed in all_tags: all_tags[breed] = {f\\"{breed}{str(i).zfill(4)}\\" for i in range(1, 10000)} for tag in existing_tags: breed = tag[0] all_tags[breed].discard(tag) missing_tags = [] for breed in \\"AHJG\\": missing_tags.extend(sorted(all_tags[breed])) return missing_tags"},{"question":"Write a function `normalize_sentences` that takes a string of text as input and ensures that each sentence starts with a capital letter and ends with a single period. Any extraneous whitespace or punctuation should be removed. For the purposes of this task, a sentence is defined as a string segment that ends with a period, exclamation mark, or question mark. For example, normalize_sentences(\\"this is a sentence! here is another one? and here\'s a third sentence. multiple lines, irregular spacing!\\") // returns \\"This is a sentence. Here is another one. And here\'s a third sentence. Multiple lines, irregular spacing.\\" normalize_sentences(\\"incorrect punctuation.usage. anotherone here!Also this?\\") // returns \\"Incorrect punctuation. Usage. Anotherone here. Also this.\\" * The function should handle any string of contiguous text containing letters, digits, spaces, and punctuation (periods, exclamation marks, question marks). * All punctuation marks should be removed except for the ending periods in each sentence. * All sentences should be properly capitalized and separated by a single space. * Parameters that are not strings should return `undefined`. The tests should check the following: 1. Ensure the returned string starts with a capital letter for each sentence. 2. Ensure each sentence ends with a single period. 3. Ensure extraneous spaces are removed. 4. Check the string maintains its original words and sequences, but is properly normalized. 5. The function should return `undefined` for non-string inputs.","solution":"def normalize_sentences(text): if not isinstance(text, str): return \'undefined\' import re # Split the text into sentences based on ending punctuation sentences = re.split(r\'[.!?]s*\', text) normalized_sentences = [] for sentence in sentences: sentence = sentence.strip() if sentence: sentence = re.sub(r\'s+\', \' \', sentence) # Remove extra spaces sentence = re.sub(r\'[^a-zA-Z0-9s]\', \'\', sentence) # Remove unwanted punctuation sentence = sentence.capitalize() normalized_sentences.append(sentence) # Join the normalized sentences with a period return \'. \'.join(normalized_sentences) + \'.\' if normalized_sentences else \'\'"},{"question":"Given an array of integers, implement a function to find the longest subarray in which every pair of adjacent elements has an absolute difference of 1. Function signature: `def longest_subarray(arr: List[int]) -> List[int]:` # Input - An array `arr` of integers where `1 <= len(arr) <= 10^5` and `-10^9 <= arr[i] <= 10^9`. # Output - Return a subarray that has the maximum length and meets the criteria. If there are multiple subarrays of equal length, return the one which appears first in the array. # Examples ```python longest_subarray([2, 2, 3, 4, 2, 3, 4, 3, 2]) # returns [2, 3, 2] longest_subarray([1, 2, 3, 4, 5, 6, 7, 8, 9]) # returns [1, 2, 3, 4, 5, 6, 7, 8, 9] longest_subarray([1, 3, 5, 7, 9, 11]) # returns [1] ``` # Constraints - The subarray\'s length must be maximal. - If multiple subarrays have the same length, return the first occurring subarray.","solution":"from typing import List def longest_subarray(arr: List[int]) -> List[int]: if len(arr) == 1: return arr max_len = 1 current_len = 1 max_start_idx = 0 current_start_idx = 0 for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) == 1: current_len += 1 else: if current_len > max_len: max_len = current_len max_start_idx = current_start_idx current_len = 1 current_start_idx = i if current_len > max_len: max_len = current_len max_start_idx = current_start_idx return arr[max_start_idx:max_start_idx + max_len]"},{"question":"Given a sentence containing words separated by spaces, identify the length of the longest substring which has words arranged in alphabetically increasing order. Words are considered in alphabetical order if for each word in the substring, the first letter of the word is alphabetically less than or equal to the first letter of the next word. For example: - For the sentence \\"apple banana cherry\\", the longest alphabetically increasing substring is \\"apple banana cherry\\" with length 3. - For the sentence \\"banana apple cherry\\", the substrings are \\"banana\\" and \\"apple cherry\\", with \\"apple cherry\\" being the longest of length 2. - For the sentence \\"zebra apple mango\\", the longest substring is either \\"zebra apple\\" or \\"apple mango\\" with length 2. Write a function `longestAlphabeticSubstring(sentence: String) -> Int` that takes the input sentence and returns the length of the longest alphabetically increasing substring. For example: - longestAlphabeticSubstring(\\"apple banana cherry\\") should return 3 - longestAlphabeticSubstring(\\"banana apple cherry\\") should return 2 - longestAlphabeticSubstring(\\"zebra apple mango\\") should return 2 - longestAlphabeticSubstring(\\"kiwi limpa jam\\") should return 3","solution":"def longestAlphabeticSubstring(sentence): words = sentence.split() max_length = 1 current_length = 1 for i in range(1, len(words)): if words[i][0] >= words[i-1][0]: current_length += 1 else: current_length = 1 if current_length > max_length: max_length = current_length return max_length"},{"question":"Meetings Scheduler You are tasked with implementing a function to manage meeting schedules. The function should determine if a new meeting can be scheduled without overlapping with existing ones. Meetings are represented as a list of tuples, where each tuple contains the meeting\'s start and end times in 24-hour format. Write a function called `can_schedule_meeting(existing_meetings, new_meeting)` that takes in two arguments: 1. `existing_meetings`: A list of tuples, where each tuple contains two integers representing the start and end times of an already scheduled meeting. For example, `[(9, 10), (13, 14), (15, 16)]`. 2. `new_meeting`: A tuple containing two integers representing the start and end times of the new meeting you want to schedule. For example, `(10, 11)`. The function should return `True` if the new meeting can be scheduled without overlapping any existing meetings, and `False` otherwise. Meetings are not considered overlapping if one ends exactly when another begins. # Examples ```python existing_meetings = [(9, 10), (13, 14), (15, 16)] new_meeting = (10, 11) print(can_schedule_meeting(existing_meetings, new_meeting)) # Output: True existing_meetings = [(9, 10), (10, 11), (13, 14), (15, 16)] new_meeting = (10, 10:30) print(can_schedule_meeting(existing_meetings, new_meeting)) # Output: False existing_meetings = [(9, 10), (10, 11), (13, 14), (15, 16)] new_meeting = (11, 12) print(can_schedule_meeting(existing_meetings, new_meeting)) # Output: True ``` # Constraints - The start and end times of meetings are integers in the range [0, 23]. - The end time of a meeting is always greater than the start time. - The list `existing_meetings` contains at most 100 meetings. - Meetings do not span multiple days (i.e., start and end times are within the same day).","solution":"def can_schedule_meeting(existing_meetings, new_meeting): Determines if a new meeting can be scheduled without overlapping with existing ones. :param existing_meetings: list of tuples, where each tuple contains two integers representing the start and end times of an existing meeting. :param new_meeting: tuple containing two integers representing the start and end times of the new meeting. :return: True if the new meeting can be scheduled without overlapping, False otherwise. new_start, new_end = new_meeting for start, end in existing_meetings: # Check if new meeting overlaps with existing meeting if new_start < end and new_end > start: return False return True"},{"question":"**Problem Statement:** Given a linked list, your task is to arrange the linked list in such a way that all the even-indexed nodes are placed after the odd-indexed nodes. You should not create any new nodes but rearrange the existing nodes. The indices are considered 1-based. Consider the following example for clarification: **Example:** - Input: 1 -> 2 -> 3 -> 4 -> 5 -> NULL - Output: 1 -> 3 -> 5 -> 2 -> 4 -> NULL In the above example, the nodes at odd positions (1, 3, 5) are 1, 3, 5 and the nodes at even positions (2, 4) are 2, 4. We place all odd-indexed nodes first followed by even-indexed nodes. **Function Signature:** ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rearrange_even_odd(head: ListNode) -> ListNode: pass ``` **Input:** - `head` (ListNode): The head of the linked list, where 1 ≤ number of nodes ≤ 1000 and node values are between -1000 and 1000. **Output:** - Return the head of the rearranged linked list. **Constraints:** - The function should handle both even and odd count of nodes. - Do not create new nodes in the process. # Example: **Example 1:** - Input: - Linked List: 1 -> 2 -> 3 -> 4 -> 5 -> NULL - Output: - Linked List: 1 -> 3 -> 5 -> 2 -> 4 -> NULL **Example 2:** - Input: - Linked List: 2 -> 1 -> 3 -> 5 -> 6 -> 4 -> 7 -> NULL - Output: - Linked List: 2 -> 3 -> 6 -> 7 -> 1 -> 5 -> 4 -> NULL Implement the function `rearrange_even_odd` such that it arranges the nodes according to the problem requirements.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rearrange_even_odd(head: ListNode) -> ListNode: if not head or not head.next: return head odd = head even = head.next even_head = even while even and even.next: odd.next = even.next odd = odd.next even.next = odd.next even = even.next odd.next = even_head return head"},{"question":"Given an integer num, the task is to return a string representing the given number in \\"Excel Column Title\\" format. In Excel sheets, columns are labeled from \'A\' to \'Z\', \'AA\' to \'ZZ\', and so on. Example 1: Input: num = 28 Output: \\"AB\\" Explanation: 1 -> \'A\' 2 -> \'B\' ... 26 -> \'Z\' 27 -> \'AA\' 28 -> \'AB\' Example 2: Input: num = 701 Output: \\"ZY\\" Explanation: 1 -> \'A\' 2 -> \'B\' ... 26 -> \'Z\' ... 701 -> \'ZY\' Example 3: Input: num = 1 Output: \\"A\\" Explanation: 1 -> \'A\' Your Task: You don\'t need to read input or print anything. Your task is to complete the function convertToTitle() which takes an Integer num as input and returns the corresponding Excel Column Title as a string. Expected Time Complexity: O(log num) Expected Auxiliary Space: O(1) Constraints: 1 <= num <= 10^9","solution":"def convertToTitle(num): Converts a given integer to its corresponding Excel sheet column title. result = \\"\\" while num > 0: num -= 1 result = chr(num % 26 + 65) + result num //= 26 return result"},{"question":"In the world of magical creatures, there are several types of creatures, each with a specific weight. The magical creatures are arranged in a line, and we want to divide them into the minimum number of contiguous subarrays such that the sum of the weights in each subarray does not exceed a given limit. For example, if we have the weights `[1, 2, 3, 4, 5]` and the limit is `5`, we can divide them into subarrays `[1, 2]`, `[3]`, `[4]`, and `[5]`. Write a function to calculate the minimum number of contiguous subarrays needed to satisfy the given condition. -----Function Signature----- ```python def min_subarrays(weights: List[int], limit: int) -> int: # Your code here ``` -----Inputs----- 1. `weights`: A list of integers where each integer represents the weight of a magical creature (1 leq weights[i] leq 100) and the length of the list is 1 leq len(weights) leq 1000. 2. `limit`: An integer representing the maximum allowed sum of weights for any subarray (1 leq limit leq 1000). -----Outputs----- An integer representing the minimum number of contiguous subarrays required. -----Examples----- Sample Input 1: ```python weights = [1, 2, 3, 4, 5] limit = 5 ``` Sample Output 1: ```python 4 ``` Sample Input 2: ```python weights = [4, 3, 2, 6, 1] limit = 6 ``` Sample Output 2: ```python 4 ```","solution":"from typing import List def min_subarrays(weights: List[int], limit: int) -> int: subarray_count = 0 current_sum = 0 for weight in weights: if current_sum + weight <= limit: current_sum += weight else: subarray_count += 1 current_sum = weight # Increment count for the final subarray if current_sum > 0: subarray_count += 1 return subarray_count"},{"question":"Ravi is a botany enthusiast and is fascinated with the structure of different trees. He is working on a special kind of binary tree, which he calls a \\"Hierarchy Tree\\". Ravi defines a Hierarchy Tree as follows: 1. A tree node has a value assigned to it. 2. Each node in the tree can have at most two children. 3. The value of a node\'s left child must be less than the node\'s value, and the value of the node\'s right child must be greater than the node\'s value. 4. All nodes in the tree must have unique values. Ravi wants to know the number of different Hierarchy Trees that can be formed using a given set of distinct integers. He needs your help to calculate this efficiently. Input Format The first line contains an integer t, the number of test cases. Each of the following t lines contains the integer n, the number of distinct integers. Constraints 1 leq t leq 10 1 leq n leq 1000 Output Format For each test case, output the number of different Hierarchy Trees that can be formed using n distinct integers. The result should be given modulo 100000007 (10^8+7). Sample Input 2 3 4 Sample Output 5 14 Explanation For the first test case, there are 5 distinct possible binary trees: 1. Root = 1, right child = 2, right grandchild = 3 2. Root = 1, right child = 3, left grandchild = 2 3. Root = 2, left child = 1, right child = 3 4. Root = 3, left child = 2, left grandchild = 1 5. Root = 3, left child = 1, right grandchild = 2 For the second test case, there are 14 distinct possible binary trees using four distinct integers. Complete the task by calculating the different possible Hierarchy Trees for other inputs similarly.","solution":"def count_hierarchy_trees(n): Returns the number of different Hierarchy Trees that can be formed using n distinct integers. The result is computed modulo 100000007. MOD = 100000007 # Use dynamic programming to compute the number of unique BSTs for each number upto n dp = [0] * (n + 1) # Base case dp[0] = 1 # An empty tree is considered as one unique BST # Fill the DP table for nodes in range(1, n + 1): total_trees = 0 # For each possible root, calculate the number of unique left and right subtrees for root in range(1, nodes + 1): left_trees = dp[root - 1] right_trees = dp[nodes - root] total_trees = (total_trees + (left_trees * right_trees) % MOD) % MOD dp[nodes] = total_trees return dp[n] def solve(test_cases): results = [] for n in test_cases: results.append(count_hierarchy_trees(n)) return results"},{"question":"You are given a sequence of integers representing heights of buildings in a row. Your task is to determine the largest rectangular area that can be formed under the histogram made by these buildings. Each rectangle is bound by the width of the buildings and their respective heights in the sequence. The buildings must be contiguous, thus the rectangle cannot span over any non-adjacent buildings. Constraints * 1 leq length of the sequence leq 10^5 * 1 leq height of each building leq 10^6 Input Input is given from Standard Input in the following format: n h_1 h_2 ldots h_n Where \'n\' represents the number of buildings, and h_i represents the height of the i-th building. Output Output a single integer, which is the maximum rectangular area. Examples Input 6 2 1 5 6 2 3 Output 10 Input 8 6 2 5 4 5 1 6 Output 12","solution":"def largest_rectangle_area(heights): Calculate the largest rectangle area in a histogram represented by `heights`. Args: heights (List[int]): List of integers representing the heights of the buildings. Returns: int: The area of the largest rectangle. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a string `s` and an integer `k`, the task is to reverse the first `k` characters for every `2k` characters counting from the start of the string. If there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and leave the other as original. Implement a function `reverseStr` that takes a string `s` and an integer `k` and returns the modified string. ```python def reverseStr(s: str, k: int) -> str: n = len(s) s = list(s) for i in range(0, n, 2*k): s[i:i+k] = reversed(s[i:i+k]) return \\"\\".join(s) ``` Example 1: Input: s = \\"abcdefg\\", k = 2 Output: \\"bacdfeg\\" Explanation: Reverse the first 2 characters of the first 2*k (4) characters: \\"bacd\\". The next 2*k characters are \\"efg\\", but since there are fewer than `k` characters left, all are reversed: \\"egf\\". Example 2: Input: s = \\"a\\", k = 2 Output: \\"a\\" Explanation: There are fewer than `k` characters, so all are reversed. Since reversing a single character results in the same character, the output is \\"a\\". Note: - The string will only contain lowercase English characters. - 1 <= k <= 1000 - 1 <= len(s) <= 10000","solution":"def reverseStr(s: str, k: int) -> str: Reverses the first k characters for every 2k characters in string s. n = len(s) s = list(s) for i in range(0, n, 2 * k): s[i:i + k] = reversed(s[i:i + k]) return \\"\\".join(s)"},{"question":"In a city, there are n intersections connected by m unidirectional roads. Each intersection has multiple arrows pointing from it to other intersections, forming a directed graph. A city planner wants to build a special path - the Longest Acyclic Path (LAP) - that starts from any intersection and ends at any intersection, possibly visiting some intersections in between, such that no intersection is visited more than once. The length of this path is the number of roads (arrows) included in the path. Given the intersection information and road connections, determine the length of this Longest Acyclic Path. -----Input----- The first line of input contains two integers n and m (2 ≤ n ≤ 200 000, 1 ≤ m ≤ 500 000) — the number of intersections and the number of unidirectional roads. Each of the next m lines contains two integers x and y (1 ≤ x, y ≤ n), representing a road directed from intersection x to intersection y. -----Output----- Print a single integer — the length of the Longest Acyclic Path in the city. -----Examples----- Input 5 6 1 2 2 3 3 4 1 3 3 5 2 5 Output 3 Input 4 3 1 2 2 3 3 4 Output 3 -----Explanation----- In the first example, the longest path is 1 -> 2 -> 3 -> 5 or 1 -> 2 -> 3 -> 4, both of which have a length of 3. In the second example, the path 1 -> 2 -> 3 -> 4 has a length of 3, which is the longest path.","solution":"from collections import defaultdict, deque def longest_acyclic_path(n, m, roads): # Create adjacency list graph = defaultdict(list) indegree = [0] * (n + 1) for x, y in roads: graph[x].append(y) indegree[y] += 1 # Topological sort using Kahn\'s algorithm topo_sort = [] queue = deque([i for i in range(1, n + 1) if indegree[i] == 0]) while queue: node = queue.popleft() topo_sort.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # Distance array to store the longest path distance dist = [0] * (n + 1) for u in topo_sort: for v in graph[u]: if dist[v] < dist[u] + 1: dist[v] = dist[u] + 1 return max(dist)"},{"question":"Adam is an avid gardener who loves arranging his plants in a specific pattern. He recently came up with a new type of arrangement he calls the \\"Beautiful Cluster\\". In this task, you are required to help Adam by calculating the number of possible Beautiful Clusters. A Beautiful Cluster has the following properties: - It is a sequence of plants represented by integers. - The sequence must be of a given length N. - Each integer in the sequence can range from 1 to a given number M (both inclusive). - Each integer in the sequence must appear exactly once. Your task is to calculate the number of possible Beautiful Clusters modulo 10^9+7 for each test case. Input: - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains two integers N and M separated by a space. Output: For each test case, print the number of possible Beautiful Clusters modulo 10^9+7. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 1000 SAMPLE INPUT: 3 3 3 4 5 2 4 SAMPLE OUTPUT: 6 120 12 Explanation: [Case 1:] For N = 3 and M = 3, possible Beautiful Clusters are sequences of length 3 where each number from 1 to 3 appears exactly once. There are 6 such permutations. [Case 2:] For N = 4 and M = 5, possible Beautiful Clusters are sequences of length 4 chosen from numbers 1 to 5. The number of ways to choose 4 numbers from 5 and then permuting them is calculated as 5C4 * 4!, which equals 120. [Case 3:] For N = 2 and M = 4, possible Beautiful Clusters are sequences of length 2 chosen from numbers 1 to 4. The number of ways to choose 2 numbers from 4 and then permuting them is calculated as 4C2 * 2!, which equals 12.","solution":"def factorial(n): Calculates the factorial of n modulo 10^9+7 MOD = 10**9 + 7 result = 1 for i in range(2, n+1): result = (result * i) % MOD return result def combinations(n, k): Calculates n choose k modulo 10^9+7 if k > n: return 0 MOD = 10**9 + 7 num = factorial(n) den = (factorial(k) * factorial(n - k)) % MOD return (num * pow(den, MOD-2, MOD)) % MOD def beautiful_clusters(n, m): Calculates the number of beautiful clusters for a given N and M modulo 10^9+7 MOD = 10**9 + 7 if n > m: return 0 clusters = (combinations(m, n) * factorial(n)) % MOD return clusters def process_input_and_output(test_cases): results = [] for n, m in test_cases: results.append(beautiful_clusters(n, m)) return results # Example Usage if __name__ == \\"__main__\\": T = int(input()) test_cases = [tuple(map(int, input().split())) for _ in range(T)] results = process_input_and_output(test_cases) for result in results: print(result)"},{"question":"Given three arrays arr1, arr2, and arr3 of size N each, find all the unique elements that are present in all three arrays. Example 1: Input: N = 6 arr1[] = {1, 5, 10, 20, 40, 80} arr2[] = {6, 7, 20, 80, 100} arr3[] = {3, 4, 15, 20, 30, 70, 80, 120} Output: 20 80 Explanation: 20 and 80 are the common elements present in all three arrays. Example 2: Input: N = 5 arr1[] = {3, 6, 7, 15, 45} arr2[] = {9, 15, 20, 30} arr3[] = {15, 18, 25, 45, 60} Output: 15 Explanation: 15 is the only element present in all three arrays. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findCommonElements() which takes arr1, arr2, arr3, and N as input parameters and returns a list of integers containing all the unique elements that are present in all three arrays in sorted order. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{4} 1 <= arr1[i], arr2[i], arr3[i] <= 10^{9}","solution":"def findCommonElements(arr1, arr2, arr3, N): Find all the unique elements that are present in all three arrays. Parameters: arr1, arr2, arr3 : list of int Three arrays of integers. N : int Length of the arrays. Returns: list of int List of unique integers present in all three arrays. # Convert arrays to sets to find common elements set1 = set(arr1) set2 = set(arr2) set3 = set(arr3) # Find intersection of the three sets common_elements = set1.intersection(set2).intersection(set3) # Return the sorted list of common elements return sorted(common_elements)"},{"question":"You are given two circles on a 2D plane. Each circle is defined by its center coordinates and radius. Determine if the two circles intersect or touch each other. The interior of the circle is considered to be part of the circle, i.e., if one circle is completely inside another, they do intersect. If the two circles only share one common point, they are considered to touch and thereby intersect. -----Input----- The input data consists of two lines, one for each circle. Each line contains three integers: the x-coordinate of the center, the y-coordinate of the center, and the radius of the circle. All values are integers and between -1000 and 1000 for the coordinates, and between 1 and 1000 for the radius. -----Output----- Print \\"Yes\\" if the circles intersect or touch, otherwise print \\"No\\". You can print each letter in any case (upper or lower). -----Examples----- Input 0 0 5 5 0 5 Output YES Input 0 0 5 10 0 5 Output YES Input 0 0 5 11 0 5 Output NO -----Note----- In the first example, the two circles overlap each other, so they do intersect. In the second example, the two circles touch at one point, so they do intersect. In the third example, the two circles do not intersect or touch as the distance between their centers is greater than the sum of their radii.","solution":"import math def circles_intersect(x1, y1, r1, x2, y2, r2): Returns \\"YES\\" if the two circles intersect or touch each other, \\"NO\\" otherwise. # Calculate distance between the centers of the two circles distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) # Check if the circles intersect or touch if distance <= r1 + r2: return \\"YES\\" else: return \\"NO\\""},{"question":"Mr. Johnson, a passionate botanist, has a peculiar garden with a collection of rare plants. Each plant has a specific growth cycle determined by a number of days. To keep track of his plants, Mr. Johnson uses a unique calendar system where each day is represented by an integer starting from 1. The care routine for one of these plants defines that it should be watered every x days, starting from a particular day d. However, due to Mr. Johnson\'s busy schedule, he\'d rather know how many times he needs to water this plant within a given interval from day a to day b (inclusive). Help Mr. Johnson by writing a program that calculates this watering frequency. Input The first and only line contains three positive integers a, b, and x, and one positive integer d (1 ≤ a ≤ b ≤ 10^9, 1 ≤ x ≤ 10^9, 1 ≤ d ≤ 10^9). Output Print on a single line the number of times the plant will be watered from day a to day b. Examples Input 5 20 4 1 Output 4 Input 10 30 7 3 Output 3 Input 1 9 8 5 Output 1 Note In the first sample, the plant is watered on days 1, 5, 9, 13, 17, and 21. Within the interval [5, 20], it will be watered on the 5th, 9th, 13th, and 17th day. In the second sample, the plant is watered on days 3, 10, 17, 24, and 31. Within the interval [10, 30], it will be watered on the 10th, 17th, and 24th day. In the third sample, the plant is watered on days 5, 13, and 21. Within the interval [1, 9], it will be watered on the 5th day.","solution":"def watering_frequency(a, b, x, d): Returns the number of times the plant will be watered from day a to day b. # Starting from day d, the watering days are d, d + x, d + 2*x, ... if d > b: return 0 # Find the first watering day >= a if d >= a: first_watering_day = d else: remainder = (a - d) % x first_watering_day = a if remainder == 0 else a + (x - remainder) if first_watering_day > b: return 0 # If the first watering day is within [a, b], calculate how many such days there are return (b - first_watering_day) // x + 1"},{"question":"Dave is participating in a marathon that consists of multiple hurdles. Each hurdle has a height, and Dave\'s maximum jump height is limited. Dave wants to know how many magic potions he needs to consume to be able to cross all the hurdles. Each potion increases his jump height by 1 unit. You are given an array of integers where each integer represents the height of a hurdle. You are also given an integer representing Dave\'s maximum jump height. Your task is to determine the minimum number of potions Dave needs to consume to be able to jump over the highest hurdle. ----- Input Format ----- - The first line of the input contains an integer, `n`, the number of hurdles. - The second line contains `n` space-separated integers representing the heights of the hurdles. - The third line contains a single integer, Dave\'s maximum jump height. ----- Output Format ----- Print a single integer denoting the minimum number of potions Dave needs to consume. ----- Constraints ----- - 1 ≤ n ≤ 100 - 1 ≤ height of each hurdle ≤ 100 - 1 ≤ Dave\'s maximum jump height ≤ 100 ----- Sample Input 1 ----- 5 1 2 3 3 2 2 ----- Sample Output 1 ----- 1 ----- Explanation 1 ----- The highest hurdles have a height of 3. Dave\'s maximum jump height is 2, so he needs 1 potion to increase his jump height to 3. ----- Sample Input 2 ----- 4 1 6 3 5 5 ----- Sample Output 2 ----- 1 ----- Explanation 2 ----- The highest hurdle is 6. Dave\'s maximum jump height is 5, so he needs 1 potion to increase his jump height to 6.","solution":"def min_potions_needed(n, hurdles, max_jump_height): Returns the minimum number of potions needed for Dave to jump over all hurdles. :param n: Integer, number of hurdles :param hurdles: List of integers, heights of the hurdles :param max_jump_height: Integer, Dave\'s maximum jump height :return: Integer, minimum number of potions needed highest_hurdle = max(hurdles) if highest_hurdle <= max_jump_height: return 0 return highest_hurdle - max_jump_height"},{"question":"Alex is a competitive programmer who loves solving problems on strings. He came across an interesting challenge to form the longest palindromic substring from a given string. Given a string `s`, his task is to find and return the longest palindromic substring present in `s`. A palindrome is a word or phrase that reads the same backward as forward. Examples **Example 1:** Input: `s = \\"babad\\"` Output: \\"bab\\" Explanation: As the longest palindromic substring can be \\"bab\\" or \\"aba\\". Both are acceptable as the answer. **Example 2:** Input: `s = \\"cbbd\\"` Output: \\"bb\\" Explanation: As the longest palindromic substring is \\"bb\\". Function Description Complete the function `longestPalindrome` in the editor below. `longestPalindrome` has the following parameter(s): - string `s`: a string of length `n` Returns - string: the longest palindromic substring Input Format A single line containing string `s`. Constraints 1 leq text{len(s)} leq 1000 `s` will consist of only digits and English letters (lower-case and/or upper-case) Sample Input 1 \\"babad\\" Sample Output 1 \\"bab\\" Sample Input 2 \\"cbbd\\" Sample Output 2 \\"bb\\" Explanation: In the first example, \\"bab\\" is the longest palindromic substring, though \\"aba\\" is also a valid result. In the second example, \\"bb\\" is the longest palindromic substring.","solution":"def longestPalindrome(s): Returns the longest palindromic substring in the given string s. n = len(s) if n == 0: return \\"\\" # Initialize DP table dp = [[False] * n for _ in range(n)] start, max_length = 0, 1 # Every single character is a palindrome for i in range(n): dp[i][i] = True # Check two character palindromes for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True start = i max_length = length return s[start:start + max_length]"},{"question":"Given a maze represented as a 2D grid of characters, where `S` is the start point, `E` is the end point, `.` represents open paths, and `#` represents walls, write a program to find the shortest path from `S` to `E` using Breadth-First Search (BFS). Your task is to count the minimum number of steps required to reach the end point from the start point. If there is no valid path, the program should return -1. Constraints - The maze will be of size at most 100x100. - There will be exactly one start point `S` and one end point `E`. Input The first line contains two integers n and m (1 leq n, m leq 100), the number of rows and columns of the maze grid respectively. The following n lines each contain a string of length m representing the maze. Output Print a single integer representing the shortest path from `S` to `E`. If no such path exists, print -1. Examples Input 5 7 ....... .#.#.#. .#S#E#. .#.#.#. ....... Output 6 Input 3 3 S#. .#. .#E Output -1","solution":"from collections import deque def shortest_path(maze, n, m): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] != \'#\' # Find start and end start, end = None, None for i in range(n): for j in range(m): if maze[i][j] == \'S\': start = (i, j) elif maze[i][j] == \'E\': end = (i, j) if not start or not end: return -1 # Directions for moving up, down, left and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (i, j, distance) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given an array a consisting of n integers a_1, a_2, dots , a_n. In one operation, you can select any contiguous subarray and reverse it. After performing this operation an arbitrary (possibly, zero) number of times, your task is to minimize the number of inversions in the array. An inversion is a pair of indices (i, j) such that i < j and a_i > a_j. You have to answer t independent queries. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of queries. The first line of each query contains one integer n (1 le n le 100). The second line of each query contains n integers a_1, a_2, dots , a_n (1 le a_i le 10^9). -----Output----- For each query, print one integer in a single line — the minimum possible number of inversions in the array after performing the described operation an arbitrary (possibly, zero) number of times. -----Example----- Input 2 5 3 1 2 3 1 4 1 3 2 4 Output 0 1 -----Note----- In the first query of the example, you can apply the following sequence of operations to obtain 0 inversions: [3, 1, 2, 3, 1] rightarrow [1, 3, 2, 3, 1] rightarrow [1, 1, 2, 3, 3]. In the second query, you can apply the following sequence of operations to minimize the inversions: [1, 3, 2, 4] rightarrow [1, 2, 3, 4]. The number of inversions is minimized to 1.","solution":"def min_inversions(t, queries): Return the minimum number of inversions for each query. :param t: Number of test cases :param queries: List of tuples, each containing (n, array) :return: List of integers representing the minimum inversions for each array results = [] for n, arr in queries: results.append(0) # Since any array can be sorted to give 0 inversions return results"},{"question":"A group of explorers is on a secret mission in a labyrinthine cave. The cave is represented as a combination of rooms connected by one-way passages. Each room has a unique number from 1 to n. The room with number 1 is the entrance, and the room with number n is the exit. The explorers need to find the shortest path from the entrance to the exit. You are given a list of directed passages represented as a pair of integers (a, b) meaning there is a one-way passage from room a to room b. Your task is to find the shortest path from the entrance (room 1) to the exit (room n). If there is more than one shortest path, return any one of them. If there is no path from the entrance to the exit, return -1. Input The first line contains two integers n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 200,000) — the number of rooms and the number of passages, respectively. The next m lines each contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) representing a one-way passage from room a to room b. Output If there is a path from room 1 to room n, print the sequence of room numbers representing the shortest path, each separated by a space. If there are multiple shortest paths, print any one of them. If there is no path from room 1 to room n, print -1. Examples Input 5 5 1 2 2 3 3 5 1 4 4 5 Output 1 4 5 Input 4 2 1 2 3 4 Output -1 Note In the first example, there are two shortest paths from room 1 to room 5: [1, 2, 3, 5] and [1, 4, 5]. Either path can be the output. In the second example, there is no path from room 1 to room 4, so the output is -1.","solution":"from collections import deque, defaultdict def find_shortest_path(n, m, passages): graph = defaultdict(list) for a, b in passages: graph[a].append(b) # Perform a BFS to find the shortest path from room 1 to room n queue = deque([(1, [1])]) visited = set() visited.add(1) while queue: current, path = queue.popleft() if current == n: return path for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, path + [neighbor])) return -1 # Example usage: # n = 5 # m = 5 # passages = [(1, 2), (2, 3), (3, 5), (1, 4), (4, 5)] # print(find_shortest_path(n, m, passages)) # Output: e.g., [1, 4, 5]"},{"question":"# Task Sam is learning about prime numbers and he also wants to understand how digits of prime numbers distribute themselves. He needs a program that converts an integer to a list of its digits, then determines if the sum of the digits is a prime number. Given an integer `n`, write a function that will accomplish the following tasks: 1. Convert the integer `n` into a list of its digits. 2. Calculate the sum of these digits. 3. Determine if the sum of the digits is a prime number. 4. Return `True` if the sum is a prime number, otherwise return `False`. # Example: For `n = 123`, the result should be `False`. 1 + 2 + 3 = 6, which is not a prime number. For `n = 113`, the result should be `True`. 1 + 1 + 3 = 5, which is a prime number. # Notes: - For the sake of this problem, assume that `n` is a positive integer. - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. - Input/Output: - `[input]` integer `n` The positive integer. `1 ≤ n ≤ 10^6` - `[output]` a boolean `True` if the sum of digits is a prime number, otherwise `False`.","solution":"def is_prime(num): Determines if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def sum_of_digits_is_prime(n): Determines if the sum of the digits of n is a prime number. digit_sum = sum(int(digit) for digit in str(n)) return is_prime(digit_sum)"},{"question":"Farmer John has a farm with n stalls and c cows. Each stall is positioned on a straight line along a point x_i. The objective is to determine the largest minimum distance between the cows when placed in the stalls. You are to write a program to help Farmer John find this largest minimum distance. The cows should be placed in stalls such that the minimum distance between any two cows is maximized. -----Input----- The first line contains two integers n and c (2 leq n leq 10^5, 2 leq c leq n), where n is the number of stalls, and c is the number of cows. The second line contains n integers x_i (1 leq x_i leq 10^9), which represent the positions of the stalls along the straight line. No two stalls will be at the same position. -----Output----- Print one integer: the largest possible minimum distance between the cows. -----Examples----- Input 5 3 1 2 8 4 9 Output 3 Input 6 4 1 5 9 12 15 16 Output 4 Input 7 4 2 4 8 12 16 18 25 Output 6 -----Note----- In the first example, the cows can be placed at stalls at positions 1, 4, and 8 or at positions 1, 4, and 9. In both cases, the minimum distance is 3. In the second example, the cows can be placed at stalls at positions 1, 5, 9, and 15 or at positions 1, 5, 9, and 16. Both habe a minimum distance of 4. In the third example, the cows can be placed at stalls at positions 2, 8, 12, and 18 which gives a minimum distance of 6.","solution":"def largest_minimum_distance(n, c, positions): Finds the largest minimum distance between cows placed in stalls. Parameters: n (int): The number of stalls. c (int): The number of cows to be placed. positions (list): A list of integers representing stall positions. Returns: int: The largest possible minimum distance. positions.sort() def can_place_cows(distance): count = 1 last_position = positions[0] for i in range(1, n): if positions[i] - last_position >= distance: count += 1 last_position = positions[i] if count == c: return True return False low, high = 1, positions[-1] - positions[0] result = 0 while low <= high: mid = (low + high) // 2 if can_place_cows(mid): result = mid low = mid + 1 else: high = mid - 1 return result"},{"question":"You are given a list of strings and a set of queries. Each query consists of a prefix and you need to determine how many strings in the list start with that prefix. Input: - The first line contains two integers, N and Q (1 ≤ N, Q ≤ 1000), where N is the number of strings in the list and Q is the number of queries. - The next N lines each contain a string composed only of lowercase letters (1 ≤ length of each string ≤ 100). - The following Q lines each contain a prefix composed only of lowercase letters (1 ≤ length of each prefix ≤ 100). Output: For each query, output the number of strings in the list that start with the given prefix. SAMPLE INPUT 5 3 apple appetite banana application apply appl ap ban SAMPLE OUTPUT 3 4 1 Explanation For the first query \\"appl\\": - The strings that start with \\"appl\\" are: \\"apple\\", \\"application\\", \\"apply\\". So, the count is 3. For the second query \\"ap\\": - The strings that start with \\"ap\\" are: \\"apple\\", \\"appetite\\", \\"application\\", \\"apply\\". So, the count is 4. For the third query \\"ban\\": - The only string that starts with \\"ban\\" is \\"banana\\". So, the count is 1.","solution":"def count_prefixes(strings, prefixes): Returns a list with the count of strings starting with each given prefix. :param strings: List of strings to search within. :param prefixes: List of prefixes to query. :return: List of integers, each representing count of strings with the corresponding prefix. result = [] for prefix in prefixes: count = sum(1 for string in strings if string.startswith(prefix)) result.append(count) return result"},{"question":"Nisha and her friends like to play a game using a grid of size N x N. In this game, each cell in the grid contains a certain number of coins. The objective of the game is to help Nisha find the maximum number of coins she can collect starting from the top-left corner of the grid (cell [0][0]) and moving to the bottom-right corner of the grid (cell [N-1][N-1]). From a given cell, she can move either to the right or down to an adjacent cell. Your task is to write a program that takes an NxN grid as input and outputs the maximum number of coins Nisha can collect. Input: The first line of the input contains a single integer T, the number of test cases. For each test case: - The first line contains an integer N, the size of the grid. - The next N lines each contain N space-separated integers representing the grid. Output: For each test case, output a single integer representing the maximum number of coins Nisha can collect. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 0 ≤ grid[i][j] ≤ 100 SAMPLE INPUT 2 3 1 2 3 4 5 6 7 8 9 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 SAMPLE OUTPUT 29 73 Explanation: Test case 1: The grid is: 1 2 3 4 5 6 7 8 9 The maximum number of coins Nisha can collect is along the path: 1 → 4 → 7 → 8 → 9, which sums up to 1 + 4 + 7 + 8 + 9 = 29. Test case 2: The grid is: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 The maximum number of coins Nisha can collect is along the path: 1 → 2 → 3 → 4 → 8 → 12 → 16, which sums up to 1 + 2 + 3 + 4 + 8 + 12 + 16 = 46.","solution":"def max_coins(grid): N = len(grid) dp = [[0] * N for _ in range(N)] dp[0][0] = grid[0][0] for i in range(1, N): dp[0][i] = dp[0][i-1] + grid[0][i] dp[i][0] = dp[i-1][0] + grid[i][0] for i in range(1, N): for j in range(1, N): dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1]) return dp[N-1][N-1] def solve(input_data): result = [] data = input_data.strip().split(\'n\') idx = 0 T = int(data[idx]) idx += 1 for _ in range(T): N = int(data[idx]) idx += 1 grid = [] for _ in range(N): grid.append(list(map(int, data[idx].split()))) idx += 1 result.append(max_coins(grid)) return result"},{"question":"You are given an integer array a_1, a_2, ldots, a_n. You can perform the following operation repeatedly on the array: 1. Select any subsequence of the array a with length k (1 leq k leq n). 2. Calculate the product of the elements in this subsequence. 3. Replace each element in the subsequence with the result of dividing the product by the respective element. The task is to find the minimum number of operations needed to make all elements of the array a equal. -----Input----- The input consists of several test cases. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains a single integer n (1 leq n leq 1000) — the length of the array a. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6) — the elements of the array. It\'s guaranteed that a_1, a_2, ldots, a_n will only contain positive integers. -----Output----- For each test case, print a single integer — the minimum number of operations needed to make all elements of the array equal. -----Examples----- Input 3 3 1 1 1 4 2 4 8 16 5 6 6 6 6 12 Output 0 3 1 -----Note----- In the first test case, all elements are already equal, so no operations are needed. In the second test case, you can perform the following operations to make all elements equal: 1. Choose the subsequence [8, 16]: - Product = 8 times 16 = 128 - Replace each element in the subsequence with 128/8=16 and 128/16=8 - Array becomes [2, 4, 16, 8] 2. Choose the subsequence [4, 8]: - Product = 4 times 8 = 32 - Replace each element in the subsequence with 32/4=8 and 32/8=4 - Array becomes [2, 8, 16, 8] 3. Choose the subsequence [2, 16, 8]: - Product = 2 times 16 times 8 = 256 - Replace each element in the subsequence with 256/2=128, 256/16=16, and 256/8=32 - array becomes [128, 8, 16, 32] - Performing further steps in subsequent operations, all elements will finally be equal. In the third test case, only one operation is needed: 1. Choose the subsequence [6, 6, 6, 6, 12]: - Product = 6 times 6 times 6 times 6 times 12 = 93312 - Replace each element in the subsequence with 93312/6=15552, 93312/6=15552, 93312/6=15552, 93312/6=15552, 93312/12=7764 - Performing further steps in subsequent operations, all elements will finally be equal.","solution":"def min_operations_to_equalize_array(t, cases): result = [] for case in cases: n, a = case unique_elements = set(a) result.append(len(unique_elements) - 1) return result # Aggregate Data for all test cases def parse_input_and_solve(input_data): input_lines = input_data.split(\'n\') t = int(input_lines[0].strip()) cases = [] current_line = 1 for _ in range(t): n = int(input_lines[current_line].strip()) a = list(map(int, input_lines[current_line + 1].strip().split())) cases.append((n, a)) current_line += 2 return min_operations_to_equalize_array(t, cases)"},{"question":"Task One of the simplest versions of the \\"Stable Marriage Problem\\" (also known as the \\"Stable Matching Problem\\") is to find the stable matches between students and projects in a university course. Each student has a ranked list of projects they prefer, and each project has a ranked list of students. You are to write a program that finds a stable matching between students and projects. A matching is stable if there are no two students and projects such that both prefer each other over their current match. Given the preferences of n students and m projects in the form of ranked lists, your task is to pair each student with a project such that the overall matching is stable. Constraints: - The number of students (n) and projects (m) can be different. - n and m are between 1 and 1000. - Each student and project will rank all the options available to them. # Input - `student_preferences`: a list of n lists, where each inner list contains m integers denoting the student\'s ranking of the projects (0-based indexing). - `project_preferences`: a list of m lists, where each inner list contains n integers denoting the project\'s ranking of the students (0-based indexing). # Output - A list of n integers where the i-th integer denotes the index of the project assigned to the i-th student in a stable matching. # Example Input: ```python n = 3 m = 3 student_preferences = [ [0, 1, 2], [1, 0, 2], [2, 0, 1] ] project_preferences = [ [2, 0, 1], [1, 2, 0], [0, 2, 1] ] ``` Output: ```python [0, 1, 2] ``` # Explanation In this example, all pairs have mutual preferences that lead to a stable match. No student or project would prefer another pairing over the current one. Write a function `stable_matching(n, m, student_preferences, project_preferences)` that implements the stable matching algorithm and returns the result as described. # Implementation: ```python def stable_matching(n, m, student_preferences, project_preferences): # Implement the stable matching algorithm here. pass ```","solution":"def stable_matching(n, m, student_preferences, project_preferences): Implementation of Gale-Shapley algorithm for stable matching. # Initialize all students and projects as free student_match = [-1] * n project_match = [-1] * m # List to keep track of the proposals by students proposals = [0] * n # which project each student is currently proposing to # Get the rank of each student for a specific project project_rank = [[0] * n for _ in range(m)] for p in range(m): for rank in range(n): student = project_preferences[p][rank] project_rank[p][student] = rank free_students = list(range(n)) # initially, all students are free while free_students: student = free_students.pop(0) current_proposal = proposals[student] project = student_preferences[student][current_proposal] # If the project is free, assign the student to the project if project_match[project] == -1: project_match[project] = student student_match[student] = project else: current_partner = project_match[project] # Check if the project prefers this student over the current partner if project_rank[project][student] < project_rank[project][current_partner]: # The project prefers this student, # so the current partner becomes free free_students.append(current_partner) project_match[project] = student student_match[student] = project student_match[current_partner] = -1 else: # The project prefers its current partner, # so this student remains free free_students.append(student) # The student has proposed to this project, increment the proposal count proposals[student] += 1 return student_match"},{"question":"James is a game designer and he is designing a new game for which he needs to create a set of challenges for the players. In this game, players have to collect various items to complete different missions. Each item has a certain value associated with it. James has come up with a way to dynamically adjust the value of these items based on various in-game factors. Given a list of values for each item, the total value collected by the player is the sum of the values of the items they collect. However, there is a constraint: the player cannot collect two consecutive items in the list. James needs your help to write a program that will determine the maximum value a player can collect without breaking the rule of collecting two consecutive items. -----Input format----- Line 1: A single integer N, indicating the number of items. Line 2: N non-negative integers, where the integer in position i represents the value of the ith item. -----Output format----- The output consists of a single non-negative integer, the maximum value the player can collect by picking items while following the constraints. -----Sample Input 1----- 6 4 1 5 8 3 7 -----Sample Output 1----- 19 (Explanation: 4 + 5 + 7 = 16) -----Sample Input 2----- 4 5 3 4 11 -----Sample Output 2----- 16 (Explanation: 5 + 11 = 16) -----Test data----- There is only one subtask worth 100 marks. In all inputs: • 1 ≤ N ≤ 105 • The value for each item is between 0 and 104, inclusive. -----Live evaluation data----- There are 10 test inputs on the server during the exam.","solution":"def max_value_no_consecutive(n, values): if n == 0: return 0 if n == 1: return values[0] # initialize dp array dp = [0] * n dp[0] = values[0] dp[1] = max(values[0], values[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + values[i]) return dp[n-1]"},{"question":"Farmer Jane has a rectangular field represented as a 2D grid of size `m` x `n` where `m` is the number of rows and `n` is the number of columns. Each cell in the grid represents a plot of land which can either be fertile (represented by \'1\') or barren (represented by \'0\'). Jane wants to maximize the area of a rectangular section of contiguous fertile plots where the plots are adjacent and not separated by any barren plots. Write a function `maxFertileRectangle` that takes a 2D list (list of lists) representing the grid and returns the area of the largest rectangular section of contiguous fertile plots. Input The first line of input contains two integers `m` and `n` (1 ≤ m, n ≤ 100), denoting the dimensions of the grid. Each of the next `m` lines contains a string of length `n`, consisting of \'0\'s and \'1\'s. Output Output a single integer denoting the area of the largest rectangular section of contiguous fertile plots. Examples Input 4 5 10100 10111 11111 10010 Output 6 Input 2 2 00 00 Output 0 Note In the first example, the largest rectangular section of contiguous fertile plots (\'1\') is of size 3x2, which is an area of 6. In the second example, there are no fertile plots (\'1\'), so the largest rectangular section of fertile plots has an area of 0.","solution":"def maxFertileRectangle(grid): if not grid: return 0 m, n = len(grid), len(grid[0]) heights = [0] * (n + 1) # extra element to handle the edge case cleanly max_area = 0 for row in grid: for i in range(n): heights[i] = heights[i] + 1 if row[i] == \'1\' else 0 stack = [-1] for i in range(n + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"In a distant galaxy, the inhabitants use a unique numeral system known as the \\"Galactic Numeral System\\". This system is quite similar to the Roman numeral system, but it\'s more flexible. You are tasked with converting a given number from this system to the standard decimal numeral system. The Galactic Numeral System comprises seven symbols as follows: - I: 1 - V: 5 - X: 10 - L: 50 - C: 100 - D: 500 - M: 1000 The numeral system follows specific rules for combination: 1. If a smaller value precedes a larger value, the smaller value is subtracted from the larger value (e.g., IV = 4, IX = 9, XL = 40). 2. If a larger or equal value precedes another value, they are added together (e.g., VI = 6, LVIII = 58, MCMXCIV = 1994). Your task is to write a function that converts a Galactic numeral string to an integer. -----Input----- The input consists of a single string `s` representing a Galactic numeral (1 ≤ |s| ≤ 15). -----Output----- Output a single integer, the equivalent decimal value of the given Galactic numeral. -----Examples----- Input III Output 3 Input IV Output 4 Input MCMXCIV Output 1994 Input LVIII Output 58 -----Note----- In the first example, the input \\"III\\" consists of three \'I\' symbols, which equals 1 + 1 + 1 = 3. In the second example, \\"IV\\" stands for 4, because I (1) is before V (5), so we subtract I from V. In the third example, \\"MCMXCIV\\" combines a number of rules: M = 1000, CM = 900, XC = 90, IV = 4. Together, they form 1994. In the fourth example, \\"LVIII\\" is evaluated as L = 50, V = 5, III = 3. Hence, the total is 50 + 5 + 3 = 58.","solution":"def galactic_to_decimal(s): Converts a Galactic numeral string to an integer. galactic_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } result = 0 n = len(s) for i in range(n): value = galactic_values[s[i]] if i + 1 < n and galactic_values[s[i]] < galactic_values[s[i + 1]]: result -= value else: result += value return result"},{"question":"Alex is participating in a coding competition where he needs to solve as many problems as possible. Each problem has a specific time requirement to be solved. He has a total of T minutes to spend on solving problems, and he wants to maximize the number of problems solved within the given time. Alex can solve the problems in any order. Given the time required for each problem and the total time T available, calculate the maximum number of problems Alex can solve. -----Input----- The first line contains two integers n and T (1 ≤ n ≤ 10^5, 1 ≤ T ≤ 10^9) - the number of problems and the total available time in minutes. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 10^6) - the time required to solve each problem. -----Output----- Print a single integer - the maximum number of problems Alex can solve within the given time. -----Examples----- Input 5 15 5 3 8 6 2 Output 3 Input 4 10 2 2 2 2 Output 5 Input 6 12 7 10 3 8 2 4 Output 3 -----Note----- In the first example, Alex can solve the problems with times 5, 3, and 2, which sum up to 10 minutes. This allows him to solve a maximum of 3 problems within the available 15 minutes. In the second example, Alex can solve 5 problems, each taking 2 minutes, which sums up to 10 minutes in total. In the third example, Alex can solve the problems with times 3, 4, and 2, which sum up to 9 minutes, maximizing the number of problems solved within the 12 minutes available.","solution":"def max_problems_solved(n, T, times): Returns the maximum number of problems that can be solved within the given time T. :param n: int - number of problems :param T: int - total available time in minutes :param times: list of int - time required to solve each problem :return: int - maximum number of problems solved within the given time # Sort the times required for each problem in ascending order times.sort() total_time = 0 problems_solved = 0 for time in times: if total_time + time <= T: total_time += time problems_solved += 1 else: break return problems_solved"},{"question":"In a programming contest, there are N problems, each problem having a different score value associated with it. A participant can choose any number of problems to solve, but the chosen problems\' total score must not exceed S. Determine the maximum score a participant can achieve without exceeding the score limit S. ------ Input Format ------ - The first line contains an integer T denoting the number of test cases. T test cases then follow. - The first line of each test case contains two integers N and S. - The second line of each test case contains N space-separated integers which represent the scores of the N problems. ------ Output Format ------ For each test case, output on one line the maximum score a participant can achieve without exceeding the score limit S. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ S ≤ 10^{4} 1 ≤ score_i ≤ 1000 ------ Sample Input 1 ------ 2 5 10 2 3 4 5 1 4 7 1 2 5 6 ------ Sample Output 1 ------ 10 7 ------ Explanation 1 ------ Test Case 1: The participant can choose problems with scores 1, 2, 3, and 4, summing up to 10, which is the maximum possible score that does not exceed 10. Test Case 2: The participant can choose problems with scores 1 and 6, summing up to 7, which is exactly the score limit. Note: There might be multiple combinations for achieving the maximum score, but we only need to find the maximum score value, not the combination of problems.","solution":"def max_score_per_case(N, S, scores): Returns the maximum score one can achieve without exceeding the score limit S, given N problems with scores in a list. dp = [0] * (S + 1) for score in scores: for j in range(S, score - 1, -1): dp[j] = max(dp[j], dp[j - score] + score) return dp[S] def maximum_score(T, test_cases): Main function to compute the result for all test cases. Returns a list of integers where each integer is the maximum score for the corresponding test case. results = [] for case in test_cases: N, S, scores = case results.append(max_score_per_case(N, S, scores)) return results"},{"question":"In a magical forest, there are trees that can grow fruits of different types. Each tree has a specific capacity that determines how many fruits it can bear in one season. The forest keeper wants to know how many total fruits she can expect if all trees in the forest bear fruits to their full capacity. Write a program that calculates the total number of fruits based on the given capacities of the trees. ------ Input Format ------ - The first line contains a single integer T, denoting the number of test cases. - The first line of each test case contains an integer N, denoting the number of trees. - The second line of each test case contains N space-separated integers, where each integer represents the fruit-bearing capacity of a tree. ------ Output Format ------ For each test case, output on a new line a single integer, denoting the total number of fruits all the trees can bear. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Capacity ≤ 10^3 ----- Sample Input 1 ------ 3 3 10 20 30 2 40 50 4 15 25 35 45 ----- Sample Output 1 ------ 60 90 120 ----- Explanation 1 ------ Test case 1: The sum of the capacities of the trees is 10 + 20 + 30 = 60. Test case 2: The sum of the capacities of the trees is 40 + 50 = 90. Test case 3: The sum of the capacities of the trees is 15 + 25 + 35 + 45 = 120.","solution":"def total_fruits_for_test_cases(test_cases): Calculate the total number of fruits for given test cases. Parameters: test_cases (list of tuples): Each tuple contains a list representing the capacities of trees. Returns: list: List of integers representing total number of fruits for each test case. results = [] for capacities in test_cases: results.append(sum(capacities)) return results"},{"question":"A small tech startup, Techie, tracks its software releases using milestones. Each milestone has a set of features associated with it. The company maintains a log of features and the dates they were completed. Developers can track progress by querying the log for completed features within a certain time frame. Your task is to implement the functionality for such queries. # Problem Definition You are given a list of milestones and a list of features. Each milestone and feature is associated with a completion date. You must determine which features were completed within the specified time frame for each query. # Input - The first line contains two integers, M and F: - M (1 ≤ M ≤ 100) is the number of milestones. - F (1 ≤ F ≤ 10,000) is the number of features. - The next M lines each contain a milestone and its completion date in the format `\\"milestone_name YYYY-MM-DD\\"`. - The next F lines each contain a feature and its completion date in the format `\\"feature_name YYYY-MM-DD\\"`. - The next line contains one integer Q (1 ≤ Q ≤ 1,000) representing the number of queries. - The next Q lines each contain two dates in the format `\\"YYYY-MM-DD YYYY-MM-DD\\"` representing the start and end dates of a query, both inclusive. # Output For each query, output the milestone names, followed by the feature names, completed within the specified date range. Each name should be on a new line. # Constraints - The dates are in the format YYYY-MM-DD and are guaranteed to be valid dates. - The milestones and feature names are unique strings containing only alphanumeric characters and have at most 100 characters. # Example Input: ``` 3 5 Milestone1 2023-01-20 Milestone2 2023-01-25 Milestone3 2023-02-01 Feature1 2023-01-15 Feature2 2023-01-22 Feature3 2023-01-25 Feature4 2023-02-02 Feature5 2023-02-10 2 2023-01-10 2023-01-25 2023-01-22 2023-02-02 ``` Output: ``` Milestone1 Feature1 Feature2 Milestone2 Feature3 Milestone2 Milestone3 Feature2 Feature3 Feature4 ``` # Explanation In the first query, the output milestones and features fall within the date range `2023-01-10` to `2023-01-25`. The names are Milestone1, Feature1, Feature2, Milestone2, and Feature3. In the second query, the output milestones and features fall within the date range `2023-01-22` to `2023-02-02`. The names are Milestone2, Milestone3, Feature2, Feature3, and Feature4.","solution":"def filter_completions_in_timeframe(milestones, features, queries): from datetime import datetime # Convert dates from string to datetime objects for comparison milestones = [(name, datetime.strptime(date, \'%Y-%m-%d\')) for name, date in milestones] features = [(name, datetime.strptime(date, \'%Y-%m-%d\')) for name, date in features] result = [] for start_date, end_date in queries: start_date = datetime.strptime(start_date, \'%Y-%m-%d\') end_date = datetime.strptime(end_date, \'%Y-%m-%d\') for name, date in milestones: if start_date <= date <= end_date: result.append(name) for name, date in features: if start_date <= date <= end_date: result.append(name) return result"},{"question":"In the wild, there are islands where dragons and humans coexist. Each island has its own intricate system of rivers and bridges, ensuring connectivity between various points on the island. The council of each island annually organizes a grand race, where participants must travel from the starting city to the destination city following the bridges and rivers. The island\'s transport network is represented as an undirected graph with cities as nodes and bridges as edges. The council wants to ensure the race is fair by verifying that there is exactly one unique path between the start and the destination city. Your task is to determine whether a unique simple path exists between the two given cities. -----Input----- The first line of input contains two integers N (2 le N le 1000) and M (1 le M le 10000), representing the number of cities and the number of bridges, respectively. The following M lines each contain two integers u and v (1 le u, v le N), representing a bridge connecting city u and city v. The last line contains two integers s and d (1 le s, d le N), representing the start and destination cities. -----Output----- Output \\"UNIQUE\\" if there is exactly one simple path between the start and destination cities. If there is more than one simple path, output \\"MULTIPLE\\". If there is no simple path, output \\"NONE\\". -----Examples----- Sample Input 1: 5 5 1 2 2 3 3 4 4 5 3 5 1 5 Sample Output 1: MULTIPLE Sample Input 2: 4 3 1 2 2 3 3 4 1 4 Sample Output 2: UNIQUE Sample Input 3: 5 3 1 2 2 3 2 4 1 5 Sample Output 3: NONE","solution":"def unique_simple_path(N, M, bridges, s, d): from collections import defaultdict, deque def bfs_count_paths(start, end, graph): queue = deque([[start]]) paths_count = 0 while queue: path = queue.popleft() node = path[-1] if node == end: paths_count += 1 continue for neighbor in graph[node]: if neighbor not in path: new_path = list(path) new_path.append(neighbor) queue.append(new_path) return paths_count # Construct the graph graph = defaultdict(list) for u, v in bridges: graph[u].append(v) graph[v].append(u) # Check number of paths from s to d paths_count = bfs_count_paths(s, d, graph) if paths_count == 0: return \\"NONE\\" elif paths_count == 1: return \\"UNIQUE\\" else: return \\"MULTIPLE\\""},{"question":"Tom has recently started working out. He keeps track of the distance he runs every day. His goal is to increase his running distance each week. Every week starts on Monday and ends on Sunday. Tom records his running distances in kilometers for each day of the week. At the end of the week, he wants to know how many days he increased his distance compared to the previous day within the same week. Example distances=[3, 4, 2, 5, 6, 3, 7] Distances are in the same order as the days of the week from Monday to Sunday. He records his results as follows: Daily Increase Day Distance Compared to Mon 3 - Tue 4 +1 Wed 2 -2 Thu 5 +3 Fri 6 +1 Sat 3 -3 Sun 7 +4 Given the distances for a week, determine the number of days Tom increased his running distance compared to the previous day. Function Description Complete the countDailyIncreases function in the editor below. countDailyIncreases has the following parameter(s): int distances[7]: distances run per day Returns int: The number of days Tom increased his running distance compared to the previous day. Input Format A single line containing 7 space-separated integers, describing the respective distances run on Monday to Sunday. Constraints 0 <= distances[i] <= 100 Sample Input 0 3 4 2 5 6 3 7 Sample Output 0 4 Explanation 0 Tom increased his running distance on Tuesday, Thursday, Friday, and Sunday, so we print 4. Sample Input 1 1 1 1 1 1 1 1 Sample Output 1 0 Explanation 1 Tom did not increase his running distance on any day, so we print 0.","solution":"def countDailyIncreases(distances): Returns the number of days Tom increased his running distance compared to the previous day. Parameters: distances (list): A list of 7 integers representing distances run per day from Monday to Sunday. Returns: int: Number of days with increased running distance compared to the previous day. count = 0 for i in range(1, len(distances)): if distances[i] > distances[i - 1]: count += 1 return count"},{"question":"You are in the midst of interstellar exploration and have come across a minefield. The minefield is represented as a grid with specific coordinates where mines are placed. Your mission is to navigate a safe path from the top-left corner of the grid to the bottom-right corner without triggering any mines. You can only move right or down one cell at a time. Write a program to determine the number of unique safe paths from the top-left corner to the bottom-right corner of an `m x n` grid considering the positions of the mines. Constraints * 1 ≤ m, n ≤ 100 * 0 ≤ number of mines < m * n * The grid coordinates are given in the format (row, column). * The mines\' positions are provided as a list of tuples, where each tuple contains two integers, representing the row and column index of a mine. * The top-left corner is always (0, 0) and the bottom-right corner is always (m-1, n-1) Input The format of the input data is as follows: The first line contains two integers `m` and `n` separated by a space. The second line contains an integer `k`, the number of mines. The next `k` lines contain the coordinates of the mines, each in the format `row column`. Output Output the number of unique safe paths from the top-left corner to the bottom-right corner. Examples Input ``` 3 3 1 1 1 ``` Output ``` 2 ``` Input ``` 4 4 2 1 1 2 2 ``` Output ``` 4 ``` Input ``` 5 5 0 ``` Output ``` 70 ```","solution":"def unique_paths(m, n, mines): Returns the number of unique safe paths from top-left to bottom-right corner of an m x n grid considering the positions of mines. # Initialize the grid dp array with zeros dp = [[0]*n for _ in range(m)] # Mark the mines in the dp grid for mine in mines: dp[mine[0]][mine[1]] = -1 # If the start or end is a mine, there\'s no path possible if dp[0][0] == -1 or dp[m-1][n-1] == -1: return 0 # Initial position is always safe if not mined dp[0][0] = 1 # Fill the dp grid using dynamic programming for i in range(m): for j in range(n): if dp[i][j] == -1: continue if i > 0 and dp[i-1][j] != -1: dp[i][j] += dp[i-1][j] if j > 0 and dp[i][j-1] != -1: dp[i][j] += dp[i][j-1] # Return the number of unique paths to the bottom-right corner return dp[m-1][n-1] # Function to parse the input and call the unique_paths function def parse_input_and_find_paths(input_str): input_lines = input_str.strip().split(\'n\') m, n = map(int, input_lines[0].split()) k = int(input_lines[1]) mines = [] for i in range(2, 2 + k): mine = tuple(map(int, input_lines[i].split())) mines.append(mine) return unique_paths(m, n, mines)"},{"question":"# Array Manipulation Operations Create a set of functions that perform various operations on arrays. Each function should take an array of integers as input and return the result as specified. Operations 1. **Reverse Array**: Return a new array that is the reverse of the input array. 2. **Sum of Elements**: Return the sum of all elements in the input array. 3. **Remove Duplicates**: Return an array where all duplicate elements have been removed. 4. **Rotate Array**: Rotate the array to the right by `k` steps, where `k` is a positive integer. 5. **Find Maximum**: Return the maximum element in the input array. Examples - Reverse Array: `reverseArray([1, 2, 3, 4, 5])` should return `[5, 4, 3, 2, 1]`. - Sum of Elements: `sumElements([1, 2, 3, 4, 5])` should return `15`. - Remove Duplicates: `removeDuplicates([1, 2, 2, 3, 3, 4, 5])` should return `[1, 2, 3, 4, 5]`. - Rotate Array: `rotateArray([1, 2, 3, 4, 5], 2)` should return `[4, 5, 1, 2, 3]`. - Find Maximum: `findMax([1, 2, 3, 4, 5])` should return `5`. Make sure to handle edge cases such as empty arrays and ensure all functions have O(n) or better time complexity where possible.","solution":"def reverseArray(arr): Return a new array that is the reverse of the input array. return arr[::-1] def sumElements(arr): Return the sum of all elements in the input array. return sum(arr) def removeDuplicates(arr): Return an array where all duplicate elements have been removed. return list(dict.fromkeys(arr)) def rotateArray(arr, k): Rotate the array to the right by k steps. n = len(arr) k = k % n # Handle case where k is larger than n return arr[-k:] + arr[:-k] def findMax(arr): Return the maximum element in the input array. if not arr: return None return max(arr)"},{"question":"A company wants to implement a system where each employee has an ID and a list of direct reports (other employees who report directly to them). The structure forms a hierarchical tree where each employee may have zero or more direct reports, and every employee except the CEO has exactly one direct manager. Your task is to implement a function that receives the hierarchical structure of the organization and calculates the number of levels in the hierarchy. The CEO is on level 1, their direct reports are on level 2, and so forth. The input will be given as an array of tuples where each tuple contains two integers (a, b), indicating that employee b directly reports to employee a. The first element in each tuple is guaranteed to be the manager of the second element. For example, given the array: [(1, 2), (1, 3), (2, 4), (3, 5), (4, 6)], the organization structure is as follows: 1 / 2 3 | 4 5 | 6 In this case, the number of levels in the hierarchy is 4. Write a function `calculate_hierarchy_level` that receives a list of tuples representing the reporting structure and returns the number of levels in the hierarchy. # Function Signature ```python def calculate_hierarchy_level(reporting_structure: List[Tuple[int, int]]) -> int: ``` # Input - `reporting_structure` (list of tuples): A list of tuples where each tuple represents a reporting relationship (manager, direct report). # Output - An integer representing the maximum number of levels in the organizational hierarchy. # Examples ```python # Example 1 reporting_structure = [(1, 2), (1, 3), (2, 4), (3, 5), (4, 6)] print(calculate_hierarchy_level(reporting_structure)) # Output: 4 # Example 2 reporting_structure = [(1, 2), (2, 3), (3, 4), (4, 5)] print(calculate_hierarchy_level(reporting_structure)) # Output: 5 # Example 3 reporting_structure = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3,7), (4, 8)] print(calculate_hierarchy_level(reporting_structure)) # Output: 4 ``` # Constraints - The input list will contain between 1 and 100,000 tuples. - There will always be exactly one CEO (single root of the tree). - The hierarchical structure will be valid and will not contain cycles.","solution":"from collections import defaultdict, deque def calculate_hierarchy_level(reporting_structure): Calculate the number of levels in the hierarchy. :param reporting_structure: List of tuples with (manager, direct report) :return: Maximum number of levels in the hierarchy. # Building the adjacency list for the hierarchy hierarchy = defaultdict(list) all_employees = set() for manager, report in reporting_structure: hierarchy[manager].append(report) all_employees.add(manager) all_employees.add(report) # Finding the CEO (the one who is not reporting to anyone) potential_ceos = all_employees - set(child for _, child in reporting_structure) if len(potential_ceos) != 1: raise ValueError(\\"Invalid hierarchy: there should be exactly one CEO\\") ceo = potential_ceos.pop() # Perform BFS to compute the number of levels queue = deque([(ceo, 1)]) max_level = 1 while queue: current_employee, current_level = queue.popleft() max_level = max(max_level, current_level) for report in hierarchy[current_employee]: queue.append((report, current_level + 1)) return max_level"},{"question":"Alice and Bob are playing a game with a sequence of integers. Alice wants to place a mark on each integer from 1 to the maximum value in the sequence, which she considers as \\"boundaries.\\" Bob, however, loves special numbers and has a favorite number that he considers magical. Alice is curious to know how many such special numbers lie within the range of each pair of boundaries. Write a program to help Alice calculate this efficiently. Given the sequence of integers and Bob\'s favorite number, the task is to count how many times Bob\'s favorite number appears as a divisor of numbers within the ranges marked by each pair of boundaries. Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 105, 1 ≤ m ≤ 109), where `n` is the number of elements in the sequence, and `m` is Bob\'s favorite number. The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 109), representing the sequence. Output Output a single integer — the count of numbers between 1 and the maximum value of the sequence (inclusive) that are divisible by Bob\'s favorite number. Examples Input 5 3 2 5 9 12 15 Output 5 Input 8 2 3 6 8 10 12 14 16 18 Output 9 Note In the first example, the maximum value in the sequence is 15. The numbers between 1 and 15 that are divisible by 3 are {3, 6, 9, 12, 15}, making up a total of 5 special numbers. In the second example, the maximum value in the sequence is 18. The numbers between 1 and 18 that are divisible by 2 are {2, 4, 6, 8, 10, 12, 14, 16, 18}, making up a total of 9 special numbers.","solution":"def count_special_numbers(n, m, sequence): Returns the count of numbers between 1 and the maximum value in the sequence that are divisible by m. max_value = max(sequence) return max_value // m"},{"question":"Alice and Bob are playing a game with a grid of size m x n. Initially, each cell in the grid is either filled with a \'.\', representing an empty cell, or a \'#\', representing an obstacle. The players take turns to place their pieces on the grid. On Alice\'s turn, she places a piece in an empty cell, but Bob has special powers—on his turn, he can either place a piece in an empty cell or remove a piece from any occupied cell, even if it is an obstacle. Each player must make a valid move on their turn if possible, and the game continues until one player cannot make a move. Alice always moves first. If Alice and Bob both play optimally, determine the winner. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers m and n (1 ≤ m, n ≤ 50) — the dimensions of the grid. The next m lines of each test case contain a string of length n consisting of \'.\' and \'#\' representing the initial grid configuration. Output For each test case, print \\"Alice\\" if Alice wins or \\"Bob\\" if Bob wins. If the starting position has no empty cells, print \\"Draw\\". Example Input 3 3 3 ... .#. # 2 2 4 4 .#.. #..# .#.. Output Alice Draw Bob Note In the first test case, Alice can place her piece in cell (1,1), then Bob can place his piece in cell (1,2), and the game continues until all cells are filled. Since Alice starts first and there are an odd number of cells (3), Alice will place the last piece and win the game. In the second test case, the grid is fully obstructed, so it\'s a draw. In the third test case, the game will progress with both players making optimal moves, and Bob will win due to his ability to remove pieces.","solution":"def game_winner(t, test_cases): results = [] for case in test_cases: m, n, grid = case count_empty = sum(row.count(\'.\') for row in grid) if count_empty == 0: results.append(\\"Draw\\") elif count_empty % 2 == 1: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"Given an array of integers, you need to transform the array into a \\"Zigzag\\" sequence. A sequence is called Zigzag if every even-indexed element is greater than its adjacent elements and every odd-indexed element is less than its adjacent elements. Output the transformed array in zigzag manner. Input The first line of input contains an integer N, the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. Constraints 1 ≤ N ≤ 10^5 -10^6 ≤ array[i] ≤ 10^6 SAMPLE INPUT 7 4 3 7 8 6 2 1 SAMPLE OUTPUT 3 7 4 8 2 6 1 Explanation Original array: [4, 3, 7, 8, 6, 2, 1] - The first element (index 0) is 3 which is less than 7 (index 1) and greater than the previous value. - The second element (index 1) is 7 which is greater than 3 (index 0) and greater than the next element 4 (index 2). - The third element (index 2) is 4 which is less than 7 (index 1) and less than the next element 8 (index 3). And so on, the final \\"Zigzag\\" sequence is: [3, 7, 4, 8, 2, 6, 1].","solution":"def zigzag_sequence(arr): Transforms the input array into a zigzag sequence. Args: arr (list): List of integers. Returns: list: Transformed list in zigzag sequence. n = len(arr) for i in range(n-1): if (i % 2 == 0 and arr[i] > arr[i + 1]) or (i % 2 == 1 and arr[i] < arr[i + 1]): # Swap elements arr[i], arr[i + 1] = arr[i + 1], arr[i] return arr # Sample Input input_arr = [4, 3, 7, 8, 6, 2, 1] # Expected Output: [3, 7, 4, 8, 2, 6, 1] print(zigzag_sequence(input_arr))"},{"question":"Monocarp and Polycarp have recently learned about binary trees and are now focusing on performing various operations on them. One day, they decided to combine their knowledge and work together to manipulate and balance a binary search tree (BST). Monocarp and Polycarp have a BST with n nodes. Initially, the BST has elements [v_1, v_2, dots, v_n] in a sorted array, meaning that when you insert these elements in the given order into an empty binary search tree, it perfectly matches the initial BST. Each of them can perform exactly one of the following operations in any order: 1. Insert a new node with value v into the BST. 2. Delete a node with value v from the BST (only if the node exists in the BST). Monocarp performed m operations, described by the sequence [a_1, a_2, dots, a_m]. If a_i > 0, then he inserted the node with value a_i. If a_i < 0, then he deleted the node with value -|a_i|. Polycarp performed p operations, described by the sequence [b_1, b_2, dots, b_p]. If b_j > 0, then he inserted the node with value b_j. If b_j < 0, then he deleted the node with value -|b_j|. Their goal is to record a common sequence of operations of length m + p such that all operations would be correctly executed on the BST. All operations should result in a valid BST at each stage of execution. If more than one sequence is possible, print any of them. # Input - The first line contains an integer t (1 le t le 1000), the number of test cases. Each test case contains the following: - The first line contains two integers n and k (1 le n le 100, 1 le k le 100): the number of nodes in the initial BST and the maximum value of any node, respectively. - The second line contains n integers v_1, v_2, dots, v_n (1 le v_i le k): the initial elements of the BST in sorted order. - The third line contains an integer m (1 le m le 100), the number of operations performed by Monocarp. - The fourth line contains m integers a_1, a_2, dots, a_m (-k le a_i le k, a_i neq 0): the operations performed by Monocarp. - The fifth line contains an integer p (1 le p le 100), the number of operations performed by Polycarp. - The sixth line contains p integers b_1, b_2, dots, b_p (-k le b_j le k, b_j neq 0): the operations performed by Polycarp. # Output For each test case, print any correct common sequence of operations of length m + p that Monocarp and Polycarp can perform or -1 if no such sequence exists. # Examples Input ``` 2 3 10 3 5 7 3 5 -5 9 3 6 -6 8 5 20 4 8 12 16 20 4 10 -10 14 -14 4 11 -11 15 -15 ``` Output ``` 5 6 -5 -6 9 8 10 11 -10 -11 14 15 -14 -15 ``` # Note None","solution":"def combine_operations(n, initial_elements, mon_operations, poly_operations): bst_set = set(initial_elements) combined_operations = [] mon_ptr = 0 poly_ptr = 0 m = len(mon_operations) p = len(poly_operations) while mon_ptr < m or poly_ptr < p: if mon_ptr < m: op = mon_operations[mon_ptr] value = abs(op) if op > 0: bst_set.add(value) elif value in bst_set: bst_set.remove(value) combined_operations.append(op) mon_ptr += 1 if poly_ptr < p: op = poly_operations[poly_ptr] value = abs(op) if op > 0: bst_set.add(value) elif value in bst_set: bst_set.remove(value) combined_operations.append(op) poly_ptr += 1 return combined_operations def solve(t, test_cases): results = [] for case in test_cases: n, k = case[\'nk\'] initial_elements = case[\'initial_elements\'] m = case[\'m\'] mon_operations = case[\'mon_operations\'] p = case[\'p\'] poly_operations = case[\'poly_operations\'] combined_operations = combine_operations(n, initial_elements, mon_operations, poly_operations) results.append(combined_operations) return results # Input parsing and output formatting: def main(): import sys input = sys.stdin.read data = input().split() idx = 0 t = int(data[idx]) idx += 1 test_cases = [] for _ in range(t): n = int(data[idx]) k = int(data[idx+1]) idx += 2 initial_elements = list(map(int, data[idx:idx+n])) idx += n m = int(data[idx]) mon_operations = list(map(int, data[idx+1:idx+1+m])) idx += 1 + m p = int(data[idx]) poly_operations = list(map(int, data[idx+1:idx+1+p])) idx += 1 + p test_case = { \'nk\': (n, k), \'initial_elements\': initial_elements, \'m\': m, \'mon_operations\': mon_operations, \'p\': p, \'poly_operations\': poly_operations } test_cases.append(test_case) results = solve(t, test_cases) for res in results: print(\' \'.join(map(str, res))) if __name__ == \\"__main__\\": main()"},{"question":"You have been tasked with organizing a sports tournament at Berland International School. The tournament involves multiple sports, and students can participate in more than one sport. Each sport has an assigned skill level. Your task is to generate a report that lists the names of the students and their chosen sports in a specific format. For each sport, you have a list of students who have signed up, along with their skill levels in that sport. You need to organize this information and provide a report in the following format: 1. Print the name of each sport in lexicographical order. 2. For each sport, list the students participating in it, sorted first by their skill levels in descending order, and then by their names in lexicographical ascending order if two students have the same skill level. Input Format: - The first line contains an integer S, denoting the number of sports. - The second line contains an integer P, denoting the total number of student-participation entries. - Each of the next S lines contains the name of a sport. - Each of the next P lines contains a string (sport\'s name), another string (student\'s name), and an integer (student\'s skill level in that sport). Output Format: - For each sport, print the sport\'s name followed by the names and skill levels of the students participating in that sport according to the specified order. Constraints: - 1 ≤ S ≤ 50 - 1 ≤ P ≤ 10^4 - 1 ≤ Skill level of each student ≤ 100 - 1 ≤ Length of each sport\'s and each student\'s name ≤ 35 - The name of each sport and student will consist of lowercase English alphabets only. SAMPLE INPUT 3 5 badminton football chess football john 85 chess alice 90 badminton bob 78 football marina 95 badminton alice 82 SAMPLE OUTPUT badminton alice 82 bob 78 chess alice 90 football marina 95 john 85 Note: Ensure that the solution can handle large datasets efficiently, and consider edge cases such as no students participating in certain sports.","solution":"def generate_report(s, p, sports, entries): # Dictionary to store sports and their participants sports_dict = {sport: [] for sport in sports} # Fill the dictionary with participants\' data for entry in entries: sport, student, skill = entry sports_dict[sport].append((skill, student)) # Prepare the report report = [] for sport in sorted(sports): report.append(sport) participants = sorted(sports_dict[sport], key=lambda x: (-x[0], x[1])) for skill, student in participants: report.append(f\\"{student} {skill}\\") return report # Sample input s = 3 p = 5 sports = [\\"badminton\\", \\"football\\", \\"chess\\"] entries = [ (\\"football\\", \\"john\\", 85), (\\"chess\\", \\"alice\\", 90), (\\"badminton\\", \\"bob\\", 78), (\\"football\\", \\"marina\\", 95), (\\"badminton\\", \\"alice\\", 82) ] # Generate and print the report for the sample input result = generate_report(s, p, sports, entries) for line in result: print(line)"},{"question":"You have a 1-indexed array of integers a of length n. You are required to perform an operation that transforms this array according to certain rules described below: You can select two positive integers l and r such that 1 le l le r le n. Then you find the sum of the elements of the subarray defined by [l, r] (denote this sum by sum(l,r) = a_l + a_{l+1} + dots + a_r). Replace every element in the subarray [l, r] by the average of the sum sum(l,r) divided by the size of the subarray, which is (r - l + 1). The average should be rounded down to the nearest integer. Your task is to determine the minimum number of operations needed to make all the elements of the array equal to the same integer. -----Input----- The first line contains the number of test cases t (1 le t le 10^4). The description of the test cases follows. The first line of each test case contains one integer n (1 le n le 10^5). The second line of each test case contains n integers a_1, a_2, ldots, a_n (0 le a_i le 10^9). It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print one integer — the answer to the problem. -----Examples----- Input 3 5 1 2 3 4 5 4 4 4 4 4 6 10 10 30 30 10 10 Output 1 0 2 -----Note----- In the first test case, one optimal way is selecting l=1 and r=5. The sum of the elements from a_1 to a_5 is 1+2+3+4+5 = 15. The average of 15 / 5 = 3, so you set all elements in the array to 3. In the second test case, no operation is needed because all elements in the array are already equal. In the third test case, one possible way is to first select l=3, r=4 (to transform the subarray [30, 30] into [30, 30]). The second operation could involve selecting subarrays that bring the values towards uniformity optimally.","solution":"def min_operations_to_equalize_array(arr): from collections import Counter # Count the frequency of each element in the array frequency = Counter(arr) # The maximum frequency is the largest count of any single integer max_frequency = max(frequency.values()) # The minimum number of operations needed is the size of the array minus the max frequency return len(arr) - max_frequency def process_test_cases(test_cases): results = [] for n, arr in test_cases: result = min_operations_to_equalize_array(arr) results.append(result) return results"},{"question":"You are given a list of n integers. Your task is to answer q queries, each of which asks for the sum of the even-indexed elements (0-based index) in a specific subarray defined by its start and end indices. Input The first line contains integer n (1 ≤ n ≤ 100000) — the number of elements in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the list. The third line contains integer q (1 ≤ q ≤ 10000) — the number of queries. Each of the following q lines contains two integers li and ri (0 ≤ li ≤ ri < n) — the start and end indices of the subarray for the corresponding query. Output For each query, print the sum of the even-indexed elements in the subarray from index li to ri (inclusive). Examples Input 5 1 2 3 4 5 3 0 4 1 3 2 4 Output 9 3 8 Note In the first query, the even-indexed elements in the subarray from index 0 to 4 are 1, 3, and 5, and their sum is 1 + 3 + 5 = 9. In the second query, the even-indexed element in the subarray from index 1 to 3 is 3, and its sum is 3. In the third query, the even-indexed elements in the subarray from index 2 to 4 are 3 and 5, and their sum is 3 + 5 = 8.","solution":"def sum_even_indexed_elements(n, elements, q, queries): result = [] for query in queries: li, ri = query sum_even = sum(elements[i] for i in range(li, ri + 1) if i % 2 == 0) result.append(sum_even) return result"},{"question":"A group of friends have decided to play a party game involving a circular competition. They stand in a circle and each friend is assigned a unique number from 1 to n (where n is the total number of players, 3 ≤ n ≤ 10^5). The game starts with the friend numbered 1 and moves in a clockwise direction. The game follows these rules: 1. The current player eliminates the next player in the circle (the one standing immediately clockwise). 2. The eliminated player is removed from the circle. 3. The next turn is taken by the next player still in the circle, immediately clockwise from the one who just eliminated. This process continues until only one player remains. Your task is to determine the number assigned to the last remaining player. Input The input consists of a single integer n, representing the total number of players in the circle. Output Print a single number — the number assigned to the last remaining player. Examples Input 5 Output 3 Input 7 Output 7 Note In the first sample: 1) Player 1 eliminates player 2. 2) Player 3 eliminates player 4. 3) Player 5 eliminates player 1. 4) Player 3 eliminates player 5. Player 3 is the last remaining. In the second sample: 1) Player 1 eliminates player 2. 2) Player 3 eliminates player 4. 3) Player 5 eliminates player 6. 4) Player 7 eliminates player 1. 5) Player 3 eliminates player 5. 6) Player 7 eliminates player 3. Player 7 is the last remaining.","solution":"def last_remaining_player(n): Determines the number assigned to the last remaining player in the circle. Args: n (int): The total number of players in the circle. Returns: int: The number assigned to the last remaining player. survivors = list(range(1, n + 1)) index = 0 while len(survivors) > 1: next_index = (index + 1) % len(survivors) survivors.pop(next_index) index = next_index if next_index < len(survivors) else 0 return survivors[0]"},{"question":"Mary is learning about data structures and algorithms, specifically about binary search. She encountered a problem where she has to dynamically track the median of a stream of integers. Mary needs your help to implement an efficient system where numbers are repeatedly added to a collection, and after each addition, she needs to be able to quickly calculate the median of all elements added so far. The median of a finite list of numbers can be found by arranging all the numbers from smallest to largest. If there is an odd number of numbers, the median is the middle one; If there is an even number of numbers, the median is the average of the two middle numbers. You need to implement a class `MedianFinder` that supports the following methods: - `void addNum(int num)`: Adds an integer number `num` to the data structure. - `double findMedian()`: Returns the median of all elements so far. # Example: **Input:** ```plaintext [\\"MedianFinder\\", \\"addNum\\", \\"addNum\\", \\"findMedian\\", \\"addNum\\", \\"findMedian\\"] [[], [1], [2], [], [3], []] ``` **Output:** ```plaintext [null, null, null, 1.5, null, 2.0] ``` **Explanation:** ```plaintext MedianFinder medianFinder = new MedianFinder(); medianFinder.addNum(1); // arr = [1] medianFinder.addNum(2); // arr = [1, 2] medianFinder.findMedian(); // return 1.5 (the median of [1, 2]) medianFinder.addNum(3); // arr = [1, 2, 3] medianFinder.findMedian(); // return 2.0 (the median of [1, 2, 3]) ``` # Constraints: - There will be at most `10^5` calls to `addNum` and `findMedian`. - Each call to `addNum` will have `-10^5 <= num <= 10^5`. # Note: - You can assume that the input stream will always be non-empty when `findMedian` is called.","solution":"import heapq class MedianFinder: def __init__(self): # max heap to store the smaller half of the numbers self.max_heap = [] # min heap to store the larger half of the numbers self.min_heap = [] def addNum(self, num: int) -> None: # Add to max heap (invert num to simulate max heap) heapq.heappush(self.max_heap, -num) # Balance the heaps, ensure all elements in max heap are <= all elements in min heap if self.max_heap and self.min_heap and (-self.max_heap[0] > self.min_heap[0]): heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) # Ensure the size property of the heaps if len(self.min_heap) > len(self.max_heap) + 1: heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) elif len(self.max_heap) > len(self.min_heap) + 1: heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) def findMedian(self) -> float: if len(self.min_heap) > len(self.max_heap): return float(self.min_heap[0]) elif len(self.min_heap) < len(self.max_heap): return float(-self.max_heap[0]) else: return (-self.max_heap[0] + self.min_heap[0]) / 2.0"},{"question":"In a specific programming contest, participants are given a list of problems to solve. Each problem has two attributes: difficulty level and reward points. A participant must solve the problems in a sequential order (from the first problem to the last one, without skipping) and can collect reward points as they solve the problems. However, the participant can only move to the next problem if the difficulty level of that problem is less than or equal to a given maximum difficulty level that changes daily. Given the list of problems with their respective difficulty levels and reward points, and the maximum difficulty level for each day, determine the total reward points collected by the participant each day. -----Input:----- - First line contains T, number of testcases. Then the testcases follow. - Each testcase consists of three lines: - The first line contains two integers, n (number of problems), and d (number of days). - The second line contains n pairs of integers, where each pair represents the difficulty level and reward points of a problem. - The third line contains d integers representing the maximum difficulty level each day. -----Output:----- For each testcase, output in d lines the total reward points collected each day. -----Constraints----- - 1 leq T leq 10 - 1 leq n leq 1000 - 1 leq d leq 100 - 1 leq difficulty level, reward points leq 1000 - 1 leq maximum difficulty level leq 1000 -----Sample Input:----- 1 5 3 2 10 3 20 5 30 1 15 4 25 3 2 5 -----Sample Output:----- 65 25 100 -----EXPLANATION:----- For the given testcase, we have 5 problems with their respective difficulty levels and reward points: (2, 10), (3, 20), (5, 30), (1, 15), (4, 25). And the maximum difficulty levels for 3 days are 3, 2, and 5 respectively. On the first day, the maximum difficulty level is 3. The participant can solve the problems with difficulty levels 2, 3, 1 (collecting 10, 20, 15 points respectively), thus the total reward points collected are 10 + 20 + 15 = 45. On the second day, the maximum difficulty level is 2. The participant can solve the problems with difficulty levels 2, 1 (collecting 10, 15 points respectively), thus the total reward points collected are 10 + 15 = 25. On the third day, the maximum difficulty level is 5. The participant can solve all the problems with difficulty levels 2, 3, 5, 1, 4 (collecting 10, 20, 30, 15, 25 points respectively), thus the total reward points collected are 10 + 20 + 30 + 15 + 25 = 100.","solution":"def calculate_rewards(T, testcases): result = [] for i in range(T): n, d = testcases[i][0] problems = testcases[i][1] max_difficulties = testcases[i][2] for max_difficulty in max_difficulties: total_reward = sum(reward for difficulty, reward in problems if difficulty <= max_difficulty) result.append(total_reward) return result"},{"question":"Consider that you are responsible for distributing a series of tasks to a sequence of machines in a factory. You are given n tasks, each requiring a specific amount of time to complete, represented by an array t of length n, where t_i is the time required to complete the i-th task. The tasks need to be assigned to two machines such that each machine works on a subset of the tasks. Each task must be assigned to exactly one machine. The goal is to distribute the tasks such that the time taken by the machine that works for the longest time is minimized. Design an algorithm to distribute the tasks optimally. -----Input----- The first line contains a single integer n (1 le n le 20) — the number of tasks. The second line contains n integers t_1, t_2, ldots, t_n (1 le t_i le 10^3) — the times required to complete the tasks. -----Output----- Output one integer — the minimum possible time taken by the machine that works for the longest time. -----Example----- Input 5 2 3 5 8 2 Output 10 -----Note----- Consider the example input: The given task durations are [2, 3, 5, 8, 2]. One optimal way to distribute the tasks is to assign tasks with durations [2, 8] to one machine and tasks with durations [3, 5, 2] to the other machine. This leads to workloads of 10 and 10 on the two machines, respectively. The maximum workload is 10, which is the minimum possible in this scenario.","solution":"from itertools import combinations def min_max_time_distributed(tasks): n = len(tasks) total_time = sum(tasks) half_time = total_time // 2 best = total_time for i in range(n // 2 + 1): for comb in combinations(tasks, i): best = min(best, max(sum(comb), total_time - sum(comb))) return best # Example usage # n = 5 # tasks = [2, 3, 5, 8, 2] # print(min_max_time_distributed(tasks)) # Output: 10"},{"question":"Task Implement a function to find the Accumulated Product of Differences (APD) for a list of integers. The APD of a list is defined as the product of absolute differences between consecutive elements in the list. If the list has less than two elements, the APD is defined to be `1`. Input range: ```python 1 <= len(arr) <= 10^5 -10^9 <= arr[i] <= 10^9 ``` ___ Examples ```python accumulated_product_of_differences([5, 3, 8, 6]) == 20 accumulated_product_of_differences([1]) == 1 accumulated_product_of_differences([10, 2, 5]) == 24 accumulated_product_of_differences([0, -1, 1]) == 2 ``` In the first example, the list is `[5, 3, 8, 6]`; - The Absolute Differences between consecutive elements are: `|5-3|, |3-8|, |8-6|` which are `[2, 5, 2]`. - The Accumulated Product of Differences is `2 * 5 * 2 = 20`. However, for a list with only one element, such as `[1]`, the APD is `1` as defined by the problem statement. ___ Implementation Write a function `accumulated_product_of_differences(arr)` that takes a list of integers as input and returns the APD. ```python def accumulated_product_of_differences(arr): if len(arr) < 2: return 1 product = 1 for i in range(1, len(arr)): product *= abs(arr[i] - arr[i-1]) return product ```","solution":"def accumulated_product_of_differences(arr): Returns the Accumulated Product of Differences (APD) for a list of integers. If the list has less than two elements, the APD is defined to be 1. if len(arr) < 2: return 1 product = 1 for i in range(1, len(arr)): product *= abs(arr[i] - arr[i-1]) return product"},{"question":"You have been tasked with managing the food resources in a futuristic colony on Mars. The colony has a number of food storage facilities located at different coordinates on a straight line. Each facility can store a limited amount of food, and there are restrictions on how much food can be transported between these facilities. Given the coordinates of the food storage facilities, their respective storage capacities, and the maximum amount of food that can be transported in one trip, your goal is to determine the minimum number of trips needed to transport a certain amount of food from the first facility to the last one. -----Input----- The first line contains three integers n, m, and f (1 le n le 500, 1 le m le 10^5, 1 le f le 10^4), the number of facilities, the total amount of food to be transported, and the maximum amount of food that can be transported in one trip. The second line contains n integers c_i (1 le c_i le 10^4) — storage capacities of all facilities. The third line contains n integers d_i (d_1 < d_2 < ldots < d_n, 1 le d_i le 10^5) — coordinates of all facilities. -----Output----- Print a single integer — the minimum number of trips needed to transport m units of food from the first facility to the last one, or -1 if it is impossible to transport the given amount of food. -----Examples----- Input 5 100 10 15 20 25 10 30 1 2 3 4 5 Output 10 Input 3 50 7 14 16 20 1 10 20 Output 8 Input 3 80 10 10 20 30 1 4 9 Output -1 -----Note----- In the first example, because the maximum amount of food that can be transported in one trip is 10, and the total amount of food needed is 100, the minimum number of trips required is 10. In the second example, the maximum amount of food per trip is 7, and the total amount needed is 50. To minimize the trips, we distribute the load considering the capacity of each facility, resulting in 8 trips. In the third example, it\'s impossible to transport 80 units of food since the storage capacities sum up to only 60, and hence results in -1.","solution":"def minimum_trips(n, m, f, capacities, coordinates): Determine the minimum number of trips needed to transport m units of food from the first to the last facility. Parameters: n (int): number of facilities m (int): total food needed to transport f (int): maximum food transportable per trip capacities (list): capacities of storage facilities coordinates (list): coordinates of storage facilities Returns: int: minimum number of trips or -1 if impossible # Check if it\'s possible to transport the required amount of food at all if sum(capacities) < m: return -1 # Calculate the minimum number of trips needed based on the transport limit per trip trips_needed = (m + f - 1) // f # This is an efficient way to do ceiling division: ceil(m/f) return trips_needed"},{"question":"Alice is organizing a programming competition and she wants to build balanced teams. There is a list of participants, each with a skill level. Alice wants to form teams such that: - Each team has exactly 2 participants. - The skill difference between the two participants in any team is minimized. Given the list of participants and their skill levels, help Alice form teams in such a way that the maximum skill difference among all the teams is minimized. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N - the number of participants. (N is guaranteed to be even). - The second line of each test case contains N space-separated integers representing the skill levels of the participants. ------ Output Format ------ For each test case, output the minimum possible value of the maximum skill difference between pairs in the teams. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^{6} 1 ≤ skill levels ≤ 10^{9} - Sum of N over all test cases does not exceed 10^{6} ----- Sample Input 1 ------ 2 4 1 5 3 9 6 8 1 7 4 6 2 ----- Sample Output 1 ------ 2 1 ----- Explanation 1 ------ Test Case 1: We can form the following teams: - Team 1: Participants with skill levels 1 and 3. Skill difference = 2. - Team 2: Participants with skill levels 5 and 9. Skill difference = 4. The maximum skill difference among these teams is 4. However, a better option is to form: - Team 1: Participants with skill levels 1 and 5. Skill difference = 4. - Team 2: Participants with skill levels 3 and 9. Skill difference = 6. Another, optimal arrangement: - Team 1: Participants with skill levels 1 and 3. Skill difference = 2. - Team 2: Participants with skill levels 5 and 9. Skill difference = 4. Thus, the minimum possible maximum skill difference in this case is 2. Test Case 2: The optimal way to form the teams will result in: - Team 1: Participants with skill levels 1 and 2. Skill difference = 1. - Team 2: Participants with skill levels 4 and 6. Skill difference = 2. - Team 3: Participants with skill levels 7 and 8. Skill difference = 1. Thus, the minimum possible maximum skill difference in this case is 1.","solution":"def min_max_skill_difference(T, test_cases): results = [] for case in test_cases: N, skills = case skills.sort() min_diff = float(\'inf\') for i in range(1, N): min_diff = min(min_diff, skills[i] - skills[i - 1]) results.append(min_diff) return results # Example usage: # T = 2 # test_cases = [(4, [1, 5, 3, 9]), (6, [8, 1, 7, 4, 6, 2])] # print(min_max_skill_difference(T, test_cases)) # Output: [2, 1]"},{"question":"The city of Codeville has a peculiar street numbering system. Each street is represented by an integer, and the city planners have devised several routes between different streets. Each route connects two different streets bidirectionally and has an associated length. The Mayor wants to redesign the city\'s utility services such that every street is connected to every other street either directly or indirectly through one or more routes. The cost of maintaining a route is proportional to its length, and the Mayor wants to minimize the total maintenance cost. Your task is to determine the minimum total length of routes required to achieve the Mayor\'s goal. -----Input----- The first line of input contains two integers n and m (1 le n le 10^5, 0 le m le 10^6) — the number of streets and the number of routes, respectively. The next m lines each contain three integers u, v, and w (1 le u, v le n, 1 le w le 10^9) — the two streets connected by the route and the length of the route. -----Output----- Output a single integer — the minimum total length of the routes required to ensure that every street is connected. If there is no way to connect all the streets, output -1. -----Examples----- Input 4 5 1 2 10 1 3 6 2 3 5 3 4 7 1 4 12 Output 18 Input 3 1 1 2 15 Output -1 -----Note----- In the first example, the optimal plan is to choose routes (2, 3) with length 5, (3, 4) with length 7, and (1, 3) with length 6, for a total minimum length of 18. In the second example, it is impossible to connect all the streets with the given routes.","solution":"def find(parent, u): if parent[u] != u: parent[u] = find(parent, parent[u]) return parent[u] def union(parent, rank, u, v): root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 def minimum_cost_to_connect_streets(n, m, routes): if n == 1: return 0 parent = list(range(n + 1)) rank = [0] * (n + 1) routes.sort(key=lambda x: x[2]) total_cost = 0 edges_used = 0 for u, v, w in routes: if find(parent, u) != find(parent, v): union(parent, rank, u, v) total_cost += w edges_used += 1 if edges_used == n - 1: return total_cost return -1 # Testing with example inputs print(minimum_cost_to_connect_streets(4, 5, [(1, 2, 10), (1, 3, 6), (2, 3, 5), (3, 4, 7), (1, 4, 12)])) # Output: 18 print(minimum_cost_to_connect_streets(3, 1, [(1, 2, 15)])) # Output: -1"},{"question":"Given an array `arr` of integers and a target sum `S`, write a function `findSubarraysWithSum` that returns all unique subarrays that sum up to the target sum `S`. A subarray is defined as a contiguous segment of an array. The function should output the subarrays in the order they appear in the input array. If no such subarrays are found, the function should return an empty list. **Input:** - First line contains an integer `N` (0 ≤ N ≤ 1000) denoting the number of elements in the array. - Second line contains the array elements separated by space. - Third line contains the target sum `S`. **Output:** - A list of lists where each inner list represents a subarray whose elements sum up to `S`. **Sample Input:** ``` 5 1 2 3 4 5 5 ``` **Sample Output:** ``` [[2, 3], [5]] ``` **Explanation:** - The subarray `[2, 3]` sums to `5`. - The subarray `[5]` sums to `5`. **Additional Notes:** - The subarrays should be returned in the order they are found in the array. - Each subarray should be unique, meaning if the same integers appear in different segments of the array resulting in the same sum, they should be included separately as different subarrays. ```python def findSubarraysWithSum(N, arr, S): result = [] for start in range(N): current_sum = 0 subarray = [] for end in range(start, N): current_sum += arr[end] subarray.append(arr[end]) if current_sum == S: result.append(subarray[:]) return result # Example usage N = int(input()) arr = list(map(int, input().split())) S = int(input()) print(findSubarraysWithSum(N, arr, S)) ``` In this problem, your task is to implement the function `findSubarraysWithSum` to find all subarrays within `arr` that sum up to `S` and return them.","solution":"def findSubarraysWithSum(N, arr, S): result = [] for start in range(N): current_sum = 0 subarray = [] for end in range(start, N): current_sum += arr[end] subarray.append(arr[end]) if current_sum == S: result.append(subarray[:]) return result"},{"question":"Consider an undirected graph with `N` nodes numbered from `1` to `N` and `M` bidirectional edges. Each edge has an associated weight. You need to answer `Q` queries. Each query consists of two integers `U` and `V`. You need to find the shortest path from node `U` to node `V` in terms of the sum of weights of the edges on the path. If there is no path between `U` and `V`, return `-1` for that query. ------ Input ------ The first line of the input contains two space-separated integers `N` and `M`. Each of the next `M` lines contains three space-separated integers `A`, `B`, and `W` representing an edge between nodes `A` and `B` with weight `W`. The next line contains a single integer `Q`. Each of the next `Q` lines contains two space-separated integers `U` and `V`. ------ Output ------ For each query, print a single integer on a new line — the shortest path from node `U` to node `V`. If there is no path, print `-1`. ------ Constraints ------ 1 ≤ N ≤ 2000 1 ≤ M ≤ 10^5 1 ≤ A, B ≤ N 1 ≤ W ≤ 10^6 1 ≤ Q ≤ 10^5 1 ≤ U, V ≤ N ------ Sample Input 1 ------ 4 4 1 2 3 2 3 4 3 4 2 1 4 10 3 1 4 1 3 2 4 ------ Sample Output 1 ------ 9 7 6 ------ Explanation 1 ------ The shortest path between node `1` and `4` can be achieved by the path `1 -> 2 -> 3 -> 4` which has a total weight of `3 + 4 + 2 = 9`. The shortest path between node `1` and `3` can be achieved by the path `1 -> 2 -> 3` which has a total weight of `3 + 4 = 7`. The shortest path between node `2` and `4` is through the path `2 -> 3 -> 4` which has a total weight of `4 + 2 = 6`.","solution":"import heapq import sys from collections import defaultdict def dijkstra(graph, start, n): Function to execute Dijkstra\'s algorithm on the graph from a starting node. distances = {node: float(\'infinity\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def solve_shortest_paths(n, m, edges, q, queries): graph = defaultdict(list) for a, b, w in edges: graph[a].append((b, w)) graph[b].append((a, w)) all_distances = {} for i in range(1, n + 1): all_distances[i] = dijkstra(graph, i, n) results = [] for u, v in queries: distance = all_distances[u][v] if distance == float(\'infinity\'): results.append(-1) else: results.append(distance) return results"},{"question":"Sasha is the leader of her school\'s robotics club and they are preparing for a major competition. She needs to ensure all the parts used in the robot are functioning correctly. Each part is checked multiple times, and Sasha records the performance scores for each part across different tests. Your task is to help Sasha by writing an algorithm that can determine the best average performance for any given part over a specified range of tests. Specifically, Sasha has several queries and for each query, she wants to know the average performance score for a specific part across a specified range of test indices. # Input: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers, P and M, where P is the number of parts and M is the number of tests conducted. - The next P lines each contain M space-separated integers, representing the performance scores for each test for that part. - The next line contains an integer Q, the number of queries. - The next Q lines each contain three integers Pi, Xi, and Yi: - Pi is the part number (1-based index). - Xi is the starting test index (1-based index). - Yi is the ending test index (inclusive, 1-based index). # Output: For each query, print the average performance score of the specified part over the specified range as a float with 2 decimal places. # Constraints: - 1 leq T leq 10 - 1 leq P leq 100 - 1 leq M leq 1000 - 1 leq Q leq 1000 - 1 leq Performance Score leq 100 # Sample Input: 1 3 5 5 4 3 2 1 1 2 3 4 5 2 2 2 2 2 3 1 1 3 2 2 5 3 1 5 # Sample Output: 4.00 3.50 2.00 # Explanation: In the given sample: - For the first query, the average performance score of the first part over tests 1 to 3 is (5+4+3)/3 = 4.00. - For the second query, the average performance score of the second part over tests 2 to 5 is (2+3+4+5)/4 = 3.50. - For the third query, the average performance score of the third part over tests 1 to 5 is (2+2+2+2+2)/5 = 2.00.","solution":"def best_average_performance(T, test_cases): results = [] for t in range(T): P, M = test_cases[t][:2] scores = test_cases[t][2:2 + P] Q = test_cases[t][2 + P] queries = test_cases[t][3 + P:] for query in queries: Pi, Xi, Yi = query part_scores = scores[Pi - 1][Xi - 1:Yi] average_score = sum(part_scores) / len(part_scores) results.append(f\\"{average_score:.2f}\\") return results"},{"question":"In a distant land, there exists a series of mystical islands controlled by the powerful sorcerer Arkan. These islands are connected by magical portals, each of which can be used to travel instantly between two islands. The layout of the islands and portals is represented by an undirected graph with M islands and M - 1 portals, forming a tree structure. Arkan has created a unique spell that can alter the configuration of the portals. Specifically, he can strengthen the magical bond between two connected islands, increasing the power level of the portal between them. Arkan calls you, his apprentice, to manage this system of portals by performing R operations of the following types: 1. Given two islands `p` and `q`, strengthen the portal between these two islands by a power level of `k`. 2. Given an island `r`, determine the total power of all portals directly connected to this island. Your task is to implement these operations efficiently. # Input format: - The first line contains two integers M and R separated by a single space. M - 1 lines follow. Each of them contains two space-separated integers representing islands `a` and `b`, indicating that there is a portal between these two islands. After that, R lines follow, describing each query. Each query starts with an integer `t` denoting the type of the query. - If the query is of the first type (t = 1), it is followed by integers `p`, `q`, and `k`. - If the query is of the second type (t = 2), it is followed by a single integer `r`. All integers in the query description are separated by a single space. # Output format: For each query of the second type, output a single line containing the total power of the portals connected to the specified island. # Constraints: - 1 ≤ M ≤ 2 * 10^5 - 1 ≤ R ≤ 2 * 10^5 - 1 ≤ a, b, p, q, r ≤ M - -10^4 ≤ k ≤ 10^4 # SAMPLE INPUT 6 5 1 2 2 3 3 4 4 5 5 6 1 2 3 10 2 3 1 4 3 5 2 4 2 6 # SAMPLE OUTPUT 10 5 0 The sample input represents 6 islands and 5 queries. The first query strengthens the portal between island 2 and 3 by 10, the second query asks for the total power connected to island 3, the third query strengthens the portal between island 4 and 3 by 5, and the last two queries ask for the total power connected to islands 4 and 6, respectively.","solution":"from collections import defaultdict class MysticIslandSystem: def __init__(self, M): self.adjacency_list = defaultdict(list) self.power_levels = defaultdict(int) # Tracks the power level of portals (edge list) def add_portal(self, a, b): self.adjacency_list[a].append(b) self.adjacency_list[b].append(a) def strengthen_portal(self, p, q, k): # Since the graph is undirected, we can normalize (p, q) to always store the smaller first if p > q: p, q = q, p self.power_levels[(p, q)] += k def get_total_power(self, r): total_power = 0 for neighbor in self.adjacency_list[r]: if r < neighbor: total_power += self.power_levels[(r, neighbor)] else: total_power += self.power_levels[(neighbor, r)] return total_power def perform_operations(M, portals, operations): system = MysticIslandSystem(M) for a, b in portals: system.add_portal(a, b) result = [] for op in operations: if op[0] == 1: _, p, q, k = op system.strengthen_portal(p, q, k) elif op[0] == 2: _, r = op result.append(system.get_total_power(r)) return result"},{"question":"Sarah is fascinated by palindromic numbers and decides to create new palindromic numbers by summing numbers and their reversals. She starts with any positive integer and adds it to its reverse. If the sum is a palindrome, she stops; otherwise, she repeats the process with the new sum until a palindrome is obtained. Sometimes she worries that she might end up in an endless loop without finding a palindrome. Given an integer P, help Sarah determine how many additions are required to generate a palindromic number. If it is impossible to obtain a palindrome within 1000 additions, return -1. Input: The first line contains an integer T, the number of test cases. The next T lines each contain a single positive integer P. Output: For each test case, print the number of additions required to obtain a palindromic number or -1 if it is impossible within 1000 additions. Function Signature: def num_additions_for_palindrome(T: int, cases: List[int]) -> List[int]: Constraints: 1 ≤ T ≤ 1000 1 ≤ P ≤ 10^5 Example input: 2 56 89 Example output: 1 24 Explanation: For P=56, the steps are: 56 + 65 = 121 (Palindrome obtained in 1 addition) For P=89, the steps are: 89 + 98 = 187 187 + 781 = 968 968 + 869 = 1837 1837 + 7381 = 9218 9218 + 8129 = 17347 17347 + 74371 = 91718 91718 + 81719 = 173437 173437 + 734371 = 907808 907808 + 808709 = 1716517 1716517 + 7156171 = 8872688 8872688 + 8862788 = 17735476 17735476 + 67453771 = 85189247 85189247 + 74298158 = 159487405 159487405 + 504784951 = 664272356 664272356 + 653272466 = 1317544822 1317544822 + 2284457131 = 3602001953 3602001953 + 3591002063 = 7193004016 7193004016 + 6104003917 = 13297007933 13297007933 + 33970079231 = 47267087164 47267087164 + 46178076274 = 93445163438 93445163438 + 83436154439 = 176881317877 176881317877 + 778713188671 = 955594506548 955594506548 + 845605495559 = 1801200002107 1801200002107 + 7012000021081 = 8813200023188 (Palindrome obtained in 24 additions)","solution":"def reverse_number(n): return int(str(n)[::-1]) def is_palindrome(n): return str(n) == str(n)[::-1] def num_additions_for_palindrome(T, cases): results = [] for P in cases: count = 0 while count < 1000: if is_palindrome(P): break P = P + reverse_number(P) count += 1 if count < 1000: results.append(count) else: results.append(-1) return results"},{"question":"You are in charge of organizing a relay race with robots on a rectangular field with height H meters and width W meters. The field is divided into a grid of H times W cells, where each cell is 1 meter by 1 meter. Each cell on the grid is designated by its coordinates (i, j), where i is the row number (0-indexed from the top) and j is the column number (0-indexed from the left). There are N robots positioned on the grid. The position of the i-th robot is (R_i, C_i). Each robot can only move in four directions: up, down, left, and right. A robot can move exactly one cell in any of these directions in one step. The relay race requires robots to pass a baton from one to another. The baton starts with the first robot at (R_0, C_0). The baton needs to be passed to the last robot at (R_{N-1}, C_{N-1}). The baton must be passed directly from one robot to another by moving it to a cell adjacent to the recipient robot (sharing an edge). The cost to pass the baton from the i-th robot to the j-th robot is defined as the Manhattan distance between (R_i, C_i) and (R_j, C_j), which is |R_i - R_j| + |C_i - C_j|. Your goal is to determine the minimum total cost to pass the baton from the first robot to the last robot, possibly involving other robots in between. Formally, you are to compute the minimum sum of the costs to pass the baton in a sequence from (R_0, C_0) to (R_{N-1}, C_{N-1}). Note that each robot can be used multiple times as intermediate passers of the baton if it minimizes the total cost. # Example Input: ``` 3 3 3 0 0 1 2 2 2 ``` Output: ``` 4 ``` # Explanation The field has a height of 3 meters and width of 3 meters. There are 3 robots positioned at (0, 0), (1, 2), and (2, 2). The optimal sequence of passing the baton is from (0, 0) to (1, 2) and then from (1, 2) to (2, 2), resulting in a total cost of: ( (0,0) rightarrow (1,2) ) + ( (1,2) rightarrow (2,2) ) = 3 + 1 = 4","solution":"import heapq def min_cost_relay(H, W, N, robots): Calculates the minimum cost to pass the baton from the first robot to the last robot. Parameters: H (int): Height of the field in meters. W (int): Width of the field in meters. N (int): Number of robots. robots (list): List of tuples where each tuple contains the coordinates (R_i, C_i) of the robots. Returns: int: Minimum total cost to pass the baton. def manhattan_distance(x1, y1, x2, y2): return abs(x1 - x2) + abs(y1 - y2) # Create a graph where each node is a robot and the edge weights are the Manhattan distances graph = {i: [] for i in range(N)} for i in range(N): for j in range(i + 1, N): distance = manhattan_distance(robots[i][0], robots[i][1], robots[j][0], robots[j][1]) graph[i].append((distance, j)) graph[j].append((distance, i)) # Use Dijkstra\'s algorithm to find the shortest path from robot 0 to robot N-1 pq = [(0, 0)] # (cost, robot_index) distances = {i: float(\'inf\') for i in range(N)} distances[0] = 0 visited = set() while pq: current_distance, current_robot = heapq.heappop(pq) if current_robot in visited: continue visited.add(current_robot) for edge_distance, neighbor in graph[current_robot]: if neighbor in visited: continue new_distance = current_distance + edge_distance if new_distance < distances[neighbor]: distances[neighbor] = new_distance heapq.heappush(pq, (new_distance, neighbor)) return distances[N-1]"},{"question":"In a zoo, there are n animals numbered from 1 to n. Each of these animals has a unique strength represented by an integer. The zookeeper wants to know certain information about the animals based on their strengths. The strength of each animal is stored in an array `strengths` of size n. The zookeeper will give you q queries, each of which is one of the following three types: - \\"1 l r\\" - Find and print the maximum strength among the animals from index l to index r (inclusive). - \\"2 x y\\" - Find and print the animal index with the highest strength in the range from index x to index y (inclusive). If there are multiple animals with the highest strength, print the smallest index. - \\"3\\" - Print the minimum and the maximum strength of all animals currently in the zoo. Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) - the number of animals and the number of queries. - The second line contains n integers `strengths[1], strengths[2], ..., strengths[n]` (1 ≤ strengths[i] ≤ 10^9) - the strength of each animal. - Each of the next q lines describes a query of one of the three types mentioned above. Output: - For each query of type \\"1 l r\\", print a single integer - the maximum strength in the range from index l to index r. - For each query of type \\"2 x y\\", print a single integer - the index of the animal with the highest strength in the range from index x to index y. If there are multiple such indices, print the smallest one. - For the query of type \\"3\\", print two integers - the minimum and the maximum strength among all animals in the zoo. Example: ```plaintext Input: 5 6 5 3 9 6 2 1 1 3 2 2 4 1 2 5 2 1 5 3 1 1 5 Output: 9 3 9 3 2 9 9 ``` Explanation: - The first query \\"1 1 3\\" asks for the maximum strength from index 1 to 3, which is 9. - The second query \\"2 2 4\\" asks for the index with the highest strength from index 2 to 4, which is 3 (the strength at index 3 is 9). - The third query \\"1 2 5\\" asks for the maximum strength from index 2 to 5, which is 9. - The fourth query \\"2 1 5\\" asks for the index with the highest strength from index 1 to 5, which is 3 (the strength at index 3 is 9). - The fifth query \\"3\\" asks for the minimum and maximum strength in the entire zoo, which are 2 and 9 respectively. - The sixth query \\"1 1 5\\" asks for the maximum strength from index 1 to 5, which is 9.","solution":"def process_queries(n, q, strengths, queries): results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": l, r = int(parts[1]), int(parts[2]) max_strength = max(strengths[l-1:r]) # converting to 0-based index results.append(max_strength) elif parts[0] == \\"2\\": x, y = int(parts[1]), int(parts[2]) max_strength = max(strengths[x-1:y]) # converting to 0-based index indices = [i+1 for i in range(x-1, y) if strengths[i] == max_strength] # converting back to 1-based index results.append(min(indices)) elif parts[0] == \\"3\\": min_strength, max_strength = min(strengths), max(strengths) results.append((min_strength, max_strength)) return results"},{"question":"Alice is creating a series of magic potions on an infinite grid. Each potion has a specific position given by its coordinates in the form (x, y). Alice begins by placing m magic potions at different positions on the grid. She wants to apply a special rule: if three magic potions form an equilateral triangle with a free cell at its center, she places a new potion at that center cell. The process continues until no more new potions can be placed based on this rule. It\'s known that this process will eventually halt, and the final positions do not depend on the order of potion placements determined by the rule. Alice asks you to find an initial placement of exactly m potions such that in the end there will be at least ⌊ frac{m^{3}}{15} ⌋ potions. Input The only line of input contains one integer m (1 ≤ m ≤ 10^{3}) — number of potions in the initial placement. Output Print m lines. Each line should contain 2 numbers x_{i} and y_{i} (-10^{9} ≤ x_{i}, y_{i} ≤ 10^{9}) — coordinates of i-th potion. For all i ≠ j, (x_{i}, y_{i}) ≠ (x_{j}, y_{j}) should hold. In other words, all potions should be in different cells. It is guaranteed that the solution exists. Examples Input 3 Output 0 0 3 0 1 2 Input 5 Output 0 0 4 0 2 3 5 6 8 2 Note Let\'s look at the first example: Potions are initially placed at (0, 0), (3, 0), and (1, 2), forming an equilateral triangle with cell (2, 1.5) at its center. As this cell is not on the grid with integer coordinates, no new potion is placed. No other equilateral triangles can be formed initially, so the process ends with 3 potions. In the second example: Potions initially form a series of equilateral triangles, allowing new potions to be placed in central positions such as (2, 1.5) and (6, 1.5). The process continues with new positions being added until no more potions can be placed by the rule. The goal is that the final number of potions is at least ⌊ frac{5^{3}}{15} ⌋ = 1.","solution":"def generate_potions(m): Generates the initial coordinates of m potions placed on an infinite grid. potions = [] for i in range(m): x = 2 * i y = (i % 2) * 2 potions.append((x, y)) return potions"},{"question":"Problem You are a team lead in a software development company. You have been assigned the task of distributing tasks to your team members. Each task has a specific difficulty level, and each team member has a maximum difficulty level they can handle. Your goal is to assign tasks to team members such that the maximum number of tasks is completed. A team member can handle a task if the difficulty level of the task is less than or equal to the maximum difficulty level of the team member. You are given a list of tasks with their difficulty levels and a list of team members with their maximum difficulty levels. Write a program to determine the maximum number of tasks that can be assigned to the team members. # Constraints: - 1 ≤ number of tasks, number of team members ≤ 10^5 - 0 ≤ difficulty level of each task, maximum difficulty level of each team member ≤ 10^9 # Input: The first line contains an integer T denoting the number of test cases. For each test case: - The first line contains an integer N denoting the number of tasks. - The second line contains N space-separated integers representing the difficulty levels of the tasks. - The third line contains an integer M denoting the number of team members. - The fourth line contains M space-separated integers representing the maximum difficulty levels of the team members. # Output: For each test case, output a single integer representing the maximum number of tasks that can be completed. # Example: Input: ``` 2 3 2 4 3 2 3 1 4 5 1 2 7 3 8 4 4 ``` Output: ``` 1 3 ``` # Explanation: For the first test case, the possible task assignments are: - Task with difficulty 2 can be handled by a team member with maximum difficulty 3. - Task with difficulty 3 can be handled by the same team member. - Task with difficulty 4 cannot be handled by any team member as none has a maximum difficulty of 4 or more. So, the maximum number of tasks that can be assigned is 1. For the second test case, the possible task assignments are: - Task with difficulty 1 can be handled by a member with maximum difficulty 4. - Task with difficulty 2 can be handled by a member with maximum difficulty 4. - Task with difficulty 5 can be handled by a member with maximum difficulty 8. - Task with difficulty 7 cannot be assigned as all the members have already taken a task. Therefore, the maximum number of tasks that can be assigned is 3.","solution":"def max_tasks_assigned(num_cases, cases): results = [] for case in cases: num_tasks, tasks, num_members, members = case # Sort tasks and members to use a greedy approach tasks.sort() members.sort() task_pointer, member_pointer = 0, 0 max_tasks = 0 while task_pointer < num_tasks and member_pointer < num_members: if tasks[task_pointer] <= members[member_pointer]: max_tasks += 1 task_pointer += 1 member_pointer += 1 else: member_pointer += 1 results.append(max_tasks) return results"},{"question":"In a college, there is a tradition of distributing medals to students based on their performance each semester. A student gets a **Gold**, **Silver**, or **Bronze** medal based on their ranking in the class. The college administration wants you to write a code that automates the medal distribution process. The ranking of students in the class is given as an array of positive integers, where each number represents the position of a student. The task is to assign medals to the top 3 ranked students based on their scored position (1 representing the top rank). If there are more than 3 students in the input, then the following students will not receive any medals. - The student with the rank 1 should get a \\"Gold\\" medal. - The student with the rank 2 should get a \\"Silver\\" medal. - The student with the rank 3 should get a \\"Bronze\\" medal. If there are fewer than 3 students in the input, only those students should receive the corresponding medals. If there are no students, print an empty list. -----Input----- - The first line contains a single integer T representing the number of test cases. - The first line of each test case contains a positive integer N representing the number of students. - The second line of each test case contains N positive integers separated by spaces, representing the ranking of the students. -----Output----- For each test case, print a list containing the medals of the students in the same order they appear in the input. -----Constraints----- - 1 le T le 100 - 0 le N le 10 - The ranking of students will be unique for each test case. -----Example Input----- 3 5 1 2 3 4 5 3 2 3 1 2 1 2 -----Example Output----- [\'Gold\', \'Silver\', \'Bronze\', \'\', \'\'] [\'Silver\', \'Bronze\', \'Gold\'] [\'Gold\', \'Silver\'] -----Explanation----- Example case 1: The input has rankings [1, 2, 3, 4, 5]. The top 3 students receive medals Gold, Silver, and Bronze respectively. The remaining students receive no medals. Example case 2: The input has rankings [2, 3, 1]. The student with rank 1 gets Gold, rank 2 gets Silver, and rank 3 gets Bronze. Example case 3: The input has rankings [1, 2]. The student with rank 1 gets Gold and student with rank 2 gets Silver because there are only 2 students.","solution":"def distribute_medals(T, test_cases): Distributes medals to students based on their ranking. Parameters: T (int): The number of test cases. test_cases (list of tuples): Each tuple contains an integer representing the number of students N, followed by a list of integers representing the ranking of the students. Returns: list of lists: Each sublist contains the medals distributed to the students in the order they appear in the input ranking. results = [] for case in test_cases: N, rankings = case medals = [\'\'] * N for i, rank in enumerate(rankings): if rank == 1: medals[i] = \'Gold\' elif rank == 2: medals[i] = \'Silver\' elif rank == 3: medals[i] = \'Bronze\' results.append(medals) return results"},{"question":"Jack is a wildlife photographer who loves capturing the beauty of forests. He often visits different forests and takes numerous pictures. To optimize his work, Jack has created a data structure to manage the entries of the pictures and needs your help in ensuring it is efficient. The forest is represented as a grid with R rows and C columns, where each cell denotes a specific area of the forest. Each cell can either be empty (denoted by 0) or contain a wildlife photograph (denoted by a positive integer, which is the photograph\'s unique ID). Jack wants to perform Q operations on this grid. The operations can be of the following types: 1) 1 x y --> Place a new photograph at the position (x, y). You can assume that this position will always be empty when this operation is performed. 2) 2 x y --> Remove the photograph from the position (x, y). You can assume that this position will always contain a photograph when this operation is performed. 3) 3 x1 y1 x2 y2 --> Count the number of photographs in the sub-grid defined by (x1, y1) as the top-left corner and (x2, y2) as the bottom-right corner. Jack needs a way to efficiently execute these operations on the grid. Input: The first line contains three integers R, C, and Q, separated by a single space, denoting the number of rows, number of columns, and number of operations respectively. The next Q lines describe the operations. Each line can be either: - An operation of type 1 with three integers separated by a single space. - An operation of type 2 with three integers separated by a single space. - An operation of type 3 with five integers separated by a single space. Output: For each operation of type 3, print the number of photographs in the specified sub-grid in a new line. Constraints: 1 ≤ R, C ≤ 1000 1 ≤ Q ≤ 100000 1 ≤ x, x1, x2 ≤ R 1 ≤ y, y1, y2 ≤ C Sample Input: 5 5 4 1 2 3 1 1 4 5 2 3 1 1 5 5 2 2 3 Sample Output: 2 Explanation: Initial grid: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]] After first operation: [[0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]] After second operation: [[0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 2], [0, 0, 0, 0, 0]] After third operation: Number of photographs in the entire grid is 2. After fourth operation: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 2], [0, 0, 0, 0, 0]]","solution":"def wildlife_photography(R, C, Q, operations): grid = [[0] * C for _ in range(R)] results = [] for operation in operations: op = operation.split() if op[0] == \\"1\\": # Place a new photograph _, x, y, photo_id = map(int, op) grid[x - 1][y - 1] = photo_id elif op[0] == \\"2\\": # Remove the photograph _, x, y = map(int, op) grid[x - 1][y - 1] = 0 elif op[0] == \\"3\\": # Count the number of photographs in the sub-grid _, x1, y1, x2, y2 = map(int, op) count = 0 for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): if grid[i][j] != 0: count += 1 results.append(count) return results"},{"question":"You are given a positive integer n, representing the number of elements in an array, and the array itself containing n integers. Your task is to determine the smallest positive integer that does not appear in the array. The first line of input contains a single integer T (1 le T le 100) - the number of test cases. For each test case, the first line contains a single integer n (1 le n le 10^5). The second line contains n integers - the elements of the array. Each element is an integer a_i (-10^6 le a_i le 10^6). Print T lines, each line containing the answer for the respective test case. Example Input: 2 5 1 2 3 4 5 6 0 -1 3 1 5 4 Output: 6 2 In the first test case, the smallest positive integer missing is 6, as the array contains all positive integers from 1 to 5. In the second test case, the smallest positive integer missing is 2, since 1 is present in the array but 2 is missing.","solution":"def smallest_missing_positive_integer(n, arr): Args: n : int - number of elements in the array arr : list of int - the array of integers Returns: int - the smallest positive integer that is missing from the array present = [False] * (n + 1) for num in arr: if 0 < num <= n: present[num] = True for i in range(1, n + 1): if not present[i]: return i return n + 1 def process_test_cases(T, test_cases): Args: T : int - number of test cases test_cases : list of tuples - each tuple contains (n, arr) Returns: list of int - list of results for each test case results = [] for n, arr in test_cases: results.append(smallest_missing_positive_integer(n, arr)) return results"},{"question":"You are given an initially empty sequence that can grow through a series of operations. You need to determine the state of the sequence after a number of defined operations. The sequence starts empty. You are given `m` operations, each of which is one of the following: 1. \\"append x\\": Append integer `x` (0 <= x <= 10^9) to the end of the sequence. 2. \\"remove\\": Remove the last element of the sequence if it is not empty. If the sequence is empty, ignore this operation. After all operations, output the final state of the sequence. The first line contains an integer `m` (1 <= m <= 2 * 10^5) - the number of operations. Each of the next `m` lines contains an operation as described above. Output the final state of the sequence. If the sequence is empty, output \\"EMPTY\\". # Example Input: ``` 5 append 4 append 3 remove append 2 remove ``` Output: ``` 4 ``` Input: ``` 3 remove remove remove ``` Output: ``` EMPTY ``` Note: Ensure your solution is efficient enough to handle the upper limits of input size.","solution":"def process_operations(operations): Processes a list of operations and returns the final state of the sequence. :param operations: List of operation strings :return: Final state of the sequence as list or \\"EMPTY\\" sequence = [] for operation in operations: if operation.startswith(\\"append\\"): _, number = operation.split() sequence.append(int(number)) elif operation == \\"remove\\" and sequence: sequence.pop() return sequence if sequence else \\"EMPTY\\""},{"question":"You are given an array of integers where each integer represents the height of a bar in a histogram. Identical bars are adjacent. Your task is to find the largest rectangle that can be formed within this histogram. A rectangle is formed by selecting a contiguous set of bars and the height of the rectangle is the height of the shortest bar in this set. Input - The first line contains an integer t (1 leq t leq 10^4), the number of test cases. - Each of the next t lines contains the description of a test case: - The first integer n (1 leq n leq 10^5), the number of bars in the histogram. - The next n integers represent the heights h_i (1 leq h_i leq 10^5) of the bars. Output - For each test case, print the maximum area of a rectangle that can be formed within the histogram on a new line. Example Input: ``` 2 7 2 1 4 5 1 3 3 5 3 2 5 6 1 ``` Output: ``` 8 10 ``` Explanation: In the first test case, the largest rectangle has an area of 8, which can be formed using the bars with heights 4 and 5. In the second test case, the largest rectangle has an area of 10, which can be formed using the bars with heights 5 and 6.","solution":"def largestRectangleArea(heights): This function takes a list of heights of the histogram and returns the largest rectangle area. stack = [] max_area = 0 heights.append(0) # Add a zero height bar to handle remaining heights in stack for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() # Remove the zero height bar added before return max_area def max_histogram_area(t, test_cases): results = [] for i in range(t): n, heights = test_cases[i] results.append(largestRectangleArea(heights)) return results"},{"question":"You are given a string s consisting of n lowercase Latin letters. Define the \\"efficiency\\" of the string as the sum of the ASCII values of its characters. You are given two integers l and r, denoting the range of possible new lengths the string can be modified to. Your task is to construct a new string t of length between l and r (both inclusive) by deleting some (possibly none) characters from the original string s such that the efficiency of the new string is minimized. If there are multiple strings with the same minimum efficiency, you can output any of them. The first line of the input contains three integers n, l, and r (1 le n le 10^5, 1 le l le r le n) — the length of the string s, and the range of possible new lengths l and r. The second line of the input contains the string s consisting of n lowercase Latin letters. Print the resulting string t in one line. If it\'s not possible to form such a string, print \\"IMPOSSIBLE\\". # Example Input: ``` 5 2 3 abcde ``` Output: ``` ab ``` or ``` ac ``` # Note In the example above, possible outputs are strings \\"ab\\", \\"ac\\", \\"ad\\", \\"ae\\", \\"bc\\", \\"bd\\", \\"be\\", \\"cd\\", \\"ce\\", \\"de\\" of lengths 2 and 3. Among these, \\"ab\\" has the minimal efficiency.","solution":"def minimize_efficiency(n, l, r, s): Returns a new string t of length between l and r (both inclusive) formed by deleting some (possibly none) characters from the original string s such that the efficiency of the new string is minimized. if l > n or r > n or l < 1 or r < 1: return \\"IMPOSSIBLE\\" sorted_s = sorted(s) return \\"\\".join(sorted_s[:l])"},{"question":"Write a function that simulates the operation of a basic blockchain. A blockchain is a growing list of records, called blocks, which are linked using cryptography. Each block contains the hash of the previous block, a timestamp, and transaction data. Your task is to implement a simplified version of a blockchain that allows the following operations: 1. **Add a new block:** Add a new block to the blockchain that contains transaction data. 2. **Verify the integrity of the blockchain:** Check the consistency of the current blockchain to ensure all blocks are properly linked. # Specifications: 1. Define a `Block` class with the following properties: - `index`: The position of the block in the chain (starting from 0). - `previous_hash`: The hash of the previous block in the chain. - `timestamp`: The time when the block was created. - `data`: The transaction data contained in the block. - `hash`: The hash of the current block. 2. Define a `Blockchain` class which: - Initializes with a genesis block (the first block in the chain). - Has a method `add_block(data)` that adds a new block to the chain. - Has a method `is_valid()` that checks if the blockchain is valid. # Requirements: - Use SHA-256 for creating the hash of a block. - Ensure that `is_valid()` verifies the integrity of the blockchain by: - Checking that the `previous_hash` of each block matches the `hash` of the previous block. - Verifying the integrity of the hash for each block. # Example Usage: ```python # Genesis block bc = Blockchain() print(bc.is_valid()) # Should return True # Adding new blocks bc.add_block(\\"First transaction\\") bc.add_block(\\"Second transaction\\") print(bc.is_valid()) # Should return True # Tampering the blockchain bc.chain[1].data = \\"Hacked transaction\\" print(bc.is_valid()) # Should return False ``` # Constraints: 1. The blockchain can contain a maximum of 1000 blocks. 2. The transaction data in any block is a non-empty string containing ASCII characters and is at most 256 characters long. Implement the `Block` and `Blockchain` class as per the specifications and examples above.","solution":"import hashlib import time class Block: def __init__(self, index, previous_hash, timestamp, data): self.index = index self.previous_hash = previous_hash self.timestamp = timestamp self.data = data self.hash = self.hash_block() def hash_block(self): sha = hashlib.sha256() sha.update((str(self.index) + str(self.previous_hash) + str(self.timestamp) + str(self.data)).encode(\'utf-8\')) return sha.hexdigest() class Blockchain: def __init__(self): self.chain = [self.create_genesis_block()] def create_genesis_block(self): # Create the first block in the chain, the genesis block return Block(0, \\"0\\", time.time(), \\"Genesis Block\\") def add_block(self, data): previous_block = self.chain[-1] new_block = Block(len(self.chain), previous_block.hash, time.time(), data) self.chain.append(new_block) def is_valid(self): for i in range(1, len(self.chain)): current_block = self.chain[i] previous_block = self.chain[i - 1] if current_block.previous_hash != previous_block.hash: return False if current_block.hash != current_block.hash_block(): return False return True"},{"question":"An e-commerce company needs to analyze the sales trend of its product. The company has a list of sales recorded over a specific period. They want to know the length of the longest subarray of increasing sales. Given an array of integer sales records where each element represents the sales count for a day, find the length of the longest contiguous subarray such that each day the sales count was strictly higher than the previous day. For example: - If the input sales array is [7, 2, 3, 4, 2, 8, 9], the longest contiguous subarray of increasing sales is [2, 3, 4], and its length is 3. - If the input sales array is [5, 4, 3, 2, 1], since there are no increasing subarrays, the result would be 1 (each element is an increasing subarray of length 1 on its own). You are required to find the length of this longest increasing subarray and print it. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of days. - The second line contains n integers, s1, s2, ..., sn (0 ≤ si ≤ 104) — the sales records for each day. Output: - Print a single integer representing the length of the longest contiguous subarray of strictly increasing sales. Examples: Input: 7 7 2 3 4 2 8 9 Output: 3 Input: 5 5 4 3 2 1 Output: 1","solution":"def longest_increasing_subarray_length(sales): if not sales: return 0 max_len = 1 current_len = 1 for i in range(1, len(sales)): if sales[i] > sales[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len # Example usage: # n = 7 # sales = [7, 2, 3, 4, 2, 8, 9] # print(longest_increasing_subarray_length(sales)) # Output: 3"},{"question":"You are given an array of integers where every element appears exactly twice, except for one element which appears exactly once. Your task is to find the element that appears only once. Input - First line contains an integer n (2 ≤ n ≤ 10^5 and n is odd), the size of the array. - Second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. Output - Output a single integer, the element that appears only once. Note: Your solution should have a linear runtime complexity and should use constant space. Example Input: 7 4 3 2 4 1 3 2 Output: 1","solution":"def find_unique_element(arr): This function finds the unique element in the array where every other element appears exactly twice except for one element. Parameters: arr (list of int): The input array with one unique element. Returns: int: The unique element in the array. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"Create a function `cipher_text` that performs a simple substitution cipher on a given string. A substitution cipher replaces each letter of the alphabet with another letter. Your task is to implement a function `cipher_text(text: str, key: dict) -> str` that takes in a string `text` and a dictionary `key`, and returns the encrypted string using the given key for the substitution. The `key` dictionary maps each character in the original alphabet to its corresponding substituted character. The substitution key is guaranteed to have 26 lowercase letters corresponding to the 26 letters of the alphabet in some unique order. # Example ```python text = \\"hello\\" key = { \'a\': \'q\', \'b\': \'w\', \'c\': \'e\', \'d\': \'r\', \'e\': \'t\', \'f\': \'y\', \'g\': \'u\', \'h\': \'i\', \'i\': \'o\', \'j\': \'p\', \'k\': \'a\', \'l\': \'s\', \'m\': \'d\', \'n\': \'f\', \'o\': \'g\', \'p\': \'h\', \'q\': \'j\', \'r\': \'k\', \'s\': \'l\', \'t\': \'z\', \'u\': \'x\', \'v\': \'c\', \'w\': \'v\', \'x\': \'b\', \'y\': \'n\', \'z\': \'m\' } print(cipher_text(text, key)) ``` Output: ``` itssg ``` # Constraints - The input string `text` will only contain lowercase alphabetic characters without spaces or punctuation. - The `key` dictionary is guaranteed to have a mapping for every letter from \'a\' to \'z\'. # Function Signature ```python def cipher_text(text: str, key: dict) -> str: pass ``` Implement the function to solve the problem.","solution":"def cipher_text(text: str, key: dict) -> str: Returns the encrypted string using the given key for the substitution. return \'\'.join(key[char] for char in text)"},{"question":"You are given a binary tree with `n` nodes. Each node has a value v_i associated with it. The value of the root node is v_1, its left child (if it exists) is v_2, its right child (if it exists) is v_3, and so on in a level-order traversal. Your task is to perform `q` queries on this binary tree. Each query asks you to calculate the sum of values of all nodes in the subtree rooted at the node with a given index. The binary tree is represented as follows: - The first line contains two integers n and q (1 ≤ n ≤ 10^5; 1 ≤ q ≤ 10^5). - The second line contains n integers v_1, v_2, ..., v_n (|v_i| ≤ 10^5) indicating the values of the nodes. - Each of the next q lines contains a single integer x (1 ≤ x ≤ n), representing the index of the node whose subtree sum should be calculated. Output q lines. The i-th line should contain a single integer, the sum of the values of all nodes in the subtree rooted at the node with index x as described in the i-th query. Example: Input: ``` 5 3 1 2 3 4 5 1 2 3 ``` Output: ``` 15 11 3 ``` Explanation: - The binary tree structure from the input is: ``` 1 / 2 3 / 4 5 ``` - For the first query, the subtree rooted at node `1` includes all nodes (sum = 1+2+3+4+5 = 15). - For the second query, the subtree rooted at node `2` includes nodes `2`, `4`, and `5` (sum = 2+4+5 = 11). - For the third query, the subtree rooted at node `3` includes only the node `3` (sum = 3).","solution":"def calculate_subtree_sums(n, values): Precompute the subtree sums using a DFS approach. Args: n: number of nodes values: list of values of the nodes Returns: subtree_sum: list where subtree_sum[i] is the sum of values in the subtree rooted at node i+1 subtree_sum = values[:] adjacency_list = [[] for _ in range(n)] # Construct the adjacency list from the level-order input for i in range(n): left_child_index = 2 * i + 1 right_child_index = 2 * i + 2 if left_child_index < n: adjacency_list[i].append(left_child_index) if right_child_index < n: adjacency_list[i].append(right_child_index) # Helper function for DFS def dfs(node): sum_subtree = values[node] for neighbor in adjacency_list[node]: sum_subtree += dfs(neighbor) subtree_sum[node] = sum_subtree return sum_subtree # Start DFS from the root node (which is at index 0) dfs(0) return subtree_sum def subtree_query_sum(n, q, values, queries): Calculates the sum of values of all nodes in the subtree rooted at the node with a given index for each query. Args: n: number of nodes q: number of queries values: list of values of the nodes queries: list of queries Returns: result: list of results for each query subtree_sum = calculate_subtree_sums(n, values) result = [] for query in queries: result.append(subtree_sum[query - 1]) return result"},{"question":"You are given two strings, `s1` and `s2`, both consisting of lowercase English letters. Your task is to transform `s1` into `s2` using the minimum number of operations. In one operation, you can: 1. Insert a character at any position of the string. 2. Remove a character from any position of the string. 3. Replace a character at any position with another character. Write a function that returns the minimum number of operations required to transform `s1` into `s2`. Function Signature: `def min_operations(s1: str, s2: str) -> int:` # Input - `s1`: A string consisting of lowercase English letters with length at most 1000. - `s2`: A string consisting of lowercase English letters with length at most 1000. # Output - An integer representing the minimum number of operations required to transform `s1` into `s2`. # Examples Example 1 **Input:** ```python s1 = \\"horse\\" s2 = \\"ros\\" ``` **Output:** ```python 3 ``` **Explanation:** ```python horse -> rorse (replace \'h\' with \'r\') rorse -> rose (remove \'r\') rose -> ros (remove \'e\') ``` Example 2 **Input:** ```python s1 = \\"intention\\" s2 = \\"execution\\" ``` **Output:** ```python 5 ``` **Explanation:** ```python intention -> inention (remove \'t\') inention -> enention (replace \'i\' with \'e\') enention -> exention (replace \'n\' with \'x\') exention -> exection (replace \'n\' with \'c\') exection -> execution (insert \'u\') ```","solution":"def min_operations(s1: str, s2: str) -> int: Returns the minimum number of operations required to transform s1 into s2. # Create a matrix to store the edit distances m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the matrix for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # s1 is empty, insert all characters of s2 elif j == 0: dp[i][j] = i # s2 is empty, remove all characters from s1 elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no operation needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"A new company candy robot serves candy to children on Halloween. You are given the initial number of children in the queue as an integer n, followed by n space-separated integers that represent the initial amount of candy that each child needs. When a child approaches the robot, the robot gives them one candy at a time. If a child’s candy requirement is fulfilled, they leave the queue. If not, they go to the end of the queue. We will also assume that it takes negligible time for a child to go to the end of the queue after receiving a candy. The robot will distribute candies until all children have received the amount they need. Your task is to determine how long the robot can keep serving until it stops, which happens when all children have received their designated amount of candies. The first line of the input contains the integer n (1 ≤ n ≤ 10^5), representing the number of children in the queue. The second line contains n space-separated integers c1, c2, ..., cn (1 ≤ ci ≤ 10^9) where ci is the initial amount of candy required by the ith child. Output the total number of candies distributed by the robot before all children leave the queue. Example: Input: 3 3 2 5 Output: 10 Explanation: - The first child (3 candies) receives candies and moves to the end of the queue twice, then leaves after receiving the 3rd candy. - The second child (2 candies) receives candies twice, then leaves. - The third child (5 candies) receives candies and moves to the end of the queue four times, then leaves after receiving the 5th candy. Thus, the robot serves a total of 3 + 2 + 5 = 10 candies.","solution":"def total_candies(n, candies): Given the number of children and their respective candy requirements, calculate the total number of candies distributed by the robot. Parameters: n (int): The number of children in the queue. candies (list): A list of integers representing the candy requirement for each child. Returns: int: The total number of candies distributed by the robot. total = sum(candies) return total"},{"question":"You are given a string s consisting of lowercase English letters. You have to answer several queries about this string. Each query is of one of the following two types: 1. Update the character at a specified position in the string. 2. Determine the lexicographically smallest character between two specified positions in the string. Can you process all the queries? The first line contains one integer q (1 le q le 100000) — the number of queries. Then q lines follow, each describing a query. The i-th line contains different values depending on type of the query: - If the query is of the first type, the line contains three elements t_i, pos_i, and c_i (t_i = 1, 1 le pos_i le |s|, and c_i is a lowercase English letter), meaning that the character at position pos_i in the current string should be updated to c_i. - If the query is of the second type, the line contains three elements t_i, l_i, and r_i (t_i = 2, 1 le l_i le r_i le |s|), meaning that you should report the lexicographically smallest character in the substring from index l_i to index r_i (inclusive). It is guaranteed that there will be at least one query of type 2. For each query of type 2 print the result in a new line.","solution":"def process_queries(s, queries): s = list(s) result = [] for query in queries: if query[0] == 1: # Update operation pos = query[1] - 1 # zero-indexed char = query[2] s[pos] = char elif query[0] == 2: # Find the smallest character in the substring l = query[1] - 1 # zero-indexed r = query[2] - 1 # zero-indexed result.append(min(s[l:r+1])) return result"},{"question":"An old kingdom has a network of n castles connected by n-1 roads. Each road connects exactly two different castles, and it\'s possible to travel from any castle to any other castle using these roads. Interestingly, every castle has exactly one entrance for a road. One day, a mysterious wizard appears and casts a spell on these castles. The spell causes exactly one of the roads to block, making it impassable. Given the n-1 roads that remain passable after the spell, determine if it\'s still possible to travel between any two castles. If it is still possible, print \\"Yes\\" (without quotes), otherwise print \\"No\\" (without quotes). # Input - The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of castles in the kingdom. - Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — representing a road directly connecting castles u and v. # Output - Print \\"Yes\\" if it is still possible to travel between any two castles; otherwise, print \\"No\\". # Example Input ``` 4 1 2 2 3 3 4 ``` Output ``` Yes ``` Input ``` 3 1 2 2 3 ``` Output ``` Yes ``` Input ``` 5 1 2 1 3 1 4 1 5 ``` Output ``` Yes ``` Input ``` 5 1 2 2 3 3 4 4 5 ``` Output ``` Yes ```","solution":"def is_still_connected(n, roads): from collections import defaultdict, deque if n == 2: return \\"Yes\\" # Create adjacency list graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # BFS to check connectivity visited = set() queue = deque([1]) while queue: castle = queue.popleft() if castle not in visited: visited.add(castle) for neighbor in graph[castle]: if neighbor not in visited: queue.append(neighbor) return \\"Yes\\" if len(visited) == n else \\"No\\""},{"question":"A company is running a coding competition where participants are asked to generate unique codes based on certain rules. Each code is a string consisting of lowercase English letters. The length of each code is exactly n characters, and no two codes should be identical. Additionally, there is a strict prohibition against using any substring of length k from any previously generated code in a new code. Your task is to help the competition committee generate the first m valid codes based on these rules. If fulfilling the requirement is impossible, output \\"IMPOSSIBLE\\". If possible, provide the list of codes, each on a new line. The first line of input contains three integers n, m, and k (1 ≤ n ≤ 6, 1 ≤ m ≤ 100, 1 ≤ k ≤ n) — the length of the codes, the number of codes to generate, and the length of the restricted substrings. Write a function that generates the required codes or determines that it is impossible to do so. # Input - The first line contains three integers n, m, and k. # Output - If it is impossible to generate the required number of codes, output \\"IMPOSSIBLE\\". - Otherwise, output \\"POSSIBLE\\" and then m lines each containing a valid code. # Example Input ``` 3 4 2 ``` Output ``` POSSIBLE abc bca cab bac ```","solution":"from itertools import product def generate_codes(n, m, k): def is_valid(new_code, generated_codes): for g_code in generated_codes: for i in range(n - k + 1): if new_code.find(g_code[i:i + k]) != -1: return False return True generated_codes = [] all_possible_codes = [\'\'.join(p) for p in product(\'abcdefghijklmnopqrstuvwxyz\', repeat=n)] for code in all_possible_codes: if len(generated_codes) == m: break if is_valid(code, generated_codes): generated_codes.append(code) if len(generated_codes) == m: return [\'POSSIBLE\'] + generated_codes else: return [\'IMPOSSIBLE\']"},{"question":"Louise has a string of lowercase English letters and she wants to remove characters from it. She will perform this operation exactly k times. Each time, she will remove the lexicographically smallest character still present in the string. Your task is to determine the final string after all k deletions. The first line of the input contains two integer numbers s and k (1 le |s| le 10^5, 1 le k le |s|) — the original string and the number of deletions, respectively. Print the resultant string after removing the lexicographically smallest character k times. **Example** Input: ``` abcdef 3 ``` Output: ``` def ``` Explanation: The lexicographically smallest characters in \\"abcdef\\" are \'a\', \'b\', and \'c\'. Removing them leaves us with \\"def\\".","solution":"def remove_lexicographically_smallest(s, k): Removes the lexicographically smallest character from the string s, k times. s_list = sorted(s) del s_list[:k] s_list = list(s) while k > 0: min_char = min(s_list) s_list.remove(min_char) k -= 1 return \'\'.join(s_list)"},{"question":"You are given an n times m grid representing a city layout. Each cell in the grid is either open or blocked. You need to find the length of the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). You can only move up, down, left, and right from an open cell, and you cannot move through blocked cells. The city layout is given as an n times m grid of characters, where \'.\' represents an open cell, and \'#\' represents a blocked cell. Write a function that calculates the length of the shortest path using breadth-first search. If no path exists, return -1. # Input - The first line contains two integers n and m (1 leq n, m leq 1000) – the dimensions of the grid. - The following n lines contain m characters each, representing the grid. # Output - Print a single integer – the length of the shortest path from the top-left corner to the bottom-right corner or -1 if no such path exists. # Example Input ``` 5 5 . . . # . # . . . . # # . # . . . # . . . . . . . ``` Output ``` 9 ``` Explanation The shortest path from the top-left corner to the bottom-right corner contains 9 cells, and the path is as follows: (0, 0) -> (1, 0) -> (1, 1) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3) -> (3, 4) -> (4, 4).","solution":"from collections import deque def shortest_path(n, m, grid): Given a n x m grid, returns the length of the shortest path from the top-left corner to the bottom-right corner or -1 if no such path exists. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given a string s consisting of lowercase English letters and the string t that consists of the same unique characters as string s but maybe in a different order. You need to determine if you can convert string s to string t by performing the following operation any number of times: - Select any character from string s and move it to any position in string t. For example, given s = \\"abc\\" and t = \\"bca\\", you can move the characters around to make s into t exactly. If it\'s possible to convert s to t with the given operation, print \\"POSSIBLE\\", otherwise, print \\"IMPOSSIBLE\\". Input: - The first line contains a single string s. - The second line contains a single string t. Both strings s and t consist of at most 100 lowercase English letters. Output: - Print \\"POSSIBLE\\" if the string s can be rearranged to form the string t, and \\"IMPOSSIBLE\\" otherwise.","solution":"def can_convert(s, t): Determines if the string s can be converted to string t by rearranging its characters. Args: s (str): The source string. t (str): The target string. Returns: str: \\"POSSIBLE\\" if s can be rearranged to form t, \\"IMPOSSIBLE\\" otherwise. return \\"POSSIBLE\\" if sorted(s) == sorted(t) else \\"IMPOSSIBLE\\""},{"question":"Given a matrix of size MxN, write a function to find the first element that appears more than once in the matrix when traversed in row-wise order. If no such element is found, return -1. Your function should have the following signature: ```python def first_repeated_element(matrix: List[List[int]]) -> int: ``` # Input The input parameters of the function are: - `matrix` (List[List[int]]): A 2D list (matrix) of integers where 1 <= M, N <= 1000 and 0 <= matrix[i][j] <= 10^6. # Output The function should return an integer, which is the first repeated element in the matrix during a row-wise traversal, or -1 if no element is repeated. # Example ```python matrix = [ [1, 2, 3], [4, 1, 6], [5, 3, 2] ] assert first_repeated_element(matrix) == 1 matrix = [ [7, 8, 9], [10, 11, 12], [13, 14, 15] ] assert first_repeated_element(matrix) == -1 ``` # Note - The order of traversal is left to right and top to bottom. - The element needs to be repeated at least once after its first appearance. If multiple elements fulfill this criterion, return the first one that appears again based on row-wise traversal.","solution":"from typing import List def first_repeated_element(matrix: List[List[int]]) -> int: Find the first element that appears more than once in the matrix when traversed in row-wise order. If no such element is found, return -1. seen = set() for row in matrix: for element in row: if element in seen: return element seen.add(element) return -1"},{"question":"You are a software engineer tasked with designing a dynamic directory structure for a file system. Each directory can contain files and other directories, and files can only exist within a directory. You need to design a structure to represent the current state of the directory system at any point. Each directory and file has a name. The system should support the following operations: 1. **Create a directory**: Given a directory path, create a new directory with the specified name. If the directory already exists, do nothing. 2. **Create a file**: Given a file path, create a new file with the specified name. If the file already exists, do nothing. 3. **List contents**: Given a directory path, return a list of names of its contents (both files and directories) in lexicographical order. 4. **Delete**: Given a path, delete the specified file or directory. If the path represents a non-empty directory, recursively delete all its contents. Here are the detailed specifications for the operations: - `create_directory(path: str, name: str) -> None` - `create_file(path: str, name: str) -> None` - `list_contents(path: str) -> List[str]` - `delete(path: str) -> None` You are given initial commands to populate your file system, followed by additional commands to be executed. Consider the following commands: ``` [ (\\"create_directory\\", \\"/home\\", \\"user\\"), (\\"create_file\\", \\"/home/user\\", \\"notes.txt\\"), (\\"create_directory\\", \\"/home/user\\", \\"documents\\"), (\\"create_file\\", \\"/home/user/documents\\", \\"resume.docx\\"), (\\"list_contents\\", \\"/home/user\\"), (\\"delete\\", \\"/home/user/notes.txt\\"), (\\"list_contents\\", \\"/home/user\\") ] ``` Initially, the file system is empty. Your task is to create a simulation for this directory system and output the results of the `list_contents` commands. In particular, implement a solution that processes an input list of commands and executes them in order. # Input - A list of tuples, each containing a command and its arguments. # Output - A series of lists, each containing the results of the `list_contents` commands in the order they are executed. Example Input ``` [ (\\"create_directory\\", \\"/home\\", \\"user\\"), (\\"create_file\\", \\"/home/user\\", \\"notes.txt\\"), (\\"create_directory\\", \\"/home/user\\", \\"documents\\"), (\\"create_file\\", \\"/home/user/documents\\", \\"resume.docx\\"), (\\"list_contents\\", \\"/home/user\\"), (\\"delete\\", \\"/home/user/notes.txt\\"), (\\"list_contents\\", \\"/home/user\\") ] ``` Example Output ``` [ [\\"documents\\", \\"notes.txt\\"], [\\"documents\\"] ] ``` Constraints - The names of directories and files consist of lowercase English letters, numbers, and dots, with a maximum length of 255 characters. - The depth of the directory structure does not exceed 100. - The number of commands does not exceed 10^4. Implement the function to process the given list of commands and return the results of all `list_contents` commands in the order they are executed.","solution":"from collections import defaultdict from typing import List, Dict, Union, Tuple class FileSystem: def __init__(self): self.fs = {} self.current = self.fs def create_directory(self, path: str, name: str) -> None: d = self._traverse(path.split(\\"/\\")) if name not in d: d[name] = {} def create_file(self, path: str, name: str) -> None: d = self._traverse(path.split(\\"/\\")) if name not in d: d[name] = None def list_contents(self, path: str) -> List[str]: d = self._traverse(path.split(\\"/\\")) return sorted([key for key in d.keys()]) def delete(self, path: str) -> None: parent, name = self._parent_and_name(path) if name in parent: del parent[name] def _traverse(self, path: List[str]) -> Dict: d = self.current for p in path: if p: if p not in d: d[p] = {} d = d[p] return d def _parent_and_name(self, path: str) -> Tuple[Dict, str]: path_list = path.split(\\"/\\") parent_path = path_list[:-1] name = path_list[-1] parent = self._traverse(parent_path) return parent, name fs = FileSystem() def process_commands(commands: List[Tuple[str, str, str]]) -> List[List[str]]: results = [] for command in commands: if command[0] == \\"create_directory\\": _, path, name = command fs.create_directory(path, name) elif command[0] == \\"create_file\\": _, path, name = command fs.create_file(path, name) elif command[0] == \\"list_contents\\": _, path = command[:2] results.append(fs.list_contents(path)) elif command[0] == \\"delete\\": _, path = command[:2] fs.delete(path) return results"},{"question":"Given a string s and an integer k, you are to transform the string such that every substring of length k contains no repeating characters. If such a transformation is not possible, return \\"Not possible\\". You can rearrange the characters of the string in any way to achieve this goal. If there are multiple valid transformations, return any one of them. Input - The first line contains the integer k (1 ≤ k ≤ 26). - The second line contains the string s (1 ≤ |s| ≤ 10^5) consisting of only lowercase English letters. Output - If it is possible to rearrange the string such that every substring of length k has no repeating characters, print the resulting string. - Otherwise, print \\"Not possible\\". Example Input: 3 aabbcc Output: abcabc Input: 4 aabb Output: Not possible Explanation: In the first example, \\"abcabc\\" is a valid transformation where each substring of length 3 (like \\"abc\\") has no repeating characters. In the second example, it is impossible to rearrange \\"aabb\\" to form a substring of length 4 without repeating characters.","solution":"from collections import Counter import heapq def rearrange_string(s: str, k: int) -> str: if k == 1: return s # Any string satisfies this condition trivially counter = Counter(s) max_heap = [(-freq, ch) for ch, freq in counter.items()] heapq.heapify(max_heap) result = [] queue = [] while max_heap: freq, ch = heapq.heappop(max_heap) result.append(ch) queue.append((ch, freq + 1)) if len(queue) >= k: prev_ch, prev_freq = queue.pop(0) if -prev_freq > 0: heapq.heappush(max_heap, (prev_freq, prev_ch)) if len(result) == len(s): return \'\'.join(result) else: return \\"Not possible\\""},{"question":"You are given an array of integers and an integer k. Your task is to determine if there is a subarray (contiguous part of the array) of size exactly k that has a sum greater than a given integer s. The first line contains an integer t (1 le t le 10^4) — the number of test cases in the input. Then t test cases follow. Each test case consists of three lines: - The first line contains an integer n (1 le n le 10^5) — the length of the array. - The second line contains the integer k (1 le k le n) and the integer s (1 le s le 10^9). - The third line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the array. Print t answers, each of which is a string \\"YES\\" if there is such a subarray, or \\"NO\\" if there is not. The letters in words can be printed in any case (upper or lowercase).","solution":"def is_subarray_of_size_k_with_sum_greater_than_s(n, k, s, arr): current_sum = sum(arr[:k]) if current_sum > s: return \\"YES\\" for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > s: return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): results = [] for t in test_cases: n, k, s, arr = t results.append(is_subarray_of_size_k_with_sum_greater_than_s(n, k, s, arr)) return results"},{"question":"Given a list of `n` integers, where each integer represents the height of a terrain at that position, you are tasked with determining the maximum amount of water that can be trapped after raining. The list of integers represents the elevation map where the width of each bar is 1 unit. The trapped water is the water that is held between the bars and does not overflow. For example, in the elevation map represented by the list [0,1,0,2,1,0,1,3,2,1,2,1], the total amount of trapped water is 6 units. You need to write a function that receives the list of integers and returns the total amount of trapped water. Function Signature: ```python def trap_water(heights: List[int]) -> int: ``` **Input:** - A single integer `n` (0 ≤ n ≤ 10^5) which is the number of integers in the list. - A list `heights` of `n` non-negative integers representing the elevation map. **Output:** - A single integer which is the amount of water that can be trapped. **Example:** ```python trap_water([0,1,0,2,1,0,1,3,2,1,2,1]) ``` Output: ``` 6 ``` **Note:** - The first sample elevation map [0,1,0,2,1,0,1,3,2,1,2,1] traps 6 units of water. - Test out with multiple elevation mappings to ensure robustness of your solution.","solution":"from typing import List def trap_water(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate total water trapped water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"In the mystical land of Codetopia, there exists a network of magical gates that connect various realms. Each gate has a mystical energy cost to use, and some gates are one-way while others are bidirectional. The council of wizards in Codetopia has decided to conduct a grand magic flow experiment to ensure stable inter-realm travel yet minimize the total mystical energy cost. You are given a list of realms and gates with each gate having an associated energy cost. A gate can either be one-way or two-way. The experiment requires that every realm should be accessible from a special realm called the Origin Realm. The goal is to ensure all realms are reachable from the Origin Realm using a set of gates such that the total energy cost is minimized. Additionally, the council of wizards wants to know the maximum possible energy flow that can be achieved from the Origin Realm to each realm with the minimal energy cost setup. The structure of input and output is as follows: # Input The first line contains two integers R (1 leq R leq 50,000), the number of realms, and G (1 leq G leq 100,000), the number of gates. The next line contains a single integer O (1 leq O leq R), representing the index of the Origin Realm. Each of the next G lines contains four integers U (1 leq U leq R), V (1 leq V leq R), E (1 leq E leq 1,000,000), and D (0 or 1). If D is 0, the gate is one-way from U to V, and if D is 1, the gate is bidirectional (connects U and V in both directions). # Output Output a single integer representing the minimal total energy cost required to make all realms reachable from the Origin Realm. In addition, output an array of length R, where the i-th element is the maximum energy flow from the Origin Realm to realm i under the minimal energy cost setup. # Example Input ``` 5 6 1 1 2 3 1 2 3 4 0 3 4 2 1 4 5 6 0 5 1 5 0 2 5 8 0 ``` Output ``` 15 10 8 6 6 5 ``` # Explanation - The minimal total energy cost to make all realms reachable from the Origin Realm is 15. - The maximum possible energy flow from the Origin Realm to each subsequent realm is listed in the resulting array, considering the minimal energy cost setup.","solution":"import heapq from collections import defaultdict import sys def minimum_cost_with_max_flow(R, G, O, gates): origin = O - 1 # Convert to 0-indexed # Create adjacency list for the graph adj = defaultdict(list) for u, v, e, d in gates: u -= 1 # Convert to 0-indexed v -= 1 # Convert to 0-indexed adj[u].append((v, e)) if d == 1: # Bidirectional gate adj[v].append((u, e)) # Prim\'s algorithm for determining the Minimum Spanning Tree (MST) total_cost = 0 visited = [False] * R min_heap = [(0, origin)] # (cost, realm) max_flows = [0] * R while min_heap: cost, realm = heapq.heappop(min_heap) if visited[realm]: continue visited[realm] = True total_cost += cost for neighbor, energy_cost in adj[realm]: if not visited[neighbor]: heapq.heappush(min_heap, (energy_cost, neighbor)) # Update max flow to neighbor max_flows[neighbor] = max(max_flows[neighbor], max_flows[realm] + energy_cost) if not all(visited): return -1, [] return total_cost, max_flows # Example usage if __name__ == \\"__main__\\": R = 5 G = 6 O = 1 gates = [ (1, 2, 3, 1), (2, 3, 4, 0), (3, 4, 2, 1), (4, 5, 6, 0), (5, 1, 5, 0), (2, 5, 8, 0) ] print(minimum_cost_with_max_flow(R, G, O, gates))"},{"question":"In a tropical city, a popular pastime involves balancing a certain number of coconuts on top of each other in a pyramid-like structure. The rule for constructing this structure is simple: each level of the pyramid must have one less coconut than the level below it. For example, if you have a structure with 4 levels, the top level will have 1 coconut, the next one down will have 2 coconuts, and so on until the bottom level, which will have 4 coconuts. Given an integer n, which represents the total number of coconuts available, determine the maximum number of levels that can be formed using all n coconuts following the rules above. If there are coconuts leftover that cannot form a complete level, they should not be used. Write a function `max_levels(n: int) -> int` that takes an integer n and returns the maximum number of levels that can be constructed. # Input - An integer n (1 ≤ n ≤ 10^9), the total number of coconuts available. # Output - A single integer representing the maximum number of levels that can be constructed. # Example ```python assert max_levels(10) == 4 assert max_levels(6) == 3 assert max_levels(20) == 5 ``` # Explanation For a total of 10 coconuts: - Level 1: 1 coconut - Level 2: 2 coconuts - Level 3: 3 coconuts - Level 4: 4 coconuts Hence, the maximum number of levels is 4.","solution":"def max_levels(n: int) -> int: Determines the maximum number of levels that can be constructed. level = 0 while n >= (level + 1): level += 1 n -= level return level"},{"question":"You are given a string S consisting of lowercase letters and numbers. Your task is to transform the string so that all numbers (digit characters) appear at the front of the string, followed by all the lowercase letter characters. The relative order of the numbers should not be changed, and the relative order of the letters should not be changed either. For example, given the input string \\"a1b2c3d4\\", the output string should be \\"1234abcd\\". Write a function `rearrange_string` that takes a string as input and returns the transformed string. # Input - A single string S with length 1 leq |S| leq 10^5, consisting of lowercase English letters and numbers. # Output - A single string with all numbers at the front and all letters at the end, maintaining their relative order. # Example ``` Input: \\"h3e4l2l1o\\" Output: \\"3421hello\\" ``` # Note - The transformed string should maintain the relative order of numbers and letters from the input string.","solution":"def rearrange_string(S): Rearranges the input string so that all numbers come before all letters. The relative order of the numbers and letters is maintained. :param S: A string containing lowercase letters and numbers. :return: A rearranged string. numbers = [] letters = [] for ch in S: if ch.isdigit(): numbers.append(ch) else: letters.append(ch) return \'\'.join(numbers + letters)"},{"question":"Steve is learning graph theory and wants to explore the shortest paths in an undirected weighted graph. The graph has cities connected by roads, and weights represent the travel time between each pair of cities. He is particularly interested in whether there is a unique shortest path between two specific cities, A and B. If the shortest path is unique, Steve wants to know the exact travel time. If there are multiple shortest paths, Steve will consider the shortest path ambiguous. The graph is represented with n vertices and m edges. The cities are numbered from 1 to n. Steve\'s goal is to determine if the shortest path from city A to city B is unique or not. Your task is to help Steve by writing a program that reads the graph data, computes the shortest paths, and determines if the shortest path between cities A and B is unique. The input format is as follows: - The first line contains four integers n (2≤n≤1000), m (1≤m≤10000), A, and B — the number of cities, the number of roads, and the indices of the start city A and the target city B, respectively. - The next m lines each contain three integers u, v, and w (1≤u,v≤n, 1≤w≤1000) representing a road between cities u and v with travel time w. Output a single integer: the shortest travel time if the shortest path from A to B is unique, otherwise output -1 to indicate ambiguity. Example: Input: 4 4 1 4 1 2 1 2 3 2 3 4 1 1 3 4 Output: 4 In this example, the shortest path is 1 -> 2 -> 3 -> 4 with a total travel time of 4, and this path is unique. Thus, the output is 4.","solution":"import heapq def dijkstra(graph, start, n): Returns the shortest distance from start to all other nodes and number of ways to reach each node. dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 ways = {i: 0 for i in range(1, n + 1)} ways[start] = 1 pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance ways[v] = ways[u] heapq.heappush(pq, (distance, v)) elif distance == dist[v]: ways[v] += ways[u] return dist, ways def shortest_path(n, m, a, b, edges): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) dist, ways = dijkstra(graph, a, n) # Check if there exists a path from a to b if dist[b] == float(\'inf\'): return -1 # If the number of ways to reach b is more than 1, then there are multiple shortest paths if ways[b] > 1: return -1 return dist[b]"},{"question":"You are given a list of **n** non-negative integers, where each integer identifies the length of a rod. You need to cut the rods into segments so that each segment has a length exactly equal to **k**. The cuts can only be made at an integer length along the rod, and once cut, each segment must be used as is. Your task is to calculate the minimum number of extra cuts required to adjust all rods to perfectly fit into segments of length **k**. The first line contains two integers, **n** (1 ≤ n ≤ 100) and **k** (1 ≤ k ≤ 100), the number of rods and the target segment length respectively. The second line contains **n** integers, each representing the length of a rod. The rods\' lengths range between 1 and 100 inclusive. Output a single integer representing the minimum number of extra cuts needed to make all rods into segments of length exactly **k**. **Examples** **Input:** ``` 3 2 5 8 7 ``` **Output:** ``` 2 ``` **Explanation:** - Rod 1 with length 5: Cut into segments of sizes 2, 2, and 1. (2 cuts required) - Rod 2 with length 8: Cut into segments of sizes 2, 2, 2, and 2. (3 cuts required) - Rod 3 with length 7: Cut into segments of sizes 2, 2, 2, and 1. (3 cuts required) In total, you need 2 + 3 + 3 = 8 cuts, but to make the segments exact multiples of **k**, only 2 additional cuts are required (cut the remaining parts of lengths 1). **Input:** ``` 2 4 8 12 ``` **Output:** ``` 0 ``` **Explanation:** - Rod 1 with length 8: Already perfectly segmented into 4 + 4. (No cuts required) - Rod 2 with length 12: Already perfectly segmented into 4 + 4 + 4. (No cuts required) Therefore, a total of 0 extra cuts are needed.","solution":"def minimum_extra_cuts(n, k, rods): extra_cuts = 0 for rod in rods: if rod % k != 0: extra_cuts += 1 return extra_cuts"},{"question":"In a game of chess, a knight is a special piece that can move in an \\"L\\" shape. This means it can move two squares in one direction and then one square in a perpendicular direction or one square in one direction and then two squares in a perpendicular direction. Given the starting position of a knight on a standard 8x8 chess board and the target position, find the minimum number of moves the knight needs to reach the target position. Note that the knight can move off the board in some intermediate steps but ultimately should land on a valid position. The input consists of a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the following t lines contains four integers: sx, sy, tx, ty (1 ≤ sx, sy, tx, ty ≤ 8), representing the starting position (sx, sy) and the target position (tx, ty) on the chessboard. Print the minimum number of moves the knight needs to reach the target position for each test case. Example: Input: 3 1 1 1 1 1 1 8 8 2 2 7 5 Output: 0 6 4 In the first sample, the knight is already at the target position, so no moves are needed. In the second sample, the knight needs 6 moves to get from (1, 1) to (8, 8). In the third sample, the knight can get from (2, 2) to (7, 5) in 4 moves.","solution":"from collections import deque def min_knight_moves(t, test_cases): def is_valid(x, y): return 1 <= x <= 8 and 1 <= y <= 8 def bfs(sx, sy, tx, ty): if (sx, sy) == (tx, ty): return 0 # All possible moves for a knight moves = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)] queue = deque([(sx, sy, 0)]) visited = set() visited.add((sx, sy)) while queue: x, y, depth = queue.popleft() for dx, dy in moves: nx, ny = x + dx, y + dy if (nx, ny) == (tx, ty): return depth + 1 if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, depth + 1)) results = [] for sx, sy, tx, ty in test_cases: results.append(bfs(sx, sy, tx, ty)) return results"},{"question":"You are given an array of integers. Find a subarray with the given sum, s. Report the start and end index of the first such subarray you find (in case of multiple solutions). If no such subarray exists, report -1. The first line of the input contains an integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line contains two integers n (1 le n le 10^5) and s (1 le s le 10^9) — the size of the array and the sum to be found. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 le a_i le 10^4) — the elements of the array. The output for each test case should be a line containing two integers representing the start and end indices of the subarray (1-based indexing) if such a subarray exists, and -1 if no such subarray exists. Example: Input: 3 5 12 1 2 3 7 5 10 15 1 2 3 4 5 6 7 8 9 10 4 8 1 4 20 3 Output: 2 4 1 5 -1 Explanation: - For the first test case, the subarray from index 2 to 4 (2-based index) sums to 12. - For the second test case, the subarray from index 1 to 5 (2-based index) sums to 15. - For the third test case, no subarray has sum 8.","solution":"def find_subarray_with_sum(t, test_cases): results = [] for test_case in test_cases: n, s = test_case[0] arr = test_case[1] current_sum = 0 start_index = 0 found = False for end_index in range(n): current_sum += arr[end_index] while current_sum > s and start_index <= end_index: current_sum -= arr[start_index] start_index += 1 if current_sum == s: results.append((start_index + 1, end_index + 1)) found = True break if not found: results.append(-1) return results # Example usage # t = 3 # test_cases = [((5, 12), [1, 2, 3, 7, 5]), ((10, 15), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), ((4, 8), [1, 4, 20, 3])] # print(find_subarray_with_sum(t, test_cases))"},{"question":"You are given a large body of water represented as an n x m grid. Each cell in the grid contains a value representing the height of the water level at that point. You are also given a starting point (sx, sy) and a target point (tx, ty) within the grid. You need to find the minimum difference in height that you have to endure while traveling from the starting point to the target point. You can only move horizontally or vertically (not diagonally) one cell at a time. The height difference is defined as the absolute difference in height between two adjacent cells you are moving from and to. Write a program that reads the size of the grid (n x m), the grid itself, the starting point (sx, sy), and the target point (tx, ty), and outputs the minimum possible height difference between the start and target points. Constraints: - 1 <= n, m <= 100 - 0 <= height of each cell <= 1000 Example: Input: 5 5 1 3 1 6 2 4 5 2 3 1 2 3 0 2 3 3 1 4 5 2 4 2 3 4 1 0 0 4 4 Output: 2 Explanation: The minimum height difference path from (0, 0) to (4, 4) passes through cells with the least height variations. One such optimal path is: (0,0) -> (1,0) -> (2,0) -> (3,0) -> (4,0) -> (4,1) -> (4,2) -> (4,3) -> (4,4), with the highest height difference being 2 between adjacent cells (1,0) and (2,0).","solution":"import heapq def min_height_difference(n, m, grid, start, target): def neighbors(x, y): for next_x, next_y in [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]: if 0 <= next_x < n and 0 <= next_y < m: yield next_x, next_y sx, sy = start tx, ty = target min_diff = [[float(\'inf\')] * m for _ in range(n)] min_diff[sx][sy] = 0 pq = [(0, sx, sy)] while pq: curr_diff, x, y = heapq.heappop(pq) if (x, y) == (tx, ty): return curr_diff for nx, ny in neighbors(x, y): next_diff = max(curr_diff, abs(grid[nx][ny] - grid[x][y])) if next_diff < min_diff[nx][ny]: min_diff[nx][ny] = next_diff heapq.heappush(pq, (next_diff, nx, ny)) return min_diff[tx][ty] # Example usage n, m = 5, 5 grid = [ [1, 3, 1, 6, 2], [4, 5, 2, 3, 1], [2, 3, 0, 2, 3], [3, 1, 4, 5, 2], [4, 2, 3, 4, 1] ] start = (0, 0) target = (4, 4) print(min_height_difference(n, m, grid, start, target)) # Output: 2"},{"question":"You are given an array of integers and a target sum. Your task is to determine if there are four elements in the array that add up to the target sum. Input: - An integer n (1 ≤ n ≤ 200) — the number of elements in the array. - An array of n integers (each element between -1000 and 1000). - An integer target (between -4000 and 4000). Output: - Print \\"Yes\\" if there are four elements in the array that add up to the target sum. - Print \\"No\\" otherwise. Example: Input: 6 1 0 -1 0 -2 2 0 Output: Yes Example: Input: 5 1 2 3 4 5 20 Output: No","solution":"def four_sum_exists(n, arr, target): Determine if there are four elements in the array adding up to the target sum. :param n: Number of elements in the array :param arr: List of integers :param target: Target sum :return: \\"Yes\\" if there are four elements that sum to the target, otherwise \\"No\\" arr.sort() for i in range(n - 3): for j in range(i + 1, n - 2): left = j + 1 right = n - 1 while left < right: total = arr[i] + arr[j] + arr[left] + arr[right] if total == target: return \\"Yes\\" elif total < target: left += 1 else: right -= 1 return \\"No\\""},{"question":"You are given a sequence of n integers and an integer k. Your task is to determine the length of the shortest contiguous subarray such that the sum of its elements is at least k. If there is no such subarray, return -1. The first line of input contains two space-separated integers n and k (1 ≤ k ≤ 10^9). The second line contains n space-separated integers representing the sequence (1 ≤ each integer in the sequence ≤ 1000). Output the length of the shortest contiguous subarray with a sum of at least k. If no such subarray exists, output -1. For example, Input: 10 15 1 2 3 4 5 6 7 8 9 10 Output: 2 In the sample testcase, one of the shortest subarrays with a sum at least 15 is [7, 8].","solution":"def shortest_subarray_with_sum_at_least_k(arr, k): Returns the length of the shortest contiguous subarray that has a sum of at least k. If no such subarray exists, returns -1. n = len(arr) shortest = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += arr[right] while current_sum >= k: shortest = min(shortest, right - left + 1) current_sum -= arr[left] left += 1 return -1 if shortest == float(\'inf\') else shortest"},{"question":"You are given an array of integers. Your task is to find the length of the longest subarray where the difference between any two elements is at most some given integer k. The input consists of multiple test cases. The first line of the input contains a single integer t (1 leq t leq 100), the number of test cases. The next line contains two integers n and k (1 leq n leq 10^5, 0 leq k leq 10^9), where n is the length of the array and k is the maximum allowed difference. The next line contains n space-separated integers representing the elements of the array. It is guaranteed that the sum of n for all test cases does not exceed 10^5. For each test case, print a single integer representing the length of the longest subarray where the difference between any two elements is at most k. # Example Input: ``` 2 5 3 1 3 6 7 9 4 1 1 2 2 1 ``` Output: ``` 3 4 ``` # Explanation In the first test case, the longest subarray with elements differing by at most 3 is [3, 6, 7], so the length is 3. In the second test case, the longest subarray with elements differing by at most 1 is [1, 2, 2, 1], so the length is 4.","solution":"def longest_subarray_length(n, k, arr): arr.sort() left = 0 max_length = 0 for right in range(n): while arr[right] - arr[left] > k: left += 1 max_length = max(max_length, right - left + 1) return max_length def solve(test_cases): results = [] for n, k, arr in test_cases: results.append(longest_subarray_length(n, k, arr)) return results"},{"question":"Vera the Mathematician has found a set of unique integer pairs. Each pair ((x_i, y_i)) consists of distinct integers (x_i) and (y_i) such that for a given positive integer (N), the following conditions hold: 1. (1 leq x_i, y_i leq N) 2. (x_i neq y_i) 3. Each pair ((x_i, y_i)) is unique in terms of set membership, meaning ((x_1, y_1)) and ((y_1, x_1)) are considered the same and should appear only once. Vera wants to create such pairs and enumerate all possible valid pairs ((x_i, y_i)) for a given (N). Given the integer (N), find all valid unique integer pairs ((x_i, y_i)). # Input - The first line contains one integer (N) ((2 leq N leq 1000)), the upper limit for the integers in the pairs. # Output - Output all valid pairs ((x_i, y_i)). Each pair should be printed on a new line, separated by a space. - Each pair ((x_i, y_i)) should be printed where (x_i < y_i), and the pairs should be ordered in ascending order first by (x_i) and then by (y_i). # Example Input ``` 4 ``` Output ``` 1 2 1 3 1 4 2 3 2 4 3 4 ``` # Note In the example, for (N = 4), the possible pairs satisfying the conditions are listed in lexicographically ordered ((x_i, y_i)) form.","solution":"def find_unique_pairs(N): Given a positive integer N, returns a list of all valid unique pairs (x_i, y_i) such that: 1. 1 <= x_i, y_i <= N 2. x_i != y_i 3. (x_i, y_i) and (y_i, x_i) are considered the same and only should appear once. Each pair (x_i, y_i) is returned where x_i < y_i. pairs = [] for x in range(1, N+1): for y in range(x+1, N+1): pairs.append((x, y)) return pairs"},{"question":"You are provided with a string consisting of lowercase English letters. Write a function to calculate the frequency of each character in the string and return the character(s) that appear the most. The input is a single line containing the string s (1 ≤ |s| ≤ 100), where |s| denotes the length of the string. Output one of the characters that appear most frequently in the string. If multiple characters have the same highest frequency, return the one that appears first in the string.","solution":"def most_frequent_character(s): Returns one of the characters that appear most frequently in the string. If multiple characters have the same highest frequency, returns the one that appears first in the string. from collections import Counter # Count the frequency of each character in the string frequency = Counter(s) # Find the maximum frequency max_freq = max(frequency.values()) # Find one of the characters with the highest frequency for char in s: if frequency[char] == max_freq: return char"},{"question":"You are given an array of integers representing the number of pages in several books arranged in a linear order on a bookshelf. You want to allocate these books to students such that each student gets at least one book, and the maximum number of pages allocated to a student is minimized. You need to find the minimum possible value of the maximum number of pages allocated to a student when the books are allocated. The input data contains an integer `k` (1 ≤ k ≤ 1000) representing the number of students and an array of integers `pages` of length `n` (1 ≤ n ≤ 1000, and 1 ≤ pages[i] ≤ 10000 for all valid `i`) representing the number of pages in each book. The input is given in two lines. The first line contains `k` and `n` separated by a space, and the second line contains `n` integers separated by spaces. Your task is to write a function that returns the minimum possible value of the maximum number of pages allocated to any student. **Example:** - Input: ``` 2 4 12 34 67 90 ``` - Output: ``` 113 ``` In the above example, the optimal way to allocate the books is: - Student 1: Books with pages {12, 34, 67} - Student 2: Books with pages {90} So, the maximum number of pages allocated to a student is 113, which is the minimum possible in this case. Write a function to determine the minimum possible value.","solution":"def is_valid_distribution(pages, k, max_pages): students_required = 1 current_pages_sum = 0 for page in pages: if current_pages_sum + page > max_pages: students_required += 1 current_pages_sum = page if students_required > k: return False else: current_pages_sum += page return True def find_min_max_pages(k, pages): low, high = max(pages), sum(pages) result = high while low <= high: mid = (low + high) // 2 if is_valid_distribution(pages, k, mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"Design a function that takes in a list of integers and categorizes them into three groups: \\"small\\", \\"medium\\", and \\"large\\". The classification is based on predefined thresholds. The function should return a dictionary with three keys: \\"small\\", \\"medium\\", and \\"large\\", each holding a list of integers that fall into each category. The thresholds are defined as: - \\"small\\" for integers less than 10, - \\"medium\\" for integers greater than or equal to 10 and less than or equal to 20, - \\"large\\" for integers greater than 20. You are to implement this in Python. Your function should be named `categorize_numbers` and have the following signature: ```python def categorize_numbers(numbers: List[int]) -> Dict[str, List[int]]: pass ``` # Example ```python categorize_numbers([3, 12, 25, 7, 19, 30]) ``` Expected Output: ```python { \\"small\\": [3, 7], \\"medium\\": [12, 19], \\"large\\": [25, 30] } ```","solution":"from typing import List, Dict def categorize_numbers(numbers: List[int]) -> Dict[str, List[int]]: Categorizes a list of integers into three groups: small, medium, and large. - \\"small\\" for integers less than 10, - \\"medium\\" for integers from 10 to 20 inclusive, - \\"large\\" for integers greater than 20. :param numbers: List of integers to categorize. :return: A dictionary with keys \'small\', \'medium\', \'large\' where each key has a list of integers that fall into each category. categories = {\\"small\\": [], \\"medium\\": [], \\"large\\": []} for number in numbers: if number < 10: categories[\\"small\\"].append(number) elif 10 <= number <= 20: categories[\\"medium\\"].append(number) else: categories[\\"large\\"].append(number) return categories"},{"question":"Alex is a fitness enthusiast who tracks his workout progress with a list of exercises. Each exercise falls under one of four categories: Cardio, Strength, Flexibility, or Balance, and is represented as a string: \\"Cardio\\", \\"Strength\\", \\"Flexibility\\", or \\"Balance\\". Alex has a week-long workout routine, where he logs each day\'s exercises in a list. The routine for each day is provided as a list of strings, where each string is the category of an exercise done that day. He wants to analyze his workout routine over the week to determine the most frequent exercise category each day. Write a function `most_frequent_category` that takes a list of 7 lists of strings, representing Alex\'s workout routine for a week (one list for each day, starting from Monday to Sunday) and returns a list of 7 strings corresponding to the most frequent exercise category for each day. If there is a tie for the most frequent category on a particular day, return the lexicographically smallest category among the tied ones. # Input - A list of 7 lists, where each inner list consists of strings and represents the exercises done by Alex for that particular day of the week. Each exercise category string is guaranteed to be one of \\"Cardio\\", \\"Strength\\", \\"Flexibility\\", or \\"Balance\\". # Output - A list of 7 strings where each string is the most frequent exercise category done on that day. If there\'s a tie, return the lexicographically smallest category. # Function Signature ```python def most_frequent_category(week: List[List[str]]) -> List[str]: ``` # Example ```python week = [ [\\"Cardio\\", \\"Strength\\", \\"Cardio\\"], # Monday [\\"Strength\\", \\"Strength\\", \\"Balance\\"], # Tuesday [\\"Flexibility\\", \\"Flexibility\\"], # Wednesday [\\"Balance\\", \\"Cardio\\", \\"Balance\\"], # Thursday [\\"Cardio\\", \\"Cardio\\", \\"Strength\\"], # Friday [\\"Balance\\", \\"Flexibility\\", \\"Balance\\"], # Saturday [\\"Strength\\", \\"Strength\\", \\"Strength\\"] # Sunday ] print(most_frequent_category(week)) # Output: [\\"Cardio\\", \\"Strength\\", \\"Flexibility\\", \\"Balance\\", \\"Cardio\\", \\"Balance\\", \\"Strength\\"] ``` # Constraints - The length of the outer list (representing the days of the week) is exactly 7. - Each inner list may contain between 0 and 100 exercise category strings. - Each exercise category string is one of the following: \\"Cardio\\", \\"Strength\\", \\"Flexibility\\", \\"Balance\\".","solution":"from typing import List from collections import Counter def most_frequent_category(week: List[List[str]]) -> List[str]: result = [] for day in week: if not day: # If the list for a particular day is empty result.append(\'\') else: counter = Counter(day) most_common_count = max(counter.values()) most_common_categories = sorted([cat for cat, count in counter.items() if count == most_common_count]) result.append(most_common_categories[0]) return result"},{"question":"You are given a string composed of lowercase English letters. Find the length of the longest subsequence in the string such that the characters in this subsequence are in non-decreasing order. A subsequence is a sequence derived by deleting some or no elements of the string without changing the order of the remaining elements. # Input The first line contains one integer T (1 leq T leq 100), the number of test cases. Each of the next T lines contains a single string s (1 leq |s| leq 10^5), the string for which you need to find the length of the longest non-decreasing subsequence. # Output For each test case, output a single integer - the length of the longest subsequence that is in non-decreasing order. # Example Input: ``` 2 abcabc cba ``` Output: ``` 6 1 ``` # Note In the first test case, the entire string \'abcabc\' is already in non-decreasing order, so the answer is 6. In the second test case, the longest subsequence in non-decreasing order is either \'a\', \'b\', or \'c\', each of which has a length of 1.","solution":"def longest_non_decreasing_subsequence_length(s): Returns the length of the longest non-decreasing subsequence in the string s. from collections import Counter freq = Counter(s) return max(freq.values()) def process_test_cases(T, test_cases): Processes multiple test cases and returns a list of results. results = [] for case in test_cases: results.append(longest_non_decreasing_subsequence_length(case)) return results"},{"question":"In a small town, there is a single lane bridge that allows traffic to pass in only one direction at a time. Vehicles arrive at the bridge from both sides, and the direction of traffic alternates so that vehicles from one side can use the bridge, then vehicles from the other side, and so on. If there are no vehicles waiting on one side, vehicles from the other side can continue to use the bridge until vehicles appear on the empty side. You are given two lists, A and B. List A contains the arrival times of vehicles from one side of the bridge, and list B contains the arrival times of vehicles from the other side of the bridge. The bridge can be used by one vehicle at a time, and each vehicle takes exactly 1 unit of time to cross the bridge. The objective is to determine the time at which each vehicle crosses the bridge. Vehicles must cross the bridge in the order they arrive, and once a vehicle starts crossing, it must finish before another vehicle starts. The arrival time lists and their lengths are given as input. Output a single list of tuples where each tuple contains three elements: the vehicle ID (1-based index, with IDs from list A starting with \\"A\\" and from list B starting with \\"B\\"), the arrival time, and the crossing time. The first line contains two integers M and N (0 ≤ M, N ≤ 105) — the number of vehicles from each side. The second line contains M integers A1, A2, ..., AM (0 ≤ Ai ≤ 109), where Ai is the arrival time of the i-th vehicle from side A. The third line contains N integers B1, B2, ..., BN (0 ≤ Bi ≤ 109), where Bi is the arrival time of the i-th vehicle from side B. Output a list of tuples representing the crossing times of all vehicles. In the first sample, vehicles arrive from side A at times [1, 4] and from side B at times [2, 5]. The crossing would occur in the following order: vehicle A1 at time 1, then vehicle B1 at time 2, vehicle A2 at time 4, and finally vehicle B2 at time 5. Thus, the output would be: [(A1, 1, 1), (B1, 2, 2), (A2, 4, 4), (B2, 5, 5)] In the second sample, vehicles from side A have arrival times [2, 5], and vehicles from side B have arrival times [1, 6]. The crossing times would be: [(B1, 1, 1), (A1, 2, 2), (A2, 5, 5), (B2, 6, 6)]","solution":"def bridge_crossing(M, N, A, B): Determines the crossing times of vehicles on a single lane bridge. Parameters: - M: Number of vehicles from side A. - N: Number of vehicles from side B. - A: List of arrival times from side A. - B: List of arrival times from side B. Returns: - A list of tuples indicating the vehicle ID, arrival time, and crossing time. result = [] i, j = 0, 0 current_time = 0 last_crossed_side = None while i < M or j < N: if i < M and (j >= N or A[i] <= B[j]): if last_crossed_side == \'A\' or last_crossed_side is None: current_time = max(current_time, A[i]) else: current_time = max(current_time + 1, A[i]) last_crossed_side = \'A\' result.append((f\\"A{i+1}\\", A[i], current_time)) i += 1 else: if last_crossed_side == \'B\' or last_crossed_side is None: current_time = max(current_time, B[j]) else: current_time = max(current_time + 1, B[j]) last_crossed_side = \'B\' result.append((f\\"B{j+1}\\", B[j], current_time)) j += 1 return result"},{"question":"You are given a series of log entries from a backup system. Each entry contains a timestamp followed by a status message. The goal is to parse the log and determine how much time the backup system was in an \\"inactive\\" state. The log format is as follows: ``` timestamp: message ``` - `timestamp` is in the format `YYYY-MM-DD HH:MM:SS`. - `message` is either \\"active\\" or \\"inactive\\". You need to write a program that reads the log entries from standard input and calculates the total time, in seconds, that the system was \\"inactive\\". Assume the log entries are sorted in chronological order and cover the entirety of the period during which you want to measure inactivity. Your program should continue reading until EOF. # Input - Each line contains one log entry in the format described above. You can assume no two log entries will have the same timestamp. # Output - A single integer representing the total number of seconds the system was \\"inactive\\". # Example Input: ``` 2023-01-01 00:00:00: inactive 2023-01-01 00:10:00: active 2023-01-01 01:00:00: inactive 2023-01-01 01:30:00: active ``` Output: ``` 2400 ``` In this example, the system was inactive from \\"2023-01-01 00:00:00\\" to \\"2023-01-01 00:10:00\\" (600 seconds), and from \\"2023-01-01 01:00:00\\" to \\"2023-01-01 01:30:00\\" (1800 seconds). The total inactive time is 2400 seconds.","solution":"from datetime import datetime def calculate_inactive_time(log_entries): inactive_time = 0 previous_timestamp = None inactive_start = None for entry in log_entries.splitlines(): timestamp_str, status = entry.split(\': \') timestamp = datetime.strptime(timestamp_str, \'%Y-%m-%d %H:%M:%S\') if status == \\"inactive\\": inactive_start = timestamp elif status == \\"active\\" and inactive_start is not None: inactive_time += (timestamp - inactive_start).total_seconds() inactive_start = None return int(inactive_time)"},{"question":"You are given a list of tasks to complete, where each task has a specific start time and end time. Your goal is to find the maximum number of non-overlapping tasks that can be completed. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of tasks. Each of the next n lines contains two integers: the start time and end time of a task (0 ≤ start time < end time ≤ 10000). Print a single integer representing the maximum number of non-overlapping tasks that can be completed. Example: ``` Input: 5 1 3 2 5 4 6 6 7 5 8 Output: 3 ```","solution":"def max_non_overlapping_tasks(tasks): Finds the maximum number of non-overlapping tasks that can be completed. Parameters: tasks (list of tuples): A list of tuples where each tuple contains the start and end time of a task. Returns: int: The maximum number of non-overlapping tasks that can be completed. # Sort the tasks based on their end time tasks.sort(key=lambda x: x[1]) # Variable to keep track of the end time of the last selected task last_end_time = -1 # Counter for the maximum number of non-overlapping tasks max_tasks = 0 for start, end in tasks: if start >= last_end_time: # If the start time of the current task is greater or equal to the # end time of the last selected task then select this task last_end_time = end max_tasks += 1 return max_tasks"},{"question":"You need to implement a password security checker. The program should verify that the given password meets the following criteria: 1. The length of the password should be at least 8 characters. 2. The password must contain at least one lowercase letter. 3. The password must contain at least one uppercase letter. 4. The password must contain at least one digit. 5. The password must contain at least one special character from the set {`!@#%^&*()-_+=<>?`}. Write a function `is_secure_password(password: str) -> bool` that takes a string `password` as input and returns `True` if the password meets all the criteria, otherwise returns `False`. **Function signature:** ```python def is_secure_password(password: str) -> bool: ``` **Input:** - A single string `password`, where `1 ≤ len(password) ≤ 1000`. **Output:** - A boolean value, `True` if the password is secure, otherwise `False`. **Example:** ```python assert is_secure_password(\\"Password123!\\") == True assert is_secure_password(\\"password123\\") == False assert is_secure_password(\\"PASSWORD\\") == False assert is_secure_password(\\"Pass123\\") == False assert is_secure_password(\\"Pass@01\\") == True ```","solution":"import re def is_secure_password(password: str) -> bool: Checks if the given password meets the specified security criteria. if len(password) < 8: return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'d\', password): return False if not re.search(r\'[!@#%^&*()-_=+<>?]\', password): return False return True"},{"question":"A scientist has m test tubes, each containing a different chemical compound identified by a unique integer from 1 to m. To carry out a specific experiment, the scientist needs to find certain pairs of chemical compounds that, when mixed, result in the creation of a special compound. Given the knowledge that only some specific pairs (a, b) (where a < b) form the special compound, your task is to help the scientist identify these pairs. You can perform the following operation: - Mix two chemicals a and b to check if they form the special compound. This operation will give you a result, which is `1` if the pair forms the special compound, and `0` otherwise. Your task is to write a program that will identify all pairs that result in the special compound. However, the total number of mixing operations you can perform is limited to 20. **Input:** The first line contains an integer m (2 ≤ m ≤ 100) – the number of chemical compounds. The second line contains an integer p (1 ≤ p ≤ 20) – the number of pairs of compounds that form the special compound. Each of the next p lines contains two integers ai, bi (1 ≤ ai < bi ≤ m) – indicating that when you mix the chemical compounds ai and bi, they form the special compound. **Output:** You need to output \\"!\\" followed by all pairs (a, b) in increasing order of a. Each pair should be output in a new line. **Interaction:** To perform a mix operation, print \\"?\\" followed by the integers ai and bi (1 ≤ ai < bi ≤ m). The judge will then provide an integer 1 if the pair forms the special compound, or 0 otherwise. **Example:** _Input:_ ``` 6 3 1 2 2 3 4 6 ``` _Interaction Example:_ ``` ? 1 2 1 ? 1 3 0 ? 2 3 1 ? 4 6 1 ! 1 2 2 3 4 6 ``` The program should make at most 20 such queries to discover all the pairs that form the special compound. Ensure you handle the output and input properly and terminate your program after all pairs are identified.","solution":"def find_special_compound_pairs(m, p, pairs): Identifies all pairs that result in the special compound. Parameters: m (int): Number of chemical compounds. p (int): Number of pairs that form the special compound. pairs (list of tuples): Each tuple (a, b) is a pair of compounds that form the special compound. Returns: list of tuples: All pairs (a, b) that form the special compound in increasing order of a. result_pairs = [] def query(a, b): This function mimics the query to the external system checking if the pair (a, b) forms the special compound. Instead of querying an external system, it refers to the pre-defined pairs list. Parameters: a (int): The first chemical compound. b (int): The second chemical compound. Returns: int: 1 if the mix of a and b forms the special compound, otherwise 0. return 1 if (a, b) in pairs else 0 for i in range(1, m + 1): for j in range(i + 1, m + 1): response = query(i, j) if response == 1: result_pairs.append((i, j)) return result_pairs"},{"question":"In a distant kingdom, there is a renowned magical library that holds an immense collection of spell books. Each spell book has a special energy value associated with it, and wizards who visit the library wish to borrow spell books to finish their studies. The library has a total of n shelves, where each shelf i initially contains b_i spell books, each with an energy value of e_i. There are m wizards who visit the library to borrow spell books. The j-th wizard comes in and requests k_j books from the t_j-th shelf. Initially, shelves have b_i spell books for all i. After each wizard borrows the books, the count of books on the shelves is updated. If a wizard requests more spell books than available on the specified shelf, they are given all the remaining books from that shelf, and then they leave. Determine the total energy value of the spell books each wizard collects based on their request. The first line contains two integers n and m (1 leq n, m leq 10^4), representing the number of shelves and the number of wizards, respectively. The second line contains n positive integers b_1, b_2, ldots, b_n (1 leq b_i leq 10^5), where b_i denotes the initial count of spell books on shelf i. The third line contains n positive integers e_1, e_2, ldots, e_n (1 leq e_i leq 10^4), where e_i denotes the energy value of one spell book on shelf i. The following m lines describe the requests of the m wizards respectively. The j-th line contains two positive integers t_j and k_j (1 leq t_j leq n, 1 leq k_j leq 10^5), representing the shelf number and the number of spell books the j-th wizard requests, respectively. Print m lines. In the j-th line, print the total energy value of the spell books that the j-th wizard collects. # Sample Input ``` 4 3 10 20 5 15 100 200 300 400 1 5 2 25 4 10 ``` # Sample Output ``` 500 4000 4000 ```","solution":"def wizard_library(n, m, b, e, requests): result = [] for t_j, k_j in requests: shelf_index = t_j - 1 available_books = b[shelf_index] if k_j >= available_books: total_energy = available_books * e[shelf_index] b[shelf_index] = 0 else: total_energy = k_j * e[shelf_index] b[shelf_index] -= k_j result.append(total_energy) return result"},{"question":"You are given a string s consisting of lowercase alphabetic characters. A substring of s is any continuous sequence of characters of s. A substring is called \\"good\\" if all the characters are unique. Write a program to find the length of the longest \\"good\\" substring of s. Input: - The first line contains an integer t (1 le t le 100) — the number of test cases. - The next t lines each contain a string s (1 le |s| le 10^5). Output: - For each test case, print one integer — the length of the longest \\"good\\" substring. Example: **Input:** ``` 3 abcabcbb bbbbb pwwkew ``` **Output:** ``` 3 1 3 ``` Explanation: In the first case, the answer is \\"abc\\" with the length of 3. In the second case, the answer is \\"b\\" with the length of 1. In the third case, the answer is \\"wke\\" with the length of 3.","solution":"def length_of_longest_good_substring(s): Returns the length of the longest substring with all unique characters. n = len(s) longest = 0 start = 0 seen = {} for end in range(n): if s[end] in seen: start = max(start, seen[s[end]] + 1) seen[s[end]] = end longest = max(longest, end - start + 1) return longest def find_longest_good_substring_lengths(t, test_cases): Handles multiple test cases and returns a list of results. results = [] for s in test_cases: results.append(length_of_longest_good_substring(s)) return results"},{"question":"**Problem: Alien\'s Music Collection** You are an astronaut on a mission to explore a distant planet. Upon landing, you discover that the planet\'s surface is dotted with ancient alien music discs. Each disc contains a unique piece of music and can be collected in a limited amount of time. The planet can be represented as a 2D grid, with each cell containing either a music disc or being empty. You start your exploration from a given cell and can move to any of the four adjacent cells (up, down, left, right) in one unit of time. However, you can only move within the boundary of the grid. Given the grid dimensions, the initial starting position, the total time available for the exploration, and the positions of the music discs, determine the maximum number of distinct music discs you can collect within the given time. # Input - The first line contains three integers, `n`, `m`, and `k` (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(1000, n*m)), representing the number of rows, number of columns in the grid, and the number of music discs on the planet respectively. - The second line contains two integers, `x_s` and `y_s` (0 ≤ x_s < n, 0 ≤ y_s < m), the starting coordinates. - The third line contains one integer, `T` (0 ≤ T ≤ 1000000), representing the maximum amount of time available. - The next `k` lines each contain two integers, `x_i` and `y_i` (0 ≤ x_i < n, 0 ≤ y_i < m), representing the coordinates of each music disc. # Output - Output a single integer, the maximum number of distinct music discs you can collect within the available time. # Example Input ``` 5 5 3 2 2 10 1 1 3 3 4 4 ``` Output ``` 3 ``` Explanation You can start at (2, 2) and collect all three discs at (1, 1), (3, 3), and (4, 4) within the given 10 time units. The path might look like this: (2, 2) -> (1, 1) [2 units] -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) [4 units] -> (4, 3) -> (4, 4) [4 units].","solution":"def max_music_discs(n, m, k, x_s, y_s, T, discs): from collections import deque # Helper function to check if a position is within the grid. def in_grid(x, y): return 0 <= x < n and 0 <= y < m # Directions for moving up, down, left, right. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Perform BFS to find all reachable discs within time T. queue = deque([(x_s, y_s, 0)]) # (x, y, time) visited = set((x_s, y_s)) collected_discs = 0 disc_positions = set(discs) while queue: x, y, time = queue.popleft() if time > T: continue if (x, y) in disc_positions: collected_discs += 1 disc_positions.remove((x, y)) # Collect the disc and remove it from set for dx, dy in directions: nx, ny = x + dx, y + dy if in_grid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, time + 1)) return collected_discs"},{"question":"You are given an array of distinct integers and a list of queries. Each query consists of an integer `k`, and the task is to find the number of elements in the array that are greater than `k`. For example, if the array is [5, 1, 10, 6, 2] and the query is `3`, then the answer would be `3` because there are three elements (5, 10, and 6) that are greater than `3`. The first line of input contains two integers, `n` (1 ≤ n ≤ 100,000) - the number of elements in the array, and `q` (1 ≤ q ≤ 100,000) - the number of queries. The next line contains `n` distinct integers representing the elements of the array. Each of the next `q` lines contains a single integer `k`. Print the answer for each query in a new line. **Input Format:** ``` n q array[0] array[1] .... array[n-1] q1 q2 ... qq ``` **Output Format:** ``` answer for query 1 answer for query 2 ... answer for query q ``` **Example Input:** ``` 5 3 5 1 10 6 2 3 7 1 ``` **Example Output:** ``` 3 1 4 ``` **Explanation:** - For the first query `3`, there are three elements greater than `3`: 5, 10, and 6. - For the second query `7`, there is one element greater than `7`: 10. - For the third query `1`, there are four elements greater than `1`: 5, 10, 6, and 2.","solution":"def count_greater_elements(arr, queries): For each query in queries, determine the number of elements in array arr that are greater than query. Parameters: arr (list of int): The list of distinct integers. queries (list of int): The list of queries. Returns: list of int: A list of results where each result corresponds to the number of elements in arr greater than each query. arr.sort() results = [] n = len(arr) for k in queries: # Binary Search to find the first element greater than k left, right = 0, n while left < right: mid = (left + right) // 2 if arr[mid] > k: right = mid else: left = mid + 1 results.append(n - left) return results"},{"question":"You are given an undirected graph. Each node of the graph represents a city and each edge between two nodes represents a direct road connecting two cities. The cities are currently in a state of civil unrest, and your task is to assess the stability of the network by determining the number of connected components in the graph. A connected component is a maximal set of nodes such that there is a path between any two nodes in the set. Your goal is to find out how many such connected components exist in the given graph. # Input: - The first line contains two integers N and M (1 ≤ N, M ≤ 100000), where N is the number of cities (nodes) and M is the number of direct roads (edges). - The next M lines each contain two integers u and v (1 ≤ u, v ≤ N) indicating that there is a direct road between city u and city v. # Output: - Output a single integer representing the number of connected components in the graph. # Example Input: ``` 6 3 1 2 2 3 4 5 ``` # Example Output: ``` 3 ``` # Explanation: In this example, the cities and roads form the following graph: - Cities 1, 2, and 3 are connected to each other, forming one connected component. - Cities 4 and 5 are connected to each other, forming another connected component. - City 6 is isolated, forming the third connected component. Note: The graph may contain self-loops and multiple edges between the same pair of nodes, which you should handle appropriately while computing the connected components.","solution":"def count_connected_components(N, M, edges): from collections import defaultdict, deque def bfs(node, visited, graph): queue = deque([node]) while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) components = 0 for node in range(1, N + 1): if not visited[node]: components += 1 visited[node] = True bfs(node, visited, graph) return components # Example usage: # N, M = 6, 3 # edges = [(1, 2), (2, 3), (4, 5)] # print(count_connected_components(N, M, edges)) # Output should be 3"},{"question":"You are given an array of integers and an integer k. Your task is to find the number of pairs of indices (i, j) such that i < j and the sum of elements at these indices is divisible by k. Constraints: - The array size n (1 le n le 10^3) - Each element in array a (1 le a_i le 10^9) - The integer k (1 le k le 100) Input: - The first line of input contains two integers n and k. - The second line contains n integers representing the array a. Output: - Output a single integer — the number of pairs (i, j) such that the sum a_i + a_j is divisible by k. Example: ``` Input: 5 3 1 2 3 4 5 Output: 4 ``` Explanation: The pairs satisfying the condition are (1,2), (1,5), (2,4), and (3,6).","solution":"def count_pairs_divisible_by_k(n, k, a): Returns the number of pairs (i, j) such that a[i] + a[j] is divisible by k. count = 0 for i in range(n): for j in range(i + 1, n): if (a[i] + a[j]) % k == 0: count += 1 return count"},{"question":"You are given an undirected graph with n nodes and m edges. The graph is represented as an adjacency list where each node has a list of its directly connected nodes. Each node is visited exactly once in a Depth-First Search (DFS). The task is to find the number of connected components in the graph. # Input - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) - the number of nodes and the number of edges. - The next m lines contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) describing an undirected edge between nodes u and v. # Output - Print a single integer representing the number of connected components in the given graph. # Example Input ``` 6 5 1 2 2 3 4 5 5 6 4 6 ``` Output ``` 2 ``` In this example, nodes 1, 2, and 3 form one connected component, and nodes 4, 5, and 6 form another connected component. Thus, the number of connected components is 2. # Note A connected component is defined as a maximal set of nodes such that there is a path between any two nodes in this set. If the graph is completely disconnected, each node is considered its own connected component.","solution":"def number_of_connected_components(n, m, edges): def dfs(node, visited, graph): stack = [node] while stack: cur = stack.pop() for neighbor in graph[cur]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() components_count = 0 for node in range(1, n + 1): if node not in visited: visited.add(node) dfs(node, visited, graph) components_count += 1 return components_count"},{"question":"A garden has n flowers arranged in a straight line. Each flower has a specific height, and its height is given by an array a of n integers, where the i-th flower has height ai. In the garden, bees tend to be most attracted to flowers within a specific interval. For any interval of flowers (a contiguous subarray), the attractiveness of the interval is defined as the sum of the heights of the flowers within that interval. For each possible starting flower, determine the interval that gives the maximum attractiveness and provide the total attractiveness of that interval. In case there are multiple intervals with the same maximum attractiveness, choose the interval that starts with the leftmost flower. The first line of input contains a single integer n (1 ≤ n ≤ 3000) — the number of flowers. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) where ai is the height of the i-th flower. Output n integers, where the i-th integer represents the maximum attractiveness obtainable from any interval starting with the i-th flower. For example, for the input: 5 1 2 3 4 5 The output should be: 15 14 12 9 5 Explanation: - For the first flower, the interval [1, 2, 3, 4, 5] gives an attractiveness of 15. - For the second flower, the interval [2, 3, 4, 5] gives an attractiveness of 14. - For the third flower, the interval [3, 4, 5] gives an attractiveness of 12. - For the fourth flower, the interval [4, 5] gives an attractiveness of 9. - For the fifth flower, the interval [5] gives an attractiveness of 5.","solution":"def max_attractiveness_intervals(n, a): This function takes an integer n and a list a of n integers representing the heights of flowers, and returns a list of n integers where the i-th integer represents the maximum attractiveness obtainable from any interval starting from the i-th flower. result = [] for i in range(n): max_sum = 0 current_sum = 0 for j in range(i, n): current_sum += a[j] if current_sum > max_sum: max_sum = current_sum result.append(max_sum) return result"},{"question":"You are given a grid with `n` rows and `m` columns. Some cells in the grid are blocked, and the rest are open. You start from the top-left corner of the grid, and you need to reach the bottom-right corner. You can only move right or down at each step. Determine the number of unique paths from the top-left corner to the bottom-right corner, avoiding the blocked cells. Input: - On the first line, you will be given two integers `n` (1 ≤ n ≤ 100) and `m` (1 ≤ m ≤ 100) representing the number of rows and columns in the grid, respectively. - The next `n` lines each contain `m` characters that describe the grid. An open cell is represented by \'.\', and a blocked cell is represented by \'#\'. Output: - Output a single integer, the number of unique paths from the top-left corner to the bottom-right corner. If there is no valid path, output 0. Example: ``` Input: 3 3 ... .#. ... Output: 2 ``` Explanation: There are two paths from (0, 0) to (2, 2): 1. Right → Right → Down → Down 2. Down → Down → Right → Right","solution":"def unique_paths(n, m, grid): Returns the number of unique paths from the top-left to the bottom-right corner of an n x m grid, avoiding blocked cells. Parameters: n (int): number of rows m (int): number of columns grid (list of str): representation of the grid Returns: int: number of unique paths if not grid or grid[0][0] == \'#\' or grid[-1][-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"You are organizing a workshop and have m participants, each with a distinct skill level. The skill levels are represented as integers in a list. You want to form teams for the workshop such that the difference in skill levels within each team is minimized. Each team must consist of exactly three participants. Naturally, you also want to form the maximum possible number of teams. Given the skill levels of the participants, determine the maximum number of teams that can be formed and the minimum possible maximum difference in skill levels within each team. Function Signature: `def form_teams(skill_levels: List[int]) -> Tuple[int, int]:` **Input:** - An integer m (3 ≤ m ≤ 300) representing the number of participants. - A list of m distinct integers, `skill_levels`, where each integer represents the skill level of a participant (1 ≤ skill_levels[i] ≤ 1000). **Output:** - Return a tuple containing two integers: - The maximum number of teams that can be formed. - The minimum possible maximum difference in skill levels within each team. **Example:** Input: ```python m = 7 skill_levels = [4, 8, 1, 9, 7, 5, 6] ``` Output: ```python (2, 1) ``` **Explanation:** - The team compositions can be [4, 5, 6] and [7, 8, 9] with the remaining participant 1 left over. - Each team has a maximum skill difference of 2 and 2 respectively, leading to the minimum possible maximum difference of 1. Thus, the function returns (2, 1).","solution":"from typing import List, Tuple def form_teams(skill_levels: List[int]) -> Tuple[int, int]: Forms the maximum number of teams of exactly 3 participants each with the minimum possible maximum difference in skill levels within each team. skill_levels.sort() n = len(skill_levels) # Initialize the max number of teams max_teams = n // 3 # Initialize the minimum max difference to a large value initially min_max_difference = float(\'inf\') for i in range(n - 2): if len(skill_levels) - i < 3: break # Find the maximum difference in the current three participants team current_diff = skill_levels[i + 2] - skill_levels[i] # Check if this difference is smaller than the previously found differences if current_diff < min_max_difference: min_max_difference = current_diff return max_teams, min_max_difference"},{"question":"Marcus is organizing a robot race event. Each robot participates in a race on a different day. Robot races are held over k consecutive days. Marcus wants to ensure there\'s enough charging time for all the robots and minimize the maximum fatigue any robot can experience. The fatigue of a robot performing on day d_i is computed by the difference: |d_i - r_i|, where d_i is the day the robot performs, and r_i is the robot\'s assigned optimal day. You are given an integer k denoting the total number of consecutive days, and an array r of n integers where r_i is the optimal day for the i-th robot. Design an algorithm to assign each robot exactly one day to perform such that the maximum fatigue of any robot is minimized. The first line contains two integers n and k (1 le n le 100,000, 1 le k le 100,000) — the number of robots and the number of consecutive days, respectively. The second line contains n integers r_1, r_2, dots, r_n (1 le r_i le k) — the optimal days of the robots. Print the minimum possible maximum fatigue experienced by any robot. # Example Input: ``` 5 5 1 2 3 4 5 ``` Output: ``` 0 ``` Explanation: Each robot can be assigned to its optimal day, resulting in zero fatigue for all robots.","solution":"def minimize_max_fatigue(n, k, r): This function assigns each robot a day such that the maximum fatigue is minimized. The assignment minimizes |d_i - r_i| for given n robots and k days. Args: - n (int): The number of robots. - k (int): The number of consecutive days. - r (list): List of integers where r[i] is the optimal day for the i-th robot. Returns: - int: The minimum possible maximum fatigue. r.sort() days = list(range(1, k + 1)) left, right = 0, k while left < right: mid = (left + right) // 2 if can_assign_days(r, days, mid): right = mid else: left = mid + 1 return left def can_assign_days(r, days, max_fatigue): A helper function that checks if it is possible to assign days such that the maximum fatigue does not exceed max_fatigue. Args: - r (list): Sorted list of optimal days for each robot. - days (list): List of available days. - max_fatigue (int): The maximum allowed fatigue. Returns: - bool: Whether it is possible to assign the days without exceeding max_fatigue. i, j = 0, 0 while i < len(r) and j < len(days): if abs(days[j] - r[i]) <= max_fatigue: i += 1 j += 1 return i == len(r) # Example to demonstrate functionality n = 5 k = 5 r = [1, 2, 3, 4, 5] print(minimize_max_fatigue(n, k, r)) # Output: 0"},{"question":"Given a string s consisting of lowercase English letters, you are allowed to perform at most one operation: choose any character and remove all its occurrences from the string. Your goal is to maximize the length of the longest substring consisting of the same character. Write a function that takes a string as input and returns an integer representing the length of the longest substring that can be achieved after performing the allowed operation. Input The input is a single line containing the string s (1 ≤ |s| ≤ 105). Output Output a single integer, the length of the longest substring consisting of the same character after removing occurrences of at most one character. Example Input: aabccde Output: 2 Explanation: By removing \'b\', the longest substring is \\"aa\\" or \\"cc\\". Each of these substrings has a length of 2.","solution":"def max_length_longest_substring(s: str) -> int: from collections import defaultdict # Dictionary to keep track of frequency of each character freq = defaultdict(int) for char in s: freq[char] += 1 # Get the frequency count of all characters freq_list = sorted(freq.values(), reverse=True) # If all characters are the same if len(freq_list) == 1: return freq_list[0] # Frequency of the second most frequent character second_max_freq = freq_list[1] # Two main scenarios: # 1. Remove the second most frequent character (or any other character with fewer frequency) # 2. Keep the second most frequent character and remove most frequent one (if beneficial) max_len = 0 # Check the first scenario for char in freq: if freq[char] == freq_list[0]: max_len = max(max_len, freq_list[0]) else: max_len = max(max_len, freq[char]) # Check the second scenario (remove the most frequent character to maximize the substring of second max) max_len = max(max_len, second_max_freq) return max_len"},{"question":"A group of friends is planning a road trip to visit several cities. The cities are connected by bidirectional roads, and the friends want to find a route that visits each city exactly once before returning to the starting city. This classic problem is known as the Traveling Salesman Problem (TSP), but here, you need to help them find an approximate solution that ensures a relatively low cost path rather than the optimal one. The cities are represented as nodes in a graph, and the roads as edges with given weights indicating the travel cost between the cities. Your task is to implement an algorithm that finds a reasonably low-cost path that visits each city once and returns to the starting city. You are given an integer n (2 ≤ n ≤ 40) representing the number of cities and an n by n matrix where the element at row i and column j represents the cost of traveling from city i to city j. Note that the cost matrix is symmetric and there are no self-loops (the diagonal elements are zero). The first line of the input will contain an integer n. The next n lines each contain n integers, representing the cost matrix. Your output should be an approximate solution to the TSP: a sequence of city indices (0-indexed) representing the path that starts and ends at city 0 and visits all other cities exactly once. Additionally, print the total cost of this path. Example Input: ``` 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 ``` Example Output: ``` 0 1 3 2 0 80 ``` In the example, the route is 0 → 1 → 3 → 2 → 0 with a total travel cost of 80. Note that the output sequence and the total cost can vary due to the approximation nature of the solution.","solution":"def tsp_approx(n, cost_matrix): Approximate solution to the Traveling Salesman Problem using Nearest Neighbor heuristic. :param n: Integer representing the number of cities. :param cost_matrix: List of lists representing the cost matrix. :return: Tuple containing the path and the total cost. import numpy as np def nearest_neighbor(cost_matrix, start=0): n = len(cost_matrix) visited = [False] * n path = [start] visited[start] = True total_cost = 0 current_city = start for _ in range(n - 1): next_city = None min_cost = float(\'inf\') for city in range(n): if not visited[city] and cost_matrix[current_city][city] < min_cost: min_cost = cost_matrix[current_city][city] next_city = city path.append(next_city) visited[next_city] = True total_cost += min_cost current_city = next_city path.append(start) total_cost += cost_matrix[current_city][start] return path, total_cost path, total_cost = nearest_neighbor(cost_matrix) return path, total_cost"},{"question":"You are given two sequences of integers, `a` and `b`, each of length `n`. Your task is to determine if it\'s possible to rearrange the elements of sequence `b` such that for every i (1 ≤ i ≤ n), the sum of the elements in the two sequences at the same position is at least a given integer k, i.e., a[i] + b\'[i] ≥ k, where b\' is the rearranged sequence of b. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". The first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 109) — the length of the sequences and the required minimum sum, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109), representing the elements of the first sequence. The third line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 109), representing the elements of the second sequence. Print \\"YES\\" if there exists a rearrangement of the sequence b such that for each i (1 ≤ i ≤ n), a[i] + b[i] ≥ k. Otherwise, print \\"NO\\".","solution":"def can_rearrange_to_meet_sum(n, k, a, b): Determines if b can be rearranged so that for every i, a[i] + b[i] >= k. :param n: Length of the sequences :param k: Required minimum sum :param a: The first sequence :param b: The second sequence :return: \\"YES\\" if possible, \\"NO\\" otherwise a_sorted = sorted(a) b_sorted = sorted(b, reverse=True) for i in range(n): if a_sorted[i] + b_sorted[i] < k: return \\"NO\\" return \\"YES\\""},{"question":"Given a string s and q queries. You need to perform certain operations on this string. There are two types of queries: 1. 1 l x : Replace the character at position l with character x (1 ≤ l ≤ |s|, \'a\' ≤ x ≤ \'z\'). 2. 2 l r c : Count the occurrences of character c in the substring from position l to r (1 ≤ l ≤ r ≤ |s|, \'a\' ≤ c ≤ \'z\'). The first line of the input contains the string s (1 ≤ |s| ≤ 105). The second line contains one integer q (1 ≤ q ≤ 105). Each of the next q lines contains a query in one of the formats described above. For each query of type 2, print the result on a new line – the count of character c in the specified substring.","solution":"def perform_operations(s, queries): Perform operations on the string s based on the list of queries. Args: s (str): The initial string. queries (list of tuples): List of queries where each query is a tuple representing the type of query. Returns: list: Results of type 2 queries. s = list(s) results = [] for query in queries: if query[0] == 1: # Replace character at position l with character x _, l, x = query s[l-1] = x elif query[0] == 2: # Count occurrences of character c in the substring from l to r _, l, r, c = query results.append(s[l-1:r].count(c)) return results"},{"question":"You are given n pairs of integers representing the coordinates of points in 2D space. Your task is to find the two closest points and calculate the Euclidean distance between them. The first line contains an integer n (2 ≤ n ≤ 5000), the number of points. Each of the next n lines contains two integers xi and yi (|xi|, |yi| ≤ 10^4), representing the coordinates of the i-th point. Print the Euclidean distance between the closest pair of points with a precision of 6 decimal places. Euclidean distance between two points (x1, y1) and (x2, y2) is calculated as √((x2 - x1)² + (y2 - y1)²). Example: Input: 4 0 0 0 3 4 0 3 4 Output: 3.000000","solution":"import math def euclidean_distance(p1, p2): Compute the Euclidean distance between two points p1 and p2. Each point is represented as a tuple (x, y). return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2) def closest_pair(points): Find the closest pair of points in a list of points and return their Euclidean distance. min_distance = float(\'inf\') n = len(points) for i in range(n): for j in range(i + 1, n): distance = euclidean_distance(points[i], points[j]) if distance < min_distance: min_distance = distance return min_distance def find_closest_distance(n, coordinates): Given the number of points n and their coordinates, find the closest distance. points = [tuple(map(int, coordinates[i].split())) for i in range(n)] return closest_pair(points)"},{"question":"You are given an array of integers a of length n. You can perform the following operation any number of times: 1. Choose any two distinct indices i and j such that 1 leq i, j leq n. 2. Decrease a[i] by 1. 3. Increase a[j] by 1. Your goal is to determine the minimum number of distinct integers possible in the array after any number of operations. The first line of the input contains one integer n (2 leq n leq 10^5), the length of the array a. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), the elements of the array. Print one integer — the minimum number of distinct integers that can be achieved in the array.","solution":"def min_distinct_integers(n, a): Returns the minimum number of distinct integers possible in the array after any number of operations. from collections import Counter # Use a Counter to count frequencies of each number in the array freq = Counter(a) # The minimum number of distinct integers in the array is 1 if there are more than 1 unique elements return 1 if len(freq) > 1 else 1 # Example usage: # n = 5 # a = [3, 3, 3, 3, 3] # print(min_distinct_integers(n, a)) # Output: 1"},{"question":"A group of friends have decided to play a unique game. The game involves arranging a sequence of cards in such a way that their relative positions exhibit a special pattern. Each card has a unique number written on it, and the goal is to arrange the cards in a specific order where each card indicates the position of another card. The sequence of the cards must be arranged such that for any card at position i (1-indexed), the card at position i has a number which denotes the position of the next card to be picked. If two or more cards indicate the same position, the arrangement is invalid. Given a sequence of n integers representing the cards, determine if it is possible to rearrange the cards to satisfy the game\'s rule. If it is possible, output \\"YES\\" followed by the rearranged sequence. If it is impossible, output \\"NO\\". Input format: - The first line contains an integer n (1 <= n <= 100000), the number of cards. - The second line contains n integers representing the numbers written on the cards. Each number is between 1 and n inclusive. Output format: - If it is possible to rearrange the cards, output \\"YES\\" on the first line, followed by the rearranged sequence on the second line. - If it is impossible to rearrange the cards, output \\"NO\\". Example: Input: 5 5 3 2 1 4 Output: YES 1 4 5 3 2 Explanation: - Card 1 points to position 5, which is card 4. - Card 4 points to position 2, which is card 5. - Card 5 points to position 4, which is card 3. - Card 3 points to position 1, which is card 1. - Card 1 points to position 2 again making it a valid sequence.","solution":"def rearrange_cards(n, cards): Determines if it is possible to rearrange the cards to satisfy the game\'s rule. If it is possible, returns \\"YES\\" followed by the rearranged sequence. If it is impossible, returns \\"NO\\". Parameters: n (int): Number of cards. cards (list): List of integers representing the numbers on the cards. Returns: tuple: (\\"YES\\", list) if rearrangement is possible, (\\"NO\\", ) if not. # Check if the list has all unique values from 1 to n if sorted(cards) == list(range(1, n + 1)): return \\"YES\\", cards else: return \\"NO\\","},{"question":"You are given a Sudoku puzzle as a 9x9 grid where each element is either a digit from \'1\' to \'9\' or the character \'.\' representing an empty cell. You need to determine if the given Sudoku puzzle is valid. The rules for a valid Sudoku are as follows: 1. Each row must contain the digits \'1\' to \'9\' without repetition. 2. Each column must contain the digits \'1\' to \'9\' without repetition. 3. Each of the nine 3x3 sub-grids must contain the digits \'1\' to \'9\' without repetition. Note: - A Sudoku puzzle (partially filled) could also be valid if it follows the rules mentioned above. - If there is any violation of the rules, it is considered invalid. Write a function `isValidSudoku` that takes in a 9x9 list of lists of characters representing the Sudoku board and returns `True` if the board is valid, otherwise returns `False`. Function Signature: ```python def isValidSudoku(board: List[List[str]]) -> bool: ``` # Example: ```python boardprint(isValidSudoku(board)) # Output: True ```","solution":"from typing import List def isValidSudoku(board: List[List[str]]) -> bool: def is_valid_unit(unit): unit = [i for i in unit if i != \'.\'] return len(unit) == len(set(unit)) for row in board: if not is_valid_unit(row): return False for col in zip(*board): if not is_valid_unit(col): return False for i in range(0, 9, 3): for j in range(0, 9, 3): block = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)] if not is_valid_unit(block): return False return True"},{"question":"You are given an array of integers containing both positive and negative numbers. Your task is to find the subarray that has the maximum sum, and then return the sum of that subarray. A subarray is a contiguous part of the array. For example, in the array [−2,1,−3,4,−1,2,1,−5,4], the contiguous subarray [4,−1,2,1] has the maximum sum of 6. # Input - A single line containing a space-separated list of integers representing the array. The length of the list will not exceed 100 elements, and each element will be between -1000 and 1000. # Output - A single integer representing the maximum sum of a subarray. # Example Input ``` -2 1 -3 4 -1 2 1 -5 4 ``` Output ``` 6 ```","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray in an array of integers. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of integers. Your task is to perform a series of operations on this array and, after completing all operations, return the final modified array. The array operations can be one of the following three types: 1. Add a value to all elements within a specified range of indexes. 2. Multiply all elements within a specified range of indexes by a given value. 3. Replace all elements within a specified range of indexes with a given value. Input format: - The first line contains an integer n (1 ≤ n ≤ 100,000) representing the number of elements in the array. - The second line contains n integers representing the elements of the array. - The third line contains an integer q (1 ≤ q ≤ 100,000) representing the number of operations. - Each of the following q lines contains four integers t, l, r, v (1 ≤ l ≤ r ≤ n; 1 ≤ v ≤ 1,000,000; 1 ≤ t ≤ 3), describing an operation: - If t = 1, add value v to all elements in the range [l, r]. - If t = 2, multiply all elements in the range [l, r] by value v. - If t = 3, replace all elements in the range [l, r] with value v. Output format: - Output a single line containing the modified array after all operations have been performed. Example: Input: 8 3 1 4 1 5 9 2 6 3 1 3 5 1 2 2 4 2 3 1 2 7 Output: 7 7 10 6 6 9 2 6","solution":"def perform_operations(n, array, q, operations): for operation in operations: t, l, r, v = operation if t == 1: for i in range(l-1, r): array[i] += v elif t == 2: for i in range(l-1, r): array[i] *= v elif t == 3: for i in range(l-1, r): array[i] = v return array"},{"question":"An increasingly popular challenge in the programming world nowadays is to detect palindromes within strings. A **palindrome** is a word, phrase, or sequence of characters that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. You are tasked with writing a function to detect all unique palindromic substrings within a given string. The substrings should be a minimum of two characters long. **Input Specifications:** - The input contains a single line with a string, `s`, (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. **Output Specifications:** - Output the number of unique palindromic substrings of `s` on the first line. - Following that, list each of these palindromic substrings in lexicographical order, one per line. # Constraints: - A substring is defined as any contiguous sequence of characters within the string. - Ignore single-character substrings even if they are the same forward and backward. - The output palindromic substrings must be unique. # Example: Input: ``` abccba ``` Output: ``` 5 abccba bccb cc ccba abba ``` *Note: In the example provided, the input string \'abccba\' contains 5 unique palindromic substrings (\'abccba\', \'bccb\', \'cc\', \'ccba\', and \'abba\').*","solution":"def find_unique_palindromic_substrings(s): Finds all unique palindromic substrings in a given string `s`. Parameters: s (str): The input string. Returns: list: Sorted list of unique palindromic substrings. def is_palindrome(sub): return sub == sub[::-1] n = len(s) palindromic_set = set() for i in range(n): for j in range(i + 2, n + 1): sub = s[i:j] if is_palindrome(sub): palindromic_set.add(sub) sorted_palindromes = sorted(list(palindromic_set)) return sorted_palindromes def print_palindromic_substrings(s): palindromic_substrings = find_unique_palindromic_substrings(s) print(len(palindromic_substrings)) for palindrome in palindromic_substrings: print(palindrome)"},{"question":"The city of Gridville is designed in a square grid pattern. Each intersection can be represented as a point with integer coordinates (x, y). The mayor of Gridville wants to build a new park in an area bounded by four intersections, forming a perfect rectangle aligned with the coordinate axes. Given four intersections that form the corners of the rectangle, determine the number of intersections (including corners) inside the rectangle. The input contains four pairs of integers (x1, y1), (x2, y2), (x3, y3), (x4, y4), where (x1, y1) is the bottom-left corner, (x2, y2) is the bottom-right corner, (x3, y3) is the top-right corner, and (x4, y4) is the top-left corner of the rectangle. You need to output the number of intersections inside the given rectangle. # Examples: Input: 0 0 2 0 2 2 0 2 Output: 9 Input: -1 -1 1 -1 1 1 -1 1 Output: 9","solution":"def count_intersections(x1, y1, x2, y2, x3, y3, x4, y4): Returns the number of intersections inside the rectangle defined by the provided corners. width = abs(x2 - x1) + 1 height = abs(y4 - y1) + 1 return width * height"},{"question":"Given a grid of dimensions m x n consisting of black cells represented by \'#\' and white cells represented by \'.\', you need to find the largest square that can be formed in the grid such that all the cells of this square are white. If there are multiple squares with the same maximum size, return any one of them. The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the grid. The following m lines contain n characters each (either \'#\' or \'.\') describing the grid. Output a single integer — the size (side length) of the largest square consisting entirely of white cells.","solution":"def largest_white_square(grid): Returns the size (side length) of the largest square consisting entirely of white cells. Parameters: grid (List[List[str]]): A 2D list representing the grid with cells as \'.\' and \'#\'. Returns: int: The side length of the largest white square. if not grid or not grid[0]: return 0 m = len(grid) n = len(grid[0]) max_side = 0 # Create a DP table to store the maximum side length of square ending at (i, j) dp = [[0] * n for _ in range(m)] for i in range(m): for j in range(n): if grid[i][j] == \'.\': if i == 0 or j == 0: # First row or first column dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"In a galaxy far away, there is a robot competition between different teams. Each robot can execute a series of commands, where each command instructs the robot to move in one of four directions: up, down, left, or right. The initial position of each robot is denoted by (0, 0) on an infinite grid. The teams compete by having their robots follow a sequence of commands starting from (0, 0). After all commands have been executed, the team whose robot ends up closest to the origin wins. The distance is calculated using the Manhattan distance. The Manhattan distance between two points (x1, y1) and (x2, y2) is defined as: Manhattan Distance = |x1 - x2| + |y1 - y2| You are given a string `commands` of length n (1 ≤ n ≤ 100000) representing the commands for a robot. Each character in the string represents a movement command: - \'U\' means move up - \'D\' means move down - \'L\' means move left - \'R\' means move right Write a program to find the Manhattan distance from the origin to the robot\'s final position after executing all commands. The input string consists only of characters \'U\', \'D\', \'L\', \'R\'. The first and only line of input contains the string `commands`. Output the Manhattan distance from the origin (0, 0) to the final position of the robot. # Example Input ``` UUDDLRLR ``` Output ``` 0 ``` Explanation The robot moves up twice, down twice, left once, right once, left once, and right once. All movements cancel each other out, so the robot returns to the origin. The Manhattan distance is 0.","solution":"def manhattan_distance(commands): Calculate the Manhattan distance from the origin after executing the given commands. :param commands: A string of commands consisting of characters \'U\', \'D\', \'L\', \'R\'. :return: The Manhattan distance from the origin. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return abs(x) + abs(y)"},{"question":"You are given a string s of length n. You need to handle q queries of the following three types: 1. Replace the character at the given position in the string. 2. Count the occurrences of a given character in a specified substring of the string. 3. Reverse a specified portion of the string. The input consists of several lines: - The first line contains two integers n and q (1 ≤ n, q ≤ 100,000). - The second line contains the string s of length n, consisting of lowercase English letters. - Each of the next q lines contains one query in the form: - \\"1 p c\\" - Replace the character at position p (1-based index) in the string s with the character c. - \\"2 l r c\\" - Count the occurrences of character c in the substring from position l to r (both inclusive, 1-based index). - \\"3 l r\\" - Reverse the substring of s from position l to r (both inclusive, 1-based index). For each query of the second type, output the result on a new line. **Example:** Input: ``` 10 5 abcdeabcde 2 1 5 a 1 3 z 2 1 5 z 3 2 5 2 1 5 e ``` Output: ``` 1 1 1 ``` Explanation: 1. `2 1 5 a` - The substring \\"abcde\\" contains the character \'a\' once. 2. `1 3 z` - The string becomes \\"abzdeabcde\\". 3. `2 1 5 z` - The substring \\"abzde\\" contains the character \'z\' once. 4. `3 2 5` - The string becomes \\"aedzbabcde\\" (reversing \\"bzde\\"). 5. `2 1 5 e` - The substring \\"aedzb\\" contains the character \'e\' once.","solution":"def process_queries(n, q, s, queries): Process a list of queries on a string. Parameters: n (int): The length of the string. q (int): The number of queries. s (str): The initial string. queries (list of str): The list of queries to process. Returns: list of int: The results of the type 2 queries. s = list(s) # Convert string to a list for mutability results = [] for query in queries: parts = query.split() query_type = int(parts[0]) if query_type == 1: # Replace the character at the given position in the string p = int(parts[1]) - 1 c = parts[2] s[p] = c elif query_type == 2: # Count the occurrences of a given character in a specified substring l = int(parts[1]) - 1 r = int(parts[2]) c = parts[3] count = s[l:r].count(c) results.append(count) elif query_type == 3: # Reverse a specified portion of the string l = int(parts[1]) - 1 r = int(parts[2]) s[l:r] = s[l:r][::-1] return results"},{"question":"The annual winter sports competition is approaching, and the organizing committee has decided to have a unique kind of race. The competition will take place on a straight, infinitely long ice track. Each race participant will be given a position on the track where they will start, and a speed at which they can skate. To understand how competitive this race can be, the committee needs to determine how many participants will ever be at the exact same position at the exact same time. Given the starting positions and speeds of the participants, the committee is asking you to calculate the maximum number of participants that will meet at exactly the same position at the same time during the race. You are given n participants, each with a starting position (an integer x) and speed (an integer v). Calculate the maximum number of participants that will be at the same position at the same time. **Input:** - The first line contains a single integer n (1 ≤ n ≤ 100). - The next n lines each contain two integers x and v. Here x (0 ≤ x ≤ 1000) is the starting position of the participant, and v (0 ≤ v ≤ 1000) is the speed of the participant. **Output:** - Print a single integer — the maximum number of participants that will be at the same position at some time. **Example:** Input: 3 0 5 10 5 20 5 Output: 3 Explanation: All participants start at different positions but have the same speed. They will all be at any position at the same time, so the answer is 3.","solution":"def max_participants_meeting(n, participants): Returns the maximum number of participants that will be at the same position at the same time. :param n: int, number of participants :param participants: list of tuples, each containing (x, v) where x is the starting position and v is the speed :return: int, maximum number of participants that will meet at the same position at the same time if n == 1: return 1 from collections import defaultdict # Dictionary to count the number of participants with the same speed speed_dict = defaultdict(int) for _, speed in participants: speed_dict[speed] += 1 # Maximum number of participants with the same speed max_meet = max(speed_dict.values()) return max_meet"},{"question":"You are given a string of lowercase alphabets s of length n and an integer m. You are required to perform m operations on this string. In each operation, you will be provided with two integers li and ri, representing the start and end indices of a substring (1-based index), and a character c. The task is to find the number of occurrences of the character c in the substring [li, ri]. The first line contains integer n (1 ≤ n ≤ 105). The second line contains a string s of length n consisting of lowercase English letters. The third line contains integer m (1 ≤ m ≤ 50000). Each of the following m lines contains a pair of space-separated integers, li and ri (1 ≤ li ≤ ri ≤ n), and a lowercase English letter c. Print m integers — the answers to the operations in the order the operations appear in the input.","solution":"def count_char_in_substrings(n, s, queries): Returns the list of counts of character c in the substring [li-1, ri) for each query. :param n: Length of the string (not used directly) :param s: The input string :param queries: A list of queries where each query is a tuple (li, ri, c) :return: A list of counts of character c in the substrings results = [] for li, ri, c in queries: results.append(s[li-1:ri].count(c)) return results"},{"question":"Aria is a renowned drone pilot and she has been tasked with delivering packages to several houses in a straight line in a futuristic city. The houses are evenly spaced along this line, numbered from 0 to 30000 from the west to the east. She has a drone that can only carry one package at a time. The drone can fly at different speeds but initially, it can only cover a certain distance, k. Aria starts from house 0. After delivering a package at house `p_i`, her drone speeds up and it can fly an additional distance of `1` for the next trip. Thus, if her drone initially flew `k` distance, after one trip, it will fly `k+1` distance, after two trips, it will fly `k+2` distance, and so on. Given the locations of the houses to be delivered and the initial distance `k`, find the maximum number of deliveries Aria can make. The first line of the input contains two space-separated integers m and k (1 ≤ m, k ≤ 30000), denoting the number of houses to which packages need to be delivered and the initial distance that the drone can fly, respectively. The next m lines describe the location of the houses. The i-th of them (1 ≤ i ≤ m) contains an integer p_i (0 ≤ p1 ≤ p2 ≤ ... ≤ pm ≤ 30000), denoting the number of the house that needs to receive a delivery. Print the maximum number of deliveries Aria can make. In the first sample, the optimal route is 0 → 5 (delivered) → 11 (delivered) → 18 (delivered) ... In the second sample, the optimal route is 0 → 7 → 15 (delivered) → 24 (delivered) → 34 (delivered) ... In the third sample, the optimal route is 0 → 3 (delivered) → 7 (delivered) → 12 (delivered) ...","solution":"def max_deliveries(m, k, houses): Returns the maximum number of deliveries Aria can make. :param m: int : number of houses to which packages need to be delivered :param k: int : initial distance that the drone can fly :param houses: list : list of integers where each integer represents house number :return: int : maximum number of deliveries count = 0 current_distance = k current_position = 0 for house in houses: if house <= current_position + current_distance: count += 1 current_distance += 1 current_position = house else: break return count"},{"question":"Consider an undirected weighted graph G with n vertices labelled 1 through n and m edges. Each edge has a weight associated with it. You are required to find the minimum weight of a spanning tree of the graph. The first line contains two integers n and m (1 leq n leq 50, 0 leq m leq 2500) — the number of vertices and edges of the graph. Each of the following m lines describes an edge and contains three integers u_i, v_i, w_i (1 leq u_i, v_i leq n, u_i neq v_i, 1 leq w_i leq 1000) — the endpoints of the edge and its weight. If there is no spanning tree possible, print a single integer -1. Otherwise, print the minimum weight of the spanning tree. In the first sample, the resulting minimum spanning tree is formed as follows: choose the edges with weights 1, 2, and 3. The total weight of the spanning tree is 6.","solution":"def find_minimum_spanning_tree(n, m, edges): Returns the minimum weight of the spanning tree of the graph. If no spanning tree is possible, returns -1. parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX edges.sort(key=lambda x: x[2]) min_weight = 0 num_edges_used = 0 for u, v, w in edges: if find(u - 1) != find(v - 1): union(u - 1, v - 1) min_weight += w num_edges_used += 1 if num_edges_used == n - 1: break if num_edges_used == n - 1: return min_weight else: return -1"},{"question":"Alice is organizing a mysterious puzzle competition for her friends. She has prepared a puzzle string consisting of lowercase letters and she wants to divide this string into exactly two non-empty parts such that the sum of ASCII values of characters in both parts is equal. Alice needs your help to determine if it\'s possible to divide the string as described. The first line contains one integer n (2 le n le 100) — the length of the puzzle string. The second line contains the puzzle string of length n, consisting of lowercase letters (\'a\' to \'z\'). If Alice can divide the puzzle string into two parts with equal ASCII sum, print \\"YES\\". If it\'s not possible, print \\"NO\\". In the first example, the string can be divided as \\"abc\\" and \\"cde\\": the ASCII sum of \\"abc\\" (a=97, b=98, c=99; sum=294) is equal to the ASCII sum of \\"cde\\" (c=99, d=100, e=101; sum=300) minus the ASCII value of character \'c\' taken twice. In the second example, there is no way to divide the string into two parts with equal ASCII sum.","solution":"def can_divide_string(n, s): total_sum = sum(ord(ch) for ch in s) current_sum = 0 for i in range(n - 1): current_sum += ord(s[i]) if current_sum == total_sum - current_sum: return \\"YES\\" return \\"NO\\""},{"question":"The Bakery Cafe has decided to offer a new type of bread. They want to create a unique mixture by combining various types of flour. Each type of flour has a distinct weight and nutritional value, and the cafe wants to achieve the highest possible nutritional value without exceeding a specified weight limit. You are given a list of flours where each flour has a weight and a nutritional value. Write a program that determines the maximum nutritional value that can be achieved without exceeding the given weight limit. The input consists of: - An integer W, representing the maximum weight limit (1 ≤ W ≤ 10^4). - An integer n, representing the number of different types of flours (1 ≤ n ≤ 10^3). - n lines, each containing two integers wi and vi (1 ≤ wi ≤ W, 0 ≤ vi ≤ 10^3), where wi is the weight of the i-th type of flour and vi is its nutritional value. The program should output a single integer, the maximum nutritional value that can be achieved without exceeding the weight limit. Example: Input: 10 4 6 30 3 14 4 16 2 9 Output: 46 In this example, selecting the second (3, 14) and third (4, 16) types of flour achieves the maximum nutritional value of 46 without exceeding the weight limit.","solution":"def max_nutritional_value(W, n, flours): Determines the maximum nutritional value that can be achieved without exceeding the given weight limit. Parameters: W (int): Maximum weight limit. n (int): Number of different types of flours. flours (list of tuples): Each tuple contains two integers (wi, vi) representing the weight and nutritional value of a flour. Returns: int: Maximum nutritional value achievable within the weight limit. # Initialize the dp array for 0 to W weights with all zeros dp = [0] * (W + 1) # Process each flour type for wi, vi in flours: # Traverse the dp array from W to wi to ensure we do not reuse the same item for j in range(W, wi - 1, -1): dp[j] = max(dp[j], dp[j - wi] + vi) return dp[W]"},{"question":"A robot is navigating a grid-based room and needs to reach a specific target cell. The grid is represented as an `n x m` matrix, where `n` is the number of rows and `m` is the number of columns. The robot can only make moves in four directions: up, down, left, and right. You are given the initial coordinates of the robot and the coordinates of the target cell. Determine the minimum number of moves required for the robot to reach the target cell. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the grid, respectively. The second line contains two integers `x1` and `y1` (1 ≤ x1 ≤ n, 1 ≤ y1 ≤ m), representing the initial coordinates of the robot. The third line contains two integers `x2` and `y2` (1 ≤ x2 ≤ n, 1 ≤ y2 ≤ m), representing the coordinates of the target cell. Print a single integer, which is the minimum number of moves required for the robot to reach the target cell.","solution":"def min_moves(n, m, x1, y1, x2, y2): This function calculates the minimum number of moves required for a robot to reach the target cell in a grid-based room. Parameters: n (int): The number of rows. m (int): The number of columns. x1 (int): The initial row position of the robot. y1 (int): The initial column position of the robot. x2 (int): The target row position. y2 (int): The target column position. Returns: int: The minimum number of moves required to reach the target cell. return abs(x2 - x1) + abs(y2 - y1)"},{"question":"In a distant land, the inhabitants use an encryption system called \\"WaveCoder\\" to securely transmit messages. Each message is encoded as a sequence of instructions that must be executed to reveal the original message. The instructions are given in a specific format: \\"type value\\" where \\"type\\" is either \\"add\\", \\"remove\\", or \\"shift\\" and \\"value\\" is a non-negative integer. - \\"add x\\" means append the integer x to the current message. - \\"remove x\\" means remove x elements from the end of the current message. If there are fewer than x elements, remove all of them. - \\"shift x\\" means shift the entire message x positions to the right. If the shift value is greater than the length of the message, continue shifting cyclically. You are given a series of n operations. Your task is to decode the message by executing the operations in the given order. The initial message is an empty sequence. # Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of operations. Each of the next n lines contains an operation in the format \\"type value\\" where \\"type\\" is one of \\"add\\", \\"remove\\", or \\"shift\\", and \\"value\\" is a non-negative integer (0 ≤ value ≤ 1000). # Output Print the decoded message as a space-separated sequence of integers after all operations have been performed. If the message is empty, output an empty line. # Example Input ``` 5 add 5 add 7 shift 3 remove 1 add 10 ``` Output ``` 7 10 5 ``` # Explanation 1. Initial message: [] 2. add 5 -> [5] 3. add 7 -> [5, 7] 4. shift 3 -> [7, 5] (cyclic shift by 3 as there are only 2 elements) 5. remove 1 -> [7] 6. add 10 -> [7, 10] So the final message is \\"7 10\\".","solution":"def wavecoder(n, operations): Decodes a series of operations into a final message. :param n: Number of operations :param operations: List of operations, each in the format \\"type value\\" :return: The final decoded message as a list of integers message = [] for operation in operations: op_type, value = operation.split() value = int(value) if op_type == \\"add\\": message.append(value) elif op_type == \\"remove\\": message = message[:-value] if value <= len(message) else [] elif op_type == \\"shift\\": if message: value = value % len(message) # To handle cyclic shifts message = message[-value:] + message[:-value] return message"},{"question":"You are working on a problem that involves sorting a list of people\'s names based on their ages. Given a dictionary where keys are people\'s names and values are their respective ages, you need to return a list of names sorted primarily by age in ascending order. If two people have the same age, you should sort them lexicographically by their names. Write a function named `sort_people_by_age` that takes in a dictionary `people` and returns a list of names sorted as specified. # Input - A dictionary `people` where: - Keys are strings representing people\'s names. - Values are integers representing people\'s ages. # Output - A list of strings representing the names sorted primarily by age and secondarily by name in case of age ties. # Constraints - No two people will have exactly the same name. - The dictionary will contain at least one entry and at most 1,000 entries. - Names will only contain alphabetical characters (both uppercase and lowercase). - Ages will be integer values between 1 and 120 inclusive. # Examples Example 1 Input: ```python people = { \\"Alice\\": 30, \\"Bob\\": 25, \\"Charlie\\": 25, \\"David\\": 20 } ``` Output: ```python [\\"David\\", \\"Bob\\", \\"Charlie\\", \\"Alice\\"] ``` Example 2 Input: ```python people = { \\"Emma\\": 22, \\"Olivia\\": 22, \\"Noah\\": 30, \\"Liam\\": 28 } ``` Output: ```python [\\"Emma\\", \\"Olivia\\", \\"Liam\\", \\"Noah\\"] ``` You need to implement the `sort_people_by_age` function to produce the correct sorted list of names based on the given criteria.","solution":"def sort_people_by_age(people): Sorts the people dictionary by age primarily and by name secondarily if ages are the same. Parameters: people (dict): A dictionary where keys are people\'s names and values are their ages. Returns: list: A list of names sorted by age and then by name. return sorted(people.keys(), key=lambda name: (people[name], name))"},{"question":"A treasure hunter is exploring a haunted mansion where each room is connected by corridors. The mansion consists of n rooms, and each pair of rooms is connected by a corridor that can either be open or closed. The entrance to the mansion is at room 1, and the treasure is located in room n. Whenever the treasure hunter moves from room x to room y using an open corridor, all corridors connected to room x change their state: all open corridors become closed, and all closed corridors become open. The hunter aims to reach room n from room 1 using the smallest number of corridors possible. Your task is to help the hunter find the optimal path or determine if it\'s impossible to reach the treasure. The first line contains two integers n and m (2 leq n leq 3 cdot 10^5, 0 leq m leq 3 cdot 10^5) — the number of rooms and the number of initially open corridors. The next m lines describe the open corridors. Each line contains two integers u_i and v_i (1 leq u_i, v_i leq n, u_i neq v_i) — the rooms connected by the i-th open corridor. Each unordered pair of rooms is presented at most once. Your output should be: - If there is a path to the treasure, on the first line print a single integer k — the minimum number of corridors the hunter should pass through (1 leq k leq 10^6). On the second line, print k+1 integers x_0, ldots, x_k — the sequence of rooms the hunter should visit, starting from room 1 and ending at room n, such that the sequence satisfies the specified conditions. - If there is no path, print a single integer -1.","solution":"from collections import deque def bfs_minimum_corridors(n, adj_list): Apply BFS to find the minimum path from room 1 to room n. # This will store the minimum number of corridors from room 1 to room i. distances = [-1] * (n + 1) distances[1] = 0 # This will store the path to room n parent = [-1] * (n + 1) # Perform BFS queue = deque([1]) while queue: current = queue.popleft() for neighbor in adj_list[current]: if distances[neighbor] == -1: # if the neighbor has not been visited distances[neighbor] = distances[current] + 1 parent[neighbor] = current queue.append(neighbor) # If we have reached room n, construct the path if neighbor == n: path = [] while neighbor != -1: path.append(neighbor) neighbor = parent[neighbor] path.reverse() return distances[n], path return -1, [] def find_treasure_path(n, corridors): Find the shortest path from room 1 to room n in the haunted mansion. # Create adjacency list adj_list = [[] for _ in range(n + 1)] for u, v in corridors: adj_list[u].append(v) adj_list[v].append(u) distance, path = bfs_minimum_corridors(n, adj_list) if distance == -1: return -1 else: return distance, path"},{"question":"John is working with arrays of integers and he finds interest in calculating the possible sub-array sums. A sub-array is a contiguous part of an array. He is particularly interested in finding such sub-arrays that have the sum exactly equal to a given integer value `k`. For an array `arr` of length `n`, he wants to know the number of unique sub-arrays that add up exactly to `k`. Help John solve this problem. Note that two sub-arrays are considered different if they start or end at different positions in the array, even if they contain the same elements. The input is provided in the following format: - The first line contains an integer `n` (1 ≤ n ≤ 200) — the length of the array. - The second line contains `n` integers representing the array `arr`, where each element `arr[i]` (−10^5 ≤ `arr[i]` ≤ 10^5). - The third line contains the integer `k` (−10^9 ≤ `k` ≤ 10^9) — the target sum. Output a single integer — the number of unique sub-arrays that have the sum exactly equal to `k`. For example, if the input is: ``` 5 1 2 3 -2 5 5 ``` The result would be `2`, because the sub-arrays `[2, 3]` and `[5]` both sum to `5`. Write a program to solve this problem.","solution":"def count_subarrays_with_sum_k(arr, k): Returns the number of unique sub-arrays that have the sum exactly equal to k. Parameters: arr (list): Array of integers k (int): Target sum of sub-arrays Returns: int: Number of unique sub-arrays with sum exactly equal to k count = 0 curr_sum = 0 sum_map = {0: 1} for num in arr: curr_sum += num if (curr_sum - k) in sum_map: count += sum_map[curr_sum - k] if curr_sum in sum_map: sum_map[curr_sum] += 1 else: sum_map[curr_sum] = 1 return count"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},C={class:"card-container"},F={key:0,class:"empty-state"},j=["disabled"],P={key:0},R={key:1};function M(s,e,l,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):h("",!0)]),t("div",C,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+u(a.searchQuery)+'". ',1)):h("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,j)):h("",!0)])}const z=d(A,[["render",M],["__scopeId","data-v-803dd6c3"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/17.md","filePath":"chatai/17.md"}'),D={name:"chatai/17.md"},U=Object.assign(D,{setup(s){return(e,l)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,U as default};
