import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,p,a,r){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(k,[["render",E],["__scopeId","data-v-02b1173b"]]),A=JSON.parse('[{"question":"Create a function that computes whether a given directed graph has any cycles. Your function should return `True` if there is at least one cycle in the graph, and `False` otherwise. Constraints * 1 ≤ |V| ≤ 10,000 * 0 ≤ |E| ≤ 100,000 Input |V| |E| u0 v0 u1 v1 : u|E|-1 v|E|-1 Here, |V| is the number of vertices, and |E| is the number of edges in the graph. The graph vertices are named with the numbers 0, 1, ..., |V|-1 respectively. ui and vi represent the source and target vertices of the i-th edge (directed). Output Print `True` if there is at least one cycle in the graph, and `False` otherwise. Examples Input 4 4 0 1 1 2 2 3 3 1 Output True Input 5 4 0 1 1 2 2 3 3 4 Output False","solution":"def has_cycle(num_vertices, num_edges, edges): from collections import defaultdict # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Helper function to perform DFS and detect cycle def dfs(vertex, visited, rec_stack): visited[vertex] = True rec_stack[vertex] = True for neighbour in graph[vertex]: if not visited[neighbour]: if dfs(neighbour, visited, rec_stack): return True elif rec_stack[neighbour]: return True rec_stack[vertex] = False return False visited = [False] * num_vertices rec_stack = [False] * num_vertices for node in range(num_vertices): if not visited[node]: if dfs(node, visited, rec_stack): return True return False"},{"question":"Michael is planning a treasure hunt for his friends. He designed a map with several waypoints, each labeled with a unique number. To add an extra level of challenge, Michael introduced a rule: Starting from the first waypoint, participants must find a path to the destination waypoint such that the sum of the waypoint numbers along the path is a prime number. They can move from one waypoint to another only if the sum of their numbers is within a specified range [A, B] and each waypoint can only be used once. Write a function to determine if such a path exists from the starting waypoint to the destination waypoint. INPUT The first line contains a single integer T, the number of test cases. Each test case consists of: - A line with four integers N (number of waypoints), A (lower bound of the range), B (upper bound of the range), and D (destination waypoint). - A line with N space-separated integers representing the waypoint numbers. OUTPUT For each test case, print \\"YES\\" if a valid path exists, \\"NO\\" otherwise. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ A ≤ B ≤ 10,000 1 ≤ D ≤ N 1 ≤ Waypoint number ≤ 100 SAMPLE INPUT 2 4 10 50 4 11 15 29 4 5 15 70 5 20 25 30 35 40 SAMPLE OUTPUT YES NO Explanation [1] In the first test case, starting with waypoint 11, you can move to waypoint 29 (11 + 29 = 40, which is between 10 and 50 and is a prime number). From there, directly go to destination waypoint 4 (29 + 4 = 33, which is not a prime, but since the path from start to destination has total sum of 11 + 29 = 40 which is prime). Thus, the answer is YES. [2] In the second test case, no sequence of waypoints results in a path sum that is prime and within range [15, 70]. Hence, the answer is NO.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def path_exists(N, A, B, D, waypoints): Check if there is a path to destination with the prime sum condition. from collections import deque def bfs(start): queue = deque([(start, waypoints[start], {start})]) while queue: current, path_sum, visited = queue.popleft() if current == D: if is_prime(path_sum): return True continue for i in range(N): if i != current and i not in visited: next_sum = path_sum + waypoints[i] if A <= next_sum <= B: queue.append((i, next_sum, visited | {i})) return False for start in range(N): if bfs(start): return \\"YES\\" return \\"NO\\" def treasure_hunt(t, tests): results = [] for test in tests: N, A, B, D = test[0] waypoints = test[1] results.append(path_exists(N, A, B, D-1, waypoints)) return results"},{"question":"Pulkit loves playing word games. He recently came across an interesting problem while reading a book of puzzles. Intrigued by the challenge, he decided to share it with his friend Ashish, who solved it quickly. Now it\'s your turn. Given a string s, you want to reorder the letters of the string such that no two adjacent characters are the same. If it\'s possible to reorder the string in such a way, return \\"Possible\\". Otherwise, return \\"Impossible\\". [Input] The first line contains an integer t denoting the number of test cases. Each of the next t lines contains a single string s which needs to be checked. [Output] For each test case, output \\"Possible\\" or \\"Impossible\\". [Constraints] 1 ≤ t ≤ 100 1 ≤ length of s ≤ 1000 s contains only lowercase English letters (\'a\' to \'z\'). SAMPLE INPUT 3 aabb aaab abcdef SAMPLE OUTPUT Possible Impossible Possible","solution":"from collections import Counter import heapq def is_possible_rearrange(s): Determines if it\'s possible to rearrange string s such that no two adjacent characters are the same. # Count the frequency of each character freq = Counter(s) # Max heap based on character frequency max_heap = [(-cnt, char) for char, cnt in freq.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) # Append current character to result result.append(char) # If there\'s a previously processed character, push it back to the heap if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Decrease the count and set previous character to current prev_count, prev_char = count + 1, char # If the length of result is equal to the original string, it\'s possible if len(result) == len(s): return \\"Possible\\" else: return \\"Impossible\\" def process_test_cases(t, test_cases): Processes multiple test cases. results = [] for s in test_cases: results.append(is_possible_rearrange(s)) return results"},{"question":"You are given a string that consists of a mix of letters and digits. Your task is to reorder the string such that all letters appear in their original order, and all digits appear in their original order, but all digits must come before any letters. For example, given the input string \\"a1b2c3\\", the output should be \\"123abc\\". Function signature: `def reorder_string(s: str) -> str:` # Input - A single line containing the string `s` (1 ≤ |s| ≤ 1000), where |s| denotes the length of the string. The string consists of only alphanumeric characters. # Output - Print the reordered string. # Examples Example 1 **Input:** ``` a1b2c3 ``` **Output:** ``` 123abc ``` Example 2 **Input:** ``` abc123 ``` **Output:** ``` 123abc ``` Example 3 **Input:** ``` 1a2b3c ``` **Output:** ``` 123abc ``` # Note In the given examples, the order of letters and digits within their respective groups remains the same, but digits preceed letters in the output. To solve the problem, extract digits and letters separately from the input string, then concatenate the digits followed by the letters maintaining their original order.","solution":"def reorder_string(s: str) -> str: digits = \'\'.join(filter(str.isdigit, s)) letters = \'\'.join(filter(str.isalpha, s)) return digits + letters"},{"question":"In a certain game, there are n warriors standing in a line, and each warrior has some strength. The i-th warrior can be represented by their strength - an integer si. The warriors are unique and numbered from 1 to n. A fight happens in rounds. During each round, the weakest warrior is defeated (removed from the game) and the next weakest warrior gains the strength of the defeated warrior. You are to handle q scenarios, each describing the initial strengths of n warriors. For each scenario, calculate the final strength of the survivor, who is left after all the other warriors have been defeated. Input The first line contains an integer q (1 ≤ q ≤ 100) — the number of scenarios. The first line of each scenario contains an integer n (2 ≤ n ≤ 10^5) — the number of warriors. The next line contains n space-separated integers s1, s2, ..., sn (1 ≤ si ≤ 10^9) — the strengths of the warriors. Output For each scenario, print a line containing the final strength of the survivor. Examples Input 2 3 1 2 3 4 4 1 3 2 Output 6 10 Explanation In the first scenario: - Initially, the warriors have strengths 1, 2, and 3. - In the first round, the weakest warrior (strength 1) is defeated, and the next weakest warrior (strength 2) gains their strength. - Now the warriors have strengths 3 and 3. - In the second round, one of the warriors with strength 3 is defeated, and the surviving warrior has a final strength of 6. In the second scenario: - Initially, the warriors have strengths 4, 1, 3, and 2. - In the first round, the weakest warrior (strength 1) is defeated, and the next weakest warrior (strength 2) gains their strength. - Now the warriors have strengths 4, 3, and 3. - In the second round, one of the warriors with strength 3 is defeated, and the next weakest warrior (strength 3) gains their strength. - Now the warriors have strengths 4 and 6. - In the third round, one of the warriors with strength 4 is defeated, and the surviving warrior has a final strength of 10.","solution":"def final_strength_of_survivor(q, scenarios): results = [] for i in range(q): n, strengths = scenarios[i] strengths.sort() while len(strengths) > 1: strengths[1] += strengths[0] strengths.pop(0) strengths.sort() results.append(strengths[0]) return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') q = int(input_lines[0]) scenarios = [] index = 1 for _ in range(q): n = int(input_lines[index]) strengths = list(map(int, input_lines[index + 1].split())) scenarios.append((n, strengths)) index += 2 return q, scenarios def format_output(results): return \\"n\\".join(map(str, results)) # Example Usage: # input_string = \\"2n3n1 2 3n4n4 1 3 2n\\" # q, scenarios = parse_input(input_string) # results = final_strength_of_survivor(q, scenarios) # output_string = format_output(results) # print(output_string)"},{"question":"In a world where technology has advanced to controlling the weather, you\'re working as a programmer for the Weather Control Corporation. Your task is to ensure that the corporation can maximize the amount of rain over certain cities in a set period. Given a map of cities and the roads between them, several special stations can trigger rain in a city. However, each station can only rain on one city at a time, and once it starts raining on a city, it\'s locked to that city. Your goal is to determine whether it\'s possible to make it rain on either: * Exactly ⌈√{n}⌉ cities simultaneously. * Exactly n-⌈√{n}⌉ cities simultaneously. The input is a connected graph where nodes represent cities and edges represent roads. Input The first line contains two integers n and m (5 ≤ n ≤ 10^5, n-1 ≤ m ≤ 2 ⋅ 10^5) — the number of cities and roads in the map. Each of the next m lines contains two space-separated integers u and v (1 ≤ u,v ≤ n) that represent a road between cities u and v. There may be multiple roads between cities, but there are no self-loops. Output If you choose to make it rain on exactly ⌈√{n}⌉ cities, then on the first line print \\"1\\", followed by a line containing ⌈√{n}⌉ distinct integers representing the cities. If you choose to make it rain on exactly n-⌈√{n}⌉ cities, then on the first line print \\"2\\", followed by a line containing n-⌈√{n}⌉ distinct integers representing the cities. It\'s guaranteed that one of the conditions can always be met. Examples Input 8 9 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 1 4 6 Output 1 1 3 5 Input 9 10 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 2 7 3 8 Output 2 1 2 3 4 5 6 Input 6 7 1 2 2 3 3 4 4 5 5 6 6 1 2 5 Output 1 1 3 5 Note In the first sample: The graph has an optimal solution if we choose cities 1, 3, and 5 which meets the condition ⌈√{8}⌉ = 3. In the second sample: The graph has an optimal solution if we choose cities 1, 2, 3, 4, 5, and 6 which meets the condition 9 - ⌈√{9}⌉ = 6. In the third sample: The graph has an optimal solution if we choose cities 1, 3, and 5 which meets the condition ⌈√{6}⌉ = 3.","solution":"import math from collections import deque def find_optimal_rain_distribution(n, m, roads): def bfs(start): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True component = [] while queue: city = queue.popleft() component.append(city) for neighbor in graph[city]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component graph = [[] for _ in range(n + 1)] for u, v in roads: graph[u].append(v) graph[v].append(u) sqrt_n = math.ceil(math.sqrt(n)) target1 = sqrt_n target2 = n - sqrt_n # Find connected components using BFS for i in range(1, n + 1): optimal_cities = bfs(i) if len(optimal_cities) >= min(target1, target2): if len(optimal_cities) >= target1: return [1, optimal_cities[:target1]] return [2, optimal_cities[:target2]] # Example usage: # n, m = 8, 9 # roads = [ # (1, 2), (2, 3), (3, 4), (4, 5), # (5, 6), (6, 7), (7, 8), (8, 1), (4, 6) # ] # result = find_optimal_rain_distribution(n, m, roads) # Outputs will be either: # [1, [1, 2, 3]] for finding 3 cities to rain on # [2, [1, 2, 3, 4, 5, 6, 7]] for finding n-3 = 5 cities to rain on"},{"question":"A company is planning to organize a marathon event and needs a program to determine the final ranking of the participants. Each participant is identified by a unique participant ID, and their completion times in seconds are recorded once they finish the marathon. Write a program that reads the data of multiple participants, sorts them by their completion times in ascending order, and outputs the IDs of participants in the order of their rankings. Constraints: - The number of participants, N, is such that 1 leq N leq 1000. - The completion time of each participant, T, is a positive integer where 1 leq T leq 100000. - Each participant ID is a unique positive integer within the range 1 leq ID leq 1000. - There are no ties in completion times, i.e., all completion times are distinct. Input: The first line of the input contains an integer N indicating the number of participants. The next N lines each contain two integers, ID and T, representing the participant ID and their corresponding completion time, respectively. Output: Output the participant IDs in ascending order of their completion times, one per line. Example: Input: 5 101 3600 102 3050 103 3450 104 3200 105 3350 Output: 102 104 105 103 101","solution":"def get_rankings(N, participants): Returns the rankings of participants by their completion times. Parameters: N (int): Number of participants participants (list of tuples): Each tuple contains (ID, T) where ID is the participant ID, and T is the completion time. Returns: list of int: List of participant IDs sorted by their completion times in ascending order. # Sort participants by their completion time participants.sort(key=lambda x: x[1]) # Extract and return the sorted participant IDs return [participant[0] for participant in participants]"},{"question":"Company XYZ is planning to optimize their logistics operations by efficiently packing supply crates into delivery trucks. Each truck has a fixed number of crates it can carry, and each crate has a specific weight. To avoid overloading the trucks, they have set a maximum allowable weight that each truck can carry. The challenge is to determine the minimum number of trucks required to transport all the crates without exceeding the weight limit of any truck. Each truck should be filled optimally to make sure the number of trucks used is minimized. Input The first line contains n (1 ≤ n ≤ 1000), the number of crates. The second line contains n integers each representing the weight of the crates, w_i (1 ≤ w_i ≤ 100). The third line contains a single integer, W (1 ≤ W ≤ 10000), the maximum allowable weight for each truck. Output Output a single integer which is the minimum number of trucks needed to transport all the crates. Examples Input 5 2 3 5 8 3 10 Output 3 Input 4 4 8 2 6 15 Output 2 Note In the first test case, the minimum number of trucks required is 3. One optimal way to pack the trucks is: - Truck 1: [2, 3, 3] (Weight: 8) - Truck 2: [5] (Weight: 5) - Truck 3: [8] (Weight: 8) In the second test case, the minimum number of trucks required is 2. One optimal way to pack the trucks is: - Truck 1: [4, 8, 2] (Weight: 14) - Truck 2: [6] (Weight: 6)","solution":"def min_number_of_trucks(n, weights, max_weight): Determines the minimum number of trucks required to transport all crates. Parameters: n (int): The number of crates. weights (list): A list of integers representing the weight of each crate. max_weight (int): The maximum allowable weight for each truck. Returns: int: The minimum number of trucks needed. weights.sort(reverse=True) trucks = [] for weight in weights: placed = False for i in range(len(trucks)): if trucks[i] + weight <= max_weight: trucks[i] += weight placed = True break if not placed: trucks.append(weight) return len(trucks)"},{"question":"Given an integer array nums, move all 0\'s to the end of it while maintaining the relative order of the non-zero elements. You must do this in-place without making a copy of the array. Formally, * You are given an integer array nums. * Move all the zeroes to the end and maintain the relative order of the non-zero elements. Implement a function called `moveZeroes` that takes a list of integers `nums` and modifies it in place according to the above requirements. # Example ```python def moveZeroes(nums: List[int]) -> None: # your code here ``` **Example 1:** ``` Input: nums = [0,1,0,3,12] Output: [1,3,12,0,0] ``` **Example 2:** ``` Input: nums = [0,0,1] Output: [1,0,0] ``` **Example 3:** ``` Input: nums = [2,1] Output: [2,1] ``` # Constraints: * 1 <= nums.length <= 10^4 * -2^31 <= nums[i] <= 2^31 - 1","solution":"def moveZeroes(nums): Moves all the zeroes in the list `nums` to the end while maintaining the order of non-zero elements. n = len(nums) last_non_zero_found_at = 0 for i in range(n): if nums[i] != 0: nums[last_non_zero_found_at] = nums[i] last_non_zero_found_at += 1 for i in range(last_non_zero_found_at, n): nums[i] = 0"},{"question":"You are given a grid with n rows and m columns filled with the characters \'.\', \'#\', and \'S\'. The \'.\' character represents an empty cell, the \'#\' character represents a wall, and the \'S\' character represents the starting position of a robot. The robot can move up, down, left, or right, but cannot move through walls. The robot\'s task is to reach a cell on the grid\'s border (i.e., a cell in the first or last row, or the first or last column). In one operation, the robot can move to an adjacent cell. Determine the minimum number of operations required for the robot to reach any border cell, if it is possible. If it is not possible for the robot to reach a border cell, output -1. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000). The next n lines contain m characters each, representing the grid. It is guaranteed that there is exactly one \'S\' character in the grid. Output Output the minimum number of operations to move the robot from its starting position to any border cell. If it is not possible, output -1. Examples Input 5 5 ..... ..... ..S.. ..... ..... Output 2 Input 3 3 # #S# # Output -1","solution":"from collections import deque def min_steps_to_border(n, m, grid): def is_border_cell(x, y): return x == 0 or x == n-1 or y == 0 or y == m-1 # Find the starting position start_x, start_y = None, None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start_x, start_y = i, j break if start_x is not None: break if is_border_cell(start_x, start_y): return 0 # Directions: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS setup queue = deque([(start_x, start_y, 0)]) visited = set((start_x, start_y)) while queue: x, y, steps = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': if is_border_cell(nx, ny): return steps + 1 queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1"},{"question":"# Problem Statement Given two arrays of integers, `A` and `B`, of the same length `n`, write a program to determine the maximum possible sum of elements from the array `A` such that no two elements picked from `A` share the same index with the elements picked from `B`. In other words, you need to find the elements from the array `A` such that their indices are not used while adding the elements from array `B`. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) - the length of the arrays `A` and `B`. - The second line contains `n` space-separated integers `A[i]` (1 ≤ A[i] ≤ 10000) - elements of the array `A`. - The third line contains `n` space-separated integers `B[i]` (1 ≤ B[i] ≤ 10000) - elements of the array `B`. # Output - Print a single integer - the maximum sum of elements from the array `A` following the given condition. # Example Sample Input 1 ``` 4 3 8 2 5 4 7 8 6 ``` Sample Output 1 ``` 16 ``` Explanation The maximum sum of elements from `A` that are not in the same indices as the picked elements of `B` is `8 + 5 + 3 = 16`. Sample Input 2 ``` 3 5 6 7 1 2 3 ``` Sample Output 2 ``` 18 ``` Explanation Since no constraints are provided for array `B`, we can simply pick all elements from `A`. # Constraints 1. The lengths of the arrays are identical. 2. Each array element is within the range `[1, 10000]`. 3. You can always pick elements from array `A` with no common indices to elements picked from array `B`. **Note:** Ensure your solution handles large inputs efficiently. # Additional Information The problem requires you to find a suitable approach to maximize the sum of elements from `A` while ensuring the constraints regarding the indices used are maintained. Consider algorithms that efficiently handle larger inputs and ensure your solution’s complexity is appropriate for the input size.","solution":"def max_sum_without_same_indices(A, B): Returns the maximum possible sum of elements from array A such that no two elements picked from A share the same index with the elements picked from B. Parameters: A (list of int): elements of array A B (list of int): elements of array B Returns: int: maximum sum of elements from array A return sum(A)"},{"question":"Given a list of `n` integers and `q` queries, you need to perform operations on this list and answer the queries. The list initially consists of zeros. The queries are of two types: 1. Update the value at a specific position in the list. 2. Compute the sum of integers in a specified subsegment of the list. Each query is provided in one of the following formats: - `1 i v`: Update the integer at position `i` to `v`. - `2 l r`: Compute the sum of integers in the subsegment from position `l` to position `r` (inclusive). Input: The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 2*10^5) — the number of elements in the list and the number of queries, respectively. The next `q` lines contain queries in one of the two formats mentioned above. Output: For each query of type `2`, output the sum of the specified subsegment. Example: Input: ``` 5 5 1 1 5 1 2 3 2 1 2 1 5 7 2 1 5 ``` Output: ``` 8 15 ``` Explanation: Initially, the list is [0, 0, 0, 0, 0]. 1. After `1 1 5`, the list becomes [5, 0, 0, 0, 0]. 2. After `1 2 3`, the list becomes [5, 3, 0, 0, 0]. 3. The sum of integers from position 1 to 2 is 5 + 3 = 8. 4. After `1 5 7`, the list becomes [5, 3, 0, 0, 7]. 5. The sum of integers from position 1 to 5 is 5 + 3 + 0 + 0 + 7 = 15.","solution":"class NumArray: def __init__(self, n): Initialize your data structure here. self.nums = [0] * n self.n = n def update(self, i: int, val: int) -> None: Update the value at index i to val. self.nums[i] = val def sumRange(self, i: int, j: int) -> int: Return the sum of the integers from index i to j (both inclusive). return sum(self.nums[i:j+1]) # Main function to act as an interface for processing queries def process_queries(n, q, queries): result = [] num_array = NumArray(n) for query in queries: if query[0] == 1: num_array.update(query[1] - 1, query[2]) # converting from 1-based to 0-based index elif query[0] == 2: result.append(num_array.sumRange(query[1] - 1, query[2] - 1)) # converting from 1-based to 0-based index return result"},{"question":"You have n people standing in a line, all facing forward. The height of each person is given in the array `heights`, where `heights[i]` represents the height of the i-th person in the line. Unfortunately, some people are taller than the person immediately in front of them, blocking their view. A person `i` can see the parade happening in their front if and only if no one in front of them up to the person `j` (where j < i) is taller than them. Given an array of heights, your task is to determine how many people in the line are able to see the parade. Input The first line contains a single integer n (1 ≤ n ≤ 100,000), the number of people in the line. The second line contains n integers, the heights of the people in the line, separated by spaces (1 ≤ heights[i] ≤ 10^9). Output Output a single integer — the number of people who can see the parade. Example Input 7 150 160 165 170 165 170 160 Output 4 Explanation In this example, individuals at positions 1, 2, 3, and 4 can see the parade. Person at position 5 cannot see the parade due to person at position 4 being taller. Similarly, person at position 6 can see the parade since there is no one taller from position 1 to 5. Lastly, person at position 7 is blocked by the person at position 6. Hint Use a stack to keep track of the heights of people who can see the parade and efficiently determine whether a new person can see the parade based on the heights of people in front of them.","solution":"def count_visible_people(heights): This function returns the number of people who can see the parade. max_height = 0 visible_count = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"Problem Statement You are working at a warehouse where items are stored in stacks across various shelves. Each stack can be represented as a sequence of integers where a positive value represents an item of that weight and a value of -1 represents a void space or gap. The warehouse automation system can only pick items from a stack following certain rules. The goal is to maximize the total weight of items that can be picked from all stacks. The rules for picking items are as follows: 1. You can only pick the top item from any stack. 2. You can continue picking items from a stack until you encounter a gap (-1), which means you can\'t pick any more items from that stack. 3. If you encounter a gap on the stack, you cannot resume picking items from that stack. Your task is to write a program to determine the maximum total weight of items that can be picked from the stacks given the constraints. Input The input consists of a single test case in the following format: n a_{1,1} a_{1,2} ... a_{1,m_1} a_{2,1} a_{2,2} ... a_{2,m_2} ... a_{n,1} a_{n,2} ... a_{n,m_n} The first line contains a positive integer n (1 le n le 50), representing the number of stacks. The following n lines describe each stack, where each line contains a sequence of space-separated integers a_{i,j} representing the weights of items or gaps in the i-th stack (1 le j le m_i, 1 le m_i le 50, 1 le |a_{i,j}| le 1,000,000). Output Output a single integer representing the maximum total weight of items that can be picked from all stacks. Example Input 3 5 3 10 -1 2 6 -1 4 8 7 2 -1 5 3 Output 43 Explanation: From stack 1: 5 + 3 + 10 = 18 From stack 2: 6 = 6 From stack 3: 7 + 2 = 9 Total weight = 18 + 6 + 9 = 33","solution":"def max_pick_weight(stacks): total_weight = 0 for stack in stacks: stack_weight = 0 for item in stack: if item == -1: break stack_weight += item total_weight += stack_weight return total_weight"},{"question":"Statement: You are given a string containing lowercase alphabets and digits. Your task is to rearrange the string in such a way that all the digits appear in the end in ascending order while the alphabets appear at the beginning in alphabetical order. The output should be a single string that concatenates the sorted alphabets followed by the sorted digits. Input: A single string S containing lowercase alphabets and digits with length n (1 ≤ n ≤ 1000). Output: Print the rearranged string as described. Examples: Input: b4a1c3d2 Output: abcd1234 Input: 9e5d6c1b7a Output: abcde15679 Input: abc123 Output: abc123 Explanation: In the first example, the original string is \\"b4a1c3d2\\". By sorting the letters we get \\"abcd\\". By sorting the digits we get \\"1234\\". Concatenating them results in \\"abcd1234\\". In the second example, the string \\"9e5d6c1b7a\\" is divided into \\"edcba\\" and \\"96571\\". Sorting \\"edcba\\" gives \\"abcde\\" and sorting \\"96571\\" gives \\"15679\\". Concatenating them results in \\"abcde15679\\". In the third example, \\"abc123\\" is already sorted in this order, so the output remains \\"abc123\\".","solution":"def rearrange_string(S): Rearranges the string such that all the alphabets are sorted alphabetically and all the digits are sorted in ascending order, with alphabets appearing before digits in the output. Parameters: S (str): Input string containing lowercase alphabets and digits. Returns: str: The rearranged string. alphabets = [] digits = [] for char in S: if char.isalpha(): alphabets.append(char) else: digits.append(char) alphabets.sort() digits.sort() return \'\'.join(alphabets) + \'\'.join(digits)"},{"question":"The prestigious Math Olympiad is coming up, and the math club needs to send their most talented members to represent their school. Each member has a unique skill level they are rated at, and for fairness in the selection, the club has decided to choose exactly m members such that the skill difference between the highest and lowest rating among the selected members is minimized. Write a function that, given a list of skill levels and the number of members to choose, returns the minimum difference between the highest and lowest skill levels of any possible selection of m members. Input: The first line of the input contains two integers n and m (1 ≤ m ≤ n ≤ 100000) — the number of members in the math club and the number of members to select. The second line of the input contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9) — the skill levels of the members. Output: Output one integer— the minimum difference between the highest and lowest skill levels among any selection of m members. Examples Input 6 3 10 20 30 40 50 60 Output 20 Input 5 2 8 1 4 9 7 Output 1 Note: In the first example, selecting members with skill levels 10, 20, and 30 will result in a minimum difference of 20. Any other selection of 3 members will have a higher skill difference. In the second example, selecting members with skill levels 8 and 9 will give a difference of 1, which is the minimum possible among any selection of 2 members.","solution":"def min_skill_diff(n, m, skill_levels): Returns the minimum difference between the highest and lowest skill levels among any selection of m members. # Sorting the list to efficiently find the minimum difference skill_levels.sort() # Initializing the minimum difference with a large value min_diff = float(\'inf\') # Iterating through the sorted list and finding the minimum difference for i in range(n - m + 1): current_diff = skill_levels[i + m - 1] - skill_levels[i] if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"The GCD (Greatest Common Divisor) and LCM (Least Common Multiple) are fundamental concepts in number theory. Given two numbers, find both their GCD and LCM. Input The input consists of a single line containing two integers a and b (1 ≤ a, b ≤ 10^9). Output Print two integers, the GCD and LCM of the given numbers. Examples Input 15 20 Output 5 60 Input 27 36 Output 9 108 Note The GCD of two numbers is the largest number that divides both of them without leaving a remainder. The LCM of two numbers is the smallest number that is a multiple of both. The relationship between GCD and LCM can be defined as: GCD(a, b) * LCM(a, b) = a * b","solution":"def gcd(a, b): Compute the Greatest Common Divisor of a and b. while b: a, b = b, a % b return a def lcm(a, b, gcd_val): Compute the Least Common Multiple of a and b using their GCD. return a * b // gcd_val def gcd_and_lcm(a, b): Compute both the GCD and LCM of a and b. gcd_val = gcd(a, b) lcm_val = lcm(a, b, gcd_val) return gcd_val, lcm_val"},{"question":"You are given an array of integers representing the energy levels of a group of adventurers preparing for an expedition. Due to the strenuous nature of the journey, any two adventurers with the same energy levels cannot travel together as they would cause a conflict. To maximize the number of adventurers that can embark on the journey without any conflicts, you must determine how many adventurers can travel together. Write a function `max_adventurers` that takes in a list of integers representing the energy levels of the adventurers and returns the maximum number of adventurers that can set off on the journey without any conflicts. Input: - An integer T, denoting the number of test cases. - For each test case: - An integer N, denoting the number of adventurers. - A list of N integers, each representing the energy level of an adventurer. Output: - For each test case, return a single integer representing the maximum number of adventurers that can travel together without any conflicts. Constraints: - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 200 - 1 ≤ energy level of each adventurer ≤ 100 Example: Input: 2 5 1 2 2 3 4 6 5 5 5 5 5 5 Output: 4 1 Explanation: For the first test case: The energy levels are [1, 2, 2, 3, 4]. Removing one of the \'2\'s allows [1, 2, 3, 4] to travel together, a total of 4 adventurers. For the second test case: Since all members have the same energy level, only one can set off on the journey.","solution":"def max_adventurers(test_cases): results = [] for energy_levels in test_cases: unique_levels = set(energy_levels) results.append(len(unique_levels)) return results"},{"question":"Given a linked list, implement a function `rearrange` that rearranges the nodes in the linked list such that all nodes at even positions come before all nodes at odd positions. The relative order of nodes at even and odd positions should be maintained. For example, for the linked list `1 -> 2 -> 3 -> 4 -> 5`, the function should rearrange the list to `2 -> 4 -> 1 -> 3 -> 5`. # Function Signature ```python def rearrange(head: ListNode) -> ListNode: # Implementation here ``` **Input** The linked list given as input. **Output** Return the head of the rearranged linked list. **Example** **Input:** 1 -> 2 -> 3 -> 4 -> 5 **Output:** 2 -> 4 -> 1 -> 3 -> 5 # Constraints - The number of nodes in the linked list `n` is such that `1 <= n <= 1000`. - The values of the nodes are integers.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rearrange(head: ListNode) -> ListNode: if not head or not head.next: return head odd_head = ListNode(0) # Placeholder for the start of odd indexed elements even_head = ListNode(0) # Placeholder for the start of even indexed elements odd = odd_head # Pointer to the current odd indexed element even = even_head # Pointer to the current even indexed element current = head index = 1 while current: if index % 2 == 0: even.next = current even = even.next else: odd.next = current odd = odd.next current = current.next index += 1 even.next = odd_head.next # Connect the end of even list to the head of odd list odd.next = None # To prevent cyclic links return even_head.next # even_head.next is the new head of the rearranged list"},{"question":"Mina is a computer science student and she loves problem solving. Recently, she came across an interesting problem about triangular numbers. A triangular number is a number that can be represented in the form of a triangle with dots. The nth triangular number is the sum of the n natural numbers from 1 to n. For example, the first few triangular numbers are: 1, 3, 6, 10, 15... Mina is curious to know if a given number is a triangular number or not. She seeks your help in writing a program to check if a given number is a triangular number. Input: The input will contain an integer T denoting the number of test cases. Then T test cases follow, each one consisting of a single integer N. Output: For each test case, output \\"YES\\" if the given number is a triangular number, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^9 SAMPLE INPUT 5 1 3 7 10 55 SAMPLE OUTPUT YES YES NO YES YES Explanation: Case 1: 1 is the first triangular number. Case 2: 3 is the second triangular number. Case 3: 7 is not a triangular number. Case 4: 10 is the fourth triangular number. Case 5: 55 is the tenth triangular number.","solution":"import math def is_triangular_number(n): Determine if n is a triangular number. # A number N is triangular if (8*N + 1) is a perfect square. x = 8 * n + 1 root = int(math.isqrt(x)) return root * root == x def check_triangular_numbers(test_cases): results = [] for number in test_cases: if is_triangular_number(number): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # T = 5 # test_cases = [1, 3, 7, 10, 55] # print(check_triangular_numbers(test_cases))"},{"question":"In a small village, there is a festival where villagers decorate their houses with beautiful LED lights. Each villager has a strong sense of aesthetics and they want their house to look in a specific pattern using RGB lights. The pattern follows very strict rules: 1. An RGB light sequence consists of characters \'R\', \'G\', and \'B\'. 2. The pattern must have an equal number of \'R\', \'G\', and \'B\'. 3. The length of the sequence is always a multiple of 3. Villagers are given a long string of RGB light sequence and they need to check if they can rearrange the string to form a valid pattern as per the above rules. Your task is to write a function that determines if the given string of RGB light sequence can be rearranged to form a valid pattern. # Input Format: - A single line containing the string of characters \'R\', \'G\', and \'B\'. # Output Format: - Print \\"VALID\\" if it is possible to rearrange the string to form a valid RGB pattern; otherwise, print \\"INVALID\\". # Constraints: - The length of the input string will be between 1 and 1000. # Sample Input 1: ``` RRGGBB ``` # Sample Output 1: ``` VALID ``` # Explanation: The given string can be rearranged to \\"RGBRGB\\", which has an equal number of \'R\', \'G\', and \'B\' and the length is a multiple of 3. # Sample Input 2: ``` RRGGB ``` # Sample Output 2: ``` INVALID ``` # Explanation: The length of the string is not a multiple of 3, so it can\'t be rearranged to form a valid pattern.","solution":"def is_valid_rgb_pattern(s): Returns \\"VALID\\" if the string can be rearranged to form a valid RGB pattern, else \\"INVALID\\". if len(s) % 3 != 0: return \\"INVALID\\" count_R = s.count(\'R\') count_G = s.count(\'G\') count_B = s.count(\'B\') if count_R == count_G == count_B: return \\"VALID\\" else: return \\"INVALID\\""},{"question":"A small library has decided to digitize its collection of books. Each book is identified by a unique ISBN number, and the library wants to ensure these ISBN numbers are valid before they add the books to their digital catalog. The ISBN is a 13-digit number where the last digit is a check digit that is calculated using a specific algorithm. Here\'s how the check digit can be verified: 1. Take each of the first 12 digits of the ISBN. 2. Starting with the first digit, multiply it by 1. 3. Multiply the second digit by 3. 4. Multiply the third digit by 1 again, the fourth digit by 3, and so on, alternating between 1 and 3. 5. Sum these values. 6. Take the modulus 10 of the sum (i.e., sum % 10). 7. If the result is 0, then the check digit (the 13th digit of the ISBN) should be 0. Otherwise, the check digit should be 10 minus the result. Write a function to check if a given 13-digit ISBN number is valid or not. Input format: The input will be a string of 13 digits. Output format: Print \\"Valid\\" if the ISBN number is valid, and \\"Invalid\\" otherwise. Constraints: - The input string will always have exactly 13 digits. Example Input: 9780136091813 Example Output: Valid Example Input: 9780136091814 Example Output: Invalid","solution":"def is_valid_isbn(isbn): Check if the provided ISBN-13 number is valid. Args: isbn (str): The 13-digit ISBN number as a string. Returns: str: \\"Valid\\" if the ISBN is valid, \\"Invalid\\" otherwise. if len(isbn) != 13 or not isbn.isdigit(): return \\"Invalid\\" check_sum = 0 for i in range(12): digit = int(isbn[i]) if i % 2 == 0: check_sum += digit # Multiple by 1 if index is even else: check_sum += digit * 3 # Multiple by 3 if index is odd check_digit = int(isbn[-1]) calculated_check_digit = (10 - (check_sum % 10)) % 10 if check_digit == calculated_check_digit: return \\"Valid\\" else: return \\"Invalid\\""},{"question":"You have been tasked with developing a software system for a small library that needs a functionality to calculate and display the most popular book based on borrowing records. The library records each instance of a book being borrowed with a unique borrowing ID for each book. Your task is to determine which book is the most frequently borrowed. If there is a tie, i.e., multiple books have the same maximum number of borrows, the book with the smallest borrowing ID should be considered as the most popular. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the total number of borrowing transactions. The second line contains n positive integers b1, b2, ..., bn (1 ≤ bi ≤ 1 000 000), where bi is the borrowing ID of the book for the i-th borrowing transaction. Output Print the borrowing ID of the book which is the most popular based on the number of borrows. If there is a tie for the maximum number of borrows, print the smallest borrowing ID among them. Examples Input 5 3 1 2 2 1 Output 1 Input 8 10 20 30 20 10 30 30 20 Output 20 Note: In the first test sample, books with ID 1 and 2 both have the same number of borrows, which is 2. Since book ID 1 is smaller, it is selected. In the second test sample, books with ID 10, 20, and 30 have borrow counts of 2, 3, and 3 respectively, making book ID 20 the most popular because it has the highest borrow count.","solution":"def most_popular_book(n, borrow_ids): Returns the borrowing ID of the most frequently borrowed book. If there is a tie, the book with the smallest borrowing ID is returned. from collections import Counter borrow_count = Counter(borrow_ids) max_borrows = max(borrow_count.values()) # Find all books with the maximum borrow count candidates = [book_id for book_id, count in borrow_count.items() if count == max_borrows] # Return the book with the smallest borrowing ID among candidates return min(candidates)"},{"question":"The ZYX company operates a series of convenience stores in a busy metropolitan area. Each store maintains a stock of various types of products, which are reordered frequently to meet customer demand. However, the company is currently facing issues with accurately predicting which products need to be restocked more urgently than others. To address this, the company has developed a prototype system that keeps track of daily sales records. Your task is to help the company analyze these records to predict restocking needs. You have been given data about the number of stores, the number of different product types, and daily sales records for each product at each store. Your goal is to determine how many units of each product type were sold across all stores during the recorded period. Input The first line contains two integers s and p (1 ≤ s ≤ 1000; 1 ≤ p ≤ 100) — the number of stores and the number of product types. The next s lines each contain p integers. The j-th integer in the i-th line represents the number of units sold of the j-th product at the i-th store over the recorded period. Output Output p space-separated integers, where the i-th integer represents the total units sold of the i-th product across all stores. Example Input 3 4 5 3 2 4 1 1 3 0 2 2 2 3 Output 8 6 7 7 Input 2 3 1 2 3 4 5 6 Output 5 7 9","solution":"def calculate_total_sales(s, p, sales_records): Calculate the total units sold of each product type across all stores. Args: s: int - number of stores. p: int - number of product types. sales_records: list of lists - each sublist contains p integers representing sales of each product type for a store. Returns: List of integers representing the total units sold of each product type across all stores. total_sales = [0] * p for record in sales_records: for i in range(p): total_sales[i] += record[i] return total_sales"},{"question":"You are given an array `arr` consisting of `n` integers. The task is to find the smallest positive integer `k` such that there exists some subarray of `arr` whose sum is equal to `k`. A subarray is a contiguous part of an array. For instance, in the array `[5, -1, 3]`, the subarray `[5, -1]` is valid but `[5, 3]` is not as they are not contiguous. If no such positive integer `k` exists, the function should return -1. # Input - The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. - For each test case, the first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains `n` space-separated integers `arr_i` (-1000 ≤ arr_i ≤ 1000). # Output - For each test case, print a single integer which is the smallest positive integer `k` such that there exists a subarray of `arr` whose sum is equal to `k`. # Example Input: ``` 3 5 1 2 3 4 5 4 -1 -2 3 4 6 1 -1 2 -2 3 -3 ``` Output: ``` 1 1 1 ``` # Note In the first test case: - The subarray `[1]` has a sum of `1`, which is the smallest positive integer. In the second test case: - The subarray `[3]` has a sum of `3`. In the third test case: - The subarray `[1]` and `[2]` meet the criteria of having a positive sum. The smallest of them is 1. # Constraints - Even though the input size is relatively manageable, you still need to consider an efficient algorithm to handle up to `100` test cases with `1000` elements each.","solution":"def smallest_positive_sum_subarray(t, test_cases): import sys INT_MAX = sys.maxsize results = [] for case in test_cases: n, arr = case smallest_pos_sum = INT_MAX for i in range(n): sum_ = 0 for j in range(i, n): sum_ += arr[j] if sum_ > 0: smallest_pos_sum = min(smallest_pos_sum, sum_) if smallest_pos_sum == INT_MAX: results.append(-1) else: results.append(smallest_pos_sum) return results # Sample input t = 3 test_cases = [ (5, [1, 2, 3, 4, 5]), (4, [-1, -2, 3, 4]), (6, [1, -1, 2, -2, 3, -3]) ] print(smallest_positive_sum_subarray(t, test_cases)) # Expected output: [1, 1, 1]"},{"question":"There is a rectangular grid with n rows and m columns. Some cells in this grid contain obstacles, while others are free. You want to find a path from the top-left corner (1,1) to the bottom-right corner (n,m) such that the path avoids obstacles and only moves right or down. Write a program to determine if such a path exists. If a path exists, find one such path and output it as a string of \'R\' and \'D\' characters indicating moves to the right and down respectively. If no path exists, output \\"NO\\". Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. Each of the next n lines contains m characters. The j-th character of the i-th line is either \'.\' (a free cell) or \'#\' (an obstacle). Output If a path exists, print \\"YES\\" on the first line. On the second line, print the path as a sequence of \'R\' and \'D\' characters. If there are multiple solutions, print any one of them. If no path exists, print \\"NO\\". Examples Input 3 3 ... .#. ... Output YES RRDD Input 3 3 ..# .#. ... Output YES DDRR Input 2 2 .. Output NO Note For the first sample, one possible path is \\"RRDD\\". For the second sample, one possible path is \\"DDRR\\". For the third sample, there is no path available from the top-left to the bottom-right due to obstacles.","solution":"def find_path(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' def dfs(x, y): if x == n - 1 and y == m - 1: return True if not is_valid(x, y): return False grid[x][y] = \'#\' # mark the cell as visited if y + 1 < m and dfs(x, y + 1): # move right path.append(\'R\') return True if x + 1 < n and dfs(x + 1, y): # move down path.append(\'D\') return True return False path = [] if dfs(0, 0): return \\"YESn\\" + \'\'.join(reversed(path)) else: return \\"NO\\" # Example of how to use the function with input parsing def grid_path(n, m, grid_lines): grid = [list(line) for line in grid_lines] return find_path(n, m, grid)"},{"question":"A company tracks the schedules of its employees using a series of time intervals during which each employee is busy. Each employee has multiple (possibly overlapping) intervals when they are occupied. You need to find the total amount of time during which at least one employee is busy. Write a function `totalBusyTime()` which takes two arguments. The first argument is an integer `n`, the number of employees. The second argument is a list of lists, `schedules`, where `schedules[i]` is a list of intervals corresponding to the time intervals when the i-th employee is busy. Each interval is represented as a tuple of two integers where the first integer is the start time and the second integer is the end time (inclusive). The function should return the total length of time during which at least one employee is busy. # Input: - `n`: an integer (1 ≤ n ≤ 1000) - `schedules`: a list of lists of tuples, where each tuple contains two integers (0 ≤ start < end ≤ 10^9). Each list corresponds to an employee\'s busy intervals. # Output: - An integer representing the total amount of time during which at least one employee is busy. # Example Input: ``` 3 [ [(1, 3), (6, 7)], [(2, 4)], [(2, 5), (9, 12)] ] ``` Output: ``` 8 ``` # Explanation: - Employee 1 is busy during intervals [1, 3] and [6, 7]. - Employee 2 is busy during interval [2, 4]. - Employee 3 is busy during intervals [2, 5] and [9, 12]. The total busy time is: - From time 1 to 5 (since there is overlapping time, it\'s counted once) - From time 6 to 7 - From time 9 to 12 Thus, the total busy time is ( (5-1) + (7-6) + (12-9) = 4 + 1 + 3 = 8 ) # Note: - Handle overlapping intervals appropriately to ensure time is not counted more than once.","solution":"def totalBusyTime(n, schedules): Returns the total amount of time during which at least one employee is busy. :param n: int, number of employees :param schedules: list of lists of tuples, each tuple contains two integers representing the start and end times (inclusive) :return: int, total length of time during which at least one employee is busy intervals = [] # Collect all intervals from all employees for emp_schedule in schedules: for interval in emp_schedule: intervals.append(interval) # Sort intervals by start time intervals.sort() total_time = 0 start, end = intervals[0] for current_start, current_end in intervals[1:]: if current_start <= end: # Merge intervals end = max(end, current_end) else: # Add non-overlapping interval\'s length total_time += end - start start, end = current_start, current_end # Add the last interval length total_time += end - start return total_time"},{"question":"You are a magician who is preparing for a great magic show. One of your most exciting tricks involves a deck of magical cards numbered from 1 to n, arranged in a specific order. Each card has a color: red, blue, or green. Because you want the trick to be flawless, you need to prepare the deck in such a way that no two consecutive cards have the same color. You have a deck of n cards, and an array of colors where each element is an integer from 1 to 3 (1 represents red, 2 blue, and 3 green). You are allowed to change the color of the cards, but each change has a cost. The cost of changing the color of a card is given in another array of the same length. Given the initial colors and the costs to change the colors, find the minimum cost required to arrange the deck so that no two consecutive cards have the same color. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of cards in the deck. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 3) — the initial colors of the cards. The third line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ 1000) — the cost to change the color of the i-th card. Output Output the minimum cost to arrange the deck such that no two consecutive cards have the same color. Examples Input 3 1 1 2 10 50 30 Output 10 Input 4 3 3 3 3 5 5 5 5 Output 10","solution":"def min_cost_to_rearrange_deck(n, colors, costs): Returns the minimum cost required to arrange the deck so that no two consecutive cards have the same color. if n == 1: return 0 # No need to change if there\'s only one card # Initialize dp arrays to track the min cost ending with each color dp_red = [0] * n dp_blue = [0] * n dp_green = [0] * n # Set up the first card\'s cost dp_red[0] = 0 if colors[0] == 1 else costs[0] dp_blue[0] = 0 if colors[0] == 2 else costs[0] dp_green[0] = 0 if colors[0] == 3 else costs[0] # Fill the dp arrays based on the previous values for i in range(1, n): dp_red[i] = min(dp_blue[i-1], dp_green[i-1]) + (0 if colors[i] == 1 else costs[i]) dp_blue[i] = min(dp_red[i-1], dp_green[i-1]) + (0 if colors[i] == 2 else costs[i]) dp_green[i] = min(dp_red[i-1], dp_blue[i-1]) + (0 if colors[i] == 3 else costs[i]) # The minimum cost is the minimum of the last values in dp arrays return min(dp_red[n-1], dp_blue[n-1], dp_green[n-1])"},{"question":"Your task is to write a program that finds and prints all the pairs of elements in a sequence of integers whose sum is equal to a given target value. Input The first line of input contains an integer n (1 ≤ n ≤ 100), denoting the number of elements in the sequence. The following n lines each contain one integer ai (1 ≤ ai ≤ 1000), representing the elements of the sequence. The last line contains the target sum value (1 ≤ target ≤ 2000). Output Print each pair of elements (ai, aj) from the sequence such that ai + aj equals the target value. Pairs should be presented in sorted order (first element of the pair is less than or equal to the second element) and each pair should appear only once. If no such pairs exist, print \\"No pairs found\\". Example Input 5 1 5 7 1 5 6 Output 1 5 1 5","solution":"def find_pairs_with_sum(n, elements, target): Finds and prints all pairs of elements in the list that sum up to the target value. Args: - n (int): number of elements in the list. - elements (List[int]): the list of integers. - target (int): the target sum value. pairs = set() elements.sort() seen = {} for x in elements: diff = target - x if diff in seen: pair = (min(x, diff), max(x, diff)) pairs.add(pair) seen[x] = True if not pairs: print(\\"No pairs found\\") else: for pair in sorted(pairs): print(pair[0], pair[1]) # Assuming we are calling this function with the appropriate parameters def main(): n = int(input()) elements = [int(input()) for _ in range(n)] target = int(input()) find_pairs_with_sum(n, elements, target)"},{"question":"In a parallel universe, there is a game played in a labyrinth consisting of N rooms connected by M corridors. Each room has a single light bulb that can either be on or off. Your task is to find out if you can start in a specified room, traverse through all corridors exactly once, and return to the starting room, turning on the light bulbs in the rooms you visit. Each corridor connects exactly two rooms, and you are given the corridors as pairs of integers (u, v), indicating a corridor connecting room u to room v. input The first line contains two integers, N and M. The following M lines each contain two integers u and v, representing a corridor connecting room u to room v. output Output \\"Yes\\" if it is possible to start in any room, traverse through all corridors exactly once, and return to the starting room, turning on the light bulbs in the rooms you visit (forming an Eulerian circuit). Otherwise, output \\"No\\". Constraints * 1 leq N leq 100,000 * 1 leq M leq 200,000 * 1 leq u, v leq N Example Input 4 4 1 2 2 3 3 4 4 1 Output Yes Explanation: There is an Eulerian circuit in the graph: 1 -> 2 -> 3 -> 4 -> 1.","solution":"def can_form_eulerian_circuit(N, M, corridors): from collections import defaultdict # If the number of corridors is zero, check if we have a single room and otherwise no Eulerian circuit. if M == 0: return \\"Yes\\" if N == 1 else \\"No\\" # Building the adjacency list and counting degree of each node graph = defaultdict(list) degree_count = defaultdict(int) for u, v in corridors: graph[u].append(v) graph[v].append(u) degree_count[u] += 1 degree_count[v] += 1 # Check if all nodes with non-zero degree are connected using DFS visited = set() def dfs(node): stack = [node] while stack: curr = stack.pop() for neighbor in graph[curr]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) # Find a starting node with a non-zero degree start_node = None for node in range(1, N+1): if degree_count[node] > 0: start_node = node break if start_node is None: return \\"No\\" visited.add(start_node) dfs(start_node) # Check if all nodes with non-zero degree were visited for node in range(1, N+1): if degree_count[node] > 0 and node not in visited: return \\"No\\" # Check if all degrees are even for node in range(1, N+1): if degree_count[node] % 2 != 0: return \\"No\\" return \\"Yes\\""},{"question":"You are given a string s and a pattern p, both of which consist of lowercase letters only. Your task is to determine whether the pattern p can be found as a contiguous substring within the string s. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next 2t lines contain two strings s and p (1 ≤ |s|, |p| ≤ 100). Output For each test case output * YES if the pattern p is found as a contiguous substring of the string s. * NO if the pattern p is not found. Example Input 5 hello llo world or algorithm algo test ttte sequence que Output YES YES YES NO YES","solution":"def find_pattern(t, test_cases): results = [] for i in range(t): s, p = test_cases[i] if p in s: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Detective Watson is analyzing a series of locations connected by pathways in a small town. He needs to ensure that all locations can be reached from any other location. The existing pathways are undirected. In a rush to solve the case, Watson needs to compute the minimum number of pathways to add in order to connect all locations. Each pathway between two locations is bidirectional, meaning it can be traversed in both directions. Given the number of locations and some existing pathways, calculate how many additional pathways Watson needs to add to ensure all locations are connected directly or indirectly. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n(n-1)/2) — the number of locations and the number of existing pathways. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting a direct pathway between location u and location v. It is guaranteed that no two paths between the same pair of locations exist. Output Print a single integer — the minimum number of additional pathways needed to ensure all locations are connected. Example Input 4 1 2 3 Output 2 Input 5 2 1 2 4 5 Output 2 Note In the first example, there are four locations and only one existing pathway between locations 2 and 3. Watson needs to add 2 more pathways to ensure all locations are connected (e.g., between 1 and 2, and between 3 and 4). In the second example, there are five locations and two existing pathways: one between 1 and 2 and another between 4 and 5. Watson needs to add 2 more pathways to ensure all locations are connected (e.g., between 1 and 4 and between 3 and 5).","solution":"def minimum_additional_pathways(n, m, edges): Returns the minimum number of pathways needed to ensure all locations are connected. from collections import defaultdict, deque def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return visited if n == 1: return 0 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) remaining_locations = set(range(1, n + 1)) components = 0 while remaining_locations: start = remaining_locations.pop() visited_set = bfs(start) remaining_locations -= visited_set components += 1 return components - 1 # Minimum pathways needed is one less than the number of connected components."},{"question":"Alice and Bob love playing games with strings and numbers. One day, they created a new game called \\"Digit Sum Game.\\" The rules are simple: - Alice gives Bob a string `s` consisting of digits (\'0\'-\'9\'). - Alice also gives Bob a number `k`. - Bob needs to find the minimal digit sum among all possible substrings of `s` which are exactly `k` digits long. A substring of a string `s` is a sequence of consecutive characters from `s`. Write a function `minimal_digit_sum(s: str, k: int) -> int` that takes the string `s` and the integer `k` as input, and returns the minimal digit sum of any substring of `s` that is exactly `k` digits long. # Input - A string `s` of length `n` (1 ≤ n ≤ 10^5) consisting of digits (\'0\'-\'9\'). - An integer `k` (1 ≤ k ≤ n). # Output - An integer representing the minimal digit sum of any substring of `s` that is exactly `k` digits long. # Examples Example 1 **Input:** ``` s = \\"123456\\" k = 2 ``` **Output:** ``` 3 ``` **Explanation:** Substrings of length 2 are \\"12\\", \\"23\\", \\"34\\", \\"45\\", \\"56\\". Their sums are 1+2=3, 2+3=5, 3+4=7, 4+5=9, 5+6=11. The minimal sum is 3. Example 2 **Input:** ``` s = \\"1111\\" k = 3 ``` **Output:** ``` 3 ``` **Explanation:** Substrings of length 3 are \\"111\\", \\"111\\". Their sums are 1+1+1=3, 1+1+1=3. The minimal sum is 3. Example 3 **Input:** ``` s = \\"987654\\" k = 1 ``` **Output:** ``` 4 ``` **Explanation:** There are single-digit substrings of length 1: \\"9\\", \\"8\\", \\"7\\", \\"6\\", \\"5\\", \\"4\\". The minimal sum is 4. # Constraints - You must write an optimal solution which runs in linear time O(n).","solution":"def minimal_digit_sum(s, k): Finds the minimal digit sum among all possible substrings of s that are exactly k digits long. Args: s: String of digits. k: Length of substrings to be considered. Returns: Minimal digit sum of any substring of s which is exactly k digits long. n = len(s) if n < k: return -1 # This case is invalid based on problem constraints (1 ≤ k ≤ n) # Initialize the sum of the first window of size k current_sum = sum(int(s[i]) for i in range(k)) min_sum = current_sum for i in range(k, n): current_sum += int(s[i]) - int(s[i - k]) min_sum = min(min_sum, current_sum) return min_sum"},{"question":"You are given two arrays, `A` and `B`, consisting of `n` non-negative integers each. You need to perform addition modulo `m` on these arrays. Specifically, for each index `i` (0 ≤ i < n), you should calculate (A[i] + B[i]) % m. Your task is to write a function that takes in two lists of integers `A` and `B`, and an integer `m`, and returns a new list containing the results of the addition modulo `m` for each pair of elements from A and B. # Input Format - The first line contains an integer `t` (1 ≤ t ≤ 10^5) — the number of test cases. - The first line of each test case contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the arrays. - The second line of each test case contains `n` non-negative integers separated by spaces, representing the array `A`. - The third line of each test case contains `n` non-negative integers separated by spaces, representing the array `B`. - The fourth line of each test case contains an integer `m` (1 ≤ m ≤ 10^9) — the modulus value. # Output Format For each test case, output a single line containing `n` space-separated integers representing the result of `(A[i] + B[i]) % m` for each index `i` from 0 to n-1. # Example Input: ``` 2 3 1 2 3 4 5 6 5 4 10 20 30 40 40 30 20 10 100 ``` Output: ``` 0 2 4 50 50 50 50 ``` # Note In the first test case: - `A` is `[1, 2, 3]` - `B` is `[4, 5, 6]` - `m` is `5` The results are: - ( (1 + 4) % 5 = 5 % 5 = 0 ) - ( (2 + 5) % 5 = 7 % 5 = 2 ) - ( (3 + 6) % 5 = 9 % 5 = 4 ) In the second test case: - `A` is `[10, 20, 30, 40]` - `B` is `[40, 30, 20, 10]` - `m` is `100` The results are: - ( (10 + 40) % 100 = 50 ) - ( (20 + 30) % 100 = 50 ) - ( (30 + 20) % 100 = 50 ) - ( (40 + 10) % 100 = 50 )","solution":"def addition_modulo(t, test_cases): results = [] for i in range(t): n, A, B, m = test_cases[i] result = [(A[j] + B[j]) % m for j in range(n)] results.append(result) return results"},{"question":"A popular theme park has a ferris wheel ride with a unique reservation system. Each passenger is assigned to a specific cabin based on their arrival order. However, for this system to work efficiently, it needs to follow certain criteria: - The ferris wheel has `n` cabins. - Each passenger arrives at a specific time `t` and wishes to leave after `d` hours. - All passengers have different arrival and departure times. - Passengers can reserve a cabin if it is available throughout the duration of their stay. - The system must ensure that each cabin is allocated in a way such that no two passengers\' timings overlap in a single cabin. Given the number of passengers and their arrival and departure times, determine if each passenger can be assigned a cabin without any overlaps. Input The first line contains an integer `n` (1 ≤ n ≤ 100) representing the number of cabins available on the ferris wheel. The second line contains an integer `m` (1 ≤ m ≤ 1000) representing the number of passengers. The next `m` lines contain two integers each, `t` and `d` (0 ≤ t < t + d ≤ 1000), where `t` is the arrival time and `d` the duration the passenger wishes to stay on the ride. Output Output \\"YES\\" if all passengers can be assigned to cabins without overlaps, otherwise output \\"NO\\". Examples Input 3 4 0 2 2 3 4 1 1 3 Output YES Input 2 3 0 5 2 4 6 2 Output NO","solution":"def can_allocate_cabins(n, m, passenger_times): Determines if all passengers can be assigned to cabins without overlaps. Parameters: n (int): Number of available cabins. m (int): Number of passengers. passenger_times (list): List of tuples with arrival time and duration for each passenger. Returns: str: \\"YES\\" if all passengers can be assigned to cabins without overlap, otherwise \\"NO\\". # Convert passenger times from arrival and duration to start and end times intervals = [(t, t + d) for t, d in passenger_times] # Sort intervals by start time intervals.sort() # Min-heap to keep track of end times for active cabins from heapq import heappop, heappush active_cabins = [] for start, end in intervals: # Remove cabins that have been vacated while active_cabins and active_cabins[0] <= start: heappop(active_cabins) # Add current passenger\'s end time to the heap heappush(active_cabins, end) # If the number of active cabins exceeds the available cabins, return \\"NO\\" if len(active_cabins) > n: return \\"NO\\" return \\"YES\\" # Example usage: # n = 3 # m = 4 # passenger_times = [(0, 2), (2, 3), (4, 1), (1, 3)] # print(can_allocate_cabins(n, m, passenger_times)) # Output: \\"YES\\""},{"question":"Anna is studying network packet routing algorithms and is interested in developing her version of an efficient packet prioritization system. Each packet in the system has a priority and a length of time it can wait in the queue before being processed. The priority queue accepts packets with varying priorities and maximum wait times, and it dequeues the packet with the highest priority that must be processed next. If there are multiple packets with the same highest priority, the one with the smallest maximum wait time is dequeued first. Anna needs your help in implementing this system. You\'ll be given a series of packet insertions and dequeue operations. You must maintain the queue and process each operation accordingly. Input The input starts with an integer n, the number of operations (1 ≤ n ≤ 10^5). Each of the following n lines represents an operation: - \\"INSERT p t\\", which means a packet with priority p (1 ≤ p ≤ 10^9) and maximum wait time t (1 ≤ t ≤ 10^9) is inserted into the queue. - \\"PROCESS\\", which means the highest priority packet that has been waiting the longest needs to be processed and removed from the queue. Output For each \\"PROCESS\\" operation, output the priority and maximum wait time of the processed packet. If the queue is empty when a \\"PROCESS\\" operation is attempted, output \\"EMPTY\\". Examples Input 7 INSERT 1 20 INSERT 2 15 PROCESS PROCESS INSERT 2 10 INSERT 3 5 PROCESS Output 2 15 1 20 3 5 Input 5 PROCESS INSERT 1 5 PROCESS PROCESS INSERT 2 10 Output EMPTY 1 5 EMPTY","solution":"import heapq class PriorityQueue: def __init__(self): self.heap = [] self.counter = 0 # This acts like a timestamp to manage FIFO for packets with the same p and t def insert(self, p, t): heapq.heappush(self.heap, (-p, t, self.counter)) self.counter += 1 def process(self): if not self.heap: return \\"EMPTY\\" p, t, _ = heapq.heappop(self.heap) return (-p, t) def packet_processing(operations): pq = PriorityQueue() results = [] for operation in operations: if operation.startswith(\\"INSERT\\"): _, p, t = operation.split() pq.insert(int(p), int(t)) elif operation == \\"PROCESS\\": result = pq.process() if result == \\"EMPTY\\": results.append(result) else: results.append(f\\"{result[0]} {result[1]}\\") return results"},{"question":"You are given a list of integers representing the scores of students in a class. You want to perform a series of operations where each operation consists of selecting a contiguous subarray of scores and calculating the sum of that subarray. You have q queries, and each query provides the indices of the selected subarray. Your task is to answer each query with the sum of the scores in the specified subarray. Input The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of students in the class. The second line contains n integers s_1, s_2, ..., s_n (−10^4 ≤ s_i ≤ 10^4), where s_i is the score of the i-th student. The third line contains one integer q (1 ≤ q ≤ 10^4) — the number of queries. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) — the indices (1-based) of the start and end of the subarray for each query. Output Print q integers, the i-th of them should be the sum of the scores in the subarray defined by the i-th query. Example Input 8 4 -1 2 3 -6 5 8 -2 3 1 4 3 5 4 8 Output 8 -1 8 Note Consider the first example. For the first query, the subarray from indices 1 to 4 is [4, -1, 2, 3], and its sum is 8. For the second query, the subarray from indices 3 to 5 is [2, 3, -6], and its sum is -1. For the third query, the subarray from indices 4 to 8 is [3, -6, 5, 8, -2], and its sum is 8.","solution":"def calculate_subarray_sums(n, scores, queries): Calculate the sum of subarrays as defined by the queries. Args: n : int : number of students (length of scores) scores : list of int : list of scores queries : list of tuple of int : queries where each query is (l, r) (1-based indices) Returns: list of int : list of sums for each query # Prepare prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + scores[i - 1] # Answer each query results = [] for l, r in queries: subarray_sum = prefix_sums[r] - prefix_sums[l - 1] results.append(subarray_sum) return results"},{"question":"A company is monitoring its servers\' status logs to ensure all servers are running smoothly. The status log of each server is represented as a string consisting of the characters \'U\' (for up) and \'D\' (for down). For instance, if a server log is \\"UUDDUU\\", it means the server was up for the first two intervals, down for the next two intervals, and up again for the remaining two intervals. The system\'s reliability is determined by finding the longest continuous period during which the server was up. You are tasked with writing a program to compute this length of the longest continuous \'U\' sequence from each log. Your program should handle multiple server logs and identify the longest continuous \'U\' sequence for each one. All of the logs will be processed until an empty string is provided, which indicates the end of the input. Input - There are several test cases. For each test case, the server log is given as a single string consisting of \'U\' and \'D\' characters. - Input terminates with an empty string. Output - For each test case, output the length of the longest continuous \'U\' sequence in the log. Example Input UUDDUU UUUUU DUDUDU UUUDDUUU D Output 2 5 1 3 0 The first log \\"UUDDUU\\" has the longest \'U\' sequence of length 2. The second log \\"UUUUU\\" has the longest \'U\' sequence of length 5. The third log \\"DUDUDU\\" has only single \'U\' sequences, so the longest is 1. The fourth log \\"UUUDDUUU\\" has the longest \'U\' sequence of length 3. The fifth log \\"D\\" has no \'U\' sequence, so the longest is 0.","solution":"def longest_up_sequence(server_logs): This function takes a list of server logs (each log is a string of \'U\' and \'D\') and returns a list of the lengths of the longest continuous \'U\' sequence for each log. Parameters: server_logs (list of str): A list of server logs. Returns: list of int: A list containing the lengths of the longest continuous \'U\' sequence for each log. results = [] for log in server_logs: max_length = 0 current_length = 0 for char in log: if char == \'U\': current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 results.append(max_length) return results"},{"question":"Problem John has an array of positive integers. He is allowed to choose any two elements from the array and replace them with their sum. John can repeat this operation as many times as he wants. He wants to minimize the difference between the maximum and the minimum element in the final array configuration. Find the minimum possible difference between the maximum and the minimum element John can achieve. Constraints * 2 ≤ size of array ≤ 100 * 1 ≤ each element in the array ≤ 1000 Input The input is given in the following format. n array elements The first line is given one integer n, the size of the array. The second line contains n positive integers separated by spaces, representing the elements of the array. Output Output the minimum possible difference between the maximum and the minimum elements John can achieve. Examples Input 4 4 1 7 3 Output 1 Input 3 10 20 30 Output 0","solution":"def minimize_difference(n, arr): Returns the minimum possible difference between the maximum and the minimum element of the array. # If array already has only one element, the difference is 0 if n == 1: return 0 # John can ultimately make all elements the same by repeated operation. # The minimum difference is therefore zero. return 0 # Example usage print(minimize_difference(4, [4, 1, 7, 3])) # Expected output: 0 print(minimize_difference(3, [10, 20, 30])) # Expected output: 0"},{"question":"Carla is a passionate art student who loves to create different shapes with colored paper. Recently, she got interested in creating unique symmetric patterns. She enjoys making patterns where she arranges smaller squares in the shape of a rhombus with the largest row of smaller squares in the middle and reduces the number of squares in each subsequent row toward the top and bottom. Each smaller square in the pattern can be of a different color. Given the size of the largest row, can you help Carla by writing a program to generate a symmetric rhombus pattern using letters to represent different colors? The color of the squares in the largest row should proceed alphabetically from \'A\' onward. Input The input contains a single integer n (1 ≤ n ≤ 26) - the number of squares in the largest row of the rhombus. Output Print the rhombus pattern with n rows above the central largest row and n rows below it, using letters from \'A\' onward to represent different colors. Each row should be centered with respect to the largest row. Examples Input 3 Output A B B C C C B B A Input 5 Output A B B C C C D D D D E E E E E D D D D C C C B B A Explanation For `n=3`, the largest row in the rhombus has 3 squares in it represented by letter `C`. The row above it has 2 squares represented by letter `B`, and the topmost and bottommost rows have 1 square represented by letter `A`. The pattern is symmetric around the center row. The output rhombus should be centered properly with spaces.","solution":"def generate_rhombus(n): Generates a symmetric rhombus pattern using letters to represent different colors. Parameters: n: int - the number of squares in the largest row of the rhombus. Returns: str - the rhombus pattern as a single string with lines separated by newlines. output = [] alphabet = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" # Generate the top half and the middle row of the rhombus for i in range(n): line = \\" \\" * (n - i - 1) + \\" \\".join(alphabet[i] * (i + 1)) output.append(line) # Generate the bottom half of the rhombus by mirroring the top half for i in range(n-2, -1, -1): line = \\" \\" * (n - i - 1) + \\" \\".join(alphabet[i] * (i + 1)) output.append(line) return \\"n\\".join(output)"},{"question":"You are managing a rectangle garden of size W x H, where W is the width, and H is the height. Recently, some rectangular flower beds of varying sizes have been introduced into the garden. You are tasked with determining the maximum number of non-overlapping rectangular flower beds that can be placed into the garden. Each flower bed has a given width and height and can be placed anywhere within the garden as long as it does not overlap with another flower bed or extend outside the boundaries of the garden. Input: The first line contains two space-separated integers W and H (1 ≤ W, H ≤ 1000), representing the width and height of the garden. The second line contains one integer N (1 ≤ N ≤ 100), representing the number of flower beds. The next N lines each contain two space-separated integers wi and hi (1 ≤ wi ≤ W, 1 ≤ hi ≤ H), representing the width and height of the ith flower bed. Output: Print a single integer representing the maximum number of non-overlapping rectangular flower beds that can be placed in the garden. Example: Input: 8 8 3 3 3 4 4 2 2 Output: 3 Input: 5 5 2 3 4 2 2 Output: 2","solution":"def max_flower_beds(W, H, N, flower_beds): flower_beds.sort(key=lambda x: x[0] * x[1]) grid = [[False] * W for _ in range(H)] count = 0 def can_place(x, y, wi, hi): if x + wi > W or y + hi > H: return False for i in range(x, x + wi): for j in range(y, y + hi): if grid[j][i]: return False return True def place_bed(x, y, wi, hi): for i in range(x, x + wi): for j in range(y, y + hi): grid[j][i] = True for wi, hi in flower_beds: placed = False for y in range(H): if placed: break for x in range(W): if can_place(x, y, wi, hi): place_bed(x, y, wi, hi) count += 1 placed = True break return count"},{"question":"Write an algorithm to find all possible permutations of a given string where the characters are unique. The permutations should be sorted in lexicographical order. Input The input consists of a single string `S`, where `1 <= |S| <= 8`. Each character in the string is guaranteed to be unique. Output Print all possible permutations of the string `S`, sorted in lexicographical order. Each permutation should be printed on a new line. Example Input abc Output abc acb bac bca cab cba Explanation The input string \'abc\' has 6 permutations in lexicographical order. Each permutation is generated and printed on a new line. Note - Ensure the output is ordered lexicographically. - You can use any programming language to solve this problem as long as the output format matches the requirements.","solution":"from itertools import permutations def generate_permutations(s): Returns all possible permutations of string s in lexicographical order. perm = sorted([\'\'.join(p) for p in permutations(s)]) return perm"},{"question":"Jim is planning to build a custom shelving unit in the shape of a right triangle. He chooses points A, B, and C as the vertices of the triangle but only records their coordinates on a piece of paper. Unfortunately, Jim\'s paper was damaged, and now he has only some of the vertices or the lengths of the sides written down. Jim wonders if there is enough information to compute the area of the triangle. Input The first line of the input contains a single integer k (1 ≤ k ≤ 3) — the number of pieces of information remaining on Jim\'s paper. Each of the following k lines either contains two integers xi and yi ( - 1000 ≤ xi, yi ≤ 1000), representing the coordinates of a vertex, or one integer si (1 ≤ si ≤ 2000), representing the length of one of the two legs of the triangle. Vertices are given in an arbitrary order, and side lengths are identified by the value of the side. Output Print the area of the triangle if it can be uniquely determined. Otherwise, print -1. Examples Input 2 3 2 5 Output 5.0 Input 1 7 Output -1 Note In the first sample, one vertex and one side length are given. This information is sufficient only when we assume the vertex given is the right-angle vertex, and the side length corresponds to one of the legs of the triangle perpendicular to each other. Thus, the area can be computed easily. In the second sample, only one side length is provided, which is not sufficient to determine the area of the triangle as we don\'t know any vertex to compute the corresponding height or base.","solution":"def calculate_area(k, info): vertices = [] sides = [] for item in info: if len(item) == 2: vertices.append(item) else: sides.append(item[0]) if len(vertices) == 1 and len(sides) == 1: # We assume the given vertex is the right-angle vertex # and the given side length is one of the legs side = sides[0] return 0.5 * side * side elif len(sides) == 2: # We straight calculate the area using two legs of the triangle side_a, side_b = sides return 0.5 * side_a * side_b else: return -1"},{"question":"Dr. Dolittle has a busy day ahead with multiple animals scheduled for multiple visits, some of them being critical. Each animal, when it arrives, likes to announce its importance. The animals\' importance is represented by an integer value. Dr. Dolittle needs your help to identify the k most important animals in the queue. The queue evolves as follows: each time an animal is examined, it leaves the queue, announces its importance and then immediately joins the queue again if it hasn\'t completed its required visits. The doctor knows the importance of each animal and the exact number of times each needs to visit. Based on this information, your job is to determine which k animals have the highest importance values at the time all have been examined exactly once. Input The first line of input contains two integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ 1014). The next line contains n space-separated integers representing the importance values I1, I2, ..., In (1 ≤ Ii ≤ 109). The third line contains n space-separated integers representing the required number of visits V1, V2, ..., Vn (1 ≤ Vi ≤ 109). Output Output the k most important animals\' importance values in descending order. If there are fewer than k unique importance values, print all of them. Example Input 4 3 5 8 2 6 3 1 2 4 Output 8 6 5 Explanation: In the example, the queue starts with the importance values: * {5, 8, 2, 6} After each animal is examined once, the queue would be sorted by how many more visits they need if considering importance, showing the most important should stay in the queue longer: * {8, 6, 5} These values are printed, indicating the k (3) most important animals.","solution":"def top_k_importance(n, k, importance, visits): Given the number of animals, the number of important animals needed, the importance values, and the required number of visits for each animal, find the k most important animals. Parameters: n (int): number of animals k (int): number of most important animals needed importance (list of int): importance values of each animal visits (list of int): required number of visits for each animal Returns: list of int: k most important animals\' importance values in descending order import heapq # Create a list of tuples (importance, visits) for each animal animals = [(importance[i], visits[i]) for i in range(n)] # Sort the animals based on importance in descending order animals.sort(reverse=True, key=lambda x: x[0]) # Extract the importance values importance_values = [animal[0] for animal in animals] # Get the k most important values, considering the case when k is bigger than the number of animals top_k_importance_values = importance_values[:min(k, n)] return top_k_importance_values"},{"question":"You are given an array of n integers. You need to find the \\"beauty\\" of every subarray of the given array. The \\"beauty\\" of a subarray is defined as the number of distinct prime numbers that are present in that subarray. A prime number is a number that has no divisors other than 1 and itself. A subarray is a contiguous subset of the original array. For each subarray, count the number of distinct primes in it and output it. Write a function to solve this problem and print the results in the specified format. Input The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers elements a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the elements of the array. Output For each subarray of the array, print its beauty (the number of distinct prime numbers in it). Example Input 5 2 3 4 5 6 Output 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Explanation: - The subarrays of the array [2, 3, 4, 5, 6] are: 1. [2] 2. [3] 3. [4] 4. [5] 5. [6] 6. [2, 3] 7. [3, 4] 8. [4, 5] 9. [5, 6] 10. and so on... The beauty of each of these subarrays, respectively, is: 1. 1 (2 is the only prime) 2. 1 (3 is the only prime) 3. 0 (4 is not a prime) 4. 1 (5 is the only prime) 5. 0 (6 is not a prime) 6. 2 (both 2 and 3 are primes) 7. 1 (3 is the only prime in [3, 4]) 8. 1 (5 is the only prime in [4, 5]) 9. 1 (5 is the only prime in [5, 6]) This continues for all possible subarrays. To compute the results efficiently, consider using a sieve method to precompute primes and a sliding window or other appropriate algorithm for subarray processing.","solution":"def sieve_of_eratosthenes(max_num): Generate a list of primes up to max_num (inclusive) is_prime = [True] * (max_num + 1) p = 2 while p * p <= max_num: if is_prime[p]: for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 is_prime[0] = is_prime[1] = False # 0 and 1 are not primes return [p for p in range(max_num + 1) if is_prime[p]] def find_beauty_of_subarrays(a): Finds the beauty of each subarray of the given array \'a\' where beauty is defined as the number of distinct prime numbers in the subarray. max_num = max(a) # maximum number in the array \'a\' primes = set(sieve_of_eratosthenes(max_num)) # Store beauty of each subarray results = [] n = len(a) for i in range(n): unique_primes = set() for j in range(i, n): if a[j] in primes: unique_primes.add(a[j]) results.append(len(unique_primes)) return results"},{"question":"In a sequence of whitespace-separated words, a word is considered \\"unique\\" if it appears exactly once in the sequence. Given a sequence of words, find the longest unique word from the sequence. If there are multiple longest unique words of the same length, return the one that appears first in the sequence. If there are no unique words, return an empty string. Input The first line contains a sequence of whitespace-separated words. Each word consists of lowercase English letters only and the total length of the sequence does not exceed 1000 characters. Output Print the longest unique word. If there are multiple longest unique words of the same length, print the one that appears first. If there are no unique words, print an empty string. Examples Input apple banana kiwi apple orange banana Output orange Input one two three four five six seven eight nine ten eleven Output eleven Input repeat repeat repeat Output","solution":"def longest_unique_word(sequence): Finds the longest unique word in a sequence of words. words = sequence.split() word_count = {} # Count the frequency of each word for word in words: word_count[word] = word_count.get(word, 0) + 1 # Find the longest unique word longest_word = \\"\\" for word in words: if word_count[word] == 1: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"You are given an m x n 2D grid initialized with three possible values. - -1 represents a wall or an obstacle. - 0 represents a gate. - INF represents an empty room. We want to fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, that room should remain filled with INF. A gate can be reached in 1 step from any of its 4 adjacent cells, north, east, south, and west (0 <= i < m, 0 <= j < n, for 1 ≤ m, n ≤ 10^5). Write a function that takes a grid and returns the modified grid with distances to the nearest gate filled in for each empty room. You can assume that there will be at least one gate in the input grid. Input - A 2D list grid of size m x n containing -1, 0, or INF. Output - Return the modified grid after filling the shortest distance from each empty room to the nearest gate. Example Input: [ [INF, -1, 0, INF], [INF, INF, INF, -1], [INF, -1, INF, -1], [0, -1, INF, INF] ] Output: [ [3, -1, 0, 1], [2, 2, 1, -1], [1, -1, 2, -1], [0, -1, 3, 4] ] Explanation The function fills each empty room with the distance to the nearest gate (0). Rooms with walls (-1) and gates (0) remain unchanged. If an empty room cannot reach any gate, it stays as INF. Note - BFS (Breadth-First Search) is a suitable algorithm for this problem due to its ability to explore shortest paths in an unweighted grid.","solution":"import collections def walls_and_gates(rooms): if not rooms or not rooms[0]: return rooms m, n = len(rooms), len(rooms[0]) queue = collections.deque() # Collect all gates\' positions for i in range(m): for j in range(n): if rooms[i][j] == 0: queue.append((i, j)) while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: new_x, new_y = x + dx, y + dy if 0 <= new_x < m and 0 <= new_y < n and rooms[new_x][new_y] == float(\'inf\'): rooms[new_x][new_y] = rooms[x][y] + 1 queue.append((new_x, new_y)) return rooms"},{"question":"Farmer John\'s cows have become competitive and want to participate in the annual Cow-lympics, which includes rope skipping as one of the events. Farmer John has a single rope and some cows standing in a line. He needs to decide which cows should be selected for the event so that all selected cows can jump the rope together without any overlaps. The cows are numbered from 1 to n, and they have different heights. The height of the ith cow is given by hi. The rope has a maximum allowable height difference d within which all selected cows should fit to avoid any accidents during the Cow-lympics. Help Farmer John to choose the largest possible group of consecutive cows so that the difference in height between the shortest and the tallest cow in the selected group is less than or equal to d. If there are multiple such segments of maximum length, any one of them can be considered. Input The first line of the input contains two integers n and d (1 ≤ n ≤ 100 000, 0 ≤ d ≤ 1 000 000) — the number of cows in the line and the maximum allowable height difference. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1 000 000) — the height of each cow in line. Output Print the maximum number of consecutive cows that can be selected such that the difference in height between the tallest and the shortest cow in the selected group is ≤ d. Examples Input 5 3 1 4 6 8 2 Output 2 Input 8 4 3 5 8 6 7 2 4 1 Output 4 Input 6 0 7 7 7 7 7 7 Output 6 Note In the first sample, Farmer John can choose cows 1 and 2. The height difference is |4 - 1| = 3, which is equal to d. In the second sample, a possible selection could be cows 2 to 5, with heights 5, 8, 6, and 7. The height difference is |8 - 5| = 3, which is less than or equal to d. Another selection of the same length would be cows 3 to 6. In the third sample, all cows have the same height of 7, so the height difference is 0. Therefore, the whole group of 6 cows can be selected.","solution":"def max_consecutive_cows(n, d, heights): Returns the maximum number of consecutive cows that can be selected such that the difference in height between the tallest and the shortest cow in the selected group is less than or equal to d. :param n: Number of cows :param d: Maximum allowable height difference :param heights: List of cow heights :return: Maximum number of consecutive cows satisfying the condition # Initialize variables max_len = 0 l = 0 # left pointer of the sliding window for r in range(n): # right pointer of the sliding window window = heights[l:r+1] while max(window) - min(window) > d: l += 1 window = heights[l:r+1] max_len = max(max_len, r - l + 1) return max_len"},{"question":"You are tasked with the implementation of a function that mimics the process of text justification in a text editor. Given a list of words and a width limit (maximum number of characters in each line), your function should format the text such that: 1. It is fully justified, i.e., each line should contain as many words as possible, and space should be distributed evenly between words in each line. 2. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will get more spaces than the ones on the right. 3. The last line should be left-justified and no extra space is inserted between words. Your goal is to implement the function `justify_text(words: List[str], max_width: int) -> List[str]` that takes a list of words and a width limit (max_width) and returns a list of strings where each string represents a fully justified line of text. Input format: * `words` (a list of `n` words where 1 ≤ n ≤ 1000, and 1 ≤ len(words[i]) ≤ 20) * `max_width` (an integer where 1 ≤ max_width ≤ 100) Output: Return a list of strings where each string contains a fully justified line of text. Examples: Input words = [\\"This\\", \\"is\\", \\"an\\", \\"example\\", \\"of\\", \\"text\\", \\"justification.\\"] max_width = 16 Output [ \\"This is an\\", \\"example of text\\", \\"justification. \\" ] Input words = [\\"What\\",\\"must\\",\\"be\\",\\"acknowledgment\\",\\"shall\\",\\"be\\"] max_width = 16 Output [ \\"What must be\\", \\"acknowledgment \\", \\"shall be \\" ] Input words = [\\"Science\\",\\"is\\",\\"what\\",\\"we\\",\\"understand\\",\\"well\\",\\"enough\\",\\"to\\",\\"explain\\",\\"to\\",\\"a\\",\\"computer.\\",\\"Art\\",\\"is\\",\\"everything\\",\\"else\\",\\"we\\",\\"do\\"] max_width = 20 Output [ \\"Science is what we\\", \\"understand well\\", \\"enough to explain to\\", \\"a computer. Art is\\", \\"everything else we\\", \\"do \\" ]","solution":"from typing import List def justify_text(words: List[str], max_width: int) -> List[str]: res, curr, num_of_letters = [], [], 0 for word in words: if num_of_letters + len(word) + len(curr) > max_width: for i in range(max_width - num_of_letters): curr[i % (len(curr) - 1 or 1)] += \' \' res.append(\'\'.join(curr)) curr, num_of_letters = [], 0 curr += [word] num_of_letters += len(word) return res + [\' \'.join(curr).ljust(max_width)]"},{"question":"You are given an array of integers representing the stock prices of a company over N consecutive days. Your task is to find the maximum profit that can be achieved by buying and selling the stock at most twice. A new transaction can only start after the previous transaction is complete (i.e., you must sell before you can buy again). For example, consider the following array representing the stock prices over 6 days. [3, 3, 5, 0, 0, 3, 1, 4] The maximum profit that can be achieved by buying and selling the stock twice is 6. One way to achieve this profit is to buy on day 4 (0) and sell on day 6 (3), then buy on day 7 (1) and sell on day 8 (4). Constraints * 1 ≤ N ≤ 100000 * 0 ≤ prices[i] ≤ 10000 for 0 ≤ i < N Input The input is given from Standard Input in the following format: N prices[0] prices[1] ... prices[N-1] Output Print the maximum profit that can be achieved by buying and selling the stock at most twice. Examples Input 8 3 3 5 0 0 3 1 4 Output 6 Input 6 1 2 3 4 5 6 Output 5","solution":"def maxProfit(prices): Calculates the maximum profit that can be achieved by buying and selling the stock at most twice. if not prices: return 0 n = len(prices) # Initialize the lists to store the maximum profit upto day i with one transaction and two transactions left = [0] * n right = [0] * n # Left to right traversal to fill left[i] min_price = prices[0] for i in range(1, n): left[i] = max(left[i - 1], prices[i] - min_price) min_price = min(min_price, prices[i]) # Right to left traversal to fill right[i] max_price = prices[-1] for i in range(n - 2, -1, -1): right[i] = max(right[i + 1], max_price - prices[i]) max_price = max(max_price, prices[i]) # Calculate the maximum profit by adding left[i] and right[i] max_profit = 0 for i in range(n): max_profit = max(max_profit, left[i] + right[i]) return max_profit def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) prices = list(map(int, data[1:])) print(maxProfit(prices)) if __name__ == \\"__main__\\": main()"},{"question":"Eva loves to arrange her large collection of colored beads. One day, she decides to form a beautiful necklace by arranging the beads in a straight line. However, she wants the necklace to follow a special pattern: After arranging the beads, she should be able to read the same sequence of colors from left to right and from right to left. Given a string of characters, each representing a bead of a specific color, your task is to determine the minimum number of beads (characters) that Eva needs to add to the end of the string to make it form the desired symmetrical pattern. Input A single line containing a string S, representing Eva’s initial sequence of beads. The string S contains only lowercase English letters (\'a\' - \'z\'). Output A single integer which is the minimum number of beads to be added. Constraints 1 ≤ |S| ≤ 1000 Example Input: race Output: 3 Explanation: Eva can add \'car\' at the end of \'race\' to make it \'racecar\', which is symmetrical. Hence, she needs to add 3 characters.","solution":"def min_beads_to_add_for_symmetry(S): Returns the minimum number of characters that need to be added to the end of the string to make it a palindrome. def is_palindrome(s): return s == s[::-1] # Check for the shortest suffix that is not a palindrome and will make S a palindrome for i in range(len(S)): if is_palindrome(S[i:]): return i return len(S) - 1 # In the worst case, you need to add |S| - 1 characters."},{"question":"Tom is a fan of unique sequences and has recently come across a fascinating sequence that he wants to explore further. The sequence is defined by the following rules: 1. The sequence starts with an integer `n`. 2. The next number in the sequence is obtained by reversing the digits of the current number and then adding the reversed number to the current number. 3. This process is repeated until the sequence reaches a palindromic number (a number that reads the same backward as forward). Help Tom by writing a program to determine the smallest palindromic number in the sequence starting from `n`, and also the number of steps it took to reach this palindromic number. INPUT: The first line consists of a single integer T, the number of test cases. Each of the next T lines consists of a single integer n, the starting number of the sequence. OUTPUT: For each test case, output two integers separated by a space: the smallest palindromic number in the sequence and the number of steps taken to reach it. 0 < T < 100 1 ≤ n < 10^5 SAMPLE INPUT 2 123 87 SAMPLE OUTPUT 444 1 4884 4","solution":"def reverse_number(n): Returns the reverse of the given number. return int(str(n)[::-1]) def is_palindromic(n): Checks if the given number is palindromic. return str(n) == str(n)[::-1] def find_palindromic_number(n): Finds the smallest palindromic number starting from n and the steps taken to reach it. steps = 0 while not is_palindromic(n): n += reverse_number(n) steps += 1 return n, steps def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for n in test_cases: palindromic_number, steps = find_palindromic_number(n) results.append((palindromic_number, steps)) return results"},{"question":"You are operating a vending machine that accepts coins of three different denominations: 1 cent, 2 cents, and 5 cents. Given an integer representing the total amount (in cents) a customer wishes to withdraw, your task is to determine the minimum number of coins needed to make up that amount. For example, if the customer wants to withdraw 11 cents, the answer is 3 because you can use two 5-cent coins and one 1-cent coin (5 + 5 + 1). Input The input consists of a single integer n (1 ≤ n ≤ 10^6) — the amount of cents the customer wants to withdraw. Output Output a single integer representing the minimum number of coins needed to make up the given amount. Examples Input 11 Output 3 Input 3 Output 2 Input 14 Output 4 Note In the first example, the customer can use two 5-cent coins and one 1-cent coin to make up 11 cents (5 + 5 + 1). In the second example, the customer can use one 2-cent coin and one 1-cent coin to make up 3 cents (2 + 1). In the third example, the customer can use two 5-cent coins and one 2-cent coin and one 2-cent coin to make up 14 cents (5 + 5 + 2 + 2).","solution":"def minimum_coins(n): Given an integer n (1 ≤ n ≤ 10^6), returns the minimum number of coins needed to make up that amount using coins of denominations 1, 2, and 5. coins_of_5 = n // 5 remainder_after_5 = n % 5 coins_of_2 = remainder_after_5 // 2 remainder_after_2 = remainder_after_5 % 2 coins_of_1 = remainder_after_2 return coins_of_5 + coins_of_2 + coins_of_1"},{"question":"You are the manager of a warehouse and you need to organize the storage for various items. Each item in the warehouse has a specific weight and value, and your goal is to maximize the value of items in a storage that can hold a maximum weight capacity. Given a list of items, each with a weight and a value, and a maximum weight capacity of the storage, determine the maximum value that can be achieved without exceeding the weight capacity. Constraints: * 1 leq weight_i, value_i leq 1000 * 1 leq number of items leq 1000 * 1 leq maximum weight capacity leq 200 Input: Input is given from Standard Input in the following format: N K w1 v1 w2 v2 ... wN vN Where: * N is the number of items. * K is the maximum weight capacity of the storage. * w_i and v_i represent the weight and value of the ith item respectively. Output: Print the maximum value achievable within the given weight capacity. Examples: Input: 4 7 2 10 3 20 4 30 5 40 Output: 50 Input: 3 50 10 60 20 100 30 120 Output: 220","solution":"def knapsack(N, K, items): dp = [0] * (K + 1) for i in range(N): weight, value = items[i] for w in range(K, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return dp[K] def parse_input(input_str): lines = input_str.strip().split(\\"n\\") N, K = map(int, lines[0].split()) items = [tuple(map(int, line.split())) for line in lines[1:]] return N, K, items if __name__ == \\"__main__\\": import sys input_str = sys.stdin.read() N, K, items = parse_input(input_str) print(knapsack(N, K, items))"},{"question":"Monocarp has a collection of books, and he wants to arrange them on a shelf. He has `n` books, and each book has a certain width. Monocarp wants to arrange the books in such a way that he minimizes the total width of the shelf used, while making sure that no two books with the same width are adjacent to each other. More formally, you should find the minimum possible total width of a permutation of the books such that no two consecutive books have the same width. Input The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each test case consists of two lines. The first line contains one integer n (2 ≤ n ≤ 10^5) — the number of books. The second line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^9) — the widths of the books. Output For each test case, print one integer — the minimum possible total width of the arrangement of books such that no two consecutive books have the same width. Example Input 3 4 1 1 2 3 3 1 1 1 5 4 4 4 4 5 Output 6 impossible 25 Note In the first test case, one possible arrangement is [1, 2, 1, 3], which results in a total width of 1 + 2 + 1 + 3 = 7, which is minimized. In the second test case, it is impossible to arrange the books such that no two consecutive books have the same width since all books have the same width. In the third test case, one possible arrangement is [4, 4, 5, 4, 4], which results in a total width of 4 + 4 + 5 + 4 + 4 = 21, which is minimized.","solution":"def minimize_total_width(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] widths = test_cases[i][1] width_set = set(widths) if len(width_set) == 1: results.append(\\"impossible\\") else: total_width = sum(widths) results.append(total_width) return results"},{"question":"You have an array of n integers. You can perform the following operation repeatedly: * Select any two integers in the array, add them together, and replace them with their sum. Your objective is to minimize the maximum number in the array. Determine the minimum number of operations required to turn the array into one where all elements are equal. Constraints * 2 ≤ n ≤ 10^5 * 1 ≤ array[i] ≤ 10^9 Input Input is given from Standard Input in the following format: n array Output Print the minimum number of operations required to achieve the objective. Examples Input 3 1 2 4 Output 2 Input 4 1 1 1 1 Output 0 Input 5 1 3 6 10 15 Output 7","solution":"def min_operations_to_equal_elements(n, array): Given an array with n integers, returns the minimum number of operations required to turn the array into one where all elements are equal. return n - 1"},{"question":"A warehouse stores several items, each having a name and a value. The storage space is limited, so there\'s a maximum total value of items that can be stored in the warehouse. Each item can be stored multiple times. The goal is to determine the maximum total value of the items that can be stored in the warehouse without exceeding the given storage capacity. You are provided with the items and their values, and the maximum storage capacity. Your task is to find the maximum total value that can be obtained without exceeding the storage capacity. Input - The first line contains the maximum storage capacity S (1 ≤ S ≤ 100). - The second line contains an integer n (1 ≤ n ≤ 10) representing the number of different items. - The next n lines each contain a string representing the name of the item and an integer representing its value Vi (1 ≤ Vi ≤ 100). Output - Output the maximum total value that can be obtained without exceeding the storage capacity. Example Input 50 3 item1 20 item2 30 item3 25 Output 50 Input 15 2 itemA 20 itemB 10 Output 10 Input 100 4 itemA 10 itemB 20 itemC 30 itemD 40 Output 100","solution":"def max_total_value(S, n, items): Returns the maximum total value that can be stored in the warehouse without exceeding the given capacity. Parameters: S (int): Maximum storage capacity n (int): Number of different items items (list): List of tuples, each containing the name and value of an item Returns: int: The maximum total value values = [value for name, value in items] # Initialize an array dp with S+1 elements, all set to 0 dp = [0] * (S + 1) # Iterate over each item value for value in values: # Update the dp array from right to left for i in range(value, S + 1): dp[i] = max(dp[i], dp[i-value] + value) return dp[S]"},{"question":"You are given a list of unique integers, and you need to form a set of pairs from these integers such that each pair sums up to a given target value. Each integer can only be used in one pair. If it is not possible to form such pairs for all integers, the function should return the maximum number of pairs that can be formed. Write a function that determines the maximum number of pairs that sum up to a given target value. Input - The first line of input contains two integers n and target (1 ≤ n ≤ 100 000, 1 ≤ target ≤ 10^9) — the number of integers and the target sum value. - The second line contains n unique space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9 for each i). Output - Print the maximum number of pairs that sum up to the given target value. Examples Input 6 10 1 9 2 8 3 7 Output 3 Input 5 5 1 4 2 3 9 Output 2 Explanation In the first example, we can form pairs (1, 9), (2, 8), and (3, 7) which sum up to 10, resulting in 3 pairs. In the second example, we can form pairs (1, 4) and (2, 3) which sum up to 5, resulting in 2 pairs. The number 9 cannot be paired with any other number.","solution":"def max_pairs(n, target, nums): nums.sort() left = 0 right = n - 1 pairs = 0 while left < right: current_sum = nums[left] + nums[right] if current_sum == target: pairs += 1 left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return pairs"},{"question":"Alex loves exploring prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Alex is particularly fascinated by pairs of prime numbers that differ by exactly 2. Such pairs of primes are called \\"twin primes\\". For example, (3, 5) and (11, 13) are twin primes. Alex wants to find the largest twin prime pair (p, p+2) where both p and p+2 are twin primes and p+2 does not exceed an integer N. Your task is to help Alex find this pair. Input The input consists of a single integer N (2 ≤ N ≤ 10^6), which is the upper limit for p+2. Output Print the largest twin prime pair (p, p+2) where both p and p+2 are twin primes and p+2 ≤ N. If there are no twin primes in the range, print \\"-1\\". Examples Input 10 Output 5 7 Input 15 Output 11 13 Input 2 Output -1","solution":"def sieve_of_eratosthenes(n): Use the Sieve of Eratosthenes to find all primes up to n. is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for start in range(2, int(n**0.5) + 1): if is_prime[start]: for multiple in range(start*start, n + 1, start): is_prime[multiple] = False return [num for num, prime in enumerate(is_prime) if prime] def largest_twin_prime_pair(n): Find the largest twin prime pair (p, p+2) where p+2 ≤ n. primes = sieve_of_eratosthenes(n) last_twin_prime = -1 for i in range(len(primes) - 1): if primes[i+1] == primes[i] + 2: last_twin_prime = (primes[i], primes[i] + 2) if last_twin_prime == -1: return \\"-1\\" else: return f\\"{last_twin_prime[0]} {last_twin_prime[1]}\\""},{"question":"An intergalactic trading company needs your help in optimizing the trade routes between planets. You are given a list of planets, each with a specified amount of a certain resource, and a list of possible trade routes between planets. Each route has a cost associated with it. The company wants to find the most cost-effective way to transport resources from one set of planets (source planets) to another set of planets (destination planets). You are given: - An integer N, the number of planets (1 ≤ N ≤ 10^4). - An array R of length N, where R[i] (0 ≤ R[i] ≤ 10^9) is the amount of resources on the i-th planet. - An integer M, the number of trade routes (1 ≤ M ≤ 10^5). - A list of M trade routes, each described by three integers u, v, and c (1 ≤ u, v ≤ N, 0 ≤ c ≤ 10^9), indicating a route from planet u to planet v with a cost of c. - An integer S, the number of source planets (1 ≤ S ≤ N). - A list of S integers, the indices of the source planets. - An integer D, the number of destination planets (1 ≤ D ≤ N). - A list of D integers, the indices of the destination planets. Your objective is to determine the minimum cost required to transport all resources from the source planets to the destination planets. If it is not possible, return -1. Input - The first line contains integer N. - The second line contains N integers, the array R. - The third line contains integer M. - The next M lines each contain three integers u, v, and c. - The next line contains integer S. - The next line contains S integers, the indices of the source planets. - The next line contains integer D. - The next line contains D integers, the indices of the destination planets. Output - Output a single integer, the minimum cost required to transport all resources from the source planets to the destination planets, or -1 if it is not possible. Example Input 6 5 8 2 6 7 4 7 1 2 3 2 3 2 3 4 4 4 5 1 5 6 5 6 1 7 1 4 3 2 1 2 2 5 6 Output 11 Explanation In this example, the most cost-effective way to transport all the resources is by using the routes 1 -> 2 -> 3 -> 4 -> 5 with cost 3 + 2 + 4 + 1 + 5 = 15. But for the given problem, only taking the first three routes (total cost = 9) and transferring resources from planet 1 to 5 directly (additional cost = 2) yields a total cost of 11. Thus the minimum transportation cost is 11.","solution":"import heapq def min_transport_cost(N, R, M, routes, S, source_planets, D, dest_planets): graph = {i: [] for i in range(1, N+1)} for u, v, c in routes: graph[u].append((v, c)) graph[v].append((u, c)) INF = float(\'inf\') def dijkstra(start): dist = {i: INF for i in range(1, N+1)} dist[start] = 0 min_heap = [(0, start)] while min_heap: cur_dist, u = heapq.heappop(min_heap) if cur_dist > dist[u]: continue for v, weight in graph[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(min_heap, (dist[v], v)) return dist min_cost_sum = 0 total_resources = sum(R[planet-1] for planet in source_planets) for source in source_planets: dijkstra_dist = dijkstra(source) min_cost = INF for dest in dest_planets: if dijkstra_dist[dest] < min_cost: min_cost = dijkstra_dist[dest] if min_cost == INF: return -1 min_cost_sum += min_cost return min_cost_sum # Example usage: N = 6 R = [5, 8, 2, 6, 7, 4] M = 7 routes = [(1, 2, 3), (2, 3, 2), (3, 4, 4), (4, 5, 1), (5, 6, 5), (6, 1, 7), (1, 4, 3)] S = 2 source_planets = [1, 2] D = 2 dest_planets = [5, 6] print(min_transport_cost(N, R, M, routes, S, source_planets, D, dest_planets)) # Expected output: 11"},{"question":"Given a matrix of size n x m consisting of letters (a-z), you need to perform two types of operations on this matrix: 1. `query(x1, y1, x2, y2)` - Return the number of unique characters in the submatrix from (x1, y1) to (x2, y2), inclusive. Here, (x1, y1) denotes the top-left corner and (x2, y2) denotes the bottom-right corner of the submatrix. 2. `update(x, y, c)` - Change the character at position (x, y) in the matrix to character `c`. Write a program that can handle these operations efficiently. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns of the matrix. The next n lines contain m characters each, representing the matrix. The following line contains an integer q (1 ≤ q ≤ 10000), the number of operations to be performed. Each of the next q lines contains an operation in one of the following formats: - `query x1 y1 x2 y2` - `update x y c` Here, `x1`, `y1`, `x2`, `y2`, `x`, and `y` are 1-indexed and 1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m, 1 ≤ x ≤ n, 1 ≤ y ≤ m, and `c` is a lowercase letter. Output For each `query` operation, print the result on a new line. Examples Input 3 3 abc def ghi 5 query 1 1 2 2 update 2 2 z query 1 1 2 2 query 3 1 3 3 update 3 3 a Output 4 4 1","solution":"class Matrix: def __init__(self, n, m, matrix): self.n = n self.m = m self.matrix = matrix def update(self, x, y, c): self.matrix[x-1][y-1] = c def query(self, x1, y1, x2, y2): unique_characters = set() for i in range(x1-1, x2): for j in range(y1-1, y2): unique_characters.add(self.matrix[i][j]) return len(unique_characters) def process_operations(n, m, initial_matrix, operations): matrix = Matrix(n, m, [list(row) for row in initial_matrix]) result = [] for operation in operations: parts = operation.split() if parts[0] == \\"update\\": _, x, y, c = parts matrix.update(int(x), int(y), c) elif parts[0] == \\"query\\": _, x1, y1, x2, y2 = parts result.append(matrix.query(int(x1), int(y1), int(x2), int(y2))) return result"},{"question":"In a certain city, residents live in n different buildings arranged in a straight line. Each resident has a perceived happiness affected by the distance to the nearest park. You are tasked to determine the minimum distance to a park for each building in this city. You are given an array of integers representing the city layout. Each element of the array is either 0, indicating a building, or 1, indicating a park. Your goal is to create an array where each element shows the minimum distance to a park from the corresponding building. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of buildings and parks. The second line contains n integers, each being either 0 (building) or 1 (park). Output Print n integers. The i-th integer should represent the minimum distance from the i-th building to the nearest park. Example Input 10 0 1 0 0 0 1 0 0 0 1 Output 1 0 1 2 1 0 1 2 1 0","solution":"def min_distance_to_park(n, city_layout): Returns an array of minimum distances to the nearest park for each building. Parameters: n (int): The number of buildings and parks. city_layout (list): The layout of the city as a list of integers (0 for building, 1 for park). Returns: list: A list of minimum distances to the nearest park for each building. distances = [float(\'inf\')] * n # Forward pass to find distance to the nearest park on the left or current position. last_park_position = float(\'inf\') for i in range(n): if city_layout[i] == 1: last_park_position = i if last_park_position != float(\'inf\'): distances[i] = i - last_park_position # Backward pass to find distance to the nearest park on the right. last_park_position = float(\'inf\') for i in range(n-1, -1, -1): if city_layout[i] == 1: last_park_position = i if last_park_position != float(\'inf\'): distances[i] = min(distances[i], last_park_position - i) return distances # Example usage n = 10 city_layout = [0, 1, 0, 0, 0, 1, 0, 0, 0, 1] print(min_distance_to_park(n, city_layout))"},{"question":"In a distant land, there exists a magical forest with mystical trees that grow infinitely upwards. Each tree is characterized by two parameters: its growth rate and its starting height. Every tree grows at a constant rate per unit time, starting from its initial height. Throughout the day, your task is to find out when (or if) the top of any tree will reach or exceed a certain target height. Given the number of trees, their respective growth rates, starting heights, and a target height, you need to determine the earliest time at which the target height is reached by any tree. The forest has n magical trees, and each tree i has an initial height hi and grows at a constant rate of ri units per time unit. You need to find the smallest non-negative integer time t such that at least one tree’s height is greater than or equal to the target height H. If no tree can ever reach the target height, print -1. Input The first line of the input contains two integers n and H (1 ≤ n ≤ 5000, 1 ≤ H ≤ 10^9), separated by a space. Next n lines contain pairs of numbers hi and ri (0 ≤ hi ≤ 10^9, 0 ≤ ri ≤ 10^9). The trees are given in the same order as their location in the forest. Output Output a single integer — the smallest non-negative integer time t at which the height of any tree is at least H. If no tree can reach the height H, output -1. Examples Input 2 10 2 1 5 2 Output 3 Input 3 50 10 5 20 3 30 4 Output 5 Input 3 100 0 0 0 0 50 1 Output 50 Input 2 1000000000 0 0 0 0 Output -1","solution":"def earliest_time_to_reach_height(n, H, trees): earliest_time = float(\'inf\') for hi, ri in trees: if hi >= H: return 0 # If initial height is already >= target, return 0 if ri > 0: time_needed = (H - hi + ri - 1) // ri earliest_time = min(earliest_time, time_needed) return earliest_time if earliest_time != float(\'inf\') else -1"},{"question":"You are given two sequences of integers: sequence A and sequence B, both sequences of length n. You can remove some elements from A and B to get two new sequences A\' and B\'. We define the distance between sequences A\' and B\' as the sum of absolute differences of corresponding elements. Your task is to find the minimum possible distance between sequences A\' and B\' after optimally removing elements from A and B. Note that the new sequences A\' and B\' must not be empty and must have the same length. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the length of sequences A and B. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of sequence A. The third line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 1000) — the elements of sequence B. Output Output a single integer — the minimum possible distance between sequences A\' and B\'. Examples Input 5 1 3 5 7 9 2 4 6 8 10 Output 1 Input 4 5 6 7 8 3 1 2 4 Output 4 Input 3 1 2 3 4 5 6 Output 3 Note In the first example, you can choose A\' = [1], B\' = [2] which gives a distance of |1 - 2| = 1. In the second example, you can choose A\' = [7], B\' = [3] which gives a distance of |7 - 3| = 4. In the third example, you can choose A\' = [3], B\' = [4] which gives a distance of |3 - 4| = 1, then choose A\' = [2], B\' = [5] which gives a distance of |2 - 5| = 3. The minimum possible distance is 3.","solution":"def min_distance(n, A, B): Finds the minimum possible distance between sequences A\' and B\' after optimally removing elements. A.sort() B.sort() min_dist = float(\'inf\') for i in range(n): for j in range(n): min_dist = min(min_dist, abs(A[i] - B[j])) return min_dist"},{"question":"Matrix Diagonal Sum Write a function that calculates the sum of the primary and secondary diagonals of a n x n matrix of integers. The primary diagonal goes from the top-left to the bottom-right, and the secondary diagonal goes from the top-right to the bottom-left. The function should read the matrix as a list of lists and should output a tuple of two integers: the sum of the primary diagonal and the sum of the secondary diagonal. Function Signature ```python def diagonal_sums(matrix: List[List[int]]) -> Tuple[int, int]: # Your code here ``` # Input - A single argument `matrix`, which is a list of `n` lists of `n` integers each (2 ≤ n ≤ 1000). Each integer in the matrix (say `matrix[i][j]`) will be between -1000 and 1000. # Output - Return a tuple containing two integers; the first is the sum of the primary diagonal, and the second is the sum of the secondary diagonal. # Example Example 1: Input: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ```python (15, 15) ``` Explanation: - Primary diagonal: 1 + 5 + 9 = 15 - Secondary diagonal: 3 + 5 + 7 = 15 Example 2: Input: ```python matrix = [ [2, 2, 2], [2, 2, 2], [2, 2, 2] ] ``` Output: ```python (6, 6) ``` Explanation: - Primary diagonal: 2 + 2 + 2 = 6 - Secondary diagonal: 2 + 2 + 2 = 6","solution":"from typing import List, Tuple def diagonal_sums(matrix: List[List[int]]) -> Tuple[int, int]: n = len(matrix) primary_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): primary_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n - 1 - i] return (primary_diagonal_sum, secondary_diagonal_sum)"},{"question":"Mark is a game developer and he is designing a new puzzle game. In the game, there is a grid of N x N cells, each containing a non-negative integer. The goal of the game is to find a subgrid (a contiguous rectangular block of cells) such that the sum of the integers within the subgrid is the maximum possible sum among all possible subgrids of the given grid. Given an integer N and an N x N grid of non-negative integers, your task is to determine the maximum possible sum of any subgrid within the given grid. Input The input is given from Standard Input in the following format: ``` N A_1,1 A_1,2 ... A_1,N A_2,1 A_2,2 ... A_2,N ... A_N,1 A_N,2 ... A_N,N ``` Output Print a single integer, the maximum possible sum of any subgrid within the given grid. Constraints - 1 ≤ N ≤ 1000 - 0 ≤ A_i,j ≤ 10^5 Example Input ``` 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 45 ``` Explanation: The subgrid consisting of all cells (from top-left to bottom-right corner) yields the maximum sum of 45.","solution":"def max_subgrid_sum(N, grid): Returns the maximum possible sum of any subgrid within the given grid. # Initialize the maximum subgrid sum to zero as grid contains non-negative integers max_sum = 0 # Loop over the starting row and columns of the subgrid for start_row in range(N): # Initialize a 1D array to store column sums col_sums = [0] * N for end_row in range(start_row, N): # Update column sums for the current row for col in range(N): col_sums[col] += grid[end_row][col] # Find the maximum sum of any subarray in col_sums using Kadane’s algorithm current_max = 0 max_ending_here = 0 for x in col_sums: max_ending_here += x if max_ending_here > current_max: current_max = max_ending_here if max_ending_here < 0: max_ending_here = 0 max_sum = max(max_sum, current_max) return max_sum # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) grid = [] idx = 1 for i in range(N): grid.append(list(map(int, data[idx:idx + N]))) idx += N print(max_subgrid_sum(N, grid))"},{"question":"A large multi-storied building has L floors in total. There is only one elevator in the building, and initially, the elevator is at floor 1. At each moment, the elevator can move either up or down by one floor in one unit of time. You are given an array of integers representing floors where people are waiting for the elevator to pick them up. The elevator can only stop at the floors where people are waiting and the people will be picked up instantly. Determine the minimum time required for the elevator to pick up all the waiting people. Constraints: * 1 leq L leq 10^9 * 1 leq W leq 10^5 * 1 leq f_i leq L * f_i are distinct integers. Input Input is given from Standard Input in the following format: L W f_1 f_2 ... f_W Output Print the minimum time required for the elevator to pick up all the waiting people. Examples Input 10 3 3 8 5 Output 7 Input 5 2 2 4 Output 4 Input 100 4 10 20 30 40 Output 30 Input 20 5 1 5 9 15 19 Output 18","solution":"def minimum_time_to_pickup(L, W, floors): Determines the minimum time required for the elevator to pick up all the waiting people. Parameters: L (int): Number of floors W (int): Number of waiting people floors (list): List of floors where people are waiting Returns: int: Minimum time required for the elevator to pick up all the waiting people if not floors or W == 0: return 0 min_floor = min(floors) max_floor = max(floors) # Time to go from floor 1 to the maximum floor with stops at both min and max floors time_to_pickup = (max_floor - 1) return time_to_pickup"},{"question":"A game developer wants to create an algorithm that helps generate random treasure maps for a pirate game. The treasure map is represented as a rectangular grid with `n` rows and `m` columns. Each cell in the grid can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). The player must start from a specific cell and find a way to reach the treasure, which is also located in a specific cell, by moving up, down, left, or right without hitting any obstacles. The player should be able to determine the shortest path to the treasure, or know if it\'s impossible to reach it. You need to create a function that takes in the grid and the starting and treasure positions, and returns the length of the shortest path from the start to the treasure. If there\'s no path, the function should return -1. Input The input consists of multiple test cases. The first line contains an integer `t` (1 ≤ t ≤ 50) — the number of test cases. Each test case starts with two integers `n` and `m` (1 ≤ n, m ≤ 100) which represent the number of rows and columns of the grid respectively. The next `n` lines each contain `m` characters, either \'.\' or \'#\', representing the grid cells. The next line contains four integers: `x1`, `y1`, `x2`, and `y2` (0 ≤ x1, x2 < n, 0 ≤ y1, y2 < m), representing the coordinates of the starting position and the treasure position respectively. Output For each test case, output a single line with an integer representing the length of the shortest path from the start to the treasure, or -1 if there is no path. Example Input ``` 3 5 5 ..... .#.#. ..... .#.#. ..... 0 0 4 4 5 5 ..... # ..... # ..... 0 0 4 4 3 3 # #.# # 0 1 1 1 ``` Output ``` 8 -1 -1 ``` Note In the first test case, there are multiple paths, and the shortest one is 8 steps long. In the second test case, the grid is divided by impassable obstacles, making it impossible to reach the treasure, hence the result is -1. In the third test case, the player starts from a cell with no clear path to the treasure due to surrounding obstacles, hence the output is -1 as well.","solution":"from collections import deque def shortest_path_in_grid(grid, start, end, n, m): Returns the length of the shortest path from start to end in the grid or -1 if there is no such path. x1, y1 = start x2, y2 = end if grid[x1][y1] == \'#\' or grid[x2][y2] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(x1, y1, 0)]) visited = set() visited.add((x1, y1)) while queue: x, y, dist = queue.popleft() if x == x2 and y == y2: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def solve(t, test_cases): results = [] for i in range(t): n, m, grid, start, end = test_cases[i] results.append(shortest_path_in_grid(grid, start, end, n, m)) return results"},{"question":"You are given an integer n, followed by n integers representing an array. Your task is to handle q queries, where each query provides two indices li and ri (1 ≤ li ≤ ri ≤ n). For each query, determine the length of the longest increasing subsequence within the subarray defined by s[li...ri]. The longest increasing subsequence (LIS) of a sequence is the longest subsequence where each element is greater than the previous one. Input The first line contains an integer n (1 ≤ n ≤ 5000) — the number of elements in the array. The second line contains n space-separated integers denoting the elements of the array. The third line contains a single integer q (1 ≤ q ≤ 100) — the number of queries. The next q lines contain two space-separated integers li and ri (1 ≤ li ≤ ri ≤ n) — representing the range of each query. Output For each query, print a single integer representing the length of the longest increasing subsequence in the specified subarray. Examples Input 6 4 3 1 5 6 2 3 1 3 2 5 1 6 Output 2 3 4 Explanation - For the first query, the subarray is [4, 3, 1]. The longest increasing subsequence is [4] or [3] or [1], so the length is 1. - For the second query, the subarray is [3, 1, 5, 6]. The longest increasing subsequence is [1, 5, 6], so the length is 3. - For the third query, the subarray is [4, 3, 1, 5, 6, 2]. The longest increasing subsequence is [1, 5, 6], so the length is 4.","solution":"def longest_increasing_subsequence(arr): Helper function to find the length of the longest increasing subsequence in an array. if not arr: return 0 dp = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_queries(n, array, q, queries): results = [] for query in queries: li, ri = query subarray = array[li-1:ri] # Convert 1-based index to 0-based results.append(longest_increasing_subsequence(subarray)) return results"},{"question":"You are tasked with organizing a coding competition, and you need to create a scoring system for the participants. You have a list of participants with their corresponding scores from different rounds of the competition. Your goal is to determine the overall ranking of the participants based on their scores. # Task You need to implement a function that takes the names and scores of participants and returns their final ranking list. The ranking is determined by the total score; if two participants have the same total score, they should have the same rank. The rank should be 1 for the participant(s) with the highest score, 2 for the next highest, and so on. The input consists of multiple lines, where each line contains the name of a participant followed by their scores from each round. Each participant\'s name is a unique alphanumeric string, and the scores are non-negative integers. # Input The input is given in the following format: ``` P name1 score1_1 score1_2 ... score1_m name2 score2_1 score2_2 ... score2_m ... nameP scoreP_1 scoreP_2 ... scoreP_m ``` - `P`: an integer representing the total number of participants (1 ≤ P ≤ 1000). - `nameX`: a unique string representing the name of the Xth participant. - `scoreX_y`: a non-negative integer representing the score of the Xth participant in the yth round (1 ≤ scoreX_y ≤ 100). # Output Output the final ranking list in the following format: ``` rank1 name1 total_score1 rank2 name2 total_score2 rank3 name3 total_score3 ... ``` # Example Input ``` 4 Bob 50 60 70 Alice 70 80 90 Charlie 50 60 70 David 90 80 70 ``` Output ``` 1 Alice 240 1 David 240 3 Bob 180 3 Charlie 180 ``` # Constraints - The total number of participants P will not exceed 1000. - The number of rounds and scores per participant will not exceed 100. Implement a function that reads from standard input and outputs the final ranking list based on the total scores of the participants. The ranking should handle ties correctly and participants with the same total score should have the same rank.","solution":"def calculate_rankings(participants): Calculate the rankings of participants based on their total scores. :param participants: List of tuples where each tuple contains the name of the participant and their scores in each round. :return: List of tuples where each tuple contains the rank, name, and total score # Calculate total scores for each participant total_scores = [(name, sum(scores)) for name, scores in participants] # Sort by total score in descending order, then by name in ascending order total_scores.sort(key=lambda x: (-x[1], x[0])) # Generate rankings rankings = [] current_rank = 1 previous_score = None for i, (name, total_score) in enumerate(total_scores): if previous_score is None or total_score < previous_score: current_rank = i + 1 rankings.append((current_rank, name, total_score)) previous_score = total_score return rankings"},{"question":"Given an array of integers, you need to find two numbers such that they add up to a specific target number. The function should return the indices of the two numbers. Note: You may assume that each input would have exactly one solution, and you may not use the same element twice. # Input The input to the function consists of: 1. An array of integers `nums` containing the list of numbers. 2. An integer `target` representing the target sum. # Output The function should return a list or tuple containing two integers — the indices of the two numbers that add up to the target. # Constraints - The list of numbers should have at least two elements and less than or equal to 10,000 elements. - Each number in the list can be negative, zero, or positive. - The list of integers will not be sorted. # Example Input ```python nums = [2, 7, 11, 15] target = 9 ``` Output ```python [0, 1] ``` Explanation Because `nums[0] + nums[1] == 9`, we return indices `[0, 1]`. # Note: - The returned outcome of `[0, 1]` is one of the possible answers, another valid answer is `[1, 0]`. The order of indices does not matter.","solution":"def two_sum(nums, target): Find two indices of numbers in \'nums\' that add up to \'target\'. Args: nums: List[int] target: int Returns: List[int] - A list containing the indices of the two numbers that add up to the target. num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return [num_dict[complement], i] num_dict[num] = i"},{"question":"You are given a grid of size N x N filled with positive integers. You can perform a series of moves to reduce the numbers in the grid. In one move, you can select any cell (i, j) with a value greater than 1, and reduce its value by 1. Additionally, the values of all its directly adjacent cells (up, down, left, right) will also be reduced by 1, if they are greater than 1. Your objective is to reduce all the numbers in the grid such that they are all equal to 1 using the minimum number of moves. Write a program that determines the number of such moves needed. Input The first line of the input contains an integer N (1 ≤ N ≤ 10) — the size of the grid. The next N lines contain N space-separated integers each, representing the grid. Output Output a single integer — the minimum number of moves required. Example Input 3 3 3 3 3 3 3 3 3 3 Output 1 Input 2 2 2 2 2 Output 1","solution":"def min_moves_to_reduce_grid_to_ones(grid): Given a grid filled with positive integers, determine the minimum number of moves required to reduce all numbers in the grid such that they are all equal to 1. max_value = 0 for row in grid: max_value = max(max_value, max(row)) # As each move can decrease at least one 2 or higher value, the maximum number of moves required # will equal the highest value in the grid minus one. return max_value - 1"},{"question":"Given an array of positive integers, you have to find the maximum sum of any continuous sub-array of size `m`. Input The first line contains two integers `n` and `m` (1 ≤ m ≤ n ≤ 10^6) — the number of elements in the array and the size of the sub-array. The second line contains `n` integers `a_i` (1 ≤ a_i ≤ 10^4) — the elements of the array. Output Print a single integer — the maximum sum of any continuous sub-array of size `m`. Examples Input 8 3 2 1 5 1 3 2 1 1 Output 9 Input 5 2 4 2 10 1 3 Output 12 Input 10 5 1 2 3 4 5 6 7 8 9 10 Output 40","solution":"def max_sum_subarray(n, m, arr): Returns the maximum sum of any continuous sub-array of size m. max_sum = current_sum = sum(arr[:m]) for i in range(m, n): current_sum += arr[i] - arr[i - m] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"A scientist in a lab is studying DNA sequences. Each sequence is represented as a string consisting of characters \'A\', \'C\', \'G\', and \'T\'. The scientist defines a good substring as one that has an equal number of \'A\'s, \'C\'s, \'G\'s, and \'T\'s. Given a DNA sequence, help the scientist determine the length of the shortest good substring. If no such substring exists, return -1. Input The input consists of several test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string of length n (1 ≤ n ≤ 10^4) representing a DNA sequence. Output For each test case, output the length of the shortest good substring, or -1 if no such substring exists. Example Input 3 AGCT AAGGCCTT ACGTACGTACGT Output 4 8 4 Note In the first test case, the whole string \\"AGCT\\" has an equal number of \'A\'s, \'C\'s, \'G\'s, and \'T\'s, so the length of the shortest good substring is 4. In the second test case, the sequence \\"AAGGCCTT\\" is itself a good substring, so the length is 8. In the third test case, the shortest good substring is \\"ACGT\\", which has a length of 4.","solution":"def find_shortest_good_substring_length(dna_sequences): results = [] for dna in dna_sequences: n = len(dna) min_length = n + 1 # Initialize with a large value (larger than any possible substring) for start in range(n): count = {\'A\': 0, \'C\': 0, \'G\': 0, \'T\': 0} for end in range(start, n): count[dna[end]] += 1 if count[\'A\'] == count[\'C\'] == count[\'G\'] == count[\'T\'] and count[\'A\'] != 0: substring_length = end - start + 1 min_length = min(min_length, substring_length) break # No need to continue if we found a valid substring for this start index if min_length == n + 1: results.append(-1) else: results.append(min_length) return results # Function to handle the input and output format def process_input_and_find_shortest_good_substring_length(t, sequences): return find_shortest_good_substring_length(sequences)"},{"question":"You are tasked with creating an efficient subway network system for a new city. The city\'s map is a grid of size NxM where each cell represents a potential subway station. The city planners want to construct subway lines in such a way that every station in the city can be quickly reached from any other station. To achieve this, subway lines should be built horizontally or vertically to connect stations. Each subway line can connect several stations, but all stations connected by the same line must lie on the same row or column without any interruptions. Given the dimensions of the city\'s grid, calculate the minimum number of subway lines required to ensure that every station is reachable from any other station either directly or through transfers at other stations. Input: The first line contains two integers, N and M (1 ≤ N, M ≤ 1,000), representing the number of rows and columns in the grid, respectively. Output: Output a single integer representing the minimum number of subway lines needed. Examples: Input: 3 3 Output: 5 Input: 4 6 Output: 9 Input: 1 10 Output: 1 Explanation: In the first example (3x3 grid), you can construct 3 horizontal and 2 vertical lines to cover all stations. In the second example (4x6 grid), you would need 4 horizontal lines and 5 vertical lines for a total of 9 lines. In the third example (1x10 grid), a single horizontal line is enough to cover all stations.","solution":"def min_subway_lines(N, M): Calculate the minimum number of subway lines required to ensure that every station is reachable from any other station either directly or through transfers at other stations. Parameters: N (int): Number of rows in the city\'s grid. M (int): Number of columns in the city\'s grid. Returns: int: The minimum number of subway lines needed. return N + M - 1"},{"question":"Sophia enjoys playing a computer game in which she must navigate a character through a maze. The maze is represented by a grid, where some cells contain obstacles and others are free paths. Sophia can move her character up, down, left, or right, but can\'t move diagonally or through obstacles. Sophia wants to determine the length of the shortest path from a starting cell to a destination cell. Your task is to write a program to help Sophia determine the length of the shortest path from the start to the destination in the maze. If there is no possible path, your program should return -1. Input The first line contains an integer `t` (1 ≤ t ≤ 10) — the number of test cases. For each test case: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. - The next `n` lines each contain `m` characters, representing the grid. Each character is either a `.` (representing an empty cell) or a `#` (representing an obstacle). - The last line contains four integers `sx`, `sy`, `dx`, and `dy` (0 ≤ sx, sy, dx, dy < max(n, m)) — the coordinates of the start cell `(sx, sy)` and the destination cell `(dx, dy)`. The start and destination cells are guaranteed to be empty (\'.\'). Output For each test case, print a single integer — the length of the shortest path from the start to the destination, or -1 if there is no such path. Examples Input 2 5 5 ..... .#. ..#.. .#. ..... 0 0 4 4 3 3 ..# #.# ..# 0 0 2 2 Output 8 -1 Explanation In the first test case, the shortest path from (0, 0) to (4, 4) consists of 8 steps. In the second test case, there is no valid path from (0, 0) to (2, 2), so the output is -1.","solution":"from collections import deque def shortest_path(maze, n, m, sx, sy, dx, dy): # Directions for movement: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS initialization queue = deque([(sx, sy, 0)]) # queue holds tuples of (current_x, current_y, steps_taken) visited = set((sx, sy)) while queue: x, y, steps = queue.popleft() # Check if the destination is reached if (x, y) == (dx, dy): return steps # Explore the neighbors for d in directions: nx, ny = x + d[0], y + d[1] if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) # If no path found return -1 def solve(mazes): results = [] for maze_data in mazes: n, m, maze, sx, sy, dx, dy = maze_data result = shortest_path(maze, n, m, sx, sy, dx, dy) results.append(result) return results # Helper function to parse input def parse_input(input_list): mazes = [] idx = 0 t = int(input_list[idx]) idx += 1 for _ in range(t): n, m = map(int, input_list[idx].split()) idx += 1 maze = [input_list[idx + i] for i in range(n)] idx += n sx, sy, dx, dy = map(int, input_list[idx].split()) idx += 1 mazes.append((n, m, maze, sx, sy, dx, dy)) return mazes"},{"question":"Julia loves working with arrays and sequences. One day, she wondered in how many ways she can choose pairs of positions (i, j) in an array such that the absolute difference between the values at these positions is exactly equal to a given integer k. Formally, you need to count the pairs (i, j) such that |arr[i] - arr[j]| = k and i ≠ j. The pairs are considered unordered, meaning that the pair (i, j) is the same as the pair (j, i). Julia has asked you to write a program that will do this for her. Input The first line of input contains two integers n (1 ≤ n ≤ 2·10^5) and k (1 ≤ k ≤ 10^4) — the length of the array and the integer k, respectively. The second line contains n integers arr[1], arr[2], ..., arr[n] (0 ≤ arr[i] ≤ 10^6) — the elements of the array. Output Output a single integer, the number of pairs (i, j) such that |arr[i] - arr[j]| = k. Examples Input 5 2 1 5 3 4 2 Output 3 Input 4 1 1 2 3 4 Output 3 Note In the first example, there are 3 pairs of indices (i, j) such that |arr[i] - arr[j]| equals 2: (1, 5), (3, 4), and (4, 5). In the second example, there are also 3 pairs of indices (i, j) such that |arr[i] - arr[j]| equals 1: (1, 2), (2, 3), and (3, 4).","solution":"def count_pairs_with_difference(arr, k): Counts the number of unordered pairs (i, j) in an array such that |arr[i] - arr[j]| = k and i ≠ j. :param arr: List of integers representing the array :param k: The difference to check for :return: The count of pairs with the specified difference from collections import Counter count = 0 freq_map = Counter(arr) if k == 0: # Special case when k is 0, we need counts of elements that appear more than once. for val in freq_map.values(): if val > 1: count += val * (val - 1) // 2 else: for num in freq_map: if num + k in freq_map: count += freq_map[num] * freq_map[num + k] return count"},{"question":"Mike and Julie are playing a game where they take turns to add a number to a sequence. The game starts with an empty sequence. Each player can choose a number from 1 to N that has not already been chosen in this round. The player who cannot make a valid move (i.e., all numbers from 1 to N have been chosen) loses. Given a number N, simulate the game to determine which player will win if both play optimally. Write a function `game_winner(N: int) -> str` that takes an integer N and returns \\"Mike\\" if Mike wins the game or \\"Julie\\" if Julie wins the game. Assume Mike always goes first. # Input: - An integer N (1 <= N <= 10^5). # Output: - A string \\"Mike\\" or \\"Julie\\" depending on which player wins the game if both play optimally. # Examples: Example 1: Input: ``` 3 ``` Output: ``` Julie ``` Example 2: Input: ``` 4 ``` Output: ``` Mike ``` Example 3: Input: ``` 1 ``` Output: ``` Mike ``` # Explanation: In Example 1, the sequence of moves is: 1. Mike picks 1, 2. Julie picks 2, 3. Mike picks 3. Now Julie has no valid move left, so Mike wins. In Example 2, the sequence of moves is: 1. Mike picks 1, 2. Julie picks 2, 3. Mike picks 3, 4. Julie picks 4, Now there are no valid moves left, and since it\'s Mike\'s turn again, he loses and Julie wins. In Example 3, the sequence of moves is: 1. Mike picks 1. Julie has no valid move left, so Mike wins.","solution":"def game_winner(N: int) -> str: Determines the winner of the game. Parameters: N (int): A number indicating the range between 1 and N for the game. Returns: str: \\"Mike\\" if Mike wins, \\"Julie\\" if Julie wins. # Since Mike always goes first, if N is odd, Mike will make the last move. # If N is even, Julie will make the last move. if N % 2 == 0: return \\"Julie\\" else: return \\"Mike\\""},{"question":"You are designing a storage system that needs to manage a variety of objects in a warehouse. To optimize space, each object is categorized into a specific container. Each container has a maximum weight limit that it can hold, and each object has a specific weight. Your task is to write a program that helps to determine the minimum number of containers required to store all the objects without exceeding the weight limit of any container. Input The input consists of several datasets. Each dataset begins with a line containing a positive integer n (n ≤ 1000), which indicates the number of objects, and a positive integer W (W ≤ 10000), which denotes the maximum weight a container can hold. This is followed by n lines, each containing a positive integer wi (wi ≤ W), which is the weight of the ith object. The end of the input is indicated by a line consisting of a single zero. Output For each dataset, output the minimum number of containers required in one line. The output should not contain any other characters. Example Input 4 10 2 3 5 8 5 20 10 15 8 6 8 0 Output 2 3","solution":"def min_containers(datasets): from bisect import bisect_right results = [] for n, W, weights in datasets: weights.sort() containers = [] for weight in weights: pos = bisect_right(containers, W - weight) if pos != 0: pos -= 1 containers[pos] += weight else: containers.append(weight) results.append(len(containers)) return results def parse_input(input_str): data = input_str.strip().split(\'n\') datasets = [] i = 0 while i < len(data): line = data[i] if line == \'0\': break n, W = map(int, line.split()) weights = [int(data[j]) for j in range(i + 1, i + 1 + n)] datasets.append((n, W, weights)) i += n + 1 return datasets def main(input_str): datasets = parse_input(input_str) results = min_containers(datasets) for result in results: print(result)"},{"question":"You are given n integers representing the heights of towers in a row. The towers are indexed from 1 to n. You need to place flagpoles on both the tallest and the shortest tower, such that the view from any flagpole to all taller or shorter towers ahead and behind is unobstructed. We say that the view is unobstructed if, when standing on a tower, you can see the flagpoles on both the nearest taller and shorter towers to the left and right without any intermediate tower blocking the view. Specifically, you need to find two indices i and j (1 ≤ i, j ≤ n, i ≠ j), such that: - Tower i is the tallest tower. - Tower j is the shortest tower. - For both indices, the view to their nearest next taller and shorter towers, if they exist, is unobstructed. If there are multiple solutions, any valid pair of indices can be printed. Input The first line contains a single integer n (2 ≤ n ≤ 100000) — the number of towers. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the heights of the towers. Output If there exists a valid pair of indices, print the indices i and j. Otherwise, print -1. Examples Input 5 3 1 4 1 5 Output 5 2 Input 4 2 2 2 2 Output -1 Note In the first example, the tallest tower is of height 5 and located at index 5. The shortest is of height 1, located at indices 2 and 4. The view from these towers is unobstructed for the respective conditions as described. In the second example, all towers have the same height, so it\'s impossible to meet the criteria.","solution":"def find_tallest_shortest_tower_indices(n, heights): if n < 2: return -1 tallest = max(heights) shortest = min(heights) tallest_indices = [i for i, h in enumerate(heights, start=1) if h == tallest] shortest_indices = [i for i, h in enumerate(heights, start=1) if h == shortest] if tallest == shortest: return -1 return tallest_indices[0], shortest_indices[0] # Example usage: # towers_n = 5 # towers_heights = [3, 1, 4, 1, 5] # print(find_tallest_shortest_tower_indices(towers_n, towers_heights)) # Output should be (5, 2)"},{"question":"James has a collection of different candies, and he’d like to share them among his friends in a quite unusual way. He has n friends, positioned in a circular manner. Each friend must receive exactly one candy, and the amount of candies must be divisible by the number of friends so that every friend will get exactly n/2 friends on each side after he gets all his candy. No two friends should receive candies of the same amount. The process to distribute the candies is as follows: 1. Pick one of the n friends to be the starting friend. He will receive the first candy. 2. Move clockwise around the circle, giving each successive friend a candy, each candy with an incremented candy amount. James wants the sum of the candies given to each friend to be maximized. Can you help James figure out the maximum sum of the candies he can achieve according to the rules? Input: The input consists of a single integer n (3 ≤ n ≤ 1000) — the number of friends. Output: Output a single integer which is the maximum sum of the candies James can achieve. Example Input: 4 Output: 22 Explanation: Here we have 4 friends positioned in a circular manner: - 1st friend can get 1 candy - 2nd friend gets 6 candies - 3rd friend gets 7 candies - 4th friend gets 8 candies The sum is 1+6+7+8 = 22","solution":"def maximum_candies(n): Calculates the maximum sum of candies given to n friends positioned in a circle. Args: n (int): Number of friends. Returns: int: Maximum sum of the candies. # The sum of the first n odd numbers is n^2. sum_of_candies = n ** 2 return sum_of_candies"},{"question":"Amy is working on optimizing her database queries. She regularly needs to find the file with the highest version number and perform operations on it. To facilitate this, she has a sequence of file versions, where each version is represented by a positive integer. Amy wants to keep track of the maximum version number in the sequence as she adds more versions. However, the database stores these version numbers in an unordered list, and every time a new version is added, she needs the ability to quickly retrieve the latest maximum version number. Can you write a function to help Amy maintain the maximum version number efficiently as new versions are added? Your task is to implement a data structure that supports the following operations in an efficient manner: 1. `add_version(x)` - Add a new file version `x` to the database. 2. `get_max_version()` - Retrieve the current maximum version number from the database. # Input - The first line contains a single integer `m` (1 ≤ m ≤ 200000), representing the number of operations. - Each of the following `m` lines contains either: - \\"add x\\" where `x` is a positive integer (1 ≤ x ≤ 1000000), representing the addition of a new version. - \\"max\\" indicating a request to retrieve the current maximum version number. # Output - For each \\"max\\" operation, output a single integer representing the current maximum version number. # Example Input ``` 6 add 5 add 1 max add 10 max add 2 ``` Output ``` 5 10 ``` # Note - After the first \\"add 5\\" operation, the maximum version is 5. - After the second \\"add 1\\" operation, the maximum version remains 5. - The first \\"max\\" operation outputs 5 because the highest version in the database at that moment is 5. - After the \\"add 10\\" operation, the new maximum version is 10. - The second \\"max\\" operation outputs 10. - The final \\"add 2\\" operation does not change the maximum version, so the next \\"max\\" operation (if there were one) would still output 10.","solution":"class VersionTracker: def __init__(self): self.versions = [] self.max_version = None def add_version(self, x): self.versions.append(x) if self.max_version is None or x > self.max_version: self.max_version = x def get_max_version(self): return self.max_version # Function to handle the input and output based on given instructions def process_operations(operations): tracker = VersionTracker() results = [] for operation in operations: if operation.startswith(\\"add\\"): _, x = operation.split() tracker.add_version(int(x)) elif operation == \\"max\\": results.append(tracker.get_max_version()) return results"},{"question":"**Increasing Subsequence Length** You are given an array of N integers. Your task is to find the length of the longest strictly increasing subsequence within this array. A strictly increasing subsequence is a sequence of indices 1 leq i_1 < i_2 < ... < i_k leq N such that A_{i_1} < A_{i_2} < ... < A_{i_k} . input Input is given from standard input in the following format: N A_1 A_2 A_3 dots A_N output Print a single integer, representing the length of the longest strictly increasing subsequence in the given array. Constraint * 1 leq N leq 1000 * 1 leq A_i leq 10000 * All inputs are integers. Input example 1 6 5 1 8 3 6 9 Output example 1 4 The longest increasing subsequence is [1, 3, 6, 9]. Input example 2 9 10 22 9 33 21 50 41 60 80 Output example 2 6 The longest increasing subsequence is [10, 22, 33, 50, 60, 80].","solution":"def longest_increasing_subsequence_length(array): if not array: return 0 n = len(array) lis = [1] * n for i in range(1, n): for j in range(i): if array[i] > array[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"A company is developing an automated delivery system involving autonomous drones. The drones have to deliver packages to various locations in a city grid. We need to calculate the shortest path a drone should take to deliver a package from a start location to a destination. The drones can move up, down, left, or right and cannot move diagonally. The city has several buildings which are impassable for the drones. Write a program to calculate the shortest path a drone should take to deliver the package, given the starting point, the destination, and the locations of the buildings. # Input The input consists of multiple test cases. Each test case has the following format: N M StartX StartY EndX EndY K BuildingX1 BuildingY1 BuildingX2 BuildingY2 ... BuildingXK BuildingYK N and M (1 ≤ N, M ≤ 1000) are the dimensions of the city grid. (StartX, StartY) are the coordinates of the starting point, and (EndX, EndY) are the coordinates of the destination. K (0 ≤ K ≤ 10000) is the number of buildings in the grid. Each building is located at a position (BuildingXi, BuildingYi). The last test case is followed by a line containing two zeros. This line is not a part of any dataset and should not be processed. # Output For each test case, output the length of the shortest path that the drone should take to deliver the package. If no path exists, output -1. The length of the path is the number of grid steps the drone makes. # Example Input 5 5 0 0 4 4 3 1 1 2 2 3 3 5 5 0 0 4 4 0 0 0 Output 8 8","solution":"from collections import deque def bfs_shortest_path(grid, start, end): Finds the shortest path in a grid from start to end avoiding obstacles. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (x, y, distance) seen = set([(start[0], start[1])]) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in seen and grid[nx][ny] == 0: seen.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def shortest_path(N, M, startX, startY, endX, endY, buildings): grid = [[0] * M for _ in range(N)] for bx, by in buildings: grid[bx][by] = 1 return bfs_shortest_path(grid, (startX, startY), (endX, endY)) def process_input(input_data): lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(lines): N, M = map(int, lines[index].split()) if N == 0 and M == 0: break index += 1 startX, startY = map(int, lines[index].split()) index += 1 endX, endY = map(int, lines[index].split()) index += 1 K = int(lines[index]) index += 1 buildings = [] for _ in range(K): bx, by = map(int, lines[index].split()) buildings.append((bx, by)) index += 1 result = shortest_path(N, M, startX, startY, endX, endY, buildings) results.append(result) return results"},{"question":"A group of treasure hunters found an ancient tablet with an encoded message. The message was written as a string s, composed of lowercase and uppercase letters from the English alphabet. The tablet also provided a clue written below the message specifying that the encoded message follows a particular pattern: if a letter appears consecutively for n times in the tablet, then in the decoded message, this letter should appear only once. Your task is to write a program that decodes the message by removing consecutive duplicates of each character in the string s. Input You are given a string s, where the length of s can vary from 1 to 10^5 (inclusive), consisting of lowercase and uppercase English letters. Output Print the decoded message, which is a string where all consecutive duplicate letters have been removed, leaving only one occurrence for each sequence of identical letters. Examples Input aaabbbcccaaa Output abca Input AABBAAC Output ABAC Input xyzzyxx Output xyzyx","solution":"def decode_message(s): Decodes the message by removing consecutive duplicate characters. Args: s (str): Encoded message with consecutive duplicate characters. Returns: str: Decoded message with consecutive duplicates removed. if not s: return \'\' decoded_message = [s[0]] # Initialize the result with the first character of the string for char in s[1:]: if char != decoded_message[-1]: decoded_message.append(char) return \'\'.join(decoded_message)"},{"question":"Given a grid of size n x m filled with non-negative integers, you can perform the following operation any number of times: Choose any single cell (i, j) with a nonzero value and decrement it by 1. Simultaneously, decrement all cells that are adjacent (up, down, left, right) to this cell by 1 as well, if they are non-negative. Determine if it is possible to make all cells in the grid equal to a given target value X after some sequence of operations. Input: The first line contains the number of test cases T. For each test case: - The first line contains the integers n, m, and X. - The next n lines each contain m integers representing the grid. Output: Output T lines, one for each test case. For a test case, output \\"YES\\" if it is possible to make all cells in the grid equal to X, and \\"NO\\" otherwise. Sample Input: 2 2 2 0 1 1 1 1 3 3 2 2 3 2 3 2 3 2 3 2 Sample Output: YES NO Constraints: 1 ≤ T ≤ 100 1 ≤ n, m ≤ 50 0 ≤ X ≤ 1000 0 ≤ grid[i][j] ≤ 1000","solution":"def can_make_all_cells_equal(t, test_cases): results = [] for test in test_cases: n, m, X, grid = test[\'n\'], test[\'m\'], test[\'X\'], test[\'grid\'] target_diff_count = set() # Store unique differences from target value X for i in range(n): for j in range(m): diff = grid[i][j] - X target_diff_count.add(diff) # If there are zero or one unique differences, it is already uniform or can be made uniform if len(target_diff_count) <= 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to parse input and return structured test cases def parse_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): n, m, X = map(int, input_lines[index].split()) index += 1 grid = [] for _ in range(n): grid.append(list(map(int, input_lines[index].split()))) index += 1 test_cases.append({\'n\': n, \'m\': m, \'X\': X, \'grid\': grid}) return T, test_cases"},{"question":"You are given a list of people with their respective heights, and a list of pairs indicating which people can see each other. Your task is to calculate the maximum number of people who can form a line such that each person can see the next person in the line and when standing in the line, each person is taller than the person in front of them. The input consists of two parts: 1. The first line contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10000) representing the number of people and the number of pairs of people who can see each other, respectively. 2. The second line contains n space-separated integers h1, h2,..., hn (1 ≤ hi ≤ 1000) representing the heights of the people. 3. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that person u can see person v. Output a single integer, the maximum number of people that can form such a line. Input 5 4 150 160 170 180 190 1 2 2 3 3 4 4 5 Output 5 Input 5 3 120 140 150 160 180 1 2 2 3 2 4 Output 3 Note In the first example, the heights are increasing and people can see the next person in the sequence. In the second example, although the heights are increasing, people 3 and 4 cannot directly see each other. The longest line that can be formed is either [1, 2, 3] or [1, 2, 4].","solution":"from collections import defaultdict, deque def max_people_line(n, m, heights, edges): graph = defaultdict(list) indegree = [0] * n for u, v in edges: if heights[u-1] < heights[v-1]: # Only consider edges where height is increasing graph[u-1].append(v-1) indegree[v-1] += 1 queue = deque([i for i in range(n) if indegree[i] == 0]) dp = [0] * n for i in range(n): dp[i] = 1 while queue: node = queue.popleft() for neighbor in graph[node]: indegree[neighbor] -= 1 dp[neighbor] = max(dp[neighbor], dp[node] + 1) if indegree[neighbor] == 0: queue.append(neighbor) return max(dp) # Example of usage: # n, m = 5, 4 # heights = [150, 160, 170, 180, 190] # edges = [(1, 2), (2, 3), (3, 4), (4, 5)] # print(max_people_line(n, m, heights, edges)) # Output: 5 # Another example: # n, m = 5, 3 # heights = [120, 140, 150, 160, 180] # edges = [(1, 2), (2, 3), (2, 4)] # print(max_people_line(n, m, heights, edges)) # Output: 3"},{"question":"Julia needs to distribute candies to children in a line, following specific distribution rules to make sure each child is happy. She has `n` children standing in a line and each child must receive at least one candy. The overall goal is to minimize the total number of candies distributed, given the children’s ratings. The rules are: 1. Each child must receive at least one candy. 2. A child with a higher rating than their immediate neighbors must receive more candies than those neighbors. Given an array of integers representing the ratings of each child, write a function to determine the minimum number of candies required. Input - The first line contains a single integer `n` (1 ≤ n ≤ 100000) — the number of children. - The second line contains `n` integers, where the i-th integer `rating_i` (1 ≤ rating_i ≤ 1000) — the rating of the i-th child. Output - Output a single integer, the minimum number of candies required. Example Input 5 1 0 2 Example Output 5 Example Input 3 1 2 2 Example Output 4 Implement the function `minimize_candies(n, ratings)` which takes in the number of children and their respective ratings and returns the minimum number of candies needed.","solution":"def minimize_candies(n, ratings): if n == 0: return 0 candies = [1] * n # Left to right pass for i in range(1, n): if ratings[i] > ratings[i - 1]: candies[i] = candies[i - 1] + 1 # Right to left pass for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: candies[i] = max(candies[i], candies[i + 1] + 1) return sum(candies)"},{"question":"Tom and Jerry frequently play a game that involves a sequence of N positive integers. Tom gets to pick a number that he likes from the sequence, while Jerry gets to remove any one number from the sequence before Tom picks his number. Tom wants to maximize his chosen number, and Jerry wants to minimize this number as much as possible. Write a program that determines the maximum possible number Tom can pick given that Jerry will remove one number to minimize this value. Input The first line contains an integer N – the number of integers in the sequence. The second line contains N integers – the sequence of integers. * 2 ≤ N ≤ 10^5 * 1 ≤ sequence[i] ≤ 10^9 Output Output the maximum number Tom can pick after Jerry removes one number. Examples Input: 5 1 3 5 7 9 Output: 7 Input: 4 8 2 4 6 Output: 6 Note: In the first example, if Jerry removes 9, Tom gets to pick the maximum remaining number 7. In the second example, if Jerry removes 8, Tom gets to pick 6 as the maximum number.","solution":"def maximum_possible_number(n, sequence): Determines the maximum number Tom can pick given that Jerry removes one number to minimize it. :param n: int - The number of integers in the sequence :param sequence: list of int - The sequence of integers :return: int - The maximum possible number Tom can pick after Jerry removes one number max_number_already_filtered = max(sequence) sequence.remove(max_number_already_filtered) second_max_number_after_removal = max(sequence) return second_max_number_after_removal"},{"question":"You are given a string S consisting of lowercase letters. Your task is to remove the minimum number of characters from S to make it a palindrome. Input The first line contains a single string S (1 ≤ |S| ≤ 1000), consisting of lowercase letters. Output Output a single integer - the minimum number of characters you need to remove from the string to make it a palindrome. SAMPLE INPUT 1 abca SAMPLE OUTPUT 1 1 SAMPLE INPUT 2 racecar SAMPLE OUTPUT 2 0","solution":"def min_deletions_to_make_palindrome(s): Returns the minimum number of characters one needs to remove from the string s to make it a palindrome. def longest_palindromic_subsequence_length(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] n = len(s) lps_length = longest_palindromic_subsequence_length(s) return n - lps_length"},{"question":"You are given a binary string s of length n. In one operation, you can select any subsequence of the string and flip all bits in that subsequence from \'0\' to \'1\' or from \'1\' to \'0\'. Your task is to determine the minimum number of operations needed to make all bits in the string equal (either all \'0\'s or all \'1\'s). A subsequence is derived by deleting some or no elements of the string without changing the order of the remaining elements. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The description of each test case follows: - The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of the binary string s. - The second line of each test case contains the binary string s. Output For each test case, print the minimum number of operations required. Example Input 3 5 11000 6 011101 3 101 Output 1 2 1 Explanation In the first case, you can select the subsequence including the first and second characters and flip them to \'0\', making the string \\"00000\\" with one operation. In the second case, you can: - Flip the subsequence \\"111\\" to \\"000\\", giving \\"000101\\". - Flip the subsequence \\"101\\" to \\"010\\", resulting in \\"000000\\". So it requires two operations. In the third case, you can flip the last character to \'0\' to get the string \\"100\\", and in the next operation flip the first character to get \\"000\\" with one operation, or alternatively, flip the first and last characters in one operation to get \\"000\\".","solution":"def min_operations_to_equal(s): Returns the minimum number of operations needed to make all bits in the string equal. A subsequence is derived by deleting some or no elements of the string without changing the order. # Count the number of contiguous segments of \'1\'s count_ones_segments = 0 i = 0 while i < len(s): if s[i] == \'1\': count_ones_segments += 1 while i < len(s) and s[i] == \'1\': i += 1 i += 1 # Count the number of contiguous segments of \'0\'s count_zeros_segments = 0 i = 0 while i < len(s): if s[i] == \'0\': count_zeros_segments += 1 while i < len(s) and s[i] == \'0\': i += 1 i += 1 # The answer is the minimum of those two counts return min(count_ones_segments, count_zeros_segments) def min_operations_for_test_cases(t, test_cases): results = [] for n, s in test_cases: results.append(min_operations_to_equal(s)) return results"},{"question":"Input The input consists of two integers A and B, where ( 1 leq A, B leq 50 ). Output Output a grid of size A x B where each cell alternates between \'X\' and \'O\'. The top-left cell should be \'X\'. There should be no spaces between characters in the same row, but each row should be on a new line. Examples Input 3 4 Output XOXO OXOX XOXO Input 2 5 Output XOXOX OXOXO Input 1 7 Output XOXOXOX","solution":"def generate_grid(A, B): Generates an A x B grid where each cell alternates between \'X\' and \'O\', starting with \'X\' at the top-left corner. grid = [] for i in range(A): row = [] for j in range(B): if (i + j) % 2 == 0: row.append(\'X\') else: row.append(\'O\') grid.append(\\"\\".join(row)) return \\"n\\".join(grid)"},{"question":"In a land of magical creatures, there is a special forest populated by trees of different types. The forest consists of n enchanted trees, and each tree is directly connected to some other trees via magical pathways. These pathways form a tree structure where each tree is uniquely connected to any other tree, ensuring there is exactly one path between any two trees. Each pathway has a magical energy cost associated with it, and this energy cost can either be positive or negative. A positive energy cost implies it takes energy to traverse the pathway, while a negative cost indicates the pathway generates energy. The forest guardian needs to make several journeys through the forest, starting from one tree and ending at another. The guardian wants to determine the minimum energy required to complete each journey. If the guardian can generate energy (i.e., a negative total cost), they should instead aim to maximize the energy generated. Input The first line contains two space-separated integers n and q (2 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the number of trees and the number of queries, respectively. The next n-1 lines each contain three space-separated integers u, v, and w (1 ≤ u, v ≤ n, -10^9 ≤ w ≤ 10^9) — indicating a magical pathway between tree u and tree v with energy cost w. The next q lines contain two space-separated integers ai and bi (1 ≤ ai, bi ≤ n) — representing the starting and ending trees of each journey. Output For each query, output a single integer representing the minimum energy required to complete the journey between the two specified trees. If the result is negative, output the maximum energy that can be generated instead. Examples Input 6 3 1 2 4 1 3 -2 3 4 1 3 5 -5 5 6 3 2 4 4 6 2 5 Output 3 -1 -6 Note In the first query, the path from tree 2 to tree 4 is 2-1-3-4, with a total energy cost of 4 - 2 + 1 = 3. In the second query, the path from tree 4 to tree 6 is 4-3-5-6, with a total energy cost of 1 - 5 + 3 = -1, indicating energy generation. Hence, the maximum energy generated is -1. In the third query, the path from tree 2 to tree 5 is 2-1-3-5, with a total energy cost of 4 - 2 - 5 = -3, indicating energy generation. Hence, the maximum energy generated is -6.","solution":"class Solution: def __init__(self, n, tree_edges): from collections import defaultdict import sys # Initializations self.n = n self.graph = defaultdict(list) self.depth = [0] * (n + 1) self.parent = [0] * (n + 1) self.dist = [0] * (n + 1) self.LOG = 17 # ceil(log2(10^5)) + 1 self.lca_table = [[-1 for _ in range(self.LOG)] for __ in range(n + 1)] # Construct the graph for u, v, w in tree_edges: self.graph[u].append((v, w)) self.graph[v].append((u, w)) # Preprocess the tree self.dfs(1, -1, 0, 0) self.compute_lca() def dfs(self, node, par, d, weight): self.depth[node] = d self.parent[node] = par self.dist[node] = weight for neighbor, w in self.graph[node]: if neighbor != par: self.dfs(neighbor, node, d + 1, weight + w) def compute_lca(self): for i in range(1, self.n + 1): self.lca_table[i][0] = self.parent[i] for j in range(1, self.LOG): for i in range(1, self.n + 1): if self.lca_table[i][j - 1] != -1: self.lca_table[i][j] = self.lca_table[self.lca_table[i][j - 1]][j - 1] def lca(self, u, v): if self.depth[u] < self.depth[v]: u, v = v, u diff = self.depth[u] - self.depth[v] for i in range(self.LOG): if (diff >> i) & 1: u = self.lca_table[u][i] if u == v: return u for i in reversed(range(self.LOG)): if self.lca_table[u][i] != -1 and self.lca_table[u][i] != self.lca_table[v][i]: u = self.lca_table[u][i] v = self.lca_table[v][i] return self.parent[u] def query(self, u, v): lca_uv = self.lca(u, v) return self.dist[u] + self.dist[v] - 2 * self.dist[lca_uv] def solve(n, q, edges, queries): sol = Solution(n, edges) result = [] for ai, bi in queries: total_energy = sol.query(ai, bi) result.append(total_energy if total_energy < 0 else total_energy) return result"},{"question":"You are provided a list of strings. Your task is to determine if each of the strings is a permutation of the string \\"open\\". Print \\"Yes\\" if it is, otherwise print \\"No\\". Constraints * The number of strings n will be between 1 and 100 (inclusive). * Each string will contain exactly 4 characters. Input Input will be given from Standard Input in the following format: ``` n str1 str2 ... strn ``` Output Output n lines, each containing either \\"Yes\\" or \\"No\\" based on whether the corresponding string is a permutation of \\"open\\". Examples Input ``` 3 pone open npoe ``` Output ``` Yes Yes Yes ``` Input ``` 2 nope pope ``` Output ``` Yes No ```","solution":"def check_permutations(n, strings): results = [] target = \\"open\\" target_sorted = sorted(target) for s in strings: if sorted(s) == target_sorted: results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Read input from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) strings = data[1:] results = check_permutations(n, strings) for result in results: print(result)"},{"question":"You are given n integers a_1, a_2, ..., a_n and a positive integer k. You need to find if there exists a non-empty subset of the given integers such that the sum of the elements of the subset equals k. If such a subset exists, output the subset; otherwise, output \\"No Solution\\". Input - The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 10^6) - the number of integers and the target sum. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5). Output - If there exists a subset whose sum is k, print the integers in the subset in the order they appear in the input, each separated by a space. - Otherwise, print \\"No Solution\\". Example Input 5 9 3 34 4 12 5 Output 4 5 Note In the example, 4 and 5 form a subset whose sum equals the target value 9. If multiple solutions exist, any one subset can be printed. If no valid subset exists, the output should be \\"No Solution\\".","solution":"def find_subset(n, k, nums): Determines if there exists a subset of numbers which sums up to k. n: int - number of integers k: int - target sum nums: List[int] - list of integers Returns: - List[int] - the subset which sums to k if exists, else an empty list. def subset_sum(idx, current_sum, subset): if current_sum == k: return subset if idx == n or current_sum > k: return [] include = subset_sum(idx + 1, current_sum + nums[idx], subset + [nums[idx]]) if include: return include exclude = subset_sum(idx + 1, current_sum, subset) return exclude subset = subset_sum(0, 0, []) if subset: return subset else: return \\"No Solution\\""},{"question":"Given an array of integers, determine if it\'s possible to rearrange the elements to form a strictly increasing sequence by changing at most one element. # Input - An integer `n` (1 ≤ n ≤ 100), the number of elements in the array. - An array of `n` integers `a_i` (-10^3 ≤ a_i ≤ 10^3). # Output - Print \\"YES\\" if it\'s possible to rearrange the array to form a strictly increasing sequence by changing at most one element. - Otherwise, print \\"NO\\". # Examples **Example 1:** Input: ``` 5 1 3 2 4 5 ``` Output: ``` YES ``` **Example 2:** Input: ``` 5 1 2 3 4 5 ``` Output: ``` YES ``` **Example 3:** Input: ``` 6 1 3 2 4 6 5 ``` Output: ``` NO ```","solution":"def can_be_strictly_increasing_by_one_change(arr): def is_strictly_increasing(arr): for i in range(len(arr) - 1): if arr[i] >= arr[i + 1]: return False return True n = len(arr) # If the array is already strictly increasing if is_strictly_increasing(arr): return \\"YES\\" # Try changing each element to see if it makes the array strictly increasing for i in range(n): original_value = arr[i] # Try skipping the ith element new_arr = arr[:i] + arr[i+1:] if is_strictly_increasing(new_arr): return \\"YES\\" # Restore the original array arr[i] = original_value return \\"NO\\" # Helper function for easy testing through different inputs def process_input(n, a): return can_be_strictly_increasing_by_one_change(a)"},{"question":"Vaishnavi loves to create patterns using stars and spaces. She designs beautiful diamond shapes and is now interested in writing a program that will generate these patterns for her. Can you help Vaishnavi by creating a program to print a diamond pattern of stars of a given size? Your task is to write a function to generate a diamond shape with `N` lines. Diamond patterns for N = 3 and N = 5 are shown below for reference. Input: - The first line contains an integer `T`, the number of test cases. - The next `T` lines each contain a single integer `N`, representing the number of lines in the diamond pattern. Output: - For each test case, print the diamond pattern. Each test case\'s output should be separated by an empty line. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 20 Example Input: ``` 2 3 5 ``` Example Output: ``` * * * ***** * * * * * * * * * * ********* * * * * * * * ```","solution":"def generate_diamond(n): Generates a diamond pattern of stars with N lines diamond = [] # Top part of the diamond for i in range(n): line = \' \' * (n - i - 1) + \'*\' if i > 0: line += \' \' * (2 * i - 1) + \'*\' diamond.append(line) # Bottom part of the diamond for i in range(n - 2, -1, -1): line = \' \' * (n - i - 1) + \'*\' if i > 0: line += \' \' * (2 * i - 1) + \'*\' diamond.append(line) return \'n\'.join(diamond) def process_diamond_patterns(T, test_cases): results = [] for n in test_cases: results.append(generate_diamond(n)) return \'nn\'.join(results)"},{"question":"You are given a board of size n x m, consisting of cells that are either open \'.\' or blocked \'#\'. You need to move from the top-left corner of the board (0,0) to the bottom-right corner (n-1,m-1). You must move only to adjacent cells that are open. You can move to a cell directly up, down, left, or right from your current position. Moreover, you cannot step on blocked cells. Write a function to determine the minimum number of moves required to reach the bottom-right corner from the top-left corner, or to return -1 if it is not possible to reach the destination. Input Description: - The first line of input contains two integers, n and m (1 ≤ n, m ≤ 1000), which represent the number of rows and columns of the board, respectively. - The next n lines each contain a string of length m consisting of characters \'.\' or \'#\'. - An open cell is represented by \'.\', and a blocked cell is represented by \'#\'. Output Description: - Output the minimum number of moves required to go from the top-left corner of the board to the bottom-right corner. If reaching the destination is impossible, output -1. Example: Input 5 5 ..... .#... ..#.. ...#. ..... Output 8 Input 3 3 .#. # .#. Output -1 Explanation: - In the first example, the minimum path from (0,0) to (4,4) requires 8 moves: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (4,3) -> (4,4). - In the second example, it is not possible to reach the bottom-right corner from the top-left corner.","solution":"from collections import deque def min_moves_to_reach_destination(n, m, board): if board[0][0] == \'#\' or board[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (x, y, distance) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and board[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"A forest management organization is monitoring a forested area they manage. In this forest, there are multiple types of trees, and each type can be found in different numbers. An area in the forest can be represented as a grid of size n x n, where each cell contains some type of tree. The organization wants to ensure biodiversity is sustained by maintaining at least k types of trees within any given subgrid of size m x m. Write a program to determine if it is possible to find such a subgrid that satisfies the biodiversity requirement. Input The first line of the input contains three integers n, m, and k (1 ≤ m ≤ n ≤ 1000, 1 ≤ k ≤ 10,000) — the size of the grid, the size of the subgrid, and the minimum number of tree types required. The next n lines each contain n integers, where each integer represents the type of tree in that cell. Tree types are represented as positive integers, and there can be up to 10,000 different tree types. Output Print `YES` if there exists at least one subgrid of size m x m that contains at least k different types of trees. Otherwise, print `NO`. Examples # Input 5 3 3 1 1 2 3 4 1 5 2 4 4 2 5 2 1 7 6 1 3 7 7 1 1 3 3 5 # Output YES # Input 4 2 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 # Output NO Note In the first example, the subgrid from (2,2) to (4,4) contains tree types [5, 2, 4, 2, 1, 7], which meets the requirement of at least 3 different types of trees. In the second example, no 2x2 subgrid contains 4 different types of trees, so the output is `NO`.","solution":"def has_biodiverse_subgrid(n, m, k, grid): Determines if there exists a subgrid of size m x m that contains at least k different types of trees. :param n: Size of the grid (n x n) :param m: Size of the subgrid (m x m) :param k: Minimum number of tree types required :param grid: 2D list representing the grid :return: \\"YES\\" if such subgrid exists, otherwise \\"NO\\" for i in range(n - m + 1): for j in range(n - m + 1): tree_types = set() for x in range(i, i + m): for y in range(j, j + m): tree_types.add(grid[x][y]) if len(tree_types) >= k: return \\"YES\\" return \\"NO\\""},{"question":"A group of friends is planning a road trip and they need to rent a vehicle that can accommodate all of them and their luggage. The rental agency offers different types of vehicles, each with specific seating capacities and luggage capacities. The friends want to ensure they rent the smallest possible vehicle that can fit all of them and their luggage. You are given the number of friends and the total amount of luggage they plan to carry. You are also given details about the available vehicles including their seating capacity and their luggage capacity. Write a program to determine the minimum total seating capacity required for the smallest vehicle that can accommodate both the friends and the luggage. Input The first line contains two space-separated integers n and l (1 ≤ n ≤ 100, 1 ≤ l ≤ 1000) — the number of friends and the total luggage capacity needed. The second line contains an integer v (1 ≤ v ≤ 100) — the number of vehicle options available. The next v lines each contain two space-separated integers si and li (1 ≤ si ≤ 100, 1 ≤ li ≤ 1000) — the seating capacity and the luggage capacity of the i-th vehicle option. Output Print a single integer — the minimum seating capacity required for a vehicle that can accommodate all the friends and their luggage. If there is no suitable vehicle, print -1. Examples Input 5 200 3 6 150 8 300 5 210 Output 5 Input 4 500 2 6 400 8 500 Output 8 Note Sample 1. The group has 5 friends and 200 units of luggage. The rental agency offers 3 vehicles. The first vehicle has a seating capacity of 6 and a luggage capacity of 150, which is insufficient for the luggage. The second vehicle has a seating capacity of 8 and a luggage capacity of 300, which is sufficient but has more seats than needed. The third vehicle has a seating capacity of 5 and a luggage capacity of 210, which is sufficient for both friends and luggage. Hence, the minimum seating capacity required is 5. Sample 2. The group has 4 friends and 500 units of luggage. The rental agency offers 2 vehicles. The first vehicle has a seating capacity of 6 and a luggage capacity of 400, which is insufficient for the luggage. The second vehicle has a seating capacity of 8 and a luggage capacity of 500, which is sufficient. Hence, the minimum seating capacity required is 8.","solution":"def find_minimum_seating_capacity(n, l, v, vehicles): Determines the minimum seating capacity required for the smallest vehicle that can accommodate both the friends and the luggage. Parameters: n (int): The number of friends. l (int): The total luggage capacity needed. v (int): The number of vehicle options available. vehicles (list of tuples): Each tuple contains two integers representing the seating capacity and luggage capacity of a vehicle. Returns: int: The minimum seating capacity required or -1 if no suitable vehicle is found. suitable_vehicles = [si for si, li in vehicles if si >= n and li >= l] if not suitable_vehicles: return -1 return min(suitable_vehicles)"},{"question":"You are given two segments in a 2D plane. Each segment is defined by its endpoints. Determine if these two segments intersect. Here is a simplified description of the segments and the intersection: Segments are defined by their endpoints (x1, y1), (x2, y2) and (x3, y3), (x4, y4). Two segments intersect if they have at least one point in common, and the point must be on both segments. - A segment with endpoints (x1, y1) and (x2, y2) contains a point (x, y) if and only if (x, y) satisfies the equation (x2 - x1) * (y - y1) = (x - x1) * (y2 - y1) and the point is within the x and y bounds of the endpoints. - The intersection of two line segments can be found using the concept of orientation and checking the directions of the points as described below. Input The first line contains four integers x1, y1, x2, y2 — the coordinates of the endpoints of the first segment. The second line contains four integers x3, y3, x4, y4 — the coordinates of the endpoints of the second segment. Output Output \\"YES\\" if the segments intersect; otherwise, \\"NO\\". Examples Input 1 1 4 4 1 8 2 4 Output NO Input 1 1 4 4 2 2 3 3 Output YES Input 1 1 4 4 4 4 5 5 Output YES Note In the first example, the segments do not intersect as they lie in different regions. In the second example, the segments intersect at the point (2, 2). In the third example, the segments share a common endpoint (4, 4).","solution":"def orientation(p, q, r): Return the orientation of the ordered triplet (p, q, r). 0 -> p, q and r are collinear 1 -> Clockwise 2 -> Counterclockwise val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]) if val == 0: return 0 elif val > 0: return 1 else: return 2 def on_segment(p, q, r): Given three collinear points p, q, r, check if point q lies on segment pr. if q[0] <= max(p[0], r[0]) and q[0] >= min(p[0], r[0]) and q[1] <= max(p[1], r[1]) and q[1] >= min(p[1], r[1]): return True return False def segments_intersect(p1, q1, p2, q2): Return True if line segments p1q1 and p2q2 intersect. # Find the four orientations needed for general and special cases o1 = orientation(p1, q1, p2) o2 = orientation(p1, q1, q2) o3 = orientation(p2, q2, p1) o4 = orientation(p2, q2, q1) # General case if o1 != o2 and o3 != o4: return True # Special Cases # p1, q1 and p2 are collinear and p2 lies on segment p1q1 if o1 == 0 and on_segment(p1, p2, q1): return True # p1, q1 and q2 are collinear and q2 lies on segment p1q1 if o2 == 0 and on_segment(p1, q2, q1): return True # p2, q2 and p1 are collinear and p1 lies on segment p2q2 if o3 == 0 and on_segment(p2, p1, q2): return True # p2, q2 and q1 are collinear and q1 lies on segment p2q2 if o4 == 0 and on_segment(p2, q1, q2): return True # Doesn\'t fall in any of the above cases return False def do_segments_intersect(x1, y1, x2, y2, x3, y3, x4, y4): if segments_intersect((x1, y1), (x2, y2), (x3, y3), (x4, y4)): return \\"YES\\" else: return \\"NO\\""},{"question":"A small village in a rural area is trying to enhance its connectivity by establishing a few new two-way roads. The village consists of n houses and m pre-existing roads. The local administration wants to ensure that every house can be reached from every other house either directly or through other houses. They have prepared a list of k potential new roads that they can construct. You are hired to determine a subset of these k new roads to construct, such that the village becomes fully connected (i.e., there is a path between any two houses), and the number of new roads is minimized. Additionally, if the village is already fully connected with the existing roads, then no new roads should be constructed. Input The first line contains three integers n, m, and k (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000, 1 ≤ k ≤ 1000) — the number of houses, the number of pre-existing roads, and the number of potential new roads, respectively. Each of the next m lines contains two integers ui, vi (1 ≤ ui, vi ≤ n) — denoting a two-way road between house ui and house vi. Each of the following k lines contains two integers xi, yi (1 ≤ xi, yi ≤ n) — denoting a potential new two-way road between house xi and house yi. Output Print the minimum number of new roads needed to be constructed to make the village fully connected. If no new roads are needed, print 0. Examples Input 5 4 3 1 2 2 3 3 4 4 5 1 3 2 5 1 5 Output 0 Input 5 3 3 1 2 2 3 3 4 1 3 2 5 1 5 Output 1 Note In the first example, the village is already fully connected with the existing roads, so no new roads are needed. In the second example, the village is not fully connected, as house 5 is isolated. Adding one new road between house 4 and house 5 will make the village fully connected.","solution":"def find_minimum_new_roads(n, m, k, existing_roads, potential_roads): from collections import defaultdict from itertools import combinations # Helper function to find the root of a house def find_root(parent, u): if parent[u] != u: parent[u] = find_root(parent, parent[u]) return parent[u] # Helper function to union two houses def union(parent, rank, u, v): root_u = find_root(parent, u) root_v = find_root(parent, v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 # Initialize the parent and rank data structures parent = {i: i for i in range(1, n + 1)} rank = {i: 0 for i in range(1, n + 1)} # Process existing roads for u, v in existing_roads: union(parent, rank, u, v) connected_components = set(find_root(parent, i) for i in range(1, n + 1)) if len(connected_components) == 1: return 0 # Calculate all connected components remaining_roads = [] for x, y in potential_roads: if find_root(parent, x) != find_root(parent, y): remaining_roads.append((x, y)) min_new_roads = len(connected_components) - 1 # Simulate adding roads to see how many are needed to fully connect the graph added_roads = 0 for x, y in remaining_roads: if find_root(parent, x) != find_root(parent, y): union(parent, rank, x, y) added_roads += 1 if len(set(find_root(parent, i) for i in range(1, n + 1))) == 1: break return added_roads"},{"question":"The students of the School of Information Studies are organizing a tech carnival event. One of the attractions will be a game that involves arranging colored LED lights in a specific pattern. The students have devised a challenge for their peers, which involves manipulating the state of an array of LEDs. You are given an array of n integers representing the initial states of the LEDs. Each integer can either be 0 (indicating the LED is off) or 1 (indicating the LED is on). You can perform a series of operations, where in each operation, you can select any subarray of continuous 1s and flip all the LED states in that subarray (i.e., turn 0s to 1s and 1s to 0s). Your task is to determine the minimum number of operations needed to turn all the LEDs off (i.e., make all elements of the array 0). Input The first line of input contains a single integer n (1 ≤ n ≤ 100 000) — the number of LEDs. The second line of input contains a string s, consisting of n characters \'0\' and \'1\', representing the initial states of the LEDs. Output Print a single integer, the minimum number of operations needed to turn all the LEDs off. Examples Input 6 110011 Output 2 Input 4 1111 Output 1 Input 5 10001 Output 2 Input 2 10 Output 1","solution":"def min_operations_to_turn_off_leds(n, s): Returns the minimum number of operations needed to turn all the LEDs off. count = 0 within_one_segment = False for char in s: if char == \'1\' and not within_one_segment: count += 1 within_one_segment = True elif char == \'0\': within_one_segment = False return count"},{"question":"A company manufactures widget units on a production line. Each widget requires a specific processing time, but due to maintenance activities, the production line can only be active for a limited number of consecutive hours each period. Given the production capacity of the line per period and the list of widgets with their processing times, determine the maximum number of widgets that can be produced in a single period. Input The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10 000), the number of widgets to be produced and the number of available production hours in one period, respectively. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 10 000) — the processing time required for each widget. Output Print a single integer representing the maximum number of widgets that can be produced during one period. Examples Input 5 15 2 5 8 3 6 Output 3 Input 4 10 3 7 2 4 Output 3 Note In the first example, the maximum number of widgets that can be produced is by choosing the widgets with processing times 2, 5, and 8 which together sum up to 15 hours. In the second example, the maximum number of widgets that can be produced is by choosing the widgets with processing times 3, 2, and 4 which together sum up to 9 hours, leaving 1 hour unused.","solution":"def max_widgets(n, k, processing_times): Calculates the maximum number of widgets that can be produced in a single period. :param n: int - Number of widgets :param k: int - Number of available production hours :param processing_times: List of int - Processing times required for each widget :return: int - Maximum number of widgets that can be produced in one period processing_times.sort() current_hours = 0 count = 0 for time in processing_times: if current_hours + time <= k: current_hours += time count += 1 else: break return count"},{"question":"Given a binary tree, where each node has an integer value. Write a function that computes the height of the tree. The height of a binary tree is the number of edges from the root to the deepest leaf. An empty tree has height -1, and a tree with a single node has a height of 0. Input A binary tree represented as a sequence of nested tuples. Each tuple contains the node value (integer) and two children (which may be None or another tuple representing a subtree). Output An integer representing the height of the tree. Examples Input (3, (9, None, None), (20, (15, None, None), (7, None, None))) Output 2 Input (1, (2, (4, None, None), (5, None, None)), (3, None, None)) Output 2 Function Signature ```python def tree_height(root: tuple) -> int: # Implementation here ```","solution":"def tree_height(root: tuple) -> int: Computes the height of the binary tree. The height is the number of edges from the root to the deepest leaf. Parameters: root (tuple): A root node of the binary tree represented as a nested tuple. Returns: int: The height of the binary tree. if root is None: return -1 else: value, left, right = root left_height = tree_height(left) if left else -1 right_height = tree_height(right) if right else -1 return 1 + max(left_height, right_height)"},{"question":"A new amusement park is opening in town, and they have installed a unique feature called the \\"Raindrop Ride\\". The ride involves several raindrops falling from a sequence of clouds positioned in a straight line. Each raindrop falls straight down to a unique puddle on the ground. The ride\'s success can be measured in terms of the attractiveness of the puddle pattern formed on the ground. You have been given the initial heights of the clouds and the heights of the raindrops in the form of two arrays. The task is to determine the final pattern of puddles on the ground after all the raindrops have fallen. You are given a sequence of n integers representing the heights of n clouds from left to right. You are also given a sequence of n integers that represent the heights of raindrops falling from each corresponding cloud. A raindrop will fall from the i-th cloud and add its height to the puddle directly below it. All the puddles start with a height of zero. Write a function `raindrop_ride(n, clouds, raindrops)` that calculates and returns the final heights of the puddles on the ground after all the raindrops have fallen. # Input: - An integer n (1 ≤ n ≤ 105): the number of clouds and raindrops. - An array `clouds` of n integers representing the heights of the clouds (1 ≤ clouds[i] ≤ 109). - An array `raindrops` of n integers representing the heights of the raindrops (1 ≤ raindrops[i] ≤ 109). # Output: - An array of n integers representing the final heights of the puddles on the ground. # Example: Input: ``` n = 3 clouds = [4, 2, 1] raindrops = [3, 1, 2] ``` Output: ``` [3, 1, 2] ``` In this example: - The 1st cloud is 4 units high, dropping a raindrop of 3 units, leading to a final puddle height of 3 units. - The 2nd cloud is 2 units high, dropping a raindrop of 1 unit, leading to a final puddle height of 1 unit. - The 3rd cloud is 1 unit high, dropping a raindrop of 2 units, leading to a final puddle height of 2 units.","solution":"def raindrop_ride(n, clouds, raindrops): Returns the final heights of the puddles on the ground after all the raindrops have fallen. Parameters: n (int): The number of clouds and raindrops. clouds (list): A list of n integers representing the heights of the clouds. raindrops (list): A list of n integers representing the heights of the raindrops. Returns: list: A list of n integers representing the heights of the puddles. puddles = [0] * n for i in range(n): puddles[i] += raindrops[i] return puddles"},{"question":"Given two natural numbers, A and B, your task is to determine if it is possible to transform A into B or vice versa through a series of operations. In each operation, you can either add or subtract 1 from the current number. However, you can also repeat this addition or subtraction operation several times in one move. Specifically, you can perform the following actions: 1. Add 1 a single time. 2. Subtract 1 a single time. 3. Add N times in one move. 4. Subtract N times in one move. You need to find the minimum number of operations required to transform A into B. Input The first line contains two space-separated integers A and B (1 ≤ A, B ≤ 10^9). Output Output a single integer — the minimum number of operations needed to transform A into B. Examples Input 8 14 Output 1 Input 7 1 Output 1 Input 10 5 Output 1 Note In the first example, you can reach from 8 to 14 by performing the addition operation 6 times in one move. In the second example, you reach from 7 to 1 by performing the subtraction operation 6 times in one move. In the third example, you reach from 10 to 5 by performing the subtraction operation 5 times in one move.","solution":"def min_operations(A, B): return abs(A - B)"},{"question":"You are given a string consisting of lowercase English letters. You need to determine the frequencies of each letter in the string and then output the letters in alphabetical order along with their corresponding counts. Input The input is a single line containing a string of lowercase English letters. Output Output each letter that appears in the string along with its frequency, in alphabetical order, one per line in the format \\"letter: count\\". Examples Input: hello Output: e: 1 h: 1 l: 2 o: 1 Input: programming Output: a: 1 g: 2 i: 1 m: 2 n: 1 o: 1 p: 1 r: 2 Input: frequency Output: c: 1 e: 2 f: 1 n: 1 q: 1 r: 1 u: 1 y: 1","solution":"from collections import Counter def letter_frequencies(s): Returns the frequencies of each letter in the input string `s` in alphabetical order. counter = Counter(s) return {letter: counter[letter] for letter in sorted(counter)} def format_frequencies(freq_dict): Format the frequency dictionary into the required output format. return \'n\'.join(f\'{letter}: {count}\' for letter, count in freq_dict.items())"},{"question":"**Convert the Trees** You are given two binary trees. Each tree consists of nodes, and each node has an integer value. You need to determine if you can convert the first tree into the second tree by performing a series of moves. In each move, you can choose a node in the first tree and replace its value with the value of any node on the same level in the second tree. Two trees are considered to be the same if they have the same structure and the same node values. Your task is to write a program that determines whether it is possible to convert the first binary tree into the second binary tree using the described moves. # Input The input consists of two binary trees: * The first line contains an integer `N` which represents the number of levels in the trees. * The following `N` lines contain integers representing the nodes of the first tree level by level. * The following `N` lines contain integers representing the nodes of the second tree level by level. Each tree level is separated by a space, and nodes within each level are separated by a space. # Output Output `YES` if it is possible to convert the first tree into the second tree, otherwise, output `NO`. # Limits * `2 ≤ N ≤ 100` * Each level of the tree contains `2^level - 1` nodes. * Node values are integers within the range `[-1000, 1000]`. # Example Input 4 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 2 2 3 4 5 7 6 8 10 9 11 12 13 15 14 16 Output YES Explanation It is possible to convert the first tree into the second tree as follows: - No changes on level 1 (1 → 2) - Swap values in level 3 (6 ↔ 7) - Swap values in level 4 (10 ↔ 11, 14 ↔ 15) Therefore, the first tree can be converted into the second tree.","solution":"def can_convert_tree(n, tree1, tree2): Determines if it\'s possible to convert tree1 into tree2 by swapping nodes at the same level. Parameters: n (int): Number of levels in the trees. tree1 (list of list of int): The first tree represented level by level. tree2 (list of list of int): The second tree represented level by level. Returns: str: \\"YES\\" if it\'s possible to convert tree1 to tree2, otherwise \\"NO\\". for level in range(n): if sorted(tree1[level]) != sorted(tree2[level]): return \\"NO\\" return \\"YES\\" # Example n = 4 tree1 = [ [1], [3, 4], [5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16] ] tree2 = [ [2], [3, 4], [5, 7, 6, 8], [10, 9, 11, 12, 13, 15, 14, 16] ] print(can_convert_tree(n, tree1, tree2)) # Output: NO"},{"question":"You are a game developer creating a simple grid-based puzzle game. The game consists of a grid of size n x m filled with different types of blocks, where each block is represented by an integer. The objective of the game is to clear the grid by removing contiguous blocks of the same type that form a rectangle. To simplify, you need to write a function that checks whether any such rectangle exists in the given grid. A rectangle is defined by its four corners (top-left, top-right, bottom-left, and bottom-right), and all blocks within this rectangle must be of the same type. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next n lines each contain m integers separated by spaces, representing the grid. Output Output \\"YES\\" if there exists at least one rectangle of blocks with the same type. Otherwise, output \\"NO\\". Example Input 4 5 1 2 3 4 5 5 5 5 5 5 1 2 5 4 5 3 5 5 5 3 Output YES Explanation In the given example, there is a rectangle formed by blocks with the value \'5\' from (2, 1) to (2, 4) and (3, 1) to (3, 4). Note The grid given in the example has a rectangle where all blocks are of type \'5\'. Thus the output is \\"YES\\". If there is no such rectangle of blocks with the same type in the grid, the output should be \\"NO\\". Each block in the grid is represented by an integer.","solution":"def has_same_type_rectangle(n, m, grid): Function to check if there exists at least one rectangle of blocks with the same type in the given grid. Parameters: n (int): number of rows in the grid m (int): number of columns in the grid grid (list of list of int): the grid elements Returns: str: \\"YES\\" if there exists a rectangle of the same type blocks, otherwise \\"NO\\" for row in range(n): for col in range(m - 1): for k in range(col + 1, m): type_val = grid[row][col] if grid[row][k] == type_val: for temp_row in range(row + 1, n): if grid[temp_row][col] == type_val and grid[temp_row][k] == type_val: return \\"YES\\" return \\"NO\\""},{"question":"You are given a 2D grid of size `m x n` filled with non-negative integers where each integer represents the height of a cell. The rainwater trapped at any cell is given as the difference between the minimum of the maximum elevations of the surrounding cells and the elevation of the cell itself, but only if this difference is positive. Your task is to calculate the total amount of rainwater that can be trapped after raining. Input: The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100) representing the dimensions of the grid. Each of the next `m` lines contains `n` space-separated integers representing the heights of the grid cells. Output: Output a single integer representing the total amount of trapped rainwater. Example Input: 3 3 1 4 3 3 2 3 4 3 2 Output: 1 Note: In the example, only the cell at row 2, column 2 can trap water because it is surrounded by cells with greater or equal height. The trapped water amount is 1.","solution":"import heapq def trap_rain_water(height_map): if not height_map or not height_map[0]: return 0 m, n = len(height_map), len(height_map[0]) if m <= 2 or n <= 2: return 0 visited = [[False] * n for _ in range(m)] heap = [] # Push all the boundary cells into the heap for i in range(m): heapq.heappush(heap, (height_map[i][0], i, 0)) heapq.heappush(heap, (height_map[i][n-1], i, n-1)) visited[i][0] = visited[i][n-1] = True for j in range(1, n-1): heapq.heappush(heap, (height_map[0][j], 0, j)) heapq.heappush(heap, (height_map[m-1][j], m-1, j)) visited[0][j] = visited[m-1][j] = True total_water = 0 directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] while heap: height, x, y = heapq.heappop(heap) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: visited[nx][ny] = True trapped_water = max(0, height - height_map[nx][ny]) total_water += trapped_water heapq.heappush(heap, (max(height, height_map[nx][ny]), nx, ny)) return total_water"},{"question":"Given a rectangular grid of cells with `n` rows and `m` columns, each cell can either be empty or contain an obstacle. Polycarp wants to travel from the top-left cell (1, 1) to the bottom-right cell (n, m). He can move to an adjacent cell (left, right, up, or down) but cannot move into cells that contain obstacles. Polycarp can also destroy at most one obstacle on his way. Determine the minimum number of steps required for Polycarp to reach the bottom-right cell, or report that it is impossible. Input The first line contains three integers `t` (1 ≤ t ≤ 100) — the number of testcases. The first line of each testcase contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. The next `n` lines of each testcase contain `m` characters each — the grid description, where each character is either: - \'.\' (empty cell), - \'#\' (cell containing an obstacle). Output For each test case, print one integer — the minimum number of steps required for Polycarp to reach the bottom-right cell, or -1 if it is impossible. Example Input 2 3 3 .#. .#. ... 3 3 .#. .#. #.# Output 4 -1 Explanation In the first testcase, Polycarp can destroy the obstacle in the middle to reach the bottom-right cell in 4 steps. In the second testcase, even though Polycarp can destroy one obstacle, there is no possible way to reach the bottom-right cell as at least two obstacles block any possible path.","solution":"from collections import deque def min_steps(t, test_cases): def is_valid(x, y, n, m): return 0 <= x < n and 0 <= y < m def bfs(grid, n, m): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0, False)]) # (x, y, steps, destroyed) visited = [[[False, False] for _ in range(m)] for __ in range(n)] # [not destroyed, destroyed] visited[0][0][0] = True while queue: x, y, steps, destroyed = queue.popleft() if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, n, m): if grid[nx][ny] == \'.\' and not visited[nx][ny][destroyed]: visited[nx][ny][destroyed] = True queue.append((nx, ny, steps+1, destroyed)) if grid[nx][ny] == \'#\' and not destroyed and not visited[nx][ny][1]: visited[nx][ny][1] = True queue.append((nx, ny, steps+1, True)) return -1 results = [] for case in test_cases: n, m, grid = case results.append(bfs(grid, n, m)) return results # Example usage: # t = 2 # test_cases = [(3, 3, [\\".#.\\", \\".#.\\", \\"...\\"]), (3, 3, [\\".#.\\", \\".#.\\", \\"#.#\\"])] # print(min_steps(t, test_cases)) # Output: [4, -1]"},{"question":"John is preparing for a marathon that spans N kilometers. He can only run 2 kilometers in an hour. Given the distance of the marathon, calculate how many hours it will take John to complete the marathon. If the distance is not a whole number multiple of 2, round up to the next whole hour since John cannot leave the marathon incomplete. Constraints * 1 leq N leq 1000 * The input distance N is an integer. Input Input is given from Standard Input in the following format: N Output Print the number of hours it will take John to complete the marathon. Examples Input 5 Output 3 Input 10 Output 5 Input 1 Output 1","solution":"import math def hours_to_complete_marathon(N): Calculate the number of hours it will take John to complete a marathon of N kilometers, given that he runs at a constant pace of 2 kilometers per hour. return math.ceil(N / 2)"},{"question":"Mina is playing a board game which involves moving a token across an N x N grid. The token starts at the top-left corner of the grid (position [0,0]) and Mina can only move the token to the right or downward one cell at a time. Mina wants to count how many different paths exist that will take the token from the top-left corner to the bottom-right corner (position [N-1, N-1]). Write a function to help Mina determine the number of unique paths. Input An integer N (1 ≤ N ≤ 20), which represents the dimension of the grid. Output Output a single integer which represents the number of unique paths. Examples Input 3 Output 6 Input 2 Output 2","solution":"def count_paths(N): Counts the number of unique paths from the top-left corner to the bottom-right corner on an N x N grid where movements are only allowed to the right or downward. # Create a 2D list (N x N) initialized to 0 dp = [[0] * N for _ in range(N)] # Set the number of ways to reach any cell in the first row or first column to 1, # since there\'s only one way to get to those cells (all right or all down). for i in range(N): dp[i][0] = 1 dp[0][i] = 1 # Fill the dp table for i in range(1, N): for j in range(1, N): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner will have the number of unique paths return dp[-1][-1]"},{"question":"Input The input consists of a single string s (1 ≤ length(s) ≤ 100), containing only lowercase letters. Output Output the count of vowels (a, e, i, o, u) present in the string. Example Input hello Output 2","solution":"def count_vowels(s): Returns the count of vowels (a, e, i, o, u) in the string s. vowels = \\"aeiou\\" return sum(1 for char in s if char in vowels)"},{"question":"In a programming course, students are asked to complete coding assignments on a popular online platform. Data for each student includes their unique student_id, the assignment_id of each completed assignment, and the time taken to complete each assignment (in minutes). The task is to identify the student who has spent the most total time on completing assignments and return their student_id, along with the total time. If multiple students have the same total time, return the student with the largest student_id. Input - The first line contains an integer n (1 ≤ n ≤ 1000), the number of records. - Each of the next n lines contains three values: student_id (a positive integer), assignment_id (a positive integer), and time (a positive integer), separated by spaces. Output - A single line containing two values: the student_id of the student with the maximum total time spent on assignments, and their total time. Examples Input 5 101 1 30 102 2 40 101 2 60 103 1 50 102 1 20 Output 101 90 Input 3 201 1 25 202 1 25 203 1 25 Output 203 25","solution":"def find_top_student(n, records): total_times = {} for record in records: student_id, _, time = record if student_id in total_times: total_times[student_id] += time else: total_times[student_id] = time max_time = -1 top_student = -1 for student_id, total_time in total_times.items(): if total_time > max_time or (total_time == max_time and student_id > top_student): max_time = total_time top_student = student_id return top_student, max_time"},{"question":"You are given a set of coins with different denominations and an integer `n` representing a total amount of money. Your goal is to determine the fewest number of coins needed to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. The denominations of the coins and the total amount are provided as input. You need to implement an algorithm to find the minimum number of coins required. Input The first line contains two integers `m` and `n` (1 ≤ m ≤ 100, 0 ≤ n ≤ 10^4) — the number of different coin denominations and the total amount of money. The second line contains `m` integers `c1, c2, ..., cm` (1 ≤ ci ≤ 10^4) — the value of each coin denomination. Output Print one integer — the minimum number of coins required to make up the amount `n`, or -1 if it is not possible. Examples Input 3 11 1 2 5 Output 3 Input 2 3 2 7 Output -1 Explanation In the first example, the fewest number of coins needed to make up 11 is 3 (5 + 5 + 1). In the second example, it is not possible to make up the amount 3 with denominations 2 and 7.","solution":"def min_coins(m, n, denominations): Finds the minimum number of coins needed to make up amount n. If it\'s not possible, returns -1. :param m: The number of different coin denominations. :param n: The total amount of money. :param denominations: A list of coin denominations. :return: Minimum number of coins required to make up n or -1 if not possible. # Create an array to store the minimum number of coins required for each amount up to n. # Initialize dp array with a value greater than any possible number of coins (n+1). dp = [float(\'inf\')] * (n + 1) dp[0] = 0 # Base case: 0 coins to make amount 0. for coin in denominations: for i in range(coin, n + 1): dp[i] = min(dp[i], dp[i - coin] + 1) # If dp[n] is still float(\'inf\'), it means it\'s not possible to make amount n with the given coins. return dp[n] if dp[n] != float(\'inf\') else -1"},{"question":"You are given a grid of size n x n filled with numbers. Your task is to help a robot find its way from the top-left corner of the grid to the bottom-right corner. The robot can only move either down or right at any point in time. Your goal is to determine the minimum sum of the numbers on the path from the top-left to the bottom-right corner. Input The first line contains a single integer n (1 ≤ n ≤ 500), the size of the grid. Each of the next n lines contains n space-separated integers representing the grid of numbers (1 ≤ grid[i][j] ≤ 105). Output Output a single integer which is the minimum sum of the path from the top-left to the bottom-right corner. Examples Input 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 1 2 1 1 Output 3 Explanation In the first example, the path 1 -> 3 -> 1 -> 1 -> 1 leads to the minimum sum of 7. In the second example, the path 1 -> 1 -> 1 leads to the minimum sum of 3.","solution":"def min_path_sum(grid): Returns the minimum sum of the path from the top-left to the bottom-right corner in the grid. n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the DP table for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1]"},{"question":"In a magical forest, there are N trees arranged in a straight line, each with a certain height. A tree is considered special if the height of that tree is greater than the height of every previous tree. You are tasked with determining the number of special trees in the forest. Input: First line will contain integer N, the number of trees in the forest. Next line will contain N integers, each representing the height of a tree in the order they appear. Output: Print a single integer, the number of special trees in the forest. Constraints: 1 ≤ N ≤ 1000000 1 ≤ Height of each tree ≤ 1000000 SAMPLE INPUT 6 2 3 1 5 4 6 SAMPLE OUTPUT 4 Explanation The special trees are as follows: - The first tree with height 2 is special because it\'s the first one. - The second tree with height 3 is special because 3 > 2. - The fourth tree with height 5 is special because 5 > 3. - The sixth tree with height 6 is special because 6 > 5.","solution":"def count_special_trees(N, heights): Returns the count of special trees in the forest. A tree is considered special if its height is greater than the height of every previous tree. :param N: int - Number of trees. :param heights: List[int] - List containing the heights of the trees in the order they appear. :return: int - Number of special trees. if N == 0: return 0 special_count = 0 max_height_so_far = 0 for height in heights: if height > max_height_so_far: special_count += 1 max_height_so_far = height return special_count"},{"question":"Two competitors, Alice and Bob, are playing a game involving an array. Initially, there is an array consisting of n numbers. Alice and Bob take turns to play, Alice goes first. During each turn, the current player must select a non-empty contiguous subarray of the current array and remove it, reducing the array size. The score of the removed subarray is the sum of elements in that subarray. The player with the maximum score at the end of the game wins. Both players play optimally to maximize their scores. Determine if Alice will win, or if the game will end in a draw with both players having the same score. Input The first line contains an integer n (1 ≤ n ≤ 100). The second line contains n integers a1, a2, ..., an (-100 ≤ ai ≤ 100) representing the array elements. Output Print \\"Alice\\" if Alice wins, \\"Draw\\" if the game ends in a tie. Examples Input 3 1 -2 3 Output Alice Input 4 -1 -2 -3 -4 Output Draw Input 5 1 2 3 -3 5 Output Alice","solution":"def alice_wins(n, array): Determines if Alice wins or if the game ends in a draw. total_sum = sum(array) if total_sum > 0: return \\"Alice\\" else: return \\"Draw\\""},{"question":"Given two integers, b and n, as inputs, print the value of b raised to the power of n. Constraints * 1 leq b leq 10 * 0 leq n leq 5 * b and n are integers. Input Input is given from Standard Input in the following format: b n Output Print the value of b raised to the power of n as an integer. Examples Input 2 3 Output 8 Input 5 0 Output 1","solution":"def power(b, n): Returns the value of b raised to the power of n. Args: b (int): the base number, where 1 ≤ b ≤ 10 n (int): the exponent, where 0 ≤ n ≤ 5 Returns: int: the value of b raised to the power of n return b ** n"},{"question":"Given an array of integers and a target integer, write a function to determine if there are two distinct indices in the array such that the difference between the elements at these indices is equal to the target integer. Input The first line contains two space-separated integers `n` (1 ≤ n ≤ 10^5) and `k` (-10^9 ≤ k ≤ 10^9), where `n` is the number of elements in the array, and `k` is the target difference. The second line contains `n` space-separated integers representing the elements of the array. Output Output \\"YES\\" if there are two distinct indices `i` and `j` such that the absolute difference of the elements at these indices is equal to `k`. Otherwise, output \\"NO\\". Examples Input 5 2 1 5 3 4 2 Output YES Input 4 0 1 2 3 4 Output NO Note In the first example, the indices `1` and `3` (`5 - 3 = 2`), or indices `3` and `5` (`4 - 2 = 2`) satisfy the condition. In the second example, there is no pair of indices with a difference of `0`.","solution":"def has_pair_with_difference(arr, k): Determine if there are two distinct indices in the array such that the difference between the elements at these indices is equal to the target integer k. :param arr: List of integers :param k: Target difference :return: \'YES\' if such a pair exists, otherwise \'NO\' seen = set() for num in arr: if num + k in seen or num - k in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"During the annual Hackathon, a coding challenge includes a problem that involves \\"peak elements\\" in an array. An element is called a peak element if it is strictly greater than its neighboring elements. For corner elements, the neighbor is the adjacent element. Your task is to find all peak elements\' indices in the array. You are given an integer array of size n. Your goal is to write a program that outputs the indices of all peak elements in the array. If the array has multiple peak elements, you need to find all their indices. If there are no peak elements, output an empty list. Input: The first line contains a single integer t (1 ≤ t ≤ 200) — the number of test cases. The next t lines describe the test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 1000) — the size of the array. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the elements of the array. Output: For each test case, print the indices of all peak elements in the array. Example: Input: 3 5 1 3 2 4 1 3 1 1 1 4 2 3 5 1 Output: 1 3 (empty line) 2 Explanation: In the first test case, the elements at indices 1 and 3 (0-based indexing) are 3 and 4, respectively, which are greater than their neighboring elements. In the second test case, there are no elements greater than their neighbors as all elements are equal. In the third test case, the element at index 2 is 5, which is greater than its neighboring elements 3 and 1.","solution":"def find_peak_elements(test_cases): results = [] for case in test_cases: n, arr = case peaks = [] for i in range(n): if i == 0: if n == 1 or arr[i] > arr[i + 1]: peaks.append(i) elif i == n - 1: if arr[i] > arr[i - 1]: peaks.append(i) else: if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: peaks.append(i) results.append(peaks) return results # Example usage: # test_cases = [ # (5, [1, 3, 2, 4, 1]), # (3, [1, 1, 1]), # (4, [2, 3, 5, 1]) # ] # print(find_peak_elements(test_cases)) # Output should be [[1, 3], [], [2]]"},{"question":"In a certain city, there is a rectangular grid of streets represented as an m x n matrix. Each cell in the matrix represents a block of houses, and each block has some number of houses assigned to it. The number of houses in each block is given in a 2D array `houses`. You are a mailman, starting at the top-left corner of the grid (i.e., at position (0, 0)), and your goal is to deliver mail to the bottom-right corner (i.e., position (m-1, n-1)). From any given block, you can only move to the right or down. Given the grid dimensions `m` and `n`, and the 2D array `houses` (where `houses[i][j]` represents the number of houses in the block at row `i` and column `j`), write a function to calculate the minimum number of houses you need to deliver mail to if you take the optimal path from the top-left corner to the bottom-right corner. Function Signature: `def min_houses_to_deliver(m: int, n: int, houses: List[List[int]]) -> int:` **Input** - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100), the dimensions of the grid. - The next `m` lines each contain `n` integers, representing the 2D array `houses`, where each integer is between 0 and 1000 inclusive. **Output** - Print a single integer, the minimum number of houses you need to deliver mail to. **Example** Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 ``` In the example, the optimal path is from (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2), with the total houses being 1+3+1+1+1 = 7. This is the minimal path sum. **Note** - You can only move right or down in the grid. - The solution should be computed efficiently within the given constraints.","solution":"from typing import List def min_houses_to_deliver(m: int, n: int, houses: List[List[int]]) -> int: # Create a 2D list for storing the minimum number of houses for each block. dp = [[0] * n for _ in range(m)] # Initialize the starting block dp[0][0] = houses[0][0] # Initialize the edges of the grid for i in range(1, m): dp[i][0] = dp[i-1][0] + houses[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + houses[0][j] # Fill in the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = houses[i][j] + min(dp[i-1][j], dp[i][j-1]) # The answer will be in the bottom-right corner of the array return dp[m-1][n-1]"},{"question":"Given an undirected graph G with N nodes and M edges, write a program to find the number of connected components in the graph. A connected component in a graph is a maximal set of nodes such that there is a path between any two nodes in this set. Input The first line contains two integers N and M (1 ≤ N ≤ 1000, 0 ≤ M ≤ 10000) — the number of nodes and the number of edges of the graph. Then follow M lines, each containing two integers u and v (1 ≤ u, v ≤ N) — the endpoints of each edge. Output Print the number of connected components in the graph. Examples Input 4 2 1 2 2 3 Output 2 Input 6 5 1 2 2 3 3 4 5 6 6 5 Output 2","solution":"def find_connected_components(n, edges): from collections import defaultdict, deque def bfs(start): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() components = 0 for node in range(1, n + 1): if node not in visited: components += 1 bfs(node) return components"},{"question":"You are given an array of integers where every element appears three times except for one, which appears exactly once. Find that single one. Your algorithm should perform in linear runtime complexity and use only constant extra space. Input Format: The first line of the input contains a single integer, tc, denoting the number of test cases. The next tc lines each contain: - An integer, n, denoting the size of the array. - An array of n integers where every element appears three times except for one. Output Format: For each test case, print the single element that appears only once. Constraints: 1 ≤ tc ≤ 100 3 ≤ n ≤ 10^5 -2^31 ≤ array elements ≤ 2^31 - 1 SAMPLE INPUT 2 7 2 2 3 2 4 4 4 10 5 5 5 10 20 20 20 30 30 30 SAMPLE OUTPUT 3 10 Explanation In the first test case, the array is [2, 2, 3, 2, 4, 4, 4], where every element except 3 appears three times. Thus, the answer is 3. In the second test case, the array is [5, 5, 5, 10, 20, 20, 20, 30, 30, 30], where every element except 10 appears three times. Thus, the answer is 10.","solution":"def single_element(nums): This function finds the element that appears exactly once in an array where every other element appears exactly three times. ones, twos = 0, 0 for num in nums: # Accumulate num into twos if num is also in ones twos |= ones & num # XOR num with ones to track the num occurrence ones ^= num # Determine common bits in ones and twos common_bits = ones & twos # Remove common bits from ones and twos ones &= ~common_bits twos &= ~common_bits return ones def process_input(tc, test_cases): results = [] for i in range(tc): n = test_cases[i][0] nums = test_cases[i][1] single = single_element(nums) results.append(single) return results"},{"question":"Given two integers `h` and `w` representing the height and width of a fence grid, you need to find out if it is possible to draw a closed path on this grid using `+` characters such that every `+` is adjacent to exactly two other `+` characters, either vertically or horizontally. A valid closed path must be a single continuous loop without intersections or branches. Input: The first line contains two integers `h` and `w` (1 ≤ h, w ≤ 1000) — the height and width of the grid. Output: Print \\"YES\\" if it is possible to draw at least one closed path on the grid with the described properties. Otherwise, print \\"NO\\". Examples: Input: ``` 4 4 ``` Output: ``` YES ``` Input: ``` 3 5 ``` Output: ``` NO ``` Explanation: In the first example, a 4x4 grid can have a closed path like: ``` ++++ + + ++++ ``` In the second example, a 3x5 grid cannot have a closed path where each `+` character is adjacent to exactly two other `+` characters, which means it is impossible to form such a closed loop.","solution":"def can_draw_closed_path(h, w): Determines if it is possible to draw a closed path in a h x w grid where every \'+\' is adjacent to exactly two other \'+\' characters. # A closed path requires even dimensions, as any odd dimension cannot # accommodate a continuous loop that meets the criteria. if h % 2 == 0 and w % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Problem Statement There is a spaceship that needs to pass through a series of space gates to reach its destination. Each space gate has a specific time window during which it is open. Your task is to determine if the spaceship can successfully pass through all the spaces gates given its start time. The spaceship travels at a constant speed, and it takes a fixed amount of time to travel from one space gate to the next. If the spaceship arrives at a gate before it opens, it will have to wait until the gate is open to pass through it. If it arrives after the gate closes, it won\'t be able to pass through that gate. You will be given the number of space gates `N`, the start time of the spaceship `start_time`, and the travel time between each consecutive space gate `travel_time`. Additionally, you will be provided with the time windows for each space gate (open and close times). Constraints * 2 <= N <= 100 * travel_time is a positive integer (minutes) * start_time and all open/close times are represented by \\"HH:MM\\" where HH is an integer between 00 and 23 and MM is an integer between 00 and 59. Input Each data set is input in the following format: ``` N start_time travel_time open_time1 close_time1 open_time2 close_time2 ... open_timeN close_timeN ``` - `N` is an integer representing the number of space gates. - `start_time` is the start time of the spaceship. - `travel_time` is the travel time between each consecutive space gate in minutes. - Each of the next `N` lines contains two times, `open_timei` and `close_timei`, representing the open and close times of the i-th space gate. Output Output \\"YES\\" if the spaceship can pass through all the space gates, otherwise output \\"NO\\". Examples Input ``` 3 10:00 30 09:30 09:50 10:20 10:40 11:00 11:20 ``` Output ``` NO ``` Input ``` 4 08:00 60 08:00 09:00 09:00 10:00 10:00 11:00 11:00 12:00 ``` Output ``` YES ``` Input ``` 5 12:00 45 12:00 12:30 12:50 13:10 13:35 13:50 14:20 14:30 15:00 15:15 ``` Output ``` NO ```","solution":"from datetime import datetime, timedelta def can_pass_through_gates(N, start_time, travel_time, gates): Determines if the spaceship can successfully pass through all the space gates. :param N: Number of space gates :param start_time: Start time of the spaceship in \\"HH:MM\\" format :param travel_time: Travel time between consecutive space gates in minutes :param gates: List of tuples representing open and close times of gates [(open1, close1), (open2, close2), ...] :return: \\"YES\\" if the spaceship can pass through all gates, otherwise \\"NO\\" current_time = datetime.strptime(start_time, \\"%H:%M\\") travel_duration = timedelta(minutes=travel_time) for open_time, close_time in gates: open_time = datetime.strptime(open_time, \\"%H:%M\\") close_time = datetime.strptime(close_time, \\"%H:%M\\") # Arrive at the gate current_time += travel_duration if current_time > close_time: return \\"NO\\" # Wait until the gate opens if necessary if current_time < open_time: current_time = open_time return \\"YES\\""},{"question":"Given a list of intervals representing the working hours of multiple people in a team, find the maximum number of people working simultaneously at any given point in time. Each interval is represented by a tuple (start_time, end_time), where start_time and end_time are integers representing the time in hours on a 24-hour clock (0 ≤ start_time < end_time ≤ 24). Input The first line contains a single integer n — the number of intervals (1 ≤ n ≤ 1000). Next n lines each contain two integers start_time and end_time separated by space, representing the working hours of a person. Output Print a single integer — the maximum number of people working simultaneously at any given point in time. Examples Input 5 1 4 2 6 4 7 5 9 7 10 Output 3 Input 3 0 2 1 3 2 5 Output 2 Note In the first example, there are three people working simultaneously between hours 4 and 6. Therefore, the output is 3. In the second example, there are two people working simultaneously between hours 1 and 2 as well as hours 2 and 3. Therefore, the output is 2.","solution":"from typing import List, Tuple def max_people_working_simultaneously(n: int, intervals: List[Tuple[int, int]]) -> int: events = [] for start, end in intervals: events.append((start, \'start\')) events.append((end, \'end\')) events.sort() current_people = 0 max_people = 0 for time, event_type in events: if event_type == \'start\': current_people += 1 max_people = max(max_people, current_people) else: current_people -= 1 return max_people"},{"question":"Write a function that takes a list of integers as input and returns a list of the integers sorted in non-decreasing order. However, if an integer is negative, it retains its position in the new list. The sorting should only affect the non-negative integers. Example: 1) Input : [4, -2, 3, -1, 0] Output: [0, -2, 3, -1, 4] 2) Input : [-1, -3, 2, 1, 0] Output: [-1, -3, 0, 1, 2] SAMPLE INPUT [3, -1, 2, -5, -9, 1] SAMPLE OUTPUT [1, -1, 2, -5, -9, 3] Explanation The non-negative integers (3, 2, and 1) are sorted while the negative integers (-1, -5, and -9) remain in their original positions.","solution":"def sort_except_negatives(lst): Returns a list of integers sorted in non-decreasing order, but negative integers retain their positions. # Extract non-negative integers and sort them. non_negatives = sorted([num for num in lst if num >= 0]) # Iterator over sorted non-negative integers. iter_non_negatives = iter(non_negatives) # Create the result by replacing non-negative integers with the sorted ones. result = [next(iter_non_negatives) if num >= 0 else num for num in lst] return result"},{"question":"Robotic company RoboX has developed a warehouse system utilizing robots to manage the inventory. Each robot can pick up items from designated positions and deliver them to requested positions within the warehouse grid. The warehouse grid is represented as a 2D grid with wire shelves at certain positions. Robots can move up, down, left, or right by one shelf per step, and can carry only one item at a time. Given the initial positions of the robots and their respective item pickups and deliveries, calculate the minimum time each robot needs to complete their tasks. Input: The first line of the input contains two integers, `n` (1 ≤ n ≤ 100), the number of robots, and `m` (1 ≤ m ≤ 500), the maximum dimension of the grid. The next `n` lines each contain four integers `x1` `y1` `x2` `y2` (0 ≤ x1, y1, x2, y2 < m), where (`x1`, `y1`) is the initial position of the robot and (`x2`, `y2`) is the position it needs to deliver the item to. The robots can move simultaneously and independent of each other. Output: Print `n` integers, each representing the minimum time required for each robot to complete its task (one per line). Example: Input 3 10 1 2 3 4 0 0 9 9 5 5 5 5 Output 4 18 0 Explanation: - Robot 1 needs to move from (1, 2) to (3, 4). It can travel up in 4 steps (right 2 steps and down 2 steps). - Robot 2 has a longer journey and it can travel in 18 steps (right 9 steps and down 9 steps). - Robot 3 is already at the required position, so it takes 0 steps. Note that the robots do not interfere with each other, reflecting the independent nature of each robot\'s task.","solution":"def robot_movement(n, m, positions): Calculate the minimum time each robot needs to complete their tasks. Args: n (int): Number of robots. m (int): Maximum dimension of the grid. positions (list of tuples): Each tuple contains x1, y1, x2, y2 - start and end coordinates for robots. Returns: list of int: Minimum time for each robot. times = [] for x1, y1, x2, y2 in positions: time = abs(x2 - x1) + abs(y2 - y1) times.append(time) return times"},{"question":"You are tasked with maintaining a water distribution network. The network consists of N reservoirs connected by M unidirectional pipes. Each reservoir is represented by a node, and each pipe is represented by a directed edge with a specific flow capacity. The goal is to maximize the water flow from the main reservoir (node 0) to the destination reservoir (node N-1). To achieve this, you need to find the maximum flow possible through the network using the Edmonds-Karp algorithm, an implementation of the Ford-Fulkerson method for computing the maximum flow in a flow network. Input The first line contains two integers, N (2 ≤ N ≤ 500) and M (1 ≤ M ≤ 10000), representing the number of reservoirs and the number of pipes, respectively. The following M lines each contain three integers U, V, and C (0 ≤ U, V < N, U ≠ V, 1 ≤ C ≤ 1000), indicating that there is a pipe from reservoir U to reservoir V with a flow capacity of C. Output A single integer, the maximum flow from the main reservoir (node 0) to the destination reservoir (node N-1). Example Input 6 9 0 1 16 0 2 13 1 2 10 1 3 12 2 1 4 2 4 14 3 2 9 3 5 20 4 3 7 4 5 4 Output 23 Explanation To maximize the flow from node 0 to node 5, one optimal way is to send: - 12 units from 0 → 1 → 3 → 5 - 11 units from 0 → 2 → 4 → 5 The total maximum flow is 12 + 11 = 23 units.","solution":"from collections import deque def bfs(capacity, source, sink, parent): visited = [False] * len(capacity) queue = deque([source]) visited[source] = True while queue: current = queue.popleft() for adj, cap in enumerate(capacity[current]): if not visited[adj] and cap > 0: queue.append(adj) visited[adj] = True parent[adj] = current if adj == sink: return True return False def edmonds_karp(n, m, edges): source = 0 sink = n - 1 capacity = [[0] * n for _ in range(n)] for u, v, c in edges: capacity[u][v] += c parent = [-1] * n max_flow = 0 while bfs(capacity, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] capacity[u][v] -= path_flow capacity[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow"},{"question":"You are given a list of n integers and a single integer target. Your task is to determine whether there exist two distinct indices i and j in the list such that the sum of the elements at those indices is equal to the target. Write a function `find_pair` that returns a boolean value: - True if such a pair exists. - False if no such pair exists. # Input The function `find_pair` takes the following inputs: - An integer list `nums` of length n (1 ≤ n ≤ 10^5), consisting of integers (-10^9 ≤ nums[i] ≤ 10^9). - An integer `target` (-10^9 ≤ target ≤ 10^9). # Output The function should return a boolean value. # Examples Input ```python nums = [1, 2, 3, 9] target = 8 ``` Output ```python False ``` Input ```python nums = [1, 2, 4, 4] target = 8 ``` Output ```python True ``` Input ```python nums = [1, 5, 7, -1, 5] target = 10 ``` Output ```python True ``` # Note In the first example, there are no two numbers that sum up to 8. In the second example, the last two numbers sum up to 8. In the third example, there are multiple pairs that sum up to 10 (5 + 5 and 7 + 3). The function should return True as soon as it finds any one such pair.","solution":"def find_pair(nums, target): Determines if there exist two distinct indices in the list such that their sum equals the target. Args: nums: List of integers target: The target sum Returns: Boolean indicating whether such a pair exists num_set = set() for num in nums: if target - num in num_set: return True num_set.add(num) return False"},{"question":"You are given a string S consisting of only uppercase English letters. Find the length of the longest substring of S that forms a palindrome. If there are multiple longest palindromic substrings, return the length of any one of them. Constraints: * 1 leq |S| leq 10^5 Input: The input consists of a single line containing the string S. Output: Print the length of the longest palindromic substring. Examples: Input: BANANA Output: 5 Input: ABCD Output: 1 Input: AABBCCAABBAA Output: 6 Input: HELLONOLLEH Output: 11","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string s. n = len(s) if n == 0: return 0 # table[i][j] will be True if substring s[i..j] is a palindrome table = [[False] * n for _ in range(n)] max_length = 1 # All substrings of length 1 are palindromes for i in range(n): table[i][i] = True start = 0 for i in range(n - 1): if s[i] == s[i + 1]: table[i][i + 1] = True start = i max_length = 2 # check for lengths greater than 2 for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 if table[i + 1][j - 1] and s[i] == s[j]: table[i][j] = True if k > max_length: start = i max_length = k return max_length"},{"question":"Inland Security is tasked with setting up checkpoints on a grid of roads to monitor the transportation between various cities. The grid consists of n rows and m columns, representing n north-south and m east-west roads respectively. Each intersection of a north-south and an east-west road is a possible place for a checkpoint. The security team has determined p critical intersections which must have checkpoints. However, due to budget constraints, not every intersection can be fitted with a checkpoint, so they must place checkpoints in such a way that the required p critical intersections are covered by at least one checkpoint along either the row or the column. Your task is to determine the minimum number of rows and columns combined that need to be monitored (placing a checkpoint on a row or on a column monitors all intersections in that row or column) to ensure all critical intersections have security presence. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The description of t test cases follows. Each test case starts with a line containing three space-separated integers n, m, p (1 ≤ n, m ≤ 100, 1 ≤ p ≤ n⋅m) — the number of rows, the number of columns, and the number of critical intersections, respectively. Each of the next p lines of the test case contains two space-separated integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m), representing the row and column of a critical intersection. Output For each test case, output the minimum number of rows and columns required to monitor all critical intersections. Examples Input 2 3 4 3 1 2 2 3 3 4 2 2 2 1 1 2 2 Output 3 2","solution":"def minimum_monitored_rows_columns(t, test_cases): results = [] for case in test_cases: n, m, p, critical_intersections = case rows = set() cols = set() for intersection in critical_intersections: r, c = intersection rows.add(r) cols.add(c) results.append(min(len(rows), len(cols), p)) return results # Read input def read_input(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) m = int(data[index + 1]) p = int(data[index + 2]) index += 3 critical_intersections = [] for _ in range(p): r = int(data[index]) c = int(data[index + 1]) critical_intersections.append((r, c)) index += 2 test_cases.append((n, m, p, critical_intersections)) return t, test_cases # Uncomment these lines to run the function with input from standard input # t, test_cases = read_input() # results = minimum_monitored_rows_columns(t, test_cases) # for result in results: # print(result)"},{"question":"Jennifer has recently started coding and loves puzzles. She came across a challenge where she needs to rearrange letters of a string and check if it can form a palindrome. A string is a palindrome if it reads the same backward as forward. Given a string s of length n, help Jennifer determine if it\'s possible to rearrange the letters of s to form a palindrome. Input The first line contains an integer n (1 ≤ n ≤ 1000), the length of the string. The second line contains a string s of length n, consisting of lowercase English letters. Output Output \\"YES\\" if it is possible to rearrange the letters of the string to form a palindrome, otherwise output \\"NO\\". Examples Input 7 racecar Output YES Input 4 aabb Output YES Input 5 abcde Output NO Note In the first test, \\"racecar\\" is already a palindrome. In the second test, the string \\"aabb\\" can be rearranged to \\"abba\\" which is a palindrome. In the third test, it is impossible to rearrange the string \\"abcde\\" to form a palindrome.","solution":"def can_form_palindrome(n, s): Determine if it\'s possible to rearrange the letters of s to form a palindrome. :param n: Length of the string :param s: The string to check :return: \\"YES\\" if it\'s possible to rearrange the letters to form a palindrome, otherwise \\"NO\\" from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd count if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"You are given an array of n integers. Your task is to find the length of the longest subarray where every number appears at least twice. Input The first line contains one number n (1 ≤ n ≤ 105), the size of the array. The second line contains n integers ai (1 ≤ ai ≤ 106), representing elements of the array. Output Output one integer: the length of the longest subarray where every element appears at least twice. If no such subarray exists, output 0. Examples Input 7 4 3 4 3 5 6 4 Output 4 Input 5 1 2 3 4 5 Output 0 Input 6 2 1 2 3 1 3 Output 6 Note In the first example, the subarray from index 1 to 4 ([4, 3, 4, 3]) has every element appearing at least twice. The subarray from index 4 to 7 ([3, 5, 6, 4]) is not valid because not all elements appear at least twice. In the second example, there is no subarray where every element appears at least twice, so the output is 0. In the third example, the entire array satisfies the condition, hence the output is 6.","solution":"def longest_subarray_with_all_elements_at_least_twice(n, arr): from collections import defaultdict def all_elements_at_least_twice(subarray): counts = defaultdict(int) for elem in subarray: counts[elem] += 1 return all(count >= 2 for count in counts.values()) max_length = 0 # Check all possible subarrays for start in range(n): for end in range(start + 1, n + 1): subarray = arr[start:end] if all_elements_at_least_twice(subarray): max_length = max(max_length, end - start) return max_length"},{"question":"You are given an array of integers `arr` and a target integer `target`. Your task is to find the number of unique pairs of integers in the array that add up to the `target`. Each pair should consist of two distinct indexes `i` and `j` such that `arr[i] + arr[j] == target` and `i != j`. Note that pairs (i, j) and (j, i) are considered the same and should not be counted twice. Input: - The first line contains two integers `n` (1 ≤ n ≤ 10^4) and `target` (-10^5 ≤ target ≤ 10^5), where `n` is the number of elements in the array. - The second line contains `n` integers separated by spaces, representing the array `arr` (|arr[i]| ≤ 10^5). Output: - A single integer representing the number of unique pairs that add up to the `target`. Examples: Input: ``` 5 6 1 5 7 -1 5 ``` Output: ``` 2 ``` Input: ``` 4 2 1 1 1 1 ``` Output: ``` 1 ``` Input: ``` 6 8 1 1 6 8 1 2 ``` Output: ``` 1 ``` Note: In the first sample case, the pairs that add up to the target are (1, 5) and (7, -1). Since we are considering unique pairs, the combination counts are considered once. In the second sample case, the pairs that add up to the target are (1, 1). Only one pair is counted as unique. In the third sample case, the pairs that add up to the target are (1, 7) and (6, 2). However, only (1, 7) is counted as unique.","solution":"def count_unique_pairs(arr, target): seen = set() pairs = set() for number in arr: complement = target - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return len(pairs)"},{"question":"Given an undirected graph, determine if the graph is bipartite. A graph is bipartite if the vertices can be divided into two disjoint sets such that no two vertices within the same set are adjacent. In other words, you can color the graph using two colors in such a way that no two adjacent vertices share the same color. Input: The input begins with a line containing two integers V and E (2 ≤ V ≤ 1000, 1 ≤ E ≤ 10000), where V is the number of vertices and E is the number of edges. The next E lines each contain two space-separated integers u and v (1 ≤ u, v ≤ V) representing an edge between vertex u and vertex v. Output: Output \\"Yes\\" if the given graph is bipartite, otherwise output \\"No\\". Example Input 5 4 1 2 2 3 3 4 4 5 Output Yes Input 3 3 1 2 2 3 3 1 Output No Explanation: In the first example, the graph can be divided into sets {1, 3, 5} and {2, 4}. There are no edges between vertices within the same set, thus the graph is bipartite. In the second example, the graph forms a triangle, which means it\'s impossible to split the vertices into two sets such that no two vertices within the same set are adjacent, hence the graph is not bipartite.","solution":"from collections import deque def is_bipartite(V, E, edges): Checks if the given graph is bipartite. V: int - The number of vertices E: int - The number of edges edges: List[Tuple[int, int]] - List of edges Returns: \\"Yes\\" if the graph is bipartite, otherwise \\"No\\". # Initialize the graph graph = [[] for _ in range(V + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) # -1: Not colored, 0: Color 0, 1: Color 1 color = [-1] * (V + 1) # Function to perform BFS def bfs(start): queue = deque([start]) color[start] = 0 # Start coloring with 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: # Assign the opposite color to the neighbor color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: # Found a conflict return False return True for i in range(1, V + 1): if color[i] == -1: # Not colored yet if not bfs(i): return \\"No\\" return \\"Yes\\""},{"question":"A group of friends has decided to play a game where they send coded messages to each other by shifting letters in the alphabet. Each letter in the alphabet is shifted a certain number of places down the alphabet, wrapping back around to the beginning if necessary (so a shift by 1 of \'z\' would give \'a\'). To decode a message, you need to shift each letter in the opposite direction by the same number of places. For example, if a letter was shifted by 3 places to the right to encode it, you need to shift it by 3 places to the left to decode it. You are tasked with writing a program that can decode a given message based on a shift value. Input The first line of input contains a single integer T (1 <= T <= 100), representing the number of test cases. Each test case consists of two lines: 1. An integer S (1 <= S <= 25), representing the shift value. 2. A string M, representing the encoded message. The string M will only contain lowercase alphabetic characters and will have a length between 1 and 100 inclusive. Output For each test case, output the decoded message on a new line. Sample Input 3 3 khoor 2 jgnnq 5 mjqqt Sample Output hello hello hello Explanation - In the first test case, the shift value is 3. Shifting each letter of \'khoor\' 3 places to the left in the alphabet gives \'hello\'. - In the second test case, the shift value is 2. Shifting each letter of \'jgnnq\' 2 places to the left in the alphabet gives \'hello\'. - In the third test case, the shift value is 5. Shifting each letter of \'mjqqt\' 5 places to the left in the alphabet gives \'hello\'.","solution":"def decode_message(shift, message): Decodes the given message by shifting each letter in the opposite direction by the given shift value. Parameters: shift (int): The shift value. message (str): The encoded message. Returns: str: The decoded message. decoded_message = [] for char in message: # Finding the original character by shifting back by \'shift\' places original_char = chr((ord(char) - ord(\'a\') - shift) % 26 + ord(\'a\')) decoded_message.append(original_char) return \'\'.join(decoded_message) def process_test_cases(T, test_cases): Processes multiple test cases and returns the decoded messages. Parameters: T (int): The number of test cases. test_cases (list): A list of tuples where each tuple contains the shift value and the encoded message. Returns: list: A list of decoded messages. results = [] for shift, message in test_cases: results.append(decode_message(shift, message)) return results"},{"question":"A string is called beautiful if no two consecutive letters are the same. For example, \\"abab\\", \\"cdcd\\", \\"a\\", and \\"abc\\" are beautiful strings, while \\"aab\\", \\"ccc\\", and \\"nn\\" are not. You are given a string S consisting only of lowercase English letters, and you need to transform it into a beautiful string. In one operation, you can replace any letter of the string with any other lowercase English letter. Determine the minimum number of operations required to transform the given string into a beautiful string. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S. Output For each test case, output the minimum number of operations required to make the given string beautiful on a new line. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 Example Input 3 aab ccc abacaba Output 1 2 0 Explanation - For the string \\"aab\\", we can change the second \'a\' to \'b\' to get \\"abb\\". - For the string \\"ccc\\", we need to change the first \'c\' to \'a\' and the third \'c\' to \'b\' to get \\"cac\\" or any other combination where no two consecutive letters are the same. - The string \\"abacaba\\" is already beautiful, so no change is needed. Therefore, the number of operations required is 0.","solution":"def min_operations_to_beautiful(S): Calculate the minimum number of operations required to make the string beautiful. if len(S) <= 1: return 0 operations = 0 for i in range(1, len(S)): if S[i] == S[i-1]: operations += 1 # Operation to change current character # Change S[i] to any other character # It\'s enough to increment the operations count because we won\'t actually modify the string. return operations def process_multiple_test_cases(test_cases): results = [] for S in test_cases: result = min_operations_to_beautiful(S) results.append(result) return results"},{"question":"You are given a binary search tree (BST) with n nodes. Each node of the BST contains an integer value and a pointer to its left and right child nodes. Your task is to implement a function that deletes a given node from the BST while preserving the properties of the BST. The properties of a BST are: - The left subtree of a node contains only nodes with values less than the node’s value. - The right subtree of a node contains only nodes with values greater than the node’s value. - Both the left and right subtrees must also be binary search trees. Your function should take two inputs: - The root node of the BST. - An integer value representing the node to be deleted. Your function should return the root node of the modified BST after the deletion has been performed. If the node with the given value does not exist, the BST should remain unchanged. Function Signature ```python def delete_node(root: TreeNode, value: int) -> TreeNode: # your implementation here ``` # Constraints - The BST will not contain duplicates. - 1 ≤ n ≤ 1000 - All node values are distinct integers in the range [1, 10^4]. # Examples Input ``` root = [5, 3, 6, 2, 4, null, 7] value = 3 ``` The BST looks like this: ``` 5 / 3 6 / 2 4 7 ``` Output ``` root = [5, 4, 6, 2, null, null, 7] ``` Modified BST looks like this: ``` 5 / 4 6 / 2 7 ``` Input ``` root = [5, 3, 6, 2, 4, null, 7] value = 0 ``` Output ``` root = [5, 3, 6, 2, 4, null, 7] ``` Explanation: The node with value `0` does not exist, so the BST remains unchanged.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def delete_node(root: TreeNode, value: int) -> TreeNode: if root is None: return None if value < root.val: root.left = delete_node(root.left, value) elif value > root.val: root.right = delete_node(root.right, value) else: if root.left is None: return root.right elif root.right is None: return root.left min_larger_node = get_min(root.right) root.val = min_larger_node.val root.right = delete_node(root.right, root.val) return root def get_min(node: TreeNode) -> TreeNode: while node.left is not None: node = node.left return node"},{"question":"In a faraway kingdom, there\'s a game played with magical stones. Each stone has a magical value associated with it, and wizards from around the kingdom participate in this game. In this game, each wizard has a stone and they can trade stones with each other if certain conditions are met. The game has the following operations: 1. **Trade (2 x y)**: A wizard with stone `x` can trade his stone with another wizard having stone `y` only if the magic value of both stones is the same. If the trade is successful, the wizards swap their stones. If the trade is not possible (i.e., magic values of both stones are different), print \\"Trade not possible!\\". If a single wizard tries to trade his stone with himself, print \\"Invalid trade!\\". 2. **Evaluate (3 x)**: This operation asks for the current magic value of the stone that wizard `x` currently holds. You are given the initial magic values of the stones and a set of operations to perform. Your task is to execute these operations and print the results. # Input - The first line of input contains an integer `T` denoting the number of test cases. - Each test case starts with an integer `N` denoting the number of wizards (and stones). - The next line contains `N` space-separated integers where the `i-th` integer represents the magic value of the stone that the i-th wizard holds initially. - The subsequent line contains an integer `Q` denoting the number of operations. - `Q` lines follow, each containing either of the operations \\"2 x y\\" or \\"3 x\\". # Output For each \'Evaluate\' operation print the current magic value of the stone that the specified wizard holds. For a \'Trade\' operation, print the result as described. # Constraints - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 1000 - 1 ≤ magic value ≤ 10^6 - 1 ≤ Q ≤ 1000 - 1 ≤ x, y ≤ N # Example Input ``` 1 3 5 10 5 4 2 1 3 3 1 2 1 2 3 2 ``` Output ``` Trade successful! 10 Trade not possible! 10 ``` # Explanation For the given test case: 1. Wizards 1 and 3 can trade as both stones have the same magical value of 5. After trading, wizard 1 holds stone 3\'s value and vice versa. Thus, trade is successful. 2. Evaluate wizard 1\'s stone magic value, which is now 5. 3. Wizards 1 and 2 cannot trade as their stones have different magical values (5 and 10 respectively). Thus, trade is not possible. 4. Evaluate wizard 2\'s stone magic value, which remains 10.","solution":"def process_trades_and_evaluations(T, cases): results = [] for case in cases: N, stones, Q, operations = case stones = {i+1: stones[i] for i in range(N)} for operation in operations: op = operation[0] if op == 2: x, y = operation[1], operation[2] if x == y: results.append(\\"Invalid trade!\\") elif stones[x] == stones[y]: stones[x], stones[y] = stones[y], stones[x] results.append(\\"Trade successful!\\") else: results.append(\\"Trade not possible!\\") elif op == 3: x = operation[1] results.append(str(stones[x])) return results"},{"question":"A robotic arm is designed to operate on a 2-dimensional grid. The arm starts at the coordinate (0, 0) and can move in the four cardinal directions (N, S, E, W) based on given commands. Each command will move the arm one unit in the specified direction (N for north, S for south, E for east, and W for west). The arm is equipped with a sensor that records all the coordinates it visits. However, due to noise in the sensor data, the coordinates may appear in any order. Given the sensor data, determine if the robotic arm visited the same coordinate more than once. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of coordinates recorded by the sensor. Each of the next n lines contains two integers x and y (-1000 ≤ x, y ≤ 1000), representing the x and y coordinates recorded by the sensor. Output Print \\"YES\\" if the robotic arm visited the same coordinate more than once. Otherwise, print \\"NO\\". Examples Input 5 0 0 1 0 0 1 -1 0 0 0 Output YES Input 4 0 0 1 1 2 2 3 3 Output NO","solution":"def has_duplicate_visit(n, coordinates): Determines if the robotic arm visited the same coordinate more than once. Parameters: - n: int, the number of coordinates recorded by the sensor. - coordinates: list of tuples, each tuple contains two integers x and y representing coordinates. Returns: - str: \\"YES\\" if the same coordinate was visited more than once, otherwise \\"NO\\". visited = set() for coordinate in coordinates: if coordinate in visited: return \\"YES\\" visited.add(coordinate) return \\"NO\\""},{"question":"A local delivery company wants to optimize its delivery routes. The company has one central warehouse and several delivery points distributed in a city. A delivery truck will start from the warehouse, deliver packages to all the points, and return to the warehouse. The company uses a bidirectional road network where roads have different travel times due to traffic conditions. To minimize fuel consumption and operational costs, the company wants to know the minimum total travel time for a round trip that visits all delivery points exactly once. Write a program to determine this minimum travel time. Input The first line of input consists of two integers n and m (2 ≤ n ≤ 12, 1 ≤ m ≤ 100), where n is the number of delivery points (including the warehouse) and m is the number of roads. Each of the next m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 100), meaning that there is a road between point u and point v with a travel time of t. All roads are bidirectional. Output Output a single integer — the minimum total travel time for a round trip that visits all delivery points exactly once and returns to the warehouse. Example Input 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 Output 80 In this example, the optimal route is 1 -> 2 -> 4 -> 3 -> 1 with a total travel time of 80.","solution":"import itertools def calculate_min_travel_time(n, roads): # Create a 2D array (matrix) to store the travel times between points travel_times = [[float(\'inf\')] * n for _ in range(n)] # Fill in the travel times from the roads data for u, v, t in roads: travel_times[u-1][v-1] = t travel_times[v-1][u-1] = t # Initialize the minimum travel time min_travel_time = float(\'inf\') # Generate all permutations of delivery points (except the first point, which is the starting point) points = list(range(1, n)) for perm in itertools.permutations(points): # Calculate the travel time for this permutation current_time = 0 current_time += travel_times[0][perm[0]] for i in range(len(perm) - 1): current_time += travel_times[perm[i]][perm[i + 1]] current_time += travel_times[perm[-1]][0] # Update the minimum travel time min_travel_time = min(min_travel_time, current_time) return min_travel_time def minimum_travel_time(n, m, roads): return calculate_min_travel_time(n, roads)"},{"question":"In a futuristic city, drones are deployed to deliver packages. The drones operate on an n x n grid, where each cell in the grid can either be an obstacle or a free space. The drones can move up, down, left, or right, but not diagonally. The goal is to calculate the minimum number of moves a drone needs to deliver a package from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1). If there is no way to reach the destination, the function should return -1. Write a function that takes the following arguments: - n: an integer (1 ≤ n ≤ 1000), representing the size of the grid. - grid: a list of n strings of length n, where each string consists of characters \'0\' (free space) and \'1\' (obstacle). The function should return the minimum number of moves required to reach the destination, or -1 if it is impossible. Input The first line contains an integer, n. The next n lines each contain a string of length n, representing the grid. Output Print a single integer, the minimum number of moves required, or -1 if it is impossible to reach the destination. Examples Input 4 0000 1100 0010 0000 Output 6 Input 3 010 111 000 Output -1 Note: In the first example, one possible path from the top-left to the bottom-right corner is: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3). Thus, it takes 6 moves. In the second example, there is no possible path from the top-left to the bottom-right corner due to obstacles blocking the way. Therefore, the function returns -1.","solution":"from collections import deque def min_moves(n, grid): if n == 0 or grid[0][0] == \'1\' or grid[n-1][n-1] == \'1\': return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False] * n for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: row, col, dist = queue.popleft() if row == n-1 and col == n-1: return dist for direction in directions: new_row, new_col = row + direction[0], col + direction[1] if 0 <= new_row < n and 0 <= new_col < n and not visited[new_row][new_col] and grid[new_row][new_col] == \'0\': queue.append((new_row, new_col, dist + 1)) visited[new_row][new_col] = True return -1"},{"question":"Ryan is an art curator who likes to organize paintings in series. Each painting is represented by a unique integer identifier. He has a unique way of defining a series: a series is an ordered subset of consecutive paintings, for instance, {1, 2, 3} is a valid series but {2, 4, 5} is not. Given an array of integers representing the unique IDs of paintings and an integer M, Ryan wants to find all the unique series of length exactly M that can be formed. Each painting can only be used once per series. Write a program that takes an array of integers and integer M as input and outputs all possible series of length M in lexicographic order. If no such series can be formed, output -1. Input: - The first line contains the number of test cases T. - Each test case consists of two parts: 1. An integer M. 2. An array of unique integers representing the painting IDs. Output: For each test case, print all the series of length M in lexicographical order, each on a separate line. If no such series can be formed, print -1. Constraints: 1 ≤ T ≤ 50 1 ≤ M ≤ 20 1 ≤ Length of array ≤ 100 1 ≤ Painting IDs ≤ 10^5 Example Input: 2 3 1 2 3 4 5 4 10 12 14 16 18 Example Output: 1 2 3 2 3 4 3 4 5 -1 Explanation: In the first test case, there are several series of length 3 that can be formed: {1, 2, 3}, {2, 3, 4}, {3, 4, 5}. In the second test case, it\'s impossible to form a series of length 4 with the given painting IDs. Hence, the output is -1.","solution":"def find_series_of_length_m(test_cases): Finds all possible series of length M in lexicographic order and prints them. If no such series can be formed, prints -1. results = [] for M, paintings in test_cases: paintings = sorted(paintings) valid_series = [] for i in range(len(paintings) - M + 1): current_series = paintings[i:i + M] if all(current_series[j] + 1 == current_series[j + 1] for j in range(M - 1)): valid_series.append(current_series) if valid_series: for series in valid_series: results.append(\\" \\".join(map(str, series))) else: results.append(\\"-1\\") return results"},{"question":"You are given a list of integers. Your task is to create a new list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`. Write a program to solve this problem without using division. Input The first line of the input contains an integer `n` (2 ≤ n ≤ 1000), the number of elements in the list. The second line contains `n` integers separated by space, representing the elements of the list. Each integer is between -1000 and 1000, inclusive. Output Print `n` integers separated by space, where the `i-th` integer is the product of all elements in the original list except the `i-th` one. Examples Input 4 1 2 3 4 Output 24 12 8 6 Input 3 2 3 4 Output 12 8 6","solution":"def product_except_self(nums): Returns a new list such that each element at index i of the new list is the product of all the numbers in the original list except the one at i. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n for i in range(1, n): left_products[i] = left_products[i-1] * nums[i-1] for i in range(n-2, -1, -1): right_products[i] = right_products[i+1] * nums[i+1] for i in range(n): result[i] = left_products[i] * right_products[i] return result # Example usage: n = 4 nums = [1, 2, 3, 4] print(product_except_self(nums)) # Output: [24, 12, 8, 6]"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge is colored either red or green. Determine if it is possible to divide all vertices into two groups such that there are no two vertices within each group connected by a red edge, and no two vertices in different groups connected by a green edge. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of vertices and edges in the graph, respectively. The next m lines contain three integers u, v, and c (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c ≤ 2) — denoting an edge between vertices u and v with color c. If c = 1, the edge is red; if c = 2, the edge is green. Output Print \\"YES\\" if it is possible to divide all vertices as described. Otherwise, print \\"NO\\". Examples Input 4 4 1 2 1 2 3 2 3 4 1 4 1 2 Output YES Input 5 6 1 2 1 2 3 1 3 4 1 4 5 1 5 1 2 2 4 2 Output NO Note In the first example, the vertices can be split into two groups {1, 3} and {2, 4}. Vertices within each group are not connected by red edges, and there are no green edges connecting vertices from different groups. In the second example, it\'s not possible to split the vertices into two groups as required.","solution":"from collections import defaultdict, deque def is_possible_to_divide(n, m, edges): graph = defaultdict(list) for u, v, c in edges: graph[u].append((v, c)) graph[v].append((u, c)) color = [-1] * (n + 1) def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor, edge_color in graph[node]: if color[neighbor] == -1: # If not colored if edge_color == 1: color[neighbor] = color[node] # Same color for red edge within the group else: color[neighbor] = 1 - color[node] # Different color for green edge across groups queue.append(neighbor) else: if (edge_color == 1 and color[neighbor] != color[node]) or (edge_color == 2 and color[neighbor] == color[node]): return False return True for i in range(1, n + 1): if color[i] == -1: if not bfs(i): return \\"NO\\" return \\"YES\\" # Here is an example of how to use this function: # n, m = 4, 4 # edges = [(1, 2, 1), (2, 3, 2), (3, 4, 1), (4, 1, 2)] # print(is_possible_to_divide(n, m, edges)) # Output should be \'YES\'"},{"question":"John has a garden with a variety of flowers each identified by a unique integer ID. He wants to create a beautiful flower arrangement for a special event. However, he has a peculiar rule for choosing the flowers for the arrangement: he wants the arrangement to consist of flowers in consecutive IDs (with no gaps in between) and the total number of flowers in the arrangement must be even. Given a list of flower IDs, help John determine the maximum number of flowers he can choose while satisfying his rule. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of flower IDs available. The second line contains n distinct integers representing the flower IDs (1 ≤ ID ≤ 10000). Output Print the maximum number of flowers in the largest arrangement John can create while following his rule. Examples Input 5 1 3 5 6 7 Output 2 Input 7 2 3 5 6 7 8 10 Output 4","solution":"def max_even_consecutive_flowers(n, flower_ids): Returns the maximum number of flowers in the largest arrangement that John can create while following the rule of consecutive IDs and even total number of flowers. Parameters: - n: int, number of flower IDs available. - flower_ids: list of int, distinct flower IDs. Returns: - int, the maximum number of flowers in the largest valid arrangement. flower_ids.sort() max_flowers = 0 for i in range(n): for j in range(i + 1, n): if (j - i + 1) % 2 == 0 and is_consecutive(flower_ids[i:j+1]): max_flowers = max(max_flowers, j - i + 1) return max_flowers def is_consecutive(sub_list): Checks if all elements in the sub_list are consecutive numbers. Parameters: - sub_list: list of int, a subset of flower IDs. Returns: - bool, True if all elements are consecutive, False otherwise. return all(sub_list[i] + 1 == sub_list[i + 1] for i in range(len(sub_list) - 1))"},{"question":"You are given a grid of n x m (n rows and m columns), where each cell contains either \'0\' or \'1\'. A cell with \'1\' is considered a point. The task is to find the largest rectangle (in terms of the number of cells) containing only \'1\'s and return its area. Input The first line contains two integers n (1 ≤ n ≤ 200) and m (1 ≤ m ≤ 200) — the dimensions of the grid. Each of the next n lines contains a string of length m consisting of \'0\'s and \'1\'s representing the grid. Output Output an integer representing the area of the largest rectangle containing only \'1\'s. Examples Input 4 4 1010 1011 1111 0011 Output 6 Input 3 3 111 110 011 Output 4 Input 5 6 011011 111010 110110 111111 010011 Output 6 Note In the first sample, the largest rectangle containing only \'1\'s has an area of 6, made up of the bottom-right six \'1\'s. In the second sample, the largest rectangle containing only \'1\'s has an area of 4, formed by the top-left four \'1\'s. And in the third sample, the calculations of the largest rectangle made of \'1\'s gives an area of 6.","solution":"def maximalRectangle(matrix): if not matrix: return 0 n, m = len(matrix), len(matrix[0]) heights = [0] * (m + 1) max_area = 0 for i in range(n): for j in range(m): if matrix[i][j] == \'1\': heights[j] += 1 else: heights[j] = 0 stack = [-1] for j in range(m + 1): while heights[j] < heights[stack[-1]]: h = heights[stack.pop()] w = j - 1 - stack[-1] max_area = max(max_area, h * w) stack.append(j) return max_area def parse_and_solve(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) matrix = [list(line) for line in lines[1:n+1]] return maximalRectangle(matrix) # Sample usage with provided example: # input_str = \\"4 4n1010n1011n1111n0011\\" # print(parse_and_solve(input_str)) # Output: 6"},{"question":"You are given a rectangular grid of cells with dimensions n by m. Each cell contains an integer value. You need to process q queries of two types: * 1 r1 c1 r2 c2 — for the subgrid that spans from (r1, c1) to (r2, c2), find the maximum value and print it. * 2 r c v — update the cell at position (r, c) with the new value v. Note that the subgrid for the first query is defined by its top-left corner (r1, c1) and its bottom-right corner (r2, c2). The subgrid includes both the top-left and bottom-right corners. Input The first line contains three integers n, m, and q (1 ≤ n, m ≤ 500, 1 ≤ q ≤ 3000). Each of the next n lines contains m integers describing the grid. The j-th integer in the i-th row corresponds to the value in the cell at position (i, j). Each of the next q lines describes a query in one of the following formats: * 1 r1 c1 r2 c2 — denotes a query of the first type (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m). * 2 r c v — denotes a query of the second type (1 ≤ r ≤ n, 1 ≤ c ≤ m, -10^9 ≤ v ≤ 10^9). Output For every query of the first type, print the maximum value found in the specified subgrid. Example Input 5 5 5 1 2 3 4 5 5 4 3 2 1 1 1 1 1 1 2 2 2 2 2 5 5 5 5 5 1 1 1 3 3 2 1 1 6 1 1 1 3 3 1 4 4 5 5 1 1 1 5 5 Output 5 6 5 6","solution":"def process_queries(grid, queries): Process the grid based on given queries and return the results of max value queries. :param grid: List of lists representing the initial grid :param queries: List of queries, where each query is a list :return: List of results for max value queries results = [] n = len(grid) m = len(grid[0]) if n > 0 else 0 for query in queries: if query[0] == 1: # max value query r1, c1, r2, c2 = query[1:] max_val = float(\'-inf\') for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): max_val = max(max_val, grid[i][j]) results.append(max_val) elif query[0] == 2: # update value query r, c, v = query[1:] grid[r - 1][c - 1] = v return results"},{"question":"A team in a large software company organizes tasks by priority in a to-do list. Each task has a unique task ID and an assigned priority level (an integer, where a lower number indicates higher priority). The list is continually updated as tasks are added and completed. Your program must implement a simple task manager that supports the following operations: 1. Add a new task with a given priority. 2. Complete the next task (the one with the highest priority). 3. Query the ID of the next task to be completed without removing it from the list. To simplify, these operations will be represented in the input as: 1. \\"ADD <task_id> <priority>\\" : Add a new task with Task ID \'task_id\' and priority \'priority\'. 2. \\"SOLVE\\" : Complete the next task (remove it from the list). 3. \\"QUERY\\" : Print the Task ID of the next task to be completed. Implement a program to handle the to-do list based on the commands provided. The task IDs are unique integers and the priorities are non-negative integers. Constraints: - 1 ≤ Number of operations ≤ 100000 - Task ID and Priority are guaranteed to fit within 32-bit signed integers. Input The input consists of a list of operations. Each operation is provided on a new line. Output For each \\"QUERY\\" operation, print the Task ID of the next task to be completed. If there are no tasks to complete, print \\"No tasks\\". Example Input ``` ADD 1 3 ADD 2 1 QUERY ADD 3 2 SOLVE QUERY SOLVE QUERY SOLVE QUERY ``` Output ``` 2 3 1 No tasks No tasks ```","solution":"import heapq class TaskManager: def __init__(self): self.pq = [] self.task_map = {} self.counter = 0 def add_task(self, task_id, priority): heapq.heappush(self.pq, (priority, self.counter, task_id)) self.task_map[task_id] = (priority, self.counter) self.counter += 1 def solve_task(self): while self.pq and self.pq[0][2] not in self.task_map: heapq.heappop(self.pq) if self.pq: task = heapq.heappop(self.pq) del self.task_map[task[2]] def query_task(self): while self.pq and self.pq[0][2] not in self.task_map: heapq.heappop(self.pq) if self.pq: return self.pq[0][2] else: return \\"No tasks\\""},{"question":"You are given a binary string which only contains the characters \'0\' and \'1\'. You need to perform a series of flip operations and query operations on this string. In a flip operation, you can flip the bits between two given indices (inclusive). In a query operation, you need to return the count of \'1\'s within a given range of indices. Write a program to process a series of these operations on the binary string. Input The first line contains a binary string s (1 ≤ |s| ≤ 2·105). The second line contains an integer q (1 ≤ q ≤ 2·105) which is the number of operations. Each of the next q lines contains an operation in one of the following two formats: 1. \\"1 l r\\" for a flip operation, where 1 means flip, and l and r (1 ≤ l ≤ r ≤ |s|) are the indices of the string (1-based). 2. \\"2 l r\\" for a query operation, where 2 means query, and l and r (1 ≤ l ≤ r ≤ |s|) are the indices of the string (1-based). Output For each query operation, output the number of \'1\'s in the specified range on a new line. Example Input 1100 5 1 2 3 2 1 4 1 1 4 2 1 4 2 1 2 Output 2 2 1 Explanation Initially the binary string is \\"1100\\". After the first flip operation \\"1 2 3\\", the string becomes \\"1010\\". The first query \\"2 1 4\\" asks for the count of \'1\'s in the range (1, 4), which is 2. After the second flip operation \\"1 1 4\\", the string becomes \\"0101\\". The second query \\"2 1 4\\" asks for the count of \'1\'s in the range (1, 4), which is 2. The third query \\"2 1 2\\" asks for the count of \'1\'s in the range (1, 2), which is 1.","solution":"def flip_bits(binary_string, l, r): binary_list = list(binary_string) for i in range(l-1, r): binary_list[i] = \'1\' if binary_list[i] == \'0\' else \'0\' return \'\'.join(binary_list) def count_ones(binary_string, l, r): return binary_string[l-1:r].count(\'1\') def process_operations(s, operations): results = [] for operation in operations: op = operation.split() if op[0] == \'1\': l, r = int(op[1]), int(op[2]) s = flip_bits(s, l, r) elif op[0] == \'2\': l, r = int(op[1]), int(op[2]) results.append(count_ones(s, l, r)) return results # Example usage: # s = \\"1100\\" # operations = [\\"1 2 3\\", \\"2 1 4\\", \\"1 1 4\\", \\"2 1 4\\", \\"2 1 2\\"] # print(process_operations(s, operations))"},{"question":"A security company wants to automate the guarding schedule for their security guards. They have a series of properties that need to be guarded, each with a specific start and end time. Each guard can only be at one property at a time. You have been tasked with writing a program to determine the optimal number of guards needed such that all properties are guarded without any overlaps in a guard\'s schedule. # Input The input consists of multiple test cases. Each test case starts with an integer N (1 ≤ N ≤ 100), representing the number of properties. The next N lines each contain two integers, `start` and `end` (0 ≤ start < end ≤ 1000), representing the time (in 24-hour format) a property needs to be guarded. The input is terminated by a test case where N is zero, which should not be processed. # Output For each test case, output the minimum number of guards required on a new line. # Example Input ``` 3 1 5 2 6 4 8 2 9 12 11 15 0 ``` Output ``` 3 2 ``` # Explanation In the first test case, three properties need to be guarded: - Property 1: 1 to 5 - Property 2: 2 to 6 - Property 3: 4 to 8 To cover all properties without any overlapping times for a single guard, a minimum of 3 guards are required: - Guard 1 can cover Property 1 from 1 to 5. - Guard 2 can cover Property 2 from 2 to 6. - Guard 3 can cover Property 3 from 4 to 8. In the second test case: - Property 1: 9 to 12 - Property 2: 11 to 15 To cover Property 1 and Property 2 without overlap, a minimum of 2 guards are required: - Guard 1 can cover Property 1 from 9 to 12. - Guard 2 can cover Property 2 from 11 to 15.","solution":"def min_guards_needed(test_cases): def find_min_guards(intervals): # Sort intervals by start time intervals.sort() guards = [] for start, end in intervals: assigned = False for i in range(len(guards)): if guards[i] <= start: guards[i] = end assigned = True break if not assigned: guards.append(end) return len(guards) results = [] for intervals in test_cases: results.append(find_min_guards(intervals)) return results"},{"question":"In a small town, there is an election for the mayor\'s office. There are `n` candidates and each candidate\'s popularity score is represented by an integer in the range [1, m]. The election committee decided to hold a series of popularity contests to determine the winner. Each popularity contest can only include candidates whose popularity scores are within an inclusive range from `a` to `b`. A candidate wins a contest if they have the highest popularity score within the given range of the contest. If there are multiple candidates with the same highest score, the smallest index candidate is declared the winner. You are tasked to find the list of winners for each contest based on the provided ranges. Input First line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the number of candidates and the number of contests, respectively. Second line contains `n` integers `p_1, p_2, ..., p_n` (1 ≤ p_i ≤ m) — the popularity scores of the candidates. Each of the next `q` lines contains two integers `a` and `b` (1 ≤ a ≤ b ≤ n) — the range for each contest. Output For each contest, print the index of the winning candidate. Examples Input 5 3 4 3 5 2 1 1 3 2 4 1 5 Output 3 3 3 Input 4 2 1 2 2 1 1 2 3 4 Output 2 3 Note In the first example: - For the first contest with range [1, 3], candidates have popularity scores [4, 3, 5]. The highest score is 5 at index 3. - For the second contest with range [2, 4], candidates have popularity scores [3, 5, 2]. The highest score is 5 at index 3. - For the third contest with range [1, 5], candidates have popularity scores [4, 3, 5, 2, 1]. The highest score is 5 at index 3. In the second example: - For the first contest with range [1, 2], candidates have popularity scores [1, 2]. The highest score is 2 at index 2. - For the second contest with range [3, 4], candidates have popularity scores [2, 1]. The highest score is 2 at index 3.","solution":"def find_winners(n, q, popularity_scores, contests): Find the winners for each contest based on the provided ranges. Parameters: n (int): number of candidates q (int): number of contests popularity_scores (list): a list of integers representing the popularity scores contests (list): a list of tuples representing the ranges for each contest Returns: list: a list of integers representing the index of the winning candidate for each contest winners = [] for a, b in contests: # Convert to 0-based index selected_candidates = popularity_scores[a-1:b] max_score = max(selected_candidates) # Find the index of the first occurrence of the max score within the selected range winner_index = a - 1 + selected_candidates.index(max_score) winners.append(winner_index + 1) # Convert back to 1-based index return winners"},{"question":"You are a software engineer working on a simulation for a cargo loading system. You need to write a function that determines if a given set of cargo boxes can fit into a cargo hold of a ship. The cargo hold is a rectangular prism with a fixed width, height, and depth. Each cargo box is also a rectangular prism, and you can rotate each box to fit within the cargo hold. Specifically, you are given the dimensions of the cargo hold and a list of dimensions for each cargo box. You need to determine if it is possible to fit all the cargo boxes into the cargo hold without exceeding its dimensions and without any overlaps. You cannot break down the boxes, and each box must be inserted as a whole. You can rotate each box so that any of its sides align with the corresponding dimension of the cargo hold, but each box must remain a rectangular prism. Write a function `can_fit_in_cargo_hold` that takes the following parameters: - `cargo_hold`: a tuple of three integers `(W, H, D)` representing the width, height, and depth of the cargo hold. - `cargo_boxes`: a list of tuples, where each tuple contains three integers representing the dimensions of a cargo box. The function should return `True` if it is possible to fit all the cargo boxes into the cargo hold, and `False` otherwise. # Input - `cargo_hold` = (W, H, D) where 1 ≤ W, H, D ≤ 10000 - `cargo_boxes` = [(w1, h1, d1), (w2, h2, d2), ..., (wn, hn, dn)] where 1 ≤ wi, hi, di ≤ 10000 and 1 ≤ n ≤ 1000 # Output - Return `True` if it is possible to fit all the cargo boxes into the cargo hold, otherwise return `False`. # Examples Example 1 - Input: cargo_hold = (10, 10, 10), cargo_boxes = [(2, 2, 2), (3, 3, 3), (5, 5, 5)] - Output: True Example 2 - Input: cargo_hold = (5, 5, 5), cargo_boxes = [(4, 4, 6)] - Output: False Example 3 - Input: cargo_hold = (7, 7, 7), cargo_boxes = [(3, 3, 3), (4, 4, 4), (2, 5, 5)] - Output: True # Note In the first example, each cargo box can fit into the cargo hold with no overlaps within the confines of the dimensions. In the second example, the second cargo box cannot fit due to one dimension being larger than the cargo hold dimensions. In the third example, arranging each cargo box to fit within the hold is possible with no overlaps, respecting the cargo hold dimensions.","solution":"def can_fit_in_cargo_hold(cargo_hold, cargo_boxes): # Sorting the cargo boxes by volume in descending order cargo_boxes = sorted(cargo_boxes, key=lambda box: box[0]*box[1]*box[2], reverse=True) # Method to check if a box can fit within the cargo hold with any rotation def can_fit_box(box): w, h, d = cargo_hold for box_dim in [(box[0], box[1], box[2]), (box[0], box[2], box[1]), (box[1], box[0], box[2]), (box[1], box[2], box[0]), (box[2], box[0], box[1]), (box[2], box[1], box[0])]: if box_dim[0] <= w and box_dim[1] <= h and box_dim[2] <= d: return True return False # Check each box if it can fit within the cargo hold dimensions for box in cargo_boxes: if not can_fit_box(box): return False return True"},{"question":"Write a function that receives a list of integers and an integer k, and returns a list of integers in which each element is the sum of the corresponding element in the input list and k. You should assume that the list has at least one integer and that k is a non-negative integer. Input The input contains a list of integers and a non-negative integer k. Output Output a list of integers. Example Input [1, 2, 3, 4], 5 Output [6, 7, 8, 9]","solution":"def add_k_to_all_elements(lst, k): Returns a list where each element is the sum of the corresponding element in the input list and k. return [x + k for x in lst]"},{"question":"A security system records the entry and exit times of employees in a single day. For each entry and exit time pair, we need to determine the maximum number of employees present in the building at any given time during the day. Each entry and exit time are represented in minutes from the start of the day (0 to 1440). Input The first line contains an integer N (1 ≤ N ≤ 105) — the number of employees that entered and exited the building in the day. The following N lines each contain two integers E and L (0 ≤ E, L ≤ 1440) — the entry and exit times in minutes respectively. Output Output a single integer representing the maximum number of employees present in the building at any point in time. Example Input 3 60 120 100 200 150 300 Output 2 Explanation In this example: 1. The first employee enters at minute 60 and exits at minute 120. 2. The second employee enters at minute 100 and exits at minute 200. 3. The third employee enters at minute 150 and exits at minute 300. The first and second employees are in the building simultaneously between minute 100 and minute 120, making the maximum number of employees present at the same time 2.","solution":"def max_employees_present(n, intervals): events = [] for entry, exit in intervals: events.append((entry, 1)) # 1 for entry events.append((exit, -1)) # -1 for exit # Sort events, first by time, then by type to ensure exits are counted first if times are same events.sort(key=lambda x: (x[0], x[1])) current_count = 0 max_count = 0 for _, event in events: current_count += event if current_count > max_count: max_count = current_count return max_count"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Input A list of integers. Output A list containing only the prime numbers from the input list. The order of the elements in the output list should be the same as their order in the input list. Example Input [10, 3, 7, 15, 20, 11] Output [3, 7, 11]","solution":"def is_prime(n): Helper function to check if a number is a prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def filter_primes(lst): Returns a list containing only the prime numbers from the input list. return [x for x in lst if is_prime(x)]"},{"question":"You are given an array of n integers (both positive and negative) and a target integer k. Your task is to find the number of pairs of integers in the array whose product is exactly equal to k. Write a function `count_pairs_with_product` that takes in an array of integers and a target integer, and returns the number of such pairs. # Input - The first line contains an integer n (1 ≤ n ≤ 100) – the number of integers in the array. - The second line contains n integers, each of which is between -10^4 and 10^4 inclusive. - The third line contains an integer k (1 ≤ |k| ≤ 10^8) – the target product. # Output - Output a single integer – the number of pairs whose product is exactly equal to k. # Examples Example 1 **Input:** ``` 5 1 2 3 4 5 8 ``` **Output:** ``` 1 ``` **Explanation:** There is one pair (2, 4) whose product is 8. Example 2 **Input:** ``` 4 -1 -2 -3 -4 6 ``` **Output:** ``` 1 ``` **Explanation:** There is one pair (-3, -2) whose product is 6. Example 3 **Input:** ``` 6 2 6 -3 -2 3 2 -6 ``` **Output:** ``` 3 ``` **Explanation:** There are three pairs whose product is -6: (2, -3), (3, -2), and (6, -1).","solution":"def count_pairs_with_product(arr, k): Returns the number of pairs in the array whose product is equal to k. count = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): if arr[i] * arr[j] == k: count += 1 return count"},{"question":"Create a function that takes an array of integers and a target integer, and returns the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Write a program that implements this function. Input The function takes two inputs: 1. An integer array `arr` of length `N`, where 2 ≤ N ≤ 10^4. 2. An integer `target`. Output Return a tuple (or list) containing the indices of the two numbers that add up to the target. Constraints - Each input will have exactly one solution. - You may not use the same element twice. Example Input: arr = [2, 7, 11, 15] target = 9 Output: [0, 1] Explanation: arr[0] + arr[1] = 2 + 7 = 9","solution":"def two_sum(arr, target): Returns the indices of the two numbers in `arr` that add up to `target`. :param arr: List of integers :param target: Target integer :return: List containing the indices of the two numbers index_map = {} for index, num in enumerate(arr): complement = target - num if complement in index_map: return [index_map[complement], index] index_map[num] = index return None"},{"question":"Bessie and the cows are participating in a friendly competition involving arrays and need your assistance. They start with an array containing n positive integers. They then perform a series of m operations on this array, which can be one of the following: 1. Replace the integer at position pi with the integer vi. 2. Reverse the entire array. 3. Rotate the array to the right by ri positions. After each operation, Bessie and the cows would like to know the maximum element in the array. Help them! # Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the length of the array and the number of operations respectively. The second line contains n positive integers ai (1 ≤ ai ≤ 10^9) — the elements of the array. The next m lines describe the operations. Each operation line starts with an integer ti (1 ≤ ti ≤ 3), denoting the type of the operation (see above). If ti = 1, it will be followed by two integers pi (1 ≤ pi ≤ n) and vi (1 ≤ vi ≤ 10^9). If ti = 3, it will be followed by a single integer ri (0 ≤ ri < n). If ti = 2, it will not be followed by anything. # Output Output m lines, each containing the maximum element in the array after the corresponding operation. # Examples Input 6 4 1 3 5 2 4 6 1 4 7 2 3 3 1 2 8 Output 7 7 7 8 Note In the first example, the array starts as [1, 3, 5, 2, 4, 6]. - After the first operation (1 4 7), the array becomes [1, 3, 5, 7, 4, 6]. - After the second operation (2), the array becomes [6, 4, 7, 5, 3, 1]. - After the third operation (3 3), the array becomes [5, 3, 1, 6, 4, 7]. - After the fourth operation (1 2 8), the array becomes [5, 8, 1, 6, 4, 7].","solution":"def max_element_after_operations(n, m, array, operations): max_elements = [] for op in operations: if op[0] == 1: # Replace the integer at position pi with the integer vi pi, vi = op[1], op[2] array[pi - 1] = vi elif op[0] == 2: # Reverse the entire array array.reverse() elif op[0] == 3: #Rotate the array to the right by ri positions ri = op[1] array = array[-ri:] + array[:-ri] max_elements.append(max(array)) return max_elements # Example usage: # n = 6 # m = 4 # array = [1, 3, 5, 2, 4, 6] # operations = [ # [1, 4, 7], # [2], # [3, 3], # [1, 2, 8] # ] # print(max_element_after_operations(n, m, array, operations))"},{"question":"You are tasked with implementing a basic graphical editor with commands for drawing and transforming shapes on a canvas. The editor supports three types of shapes: circles, rectangles, and lines. Each shape has a unique ID assigned when it is created. # Commands 1. **Create Shape** - **circle r x y**: Creates a circle with radius `r` and center at `(x, y)`. - **rectangle w h x y**: Creates a rectangle with width `w`, height `h`, and bottom-left corner at `(x, y)`. - **line x1 y1 x2 y2**: Creates a line from point `(x1, y1)` to `(x2, y2)`. 2. **Move Shape** - **move id dx dy**: Moves the shape with ID `id` by `dx` units in the x-direction and `dy` units in the y-direction. 3. **Delete Shape** - **delete id**: Deletes the shape with ID `id`. 4. **Print Shapes** - **print**: Prints all shapes on the canvas in the format: `type id (additional shape properties)`. # Input Format - The first line contains the number of commands `n`. - The next `n` lines contain one command each, following the formats described above. # Constraints - `0 <= r, w, h <= 10^6` - `-10^6 <= x, y, x1, y1, x2, y2, dx, dy <= 10^6` - Each shape is assigned a unique integer ID starting from 1, and this ID should increment with each new shape created. - There should be no invalid commands or operations (i.e., all IDs referenced will be valid). # Output Format - For the **print** command, output each shape on a new line in the format: `type id (additional shape properties)`. - Circle: `circle id r x y` - Rectangle: `rectangle id w h x y` - Line: `line id x1 y1 x2 y2` # Example **Input:** ``` 6 circle 5 2 3 rectangle 4 3 1 1 print move 1 1 1 delete 2 print ``` **Output:** ``` circle 1 5 2 3 rectangle 2 4 3 1 1 circle 1 5 3 4 ``` # Explanation 1. A circle with radius 5 and center (2, 3) is created with ID 1. 2. A rectangle with width 4, height 3, and bottom-left corner at (1, 1) is created with ID 2. 3. The **print** command outputs all shapes with their IDs and properties. 4. The **move** command moves the circle with ID 1 by (1, 1), changing its center to (3, 4). 5. The **delete** command removes the rectangle with ID 2 from the canvas. 6. The final **print** command outputs the updated list of shapes. Implement the problem in a programming language of your choice.","solution":"class GraphicalEditor: def __init__(self): self.shapes = {} self.next_id = 1 def create_circle(self, r, x, y): self.shapes[self.next_id] = (\\"circle\\", r, x, y) self.next_id += 1 def create_rectangle(self, w, h, x, y): self.shapes[self.next_id] = (\\"rectangle\\", w, h, x, y) self.next_id += 1 def create_line(self, x1, y1, x2, y2): self.shapes[self.next_id] = (\\"line\\", x1, y1, x2, y2) self.next_id += 1 def move_shape(self, shape_id, dx, dy): shape = self.shapes.get(shape_id) if shape: if shape[0] == \\"circle\\": self.shapes[shape_id] = (shape[0], shape[1], shape[2] + dx, shape[3] + dy) elif shape[0] == \\"rectangle\\": self.shapes[shape_id] = (shape[0], shape[1], shape[2], shape[3], shape[4] + dx, shape[5] + dy) elif shape[0] == \\"line\\": self.shapes[shape_id] = (shape[0], shape[1] + dx, shape[2] + dy, shape[3] + dx, shape[4] + dy) def delete_shape(self, shape_id): if shape_id in self.shapes: del self.shapes[shape_id] def print_shapes(self): for shape_id in sorted(self.shapes.keys()): shape = self.shapes[shape_id] if shape[0] == \\"circle\\": print(f\\"{shape[0]} {shape_id} {shape[1]} {shape[2]} {shape[3]}\\") elif shape[0] == \\"rectangle\\": print(f\\"{shape[0]} {shape_id} {shape[1]} {shape[2]} {shape[3]} {shape[4]}\\") elif shape[0] == \\"line\\": print(f\\"{shape[0]} {shape_id} {shape[1]} {shape[2]} {shape[3]} {shape[4]}\\") def process_commands(commands): editor = GraphicalEditor() for command in commands: parts = command.split() action = parts[0] if action == \\"circle\\": r, x, y = map(int, parts[1:]) editor.create_circle(r, x, y) elif action == \\"rectangle\\": w, h, x, y = map(int, parts[1:]) editor.create_rectangle(w, h, x, y) elif action == \\"line\\": x1, y1, x2, y2 = map(int, parts[1:]) editor.create_line(x1, y1, x2, y2) elif action == \\"move\\": shape_id, dx, dy = map(int, parts[1:]) editor.move_shape(shape_id, dx, dy) elif action == \\"delete\\": shape_id = int(parts[1]) editor.delete_shape(shape_id) elif action == \\"print\\": editor.print_shapes()"},{"question":"You are given a square matrix of integers. Your task is to rotate the matrix 90 degrees clockwise. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of a test case description contains an integer N denoting the size of the NxN matrix. Each of the next N lines contains N space-separated integers, representing the elements of the matrix. Output For each test case, output the N lines of the matrix, each containing N space-separated integers, representing the rotated matrix. Constraints 1 ≤ T ≤ 20 1 ≤ N ≤ 100 -1000 ≤ matrix element ≤ 1000 Example Input: 2 3 1 2 3 4 5 6 7 8 9 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output: 7 4 1 8 5 2 9 6 3 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates the given NxN matrix 90 degrees clockwise. N = len(matrix) rotated_matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N - 1 - i] = matrix[i][j] return rotated_matrix def process_test_cases(test_cases): Processes the given test cases returning the results. results = [] for test_case in test_cases: N, matrix = test_case result = rotate_matrix_90_degrees_clockwise(matrix) results.append(result) return results def parse_input(input_string): Parses the input string into a list of test cases. lines = input_string.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) matrix = [] index += 1 for _ in range(N): row = list(map(int, lines[index].split())) index += 1 matrix.append(row) test_cases.append((N, matrix)) return test_cases def format_output(results): Formats the results for output. output = [] for result in results: for row in result: output.append(\\" \\".join(map(str, row))) return \\"n\\".join(output) def main(input_string): test_cases = parse_input(input_string) results = process_test_cases(test_cases) return format_output(results)"},{"question":"Palindrome Mutation Distance A palindrome is a string that reads the same backward as forward. Given a string s consisting only of lowercase Latin letters, your task is to determine the minimum number of characters that need to be changed in the string to make it a palindrome. In this problem, you are required to create a function that takes a string as input and outputs the minimum number of changes needed. Input The input consists of a single string s of length between 1 and 1000, inclusive. Output Output a single integer, which is the minimum number of changes needed to make the string a palindrome. Sample Input 1 abbaa Sample Output 1 1 Sample Input 2 abcd Sample Output 2 2 Sample Input 3 racecar Sample Output 3 0 Example Input abbaa Output 1","solution":"def min_changes_to_palindrome(s): Returns the minimum number of character changes needed to make the string a palindrome. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes"},{"question":"Given an array of integers, write a program to determine if you can rearrange the elements to form a sequence of consecutive numbers. The elements in the array do not need to be in order initially, but they can be rearranged to form a consecutive sequence. Input The input is given in the following format: n a1 a2 a3 ... an The first line contains an integer n (1 ≤ n ≤ 100) representing the number of elements in the array. The second line consists of n integers ai (1 ≤ ai ≤ 100) representing the elements of the array. Output Output \\"yes\\" if the elements can be rearranged to form a sequence of consecutive numbers, and \\"no\\" if they cannot be rearranged in such a way. Examples Input 5 2 3 1 4 5 Output yes Input 4 1 2 4 6 Output no Input 3 7 8 6 Output yes Input 2 10 12 Output no","solution":"def can_rearrange_to_consecutive(n, arr): Determine if the array can be rearranged to form a sequence of consecutive numbers. Args: n : int : number of elements in the array arr : list of int : the array of integers Returns: str : \\"yes\\" if the elements can be rearranged to form a sequence of consecutive numbers, \\"no\\" otherwise sorted_arr = sorted(arr) for i in range(1, n): if sorted_arr[i] != sorted_arr[i-1] + 1: return \\"no\\" return \\"yes\\""},{"question":"# Problem Statement: Determining the Dominant Hand based on a Knob\'s Position In the city of M, elevators in the main office building of the largest corporation have a unique mechanism for determining if a person is left-handed or right-handed. Each elevator has a single knob that can be found on one of two walls: the left wall or the right wall. Depending on the wall on which the knob is located and which hand the person used to press it, we can determine whether the person is left-handed or right-handed. The knob is always positioned at a height convenient for all to reach. When a person uses the elevator, they press the knob with their dominant hand. We know the wall on which the knob is placed and the direction in which the elevator is heading (up or down). Based on this information, we need to determine if the person is left-handed or right-handed. # Input - The first line of input is the wall on which the knob is positioned, either \\"left\\" or \\"right\\". - The second line is the direction in which the elevator is heading: \\"up\\" or \\"down\\". # Output - Output the character \\"R\\" if the person is right-handed or \\"L\\" if the person is left-handed. # Example Input ``` left up ``` Output ``` R ``` Explanation: If the knob is on the left wall and the elevator is heading up, a right-handed person would use their dominant hand to press the knob. Hence, the output is \\"R\\". Maintain this logic for the other three possible combinations and always determine the correct dominant hand based on the given inputs.","solution":"def determine_dominant_hand(wall, direction): Determine if a person pressing the elevator knob is right-handed (R) or left-handed (L) based on the wall the knob is on and the direction the elevator is heading. :param wall: The wall where the knob is located (\\"left\\" or \\"right\\") :param direction: The direction the elevator is heading (\\"up\\" or \\"down\\") :return: \\"R\\" if the person is right-handed, \\"L\\" if the person is left-handed if wall == \\"left\\" and direction == \\"up\\": return \\"R\\" elif wall == \\"left\\" and direction == \\"down\\": return \\"L\\" elif wall == \\"right\\" and direction == \\"up\\": return \\"L\\" elif wall == \\"right\\" and direction == \\"down\\": return \\"R\\" else: raise ValueError(\\"Invalid input\\")"},{"question":"Imagine you are working on a text editor that provides automatic suggestion for text auto-completion. To improve the suggestion algorithm, you need to analyze how words are formed from keyboard inputs. To begin with, you decide to calculate the number of unique words that can be formed from a given set of characters. You will write a program that takes a set of characters as input and determines the number of unique words that can be formed using those characters. A word is defined as any combination of the input characters, where the order of characters matters and each character can be used only once in each combination. Input The first line contains an integer k (1 ≤ k ≤ 10), the number of characters in the set. The second line contains k distinct characters, each of which is a lowercase English alphabet letter. Output Write a single integer, the number of unique words that can be formed using the provided set of characters. Examples Input 3 abc Output 15 Input 2 xy Output 4 Note In the first example, the unique words that can be formed are: a, b, c, ab, ba, ac, ca, bc, cb, abc, acb, bac, bca, cab, cba – making it 15 unique words. In the second example, the unique words are: x, y, xy, yx – making it 4 unique words.","solution":"from itertools import permutations def unique_words_count(k, chars): Returns the number of unique words that can be formed using the provided set of characters. unique_words = set() for i in range(1, k+1): for perm in permutations(chars, i): unique_words.add(\'\'.join(perm)) return len(unique_words) # Example usage: # print(unique_words_count(3, [\'a\', \'b\', \'c\'])) # Output: 15 # print(unique_words_count(2, [\'x\', \'y\'])) # Output: 4"},{"question":"In a distant kingdom, there is a magical grid of size N x N. Each cell in the grid can contain a gold coin or remain empty. The wizard residing in the kingdom has the power to collect gold coins by moving through the grid. However, there are certain rules he must follow: 1. The wizard starts his journey from the top-left corner of the grid (cell (1,1)). 2. He can only move to the right or down from his current position. 3. He cannot move to a cell that is already visited. 4. His goal is to collect as many gold coins as possible while reaching the bottom-right corner of the grid (cell (N,N)). Given the grid configuration, determine the maximum number of gold coins the wizard can collect on his journey from the top-left to the bottom-right corner. Input The first line contains an integer N (1 ≤ N ≤ 100), the size of the grid. The next N lines contain N integers each. Each integer is either 0 (indicating an empty cell) or 1 (indicating a cell with a gold coin). Output Output a single integer, the maximum number of gold coins the wizard can collect on his journey. Examples Input 4 0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 Output 4 Note For the first example, one possible path for the wizard to collect the maximum number of gold coins is: From (1,1) → (2,1) → (2,2) → (2,3) → (2,4) → (3,4) → (4,4). He collects gold coins from cells (2, 1), (2,3), (2,4), and (4,4) totaling 4 coins.","solution":"def max_gold_coins(N, grid): # Create a 2D dp array to store intermediate results dp = [[0]*N for _ in range(N)] # Starting point (top-left corner) dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, N): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer is in the bottom-right corner return dp[N-1][N-1]"},{"question":"A forest is defined as a collection of trees, where each tree is an undirected connected graph with no cycles. A binary tree is a tree data structure in which each node has at most two children referred to as the left child and the right child. An important property of a binary tree is that it can be traversed in various ways, namely pre-order, in-order, and post-order traversal. Given a binary tree, your task is to determine the number of unique Binary Search Trees (BST) that can be formed using the in-order traversal of the nodes of the original tree. Two BSTs are considered unique if their structure or the arrangement of nodes in the structure is different. Your task is to calculate and return the count of such unique BSTs for the given binary tree. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of nodes in the binary tree. Each of the next n lines contains exactly three integers: vi, li, ri (0 ≤ vi, li, ri ≤ 1000) Where: - vi represents the value at the i-th node. - li represents the index of the left child of the i-th node (0 if no left child). - ri represents the index of the right child of the i-th node (0 if no right child). It is guaranteed that vi are distinct and also that the given input defines a valid binary tree structure. Output Print a single integer — the number of unique BSTs that can be formed using the in-order traversal of the given binary tree\'s nodes. Example Input 3 2 1 3 1 0 0 3 0 0 Output 5 Explanation: The in-order traversal of the given binary tree is [1, 2, 3]. The number of unique BSTs that can be formed from these nodes are 5. Note: In this problem, you are only required to calculate the number of unique BSTs that can be formed using the values obtained from the in-order traversal of the tree and not actually construct the trees. Use the properties of combinatorial mathematics (Catalan numbers) to solve the problem efficiently.","solution":"def num_unique_bsts(n, nodes): def num_trees(n): # To calculate the nth Catalan number C = [0] * (n + 1) C[0] = 1 for i in range(1, n + 1): C[i] = 0 for j in range(i): C[i] += C[j] * C[i - 1 - j] return C[n] # Extracting the node values in the tree node_values = [node[0] for node in nodes] # Sorting node values to simulate in-order traversal sorted_node_values = sorted(node_values) # The number of unique BSTs formed by these sorted values return num_trees(len(sorted_node_values))"},{"question":"Consider a robot on a 2D grid beginning at the origin (0, 0). The robot can move in four possible directions: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). The robot moves one unit distance in the corresponding direction for each command it receives. Given two integers m and n representing the dimensions of a grid with m rows and n columns, and a string of commands, determine if an endless loop exists such that the robot revisits a position it has already visited at some point in its movement. Input - The first line contains two integers m and n (1 ≤ m, n ≤ 1000) representing the dimensions of the grid. - The second line contains a string of commands s (1 ≤ |s| ≤ 10^5), where each command is one of \'U\', \'D\', \'L\', \'R\'. Output Output \\"YES\\" if the robot revisits a position, otherwise, output \\"NO\\". Examples Input: 3 3 URDLURD Output: YES Input: 4 4 UUDDLLRR Output: YES Input: 2 2 ULD Output: NO Note In the first example, the robot revisits the position (0, 0) after completing the given commands \\"URDLURD\\". In the second example, the robot revisits the position (0, 0) after completing the loop \\"UUDDLLRR\\". In the third example, the robot travels to (1, 1), then to (0, 0), and finally to (-1, -1) without revisiting any position. However, as the grid limits are not constraining and the input assumes that the robot will not move out of the grid, the check for a loop is purely based on revisiting positions.","solution":"def is_endless_loop(m, n, s): Determines if an endless loop exists such that the robot revisits a position it has already visited. Parameters: m - number of rows in the grid n - number of columns in the grid s - string of commands Returns: \\"YES\\" if the robot revisits a position, otherwise \\"NO\\". # Initial position x, y = 0, 0 # Set to store visited positions visited_positions = {(x, y)} # Command to direction mapping directions = {\'U\': (0, 1), \'D\': (0, -1), \'L\': (-1, 0), \'R\': (1, 0)} for command in s: dx, dy = directions[command] x += dx y += dy if (x, y) in visited_positions: return \\"YES\\" visited_positions.add((x, y)) return \\"NO\\""},{"question":"Given a text string and a pattern string, write a function to check if the pattern appears in the text. The pattern can contain \'.\' and \'*\' where: - \'.\' matches any single character. - \'*\' matches zero or more of the preceding element. Your function should return true if the pattern matches the entire text and false otherwise. Examples: Example 1: Input: ``` text = \\"aa\\" pattern = \\"a\\" ``` Output: false Explanation: \\"a\\" does not match the entire text \\"aa\\". Example 2: Input: ``` text = \\"aa\\" pattern = \\"a*\\" ``` Output: true Explanation: \'*\' means zero or more of the preceding element, \\"a\\" matches the entire text \\"aa\\". Example 3: Input: ``` text = \\"ab\\" pattern = \\".*\\" ``` Output: true Explanation: \\".*\\" means \\"zero or more (*) of any character (.)\\". Example 4: Input: ``` text = \\"aab\\" pattern = \\"c*a*b\\" ``` Output: true Explanation: \\"c*\\" can be repeated 0 times, \\"a*\\" can be repeated 1 time. Therefore, it matches \\"aab\\". Example 5: Input: ``` text = \\"mississippi\\" pattern = \\"mis*is*p*.\\" ``` Output: false Constraints: The input text and pattern are guaranteed to be non-empty strings with a length not exceeding 1000. Function signature: ```python def is_match(text: str, pattern: str) -> bool: ```","solution":"def is_match(text: str, pattern: str) -> bool: Returns true if the text matches the given pattern. The pattern string can contain \'.\' and \'*\' where: - \'.\' matches any single character. - \'*\' matches zero or more of the preceding element. dp = [[False] * (len(pattern) + 1) for _ in range(len(text) + 1)] dp[0][0] = True # Both text and pattern are empty # Initialize the dp array for patterns like a*, a*b*, a*b*c*, etc. for i in range(1, len(pattern) + 1): if pattern[i - 1] == \'*\': dp[0][i] = dp[0][i - 2] for i in range(1, len(text) + 1): for j in range(1, len(pattern) + 1): if pattern[j - 1] == \'.\' or pattern[j - 1] == text[i - 1]: dp[i][j] = dp[i - 1][j - 1] elif pattern[j - 1] == \'*\': dp[i][j] = dp[i][j - 2] # \'*\' means zero of the previous character if pattern[j - 2] == \'.\' or pattern[j - 2] == text[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j] return dp[len(text)][len(pattern)]"},{"question":"Alice and Bob are playing a game on a two-dimensional grid of size N x M. Initially, there are some obstacles positioned on the grid. Alice starts at the top-left corner (0, 0) and her goal is to reach the bottom-right corner (N-1, M-1). She can move in four possible directions: up, down, left, and right. However, Alice cannot move onto a cell that contains an obstacle. Write a program to determine the minimum number of moves Alice needs to reach her goal. If it is impossible for Alice to reach her goal, return -1. # Input The first line contains two integers, N and M (2 leq N, M leq 100), representing the dimensions of the grid. The next N lines describe the grid: each line contains M characters which can be either \'.\' (indicating an open cell) or \'#\' (indicating an obstacle). # Output Print a single integer representing the minimum number of moves required for Alice to reach the bottom-right corner. If Alice cannot reach the goal, print -1. # Examples Example 1 **Input:** ``` 3 3 ... .#. ... ``` **Output:** ``` 4 ``` Example 2 **Input:** ``` 3 3 ... # ... ``` **Output:** ``` -1 ``` Example 3 **Input:** ``` 5 5 ..... .#.#. ..#.. .#.#. ..... ``` **Output:** ``` 8 ``` # Note Alice can move only up, down, left, or right, and she starts at the top-left corner (0, 0) and needs to reach (N-1, M-1). The grid boundaries are impassable.","solution":"from collections import deque def min_moves_to_reach_goal(N, M, grid): if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == N-1 and y == M-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"In a distant kingdom, the King has a large number of treasure chests, each containing various amounts of gold coins. One day, the King decides to spread his wealth equally among his subjects, but he wants to do so in a challenging way. The King has ordered that the coins be redistributed in such a way that the difference between the number of coins in the richest and the poorest chest is minimized. However, there\'s a catch. You can only combine two chests into one by adding the coins together, and repeat this process any number of times until only one chest remains. Your goal is to help the King by finding out the minimum possible difference between the richest and the poorest chests after several possible combinations. Input Format The first line contains T, the number of test cases. For each test case, the first line contains N, the number of treasure chests. The next line contains N space-separated integers, where each integer represents the number of gold coins in a chest. Output Format For each test case, print the minimum possible difference between the richest and the poorest chests after combining them optimally. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Number of coins in each chest ≤ 10^9 SAMPLE INPUT 2 3 1 2 3 4 10 20 30 40 SAMPLE OUTPUT 0 0 Explanation In the first test case, we can combine the first two chests to get: New chest arrangement: [3, 3] Then combine these two to get the final chest: Final chest: [6] The minimum possible difference is then 0, since there’s only one chest left. In the second test case, New chest arrangement: [30, 30] Then combine these two to get the final chest: Final chest: [60] The minimum possible difference is again 0, since there’s only one chest left.","solution":"def min_difference_after_combining_chests(T, test_cases): Given a number of test cases, and for each test case, a list of chest coins, this function computes the minimum possible difference between the richest and the poorest chests after combining them optimally. Parameters: T (int): Number of test cases test_cases (list): A list of tuples where the first element is an integer N (number of chests) and the second element is a list of N integers representing the number of coins in each chest. Returns: list: A list of integers where each integer is the minimum possible difference for each test case. results = [] # Process each test case for i in range(T): N, coins = test_cases[i] # We can realistically directly reason the answer without operations if N == 1: results.append(0) else: # Minimum difference will always be 0 if we end up combining all chests into one results.append(0) return results"},{"question":"You are given an array of integers where each integer indicates the height of a building. You are currently standing on the top of the first building. From that building, you can jump to any building at a distance of at most `k` buildings to the right if and only if the height of the destination building is equal to or greater than the height of the current building. Your goal is to reach the last building in the array. Write a function to determine the minimum number of jumps required to reach the last building of the array. If it is not possible to reach the last building, return -1. Function signature: ```python def min_jumps(h: List[int], k: int) -> int: ``` # Input - `h` (a list of integers): Heights of the buildings (1 ≤ |h| ≤ 10^5, 0 ≤ h[i] ≤ 10^9). - `k` (an integer): Maximum number of buildings you can jump over (1 ≤ k ≤ 10^5). # Output - An integer which is the minimum number of jumps needed to reach the last building, or -1 if it is not possible. # Examples Example 1 ```python h = [1, 2, 3, 4, 5] k = 2 print(min_jumps(h, k)) # Output: 2 ``` Example 2 ```python h = [1, 3, 2, 4, 5] k = 3 print(min_jumps(h, k)) # Output: 2 ``` Example 3 ```python h = [5, 4, 3, 2, 1] k = 2 print(min_jumps(h, k)) # Output: -1 ``` # Explanation - In Example 1, the minimum number of jumps is 2: Jump from building 1 to building 3, then jump from building 3 to building 5. - In Example 2, the minimum number of jumps is 2: Jump from building 1 to building 3, then jump from building 3 to building 5. - In Example 3, it is impossible to reach the last building because the heights are decreasing and you cannot jump to a shorter building.","solution":"def min_jumps(h, k): from collections import deque n = len(h) if n == 1: return 0 # Already at the last building queue = deque([(0, 0)]) # (current index, current jump count) visited = [False] * n visited[0] = True while queue: current, jumps = queue.popleft() for i in range(1, k + 1): next_index = current + i if next_index >= n: break if h[next_index] >= h[current] and not visited[next_index]: if next_index == n - 1: return jumps + 1 queue.append((next_index, jumps + 1)) visited[next_index] = True return -1"},{"question":"You are organizing a marathon event and want to form the strongest possible team. Each registered runner has a specific strength, and you want to maximize the sum of the strengths of your team. However, to balance the competition, there are rules: 1. No two runners in the team should have consecutive registration numbers. 2. The team can be of any size (including possibly empty). Given the list of runner strengths and their registration numbers (which are in a sequence), find the maximum possible sum of strengths for the team that adheres to the rules above. Input You\'ll be given multiple datasets. Each dataset consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 100), the number of runners. - The second line contains n integers s1, s2, ..., sn (0 ≤ si ≤ 1000), where si denotes the strength of the runner with registration number i. The end of the input is indicated by a single zero. Output For each dataset, output the maximum possible sum of strengths for the team on a new line. Example Input 5 3 2 7 10 12 4 1 2 9 4 3 1 20 3 0 Output 22 10 20","solution":"def max_sum_of_strengths(runners): Given a list of runner strengths, return the maximum possible sum of strengths with no two consecutive runners selected. if not runners: return 0 n = len(runners) if n == 1: return runners[0] # Initialize DP array where dp[i] represents maximum sum up to index i dp = [0] * n dp[0] = runners[0] dp[1] = max(runners[0], runners[1]) for i in range(2, n): dp[i] = max(dp[i-1], runners[i] + dp[i-2]) return dp[-1] import sys def process_input(input_lines): results = [] i = 0 while i < len(input_lines): n = int(input_lines[i]) if n == 0: break strengths = list(map(int, input_lines[i+1].split())) results.append(max_sum_of_strengths(strengths)) i += 2 return results"},{"question":"You are given a string consisting of lowercase English letters and are required to find the maximum number of palindrome substrings that can be formed by removing some (possibly none) characters from this string. Input The first line contains a single integer n — the length of the string (1 ≤ n ≤ 2·105). The second line contains a string of length n consisting of lowercase English letters. Output Print the answer to the problem. Examples Input 6 abacbc Output 3 Explanation: One possible set of palindromes is {\\"a\\", \\"bcb\\", \\"c\\"}, forming three palindromes. Another valid set can be {\\"a\\", \\"b\\", \\"cbc\\"}. Both result in 3 palindromes.","solution":"def max_palindrome_substrings(n, s): Returns the maximum number of palindrome substrings by removing some characters. :param n: Length of the string :param s: The string :return: The maximum number of palindromes char_set = set(s) return len(char_set)"},{"question":"A chef is preparing multiple dishes in a restaurant kitchen, and each dish requires a specific cooking time. The chef has only one stove to cook the dishes. Given the cooking times of each dish and the maximum operating time of the stove, you need to determine if the chef can cook all the dishes within the given time limit. Write a function `can_cook_all_dishes` that determines whether the chef can cook all dishes within the time limit. The function should return \\"Yes\\" if all dishes can be cooked within the time limit, otherwise return \\"No\\". Input format: - The first line contains an integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains two integers N and K, where N denotes the number of dishes and K denotes the maximum operating time of the stove. - The second line contains N space-separated integers representing the cooking times of each dish. Output format: For each test case, print \\"Yes\\" if it is possible to cook all dishes within the given time limit, otherwise print \\"No\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ K, cooking times of dishes ≤ 10^6 SAMPLE INPUT 2 5 30 5 10 5 5 5 3 15 10 10 10 SAMPLE OUTPUT Yes No","solution":"def can_cook_all_dishes(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][:2] cooking_times = test_cases[i][2:] if sum(cooking_times) <= K: results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Example usage: T = 2 test_cases = [ (5, 30, 5, 10, 5, 5, 5), (3, 15, 10, 10, 10) ] print(can_cook_all_dishes(T, test_cases)) # This should output [\'Yes\', \'No\']"},{"question":"Given an integer N, find the smallest prime number greater than N for which the sum of its digits is a prime number as well. Input format: The first line contains an integer T, the number of test cases. Each of the next T lines contains an integer N. Output format: For each test case, print the smallest prime number greater than N whose sum of digits is also a prime number. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^6 SAMPLE INPUT: 3 10 30 50 SAMPLE OUTPUT: 11 41 61 Explanation: For the first test case, the smallest prime number greater than 10 is 11. The sum of its digits (1 + 1 = 2) is also a prime number. For the second test case, the smallest prime number greater than 30 is 41. The sum of its digits (4 + 1 = 5) is also a prime number. For the third test case, the smallest prime number greater than 50 is 61. The sum of its digits (6 + 1 = 7) is also a prime number.","solution":"import math def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_digits(n): return sum(int(digit) for digit in str(n)) def smallest_prime_with_prime_digit_sum(N): candidate = N + 1 while True: if is_prime(candidate) and is_prime(sum_of_digits(candidate)): return candidate candidate += 1 def find_primes_for_cases(test_cases): results = [] for N in test_cases: results.append(smallest_prime_with_prime_digit_sum(N)) return results # Test if __name__ == \\"__main__\\": input_data = [ 10, 30, 50 ] output_data = find_primes_for_cases(input_data) for output in output_data: print(output)"},{"question":"A town is planning a new subway line with several stations in a row. The stations are numbered consecutively from 1 to n. Citizens of the town have suggested several subway lines, each described by two integers l and r (indicating a line that stops at all stations from l to r inclusive). To estimate commuting efficiency, the town planners want to know the minimum number of stations a passenger might need to commute between in order to cover travel from any station s to any other station t using the proposed subway lines. Given n, the number of stations, and m, the number of proposed subway lines, help the planners determine the smallest number of stations a passenger needs to travel between to ensure their trip from station s to station t is feasible. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of stations and the number of subway lines proposed. Each of the next m lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — describing a subway line that stops at all stations from l to r inclusive. Output Print a single integer — the minimum number of stations a passenger might need to commute between to travel from any station s to any station t, ensuring the trip is feasible. If it\'s impossible to travel between some stations, print -1. Examples Input 5 3 1 3 2 4 3 5 Output 1 Input 4 1 1 4 Output 0 Input 3 0 Output -1 Note In the first example, passengers can always commute between any stations s and t with at most one intermediate station due to the overlapping subway lines that cover the segment between any two stations. In the second example, a single subway line covers the entire range of stations, so no intermediate stations are needed. In the third example, there are no subway lines, making it impossible to guarantee any travel between stations, hence the answer is -1.","solution":"def min_stations_to_commute(n, m, lines): if m == 0: return -1 # No lines provided means no commutation is possible # Initialize an array to check reachability reach = [0] * (n + 1) for l, r in lines: for i in range(l, r + 1): reach[i] += 1 if any(x == 0 for x in reach[1:]): return -1 # If there is any station with no service, return -1 return 0 # If all stations have at least one line, the answer is 0"},{"question":"Implement a function that takes an array of integers and returns a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. For instance, if the input is [1, 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. If the input is [3, 2, 1], the expected output would be [2, 3, 6]. You must do this in O(n) time complexity and without using division. Function Signature: ```python def product_except_self(nums: List[int]) -> List[int]: pass ``` # Input - An array of integers, `nums` (1 ≤ len(nums) ≤ 10^5, -30 ≤ nums[i] ≤ 30) # Output - A new array such that each element at index i is the product of all the numbers in the original array except the one at i. # Example Input ```python [1, 2, 3, 4, 5] ``` Output ```python [120, 60, 40, 30, 24] ``` Input ```python [3, 2, 1] ``` Output ```python [2, 3, 6] ```","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: n = len(nums) if n == 0: return [] # Initialize the result array where the product values will be stored result = [1] * n # temp value for left pass left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # temp value for right pass right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"In a fantasy land, there are n magical islands, numbered from 1 to n. Each island is connected to other islands by bidirectional bridges. Together, these bridges form a connected graph. However, that land is suffering from sudden magical breaches that can disable any one of the bridges, making that bridge unavailable for some time. When a bridge is disabled, it should be ensured that the graph remains connected. Given the configuration of islands and bridges, every bridge must meet the following condition: - If the bridge is removed, there must still be a path between every pair of islands, ensuring that the graph remains connected. Your task is to determine the number of such bridges in the given graph. These bridges are known as \\"non-critical bridges\\" because even if they are removed, the graph maintains its connected nature. Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2⋅10^5) - the number of islands and the number of bridges, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing that there is a bridge connecting island u and island v. Output Output a single integer, the number of non-critical bridges. Examples Input 4 5 1 2 2 3 3 4 4 1 1 3 Output 5 Input 3 2 1 2 2 3 Output 0 Note In the first example, you can check that removing any bridge will still leave the graph connected. Hence, all 5 bridges are non-critical. In the second example, removing any bridge will make the graph disconnected. Hence, there are no non-critical bridges.","solution":"def count_non_critical_bridges(n, m, bridges): from collections import defaultdict # Building the graph graph = defaultdict(list) for u, v in bridges: graph[u].append(v) graph[v].append(u) # Helper function to perform DFS and check connectivity def dfs(node, visited, graph): stack = [node] while stack: n = stack.pop() for neighbor in graph[n]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) original_components = 0 visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: dfs(i, visited, graph) original_components += 1 if original_components > 1: # More than one component initially means no edges can be non-critical return 0 non_critical_count = 0 for u, v in bridges: # Temporarily remove the bridge from the graph and check connectivity graph[u].remove(v) graph[v].remove(u) visited = [False] * (n + 1) components = 0 for i in range(1, n + 1): if not visited[i]: dfs(i, visited, graph) components += 1 if components == 1: non_critical_count += 1 # Add the bridge back into the graph graph[u].append(v) graph[v].append(u) return non_critical_count"},{"question":"You are given an array of integers `nums` of length `n` and an integer `k`. Your task is to find the k-th largest element in the array. Note that it is the k-th largest element in the sorted order, not the k-th distinct element. Write a function `findKthLargest` that takes in the integer array `nums` and the integer `k` and returns the k-th largest element in the array. Function Signature: ```python def findKthLargest(nums: List[int], k: int) -> int: ``` Input - The first line contains an integer `n` (1 ≤ n ≤ 10^4) — the number of elements in the array. - The second line contains `n` space-separated integers `nums[i]` (−10^4 ≤ nums[i] ≤ 10^4) — the elements of the array. - The third line contains a single integer `k` (1 ≤ k ≤ n) — the k-th largest element to find. Output Output a single integer — the k-th largest element in the array. Examples Input 6 3 2 1 5 6 4 2 Output 5 Input 8 12 3 5 7 19 4 8 26 4 Output 8 Explanation In the first example, the sorted array in descending order is [6, 5, 4, 3, 2, 1], and the second largest element is 5. In the second example, the sorted array in descending order is [26, 19, 12, 8, 7, 5, 4, 3], and the fourth largest element is 8.","solution":"from typing import List def findKthLargest(nums: List[int], k: int) -> int: Returns the k-th largest element in the array nums. nums.sort(reverse=True) return nums[k-1]"},{"question":"Sorting is a fundamental operation in programming that organizes elements of a list in a specific order. Today, we\'re going to tackle a special sorting problem with operational constraints. You are given an array of distinct integers. Your task is to sort this array in non-decreasing order using a limited-swap sorting method known as \\"adjacent swaps.\\" In an adjacent swap, you can only swap two indices i and i+1 if they are adjacent in the array. Write a function `can_sort()` that takes the list of integers as input and returns a boolean indicating whether the array can be sorted using any number of adjacent swaps. Remember, the array is distinct, meaning the elements do not repeat. # Input The input is a single list of integers, where the length of the array is between 2 and 100, inclusive, and all elements are distinct integers within the range of -1000 to 1000. # Output Return `True` if the array can be sorted using adjacent swaps, otherwise return `False`. # Examples Example 1 **Input:** [4, 3, 1, 2] **Output:** True Example 2 **Input:** [1, 5, 2, 3, 4] **Output:** True Example 3 **Input:** [3, 1, 4, 2] **Output:** False # Note - In the first example, you can sort the array using adjacent swaps in the following way: [4, 3, 1, 2] → [3, 4, 1, 2] → [3, 1, 4, 2] → [3, 1, 2, 4] → [1, 3, 2, 4] → [1, 2, 3, 4] - In the second example, the array is already sortable using adjacent swaps. - In the third example, no sequence of adjacent swaps can sort the array into non-decreasing order.","solution":"def can_sort(arr): Returns True if the array can be sorted using adjacent swaps, otherwise returns False. # In the case of distinct integers, we can always sort using adjacent swaps return True"},{"question":"Given an array of integers `arr`, your task is to calculate the sum of values of each subsequence of `arr`, then return the result after taking modulo (10^9 + 7). A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains `n` space-separated integers `arr[i]` (1 ≤ arr[i] ≤ 10^3), the elements of the array. Output Output a single integer, the result of the sum of values of each subsequence of `arr` modulo (10^9 + 7). Example Input 3 1 2 3 Output 35 Explanation The subsequences of the array `arr = [1, 2, 3]` are: - [1] - [2] - [3] - [1, 2] - [1, 3] - [2, 3] - [1, 2, 3] Their corresponding sums are: 1, 2, 3, 3, 4, 5, 6. Sum of sums is: 1 + 2 + 3 + 3 + 4 + 5 + 6 = 24. Taking each sum modulo (10^9 + 7), the final result is 24. Note: To calculate the sum of all subsequences more efficiently, note that every element appears in (2^{n-1}) subsequences. Thus, the final sum of all subsequences can be computed as the sum of all elements multiplied by (2^{n-1}). In this example, the sum of array elements is 1+2+3 = 6. Total sum of all subsequences is: (6 * 2^{3-1} = 6 * 4 = 24 ). Finally, the result 24 modulo (10^9 + 7) is 24.","solution":"def sum_of_subsequences_mod(arr): Returns the sum of values of each subsequence of arr modulo 10^9 + 7 MOD = 10**9 + 7 n = len(arr) total_sum = sum(arr) % MOD result = (total_sum * pow(2, n - 1, MOD)) % MOD return result # Example usage n = 3 arr = [1, 2, 3] print(sum_of_subsequences_mod(arr)) # Output: 24"},{"question":"Given an array of integers, implement a function that finds the longest contiguous subarray with an equal number of 0s and 1s. Your function should have the following signature: ```python def findMaxLength(nums: List[int]) -> int: ``` # Input # - The input is a single list of integers `nums`, where each integer is either 0 or 1. # Output # - Return an integer representing the length of the longest contiguous subarray with an equal number of 0s and 1s. # Example # Input: ``` [0, 1, 0] ``` Output: ``` 2 ``` # Explanation # In the example, the longest contiguous subarray with equal numbers of 0s and 1s is `[0, 1]`, which has length 2.","solution":"from typing import List def findMaxLength(nums: List[int]) -> int: Finds the longest contiguous subarray with an equal number of 0s and 1s. count_map = {0: -1} # Map to store the first occurrence of a count max_length = 0 count = 0 for i, num in enumerate(nums): if num == 0: count -= 1 else: count += 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"Alice is interested in strings made of lowercase English letters. She defines the \\"beauty\\" of a string as the number of distinct letters it contains. For example, the string \\"abc\\" has beauty 3, the string \\"aaa\\" has beauty 1, and the string \\"abac\\" has beauty 3. Alice wants to know the beauty of every substring of a given string. A substring is any continuous portion of a string. Write a program to calculate the sum of beauties of all substrings of a given string. Input The input consists of a single string `s` (1 ≤ |s| ≤ 1000), where `|s|` denotes the length of the string. Output Print a single integer — the sum of beauties of all substrings of the given string. Example Input abc Output 10 Note For the first test sample: * The beauty of \\"a\\" is 1. * The beauty of \\"b\\" is 1. * The beauty of \\"c\\" is 1. * The beauty of \\"ab\\" is 2. * The beauty of \\"bc\\" is 2. * The beauty of \\"abc\\" is 3. Therefore, the sum of beauties of all substrings is 1 + 1 + 1 + 2 + 2 + 3 = 10.","solution":"def sum_of_beauties(s): Calculate the sum of beauties of all substrings of the given string `s`. The beauty of a string is defined as the number of distinct letters it contains. Args: s (str): The input string consisting of lowercase English letters. Returns: int: The sum of beauties of all substrings of `s`. n = len(s) total_beauty = 0 # Iterate over all possible substrings for i in range(n): seen = set() for j in range(i, n): seen.add(s[j]) total_beauty += len(seen) return total_beauty"},{"question":"You are given an array of integers representing the scores of different players in a game. The players are separated into two teams: Team A and Team B. Your task is to distribute the scores into two teams such that the absolute difference between the sum of scores in Team A and Team B is minimized. To achieve this, you should implement a function that receives the array of scores and returns the minimal possible difference between the sums of scores of the two teams. **Input** - The first line contains a single integer `n` (1 ≤ n ≤ 100), representing the number of players. - The second line contains `n` space-separated integers `scores[i]` (1 ≤ scores[i] ≤ 1000), representing the score of the i-th player. **Output** - Print a single integer, the minimal possible difference between the sums of scores of the two teams. **Examples** Input ``` 4 1 2 3 4 ``` Output ``` 0 ``` Input ``` 3 2 5 10 ``` Output ``` 3 ``` **Explanation** In the first example, you can divide the scores into [1, 4] and [2, 3] which both sum to 5, resulting in a difference of 0. In the second example, the two best partitions are [2, 10] and [5] resulting in sums 12 and 5 respectively, with a difference of |12 - 5| = 7, or [5, 2] and [10] resulting in sums 7 and 10 respectively, with a difference of |7 - 10| = 3. The minimal difference is 3.","solution":"def minimal_difference(n, scores): Given the number of players and their scores, divide the scores into two teams such that the absolute difference between the sums of scores in the two teams is minimized. total_score = sum(scores) half_score = total_score // 2 dp = [0] * (half_score + 1) for score in scores: for j in range(half_score, score - 1, -1): dp[j] = max(dp[j], dp[j - score] + score) team_a_score = dp[half_score] team_b_score = total_score - team_a_score return abs(team_a_score - team_b_score) # Test cases print(minimal_difference(4, [1, 2, 3, 4])) # Expected output: 0 print(minimal_difference(3, [2, 5, 10])) # Expected output: 3"},{"question":"A company needs to monitor the temperature trend over a fixed period. They collect temperature data from multiple sensors every hour and store the readings in a database. Given a list of all hourly temperature readings from various sensors, your task is to determine the maximum difference in temperature recorded at any hour between any two sensors. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100 000) — the number of hours and the number of sensors, respectively. Each of the next n lines contains m integers which represent the temperature readings from all sensors at that particular hour. Output Print a single integer which is the maximum absolute difference in temperature reading between any two sensors at any hour. Examples Input 3 4 15 18 10 20 7 12 8 16 22 25 21 23 Output 12 Input 2 3 30 40 35 32 33 36 Output 10 Note In the first example, the maximum difference at each hour is: Hour 1: max(15, 18, 10, 20) - min(15, 18, 10, 20) = 10 Hour 2: max(7, 12, 8, 16) - min(7, 12, 8, 16) = 9 Hour 3: max(22, 25, 21, 23) - min(22, 25, 21, 23) = 4 Thus, the maximum temperature difference across all hours is 12. In the second example, the maximum difference at each hour is: Hour 1: max(30, 40, 35) - min(30, 40, 35) = 10 Hour 2: max(32, 33, 36) - min(32, 33, 36) = 4 Thus, the maximum temperature difference across all hours is 10.","solution":"def max_temp_difference(n, m, temperature_readings): Returns the maximum absolute difference in temperature readings. :param n: Number of hours :param m: Number of sensors :param temperature_readings: List of lists of hourly temperature readings from all sensors :return: Maximum absolute difference in temperature recordings max_difference = 0 for readings in temperature_readings: max_diff_in_hour = max(readings) - min(readings) max_difference = max(max_difference, max_diff_in_hour) return max_difference"},{"question":"Elly the Elephant is a devoted gardener who loves to plant trees in her backyard. Every year, she chooses a specific pattern for planting the trees. She has a large rectangular backyard of dimensions width w and height h, measured in grid units. She wants to maximize the number of trees planted without violating the following constraints: 1. Each tree occupies a single grid cell. 2. No two trees can be planted in adjacent grid cells, neither horizontally, vertically, nor diagonally. Elly wants your help to determine the maximum number of trees she can plant in her backyard following the above rules. Input The first line contains two integers w and h (1 ≤ w, h ≤ 1000) – the width and height of the backyard. Output Print a single integer – the maximum number of trees Elly can plant in her backyard without any two trees being adjacent. Example Input 5 4 Output 10 Explanation: One possible configuration with the maximum number of trees (represented by T) is given below (X represents an empty cell): ``` T X T X T X T X T X T X T X T X T X T X ``` In this configuration, no two trees are adjacent to each other. The number of trees is 10, which is the expected output.","solution":"def max_trees(w, h): Determines the maximum number of trees Elly can plant in her backyard with dimensions w (width) and h (height) such that no two trees are adjacent. # Each tree is separated by at least one unit, so we can use a checkerboard pattern. # We plant trees on cells where (row + col) % 2 == 0. return (w * h + 1) // 2"},{"question":"Given a square matrix filled with integers, write a program to check whether the matrix is symmetric or not. A matrix is said to be symmetric if it is equal to its transpose. INPUT The first line contains a single integer N, which denotes the size of the matrix. The next N lines contain N space-separated integers each, representing the matrix. OUTPUT Print \\"Symmetric\\" if the matrix is symmetric, otherwise print \\"Not Symmetric\\". Constraints 1 ≤ N ≤ 100 -1000 ≤ Matrix elements ≤ 1000 *Problem Setter: *John Doe SAMPLE INPUT 3 1 2 3 2 1 4 3 4 1 SAMPLE OUTPUT Symmetric SAMPLE INPUT 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT Not Symmetric","solution":"def is_symmetric(matrix): Checks if the given matrix is symmetric. n = len(matrix) for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return \\"Not Symmetric\\" return \\"Symmetric\\" def read_matrix(input): Reads the matrix from the given input string. lines = input.strip().split(\'n\') n = int(lines[0]) matrix = [] for i in range(1, n + 1): matrix.append(list(map(int, lines[i].split()))) return matrix def main(input): matrix = read_matrix(input) return is_symmetric(matrix)"},{"question":"A software company is designing a new messaging system where users can send messages to each other. The company wants to ensure that each user can reach any other user through a series of friend connections. A connection is a direct link between two users who have declared each other as friends. However, a connection between any pair of users cannot exist more than once, and self-connections are not allowed. Your task is to establish the minimum number of friend connections required to ensure that any user can reach any other user in the network, directly or indirectly. Input The first line contains an integer n (2 ≤ n ≤ 100), the number of users in the system. Output You should print an integer m: the minimum number of friend connections that need to be added. Then m lines should follow, each consisting of two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), indicating a friend connection between users ai and bi. If there are multiple solutions, you may print any of them. Examples Input 4 Output 3 1 2 2 3 3 4 Explanation In this example, creating connections between user pairs (1-2), (2-3), and (3-4) ensures that all users are reachable from one another. This creates a linear chain where each user can be reached through another user, fulfilling the requirement. Note This is one possible solution of the example: 4 <-> 3 <-> 2 <-> 1 It\'s a valid solution because: - Each pair of users is separated by at most two other users. - There are no redundant connections, and all necessary connections are made in the minimum number possible.","solution":"def minimum_friend_connections(n): Returns the minimum number of friend connections required so that any user can reach any other user and lists these connections. Parameters: n (int): Number of users in the system Returns: tuple: (int, list of tuples) minimum number of connections and the connections themselves connections = [] for i in range(1, n): connections.append((i, i+1)) return (n-1, connections)"},{"question":"An online shopping platform offers a variety of products, each identified uniquely by an ID and categorized by its type. To maintain inventory and avoid overselling, their system needs to track the quantity of each product available. However, with constantly changing inventory levels due to sales, restocks, and returns, the system often needs to answer queries about the current availability of a specific product. The platform wants to implement this using a program that efficiently handles the following operations: 1. Update the quantity of a product (either adding to the inventory or subtracting from it). 2. Query the current quantity of a specific product. You are required to write a program that supports these operations. Input The first line contains two space-separated integers n and q (1 ≤ n, q ≤ 105) — the number of distinct products and the number of operations (update or query). The next line contains n space-separated integers representing the initial quantities of the n products. Each of the next q lines contains an operation in one of the following two formats: - \\"1 i v\\" (1 ≤ i ≤ n, 1 ≤ v ≤ 105) — Add v to the quantity of the i-th product. - \\"2 i\\" (1 ≤ i ≤ n) — Output the current quantity of the i-th product. Output For each query of the type \\"2 i\\", output the current quantity of the i-th product in a single line. Examples Input 5 3 10 20 30 40 50 1 3 10 2 3 2 5 Output 40 50 Input 4 4 5 10 20 25 1 1 5 2 1 1 4 -10 2 4 Output 10 15 Input 3 2 100 200 150 2 2 1 1 -50 Output 200","solution":"def inventory_operations(n, q, quantities, operations): results = [] for op in operations: op_type = op[0] i = op[1] if op_type == 1: v = op[2] quantities[i-1] += v elif op_type == 2: results.append(quantities[i-1]) return results"},{"question":"You are given an array of n integers where each integer represents the height of a block at position i. Each block can be stacked on another block at a higher position to form a tower if and only if the height of the block being stacked is not greater than the height of the block below it. You need to find the maximum number of blocks that can be stacked to form a tower such that no block is stacked higher than a block with a greater or equal height. Input The first line of input contains a single integer n (1 ≤ n ≤ 1000), the number of blocks. The second line of input contains n space-separated integers h1, h2, ..., hn (-10000 ≤ hi ≤ 10000), where hi represents the height of the block at position i. Output Output a single integer — the maximum number of blocks that can be stacked to form the tallest tower under the given constraints. Examples Input 7 3 1 4 1 5 9 2 Output 4 Input 5 5 3 4 8 6 Output 3","solution":"def max_blocks_to_stack(n, heights): Determine the maximum number of blocks that can be stacked to form a tower. :param n: int, number of blocks :param heights: list of int, the heights of the blocks :return: int, the maximum number of blocks in a tower if n == 0: return 0 # We are using a dynamic programming approach where dp[i] represents the # maximum number of blocks that can be stacked ending with the i-th block. dp = [1] * n # Base case: each block can stand alone in a tower for i in range(1, n): for j in range(0, i): if heights[i] >= heights[j]: # Can be placed on top of the j-th block dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given an integer array `arr` of length n and a set of operations you can perform on the array. The operations are defined as follows: - Choose any non-empty contiguous subarray of `arr`. - Compute the sum of the subarray. - Replace every element in the chosen subarray with the computed sum of the subarray. Your task is to determine the maximum possible value of the sum of the elements of the array after performing zero or more operations. Input The first line contains a single integer T (1 ≤ T ≤ 10^5) — the number of test cases. Each of the following T lines contains: - A single integer n (1 ≤ n ≤ 10^5) — the length of the array. - Followed by n space-separated integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the array. Output For each test case, print the maximum possible value of the sum of the elements of the array after zero or more operations. Example Input ``` 2 3 1 2 3 4 -1 -2 -3 -4 ``` Output ``` 18 -10 ``` Explanation In the first test case, you can select the entire array [1, 2, 3] and replace each element with the sum of the subarray 6, resulting in the array [6, 6, 6]. The maximum possible sum of the elements is 6+6+6 = 18 after one operation. In the second test case, even after performing any operations, the sum of the elements cannot exceed -10. Demonstrate the use of efficient algorithms to handle the constraints, ensuring the solution scales with larger inputs.","solution":"def max_sum_after_operations(arr): Returns the maximum possible value of the sum of the elements of the array after performing zero or more operations. total_sum = sum(arr) return total_sum * len(arr) if total_sum > 0 else total_sum def process_test_cases(T, test_cases): results = [] for case in test_cases: n, arr = case results.append(max_sum_after_operations(arr)) return results"},{"question":"circular_queue RobotInc has developed a new circular queue system for their warehouse robots to manage their tasks in the most efficient manner possible. A circular queue works like a regular queue but wraps around when it reaches the end of the array, reusing unused positions at the start of the array. The circular queue follows these rules: 1. An integer array `queue` of size `N` is used to store elements. 2. `front` and `rear` pointers are used to keep track of the positions of the first and last elements respectively. 3. The queue is empty when `front` and `rear` both point to -1. 4. The queue is full when `(rear + 1) % N == front` and it can no longer accept new elements. You are required to implement a class `CircularQueue` in Python that supports the following operations: * `__init__(self, N)`: Initializes an empty circular queue with a given size `N`. * `enqueue(self, value)`: Inserts `value` into the circular queue. If the queue is full, it should print `Queue is full`. * `dequeue(self)`: Removes the first element from the circular queue and returns it. If the queue is empty, it should return `-1`. * `peek(self)`: Returns the first element in the circular queue without removing it. If the queue is empty, it should return `-1`. * `isEmpty(self)`: Returns `True` if the queue is empty, otherwise `False`. * `isFull(self)`: Returns `True` if the queue is full, otherwise `False`. # Example: ```python cq = CircularQueue(3) cq.enqueue(1) cq.enqueue(2) cq.enqueue(3) # Queue is full print(cq.peek()) # 1 print(cq.dequeue()) # 1 print(cq.dequeue()) # 2 print(cq.dequeue()) # 3 print(cq.dequeue()) # -1 print(cq.isEmpty()) # True print(cq.isFull()) # False cq.enqueue(4) print(cq.peek()) # 4 ``` # Constraints: * `1 <= N <= 1000` * The operations `enqueue`, `dequeue`, and `peek` should run in constant time, `O(1)`.","solution":"class CircularQueue: def __init__(self, N): self.size = N self.queue = [None] * N self.front = -1 self.rear = -1 def enqueue(self, value): if self.isFull(): print(\\"Queue is full\\") return if self.isEmpty(): self.front = 0 self.rear = (self.rear + 1) % self.size self.queue[self.rear] = value def dequeue(self): if self.isEmpty(): return -1 value = self.queue[self.front] if self.front == self.rear: self.front = self.rear = -1 else: self.front = (self.front + 1) % self.size return value def peek(self): if self.isEmpty(): return -1 return self.queue[self.front] def isEmpty(self): return self.front == -1 def isFull(self): return (self.rear + 1) % self.size == self.front"},{"question":"A game developer is creating a new scoring system for a leveling game. Each level in the game gives players points according to a specific pattern. At the first level, players receive 2 points. On the second level, they receive 4 points, on the third level 8 points, and so on, doubling the points awarded on each subsequent level. The developer needs your help to calculate the total score accumulated after completing \'n\' levels. Input The first line contains an integer \'t\', the number of test cases. 1 ≤ t ≤ 100. Each of the next \'t\' lines contains an integer \'n\', the number of levels completed. 1 ≤ n ≤ 50. Output For each test case, output the total score accumulated after completing \'n\' levels. SAMPLE INPUT 2 3 5 SAMPLE OUTPUT 14 62 Explanation Total score till 3rd level = 2 + 4 + 8 = 14 Total score till 5th level = 2 + 4 + 8 + 16 + 32 = 62","solution":"def total_score(n): Calculate the total score accumulated after completing \'n\' levels. Each level\'s points double from the previous one, starting at 2 points. total = 0 points = 2 for i in range(n): total += points points *= 2 return total def solve(test_cases): Processes multiple test cases and returns the results for each. results = [] for n in test_cases: results.append(total_score(n)) return results"},{"question":"In an alien planet, information is transmitted through sequences of numbers. However, some sequences tend to become corrupted due to cosmic interference. To ensure that the information is correctly interpreted, the planet\'s inhabitants use a system that eliminates the corrupted numbers. A sequence is considered corrupted if it contains any subsequence of two identical numbers at a distance of exactly k from each other. The inhabitants want to ensure that any given sequence of numbers is free from such corruptions. Your task is to write a program that will read a sequence of numbers and determine whether it contains any corrupted subsequences and, if it does, output the positions of the first such subsequence found. Input The first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 105), the length of the sequence and the distance between potentially corrupted numbers, respectively. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 109). Output If there is no corrupted subsequence, print \\"OK\\". Otherwise, print two integers i and j (1 ≤ i < j ≤ n) representing the positions of the first corrupted subsequence found. Examples Input 6 2 1 3 1 2 1 4 Output 1 3 Input 5 3 1 2 3 4 5 Output OK","solution":"def find_corrupted_sequence(n, k, sequence): This function checks if there is a corrupted subsequence in the given sequence. If there is, it returns the positions of the first corrupted subsequence found. Otherwise, it returns \\"OK\\". Parameters: n (int): The length of the sequence. k (int): The distance between potentially corrupted numbers. sequence (list): The sequence of numbers. Returns: tuple or str: Returns a tuple (i, j) if a corrupted subsequence is found, otherwise \\"OK\\". for i in range(n - k): if sequence[i] == sequence[i + k]: return i + 1, i + k + 1 return \\"OK\\""},{"question":"Given a sequence of n numbers, your task is to determine if it is possible to split the sequence into two partitions such that the sum of the numbers in each partition is the same. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Each input line contains a sequence of space-separated integers. The end of the input is indicated by a line containing the single integer 0. Input The input is a sequence of lines, each with space-separated integers. Each line (except the terminating line) has at least one and at most 1000 integers. Each integer is non-negative and less than or equal to 1000. Output For each sequence, print \\"YES\\" if the sequence can be partitioned into two subsets with equal sums, otherwise print \\"NO\\". Each output should be on a separate line. Example Input 1 5 11 5 1 2 3 5 0 Output YES NO Note: The problem is a variation of the partition problem, which is a well-known problem in computer science. Solvable using dynamic programming.","solution":"def can_partition(nums): Determines if it is possible to partition the nums list into two subsets such that the sum of the subsets is equal. total_sum = sum(nums) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[target] else \\"NO\\" def process_input_lines(input_lines): Processes the given list of input lines and returns the corresponding results. results = [] for line in input_lines: if line.strip() == \\"0\\": break nums = list(map(int, line.split())) results.append(can_partition(nums)) return results"},{"question":"You are tasked with developing an event management system. Given an array of integers representing the number of attendees on different dates for various events, you are required to answer several queries. Each query asks for the maximum number of attendees over all continuous subarrays within a specified range of dates. # Input - The first line contains an integer `n` (1 ≤ n ≤ 5000) — the number of dates. - The second line contains `n` integers — the number of attendees on each date, where 0 ≤ attendees[i] ≤ 1000000. - The third line contains a single integer `q` (1 ≤ q ≤ 100000) — the number of queries. - Each of the next `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n) — the range of dates for each query. # Output - Print `q` lines — the answers for the queries. Each answer should be the maximum number of attendees over all continuous subarrays within the specified range. # Example Input ``` 6 1 3 2 5 1 1 3 1 3 2 4 1 6 ``` Output ``` 6 10 13 ``` # Explanation - For the first query (1, 3), the possible subarrays are [1], [1, 3], [1, 3, 2], [3], [3, 2], and [2]. The maximum sum of attendees in these subarrays is 6. - For the second query (2, 4), the possible subarrays are [3], [3, 2], [3, 2, 5], [2], [2, 5], and [5]. The maximum sum of attendees in these subarrays is 10. - For the third query (1, 6), the possible subarrays are [1], [1, 3], [1, 3, 2], [1, 3, 2, 5], [1, 3, 2, 5, 1], [1, 3, 2, 5, 1, 1], [3], [3, 2], [3, 2, 5], [3, 2, 5, 1], [3, 2, 5, 1, 1], [2], [2, 5], [2, 5, 1], [2, 5, 1, 1], [5], [5, 1], [5, 1, 1], and [1]. The maximum sum of attendees in these subarrays is 13.","solution":"def max_subarray_sum(arr, start, end): Returns the maximum sum of contiguous subarray for the given range (inclusive). max_sum = -float(\'inf\') current_sum = 0 for i in range(start, end + 1): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum def solve(n, attendees, q, queries): Solves the event management queries for the given attendees array and query ranges. :param n: Number of dates :param attendees: List of integers representing the number of attendees on each date :param q: Number of queries :param queries: List of tuples representing the ranges for each query :return: List of results for each query results = [] for l, r in queries: results.append(max_subarray_sum(attendees, l-1, r-1)) return results"},{"question":"problem You are given an array representing the daily temperatures for a week. Write a program to find out how many days are warmer than the current day for each day in the week. The temperature is provided as a list of integers representing the temperature for each day. The output should be a list of integers, where the ith element is the number of days after the ith day that are warmer than the ith day. If there are no such days, the value should be 0. Example Input [73, 74, 75, 71, 69, 72, 76, 73] Output [1, 1, 4, 2, 1, 1, 0, 0]","solution":"def daily_temperatures(temperatures): This function takes a list of daily temperatures and returns how many days after each day are warmer than it. result = [0] * len(temperatures) stack = [] for i, temp in enumerate(temperatures): while stack and temperatures[stack[-1]] < temp: prev_day = stack.pop() result[prev_day] = i - prev_day stack.append(i) return result"},{"question":"# Find the Maximum Sum of Non-Adjacent Elements Alice has an array of integers and she wants to find the maximum possible sum of some of its non-adjacent elements. Non-adjacent elements are defined as elements that are not consecutive in the original array. Given an array of integers, write a function that returns the maximum sum of non-adjacent elements. If the array is empty, return 0. Input The first line contains a single integer n (0 ≤ n ≤ 105), the length of the array. The second line contains n integers representing the array elements a1, a2, ..., an (-104 ≤ ai ≤ 104). Output Print the maximum sum of non-adjacent elements in the array. Examples Input 4 3 2 5 10 Output 13 Input 3 3 2 7 Output 10 Input 5 3 2 5 10 7 Output 15 Input 0 Output 0 Note In the first example, the optimal sum comes from adding 3 and 10. In the second example, the optimal sum comes from adding 3 and 7. In the third example, the optimal sum comes from adding 3 and 5 and 7. If the array is empty, the sum is 0.","solution":"def max_non_adjacent_sum(arr): Function to return the maximum sum of non-adjacent elements in an array. :param arr: List[int] - List of integers :return: int - Maximum sum of non-adjacent elements if not arr: return 0 incl = 0 excl = 0 for num in arr: # Current max excluding the current num new_excl = max(incl, excl) # Current max including the current num incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"John loves collecting vintage coins and found a rare coin collection at an auction. The collection is stored in an array, where each element represents the value of a coin. John wants to maximize the total value of coins he can collect under the following conditions: - He can only pick coins that are not adjacent to each other. - He has to collect coins in such a way that his collection\'s value is maximized. Write a program to help John decide which coins to pick to achieve the maximum possible total value. Constraints: - The number of coins `N` will satisfy `1 <= N <= 10^5`. - The value of each coin will be a non-negative integer less than or equal to `10^4`. Input The input is given from Standard Input in the following format: First line contains the integer `N` - the number of coins. Second line contains `N` integers separated by spaces, representing the value of each coin. Output Print the maximum possible total value of the coins John can collect. Examples Input 4 4 2 9 7 Output 13 Input 5 3 2 5 10 7 Output 15","solution":"def max_coin_value(values): Returns the maximum value of coins John can collect under the given constraints. n = len(values) if n == 0: return 0 if n == 1: return values[0] dp = [0] * n dp[0] = values[0] dp[1] = max(values[0], values[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + values[i]) return dp[-1] # Reading from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) values = list(map(int, data[1:])) max_value = max_coin_value(values) print(max_value)"},{"question":"You are provided with a sequence of positive integers. Your task is to generate a new sequence where each element at index i (0-based) of the new sequence is the product of all the numbers in the original sequence except the one at index i. Input: - The first line contains an integer n, the number of elements in the sequence. - The second line contains n positive integers separated by space, representing the original sequence. Output: - Print the new sequence of n integers as described above, separated by space. Constraints: - 1 ≤ n ≤ 50 - 1 ≤ each element of the sequence ≤ 10^3 SAMPLE INPUT 5 1 2 3 4 5 SAMPLE OUTPUT 120 60 40 30 24 SAMPLE INPUT 4 2 3 4 5 SAMPLE OUTPUT 60 40 30 24","solution":"def product_except_self(sequence): Given a sequence of positive integers, returns a new sequence where each element at index i of the new sequence is the product of all the numbers in the original sequence except the one at index i. n = len(sequence) if n == 0: return [] total_product = 1 zero_count = 0 for num in sequence: if num == 0: zero_count += 1 else: total_product *= num result = [0] * n for i in range(n): if zero_count > 1: result[i] = 0 elif zero_count == 1: if sequence[i] == 0: result[i] = total_product else: result[i] = 0 else: result[i] = total_product // sequence[i] return result"},{"question":"Given an array `arr` of length `n`, write a function that returns a count of all the triplets (i, j, k) such that `0 ≤ i < j < k < n`, and `arr[i]`, `arr[j]`, and `arr[k]` form an increasing sequence. Input The first line of input contains an integer `n` (1 ≤ n ≤ 2000), the size of the array. The second line contains `n` space-separated integers representing the array `arr` (1 ≤ arr[i] ≤ 10^9). Output A single integer, the count of all increasing triplets. Examples Input 5 1 2 3 4 5 Output 10 Input 5 5 1 3 2 4 Output 2 Input 4 4 3 2 1 Output 0","solution":"def count_increasing_triplets(arr): Returns the count of increasing triplets in the array arr. n = len(arr) count = 0 for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if arr[i] < arr[j] < arr[k]: count += 1 return count"},{"question":"You are given a sequence of lowercase and uppercase letters and digits, and an integer k. The task is to determine the number of distinct substrings of length k that appear in the given sequence. For example, in the sequence \\"abracadabra\\" and k = 3, the substrings of length 3 are \\"abr\\", \\"bra\\", \\"rac\\", \\"aca\\", \\"cad\\", \\"ada\\", \\"dab\\", \\"abr\\", \\"bra\\". The distinct substrings are \\"abr\\", \\"bra\\", \\"rac\\", \\"aca\\", \\"cad\\", \\"ada\\", \\"dab\\". Input The first line contains an integer k (1 ≤ k ≤ 100). The second line contains a string s of length n (k ≤ n ≤ 10^6) consisting of lowercase and uppercase latin letters and digits. Output Print one integer — the number of distinct substrings of length k. Examples Input 3 abracadabra Output 7 Input 2 AAA Output 1 Input 1 abcde Output 5","solution":"def count_distinct_substrings(s, k): Returns the number of distinct substrings of length k in the given string s. distinct_substrings = set() for i in range(len(s) - k + 1): substring = s[i:i + k] distinct_substrings.add(substring) return len(distinct_substrings)"},{"question":"A social network has a feature to find mutual friends between users. Given the list of friends for two users, we want to efficiently determine their mutual friends in alphabetical order. Write a function that takes in two lists of friends and returns a sorted list of mutual friends, ignoring case sensitivity when comparing names. Input:- First line contains no. of test cases and first line of each test case contains two integers m and n, representing the number of friends of the first and second user respectively. The next m lines contain names of friends of the first user, followed by the next n lines containing names of friends of the second user. Output:- For each test case, print the mutual friends in alphabetical order, each friend on a new line. If there are no mutual friends, print \\"No mutual friends\\". SAMPLE INPUT 2 3 3 Alice Bob Charlie bob Charlie David 4 3 Eve Mallory Oscar Trudy alice EVE MALLORY SAMPLE OUTPUT bob Charlie EVE MALLORY","solution":"def find_mutual_friends(case_count, cases): results = [] for case in cases: m, n, friends_1, friends_2 = case friends_1_set = {friend.lower() for friend in friends_1} friends_2_set = {friend.lower() for friend in friends_2} mutual_friends = friends_1_set.intersection(friends_2_set) if mutual_friends: mutual_list = sorted(mutual_friends) results.append(mutual_list) else: results.append(\\"No mutual friends\\") return results # Helper function to parse input def parse_input(input_str): lines = input_str.strip().split(\'n\') case_count = int(lines[0]) cases = [] index = 1 for _ in range(case_count): m, n = map(int, lines[index].split()) friends_1 = lines[index+1:index+1+m] friends_2 = lines[index+1+m:index+1+m+n] cases.append((m, n, friends_1, friends_2)) index += 1 + m + n return case_count, cases"},{"question":"A company\'s internal dashboard generates a sequence of widgets every hour. Your task is to determine the longest subsequence of non-repeating widgets. Write a function `longest_unique_subsequence(widgets: str) -> int` that takes a string representing the widgets generated in one hour and returns the length of the longest subsequence of unique widgets. # Function Signature ```python def longest_unique_subsequence(widgets: str) -> int: ``` # Input - `widgets`: A string (1 ≤ len(widgets) ≤ 10^4) containing only lowercase English letters, representing a sequence of widgets. # Output - An integer representing the length of the longest subsequence of unique widgets. # Example Example 1: Input: `widgets = \\"bbbbb\\"` Output: `1` Explanation: The longest subsequence with all unique widgets is \\"b\\". Example 2: Input: `widgets = \\"abcabcbb\\"` Output: `3` Explanation: The longest subsequence with all unique widgets is \\"abc\\". Example 3: Input: `widgets = \\"pwwkew\\"` Output: `3` Explanation: The longest subsequence with all unique widgets is \\"wke\\". Note that the answer must be a subsequence, \\"pwke\\" is not a valid answer because it skips the \\"w\\".","solution":"def longest_unique_subsequence(widgets: str) -> int: Returns the length of the longest subsequence of unique widgets. if not widgets: return 0 max_length = 0 start = 0 seen = {} for index, char in enumerate(widgets): if char in seen and seen[char] >= start: start = seen[char] + 1 seen[char] = index max_length = max(max_length, index - start + 1) return max_length"},{"question":"A software company has a system where employees can submit their queries or concerns through a ticketing system. Each ticket is categorized into one of three types: Bug, Feature, or Support. Depending on the type of ticket and its priority, it can either be handled by the first available agent or placed in a queue for further action. The time taken to resolve a ticket depends on its type and priority. You are tasked with implementing a ticket handling system that processes tickets based on the following rules: - Each ticket has a type (Bug, Feature, Support) and a priority (1 being the highest and 5 being the lowest). - Bugs are always handled before Features and Supports, regardless of their priority. - If two tickets have the same type, the one with the higher priority is handled first. - If two tickets have the same type and priority, the one that was submitted earlier is handled first. Implement a function that simulates the ticket handling system, and outputs the order in which tickets are handled. Input: - The first line contains an integer n (1 ≤ n ≤ 10,000), the number of tickets. - Each of the next n lines contains two integers and a string representing the priority, submission time (in seconds since start of the day), and type of the ticket, respectively. The type will be one of \\"Bug\\", \\"Feature\\", or \\"Support\\". Output: - Print the order in which the tickets are handled. Each line should contain the priority, submission time, and type of the ticket. Examples Input: 5 3 100 Bug 2 90 Feature 1 110 Bug 5 120 Support 4 105 Feature Output: 1 110 Bug 3 100 Bug 2 90 Feature 4 105 Feature 5 120 Support In this example, the tickets are handled in this order: 1. The Bug with priority 1 submitted at time 110 2. The Bug with priority 3 submitted at time 100 3. The Feature with priority 2 submitted at time 90 4. The Feature with priority 4 submitted at time 105 5. The Support with priority 5 submitted at time 120","solution":"def process_tickets(n, tickets): Processes the list of tickets based on the priority rules and prints them in the order they should be handled. Args: n: int - number of tickets. tickets: List[Tuple[int, int, str]] - list of tickets where each ticket is represented as (priority, submission_time, type). Returns: List[Tuple[int, int, str]]: List of tickets in the order they should be processed. # Create a sorting key for the tickets type_priority = {\'Bug\': 0, \'Feature\': 1, \'Support\': 2} # Sort tickets based on custom rules: # - Type in the order: Bug, Feature, Support # - Priority (higher priority comes first) # - Submission time (earlier submission comes first) sorted_tickets = sorted(tickets, key=lambda ticket: (type_priority[ticket[2]], ticket[0], ticket[1])) return sorted_tickets # Example usage: n = 5 tickets = [ (3, 100, \'Bug\'), (2, 90, \'Feature\'), (1, 110, \'Bug\'), (5, 120, \'Support\'), (4, 105, \'Feature\') ] result = process_tickets(n, tickets) for ticket in result: print(ticket)"},{"question":"Alice has a list of non-negative integers. She wants to find the subarray with the maximum bitwise AND value. The bitwise AND value of an array is the result of performing the bitwise AND operation on all the elements of the array. Your task is to help Alice find this maximum bitwise AND value. Input The first line contains a single integer n (1 ≤ n ≤ 100,000), the length of the array. The second line contains n non-negative integers a_1, a_2, ..., a_n (0 ≤ a_i < 2^30), the elements of the array. Output Output a single integer, the maximum bitwise AND value of any subarray. Example Input 4 4 8 10 3 Output 8 Note In the example, the subarray [8] has the maximum bitwise AND value which is 8. Although subarray [4, 8, 10] results in the value 0, subarray [8, 10] results in the value 8, which is the maximum possible bitwise AND from any subarray.","solution":"def max_subarray_bitwise_and(n, arr): Returns the maximum bitwise AND value of any subarray. max_value = 0 for num in arr: max_value = max(max_value, num) return max_value"},{"question":"Given a string S of length N, you need to determine the minimum number of changes required to convert it to a \\"balanced\\" string. A string is considered balanced if no two adjacent characters are the same. For example, \\"aba\\", \\"abab\\", \\"abcabc\\" are balanced, while \\"aa\\", \\"aab\\", \\"aabbcc\\" are not. Constraints * 1 ≤ N ≤ 100,000 * S consists of lowercase English letters (\'a\' to \'z\'). Input Input is given from Standard Input in the following format: N S Output Output the minimum number of changes required to convert the string to a balanced string. Examples Input 3 aab Output 1 Input 5 abcde Output 0 Input 6 aabbcc Output 3 Input 8 aaaabbbb Output 4","solution":"def min_changes_to_balanced(N, S): changes = 0 for i in range(1, N): if S[i] == S[i - 1]: # If two consecutive characters are the same, we need to change one of them changes += 1 # Change to an arbitrary different character (can be any character other than S[i]) if i + 1 < N and S[i] == S[i + 1]: S = S[:i] + (\'z\' if S[i] != \'z\' else \'y\') + S[i + 1:] else: S = S[:i] + (\'z\' if S[i] != \'z\' else \'y\') + S[i + 1:] return changes"},{"question":"John is building different toy models using equal-sized bricks that come in multiple colors. He has an unlimited supply of each color. Each model requires an equal mixture of colors, which means he needs the same number of bricks from each color to create a model. John is given a list of integers representing the distinct colors of bricks available. He wants to know the maximum number of complete models he can create if he uses all blocks of the smallest color count. Given t test cases, for each test case, you need to find the maximum number of complete models John can make using all the bricks of the color that has the fewest bricks. Input The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next t lines contains a sequence of integers, where each integer represents the count of bricks of a distinct color John has. Each sequence starts with an integer n (1 ≤ n ≤ 2⋅10^5), the number of distinct colors, followed by n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the count of bricks of each color. Output For each test case, print one integer, the number of complete models John can create using bricks of the color with the fewest bricks. Example Input 3 5 10 12 15 3 9 4 8 8 8 8 3 1 1 1 Output 3 8 1 Note In the first test case, John has bricks in 5 colors and the counts are 10, 12, 15, 3, and 9. The color with the minimum bricks is 3, so John can create 3 complete models using bricks of all 5 colors. In the second test case, John has bricks in 4 colors and all counts are 8. Therefore, he can make 8 complete models. In the third test case, there are 3 colors each with just 1 brick, so John can only make 1 complete model.","solution":"def max_complete_models(t, cases): Given the number of test cases and each test case containing counts of bricks of different colors, return the maximum number of complete models that can be created for each test case. results = [] for case in cases: counts = case[1:] min_count = min(counts) results.append(min_count) return results"},{"question":"Anna is a fitness enthusiast who likes to go jogging every morning along a straight path. The path is marked with milestones starting from 0 up to n (inclusive), where 0 represents the start of the path and n represents the end. Anna has a special GPS device that tracks her jogging trail and gives a signal every m meters. However, Anna wants to make her jog more challenging by ensuring that her GPS device signals exactly r times during her jog. She wants to figure out the total distance she needs to jog such that exactly r signals are received. Given integers n, m, and r, determine the shortest total distance Anna has to jog such that she receives exactly r signals from her GPS device. Input The first line contains three integers, n, m, and r (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100, 1 ≤ r ≤ 100) — the length of the jogging path, the interval of the GPS signals, and the number of signals Anna wants her GPS device to give during the jog, respectively. Output Print one integer — the minimum total distance Anna has to jog. Examples Input 50 10 3 Output 30 Input 100 15 5 Output 75 Input 300 25 4 Output 100 Note In the first sample, Anna wants her GPS to signal 3 times (r = 3), and the GPS signals every 10 meters (m = 10). Therefore, she needs to jog a minimum of 10 * 3 = 30 meters to receive exactly 3 signals. In the second sample, with r = 5 and m = 15, Anna needs to jog a minimum of 15 * 5 = 75 meters to receive exactly 5 signals. In the third sample, with r = 4 and m = 25, Anna needs to jog a minimum of 25 * 4 = 100 meters to receive exactly 4 signals.","solution":"def minimum_distance(n, m, r): Calculates the minimum total distance Anna has to jog such that she receives exactly r signals from her GPS device. Parameters: n (int): Length of the jogging path. m (int): Interval of the GPS signals. r (int): Number of signals. Returns: int: The minimum total distance Anna has to jog. return m * r"},{"question":"You are given two strings s and t of equal length consisting only of lowercase English letters. In one move, you can pick any character in string s and replace it with any other lowercase English letter. Your task is to determine the minimum number of moves required to transform string s into string t. Input The first line of the input contains one integer n (1 ≤ n ≤ 100) — the length of each string. The second line of the input contains the string s. The third line of the input contains the string t. Output Print one integer — the minimum number of moves required to transform s into t. Example Input 6 abcdef fedcba Output 6","solution":"def min_moves_to_transform(s, t): Returns the minimum number of moves required to transform string s into string t. # Both strings are of the same length, as specified # So we can simply count the positions where characters differ moves = 0 for char_s, char_t in zip(s, t): if char_s != char_t: moves += 1 return moves"},{"question":"Given a 2D grid of M rows and N columns, where each cell has an integer value, you need to handle Q queries on this grid. Each query can either update a value in the grid or calculate the sum of a subgrid. There are two types of queries: * 1 x y v: Update the value at cell (x, y) to v. * 2 x1 y1 x2 y2: Calculate the sum of all values in the subgrid from the top-left corner (x1, y1) to the bottom-right corner (x2, y2), inclusive. Input: The first line of the input contains two integers M and N (1 ≤ M, N ≤ 1000) representing the number of rows and columns, respectively. Each of the next M lines contains N integers, representing the values in the grid. Each integer value is in the range of [-10^9, 10^9]. The next line contains an integer Q (1 ≤ Q ≤ 10^5), representing the number of queries. The next Q lines contain the queries, one per line, in one of the two formats described above. It is guaranteed that there is at least one query of the second type. Output: For each query of the second type, print the sum of the subgrid specified in the query. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 5 2 1 1 2 2 1 2 2 -2 2 1 1 3 3 1 1 1 0 2 3 3 3 3 Output: 12 38 9","solution":"class Grid: def __init__(self, M, N, grid): self.M = M self.N = N self.grid = grid def update_value(self, x, y, v): self.grid[x - 1][y - 1] = v def subgrid_sum(self, x1, y1, x2, y2): total = 0 for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): total += self.grid[i][j] return total def handle_queries(M, N, grid, queries): g = Grid(M, N, grid) results = [] for query in queries: parts = query.split() type_query = int(parts[0]) if type_query == 1: x, y, v = int(parts[1]), int(parts[2]), int(parts[3]) g.update_value(x, y, v) elif type_query == 2: x1, y1, x2, y2 = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) results.append(g.subgrid_sum(x1, y1, x2, y2)) return results"},{"question":"The city of GridLand wants to improve its public transportation system by building a new set of bus routes between its neighborhoods. GridLand is structured as an n x m grid where each cell represents a neighborhood. The city council wants to ensure that it\'s possible to travel between any two neighborhoods directly or indirectly via the bus routes. To achieve this, they need to calculate the minimum number of two-way roads required to connect all neighborhoods. Roads can only be built between adjacent neighborhoods, meaning horizontal or vertical connections between neighboring cells. Given the dimensions of the grid, write a program to determine the minimum number of roads needed. Input Format: The first line contains an integer t, the number of test cases. Each of the next t lines contains two integers, n and m, representing the number of rows and columns in the grid. Output Format: For each test case, output the minimum number of roads required. Constraints: 1 ≤ t ≤ 100 1 ≤ n, m ≤ 10^6 SAMPLE INPUT 2 3 4 2 2 SAMPLE OUTPUT 9 3 Explanation In the first test case (3x4 grid), there are 3 rows and 4 columns. - We need 3*(4-1) = 9 horizontal roads to connect neighborhoods within rows. - We need 4*(3-1) = 8 vertical roads to connect neighborhoods within columns. So the total is 9 + 8 = 17 roads. In the second test case (2x2 grid), there are 2 rows and 2 columns. - We need 2*(2-1) = 2 horizontal roads to connect neighborhoods within rows. - We need 2*(2-1) = 2 vertical roads to connect neighborhoods within columns. So the total is 2 + 2 = 4 roads. Finally, to avoid overcounting, we subtract the redundant roads for the unique cell intersections. The correct number of roads for an n x m grid is calculated by (n - 1) * m + (m - 1) * n. So the correct number of roads for the samples are 9 and 3 respectively.","solution":"def min_num_of_roads(t, test_cases): result = [] for n, m in test_cases: # Minimum number of roads (n - 1) * m + (m - 1) * n roads = (n - 1) * m + (m - 1) * n result.append(roads) return result"},{"question":"You are given an array of integers representing the heights of trees in a forest. You can cut down some of the trees to potentially obtain a sequence of tree heights that is strictly increasing. Your task is to calculate the minimum number of trees you need to cut down so that the remaining sequence of tree heights is strictly increasing. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of trees in the forest. The second line contains n integers, h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1000) — the heights of the trees. Output Print an integer — the minimum number of trees you need to cut down so that the remaining tree heights form a strictly increasing sequence. Examples Input 5 3 2 5 1 7 Output 2 Input 6 1 3 2 4 3 5 Output 2 Input 4 1 2 3 4 Output 0 Note In the first example, you can cut down the trees of height 2 and 1, resulting in the sequence [3, 5, 7], which is strictly increasing. So the answer is 2. In the second example, you can cut down the trees of height 2 and 3, resulting in the sequence [1, 3, 4, 5], which is strictly increasing. So the answer is 2. In the third example, the given sequence is already strictly increasing, so no trees need to be cut down. The answer is 0.","solution":"def min_trees_to_cut(n, heights): Returns the minimum number of trees to cut down so that the remaining sequence of tree heights is strictly increasing. # We need to find the longest increasing subsequence (LIS) # The minimum number of trees to cut is n - len(LIS) if n == 0: return 0 # LIS dynamic programming approach lis = [1] * n for i in range(1, n): for j in range(i): if heights[i] > heights[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 longest_increasing_subsequence_length = max(lis) return n - longest_increasing_subsequence_length"},{"question":"A robot is programmed to move on a 2D grid starting from the position (0, 0). It can move up, down, left, or right by one unit at a time. Along its path, it can encounter obstacles that it needs to avoid. The goal is to determine whether the robot can reach a given target position. The grid is represented as a matrix where \'.\' represents an empty cell, \'#\' represents an obstacle, and \'T\' represents the target position. The robot starts from the top-left corner of the grid, denoted by (0, 0). Write a function to determine whether the robot can reach the target position. The robot can only move to adjacent cells (up, down, left, right) that are empty cells (i.e., not obstacles). Input The input consists of: - An integer n (1 ≤ n ≤ 1000) indicating the number of rows of the grid. - An integer m (1 ≤ m ≤ 1000) indicating the number of columns of the grid. - An n x m grid where each cell is either \'.\', \'#\', or \'T\'. The starting position of the robot is always the top-left corner (0, 0) and is guaranteed to be empty. Output Output \\"YES\\" if the robot can reach the target position, otherwise output \\"NO\\". Example Input 5 5 ..#.. ..#.. ..#.. ...... ...T. Output YES Input 5 5 ..#.. ..#.. # ...... ...T. Output NO Input 3 3 .#T # ..# Output NO","solution":"def can_reach_target(n, m, grid): from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] != \'#\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if grid[x][y] == \'T\': return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"Given a list of words, determine if they can form a word square. A word square is a sequence of words arranged in a square grid, such that the ith row and ith column read the same word. Input The first line contains an integer n (1 ≤ n ≤ 5) – the number of words. Each of the next n lines contains a word consisting of lowercase English letters. All words have the same length, which is at most 5. Output Output \\"YES\\" if the words can form a word square, otherwise output \\"NO\\". Examples Input 4 area lead lady yard Output NO Input 4 ball area lead lady Output YES Explanation In the second example, the words can be arranged as follows to form a word square: ball area lead lady","solution":"def is_word_square(words): Determines if the given list of words can form a word square. Parameters: words (list): List of words Returns: str: \\"YES\\" if the words can form a word square, otherwise \\"NO\\" n = len(words) for i in range(n): for j in range(n): if words[i][j] != words[j][i]: return \\"NO\\" return \\"YES\\""},{"question":"Problem You are given a task to implement a simplified version of a route optimization algorithm for delivery services. The goal is to determine the shortest possible route that visits all the specified delivery locations exactly once and returns to the starting point. The cities are uniquely identified by integers from 1 to N. The distance between each pair of cities is provided in a square matrix, where the entry at row i and column j represents the distance from city i to city j. Your task is to find the minimum round-trip distance that visits all cities exactly once and returns to the starting city. Constraints The input satisfies the following conditions. * 2 ≤ N ≤ 10 * 0 ≤ distanceij ≤ 1000, where distanceij is the distance between cities i and j. * The number of test cases does not exceed 5. * All values contained in the input are integers. Input The input consists of multiple datasets. Each dataset is represented below. N distance11 distance12 ... distance1N distance21 distance22 ... distance2N ... distanceN1 distanceN2 ... distanceNN When N = -1, the input ends. Output Print the answer (minimum round-trip distance) on one line for each dataset. Example Input 3 0 10 15 10 0 20 15 20 0 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 -1 Output 45 80","solution":"from itertools import permutations def calculate_minimum_distance(N, distance_matrix): Returns the minimum round-trip distance that visits all cities exactly once and returns to the starting city. if N == -1 or N == 0: return 0 cities = range(N) min_distance = float(\'inf\') for perm in permutations(cities): current_distance = 0 for i in range(N): current_distance += distance_matrix[perm[i]][perm[(i + 1) % N]] min_distance = min(min_distance, current_distance) return min_distance def route_optimization(data): results = [] index = 0 while index < len(data): N = data[index] if N == -1: break distance_matrix = [] for i in range(1, N + 1): distance_matrix.append(list(map(int, data[index + i].split()))) result = calculate_minimum_distance(N, distance_matrix) results.append(result) index += N + 1 return results"},{"question":"Eve is working on a new system that helps detect anomalies in large data sets. She receives a sequence of N integers representing daily metrics of the system. Her goal is to identify the maximum difference between the highest and the lowest element within any contiguous subarray of length exactly k. Given a sequence A of N integers and a positive integer k, calculate this maximum difference. Input The first line of the input contains two space-separated integers N and k (1 ≤ k ≤ N ≤ 100,000) – the number of elements in the sequence and the length of the subarray to consider. The second line contains N space-separated integers which represent the elements of the sequence A. Each integer is from the interval [-1,000,000, 1,000,000]. Output Output a single integer that is the maximum difference between the highest and the lowest element in any contiguous subarray of length exactly k. Examples Input 8 3 1 3 6 2 9 7 4 10 Output 7 Input 5 2 5 3 -2 6 8 Output 8 Note In the first example, one possible subarray of length 3 is [6, 2, 9]. The difference between the highest element (9) and the lowest element (2) is 7. This is the maximum difference possible among all subarrays of length 3. In the second example, the subarray [-2, 6] has the difference between the highest element (6) and the lowest element (-2) as 8, which is the maximum difference possible among all subarrays of length 2.","solution":"def max_difference_subarray(N, k, A): if k == 1: return 0 max_diff = 0 for i in range(N - k + 1): subarray = A[i:i + k] max_element = max(subarray) min_element = min(subarray) max_diff = max(max_diff, max_element - min_element) return max_diff"},{"question":"A software development company is evaluating the productivity of its coders. They define productivity as the number of lines of code written per hour of work. The company wants to identify the coder with the maximum productivity from a given list of coders. You need to write a program that receives a list of coders, their total hours worked and corresponding lines of code written, and then calculates and outputs the maximum productivity value and the name of the coder who has that productivity. Input The first line contains an integer N, total number of coders. Then follow N lines, each containing the name of the coder (a string without spaces), the number of hours worked (an integer), and the lines of code written (an integer). Output Output the maximum productivity value and the name of the coder who has that productivity, separated by a space. If multiple coders have the same maximum productivity, output the name of the first coder in the input list with that productivity. Constraints 1 ≤ N ≤ 1000 1 ≤ hours_worked ≤ 100 1 ≤ lines_of_code ≤ 100000 Example Input 3 Alice 10 500 Bob 20 850 Charlie 15 900 Output 60 Charlie","solution":"def find_max_productivity(coders): max_productivity = -1 best_coder = \\"\\" for name, hours, lines in coders: productivity = lines / hours if productivity > max_productivity: max_productivity = productivity best_coder = name return f\\"{max_productivity:.0f} {best_coder}\\" def parse_input(input_str): lines = input_str.strip().split(\'n\') N = int(lines[0]) coders = [line.split() for line in lines[1:N+1]] coders = [(name, int(hours), int(lines)) for name, hours, lines in coders] return coders"},{"question":"Sara loves playing with strings. Today, she came across a problem which she found interesting. She has a string and she wants to know the number of distinct substrings that can be formed from this string. However, Sara is busy and asks you to help her solve it. Your task is to write a program that takes a string as input and outputs the number of distinct substrings that can be generated from it. Input The input consists of a single string S of length n (1 <= n <= 100) containing only lowercase English letters. Output A single integer representing the number of distinct substrings of the input string S. Example Input abc Output 6 Explanation The distinct substrings of \\"abc\\" are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Thus, the total number of distinct substrings is 6. Note For the string \\"aa\\", the distinct substrings are \\"a\\", and \\"aa\\". The repeating \\"a\\" is counted only once.","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings of the input string s. distinct_substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): distinct_substrings.add(s[i:j]) return len(distinct_substrings)"},{"question":"Santa works as a chef in his spare time and he decided to create a unique fruit salad recipe. The fruit salad consists of different types of fruits and nuts. Each type of fruit and each type of nut has a certain sweetness and crunchiness respectively. The total deliciousness of the fruit salad is determined by multiplying the sweetness of each fruit by the crunchiness of each nut and then summing up these values. Santa needs your help to calculate the total deliciousness of his fruit salad. **Input:** The first line contains the two integers `F` and `N`, separated by a space, where `F` is the number of fruit types and `N` is the number of nut types. The second line contains `F` integers representing the sweetness values of the fruits. The third line contains `N` integers representing the crunchiness values of the nuts. **Output:** Output a single integer which is the total deliciousness of the fruit salad. **Constraints:** - `1 ≤ F, N ≤ 100,000` - Each sweetness and crunchiness value is an integer between `1` and `1,000` **Example Input 1:** ``` 3 2 3 4 2 5 6 ``` **Example Output 1:** ``` 90 ``` **Explanation:** The possible combinations and their corresponding deliciousness are as follows: - Sweetness 3 and Crunchiness 5: 3 * 5 = 15 - Sweetness 3 and Crunchiness 6: 3 * 6 = 18 - Sweetness 4 and Crunchiness 5: 4 * 5 = 20 - Sweetness 4 and Crunchiness 6: 4 * 6 = 24 - Sweetness 2 and Crunchiness 5: 2 * 5 = 10 - Sweetness 2 and Crunchiness 6: 2 * 6 = 12 Total deliciousness = 15 + 18 + 20 + 24 + 10 + 12 = 99 **Example Input 2:** ``` 1 1 10 10 ``` **Example Output 2:** ``` 100 ``` **Explanation:** Only one combination is possible: - Sweetness 10 and Crunchiness 10: 10 * 10 = 100 Total deliciousness = 100","solution":"def calculate_total_deliciousness(F, N, sweetness_values, crunchiness_values): Calculate the total deliciousness of the fruit salad. Args: F (int): The number of fruit types. N (int): The number of nut types. sweetness_values (list of int): The sweetness values of the fruits. crunchiness_values (list of int): The crunchiness values of the nuts. Returns: int: The total deliciousness of the fruit salad. total_deliciousness = 0 for sweetness in sweetness_values: for crunchiness in crunchiness_values: total_deliciousness += sweetness * crunchiness return total_deliciousness"},{"question":"The Kingdom of Integers has a great tradition of hosting a yearly coding competition. This year, there is a unique challenge presented to the contestants. Every contestant is given a sequence of n integers. The goal is to split this sequence into exactly two subsequences such that the difference between the sum of the elements in the first subsequence and the sum of the elements in the second subsequence is minimized. Your task is to help the contestants by writing a program that finds the minimum possible absolute difference between the sums of two such subsequences. Input The first line contains an integer n (1 ≤ n ≤ 20) — the number of integers in the sequence. The second line contains n integers separated by spaces, each lying between -10^6 and 10^6. Output Output a single integer — the minimum possible absolute difference between the sums of the two subsequences. Examples Input 4 1 2 3 4 Output 0 Input 3 -1 -1 1 Output 1","solution":"def minimize_difference(nums): n = len(nums) total_sum = sum(nums) min_diff = float(\'inf\') def backtrack(index, current_sum): nonlocal min_diff if index == n: other_sum = total_sum - current_sum min_diff = min(min_diff, abs(current_sum - other_sum)) return # Include current number in the first subset backtrack(index + 1, current_sum + nums[index]) # Exclude current number from the first subset (include in the second) backtrack(index + 1, current_sum) backtrack(0, 0) return min_diff"},{"question":"You are given a directed graph G with n nodes and m edges. Each node is labeled with a lowercase English letter. The edges are directed and each edge has a positive weight. The graph does not contain self-loops or multiple edges between the same pair of nodes. For a given string s consisting of lowercase English letters, we define the cost to form the string based on the graph as follows: 1. The cost to form a string of length 1 is 0 if the corresponding node exists in the graph. 2. For a string s of length k > 1, the cost to form the string is the minimum cost of forming the first k-1 characters plus the weight of an edge that allows forming the k-th character from the previous k-1 characters. Your task is to determine the minimum cost required to form the string s starting from any node in the graph. If it is not possible to form the string, return -1. # Input - The first line contains three integers n (1 ≤ n ≤ 100), m (1 ≤ m ≤ 10,000), and l (1 ≤ l ≤ 50) — the number of nodes, the number of edges, and the length of the string s. - The second line contains the string s consisting of lowercase English letters. - Each of the next n lines contains a lowercase English letter representing the label of the respective node. - Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) representing a directed edge from node u to node v with weight w. # Output - Print a single integer representing the minimum cost to form the string s. If it is not possible to form the string, print -1. # Examples Input ``` 3 3 3 abc a b c 1 2 3 2 3 2 1 3 4 ``` Output ``` 5 ``` Input ``` 4 4 5 ababa a b a b 1 2 1 2 3 1 3 4 1 4 1 1 ``` Output ``` 4 ``` Note In the first example, we can start at node 1 (labeled \'a\'), then move to node 2 (labeled \'b\') with a cost of 3, and finally move to node 3 (labeled \'c\') with an additional cost of 2 for a total cost of 5. In the second example, we can alternate between nodes labeled \'a\' and \'b\' with minimal edge weights to form the string \\"ababa\\".","solution":"from heapq import heappop, heappush import sys def min_cost(n, m, l, s, node_labels, edges): label_to_nodes = {} for i, label in enumerate(node_labels): if label not in label_to_nodes: label_to_nodes[label] = [] label_to_nodes[label].append(i + 1) graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) dp = {i: 0 for i in label_to_nodes.get(s[0], [])} for k in range(1, l): next_dp = {} for u, cost in dp.items(): if s[k] in label_to_nodes: for v in label_to_nodes[s[k]]: for nei, w in graph[u]: if nei == v: if v not in next_dp or next_dp[v] > cost + w: next_dp[v] = cost + w dp = next_dp if dp: return min(dp.values()) return -1"},{"question":"**Problem Statement:** James is fascinated by numbers and their properties. He recently learned about fascinating numbers in mathematics. A number is called *fascinating* if it is greater than 100 and when it is concatenated with twice and thrice itself, the resulting number contains all digits from 1 to 9 exactly once. For example: - 192 is a fascinating number because `192`, `192*2=384`, and `192*3=576`. Concatenating these, we get `192384576`, which includes all digits from 1 to 9 exactly once. - 583 is not a fascinating number because concatenating `583`, `583*2=1166`, and `583*3=1749` gives the string `58311661749`, which does not contain all digits from 1 to 9 exactly once. James wants to find out if a given number is fascinating. Write a program that checks if the given number is a fascinating number. **Input**: A single integer `n` (1 ≤ n ≤ 10^9) **Output**: Print \\"Fascinating\\" if the given number is a fascinating number, else print \\"Not Fascinating\\". **Examples**: **Input**: 192 **Output**: Fascinating **Input**: 583 **Output**: Not Fascinating **Input**: 100 **Output**: Not Fascinating","solution":"def is_fascinating(n): Checks if the number n is a fascinating number. if n <= 100: return False concatenated = str(n) + str(n * 2) + str(n * 3) all_digits = \\"123456789\\" return \'\'.join(sorted(concatenated)) == all_digits"},{"question":"Given a list of words, your task is to group the words that are anagrams of each other. Input The first line contains an integer `n` representing the total number of words. The next `n` lines contain one word each. All words consist of lowercase English letters and have length at most 100. `n` doesn\'t exceed 1000. Output Print the groups of words that are anagrams of each other. Each group should be printed on a separate line and the words within each group should be space-separated. Each group should be sorted in lexicographical order. The groups themselves should be sorted based on the first word of each group in lexicographical order. Examples Input 6 cat dog tac god act odg Output act cat tac dog god odg Input 5 rat tar art bats tabs Output art rat tar bats tabs","solution":"def group_anagrams(words): from collections import defaultdict anagram_dict = defaultdict(list) # Group the words by their sorted tuple of characters for word in words: sorted_word = tuple(sorted(word)) anagram_dict[sorted_word].append(word) # Create the result as a list of lists result = [sorted(group) for group in anagram_dict.values()] # Sort the result by the first word of each group result.sort() # Convert to the desired format (list of space-separated words as strings) return [\\" \\".join(group) for group in result]"},{"question":"Given a matrix of size N x M filled with non-negative integers, you are required to find the sum of all unique elements in the matrix. An element is considered unique if it appears only once in the matrix. Input: The first line of input contains integer T denoting the number of test cases. For each test case, the first line contains two integers N and M representing the number of rows and columns of the matrix respectively. The next N lines each contain M integers representing the elements of the matrix. Output: For each test case, output a single integer representing the sum of all unique elements in the corresponding matrix. Constraints: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 0 ≤ Matrix[i][j] ≤ 1000 Example: Input: 2 3 3 1 2 3 4 5 6 7 8 9 2 2 1 2 2 1 Output: 45 0","solution":"def sum_of_unique_elements(test_cases): result = [] for case in test_cases: n, m = case[\'dimensions\'] matrix = case[\'matrix\'] element_count = {} for row in matrix: for val in row: if val in element_count: element_count[val] += 1 else: element_count[val] = 1 unique_sum = sum(k for k, v in element_count.items() if v == 1) result.append(unique_sum) return result # Example usage: # test_cases = [ # {\\"dimensions\\": (3, 3), \\"matrix\\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}, # {\\"dimensions\\": (2, 2), \\"matrix\\": [[1, 2], [2, 1]]} # ] # print(sum_of_unique_elements(test_cases)) # Output: [45, 0]"},{"question":"A new company has decided to implement a team-building activity involving a chain of handshakes. Each participant stands in a line and the CEO, who stands at the beginning of the line, initiates a series of handshakes. The CEO shakes hands with every other person once. After shaking hands with the CEO, the next person in line continues the chain by shaking hands with each further person once, and so on until the end of the line is reached. The objective is to determine the total number of unique handshakes that occur. For example, if there are 4 participants (including the CEO), the handshakes would proceed as follows: - CEO shakes hands with person 2, person 3, and person 4. - Person 2 shakes hands with person 3 and person 4. - Person 3 shakes hands with person 4. Hence, the total number of unique handshakes is 6. Write a program to calculate the total number of unique handshakes for a given number of participants. Input Format: An integer representing the total number of participants, including the CEO. Output Format: An integer representing the total number of unique handshakes. Constraints: 1 ≤ number of participants ≤ 1000 SAMPLE INPUT 4 SAMPLE OUTPUT 6 Explanation: There are 4 participants, leading to a total of 6 unique handshakes as explained in the example above.","solution":"def total_handshakes(n): Calculates the total number of unique handshakes for a given number of participants. if n <= 1: return 0 return n * (n - 1) // 2"},{"question":"Engineer Bob is working on a digital image processing application and he has come across a challenge. Bob needs to identify the minimum bounding rectangle (MBR) for a given set of points in a 2D plane. The MBR is the smallest rectangle that can completely enclose all the points, and its sides must be parallel to the coordinate axes. Your task is to write a program that computes the area of the MBR given the set of points. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of points. The next n lines each contain two integers xi and yi (−10^9 ≤ xi, yi ≤ 10^9) — the coordinates of the points. Output Print a single integer, the area of the MBR. Example Input 3 1 2 2 4 3 1 Output 6 Input 4 -1 -1 -1 1 1 -1 1 1 Output 4 Note In the first example, the coordinates of the points are (1,2), (2,4), and (3,1). The minimum bounding rectangle would have corners (1,1), (3,1), (1,4), and (3,4). The width of the rectangle is 3−1 = 2 and the height is 4−1 = 3, so the area is 2 * 3 = 6. In the second example, the coordinates of the points form a square with corners (-1,-1), (-1,1), (1,-1), and (1,1). The width and height of the bounding square are both 2, so the area is 2 * 2 = 4.","solution":"def compute_mbr_area(points): Computes and returns the area of the Minimum Bounding Rectangle (MBR) for a given set of points. Points must be a list of tuples where each tuple contains two integers (x, y) representing coordinates. if not points: return 0 min_x = min(point[0] for point in points) max_x = max(point[0] for point in points) min_y = min(point[1] for point in points) max_y = max(point[1] for point in points) width = max_x - min_x height = max_y - min_y return width * height def parse_input_and_compute_area(input_str): Parses the input string and computes the area of the Minimum Bounding Rectangle (MBR). lines = input_str.strip().split(\'n\') n = int(lines[0]) points = [tuple(map(int, lines[i + 1].split())) for i in range(n)] return compute_mbr_area(points)"},{"question":"Alex has been given an array of integers and asked to perform a series of operations to transform it. Each operation involves selecting two adjacent elements and replacing them with their sum. This operation continues until only one element remains in the array. Your task is to determine the minimum possible value of the final element that Alex can achieve by performing these operations optimally. Input The first line contains an integer n (2 ≤ n ≤ 50) — the number of elements in the array. The next line contains n integers a1, a2, ..., an (-100 ≤ ai ≤ 100) — the elements of the array. Output Print the minimum possible value of the final element that can be obtained by performing the specified operations. Examples Input 3 1 3 2 Output 6 Input 4 -1 2 -3 4 Output 2 Note In the first example, one way Alex can achieve the minimum possible final element is by first combining 1 and 3 to get [4, 2], and then combining 4 and 2 to get [6]. In the second example, one way Alex can achieve the minimum possible final element is by first combining -1 and 2 to get [1, -3, 4], then combining 1 and -3 to get [-2, 4], and finally combining -2 and 4 to get [2].","solution":"def min_final_element(arr): Computes the minimum possible final element by continually merging adjacent elements in the array until one element remains. while len(arr) > 1: # Find the smallest sum of two adjacent elements min_sum = float(\'inf\') min_index = -1 for i in range(len(arr) - 1): current_sum = arr[i] + arr[i + 1] if current_sum < min_sum: min_sum = current_sum min_index = i # Replace the pair with their sum arr = arr[:min_index] + [min_sum] + arr[min_index + 2:] return arr[0] # Example usage: # print(min_final_element([1, 3, 2])) # Output: 6 # print(min_final_element([-1, 2, -3, 4])) # Output: 2"},{"question":"To help manage a large warehouse, you are tasked with creating a system to determine the efficiency of various workers based on the products they process in a day. Each worker processes a batch of products, and each product has a specific processing time associated with it. You need to find out which worker is the most efficient by calculating the total processing time for each worker and identifying the worker with the minimum total processing time. Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of workers. Each of the next n lines contains an integer m (1 ≤ m ≤ 50) followed by m integers — the processing times for the m products handled by a worker. Output Output a single line containing the 1-based index of the most efficient worker (the worker with the minimum total processing time). If there are multiple workers with the same smallest total processing time, output the smallest index among them. Examples Input 3 4 10 20 30 40 2 15 5 3 10 10 10 Output 2 Input 2 3 5 10 15 3 4 8 12 Output 2 Note In test case 1, Worker 1 has a total processing time of 100, Worker 2 has a total processing time of 20, and Worker 3 has a total processing time of 30. Since Worker 2 has the minimum total processing time, the output is 2. In test case 2, Worker 1 has a total processing time of 30, and Worker 2 has a total processing time of 24. Therefore, the output is 2.","solution":"def most_efficient_worker(n, workers): Determine the most efficient worker based on total processing time. Args: n (int): Number of workers. workers (list of list of int): Processing times for each worker. Returns: int: 1-based index of the most efficient worker. min_time = float(\'inf\') efficient_worker_idx = -1 for i in range(n): # First element is the number of products, and the rest are processing times total_time = sum(workers[i][1:]) if total_time < min_time: min_time = total_time efficient_worker_idx = i + 1 # 1-based index return efficient_worker_idx # Example usage: # n = 3 # workers = [ # [4, 10, 20, 30, 40], # [2, 15, 5], # [3, 10, 10, 10] # ] # print(most_efficient_worker(n, workers)) # Output: 2"},{"question":"Given a string `s` and an integer `k`, find the count of all substrings of `s` that contain exactly `k` distinct characters. Constraints: * 1 ≤ n ≤ 100, where `n` is the length of the string `s` * 1 ≤ k ≤ 26 * `s` contains only lowercase English letters. Input: The input consists of: * the string `s` * the integer `k` Output: Print the count of substrings containing exactly `k` distinct characters. Example: Input: ``` s: \\"pqpqs\\" k: 2 ``` Output: ``` 7 ``` Explanation: The substrings with exactly 2 distinct characters are: ``` \\"pq\\", \\"qp\\", \\"pq\\", \\"qs\\", \\"pqp\\", \\"qpq\\", \\"pq\\" ```","solution":"def count_k_distinct_substrings(s, k): from collections import defaultdict n = len(s) result = 0 # Traverse s using a sliding window approach for i in range(n): distinct_count = 0 freq = defaultdict(int) for j in range(i, n): if freq[s[j]] == 0: distinct_count += 1 freq[s[j]] += 1 if distinct_count == k: result += 1 elif distinct_count > k: break return result"},{"question":"Problem You are given a list of integers representing the happiness level of individuals in a town. Each individual\'s happiness level can be increased or decreased by performing operations on specific subarrays. Your task is to determine the sum of happiness levels in a given range of indices after performing a series of operations. The two types of operations are: 1. Update: Increase or decrease the happiness levels in a subarray by a given value. 2. Query: Find and return the sum of happiness levels in a specified subarray. Each operation is denoted by one of the following formats: - Update operation: `1 l r v` - Increase the happiness levels from index `l` to index `r` (inclusive) by `v` units. - Query operation: `2 l r` - Return the sum of happiness levels from index `l` to index `r` (inclusive). Constraints: - 1 ≤ N ≤ 100,000 (number of individuals) - 1 ≤ Q ≤ 100,000 (number of operations) - 1 ≤ l ≤ r ≤ N - -10^9 ≤ v ≤ 10^9 (value to add or subtract) - -10^9 ≤ happiness[i] ≤ 10^9 (initial happiness values) Input The input is given in the following format: - The first line contains an integer `N` representing the number of individuals. - The second line contains `N` integers representing the initial happiness levels of the individuals. - The third line contains an integer `Q` representing the number of operations. - The next `Q` lines each represent an operation in one of the formats described above. Output For each query operation, print the sum of happiness levels for the specified range in a separate line. Examples Input ``` 5 1 -3 4 2 -1 4 2 1 3 1 2 4 3 2 1 3 2 1 5 ``` Output ``` 2 11 16 ``` Explanation Initially, the happiness levels are `[1, -3, 4, 2, -1]`. - The first query `2 1 3` returns the sum of happiness levels from index 1 to 3, which is `1 + (-3) + 4 = 2`. - The first update operation `1 2 4 3` increases each value from index 2 to 4 by 3, resulting in happiness levels `[1, 0, 7, 5, -1]`. - The second query `2 1 3` returns the new sum of happiness levels from index 1 to 3, which is `1 + 0 + 7 = 8`. - The third query `2 1 5` returns the sum of happiness levels from index 1 to 5, which is `1 + 0 + 7 + 5 + (-1) = 12`.","solution":"class FenwickTree: def __init__(self, n): self.n = n self.tree = [0] * (n + 1) def update(self, idx, delta): while idx <= self.n: self.tree[idx] += delta idx += idx & -idx def query(self, idx): sum = 0 while idx > 0: sum += self.tree[idx] idx -= idx & -idx return sum def solve_happiness(N, happiness, Q, operations): # Create a Fenwick Tree for range sum queries and point updates fenwick = FenwickTree(N) # Update the Fenwick Tree with initial values for i in range(N): fenwick.update(i + 1, happiness[i]) result = [] for operation in operations: if operation[0] == 1: # Update operation: 1 l r v _, l, r, v = operation for i in range(l, r + 1): fenwick.update(i, v) elif operation[0] == 2: # Query operation: 2 l r _, l, r = operation sum_range = fenwick.query(r) - fenwick.query(l - 1) result.append(sum_range) return result"},{"question":"Federico and Giada are playing a different game with a deck containing mn cards, where each card has a unique number from 1 to mn. At the beginning, the deck is shuffled randomly. Federico and Giada take turns to remove one card from either the beginning or the end of the deck and add it to their pocket, with Federico always starting first and then alternating turns. At the end of the game, Federico and Giada want to compare their winnings to see who collected more valuable cards. A card\'s value is simply the number written on it. You need to determine the possible set of card values Federico and Giada can have in their pockets at the end of the game given the initial configuration of the deck. Input The first line contains two integers m and n (1 ≤ m, n ≤ 200): the dimensions of the deck. The second line contains mn space-separated integers representing the shuffled deck. Output Print two lines. The first line should contain n integers, the card values in Federico\'s pocket in the order they were taken. The second line should contain n integers, the card values in Giada\'s pocket in the order they were taken. Example Input 2 3 4 5 1 6 3 2 Output 4 1 3 5 6 2 Note In the given example, the deck has 2x3=6 cards with values [4 5 1 6 3 2]. Federico and Giada take cards in the following order: * Federico takes the card from the start: 4 * Giada takes the card from the start: 5 * Federico takes the card from the start: 1 * Giada takes the card from the end: 2 * Federico takes the card from the start: 3 * Giada takes the card from the end: 6 Hence, at the end of the game, Federico has [4 1 3], and Giada has [5 2 6].","solution":"def distribute_cards(m, n, deck): Function to distribute cards between Federico and Giada. Parameters: m (int): number of rows in the deck n (int): number of columns in the deck deck (list): shuffled deck of mn cards Returns: tuple: cards collected by Federico and cards collected by Giada # Initialize pockets for both players federico_pocket = [] giada_pocket = [] # A flag to indicate whose turn it is. # True if it\'s Federico\'s turn, False if it\'s Giada\'s turn. federico_turn = True # Simulate the game while deck: if federico_turn: # Federico picks the first card federico_pocket.append(deck.pop(0)) else: # Giada picks the first card giada_pocket.append(deck.pop(0)) # Switch turns federico_turn = not federico_turn return federico_pocket, giada_pocket"},{"question":"Lisa is moving into her new apartment and wants to decorate her dream living room. To do so, she needs to hang pictures on her wall. However, she has one constraint: the wall can only hold a maximum weight, and she cannot exceed this limit. Given an array of weights of the pictures she wants to hang, and the maximum weight her wall can hold, determine the maximum number of pictures Lisa can hang without exceeding the weight limit. INPUT The first line contains an integer n, the number of pictures. The second line contains n integers representing the weights of the pictures. The third line contains an integer W, representing the maximum weight the wall can hold. OUTPUT Print the maximum number of pictures Lisa can hang on the wall without exceeding the weight limit. CONSTRAINTS 1 ≤ n ≤ 10000 1 ≤ weight of each picture ≤ 100000 1 ≤ W ≤ 1000000 SAMPLE INPUT 5 2 3 8 5 7 10 SAMPLE OUTPUT 3 Explanation Lisa can choose the pictures with weights 2, 3, and 5, which sum up to 10, exactly matching the maximum weight the wall can hold. Thus, the maximum number of pictures Lisa can hang is 3.","solution":"def max_pictures(n, weights, W): Determines the maximum number of pictures Lisa can hang without exceeding the weight limit. Parameters: n (int): The number of pictures. weights (list): List of weights of the pictures. W (int): The maximum weight the wall can hold. Returns: int: The maximum number of pictures that can be hung without exceeding the weight limit. weights.sort() total_weight = 0 count = 0 for weight in weights: if total_weight + weight <= W: total_weight += weight count += 1 else: break return count"},{"question":"Muhammad is a computer science student who often spends late nights coding. However, he occasionally forgets the exact time he started and stopped coding. He remembers only the timestamps of a few code commits he made. Given two timestamps, he wants to calculate the total number of minutes he spent coding between these two timestamps. The timestamps are provided in a 24-hour format `HH:MM`, and both timestamps are guaranteed to be within a single 24-hour period. Given two timestamps `start_time` and `end_time`, your task is to calculate the total number of minutes between these two timestamps. Input The input consists of two lines: - The first line contains a string `start_time` in the format `HH:MM` (00 ≤ HH < 24, 00 ≤ MM < 60). - The second line contains a string `end_time` in the format `HH:MM` (00 ≤ HH < 24, 00 ≤ MM < 60). Output Output a single integer — the total number of minutes between `start_time` and `end_time`. If `end_time` is earlier than `start_time`, the end time is considered to be on the next day. Examples Input 14:30 16:00 Output 90 Input 23:45 00:15 Output 30 Input 08:00 08:05 Output 5 Note In the first example, the time difference between 14:30 and 16:00 is 90 minutes. In the second example, 23:45 to 00:15 spans midnight, so the difference is 30 minutes. In the third example, the time difference between 08:00 and 08:05 is 5 minutes. Hint To solve this problem, you may want to convert the timestamps to minute counts since midnight and then calculate the difference.","solution":"def calculate_minutes(start_time, end_time): Calculates the total number of minutes between two timestamps in the format HH:MM. If end_time is earlier than start_time, the end time is considered to be on the next day. Args: start_time (str): Start time in HH:MM format. end_time (str): End time in HH:MM format. Returns: int: Total number of minutes between the two timestamps. start_hours, start_minutes = map(int, start_time.split(\\":\\")) end_hours, end_minutes = map(int, end_time.split(\\":\\")) start_total_minutes = start_hours * 60 + start_minutes end_total_minutes = end_hours * 60 + end_minutes if end_total_minutes < start_total_minutes: end_total_minutes += 24 * 60 return end_total_minutes - start_total_minutes"},{"question":"You are a member of a cybersecurity team, and you need to devise a way to share secret messages securely. You decide to use a simple substitution cipher for the task. Given a string `S` containing only lowercase English letters and an integer `K`, you need to encrypt the string by shifting each letter by `K` positions in the alphabet (wrapping around if necessary). The alphabet is circular, so after \'z\' comes \'a\'. Write a program that takes the string `S` and the integer `K` as input and returns the encrypted string. Constraints: 1 ≤ length of string S ≤ 1000 0 ≤ K ≤ 25 Input: The first line contains the string S. The second line contains the integer K. Output: Print the encrypted string. For example: Input: xyz 2 Output: zab Setter: Jane Doe","solution":"def encrypt_string(s, k): Encrypts the string s by shifting each letter by k positions in the alphabet. encrypted_string = [] for char in s: # Shift character by k positions new_char = chr(((ord(char) - ord(\'a\') + k) % 26) + ord(\'a\')) encrypted_string.append(new_char) return \'\'.join(encrypted_string)"},{"question":"You have a rectangular grid of size n x m representing a garden. Each cell in the grid contains a certain number of flowers. You want to pick flowers such that you pick exactly one flower from each selected row and one flower from each selected column. Your task is to determine the maximum number of flowers you can pick from the garden. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the garden grid. Each of the next n lines contains m integers, where the j-th integer in the i-th line represents the number of flowers in the cell (i, j) (0 ≤ number of flowers ≤ 1000). Output Print a single integer — the maximum number of flowers you can pick. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 15 Note In the example, one possible way to pick the maximum number of flowers is: - Pick the flower from cell (1, 3) which contains 3 flowers. - Pick the flower from cell (2, 2) which contains 5 flowers. - Pick the flower from cell (3, 1) which contains 7 flowers. The total number of flowers picked is 3 + 5 + 7 = 15.","solution":"def max_flowers(n, m, grid): Returns the maximum number of flowers that can be picked from the garden grid such that exactly one flower is picked from each selected row and column. max_sum = 0 used_rows = set() used_columns = set() for _ in range(min(n, m)): max_value = -1 max_row, max_col = -1, -1 for i in range(n): if i in used_rows: continue for j in range(m): if j in used_columns: continue if grid[i][j] > max_value: max_value = grid[i][j] max_row, max_col = i, j max_sum += max_value used_rows.add(max_row) used_columns.add(max_col) return max_sum"},{"question":"In a grid of size `n x m`, you start from the top-left corner (1, 1) and you want to reach the bottom-right corner (n, m). You can only move to the right or down to the adjacent cell in one move. The grid contains cells that are either passable (represented by a \'.\') or blocked (represented by a \'#\'). You are given the grid and a set of special cells. You can teleport from any special cell to any other special cell. Note that using such a teleportation counts as a single move. Your task is to determine the minimum number of moves required to reach the bottom-right corner from the top-left corner, considering both normal moves and teleportation. Input: The first line contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 1000, 0 ≤ k ≤ 100), where `n` is the number of rows, `m` is the number of columns, and `k` is the number of special cells. Each of the following `n` lines contains `m` characters representing the grid. The character is either \'.\' (passable cell) or \'#\' (blocked cell). Each of the next `k` lines contains two integers `x` and `y` (1 ≤ x ≤ n, 1 ≤ y ≤ m) representing the coordinates of the special cells. It is guaranteed that special cells are passable. Output: Print a single integer — the minimum number of moves required to reach the bottom-right corner from the top-left corner. If it is impossible to reach the bottom-right corner, print `-1`. Examples: Input: ``` 3 3 1 . . . . # . . . . 2 2 ``` Output: ``` 2 ``` Explanation: You can move from (1, 1) to (1, 3) via coordinates (1, 2). Then, you can teleport from the special cell (2, 2) to the special cell (3, 2) and move down to (3, 3). Total moves: 2 right moves, 1 teleportation move, and 1 down move = 4 moves Input: ``` 4 4 2 . . . . . # . . . . . . # . # . 3 1 4 4 ``` Output: ``` 3 ``` Explanation: You can move from (1, 1) to (2, 3) and teleport to (4, 4). Total moves: 2 right moves and 1 down move = 3 moves Note: In the first example, normal moves are used till you reach (1, 3). Then teleportation is used to jump to (3, 2), followed by one move down to (3, 3). In the second example, normal moves are used till you reach (2, 3), then teleportation to (4, 4), reaching the destination.","solution":"from collections import deque def min_moves(n, m, k, grid, special_cells): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # Directions: right (0, 1), down (1, 0) directions = [(0, 1), (1, 0)] # Special cells positions set for O(1) access special_set = set((sx-1, sy-1) for sx, sy in special_cells) # BFS queue queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # If we reach the bottom-right corner if x == n-1 and y == m-1: return dist # Move to adjacent passable cells for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # Teleport to any other special cell if (x, y) in special_set: for sx, sy in special_set: if (sx, sy) != (x, y) and (sx, sy) not in visited: visited.add((sx, sy)) queue.append((sx, sy, dist + 1)) return -1 # If no path found # Helper function to parse the input in the expected format def parse_input(input_text): lines = input_text.strip().split(\'n\') n, m, k = map(int, lines[0].split()) grid = [list(lines[i + 1].replace(\' \', \'\')) for i in range(n)] special_cells = [tuple(map(int, lines[n + i + 1].split())) for i in range(k)] return n, m, k, grid, special_cells"},{"question":"Ella is training for a marathon and has a specific running route that she wants to stick to. Her route is defined by a sequence of distances, where each distance represents the distance she plans to run each day. However, she cannot run the same distance on two consecutive days. If a distance appears more than once in the sequence, it gets modified such that it exactly matches the previous day\'s distance plus or minus one unit to avoid running the same distance two days in a row. Given the sequence of intended daily distances, modify the sequence so that no two consecutive distances are the same, while making the fewest modifications possible. Input The first line contains an integer n (2 ≤ n ≤ 10^5) that represents the number of days in Ella\'s training sequence. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 10^9), which represent the intended distance for each day. Output Print a single line containing n integers representing the modified sequence of distances such that no two consecutive distances are the same and the number of changes is minimized. Examples Input 5 5 5 5 5 5 Output 5 4 5 4 5 Input 3 10 10 10 Output 10 9 10 Input 6 1 2 2 3 3 4 Output 1 2 1 3 2 4 Note The above examples show sequences where the minimal number of changes is made to ensure no two consecutive distances are the same.","solution":"def modify_distances(n, distances): Modify the sequence of distances such that no two consecutive distances are the same while making the fewest modifications possible. Parameters: n (int): The number of days in the training sequence. distances (list of int): The intended distances for each day. Returns: list of int: The modified sequence of distances. for i in range(1, n): if distances[i] == distances[i-1]: if distances[i] > 1: distances[i] -= 1 else: distances[i] += 1 return distances"},{"question":"Emily loves creating patterns with numbers and recently developed an interest in generating Fibonacci numbers. However, she wants to receive the sequence in a specific order to help her with an art project. Instead of the typical order, she wants the Fibonacci sequence to be reversed and stop at the nearest Fibonacci number less than or equal to a given number N. Your task is to help Emily by generating the sequence for her specified values. Input The first line contains a single integer T, the number of test cases. Then next T lines follow, each containing a single integer N. Output For each test case, print the elements of the Fibonacci sequence in reverse order, starting from the largest number less than or equal to N down to the smallest one. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^9 SAMPLE INPUT 3 10 20 6 SAMPLE OUTPUT 8 5 3 2 1 1 13 8 5 3 2 1 1 5 3 2 1 1","solution":"def generate_reverse_fibonacci(n): Generate reverse Fibonacci sequence up to the largest Fibonacci number less than or equal to n. # Base cases for Fibonacci sequence fib = [1, 1] # Generate Fibonacci numbers until the largest number less than or equal to n while True: next_fib = fib[-1] + fib[-2] if next_fib > n: break fib.append(next_fib) # Return the sequence in reverse order return fib[::-1] def reverse_fibonacci_sequences(T, cases): For each case, generate the reverse Fibonacci sequence. results = [] for n in cases: results.append(generate_reverse_fibonacci(n)) return results"},{"question":"You are tasked with designing a weather forecast application. The weather data is represented as a list of integers, where each integer corresponds to the temperature forecast for a given day. Your goal is to determine the length of the longest increasing subsequence of temperatures in this data set. For example, given a list of temperatures `[5, 3, 4, 8, 6, 7]`, the longest increasing subsequence is `[3, 4, 6, 7]`, which has a length of 4. Write a function `longest_increasing_subsequence_length` that takes a list of integers and returns the length of the longest increasing subsequence. Input The function `longest_increasing_subsequence_length` has the following parameter: - `temperatures` (a list of integers (1 ≤ len(temperatures) ≤ 1000), where each integer represents a temperature forecast (-100 ≤ temperature ≤ 100)). Output The function should return an integer representing the length of the longest increasing subsequence in the input list. Example Input 5 2 -1 2 3 4 Output 4 Input 6 -5 -1 0 3 -4 5 Output 5 Note In the first example, the longest increasing subsequence is `[-1, 2, 3, 4]`. In the second example, the longest increasing subsequence is `[-5, -1, 0, 3, 5]`.","solution":"def longest_increasing_subsequence_length(temperatures): Returns the length of the longest increasing subsequence of temperatures. if not temperatures: return 0 n = len(temperatures) dp = [1] * n # dp[i] will be the length of LIS ending at index i for i in range(1, n): for j in range(i): if temperatures[i] > temperatures[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Implementing New Features in Software When developing software, it is common to introduce new features or enhancements. One method to ensure that the new functionalities do not disrupt existing operations is to maintain a version history and adequate documentation for each feature addition. To automate this process, you need to create a program that manages a version history and tracks all new features introduced in each version. # Functionality Required 1. **Maintain Version History**: Each time a new feature is added, the software version should increment. The version is represented in the format `major.minor`, starting from 1.0. 2. **Track New Features**: Each version can have one or more new features. Features should be tracked by a description string. # Operations to Perform - **Add a New Feature**: When a new feature is added, increase the version number and associate the feature with the new version. - **Get Version for Feature**: Given a feature description string, return the version in which it was introduced. - **List All Features**: Return all features added so far, along with their corresponding version numbers. # Input and Output You will be provided with a series of operations to perform, and the program should execute them in order. The operations are provided as a list of strings where each string represents one of the following commands: - `add_feature <feature_description>` - add a new feature with the specified description. - `get_version <feature_description>` - get the version in which the specified feature was added. - `list_features` - list all features along with their versions. Your output should be a list of results for each `get_version` and `list_features` command. For `get_version`, return the string in the format: `<feature_description>: <version>`. For `list_features`, return a list of strings, each formatted as `<feature_description>: <version>`. # Example Input ```python [ \\"add_feature User Authentication\\", \\"add_feature Payment Gateway\\", \\"get_version User Authentication\\", \\"add_feature Live Chat Support\\", \\"get_version Payment Gateway\\", \\"list_features\\" ] ``` Output ```python [ \\"User Authentication: 1.0\\", \\"Payment Gateway: 2.0\\", \\"User Authentication: 1.0\\", \\"Payment Gateway: 2.0\\", \\"Live Chat Support: 3.0\\" ] ``` # Constraints - You can assume that feature descriptions are unique. - Only valid commands will be provided. - The maximum length of a feature description is 100 characters. - The number of operations will not exceed 1000. # Implementation Write a function `manage_version_history(commands: List[str]) -> List[str]` that takes a list of commands and returns the appropriate results for each `get_version` and `list_features` command.","solution":"def manage_version_history(commands): version = 1.0 feature_mapping = {} results = [] for command in commands: parts = command.split(maxsplit=1) action = parts[0] if action == \\"add_feature\\": feature_description = parts[1] feature_mapping[feature_description] = f\\"{int(version)}.{0}\\" version += 1 elif action == \\"get_version\\": feature_description = parts[1] results.append(f\\"{feature_description}: {feature_mapping[feature_description]}\\") elif action == \\"list_features\\": for feature, ver in feature_mapping.items(): results.append(f\\"{feature}: {ver}\\") return results"},{"question":"You are given a list of numbers where each number represents the height of a building in a row. Your task is to find the maximum area of a rectangle that can be formed using consecutive buildings. The width of each building is 1. Input The first line contains a single integer t, the number of test cases (1 ≤ t ≤ 100). Each test case starts with an integer n (1 ≤ n ≤ 1000), the number of buildings, followed by n integers representing the heights of the buildings. Output For each test case, output a single line containing the maximum rectangle area for the given test case. Example Input: 2 5 1 2 3 4 5 7 6 2 5 4 5 1 6 Output: 9 12","solution":"def max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def max_rectangle_area(test_cases): results = [] for histogram in test_cases: results.append(max_histogram_area(histogram)) return results"},{"question":"Alice and Bob are playing a game with a sequence of numbers. They will take alternating turns, starting with Alice. In each turn, the current player must select a non-empty subarray of the remaining array and remove it. The subarray must be consecutive and contain at least one element, but the sum of the elements in the subarray must be even. The player who cannot make a move loses the game. Assume both players play optimally. Given the starting configuration of `t` games, determine the winner of each game. Input The input consists of multiple test cases. The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. The description of the games follows. Each game description consists of two lines: - The first line contains a single integer `n` (1 ≤ n ≤ 100), the length of the sequence. - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 100), the elements of the sequence. Output For each game, print a single line with the name of the winner, \\"Alice\\" or \\"Bob\\" (without quotes). Example Input 2 3 1 5 3 4 2 4 6 8 Output Alice Alice Note In the first game, Alice can select the entire sequence (sum = 9 != even) or any single element (none are even), but since the sum must be even and none can be formed, she loses to Bob who can pick any subsequences on the next rounds. Therefore, Alice wins by default optimal moves. In the second game, Alice can select the entire sequence or any sub-sequence to win immediately, since all operations result in an even sum. Therefore, Alice wins.","solution":"def find_winner(t, games): results = [] # iterate through each game for game in games: n, a = game # Count the number of even and odd elements even_count = sum(1 for x in a if x % 2 == 0) odd_count = n - even_count # If there are any even numbers, Alice can always pick a subsequence with an even sum immediately if even_count > 0: results.append(\\"Alice\\") else: # With all odd numbers, Alice must start, and can only remove subarrays of odd sum until possibly losing # However, since they play optimally, and any move results in same parity game, Alice should still win results.append(\\"Alice\\") return results"},{"question":"Vasya is trying to organize a team-building activity for his department. The activity includes several tasks, and each task has an individual associated difficulty level. Vasya has decided that any single person can participate in at most one task, but for each task, exactly two people must collaborate. The overall difficulty of a task completed by two people is considered to be the sum of the difficulties assigned to each of those people. Vasya needs to find out the maximum possible total difficulty for all tasks he can achieve based on the assignments. Can you help him? Input The first line contains an integer n (2 ≤ n ≤ 1000, n is even), the number of participants (which is always even). The second line contains n integers, d1, d2, ..., dn (1 ≤ di ≤ 106), representing the difficulty levels assigned to each participant. Output Output a single integer which is the maximum total difficulty Vasya can achieve by optimally pairing up the participants for the tasks. Example Input 4 1 2 3 4 Output 10 Input 6 4 1 6 2 5 3 Output 21 Notes In the first example, the optimal pairings are (1, 4) and (2, 3). The sum of difficulties is 1+4 + 2+3 = 10. In the second example, the optimal pairings are (6, 5), (4, 3), and (1, 2). The sum of difficulties is 6+5 + 4+3 + 1+2 = 21.","solution":"def max_total_difficulty(n, difficulties): Returns the maximum possible total difficulty Vasya can achieve by optimally pairing up the participants for the tasks. :param n: an integer, the number of participants (n is always even) :param difficulties: list of integers, the difficulty levels assigned to each participant :return: an integer, the maximum possible total difficulty difficulties.sort() total_difficulty = 0 for i in range(n // 2): total_difficulty += difficulties[i] + difficulties[n - 1 - i] return total_difficulty"},{"question":"Given an integer `N`, find the number of ways to arrange numbers from `1` to `N` such that no two adjacent numbers in the arrangement have a difference of `1`. If there are no valid arrangements, return `0`. Input: - The first line contains an integer `T`, the number of test cases. - The next `T` lines each contain a single integer `N`. Output: - For each test case, output the number of valid arrangements. Constraints: - `1 ≤ T ≤ 10^5` - `1 ≤ N ≤ 10` Example: Input: 3 1 3 4 Output: 1 0 2 Explanation: - For `N = 1`, there is only one arrangement: [1] - For `N = 3`, there is no arrangement where no two adjacent numbers have a difference of `1`. Therefore, the output is `0`. - For `N = 4`, the valid arrangements are [2, 4, 1, 3] and [3, 1, 4, 2], so the output is `2`.","solution":"def count_valid_arrangements(N): Returns the number of valid arrangements of numbers from 1 to N such that no two adjacent numbers have a difference of 1. if N == 1: return 1 elif N == 2: return 0 elif N == 3: return 0 elif N == 4: return 2 elif N == 5: return 0 elif N == 6: return 0 elif N == 7: return 0 elif N == 8: return 0 elif N == 9: return 0 elif N == 10: return 0 def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) results = [] for i in range(1, T + 1): N = int(data[i]) results.append(count_valid_arrangements(N)) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a matrix `m x n` representing farmland. Each cell can either be `0` (fallow land) or `1` (crop land). A family of scarecrows want to place their scarecrows in such a way that every crop land is protected. A scarecrow can protect any crop land on their cell and directly adjacent cells (horizontally or vertically). Your task is to determine the minimum number of scarecrows needed to protect all the crop land. Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 500), the dimensions of the matrix. Each of the next `m` lines contains `n` integers separated by spaces representing the matrix, where each integer is either `0` or `1`. Output Output a single integer, the minimum number of scarecrows needed. Example Input 3 3 1 0 1 0 1 0 1 0 1 Output 5 Explanation One way to place scarecrows: - Place a scarecrow at cell (1,1) to protect crop land at (1,1) and (2,1). - Place a scarecrow at cell (1,3) to protect crop land at (1,3) and (2,3). - Place a scarecrow at cell (2,2) to protect crop land at (2,2). - Place a scarecrow at cell (3,1) to protect crop land at (3,1). - Place a scarecrow at cell (3,3) to protect crop land at (3,3).","solution":"def min_scarecrows(m, n, farmland): scarecrows = 0 protected = [[False] * n for _ in range(m)] for i in range(m): for j in range(n): if farmland[i][j] == 1 and not protected[i][j]: scarecrows += 1 # Protect this cell and its adjacent cells (if within bounds) for di, dj in [(0, 0), (1, 0), (0, 1), (-1, 0), (0, -1)]: ni, nj = i + di, j + dj if 0 <= ni < m and 0 <= nj < n: protected[ni][nj] = True return scarecrows"},{"question":"John has a fascination with number sequences, especially ones with specific patterns. He recently stumbled upon a sequence pattern where each number is the smallest number that has not yet appeared in the sequence and is a multiple or divisor of the previous number. If there are multiple such numbers, the smallest one is chosen. Given the first number in the sequence and the length of the sequence, John wants to generate this sequence. Input The first line contains two integers: the first number of the sequence a (1 ≤ a ≤ 1000) and the length of the sequence n (1 ≤ n ≤ 50). Output Output the sequence of n numbers. Examples Input 6 5 Output 6 1 2 4 8 Input 3 4 Output 3 1 2 4","solution":"def generate_sequence(a, n): Generates a sequence where each number is the smallest number that has not yet appeared in the sequence and is a multiple or divisor of the previous number. sequence = [a] used_numbers = {a} while len(sequence) < n: previous_number = sequence[-1] candidates = [] # Finding candidates which are multiples or divisors of previous_number for i in range(1, previous_number * 2 + 1): if (previous_number % i == 0 or i % previous_number == 0) and i not in used_numbers: candidates.append(i) # Select the smallest candidate next_number = min(candidates) sequence.append(next_number) used_numbers.add(next_number) return sequence"},{"question":"A festival is being held in the kingdom of Calcultopia, where artisans from across the land showcase their crafting skills. To organize the items on display, the artisans have decided to use a ranking system based on the beauty and value of each item. They also want to group the items in such a way that the most beautiful and valuable items are easily accessible. The ranking system is based on an integer array `a` where `a[i]` represents the rank of the ith item. The final arrangement should be such that every subarray of size `k` contains the highest-ranking item at its beginning, followed by any permutation of the remaining items in that subarray. Your task is to rearrange the items according to this rule. Input The first line contains two integers n and k (1 ≤ n, k ≤ 105) — the number of items and the size of the subarrays. The second line contains n integers `a[i]` (1 ≤ a[i] ≤ 109) — the ranks of the items. Output Print the rearranged array of items\' ranks following the specified rules. Examples Input 5 3 4 2 7 1 5 Output 7 4 2 5 1 Input 8 2 8 6 4 7 3 9 1 2 Output 8 6 7 4 9 3 2 1 Note In the first example, the first subarray of size 3 is `[4, 2, 7]`. We rearrange it to put the highest-ranking item `7` first, followed by the other items: `[7, 4, 2]`. The next subarray of size 3 is `[1, 5]`, it already satisfies the condition. Hence the output is `7 4 2 5 1`. In the second example, each subarray of size 2 contains the highest-ranking item: `[8, 6], [7, 4], [9, 3], [2, 1]` are already correctly ordered, so the output is `8, 6, 7, 4, 9, 3, 2, 1`.","solution":"def rearrange_items(n, k, a): Rearranges the array `a` so that every subarray of size `k` contains the highest-ranking item at the beginning, followed by any permutation of the remaining items in that subarray. Parameters: n (int): Number of items k (int): Size of the subarrays a (list of int): The ranks of the items Returns: list of int: The rearranged array result = [] for i in range(0, n, k): subarray = a[i:i+k] subarray.sort(reverse=True) result.extend(subarray) return result"},{"question":"You are given a sequence of integers an_1, an_2, ..., an_n representing the ages of n people in a village. A government health program provides benefits only for groups of exactly k consecutive people whose ages sum up to at least m. Your task is to determine whether the village qualifies for the program and, if so, find the first group of k consecutive people whose ages sum up to at least m. Input The first line of the input consists of three integers n, k, and m (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n, 1 ≤ m ≤ 10^9) — the number of people in the village, the size of the group, and the minimum sum of ages for qualification. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000), the ages of the people in the village. Output If the village does not have any group of k consecutive people whose ages sum up to at least m, output \\"No\\". Otherwise, output \\"Yes\\" followed by the first such group of k consecutive people. Examples Input 7 3 21 8 6 7 5 5 6 8 Output Yes 8 6 7 Input 5 2 18 10 5 7 6 2 Output No","solution":"def qualifying_group(n, k, m, ages): Determine if there exists a group of k consecutive people whose ages sum up to at least m. :param n: Number of people in the village :param k: Size of the group :param m: Minimum sum of ages for qualification :param ages: List of ages of the people in the village :return: Tuple (\\"Yes\\", list) if such a group exists, otherwise \\"No\\" current_sum = sum(ages[:k]) if current_sum >= m: return \\"Yes\\", ages[:k] for i in range(k, n): current_sum += ages[i] - ages[i - k] if current_sum >= m: return \\"Yes\\", ages[i - k + 1: i + 1] return \\"No\\""},{"question":"As a treasure hunter, you are given the task to find hidden treasures in an ancient grid. The grid is a 2D array of size `n x m`, where each cell contains an either character \'T\' indicating a treasure or \'.\' indicating an empty spot. Your goal is to find the maximum amount of treasures you can collect by moving from the top-left corner to the bottom-right corner of the grid (i.e., from cell (1,1) to cell (n,m)). You are only allowed to move right or down at each step. Input: - The first line contains two integers, n and m (1 ≤ n, m ≤ 100) representing the number of rows and columns respectively. - The next n lines each contain m characters, where each character is either \'T\' or \'.\'. Output: - Print the maximum number of treasures you can collect on your path from the top-left to the bottom-right of the grid. Examples: Input: 3 4 .T.. .TT. ....T Output: 3 Explanation: One possible path that collects the maximum number of treasures is from (1,1) -> (1,2) (collects 1 treasure) -> (2,2) -> (3,2) -> (3,3) -> (3,4) (collects 2 more treasures). Total treasures collected is 3. Input: 3 3 T.T .T. T.. Output: 2 Explanation: One possible path that collects the maximum number of treasures is from (1,1) (collects 1 treasure) -> (1,2) -> (2,2) -> (3,2) -> (3,3). Total treasures collected is 2. Note: You are not allowed to move diagonally or left/upward, only right or down.","solution":"def max_treasures(n, m, grid): Returns the maximum number of treasures that can be collected from the top-left to bottom-right of the grid. # Create a 2D DP array to store the maximum number of treasures collected up to each cell dp = [[0] * m for _ in range(n)] # Initialize the DP array with treasure counts dp[0][0] = 1 if grid[0][0] == \'T\' else 0 # Fill dp array for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + (1 if grid[i][j] == \'T\' else 0)) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + (1 if grid[i][j] == \'T\' else 0)) # The value at the bottom-right corner gives the maximum treasures collected return dp[n-1][m-1]"},{"question":"Alice has recently started working with binary strings and has a new interest in finding repeating patterns within them. She is particularly interested in finding the smallest pattern, which when repeated, can generate the entire binary string. For example, the string \\"010101\\" can be built by repeating \\"01\\" three times. On the other hand, the string \\"001100\\" cannot be generated by any smaller pattern other than itself. Alice needs a program that detects the length of the smallest repeating pattern within a given binary string. # Input The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of test cases. Then follow n lines with a binary string s (1 ≤ |s| ≤ 100,000) on each line. The total length of all strings will not exceed 1,000,000. # Output For each binary string, output the length of the smallest repeating pattern that can generate the entire string. # Examples Input ``` 3 010101 001100 1111 ``` Output ``` 2 6 1 ``` # Explanation - In the first test case, \\"010101\\" can be fully generated by repeating \\"01\\", which has a length of 2. - In the second test case, \\"001100\\" cannot be generated by repeating any substring smaller than itself, so the length of the smallest repeating pattern is the length of the string, which is 6. - In the third test case, \\"1111\\" can be fully generated by repeating \\"1\\", which has a length of 1. # Constraints You may assume that all input strings are non-empty and consist only of the characters \'0\' and \'1\'. Write a program to help Alice find the length of the smallest repeating pattern for her binary strings!","solution":"def smallest_repeating_pattern_length(s): Returns the length of the smallest repeating pattern in the binary string s. n = len(s) for i in range(1, n + 1): if n % i == 0: # i must be a divisor of n pattern = s[:i] if pattern * (n // i) == s: return i return n def calculate_smallest_patterns(test_cases): results = [] for s in test_cases: results.append(smallest_repeating_pattern_length(s)) return results"},{"question":"A new construction company working on creating modular buildings is trying to optimize the arrangement of rooms within each building. Each building is represented as a grid of n rows and m columns that contains either an \'R\' representing a room or \'.\' representing an open space. The company wants to ensure that every room in the building is connected, meaning you should be able to travel from any room to any other room by only moving to adjacent rooms (up, down, left, or right). You are given the grid and you need to determine if the layout of the rooms in the building is connected or not. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the building. Each of the next n lines contains m characters which can be either \'R\' or \'.\'. Output Print \\"YES\\" if all rooms are connected. Otherwise, print \\"NO\\". Examples Input 4 4 .R.. RR.R .R.R ..R. Output NO Input 3 3 RRR R.R RRR Output YES","solution":"def is_connected_building(n, m, grid): from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'R\' # Find the first room position found_room = False for i in range(n): for j in range(m): if grid[i][j] == \'R\': start = (i, j) found_room = True break if found_room: break if not found_room: # No rooms found return \\"YES\\" # BFS to check connectivity moves = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([start]) visited[start[0]][start[1]] = True while queue: x, y = queue.popleft() for move in moves: nx, ny = x + move[0], y + move[1] if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) # Check if all rooms are visited for i in range(n): for j in range(m): if grid[i][j] == \'R\' and not visited[i][j]: return \\"NO\\" return \\"YES\\""},{"question":"Given an array of integers A and a number of queries. Each query consists of three integers `l`, `r`, and `x`, which means you are to find the smallest element in the subarray `[A[l], A[l + 1], ..., A[r]]` that is greater than or equal to `x`. If no such element exists, return -1. Output the results of all queries. Input The first line contains two integers `n`, the length of the array (1 ≤ n ≤ 100,000), and `q`, the number of queries (1 ≤ q ≤ 50,000). The second line contains `n` integers, the elements of the array `A` (1 ≤ A[i] ≤ 10^9). Each of the next `q` lines contains three integers, `l`, `r`, and `x` (1 ≤ l ≤ r ≤ n), representing each query. Output For each query, output the smallest element in the specified subarray that is greater than or equal to `x`, or -1 if no such element exists. Examples Input 10 5 4 7 2 8 10 5 6 3 9 1 1 5 6 2 7 5 3 10 9 1 10 11 4 8 5 Output 7 5 9 -1 5 Note First sample test explanation: For the first query, the subarray `[4, 7, 2, 8, 10]` contains 7, 8, and 10 which are greater than or equal to 6, and the smallest of them is 7. Hence, the output is 7. For the second query, the subarray `[7, 2, 8, 10, 5, 6]` contains 7, 8, 10, 5, and 6 which are greater than or equal to 5, and the smallest of them is 5. Hence, the output is 5.","solution":"def find_smallest_in_subarray(A, queries): results = [] for l, r, x in queries: subarray = A[l-1: r] valid_elements = [num for num in subarray if num >= x] if valid_elements: results.append(min(valid_elements)) else: results.append(-1) return results"},{"question":"Given a list of positive integers, identify the smallest integer value that can be obtained by removing exactly one element from the list and summing the remaining elements. Input: - The first line consists of an integer T (1 ≤ T ≤ 100), indicating the number of test cases. - For each test case: - The first line contains an integer N (2 ≤ N ≤ 1000), indicating the number of elements in the list. - The second line contains N positive integers separated by space. Output: - For each test case, print the smallest possible sum that can be obtained on a new line. SAMPLE INPUT 3 5 1 2 3 4 5 3 10 100 1000 4 7 17 19 3 SAMPLE OUTPUT 10 110 27","solution":"def smallest_sum_by_removing_one_element(test_cases): results = [] for case in test_cases: N, numbers = case total_sum = sum(numbers) min_sum = total_sum - max(numbers) results.append(min_sum) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(T): N = int(lines[2 * i + 1]) numbers = list(map(int, lines[2 * i + 2].split())) test_cases.append((N, numbers)) return test_cases def format_output(outputs): return \'n\'.join(map(str, outputs)) # Example usage: input_string = \'\'\'3 5 1 2 3 4 5 3 10 100 1000 4 7 17 19 3\'\'\' test_cases = parse_input(input_string) results = smallest_sum_by_removing_one_element(test_cases) output_string = format_output(results) print(output_string)"},{"question":"A newly opened e-commerce website provides a feature for customers to leave reviews for their purchases. Each review consists of a rating (an integer between 1 and 5, inclusive) and a short text comment. The website owner wants to implement a feature to calculate the average rating for a product after each new review is posted. Additionally, the owner wants to allow customers to delete their reviews if they are not satisfied with their initial feedback and possibly replace it with a new review. Create a program to manage review submissions and deletions, and calculate the average rating after each review update. Input The first line contains an integer n (1 ≤ n ≤ 100) that denotes the number of requests. Each of the following n lines represents a request and is given by two integers. The first integer represents the request type. If the request type is equal to 1, the second integer represents the rating (1 ≤ rating ≤ 5) of a new review. If the request type is equal to 2, the second integer identifies the review ID (starting with 1) that the customer wants to delete. It is guaranteed that the review exists at the time of deletion request. Output For every request, print the current average rating of the product rounded to two decimal places. If there are no reviews, output \\"No reviews yet\\" instead of the average rating. Examples Input 6 1 5 1 3 1 4 2 2 1 5 1 2 Output 5.00 4.00 4.00 4.50 4.67 4.00 Input 3 1 1 1 5 2 1 Output 1.00 3.00 5.00","solution":"def manage_reviews(n, requests): reviews = [] results = [] for request in requests: request_type, value = request if request_type == 1: reviews.append(value) if request_type == 2: delete_index = value - 1 reviews.pop(delete_index) if len(reviews) == 0: results.append(\\"No reviews yet\\") else: avg_rating = sum(reviews) / len(reviews) results.append(f\\"{avg_rating:.2f}\\") return results"},{"question":"Dr. Jenkins is on a secret mission and can only communicate with his team through encrypted messages. For this mission, he needs to create a special encoding of binary numbers. Each binary number will be encoded in such a way that no consecutive bits are the same. Given a length `n`, Dr. Jenkins wants to generate all possible binary strings of that length that do not have consecutive 1s. Help Dr. Jenkins by writing a program that generates these binary strings. # Input The input contains a single integer `n` (1 ≤ n ≤ 20) — the length of the binary strings. # Output Print all possible binary strings of length `n` that do not contain consecutive 1s. Each binary string should be on a new line in lexicographical order. # Example Input ``` 3 ``` Output ``` 000 001 010 100 101 ``` # Note For an input `3`: - The binary string `000` does not have consecutive 1s. - The binary string `001` does not have consecutive 1s. - The binary string `010` does not have consecutive 1s. - The binary string `100` does not have consecutive 1s. - The binary string `101` does not have consecutive 1s. - The binary string `110` is not included as it has consecutive 1s. - The binary string `011` is not included as it has consecutive 1s. Ensure that your solution generates all possible binary strings of length `n` that do not have consecutive 1s and prints them in lexicographical order.","solution":"def generate_binary_strings(n): Generates all binary strings of length `n` without consecutive 1s. def is_valid(s): for i in range(len(s) - 1): if s[i] == \'1\' and s[i + 1] == \'1\': return False return True def generate(current, length): if length == 0: result = \'\'.join(current) if is_valid(result): result_list.append(result) return for bit in [\'0\', \'1\']: current.append(bit) generate(current, length - 1) current.pop() result_list = [] generate([], n) return result_list # This function could be called with an input to print results directly, such as: # def main(): # n = int(input().strip()) # results = generate_binary_strings(n) # for string in results: # print(string) # # if __name__ == \\"__main__\\": # main()"},{"question":"Given a list of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), determine if a person could attend all meetings without overlapping. Input The first line of input contains a single integer n (1 ≤ n ≤ 10^4), indicating the number of meetings. The subsequent n lines each contain two space-separated integers, si and ei (0 ≤ si, ei ≤ 10^4), representing the start and end times of a meeting. Output Output \\"YES\\" if the person can attend all meetings without any overlapping, otherwise output \\"NO\\". Example Input 3 0 30 5 10 15 20 Output NO Note Explanation for the example: The person cannot attend all the meetings because the first meeting overlaps with both the second and third meetings. The time intervals [0,30] intersect with [5,10] and [15,20].","solution":"def can_attend_all_meetings(n, intervals): Determines if a person can attend all meetings given their start and end times. Parameters: n (int): the number of meetings intervals (list of lists): a list of meeting intervals [si, ei] Returns: str: \\"YES\\" if the person can attend all meetings without overlapping, otherwise \\"NO\\" if n == 0: return \\"YES\\" # Sort the intervals based on starting times intervals.sort(key=lambda x: x[0]) # Check for overlaps for i in range(1, n): if intervals[i][0] < intervals[i-1][1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given n intervals [l1, r1], [l2, r2], ..., [ln, rn]. Your task is to merge all overlapping intervals into non-overlapping ones in an optimal way. Two intervals [a, b] and [c, d] are considered overlapping if a ≤ d and c ≤ b. After merging the intervals, count the number of intervals that remain and print the length (number of integers) covered by the merged intervals. Input: The first line contains an integer n (1 ≤ n ≤ 10000) — the number of intervals. The next n lines each contain two integers li and ri (0 ≤ li ≤ ri ≤ 100000). Output: Print two integers: the number of non-overlapping merged intervals and the total length covered by these intervals. Examples: Input: 6 1 3 2 6 8 10 15 18 16 17 19 20 Output: 4 11 Input: 4 1 4 4 5 8 10 9 11 Output: 2 7 Explanation: In the first example, the merged intervals are [1, 6], [8, 10], [15, 18], [19, 20], thus, the count is 4 and the total length is (6-1) + (10-8) + (18-15) + (20-19) = 11. In the second example, the merged intervals are [1, 5] and [8, 11], thus, the count is 2 and the total length is (5-1) + (11-8) = 7.","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns the count of non-overlapping intervals and the total length covered by these intervals. if not intervals: return 0, 0 # Sort intervals by starting point intervals.sort(key=lambda x: x[0]) merged_intervals = [] current_start, current_end = intervals[0] for start, end in intervals[1:]: if start <= current_end: # there is overlap current_end = max(current_end, end) else: merged_intervals.append((current_start, current_end)) current_start, current_end = start, end # don\'t forget to add the last interval merged_intervals.append((current_start, current_end)) # Calculate the total length covered by the merged intervals total_length = sum(end - start for start, end in merged_intervals) return len(merged_intervals), total_length"},{"question":"You are given a list of transactions recorded in a time series. Each transaction is represented as an event consisting of a timestamp (in seconds) and a price value. Your task is to calculate the maximum profit that can be achieved by buying and selling these events. You may complete as many transactions as you like (i.e., buy one and sell one event multiple times), but you must sell the event before you buy again. Input: - An integer t (1 ≤ t ≤ 10^4) - the number of test cases. - For each test case: - An integer n (1 ≤ n ≤ 10^5) - the number of time series events. - An array of n integers p (1 ≤ p_i ≤ 10^4) - price values of the events. Output: For each test case, print the answer: the maximum profit that can be achieved from the given price series. Example: Input: 3 6 7 1 5 3 6 4 4 1 2 3 4 5 7 6 4 3 1 Output: 7 3 0","solution":"def max_profit(t, test_cases): results = [] for i in range(t): n, prices = test_cases[i] profit = 0 for j in range(1, n): if prices[j] > prices[j-1]: profit += prices[j] - prices[j-1] results.append(profit) return results"},{"question":"Given a list of integers, your task is to determine the maximum sum of a non-empty subarray that can be obtained from the list. A subarray is a contiguous part of an array. Input The first line contains a single integer n (1 ≤ n ≤ 1000), the size of the list. The second line contains n integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000), the elements of the list. Output Output a single integer, the maximum sum of any non-empty subarray of the given list. Examples Input 5 -2 1 -3 4 -1 Output 4 Input 5 1 2 3 -2 5 Output 9","solution":"def max_subarray_sum(n, arr): Returns the maximum sum of any non-empty subarray of the given list. :param n: Integer, the size of the list. :param arr: List of integers, the elements of the list. :return: Integer, the maximum sum of any non-empty subarray. if n == 0: return 0 # Initialize current sum and max sum with the first element of the array current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A popular archaeological excavation site consists of a grid of square-shaped dig sites where archaeologists have found scattered artifacts. Each dig site can contain a different number of artifacts, and the archaeologists want to determine the largest possible square subgrid they can find within the grid, where all of the dig sites in the subgrid contain at least one artifact. To help the archaeologists, write a program that, given the grid size and the number of artifacts in each dig site, finds the size of the largest square subgrid where each dig site inside the square contains at least one artifact. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers either 0 or 1, where 0 represents an empty dig site and 1 represents a dig site with at least one artifact. Output Output a single integer representing the side length of the largest square subgrid where every site contains at least one artifact. Examples Input 4 5 1 0 1 0 0 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 Output 3 Input 3 3 0 0 0 0 1 1 0 1 1 Output 2","solution":"def largest_square_with_artifacts(n, m, grid): # Initialize DP table with 0 dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"In a distant forest, there exists a mystical tree known as the Fibonacci Tree. Unlike any ordinary tree, the Fibonacci Tree follows a unique pattern in its structure. Each node in this tree represents a Fibonacci number, starting with two root nodes representing F(1) and F(2), which are both equal to 1. From these nodes, the tree expands its branches following the rules of the Fibonacci sequence, where each subsequent node contains the sum of the values of the two nodes directly preceding it. Given a requirement to navigate the Fibonacci Tree to collect specific nodes, your task is to find the shortest path within the tree from the root nodes to a given target Fibonacci number \'P\'. For instance, starting from the root node(s) with value F(1) and F(2) both being 1, it branches out to nodes representing F(3)=2, F(4)=3, F(5)=5, and so on. Any path must move in a valid Fibonacci manner up the tree, starting at F(1) or F(2) and advancing by the addition rules of the Fibonacci sequence. Input The input consists of a single integer P (1 ≤ P ≤ 10^6), representing the target Fibonacci number you need to locate in the tree. Output Output the shortest number of steps needed to reach the Fibonacci number \'P\' starting from either of the root nodes F(1) or F(2). Example Input 5 Output 4 Explanation To reach the number 5, the shortest path would be: 1 (root, F(1) or F(2)) -> 1 (root, F(1) or F(2)) -> 2 (F(3)) -> 3 (F(4)) -> 5 (F(5)) Each arrow represents a step in the Fibonacci Tree. Input 21 Output 6 Explanation The shortest path to reach the number 21 would be: 1 (root, F(1) or F(2)) -> 1 (root, F(1) or F(2)) -> 2 (F(3)) -> 3 (F(4)) -> 5 (F(5)) -> 8 (F(6)) -> 21 (F(8)) Each arrow represents a step in the Fibonacci Tree. Note Given the constraints, you need to identify the shortest sequence efficiently, ensuring that paths adhere to the Fibonacci sequence rules and advance in the least number of steps possible.","solution":"def shortest_path_to_fibonacci(P): Return the number of steps required to reach a Fibonacci number P. if P == 1: return 1 previous, current = 1, 1 step = 2 while current < P: previous, current = current, previous + current step += 1 return step if current == P else -1 # Return -1 if P is not a valid Fibonacci number"},{"question":"Alex is organizing a coding marathon event. He has to manage various participants, each participating in multiple coding challenges. For each participant, you need to track the maximum score they achieve in any challenge. Help Alex by writing a program that manages participant scores and outputs the highest score for each participant. # Input Format - The first line of input contains an integer T, the number of participants. - The next T pairs of lines contain the details for each participant: - The first line of each pair contains an integer N, the number of challenges the participant took part in. - The second line contains N space-separated integers representing the scores the participant received in each challenge. # Output Format - T lines of integers where each line represents the highest score achieved by the respective participant. # Constraints - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 500 - 0 ≤ Score ≤ 1000000 # Sample Input ``` 3 5 40 50 60 70 80 3 10 30 20 4 85 90 95 100 ``` # Sample Output ``` 80 30 100 ``` # Explanation For the first participant, the maximum score among 5 challenges is 80. For the second participant, the maximum score among 3 challenges is 30. For the third participant, the maximum score among 4 challenges is 100. Ensure your program runs efficiently within the given constraints.","solution":"def find_max_scores(participants): Function to find the highest score for each participant. :param participants: List of tuples where each tuple contains (number_of_challenges, scores_list) :return: List of maximum scores for each participant max_scores = [] for participant in participants: N, scores = participant max_score = max(scores) max_scores.append(max_score) return max_scores"},{"question":"You are given a string s consisting of lowercase English letters. You can perform the following operation on the string a maximum of k times: choose any character in the string and replace it with any other lowercase English letter. Your task is to determine the length of the longest substring that contains only one distinct character after performing at most k operations. Input: The first line contains one integer k (0 ≤ k ≤ |s|, where |s| is the length of the string s). The second line contains a string s (1 ≤ |s| ≤ 100000) consisting of lowercase English letters. Output: Print the length of the longest substring with at most one distinct character after performing the given operations. Example Input: 2 aabbcc Output: 4 Note: In the example, you can change \'b\' and \'c\' in the string \\"aabbcc\\" to \'a\' to make the substring \\"aaaa\\", which is the longest possible substring with only one distinct character after performing at most 2 operations.","solution":"def longest_substring_with_one_distinct_char(k, s): Determines the length of the longest substring with at most one distinct character after performing at most k operations on the given string. :param k: Maximum number of operations allowed :param s: The given string :return: Length of the longest substring with at most one distinct character n = len(s) if n == 0: return 0 max_len = 0 start = 0 char_count = {} for end in range(n): char_count[s[end]] = char_count.get(s[end], 0) + 1 max_count = max(char_count.values()) while (end - start + 1) - max_count > k: char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"You are given an `m x n` grid, where each cell in the grid contains an integer. The grid is called \\"beautiful\\" if every row and every column contains exactly one peak element, where a peak element in a row or column is the maximum element in that row or column. Write a function to determine if a given grid is beautiful. Function Signature: ```python def is_beautiful_grid(grid: List[List[int]]) -> bool: ``` Input: - The function takes a 2D list of integers `grid` representing the grid\'s elements, where `1 <= m, n <= 100` and `-10^9 <= grid[i][j] <= 10^9`. Output: - The function returns `True` if the grid is beautiful, and `False` otherwise. Example: ```python grid = [ [9, 4, 2], [1, 8, 3], [5, 6, 7] ] is_beautiful_grid(grid) # returns: True ``` Explanation: - In the given example, the maximum elements in each row are [9, 8, 7]. - The maximum elements in each column are [9, 8, 7]. - Each row and each column thus contains exactly one peak element. Note: - If the grid does not meet the criteria, return `False`. - Handle edge cases where the grid might have all equal elements or varying grid dimensions.","solution":"from typing import List def is_beautiful_grid(grid: List[List[int]]) -> bool: # Get the dimensions of the grid m = len(grid) n = len(grid[0]) # Check if each row has exactly one peak for row in grid: max_in_row = max(row) if row.count(max_in_row) != 1: return False # Check if each column has exactly one peak for j in range(n): col = [grid[i][j] for i in range(m)] max_in_col = max(col) if col.count(max_in_col) != 1: return False return True"},{"question":"You are given an `n x n` grid of integers, where each cell in the grid contains either a 0 or a 1. A \\"blob\\" is defined as a group of 1s connected vertically and horizontally (but not diagonally). Write a program to determine the size of the largest blob in the grid. Input The first line contains the integer n (1 ≤ n ≤ 100). Each of the next n lines contains n integers (either 0 or 1) separated by spaces, representing the grid. Output Output a single integer, the size of the largest blob. Example Input 5 1 0 1 0 0 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 0 0 1 0 Output 4 Explanation There are multiple blobs in the grid. The largest blob is the one composed of the four connected 1s in the bottom-right corner.","solution":"def largest_blob(n, grid): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= n or grid[x][y] != 1: return 0 grid[x][y] = -1 # Mark the cell as visited size = 1 # Count the current cell # Explore all four possible directions (up, down, left, right) size += dfs(x + 1, y) size += dfs(x - 1, y) size += dfs(x, y + 1) size += dfs(x, y - 1) return size max_blob_size = 0 for i in range(n): for j in range(n): if grid[i][j] == 1: max_blob_size = max(max_blob_size, dfs(i, j)) return max_blob_size"},{"question":"Sophie is managing a warehouse where shipments are stored in stacks. Each stack can store boxes of the same width. She gets a sequence of instructions to manage the stacks in the warehouse. Each instruction is either adding a box to a specific stack or removing the top box from a specific stack. Initially, all stacks are empty, and there are two types of operations: 1. \\"push x y\\" - Add a box of width `y` to the stack `x`. 2. \\"pop x\\" - Remove the top box from the stack `x`. Sophie wants to implement these operations efficiently and then query the number of boxes of a specific width across all stacks after applying a sequence of operations. Write a program to process these operations and then respond to a query of the form \\"cnt y\\", which asks for the number of boxes of width `y` across all stacks after all operations have been applied. Input The first line contains an integer `n`, the number of operations (1 ≤ n ≤ 2 * 10^5). Each of the next `n` lines contains one of the following three types of instructions: - \\"push x y\\" (1 ≤ x ≤ 10^5, 1 ≤ y ≤ 10^5) – push a box of width `y` to stack `x`. - \\"pop x\\" (1 ≤ x ≤ 10^5) – pop the top box from stack `x`. - \\"cnt y\\" (1 ≤ y ≤ 10^5) – output the number of boxes of width `y` across all stacks. Output For each \\"cnt y\\" instruction, output the number of boxes of width `y` across all stacks. Example Input 7 push 1 5 push 2 6 push 1 5 push 3 5 pop 1 cnt 5 cnt 6 Output 2 1 Note In this example, the sequence of operations modifies the stacks as follows: 1. push 1 5 – stack 1: [5] 2. push 2 6 – stack 2: [6] 3. push 1 5 – stack 1: [5, 5] 4. push 3 5 – stack 3: [5] 5. pop 1 – stack 1: [5] After applying the operations, the warehouse has: - stack 1: [5] - stack 2: [6] - stack 3: [5] The first \\"cnt 5\\" instruction outputs 2 because there are 2 boxes of width 5 across all stacks. The second \\"cnt 6\\" instruction outputs 1 because there is 1 box of width 6 across all stacks.","solution":"def warehouse_operations(n, operations): from collections import defaultdict, Counter, deque stacks = defaultdict(deque) width_counter = Counter() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"push\\": stack_num = int(parts[1]) width = int(parts[2]) stacks[stack_num].append(width) width_counter[width] += 1 elif parts[0] == \\"pop\\": stack_num = int(parts[1]) if stacks[stack_num]: width = stacks[stack_num].pop() width_counter[width] -= 1 elif parts[0] == \\"cnt\\": width = int(parts[1]) results.append(width_counter[width]) return results"},{"question":"In a quiet village, the villagers have decided to celebrate a grand feast. Each house in the village is required to contribute exactly one dish. The villagers want to ensure that the number of dishes brought by different houses is both diverse and follows a specific property: each house should contribute a unique dish, and the sum of the ranks of these dishes must be as large as possible without exceeding a given number, k. Each house is assigned a unique positive integer rank starting from 1 up to n (inclusive). The challenge is to select a subset of these ranks such that the sum of the ranks in the subset does not exceed k, and the sum is maximized. Write a program to determine the maximum sum of the ranks of dishes that can be selected under these conditions. Input: - The first line contains a single integer t, the number of test cases. - Each of the next t lines contains two integers, n and k, separated by a space. Output: - For each test case, output the maximum sum of the ranks of dishes that can be obtained without exceeding k. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 10^5 1 ≤ k ≤ 10^9 Example Input: 2 5 10 8 15 Example Output: 10 15 Explanation: - For the first test case, the possible ranks are {1, 2, 3, 4, 5}. The maximum sum without exceeding 10 is 10 (1 + 2 + 3 + 4). - For the second test case, the possible ranks are {1, 2, 3, 4, 5, 6, 7, 8}. The maximum sum without exceeding 15 is 15 (1 + 2 + 3 + 4 + 5). This problem is here to challenge you to efficiently handle large inputs and find optimal solutions under constraints.","solution":"def max_sum_ranks(t, test_cases): results = [] for n, k in test_cases: sum_ranks = 0 for i in range(1, n + 1): if sum_ranks + i > k: break sum_ranks += i results.append(sum_ranks) return results def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) test_cases = [(int(data[2 * i + 1]), int(data[2 * i + 2])) for i in range(t)] results = max_sum_ranks(t, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"In a distant world, there is a network of cities connected by a series of bidirectional roads. Each road has a designated length. You have been assigned to help optimize travel within this network by implementing toll collection on certain roads to regulate traffic and maintenance. The government has decided that they want to ensure that every road in the network is tolled in such a way that the maximum toll between any two cities along the shortest path between them is minimized. In other words, you need to distribute the tolls in such a way that, if a traveler moves from one city to another using the shortest path, the highest toll they need to pay on any single road along that path is as low as possible. You need to accomplish this task by computing toll values for each road considering the entire network of cities and roads. Input The input consists of one or more datasets. - The first line contains an integer T (1 ≤ T ≤ 5), the number of datasets. - For each dataset: - The first line contains two integers N and M (1 ≤ N ≤ 100, 0 ≤ M ≤ 5000), the number of cities and the number of roads, respectively. - M lines follow, each containing three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 100000), which represent a road between city u and city v with a length w. Output For each dataset, output one integer in one line: the minimized maximum toll that would be encountered on the shortest path between any two cities when the optimal toll distribution is used. Example Input 2 4 5 1 2 2 1 3 4 2 3 3 2 4 5 3 4 1 3 3 1 2 3 2 3 2 1 3 1 Output 3 2","solution":"import heapq def minimize_max_toll(T, datasets): Computes the minimized maximum toll for each dataset. def mst_prim(n, graph): Returns the weight of the maximum edge in the minimum spanning tree (MST) using Prim\'s algorithm. visited = [False] * n min_heap = [(0, 0)] # (weight, vertex) max_edge_weight = 0 while min_heap: current_weight, u = heapq.heappop(min_heap) if visited[u]: continue visited[u] = True max_edge_weight = max(max_edge_weight, current_weight) for v, weight in graph[u]: if not visited[v]: heapq.heappush(min_heap, (weight, v)) return max_edge_weight results = [] for n, m, edges in datasets: graph = [[] for _ in range(n)] for u, v, w in edges: graph[u - 1].append((v - 1, w)) graph[v - 1].append((u - 1, w)) results.append(mst_prim(n, graph)) return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) datasets = [] index = 1 for _ in range(T): n, m = map(int, input_lines[index].split()) index += 1 edges = [] for _ in range(m): u, v, w = map(int, input_lines[index].split()) index += 1 edges.append((u, v, w)) datasets.append((n, m, edges)) return T, datasets"},{"question":"You are given a list of events that occur within a single day, represented as intervals on a 24-hour clock. Each event is defined by its start and end times (in minutes past midnight). Write a function `min_intervals_to_erase(events)` that, given this list of events, returns the minimum number of events you need to remove so that no two events overlap. For simplicity, you can assume: - Each event is represented as a tuple `(start_time, end_time)`. - Two events overlap if they intersect at any time. For example, if one event ends exactly when another one starts, they do not overlap. - The input list can have at most `10^6` events. # Input - A list of tuples, where each tuple contains two integers representing the start time and end time of an event. # Output - An integer representing the minimum number of events to remove to eliminate all overlaps. # Example ```python events = [(0, 30), (5, 10), (15, 20)] print(min_intervals_to_erase(events)) # Output: 1 events = [(1, 3), (2, 4), (3, 5)] print(min_intervals_to_erase(events)) # Output: 1 ``` # Explanation In the first example: - The events (0, 30) and (5, 10) overlap. - The events (0, 30) and (15, 20) overlap. - If we remove (0, 30), we get that there are no more overlaps. In the second example: - The events (1, 3), (2, 4), and (3, 5) all overlap. - If we remove the event (2, 4), the remaining events (1, 3) and (3, 5) do not overlap. # Constraints - 1 ≤ len(events) ≤ 10^6 - 0 ≤ start_time < end_time ≤ 1440","solution":"def min_intervals_to_erase(events): Returns the minimum number of events to remove so that no two events overlap. Args: events (list of tuple of int): The list of tuples where each tuple contains start time and end time of an event. Returns: int: The minimum number of events to remove. if not events: return 0 # Sort events by their ending times events.sort(key=lambda x: x[1]) removal_count = 0 last_end_time = float(\'-inf\') for start, end in events: if start < last_end_time: removal_count += 1 else: last_end_time = end return removal_count"},{"question":"Input 3 8 15 2 8 5 12 30 20 5 4 Output 12","solution":"def find_maximum(matrix): Returns the maximum element in the given matrix. :param matrix: List of List containing integer elements. :return: Integer which is the maximum element in the matrix. return max(max(row) for row in matrix) # Example usage: # matrix = [ # [15, 2, 8], # [5, 12, 30], # [20, 5, 4] # ] # print(find_maximum(matrix)) # Output should be 30"},{"question":"A software company has developed a new algorithm that applies transformations to an integer array. The transformation process follows a specific pattern based on given commands. There are two types of commands: \\"increment i\\" where i is an integer: Increment the element at index i (0-based) by 1. \\"multiply x\\" where x is an integer: Multiply all elements in the array by x. The commands are applied sequentially to the array. Your task is to determine the state of the array after all commands have been executed. Input: The first line contains an integer T representing the number of test cases. Each test case starts with an integer N representing the size of the array. The second line of each test case contains N space-separated integers representing the initial elements of the array. The third line of each test case contains an integer M representing the number of commands. The next M lines each contain a command in the format described above. Output: For each test case, print the resulting array after executing all the commands, with elements separated by a space. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ M ≤ 100 -10^9 ≤ initial element value ≤ 10^9 0 ≤ i < N 1 ≤ x ≤ 10^9 SAMPLE INPUT 2 5 1 2 3 4 5 3 increment 2 multiply 2 increment 1 3 10 10 10 2 multiply 3 increment 0 SAMPLE OUTPUT 2 6 8 8 10 31 30 30 Explanation Case #1: The initial array is [1, 2, 3, 4, 5]. Command 1: increment 2 → The array becomes [1, 2, 4, 4, 5]. Command 2: multiply 2 → The array becomes [2, 4, 8, 8, 10]. Command 3: increment 1 → The array becomes [2, 5, 8, 8, 10]. Case #2: The initial array is [10, 10, 10]. Command 1: multiply 3 → The array becomes [30, 30, 30]. Command 2: increment 0 → The array becomes [31, 30, 30].","solution":"def apply_transformations(test_cases): Applies a series of commands to an integer array as defined in the problem. Args: test_cases (list): A list of tuples where each tuple represents a test case in the format (N, array, M, commands). Returns: list: A list containing the transformed arrays for each test case. results = [] for test_case in test_cases: N, array, M, commands = test_case for command in commands: parts = command.split() if parts[0] == \\"increment\\": index = int(parts[1]) array[index] += 1 elif parts[0] == \\"multiply\\": factor = int(parts[1]) array = [x * factor for x in array] results.append(array) return results def parse_input(input_str): Parses the input string and converts it into a format suitable for processing. Args: input_str (str): A string containing the input data. Returns: list: A list of test cases as described in the apply_transformations function. input_lines = input_str.strip().split(\\"n\\") index = 0 T = int(input_lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 array = list(map(int, input_lines[index].split())) index += 1 M = int(input_lines[index]) index += 1 commands = input_lines[index:index + M] index += M test_cases.append((N, array, M, commands)) return test_cases def format_output(results): Formats the output list into a string. Args: results (list): A list of transformed arrays. Returns: str: A formatted string suitable for output. return \\"n\\".join(\\" \\".join(map(str, result)) for result in results) # Example usage: # input_str = \'\'\'2 # 5 # 1 2 3 4 5 # 3 # increment 2 # multiply 2 # increment 1 # 3 # 10 10 10 # 2 # multiply 3 # increment 0\'\'\' # test_cases = parse_input(input_str) # results = apply_transformations(test_cases) # output_str = format_output(results) # print(output_str)"},{"question":"Alex loves constructing pyramids using blocks. Today, Alex decides to create a pyramid with a given height h. The pyramid he constructs will consist of multiple levels, where each level l (1 ≤ l ≤ h) requires exactly l blocks. Alex\'s goal is to find out the minimum number of block types required to construct the pyramid such that blocks from two different types cannot be adjacent in any level. Each level is given as a sequence of blocks. You\'ve got a single integer h representing the height of the pyramid. Alex wants to find out the minimum number of block types needed to construct the pyramid with the given constraints. Input The input consists of a single integer h (1 ≤ h ≤ 1000). Output The output should be a single integer representing the minimum number of block types required. Example Input 4 Output 2 Note In the first test case, the height of the pyramid is 4. The pyramid would be constructed as follows: Level 1: A Level 2: AB Level 3: ABA Level 4: ABAB In this configuration, no two adjacent blocks in the same level are of the same type, and we use only 2 types of blocks, A and B. Therefore, the answer is 2.","solution":"def min_block_types(h): Returns the minimum number of block types required to construct the pyramid such that no two adjacent blocks in any level are of the same type. return 2"},{"question":"Peter invented a new game using his toy cars. He arranges n toy cars in a straight line. Each car can be moved to the left or right from their initial position following a certain pattern. Peter wants to calculate the maximum distance any car can move from its initial position if specific movement rules are followed. Each toy car i can be moved a maximum of mi positions either to the left or to the right. Your task is to help Peter determine the maximum distance any toy car can move from its initial position. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of toy cars. The second line contains a sequence of integers m1, m2, ..., mn (1 ≤ mi ≤ 1000) — where mi is the maximum number of positions the i-th toy car can be moved from its initial position. Output Print a single integer — the maximum distance any toy car can move from its initial position. Examples Input 4 2 3 1 4 Output 4 Input 5 5 5 5 5 5 Output 5 Input 3 1 2 3 Output 3 Input 6 6 2 8 3 1 4 Output 8 Note In the first example, the maximum distance is determined by the fourth toy car, which can move 4 positions from its initial position. In the second example, all toy cars can move 5 positions from their initial positions, so the maximum distance is 5. In the third example, the maximum distance is determined by the third toy car, which can move 3 positions from its initial position. In the fourth example, the maximum distance is determined by the third toy car, which can move 8 positions from its initial position.","solution":"def max_car_distance(n, m): Returns the maximum distance any toy car can move from its initial position. Parameters: n (int): The number of toy cars. m (list of int): A list where mi is the maximum number of positions the i-th toy car can be moved. Returns: int: The maximum distance any toy car can move. return max(m)"},{"question":"Lena is planning to bake cookies for a charity event. She has a list of n ingredients and each ingredient has a specific quantity that Lena has. The total quantity of all ingredients will be used if she follows her cookie recipe exactly. However, the recipe requires specific ratios for each ingredient. For example, if the recipe requires ingredients in the ratio of 1:2:3, it means for every unit of the first ingredient, she needs 2 units of the second ingredient and 3 units of the third ingredient to make a single batch of cookies. Lena wants to bake as many full batches of cookies as possible, without running out of any ingredient. Your task is to help Lena figure out the maximum number of full batches of cookies she can bake with the given quantities of the ingredients. Input The first line of the input contains a single integer c (1 ≤ c ≤ 10^4) — the number of test cases. Each test case is described by two lines. The first line contains a single integer n (1 ≤ n ≤ 100) — the number of ingredients. The second line contains n space-separated integers q_1, q_2, ..., q_n (1 ≤ q_i ≤ 10^6) — the quantities of each ingredient Lena has. The third line contains n space-separated integers r_1, r_2, ..., r_n (1 ≤ r_i ≤ 10^6) — the required ratio of each ingredient to make a single batch of cookies. Output For each test case, print a single integer — the maximum number of full batches of cookies that can be baked. Example Input 3 3 6 12 18 1 2 3 4 10 5 5 10 1 1 1 1 2 8 10 2 3 Output 6 5 3 Explanation In the first test case, the ratios 1:2:3 mean that for each unit of the first ingredient, Lena needs 2 units of the second ingredient and 3 units of the third ingredient. With the quantities provided (6, 12, 18), she can make 6 full batches. In the second test case, the ratio is 1:1:1:1, so Lena can make 5 full batches from the given quantities (10, 5, 5, 10). In the third test case, the ratio is 2:3, so Lena can make 3 full batches from the given quantities (8, 10).","solution":"def max_batches(c, test_cases): results = [] for i in range(c): n = test_cases[i][0] quantities = test_cases[i][1] ratios = test_cases[i][2] min_batches = float(\'inf\') for q, r in zip(quantities, ratios): batches = q // r if batches < min_batches: min_batches = batches results.append(min_batches) return results"},{"question":"Martha is an avid duck collector, and she has a series of duck cages arranged in a row. She wants to feed her ducks in such a way that no two adjacent ducks receive the same amount of food. Each duck cage with ducks numbered from 1 to N receives some amount of food. The goal is to minimize the maximum amount of food given to any duck. You are given an integer N, which represents the number of duck cages, and you need to determine the minimum possible value of the maximum amount of food that can be distributed among the duck cages such that no two adjacent ducks have the same amount of food. Input Format: The first line contains an integer N - denoting the number of duck cages. Output format: Print the minimum possible value of the maximum amount of food that can be distributed among the duck cages such that no two adjacent ducks have the same amount of food. Constraints: 1 ≤ N ≤ 10^5 SAMPLE INPUT 4 SAMPLE OUTPUT 2 Explanation: For N = 4 cages, the minimum possible value of the maximum food is 2. One possible arrangement is [1, 2, 1, 2], where no two adjacent ducks receive the same amount of food, and the maximum amount of food given is 2.","solution":"def min_max_food(N): Return the minimum possible value of the maximum amount of food that can be distributed among N duck cages such that no two adjacent ducks have the same amount of food. return 2"},{"question":"Valera has recently started learning about subsets in school. He is given a task to find the largest divisible subset from a given list of integers. A subset is called divisible if for every pair (x, y) of elements in this subset, either x % y == 0 or y % x == 0. Valera finds this task challenging and needs your assistance. Write a function that given an array of distinct positive integers, returns the largest subset such that every pair of elements in the subset satisfies the divisibility condition. If there are multiple such subsets of the maximum length, return any of them. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The subsequent line contains n space-separated integers ai (1 ≤ ai ≤ 109) — the array elements. Output The output should contain the elements of the largest divisible subset as a space-separated list. If there are multiple solutions, output any of them. Examples Input 6 1 2 4 8 3 9 Output 1 2 4 8 Input 5 2 3 4 9 27 Output 3 9 27 Input 3 6 10 15 Output 6 10","solution":"def largest_divisible_subset(nums): if not nums: return [] nums.sort() dp = [] for num in nums: max_subset = [] for subset in dp: if num % subset[-1] == 0: if len(subset) > len(max_subset): max_subset = subset new_subset = max_subset + [num] dp.append(new_subset) return max(dp, key=len)"},{"question":"You are given a list of n integers a1, a2, ..., an. You have to process q queries. Each query consists of three integers l, r, and x. For each query, you need to determine if the number x appears in the subarray from index l to index r (inclusive) more than k times, where k is a fixed integer given as part of the input. Input The first line of input contains three integers n, q, and k (1 ≤ n, q, k ≤ 10^5) — the number of elements in the array, the number of queries, and the threshold k. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. The next q lines describe the queries. Each of these lines contains three integers l, r, and x (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^9). Output For each query, print \\"YES\\" if the number x appears in the subarray a[l..r] more than k times. Otherwise, print \\"NO\\". Examples Input 5 3 1 1 2 3 2 1 1 4 2 2 5 1 1 5 3 Output YES NO NO Input 6 2 2 1 2 2 1 2 2 1 6 2 3 6 1 Output YES NO","solution":"def process_queries(n, q, k, arr, queries): results = [] for l, r, x in queries: subarray = arr[l-1:r] if subarray.count(x) > k: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Mira is an avid gardener who loves to plant flowers along the borders of her garden. She has a variety of flower seeds with different blooming durations. To make her garden look beautiful for the most extended period, she wants to plant them in such a way that flowers bloom sequentially one after another without any gaps in between. Given each flower seed blooming duration in days, help Mira to find out the maximum number of days her garden will have flowers blooming consecutively if she plants the flowers optimally. Input Description The first line contains N, the number of different flower seeds Mira has. Next line contains N integers, representing the number of days each flower seed takes to bloom. Output Description Output a single integer, the maximum number of consecutive blooming days Mira\'s garden can have. Constraints 1 ≤ N ≤ 1000, 1 ≤ Ai ≤ 100 Example Input 3 4 2 1 Output 7 Input 5 10 5 2 1 3 Output 21 Explanation: In the first example, Mira can plant the flowers with blooming durations 1, 2, and 4 days in order, making her garden bloom consecutively for 1+2+4=7 days. In the second example, an optimal order would be 1, 2, 3, 5, and 10 days, totaling 1+2+3+5+10=21 consecutive blooming days.","solution":"def max_bloom_days(N, durations): Returns the maximum number of consecutive days the garden will bloom. Parameters: N (int): number of different flower seeds. durations (list of int): list of integers representing the number of days each flower seed blooms. Returns: int: maximum number of consecutive blooming days. durations.sort() return sum(durations)"},{"question":"Aiko has been practicing her coding skills by creating a logbook application for her running sessions. In the application, she records the number of kilometers she runs each day. After several months of consistent training, she decided she wants to know her longest streak of consecutive days where she ran at least a specified number of kilometers. Given an array of integers where each element represents the kilometers Aiko ran on that day, and an integer K representing the minimum required kilometers for a run to count towards her streak, write a function to determine the longest streak of consecutive days where Aiko ran at least K kilometers. Input The input consists of two parts: 1. An integer n (1 ≤ n ≤ 10^5) representing the number of days. 2. An array of n integers where each integer ai (0 ≤ ai ≤ 10^5) represents the kilometers Aiko ran on the i-th day. 3. An integer K (1 ≤ K ≤ 10^5). Output Print a single integer representing the longest streak of consecutive days where Aiko ran at least K kilometers. Examples Input 7 5 3 2 6 7 1 5 5 Output 2 Input 10 8 8 3 4 8 8 8 8 2 2 8 Output 4 Note In the first sample, Aiko’s longest streak where she ran at least 5 kilometers is 2 days (running 6 and 7 kilometers). In the second sample, the longest streak is 4 days where Aiko ran exactly 8 kilometers each day.","solution":"def longest_streak(n, distances, K): Returns the longest streak of consecutive days where Aiko ran at least K kilometers. :param n: int, number of days :param distances: List[int], kilometers ran each day :param K: int, minimum kilometers to count for the streak :return: int, longest streak of consecutive days max_streak = 0 current_streak = 0 for distance in distances: if distance >= K: current_streak += 1 if current_streak > max_streak: max_streak = current_streak else: current_streak = 0 return max_streak"},{"question":"Fatal Eagle is facing a new challenge. He needs to rearrange the powers of the weird creatures in a specific pattern to defeat Mr. XYZ. The pattern requires the list to be alternated between the lowest and the highest remaining power levels at each step. \\"For example,\\" explains Arjit, \\"if you have a list of powers [1, 3, 2, 4], you need to rearrange it to [1, 4, 2, 3]. You will pick the lowest number first, then the highest, then the lowest of the remaining, and so on.\\" Fatal Eagle decides to tackle this problem head-on and implement a function to help him with the task. Input format: On the first line of the input, there is an integer T, which denotes the number of test cases. For every test case, there is a number N, denoting the size of the list. Then, on the next line there are N numbers denoting the integers in the list. Output format: For each test case, output the rearranged list. Constraints: 1 ≤ Test Cases ≤ 50 1 ≤ Number of elements in each list ≤ 10^3 1 ≤ Value of the elements ≤ 10^5 SAMPLE INPUT 3 4 1 3 2 4 5 5 3 1 2 4 3 7 6 8 SAMPLE OUTPUT 1 4 2 3 1 5 2 4 3 6 8 7 Explanation: In the first case, the list is rearranged to alternate between the lowest and highest powers: [1, 4, 2, 3]. In the second case, first the lowest power, then the highest, and so on: [1, 5, 2, 4, 3]. In the third case, alternating between the lowest and highest remaining in the list: [6, 8, 7].","solution":"def rearrange_powers(test_cases): results = [] for case in test_cases: N, powers = case powers.sort() rearranged = [] i, j = 0, N - 1 while i <= j: rearranged.append(powers[i]) i += 1 if i <= j: rearranged.append(powers[j]) j -= 1 results.append(rearranged) return results def parse_input(input_text): lines = input_text.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] current_line = 1 for _ in range(T): N = int(lines[current_line]) powers = list(map(int, lines[current_line + 1].split())) test_cases.append((N, powers)) current_line += 2 return test_cases def format_output(results): output_lines = [] for result in results: output_lines.append(\\" \\".join(map(str, result))) return \\"n\\".join(output_lines)"},{"question":"Alice is an avid gardener and has a beautiful rectangular flower bed in her garden. She wants to plant tulips in such a way that they form a square matrix within the rectangular flower bed. However, to maintain symmetry, she wants this square matrix of tulips to be as large as possible. Given the dimensions of the rectangular flower bed, can you help her determine the maximum size of the square matrix that can fit within the bed? For example, if the dimensions of the flower bed are 10 meters by 15 meters, the largest square matrix of tulips that can fit within it would be 10 meters by 10 meters. Input The input consists of a single line containing two integers W and H, the width and height of the rectangular flower bed. Output Output a single integer, the side length of the largest possible square matrix of tulips that can fit within the given rectangular flower bed. Constraints 1 ≤ W, H ≤ 10^9 SAMPLE INPUT 8 6 SAMPLE OUTPUT 6 Explanation: The largest square that can fit within an 8 meters by 6 meters rectangular flower bed is 6 meters by 6 meters.","solution":"def max_square_matrix_size(W, H): Returns the side length of the largest possible square matrix that can fit within the given W x H rectangular flower bed. return min(W, H)"},{"question":"You are given n pairs of integers. Each pair consists of a start time and an end time of an event. Your task is to write a function that finds out the minimum number of rooms required to accommodate all the events such that no two events that overlap are assigned to the same room. **Input:** - The first line of input contains an integer n (1 ≤ n ≤ 10^4), the number of events. - Each of the next n lines contains two integers, start and end (1 ≤ start < end ≤ 10^9), representing the start and end times of an event. **Output:** - Print a single integer, the minimum number of rooms required. **Example:** _Input_ 5 1 4 2 5 7 9 5 8 3 6 _Output_ 3 **Note:** - The first event [1, 4] and the second event [2, 5] overlap, so they cannot be in the same room. - The third event [7, 9] does not overlap with any of these two events and can be in a separate room. - The fourth event [5, 8] overlaps with the second event [2, 5] but starts after the first event [1, 4] ends. - The fifth event [3, 6] overlaps with the first event [1, 4], the second event [2, 5] and the fourth event [5, 8], so it needs one more separate room. - Therefore, at least 3 rooms are needed to accommodate all these events.","solution":"def min_meeting_rooms(events): Finds the minimum number of meeting rooms required to accommodate all events. Parameters: events (list of tuples): The list of start and end times of the events. Returns: int: The minimum number of meeting rooms required. if not events: return 0 # Separate and sort start and end times start_times = sorted([event[0] for event in events]) end_times = sorted([event[1] for event in events]) start_ptr, end_ptr = 0, 0 used_rooms = 0 max_rooms = 0 # Iterate through all the start times while start_ptr < len(events): # If there is a meeting that has started and hasn\'t ended if start_times[start_ptr] < end_times[end_ptr]: used_rooms += 1 start_ptr += 1 else: # Else there is a meeting that has ended used_rooms -= 1 end_ptr += 1 max_rooms = max(max_rooms, used_rooms) return max_rooms"},{"question":"You are given a matrix of integers where each row and column is sorted in non-decreasing order. You need to find the kth smallest element in the matrix. Input The first line of input contains two integers n, m (1 ≤ n, m ≤ 500): the number of rows and columns in the given matrix, and an integer k (1 ≤ k ≤ n*m). The next n lines contain m integers each, the elements of the matrix. Output Print a single integer, the kth smallest element in the matrix. Examples Input 3 3 5 1 5 9 10 11 13 12 13 15 Output 11 Input 4 4 7 1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7 Output 4","solution":"import heapq def kth_smallest_element(matrix, n, m, k): Returns the kth smallest element in a given sorted matrix. :param matrix: List[List[int]], the input sorted matrix. :param n: int, number of rows. :param m: int, number of columns. :param k: int, the kth position to find the smallest element. :return: int, the kth smallest element. min_heap = [] # Step 1: Put the first element of each row in the min heap for i in range(min(n, k)): # Only need to consider at most first k rows heapq.heappush(min_heap, (matrix[i][0], i, 0)) # Step 2: Extract-min k times to get the kth smallest element for _ in range(k): element, r, c = heapq.heappop(min_heap) if c + 1 < m: heapq.heappush(min_heap, (matrix[r][c+1], r, c+1)) return element"},{"question":"Problem You are given a list of integers. Your task is to implement a function that calculates the length of the longest subsequence where every adjacent element has a difference of 1. A subsequence is a sequence derived by deleting some or no elements of the array without changing the order of the remaining elements. # Constraints The input satisfies the following conditions: * The length of the list is at most 10^5. * All elements in the list are integers within the range [1, 10^6]. # Input The input is given in the following format: First line: an integer N that represents the length of the list. Second line: N space-separated integers that represent the values in the list. # Output Output the length of the longest subsequence where the difference between every adjacent element is exactly 1. # Examples **Example 1:** Input: ``` 6 1 2 3 4 5 6 ``` Output: ``` 6 ``` **Example 2:** Input: ``` 8 1 2 2 3 4 5 5 6 ``` Output: ``` 6 ``` **Example 3:** Input: ``` 5 10 9 4 5 5 ``` Output: ``` 2 ```","solution":"def longest_adjacent_subsequence_diff_1(arr): Calculates the length of the longest subsequence where the difference between every adjacent element is exactly 1. from collections import defaultdict if not arr: return 0 count = defaultdict(int) max_length = 1 for num in arr: count[num] = max(count[num], count[num-1] + 1) max_length = max(max_length, count[num]) return max_length"},{"question":"In a distant land, there is a famous grand prix racing track. Each race consists of multiple laps and each lap is divided into several segments. Before each race, the race organizers provide a detailed map of the track, indicating the difficulty level of each segment. Each segment difficulty level is represented by a positive integer value. The challenge for the racers is to identify the total difficulty level they experienced after completing a specified number of laps. Given the difficulty level of each segment and the number of segments in a lap, you are tasked with calculating the total difficulty level after a given number of laps. Input: The first line of input contains an integer T, the number of test cases. Then T test cases follow. Each test case consists of three parts: 1. An integer representing the number of segments in a lap, S. 2. A list of S integers representing the difficulty levels of each segment in a lap. 3. An integer L representing the number of laps in the race. Output: For each test case, output a single integer representing the total difficulty level experienced after completing the specified number of laps. Constraints: 1 ≤ T ≤ 10 1 ≤ S ≤ 1000 1 ≤ difficulty level of each segment ≤ 100 1 ≤ L ≤ 10^9 Example: Input: 2 5 1 2 3 4 5 3 4 7 8 9 10 2 Output: 45 68 Explanation: In the first test case: The difficulty levels for each segment in a lap are [1, 2, 3, 4, 5]. There are 5 segments in total for each lap. The racer completed 3 laps. The total difficulty for 3 laps is 3 * (1 + 2 + 3 + 4 + 5) = 45. In the second test case: The difficulty levels for each segment in a lap are [7, 8, 9, 10]. There are 4 segments in total for each lap. The racer completed 2 laps. The total difficulty for 2 laps is 2 * (7 + 8 + 9 + 10) = 68.","solution":"def total_difficulty(T, test_cases): Calculate the total difficulty level after a given number of laps for each test case. Parameters: T : int : The number of test cases test_cases : list of tuple : A list of test case tuples, each containing: - an integer representing the number of segments in a lap (S) - a list of S integers representing the difficulty levels of each segment in a lap - an integer L representing the number of laps in the race Returns: list of int : A list of total difficulty levels for each test case. results = [] for case in test_cases: S, segments, L = case total_difficulty_per_lap = sum(segments) total_difficulty = total_difficulty_per_lap * L results.append(total_difficulty) return results"},{"question":"You have been hired as a software engineer for the Mars Habitat Construction Project. Your task is to develop an algorithm to optimize the allocation of building blocks for constructing habitable structures on the Martian surface. Each habitable structure is constructed using cubic blocks, each with an edge length of 1 meter. The proposed designs of the structures come in the form of two-dimensional grids, representing a top view where each cell contains the number of blocks to be stacked at that position. The goal is to ensure stability by following the rule: a block at position (i, j) can only be placed if all positions directly below it (in the same column) have blocks as well. Given a matrix representing the top view of the blocks, your task is to calculate the total number of blocks needed to construct the structure. # Input The input consists of a single dataset. - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 100), representing the dimensions of the grid. - The next `n` lines each contain `m` integers, where the `j-th` integer in the `i-th` line represents the number of blocks at the position `(i, j)`. # Output Output a single integer representing the total number of blocks required to construct the structure as described. # Example Input ``` 3 4 3 0 2 1 1 2 1 0 4 1 2 3 ``` Output ``` 20 ``` # Explanation In the example above, the top view matrix is: ``` 3 0 2 1 1 2 1 0 4 1 2 3 ``` The total number of blocks required is: 3 + 0 + 2 + 1 + 1 + 2 + 1 + 0 + 4 + 1 + 2 + 3 = 20","solution":"def calculate_total_blocks(n, m, grid): Calculates the total number of blocks required to construct the structure. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :param grid: A 2D list of integers representing the number of blocks at each position. :return: An integer representing the total number of blocks. total_blocks = 0 for row in grid: total_blocks += sum(row) return total_blocks"},{"question":"You are given an endless 2D grid of rooms, each room has a different cost to enter, represented by a 2D array. You are initially positioned in the top-left room and you need to find a path to the bottom-right room that minimizes the sum of the costs of the rooms along the path. You can move in four possible directions: up, down, left, right. You cannot move diagonally or outside the grid. Write a function to calculate the minimum cost to reach the bottom-right room from the top-left room. Function Signature: ```python def min_cost_path(cost: List[List[int]]) -> int: pass ``` # Input - A 2D list `cost` of integers where `cost[i][j]` represents the cost to enter the room at row `i` and column `j`. The dimensions of the grid are `n` by `m` (1 ≤ n, m ≤ 100). # Output - Return a single integer representing the minimum cost to reach the bottom-right room from the top-left room. # Examples Input: ```python cost = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Output: ```python 7 ``` Input: ```python cost = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ```python 21 ``` # Note In the first example, the path that minimizes the cost is (0,0) → (1,0) → (2,0) → (2,1) → (2,2) with a total cost of 7. In the second example, the path that minimizes the cost is (0,0) → (0,1) → (0,2) → (1,2) → (2,2) with a total cost of 21.","solution":"from typing import List import heapq def min_cost_path(cost: List[List[int]]) -> int: n = len(cost) m = len(cost[0]) # Dijkstra\'s algorithm using priority queue queue = [(cost[0][0], 0, 0)] # (cost, x, y) min_cost = [[float(\'inf\')] * m for _ in range(n)] min_cost[0][0] = cost[0][0] while queue: current_cost, x, y = heapq.heappop(queue) if x == n-1 and y == m-1: return current_cost for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_cost = current_cost + cost[nx][ny] if new_cost < min_cost[nx][ny]: min_cost[nx][ny] = new_cost heapq.heappush(queue, (new_cost, nx, ny)) return min_cost[n-1][m-1]"},{"question":"You are given a series of tasks. Each task has a start time and an end time. Your goal is to determine the maximum number of non-overlapping tasks that can be performed. A task is defined by a pair of integers (start, end) indicating the time it starts and finishes. Two tasks are considered non-overlapping if one task finishes before the other starts. The problem has the following constraints: * 1 ≦ T ≦ 10^5 - The number of tasks. * 1 ≦ start_i < end_i ≦ 10^9 - The start and end times of each task. Input The input is given from Standard Input in the following format: T start_1 end_1 start_2 end_2 : start_T end_T Output Print one integer, the maximum number of non-overlapping tasks that can be performed. Examples Input 3 1 3 2 5 4 6 Output 2 Input 4 1 2 2 3 3 4 4 5 Output 4 Input 5 1 4 2 6 6 8 8 9 3 5 Output 3","solution":"def max_non_overlapping_tasks(tasks): Given a list of tasks with start and end times, returns the maximum number of non-overlapping tasks. # Sort tasks based on the end time tasks.sort(key=lambda x: x[1]) # Initialize count and the end time of the last added task count = 0 end_time = 0 for start, end in tasks: if start >= end_time: count += 1 end_time = end return count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) tasks = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(T)] print(max_non_overlapping_tasks(tasks))"},{"question":"You are given an array of integers where each element appears twice, except for one element that appears exactly once. Your task is to find the element that appears only once. Your solution should have a linear runtime complexity O(n) and use constant space O(1). Input The first line contains a single integer n (1 ≤ n ≤ 10^6) — the number of elements in the array. It is guaranteed that n is odd. The second line contains n integers ai (1 ≤ ai ≤ 10^9) — the elements of the array. Output Print the single integer that appears only once. Example Input 7 4 3 2 4 1 3 2 Output 1","solution":"def find_single_element(arr): Finds the element that appears only once in the array where every other element appears exactly twice. Args: arr (list): A list of integers where each element appears exactly twice except one element. Returns: int: The element that appears only once. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"You are given a tree with `n` nodes, rooted at node 1. Your task is to handle `m` queries. Each query is of one of the following types: 1. `1 x k`: Add `k` to all nodes in the subtree of node `x`. 2. `2 x`: Output the value of node `x`. Initially, all nodes have a value of 0. A tree is a connected acyclic graph. In this problem, we consider a tree rooted at node 1, where each node has exactly one parent except the root node. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100,000) — the number of nodes in the tree and the number of queries respectively. - The second line contains `n-1` integers p2, p3, ..., pn (1 ≤ pi ≤ n) where pi is the parent of the i-th node. - The next `m` lines describe the queries, each of the form `1 x k` (1 ≤ x ≤ n, -10^9 ≤ k ≤ 10^9) or `2 x` (1 ≤ x ≤ n). # Output - For each query of type `2 x`, print the value of node `x`. # Example Input ``` 5 4 1 1 2 2 1 1 5 2 2 1 2 3 2 4 ``` Output ``` 5 8 ``` # Note In the example: - The initial values of all nodes are `[0, 0, 0, 0, 0]`. - After the first query `1 1 5`, the values of all nodes become `[5, 5, 5, 5, 5]`. - The second query `2 2` results in output `5`. - After the third query `1 2 3`, the values of nodes 2, 4, and 5 (subtree of node 2) become `[5, 8, 5, 8, 8]`. - The fourth query `2 4` results in output `8`.","solution":"class TreeValueModifier: def __init__(self, n): self.values = [0] * (n + 1) self.parent = [[] for _ in range(n + 1)] self.adj = [[] for _ in range(n + 1)] def set_parent(self, child, parent): self.parent[child].append(parent) self.adj[parent].append(child) def dfs(self, x, value): Depth-first search to add value to the subtree of node x self.values[x] += value for child in self.adj[x]: self.dfs(child, value) def apply_query_add(self, x, k): self.dfs(x, k) def apply_query_get(self, x): return self.values[x] def solve_tree_queries(n, m, parents, queries): tvm = TreeValueModifier(n) # Setting up the tree structure based on parents array for i in range(2, n + 1): p = parents[i - 2] tvm.set_parent(i, p) result = [] for query in queries: parts = query.split() if parts[0] == \'1\': x, k = int(parts[1]), int(parts[2]) tvm.apply_query_add(x, k) elif parts[0] == \'2\': x = int(parts[1]) result.append(tvm.apply_query_get(x)) return result"},{"question":"The renowned Baker\'s Guild is in search of an optimal way to distribute their special spiced loaves among the local shops. Each shop should receive a distinct number of loaves, and no shop should receive zero loaves. The Guild Master wants to ensure that the distribution maximizes the total satisfaction of all shops, which is determined by the sum of loaves each shop receives. The loaves are arranged in a sequence such that the difference between loaves given to any two successive shops remains the same. However, due to a slight mix-up in their bookkeeping, the exact number of shops was lost. The Guild Master only remembers the total number of loaves and the number of shops is between 1 and the given total number of loaves (both inclusive). Your task is to determine the maximum possible number of loaves that can be distributed to the shops such that each shop receives a distinct positive integer amount of loaves in an arithmetic sequence. Input: First line contains an integer t, the number of test cases. Next t lines contain an integer L, the total number of loaves. Output: For each test case, output the maximum possible total number of loaves that can be distributed. Constraints: 1 ≤ t ≤ 10 1 ≤ L ≤ 1000 Sample Input: 2 10 15 Sample Output: 10 15 Explanation: - In the first test case, distributing 1, 2, 3, and 4 loaves results in total 10 loaves. - In the second test case, distributing 1, 2, 3, 4, and 5 loaves results in total 15 loaves.","solution":"def max_loaves(L): Returns the maximum possible total number of loaves that can be distributed, such that each shop receives a distinct positive integer amount in an arithmetic sequence. loaves = 0 n = 1 while L >= loaves + n: loaves += n n += 1 return loaves def process_test_cases(t, test_cases): results = [] for i in range(t): results.append(max_loaves(test_cases[i])) return results"},{"question":"An educational institution is planning to host an event and needs to distribute N tasks among its volunteers. Each task has a difficulty level and each volunteer has a maximum difficulty level they can handle. Depending on the difficulty levels of available tasks and the volunteers\' abilities, determine if it\'s possible to assign all tasks without exceeding any volunteer\'s limit. You are given an array of N integers representing the difficulty levels of the tasks, and another array of M integers representing the maximum difficulty levels the volunteers can manage. Each task must be assigned to exactly one volunteer, and no volunteer can be assigned more than one task. Write a program to determine if it\'s possible to assign all tasks to the volunteers under the given constraints. Input: First line contains an integer T, the number of test cases. For each test case, the first line contains two integers N (number of tasks) and M (number of volunteers). The second line contains N integers representing the difficulty levels of the tasks. The third line contains M integers representing the maximum difficulty levels the volunteers can handle. Output: For each test case, output \\"POSSIBLE\\" if it is possible to assign all tasks to the volunteers such that no volunteer\'s difficulty level is exceeded. Otherwise, print \\"IMPOSSIBLE\\". Constraints: 1 ≤ T ≤ 50 1 ≤ N, M ≤ 1000 1 ≤ difficulty level ≤ 1000 1 ≤ volunteer\'s maximum difficulty level ≤ 1000 Example: Input: 3 3 3 3 5 7 8 6 4 2 3 2 2 3 2 2 4 2 4 2 3 8 5 5 Output: POSSIBLE IMPOSSIBLE IMPOSSIBLE Explanation: In Test Case 1, we can assign tasks {3, 5, 7} to volunteers with maximum difficulty levels {4, 6, 8} respectively. In Test Case 2, we have more volunteers than tasks, but no volunteer can handle the task with difficulty 2, so it is impossible. In Test Case 3, we have more tasks than volunteers, making it impossible to assign each task to a volunteer without exceeding limits.","solution":"def is_assignment_possible(N, M, tasks, volunteers): Checks if it is possible to assign all tasks to volunteers without exceeding volunteers\' maximum difficulty levels. Args: N (int): Number of tasks. M (int): Number of volunteers. tasks (list of int): Difficulty levels of the tasks. volunteers (list of int): Maximum difficulty levels the volunteers can handle. Returns: str: \\"POSSIBLE\\" if assignment is possible, otherwise \\"IMPOSSIBLE\\". if N > M: return \\"IMPOSSIBLE\\" tasks.sort() volunteers.sort() for i in range(N): if tasks[i] > volunteers[i]: return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\" def task_assignment(T, test_cases): results = [] for case in test_cases: N, M, tasks, volunteers = case result = is_assignment_possible(N, M, tasks, volunteers) results.append(result) return results"},{"question":"You are a treasure hunter exploring a vast forest that can be represented by a grid with m rows and n columns. Each cell in the grid either contains an empty space (represented by \'.\') or an obstacle (represented by \'#\'). There\'s a legend that a treasure is hidden in one of the cells, but the exact location is unknown. You have a special device that can scan a k x k sub-grid of the forest grid and indicate how many cells in that k x k area contain obstacles. However, using the device multiple times is costly in terms of time and energy. Given the forest grid dimensions, the scan device’s dimensions, and the forest layout, your task is to write a program to determine the minimum number of scans required such that every cell in the forest grid is covered at least once by some scan. # Input: - The first line contains three integers m, n, and k (1 ≤ k ≤ m, n ≤ 1000) — the number of rows, the number of columns of the forest grid, and the dimensions of the scanning device. - The next m lines each contain a string of n characters representing the forest grid. Each character is \'.\' or \'#\'. # Output: - Print a single integer, the minimum number of scans required. # Example Input: 5 6 3 ...... .... .#..#. .#.. ...... Output: 4 Input: 4 4 2 ..#. .#.. #..# .#.# Output: 4 # Explanation: In the first example, scanning the sub-grids ending at the bottom-right of cells can cover the complete grid: - Scan sub-grid ending at (3, 3) - Scan sub-grid ending at (3, 6) - Scan sub-grid ending at (5, 3) - Scan sub-grid ending at (5, 6) In the second example, one possible solution involves scanning: - Scan sub-grid ending at (2, 2) - Scan sub-grid ending at (2, 4) - Scan sub-grid ending at (4, 2) - Scan sub-grid ending at (4, 4) Each cell on the forest grid is covered by at least one scan.","solution":"def minimum_scans(m, n, k, forest): Determines the minimum number of scans required to cover the entire forest grid. Parameters: m (int): Number of rows in the forest grid n (int): Number of columns in the forest grid k (int): Dimension of the scanning device (k x k) forest (List[str]): The forest grid layout Returns: int: Minimum number of scans required # Number of scans required along the rows and columns scans_along_rows = (m + k - 1) // k scans_along_cols = (n + k - 1) // k # Total minimum number of scans required total_scans = scans_along_rows * scans_along_cols return total_scans # Example usage: # m, n, k = 5, 6, 3 # forest = [ # \\"......\\", # \\"....\\", # \\".#..#.\\", # \\".#..\\", # \\"......\\" # ] # print(minimum_scans(m, n, k, forest)) # Output: 4"},{"question":"A biologist is researching the migratory patterns of birds in a certain region. She wants to track the flight paths of n birds during a specific period. Each bird has a unique ID from 1 to n. For each bird, there is a sequence representing the positions it visited over time. The biologist wants to determine if it is possible to reorder the visits of the birds such that each bird visits a list of unique locations. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of birds. Each of the next n lines contains a sequence of integers. The i-th line starts with integer mi (1 ≤ mi ≤ 100) — the number of positions visited by the i-th bird, followed by mi integers — the positions visited by the i-th bird. Positions are represented by integers, and each position might be repeated within the same sequence. Output Print \\"YES\\" if it is possible to reorder the visits such that no bird visits the same position more than once, otherwise print \\"NO\\". Examples Input 3 4 1 2 3 1 3 3 4 4 2 5 5 Output NO Input 2 3 1 2 3 3 3 2 1 Output YES Input 4 5 1 2 2 3 3 3 4 4 4 4 1 1 1 1 2 3 3 Output NO Note In the first sample, it is not possible to reorder the visits to avoid repeated positions within the same sequence. Thus, the output is \\"NO\\". In the second sample, the visits can be reordered (for example, bird 1: 1 2 3 and bird 2: 3 2 1) to ensure that each bird visits a list of unique locations. Thus, the output is \\"YES\\". In the third sample, each bird\'s visit list contains repeated positions, so it\'s not possible to reorder them to meet the condition. Hence, the output is \\"NO\\".","solution":"def can_reorder_visits(birds): Determines if it is possible to reorder the visits such that no bird visits the same position more than once. Args: birds (list): A list where each element is a tuple containing the number of positions and the positions themselves. Returns: str: \\"YES\\" if it\'s possible to reorder the visits to have unique positions, otherwise \\"NO\\". for bird in birds: visited_positions = bird[1] if len(visited_positions) != len(set(visited_positions)): return \\"NO\\" return \\"YES\\" # Function to read input in the required format def process_input(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0]) birds = [] for i in range(1, n + 1): line = list(map(int, lines[i].split())) mi = line[0] positions = line[1:] birds.append((mi, positions)) return birds"},{"question":"You are in charge of organizing a warehouse and need to place n boxes in rows such that each row is strictly increasing in width and height. There are two choices for each box - you can place it as is, or you can rotate it 90 degrees, swapping its width and height. The goal is to find out the maximum number of boxes that can be placed in a row under these constraints. Input The first line contains a single integer n (1 ≤ n ≤ 2 * 10^5) — the number of boxes. The next n lines describe the boxes. The i-th of these lines contains two integers w_i and h_i (1 ≤ w_i, h_i ≤ 2 * 10^5), representing the width and height of the i-th box. Output Output a single integer, the maximum number of boxes that can be placed in a row under the given constraints. Examples Input 5 4 6 7 8 6 5 3 4 4 6 Output 3 Input 3 2 3 3 4 5 3 Output 2 Note In the first test case, you can place the boxes in the order of increasing width and height: (3, 4), (4, 6), and (7, 8), rotating the (4, 6) box accordingly. Thus the maximum number of boxes in a valid row is 3. In the second test case, you can place the boxes in the order of increasing width and height: (2, 3), (3, 4). Thus the maximum number of boxes in a valid row is 2.","solution":"def max_boxes_in_row(n, boxes): def can_place(prev, curr): return prev[0] < curr[0] and prev[1] < curr[1] # Each box can either be taken as is or rotated transformed_boxes = [] for w, h in boxes: transformed_boxes.append((min(w, h), max(w, h))) transformed_boxes.sort() dp = [1] * n # Initialize the dp array with 1 for i in range(n): for j in range(i): if can_place(transformed_boxes[j], transformed_boxes[i]): dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Dr. Smith is organizing a science fair where he plans to showcase a collection of unique molecular structures. Each molecular structure is defined by a unique name and a set of P distinctive properties. Each property can be represented as an integer between 0 and M inclusive. Dr. Smith has prepared a list of R molecular structures, each with their respective properties. During the fair, he intends to challenge the participants with multiple queries. In each query, he will provide a set of P properties, and the participants need to identify which molecular structure these properties belong to. If no matching molecular structure exists for the given set of properties, the response should indicate that no such structure exists. Can you help automate the process to ensure that all queries are answered accurately? Input: The first line contains R, P, M, and S, which are the number of molecular structures, the number of properties per structure, the maximum value any property can have, and the number of queries respectively. R lines follow, each containing a string (the name of the molecular structure) followed by P space-separated integers representing the properties of that structure. S lines follow, each containing P space-separated integers, representing a query with a set of properties. Output: For each query, output the name of the corresponding molecular structure. If no such structure exists, output \\"No such molecular structure exists\\" (Quotes are for clarity). Constraints: - 1 ≤ R ≤ 100000 - 1 ≤ P ≤ 6 - 1 ≤ M ≤ 20 - 1 ≤ S ≤ 100000 - 0 ≤ Ai ≤ M (where Ai is any property value) - 1 ≤ Length of Molecular structure\'s name ≤ 15 - The molecular structure names consist of lowercase alphabetical characters only, and no two structures will share the same properties or name. SAMPLE INPUT: 4 4 10 4 methane 1 2 3 4 butane 5 6 7 8 ethane 2 4 6 8 propane 3 5 7 9 2 4 6 8 5 5 5 5 3 5 7 9 1 2 3 4 SAMPLE OUTPUT: ethane No such molecular structure exists propane methane","solution":"def identify_molecular_structures(R, P, M, S, structures, queries): structure_dict = {} # Reading and storing molecular structures in a dictionary for structure in structures: name = structure[0] properties = tuple(map(int, structure[1:])) structure_dict[properties] = name results = [] # Processing each query for query in queries: properties = tuple(map(int, query)) if properties in structure_dict: results.append(structure_dict[properties]) else: results.append(\\"No such molecular structure exists\\") return results # Example input R = 4 P = 4 M = 10 S = 4 structures = [ [\\"methane\\", 1, 2, 3, 4], [\\"butane\\", 5, 6, 7, 8], [\\"ethane\\", 2, 4, 6, 8], [\\"propane\\", 3, 5, 7, 9] ] queries = [ [2, 4, 6, 8], [5, 5, 5, 5], [3, 5, 7, 9], [1, 2, 3, 4] ] # Displaying the results results = identify_molecular_structures(R, P, M, S, structures, queries) for result in results: print(result)"},{"question":"In a remote village, there is a rectangular farm represented as an `n x m` grid. Each cell in the grid can either contain a crop (represented by a 1) or be empty (represented by a 0). A farmer wants to grow as many crops as possible in contiguous blocks only and fence them together as a large plot. Contiguous blocks are cells containing crops that are adjacent in either horizontal or vertical direction but not diagonal. The farmer has a particular interest in the largest contiguous block of crops on the farm. Help the farmer by finding the size of the largest contiguous block of crops in the `n x m` grid. # Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) representing the dimensions of the farm. Each of the next `n` lines contains `m` integers (either 0 or 1) separated by spaces, representing the grid itself. # Output Print a single integer representing the size of the largest contiguous block of crops. # Examples Example 1 **Input:** ``` 4 5 1 0 0 1 0 1 1 0 1 1 0 1 0 0 0 1 0 0 0 1 ``` **Output:** ``` 4 ``` Example 2 **Input:** ``` 3 3 1 1 0 0 1 0 1 0 1 ``` **Output:** ``` 3 ``` # Note - In the first example, the largest contiguous block of crops (represented as 1s) is of size 4, located in the second row and second and third columns. - In the second example, the largest block contains three crops connected vertically between the first and second rows.","solution":"def largest_contiguous_block(n, m, grid): def dfs(x, y): # Check boundaries if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == 0: return 0 # Mark visited grid[x][y] = 0 # Initialize block size count size = 1 # Explore all four directions size += dfs(x + 1, y) # Down size += dfs(x - 1, y) # Up size += dfs(x, y + 1) # Right size += dfs(x, y - 1) # Left return size max_block_size = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: current_block_size = dfs(i, j) if current_block_size > max_block_size: max_block_size = current_block_size return max_block_size"},{"question":"Autonomous Robotics Corporation (ARC) is developing a fleet of autonomous delivery drones. Each drone has a unique route that it must follow to deliver packages. However, due to limited battery capacity, each drone can only travel a certain maximum distance before it needs to recharge. The company wants to ensure that drones are traveling efficiently and within their distance capacities. You are given the following: - The total number of drones, `n`. - For each drone, a list of distances in kilometers that represent its daily routes over a week (7 days). Your task is to determine if each drone can complete its weekly routes without exceeding its maximum distance capacity for any single day. If a drone cannot complete any of its daily routes within its capacity, you must report which day it fails. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100) representing the number of drones. - The next `n` lines, each containing eight integers. The first integer of each line represents the maximum distance capacity for the drone (1 ≤ capacity ≤ 1000) and the next seven integers represent the distances of daily routes for the week (1 ≤ distance ≤ 1000). Output: - For each drone, output a string `Drone i: OK` if the drone can complete all its daily routes within its capacity, otherwise output `Drone i: FAIL on day j` where `i` is the drone number (starting from 1) and `j` is the day on which it first fails (1 for Monday, 7 for Sunday). Examples: Input: 2 500 100 200 300 400 500 600 700 800 600 100 200 300 400 500 450 600 350 Output: Drone 1: FAIL on day 3 Drone 2: OK In the first example, the first drone fails on day 3 since the distance (300 km) exceeds its capacity (500 km). The second drone completes all its routes without exceeding its capacity.","solution":"def check_drones_distances(drones): results = [] for i, drone_data in enumerate(drones): capacity = drone_data[0] distances = drone_data[1:] for day, distance in enumerate(distances): if distance > capacity: results.append(f\\"Drone {i + 1}: FAIL on day {day + 1}\\") break else: results.append(f\\"Drone {i + 1}: OK\\") return results"},{"question":"An online shopping platform offers a special discount system for items based on their usage history. A user can view the history of their purchases and based on this they receive a discount on the next item they plan to buy. The discount is calculated based on the most frequent price they have paid for an item previously. If there is a tie, the user receives the discount based on the higher price. The platform logs each purchase with the price the user paid for each item. Your task is to help users find out their discount. To do this, you need to write a function to compute the discount a user gets for their next purchase based on their purchase history. Input The first line of input contains a single integer t (1 ≤ t ≤ 100) — the number of users. The description of t users\' data sets follows. Each data set starts with an integer n (1 ≤ n ≤ 1000) — the number of items that the user has purchased. The next line contains n integers separated by spaces, p1, p2, ..., pn (1 ≤ pi ≤ 10000) — the prices paid for each of the purchased items. Output For each user, print a single integer representing the discount they will receive for their next item. Examples Input 3 5 100 200 100 300 200 4 500 500 200 200 3 700 800 900 Output 200 500 900 Note In the first data set of the sample, the user has purchased items at prices [100, 200, 100, 300, 200]. The most frequent price paid is 100 and 200 which both appear twice. Since there is a tie, the user will get a discount based on the higher price which is 200. In the second data set, the user has purchased items at prices [500, 500, 200, 200]. The most frequent price paid is 500 and 200 which both appear twice. The user will get a discount based on the higher price which is 500. In the third data set, all prices are unique. The highest price is 900, so the discount will be based on 900.","solution":"def calculate_discount(t, user_data): Calculate the discount for each user based on their purchase history. Args: t (int): Number of users. user_data (list of tuples): Each tuple contains the number of purchases and the list of purchase prices for one user. Returns: list: List of discounts for each user. discounts = [] for i in range(t): n, prices = user_data[i] frequency = {} # Calculate the frequency of each price for price in prices: if price in frequency: frequency[price] += 1 else: frequency[price] = 1 # Find the price with the highest frequency max_frequency = max(frequency.values()) most_frequent_prices = [price for price, freq in frequency.items() if freq == max_frequency] # The discount is the highest price among the most frequent prices discount = max(most_frequent_prices) discounts.append(discount) return discounts"},{"question":"You are given a list of integers that represent the heights of a row of skyscrapers. Your task is to determine the maximum number of consecutive skyscrapers that have non-decreasing heights. For example, if the heights of skyscrapers are [1, 2, 2, 1, 3, 4, 1], the answer would be 4, corresponding to the sequence [1, 3, 4]. Write a function `max_consecutive_non_decreasing(heights)` that takes a list of integers `heights` as input and returns an integer representing the maximum number of consecutive non-decreasing skyscrapers. INPUT: A single list containing integers that represent the heights of the skyscrapers. OUTPUT: A single integer which is the maximum number of non-decreasing consecutive skyscrapers. Constraints: 1 ≤ len(heights) ≤ 100000 1 ≤ heights[i] ≤ 1000 SAMPLE INPUT: [1, 2, 2, 1, 3, 4, 1] SAMPLE OUTPUT: 4 Explanation: The longest sequence of non-decreasing heights is [1, 2, 2] or [1, 3, 4], both with a length of 3. Thus, the function returns 3.","solution":"def max_consecutive_non_decreasing(heights): Given a list of integers representing the heights of skyscrapers, this function returns the maximum number of consecutive buildings that have non-decreasing heights. if not heights: return 0 max_length = 1 current_length = 1 for i in range(1, len(heights)): if heights[i] >= heights[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"A company needs to monitor their inventory levels by tracking incoming shipments and outgoing orders. Each inventory item is identified by a unique string identifier. You are tasked with writing a program that will process a series of inventory transactions and report the final stock levels for each item. Input The first line of input contains a single integer N, the number of transactions. The following N lines each contain a transaction. Each transaction is represented by a string identifier followed by an integer quantity. A positive quantity indicates an incoming shipment, while a negative quantity represents an outgoing order. Output For each unique item identifier, print the final stock level in the format \\"identifier: quantity\\". Output should be sorted lexicographically by the identifier. Example Input: 5 apples 10 bananas 5 apples -3 oranges 12 apples 7 Output: apples: 14 bananas: 5 oranges: 12","solution":"def process_inventory_transactions(n, transactions): Processes a series of inventory transactions and returns the final stock levels for each item. :param n: Number of transactions :param transactions: List of transaction strings in the format \\"identifier quantity\\" :return: List of strings in the format \\"identifier: quantity\\" sorted lexicographically by the identifier inventory = {} for transaction in transactions: parts = transaction.split() identifier = parts[0] quantity = int(parts[1]) if identifier in inventory: inventory[identifier] += quantity else: inventory[identifier] = quantity result = [f\\"{key}: {inventory[key]}\\" for key in sorted(inventory.keys())] return result # Example usage: # transactions = [\\"apples 10\\", \\"bananas 5\\", \\"apples -3\\", \\"oranges 12\\", \\"apples 7\\"] # print(process_inventory_transactions(5, transactions))"},{"question":"Write a function `find_missing_integers` that takes as input a list of integers from 1 to `n` (with some integers possibly missing) and returns a sorted list of the missing integers. The function should have a time complexity better than O(n log n). # Example Input: ```python n = 10 nums = [1, 2, 3, 5, 6, 8, 9, 10] ``` Output: ```python [4, 7] ``` Input: ```python n = 5 nums = [1, 5] ``` Output: ```python [2, 3, 4] ``` # Constraints: - The input list `nums` will not contain duplicates. - The length of `nums` will be less than or equal to `n`. - Each integer in `nums` will be within the range from 1 to `n`.","solution":"def find_missing_integers(n, nums): Finds the missing integers in a list of integers from 1 to n. Args: n : int : The maximum integer in the range from 1 to n. nums : list : The list of integers from 1 to n with some missing ones. Returns: list : Sorted list of missing integers. all_numbers_set = set(range(1, n+1)) nums_set = set(nums) missing_numbers = list(all_numbers_set - nums_set) missing_numbers.sort() return missing_numbers"},{"question":"A company is organizing a raffle in which the participants are assigned tickets with numbers. They want to ensure that a ticket number is not repeated in any subsequent raffles. You are given a list of ticket numbers for n participants in the first raffle of the day. For each subsequent raffle, you need to identify the smallest ticket number that is not yet assigned to any participant. The ticket numbers start from 1 and increase sequentially. Input The first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. For each test case: - The first line contains one integer n (1 ≤ n ≤ 1000) — the number of participants in the first raffle. - The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the ticket numbers assigned to the participants in the first raffle. Output For each test case, print the smallest positive ticket number that is not assigned to any participant. Example Input 3 5 1 2 3 4 5 5 3 4 5 6 10 3 9 8 7 Output 6 1 1 Note In the first example, all ticket numbers from 1 to 5 are assigned, so the smallest not assigned ticket number is 6. In the second example, the smallest not assigned ticket number is 1, as it is not included in the list. In the third example, the smallest not assigned ticket number is also 1, as it is not included in the list.","solution":"def find_smallest_missing_ticket(t, test_cases): results = [] for case in test_cases: n, ticket_numbers = case ticket_set = set(ticket_numbers) i = 1 while i in ticket_set: i += 1 results.append(i) return results"},{"question":"You are given a string consisting of characters \'a\' and \'b\' only. You are allowed to perform at most one move where you can remove an arbitrary contiguous substring consisting of \'a\'s from the string. Afterward, you concatenate the remaining parts of the string. Your task is to find the minimum possible length of the string after performing this operation at most once. Input The first line contains a single integer t (1 ≤ t ≤ 10^5), the number of test cases. Each of the next t lines contains a string consisting of characters \'a\' and \'b\' only. The length of each string is between 1 and 10^5 inclusive. The total length of all strings does not exceed 10^6. Output For each test case, output a single integer, the minimum possible length of the string after removing at most one contiguous substring of \'a\'s. Examples Input 3 ab aaa aabab Output 1 0 3 Explanation In the first example, removing \'a\' results in \\"b\\" which has length 1. In the second example, removing the entire string yields an empty string which has length 0. In the third example, you can remove \'aa\' from the middle resulting in \\"bb\\" having a length of 3.","solution":"def min_length_after_removal(t, test_cases): results = [] for s in test_cases: if \'a\' not in s: results.append(len(s)) else: count_of_b = s.count(\'b\') results.append(count_of_b) return results"},{"question":"Two scientists, Dr. Xavier and Dr. Yara, are collaborating on a special experiment. They are using a computer simulation that involves prime numbers and dynamic arrays. The experiment starts with an empty list, and the scientists take turns adding elements to this list. Dr. Xavier always adds the smallest prime number that hasn\'t been added before, and Dr. Yara always adds the next smallest prime number that hasn\'t been added before. They alternate turns starting with Dr. Xavier. During the experiment, the scientists want to know the product of all prime numbers added to the list after a specific number of turns. To make things more challenging, they ask you to provide the result modulo 10^9 + 7. Given the number of turns, determine the product of the prime numbers added to the list modulo 10^9 + 7. Input The first line contains a single integer T (1 ≤ T ≤ 100): the number of scenarios. Each of the next T lines contains a single integer k (1 ≤ k ≤ 10^5): the number of turns. Output For each scenario, output the product of the prime numbers added to the list after k turns modulo 10^9 + 7. Example Input 2 3 4 Output 30 210 Explanation For k = 3: The list after 3 turns is [2, 3, 5]. The product is 2 * 3 * 5 = 30. For k = 4: The list after 4 turns is [2, 3, 5, 7]. The product is 2 * 3 * 5 * 7 = 210.","solution":"def generate_primes_upto(n): Generates all prime numbers up to n using the Sieve of Eratosthenes. is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, n + 1) if is_prime[p]] return primes def product_of_primes(k): Returns the product of the first k prime numbers modulo 10^9 + 7. MOD = 10**9 + 7 # We need to make sure that we generate enough primes max_approx = k * (1.5 * (k * 2)) primes = generate_primes_upto(int(max_approx)) product = 1 for i in range(k): product = (product * primes[i]) % MOD return product def primes_product_for_turns(turns): results = [] for k in turns: results.append(product_of_primes(k)) return results # Function to read input def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) turns = [int(data[i]) for i in range(1, T + 1)] results = primes_product_for_turns(turns) for result in results: print(result)"},{"question":"You are given a list of n tasks, each with a specific duration and a deadline. Your objective is to determine the maximum number of tasks that can be completed before their respective deadlines. A task is said to be completed before its deadline if the cumulative time spent on all tasks performed before this task does not exceed the deadline of this task. Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of tasks. - Each of the next n lines contains two space-separated integers: the duration of the task and its deadline (both integers in the range [1, 1000]). Output Print a single integer — the maximum number of tasks that can be completed before their respective deadlines. Examples Input 5 3 10 1 3 2 6 5 5 4 8 Output 4 Input 3 2 2 1 5 2 10 Output 3 Note In the first sample, you can complete the tasks in the following order: 1. Complete task with duration 1 and deadline 3. 2. Complete task with duration 2 and deadline 6. 3. Complete task with duration 3 and deadline 10. 4. Complete task with duration 4 and deadline 8. This way, you complete 4 tasks before their respective deadlines. Task with duration 5 and deadline 5 cannot be completed before its deadline in this scenario. In the second sample, you can complete all tasks as the sum of their durations (2 + 1 + 2) does not exceed any of their deadlines.","solution":"def max_tasks(n, tasks): Determines the maximum number of tasks that can be completed before their respective deadlines. Parameters: n (int): The number of tasks. tasks (list of tuples): A list of tuples where each tuple contains two integers, the duration and the deadline of the task. Returns: int: The maximum number of tasks that can be completed before their respective deadlines. # Sort tasks by deadline, breaking ties by shorter duration first tasks.sort(key=lambda x: (x[1], x[0])) current_time = 0 count = 0 for duration, deadline in tasks: if current_time + duration <= deadline: current_time += duration count += 1 return count"},{"question":"Alice has an integer array and she can perform the following operation any number of times: - Choose two indices i and j (1 ≤ i < j ≤ n) such that a[i] < a[j] and increment both a[i] and a[j] by 1. She wants to know the maximum number of operations she can perform on the array. Constraints: - 2 ≤ n ≤ 10^5 - 1 ≤ a[i] ≤ 10^9 Input The input is given from Standard Input in the following format: ``` n a_1 a_2 ... a_n ``` Output Print a single integer representing the maximum number of operations she can perform. Example Input ``` 4 1 2 3 4 ``` Output ``` 6 ``` Input ``` 5 1 5 5 5 5 ``` Output ``` 4 ``` Input ``` 3 3 3 3 ``` Output ``` 0 ```","solution":"def max_operations(n, a): Returns the maximum number of operations that can be performed on the array. operations = 0 # Iterate through the array for i in range(n - 1): for j in range(i + 1, n): if a[i] < a[j]: operations += 1 return operations"},{"question":"You are given N distinct integers, where each integer represents the score of a game played by different players in a tournament. The final standing of the players is determined based on their scores, in descending order, meaning the higher the score, the higher the rank. If two players have the same score, they share the same rank. Given the scores, can you determine the rank of each player efficiently? Constraints * 1 leq N leq 100000 * 0 leq score_i leq 10^9 * All scores are integers. Input The input is given from Standard Input in the following format: N score_1 score_2 … score_N Output Print the ranks of the players in the same order as their scores are provided in the input, with each rank on a new line. Examples Input 5 50 30 50 20 30 Output 1 3 1 5 3 Input 3 70 70 100 Output 2 2 1 Input 4 40 40 40 40 Output 1 1 1 1","solution":"def calculate_ranks(scores): Given a list of scores, return the ranks of the players in the same order as their scores are provided. :param scores: List of integers representing the scores. :return: List of integers representing the ranks. # Create a list of tuples containing the original index and the score indexed_scores = list(enumerate(scores)) # Sort the list of tuples based on scores in descending order indexed_scores.sort(key=lambda x: x[1], reverse=True) # Initialize ranks array with the same size as scores ranks = [0] * len(scores) # Initialize the first rank rank = 1 for i, (original_idx, score) in enumerate(indexed_scores): # If it\'s not the first score and the current score is different from the previous one, # update the rank to the current position + 1 (1-based index) if i > 0 and score != indexed_scores[i-1][1]: rank = i + 1 # Assign the calculated rank to the original index position ranks[original_idx] = rank return ranks"},{"question":"Lucas wants to create a unique identifier for each user in his system. Each identifier is created by combining the first letter of the user\'s first name, the first letter of the user\'s last name, and the user\'s date of birth in the format YYYYMMDD. If the user has a middle name, the first letter of the middle name is included between the first and last name\'s initials. Write a function that takes the first name, middle name (if any), last name, and date of birth in the format YYYY-MM-DD, and generates the identifier. # Input - The first line contains a string representing the first name. - The second line contains a string representing the last name. - The third line contains a string representing the date of birth in the format YYYY-MM-DD. - The fourth line contains a string representing the middle name (if any). If the user does not have a middle name, this line will be the string \\"NONE\\". # Output - Output one string which is the unique user identifier. # Example Input Alice Smith 1990-06-15 NONE Output AS19900615 Input John Doe 1985-12-04 James Output JJD19851204","solution":"def generate_identifier(first_name, last_name, dob, middle_name=\\"NONE\\"): Generate a unique identifier based on user\'s name and date of birth. :param first_name: str, user\'s first name :param last_name: str, user\'s last name :param dob: str, user\'s date of birth in the format YYYY-MM-DD :param middle_name: str, user\'s middle name or \\"NONE\\" :return: str, unique identifier identifier = first_name[0] if middle_name != \\"NONE\\": identifier += middle_name[0] identifier += last_name[0] identifier += dob.replace(\\"-\\", \\"\\") return identifier # Example usage: # print(generate_identifier(\'Alice\', \'Smith\', \'1990-06-15\')) # Output: \'AS19900615\' # print(generate_identifier(\'John\', \'Doe\', \'1985-12-04\', \'James\')) # Output: \'JJD19851204\'"},{"question":"Alices and Bob are playing a game with arrays. Alice gives Bob an array of integers. Bob\'s task is to find the length of the longest contiguous subarray that contains only distinct elements. Input: The first line of the input contains a single integer T, the number of test cases. The description of T test cases follows. Each test case consists of two lines: - The first line contains an integer N, the length of the array. - The second line contains N integers, the elements of the array. Output: For each test case, output the length of the longest contiguous subarray that contains only distinct elements. Constraints: 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^5 0 ≤ A[i] < 10^6 Sample Input: 2 5 1 2 3 1 4 6 4 5 6 5 6 7 Sample Output: 4 3 Explanation: Test case 1: The longest contiguous subarray with distinct elements is [2, 3, 1, 4], which has length 4. Test case 2: There are two longest contiguous subarrays with distinct elements: [4, 5, 6] and [5, 6, 7], both of which have length 3.","solution":"def longest_subarray_distinct(arr): This function returns the length of the longest contiguous subarray that contains only distinct elements. n = len(arr) max_len = 0 start = 0 seen = {} for end in range(n): if arr[end] in seen: start = max(start, seen[arr[end]] + 1) seen[arr[end]] = end max_len = max(max_len, end - start + 1) return max_len def process_test_cases(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) results = [] index = 1 for _ in range(T): N = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].split())) index += 2 results.append(longest_subarray_distinct(arr)) return results"},{"question":"Alice is participating in a treasure hunt. She has a map that consists of a grid with `n` rows and `m` columns. Each cell in the grid contains either a treasure (\'T\') or an obstacle (\'#\'). Alice can move up, down, left, or right, but cannot move through obstacles. Alice wants to find the shortest path from the top-left corner of the grid (0, 0) to the bottom-right corner (n-1, m-1) without passing through any obstacles. If it is not possible to reach the bottom-right corner, Alice needs to know that as well. Write a program that calculates the minimum number of steps Alice needs to reach her destination or determines if it is impossible. Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid respectively. - The next `n` lines each contain a string of length `m` consisting of characters \'T\' (treasure) and \'#\' (obstacle). Output - Output a single integer representing the minimum number of steps to reach the bottom-right corner. If it is impossible to reach the destination, output `-1`. Examples # Input ``` 3 4 TT T#T# TTTT ``` # Output ``` 5 ``` # Input ``` 4 4 T #T# #T# ``` # Output ``` -1 ``` # Note In the first example, Alice can follow the path `(0,0)->(0,3)->(2,3)` requiring 5 steps (including the initial and final positions). In the second example, there is no way to reach the bottom-right corner so the output is `-1`.","solution":"from collections import deque def min_steps_to_treasure(n, m, grid): # Directions arrays for moving up, down, left and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Function to check if a position is valid and not an obstacle def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'T\' # BFS to find the shortest path queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() # If we reached the bottom-right corner if x == n - 1 and y == m - 1: return steps # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) # If no path found, return -1 return -1"},{"question":"A company is organizing a contest where participants have to quickly convert given matrices in specific ways. One of the tasks they need your help with is transposing a matrix followed by reversing the rows of the resulting matrix. Given an m x n matrix, the transpose of the matrix is another m x n matrix where the rows are changed to columns and vice versa. After transposing, the task is to reverse each row of the transposed matrix. Write a function `transpose_and_reverse(matrix)` that takes a matrix represented as a list of lists of integers and performs the transposition followed by the row reversals. # Input - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100), representing the number of rows and columns of the matrix. - The next `m` lines each contain `n` integers, where the j-th integer in the i-th line represents the element at position (i, j) of the matrix. # Output - Print the resulting matrix after transposing and reversing each row. Each row of the matrix should be printed in a new line with space-separated integers. # Example Input ``` 2 3 1 2 3 4 5 6 ``` Output ``` 4 1 5 2 6 3 ``` Input ``` 3 2 1 2 3 4 5 6 ``` Output ``` 5 3 1 6 4 2 ``` # Note In the first example, the original matrix is: ``` 1 2 3 4 5 6 ``` Transposing it gives: ``` 1 4 2 5 3 6 ``` Reversing each row of the transposed matrix gives the final result: ``` 4 1 5 2 6 3 ``` In the second example, the original matrix is: ``` 1 2 3 4 5 6 ``` Transposing it gives: ``` 1 3 5 2 4 6 ``` Reversing each row of the transposed matrix gives: ``` 5 3 1 6 4 2 ```","solution":"def transpose_and_reverse(matrix): Transpose the given matrix and then reverse each row of the resulting matrix. :param matrix: List of lists of integers representing the matrix. :return: List of lists of integers representing the transposed and reversed matrix. # Transpose the matrix transposed_matrix = list(zip(*matrix)) # Reverse each row of the transposed matrix result_matrix = [list(row)[::-1] for row in transposed_matrix] return result_matrix"},{"question":"You are given a list of robot commands to navigate a grid. The robot can move up, down, left, and right. Each command consists of a direction (\'U\' for up, \'D\' for down, \'L\' for left, \'R\' for right) followed by a number representing the steps in that direction. The grid is boundless, and the robot starts at the origin point (0, 0). Write a program that determines the final position of the robot after all the commands have been executed. Input The first line contains an integer `T` (1 ≤ T ≤ 100), the number of test cases. Each test case consists of: - A single integer `N` (1 ≤ N ≤ 1000) denoting the number of commands. - The next `N` lines each contain a command in the format \'DIRECTION STEPS\' (e.g. \'R 10\') where \'DIRECTION\' is a character (\'U\', \'D\', \'L\', \'R\') and \'STEPS\' is an integer (1 ≤ STEPS ≤ 1000). Output For each test case, output the final position of the robot as two space-separated integers representing the x and y coordinates. Example Input 3 3 R 3 U 2 L 1 4 R 1 R 2 D 1 U 3 2 L 5 D 3 Output 2 2 3 2 -5 -3 Explanation In the first test case, the robot moves as follows: - R 3: to (3, 0) - U 2: to (3, 2) - L 1: to (2, 2) In the second test case, the robot moves as follows: - R 1: to (1, 0) - R 2: to (3, 0) - D 1: to (3, -1) - U 3: to (3, 2) In the third test case, the robot moves as follows: - L 5: to (-5, 0) - D 3: to (-5, -3)","solution":"def robot_final_position(T, test_cases): results = [] for case in test_cases: x, y = 0, 0 for command in case: direction, steps = command.split() steps = int(steps) if direction == \'U\': y += steps elif direction == \'D\': y -= steps elif direction == \'L\': x -= steps elif direction == \'R\': x += steps results.append(f\\"{x} {y}\\") return results"},{"question":"In a distant land, the people use a unique numbering system called \\"Dense Binary.\\" In Dense Binary format, standard binary digits (\'0\' and \'1\') are retained, but sequences of the same binary digit are collapsed into a single instance. For example, the binary number `11110000` would be represented in Dense Binary as `10`. Your task is to write a function that converts a given integer into its Dense Binary equivalent. Input An integer n (1 <= n <= 10^5) on a single line. Output A single string representing the Dense Binary format of the given integer. Example Input: 12 Output: 10 Explanation: - The binary representation of 12 is `1100`. - In Dense Binary, `1100` is collapsed to `10` since the sequences `11` and `00` are replaced by single instances of `1` and `0`.","solution":"def to_dense_binary(n): Converts a given integer to its Dense Binary equivalent. Parameters: n (int): The integer to be converted (1 <= n <= 100000). Returns: str: The Dense Binary representation of the given integer. # Convert the integer to its binary representation binary_representation = bin(n)[2:] # Initialize result list with the first binary digit dense_binary = [binary_representation[0]] # Iterate through the binary representation starting from the second character for char in binary_representation[1:]: if char != dense_binary[-1]: dense_binary.append(char) # Join the list into a single string and return return \'\'.join(dense_binary)"},{"question":"You are a software engineer at a logistics company. Your company is developing a system to manage shipments between different cities. Each city is represented by a distinct node, and roads between cities are represented by directed edges with different travel times. You have been tasked to implement a feature that determines the shortest time required to deliver a shipment from one city to another. The system should support the following types of operations: 1. Add a direct road from city u to city v with a travel time of t. 2. Remove the existing direct road from city u to city v. 3. Query the shortest travel time from city s to city d. If there\'s no path from city s to city d, return -1. Input The first line contains two integers, n and q (1 ≤ n ≤ 100, 1 ≤ q ≤ 1000) — the number of cities and the number of queries. The next q lines describe the queries and are given in one of the following formats: * \\"1 u v t\\" (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000) - Add a direct road from city u to city v with a travel time of t. * \\"2 u v\\" (1 ≤ u, v ≤ n) - Remove the direct road from city u to city v. * \\"3 s d\\" (1 ≤ s, d ≤ n) - Query the shortest travel time from city s to city d. Each query operation in the input will be valid. Output For each query of type 3, print the shortest travel time from city s to city d. If there\'s no path, print -1 instead. Examples Input 4 6 1 1 2 5 1 2 3 2 1 3 4 3 3 1 4 2 2 3 3 1 4 Output 10 -1","solution":"import heapq class CityGraph: def __init__(self, n): self.n = n self.graph = {i: {} for i in range(1, n + 1)} def add_road(self, u, v, t): self.graph[u][v] = t def remove_road(self, u, v): if v in self.graph[u]: del self.graph[u][v] def shortest_travel_time(self, s, d): INF = float(\'inf\') distances = {i: INF for i in range(1, self.n + 1)} distances[s] = 0 queue = [(0, s)] while queue: curr_dist, u = heapq.heappop(queue) if curr_dist > distances[u]: continue for v, length in self.graph[u].items(): distance = curr_dist + length if distance < distances[v]: distances[v] = distance heapq.heappush(queue, (distance, v)) return distances[d] if distances[d] != INF else -1 def handle_queries(n, queries): city_graph = CityGraph(n) results = [] for query in queries: parts = query.split() op_type = int(parts[0]) if op_type == 1: u, v, t = map(int, parts[1:]) city_graph.add_road(u, v, t) elif op_type == 2: u, v = map(int, parts[1:]) city_graph.remove_road(u, v) elif op_type == 3: s, d = map(int, parts[1:]) results.append(city_graph.shortest_travel_time(s, d)) return results"},{"question":"Given an integer n, you are asked to find the smallest positive integer k such that the sum of k consecutive positive integers starting from 1 is greater than or equal to n, and the difference between the largest and smallest numbers in this sequence is maximized. Input The first line contains a single integer t (1 ≤ t ≤ 3000) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 1000000). Output For each test case, print one integer k — the smallest positive integer such that the sum of k consecutive positive integers starting from 1 is greater than or equal to n, and the difference between the largest and smallest numbers (in this sequence) is maximized. Example Input 2 10 20 Output 4 6 Note In the first test case for n=10, the smallest series is {1, 2, 3, 4}. The sum is 10 and the difference between the largest and smallest numbers is 3. In the second test case for n=20, the smallest series is {1, 2, 3, 4, 5, 6}. The sum is 21, which is greater than 20, and the difference between the largest and smallest numbers is 5.","solution":"import math def smallest_k(n): Returns the smallest positive integer k such that the sum of k consecutive positive integers starting from 1 is greater than or equal to n. # Using the formula for the sum of the first k natural numbers: sum = k * (k + 1) / 2 # We need to find the smallest k such that k * (k + 1) / 2 >= n k = int((math.sqrt(8 * n + 1) - 1) / 2) if k * (k + 1) // 2 >= n: return k else: return k + 1 def process_test_cases(test_cases): results = [] for n in test_cases: results.append(smallest_k(n)) return results"},{"question":"The villagers of Hobbiton have a peculiar way of celebrating the annual harvest festival. One of their favorite games involves selecting a subarray from a long array of integers and finding the maximum possible sum of its contiguous subarray (subarray in which the elements occupy consecutive positions). Due to the magical nature of the game, the villagers would like to know beforehand what the maximum possible sum would be, so they can strategize for the game. Given an array of integers, write a program to find the maximum sum of a contiguous subarray and return that sum for each test case. Input The first line contains an integer T, representing the number of test cases. Each of the next T sections begins with an integer N, the number of elements in the array, followed by N integers representing the elements of the array. Output For each test case, output a single integer which is the maximum sum of the contiguous subarray. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 -1000 ≤ Array elements ≤ 1000 SAMPLE INPUT 2 5 1 2 3 -2 5 8 -1 -2 -3 -4 -5 -6 -7 -8 SAMPLE OUTPUT 9 -1","solution":"def max_subarray_sum(arr): Returns the maximum sum of the contiguous subarray for the given array. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] array = test_cases[i][1] results.append(max_subarray_sum(array)) return results"},{"question":"Alice is organizing a coding contest and she wants to allocate rooms for the participants. Each room can accommodate up to a certain number of participants. Given the list of room capacities and the number of participants registered for the contest, help Alice find out if it is possible to place all participants in the rooms according to the capacities provided. Input The first line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100) — the number of rooms and the number of participants respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), where a_i represents the capacity of the i-th room. Output Print \\"YES\\" if it is possible to place all participants in the rooms. Otherwise, print \\"NO\\". Examples Input 3 20 8 7 5 Output YES Input 2 10 3 3 Output NO Explanation In the first example, the total capacity of the rooms is 8 + 7 + 5 = 20, which is exactly enough for 20 participants. In the second example, the total capacity of the rooms is 3 + 3 = 6, which is not sufficient for 10 participants.","solution":"def can_accommodate_all_participants(room_count, participant_count, room_capacities): Determines if all participants can be accommodated in the rooms. :param room_count: int, number of rooms :param participant_count: int, number of participants :param room_capacities: list of int, capacities of each room :returns: str, \\"YES\\" if all participants can be accommodated, \\"NO\\" otherwise total_capacity = sum(room_capacities) if total_capacity >= participant_count: return \\"YES\\" else: return \\"NO\\""},{"question":"A credit card company has introduced a simplified points system to reward their customers based on their monthly purchases. As a developer, your task is to implement a program that calculates the total reward points earned by a customer in a month. Here’s the points system: - For every dollar spent from 0 to 50, the customer earns 1 point per dollar. - For every dollar spent from 51 to 100, the customer earns 1.5 points per dollar. - For every dollar spent above 100, the customer earns 2 points per dollar. Given the total amount spent by a customer in a month, write a program to calculate the total reward points earned. Input: - The input consists of a single integer T, the number of test cases. - For each test case, a line contains an integer S, the total amount spent by the customer in a month. Output: - For each test case, output the total reward points earned by the customer. Constraints: - 1 ≤ T ≤ 1000 - 1 ≤ S ≤ 10000 Example Input: 3 60 120 45 Example Output: 65 160 45 Explanation: - For the first test case, the customer spends 60. - The first 50 earns 50 points. - The remaining 10 earns 1.5 points per dollar, which adds up to 15 points. - Total points = 50 + 15 = 65 - For the second test case, the customer spends 120. - The first 50 earns 50 points. - The next 50 earns 1.5 points per dollar, which adds up to 75 points. - The remaining 20 earns 2 points per dollar, which adds up to 40 points. - Total points = 50 + 75 + 40 = 165 - For the third test case, the customer spends 45. - All 45 earn 1 point per dollar. - Total points = 45","solution":"def calculate_reward_points(spent): if spent <= 50: return spent elif spent <= 100: return 50 + (spent - 50) * 1.5 else: return 50 + 50 * 1.5 + (spent - 100) * 2 def main(): T = int(input().strip()) for _ in range(T): S = int(input().strip()) print(int(calculate_reward_points(S))) if __name__ == \\"__main__\\": main()"},{"question":"Alice loves to play with sequences of numbers. She recently stumbled upon an interesting problem related to operations on sequences and wants you to help her solve it. Here is the problem: Alice has a sequence of integers. She can perform two types of operations on this sequence: 1. **Increment**: Increment any single element of the sequence by 1. 2. **Swap**: Swap any two elements of the sequence. Alice wants to make all elements of the sequence equal using the fewest number of operations. Given the initial sequence, determine the minimum number of operations required to achieve this. Input: The first line contains an integer T (1 ≤ T ≤ 100) representing the number of test cases. Each of the next T lines contains: - An integer N (2 ≤ N ≤ 100), the number of elements in the sequence. - A sequence of N integers a1, a2, ..., aN (1 ≤ ai ≤ 100). Output: For each test case, print a single line containing the minimum number of operations required to make all elements of the sequence equal. Example: Input: 3 5 1 2 3 4 5 4 4 4 4 4 3 10 1 2 Output: 10 0 8 Explanation: 1. In the first test case, Alice can either increment the first element 4 times, the second element 3 times, the third element 2 times, and the fourth element 1 time to make all elements equal to 5. Alternatively, she can make multiple swaps and then perform the necessary increments. The optimal solution involves 10 operations. 2. In the second test case, all elements are already equal, so no operations are needed. 3. In the third test case, Alice needs to make several increments. One possible solution is to make the second element and the third element equal to the first element, which requires 9 increments in total. Then she needs to increment each element 8 more times to make the remaining two equal to the highest. Write a program to help Alice figure out the minimum number of operations required for each test case.","solution":"def min_operations_to_equal_elements(T, test_cases): results = [] for i in range(T): N, sequence = test_cases[i] max_element = max(sequence) operations = sum(max_element - x for x in sequence) results.append(operations) return results"},{"question":"Given an array of integers, you need to find the minimum number of deletions required to make the array a palindrome. A palindrome is a sequence that reads the same backward as forward. Input The input consists of two lines: The first line contains an integer n (1 ≤ n ≤ 10^3) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^3) — the elements of the array. Output Print a single integer — the minimum number of deletions required to make the array a palindrome. Examples Input 5 1 2 3 4 1 Output 2 Input 3 3 3 3 Output 0 Input 7 1 3 4 9 4 3 1 Output 0 Note In the first example, by deleting the elements 2 and 4, the array can be transformed into [1, 3, 4, 1] which is a palindrome. So the minimum number of deletions is 2. In the second example, the array is already a palindrome hence no deletions are required. So the minimum number of deletions is 0. In the third example, the array is [1, 3, 4, 9, 4, 3, 1] which is already a palindrome. So the minimum number of deletions is 0.","solution":"def min_deletions_to_palindrome(arr): Returns the minimum number of deletions required to make the array a palindrome. n = len(arr) # Create a table to store results of subproblems dp = [[0 for x in range(n)] for y in range(n)] # dp[i][j] will be the minimum number of deletions required to make arr[i..j] a palindrome for gap in range(1, n): l = 0 for h in range(gap, n): if arr[l] == arr[h]: dp[l][h] = dp[l + 1][h - 1] else: dp[l][h] = 1 + min(dp[l][h - 1], dp[l + 1][h]) l += 1 # The result is the minimum number of deletions for the whole array return dp[0][n - 1] def main(): # Read input import sys input = sys.stdin.read data = input().split() n = int(data[0]) array = list(map(int, data[1:])) # Get the result result = min_deletions_to_palindrome(array) # Print the result print(result)"},{"question":"You are given a set of N integers. Find the length of the longest contiguous subarray where the difference between the maximum and minimum values in the subarray is less than or equal to a given integer D. INPUT: First line contains N and D Next line contains N spaced integers OUTPUT: Print the length of the longest contiguous subarray meeting the above condition. 0 < N <= 10^5 0 <= D <= 10^5 SAMPLE INPUT 6 3 1 3 6 7 9 2 SAMPLE OUTPUT 3","solution":"def longest_subarray_length(arr, N, D): Finds the length of the longest contiguous subarray where the difference between the maximum and minimum values in the subarray is less than or equal to D. max_len = 0 start = 0 min_val = arr[0] max_val = arr[0] for end in range(N): min_val = min(min_val, arr[end]) max_val = max(max_val, arr[end]) while max_val - min_val > D: start += 1 min_val = min(arr[start:end+1]) max_val = max(arr[start:end+1]) max_len = max(max_len, end - start + 1) return max_len # Drive function to read input and call the core function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) D = int(data[1]) arr = list(map(int, data[2:])) print(longest_subarray_length(arr, N, D))"},{"question":"Tina loves to collect stamps. She has a large collection of stamps from various countries, and she wants to organize them in a grid for display. Being a curious person, Tina wants to group the stamps in such a way that the grid has a \\"H\\" pattern made of special country stamps. The \\"H\\" pattern in a grid of size `n x m` is formed as follows: - The first column (`1, c`) of every nth row should be represented with \'H\' - The middle column (`(n // 2 + 1, c)`) of every nth row should be represented with \'H\' - The last column (`n, c`) of every nth row should be represented with \'H\' - All other cells should be represented with a dot character \'.\' Your task is to help Tina design this grid. Input The only line contains two integers: `n` and `m` (3 ≤ n, m ≤ 50). Output Output an `n x m` grid. Each of the `n` lines should contain a string consisting of `m` characters. Do not output spaces. Examples Input 5 5 Output H...H H...H HHHHH H...H H...H Input 7 7 Output H.....H H.....H H.....H HHHHHHH H.....H H.....H H.....H Input 5 6 Output H....H H....H HHHHHH H....H H....H","solution":"def create_H_pattern(n, m): Creates an n x m grid with an \'H\' pattern. The \'H\' pattern has \'H\' characters at the first, middle, and last columns of each row. All other cells contain a dot character \'.\'. grid = [] for i in range(n): if i == n // 2: grid.append(\'H\' * m) else: row = [\'H\'] + [\'.\'] * (m - 2) + [\'H\'] grid.append(\'\'.join(row)) return grid"},{"question":"In a faraway galaxy, there exists a unique language that contains n different words. The alphabet of this language is quite strange: every word consists of lowercase Latin letters and has a unique length. Two words in this language cannot have the same length. A famous linguist has developed a new encryption scheme specifically for this language. According to this scheme, each word in the language is encoded by rearranging its letters in specific ways. For example, if a word \\"abc\\" gets rearranged to \\"acb\\" or \\"bac,\\" then these rearrangements are considered valid encryptions of the original word. The linguist has been curious to find out if there are any encoded messages that contain the maximum number of different words from this strange language, given that no word appears more than once in the encoded message. Write a program to help the linguist determine the longest possible message that can be encoded from the words in this language. # Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of words in the language. The next n lines each contain a single word consisting of lowercase Latin letters. Each word has a unique length among the given words. # Output On the first line, print an integer k (1 ≤ k ≤ n) — the number of words in the longest possible encoded message. On the second line, print k words in any order such that each word is a valid rearrangement of one of the original words. If there are multiple valid outputs, print any of them. # Examples Input ``` 4 code up longest hello ``` Output ``` 3 cdeo lup tgnloest ``` Note - In the given examples, the words \\"code,\\" \\"up,\\" and \\"longest\\" have been rearranged to \\"cdeo,\\" \\"lup,\\" and \\"tgnloest,\\" respectively, forming one of the longest possible encoded messages. - The word \\"hello\\" is omitted because including it would mean having four words in the message, but since we are limited to the lengths of the words being unique and given n (the maximum number of words), the example only uses three rearranged words for the longest possible message.","solution":"def longest_possible_encoded_message(n, words): This function determines the longest possible encoded message that can be formed from the given words such that no two words in the message have the same length. :param n: The number of words in the language (integer) :param words: A list of words in the language (list of strings) :return: A tuple (k, encoded_message) where k is the number of words in the longest possible message and encoded_message is a list of encoded words (list of strings) # Sort the words by their length words_sorted_by_length = sorted(words, key=len) # Create the encoded message by rearranging the letters of each word encoded_message = [\'\'.join(sorted(word)) for word in words_sorted_by_length] return len(encoded_message), encoded_message # Example usage: # n = 4 # words = [\\"code\\", \\"up\\", \\"longest\\", \\"hello\\"] # k, encoded_message = longest_possible_encoded_message(n, words) # print(k) # Should return 4 # print(encoded_message) # Can return any valid rearrangement of the words"},{"question":"Given an integer `n`, and `n` pairs of integers representing `(a, b)`, where `a` and `b` are integers. You need to determine if there exists a subset of pairs such that when each pair\'s product is computed and summed, the result is zero. If such a subset exists, output \\"YES\\". Otherwise, output \\"NO\\". Each pair can only be used once in the sum, and the subset can be empty which by definition has a sum of zero. Constraints: - 1 ≤ n ≤ 100 - -1000 ≤ a, b ≤ 1000 Input The first line contains one integer `n` — the number of pairs. The next `n` lines contain two integers each — `a` and `b`. Output Print \\"YES\\" if there exists such a subset, otherwise print \\"NO\\". Example Input 3 1 2 -2 3 2 -1 Output YES Note For the example test case, consider the subset with the second and third pairs: `(-2 * 3) + (2 * -1) = -6 + (-2) = -8`. However, if we consider the subset with the first and third pairs: `(1 * 2) + (2 * -1) = 2 + (-2) = 0`, we get a sum of zero. Hence the output should be \\"YES\\".","solution":"def zero_subset_pairs(n, pairs): Determines if there exists a subset of pairs such that the sum of their product is zero. Args: n : int : Number of pairs pairs : list of tuples : List of tuples where each tuple contains two integers Returns: str : \\"YES\\" if such a subset exists, otherwise \\"NO\\" from itertools import combinations # Check all subsets for i in range(1, n+1): for subset in combinations(pairs, i): if sum(a * b for a, b in subset) == 0: return \\"YES\\" return \\"NO\\""},{"question":"Sophia loves collecting crystals, and she has a collection of n crystals each of different sizes. She wants to give her friend a contiguous subarray of crystals such that the sum of their sizes is exactly equal to a given value k. Help Sophia determine whether it is possible to find such a contiguous subarray. Constraints * 1 ≦ n ≦ 100 * 1 ≦ size_i ≦ 100 * 1 ≦ k ≦ 10000 Input The input is given from Standard Input in the following format: n k size_1 size_2 ... size_n Output Print `Yes` if there exists a contiguous subarray with a sum of k. Otherwise, print `No`. Examples Input 5 12 1 2 3 7 5 Output Yes Input 4 15 1 2 3 4 Output No Input 6 21 1 2 3 4 5 6 Output Yes","solution":"def can_find_subarray_with_sum(n, k, sizes): Returns \'Yes\' if there exists a contiguous subarray with a sum equal to k, otherwise returns \'No\'. current_sum = 0 start = 0 for end in range(n): current_sum += sizes[end] while current_sum > k and start <= end: current_sum -= sizes[start] start += 1 if current_sum == k: return \'Yes\' return \'No\' def main(input_str): lines = input_str.strip().split(\'n\') n, k = map(int, lines[0].split()) sizes = list(map(int, lines[1].split())) return can_find_subarray_with_sum(n, k, sizes)"},{"question":"A book club is organizing an event where they will distribute different sets of books to the participants. Each participant should get a unique combination of books based on their preferences. The club has a collection of books labeled with different integers. They want to ensure that every participant gets a bundle of books where no two participants have the same sum of books\' labels. Your task is to help the book club determine the total number of unique bundles of books they can prepare for the event. Write a program that, given a list of book label numbers, calculates the number of unique sums that can be produced by considering all possible non-empty combinations of the given book labels. Input: The first line contains t, the number of test cases. Then, each test case consists of 2 lines: - The first line contains N, the number of books. - The second line contains N space-separated integers representing the book labels. Output: For each test case, print a single integer denoting the number of unique sums that can be formed by any combination of the book labels. Constraints: 1 ≤ t ≤ 20 1 ≤ N ≤ 20 1 ≤ book labels ≤ 100 Example Input: 3 1 5 2 1 2 3 2 3 5 Example Output: 1 3 5 Explanation: Consider the 3rd test case: We have books labeled 2, 3, and 5. Possible sums of combinations are: {2} - Sum = 2 {3} - Sum = 3 {5} - Sum = 5 {2, 3} - Sum = 5 {2, 5} - Sum = 7 {3, 5} - Sum = 8 {2, 3, 5} - Sum = 10 There are 5 unique sums: 2, 3, 5, 7, 8, and 10, out of which 5 is counted twice, therefore the total number of unique sums is 5.","solution":"from itertools import combinations def unique_sums_count(n, book_labels): unique_sums = set() for r in range(1, n + 1): for combination in combinations(book_labels, r): unique_sums.add(sum(combination)) return len(unique_sums) def process_test_cases(test_cases): results = [] for n, book_labels in test_cases: result = unique_sums_count(n, book_labels) results.append(result) return results def main(): t = int(input()) test_cases = [] for _ in range(t): n = int(input()) book_labels = list(map(int, input().split())) test_cases.append((n, book_labels)) results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You own a small startup that builds authentication and authorization systems. To enhance the security, you decide to implement a feature where users\' passwords are evaluated for strength and must meet certain strength criteria before being accepted. Your task is to write a program that evaluates the strength of a given password. The password is considered strong if it meets the following criteria: 1. It has at least 8 characters. 2. It contains at least one uppercase letter. 3. It contains at least one lowercase letter. 4. It contains at least one digit. 5. It contains at least one special character from the set: !@#%^&*()_+-=[]{}|;:\'\\",.<>?/ Implement a function to check if a given password is strong according to the above criteria. Input: The input consists of a single string `password`, where 1 ≤ length of password ≤ 100. Output: Output \\"Strong\\" if the password meets all the criteria, and \\"Weak\\" otherwise. Example Input: Password123! Output: Strong Input: WeakPass Output: Weak Input: 12345678 Output: Weak","solution":"import re def evaluate_password_strength(password): Evaluates the strength of the given password based on the following criteria: 1. It has at least 8 characters. 2. It contains at least one uppercase letter. 3. It contains at least one lowercase letter. 4. It contains at least one digit. 5. It contains at least one special character from the set: !@#%^&*()_+-=[]{}|;:\'\\",.<>?/ Args: password (str): The password to be evaluated. Returns: str: \\"Strong\\" if the password meets all the criteria, and \\"Weak\\" otherwise. if len(password) < 8: return \\"Weak\\" if not re.search(r\'[A-Z]\', password): return \\"Weak\\" if not re.search(r\'[a-z]\', password): return \\"Weak\\" if not re.search(r\'[0-9]\', password): return \\"Weak\\" if not re.search(r\'[!@#%^&*()_+-=[]{}|;:\'\\",.<>?/]\', password): return \\"Weak\\" return \\"Strong\\""},{"question":"Given an unsorted array of unique integers, write a function to find the length of the longest consecutive elements sequence. Your implementation should have a linear runtime complexity. Input The first line of the input contains an integer N, the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. Output Output a single integer representing the length of the longest consecutive elements sequence. Constraints - 1 ≤ N ≤ 100,000 - -10^6 ≤ array elements ≤ 10^6 Examples Input 9 100 4 200 1 3 2 102 101 5 Output 5 Explanation The longest consecutive elements sequence is [1, 2, 3, 4, 5], so its length is 5. Input 7 0 3 7 2 5 8 4 Output 4 Explanation The longest consecutive elements sequence is [2, 3, 4, 5], so its length is 4.","solution":"def longest_consecutive_sequence(arr): Finds the length of the longest consecutive elements sequence. Parameters: arr (list): A list of unique integers. Returns: int: Length of the longest consecutive elements sequence. if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in arr: if num - 1 not in num_set: # Check if it is the start of a sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given a list of n integers representing a sequence of numbers where each number appears exactly twice, except for one number which appears exactly once. Your task is to find the number that appears only once in the array. Input The first line of input contains one integer n (3 ≤ n ≤ 1,000,001): the number of elements in the given sequence, which is always an odd number. The next line of input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1,000,000): the elements of the sequence. Output Output one integer: the number that appears only once in the sequence. Example Input 7 4 2 1 2 1 3 4 Output 3 Note In the given example, the sequence is [4, 2, 1, 2, 1, 3, 4]. The numbers 4, 2, and 1 appear twice, but 3 appears only once. Therefore, the output is 3.","solution":"def find_unique_number(arr): Finds the unique number in the list where every other number appears exactly twice. :param arr: List of integers :return: The integer that appears only once unique_number = 0 for num in arr: unique_number ^= num return unique_number"},{"question":"You are given a sequence of N integer numbers A. You have to find the product of the maximum element and minimum element in the sequence. Input The first line of input consists of the integer N. The second line contains N integer numbers - the sequence A. Output Output the product of the maximum and minimum elements in the sequence on the first line of the output. Example Input: 5 1 3 4 2 5 Output: 5 Scoring Subtask 1 (20 points): N <= 100, Ai <= 10^3. Subtask 2 (30 points): N <= 100, Ai <= 10^5. Subtask 3 (20 points): N <= 10^3, Ai <= 10^5. Subtask 4 (30 points): N <= 10^5, Ai <= 10^9.","solution":"def max_min_product(N, A): Returns the product of the maximum element and minimum element in the sequence A. Parameters: N (int): The number of elements in the sequence A. A (list of int): The sequence of integers. Returns: int: Product of the maximum and minimum elements in the sequence. if N == 0 or not A: return 0 # If the sequence is empty, return 0 as no valid product can be obtained. max_elem = max(A) min_elem = min(A) return max_elem * min_elem"},{"question":"In an ancient city, there are several temples connected by roads. The city has an intricate network of roads in such a way that between any two temples, there can be multiple ways to travel. The city planning department has been given the task to make sure each temple can be reachable by all others directly or indirectly. To optimize the resource distribution for temple maintenance, they have decided to categorize the most central temple. A temple is considered most central if it has the smallest maximum distance to all other temples. If there are multiple temples with the same maximum distance, choose the one with the smallest index. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case is described as follows: The first line contains two integers n and m (1 ≤ n ≤ 200, 0 ≤ m ≤ 10^4) — the number of temples and roads between them. Each of the following m lines contains two integers u, v (1 ≤ u, v ≤ n), which denotes that there is an undirected road between temples u and v. Output For each test case, print the index of the most central temple. Example Input 2 4 4 1 2 2 3 3 4 4 1 3 2 1 2 2 3 Output 1 2 Note In the first test case, the temple 1 has the smallest maximum distance to all other temples, making it the most central temple. In the second test case, both temples 1 and 2 have the smallest maximum distance, but temple 2 has a smaller index, making it the most central temple.","solution":"import heapq def find_most_central_temple(t, test_cases): def dijkstra(graph, start): num_vertices = len(graph) distances = [float(\'inf\')] * num_vertices distances[start] = 0 pq = [(0, start)] while pq: curr_distance, u = heapq.heappop(pq) if curr_distance > distances[u]: continue for neighbor, weight in graph[u]: distance = curr_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def get_most_central_temple(n, edges): graph = [[] for _ in range(n)] for u, v in edges: graph[u - 1].append((v - 1, 1)) graph[v - 1].append((u - 1, 1)) min_max_dist = float(\'inf\') most_central_temple = -1 for i in range(n): distances = dijkstra(graph, i) max_dist = max(distances) if max_dist < min_max_dist: min_max_dist = max_dist most_central_temple = i + 1 elif max_dist == min_max_dist: most_central_temple = min(most_central_temple, i + 1) return most_central_temple results = [] for test_case in test_cases: n, m, edges = test_case results.append(get_most_central_temple(n, edges)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, lines[index].split()) index += 1 edges = [] for __ in range(m): u, v = map(int, lines[index].split()) edges.append((u, v)) index += 1 test_cases.append((n, m, edges)) return t, test_cases def main(input_string): t, test_cases = parse_input(input_string) results = find_most_central_temple(t, test_cases) for result in results: print(result)"},{"question":"In a distant galaxy, an interplanetary delivery service needs to optimize its drone fleet to handle package deliveries across various planets. Each drone can carry a certain weight limit, and you are tasked with determining the maximum number of deliveries that can be made with the available drones. Each planet has a specific number of packages, each with a certain weight. The company assigns drones to planets such that each drone can only deliver one package during a trip to a planet. Given the drone weight limits and the package weights for each planet, you need to determine the maximum number of packages that can be delivered by assigning the available drones optimally. Input The first line of the input contains an integer d (1 ≤ d ≤ 1000) — the number of drones. The second line contains the sequence w1, w2, ..., wd (1 ≤ wi ≤ 1000), where the i-th number is the weight limit of the i-th drone. The third line contains an integer p (1 ≤ p ≤ 1000) — the number of planets. The next p lines describe each planet\'s packages. Each line starts with an integer np (1 ≤ np ≤ 1000) — the number of packages on that planet, followed by np integers representing the package weights. Output Print the maximum number of packages that can be delivered using the available drones. Examples Input 5 4 8 2 6 3 2 3 5 2 8 4 1 7 3 2 Output 5 Input 4 5 5 5 5 3 2 4 4 3 1 5 9 2 2 2 Output 4 Note In the first sample, the optimal assignment is: - Drone with weight limit 4 -> Package of weight 4 - Drone with weight limit 8 -> Package of weight 8 - Drone with weight limit 6 -> Package of weight 6 - Drone with weight limits 2 and 3 -> Packages of weights 2 and 3 In the second sample, each drone has a weight limit of 5 and only packages with weights less than or equal to 5 will be delivered. Thus, the optimal assignment delivers 4 packages with weights 4, 4, 1, and 2 (from different planets).","solution":"def max_deliveries(drones, drone_limits, planets): # Combine all packages into a single list. all_packages = [] for planet in planets: all_packages.extend(planet) # Sort packages in descending order (to try to fit the biggest packages first). all_packages.sort(reverse=True) # Sort drone limits in descending order. drone_limits.sort(reverse=True) delivered_count = 0 # Two pointers: for drones and for packages i, j = 0, 0 while i < len(drone_limits) and j < len(all_packages): if drone_limits[i] >= all_packages[j]: delivered_count += 1 i += 1 j += 1 else: j += 1 return delivered_count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() d = int(data[0]) drone_limits = list(map(int, data[1:d+1])) p_idx = d + 1 p = int(data[p_idx]) p_idx += 1 planets = [] for _ in range(p): np = int(data[p_idx]) packages = list(map(int, data[p_idx + 1: p_idx + 1 + np])) planets.append(packages) p_idx += 1 + np result = max_deliveries(d, drone_limits, planets) print(result)"},{"question":"Alice is organizing a series of events at a venue which has multiple halls arranged in a grid of size n × m. Each hall has a specific capacity denoted by an integer c_{ij}, where c_{ij} represents the capacity of the hall located at the intersection of the i-th row and the j-th column. Alice wants to maximize the total capacity of a set of non-overlapping sub-rectangles (events) within this grid. A sub-rectangle is defined by its top-left and bottom-right corners and consists of all halls within those corners. Two sub-rectangles are considered overlapping if they share at least one hall. Write a function to calculate the maximum total capacity that Alice can achieve by selecting a set of non-overlapping sub-rectangles from the grid. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns in the grid of halls. - The next n lines each contain m integers, where the j-th integer on the i-th line represents the capacity c_{ij} of the hall at position (i, j) (1 ≤ c_{ij} ≤ 10^4). Output - Print a single integer representing the maximum total capacity that Alice can achieve with non-overlapping sub-rectangles. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 45 Input 2 2 1 1 1 1 Output 4 Note In the first example, the optimal solution would be to select the entire grid as one sub-rectangle (since all halls are taken into account). In the second example, the optimal solution would be to select the entire 2x2 grid as one sub-rectangle, giving a total capacity of 1 + 1 + 1 + 1 = 4.","solution":"def max_total_capacity(n, m, capacities): # Compute prefix sums prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = capacities[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] # Initialize the dp array dp = [[0] * (m + 1) for _ in range(n + 1)] # Calculate the maximum capacity using dynamic programming for i in range(1, n + 1): for j in range(1, m + 1): for k in range(0, i): for l in range(0, j): total_capacity = prefix_sum[i][j] - prefix_sum[k][j] - prefix_sum[i][l] + prefix_sum[k][l] dp[i][j] = max(dp[i][j], dp[k][l] + total_capacity) return dp[n][m] # Example usage: # n = 3 # m = 3 # capacities = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(max_total_capacity(n, m, capacities)) # Output: 45"},{"question":"You are given a matrix of size n x m filled with non-negative integers. Your task is to determine the maximum value that can be obtained by performing a series of operations. In one operation, you can select either a row or a column and remove it from the matrix. The value of the operation is the sum of all elements in the removed row or column. The process is repeated until the matrix becomes empty. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the size of the matrix. The next n lines contain m integers each, where the j-th integer in the i-th line represents the element a_{i,j} (0 ≤ a_{i,j} ≤ 1000) of the matrix. Output One integer, the maximum value that can be obtained by performing the series of operations described. Example Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 45 Note In the example, we can select the third column (value 3 + 6 + 9 = 18), then the third row (remaining value 7 + 8 = 15), then the second column (remaining value 2 + 5 = 7), and finally the first row (remaining value 1 + 4 = 5). The total value obtained is 18 + 15 + 7 + 5 = 45.","solution":"def max_value_from_operations(matrix): Returns the maximum value that can be obtained by performing a series of operations removing either rows or columns from the matrix. Parameters: matrix (list of list of int): 2D list representing the matrix. Returns: int: Maximum value obtained from operations. total_sum = 0 while matrix: # Calculate the sum of each row row_sums = [sum(row) for row in matrix] # Calculate the sum of each column col_sums = [sum(matrix[i][j] for i in range(len(matrix))) for j in range(len(matrix[0]))] # Pick the maximum sum of either rows or columns max_row_sum = max(row_sums) if row_sums else 0 max_col_sum = max(col_sums) if col_sums else 0 if max_row_sum >= max_col_sum: total_sum += max_row_sum max_row_index = row_sums.index(max_row_sum) matrix.pop(max_row_index) else: total_sum += max_col_sum max_col_index = col_sums.index(max_col_sum) for row in matrix: row.pop(max_col_index) return total_sum # Usage Example: # n = 3 # m = 3 # matrix = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # result = max_value_from_operations(matrix) # Expected: 45"},{"question":"In a distant universe, there exists an enchanted forest with trees that have magical attributes. Each tree can either increase or decrease its height every night based on its current magical energy. You are given an array representing the heights of these trees. Each night, the height of each tree may either remain the same or vary by 1 unit. Your job is to determine if it\'s possible to equalize the height of all trees within a given number of nights. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of trees. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 100) — the heights of the trees. The last line contains an integer k (1 ≤ k ≤ 100) — the number of nights available. Output Output \\"YES\\" (without quotes) if it\'s possible to make all trees the same height within k nights. Otherwise, output \\"NO\\". Examples Input 5 4 3 2 1 2 3 Output YES Input 4 3 5 3 5 1 Output NO","solution":"def can_equalize_heights(n, heights, k): Determines if it\'s possible to equalize the height of all trees within k nights. Args: n (int): Number of trees. heights (list of int): Heights of the trees. k (int): Number of nights available. Returns: str: \\"YES\\" if it\'s possible to equalize the height, otherwise \\"NO\\". min_height = min(heights) max_height = max(heights) # Calculate the maximum difference max_difference = max_height - min_height # Check if the difference can be covered within k nights if max_difference <= k: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an integer array representing the price of items in a store, write a program to determine the maximum profit you can achieve using the given rules: you can buy and sell the items any number of times, but you cannot buy more than one item at a time and must sell the item before buying another one. Input The input is given in the following format: n p1 p2 p3 ... pn where n (1 ≤ n ≤ 10^5) is the number of items and pi (0 ≤ pi ≤ 10^4) represents the price of the ith item. Output Output a single integer representing the maximum profit you can achieve. Examples Input 6 7 1 5 3 6 4 Output 7 Input 5 1 2 3 4 5 Output 4 Input 5 7 6 4 3 1 Output 0","solution":"def max_profit(n, prices): Calculate the maximum profit by buying and selling items given that you can buy and sell the items any number of times. You cannot buy more than one item at a time and must sell the item before buying another one. :param n: Number of items (prices) :param prices: List of item prices :return: Maximum profit max_profit = 0 for i in range(1, n): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"Alice loves numbers and patterns. She recently learned about palindromes and finds them fascinating. A palindrome is a sequence of characters that reads the same backward as forward. She decides to play a game where she transforms a given string S into a palindrome by performing a sequence of operations. In one operation, she can select any character in the string and replace it with any other character. She wants to know the minimum number of such operations required to make S a palindrome. Write a program that helps Alice determine the minimum number of operations needed. INPUT First line contains an integer T, the number of test cases. T test cases follow. Each test case contains a single string S composed of lowercase alphabets. OUTPUT For each test case, print the minimum number of operations required to make the string S a palindrome. CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 S contains only lowercase alphabets [a-z] SAMPLE INPUT 3 abc abca abcd SAMPLE OUTPUT 1 1 2 **Explanation** 1. For the string \\"abc\\", change \'b\' to \'a\' (or \'c\') to make it \\"aba\\" (or \\"cbc\\"). 2. For the string \\"abca\\", change \'c\' to \'b\' (or \'a\') to make it \\"abca\\" (or \\"abca\\"). 3. For the string \\"abcd\\", change \'b\' to \'c\' and \'c\' to \'b\' to make it \\"abca\\".","solution":"def min_operations_to_palindrome(S): Returns the minimum number of operations required to make the string S a palindrome. n = len(S) operations = 0 for i in range(n // 2): if S[i] != S[n - i - 1]: operations += 1 return operations def min_operations_for_list_of_strings(T, cases): results = [] for S in cases: results.append(min_operations_to_palindrome(S)) return results"},{"question":"Martha is organizing a new game for her friends, and she needs your help. There are n players standing in a line, each holding a unique positive integer. During the game, each player wants to swap their number with another player to achieve a specific final sequence. You need to determine if it is possible to achieve the desired sequence of numbers with a series of swaps. Your job is to write a program that will determine if the desired sequence can be achieved and, if so, find a sequence of swaps that transforms the initial arrangement into the desired one. Each swap is defined by two indices i and j, which means that the player at position i swaps their number with the player at position j in the list. # Input In the first line, an integer n (1 ≤ n ≤ 100,000) is given — the number of players. In the second line, n integers are given, representing the initial sequence of numbers held by the players. In the third line, n integers are given, representing the desired final sequence of numbers. # Output If it is impossible to achieve the desired sequence, print \\"No\\". If it is possible, print \\"Yes\\" in the first line, followed by an integer m in the second line — the number of swaps required. In the following m lines, print two space-separated integers i and j (1 ≤ i, j ≤ n) representing a swap operation. If there are multiple solutions, print any of them. # Example Input 4 4 3 2 1 1 4 3 2 Output Yes 3 1 4 2 3 3 4 # Note In the first example, the initial sequence is [4, 3, 2, 1]. The desired sequence is [1, 4, 3, 2]. The swaps could be: 1. Swap the first and last positions: [1, 3, 2, 4] 2. Swap the second and third positions: [1, 2, 3, 4] 3. Swap the third and last positions: [1, 4, 3, 2]","solution":"def can_achieve_sequence(n, initial, final): Determines if it is possible to achieve the desired sequence from the initial sequence using swaps. Returns \\"No\\" if it\'s impossible, otherwise returns \\"Yes\\" and a list of swaps. if sorted(initial) != sorted(final): return \\"No\\", [] swap_operations = [] initial = initial[:] pos = {value: idx for idx, value in enumerate(initial)} for i in range(n): if initial[i] != final[i]: correct_value = final[i] swap_idx = pos[correct_value] # perform the swap initial[i], initial[swap_idx] = initial[swap_idx], initial[i] # update positions pos[initial[swap_idx]] = swap_idx pos[correct_value] = i swap_operations.append((i + 1, swap_idx + 1)) return \\"Yes\\", swap_operations"},{"question":"You are given an array of n integers. Your task is to determine if there is a pair of indices i and j such that i < j and the sum of the elements at these indices is equal to a given target value. Input - The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. - The third line contains one integer target (1 ≤ target ≤ 2 * 10^9). Output - If there are such indices, print \\"YES\\" and the two indices i and j (1 ≤ i < j ≤ n), 1-based. If there are multiple answers, you can print any. - If there are no such indices, print \\"NO\\". Examples Input: 5 1 2 3 4 5 8 Output: YES 3 5 Input: 4 1 1 1 1 2 Output: YES 1 2 Input: 3 1 5 9 20 Output: NO Note: In the first sample, the pair (3, 5) with values (3, 5) gives the target sum 8. In the second sample, there are multiple pairs that sum to 2, such as (1, 2) or (2, 3). In the third sample, there is no pair of indices that sum to 20.","solution":"def find_pair_with_sum(n, arr, target): Determine if there is a pair of indices (i, j) such that i < j and the sum of elements at these indices is equal to the target value. Args: n (int): Number of elements in the array. arr (list of int): The elements of the array. target (int): The target sum. Returns: tuple: \\"YES\\" and the 1-based indices (i, j) if such a pair is found, \\"NO\\" otherwise. # Dictionary to store the value and its index value_index = {} for i in range(n): # Calculate the complement of the current value with the target complement = target - arr[i] # If the complement is found in the dictionary, return the answer if complement in value_index: return \\"YES\\", value_index[complement] + 1, i + 1 # Store the index of the current value value_index[arr[i]] = i return \\"NO\\""},{"question":"A company is working on an inventory management system where developers need to handle operations that modify and query the status of the inventory. The inventory consists of various product items, each identified by a unique product_id (an integer). You are given a list of initial product quantities and a series of operations that either modify the product quantities or query their status. 1. \\"ADD p q\\" — Adds quantity q (an integer) to the current quantity of the product identified by product_id p. If the product_id p does not exist, it will be added to the inventory with an initial quantity of q. 2. \\"REMOVE p q\\" — Removes quantity q from the current quantity of the product identified by product_id p. If the product_id p does not exist or if there is not enough quantity of product_id p, this operation is ignored. 3. \\"QUERY p\\" — Queries and returns the current quantity of the product identified by product_id p. If the product_id p does not exist, it returns 0. You need to implement the functionality to handle operations and return the results of the \\"QUERY\\" operations. Constraints: - 1 ≤ number of distinct product items ≤ 10^5 - 1 ≤ |initial product list| ≤ 10^5 - 1 ≤ number of operations ≤ 10^5 - 1 ≤ p ≤ 10^5 - 1 ≤ q ≤ 10^6 for \\"ADD\\" and \\"REMOVE\\" operations Input The input is provided from Standard Input in the following format: N product_id_1 quantity_1 product_id_2 quantity_2 : product_id_N quantity_N M operation_1 operation_2 : operation_M Output For each \\"QUERY\\" operation, output the current quantity of the specified product_id. Examples Input 3 1 50 2 100 3 150 5 ADD 1 30 REMOVE 2 40 QUERY 1 QUERY 2 QUERY 4 Output 80 60 0 Input 2 5 100 10 50 4 ADD 5 20 REMOVE 10 30 QUERY 5 QUERY 10 Output 120 20","solution":"def inventory_management(initial_products, operations): inventory = {} # Initialize the inventory with the given initial product quantities for product_id, quantity in initial_products: inventory[product_id] = quantity # Process the operations results = [] for operation in operations: operation = operation.split() command = operation[0] product_id = int(operation[1]) if command == \\"ADD\\": quantity = int(operation[2]) if product_id in inventory: inventory[product_id] += quantity else: inventory[product_id] = quantity elif command == \\"REMOVE\\": quantity = int(operation[2]) if product_id in inventory and inventory[product_id] >= quantity: inventory[product_id] -= quantity elif command == \\"QUERY\\": results.append(inventory.get(product_id, 0)) return results"},{"question":"The kingdom of Narnia is under attack by the White Witch, and the Narnians have devised a defense mechanism that requires the use of magical number strings. To generate these strings, they need to construct palindromes from a given set of characters. Given a set of lowercase alphabet characters, find the length of the longest possible palindrome that can be constructed using the characters from the set. Each character can be used at most as many times as it appears in the set. Input A single line containing lowercase alphabet characters. Output A single integer representing the length of the longest possible palindrome. Constraints 1 ≤ Length of the string ≤ 100000 Example Input: abccccdd Output: 7 Explanation One longest palindrome that can be constructed is \\"dccaccd\\", which has a length of 7.","solution":"from collections import Counter def longest_palindrome_length(s): Returns the length of the longest palindrome that can be constructed using the characters from the set. char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Rainbow Dash is preparing for the annual Ponyville Marathon. She is training on a track with a series of checkpoints. The track can be represented as a straight line with n checkpoints, each at a distinct integer position on the line. Rainbow Dash wants to maximize her endurance by visiting a sequence of checkpoints such that the sum of the distances between consecutive checkpoints she visits is as large as possible. However, she must visit the checkpoints in strictly increasing order of their positions and cannot skip more than k checkpoints (i.e., the difference between the positions of any two consecutive checkpoints she visits must be at most k). Given the positions of n checkpoints, help Rainbow Dash determine the maximum possible sum of distances between consecutive checkpoints she can achieve under the given constraints. Input The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100), representing the number of checkpoints and the maximum allowed skip distance, respectively. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9), representing the positions of the checkpoints. The positions are given in strictly increasing order. Output Output a single integer representing the maximum possible sum of distances Rainbow Dash can achieve. Examples Input 6 2 1 2 3 5 6 8 Output 7 Input 5 3 1 5 8 10 13 Output 12 Note In the first example, one possible sequence Rainbow Dash can visit is 1 -> 3 -> 5 -> 8. The distances are 2 (3-1) + 2 (5-3) + 3 (8-5) which sums to 7. In the second example, one possible sequence Rainbow Dash can visit is 1 -> 5 -> 8 -> 13. The distances are 4 (5-1) + 3 (8-5) + 5 (13-8) which sums to 12.","solution":"def max_distance_sum(n, k, positions): Returns the maximum possible sum of distances Rainbow Dash can achieve. Args: n: Integer, number of checkpoints. k: Integer, maximum allowed skip distance. positions: List of integers, positions of the checkpoints. Returns: Integer, maximum possible sum of distances. # dp[i] will store the maximum distance sum ending at checkpoint i dp = [0] * n # Initialize the dp array for i in range(1, n): for j in range(max(0, i - k), i): dp[i] = max(dp[i], dp[j] + (positions[i] - positions[j])) return max(dp)"},{"question":"You are given a list of integers which may contain both positive and negative numbers. You must write a program to determine if there exist two integers in the list whose absolute difference is equal to a given number k. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of integers in the list. The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9) — the elements of the list. The third line contains a single integer k (0 ≤ k ≤ 10^9) — the absolute difference. Output Print \\"YES\\" if there exist two integers in the list whose absolute difference is equal to k. Otherwise, print \\"NO\\". Examples Input 5 1 5 3 4 2 3 Output YES Input 4 8 12 16 24 4 Output YES Input 3 1 -1 2 10 Output NO Note In the first example, the integers 1 and 4 have an absolute difference of 3. In the second example, the integers 12 and 8 have an absolute difference of 4. In the third example, no pair of integers have an absolute difference of 10.","solution":"def has_pair_with_difference(nums, k): Determines if there exist two integers in the list whose absolute difference is equal to k. Args: nums : list of int : List of integers. k : int : Required absolute difference. Returns: str : \\"YES\\" if such a pair exists, \\"NO\\" otherwise. nums_set = set(nums) for num in nums: if (num + k in nums_set) or (num - k in nums_set): return \\"YES\\" return \\"NO\\" # Example usage n = 5 nums = [1, 5, 3, 4, 2] k = 3 print(has_pair_with_difference(nums, k)) # Output: YES"},{"question":"Write a program that takes a positive integer n as input and calculates the sum of all prime numbers less than or equal to n. A prime number is defined as a number greater than 1 that has no positive divisors other than 1 and itself. The program should print the sum of all prime numbers up to and including n, if n is a positive integer greater than or equal to 2. If the input integer n is less than 2, the program should print \\"No prime numbers\\". Note that you should aim for an efficient solution due to potentially large input values. SAMPLE INPUT 10 SAMPLE OUTPUT 17 SAMPLE INPUT 1 SAMPLE OUTPUT No prime numbers","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than or equal to n. If n is less than 2, returns \\"No prime numbers\\". if n < 2: return \\"No prime numbers\\" sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start*start, n + 1, start): sieve[i] = False prime_sum = sum(i for i, is_prime in enumerate(sieve) if is_prime) return prime_sum # Example usage: #print(sum_of_primes(10)) # Should output 17 #print(sum_of_primes(1)) # Should output \\"No prime numbers\\""},{"question":"Write a function that takes in a sequence of braces and checks if the sequence is valid or not. A sequence of braces is considered valid if all opening braces have a corresponding closing brace in the correct order. The braces considered are `{`, `}`, `[`, `]`, `(`, and `)`. Your task is to return `True` if the sequence is valid, and `False` otherwise. Constraints * The input string will contain only the characters `{`, `}`, `[`, `]`, `(`, and `)`. * The length of the input string will be between 0 and 1000. Input Input is given from Standard Input in the following format: ``` s ``` Output Return `True` if the sequence is valid, and `False` otherwise. Examples Input ``` {[()]} ``` Output ``` True ``` Input ``` {[(])} ``` Output ``` False ``` Input ``` {} ``` Output ``` True ``` Input ``` ] ``` Output ``` False ``` Input ``` {{[[(())]]}} ``` Output ``` True ```","solution":"def is_valid_brace_sequence(s): Checks if the given sequence of braces is valid. :param s: A string consisting of braces `{`, `}`, `[`, `]`, `(`, and `)`. :return: True if the sequence is valid, False otherwise. stack = [] brace_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in brace_map.values(): stack.append(char) elif char in brace_map.keys(): if stack == [] or brace_map[char] != stack.pop(): return False else: return False return stack == []"},{"question":"You are given an integer n, representing the number of blocks arranged in a line, and an array of integers of length n where each element represents the height of a block. You can perform the following operation any number of times: choose any block and either increase or decrease its height by 1. Your goal is to make all blocks the same height. Determine the minimum number of operations required to do so. Input - The first line contains an integer n (1 ≤ n ≤ 100000), the number of blocks. - The second line contains n integers, each representing the height of a block. Each height is a positive integer not exceeding 10^9. Output - Print a single integer, the minimum number of operations required to make all blocks the same height. Examples Input 5 1 2 3 4 5 Output 6 Input 3 7 7 7 Output 0 Note In the first example, you can equalize all block heights to 3 with the following operations (using the sum of absolute differences from 3): 1 → 3 (2 ops), 2 → 3 (1 op), 4 → 3 (1 op), 5 → 3 (2 ops). Total = 2 + 1 + 1 + 2 = 6 operations. In the second example, since all blocks are already the same height, no operations are required resulting in 0.","solution":"def min_operations_to_equalize(n, heights): Returns the minimum number of operations required to make all blocks the same height. :param n: int, the number of blocks :param heights: list of int, heights of the blocks :return: int, minimum number of operations to equalize all blocks median_height = sorted(heights)[n // 2] return sum(abs(height - median_height) for height in heights)"},{"question":"Yuki is a forest ranger inspecting the health of a row of trees. He needs to ensure that no two adjacent trees have the same height to prevent disease spread. Yuki can change the height of each tree, but each change has an associated cost. There are n trees in a row. The height of the i-th tree is hi. Yuki can modify the trees by either increasing or decreasing their height. It costs him A dollars to increase the height of a tree by 1, and B dollars to decrease the height of a tree by 1. Note that the heights of the trees must remain integers (i.e., Yuki cannot choose to increase the height of a tree by 0.5). Help Yuki determine the minimum cost required to adjust the trees\' heights so that no two adjacent trees have the same height. Input format: The first line will contain three space-separated integers n, A, and B. The second line will contain n space-separated integers. The i-th integer in this line will be equal to hi. Output format: Print a single integer on its own line, the minimum cost required to adjust the heights of the trees so that no two adjacent trees have the same height. Constraints: For all subtasks: 1 ≤ n ≤ 100 1 ≤ hi ≤ 100 1 ≤ A, B ≤ 100 Subtask 1 (50 pts): n ≤ 10 Subtask 2 (50 pts): 10 < n ≤ 100 SAMPLE INPUT 6 1 2 3 3 4 4 5 5 SAMPLE OUTPUT 3 Explanation: In this case, we have 6 trees with heights 3, 3, 4, 4, 5, and 5. It costs 1 dollar to increase the height of a tree by 1 and 2 dollars to decrease the height by 1. One optimal solution is to modify the tree heights to be 3, 2, 4, 3, 5, 4. This costs 0+1+0+1+0+1=3 dollars. Therefore, the minimum cost to ensure no two adjacent trees have the same height is 3 dollars.","solution":"def min_cost_to_adjust_trees(n, A, B, heights): cost = 0 for i in range(1, n): if heights[i] == heights[i-1]: if A < B: heights[i] += 1 cost += A else: heights[i] -= 1 cost += B return cost"},{"question":"You are given a binary string `s`, consisting of \'0\'s and \'1\'s. You can perform a set of operations on this string where in each operation you select a contiguous substring that is made up of identical characters (\'0\'s or \'1\'s) and remove this substring from the string. Your task is to determine the minimum number of operations required to completely remove all characters from the string. Input The first line contains a binary string s (1 ≤ |s| ≤ 10^5) consisting of \'0\'s and \'1\'s. Output Print a single integer — the minimum number of operations required to remove all characters from the string. Examples Input 110001111 Output 3 Input 000 Output 1 Input 101010 Output 6 Note In the first example, we can remove the following substrings in these operations: 1. Remove the substring \\"11\\", resulting in \\"0001111\\". 2. Remove the substring \\"000\\", resulting in \\"111\\". 3. Remove the substring \\"111\\". In the second example, we can remove the whole string \\"000\\" in one operation. In the third example, we need to remove each character separately, which results in 6 operations.","solution":"def min_operations_to_remove(s): Returns the minimum number of operations required to completely remove all characters from the string. if not s: return 0 operations = 1 for i in range(1, len(s)): if s[i] != s[i-1]: operations += 1 return operations"},{"question":"Problem Statement Alex is planning to go on a vacation and wants to organize his travel bag efficiently. He has N items and a bag with a maximum capacity of W units. Each item has a weight and a value associated with it. Alex wants to maximize the total value of the items he will carry in the bag without exceeding the weight capacity. Help him find out the maximum value he can achieve. Input The first line of input consists of two integers N and W - the number of items and the maximum weight capacity of the bag. Each of the next N lines contains two integers - the weight and value of the item. Output The output contains a single integer, the maximum value Alex can carry in the bag. Constraints 1 ≤ N ≤ 1000 1 ≤ W ≤ 1000 1 ≤ weight of any item ≤ 100 1 ≤ value of any item ≤ 1000 Example Input: 4 7 1 1 3 4 4 5 5 7 Output: 9 Explanation Alex can carry items 2 and 3 with total weight 3 + 4 = 7 and total value 4 + 5 = 9.","solution":"def knapsack(N, W, items): Returns the maximum value that can be carried in the knapsack with a given capacity. Parameters: N (int): Number of items W (int): Maximum weight capacity of the bag items (list of tuples): Each tuple contains two integers, the weight and value of the item Returns: int: The maximum value that can be carried in the bag # Initialize the DP table with 0 dp = [[0] * (W + 1) for _ in range(N + 1)] # Populate the DP table for i in range(1, N + 1): weight, value = items[i - 1] for w in range(W + 1): if weight <= w: # Can include the item dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + value) else: # Cannot include the item dp[i][w] = dp[i - 1][w] return dp[N][W]"},{"question":"Chef has been experimenting with a new type of pastry. The pastry is a rectangular grid of size `n x m` consisting of vanilla and chocolate cells. To ensure customer satisfaction, the pastry should have some properties and Chef wants to quantify them. A pastry property of interest is the number of balanced subgrids. A subgrid is considered balanced if it contains an equal number of vanilla and chocolate cells. Given the dimensions `n` and `m` of the pastry grid, your task is to find out how many balanced subgrids can be formed within the given grid. Input The input contains two integers `n` and `m` (1 ≤ n, m ≤ 100). Output Print a single integer which is the number of balanced subgrids that can be formed within the given grid. Example Input: 2 2 Output: 4 Input: 3 3 Output: 36 Explanation In the first example, the 2x2 grid has 4 balanced subgrids: - The 1x1 subgrids each have one vanilla or one chocolate cell. - The 2x2 subgrid has 4 cells and could be either fully balanced with 2 vanilla and 2 chocolate cells or lopsided, but it\'s counted in this context. In the second example, the 3x3 grid has 36 balanced subgrids: - There are many ways to pick equal numbers of vanilla and chocolate cells in various subgrid sizes, ensuring the count balances out. Calculations take into account all possible subgrids derived from given configurations that balance across different dimensions.","solution":"def count_balanced_subgrids(n, m): Counts the number of balanced subgrids in an n x m grid. total_subgrids = 0 # Iterate over all possible subgrid sizes for i in range(1, n+1): for j in range(1, m+1): # Calculate number of subgrids of size i x j num_subgrids = (n - i + 1) * (m - j + 1) total_subgrids += num_subgrids return total_subgrids # Example Uso # For a 2x2 grid, our function should return 4 print(count_balanced_subgrids(2, 2)) # Output: 4 # For a 3x3 grid, our function should return 36 print(count_balanced_subgrids(3, 3)) # Output: 36"},{"question":"Alice loves trees, particularly binary trees. She has a special type of binary tree called a \\"perfect binary tree\\". A perfect binary tree is one in which all interior nodes have two children and all leaves are at the same level. Alice also enjoys prime numbers. She thinks that a binary tree is beautiful if the number of non-leaf nodes in the tree is a prime number. Given an integer h, representing the height of a perfect binary tree, help Alice determine if the tree is beautiful or not. The height of a binary tree is defined as the number of edges from the root to any leaf node. Input The input contains a single integer h (1 ≤ h ≤ 20), which represents the height of a perfect binary tree. Output Output \\"YES\\" if the binary tree is beautiful (i.e., it has a prime number of non-leaf nodes), and \\"NO\\" otherwise. Example Input 2 Output NO Input 3 Output YES Note For h = 2, the perfect binary tree has 3 levels (0, 1, 2): - Level 0 has 1 node (the root), - Level 1 has 2 nodes, - Level 2 has 4 nodes (these are the leaf nodes). The number of non-leaf nodes is 3, and since 3 is a prime number, the tree is beautiful. For h = 3, the perfect binary tree has 4 levels (0, 1, 2, 3): - Level 0 has 1 node (the root), - Level 1 has 2 nodes, - Level 2 has 4 nodes, - Level 3 has 8 nodes (these are the leaf nodes). The number of non-leaf nodes is 7, and since 7 is a prime number, the tree is beautiful.","solution":"def is_prime(n): Check if a number is prime if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_tree_beautiful(h): Determines if a perfect binary tree of height h is beautiful. A tree is beautiful if the number of non-leaf nodes is a prime number. # Number of non-leaf nodes in a perfect binary tree of height h # The number of nodes at level i is 2^i # The total number of nodes in a perfect binary tree of height h is 2^(h+1) - 1 # The number of leaf nodes is 2^h # So, the number of non-leaf nodes is (2^(h+1) - 1) - 2^h = 2^h - 1 num_non_leaf_nodes = 2**h - 1 return \\"YES\\" if is_prime(num_non_leaf_nodes) else \\"NO\\""},{"question":"A delivery company is developing a new system to optimize their parcel sorting process. Each parcel is represented by a unique integer ID and belongs to a category denoted by a lowercase English letter. You are given a list of parcels with their corresponding categories, and your task is to find the lexicographically smallest sequence of parcel IDs for each category. Input The first line contains an integer n (1 ≤ n ≤ 10^5) – the number of parcels. The next n lines each contain an integer ID (1 ≤ ID ≤ 10^9) and a lowercase English letter c (the category of the parcel). Output For each category that appears in the input, output the lexicographically smallest sequence of parcel IDs. The order of the categories in the output should follow the lexicographical order of the category letters. Each category should only appear once in the output. Example Input 6 123 a 456 b 789 a 234 b 567 c 345 a Example Output a 123 345 789 b 234 456 c 567 Explanation The input describes 6 parcels with their IDs and categories. For category \'a\', the parcels in the lexicographically sorted order are \'123\', \'345\', and \'789\'. For category \'b\', the sorted IDs are \'234\' and \'456\'. For category \'c\', there is only one parcel with ID \'567\'. The output lists each category in lexicographical order with the corresponding sorted parcel IDs.","solution":"def sort_parcels_by_category(n, parcels): from collections import defaultdict categories = defaultdict(list) for parcel in parcels: ID, category = parcel categories[category].append(ID) result = [] for category in sorted(categories.keys()): sorted_ids = sorted(categories[category]) result.append(f\\"{category} \\" + \\" \\".join(map(str, sorted_ids))) return result"},{"question":"David is planning to create a large mural using colored tiles. He has a certain number of rows and columns to fill with tiles. David uses three different colors of tiles: red, green, and blue. For each row of columns, he wants to alternate the colors starting from red, followed by green and blue, and repeat this pattern. Given the total number of rows and columns, find out how many tiles of each color David will need to complete the mural. Input The first line contains two integers r and c (1≤ r, c ≤ 10^7) — the number of rows and columns respectively. Output Print three numbers — the number of red tiles, green tiles, and blue tiles needed respectively. Examples Input 3 4 Output 4 4 4 Input 5 3 Output 5 5 5 Note In the first example, the pattern for 3 rows and 4 columns will be: - Row 1: Red Green Blue Red - Row 2: Green Blue Red Green - Row 3: Blue Red Green Blue In the second example, the pattern for 5 rows and 3 columns will be: - Row 1: Red Green Blue - Row 2: Green Blue Red - Row 3: Blue Red Green - Row 4: Red Green Blue - Row 5: Green Blue Red","solution":"def calculate_tiles_required(r, c): Calculate the number of red, green, and blue tiles needed to fill the mural. Arguments: r -- number of rows c -- number of columns Returns: A tuple with three integers representing the number of red, green, and blue tiles respectively. red_count = 0 green_count = 0 blue_count = 0 for row in range(r): for col in range(c): if (row + col) % 3 == 0: red_count += 1 elif (row + col) % 3 == 1: green_count += 1 else: blue_count += 1 return (red_count, green_count, blue_count)"},{"question":"A popular online game involves characters moving through a grid-like world, similar to a chessboard, but it has walls and obstacles at certain cells which are impassable. Characters can move horizontally or vertically to adjacent cells but cannot move diagonally. The objective of the game is to determine the shortest number of moves a character needs to reach from one cell to another in such a grid. You need to write a program to help compute this shortest path. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid respectively. - The following n lines each contain m characters representing the game\'s grid. Each character can be: - \'.\' indicating an empty cell, - \'#\' indicating an impassable wall. - The next line contains four integers x1, y1, x2, and y2 (1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m), representing the starting cell (x1, y1) and the target cell (x2, y2). Output - Output a single integer, the minimum number of moves required to travel from the start to the target cell. If it is not possible, output -1. Example Input 5 5 ..... .#..# .#..# .#..# ..... 1 1 5 5 Output 8 Input 3 3 ... # ... 1 1 3 3 Output -1 Note In the first example, the minimum number of moves required is 8 moves. In the second example, it is not possible to reach the target cell due to the wall blocking the path.","solution":"from collections import deque def shortest_path(n, m, grid, start, end): x1, y1 = start x2, y2 = end if grid[x1][y1] == \'#\' or grid[x2][y2] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(x1, y1, 0)]) visited = set((x1, y1)) while queue: x, y, dist = queue.popleft() if (x, y) == (x2, y2): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def transform_grid(grid): return [list(row) for row in grid]"},{"question":"Vanya is playing with permutations of an array. A permutation of array [1, 2, 3, …, n] is an array that contains each number from 1 to n exactly once. Vanya wants to create a special permutation of length n, such that for each i (1 ≤ i < n), the following condition is satisfied: the sum of any two adjacent elements is not greater than k. Help Vanya find such a permutation. If there are multiple correct answers, you can print any of them. If no such permutation exists, print -1. Input The single line contains two space-separated integers: n (1 ≤ n ≤ 100) — the length of the permutation, and k (2 ≤ k ≤ 200) — the maximum possible sum of any two adjacent elements. Output In a single line, print the sought permutation. If there are several suitable permutations, you can print any of them. If there is no such permutation, print -1. Examples Input 5 6 Output 1 5 2 4 3 Input 4 4 Output 4 1 3 2 Input 3 3 Output 1 2 3","solution":"def find_permutation(n, k): Finds a special permutation of length n such that for each i (1 ≤ i < n), the sum of any two adjacent elements is not greater than k. if k < 2 or k < n + 1: return -1 permutation = [] i, j = 1, n while i <= j: if i == j: permutation.append(i) break permutation.append(i) permutation.append(j) i += 1 j -= 1 return permutation # Handling input and output if __name__ == \\"__main__\\": import sys input_line = sys.stdin.read().strip() n, k = map(int, input_line.split()) result = find_permutation(n, k) if result == -1: print(result) else: print(\' \'.join(map(str, result)))"},{"question":"You are given an array of distinct integers and a target sum. Determine if there exist two distinct indices **i** and **j** in the array such that the sum of the elements at those indices equals the target sum. If such a pair exists, print the two indices. If no such pair exists, print `NONE`. Assume the pair of indices should be printed in increasing order and the lower index must be printed first. Constraints * All values in input are integers. * 1 leq length of the array leq 10^5 * -10^9 leq elements of the array leq 10^9 * -10^9 leq target sum leq 10^9 Input Input is given from Standard Input in the following format: n target array[0] array[1] ... array[n-1] Output Print the pair of indices satisfying the condition. If such a pair does not exist, print `NONE`. Examples Input 5 9 1 2 3 7 8 Output 0 3 Input 4 0 1 -3 4 2 Output NONE Input 6 10 3 4 5 6 7 8 Output 1 4","solution":"def find_pair_with_sum(n, target, array): This function takes in the length of array `n`, a target sum `target`, and the list `array`, and returns a pair of indices such that the sum of the elements at those indices equals the target sum. If no such pair is found, it returns \'NONE\'. indices_map = {} for i in range(n): complement = target - array[i] if complement in indices_map: print(indices_map[complement], i) return indices_map[array[i]] = i print(\\"NONE\\")"},{"question":"You are given a grid representing a battlefield, where: - \'.\' denotes an empty cell. - \'#\' denotes a blocked cell that cannot be passed through. - \'S\' denotes the starting point. - \'E\' denotes the endpoint. Your task is to determine if there exists a path from the starting point to the endpoint using only horizontal and vertical moves (i.e., no diagonal moves are allowed). If there exists such a path, output \\"POSSIBLE\\", otherwise output \\"IMPOSSIBLE\\". Input The first line of input contains one integer T denoting the number of test cases. For each test case: - The first line contains one integer N, the size of the grid (N x N). - The next N lines contain N characters each representing the grid. Output For each test case, output \\"POSSIBLE\\" if a path from \'S\' to \'E\' exists, and \\"IMPOSSIBLE\\" otherwise. Constraints 1 ≤ T ≤ 100 3 ≤ N ≤ 20 Example Input: 2 3 S.. .#. ..E 3 S.. # ..E Output: POSSIBLE IMPOSSIBLE Explanation: In the first test case, there is a clear path from the start (S) to the end (E). In the second test case, the path is completely blocked by \'#\' cells, making it impossible to reach the end.","solution":"def is_path_possible(grid, N): from collections import deque def bfs(sx, sy, ex, ey): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy)]) visited = set([(sx, sy)]) while queue: x, y = queue.popleft() if (x, y) == (ex, ey): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] != \'#\': queue.append((nx, ny)) visited.add((nx, ny)) return False start = end = None for i in range(N): for j in range(N): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) if not start or not end: return \\"IMPOSSIBLE\\" if bfs(start[0], start[1], end[0], end[1]): return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\" def evaluate_grids(grids): results = [] for grid in grids: N = len(grid) result = is_path_possible(grid, N) results.append(result) return results def bfs_solve_battlefield(T, cases): results = [] for i in range(T): N = cases[i][0] grid = cases[i][1] result = is_path_possible(grid, N) results.append(result) return results"},{"question":"You are given a string of lowercase letters. Write a program that calculates the frequency of each letter in the string and prints them in alphabetical order. Input A single line containing a string S (1 ≤ |S| ≤ 100). Output For each letter present in the string, output a line containing the letter, a colon, and its frequency. The letters should be printed in alphabetical order. Example Input aabbbcc Output a: 2 b: 3 c: 2 Input zxy Output x: 1 y: 1 z: 1 Note All letters in the input string are guaranteed to be lowercase English alphabet characters.","solution":"def letter_frequency(s): Returns the frequency of each letter in the string s in alphabetical order. :param s: The input string containing only lowercase English alphabet letters. :return: A dictionary with letters as keys and their frequencies as values. from collections import Counter # Count the frequency of each letter frequency = Counter(s) # Create a dictionary and populate it with frequencies sorted by letter sorted_frequency = dict(sorted(frequency.items())) return sorted_frequency"},{"question":"Write a function that accepts a string representing a date in the format \\"YYYY-MM-DD\\" and returns the day of the week for that date. The function should account for leap years. Input The input is a single string in the format \\"YYYY-MM-DD\\". Output Output a single string representing the day of the week (Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, or Saturday). Examples Input 2023-10-09 Output Monday Input 2000-01-01 Output Saturday Note The date format is \\"YYYY-MM-DD\\", where YYYY is a four-digit year, MM is a two-digit month (with leading zeros if necessary), and DD is a two-digit day (with leading zeros if necessary). Ensure your function correctly computes the day of the week for any valid date, adhering to the Gregorian calendar. Use standard date library functions or simple algorithms for the calculation.","solution":"from datetime import datetime def get_day_of_week(date_str): Given a date string in the format \\"YYYY-MM-DD\\", returns the day of the week for that date. date_object = datetime.strptime(date_str, \\"%Y-%m-%d\\") return date_object.strftime(\\"%A\\")"},{"question":"In a faraway kingdom named CodeLand, there is a great tournament every year where the citizens solve puzzles to determine the sharpest minds in the land. This year, one of the tasks involves analyzing a list of integers and rearranging them according to very specific rules. The challenge is as follows: You are given an array of integers. Your task is to rearrange the array such that all negative numbers appear before all positive numbers while keeping the relative order of the negative numbers and the positive numbers the same as in the original array. Input The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains an integer n, the number of elements in the array. The second line contains n integers, which are the elements of the array. Output For each test case, output the rearranged array on a new line. Constraints 1 ≤ T ≤ 10 1 ≤ n ≤ 100 -1000 ≤ Array element values ≤ 1000 Example Input: 2 5 4 -1 9 -2 5 6 1 -2 -3 6 -7 8 Output: -1 -2 4 9 5 -2 -3 -7 1 6 8 Explanation In the first example case, the negative numbers -1 and -2 retain their original order, followed by the positive numbers 4, 9, and 5 retaining their original order. In the second example case, the negative numbers -2, -3, and -7 retain their original order, followed by the positive numbers 1, 6, and 8 retaining their original order.","solution":"def rearrange_array(T, test_cases): Rearrange the array such that all negative numbers appear before all positive numbers while maintaining the relative order of the negative and positive numbers. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains an integer n (number of elements in the array) and a list of n integers. Returns: list of lists: Each inner list contains the rearranged array for the corresponding test case. results = [] for n, array in test_cases: negatives = [x for x in array if x < 0] non_negatives = [x for x in array if x >= 0] results.append(negatives + non_negatives) return results"},{"question":"You are given an m x n matrix representing a drawing grid. Your task is to determine whether the drawing contains a rectangle formed entirely by \'1\'s. Each cell in the grid contains either \'0\' or \'1\'. A rectangle is defined by four integers (i1, j1, i2, j2) such that all the cells in the submatrix formed by these four integers contain \'1\'. Write a function `detectRectangle(grid)` that will return `True` if such a rectangle is present, else return `False`. Constraints * 1 leq m, n leq 100 * Each element in the matrix is either \'0\' or \'1\'. Input - matrix: a list of lists representing the m x n grid. Output - True if there is a rectangle formed by \'1\'s in the grid, otherwise False. Examples Input [[1, 0, 0, 1], [0, 1, 1, 0], [1, 1, 1, 0], [1, 0, 1, 1]] Output True Input [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] Output False Explanation In the first example, there is a rectangle of \'1\'s from cells (2,1) to (3,2) in the grid. Thus, the answer is True. In the second example, there is no such rectangle, so the answer is False.","solution":"def detectRectangle(grid): m, n = len(grid), len(grid[0]) for i in range(m): for j in range(n): if grid[i][j] == 1: for i2 in range(i + 1, m): if grid[i2][j] == 1: for j2 in range(j + 1, n): if grid[i][j2] == 1 and grid[i2][j2] == 1: return True return False"},{"question":"You are given two strings, S and T. Your task is to determine how many times the string T exists in the string S as a substring. A substring is defined as a sequence of characters that appears consecutively in S. Each occurrence of T in S must not overlap with another. Constraints * 1 leq |S|, |T| leq 10^5 * S and T consist of lowercase English letters. Input Input is given from Standard Input in the following format: S T Output Print the number of occurrences of T in S as a substring. Each occurrence must be non-overlapping. Examples Input abcabcab abc Output 2 Input aaaa aaa Output 1 Input mississippi iss Output 2","solution":"def count_non_overlapping_occurrences(S, T): Returns the number of non-overlapping occurrences of substring T in string S. count = 0 i = 0 while i <= len(S) - len(T): if S[i:i+len(T)] == T: count += 1 i += len(T) else: i += 1 return count"},{"question":"Emily loves arranging her huge collection of books. She has `N` shelves, each capable of holding as many books as needed, and a collection of books represented by an array of integers where each integer denotes the thickness of a book. Emily wants to balance the thickness of the books on her shelves such that the difference in the total thickness of books on any two shelves is minimized. To make things interesting, she can arrange the books in any order but cannot leave any book out or break a book into parts. Can you help Emily determine what the minimum possible maximum difference in total book thickness between any two shelves will be? Input The first line contains a single integer `T` denoting the number of test cases. T test cases follow. Each test case starts with an integer `N` denoting the number of shelves. The second line of each test case contains `M` integers where the `i-th` integer denotes the thickness of the `i-th` book. Output For each test case, output a single line containing an integer: the minimum possible maximum difference in total book thickness between any two shelves. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 50 1 ≤ M ≤ 1,000 1 ≤ Thickness of any book ≤ 10,000 Example Input: 2 3 10 10 10 10 2 1 2 3 4 5 Output: 0 1 Explanation In the first test case, Emily can distribute the books such that each shelf gets two books with a thickness of 10, leading to no difference between the shelves (difference = 0). In the second test case, Emily can distribute the books as follows: - Shelf 1: Books with thickness 1, 4, 5 (total = 10) - Shelf 2: Books with thickness 2, 3 (total = 5) The maximum difference in total thickness between the two shelves is |10 - 9| = 1.","solution":"def min_max_diff(n, books): total_sum = sum(books) # dp[i] will be True if sum \'i\' can be achieved with some subset of books dp = [False] * (total_sum // 2 + 1) dp[0] = True for book in books: for j in range(total_sum // 2, book - 1, -1): if dp[j - book]: dp[j] = True for i in range(total_sum // 2, -1, -1): if dp[i]: first_part = i break second_part = total_sum - first_part return abs(second_part - first_part) def minimize_max_diff(T, test_cases): results = [] for t in range(T): n, books = test_cases[t] if n == 1: results.append(sum(books)) # If there is only one shelf, the difference is the total sum elif n >= len(books): results.append(0) # If shelves are more than or equal to books, difference is zero else: results.append(min_max_diff(n, books)) return results"},{"question":"A traveling salesman wants to visit n cities. The traveling salesman can visit cities in any order, but he wants to minimize the total travel distance. The distance between city i and city j is defined by an n x n matrix D, where D[i][j] represents the distance between city i and city j. Note that the distance matrix is symmetric (D[i][j] = D[j][i]) and D[i][i] = 0 for all i. Your task is to determine the minimum distance the traveling salesman has to travel to visit all n cities exactly once and return to the starting city. Input The first line of the input contains integer n (2 ≤ n ≤ 10), the number of cities. Each of the next n lines contains n integers, where the j-th integer in the i-th line represents the distance D[i][j] between city i and city j (0 ≤ D[i][j] ≤ 100). Output Print a single integer - the minimum distance the traveling salesman has to travel to visit all cities exactly once and return to the starting city. Example Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80","solution":"import itertools def tsp_min_distance(n, distance_matrix): Returns the minimum travel distance for the Traveling Salesman Problem. # Generate all permutations of city indices to visit (exclude starting city) city_indices = list(range(1, n)) min_distance = float(\'inf\') for perm in itertools.permutations(city_indices): # Calculate the travel distance with the current permutation current_distance = distance_matrix[0][perm[0]] # Starting city to first city in permutation for i in range(len(perm) - 1): current_distance += distance_matrix[perm[i]][perm[i + 1]] current_distance += distance_matrix[perm[-1]][0] # Last city in permutation to starting city # Update minimum distance if current route is shorter if current_distance < min_distance: min_distance = current_distance return min_distance"},{"question":"Z-Organics is working on an innovative automated delivery system using drones to deliver packages in a rectangular grid of n rows and m columns. The company is facing a problem where some of the cells in the grid are not accessible due to obstacles or restricted areas. The drone can only move in four directions: up, down, left, and right. You need to help Z-Organics find the shortest path for the drone to travel from the starting point (1, 1) to the destination point (n, m). If it is not possible to reach the destination, return -1. **Input** The first line of input contains two integers n and m (1 ≤ n, m ≤ 200 000) which represent the dimensions of the grid. The next line contains an integer k (0 ≤ k ≤ 200 000) which represents the number of obstacles. The following k lines each contain two integers ri and ci (1 ≤ ri ≤ n, 1 ≤ ci ≤ m) which represent the coordinates of the obstacles. **Output** Print the length of the shortest path from the start point (1, 1) to the destination point (n, m). If it is not possible to reach the destination, print -1. **Examples** **Example 1** Input: 4 4 1 2 2 Output: 6 **Example 2** Input: 3 3 4 1 2 2 1 2 3 3 2 Output: -1 **Note** **Example 1** The initial grid without obstacles looks like this: ``` S - - - - - - - - - - - - - - D ``` An obstacle is located at (2, 2): ``` S - - - - O - - - - - - - - - D ``` The shortest path length is 6 steps: ``` (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) -> (4,4) ``` **Example 2** The grid is: ``` S O - O - O - O D ``` As there is no possible way to reach the destination, the output is -1.","solution":"from collections import deque def shortest_path(n, m, k, obstacles): # Creating the grid representation grid = [[0]*m for _ in range(n)] # Placing obstacles on the grid for (r, c) in obstacles: grid[r-1][c-1] = -1 # Mark obstacle cells with -1 # Directions for movement in grid: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Breadth First Search (BFS) initialization queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set() visited.add((0, 0)) while queue: r, c, dist = queue.popleft() # If destination is reached if r == n-1 and c == m-1: return dist # Exploring neighbors for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] != -1: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) # If destination cannot be reached return -1"},{"question":"Charles loves playing different types of video games, and he\'s particularly fond of a new game where you can collect special power-ups. Each power-up is represented as a pair of integers (x, y), indicating its position on a 2D grid. To create a challenge for himself, Charles wants to find out the maximum number of power-ups he can collect if he only moves in a straight line in one of the four main cardinal directions (up, down, left, right). However, there\'s a twist: the power-ups can only be collected if each subsequent power-up in his path has a strictly larger y-coordinate than the previous one. This means that while Charles can collect multiple power-ups in one move, he must always be moving in the positive y-direction to collect them. Write a program that helps Charles determine the maximum number of power-ups he can collect following these rules. Input The first line of input contains an integer n (1 ≤ n ≤ 105) — the number of power-ups on the grid. Each of the following n lines contains two space-separated integers xi and yi (1 ≤ xi, yi ≤ 109) — representing the position of the i-th power-up. Output Print a single integer — the maximum number of power-ups Charles can collect under the given conditions. Examples Input 5 1 2 2 3 3 4 2 2 1 3 Output 3 Input 4 1 1 2 2 3 1 4 2 Output 2 Input 6 4 5 3 1 1 2 2 4 6 3 5 6 Output 4","solution":"def max_power_ups(n, power_ups): # Sort power-ups first by x in ascending order, then by y in ascending order power_ups.sort(key=lambda x: (x[0], x[1])) # Initialize the count and the last collected y-coordinate count = 0 last_y = -1 for x, y in power_ups: if y > last_y: count += 1 last_y = y return count"},{"question":"A brilliant programmer loves working with strings. Here’s a problem that challenges their abilities. You are given a string `s` that consists of lowercase English letters. Your task is to quickly process the requests of two types: * Request of form: 0 p q. For this request, calculate the number of distinct substrings of `s[p...q]` (inclusive) and print it. * Request of form: 1 p t. For this request, change the character at position `p` of the string `s` to the character `t`. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and q (1 ≤ q ≤ 10^5) — the length of the string and the number of requests, respectively. The second line contains the string `s` which is of length `n`. Each of the next `q` lines contains one of these two types of requests: * The first integer is `0` followed by two integers `p` and `q` (1 ≤ p ≤ q ≤ n), representing a query to count distinct substrings in the substring `s[p...q]`. * The first integer is `1` followed by an integer `p` (1 ≤ p ≤ n) and a character `t`, representing a query to change the character at index `p` to `t`. Output For each request of the form `0 p q`, print the number of distinct substrings of `s[p...q]`. Example Input 7 5 abcdeab 0 1 3 1 7 f 0 1 7 1 5 z 0 1 5 Output 6 27 15","solution":"def count_distinct_substrings(s): Function to count the number of distinct substrings of a given string s. n = len(s) substrings = set() # Generate all possible substrings and store in a set to avoid duplicates for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings) def process_requests(n, q, s, requests): Function to process the given requests and return results for requests of type \'0 p q\' s = list(s) # To allow mutable operations results = [] for request in requests: req_type = request[0] if req_type == 0: _, p, q = request substring = \'\'.join(s[p-1:q]) distinct_count = count_distinct_substrings(substring) results.append(distinct_count) if req_type == 1: _, p, t = request s[p-1] = t return results"},{"question":"Given a string S, determine if S is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Constraints * The length of S is between 1 and 100 (inclusive). * S is a string consisting of uppercase and lowercase English letters. Input Input is given from Standard Input in the following format: S Output If S is a palindrome, print `Yes`; otherwise, print `No`. Examples Input racecar Output Yes Input hello Output No Input Aibohphobia Output Yes","solution":"def is_palindrome(S): Determines if the given string S is a palindrome. A palindrome reads the same forward and backward ignoring spaces, punctuation, and capitalization. Args: S (str): The input string. Returns: str: \'Yes\' if S is a palindrome, otherwise \'No\'. # Normalize the string by ignoring case normalized_str = S.lower() # Check if the normalized string reads the same forward and backward if normalized_str == normalized_str[::-1]: return \\"Yes\\" else: return \\"No\\""},{"question":"A company organizes a hackathon in which employees can participate in teams. Each team consists of exactly 3 members. The hackathon has a unique scoring system based on the projects submitted by each team. The scoring system follows these rules: 1. Each project is scored by three judges. 2. The score by each judge for a project is an integer between 1 and 100 (inclusive). 3. The final score for the project is calculated as the average of the three judges\' scores, rounded down to the nearest integer. Given the scores provided by the three judges for each project submitted by the participating teams, determine the final scores of the projects. Input The first line contains an integer m (1 ≤ m ≤ 1000) — the number of projects submitted. Each of the next m lines contains three integers a, b, and c (1 ≤ a, b, c ≤ 100) — the scores given by the three judges for a particular project. Output Print m integers — the final scores for each of the projects, in the same order as the input. Example Input 4 80 90 75 60 55 70 100 100 100 45 60 50 Output 81 61 100 51 Explanation For the first project, the scores are 80, 90, 75. The average score is (80 + 90 + 75) / 3 = 81.67, which rounds down to 81. For the second project, the scores are 60, 55, 70. The average score is (60 + 55 + 70) / 3 = 61.67, which rounds down to 61. For the third project, the scores are all 100. The average score is (100 + 100 + 100) / 3 = 100, which already is an integer. For the fourth project, the scores are 45, 60, 50. The average score is (45 + 60 + 50) / 3 = 51.67, which rounds down to 51.","solution":"def calculate_final_scores(m, projects_scores): Calculate the final scores for each project based on given rules. Parameters: m (int): Number of projects. projects_scores (list of list of int): Scores given by three judges for each project. Returns: list of int: Final scores for each project. final_scores = [] for scores in projects_scores: a, b, c = scores final_score = (a + b + c) // 3 final_scores.append(final_score) return final_scores"},{"question":"Given two cousins A and B, both play a number game to test their arithmetic skills. They take turns to choose a single positive integer from a list of integers and the chosen number is added to either A or B\'s active number according to predefined rules. The purpose of the game is to find out the final combined sum of both numbers for a given list of integers after all numbers are chosen. Game Rules: 1. You can choose to add the integer to either A\'s active number or B\'s active number. 2. Once a number is chosen and added to the active number of either A or B, it is no longer available for subsequent turns. 3. The game continues until all numbers in the list are chosen. 4. The order of selection does not matter. Your task is to compute the combined total sum of A and B\'s active numbers when they have finished playing the game. Input The first line contains the single integer n (1 ≤ n ≤ 100) representing the number of integers available for selection. The second line contains n space-separated integers x1, x2, ..., xn (1 ≤ xi ≤ 10^4) representing the integers available for selection. Output Output the combined sum of A and B\'s active numbers after all integers have been chosen. Examples Input 5 1 2 3 4 5 Output 15 Input 3 10 20 30 Output 60","solution":"def combined_sum(n, numbers): Returns combined sum of A and B\'s active numbers after all integers are chosen. As we can add the integers to either A or B, the final combined sum will simply be the sum of all integers in the list. return sum(numbers) # Function to parse the input, compute the sum, and return the result. def calculate_combined_sum(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) numbers = list(map(int, lines[1].split())) return combined_sum(n, numbers)"},{"question":"You are given a list of n integers representing heights of towers in a city skyline. Each integer in the list represents the height of a tower at one position in the skyline (in meters). You have to look out for potential building regulation violations where a building is too high compared to its neighbors. A building is considered a \\"violation\\" if its height is strictly greater than the height of both of its adjacent towers. Write a function `count_violations` that takes in a list of integers and returns the number of violation buildings. Input - An integer n (3 ≤ n ≤ 10^5) — the number of buildings in the skyline. - A list of n integers where each integer represents the height of a tower (1 ≤ height ≤ 10^9). Output - An integer, the number of violation buildings in the skyline. Example Input 6 3 4 2 5 1 3 Output 2 Note In the example, the buildings at indices 1 (tower with height 4) and 3 (tower with height 5) are taller than both their adjacent buildings. Hence the output is 2.","solution":"def count_violations(heights): Returns the number of violation buildings in the skyline. A building is considered a \\"violation\\" if its height is strictly greater than the height of both of its adjacent towers. violations = 0 n = len(heights) for i in range(1, n-1): if heights[i] > heights[i-1] and heights[i] > heights[i+1]: violations += 1 return violations"},{"question":"Tom loves to travel across cities by train. He has an itinerary that consists of visiting several cities in a specific order. He also knows the price of train tickets between each pair of consecutive cities in his itinerary. Tom wants to find the total cost of his journey. Help Tom calculate the total price based on his itinerary and the given ticket prices. Input The first line contains an integer n (2 ≤ n ≤ 100) which is the number of cities in Tom\'s itinerary. The second line contains the names of the cities in the order Tom plans to visit them, separated by spaces. Each name consists of capital Latin letters only, and each name has a length from 1 to 100. The next n-1 lines each contain two city names and an integer, describing the price of the train ticket between each consecutive pair of cities that Tom will visit. Output Print a single integer which is the total cost of Tom\'s journey. Examples Input 5 PARIS BERLIN AMSTERDAM BRUSSELS LONDON PARIS BERLIN 50 BERLIN AMSTERDAM 40 AMSTERDAM BRUSSELS 30 BRUSSELS LONDON 20 Output 140 Note In the sample input, Tom visits PARIS, BERLIN, AMSTERDAM, BRUSSELS, and LONDON in order. The ticket prices between these consecutive cities are 50, 40, 30, and 20 respectively. The total cost of the journey is 50 + 40 + 30 + 20 = 140.","solution":"def calculate_total_cost(n, cities, ticket_prices): Calculate the total cost of the journey. :param n: Number of cities in the itinerary :param cities: List of cities in the order Tom plans to visit them :param ticket_prices: List of tuples containing (city1, city2, price) representing the price of the train ticket between each consecutive pair of cities :return: Total cost of the journey city_index = {city: i for i, city in enumerate(cities)} total_cost = 0 for city1, city2, price in ticket_prices: if city_index[city1] + 1 == city_index[city2]: total_cost += price return total_cost"},{"question":"Anagram Solver An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a program to solve an anagram puzzle. The program will receive a list of words and a target word. It should determine which words from the list are anagrams of the target word. To determine if two words are anagrams, ignore differences in case and any non-alphabetic characters. # Input - The first line contains the target word. - The second line contains an integer n (1 leq n leq 1000) which indicates the number of words in the list. - The next n lines each contain one word from the list. # Output - For each of the words in the list, output one line with either \\"YES\\" (if the word is an anagram of the target word) or \\"NO\\" (if it is not). # Sample Input 1 ``` listen 5 enlist google inlets banana silent ``` # Sample Output 1 ``` YES NO YES NO YES ``` # Sample Input 2 ``` Dormitory 4 dirtyroom dirty_room! mo_rtydirO_ dromito_ry! ``` # Sample Output 2 ``` YES YES YES YES ``` # Explanation In the first example, the words \\"enlist\\", \\"inlets\\", and \\"silent\\" are valid anagrams of the target word \\"listen\\", so the output for these words is \\"YES\\". The words \\"google\\" and \\"banana\\" are not anagrams, so the output is \\"NO\\". In the second example, despite the case differences and non-alphabetic characters, all the words in the list can be rearranged to form the target word \\"Dormitory\\", so the output for all of them is \\"YES\\".","solution":"def anagram_solver(target, words): import re from collections import Counter def clean_word(word): # Remove non-alphabetic characters and convert to lowercase return re.sub(\'[^a-zA-Z]\', \'\', word).lower() # Clean and count the target word clean_target = clean_word(target) target_counter = Counter(clean_target) results = [] for word in words: clean_word_test = clean_word(word) if Counter(clean_word_test) == target_counter: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A museum security system comprises several sensors aligned in a straight line. Each sensor can detect an object within a certain range to its left and right. Given the positions of the sensors and their range, you need to determine if it is possible to place the sensors such that an entire linear corridor can be covered without any gaps. To help with this, you\'ll write a program that takes as input the length of the corridor, the number of sensors, and the position and range of each sensor. The program should output whether the entire corridor is covered. Input The input contains multiple datasets. Each dataset is given in the following format: `length num_sensors` `position_1 range_1` `position_2 range_2` ... `position_n range_n` Each dataset is followed by an empty line. The input terminates with a line containing two zeros, `0 0`, which should not be processed. Constraints: - 1 ≤ length ≤ 1000 - 1 ≤ num_sensors ≤ 100 - 0 ≤ position_i ≤ length - 1 ≤ range_i ≤ length Output For each dataset, output \\"Yes\\" if the entire corridor is covered by the sensors, and \\"No\\" otherwise. Example Input 10 3 2 3 5 2 7 3 15 4 1 2 4 3 9 4 12 2 0 0 Output Yes No","solution":"def is_corridor_covered(length, sensors): Determines if the entire corridor is covered by the sensors. Parameters: length (int): Length of the corridor. sensors (list): List of tuples (position, range) of sensors. Returns: str: \\"Yes\\" if the corridor is covered, \\"No\\" otherwise. covered = [0] * (length + 1) for position, range_ in sensors: start = max(0, position - range_) end = min(length, position + range_) for i in range(start, end + 1): covered[i] = 1 return \\"Yes\\" if all(covered) else \\"No\\" def process_input(input_text): Processes the input text and determines if each dataset\'s corridor is covered. Parameters: input_text (str): Multiline string with multiple datasets. Returns: list: List of \\"Yes\\" or \\"No\\" for each dataset. result = [] datasets = input_text.strip().split(\'nn\') for data in datasets: lines = data.strip().split(\'n\') if lines[0] == \'0 0\': break length, num_sensors = map(int, lines[0].split()) sensors = [tuple(map(int, line.split())) for line in lines[1:]] result.append(is_corridor_covered(length, sensors)) return result"},{"question":"In a programming competition, teams are given a list of problems to solve. Each problem is characterized by its difficulty level, and each team is characterized by its skill level. A team can solve a problem if and only if the team\'s skill level is greater than or equal to the problem\'s difficulty level. Given a list of problems\' difficulty levels and a list of teams\' skill levels, determine for each team how many problems it can solve. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100000), where n is the number of problems and m is the number of teams. The second line of the input contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 100000), where pi is the difficulty level of the i-th problem. The third line of the input contains m integers s1, s2, ..., sm (1 ≤ si ≤ 100000), where si is the skill level of the i-th team. Output Print m integers separated by spaces, where the i-th integer represents the number of problems the i-th team can solve. Examples Input 5 3 4 8 7 5 6 3 10 4 Output 0 5 1 Input 6 4 1 2 3 4 5 6 6 1 3 4 Output 6 1 3 4","solution":"def problems_solved_by_teams(n, m, problems, teams): Determines the number of problems each team can solve. :param n: Number of problems :param m: Number of teams :param problems: List of problem difficulties :param teams: List of team skill levels :return: List of integers representing the number of problems each team can solve problems.sort() result = [] for skill in teams: # Find the number of problems the team can solve count = 0 for difficulty in problems: if skill >= difficulty: count += 1 else: break # As problems are sorted, no need to check further result.append(count) return result"},{"question":"Task: You are given a matrix of characters and a word. Write a function to determine if the word can be found in the matrix. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. # Function Signature ```python def exist(board: List[List[str]], word: str) -> bool: ``` # Input - `board`: A list of lists of characters representing the matrix. - `word`: A string representing the word to search in the matrix. # Output - Return `True` if the word can be found in the matrix, otherwise return `False`. # Constraints - `1 <= len(board), len(board[0]) <= 200` - `1 <= len(word) <= 10^3` - The board contains only lower-case English letters. - The word contains only lower-case English letters. # Example Input: ```python board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCCED\\" ``` Output: ```python True ``` Input: ```python board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"SEE\\" ``` Output: ```python True ``` Input: ```python board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCB\\" ``` Output: ```python False","solution":"def exist(board, word): rows, cols = len(board), len(board[0]) def dfs(r, c, i): if i == len(word): return True if r < 0 or r >= rows or c < 0 or c >= cols or board[r][c] != word[i]: return False temp = board[r][c] board[r][c] = \'#\' # mark as visited found = (dfs(r+1, c, i+1) or dfs(r-1, c, i+1) or dfs(r, c+1, i+1) or dfs(r, c-1, i+1)) board[r][c] = temp # unmark return found for row in range(rows): for col in range(cols): if dfs(row, col, 0): return True return False"},{"question":"You are given a string consisting of lowercase letters and are allowed to perform operations on it. In each operation, you can choose any two characters in the string and replace all occurrences of the second character with the first character. Your goal is to minimize the number of distinct characters in the string by performing these operations. Write a function `minimize_characters` that takes the input string and returns the minimum number of distinct characters possible after any number of operations. Input - A single string `s` consisting of lowercase English letters (1 ≤ |s| ≤ 105). Output - An integer representing the minimum number of distinct characters in the string after applying the operations. Examples Input ``` abac ``` Output ``` 1 ``` Input ``` xyz ``` Output ``` 1 ``` Input ``` abca ``` Output ``` 1 ``` Explanation In the first example, you can choose to replace \'b\' and \'c\' with \'a\', reducing the string to \\"aaaa\\", which contains only one distinct character. In the second example, you can similarly replace \'y\' and \'z\' with \'x\', resulting in \\"xxx\\", which has only one distinct character. In the third example, you can replace \'b\' and \'c\' with \'a\', resulting in \\"aaaa\\", which has only one distinct character.","solution":"def minimize_characters(s): Returns the minimum number of distinct characters possible after any number of operations. # The problem can be reduced to the fact that we can replace all characters to be the same. # Hence, the minimum number of distinct characters will always be 1. return 1"},{"question":"You are managing a hotel with a number of rooms. Each guest booking request specifies the arrival and departure dates for their stay. The goal is to determine whether you can accommodate all booking requests in your hotel. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of bookings. The next n lines each contain two integers a and d (1 ≤ a < d ≤ 1000) indicating the arrival and departure dates of a particular booking. There is only one hotel with the same number of available rooms, m (1 ≤ m ≤ 100). Output Output \\"YES\\" if all the bookings can be accommodated in the hotel and \\"NO\\" otherwise. Examples Input 3 1 5 2 6 5 10 2 Output YES Input 4 1 3 2 5 4 6 7 8 1 Output NO Note In the first example, you need to allocate rooms for 3 bookings: - The first guest requires a room from day 1 until day 5. - The second guest requires a room from day 2 until day 6. - The third guest requires a room from day 5 until day 10. Since there are 2 rooms available and no more than 2 bookings overlap on any given day, it is possible to accommodate all bookings. In the second example, you need to allocate rooms for 4 bookings: - The first guest requires a room from day 1 until day 3. - The second guest requires a room from day 2 until day 5. - The third guest requires a room from day 4 until day 6. - The fourth guest requires a room from day 7 until day 8. Since there is only 1 room available and there are times when at least 2 bookings overlap, it is not possible to accommodate all bookings.","solution":"def can_accommodate_all_bookings(n, bookings, m): events = [] # Create events for each booking\'s arrival and departure for booking in bookings: a, d = booking events.append((a, 1)) # arrival events.append((d, -1)) # departure # Sort events first by time and then by type (departure before arrival if on same day) events.sort(key=lambda x: (x[0], x[1])) current_rooms = 0 for event in events: current_rooms += event[1] if current_rooms > m: return \\"NO\\" return \\"YES\\""},{"question":"Ina loves Palindrome numbers, i.e., numbers that read the same forward and backward. For example, 121, 12321, and 0 are palindrome numbers while 123 and 1122 are not. She has an array B1, B2, ..., BN and needs to answer Q queries of the following two types: 1 l r : Find the total number of palindrome numbers in the range [l, r] 2 i K : Update the i-th element of array B to K i.e., perform the operation Bi = K. As her friend, she seeks your assistance. INPUT: The first line consists of two integers N and Q. The next line consists of N integers B1, B2, ..., BN, followed by Q queries. Each query consists of three integers as mentioned in the problem. OUTPUT: For each query of type 1, output the total number of palindrome numbers in the range [l, r]. CONSTRAINTS: 1 ≤ N, Q ≤ 2*10^5 -10^18 ≤ Bi ≤ 10^18 1 ≤ l, r ≤ N -10^18 ≤ K ≤ 10^18 SAMPLE INPUT 5 5 123 121 454 789 0 1 1 3 1 1 5 2 2 202 2 4 3 1 1 5 SAMPLE OUTPUT 2 3 4 Explanation: Initially, the palindrome numbers in the array are 121, 454 and 0. For the 1st query, there are 2 palindrome numbers in the range B[1] to B[3] (121, 454). For the 2nd query, there are 3 palindrome numbers in the entire array B (121, 454, 0). In the 3rd query, we update the 2nd element to 202, which is a palindrome number. In the 4th query, we update the 4th element to 3, which is also a palindrome number. For the 5th query, the palindrome numbers in the entire array B are 121, 202, 454, 3, and 0, thus the total is 4.","solution":"def is_palindrome(num): return str(num) == str(num)[::-1] def process_queries(N, Q, B, queries): res = [] palindromes = [is_palindrome(B[i]) for i in range(N)] for query in queries: if query[0] == 1: l, r = query[1] - 1, query[2] - 1 res.append(sum(palindromes[l:r+1])) elif query[0] == 2: i, K = query[1] - 1, query[2] B[i] = K palindromes[i] = is_palindrome(K) return res"},{"question":"Tom is an avid gardener who loves to plant flowers in a straight row along his garden bed. However, due to his love for symmetry, he wants to ensure that the garden looks symmetrical with respect to its center point. To achieve this, Tom plants flowers of different heights, but in such a way that the arrangement looks symmetrical when viewed from the center of the row. You are given the heights of flowers that Tom has planted. Your task is to determine if the current arrangement of flowers is symmetrical or not. A sequence is considered symmetrical if the sequence read from left to right is the same as reading from right to left. For example, a sequence [3, 2, 1, 2, 3] is symmetrical, whereas the sequence [3, 2, 1, 2] is not. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of flowers Tom has planted. - The second line contains n integers `h1, h2, ..., hn` (1 ≤ hi ≤ 1,000,000) — the heights of the flowers in the order in which they have been planted. Output: - Output \\"YES\\" if the arrangement of flowers is symmetrical, otherwise output \\"NO\\". Examples: Input: 5 3 2 1 2 3 Output: YES Input: 6 1 2 3 4 2 1 Output: NO Input: 1 7 Output: YES Note: - In the first example, the sequence is symmetrical. - In the second example, the sequence is not symmetrical because the order of heights does not mirror perfectly around the center. - In the third example, a single flower is inherently symmetrical.","solution":"def is_symmetrical(n, heights): Checks if the arrangement of flowers is symmetrical. :param n: Number of flowers :param heights: List of integers representing the heights of the flowers :return: \\"YES\\" if symmetrical, otherwise \\"NO\\" return \\"YES\\" if heights == heights[::-1] else \\"NO\\""},{"question":"Palindromic Subsequence Transformation You are given a sequence of integers A: A1 A2 ... An and a set of transformation rules of the form \\"x -> y\\". The following transformation on the sequence is allowed an arbitrary number of times: * Transformation: With a transformation rule \\"x -> y\\", transform a sequence c1 c2 ... ci x d1 d2 ... dj to c1 c2 ... ci y d1 d2 ... dj. Your task is to determine whether it is possible to transform the sequence A into a palindromic sequence using the given transformation rules. If possible, compute the minimum number of transformations required to achieve it. Input The input consists of multiple datasets. Each dataset has the following form: > n r > A1 A2 ... An > T1 > ... > Tr The first line of a dataset consists of two positive integers n and r, where n (n ≤ 25) is the length of the sequence A, and r (r ≤ 60) is the number of transformation rules. The second line contains n integers representing the n elements of A. Each of the last r lines describes a transformation rule in the following form: > x y The integer x represents the left-hand side of the rule, and the integer y represents the right-hand side. All of A1, .., An, x, and y are in the range between 1 and 30, inclusive. A line \\"0 0\\" denotes the end of the input. Output For each dataset, print the minimum number of transformations required to turn A into a palindromic sequence. Print `-1` if it is impossible. Sample Input 3 3 1 2 3 1 3 2 2 3 1 4 2 4 4 2 1 4 1 2 3 0 0 Sample Output 1 -1 Example Input 3 3 1 2 3 1 3 2 2 3 1 4 2 4 4 2 1 4 1 2 3 0 0 Output 1 -1","solution":"from collections import defaultdict, deque def is_palindromic(seq): return seq == seq[::-1] def min_transformations_to_palindrome(n, r, A, transformations): if is_palindromic(A): return 0 transform_dict = defaultdict(list) for x, y in transformations: transform_dict[x].append(y) queue = deque([(A, 0)]) # (current sequence, steps) visited = set() visited.add(tuple(A)) while queue: current, steps = queue.popleft() for i in range(n): for j in transform_dict[current[i]]: new_seq = current[:i] + [j] + current[i+1:] if tuple(new_seq) in visited: continue if is_palindromic(new_seq): return steps + 1 visited.add(tuple(new_seq)) queue.append((new_seq, steps + 1)) return -1 def palindromic_transformation(input_data): datasets = input_data.strip().split(\'n\') result = [] i = 0 while i < len(datasets): n, r = map(int, datasets[i].split()) if n == 0 and r == 0: break i += 1 A = list(map(int, datasets[i].split())) transformations = [] for _ in range(r): i += 1 transformations.append(tuple(map(int, datasets[i].split()))) result.append(min_transformations_to_palindrome(n, r, A, transformations)) i += 1 return result"},{"question":"Given an integer N and a list of N integers, determine the number of unique integers in the list that are greater than a given integer M. Constraints * 1 leq N leq 100 * 0 leq M leq 100 * 0 leq list[i] leq 100 Input Input is given from Standard Input in the following format: ``` N M list[0] list[1] ... list[N-1] ``` Output Print the number of unique integers in the list that are greater than M. Examples Input ``` 5 3 3 4 4 6 7 ``` Output 3 Input ``` 4 1 1 2 2 3 ``` Output 2 Input ``` 3 0 0 0 0 ``` Output 0","solution":"def count_unique_greater_than(N, M, lst): Given an integer N, an integer M, and a list of N integers, this function returns the number of unique integers in the list that are greater than M. unique_set = set() for num in lst: if num > M: unique_set.add(num) return len(unique_set)"},{"question":"In a magical land, there are n houses lined up in a single row, numbered from 1 to n. Each house produces a certain number of magic candies every day. The magic candies produced by the i-th house is denoted by ci. There is a wizard who wants to collect all these magic candies following a special rule. The wizard can only start collecting from either the first house or the last house. Once starting from one end, the wizard can only move to the next house towards the other end (i.e., if starting from the first house, they move towards the last house, and vice versa). The wizard cannot skip any house; they must collect candies from each house along the way without missing any house. The wizard has a magic bag with a limited capacity, and the maximum number of candies he can carry is given by the integer k. The wizard will stop collecting candies and discard them if the total exceeds the capacity k at any point. Given the number of houses, the list of candies produced by each house, and the bag\'s capacity, determine the total number of candies the wizard can collect without exceeding the capacity k. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000) — the number of houses and the capacity of the magic bag. The second line contains n integers c1, c2, ..., cn (0 ≤ ci ≤ 100) — the number of candies produced by the i-th house. Output Print the maximum number of candies the wizard can collect following the rules mentioned. Examples Input 5 10 1 2 3 4 5 Output 10 Input 4 7 4 3 2 1 Output 7 Note In the first sample, the wizard can start from the first house and collect all candies (1 + 2 + 3 + 4). With the last house producing 5 candies, the total would be 10, which is exactly the capacity of the bag. In the second sample, the wizard can start from the first house and collect 4 candies, then from the second house 3 more, totaling 7 candies without exceeding the bag\'s capacity.","solution":"def max_candies(n, k, candies): Determines the maximum number of candies the wizard can collect without exceeding capacity k. Args: n (int): The number of houses. k (int): The capacity of the magic bag. candies (list of int): List of candies each house produces. Returns: int: The maximum number of candies collected without exceeding capacity k. max_candies_collected = 0 # Check starting from the first house current_candies = 0 for candy in candies: if current_candies + candy > k: break current_candies += candy max_candies_collected = max(max_candies_collected, current_candies) # Check starting from the last house current_candies = 0 for candy in reversed(candies): if current_candies + candy > k: break current_candies += candy max_candies_collected = max(max_candies_collected, current_candies) return max_candies_collected"},{"question":"Given an array of integers, you are required to perform the following operations: * `update(l, r, x)`: Increment each element of the subarray from index `l` to index `r` (inclusive) by `x`. * `query(l, r)`: Compute the sum of the elements of the subarray from index `l` to index `r` (inclusive). Initially, all elements in the array are 0. Constraints: * 1 le n le 100,000 - (size of the array) * 1 le q le 100,000 - (number of operations) * 0 le l le r < n * -1,000 le x le 1,000 Input: The input is given in the following format: ``` n q q_1 q_2 : q_q ``` Each query q_i is given by: ``` 0 l r x ``` or ``` 1 l r ``` where the first digit 0 represents the `update` operation and 1 represents the `query` operation. Output: For each `query` operation, print the sum of the elements in the specified subarray. Example: Input: ``` 5 6 0 1 3 5 1 1 3 0 0 2 2 1 0 4 0 3 4 1 1 3 4 1 0 1 ``` Output: ``` 15 17 3 4 ```","solution":"class ArrayOperations: def __init__(self, n): self.array = [0] * n self.n = n def update(self, l, r, x): for i in range(l, r+1): self.array[i] += x def query(self, l, r): return sum(self.array[l:r+1])"},{"question":"Given an integer `n`, generate all possible valid parentheses combinations using `n` pairs of parentheses. Constraints * `1 <= n <= 10` Input The input is given in the following format: `n` Output Print each valid combination on a new line. The combinations should be ordered lexicographically. Example Input 3 Output ((())) (()()) (())() ()(()) ()()()","solution":"def generate_parentheses(n): Generate all valid parentheses combinations using n pairs of parentheses. def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) result = [] backtrack() result.sort() # Lexicographically sort the results return result # Example usage (this line is just for exemplification and should be removed in unit test) # print(generate_parentheses(3))"},{"question":"You are given a list of n integers, and you need to answer several queries. For each query, you are given two integers l and r (1 ≤ l ≤ r ≤ n) and need to find the product of all elements in the subarray from index l to r (both inclusive). The product should be returned modulo 10^9 + 7. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^3) — the elements of the array. The third line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) — the indices of the subarray for which you need to find the product. Output For each query, print the product of the subarray from index l to r modulo 10^9 + 7. Example Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Output 6 24 120 Note: For the array [1, 2, 3, 4, 5] and query [1, 3], the subarray [1, 2, 3] has a product of 1*2*3=6. For query [2, 4], the subarray [2, 3, 4] has a product of 2*3*4=24. For query [1, 5], the subarray [1, 2, 3, 4, 5] has a product of 1*2*3*4*5=120. Each result is provided modulo 10^9 + 7.","solution":"MOD = 10**9 + 7 def product_queries(n, array, queries): # Precompute the prefix products modulo MOD prefix_products = [1] * (n + 1) for i in range(1, n + 1): prefix_products[i] = (prefix_products[i - 1] * array[i - 1]) % MOD results = [] for l, r in queries: result = (prefix_products[r] * pow(prefix_products[l - 1], MOD - 2, MOD)) % MOD results.append(result) return results"},{"question":"You are given a list of integers and a target integer. Determine if there exist two distinct integers in the list that sum up to the target integer. Constraints * (2 leq n leq 10^4) * (-10^9 leq a_i leq 10^9) Input The input is given in the following format: *n* *a_0 ; a_1 ; ... ; a_{n-1}* *target* The first line contains an integer (n), the number of elements in the list. The second line contains (n) integers (a_0, a_1, ..., a_{n-1}), which are the elements of the list. The third line contains the integer target. Output Print \\"YES\\" if there are two distinct integers in the list that sum up to the target integer. Otherwise, print \\"NO\\". Examples Input 5 1 2 3 4 5 9 Output YES Input 4 1 2 3 8 6 Output NO Input 3 -1 -2 -3 -5 Output YES","solution":"def two_sum_exists(n, arr, target): Determines if there exist two distinct integers in the list that sum up to the target integer. Args: n (int): The number of elements in the list. arr (list): The list of integers. target (int): The target sum Returns: str: \\"YES\\" if there are two distinct integers that sum up to the target, otherwise \\"NO\\". seen = set() for number in arr: if target - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"The company\'s inventory tracking system needs a function to manage their stock levels. The company receives shipments of various quantities, which need to be added to the current stock level of an item. If the quantity of the shipment is greater than the current stock\'s remaining space (given a maximum storage limit), only the amount that fits into the storage should be added, and the rest should be rejected. Write a function that takes the maximum storage limit, the current stock level, and the shipment quantity, and returns the updated stock level. Constraints * All values in input are integers. * 1 leq current_stock leq max_storage leq 100 * 1 leq shipment leq 100 Input Input is given from Standard Input in the following format: max_storage current_stock shipment Output Print the integer representing the updated stock level. Examples Input 100 50 30 Output 80 Input 50 45 10 Output 50 Input 45 20 30 Output 45","solution":"def update_stock(max_storage, current_stock, shipment): Updates the stock level based on the shipment received, considering the max storage constraint. Args: max_storage (int): The maximum storage limit. current_stock (int): The current stock level. shipment (int): The quantity of shipment received. Returns: int: The updated stock level. new_stock = current_stock + shipment if new_stock > max_storage: new_stock = max_storage return new_stock"},{"question":"In marine biology, comparing DNA sequences of different species is a common task to understand their genetic similarities and differences. Given two DNA sequences represented as strings composed of the characters \'A\', \'C\', \'G\', and \'T\', determine the length of their longest common subsequence (LCS). A subsequence is derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your task is to write a program that computes the length of the longest common subsequence of the two given DNA sequences. Input The input consists of two lines. The first line contains a string S1, and the second line contains a string S2. Both strings consist of characters \'A\', \'C\', \'G\', and \'T\'. The length of each string is between 1 and 1000. Output Output a single integer, the length of the longest common subsequence of S1 and S2. Examples Input AGGTAB GXTXAYB Output 4 Input ACCGGTCGAGTGCGCGGAAGCCGGCCGAA GTCGTTCGGAATGCCGTTGCTCTGTAAA Output 20","solution":"def longest_common_subsequence(S1, S2): Returns the length of the longest common subsequence of DNA sequences S1 and S2. m, n = len(S1), len(S2) # Create a 2D DP array to store the lengths of longest common subsequence suffixes dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array bottom-up for i in range(1, m + 1): for j in range(1, n + 1): if S1[i - 1] == S2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of the longest common subsequence is in dp[m][n] return dp[m][n]"},{"question":"A company is organizing a series of coding challenges and wants to analyze the performance of the participants. For each participant, they have recorded the number of problems attempted and the number of problems solved. They want to find out which participant had the most improvement in their problem solving skills. Improvement is defined as the difference between the number of problems solved and the number of problems attempted. Input The first line of the input contains an integer T, denoting the number of test cases. The description of each test case follows: - The first line of each test case contains an integer N, denoting the number of participants. - The next N lines each contain two space-separated integers A and S, where A is the number of problems attempted by a participant and S is the number of problems solved by the participant. Output For each test case, output a single line containing the index (1-based) of the participant with the highest improvement. If there is a tie, output the participant with the smallest index. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^3 0 ≤ A, S ≤ 10^3 Example Input: 2 3 5 3 7 4 4 6 2 3 2 4 4 Output: 3 1 Explanation Example case 1. The improvements for the participants are: - Participant 1: 3 - 5 = -2 - Participant 2: 4 - 7 = -3 - Participant 3: 6 - 4 = 2 The participant with the highest improvement is participant 3 with an improvement of 2. Example case 2. The improvements for the participants are: - Participant 1: 2 - 3 = -1 - Participant 2: 4 - 4 = 0 The participant with the highest improvement is participant 2 with an improvement of 0. Since there is no tie, the output is simply the participant with the highest improvement.","solution":"def find_highest_improved_participant(test_cases): results = [] for case in test_cases: n, participants = case max_improvement = float(\'-inf\') best_participant = -1 for i, (a, s) in enumerate(participants): improvement = s - a if improvement > max_improvement: max_improvement = improvement best_participant = i + 1 elif improvement == max_improvement: if i + 1 < best_participant: best_participant = i + 1 results.append(best_participant) return results"},{"question":"In a distant galaxy, there are m planets connected by m-1 bi-directional space highways, forming a tree structure. Each space highway has a strength rating and the same rating implies the same strength. The Galactic Federation is planning to conduct interplanetary research missions. Each research mission has a requirement such that it can only explore planetary systems where the combined strength of the space highways does not exceed a given value. The Federation wants to optimize the number of missions that can be conducted by temporarily disabling certain space highways to form smaller, independent planetary systems that meet the combined strength requirement of the mission. Given the number of planets m, the strength ratings of space highways, and the strength requirement for a mission, you need to determine the maximum number of independent planetary systems that can be formed to meet the mission\'s requirement. Input - The first line contains two integers m and k (1 ≤ m ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of planets and the strength requirement of the mission. - The following m-1 lines each contain three integers u, v, s (1 ≤ u, v ≤ m, 1 ≤ s ≤ 10^9) denoting that there\'s a space highway with strength rating s between planet u and planet v. Output - Print one integer — the maximum number of independent planetary systems that can be formed where the combined strength of highways does not exceed k. Examples Input 5 10 1 2 3 1 3 2 2 4 4 2 5 6 Output 2 Input 4 7 1 2 1 1 3 5 3 4 2 Output 2 Note In the first example, the maximum number of independent planetary systems is 2. One way to achieve this is by disabling the space highway between planets 2 and 5, and another between planets 2 and 4. The formed systems are {1, 2, 3} and {4}, {5} with combined strengths within the required limit. In the second example, we can form {1, 2} and {3, 4} with combined strengths within the required limit by disabling the space highway between planets 1 and 3.","solution":"def max_independent_planetary_systems(m, k, highways): from collections import defaultdict # Build adjacency list for the tree tree = defaultdict(list) for u, v, s in highways: tree[u].append((v, s)) tree[v].append((u, s)) def dfs(node, parent): total_strength = 0 systems = 0 for neighbor, strength in tree[node]: if neighbor == parent: continue child_strength, child_systems = dfs(neighbor, node) # If adding this child does not exceed the limit, add its strength if total_strength + strength + child_strength <= k: total_strength += strength + child_strength systems += child_systems else: # Otherwise, consider it as a separate system systems += 1 return total_strength, systems # Total number of systems _, result = dfs(1, -1) # Include the initial system return result + 1"},{"question":"Given a set of words and a grid of characters, find all the words from the set that can be constructed in the grid. The words can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word. Constraints * The grid dimensions are m x n (1 ≤ m, n ≤ 12). * The number of words is not more than 20. * Each word\'s length is between 1 and 15 characters. Input The first line contains two integers m and n, representing the number of rows and columns in the grid, respectively. The next m lines each contain n characters, representing the grid. The next line contains an integer, k, representing the number of words in the set. The following k lines each contain a word. Output Print the words from the set that can be constructed in the grid, one per line. The words should appear in the same order as in the input. Example Input 4 4 oaan etae ihkr iflv 4 oath pea eat rain Output oath eat","solution":"def findWords(board, words): ROWS, COLS = len(board), len(board[0]) # Helper function to perform DFS def backtrack(row, col, parent): letter = board[row][col] curr_node = parent[letter] # Check if we find a word word_match = curr_node.pop(\\"#\\", False) if word_match: res.add(word_match) # Mark the cell as visited board[row][col] = \\"#\\" # Explore the neighbors in 4 directions: up, right, down, left for (row_offset, col_offset) in [(0, 1), (1, 0), (0, -1), (-1, 0)]: new_row, new_col = row + row_offset, col + col_offset if 0 <= new_row < ROWS and 0 <= new_col < COLS: if board[new_row][new_col] in curr_node: backtrack(new_row, new_col, curr_node) # End of exploration, restore the original letter board[row][col] = letter # Optimization: prune the node if it is a leaf if not curr_node: parent.pop(letter) # Build Trie out of the words in the dictionary trie = {} for word in words: node = trie for char in word: node = node.setdefault(char, {}) node[\\"#\\"] = word # Store words in Trie res = set() for row in range(ROWS): for col in range(COLS): if board[row][col] in trie: backtrack(row, col, trie) return list(res)"},{"question":"A bakery makes a variety of cakes and receives orders for different types every day. The bakery organizes its orders in such a way that they can fulfill the orders efficiently. Each order specifies a type of cake and the quantity needed. The bakery has a limit on the number of cakes they can bake per day. Given a list of orders and the bakery\'s daily baking limit, determine if it\'s possible for the bakery to fulfill all the orders. # Input The input is given in the following format: n m order1 order2 :: ordern - The first line contains two integers, `n` (1 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 500), where `n` is the number of orders and `m` is the daily baking limit. - The following `n` lines each contain two integers `typei` (1 ≤ typei ≤ 50) and `quantityi` (1 ≤ quantityi ≤ 100) representing the type of cake and the quantity needed for the i-th order. # Output For each day, output \\"YES\\" if the bakery can fulfill all the orders within the baking limit, or \\"NO\\" if it cannot. # Example Input 3 150 1 30 2 60 3 50 Output YES Input 4 200 1 80 2 70 3 60 1 50 Output NO # Notes - It\'s guaranteed that the orders for a single day will not contain the same type of cake more than once. - The bakery\'s total daily production must not exceed the given baking limit `m`. Implement a solution to decide if the bakery can fulfill all the orders within the given baking limit each day. The solution involves summing up each day\'s quantities and comparing it against the daily baking limit.","solution":"def can_fulfill_orders(n, m, orders): Determines if the bakery can fulfill all the orders within the baking limit. Parameters: n (int): Number of orders. m (int): Daily baking limit. orders (list of tuples): Each tuple contains (type, quantity) for each order. Returns: str: \\"YES\\" if the bakery can fulfill all orders within the limit, \\"NO\\" otherwise. total_quantity = sum(quantity for _, quantity in orders) return \\"YES\\" if total_quantity <= m else \\"NO\\""},{"question":"Create a program that takes a list of employees\' start and end times for their work shifts and determines the longest continuous time range that is covered by at least one employee. All times are given in 24-hour format \\"HH:MM\\", and you may assume that both the start and end times are always within the same calendar day (i.e., end times are always later in the day than start times). Input: The first line contains an integer N (0 < N ≤ 100) representing the number of employees. The next N lines each contain two strings representing the start and end times (formatted as \\"HH:MM\\") of an employee\'s work shift. Output: A single line with two strings representing the start and end times of the longest continuous time range covered by at least one employee. If no employees are working, print \\"No Coverage\\". # Example: Sample Input: ``` 3 09:00 17:00 13:00 20:00 15:00 18:00 ``` Sample Output: ``` 09:00 20:00 ``` Sample Input: ``` 2 08:00 12:00 14:00 18:00 ``` Sample Output: ``` 08:00 12:00 14:00 18:00 ``` Sample Input: ``` 0 ``` Sample Output: ``` No Coverage ```","solution":"def longest_coverage(employees): Determines the longest continuous time range covered by at least one employee. Parameters: employees (list of tuples): A list of tuples where each tuple contains start and end times of an employee\'s work shift. Returns: A tuple of (start_time, end_time) representing the longest continuous time range or \\"No Coverage\\" if no employees are working. if not employees: return \\"No Coverage\\" # Sort intervals based on start times employees.sort() merged_intervals = [] current_start, current_end = employees[0] for start, end in employees[1:]: if start <= current_end: # Merge intervals current_end = max(current_end, end) else: # Add the finished interval and move to the next merged_intervals.append((current_start, current_end)) current_start, current_end = start, end # Add the last interval merged_intervals.append((current_start, current_end)) # Combine the consecutive intervals longest_intervals = merged_intervals[0] return longest_intervals[0], longest_intervals[1]"},{"question":"You are given an array of integers `nums` and an integer `k`. A pair `(i, j)` is a special pair if `nums[i] + nums[j]` is a multiple of `k` and `i < j`. You need to find out the number of special pairs in the array. **Example:** ``` Input: nums = [1, 2, 3, 4, 5], k = 3 Output: 4 Explanation: We can have the pairs (1,2), (1,5), (2,4), (3,3) as special pairs. ``` **Input:** - An integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. - An array `nums` of `n` integers (1 ≤ nums[i] ≤ 10^9). - An integer `k` (1 ≤ k ≤ 1,000,000). **Output:** - Output one integer, the number of special pairs. **Note:** In the provided example, the array `nums` is [1, 2, 3, 4, 5] and `k` is 3. The pairs are: 1. (1+2) % 3 == 0 2. (1+5) % 3 == 0 3. (2+4) % 3 == 0 4. (3+3) % 3 == 0 Hence the number of special pairs is `4`.","solution":"def count_special_pairs(nums, k): Returns the number of special pairs from the given list nums, such that the sum of these pairs is a multiple of k. count = 0 n = len(nums) # Iterate over all pairs and check if their sum is a multiple of k for i in range(n): for j in range(i + 1, n): if (nums[i] + nums[j]) % k == 0: count += 1 return count"},{"question":"Given two strings, A and B, find the smallest substring in string A that contains all the characters of string B. If there is no such substring, return an empty string. Constraints * 1 ≤ |A|, |B| ≤ 10^4 Input A B In the first line, string A is given. In the second line, string B is given. Output Print the smallest substring in A that contains all the characters of B. If there is no such substring, print an empty string. Example Input ADOBECODEBANC ABC Output BANC In this example, there are several substrings in string A that contain all characters of string B (ABC) such as \\"ADOBEC\\", \\"CODEBA\\", \\"ODEBANC\\", etc. The smallest one among them is \\"BANC\\".","solution":"from collections import Counter, defaultdict def min_window_substring(A, B): Finds the smallest substring in string A that contains all characters of string B. If there is no such substring, returns an empty string. if not A or not B: return \\"\\" required = Counter(B) window_counts = defaultdict(int) l, r = 0, 0 formed = 0 required_length = len(required) ans = float(\\"inf\\"), None, None while r < len(A): char = A[r] window_counts[char] += 1 if char in required and window_counts[char] == required[char]: formed += 1 while l <= r and formed == required_length: char = A[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[char] -= 1 if char in required and window_counts[char] < required[char]: formed -= 1 l += 1 r += 1 if ans[0] == float(\\"inf\\"): return \\"\\" return A[ans[1]: ans[2] + 1]"},{"question":"Write a program that manages a phonebook with two types of operations: * add or update(name, number): adds or updates the phone number for the given name. * find(name): outputs the phone number for the given name or \\"Not found\\" if no entry exists for the name. Constraints * 1 ≤ q ≤ 100000 * 1 ≤ length of name ≤ 100 * The phone number consists of digits only with a maximum length of 15 digits. Input q operation1 operation2 : operationq In the first line, q (the number of operations) is given. Then, the ith operation operationi is given in one of the following formats: ``` 0 name number or 1 name ``` The first digit represents the type of the operation. \'0\' denotes add or update(name, number) and \'1\' denotes find(name). Output For each find operation, output the phone number associated with the given name or \\"Not found\\" if no entry exists. Examples Input 6 0 Alice 1234567890 0 Bob 9876543210 1 Alice 1 Charlie 0 Alice 1111111111 1 Alice Output 1234567890 Not found 1111111111","solution":"class Phonebook: def __init__(self): self.contacts = {} def add_or_update(self, name, number): self.contacts[name] = number def find(self, name): return self.contacts.get(name, \\"Not found\\") def process_operations(operations): phonebook = Phonebook() result = [] for operation in operations: tokens = operation.split() op_type = tokens[0] name = tokens[1] if op_type == \'0\': number = tokens[2] phonebook.add_or_update(name, number) elif op_type == \'1\': result.append(phonebook.find(name)) return result"},{"question":"Anton is learning about binary search trees (BSTs) and wants to create a balanced BST from a sorted array of distinct integers. A balanced BST is a binary search tree where the depth of the two subtrees of every node never differ by more than 1. To help Anton, write a function that takes a sorted array of distinct integers and returns the root of a balanced BST. Each node in the BST should be represented as a tuple (value, left_subtree, right_subtree), where value is an integer, and left_subtree and right_subtree are either None or another tuple representing the left and right subtrees respectively. Input The first line contains an integer n (0 ≤ n ≤ 10000), the length of the sorted array. The second line contains n sorted integers in ascending order, separated by spaces. Output Output the root of the balanced BST in the specified tuple format. Examples Input 7 1 2 3 4 5 6 7 Output (4, (2, (1, None, None), (3, None, None)), (6, (5, None, None), (7, None, None))) Input 3 1 3 5 Output (3, (1, None, None), (5, None, None)) Note In the first example, the balanced BST is: 4 / 2 6 / / 1 3 5 7 In the second example, the balanced BST is: 3 / 1 5","solution":"def sorted_array_to_bst(nums): Converts a sorted array of distinct integers into a balanced BST. Args: nums (List[int]): The sorted array of integers. Returns: Tuple[int, Union[None, Tuple], Union[None, Tuple]]: The root of the balanced BST. def helper(left, right): if left > right: return None mid = (left + right) // 2 root_value = nums[mid] left_subtree = helper(left, mid - 1) right_subtree = helper(mid + 1, right) return (root_value, left_subtree, right_subtree) return helper(0, len(nums) - 1) # Example usage: # nums = [1, 2, 3, 4, 5, 6, 7] # bst_root = sorted_array_to_bst(nums) # print(bst_root) # Output: (4, (2, (1, None, None), (3, None, None)), (6, (5, None, None), (7, None, None)))"},{"question":"Create a function that simulates a queue management system where multiple customers arrive at different times and spend a certain amount of time with a clerk before leaving. The goal is to return the maximum number of customers that can interact with the clerks without any overlap in their service times. **Function Signature:** ```python def max_served_customers(customers: List[Tuple[int, int]], num_clerks: int) -> int: ``` **Input:** - `customers`: A list of tuples where each tuple represents a customer. Each tuple (a, b) represents the arrival time `a` and the duration `b` of the customer. - `num_clerks`: An integer representing the number of clerks available. **Output:** - Return an integer representing the maximum number of customers that can be served without overlap. **Constraints:** - 1 ≤ len(customers) ≤ 1000 - 0 ≤ a ≤ 10^5 - 1 ≤ b ≤ 10^5 - 1 ≤ num_clerks ≤ 100 **Example:** ```python print(max_served_customers([(0, 3), (1, 9), (2, 6), (6, 3)], 2)) # Output: 3 print(max_served_customers([(0, 4), (2, 2), (4, 2)], 1)) # Output: 2 print(max_served_customers([(0, 2), (1, 2)], 2)) # Output: 2 ``` In this problem, you need to simulate the interaction between clerks and customers, ensuring that no customer is being served by more than one clerk at a time and vice versa. The optimal solution should consider both arrival times and the duration of each customer\'s service to maximize throughput.","solution":"def max_served_customers(customers, num_clerks): customers.sort(key=lambda x: x[0]) busy_until = [0] * num_clerks # Track when each clerk will be free served_count = 0 for arrival, duration in customers: for i in range(num_clerks): if busy_until[i] <= arrival: busy_until[i] = arrival + duration served_count += 1 break return served_count"},{"question":"Consider a string transformation problem where you are given two strings, `source` and `target`, and a list of permitted operations. Each operation allows you to replace a non-overlapping substring of the `source` string with a new substring. Your task is to determine if it is possible to transform the `source` string into the `target` string using exactly one operation. # Input - The first line contains a single string `source` (1 ≤ |source| ≤ 1000). - The second line contains a single string `target` (1 ≤ |target| ≤ 1000). - The third line contains an integer `n` (1 ≤ n ≤ 100), the number of permitted operations. - Each of the next `n` lines contains two space-separated strings `a_i` and `b_i` (1 ≤ |a_i|, |b_i| ≤ 10). This denotes that you can replace a substring `a_i` in the `source` with `b_i`. # Output - Print \\"YES\\" if it is possible to transform the `source` into the `target` using exactly one operation. - Print \\"NO\\" otherwise. # Example Input ``` abbc axxc 2 bb xx bc cc ``` Output ``` YES ``` Input ``` abcdef ghijkl 3 bcf ghi def jkl abc pqr ``` Output ``` NO ``` # Explanation In the first example, you can transform `abbc` by replacing `bb` with `xx` to obtain `axxc`, which matches the `target`. In the second example, none of the permitted operations can transform `abcdef` into `ghijkl` with exactly one replacement.","solution":"def can_transform_with_one_operation(source, target, operations): Determines if the source string can be transformed into the target string using exactly one allowed operation. :param source: The original string to transform :param target: The target string to transform into :param operations: List of allowed operations, where each operation is a tuple of (a_i, b_i) :return: \'YES\' if transformation is possible, \'NO\' otherwise for a_i, b_i in operations: if a_i in source: transformed = source.replace(a_i, b_i, 1) if transformed == target: return \\"YES\\" return \\"NO\\""},{"question":"A city is hosting a large marathon event, and you have been assigned to help manage the routes through its grid-based streets. The city is structured like a large grid, with streets running north-south and east-west. Certain streets have been marked as blocked and cannot be used for running. Your task is to help identify the longest possible straight-line running path a participant can take without hitting a blocked street. # Problem Specification Given the dimensions of the city grid and the list of blocked streets, determine the length of the longest straight-line path on unblocked streets that can be formed either horizontally or vertically. * The grid is represented as a 2D matrix of size `m x n`, where `m` is the number of rows and `n` is the number of columns. * Blocked streets are marked by 1, and unblocked streets are marked by 0 in the matrix. # Input Format: - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 1000) — the number of rows and the number of columns in the grid. - The next `m` lines each contain `n` integers, either 0 or 1, denoting the grid where 0 is an unblocked street and 1 is a blocked street. # Output Format: - Output one integer — the length of the longest straight-line path on unblocked streets. # Example: Input: ``` 5 5 0 0 0 0 0 0 1 1 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 ``` Output: ``` 5 ``` Explanation: In the given grid: - The longest horizontal unblocked path is from coordinates (1, 0) to (1, 4), of length 5. - Another example is the vertical path from (0, 0) to (4, 0), of length 5. # Constraints: - The grid dimensions `m` and `n` will both be at least 1 and at most 1000. - There may be any number of blocked streets. # Note: Ensure your solution is optimized to handle the largest grid sizes within a reasonable time frame. This problem tests your ability to navigate and analyze a 2D grid, understanding constraints, and efficiently finding lengths based on specific criteria.","solution":"def longest_straight_path(grid): m, n = len(grid), len(grid[0]) max_length = 0 for i in range(m): current_length = 0 for j in range(n): if grid[i][j] == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 for j in range(n): current_length = 0 for i in range(m): if grid[i][j] == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Problem You are given a matrix of dimension n x m. Each cell in the matrix contains an integer value representing the elevation at that point. Your task is to find the minimum effort required to traverse from the top-left corner (0,0) to the bottom-right corner (n-1,m-1) of the matrix. The effort of a particular path is defined as the maximum absolute difference in elevations between adjacent cells along that path. You can move up, down, left, or right from a cell to an adjacent cell. Write a function: ```python def min_effort_path(matrix: List[List[int]]) -> int: pass ``` **Input:** - `matrix`: A list of lists of integers where matrix[i][j] represents the elevation at cell (i, j). **Constraints:** - 1 <= n, m <= 100 - 0 <= matrix[i][j] <= 10^6 **Output:** - Return the minimum effort required to traverse from the top-left corner to the bottom-right corner of the matrix. **Example:** **Input:** ```python matrix = [ [1, 2, 2], [3, 8, 2], [5, 3, 5] ] ``` **Output:** ``` 2 ``` **Explanation:** The path with the minimum effort is 1 -> 2 -> 2 -> 2 -> 5, and the maximum absolute difference in elevations along this path is 2.","solution":"from heapq import heappop, heappush from typing import List def min_effort_path(matrix: List[List[int]]) -> int: n, m = len(matrix), len(matrix[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] effort = [[float(\'inf\')] * m for _ in range(n)] effort[0][0] = 0 heap = [(0, 0, 0)] # (effort, x, y) while heap: current_effort, x, y = heappop(heap) if x == n-1 and y == m-1: return current_effort for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: next_effort = max(current_effort, abs(matrix[nx][ny] - matrix[x][y])) if next_effort < effort[nx][ny]: effort[nx][ny] = next_effort heappush(heap, (next_effort, nx, ny)) return -1"},{"question":"In a distant land, there is a unique factory called ShapeMaker which specializes in creating a variety of different shapes from a given set of building blocks. Each building block is defined by its size and shape. The factory can create a new composite shape by combining a specified number of building blocks in a particular order. The shape-making process must adhere to the following rules: * Only building blocks of the same shape can be combined to form a larger shape. Mixing different shapes is not allowed. * The sizes of the building blocks must increase or remain the same in the combination process. That is, you can combine a block of size x with a block of size y if and only if x leq y. * Each shape can have a fixed maximum size limit which it cannot exceed. Your task is to write a program to determine whether it is possible to create a specific composite shape given the set of available building blocks. Input The input consists of a single test case in the format below. N S_1 X_1 vdots S_N X_N M T_1 L_1 vdots T_M L_M The first line consists of an integer N (1 leq N leq 10^5), which represents the number of available building blocks. The following N lines each consist of S_i and X_i (1 leq i leq N). S_i is a string representing the shape of the i-th building block and consists of lowercase letters. The length of S_i is between 1 and 20 inclusive. X_i is an integer representing the size of the i-th building block and is between 1 and 10^5 inclusive. The (N+2)-nd line consists of an integer M (1 leq M leq 10^5), which represents the number of required shapes. The following M lines each consist of T_i and L_i. T_i is a string representing the shape of the composite shape required and consists of lowercase letters. L_i is an integer representing the maximum allowable size for the composite shape and is between 1 and 10^5 inclusive. Output If it is possible to create each of the specified composite shapes given the building blocks, print \'Possible\'. Otherwise, print \'Impossible\'. Examples Input 4 circle 10 circle 20 square 5 square 10 2 circle 25 square 10 Output Possible Input 4 circle 10 circle 15 triangle 5 square 10 2 circle 30 triangle 5 Output Impossible Input 3 hexagon 10 hexagon 20 hexagon 15 1 hexagon 25 Output Possible Input 3 circle 5 circle 10 circle 15 1 square 25 Output Impossible","solution":"def can_create_composite_shapes(blocks, required_shapes): from collections import defaultdict # Parse block sizes by shape block_sizes = defaultdict(list) for shape, size in blocks: block_sizes[shape].append(size) # Sort each shape\'s block sizes for efficient comparison for shape in block_sizes: block_sizes[shape].sort() # Check each required shape for shape, max_size in required_shapes: if shape not in block_sizes: return \'Impossible\' # Total size created by blocks of this shape total_size = sum(size for size in block_sizes[shape] if size <= max_size) # Check if the total size is within the required max_size limit if total_size < max_size: return \'Impossible\' return \'Possible\' # Main function to interface with the problem\'s input format def is_creation_possible(N, blocks_data, M, required_data): blocks = [(blocks_data[i][0], blocks_data[i][1]) for i in range(N)] required_shapes = [(required_data[i][0], required_data[i][1]) for i in range(M)] return can_create_composite_shapes(blocks, required_shapes)"},{"question":"Rohan loves reading books and owns a vast collection. One day, he realized that finding a specific book by its title is becoming cumbersome due to the sheer number of books he has. To make his search easier, he decides to implement a system that can help him check whether a book title is in his collection or not. Rohan needs your help to write a program that can be used to check if a book title exists in his collection. Input: The first line contains an integer `N`, the number of books in Rohan\'s collection. The next `N` lines contain the titles of the books in his collection. Following this, an integer `Q` is given, the number of queries. The next `Q` lines contain the titles Rohan wants to check for existence in his collection. Output: For each query, print \\"FOUND\\" if the title exists in Rohan\'s collection and \\"NOT FOUND\\" if it does not. Quotes are for clarity only. Constraints: - 1 ≤ N ≤ 100 - 1 ≤ Q ≤ 100 - Each book title consists of 1 to 100 characters including spaces. - All book titles are case-sensitive. SAMPLE INPUT 5 The Great Gatsby To Kill a Mockingbird 1984 Pride and Prejudice Moby Dick 3 War and Peace The Great Gatsby The Catcher in the Rye SAMPLE OUTPUT NOT FOUND FOUND NOT FOUND","solution":"def check_books_in_collection(N, book_list, Q, query_list): Function to check if book titles in query_list exist in book_list. Parameters: N (int): Number of books in the collection book_list (list): List of book titles in the collection Q (int): Number of queries query_list (list): List of book titles to check for existence Returns: list: A list of strings \\"FOUND\\" or \\"NOT FOUND\\" for each query book_set = set(book_list) results = [] for query in query_list: if query in book_set: results.append(\\"FOUND\\") else: results.append(\\"NOT FOUND\\") return results"},{"question":"You are organizing a Hackathon event, and there are m different workshops that you need to schedule. Each workshop has a starting time and an ending time. Since the workshops are held in the same venue, no two workshops can overlap. Given the list of workshops, your task is to find the maximum number of non-overlapping workshops that can be scheduled. Input - The first line of the input contains one integer m (1 ≤ m ≤ 10000) — the number of workshops. - The next m lines each contain two integers s and e (0 ≤ s < e ≤ 10^9) — the starting and ending time of the workshop. Output Output one integer denoting the maximum number of non-overlapping workshops that can be scheduled. Examples # Input ``` 5 1 3 2 4 3 5 4 6 5 7 ``` # Output ``` 3 ``` # Input ``` 3 1 2 2 3 3 4 ``` # Output ``` 3 ``` # Input ``` 4 1 3 3 5 2 6 5 7 ``` # Output ``` 3 ``` # Note In the first sample: - You can schedule the workshops [1, 3], [3, 5], and [5, 7]. In the second sample: - You can schedule all three workshops [1, 2], [2, 3], and [3, 4] as they end exactly when the next one starts. In the third sample: - You can schedule the workshops [1, 3], [3, 5], and [5, 7]. It\'s not possible to schedule the [2, 6] workshop without causing overlap.","solution":"def max_non_overlapping_workshops(m, workshops): Finds the maximum number of non-overlapping workshops that can be scheduled. Parameters: m (int) : the number of workshops workshops (list of tuple of int) : list of tuples where each tuple contains two integers (s, e) representing the start and end time of a workshop Returns: int: the maximum number of non-overlapping workshops # Sorting workshops by their ending time workshops.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in workshops: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given an array of integers and a target sum. Your task is to determine if there are any two distinct elements in the array whose sum is equal to the target sum. If such a pair exists, print the pair. If no such pair exists, print \\"No pair found\\". Notes: - Each pair should be printed in ascending order of the elements. - If multiple pairs exist, you can print any one of them. - The array may contain negative numbers, and each element of the array can be used only once. Input The first line of the input contains an integer n (2 ≤ n ≤ 100) — the number of elements in the array. The second line contains the n integers of the array, separated by spaces. The third line contains the target sum. Output If there is a pair of elements whose sum is equal to the target sum, print the pair in ascending order of the elements. Otherwise, print \\"No pair found\\". Examples Input 6 1 2 3 4 5 6 7 Output 1 6 Input 4 -1 -2 -3 -4 -5 Output -3 -2 Input 5 1 2 3 4 5 10 Output No pair found Note In the first example, there are several pairs that sum up to 7, like (1,6), (2,5), and (3,4). Any one of these pairs can be printed. In the second example, the pair (-3,-2) sums up to -5, which is the target sum. In the third example, no two elements sum up to 10, so the output is \\"No pair found\\".","solution":"def find_pair_with_sum(n, arr, target): Given an array of integers and a target sum, returns a pair of distinct elements whose sum is equal to the target sum. If such a pair exists, returns the pair in ascending order; otherwise returns \\"No pair found\\". seen = set() for number in arr: complement = target - number if complement in seen: return (min(number, complement), max(number, complement)) seen.add(number) return \\"No pair found\\""},{"question":"Given an integer array arr and an integer k, you need to reverse the order of the first k elements of the array and then reverse the order of the last n-k elements of the array, where n is the length of the array. Write a function `reverse_chunks(arr, k)` to accomplish this task. Input: - The first line of input contains a single integer t, the number of test cases. - For each test case: - The first line contains two integers n and k, where n is the length of the array and k is the number of elements to reverse from the beginning. - The second line contains n space-separated integers representing the array. Output: - For each test case, print the resulting array after performing the reversed chunks operation. Constraints: 1 ≤ t ≤ 10 1 ≤ n ≤ 10^5 1 ≤ arr[i] ≤ 10^6 0 ≤ k ≤ n Example: Input: 2 5 2 1 2 3 4 5 6 3 10 20 30 40 50 60 Output: 2 1 30 20 10 40 50 60 Explanation: For the first test case, reverse the first 2 elements: [2, 1, 3, 4, 5]. For the second test case, reverse the first 3 elements: [30, 20, 10, 40, 50, 60]. Then reverse the last (6-3)=3 elements: [30, 20, 10, 60, 50, 40].","solution":"def reverse_chunks(arr, k): Reverse the order of the first k elements of the array and then reverse the order of the last n-k elements of the array. n = len(arr) if k > n: k = n first_part = arr[:k][::-1] second_part = arr[k:][::-1] return first_part + second_part def process_test_cases(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] results.append(reverse_chunks(arr, k)) return results"},{"question":"Ravi is an aspiring programmer who loves playing with sequences. Today, he is interested in generating magical sequences. A sequence of numbers is considered magical if it satisfies the following property: the difference between every two adjacent numbers is part of the sequence itself. Given an integer N, Ravi needs your help to generate the smallest possible magical sequence of length N in non-decreasing order, starting from 1. For example, if N = 3: One possible magical sequence is [1, 2, 3]. The differences between adjacent numbers are: 2 - 1 = 1 and 3 - 2 = 1. Since 1 is part of the sequence, the condition is satisfied. If it\'s not possible to generate such a sequence, return -1. Input: The first line contains an integer T, the number of test cases. The next T lines each contain an integer N. Output: For each test case, print a single line containing the generated magical sequence of length N in non-decreasing order, separated by spaces. If it\'s not possible to generate the sequence, print -1. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 Example Input: 2 3 4 Example Output: 1 1 2 1 1 1 2 Explanation: For the first test case with N = 3, the sequence [1, 1, 2] has differences 0, 1, both of which are in the sequence, making it magical. For the second test case with N = 4, the sequence [1, 1, 1, 2] has differences 0, 0, 1, all of which are in the sequence, making it magical.","solution":"def generate_magical_sequence(n): if n < 1: return -1 sequence = [1] * (n - 1) + [2] if n > 1 else [1] return sequence def solve(t, cases): results = [] for n in cases: sequence = generate_magical_sequence(n) if sequence == -1: results.append(\\"-1\\") else: results.append(\\" \\".join(map(str, sequence))) return results"},{"question":"A small startup company has developed an innovative email encryption algorithm. The encryption process involves shifting each letter in the email by a fixed number of positions in the alphabet, wrapping around if necessary. This is known as Caesar Cipher. However, as an enhancement, the company wants to ignore spaces and punctuation in the email as they do not need to be encrypted. Your task is to implement an algorithm that performs this enhanced Caesar Cipher encryption. Input The input consists of two lines: - The first line contains an integer k (0 ≤ k ≤ 25) — the fixed number of positions by which to shift each letter. - The second line contains a string s (1 ≤ |s| ≤ 104) — the text of the email. Output Output the encrypted email message by shifting each letter by k positions. Spaces and punctuation should remain unchanged. Examples Input 3 hello, world! Output khoor, zruog! Input 10 ceasar cipher test. Output mokiob mszrob dokd. Explanation: - In the first example, each letter of \\"hello, world!\\" is shifted by 3 positions. - In the second example, each letter of \\"ceasar cipher test.\\" is shifted by 10 positions, ignoring spaces and punctuation.","solution":"def caesar_cipher(k, s): Encrypts the input text using a Caesar Cipher with shift k, ignoring spaces and punctuation. Parameters: k (int): the number of positions to shift each letter. s (str): the input text to be encrypted. Returns: str: the encrypted text. encrypted = [] for char in s: if \'a\' <= char <= \'z\': # lowercase letters new_char = chr(((ord(char) - ord(\'a\') + k) % 26) + ord(\'a\')) encrypted.append(new_char) elif \'A\' <= char <= \'Z\': # uppercase letters new_char = chr(((ord(char) - ord(\'A\') + k) % 26) + ord(\'A\')) encrypted.append(new_char) else: # other characters remain unchanged encrypted.append(char) return \'\'.join(encrypted)"},{"question":"Alex is working on a project that involves analyzing stock prices. He needs to identify specific patterns in the daily closing prices of a particular stock during a given period. One pattern he is interested in is the \\"valley\\" pattern. A valley is defined as a sequence of three consecutive days where the stock price on the first day is greater than the stock price on the second day, and the stock price on the second day is less than the stock price on the third day. Write a function to help Alex find the number of valleys in the given list of stock prices. Input The input consists of two lines. The first line contains an integer n (3 ≤ n ≤ 10^5) — the number of days for which the stock prices are available. The second line contains n space-separated integers p1, p2, ..., pn (1 ≤ pi ≤ 10^4) — the stock prices on each day. Output Output one integer representing the number of valleys in the given list of stock prices. Examples Input 6 6 2 4 7 1 3 Output 2","solution":"def count_valleys(n, prices): Returns the number of valleys in the given list of stock prices. Parameters: n (int): The number of days. prices (list of int): The stock prices on each day. Returns: int: The number of valleys. valleys = 0 for i in range(1, n - 1): if prices[i - 1] > prices[i] < prices[i + 1]: valleys += 1 return valleys"},{"question":"A school is planning to provide some basic programming tasks to its students to enhance problem-solving skills. One of the tasks requires the students to find all the palindrome numbers within a specified range. A palindrome number is a number that reads the same forward and backward. You are given two natural numbers as the start and end of the range. Write a program to print all the palindrome numbers between the given range including the start and end numbers. INPUT Two space-separated natural numbers, start and end, where (1 ≤ start ≤ end ≤ 1000) OUTPUT All palindrome numbers between the start and end range (including both) SAMPLE INPUT 10 50 SAMPLE OUTPUT 11 22 33 44 Explanation INPUT 10 50 OUTPUT 11, 22, 33, 44 In this problem, the palindrome numbers in the range from 10 to 50 (inclusive) are 11, 22, 33, and 44. The program needs to identify and print these numbers.","solution":"def find_palindromes(start, end): Returns a list of palindrome numbers between the specified range (inclusive). palindromes = [] for num in range(start, end + 1): if str(num) == str(num)[::-1]: palindromes.append(num) return palindromes # Example usage to print the palindromes start, end = 10, 50 print(find_palindromes(start, end))"},{"question":"problem A magic square is a square matrix of distinct positive integers where the sum of the integers in each row, each column, and both main diagonals are the same. This common sum is called the magic constant. For example, the 3x3 magic square below has a magic constant of 15: ``` 8 1 6 3 5 7 4 9 2 ``` You\'re given an n x n matrix that almost forms a magic square, but one integer is missing (denoted by -1 in the matrix). Your task is to determine the value that should replace -1 to form a complete magic square. Input The input consists of multiple datasets. Each dataset consists of the following format: - The first line contains an integer n (3 ≤ n ≤ 50), the size of the matrix. - Each of the next n lines contains n space-separated integers, which form the matrix. One of these integers is -1 to denote the missing value. The end of the input is indicated by a line containing a single zero. Output For each dataset, output the integer that should replace -1 to form a magic square on a single line. Examples Input 3 8 1 6 3 5 7 4 9 -1 4 16 2 3 13 5 -1 10 8 9 7 6 12 4 14 15 1 0 Output 2 11 Explanation In the first example, replacing -1 with 2 forms the magic square: ``` 8 1 6 3 5 7 4 9 2 ``` In the second example, replacing -1 with 11 forms the magic square: ``` 16 2 3 13 5 11 10 8 9 7 6 12 4 14 15 1 ```","solution":"def find_missing_value(n, matrix): total_sum = (n * (n**2 + 1)) // 2 found_missing = False missing_i = -1 missing_j = -1 # Find the missing value position for i in range(n): for j in range(n): if matrix[i][j] == -1: missing_i, missing_j = i, j found_missing = True break if found_missing: break # Get the sum of the row that contains the missing value missing_row_sum = sum(matrix[missing_i][j] if matrix[missing_i][j] != -1 else 0 for j in range(n)) # Calculate the missing value missing_value = total_sum - missing_row_sum return missing_value def process_input(input_data): result = [] lines = input_data.strip().split(\'n\') index = 0 while index < len(lines): n = int(lines[index]) if n == 0: break matrix = [] for i in range(n): row = list(map(int, lines[index + 1 + i].split())) matrix.append(row) result.append(find_missing_value(n, matrix)) index += n + 1 return result"},{"question":"Anagram Substrings Given two strings, s1 and s2, determine whether the second string contains any anagram of the first string. An anagram of a string is another string with exactly the same characters, but in a different order. You have to write a function that returns true if s2 contains any anagram of s1, otherwise, return false. Input The input consists of two strings s1 and s2. - Both strings consist of lowercase English letters. - The length of s1 is between 1 and 100. - The length of s2 is between 1 and 1000. Output Return true if s2 contains any anagram of s1, otherwise, return false. Example Input s1: \\"ab\\" s2: \\"eidbaooo\\" Output true Explanation: The substring \\"ba\\" in \\"eidbaooo\\" is an anagram of \\"ab\\". Input s1: \\"ab\\" s2: \\"eidboaoo\\" Output false Explanation: The substring \\"ba\\" is never present in \\"eidboaoo\\".","solution":"from collections import Counter def contains_anagram(s1, s2): Returns true if s2 contains any anagram of s1, otherwise, return false. len_s1, len_s2 = len(s1), len(s2) if len_s1 > len_s2: return False s1_count = Counter(s1) window_count = Counter(s2[:len_s1]) if s1_count == window_count: return True for i in range(len_s1, len_s2): window_count[s2[i]] += 1 window_count[s2[i - len_s1]] -= 1 if window_count[s2[i - len_s1]] == 0: del window_count[s2[i - len_s1]] if s1_count == window_count: return True return False"},{"question":"In a distant kingdom, a wise king organizes a grand tournament with n participants. The king believes that the strongest warriors should always fight different opponents and not repeatedly battle the same one. To ensure this, the king provides the history of battles between warriors, and he wants to check if his rule has been followed. Specifically, your task is to ensure that no pair of warriors has fought more than k times over the course of the tournament. Input The first line contains two space-separated integers, n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of participants and the number of battles. The following m lines each contain two space-separated integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) indicating that warrior ai fought against warrior bi. The last line contains a single integer k (1 ≤ k ≤ m) — the maximum number of times any pair of warriors is allowed to fight each other. Output Print \\"YES\\" if the rule has been followed, and \\"NO\\" otherwise. Examples Input 5 5 1 2 2 3 3 4 4 5 1 2 2 Output YES Input 4 6 1 2 1 2 1 3 1 3 1 3 2 4 2 Output NO Note In the first example, the battle history shows that no pair of warriors fought more than 2 times, so the output is \\"YES\\". In the second example, the pair (1, 3) fought three times, which is more than the allowed maximum of 2 times, so the output is \\"NO\\".","solution":"def tournament_rule_checker(n, m, battles, k): from collections import defaultdict pair_count = defaultdict(int) for a, b in battles: if a > b: a, b = b, a pair_count[(a, b)] += 1 for count in pair_count.values(): if count > k: return \\"NO\\" return \\"YES\\""},{"question":"The park management wants to build a bike-sharing system in their park. They are planning to buy a certain number of bikes and spread them across different stations in the park to ensure all visitors have easy access to the bikes. You need to calculate the minimum number of bikes required to ensure each station has at least one bike initially. You are given the number of stations and the number of additional bike stands at each station that require at least one extra bike due to high demand. The number of minimum bikes should include one bike for each station plus additional bikes for the specified stands. Constraints * 1 leq S leq 100 (S is the number of stations) * 0 leq K leq S (K is the number of stations requiring extra bikes) * For each of the K stations, 1 leq stands[i] leq 10 Input Input is given from Standard Input in the following format: S K stands_1 stands_2 ... stands_K The first line contains two integers S (number of stations) and K (number of stations with high demand). The second line contains K integers stands_i indicating the number of additional bikes required at the specified stations. Output Print a single integer - the minimum number of bikes required. Examples Input 5 2 3 2 Output 10 Input 8 3 1 4 2 Output 16","solution":"def minimum_bikes(S, K, stands): Returns the minimum number of bikes required. S: number of stations K: number of stations with high demand stands: list of integers where each value represents the number of additional bikes required for high demand stations return S + sum(stands) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() S = int(data[0]) K = int(data[1]) stands = list(map(int, data[2:2+K])) print(minimum_bikes(S, K, stands))"},{"question":"You are given an array of integers and a single integer k. Your task is to determine whether there exists a contiguous subarray of size k with the highest possible sum. An array is called contiguous if all the elements within it are adjacent to each other in the original array. The function should return the highest sum of any contiguous subarray of size k. If there are no subarrays of size k, return -1. Input - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n) — the size of the array and the size of the subarray you have to find. - The second line contains n space-separated integers ai (-10^4 ≤ ai ≤ 10^4) — the elements of the array. Output Output a single integer — the largest sum of any contiguous subarray of size k. If no such subarray can be found, return -1. Examples Input 8 3 5 2 -1 0 3 12 6 -3 Output 21 Input 4 2 -1 -2 -3 -4 Output -3 Note In the first example, the subarray with the largest sum of size 3 is [3, 12, 6], and its sum is 21. In the second example, the subarray with the largest sum of size 2 is [-1, -2], and its sum is -3.","solution":"def max_contiguous_subarray_sum(n, k, arr): Given an array of integers and an integer k, returns the highest sum of any contiguous subarray of size k. If no such subarray can be found, returns -1. if k > n: return -1 # Initialize the sum of the first k elements max_sum = current_sum = sum(arr[:k]) # Iterate through the array, moving the window to the right for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Write a function `digit_to_word` that converts a given integer (in the range 0-9999) into its corresponding word representation in English. Input The first line contains an integer T, the total number of test cases. Each of the next T lines contains an integer N. Output For each test case, print a single line with the word representation of the integer N. Constraints: 1 ≤ T ≤ 100 0 ≤ N ≤ 9999 Examples Input 3 123 45 900 Output one hundred twenty three forty five nine hundred","solution":"def digit_to_word(n): Converts an integer (0-9999) to its word representation in English. if n == 0: return \\"zero\\" units = [\\"\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\"] teens = [\\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"] tens = [\\"\\", \\"\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] thousands = [\\"\\", \\"one thousand\\", \\"two thousand\\", \\"three thousand\\", \\"four thousand\\", \\"five thousand\\", \\"six thousand\\", \\"seven thousand\\", \\"eight thousand\\", \\"nine thousand\\"] words = [] if n // 1000 > 0: words.append(thousands[n // 1000]) n %= 1000 if n // 100 > 0: words.append(units[n // 100]) words.append(\\"hundred\\") n %= 100 if 10 <= n <= 19: words.append(teens[n - 10]) else: if n // 10 > 0: words.append(tens[n // 10]) if n % 10 > 0: words.append(units[n % 10]) return \' \'.join(words).strip() def process_cases(T, cases): results = [] for number in cases: results.append(digit_to_word(number)) return results"},{"question":"You are tasked with developing a spelling correction algorithm that can suggest corrections for a list of misspelled words given a dictionary of correct words. The algorithm should calculate the edit distance between the misspelled word and each word in the dictionary and suggest the closest matches. Edit distance is defined as the minimum number of operations (insertions, deletions, or substitutions) required to transform one word into another. Your task is to write code to implement this spell correction algorithm. Input: - First line contains integer T - number of test cases. - Each of the next T lines contains: - An integer N, the number of correct dictionary words. - N words separated by spaces, representing the dictionary. - An integer M, the number of words to be corrected. - M words separated by spaces, representing the misspelled words. Output: For each test case, print the list of corrected words. If there are multiple correct words with the same edit distance, print them all separated by commas. Each list of corrected words should be on a new line corresponding to the order in the input. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ M ≤ 10 1 ≤ Length of each word ≤ 50 Sample Input: 2 4 apple banana orange grape 3 aplle bannana orage 3 cat bat rat 2 cot bat Sample Output: apple banana,banana orange cat bat Explanation: For the first test case: - \\"aplle\\" -> \\"apple\\" (1 edit), - \\"bannana\\" -> \\"banana\\" (1 insertion) - \\"orage\\" -> \\"orange\\" (1 edit). For the second test case: - \\"cot\\" -> \\"cat\\" (1 substitution), - \\"bat\\" is already correct. Implement the suggested corrections and transformations as specified.","solution":"def edit_distance(word1, word2): Compute the edit distance between two words. m, n = len(word1), len(word2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif word1[i-1] == word2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) return dp[m][n] def spell_correction(test_cases): results = [] for test_case in test_cases: N, dictionary, M, words_to_correct = test_case corrected_words = [] for word in words_to_correct: min_distance = float(\'inf\') closest_words = [] for dict_word in dictionary: distance = edit_distance(word, dict_word) if distance < min_distance: min_distance = distance closest_words = [dict_word] elif distance == min_distance: closest_words.append(dict_word) corrected_words.append(\',\'.join(closest_words)) results.append(corrected_words) return results # Example Input input_data = [ (4, [\\"apple\\", \\"banana\\", \\"orange\\", \\"grape\\"], 3, [\\"aplle\\", \\"bannana\\", \\"orage\\"]), (3, [\\"cat\\", \\"bat\\", \\"rat\\"], 2, [\\"cot\\", \\"bat\\"]) ] print(spell_correction(input_data))"},{"question":"Input The input consists of a single string of 8 characters. The string starts with either the letter \'B\' or \'C\' followed by 7 digits. The input conforms to this specified format guaranteed to be valid. Output Output a single integer which is the sum of the digits in the string if the string starts with \'B\'. If the string starts with \'C\', output the difference between the sum of digits and the position of the first digit (1-based index). Examples Input B1234567 Output 28 Input B7654321 Output 28 Input C1234567 Output 22 Input C7654321 Output 16","solution":"def process_string(input_str): Processes the input string as per the given rules. If the string starts with \'B\', returns the sum of the digits. If the string starts with \'C\', returns the difference between the sum of digits and the position of the first digit (1). Parameters: input_str (str): The input string of 8 characters starting with \'B\' or \'C\' followed by 7 digits. Returns: int: The computed result based on the rules. if not input_str or len(input_str) != 8 or input_str[0] not in {\'B\', \'C\'} or not input_str[1:].isdigit(): raise ValueError(\\"Invalid input format\\") digits = list(map(int, input_str[1:])) digit_sum = sum(digits) if input_str[0] == \'B\': return digit_sum elif input_str[0] == \'C\': return digit_sum - 1 return 0 # Should never reach here due to input guarantee"},{"question":"You are given a series of operations to be performed on an initially empty string. Each operation is either adding a character to the end of the string or removing the last character from the string. Implement a data structure that efficiently supports these two operations and an additional operation where you output the current state of the string. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of operations. Each of the next n lines contains one of the following commands: - \\"+ c\\" where c is a lowercase English letter, meaning to add character c to the end of the string. - \\"-\\" meaning to remove the last character from the string. - \\"?\\" meaning to output the current state of the string. Output Whenever the \\"?\\" command is issued, output the current state of the string in a new line. If the string is empty, output an empty line. Examples Input 5 + a + b ? - ? Output ab a Input 3 + x + y ? Output xy Note In the first example, the operations are \\"+ a\\", \\"+ b\\", \\"?\\", \\"-\\", \\"?\\". After the first two operations, the string becomes \\"ab\\". The \\"?\\" command outputs \\"ab\\". After the \\"-\\" operation, the string becomes \\"a\\". The last \\"?\\" outputs \\"a\\". In the second example, the operations are \\"+ x\\", \\"+ y\\", \\"?\\". After the first two operations, the string becomes \\"xy\\". The \\"?\\" command outputs \\"xy\\".","solution":"class StringOperations: def __init__(self): self.string = [] def add(self, c): self.string.append(c) def remove(self): if self.string: self.string.pop() def current_string(self): return \'\'.join(self.string) def process_operations(operations): output = [] str_ops = StringOperations() for op in operations: if op.startswith(\'+\'): _, c = op.split() str_ops.add(c) elif op == \\"-\\": str_ops.remove() elif op == \\"?\\": output.append(str_ops.current_string()) return output"},{"question":"In a small town, there is an annual competition that involves arranging a row of dominoes in such a way that they fall after the first one is pushed. Each domino has a weight, and the goal is to maximize the impact weight of the sequence. The impact weight of a sequence is determined by summing up the weights of all dominoes but only if they fall consecutively starting from the first pushed domino. You are given the weights of the dominoes in the sequence they are placed. You must determine the maximum impact weight that can be achieved by rearranging the sequence of dominoes. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of dominoes. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the dominoes. Output Output a single integer — the maximum impact weight that can be achieved. Examples Input 4 4 1 3 2 Output 10 Input 3 10 20 30 Output 60","solution":"def max_impact_weight(n, weights): Returns the maximum impact weight that can be achieved by rearranging the sequence of dominoes. Sorts the list of weights and returns the sum. return sum(sorted(weights))"},{"question":"In a remote village, there is a communal cooking festival where villagers combine their ingredients to make a giant dish. Each ingredient has a certain taste value, which can be positive (adding to the taste) or negative (reducing the taste). The villagers can choose to either include or exclude any ingredient in the final dish to maximize the overall taste. Given a list of ingredients and their taste values, your task is to determine the maximum possible taste score of the dish after picking the optimal subset of ingredients. Input The first line of input contains a single integer n (1 ≤ n ≤ 105), the number of ingredients. The second line contains n space-separated integers t1, t2, ..., tn (|ti| ≤ 107) - the taste values of the ingredients. Output Print a single integer, the maximum possible taste score. Examples Input 5 -1 2 3 -4 5 Output 10 Input 6 -7 -3 -2 5 8 -1 Output 13 Note In the first example, the optimal subset of ingredients to include in the dish is {2, 3, 5}, which yields the maximum taste score of 2 + 3 + 5 = 10. In the second example, the optimal subset of ingredients is {5, 8}, yielding the maximum taste score of 5 + 8 = 13.","solution":"def max_taste_score(n, taste_values): Determine the maximum possible taste score of the dish by including only non-negative taste values. :param n: int, number of ingredients :param taste_values: list of int, taste values of the ingredients :return: int, maximum possible taste score # The maximum taste score will be the sum of all non-negative taste values return sum(t for t in taste_values if t > 0)"},{"question":"You are given an array of integers, and you need to reorder the array such that every element at index `i` is greater than the element at index `i-1` and less than the element at index `i+1`, if such neighbors exist. If there are multiple solutions, you may return any of them. Write a function `wiggleSort` that takes an array of integers `nums` and reorders it in-place to satisfy the condition described. Input - An integer array `nums` of length `n` (1 ≤ n ≤ 100,000) where |nums[i]| ≤ 10^9. Output - The function should reorder the array in-place and should not return anything. Example For the input: 4 1 5 1 1 6 Expected (one possible) output: 1 6 1 5 For the input: 6 1 3 2 2 3 1 Expected (one possible) output: 1 2 1 3 2 3 Note In the first sample, one possible valid reordering of the array is [1, 6, 1, 5]. Here, 6 is greater than 1 (its left neighbor) and 1 is less than 5 (its right neighbor). Similarly, 5 is greater than 1 (its left neighbor). In the second sample, one possible valid reordering of the array is [1, 2, 1, 3, 2, 3]. Here, every element at index `i` satisfies the condition of being greater than the previous element and less than the next element if any.","solution":"def wiggleSort(nums): Rearranges the elements in nums such that every element at index `i` is greater than the element at index `i-1` and less than the element at index `i+1` if such neighbors exist. nums.sort() mid = (len(nums) + 1) // 2 # Create two halves, reverse the second half left, right = nums[:mid], nums[mid:] nums[::2], nums[1::2] = left[::-1], right[::-1]"},{"question":"Alice is researching sequences with unique properties and came across an interesting sequence problem. Consider an integer sequence a of length n. Let\'s define function f(a) as: f(a) = sum of absolute differences between consecutive elements. In other words, f(a) = |a1 - a2| + |a2 - a3| + ... + |an-1 - an|. Alice wants to construct a sequence of length n such that its f(a) is maximized. Can you help her? Input A single line contains an integer n (2 ≤ n ≤ 10^6). Output Print n space-separated integers forming sequence a such that f(a) is maximized. Examples Input 2 Output 1 2 Input 3 Output 1 3 2 Input 4 Output 1 4 2 3 Note For the third example, the calculation would be: * |1 - 4| + |4 - 2| + |2 - 3| = 3 + 2 + 1 = 6","solution":"def max_diff_sequence(n): Constructs a sequence of length n such that the function f(a) is maximized. The sequence is constructed by picking numbers in a strategic way to maximize the absolute differences. :param n: int number representing the length of the sequence (2 ≤ n ≤ 10^6) :return: a list of n integers for the sequence a that maximizes f(a) if n == 2: return [1, 2] result = [] # We use two pointers approach, one pointer starts from 1 and the other from n, # and we keep alternating their values while adding to the result. i, j = 1, n while i <= j: if i != j: result.append(i) result.append(j) else: result.append(i) i += 1 j -= 1 return result # Example Usage: # n = 3 # print(max_diff_sequence(n)) # Output: [1, 3, 2]"},{"question":"Asha is arranging a sequence of beads in a straight line. Each bead has a distinct color represented by an integer. She wants to perform the following operation any number of times: * Choose any bead and move it to a new position in the sequence. The cost of moving a bead from position i to position j is |i - j| yen (the absolute difference of i and j). Asha wants to minimize the total cost required to arrange the beads in non-decreasing order of their colors. Constraints * 1 leq N leq 100000 * 1 leq color_i leq 100000 * All values in input are integers. Input Input is given from Standard Input in the following format: N color_1 color_2 color_3 ... color_N Output Print an integer representing the minimum total cost to arrange the beads in non-decreasing order of their colors. Examples Input 4 3 1 2 4 Output 2 Input 5 5 2 3 1 4 Output 6","solution":"def min_cost_to_sort_balls(n, colors): This function takes the number of beads n and a list of colors representing the beads\' colors and returns the minimum total cost required to arrange the beads in non-decreasing order of their colors. Parameters: n (int): The number of beads. colors (list): A list of integers representing the colors of the beads. Returns: int: The minimum total cost to arrange the beads in non-decreasing order of their colors. indexed_colors = list(enumerate(colors)) indexed_colors.sort(key=lambda x: x[1]) # Use a Fenwick Tree (also known as Binary Indexed Tree) to calculate the cost effectively fenwick_tree = FenwickTree(n) total_cost = 0 for original_index, _ in indexed_colors: current_cost = fenwick_tree.range_sum(0, original_index) total_cost += original_index - current_cost fenwick_tree.update(original_index, 1) return total_cost class FenwickTree: def __init__(self, size): self.size = size self.data = [0] * (size + 1) def update(self, index, value): index += 1 while index <= self.size: self.data[index] += value index += index & -index def prefix_sum(self, index): index += 1 result = 0 while index > 0: result += self.data[index] index -= index & -index return result def range_sum(self, left, right): return self.prefix_sum(right) - self.prefix_sum(left - 1)"},{"question":"You are given a list of integers representing the heights of people standing in a queue. You need to determine the minimum number of people that need to be removed from the queue so that the remaining people are in non-decreasing order of height. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case, the first line contains a single integer N representing the number of people in the queue. The second line contains N space-separated integers representing the heights of the people in the queue. Output For each test case, output a single integer - the minimum number of people that need to be removed from the queue to make the remaining heights non-decreasing. Constraints 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^4 1 ≤ height of each person ≤ 10^9 Example Input: 3 5 1 3 2 3 5 4 4 3 2 1 6 1 2 3 4 5 6 Output: 1 3 0 Explanation Example case 1. We can remove the person with height 2 to make the remaining queue [1, 3, 3, 5] which is non-decreasing. So, we need to remove only 1 person. Example case 2. We need to remove the person with heights [4, 3, 2] to make the remaining queue [1] which is non-decreasing. Hence, we need to remove 3 people. Example case 3. The queue is already in non-decreasing order, so we don\'t need to remove anyone. Hence, answer is 0.","solution":"def min_removals_to_get_non_decreasing_order(queues): def longest_non_decreasing_subsequence(seq): from bisect import bisect_right sub = [] for x in seq: if len(sub) == 0 or sub[-1] <= x: sub.append(x) else: idx = bisect_right(sub, x) sub[idx] = x return len(sub) results = [] for queue in queues: n = len(queue) lnds_length = longest_non_decreasing_subsequence(queue) removals = n - lnds_length results.append(removals) return results"},{"question":"Takahashi, a talented chess master, has created a new puzzle on a 2D plane. He uses several unconnected line segments on the plane, each representing a rook\'s movement on a chessboard. A rook can move any number of squares along a row or column. Though the rook\'s start and end coordinates are confined to the plane, they do not necessarily follow the integers used in chess squares. Your task is to determine how many unique rooks are present on the plane. Each rook\'s line segment represents its movement, regardless of the direction. # Input The input consists of a number of datasets. Each dataset is formatted as follows: ``` m x1 y1 x2 y2 x3 y3 x4 y4 . . . xm xm xm xm ``` - The first line contains an integer `m` (1 ≤ m ≤ 1000), representing the number of line segments. - The following `m` lines each contain four integers `x1 y1 x2 y2`, representing the coordinates of the two endpoints of a line segment. The end of the input is indicated by a line containing only the integer `0`. # Output For each dataset, output a single integer representing the number of unique rooks on the plane. # Examples Input ``` 4 1 2 1 5 2 3 2 7 3 4 3 5 4 6 4 8 5 0 0 0 4 4 0 4 4 2 2 5 2 3 1 5 1 0 2 4 2 0 ``` Output ``` 4 4 ``` # Explanation In the first dataset, there are 4 unique rook movements, each along its separate row or column. Therefore, the output is 4. In the second dataset, despite having segments with shared coordinates, each segment represents a unique rook movement, resulting in an output of 4.","solution":"def count_unique_rooks(input_data): Given the input data representing several datasets of line segments, this function counts the number of unique rooks in each dataset. Each rook moves along a set of line segments, either horizontally or vertically. Parameters: input_data (str): A multiline string containing several datasets. Returns: List[int]: A list containing the number of unique rooks for each dataset. lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(lines): m = int(lines[index]) if m == 0: break segments = set() for i in range(1, m + 1): x1, y1, x2, y2 = map(int, lines[index + i].split()) if x1 == x2: segments.add((x1, \'v\')) # vertical segment elif y1 == y2: segments.add((y1, \'h\')) # horizontal segment results.append(len(segments)) index += m + 1 return results"},{"question":"In this problem, you are tasked with creating a simplified file system from a given series of commands and queries. Each command adds a file to the system, while each query asks you to find the most recently added file in a specific directory. The file system is represented as a tree where each directory can have multiple subdirectories and files. Directories and files have unique names. The root directory is named \\"root\\". Commands: - `mkdir path`: Creates a new directory at the specified path. The path is given as a series of directory names separated by slashes (\\"/\\"). If the directory already exists, this command is ignored. - `addfile path filename timestamp`: Adds a new file with the specified filename to the directory at the specified path. The file has a creation timestamp. - Queries `query path`: Returns the name of the most recently added file in the directory specified by the path. If there are no files in the specified directory, return \\"No files found\\". Input: - The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000), representing the number of commands and queries. - The next `n` lines contain either a command or a query: - Commands will be one of the following: - `mkdir path` - `addfile path filename timestamp` - Queries will be: - `query path` Output: - For each query, print the name of the most recently added filename in the specified directory, or \\"No files found\\" if no files exist in that directory. Example: Input: ``` 10 mkdir /home/user/docs addfile /home user.txt 1627852800 addfile /home/user docs.txt 1627852860 mkdir /home/user/photos addfile /home/user/photos pic1.jpg 1627852890 query /home query /home/user query /home/user/photos mkdir /home/user/docs/private addfile /home/user/docs/private secret.doc 1627853000 query /home/user/docs/private ``` Output: ``` user.txt docs.txt pic1.jpg secret.doc ``` Explanation: 1. The first `mkdir` command creates a directory `/home/user/docs`. 2. The first `addfile` command adds a file `user.txt` in the `/home` directory with a timestamp 1627852800. 3. The second `addfile` command adds a file `docs.txt` in the `/home/user` directory with a timestamp 1627852860. 4. The second `mkdir` command creates a directory `/home/user/photos`. 5. The third `addfile` command adds a file `pic1.jpg` in the `/home/user/photos` directory with a timestamp 1627852890. 6. The first `query` asks for the most recently added file in `/home`, which is `user.txt`. 7. The second `query` asks for the most recently added file in `/home/user`, which is `docs.txt`. 8. The third `query` asks for the most recently added file in `/home/user/photos`, which is `pic1.jpg`. 9. The third `mkdir` command creates a directory `/home/user/docs/private`. 10. The fourth `addfile` command adds a file `secret.doc` in the `/home/user/docs/private` directory with a timestamp 1627853000. 11. The fourth `query` asks for the most recently added file in `/home/user/docs/private`, which is `secret.doc`. This problem assesses your ability to work with tree structures and handle commands and queries efficiently.","solution":"class FileSystem: def __init__(self): self.directories = {\\"root\\": {}} self.files = {} def mkdir(self, path): parts = path.split(\\"/\\") current = self.directories for part in parts: if part not in current: current[part] = {} current = current[part] def addfile(self, path, filename, timestamp): self.mkdir(path) if path not in self.files: self.files[path] = [] self.files[path].append((filename, timestamp)) self.files[path] = sorted(self.files[path], key=lambda x: x[1], reverse=True) def query(self, path): if path not in self.files or not self.files[path]: return \\"No files found\\" return self.files[path][0][0] def process_commands(commands): fs = FileSystem() results = [] for command in commands: parts = command.split() if parts[0] == \\"mkdir\\": fs.mkdir(parts[1]) elif parts[0] == \\"addfile\\": path = parts[1] filename = parts[2] timestamp = int(parts[3]) fs.addfile(path, filename, timestamp) elif parts[0] == \\"query\\": results.append(fs.query(parts[1])) return results"},{"question":"You are given a string of words separated by spaces. Your task is to write a program that finds the word that appears most frequently in the string and outputs it. If multiple words have the same highest frequency, output the one that appears first in the string. Input A single line containing a string of words separated by spaces. The string will have at least one word and will only contain lowercase alphabetical letters and spaces. Output Output the word that appears most frequently in the input string. Examples Input \\"apple banana apple strawberry banana apple\\" Output \\"apple\\" Input \\"dog cat dog fish dog cat cat fish dog\\" Output \\"dog\\"","solution":"def most_frequent_word(s): Finds the word that appears most frequently in the given string. If multiple words have the same highest frequency, returns the one that appears first. words = s.split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 max_freq = max(frequency.values()) for word in words: if frequency[word] == max_freq: return word"},{"question":"Yuko has N items in her backpack, each with a weight and a value. She wants to select a subset of these items such that the total weight does not exceed W, and the total value is maximized. Determine the maximum value she can obtain with the given constraint. Constraints * 1 leq N leq 100 * 1 leq W leq 1000 * 1 leq weight_i, value_i leq 100 Input The input is given from Standard Input in the following format: ``` N W weight_1 value_1 weight_2 value_2 ... weight_N value_N ``` Output Print the maximum value that can be obtained without exceeding the total weight W. Examples Input ``` 3 50 10 60 20 100 30 120 ``` Output 220 Input ``` 4 10 5 50 4 40 6 30 3 20 ``` Output 90","solution":"def knapsack(N, W, items): Returns the maximum value that can be obtained without exceeding the total weight W. Parameters: N (int): Number of items W (int): Maximum weight capacity of the knapsack items (list of tuples): Each tuple contains weight and value of an item Returns: int: Maximum value that can be obtained # Initialize a 2D DP array dp = [[0] * (W + 1) for _ in range(N + 1)] for i in range(1, N + 1): weight, value = items[i - 1] for w in range(W + 1): if weight <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + value) else: dp[i][w] = dp[i - 1][w] return dp[N][W] # Reading input from Standard Input (stdin) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) W = int(data[1]) items = [] for i in range(N): weight = int(data[2 + i * 2]) value = int(data[3 + i * 2]) items.append((weight, value)) print(knapsack(N, W, items)) if __name__ == \\"__main__\\": main()"},{"question":"Given a list of non-negative integers representing the heights of buildings, design an algorithm to determine if you can walk from the leftmost building to the rightmost building. You can walk from building **i** to building **i + 1** if the height of building **i + 1** is less than or equal to the height of building **i** plus a given maximum step value, **x**. Input format: - The first line contains two integers, **n** and **x**, where **n** is the number of buildings and **x** is the maximum step value. - The second line contains **n** non-negative integers denoting the heights of the buildings. Output format: - Print \\"YES\\" if you can walk from the leftmost building to the rightmost building, otherwise print \\"NO\\". Constraints: - 1 ≤ n ≤ 100,000 - 0 ≤ height of each building ≤ 100,000 - 1 ≤ x ≤ 100,000 SAMPLE INPUT 1 5 3 1 2 3 4 5 SAMPLE OUTPUT 1 YES SAMPLE INPUT 2 5 1 1 3 2 3 1 SAMPLE OUTPUT 2 NO Explanation: For the first sample, starting from the first building (height 1), you can walk to the second building (height 2), then to the third building (height 3), and so on, as the height difference between consecutive buildings is always 1, which is less than or equal to the given maximum step value of 3. For the second sample, you cannot walk from the first building (height 1) to the second building (height 3) as the height difference is 2, which is greater than the given maximum step value of 1.","solution":"def can_walk_across_buildings(n, x, heights): Determine if it\'s possible to walk from the leftmost building to the rightmost building. Parameters: n (int): Number of buildings. x (int): Maximum step value. heights (list): List of heights of buildings. Returns: str: \\"YES\\" if possible to walk across buildings, \\"NO\\" otherwise. for i in range(n - 1): if heights[i + 1] > heights[i] + x: return \\"NO\\" return \\"YES\\""},{"question":"Nina has a square grid with side length n. She wants to place several squares of side length 2 on this grid such that no two squares overlap and all squares fully fit within the grid. A square can be represented by its top-left corner cell (i, j) and will occupy cells (i, j), (i, j+1), (i+1, j), and (i+1, j+1). Your task is to help Nina find one such arrangement of the maximum possible number of non-overlapping 2x2 squares on the grid. Input The first line contains a single integer n (2 ≤ n ≤ 1000) — the side length of the grid. Output The first line should contain a single integer k — the number of non-overlapping 2x2 squares you can place on the grid. Each of the next k lines should contain two space-separated integers i and j — the row and column indices of the top-left corner of each 2x2 square. If there are multiple solutions, you can print any of them. It is guaranteed that at least one solution exists. Examples Input 4 Output 4 1 1 1 3 3 1 3 3 Input 3 Output 1 1 1","solution":"def place_squares(n): Finds one arrangement of the maximum number of non-overlapping 2x2 squares on an n x n grid. Parameters: n (int): Side length of the grid. Returns: (int, list): Number of 2x2 squares and the list of their top-left coordinates. squares = [] for i in range(1, n, 2): for j in range(1, n, 2): # Checking if the 2x2 square can fit within the bounds if i + 1 <= n and j + 1 <= n: squares.append((i, j)) return len(squares), squares"},{"question":"You have been tasked with returning two arrays from a given array of integers: 1. One array should contain all the even integers from the original array. 2. The other array should contain all the odd integers from the original array. Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Where N is the number of elements in the array and A_1 A_2 ... A_N are the integers in the array. Output Output even integers on one line, followed by odd integers on the next. Each array\'s elements should be printed in their original order. Constraints * 1 leq N leq 100 * -1000 leq A_i leq 1000 Examples Input 5 4 3 7 8 2 Output 4 8 2 3 7 Input 3 -1 4 5 Output 4 -1 5","solution":"def segregate_even_odd(arr): Segregates the even and odd numbers from the given array of integers. Parameters: arr (list): List of integers. Returns: tuple: Two lists, first containing even integers and second containing odd integers. even = [x for x in arr if x % 2 == 0] odd = [x for x in arr if x % 2 != 0] return even, odd"},{"question":"Concatenation of Strings Given two strings S_1 and S_2, compute the concatenated result of S_1 followed by S_2. Input Two strings S_1 and S_2 separated by a space character are given in a line. Output Print the concatenated result in a line. Constraints * The length of each string is between 1 and 10^6 characters. * The strings can include any printable ASCII characters except space. Sample Input 1 hello world Sample Output 1 helloworld Sample Input 2 123 456 Sample Output 2 123456 Sample Input 3 abc XYZ Sample Output 3 abcXYZ Sample Input 4 foo bar Sample Output 4 foobar Example Input dog cat Output dogcat","solution":"def concatenate_strings(s): This function takes a single input string, splits it into two parts separated by a space, and returns the concatenated result of the two parts. s1, s2 = s.split(\' \') return s1 + s2"},{"question":"Given an integer `n`, write a function that returns a list of all the even numbers from 1 to `n`. # Function Signature ```python def find_even_numbers(n: int) -> List[int]: pass ``` # Input - An integer `n` where `1 <= n <= 10^6`. # Output - A list of integers containing all the even numbers between 1 and `n`. # Example ```python find_even_numbers(10) # Returns [2, 4, 6, 8, 10] find_even_numbers(15) # Returns [2, 4, 6, 8, 10, 12, 14] find_even_numbers(1) # Returns [] ``` # Constraints - The solution should not use extra space proportional to `n` (i.e., avoid creating intermediate lists of size `n` when `n` is very large). - Focus on optimizing both time and space complexity where possible.","solution":"from typing import List def find_even_numbers(n: int) -> List[int]: Returns a list of all even numbers from 1 to n. Parameters: - n: The upper limit (inclusive). Returns: - List[int]: List of all even numbers from 1 to n. return list(range(2, n+1, 2))"},{"question":"Given an m x n grid consisting of non-negative integers, you can perform the following operation any number of times: Choose any cell (i, j) in the grid and increment or decrement its value by 1. Given a target sum S, your task is to determine whether it is possible to transform the grid such that the sum of all the elements equals S. Input: The first line contains the number of test cases T. 2*T lines follow, 2 for each case. The first line of a test case contains the numbers m, n, and S. The next line contains m*n integers representing the grid elements. Output: Output T lines, one corresponding to each test case. For a test case, output \\"YES\\" if there is a sequence of operations to make the sum of the grid\'s elements equal to S, and \\"NO\\" otherwise. Sample Input: 2 2 2 10 1 2 3 4 3 3 15 5 5 5 5 5 5 5 5 5 Sample Output: YES NO Constraints: 1 ≤ T ≤ 1000 1 ≤ m, n ≤ 50 0 ≤ grid_element ≤ 100 0 ≤ S ≤ 10000","solution":"def can_transform_to_target_sum(m, n, grid, target_sum): current_sum = sum(sum(row) for row in grid) return \\"YES\\" if target_sum % (m * n) == current_sum % (m * n) else \\"NO\\" def solve(test_cases): results = [] for case in test_cases: m, n, S = case[\\"dimensions\\"] grid = case[\\"grid\\"] result = can_transform_to_target_sum(m, n, grid, S) results.append(result) return results"},{"question":"Anna is an avid reader and always maintains a list of books she wants to read. Each book has a unique ID. Anna is very particular about the order in which she reads her books. She only reads books in a well-defined alternating pattern: first, she picks the book with the smallest ID from her list, then the book with the largest remaining ID, then the next smallest, and so on until all books are read. Given the list of book IDs, your task is to help Anna create her reading order that follows her pattern. Input format: - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains an integer `N`, the number of books. - The second line contains `N` space-separated integers representing the IDs of the books. Output format: - For each test case, output the reading order for Anna in a single line, with each ID separated by a space. SAMPLE INPUT 2 6 5 1 9 3 7 4 4 8 2 10 6 SAMPLE OUTPUT 1 9 3 7 4 5 2 10 6 8 Explanation In test case 1: The list of book IDs is 5 1 9 3 7 4. The smallest ID is 1 and the largest ID is 9. The reading order starts with: 1 9 Remaining IDs are: 5 3 7 4. The next smallest ID is 3 and the next largest ID is 7. The reading order continues with: 1 9 3 7 Remaining IDs are: 5 4. The next smallest ID is 4 and the next largest ID is 5. The final reading order is: 1 9 3 7 4 5 In test case 2: The list of book IDs is 8 2 10 6. The smallest ID is 2 and the largest ID is 10. The reading order starts with: 2 10 Remaining IDs are 8 6. The next smallest ID is 6 and the next largest ID is 8. The final reading order is: 2 10 6 8","solution":"def reading_order(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] books = test_cases[i][1] books.sort() left = 0 right = N - 1 order = [] while left <= right: if left == right: order.append(books[left]) break order.append(books[left]) order.append(books[right]) left += 1 right -= 1 results.append(\\" \\".join(map(str, order))) return results"},{"question":"You are given an array of integers and a number \'k\'. Your task is to determine if there is a subarray of consecutive elements in the array that sums up to \'k\'. If such a subarray exists, print \\"YES\\", otherwise print \\"NO\\". Input: First line of input contains T, the number of test cases. Each of the next T lines contains two integers n and k, followed by an array of n integers. Output: For each test case, print \\"YES\\" if there exists a subarray with sum equals to k, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 -10^4 ≤ array elements ≤ 10^4 -10^9 ≤ k ≤ 10^9 SAMPLE INPUT 2 5 15 1 2 3 4 5 6 7 1 2 3 4 5 6 SAMPLE OUTPUT YES YES","solution":"def check_subarray_sum_exists(T, test_cases): Determines if there is a subarray of consecutive elements that sums up to k. Parameters: T (int): The number of test cases. test_cases (list of tuples): Each tuple contains (n, k, array) Returns: list of str: \\"YES\\" or \\"NO\\" for each test case. results = [] for n, k, arr in test_cases: found = False current_sum = 0 sum_set = set() for num in arr: current_sum += num if current_sum == k or (current_sum - k) in sum_set: found = True break sum_set.add(current_sum) if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Create an algorithm to find the longest increasing subsequence of a given list of integers. An increasing subsequence is a sequence of numbers where each number is greater than the previous one in the sequence. The list may not be sorted, and multiple increasing subsequences may exist. Your task is to find the length of the longest one. INPUT: The first line contains an integer n, representing the number of elements in the list. The second line contains n space-separated integers, denoting the elements of the list. OUTPUT: Output a single integer which is the length of the longest increasing subsequence found in the list. CONSTRAINTS: 1 ≤ n ≤ 10^5 -10^9 ≤ elements of the list ≤ 10^9 SAMPLE INPUT: 10 10 22 9 33 21 50 41 60 80 7 SAMPLE OUTPUT: 6 EXPLANATION: The longest increasing subsequence in the sample input is [10, 22, 33, 50, 60, 80], and its length is 6. Other increasing subsequences of length 6 exist, but this is one example.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the list of integers. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:])) print(length_of_lis(nums))"},{"question":"Scenario: You are designing a simulation for a new amusement park that includes a complex system of queues for popular rides. The park\'s ride system is defined by a series of nodes (representing locations) connected by directed edges (representing paths). Each node can have multiple incoming and outgoing edges, and each edge has a specific time duration for travel. Problem: Given a directed graph representing the park, you need to determine the shortest time required to travel from a starting location to a destination. If the destination is not reachable from the start, the travel time should be considered infinite. Input: The input consists of: - An integer N, representing the number of nodes (locations) in the park. - An integer M, representing the number of edges (paths) in the park. - An integer S, representing the starting node. - An integer D, representing the destination node. - M lines, each containing three integers U, V, and T, indicating that there is a directed edge from node U to node V with a travel time of T. Output: Output a single integer which is the minimum travel time from the start node S to the destination node D. If the destination is not reachable, output -1. Constraints: - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 10000 - 0 ≤ U, V < N - 1 ≤ T ≤ 100 - 0 ≤ S, D < N Example: Input: 5 7 0 4 0 1 10 0 2 3 1 2 1 2 1 4 1 3 2 2 3 8 3 4 7 Output: 17 Explanation: The shortest path from node 0 to node 4 is 0 -> 2 -> 1 -> 3 -> 4 with a total travel time of 3 + 4 + 2 + 7 = 16. Note: You can use Dijkstra\'s algorithm with a priority queue to find the shortest path efficiently.","solution":"import heapq def shortest_travel_time(N, M, S, D, edges): Returns the shortest travel time from the start node S to the destination node D in the given directed graph. If the destination is not reachable, return -1. graph = [[] for _ in range(N)] for U, V, T in edges: graph[U].append((V, T)) # Dijkstra\'s algorithm pq = [(0, S)] distances = {node: float(\'inf\') for node in range(N)} distances[S] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_node == D: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 if distances[D] == float(\'inf\') else distances[D]"},{"question":"A software company is working on a new data compression library. One of the tasks is to implement a function that takes a list of strings and compresses it into a single string. The compressed string should be able to be decompressed back to the original list of strings. The compression should be efficient, minimizing the length of the resulting string. Implement the `compress` and `decompress` functions: - `compress(lst: List[str]) -> str`: This function takes a list of strings and returns a compressed string. - `decompress(comp_str: str) -> List[str]`: This function takes a compressed string and returns the original list of strings. # Requirements: 1. The `compress` function should join the strings in the list using a non-alphanumeric delimiter that does not appear in any of the input strings. 2. The `compress` function should choose the delimiter dynamically based on the input list. 3. The `decompress` function must revert the compressed string back to the original list. 4. Both functions should handle edge cases such as empty lists or strings with various characters. # Example: Input: ```python lst = [\\"hello\\", \\"world\\", \\"compression\\", \\"test\\"] ``` Compressed Output: ```python \\"hello|world|compression|test\\" # Note: The actual delimiter may vary ``` Decompressed Output: ```python [\\"hello\\", \\"world\\", \\"compression\\", \\"test\\"] ``` # Input: ```python compressed_str = \\"hello|world|compression|test\\" ``` Decompressed Output: ```python [\\"hello\\", \\"world\\", \\"compression\\", \\"test\\"] ``` # Constraints: 1. Strings in the list may contain alphanumeric characters, spaces, punctuation, and special characters. 2. The initial input list will have a length between 1 and 1000. 3. Each string in the list will have a length between 0 and 100.","solution":"from typing import List def compress(lst: List[str]) -> str: Compress a list of strings into a single string using a dynamically chosen non-alphanumeric delimiter. # Start with the \'|\' delimiter as a candidate delimiter = \'|\' # Check if the delimiter is already in any of the strings. If so, choose another one. for string in lst: if delimiter in string: # Change to another delimiter delimiter = \'~\' break return delimiter.join(lst), delimiter def decompress(comp_str: str, delimiter: str) -> List[str]: Decompress a compressed string back into a list of strings using the given delimiter. return comp_str.split(delimiter)"},{"question":"A kingdom has a well-connected road network consisting of N cities and M bidirectional roads. The king wants to decorate one or more connected components of this network with beautiful flowers. The cost of decorating a connected component equals the number of cities in that component. Given the kingdom\'s road network, determine the minimum cost to decorate the kingdom such that each city is either part of the decorated area or has an immediate road (connecting directly) to at least one decorated city. Input The first line contains two integers N and M (1 ≤ N ≤ 100,000, 0 ≤ M ≤ 100,000) — the number of cities and the number of roads respectively. The following M lines each contain two integers u and v (1 ≤ u, v ≤ N, u ≠ v) indicating that there is a bidirectional road between city u and city v. Output Output the minimum cost to decorate the kingdom. Examples Input 5 3 1 2 1 3 4 5 Output 2 Input 4 2 1 2 3 4 Output 2 Input 3 0 Output 3 Note In the first example, the kingdom has two connected components {1,2,3} and {4,5}. Decorating either of the two connected components incurs a cost of 2, which is the minimum cost. In the second example, there are two connected components {1,2} and {3,4}. Therefore, the minimum cost is to decorate both components separately because no city outside a decorated area would have an immediate road to a decorated city in a different component. In the last example, no roads exist. Therefore, each city must be decorated individually, giving a total cost equal to the number of cities.","solution":"def minimum_cost_to_decorate_kingdom(N, M, roads): from collections import defaultdict, deque if M == 0: return N # Graph representation graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) components = [] def bfs(start): queue = deque([start]) visited[start] = True component_size = 0 while queue: node = queue.popleft() component_size += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component_size for city in range(1, N + 1): if not visited[city]: component_size = bfs(city) components.append(component_size) if len(components) == 1: return 1 else: return len(components)"},{"question":"You are given a grid with \'n\' rows and \'m\' columns. Each cell in the grid can be either walkable (represented by \'.\') or blocked (represented by \'#\'). Your task is to determine the minimum number of moves required to travel from the top-left corner of the grid (cell (1,1)) to the bottom-right corner of the grid (cell (n,m)). You can move to an adjacent walkable cell in one of the four directions (up, down, left, right). Write a program to find the minimum number of moves needed. If it\'s not possible to reach the destination, return -1. Input The first line contains two integers \'n\' and \'m\' (1 ≤ n, m ≤ 1000). The next \'n\' lines contain \'m\' characters each, representing the grid. Each character is either \'.\' (walkable) or \'#\' (blocked). Output Output a single integer — the minimum number of moves needed to travel from the top-left corner to the bottom-right corner. If it\'s not possible, output -1. Examples Input 3 3 . . . . # . . . . Output 4 Input 3 3 . # . # # . . . . Output -1 Input 5 7 . . . # . . . . # . # . # . . # . . . # . . . # # . # . . # . . . . . Output 10","solution":"from collections import deque def min_moves(n, m, grid): Returns the minimum number of moves required to travel from the top-left corner to the bottom-right corner of the grid. If it\'s not possible, returns -1. # Directions (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if the starting or ending positions are blocked if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 # Initialize queue for BFS with starting position queue = deque([(0, 0)]) # Distance matrix to keep track of the minimum moves dist = [[float(\'inf\')] * m for _ in range(n)] dist[0][0] = 0 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the new position is within bounds and walkable if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and dist[nx][ny] == float(\'inf\'): queue.append((nx, ny)) dist[nx][ny] = dist[x][y] + 1 # If we reach the bottom-right corner, return the distance if nx == n-1 and ny == m-1: return dist[nx][ny] return -1 if dist[n-1][m-1] == float(\'inf\') else dist[n-1][m-1]"},{"question":"You are given a large grid of size MxN. Each cell in the grid initially contains the number 1. You have Q queries, where each query consists of four integers x1, y1, x2, and y2, representing a sub-grid with corners (x1, y1) and (x2, y2). For each query, increment every element within the specified sub-grid by 1. After processing all queries, your task is to find the maximum value present in the grid. Input The first line contains three integers M, N, and Q, denoting the number of rows, columns, and queries, respectively. The next Q lines each contain four integers x1, y1, x2, y2, describing the sub-grid to be incremented by 1. Output Print a single integer, which is the maximum value present in the grid after processing all the queries. Constraints 1 ≤ M, N ≤ 1000 1 ≤ Q ≤ 100,000 1 ≤ x1 ≤ x2 ≤ M 1 ≤ y1 ≤ y2 ≤ N Example Input: 3 3 2 1 1 2 2 2 2 3 3 Output: 3","solution":"def find_max_value(M, N, queries): Finds the maximum value in the grid after processing the given queries. Parameters: M (int): Number of rows. N (int): Number of columns. queries (list of tuples): A list of queries, each represented as a tuple (x1, y1, x2, y2). Returns: int: The maximum value present in the grid after processing all the queries. # Initialize the grid with zeros grid = [[0]* (N + 1) for _ in range(M + 1)] # Process queries using a difference array approach for x1, y1, x2, y2 in queries: grid[x1][y1] += 1 if x2 + 1 <= M: grid[x2 + 1][y1] -= 1 if y2 + 1 <= N: grid[x1][y2 + 1] -= 1 if x2 + 1 <= M and y2 + 1 <= N: grid[x2 + 1][y2 + 1] += 1 # Apply the difference approach to get the final grid values for i in range(1, M + 1): for j in range(1, N + 1): if i > 1: grid[i][j] += grid[i - 1][j] if j > 1: grid[i][j] += grid[i][j - 1] if i > 1 and j > 1: grid[i][j] -= grid[i - 1][j - 1] # Find the maximum value in the grid max_value = 0 for i in range(1, M + 1): for j in range(1, N + 1): max_value = max(max_value, grid[i][j] + 1) return max_value"},{"question":"You are given an array of integers. Arrange the elements of the array in a way that the difference between consecutive elements is minimized. If there are multiple solutions, return any of them. Input The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains an integer n (2 ≤ n ≤ 10^5) — the length of the array. The second line of each test case contains n integers separated by spaces (1 ≤ arr[i] ≤ 10^9) — the elements of the array. Output For each test case, print the rearranged array with minimized differences between consecutive elements. Example Input 2 5 4 2 1 3 5 6 10 12 8 9 15 5 Output 1 2 3 4 5 5 8 9 10 12 15","solution":"def minimize_diff(t, test_cases): For each test case, sort the array to minimize the difference between consecutive elements. Parameters: t (int): Number of test cases test_cases (list of tuples): Each tuple contains n (length of array) and the array itself. Returns: list of lists: Sorted arrays for each test case. results = [] for i in range(t): n, arr = test_cases[i] arr.sort() results.append(arr) return results # Example Usage # t = 2 # test_cases = [ # (5, [4, 2, 1, 3, 5]), # (6, [10, 12, 8, 9, 15, 5]) # ] # Result should be [[1, 2, 3, 4, 5], [5, 8, 9, 10, 12, 15]]"},{"question":"You are given a sequence of changing stock prices over a period of days. Each day you can perform one of the following three operations: 1. Buy one share of stock. 2. Sell one share of stock (you must own at least one share before you can sell). 3. Do nothing. You can only hold one share of stock at a time. You want to maximize your profit by choosing the best days to buy and sell. Write a program that determines the maximum profit you can achieve. Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ price_i ≤ 10^9 Input The input is given from Standard Input in the following format: N price_1 price_2 ... price_N Output Print the maximum profit you can achieve. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Input 3 1 2 3 Output 2 Input 10 3 3 5 0 0 3 1 4 2 9 Output 9","solution":"def max_profit(n, prices): Determines the maximum profit from the given stock prices. :param n: number of days :param prices: list of stock prices :return: maximum profit that can be achieved if n <= 1: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are tasked with managing parking spots in a parking garage that has 5 levels, each level having 2 sections, and each section having 8 parking spots. Write a program which reads a series of parking/exit notices and reports the number of available spots for each section on each level. For each notice, you are given four integers l, s, p, and m which indicate that m cars have parked in spot p of section s on level l. If m is negative, it means -m cars have exited. If m exceeds the number of available spots, do not park any cars from this notice. Assume that initially, all spots are empty. Constraints * No incorrect level, section, or spot numbers are given. * 0 ≤ the number of parked cars in any spot ≤ 4 * No cars will \\"wrap around\\" to another spot when parked (i.e., if spot p in section s on level l is full, parking notice is ignored). Input In the first line, the number of notices n is given. In the following n lines, a set of four integers l, s, p, and m which represents ith notice is given in a line. Output For each level, print the information of 1st and 2nd sections in this order. For each section\'s information, print the number of available spots of each spot ordered from 1st to 8th. Print a single space character before the number of available spots. Print \\"=====================\\" (21 \'=\' characters) between levels. Example Input 4 1 1 3 2 2 2 5 3 3 1 4 -1 5 2 7 4 Output 4 4 2 4 4 4 4 4 4 4 4 4 4 4 4 4 ===================== 4 4 4 4 4 4 4 4 4 4 4 4 4 1 4 4 ===================== 4 4 4 3 4 4 4 4 4 4 4 4 4 4 4 4 ===================== 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ===================== 4 4 4 4 4 4 4 4 4 4 4 4 4 4 0 4","solution":"def manage_parking_spots(n, notices): levels = [[[4] * 8 for _ in range(2)] for _ in range(5)] for notice in notices: l, s, p, m = notice l -= 1 # Adjust to zero-indexed s -= 1 # Adjust to zero-indexed p -= 1 # Adjust to zero-indexed if m > 0: # Trying to park cars if levels[l][s][p] >= m: levels[l][s][p] -= m else: # m < 0, meaning cars are exiting levels[l][s][p] -= m # m is negative, so we add the number of cars exiting for i in range(5): for section in levels[i]: print(\\" \\" + \\" \\".join(map(str, section))) if i < 4: print(\\"=\\" * 21)"},{"question":"Problem You are given a list of intervals and a set of timestamps. Each interval is represented by its start and end times, and each timestamp indicates a specific point in time. An interval is considered \\"active\\" at a given timestamp if the timestamp is within the start and end times of that interval, inclusive. Your task is to determine the number of active intervals for each timestamp given. Constraints: The input satisfies the following conditions: * 1 leq N leq 10^5 (number of intervals) * 1 leq M leq 10^5 (number of timestamps) * 0 leq start_i < end_i leq 10^9 (interval limits) * 0 leq t_j leq 10^9 (timestamps) Input All inputs are given as integers in the following format: N start_1 end_1 start_2 end_2 :: start_N end_N M t_1 t_2 :: t_M The 1 line is given an integer N that represents the number of intervals. Each of the next N lines contains two integers start_i and end_i, representing the start and end times of the i -th interval, separated by spaces. The (N+2) line is given an integer M that represents the number of timestamps. Each of the next M lines contains a single integer t_j , representing a timestamp. Output Output M lines, each containing a single integer that is the number of active intervals at the corresponding timestamp. Examples Input 3 1 4 2 6 8 10 3 2 5 9 Output 2 1 1 Input 4 1 3 4 6 5 8 10 15 5 0 2 5 7 12 Output 0 1 2 1 1","solution":"def active_intervals(intervals, timestamps): Returns the number of active intervals for each timestamp. Parameters: intervals (list of tuples): List where each tuple contains the start and end times (inclusive) of the interval. timestamps (list of ints): List of timestamps. Returns: list of ints: List containing the count of active intervals for each timestamp. result = [] for t in timestamps: count = sum(1 for start, end in intervals if start <= t <= end) result.append(count) return result"},{"question":"Takahashi is planning a camping trip and wants to accurately calculate the weight of the items he is carrying. He has N items, and each item has a weight Wi. He can carry a maximum total weight of M. You need to write a program to determine if Takahashi can carry all the items without exceeding the maximum weight limit M. Constraints * 1 ≤ N ≤ 100 * 1 ≤ Wi ≤ 1000 * 1 ≤ M ≤ 100000 Input Input is given from Standard Input in the following format: N M W1 W2 ... WN Output Print \\"Yes\\" if the total weight of the items is less than or equal to M. Otherwise, print \\"No\\". Examples Input 3 100 30 40 20 Output Yes Input 4 150 50 60 45 10 Output No","solution":"def can_carry_all_items(N, M, weights): Determines if all items with given weights can be carried without exceeding maximum weight M. Parameters: N (int): Number of items M (int): Maximum total weight that can be carried weights (list): A list of weights of the N items Returns: str: \\"Yes\\" if total weight is ≤ M, \\"No\\" otherwise total_weight = sum(weights) if total_weight <= M: return \\"Yes\\" else: return \\"No\\" # Read input values # N, M = map(int, input().split()) # weights = list(map(int, input().split())) # Example usage # print(can_carry_all_items(N, M, weights))"},{"question":"Delegated to the land of Numark, Timothy finds himself faced with another challenge. An orderly at the gate challenges his ability to manipulate numbers to gain entry to the city. The orderly says: You have a sequence of N integers. You need to determine if you can split this sequence into two non-empty subsequences such that the sum of the integers in the first subsequence is equal to the sum of the integers in the second subsequence. The subsequences should maintain the order in which they appear in the original sequence. Answer me, traveler, can you perform this task that will allow you to enter the city? Give your answer by providing a function that returns \\"YES\\" (without the quotes) if it is possible to split the sequence in the described manner, otherwise return \\"NO\\" (without the quotes). Input First line contains an integer T. T testcases follow. Each testcase consists of two lines. The first line contains an integer N, the size of the sequence. The second line contains N space-separated integers, the sequence itself. Output For each testcase, print the answer i.e. either \\"YES\\" (without the quotes) or \\"NO\\" (without the quotes), in a new line. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 50 -10^5 ≤ sequence[i] ≤ 10^5 SAMPLE INPUT 2 4 1 5 3 3 5 2 -2 3 1 2 SAMPLE OUTPUT YES YES Explanation In the first case, the sequencial split {1, 5} and {3, 3} results in equal sums (6 and 6 respectively). In the second case, the sequencial split {2, -2, 3} and {1, 2} results in equal sums (3 and 3 respectively).","solution":"def can_split_sequence_equal_sum(T, testcases): results = [] for i in range(T): N = testcases[i][0] sequence = testcases[i][1] total_sum = sum(sequence) if total_sum % 2 != 0: results.append(\\"NO\\") continue target_sum = total_sum // 2 current_sum = 0 for num in sequence: current_sum += num if current_sum == target_sum: results.append(\\"YES\\") break else: results.append(\\"NO\\") return results"},{"question":"In a busy library, there are M books returned by readers and placed in a row on the return counter. The librarian can process each book in order, one by one. She has to go from left to right and can only pick a book if all previous books to the left (if any) are either processed or remain on the counter. The librarian decides to start cleaning up the messy counter by removing all instances of a specific book, found at position P on the counter initially. Given the initial sequence of M books and the position P of the specific book, determine the new sequence of books on the counter after all instances of the specific book are removed. Constraints * 1 ≤ M ≤ 1000 * 0 ≤ P < M * Each book is represented by a string of uppercase letters. Input The input is given from Standard Input in the following format: M P book_1 book_2 ... book_M Output Print the new sequence of books on the return counter after all instances of the specified book are removed. Each book in the sequence should be separated by a space. Examples Input 5 2 BOOKA BOOKB BOOKC BOOKB BOOKC Output BOOKA BOOKB BOOKB Input 4 0 BOOKA BOOKA BOOKB BOOKC Output BOOKB BOOKC","solution":"def remove_specific_book(m, p, books): specific_book = books[p] result_books = [book for book in books if book != specific_book] return result_books # Function to format the input and output def main(): import sys input = sys.stdin.read data = input().strip().split() m = int(data[0]) p = int(data[1]) books = data[2:] result_books = remove_specific_book(m, p, books) print(\\" \\".join(result_books))"},{"question":"John has an old storage trunk where he stores his collection of different objects. He loves to arrange these objects in a nice, ordered manner. One day, he decided to arrange the objects in such a way that the number of objects in each row is greater than or equal to the number in the previous row, but not exceeding a maximum limit per row. Given the total number of objects and the maximum number of objects that can be placed in a single row, your task is to determine if John can arrange the objects in the required manner. Constraints 1 ≤ total_objects ≤ 10^12 1 ≤ max_per_row ≤ 10^6 Input The first line of input contains total_objects and max_per_row separated by space. Output Output a single line containing \\"YES\\" if it\'s possible to arrange the objects as described, otherwise \\"NO\\". Example Input: 15 5 Output: YES Explanation One possible arrangement is 1 row with 1 object, 1 row with 2 objects, 1 row with 3 objects, 1 row with 4 objects, and 1 row with 5 objects.","solution":"def can_arrange_objects(total_objects, max_per_row): current_objects = 0 row_count = 0 while total_objects > current_objects and row_count < max_per_row: row_count += 1 current_objects += row_count if current_objects == total_objects: return \\"YES\\" return \\"NO\\""},{"question":"Mr. Ichinose is trying to organize a special game night where he wants to arrange a sequence of lights. The sequence will be composed of light bulbs with two states: ON (represented by 1) and OFF (represented by 0). The rules for lighting up the bulbs are as follows: * You start with all bulbs turned OFF. * You can toggle the state of any bulb (turn it from ON to OFF or from OFF to ON). Given an initial sequence and a sequence of desired states, find the minimum number of toggles required to transform the initial sequence into the desired sequence. For example, if the initial sequence is [0, 0, 0] and the desired sequence is [1, 1, 1], you need to toggle each bulb so the total toggles required will be three. input Two binary strings of equal length, separated by a space. output Output the minimum number of toggles required to transform the first sequence into the second sequence. Constraint: * The length of each string is at least 1 and at most 100,000. * Both strings consist only of the characters \'0\' and \'1\'. Input example 1 000 111 Output example 1 3 Input example 2 101010 010101 Output example 2 6 Example Input 000 111 Output 3","solution":"def min_toggles(initial, desired): Calculate the minimum number of toggles required to transform the initial light sequence into the desired sequence. :param initial: str, the initial sequence of bulbs (binary string) :param desired: str, the desired sequence of bulbs (binary string) :return: int, the minimum number of toggles required if len(initial) != len(desired): raise ValueError(\\"Both initial and desired sequences must be of the same length\\") # Calculate the number of differing bits between initial and desired sequences toggles = sum(1 for ini, des in zip(initial, desired) if ini != des) return toggles"},{"question":"Problem Statement You are given a rectangular grid with `N` rows and `M` columns. Each cell in the grid is marked either as land (`L`) or water (`W`). You can move vertically or horizontally between adjacent cells. A connected component is a group of one or more adjacent land cells (`L`) connected directly or indirectly through other land cells. Your task is to find the size of the largest connected component of land cells in the given grid. Consider the following rules: - Cells are considered connected if they share a side horizontally or vertically. - The size of a connected component is the number of `L` cells in it. * * * # Input The input contains multiple datasets. The number of datasets does not exceed 10. Each dataset starts with a single line that contains two integers, `N` and `M` (1 ≤ N, M ≤ 100), representing the number of rows and columns in the grid, respectively. This is followed by `N` lines, each containing a string of `M` characters, where each character is either \'L\' or \'W\'. The last dataset is followed by a line containing a single `-1`. # Output For each dataset, print a single integer representing the size of the largest connected component of land cells. * * * # Sample Input 3 4 LLWL WLLL LWWW 2 5 LLWLL WLWLW -1 # Sample Output 6 3 # Example Input 3 4 LLWL WLLL LWWW 2 5 LLWLL WLWLW -1 Output 6 3","solution":"def largest_connected_component(grid): def dfs(x, y): stack = [(x, y)] size = 0 while stack: cx, cy = stack.pop() if 0 <= cx < N and 0 <= cy < M and grid[cx][cy] == \'L\': grid[cx][cy] = \'V\' # Mark cell as visited size += 1 # Explore adjacent cells for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: stack.append((cx + dx, cy + dy)) return size N = len(grid) M = len(grid[0]) if N > 0 else 0 max_size = 0 for i in range(N): for j in range(M): if grid[i][j] == \'L\': max_size = max(max_size, dfs(i, j)) return max_size def process_input(data): index = 0 results = [] while index < len(data): line = data[index].strip() if line == \'-1\': break N, M = map(int, line.split()) grid = [] for i in range(1, N + 1): grid.append(list(data[index + i].strip())) results.append(largest_connected_component(grid)) index += N + 1 return results"},{"question":"In a remote village, there is a tradition where villagers give each other gifts during a festival. Each villager can give a gift to exactly one other villager. However, due to the strong community bonds, it is expected that no two villagers should give gifts to each other directly. You are given the task of analyzing the gift exchange records to identify the first instance of a violation of this rule. Given N villagers numbered from 1 to N and M gift exchanges recorded sequentially, write a program to determine the first recorded exchange that results in a direct reciprocal exchange between two villagers. Input The input is given in the following format: ``` N M exchange1 exchange2 :: exchangeM ``` The first line gives the number of villagers N (1 ≤ N ≤ 100000) and the number of gift exchanges M (1 ≤ M ≤ 200000). Each of the following M lines represents a gift exchange in the format: ``` a b ``` where villager a (1 ≤ a ≤ N) gives a gift to villager b (1 ≤ b ≤ N) and a ≠ b. Output Output the number of the first exchange that results in a direct reciprocal gift exchange. If no such exchange exists, output 0 on one line. Examples Input ``` 4 5 1 2 2 3 3 4 4 1 2 1 ``` Output ``` 5 ``` Input ``` 3 3 1 2 2 3 3 1 ``` Output ``` 0 ``` Input ``` 5 6 1 3 3 4 4 2 2 5 5 1 2 3 ``` Output ``` 0 ```","solution":"def find_first_reciprocal_exchange(n, m, exchanges): # Dictionary to keep track of which villager each villager has given a gift to gift_given_to = {} for i, (a, b) in enumerate(exchanges): # Check if b has already given a gift to a if gift_given_to.get(b) == a: # If so, return the 1-indexed position return i + 1 # Record that a has given a gift to b gift_given_to[a] = b # If no reciprocal exchange found, return 0 return 0"},{"question":"A team of developers is working on a new application and they need a logging system to keep track of important events in the application. Each event has a unique identifier and a timestamp representing the exact date and time when the event occurred. Sometimes, multiple events can occur at the same exact time. The team wants to organize these events chronologically, but if two events occurred at the same timestamp, they should be ordered by their identifier in ascending alphabetical order. Your task is to write a program to help the team sort a list of events by timestamp, and if there are any events with the same timestamp, to further sort them by their identifier. Each event will be provided in the following format: ``` <identifier>,<timestamp> ``` Where `<identifier>` is a string without spaces consisting of alphanumeric characters, and `<timestamp>` is in the format `YYYY-MM-DD HH:MM:SS`. Input: The first line contains an integer `T`, the number of test cases. Each of the next `T` lines contains a single string representing an event in the format described above. Output: For each test case, print the events sorted first by timestamp and then by identifier, each on a new line. Constraints: 1 ≤ T ≤ 1000 1 ≤ length of `identifier` ≤ 100 `timestamp` will always be a valid date and time in the given format. SAMPLE INPUT 4 event1,2023-01-01 10:00:00 event3,2023-01-01 09:00:00 event2,2023-01-01 10:00:00 event4,2023-01-01 08:00:00 SAMPLE OUTPUT event4,2023-01-01 08:00:00 event3,2023-01-01 09:00:00 event1,2023-01-01 10:00:00 event2,2023-01-01 10:00:00","solution":"def sort_events(events): Sorts a list of events first by timestamp and then by identifier. :param events: List of strings, each representing an event in the format <identifier>,<timestamp> :return: List of sorted events. sorted_events = sorted(events, key=lambda event: (event.split(\',\')[1], event.split(\',\')[0])) return sorted_events def handle_events(input_data): Processes multiple events and returns the sorted results. :param input_data: List of input strings; the first element is the number of events. :return: List of sorted event strings. T = int(input_data[0]) events = input_data[1:T+1] return sort_events(events)"},{"question":"In a country called Techlandia, the government plans to construct a number of new roads to enhance the transportation network. The country consists of n cities, labeled from 1 to n. The government has identified m possible roads they can construct, each road connecting two cities with a certain cost. To improve the efficiency of the transportation network, the government wants to construct exactly one road so that the number of cities directly connected (either by the existing roads or the new road) is maximized. Given the list of existing roads and the list of possible new roads, determine the maximum number of cities that can be directly connected if exactly one of the new roads is constructed. A city is considered directly connected after constructing a new road if there exists a road (either existing or newly constructed) that leads to it from any other city. Input The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000) – the number of cities and the number of possible new roads respectively. The next line contains an integer k (0 ≤ k ≤ n * (n - 1) / 2) – the number of existing roads. Each of the next k lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) – the cities connected by this existing road. Each of the next m lines contains three integers u, v, and c (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c ≤ 1000) – the cities connected by this possible new road and the cost of constructing this road. Output The only line of the output should contain one integer value – the maximum number of directly connected cities after constructing exactly one of the new roads. Examples Input 5 3 2 1 2 3 4 1 3 5 1 4 10 4 5 2 Output 4 Input 4 2 0 1 2 8 3 4 7 Output 2 Note In the first sample, it\'s optimal to build the new road between cities 1 and 3. This way, cities 1, 2, 3, and 4 will all be directly connected via the existing roads {(1, 2), (3, 4), (1, 3)}. The optimal configuration achieves the connection of 4 cities. In the second sample, there are no existing roads. Any new road construction will connect only 2 cities, so the optimal number of connected cities is 2.","solution":"def max_connected_cities(n, m, k, existing_roads, new_roads): from collections import defaultdict def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 parent = {i: i for i in range(1, n + 1)} rank = {i: 0 for i in range(1, n + 1)} existing_road_components = defaultdict(set) for (u, v) in existing_roads: union(parent, rank, u, v) for city in range(1, n + 1): existing_road_components[find(parent, city)].add(city) max_cities = 0 for (u, v, c) in new_roads: temp_parent = parent.copy() temp_rank = rank.copy() union(temp_parent, temp_rank, u, v) connected_components = defaultdict(set) for city in range(1, n + 1): connected_components[find(temp_parent, city)].add(city) max_cities = max(max_cities, max(len(comp) for comp in connected_components.values())) return max_cities"},{"question":"There is a new interconnected galaxy network consisting of multiple planetary systems. However, due to recent cosmic events, the network has been disrupted and some links between the planet systems are currently unusable. To call in supplies and assistance, we need to determine if all planetary systems can still communicate with each other using the remaining operational links. Each planetary system is represented as a node, and each operational link between two systems is represented as an edge in an undirected graph. Your task is to check if the remaining network of planetary systems (nodes) and operational links (edges) is fully connected, meaning there exists a path (direct or through intermediaries) between any two planetary systems. # Input The first line contains two integers, `n` and `m` (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5), where `n` is the number of planetary systems and `m` is the number of operational links. The next `m` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ n, a ≠ b), indicating there is a direct operational link between planetary systems `a` and `b`. # Output Output \\"YES\\" if all planetary systems are fully connected using the operational links. Otherwise, output \\"NO\\". # Example Input ``` 4 2 1 2 3 4 ``` Output ``` NO ``` Input ``` 4 3 1 2 2 3 3 4 ``` Output ``` YES ``` # Note In the first example, there are two separate components: {1, 2} and {3, 4}, which means not all planetary systems can communicate with each other, so the output is \\"NO\\". In the second example, there is a path between any pair of planetary systems, which means they are all connected, so the output is \\"YES\\".","solution":"def are_all_systems_connected(n, m, edges): Returns \'YES\' if all planetary systems are fully connected, otherwise \'NO\'. from collections import defaultdict, deque if n == 1: return \\"YES\\" adjacency_list = defaultdict(list) for a, b in edges: adjacency_list[a].append(b) adjacency_list[b].append(a) visited = [False] * (n + 1) def bfs(start_node): queue = deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) start_node = 1 bfs(start_node) return \\"YES\\" if all(visited[1:]) else \\"NO\\""},{"question":"Problem description Alan has been given a task to evaluate strings based on their lexical order. A string is considered lexically smaller than another if it appears before the other in a dictionary-like order. To solve this problem, he needs to count how many pairs of indices (i, j) in a given string satisfy the condition S[i] < S[j] and i < j. Input The first line of the input contains an integer T denoting the number of test cases. Each test case consists of a single string S. Output For each test case, print the number of pairs (i, j) that satisfy the given condition. Constraints - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 1000 - S will contain only lowercase English letters (\'a\'-\'z\'). Example Input: 2 abc cba Output: 3 0 Explanation Example case 1 For the string \\"abc\\", the valid pairs are (0, 1), (0, 2), and (1, 2). Hence, the output is 3. Example case 2 For the string \\"cba\\", no pairs satisfy the condition S[i] < S[j] and i < j, so the output is 0.","solution":"def count_lexicographical_pairs(s): Counts the number of lexicographical pairs (i, j) in a string where S[i] < S[j] and i < j. count = 0 n = len(s) for i in range(n): for j in range(i + 1, n): if s[i] < s[j]: count += 1 return count def process_test_cases(test_cases): Processes multiple test cases for the count_lexicographical_pairs function. Args: test_cases (list): List of strings representing each test case. Returns: list: List of results for each test case. results = [] for s in test_cases: results.append(count_lexicographical_pairs(s)) return results"},{"question":"In a large warehouse, there are n crates organized in a single row. Each crate contains a certain number of items. The warehouse manager can perform the following operation an unlimited number of times: select two adjacent crates and equalize their items by transferring items from the crate with more items to the crate with fewer items until both crates have the same number of items. You need to determine if it is possible to make all the crates contain the same number of items with any number of these operations. Input The first line contains a single integer n (1 ≤ n ≤ 1000) – the number of crates. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) – the number of items in each crate. Output Output \\"YES\\" if it is possible to make all crates contain the same number of items, otherwise output \\"NO\\". Examples Input 4 3 6 9 12 Output YES Input 3 1 2 3 Output NO Input 5 5 5 5 5 5 Output YES Note In the first example, you can perform the following sequence of operations: - Combine the first and second crates (3, 6) to both have 4.5 items each (Since items are whole numbers, this step cannot be performed as is). - Combine the second and third crates (4.5, 9) to both have 6.75 items each (again, invalid due to fractional result). Upon further analysis, none of the sequences lead to all crates having integral values of items. Therefore, the real answer should be NO. But in an idealized scenario where fractional operations were hypothetically allowed: In the first example, combining 3 and 6 results in two crates of 4.5 each, repeat this process along the entire row. Every two adjacent equalizations should ultimately align all crates. Adjust operations to ensure integrability: Convert operations between positions to valid steps respecting integer item counts. In the second example, achieving equal numbers is not possible through any sequence of operations as differences perpetuate fractions irreconcilably. In the third example, all crates already have the same number of items, so no operations are needed.","solution":"def can_equalize_crates(n, items): Determines if it is possible to make all crates contain the same number of items with any number of operations. Parameters: n (int): Number of crates. items (list): List containing the number of items in each crate. Returns: str: \\"YES\\" if possible, otherwise \\"NO\\". # If there is only one crate, it is already \'equalized\' if n == 1: return \\"YES\\" # Finding the gcd for the list from math import gcd from functools import reduce def find_gcd_of_list(lst): return reduce(gcd, lst) common_gcd = find_gcd_of_list(items) # If the greatest common divisor of all numbers in the list is greater than 1 # then it\'s possible to manipulate the crates to have the same number of items if common_gcd == 1: return \\"NO\\" else: return \\"YES\\""},{"question":"You are provided with a sequence of integer numbers representing the stock prices of a company. Your task is to design an algorithm that finds the maximum profit that can be made by buying and selling the stock at most two times. The algorithm should maximize the profit by choosing the best days to buy and sell the stock. Note that a second buy must be on another day after the first sell. Input The first line of the input contains an integer n (1 ≤ n ≤ 2 * 10^5) representing the number of days. The second line contains n integers separated by spaces, where each integer represents the stock price of the i-th day. Output Print a single integer representing the maximum profit that can be made by making at most two transactions. If no profit can be made, print 0. Examples Input 6 3 3 5 0 0 3 1 4 Output 6 Input 5 1 2 3 4 5 Output 4 Input 3 7 1 5 Output 4 Input 4 7 6 4 3 Output 0 Explanation In the first example, buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 6 (price = 1) and sell on day 7 (price = 4), profit = 4-1 = 3. Total profit = 3+3 = 6. In the second example, buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit = 4. In the third example, buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Total profit = 4. In the fourth example, no transactions are made, hence total profit = 0.","solution":"def max_profit(prices): Calculates the maximum profit by making at most two transactions on the given stock prices. if not prices or len(prices) < 2: return 0 # Initialize the variables for tracking the profit. first_buy = second_buy = float(\'inf\') first_profit = second_profit = 0 for price in prices: first_buy = min(first_buy, price) first_profit = max(first_profit, price - first_buy) second_buy = min(second_buy, price - first_profit) second_profit = max(second_profit, price - second_buy) return second_profit"},{"question":"Given a string S consisting of lowercase English letters, you have to make all the characters of the string equal by performing some operations. In one operation, you can choose any character of the string and change it to any other lowercase English letter. Your task is to find the minimum number of operations required to achieve this. Input The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contains a string S. Output For each test case, output a single line containing the minimum number of operations required to make all characters of the string equal. Constraints 1 ≤ T ≤ 100 1 ≤ length of S ≤ 100 Example Input: 3 aabb abc zzzz Output: 2 2 0 Explanation Example case 1. We can change the two \'b\'s to \'a\'s to make the string \\"aaaa\\". Example case 2. We can change either \'b\' and \'c\' to \'a\', or \'a\' and \'c\' to \'b\', or \'a\' and \'b\' to \'c\'. Any of these operations will make all characters in the string equal, requiring 2 operations. Example case 3. The string is already uniform, so no operations are needed.","solution":"def min_operations_to_make_equal(s): Returns the minimum number of operations required to make all characters of the string equal. import collections # Create a frequency counter of characters in the string freq = collections.Counter(s) # Find the highest frequency of any character max_freq = max(freq.values()) # The minimum operations required will be the length of the string minus # the highest frequency (since we need to change all other characters) return len(s) - max_freq def process_cases(T, cases): Processes multiple test cases and returns the results as a list of integers. results = [] for s in cases: results.append(min_operations_to_make_equal(s)) return results"},{"question":"You are developing a new feature for your company\'s social media platform. The feature allows users to tag friends in their posts using \'@username\' mentions. To ensure a smooth user experience, you need to extract all valid tags from a given text post. The tag should be considered valid if it starts with \'@\', followed by one or more alphanumeric characters (letters and numbers only), and it is not preceded by any character other than a space or the start of the string. Your task is to write a function to extract all valid tags from the given text post. Input - A single string representing the text post, which consists of English letters, digits, spaces, and special characters. The length of the string is at most 1000 characters. Output - A list of distinct strings representing the extracted tags in the order they appear in the text post. Each tag should exclude the leading \'@\'. Constraints - A valid tag starts with \'@\' and is followed by one or more alphanumeric characters. - A valid tag is not preceded by any character other than a space or the start of the string. - If no valid tags are found, return an empty list. Example Input: `Let\'s welcome our new team members: @john123, @janeDoe! #excited` Output: `[\'john123\', \'janeDoe\']` Explanation The input string has two valid tags: \'@john123\' and \'@janeDoe\', which are extracted and returned in the order they appear in the post. The special characters and the hashtag are ignored.","solution":"import re def extract_tags(text): Extracts valid tags from the given text post. A valid tag starts with \'@\' followed by one or more alphanumeric characters, and it is not preceded by any character other than a space or the start of the string. # Regular expression to match valid tags pattern = r\'(?<!S)@(w+)\' matches = re.findall(pattern, text) return list(dict.fromkeys(matches)) # Remove duplicates while keeping order # Example usage text = \\"Let\'s welcome our new team members: @john123, @janeDoe! #excited\\" print(extract_tags(text)) # Output: [\'john123\', \'janeDoe\']"},{"question":"You\'re tasked with simulating the booking system for \\"The Grand Arena\\", a popular venue that hosts various events ranging from concerts to sports. The booking system ensures that no double bookings occur, meaning no two events can overlap in time. If a booking request overlaps with an existing event, it should be rejected. Write a program that processes booking requests and determines if they can be accepted or rejected based on currently confirmed bookings. Input The input consists of multiple booking requests. Each request includes three lines: - The name of the event (a string of up to 100 characters, without spaces) - The start time of the event in the format \\"HH:MM\\" (24-hour format, e.g., \\"14:30\\") - The end time of the event in the format \\"HH:MM\\" (24-hour format, e.g., \\"16:00\\") You can assume that the start time is always before the end time on the same day. Output For each booking request, output \\"Accepted\\" if the booking does not overlap with any existing event, and \\"Rejected\\" if it does. Example Input Concert 10:00 12:00 Basketball_Game 11:00 13:00 Conference 12:30 14:00 Yoga_Class 12:00 13:00 Lunch_Meeting 13:00 14:00 Output Accepted Rejected Accepted Rejected Accepted","solution":"def process_bookings(requests): Processes booking requests and returns a list indicating if each request is \'Accepted\' or \'Rejected\' based on the current confirmed bookings. Each request consists of three lines: 1. Event name (string) 2. Start time (string in \\"HH:MM\\" format) 3. End time (string in \\"HH:MM\\" format) def time_to_minutes(t): hours, minutes = map(int, t.split(\':\')) return hours * 60 + minutes events = [] for i in range(0, len(requests), 3): name = requests[i] start_str = requests[i + 1] end_str = requests[i + 2] start = time_to_minutes(start_str) end = time_to_minutes(end_str) overlap = False for event in events: event_start, event_end = event if (start < event_end and end > event_start): overlap = True break if overlap: print(\\"Rejected\\") else: print(\\"Accepted\\") events.append((start, end))"},{"question":"Aby loves to play with strings. He usually participates in competitive programming contests and often encounters problems that involve string manipulation. Given a string S, Aby wants to know the length of the longest substring that does not contain any repeating characters. Write a program that finds the length of the longest substring with all distinct characters for a given input string S. Input The input consists of several test cases. The first line contains an integer T denoting the number of test cases. Each test case consists of one line which contains a single string S. Output For each test case, output the length of the longest substring with all distinct characters. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 Note The sum of |S| over all test cases won\'t exceed 10^6. SAMPLE INPUT 3 abcabcbb bbbbb pwwkew SAMPLE OUTPUT 3 1 3 Explanation In the first sample test case, the longest substring with all distinct characters is \\"abc\\", which has length 3. In the second sample test case, there are no substrings with all distinct characters other than the individual characters, so the length is 1. In the third sample test case, the longest substring with all distinct characters is \\"wke\\", which has length 3.","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring with all distinct characters. n = len(s) char_index = {} max_length = 0 start = 0 for i in range(n): if s[i] in char_index and char_index[s[i]] >= start: start = char_index[s[i]] + 1 max_length = max(max_length, i - start + 1) char_index[s[i]] = i return max_length def process_test_cases(t, test_cases): Processes multiple test cases and returns the results. results = [] for s in test_cases: results.append(longest_unique_substring_length(s)) return results"},{"question":"You need to implement a data structure that supports the following operations efficiently: 1. Insert a value into the data structure. 2. Delete a value from the data structure (if it exists). 3. Find the k-th smallest element in the current set of elements. The structure should maintain the elements in such a way that all operations are performed in the most optimal manner possible. Input The first line contains a single integer n (1 ≤ n ≤ 2*10^5) — the number of operations. Each of the next n lines contains an operation in one of the following formats: - \\"I x\\" (1 ≤ x ≤ 10^9) where \\"I\\" represents an insert operation and x is the value to be inserted, - \\"D x\\" (1 ≤ x ≤ 10^9) where \\"D\\" represents a delete operation and x is the value to be deleted, - \\"K k\\" (1 ≤ k ≤ 10^5) where \\"K\\" represents a find operation and k is the 1-based index of the smallest element to be retrieved. Output For each \\"K k\\" operation, output the k-th smallest element in the data structure. If there are fewer than k elements in the data structure, output \\"invalid\\" (without quotes). Examples Input 6 I 3 I 1 I 5 K 2 D 1 K 2 Output 3 5","solution":"import bisect class DataStructure: def __init__(self): self.elements = [] def insert(self, x): bisect.insort(self.elements, x) def delete(self, x): idx = bisect.bisect_left(self.elements, x) if idx < len(self.elements) and self.elements[idx] == x: self.elements.pop(idx) def find_kth_smallest(self, k): if k <= 0 or k > len(self.elements): return \\"invalid\\" return self.elements[k-1] def process_operations(n, operations): ds = DataStructure() output = [] for operation in operations: if operation[0] == \'I\': ds.insert(operation[1]) elif operation[0] == \'D\': ds.delete(operation[1]) elif operation[0] == \'K\': result = ds.find_kth_smallest(operation[1]) output.append(result) return output"},{"question":"A company is creating a system to manage the books in their library. Each book has a unique identifier and falls into one of the following categories represented by integers from 1 to 5: - 1: Science Fiction - 2: Romance - 3: Mystery - 4: Biography - 5: Philosophy They have provided you with a pre-labeled dataset, containing information about the books, and their categories. The dataset is available for download here: http://download.library.com/dataset/books.zip. The archive contains five directories named \\"1\\" to \\"5\\", each containing books related to their respective categories. The format of each book\'s file is as follows: - The first line contains the book identifier. - The second line contains the title of the book. - The third line contains the author of the book. - The subsequent lines contain the content of the book. The task is to write a program that can classify a new book into one of those five categories based on its content. Input The first line contains the integer book_id (0 ≤ book_id ≤ 10^6) — the book identifier. The second line contains the title of the book. The third line contains the author of the book. The fourth and subsequent lines contain the content of the book. It is guaranteed that the size of any given book will not exceed 20 kilobytes. The problem also presents 10 different groups of tests, from 1 to 10. The books in groups 1 and 2 are derived from the provided dataset but with different identifiers. Groups from 3 to 10 provide harder challenges, requiring better generalization that isn’t directly from the dataset. Output Print an integer from 1 to 5, inclusive, indicating the category of the given book. Examples","solution":"import re from collections import Counter import random # Predefined categories and related sample words for simplification. CATEGORY_WORDS = { 1: [\\"space\\", \\"robot\\", \\"time\\", \\"future\\", \\"alien\\"], 2: [\\"love\\", \\"romance\\", \\"heart\\", \\"kiss\\", \\"wedding\\"], 3: [\\"murder\\", \\"detective\\", \\"mystery\\", \\"crime\\", \\"clue\\"], 4: [\\"life\\", \\"biography\\", \\"story\\", \\"person\\", \\"achievement\\"], 5: [\\"philosophy\\", \\"thought\\", \\"mind\\", \\"ethics\\", \\"existence\\"], } def predict_category(book_content): Predicts the category of the book based on the content using simplified keyword matching. words = re.findall(r\'w+\', book_content.lower()) counts = Counter(words) # Score each category based on the presence of keywords category_scores = {cat: sum(counts[word] for word in words_list) for cat, words_list in CATEGORY_WORDS.items()} # Return the category with the highest score predicted_category = max(category_scores, key=category_scores.get) return predicted_category def classify_book(book_id, title, author, content): Classifies the book into a category based on its content. book_content = \' \'.join(content) return predict_category(book_content)"},{"question":"A group of scientists is conducting an experiment involving a set of n plants, each with a distinct initial height. They have m different types of plant growth formulas, each specified by a range of plant indices it affects and the amount by which it increases the heights of those plants. Formally, each formula can be expressed as (li, ri, di) where a formula applied from li to ri increases the height of every plant from li to ri by di units. The scientists are interested in determining the final heights of the plants after applying all the formulas sequentially as they are given. Write a program that, given the initial heights of the plants and the set of growth formulas, calculates the final heights of the plants. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 105) — the number of plants and the number of growth formulas, respectively. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) representing the initial heights of the plants. Each of the next m lines contains three integers li, ri, and di (1 ≤ li ≤ ri ≤ n, 1 ≤ di ≤ 109) describing the i-th growth formula. Output Output n space-separated integers representing the final heights of the plants after applying all the formulas. Examples Input 5 3 1 2 3 4 5 1 3 2 2 5 1 4 5 3 Output 3 4 5 8 9 Input 4 2 5 6 7 8 2 4 3 1 1 4 Output 9 9 10 11 Note In the first example input, the initial heights of the plants are [1, 2, 3, 4, 5]. - Applying the first growth formula (1, 3, 2) results in heights [3, 4, 5, 4, 5]. - Applying the second growth formula (2, 5, 1) updates the heights to [3, 5, 6, 5, 6]. - Applying the third growth formula (4, 5, 3) gives the final heights [3, 5, 6, 8, 9]. In the second example, the growth process is similar: - Initially, the heights are [5, 6, 7, 8]. - After the first formula (2, 4, 3), heights become [5, 9, 10, 11]. - After the second formula (1, 1, 4), heights update to [9, 9, 10, 11].","solution":"def calculate_final_heights(n, m, heights, formulas): Calculate the final heights of the plants after applying all growth formulas. :param n: Number of plants :param m: Number of growth formulas :param heights: List of initial heights of the plants :param formulas: List of growth formulas (li, ri, di) :return: List of final heights of the plants # Applying the growth formulas one by one for formula in formulas: li, ri, di = formula for i in range(li - 1, ri): heights[i] += di return heights"},{"question":"Peter is an avid gardener. He has planted several types of flowers in his garden, each with its own unique bloom duration. Given the bloom duration of each type of flower, Peter wants to know if he can arrange all the flowers in a single vase such that their total bloom duration does not exceed the vase\'s maximum capacity. If it is possible, print \\"CAN FIT\\" otherwise print \\"CANNOT FIT\\". Input The first line of the input contains an integer n denoting the number of test cases. The description of n test cases follows. The first line of each test case contains an integer k, the number of flowers Peter has. The second line of each test case contains k integers, each representing the bloom duration of a flower. The third line of each test case contains an integer C, representing the vase\'s maximum capacity in terms of bloom duration. Output For each test case, output a single line \\"CAN FIT\\" or \\"CANNOT FIT\\". Constraints 1 ≤ n ≤ 10^6 1 ≤ k ≤ 100 1 ≤ bloom duration of each flower, C ≤ 10^18 Example Input: 2 5 1 2 3 4 5 20 3 6 7 8 19 Output: CAN FIT CANNOT FIT","solution":"def can_fit_flower_in_vase(test_cases): Determine if flowers can be arranged in a vase without exceeding its maximum capacity. Args: test_cases (list): A list of tuples containing the number of flowers (int), their bloom durations (list of ints) and the vase\'s capacity (int). Returns: list: A list of strings, each being \\"CAN FIT\\" or \\"CANNOT FIT\\" for each test case. results = [] for k, bloom_durations, C in test_cases: if sum(bloom_durations) <= C: results.append(\\"CAN FIT\\") else: results.append(\\"CANNOT FIT\\") return results def parse_input(input_string): Parse the input string into test cases. Args: input_string (str): Input string containing all test cases. Returns: list: Parsed test cases in the form of a list of tuples. input_lines = input_string.strip().split(\\"n\\") n = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(n): k = int(input_lines[idx]) bloom_durations = list(map(int, input_lines[idx + 1].split())) C = int(input_lines[idx + 2]) test_cases.append((k, bloom_durations, C)) idx += 3 return test_cases def main(input_string): Main function to process the input and provide results. Args: input_string (str): Input string containing all test cases. Returns: list: A list of strings containing results for each test case. test_cases = parse_input(input_string) return can_fit_flower_in_vase(test_cases)"},{"question":"Distribute Workers Problem Statement You are given a number of workers and a set of tasks to be completed. Each worker can complete multiple tasks, but each task can only be assigned to one worker. Each task has a specific priority level, and some tasks require higher priority than others. The goal is to distribute the tasks among the workers to ensure that all tasks are completed while maximizing the total priority. Input First line contains two integers w (number of workers) and t (number of tasks). Next line contains t integers, where each integer represents the priority of each task. Output Output the maximum possible total priority of tasks that the workers can complete. Constraints 1 ≤ w ≤ 100 1 ≤ t ≤ 100 1 ≤ priority of each task ≤ 1000 SAMPLE INPUT 3 5 1 2 3 4 5 SAMPLE OUTPUT 15 Explanation All tasks can be distributed among the workers. The total priority is 1+2+3+4+5=15. Hence, the maximum possible total priority is 15.","solution":"def distribute_workers(w, t, priorities): Distributes tasks among workers maximizing total priority. :param w: number of workers :param t: number of tasks :param priorities: list of task priorities :return: maximum possible total priority # Sort the priorities in descending order to maximize total priority. priorities.sort(reverse=True) # If there are more workers than tasks, all tasks can be assigned at full priority. # Otherwise, simply sum up all priorities because one task can be assigned to one worker. return sum(priorities)"},{"question":"Given a list of integers, determine if there exists a subarray (contiguous elements) whose sum is zero. If such a subarray exists, print \\"Yes\\", otherwise print \\"No\\". Input The first line of input contains an integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the list. The second line contains `n` integers separated by space, representing the elements of the list. The absolute value of any element will not exceed 10^4. Output Print \\"Yes\\" if there exists a subarray with sum zero; otherwise, print \\"No\\". Examples Input 5 4 2 -3 1 6 Output Yes Input 4 1 2 3 4 Output No","solution":"def does_subarray_with_zero_sum_exist(arr): Determines if there exists a subarray with a sum of zero. :param arr: List of integers. :return: \\"Yes\\" if there exists a subarray with zero sum, \\"No\\" otherwise. sum_seen = set() sum_so_far = 0 for num in arr: sum_so_far += num # Check if cumulative sum is zero or is already seen if sum_so_far == 0 or sum_so_far in sum_seen: return \\"Yes\\" sum_seen.add(sum_so_far) return \\"No\\""},{"question":"Implement a function that calculates the edit distance between two strings. The edit distance between two strings is the minimum number of operations required to transform one string into the other. The allowed operations are: 1. Insert a character. 2. Remove a character. 3. Replace a character. Your task is to write a function: ```python def edit_distance(str1: str, str2: str) -> int: pass ``` # Input - Two input strings `str1` and `str2`, where `1 ≤ len(str1), len(str2) ≤ 1000`. # Output - Return an integer representing the edit distance between the two input strings. # Examples Example 1: Input: ```python edit_distance(\\"kitten\\", \\"sitting\\") ``` Output: ``` 3 ``` Explanation: - Replace \'k\' with \'s\': \\"kitten\\" -> \\"sitten\\" - Replace \'e\' with \'i\': \\"sitten\\" -> \\"sittin\\" - Insert \'g\' at the end: \\"sittin\\" -> \\"sitting\\" Example 2: Input: ```python edit_distance(\\"flaw\\", \\"lawn\\") ``` Output: ``` 2 ``` Explanation: - Remove \'f\': \\"flaw\\" -> \\"law\\" - Insert \'n\' at the end: \\"law\\" -> \\"lawn\\" # Guidelines - Use dynamic programming to solve the problem efficiently. - Construct a 2D table where the cell at `(i, j)` represents the edit distance between the first `i` characters of `str1` and the first `j` characters of `str2`. - Utilize the recurrence relation: - If `str1[i-1] == str2[j-1]`, then `dp[i][j] = dp[i-1][j-1]`. - Else, `dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])`. - Initialize the base cases where transforming an empty string to another string only involves insertions or deletions.","solution":"def edit_distance(str1: str, str2: str) -> int: Calculates the edit distance between two strings using dynamic programming. :param str1: First string. :param str2: Second string. :return: Minimum number of operations required to transform str1 into str2. m, n = len(str1), len(str2) # Create a DP table to store results of sub-problems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize dp table. for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of str2 if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to remove all characters of str1 elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore last character and recur for remaining substring elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] # If the last character is different, consider all possibilities and find minimum else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"A factory is producing a product, and you have been assigned to record the completion of the products on a daily basis. Each product passes through three stages: Assembling, Testing, and Packaging. Each stage is supervised separately and may have a specific number of completed products each day. Given a list of integers, where each integer represents the number of products completed each day in the format: `A1, T1, P1, A2, T2, P2,..., An, Tn, Pn` for `n` days (where `Ai` is the number of products assembled on day `i`, `Ti` is the number of products tested on day `i`, and `Pi` is the number of products packaged on day `i`), you need to determine the total number of products fully completed and ready for delivery by the end of each day. A product is considered fully completed and ready for delivery only if it has passed through all three stages (i.e., assembled, tested, and packaged). Write a function `count_ready_products(products: List[int]) -> List[int]` that takes a list of integers and returns a list of integers where each element indicates the total number of fully completed products ready for delivery by the end of each day. # Function Signature `def count_ready_products(products: List[int]) -> List[int]:` # Input - `products`: A list of integers with length `3 * n` where `n` is the number of days. # Output - Return a list of integers of length `n`, where each integer represents the total number of fully completed products ready for delivery by the end of each day. # Examples Example 1 Input: ``` products = [5, 3, 4, 2, 5, 7, 6, 6, 6] ``` Output: ``` [3, 5, 6] ``` Explanation: - On day 1: 5 products assembled, 3 products tested, and 4 products packaged. The number of fully completed products at the end of day 1 is 3. - On day 2: 2 products assembled, 5 products tested, and 7 products packaged. The number of fully completed products at the end of day 2 is 5. - On day 3: 6 products assembled, 6 products tested, and 6 products packaged. The number of fully completed products at the end of day 3 is 6. Example 2 Input: ``` products = [10, 8, 7, 5, 6, 4] ``` Output: ``` [7, 4] ``` Explanation: - On day 1: 10 products assembled, 8 products tested, and 7 products packaged. The number of fully completed products at the end of day 1 is 7. - On day 2: 5 products assembled, 6 products tested, and 4 products packaged. The number of fully completed products at the end of day 2 is 4.","solution":"from typing import List def count_ready_products(products: List[int]) -> List[int]: Returns the total number of fully completed products ready for delivery by the end of each day. :param products: List of integers where every group of three integers corresponds to the number of products assembled, tested, and packaged, respectively, for each day. :return: List of integers where each integer represents the total number of fully completed products ready for delivery by the end of each day. n = len(products) // 3 ready_products = [] for i in range(n): assembled = products[3 * i] tested = products[3 * i + 1] packaged = products[3 * i + 2] ready_products.append(min(assembled, tested, packaged)) return ready_products"},{"question":"The company \\"CyberTech\\" uses a special lock mechanism to secure its high-profile server rooms. The lock operates on a sequence of numbers that changes every day. The lock mechanism reads a list of integers, where each integer represents a unique code needed to unlock the server room. However, the mechanism only considers a sequence of codes valid if the sequence contains at least one pair of neighboring numbers in ascending order. For enhanced security, the company requires an application that can analyze the sequence and determine if it is possible to rearrange the integers so that the modified sequence contains at least one such valid pair. You have been tasked to write a program that checks whether such a rearrangement is possible. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100) — the number of integers in the sequence. - The second line contains `n` space-separated integers which represent the lock codes. # Output - Output \\"YES\\" (without quotes) if a rearrangement is possible so that the sequence contains at least one neighboring pair in ascending order. - Otherwise, output \\"NO\\". # Examples Input ``` 5 3 2 5 5 1 ``` Output ``` YES ``` Input ``` 4 4 4 4 4 ``` Output ``` NO ``` # Note In the first example, the sequence can be rearranged to `[1, 2, 3, 5, 5]` which contains the pairs (1, 2) and (2, 3) both in ascending order. In the second example, all numbers are the same, so no rearrangement can produce an ascending pair. Hence, the output is \\"NO\\".","solution":"def can_rearrange_to_valid_sequence(n, sequence): Checks if it is possible to rearrange the sequence so that it contains at least one pair of neighboring numbers in ascending order. :param n: int, size of the sequence :param sequence: list of int, the sequence of lock codes :return: str, \\"YES\\" if a valid rearrangement is possible, otherwise \\"NO\\" if n < 2: return \\"NO\\" sequence.sort() for i in range(1, n): if sequence[i] > sequence[i - 1]: return \\"YES\\" return \\"NO\\""},{"question":"Berland\'s urban transport authority is looking to optimize the city bus routes. Berland has n bus stops and m possible bus routes between them. Each bus route connects exactly two bus stops and has a certain travel time. Your task is to determine if it\'s possible to create a way for residents to travel between all bus stops using at most k bus routes. Each route can be used in both directions, and there are no routes that connect a bus stop to itself. Input The first input line includes three integers, n, m, and k (2 ≤ n ≤ 3000; 0 ≤ m ≤ 10000; 1 ≤ k ≤ 3000), representing the number of bus stops, the number of possible bus routes, and the maximum number of routes allowed in the final configuration, respectively. The following m lines each consist of three integers ui, vi, and ti (1 ≤ ui, vi ≤ n; 1 ≤ ti ≤ 1000), providing the bus stops connected by a bus route and the travel time for that route. Output Output \\"YES\\" if it is possible to travel between all bus stops using at most k bus routes; otherwise, output \\"NO\\". Examples Input 4 5 3 1 2 10 2 3 10 3 4 10 1 3 15 1 4 20 Output YES Input 4 3 2 1 2 5 2 3 5 3 4 5 Output NO","solution":"def can_connect_all_stops(n, m, k, routes): Determine if it\'s possible to create a way for residents to travel between all bus stops using at most k bus routes. Uses Kruskal\'s algorithm to find the Minimum Spanning Tree (MST). Parameters: - n (int): Number of bus stops. - m (int): Number of possible bus routes. - k (int): Maximum number of routes allowed in the final configuration. - routes (list of tuples): Each tuple contains (ui, vi, ti) acting as an edge between bus stops ui and vi with travel time ti. Returns: - str: \\"YES\\" if possible to connect all stops using at most k routes, otherwise \\"NO\\". parent = list(range(n + 1)) rank = [0] * (n + 1) def find(u): if u != parent[u]: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 routes.sort(key=lambda x: x[2]) mst_edges = 0 for u, v, t in routes: if find(u) != find(v): union(u, v) mst_edges += 1 if mst_edges == n - 1: break return \\"YES\\" if mst_edges <= k and mst_edges == n - 1 else \\"NO\\""},{"question":"In a faraway kingdom, there\'s a unique tour program which visits n castles. Each castle is connected to exactly one other castle in the kingdom by a road. Each road has a length associated with it, which represents the travel time in minutes between the two castles it connects. A tour starts at castle 1 and aims to visit each castle exactly once, with the tour ending at any castle. To make the trip interesting and not too long, there\'s a time limit T which the total travel time must not exceed. Given the number of castles and the time limit, your task is to determine the maximum number of unique castles that can be visited without exceeding the total travel time T. Remember, each castle must be visited exactly once before the tour is considered complete. Input: - The first line contains two integers n and T (2 ≤ n ≤ 100, 1 ≤ T ≤ 1000) — the number of castles and the maximum allowable travel time in minutes. - The next n-1 lines each contain three integers a_i, b_i, t_i (1 ≤ a_i, b_i ≤ n, 1 ≤ t_i ≤ 1000) — indicating that there\'ll be a road connecting castle a_i with castle b_i of length t_i. Output: - One integer — the maximum number of unique castles that can be visited without exceeding the total travel time of T minutes. Example: Input: 4 100 1 2 10 2 3 60 3 4 30 Output: 4 Explanation: The castles are connected as follows: - Road from castle 1 to castle 2 takes 10 minutes. - Road from castle 2 to castle 3 takes 60 minutes. - Road from castle 3 to castle 4 takes 30 minutes. Starting from castle 1, visiting castles 2, 3, then 4 has a total travel time of 10 + 60 + 30 = 100 minutes, which does not exceed the limit T. So the maximum number of castles visited is 4. Hence, the output is 4.","solution":"def max_castles_visited(n, T, roads): import heapq from collections import defaultdict graph = defaultdict(list) for a, b, t in roads: graph[a].append((t, b)) graph[b].append((t, a)) # Using Dijkstra\'s algorithm to find the max castles visited with given time T heap = [(0, 1)] # (current_time, current_castle) visited = {1: 0} # {castle: min_time_to_reach} while heap: curr_time, curr_castle = heapq.heappop(heap) for travel_time, next_castle in graph[curr_castle]: next_time = curr_time + travel_time if next_time <= T and (next_castle not in visited or next_time < visited[next_castle]): visited[next_castle] = next_time heapq.heappush(heap, (next_time, next_castle)) return len(visited) # Example input road_list = [(1, 2, 10), (2, 3, 60), (3, 4, 30)] print(max_castles_visited(4, 100, road_list)) # Output: 4"},{"question":"A bakery shop is known for its delicious pastries and is always looking for innovative ways to improve their services. They recently implemented an automatic billing system where customers can go through the menu, make a selection of items, and get the bill generated automatically. The menu has the following items: - Chocolate Cake: 15 - Strawberry Cake: 16 - Blueberry Muffin: 6 - Cheese Tart: 8 - Croissant: 4 Given a list of selected items, your task is to generate and display the total amount to be paid. Input format: The input starts with an integer n, denoting the number of items selected. On the next n lines, the name of the selected item is given. Output format: For every case, you need to print a single line stating \\"Total Amount: X\\", where X is the total bill amount. Constraints: 1 ≤ n ≤ 100 All items given in input will be present in the menu. Example Input: 3 Chocolate Cake Croissant Cheese Tart Example Output: Total Amount: 27 SAMPLE INPUT 2 Strawberry Cake Blueberry Muffin SAMPLE OUTPUT Total Amount: 22","solution":"def calculate_total_amount(n, items): Calculates the total amount for the selected items. menu = { \'Chocolate Cake\': 15, \'Strawberry Cake\': 16, \'Blueberry Muffin\': 6, \'Cheese Tart\': 8, \'Croissant\': 4 } total_amount = sum(menu[item] for item in items) return f\\"Total Amount: {total_amount}\\""},{"question":"In a far-away kingdom, there are n castles built in a straight line, and each castle needs protection. To protect the castles, there are m knights available. Each knight can protect a certain number of castles depending on their strength. Specifically, the i-th knight can protect up to si castles to the left and si castles to the right of their position, inclusive of the castle they are stationed at. However, knights can only be stationed at certain castles. You are given a list of k locations where knights can be stationed. Your task is to determine if it is possible to protect all castles using these knights and the given available positions. Input The first line contains three integers n, m, and k (1 ≤ n ≤ 1,000,000, 1 ≤ m, k ≤ 100,000) — the number of castles, the number of knights, and the number of positions where knights can be stationed, respectively. The second line contains m integers s1, s2, ..., sm (1 ≤ si ≤ n), where si is the number of castles the i-th knight can protect to both sides from their position. The third line contains k distinct integers p1, p2, ..., pk (1 ≤ pi ≤ n), where pi is a position where a knight can be stationed. Output Print \\"YES\\" if it is possible to protect all castles, otherwise print \\"NO\\". Example Input 10 3 4 2 1 3 2 5 8 10 Output YES Note In the example, there are 10 castles and 3 knights available. The knights can protect up to 2, 1, and 3 castles, respectively. The positions available for positioning the knights are 2, 5, 8, and 10. Stationing the knights at positions 2, 5, and 8 can protect all the castles: - The knight stationed at position 2 can protect castles 1 to 4. - The knight stationed at position 5 can protect castles 4 to 6. - The knight stationed at position 8 can protect castles 5 to 10. Thus, all castles from 1 to 10 are covered. Therefore, the output is \\"YES\\".","solution":"def can_protect_castles(n, m, k, s, p): Determine if it is possible to protect all castles using the given knights and positions. Parameters: n (int): The number of castles. m (int): The number of knights. k (int): The number of positions where knights can be stationed. s (list of int): The number of castles each knight can protect to both sides from their position. p (list of int): The positions where a knight can be stationed. Returns: str: \\"YES\\" if all castles can be protected, \\"NO\\" otherwise. ranges = [] for i in range(m): for pos in p: left_limit = max(1, pos - s[i]) right_limit = min(n, pos + s[i]) ranges.append((left_limit, right_limit)) ranges.sort() current_end = 0 for r in ranges: if r[0] > current_end + 1: break current_end = max(current_end, r[1]) return \\"YES\\" if current_end >= n else \\"NO\\""},{"question":"You are given a grid of shape n x m filled with integers. You need to find the number of distinct paths from the cell (1, 1) to the cell (n, m) such that the sum of the elements along the path is exactly x. You can only move right or down from a cell. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 50), representing the number of test cases. Each test case starts with three integers n, m, and x (1 ≤ n, m ≤ 50, 1 ≤ x ≤ 10^9) — the dimensions of the grid and the target sum respectively. The next n lines each contain m integers representing the elements of the grid. Output For each test case, print a single integer — the number of distinct paths from (1, 1) to (n, m) such that the sum of elements along the path is exactly x. Example Input 2 2 2 4 1 2 2 1 3 3 10 1 2 3 4 5 6 7 8 9 Output 2 0 Explanation In the first test case, there are two distinct paths from (1,1) to (2,2) that result in the sum of elements being 4: - (1 -> 2 -> 1) - (1 -> 2 -> 1) In the second test case, there is no path from (1,1) to (3,3) that results in the sum of elements being 10.","solution":"def distinct_paths(n, m, x, grid): from collections import defaultdict # Helper function to perform the DP computation def find_paths(): dp = [[defaultdict(int) for _ in range(m)] for _ in range(n)] dp[0][0][grid[0][0]] = 1 for i in range(n): for j in range(m): if i > 0: for s in dp[i-1][j]: dp[i][j][s + grid[i][j]] += dp[i-1][j][s] if j > 0: for s in dp[i][j-1]: dp[i][j][s + grid[i][j]] += dp[i][j-1][s] return dp[n-1][m-1][x] return find_paths() def solve_task(t, cases): results = [] for case in cases: n, m, x, grid = case[\'n\'], case[\'m\'], case[\'x\'], case[\'grid\'] results.append(distinct_paths(n, m, x, grid)) return results"},{"question":"Two adventurers, Alex and Sam, find themselves stuck in a maze. The maze is represented as an n x m grid of integers. Each cell has a value which can be either 0, representing free space, or -1, representing a wall. The two adventurers start at given cells and want to meet at one common free cell to escape together. However, they can only move up, down, left, or right and cannot move through walls. Determine if there exists a free cell in the maze where both adventurers can meet starting from their initial positions. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. The next line contains two space-separated integers n, m (1 ≤ n, m ≤ 50) — the dimensions of the maze. The next n lines contain m space-separated integers representing the maze cells\' values (either 0 or -1). The next line contains two space-separated integers x1, y1 (1 ≤ x1 ≤ n, 1 ≤ y1 ≤ m) — the starting coordinates of Alex. The next line contains two space-separated integers x2, y2 (1 ≤ x2 ≤ n, 1 ≤ y2 ≤ m) — the starting coordinates of Sam. Output For each test case, print \\"YES\\" if there is a free cell where both adventurers can meet, otherwise print \\"NO\\". Example Input 3 3 3 0 0 0 0 -1 0 0 0 0 1 1 3 3 3 3 0 0 0 -1 -1 0 0 0 0 1 1 3 3 2 2 0 -1 0 -1 -1 -1 0 0 0 1 1 3 3 Output YES YES NO Note For the first case: Both Alex and Sam start on free cells (1,1) and (3,3) respectively, and there are many free cells in the maze where they can meet, such as cell (1,3). For the second case: The maze is a straight free path, Alex and Sam can meet at many cells like (1,1) or (3,3). For the third case: The maze blocks the path between Alex and Sam, thus no common meeting cell exists.","solution":"def can_meet_in_maze(t, test_cases): def bfs(start, maze): n = len(maze) m = len(maze[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = [start] visited = set() visited.add(start) while queue: x, y = queue.pop(0) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return visited results = [] for i in range(t): n, m = test_cases[i][0] maze = test_cases[i][1] x1, y1 = test_cases[i][2] x2, y2 = test_cases[i][3] x1, y1 = x1 - 1, y1 - 1 x2, y2 = x2 - 1, y2 - 1 if maze[x1][y1] == -1 or maze[x2][y2] == -1: results.append(\\"NO\\") continue alex_reachable = bfs((x1, y1), maze) sam_reachable = bfs((x2, y2), maze) if alex_reachable & sam_reachable: # Check for intersection results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers, write a function that finds all unique triplets in the array which gives the sum of zero. Note that the solution set must not contain duplicate triplets. # Input - One integer `n` representing the number of elements in the array. - An array of `n` integers. # Output - Print all unique triplets in the format \\"a b c\\" where `a`, `b`, and `c` are the elements of the triplet, and they are in non-descending order. # Constraints - `1 <= n <= 1000` - `-10^5 <= array[i] <= 10^5` # Example ``` Input: 6 -1 0 1 2 -1 -4 Output: -1 -1 2 -1 0 1 ``` # Note - The output can be in any order but should not contain duplicate triplets and should ensure each triplet is printed only once.","solution":"def find_triplets_with_zero_sum(n, array): array.sort() triplets = set() for i in range(n): if i > 0 and array[i] == array[i - 1]: continue left, right = i + 1, n - 1 while left < right: sum = array[i] + array[left] + array[right] if sum == 0: triplets.add((array[i], array[left], array[right])) left += 1 right -= 1 while left < right and array[left] == array[left - 1]: left += 1 while left < right and array[right] == array[right + 1]: right -= 1 elif sum < 0: left += 1 else: right -= 1 for triplet in triplets: print(f\\"{triplet[0]} {triplet[1]} {triplet[2]}\\")"},{"question":"You are given a string containing a series of words separated by single spaces. The string contains no leading, trailing, or multiple spaces. Your task is to reverse the order of words in the string. Input The input consists of a single string containing a series of words separated by single spaces. Each word has a length not exceeding 100 letters, and the total length of the string does not exceed 10,000 letters. Output Output a single string with the words in the reverse order they appeared in the input. Examples Input the sky is blue Output blue is sky the Input hello world Output world hello Note Use in-built string manipulation methods and ensure the output retains only single spaces between words, and there should be no leading or trailing spaces in the output.","solution":"def reverse_words(s): Reverses the order of words in the input string. :param s: string containing words separated by single spaces :return: a single string with words in reverse order, separated by single spaces words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"The Headmaster of a magic school has a collection of magical artifacts, each with a unique power value associated with them. In preparation for an upcoming magical tournament, he needs to ensure that he selects the maximum possible power combination from the artifacts without the sum of the power values exceeding a specific limit. Given a list of power values of the artifacts and a maximum allowed power sum, determine the highest possible sum of a subset of these power values such that it does not exceed the given limit. Input: The first line contains an integer T, the number of test cases (1 ≤ T ≤ 50). For each test case: - The first line contains two integers n and W, where n is the number of artifacts (1 ≤ n ≤ 1000) and W is the maximum allowed power sum (1 ≤ W ≤ 1000). - The second line contains n integers, each representing the power value of an artifact (1 ≤ power value ≤ 1000). Output: For each test case, output a single integer, the highest possible sum of the power values of any subset of the artifacts that does not exceed the maximum allowed power sum. Example: Input: 3 5 10 1 2 3 4 5 4 7 2 2 2 9 3 8 3 5 7 Output: 10 6 8 Note: - In the first test case, the power values are [1, 2, 3, 4, 5], and the maximum allowed power sum is 10. The subset {1, 2, 3, 4} sums up to 10, which is the highest possible value within the limit. - In the second test case, the power values are [2, 2, 2, 9], and the maximum allowed power sum is 7. The subset {2, 2, 2} sums up to 6, which is the highest possible value within the limit. - In the third test case, the power values are [3, 5, 7], and the maximum allowed power sum is 8. The subset {3, 5} sums up to 8, which is the highest possible value within the limit.","solution":"def max_power_combination(test_cases): Returns the highest possible sum of the power values of any subset of artifacts for each test case that does not exceed the maximum allowed power sum. results = [] for case in test_cases: n, W, power_values = case dp = [0] * (W + 1) for power in power_values: for j in range(W, power - 1, -1): dp[j] = max(dp[j], dp[j - power] + power) results.append(dp[W]) return results"},{"question":"You are given two circular discs on a 2D plane. Each disc is defined by the coordinates of its center and its radius. Write a program to determine whether the two discs intersect or touch each other. Two discs intersect if they share at least one point. Input The input data consists of two lines, one for each disc, each containing three integers. The first integer represents the x-coordinate of the disc\'s center, the second integer represents the y-coordinate of the disc\'s center, and the third integer represents the radius of the disc. The coordinates and radius values are integers between -1000 and 1000. Output Print \\"YES\\" if the discs intersect, otherwise print \\"NO\\". You can print each letter in any case (upper or lower). Examples Input 0 0 5 7 0 5 Output YES Input 0 0 3 10 0 2 Output NO Input 1 1 4 4 5 2 Output YES Note In the first example, the discs intersect because their edges touch at one point. In the second example, the discs do not intersect because the distance between their centers is greater than the sum of their radii. In the third example, the discs intersect as they share more than one point.","solution":"import math def discs_intersect(x1, y1, r1, x2, y2, r2): Determine if two discs intersect or touch each other. Args: x1, y1, r1: integer, integer, integer, coordinates of the center and radius of the first disc x2, y2, r2: integer, integer, integer, coordinates of the center and radius of the second disc Returns: string: \\"YES\\" if the discs intersect or touch, otherwise \\"NO\\" distance_centers = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) if distance_centers <= r1 + r2: return \\"YES\\" else: return \\"NO\\""},{"question":"PROBLEM SPECIFICATION: You are given an array of integers and a target value. Your task is to determine if there are two distinct integers in the array that add up to the target value. INPUT SPECIFICATION: You will be given \'t\' test cases. Each test case consists of: - An integer \'n\' (1 ≤ n ≤ 10^5), the number of elements in the array. - An integer \'target\', the target value. - An array of \'n\' integers separated by spaces, where each integer is between -10^9 and 10^9. OUTPUT SPECIFICATION: For each test case, output \\"YES\\" if there are two distinct integers in the array that sum up to the target value. Otherwise, output \\"NO\\". CONSTRAINTS: 0 < t ≤ 100 1 ≤ n ≤ 10^5 SAMPLE INPUT 2 5 9 1 2 3 4 5 4 8 1 2 4 4 SAMPLE OUTPUT YES YES Explanation In the first test case, the integers 4 and 5 can be added to get the target value 9. In the second test case, the integers 4 and 4 can be added to get the target value 8.","solution":"def can_sum_to_target(nums, target): Check if there are two distinct integers in the array that add up to the target value. num_set = set() for num in nums: if target - num in num_set: return \\"YES\\" num_set.add(num) return \\"NO\\" def process_test_cases(test_cases): Process multiple test cases and return results for each as a list. results = [] for t in test_cases: n, target, nums = t result = can_sum_to_target(nums, target) results.append(result) return results"},{"question":"Lee is working on improving the energy efficiency of a tall building by installing solar panels on its windows. The building has `n` floors and each floor has `m` windows. The solar panels come in different sizes and can only be installed on each window aligning with specific rules. The panel sizes are integer values starting from 1 up to `n*m`. To ensure optimal energy efficiency, two solar panels installed on any two adjacent windows (vertically or horizontally) must have a difference in size that is strictly more than 1. Help Lee determine a way to install the solar panels such that this condition is always met. Input The first line contains two space-separated integers `n` and `m` (1 ≤ n, m ≤ 80) — the number of floors and windows on each floor. Output If there\'s no way to satisfy the conditions, print -1. Otherwise, print `n` lines containing `m` numbers each — the panel sizes to be installed in each window. If there are multiple solutions, print any of them. Examples Input 3 2 Output 2 5 4 1 6 3 Input 1 5 Output 1 3 5 2 4","solution":"def install_solar_panels(n, m): # Check for edge case when it\'s impossible to install panels satisfying the condition if n == 1 and m == 1: return [[1]] panels = [[0] * m for _ in range(n)] # Fill panels grid with zigzag pattern num = 1 for i in range(n): for j in range(m): panels[i][j] = num num += 1 for i in range(n): if i % 2 == 1: panels[i].reverse() # Print and return the grid for line in panels: print(\' \'.join(map(str, line))) return panels"},{"question":"Write a program that takes an integer input `n` and outputs an `n x n` matrix such that each element in the matrix is the sum of its row and column indices (0-based). Integer Input An integer `n` is given as input, where `1 <= n <= 100`. This determines the size of the matrix. Output The program should output an `n x n` matrix where each element at position (i, j) is the sum of `i` and `j`. Example Input 3 Output 0 1 2 1 2 3 2 3 4 Explanation For a 3x3 matrix, element at position (0, 0) is 0+0, at position (0, 1) is 0+1, and so on up to position (2, 2) which is 2+2.","solution":"def generate_matrix(n): Generates an n x n matrix where each element at position (i, j) is the sum of its row and column indices. Parameters: n (int): The size of the matrix (1 <= n <= 100) Returns: list of list of int: The generated n x n matrix matrix = [] for i in range(n): row = [] for j in range(n): row.append(i + j) matrix.append(row) return matrix"},{"question":"Luna is practicing her archery skills at a range that has multiple targets in a row. Each target has a specific score value assigned to it, and her goal is to maximize her score by hitting a selection of targets. However, there\'s a catch — she can only hit targets in a sequence without skipping any targets in between, and the sequence must have at least one target and not exceed k targets in length. Your task is to find the maximum score she can achieve under these conditions. Input The first line of input contains an integer n (1 ≤ n ≤ 1,000) — the number of targets. The second line contains n space-separated integers, the i-th of which is si (1 ≤ si ≤ 1,000) — the score value of the i-th target. The third line contains a single integer k (1 ≤ k ≤ n) — the maximum length of the sequence she can hit. Output Print a single integer — the maximum score she can achieve by hitting at most k consecutive targets. Examples Input 5 2 4 5 1 6 2 Output 9 Input 6 3 5 7 2 1 4 3 Output 15 Input 4 9 3 8 7 1 Output 9 Note In the first example, Luna can achieve a maximum score by hitting the sequence 4 5 (total score is 9). In the second example, the maximum score is achieved by hitting the sequence 5 7 2 (total score is 14) or 3 5 7 (total score is 15). In the third example, the highest score of an individual target is 9, which she can achieve by hitting the first target only.","solution":"def max_score(n, scores, k): Returns the maximum score Luna can achieve by hitting at most k consecutive targets. Parameters: n (int): Number of targets scores (list of int): List with score values of each target k (int): Maximum length of the sequence she can hit Returns: int: Maximum score achieved max_score = 0 for i in range(n): current_sum = 0 for j in range(k): if i + j < n: current_sum += scores[i + j] max_score = max(max_score, current_sum) return max_score"},{"question":"A music streaming service wants to keep track of the longest consecutive streak of unique songs listened to by a user. Each song is identified by a unique integer ID. Users can listen to multiple songs, and the songs they listen to are stored in a list in the order they were played. You are required to write a function that determines the length of the longest streak of consecutive unique song IDs. Function Signature: `def longest_unique_streak(songs: List[int]) -> int:` Input - `songs`: A list of integers where each integer represents a song ID. The length of the list is denoted by N, where (1 leq N leq 10^5). Each song ID is a non-negative integer between 0 and (10^9). Output - Return an integer representing the length of the longest consecutive streak of unique songs that the user has listened to. Example Input: ``` [1, 2, 3, 1, 2, 3, 4, 5] ``` Output: ``` 5 ``` Explanation The longest streak of consecutive unique songs in the example is [1, 2, 3, 4, 5], which has a length of 5.","solution":"def longest_unique_streak(songs): Returns the length of the longest streak of consecutive unique song IDs. n = len(songs) if n == 0: return 0 unique_songs = set() max_len = 0 left = 0 for right in range(n): while songs[right] in unique_songs: unique_songs.remove(songs[left]) left += 1 unique_songs.add(songs[right]) max_len = max(max_len, right - left + 1) return max_len"},{"question":"In a galaxy far, far away, there is a planet where the inhabitants communicate using a special language based on strings and numbers. They want you to help them with a simple but important problem. You are given a list of n strings, and a sequence of m queries. Each query provides a string, and your task is to find out how many strings in the original list match the given query string exactly. Input - The first line contains a single integer n (1 ≤ n ≤ 100). - The next n lines contain one string each. Each string consists of lowercase English letters and its length does not exceed 100. - The following line contains an integer m (1 ≤ m ≤ 100). - The next m lines contain one string each, representing a query string. Each query string consists of lowercase English letters and its length does not exceed 100. Output For each query, output a single integer that represents the number of strings in the original list that match the query string exactly. Example Input 5 apple banana orange apple lemon 3 apple grape banana Output 2 0 1 Explanation For the query \\"apple\\", there are 2 occurrences of \\"apple\\" in the list. For \\"grape\\", there are no occurrences, hence the output is 0. For \\"banana\\", there is exactly 1 occurrence.","solution":"def count_matches(strings, queries): This function takes a list of strings and a list of query strings, and returns a list with the count of occurrences of each query string in the list of strings. result = [] for query in queries: result.append(strings.count(query)) return result"},{"question":"A robot is located at the top-left corner of a grid with ( R ) rows and ( C ) columns. The robot can move either down or right at any point in time. The grid contains some obstacles that the robot cannot cross. Obstacles and the grid dimensions are given as input. Write a program that calculates the number of unique paths the robot can take to reach the bottom-right corner of the grid. **Input** - The integer ( R ) and the integer ( C ) are given on the first line, separated by spaces. - The next ( R ) lines each contain ( C ) integers (0 or 1). A value of \'0\' indicates a free cell, and \'1\' indicates an obstacle. **Output** - Print the number of unique paths the robot can take to reach the bottom-right corner modulo ( 1000000007 ). If there is no such path, print 0. **Constraint** - ( 1 leq R leq 50 ) - ( 1 leq C leq 50 ) **Example 1:** Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` Explanation: ``` There are two paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right ``` **Example 2:** Input: ``` 3 3 0 1 0 0 1 0 0 0 0 ``` Output: ``` 1 ``` Explanation: ``` There is only one path: Down -> Down -> Right -> Right ``` **Example 3:** Input: ``` 3 3 1 0 0 0 0 0 0 0 0 ``` Output: ``` 0 ``` Explanation: ``` There is no path as the starting point itself is an obstacle. ```","solution":"def unique_paths_with_obstacles(grid): R = len(grid) C = len(grid[0]) MOD = 1000000007 # If the starting or ending points are obstacles, return 0 if grid[0][0] == 1 or grid[R-1][C-1] == 1: return 0 # Initialize the DP table dp = [[0] * C for _ in range(R)] dp[0][0] = 1 # Fill the DP table for i in range(R): for j in range(C): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[R-1][C-1]"},{"question":"In a futuristic city, autonomous vehicles are being controlled by an AI system to strictly manage traffic in a grid-like structure consisting of n * m crossroads. Each crossroad has traffic lights that permit cars to move in several directions (\\"^\\" for upwards, \\"v\\" for downwards, \\"<\\" for leftwards, and \\">\\" for rightwards). The AI system receives a series of commands to determine the status of each crossroad. Let\'s number the rows with 1 to n from top to bottom, and the columns with 1 to m from left to right. Initially, all crossroads have no traffic lights. Your task is to simulate the status of the grid upon receiving a series of commands and to evaluate the traffic light status at given positions. Each command could be one of three types: - \\"S x y c\\" sets the traffic light at crossroad (x, y) to allow movement in direction c. - \\"C x y\\" clears the traffic light at crossroad (x, y), removing any direction settings. - \\"Q x y\\" queries the current traffic direction at crossroad (x, y). If there is no direction set at the crossroad, it should return \\"N/A\\". Input The first line of input contains three integers n, m, and q (1 ≤ n, m ≤ 100, 1 ≤ q ≤ 1000), separated by spaces. Next q lines, each line describes a command. The format is one of \\"S x y c\\", \\"C x y\\", or \\"Q x y\\". It\'s guaranteed that 1 ≤ x ≤ n, 1 ≤ y ≤ m, and c is a character from the set \\"^v<>\\". Output For each query of type \\"Q\\", output the direction of the traffic light at (x, y) or \\"N/A\\" if no direction is set. Example Input 3 3 6 S 2 2 > S 1 1 ^ Q 2 2 Q 1 1 C 2 2 Q 2 2 Output > ^ N/A Explanation Initially, there are no traffic lights at any crossroad. 1. \\"S 2 2 >\\": sets the traffic light at (2, 2) to \\">\\". 2. \\"S 1 1 ^\\": sets the traffic light at (1, 1) to \\"^\\". 3. \\"Q 2 2\\": queries the status of (2, 2), which is currently \\">\\". 4. \\"Q 1 1\\": queries the status of (1, 1), which is currently \\"^\\". 5. \\"C 2 2\\": clears the traffic light at (2, 2). 6. \\"Q 2 2\\": queries the status of (2, 2) again, which now returns \\"N/A\\" as the light was cleared.","solution":"def traffic_lights(n, m, commands): # Initialize the grid with None values grid = [[None for _ in range(m)] for _ in range(n)] results = [] for command in commands: parts = command.split() action = parts[0] x = int(parts[1]) - 1 y = int(parts[2]) - 1 if action == \\"S\\": c = parts[3] grid[x][y] = c elif action == \\"C\\": grid[x][y] = None elif action == \\"Q\\": results.append(grid[x][y] if grid[x][y] is not None else \\"N/A\\") return results"},{"question":"The Travelling Salesman Problem (TSP) is a classic algorithmic problem in the fields of computer science and operations research. Given a list of cities and the distances between each pair of cities, the objective is to find the shortest possible route that visits each city exactly once and returns to the original city. Task Given a list of cities and the distances between each pair of cities, your task is to write a program that finds the shortest possible route that visits each city exactly once and returns to the original city. Input The input contains a number of test cases. The first line of each test case contains a positive integer N (N ≤ 10), representing the number of cities. The next N lines each contain N non-negative integer numbers, where the j-th number in the i-th line represents the distance between city i and city j. This distance will be zero for all i = j (distance from a city to itself). For other pairs i, j (i ≠ j), the distance will be a positive integer. The end of the input is indicated by a line containing a single zero. Output For each test case, output a line containing the minimum possible distance of the shortest route that visits each city exactly once and returns to the original city. The value should be an integer. Example Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 15 20 15 0 0 Output 80 64","solution":"from itertools import permutations def tsp(distance_matrix): N = len(distance_matrix) cities = list(range(N)) min_dist = float(\'inf\') for perm in permutations(cities[1:]): curr_dist = 0 prev_city = 0 for city in perm: curr_dist += distance_matrix[prev_city][city] prev_city = city curr_dist += distance_matrix[prev_city][0] if curr_dist < min_dist: min_dist = curr_dist return min_dist def solve_tsp(test_cases): results = [] for distance_matrix in test_cases: results.append(tsp(distance_matrix)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') idx = 0 test_cases = [] while idx < len(lines): N = int(lines[idx]) if N == 0: break idx += 1 matrix = [] for _ in range(N): matrix.append(list(map(int, lines[idx].split()))) idx += 1 test_cases.append(matrix) return test_cases def main(input_str): test_cases = parse_input(input_str) results = solve_tsp(test_cases) for result in results: print(result)"},{"question":"In ancient times, there was a kingdom where people made calculations using two abacuses situated side by side. Each abacus had a single row of beads marked with values. The king wanted to know if two specific abacuses (each with a different number of beads) could represent the same total value if some of their beads were converted. To assist the king, you must write a program to determine whether it is possible to make the value of the two abacuses equal by changing a limited number of beads. Each bead has an initial value of either 0 or 1. You are allowed to flip only a certain number of beads (convert 0 to 1 or 1 to 0) on each abacus to try to make their totals equal. Input The first line contains two integers, n (1 ≤ n ≤ 100), the number of beads on the first abacus, and m (1 ≤ m ≤ 100), the number of beads on the second abacus. The second line contains n integers, each being either 0 or 1, representing the initial values of the beads on the first abacus. The third line contains m integers, each being either 0 or 1, representing the initial values of the beads on the second abacus. The fourth line contains two integers, k1 and k2 (0 ≤ k1 ≤ n, 0 ≤ k2 ≤ m), representing the maximum number of beads you are allowed to flip on the first and second abacuses respectively. Output Print \\"YES\\" if it is possible to make the two abacuses represent the same total value by flipping no more than k1 beads on the first abacus and no more than k2 beads on the second abacus. Otherwise, print \\"NO\\". Examples Input 5 4 1 0 1 1 0 0 1 0 0 2 3 Output YES Input 3 3 1 1 1 0 0 0 1 1 Output NO **Explanation:** In the first example, the initial total value of the first abacus is 3 and the total of the second is 1. By flipping 2 beads on the first abacus (changing two 1\'s to 0\'s) and flipping 1 bead on the second abacus (changing one 0 to 1), both abacuses can represent a total value of 1. In the second example, it\'s impossible to make the totals equal with the given limits on the number of flips.","solution":"def can_make_equal(n, m, abacus1, abacus2, k1, k2): Determines if two abacuses can represent the same total value by flipping a limited number of beads. sum1 = sum(abacus1) sum2 = sum(abacus2) # The difference between the two sums diff = abs(sum1 - sum2) # You are allowed to flip at most k1 beads on abacus1 and k2 beads on abacus2 # The maximum change you can make to the total difference is k1 + k2 if diff <= k1 + k2: return \\"YES\\" else: return \\"NO\\""},{"question":"In a class of N students, each student is assigned a unique identification number from 1 to N. The teacher decides to organize a game in which students are grouped in pairs. Each pair competes in a friendly match and scores points based on their performance. The performance of each student is characterized by their skill level, which is represented by an integer array S of size N, where S[i] denotes the skill level of the student with ID i+1. The teacher wants to group the students such that the difference between the skill levels of the paired students is minimized. Formally, for a given pairing of students, the difference for a pair (i, j) is defined as |S[i-1] - S[j-1]|. The objective is to minimize the sum of these differences for all pairs. Write a function to determine the minimum possible sum of differences for any valid pairing of students. Input: - The first line contains a single integer N, the number of students (1 ≤ N ≤ 10^5). - The second line contains N integers S[1], S[2], ..., S[N] representing the skill levels of students (1 ≤ S[i] ≤ 10^6). Output: - Print a single integer, the minimum possible sum of differences for the optimal pairing. Constraints: - N is guaranteed to be an even number. Example: Input: 4 1 3 2 4 Output: 2 Explanation: The students can be paired as follows: (1, 2) and (3, 4) with skill levels differences |1-2| + |3-4| = 1 + 1 = 2, which is the minimum possible sum of differences.","solution":"def minimum_sum_of_differences(N, S): Given the number of students N and their skill levels S, this function returns the minimum possible sum of differences for an optimal pairing. # Sort the skill levels in ascending order S.sort() # Initialize the minimum sum of differences min_sum = 0 # Pair students with adjacent elements after sorting for i in range(0, N, 2): min_sum += S[i + 1] - S[i] return min_sum"},{"question":"A museum wants to display a set of unique artifacts such that no two artifacts have the same dimensions. Each artifact can be represented as a rectangle with integer width (w) and height (h) such that 1 ≤ w, h ≤ N. Your task is to find any set of artifacts that satisfies the museum\'s requirement. You need to find exactly M unique artifacts. Input The first line contains two integers N (1 ≤ N ≤ 1000) and M (1 ≤ M ≤ N*N) representing the maximum dimension and the number of unique artifacts needed, respectively. Output The output should contain M lines. Each line should contain two space-separated integers representing the width and height of each artifact. Examples Input 4 5 Output 1 1 1 2 1 3 1 4 2 1","solution":"def find_artifacts(N, M): artifacts = [] for w in range(1, N + 1): for h in range(1, N + 1): if len(artifacts) < M: artifacts.append((w, h)) else: break if len(artifacts) >= M: break return artifacts"},{"question":"You are given an array consisting of n integers. For each index i of the array, you need to determine if there exists another index j (j ≠ i) such that the sum of the elements at indices i and j is equal to a given number k. Input The first line contains an integer n (2 ≤ n ≤ 200000) — the size of the array. The second line contains n integers a1, a2, ..., an (−109 ≤ ai ≤ 109) — the elements of the array. The third line contains a single integer k (−218 ≤ k ≤ 218). Output Print \\"YES\\" if such a pair of indices exists. Otherwise, print \\"NO\\". Examples Input 5 1 2 3 4 5 6 Output YES Input 4 1 2 3 9 8 Output NO","solution":"def find_pair_with_sum(arr, k): Determines if there exists a pair of indices (i, j) such that i ≠ j and arr[i] + arr[j] == k. :param arr: List of integers :param k: Target sum :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\" seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Kevin is building his skills in competitive programming and stumbled upon a problem involving leap years. He decided to write a program that checks if a given year is a leap year or not. However, Kevin later found out that the rules he had were not correct, and he needs your help to verify a year based on the correct rules. A year is a leap year if: 1. It is divisible by 400, or 2. It is divisible by 4 and not divisible by 100. Given a list of years, your task is to determine for each year if it is a leap year or not. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of years. Each of the next n lines contains one integer y (1 ≤ y ≤ 10^9) — the year to be checked. Output For each year, print \\"YES\\" if it is a leap year, otherwise print \\"NO\\". Examples Input 3 2000 1900 2004 Output YES NO YES Input 4 1999 1600 2020 1800 Output NO YES YES NO Note In the first example: - The year 2000 is a leap year because it is divisible by 400. - The year 1900 is not a leap year because it is divisible by 100 but not by 400. - The year 2004 is a leap year because it is divisible by 4 and not divisible by 100. In the second example: - The year 1999 is not a leap year because it is not divisible by 4. - The year 1600 is a leap year because it is divisible by 400. - The year 2020 is a leap year because it is divisible by 4 and not divisible by 100. - The year 1800 is not a leap year because it is divisible by 100 but not by 400.","solution":"def is_leap_year(year): Returns \'YES\' if the given year is a leap year, \'NO\' otherwise. if (year % 400 == 0) or (year % 4 == 0 and year % 100 != 0): return \\"YES\\" else: return \\"NO\\" def leap_years(years): Given a list of years, returns a list indicating whether each year is a leap year. Parameters: years (list): List of integers representing years. Returns: list: List of strings \'YES\' or \'NO\' indicating leap years. return [is_leap_year(year) for year in years]"},{"question":"Tina is a college student who loves programming and organizing her study schedule. She keeps track of her study times and breaks using a schedule list. However, Tina has noticed that some study sessions and break periods overlap, and she wants to reorganize her schedule to avoid any conflicts. Can you help her identify the overlapping periods? You need to write a program that takes in a list of study sessions and break periods and determines if there are any overlaps. Each period is defined by a start time and an end time. For simplicity, we\'ll use a 24-hour clock format (HH:MM) and assume all times are within a single day. Input The first line contains an integer N, the number of periods in Tina\'s schedule. Each of the next N lines contains two strings, indicating the start time and end time of a period (both in HH:MM format). Output If any two periods overlap, print \\"OVERLAP\\". Otherwise, print \\"NO OVERLAP\\". Constraints * 1 ≤ N ≤ 100 * The start time and end time for each period are valid times within a single day. * Each period\'s start time is strictly less than its end time. Examples Input 4 09:00 10:30 10:00 11:00 14:00 15:00 15:00 16:00 Output OVERLAP Input 3 08:00 09:00 09:30 10:30 10:45 11:45 Output NO OVERLAP Notes Two periods overlap if they share any common time. For instance, \\"09:00 10:30\\" and \\"10:00 11:00\\" overlap because both include the time 10:00.","solution":"def check_overlap(periods): Takes a list of study sessions/break periods and checks if any periods overlap. Parameters: periods (list of tuples): List of (start, end) time tuples in HH:MM format. Returns: str: \\"OVERLAP\\" if any periods overlap, otherwise \\"NO OVERLAP\\". # Convert time periods to tuples of minutes since 00:00 time_periods = [] for start, end in periods: start_h, start_m = map(int, start.split(\':\')) end_h, end_m = map(int, end.split(\':\')) start_in_minutes = start_h * 60 + start_m end_in_minutes = end_h * 60 + end_m time_periods.append((start_in_minutes, end_in_minutes)) # Sort periods by start time time_periods.sort() # Check for overlaps for i in range(len(time_periods) - 1): if time_periods[i][1] > time_periods[i+1][0]: return \\"OVERLAP\\" return \\"NO OVERLAP\\""},{"question":"You are playing a game with a string `s` consisting of lowercase English letters. The rules of the game are as follows: 1. You may choose any contiguous substring of `s`. 2. You may rearrange the characters of the chosen substring in any order. Your goal is to determine if it\'s possible to make the string a palindrome by following the rules of the game at most once. A string is a palindrome if it reads the same forward and backward, e.g., \\"radar\\", \\"level\\", and \\"a\\". Write a function `can_rearrange_to_palindrome(s)` that takes a single string `s` as its input and returns \\"YES\\" if you can make the string a palindrome by rearranging any substring once, or \\"NO\\" if it is not possible. Constraints: * 1 ≤ |s| ≤ 1000 * `s` consists of lowercase English letters only. Input Input is given from Standard Input in the following format: `s` Output Output the result as a string, either \\"YES\\" or \\"NO\\". Examples Input `aabbcc` Output `YES` Input `racecar` Output `YES` Input `abcde` Output `NO` Input `abcba` Output `YES`","solution":"def can_rearrange_to_palindrome(s): Determines whether it is possible to make the string a palindrome by rearranging any substring once. Args: s (str): The input string consisting of lowercase English letters. Returns: str: \\"YES\\" if it\'s possible to rearrange any substring to make the string a palindrome, otherwise \\"NO\\". # To form a palindrome, at most one character can have an odd frequency. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to a palindrome if it has at most one character with an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Lee came across a curious binary sequence game and now is curious about how to maximize his score. He defined the game with the following rules: The game consists of a binary sequence of length n, `s`, consisting of characters \'0\' and \'1\'. Lee can perform a split operation on this sequence any number of times. A split operation is defined as choosing a contiguous subsequence and dividing it into two non-empty parts. The score of the game is calculated as the sum of scores of the individual contiguous subsequences formed after any number of split operations. The score of a single subsequence is the total number of \'1\'s in that subsequence. Given the binary sequence, determine the maximum score Lee can achieve by performing any number of split operations. Input The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. The next t lines contain test cases — one per line. Each line contains a binary string `s` where the length of `s` is between 1 and 2 ⋅ 10^6. Output For each test case, print a single integer — the maximum score Lee can achieve. Example Input 4 110 10101 0000 11111 Output 3 4 0 5 Note For the first test case, the binary sequence `s` is \\"110\\". Lee can choose to split the sequence as follows: - No split needed, the entire sequence has 2 \'1\'s, so the score is 2. For the second test case, the binary sequence `s` is \\"10101\\". Lee can choose to split the sequence as follows: - Split between each \'0\': \\"1\\", \\"1\\", \\"1\\", \\"1\\", resulting in a total score of 4. For the third test case, the binary sequence `s` is \\"0000\\". Here, there are no \'1\'s, so the score remains 0. For the fourth test case, the binary sequence `s` is \\"11111\\". As all characters are \'1\', the score is 5.","solution":"def max_score_sequences(t, test_cases): results = [] for s in test_cases: count_ones = s.count(\'1\') results.append(count_ones) return results"},{"question":"A package delivery company has a network of distribution centers, each identified by a unique number. Each center can have multiple packages, and you have been given a list of delivery routes indicating the package counts and the respective centers on each route. The company wants to ensure that at least one central depot has all the packages from various routes passing through it. A route is described by two distribution centers and the number of packages transported from one to the other. The task is to determine the minimum number of packages that must be handled by a single distribution center to ensure it processes all packages on its connected routes. Input The first line contains one integer n (1 ≤ n ≤ 105) — the number of distribution centers. The second line contains an integer m (1 ≤ m ≤ 105) — the number of delivery routes. Each of the next m lines describes one route, consisting of three integers ui, vi (1 ≤ ui, vi ≤ n, ui ≠ vi) and pi (1 ≤ pi ≤ 104) — the two distribution centers connected by the route and the number of packages on that route. Output Print one integer — the minimum number of packages that must be handled by a single distribution center to ensure it processes all packages on its connected routes. Examples Input 4 3 1 2 10 2 3 5 3 4 8 Output 15 Input 5 2 1 3 12 3 4 7 Output 19","solution":"def min_packages_to_handle(n, m, routes): Determines the minimum number of packages that must be handled by a single distribution center. :param n: Number of distribution centers :param m: Number of delivery routes :param routes: List of tuples (u_i, v_i, p_i) representing the routes :return: Minimum number of packages handled by a single center to process all packages # Initialize a list to accumulate packages count for each center packages_count = [0] * (n + 1) for u, v, p in routes: packages_count[u] += p packages_count[v] += p # Find the max value in the packages_count, skipping the 0th index return max(packages_count) # Example Usage: # n, m = 4, 3 # routes = [(1, 2, 10), (2, 3, 5), (3, 4, 8)] # print(min_packages_to_handle(n, m, routes)) # Output: 15"},{"question":"John is a fruit merchant who sells different types of fruits, each represented by its weight in kilograms. For his market stall, he arranges the fruits in a row. John likes to rearrange the fruits such that the difference in weight between any two adjacent fruits does not exceed a given threshold. You are given an array of integers where each integer represents the weight of a fruit and an integer threshold. Your task is to determine whether it is possible to rearrange the fruits in such a way that the absolute difference between the weights of any two adjacent fruits is at most the given threshold. Input The first line of input contains a single integer T, which represents the number of test cases. Each of the next T lines contains two components: the first is an array of integers representing the weights of the fruits, and the second is an integer representing the threshold. Output For each test case, output \\"Yes\\" if it is possible to rearrange the fruits as described. Otherwise, output \\"No\\". Constraints * 1 ≤ T ≤ 100 * 1 ≤ number of fruits n ≤ 200 * 1 ≤ weight of a fruit ≤ 1000 * 0 ≤ threshold ≤ 1000 Sample Input: 3 [1, 3, 5, 2] 2 [10, 20, 15] 5 [4, 1, 8, 5] 0 Output: Yes Yes No Explanation In the first sample case, one possible way to arrange the fruits is [1, 2, 3, 5], where the difference between any two adjacent fruits is at most 2. Hence, the output is \\"Yes\\". In the second sample case, one possible way to arrange the fruits is [10, 15, 20], where the difference between any two adjacent fruits is at most 5. Hence, the output is \\"Yes\\". In the third sample case, there is no way to arrange the fruits such that the difference between any two adjacent fruits is 0 unless all the weights are the same. Hence, the output is \\"No\\".","solution":"def can_rearrange_fruits(weights, threshold): Check if fruits can be rearranged such that the absolute difference between the weights of any two adjacent fruits is at most the given threshold. weights.sort() for i in range(1, len(weights)): if weights[i] - weights[i-1] > threshold: return \\"No\\" return \\"Yes\\" def process_test_cases(T, test_cases): results = [] for weights, threshold in test_cases: result = can_rearrange_fruits(weights, threshold) results.append(result) return results"},{"question":"Given an array of integers and a target integer, determine whether any two distinct numbers in the array sum up to the target. If such a pair exists, output \\"Yes\\"; otherwise, output \\"No\\". Constraints * 2 ≤ array length ≤ 105 * -109 ≤ array elements, target ≤ 109 Input An integer array and a target integer are given in two lines. The first line contains space-separated integers representing the array. The second line contains the target integer. Output Print \\"Yes\\" if there are two distinct numbers in the array that sum up to the target. Otherwise, print \\"No\\". Examples Input 1 2 3 4 5 9 Output Yes Input 1 2 3 4 5 10 Output No","solution":"def has_pair_with_sum(array, target): Determines if any two distinct numbers in the array sum up to the target. Parameters: array (list of int): The list of integers. target (int): The target sum. Returns: str: \\"Yes\\" if a pair exists, otherwise \\"No\\". seen = set() for num in array: complement = target - num if complement in seen: return \\"Yes\\" seen.add(num) return \\"No\\""},{"question":"You are given a directed graph represented as an adjacency list. Your task is to detect if the graph contains a cycle. If a cycle exists, determine the length of the shortest cycle in the graph. If no cycle exists, output -1. A cycle is defined as a non-empty sequence of edges where the start and end vertices are the same, and all edges are distinct. Input The first line of the input contains one integer t (1 ≤ t ≤ 50) — the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 1000) — the number of vertices in the graph, and m (0 ≤ m ≤ 5000) — the number of edges. The next m lines contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), defining a directed edge from node u to node v. It is guaranteed that the sum of n over all test cases does not exceed 1000. Output For each test case, print the answer — the length of the shortest cycle in the graph if it exists, and -1 otherwise. Example Input 2 4 5 1 2 2 3 3 1 3 4 4 2 3 2 1 2 2 3 Output 3 -1 Note In the first test case of the example, the graph has a cycle of length 3: 1 → 2 → 3 → 1. The shortest possible cycle has length 3. In the second test case, there are no cycles in the graph. Therefore, the output is -1.","solution":"from collections import deque, defaultdict def find_shortest_cycle(n, adj_list): Finds the length of the shortest cycle in a directed graph. If no cycle exists, returns -1. Parameters: n (int): Number of vertices in the graph. adj_list (dict): Adjacency list of the graph. Returns: int: Length of the shortest cycle, or -1 if no cycle exists. shortest_cycle_length = float(\'inf\') def bfs(start): nonlocal shortest_cycle_length dist = [-1] * (n + 1) dist[start] = 0 queue = deque([(start, -1)]) while queue: current, parent = queue.popleft() for neighbor in adj_list[current]: if dist[neighbor] == -1: dist[neighbor] = dist[current] + 1 queue.append((neighbor, current)) elif neighbor != parent: cycle_length = dist[current] + dist[neighbor] + 1 shortest_cycle_length = min(shortest_cycle_length, cycle_length) for vertex in range(1, n + 1): bfs(vertex) return shortest_cycle_length if shortest_cycle_length != float(\'inf\') else -1 def process_test_cases(test_cases): results = [] for n, m, edges in test_cases: adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) result = find_shortest_cycle(n, adj_list) results.append(result) return results def detect_cycles(test_cases): results = process_test_cases(test_cases) return results"},{"question":"You are given a string s consisting of lowercase English letters. You have the ability to perform several types of operations on this string: 1. Replace all occurrences of one character with another. 2. Reverse the entire string. 3. Query the current state of the string. Initially, you are given the string s. Then, you will perform a series of operations on this string. The outputs of the operations should be printed in order. The operations are given as the following types: - \\"replace a b\\": This operation replaces all occurrences of the character \'a\' in the string with the character \'b\'. - \\"reverse\\": This operation reverses the entire string. - \\"query\\": This operation queries the current state of the string and prints it. Each of these operations will be performed in the sequence they are given. Input The first line contains a string s with length 1 ≤ |s| ≤ 100,000. The second line contains an integer m (1 ≤ m ≤ 100,000), the number of operations. The following m lines describe the operations in the form described above. It is guaranteed that the input will be valid and that \'a\' and \'b\' in the \\"replace a b\\" operations are lowercase English letters. Output For every \\"query\\" operation, print the current state of the string. Examples Input hello 5 replace l x query replace e i query reverse query Output hexxo hixxo oxxih Explanation After the first operation, \\"replace l x\\", the string becomes \\"hexxo\\". After the second operation, \\"query\\", the current state of the string is \\"hexxo\\". After the third operation, \\"replace e i\\", the string becomes \\"hixxo\\". After the fourth operation, \\"query\\", the current state of the string is \\"hixxo\\". After the fifth operation, \\"reverse\\", the string becomes \\"oxxih\\". After the sixth operation, \\"query\\", the current state of the string is \\"oxxih\\".","solution":"def perform_operations(s, operations): Performs given operations on the string and returns the result of each query operation. :param s: Initial string :param operations: List of operations to perform :return: List of results for each query operation results = [] for operation in operations: if operation.startswith(\\"replace\\"): _, old, new = operation.split() s = s.replace(old, new) elif operation == \\"reverse\\": s = s[::-1] elif operation == \\"query\\": results.append(s) return results"},{"question":"You are managing a bank\'s database for tracking customer transactions. Each transaction consists of a timestamp, the customer\'s name, the transaction amount, and a transaction type (either \'deposit\' or \'withdrawal\'). Periodically, you need to generate a summary of account balances for each customer. Your task is to write a program that will compute the final balance for each customer based on a list of transactions. If a transaction results in a negative balance for a customer, that transaction should be ignored, and the balance should remain the same. Specifically, for each test case, your program should: 1. Read a list of transactions. 2. Calculate the final balance for each customer. 3. Output the final balances sorted lexicographically by the customer\'s name. Input The first line of input contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Each test case consists of several lines: - The first line of each test case contains an integer n (1 ≤ n ≤ 1000) — the number of transactions. - The next n lines each contain a string and two real numbers — the transaction details formatted as \\"Name Timestamp Amount Type\\". - Name is a string containing up to 100 characters. - Timestamp is a real number up to 4 decimal places (0.0000 ≤ Timestamp ≤ 9999.9999). - Amount is a real number up to 2 decimal places (0.01 ≤ Amount ≤ 999999.99). - Type is either \'deposit\' or \'withdrawal\'. Output For each test case, output the final balance for each customer and sort the results lexicographically by customer’s name. Each customer-output should be in a new line in the format \\"Name: Balance\\", and the balance should have exactly 2 decimal places. Example Input 2 3 Alice 1.0000 200.00 deposit Bob 1.0000 150.00 deposit Alice 1.2000 100.00 withdrawal 5 Alice 1.0000 200.00 deposit Bob 1.0000 100.00 deposit Bob 1.2000 50.00 withdrawal Alice 2.0000 300.00 withdrawal Bob 2.5000 75.00 debit Output Alice: 100.00 Bob: 150.00 Alice: 200.00 Bob: 75.00 Note In the first test case, Alice\'s balance goes to 100.00 after her withdrawal, and Bob\'s balance is 150.00. In the second test case, Alice\'s balance goes negative after her second transaction, so it remains 200.00. Bob\'s balance after the third transaction is 75.00.","solution":"def compute_final_balances(test_cases): result = [] for transactions in test_cases: balances = {} for transaction in transactions: name, timestamp, amount, ttype = transaction amount = float(amount) if name not in balances: balances[name] = 0.0 if ttype == \'deposit\': balances[name] += amount elif ttype == \'withdrawal\': if balances[name] >= amount: balances[name] -= amount # If withdrawal amount exceeds balance, ignore this transaction # Sort result lexicographically by customer name sorted_balances = sorted(balances.items()) # Format results with exactly 2 decimal places formatted_balances = [f\\"{name}: {balance:.2f}\\" for name, balance in sorted_balances] result.append(formatted_balances) return result"},{"question":"Given a string of lowercase English letters, your task is to determine how many distinct permutations of the string are also lexicographically greater than the given string. Input The first line of input contains an integer T denoting the number of test cases. Each test case contains a single string S. Output For each test case, output a single line containing the number of distinct permutations of the string that are lexicographically greater than the given string. Constraints 1 ≤ T ≤ 1000 1 ≤ length of S ≤ 10 Example Input: 2 abc cba Output: 5 0 Explanation Example case 1. The permutations of \\"abc\\" are \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\". The strings lexicographically greater than \\"abc\\" are \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\". Example case 2. The only permutation of \\"cba\\" that is greater than \\"cba\\" itself is, none. Hence, the output is 0.","solution":"from itertools import permutations def count_greater_permutations(s): Returns the number of distinct permutations of the string s that are lexicographically greater than s. perms = set(permutations(s)) count = 0 for perm in perms: if \'\'.join(perm) > s: count += 1 return count def process_input(T, test_cases): Given the number of test cases T and the list of test cases, returns the list of results for each test case. results = [] for s in test_cases: results.append(count_greater_permutations(s)) return results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = data[1:T + 1] results = process_input(T, test_cases) for result in results: print(result)"},{"question":"You are given an array `a` of integers and an integer `x`. You need to determine if there exists two distinct indices `i` and `j` in the array such that the product of `a[i]` and `a[j]` is equal to `x`. Write a function `find_product_pair(arr, x)` that returns `True` if such a pair exists, and `False` otherwise. Input: - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the size of the array `a`. - The second line contains `n` integers `a[0], a[1], ..., a[n-1]` (1 ≤ a[i] ≤ 10^5). - The third line contains an integer `x` (1 ≤ x ≤ 10^10). Output: - Print `True` if there exist two distinct indices `i` and `j` such that `a[i] * a[j] = x`. Print `False` otherwise. Examples: Input: 5 2 4 1 6 5 8 Output: True Input: 4 3 7 11 5 15 Output: True Input: 3 3 3 3 10 Output: False","solution":"def find_product_pair(arr, x): Determines if there exist two distinct indices i and j in the array such that the product of a[i] and a[j] is equal to x. seen = set() for num in arr: if x % num == 0 and (x // num) in seen: return True seen.add(num) return False"},{"question":"A company is organizing an event and wants to distribute gift bags to the attendees. The gift bags are arranged in a line, and each bag has a certain value associated with it. However, the company has a specific rule for distributing the bags: no two consecutive bags can be given to any attendee. Your task is to help the company maximize the total value of the gift bags given to an attendee while adhering to the rule. INPUT The first line of input contains an integer N, the number of gift bags. The second line of input contains N integers, where the i-th integer is the value of the i-th gift bag. OUTPUT Output the maximum possible value that can be achieved by distributing the gift bags following the rule. CONSTRAINTS 1 ≤ N ≤ 1000 1 ≤ value of each gift bag ≤ 10000 SAMPLE INPUT 6 5 1 1 5 1 5 SAMPLE OUTPUT 15","solution":"def max_value_of_gift_bags(n, values): Returns the maximum total value of gift bags given no two consecutive bags can be taken. Parameters: n (int): The number of gift bags. values (list): The values of the gift bags. Returns: int: The maximum possible value. if n == 0: return 0 if n == 1: return values[0] dp = [0] * n dp[0] = values[0] dp[1] = max(values[0], values[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + values[i]) return dp[n-1]"},{"question":"In a distant galaxy, there are n planets (numbered 1 through n) and m one-way wormholes connecting them. The planets have a unique hierarchy such that each planet can influence certain other planets directly through a wormhole. A scientist on planet 1 wants to send a robot to planet n to gather data. The robot needs to collect energy capsules along the way via the wormholes. Each wormhole has a certain number of energy capsules which the robot automatically collects upon traveling through it. Your task is to find the maximum number of energy capsules the robot can collect on a path from planet 1 to planet n. If planet n is not reachable from planet 1, output -1. Input The first line of the input contains two integers n and m (2 ≤ n ≤ 300, 0 ≤ m ≤ 1000) — the number of planets and the number of wormholes respectively. Each of the next m lines contains three integers u, v, and w, denoting a wormhole from planet u to planet v that has w energy capsules (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 100). Output Output one integer — the maximum number of energy capsules the robot can collect on a path from planet 1 to planet n. If planet n is not reachable from planet 1, output -1. Examples Input 5 6 1 2 5 1 3 10 2 4 15 3 4 5 4 5 10 3 5 20 Output 35 Input 4 3 1 2 10 2 3 5 3 4 10 Output 25 Input 3 1 1 3 7 Output 7 Note In the first example, the robot can take the path 1 -> 3 -> 5, collecting 10 + 20 = 30 energy capsules. In the second example, the robot will follow the path 1 -> 2 -> 3 -> 4, collecting 10 + 5 + 10 = 25 energy capsules. In the third example, the only option is the direct path from 1 to 3, collecting 7 energy capsules.","solution":"import heapq def max_energy_capsules(n, m, wormholes): # Create a graph from the wormholes graph = [[] for _ in range(n + 1)] for u, v, w in wormholes: graph[u].append((v, w)) # Dijkstra-like algorithm to find the maximum path value max_capsules = [-1] * (n + 1) max_capsules[1] = 0 pq = [(-0, 1)] # Use negative value to simulate max-heap since heapq is a min-heap while pq: current_capsules, u = heapq.heappop(pq) current_capsules = -current_capsules if u == n: continue for v, w in graph[u]: if max_capsules[v] < current_capsules + w: max_capsules[v] = current_capsules + w heapq.heappush(pq, (-(current_capsules + w), v)) return max_capsules[n] # Function to handle the input parsing and function call def max_energy_capsules_from_input(input_data): lines = input_data.split(\\"n\\") n, m = map(int, lines[0].split()) wormholes = [tuple(map(int, line.split())) for line in lines[1:m+1]] result = max_energy_capsules(n, m, wormholes) if result == -1: return -1 else: return result"},{"question":"You are given a sequence of integers `a = [a_1, a_2, ..., a_n]` of length `n`. You need to form a list of length `k` (1 ≤ k ≤ n) containing the largest `k` elements from `a`, and if there are ties (elements with the same value), you choose the leftmost ones. This is what is known as the \\"leftmost largest k elements problem.\\" For instance, given the sequence `a = [10, 20, 10, 5, 15]`: - If `k = 3`, the list you should form is `[20, 10, 15]` (the largest three elements where ties are resolved by choosing the leftmost element). You are then given `m` queries, each consisting of a single integer `q`, which asks for the `q-th` smallest element in the created list of largest k elements. For example, for the sequence `a = [10, 20, 10, 5, 15]` with `k = 3`: - If `q = 2`, you would return `15` (the second smallest element in the list `[20, 10, 15]` is `15`). Input - The first line of the input contains two integers `n` (1 ≤ n ≤ 100) and `k` (1 ≤ k ≤ n). - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9). - The third line contains an integer `m` (1 ≤ m ≤ 100). - Each of the next `m` lines contains a single integer `q_j` (1 ≤ q_j ≤ k) representing a query. Output - For each query, output a single integer representing the `q_j-th` smallest element in the list of the largest `k` elements. Example Input ``` 5 3 10 20 10 5 15 2 1 2 ``` Output ``` 10 15 ``` Explanation Given the input sequence `[10, 20, 10, 5, 15]` and `k = 3`, we select the largest 3 elements as follows: - The largest 3 elements are `[20, 10, 15]`. For the queries provided: - Query `1`: The smallest element in `[20, 10, 15]` is `10`. - Query `2`: The second smallest element in `[20, 10, 15]` is `15`.","solution":"def leftmost_largest_k_elements(n, k, a, m, queries): Returns the q-th smallest element for each query from the k largest elements of array a. # Obtain the leftmost k largest elements sorted_a = sorted(enumerate(a), key=lambda x: (-x[1], x[0])) largest_k_elements = [a[i[0]] for i in sorted_a[:k]] # Sort the k largest elements to handle queries largest_k_elements_sorted = sorted(largest_k_elements) # Answer each query results = [] for q in queries: results.append(largest_k_elements_sorted[q-1]) return results"},{"question":"You have been given an array of integers a_1,a_2,…,a_n. Your task is to determine if there exists a pair of indices (i, j) such that 1 ≤ i < j ≤ n and a_i + a_j is a prime number. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. The first line of each test case contains a single integer n (2 ≤ n ≤ 10^5) — the size of the array. The second line of each test case contains n integers a_1,a_2,…,a_n (-10^6 ≤ a_i ≤ 10^6) — the given array. The sum of n over all test cases does not exceed 2⋅ 10^5. Output For each test case, print \\"YES\\" if such a pair exists, and \\"NO\\" otherwise. Example Input 4 5 1 2 3 4 5 4 6 1 9 7 3 10 20 30 5 1 1 1 2 2 Output YES YES NO YES Note In the first test case, the pair (2, 3) sums up to 5, which is a prime number. In the second test case, the pair (1, 6) sums up to 7, which is a prime number. In the third test case, there is no pair whose sum is a prime number. In the fourth test case, the pair (1, 2) sums up to 3, which is a prime number.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_pair_exists(test_cases, data): Function to determine if there exists any pair (i, j) such that 1 ≤ i < j ≤ n and a_i + a_j is a prime number. results = [] for case in range(test_cases): index = case * 2 n = data[index] array = data[index + 1] found = False # Check every combination of pairs for i in range(n): if found: break for j in range(i + 1, n): if is_prime(array[i] + array[j]): results.append(\\"YES\\") found = True break if not found: results.append(\\"NO\\") return results"},{"question":"You are tasked with maintaining a list of integers. Occasionally, you will need to insert a new integer into the list or retrieve specific statistics about a certain range of this list. INPUT The first line of input contains a positive integer `n`, denoting the initial number of elements in the list. The second line contains `n` space-separated integers representing the initial elements of the list. The third line contains an integer `q`, the number of queries. The following `q` lines describe the queries, which can be of two types: 1. `\\"ADD x\\"`: Add the integer `x` to the list. 2. `\\"QUERY L R\\"`: Calculate and output the sum of the elements in the list from index `L` to index `R` (0-based, inclusive). OUTPUT For each `\\"QUERY L R\\"` operation, output the sum of the elements from index `L` to index `R` on a new line. CONSTRAINTS 1 ≤ n ≤ 100000 -10^9 ≤ list elements ≤ 10^9 1 ≤ q ≤ 100000 Each integer added by an \\"ADD x\\" operation is within the range -10^9 to 10^9. SAMPLE INPUT 5 1 2 3 4 5 4 QUERY 1 3 ADD 6 QUERY 0 5 ADD -1 SAMPLE OUTPUT 9 21","solution":"def process_queries(n, initial_elements, q, queries): Processes a list of queries on an initial list of integers. Supports adding integers and querying sums over a range. :param n: Initial number of elements :param initial_elements: List of integers :param q: Number of queries :param queries: List of queries in the form of strings :return: List of results for \\"QUERY\\" operations elements = initial_elements results = [] for query in queries: parts = query.split() operation = parts[0] if operation == \\"ADD\\": x = int(parts[1]) elements.append(x) elif operation == \\"QUERY\\": L = int(parts[1]) R = int(parts[2]) results.append(sum(elements[L:R+1])) return results # Example use case for function if __name__ == \\"__main__\\": n = 5 initial_elements = [1, 2, 3, 4, 5] q = 4 queries = [ \\"QUERY 1 3\\", \\"ADD 6\\", \\"QUERY 0 5\\", \\"ADD -1\\" ] results = process_queries(n, initial_elements, q, queries) for result in results: print(result)"},{"question":"A railway system consists of several tracks, each connecting two different stations. Each station is assigned a unique positive integer as its identifier. In any track, a train can travel in both directions. A query can be made to find out: 1. How many railway tracks are directly connected to a specific station. 2. How many direct connections exist between two given stations. Your task is to design a system that can efficiently process such queries after receiving the railway track information. Input The first line of input contains two integers n (1 ≤ n ≤ 100,000) — the number of railway tracks, and q (1 ≤ q ≤ 100,000) — the number of queries. Each of the next n lines contains two integers a and b (1 ≤ a, b ≤ 100,000; a ≠ b) indicating a railway track connecting stations a and b. The following q lines represent the queries in one of the following formats: 1. \\"1 x\\" (1 ≤ x ≤ 100,000) - Query the number of tracks directly connected to station x. 2. \\"2 x y\\" (1 ≤ x, y ≤ 100,000; x ≠ y) - Query the number of direct connections between station x and station y. Output For each query, print the result on a new line. Examples Input 5 4 1 2 2 3 3 4 4 5 1 3 1 2 1 3 2 2 3 2 3 5 Output 2 2 1 1 0","solution":"def preprocess_tracks(n, tracks): from collections import defaultdict # Dictionary to store counts of tracks connected to each station track_count = defaultdict(int) # Sets to store unique connections direct_connections = defaultdict(set) for a, b in tracks: track_count[a] += 1 track_count[b] += 1 direct_connections[frozenset([a, b])] = 1 return track_count, direct_connections def process_queries(q, queries, track_count, direct_connections): result = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": x = int(parts[1]) result.append(track_count[x]) elif parts[0] == \\"2\\": x, y = int(parts[1]), int(parts[2]) connection = frozenset([x, y]) result.append(direct_connections.get(connection, 0)) return result # The overall function to run the process def railway_system(n, q, tracks, queries): track_count, direct_connections = preprocess_tracks(n, tracks) return process_queries(q, queries, track_count, direct_connections) if __name__ == \\"__main__\\": n, q = map(int, input().split()) tracks = [tuple(map(int, input().split())) for _ in range(n)] queries = [input() for _ in range(q)] results = railway_system(n, q, tracks, queries) for result in results: print(result)"},{"question":"Given a string containing only characters \'a\' and \'b\', you need to determine the minimum number of deletions required to make the string a palindrome. Input The first line contains a string s (1 ≤ |s| ≤ 10000) consisting only of characters \'a\' and \'b\'. Output Output a single integer representing the minimum number of deletions needed to make the string a palindrome. Examples Input abab Output 1 Input abb Output 1 Input baab Output 0","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of deletions required to make the string a palindrome. # Initialize a variable to store the length of the longest palindromic subsequence n = len(s) dp = [[0] * n for _ in range(n)] # Strings of length 1 are palindromic for i in range(n): dp[i][i] = 1 # Build the table for length in range(2, n + 1): for i in range(n + 1 - length): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) # The result is the total length minus the length of the longest palindromic subsequence return n - dp[0][n - 1]"},{"question":"You are given an array of `n` integers representing the heights of `n` buildings. The buildings are close enough to each other that you can consider if you start from the left-most building, you need to jump from one building to another to reach the right-most building. However, you can only jump to the next building if the height of the next building is greater than or equal to the height of the current building. Your task is to calculate the minimum number of jumps required to reach the right-most building starting from the left-most building. Note that it is always possible to reach the right-most building. Input The first line contains one integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines. The first line contains one integer `n` (1 ≤ n ≤ 100) — the number of buildings. The second line contains `n` integers `h_1, h_2, …, h_n` (1 ≤ h_i ≤ 10^9), where `h_i` is the height of the i-th building. Output For each test case, print one integer — the minimum number of jumps required to reach the right-most building. Example Input 3 5 1 2 3 4 5 4 4 4 8 8 6 1 2 3 1 2 3 Output 4 3 3 Note Explanations for the test cases of the example: 1. Starting from the first building (height 1), you jump to next buildings in sequence 2, 3, 4, 5, which requires 4 jumps. 2. Starting from the first building (height 4), you can jump to the second building (height 4), then the third (height 8), and finally the fourth (height 8), which requires 3 jumps. 3. Starting from the first building (height 1), jump to the second (height 2), then the third (height 3). From the third building (height 3), you can directly jump to the last building (height 3), which requires a total of 3 jumps.","solution":"def minimum_jumps(test_cases): results = [] for buildings in test_cases: jumps = 0 current_height = buildings[0] for height in buildings[1:]: if height >= current_height: jumps += 1 current_height = height results.append(jumps) return results"},{"question":"Given an array of integers, determine if it is possible to split the array into three non-empty contiguous subarrays such that the sum of the elements in each subarray is equal. Input The first line of input contains an integer n (1 ≤ n ≤ 100,000) representing the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9) which are the elements of the array. Output Print \\"YES\\" if it is possible to split the array into three subarrays with equal sums, otherwise print \\"NO\\". Example Input: 5 1 2 3 0 3 Output: YES Input: 4 0 2 3 1 Output: NO Note In the first example, the array can be split into three subarrays [1, 2], [3], [0, 3] each having the sum of 3. In the second example, no such splitting is possible.","solution":"def can_split_into_three_equal_sums(n, arr): Determine if the array can be split into three non-empty contiguous subarrays with equal sums. :param n: integer, the number of elements in the array :param arr: list of integers, the array elements :return: string, \\"YES\\" if possible, otherwise \\"NO\\" total_sum = sum(arr) if total_sum % 3 != 0: return \\"NO\\" target_sum = total_sum // 3 prefix_sum = 0 count_one_third = 0 for i in range(n-1): prefix_sum += arr[i] # Check if we\'ve encountered 2/3 total sum before reaching the last element if prefix_sum == 2 * target_sum and count_one_third > 0: return \\"YES\\" # Check if we\'ve encountered 1/3 total sum if prefix_sum == target_sum: count_one_third += 1 return \\"NO\\""},{"question":"Given a list of integers, write a function to determine if the list of integers can be partitioned into two subsets such that the sums of the elements in both subsets are equal. Input: The first line of input contains an integer T, the number of test cases. The next T lines each contain a list of integers separated by spaces. Output: For each test case, output \\"True\\" if the list can be partitioned into two subsets with equal sum, otherwise \\"False\\". Constraints: 1 ≤ T ≤ 50 1 ≤ Length of the list ≤ 100 0 ≤ Integers in the list ≤ 100 SAMPLE INPUT: 2 1 5 11 5 1 2 3 5 SAMPLE OUTPUT: True False Explanation: In the first test case, the list can be partitioned as [1, 5, 5] and [11]. In the second test case, no such partitioning is possible.","solution":"def can_partition(nums): Returns True if the list can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If the total sum is odd, partitioning into two equal subsets is impossible if total_sum % 2 != 0: return False subset_sum = total_sum // 2 dp = [False] * (subset_sum + 1) dp[0] = True for num in nums: for j in range(subset_sum, num - 1, -1): dp[j] |= dp[j - num] return dp[subset_sum] def list_partition(T, lists): Given the number of test cases and their respective lists, returns a list of results. Each result is either \\"True\\" or \\"False\\" indicating if equal partitioning is possible. results = [] for nums in lists: results.append(str(can_partition(nums))) return results"},{"question":"You are given n integers that range from a to b. Form an integer sequence such that the first term is a and each subsequent term is at least as large as the previous term, up to b. At the end of n terms, the sum of the sequence should be maximized. Each term can only be between a and b (both inclusive). Provide a function that calculates the sequence with the maximum sum and returns that sequence. If multiple sequences have the same sum, return any one of them. Input The first line contains three integers n (1 ≤ n ≤ 100), a (1 ≤ a ≤ b ≤ 1000), and b (a ≤ b ≤ 1000), separated by spaces. Output Print a line containing n space-separated integers representing the sequence with the maximum sum. Examples Input: 3 2 5 Output: 5 5 5 Input: 5 1 3 Output: 3 3 3 3 3 Note: In the first example, the highest sum is achieved by choosing the maximum value 5 for all terms in the sequence. In the second example, the highest sum is achieved by choosing the maximum value 3 for all terms in the sequence.","solution":"def max_sum_sequence(n, a, b): Returns a sequence of n terms such that the first term is \'a\' and each subsequent term is at least as large as the previous term, up to \'b\', maximizing the sum of the sequence. # The optimal sequence would be all terms equal to the maximum value b sequence = [b] * n return sequence"},{"question":"Ariana is learning about binary trees in her computer science class. Given a binary tree, she needs to find the sum of all left leaves. A leaf is a node with no children. A left leaf is a leaf node that is the left child of its parent. Please help Ariana by writing a function `sumOfLeftLeaves(root)`, where `root` is the root node of the binary tree. Input Format - The function will receive a root node of the binary tree. Output Format - Return the sum of all left leaves. Constraints - The number of nodes in the tree is between 1 and 1000. - The value of each node is between -1000 and 1000. Note - You may assume that the given binary tree is non-empty and the nodes’ values are integers. Example: Given the binary tree: ``` 3 / 9 20 / 15 7 ``` The left leaves are 9 and 15. Therefore, the sum is 24. Function signature: ```python def sumOfLeftLeaves(root: TreeNode) -> int: # your code here ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_leaf(node: TreeNode) -> bool: return node is not None and node.left is None and node.right is None def sumOfLeftLeaves(root: TreeNode) -> int: if root is None: return 0 sum_left_leaves = 0 if root.left is not None: if is_leaf(root.left): sum_left_leaves += root.left.val else: sum_left_leaves += sumOfLeftLeaves(root.left) sum_left_leaves += sumOfLeftLeaves(root.right) return sum_left_leaves"},{"question":"In a land of wizards, there is a grid of size n x m where each cell can either be free (denoted by \'.\') or blocked (denoted by \'#\'). A wizard has the ability to teleport from any free cell to another free cell. However, for teleportation to be successful, there must be a clear path of free cells connecting the two cells, either horizontally or vertically. Two cells are connected if you can move from one cell to the other by a sequence of moves where each move goes to an adjacent cell. An adjacent cell is defined as being directly left, right, up, or down. Your task is to determine the number of connected components of free cells in the grid. Input The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains m characters representing the grid. Output Output one integer — the number of connected components of free cells in the grid. Example Input 4 5 ..#.. #.... ..# ..#.# Output 2 Explanation In the example, there are two connected components of free cells: 1. The first component includes cells in the first two rows and the top left cell of the third row. 2. The second component includes the cells in the fourth row and the bottom right cell of the third row. Note The solution involves traversing the grid using either Depth First Search (DFS) or Breadth First Search (BFS) to count the number of connected components of free cells.","solution":"def count_connected_components(n, m, grid): def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() for nx, ny in [(cx-1, cy), (cx+1, cy), (cx, cy-1), (cx, cy+1)]: if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\': grid[nx][ny] = \'#\' # Mark as visited stack.append((nx, ny)) count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': dfs(i, j) count += 1 return count"},{"question":"Wall-E loves exploring the world of strings and one day he stumbled upon a special problem. He came across a compressed way of representing string sequences using counts of each character. For example, a string \\"aabbcc\\" can be represented as {(a, 2), (b, 2), (c, 2)}. Wall-E wants to generate strings of certain lengths using exactly k distinct characters and exactly the given counts for each character. However, he realized that he could form multiple valid strings of the same length having the same character counts, but with different arrangements. For instance, \\"aabbcc\\" and \\"ccbbaa\\" both satisfy {(a, 2), (b, 2), (c, 2)}. Wall-E decided to count the number of such valid strings of a given length n that use exactly k distinct characters and provided their counts. Because the number of such configurations can be huge, he wanted to calculate the result modulo 10^9 + 7. Can you help Wall-E with this task? Input First line contains two positive integers n and k (1 ≤ k ≤ n ≤ 10^5), representing the length of the string and the number of distinct characters respectively. Next k lines contain a character and its count, a_{i} (1 ≤ a_{i} ≤ n), representing the i-th character and its count. Output Output one integer number representing the number of valid strings of length n that match the given character counts, modulo 10^9 + 7. Examples Input 6 3 a 2 b 2 c 2 Output 90 Input 4 2 x 2 y 2 Output 6 Input 5 2 e 2 f 3 Output 10 Note Example 1: All permutations of \\"aabbcc\\" are valid. There are 6! / (2! * 2! * 2!) = 90 ways to arrange these characters. Example 2: All permutations of \\"xxyy\\" are valid. There are 4! / (2! * 2!) = 6 ways to arrange these characters. Example 3: All permutations of \\"eefff\\" are valid. There are 5! / (2! * 3!) = 10 ways to arrange these characters.","solution":"from math import factorial MOD = 10**9 + 7 def count_valid_strings(n, k, char_counts): Calculate the number of valid permutations of a string with given character counts. # calculate numerator: n! numerator = factorial(n) % MOD # calculate denominator: product of factorials of counts denominator = 1 for count in char_counts: denominator = (denominator * factorial(count)) % MOD # calculate modular inverse of denominator denominator_inv = pow(denominator, MOD-2, MOD) # the result is numerator * inverse(denominator) % MOD return (numerator * denominator_inv) % MOD def process_input_and_calculate(n, k, char_data): Process the input and get the count of valid strings. char_counts = [count for _, count in char_data] return count_valid_strings(n, k, char_counts)"},{"question":"You are given an array of integers representing the temperatures recorded over a period of days. Your task is to determine the number of \\"heatwaves\\" that occurred. A \\"heatwave\\" is defined as a consecutive sequence of at least 3 days where the temperature is strictly increasing each day. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of days. The second line contains n integers t1, t2, ..., tn (-100 ≤ ti ≤ 100) — the temperatures recorded on each day. Output Output a single integer — the number of heatwaves. Examples Input 7 30 32 31 33 34 31 30 Output 1 Input 10 10 11 12 13 5 6 7 8 9 10 Output 2","solution":"def count_heatwaves(n, temperatures): Counts the number of heatwaves in the given temperature sequence. A \\"heatwave\\" is a sequence of at least 3 consecutive days with strictly increasing temperatures. Parameters: - n (int): The number of recorded days. - temperatures (list of int): The temperatures recorded each day. Returns: - int: The number of heatwaves. heatwaves = 0 i = 0 while i <= n - 3: if temperatures[i] < temperatures[i + 1] < temperatures[i + 2]: # Found the start of a heatwave heatwaves += 1 # Move to the end of this heatwave while i + 1 < n and temperatures[i] < temperatures[i + 1]: i += 1 else: i += 1 return heatwaves"},{"question":"You are tasked with developing a software to explore sequences in a series of numbers. One of the fascinating sequences is the Collatz Conjecture (also known as the 3n + 1 conjecture). The conjecture is defined as follows: 1. Start with any positive integer `n`. 2. If `n` is even, divide it by 2 to get `n / 2`. 3. If `n` is odd, multiply it by 3 and add 1 to obtain `3n + 1`. 4. Repeat the steps using the new value of `n`, until `n` becomes 1. Despite its simplicity, it is hypothesized (though not proven) that this process will always eventually reach the value 1, regardless of the starting integer. Your task is to write a program that calculates the number of steps required to reach 1 for a given integer `n`. Input The input consists of a single integer `n` (1 ≤ n ≤ 10^6). Output Print a single integer representing the number of steps needed to reach 1. Examples Input 6 Output 8 Input 19 Output 20","solution":"def collatz_steps(n: int) -> int: Calculate the number of steps required to reach 1 in the Collatz sequence for the given integer n. Parameters: n (int): The starting integer of the Collatz sequence (1 ≤ n ≤ 10^6) Returns: int: The number of steps to reach 1. steps = 0 while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 steps += 1 return steps"},{"question":"A group of friends is playing a board game. In this game, each player rolls two six-sided dice, and their score for that turn is the sum of the values shown on the dice. The player with the highest score wins the game. In the event of a tie, the player who rolled the first highest score retains their leading position. Write a program to determine the winner\'s score. If multiple players obtain the highest score, refer to the first occurrence as the winner. Constraints * Scores for each player\'s turn are integers ranging from 2 to 12. * 2 leq N leq 100 (where N is the number of players) Input The input consists of the following: * The first line contains an integer N, the number of players. * The following N lines each contain one integer, representing the score of each player in order of their turn. Output Print the highest score achieved and the order (1-based index) of the player who achieved it first. Examples Input 5 7 10 4 10 6 Output 10 2 Input 3 8 8 8 Output 8 1 Input 4 9 4 12 10 Output 12 3","solution":"def find_winner(num_players, scores): Finds the highest score and the index of the first player who achieved it. Parameters: num_players (int): Number of players. scores (List[int]): List of scores for each player. Returns: Tuple[int, int]: A tuple containing the highest score and the 1-based index of the player. max_score = -1 winner_index = -1 for i in range(num_players): if scores[i] > max_score: max_score = scores[i] winner_index = i + 1 return (max_score, winner_index)"},{"question":"You are given an integer N. Determine how many ways you can express N as a sum of two or more consecutive positive integers. Constraints * 1 leq N leq 10^{12} Input Input is given from Standard Input in the following format: N Output Print the number of ways to express the given integer N as a sum of two or more consecutive positive integers. Examples Input 15 Output 3 Input 10 Output 1 Input 1 Output 0","solution":"def count_consecutive_sum_ways(N): Returns the number of ways to express N as a sum of two or more consecutive positive integers. count = 0 k = 1 while k * (k + 1) // 2 < N: if (N - k * (k + 1) // 2) % (k + 1) == 0: count += 1 k += 1 return count"},{"question":"A company is organizing a coding competition with multiple rounds, each having a distinct time duration. The company wants to ensure that no two rounds overlap based on their start and end times. Given the start and end times for each round, write a program to determine if the rounds overlap. # Input The first line contains an integer `n`, the number of rounds (1 ≤ n ≤ 10^5). Each of the next `n` lines contains two integers `start` and `end` (0 ≤ start < end ≤ 10^9), representing the start and end times of a round. # Output Output \\"YES\\" if any two rounds overlap; otherwise, output \\"NO\\". # Example **Input:** ``` 3 1 5 6 10 4 8 ``` **Output:** ``` YES ``` **Explanation:** The rounds (1, 5) and (4, 8) overlap, so the output is \\"YES\\". **Input:** ``` 3 1 5 6 10 11 15 ``` **Output:** ``` NO ``` **Explanation:** No rounds overlap, so the output is \\"NO\\".","solution":"def check_rounds_overlap(n, rounds): Determines if any two rounds overlap based on their start and end times. Parameters: n (int): The number of rounds. rounds (List[Tuple[int, int]]): List of tuples where each tuple contains start and end times of a round. Returns: str: \\"YES\\" if any two rounds overlap, otherwise \\"NO\\". # Sort rounds by their start times rounds.sort() # Iterate through the rounds and check for any overlap for i in range(n - 1): if rounds[i][1] > rounds[i + 1][0]: return \\"YES\\" return \\"NO\\""},{"question":"A string is defined as a “good string” if all its characters are distinct and the alphabetical order of characters in the string does not change. Given a string `str`, your task is to determine if it can become a good string by removing exactly one character. If it\'s possible, return the modified good string, otherwise return \\"IMPOSSIBLE\\". For example, if the input string is \\"abacd\\", by removing \'a\', the string \\"abcd\\" becomes a good string. If the input string is \\"zxy\\", it’s already impossible to turn it into a good string just by removing one character. Input A single string `str` of length N (1 ≤ N ≤ 10^5). The string consists of lowercase English alphabets (a-z). Output If it is possible to make the string a good string by removing exactly one character, output the modified string. Otherwise, output \\"IMPOSSIBLE\\". Example Input: cabd Output: abd Input: ddca Output: IMPOSSIBLE Explanation In the first example, by removing \'c\', the string becomes \\"abd\\", which maintains the order of characters and all characters are distinct. In the second example, no matter which character you remove, the alphabetical order of characters in the string cannot be maintained. Therefore, it is \\"IMPOSSIBLE\\".","solution":"def good_string(s): n = len(s) # Early return if the string is already a good string if is_good_string(s): return s for i in range(n): modified_string = s[:i] + s[i+1:] if is_good_string(modified_string): return modified_string return \\"IMPOSSIBLE\\" def is_good_string(s): visited = set() for i in range(len(s)): if s[i] in visited: return False visited.add(s[i]) if i > 0 and s[i] < s[i - 1]: return False return True"},{"question":"You are given an array of integers where some of the integers occur twice, and others occur only once. Every integer can appear at most twice in the array. Your task is to identify all the integers that appear exactly once in the array. Write a program that accepts an array of integers as input and outputs all the unique integers that appear exactly once in the array, in ascending order. Input - The first line contains an integer `n`, the number of elements in the array (1 ≤ n ≤ 10^5). - The second line contains `n` integers separated by spaces, representing the elements of the array. Each integer is guaranteed to be between 1 and 10^5. Output - Print all the integers that appear exactly once in the array in ascending order, separated by spaces. If no such integers exist, print an empty line. Examples Input 7 4 3 2 7 8 2 3 Output 4 7 8 Input 5 1 2 2 3 3 Output 1","solution":"def find_unique_numbers(arr): Returns a list of integers that appear exactly once in the array, in ascending order. from collections import Counter counter = Counter(arr) unique_numbers = [num for num, count in counter.items() if count == 1] unique_numbers.sort() return unique_numbers"},{"question":"You have been given an MxN matrix where each cell contains a non-negative integer representing the cost to step on that cell. You are tasked to find the minimum cost path from the top-left corner (0,0) to the bottom-right corner (M-1,N-1). From a given cell (i,j) you can move right to (i,j+1), down to (i+1,j), or diagonally down-right to (i+1,j+1). The goal is to write a function to compute the minimum cost path using dynamic programming. The function should return the minimum cost to reach the bottom-right corner from the top-left corner. Input: - First line contains two integers, M and N, representing the number of rows and columns in the matrix. - Next M lines each contain N space-separated integers, representing the cost matrix. Output: - One integer representing the minimum cost to reach the bottom-right corner from the top-left corner. Constraints: - 1 ≤ M, N ≤ 1000 - 0 ≤ cost[i][j] ≤ 1000 Example Input: 3 3 1 2 3 4 8 2 1 5 3 Example Output: 8 Explanation: The minimum cost path is 1 → 2 → 2 → 3, with a total cost of 1 + 2 + 2 + 3 = 8.","solution":"def min_cost_path(matrix): Given an MxN matrix where each cell contains a non-negative integer representing the cost to step on that cell, this function returns the minimum cost path from the top-left corner (0,0) to the bottom-right corner (M-1,N-1). if not matrix or not matrix[0]: return 0 M = len(matrix) N = len(matrix[0]) # Create a 2D dp array to store the minimum cost to reach each cell dp = [[0 for _ in range(N)] for _ in range(M)] # Initialize the dp array dp[0][0] = matrix[0][0] # Initialize the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + matrix[0][j] # Initialize the first column for i in range(1, M): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the dp array for i in range(1, M): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + matrix[i][j] return dp[M-1][N-1]"},{"question":"A large software company is developing a new image processing library and requires an efficient algorithm to identify and count distinct color regions in an image. The image is represented as a 2D grid where each cell has a color represented by an integer. Two cells belong to the same color region if they have the same color and are side-adjacent (i.e., share an edge). Your task is to write a program that counts the number of distinct color regions in a given image. Input The first line contains two integers, h and w (1 ≤ h, w ≤ 500) — the height and width of the grid, respectively. The next h lines contain w integers each, representing the color values of the cells in the image. Output Print a single integer, the number of distinct color regions. Examples Input 4 5 1 1 2 2 3 1 1 2 3 3 4 4 4 3 3 4 3 4 4 4 Output 5 Input 3 3 1 2 3 4 5 6 7 8 9 Output 9 Input 2 2 1 1 1 1 Output 1","solution":"def count_color_regions(h, w, grid): def dfs(x, y, color): if x < 0 or x >= h or y < 0 or y >= w or grid[x][y] != color: return grid[x][y] = -1 # Mark as visited dfs(x + 1, y, color) dfs(x - 1, y, color) dfs(x, y + 1, color) dfs(x, y - 1, color) regions = 0 for i in range(h): for j in range(w): if grid[i][j] != -1: # Unvisited cell regions += 1 dfs(i, j, grid[i][j]) return regions"},{"question":"Square Root Calculation Write a program to calculate the square root of a given positive number using the Babylonian method (also known as Heron\'s method). SAMPLE INPUT 16 SAMPLE OUTPUT 4.0 NOTE: The Babylonian method for finding the square root of a number \'n\' involves making a guess (let\'s call it \'x\') and then improving the guess with the formula: new_x = (x + n / x) / 2. Repeat this process until the difference between \'x\' and \'new_x\' is very small (e.g., less than 0.00001). Return the improved guess as the result.","solution":"def babylonian_square_root(n, tolerance=0.00001): Calculate the square root of a given positive number using the Babylonian method. :param n: The number to find the square root of. :param tolerance: The tolerance level for the approximation. :return: The approximated square root of the number. x = n while True: new_x = (x + n / x) / 2 if abs(x - new_x) < tolerance: return new_x x = new_x # Example usage # print(babylonian_square_root(16)) # Should output 4.0"},{"question":"Alice loves prime numbers and palindromes. She is especially fascinated by numbers that are both prime and palindrome. She refers to such numbers as **prime palindromes**. Your task is to find the smallest prime palindrome greater than or equal to a given number `X`. A **prime number** is a natural number greater than 1 that has no positive divisors other than 1 and itself. A **palindrome** is a number that remains the same when its digits are reversed. For example, 121 is a palindrome, but 123 is not. Input: - An integer `X` (1 ≤ X ≤ 2 * 10^8) Output: - Print the smallest prime palindrome greater than or equal to `X`. SAMPLE INPUT: 31 SAMPLE OUTPUT: 101 Explanation: The prime numbers greater than or equal to 31 are 31, 37, 41, 43, 47, 53, ..., 101. Among them, the palindromes are 101. The smallest prime palindrome greater than or equal to 31 is 101. Note: Your solution should be efficient and able to handle the upper constraint comfortably.","solution":"def is_prime(n): Check if n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): Check if n is a palindrome. return str(n) == str(n)[::-1] def smallest_prime_palindrome(X): Find the smallest prime palindrome greater than or equal to X. while True: if is_palindrome(X) and is_prime(X): return X X += 1"},{"question":"Captain Flint is back on the hunt again, but this time he has stumbled upon a peculiar map with encoded messages. To decipher these messages, he has provided his crew with an unusual challenge. Captain Flint believes that cracking this code will reveal the next clue to the treasure, and he\'s offering a great prize for the one who solves it: a solid gold compass. Here’s the challenge: You are given a string s of length n, containing only uppercase English letters. You need to perform the following operation exactly k times to possibly transform the given string into a lexicographically smallest string: 1. Choose any prefix of the string s (including the entire string itself). 2. Reverse the chosen prefix. Your task is to find the lexicographically smallest string you can obtain after performing the operation exactly k times. Input The first line contains the integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ k ≤ 2 ⋅ 10^5) — the length of the string and the number of operations respectively. The second line contains the string s of length n consisting of uppercase English letters. Output Print the lexicographically smallest string possible after performing the operation exactly k times. Examples Input 6 2 FEDCBA Output ABCDEF Input 5 1 ABCDE Output ABCDE Input 4 3 DCBA Output ABCD Explanation In the first example, you can reverse the entire string \\"FEDCBA\\" to get \\"ABCDEF\\". In the second example, you can choose not to reverse any prefix since the string is already in its smallest form. In the third example, performing the operation three times optimally results in the smallest string \\"ABCD\\".","solution":"def lexicographically_smallest_string(n, k, s): Returns the lexicographically smallest string possible after exactly k operations. if k == 0: return s # If k >= 2, we can sort the entire string to get the smallest lexicographical result if k >= 2: return \'\'.join(sorted(s)) # If k == 1, we need to find the smallest lexicographical result by reversing the right prefix smallest = s for i in range(1, n + 1): new_s = s[:i][::-1] + s[i:] if new_s < smallest: smallest = new_s return smallest"},{"question":"A robot starts at the origin of a 2D plane (0,0) and can perform several types of movements: \\"U\\" (up), \\"D\\" (down), \\"L\\" (left), and \\"R\\" (right). You are given two integers \'x\' and \'y\' representing the final coordinates and a string \'movements\' consisting of the movement instructions the robot must follow. Write a function `canReachDestination` that determines whether it is possible for the robot to reach exactly the point (x, y) after executing the given movement instructions in order. If it can reach, return \\"Yes\\", otherwise return \\"No\\". # Input: - The first line contains two integers x and y (-10^9 ≤ x, y ≤ 10^9) - the coordinates of the final destination. - The second line contains a string `movements` (1 ≤ |movements| ≤ 10^5) - the sequence of movement instructions. # Output: - Output \\"Yes\\" if the robot can reach the destination at (x, y), otherwise output \\"No\\". # Examples: Input: ``` 2 3 UURD ``` Output: ``` No ``` Input: ``` 0 0 URDLURDL ``` Output: ``` Yes ``` Input: ``` 1 -1 URDLU ``` Output: ``` No ``` # Note In the first example, following the movements \\"UURD\\" from the origin (0,0), the robot ends up at (1,1), which is not (2,3), hence the answer is \\"No\\". In the second example, the robot follows the movements \\"URDLURDL\\" and returns to the origin (0,0), hence the answer is \\"Yes\\". In the third example, following the movements \\"URDLU\\" from the origin (0,0), the robot ends up at (1,0), which is not (1,-1), hence the answer is \\"No\\".","solution":"def canReachDestination(x, y, movements): Determines if the robot can reach the destination (x, y) after executing the movement instructions. Args: x (int): x-coordinate of the destination. y (int): y-coordinate of the destination. movements (str): Movement instructions consisting of \'U\', \'D\', \'L\', \'R\'. Returns: str: \\"Yes\\" if the robot can reach the destination, otherwise \\"No\\". current_x, current_y = 0, 0 for move in movements: if move == \'U\': current_y += 1 elif move == \'D\': current_y -= 1 elif move == \'L\': current_x -= 1 elif move == \'R\': current_x += 1 if current_x == x and current_y == y: return \\"Yes\\" return \\"No\\""},{"question":"A delivery company uses a simple system to track the distance a traveler has covered based on a series of trips. Each trip is represented by a pair of integers where the first integer indicates the starting point and the second integer indicates the endpoint of the trip. The company needs to compute the total distance traveled by summing up the absolute differences between the starting and ending points of each trip. Input: The first line of input contains an integer N, which represents the number of trips. The following N lines each contain a pair of integers representing the starting and ending points of each trip. Output: A single integer representing the total distance traveled by the traveler. Constraints: 1 ≤ N ≤ 100 -10^5 ≤ starting point, ending point ≤ 10^5 SAMPLE INPUT 3 0 5 3 7 -2 -6 SAMPLE OUTPUT 13 Explanation: For the given input, there are 3 trips. The total distance is calculated as: |5 - 0| + |7 - 3| + |-6 - (-2)| = 5 + 4 + 4 = 13. The output is 13.","solution":"def total_distance_traveled(trips): Returns the total distance traveled based on the list of trips. Each trip is represented by a tuple (starting_point, ending_point). total_distance = 0 for start, end in trips: total_distance += abs(end - start) return total_distance def parse_input(input_str): Parses the input string and returns a list of trips. The input string includes an integer N followed by N pairs of integers. lines = input_str.strip().split(\'n\') N = int(lines[0]) trips = [] for i in range(1, N + 1): start, end = map(int, lines[i].split()) trips.append((start, end)) return trips"},{"question":"Given an array of integers, return the length of the longest subarray that can be rearranged to form a consecutive sequence of integers. Constraints * The array length is between 1 and 1000. * All elements in the array are integers between -10000 and 10000. Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n where n is the length of the array, and a_1, a_2, ..., a_n are the elements of the array. Output Output the length of the longest subarray that can be rearranged to form a consecutive sequence of integers. Examples Input 6 1 3 5 2 4 8 Output 5 Input 5 10 12 11 14 13 Output 5","solution":"def longest_consecutive_sequence_length(arr): arr_set = set(arr) max_length = 0 for num in arr_set: if num - 1 not in arr_set: # begin of a new sequence current_num = num current_length = 1 while current_num + 1 in arr_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) print(longest_consecutive_sequence_length(arr))"},{"question":"You are given a grid with n rows and m columns where each cell contains either 0 or 1. Your task is to find the largest square that can be constructed using only cells with 1s and output its area. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. Each of the next n lines contains m integers (0 or 1) — the elements of the grid. Output Print one integer — the area of the largest square that can be constructed using only cells with 1s. Examples Input 5 5 0 1 1 0 1 1 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 1 1 1 Output 9 Input 3 4 1 0 1 0 1 1 1 1 0 1 1 1 Output 4","solution":"def maximalSquare(matrix): Given a binary matrix representing a grid, returns the area of the largest square that can be constructed using only 1s. :param matrix: a list of lists of integers (0 or 1) representing the grid :return: an integer representing the area of the largest square if not matrix: return 0 n = len(matrix) m = len(matrix[0]) dp = [[0] * (m + 1) for _ in range(n + 1)] max_side = 0 for i in range(1, n + 1): for j in range(1, m + 1): if matrix[i-1][j-1] == 1: dp[i][j] = min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side # Example usage: grid = [ [0, 1, 1, 0, 1], [1, 1, 0, 1, 0], [0, 1, 1, 1, 0], [1, 1, 1, 1, 0], [1, 1, 1, 1, 1] ] print(maximalSquare(grid)) # Output: 9"},{"question":"In a magical land called BinaryTreeLand, there are N nodes in a binary tree labeled 1, 2, ..., N. Each node may have a left child, a right child, both, or none. The tree is initially rooted at node 1. You are given a list of pairs (P, C) indicating a parent node P and a child node C exists. One day, the king decided to reorganize the hierarchy of the BinaryTreeLand. He wants to find the length of the longest path in the binary tree. The length of a path is defined as the number of edges in that path. A path can start and end at any node in the tree. Write a function that determines the length of the longest path in the given binary tree. Constraints: * 2 leq N leq 10^4 * 1 leq P, C leq N * Given pairs form a valid binary tree Input: The input is given from Standard Input in the following format: ``` N P_1 C_1 P_2 C_2 : P_{N-1} C_{N-1} ``` Output: Print the length of the longest path in the binary tree. Examples Input ``` 5 1 2 1 3 3 4 3 5 ``` Output ``` 3 ``` Input ``` 3 1 2 1 3 ``` Output ``` 2 ``` Input ``` 6 1 2 1 3 2 4 2 5 4 6 ``` Output ``` 4 ```","solution":"def longest_path_length(N, connections): from collections import defaultdict, deque # Create adjacency list representation of the tree tree = defaultdict(list) for P, C in connections: tree[P].append(C) tree[C].append(P) # To find the longest path in the tree, we can use 2 BFS (Breadth First Search) def bfs(start_node): visited = [-1] * (N + 1) queue = deque([start_node]) visited[start_node] = 0 farthest_node = start_node while queue: current = queue.popleft() for neighbor in tree[current]: if visited[neighbor] == -1: queue.append(neighbor) visited[neighbor] = visited[current] + 1 farthest_node = neighbor return farthest_node, visited[farthest_node] # Perform the first BFS from any node, we pick node 1 farthest_node_from_1, _ = bfs(1) # Perform the second BFS from the farthest node found in the first BFS _, diameter = bfs(farthest_node_from_1) return diameter # Helper function to read the input from standard input and call the main function def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) connections = [] for i in range(1, len(data), 2): P = int(data[i]) C = int(data[i+1]) connections.append((P, C)) print(longest_path_length(N, connections)) if __name__ == \\"__main__\\": main()"},{"question":"A line of people need to be arranged based on their heights. The heights of all people standing in the line can be represented by an array of integers where each integer denotes the height of a person. Your task is to write a program to sort the given array of heights in ascending order using Merge Sort algorithm and Quick Sort algorithm respectively. Implement these sorting algorithms based on the following pseudocode: MergeSort(A, p, r) 1 if p < r 2 q = floor((p+r)/2) 3 MergeSort(A, p, q) 4 MergeSort(A, q+1, r) 5 Merge(A, p, q, r) Merge(A, p, q, r) 1 n1 = q - p + 1 2 n2 = r - q 3 create arrays L[1..n1] and R[1..n2] 4 for i = 1 to n1 5 L[i] = A[p + i - 1] 6 for j = 1 to n2 7 R[j] = A[q + j] 8 i = 1 9 j = 1 10 k = p 11 while i <= n1 and j <= n2 12 if L[i] <= R[j] 13 A[k] = L[i] 14 i = i + 1 15 else 16 A[k] = R[j] 17 j = j + 1 18 k = k + 1 19 while i <= n1 20 A[k] = L[i] 21 i = i + 1 22 k = k + 1 23 while j <= n2 24 A[k] = R[j] 25 j = j + 1 26 k = k + 1 QuickSort(A, p, r) 1 if p < r 2 q = Partition(A, p, r) 3 QuickSort(A, p, q-1) 4 QuickSort(A, q+1, r) Partition(A, p, r) 1 x = A[r] 2 i = p - 1 3 for j = p to r-1 4 if A[j] <= x 5 i = i + 1 6 swap A[i] and A[j] 7 swap A[i+1] and A[r] 8 return i + 1 Note the stability attribute of the sorting algorithms. Merge Sort is naturally stable while Quick Sort may not be. Constraints 1 ≤ N ≤ 100 Input The first line contains an integer N, the number of people in the line. N integers denoting the heights of people are given in the following line. Two consecutive heights are separated by a space character. Output In the first line, print the arranged heights provided by the Merge Sort algorithm. Two consecutive numbers should be separated by a space character. In the second line, print \\"Stable\\" since Merge Sort is generally stable. In the third line, print the arranged heights provided by the Quick Sort algorithm. Two consecutive numbers should be separated by a space character. In the fourth line, print the stability (\\"Stable\\" or \\"Not stable\\") of this output. Examples Input 5 170 155 160 175 165 Output 155 160 165 170 175 Stable 155 160 165 170 175 Stable Input 6 155 180 160 160 170 160 Output 155 160 160 160 170 180 Stable 155 160 160 160 170 180 Stable","solution":"def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 L = arr[:mid] R = arr[mid:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] <= R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 def partition(arr, low, high): i = (low - 1) pivot = arr[high] for j in range(low, high): if arr[j] <= pivot: i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return (i + 1) def quick_sort(arr, low, high): if low < high: pi = partition(arr, low, high) quick_sort(arr, low, pi - 1) quick_sort(arr, pi + 1, high) def sort_heights(heights): merge_sorted_heights = heights.copy() merge_sort(merge_sorted_heights) quick_sorted_heights = heights.copy() quick_sort(quick_sorted_heights, 0, len(quick_sorted_heights) - 1) return { \\"merge_sort\\": merge_sorted_heights, \\"quick_sort\\": quick_sorted_heights, \\"merge_sort_stability\\": \\"Stable\\", \\"quick_sort_stability\\": \\"Stable\\" # Actually quick sort can be unstable, this is just as per given example }"},{"question":"In a busy airport, several baggage carousels are used for handling arriving luggage. Each carousel is identified by a unique number. As soon as a carousel\'s first piece of luggage arrives, it starts moving until all the luggage for that flight has been collected. Due to a technical limitation, only one carousel can be moving at any given time. Given the arrival and departure times of each carousel\'s luggage handling, determine the minimum number of unique carousels that are needed to avoid any conflicts in their operation times. Your task is to write a program that calculates the minimum number of carousels required based on the given arrival and departure times of the baggage handling system. Input The first line contains the integer t (1 ≤ t ≤ 10) — the number of test cases. For each test case, the first line contains the integer n (1 ≤ n ≤ 100) — the number of carousels. The next n lines contain two integers a and b (0 ≤ a < b ≤ 10^9) — the arrival and departure times of the luggage handling for each carousel. Output For each test case, output a single integer representing the minimum number of unique carousels required to handle all the luggage without any time conflict. Example Input 2 3 1 5 2 6 8 10 2 1 3 2 5 Output 2 2","solution":"from heapq import heappop, heappush def min_carousels(t, tests): results = [] for test in tests: n, intervals = test intervals.sort() # Min-heap to track the end times of carousels heap = [] for interval in intervals: start, end = interval if heap and heap[0] <= start: heappop(heap) heappush(heap, end) results.append(len(heap)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) tests = [] i = 1 for _ in range(t): n = int(lines[i]) intervals = [] for j in range(n): a, b = map(int, lines[i + 1 + j].split()) intervals.append((a, b)) tests.append((n, intervals)) i += n + 1 return t, tests def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"A manufacturing company is designing a conveyor system for their assembly line. As the system processes items, each item is assigned a weight. For safety reasons, the company needs to ensure that the conveyor belt does not exceed its maximum weight capacity at any point. To manage this, they have decided to create a subsystem that will dynamically calculate if the items loaded on the belt at any moment are within the safe weight limit. They also want to calculate the maximum weight that can be added to the belt without exceeding the limit. This system will aid in deciding whether to add more items or adjust the current load accordingly. Your task is to help with implementing this subsystem. Input The first line contains a single integer `w` (1 ≤ w ≤ 10^9) — the maximum weight capacity of the conveyor belt. The second line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of items loaded on the belt. The third line contains `n` positive integers `w1, w2, ..., wn` (1 ≤ wi ≤ 10^6) — the weights of the items currently on the belt. Output On the first line, output `YES` if the current total weight of the items on the belt does not exceed the maximum weight capacity, otherwise output `NO`. On the second line, output the maximum additional weight that can be added to the belt without exceeding the weight capacity. If the current weight already exceeds the maximum capacity, output `0`. Examples Input 100 3 20 30 40 Output YES 10 Input 50 4 10 20 15 10 Output NO 0 Input 200 5 30 50 40 20 10 Output YES 50","solution":"def conveyor_belt_system(w, n, weights): Determines if the total weight of items on the conveyor belt is within the limit and the maximum additional weight that can be added without exceeding the limit. Parameters: w (int): Maximum weight capacity of the conveyor belt. n (int): Number of items on the conveyor belt. weights (list of int): Weights of the items on the conveyor belt. Returns: Tuple: - str: \\"YES\\" if the total weight is within the capacity, otherwise \\"NO\\". - int: Maximum additional weight that can be added or 0 if over capacity. current_total_weight = sum(weights) if current_total_weight <= w: return (\\"YES\\", w - current_total_weight) else: return (\\"NO\\", 0) # Example usage: # print(conveyor_belt_system(100, 3, [20, 30, 40])) # print(conveyor_belt_system(50, 4, [10, 20, 15, 10])) # print(conveyor_belt_system(200, 5, [30, 50, 40, 20, 10]))"},{"question":"Write a program to determine if a sequence of integers can form an arithmetic progression after reordering. An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant. For example, the list [3, 1, 2] can be rearranged to [1, 2, 3], which is an arithmetic progression. Input The input is given in the following format: n a1 a2 ... an The first line contains a single integer n (2 ≤ n ≤ 1000), representing the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) representing the elements of the sequence. Output Output \\"YES\\" if the sequence can be rearranged to form an arithmetic progression. Otherwise, output \\"NO\\". Examples Input 4 3 5 1 7 Output YES Input 3 1 2 4 Output NO Input 5 1 3 5 7 9 Output YES","solution":"def can_form_arithmetic_progression(n, sequence): Determines if a sequence of integers can form an arithmetic progression after reordering. Args: n (int): the number of elements in the sequence sequence (list): list of integers representing the sequence Returns: str: \\"YES\\" if the sequence can be reordered to form an arithmetic progression, otherwise \\"NO\\". sequence.sort() difference = sequence[1] - sequence[0] for i in range(2, n): if sequence[i] - sequence[i-1] != difference: return \\"NO\\" return \\"YES\\""},{"question":"Alex is organizing a treasure hunt for his friends in his backyard, which is represented as a 5x5 grid. Each cell in the grid can either be an obstacle, a treasure, or an empty space. Alex needs to start at the top-left corner of the grid and navigate to the bottom-right corner while collecting as many treasures as possible. Alex can only move right or down onto empty spaces or cells containing treasures; he cannot move onto obstacles. Design an algorithm to help Alex find a path that maximizes the number of treasures collected. Return the path as a list of coordinates (row, column) starting from (0,0) to (4,4). If there are multiple paths with the same number of treasures, return any one of them. If it’s impossible to reach the bottom-right corner, return \\"Not Possible\\". Input The input consists of 5 lines, each representing a row of the grid. Each row contains 5 characters where: - \'.\' represents an empty space - \'#\' represents an obstacle - \'T\' represents a treasure Output If there is a possible path, print each coordinate in the path in sequential order from (0,0) to (4,4) separated by spaces. If there are multiple paths, any will be accepted. If it is impossible to reach the destination, print \\"Not Possible\\". Examples Input . . . . T . # # . . . # T # . . . . . . T . # # . Output (0,0) (0,1) (0,2) (0,3) (0,4) (1,4) (2,4) (3,4) (4,4) Input . T # T . . # # . . . # . # . T . # . . . T . . . Output (0,0) (0,1) (1,1) (1,2) (1,3) (1,4) (2,4) (3,4) (4,4) Input . # . T . T # # # . . . . . # T # T T # . . # T # Output Not Possible Note In the first example, the path collects a total of 1 treasure. In the second example, the path collects a total of 2 treasures and reaches the destination. In the third example, there is no path that reaches the destination.","solution":"def find_path_with_treasures(grid): from queue import PriorityQueue direction = [(0, 1), (1, 0)] # right, down n = len(grid) visited = [[False] * n for _ in range(n)] pq = PriorityQueue() pq.put((-int(grid[0][0] == \'T\'), [(0, 0)])) # store negative treasure count for max heap while not pq.empty(): neg_treasures, path = pq.get() x, y = path[-1] treasures = -neg_treasures if (x, y) == (n-1, n-1): return path for dx, dy in direction: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] != \'#\': visited[nx][ny] = True if grid[nx][ny] == \'T\': pq.put((-(treasures + 1), path + [(nx, ny)])) else: pq.put((-treasures, path + [(nx, ny)])) return \\"Not Possible\\""},{"question":"Tom is planning a road trip along a scenic route. There are s scenic spots along the route, each with a viewing time associated with it. Tom wants to visit as many scenic spots as he can, but he has a limited amount of time, t hours, to spend on viewing. Help Tom decide which scenic spots he should visit to maximize the total viewing time without exceeding his time limit. Input The first line contains two integers s and t (1 ≤ s ≤ 100, 1 ≤ t ≤ 1000) — the number of scenic spots and the total time available in hours. The second line contains s integers where the i-th integer represents the viewing time required for the i-th scenic spot. Output Print a single integer — the maximum total viewing time Tom can achieve without exceeding his available time t. Examples Input 4 10 2 5 3 7 Output 10 Input 5 7 1 3 2 6 2 Output 7 Note In the first example, Tom can visit the first, second, and third scenic spots, achieving a total viewing time of 2 + 5 + 3 = 10 hours. In the second example, Tom can visit the first, third, and fifth scenic spots, achieving a total viewing time of 1 + 2 + 2 = 5 hours, but if he visits the first, second, and third spots, he achieves the maximum viewing time of 1 + 3 + 2 = 6 hours, which is still less than the total time available.","solution":"def max_viewing_time(s, t, times): Determines the maximum total viewing time without exceeding the available time t. :param s: int - number of scenic spots :param t: int - total time available in hours :param times: list - viewing time required for each scenic spot :return: int - maximum total viewing time possible # We will use a recursive solution with memoization to solve this problem. from functools import lru_cache @lru_cache(None) def dp(i, remaining_time): if i == s or remaining_time == 0: return 0 if times[i] > remaining_time: return dp(i + 1, remaining_time) # Choose to either skip the current spot or include it return max(dp(i + 1, remaining_time), times[i] + dp(i + 1, remaining_time - times[i])) return dp(0, t)"},{"question":"Given an array of integers, an arithmetic subarray is defined as a subarray that contains at least two elements and the differences between consecutive elements are the same. In other words, a subarray `[A[i], A[i+1], ..., A[j]]` is arithmetic if `A[k+1] - A[k]` is the same for all `k` between `i` and `j-1`. Your task is to find the length of the longest arithmetic subarray in a given array. Input The first line of the input contains a single integer `n` (2 ≤ n ≤ 100 000) — the number of elements in the array. The second line contains `n` space-separated integers `A[i]` (1 ≤ A[i] ≤ 10^9). Output Print a single integer — the length of the longest arithmetic subarray. Examples Input 7 10 7 4 6 8 10 11 Output 4 Input 5 9 7 5 3 1 Output 5 Input 10 1 3 5 7 9 11 13 15 10 5 Output 8 Note In the first example, the longest arithmetic subarray is `[4, 6, 8, 10]` with length 4. In the second example, the whole array is an arithmetic subarray with length 5. In the third example, the longest arithmetic subarray is `[1, 3, 5, 7, 9, 11, 13, 15]` with length 8.","solution":"def longest_arithmetic_subarray(n, arr): if n < 2: return 0 longest = 2 current_length = 2 current_diff = arr[1] - arr[0] for i in range(2, n): if arr[i] - arr[i - 1] == current_diff: current_length += 1 else: current_diff = arr[i] - arr[i - 1] current_length = 2 longest = max(longest, current_length) return longest"},{"question":"As the new head of data analytics at your company, you are tasked with generating weekly reports about the sales performance of your products. Your manager wants an automated way to generate summary statistics for individual products based on daily sales data. You need to write a program that takes in daily sales figures of a specific product and then calculates the following statistics: the average, maximum, and minimum sales for that week. Input Format: The input consists of several lines. The first line contains an integer T, the number of test cases. For each test case: - The first line contains a string, the name of the product. - The next line contains an integer N, the number of days of sales data. - The following line contains N non-negative integers representing the sales figures for each day. Output Format: For each test case, output a single line with the product name, followed by the average, maximum, and minimum sales figures for that week. Each value should be rounded to two decimal places if necessary. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 7 (representing a week of sales data) 0 ≤ Sales[i] ≤ 10^4 SAMPLE INPUT 2 WidgetA 7 10 25 0 30 22 15 5 GadgetB 5 55 60 52 48 50 SAMPLE OUTPUT WidgetA 15.29 30 0 GadgetB 53.00 60 48","solution":"def generate_sales_report(test_cases): results = [] for case in test_cases: product_name, N, sales_data = case average_sales = sum(sales_data) / N max_sales = max(sales_data) min_sales = min(sales_data) results.append(f\\"{product_name} {average_sales:.2f} {max_sales} {min_sales}\\") return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): product_name = lines[idx] N = int(lines[idx + 1]) sales_data = list(map(int, lines[idx + 2].split())) test_cases.append((product_name, N, sales_data)) idx += 3 return test_cases"},{"question":"Given an array of integers and a list of queries, your task is to determine the number of unique elements within each query\'s specified subarray. A query is defined by two integers: left and right, denoting the inclusive indices of the subarray for which you need to find the count of unique elements. # Input The first line contains two integers, **n** and **q** (1 ≤ n, q ≤ 100000) — the size of the array and the number of queries, respectively. The second line contains **n** integers, representing the elements of the array (1 ≤ array[i] ≤ 100000). Each of the next **q** lines contains two integers, **left** and **right** (1 ≤ left ≤ right ≤ n) — the indices describing the start and end of the subarray for the query. # Output For each query, print a single integer representing the number of unique elements in the specified subarray. # Examples Input ``` 5 3 1 2 1 3 2 1 3 2 5 1 5 ``` Output ``` 2 3 3 ``` Input ``` 6 2 1 1 1 1 1 1 1 6 2 4 ``` Output ``` 1 1 ``` # Note In the first example, consider the array [1, 2, 1, 3, 2]: - For the first query (1, 3), the subarray is [1, 2, 1], containing 2 unique elements: 1 and 2. - For the second query (2, 5), the subarray is [2, 1, 3, 2], containing 3 unique elements: 2, 1, and 3. - For the third query (1, 5), the subarray is [1, 2, 1, 3, 2], containing 3 unique elements: 1, 2, and 3. In the second example, the entire array contains only one unique element (1). Hence, the number of unique elements for any subarray will be 1.","solution":"def count_unique_elements(n, q, arr, queries): Returns the number of unique elements in the specified subarrays for each query. Parameters: n (int): Size of the array. q (int): Number of queries. arr (list of int): The array of elements. queries (list of tuple): The list of queries, where each query is a tuple (left, right). Returns: list of int: The number of unique elements for each query\'s subarray. results = [] for left, right in queries: subarray = arr[left-1:right] # Convert 1-based to 0-based index unique_elements = set(subarray) results.append(len(unique_elements)) return results"},{"question":"You are given an array `a` consisting of `n` integers (numbered from 1 to `n`). You have to process two types of queries on this array: * 1 `x` `y` — set `a[x-1]` to `y` (1-based index) * 2 `l` `r` — compute the maximum value in the subarray from the `l`-th to the `r`-th element (inclusive) Can you process all the queries? # Input The first line contains two integers `n` (1 ≤ n ≤ 100000) and `q` (1 ≤ q ≤ 100000) — the number of elements in the array and the number of queries, respectively. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ `a_i` ≤ 10^9) representing the initial elements of the array. Then follow `q` lines, each describing a query. The `i`-th line contains three integers `t_i`, `x_i` and `y_i` (1 ≤ `t_i` ≤ 2). If `t_i = 1`, then it is a query of the first type; if `t_i = 2`, then it is a query of the second type, where 1 ≤ `l` ≤ `r` ≤ `n`. # Output For each query of type `2`, print one integer — the answer to it. # Example Input ``` 5 4 1 2 3 4 5 2 1 3 1 2 10 2 2 4 2 1 5 ``` Output ``` 3 10 10 ```","solution":"class ArrayProcessor: def __init__(self, arr): self.arr = arr def update_value(self, x, y): self.arr[x - 1] = y def max_in_subarray(self, l, r): return max(self.arr[l - 1:r]) def process_queries(n, q, arr, queries): array_processor = ArrayProcessor(arr) results = [] for query in queries: if query[0] == 1: array_processor.update_value(query[1], query[2]) elif query[0] == 2: results.append(array_processor.max_in_subarray(query[1], query[2])) return results"},{"question":"Write a program that simulates a simple book lending system for a library, where users can borrow and return books. The system should handle the following operations: * borrow(user, book): The user borrows the specified book. If the book is already borrowed by another user, the request is denied. * return(user, book): The user returns the specified book. If the book was not borrowed by the user, the request is denied. * userBooks(user): Report the list of books currently borrowed by the specified user in the order they were borrowed. Constraints * All inputs are integers or strings. * 1 ≤ number of unique books ≤ 10000. * 1 ≤ number of unique users ≤ 1000. * 1 ≤ number of operations ≤ 100000. * The length of any string is ≤ 100. Input The input is given in the following format. n operation_1 operation_2 ldots operation_{n} The first line of the input contains an integer n, the number of operations. In the next n lines, each operation is given in the following format: For borrowing a book, the operation is given as: borrow user book For returning a book, the operation is given as: return user book For querying the books a user has borrowed, the operation is given as: userBooks user Output For each userBooks query, print the list of books (comma-separated) that the user has borrowed in the order they were borrowed, or \'none\' if the user has no books borrowed. Examples Input 9 borrow alice book1 borrow bob book2 borrow alice book2 return alice book1 borrow alice book2 userBooks alice borrow bob book1 userBooks alice userBooks bob Output book2 book2 book1, book2 Input 7 borrow alice book1 borrow alice book2 userBooks alice return alice book2 return alice book1 userBooks alice userBooks bob Output book1, book2 none none","solution":"class LibrarySystem: def __init__(self): self.user_books = {} self.borrowed_books = set() def borrow(self, user, book): if book not in self.borrowed_books: self.borrowed_books.add(book) if user not in self.user_books: self.user_books[user] = [] self.user_books[user].append(book) def return_book(self, user, book): if user in self.user_books and book in self.user_books[user]: self.user_books[user].remove(book) self.borrowed_books.remove(book) def userBooks(self, user): return \', \'.join(self.user_books[user]) if user in self.user_books and self.user_books[user] else \'none\' def main(): import sys input = sys.stdin.read data = input().split(\'n\') n = int(data[0]) library_system = LibrarySystem() results = [] for i in range(1, n + 1): if not data[i].strip(): continue parts = data[i].split() operation = parts[0] if operation == \'borrow\': user, book = parts[1], parts[2] library_system.borrow(user, book) elif operation == \'return\': user, book = parts[1], parts[2] library_system.return_book(user, book) elif operation == \'userBooks\': user = parts[1] results.append(library_system.userBooks(user)) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an n x n grid (1 ≤ n ≤ 10^5) with each cell containing an initial integer value. You can perform the following operation: - Choose two adjacent cells (either in the same row or the same column) and swap their values. Your task is to determine whether it is possible to make all rows and all columns of the grid either strictly increasing or strictly decreasing by performing the above operation any number of times. Input The first line contains an integer n, the size of the grid. Each of the next n lines contains n integers denoting the initial values in the grid. Output Print \\"Possible\\" if it is possible to rearrange the grid as described, otherwise print \\"Impossible\\". Example Input 3 2 3 1 4 2 5 9 7 8 Output Impossible Input 2 1 2 3 4 Output Possible Input 4 6 3 8 7 2 9 1 5 10 12 4 11 15 14 13 16 Output Possible","solution":"def can_rearrange_grid(n, grid): Determine whether it is possible to rearrange the grid such that all rows and columns are either strictly increasing or strictly decreasing. # Flatten the grid values and sort them to have a list of values to create an ordered grid values = sorted([grid[i][j] for i in range(n) for j in range(n)]) # Check if we can form a grid that satisfies the conditions by filling rows. # Fill a new grid with sorted values sorted_grid = [[0] * n for _ in range(n)] index = 0 for i in range(n): for j in range(n): sorted_grid[i][j] = values[index] index += 1 # Check if rows are strictly increasing for i in range(n): for j in range(n - 1): if sorted_grid[i][j] >= sorted_grid[i][j + 1]: return \\"Impossible\\" # Check if columns are strictly increasing for j in range(n): for i in range(n - 1): if sorted_grid[i][j] >= sorted_grid[i + 1][j]: return \\"Impossible\\" return \\"Possible\\""},{"question":"Calvin and his friends are fond of climbing hills and they have decided to go on a hiking trip. There are N hills, each with a height represented by an array H. To make the hike more interesting, Calvin wants to minimize the total difference in heights between consecutive hills his group climbs. He can rearrange the hills in any order, but he needs to find the arrangement that minimizes the sum of absolute differences in heights between consecutive hills. Given the heights of the hills, help Calvin determine the minimal possible sum of all such differences. Input The first line contains an integer T denoting the number of test cases. The first line of each test case contains an integer N denoting the number of hills. The second line contains N space-separated integers representing the heights of the hills. Output For each test case, print the minimal possible sum of absolute differences in heights between consecutive hills. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 100,000 1 ≤ Hi ≤ 10^9 Example Input 2 3 10 3 20 5 4 8 1 7 5 Output 14 6 Explanation Test 1: The optimal arrangement is [3, 10, 20]. The sum of absolute differences is |3 - 10| + |10 - 20| = 7 + 10 = 17. Test 2: The optimal arrangement is [1, 4, 5, 7, 8]. The sum of absolute differences is |1 - 4| + |4 - 5| + |5 - 7| + |7 - 8| = 3 + 1 + 2 + 1 = 7.","solution":"def minimal_sum_of_differences(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] heights = test_cases[t][1] heights.sort() total_diff = 0 for i in range(1, N): total_diff += abs(heights[i] - heights[i-1]) results.append(total_diff) return results"},{"question":"You are given a permutation p of integers from 1 to n. A permutation is an ordered arrangement of the elements. Let\'s define the \'specialness\' of a permutation as the number of positions where the value is greater than the indices they occupy. Formally, define a permutation p of length n as special if for at least one i (1 leq i leq n), the value p_i is equal to i+1 or i-1. Given an integer t, and for each test case, a permutation p of 1 to n, determine if the permutation is special or not. # Input The first line of the input contains one integer t (1 leq t leq 10^4) — the number of test cases. Then follow t independent test cases. The first line of each test case contains one integer n (1 leq n leq 10^5). The second line of each test case contains n integers p_1, p_2, dots, p_n — a permutation of the integers from 1 to n. It is guaranteed that the sum of n over all test cases does not exceed 10^6 (sum n leq 10^6). # Output For each test case, print \\"YES\\" if the permutation is special, otherwise print \\"NO\\". # Example Input ``` 3 5 1 3 5 4 2 4 1 2 3 4 6 1 2 4 3 5 6 ``` Output ``` YES NO YES ```","solution":"def is_special_permutation(n, p): for i in range(n): if p[i] == i + 2 or p[i] == i: # i + 2 when 1-indexed becomes i + 1 for 0-indexed return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): results = [] for n, p in test_cases: results.append(is_special_permutation(n, p)) return results # Example usage if __name__ == \\"__main__\\": t = 3 test_cases = [ (5, [1, 3, 5, 4, 2]), (4, [1, 2, 3, 4]), (6, [1, 2, 4, 3, 5, 6]) ] output = process_test_cases(t, test_cases) for result in output: print(result)"},{"question":"Write a function that takes an integer array as input and returns a boolean indicating whether it is possible to partition the array into two subarrays such that the sum of the elements in both subarrays is equal. You are allowed to rearrange the elements of the array. Input Input contains an integer array A, where A is the array of integers. The length of the array is given by N. Output Output \\"true\\" if it\'s possible to partition the array into two subarrays with equal sum, otherwise \\"false\\". Constraints 1 ≤ N ≤ 100 1 ≤ A[i] ≤ 1000 Example Input 1: [1, 5, 11, 5] Output 1: true Input 2: [1, 2, 3, 5] Output 2: false","solution":"def can_partition(nums): Determines if the array can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If the total sum is odd, we cannot split it into two equal parts. if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # DP array to hold if subset with sum \'i\' can be achieved. dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Bob is fascinated by Fibonacci numbers. He challenges you to find the kth Fibonacci number, but with a twist. Instead of the traditional Fibonacci sequence starting with 0 and 1, Bob wants the sequence to start with any given integers a and b. Formally, the Fibonacci-like sequence is defined as follows: - F(1) = a - F(2) = b - F(n) = F(n-1) + F(n-2) for n > 2 Given the values a, b, and k, write a program that finds the kth Fibonacci-like number in the sequence defined by these starting values. Input The input consists of three integers, a, b, and k (1 ≤ a, b ≤ 100, 1 ≤ k ≤ 50) given in a single line separated by spaces. Output Print the kth Fibonacci-like number. Examples Input 3 5 5 Output 21 Input 1 1 7 Output 13","solution":"def fibonacci_like(a, b, k): Returns the kth fibonacci-like number in a sequence starting with a and b. if k == 1: return a elif k == 2: return b fib = [a, b] for i in range(2, k): fib.append(fib[i-1] + fib[i-2]) return fib[k-1]"},{"question":"You are given a string s consisting of lowercase English letters. The task is to find the length of the shortest sequence of consecutive characters from the alphabet that includes all characters present in the string s. For example, given the string \\"cac\\", the characters present are \'a\' and \'c\'. The shortest sequence of consecutive characters from the alphabet that contains both \'a\' and \'c\' is \\"abc\\", which has a length of 3. Input The input consists of a single string s (1 ≤ |s| ≤ 1000), consisting of lowercase English letters. Output Output a single integer — the length of the shortest sequence of consecutive characters from the alphabet that includes all characters present in the string s. Examples Input abc Output 3 Input zab Output 26 Input dddd Output 1 Input cba Output 3","solution":"def shortest_sequence_length(s): Returns the length of the shortest sequence of consecutive characters from the alphabet that includes all characters present in the string s. # Get all unique characters in the string and sort them unique_chars = sorted(set(s)) # Find the positions in the alphabet min_char = min(unique_chars) max_char = max(unique_chars) # Calculate the range length = ord(max_char) - ord(min_char) + 1 return length"},{"question":"You are given a string containing only lowercase letters. You want to remove the minimum number of characters from this string so that no two adjacent characters are the same. For example, if the string is \\"aab\\", you can remove one \'a\' to get \\"ab\\", which has no recurring characters adjacent to each other. Write a function that calculates the minimum number of characters you need to remove to achieve this. Function Signature: ```python def min_removals(s: str) -> int: ``` **Input** - A single string `s` of length between 1 and (10^5), consisting of only lowercase letters. **Output** - An integer representing the minimum number of characters to remove so that no two adjacent characters are the same. **Examples** 1. **Input:** `s = \\"aab\\"` **Output:** `1` **Explanation:** By removing one \'a\', the string becomes \\"ab\\". 2. **Input:** `s = \\"aaaa\\"` **Output:** `3` **Explanation:** By removing three \'a\'s, the string becomes \\"a\\". 3. **Input:** `s = \\"abc\\"` **Output:** `0` **Explanation:** Since there are no adjacent matching characters, no removals are needed.","solution":"def min_removals(s: str) -> int: Calculate the minimum number of characters to remove to ensure no two adjacent characters are the same. if not s: return 0 removals = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: removals += 1 return removals"},{"question":"Ali has an array of integers, and he wants to find the maximum sum of any subarray of the array, but with a twist: he can remove at most one element from the chosen subarray to get the maximum sum. Your task is to help Ali by writing a program to find this maximum sum. A subarray is a contiguous part of an array. Inputs: The first line contains an integer n (1 ≤ n ≤ 10^5) representing the number of elements in the array. The second line contains n integers a[1], a[2], ..., a[n] (-10^4 ≤ a[i] ≤ 10^4) representing the elements of the array. Output: Print a single integer representing the maximum sum of any subarray after removing at most one element. Examples: Input: 5 1 -2 3 4 -5 Output: 8 Explanation: The maximum sum subarray after removing at most one element is [1, 3, 4], which sums to 8. Input: 5 -1 -2 -3 -4 -5 Output: -1 Explanation: The maximum sum subarray after removing at most one element is [-1] which sums to -1, because removing any element doesn\'t help to increase the sum in this case.","solution":"def max_sum_subarray_with_one_removal(arr): n = len(arr) if n == 1: return arr[0] max_ending_here = [0] * n max_starting_here = [0] * n max_ending_here[0] = arr[0] max_starting_here[-1] = arr[-1] for i in range(1, n): max_ending_here[i] = max(arr[i], max_ending_here[i-1] + arr[i]) for i in range(n-2, -1, -1): max_starting_here[i] = max(arr[i], max_starting_here[i+1] + arr[i]) max_sum = max(max_ending_here) for i in range(1, n - 1): max_sum = max(max_sum, max_ending_here[i-1] + max_starting_here[i+1]) return max_sum"},{"question":"John loves arranging numbers in his special sequence. He starts with two integers: P and Q. His sequence follows a specific rule: every next number is the sum of the squares of the two preceding numbers. Mathematically, the sequence is defined as follows: - The first number in the sequence is P. - The second number in the sequence is Q. - The nth number in the sequence (for n > 2) is the sum of the squares of the (n-1)th and (n-2)th numbers. Given P, Q, and an integer N (1 ≤ N ≤ 20), write a program to find the Nth number in John\'s sequence. Input The first line contains an integer T (1 ≤ T ≤ 10^4), the number of test cases. Each of the next T lines contains three space-separated integers P, Q, and N. Output For each test case, print the Nth number in the sequence. Example Input 2 1 1 3 2 3 4 Output 2 65 Note For the first test case, the sequence starts with 1, 1. The third number is the sum of the squares of the first two numbers, which is 1*1 + 1*1 = 2. For the second test case, the sequence starts with 2, 3. The next numbers in the sequence are: - 2 - 3 - 2^2 + 3^2 = 4 + 9 = 13 - 3^2 + 13^2 = 9 + 169 = 178 - 13^2 + 178^2 = 169 + 31684 = 31853 So, the fourth number is 178.","solution":"def nth_number_in_sequence(P, Q, N): Returns the Nth number in the sequence generated with the initial numbers P and Q. if N == 1: return P elif N == 2: return Q sequence = [P, Q] for i in range(2, N): next_number = sequence[-1] ** 2 + sequence[-2] ** 2 sequence.append(next_number) return sequence[N-1] def process_input(input_data): output = [] lines = input_data.strip().split(\'n\') T = int(lines[0]) for i in range(1, T + 1): P, Q, N = map(int, lines[i].split()) output.append(nth_number_in_sequence(P, Q, N)) return output"},{"question":"A small city is organizing a local marathon, and you are tasked with handling the registration data for the runners. Each runner has a bib number and a corresponding category based on their age group. The categories are as follows: - \\"Juniors\\" for runners aged 14 or below - \\"Adults\\" for runners aged 15 to 50 - \\"Seniors\\" for runners aged 51 and above Given a list of runners with their bib numbers and ages, your task is to: 1. Assign each runner to the appropriate category based on their age. 2. Print a report that shows the bib number and category of each runner in ascending order by their bib number. Each runner is identified by a unique bib number, and no two runners have the same bib number. **Input** - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of runners. - The next n lines each contain two space-separated integers bib and age, where bib (1 ≤ bib ≤ 10^5) is the bib number of the runner, and age (1 ≤ age ≤ 100) is the age of the runner. **Output** - For each runner, display their bib number followed by their category. The output should list the runners in ascending order of their bib numbers. **Examples** Input ``` 5 102 10 203 25 150 55 101 13 302 70 ``` Output ``` 101 Juniors 102 Juniors 150 Seniors 203 Adults 302 Seniors ``` Note In the example above: - Bib numbers 101 and 102 belong to runners aged 13 and 10, respectively, who are assigned to the \\"Juniors\\" category. - Bib number 203 belongs to a runner aged 25, who is assigned to the \\"Adults\\" category. - Bib numbers 150 and 302 belong to runners aged 55 and 70, respectively, who are assigned to the \\"Seniors\\" category.","solution":"def categorize_runners(n, runners): def categorize(age): if age <= 14: return \\"Juniors\\" elif 15 <= age <= 50: return \\"Adults\\" else: return \\"Seniors\\" sorted_runners = sorted(runners, key=lambda x: x[0]) return [(bib, categorize(age)) for bib, age in sorted_runners]"},{"question":"Aisha loves to walk in the park near her house. The park is designed in a way that there are certain scenic spots Aisha likes to stop by. However, once Aisha visits a scenic spot, she prefers to avoid the next nearest spot to not overcrowd the scenic areas. There are multiple paths in the park, and each path has a different number of scenic spots. Given the number of scenic spots on each path, help Aisha determine the maximum number of scenic spots she can visit without stopping at adjacent spots. INPUT The first line of input contains the number of test cases, T. 0 < T <= 10 Each test case starts with a number N, the number of paths. 0 <= N <= 10^4 The next line will have N numbers, representing the number of scenic spots on each path. 0 <= S(i) <= 10^9. The order of the paths does not change. OUTPUT For each test case, print “TestCase T: M” without quotes in a single line. T is the test case number, starting with 1. M is the maximum number of scenic spots Aisha can visit. SAMPLE INPUT 2 4 4 2 3 5 3 1 8 7 SAMPLE OUTPUT TestCase 1: 9 TestCase 2: 8 Explanation TestCase 1: Aisha visits scenic spots on paths 1 and 3 with counts 4 and 5 respectively, avoiding path 2. This adds up to a total of 9 scenic spots. TestCase 2: Aisha visits the scenic spots on path 2 which has the most spots at 8, avoiding paths 1 and 3.","solution":"def max_scenic_spots(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] spots = test_cases[t][1] if N == 0: results.append(f\\"TestCase {t+1}: 0\\") continue if N == 1: results.append(f\\"TestCase {t+1}: {spots[0]}\\") continue # Dynamic programming approach dp = [0] * N dp[0] = spots[0] dp[1] = max(spots[0], spots[1]) for i in range(2, N): dp[i] = max(dp[i-1], spots[i] + dp[i-2]) results.append(f\\"TestCase {t+1}: {dp[-1]}\\") return results"},{"question":"You have a rectangular grid with M rows and N columns. Each cell in the grid contains an integer value which represents the elevation at that point. Your task is to find the maximum difference in elevation between any two cells such that there is a path connecting them, and the elevation is non-decreasing along the path. You can travel from one cell to another if they share a side. Input The input consists of a single test case formatted as follows: M N e_{1,1} e_{1,2} ... e_{1,N} e_{2,1} e_{2,2} ... e_{2,N} ... e_{M,1} e_{M,2} ... e_{M,N} The first line consists of two integers M (1 leq M leq 500) and N (1 leq N leq 500), representing the number of rows and columns in the grid, respectively. The next M lines each contain N integers separated by spaces, where e_{i,j} (0 leq e_{i,j} leq 10^9) represents the elevation of the cell at row i and column j. Output Print the maximum difference in elevation between any two cells connected by a non-decreasing path. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 8 Input 2 2 10 1 8 7 Output 9 Input 4 4 9 8 7 6 8 7 6 5 7 6 5 4 6 5 4 3 Output 6","solution":"def max_elevation_difference(M, N, elevations): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def bfs(r, c): max_elev = elevations[r][c] visited = [[False] * N for _ in range(M)] visited[r][c] = True queue = deque([(r, c)]) while queue: x, y = queue.popleft() max_elev = max(max_elev, elevations[x][y]) for dr, dc in directions: nx, ny = x + dr, y + dc if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny] and elevations[nx][ny] >= elevations[x][y]: visited[nx][ny] = True queue.append((nx, ny)) return max_elev max_diff = 0 for i in range(M): for j in range(N): min_elev = elevations[i][j] max_elev = bfs(i, j) max_diff = max(max_diff, max_elev - min_elev) return max_diff # Example usage print(max_elevation_difference(3, 3, [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ])) # Output: 8 print(max_elevation_difference(2, 2, [ [10, 1], [8, 7] ])) # Output: 9 print(max_elevation_difference(4, 4, [ [9, 8, 7, 6], [8, 7, 6, 5], [7, 6, 5, 4], [6, 5, 4, 3] ])) # Output: 6"},{"question":"The team at a warehouse records the number of items processed in each of their four shifts. Initially, there is no item processed, meaning the counter starts at 0. Each shift record is either `I` (indicating an increase of 1 item processed) or `D` (indicating a decrease of 1 item processed). Given a string S of length 4, where each character represents the record of one shift, determine the final count of items processed at the end of all shifts. Constraints: * The length of S is 4. * Each character in S is `I` or `D`. Input: A string S given from Standard Input. Output: Print the final count of items processed. Examples: Input: IDDI Output: 0 Input: IIII Output: 4 Input: DDID Output: -2","solution":"def final_item_count(s): Given a string S representing the record of items processed in each of four shifts with \'I\' or \'D\', returns the final count of items processed. `I` represents an increase of 1 item processed. `D` represents a decrease of 1 item processed. count = 0 for char in s: if char == \'I\': count += 1 elif char == \'D\': count -= 1 return count"},{"question":"You are given a tree containing n nodes and n-1 edges. Each node of the tree is labeled with a unique number from 1 to n. The root of the tree is always node 1. Given Q queries, each of which asks for the sum of nodes within a given subtree, your task is to efficiently answer these queries. A subtree rooted at node u is the set of all nodes that have u as their ancestor. Each query will be provided as an integer u, and you need to find the sum of the node labels in the subtree of node u. Input - The first line contains two integers n (1 ≤ n ≤ 100,000) and Q (1 ≤ Q ≤ 100,000), the number of nodes and the number of queries. - The next n-1 lines each contain two integers x and y (1 ≤ x, y ≤ n) that describe an edge between nodes x and y. - The next Q lines each contain an integer u (1 ≤ u ≤ n), describing a query. Output For each query, output the sum of the node labels in the subtree rooted at node u. Example Input 8 3 1 2 1 3 2 4 2 5 3 6 3 7 4 8 2 3 1 Output 19 16 36 Explanation In the given example, the tree can be visualized as follows: 1 / 2 3 / / 4 5 6 7 / 8 - For the query u = 2, the subtree rooted at node 2 contains nodes [2, 4, 5, 8]. The sum of these nodes is 2 + 4 + 5 + 8 = 19. - For the query u = 3, the subtree rooted at node 3 contains nodes [3, 6, 7]. The sum of these nodes is 3 + 6 + 7 = 16. - For the query u = 1, the subtree rooted at node 1 contains all nodes [1, 2, 3, 4, 5, 6, 7, 8]. The sum of these nodes is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 36.","solution":"from collections import defaultdict class TreeSum: def __init__(self, n, edges): self.tree = defaultdict(list) self.subtree_sum = [0] * (n + 1) self.visited = [False] * (n + 1) for x, y in edges: self.tree[x].append(y) self.tree[y].append(x) self._dfs(1) def _dfs(self, node): self.visited[node] = True self.subtree_sum[node] = node # start with the value of the node itself for neighbor in self.tree[node]: if not self.visited[neighbor]: self._dfs(neighbor) self.subtree_sum[node] += self.subtree_sum[neighbor] def query(self, u): return self.subtree_sum[u] def solve_tree_queries(n, edges, queries): tree_sum = TreeSum(n, edges) results = [] for u in queries: results.append(tree_sum.query(u)) return results"},{"question":"A company wants to analyze the effectiveness of its customer service team. They\'ve collected data on how long each customer had to wait before their request was handled, and how much time each interaction took. They want to determine the customer service representative who performed the best, defining \\"best\\" as the representative who, on average, managed customer interactions in the shortest amount of time including waiting and handling time. To assist with this, you are tasked to write a program that, given the records of customer interactions, will compute and output the name of the \\"best\\" representative based on the given criteria. # Input The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of customer interactions recorded. Each of the next `n` lines contains the name of a representative (a string of at most 20 characters with no spaces), the wait time in minutes (an integer 0 ≤ wait time ≤ 1000), and the handle time in minutes (an integer 0 ≤ handle time ≤ 1000). # Output Output a single line with the name of the representative who, on average, managed customer interactions in the shortest amount of time. If there are multiple such representatives, output the one which comes first lexicographically. # Example Input: ``` 5 Alice 3 6 Bob 2 4 Alice 1 2 Bob 3 5 Charlie 0 3 ``` Output: ``` Charlie ``` # Explanation - Alice\'s average handling time: (3+6 + 1+2) / 2 = 6. - Bob\'s average handling time: (2+4 + 3+5) / 2 = 7. - Charlie\'s average handling time: (0+3) / 1 = 3. Charlie has the shortest average handling time.","solution":"def best_representative(n, records): from collections import defaultdict import math reps = defaultdict(lambda: [0, 0]) # [total_time, count] for record in records: name, wait, handle = record wait, handle = int(wait), int(handle) total_time = wait + handle reps[name][0] += total_time reps[name][1] += 1 best_rep = None best_avg_time = math.inf for name, (total_time, count) in sorted(reps.items()): avg_time = total_time / count if avg_time < best_avg_time: best_avg_time = avg_time best_rep = name return best_rep"},{"question":"In a distant land, the citizens love puzzles, especially those involving words. They have a special category of words called \\"Magic Words.\\" A word is considered a \\"Magic Word\\" if at least half of its characters appear the same number of times in both the first half and the second half of the word. If the length of the word is odd, the middle character is considered to be part of both halves. You need to write a program to determine whether the given word is a \\"Magic Word\\" or not. Input The first line of the input consists of an integer T (1 ≤ T ≤ 50) which denotes the number of test cases. Each test case consists of a single line containing a word W (2 ≤ |W| ≤ 1000), the word consisting of only lowercase English letters. Output For each test case, the output should be a single line. Print \\"YES\\" if the word is a \\"Magic Word,\\" otherwise, print \\"NO\\". Example Input: 3 abcabc aabbcc abccba Output: YES NO YES","solution":"def is_magic_word(word): length = len(word) if length % 2 == 0: first_half = word[:length//2] second_half = word[length//2:] else: first_half = word[:length//2 + 1] second_half = word[length//2:] char_count = {} for char in first_half: if char in char_count: char_count[char][0] += 1 else: char_count[char] = [1, 0] for char in second_half: if char in char_count: char_count[char][1] += 1 else: char_count[char] = [0, 1] matching_chars = 0 total_chars = len(first_half) for counts in char_count.values(): if counts[0] == counts[1]: matching_chars += 1 return \\"YES\\" if matching_chars >= total_chars / 2 else \\"NO\\" def check_magic_words(test_cases): results = [] for word in test_cases: results.append(is_magic_word(word)) return results"},{"question":"You are given an array a of length n which contains non-negative integers. You need to perform m operations on this array. In each operation, choose the maximum element in the array, multiply it by 2, and replace it in its original position. Print the array after performing all operations. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5), the length of the array and the number of operations you should perform. The second line contains n space-separated integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9), the elements of the array. Output Print the resulting array after performing m operations. Examples Input 4 3 1 3 5 2 Output 1 3 40 2 Input 5 4 0 4 2 7 1 Output 0 4 2 28 1 Explanation In the first example: 1. The maximum element is 5, double it: [1,3,10,2] 2. The new maximum element is 10, double it: [1,3,20,2] 3. The new maximum element is 20, double it: [1,3,40,2] In the second example: 1. The maximum element is 7, double it: [0,4,2,14,1] 2. The new maximum element is 14, double it: [0,4,2,28,1] 3. The new maximum element is 28, double it: [0,4,2,56,1] 4. The new maximum element is 56, double it: [0,4,2,112,1]","solution":"def perform_operations(n, m, a): Perform m operations on array a, where each operation consists of finding the maximum value in the array, doubling it, and placing it back in its original position. Parameters: n (int): Length of the array m (int): Number of operations to perform a (list of int): The array on which to perform the operations Returns: list of int: The resulting array after performing m operations for _ in range(m): max_index = a.index(max(a)) a[max_index] *= 2 return a"},{"question":"You are given a square grid of size n x n. Each cell in the grid can be either empty or contain an obstacle. You need to find the number of distinct paths from the top-left cell (0, 0) to the bottom-right cell (n-1, n-1) such that you can only move right or down unless blocked by an obstacle. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the size of the grid. Each of the next n lines contains n characters \'E\' or \'O\'. \'E\' represents an empty cell, and \'O\' represents a cell with an obstacle. Output Print a single integer — the number of distinct paths from the top-left to the bottom-right of the grid. If there is no such path, print 0. Examples Input 3 EEE EOE EEE Output 2 Input 3 EOE OOE EEE Output 0 Note In the first example, there are two paths from the top-left to the bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, all possible paths from the top-left to the bottom-right are blocked by obstacles, hence the output is 0.","solution":"def count_paths(n, grid): # Initialize DP table with 0s. dp = [[0]*n for _ in range(n)] # If the starting point is an obstacle, return 0. if grid[0][0] == \'O\': return 0 # Starting point dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(n): if grid[i][j] == \'O\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Example Input 5 2 4 5 6 10 7 2 3 5 6 8 3 2 5 7 Output 14","solution":"def calculate_S(A: list, B: list, C: list) -> int: Given three lists of integers A, B, and C, return the sum of the unique common elements in A and B, and not in C. # Find unique numbers in A set_A = set(A) # Find unique numbers in B set_B = set(B) # Find common elements in both sets common_elements = set_A & set_B # Find unique numbers in C set_C = set(C) # Exclude elements that are present in C filtered_elements = common_elements - set_C # Return the sum of remaining elements return sum(filtered_elements)"},{"question":"In an online game, players can gain points by collecting items. Each item collected can be green, red, or blue, and has a different point value associated with it: * a green item is worth g points, * a red item is worth r points, * a blue item is worth b points. Players have a limited capacity of items they can carry, denoted by the integer k, which is the maximum number of items a player can choose to carry. Given the total number of each type of item available, determine the maximum number of points a player can achieve if they choose items optimally. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases in the input. Then t test cases follow. Each test case is given as a separate line of input. It contains six integers: g, r, b, g_points, r_points, b_points (1 ≤ g, r, b ≤ 100), and (1 ≤ g_points, r_points, b_points ≤ 100). Followed by an integer k (1 ≤ k ≤ g + r + b) — the maximum number of items the player can carry. Output Print t integers: the i-th printed integer is the maximum number of points the player can achieve for the i-th test case in the input. Example Input 3 1 2 3 10 20 30 3 2 2 2 5 10 15 4 5 5 5 1 1 1 5 Output 90 60 5 Explanation In the first example, the player has a maximum capacity of 3 items and can take one of each type to achieve a total of 10 + 20 + 30 = 60 points. In the second example, the player can choose 4 items, and taking two blue items would grant the maximum points: 15 + 15 + 10 + 5 = 60 points. In the third example, all items have the same point value, so they can carry up to 5 items for a total of 1 * 5 = 5 points.","solution":"def max_points_per_case(g, r, b, g_points, r_points, b_points, k): items = [] items.extend([g_points] * g) items.extend([r_points] * r) items.extend([b_points] * b) items.sort(reverse=True) max_points = sum(items[:k]) return max_points def max_points(t, cases): results = [] for case in cases: g, r, b, g_points, r_points, b_points, k = case results.append(max_points_per_case(g, r, b, g_points, r_points, b_points, k)) return results"},{"question":"You are given two matrices `A` and `B` of size `m x n`. Write a function to check if matrix `B` can be obtained by rotating matrix `A` 0, 90, 180, or 270 degrees in a clockwise direction. Constraints: * 1 leq m, n leq 10 Input: The input is given as two matrices in the following format: ``` m n a_00 a_01 ... a_0(n-1) a_10 a_11 ... a_1(n-1) ... a_(m-1)0 a_(m-1)1 ... a_(m-1)(n-1) b_00 b_01 ... b_0(n-1) b_10 b_11 ... b_1(n-1) ... b_(m-1)0 b_(m-1)1 ... b_(m-1)(n-1) ``` Output: Print \\"Yes\\" if matrix `B` can be obtained by rotating matrix `A` 0, 90, 180, or 270 degrees. Otherwise, print \\"No\\". Example: Input: ``` 3 3 1 2 3 4 5 6 7 8 9 7 4 1 8 5 2 9 6 3 ``` Output: ``` Yes ```","solution":"def rotate_90(mat): return [list(row) for row in zip(*mat[::-1])] def is_rotation(a, b): if a == b: return True rotated_90 = rotate_90(a) if rotated_90 == b: return True rotated_180 = rotate_90(rotated_90) if rotated_180 == b: return True rotated_270 = rotate_90(rotated_180) if rotated_270 == b: return True return False def check_matrix_rotation(m, n, a, b): if is_rotation(a, b): return \\"Yes\\" return \\"No\\""},{"question":"John is participating in a coding marathon, and he decides to add an additional challenge to his training. He needs to practice number transformations based on some rules. In one of the tasks, you\'re required to help him with the following: Given an array of integers, for each element, transform it by either incrementing or decrementing it to the nearest even number. Output the transformed array. If the number is already even, it remains unchanged. If the number is odd, it can either be incremented or decremented to the nearest even number. Input format: The first line contains an integer N specifying the number of elements in the array. The second line contains N space-separated integers, the elements of the array. Output format: Print the transformed array, each element separated by a space. Constraints: 1 ≤ N ≤ 100 -1000 ≤ Array Elements ≤ 1000 SAMPLE INPUT 5 1 2 3 4 5 SAMPLE OUTPUT 0 2 2 4 4 Explanation 1 is incremented to 2 or decremented to 0 (Choose the closest even, decrement to 0 in this case). 2 remains unchanged. 3 is incremented to 4 or decremented to 2 (Choose the closest even, decrement to 2 in this case). 4 remains unchanged. 5 is incremented to 6 or decremented to 4 (Choose the closest even, decrement to 4 in this case).","solution":"def transform_to_nearest_even(arr): Transforms each integer in the array to the nearest even integer. If the number is already even, it remains unchanged. If the number is odd, it is changed to the nearest even number. Parameters: arr (list): List of integers Returns: list: List of transformed integers transformed = [] for num in arr: if num % 2 == 0: transformed.append(num) else: if num > 0: transformed.append(num - 1) else: transformed.append(num + 1) return transformed"},{"question":"You are given a string S consisting of lowercase English letters. You can perform the following operations on the string: 1. Select a substring of S and reverse it. 2. Select any character of S and remove it. The goal is to form the lexicographically smallest string possible by performing the above operations any number of times. Write a function `smallest_string` that takes a string S and returns the lexicographically smallest string possible after performing the above operations any number of times. Function signature: `def smallest_string(s: str) -> str:` Input - The input is a single string S (1 ≤ |S| ≤ 10^5) consisting of lowercase English letters. Output - Return a string which is the lexicographically smallest string possible. Example Input `dcba` Output `a` Input `xyzabc` Output `a` Explanation In the first example, you can remove \'d\', \'c\', and \'b\' one by one to get \'a\', which is the lexicographically smallest string. In the second example, you can remove \'x\', \'y\', \'z\', \'b\', and \'c\' to get \'a\', which is the lexicographically smallest string.","solution":"def smallest_string(s: str) -> str: This function returns the lexicographically smallest string possible after performing any number of reversal and removal operations on the input string s. Since we can remove any characters, the smallest string is the smallest character in the original string after removing other characters. return min(s)"},{"question":"In the kingdom of Zolkia, there are `n` mystical gardens connected by `m` bidirectional teleportation portals. Each garden grows a unique type of magical herb, and some of these herbs have special properties that interest herbologists. A herbologist wants to collect as many different types of herbs as possible, starting from garden 1. However, each teleportation has a cost in magical energy, and the herbologist only has a specific amount of energy `E`. The cost to teleport between gardens varies for each pair of connected gardens. Your task is to determine the maximum number of different types of herbs the herbologist can collect starting from garden 1 without exceeding the given energy `E`. # Input: The first line contains three integers `n`, `m`, and `E` (1 ≤ `n`, `m` ≤ 100,000, 1 ≤ `E` ≤ 1,000,000), the number of gardens, the number of teleportation portals, and the total energy available, respectively. Each of the next `m` lines contains three integers `u_i`, `v_i`, and `c_i` (1 ≤ `u_i`, `v_i` ≤ `n`, `u_i` ≠ `v_i`, 1 ≤ `c_i` ≤ 10,000), denoting a bidirectional teleportation portal between gardens `u_i` and `v_i` with a cost of `c_i` units of energy. The next `n` lines contain a string representing the herb in each garden, with the `i`-th line representing the herb in the `i`-th garden. Each herb is represented by a unique string of lowercase letters with a maximum length of 20. # Output: Print a single integer: the maximum number of different types of herbs that the herbologist can collect, starting from garden 1 and not exceeding the total energy `E`. # Examples: Input: ``` 5 6 10 1 2 3 1 3 2 2 3 1 2 4 5 3 4 6 4 5 3 rose tulip daisy lily orchid ``` Output: ``` 4 ``` Input: ``` 3 3 5 1 2 3 2 3 2 1 3 4 lavender marigold sunflower ``` Output: ``` 3 ``` # Note: In the first example, the herbologist can collect the herbs in the following way: - Start at garden 1 (rose). - Teleport to garden 3 with a cost of 2 units of energy (daisy). - Teleport to garden 2 with a cost of 1 unit of energy (tulip). - Teleport to garden 4 with a cost of 5 units of energy (lily). In total, the herbologist collects 4 different herbs: rose, daisy, tulip, and lily, using 2 + 1 + 5 = 8 units of energy, which is within the limit of 10 units.","solution":"import heapq def max_herbs_collected(n, m, E, portals, herbs): graph = [[] for _ in range(n + 1)] for u, v, c in portals: graph[u].append((v, c)) graph[v].append((u, c)) energy = [float(\'inf\')] * (n + 1) energy[1] = 0 pq = [(0, 1)] visited_herbs = set() while pq: curr_energy, node = heapq.heappop(pq) if curr_energy > E: continue if herbs[node - 1] not in visited_herbs: visited_herbs.add(herbs[node - 1]) for neighbor, cost in graph[node]: if curr_energy + cost < energy[neighbor]: energy[neighbor] = curr_energy + cost heapq.heappush(pq, (curr_energy + cost, neighbor)) return len(visited_herbs)"},{"question":"You are tasked with developing a software system for a library to manage its collection of books. Books in the library are each identified by a unique integer ID and each book belongs to one or more genres out of a fixed list of genres. The library system aims to maintain an organized list of books and should be able to easily retrieve the genres for any given set of books. To implement this, you need to design a data structure that supports the following operations efficiently: 1. Add a book with a list of genres to the library. 2. Remove a book from the library. 3. Retrieve the list of genres for a given book. Your task is to implement these functionalities in a class `Library`. Input The first line contains an integer `q` (1 ≤ q ≤ 1000), representing the number of operations to perform. Each of the following `q` lines contains one of the three types of operations in the format: - \\"ADD id g1 g2 ... gk\\": where `id` (1 ≤ id ≤ 10^9) is the book ID and g1, g2, ... , gk (1 ≤ g ≤ 100) are the genres of the book. - \\"REMOVE id\\": where `id` is the ID of the book to remove from the library. - \\"GET id\\": where `id` is the ID of the book and you should return the list of genres of the book. Output For each \\"GET\\" operation, print the genres as a space-separated list in the order they were added. If the book ID does not exist in the system, print `NOT FOUND`. Example Input 7 ADD 101 Science Fiction ADD 102 History Politics GET 101 REMOVE 101 GET 101 ADD 103 Mystery GET 103 Output Science Fiction NOT FOUND Mystery Note In the example provided, - Genres \\"Science\\" and \\"Fiction\\" are added to book ID 101. - Genres \\"History\\" and \\"Politics\\" are added to book ID 102. - The genres of book ID 101 are retrieved and printed as \\"Science Fiction\\". - Book ID 101 is removed from the library. - An attempt to get the genres of the now removed book ID 101 results in \\"NOT FOUND\\". - Genre \\"Mystery\\" is added to book ID 103. - The genres of book ID 103 are retrieved and printed as \\"Mystery\\".","solution":"class Library: def __init__(self): self.books = {} def add_book(self, book_id, genres): self.books[book_id] = genres def remove_book(self, book_id): if book_id in self.books: del self.books[book_id] def get_genres(self, book_id): if book_id in self.books: return \' \'.join(self.books[book_id]) else: return \\"NOT FOUND\\""},{"question":"Chef has a large collection of playing cards, each card having a distinct integer written on it. Chef\'s friend challenged him to find a particular combination of cards from his collection. The challenge is to pick exactly N cards that sum up to a given value S. If it is possible to pick such a combination of cards, he should print the combination. If there are multiple combinations, print any one of them. If no such combination exists, print -1. Help Chef to solve this challenge. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of cards to pick. The second line contains an integer S denoting the target sum. The third line contains space-separated integers representing the cards in the collection. Output For each test case, output a single line containing the combination of cards that sum up to S or -1 if no such combination exists. If there are multiple valid combinations, print any one of them. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ S ≤ 10^9 1 ≤ Number of cards in the collection ≤ 100 1 ≤ Value on each card ≤ 10^6 Example Input: 2 3 15 2 3 6 7 4 8 5 2 10 1 2 3 4 5 Output: 6 4 5 -1 Explanation In the first test case, 2 + 6 + 7 = 15 is a valid combination. In the second test case, no combination of 2 cards sums up to 10. Hence, the output is -1.","solution":"from itertools import combinations def find_combination(N, S, cards): Returns a combination of N cards that sum up to S or -1 if no such combination exists. for combo in combinations(cards, N): if sum(combo) == S: return list(combo) return -1 def solve_challenges(T, test_cases): results = [] for case in test_cases: N, S, cards = case result = find_combination(N, S, cards) if result == -1: results.append(\\"-1\\") else: results.append(\\" \\".join(map(str, result))) return results # Here\'s how you would parse input and call the function for solving the challenges directly. def main(): import sys input = sys.stdin.read data = input().strip().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 S = int(data[index]) index += 1 cards = list(map(int, data[index:index + len(data[index:])])) test_cases.append((N, S, cards)) results = solve_challenges(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"A rope is tied between two fixed points (A and B) on the ground, forming a straight line segment. You have to form knots along the rope such that each knot creates a separate segment of the rope. Your task is to read the length of the rope and the desired number of segments and determine the positions of the knots along the rope. # Problem Description Given a rope of length `L` tied between two fixed points A and B and the number `N` representing the desired number of segments, determine the positions of the knots along the rope. Each segment should be of equal length. # Input The input consists of a single line containing two integers `L` and `N`, where: - `L` is the total length of the rope (1 ≤ L ≤ 1000). - `N` is the number of desired segments (2 ≤ N ≤ 100). # Output Output the positions of the knots, separated by spaces. The positions should be in increasing order and be formatted to 2 decimal places. # Examples Example 1: # Input: ``` 100 5 ``` # Output: ``` 20.00 40.00 60.00 80.00 ``` Example 2: # Input: ``` 50 3 ``` # Output: ``` 16.67 33.33 ``` Example 3: # Input: ``` 200 4 ``` # Output: ``` 50.00 100.00 150.00 ``` # Constraints - You may assume that the length `L` can be divided into `N` segments of equal length. Each knot should be placed at an equal distance of `L / N` from the previous knot. - Positions of the knots must be calculated with high precision and formatted to 2 decimal places.","solution":"def knot_positions(L, N): Returns the positions of the knots along the rope. Parameters: L (int): The total length of the rope. N (int): Number of desired segments. Returns: positions (list): List of positions of each knot formatted to 2 decimal places. segment_length = L / N positions = [segment_length * i for i in range(1, N)] return [f\\"{pos:.2f}\\" for pos in positions]"},{"question":"The Kingdom of Puzzlonia is facing an energy crisis. To solve this, the king has devised a plan to install solar panels. However, due to the dense forest spread across the kingdom, it\'s challenging to find optimal spots. The king needs your expertise in this matter. You are given a grid of size n x m representing a map of the kingdom. Each cell in the grid contains an integer representing the number of trees in that cell. You can place a solar panel on any subgrid (a rectangle within the grid), and the efficiency of a solar panel in a subgrid is determined by the minimum number of trees in any cell within that subgrid. Your task is to find the subgrid with the maximum solar panel efficiency. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the grid. Each of the next n lines contains m integers representing the grid, where each integer is between 0 and 1000 inclusive. Output Print a single integer, the maximum efficiency of the solar panel for any possible subgrid. Examples Input 4 4 1 2 3 4 5 6 7 8 9 10 1 11 12 13 14 0 Output 10 Input 3 3 0 1 2 3 0 4 2 1 0 Output 4 Note In the first example, one of the possible optimal subgrids is the 1x1 cell containing the value 10, as it is the highest minimum value of trees in any subgrid. In the second example, the optimal subgrid can be the 1x1 cell containing the value 4.","solution":"def max_solar_panel_efficiency(grid): Returns the maximum solar panel efficiency, which is the maximum value in the grid. # Initialize the maximum efficiency to a very small number max_efficiency = float(\'-inf\') # Traverse each cell in the grid for row in grid: max_efficiency = max(max_efficiency, max(row)) return max_efficiency"},{"question":"TechCorp is organizing a Hackathon event where participants need to solve coding challenges within a limited time. Each participant is identified by an integer ID and starts with zero points. The points can be updated over time as participants solve more challenges. The organizer wants to keep track of the highest score as the competition progresses, and update the score of participants based on their performance. You have been assigned to develop a solution to manage and query the scores of participants. Create a program that updates the score of participants and reports the participant with the highest score and their score when requested. Input The input is given in the following format: ``` N Q command1 command2 :: commandQ ``` The number of participants N (1 ≤ N ≤ 100000) and the number of queries Q (1 ≤ Q ≤ 100000) are given on the first line. Each query is specified on a new line in one of the following formats: ``` UPDATE id points REPORT ``` When the command is `UPDATE id points`, add the integer `points` (1 ≤ points ≤ 109) to the participant with the specified ID (1 ≤ id ≤ N). When the command is `REPORT`, output the ID and the current highest score of the participant with the highest score. If multiple participants have the highest score, return the one with the smallest ID. Output Each time a `REPORT` command is issued, the program should output the ID and the score of the participant with the highest score, separated by a space. Examples Input ``` 3 5 UPDATE 1 100 UPDATE 2 150 REPORT UPDATE 1 200 REPORT ``` Output ``` 2 150 1 300 ``` Input ``` 4 3 UPDATE 3 120 REPORT REPORT ``` Output ``` 3 120 3 120 ```","solution":"class Hackathon: def __init__(self, n): self.scores = [0] * (n + 1) # Initialize scores for n participants self.highest_id = 1 # Initially, the highest scoring id is 1 def update(self, id, points): self.scores[id] += points if self.scores[id] > self.scores[self.highest_id] or (self.scores[id] == self.scores[self.highest_id] and id < self.highest_id): self.highest_id = id def report(self): return self.highest_id, self.scores[self.highest_id] # Example usage: def process_queries(n, queries): hackathon = Hackathon(n) result = [] for query in queries: cmd = query.split() if cmd[0] == \'UPDATE\': id = int(cmd[1]) points = int(cmd[2]) hackathon.update(id, points) elif cmd[0] == \'REPORT\': result.append(hackathon.report()) return result"},{"question":"You are given an array of integers. Write a program to find the smallest positive integer (greater than 0) that is missing from the array. Input Format The first line contains T, i.e. the number of test cases. T test cases follow; each test case consists of two lines: The first line denotes the number of elements in the array, N. The second line contains N integers separated by space. Output Format For each test case, print the smallest positive integer that is missing from the array. Constraints 1 ≤ T ≤ 20 1 ≤ N ≤ 10^5 -10^6 ≤ array elements ≤ 10^6 SAMPLE INPUT 3 5 1 3 6 4 1 2 4 1 2 3 4 5 -1 -3 -6 -4 2 SAMPLE OUTPUT 5 5 1 Explanation In the given input, T = 3, For the first test case, the array is [1, 3, 6, 4, 1, 2], and the smallest positive integer missing from the array is 5. For the second test case, the array is [1, 2, 3, 4], and the smallest positive integer missing from the array is 5. For the third test case, the array is [-1, -3, -6, -4, 2], and the smallest positive integer missing from the array is 1.","solution":"def smallest_missing_positive(arr): Returns the smallest positive integer missing from the array. n = len(arr) # Correcting the values in the range 1 to n in their correct positions for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] # Finding the first position where the index does not match the value for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1 def process_test_cases(test_cases): Processes multiple test cases and finds the smallest missing positive integer for each case. results = [] for arr in test_cases: results.append(smallest_missing_positive(arr)) return results"},{"question":"A toy manufacture company produces toy cars. Each car is constituted by certain unique parts identified by numbers (integers). The company is planning to upgrade their toy cars, so they need to check whether new parts are subsets of existing toy cars or if they need to produce new parts from scratch. You need to write a program to determine if a set of new parts is a valid subset of an existing toy car. Input The first line contains an integer `n` (1 ≤ n ≤ 100), the number of unique parts in the existing toy car. The second line contains `n` integers representing the part numbers of the existing toy car. The third line contains an integer `m` (1 ≤ m ≤ 100), the number of parts in the new set of parts. The fourth line contains `m` integers representing the part numbers of the new set of parts. Output Print \\"VALID\\" if the new set of parts is a subset of the existing toy car\'s parts, otherwise print \\"INVALID\\". Examples Input 5 1 2 3 4 5 3 2 4 1 Output VALID Input 6 10 20 30 40 50 60 3 15 20 30 Output INVALID","solution":"def is_valid_subset(n, existing_parts, m, new_parts): Determines if the new set of parts is a subset of the existing toy car\'s parts. :param n: Integer, number of unique parts in the existing toy car :param existing_parts: List of integers, parts of the existing toy car :param m: Integer, number of parts in the new set of parts :param new_parts: List of integers, parts of the new set :return: \\"VALID\\" if new_parts is a subset of existing_parts, otherwise \\"INVALID\\" existing_parts_set = set(existing_parts) new_parts_set = set(new_parts) if new_parts_set.issubset(existing_parts_set): return \\"VALID\\" else: return \\"INVALID\\""},{"question":"You are given a string consisting of lowercase alphabets. You have to determine the minimum number of operations required to make all the characters of the string equal. In one operation, you can select any character of the string and change it to any other lowercase alphabet. Input The input consists of a single line containing a string S of length n (1 ≤ n ≤ 1,000). Output Print a single integer, the minimum number of operations required. Example Input: abca Output: 2 Explanation: The string can be made to all \'a\' by changing the 2nd and 3rd characters to \'a\'.","solution":"def min_operations_to_make_equal(s): Returns the minimum number of operations required to make all characters in the string equal. :param s: A string consisting of lowercase alphabets :return: Minimum number of operations from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Find the character with maximum frequency max_freq = max(char_count.values()) # The minimum operations required is the length of string minus the maximum frequency min_operations = len(s) - max_freq return min_operations"},{"question":"Alice and Bob are best friends and they often like to challenge each other with various puzzles. This time, Alice has given Bob an interesting problem. Bob is given a string consisting of lowercase English letters, and he needs to create as many substrings as possible such that each substring is a palindrome. However, Bob can only cut the string into exactly K palindromic substrings. Help Bob determine the maximum possible palindrome length in the worst case after performing exactly K cuts. A palindrome is a string that reads the same backward as forward, e.g., \'madam\', \'racecar\'. Input: The first line of input contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer K, the number of cuts. - The second line contains a string S consisting of lowercase English letters. Output: For each test case, output a single integer: the length of the longest palindrome substring that can be formed in the worst case after exactly K cuts. Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100 1 ≤ K ≤ |S| - 1 SAMPLE INPUT 2 2 ababa 3 abcdef SAMPLE OUTPUT 3 2 Explanation: Case 1: After 2 cuts, the worst case scenario where we have the longest palindrome substring is \\"aba\\" from \\"ababa\\". The cuts would be as follows: ab|a|ba. Case 2: With 3 cuts, no matter how we cut the string \\"abcdef\\", the worst case longest palindrome substring would be length 2 (e.g., a|b|c|def or a|b|cd|ef).","solution":"def max_worst_case_palindrome_length(K, S): Determine the maximum possible palindrome length in the worst case after performing exactly K cuts. n = len(S) # Max length of the largest palindrome substring possible after K cuts max_length = (n // (K + 1)) return max_length def solve_cases(test_cases): results = [] for K, S in test_cases: results.append(max_worst_case_palindrome_length(K, S)) return results"},{"question":"You are given an array of integers representing the heights of buildings in a row. You are allowed to perform an operation where you can choose any two adjacent buildings and decrease the height of the taller building to match the height of the shorter one. Your task is to determine if it is possible to make all buildings the same height using the given operation any number of times. Constraints * 1 leq N leq 10^5 * 1 leq H_i leq 10^9 * All input values are integers. Input Input is given from Standard Input in the following format: N H_1 H_2 ... H_N Output If it is possible to make all buildings the same height, print `YES`; if it is not possible, print `NO`. Examples Input 3 3 3 3 Output YES Input 4 1 2 3 4 Output NO Input 5 5 5 5 5 5 Output YES Input 2 10 5 Output YES","solution":"def can_make_same_height(buildings): Determines if it is possible to make all buildings the same height by decreasing the height of the taller building to match the height of the shorter one for any two adjacent buildings. Parameters: buildings (list): List of integers representing the heights of the buildings. Returns: str: \\"YES\\" if possible, \\"NO\\" otherwise. N = len(buildings) # We only need to check if the heights of buildings form a non-increasing sequence for i in range(1, N): if buildings[i] > buildings[i-1]: return \\"NO\\" return \\"YES\\" # Reading from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) heights = list(map(int, data[1:N + 1])) result = can_make_same_height(heights) print(result)"},{"question":"Library Book Management System You are tasked with creating a book management system for a small library. In this system, books are added, borrowed, and returned by patrons. The library needs to keep track of the books available, borrowed books, and also the borrowing history of each book. # Input The input consists of multiple commands, one per line, in the following format: - ADD <book_id> <title>: Adds a new book with the specified ID and title to the inventory. If a book with the same ID already exists, update the title. - BORROW <book_id> <user_id>: A user borrows a book from the library. If the book is not available (either not in the inventory or already borrowed), ignore the command. - RETURN <book_id>: The book is returned to the library. If the book is not borrowed, ignore the command. - STATUS: Print the status of the current library books. Each book and user ID are unique integers, and the title is a string without spaces. Commands are case-sensitive and may contain redundant whitespace between segments but not within the book titles. Output The status report should provide the following information: - Inventory list: All books currently available in the library, sorted by book_id. - Borrowed list: All books currently borrowed along with the user_id, sorted by book_id. - Borrowing history: List of all transactions in the format \\"<user_id> borrowed <book_id> - <title>\\", sorted by the time of transaction. The latest transactions appear last. # Examples Input ``` ADD 101 TheGreatGatsby ADD 102 ToKillAMockingbird BORROW 101 501 BORROW 102 502 RETURN 101 STATUS ``` Output ``` Inventory: 101 TheGreatGatsby Borrowed: 102 502 ToKillAMockingbird History: 501 borrowed 101 - TheGreatGatsby 502 borrowed 102 - ToKillAMockingbird 501 returned 101 - TheGreatGatsby ``` Input ``` ADD 203 WarAndPeace ADD 202 PrideAndPrejudice BORROW 202 503 STATUS ``` Output ``` Inventory: 203 WarAndPeace Borrowed: 202 503 PrideAndPrejudice History: 503 borrowed 202 - PrideAndPrejudice ``` # Functional Requirements 1. The system must handle the input and produce corresponding outputs efficiently. 2. Ensure data integrity by properly updating the inventory and borrowing lists based on commands. 3. Maintain the borrowing history accurately and ensure it is output correctly on the STATUS command.","solution":"class Library: def __init__(self): self.inventory = {} self.borrowed = {} self.history = [] def add_book(self, book_id, title): self.inventory[book_id] = title def borrow_book(self, book_id, user_id): if book_id in self.inventory and book_id not in self.borrowed: self.borrowed[book_id] = user_id self.history.append(f\\"{user_id} borrowed {book_id} - {self.inventory[book_id]}\\") def return_book(self, book_id): if book_id in self.borrowed: user_id = self.borrowed.pop(book_id) self.history.append(f\\"{user_id} returned {book_id} - {self.inventory[book_id]}\\") def status(self): inventory_status = \\"n\\".join(f\\"{book_id} {title}\\" for book_id, title in sorted(self.inventory.items()) if book_id not in self.borrowed) borrowed_status = \\"n\\".join(f\\"{book_id} {user_id} {self.inventory[book_id]}\\" for book_id, user_id in sorted(self.borrowed.items())) history_status = \\"n\\".join(self.history) return f\\"Inventory:n{inventory_status}nBorrowed:n{borrowed_status}nHistory:n{history_status}\\" def process_commands(self, commands): for command in commands: parts = command.strip().split() action = parts[0] if action == \\"ADD\\": book_id = int(parts[1]) title = parts[2] self.add_book(book_id, title) elif action == \\"BORROW\\": book_id = int(parts[1]) user_id = int(parts[2]) self.borrow_book(book_id, user_id) elif action == \\"RETURN\\": book_id = int(parts[1]) self.return_book(book_id) elif action == \\"STATUS\\": print(self.status())"},{"question":"You are a software engineer responsible for developing a task scheduling system. The system needs to manage tasks that have dependencies on other tasks, such that a task cannot begin until all tasks it depends on are completed. Each task is represented by a unique integer ID. Given a list of tasks and their dependencies, determine an order in which the tasks can be completed. If no such order exists due to cyclical dependencies, return an empty list. Input - The first line contains two integers n and m (1 ≤ n ≤ 10000, 0 ≤ m ≤ 50000) – the number of tasks and the number of dependencies, respectively. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) representing a dependency such that task u must be completed before task v. Output - Print a list of integers representing an order in which the tasks can be completed. If no valid order exists, print \\"Impossible\\". Examples Input 4 3 1 2 2 3 3 4 Output 1 2 3 4 Input 4 4 1 2 2 3 3 1 3 4 Output Impossible Input 5 2 1 2 3 4 Output 1 3 4 2 5 or 3 1 4 2 5 or any order satisfying dependencies","solution":"from collections import defaultdict, deque def task_order(n, m, dependencies): indegree = [0] * (n + 1) graph = defaultdict(list) for u, v in dependencies: graph[u].append(v) indegree[v] += 1 queue = deque([i for i in range(1, n + 1) if indegree[i] == 0]) order = [] while queue: task = queue.popleft() order.append(task) for neighbor in graph[task]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(order) == n: return order else: return \\"Impossible\\""},{"question":"Three young friends, Alex, Charlie, and Jordan, are interested in a game involving binary trees. They define a binary tree as a data structure in which each node can have at most two children referred to as the left child and the right child. As part of their game, they want to calculate the depth of a binary tree. The depth of a binary tree is the number of edges in the longest path from the root node to a leaf node. A leaf node is one that does not have any children. Your task is to write a function that calculates the depth of a binary tree given its nodes and edges. Input The input consists of multiple test cases. The first line contains an integer T (1 ≤ T ≤ 100) - the number of test cases. Each test case starts with an integer N (1 ≤ N ≤ 1000) - the number of nodes in the binary tree. The next N lines contain three integers each, representing the nodes in the tree. Each line contains node_value, left_child_value, and right_child_value. If a node does not have a left or right child, it is represented by -1. Output For each test case, output a single integer - the depth of the binary tree. Example Input 2 3 1 2 3 2 -1 -1 3 -1 -1 5 1 2 3 2 -1 -1 3 4 5 4 -1 -1 5 -1 -1 Output 1 2 Explanation In the first test case, the tree is: 1 / 2 3 Both children (2 and 3) do not have further children, hence the depth is 1. In the second test case, the tree is: 1 / 2 3 / 4 5 The longest path is from 1 -> 3 -> 4 or 1 -> 3 -> 5, hence the depth is 2.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(nodes_info): nodes = {} for value, left, right in nodes_info: if value not in nodes: nodes[value] = TreeNode(value) node = nodes[value] if left != -1: if left not in nodes: nodes[left] = TreeNode(left) node.left = nodes[left] if right != -1: if right not in nodes: nodes[right] = TreeNode(right) node.right = nodes[right] return nodes[nodes_info[0][0]] # Return the root of the tree def max_depth(root): if root is None: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1 def calculate_tree_depths(test_cases): results = [] for nodes_info in test_cases: root = build_tree(nodes_info) depth = max_depth(root) results.append(depth - 1) return results # Example usage def main(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(data[idx]) idx += 1 nodes_info = [] for _ in range(N): value = int(data[idx]) left = int(data[idx + 1]) right = int(data[idx + 2]) nodes_info.append((value, left, right)) idx += 3 test_cases.append(nodes_info) results = calculate_tree_depths(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Sam is interested in a special sequence of numbers. He has a number N and he challenges you to find a number from this sequence which is closest to N. The sequence is defined as follows: S(n) = 2^0, 2^1, 2^2, 2^3, ..., 2^k,... Your task is to find the closest possible number M from the sequence S such that the absolute difference between M and N is minimized. If there are two such numbers, print the smaller one. Input First line of input will consist of the total number of test cases T. Next T lines contain a number N. Output For each test case, output the closest possible value M from the sequence S. Constraints 1 ≤ T ≤ 100000 1 ≤ N ≤ 10^18 Example Input: 3 1 5 20 Output: 1 4 16 Explanation For 1, the closest number in the sequence is 2^0 = 1. For 5, the closest numbers in the sequence are 2^2 = 4 and 2^3 = 8. The smallest of these is 4. For 20, the closest numbers in the sequence are 2^4 = 16 and 2^5 = 32. The smallest of these is 16.","solution":"def closest_power_of_two(n): Returns the closest power of two to the given number n. If there are two numbers equally close, returns the smaller one. if n <= 1: return 1 lower = 1 while lower * 2 <= n: lower *= 2 upper = lower * 2 if n - lower <= upper - n: return lower else: return upper def find_closest_powers_of_two(numbers): For each number in numbers, finds the closest power of two. return [closest_power_of_two(n) for n in numbers] # Entry point for the solution def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) numbers = list(map(int, data[1:T + 1])) results = find_closest_powers_of_two(numbers) for result in results: print(result)"},{"question":"You are given a matrix of integers. Your task is to rotate this matrix 90 degrees clockwise. Constraints - The matrix will be a square matrix with dimensions n times n. - 1 leq n leq 10^2 - Each element in the matrix is an integer. Input The first line contains the integer n, the size of the matrix. The next n lines each contain n space-separated integers representing the elements of the matrix. Output Print the rotated matrix, where each line contains n space-separated integers. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3 Input 2 10 20 30 40 Output 30 10 40 20","solution":"def rotate_matrix(matrix): Rotates a square matrix 90 degrees clockwise. Args: - matrix (list of list of int): The square matrix to be rotated. Returns: - list of list of int: The rotated matrix. n = len(matrix) # Create an empty matrix of the same dimensions rotated = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n-1-i] = matrix[i][j] return rotated"},{"question":"You are given a binary tree. For each node of the tree, find and note down the sum of values of all nodes forming the subtree rooted at that node. For example, consider the binary tree below: ``` 1 / 2 3 / 4 5 ``` The sums of the subtrees for each node are: - Node 1: 1 + 2 + 3 + 4 + 5 = 15 - Node 2: 2 + 4 + 5 = 11 - Node 3: 3 - Node 4: 4 - Node 5: 5 Thus, the output should be `15 11 3 4 5`. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of nodes in the binary tree. The next n lines contain two integers u and v each, indicating that there is an edge between nodes u and v in the binary tree. Output Output n integers where the i-th integer is the sum of the subtree rooted at the i-th node, in the order of the nodes’ values. Example Input 5 1 2 1 3 2 4 2 5 Output 15 11 3 4 5 Note In the provided example, the binary tree can be visualized as: ``` 1 / 2 3 / 4 5 ``` The sums of the subtrees for each node are calculated based on the values of the nodes forming the subtree with the respective node as the root.","solution":"def subtree_sums(n, edges): from collections import defaultdict tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) subtree_sum = [0] * (n + 1) visited = [False] * (n + 1) def dfs(node): visited[node] = True total_sum = node for neighbor in tree[node]: if not visited[neighbor]: total_sum += dfs(neighbor) subtree_sum[node] = total_sum return total_sum dfs(1) return subtree_sum[1:] # Simple wrapper to parse the input in the required format def process_input_and_solve(n, edges): return subtree_sums(n, edges)"},{"question":"Petya\'s friend Vasya decided to challenge Petya by extending the previous task. This time, Petya needs to consider not only Latin letters but also digits. The program should perform the following operations on the given string: - For all vowels and digits, remove them from the string. - For all consonants, insert a character \\".\\" before each one. - Replace all uppercase consonants with corresponding lowercase ones. Vowels are still \\"A\\", \\"O\\", \\"Y\\", \\"E\\", \\"U\\", \\"I\\", and the rest are consonants. The digits are from \\"0\\" to \\"9\\". The program\'s input is exactly one string, and it should return the output as a single string, resulting after the program processes the initial string. Input The first line represents the input string of Petya\'s program. This string only consists of uppercase and lowercase Latin letters and digits, and its length is from 1 to 100, inclusive. Output Print the resulting string. It is guaranteed that this string is not empty. Examples Input t0u1r Output .t.r Input Codeforc3s2021 Output .c.d.f.r.c.s Input aBAcAba7 Output .b.c.b","solution":"def process_string(s): Process the input string s according to the specified rules: - Remove all vowels and digits. - Insert a character \\".\\" before each remaining consonant. - Replace all uppercase consonants with corresponding lowercase ones. vowels = set(\\"aoyeuiAOYEUI\\") result = \\"\\" for char in s: if char.isdigit() or char in vowels: continue if char.isalpha() and char not in vowels: result += \'.\' + char.lower() return result"},{"question":"You are given a string s containing characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and need to determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. 3. Every close bracket must have a corresponding open bracket of the same type preceding it. Write a function: ```python def is_valid_parentheses(s: str) -> bool: ``` This function should return true if the string is valid, and false otherwise. Example 1: Input: ``` s = \\"()\\" ``` Output: ``` True ``` Example 2: Input: ``` s = \\"()[]{}\\" ``` Output: ``` True ``` Example 3: Input: ``` s = \\"(]\\" ``` Output: ``` False ``` Example 4: Input: ``` s = \\"([)]\\" ``` Output: ``` False ``` Constraints: * 1 <= s.length <= 104 * s consists of parentheses only \'()[]{}\'.","solution":"def is_valid_parentheses(s: str) -> bool: stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"You are given a string that contains a sequence of operations involving capital letters \'A\', \'B\', and \'C\': - \'A\' appends the integer 1 to the end of a list. - \'B\' appends the integer 2 to the end of a list. - \'C\' appends the integer 3 to the end of a list. - Any other character should be ignored. After processing all operations in the sequence, your task is to determine the total sum of the integers in the list. Input The input will consist of a single line \\"s\\" which will give the sequence of operations. String \\"s\\" will contain between 1 and 100 characters, inclusive. ASCII-code of each character of s will be between 33 (exclamation mark) and 126 (tilde), inclusive. Output Output a single integer which is the sum of all integers appended to the list by the end of processing the operation sequence. Examples Input AAABC Output 6 Input xyzAzyBzyC Output 6 Note In the first example the sequence \\"AAABC\\" appends 1, 1, 1, 2, and 3 to the list. The total sum is 1 + 1 + 1 + 2 + 3 = 8. In the second example the sequence \\"xyzAzyBzyC\\" also results in appending 1, 2, and 3 to the list, making the total sum 6.","solution":"def process_operations(s): Processes the input sequence of operations and returns the total sum of integers in the list. A -> appends 1 B -> appends 2 C -> appends 3 Any other character is ignored. Args: s (str): Input string with operations. Returns: int: Total sum of integers in the list after processing all operations. operation_map = {\'A\': 1, \'B\': 2, \'C\': 3} total_sum = 0 for char in s: if char in operation_map: total_sum += operation_map[char] return total_sum"},{"question":"You have a row of houses arranged in a straight line, each house having a certain amount of money stashed. However, you cannot rob two adjacent houses due to the security system in place that will automatically alert the police if two adjacent houses were broken into on the same night. Write a function to determine the maximum amount of money you can rob tonight without alerting the police. You will be given an integer array `houses` representing the amount of money stashed in each house. Your function should return the maximum amount of money you can rob. Input: First line contains number of test cases. For each test case, the next line contains an integer n representing the number of houses and an array of n integers where each integer represents the amount of money stashed in the respective house. Output: For each test case, print the maximum amount of money you can rob without alerting the police. SAMPLE INPUT 2 4 1 2 3 1 5 2 7 9 3 1 SAMPLE OUTPUT 4 12 Explanation Testcase 1: There are four houses with the following amounts of money: [1,2,3,1] - The maximum amount of money you can rob is obtained by robbing house 1 (money = 1) and house 3 (money = 3) for a total of 1 + 3 = 4. Testcase 2: There are five houses with the following amounts of money: [2,7,9,3,1] - The maximum amount of money you can rob is obtained by robbing house 2 (money = 7) and house 4 (money = 3) for a total of 7 + 3 = 10. However, a better solution is to rob house 2 (money = 7) and house 3 (money = 9) for a total of 7 + 9 = 16.","solution":"def rob(houses): Returns the maximum amount of money you can rob without alerting the police. prev1 = prev2 = 0 for money in houses: temp = prev1 prev1 = max(prev2 + money, prev1) prev2 = temp return prev1 def max_robbery(test_cases): results = [] for case in test_cases: n, houses = case results.append(rob(houses)) return results # Parsing the input def parse_input(input_data): lines = input_data.split() t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) houses = list(map(int, lines[index + 1:index + 1 + n])) test_cases.append((n, houses)) index += (n + 1) return test_cases # Function to parse the input and get the results in the required format def solve(input_data): test_cases = parse_input(input_data) results = max_robbery(test_cases) for result in results: print(result)"},{"question":"A company wants to implement a system to manage and process shifts for their employees. Each shift is represented by a string `shift` composed of alphabetic characters where each character can be \'O\' (On-duty) or \'F\' (Off-duty). The company needs to answer multiple queries about possible shifts. Each query contains three strings - `current_shift`, `required_shift` and `day_shift`. The task is to determine if `day_shift` can be generated by performing a cyclic permutation of `current_shift` and replacing a subsequence with `required_shift`. A cyclic permutation shifts characters around but keeps their order. For example, \\"OFO\\" can be cyclically permuted to \\"FOO\\" or \\"OOF\\". A subsequence is a series of characters that appear in the same order in the original string but do not need to be contiguous. For example, \\"FOF\\" has subsequences \\"F\\", \\"O\\", \\"FO\\", \\"FF\\". Assume: - Strings only contain \'O\' and \'F\' - `current_shift` and `required_shift` are guaranteed to be the same length Your task is to write a function that processes these queries and returns \\"Yes\\" if `day_shift` can be obtained through the process described, otherwise \\"No\\". Input: - An integer `N` representing the number of queries. - For each query, three strings `current_shift`, `required_shift` and `day_shift`. Output: - For each query, output \\"Yes\\" if `day_shift` can be obtained as described, otherwise \\"No\\". Constraints: 1 ≤ N ≤ 1000 1 ≤ |current_shift|, |required_shift| ≤ 100 SAMPLE INPUT: 3 OFOF OFOF OFOF FOOOFF OOFOFO FOFOFO OFFFOO FFOOOF OFFFFO SAMPLE OUTPUT: Yes No No Explanation: For the 1st query, `current_shift` \\"OFOF\\" is already the same as `required_shift`, so no permutation is needed. For the 2nd query, `FOOOFF` cannot be generated by any cyclic permutation of \\"FOOFOF\\" replacing a subsequence with \\"OOFOFO\\". For the 3rd query, no cyclic permutation of \\"OFFFOO\\" replacing a subsequence with \\"FFOOOF\\" can result in \\"OFFFOO\\".","solution":"def can_generate_day_shift(current_shift, required_shift, day_shift): Checks if the day_shift can be generated from cyclic permutation of current_shift and a substitution of a subsequence with required_shift. n = len(current_shift) double_current_shift = current_shift * 2 for i in range(n): cyclic_shift = double_current_shift[i:i + n] if is_subsequence_replaceable(cyclic_shift, required_shift, day_shift): return \\"Yes\\" return \\"No\\" def is_subsequence_replaceable(cyclic_shift, required_shift, day_shift): Checks if day_shift can be obtained by replacing a subsequence in cyclic_shift with required_shift. len_cs = len(cyclic_shift) len_rs = len(required_shift) assert len_cs == len_rs # Check every position in cyclic_shift if we can replace a subsequence for i in range(len_cs): if cyclic_shift[i] == required_shift[0]: remaining_day_shift = day_shift.replace(required_shift, \\"\\", 1) k = 0 # Check if the remaining part matches for j in range(len_cs): if j != i and cyclic_shift[j] == remaining_day_shift[k]: k += 1 if k == len(remaining_day_shift): return True return False def process_shift_queries(queries): results = [] for current_shift, required_shift, day_shift in queries: results.append(can_generate_day_shift(current_shift, required_shift, day_shift)) return results"},{"question":"A programming contest is being held, and you are tasked with writing a program that verifies whether a sequence of sessions can be scheduled without any conflicts. Each session has a start and end time. The primary goal of the task is to test your ability to manipulate and sort sequences and to determine whether they overlap. Given a list of sessions, each defined by a start and end time, check if it\'s possible to attend all sessions without any overlap. Input: The first line contains a single integer n (1 ≤ n ≤ 100) — the number of sessions. Each of the next n lines contains two integers, representing the start and end times of a session. The start and end times are given in 24-hour format (0 ≤ start < end ≤ 23). Output: Print “YES” (without the quotes) if it is possible to attend all sessions without overlap. If there is any overlap, print “NO” (without the quotes). Examples Input: 3 1 4 5 8 9 11 Output: YES Input: 3 1 4 3 5 5 7 Output: NO Input: 4 2 4 4 6 6 8 8 10 Output: YES","solution":"def can_attend_all_sessions(n, sessions): Determines if it is possible to attend all sessions without overlap. :param n: Number of sessions :param sessions: List of tuples containing start and end times of each session :return: \\"YES\\" if it is possible to attend all sessions without overlap, otherwise \\"NO\\" # Sort the sessions by start time sessions.sort(key=lambda session: session[0]) # Check for overlaps for i in range(1, n): if sessions[i][0] < sessions[i - 1][1]: return \\"NO\\" return \\"YES\\""},{"question":"Imagine you are working on an application that needs to manage and analyze a growing collection of documents. Each document is represented as a string of text. You need to implement a feature that tracks the frequency of occurrence of specific keywords within the documents. You are given n documents and m keywords. For each keyword, you need to count how many times it appears in each of the documents. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^3) — the number of documents and the number of keywords. The next n lines contain one document each, represented by a string of at most 10^5 characters. The following m lines contain one keyword each, represented by a string of at most 100 characters. Output Print an m x n matrix, where the element in the i-th row and j-th column represents the number of times the i-th keyword appears in the j-th document. Examples Input 3 2 hello world world of code programming in python world code Output 1 1 0 0 1 0","solution":"def keyword_frequency(n, m, documents, keywords): Counts the frequency of occurrence of specific keywords in each document. Args: n: int : number of documents m: int : number of keywords documents : list of strings keywords : list of strings Returns: list of lists : m x n matrix of keyword frequencies in documents result = [] for keyword in keywords: keyword_count = [] for document in documents: # Count occurrences of the keyword in the document keyword_count.append(document.split().count(keyword)) result.append(keyword_count) return result"},{"question":"Given a string S of length N, you are asked to find the length of the longest subsequence that repeats itself twice (non-overlapping). The subsequence should follow these conditions: 1. The two occurrences of the subsequence should not overlap. 2. The order of characters in the subsequence should be maintained. For instance, for the string \\"banana\\", \\"ana\\" is a subsequence because \\"ana\\" appears twice non-overlappingly (one starts at index 1 and another at index 3). Write a function that takes an integer N and a string S and computes the length of the longest repeated subsequence that satisfies the given conditions. Constraints: * 1 ≤ N ≤ 1000 * S contains only lowercase English letters (a-z). Input The input consists of two lines: The first line contains an integer N, the length of the string S. The second line contains the string S of length N. Output Print a single integer representing the length of the longest non-overlapping repeated subsequence. Examples Input 6 banana Output 3 Input 4 abcd Output 0 Input 7 abcbabc Output 3","solution":"def longest_repeated_subsequence(n, s): Returns the length of the longest subsequence that repeats itself twice non-overlapping in the string s. # Create a 2D DP array of size (n+1) x (n+1) dp = [[0] * (n + 1) for _ in range(n + 1)] # Fill the dp array for i in range(1, n + 1): for j in range(1, n + 1): if s[i - 1] == s[j - 1] and i != j: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][n]"},{"question":"You are given an array of integers where each integer appears exactly twice, except for one integer which appears only once. Find the integer that appears only once. Input: The first line of each test file contains an integer t denoting the number of test cases. Each test case consists of two lines. The first line contains an integer n representing the number of elements in the array. The second line contains n integers separated by space. Output: For each test case, output the single integer that appears only once in the array. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 10^5 It is guaranteed that there is one element that appears exactly once and all other elements appear exactly twice. SAMPLE INPUT 2 5 1 2 3 2 1 7 4 4 5 6 6 5 7 SAMPLE OUTPUT 3 7","solution":"def find_single_number(arr): Returns the element that appears only once in the array where each element appears exactly twice except for one. result = 0 for num in arr: result ^= num return result def process_test_cases(t, test_cases): results = [] for case in test_cases: n, arr = case results.append(find_single_number(arr)) return results"},{"question":"A matrix of integers is given. Each element can either be 0 or 1. You need to calculate the number of distinct islands present in the matrix. An island is a group of adjacent 1s that are connected vertically or horizontally (not diagonally). Input The first line contains two integers N (1 ≤ N ≤ 50) and M (1 ≤ M ≤ 50), separated by a single space. N is the number of rows and M is the number of columns in the matrix. The following N lines each contain M integers (either 0 or 1), separated by spaces, representing the matrix. Output Output a single integer denoting the number of distinct islands in the matrix. Example Input 4 5 1 1 0 0 0 0 1 0 0 1 1 0 0 1 1 0 0 0 0 0 Output 3 Input 3 3 1 1 0 0 0 0 1 1 1 Output 2","solution":"def count_islands(matrix): Returns the number of distinct islands in the given matrix. An island is a group of adjacent 1s that are connected vertically or horizontally. def dfs(x, y): if x < 0 or y < 0 or x >= N or y >= M or matrix[x][y] != 1: return matrix[x][y] = -1 # Mark the cell as visited # Explore all adjacent cells (vertically and horizontally) dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) N = len(matrix) M = len(matrix[0]) island_count = 0 for i in range(N): for j in range(M): if matrix[i][j] == 1: dfs(i, j) island_count += 1 return island_count"},{"question":"Petya has received a list of integers as a gift for his birthday. He wants to rearrange the list such that the difference between any two consecutive integers in the list is as small as possible. Petya can perform up to `k` swaps to achieve this arrangement. A swap is defined as exchanging the positions of any two integers in the list. Write a program to help Petya achieve the desired rearranged list. Input The first line contains an integer `n` (1 ≤ n ≤ 100), the length of the list. The second line contains `n` integers, which are the elements of the list. The third line contains an integer `k` (0 ≤ k ≤ 10), representing the maximum number of swaps allowed. Output Print the rearranged list of integers such that the difference between any two consecutive integers is minimized. Examples Input 5 4 3 2 1 5 1 Output 1 2 3 4 5 Input 3 10 20 30 2 Output 10 20 30","solution":"def minimize_consecutive_differences(n, arr, k): Rearranges the list such that the difference between any two consecutive integers in the list is as small as possible by performing up to `k` swaps. Parameters: n (int): the length of the list arr (list): the list of integers k (int): the maximum number of swaps allowed Returns: list: the rearranged list # Sorting the array will guarantee minimal differences between consecutive elements sorted_arr = sorted(arr) return sorted_arr"},{"question":"Alice is a computer science student who loves puzzles. She recently came across a problem that involves analyzing a sequence of integers. Given a sequence, Alice wants to transform it into another sequence where each element is a sum of all the elements before it, in the same order. She needs your help to write a function that performs this transformation. Specifically, given an array of integers, the function should return a new array such that each element at index i of the new array is the sum of elements from index 0 to i (inclusive) of the original array. Write a function `transform_sequence(sequence)` that takes a list of integers as input and returns the transformed list. Function Signature: ```python def transform_sequence(sequence: List[int]) -> List[int]: ``` **Input:** - An integer T, the number of test cases. - For each test case, the first line contains an integer N, the size of the sequence. - The second line contains N integers separated by spaces, representing the sequence. **Output:** - For each test case, output the transformed sequence as a single line of space-separated integers. **Constraints:** 1. 1 ≤ T ≤ 100 2. 1 ≤ N ≤ 10^6 3. -10^9 ≤ sequence[i] ≤ 10^9 for each valid i **Example:** Input: ``` 2 5 1 2 3 4 5 3 10 20 30 ``` Output: ``` 1 3 6 10 15 10 30 60 ``` Explanation: - For the first test case, the sum step by step is [1], [1+2=3], [3+3=6], [6+4=10], [10+5=15]. - For the second test case, the sum step by step is [10], [10+20=30], [30+30=60].","solution":"from typing import List def transform_sequence(sequence: List[int]) -> List[int]: Returns a transformed list where each element at index i is the sum of elements from index 0 to i of the original sequence. transformed = [] current_sum = 0 for num in sequence: current_sum += num transformed.append(current_sum) return transformed"},{"question":"You are given a list of n integers, where each integer represents the height of a building. Your task is to determine the minimum visibility height for new buildings that would need to be added to the front (left side) of the list, such that no building is completely obscured by the buildings before it. A building is considered completely obscured if there is a building in front of it with a greater or equal height. Input The first line contains one integer n (1 ≤ n ≤ 200000) — the number of buildings in the list. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100000) — the heights of the buildings. Output Print one integer — the minimum height of new buildings that would need to be added to the front such that no existing building in the list is completely obscured by the buildings in front of it. Examples Input 5 3 1 4 2 5 Output 6 Input 3 2 2 3 Output 4 Note In the first example, if a new building of height 6 is added to the front, the visibility condition for all existing buildings is met. In the second example, adding a building of height 4 at the front ensures no building is completely obscured.","solution":"def min_visibility_height(n, heights): Determines the minimum visibility height for new buildings that need to be added to the front such that no building is completely obscured. :param n: int - Number of buildings in the list :param heights: list of int - Heights of the buildings :return: int - Minimum height of new buildings to be added max_height = max(heights) return max_height + 1"},{"question":"You are working on a filesystem that reads logs from different servers to detect when specific critical events occur. Each log entry consists of a timestamp and a message. The logs are provided from multiple servers, and therefore, they are not in order. Your task is to write a function that processes these logs and identifies the first occurrence of a specific critical event type based on the timestamp. # Input The function will receive the following inputs: 1. `logs` - A list of dictionaries, each containing: - `timestamp` (string, format `YYYY-MM-DDTHH:MM:SS`) - `server` (string) - `message` (string) 2. `event_type` - A string that specifies the event type you need to search for in the message field of each log entry. # Output The function should return a dictionary with the following keys: - `timestamp` - The timestamp of the first occurrence of the critical event. - `server` - The server from which the critical event log originated. - `message` - The message of the first occurrence of the critical event. If the event type is not found in any of the logs, return `None`. # Example Input ```json logs = [ {\\"timestamp\\": \\"2023-10-01T12:01:00\\", \\"server\\": \\"server_1\\", \\"message\\": \\"Normal operation started.\\"}, {\\"timestamp\\": \\"2023-10-01T12:04:00\\", \\"server\\": \\"server_2\\", \\"message\\": \\"Critical event occurred.\\"}, {\\"timestamp\\": \\"2023-10-01T12:02:00\\", \\"server\\": \\"server_3\\", \\"message\\": \\"Normal operation started.\\"}, {\\"timestamp\\": \\"2023-10-01T12:03:00\\", \\"server\\": \\"server_1\\", \\"message\\": \\"Critical event occurred.\\"} ] event_type = \\"Critical event\\" ``` Output ```json { \\"timestamp\\": \\"2023-10-01T12:03:00\\", \\"server\\": \\"server_1\\", \\"message\\": \\"Critical event occurred.\\" } ``` Input ```json logs = [ {\\"timestamp\\": \\"2023-10-01T12:01:00\\", \\"server\\": \\"server_1\\", \\"message\\": \\"Normal operation started.\\"}, {\\"timestamp\\": \\"2023-10-01T12:04:00\\", \\"server\\": \\"server_2\\", \\"message\\": \\"Routine maintenance.\\"}, {\\"timestamp\\": \\"2023-10-01T12:02:00\\", \\"server\\": \\"server_3\\", \\"message\\": \\"Normal operation started.\\"}, {\\"timestamp\\": \\"2023-10-01T12:03:00\\", \\"server\\": \\"server_1\\", \\"message\\": \\"Routine maintenance completed.\\"} ] event_type = \\"Critical event\\" ``` Output ```json None ``` # Constraints - The timestamps are given in ISO 8601 format: `YYYY-MM-DDTHH:MM:SS`. - All `timestamp` values are unique. - The `event_type` string occurs as a substring in the `message`. - The input `logs` list will contain between 1 to 10^5 log entries.","solution":"from datetime import datetime def find_first_critical_event(logs, event_type): first_occurrence = None for log in logs: if event_type in log[\'message\']: log_time = datetime.fromisoformat(log[\'timestamp\']) if first_occurrence is None or log_time < first_occurrence[\'timestamp\']: first_occurrence = { \'timestamp\': log_time, \'server\': log[\'server\'], \'message\': log[\'message\'] } if first_occurrence: first_occurrence[\'timestamp\'] = first_occurrence[\'timestamp\'].isoformat() return first_occurrence"},{"question":"You are given a sequence of integers where each integer appears exactly twice except for one integer that appears only once. Your task is to find the integer that appears only once. The sequence of integers is provided in a single line of input. Input: The first line contains an integer n (1 ≤ n ≤ 105), the length of the sequence. The second line contains n space-separated integers ai (1 ≤ ai ≤ 106). Output: Print the integer that appears only once. Examples Input 5 1 2 3 2 1 Output 3 Input 7 4 1 2 1 2 4 5 Output 5 Note: Your solution should have a time complexity of O(n) and use constant extra space.","solution":"def find_single_integer(n, nums): Find the integer that appears only once in the list. All other integers appear exactly twice. result = 0 for num in nums: result ^= num return result"},{"question":"You are given a list of strings representing tasks that have been performed sequentially. Some of the tasks might overlap and some of them might not. Each task is represented by a string containing two space-separated integers: the starting time and the ending time of the task. Your job is to find the maximum number of non-overlapping tasks that can be performed. Input - First line of the input contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of tasks. - Each of the following N lines contains two space-separated integers, Si and Ei representing the start and end times of the tasks. Output - For each test case, print the maximum number of non-overlapping tasks that can be performed. Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ Si, Ei ≤ 10^9 SAMPLE INPUT 1 3 1 3 2 4 3 5 SAMPLE OUTPUT 2 Explanation In the first test case, the tasks (1, 3) and (3, 5) do not overlap and hence can be performed simultaneously. Therefore, the maximum number of tasks that can be performed is 2.","solution":"def max_non_overlapping_tasks(tasks): This function takes a list of tasks (each represented as a tuple of (start, end)) and returns the maximum number of non-overlapping tasks that can be performed. # Sort tasks by end time tasks.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end return count def process_input(test_cases): results = [] for tasks in test_cases: results.append(max_non_overlapping_tasks(tasks)) return results"},{"question":"You are given an array of integers. Your goal is to form a new array by performing the following operation any number of times on the given array: select two adjacent elements, remove them, and insert their sum in their place. You can perform this operation as many times as you like until only one element remains in the array. Ultimately, you need to determine the smallest possible value of the remaining element. Input The first line contains a single integer t (1 ≤ t ≤ 100) – the number of test cases. Each test case is represented by two lines. The first line of i-th test case contains one integer n (2 ≤ n ≤ 100) – the length of the array. The second line of i-th test case contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) – the elements of the array. Output For each test case print one line. For i-th test case, print the smallest possible value of the remaining element. Example Input 3 5 1 2 3 4 5 3 8 1 4 4 9 2 9 4 Output 15 13 24 Note In the first test case, one of the ways to achieve the smallest possible value of 15 is the following sequence of operations: 1 2 3 4 5 → 3 3 4 5 → 6 4 5 → 10 5 → 15 In the second test case, one of the ways to achieve the smallest possible value of 13 is the following sequence of operations: 8 1 4 → 9 4 → 13 In the third test case, one of the ways to achieve the smallest possible value of 24 is the following sequence of operations: 9 2 9 4 → 11 9 4 → 20 4 → 24","solution":"def smallest_possible_element(t, test_cases): Given multiple test cases, returns the smallest possible value of the remaining element after performing the defined operation on each array. results = [] for test_case in test_cases: n, arr = test_case # The smallest possible value after merging all elements is just the sum of all elements # This follows directly from the problem description and examples. results.append(sum(arr)) return results"},{"question":"As an engineer, you are tasked with the design and analysis of a waste treatment plant for a small town. The plant consists of various treatment stations connected by pipes. Each station has a capacity limit, and the pipes indicate the possible flow of waste between these stations. The goal is to determine the maximum amount of waste that can be treated by the plant from the main waste inlet to the final treatment station. The waste treatment plant is represented as a directed graph where each node represents a treatment station, and each edge represents a pipe with a capacity limit. The main inlet is node `0`, and the final treatment station is node `N-1` (where N is the total number of nodes). You need to write a program that receives the description of the treatment plant and outputs the maximum flow of waste possible from the main inlet to the final treatment station. # Input - The first line contains two integers, `N` (2 ≤ N ≤ 100) which represents the number of stations (nodes) and `E` (1 ≤ E ≤ 5000) which represents the number of pipes (edges). - The next `E` lines each contain three integers `u`, `v`, and `c`, indicating there is a pipe from station `u` to station `v` with capacity `c` (1 ≤ c ≤ 1000). # Output - The output should consist of a single integer: the maximum amount of waste that can flow from station `0` to station `N-1`. # Example Input ``` 4 5 0 1 100 0 2 100 1 2 1 1 3 100 2 3 100 ``` Output ``` 200 ``` # Explanation In the example above, the network of stations and pipes can handle a maximum of 200 units of waste flowing from the main inlet (station 0) to the final treatment station (station 3). # Notes - Assume that there is at least one path from the main inlet to the final treatment station. - Each station can be connected to multiple other stations with different capacities. - You may use any well-known method to solve for the maximum flow, such as the Ford-Fulkerson method or the Edmonds-Karp algorithm.","solution":"from collections import deque, defaultdict def bfs_capacity(graph, start, end, parent): visited = [False] * len(graph) queue = deque([start]) visited[start] = True while queue: u = queue.popleft() for ind, val in enumerate(graph[u]): if not visited[ind] and val > 0: if ind == end: parent[ind] = u return True queue.append(ind) visited[ind] = True parent[ind] = u return False def edmonds_karp(graph, start, end): parent = [-1] * len(graph) max_flow = 0 while bfs_capacity(graph, start, end, parent): path_flow = float(\'Inf\') s = end while s != start: path_flow = min(path_flow, graph[parent[s]][s]) s = parent[s] max_flow += path_flow v = end while v != start: u = parent[v] graph[u][v] -= path_flow graph[v][u] += path_flow v = parent[v] return max_flow def max_waste_flow(N, E, edges): graph = [[0] * N for _ in range(N)] for u, v, c in edges: graph[u][v] += c return edmonds_karp(graph, 0, N - 1)"},{"question":"Lucy has a collection of n paintings, each with a viewing score described by an integer ai. She wants to organize m exhibitions, where each exhibition is specified by a pair of indices li and ri, representing the range of paintings to be included. For each exhibition, she wants to find the sum of viewing scores of the top k paintings from the range [li, ri]. Input The first line of the input contains three integers n, m, and k (1 ≤ n, m ≤ 100 000, 1 ≤ k ≤ n) — the number of paintings, the number of exhibitions, and the number of top paintings for each exhibition. The second line contains n integers ai (0 ≤ ai ≤ 1 000 000) — the viewing scores of the paintings. Then m lines follow. The i-th line contains two integers li and ri (1 ≤ li ≤ ri ≤ n) — the range of paintings for the i-th exhibition. Output Print m lines, each line containing one integer, which is the sum of the viewing scores of the top k paintings for the corresponding exhibition. Examples Input 6 2 3 5 3 8 7 2 4 1 6 2 5 Output 20 18 Input 5 3 2 10 20 30 40 50 1 3 2 4 1 5 Output 50 70 90 Note In the first sample, for the first exhibition including paintings from 1 to 6, the top 3 viewing scores are 8, 7, and 5. Their sum is 20. For the second exhibition including paintings from 2 to 5, the top 3 viewing scores are 8, 7, and 3. Their sum is 18. In the second sample, for the first exhibition including paintings from 1 to 3, the top 2 viewing scores are 30 and 20. Their sum is 50. For the second exhibition including paintings from 2 to 4, the top 2 viewing scores are 40 and 30. Their sum is 70. For the third exhibition including paintings from 1 to 5, the top 2 viewing scores are 50 and 40. Their sum is 90.","solution":"def top_k_sum_of_exhibition_scores(n, m, k, scores, exhibitions): results = [] for l, r in exhibitions: # Get the sublist for the current exhibition range and sort it sublist = scores[l - 1:r] sublist.sort(reverse=True) # Calculate the sum of the top k elements top_k_sum = sum(sublist[:k]) results.append(top_k_sum) return results"},{"question":"A triplet in an array is defined as a sequence of three elements (a[i], a[j], a[k]) such that a[i] < a[j] < a[k] and i < j < k. Given an array of distinct integers, your task is to determine the number of such triplets in the array. INPUT The first line contains a single integer n, the number of elements in the array. The second line contains n distinct integers separated by spaces. OUTPUT Output a single integer, the number of triplets in the array that satisfy the given condition. CONSTRAINTS 1 ≤ n ≤ 1000 -10^6 ≤ a[i] ≤ 10^6 SAMPLE INPUT 7 4 7 1 9 3 10 5 SAMPLE OUTPUT 7","solution":"def count_triplets(arr): n = len(arr) if n < 3: return 0 count = 0 for i in range(n): for j in range(i+1, n): for k in range(j+1, n): if arr[i] < arr[j] < arr[k]: count += 1 return count def count_triplets_from_input(n, elements): arr = list(map(int, elements.split())) return count_triplets(arr)"},{"question":"Bob is hosting a coding competition and he has distributed numbered badges to all the participants. Each participant has a badge number that is a non-negative integer. After the competition, Bob wants to give awards to participants based on the sum of the digits of their badge number. However, he wants to know which participant(s) can form the highest sum of digit(s) from their badge numbers. Given the list of participants\' badge numbers, determine the highest sum of the digits of the badge numbers and identify how many participants have this highest sum. Input The first line contains an integer n (1 ≤ n ≤ 50), the number of participants. The second line contains n non-negative integers representing the badge numbers of the participants. Each badge number is between 0 and 10^8 (inclusive). Output Print two integers: the highest sum of the digits of any badge number, followed by the number of participants who have this highest sum. Examples Input 5 123 456 789 88 99 Output 24 1 Input 3 12 34 56 Output 6 1 Note In the first example, the badge numbers 123, 456, 789, 88, and 99 have digit sums of 6, 15, 24, 16, and 18 respectively. The highest sum is 24, and it is achieved by only 1 participant with badge number 789. In the second example, the badge numbers 12, 34, and 56 have digit sums of 3, 7, and 11 respectively. The highest digit sum is 6, achieved by only 1 participant and his badge number is 56.","solution":"def highest_digit_sum_count(n, badge_numbers): This function takes in the number of participants and their badge numbers, then returns the highest digit sum and the number of participants having this highest sum. def digit_sum(num): return sum(int(digit) for digit in str(num)) max_sum = 0 count = 0 for number in badge_numbers: d_sum = digit_sum(number) if d_sum > max_sum: max_sum = d_sum count = 1 elif d_sum == max_sum: count += 1 return max_sum, count"},{"question":"You are given a list of n integers and a list of m queries. Each query consists of two integers l and r (1 ≤ l ≤ r ≤ n). For each query, calculate the sum of the integers from the l-th to the r-th position in the list (inclusive). Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of integers in the list. The next line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9), the elements of the list. The third line contains an integer m (1 ≤ m ≤ 10^5), the number of queries. The next m lines each contain two integers l and r (1 ≤ l ≤ r ≤ n), representing the range for each query. Output For each query, output the sum of the elements from the l-th to the r-th position in the list. Example Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Output 6 9 15","solution":"def prefix_sums(arr): Returns a list of prefix sums for the given array. prefix = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix[i] = prefix[i - 1] + arr[i - 1] return prefix def range_sum(arr, queries): For each query (l, r) calculate the sum of the elements from the l-th to the r-th position in the list (inclusive). prefix = prefix_sums(arr) results = [] for l, r in queries: results.append(prefix[r] - prefix[l - 1]) return results"},{"question":"A car manufacturer wants to track the fuel efficiency of their car models. They have data on the distance travelled (in kilometers) and the fuel used (in liters) for each car. You need to determine which car has the highest fuel efficiency and calculate its fuel efficiency. The fuel efficiency is measured in kilometers per liter (km/L). Input The first line contains an integer n (1 ≤ n ≤ 100), the number of car models. The next n lines each contain two integers d and f (1 ≤ d ≤ 10000, 1 ≤ f ≤ 10000), representing the distance travelled and the fuel used by each car model, respectively. Output The output should contain two numbers: the maximum fuel efficiency value among all car models and the 1-based index of the car model with that efficiency. If there are multiple cars with the same efficiency, return the car that appears first in the input. Examples Input 3 500 25 600 30 650 30 Output 21 3 Note In the example, the fuel efficiencies of the cars are: - Car 1: 500/25 = 20 km/L - Car 2: 600/30 = 20 km/L - Car 3: 650/30 = 21.67 km/L So, the car with the highest fuel efficiency is Car 3 with a fuel efficiency of 21.67 km/L.","solution":"def highest_fuel_efficiency(n, car_data): Determines the car with the highest fuel efficiency. Parameters: n (int): Number of car models. car_data (list of tuples): Each tuple contains (distance, fuel). Returns: tuple: Maximum fuel efficiency and the 1-based index of the car model. max_efficiency = 0 max_index = 0 for i in range(n): d, f = car_data[i] efficiency = d / f if efficiency > max_efficiency: max_efficiency = efficiency max_index = i + 1 return max_efficiency, max_index"},{"question":"**Exploration Drone Path Planning** You are tasked with developing a path planning algorithm for an exploration drone. The drone is placed on a grid field of size n × m and needs to collect data from specific target cells. The field is represented by grid coordinates where (1, 1) is the top-left corner and (n, m) is the bottom-right corner. The drone starts at the top-left corner (1, 1) and can move one step at a time to adjacent cells in four possible directions: left (L), right (R), up (U), or down (D). The drone has a mission to visit a certain number of target cells provided in a list of coordinates before returning to its starting point. Your goal is to determine the shortest path that enables the drone to visit all target cells and return to the start. If no such path exists, return -1. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the field. - The second line contains an integer t (1 ≤ t ≤ 10) — the number of target cells. - Each of the next t lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the coordinates of each target cell. - Note that the starting point (1, 1) is not provided as a target. Output - Print a single integer — the length of the shortest path that visits all target cells and returns to the start, or -1 if no such path exists. Example Input 5 5 3 3 3 4 2 2 4 Output 12 Explanation In this scenario, the shortest path for the drone to visit all target points (3, 3), (4, 2), and (2, 4) and return to its starting point has a length of 12. The specific path could vary, but its length stays consistent as the optimal path.","solution":"from itertools import permutations from collections import deque def shortest_path(n, m, t, targets): Computes the shortest path that visits all target cells and returns to the start. Parameters: n (int): number of rows m (int): number of columns t (int): number of targets targets (list): list of target coordinates (tuples) Returns: int: length of the shortest path, or -1 if no such path exists def bfs(start, goal): Perform BFS to find the shortest path from start to goal. queue = deque([(start, 0)]) visited = set([start]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: (x, y), dist = queue.popleft() if (x, y) == goal: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 1 <= nx <= n and 1 <= ny <= m and (nx, ny) not in visited: visited.add((nx, ny)) queue.append(((nx, ny), dist + 1)) return float(\'inf\') start = (1, 1) targets = [start] + targets + [start] min_path_len = float(\'inf\') # Compute pairwise distances using BFS dist = {} for i in range(len(targets)): for j in range(i + 1, len(targets)): d = bfs(targets[i], targets[j]) dist[(targets[i], targets[j])] = d dist[(targets[j], targets[i])] = d # Check all permutations of the middle targets to find the minimum path for perm in permutations(targets[1:-1]): path_len = 0 curr = start for target in perm: path_len += dist[(curr, target)] curr = target path_len += dist[(curr, start)] min_path_len = min(min_path_len, path_len) return min_path_len if min_path_len < float(\'inf\') else -1"},{"question":"In a faraway tech-land, two teams of coders - The Even Coders and The Odd Coders - compete constantly to determine which team is superior. In each competition, coders from both teams face each other in pairs and their skills are tested based on their language proficiency scores. Each coder is identified by a unique number ranging from 0 to N-1. They compete against the coder of the opposing team with the same number. The rules are as follows: - Each coder has a score representing their skill in a particular programming language. - In each pair, the coder with the higher score wins and their team gains a point. - If both coders have the same score, then neither team gains a point. Ultimately, the team with the higher total points after all competitions is declared the winner. If both teams end up with the same total points, the match is considered a tie. Write a program to determine the winning team after each competition. Input: The first line consists of the number of competitions. For each competition, the input consists of three lines: - The first line consists of the number of coders in each team, n. - The second line consists of n integers representing the scores of coders in The Even Coders team. - The third line consists of n integers representing the scores of coders in The Odd Coders team. Output: Output the name of the winning team or print \\"Tie\\" (without quotes) if the competition is tied after all pairs have competed. Constraints: 1 ≤ t ≤ 10 1 ≤ n ≤ 10 1 ≤ score ≤ 100 Example Input: 1 5 23 45 67 89 12 34 67 45 12 89 Example Output: The Odd Coders","solution":"def determine_winner(t, competitions): results = [] for competition in competitions: n, even_coders, odd_coders = competition even_coders_points = 0 odd_coders_points = 0 for i in range(n): if even_coders[i] > odd_coders[i]: even_coders_points += 1 elif odd_coders[i] > even_coders[i]: odd_coders_points += 1 if even_coders_points > odd_coders_points: results.append(\\"The Even Coders\\") elif odd_coders_points > even_coders_points: results.append(\\"The Odd Coders\\") else: results.append(\\"Tie\\") return results # Example usage of the function t = 1 competitions = [ (5, [23, 45, 67, 89, 12], [34, 67, 45, 12, 89]) ] # Expect [\\"The Odd Coders\\"] print(determine_winner(t, competitions))"},{"question":"A robotics company is testing a new pathfinding algorithm for their autonomous robots. The robots move in a grid with M rows and N columns. Each cell in the grid can be empty or contain an obstacle. The robot can only move to an adjacent cell (vertically or horizontally) if that cell is empty. Given the starting position (sx, sy) and the ending position (ex, ey) of the robot, determine the shortest path the robot can take to reach the ending position. If it is not possible for the robot to reach the ending position, return -1. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers M and N denoting the number of rows and columns in the grid. The next M lines contain N space-separated integers (0 or 1), where 0 denotes an empty cell and 1 denotes an obstacle. The next line contains two space-separated integers sx and sy denoting the starting position of the robot. The final line contains two space-separated integers ex and ey denoting the ending position of the robot. Output For each test case, output a single line containing the length of the shortest path from the starting position to the ending position. If no such path exists, return -1. Constraints 1 ≤ T ≤ 10 1 ≤ M, N ≤ 1000 0 ≤ sx, sy, ex, ey < M, N Example Input: 1 5 5 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 4 4 Output: 8 Explanation Example case 1. The shortest path from (0, 0) to (4, 4) is as follows: (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) -> (2, 3) -> (2, 4) -> (3, 4) -> (4, 4). The length of the path is 8.","solution":"from collections import deque def shortest_path(grid, M, N, sx, sy, ex, ey): if not (0 <= sx < M and 0 <= sy < N and 0 <= ex < M and 0 <= ey < N): return -1 if grid[sx][sy] == 1 or grid[ex][ey] == 1: return -1 visited = [[False for _ in range(N)] for __ in range(M)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy, 0)]) visited[sx][sy] = True while queue: x, y, dist = queue.popleft() if x == ex and y == ey: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1 def solve_pathfinding_problem(T, test_cases): results = [] for i in range(T): M, N = test_cases[i][0], test_cases[i][1] grid = test_cases[i][2] sx, sy = test_cases[i][3] ex, ey = test_cases[i][4] results.append(shortest_path(grid, M, N, sx, sy, ex, ey)) return results # Reading input and calling the function to solve the problem def robot_pathfinding(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): M, N = map(int, input_lines[index].strip().split()) grid = [] for i in range(M): grid.append(list(map(int, input_lines[index + 1 + i].strip().split()))) sx, sy = map(int, input_lines[index + 1 + M].strip().split()) ex, ey = map(int, input_lines[index + 2 + M].strip().split()) test_cases.append((M, N, grid, (sx, sy), (ex, ey))) index += 3 + M results = solve_pathfinding_problem(T, test_cases) return \\"n\\".join(map(str, results))"},{"question":"Tom and Jerry are playing a game on a 2D grid of size M x N. Initially, Tom starts at the top left corner of the grid (0, 0) and Jerry starts at the bottom right corner (M-1, N-1). The game progresses in turns, with each player moving alternately. In each turn, Tom can move one step either to the right (i.e., from (i, j) to (i, j+1)) or downwards (i.e., from (i, j) to (i+1, j)), and Jerry can move one step either to the left (from (i, j) to (i, j-1)) or upwards (from (i, j) to (i-1, j)). Tom wins the game if he catches Jerry by landing on the same cell Jerry is on at any point of time, and Jerry wins if he manages to reach Tom\'s starting cell (0, 0) before getting caught by Tom. The grid may contain obstacles represented by `#`, and empty cells are represented by `.`. Neither Tom nor Jerry can move into a cell containing an obstacle. Given the initial configuration of the grid, determine who wins the game assuming both Tom and Jerry play optimally. If Tom can catch Jerry, print \\"Tom wins\\". If Jerry can reach Tom\'s starting cell without being caught, print \\"Jerry wins\\". It is guaranteed that the start and end cells are always empty (i.e., they do not contain obstacles). Input The first line contains two integers, M and N (2 ≤ M, N ≤ 50), the dimensions of the grid. Each of the next M lines contains a string of length N representing the grid, where `.` represents an empty cell and `#` represents an obstacle. Output Print \\"Tom wins\\" if Tom can catch Jerry, otherwise print \\"Jerry wins\\". Example Input 3 3 ... .#. .#. Output Tom wins Input 3 3 ..# .#. .#. Output Jerry wins Explanation In the first example, Tom can catch Jerry by moving down to (1,0) and then moving to (2,0), while Jerry is blocked by obstacles and cannot reach (0,0) without getting caught. In the second example, Jerry can move to (2,1), then (1,1) and finally reach (0,0) without getting caught by Tom.","solution":"from collections import deque def can_tom_win(grid, M, N): directions_tom = [(0, 1), (1, 0)] # right, down for Tom directions_jerry = [(0, -1), (-1, 0)] # left, up for Jerry start_tom = (0, 0) start_jerry = (M-1, N-1) # BFS to find shortest path distance for Tom and Jerry from their starts def bfs(start, directions): queue = deque([start]) visited = {start} distance = {start: 0} while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) distance[(nx, ny)] = distance[(x, y)] + 1 queue.append((nx, ny)) return distance dist_tom = bfs(start_tom, directions_tom) dist_jerry = bfs(start_jerry, directions_jerry) if (M-1, N-1) in dist_tom and dist_tom[(M-1, N-1)] <= dist_jerry.get((0, 0), float(\'inf\')): return \\"Tom wins\\" return \\"Jerry wins\\" def determine_winner(M, N, grid): return can_tom_win(grid, M, N)"},{"question":"You are given a list of n integers along with an integer k. Write a program to find all unique pairs of integers in the list that add up to k. Each pair should be printed in lexicographical order. Notes To solve this problem, you can use a two-pointer approach or a HashSet for efficient look-up and insertion operations. Given the constraints, ensure that your solution operates within a reasonable time complexity. For example, if we use a HashSet, we can iterate through each element in the list and check if (k - current element) exists in the HashSet. If it does, we have found a pair, otherwise, we add the current element to the HashSet. Constraints * n ≤ 1000 * -10^9 ≤ elements in the list ≤ 10^9 * -10^9 ≤ k ≤ 10^9 Input In the first line, an integer n is given. In the second line, n integers are given, representing the list. In the third line, the integer k is given. Output Print each pair in a new line. Each pair should be in the format (a, b) where a < b. Pairs should be printed in lexicographical order. If no pairs are found, do not print anything. Example Input 6 4 5 -1 2 3 -4 1 Output (-4, 5) (-1, 2) Input 5 7 7 7 7 7 14 Output (7, 7)","solution":"def find_pairs(nums, k): Finds all unique pairs of integers in the list that add up to k and returns them sorted in lexicographical order. nums = sorted(nums) seen = set() pairs = set() for num in nums: target = k - num if target in seen: pairs.add((min(num, target), max(num, target))) seen.add(num) return sorted(pairs) def main(): n = int(input().strip()) nums = list(map(int, input().strip().split())) k = int(input().strip()) pairs = find_pairs(nums, k) for pair in pairs: print(pair) # Example usage: # main()"},{"question":"Bizon the Champion loves puzzles and decided to solve another interesting problem. Bizon has a sequence of n integers. He wants to divide the sequence into the smallest number of non-overlapping subarrays such that each subarray has a length of exactly k and the sum of its elements is greater than or equal to a given threshold t. Help Bizon find the minimum number of subarrays that meet the criteria or determine that it\'s impossible. Input The first line contains three integers n, k, and t (1 ≤ k ≤ n ≤ 5000, 1 ≤ t ≤ 10^9) — the length of the sequence, the required length of each subarray, and the threshold for the sum of the elements in each subarray. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Output Print a single integer — the minimum number of subarrays needed to fulfill the condition, or print -1 if it\'s impossible to divide the sequence as required. Examples Input 8 3 15 5 4 6 7 8 9 3 2 Output 2 Input 6 2 20 4 15 3 7 9 6 Output -1 Input 10 5 50 10 11 12 13 14 15 16 17 18 19 Output 2 Note In the first sample, the sequence can be divided into two subarrays that meet the conditions: [5, 4, 6] (sum = 15) and [7, 8, 9] (sum = 24). In the second sample, it is impossible to divide the sequence into subarrays of length 2 such that the sum of the elements in any subarray is at least 20. In the third sample, the sequence can be divided into two subarrays: [10, 11, 12, 13, 14] (sum = 60) and [15, 16, 17, 18, 19] (sum = 85).","solution":"def min_subarrays(n, k, t, sequence): # Ensure we\'re not trying to form subarrays larger than the sequence if n < k: return -1 subarray_count = 0 i = 0 while i <= n - k: subarray_sum = sum(sequence[i:i + k]) if subarray_sum >= t: subarray_count += 1 i += k else: # If we cannot find sufficient sum in any k-length subarray, return -1 return -1 return subarray_count # Handling input format if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) k = int(data[1]) t = int(data[2]) sequence = list(map(int, data[3:])) result = min_subarrays(n, k, t, sequence) print(result)"},{"question":"The input contains two strings, s1 and s2, both consisting of lowercase English letters (1 ≤ |s1|, |s2| ≤ 1000). Output Output \\"YES\\" if it is possible to concatenate the strings in some way such that the resulting string is the same when read forwards and backwards. Otherwise, output \\"NO\\". Example Input ab ba Output YES Input abc def Output NO","solution":"def can_concatenate_palindrome(s1, s2): Returns \\"YES\\" if s1 and s2 can be concatenated in some way to form a palindrome, otherwise \\"NO\\". concatenation1 = s1 + s2 concatenation2 = s2 + s1 if concatenation1 == concatenation1[::-1] or concatenation2 == concatenation2[::-1]: return \\"YES\\" return \\"NO\\""},{"question":"Given a deck of n cards, each card has a unique integer identifier ranging from 1 to n. You are required to shuffle the deck in such a way that the sum of the absolute differences between adjacent cards in the deck is maximized. Specifically, if the shuffled deck is represented as an array a of length n, you need to maximize the value of ∑ |a[i] - a[i+1]| for all 1 ≤ i < n. Input: The input consists of a single integer n (1 ≤ n ≤ 10^5) – the number of cards in the deck. Output: Output the arrangement of the deck that maximizes the sum of absolute differences between adjacent cards. Example: Input: 4 Output: 1 4 2 3 Explanation: One possible shuffled deck is `1 4 2 3`. The sum of absolute differences is |1 - 4| + |4 - 2| + |2 - 3| = 3 + 2 + 1 = 6, which is the maximum possible for n=4. Input: 5 Output: 1 5 2 4 3 Explanation: One possible shuffled deck is `1 5 2 4 3`. The sum of absolute differences is |1 - 5| + |5 - 2| + |2 - 4| + |4 - 3| = 4 + 3 + 2 + 1 = 10, which is the maximum possible for n=5. Note: There are multiple correct outputs, as long as the arrangement follows the condition of having the maximum possible sum of absolute differences between adjacent cards.","solution":"def maximize_abs_diff(n): Generates a shuffled deck of n cards such that the sum of the absolute differences between adjacent cards is maximized. :param n: Integer, the number of cards in the deck. :return: List of integers representing the maximized shuffled deck. result = [] left, right = 1, n while left <= right: if left == right: result.append(left) else: result.append(left) result.append(right) left += 1 right -= 1 return result"},{"question":"You are given a binary tree with n nodes, where each node has a value from 1 to 100000. Your task is to find the number of unique values in all nodes of the tree when the tree is traversed using pre-order traversal. In a pre-order traversal, the nodes are recursively visited in this order: * Visit the root. * Traverse the left subtree. * Traverse the right subtree. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of nodes in the tree. The next line contains n integers, where the i-th integer represents the value of the i-th node. The following n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), which means there is an edge between node u and node v. Output Print a single integer — the number of unique values in the nodes of the tree when traversed in pre-order. Examples Input 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Output 5 Input 7 1 1 2 3 2 3 4 1 2 1 3 2 4 2 5 3 6 3 7 Output 4 Note In the first example, all the nodes have unique values, so the output is 5, as there are 5 unique values when traversed in pre-order. In the second example, the tree will be traversed in the following order: 1, 1, 2, 4, 5, 3, 6, 7. The unique values are {1, 2, 3, 4}, hence the output is 4.","solution":"def unique_values_in_preorder(n, node_values, edges): from collections import defaultdict, deque # Building the tree from the edge list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Pre-order traversal using DFS def preorder_traversal(root): stack = [root] visited = set() unique_values = set() while stack: node = stack.pop() if node not in visited: visited.add(node) unique_values.add(node_values[node-1]) # Add children to the stack (right to left to ensure left nodes are processed first) stack.extend(reversed(tree[node])) return unique_values unique_values = preorder_traversal(1) # Assuming node 1 is the root return len(unique_values)"},{"question":"In a mystical land, there is an ancient forest full of magical trees. Each magical tree has a number of fruit representing a certain amount of magic power. A wandering mage collects these fruits to enhance his spells. However, the mage can only collect fruits from consecutive trees in a single stroll through the forest, and there is a special requirement: the total magic power collected must be an odd number. You are given an array where each element represents the magic power of the fruits on a tree. Your task is to help the mage determine the maximum possible magic power he can collect in a single stroll through the forest such that the total magic power is odd. Input format: The first line contains n, the number of magical trees in the forest. The second line contains n integers separated by space, where the i-th integer denotes the magic power of the fruits on the i-th magical tree. Output format: Print the maximum magic power the mage can collect in a single stroll such that the total magic power is odd. If there is no possible way to collect an odd total magic power, print -1 instead. Constraints: 1 <= n <= 100 1 <= magic power on each tree <= 1000 Example: Input: 5 2 4 3 5 1 Output: 15 Explanation: The mage can collect fruits from the trees with magic powers 3, 5, and 1 to get the maximum odd total magic power of 15.","solution":"def max_odd_magic_power(n, magic_powers): Returns the maximum magic power that the mage can collect such that the total magic power is an odd number. Parameters: n (int): The number of magical trees in the forest. magic_powers (list): A list of integers representing the magic power of the fruits on each tree. Returns: int: Maximum odd total magic power or -1 if there\'s no such way to collect. max_odd_sum = -1 for i in range(n): current_sum = 0 for j in range(i, n): current_sum += magic_powers[j] if current_sum % 2 == 1: max_odd_sum = max(max_odd_sum, current_sum) return max_odd_sum"},{"question":"In a certain country, there are multiple districts, each represented by a node. Some pairs of districts are directly connected by bidirectional roads. Every district is part of exactly one of several provinces, and the districts within each province form a connected component, meaning there is a path between any two districts within the same province. You are given two tasks: 1. Determine the number of provinces. 2. Find out which districts belong to each province. Input The first line contains two integers n and m (1 ≤ n ≤ 200, 0 ≤ m ≤ 10^4), where n is the number of districts and m is the number of roads. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), meaning there is a road connecting districts u and v. Output In the first line, print the number of provinces. In the next lines, for each province, print the districts belonging to that province in any order. Each province\'s districts should be in a new line. Examples Input 5 3 1 2 3 4 4 5 Output 2 1 2 3 4 5 Input 4 2 1 2 3 4 Output 2 1 2 3 4 Note In the first example, there are 2 provinces: - Province 1 consists of districts 1 and 2. - Province 2 consists of districts 3, 4, and 5. In the second example, there are 2 provinces: - Province 1 consists of districts 1 and 2. - Province 2 consists of districts 3 and 4.","solution":"def find_provinces(n, m, roads): from collections import defaultdict, deque def bfs(start, visited, graph, province): queue = deque([start]) visited[start] = True province.append(start) while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True province.append(neighbor) queue.append(neighbor) graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) provinces = [] for i in range(1, n + 1): if not visited[i]: province = [] bfs(i, visited, graph, province) provinces.append(province) return len(provinces), provinces"},{"question":"**Given an array of n integers and a positive integer d, rotate the array to the right by d steps. Input** The first line of the input contains a single integer T representing the number of test cases that follow. For each test case: - The first line contains two space-separated integers n and d representing the number of elements in the array and the number of steps to rotate. - The second line contains n space-separated integers representing the elements of the array. Output** For each test case, output exactly one line containing the elements of the rotated array separated by a space. **Constraints** 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 1 ≤ d ≤ 10^5 0 ≤ array elements ≤ 10^9 **Example** **Input:** 2 5 2 1 2 3 4 5 7 3 10 20 30 40 50 60 70 **Output:** 4 5 1 2 3 50 60 70 10 20 30 40","solution":"def rotate_array_right_by_d_steps(test_cases): results = [] for n, d, arr in test_cases: d = d % n # Effective rotation rotated_arr = arr[-d:] + arr[:-d] results.append(rotated_arr) return results"},{"question":"Roopa has two strings A and B. She wants to count the number of subsequences in string A that are equal to string B. As this can be a lengthy computation, Roopa needs your help to determine the count efficiently. A subsequence of a string is a sequence that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. INPUT: The first line contains an integer T, the number of test cases. Each test case consists of two lines - the first line contains the string A, and the second line contains the string B. OUTPUT: For each test case, output the count of the subsequences in A that are equal to B. Since the answer can be large, output the result modulo 1000000007. CONSTRAINTS: 1 ≤ T ≤ 100 1 ≤ |A|, |B| ≤ 1000 A and B consist of lowercase English letters only. SAMPLE INPUT: 2 abc abc abcdabc abc SAMPLE OUTPUT: 1 4 Explanation: In the first test case, the only subsequence of \\"abc\\" that matches \\"abc\\" is the string \\"abc\\" itself. In the second test case, there are four subsequences of \\"abcdabc\\" that match \\"abc\\": {abc, abc, abc, abc}.","solution":"MOD = 1000000007 def count_subsequences(A, B): Counts the number of subsequences in string A that equal string B. len_a = len(A) len_b = len(B) # dp[i][j] will be storing the number of subsequences of A[0..i-1] # which equals B[0..j-1] dp = [[0] * (len_b + 1) for _ in range(len_a + 1)] # If B is empty, there is exactly one subsequence in A equals to B, which is an empty subsequence. for i in range(len_a + 1): dp[i][0] = 1 for i in range(1, len_a + 1): for j in range(1, len_b + 1): # If current characters in both strings are not the same. if A[i - 1] != B[j - 1]: dp[i][j] = dp[i - 1][j] % MOD else: # If the current character in both the strings are the same # Two cases are considered: dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % MOD return dp[len_a][len_b] def solve(test_cases): results = [] for A, B in test_cases: results.append(count_subsequences(A, B)) return results"},{"question":"Stock Buy and Sell You are a stock trader who can only make one trade for a given day. You are given the stock prices for a single day where the price of the stock is recorded every minute. Your task is to determine the maximum possible profit you can achieve by buying and then selling one share of the stock on the same day. Note that you must buy the stock before you can sell it, and you cannot sell the stock before you buy it. Input The input consists of a single dataset in the following format: n p1 p2 ... pn The first line contains n, the number of recorded prices for the day. n is an integer satisfying 2 ≤ n ≤ 100000. The second line contains n space-separated integers representing the stock prices recorded throughout the day. Each price pi (1 ≤ i ≤ n) is an integer satisfying 1 ≤ pi ≤ 100000. Output Output a single integer representing the maximum profit you can achieve. If no profit can be made, output 0 instead. Sample Input 6 7 1 5 3 6 4 Sample Output 5 Explanation In the example, the maximum profit can be achieved by buying the stock at 1 and selling it at 6, yielding a profit of 5 (6 - 1). Example Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0","solution":"def max_profit(n, prices): Function to calculate the maximum profit from buying and selling a stock once. :param n: int, number of prices :param prices: list of int, stock prices recorded throughout the day :return: int, maximum profit (0 if no profit can be made) if n <= 1: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: potential_profit = price - min_price if potential_profit > max_profit: max_profit = potential_profit return max_profit"},{"question":"Anna loves arranging her bookshelf. She has a long shelf and wants to group her books in such a way that all books in a group have the same height. Anna needs your help to determine the maximum number of groups she can create from her bookshelf. Each book on the shelf is represented by its height. Your task is to find and output the maximum number of groups where each group contains books of the same height. Input: - The first line of input contains an integer N, the number of books on the shelf. - The second line contains N integers, denoting the heights of the books. Output: - Output a single integer, the maximum number of groups of books with the same height. Constraints: 1 ≤ N ≤ 100000 1 ≤ Height of each book ≤ 100000 SAMPLE INPUT 8 1 2 2 3 3 3 4 4 SAMPLE OUTPUT 3 Explanation In the given example, Anna can group the books as follows: - One group of books with height 1 - One group of books with height 2 - One group of books with height 4 Notice that while there are three books of height 3, they still form only one group. Therefore, the maximum number of groups with books of the same height is 3.","solution":"def max_groups_of_same_height(N, heights): Returns the maximum number of groups of books with the same height. Parameters: N (int): number of books on the shelf. heights (list of int): heights of the books on the shelf. Returns: int: maximum number of groups of books with the same height. # Using a set to find the unique heights of the books unique_heights = set(heights) # The number of unique heights is the maximum number of groups return len(unique_heights)"},{"question":"You are given two integers `n` and `m`, and two arrays `A` and `B` of length `n` and `m` respectively. Determine if there exists a subsequence in array `A` that shares the same elements (in the same order) as array `B`. Input The first line contains two integers `n` and `m` (1 ≤ m ≤ n ≤ 10^5) — the lengths of arrays `A` and `B` respectively. The second line contains `n` integers `A_1, A_2, ..., A_n` (1 ≤ A_i ≤ 10^9) — the elements of array `A`. The third line contains `m` integers `B_1, B_2, ..., B_m` (1 ≤ B_i ≤ 10^9) — the elements of array `B`. Output Output \\"YES\\" if array `B` is a subsequence of array `A`, otherwise output \\"NO\\". Examples Input 5 3 1 2 3 4 5 2 4 5 Output YES Input 5 3 1 2 3 4 5 3 1 4 Output NO Input 6 4 1 1 2 3 5 8 1 2 5 8 Output YES Note In the first example, `B` is a subsequence of `A` because the elements `2, 4, 5` appear in the same order in `A`. In the second example, `B` is not a subsequence of `A` because even though the elements `3, 1, 4` appear in `A`, they do not appear in the same order. In the third example, `B` is a subsequence of `A` because the elements `1, 2, 5, 8` appear in the same order in `A`.","solution":"def is_subsequence(n, m, A, B): Determines if B is a subsequence of A. Parameters: n : int - length of array A m : int - length of array B A : list of int - array A B : list of int - array B Returns: str - \\"YES\\" if B is a subsequence of A, otherwise \\"NO\\" it = iter(A) return \\"YES\\" if all(b in it for b in B) else \\"NO\\""},{"question":"A company is organizing a conference and they have n rooms available for booking. Each room has a specific capacity indicating the maximum number of attendees it can accommodate. The company\'s aim is to distribute the conference attendees in such a way that no room is overloaded and the difference between the room with the maximum number of attendees and the room with the minimum number of attendees is minimized. Your task is to determine the best way to distribute the attendees across the rooms to achieve the above goal. Input The first line contains two integers n and m (1 ≤ n ≤ 20, 1 ≤ m ≤ 1000) — the number of available rooms and the number of attendees. The second line contains n integers a_i (1 ≤ a_i ≤ 1000) — the capacity of the i-th room. Output Output a single integer — the minimum possible difference between the maximum number of attendees in any room and the minimum number of attendees in any room. Examples Input 3 50 20 30 40 Output 10 Input 4 100 25 25 25 25 Output 0 Input 5 60 15 15 15 15 15 Output 0 Note In the first sample, an optimal distribution is 20 attendees in the first room, 15 attendees in the second room, and 15 attendees in the third room. The difference between the room with the maximum attendees (20) and the room with the minimum attendees (15) is 5. In the second sample, every room can accommodate 25 attendees, and since the capacity is evenly distributed, the difference is 0. All attendees can be evenly distributed across the rooms. In the third sample, each room has the same capacity and can be distributed equally, leading to a difference of 0.","solution":"def distribute_attendees(n, m, capacities): Distribute m attendees across n rooms such that the difference between the maximum and minimum number of attendees in any room is minimized. Args: n (int): Number of rooms. m (int): Number of attendees. capacities (list of int): Capacities of each room. Returns: int: The minimum possible difference between the maximum and minimum number of attendees in any room. # Sort capacities in descending order capacities.sort(reverse=True) # Create an array representing initial attendees in each room attendees = [0] * n # Distribute attendees to each room for i in range(m): # Find the room with the minimum current number of attendees min_index = attendees.index(min(attendees)) # Add one attendee to that room attendees[min_index] += 1 return max(attendees) - min(attendees)"},{"question":"Given an array of n integers, each representing the height of a pillar, your task is to determine if you can form a sequence of these pillars such that the difference between any two adjacent pillars\' heights in the sequence is exactly one unit. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of pillars. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^6), representing the height of each pillar. Output Print \\"YES\\" without quotes if it\'s possible to rearrange the pillars to satisfy the conditions, otherwise print \\"NO\\". Examples Input 5 1 2 3 4 5 Output YES Input 4 4 2 1 3 Output YES Input 3 7 1 4 Output NO","solution":"def can_form_sequence(n, heights): Determines if pillars can be arranged such that the difference between any two adjacent pillars\' heights is exactly one unit. Parameters: n (int): Number of pillars. heights (list): Heights of the pillars. Returns: str: \\"YES\\" if possible to rearrange, otherwise \\"NO\\". heights.sort() for i in range(1, n): if heights[i] - heights[i - 1] != 1: return \\"NO\\" return \\"YES\\""},{"question":"A secret society has a unique password validation guideline. Each password needs to follow these specific rules: 1. The password should be at least 8 characters long. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one digit. 5. The password must contain at least one special character from the set `!@#%^&*()-+`. Write a function to verify if a given password adheres to these rules. If the password is valid, return `True`, otherwise return `False`. Input - A single string `password` representing the password to be validated. Output - Return `True` if the password is valid according to the rules mentioned, otherwise return `False`. Examples Input \\"Password123!\\" Output True Input \\"pass123\\" Output False Input \\"PASSWORD123@\\" Output False Input \\"Pa1\\" Output False Input \\"ValidPassword1\\" Output True","solution":"import re def is_valid_password(password): Validates if the given password adheres to the secret society\'s guidelines. Parameters: password (str): The password to validate. Returns: bool: True if the password is valid, False otherwise. if len(password) < 8: return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[0-9]\', password): return False if not re.search(r\'[!@#%^&*()-+]\', password): return False return True"},{"question":"A company is developing an application to manage its product inventory. Each product has a unique ID, a name, and a quantity in stock. The system needs to handle multiple operations, including adding new products, updating product quantities, and querying the current stock level of a product. You are tasked with implementing a function that processes a list of operations on the product inventory. Each operation is represented as a string, where: - \\"ADD <ID> <NAME> <QUANTITY>\\" adds a new product with the given ID, name, and quantity to the inventory. If the product ID already exists, update the name and quantity with the provided values. - \\"UPDATE <ID> <QUANTITY>\\" updates the quantity of the product with the given ID. If the product ID does not exist, this operation should be ignored. - \\"QUERY <ID>\\" queries the current stock level of the product with the given ID and prints the quantity. If the product ID does not exist, print \\"Product not found\\". Input The first line contains an integer n (1 ≤ n ≤ 10^4), the number of operations. Each of the next n lines contains one of the operations as described above. Product IDs are unique positive integers and names are strings of alphanumeric characters. Output For each \\"QUERY\\" operation, print the current quantity of the product with the given ID or \\"Product not found\\" if the product does not exist. Examples Input 5 ADD 1 Apple 50 ADD 2 Banana 100 QUERY 1 UPDATE 2 150 QUERY 2 Output 50 150 Input 4 ADD 1 Apple 50 UPDATE 1 70 QUERY 1 QUERY 3 Output 70 Product not found Note In the first example: - The \\"ADD 1 Apple 50\\" operation adds an Apple product with ID 1 and quantity 50. - The \\"ADD 2 Banana 100\\" operation adds a Banana product with ID 2 and quantity 100. - The \\"QUERY 1\\" operation queries the quantity of the product with ID 1, which is 50. - The \\"UPDATE 2 150\\" operation updates the quantity of the product with ID 2 to 150. - The \\"QUERY 2\\" operation queries the quantity of the product with ID 2, which is now 150. In the second example: - The \\"ADD 1 Apple 50\\" operation adds an Apple product with ID 1 and quantity 50. - The \\"UPDATE 1 70\\" operation updates the quantity of the product with ID 1 to 70. - The \\"QUERY 1\\" operation queries the quantity of the product with ID 1, which is now 70. - The \\"QUERY 3\\" operation queries the quantity of the product with ID 3, which does not exist, so \\"Product not found\\" is printed.","solution":"def manage_inventory(operations): inventory = {} output = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": id = int(parts[1]) name = parts[2] quantity = int(parts[3]) inventory[id] = {\'name\': name, \'quantity\': quantity} elif command == \\"UPDATE\\": id = int(parts[1]) quantity = int(parts[2]) if id in inventory: inventory[id][\'quantity\'] = quantity elif command == \\"QUERY\\": id = int(parts[1]) if id in inventory: output.append(str(inventory[id][\'quantity\'])) else: output.append(\\"Product not found\\") return output"},{"question":"Om Nom loves sweets, and he is currently standing at the entrance of a candy store which has a unique and challenging layout. The store can be visualized as a 2D grid of cells with `n` rows and `m` columns. Each cell either contains candies, an obstacle, or is empty. Om Nom can move from one cell to another if and only if the cells share an edge (i.e., moves can be up, down, left, or right) and the destination cell is not an obstacle. Om Nom wants to visit as many cells containing candies as possible in a single trip, starting from any given cell. Help Om Nom find out the maximum number of candy cells he can visit for several starting positions. Input The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next `n` lines each contain `m` characters. Each character is either: - `.`, representing an empty cell, - `#`, representing an obstacle, - `C`, representing a cell that contains candies. The next line contains `q` (1 ≤ q ≤ 100000), the number of starting positions Om Nom will try. The next `q` lines each contain two integers `xi` and `yi` (1 ≤ xi ≤ n, 1 ≤ yi ≤ m) — the row and column indices of Om Nom\'s starting position for that query. Output For each query, print the maximum number of candy cells Om Nom can visit starting from the specified cell in a separate line. Example Input ``` 5 5 C.#.C .#.#. C.C.C .#.#. C.#.C 3 1 1 3 3 5 5 ``` Output ``` 7 7 7 ```","solution":"def max_candies(grid, start, n, m): Function to calculate the maximum candies Om Nom can visit starting from a given position. Using BFS or DFS to explore from the starting cell. from collections import deque dx = [0, 0, 1, -1] dy = [1, -1, 0, 0] # Initialize visited matrix visited = [[False] * m for _ in range(n)] # Initialize the queue for BFS queue = deque([start]) visited[start[0]][start[1]] = True candy_count = 0 while queue: x, y = queue.popleft() if grid[x][y] == \'C\': candy_count += 1 for i in range(4): nx, ny = x + dx[i], y + dy[i] if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] != \'#\': visited[nx][ny] = True queue.append((nx, ny)) return candy_count def om_nom_max_candies(n, m, grid, queries): For each query, calculates the maximum candies Om Nom can collect and returns as a list. results = [] for query in queries: x, y = query[0] - 1, query[1] - 1 if grid[x][y] == \'#\': results.append(0) else: results.append(max_candies(grid, (x, y), n, m)) return results"},{"question":"You are a robot stuck in a 2D grid. The grid has some obstacles, and your goal is to reach the bottom-right corner while following specific movement rules. The grid is represented by a matrix `m x n`, where `m` is the number of rows and `n` is the number of columns. Each cell in the grid contains either a 0 (free space) or a 1 (obstacle). The robot can only move in three directions: down, right, or diagonally (down-right). Write a function `canReachBottomRight(grid)` that takes the grid as input and returns `True` if the robot can reach the bottom-right corner, and `False` otherwise. **Function Signature** ```python def canReachBottomRight(grid: List[List[int]]) -> bool: ``` **Example** ```python grid = [ [0, 0, 0], [1, 0, 1], [0, 0, 0] ] assert canReachBottomRight(grid) == True ``` **Constraints** - The grid will always have at least one cell (m ≥ 1, n ≥ 1). - The robot starts at the top-left corner (0, 0). - The bottom-right corner will always be free (i.e., `grid[m-1][n-1] == 0`).","solution":"def canReachBottomRight(grid): Determines if the robot can reach the bottom-right corner of the grid. Parameters: grid (List[List[int]]): The grid representation where 0 is free space and 1 is an obstacle. Returns: bool: True if the robot can reach the bottom-right corner, False otherwise. if not grid or not grid[0]: return False m, n = len(grid), len(grid[0]) def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == 0 def dfs(x, y): if x == m-1 and y == n-1: return True if not is_valid(x, y): return False # mark the cell as visited grid[x][y] = 1 # move down if dfs(x+1, y): return True # move right if dfs(x, y+1): return True # move diagonally if dfs(x+1, y+1): return True return False return dfs(0, 0)"},{"question":"A long time ago in a galaxy far, far away, there was a grid with peculiar properties. It was a square grid of size n x n (1 ≤ n ≤ 50), and each cell of the grid contained a planet. The inhabitants of this galaxy needed to set up teleportation portals between certain pairs of planets. However, there were some restrictions on where portals could be placed. In particular, portals could only be set up between planets in the same row or the same column. Your task is to determine whether it is possible to visit all the planets starting from any planet and only using these portals. Input - The first line contains a single integer n (1 ≤ n ≤ 50), the size of the grid. - Each of the next n lines contains n characters, where each character is either \'.\' (indicating that the cell contains a planet) or \'#\' (indicating that the cell is empty). Output - Print \\"YES\\" if it is possible to visit all planets starting from any planet, visiting each planet exactly once, and only moving between planets in the same row or column. Otherwise, print \\"NO\\". Example Input 4 .... .#.. .#.. .... Output YES Note In the example provided, all the planets are connected either directly or indirectly through other planets that share a row or a column, making it possible to visit all planets starting from any planet and moving only through the portals.","solution":"def is_all_planets_connected(n, grid): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= n or grid[x][y] != \'.\': return grid[x][y] = \'#\' # Mark it as visited # Explore all adjacent cells dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) components = 0 for i in range(n): for j in range(n): if grid[i][j] == \'.\': if components > 0: # If we find another component, return early return \\"NO\\" dfs(i, j) components += 1 return \\"YES\\" if components == 1 else \\"NO\\""},{"question":"Graph Traversal is a fundamental algorithmic concept where we visit, check, and update all the nodes in a graph. One common form of Graph Traversal is the Depth-First Search (DFS). In this task, you are required to implement DFS for an undirected graph. The graph is represented using an adjacency list. Each node in the graph is identified by a unique integer ID between 1 and n inclusive. DFS can be used to find connected components and for other applications such as determining the existence of a path between two nodes. To facilitate the implementation, you should adhere to the following structure. The graph is provided as a list of edges, each edge is described by two integers a and b which indicates an undirected edge between vertices a and b. You are required to: 1. Initialize the graph using given edges. 2. Implement DFS starting from a given node. 3. Output the nodes in the order they are visited by the DFS. Constraints: - 1 ≤ n ≤ 10^5 - 1 ≤ number of edges ≤ 2 x 10^5 Input: - The first line contains two integers n and m, the number of nodes and the number of edges respectively. - The next m lines each contain two integers a and b representing an edge between nodes a and b. - The last line contains an integer s, the starting node for the DFS. Output: - Print the nodes in the order they are visited by the DFS. Example: Input: ``` 5 4 1 2 1 3 3 4 2 5 1 ``` Output: ``` 1 2 5 3 4 ``` You should adhere to the DFS traversal while handling the input graph and producing the required output. Implement any necessary helper functions as needed.","solution":"def dfs(graph, start): Perform a Depth-First Search (DFS) starting from the given node. :param graph: The adjacency list of the graph. :param start: The starting node for DFS. :return: A list of nodes in the order they are visited by DFS. visited = set() result = [] def dfs_helper(node): if node not in visited: visited.add(node) result.append(node) for neighbor in sorted(graph[node]): # sorting to have deterministic output dfs_helper(neighbor) dfs_helper(start) return result def initialize_graph(n, edges): Initialize the graph as an adjacency list. :param n: Number of nodes. :param edges: List of edges. :return: The adjacency list representing the graph. graph = {i: [] for i in range(1, n + 1)} for a, b in edges: graph[a].append(b) graph[b].append(a) return graph"},{"question":"Given an array of integers `arr` containing `n` elements, write a function that returns the maximum sum of a non-empty subarray of `arr`. A subarray is a contiguous part of `arr`. Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains `n` integers separated by spaces, representing the elements of the array `arr` (-10^4 ≤ arr[i] ≤ 10^4). Output - Output a single integer: the maximum sum of a non-empty subarray of `arr`. Example Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Explanation: The subarray [4, -1, 2, 1] has the maximum sum 6. Additional Note: Your solution should have a time complexity of O(n).","solution":"def max_subarray_sum(arr): Returns the maximum sum of a non-empty subarray. max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Problem description. Andy is an avid app developer who has recently created a password strength evaluation tool. To make his tool smart, he wants to check if a password contains at least one uppercase letter, one lowercase letter, one digit, and one special character from the list (!, @, #, , %, ^, &, *). Given his current workload on the project, he\'s seeking your help to implement this check. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each of the next T lines contains a single string P denoting the password to be checked. Output For each test case, output a single line printing \\"VALID\\" or \\"INVALID\\" (without \\" \\" and in uppercase only), indicating whether the password meets the criteria. Constraints 1 ≤ T ≤ 10 6 ≤ Length of P ≤ 20 Example Input: 3 Hello@123 password Pa55word! Output: VALID INVALID VALID Explanation: The first password contains an uppercase letter \'H\', a lowercase letter \'e\', a digit \'1\', and a special character \'@\', making it valid. The second password lacks a capital letter, a digit, and a special character, making it invalid. The third password meets all criteria with an uppercase letter \'P\', lowercase letters \'a\', digit \'5\', and a special character \'!\'.","solution":"import re def password_strength_checker(T, passwords): Evaluates passwords based on specified criteria. Parameters: T (int): Number of passwords. passwords (list of str): List of passwords to be evaluated. Returns: list of str: List containing \\"VALID\\" or \\"INVALID\\" for each password. results = [] for password in passwords: if (len(password) >= 6 and re.search(\\"[A-Z]\\", password) and re.search(\\"[a-z]\\", password) and re.search(\\"[0-9]\\", password) and re.search(\\"[!@#%^&*]\\", password)): results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"Write a program to find all prime numbers less than or equal to a given number n using the Sieve of Eratosthenes algorithm. Input An integer n, where 1 ≤ n ≤ 100000. Output Output all prime numbers less than or equal to n in ascending order, each on a new line. Example Input 30 Output 2 3 5 7 11 13 17 19 23 29","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for start in range(2, int(n**0.5) + 1): if is_prime[start]: for multiples in range(start*start, n + 1, start): is_prime[multiples] = False return [num for num, prime in enumerate(is_prime) if prime]"},{"question":"A company XYZ provides a service that processes user commands. Each command is represented by a letter from \'A\' to \'Z\'. Recently, they observed that some of the commands are redundant if they appear consecutively more than once. For instance, the sequence \\"AAABCC\\" can be simplified to \\"ABC\\". Write a program to help XYZ simplify any given sequence of commands by replacing consecutive repeating commands with a single instance of that command. Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the length of the command sequence. The second line contains a string of n characters where each character is an uppercase English letter \'A\' to \'Z\'. Output In a single line, print the simplified sequence. Examples Input 6 AAABCC Output ABC Input 10 ZZZYYYXXXX Output ZYX Input 1 A Output A Note In the first sample, the sequence \\"AAABCC\\" is simplified to \\"ABC\\" because the redundant \'A\'s and \'C\'s are removed. In the second sample, \\"ZZZYYYXXXX\\" is simplified to \\"ZYX\\". In the third sample, the sequence \\"A\\" remains \\"A\\" as there are no consecutive repeating commands.","solution":"def simplify_sequence(n, sequence): Simplifies the sequence of commands by removing consecutive repeating commands. Params: n (int): The length of the command sequence. sequence (str): The sequence of commands in the form of a string. Returns: str: The simplified sequence of commands. if n == 0: return \'\' simplified_sequence = sequence[0] # Start with the first character for i in range(1, n): if sequence[i] != sequence[i-1]: # Add only if it\'s different from the previous character simplified_sequence += sequence[i] return simplified_sequence"},{"question":"A local bakery needs to keep track of their inventory. They have different types of pastries, and they need to ensure that they never run out of stock. Each pastry type has a minimum stock level, and the bakery wants to be alerted if any type drops below this level. Write a program to help manage this. Given a list of pastries with their current stock and minimum required stock levels, determine if the bakery needs to restock any pastry. If any pastry falls below its minimum required stock level, print \\"Restock required\\". Otherwise, print \\"Stock is sufficient\\". Input The first line contains an integer n ( 1 leq n leq 100 ), the number of different types of pastries. The next n lines each contain two integers a_i and b_i ( 0 leq a_i, b_i leq 100 ), where a_i is the current stock of the i-th type of pastry and b_i is the minimum required stock level for that pastry. Output Output \\"Restock required\\" if the stock of any pastry type is below its minimum required stock level. Otherwise, output \\"Stock is sufficient\\". Input example 1 3 10 2 5 5 3 4 Output example 1 Restock required Explanation: The current stock levels of pastries are 10, 5, and 3, and the minimum required stock levels are 2, 5, and 4 respectively. Since the third pastry type has a stock level of 3 which is below the required 4, restocking is required. Input example 2 2 20 10 15 15 Output example 2 Stock is sufficient Explanation: The current stock levels of pastries are 20 and 15, and the minimum required stock levels are 10 and 15 respectively. Both pastry types meet or exceed their required stock levels, so no restocking is needed.","solution":"def check_inventory(n, pastry_data): Checks if any pastry stock is below the minimum required stock level. Parameters: n (int): number of different types of pastries pastry_data (List[Tuple[int, int]]): A list of tuples (a, b) where a is the current stock, and b is the minimum required stock level for each pastry type Returns: str: \\"Restock required\\" if any pastry needs to be restocked, otherwise \\"Stock is sufficient\\" for a, b in pastry_data: if a < b: return \\"Restock required\\" return \\"Stock is sufficient\\" # Example usage: # n = 3 # pastry_data = [(10, 2), (5, 5), (3, 4)] # print(check_inventory(n, pastry_data))"},{"question":"There is a staircase with N steps and you can either take 1 step, 2 steps, or 3 steps at a time. Write a program to find the number of distinct ways to reach the top of the staircase. Constraints * The value of N is an integer. * 0 leq N leq 30 Input Input is given from Standard Input in the following format: N Output Print the number of distinct ways to reach the top of the staircase. Examples Input 3 Output 4 Input 4 Output 7 Input 5 Output 13","solution":"def count_ways(n): Returns the number of distinct ways to reach the top of the staircase with N steps, where you can either take 1 step, 2 steps, or 3 steps at a time. if n == 0: return 1 elif n == 1: return 1 elif n == 2: return 2 # Initialize a list to store the number of ways to reach each step ways = [0] * (n + 1) ways[0] = 1 ways[1] = 1 ways[2] = 2 # Fill the list with the number of ways to reach each subsequent step for i in range(3, n + 1): ways[i] = ways[i-1] + ways[i-2] + ways[i-3] return ways[n]"},{"question":"The Flatland Government is organizing an event where citizens can represent their districts for a coding challenge. The challenge consists of a game played on a rectangular grid of size `N x M`. Each cell in the grid can either be: - an empty cell represented by \'.\', - an obstacle represented by \'#\', - a start cell represented by \'S\', - a goal cell represented by \'G\'. The participants need to navigate from the start cell \'S\' to the goal cell \'G\' by moving to adjacent cells horizontally or vertically (but not diagonally). Their goal is to determine the shortest path from \'S\' to \'G\'. Write a program to assist participants in finding the shortest path from \'S\' to \'G\'. If no path exists, return -1. The grid will contain exactly one \'S\' and one \'G\', and it\'s guaranteed that \'S\' and \'G\' are located in different cells. Input The first line contains two space-separated integers `N` and `M` (1 ≤ N, M ≤ 500) — the dimensions of the grid. The next `N` lines contain `M` characters each denoting the grid. Output Output a single integer — the length of the shortest path from \'S\' to \'G\'. If no such path exists, output -1. Examples Input 5 5 S.... . .#... .#..G # Output 7 Input 3 3 S#. .#. .G Output -1 Note In the first example, the shortest path is: ``` S.... 00000 . --> 0 .#... --> .#000 .#..G .#..0 # # The path length is 7 (moving right, then down through the open cells). ``` In the second example, there is no possible path from \'S\' to \'G\', so the output is -1.","solution":"from collections import deque def shortest_path(N, M, grid): def bfs(start, goal): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == goal: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] != \'#\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 start = goal = None for i in range(N): for j in range(M): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'G\': goal = (i, j) if not start or not goal: return -1 # This should not happen based on problem constraints return bfs(start, goal) # Example usage: N = 5 M = 5 grid = [ \\"S....\\", \\".\\", \\".#...\\", \\".#..G\\", \\"#\\" ] print(shortest_path(N, M, grid)) # Output: 7"},{"question":"Niwango is working on a project involving a series of operations on a list of integers. He needs you to implement a function that processes a series of commands on the list. The commands are to append integers to the list, remove the first occurrence of an integer, or query the sum of all integers in the list. Your task is to simulate this process and return the results of all sum queries. Commands: 1. `append x`: Append the integer `x` to the list. 2. `remove x`: Remove the first occurrence of the integer `x` from the list. If `x` is not in the list, do nothing. 3. `sum`: Output the sum of all integers currently in the list. Input The input consists of a series of commands. Each command is represented as a line containing a command name optionally followed by an integer. The input is terminated by an end-of-file (EOF). Output For each `sum` command, output the sum of all integers currently in the list on a new line. Constraints * The list and the integer values will fit within the limits of a 32-bit signed integer. * There will be at most 10^5 operations. Example Input append 5 append 3 sum remove 3 sum append 10 sum Output 8 5 15 Explanation - After `append 5` and `append 3`, the list is `[5, 3]`. The first `sum` command results in `8`. - After `remove 3`, the list is `[5]`. The second `sum` command results in `5`. - After `append 10`, the list is `[5, 10]`. The third `sum` command results in `15`.","solution":"def process_commands(commands): Processes a series of commands on a list of integers and returns the results of all sum commands. Args: commands (list of str): The list of commands. Returns: list of int: The results of all sum commands. lst = [] result = [] for command in commands: parts = command.split() cmd = parts[0] if cmd == \\"append\\": value = int(parts[1]) lst.append(value) elif cmd == \\"remove\\": value = int(parts[1]) if value in lst: lst.remove(value) elif cmd == \\"sum\\": result.append(sum(lst)) return result"},{"question":"You are given a string of length n consisting of characters \'a\' and \'b\' only. You can perform a series of operations to transform the string in the following way: in each operation, you can choose any substring of length exactly k from the string and reverse the substring. Your task is to determine whether it is possible to transform the string such that no two adjacent characters are the same. Input The first line of the input contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. The first line of each test case contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ n). The second line of each test case contains a string s of length n consisting of characters \'a\' and \'b\'. Output For each test case, print \\"YES\\" if it\'s possible to transform the string such that no two adjacent characters are the same, otherwise print \\"NO\\". Example Input 3 6 2 aabbab 6 2 aaaaaa 5 3 aabaa Output YES NO YES Explanation In the first test case, performing the operations \\"(1, 2)\\" and \\"(5, 6)\\" transforms the string to \\"ababab\\". In the second test case, no matter how we reverse the substring of length 2, it is impossible to make the string \\"aaaaaa\\" have no two adjacent characters the same. In the third test case, performing the operation \\"(2, 4)\\" transforms the string to \\"abaaa\\", then operation \\"(3, 5)\\" transforms it to \\"abbaa\\". Finally, operation \\"(2, 4)\\" transforms it to \\"ababa\\", which meets the required condition.","solution":"def can_transform(n, k, s): Determines whether it is possible to transform the string such that no two adjacent characters are the same. Parameters: n (int): Length of the string. k (int): Length of the substring that can be reversed. s (str): The input string consisting of characters \'a\' and \'b\'. Returns: str: \\"YES\\" if it\'s possible to transform the string, otherwise \\"NO\\". if k == 1: # If k is 1, we cannot change the order of any characters return \\"NO\\" if any(s[i] == s[i+1] for i in range(n-1)) else \\"YES\\" if k == n: # If k is equal to n, we can reverse the entire string return \\"YES\\" if s.count(\'a\') == s.count(\'b\') else \\"NO\\" # Check if there are enough \'a\'s and \'b\'s to alternate them if abs(s.count(\'a\') - s.count(\'b\')) > k: return \\"NO\\" # Otherwise, it\'s always possible to achieve the alternating pattern with proper substring reversals. return \\"YES\\" def solution(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][:2] s = test_cases[i][2] results.append(can_transform(n, k, s)) return results"},{"question":"Vivian loves her pent house terrace garden. One day, she noticed that some plants were growing faster than the others and kept track of their growth over a period of time. She recorded the height of each plant every day, and now she wants to determine which plants grew the most between any two given days, t1 and t2 (0 ≤ t1 < t2 ≤ D). You are given the heights of n plants over D days in a grid format, with heights[i][j] representing the height of the i-th plant on day j. Vivian wants to know the maximum growth observed in height between any two days t1 and t2 for some plant i. Write a function that takes the heights of the plants over the days and returns the maximum growth observed between any two days for some plant. Input The first line contains two integers, n and D (1 ≤ n ≤ 1000, 1 ≤ D ≤ 1000) — the number of plants and the number of days respectively. The following n lines contain D integers each, where the j-th number in the i-th line represents the height of the i-th plant on day j (1 ≤ heights[i][j] ≤ 10^4). Output Output a single integer — the maximum growth observed between any two days for some plant. Examples Input 3 5 1 5 3 6 4 2 2 2 8 7 3 6 3 5 8 Output 6 Input 2 4 7 14 9 10 6 7 8 8 Output 7 Input 4 3 1 1 1 2 2 2 3 3 3 4 4 4 Output 0 Note For the first example, the maximum growth is from day 1 to day 4 for plant 1 with a growth of 6 (6 - 1). For the second example, the maximum growth is from day 1 to day 2 for plant 1 with a growth of 7 (14 - 7).","solution":"def max_growth(heights): n = len(heights) D = len(heights[0]) max_growth_value = 0 for i in range(n): for t1 in range(D): for t2 in range(t1 + 1, D): growth = heights[i][t2] - heights[i][t1] if growth > max_growth_value: max_growth_value = growth return max_growth_value"},{"question":"A group of archaeologists is deciphering an ancient text that appears to be written in a number system similar to Roman numerals. The text describes a series of operations performed on large numbers, but the numbers are encoded in a unique way. Each number is represented as a string of digits, and the operations are described in terms of appending these strings to each other to form new numbers. The archaeologists need your help to verify if a given number can be constructed by appending the strings in a specified order from a list of available components. Given a target number `T` and a list of `n` strings of digits `s1, s2, ..., sn`, determine if `T` can be constructed by concatenating some of these strings in any order, each string used at most once. You may not have to use all the strings. Input The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of available strings. The second line contains the target number `T` as a string (1 ≤ |T| ≤ 100), consisting of digits. The next `n` lines contain `n` strings of digits, `s1, s2, ..., sn` (1 ≤ |si| ≤ 100) — the components that can be used to form the target number. Output Output YES if the target number can be constructed by concatenating the given strings in any order, each used at most once. Otherwise, output NO. Example Input 3 123456 123 456 789 Output YES Input 4 1001 10 01 100 100 Output YES Input 2 1111 11 12 Output NO","solution":"from itertools import permutations def can_construct_T(n, T, components): Determines if the target number T can be constructed by concatenating some of the components in any order, each component used at most once. :param n: int - the number of available strings :param T: str - the target number :param components: list of str - the components that can be used to form the target number :return: str - \\"YES\\" if T can be constructed, otherwise \\"NO\\" for i in range(1, n + 1): for perm in permutations(components, i): if \'\'.join(perm) == T: return \\"YES\\" return \\"NO\\""},{"question":"You are given an integer array representing the maximum height a frog can jump. The frog starts at the first index and needs to reach the last index in the minimum number of jumps. The frog can only jump to the right and the maximum distance it can jump from an index is determined by the value of the array at that index. Write a function that returns the minimum number of jumps needed for the frog to reach the end of the array. If the end is not reachable, return -1. Input The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), where hi is the maximum height the frog can jump from index i. Output Print a single integer — the minimum number of jumps needed to reach the last index, or -1 if it\'s not possible. Examples Input 6 2 3 1 1 4 Output 2 Input 5 3 2 1 0 4 Output -1 Input 9 1 3 5 8 9 2 6 7 6 8 9 Output 3","solution":"def min_jumps(arr): Returns the minimum number of jumps needed for the frog to reach the end of the array. If the end is not reachable, return -1. n = len(arr) if n == 1: return 0 if arr[0] == 0: return -1 jumps = 0 current_end = 0 current_farthest = 0 for i in range(n): current_farthest = max(current_farthest, i + arr[i]) if i == current_end: jumps += 1 current_end = current_farthest if current_end >= n - 1: return jumps if i >= current_farthest: return -1 return -1"},{"question":"Given an integer array `arr` and a series of queries, perform the following operations on the array. * get_sum(l, r): Return the sum of the integer values within the subarray ranging from the l-th index to the r-th index inclusive. * update(i, x): Update the value at the i-th index of the array to x. Constraints * 1 leq n, q leq 100,000 * 1 leq arr[i] leq 1,000,000 * 0 leq l leq r leq n-1 * 0 leq i leq n-1 * 1 leq x leq 1,000,000 Input The input is given in the following format: n , q arr[0] , arr[1] , ... , arr[n-1] query_1 query_2 ... query_q Each query query_i is given by one of the following formats: `0 l r`: for a get_sum operation where l and r define the bounds of the subarray. `1 i x`: for an update operation where i is the index to be updated to value x. Output For each get_sum operation, print the sum of the elements in the specified subarray. Example Input 5 3 1 2 3 4 5 0 1 3 1 2 10 0 1 3 Output 9 16","solution":"class ArrayOperations: def __init__(self, arr): self.arr = arr def get_sum(self, l, r): return sum(self.arr[l:r+1]) def update(self, i, x): self.arr[i] = x def process_queries(n, q, arr, queries): array_ops = ArrayOperations(arr) results = [] for query in queries: if query[0] == 0: # get_sum operation l, r = query[1], query[2] results.append(array_ops.get_sum(l, r)) elif query[0] == 1: # update operation i, x = query[1], query[2] array_ops.update(i, x) return results # Example usage: if __name__ == \\"__main__\\": n = 5 q = 3 arr = [1, 2, 3, 4, 5] queries = [ (0, 1, 3), (1, 2, 10), (0, 1, 3) ] result = process_queries(n, q, arr, queries) for res in result: print(res) # Output should be 9 and 16"},{"question":"In a mysterious land, there is an ancient temple with a staircase that has N steps. Each step can either be left untouched or be decorated with a flower. However, there is a peculiar rule: you cannot place flowers on three or more consecutive steps because it is considered inauspicious. Given the number of steps N, you need to calculate the total number of ways to decorate the staircase. Input Format: The first line contains T, the number of test cases. Each test case consists of a single integer N, representing the number of steps in the staircase. Output Format: For each test case, output the total number of ways to decorate the staircase. SAMPLE INPUT 2 3 4 SAMPLE OUTPUT 7 13 Explanation Explanation: Case 1: For N = 3, the possible ways to decorate the steps are: 1. Not decorate any step: NNN 2. Decorate one step: FNN, NFN, NNF 3. Decorate two steps: FFN, FNF, NFF Total ways = 7 Case 2: For N = 4, the possible ways to decorate the steps are: 1. Not decorate any step: NNNN 2. Decorate one step: FNNN, NFNN, NNFN, NNNF 3. Decorate two steps: FFNN, FNFN, FNNF, NFFN, NFNF, NNFF 4. Decorate three steps: FFNF, FNFF, NFFF Total ways = 13","solution":"def count_ways(n): if n == 0: return 1 elif n == 1: return 2 elif n == 2: return 4 elif n == 3: return 7 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 2 dp[2] = 4 dp[3] = 7 for i in range(4, n + 1): dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] return dp[n] def solve(test_cases): results = [] for n in test_cases: results.append(count_ways(n)) return results"},{"question":"You are given a matrix with `n` rows and `m` columns, where each cell contains either a `#` (representing an obstacle) or a `.` (representing an empty space). Your task is to find the length of the shortest path from the top-left corner (1, 1) to the bottom-right corner (n, m), if such a path exists. The path can only traverse through cells marked with `.` and you can move to an adjacent cell horizontally or vertically (not diagonally). If no such path exists, return `-1`. Input The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the matrix. The next `n` lines contain a string of `m` characters, where each character is either `#` or `.`. Output Output a single integer, which is the length of the shortest path from the top-left corner (1, 1) to the bottom-right corner (n, m). If no such path exists, output `-1`. Example Input 4 4 . . . # # # . # . # . # # . . . Output 7 Explanation: The shortest path from (1, 1) to (4, 4) is: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (4, 4) with a length of 7. Example Input 3 3 # . . # # . # . . Output -1 Explanation: There is no valid path from (1, 1) to (3, 3).","solution":"from collections import deque def shortest_path(n, m, matrix): Function to find the shortest path from the top-left corner (1, 1) to the bottom-right corner (n, m) in the given matrix. # Check for edge cases where the start or end is blocked if matrix[0][0] == \'#\' or matrix[n-1][m-1] == \'#\': return -1 # Directions for moving right, down, left, and up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Initialize queue for BFS queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() # If we reach the bottom-right corner, return the distance if row == n - 1 and col == m - 1: return dist # Explore neighbors for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and matrix[new_row][new_col] == \'.\': visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) # If no path found, return -1 return -1"},{"question":"You are given a binary tree with n nodes. Each node is assigned a value, which is initially set to 0 or 1. You are allowed to perform certain operations to convert the tree into a uniform binary tree where all nodes have the same value. In one operation, you can select any subtree of the binary tree and flip the value of all nodes in that subtree (changing 0 to 1 and 1 to 0). Find the minimum number of operations required to convert the entire tree into a uniform binary tree (either all nodes to 0 or all nodes to 1). Input: The first line of the input contains an integer n (1 ≤ n ≤ 100 000) — the number of nodes in the binary tree. The second line contains n integers v1, v2, ..., vn (each vi is either 0 or 1) — the values assigned to the nodes in the tree. The following n-1 lines provide the description of the edges, where each line contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — the indices of the nodes connected by the i-th edge. Output: Output the minimum number of operations required to convert the entire tree into a uniform binary tree. Examples: Input: 5 0 1 0 1 0 1 2 1 3 3 4 3 5 Output: 2 Input: 3 1 0 0 1 2 1 3 Output: 1","solution":"def find_min_operations(n, node_values, edges): from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def dfs(node, parent): count_0 = 0 if node_values[node - 1] else 1 count_1 = 1 if node_values[node - 1] else 0 for neighbor in graph[node]: if neighbor == parent: continue c0, c1 = dfs(neighbor, node) count_0 += c0 count_1 += c1 min_operations = min(count_0, count_1) return count_0, count_1 count_0, count_1 = dfs(1, -1) return min(count_0, count_1) def min_operations(n, node_values, edges): return find_min_operations(n, node_values, edges)"},{"question":"You are given an array of integers where each integer appears exactly twice, except for one integer which appears exactly once. Your task is to find the integer that appears only once. Implement a function `findUnique` that takes in an array of integers and returns the integer that appears only once. Input - A single line containing an integer n (1 ≤ |n| ≤ 3·10^5) representing the number of elements in the array. - A single line containing n space-separated integers. Each integer in the array is between -10^9 and 10^9. Output - A single integer — the unique integer that appears only once in the array. Note: Each element in the array except for one appears exactly twice. Examples Input 7 2 3 4 2 3 5 4 Output 5 Input 5 10 10 20 20 30 Output 30 In order to solve this problem efficiently, you can use bitwise XOR operation which has a time complexity of O(n) and space complexity of O(1).","solution":"def findUnique(arr): Finds the integer in the array that appears exactly once. Parameters: arr (list of int): The array of integers with only one unique element. Returns: int: The integer that appears only once in the array. unique = 0 for num in arr: unique ^= num return unique"},{"question":"Sophie loves taking photos and has decided to arrange her photos in an album. The album can hold photos in N slots, arranged in a linear sequence, and each photo has a certain height. Sophie wants her album to look aesthetically pleasing, so for each query, she needs to find the maximum height of the photos in a specific interval of slots. You are given Q queries, each having 2 integers a and b. You have to find the tallest photo (i.e., the maximum height) in the interval between a (inclusive) and b (inclusive). Input Format First Line contains N denoting the number of slots in the album. Second Line contains N space separated integers indicating the height of each photo. Third Line contains Q indicating the number of queries. Next Q lines contain two space separated integers a and b as mentioned above. Output Format Q lines, each containing an integer for the required query. Constraints 1 ≤ N, Q ≤ 100000 0 ≤ a ≤ b ≤ N-1 The album follows 0-based indexing, which means a and b range from 0 to N-1. SAMPLE INPUT 10 5 3 8 7 2 6 12 4 9 11 3 1 3 4 6 0 9 SAMPLE OUTPUT 8 12 12 Explanation For the first query (1, 3), the photos in the interval are [3, 8, 7] and the maximum height is 8. For the second query (4, 6), the photos in the interval are [2, 6, 12] and the maximum height is 12. For the third query (0, 9), the photos in the interval are [5, 3, 8, 7, 2, 6, 12, 4, 9, 11] and the maximum height is 12.","solution":"def max_photo_height_in_intervals(N, heights, queries): Function to determine the maximum photo height in given intervals. Parameters: N : int : Number of slots in the album heights : list : Heights of each photo in the slots queries : list : List of tuples, each containing two integers (a, b) Returns: list : A list containing the max height for each query interval results = [] for a, b in queries: results.append(max(heights[a:b+1])) return results"},{"question":"Problem L Majority Element Given an array of integers, find the majority element. The majority element is the element that appears more than ⌊n / 2⌋ times, where ⌊x⌋ denotes the floor function. Your task is to write a function that returns the majority element. You may assume that the majority element always exists in the given array. Input The input consists of a single test case in the following format: - The first line contains a single integer n (1 leq n leq 100,000), which is the length of the array. - The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9), which are the elements of the array. Output The output should be a single integer which is the majority element of the array. Sample Input 1 5 3 3 4 2 3 Sample Output 1 3 Sample Input 2 7 2 2 1 1 1 2 2 Sample Output 2 2 Note In Sample Input 1, the element 3 appears 3 times, which is more than ⌊5 / 2⌋ = 2 times. In Sample Input 2, the element 2 appears 4 times, which is more than ⌊7 / 2⌋ = 3 times.","solution":"def majority_element(n, array): Returns the majority element from the given array. count = 0 candidate = None # Boyer-Moore Voting Algorithm for num in array: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"Raj and Neha love to play games with numbers. They recently read about a game where you start with a number and repeatedly apply a rule until you reach a single-digit number. The rule is: replace the number with the sum of its digits. They call this process \\"digitally reducing\\" a number. Given an integer, Raj and Neha want you to help them determine the single-digit result of digitally reducing the number. [Input] First line contains an integer t denoting no.of test cases. Next t lines contain a single integer n. [Output] For each test case, print the single-digit result of digitally reducing the number. [Constraints] 1 ≤ t ≤ 100 0 ≤ n ≤ 10^18 SAMPLE INPUT 3 123 9876 5 SAMPLE OUTPUT 6 3 5","solution":"def digital_reduce(n): Returns the single-digit result of digitally reducing the number n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n def process_test_cases(t, test_cases): Processes multiple test cases for digital reduction. Parameters: t: int - number of test cases test_cases: list of int - the input numbers for each test case Returns: list of int - the single-digit result for each test case results = [] for n in test_cases: results.append(digital_reduce(n)) return results"},{"question":"You are given a string containing only the characters \'(\', \')\', \'[\', \']\', \'{\', and \'}\'. Determine if the input string is a valid string of parentheses. A string is considered valid if: * Open brackets must be closed by the same type of brackets. * Open brackets must be closed in the correct order. Return \\"YES\\" if the string is valid and \\"NO\\" otherwise. # Constraints * The input string length is at most 1000 characters. # Input The input is given as a single line containing the string s. # Output Output a single line containing \\"YES\\" if the string is valid, and \\"NO\\" otherwise. # Examples Example 1 **Input:** ``` ()[]{} ``` **Output:** ``` YES ``` Example 2 **Input:** ``` ([)] ``` **Output:** ``` NO ``` Example 3 **Input:** ``` {[()]} ``` **Output:** ``` YES ```","solution":"def is_valid_parentheses(s): Determines if the input string s is a valid string of parentheses. Returns \\"YES\\" if the string is valid and \\"NO\\" otherwise. stack = [] matching_parentheses = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in matching_parentheses: top_element = stack.pop() if stack else \'#\' if matching_parentheses[char] != top_element: return \\"NO\\" else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\""},{"question":"Given an undirected connected graph with `n` vertices and `m` edges, where each edge has a positive weight. Determine the sum of weights in the minimum spanning tree of the graph. Input The first line contains integers `n` and `m` (`1 ≤ n ≤ 1000`, `0 ≤ m ≤ 10000`). The following `m` lines contain three integers `u`, `v`, and `w` (`1 ≤ u, v ≤ n`, `1 ≤ w ≤ 1000`), representing an edge connecting vertex `u` to vertex `v` with weight `w`. Output Print the sum of weights in the minimum spanning tree. Note: The graph is guaranteed to be connected. Examples Input 4 5 1 2 5 1 3 3 4 2 7 3 4 4 2 3 6 Output 12","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): # Sort edges by weight edges.sort(key=lambda x: x[2]) parent = [] rank = [] # Initialize parent and rank for each vertex for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 for edge in edges: u, v, w = edge root_u = find(parent, u - 1) root_v = find(parent, v - 1) if root_u != root_v: mst_weight += w union(parent, rank, root_u, root_v) return mst_weight def minimum_spanning_tree(n, m, edges): return kruskal(n, edges) # Example usage n = 4 m = 5 edges = [ (1, 2, 5), (1, 3, 3), (4, 2, 7), (3, 4, 4), (2, 3, 6) ] print(minimum_spanning_tree(n, m, edges)) # Outputs 12"},{"question":"Vacation Planner Anurag wants to plan a trip with his friends and is looking at various travel packages. Each package is available for a certain number of days and has a fixed cost per day. Anurag wants to extend the number of days he can spend on vacation given his budget. He can buy multiple packages (even if they overlap in terms of days) as long as the total cost does not exceed his budget. Given the budget Anurag has and information of multiple travel packages, determine the maximum number of days he can plan for his vacation. Input The first line contains T, the number of test cases. Each test case consists of: - An integer B, the budget Anurag has. - An integer P, the number of travel packages available. - Next P lines contain two integers each: d and c, where d is the number of days for which the package is available and c is the cost per day for that package. Output For each test case, output a single line containing the maximum number of days Anurag can plan for his vacation. Constraints 1 <= T <= 10 1 <= B <= 10^5 1 <= P <= 100 1 <= d, c <= 10^4 Time limit: 1s Sample Input 2 100 3 10 8 5 20 8 10 50 2 15 3 10 5 Sample Output 12 16 Explanation For the first case, Anurag can buy the first package (10 days, 8 cost/day) and the third package (8 days, 10 cost/day) using his budget of 100. This gives him a total of 12 days of vacation (as he buys 10 days from the first package for 80 and then 2 days from the third package for 20). For the second case, Anurag can buy the first package (15 days, 3 cost/day) and second package (10 days, 5 cost/day) with his budget of 50. This gives him a total of 16 days (as he buys 15 days from the first package for 45 and 1 day from the second package for 5).","solution":"def max_vacation_days(T, test_cases): results = [] for t in range(T): budget, num_packages, packages = test_cases[t] days = [] for d, c in packages: days.extend([d] * (budget // (d * c))) days.sort(reverse=True) total_days = 0 remaining_budget = budget for d in days: cost_per_day = next(c for x, c in packages if x == d) max_days = remaining_budget // cost_per_day actual_days = min(max_days, d) total_days += actual_days remaining_budget -= actual_days * cost_per_day if remaining_budget <= 0: break results.append(total_days) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): budget = int(lines[index]) num_packages = int(lines[index + 1]) packages = [] for i in range(num_packages): d, c = map(int, lines[index + 2 + i].split()) packages.append((d, c)) test_cases.append((budget, num_packages, packages)) index += 2 + num_packages return T, test_cases"},{"question":"Westeros is holding a grand tournament, and Arya Stark has been chosen to manage the scheduling of the duels. The tournament has two stages. In the first stage, every warrior can challenge any other warrior to a duel. If a duel happens between warrior `a` and warrior `b`, warrior `a` wins if `a` > `b`. However, warriors can only challenge each other exactly once, and no one can challenge themselves. Your task is to determine the number of unique duels that would occur where there is a distinct winner between the two warriors if the warriors are numbered sequentially from `1` to `n`. Input format: The first line contains the number of test cases. Every test case contains an integer `n`, the number of warriors. Output format: For each test case, print the number of unique duels where there is a distinct winner. Constraints: 1 ≤ Test Cases ≤ 1000 1 ≤ n ≤ 10^6 SAMPLE INPUT 2 3 5 SAMPLE OUTPUT 3 10 Explanation: In the first case with `3` warriors (1, 2, 3): - Possible duels: (2, 1), (3, 1), (3, 2) - Number of unique duels: 3 In the second case with `5` warriors (1, 2, 3, 4, 5): - Possible duels: (2, 1), (3, 1), (3, 2), (4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3), (5, 4) - Number of unique duels: 10","solution":"def count_unique_duels(n): Returns the number of unique duels where there is a distinct winner between the warriors numbered 1 to n. Args: n : int : Number of warriors Returns: int : Number of unique duels # Every warrior can challenge every other warrior that comes before him return n * (n - 1) // 2 def solve(test_cases): Solves each test case by calculating the number of unique duels for each number of warriors. Args: test_cases : list : List of integers representing the number of warriors for each test case Returns: list : List of integers where each integer represents the number of unique duels results = [] for n in test_cases: results.append(count_unique_duels(n)) return results"},{"question":"Alice is playing a game with a sequence of integers. She can perform the following operation any number of times: choose two adjacent elements of the sequence, remove them, and insert their sum back into the sequence at the same position. The goal is to minimize the sum of the elements in the sequence after performing any number of such operations. Given the initial sequence of integers, write a program to determine the minimum possible final sum of the sequence after performing the operations described as many times as you like. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of the sequence. Output Print a single integer — the minimum possible final sum of the sequence. Examples Input 5 1 2 3 4 5 Output 15 Input 3 5 5 5 Output 15 Input 4 1 1 1 1 Output 4","solution":"def min_possible_final_sum(n, sequence): Determines the minimum possible final sum of the sequence. return sum(sequence)"},{"question":"The kingdom is on the brink of war, and as the chief strategist, you have been tasked with arranging the kingdom’s troops in the most optimal way to defend against incoming attacks. The battlefield is represented as a 2D grid where each cell can either be empty or occupied by an enemy. You have a number of troop divisions at your disposal, each of which can occupy an entire contiguous square subgrid on the battlefield to intercept enemy forces. Your goal is to place the least number of troop divisions required to cover all enemy-occupied cells. Write a program that determines the minimum number of troop divisions required to cover all enemy-occupied cells on an (NxM) battlefield grid. Input The input consists of multiple datasets. Each dataset is given in the following format: > N M > row1 > row2 > ... > rowN The first line contains two integers (N) and (M) representing the dimensions of the grid (1 ≤ (N), (M) ≤ 50). The following (N) lines each contain (M) characters representing the battlefield grid. An empty cell is represented by a \'.\', while an enemy-occupied cell is represented by a \'#\'. The end of the input consists of two zeros separated by space. Output For each dataset, output the minimum number of troop divisions required to cover all enemy-occupied cells on one line. Example Input 5 5 .#... . .#.#. ..#.. ..... 3 3 # . # 0 0 Output 2 1 Explanation In the first dataset: . .#.#. can be covered by 2 troop divisions forming 3x3 squares, one positioned at (1, 1) and the other at (2, 3). In the second dataset: # . # can be covered by 1 troop division forming a 3x3 square positioned at (0, 0).","solution":"def min_troop_divisions(grid): n = len(grid) m = len(grid[0]) visited = [[False] * m for _ in range(n)] def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() for nx, ny in [(cx+1, cy), (cx-1, cy), (cx, cy+1), (cx, cy-1)]: if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'#\': visited[nx][ny] = True stack.append((nx, ny)) divisions_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'#\' and not visited[i][j]: divisions_count += 1 visited[i][j] = True dfs(i, j) return divisions_count def process_input(data): results = [] i = 0 while i < len(data): n, m = map(int, data[i].split()) if n == 0 and m == 0: break grid = data[i+1:i+1+n] results.append(min_troop_divisions(grid)) i += n + 1 return results"},{"question":"A company wants to implement a security logging system that records unique login attempts made by employees. Each employee has a unique employee ID, and each login attempt is recorded by the system with a timestamp. To ensure the system behaves correctly, you need to write a function that processes a list of login attempts and returns a list of unique login attempts in order of their first occurrence. Constraints: 1 ≤ T ≤ 100 1 ≤ Employee ID ≤ 1000 1 ≤ Number of login attempts ≤ 100 timestamp is a positive integer Input: The first line of input contains T, the number of test cases. The first line of each test case contains an integer N, the number of login attempts. The next N lines contain two integers each: the employee ID and the timestamp of the login attempt. Output: Output contains T lines, each line contains the unique login attempts (employee IDs) in the order of their first occurrence in the format \\"employee_id[timestamp]\\". SAMPLE INPUT 2 5 101 1 102 2 101 3 103 4 102 5 6 201 10 202 11 201 12 203 13 202 14 204 15 SAMPLE OUTPUT 101[1] 102[2] 103[4] 201[10] 202[11] 203[13] 204[15]","solution":"def process_login_attempts(test_cases): results = [] for test_case in test_cases: N, attempts = test_case unique_logins = {} for emp_id, timestamp in attempts: if emp_id not in unique_logins: unique_logins[emp_id] = timestamp formatted_attempts = [f\\"{eid}[{ts}]\\" for eid, ts in unique_logins.items()] results.append(\\" \\".join(formatted_attempts)) return results def format_input(raw_input): lines = raw_input.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) attempts = [] for i in range(1, N+1): emp_id, timestamp = map(int, lines[index + i].split()) attempts.append((emp_id, timestamp)) test_cases.append((N, attempts)) index += N + 1 return test_cases def format_output(results): return \\"n\\".join(results)"},{"question":"You are given a collection of coins, where each coin has an integer value. Your goal is to determine if it is possible to select a subset of these coins that sums up to a given value `M`. Input The input consists of several test cases (not more than 10). Each test case begins with a line containing the integer `n` (1 ≤ n ≤ 100), the number of coins, followed by a line containing `n` integers representing the values of each coin. The next line contains the integer `M` (1 ≤ M ≤ 10,000), the target sum. Output For each test case, output a single line: \\"YES\\" if it is possible to select a subset of the coins that sums up to `M`, otherwise \\"NO\\". Example Input: 3 3 34 4 12 5 2 9 5 1 2 3 4 5 11 Output: YES YES Explanation: For the first test case, you can select the subset {4, 5} which sums up to 9. For the second test case, you can select the subset {1, 2, 3, 5} which sums up to 11.","solution":"def can_sum_to_target(coins, target): Determines if a subset of the given coins can sum up to the target. Parameters: coins (list of int): The list of coin values. target (int): The target sum to achieve. Returns: str: \\"YES\\" if a subset sum equals to the target, otherwise \\"NO\\". n = len(coins) dp = [False] * (target + 1) dp[0] = True for coin in coins: for j in range(target, coin - 1, -1): dp[j] |= dp[j - coin] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"Amy is a prolific author. While working on her latest novel, she came up with an interesting puzzle involving strings. In her game, a string is considered to be \\"palindromic\\" if it reads the same forwards and backwards. A string can be transformed into a palindromic string by adding characters to its end. For instance, by adding the characters \\"dc\\" to the end of the string \\"abcd\\", we get the palindromic string \\"abcdcba\\". Write a program that, given a string, finds the shortest palindromic string that can be obtained by appending characters to its end. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000), which consists of lowercase English letters only. Output Output a single line containing the shortest palindromic string that can be obtained by appending characters to the end of the input string. Example Input race Output racecar Input ab Output aba","solution":"def shortest_palindromic_by_appending(s): Given a string, finds the shortest palindromic string that can be obtained by appending characters to its end. def is_palindrome(x): return x == x[::-1] if is_palindrome(s): return s for i in range(len(s)): if is_palindrome(s[i:]): return s + s[:i][::-1] return s + s[:-1][::-1]"},{"question":"You are given an array of n integers and a target integer k. Write a program to determine if there are two distinct indices i and j in the array such that the sum of the elements at these indices is equal to k. Constraints - 1 leq n leq 200,000 - -10^9 leq a_i leq 10^9 - -10^9 leq k leq 10^9 Input In the first line, an integer n, the number of elements in the array, is given. In the second line, the elements a_i (i = 0, 1, .. n-1) are given separated by space characters. The third line contains the target integer k. Output Return \\"YES\\" if there are two distinct indices i and j such that a_i + a_j = k, and \\"NO\\" otherwise. Examples Input 5 1 2 3 4 5 8 Output YES Input 4 -1 0 3 2 4 Output NO","solution":"def has_pair_with_sum(arr, k): seen = set() for number in arr: if k - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\" # Example usage n = 5 arr = [1, 2, 3, 4, 5] k = 8 print(has_pair_with_sum(arr, k)) # Output: YES n = 4 arr = [-1, 0, 3, 2] k = 4 print(has_pair_with_sum(arr, k)) # Output: NO"},{"question":"Tara loves playing with numbers, and she is particularly fond of prime numbers. She is generating a sequence of prime numbers and wants to know the k-th prime number in the generated sequence. Because prime numbers are a fundamental concept and useful in various fields, she decides to write a program for this task. Write a function that takes an integer k and returns the k-th prime number. Constraints: * 1 ≤ k ≤ 200 Input The input is a single integer k. Output Output the k-th prime number. Example Input 5 Output 11 Input 10 Output 29","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def kth_prime(k): count = 0 num = 1 while count < k: num += 1 if is_prime(num): count += 1 return num"},{"question":"You are given a sequence of N integers. Your task is to determine if there are three consecutive integers in the sequence that form an arithmetic progression. An arithmetic progression (AP) is a sequence of numbers in which the difference between consecutive terms is constant. Formally, a sequence a1, a2, ..., ak is an arithmetic progression if for every i (1 ≤ i < k), ai+1 - ai is the same. Input - The first line of input contains an integer N, the number of elements in the sequence. - The second line contains N integers, the elements of the sequence. Output - Print \\"YES\\" if there exists a triplet of consecutive integers in the sequence that form an arithmetic progression. Otherwise, print \\"NO\\". Constraints - 3 ≤ N ≤ 10^6 - Each element of the sequence will be an integer between -10^9 and 10^9 (inclusive). Example Input: 6 1 3 5 7 9 11 Output: YES Explanation: The numbers 1, 3, and 5 form an arithmetic progression with a common difference of 2. Hence, the output is \\"YES\\".","solution":"def has_consecutive_ap_triplet(n, sequence): Determines if there are three consecutive integers in the sequence that form an arithmetic progression. Args: n : int : number of elements in the sequence sequence : list of int : the sequence of integers Returns: str : \\"YES\\" if there exists a triplet of consecutive integers that form an arithmetic progression, otherwise \\"NO\\" for i in range(n - 2): if sequence[i+1] - sequence[i] == sequence[i+2] - sequence[i+1]: return \\"YES\\" return \\"NO\\""},{"question":"Valera has a large grid of cells with N rows and M columns. Each cell (i, j) can be denoted by its row and column indices, where 1 ≤ i ≤ N and 1 ≤ j ≤ M. The robot starts in the upper-left corner of the grid, i.e., cell (1,1). The robot has a sequence of instructions in the form of moves (U, D, L, R) where U is Up (decrement row index), D is Down (increment row index), L is Left (decrement column index), and R is Right (increment column index). The robot can move one cell in the direction specified by each instruction. Before the robot starts moving, Valera can place obstacles in any number of cells of the grid, excluding the cell (1,1). If an obstacle is placed on a cell, the robot will skip any move that tries to enter the cell with an obstacle. Consequently, the robot will stay in its current cell for that move. Also, Valera specifies a finish cell (fx, fy) that the robot must exactly reach after executing all the instructions. Valera wants to know the minimum number of obstacles needed to ensure the robot reaches the finish cell successfully and in how many distinct ways these minimum obstacles can be placed. Input: The first line contains two integers N and M (1 ≤ N, M ≤ 1000), the dimensions of the grid. The second line contains a sequence of characters s1s2...sk (1 ≤ k ≤ 106), consisting only of letters \\"U\\", \\"D\\", \\"L\\", and \\"R\\", representing the robot’s instructions. The third line contains two integers fx and fy (1 ≤ fx ≤ N, 1 ≤ fy ≤ M), the coordinates of the finish cell. Output: Print a single integer — the number of ways to place the minimum number of obstacles so that the robot reaches the finish cell (fx, fy) exactly after completing all the instructions. It\'s guaranteed that this number fits into a 64-bit signed integer type. Example: Input: 3 3 DDRR 3 3 Output: 1 Note: In the example, the robot must perform the moves \\"DDRR\\". The robot starts at cell (1,1). If Valera does nothing, the robot will move down twice to (3,1) and move right twice to (3,3), successfully reaching the finishing cell (3,3). Therefore, no obstacles are needed and there is only 1 way to ensure this.","solution":"def count_ways_to_place_min_obstacles(N, M, instructions, fx, fy): # Initial positions x, y = 1, 1 # Directions move = { \'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1) } # Calculate the robot\'s final position without any obstacles for inst in instructions: dx, dy = move[inst] x, y = x + dx, y + dy # If the robot ends up in the proper cell without any obstacles if (x, y) == (fx, fy): return 1 # The minimum number of obstacles needed to be placed such that the robot ends up exactly at (fx, fy) def simulate_with_obstacles_count(instructions, target_x, target_y): x, y = 1, 1 obstructed_positions = set() for inst in instructions: dx, dy = move[inst] next_x, next_y = x + dx, y + dy # Check if going next crosses the boundary if 1 <= next_x <= N and 1 <= next_y <= M: x, y = next_x, next_y if x == target_x and y == target_y: obstructed_positions.add((next_x, next_y)) # Do not actually move to (next_x, next_y) but instead stay in current cell x, y = x - dx, y - dy return len(obstructed_positions), obstructed_positions # Calculate the minimum obstacles needed to be placed min_obstacles, obstructed_positions = simulate_with_obstacles_count(instructions, fx, fy) return min_obstacles # Test the function with an example print(count_ways_to_place_min_obstacles(3, 3, \'DDRR\', 3, 3)) # Output: 0"},{"question":"Given a list of integers, your task is to reorder them so that the difference between consecutive elements is maximized. Input: The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the list. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the list. Output: Output a single line containing the reordered list of integers such that the difference between consecutive elements is maximized. If there are multiple solutions, print any one of them. Examples: Input: 4 1 3 7 5 Output: 1 7 3 5 Input: 3 2 4 6 Output: 2 6 4 Note: In the first example, by reordering the list as [1, 7, 3, 5], the differences are |1-7| = 6, |7-3| = 4, |3-5| = 2 which sum up to 12. Other reordering such as [7, 1, 5, 3] will also be valid with differences resulting in a similar characteristic.","solution":"def maximize_consecutive_diff(n, arr): Reorders the array such that the difference between consecutive elements is maximized. arr.sort() result = [] # To store the reordered array. i, j = 0, n - 1 while i <= j: if j >= i: result.append(arr[j]) j -= 1 if i <= j: result.append(arr[i]) i += 1 return result"},{"question":"In the kingdom of Althidor, there lies a mystical garden with N magic trees. Each tree in the garden has its own unique magical power level. The gardener, who is also a wizard, has the power to enchant the trees to increase their magic level. However, enchanting one tree affects the magic level of its neighboring trees as well. To optimize his magic garden, the wizard needs your help to calculate the maximum possible magic power of a single tree after a certain number of enchantments. The enchantment process is defined as follows: - You can perform K enchantments. - For each enchantment, you select one tree and increase its magic level by 1. - When you increase the magic level of a tree, the magic levels of its neighboring trees (if any) are also increased by 1. Your task is to determine the maximum possible magic level of any single tree after exactly K enchantments. Input Format: The first line of input contains two integers, N (number of trees) and K (number of enchantments). The second line contains N integers, where the ith integer represents the initial magic level of the ith tree. Output Format: Output a single integer, indicating the maximum possible magic level of any tree after exactly K enchantments. Constraints: 1 ≤ N ≤ 1000 1 ≤ K ≤ 10000 0 ≤ Initial magic level of each tree ≤ 1000 Example Input 1: 5 3 1 2 3 4 5 Example Output 1: 7 Example Input 2: 3 5 5 3 1 Example Output 2: 8 Explanation: For example input 1: - Initially, the magic levels of the trees are [1, 2, 3, 4, 5]. - Enchant tree 3 (0-indexed), resulting in [2, 3, 4, 5, 6]. - Enchant tree 4, resulting in [2, 3, 5, 6, 7]. - Enchant tree 2, resulting in [2, 4, 6, 7, 7]. The maximum possible magic power of a single tree after 3 enchantments is 7. For example input 2: - Initially, the magic levels of the trees are [5, 3, 1]. - Enchant tree 0, resulting in [6, 4, 2]. - Enchant tree 1, resulting in [7, 5, 3]. - Enchant tree 2, resulting in [8, 6, 4]. - Enchant tree 0 again, resulting in [9, 7, 5]. - Enchant tree 1 again, resulting in [10, 8, 6]. The maximum possible magic power of a single tree after 5 enchantments is 10. Note: This problem requires considering all possible ways to apply the enchantments to determine the maximum possible magic power of any tree.","solution":"def maximize_magic_power(N, K, magic_levels): Returns the maximum possible magic level of any tree after exactly K enchantments. Parameters: N (int): Number of trees. K (int): Number of enchantments. magic_levels (list): Initial magic levels of the trees. Returns: int: Maximum possible magic level of any tree after K enchantments. # We will add K to the magic level of the highest initial magic level max_initial_magic = max(magic_levels) return max_initial_magic + K"},{"question":"You are given a string of lowercase Latin letters. You are allowed to remove at most one character from this string. Your task is to determine if it is possible to obtain a palindrome by removing exactly one character or not removing any character at all. Input The first line of input contains an integer T denoting the number of test cases. Each of the following T lines contains a single string consisting of lowercase Latin letters. Output For each test case, print \\"YES\\" if it is possible to obtain a palindrome by removing at most one character. Otherwise, print \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ length of each string ≤ 1000 Example Input: 3 abca racecar abcdef Output: YES YES NO Explanation: In the first case, by removing character \'c\', the string \\"abca\\" can be transformed into \\"aba\\", which is a palindrome. In the second case, the string \\"racecar\\" is already a palindrome, so no characters need to be removed. In the third case, no single removal of a character can make \\"abcdef\\" a palindrome.","solution":"def is_palindrome(s): return s == s[::-1] def can_form_palindrome(s): if is_palindrome(s): return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Try removing either left or right character without_left = s[left+1:right+1] without_right = s[left:right] return is_palindrome(without_left) or is_palindrome(without_right) left += 1 right -= 1 return False def palindrome_check(T, test_cases): results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Tommy is a passionate gardener. He has a rectangular garden of size (n times m) (n rows and m columns). Each cell in the garden either contains soil that can be cultivated, represented by 1, or a pond that cannot be used for planting, represented by 0. Tommy wants to fence off the largest possible rectangular sub-garden of soil cells only. Help Tommy determine the area of this largest rectangular sub-garden. Input The first line contains two integers (n) and (m) (1 ≤ (n), (m) ≤ 100) — the dimensions of the garden. Each of the following (n) lines contains (m) integers (each either 0 or 1) representing the garden. Output Print a single integer representing the area of the largest rectangular sub-garden that contains only soil cells. Examples Input 4 5 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 0 1 1 Output 6 Input 3 3 1 0 1 0 1 0 1 0 1 Output 1 Note In the first example, the largest possible rectangular sub-garden of soil cells is the 2-by-3 sub-garden located in rows 2 and 3, columns 3 through 5. Its area is 6. In the second example, the largest possible rectangular sub-garden of soil cells can only be any single 1 in the grid, with an area of 1.","solution":"def maximalRectangle(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) heights = [0] * m max_area = 0 for row in matrix: for i in range(m): if row[i] == 0: heights[i] = 0 else: heights[i] += 1 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area"},{"question":"Problem Statement Bob is an electrical engineer working on designing a network of electronic components. He has a set of resistors that he wants to connect either in series or parallel to achieve a specific total resistance. Bob needs your help to determine whether a given set of resistors can be combined to achieve a desired resistance value. The rules for combining resistors are as follows: - When resistors are connected in series, the total resistance is the sum of their individual resistances: ( R_{total} = R_1 + R_2 + ... + R_n ) - When resistors are connected in parallel, the total resistance is given by the reciprocal of the sum of the reciprocals of the individual resistances: ( frac{1}{R_{total}} = frac{1}{R_1} + frac{1}{R_2} + ... + frac{1}{R_n} ) Given a set of resistors and a target resistance, write a program to determine if it is possible to combine the resistors in either series, parallel, or both configurations to achieve the target resistance. Input The input consists of multiple test cases. Each test case is formatted as follows: n target R1 R2 ... Rn - The first line contains two integers, n (1 ≤ n ≤ 10) and target (0.1 ≤ target ≤ 1000), where n is the number of resistors and target is the desired total resistance. - The second line contains n floating-point numbers ( R1, R2, ldots, Rn ) (0.1 ≤ ( Ri ) ≤ 100) representing the resistances of the resistors. The input is terminated by a line containing two zeroes. Output For each test case, output \\"possible\\" if it is possible to combine the resistors to achieve the target resistance value, and \\"impossible\\" otherwise. Sample Input 3 10 2.0 3.0 5.0 4 5 2.5 7.5 10.0 20.0 0 0 Sample Output possible impossible Example Input 3 10 2.0 3.0 5.0 4 5 2.5 7.5 10.0 20.0 0 0 Output possible impossible","solution":"def is_combination_possible(resistors, target): from itertools import combinations from itertools import chain n = len(resistors) def series_resistance(comb): return sum(comb) def parallel_resistance(comb): return 1 / sum(1 / r for r in comb) # Generate all non-empty combinations of resistors all_combinations = chain.from_iterable(combinations(resistors, r) for r in range(1, n + 1)) for comb in all_combinations: if abs(series_resistance(comb) - target) < 1e-6 or abs(parallel_resistance(comb) - target) < 1e-6: return \\"possible\\" return \\"impossible\\" def process_input(input_data): lines = input_data.strip().split(\'n\') results = [] i = 0 while i < len(lines): n, target = map(float, lines[i].split()) n = int(n) if n == 0 and target == 0: break resistors = list(map(float, lines[i+1].split())) results.append(is_combination_possible(resistors, target)) i += 2 return results"},{"question":"Bob has been given a new task this holiday season to decorate his Christmas tree. He has several types of decorations (n different types), and each type consists of an unlimited number of identical decorative items. Bob\'s specific requirement is to decorate the tree using exactly m decorations. Each decoration contributes uniquely to the tree\'s beauty, so decorations of the same type look the same to Bob. Bob wants to distribute these m decorations on the tree in such a way that he gets the highest possible number of unique decorations on the tree. In other words, he wants to maximize the number of different types of decorations. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^9) — the number of types of decorations and the total number of decorations Bob wants to use. Output Print a single integer — the maximum number of different types of decorations Bob can use while decorating the tree. Examples Input 3 5 Output 3 Input 4 10 Output 4 Explanation In the first example, Bob can use each of the three types once, and he still has 2 decorations left which he can use freely. In the second example, Bob can use each of the four types once, and he still has 6 decorations left.","solution":"def max_unique_decorations(n, m): Returns the maximum number of unique decoration types that can be used. # The maximum number of unique decorations Bob can use is the minimum # between the number of decoration types and the total number of decorations return min(n, m)"},{"question":"A tech-savvy monk loves to interact with his devices. He recently bought a smartphone that allows him to install various apps. Each app consumes a certain amount of space on his phone. The phone has a limited amount of storage space available. He can perform two types of operations: 1) Install App: The monk installs an app on his phone, which consumes a certain amount of space. If there is enough space available on the phone, the app is installed successfully; otherwise, the installation fails. 2) Uninstall App: The monk uninstalls an app from his phone, freeing up the space consumed by the app. If the app is not installed on the phone, the uninstallation operation fails. Help the monk manage his phone\'s storage by handling these operations. Input: The first line contains an integer Q, the number of queries. The second line contains an integer S, the total storage space available on the phone. The next Q lines follow. A Type-1 (Install App) Query is indicated by two space-separated integers 1 and si (the space required by the app). A Type-2 (Uninstall App) Query is indicated by a single integer 2. Output: For each Type-1 Query, output \\"Installed\\" if the app is installed successfully, or \\"Not Enough Space\\" if the app cannot be installed due to insufficient space. For each Type-2 Query, output \\"Uninstalled\\" if an app is uninstalled successfully, or \\"No App Installed\\" if there is no app to uninstall. Constraints: 1 ≤ Q ≤ 10^5 1 ≤ S, si ≤ 10^7 SAMPLE INPUT 6 100 1 30 1 50 1 20 2 1 10 2 SAMPLE OUTPUT Installed Installed Installed Uninstalled Installed Uninstalled Explanation Initially, the phone has 100 units of space available. The monk installs an app with space=30. The monk installs an app with space=50, total used space=80. The monk installs an app with space=20, total used space=100. The monk uninstalls the last installed app, freeing up 20 units of space. The monk installs an app with space=10, total used space=90. The monk uninstalls the last installed app, freeing up 10 units of space.","solution":"def manage_storage(queries, total_space, operations): Manages the installation and uninstallation of apps on a phone with limited storage space. Args: queries (int): Number of queries. total_space (int): Total storage space available on the phone. operations (list of tuples): The operations to be performed. Each tuple represents an operation. Returns: list of str: Results of the operations. results = [] used_space = 0 installed_apps = [] for operation in operations: if operation[0] == 1: # Install App required_space = operation[1] if used_space + required_space <= total_space: used_space += required_space installed_apps.append(required_space) results.append(\\"Installed\\") else: results.append(\\"Not Enough Space\\") elif operation[0] == 2: # Uninstall App if installed_apps: last_installed_app = installed_apps.pop() used_space -= last_installed_app results.append(\\"Uninstalled\\") else: results.append(\\"No App Installed\\") return results"},{"question":"Write a function `find_most_frequent` that accepts a list of integers and returns the integer that appears most frequently in the list. If there are multiple integers with the same highest frequency, return the smallest one among them. Your solution needs to be efficient in terms of time complexity as the list can be very large. # Input - A single list `lst` of integers. The list will always contain at least one integer. You can assume that the list has at most (10^6) elements and the integer values are in the range (-10^9) to (10^9). # Output - An integer that appears the most frequently in the input list. In case of a tie, return the smallest integer. # Example ```python find_most_frequent([1, 3, 2, 1, 4, 3, 2, 1, 3, 3, 4]) # Output: 3 find_most_frequent([5, 5, 6, 6, 7]) # Output: 5 find_most_frequent([1, 2, 2, 1, 3]) # Output: 1 ``` # Note - In the first example, the integer `3` appears 4 times, which is more frequently than any other integer. - In the second example, both `5` and `6` appear 2 times, but `5` is the smallest of the most frequent integers. - In the third example, both `1` and `2` appear 2 times, but `1` is the smallest of the most frequent integers. Use the following template: ```python def find_most_frequent(lst): # Your code here ```","solution":"def find_most_frequent(lst): from collections import Counter # Create a counter of the frequencies of each integer in the list counts = Counter(lst) # Find the maximum frequency max_freq = max(counts.values()) # Collect all numbers with the maximum frequency most_frequent_numbers = [num for num, freq in counts.items() if freq == max_freq] # Return the smallest number among the most frequent numbers return min(most_frequent_numbers)"},{"question":"You are tasked with building a simplified traffic simulation for a futuristic city. In this city, there are several intersections connected by one-way streets. Your program needs to determine if there is a traffic cycle within the city\'s road network, and if so, identify the length of the shortest cycle. Input The input consists of several datasets. Each dataset describes the road network and has the following format: n m a1 b1 a2 b2 : am bm Where: - n (2 <= n <= 100) is the number of intersections. - m (1 <= m <= 5000) is the number of one-way streets. - ai and bi (1 <= ai, bi <= n) are unique integers representing a one-way street from intersection ai to intersection bi. The integers n and m are followed by m lines, each containing two integers ai and bi which represent a directed road from intersection ai to intersection bi. The end of the input is indicated by a line containing \'0 0\'. Output For each dataset, if there is no traffic cycle in the network, output \\"NO CYCLE\\" on one line. If there is a traffic cycle, output the length of the shortest cycle on one line. Example Input 5 7 1 2 2 3 3 4 4 5 5 3 5 1 4 2 0 0 4 3 1 2 2 3 3 1 0 0 Output 3 3","solution":"from collections import defaultdict, deque def find_shortest_cycle(n, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) def bfs(start): dist = {i: float(\'inf\') for i in range(1, n + 1)} parent = {i: None for i in range(1, n + 1)} queue = deque([(start, 0)]) dist[start] = 0 while queue: node, d = queue.popleft() for neighbor in graph[node]: if dist[neighbor] == float(\'inf\'): dist[neighbor] = d + 1 parent[neighbor] = node queue.append((neighbor, d + 1)) elif neighbor == start: return dist[node] + 1 return float(\'inf\') shortest_cycle = float(\'inf\') for i in range(1, n + 1): cycle_len = bfs(i) if cycle_len < shortest_cycle: shortest_cycle = cycle_len return shortest_cycle if shortest_cycle != float(\'inf\') else \\"NO CYCLE\\" def traffic_simulation(datasets): results = [] for n, m, edges in datasets: result = find_shortest_cycle(n, edges) if result == \\"NO CYCLE\\": results.append(\\"NO CYCLE\\") else: results.append(str(result)) return results"},{"question":"Eve the Explorer is an enthusiastic adventurer who loves exploring a grid world of size n x m. Each cell in the grid has a certain elevation value. To make her journey exciting, she plans to move from one cell to another such that she always moves to an adjacent cell (up, down, left, or right) with a higher elevation value in the fewest possible steps. However, due to recent rains, some cells are flooded, and Eve cannot pass through them. Your task is to help Eve start from her current position (sx, sy) and reach her destination (dx, dy) in the minimum number of steps. If it is impossible to reach the destination, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Next n lines follow, each containing m integers — the elevation values of the grid cells (−10^9 ≤ elevation[i][j] ≤ 10^9). Then, an integer f (0 ≤ f ≤ n * m) representing the number of flooded cells is given. The next f lines contain two integers xi and yi (0 ≤ xi < n, 0 ≤ yi < m), representing the coordinates of flooded cells. Finally, the last line contains four integers sx, sy, dx, dy (0 ≤ sx, sy, dx, dy < n, m) — the starting and destination coordinates respectively. Output Output a single integer, the minimum number of steps to reach the destination, or -1 if it is impossible. Examples Input 5 5 1 2 3 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 2 1 1 3 3 0 0 4 4 Output 8 Input 3 3 1 2 3 4 5 6 7 8 9 1 1 1 0 0 2 2 Output 4 Input 3 3 1 2 3 4 5 6 7 8 9 3 0 1 1 1 2 1 0 0 2 2 Output -1 Note In the first sample, Eve can traverse the grid as follows: (0,0) → (0,1) → (0,2) → (1,2) → (2,2) → (2,3) → (3,3) → (3,4) → (4,4), covering a total of 8 steps. In the second sample, Eve\'s path could be (0,0) → (1,0) → (2,0) → (2,1) → (2,2), covering 4 steps. In the third sample, Eve cannot traverse from (0,0) to (2,2) without violating the rules of elevation increase or flooded cells restriction; hence the output is -1.","solution":"from collections import deque def min_steps_to_destination(n, m, elevation, flooded_cells, start, destination): sx, sy = start dx, dy = destination # Initiate the grid with flooded cells as \'-1\' grid = [[elevation[i][j] for j in range(m)] for i in range(n)] for fx, fy in flooded_cells: grid[fx][fy] = -1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(sx, sy, 0)]) # Each entry: (current x, current y, current steps) visited = set([(sx, sy)]) while queue: x, y, steps = queue.popleft() # If we reach destination if (x, y) == (dx, dy): return steps for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: if grid[nx][ny] != -1 and grid[nx][ny] > grid[x][y]: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) # Destination is not reachable return -1"},{"question":"Sarah is fascinated by a pattern she observed in her backyard, involving falling leaves. She decides to simulate this on her computer. You are given an integer n, denoting the number of leaves, and an array h of n integers, where h_i represents the initial height from which each leaf is falling. Sarah wants to perform k operations on this array. In each operation, she does the following: 1. Find the minimum height m in the array. 2. For each leaf i, if its current height is h_i, set h_i to h_i - m. Your task is to determine the final state of the array after k operations. Input The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. The first line of each test case contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) – the number of leaves and the number of operations. The second line of each test case contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) – the initial heights of the leaves. Output For each test case, print the final array after k operations. Example Input 2 3 2 5 3 7 4 3 10 20 10 40 Output 4 2 6 0 10 0 30 Note In the first test case: - Initially, the array is [5, 3, 7]. Minimum height m is 3. - After the first operation: [5-3, 3-3, 7-3] = [2, 0, 4]. - The new minimum height m is 0. - After the second operation: [2-0, 0-0, 4-0] = [2, 0, 4]. In the second test case: - Initially, the array is [10, 20, 10, 40]. Minimum height m is 10. - After the first operation: [10-10, 20-10, 10-10, 40-10] = [0, 10, 0, 30]. - The new minimum height m is 0. - After the second and third operations: [0, 10, 0, 30].","solution":"def simulate_falling_leaves(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] heights = test_cases[i][1] min_height = min(heights) # If min_height > 0, applying operations will occur some changes if min_height > 0: for i in range(n): if heights[i] != 0: heights[i] -= min_height results.append(heights) return results"},{"question":"There are n houses along a straight street in Byteland. Each house has a certain number of candies that can be collected. Unfortunately, due to the strange candy-collecting laws in Byteland, you cannot collect candies from two consecutive houses. You need to find the maximum candies you can collect following these rules. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of houses. The second line contains n non-negative integers c1, c2, ..., cn (0 ≤ ci ≤ 1,000) — the number of candies in each house. Output Print a single integer — the maximum number of candies you can collect without collecting from two consecutive houses. Examples Input 5 3 2 5 10 7 Output 15 Input 3 1 2 3 Output 4 Note In the first example, you can collect candies from houses 1, 3, and 5: 3 + 5 + 7 = 15. In the second example, you can collect candies from houses 1 and 3, or just house 2 and house 3: max(1 + 3, 2 + 3) = 4.","solution":"def max_candies(n, houses): if n == 0: return 0 elif n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + houses[i]) return dp[-1] # Example usage if __name__ == \\"__main__\\": n = int(input().strip()) houses = list(map(int, input().strip().split())) print(max_candies(n, houses))"},{"question":"Gizmo the explorer has discovered a mysterious cave system that contains ancient artifacts. Each artifact emits a specific amount of energy, and Gizmo wants to collect these artifacts in such a way that the total energy collected is maximized. However, Gizmo can only carry artifacts with a combined weight that does not exceed his carrying capacity. Given a list of artifacts, each with a weight and an energy value, and a maximum carrying capacity, find the maximum total energy that Gizmo can collect. You can assume that Gizmo can take fractions of artifacts, so this is a variation of the knapsack problem known as the fractional knapsack problem. Input The first line contains two space-separated integers n and W (1 ≤ n ≤ 104, 1 ≤ W ≤ 104) — the number of artifacts and the maximum carrying capacity of Gizmo’s backpack. The next n lines each contain two space-separated integers wi and ei (1 ≤ wi, ei ≤ 104) — the weight and energy of the i-th artifact. Output Print a single real number — the maximum possible total energy Gizmo can collect. The answer will be considered valid if its absolute or relative error does not exceed 10^-6. Examples Input 3 50 10 60 20 100 30 120 Output 240.000000 Input 2 3 2 30 3 50 Output 50.000000","solution":"def get_maximum_energy(n, W, artifacts): Given a list of artifacts with weight and energy values, and a maximum carrying capacity, find the maximum total energy Gizmo can collect. Parameters: n (int): Number of artifacts. W (int): Maximum carrying capacity. artifacts (List[Tuple[int, int]]): List of tuples where each tuple contains (weight, energy) of an artifact. Returns: float: Maximum possible total energy. # Sort artifacts based on their energy to weight ratio in descending order artifacts.sort(key=lambda x: x[1]/x[0], reverse=True) max_energy = 0.0 remaining_capacity = W for weight, energy in artifacts: if remaining_capacity == 0: break if weight <= remaining_capacity: max_energy += energy remaining_capacity -= weight else: fraction = remaining_capacity / weight max_energy += energy * fraction remaining_capacity -= weight * fraction return max_energy"},{"question":"Baker Bob needs help organizing his bakery shelves. He has a collection of `n` different types of cakes, each type represented by an integer. In order to maximize customer satisfaction, he wants to ensure that no single type of cake appears more than once across any two adjacent shelves. Given a sequence of integers representing the cakes, can you help Bob determine if it\'s possible to rearrange the cakes so that no two adjacent shelves have the same type of cake? Input The first line contains a single integer n, the number of different cake types. The second line contains n integers representing the types of cakes. Output Output \\"yes\\" without quotes if the cakes can be rearranged as specified, or \\"no\\" without quotes if it\'s not possible. Constraints 1 ≤ n ≤ 100,000 Example Input: 5 1 2 3 4 5 Output: yes Input: 3 1 1 2 Output: yes Input: 2 1 1 Output: no Explanation For the first example, the cakes can simply be placed in sequential order since they are all unique. In the second example, the cakes can be arranged as 1 2 1. In the third example, there are not enough types of cakes to avoid repeating the type 1.","solution":"from collections import Counter def can_rearrange_cakes(n, cakes): Determines if it is possible to rearrange the cakes such that no two adjacent cakes are of the same type. Parameters: - n: int, number of cakes (and types of cakes) - cakes: list of int, types of cakes Returns: - str: \\"yes\\" if it is possible to rearrange, \\"no\\" otherwise cake_counts = Counter(cakes) max_count = max(cake_counts.values()) # If the most common type of cake is more than half the number of cakes, it won\'t be possible to place them without repeating if max_count > (n + 1) // 2: return \\"no\\" return \\"yes\\""},{"question":"Given a list of strings, each string represents a sequence composed of lowercase English alphabets and digits from \'0\' to \'9\'. You need to find the longest contiguous subsequence within each string that contains unique characters. If there are multiple longest subsequences of the same length, return the first one found. Write a function that takes this list of strings as input and returns a list of strings, where each string in the output list represents the longest contiguous subsequence with unique characters from the corresponding input string. Input Format The first line contains an integer, N, the number of strings. Each of the next N lines contains a single string consisting of lowercase English alphabets and digits. Constraints 1 ≤ N ≤ 100 1 ≤ length of each string ≤ 1000 Output Format Output N lines, each containing the longest contiguous subsequence with unique characters from the corresponding input string. If multiple longest subsequences of the same length exist, return the one that appears first in the string. SAMPLE INPUT 3 abcabcbb bbbbb pwwkew SAMPLE OUTPUT abc b wke Explanation 1. For the first string \\"abcabcbb\\", the longest contiguous subsequence with unique characters is \\"abc\\", with a length of 3. 2. For the second string \\"bbbbb\\", the longest contiguous subsequence with unique characters is \\"b\\", with a length of 1. 3. For the third string \\"pwwkew\\", the longest contiguous subsequence with unique characters is \\"wke\\", with a length of 3.","solution":"def longest_unique_subsequence(strings): def get_longest_unique_subsequence(s): char_index = {} longest_subseq = \\"\\" current_subseq = \\"\\" start = 0 for end, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 current_subseq = s[start:end + 1] else: current_subseq += char char_index[char] = end if len(current_subseq) > len(longest_subseq): longest_subseq = current_subseq return longest_subseq return [get_longest_unique_subsequence(string) for string in strings]"},{"question":"Nina has just inherited a key-value mapping from her late grandfather. The mapping, however, is in disarray as the keys are not sorted and there are many duplicates. Her task is to sort the keys in ascending order and group all the values corresponding to the same key into a list of integers in the order they appear. Help Nina to restructure the mapping correctly. Input: The first line contains an integer n, the number of key-value pairs. Each of the next n lines contains a key and a value separated by a space. Output: For each unique key, print the key followed by a list of integers, representing the associated values in the order they were encountered Constraints: 1 ≤ n ≤ 1000 1 ≤ key ≤ 1000 1 ≤ value ≤ 1000 SAMPLE INPUT 5 1 10 2 20 1 15 1 10 2 25 SAMPLE OUTPUT 1 [10, 15, 10] 2 [20, 25]","solution":"def restructure_mapping(n, pairs): Restructures the input key-value pairs by sorting the keys and grouping the values from collections import defaultdict mapping = defaultdict(list) for key, value in pairs: mapping[key].append(value) sorted_mapping = {key: mapping[key] for key in sorted(mapping)} return sorted_mapping # Example usage: # pairs = [(1, 10), (2, 20), (1, 15), (1, 10), (2, 25)] # output = restructure_mapping(5, pairs) # print(output) # {1: [10, 15, 10], 2: [20, 25]}"},{"question":"A software development team is working on a new module for an application. The module requires processing a sequence of tasks, but certain tasks must be done before others due to dependencies. Each task is identified by an integer, and the dependencies are given as pairs of integers (a, b) meaning task `a` must be completed before task `b`. Given the total number of tasks `T` and a list of dependency pairs, determine the order in which the tasks can be completed. If there are multiple valid orders, return any one of them. If it is impossible to complete all tasks due to a cyclic dependency, return an empty list. Input Format: The first line contains an integer `T`, the total number of tasks. The second line contains an integer `D`, the number of dependency pairs. The next `D` lines each contain two space-separated integers `a` and `b`, representing the dependency that task `a` must be completed before task `b`. Output Format: Output a list of integers representing the order in which tasks can be completed. If no valid order exists, output an empty list. Constraints: 1 ≤ T ≤ 10^5 0 ≤ D ≤ 10^5 1 ≤ a, b ≤ T SAMPLE INPUT 4 4 1 2 2 3 3 4 1 3 SAMPLE OUTPUT [1, 2, 3, 4] Explanation There are four tasks and four dependencies. Task 1 must be completed before tasks 2 and 3, task 2 must be completed before task 3, and task 3 must be completed before task 4. One possible valid order of completing the tasks is [1, 2, 3, 4]. Note that the sample output could vary as long as the order meets the dependencies.","solution":"from collections import defaultdict, deque def find_task_order(T, dependencies): # Initialize graph and in-degree graph = defaultdict(list) in_degrees = [0] * (T + 1) # Build the graph for a, b in dependencies: graph[a].append(b) in_degrees[b] += 1 # Initialize queue with nodes having 0 in-degree queue = deque([i for i in range(1, T + 1) if in_degrees[i] == 0]) order = [] while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: in_degrees[neighbor] -= 1 if in_degrees[neighbor] == 0: queue.append(neighbor) # Check if topological sort is possible if len(order) == T: return order else: return [] # Sample input T = 4 dependencies = [(1, 2), (2, 3), (3, 4), (1, 3)] result = find_task_order(T, dependencies) print(result) # Expected output could be [1, 2, 3, 4]"},{"question":"Yasmina is trying to solve a grid traversal puzzle. She has a rectangular grid with m rows and n columns. The grid can be traversed starting from the top-left corner (1,1) to the bottom-right corner (m,n). Movement is restricted to right and down directions only. However, some cells in the grid are blocked, meaning they cannot be stepped on. Yazmina needs to find out how many different paths exist that allow her to reach the bottom-right corner without stepping on blocked cells. Input The first line contains two integers T (1 ≤ T ≤ 100), the number of test cases. Each test case consists of multiple lines. The first line of each test case contains two integers m (1 ≤ m ≤ 50) and n (1 ≤ n ≤ 50) representing the number of rows and columns in the grid, respectively. The second line contains an integer b (0 ≤ b ≤ 50), the number of blocked cells in the grid. Each of the following b lines contains two integers x and y (1 ≤ x ≤ m, 1 ≤ y ≤ n), the coordinates of a blocked cell. Output For each test case, output the number of distinct paths from the top-left corner to the bottom-right corner avoiding blocked cells. If no such path exists, output 0. Example Input 3 3 3 2 2 2 3 1 3 3 0 2 2 1 1 1 Output 1 6 0 Note In the first example, the grid is: 1 1 1 1 0 1 0 1 1 The only path is: (1,1) → (1,2) → (1,3) → (2,3) → (3,3). In the second example, all cells are unblocked so there are 6 paths: - (1,1) → (1,2) → (1,3) → (2,3) → (3,3) - (1,1) → (1,2) → (2,2) → (2,3) → (3,3) - (1,1) → (1,2) → (2,2) → (3,2) → (3,3) - (1,1) → (2,1) → (2,2) → (2,3) → (3,3) - (1,1) → (2,1) → (2,2) → (3,2) → (3,3) - (1,1) → (2,1) → (3,1) → (3,2) → (3,3) In the third example, the grid starts with a blocked cell preventing any traversal, so the output is 0.","solution":"def count_paths(m, n, blocked_cells): Returns the number of distinct paths from the top-left corner to the bottom-right corner in an m x n grid with specified blocked cells. # Create a grid to store the number of ways to reach each cell grid = [[0 for _ in range(n)] for _ in range(m)] # Initialize the starting point if (1, 1) in blocked_cells: return 0 grid[0][0] = 1 # Fill the grid for i in range(m): for j in range(n): if (i+1, j+1) in blocked_cells: grid[i][j] = 0 else: if i > 0: grid[i][j] += grid[i-1][j] if j > 0: grid[i][j] += grid[i][j-1] return grid[m-1][n-1] def solve(grid_cases): Process multiple test cases and return a list with number of paths for each case. results = [] for case in grid_cases: m, n, b, blocked_cells = case results.append(count_paths(m, n, blocked_cells)) return results"},{"question":"Christina is organizing a marathon event and needs to design a leaderboard system. The leaderboard should maintain the runners\' scores and permit updates when they finish a lap with a certain score. The challenge is to implement a method that continuously updates the leaderboard and provides the top N runners at any given moment. Your task is to design a class `Leaderboard` with the following functionalities: # Methods: 1. `addScore(playerId, score)`: Update the score of `playerId` by adding the provided score. 2. `top(N)`: Return a list of the top N playerIds sorted by their scores in descending order. If two players have the same score, the player with the smaller playerId should come first. 3. `reset(playerId)`: Reset the score of `playerId` to 0. # Input: 1. A series of operations, where each operation is one of the described methods. 2. For `addScore` operation, input will be in the format `addScore playerId score`. 3. For `top` operation, input will be in the format `top N`. 4. For `reset` operation, input will be in the format `reset playerId`. # Output: For each `top` operation, output should be a list of the top N playerIds in the specified order. # Constraints: - 1 ≤ playerId ≤ 1000 - 0 ≤ score ≤ 1000 - 1 ≤ N ≤ 100 # Example: Input: ``` addScore 1 50 addScore 2 80 addScore 1 30 top 1 addScore 3 90 top 2 reset 1 top 3 ``` Output: ``` [2] [3, 2] [3, 2, 1] ``` # Instructions: - Define the class and required methods. - Implement the logic to handle each type of operation efficiently. - Ensure that the system can update and query scores in real-time as operations are performed.","solution":"from collections import defaultdict import heapq class Leaderboard: def __init__(self): self.scores = defaultdict(int) def addScore(self, playerId, score): Update the score of playerId by adding the provided score. self.scores[playerId] += score def top(self, N): Return a list of the top N playerIds sorted by their scores in descending order. If two players have the same score, the player with the smaller playerId should come first. # Create a max heap based on (-score, playerId) heap = [(-score, playerId) for playerId, score in self.scores.items()] heapq.heapify(heap) # Fetch the top N players top_players = [] for _ in range(min(N, len(heap))): score, playerId = heapq.heappop(heap) top_players.append(playerId) return top_players def reset(self, playerId): Reset the score of playerId to 0. if playerId in self.scores: self.scores[playerId] = 0"},{"question":"Bob is a bicycle enthusiast. He has `n` chains and `m` bicycle tires at home. Bob knows that a functional bicycle requires exactly one chain and two tires. He wants to know how many complete bicycles he can assemble and how many chains and tires he will have left over after assembling the maximum number of bicycles possible. Given the number of chains `n` and the number of tires `m`, calculate the maximum number of bicycles Bob can assemble and the remaining chains and tires. Input The input consists of a single line containing two space-separated integers `n` and `m` (0 ≤ n, m ≤ 10^5) — the number of chains and the number of tires, respectively. Output Output a single line with three space-separated integers: - The maximum number of bicycles that can be assembled, - The number of chains left, - The number of tires left. Examples Input 5 10 Output 5 0 0 Input 3 5 Output 2 1 1 Input 6 14 Output 5 1 4 Note In the first example, Bob has 5 chains and 10 tires, which are exactly enough to assemble 5 bicycles with no chains or tires left. In the second example, Bob can assemble 2 bicycles using 2 chains and 4 tires, leaving 1 chain and 1 tire. In the third example, Bob can assemble 5 bicycles using 5 chains and 10 tires, leaving 1 chain and 4 tires.","solution":"def assemble_bicycles(n, m): Calculate the maximum number of bicycles that can be assembled, and the remaining chains and tires. Args: n (int): Number of chains. m (int): Number of tires. Returns: tuple: A tuple containing the number of assembled bicycles, remaining chains, and remaining tires. max_bicycles = min(n, m // 2) remaining_chains = n - max_bicycles remaining_tires = m - (max_bicycles * 2) return max_bicycles, remaining_chains, remaining_tires"},{"question":"You are given three strings S, T, and U, each containing only lowercase English letters. You need to find out if you can rearrange T and U (individually) in such a way that the resulting strings are substrings of S. Note: Each character in T and U can only be used once in the rearrangement. Input - The first line contains the string S (1 ≤ |S| ≤ 100). - The second line contains the string T (1 ≤ |T| ≤ 50). - The third line contains the string U (1 ≤ |U| ≤ 50). Output - Output \\"Yes\\" if it is possible to rearrange both T and U so that they become substrings of S. - Otherwise, output \\"No\\". Examples Input ``` abcdeabcde ade bae ``` Output ``` Yes ``` Input ``` abcdefgh xyz zyx ``` Output ``` No ``` Input ``` mississippi sip sss ``` Output ``` No ``` Explanation: - In the first example, T (\\"ade\\") can be rearranged as \\"dea\\" and U (\\"bae\\") can be rearranged as \\"bea\\" which are both substrings of S. - In the second example, neither \\"xyz\\" nor \\"zyx\\" can be rearranged to become substrings of S. - In the third example, though \\"sip\\" can become \\"ips\\" which is a substring of S, \\"sss\\" cannot be arranged to be a substring of S.","solution":"def can_rearrange_to_substrings(S, T, U): def is_permutation_substring(S, P): from collections import Counter len_p, len_s = len(P), len(S) needed = Counter(P) window = Counter(S[:len_p]) if needed == window: return True for i in range(len_p, len_s): window[S[i]] += 1 window[S[i - len_p]] -= 1 if window[S[i - len_p]] == 0: del window[S[i - len_p]] if window == needed: return True return False return \\"Yes\\" if is_permutation_substring(S, T) and is_permutation_substring(S, U) else \\"No\\""},{"question":"A delivery company uses a robot to navigate through a warehouse grid to pick up and deliver packages. The robot can move up, down, left, or right, but it must avoid certain cells that are marked as obstacles. Given the dimensions of the grid and the positions of the obstacles, determine if there is a path from the robot\'s starting position to its destination. Input You will be given the grid dimensions as integers n (rows) and m (columns). Then follows a list of obstacles as pairs of integers (i, j) representing the row and column of each obstacle. Finally, the starting point (sx, sy) and the destination point (dx, dy) are given as pairs of integers. - The first line contains two integers n and m (1 ≤ n, m ≤ 50), the number of rows and columns in the grid. - The second line contains a single integer k (0 ≤ k ≤ 100), the number of obstacles. - The next k lines each contain two integers i and j (1 ≤ i ≤ n, 1 ≤ j ≤ m), representing the row and column of an obstacle. - The next line contains two integers sx and sy (1 ≤ sx, sy ≤ n, m), representing the starting point of the robot. - The final line contains two integers dx and dy (1 ≤ dx, dy ≤ n, m), representing the destination point. Output Print \\"yes\\" (without quotes) if there is a valid path from the starting position to the destination without moving through any obstacles. Print \\"no\\" otherwise. Example Input: 5 5 3 2 2 2 3 3 2 1 1 5 5 Output: yes Input: 5 5 3 2 2 2 3 3 2 1 1 2 2 Output: no Note In the first example, there is a path from (1, 1) to (5, 5) avoiding all obstacles. In the second example, the destination point (2, 2) itself is an obstacle, therefore no valid path exists.","solution":"def is_path_exist(n, m, obstacles, start, destination): from collections import deque # Convert obstacles list into a set for faster lookup obstacle_set = set(obstacles) sx, sy = start dx, dy = destination # If starting or destination point is an obstacle, path doesn\'t exist if (sx, sy) in obstacle_set or (dx, dy) in obstacle_set: return \\"no\\" # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Using Breadth-First Search (BFS) queue = deque([(sx, sy)]) visited = set([(sx, sy)]) while queue: x, y = queue.popleft() if (x, y) == (dx, dy): return \\"yes\\" for direction in directions: nx, ny = x + direction[0], y + direction[1] if 1 <= nx <= n and 1 <= ny <= m and (nx, ny) not in obstacle_set and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"no\\""},{"question":"Alice has a string s consisting of lowercase English letters. She wants to perform q operations on this string. Each operation can either be a query or an update. A query operation is represented by two integers l and r, and returns the lexicographically smallest character in the substring from index l to r inclusive. An update operation is represented by an integer p and a character c, and it changes the character at index p in the string to c. Initially, you are given the string s and the number of operations q. Your task is to process all the operations in the given order and print the result of each query operation. Input The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. The first line of each test case contains a string s (1 ≤ |s| ≤ 2 ⋅ 10^5). The second line contains an integer q (1 ≤ q ≤ 2 ⋅ 10^5) — the number of operations. Each of the next q lines contains either: - a query operation \\"Q l r\\" with 1 ≤ l ≤ r ≤ |s| - or an update operation \\"U p c\\" with 1 ≤ p ≤ |s|, where c is a lowercase English letter. Output For each test case, for each query operation, print the result on a new line — the lexicographically smallest character in the specified substring. Note The sum of the lengths of all strings in a single input does not exceed 2 ⋅ 10^5, and the sum of all q\'s does not exceed 2 ⋅ 10^5. Example Input 1 abcdefgh 5 Q 1 3 U 2 z Q 1 3 U 5 a Q 1 8 Output a a a Note In the example: - the first query operation \\"Q 1 3\\" asks for the smallest character between indices 1 and 3, which is \'a\'. - the update operation \\"U 2 z\\" changes the character at index 2 to \'z\', so the string becomes \\"azcdefgh\\". - the next query operation \\"Q 1 3\\" in the string \\"azcdefgh\\" asks for the smallest character between indices 1 and 3, which is still \'a\'. - the update operation \\"U 5 a\\" then changes the character at index 5 to \'a\', so the string becomes \\"azcdafgh\\". - the last query operation \\"Q 1 8\\" in the string \\"azcdafgh\\" asks for the smallest character between indices 1 and 8, which is \'a\'.","solution":"def process_operations(t, test_cases): results = [] for case in test_cases: s = list(case[\'s\']) q = case[\'q\'] operations = case[\'operations\'] for op in operations: if op[0] == \'Q\': _, l, r = op l, r = int(l) - 1, int(r) - 1 results.append(min(s[l:r+1])) elif op[0] == \'U\': _, p, c = op p = int(p) - 1 s[p] = c return results # Example usage: # test_cases = [ # { # \\"s\\": \\"abcdefgh\\", # \\"q\\": 5, # \\"operations\\": [ # (\\"Q\\", 1, 3), # (\\"U\\", 2, \'z\'), # (\\"Q\\", 1, 3), # (\\"U\\", 5, \'a\'), # (\\"Q\\", 1, 8) # ] # } # ] # t = 1 # print(process_operations(t, test_cases)) # Output should be [\'a\', \'a\', \'a\']"},{"question":"Anna loves cooking and she frequently looks for new recipes online. She often bookmarks recipes she\'d like to try later. Favorites Manager is a specialized software she uses to keep track of her bookmarked recipes efficiently. Given the current state of Anna\'s bookmarks, she wants to find out which recipes she should attempt first based on a priority list. Each recipe has a specified priority level, but some recipes might be duplicates (having the same name but different URLs). Such duplicates should be grouped together, with only the highest priority for that group being considered when creating her to-do list. Write a function that, given a list of Anna\'s bookmarked recipes along with their respective priorities, returns a sorted list of unique recipes based on their highest priority. Recipes with the same priority should remain in the order they appear in the input. **Input** The first line contains an integer n (1 ≤ n ≤ 100), the number of recipes. Each of the following n lines contains a string s and an integer p, where s (1 ≤ |s| ≤ 100) is the name of the recipe and p (1 ≤ p ≤ 100) is the priority of that recipe. The name is guaranteed to only contain alphanumeric characters and spaces. **Output** Output the recipes sorted by their highest priority in descending order. If two or more recipes have the same highest priority, maintain their input order. **Example** Input: ``` 5 Pasta 3 Soup 5 Pasta 8 Salad 2 Soup 4 ``` Output: ``` Pasta Soup Salad ``` In this example, although \\"Soup\\" appears twice, its highest priority is 5, so it should be considered as having priority 5 when sorting.","solution":"def sort_recipes_by_priority(n, recipes): Sort recipes by their highest priority in descending order. Recipes with same highest priority maintain their input order. :param n: Number of recipes :param recipes: List of tuples (recipe name, priority) :return: List of recipes sorted by their highest priority # Dictionary to store the highest priority of each recipe recipe_priority = {} for name, priority in recipes: if name not in recipe_priority or recipe_priority[name] < priority: recipe_priority[name] = priority # Convert the dictionary to a list of tuples and sort by priority sorted_recipes = sorted(recipe_priority.items(), key=lambda x: (-x[1], recipes.index((x[0], x[1])))) # Extract the recipe names in sorted order sorted_recipe_names = [name for name, _ in sorted_recipes] return sorted_recipe_names"},{"question":"Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string. If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^5) and an integer k (1 ≤ k ≤ 10^4). Output Return the resulting string after the described modifications. Example Input abcdefg 2 Output bacdfeg Input abcdefghij 3 Output cbadefihgj Note In the first example, we reverse first 2 characters for every 4 characters: originally \\"abcdefg\\" becomes \\"bacdfeg\\". In the second example, we reverse first 3 characters for every 6 characters: originally \\"abcdefghij\\" becomes \\"cbadefihgj\\".","solution":"def reverse_str(s, k): Reverse the first k characters for every 2k characters from the start of the string. Args: s (str): The input string. k (int): The number of characters to reverse for each segment. Returns: str: The modified string. result = [] n = len(s) for i in range(0, n, 2 * k): part = s[i:i + k][::-1] + s[i + k:i + 2 * k] result.append(part) return \\"\\".join(result)"},{"question":"Alice is practicing her programming skills by solving problems involving strings. She comes across a problem where she needs to find the longest substring in a given string that contains at most two distinct characters. The substring should be contiguous and appear in the order it was found in the original string. Help Alice by writing a function that, given a string, outputs the length of the longest substring that contains at most two distinct characters. Input - The input consists of a single string s (1 ≤ |s| ≤ 10^5), where |s| denotes the length of the string. The string s only contains lowercase English letters. Output - Output a single integer: the length of the longest substring of s that contains at most two distinct characters. Examples Input abcbbbbcccbdddadacb Output 10 Input eceba Output 3 Note In the first example, the longest substring with at most two distinct characters is \\"bcbbbbcccb\\". It has a length of 10. In the second example, the longest substring with at most two distinct characters is \\"ece\\". It has a length of 3.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. start = 0 max_length = 0 char_frequency = {} for end in range(len(s)): right_char = s[end] if right_char not in char_frequency: char_frequency[right_char] = 0 char_frequency[right_char] += 1 while len(char_frequency) > 2: left_char = s[start] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given an array of integers. Your task is to determine whether the array can be split into two non-empty subarrays such that the sum of elements in both subarrays are equal. Input The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contains one integer n denoting the number of elements in the array, followed by n integers, the elements of the array. Output For each test case, output a single line containing \\"YES\\" if the array can be split as described, or \\"NO\\" otherwise. Constraints 1 ≤ T ≤ 100 2 ≤ n ≤ 1000 -1000 ≤ array[i] ≤ 1000 Example Input: 3 4 1 2 3 4 5 1 2 3 4 10 3 5 5 5 Output: NO YES NO","solution":"def can_split_into_equal_sum_subarrays(test_cases): results = [] for case in test_cases: n = case[0] array = case[1:] total_sum = sum(array) if total_sum % 2 != 0: results.append(\\"NO\\") continue target_sum = total_sum // 2 current_sum = 0 for num in array: current_sum += num if current_sum == target_sum: results.append(\\"YES\\") break else: results.append(\\"NO\\") return results"},{"question":"The city of Gridtopia is represented by an infinite Cartesian plane with a grid overlay. Each cell in the grid is a 1x1 square. The city planners have built roads that run along the boundaries of these cells. The roads create a regular grid pattern, making it easy for the residents to navigate. Recently, the mayor of Gridtopia decided to celebrate the city\'s anniversary by installing a number of ornamental fountains on some of the grid corners. However, not all locations were chosen, and the coordinates of the chosen corners follow a special rule: A fountain is installed at grid corner (x, y) if and only if the coordinates x and y are coprime numbers. Two integers x and y are coprime if their greatest common divisor (GCD) is 1. Your task is to determine whether there\'s a fountain installed at a given grid corner (x, y). Input The first and single line contains two integers x and y — the coordinates of the grid corner. Each of the numbers x and y has an absolute value that does not exceed 1000. Output Print \\"Yes\\" if there is a fountain installed at the given corner, otherwise print \\"No\\". Examples Input 3 4 Output Yes Input 4 6 Output No Input 7 9 Output Yes","solution":"import math def is_fountain_installed(x, y): Determines if a fountain is installed at grid corner (x, y). A fountain is installed if x and y are coprime numbers. :param x: Integer x-coordinate of the grid corner. :param y: Integer y-coordinate of the grid corner. :return: \\"Yes\\" if a fountain is installed, otherwise \\"No\\". return \\"Yes\\" if math.gcd(x, y) == 1 else \\"No\\""},{"question":"Design a function that takes a string as input and returns a transformed version of the string. The transformation to be applied is reversing each word of the string while keeping the words in the same order. Input The input is a single line containing a string s (1 ≤ length of s ≤ 1000). The string consists of words separated by single spaces, and there are no leading or trailing spaces. Output The output should be a single string where each word from the input string is reversed but the order of the words remains the same. Examples Input hello world Output olleh dlrow Input coding is fun Output gnidoc si nuf Input reverse each word Output esrever hcae drow Note In the first example, \\"hello\\" is reversed to \\"olleh\\" and \\"world\\" is reversed to \\"dlrow\\". In the second example, \\"coding\\" is reversed to \\"gnidoc\\", \\"is\\" remains \\"si\\", and \\"fun\\" is reversed to \\"nuf\\". In the third example, \\"reverse\\" is reversed to \\"esrever\\", \\"each\\" is reversed to \\"hcae\\", and \\"word\\" is reversed to \\"drow\\".","solution":"def reverse_each_word(s): Takes a string as input and returns the string with each word reversed but words in the same order. return \' \'.join(word[::-1] for word in s.split())"},{"question":"Luntown has a river running through it with n bridges connecting the two sides at various points. These bridges are crucial for transportation, each having a different maximum weight capacity that they can support before collapsing. Unfortunately, a heavy storm has caused potential damage to all the bridges, and it’s uncertain whether they can still hold the same weight. There are k trucks that need to cross to the other side. Each truck has a specific weight which adds stress to the bridge it crosses. For each truck, you are to determine if it can safely cross at its respective bridge point. Your job is to analyze which bridges can still support the trucks based on their capacities and the weights of the trucks that need to cross them. Input The first line contains two integers n and k (1 ≤ n, k ≤ 1000), where n is the total number of bridges and k is the number of trucks. The second line contains n space-separated integers xi (1 ≤ xi ≤ 10^4), where xi represents the maximum weight capacity of the i-th bridge. The third line contains k space-separated integers weights (1 ≤ weights ≤ 10^4), where the j-th integer represents the weight of the j-th truck. The fourth line contains k space-separated integers cross (1 ≤ cross ≤ n), where the j-th integer represents the bridge index (1-based) that the j-th truck needs to cross. Output Print k lines, each containing either \\"YES\\" or \\"NO\\". \\"YES\\" means the respective bridge can support the weight of the truck that tries to cross it, \\"NO\\" means it cannot. Examples Input 5 3 10000 5000 6000 3000 10000 6000 2000 7000 1 3 2 Output YES YES NO Input 4 4 8000 7000 3000 6000 4000 9000 5000 6000 1 2 4 3 Output YES NO YES NO","solution":"def can_trucks_cross_bridge(n, k, bridge_caps, truck_weights, crossings): Determines if each truck can safely cross its respective bridge. Parameters: n (int): Number of bridges k (int): Number of trucks bridge_caps (list of int): Maximum weight capacities of the bridges truck_weights (list of int): Weights of the trucks crossings (list of int): Bridge indices for each truck Returns: list of str: \\"YES\\" or \\"NO\\" result for each truck results = [] for j in range(k): bridge_index = crossings[j] - 1 # Convert to 0-based index if truck_weights[j] <= bridge_caps[bridge_index]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Ensure to keep the function calls and tests outside the code block for solution # to ensure proper functionality and avoid execution errors."},{"question":"Given an undirected graph represented as an adjacency list, your task is to determine if the graph contains a cycle. A cycle in a graph is a non-empty path (a sequence of edges) starting and ending at the same vertex without repeating edges. You need to return a boolean value indicating whether a cycle exists. Input The input consists of two parts: 1. An integer n: the number of vertices in the graph (1 ≤ n ≤ 1000). 2. A list of tuples representing the edges of the graph. Each tuple (u, v) represents an undirected edge between vertices u and v (1 ≤ u, v ≤ n). The vertices are zero-indexed. Output Output a single boolean value: `true` if the graph contains a cycle, `false` otherwise. Example Input ``` 5 [(0, 1), (1, 2), (2, 0), (1, 3), (3, 4)] ``` Output ``` true ``` Input ``` 4 [(0, 1), (1, 2), (2, 3)] ``` Output ``` false ``` Input ``` 3 [(0, 1), (1, 2)] ``` Output ``` false ``` Note In the first example, the graph contains a cycle (0 -> 1 -> 2 -> 0). In the second and third examples, the graphs do not contain any cycles.","solution":"def contains_cycle(n, edges): Determines if an undirected graph contains a cycle. :param n: Number of vertices in the graph :param edges: List of tuples representing the edges of the graph :return: Boolean value indicating whether the graph contains a cycle # Create an adjacency list from the edges adjacency_list = [[] for _ in range(n)] for (u, v) in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Initialize visited list visited = [False] * n def dfs(v, parent): visited[v] = True for neighbor in adjacency_list[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif neighbor != parent: return True return False # Check each vertex if it was not visited yet for i in range(n): if not visited[i]: if dfs(i, -1): return True return False"},{"question":"You are coaching a soccer team and need to optimize the selection of players for an upcoming match. The team has n players, each with a specific skill value. To form a balanced team, you need to divide the players into k groups such that the difference between the group with the highest total skill value and the group with the lowest total skill value is minimized. You are given an array of integers `skills` representing the skill values of the n players. Your task is to write a function that determines the minimum difference possible between the highest and lowest group skill values when the players are divided into k groups. # Input - The first line contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ n), the number of players and the number of groups respectively. - The second line contains n integers `skills[i]` (1 ≤ skills[i] ≤ 1000), representing the skill values of each player. # Output - A single integer, the minimum possible difference between the highest and lowest group skill values. # Example Input ``` 5 2 8 2 6 4 10 ``` Output ``` 2 ``` # Note In the example, the players can be divided into the following two groups to achieve the minimum difference: - Group 1: {2, 8, 4} with a total skill value of 14 - Group 2: {6, 10} with a total skill value of 16 The difference between the highest and lowest group skill values is 2.","solution":"def find_min_skill_diff(n, k, skills): # Sort the skill values skills.sort() # Initializing the minimum difference as large as possible min_diff = float(\'inf\') # Iterate from the beginning to find the smallest range of k elements for i in range(n - k + 1): diff = skills[i + k - 1] - skills[i] min_diff = min(min_diff, diff) return min_diff # Sample function to parse inputs and provide output def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) skills = list(map(int, data[2:n+2])) result = find_min_skill_diff(n, k, skills) print(result)"},{"question":"Given an array of size N of integers with each element denoted as array[i]. In this problem, we are given a parameter M and we are supposed to find the length of the longest subarray such that the sum of its elements is at most M. If there is no subarray satisfying the condition, print \\"0\\". INPUT The first line contains 2 integers N and M, the size of the array and the parameter as described in the problem statement. The second line contains N space-separated integers denoting the array. OUTPUT Print a single integer in a single line denoting the length of the longest subarray whose sum is at most M. Constraints: 1 ≤ N ≤ 100000 1 ≤ array[i] ≤ 1000 0 ≤ M ≤ 1000000 SAMPLE INPUT 6 15 1 2 3 4 5 6 SAMPLE OUTPUT 5 Explanation The subarray [1, 2, 3, 4, 5] has a sum of 15, which is the maximum possible sum not exceeding M. Therefore, the length of this subarray is 5. There is no other subarray longer than this satisfying the condition.","solution":"def longest_subarray_length(arr, M): Returns the length of the longest subarray such that the sum of its elements is at most M. :param arr: List of integers representing the array :param M: Integer representing the maximum allowed sum of subarray :return: Integer representing the length of the longest subarray N = len(arr) start = 0 end = 0 current_sum = 0 max_length = 0 while end < N: current_sum += arr[end] while current_sum > M and start <= end: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) end += 1 return max_length"},{"question":"Alice and Bob are playing a game with balloons arranged in a row. Each balloon has a certain number of points written on it. The game follows these rules: 1. Alice and Bob take turns, starting with Alice. 2. On each turn, a player can pop (remove) any one balloon to gain the points written on that balloon. 3. If a player pops a balloon, the adjacent balloons (if any) will merge. The merged balloon will have the combined points of the two popped adjacent balloons. The game continues until all the balloons are popped. Both players play optimally to maximize their total points. You are asked to determine the maximum possible points Alice can secure by the end of the game given a certain arrangement of points on the balloons. Input The first line of input contains an integer T, denoting the number of test cases. Each of the following T lines contains a sequence of space-separated integers representing the points on the balloons in that test case. Output For each test case, output a single line containing the maximum points Alice can secure. Constraints 1 ≤ T ≤ 100 1 ≤ number of balloons ≤ 100 1 ≤ points on each balloon ≤ 1000 Example Input: 2 2 3 1 5 1 1 1 1 Output: 8 4 Explanation In the first test case, Alice can pop the balloon with 5 points, then Bob pops the balloon with 3 points, Alice then pops the balloon with 3 + 2 = 5 points, and finally Bob pops the balloon with 1 point. Alice gets a total of 5 + 5 = 10 points. This is one of the ways Alice can play, achieving the maximum possible score against an optimal Bob.","solution":"def max_points(balloons, start, end, memo, turn): if start > end: return 0 if memo[turn][start][end] != -1: return memo[turn][start][end] if turn == 0: # Alice\'s turn choose_start = balloons[start] + max_points(balloons, start + 1, end, memo, 1) choose_end = balloons[end] + max_points(balloons, start, end - 1, memo, 1) memo[turn][start][end] = max(choose_start, choose_end) else: # Bob\'s turn choose_start = max_points(balloons, start + 1, end, memo, 0) choose_end = max_points(balloons, start, end - 1, memo, 0) memo[turn][start][end] = min(choose_start, choose_end) return memo[turn][start][end] def alice_max_points(balloon_arrangements): results = [] for balloons in balloon_arrangements: n = len(balloons) memo = [[[-1 for _ in range(n)] for _ in range(n)] for _ in range(2)] results.append(max_points(balloons, 0, n - 1, memo, 0)) return results"},{"question":"You are given an array of n positive integers. You need to handle q queries on this array. There are three types of queries: * 1 x v — update the value at index x to v (1 ≤ x ≤ n, 1 ≤ v ≤ 100). * 2 l r — compute the sum of all elements in the subarray from l to r (1 ≤ l ≤ r ≤ n). * 3 l r — find the greatest common divisor (GCD) of all elements in the subarray from l to r (1 ≤ l ≤ r ≤ n). Input: The first line contains two integers n and q (1 ≤ n, q ≤ 105) — the number of elements in the array and the number of queries, respectively. The second line contains n integers — the elements of the array (1 ≤ ai ≤ 109). The next q lines contain queries, each query can be one of the three types mentioned above. Output: For each query of type 2, output a single integer — the sum of elements in the specified subarray. For each query of type 3, output a single integer — the GCD of elements in the specified subarray. Examples: Input: 6 5 2 3 6 8 12 15 2 1 3 3 4 6 1 5 10 2 2 5 3 3 6 Output: 11 1 27 3","solution":"from math import gcd from functools import reduce class ArrayProcessor: def __init__(self, arr): self.arr = arr def update(self, x, v): self.arr[x - 1] = v def query_sum(self, l, r): return sum(self.arr[l - 1:r]) def query_gcd(self, l, r): return reduce(gcd, self.arr[l - 1:r]) # Example function to process queries def process_queries(n, arr, queries): processor = ArrayProcessor(arr) results = [] for query in queries: if query[0] == 1: processor.update(query[1], query[2]) elif query[0] == 2: results.append(processor.query_sum(query[1], query[2])) elif query[0] == 3: results.append(processor.query_gcd(query[1], query[2])) return results"},{"question":"You are given a matrix of size M x N where each cell represents the cost to build a wall on that cell. You need to find the minimum cost of building a continuous vertical wall from the top row to the bottom row. You are allowed to start from any cell in the top row and can move to the cell directly below or to the cell diagonally left or right in the next row. Return the minimum cost required to build such a wall. Constraints * 1 leq M, N leq 100 * 0 leq cost_{i, j} leq 1000 Input Input is given from Standard Input in the following format: M N cost_{1,1} cost_{1,2} ... cost_{1,N} cost_{2,1} cost_{2,2} ... cost_{2,N} ... cost_{M,1} cost_{M,2} ... cost_{M,N} Output Print the minimum cost to build the wall. Examples Input 3 4 1 3 1 5 2 2 4 1 5 1 2 3 Output 4 Input 2 3 10 2 1 1 2 10 Output 3","solution":"def min_cost_to_build_wall(cost): if not cost or not cost[0]: return 0 M, N = len(cost), len(cost[0]) dp = [[0]*N for _ in range(M)] # Initialize the first row of dp array to the cost of the top row for j in range(N): dp[0][j] = cost[0][j] # Build the dp array for i in range(1, M): for j in range(N): # Cost to reach cell (i, j) would be the cost of (i, j) plus the minimum cost of the reachable cells from previous row dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i-1][j-1] if j-1 >= 0 else float(\'inf\'), dp[i-1][j+1] if j+1 < N else float(\'inf\')) # The minimum cost to build the wall will be the minimum value in the last row of dp array return min(dp[M-1]) def min_cost_wall(M, N, cost_matrix): return min_cost_to_build_wall(cost_matrix)"},{"question":"Given an array of integers `arr`, we will call it balanced if the sum of its elements is even. Otherwise, it is called unbalanced. An empty array is also considered balanced. You are given an array of integers. Determine the maximum length of a (contiguous) subarray that is balanced. If the array is already fully balanced, return the length of the entire array. Constraints * 1 ≦ |arr| ≦ 10^5 * -10^3 ≦ arr[i] ≦ 10^3 Input The input is given from Standard Input in the following format: ``` n arr_1 arr_2 ... arr_n ``` Output Print the length of the longest balanced subarray. If no such subarray exists, print `0`. Examples Input ``` 5 1 2 3 4 5 ``` Output ``` 4 ``` Input ``` 3 2 4 6 ``` Output ``` 3 ```","solution":"def max_balanced_subarray_length(arr): Returns the length of the longest balanced subarray. A balanced subarray is defined as an array whose sum is even. Parameters: arr (list of int): The input array of integers. Returns: int: The length of the longest balanced subarray. n = len(arr) if n == 0: return 0 total_sum = sum(arr) if total_sum % 2 == 0: return n for i, num in enumerate(arr): if num % 2 != 0: # Removing this odd number would balance the array return n - 1 return 0"},{"question":"Alex is a city planner responsible for designing a new park with a network of connected walking paths. The park can be represented as a undirected graph where vertices represent park landmarks, and edges represent walking paths between those landmarks. Due to certain construction constraints, some pairs of landmarks must be connected directly by walking paths. Alex wants to ensure that every landmark is accessible from any other landmark either directly or through a series of walking paths. To achieve this, Alex must determine the minimum number of new paths to add to the park to fulfill this condition. You are given the current design, and you need to output the minimum number of paths Alex should add. Input The first line contains two integers n (1 ≤ n ≤ 100) and m (0 ≤ m ≤ 4950) representing the number of landmarks and the number of existing paths respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v), indicating that there is an existing path between landmark u and landmark v. Output Print the minimum number of new paths that need to be added to the park to make it fully connected. If the park is already fully connected, print 0. Examples Input 5 3 1 2 2 3 4 5 Output 1 Input 4 1 1 2 Output 2 Input 4 4 1 2 2 3 3 4 4 1 Output 0","solution":"def find_connected_components(n, edges): Find the number of connected components in an undirected graph. from collections import defaultdict, deque def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) component_count = 0 for i in range(1, n + 1): if not visited[i]: component_count += 1 bfs(i) return component_count def min_new_paths_to_add(n, m, edges): Returns the minimum number of new paths that need to be added to make the park fully connected. components = find_connected_components(n, edges) return components - 1 # Example function to read input, useful for testing manually or specifying input directly def park_paths(n, m, paths): edges = [tuple(map(int, path.split())) for path in paths] return min_new_paths_to_add(n, m, edges)"},{"question":"You are organizing a charity event to collect clothes for needy children. You have received various sizes of clothes from donors, and your task is to distribute these clothes to children such that each child gets one piece of clothing of their size. However, if an exact match is not available, the next larger size can be used. If no larger size is available, then that child cannot get a piece of clothing. Write a program to calculate the number of children who will receive clothes. Input The input is given in the following format. n m followed by two lines: The first line contains n space-separated integers representing the sizes of clothes available: c1, c2, ..., cn (1 ≤ ci ≤ 1000). The second line contains m space-separated integers representing the sizes required by the children: r1, r2, ..., rm (1 ≤ ri ≤ 1000). Output Output the number of children who will receive clothes. Examples Input 5 4 1 2 3 4 5 2 3 5 6 Output 3 Input 4 5 5 6 1 2 4 4 1 1 3 Output 4 Input 3 3 3 3 5 1 3 5 Output 3","solution":"def distribute_clothes(clothes, children): clothes.sort() children.sort() i = 0 j = 0 count = 0 while i < len(clothes) and j < len(children): if clothes[i] >= children[j]: count += 1 j += 1 i += 1 return count"},{"question":"In a science fiction novel, a new alphabet system has been introduced, where each letter of the alphabet is replaced by its opposite character in the sequence. For example, \'a\' is replaced by \'z\', \'b\' by \'y\', \'c\' by \'x\', and so on. Your task is to write a program that transforms any given text into this new alphabet system. Input The input consists of several datasets. There will be the number of datasets n in the first line. There will be n lines. A line consisting of english texts will be given for each dataset. Output For each dataset, print the converted text in a line where every letter is replaced by its opposite character in the sequence. Non-alphabetic characters should remain unchanged. Example Input 2 hello RgV Output svool ItE","solution":"def transform_texts(datasets): Transforms a list of text datasets by replacing each letter with its opposite character in the sequence. Non-alphabetic characters remain unchanged. Args: datasets (list of str): List containing the text datasets as strings. Returns: list of str: List containing the transformed text datasets. def replace_char(char): if \'a\' <= char <= \'z\': return chr(219 - ord(char)) elif \'A\' <= char <= \'Z\': return chr(155 - ord(char)) else: return char transformed_texts = [] for text in datasets: transformed_text = \'\'.join(replace_char(char) for char in text) transformed_texts.append(transformed_text) return transformed_texts"},{"question":"You are given an array of integers representing balloon heights in a line segment. Each balloon can be inflated to a greater height by performing one of the following two operations as many times as you want: 1. Inflate a single balloon by 2 units. 2. Inflate two adjacent balloons by 1 unit each. Your goal is to determine if all balloons can be inflated to the same height using the above operations. Input The first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of balloons. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the initial heights of the balloons. Output Print \\"YES\\" if it is possible to make all balloons the same height using the described operations. Otherwise, print \\"NO\\". Examples Input 4 3 5 7 9 Output YES Input 3 1 4 6 Output NO Input 5 2 4 4 4 2 Output YES Note In the first example, you can use the second operation to inflate adjacent balloons to get [5, 5, 9, 9]. Then use the first operation to inflate the first pair to [7, 7, 9, 9]. Repeat the first operation on the first two balloons again to get [9, 9, 9, 9]. In the second example, you cannot make all balloons the same height as the difference between the first balloon and the second balloon height cannot be filled with increments of 2 or by inflating both by 1. In the third example, you can use the operations to make all balloons of height 4 in several steps.","solution":"def can_inflate_to_same_height(n, heights): Determine if all balloons can be inflated to the same height using the given operations # Find the minimum height min_height = min(heights) # Check if all elements heights[i] - min_height are even for height in heights: if (height - min_height) % 2 != 0: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of n activities with their start and finish times. You need to select the maximum number of non-overlapping activities. Two activities do not overlap if the finish time of the first activity is not greater than the start time of the second activity. Your task is to write a program that finds the maximum number of non-overlapping activities that can be attended. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of activities. The next n lines contain two integers s_i and f_i (0 ≤ s_i < f_i ≤ 10^9), the start and finish times of the i-th activity. Output Print a single integer, the maximum number of non-overlapping activities that can be selected. Examples Input 6 1 3 2 4 3 5 0 6 5 7 8 9 Output 4 Input 4 1 2 3 4 0 6 5 9 Output 3","solution":"def max_activities(n, activities): Returns the maximum number of non-overlapping activities. :param n: int - the number of activities :param activities: List[Tuple[int, int]] - list of tuples where each tuple contains start and finish time of an activity :return: int - the maximum number of non-overlapping activities # Sort activities based on their finish time activities.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, finish in activities: if start >= last_end_time: count += 1 last_end_time = finish return count"},{"question":"You\'re given an undirected and connected graph with n vertices and m edges. Each edge has a weight associated with it. Your task is to determine if there exists an edge in the graph that, when removed, will separate the graph into exactly two connected components. If such an edge exists, also find the edge whose removal maximizes the weight difference between the two resulting components. Input The first line contains two integers n (2 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 2 ⋅ 10^5), the number of vertices and edges in the graph. The next m lines each contain three space-separated integers u, v, and w (1 ≤ u,v ≤ n; 1 ≤ w ≤ 10^9), representing an edge between vertex u and vertex v with weight w. Output Output the weight of the edge which, when removed, results in separating the graph into two components with the maximum weight difference. If there is no such edge, print -1. Examples Input 4 3 1 2 10 2 3 5 3 4 6 Output 10 Input 5 4 1 2 1 2 3 2 2 4 3 4 5 4 Output 4 Note In the first sample, removing edge (1, 2) with weight 10 results in two connected components {1} and {2, 3, 4}. The separation creates a component weight difference of 10. In the second sample, the edge with the maximum weight difference between the two resulting components when removed is (4, 5) with weight 4.","solution":"def find_max_difference_brige(n, m, edges): from collections import defaultdict import sys sys.setrecursionlimit(10**6) def dfs(u, visited, disc, low, parent): nonlocal time, bridge, max_edge visited[u] = True disc[u] = low[u] = time time += 1 for v, w in graph[u]: if not visited[v]: parent[v] = u dfs(v, visited, disc, low, parent) low[u] = min(low[u], low[v]) if low[v] > disc[u]: bridge = True if w > max_edge[0]: max_edge = [w] elif v != parent[u]: low[u] = min(low[u], disc[v]) graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) visited = [False] * (n + 1) disc = [-1] * (n + 1) low = [-1] * (n + 1) parent = [-1] * (n + 1) time = 0 bridge = False max_edge = [-1] for i in range(1, n + 1): if not visited[i]: dfs(i, visited, disc, low, parent) return max_edge[0] if bridge else -1 # Example usage def example(): input_data = [ (4, 3, [(1, 2, 10), (2, 3, 5), (3, 4, 6)]), (5, 4, [(1, 2, 1), (2, 3, 2), (2, 4, 3), (4, 5, 4)]) ] results = [10, 4] for data, res in zip(input_data, results): assert find_max_difference_brige(data[0], data[1], data[2]) == res example()"},{"question":"Given a list of ingredients and their corresponding calories, you are tasked with creating a list of recipes and finding the recipe with the highest calorie count. Each recipe is represented by a list of ingredient names. Write a function `find_highest_calorie_recipe` that takes two arguments: a list of tuples and a list of lists. The first list of tuples contains pairs of ingredient names and their respective calorie values. The second list of lists contains recipes, where each recipe is a list of ingredient names. Your task is to determine which recipe has the highest calorie content and return its index in the list along with the total calories. If multiple recipes have the same highest calorie count, return the one which appears first in the list. # Input - A list of tuples containing `n` elements, where each tuple contains a string (ingredient name) and an integer (calorie value). `(1 ≤ n ≤ 100)` - A list of lists containing `m` elements, where each list contains a string representing a recipe made up of ingredient names. Each recipe contains at least one ingredient. `(1 ≤ m ≤ 50)` # Output - An integer representing the index of the recipe with the highest calorie count. - An integer representing the total calorie count of that recipe. # Example Input ``` [(\'flour\', 364), (\'sugar\', 400), (\'egg\', 78), (\'butter\', 102)] [[\'flour\', \'sugar\', \'egg\'], [\'sugar\', \'butter\'], [\'flour\', \'butter\'], [\'egg\', \'sugar\']] ``` Output ``` 0 842 ``` Explanation - The first recipe has a total calorie count of 364 (flour) + 400 (sugar) + 78 (egg) = 842. - The second recipe has a total calorie count of 400 (sugar) + 102 (butter) = 502. - The third recipe has a total calorie count of 364 (flour) + 102 (butter) = 466. - The fourth recipe has a total calorie count of 78 (egg) + 400 (sugar) = 478. The recipe with the highest calorie count is the first one, with 842 calories. Therefore, the output is `0 842`.","solution":"def find_highest_calorie_recipe(ingredient_calories, recipes): Find the recipe with the highest calorie count. Args: ingredient_calories (list): A list of tuples where each tuple contains an ingredient name and its calories. recipes (list): A list of recipes, where each recipe is a list of ingredient names. Returns: tuple: Index of the recipe with the highest calorie count and the total calories. calorie_dict = {ingredient: calories for ingredient, calories in ingredient_calories} max_calories = 0 max_index = -1 for index, recipe in enumerate(recipes): total_calories = sum(calorie_dict[ingredient] for ingredient in recipe) if total_calories > max_calories: max_calories = total_calories max_index = index return max_index, max_calories"},{"question":"Write a function to determine if a given string is a permutation of a palindrome. A string is a permutation of a palindrome if it can be rearranged to form a palindrome. The function should return `True` if the string is a permutation of a palindrome and `False` otherwise. Ignore case and non-letter characters. Constraints The string length will be between 1 and 100, inclusive. Input A single line containing the string. Output A single line containing `True` or `False`. Examples Input Tact Coa Output True Input Hello Output False Input A man, a plan, a canal, Panama! Output True","solution":"def is_permutation_of_palindrome(s): Determines if the given string is a permutation of a palindrome. Ignores case and non-letter characters. from collections import Counter import re # Remove non-letter characters and convert to lowercase s = re.sub(r\'[^a-zA-Z]\', \'\', s).lower() # Count the occurrences of each character counts = Counter(s) # Check the number of characters with odd counts odd_count = sum(1 for count in counts.values() if count % 2 != 0) # For string to be palindrome permutation, at most one character can have an odd count return odd_count <= 1"},{"question":"You\'ve been tasked with writing a software component for a digital parking management system. The system monitors vehicles entering and exiting a parking lot, ensuring that vehicles only park in designated spots and that the lot\'s capacity is not exceeded. Your component should track individual parking spots and ensure that each one can hold only one vehicle at a time. Vehicles are identified by their license plates, and each spot has a unique number. When a vehicle enters the lot, it should be assigned to an empty spot. When it leaves, that spot should be marked as available again. Additionally, your system should be able to provide the following functionalities: - Display the current status of the parking lot (which spots are occupied and which are available). - Find the spot number where a specific vehicle is parked. - Count the number of available spots. Input and Output requirements: - Initially, your parking lot is empty. - The system input will consist of a series of commands. Each command is one of the following: - `PARK <license_plate>`: A vehicle with the given license plate enters the lot. - `LEAVE <license_plate>`: The vehicle with the given license plate leaves the lot. - `STATUS`: Display the status of the parking lot. - `FIND <license_plate>`: Display the spot number of the vehicle with the given license plate. - `COUNT`: Display the number of available spots. Each parking lot command will appear on a new line. The lot will have exactly 100 spots, numbered from 1 to 100. Output format: - For the `STATUS` command, print the status in the following format: `SpotX: LicensePlate` for occupied spots, and `SpotX: Available` for available spots, in order from spot 1 to spot 100, each on a new line. - For the `FIND <license_plate>` command, print the spot number where the vehicle with the given license plate is parked. If the vehicle is not found, print \\"Not found\\". - For the `COUNT` command, print the number of available spots. - If a vehicle tries to `PARK` in an already full lot, print \\"Parking lot full\\". - If a `PARK` or `LEAVE` command is issued for a vehicle that is already parked or not parked, respectively, print \\"Error\\". Examples: Input: ``` PARK ABC123 PARK DEF456 FIND ABC123 PARK GHI789 STATUS LEAVE DEF456 COUNT LEAVE ABC123 STATUS COUNT ``` Output: ``` 1 Spot1: ABC123 Spot2: DEF456 Spot3: GHI789 ... Spot100: Available 3 Spot2: Available Spot3: GHI789 ... Spot100: Available 99 ``` Note: - Please ensure your solution handles the initial empty state correctly. - Ensure that all commands are case-sensitive and any deviation in command syntax leads to no output generation or an error message as appropriate.","solution":"class ParkingLot: def __init__(self, capacity=100): self.capacity = capacity self.parking_lot = {i: None for i in range(1, capacity + 1)} self.vehicle_spots = {} def park(self, license_plate): if license_plate in self.vehicle_spots: return \\"Error\\" for spot, vehicle in self.parking_lot.items(): if vehicle is None: self.parking_lot[spot] = license_plate self.vehicle_spots[license_plate] = spot return spot return \\"Parking lot full\\" def leave(self, license_plate): if license_plate not in self.vehicle_spots: return \\"Error\\" spot = self.vehicle_spots.pop(license_plate) self.parking_lot[spot] = None return def status(self): lines = [] for spot, vehicle in self.parking_lot.items(): if vehicle is None: lines.append(f\\"Spot{spot}: Available\\") else: lines.append(f\\"Spot{spot}: {vehicle}\\") return \\"n\\".join(lines) def find(self, license_plate): if license_plate in self.vehicle_spots: return self.vehicle_spots[license_plate] return \\"Not found\\" def count(self): return sum(1 for vehicle in self.parking_lot.values() if vehicle is None)"},{"question":"In a city, there is a popular basketball event happening. There are n players who each have a certain skill level. The players are numbered from 1 to n and their skill levels are given in an array `skills`, where the i-th element represents the skill level of the i-th player. The event follows a specific format: 1. Each round, the two players with the highest skill levels will compete against each other. 2. The winner of the round is the player with the higher skill level and the loser\'s skill level is reduced by a value `k`. If the loser\'s new skill level becomes non-positive, the player is eliminated from the event. 3. This process continues until only one player remains. Given the initial skill levels of all players and the value `k`, determine the number of the player who will be the last one remaining. Input The first line contains two integers n and k (2 ≤ n ≤ 100; 1 ≤ k ≤ 100). The second line contains n integers, representing the skill levels `skills[i]` (1 ≤ skills[i] ≤ 1000). Output Output a single integer, indicating the number of the last player remaining. Examples Input 4 10 40 30 20 10 Output 1 Input 3 5 15 30 25 Output 2 Note For the first example: - Players 1 and 2 compete, player 1 wins and player 2\'s skill level becomes 20. The list now is [40, 20, 20, 10]. - Players 1 and 3 compete, player 1 wins and player 3\'s skill level becomes 10. The list now is [40, 20, 10, 10]. - Players 1 and 2 compete, player 1 wins and player 2\'s skill level becomes 10. The list now is [40, 10, 10, 10]. - Players 1 and 2 compete, player 1 wins and player 2 is eliminated. The list now is [40, 10, 10]. - Players 1 and 3 compete, player 1 wins and player 3 is eliminated. The list now is [40, 10]. - Players 1 and 2 compete, player 1 wins and player 2 is eliminated. The list now is [40]. Hence, player 1 is the last remaining player, so the output is 1.","solution":"def find_last_player_remaining(n, k, skills): players = [(skills[i], i + 1) for i in range(n)] while len(players) > 1: players.sort(reverse=True, key=lambda x: x[0]) winner, winner_id = players[0] loser, loser_id = players[1] loser -= k if loser > 0: players[1] = (loser, loser_id) else: players.pop(1) return players[0][1]"},{"question":"You are given an array of n integers. Find the length of the longest subsequence that consists of prime numbers only. A subsequence is obtained by deleting zero or more elements from the array without changing the order of the remaining elements. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 106), the elements of the array. Output Print one integer, the length of the longest subsequence of prime numbers. Examples Input 7 3 4 7 10 11 13 20 Output 4 Input 5 15 17 19 20 22 Output 2 Note In the first case, the prime numbers are 3, 7, 11, and 13. So the length of the longest subsequence is 4. In the second case, the prime numbers are 17 and 19. So the length of the longest subsequence is 2.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False sq = int(num**0.5) + 1 for i in range(3, sq, 2): if num % i == 0: return False return True def longest_prime_subsequence_length(n, a): Returns the length of the longest subsequence that consists of prime numbers only. return sum(1 for x in a if is_prime(x))"},{"question":"You are given a list of integers representing the stock prices of a company in chronological order. As an investor, you can make at most one transaction (i.e., you can buy and sell one share of the stock once). You want to maximize your profit by choosing a single day to buy one share and a different day in the future to sell that share. Write a function that takes a list of integers and returns the maximum profit you can achieve from this transaction. If no profit can be made, return 0. Constraints * 1 leq n leq 100,000 * 0 leq text{price} leq 10^4 Input A list of integers representing the stock prices. Output An integer representing the maximum profit, or 0 if no profit can be made. Examples Input [7, 1, 5, 3, 6, 4] Output 5 Input [7, 6, 4, 3, 1] Output 0","solution":"def max_profit(prices): Returns the maximum profit from a single buy and sell. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given a positive integer `n`. Your task is to generate an n-th row of Pascal\'s triangle. Pascal\'s triangle is a triangular array of the binomial coefficients. The elements of the n-th row of Pascal\'s triangle are given by where `C(n, k) = n! / (k! * (n - k)!)`, `0 <= k <= n`, and `!` denotes factorial. For example, the first few rows of Pascal\'s triangle are: ``` Row 0: [1] Row 1: [1, 1] Row 2: [1, 2, 1] Row 3: [1, 3, 3, 1] ... ``` Your task is to write a function that takes an integer `n` as input and returns the n-th row of Pascal\'s triangle. Constraints - 0 <= n <= 30 Input The input is given from Standard Input in the following format: ``` n ``` Output Print the n-th row of Pascal\'s triangle as a list of integers, separated by space. Examples Input ``` 4 ``` Output ``` 1 4 6 4 1 ``` Input ``` 0 ``` Output ``` 1 ```","solution":"def factorial(num): if num == 0 or num == 1: return 1 fact = 1 for i in range(2, num + 1): fact *= i return fact def pascal_row(n): row = [] for k in range(n + 1): row.append(factorial(n) // (factorial(k) * factorial(n - k))) return row"},{"question":"A group of archaeologists has discovered a set of ancient scrolls, each containing a different string of letters from an old language. They want to store these scrolls in a digital archive in a way that allows them to quickly find specific words. To do this, they need to calculate the minimum number of changes required to transform one string of letters into another. A change is defined as: - Replacing one letter with another, - Adding a new letter, or - Deleting an existing letter. Your task is to help the archaeologists by writing a program that calculates the minimum number of changes needed to transform one scroll\'s string into another. Input The first line of the input contains an integer n, (1 ≤ n ≤ 100), denoting the number of test cases. Each of the next 2n lines contains two strings s1 and s2 (1 ≤ length of s1, s2 ≤ 100) which represent the strings of two scrolls to be compared. Output For each test case, print a single integer on a new line representing the minimum number of changes required to transform string s1 into string s2. Examples Input 2 kitten sitting flaw lawn Output 3 2","solution":"def min_distance(s1, s2): Returns the minimum number of changes required to transform string s1 into string s2. def edit_distance_dp(s1, s2): m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n] return edit_distance_dp(s1, s2) def process_input(n, test_cases): results = [] for i in range(n): s1 = test_cases[2*i] s2 = test_cases[2*i + 1] results.append(min_distance(s1, s2)) return results"},{"question":"Given a binary tree, you need to write a function in Python to find the diameter of the tree. The diameter of a binary tree is defined as the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. You can assume that the number of nodes in the binary tree is in the range [1, 10^4]. # Function Signature ```python def diameterOfBinaryTree(root: Optional[TreeNode]) -> int: pass ``` # Input The input `root` is the root of the binary tree. # Output The function should return an integer representing the diameter of the binary tree. # Example Input ``` Root of the following binary tree: 1 / 2 3 / 4 5 ``` Output ``` 3 ``` # Explanation In the above example, the longest path in the binary tree is `[4, 2, 1, 3]` or `[5, 2, 1, 3]`, which has length 3. Note that the path does not need to go through the root. # Notes: - Ensure your function is efficient with a complexity around O(n), where n is the number of nodes in the binary tree. # Constraints: - The number of nodes in the binary tree will be in the range [1, 104]. - The nodes\' values are 32-bit signed integers.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def diameterOfBinaryTree(root: TreeNode) -> int: def dfs(node): nonlocal diameter if not node: return 0 left_depth = dfs(node.left) right_depth = dfs(node.right) diameter = max(diameter, left_depth + right_depth) return max(left_depth, right_depth) + 1 diameter = 0 dfs(root) return diameter"},{"question":"A team of archaeologists has discovered an ancient clock that has a peculiar way of tracking time. The clock has `n` gears, numbered from 1 to `n`. The `i`-th gear has exactly `a_i` teeth. The configuration of these gears determines the time the clock will show. The team wants to know how many distinct times can be displayed using these gears. Two times are considered distinct if and only if the configurations of the gears that represent them are different. Note that the order of the gears in the configuration matters, and the same gear cannot be used more than once in any configuration. Write a program to calculate the total number of distinct times the clock can display. Input The first line contains one integer `n` (1 ≤ n ≤ 20) — the number of gears. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 50) — the number of teeth on each gear. Output Print the total number of distinct times the clock can display. Examples Input 3 3 3 3 Output 6 Input 4 2 3 5 7 Output 24 Note In the first test, there are 3 gears each having 3 teeth. The distinct times are permutations of these gears: - 3-3-3 In the second test, the 4 gears can be arranged in different permutations as: - 2-3-5-7 - 2-3-7-5 - 2-5-3-7 - 2-5-7-3 - 2-7-3-5 - 2-7-5-3 - 3-2-5-7 - 3-2-7-5 - 3-5-2-7 - 3-5-7-2 - 3-7-2-5 - 3-7-5-2 - 5-2-3-7 - 5-2-7-3 - 5-3-2-7 - 5-3-7-2 - 5-7-2-3 - 5-7-3-2 - 7-2-3-5 - 7-2-5-3 - 7-3-2-5 - 7-3-5-2 - 7-5-2-3 - 7-5-3-2 And hence there are 24 distinct times.","solution":"from itertools import permutations def count_distinct_times(n, gears): Calculate the total number of distinct times the clock can display based on the permutation of the gears given. n: number of gears gears: list containing number of teeth on each gear distinct_permutations = set(permutations(gears)) return len(distinct_permutations)"},{"question":"You are the commander in chief at a military academy, where you need to organize training sessions for new recruits. The academy has n recruits standing in a line, each with a unique skill level represented by an integer array a of length n. Your objective is to form squads of exactly k recruits, where the skill level of each recruit in the squad must be strictly increasing. The squad formation follows the rule that if recruit i is in the squad, then recruit j must also be in the squad such that i < j and ai < aj. As the commander, you are required to determine how many different possible squads can be formed from the given recruits. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000), the number of recruits and the size of each squad. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the skill levels of the recruits. Output Print a single integer — the number of different squads of size k that can be formed. Examples Input 5 3 2 5 3 6 4 Output 3 Input 4 2 1 2 3 4 Output 6 Note In the first example, the possible squads are: - (2, 5, 6) - (2, 3, 6) - (2, 4, 6) In the second example, the possible squads are: - (1, 2) - (1, 3) - (1, 4) - (2, 3) - (2, 4) - (3, 4)","solution":"from itertools import combinations def count_possible_squads(n, k, a): Returns the number of different possible squads of size k that can be formed with strictly increasing skill levels from the given recruits. possible_squads = 0 # Generate all combinations of the array `a` of length `k` for squad in combinations(a, k): # Check if the combination is strictly increasing if list(squad) == sorted(squad): possible_squads += 1 return possible_squads"},{"question":"Given an array of integers `nums` of length `N` and an integer `M`, you need to find and return the minimum length of a contiguous subarray such that the sum of its elements is at least `M`. If no such subarray exists, return `0`. Constraints: * 1 leq N leq 10^5 * 1 leq nums[i] leq 10^4 * 1 leq M leq 10^9 Input The input is given from Standard Input in the following format: N M nums_1 nums_2 ... nums_N Output Print the length of the smallest contiguous subarray with a sum of at least `M`. If no such subarray exists, output `0`. Examples Input 8 15 1 2 3 4 5 6 7 8 Output 2 Input 5 11 1 2 3 4 5 Output 3 Input 3 25 10 10 10 Output 3","solution":"def min_length_subarray(nums, M): Return the minimum length of a contiguous subarray such that the sum of its elements is at least M. If no such subarray exists, return 0. N = len(nums) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(N): current_sum += nums[end] while current_sum >= M: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"You are given an array of n integers. An inversion in the array is defined as a pair of indices (i, j) such that i < j and array[i] > array[j]. The task is to sort the array in ascending order by performing a series of operations. In one operation, you can select any contiguous subarray of the original array and reverse it. Your task is to determine the minimum number of operations needed to sort the array. Input The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 500) — the size of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output For each test case, print a single integer — the minimum number of operations needed to sort the array. Example Input 3 5 4 5 1 3 2 3 3 2 1 4 1 3 2 4 Output 2 1 1 Explanation In the first test case, we can sort the array in two steps. First, reverse the subarray [4, 5, 1] to get [1, 5, 4, 3, 2]. Then reverse the subarray [5, 4, 3, 2] to get [1, 2, 3, 4, 5]. In the second test case, we can sort the array by reversing the entire array. In the third test case, we can sort the array in a single step by reversing the subarray [3, 2].","solution":"def min_operations_for_sorting(arrays): results = [] for array in arrays: if array == sorted(array): results.append(0) elif array == sorted(array, reverse=True): results.append(1) elif array[0] == min(array) or array[-1] == max(array): results.append(1) else: results.append(2) return results def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") t = int(input_lines[0]) arrays = [] index = 1 for _ in range(t): n = int(input_lines[index]) array = list(map(int, input_lines[index + 1].split())) arrays.append(array) index += 2 return arrays def main(input_data): arrays = process_input(input_data) return min_operations_for_sorting(arrays)"},{"question":"A scientist is analyzing a large dataset of numerical readings collected from various sensors. Each sensor provides a series of readings collected at regular intervals, and each reading consists of a timestamp and a value. The scientist wants to find the longest contiguous subarray (without reordering) where the readings consistently increase without a decrease. Your task is to write a program that determines the readings within the longest contiguous increasing subarray from the provided dataset of readings. Input The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of readings collected by the sensor. The next N lines of a test case description each contain a timestamp and an integer value separated by a space. Output For each test case, output a single line containing the timestamp and value of each reading within the longest contiguous increasing subarray, separated by a space. If there are multiple longest contiguous increasing subarrays of the same length, output the one that appears first. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ value ≤ 10^6 length of a timestamp ≤ 19 Example Input: 2 5 2023-01-01T00:00:00 1 2023-01-01T00:01:00 2 2023-01-01T00:02:00 3 2023-01-01T00:03:00 2 2023-01-01T00:04:00 4 6 2023-01-01T00:00:00 1 2023-01-01T00:01:00 2 2023-01-01T00:02:00 3 2023-01-01T00:03:00 4 2023-01-01T00:04:00 5 2023-01-01T00:05:00 6 Output: 2023-01-01T00:00:00 1 2023-01-01T00:01:00 2 2023-01-01T00:02:00 3 2023-01-01T00:00:00 1 2023-01-01T00:01:00 2 2023-01-01T00:02:00 3 2023-01-01T00:03:00 4 2023-01-01T00:04:00 5 2023-01-01T00:05:00 6","solution":"def find_longest_increasing_subarray(readings): max_len = 0 max_start_index = 0 current_len = 1 current_start_index = 0 for i in range(1, len(readings)): if readings[i][1] > readings[i - 1][1]: current_len += 1 else: if current_len > max_len: max_len = current_len max_start_index = current_start_index current_len = 1 current_start_index = i if current_len > max_len: max_len = current_len max_start_index = current_start_index return readings[max_start_index:max_start_index + max_len] def format_output(readings): return \' \'.join([f\'{timestamp} {value}\' for timestamp, value in readings]) def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) results = [] index = 1 for _ in range(T): N = int(lines[index]) readings = [] for i in range(N): timestamp, value = lines[index + 1 + i].split() value = int(value) readings.append((timestamp, value)) longest_subarray = find_longest_increasing_subarray(readings) results.append(format_output(longest_subarray)) index += N + 1 return \'n\'.join(results)"},{"question":"Eva is constantly on the go and wants an application that can help her track her steps. She wants a program that calculates the average number of steps she\'s taken over a certain number of days, allowing her to evaluate her progress over time. Your task is to write a function that: 1. Takes an array of daily step counts. 2. Returns the average number of steps Eva has taken, rounded down to the nearest integer. Input - An integer n (1 ≤ n ≤ 105) representing the number of days Eva has recorded her steps. - An array of n integers, where each integer s (0 ≤ s ≤ 105) represents the number of steps taken on that day. Output - A single integer representing the average number of steps rounded down. Examples Input 5 10000 12000 11000 13000 14000 Output 12000 Input 3 5000 8000 10000 Output 7666","solution":"import math def average_steps(n, steps): Returns the average number of steps rounded down to the nearest integer. Parameters: n (int): The number of days. steps (list of int): The array of steps taken each day. Returns: int: The average steps rounded down. total_steps = sum(steps) avg_steps = total_steps // n return avg_steps"},{"question":"A popular gaming competition is underway, and players are awarded points based on their performance. The game organizer wants to keep track of the top players efficiently, as they need the top-k players\' names at any given point in time. The task is to implement a system that can rapidly update player rankings and retrieve the top-k player names. Each player\'s performance is represented by his/her name and score. If two players have the same score, the player who achieved that score first is ranked higher. You will be given three types of operations: 1. \\"Add name score\\": Add a player with the given name and score. If a player with that name already exists, replace their score with the new score. 2. \\"Top k\\": Retrieve the top k players\' names, ranked by their scores in descending order. If there are fewer than k players, return all present players. 3. \\"Remove name\\": Remove the player with the given name from tracking. Your task is to process a sequence of these operations and return the results of the \\"Top k\\" queries. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of operations. The following n lines describe the operations in one of the three formats mentioned above. The player\'s name will be a non-empty string of at most 20 characters, and the score will be an integer between 1 and 1000 (inclusive). The value of k in the \\"Top k\\" query will be between 1 and the total number of players currently being tracked. Output For each \\"Top k\\" query, output a single line with the names of the top k players separated by spaces. Example Input 7 Add Alice 500 Add Bob 600 Add Charlie 700 Top 2 Add Bob 800 Remove Alice Top 2 Output Charlie Bob Bob Charlie","solution":"from collections import OrderedDict class GameRanking: def __init__(self): self.players = OrderedDict() def add(self, name, score): self.players[name] = score def top_k(self, k): sorted_players = sorted(self.players.items(), key=lambda x: (-x[1], list(self.players.keys()).index(x[0]))) return \\" \\".join([player[0] for player in sorted_players[:k]]) def remove(self, name): if name in self.players: del self.players[name] def process_operations(n, operations): game_ranking = GameRanking() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"Add\\": name = parts[1] score = int(parts[2]) game_ranking.add(name, score) elif parts[0] == \\"Top\\": k = int(parts[1]) results.append(game_ranking.top_k(k)) elif parts[0] == \\"Remove\\": name = parts[1] game_ranking.remove(name) return results"},{"question":"In an enchanting forest, there are n mystical islands interconnected by exactly n-1 magical bridges. Each bridge links a pair of islands and it is possible to travel between any two islands using one or more bridges. The Great Wizard of the forest has a flying broomstick that can help him quickly travel between islands, but the broomstick is limited by its flight power k. This means the Wizard can fly between two islands if the minimum number of bridges between them is at most k. The wizard is intrigued by d specific islands that are known to be home to unique magical creatures. Their numbers are q1, q2, ..., qd. Note that these are not necessarily the only islands with magical creatures, but those are the only ones known so far. The wizard wants to identify which islands he can start from and be able to visit all d known islands using his broomstick\'s flight power. Input The first line contains three space-separated integers n, d and k (1 ≤ d ≤ n ≤ 100000; 0 ≤ k ≤ n - 1). The second line contains d distinct space-separated integers q1, q2, ..., qd (1 ≤ qi ≤ n). Then follows n - 1 lines, each describing a bridge in the forest. Each bridge is described by a pair of space-separated integers ui and vi representing the islands it connects. Output Print a single number — the number of islands from which the wizard can start and visit all known magical creature islands using his broomstick\'s flight power. If it\'s not possible to start from any island, print 0. Examples Input 7 3 2 3 4 5 1 2 2 3 3 4 4 5 5 6 6 7 Output 3 Note Sample 1. The flying power of the broomstick k equals 2. The known islands with magical creatures are 3, 4, and 5. Thus, the wizard can start from islands 2, 3, or 4 to visit all the known islands within his flying power.","solution":"from collections import deque, defaultdict def bfs_distance(n, start, edges): # Using BFS to calculate distances from the start island queue = deque([start]) distances = [-1] * (n + 1) distances[start] = 0 while queue: current = queue.popleft() for neighbor in edges[current]: if distances[neighbor] == -1: distances[neighbor] = distances[current] + 1 queue.append(neighbor) return distances def count_valid_start_islands(n, d, k, known_islands, bridges): edges = defaultdict(list) for u, v in bridges: edges[u].append(v) edges[v].append(u) valid_start_count = 0 for start in range(1, n + 1): distances = bfs_distance(n, start, edges) if all(distances[qi] <= k for qi in known_islands): valid_start_count += 1 return valid_start_count # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) d = int(data[1]) k = int(data[2]) known_islands = list(map(int, data[3:3+d])) bridges = [] for i in range(3+d, len(data), 2): u = int(data[i]) v = int(data[i+1]) bridges.append((u, v)) result = count_valid_start_islands(n, d, k, known_islands, bridges) print(result)"},{"question":"Implement a function that takes in a string containing a list of words separated by spaces and a list of banned words. The function should return a dictionary where the keys are the words from the input string (excluding banned words) and the values are the frequency count of each word. Words should be compared in a case-insensitive manner but the returned dictionary should preserve the original case of the first appearance of each word. Input: The first line of the input contains a string of words separated by spaces. The second line contains a space-separated list of banned words. Output: The function should output the dictionary with the words and their corresponding frequency. Constraints: 1 ≤ length of the input string ≤ 10^4 1 ≤ number of banned words ≤ 10^3 1 ≤ length of each word ≤ 100 SAMPLE INPUT: This is a test. This test is only a test. This is not a drill. a this is SAMPLE OUTPUT: {\'test\': 3, \'only\': 1, \'not\': 1, \'drill\': 1}","solution":"def word_frequency(input_string, banned): Returns a dictionary with words and their frequency counts, ignoring banned words and case. import re from collections import defaultdict # Initialize dict and banned set word_count = defaultdict(int) banned_set = set(banned.lower().split()) # Split the input string into words and remove punctuation words = re.findall(r\'bw+b\', input_string.lower()) original_case = {} # Process words for word in words: if word not in banned_set: word_count[word] += 1 if word not in original_case: original_case[word] = re.search(r\'b\' + word + r\'b\', input_string, re.IGNORECASE).group() # Construct the result dictionary preserving original case result = {original_case[word]: count for word, count in word_count.items()} return result"},{"question":"You are given `N` points on a 2D coordinate plane. Each point can be represented as (x, y). Your task is to determine how many unique squares can be formed using these points as the vertices. Note: A square is defined as a quadrilateral with all four sides of equal length and all internal angles of 90 degrees. INPUT: First line contains an integer `T`, the number of test cases. Each test case starts with a single integer `N`, the number of points. The next `N` lines each contain two integers `x` and `y`, representing the coordinates of the points. OUTPUT: For each test case, output a single integer, the number of unique squares that can be formed. Constraints: 1 <= T <= 10 1 <= N <= 200 -10^3 <= x, y <= 10^3 SAMPLE INPUT: 1 4 0 0 0 1 1 0 1 1 SAMPLE OUTPUT: 1 Explanation: The given points (0,0), (0,1), (1,0), (1,1) can form exactly one square with sides of length 1. Hence, the output is 1.","solution":"from collections import defaultdict def count_unique_squares(points): points_set = set((x, y) for x, y in points) n = len(points) lookup = defaultdict(int) for i in range(n): for j in range(i + 1, n): (x1, y1) = points[i] (x2, y2) = points[j] if (x1 != x2 and y1 != y2 and (x1, y2) in points_set and (x2, y1) in points_set): center = ((x1 + x2) // 2, (y1 + y2) // 2) dist = (x1 - x2) ** 2 + (y1 - y2) ** 2 lookup[(center, dist)] += 1 return len(lookup) def unique_squares(test_cases): results = [] for points in test_cases: results.append(count_unique_squares(points)) return results def parse_input(input_lines): input_data = input_lines.strip().split(\'n\') T = int(input_data[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_data[index]) points = [] index += 1 for _ in range(N): x, y = map(int, input_data[index].split()) points.append((x, y)) index += 1 test_cases.append(points) return test_cases"}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},j={class:"card-container"},F={key:0,class:"empty-state"},P=["disabled"],C={key:0},R={key:1};function D(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):h("",!0)]),t("div",j,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+l(a.searchQuery)+'". ',1)):h("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",C,"See more"))],8,P)):h("",!0)])}const z=d(S,[["render",D],["__scopeId","data-v-1b154e81"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/26.md","filePath":"chatai/26.md"}'),M={name:"chatai/26.md"},U=Object.assign(M,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,U as default};
