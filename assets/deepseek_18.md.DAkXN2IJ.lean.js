import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},q={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,p,a,r){return n(),i("div",k,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(T,[["render",E],["__scopeId","data-v-478be276"]]),S=JSON.parse('[{"question":"Given n non-negative integers representing the height of bars of a histogram, find the area of the largest rectangle that can be formed within the bounds of the histogram. ------ Input Format ------ - The first line contains a single integer n, the number of bars in the histogram. - The second line contains n non-negative integers separated by spaces, representing the heights of the bars in the histogram. ------ Output Format ------ - Output a single integer, the area of the largest rectangle that can be formed within the bounds of the histogram. ------ Constraints ------ 1 ≤ n ≤ 10^{5} 0 ≤ height_of_bar ≤ 10^4 ----- Sample Input 1 ------ 6 2 1 5 6 2 3 ----- Sample Output 1 ------ 10 ----- Explanation 1 ------ The largest rectangle that can be formed in the histogram has an area of 10. It spans from the third bar to the fourth bar (height 5 and 6).","solution":"def largest_rectangle_area(heights): Given n non-negative integers representing the height of bars of a histogram, find the area of the largest rectangle that can be formed within the bounds of the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Your task is to determine whether a given string is a valid palindrome. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Create a function named `is_palindrome` that takes in a single string parameter and returns a boolean indicating whether the string is a valid palindrome. Examples: ``` is_palindrome(\\"Able , was I saw eLba\\") => True is_palindrome(\\"race a car\\") => False is_palindrome(\\"Madam In Eden, I\'m Adam\\") => True is_palindrome(\\"No lemon, no melon\\") => True ``` The function should ignore spaces, punctuation, and capitalization while determining if the string is a palindrome. Consider the following points: - An empty string or a string with a single character is considered a valid palindrome. - You may use any standard libraries or helper functions to assist with cleaning and formatting the input string.","solution":"import string def is_palindrome(s): Determines if a given string is a palindrome, ignoring spaces, punctuation, and capitalization. Parameters: s (str): The input string to check for palindrome Returns: bool: True if the string is a palindrome, False otherwise # Remove punctuation and spaces, and convert to lowercase cleaned_string = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is the same forwards and backwards return cleaned_string == cleaned_string[::-1]"},{"question":"Design a function to calculate the minimum number of operations needed to convert one string into another. You are only allowed to use the following three operations: 1. Insert a character. 2. Delete a character. 3. Replace a character with another character. Given two string inputs, find the minimum number of operations required to transform the first string into the second string. # Input - The first line of the input contains two space-separated strings. - Both strings will consist only of lowercase English letters and have lengths ranging from 1 to 1000. # Output - Output a single integer representing the minimum number of operations required. # Example Input ``` kitten sitting sunday saturday ``` Output ``` 3 3 ``` # Explanation 1. `kitten` to `sitting`: replace `k` with `s`, replace `e` with `i`, and insert `g` at the end (total 3 operations). 2. `sunday` to `saturday`: insert `a` after `s`, insert `t` after `a`, and insert `r` before `d` (total 3 operations). The function should be efficient with time complexity better than O(n^2). The recommended method to solve this problem is by using dynamic programming to store intermediate results and avoid redundant calculations.","solution":"def minDistance(word1, word2): Returns the minimum number of operations required to convert word1 to word2. m, n = len(word1), len(word2) # Create a DP table with (m+1) x (n+1) dimension dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the table based on the recurrence relation for i in range(1, m + 1): for j in range(1, n + 1): if word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # Delete dp[i][j - 1] + 1, # Insert dp[i - 1][j - 1] + 1) # Replace return dp[m][n] # Example usage: # print(minDistance(\\"kitten\\", \\"sitting\\")) # Output: 3 # print(minDistance(\\"sunday\\", \\"saturday\\")) # Output: 3"},{"question":"Write a function named `reverse_diagonal_sum` that takes a square matrix (a list of lists) of integers and returns the sum of both the main diagonal and the anti-diagonal elements. The main diagonal consists of those elements that lie on the top-left to bottom-right diagonal, while the anti-diagonal consists of elements that lie on the top-right to bottom-left diagonal. Note: If the matrix is of odd dimensions, ensure that the middle element is not counted twice. -----Input----- - A single parameter: a square matrix (a list of lists) where each element is an integer. You can assume that the matrix will have a size between 1×1 and 50×50. -----Output----- - A single integer: the sum of the elements on the main diagonal and the anti-diagonal. -----Examples----- Sample Input 1: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Sample Output 1: 25 Sample Input 2: [[5, 1], [2, 8]] Sample Output 2: 16 Explanation: - In Sample Input 1, the main diagonal elements are 1, 5, 9 and the anti-diagonal elements are 3, 5, 7. The sum is 1 + 5 + 9 + 3 + 5 + 7 = 30. Since 5 is counted twice, we subtract it once to get 25. - In Sample Input 2, the main diagonal elements are 5, 8 and the anti-diagonal elements are 1, 2. The sum is 5 + 8 + 1 + 2 = 16.","solution":"def reverse_diagonal_sum(matrix): This function takes a square matrix as input and returns the sum of the elements on both the main diagonal and the anti-diagonal, without double-counting the middle element if the matrix has odd dimensions. n = len(matrix) total_sum = 0 for i in range(n): total_sum += matrix[i][i] # main diagonal element total_sum += matrix[i][n-i-1] # anti-diagonal element if n % 2 == 1: middle_index = n // 2 total_sum -= matrix[middle_index][middle_index] return total_sum"},{"question":"Chef is trying to create a simple text-based game. He wants to convert user friendly commands into machine instructions. Each command consists of an action and a direction separated by a space. There are four possible actions: \\"walk\\", \\"run\\", \\"jump\\", and \\"stop\\", and four possible directions: \\"left\\", \\"right\\", \\"forward\\", and \\"backward\\". Chef needs your help to translate these commands into unique instructions. The translation rules are as follows: - Actions are mapped to single characters: \\"walk\\" -> W, \\"run\\" -> R, \\"jump\\" -> J, \\"stop\\" -> S - Directions are also mapped to single characters: \\"left\\" -> L, \\"right\\" -> R, \\"forward\\" -> F, \\"backward\\" -> B For each command, the instruction consists of the action character followed by the direction character. -----Input----- - The first line of input contains an integer T, the number of commands. - The following T lines each contain a command. -----Output----- For each command, print its corresponding machine instruction. -----Constraints----- - 1 ≤ T ≤ 100 - each command string consists of two words separated by a single space and each word is one of the specified actions or directions - each character of the command is a lowercase English letter -----Example Input----- 3 walk left run forward jump backward -----Example Output----- WL RF JB -----Explanation----- The first command \\"walk left\\" translates to WL (W for walk, L for left). The second command \\"run forward\\" translates to RF (R for run, F for forward). The third command \\"jump backward\\" translates to JB (J for jump, B for backward).","solution":"def translate_command(command): Translates a given user-friendly command into a machine instruction. action_mapping = { \\"walk\\": \\"W\\", \\"run\\": \\"R\\", \\"jump\\": \\"J\\", \\"stop\\": \\"S\\" } direction_mapping = { \\"left\\": \\"L\\", \\"right\\": \\"R\\", \\"forward\\": \\"F\\", \\"backward\\": \\"B\\" } action, direction = command.split() return action_mapping[action] + direction_mapping[direction] def translate_commands(command_list): Translates a list of user-friendly commands into their corresponding machine instructions. return [translate_command(command) for command in command_list]"},{"question":"Implement the MovingAverage class as follows: MovingAverage(size): Constructor, sets the size of the moving window. next(val): Returns the moving average of the last `size` values of the stream. Example: MovingAverage movingAverage = new MovingAverage(3); // Init the MovingAverage with a window size of 3. movingAverage.next(1); // return 1.0 movingAverage.next(10); // return 5.5 movingAverage.next(3); // return 4.66667 (10+3+1)/3 movingAverage.next(5); // return 6.0 (10+3+5)/3 Note: 1 <= size <= 1000 -10000 <= val <= 10000 At most 10^4 calls will be made to next.","solution":"class MovingAverage: def __init__(self, size: int): Initialize the MovingAverage with a given window size. self.size = size self.queue = [] self.sum = 0 def next(self, val: int) -> float: Calculate the moving average of the last `size` values. self.queue.append(val) self.sum += val if len(self.queue) > self.size: self.sum -= self.queue.pop(0) return self.sum / len(self.queue)"},{"question":"Alex is a budding photographer who loves taking photos of nature. However, he often runs into the problem of limited storage space on his device. To manage this, he needs an efficient way to identify and store only his favorite photos that meet certain quality standards. Alex defines a photo\'s quality by its score, which can either be positive (good quality) or negative (bad quality). He wants to find the largest contiguous subarray of photo scores where the sum of the scores is the highest. If there are multiple subarrays with the same highest sum, he wants the shortest one. Help Alex by writing a program to determine the starting and ending indices (1-based) of this subarray. Input Format: The first line contains an integer N, the total number of photos Alex has taken. The second line contains N integers separated by space representing the quality scores of each photo. Output Format: Output contains a single line with two integers separated by a space representing the starting and ending indices of the subarray with the maximum sum. Example: Input: 7 -2 1 -3 4 -1 2 1 -5 4 Output: 4 7 Explanation: The subarray with the maximum sum is [4, -1, 2, 1], and its sum is 6. It starts at index 4 and ends at index 7.","solution":"def find_maximum_subarray_with_indices(arr): This function returns the start and end indices (1-based) of the contiguous subarray with the maximum sum. max_sum = -float(\'inf\') current_sum = 0 start = 0 start_temp = 0 end = 0 for i in range(len(arr)): if current_sum <= 0: start_temp = i current_sum = arr[i] else: current_sum += arr[i] if (current_sum > max_sum) or (current_sum == max_sum and ((i - start_temp) < (end - start))): max_sum = current_sum start = start_temp end = i # Converting to 1-based index return (start + 1, end + 1) # Example usage input_array = [-2, 1, -3, 4, -1, 2, 1, -5, 4] print(find_maximum_subarray_with_indices(input_array)) # Output should be (4, 7)"},{"question":"Given an array of integers, write a function ```find_duplicate(nums)``` that returns the first duplicate number for which the second occurrence has the minimal index. In other words, if there are more than one duplicated integers, return the number for which the second occurrence has a smaller index than the second occurrence of the other number. If there are no such elements, return ```-1```. For example: - ```nums = [2, 1, 3, 5, 3, 2]```, the first duplicate number is ```3``` - ```nums = [2, 4, 3, 5, 1]```, there are no duplicates so the function should return ```-1``` - ```nums = [1, 2, 3, 2, 1, 5]```, the first duplicate number is ```2``` Write your implementation of the ```find_duplicate(nums)``` function.","solution":"def find_duplicate(nums): Returns the first duplicate number for which the second occurrence has the minimal index. If there are no duplicates, returns -1. seen = set() for num in nums: if num in seen: return num seen.add(num) return -1"},{"question":"You are given a rectangular grid of size NxM where each cell can either be an open space \'O\' or a wall \'W\'. Your task is to navigate a robot from a given starting position to a target position. The robot can move in four directions: Up, Down, Left, and Right, and it can only move to open spaces (\'O\'). The robot cannot move out of the boundaries of the grid and cannot move through walls (\'W\'). Write a program to find the shortest path from the starting position to the target position and print the sequence of moves it should take. The moves are represented as: - \'U\' for Up - \'D\' for Down - \'L\' for Left - \'R\' for Right If there are multiple shortest paths, any one of them is acceptable. If there is no path from start to target, return \\"NO PATH\\". Input Format: - The first line contains two integers N and M, the dimensions of the grid. - The next N lines contain M characters each, representing the grid (either \'O\' or \'W\'). - The following line contains two integers sx and sy, the starting position of the robot (0-indexed). - The following line contains two integers tx and ty, the target position (0-indexed). Output Format: - Output a string of moves representing the shortest path if a path exists or \\"NO PATH\\" if there is no path. Constraints: - 1 ≤ N, M ≤ 500 - 0 ≤ sx, sy, tx, ty < N, M Example: Input: 5 5 OOOOO OWOWO OOOOO OWOWO OOOOO 0 0 4 4 Output: DDDDRRRR Explanation: The shortest path from the starting position (0, 0) to the target position (4, 4) is accomplished by moving Down 4 times and then Right 4 times.","solution":"from collections import deque def find_shortest_path(N, M, grid, sx, sy, tx, ty): directions = [(\'U\', -1, 0), (\'D\', 1, 0), (\'L\', 0, -1), (\'R\', 0, 1)] queue = deque([(sx, sy, \\"\\")]) visited = set((sx, sy)) while queue: x, y, path = queue.popleft() if (x, y) == (tx, ty): return path for move, dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'O\': queue.append((nx, ny, path + move)) visited.add((nx, ny)) return \\"NO PATH\\""},{"question":"You are given a string s containing only lowercase Latin letters. Your task is to find and print the length of the longest palindromic substring of s. A substring is defined as any contiguous sequence of characters within the string. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Examples of palindromic substrings: \\"a\\", \\"racecar\\", \\"madam\\", \\"aabaa\\". Examples of non-palindromic substrings: \\"abc\\", \\"recede\\", \\"xyz\\". -----Input----- The first line of the input contains a single integer n (1 le n le 1000) — the length of the string s. The second line contains a string s of length n consisting only of lowercase Latin letters. -----Output----- Print a single integer — the length of the longest palindromic substring of s. -----Examples----- Input 5 babad Output 3 Input 6 racecar Output 7 Input 8 abcdedcb Output 8","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in s. n = len(s) if n == 0: return 0 longest = 1 for i in range(n): # Check for odd-length palindromes l, r = i, i while l >= 0 and r < n and s[l] == s[r]: l -= 1 r += 1 longest = max(longest, r - l - 1) # Check for even-length palindromes l, r = i, i + 1 while l >= 0 and r < n and s[l] == s[r]: l -= 1 r += 1 longest = max(longest, r - l - 1) return longest"},{"question":"Alice and Bob are playing a game with a sequence of numbers. The rules of the game are as follows: - They are given a sequence of N integers. - Alice takes all the even-indexed elements (0-based index). - Bob takes all the odd-indexed elements (0-based index). - They sort their respective subsequences in non-decreasing order. - They win points based on the sum of their subsequences. For Alice and Bob, you have to determine who has the higher sum, or if the sums are equal. ------ Input: ------ - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer N, the number of elements in the sequence. - The second line of each test case contains N integers denoting the sequence. ------ Output: ------ For each test case, output: - \\"Alice\\" if the sum of Alice\'s subsequence is greater. - \\"Bob\\" if the sum of Bob\'s subsequence is greater. - \\"Draw\\" if both sums are equal. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ Value of each element in the sequence ≤ 10^4 ------ Sample Input 1 ------ 2 5 100 200 300 400 500 4 10 20 30 40 ------ Sample Output 1 ------ Bob Alice ------ Explanation 1 ------ **Test Case 1:** - Alice takes [100, 300, 500] and sorts: [100, 300, 500]. Sum = 900. - Bob takes [200, 400] and sorts: [200, 400]. Sum = 600. - Bob\'s total sum is less than Alice\'s total sum. So, Alice wins. **Test Case 2:** - Alice takes [10, 30] and sorts: [10, 30]. Sum = 40. - Bob takes [20, 40] and sorts: [20, 40]. Sum = 60. - Bob\'s total sum is greater than Alice\'s total sum. So, Bob wins.","solution":"def determine_winner(test_cases): results = [] for case in test_cases: N, sequence = case alice_sum = sum(sequence[i] for i in range(0, N, 2)) bob_sum = sum(sequence[i] for i in range(1, N, 2)) if alice_sum > bob_sum: results.append(\\"Alice\\") elif bob_sum > alice_sum: results.append(\\"Bob\\") else: results.append(\\"Draw\\") return results"},{"question":"Task Given an integer array `arr` of size `n`, write a function that returns the sum of all unique elements in the array. Input Format The first line of input contains an integer, `n`, representing the size of the array. The second line contains `n` space-separated integers representing the elements of the array `arr`. Constraints 1 leq n leq 100 0 leq arr[i] leq 100 Output Format Return the sum of all unique elements in the array. Sample Input 0 5 1 2 2 3 4 Sample Output 0 8 Explanation 0 The unique elements in the array are {1, 3, 4} and their sum is 1 + 3 + 4 = 8. Sample Input 1 4 1 1 1 1 Sample Output 1 0 Explanation 1 There are no unique elements in the array, so the sum is 0.","solution":"def sum_of_unique_elements(n, arr): Returns the sum of all unique elements in the array. from collections import Counter element_count = Counter(arr) unique_sum = sum(k for k, v in element_count.items() if v == 1) return unique_sum"},{"question":"In this task, you are required to create a weather prediction model based on historical temperature data. Given temperature readings for the first 10 days of a month, predict the temperature for the 11th day. You are provided with a text file temperatures.txt which contains 10 lines. Each line i (1-based) contains an integer representing the temperature recorded on day i. Your task is to output the predicted temperature for the 11th day as an integer. Input [Download the historical temperature data](http://tc-alchemy.progopedia.com/temperature-data.zip) Each line of the file temperatures.txt contains a single integer, which represents the temperature on the corresponding day. Output Output a single integer, representing your predicted temperature for the 11th day.","solution":"def predict_temperature(file_path): Predicts the temperature for the 11th day based on the first 10 days of temperature data. This basic implementation uses a simple moving average for the prediction. :param file_path: Path to the temperatures.txt file. :return: Predicted temperature for the 11th day as an integer. with open(file_path, \'r\') as file: temperatures = [int(line.strip()) for line in file] if len(temperatures) != 10: raise ValueError(\\"The file must contain exactly 10 temperature records.\\") predicted_temperature = sum(temperatures) // len(temperatures) return predicted_temperature"},{"question":"You are given an array of integers and a series of operations to perform on the array. The operations can be either adding a number to all elements in a subarray or finding the maximum value in a subarray. Let a be the initial array of length n. You are given q queries, and each query is one of the following types: 1. Add x to all elements in the subarray from index l to r (both inclusive). 2. Find the maximum value in the subarray from index l to r (both inclusive). You need to execute each query and print the results only for type 2 queries, in the order they are received. -----Input----- The first line contains two integers n and q (1 ≤ n, q ≤ 10^5). The next line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). Each of the next q lines contains one of the following queries: 1 x l r (1 ≤ l ≤ r ≤ n, -10^9 ≤ x ≤ 10^9) - Add x to all elements in the subarray from l to r (both inclusive). 2 l r (1 ≤ l ≤ r ≤ n) - Find the maximum value in the subarray from l to r (both inclusive). -----Output----- For each query of type 2, print one integer: the maximum value in the subarray from index l to r. -----Example----- Input 5 5 1 2 3 4 5 1 2 2 4 2 1 5 1 -1 3 5 2 1 5 1 3 1 3 Output 6 3 -----Note----- After the first query, the array becomes [1, 4, 5, 6, 5]. The maximum value in the whole array is 6. After the third query, the array becomes [1, 4, 4, 5, 4]. The maximum value in the whole array is now 5, but in the specified range [1, 5], it is 5. After the fifth query, the array becomes [4, 7, 7, 5, 4]. The sum and maximum operations should be efficient to handle large input sizes.","solution":"def process_queries(n, q, a, queries): res = [] for query in queries: if query[0] == 1: x, l, r = query[1], query[2] - 1, query[3] - 1 for i in range(l, r + 1): a[i] += x elif query[0] == 2: l, r = query[1] - 1, query[2] - 1 res.append(max(a[l:r + 1])) return res # Example Usage: # a = [1, 2, 3, 4, 5] # queries = [ # [1, 2, 2, 4], # [2, 1, 5], # [1, -1, 3, 5], # [2, 1, 5], # [1, 3, 1, 3] # ] # print(process_queries(5, 5, a, queries)) # Output: [6, 5]"},{"question":"You are given an array of integers. Your task is to find the maximum length of a subarray with an equal number of 0s and 1s. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers a_{i} (a_{i} ∈ {0, 1}) — the elements of the array. Output Print a single integer — the maximum length of a subarray with an equal number of 0s and 1s. Examples Input 6 0 1 0 0 1 1 Output 6 Input 4 0 1 0 1 Output 4 Input 5 0 1 0 1 0 Output 4 Note In the first example, the entire array is a subarray with an equal number of 0s and 1s. In the second example, the entire array is again a subarray with an equal number of 0s and 1s. In the third example, the maximum length subarray with an equal number of 0s and 1s is either from index 0 to 3 or from index 1 to 4.","solution":"def max_length_equal_0s_1s(arr): Given an array of integers containing only 0s and 1s, this function returns the maximum length of a subarray that contains an equal number of 0s and 1s. n = len(arr) # Dictionary to store the first occurrence of a particular count difference count_index_map = {0: -1} count = 0 # Initialize count max_length = 0 # Initialize the maximum length of subarray for i in range(n): # Replace 0 by -1 to make the problem similar to finding the largest subarray with sum 0 if arr[i] == 0: count -= 1 else: count += 1 if count in count_index_map: # If the same count has been seen before, it means the elements between these indices form a subarray with equal 0s and 1s max_length = max(max_length, i - count_index_map[count]) else: # Store the first occurrence of this count count_index_map[count] = i return max_length"},{"question":"Ela loves exploring prime numbers as much as she loves reading books. After completing her book-sorting challenge, one of her co-workers presents her with another task related to prime numbers. Ela is given an integer n and she needs to find the sum of all prime numbers up to n (inclusive). Ela also needs to write a function that finds the prime factors of n and their corresponding exponents when n is represented as a product of prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, 7 is a prime number, whereas 6 is not because it has divisors 2 and 3 in addition to 1 and 6. Ela needs to implement two functions: 1. `sum_of_primes(n)`: This function should return the sum of all prime numbers up to and including n. 2. `prime_factors(n)`: This function should return a list of tuples representing prime factors of n and their corresponding exponents. Each test case will require her to find the sum of primes up to n and the prime factors of n. -----Input----- The first line contains a single integer t (1 le t le 100), the number of test cases. The following t lines contain a single integer n (2 le n le 10^4) for each test case. -----Output----- For each test case, output two lines: 1. The sum of all prime numbers up to and including n. 2. A list of tuples where each tuple contains a prime factor and its exponent, in the form: (prime_factor, exponent). The prime factors should be listed in ascending order. -----Examples----- Input: 3 10 15 20 Output: 17 [(2, 1), (5, 1)] 41 [(3, 1), (5, 1)] 77 [(2, 2), (5, 1)] -----Note----- In the first test case, all prime numbers up to 10 are: 2, 3, 5, 7. Their sum is 17. When considering the prime factors of 10, the result is (2, 1), (5, 1). In the second test case, all prime numbers up to 15 are: 2, 3, 5, 7, 11, 13. Their sum is 41. The prime factors of 15 are (3, 1), (5, 1). In the third test case, all prime numbers up to 20 are: 2, 3, 5, 7, 11, 13, 17, 19. Their sum is 77. The prime factors of 20 are (2, 2), (5, 1).","solution":"def sum_of_primes(n): Returns the sum of all prime numbers up to and including n. if n < 2: return 0 primes = [True] * (n + 1) primes[0] = primes[1] = False p = 2 while (p * p <= n): if (primes[p] == True): for i in range(p * p, n + 1, p): primes[i] = False p += 1 prime_sum = sum(i for i in range(n + 1) if primes[i]) return prime_sum def prime_factors(n): Returns a list of tuples representing prime factors of n and their corresponding exponents. factors = [] count = 0 # count the number of twos that divide \'n\' while n % 2 == 0: n = n // 2 count += 1 if count > 0: factors.append((2, count)) # n must be odd at this point so we can skip even numbers for i in range(3, int(n**0.5) + 1, 2): count = 0 while n % i == 0: n = n // i count += 1 if count > 0: factors.append((i, count)) # this is to handle the case when n is a prime number greater than 2 if n > 2: factors.append((n, 1)) return factors"},{"question":"You are given a string s of length n consisting of lowercase English alphabets. You need to determine the maximum number of consecutive substrings of s that are palindromic. A palindromic substring is a sequence that reads the same forwards and backwards. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string s. The second line contains the string s. -----Output----- Print a single integer representing the maximum number of consecutive palindromic substrings. -----Examples----- Input 7 abacaba Output 7 Input 5 abcde Output 5 -----Note----- In the first example, every individual character is a palindromic substring. However, \\"aba\\", \\"cac\\" and \\"aca\\" can be considered consecutively palindromic, so the number of consecutive palindromic substrings that can be identified is 7. In the second example, each substring of length 1 is a palindromic substring, hence the number of consecutive palindromic substrings is 5.","solution":"def max_consecutive_palindromic_substrings(s: str) -> int: Returns the maximum number of consecutive palindromic substrings in the given string s. Each character itself is considered as a palindromic substring. return len(s)"},{"question":"A well-known company has asked you to create an algorithm to manage their warehouse inventory. They store items in a rectilinear grid layout, with each cell represented as (i, j) containing exactly 1 item. Over the course of a day, items are moved between adjacent cells. An adjacent cell is one that is directly to the left, right, above, or below the current cell. Your task is to track the movements given a series of commands and determine the final position of each item. Each command consists of moving an item from one cell to an adjacent cell. The command format is: \\"MOVE i j DIRECTION\\", where (i, j) is the starting cell and DIRECTION is either \\"UP\\", \\"DOWN\\", \\"LEFT\\", or \\"RIGHT\\". You need to make sure that the cells after each movement remain within the bounds of the grid. # Input - The first line contains three integers n, m, and q denoting the number of rows, the number of columns, and the number of move commands respectively. - The next q lines contain the move commands. # Output - Print the final location of each item in the grid as a mapping from its initial location to its new location. # Constraints - 1 ≤ n, m ≤ 100 - 1 ≤ q ≤ 1000 - Movements should stay within grid bounds. # Example Input: ``` 4 4 5 MOVE 2 2 UP MOVE 3 2 DOWN MOVE 2 1 LEFT MOVE 1 1 RIGHT MOVE 4 4 UP ``` Output: ``` 1 1 -> 1 2 2 1 -> Invalid Move 2 2 -> 1 2 3 2 -> 4 2 4 4 -> 3 4 ``` Explanation: - After movement instructions are applied: - The item initially at (1, 1) moves right to (1, 2). - The item at (2, 1) tries to move left but that’s an invalid move so the position remains unchanged or handled appropriately. - The item at (2, 2) moves up to (1, 2), which might overlap with the earlier moved item. - The item at (3, 2) moves down to (4, 2). - The item at (4, 4) moves up to (3, 4). Ensure that each move and its effect on the warehouse grid are tracked correctly, and handle invalid or boundary-crossing moves appropriately.","solution":"def manage_warehouse(n, m, q, commands): # Initial positions of items warehouse = {(i, j): (i, j) for i in range(1, n + 1) for j in range(1, m + 1)} def move(item, direction): x, y = item if direction == \'UP\' and x > 1: return (x - 1, y) elif direction == \'DOWN\' and x < n: return (x + 1, y) elif direction == \'LEFT\' and y > 1: return (x, y - 1) elif direction == \'RIGHT\' and y < m: return (x, y + 1) else: return \'Invalid Move\' for command in commands: _, i, j, direction = command.split() i, j = int(i), int(j) if warehouse[(i, j)] != \'Invalid Move\': new_position = move((i, j), direction) if new_position != \'Invalid Move\': warehouse[(i, j)] = new_position else: warehouse[(i, j)] = new_position return warehouse"},{"question":"You\'re given a list of words. Write a function that returns the longest word in the list that is made up of other words in the list. If there are multiple such words with the same length, return the one that appears first in the list. If no such word exists, return an empty string. For example: ```python Input: [\\"cat\\", \\"banana\\", \\"dog\\", \\"nana\\", \\"walk\\", \\"walker\\", \\"dogwalker\\"] Output: \\"dogwalker\\" ``` Constraints: - The function should handle lists containing up to 1000 words. - Each word in the list will only contain lowercase English letters. - The length of each word will be at most 100 characters.","solution":"def longest_word_made_of_others(words): def can_form(word, word_set, memo): if word in memo: return memo[word] for i in range(1, len(word)): prefix = word[:i] suffix = word[i:] if prefix in word_set and (suffix in word_set or can_form(suffix, word_set, memo)): memo[word] = True return True memo[word] = False return False words_sorted_by_length = sorted(words, key=len, reverse=True) word_set = set(words) memo = {} for word in words_sorted_by_length: word_set.remove(word) if can_form(word, word_set, memo): return word word_set.add(word) return \\"\\""},{"question":"Given an array of integers, you need to find the absolute difference between the sum of all prime numbers present in the array and the sum of all non-prime numbers present in the array. If the array contains no prime numbers or no non-prime numbers, print -1. A prime number is defined as a number greater than 1 that has no positive divisors other than 1 and itself. Non-prime numbers include 1 and all composite numbers. ------ Input ------ - The first line of input contains an integer T, denoting the number of test cases. - Each test case consists of two lines. - The first line contains an integer N, indicating the number of elements in the array. - The second line contains N space-separated integers, representing the elements of the array. ------ Output ------ For each test case, print a single integer representing the absolute difference between the sum of all prime numbers and the sum of all non-prime numbers in the array. ------ Constraints ------ - 1 ≤ T ≤ 1,000 - 1 ≤ N ≤ 100 - 1 ≤ A[i] ≤ 10^6 ------ Sample Input ------ 3 5 1 2 3 4 5 4 6 8 10 12 3 7 11 13 ------ Sample Output ------ 3 -1 -1 ------ Explanation ------ For the first test case: - Prime numbers: 2, 3, 5 (sum = 10) - Non-prime numbers: 1, 4 (sum = 5) - Absolute difference = |10 - 5| = 5 For the second test case: - There are no prime numbers in the array. - Since there are no prime numbers, the output should be -1. For the third test case: - All numbers are prime numbers, so there are no non-prime numbers in the array. - Since there are no non-prime numbers, the output should be -1.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def absolute_diff_prime_nonprime(arr): Function to calculate the absolute difference between the sum of prime numbers and non-prime numbers in the array. sum_prime = 0 sum_non_prime = 0 for num in arr: if is_prime(num): sum_prime += num else: sum_non_prime += num if sum_prime == 0 or sum_non_prime == 0: return -1 return abs(sum_prime - sum_non_prime) def process_input(test_cases): Function to process multiple test cases. results = [] for case in test_cases: n, array = case results.append(absolute_diff_prime_nonprime(array)) return results def main(): Main function to handle input/output. import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) array = list(map(int, data[index + 1:index + 1 + N])) test_cases.append((N, array)) index += 1 + N results = process_input(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Ashish is an avid gardener and loves planting new species of plants in his garden. He recently purchased several new species and needs your help to arrange them in the garden. Each species needs a specific amount of space to grow properly, and Ashish has a rectangular garden of fixed dimensions. He wants to find out if it is possible to plant all the given species in the garden without any species overlapping or exceeding the garden\'s boundaries. Given the dimensions of the garden and the required space for each species, determine if Ashish can plant all of the species. -----Input----- The first line of input contains two integers G_W and G_H, the dimensions of the garden (1 leq G_W, G_H leq 1000). The second line contains an integer M (1 leq M leq 100), the number of new plant species. The following M lines each contain two integers W_i and H_i (1 leq W_i, H_i leq 500), the dimensions of the space required for the i-th species. -----Output----- Output \\"YES\\" if all the given species can be planted in the garden without overlapping or exceeding the boundaries, otherwise output \\"NO\\". -----Examples----- Sample Input: 10 10 3 3 3 4 4 4 2 Sample Output: YES Sample Input: 8 6 2 5 5 4 4 Sample Output: NO","solution":"def can_plant_species(g_width, g_height, m, species): # Initialize a 2D grid to represent the garden space garden = [[0] * g_width for _ in range(g_height)] for w, h in species: placed = False # Try to place the species in the garden for i in range(g_height - h + 1): for j in range(g_width - w + 1): # Check if the species can fit in the garden at position (i, j) if all(garden[i + x][j + y] == 0 for x in range(h) for y in range(w)): # Place the species in the garden for x in range(h): for y in range(w): garden[i + x][j + y] = 1 placed = True break if placed: break if not placed: return \\"NO\\" return \\"YES\\" # Example usage: # g_width, g_height = 10, 10 # m = 3 # species = [(3, 3), (4, 4), (4, 2)] # print(can_plant_species(g_width, g_height, m, species))"},{"question":"Anna is organizing a competition where each participant must guess a number between 1 and K. She needs to determine how many valid ways there are to distribute L different prizes among P participants such that each participant receives at least one prize. The prizes are distinct, and the order in which prizes are assigned matters. Input: The first line contains the number of test cases T. The following T lines each contain three integers K, L, and P representing the range of possible guesses, the number of distinct prizes, and the number of participants respectively. Output: For each test case, print the number of valid ways to distribute the prizes based on the given constraints. Constraints: 1 ≤ T ≤ 10 1 ≤ K ≤ 100 1 ≤ L ≤ 12 1 ≤ P ≤ L SAMPLE INPUT 2 5 3 2 10 4 3 SAMPLE OUTPUT 30 720","solution":"from math import factorial def assign_prizes(K, L, P): Calculate the number of valid ways to distribute L distinct prizes among P participants. if P > L: return 0 # Not enough prizes to give each participant at least one # Use factorial to handle permutations of the prizes themselves total_ways = factorial(L) // factorial(L - P) return total_ways def process_test_cases(test_cases): Process multiple test cases. results = [] for K, L, P in test_cases: results.append(assign_prizes(K, L, P)) return results"},{"question":"problem In a labyrinth, there are M rows and N columns. The labyrinth is represented as a matrix with M rows and N columns, where each cell contains either `0` (an open path) or `1` (a wall). You can move up, down, left, or right from an open path, but you cannot move diagonally or traverse walls. You need to find the shortest path from the top-left corner of the labyrinth (cell (0, 0)) to the bottom-right corner (cell (M-1, N-1)). If there is no possible path, return `-1`. If the start or end position is a wall, the path is also impossible and should return `-1`. Write a function to calculate the minimum number of steps required to reach the bottom-right corner from the top-left corner. # Input - The first line contains two integers M and N (1 ≤ M, N ≤ 100), the number of rows and columns in the labyrinth. - The next M lines each contain N integers (either `0` or `1`), representing the labyrinth. # Output - Output a single integer, the minimum number of steps required to reach the bottom-right corner from the top-left corner, or `-1` if there is no such path. # Example Input ``` 5 6 0 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 1 0 1 1 1 1 0 0 0 0 0 0 ``` Output ``` 10 ``` Note that in this example, the shortest path from the top-left corner to the bottom-right corner has been calculated as 10 steps.","solution":"from collections import deque def shortest_path_in_labyrinth(M, N, labyrinth): Returns the shortest path in the labyrinth from (0, 0) to (M-1, N-1). If no such path exists, returns -1. # Edge cases: Start or end position is a wall if labyrinth[0][0] == 1 or labyrinth[M-1][N-1] == 1: return -1 # Directions for moving: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Queue for BFS queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() # If we\'ve reached the bottom-right corner if r == M-1 and c == N-1: return dist # Explore neighbors for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < M and 0 <= nc < N and labyrinth[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) # If no path was found return -1"},{"question":"**Consecutive Duplicates** Design a function named `removeConsecutiveDuplicates()` that takes a string argument and returns a new string with all consecutive duplicate letters removed. Consecutive duplicate letters are letters that appear in a sequence repetitively without any other character in between them. ```python removeConsecutiveDuplicates(\\"aabbccdde\\") -> \\"abcde\\" removeConsecutiveDuplicates(\\"mississippi\\") -> \\"misisipi\\" removeConsecutiveDuplicates(\\"aabbaa\\") -> \\"aba\\" ``` Note: - The input string will only contain lowercase English letters. - The output string should be returned in the same order as in the original string, but all sets of consecutive duplicates should be collapsed to a single character.","solution":"def removeConsecutiveDuplicates(s): Returns a new string with all consecutive duplicate letters removed. if not s: return s result = [s[0]] # Initialize result with the first character of the input string for char in s[1:]: if char != result[-1]: # Only add the character if it\'s different from the last in result result.append(char) return \'\'.join(result)"},{"question":"You are given two arrays, A and B, both of length n. A and B contain positive integers. We define a weighted sum of a subarray as follows: For a subarray A[i...j] (i ≤ j) and the corresponding elements in B[i...j], the weighted sum is calculated as: S(A[i...j]) = (A[i] * B[i]) + (A[i+1] * B[i+1]) + ... + (A[j] * B[j]) Your task is to identify the subarray in A and B that gives the maximum weighted sum and output this maximum value. Input: The first line contains a single positive integer n (1 ≤ n ≤ 105) — the length of the arrays. The second line contains n space-separated integers A1, A2, ..., An. The third line contains n space-separated integers B1, B2, ..., Bn. Output: Output a single integer — the maximum weighted sum of any subarray of A. Example: Input: 5 1 2 3 4 5 5 4 3 2 1 Output: 35 Explanation: The subarray A[1...5] gives the maximum weighted sum: (1*5) + (2*4) + (3*3) + (4*2) + (5*1) = 35","solution":"def max_weighted_sum(n, A, B): max_sum = float(\'-inf\') current_sum = 0 for i in range(n): # Reset current_sum for the new subarray starting at index i current_sum = 0 for j in range(i, n): current_sum += A[j] * B[j] # Update max_sum if current_sum for this subarray is greater if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Alice has an array of integers and wants to sort it in non-decreasing order. However, she can only perform a specific type of move: choose any subarray and reverse it. Determine the minimum number of such moves required to sort the array. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the length of the array. The second line contains n integers a[i] (-1000 ≤ a[i] ≤ 1000), the elements of the array. -----Output----- Print the minimum number of moves required to sort the array in non-decreasing order. -----Examples----- Input 3 3 2 1 Output 1 Input 5 1 5 4 3 2 Output 1","solution":"def min_moves_to_sort(arr): Determines the minimum number of subarray reversals required to sort the array in non-decreasing order. n = len(arr) # Check if array is already sorted if arr == sorted(arr): return 0 # Check if reversing a single subarray can sort the array sorted_arr = sorted(arr) l, r = 0, n-1 # Find first mismatch from left while l < n and arr[l] == sorted_arr[l]: l += 1 # Find first mismatch from right while r >= 0 and arr[r] == sorted_arr[r]: r -= 1 # Reverse the subarray and check if it sorts the array arr[l:r+1] = arr[l:r+1][::-1] if arr == sorted_arr: return 1 # Otherwise, more than one move is required return 2"},{"question":"You are given an array A of size n. You need to find a contiguous subarray such that after reversing the entire subarray, the array A becomes sorted in non-decreasing order. Your task is to find the smallest possible length of such a subarray. If the array is already sorted, the length should be 0. -----Input----- The first line contains one integer n (1 ≤ n ≤ 10^3) — the size of array A. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 ≤ a_i ≤ 10^9) — the elements of array A. -----Output----- Output a single integer — the length of the smallest contiguous subarray that, after reversing, makes array A sorted in non-decreasing order. If the array is already sorted, output 0. -----Examples----- Input 5 1 3 5 4 2 Output 4 Input 4 3 2 1 4 Output 3 Input 3 1 2 3 Output 0 -----Note----- In the first sample case, by reversing the subarray [5, 4, 2] (length 4), the array becomes [1, 2, 3, 4, 5] which is sorted. In the second sample case, by reversing the subarray [3, 2, 1] (length 3), the array becomes [1, 2, 3, 4] which is sorted. In the third sample case, the array is already sorted, so the length of the required subarray is 0.","solution":"def smallest_subarray_to_sort(arr): Returns the length of the smallest contiguous subarray that, after reversing, makes the array sorted in non-decreasing order. If the array is already sorted, returns 0. n = len(arr) sorted_arr = sorted(arr) if arr == sorted_arr: return 0 left, right = 0, n - 1 while arr[left] == sorted_arr[left]: left += 1 while arr[right] == sorted_arr[right]: right -= 1 return right - left + 1"},{"question":"Alice and Bob are playing a fun game on a 2D grid. The grid consists of R rows and C columns. Alice places a coin on a cell (r, c) and Bob can move the coin to an adjacent cell either up, down, left, or right. However, the coin cannot be moved outside the grid borders. Given the initial position of the coin and the dimensions of the grid, calculate the total number of valid moves Bob can make. -----Input----- The first line contains two space-separated integers R and C (1 ≤ R, C ≤ 1000), the number of rows and columns in the grid, respectively. The second line contains two space-separated integers r and c (1 ≤ r ≤ R, 1 ≤ c ≤ C), the initial position of the coin on the grid. -----Output----- Print a single integer representing the total number of valid moves Bob can make. -----Examples----- Input 3 3 2 2 Output 4 Input 3 3 1 1 Output 2 Input 2 4 1 3 Output 3","solution":"def count_valid_moves(R, C, r, c): Returns the number of valid moves Bob can make from the initial position (r, c) on an R x C grid. moves = 0 if r > 1: # Can move up moves += 1 if r < R: # Can move down moves += 1 if c > 1: # Can move left moves += 1 if c < C: # Can move right moves += 1 return moves"},{"question":"A group of secret agents use a special encoding technique to hid their messages. This technique involves substituting each letter of a word with another letter a fixed number of positions away down the alphabet. This is a modified Caesar cipher encryption method called \\"Right-shift Cipher\\". Write a program to help the agents encode their messages. The program should take as input a string containing only lowercase letters and an integer representing the fixed shift amount, and then output the encoded string where each letter is shifted to the right by the given amount. If the shift takes you past \'z\', it should wrap around starting again from \'a\'. Input A string containing only lowercase letters and an integer which represents the number of positions to shift. Output A single string with the encoded message. Example Input: hello 3 Output: khoor","solution":"def right_shift_cipher(message, shift): Encodes the message using a right-shift Caesar cipher. Parameters: message (str): The input string containing only lowercase letters. shift (int): The fixed number of positions to shift each letter. Returns: str: The encoded string. encoded_message = [] for char in message: # Calculate the new position of the character after shifting new_position = (ord(char) - ord(\'a\') + shift) % 26 new_char = chr(ord(\'a\') + new_position) encoded_message.append(new_char) return \'\'.join(encoded_message)"},{"question":"Design an algorithm that finds the longest substring of a given string s that meets the following criteria: 1. It contains exactly k distinct characters. 2. The substring is contiguous. Your task is to implement a function that returns the start and end indices of the longest substring that meets the criteria. Function signature: ```python def longest_substring_with_k_distinct(s: str, k: int) -> Tuple[int, int]: ``` # Input - `s` (str): The input string consisting of lowercase English letters. - `k` (int): The number of distinct characters required in the substring. # Output - A tuple (start_index, end_index) representing the start and end indices of the longest contiguous substring with exactly k distinct characters. If there are multiple such substrings, return the indices of the first one found. If no such substring exists, return (-1, -1). # Example ```python s = \\"eceba\\", k = 2 Output: (0, 2) Explanation: The substring is \\"ece\\" with exactly 2 distinct characters. s = \\"aa\\", k = 1 Output: (0, 1) Explanation: The substring is \\"aa\\" with exactly 1 distinct character. ``` # Constraints - 1 <= len(s) <= 10^5 - 1 <= k <= 26","solution":"from typing import Tuple def longest_substring_with_k_distinct(s: str, k: int) -> Tuple[int, int]: if k == 0 or not s: return (-1, -1) n = len(s) char_count = {} left = 0 max_length = 0 max_substring_start = -1 for right in range(n): if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if len(char_count) == k and (right - left + 1) > max_length: max_length = right - left + 1 max_substring_start = left if max_substring_start == -1: return (-1, -1) return (max_substring_start, max_substring_start + max_length - 1)"},{"question":"``` Write a function `flatten_dict` that takes a nested dictionary and returns a flat dictionary where the keys are the paths to the original keys in the format `key1.key2...keyN`. If the input is not a valid dictionary, return `None`. ```","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. The keys in the flattened dictionary are constructed using the path to the original keys in the format `key1.key2...keyN`. If the input is not a valid dictionary, return None. Parameters: d (dict): The nested dictionary to flatten. parent_key (str): The base key (used in recursive calls). sep (str): The separator to use between key levels. Returns: dict: The flattened dictionary or None if the input is not a valid dictionary. if not isinstance(d, dict): return None items = [] for k, v in d.items(): new_key = parent_key + sep + k if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Given a list of integers nums, find the longest contiguous subarray that contains at most two distinct numbers. If there are multiple possible answers, return the subarray with the smallest starting index. If there is no such subarray, return an empty list. Example 1: Input: nums = [1, 2, 1, 2, 3] Output: [1, 2, 1, 2] Explanation: The longest subarray with at most two distinct numbers is [1, 2, 1, 2]. Example 2: Input: nums = [4, 4, 4, 4] Output: [4, 4, 4, 4] Explanation: The longest subarray with at most two distinct numbers is [4, 4, 4, 4]. Example 3: Input: nums = [1, 2, 3, 4, 5, 6] Output: [1, 2] Explanation: The longest subarray with at most two distinct numbers is [1, 2]. Note: - The length of nums will not exceed 10^5. - Each element of nums is an integer in the range [0, 10^4].","solution":"def longest_subarray_with_two_distinct(nums): if not nums: return [] left = 0 right = 0 max_len = 0 start_index = 0 hashmap = {} while right < len(nums): if nums[right] in hashmap: hashmap[nums[right]] += 1 else: hashmap[nums[right]] = 1 while len(hashmap) > 2: hashmap[nums[left]] -= 1 if hashmap[nums[left]] == 0: del hashmap[nums[left]] left += 1 if right - left + 1 > max_len: max_len = right - left + 1 start_index = left right += 1 return nums[start_index:start_index + max_len]"},{"question":"There are N trees in a row, each tree has a certain height, and you are given the heights of the trees in an array. You wish to cut trees in such a way that the resulting sequence of trees forms a strictly increasing height pattern. You are allowed to cut any number of trees (including none). However, you want to maximize the number of trees that remain. Write a program that returns the maximum number of trees that can remain in a strictly increasing sequence after cutting some trees. -----Constraints----- - 1 le N le 10^5 - 1 le height[i] le 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N height_1 height_2 height_3 ... height_N -----Output----- Print the maximum number of trees that can remain in a strictly increasing sequence. -----Sample Input----- 6 3 10 2 1 20 4 -----Sample Output----- 4 - The resultant sequence can be 3, 10, 20 or 3, 4, 20 or 3, 10, 20, 4 Thus, the maximum number of trees that can remain in a strictly increasing sequence is 4.","solution":"def max_trees_in_increasing_sequence(heights): from bisect import bisect_left if not heights: return 0 dp = [] for height in heights: idx = bisect_left(dp, height) if idx < len(dp): dp[idx] = height else: dp.append(height) return len(dp)"},{"question":"Jay is fascinated by matrix operations, so he\'s given you a challenge involving matrix manipulation. You\'re provided with an NxN matrix of integers and your task is to calculate the sum of the elements on the principal diagonal and on the secondary diagonal. Input: - The first line contains a single integer N, denoting the size of the matrix. - The next N lines each contain N space-separated integers, representing the matrix elements. Output: - Output a single integer - the sum of the elements on both the principal diagonal and the secondary diagonal. If an element lies on both diagonals (in the case of odd N), count it only once. Constraints: - 1 ≤ N ≤ 10^3 - 1 ≤ Matrix elements ≤ 10^9 SAMPLE INPUT 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 25 Explanation: The principal diagonal elements are 1, 5, 9. The secondary diagonal elements are 3, 5, 7. The sum is 1 + 5 + 9 + 3 + 7 = 25. Note: The element 5 is shared between both diagonals, so it is counted only once.","solution":"def sum_diagonals(matrix): Returns the sum of the elements on both the principal diagonal and the secondary diagonal. An element that lies on both diagonals is counted only once. :param matrix: List of lists of integers representing the NxN matrix :return: Integer sum of elements on both diagonals n = len(matrix) total_sum = 0 for i in range(n): total_sum += matrix[i][i] # Principal diagonal element if i != n - i - 1: total_sum += matrix[i][n - i - 1] # Secondary diagonal element return total_sum"},{"question":"Lisa has an array `a` containing `n` integers. She defines the \\"perfection index\\" of a subarray as the sum of the absolute differences between each pair of consecutive elements. Lisa wants to calculate the maximum perfection index of any subarray of `a`. Input The first line of the input contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. The next line contains `n` integers `ai` (1 ≤ ai ≤ 1,000,000), where the `i`-th number is equal to the `i`-th element of the array `a`. Output Print a single line containing the maximum perfection index of any subarray of `a`. Example Input 5 1 3 2 4 7 Output 8 Note Consider the first sample. Possible subarrays and their perfection indices: * [1, 3] has perfection index |1 - 3| = 2 * [3, 2] has perfection index |3 - 2| = 1 * [2, 4] has perfection index |2 - 4| = 2 * [4, 7] has perfection index |4 - 7| = 3 * [1, 3, 2] has perfection index |1 - 3| + |3 - 2| = 2 + 1 = 3 * [3, 2, 4] has perfection index |3 - 2| + |2 - 4| = 1 + 2 = 3 ... and so on. The maximum perfection index is achieved by the subarray [1, 3, 2, 4, 7], which has a perfection index of 2 + 1 + 2 + 3 = 8.","solution":"def max_perfection_index(n, array): Calculate the maximum perfection index of any subarray of `array`. Parameters: n (int): The number of elements in the array array (list of int): The array containing n integers Returns: int: The maximum perfection index of any subarray of `array` max_index = 0 for i in range(1, n): max_index += abs(array[i] - array[i-1]) return max_index"},{"question":"Given an array of integers representing the points scored by different players in a game, determine the player ID with the highest total score. If there is a tie, return the player ID with the highest individual round score. If there is still a tie, return the smallest player ID among those tied. Example arr = [ [1, 200], [2, 300], [1, 150], [2, 350], [3, 300] ] Player 1 scores: 200 + 150 = 350 Player 2 scores: 300 + 350 = 650 Player 3 scores: 300 Player 2 has the highest total score: 650. Even though Player 2 ties with Player 3 for the highest single round score of 300, player 2 has the highest total score. Function Description Complete the mostScoringPlayer function in the editor below. mostScoringPlayer has the following parameter(s): list arr: list of lists, where each sublist contains two elements: player id and the score achieved in a round. Returns int: the id of the player with the highest overall score. Input Format The first line contains an integer, n, the size of arr. The next n lines each describe arr[i] as two space-separated integers, the player ID and the score they achieved in that round. Constraints 1 ≤ n ≤ 10^5 1 ≤ Player ID ≤ 10^4 1 ≤ Score ≤ 10^6 Sample Input 0 5 1 200 2 300 1 150 2 350 3 300 Sample Output 0 2 Explanation 0 Player 1 scores: 200 + 150 = 350 Player 2 scores: 300 + 350 = 650 Player 3 scores: 300 Player 2 has the highest total score: 650. Sample Input 1 6 1 100 2 200 3 300 1 200 2 150 3 100 Sample Output 1 3 Explanation 1 Player 1 scores: 100 + 200 = 300 Player 2 scores: 200 + 150 = 350 Player 3 scores: 300 + 100 = 400 Player 3 has the highest total score: 400.","solution":"def mostScoringPlayer(arr): total_scores = {} max_single_scores = {} for player_id, score in arr: # Update total scores for each player if player_id in total_scores: total_scores[player_id] += score else: total_scores[player_id] = score # Update max single round scores for each player if player_id in max_single_scores: max_single_scores[player_id] = max(max_single_scores[player_id], score) else: max_single_scores[player_id] = score # Find player with highest total score max_total_score = max(total_scores.values()) candidates = [player_id for player_id, total_score in total_scores.items() if total_score == max_total_score] # If there is a tie in total score, find player with highest single round score if len(candidates) > 1: max_single_score = max(max_single_scores[player_id] for player_id in candidates) candidates = [player_id for player_id in candidates if max_single_scores[player_id] == max_single_score] # If there is still a tie, return the smallest player ID return min(candidates) # Example usage: arr = [[1, 200], [2, 300], [1, 150], [2, 350], [3, 300]] print(mostScoringPlayer(arr)) # Output: 2"},{"question":"Write a function that takes a string as input and returns a dictionary where the keys are the unique characters in the string, and the values are the number of occurrences of each character. The function should handle both uppercase and lowercase letters as distinct characters. # Examples - Input: `\\"hello\\"` Output: `{\'h\': 1, \'e\': 1, \'l\': 2, \'o\': 1}` - Input: `\\"Mississippi\\"` Output: `{\'M\': 1, \'i\': 4, \'s\': 4, \'p\': 2}` - Input: `\\"aAaA\\"` Output: `{\'a\': 2, \'A\': 2}`","solution":"def character_count(s): Returns a dictionary with the count of each character in the string `s`. count_dict = {} for char in s: count_dict[char] = count_dict.get(char, 0) + 1 return count_dict"},{"question":"A string is called interesting if all its characters are different. You are given a string s consisting of lowercase English letters. In one move, you can select any two adjacent characters of the string and swap them. Your task is to determine the minimum number of moves required to rearrange the string into an interesting string, or determine if it\'s impossible to do so. You have q independent queries. -----Input----- The first line of the input contains an integer q (1 le q le 100) — the number of queries. Next q lines each contain one string s (1 le |s| le 1000) consisting of lowercase English letters. -----Output----- For each query, print the minimum number of moves required to rearrange the string into an interesting string, or -1 if it\'s impossible. -----Example----- Input 3 abc aabc abab Output 0 -1 1 -----Note----- For the first query, the string \\"abc\\" is already interesting as all its characters are different, so the answer is 0. For the second query, the string \\"aabc\\" contains duplicate characters, so it cannot be turned into an interesting string, thus the answer is -1. For the third query, the string \\"abab\\" can be rearranged into the interesting string \\"ab\\" with one move. Swap the second \'b\' with the third \'a\' to get \\"abab\\" -> \\"aabb\\". Since there are still duplicate characters, we determine it is impossible, thus the answer is -1.","solution":"def min_moves_to_interesting(q, queries): Determine the minimum number of moves required to rearrange each string into an interesting string, or determine if it\'s impossible. :param q: Number of queries :param queries: List of strings for each query :return: List of results for each query results = [] for s in queries: if len(s) > len(set(s)): results.append(-1) else: results.append(0) # All characters are unique already return results"},{"question":"A company wants to send out promotional emails to their customers. They want to send these emails in such a way that each customer receives the email exactly at a specific time and the frequency of emails doesn\'t exceed their chosen interval. They have a list of customers with their email sending interval (in days) and the last date they received an email. Your task is to calculate the next date each customer should receive an email. Assume the current date is given as input. ------ Input ------ First line contains T - the number of test cases. Each test case begins with a line containing the current date in the format YYYY-MM-DD. The next line contains N - the number of customers. Then follow N lines, each containing the following information: - The customer\'s name (a string of letters, no spaces) - The interval of emails in days (an integer) - The last email date received by the customer in the format YYYY-MM-DD ------ Output ------ For each test case, for each customer, output a line with the customer\'s name and the next date they should receive the promotional email in the format YYYY-MM-DD. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ interval ≤ 365 The dates are valid Gregorian calendar dates, and the current date is not earlier than the last email date. ------ Sample Input 1 ------ 2 2023-10-01 3 Alice 30 2023-09-01 Bob 15 2023-09-20 Charlie 7 2023-09-24 2023-10-01 2 Dave 10 2023-09-28 Eve 5 2023-09-30 ------ Sample Output 1 ------ Alice 2023-10-01 Bob 2023-10-05 Charlie 2023-10-01 Dave 2023-10-08 Eve 2023-10-05 ------ Explanation 1 ------ For the first test case: - Alice receives emails every 30 days, so her next email after 2023-09-01 is exactly on 2023-10-01. - Bob receives emails every 15 days, so his next email after 2023-09-20 is on 2023-10-05. - Charlie receives emails every 7 days, so his next email after 2023-09-24 is on 2023-10-01. For the second test case: - Dave receives emails every 10 days, so his next email after 2023-09-28 is on 2023-10-08. - Eve receives emails every 5 days, so her next email after 2023-09-30 is on 2023-10-05.","solution":"from datetime import datetime, timedelta def calculate_next_email_dates(test_cases): results = [] for current_date_str, customers in test_cases: current_date = datetime.strptime(current_date_str, \'%Y-%m-%d\') for customer in customers: name, interval, last_email_date_str = customer interval = int(interval) last_email_date = datetime.strptime(last_email_date_str, \'%Y-%m-%d\') next_email_date = last_email_date + timedelta(days=interval) while next_email_date < current_date: next_email_date += timedelta(days=interval) results.append(f\\"{name} {next_email_date.strftime(\'%Y-%m-%d\')}\\") return results"},{"question":"You are given an array of integers representing the inventory of different types of fruits in a warehouse. Each integer represents the count of a specific type of fruit. The warehouse manager wants to reorder the inventory such that all types of fruits with even counts come before those with odd counts, while maintaining the relative order of even and odd counts within their segmented groups. Write a program that processes multiple test cases. Each test case consists of the inventory list of a warehouse. Your task is to reorder each inventory list according to the requirement mentioned above. Input: The first line of the input contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of different types of fruits (i.e., the length of the inventory list). - The next line contains N integers representing the inventory list. Output: For each test case, output the reordered inventory list in a single line. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 0 ≤ A[i] ≤ 1000 Example: Input: 2 5 3 8 6 1 4 4 7 3 2 5 Output: 8 6 4 3 1 2 7 3 5","solution":"def reorder_inventory(test_cases): result = [] for inventory in test_cases: evens = [x for x in inventory if x % 2 == 0] odds = [x for x in inventory if x % 2 == 1] result.append(evens + odds) return result def process_input(input_data): data = input_data.strip().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 inventory = list(map(int, data[index:index + N])) index += N test_cases.append(inventory) return test_cases def format_output(results): return \\"n\\".join(\\" \\".join(map(str, result)) for result in results)"},{"question":"You are given a directed graph with `n` nodes and `m` edges. Each edge has a positive integer weight, and the graph may contain cycles. Your task is to determine the shortest path from a given starting node `s` to a given destination node `d`. -----Input----- The first line contains three integers `n`, `m`, and `s` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000, 1 ≤ s ≤ n) — the number of nodes, the number of edges, and the starting node. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) — indicating there is a directed edge from node `u` to node `v` with weight `w`. The last line contains a single integer `d` (1 ≤ d ≤ n) — the destination node. It\'s guaranteed that weights of paths can be stored in a 64-bit integer. -----Output----- If there is no path from node `s` to node `d`, print \\"NO PATH\\" (without quotes). Otherwise, print the length of the shortest path from `s` to `d`. -----Examples----- Input 5 6 1 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 5 Output 6 Input 4 3 2 2 1 1 2 3 2 3 4 4 4 Output 6 Input 3 1 1 1 2 5 3 Output NO PATH -----Note----- In the first sample, the shortest path from node 1 to node 5 is 1 -> 2 -> 3 -> 5 with a total weight of 2 + 1 + 3 = 6. In the third sample, there is no path from node 1 to node 3.","solution":"import heapq def shortest_path(n, m, s, edges, d): # Create the adjacency list for the graph graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) # Initialize distances and priority queue distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) if distances[d] == float(\'inf\'): return \\"NO PATH\\" else: return distances[d]"},{"question":"Alex is a fan of collecting rare coins. He has a collection of different coins, each with a distinct value. He decides that he wants to find all the possible combinations of coins from his collection that sum up to exactly a specified value. The order in which the coins are combined does not matter to Alex. He is now asking for your help in determining the number of such unique combinations. Given the target sum and the list of coin values, you need to provide the number of unique combinations that sum up to the target value. -----Input:----- - The first line contains T, the number of test cases. Each test case consists of: - The first line containing an integer X, representing the target sum. - The second line containing an integer N representing the number of different coins. - The third line containing N distinct integers representing the values of the coins. -----Output:----- - For each test case, output a single integer denoting the number of unique combinations of coin values that sum up to X. -----Constraints----- - 1 leq T leq 100 - 1 leq X leq 1000 - 1 leq N leq 50 - 1 leq text{coin value} leq 1000 -----Sample Input:----- 2 10 4 2 3 7 8 15 3 5 10 12 -----Sample Output:----- 2 1 In the first test case, the unique combinations that sum up to 10 are [2, 3, 5] and [2, 8]. In the second test case, the unique combination that sums up to 15 is [5, 10].","solution":"from itertools import combinations def count_combinations(target, coins): count = 0 for r in range(1, len(coins) + 1): for comb in combinations(coins, r): if sum(comb) == target: count += 1 return count def solve_coin_combinations(test_cases): results = [] for case in test_cases: target, num_coins, coins = case results.append(count_combinations(target, coins)) return results"},{"question":"Mr. Lavit has another challenge for his students involving numbers and their interactions. There are N students in his class, each student has a number associated with them, initially starting from 0 to N-1. He gives two types of orders to his class: Order 1: U i x where `U` is the character \'U\', indicating an update operation, `i` is the index of the student (0 ≤ i < N), `x` is the new number assigned to the student at index i. Order 2: Q L R where `Q` is the character \'Q\', indicating a query operation, `L` is the starting index (0 ≤ L ≤ R < N), `R` is the ending index, This type of order is to find the sum of all numbers associated with students in the range [L, R]. The students are tasked to handle these operations efficiently. Your task is to process all the operations and respond to the queries. Input Format: - The first line of input contains the integers N and M separated by space. - N is the number of students. - M is the number of operations to be performed. - The next M lines contain one of the following operations: - \\"U i x\\" for update operations, - \\"Q L R\\" for query operations. Output Format: For each query operation, print the sum of numbers in the specified range. Constraints: 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10^5 0 ≤ i < N 0 ≤ L ≤ R < N 0 ≤ x ≤ 10^3 SAMPLE INPUT: 10 5 Q 1 3 U 2 5 U 3 10 Q 1 3 Q 2 4 SAMPLE OUTPUT: 3 16 15 Explanation: Initially, the numbers are: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Q 1 3 - Sum of numbers from index 1 to 3: 1 + 2 + 3 = 6 U 2 5 - Update index 2 with 5, numbers become: [0, 1, 5, 3, 4, 5, 6, 7, 8, 9] U 3 10 - Update index 3 with 10, numbers become: [0, 1, 5, 10, 4, 5, 6, 7, 8, 9] Q 1 3 - Sum of numbers from index 1 to 3: 1 + 5 + 10 = 16 Q 2 4 - Sum of numbers from index 2 to 4: 5 + 10 + 4 = 19","solution":"class StudentNumbers: def __init__(self, n): self.numbers = list(range(n)) def update(self, i, x): self.numbers[i] = x def query(self, l, r): return sum(self.numbers[l:r+1]) def process_operations(n, operations): sn = StudentNumbers(n) results = [] for operation in operations: parts = operation.split() if parts[0] == \'U\': i, x = int(parts[1]), int(parts[2]) sn.update(i, x) elif parts[0] == \'Q\': l, r = int(parts[1]), int(parts[2]) results.append(sn.query(l, r)) return results"},{"question":"Determine the maximum cost. Alice is playing a game where she has n weights, and each weight has a cost associated with it. The game has the following rules: 1. Alice can pick any number of weights. 2. Each weight has a cost denoted by an integer c_i. 3. Alice wants to maximize the cost while ensuring that the sum of the weights does not exceed a given threshold W. Given the list of weights and their associated costs, write a function to determine the maximum cost Alice can achieve without exceeding the weight threshold W. ----- Input Format ----- The input consists of two lines: 1. The first line contains two integers n and W, where n is the number of weights, and W is the maximum allowable weight. 2. The second line contains 2n space-separated integers, where the first n integers represent the weights w_1, w_2, ..., w_n, and the next n integers represent their respective costs c_1, c_2, ..., c_n. ----- Output Format ----- Print the maximum cost Alice can achieve without exceeding the weight threshold W. ----- Constraints ----- - 1 leq n leq 1000 - 1 leq w_i leq 1000 - 1 leq c_i leq 1000 - 1 leq W leq 10000 ----- Sample Input 1 ----- 3 50 10 20 30 60 100 120 ----- Sample Output 1 ----- 220 ----- Explanation 1 ----- Alice can pick weights with values 20 and 30, which gives her a total weight of 50 and total cost of 220. ----- Sample Input 2 ----- 4 10 5 4 6 3 10 40 30 50 ----- Sample Output 2 ----- 60 ----- Explanation 2 ----- Alice can pick weights 4 and 6, which gives her a total weight of 10 and total cost of 40 + 30 = 70.","solution":"def maximum_cost(n, W, weights, costs): # Initialize a DP array to store the maximum cost for each weight capacity dp = [0] * (W + 1) # For each weight, update the DP array backward for i in range(n): for w in range(W, weights[i] - 1, -1): dp[w] = max(dp[w], dp[w - weights[i]] + costs[i]) return dp[W] def parse_input(input_lines): n, W = map(int, input_lines[0].split()) data = list(map(int, input_lines[1].split())) weights = data[:n] costs = data[n:] return n, W, weights, costs def main(input_lines): n, W, weights, costs = parse_input(input_lines) return maximum_cost(n, W, weights, costs)"},{"question":"Given a string s consisting of lowercase English letters and a dictionary of words wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all possible sentences you can make. Note: The same word in the dictionary may be reused multiple times in the segmentation. You may assume the dictionary does not contain duplicate words. Example: Input: s = \\"catsanddog\\", wordDict = [\\"cat\\", \\"cats\\", \\"and\\", \\"sand\\", \\"dog\\"] Output: [\\"cats and dog\\", \\"cat sand dog\\"] Explanation: You can form two sentences from the given string and word dictionary - \\"cats and dog\\" and \\"cat sand dog\\". Your Task: Complete the function wordBreak() which takes a string s and list of strings wordDict as input and returns a list of all possible sentences. Constraints: 1 <= length of s <= 20 1 <= size of wordDict <= 10 1 <= length of each word in wordDict <= 10","solution":"def wordBreak(s, wordDict): def backtrack(start): if start in memo: return memo[start] if start == len(s): return [[]] result = [] for end in range(start + 1, len(s) + 1): word = s[start:end] if word in wordDict: rest_of_the_sentences = backtrack(end) for sentence in rest_of_the_sentences: result.append([word] + sentence) memo[start] = result return result wordDict = set(wordDict) memo = {} break_sentences = backtrack(0) return [\\" \\".join(words) for words in break_sentences]"},{"question":"You are given an array of integers, and you need to find the length of the longest contiguous subarray with all elements having the same value. For example, if the input array is [2, 2, 2, 1, 2, 2, 5, 5, 5, 5], the longest contiguous subarray with the same value is [5, 5, 5, 5], so the answer would be 4. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^4) — the elements of the array. -----Output----- Print a single integer — the length of the longest contiguous subarray with all elements having the same value. -----Example----- Input 10 2 2 2 1 2 2 5 5 5 5 Output 4","solution":"def longest_contiguous_subarray_same_value(arr): Returns the length of the longest contiguous subarray with all elements having the same value. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"The city of AlgoLand is popular for its unique transportation system. The city consists of N locations connected by M one-way roads such that there is always a way to travel from one location to any other location, possibly passing through other locations. In an effort to improve the traffic flow, the city\'s traffic department has decided to analyze the number of strongly connected components in the transportation system. A strongly connected component (SCC) is a maximal subgraph where for every pair of locations (u, v) within the subgraph, there exists a path from u to v and a path from v to u. The traffic department is interested in determining how many such strongly connected components exist in AlgoLand\'s transportation system. Input: * The first line contains two integers, N (number of locations) and M (number of one-way roads). * The next M lines each contain two integers A and B, indicating a one-way road from location A to location B. Output: * Output the number of strongly connected components in the transportation system. Constraints: * 1 ≤ N ≤ 100000 * 0 ≤ M ≤ 100000 * 1 ≤ A, B ≤ N SAMPLE INPUT 5 5 1 2 2 3 3 1 4 5 5 4 SAMPLE OUTPUT 2 Explanation The strongly connected components are: 1. {1, 2, 3} 2. {4, 5} Thus, there are 2 strongly connected components in AlgoLand\'s transportation system.","solution":"def find_scc(n, edges): from collections import defaultdict, deque # Step 1: Create adjacency list graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: graph[u].append(v) reverse_graph[v].append(u) def fill_order(v, visited, stack): visited[v] = True for nei in graph[v]: if not visited[nei]: fill_order(nei, visited, stack) stack.append(v) def dfs(v, visited): visited[v] = True for nei in reverse_graph[v]: if not visited[nei]: dfs(nei, visited) # Step 2: Do DFS and push finished vertices into stack stack = [] visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: fill_order(i, visited, stack) # Step 3: Process vertices in reverse finishing order and count SCCs visited = [False] * (n + 1) scc_count = 0 while stack: v = stack.pop() if not visited[v]: dfs(v, visited) scc_count += 1 return scc_count"},{"question":"Given an integer matrix, M, of size MxN, your task is to rotate the matrix by 90 degrees in a clockwise direction. This means that the elements in the last column of the original matrix will become the elements in the first row of the rotated matrix, and so on. Write a function that takes the matrix as input and outputs the rotated matrix. Input: - The first line of the input contains two integers, M and N, representing the number of rows and columns in the matrix, respectively. - The next M lines contain N integers each, representing the elements of the matrix. Output: - Print the rotated matrix within the dimensions of NxM, where each row of the matrix is printed on a new line and elements are separated by a space. Constraints: - 1 ≤ M, N ≤ 100 Sample Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Sample Output: ``` 7 4 1 8 5 2 9 6 3 ``` Explanation: The given matrix: ``` 1 2 3 4 5 6 7 8 9 ``` When rotated 90 degrees clockwise, becomes: ``` 7 4 1 8 5 2 9 6 3 ```","solution":"def rotate_matrix(matrix): Rotates the given MxN matrix 90 degrees clockwise. Parameters: matrix (list of list of int): The MxN matrix to rotate Returns: list of list of int: The rotated NxM matrix M = len(matrix) N = len(matrix[0]) rotated = [[0] * M for _ in range(N)] for i in range(M): for j in range(N): rotated[j][M - 1 - i] = matrix[i][j] return rotated"},{"question":"Anna is a software engineer who loves working with binary trees. She has a deep interest in finding unique paths from the root to each node and is curious to know more about them. Given a binary tree, she wants to find the sum of all root-to-node paths. Can you help her? -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - For each test case, the first line should contain N, the number of nodes in the binary tree. - Next N lines contain two integers and a character - i, j, c - denoting an edge between node i and node j, where c is either \'L\' for left child or \'R\' for right child. -----Output:----- - For each test case, output a single integer - the sum of all unique root-to-node paths. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 105 - 1 leq i, j leq N -----Sample Input:----- 1 5 1 2 L 1 3 R 2 4 L 2 5 R -----Sample Output:----- 35 -----EXPLANATION:----- The binary tree can be visualized as: 1 / 2 3 / 4 5 Path sums are: 1->2->4 = 124 1->2->5 = 125 1->3 = 13 Sum = 124 + 125 + 13 = 262","solution":"class TreeNode: def __init__(self, value): self.val = value self.left = None self.right = None def build_tree(edges): nodes = {} for parent, child, direction in edges: if parent not in nodes: nodes[parent] = TreeNode(parent) if child not in nodes: nodes[child] = TreeNode(child) if direction == \'L\': nodes[parent].left = nodes[child] else: nodes[parent].right = nodes[child] return nodes[1] # root of the tree def sum_root_to_node_paths(root): def dfs(node, current_path): if not node: return 0 current_path = current_path * 10 + node.val if not node.left and not node.right: return current_path return dfs(node.left, current_path) + dfs(node.right, current_path) return dfs(root, 0) def sum_of_all_paths(T, testcases): results = [] for i in range(T): N, edges = testcases[i] root = build_tree(edges) results.append(sum_root_to_node_paths(root)) return results"},{"question":"# Background A group of robots are working together to carry items across a series of platforms. Each robot can carry one item at a time, and they can move in unison on the platform as long as there are no gaps. If they encounter a gap, the robots must work together to build a temporary bridge using the items they are carrying. The bridge construction and traversal rules are as follows: - The first robot places its item in the gap and waits. - The second robot places its item in the gap and waits. - The process continues until the gap is completely filled. - Once the gap is filled, the robots can move over the bridge and pick up their items again on the other side. The robots continue this process until they reach the end of the series of platforms. The goal is to determine the order in which the robots reach the final platform. # Task Write a function that simulates the movement of the robots and returns the order in which they reach the final platform. The robots are represented by letters (`A`, `B`, `C`, etc.) and the platforms are represented by `-` (solid ground) and `.` (gaps). Robots cannot move past each other and will start from left to right in the order given. # Input - `robots`: A string representing the robots in their starting order (e.g., \\"ABCDEFGHI\\"). - `platforms`: A string representing the series of platforms (e.g., \\"----.----\\"). # Output - Return a string representing the order in which the robots reach the final platform. # Notes - The `platforms` string will not start or end with a gap. - The number of robots and gaps will always be sufficient to solve the problem. - If there is ever ambiguity in which robot should move, the robot at the **back** moves first. # Example Input - `robots = \\"ABC\\"` - `platforms = \\"----.-.--\\"` Output - `result = \\"ABC\\"` Explanation 1. The robots start moving from left to right on the platforms. 2. Initial placement: `ABC` on `----.-.--` 3. The robots encounter a gap at index 4: - `AB C` on `----.-.--` - `A B` on `----ABC--` 4. They bridge the gap and continue moving: - ` A` on `----ABC--` 5. The robots finish crossing: - `--- --C` 6. The robots have all reached the final platform in the order: `ABC`.","solution":"def robot_order(robots, platforms): Returns the order in which the robots reach the final platform. # Initialize the positions of the robots robot_positions = {robot: 0 for robot in robots} final_order = [] # Loop through each character in the platforms for idx, platform in enumerate(platforms): if platform == \'-\': continue elif platform == \'.\': # Move robots to bridge gap from the end (last robot) to the front for robot in reversed(robots): robot_positions[robot] = idx + 1 # Determine the final order by positions sorted_robots = sorted(robot_positions, key=lambda x: robot_positions[x]) final_order = \'\'.join(sorted_robots) return final_order"},{"question":"A delivery company assigns a unique tracking number to each package. The tracking number must fulfill the following requirements: - The tracking number must be exactly 10 characters long. - It must contain only digits and uppercase letters. - It must start with a letter and end with a digit. - No character should repeat consecutively. Your task is to create two regular expressions, `regex_length_and_format` and `regex_no_consecutive_repeats`, which will be used by the provided code template to check if the input string is a valid tracking number using the following expression: (bool(re.match(regex_length_and_format, T)) and bool(re.match(regex_no_consecutive_repeats, T))) Input Format A single string variable `T` denoting the tracking number. Output Format You are not responsible for printing anything to stdout. The locked stub code in the editor does that. Sample Input 0 A1B2C3D4E5 Sample Output 0 True Explanation 0 The tracking number is exactly 10 characters long, contains only digits and uppercase letters, starts with a letter, ends with a digit, and has no consecutive repeating characters. Sample Input 1 AB12CD34E5 Sample Output 1 False Explanation 1 The tracking number contains two consecutive \'AB\' characters, which is invalid. Note: You are not allowed to use any loops or conditional statements to solve this problem. All checks must be performed using regular expressions.","solution":"import re # Define the regular expressions regex_length_and_format = r\\"^[A-Z][A-Z0-9]{8}[0-9]\\" regex_no_consecutive_repeats = r\\"^(?!.*(.)1).*\\" def is_valid_tracking_number(T): Checks if the tracking number T meets the specified criteria using regular expressions. return bool(re.match(regex_length_and_format, T)) and bool(re.match(regex_no_consecutive_repeats, T))"},{"question":"You are given an array consisting of n integers. Let\'s call a pair of elements (ai, aj) good if their sum is an even number. Your task is to determine the maximum number of good pairs that can be formed from the given array. Each element of the array can be used in only one pair. Input The first line of the input contains a single integer n (2 ≤ n ≤ 2000) — the length of the array. Next line contains n integers ai (1 ≤ ai ≤ 10^9). Output Print the maximum number of good pairs that can be formed from the given array. Examples Input 6 1 3 5 7 2 4 Output 3 Input 5 1 1 3 3 5 Output 2 Note In the first sample: - The possible good pairs are (1, 3), (5, 7), and (2, 4). - The number of such pairs is 3. In the second sample: - The possible good pairs are (1, 1) and (3, 3). - The number of such pairs is 2.","solution":"def max_good_pairs(n, arr): This function returns the maximum number of good pairs (ai, aj) where the sum is an even number, from the given array. evens = sum(1 for x in arr if x % 2 == 0) odds = n - evens # The number of good pairs we can form is the total of possible pairs of even and odd numbers return evens // 2 + odds // 2"},{"question":"Marge and Homer operate a taxi service in Springfield. Springfield has an infinite grid of streets with intersections at integer coordinate points (x, y), where x and y are integers. Each block (unit distance between adjacent intersections) has a fare associated with it. There are two types of events in Springfield: 1. A road construction occurs, represented by integers x1, y1, x2, y2, f. As a result of this action, the fare for travel between intersections (x1, y1) and (x2, y2) increases by f dollars. This fare applies to all blocks that lie along the path from (x1, y1) to (x2, y2), inclusive. 2. A taxi ride is requested by Homer, represented by integers x1, y1, x2, y2. Homer always takes the shortest path (in terms of blocks) from (x1, y1) to (x2, y2). Marge needs to calculate how much the fare will be for each taxi ride. Input The first line of input contains a single integer q (1 ≤ q ≤ 1 000). The next q lines contain the information about the events in chronological order. Each event is described in form 1 x1 y1 x2 y2 f if it\'s an event when road construction happens and increases the passing fare by f dollars, or in form 2 x1 y1 x2 y2 if it\'s a taxi ride requested by Homer. - -10^5 ≤ x1, y1, x2, y2 ≤ 10^5, (x1, y1) ≠ (x2, y2), 1 ≤ f ≤ 10^9 Output For each event of type 2, print the total fare Homer should pay for the taxi ride, in chronological order of the corresponding events. Example Input 6 1 0 0 1 0 5 1 1 0 1 1 3 2 0 0 1 1 1 0 0 0 1 2 2 0 0 0 1 2 1 0 1 1 Output 8 2 3 Note In the example test case: 1. The fare between (0,0) to (1,0) is increased by 5. 2. The fare between (1,0) to (1,1) is increased by 3. 3. The fare between (0,0) to (1,1) requires traveling through (0,0) to (1,0) and (1,0) to (1,1), making a total fare of 5 + 3 = 8. 4. The fare between (0,0) to (0,1) is increased by 2. 5. The fare between (0,0) to (0,1) is now 2. 6. The fare between (1,0) to (1,1) is 3.","solution":"from collections import defaultdict class TaxiService: def __init__(self): self.fares = defaultdict(int) def add_fare(self, x1, y1, x2, y2, f): if x1 == x2: for y in range(min(y1, y2), max(y1, y2)): self.fares[(x1, y, x1, y+1)] += f self.fares[(x1, y+1, x1, y)] += f elif y1 == y2: for x in range(min(x1, x2), max(x1, x2)): self.fares[(x, y1, x+1, y1)] += f self.fares[(x+1, y1, x, y1)] += f def calculate_fare(self, x1, y1, x2, y2): fare = 0 while x1 != x2 or y1 != y2: if x1 < x2: fare += self.fares[(x1, y1, x1+1, y1)] x1 += 1 elif x1 > x2: fare += self.fares[(x1, y1, x1-1, y1)] x1 -= 1 elif y1 < y2: fare += self.fares[(x1, y1, x1, y1+1)] y1 += 1 elif y1 > y2: fare += self.fares[(x1, y1, x1, y1-1)] y1 -= 1 return fare def process_events(events): service = TaxiService() results = [] for event in events: e = event.split() if e[0] == \'1\': x1, y1, x2, y2, f = map(int, e[1:]) service.add_fare(x1, y1, x2, y2, f) elif e[0] == \'2\': x1, y1, x2, y2 = map(int, e[1:]) results.append(service.calculate_fare(x1, y1, x2, y2)) return results def main(): q = int(input()) events = [input().strip() for _ in range(q)] results = process_events(events) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Julia is a software developer who loves solving coding puzzles. One day, Julia encounters a challenging puzzle that involves organizing a series of tasks. Julia has a list of tasks, each with a fixed duration. Julia can only work on one task at a time, and she wants to complete all the tasks in the shortest time possible. However, there is a constraint: some tasks depend on others, meaning a task cannot start until all the tasks it depends on are completed. This forms a Directed Acyclic Graph (DAG) of tasks. Julia needs to determine the earliest time she can start each task such that all dependencies are satisfied and tasks are completed as quickly as possible. -----Task----- Given the number of tasks, their durations, and their dependencies, determine the earliest time Julia can start each task. -----Input----- The first line contains an integer T, the number of tasks. The second line contains T integers, representing the duration of each task in order from 0 to T-1. The third line contains an integer D, the number of dependencies. The next D lines contain two integers each, u and v, representing a dependency where task v depends on task u (u must be completed before v can start). -----Constraints----- 1 leq T leq 100 1 leq text{duration of each task} leq 1000 0 leq D leq frac{T times (T-1)}{2} -----Output----- Output T lines. The i-th line should contain the earliest start time of task i. The result will be considered correct as long as the absolute error does not exceed 10^{-3}. -----Examples----- Sample Input 1: 3 2 3 5 2 0 1 1 2 Sample Output 1: 0 2 5 Sample Input 2: 4 1 2 3 4 3 0 2 1 2 2 3 Sample Output 2: 0 0 2 5","solution":"from collections import deque def earliest_start_times(T, durations, D, dependencies): # Initialize in-degrees and adjacency list in_degrees = [0] * T adj_list = [[] for _ in range(T)] for u, v in dependencies: adj_list[u].append(v) in_degrees[v] += 1 # Queue to hold tasks with zero in-degree zero_in_degree_queue = deque() # Initialize earliest start times to zero earliest_start = [0] * T # Add tasks with zero in-degrees to the queue for i in range(T): if in_degrees[i] == 0: zero_in_degree_queue.append(i) while zero_in_degree_queue: task = zero_in_degree_queue.popleft() for neighbor in adj_list[task]: in_degrees[neighbor] -= 1 if in_degrees[neighbor] == 0: zero_in_degree_queue.append(neighbor) # Update earliest start time for the neighbor earliest_start[neighbor] = max(earliest_start[neighbor], earliest_start[task] + durations[task]) return earliest_start # Example usage: # T = 3 # durations = [2, 3, 5] # D = 2 # dependencies = [(0, 1), (1, 2)] # print(earliest_start_times(T, durations, D, dependencies))"},{"question":"Tom and Jerry are playing a turn-based game with piles of stones. There are `n` piles of stones, where the `i`-th pile has `a[i]` stones. Tom always goes first, and then they alternate turns. On each turn, the player must remove exactly one pile of stones. The player who cannot make a move (because there are no more piles left) loses the game. Both players play optimally, aiming to win. Determine who will win the game if both players play optimally. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case starts with a single integer n (1 le n le 10^5) — the number of piles. The second line contains n integers a[1], a[2], ldots, a[n] (1 le a[i] le 10^9) — the number of stones in each pile. The sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print “Tom” if Tom wins the game playing optimally, otherwise print “Jerry”. -----Examples----- Input 2 3 4 2 1 2 1 1 Output Tom Jerry -----Note----- In the first test case, Tom takes the pile with 4 stones on his first move. Whatever Jerry takes next, Tom will always be able to take another pile and make the last move, winning the game. In the second test case, Tom will take one of the piles with 1 stone, and then Jerry will take the other pile, making Tom unable to make a move, so Jerry wins.","solution":"def determine_winner(test_cases): results = [] for n, piles in test_cases: if n % 2 == 1: results.append(\\"Tom\\") else: results.append(\\"Jerry\\") return results"},{"question":"You are given a string S of length N consisting only of the characters \'a\' and \'b\'. Your task is to determine the length of the smallest substring that contains at least one \'a\' and one \'b\'. Example 1: Input: S = \\"abba\\" Output: 2 Explanation: The substring \\"ab\\" or \\"ba\\" are the shortest substrings containing both \'a\' and \'b\'. Example 2: Input: S = \\"aaaaabbbaaaa\\" Output: 2 Explanation: The substring \\"ab\\" or \\"ba\\" are the shortest substrings containing both \'a\' and \'b\'. Your Task: You don\'t need to read or print anything. Your task is to complete the function smallestSubstring() which takes S as input parameter and returns the length of the smallest substring containing at least one \'a\' and one \'b\'. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10000","solution":"def smallestSubstring(S): Returns the length of the smallest substring containing at least one \'a\' and one \'b\'. # Define the length of input string n = len(S) # Initialize variables to track the indices of \'a\' and \'b\' last_pos_a = -1 last_pos_b = -1 # Initialize the result with a large number min_length = n + 1 # Traverse the string to find positions of \'a\' and \'b\' for i in range(n): if S[i] == \'a\': last_pos_a = i if last_pos_b != -1: min_length = min(min_length, last_pos_a - last_pos_b + 1) elif S[i] == \'b\': last_pos_b = i if last_pos_a != -1: min_length = min(min_length, last_pos_b - last_pos_a + 1) # Return the length of the smallest substring return min_length if min_length <= n else 0"},{"question":"# Detail You are given an array of integers representing the stock prices of a company in chronological order. You need to write a function that calculates the maximum profit that can be made by buying and then later selling one share of the stock. You must buy before you can sell, and the sale must happen after the purchase. # Task Write a function `maxProfit` that takes in an array of integers `prices`, where each element represents the stock price on that day. The function should return an integer representing the maximum profit that can be achieved. If no profit can be made, return 0. Examples ```python prices = [7, 1, 5, 3, 6, 4] maxProfit(prices) # Returns 5 (buy at price 1, sell at price 6) prices = [7, 6, 4, 3, 1] maxProfit(prices) # Returns 0 (no profit can be made) ``` Constraints - The length of the `prices` array will be between 1 and 10^4. - The price will be a non-negative integer where 0 ≤ price ≤ 10^4.","solution":"def maxProfit(prices): Calculates the maximum profit that can be made by buying and then later selling one share of the stock. If no profit can be made, return 0. Parameters: prices (list): List of integers representing stock prices in chronological order. Returns: int: Maximum profit that can be made. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are a data analyst working with a social media platform. Your task is to find the most frequently mentioned hashtag in a given list of posts. A hashtag is defined as a string of characters starting with the \'#\' symbol and ending before a space, punctuation, or another \'#\' symbol. Given a list of strings where each string represents a post, write a function to identify the most popular hashtag. Each post can contain 0 to many hashtags. Example 1: Input: posts = [\\"#life is beautiful #happy\\", \\"Enjoying #life #happy times\\", \\"Just a random post\\", \\"#happy vibes\\"] Output: \\"#happy\\" Explanation: The hashtag \\"#happy\\" appears 3 times in the given list of posts, which is more frequent than any other hashtag. Example 2: Input: posts = [\\"#sunset #beach #vacation\\", \\"#sunset #relax\\", \\"#beach fun\\", \\"#vacation #relax\\"] Output: \\"#sunset\\" Explanation: The hashtags \\"#sunset\\", \\"#beach\\", and \\"#vacation\\" all appear 2 times, but since \\"#sunset\\" appears first in the list, it is the most popular. Your Task: You don\'t need to read or print anything. Your task is to complete the function `mostFrequentHashtag()` which takes the list of strings `posts` as an input parameter and returns the most frequently mentioned hashtag as a string. Expected Time Complexity: O(n * m) where n is the number of posts and m is the average length of each post. Expected Space Complexity: O(h) where h is the number of unique hashtags. Constraints: 1 <= len(posts) <= 10^3 1 <= len(posts[i]) <= 280","solution":"import re from collections import Counter def mostFrequentHashtag(posts): Returns the most frequently mentioned hashtag in a list of posts. hashtag_pattern = re.compile(r\\"#w+\\") hashtag_counter = Counter() # Extract hashtags and count their frequencies for post in posts: hashtags = hashtag_pattern.findall(post) hashtag_counter.update(hashtags) # Return the most common hashtag return hashtag_counter.most_common(1)[0][0] if hashtag_counter else None"},{"question":"story Lucy loves sequences, especially those that exhibit interesting patterns. She recently came across a sequence of non-negative integers and got curious about a specific kind of subsequence - one that forms an arithmetic progression (AP). An arithmetic progression is a sequence of numbers in which the difference of any two successive members is a constant. Lucy invites you to help her find the longest subsequence of the given sequence that forms an arithmetic progression. problem You are given a sequence of non-negative integers A of length N. Your task is to find the length of the longest subsequence of A that forms an arithmetic progression. A subsequence is derived from the sequence by deleting some or none of the elements without changing the order of the remaining elements. Input format The input is given in the following format: N a_1 a_2 ... a_N The first line contains an integer N, the length of sequence A. The second line contains N non-negative integers a_1, a_2, ..., a_N, representing the sequence A. Constraints * 1 ≤ N ≤ 100,000 * 0 ≤ a_i ≤ 10^6 for all 1 ≤ i ≤ N Output format Output the length of the longest subsequence that forms an arithmetic progression in one line. Input example 1 6 3 6 9 12 15 18 Output example 1 6 Input example 2 5 1 7 3 5 5 Output example 2 3 Example Input 6 3 6 9 12 15 18 Output 6","solution":"def longest_ap_subsequence_length(sequence): n = len(sequence) if n <= 2: return n # Create a dictionary to store lengths of AP subsequence (default length = 1) dp = {} max_len = 1 # AP minimum length is 1 for i in range(n): dp[i] = {} for j in range(i): diff = sequence[i] - sequence[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_len = max(max_len, dp[i][diff]) return max_len # Example usage if __name__ == \\"__main__\\": sequence = [3, 6, 9, 12, 15, 18] print(longest_ap_subsequence_length(sequence)) # Output: 6"},{"question":"Alex is training for a marathon and keeps track of his daily running distance for N days. He wants to analyze his training by identifying the maximum distance he ran on a single day and the minimum distance he ran on a single day during this period. Write a program that determines the maximum and minimum distances Alex ran in the given period. ------ Input Format ------ - The first line contains an integer N — the number of days Alex has recorded his running distance. - The second line contains N integers separated by spaces, where each integer represents the distance Alex ran on that day. ------ Output Format ------ Output two integers separated by a space: the maximum distance and the minimum distance Alex ran over the N days. ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ Distance on any given day ≤ 1000 ------ Sample Input 1 ------ 5 10 5 8 12 7 ------ Sample Output 1 ------ 12 5 ------ Explanation 1 ------ Over the 5 days, the maximum distance Alex ran is 12 units, and the minimum distance he ran is 5 units.","solution":"def find_max_min_distances(N, distances): Returns the maximum and minimum distances run over N days. Parameters: N (int): the number of days distances (list): list of distances run each day Returns: tuple: maximum and minimum distances max_distance = max(distances) min_distance = min(distances) return max_distance, min_distance"},{"question":"You are given a rectangular grid of size m x n. Each cell in the grid contains a value that represents the height of the land at that point. You are standing on the top-left corner of the grid (0, 0) and your objective is to reach the bottom-right corner of the grid (m-1, n-1). You can only make moves to the right or down from your current position. You need to find the minimum path sum from the top-left corner to the bottom-right corner. Write a function `min_path_sum` that takes in a 2D list grid of integers, representing the grid, and returns an integer, the minimum path sum from the top-left corner to the bottom-right corner. Input: - An integer t representing the number of test cases. - For each test case, the first line contains two integers m and n, representing the number of rows and columns of the grid, respectively. - The next m lines each contain n integers representing the grid. Output: - For each test case, print the minimum path sum from the top-left corner to the bottom-right corner. SAMPLE INPUT 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 SAMPLE OUTPUT 7 3 Explanation: Testcase 1: The grid is: 1 3 1 1 5 1 4 2 1 The path with the minimum sum from (0, 0) to (2, 2) is 1 -> 1 -> 1 -> 1 -> 1, for a total sum of 7. Testcase 2: The grid is: 1 2 1 1 The path with the minimum sum from (0, 0) to (1, 1) is 1 -> 1 -> 1, for a total sum of 3.","solution":"def min_path_sum(grid): Finds the minimum path sum from the top-left corner to the bottom-right corner of a given m x n grid. m = len(grid) n = len(grid[0]) # Create a 2D dp array to store minimum path sums dp = [[0] * n for _ in range(m)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the minimum path sum return dp[m-1][n-1] def handle_input(t, test_cases): results = [] for case in test_cases: m, n, grid = case results.append(min_path_sum(grid)) return results"},{"question":"Given a positive integer n, write a function that determines the smallest positive integer x such that the product of its digits equals n. If no such integer exists, return -1. Example 1: Input: n = 18 Output: 29 Explanation: 2*9 = 18, which is the smallest combination. Example 2: Input: n = 48 Output: 68 Explanation: Smallest combinations with the same product are 68 and 86, but 68 is the smallest number. Example 3: Input: n = 7 Output: 7 Explanation: 7 itself is the smallest number whose product of digits is 7. Example 4: Input: n = 1 Output: 1 Explanation: 1 itself is the smallest number whose product of digits is 1. Example 5: Input: n = 100 Output: 455 Explanation: Smallest combinations are 455, 554, and others, but 455 is the smallest number. Constraints: 1 <= n <= 10^5","solution":"def smallest_product_digit_combination(n): Returns the smallest positive integer x such that the product of its digits equals n. If no such integer exists, returns -1. :param n: Positive integer :return: Smallest positive integer x or -1 if no such integer exists if n == 1: return 1 factors = [] for i in range(9, 1, -1): while n % i == 0: factors.append(i) n //= i if n != 1: return -1 factors.sort() result = int(\'\'.join(map(str, factors))) return result"},{"question":"John and Emma are planning to plant flowers in their garden. They have a list of flower heights and want to arrange the flowers in non-decreasing order of height. Additionally, they want to leave some gaps (empty spaces) between some of the flowers to introduce variety and aesthetic appeal. You are given an array a of n integers where each element represents the height of a flower. You are allowed to select a subsequence of these flowers and arrange them in the garden. A subsequence is a sequence derived by deleting some or none of the elements from the array without changing the order of the remaining elements. The order of heights in the subsequence must be non-decreasing. Can you help them figure out if it is possible to rearrange the flowers in the provided list into a subsequence with heights in non-decreasing order while allowing gaps between some flowers? -----Input----- The first line of the input contains a single integer t (1 le t le 100) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n (1 le n le 10^5) — the number of flowers in the garden. Then follows a line containing n integers a_i (1 le a_i le 10^9) — the heights of the flowers. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print \\"YES\\" if it is possible to select a subsequence of the given list such that the heights are in non-decreasing order. Otherwise, print \\"NO\\" (case insensitive). -----Examples----- Input 4 5 3 1 4 1 5 3 3 2 1 4 5 6 6 5 2 1 1 Output YES NO YES YES -----Note----- In the first test case, an example of a valid subsequence is [1, 1, 4, 5]. In the second test case, no subsequence of length greater than 1 with heights in non-decreasing order is possible.","solution":"def can_form_non_decreasing_subsequence(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] results.append(\\"YES\\" if can_form_subsequence(n, heights) else \\"NO\\") return results def can_form_subsequence(n, heights): for i in range(1, n): if heights[i] >= heights[i - 1]: return True return False"},{"question":"You are given a list of students with their corresponding scores in a test. Your task is to rank the students based on their scores. In case of a tie (i.e., multiple students having the same score), assign the same rank to those students and leave a gap in the ranking for subsequent students. For example, if two students share the highest score, they both receive rank 1 and the next student (with the next highest score) receives rank 3 (no one gets rank 2). ------ Input ------ The first line contains an integer T, the number of test cases. The description of the T test cases follows. The first line of each test case contains an integer N, the number of students. The following N lines each contain a string name and an integer score, separated by a space. ------ Output ------ For each test case, print N lines. Each line should contain the student\'s name, followed by their rank. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ score ≤ 100 ----- Sample Input 1 ------ 2 5 Alice 90 Bob 85 Charlie 85 David 80 Eva 70 3 John 95 Jane 95 Jake 90 ----- Sample Output 1 ------ Alice 1 Bob 2 Charlie 2 David 4 Eva 5 John 1 Jane 1 Jake 3 ------ Explanation 1 ------ In the first test case, - Alice has the highest score, so she gets rank 1. - Bob and Charlie have the same score, so they both get rank 2. - David has the next highest score, so he gets rank 4 (since rank 3 is skipped). - Eva gets rank 5. In the second test case, - John and Jane both have the highest score, so they both get rank 1. - Jake has the next highest score, so he gets rank 3 (since rank 2 is skipped).","solution":"def rank_students(test_cases): results = [] for students in test_cases: sorted_students = sorted(students, key=lambda x: -x[1]) ranks = [] current_rank = 1 count = 1 for i in range(len(sorted_students)): if i > 0 and sorted_students[i][1] != sorted_students[i - 1][1]: current_rank = count ranks.append((sorted_students[i][0], current_rank)) count += 1 results.append(ranks) return results def process_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) students = [] for j in range(1, N+1): name, score = lines[index + j].rsplit(\\" \\", 1) score = int(score) students.append((name, score)) test_cases.append(students) index += (N + 1) return test_cases def format_output(results): output = [] for result in results: for student in result: output.append(f\\"{student[0]} {student[1]}\\") return \\"n\\".join(output)"},{"question":"Write a function to find the number of connected components in an undirected graph. Given an undirected graph, represented as an adjacency list, provide the number of connected components in the graph. Example: Input: n = 5 edges = [[0, 1], [1, 2], [3, 4]] Output: 2 Explanation: The graph has two connected components: 1. The first component contains nodes 0, 1, and 2. 2. The second component contains nodes 3 and 4.","solution":"def count_connected_components(n, edges): def dfs(node, visited, graph): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) graph = [[] for _ in range(n)] for edge in edges: graph[edge[0]].append(edge[1]) graph[edge[1]].append(edge[0]) visited = [False] * n components = 0 for i in range(n): if not visited[i]: components += 1 visited[i] = True dfs(i, visited, graph) return components"},{"question":"Bob is an avid reader and loves to visit his local library. Every time he visits, he borrows a few books. Over the years, he has kept a record of which book genres he has borrowed. Bob decides to analyze his borrowing patterns and wants to determine the genre he has not borrowed for the longest time. Help Bob by writing a program to find the genre that he borrowed the longest time ago. -----Input----- The first line contains an integer n (1 ≤ n ≤ 2·10^5) — the number of genres recorded by Bob. The second line contains n integers g_1, g_2, ..., g_{n} (0 ≤ g_{i} ≤ 2·10^5) — the genres of books Bob borrowed, in the order he borrowed them. Note that some genres might not have been borrowed at all. -----Output----- Print one integer — the genre that Bob has not borrowed for the longest period. -----Examples----- Input 4 7 3 7 2 Output 3 Input 5 1 5 4 5 1 Output 4 -----Note----- In the first example, Bob borrowed books of genres 7, 3, and 2. The last time he borrowed a book of genre 3 was before he last borrowed any other genres, hence the answer is 3. In the second example, Bob borrowed books of genres 1, 5, and 4. The genre he borrowed the longest time ago compared to other genres is 4.","solution":"def find_longest_time_genre(n, genres): Returns the genre that has not been borrowed for the longest time. Parameters: n (int): The number of genres recorded by Bob genres (list): The list of genres Bob borrowed, in order of borrowing Returns: int: The genre that has not been borrowed for the longest time last_borrowed = {} # Record the last borrowed time for each genre for i, genre in enumerate(genres): last_borrowed[genre] = i # Find the genre with the minimum index oldest_genre = None oldest_index = n # since maximum index can be n-1 for genre, index in last_borrowed.items(): if index < oldest_index: oldest_index = index oldest_genre = genre return oldest_genre"},{"question":"A prestigious coding school wants to create a system to schedule interviews for its applicants. There are n applicants and m interviewers. Each interviewer has limited available time slots, and each applicant has certain preferences for interview slots. The goal is to maximize the number of successful interviews such that no applicant is scheduled for more than one interview and no interviewer conducts more than one interview at the same time slot. An interview slot is defined by a time range [start, end). To allocate an interview, the start and end times should fall within the available slots for both interviewer and applicant, and should match the preferences of the applicant. Write a program to determine the maximum number of interviews that can be scheduled. Input The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 100), which represent the number of applicants and interviewers respectively. The next n lines describe each applicant by two integers k (1 ≤ k ≤ 10), the number of preferred slots, followed by k pairs of integers which represent start and end times of their preferences. The next m lines describe each interviewer by two integers l (1 ≤ l ≤ 10), the number of available slots, followed by l pairs of integers which represent start and end times of their availability. Output Output a single integer representing the maximum number of interviews that can be scheduled. Examples Input 3 2 2 9 11 13 15 1 10 12 3 14 16 17 19 20 22 2 9 12 14 18 1 10 13 1 19 21 Output 2 Input 4 3 1 8 10 1 10 12 2 9 11 14 16 2 11 13 18 20 1 8 11 3 12 15 16 19 19 22 2 8 10 10 14 Output 3 Explanation In the first example, applicants 1 and 2 can be scheduled with the two interviewers during the available time ranges. Applicant 1 prefers [9, 11) and [13, 15), and applicant 2 prefers [10, 12), and interviewer 1 and 2 can cover these time slots. Therefore, the maximum number of interviews that can be scheduled is 2. In the second example, the maximum number of successful interviews is 3 as the applicants\' preferences and the interviewers\' availabilities align within the given time slots.","solution":"def max_interviews(n, m, applicants, interviewers): from collections import defaultdict applicant_slots = [] for applicant in applicants: k = applicant[0] slots = [] for i in range(k): start, end = applicant[2*i + 1], applicant[2*i + 2] slots.append((start, end)) applicant_slots.append(slots) interviewer_slots = [] for interviewer in interviewers: l = interviewer[0] slots = [] for i in range(l): start, end = interviewer[2*i + 1], interviewer[2*i + 2] slots.append((start, end)) interviewer_slots.append(slots) match_count = 0 matched_interviewers = [set() for _ in range(m)] for i, slots in enumerate(applicant_slots): found_match = False for slot in slots: start, end = slot for j in range(m): if j not in matched_interviewers[j]: if any(istart <= start and iend >= end for istart, iend in interviewer_slots[j]): match_count += 1 matched_interviewers[j].add(i) found_match = True break if found_match: break return match_count"},{"question":"G: Marathon Preparation Story I, Haru, am a marathon enthusiast! I\'ve been training hard for an upcoming marathon event that takes place in different cities. The marathon starts in the city where I\'m currently living and ends at the event city. To ensure that participants are well-prepared, we have set up training checkpoints in various cities along the route. However, I need to figure out the optimal training path to follow and the total cost of entering these training checkpoints. My goal is to pass through the training checkpoints in such a way that allows me to cover the required distances daily without exceeding my daily running limit. Each day, I want to reach a checkpoint that is within my running capacity and ensures that I cover the minimum necessary mileage to stay on track. The marathon organizers provide information about the distances between cities and the cost associated with crossing these distances. Problem There are N cities, each numbered from 1 to N. The city in which I currently live is city 1, and the marathon event is held in city N. Moreover, there are M permissible routes between the cities. The i-th route connects city a_i to city b_i (1 ≤ a_i, b_i ≤ N) and has a distance of d_i kilometers and a checkpoint fee of c_i yen. I can run up to D kilometers daily without rest. Each day, I must have enough energy to pay the checkpoint fee upon reaching a new city. Given the distances and checkpoint fees for each route, I need to find the minimum total cost to reach the event city N without exceeding my daily running limit. Input Format The input is given in the following format: - The first line contains three integers N, M, and D (1 ≤ N ≤ 100,000, 0 ≤ M ≤ 500,000, 1 ≤ D ≤ 10,000). - The following M lines contain three integers each: a_i, b_i, and c_i (1 ≤ c_i ≤ 10,000, 1 ≤ d_i ≤ D), representing that there is a route between city a_i and city b_i with a distance of d_i kilometers and a checkpoint fee of c_i yen. Both cities can be traversed in both directions. Output Format Output the minimum total cost required to reach city N from city 1. If it\'s impossible to reach city N within the given constraints, output -1. Example Input 5 6 10 1 2 100 2 5 200 1 3 400 1 4 300 3 5 600 4 5 500 Output 300 Explanation The optimal path to travel from city 1 to city N (city 5) is 1 → 4 → 5 with a total cost of 300 yen. Any other path would either exceed the daily running distance limit of 10 kilometers or incur a higher fee.","solution":"import heapq from collections import defaultdict def min_cost_to_reach_city(n, m, d, edges): graph = defaultdict(list) for a, b, dist, cost in edges: graph[a].append((b, dist, cost)) graph[b].append((a, dist, cost)) pq = [(0, 1)] # (current_cost, current_city) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 visited = set() while pq: current_cost, current_city = heapq.heappop(pq) if current_city in visited: continue visited.add(current_city) for neighbor, dist, cost in graph[current_city]: if dist <= d: new_cost = current_cost + cost if new_cost < distances[neighbor]: distances[neighbor] = new_cost heapq.heappush(pq, (new_cost, neighbor)) return distances[n] if distances[n] != float(\'inf\') else -1"},{"question":"You are given three integers `a`, `b`, and `c` representing the sides of a potential triangle. You need to determine if these three sides can form a valid triangle. Additionally, if they can form a triangle, you need to identify if the triangle is equilateral, isosceles, or scalene. Recall the conditions for a valid triangle: 1. The sum of any two sides must be greater than the third side. 2. An equilateral triangle has all three sides equal. 3. An isosceles triangle has exactly two sides equal. 4. A scalene triangle has all sides of different lengths. Your task is to implement a function that takes three integers and outputs one of the following: - `NO` if the sides do not form a valid triangle. - `Equilateral` if the sides form an equilateral triangle. - `Isosceles` if the sides form an isosceles triangle. - `Scalene` if the sides form a scalene triangle. Input The input consists of three integers `a`, `b`, and `c` (0 < a, b, c ≤ 1000) provided in a single line separated by spaces. Output Print one of the outputs as described above. Examples Input 3 3 3 Output Equilateral Input 3 4 5 Output Scalene Input 1 2 3 Output NO","solution":"def classify_triangle(a, b, c): Classifies a triangle based on its side lengths as Equilateral, Isosceles, Scalene, or NO (not a valid triangle). # Check if the sides form a valid triangle if (a + b <= c) or (a + c <= b) or (b + c <= a): return \\"NO\\" # Check for equilateral triangle if a == b == c: return \\"Equilateral\\" # Check for isosceles triangle if a == b or a == c or b == c: return \\"Isosceles\\" # If none of the above, it\'s a scalene triangle return \\"Scalene\\""},{"question":"You are given a list of integers, where each integer represents a height of a building in a city skyline. Your task is to determine how many buildings have an unobstructed view of the sunset. The city is facing the west, so to see the sunset, a building must be taller than all the buildings to its west. -----Input----- The first line of the input contains a single integer n (1 le n le 10^5) — the number of buildings in the skyline. The second line contains n integers separated by spaces, where the i^{th} integer h_i (1 le h_i le 10^9) represents the height of the i^{th} building. -----Output----- Output a single integer — the number of buildings that have an unobstructed view of the sunset. -----Examples----- Input 5 3 7 8 3 6 Output 3 Input 4 4 3 2 1 Output 1 -----Note----- In the first example, the buildings with heights 3, 7, and 8 have an unobstructed view of the sunset. The remaining buildings (3 and 6) are obstructed by the taller buildings in front of them. In the second example, only the first building has an unobstructed view of the sunset. All subsequent buildings are shorter and therefore cannot see the sunset due to the taller preceding buildings.","solution":"def count_unobstructed_buildings(n, heights): Given a list of building heights, returns the number of buildings with an unobstructed view of the sunset. Args: n : int : number of buildings heights : List[int] : list of heights of the buildings Returns: int : number of buildings with a view of the sunset if n == 0: return 0 max_height = heights[0] count = 1 # The first building always has a view for i in range(1, n): if heights[i] > max_height: count += 1 max_height = heights[i] return count"},{"question":"Write a function to perform the following operations on a list B of length n, initialized to all zeroes: * multiply(i, x): multiply bi by x. * getProduct(s, t): print the product of bs, bs+1,...,bt. The initial values of bi (i = 1, 2, ... , n) are 1. Constraints * 1 ≤ n ≤ 50000 * 1 ≤ q ≤ 50000 * If comi is 0, then 1 ≤ xi ≤ n, 1 ≤ yi ≤ 1000. * If comi is 1, then 1 ≤ xi ≤ n, 1 ≤ yi ≤ n. Input n q com1 x1 y1 com2 x2 y2 ... comq xq yq In the first line, n (the number of elements in B) and q (the number of queries) are given. Then, q queries are given where com represents the type of queries. \'0\' denotes multiply(xi, yi) and \'1\' denotes getProduct(xi, yi). Output For each getProduct operation, print the product in a line. Example Input 4 4 0 1 2 0 3 4 1 1 3 1 3 4 Output 8 4","solution":"class Operations: def __init__(self, n): self.B = [1] * n def multiply(self, i, x): self.B[i - 1] *= x def getProduct(self, s, t): product = 1 for i in range(s - 1, t): product *= self.B[i] return product def process_operations(n, operations): op = Operations(n) results = [] for operation in operations: com, x, y = operation if com == 0: op.multiply(x, y) elif com == 1: results.append(op.getProduct(x, y)) return results"},{"question":"Implementing Fair Billing System: Alice and Bob are running a subscription-based video streaming platform. They have different subscription plans and multiple users who subscribe to these plans. They want to create an automated billing system to ensure fair billing for their users. You are provided with the subscription plan details and user activities. Each subscription plan supports a specific number of maximum viewers at any given time. If a user exceeds the viewer limit for a given subscription plan, they will be billed for an additional unit of that plan. Given the details of the plans available and the user activities in terms of viewer count at discrete times, your task is to determine the total billing cost for each user based on their subscription plan. **Input:** The input consists of a single test case. The first line contains two integers, `p`, and `u` (1 ≤ p, u ≤ 100), the number of subscription plans and the number of users respectively. The next `p` lines describe each subscription plan in terms of - the name of the plan (string of up to 10 characters) - the cost of the plan (an integer between 1 and 1000) - the maximum number of viewers supported under this plan (an integer between 1 and 100) The following `u` lines provide the user details. Each line contains: - the name of the user (string of up to 10 characters) - the name of the plan the user has subscribed to The next line contains an integer `v` (1 ≤ v ≤ 1000), the number of activities/entries for user viewing. The next `v` lines describe the user activity, each line containing: - the time of activity in `HH:MM` format (string) - the name of the user (string of up to 10 characters) - the number of viewers at that time (an integer between 1 and 100) **Output:** For each user, output their name followed by the total billing cost in a separate line. Output users in the order they appeared in the input. **Example Input:** ``` 2 3 basic 10 2 premium 20 5 alice basic bob premium carol basic 6 09:00 alice 2 09:15 alice 3 10:00 bob 1 10:15 bob 6 10:30 carol 2 11:00 carol 3 ``` **Example Output:** ``` alice 20 bob 40 carol 20 ```","solution":"def fair_billing_system(p, u, plans, users, activities): user_plan = {} plan_details = {} for plan in plans: name, cost, max_viewers = plan plan_details[name] = (cost, max_viewers) for user in users: user_name, plan_name = user user_plan[user_name] = { \\"plan_name\\": plan_name, \\"plan_cost\\": plan_details[plan_name][0], \\"max_viewers\\": plan_details[plan_name][1], \\"total_cost\\": plan_details[plan_name][0] } for time, user_name, viewers in activities: viewers = int(viewers) user_data = user_plan[user_name] if viewers > user_data[\\"max_viewers\\"]: additional_units = (viewers // user_data[\\"max_viewers\\"]) user_data[\\"total_cost\\"] += additional_units * user_data[\\"plan_cost\\"] return [(user, data[\\"total_cost\\"]) for user, data in user_plan.items()] # Example usage and output p = 2 u = 3 plans = [ (\\"basic\\", 10, 2), (\\"premium\\", 20, 5) ] users = [ (\\"alice\\", \\"basic\\"), (\\"bob\\", \\"premium\\"), (\\"carol\\", \\"basic\\") ] activities = [ (\\"09:00\\", \\"alice\\", 2), (\\"09:15\\", \\"alice\\", 3), (\\"10:00\\", \\"bob\\", 1), (\\"10:15\\", \\"bob\\", 6), (\\"10:30\\", \\"carol\\", 2), (\\"11:00\\", \\"carol\\", 3) ] result = fair_billing_system(p, u, plans, users, activities) for user, cost in result: print(f\\"{user} {cost}\\")"},{"question":"An autonomous car is navigating through a grid represented by a 2D array having `n` rows and `m` columns. The car starts from cell (0,0) and needs to reach the cell (n-1,m-1). Each cell contains an integer representing the time to traverse that cell. The car can only move right or down from any cell. Your task is to find the minimum time required for the car to navigate from the top-left cell to the bottom-right cell. Example 1: Input: grid = [[1, 3, 1], [1, 5, 1], [4, 2, 1]] Output: 7 Explanation: The path 1 → 3 → 1 → 1 → 1 minimizes the total traversal time. Example 2: Input: grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: 21 Explanation: The path 1 → 2 → 3 → 6 → 9 minimizes the total traversal time. Your Task: You don\'t need to read input or print anything. Complete the function minTravelTime() which takes the grid as an input parameter and returns the minimum time. Expected Time Complexity: O(n*m) Expected Auxiliary Space: O(n*m) Constraints: 1 ≤ n, m ≤ 100 0 ≤ grid[i][j] ≤ 100","solution":"def minTravelTime(grid): n = len(grid) m = len(grid[0]) # Create a dp array to store the minimum time to reach each cell dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the minimum time to travel from (0, 0) to (n-1, m-1) return dp[n-1][m-1]"},{"question":"You are given a competitive ping-pong tournament with M players, each player identified by a distinct ID from 1 to M. Each match is a best of 3 series, where the winner is the first one to win 2 games. The tournament is single elimination: a player is eliminated as soon as they lose one match. The tournament bracket is provided in form of a binary tree where each node represents a player, and each internal node represents the result of a match between the two players which appears in its left and right subtrees respectively. Every match is described as a triplet (winner, loser, num_games_won), where num_games_won is the number of games the winner won in that match. Your task is to count the total number of games played in the entire tournament and determine the tournament winner ID. INPUT The first line of the input contains a single integer M denoting the number of players. The next M-1 lines each contain three space-separated integers \\"winner, loser, num_games_won\\" as explained in the problem statement above. OUTPUT Output two space-separated integers: the total number of games played in the tournament and the ID of the tournament winner. CONSTRAINTS 1 ≤ M ≤ 10^4 1 ≤ winner, loser ≤ M 1 ≤ num_games_won ≤ 2 SAMPLE INPUT 4 1 2 2 1 3 2 4 1 2 SAMPLE OUTPUT 6 4 Explanation: There are 4 players (IDs 1, 2, 3, 4). The matches proceed as follows: 1. Player 1 wins over Player 2 with 2 wins (total games: 2). 2. Player 1 wins over Player 3 with 2 wins (total games: 2). 3. Player 4 wins over Player 1 with 2 wins (total games: 2). Total games played in the entire tournament = 2 + 2 + 2 = 6. The winner of the tournament is Player 4.","solution":"def ping_pong_tournament_results(M, matches): Returns the total number of games played and the tournament winner. Parameters: M : int : number of players matches : list of tuples : (winner, loser, num_games_won) Returns: tuple : (total_games_played, tournament_winner) total_games_played = 0 tournament_winner = None for match in matches: winner, loser, num_games_won = match total_games_played += num_games_won tournament_winner = winner return total_games_played, tournament_winner"},{"question":"You are given several test cases. For each test case, you are given a range of two numbers. Your task is to find out the sum of all even numbers (including boundary values) within that range and then determine whether the sum is an even number or not. Simply print \\"EVEN\\" (without quotes) if the sum of even numbers within the range is an even number and print \\"ODD\\" (without quotes) if the sum of even numbers within the range is an odd number. Note: If there are no even numbers between the two given numbers, consider the output \\"EVEN\\" Input: The first line contains T, the number of test cases. Followed by T lines each contain two numbers A and B Output: For every test case, print \\"EVEN\\" if the sum of even numbers within the range is an even number, otherwise print \\"ODD\\". Constraints: 1 ≤ T ≤ 100 1 ≤ A ≤ B ≤ 1000000 Note: \'A\' & \'B\' are inclusive. Author: Your Name SAMPLE INPUT 2 1 5 2 8 SAMPLE OUTPUT EVEN EVEN Explanation: Test Case #1: Even numbers between 1 to 5 are 2, 4 and their sum is 6 which is an even number. Test Case #2: Even numbers between 2 to 8 are 2, 4, 6, 8 and their sum is 20 which is an even number.","solution":"def sum_of_even_numbers_in_range(a, b): Returns \\"EVEN\\" if the sum of even numbers in the range [a, b] is even and \\"ODD\\" otherwise. sum_of_evens = sum(num for num in range(a, b + 1) if num % 2 == 0) return \\"EVEN\\" if sum_of_evens % 2 == 0 else \\"ODD\\" def process_test_cases(test_cases): results = [] for a, b in test_cases: result = sum_of_even_numbers_in_range(a, b) results.append(result) return results"},{"question":"Given an integer n, your task is to generate a sequence of length n such that each element is the sum of its index and all previous elements in the sequence. For example: - If n = 5, the resulting sequence would be [0, 1, 3, 6, 10] Explanation: - The 0-th element is 0. - The 1st element is 0 + 1 = 1. - The 2nd element is 0 + 1 + 2 = 3. - The 3rd element is 0 + 1 + 2 + 3 = 6. - The 4th element is 0 + 1 + 2 + 3 + 4 = 10. Write a function, `generate_sequence(n: int) -> List[int]`, to generate and return the sequence. Example 1: Input: n = 3 Output: [0, 1, 3] Explanation: - The 0-th element is 0. - The 1st element is 0 + 1 = 1. - The 2nd element is 0 + 1 + 2 = 3. Example 2: Input: n = 6 Output: [0, 1, 3, 6, 10, 15] Explanation: - The 0-th element is 0. - The 1st element is 0 + 1 = 1. - The 2nd element is 0 + 1 + 2 = 3. - The 3rd element is 0 + 1 + 2 + 3 = 6. - The 4th element is 0 + 1 + 2 + 3 + 4 = 10. - The 5th element is 0 + 1 + 2 + 3 + 4 + 5 = 15. Constraints: - 0 <= n <= 30 - The generated sequence should fit within the standard integer range.","solution":"def generate_sequence(n): Generates a sequence of length n such that each element is the sum of its index and all previous elements in the sequence. if n <= 0: return [] sequence = [0] * n for i in range(1, n): sequence[i] = sequence[i-1] + i return sequence"},{"question":"Write a function that takes a list of integers and a single integer `n`, and returns a new list with all instances of `n` removed. # Task Implement the function so the resulting list does not contain any occurrence of `n`. # Notes - The input list can be empty. - Assume that all elements in the list are integers. - Do not use list comprehensions or the `filter` function.","solution":"def remove_all_instances(lst, n): Removes all instances of n from the list lst. Parameters: lst (list of int): The list from which to remove instances of n. n (int): The integer value to be removed from lst. Returns: list of int: A new list with all instances of n removed. result = [] for item in lst: if item != n: result.append(item) return result"},{"question":"Write a function that takes an array of integers representing coin denominations and an integer amount representing a total amount of money. Return the number of combinations that make up that amount. You may assume that you have an infinite number of each denomination. Example: Input: coins = [1, 2, 5], amount = 5 Output: 4 Explanation: There are four ways to make up the amount: 5 = 5 5 = 2 + 2 + 1 5 = 2 + 1 + 1 + 1 5 = 1 + 1 + 1 + 1 + 1","solution":"def coin_combinations(coins, amount): Returns the number of combinations to make up the given amount using the specified coin denominations. Parameters: coins (list of int): The coin denominations. amount (int): The target amount. Returns: int: Number of ways to make up the amount. # Create an array to store the number of combinations for each amount from 0 to amount dp = [0] * (amount + 1) dp[0] = 1 # There\'s one way to make zero amount # For each coin, update the combinations for each amount for coin in coins: for a in range(coin, amount + 1): dp[a] += dp[a - coin] return dp[amount]"},{"question":"Given a binary tree, where each node contains an integer value and a pointer to its left child, right child, and parent, determine if the tree satisfies the Binary Search Tree (BST) property. A BST property dictates that for any node, all nodes in its left subtree should be less than the node\'s value, and all nodes in its right subtree should be greater than the node\'s value. Assume the value ranges provided are within the limits of 32-bit signed integers. Example 1: Input: 10 / 5 15 / / 2 7 12 18 Output: True Example 2: Input: 10 / 5 12 / / 2 11 8 20 Output: False Explanation: In the second example, node with value 11 is in the left subtree of node with value 12, which violates the BST property. Your Task: You need to implement the function `isBST` that takes the root of the tree as an input and returns True if the given tree satisfies the BST property, otherwise False. You do not need to read any input or print anything, simply complete the function. Expected Time Complexity: O(n) where n is the number of nodes in the tree. Expected Space Complexity: O(n) for the recursive stack space. Constraints: -1 <= node value <= 2^31 - 1 0 <= number of nodes <= 10^4","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None self.parent = None def isBST(root): Determines if a binary tree is a binary search tree. def helper(node, lower=float(\'-inf\'), upper=float(\'inf\')): if not node: return True val = node.val if val <= lower or val >= upper: return False if not helper(node.right, val, upper): return False if not helper(node.left, lower, val): return False return True return helper(root)"},{"question":"In a two-dimensional grid, there are obstacles and open spaces. The starting point is the top-left corner of the grid, and the goal is to reach the bottom-right corner of the grid. You can move up, down, left, or right, but you cannot move onto an obstacle or out of the grid bounds. Write a function `min_steps_to_reach_end(grid)` that takes a 2D list representing the grid consisting of 0s (open space) and 1s (obstacles). The function should return the minimum number of steps required to reach the bottom-right corner from the top-left corner or -1 if it is impossible to reach the bottom-right corner. ***Input:*** - A 2D list `grid` of integers where 0 represents open space and 1 represents an obstacle. The dimensions of the grid are at most 100x100. ***Output:*** - Return the minimum number of steps or -1 if the destination cannot be reached. ***Examples:*** ```python grid = [ [0, 0, 1, 0], [0, 0, 0, 1], [1, 1, 0, 0], [0, 0, 0, 0] ] # The shortest path to reach the bottom-right corner is: # [ # [0, 0, 1, 0], # [0, 0, 0, 1], # [1, 1, 0, 0], # [0, 0, 0, 0] # ] # The path is: (0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) min_steps_to_reach_end(grid) # Output: 6 ``` ```python grid = [ [0, 1], [1, 0] ] # There is no path to the bottom-right corner since every path is blocked by obstacles. min_steps_to_reach_end(grid) # Output: -1 ```","solution":"from collections import deque def min_steps_to_reach_end(grid): Returns the minimum number of steps required to reach the bottom-right corner from the top-left corner of the grid. Returns -1 if it is impossible to reach the bottom-right corner. if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() # If we reached the bottom-right corner, return the number of steps if r == rows - 1 and c == cols - 1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"Given a string representing a mathematical expression that includes variables and numerical constants: ``` expression = \\"3 * a + 4 / b - 5 * c\\" ``` Create a function that: - Parses the expression and identifies each variable. - Returns a dictionary where the keys are the variable names and the values are the counts of their occurrences in the expression. For instance, the result of the function `count_variables(expression)` with the input above should be: ``` {\'a\': 1, \'b\': 1, \'c\': 1} ``` If the expression is: ``` expression = \\"3 * x + 4 / x - 5 * y + 7 * z - x + 8 * z\\" ``` The function should return: ``` {\'x\': 3, \'y\': 1, \'z\': 2} ``` # Notes - You can assume that variables are single lowercase letters. - Operators to consider are `+`, `-`, `*`, and `/`. - Numerical constants can be any digit.","solution":"import re from collections import Counter def count_variables(expression): Parses the expression and identifies each variable. Returns a dictionary where the keys are the variable names and the values are the counts of their occurrences in the expression. # Use regular expression to find all single lowercase variables variables = re.findall(r\'b[a-z]b\', expression) # Count occurrences of each variable variable_counts = Counter(variables) return dict(variable_counts)"},{"question":"You are given a string which contains lowercase alphabets and digits. The string is in the form of a term and frequency list like \\"a2b3c2\\". Here, character \'a\' has a frequency of 2, character \'b\' has a frequency of 3, and so on. Your task is to expand this string into its actual form based on the frequencies. Input The first line contains an integer N, the number of test cases. Each of the following N lines contains a term and frequency string. Output For each test case, print the expanded string. Constraints 1 ≤ N ≤ 10 The length of the term and frequency string is at max 50 and string contains only lowercase alphabets followed by single-digit numbers. SAMPLE INPUT 2 a3b2c1 x1y2z3 SAMPLE OUTPUT aaabbc xyyzzz","solution":"def expand_string(term_freq): Expands the given term and frequency string into its actual form. Parameters: term_freq (str): The term and frequency string, e.g., \\"a2b3c2\\". Returns: str: The expanded string, e.g., \\"aabbbcc\\". expanded = [] for i in range(0, len(term_freq), 2): char = term_freq[i] freq = int(term_freq[i + 1]) expanded.append(char * freq) return \'\'.join(expanded) def process_test_cases(test_cases): Processes multiple test cases. Parameters: test_cases (list of str): The list of test cases. Returns: list of str: List of results for each test case. return [expand_string(tc) for tc in test_cases]"},{"question":"In a coding assignment, Alice received a list of integers and was asked to reorder them based on certain rules. Each element in the list must be moved to a new position based on its value. In particular, for each integer in the list, you must increment all other integers that are smaller than it by 1, and decrement all other integers that are greater than it by 1. Your task is to determine the final list after all such operations have been applied. -----Input----- The first line contains one integer n (1 leq n leq 3 cdot 10^5), the number of integers in the list. The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9), representing the list of integers. -----Output----- Print the final list after applying the specified operations. If no solution exists such that all elements can be uniquely moved based on their values, output -1. -----Examples----- Input 3 3 1 2 Output 2 1 3 Input 4 4 3 2 1 Output 1 2 3 4 Input 2 1 1 Output -1 -----Note----- In the first test case, initially we have the list [3, 1, 2]: - 3: increments values less than 3 (1 and 2) by 1 resulting in [3, 2, 3] - 1: increments no values as none are less than 1, decrements all greater values (3 and 3) by 1 resulting in [2, 2, 3] - 2: increments values less than 2 (2) by 1 resulting in [2, 2, 3] Hence, the list transforms to [2, 1, 3]. In the second test case, the list is already in a state where applying operations correctly leads to unique positions for each element. In the third test case, all elements are the same so resolving based on the rules is not possible. Hence, output is -1.","solution":"def reorder_list(n, lst): Returns the reordered list or -1 if no unique reordering is possible. Parameters: - n: int : The number of integers in the list. - lst: List[int] : The list of integers. Returns: - List[int] or int : The reordered list or -1 if no unique reordering is possible. if len(set(lst)) != n: return -1 sorted_lst = sorted(lst) return sorted_lst"},{"question":"Given a string s and an integer k, modify the string such that every uppercase letter in the string is shifted forward by k positions in the alphabet, wrapping around if necessary (i.e., \'Z\' followed by any positive shift results in starting over from \'A\'). All other characters in the string (lowercase letters, digits, special characters) should remain unchanged. Example 1: Input: s = \\"HELLO, WORLD!\\", k = 3 Output: \\"KHOOR, ZRUOG!\\" Example 2: Input: s = \\"PYTHON3.8\\", k = 5 Output: \\"UDYMTS3.8\\" Your Task: You don\'t need to read or print anything. Your task is to complete the function shiftString() which takes the string s and the integer k as input parameters and returns the transformed string. Expected Time Complexity: O(n), where n is the length of the string Expected Space Complexity: O(1) Constraints: 1 <= len(s) <= 1000 0 <= k <= 25","solution":"def shiftString(s, k): Shifts every uppercase letter in the string s forward by k positions in the alphabet, wrapping around if necessary. All other characters remain unchanged. Params: - s (str): the input string - k (int): the number of positions to shift each uppercase letter Returns: - str: the transformed string with shifted uppercase letters result = [] for char in s: if char.isupper(): # Calculate the new character with wrapping (modulo 26) new_char = chr((ord(char) - ord(\'A\') + k) % 26 + ord(\'A\')) result.append(new_char) else: result.append(char) return \'\'.join(result)"},{"question":"Given a set of four points on a 2D plane, determine if these four points form a rectangle. You can assume that all coordinates of the points are integers. Example 1: Input: points = [(0, 0), (2, 0), (2, 2), (0, 2)] Output: True Explanation: These points form a rectangle with corners at (0, 0), (2, 0), (2, 2), and (0, 2). Example 2: Input: points = [(0, 0), (1, 1), (2, 2), (3, 3)] Output: False Explanation: These points do not form a rectangle. Your Task: You don\'t need to read input or print anything. Complete the function `isRectangle` which takes a list of 4 tuples (points) as input and returns True if the points form a rectangle and False otherwise. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: -10^4 <= x, y <= 10^4 (coordinates of the points)","solution":"def isRectangle(points): Returns True if given 4 points form a rectangle, otherwise False. # Function to calculate the squared distance between two points def squared_distance(p1, p2): return (p1[0] - p2[0])**2 + (p1[1] - p2[1])**2 # Distances between each pair of points distances = [] for i in range(4): for j in range(i + 1, 4): distances.append(squared_distance(points[i], points[j])) distances.sort() # For a rectangle, 4 of these distances should be equal (sides) and 2 should be equal (diagonals) return len(set(distances[:4])) == 1 and len(set(distances[4:])) == 1 and distances[4] == distances[5] # Example usage: # points = [(0, 0), (2, 0), (2, 2), (0, 2)] # print(isRectangle(points)) # Output: True"},{"question":"In a small town, there is a unique library system where each book is represented by a number. Every book has a unique reference number and is arranged in a sequence. The townsfolk love borrowing books but often return them in the wrong order. To maintain order, the librarian needs your help to reorganize the books in ascending order. You have been provided with an integer list representing the current order of the books returned to the library. Your task is to find the minimum number of adjacent swaps required to sort the books. An adjacent swap consists of swapping two adjacent elements in the list. -----Input----- - The first line contains an integer 1leq n leq 10^5, the number of books. - The second line contains n unique integers 1leq a_i leq 10^6, the current order of the books. -----Output----- Print a single integer, the minimum number of adjacent swaps required to sort the list of books in ascending order. -----Examples----- Sample Input 1: 5 4 3 2 1 5 Sample Output 1: 6 Sample Input 2: 3 3 1 2 Sample Output 2: 2","solution":"def min_adjacent_swaps(n, books): Returns the minimum number of adjacent swaps required to sort the list in ascending order. :param n: int - The number of books. :param books: List[int] - The current order of books. :return: int - minimum number of adjacent swaps. # This function calculates the number of inversions in the array def count_inversions(arr): if len(arr) < 2: return 0, arr mid = len(arr) // 2 left_inversions, left_half = count_inversions(arr[:mid]) right_inversions, right_half = count_inversions(arr[mid:]) split_inversions, merged = merge_count_split_inv(left_half, right_half) return left_inversions + right_inversions + split_inversions, merged # This function assists in merging two halves and counting split inversions def merge_count_split_inv(left, right): i = j = inv_count = 0 merged = [] while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 inv_count += len(left) - i merged += left[i:] merged += right[j:] return inv_count, merged # Calculate the number of inversions in the book sequence inversions, _ = count_inversions(books) return inversions"},{"question":"You are given an integer array a of length n. You have to find a pair of indices (i, j) (1 le i, j le n) (i and j can be the same) such that the product of a_i and a_j is maximum. For example, consider a = [1, 3, 5, 2, 4] The possible pairs for the product are: - a_1 cdot a_1 = 1 cdot 1 = 1 - a_1 cdot a_2 = 1 cdot 3 = 3 - a_1 cdot a_3 = 1 cdot 5 = 5 - a_1 cdot a_4 = 1 cdot 2 = 2 - a_1 cdot a_5 = 1 cdot 4 = 4 - a_2 cdot a_2 = 3 cdot 3 = 9 - a_2 cdot a_3 = 3 cdot 5 = 15 - a_2 cdot a_4 = 3 cdot 2 = 6 - a_2 cdot a_5 = 3 cdot 4 = 12 - a_3 cdot a_3 = 5 cdot 5 = 25 - a_3 cdot a_4 = 5 cdot 2 = 10 - a_3 cdot a_5 = 5 cdot 4 = 20 - a_4 cdot a_4 = 2 cdot 2 = 4 - a_4 cdot a_5 = 2 cdot 4 = 8 - a_5 cdot a_5 = 4 cdot 4 = 16 Therefore, the maximum product is 25. -----Input----- The input consists of multiple test cases. The first line of the input contains a single integer t (1 leq t leq 10^3) — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n (2 leq n leq 10^5) — the length of array a. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) — the elements of the array a. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output a single integer — the maximum product possible by selecting a pair of indices i, j (1 le i, j le n) (i and j can be the same). -----Examples----- Input 3 5 1 3 5 2 4 3 10 20 30 4 7 2 3 9 Output 25 900 81 -----Note----- In the first test case, the maximum product is 5 cdot 5 = 25. In the second test case, the maximum product is 30 cdot 30 = 900. In the third test case, the maximum product is 9 cdot 9 = 81.","solution":"def max_product(t, cases): Given multiple test cases with each case consisting of an integer array, find the maximum product of (a_i * a_j) where 1 <= i, j <= n. :param t: The number of test cases :param cases: List of tuples, with each tuple containing the length of array and the array itself :return: List of maximum products for each test case results = [] for case in cases: n, a = case # Find the largest and second largest value in the array largest = second_largest = 0 for number in a: if number > largest: second_largest = largest largest = number elif number > second_largest: second_largest = number # The maximum product would be the product of the two largest values max_product = largest * largest # consider the same index if largest != second_largest: max_product = max(max_product, largest * second_largest) results.append(max_product) return results"},{"question":"An ancient treasure is rumored to be hidden in a forbidden land along a straight path. Given several enchanted stones that reveal segments of the path where the treasure might be located, your task is to determine the smallest segment that contains all possible locations of the treasure. The stones show starting and ending points on the path where the treasure could potentially be. Write a program that determines the smallest segment on the path that includes each segment given by the stones. Input The input is given in the following format: N l1 r1 l2 r2 :: lN rN The first line gives the number of data points N (1 ≤ N ≤ 100000) observed by the enchanted stones. Each of the following N lines contains integers li and ri (0 ≤ li < ri ≤ 1,000,000), denoting the start and end points of the segment revealed by the i-th enchanted stone. Output Output two integers, the starting and ending points of the smallest segment on the path that contains all given segments. Examples Input 3 1 5 2 6 4 7 Output 4 5 Input 2 0 10 2 8 Output 2 8 Input 4 5 9 6 10 7 8 5 7 Output 7 7","solution":"def smallest_segment(N, segments): Determines the smallest segment on the path that includes each segment given by the stones. :param N: Number of segments :param segments: List of tuples representing the segments :return: Tuple containing the starting and ending points of the smallest segment max_start = max(segment[0] for segment in segments) min_end = min(segment[1] for segment in segments) if max_start <= min_end: return max_start, min_end else: return -1, -1 # If no common segment exists, return -1 as both start and end # Examples # print(smallest_segment(3, [(1, 5), (2, 6), (4, 7)])) => (4, 5) # print(smallest_segment(2, [(0, 10), (2, 8)])) => (2, 8) # print(smallest_segment(4, [(5, 9), (6, 10), (7, 8), (5, 7)])) => (7, 7)"},{"question":"You are given a number n and a string s which is a permutation of the first n lowercase Latin letters (i.e., \'a\', \'b\', ..., \'a\'+n-1, each used exactly once). You can perform the following move any number of times (possibly zero): swap any two adjacent (neighboring) characters of s (i.e. for any i = {1, 2, dots, n - 1} you can swap s_i and s_{i + 1}). Your goal is to sort s in lexicographical order (\\"a\\", \\"b\\", ..., \'a\'+n-1). Your task is to determine the number of swaps needed to sort the string s lexicographically. The problem guarantees that the given string s can always be sorted using these adjacent swaps. -----Input----- The first line contains an integer n (1 le n le 50) — the length of the string s. The second line contains the string s of length n consisting of lowercase Latin letters -----Output----- Print a single integer — the minimum number of adjacent swaps needed to sort the string s in lexicographical order. -----Examples----- Input 5 bacde Output 1 Input 4 cbad Output 3 -----Note----- In the first example, the string changes as follows: \\"bacde\\" rightarrow \\"abcde\\" with one swap of \'b\' and \'a\'. In the second example, the string changes as follows: \\"cbad\\" rightarrow \\"bcad\\" rightarrow \\"bacd\\" rightarrow \\"abcd\\" with three swaps in total.","solution":"def count_swaps_to_sort(n, s): This function determines the minimum number of adjacent swaps needed to sort the string s in lexicographical order. arr = list(s) sorted_arr = sorted(arr) swaps = 0 for i in range(len(sorted_arr)): while arr[i] != sorted_arr[i]: j = arr.index(sorted_arr[i], i) while j > i: arr[j], arr[j - 1] = arr[j - 1], arr[j] swaps += 1 j -= 1 return swaps"},{"question":"*Aliens have invaded!* *The government has deployed a string of supercomputers to decode the signals sent by the aliens. Each signal is made up of a sequence of lowercase Latin letters. The decoding process involves identifying the number of distinct substrings within each received signal.* Given a signal, your task is to determine how many distinct substrings can be formed from the given signal. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of one line containing a single string S, representing the alien\'s signal. ------ Output Format ------ For each test case, output on a new line one integer: the number of distinct substrings of the given signal. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ length(S) ≤ 100 ------ Sample Input 1 ------ 2 abcd aaa ------ Sample Output 1 ------ 10 3 ------ Explanation 1 ------ Test case 1: \\"abcd\\" has 10 distinct substrings - \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", \\"abcd\\". Test case 2: \\"aaa\\" has 3 distinct substrings - \\"a\\" (appearing 3 times), \\"aa\\" (appearing 2 times), \\"aaa\\" (appearing once). But, they count as distinct substrings only once each.","solution":"def count_distinct_substrings(signal): Returns the number of distinct substrings in the provided signal. distinct_substrings = set() for i in range(len(signal)): for j in range(i + 1, len(signal) + 1): distinct_substrings.add(signal[i:j]) return len(distinct_substrings) def process_test_cases(T, test_cases): results = [] for signal in test_cases: results.append(count_distinct_substrings(signal)) return results"},{"question":"Problem A traveling salesman is planning his routes between various cities. To optimize his travels, he wants to determine the minimal travel cost between any two cities in his itinerary. The cities and the travel costs between them can be represented using a graph where each node represents a city, and the weights of the edges between the nodes represent the travel cost. Given a list of direct routes between cities with the respective costs, your task is to determine the minimal travel cost between two specific cities. Constraints: The input satisfies the following conditions: - 1 ≤ number of cities (n) ≤ 50 - 1 ≤ number of direct routes (m) ≤ 500 - 1 ≤ cost of each direct route ≤ 1000 Input The input is given in the following format: - The first line contains two integers n and m, the number of cities and the number of direct routes. - The next m lines each contain three integers u, v, and w, representing a direct route between city u and city v with a travel cost of w. - The last line contains two integers, a and b, representing the start city and the destination city respectively. Output Output the minimal travel cost between city a and city b. If there is no path between the two cities, output -1. Example Input 5 6 1 2 3 1 3 10 2 3 1 2 4 2 3 4 4 4 5 3 1 5 Output 8 Input 3 3 1 2 1 2 3 2 1 3 4 1 3 Output 3","solution":"import heapq def dijkstra(n, edges, start, end): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) pq = [(0, start)] dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist[end] if dist[end] != float(\'inf\') else -1 def minimal_travel_cost(n, m, routes, start, end): return dijkstra(n, routes, start, end)"},{"question":"Given a string, determine if it is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words. For example, given the string \\"Tact Coa\\", return True (permutations: \\"taco cat\\", \\"atco cta\\", etc.) Example 1: Input: \\"racecar\\" Output: True Example 2: Input: \\"aabbccdd\\" Output: True Example 3: Input: \\"hello\\" Output: False Example 4: Input: \\"noon\\" Output: True Example 5: Input: \\"carerac\\" Output: True Note: - The input string will contain only letters (a-z, A-Z) and spaces. - The string length will be at most 1000 characters.","solution":"def is_permutation_of_palindrome(s): Determines if the given string is a permutation of a palindrome. Parameters: s (str): The input string. Returns: bool: True if the string is a permutation of a palindrome, False otherwise. # Removing spaces and converting to lowercase s = s.replace(\\" \\", \\"\\").lower() # Counting each character char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 # Checking the number of characters that have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be a permutation of a palindrome, there must be at most one character with an odd count return odd_count <= 1"},{"question":"In a city, there are multiple parks connected by two-way roads. The mayor wants to hold a grand event where people can gather at a park, starting from any park. To ensure easy navigation, each park must be reachable from every other park. Your task is to determine if it is possible to reach every park starting from any other park. You are given T test cases, each describing a city map. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. The first line of each test case contains two integers N (the number of parks) and M (the number of roads). Next M lines contain two integers u and v, indicating that there\'s a road connecting parks u and v (u ≠ v). ------ Output ------ For each test case, output \\"YES\\" if every park is reachable from every other park, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^3 0 ≤ M ≤ 10^5 ------ Sample Input 1 ------ 3 3 3 1 2 2 3 3 1 4 2 1 2 3 4 5 0 ------ Sample Output 1 ------ YES NO NO ------ Explanation 0 ------ In the first test case, there are three parks and they are all interconnected, forming a cycle. Therefore, from any park, you can reach any other park. In the second test case, there are four parks but only two roads, forming two disconnected pairs of parks. Thus it\'s impossible to travel between all parks starting from any park. In the third test case, there are five parks but no roads. Hence, no park is accessible from any other park.","solution":"def is_every_park_reachable(T, test_cases): def dfs(v, adj, visited): stack = [v] while stack: node = stack.pop() for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) results = [] for i in range(T): N, M, edges = test_cases[i] adj = [[] for _ in range(N + 1)] for (u, v) in edges: adj[u].append(v) adj[v].append(u) visited = [False] * (N + 1) visited[1] = True dfs(1, adj, visited) if all(visited[1:]): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string consisting of lowercase English letters. You may perform the following operation on it zero or more times: Choose any two consecutive characters and if they are equal, remove them from the string. For example, in the string \\"abccba\\", you can remove \\"cc\\" to get \\"abba\\", then \\"bb\\" to get \\"aa\\", and finally remove \\"aa\\" to get an empty string. Write a function to determine the length of the final string after performing the above operation as many times as possible. Input The input consists of a single line containing a non-empty string of length n (1 ≤ n ≤ 100,000). Output Output a single integer, the length of the final string. Examples Input abba Output 0 Input abbac Output 1 Input aabbcc Output 0 Input abcddcba Output 0","solution":"def final_string_length(s): Determine the length of the final string after performing the operations of removing consecutive equal characters. Args: s (str): input string Returns: int: the length of the final string stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack) # Example Usage: # final_string_length(\\"abba\\") should return 0 # final_string_length(\\"abbac\\") should return 1"},{"question":"You are tasked with developing a new data transmission protocol that guarantees the message\'s integrity. The message can be represented as an array of length n, where each element is an integer. In the protocol, you can identify potential corruption in the message by comparing adjacent elements. If the difference between two adjacent elements is greater than a given threshold k, the protocol flags those elements as corrupted. Given the array of integers and the threshold k, determine the total number of flagged elements in the array. Your task is to implement an algorithm to determine the total number of corrupted elements in the message array. -----Input----- The first line of input contains two integers n and k (2 le n le 10^5; 1 le k le 10^9) — the number of elements in the message array and the threshold. The second line contains n integers m_1, m_2, ldots, m_n (1 le m_i le 10^9), where m_i is the i-th element of the message. -----Output----- Print one integer — the total number of corrupted elements in the message. -----Example----- Input 5 3 1 6 4 3 8 Output 4 Input 4 2 10 10 10 10 Output 0 -----Note----- In the first example, the corrupted elements are 6, 1, 8, and 4 since their adjacent elements differ by more than 3. In the second example, there are no corrupted elements since adjacent elements are equal and their difference is not greater than 2.","solution":"def count_corrupted_elements(n, k, message): This function counts the number of corrupted elements in the given message array. Parameters: - n: int, the number of elements in the message array - k: int, the allowed threshold difference between adjacent elements - message: list of ints, the message array Returns: int, the total number of corrupted elements in the message corrupted_count = 0 for i in range(n - 1): if abs(message[i] - message[i + 1]) > k: corrupted_count += 2 # Both elements at i and i+1 are corrupted return corrupted_count"},{"question":"Given a list of positive integers, identify the smallest positive integer that cannot be represented as the sum of any subset of the given list. ---Constraints--- - The number of elements in the list, N, is between 1 and 1000 inclusive. - Each element in the list is a positive integer not exceeding 1000. ---Input--- Input is given in the following format: N a_1 a_2 ... a_N ---Output--- Output the smallest positive integer that cannot be represented as the sum of any subset of the given list. ---Sample Input--- 4 1 2 2 5 ---Sample Output--- 11 Explanation: - Subsets can produce sums such as 1, 2, 3, 4 (1+2+1), 5, 6 (1+2+2+1), 7 (2+2+1+2), 8, 9, 10. - The smallest positive integer that cannot be represented is 11.","solution":"def smallest_unrepresentable_sum(arr): arr.sort() smallest_sum = 1 for num in arr: if num > smallest_sum: break smallest_sum += num return smallest_sum"},{"question":"Given a string, write a function to check if it is a permutation of a palindrome. A palindrome is a string that reads the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words. The function should consider only alphanumeric characters and ignore case. The given string can be an empty string, and it should be considered a valid palindrome permutation. Examples: * Input: \\"Tact Coa\\" Output: True (\\"Tact Coa\\" can be rearranged to form \\"tacocat\\", which is a palindrome) * Input: \\"Hello\\" Output: False (There is no permutation of \\"Hello\\" that is a palindrome) * Input: \\"\\" Output: True (An empty string is considered a valid palindrome permutation) Function signature: `def is_palindrome_permutation(s: str) -> bool:`","solution":"def is_palindrome_permutation(s: str) -> bool: Check if the given string is a permutation of a palindrome. Considering only alphanumeric characters and ignoring case. from collections import Counter # Normalize the string to lowercase and filter non-alphanumeric characters normalized = [char.lower() for char in s if char.isalnum()] # Count the frequency of each character freq_counter = Counter(normalized) # Check the number of characters with odd counts odd_count = sum(1 for count in freq_counter.values() if count % 2 != 0) # For a string to be a permutation of a palindrome, # there should be at most one character with an odd count return odd_count <= 1"},{"question":"A rope is divided into several segments of different lengths. In one move, you can perform the following operation: choose any two segments and join them together to form a single longer segment, reducing the total number of segments by one. Your task is to determine the minimum total cost required to combine all segments into one. The cost of combining two segments of lengths `a` and `b` is `a + b`. Input - The first line contains an integer `T`, the number of test cases. - For each test case, the first line contains an integer `n`, the number of segments. - The second line contains `n` integers representing the lengths of the segments. Output For each test case, output the minimum total cost needed to combine all the segments into one. Constraints - 1 ≤ T ≤ 100 - 2 ≤ n ≤ 1000 - 1 ≤ Length of each segment ≤ 1000 Example Input: 2 4 1 2 3 4 3 2 2 3 Output: 19 12 Explanation: For the first test case, the optimal way to minimize the cost is to combine the segments as follows: 1. Combine segments of lengths 1 and 2, cost = 1 + 2 = 3, lengths become: [3, 3, 4] 2. Combine segments of lengths 3 and 3, cost = 3 + 3 = 6, lengths become: [6, 4] 3. Combine segments of lengths 6 and 4, cost = 6 + 4 = 10 Total cost = 3 + 6 + 10 = 19 For the second test case, the optimal way to minimize the cost is to combine the segments as follows: 1. Combine segments of lengths 2 and 2, cost = 2 + 2 = 4, lengths become: [4, 3] 2. Combine segments of lengths 4 and 3, cost = 4 + 3 = 7 Total cost = 4 + 7 = 11","solution":"import heapq def min_cost_to_combine_segments(test_cases): results = [] for segments in test_cases: heapq.heapify(segments) total_cost = 0 while len(segments) > 1: first = heapq.heappop(segments) second = heapq.heappop(segments) cost = first + second total_cost += cost heapq.heappush(segments, cost) results.append(total_cost) return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) segments = list(map(int, lines[index + 1].split())) test_cases.append(segments) index += 2 return test_cases, T"},{"question":"Given a list of words, and two words `word1` and `word2`, return the shortest distance between these two words in the list. **Example:** > **Input:** words = [\\"practice\\", \\"makes\\", \\"perfect\\", \\"coding\\", \\"makes\\"], word1 = \\"coding\\", word2 = \\"practice\\" > > **Output:** 3 **Explanation:** The words \\"coding\\" and \\"practice\\" are separated by 3 words in the list. **Note:** - You may assume that `word1` and `word2` both exist in the list. - The list may contain duplicates and may not be in order. - It is possible for `word1` to be the same as `word2`. Return 0 in that case.","solution":"def shortest_distance(words, word1, word2): Returns the shortest distance between two words in the given list of words. :param words: List of words (list of strings) :param word1: The first word (string) :param word2: The second word (string) :return: The shortest distance between `word1` and `word2` (integer) index1, index2 = -1, -1 min_distance = float(\'inf\') same_word = word1 == word2 for i, word in enumerate(words): if word == word1: if same_word: if index1 != -1: min_distance = min(min_distance, i - index1) index1 = i else: index1 = i if index2 != -1: min_distance = min(min_distance, abs(index1 - index2)) elif word == word2: index2 = i if index1 != -1: min_distance = min(min_distance, abs(index1 - index2)) return min_distance"},{"question":"**Problem Statement:** You are developing a spelling checker for a school project. The checker identifies when a specific \\"target\\" word is spelled incorrectly in a list of words. Your program should process a stream of input words and output \\"Correct\\" if the target word matches any of the input words exactly and \\"Incorrect\\" otherwise for each word. If the input word matches the target word, stop processing further. Input format: - The first line of input contains the target word. - Each subsequent line contains a single word to check against the target word. Output Format: - For each input word, print \\"Correct\\" if it matches the target word exactly. Otherwise, print \\"Incorrect\\". - Stop processing further upon encountering a word that matches the target word. Input Constraints: - Length of each word ≤ 100. - All words contain only alphabets (no numbers and special characters included). SAMPLE INPUT apple orange banana grape apple peach SAMPLE OUTPUT Incorrect Incorrect Incorrect Correct","solution":"def spelling_checker(target, words): Check if words match the target exactly and stop processing further upon a match. Parameters: target (str): The target word. words (list): List of words to check against the target word. Returns: list: A list of results with \\"Correct\\" or \\"Incorrect\\" for each input word. result = [] for word in words: if word == target: result.append(\\"Correct\\") break else: result.append(\\"Incorrect\\") return result # This function spelling_checker can be called directly or tested using the test cases below. # Example usage: # target = \\"apple\\" # words = [\\"orange\\", \\"banana\\", \\"grape\\", \\"apple\\", \\"peach\\"] # print(spelling_checker(target, words))"},{"question":"In a city, there are n intersections connected by m roads such that every pair of intersections is connected by at most one direct road. Each road has a certain length. The mayor wants to construct new bike lanes for bicyclists to minimize the maximum bike lane length. The bike lanes must form a closed loop, meaning they must start and end at the same intersection, passing through each bike lane exactly once. Given the city map, determine the minimum possible length of the longest bike lane in the loop. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 3000) — the number of intersections and the number of roads, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) representing a road from intersection u to intersection v with length w. Output Print a single integer — the minimum possible length of the longest bike lane in the loop. Examples Input 4 5 1 2 8 1 3 5 2 3 6 2 4 7 3 4 9 Output 7 Input 5 7 1 2 3 1 3 5 2 3 4 2 4 2 2 5 6 4 5 7 3 5 9 Output 6 Note In the first example, the optimal loop (1, 2, 4, 3, 1) has lengths (8, 7, 9, 5), with the maximum length being 9. Alternatively, the loop (2, 3, 4, 2) has lengths (6, 9, 7), where the maximum length is minimized to 9, and further the loop (2, 4, 3, 2) reduces the maximum length to 7, which is the minimum possible longest bike lane in the loop.","solution":"def find_min_max_bike_lane(n, m, roads): import heapq # Construct adjacency list adjacency_list = [[] for _ in range(n+1)] for u, v, w in roads: adjacency_list[u].append((w, v)) adjacency_list[v].append((w, u)) def dijkstra(start): distances = [(float(\'inf\'), None) for _ in range(n+1)] distances[start] = (0, None) pq = [(0, start)] while pq: curr_dist, curr_node = heapq.heappop(pq) if curr_dist > distances[curr_node][0]: continue for weight, neighbor in adjacency_list[curr_node]: distance = max(curr_dist, weight) if distance < distances[neighbor][0]: distances[neighbor] = (distance, curr_node) heapq.heappush(pq, (distance, neighbor)) return distances min_max_bike = float(\'inf\') for i in range(1, n+1): distances = dijkstra(i) cycle_max_length = max(dist for dist, _ in distances[1:]) min_max_bike = min(min_max_bike, cycle_max_length) return min_max_bike # For testability by the subsequent tests roads = [ (1, 2, 8), (1, 3, 5), (2, 3, 6), (2, 4, 7), (3, 4, 9) ] print(find_min_max_bike_lane(4, 5, roads)) # Output: 7"},{"question":"-----Input----- The input contains two integers, x and y (1 le x, y le 1000). -----Output----- Output a single integer. -----Example----- Input 15 30 Output 5","solution":"import math def find_gcd(x, y): Returns the greatest common divisor (GCD) of x and y. return math.gcd(x, y)"},{"question":"A software company is developing an automated file backup system. They want to ensure that their data is backed up to the cloud storage in the most space-efficient way. Each file has a size, and each cloud storage can hold only a certain maximum capacity before it gets full. The company wants to minimize the number of cloud storages used for the backup. You are tasked to write a function that determines the minimum number of cloud storages required to back up all the files. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10^6) — the number of files and the maximum capacity of each cloud storage. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the sizes of the files. Output Output one integer — the minimum number of cloud storages required to back up all the files. Examples Input 5 10 2 3 4 5 6 Output 2 Input 4 15 10 10 10 5 Output 3 Note In the first example, the files can be distributed into two cloud storages as follows: - Cloud Storage 1: 2, 3, 4 (total size = 9) - Cloud Storage 2: 5, 6 (total size = 11) In the second example, the files can be distributed into three cloud storages as follows: - Cloud Storage 1: 10 - Cloud Storage 2: 10 - Cloud Storage 3: 10, 5 (total size = 15)","solution":"def min_cloud_storages(n, m, file_sizes): Determines the minimum number of cloud storages required to back up all the files. Parameters: n (int): The number of files. m (int): The maximum capacity of each cloud storage. file_sizes (List[int]): The sizes of the files. Returns: int: The minimum number of cloud storages required. file_sizes.sort(reverse=True) num_storages = 0 remaining_capacity = [] for size in file_sizes: placed = False for i in range(len(remaining_capacity)): if remaining_capacity[i] >= size: remaining_capacity[i] -= size placed = True break if not placed: if size <= m: remaining_capacity.append(m - size) num_storages += 1 else: return -1 # This case should not happen as per constraints return num_storages # Example usage # n = 5 # m = 10 # file_sizes = [2, 3, 4, 5, 6] # print(min_cloud_storages(n, m, file_sizes)) # Output should be 2"},{"question":"The Mathemagician\'s Library has an impressive collection of books, but recently, the librarian has discovered that some books are misplaced. To return the books to their correct spots, the librarian needs a system to identify the section each book belongs to based on its characteristics. Each book in the library has a unique identifier and belongs to one of three sections: 1 for Fiction, 2 for Non-Fiction, and 3 for Reference. Your task is to write a program that identifies the correct section for a given book. The book\'s section can be determined by analyzing the contents of the book. We\'ll use a small dataset to train our model. The training data consists of books from each section, all formatted in the following manner: Each book starts with an integer identifier, followed by the book\'s title, and then the main content of the book. Specifically: - The first line contains the book\'s identifier. - The second line contains the book\'s title. - The subsequent lines contain the content of the book. The training set will be available at http://download4.mathemagician.com/books/train.zip. This archive contains three directories named \\"1\\", \\"2\\", and \\"3\\", each corresponding to the books\' sections. Given a book\'s content, your program should classify it into the correct section. Input: The first line contains an integer id (0 ≤ id ≤ 106) — the book identifier. The second line contains the title of the book. The third and the subsequent lines contain the text of the book. Assume the size of any given book will not exceed 10 kilobytes. Output: Print an integer from 1 to 3, inclusive — the number of the section the given book belongs to. Examples: Input: 123 Magic of Numbers The universe can be described using the language of mathematics. From prime numbers to geometry... Output: 2","solution":"import os import zipfile import requests from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.pipeline import make_pipeline import joblib # URL to the dataset url = \\"http://download4.mathemagician.com/books/train.zip\\" # Download the dataset def download_data(url): response = requests.get(url) with open(\\"train.zip\\", \\"wb\\") as file: file.write(response.content) # Extract the dataset def extract_data(): with zipfile.ZipFile(\\"train.zip\\", \\"r\\") as zip_ref: zip_ref.extractall(\\"train\\") # Read the training data def load_data(): data = [] target = [] for label in [\'1\', \'2\', \'3\']: dir_path = os.path.join(\\"train\\", label) for file_name in os.listdir(dir_path): with open(os.path.join(dir_path, file_name), \\"r\\") as file: identifier = file.readline().strip() title = file.readline().strip() content = file.read().strip() data.append(f\\"{title} {content}\\") target.append(int(label)) return data, target # Train the model def train_model(data, target): model = make_pipeline(TfidfVectorizer(), MultinomialNB()) model.fit(data, target) joblib.dump(model, \\"book_classifier.pkl\\") # Predict the section of a new book def classify_book(book_content): model = joblib.load(\\"book_classifier.pkl\\") return model.predict([book_content])[0] # Main function to execute the steps def main(): download_data(url) extract_data() data, target = load_data() train_model(data, target) if __name__ == \\"__main__\\": main()"},{"question":"Alice and Bob are playing a new game called String Shuffle. In this game, Alice has a string `s` of length `n` and Bob has a string `t` of length `n`. Bob is allowed to rearrange the characters in his string `t` in any order he wants. The goal for Alice is to maximize the number of positions `i` (1 ≤ i ≤ n) such that `s[i]` is different from `t[i]` while the goal for Bob is to minimize the number of such positions. -----Input----- The first line of the input contains a single integer `n` (1 ≤ n ≤ 1000) — the length of the strings `s` and `t`. The second line contains a string `s` of length `n` consisting of lowercase English letters. The third line contains a string `t` of length `n` consisting of lowercase English letters. -----Output----- Print two integers: the minimum possible number of positions where `s[i]` is different from `t[i]` and the maximum possible number of positions where `s[i]` is different from `t[i]`. -----Examples----- Input 3 abc cab Output 0 3 Input 4 abcd dcba Output 0 4 -----Note----- In the first sample, to minimize the number of positions where `s[i]` is different from `t[i]`, Bob can arrange `t` to be \\"abc\\", making no positions different. To maximize it, Bob can arrange `t` to be \\"bca\\" or \\"cab\\", making all positions different. In the second sample, to minimize the number of positions where `s[i]` is different from `t[i]`, Bob can arrange `t` to be \\"abcd\\", making no positions different. To maximize it, Bob can arrange `t` to be \\"dcba\\", making all positions different.","solution":"def string_shuffle_game(n, s, t): Determine the minimum and maximum possible number of positions where s[i] is different from t[i]. from collections import Counter # Create counters for the characters in both strings counter_s = Counter(s) counter_t = Counter(t) # Calculate the number of matching characters that cannot be shuffled to create a mismatch matches = sum((counter_s & counter_t).values()) # Maximum number of different positions is when no characters match in place max_diff = n # Minimum number of different positions is when all characters are in the same place min_diff = n - matches return min_diff, max_diff"},{"question":"Write a function called `maximize_mean_subarray` that takes in two arguments: an array of integers `arr` and an integer `k`, `k > 0`. The function should find the contiguous subarray of length `k` that has the highest mean value and return that subarray. A mean is the sum of the elements in the array divided by the number of elements in the array. Here are some examples: ``` maximize_mean_subarray([1, 12, -5, -6, 50, 3], 4) -> [12, -5, -6, 50] maximize_mean_subarray([5, 5, 5, 5, 5], 3) -> [5, 5, 5] maximize_mean_subarray([1, 2, 3, 4, 5, 6], 2) -> [5, 6] ``` Explanation: 1. In the first example, amongst all contiguous subarrays of length 4, [12, -5, -6, 50] has the highest mean value. 2. In the second example, all contiguous subarrays of length 3 will have the mean value 5. 3. In the third example, the subarray [5, 6] has the highest mean value of all contiguous subarrays of length 2.","solution":"def maximize_mean_subarray(arr, k): Finds the contiguous subarray of length k that has the highest mean value and returns that subarray. Parameters: arr (list): A list of integers. k (int): The length of the subarray. Returns: list: The contiguous subarray of length k with the highest mean value. n = len(arr) if n < k: return [] # Calculate the sum of the first window of size k max_sum = current_sum = sum(arr[:k]) max_start_index = 0 # Slide the window for i in range(k, n): current_sum = current_sum - arr[i - k] + arr[i] if current_sum > max_sum: max_sum = current_sum max_start_index = i - k + 1 return arr[max_start_index:max_start_index + k]"},{"question":"Jack is organizing a coding competition. To make it fair, he wants to ensure that the duration of each submission is tracked correctly and no submission overlaps with another. Participants can only work on one submission at a time and must submit it before starting another one. Your task is to determine the total amount of time Jack needs to review all the submissions. Each submission is represented by its start and end time. The start and end times are given in a sorted list of intervals. Write a function `total_review_time` that takes a list of lists of integers `intervals`, each inner list representing a start and end time of a submission `[start, end]` (where `0 <= start < end <= 10^9`), and returns the total amount of time needed to review all the submissions. The intervals in the list do not overlap. Example 1: Input: intervals = [[1, 4], [5, 6], [8, 10]] Output: 6 Explanation: The first submission is from time 1 to 4, the second is from time 5 to 6, and the third is from time 8 to 10. So, the total review time is (4-1) + (6-5) + (10-8) = 3 + 1 + 2 = 6. Example 2: Input: intervals = [[2, 3], [4, 8], [9, 10]] Output: 6 Explanation: The first submission is from time 2 to 3, the second is from time 4 to 8, and the third is from time 9 to 10. So, the total review time is (3-2) + (8-4) + (10-9) = 1 + 4 + 1 = 6. Your Task: Complete the function `total_review_time(intervals: List[List[int]]) -> int`. This function should take a list of sorted intervals and return the total review time. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1. 1 ≤ len(intervals) ≤ 10^5 2. 0 ≤ start < end ≤ 10^9","solution":"from typing import List def total_review_time(intervals: List[List[int]]) -> int: This function calculates the total amount of time needed to review all the submissions. :param intervals: List of intervals representing start and end times of each submission. :return: Total review time. total_time = 0 for interval in intervals: start, end = interval total_time += end - start return total_time"},{"question":"David has recently opened a new toy shop and he wants to display his toys in a special way. He has `N` toys, each toy having a height described in an array `H` of length `N`. David wants to arrange the toys in such a way that each toy is taller than the toy before it and shorter than the toy after it (i.e., the heights of the toys form a strictly increasing sequence). However, he is allowed to remove some toys to achieve this requirement. David wants to know the minimum number of toys he needs to remove to make the heights strictly increasing. -----Input----- First line contains `T`, the number of test cases. Each test case consists of two lines: the first line contains integer `N`, the number of toys; the second line contains `N` integers, the heights of the toys. -----Output----- For each test case, output in one line the minimum number of toys David needs to remove. -----Constraints----- - 1 ≤ `T` ≤ 10 - 1 ≤ `N` ≤ 10^5 - 1 ≤ `H[i]` ≤ 10^9 -----Example----- Input: 2 5 10 5 6 3 8 4 4 2 3 1 Output: 2 2 -----Explanation----- Test case 1: David can remove the toys with heights 10 and 3 to get the sequence `5, 6, 8`, which is strictly increasing. Test case 2: David can remove the toys with heights 4 and 2 to get the sequence `3`, which is trivially strictly increasing. He could also achieve the same result by removing the toys with heights 4 and 1 to get `2, 3`.","solution":"def min_removals_for_increasing_toys(test_cases): def lis_length(arr): from bisect import bisect_left subseq = [] for h in arr: pos = bisect_left(subseq, h) if pos == len(subseq): subseq.append(h) else: subseq[pos] = h return len(subseq) results = [] for case in test_cases: n, heights = case longest_inc_seq = lis_length(heights) results.append(n - longest_inc_seq) return results"},{"question":"Write a function that takes an integer and returns True if it is a \\"Spy Number\\" and False otherwise. A \\"Spy Number\\" is a number for which the sum of its digits is equal to the product of its digits. For example, 1124 is a Spy Number because the sum of its digits (1 + 1 + 2 + 4) is equal to the product of its digits (1 * 1 * 2 * 4). ```python def is_spy_number(n): # Your code goes here pass # Examples print(is_spy_number(1124)) # Should return True print(is_spy_number(1234)) # Should return False ``` # Requirements 1. Your function should accept an integer input. 2. Your function should return a boolean value: True if the input is a \\"Spy Number\\" and False otherwise. 3. You should handle positive integers only.","solution":"def is_spy_number(n): Returns True if the integer n is a Spy Number, otherwise returns False. A Spy Number is one for which the sum of its digits is equal to the product of its digits. digits = [int(d) for d in str(n)] sum_digits = sum(digits) product_digits = 1 for d in digits: product_digits *= d return sum_digits == product_digits"},{"question":"Given an integer n, determine if it can be represented as a sum of three different positive integers such that their product is maximized. Write a function `max_product(n)` that takes a single integer `n` as an argument and returns a tuple of three integers `(a, b, c)` such that: 1. a + b + c = n 2. a, b, c are distinct positive integers 3. a * b * c is maximized If it is not possible to create such a combination, the function should return `(-1, -1, -1)`. -----Input----- - An integer n (1 ≤ n ≤ 10⁹) -----Output----- - Return a tuple of three integers `(a, b, c)` where `a + b + c = n` and a * b * c is maximized. -----Example----- Input: 10 Output: (2, 3, 5) Input: 15 Output: (4, 5, 6) Input: 3 Output: (-1, -1, -1) -----Explanation----- For the first example: The sum of 2, 3, and 5 is 10 and their product is maximized: 30. For the second example: The sum of 4, 5, and 6 is 15 and their product is 120, which is the maximum possible for this n. For the third example: There are no three distinct positive integers whose sum is 3, so the output is (-1, -1, -1).","solution":"def max_product(n): if n < 6: return (-1, -1, -1) # It\'s not possible to find 3 distinct integers summing to less than 6. # Initialize the three numbers as 1, 2, and (n - 3) respectively. a = 1 b = 2 c = n - 3 # If c is not greater than b, increment b and decrement c until a valid combination is found. if c <= b: b += 1 c -= 1 return (a, b, c)"},{"question":"Alice has recently learned about basic statistics in her school. She is particularly interested in learning about medians. The median is the middle value of a list of numbers when they are sorted in increasing order. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements. Alice has a series of lists and she wants a program that can compute the medians for her. Input The first line will contain an integer t (1 ≤ t ≤ 1000) denoting the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 10^5) denoting the number of elements in the list. The next line contains n integers separated by spaces (each integer will be between -10^6 and 10^6). Output For each test case, output the median of the list. The result for each test case should be printed in a new line. Note: The median should be printed as a floating-point number with exactly one decimal place. SAMPLE INPUT 2 5 1 3 5 7 9 4 1 2 3 4 SAMPLE OUTPUT 5.0 2.5","solution":"def find_median(n, numbers): Returns the median value of a given list of numbers. If count of numbers is odd, return middle element. If count of numbers is even, return average of two middle elements. sorted_numbers = sorted(numbers) mid = n // 2 if n % 2 == 1: # Odd number of elements median = sorted_numbers[mid] else: # Even number of elements median = (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2 return f\\"{median:.1f}\\" def compute_medians(test_cases): Accepts a list of test cases and returns the median for each as a list of strings. Each test case is a tuple where the first element is the number of elements in the list and the second element is the list of numbers. results = [] for n, numbers in test_cases: results.append(find_median(n, numbers)) return results"},{"question":"The Galactic Empire has recently deployed a new communication network across its planets. Each planet is represented as a node in a network graph, and each communication channel between two planets is an undirected edge with a certain distance. However, due to budget constraints, the Empire wants to ensure that the total distance of activated channels is minimized while still maintaining direct or indirect communication between all planets. Your task is to construct a Minimum Spanning Tree (MST) for the network and determine its total edge distance. ------ Input ------ The first line contains a single integer T - the number of test cases. T test cases follow. The first line of each test case contains two integers N and M - the number of planets (nodes) and the number of communication channels (edges) respectively. The next M lines each contain three integers u, v, and w - representing a communication channel between planet u and planet v with an edge distance w. Note: - Planets are indexed from 1 to N. - It is guaranteed that there is at least one way to connect all planets. ------ Output ------ For each test case, print the total edge distance of the Minimum Spanning Tree. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 1 ≤ M ≤ 100000 1 ≤ u, v ≤ N 1 ≤ w ≤ 10000 ----- Sample Input 1 ------ 2 4 5 1 2 1 1 3 4 2 3 2 2 4 3 3 4 5 3 3 1 2 1 2 3 3 1 3 2 ----- Sample Output 1 ------ 6 3","solution":"import heapq def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): parent = list(range(n)) rank = [0] * n edges = sorted(edges, key=lambda item: item[2]) mst_wt = 0 for edge in edges: u, v, w = edge u_root = find(parent, u) v_root = find(parent, v) if u_root != v_root: mst_wt += w union(parent, rank, u_root, v_root) return mst_wt def solve_cases(test_cases): results = [] for n, m, edges in test_cases: edges = [(u - 1, v - 1, w) for u, v, w in edges] mst_wt = kruskal(n, edges) results.append(mst_wt) return results def main(input_data): input_lines = input_data.split(\'n\') idx = 0 T = int(input_lines[idx]) idx += 1 test_cases = [] for _ in range(T): N, M = map(int, input_lines[idx].split()) idx += 1 edges = [] for _ in range(M): u, v, w = map(int, input_lines[idx].split()) idx += 1 edges.append((u, v, w)) test_cases.append((N, M, edges)) return solve_cases(test_cases)"},{"question":"Amanda is practicing competitive programming and encounters a unique problem. She needs to write a function that takes a list of integers and detects if there exists any pair of distinct indices (i, j) in the list such that the absolute difference between the integers at these indices is equal to a given target value k. If such a pair exists, the function should return the indices as a tuple; otherwise, it should return -1. INPUT: The function takes two inputs: 1. A list of n integers. 2. An integer k, representing the target absolute difference. OUTPUT: The function should output a tuple containing two indices (i, j) if such a pair exists and -1 otherwise. The pairs (i, j) should satisfy the condition |array[i] - array[j]| = k. CONSTRAINTS 2 ≤ n ≤ 200 1 ≤ k ≤ 1000 -10^4 ≤ array[i] ≤ 10^4 for all integers in the list. SAMPLE INPUT: [10, 15, 3, 7, 8] 5 SAMPLE OUTPUT: (0, 1) Explanation The input list is [10, 15, 3, 7, 8] and the target absolute difference is 5. The pair of indices (0, 1) corresponds to the integers 10 and 15, which have an absolute difference of |10 - 15| = 5. Therefore, the function returns (0, 1).","solution":"def find_pair_with_difference(arr, k): Returns a tuple of indices (i, j) where the absolute difference between arr[i] and arr[j] is equal to k. If no such pair exists, return -1. index_map = {} for i, num in enumerate(arr): if (num - k) in index_map: return (index_map[num - k], i) if (num + k) in index_map: return (index_map[num + k], i) index_map[num] = i return -1"},{"question":"You are given an array of integers. Your task is to determine the minimum number of contiguous subarrays required to partition the given array such that each subarray follows a strictly increasing order. A subarray is strictly increasing if for every pair of consecutive elements A_i and A_{i+1} in the subarray, A_i < A_{i+1}. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. - The first line of each test case contains an integer N — the size of the array. - The second line of each test case contains N space-separated integers A_1, A_2, ..., A_N denoting the array. ------ Output Format ------ For each test case, output the minimum number of strictly increasing subarrays required. ------ Constraints ------ 1 leq T leq 10^4 1 leq N leq 10^5 1 leq A_i leq 10^9 - The sum of N over all test cases does not exceed 10^6. ----- Sample Input 1 ------ 2 6 1 2 4 3 5 6 5 5 1 3 2 4 ----- Sample Output 1 ------ 2 3 ----- Explanation 1 ------ Test case 1: - The given array is [1, 2, 4, 3, 5, 6]. We can partition it into two strictly increasing subarrays: [1, 2, 4] and [3, 5, 6]. Test case 2: - The given array is [5, 1, 3, 2, 4]. We can partition it into three strictly increasing subarrays: [5], [1, 3], and [2, 4].","solution":"def min_increasing_subarrays(T, test_cases): Given the number of test cases T and a list of test_cases where each test case is a tuple consisting of: 1. an integer N representing the size of the array 2. a list of N integers representing the array The function returns a list of integers where each integer is the minimum number of strictly increasing subarrays required for the corresponding test case. results = [] for N, array in test_cases: if N == 0: results.append(0) continue count = 1 for i in range(1, N): if array[i] <= array[i - 1]: count += 1 results.append(count) return results"},{"question":"Han wants to go on a hiking trip. He has a backpack with a maximum capacity of W (in kilograms). He has n items, each item i has a weight w_i and a value v_i. Han wants to maximize the total value of items he can pack into his backpack, but the total weight of items should not exceed W. Han can only take one unit of each item (i.e., no duplicates allowed). Your task is to help Han find the maximum value of the items he can pack into the backpack. -----Input----- The first line contains two integers n and W (1 ≤ n ≤ 1000, 1 ≤ W ≤ 10^5) — the number of items and the maximum capacity of the backpack. The next n lines each contain two integers w_i and v_i (1 ≤ w_i ≤ W, 0 ≤ v_i ≤ 10^6) — the weight and value of the i-th item. -----Output----- Print a single integer — the maximum value of the items that can be packed into the backpack. -----Examples----- Input 4 7 2 10 3 20 4 30 5 40 Output 50 Input 3 50 10 60 20 100 30 120 Output 220","solution":"def knapsack(n, W, items): Solves the 0/1 knapsack problem. Parameters: n (int): Number of items W (int): Maximum capacity of the backpack items (list of tuples): List of items where each item is represented as (weight, value) Returns: int: The maximum value that can be packed into the backpack without exceeding the capacity # Initialize DP table dp = [0] * (W + 1) for weight, value in items: for j in range(W, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + value) return dp[W] # Function to parse input format and call knapsack function def solve_knapsack_problem(n, W, item_list): return knapsack(n, W, item_list) # Example usage (uncomment to test) # n, W = 4, 7 # items = [(2, 10), (3, 20), (4, 30), (5, 40)] # print(solve_knapsack_problem(n, W, items)) # Output: 50"},{"question":"In a small town called Algora, every house has a unique and positive integer address. Recently, the town council has decided to renovate certain houses. They have specific criteria to decide which houses will be renovated. The council has given you a number P. A house will be considered for renovation if the sum of the digits of its address is exactly P. You need to find all the addresses within a given range [a, b] (inclusive) that meet the criteria for renovation. Input: The first line of the input contains an integer T, representing the number of test cases. Each test case consists of three integers a, b, and P, representing the range [a, b] and the target digit sum P respectively. Output: For each test case, print all qualifying addresses in increasing order. If no addresses qualify, print \\"No houses will be renovated.\\" Constraints: 1 ≤ T ≤ 50 1 ≤ a ≤ b ≤ 10^6 1 ≤ P ≤ 100 SAMPLE INPUT 3 10 20 2 50 60 5 100 115 7 SAMPLE OUTPUT 11 20 50 59 106 115 Explanation: In Case 1, the addresses within the range [10, 20] which have digits summing to 2 are 11 (1+1=2) and 20(2+0=2). In Case 2, the addresses within the range [50, 60] which have digits summing to 5 are 50 (5+0=5) and 59 (5+9=14, not matching), so only 50 qualifies. In Case 3, the addresses within the range [100, 115] which have digits summing to 7 are 106 (1+0+6=7) and 115 (1+1+5=7).","solution":"def digit_sum(n): Returns the sum of digits of n return sum(int(digit) for digit in str(n)) def find_renovation_addresses(T, cases): results = [] for case in cases: a, b, P = case qualifying_addresses = [i for i in range(a, b+1) if digit_sum(i) == P] if qualifying_addresses: results.append(\\" \\".join(map(str, qualifying_addresses))) else: results.append(\\"No houses will be renovated\\") return results # Example usage if __name__ == \\"__main__\\": T = 3 cases = [ (10, 20, 2), (50, 60, 5), (100, 115, 7) ] results = find_renovation_addresses(T, cases) for result in results: print(result)"},{"question":"Mina loves reading books and she has a collection of N books. Each book has a unique identifier which is a positive integer. Being an organized person, she wants to arrange these books in ascending order of their identifiers. However, her shelf can only fit K books in one row. Therefore, she wants to organize her shelf into multiple rows each containing exactly K books except possibly the last row, which may have less than K books. Your task is to write a program that sorts the books in ascending order of their identifiers and arranges them in rows such that the first row has the smallest K identifiers, the second row the next K identifiers, and so on. Input Format: The first line contains the number of test cases, T. For each test case, the first line contains two integers, N and K. The second line contains N integers representing the identifiers of the books. Output Format: For each test case, output the sorted book identifiers in rows as described above. Print each row in a new line. Constraints: 1 <= T <= 50 1 <= N <= 100 1 <= K <= N 1 <= book identifier <= 10^5 SAMPLE INPUT: 2 5 2 3 1 4 5 2 7 3 10 9 8 7 6 5 4 SAMPLE OUTPUT: 1 2 3 4 5 4 5 6 7 8 9 10 Explanation: In the first test case, the sorted identifiers are [1, 2, 3, 4, 5]. These are organized into rows of 2 books each (except the last row which has 1 book). In the second test case, the sorted identifiers are [4, 5, 6, 7, 8, 9, 10]. These are organized into rows of 3 books each (except the last row which has 1 book).","solution":"def arrange_books_by_identifier(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] books = test_cases[i][1] books.sort() rows = [] for j in range(0, n, k): row = books[j:j+k] rows.append(\\" \\".join(map(str, row))) results.extend(rows) results.append(\\"\\") # a blank line to separate different test case results return \\"n\\".join(results).strip()"},{"question":"Given a string s that represents a mathematical expression containing only non-negative integers, addition (+) and subtraction (-) operators, evaluate the expression and return its result. The input string is well-formed, meaning it contains only digits, plus signs, minus signs, and spaces. The input string may contain extra spaces between numbers and operators. Your task is to implement a function `calculate_expression(s: str) -> int` that takes the string s as input and returns the result of the evaluated expression as an integer. You must ensure that the function operates with linear time complexity O(n). Input: - A single line string s representing the mathematical expression (1 ≤ |s| ≤ 3 * 10^4). Output: - An integer, the result of the evaluated expression. Example: Input: \\"3 + 5 - 2\\" Output: 6 Input: \\"10 + 20 - 30 + 40\\" Output: 40 Input: \\"1 + 1 + 1 + 1 + 1 - 5\\" Output: 0 Note: - You may assume that the input string is always valid and contains only integer numbers, spaces, and characters \'+\' and \'-\'. There will be no leading or trailing spaces, and consecutive spaces will only exist between numbers and operators.","solution":"def calculate_expression(s: str) -> int: Evaluate the mathematical expression provided in the string s. s = s.replace(\' \', \'\') total, num, sign = 0, 0, 1 for char in s: if char.isdigit(): num = num * 10 + int(char) else: total += sign * num num = 0 if char == \'+\': sign = 1 elif char == \'-\': sign = -1 total += sign * num return total"},{"question":"A group of biologists is investigating the growth patterns of a particular type of algae that grows in a straight line along the edge of a lake. They need to analyze the segments of algae growth to determine which portions of the edge grow algae most efficiently. The growth of algae can be represented by an array of non-negative integers, where each element signifies the amount of algae present in that particular segment. Due to natural variations, some segments might not have any algae growth at all. The biologists are particularly interested in identifying the longest continuous subarray that exhibits a consistent growth pattern. A consistent growth pattern is one where the difference between the maximum and minimum amounts of algae in that subarray is less than or equal to a given threshold `k`. Your task is to find the length of the longest continuous subarray that satisfies this condition. If all segments have no algae, the length should be zero. Input The first line contains a single integer `t` (1 ≤ t ≤ 20), the number of test cases. Each test case consists of two lines: - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9), the number of segments along the lake edge and the threshold respectively. - The second line contains n space-separated non-negative integers a[i] (0 ≤ a[i] ≤ 10^9), representing the amount of algae in each segment. Output For each test case, output a single integer denoting the length of the longest subarray with a consistent growth pattern. Constraints As mentioned in the input part. SAMPLE INPUT 2 5 2 1 3 1 2 1 7 0 4 4 4 4 4 4 4 SAMPLE OUTPUT 5 7","solution":"def longest_consistent_subarray(t, test_cases): def find_longest_subarray_length(n, k, a): from collections import deque min_deque = deque() max_deque = deque() left = 0 max_len = 0 for right in range(n): while min_deque and a[min_deque[-1]] >= a[right]: min_deque.pop() while max_deque and a[max_deque[-1]] <= a[right]: max_deque.pop() min_deque.append(right) max_deque.append(right) while a[max_deque[0]] - a[min_deque[0]] > k: if min_deque[0] == left: min_deque.popleft() if max_deque[0] == left: max_deque.popleft() left += 1 max_len = max(max_len, right - left + 1) return max_len results = [] for i in range(t): n, k = test_cases[i][0] a = test_cases[i][1] results.append(find_longest_subarray_length(n, k, a)) return results"},{"question":"You are developing a coding platform that evaluates code submissions. An essential feature of the platform is the ability to track the time it takes for a code submission to execute on different test cases. For a given code submission, you are provided with the number of test cases and the execution times for these test cases. You need to calculate some statistics to help users analyze the performance of their code. Specifically, you need to calculate the total execution time, the average execution time, the maximum execution time, and the minimum execution time for the given test cases. ---Input--- The first line contains a single integer t (1 le t le 100) — the number of test cases. The second line contains t integers e_1, e_2, dots, e_t (0 le e_i le 10^6), where e_i is the execution time of the i-th test case. ---Output--- Print four space-separated integers: the total execution time, the average execution time (rounded down to the nearest integer), the maximum execution time, and the minimum execution time. ---Examples--- Input 5 10 20 30 40 50 Output 150 30 50 10 Input 3 5 8 12 Output 25 8 12 5 ---Note--- In the first example, there are 5 test cases with execution times 10, 20, 30, 40, and 50. The total execution time is 150. The average execution time is 30 (which is 150 divided by 5). The maximum execution time is 50, and the minimum execution time is 10. In the second example, there are 3 test cases with execution times 5, 8, and 12. The total execution time is 25. The average execution time is 8 (which is 25 divided by 3, rounded down). The maximum execution time is 12, and the minimum execution time is 5.","solution":"def analyze_execution_times(t, times): Calculate the total, average, maximum, and minimum execution times. Args: t (int): Number of test cases. times (list of int): Execution times for each test case. Returns: tuple: A tuple containing total time, average time (rounded down), max time, and min time. total_time = sum(times) average_time = total_time // t max_time = max(times) min_time = min(times) return total_time, average_time, max_time, min_time"},{"question":"Bob is a fanatic of collecting rare coins and he owns several coin collections. Each collection contains a unique set of coins, and Bob wants to know how many coins are there in his largest collection. Given the details of each collection as a list of integers representing the number of coins in each collection, write a program to determine the maximum number of coins Bob has in a single collection. Input Format: The first line contains the number of test cases, T. T lines follow, each of which contains an integer array representing the number of coins in each of the collections Bob owns. Output Format: Print the maximum number of coins in any single collection for each test case. Constraints: 1 ≤ T ≤ 100 1 ≤ Length of each integer array ≤ 1000 1 ≤ Number of coins in a collection ≤ 10^4 SAMPLE INPUT 3 3 4 2 5 1 9 8 7 10 10 10 10 SAMPLE OUTPUT 5 9 10 Explanation: In the first case, the collections are [3, 4, 2, 5]. The largest collection has 5 coins. In the second case, the collections are [1, 9, 8, 7]. The largest collection has 9 coins. In the third case, all collections have the same number of coins: 10. So, the largest collection also has 10 coins.","solution":"def find_largest_collection(test_cases): This function takes a list of test cases, where each test case is a list of integers representing the number of coins in each collection, and returns a list of the maximum number of coins in any single collection for each test case. Args: test_cases (list of lists): A list containing T lists, each representing the number of coins in collections. Returns: list of int: A list of integers, where each integer is the maximum number of coins in any single collection from the corresponding test case. result = [] for collections in test_cases: max_coins = max(collections) result.append(max_coins) return result # Example usage (this part will be used during unit testing): # test_cases = [ # [3, 4, 2, 5], # [1, 9, 8, 7], # [10, 10, 10, 10] # ] # print(find_largest_collection(test_cases)) # Output: [5, 9, 10]"},{"question":"A software company has just launched a new feature in their messaging application and they want to test it using their internal messaging logs. They would like to analyze the logs to identify various message patterns based on specific conditions. The logs are stored in a file, and each message in the log has the following format: - Each line represents one message and starts with a timestamp, followed by the user ID, and the message content. The timestamp, user ID, and message content are all separated by a space. - Timestamps are in the format YYYY-MM-DDTHH:MM:SS (e.g., 2023-04-05T14:22:30). - User IDs are positive integers. - Message content is a string of text that may contain spaces. You need to write a program that processes the logs and identifies the messages meeting the following conditions: 1. Messages sent by user ID 1 between 12:00:00 and 13:00:00 on any given day. 2. Messages containing the keyword \\"urgent\\". The program should print two lists: 1. The messages sent by user ID 1 within the specified time frame. 2. Messages containing the keyword \\"urgent\\". Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of messages in the log. Each of the next n lines contains one message in the format described above. Output Print the results in the following format: 1. On the first line, print \\"Messages by User 1 between 12:00:00 and 13:00:00:\\" followed by the list of matching messages. 2. On the second line, print \\"Messages containing \'urgent\':\\" followed by the list of matching messages. Examples Input 5 2023-04-05T12:15:30 1 Meeting at 1 PM 2023-04-05T14:22:30 1 Project deadline tomorrow 2023-04-05T12:45:00 2 urgent task need assistance 2023-04-05T13:59:59 1 Lunch break is over 2023-04-05T12:05:30 1 Need reply urgently Output Messages by User 1 between 12:00:00 and 13:00:00: 2023-04-05T12:15:30 1 Meeting at 1 PM Messages containing \'urgent\': 2023-04-05T12:05:30 1 Need reply urgently 2023-04-05T12:45:00 2 urgent task need assistance","solution":"def process_logs(n, logs): user1_messages = [] urgent_messages = [] for log in logs: timestamp, user_id, *message_content = log.split(\' \') time = timestamp.split(\'T\')[1] user_id = int(user_id) message_content = \' \'.join(message_content) if user_id == 1 and \\"12:00:00\\" <= time < \\"13:00:00\\": user1_messages.append(log) if \\"urgent\\" in message_content: urgent_messages.append(log) print(\\"Messages by User 1 between 12:00:00 and 13:00:00:\\") for message in user1_messages: print(message) print(\\"Messages containing \'urgent\':\\") for message in urgent_messages: print(message)"},{"question":"Given an array of integers representing the heights of candles in a row, determine the maximum number of candles that can be blown out if you can only blow out candles that are at the same height. Function Signature: ```python def max_candles(candles: List[int]) -> int: ``` **Input** - An integer array `candles` of length `n` (1 ≤ n ≤ 2 ⋅ 10^5), where each element represents the height of a candle (1 ≤ candles[i] ≤ 10^7). **Output** - Return a single integer — the maximum number of candles that can be blown out. **Example** Input ``` [4, 4, 1, 3, 4] ``` Output ``` 3 ``` Input ``` [3, 1, 2, 3, 3, 2, 2] ``` Output ``` 3 ``` **Explanation** In the first example, the height 4 appears three times, which is the maximum frequency of any height in the array. Therefore, you can blow out 3 candles of height 4. In the second example, the maximum number of candles at the same height is 3 for the height 3. Hence, you can blow out 3 candles.","solution":"from typing import List def max_candles(candles: List[int]) -> int: Returns the maximum number of candles that can be blown out if you can only blow out candles that are at the same height. Parameters: candles (List[int]): List of integers representing candle heights. Returns: int: Maximum number of candles that can be blown out. from collections import Counter # Count the frequency of each candle height count = Counter(candles) # The maximum number of candles that can be blown out is the maximum frequency found return max(count.values())"},{"question":"We are given the root node of a binary search tree: a tree where each node follows the property that all nodes in its left subtree have values less than the node\'s value, and all nodes in its right subtree have values greater than the node\'s value. Given a binary search tree, root, and the value of a node that needs to be deleted, you are required to build a new binary search tree that contains all the original tree\'s nodes except the one with the given value. The function should return the root of the new binary search tree. Example 1: Input: root = [5,3,6,2,4,null,7], val = 3 Output: [5,4,6,2,null,null,7] Explanation: The tree now becomes: 5 / 4 6 / 2 7 Example 2: Input: root = [5,3,6,2,4,null,7], val = 0 Output: [5,3,6,2,4,null,7] Explanation: The value 0 is not found in the tree, so no changes are made. Example 3: Input: root = [], val = 0 Output: [] Constraints: - The number of nodes in the tree is in the range [0, 100]. - -100 <= Node.val <= 100 - All Node.val are unique.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def deleteNode(root, key): if not root: return None if key < root.val: root.left = deleteNode(root.left, key) elif key > root.val: root.right = deleteNode(root.right, key) else: if not root.left: return root.right elif not root.right: return root.left minNode = findMin(root.right) root.val = minNode.val root.right = deleteNode(root.right, root.val) return root def findMin(node): while node.left: node = node.left return node def inorderTraversal(root): res = [] if root: res = inorderTraversal(root.left) res.append(root.val) res = res + inorderTraversal(root.right) return res"},{"question":"You are given an array A of N integers. Your task is to find the length of the longest increasing subsequence (LIS) such that the sum of the elements in the subsequence is an even number. If no such subsequence exists, print -1. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of 2 lines of input: - The first line consists of a single integer N - the length of the array A. - The second line contains N space-separated integers representing the elements of the array A. ------ Output Format ------ For each test case, print the length of the longest increasing subsequence with an even sum. If no such subsequence exists, print -1. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ A[i] ≤ 10^5 for all 1 ≤ i ≤ N ------ Sample Input 1 ------ 2 5 3 2 5 8 4 4 1 3 5 7 ------ Sample Output 1 ------ 3 -1 ------ Explanation 1 ------ Test case 1: Possible increasing subsequences are [2, 4], [2, 8], [3, 5, 8]. Among these, the subsequence with the maximum length that has an even sum is [3, 5, 8] with length 3 and sum 16. Test case 2: No increasing subsequence has an even sum. Hence, the answer is -1.","solution":"def longest_increasing_subsequence_with_even_sum(arr): n = len(arr) dp = [0] * n # dp[i] will store the length of LIS ending at index i even_sum = [0] * n # even_sum[i] will store the sum of the LIS ending at index i if it\'s even max_length = -1 for i in range(n): dp[i] = 1 even_sum[i] = arr[i] if arr[i] % 2 == 0 else 0 for j in range(i): if arr[j] < arr[i] and dp[j] + 1 > dp[i]: dp[i] = dp[j] + 1 if (even_sum[j] + arr[i]) % 2 == 0: even_sum[i] = even_sum[j] + arr[i] else: even_sum[i] = 0 if even_sum[i] % 2 == 0 and even_sum[i] > 0: max_length = max(max_length, dp[i]) return max_length def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(longest_increasing_subsequence_with_even_sum(arr)) return results"},{"question":"A digital library wants to organize a large number of books efficiently. Each book has a unique identifier and belongs to a specific genre. The library wants to place all the books on shelves such that each shelf contains books of only one genre. Furthermore, within a genre, all books should be sorted by their identifier in ascending order. To automate the shelving process, you need to implement a program that takes as input a list of books along with their identifiers and genres, and outputs the arrangement of books on the shelves according to the specified rules. ------ Input ------ The first line of the input contains a single integer T, the number of test cases. T test cases follow. Each test case starts with an integer N, the number of books. The next N lines contain a string and an integer separated by a space: the string is the genre of the book, and the integer is the book\'s identifier. ------ Output ------ For each test case, output the sorted arrangement of books on the shelves. Within each genre, books should be listed by their identifier in ascending order. List the genres in the order they first appear in the input for each test case. For each test case, output the genres and their books in separate lines, following this format: Genre: identifier1 identifier2 ... identifierN ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ identifier ≤ 10^6 The genre strings consist of lowercase English letters only and have a length between 1 and 100 (inclusive). ------ Example ------ Input: 2 3 fiction 2 nonfiction 1 fiction 1 4 romance 1 science 2 romance 3 science 1 Output: fiction: 1 2 nonfiction: 1 romance: 1 3 science: 1 2 ------ Explanation ------ Case 1: - The genre \\"fiction\\" appears first and then \\"nonfiction\\". - The books in \\"fiction\\" are sorted by their identifiers: 1 and 2. - The book in \\"nonfiction\\" has only one identifier: 1. Case 2: - The genre \\"romance\\" appears first and then \\"science\\". - The books in \\"romance\\" are sorted by their identifiers: 1 and 3. - The books in \\"science\\" are sorted by their identifiers: 1 and 2.","solution":"def organize_books(T, test_cases): Organizes books by genre and identifier. Parameters: T (int): Number of test cases. test_cases (list): A list of lists where each sublist corresponds to a test case. Each sublist contains a tuple that represents a book (genre, identifier). Returns: list: A list of strings representing the organized books for each test case. results = [] for case in test_cases: genre_dict = {} for genre, identifier in case: if genre not in genre_dict: genre_dict[genre] = [] genre_dict[genre].append(identifier) case_result = [] for genre in genre_dict: sorted_identifiers = sorted(genre_dict[genre]) case_result.append(f\\"{genre}:n{\' \'.join(map(str, sorted_identifiers))}\\") results.append(\'n\'.join(case_result)) return results # Parse input for the function def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] i = 1 for _ in range(T): N = int(lines[i]) case = [] for j in range(i+1, i+N+1): genre, identifier = lines[j].rsplit(\' \', 1) case.append((genre, int(identifier))) test_cases.append(case) i += N + 1 return T, test_cases # Integration function to handle input and output def handle_books(input_string): T, test_cases = parse_input(input_string) results = organize_books(T, test_cases) return \'nn\'.join(results)"},{"question":"Given an array of integers that is sorted in ascending order and then rotated at some pivot unknown to you beforehand (i.e., `[0,1,2,4,5,6,7]` might become `[4,5,6,7,0,1,2]`), write a function to determine if a given target is in the array. If it is, return its index, otherwise, return -1. Example 1: Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4 Example 2: Input: nums = [4,5,6,7,0,1,2], target = 3 Output: -1 Example 3: Input: nums = [1], target = 0 Output: -1 Your Task: Write a function `search(nums, target)` that takes an array of integers `nums` and an integer `target` as inputs and returns the index of `target` in `nums` if it is present, otherwise returns -1. Expected Time Complexity: O(log N) Expected Auxiliary Space: O(1) Constraints: - 1 ≤ nums.length ≤ 5000 - -10^4 ≤ nums[i] ≤ 10^4 - All values of nums are unique. - nums is guaranteed to be rotated at some pivot.","solution":"def search(nums, target): Returns the index of target in nums if it is present, otherwise returns -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid # If the left part is sorted if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 # If the right part is sorted else: if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"The game of Sudoku is a well-known puzzle that consists of a 9x9 grid divided into nine 3x3 subgrids. Each row, column, and subgrid must contain all digits from 1 to 9 exactly once. You need to determine if a given 9x9 grid is a valid Sudoku solution. -----Input----- The input consists of a 9x9 grid of integers. Each integer is between 0 and 9, inclusive. A value of 0 represents an empty cell. -----Output----- Output a single line containing \\"valid\\" if the given grid represents a valid Sudoku solution, or \\"invalid\\" if there are any violations of the Sudoku rules. -----Examples----- Sample Input 1: 5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 Sample Output 1: valid Sample Input 2: 5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 2 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 Sample Output 2: invalid","solution":"def is_valid_sudoku(grid): def is_unit_valid(unit): nums = [x for x in unit if x != 0] return len(nums) == len(set(nums)) def is_row_valid(): for row in grid: if not is_unit_valid(row): return False return True def is_col_valid(): for col in zip(*grid): if not is_unit_valid(col): return False return True def is_square_valid(): for i in range(0, 9, 3): for j in range(0, 9, 3): square = [grid[x][y] for x in range(i, i+3) for y in range(j, j+3)] if not is_unit_valid(square): return False return True return \\"valid\\" if is_row_valid() and is_col_valid() and is_square_valid() else \\"invalid\\""},{"question":"You are given an m x n 2D grid initialized with these three possible values: - `-1` - A wall or an obstacle. - `0` - A gate. - `INF` - An empty room. This value is known to be a very large number denoting that the room is empty. Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should remain as `INF`. You may assume that: - There will be at least one gate in the grid. - Each gate can reach all empty rooms that are not blocked by walls. - You can move up, down, left, or right from an empty room. Example: ``` Input: rooms = [ [INF, -1, 0, INF], [INF, INF, INF, -1], [INF, -1, INF, -1], [0, -1, INF, INF] ] Output: [ [3, -1, 0, 1], [2, 2, 1, -1], [1, -1, 2, -1], [0, -1, 3, 4] ] ```","solution":"from collections import deque def walls_and_gates(rooms): Fill each empty room with the distance to its nearest gate. Parameters: rooms (list[list[int]]): 2D grid initialized with -1, 0, or INF. Returns: None; modifies rooms in place. if not rooms or not rooms[0]: return INF = float(\'inf\') m, n = len(rooms), len(rooms[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque() # Initialize the queue with all gate positions for i in range(m): for j in range(n): if rooms[i][j] == 0: queue.append((i, j)) # Perform BFS from each gate while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and rooms[nx][ny] == INF: rooms[nx][ny] = rooms[x][y] + 1 queue.append((nx, ny))"},{"question":"You are given a series of operations to be performed on a string. The operations can be either adding a character to the end of the string or removing the last character from the string. After performing all the operations, output the final string. Input format: The first line contains an integer, N, denoting the number of operations. Each of the next N lines contains a single operation in one of the following two formats: - \\"ADD c\\" where \'c\' is a character to be added to the end of the string. - \\"REMOVE\\" indicating the removal of the last character of the string. Output format: Output a single line containing the final string after performing all the operations. Constraints: 1 ≤ N ≤ 100,000 Operations will be valid, meaning REMOVE will never be called on an empty string. SAMPLE INPUT 5 ADD a ADD b ADD c REMOVE ADD d SAMPLE OUTPUT abd","solution":"def perform_operations(n, operations): Perform a series of operations to add or remove characters from a string. :param n: Number of operations :param operations: List of operations to be performed :return: The final string after performing all operations result = [] for operation in operations: if operation.startswith(\\"ADD\\"): _, char = operation.split() result.append(char) elif operation == \\"REMOVE\\": result.pop() return \'\'.join(result)"},{"question":"In the world of programming, efficiency is key. One of the common problems faced by developers is finding efficient ways to manipulate and analyze strings. Write a program that checks if two strings are anagrams of each other. Two strings are anagrams if they can be formed by rearranging the letters of the other string. The strings may contain spaces and punctuation, which should be ignored during comparison. Input: The first line contains the number of test cases, T. T lines follow, each of which contains two strings S1 and S2. Output: Print \\"Yes\\" if the two strings are anagrams of each other, otherwise print \\"No\\". Constraints: 1 ≤ T ≤ 100 1 ≤ len(S1), len(S2) ≤ 100 SAMPLE INPUT 3 listen silent hello world ohlle orlwd anagram nag a ram SAMPLE OUTPUT Yes Yes Yes Explanation: In the first test case, \\"listen\\" and \\"silent\\" are anagrams when ignoring spaces and punctuation. In the second test case, \\"hello world\\" and \\"ohlle orlwd\\" are anagrams when ignoring spaces and punctuation. In the third test case, \\"anagram\\" and \\"nag a ram\\" are anagrams when ignoring spaces and punctuation.","solution":"import re def is_anagram(s1, s2): Returns \'Yes\' if s1 and s2 are anagrams of each other, otherwise returns \'No\'. # Remove spaces and punctuations, and convert to lowercase s1_cleaned = re.sub(r\'W+\', \'\', s1).lower() s2_cleaned = re.sub(r\'W+\', \'\', s2).lower() # Sort and compare the cleaned strings return \\"Yes\\" if sorted(s1_cleaned) == sorted(s2_cleaned) else \\"No\\" def check_anagrams(test_cases): results = [] for s1, s2 in test_cases: results.append(is_anagram(s1, s2)) return results"},{"question":"Problem Statement You are a software engineer working for a futuristic space agency. The agency has designed a series of robotic arms that are used to assemble space stations in orbit. Each robotic arm can move in one of four cardinal directions (up, down, left, right) and can switch direction at any time. However, energy consumption is minimized by changing direction as infrequently as possible. You are given the initial position of each robotic arm on a 2D grid, the final position it needs to reach, and a list of obstacles on the grid. The goal is to calculate the minimum number of direction changes required for each robotic arm to reach its final position without colliding into any obstacles. If it\'s not possible for a robotic arm to reach its destination, return -1 for that arm. Input The input consists of multiple datasets. The number of datasets does not exceed 20. Each dataset is formatted as follows: > N M K > (x_1^{start}, y_1^{start}) (x_1^{end}, y_1^{end}) > : > : > (x_N^{start}, y_N^{start}) (x_N^{end}, y_N^{end}) > (x_1^{obs}, y_1^{obs}) > : > : > (x_K^{obs}, y_K^{obs}) The first line contains three integers N (1 le N le 1000), the number of robotic arms, M (1 le M le 1000), the size of the 2D grid (the grid is M times M), and K (0 le K le 1000), the number of obstacles on the grid. Each of the following N lines describes a robotic arm. Each arm\'s description consists of two tuples (x_i^{start}, y_i^{start}) and (x_i^{end}, y_i^{end}) representing the initial and final positions of the ith robotic arm. Following the robotic arm descriptions, each of the next K lines describes an obstacle\'s position on the grid as a tuple (x_i^{obs}, y_i^{obs}). The end of the input is indicated by a line containing three zeros. Output For each dataset, output N lines. Each line should contain a single integer representing the minimum number of direction changes required for the corresponding robotic arm, or -1 if the arm cannot reach its destination. Sample Input 2 5 1 (0, 0) (4, 4) (1, 1) (3, 3) (2, 2) 1 3 3 (0, 0) (2, 2) (1, 1) (1, 2) (2, 1) 0 0 0 Output for the Sample Input 2 2 -1 Example Input 2 5 1 (0, 0) (4, 4) (1, 1) (3, 3) (2, 2) 1 3 3 (0, 0) (2, 2) (1, 1) (1, 2) (2, 1) 0 0 0 Output 2 2 -1","solution":"from collections import deque def min_direction_changes(n, m, k, robots, obstacles): # Define movement directions, and their perpendicular for direction changes directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, Down, Left, Up results = [] obstacle_set = set(obstacles) def in_bounds(x, y): return 0 <= x < m and 0 <= y < m for (start_x, start_y), (end_x, end_y) in robots: if (start_x, start_y) == (end_x, end_y): results.append(0) continue visited = set() queue = deque([(start_x, start_y, -1, 0)]) # x, y, direction, changes while queue: x, y, direction, changes = queue.popleft() for dir_idx, (dx, dy) in enumerate(directions): nx, ny = x + dx, y + dy if not in_bounds(nx, ny) or (nx, ny) in obstacle_set: continue # Calculate the new number of changes new_changes = changes if dir_idx == direction else changes + 1 if (nx, ny) == (end_x, end_y): results.append(new_changes) break state = (nx, ny, dir_idx) if state not in visited: visited.add(state) queue.append((nx, ny, dir_idx, new_changes)) else: continue break else: results.append(-1) return results"},{"question":"The students in a college are organizing a treasure hunt event. They have a long rectangular field of size NxM. The field is divided into N rows and M columns, forming a grid of NxM cells. Each cell can either contain an obstacle or be empty. Students need to find the number of unique paths from the top-left corner to the bottom-right corner of the grid, moving only right or down at any point in time. -----Input:----- - The first line of the input contains a single integer T, the number of test cases. - Each test case starts with two integers N and M, denoting the number of rows and columns of the grid respectively. - The next N lines each contain M integers (0 or 1). A 0 represents an empty cell, and a 1 represents an obstacle that cannot be passed through. -----Output:----- For each test case, output in a single line the number of unique paths from the top-left corner to the bottom-right corner. If there is no valid path, output 0. -----Constraints----- - 1 leq T leq 100 - 1 leq N, M leq 50 - The grid will always have either a 0 or a 1 in each cell. -----Sample Input:----- 2 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 0 1 0 0 0 0 -----Sample Output:----- 2 1","solution":"def count_unique_paths(T, test_cases): Calculates the number of unique paths in a grid for each test case, considering obstacles. Parameters: T (int): Number of test cases test_cases (list): List of test cases with grid dimensions and grid values Returns: list: List of unique paths for each test case def count_paths(grid, N, M): if grid[0][0] == 1 or grid[N-1][M-1] == 1: return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == 0: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1] results = [] for i in range(T): N, M = test_cases[i][0] grid = test_cases[i][1] results.append(count_paths(grid, N, M)) return results # Example input processing function, not required for solution itself def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N, M = map(int, lines[idx].split()) grid = [list(map(int, lines[idx + 1 + i].split())) for i in range(N)] test_cases.append(((N, M), grid)) idx += (N + 1) return T, test_cases"},{"question":"**String Repeating Pattern** You have been given a string `s` and an integer `n`. Your task is to create a new string that repeats `s`, `n` times, but with a specific pattern between the strings. For each repeated `s`, you should append a hyphen `-` followed by the current repetition count (starting from 1). There should be no hyphen after the last repetition. For example: ``` string_pattern(\\"abc\\", 3) => \\"abc-1abc-2abc-3\\" string_pattern(\\"xy\\", 4) => \\"xy-1xy-2xy-3xy-4\\" ``` **Function Signature** ```python def string_pattern(s: str, n: int) -> str: # Your code here ``` **Input Constraints** - `1 <= len(s) <= 100` - `1 <= n <= 100` **Output** - Return the resultant pattern string. Maintain correctness and efficiency in your solution. Aim to avoid unnecessary computations or excessive memory usage. Implement the defined function and ensure it adheres to the outlined specifications.","solution":"def string_pattern(s: str, n: int) -> str: Generates a pattern string by repeating `s` `n` times and appending a hyphen and count after each repetition. Parameters: s (str): The string to be repeated. n (int): The number of times the string `s` should be repeated. Returns: str: The resultant pattern string. return \'\'.join(f\\"{s}-{i+1}\\" for i in range(n))"},{"question":"Merlin is studying ancient runes and has come across a peculiar magical script called \\"RuneContain\\". In this script, letters are transformed into runes, and Merlin wants to know if a particular set of runes can be derived from the magical script without rearranging the letters. Consider a string `s` that represents the magical script and a string `r` that represents the set of runes Merlin is interested in. Merlin can remove zero or more characters from the string `s` to form the string `r`, but he cannot rearrange the remaining characters. Write a function `canFormRunes` to help Merlin determine whether the string `r` can be derived from the string `s`. Function Description Complete the `canFormRunes` function in the editor below. The function should return a string, either `Possible` if the set of runes `r` can be formed from the script `s`, or `Impossible` if it cannot. `canFormRunes` has the following parameter(s): - `s`: a string that represents the magical script - `r`: a string that represents the set of runes Input Format The first line contains an integer `t`, the number of test cases. Each test case is described as follows: - The first line contains the string `s`. - The second line contains the string `r`. Constraints - 1 ≤ t ≤ 10 - 1 ≤ |s|, |r| ≤ 1000 - Each string consists only of lowercase English letters. Output Format On a new line for each test case, print `Possible` if the runes can be formed from the script, otherwise print `Impossible`. Sample Input 3 abcde ace xyz xy aabbcc abc Sample Output Possible Possible Impossible Explanation For each test case: 1. In the first case, the string `ace` can be derived from `abcde` by removing `b` and `d`. 2. In the second case, the string `xy` can be derived from `xyz` by removing `z`. 3. In the third case, the string `abc` cannot be derived from `aabbcc` without rearranging the letters.","solution":"def canFormRunes(s, r): Determines if the runes string `r` can be formed from the script string `s` without rearranging the letters. Parameters: s (str): The magical script string r (str): The runes string Returns: str: \\"Possible\\" if `r` can be formed from `s`, otherwise \\"Impossible\\" # Pointer to track the current position in `r` r_index = 0 # Iterate through each character in `s` for char in s: # If the character in `s` matches the current character # in `r`, move to the next character in `r` if r_index < len(r) and char == r[r_index]: r_index += 1 # If the entire `r` string has been matched if r_index == len(r): return \\"Possible\\" else: return \\"Impossible\\""},{"question":"You are given an R x C grid, where some cells contain a number of units of gold and others do not. Your goal is to implement an algorithm to find the maximum amount of gold you can collect starting from any cell and moving to adjacent cells in any of the four directions (up, down, left, or right). You cannot visit the same cell more than once in a single path. A valid path is a sequence of cells such that for each cell in the path, it is possible to move to the next cell directly using one of the four directional moves. Your task is to write a program that reads a grid, calculates the maximum amount of gold that can be collected, and prints the result. Input: - The first line contains two integers, R and C, (1 ≤ R, C ≤ 15), denoting the number of rows and columns in the grid, respectively. - Each of the next R lines contains C integers. Each integer is either a non-negative number denoting the units of gold in that cell or 0 if the cell is empty. Output: - Print a single integer representing the maximum amount of gold you can collect. Example: Input: 3 3 0 6 0 5 8 7 0 9 0 Output: 24 Explanation: The maximum amount of gold can be collected by starting from cell (1,1) -> (1,2) -> (2,2) -> (2,1) -> (1,1). The path is highlighted in the grid and collects 6+8+9+7 which is equal to 24.","solution":"def get_maximum_gold(grid): def dfs(r, c): if r < 0 or r >= R or c < 0 or c >= C or grid[r][c] == 0: return 0 gold = grid[r][c] grid[r][c] = 0 # mark as visited max_gold = 0 for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]: max_gold = max(max_gold, dfs(r + dr, c + dc)) grid[r][c] = gold # backtrack return gold + max_gold R, C = len(grid), len(grid[0]) max_gold_collected = 0 for r in range(R): for c in range(C): if grid[r][c] != 0: max_gold_collected = max(max_gold_collected, dfs(r, c)) return max_gold_collected"},{"question":"You are given an array of `N` integers representing the height of a fence at different sections. You need to paint the entire fence with the fewest number of operations. In one operation, you can paint a contiguous section of the fence with a new color, which can cover either a single section or multiple connected sections with the same color. Write a function that returns the minimum number of operations required to paint the entire fence. Example 1: Input: N = 5 heights = [2, 2, 1, 2, 2] Output: 3 Explanation: - Paint the first two sections: [2, 2, 1, 2, 2] - Paint the third section: [2, 2, 1, 2, 2] - Paint the last two sections: [2, 2, 1, 2, 2] Example 2: Input: N = 6 heights = [1, 2, 1, 1, 1, 2] Output: 4 Explanation: - Paint the first section: [1, 2, 1, 1, 1, 2] - Paint the second section: [1, 2, 1, 1, 1, 2] - Paint the third section: [1, 2, 1, 1, 1, 2] - Paint the last section: [1, 2, 1, 1, 1, 2] Your Task: You don\'t need to read input or print anything. Complete the function minPaintOperations() that takes an integer array `heights` and its size `N` as input parameters and returns the minimum number of painting operations required to paint the entire fence. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ heights[i] ≤ 10^{4}","solution":"def minPaintOperations(N, heights): if N == 0: return 0 operations = 1 # At least one operation is needed to paint the first section for i in range(1, N): if heights[i] != heights[i-1]: operations += 1 return operations"},{"question":"Statement: Elena loves solving puzzles and she recently encountered a challenge involving binary numbers. She has two binary strings, A and B, and she wants to find the minimum number of operations required to make the binary string A equal to the binary string B. The allowed operations are: 1. Flip a single bit from 0 to 1 or from 1 to 0. 2. Swap any two bits in A. Write a program to determine the minimum number of operations required. Input format: First line contains T, the number of test cases. Each of the next T lines contains two binary strings A and B of equal length. Output format: For every test case, print the minimum number of operations required. Constraints: 1 ≤ T ≤ 10 1 ≤ length of A, B ≤ 1000 Both A and B contain only characters \'0\' and \'1\'. SAMPLE INPUT 2 1100 1001 101 111 SAMPLE OUTPUT 1 1 Explanation: Case 1: Swap the second and fourth bits of A to get \\"1001\\", which is equal to B. Case 2: Flip the first bit of A from \'1\' to \'1\'.","solution":"def min_operations_for_binary_strings(T, cases): results = [] for A, B in cases: # Calculate the number of 1s and 0s that need to be swapped or flipped diff_zero_to_one = diff_one_to_zero = swaps_needed = 0 for a_bit, b_bit in zip(A, B): if a_bit != b_bit: if a_bit == \'0\': diff_zero_to_one += 1 else: diff_one_to_zero += 1 swaps_needed = min(diff_zero_to_one, diff_one_to_zero) flips_needed = abs(diff_zero_to_one - diff_one_to_zero) min_operations = swaps_needed + flips_needed results.append(min_operations) return results"},{"question":"You are given a string that contains a mix of lowercase and uppercase characters. Your task is to write a program that rearranges the string such that all the lowercase letters come first, followed by all the uppercase letters. The relative order of both lowercase and uppercase groups should remain the same as in the input string. -----Input:----- The input consists of a single line that contains a non-empty string S of length N, where 1 leq N leq 10^5. The string S contains only alphabetic characters (both lowercase and uppercase). -----Output:----- Output a single line containing the rearranged string with all lowercase letters followed by all uppercase letters, maintaining their original relative order. -----Constraints:----- - The input string contains only alphabetic characters. - The length of the string is between 1 and 100000 inclusive. -----Sample Input----- hAckErInG -----Sample Output----- hckrnAGIE","solution":"def rearrange_string(s): Rearranges the given string such that all lowercase letters come first followed by all uppercase letters, maintaining their original relative order. Parameters: s (str): Input string containing only alphabetic characters. Returns: str: The rearranged string. lower = [char for char in s if char.islower()] upper = [char for char in s if char.isupper()] return \'\'.join(lower + upper)"},{"question":"Frequency Counter Given a string `s`, you need to determine the frequency of each character in the string. Output a dictionary where the keys are the characters and the values are their corresponding frequencies. The characters should be considered case-sensitive, meaning \'A\' and \'a\' are different characters. Function Signature: ```python def char_frequency(s: str) -> dict: pass ``` # Example: ```python char_frequency(\\"Hello, World!\\") ``` Output: ```python { \'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \',\': 1, \' \': 1, \'W\': 1, \'r\': 1, \'d\': 1, \'!\': 1 } ``` # Constraints: - The input string `s` can contain any printable ASCII characters. - The length of the string `s` will be at least 1 and at most 1000 characters. - Ensure that the returned dictionary\'s keys are sorted in the order they appear in the input string.","solution":"def char_frequency(s: str) -> dict: Determines the frequency of each character in the given string. Characters are case-sensitive. frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"In a faraway galaxy, there exists a peculiar data structure called StarGrid, a 2D grid populated with numbers. Our protagonist, Benjol, an intergalactic programmer, needs to determine certain properties of this grid. A subgrid of StarGrid is defined as any contiguous part of the original grid. Two subgrids are said to overlap if they share at least one cell. A subgrid is called special if all the numbers within it are equal. Given a StarGrid, your task is to find out if there are exactly two non-overlapping special subgrids in the grid that cover all the numbers in the grid. -----Input----- The first line of input contains an integer t (1 le t le 100) — the number of test cases. Each test case consists of: The first line contains two integers n and m (1 le n, m le 50) — the dimensions of the grid. The next n lines contain m integers each — the description of the grid. -----Output----- For each test case, print \\"YES\\" if it is possible to split the grid into exactly two non-overlapping special subgrids that cover the entire grid. Otherwise, print \\"NO\\". -----Examples----- Input 3 2 2 1 1 2 2 3 3 1 1 1 1 1 1 1 1 1 3 3 1 2 1 1 2 1 1 2 1 Output YES NO YES -----Note----- For the first test case, it can be split into two special subgrids: the top left corner (all \'1\'s) and the bottom right corner (all \'2\'s), both of which are non-overlapping. For the second test case, it is impossible to split into two non-overlapping special subgrids, as the entire grid is made up of the same number, and such a split would violate the no-overlap rule. For the third test case, one possible split into non-overlapping special subgrids is: the first and last two columns (all \'1\'s) and the middle column (all \'2\'s).","solution":"def can_split_into_two_special_subgrids(t, test_cases): results = [] for case in test_cases: n, m, grid = case[\'n\'], case[\'m\'], case[\'grid\'] if is_possible(n, m, grid): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def is_possible(n, m, grid): first_value = grid[0][0] all_same = True values = set() for row in grid: for val in row: if val != first_value: all_same = False values.add(val) if all_same: return False if len(values) != 2: return False seen = set() for row in grid: for val in row: seen.add(val) if len(seen) == 2: if val == first_value: return False else: return True return False # Example usage: t = 3 test_cases = [ {\'n\': 2, \'m\': 2, \'grid\': [[1, 1], [2, 2]]}, {\'n\': 3, \'m\': 3, \'grid\': [[1, 1, 1], [1, 1, 1], [1, 1, 1]]}, {\'n\': 3, \'m\': 3, \'grid\': [[1, 2, 1], [1, 2, 1], [1, 2, 1]]} ] print(can_split_into_two_special_subgrids(t, test_cases))"},{"question":"A company has decided to partition its employees into two teams for a team-building exercise. Each employee has been assigned a positive integer value representing their skill level. The goal is to divide the employees into two teams such that the absolute difference in the total skill levels of the two teams is minimized. You need to write a program to determine this minimum absolute difference. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of employees. The second line contains n integers, where the i-th integer represents the skill level of the i-th employee. The skill levels are positive integers, and their sum does not exceed 10^4. Output Print one integer — the minimum absolute difference between the total skill levels of the two teams. Examples Input 5 1 6 11 5 11 Output 0 Input 4 3 1 4 2 Output 0","solution":"def min_diff_partition(n, skills): Determine the minimum absolute difference between the total skill levels of two teams when partitioned from the given skills. Args: n (int): Number of employees. skills (list of int): List of integers representing skill levels of the employees. Returns: int: The minimum absolute difference between the total skill levels of the two teams. total_skill = sum(skills) dp = [[False] * (total_skill // 2 + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_skill // 2 + 1): if j >= skills[i - 1]: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - skills[i - 1]] else: dp[i][j] = dp[i - 1][j] half_sum = total_skill // 2 for j in range(half_sum, -1, -1): if dp[n][j]: min_diff = total_skill - 2 * j break return min_diff"},{"question":"The company XYZ is organizing a coding marathon for its employees. The marathon consists of coding sessions, and each session has a different duration in minutes. Given the total number of sessions, the duration of each session, and the maximum number of sessions that can be taken in a day, you need to determine the maximum number of minutes an employee can utilize for coding sessions in one day. You also have to consider that an employee can attend no more than one session at a time. Write a program to find out the maximum possible duration an employee can spend in coding sessions within a day. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers: N (number of coding sessions) and L (maximum number of sessions allowed per day). - The second line contains N space-separated integers, each representing the duration of a coding session in minutes. -----Output:----- For each test case, print the maximum number of minutes that can be utilized in coding sessions in a single day. -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 1000 - 1 leq L leq 100 - 1 leq text{duration of each session} leq 500 -----Sample Input:----- 2 5 3 120 80 140 100 60 4 2 50 40 30 20 -----Sample Output:----- 360 90 -----Explanation:----- Testcase 1: The employee can attend sessions with durations 120, 140, and 100 minutes which totals to 360 minutes. Testcase 2: The employee can attend sessions with durations 50 and 40 minutes which totals to 90 minutes.","solution":"def max_coding_minutes(test_cases): results = [] for case in test_cases: N, L, durations = case # Sort durations in descending order to get maximum durations first sorted_durations = sorted(durations, reverse=True) # Sum the top L durations max_minutes = sum(sorted_durations[:L]) results.append(max_minutes) return results # Example usage if __name__ == \\"__main__\\": test_cases = [ (5, 3, [120, 80, 140, 100, 60]), (4, 2, [50, 40, 30, 20]) ] print(max_coding_minutes(test_cases)) # Output should be [360, 90]"},{"question":"You are working on a software that processes a sequence of events recorded in a log. Each event has a timestamp, and your goal is to filter out events and get the longest sequence of events where each event occurs exactly one minute after the previous one. ------ Input ------ The first line contains an integer T denoting the number of test cases. Each test case is described in two lines: - The first line contains a single integer n denoting the number of events. - The second line contains n space-separated integers, where each integer represents the timestamp of an event in minutes from the start of the log. ------ Output ------ For each test case, output an integer L - the length of the longest sequence of events where each event occurs exactly one minute after the previous one. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ n ≤ 10^{5} 0 ≤ timestamp ≤ 10^{9} The sum of all n across all test cases does not exceed 10^{6} ------ Example ------ Input: 2 5 1 2 3 5 6 4 10 12 13 14 Output: 3 3 ------ Explanation ------ In the first test case, the longest sequence where each event occurs exactly one minute after the previous one is [1, 2, 3]. In the second test case, the longest sequence is [12, 13, 14].","solution":"def longest_sequence_of_minute_intervals(T, test_cases): results = [] for case in test_cases: n, timestamps = case if n <= 1: results.append(n) continue longest_length = 1 current_length = 1 for i in range(1, n): if timestamps[i] == timestamps[i-1] + 1: current_length += 1 longest_length = max(longest_length, current_length) else: current_length = 1 results.append(longest_length) return results"},{"question":"Write a function that takes a list of integers and returns a new list where each element at index `i` is the product of all the integers in the original list except the one at `i`. You should solve this problem without using division. Examples ```python product_except_self([1, 2, 3, 4]) ==> [24, 12, 8, 6] product_except_self([-1, 1, 0, -3, 3]) ==> [0, 0, 9, 0, 0] product_except_self([2, 3, 4, 5]) ==> [60, 40, 30, 24] product_except_self([1, 2, 3, 4, 5, 6, 7, 8]) ==> [40320, 20160, 13440, 10080, 8064, 6720, 5760, 5040] ```","solution":"def product_except_self(nums): Returns a list where each element at index `i` is the product of all the integers in the input list except for the one at `i`. length = len(nums) if length == 0: return [] # Initialize prefix and suffix product arrays and result array prefix = [1] * length suffix = [1] * length result = [1] * length # Fill prefix product array for i in range(1, length): prefix[i] = prefix[i - 1] * nums[i - 1] # Fill suffix product array for i in range(length - 2, -1, -1): suffix[i] = suffix[i + 1] * nums[i + 1] # Fill result array for i in range(length): result[i] = prefix[i] * suffix[i] return result"},{"question":"You are working for an amusement park that features a variety of attractions, each needing power that fluctuates over the course of the day. The park has a set number of electricity kiosks, each supplying a limited amount of power. The kiosks have unique capacities, and there are no two kiosks with the same capacity. The challenge is to determine if you can supply all attractions without exceeding the capacity of any kiosk. Each attraction requires a certain amount of power, and you need to manage power distribution so that you don\'t overload any kiosk. Given the number of attractions and the respective power requirements, can you assure that the total power required by all attractions does not exceed the total available power from the kiosks? -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains two integers n and m (1 le n, m le 1000) — the number of attractions and the number of kiosks, respectively. The second line contains n integers p_1, p_2, dots, p_n (1 le p_i le 10^6) — the power requirements of each attraction. The third line contains m integers c_1, c_2, dots, c_m (1 le c_i le 10^6) — the capacities of each kiosk. It is guaranteed that all c_i are distinct. -----Output----- For each test case, print \\"YES\\" if it is possible to distribute the power such that none of the kiosks are overloaded. Otherwise, print \\"NO\\". -----Examples----- Input 3 3 2 10 20 30 30 30 1 1 2 1 4 5 2 3 4 5 10 20 30 40 50 Output NO NO YES -----Note----- In the first test case, the total power required is 60, but the total available power from kiosks is only 60. However, with only two kiosks, it\'s not possible to distribute the power without overloading a kiosk. In the second test case, the only attraction requires more power than the only kiosk can supply. In the third test case, the total power required is 14, and the total available power from kiosks is 150. It\'s possible to distribute the power without overloading any kiosk.","solution":"def can_distribute_power(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][:2] power_requirements = test_cases[i][2][:n] kiosk_capacities = test_cases[i][2][n:] total_power_required = sum(power_requirements) total_capacity_available = sum(kiosk_capacities) if total_power_required > total_capacity_available: results.append(\\"NO\\") else: power_requirements.sort(reverse=True) kiosk_capacities.sort(reverse=True) possible = True for j in range(n): if j < m: if power_requirements[j] > kiosk_capacities[j]: possible = False break else: possible = False break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: t = 3 test_cases = [ (3, 2, [10, 20, 30, 30, 30]), (1, 1, [2, 1]), (4, 5, [2, 3, 4, 5, 10, 20, 30, 40, 50]) ] print(can_distribute_power(t, test_cases)) # Output should be [\\"NO\\", \\"NO\\", \\"YES\\"]"},{"question":"You are given a sequence of non-negative integers, representing the heights of a series of buildings. Each building\'s width is exactly 1. Your task is to calculate the amount of rainwater that can be trapped between the buildings after it rains. The amount of water trapped above each building is determined by the height of the tallest building to the left and the tallest building to the right, subtracting the height of the building itself. Your task is to find the total amount of trapped water for a given sequence of building heights. -----Input----- The first line contains an integer T, the number of test cases. The next T lines each contain a single test case, which is a sequence of space-separated non-negative integers representing the heights of the buildings. -----Output----- For each test case, output a single line containing the total amount of trapped water. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ Number of buildings in each test case ≤ 1000 - 0 ≤ Height of each building ≤ 1000 -----Example----- Input: 2 0 1 0 2 1 0 1 3 2 1 2 1 4 2 0 3 2 5 Output: 6 9 -----Explanation----- Test case 1: The buildings with heights 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1 can trap 6 units of water. Test case 2: The buildings with heights 4, 2, 0, 3, 2, 5 can trap 9 units of water.","solution":"def trap_rainwater(heights): if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - heights[i] return total_water def calculate_trapped_water(test_cases): results = [] for heights in test_cases: heights = list(map(int, heights.strip().split())) results.append(trap_rainwater(heights)) return results"},{"question":"Petya loves playing games on his mobile phone. One of his favorite games involves solving puzzles on a grid. The grid is represented by an n times m matrix filled with integers. Petya can move from one cell to another only if the number in the target cell is strictly greater than the number in the current cell. He can move horizontally or vertically, but not diagonally. He wants to find the length of the longest increasing path in the grid. For example, for the grid: ``` [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] ``` The longest increasing path would be [1, 2, 6, 9], with a path length of 4. -----Input----- The first line contains two integers n and m (1 le n, m le 200) — the number of rows and columns in the grid. Each of the next n lines contains m integers each, representing the grid elements. Each element in the grid is between 1 and 10^4. -----Output----- Print a single integer — the length of the longest increasing path in the grid. -----Example----- Input 3 3 9 9 4 6 6 8 2 1 1 Output 4","solution":"def longest_increasing_path(grid): if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) cache = [[-1] * m for _ in range(n)] directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Down, Up, Right, Left def dfs(x, y): if cache[x][y] != -1: return cache[x][y] max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] > grid[x][y]: max_length = max(max_length, 1 + dfs(nx, ny)) cache[x][y] = max_length return cache[x][y] max_path_len = 0 for i in range(n): for j in range(m): max_path_len = max(max_path_len, dfs(i, j)) return max_path_len"},{"question":"A bakery is receiving a high demand for their special pastries, but their packaging system is currently inefficient, leading to bottlenecks and delivery delays. They need your help to optimize the packaging process for improved efficiency. The bakery uses boxes of a fixed size to pack pastries. Each box can hold a maximum number of pastries, and every pastry has a fixed weight. The goal is to determine the total weight of the pastries once they are packed into the boxes, and if there are any pastries that could not fit into the boxes. You are given the number of pastries, the maximum number of pastries each box can hold, and the weight of each pastry. Your task is to compute the total weight of the pastries that can be packed and the number of leftover pastries that didn\'t fit into any boxes. -----Input----- The first line contains three integers N, B, and W (1 leq N, B, W leq 10^9) representing the number of pastries, the maximum number of pastries per box, and the weight of each pastry respectively. -----Output----- Output two lines: - The first line contains one integer: the total weight of pastries that can be packed. - The second line contains one integer: the number of leftover pastries that could not be packed into any boxes. -----Examples----- Sample Input 1: 10 3 2 Sample Output 1: 18 1 Sample Input 2: 7 5 5 Sample Output 2: 25 2 Sample Input 3: 15 4 3 Sample Output 3: 36 3","solution":"def packaging_efficiency(N, B, W): Computes the total weight of packed pastries and the number of leftover pastries. Parameters: N (int): Number of pastries B (int): Maximum number of pastries per box W (int): Weight of each pastry Returns: int: Total weight of packed pastries int: Number of leftover pastries total_boxes = N // B leftover_pastries = N % B packed_pastries = N - leftover_pastries total_weight = packed_pastries * W return total_weight, leftover_pastries"},{"question":"An undirected graph `G` has `n` vertices and `m` edges. Each vertex is painted either white or black. You can flip the color of a vertex (changing a white vertex to black and vice versa) in one operation. The goal is to determine the minimum number of flips required to make all vertices in any connected component of the graph the same color. -----Input----- The first line contains two integers `n` and `m` (1 le n le 10^5, 0 le m le 2 cdot 10^5) — the number of vertices and the number of edges in the graph respectively. The second line contains `n` integers, where each integer is either 0 (representing a white vertex) or 1 (representing a black vertex). Each of the next `m` lines contains two integers `u` and `v` (1 le u, v le n), representing an edge between vertex `u` and vertex `v`. -----Output----- Print the minimum number of flips required. -----Examples----- Input 5 3 0 1 0 1 1 1 2 2 3 4 5 Output 1 Input 4 0 1 0 1 0 Output 0 -----Note----- Explanation of the first example: The graph has 5 vertices and 3 edges, and the vertex colors are [0, 1, 0, 1, 1]. After flipping the vertex 2 (changing from 0 to 1), the colors of the first connected component containing vertices 1, 2, and 3 becomes [0, 1, 1]. Thus, only one flip is needed to make all vertices in each connected component have the same color. The second connected component already has all vertices the same color [1, 1].","solution":"def min_flips(n, m, colors, edges): from collections import defaultdict, deque def bfs(start): queue = deque([start]) visited[start] = True component = [] white_count = black_count = 0 while queue: node = queue.popleft() component.append(node) if colors[node] == 0: white_count += 1 else: black_count += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) flips = min(white_count, black_count) return flips # Initialize graph graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) # Initialize visited array visited = [False] * n # Calculates minimum flips for each connected component total_flips = 0 for i in range(n): if not visited[i]: total_flips += bfs(i) return total_flips # Sample inputs for testing purposes: print(min_flips(5, 3, [0, 1, 0, 1, 1], [(1, 2), (2, 3), (4, 5)])) # Expected output: 1 print(min_flips(4, 0, [1, 0, 1, 0], [])) # Expected output: 0"},{"question":"Given an array of integers, the task is to find the length of the longest sequence of contiguous elements that form an increasing order. Example 1: Input: arr[] = {1, 2, 3, 2, 3, 4, 5, 1} Output: 4 Explanation: The longest increasing contiguous subsequence is [2, 3, 4, 5], which has a length of 4. Example 2: Input: arr[] = {5, 1, 2, 3, 0, 1, 2} Output: 3 Explanation: The longest increasing contiguous subsequence is [1, 2, 3], which has a length of 3. Your Task: You do not need to take any input; already handled by the driver code. You need to complete the function `longestIncreasingSubsequence()` that takes an array (arr) and its size (n), and returns the length of the longest sequence of contiguous elements that form an increasing order. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^5 -10^5 ≤ A[i] ≤ 10^5","solution":"def longestIncreasingSubsequence(arr, n): Returns the length of the longest sequence of contiguous elements that form an increasing order. Parameters: arr (List[int]): The input array of integers. n (int): The size of the input array. Returns: int: The length of the longest increasing contiguous subsequence. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if arr[i] > arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are given a rectangular grid with dimensions n rows and m columns. Initially, some cells in the grid are occupied (represented by 1) and some are empty (represented by 0). A move consists of selecting a cell and toggling its state (changing 0 to 1 or 1 to 0). Your task is to determine the minimum number of moves required to make all cells in the grid empty. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100): the number of rows and columns in the grid. Each of the next n lines contains m characters (\'0\' or \'1\') which represent the initial state of a row in the grid. Output Output a single integer — the minimum number of moves required to make all cells in the grid empty, or -1 if it is not possible. Examples Input 3 3 101 011 001 Output 5 Input 2 2 11 11 Output 4 Input 4 4 1111 1111 1111 1111 Output 16 Note In the first sample, one possible sequence of moves could be flipping the 1s in the following order: (1,1), (1,3), (2,2), (2,3), (3,3).","solution":"def min_moves_to_empty_grid(n, m, grid): Determines the minimum number of moves required to make all cells in the grid empty. Parameters: - n (int): number of rows in the grid - m (int): number of columns in the grid - grid (list of list of int): the initial state of the grid Returns: - int: the minimum number of moves required, or -1 if it\'s not possible moves = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': moves += 1 return moves"},{"question":"Given an array of n integers, you need to process m queries. In each query, you are given two integers l and r (1 ≤ l ≤ r ≤ n), and you have to find the number of distinct integers in the subarray from l to r (both inclusive). Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a_1, a_2, ... , a_n (1 ≤ a_i ≤ 10^6) — the elements of the array. The next m lines each contain two integers l and r — the bounds of the subarray for the respective query. Output For each query, output the number of distinct integers in the subarray from l to r. Example Input 5 3 1 2 1 3 2 1 3 2 4 1 5 Output 2 3 3","solution":"def distinct_in_subarray(n, m, array, queries): Returns the number of distinct integers in the subarray for each query. :param n: int - number of elements in the array :param m: int - number of queries :param array: list - list of integers in the array :param queries: list - list of tuples, each containing two integers l and r :return: list - list containing results of each query results = [] # Iterate over each query for l, r in queries: # Extract the subarray from l to r (1 indexed to 0 indexed) subarray = array[l-1:r] # Find the number of distinct elements in the subarray distinct_count = len(set(subarray)) results.append(distinct_count) return results"},{"question":"John has a string S of length N consisting of lowercase English alphabets. He can perform the following operation on the string as many times as he wants: choose an integer k such that 1 ≤ k ≤ N, then reverse the substring S[1 : k] (1-indexed). John wants to know the minimum number of operations required to make the string a palindrome. Note that a string is called a palindrome if it reads the same backward as forward. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. - Each of the next T lines contains a single string S. -----Output----- For each test case, output answer in a single line. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 500 - S consists of lowercase English alphabets only -----Example----- Input: 2 ab aab Output: 1 2 -----Explanation----- Example case 1. You can reverse the first 2 characters to make \\"ab\\" into \\"ba\\", and after one more operation of reversing the full string \\"ba\\" to \\"ab\\", the result is a palindrome \\"ba\\". Therefore, the minimum operations required is 1. Example case 2. You can reverse the first 2 characters to make \\"aab\\" into \\"aba\\". This does not need any further operations since it is already a palindrome. Therefore, the minimum operations required is 2.","solution":"def min_operations_to_palindrome(S): # Function to calculate minimum number of operations to make string palindrome. # The minimum operations required is simply the count of mismatching pairs (S[i] != S[N-i-1]). N = len(S) mismatch_count = 0 for i in range(N // 2): if S[i] != S[N - i - 1]: mismatch_count += 1 return mismatch_count def process_test_cases(T, test_cases): results = [] for i in range(T): S = test_cases[i] results.append(min_operations_to_palindrome(S)) return results # Example usage: # T = 2 # test_cases = [\\"ab\\", \\"aab\\"] # print(process_test_cases(T, test_cases))"},{"question":"Problem Statement DreamCloud Farms wants to automate the irrigation system across their vast fields, making sure every field receives an adequate amount of water. The fields are arranged in a grid and each field has its own irrigation unit. The farm is currently experiencing a problem where some irrigation units fail to operate due to power issues. To optimize the irrigation system, the farm needs to know the maximum number of fields that can be watered consecutively in a straight line (either horizontally, vertically, or diagonally). Given a grid representing the fields where each cell can either be \'0\' (no irrigation) or \'1\' (functional irrigation), your task is to find the longest consecutive segment of \'1\'s in any straight line. # Input - The first line of input contains two integers, `n` and `m` (1 ≤ n, m ≤ 300), representing the number of rows and columns in the grid respectively. - The next `n` lines each contain a string of `m` binary characters (\'0\' or \'1\') representing the irrigation state of each field in the grid. # Output - Output a single integer, the length of the longest consecutive segment of \'1\'s in any straight line (horizontally, vertically, or diagonally). # Sample Input 1 ``` 5 5 10101 11111 01110 11111 10001 ``` # Output for Sample Input 1 ``` 5 ``` # Sample Input 2 ``` 3 3 001 010 100 ``` # Output for Sample Input 2 ``` 1 ``` # Sample Input 3 ``` 4 5 11111 10001 10111 11111 ``` # Output for Sample Input 3 ``` 5 ``` # Explanation In the first sample, the longest consecutive segment of \'1\'s is the entire second row, which has 5 consecutive \'1\'s. Therefore, the answer is 5. In the second sample, no consecutive segment is longer than 1. In the third sample, the longest consecutive segment of \'1\'s is also by taking the entire first row. The diagonal from the top-left to bottom-right in the third sample has 4 consecutive \'1\'s, but it\'s not the longest segment. Notes 1. The grid is guaranteed to contain at least one \'1\'. 2. All calculated segments must be in a straight line horizontally, vertically, or diagonally.","solution":"def longest_consecutive_irrigation(grid): n = len(grid) m = len(grid[0]) def count_max_consecutive_ones(arr): max_count = 0 count = 0 for val in arr: if val == \'1\': count += 1 max_count = max(max_count, count) else: count = 0 return max_count max_length = 0 # Check rows for row in grid: max_length = max(max_length, count_max_consecutive_ones(row)) # Check columns for col in range(m): column_vals = [grid[row][col] for row in range(n)] max_length = max(max_length, count_max_consecutive_ones(column_vals)) # Check diagonals for d in range(-(n-1), m): diag1 = [grid[i][i-d] for i in range(max(0, d), min(n, m+d))] diag2 = [grid[i][d+i] for i in range(max(0, -d), min(n, m-d))] max_length = max(max_length, count_max_consecutive_ones(diag1)) max_length = max(max_length, count_max_consecutive_ones(diag2)) return max_length"},{"question":"As a software engineer, you are tasked with creating an algorithm to sort a list of distinct integers in a non-decreasing order. However, the catch is that you can only use a specific subset of sorting algorithms. The algorithms you are allowed to use are: - Selection Sort - Insertion Sort - Bubble Sort Your task is to implement one of these algorithms to sort the given list of integers. You must also write a function to verify that the output list is actually sorted in non-decreasing order. -----Input:----- The first line of the input contains a single integer N indicating the number of integers in the list. The second line contains N distinct integers separated by spaces. -----Output:----- The first line of the output must contain the sorted list of integers in non-decreasing order. The second line must contain \\"Sorted correctly\\" if the list is sorted correctly, otherwise it should contain \\"Sorting error\\". -----Constraints:----- - 1 leq N leq 1000 -----Sample Input 1:----- 5 64 34 25 12 22 -----Sample Output 1:----- 12 22 25 34 64 Sorted correctly -----Sample Input 2:----- 6 5 1 4 2 8 3 -----Sample Output 2:----- 1 2 3 4 5 8 Sorted correctly","solution":"def bubble_sort(nums): n = len(nums) for i in range(n): for j in range(0, n-i-1): if nums[j] > nums[j+1]: nums[j], nums[j+1] = nums[j+1], nums[j] def is_sorted(nums): return all(nums[i] <= nums[i+1] for i in range(len(nums)-1)) def sort_and_verify(n, nums): bubble_sort(nums) sorted_correctly = \\"Sorted correctly\\" if is_sorted(nums) else \\"Sorting error\\" return nums, sorted_correctly # Example usage: n = 5 nums = [64, 34, 25, 12, 22] sorted_nums, verification = sort_and_verify(n, nums) print(\\" \\".join(map(str, sorted_nums))) print(verification)"},{"question":"Given two arrays, nums1 and nums2, with lengths m and n respectively, shuffled and sorted in ascending order, merge nums2 into nums1 as one sorted array. Assume nums1 has sufficient space (size that is equal to m + n) to hold additional elements from nums2. Example: Input: nums1 = [1, 2, 3, 0, 0, 0], m = 3 nums2 = [2, 5, 6], n = 3 Output: [1, 2, 2, 3, 5, 6] Note: - You must do this in-place without using extra memory. - The initial elements of nums1 that are m should be merged with elements of nums2.","solution":"def merge(nums1, m, nums2, n): Merges two sorted arrays, nums1 and nums2, where nums1 has the space to hold the additional elements from nums2. # Initialize pointers for nums1 and nums2 p1, p2 = m - 1, n - 1 # Pointer for placing elements in the correct position in nums1 p = m + n - 1 # Compare elements from the end of nums1 and nums2 and place the larger one at the end of nums1 while p1 >= 0 and p2 >= 0: if nums1[p1] > nums2[p2]: nums1[p] = nums1[p1] p1 -= 1 else: nums1[p] = nums2[p2] p2 -= 1 p -= 1 # If there are remaining elements in nums2, copy them over nums1[:p2+1] = nums2[:p2+1] return nums1 # return is redundant as the merging is in-place, but useful for testing purposes"},{"question":"Write a function that rotates a given 2D matrix by 90 degrees clockwise. Your function should modify the input matrix in place and not return anything. For example, rotating the following matrix: | 1 2 3 | | 4 5 6 | | 7 8 9 | results in: | 7 4 1 | | 8 5 2 | | 9 6 3 | The input to your function will be a square matrix represented as a list of lists. You can assume the matrix contains only integers and the dimensions of the matrix (NxN) will be positive.","solution":"def rotate(matrix): Rotates the given NxN matrix by 90 degrees clockwise in place. n = len(matrix) # Transpose the matrix (swap rows and columns) for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row to get the 90 degrees rotated matrix for i in range(n): matrix[i].reverse()"},{"question":"You are given a matrix of size MxN and a target number. The task is to find the minimum number of steps required to convert all elements of the matrix to the target number. In one step, you can select any element from the matrix and either increment or decrement it by 1. The goal is to achieve a uniform matrix where every element is equal to the target number. Example 1: Input: Matrix: [[1, 2, 3], [4, 5, 6]] Target: 3 Output: 9 Explanation: In 9 moves (steps), we can convert all elements of the matrix to 3 as follows: 1 -> 3 (2 steps) 2 -> 3 (1 step) 3 -> 3 (0 steps) 4 -> 3 (1 step) 5 -> 3 (2 steps) 6 -> 3 (3 steps) Total steps = 2 + 1 + 0 + 1 + 2 + 3 = 9 Example 2: Input: Matrix: [[7, 8], [9, 10]] Target: 8 Output: 3 Explanation: In 3 moves (steps), we can convert all elements of the matrix to 8 as follows: 7 -> 8 (1 step) 8 -> 8 (0 steps) 9 -> 8 (1 step) 10 -> 8 (2 steps) Total steps = 1 + 0 + 1 + 2 = 4 Your Task: You don\'t need to read input or print anything. Your task is to complete the function minStepsToTarget() which takes a matrix and a target number as inputs and returns the minimum number of steps required to convert the matrix to the target number. Expected Time Complexity: O(M * N) Expected Auxiliary Space: O(1) Constraints: 1 <= M, N <= 100 0 <= element in Matrix <= 10^3 0 <= Target <= 10^3","solution":"def minStepsToTarget(matrix, target): Returns the minimum number of steps required to convert all the elements of the matrix to the target number. steps = 0 for row in matrix: for element in row: steps += abs(element - target) return steps"},{"question":"Manao is now tasked with optimizing the location of research towers on a vast grid. The research towers must be placed at specific points and each tower covers an influence area defined by a square centered at the tower\'s location. Two towers can cooperate if their influence areas overlap or touch. Your job is to determine the maximum number of towers that can form a single cooperative group on the grid. Each tower is described by its coordinates and the length of the side of its influence square. The sides of the square are aligned with the coordinate axes. Input The first line contains a single integer n, the number of research towers. Each of the next n lines describes a research tower with three single-space-separated integers xi, yi, and si, where (xi, yi) denotes the center of the influence square, and si denotes the side length of the square. 1 ≤ n ≤ 1000 -10000 ≤ xi, yi ≤ 10000 1 ≤ si ≤ 10000 Output Print one line containing a single integer, the maximum number of towers that can form a single cooperative group. Example Input 5 0 0 2 3 0 2 1 1 2 4 4 2 5 5 2 Output 3 Explanation In this example, three towers can form a single cooperative group. The first tower at (0, 0) with influence square sides length 2 (covering from (-1, -1) to (1, 1)), the second tower at (3, 0) with square sides length 2 (covering from (2, -1) to (4, 1)), and the third tower at (1, 1) with square sides length 2 (covering from (0, 0) to (2, 2)) overlap with each other directly or indirectly. This allows them to form a cooperative group with a total of 3 towers.","solution":"def calculate_union_find(parents, tower): if parents[tower] != tower: parents[tower] = calculate_union_find(parents, parents[tower]) return parents[tower] def union(parents, rank, tower1, tower2): root1 = calculate_union_find(parents, tower1) root2 = calculate_union_find(parents, tower2) if root1 != root2: if rank[root1] > rank[root2]: parents[root2] = root1 elif rank[root1] < rank[root2]: parents[root1] = root2 else: parents[root2] = root1 rank[root1] += 1 def max_cooperative_group(n, towers): parents = list(range(n)) rank = [0] * n def are_connected(tower1, tower2): x1, y1, s1 = towers[tower1] x2, y2, s2 = towers[tower2] half1, half2 = s1 / 2, s2 / 2 left1, right1 = x1 - half1, x1 + half1 left2, right2 = x2 - half2, x2 + half2 bottom1, top1 = y1 - half1, y1 + half1 bottom2, top2 = y2 - half2, y2 + half2 return not (right1 < left2 or right2 < left1 or top1 < bottom2 or top2 < bottom1) for i in range(n): for j in range(i + 1, n): if are_connected(i, j): union(parents, rank, i, j) groups = {} for i in range(n): root = calculate_union_find(parents, i) if root in groups: groups[root] += 1 else: groups[root] = 1 return max(groups.values()) # Example test function to print the result def main(): n = 5 towers = [ (0, 0, 2), (3, 0, 2), (1, 1, 2), (4, 4, 2), (5, 5, 2) ] print(max_cooperative_group(n, towers)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a 2D matrix of integers where each cell represents a block. You are standing at the top-left corner of the matrix (cell [0,0]) and need to reach the bottom-right corner of the matrix (cell [n-1, m-1]). You can move right, left, up, or down, but only through cells that have a value of 1 (representing passable blocks). Write a function to find the minimum number of steps required to reach the bottom-right corner. If it is impossible to reach the bottom-right corner, return -1. Example 1: Input: matrix = [ [1, 0, 0], [1, 1, 0], [0, 1, 1] ] Output: 4 Explanation: The shortest path is: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2), total 4 steps. Example 2: Input: matrix = [ [1, 0], [0, 1] ] Output: -1 Explanation: There\'s no path to reach the bottom-right corner. Your Task: You do not need to read input or print anything. Your task is to complete the function minSteps() which takes a 2D matrix as input parameter and returns the minimum number of steps to reach the bottom-right corner or -1 if it is not possible. Expected Time Complexity: O(n*m) Expected Auxiliary Space: O(n*m) Constraints: 1 <= n, m <= 500 0 <= matrix[i][j] <= 1","solution":"from collections import deque def minSteps(matrix): Returns the minimum number of steps to reach the bottom-right corner of the matrix, or -1 if it is impossible. if not matrix or matrix[0][0] == 0 or matrix[-1][-1] == 0: return -1 n = len(matrix) m = len(matrix[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == n - 1 and y == m - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and matrix[nx][ny] == 1 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given an array of integers `candies` where `candies[i]` represents the number of candies in the i-th pile. You want to distribute these candies to a group of children such that each child gets exactly the same number of candies and each child gets candies from exactly one pile. Determine if it is possible to distribute all the candies equally among the children. If it is possible, return the maximum number of children that can receive candies equally. If not, return 0. Examples: Example 1: Input: [4, 8, 12] Output: 4 Explanation: Each child can get 4 candies as we can distribute 4 candies from each pile. Example 2: Input: [5, 7, 11] Output: 1 Explanation: We can distribute candies so that only 1 child gets all candies because no number greater than 1 divides all three piles equally. Example 3: Input: [3, 6, 9, 12] Output: 3 Explanation: Each child can get 3 candies as we can distribute 3 candies from each of the piles. Note: 1 <= candies.length <= 100 1 <= candies[i] <= 10^6","solution":"import math from functools import reduce def max_equal_candies(candies): Returns the maximum number of children that can receive candies equally from the piles of candies. # Compute the greatest common divisor (GCD) of all pile sizes def gcd(x, y): while y: x, y = y, x % y return x overall_gcd = reduce(gcd, candies) return overall_gcd"},{"question":"A company organizes a gift exchange event for its employees. Each employee who participates in the event will both give and receive exactly one gift. The organizer wants to make sure that no employee gives a gift to themselves and that no two employees give gifts to each other (i.e., if employee A gives a gift to employee B, then employee B should give a gift to someone other than employee A). Given the number of employees N and a list of N names representing the employees, determine the number of valid ways to assign the gift exchange such that the above conditions are met. Input: Input begins with an integer T≤50, the number of test cases. Each test case consists of two lines. The first line of each test case contains a positive integer N≤20, the number of employees. The second line contains N space-separated strings, each representing the name of an employee. Names are unique and contain only lowercase letters, with a length of up to 10 characters. Output: For each test case, output on a line the number of valid ways to assign the gift exchange. Sample input: 2 3 alice bob charlie 4 anna brian charlotte david Sample output: 2 9","solution":"from math import factorial def derangements(N): Calculate the number of derangements (permutations where no element appears in its original position) for a given N using a direct calculation formula. if N == 0: return 1 if N == 1: return 0 der = [0] * (N + 1) der[0] = 1 der[1] = 0 for i in range(2, N + 1): der[i] = (i - 1) * (der[i - 1] + der[i - 2]) return der[N] def gift_exchange_ways(test_cases): results = [] for N, employees in test_cases: results.append(derangements(N)) return results"},{"question":"Given an array of integers, you are to process a series of range and single value update operations, and for each such operation, print the updated array. Input: The first line contains two integers, `N` (the length of the array) and `Q` (the number of operations). The second line contains `N` space-separated integers representing the initial array. Each of the next `Q` lines contains an operation. Each operation is in one of the following formats: - `1 x y` (where 1 denotes a single value update): Set the value at index `x` to `y`. - `2 x y k` (where 2 denotes a range update): Add `k` to each element in the range from index `x` to `y`. Output: After processing each operation, output the updated array as a space-separated list of integers in a single line. Constraints: - `1 ≤ N ≤ 10^5` - `1 ≤ Q ≤ 10^5` - `1 ≤ x, y ≤ N` - `−10^9 ≤ initial array elements, y, k ≤ 10^9` - Note: Indexes are 1-based in the operations. Sample Input: ``` 5 3 2 3 5 7 11 1 3 6 2 1 4 2 1 5 -1 ``` Sample Output: ``` 2 3 6 7 11 4 5 8 9 11 4 5 8 9 -1 ``` Explanation: - The initial array is `[2, 3, 5, 7, 11]`. - After the first operation `1 3 6`, the array becomes `[2, 3, 6, 7, 11]`. - After the second operation `2 1 4 2`, each element from index 1 to 4 is incremented by 2, resulting in `[4, 5, 8, 9, 11]`. - After the third operation `1 5 -1`, the 5th element of the array is set to `-1`, resulting in `[4, 5, 8, 9, -1]`.","solution":"def process_operations(N, Q, array, operations): result = [] for op in operations: values = op.split() if values[0] == \'1\': x = int(values[1]) - 1 y = int(values[2]) array[x] = y elif values[0] == \'2\': x = int(values[1]) - 1 y = int(values[2]) - 1 k = int(values[3]) for i in range(x, y + 1): array[i] += k result.append(\\" \\".join(map(str, array))) return result"},{"question":"Implement a function that takes a list of integers and returns the second largest unique number in the list. If no such number exists, return `None`. **Function Signature:** `def second_largest_unique(numbers: List[int]) -> Union[int, None]` **Input:** - A list of integers which can be both positive or negative. **Output:** - An integer which is the second largest unique number, or `None` if it does not exist. **Example:** ```python second_largest_unique([4, 1, 2, 3, 4, 4]) # returns 3 second_largest_unique([4]) # returns None second_largest_unique([4, 4, 4]) # returns None ```","solution":"from typing import List, Union def second_largest_unique(numbers: List[int]) -> Union[int, None]: unique_numbers = list(set(numbers)) # remove duplicates if len(unique_numbers) < 2: # if less than 2 unique numbers, return None return None unique_numbers.sort(reverse=True) # sort in descending order return unique_numbers[1] # return the second largest number"},{"question":"Write a function that takes an integer array as input and returns the product of all the elements in the array except the element at the current index, without using division. SAMPLE INPUT [1, 2, 3, 4] SAMPLE OUTPUT [24, 12, 8, 6] Explanation For the input array [1, 2, 3, 4], the output array would be: - The product of all elements except 1 is 2 * 3 * 4 = 24 - The product of all elements except 2 is 1 * 3 * 4 = 12 - The product of all elements except 3 is 1 * 2 * 4 = 8 - The product of all elements except 4 is 1 * 2 * 3 = 6 Thus, the resulting array is [24, 12, 8, 6].","solution":"def product_except_self(nums): Returns an array where each element is the product of all elements in the input array except the one at the current index. Parameters: nums (list of int): The input list of integers. Returns: list of int: The resulting list where each element is the product of all elements except the one at the corresponding index. n = len(nums) if n == 0: return [] # Initialize the result array result = [1] * n # Calculate product of elements to the left of each index left_product = 1 for i in range(n): result[i] *= left_product left_product *= nums[i] # Calculate product of elements to the right of each index right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Given an integer array nums, write a function to return all the unique triplets [nums[i], nums[j], nums[k]] such that i, j, and k are different indices and nums[i] + nums[j] + nums[k] == 0. Example 1: Input: nums = [-1, 0, 1, 2, -1, -4] Output: [[-1, -1, 2], [-1, 0, 1]] Example 2: Input: nums = [] Output: [] Example 3: Input: nums = [0] Output: [] Note: The solution set must not contain duplicate triplets.","solution":"def three_sum(nums): Returns all unique triplets in the list that sum up to zero. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue # Skip duplicate elements for the first number left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total < 0: left += 1 elif total > 0: right -= 1 else: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 # Skip duplicate elements for the second number while left < right and nums[right] == nums[right - 1]: right -= 1 # Skip duplicate elements for the third number left += 1 right -= 1 return result"},{"question":"Write a function that takes a list of integers and returns a list with the values doubled. If the original list contains zero or is empty, return an empty list. Your function should handle lists of any length and content efficiently.","solution":"def double_values(lst): Takes a list of integers and returns a list with the values doubled. If the original list contains zero or is empty, returns an empty list. if not lst or 0 in lst: return [] return [x * 2 for x in lst]"},{"question":"Given an integer array of size n, find the length of the longest subsequence which is first strictly increasing and then strictly decreasing. Example 1: Input: n = 6, arr[] = {1, 4, 2, 8, 3, 2} Output: 5 Explanation: The longest subsequence which is first increasing and then decreasing is {1, 4, 8, 3, 2} Example 2: Input: n = 5, arr[] = {5, 1, 3, 2, 1} Output: 4 Explanation: The longest subsequence which is first increasing and then decreasing is {1, 3, 2, 1} Your Task: You don\'t need to read input or print anything. Complete the function longestBitonicSubsequence() which takes n and array arr as input parameters and returns the length of the longest bitonic subsequence. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N) Constraints: 1 ≤ n ≤ 10^3 1 ≤ arr[i] ≤ 10^5","solution":"def longestBitonicSubsequence(n, arr): if n == 0: return 0 # dp1[i] will be the length of LIS ending at index i dp1 = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp1[i] = max(dp1[i], dp1[j] + 1) # dp2[i] will be the length of LDS starting from index i dp2 = [1] * n for i in range(n-2, -1, -1): for j in range(i+1, n): if arr[i] > arr[j]: dp2[i] = max(dp2[i], dp2[j] + 1) # Find the longest bitonic subsequence max_length = 0 for i in range(n): max_length = max(max_length, dp1[i] + dp2[i] - 1) return max_length"},{"question":"Read problem statements in Mandarin Chinese and Russian. Given two strings A and B, your task is to find the minimum number of operations required to convert string A into string B. The only allowed operations are: 1. Insert a character 2. Remove a character 3. Replace a character The \\"edit distance\\" between two strings is the minimum number of operations required to transform one string into the other. ------ Input ------ The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the lengths of strings A and B respectively. The second line contains the string A of length n. The third line contains the string B of length m. ------ Output ------ Output a single line containing the minimum number of operations needed to transform A into B. ------ Sample Input 1 ------ 4 3 abcd acd ------ Sample Output 1 ------ 1 ------ Explanation 1 ------ One possible series of operations to transform \\"abcd\\" into \\"acd\\" is to remove \'b\'. Therefore, the minimum number of operations is 1. ------ Sample Input 2 ------ 5 4 abcde abce ------ Sample Output 2 ------ 1 ------ Explanation 2 ------ One possible series of operations to transform \\"abcde\\" into \\"abce\\" is to remove \'d\'. Therefore, the minimum number of operations is 1.","solution":"def min_edit_distance(n, m, A, B): dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1])# Replace return dp[n][m]"},{"question":"You are tasked with finding a sequence of integers based on the following rules. Let\'s call this sequence S. 1. The sequence starts with a given integer n (1 ≤ n ≤ 1000). 2. The next element in the sequence is calculated by summing the digits of the previous element. 3. The sequence stops when it reaches a single-digit number (0-9). Input The input contains a single integer n (1 ≤ n ≤ 1000). Output Output a single integer, representing the final single-digit value reached. Examples Input 5432 Output 5 Input 29 Output 2 Input 55 Output 1 Input 1000 Output 1 Note In the first test case, the sequence begins at 5432: - The sum of the digits of 5432 is 5+4+3+2 = 14. - The sum of the digits of 14 is 1+4 = 5. - 5 is a single-digit number. In the second test case, the sequence begins at 29: - The sum of the digits of 29 is 2+9 = 11. - The sum of the digits of 11 is 1+1 = 2. - 2 is a single-digit number. In the third test case, the sequence begins at 55: - The sum of the digits of 55 is 5+5 = 10. - The sum of the digits of 10 is 1+0 = 1. - 1 is a single-digit number. In the fourth test case, the sequence begins at 1000: - The sum of the digits of 1000 is 1+0+0+0 = 1. - 1 is a single-digit number.","solution":"def single_digit(n): Finds the final single-digit value by repeatedly summing the digits of the number. while n >= 10: n = sum(int(d) for d in str(n)) return n"},{"question":"Implement a function that takes a string containing a mathematical expression and evaluates it. The expression may contain integers, parentheses, and the operators +, -, *, and /. Your function should handle operator precedence and parentheses correctly. -----Constraints----- - The input string will be a valid mathematical expression. - The input string will contain no variables, only integers. - The length of the input string will not exceed 500 characters. - The division operator (/) represents integer division. -----Input----- Input is given from Standard Input in the following format: expression -----Output----- Print the evaluated result of the expression. -----Sample Input----- 3 + (2 * 2) - (5 / 2) -----Sample Output----- 5 Explanation: The evaluated result of the expression is: 3 + (2 * 2) - (5 // 2) = 3 + 4 - 2 = 5","solution":"def evaluate_expression(expression): def calc(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left // right) def precedence(operator): if operator in (\'+\', \'-\'): return 1 if operator in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i, n = 0, len(expression) while i < n: if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i] == \')\': while operators and operators[-1] != \'(\': calc(operators, values) operators.pop() # Pop the \'(\' elif expression[i].isdigit(): val = 0 while i < n and expression[i].isdigit(): val = val * 10 + int(expression[i]) i += 1 values.append(val) i -= 1 # Adjust for the increment at the end of the loop else: # operator while operators and precedence(operators[-1]) >= precedence(expression[i]): calc(operators, values) operators.append(expression[i]) i += 1 while operators: calc(operators, values) return values[0]"},{"question":"There is a long and narrow park that runs along a straight railroad. The park is planted with trees at regular intervals forming an evenly spaced row. Each tree grows different species and offers different amount of shade. It\'s given that each tree in the park is planted at an integer position from position 0 up to position m (inclusive). Since the park is narrow, people can walk along just a single line, following the railroad straight through the park from position 0 to position m. The amount of shade available at any given position on the line is the same as the shade offered by the tree planted at that position, no matter who planted it or how big it is. The total shade offered along the railway can be described by an array `shade` where `shade[i]` indicates the amount of shade on the position `i`. There is a gardener who wants to know the maximum amount of shade that can be experienced in any contiguous subarray of length k. Your task is to help the gardener find the maximum possible shade in such a subarray. # Input The first line contains two integers, `m` (1 <= m <= 100000) and `k` (1 <= k <= m + 1) — the total length of the park (number of positions along the railway) and the length of the contiguous subarray being considered. The second line contains `m + 1` integers where the i-th integer denotes `shade[i]` — the shade offered at the i-th position (0 <= `shade[i]` <= 1000). # Output Print a single integer — the maximum possible shade in any contiguous subarray of length `k`. # Example Input 7 3 1 2 3 4 5 6 7 8 Output 18 # Explanation In the given example, consider `shade = [1, 2, 3, 4, 5, 6, 7, 8]` and `k = 3`. The maximum shade that can be experienced in a contiguous subarray of length 3 is at positions 5 to 7 (subarray `[6, 7, 8]`), resulting in a sum of 21 (i.e., 6 + 7 + 8).","solution":"def maximum_shade(m, k, shade): Returns the maximum possible shade in any contiguous subarray of length k. Parameters: - m: an integer, total positions along the railway - k: an integer, the length of the contiguous subarray - shade: a list of integers, the amount of shade at each position Returns: - An integer, the maximum shade in any contiguous subarray of length k. max_sum = current_sum = sum(shade[:k]) for i in range(k, m + 1): current_sum += shade[i] - shade[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are managing a warehouse that contains N different types of products, each having a certain quantity. There are also M requests, where each request either adds a specified quantity to a certain type of product or removes a specified quantity from a certain type of product. Your task is to process these requests in order and report the quantity of a specified product after each request. -----Constraints----- - All values in input are integers. - 1 leq N leq 10^5 - 1 leq M leq 10^5 - 1 leq type_id leq N - 1 leq quantity leq 10^4 - 0 leq initial_quantity leq 10^4 -----Input----- Input is given from Standard Input in the following format: N M initial_quantity_1 initial_quantity_2 ... initial_quantity_N operation_1 operation_2 vdots operation_M Each operation is given in one of the following formats: - \\"add type_id quantity\\" - \\"remove type_id quantity\\" - \\"report type_id\\" -----Output----- For each \\"report type_id\\" operation, print the quantity of the specified product. -----Sample Input----- 5 6 10 20 30 40 50 add 3 15 report 3 remove 2 5 report 2 add 5 20 report 5 -----Sample Output----- 45 15 70 For example, after processing the first operation \\"add 3 15\\", the quantity of product 3 becomes 45. The second operation \\"report 3\\" then outputs 45.","solution":"def warehouse_operations(N, M, initial_quantities, operations): quantities = initial_quantities[:] results = [] for operation in operations: parts = operation.split() op_type = parts[0] type_id = int(parts[1]) - 1 if op_type == \\"add\\": quantity = int(parts[2]) quantities[type_id] += quantity elif op_type == \\"remove\\": quantity = int(parts[2]) quantities[type_id] -= quantity elif op_type == \\"report\\": results.append(quantities[type_id]) return results"},{"question":"Peter is fascinated by a certain numerical pattern he discovered. This pattern contains sequences of numbers, each starting from a given positive integer. Each next number in the sequence is calculated by the following rules: - If the number is even, divide it by 2. - If the number is odd, multiply it by 3 and then add 1. Peter calls a sequence \\"terminating\\" if it eventually reaches the number 1, regardless of how large the numbers grow during the sequence. He noticed that not all starting numbers below a given integer lead to terminating sequences, and he wants to identify which numbers do. Your task is to write a program to determine which numbers below a given integer n have terminating sequences. # Input The input consists of a single integer n (1 ≤ n ≤ 1000000). # Output Print all the starting integers less than n that have terminating sequences, each on a new line in ascending order. # Examples Input 10 Output 1 2 3 4 5 6 7 8 9 Input 15 Output 1 2 3 4 5 6 7 8 9 10 11 12 13","solution":"def has_terminating_sequence(n): Returns True if the sequence starting from n terminates at 1, False otherwise. seen = set() while n != 1: if n in seen: return False seen.add(n) if n % 2 == 0: n //= 2 else: n = 3 * n + 1 return True def find_terminating_sequences(n): Returns a list of numbers below n that have terminating sequences. terminating_numbers = [] for i in range(1, n): if has_terminating_sequence(i): terminating_numbers.append(i) return terminating_numbers"},{"question":"There are k employees in a company, numbered from 1 to k. Each employee i has a productivity pi, which is a positive integer. The employees can be divided into teams for a project. The rules for forming a team are: 1. Each team must have exactly three employees. 2. The productivity of a team is the sum of the productivity of its three members. Your task is to handle several queries about these employees and their teams. There are two types of queries: \\"P x y\\": The productivity of employee x is changed to y. \\"T\\": Form a team with the highest possible total productivity and output this maximum total productivity. Notice that each time you calculate the productivity of a team, the same employee may appear in different teams, but each team must consist of three different employees. Input The first line contains two integers k and q (3 ≤ k ≤ 1000, 1 ≤ q ≤ 1000) separated by a space. The second line contains k integers pi (1 ≤ pi ≤ 1000) representing the initial productivity of each employee. The next q lines represent queries, each with the format \\"P x y\\" (1 ≤ x ≤ k, 1 ≤ y ≤ 1000) or \\"T\\". Output For each query of type \\"T\\", output the maximum total productivity of a team that can be formed. SAMPLE INPUT 5 3 5 3 8 2 7 T P 2 10 T SAMPLE OUTPUT 20 25","solution":"def process_queries(k, q, productivities, queries): import heapq def max_team_productivity(prod_list): # Get the largest three elements in the list largest_three = heapq.nlargest(3, prod_list) return sum(largest_three) results = [] for query in queries: if query[0] == \'T\': results.append(max_team_productivity(productivities)) elif query[0] == \'P\': index = int(query[1]) - 1 new_prod = int(query[2]) productivities[index] = new_prod return results # Example usage with the sample input k = 5 q = 3 productivities = [5, 3, 8, 2, 7] queries = [ [\\"T\\"], [\\"P\\", \\"2\\", \\"10\\"], [\\"T\\"] ] print(process_queries(k, q, productivities, queries)) # Output should be [20, 25]"},{"question":"Given an array of integers, implement a function that finds the length of the longest subsequence such that all elements of the subsequence are sorted in an increasing order. This problem is known as finding the length of the Longest Increasing Subsequence (LIS). ------ Input ------ The first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N, denoting the size of the array. The second line of each test case contains N space-separated integers representing the array elements. ------ Output ------ For each test case output on a separate line the length of the Longest Increasing Subsequence. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ A[i] ≤ 10000 ----- Sample Input 1 ------ 1 6 10 22 9 33 21 50 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ The longest increasing subsequence is [10, 22, 33, 50], which has a length of 4.","solution":"def length_of_lis(arr): Returns the length of the longest increasing subsequence in the array. if not arr: return 0 dp = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for case in test_cases: N = case[0] arr = case[1] results.append(length_of_lis(arr)) return results # Example: Processing input def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((N, arr)) index += 2 return process_test_cases(test_cases)"},{"question":"Alice is organizing a bouquet competition and wants to impress the judges with the most beautiful arrangements. She has an array of flowers, where each flower has a particular height and color. She needs to select some flowers such that they form a subsequence with strictly increasing heights and alternating colors. Your task is to determine the maximum number of flowers that Alice can select. -----Input----- The input begins with the number of test cases T. Each test case consists of two lines: 1. An integer N, the number of flowers. 2. N pairs of integers where each pair consists of (height, color), representing the height and color of the flower. -----Output----- For each case, output the maximum number of flowers Alice can select. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 1000 - 1 ≤ height ≤ 10^9 - 1 ≤ color ≤ 1000 -----Example----- Input: 2 5 2 1 3 2 4 1 5 2 6 1 6 1 1 3 2 2 1 5 2 4 1 6 2 Output: 5 4 -----Explanation----- Example 1: Alice can select flowers with heights [2, 3, 4, 5, 6] with colors alternating between 1 and 2. Example 2: Alice can select flowers with heights [1, 3, 5, 6], where the heights are strictly increasing and colors alternate.","solution":"def max_flowers_selected(T, test_cases): results = [] for test_case in test_cases: N = test_case[0] flowers = test_case[1] # Sort flowers based on height first flowers.sort() # Initialize the dp array dp = [1] * N for i in range(1, N): for j in range(i): if flowers[i][0] > flowers[j][0] and flowers[i][1] != flowers[j][1]: dp[i] = max(dp[i], dp[j] + 1) results.append(max(dp)) return results"},{"question":"You have been given a list of transaction records. Each record contains an identifier of the account holder, the transaction type (either deposit or withdrawal), and the amount involved in the transaction. Your task is to write a program to determine the final balance of each account holder. If the balance of any account holder becomes negative at any point due to withdrawals exceeding deposits, that account will be considered invalid, and you should not include it in the output. Input: - First line contains an integer T, the number of transactions. - Each of the following T lines contains a string Ai (the account holder\'s identifier), a string Ti (the transaction type, either \'deposit\' or \'withdrawal\'), and an integer Ci (the amount involved in the transaction). Output: - For each valid account holder, output their identifier and final balance in the format \\"Ai final_balance\\", one per line in any order. Constraints: 1 ≤ T ≤ 10^5 1 ≤ Ci ≤ 10^6 The identifier is a string of lowercase English letters having length between 1 and 10. Example: Input: 6 alice deposit 1000 bob deposit 500 alice withdrawal 300 alice deposit 200 bob withdrawal 600 carol deposit 700 Output: alice 900 carol 700 Explanation: 1. alice’s transactions: deposit 1000, withdrawal 300, deposit 200 -> final balance = 1000 - 300 + 200 = 900 2. bob’s transactions: deposit 500, withdrawal 600 -> invalid because balance becomes negative 3. carol’s transaction: deposit 700 -> final balance = 700 Hence, only alice and carol’s accounts are valid and their final balances are shown in the output.","solution":"def calculate_final_balances(transactions): from collections import defaultdict balances = defaultdict(int) invalid_accounts = set() for account, trans_type, amount in transactions: if account in invalid_accounts: continue # Skip processing if the account is already invalid if trans_type == \'deposit\': balances[account] += amount elif trans_type == \'withdrawal\': balances[account] -= amount if balances[account] < 0: invalid_accounts.add(account) del balances[account] # Remove the account as it\'s invalid return {account: balance for account, balance in balances.items()} # Parameters parsing and function call for the given transactions def process_transactions_input(T, transaction_list): transactions = [tuple(transaction.split()) for transaction in transaction_list] transactions = [(acc, trans, int(amt)) for acc, trans, amt in transactions] return calculate_final_balances(transactions)"},{"question":"You are given a binary string S of length N. A binary string is a string consisting of characters \'0\' and \'1\' only. Your task is to determine the maximum size of a contiguous subsequence which has an equal number of \'0\'s and \'1\'s. Input The first line of the input contains an integer T - the number of test cases. Then, T lines follow. Each line consists of a binary string S. Output For each test case, output a single integer representing the maximum size of a contiguous subsequence with an equal number of \'0\'s and \'1\'s. Constraints • 1 ≤ T ≤ 100 • 1 ≤ N ≤ 10000 SAMPLE INPUT 2 1100011 10101 SAMPLE OUTPUT 6 4 Explanation: In the first test case, the substring \\"110011\\" (from index 1 to 6) has 3 \'0\'s and 3 \'1\'s, hence the maximum size is 6. In the second test case, the substring \\"1010\\" (from index 1 to 4) has 2 \'0\'s and 2 \'1\'s, hence the maximum size is 4.","solution":"def max_equal_subsequence_length(S): Returns the maximum size of a contiguous subsequence which has an equal number of \'0\'s and \'1\'s. n = len(S) max_len = 0 count = 0 count_map = {0: -1} for i in range(n): count += 1 if S[i] == \'1\' else -1 if count in count_map: max_len = max(max_len, i - count_map[count]) else: count_map[count] = i return max_len def main(input_lines): T = int(input_lines[0]) results = [] for i in range(1, T + 1): S = input_lines[i] results.append(max_equal_subsequence_length(S)) return results"},{"question":"Given a grid of dimensions N times M consisting of only characters \'#\' and \'.\', where \'#\' represents an obstacle and \'.\' represents free space. You have to find the largest square (sub-grid) of free space in the given grid. A square of free space means a sub-grid of \'.\' characters that form a perfect square without any \'#\' characters in it. You need to return the side length of the largest square of free space. ------ Input ------ The first line contains two space-separated integers N and M denoting the dimensions of the grid. The next N lines contain M characters each representing the grid. ------ Output ------ Print a single integer denoting the side length of the largest square of free space. ------ Constraints ------ 1 le N, M le 1000 ----- Sample Input 1 ------ 5 5 ..... ..#.. .#... ..... ..... ----- Sample Output 1 ------ 3 ----- Explanation 1 ------ In the given grid, the largest square of free space has a side length of 3. The sub-grid can be obtained from the top left corner of the grid (excluding the blocked cell in the middle), specifically from the following positions: (1,1) to (3,3). ----- Sample Input 2 ------ 3 4 #..# #..# ----- Sample Output 2 ------ 2 ----- Explanation 2 ------ In the given grid, the largest square of free space has a side length of 2. The sub-grid can be obtained from the bottom right corner of the grid, specifically from the following positions: (2,2) to (3,3). Subtask 1 (10 points): N, M le 5 Subtask 2 (20 points): N, M le 100 Subtask 3 (70 points): original constraints","solution":"def largest_square_of_free_space(grid): N = len(grid) M = len(grid[0]) # Create a dp table with extra borders set to 0 dp = [[0] * (M + 1) for _ in range(N + 1)] max_side = 0 # Fill the dp table for i in range(1, N + 1): for j in range(1, M + 1): if grid[i-1][j-1] == \'.\': dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"Given an integer array `arr[]` of size `N`, write a program to find the length of the longest subsequence such that all elements of the subsequence are sorted in strictly increasing order. You need to output the length of this subsequence. ------ Input ------ The first line of the input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. The first line of each test case contains an integer `N` denoting the size of the array. The second line contains `N` space-separated integers `arr[i]` representing the elements of the array. ------ Output ------ For each test case, print a single line containing one integer: the length of the longest strictly increasing subsequence. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^3 1 ≤ arr[i] ≤ 10^9 ------ Sample Input 1 ------ 2 5 10 22 9 33 21 7 3 10 2 1 20 21 22 ------ Sample Output 1 ------ 3 4 ------ Explanation 1 ------ Example case 1: The longest strictly increasing subsequence is [10, 22, 33] with length 3. Example case 2: The longest strictly increasing subsequence is [3, 10, 20, 21, 22] with length 4.","solution":"def length_of_LIS(arr): Finds the length of the longest increasing subsequence in the array. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize LIS values for all indexes to 1 # Compute optimized LIS values in bottom up manner for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Pick the maximum of all LIS values return max(lis) def process_test_cases(T, test_cases): results = [] for case in test_cases: N, arr = case results.append(length_of_LIS(arr)) return results"},{"question":"You are given an array of n integers. The array is called *peak*, and its elements are arranged in non-decreasing order initially, reach a maximum or \\"peak\\" value at some index, and then decrease progressively. Your task is to determine whether the array indeed follows this pattern and identify the peak element. For example, for an array *peak = [1, 3, 7, 8, 7, 4, 2]*, the peak element is 8. Conditions to be met: - The array length (n) is at least 3. - There exists an index i (1 ≤ i < n-1) such that: - peak[0] ≤ peak[1] ≤ ... ≤ peak[i] - peak[i] > peak[i + 1] > peak[i + 2] > ... > peak[n - 1] Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case contains: - The first line contains a single integer n (3 ≤ n ≤ 100) — the number of elements in the array. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^3) — the elements of the array \\"peak\\". Output For each test case, print \\"YES\\" if the array follows the peak pattern, followed by the peak element. If the array does not follow this pattern, print \\"NO\\". Example Input 3 7 1 3 7 8 7 4 2 5 2 4 6 4 2 5 1 2 3 4 5 Output YES 8 YES 6 NO Note In the first test case: - The array forms a peak with the element 8. In the second test case: - The array forms a peak with the element 6. In the third test case: - The array [1, 2, 3, 4, 5] does not follow the peak pattern as it does not have a descending part.","solution":"def is_peak_array(n, array): Determines if the array follows the described peak pattern and finds the peak element. Returns a tuple (boolean, peak_element) where boolean is True if it follows the pattern, else False. if n < 3: return (False, ) increasing = True peak_element = None peak_index = -1 for i in range(1, n): if increasing: if array[i] < array[i-1]: increasing = False peak_element = array[i-1] peak_index = i - 1 elif array[i] == array[i-1]: return (False, ) else: if array[i] >= array[i-1]: return (False, ) if increasing or peak_index == n - 1: return (False, ) return (True, peak_element) def process_test_cases(t, cases): results = [] for case in cases: n, array = case result = is_peak_array(n, array) if result[0]: results.append(f\\"YES {result[1]}\\") else: results.append(\\"NO\\") return results"},{"question":"Imagine you are playing a number guessing game with an algorithm. The game chooses a random number from 1 to 1000, and you have to guess what it is. Each time you guess, the game will tell you if your guess is too high, too low, or correct. You want to write a function that will help you guess the number in the fewest number of attempts possible by always making the optimal guess. Write a function `guess_number` which runs the game and determines the number in the fewest number of attempts. The function should simulate both the guessing and the checking of the number based on feedback and implement a binary search strategy to minimize the guessing attempts. # Input: The input to the function should be a list of tuples (feedback, number). The feedback can be \'too low\', \'too high\', or \'correct\'. The number is the game\'s feedback for what the actual number is compared to the guess. The input list will guide the guessing strategy and contain the actual number to be guessed. # Output: The function should return the guessed number when feedback is \'correct\'. # Function Signature: ```python def guess_number(feedback_list: [(str, int)]) -> int: pass ``` # Example Input 1: ```python feedback_list = [(\'too low\', 1), (\'too high\', 1000), (\'too low\', 500), (\'too high\', 750), (\'correct\', 625)] ``` # Example Output 1: ```python 625 ``` # Explanation: 1. Start guessing in the middle (500). 2. The feedback is \'too low\', so guess higher (750). 3. The feedback is \'too high\', so guess lower (625). 4. The feedback is \'correct\', so the guess is correct (625).","solution":"def guess_number(feedback_list): Determines the number in the fewest number of attempts by using a binary search strategy. Params: - feedback_list (list of tuples (str, int)): Feedback received after each guess. The feedback is a string (\'too low\', \'too high\', \'correct\') and the number is the guess made. Returns: - int: The correct guessed number based on feedback. low, high = 1, 1000 for feedback, guess in feedback_list: if feedback == \'too low\': low = guess + 1 elif feedback == \'too high\': high = guess - 1 elif feedback == \'correct\': return guess raise ValueError(\\"The input feedback list must contain a \'correct\' feedback.\\") # Example usage: # feedback_list = [(\'too low\', 1), (\'too high\', 1000), (\'too low\', 500), (\'too high\', 750), (\'correct\', 625)] # print(guess_number(feedback_list)) # Output: 625"},{"question":"You are given N integers. Your task is to determine the maximum difference between any two distinct integers in the list. The difference between a pair of integers (a, b) is defined as |a - b|, where |x| denotes the absolute value of x. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N, denoting the number of integers in the list. - The second line of each test case contains N space-separated integers, representing the elements of the list. ------ Output Format ------ For each test case, print on a new line a single integer — the maximum difference between any two distinct integers in the list. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^4 -10^5 ≤ text{element in list} ≤ 10^5 ----- Sample Input 1 ------ 3 5 1 2 3 4 5 4 -10 20 30 40 3 100 200 300 ----- Sample Output 1 ------ 4 50 200 ----- Explanation 1 ------ Test Case 1: The list has five integers: [1, 2, 3, 4, 5]. The two integers with the maximum difference are 1 and 5. Therefore, the maximum difference is |1 - 5| = 4. Test Case 2: The list has four integers: [-10, 20, 30, 40]. The two integers with the maximum difference are -10 and 40. Therefore, the maximum difference is |-10 - 40| = 50. Test Case 3: The list has three integers: [100, 200, 300]. The two integers with the maximum difference are 100 and 300. Therefore, the maximum difference is |100 - 300| = 200.","solution":"def max_difference(test_cases): Calculate the maximum difference between any two distinct integers for each test case. Args: test_cases (list): A list of tuples. Each tuple contains an integer N followed by a list of N integers. Returns: list: A list of integers where each integer is the maximum difference for the corresponding test case. result = [] for case in test_cases: N, numbers = case max_diff = max(numbers) - min(numbers) result.append(max_diff) return result"},{"question":"A company is organizing a competitive programming contest and wants to rank the participants based on their scores. You are to implement a ranking system that ranks participants according to their scores. In case of a tie (i.e., two or more participants have the same score), the participant with the lower ID number should be ranked higher. Given a list of participants with their respective IDs and scores, determine the rank of each participant and output them in increasing order of their participant IDs. Write a program that accomplishes the following: Constraints: - 1 leq N leq 100,000 (number of participants) - 0 leq score_i leq 1000 (score of each participant) - 1 leq ID_i leq N (ID number of each participant, unique) Input: Input consists of: - An integer N, the number of participants. - N lines follow, each containing two integers: ID_i and score_i, representing the participant ID and their score, respectively. Output: Output the rank of each participant in the increasing order of their IDs. Note: The rank of a participant is their position in the sorted order of participants based on scores in descending order. Ties are broken by participant ID in ascending order. Example: Input: 5 1 400 2 300 3 450 4 450 5 350 Output: 1: 2 2: 5 3: 1 4: 1 5: 4 Explanation: - Participant with ID 3 and 4 both have the highest score 450, but ID 3 appears first in increasing order of participant IDs, so rank 1 for both. - Next, Participant with ID 1 has a score of 400, so rank 2. - Participant with ID 5 has a rank of 3 with a score of 350. - Participants with ID 2 has the lowest score of 300, so their rank is 4.","solution":"def rank_participants(N, participants): Returns the rank of each participant based on their score and ID. N: int - the number of participants participants: list of tuples - list of (ID, score) Returns a dict with IDs as keys and ranks as values. # Sort participants by descending score first, then by ascending ID sorted_participants = sorted(participants, key=lambda x: (-x[1], x[0])) # Create a dictionary for rank with participant IDs rank_dict = {} # Assign ranks to participants current_rank = 1 for idx, (ID, score) in enumerate(sorted_participants): if idx > 0 and score < sorted_participants[idx - 1][1]: current_rank = idx + 1 rank_dict[ID] = current_rank # Sorting ranks by ID in increasing order sorted_rank_dict = dict(sorted(rank_dict.items())) return sorted_rank_dict"},{"question":"You are given a list of integers representing the stock prices of a company over a period of N days. Your task is to determine on which day you should have bought a stock and on which day you should have sold it to achieve the maximum profit. If there is no profit to be made, the answer should be 0 for both buy and sell days. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N representing the number of days. The second line contains N space-separated integers where the i-th integer represents the stock price on the i-th day. ------ Output ------ For each test case, output a single line containing two integers separated by a space: the day on which you should buy the stock and the day on which you should sell the stock to achieve the maximum profit. If no profit can be achieved, output \\"0 0\\". ------ Constraints ------ 1 ≤ T ≤ 1,000 2 ≤ N ≤ 100,000 0 ≤ text{Stock prices} ≤ 10^9 The sum of N over all test cases does not exceed 500,000 ------ Subtasks ------ Subtask #1 (100 points): original constraints ------ Sample Input 1 ------ 2 6 7 1 5 3 6 4 5 7 6 4 3 1 ------ Sample Output 1 ------ 2 5 0 0 ------ Explanation 1 ------ Example case 1: Buy on day 2 when the price is 1, and sell on day 5 when the price is 6 for a maximum profit of 5. Example case 2: No profit can be made as the prices only decrease.","solution":"def max_profit_days(T, test_cases): results = [] for test_case in test_cases: N, prices = test_case if N < 2: results.append(\\"0 0\\") continue min_price_index = 0 max_profit = 0 buy_day = 0 sell_day = 0 for i in range(1, N): if prices[i] < prices[min_price_index]: min_price_index = i else: profit = prices[i] - prices[min_price_index] if profit > max_profit: max_profit = profit buy_day = min_price_index + 1 sell_day = i + 1 if max_profit == 0: results.append(\\"0 0\\") else: results.append(f\\"{buy_day} {sell_day}\\") return results"},{"question":"A social networking device uses a simple way to measure the \\"heat\\" of a post, which is defined as a numerical measure of its popularity. The heat of a post depends on the number of likes it receives over a fixed time interval. Given an integer array `likes` where each element represents the number of likes a post receives at each hour and an integer `L`, your task is to write a program that computes the maximum sum of likes a post can receive within any contiguous subarray of length `L`. For example, if `likes = [1, 2, 3, 2, 5, 4, 6]` and `L = 3`, then the maximum sum of any contiguous subarray of length 3 is obtained from the subarray `[5, 4, 6]` with a sum of 15. # Input - The first line of input contains two integers `N` and `L` where `N` is the length of the `likes` array and `L` is the length of the subarray. - The second line contains `N` integers representing the elements of the `likes` array. # Output - Output a single integer representing the maximum sum of any contiguous subarray of length `L`. # Constraints - 1 ≤ N ≤ 100000 - 1 ≤ L ≤ N - 0 ≤ likes[i] ≤ 1000 # Example Input ``` 7 3 1 2 3 2 5 4 6 ``` Output ``` 15 ``` In the given example, the maximum sum of a contiguous subarray of length 3 is `15`, obtained from the subarray `[5, 4, 6]`.","solution":"def max_heat_likes(N, L, likes): if N < L: return \\"Invalid input: N should be greater than or equal to L\\" # Initialize with sum of first subarray of length L max_sum = sum(likes[:L]) current_sum = max_sum for i in range(L, N): current_sum = current_sum + likes[i] - likes[i - L] if current_sum > max_sum: max_sum = current_sum return max_sum # Example usage # likes = [1, 2, 3, 2, 5, 4, 6] # N = 7 # L = 3 # print(max_heat_likes(N, L, likes)) # Should output 15"},{"question":"You are given an array of integers representing the heights of buildings where the width of each building is exactly 1 unit. Given that it starts raining, you need to find the amount of water trapped between buildings after the rain. Each element in the array represents the height of a building at that index. The objective is to calculate how much water it can trap between the buildings after the rain. Example 1: Input: N = 6 heights[] = {3, 0, 0, 2, 0, 4} Output: 10 Explanation: In this case, 10 units of water were trapped. Example 2: Input: N = 5 heights[] = {0, 1, 2, 3, 4} Output: 0 Explanation: As no water could be trapped between the buildings, output is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function getTrappedWater() which takes the array heights[] and its size N as input parameters and returns the total water trapped. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^{5} 0 ≤ heights[i] ≤ 10^6","solution":"def getTrappedWater(heights, N): if N <= 2: return 0 left_max = [0] * N right_max = [0] * N # Fill left_max array left_max[0] = heights[0] for i in range(1, N): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[N - 1] = heights[N - 1] for i in range(N - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the accumulated water trapped_water = 0 for i in range(N): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"John is developing a text processing tool with advanced word transformation features. One of the tasks this tool must perform is to transform the given text by reversing each word individually while keeping the order of words intact. He wants you to write a function to accomplish this. You are given a string containing a sentence composed of words separated by spaces. The task is to reverse every word in the sentence while preserving the order of the words and the overall structure without changing the positions of spaces. Implement the function to facilitate this word transformation. -----Input----- The input consists of a single line containing a string, s (1 ≤ |s| ≤ 1000), which represents the sentence. The string contains only lowercase English letters and spaces. There is exactly one space between any two words, and there are no leading or trailing spaces. -----Output----- Print a single line containing the transformed sentence with each word reversed but with the words in their original positions. -----Examples----- Input hello world Output olleh dlrow Input example of a reversed sentence Output elpmaxe fo a desrever ecnetnes","solution":"def reverse_words(sentence): Reverses each word in the sentence while preserving the order of words and the overall structure. :param sentence: str, input sentence :return: str, sentence with each word reversed words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"``` Maria is organizing a coding competition and one of the challenges she prepared is a problem about string manipulation. Competitors will need to work with character sequences to solve this problem. Let\'s help her finalize the problem statement with a robust example. You are given a string `s` of length `n`(1 ≤ n ≤ 100,000) and a list of `q` queries (1 ≤ q ≤ 100,000). Each query asks you to replace all occurrences of a character `c1` with another character `c2` in the string, starting with the initial given string `s`. After performing each query, you should return the length of the longest substring consisting of identical characters. Input The first line contains the string `s`. The next line contains an integer `q`, the number of queries. The next `q` lines each contain two space-separated characters `c1` and `c2`, representing a query to replace all occurrences of character `c1` with character `c2` in the string. Output For each query, output a single integer — the length of the longest substring consisting of identical characters after the replacement. Example Input ``` abbac 3 a b b c c a ``` Output ``` 2 3 3 ``` Explanation 1. After replacing `a` with `b` in the first query, string becomes `bbbbc`, and the longest substring of identical characters is \\"bbbb\\" of length 4. 2. After replacing `b` with `c` in the second query, string becomes `ccccc`, and the longest substring of identical characters is \\"ccccc\\" of length 5. 3. After replacing `c` with `a` in the third query, string becomes `aaaaa`, and the longest substring of identical characters is \\"aaaaa\\" of length 5. ```","solution":"def process_queries(s, queries): def longest_identical_substring_length(s): max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length results = [] for c1, c2 in queries: s = s.replace(c1, c2) results.append(longest_identical_substring_length(s)) return results"},{"question":"There is an N-element array initialized with arbitrary integer values. You are allowed to perform the following operation any number of times: choose any sub-array of the array and add an integer X to each element of that sub-array, where X can be any integer. Your task is to determine the minimum number of operations required to make all the elements of the array equal. Example 1: Input: N = 3 arr = [4, 4, 6] Output: 2 Explanation: Choose sub-array [4, 4] and add 2, resulting in [6, 6, 6]. We have made all elements equal in 1 operation. Then the array is already equal so no more operations needed. Example 2: Input: N = 4 arr = [1, 5, 7, 7] Output: 5 Explanation: Choose sub-array [1, 5] and add 4, resulting in [5, 5, 7, 7]. Then choose sub-array [5, 5, 7] and add 2, resulting in [7, 7, 7, 7]. We have made all elements equal in 5 operations. Your Task: Since this is a function problem, you don\'t need to take any input as it is already provided by the driver code. You just need to complete the function minOperations() that takes the array A and integer N as parameters and returns the minimum number of operations required to make all elements of the array equal. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^9","solution":"def minOperations(N, arr): # Find the most common element in the array from collections import Counter count = Counter(arr) # The most frequent element most_frequent = max(count.values()) # The minimum number of operations needed to make all elements equal # is the total number of elements minus the most frequent element occurrences. return N - most_frequent"},{"question":"Write a program that reads in a series of commands to manipulate a list of integers. The list starts empty, and the commands, which can be of the following types, are: 1. `append x` - Append integer x to the end of the list. 2. `insert i x` - Insert integer x at index i in the list. If i is out of bounds, do nothing. 3. `remove x` - Remove the first occurrence of integer x from the list. If x is not in the list, do nothing. 4. `pop` - Remove the last element from the list. If the list is empty, do nothing. 5. `print` - Print the current state of the list. The program should process a sequence of these commands until it encounters the command `end`. # Input The input consists of multiple lines. Each line contains one command, which is one of the types described above. The sequence of commands ends with a line containing the command `end`. # Output For each `print` command encountered in the input, the program should output the current state of the list, with the elements separated by a space on one line. # Examples Input ``` append 3 append 5 print insert 1 10 print remove 3 remove 7 print pop print end ``` Output ``` 3 5 3 10 5 10 5 10 ``` # Constraints - The integer values x in the commands `append`, `insert`, and `remove` are in the range (-10^9) to (10^9). - The index i in the `insert` command is a non-negative integer. - There will be no more than (10^6) commands in the input.","solution":"def manipulate_list(commands): lst = [] results = [] for command in commands: parts = command.split() if parts[0] == \\"append\\": lst.append(int(parts[1])) elif parts[0] == \\"insert\\": index = int(parts[1]) value = int(parts[2]) if 0 <= index <= len(lst): lst.insert(index, value) elif parts[0] == \\"remove\\": value = int(parts[1]) if value in lst: lst.remove(value) elif parts[0] == \\"pop\\": if lst: lst.pop() elif parts[0] == \\"print\\": results.append(\\" \\".join(map(str, lst))) elif parts[0] == \\"end\\": break return results"},{"question":"Aisha loves working with strings and she is particularly fascinated with puzzles that involve palindromes. She wants to determine the longest palindromic substring in a given string. Can you help her achieve this? Your task is to write a function that, given a string `s`, returns the longest substring of `s` that is a palindrome. If there are multiple palindromic substrings of the same maximum length, return the first one that appears in `s`. Function Signature: `def longest_palindrome(s: str) -> str` **Input** - A single string `s` of length between 1 and 1000, inclusive. The string will contain only ASCII characters. **Output** - A string representing the longest palindromic substring of `s`. **Example** - Input: \\"babad\\" - Output: \\"bab\\" - Input: \\"cbbd\\" - Output: \\"bb\\" **Note** - In the first example, \\"bab\\" is a palindrome and the longest substring of `s` which is a palindrome. Note that \\"aba\\" is also a valid answer. - In the second example, \\"bb\\" is the longest substring of `s` which is a palindrome. Be sure to optimize your solution to handle the input size efficiently.","solution":"def longest_palindrome(s: str) -> str: Returns the longest palindromic substring of s. n = len(s) if n == 0: return \\"\\" start, max_length = 0, 1 for i in range(n): # Check for odd length palindrome low, high = i, i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Check for even length palindrome low, high = i, i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Given a binary tree, write a function to determine if it is a balanced binary tree. A balanced binary tree is defined as a binary tree in which the left and right subtrees of every node differ in height by no more than 1. ------ Input Format ------ - The input consists of lines in which each line contains a tree node description in the form of parent-child pairs. - Each line contains three values: the parent node, the child node, and a character (\'L\' or \'R\') indicating whether the child is a left (\'L\') or right (\'R\') child of the parent. The tree is guaranteed to be a proper binary tree and does not contain any duplicate nodes. ------ Output Format ------ - Return \\"True\\" if the given binary tree is balanced, otherwise return \\"False\\". ------ Function Signature ------ ```python def is_balanced_tree(nodes: List[Tuple[int, int, str]]) -> bool: pass ``` ------ Example ------ Input: [ (1, 2, \'L\'), (1, 3, \'R\'), (2, 4, \'L\'), (2, 5, \'R\'), (3, 6, \'L\') ] Output: True Input: [ (1, 2, \'L\'), (1, 3, \'R\'), (2, 4, \'L\'), (2, 5, \'R\'), (4, 8, \'L\') ] Output: False","solution":"from typing import List, Tuple class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def build_tree(nodes: List[Tuple[int, int, str]]) -> TreeNode: if not nodes: return None node_dict = {} for parent, child, direction in nodes: if parent not in node_dict: node_dict[parent] = TreeNode(parent) if child not in node_dict: node_dict[child] = TreeNode(child) if direction == \'L\': node_dict[parent].left = node_dict[child] elif direction == \'R\': node_dict[parent].right = node_dict[child] return node_dict[nodes[0][0]] def is_balanced_tree(nodes: List[Tuple[int, int, str]]) -> bool: def check_height(node): if not node: return 0 left_height = check_height(node.left) right_height = check_height(node.right) if left_height is None or right_height is None or abs(left_height - right_height) > 1: return None return max(left_height, right_height) + 1 root = build_tree(nodes) return check_height(root) is not None"},{"question":"A social media platform tracks user activity through a sequence of actions. Each action is tagged with a type and a timestamp. The platform wants to analyze user behavior by summarizing this sequence within a specific range. Actions are given in the following format: (timestamp, type), where - `timestamp` is a non-negative integer. - `type` is a string describing the action performed. You are tasked with creating a function that processes a list of actions and a specified time range and returns a summary of actions within that range. Specifically, you need to implement a function `summarize_actions(actions, start, end)` that takes: - `actions`: a list of tuples, where each tuple contains a `timestamp` and an `action type`. - `start`: an integer representing the start of the time range (inclusive). - `end`: an integer representing the end of the time range (inclusive). The function should return a dictionary where: - The keys are the action types. - The values are the count of each action type that occurred within the specified time range. If no actions occur within the specified time range, return an empty dictionary. To illustrate, here are some examples: -----Input/Output----- Example 1: ```python actions = [ (1, \\"login\\"), (2, \\"view\\"), (2, \\"view\\"), (3, \\"logout\\"), (4, \\"login\\"), (5, \\"view\\") ] start = 2 end = 3 print(summarize_actions(actions, start, end)) # Output: {\\"view\\": 2, \\"logout\\": 1} ``` Example 2: ```python actions = [ (0, \\"login\\"), (2, \\"view\\"), (4, \\"purchase\\"), (6, \\"logout\\") ] start = 5 end = 7 print(summarize_actions(actions, start, end)) # Output: {\\"logout\\": 1} ``` Example 3: ```python actions = [ (1, \\"login\\"), (3, \\"view\\"), (5, \\"purchase\\"), (7, \\"login\\") ] start = 8 end = 10 print(summarize_actions(actions, start, end)) # Output: {} ``` -----Note----- In the given examples: - In Example 1, actions at timestamps 2 and 3 are counted. Action types \\"view\\" and \\"logout\\" occurred within this range. - In Example 2, only the action at timestamp 6 falls within the range. - In Example 3, no actions fall within the specified range, thus returning an empty dictionary.","solution":"def summarize_actions(actions, start, end): Summarizes the actions within a specified time range. Parameters: - actions: A list of tuples where each tuple contains a timestamp and an action type. - start: The start of the time range (inclusive). - end: The end of the time range (inclusive). Returns: A dictionary where the keys are the action types and the values are the count of each action type that occurred within the specified time range. summary = {} for timestamp, action_type in actions: if start <= timestamp <= end: if action_type in summary: summary[action_type] += 1 else: summary[action_type] = 1 return summary"},{"question":"A shipping company is organizing the logistics of delivering packages across several cities. They have designed an optimization problem to manage package delivery routes. Each route is represented by an edge between two cities, and every city can be visited multiple times but must have all its packages delivered directly to their specified destinations. Each package has a specific delivery deadline, and the company needs to determine whether it\'s possible to deliver all packages on time given the constraints of their delivery network. Input The first line contains two integers n and m (1 ≤ n ≤ 100 000, 1 ≤ m ≤ 200 000) — the number of cities and the number of delivery routes between the cities. The next m lines each contain three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 10 000), indicating that there is a direct route from city u to city v that takes t minutes to travel. The next line contains a single integer p (1 ≤ p ≤ 100 000) — the number of packages. The next p lines each contain three integers s, d, and lt (1 ≤ s, d ≤ n, 1 ≤ lt ≤ 1 000 000), where s is the starting city, d is the destination city, and lt is the maximum allowable travel time in minutes for that package. Output Output \\"YES\\" if all packages can be delivered within their respective deadlines, otherwise output \\"NO\\". Examples Input 4 5 1 2 10 2 3 20 1 3 15 3 4 10 2 4 25 3 1 3 30 2 4 40 1 4 35 Output YES Input 3 3 1 2 10 2 3 20 1 3 15 2 1 3 10 2 3 25 Output NO Explanation In the first example, it is possible to deliver all packages on time by using one of the available routes between cities that meet the deadline criteria. For instance, the first package can be delivered from city 1 to city 3 within 30 minutes directly (taking 15 minutes). In the second example, the first package cannot be delivered from city 1 to city 3 within the required 10 minutes, making it impossible to meet its deadline. Therefore, the output is \\"NO\\".","solution":"import heapq import sys from collections import defaultdict def can_deliver_all_packages(n, m, routes, p, packages): def dijkstra(n, adj, src): dist = [float(\'inf\')] * (n + 1) dist[src] = 0 pq = [(0, src)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for (v, weight) in adj[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist adj = defaultdict(list) for u, v, t in routes: adj[u].append((v, t)) adj[v].append((u, t)) # assuming undirected routes all_distances = {} for i in range(1, n+1): all_distances[i] = dijkstra(n, adj, i) for s, d, lt in packages: if all_distances[s][d] > lt: return \\"NO\\" return \\"YES\\""},{"question":"Wooden Blocks are fun to play with! John has a collection of wooden blocks, each with a number written on it. He loves to rearrange these blocks in different ways. Today, he decided to challenge himself by forming the largest possible number using all the blocks he has. Every block can only be used once and they must be arranged in sequence to form a number. Help John determine the largest number he can form with his blocks. Input: The first line of input contains an integer T, representing the number of test cases. Each test case contains two lines. The first line of each test case contains an integer N, representing the number of blocks. The second line contains N integers, representing the numbers written on the blocks. Output: For each test case, print the largest number that can be formed using the blocks. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 0 ≤ Numbers ≤ 10^9 SAMPLE INPUT 2 3 10 2 9 4 62 32 21 9 SAMPLE OUTPUT 9210 9623221 Explanation In the first test case, the largest number that can be formed is 9210 by arranging the blocks in descending order. In the second test case, the largest number that can be formed is 9623221 by concatenating the blocks 9, 62, 32, and 21.","solution":"from functools import cmp_to_key def compare(x, y): Comparator function to determine the order for the largest concatenated number if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 def largest_number(blocks): Forms the largest number possible with given blocks blocks = sorted(blocks, key=cmp_to_key(compare)) largest_num = \'\'.join(blocks) # removing leading zeros if any return largest_num if largest_num[0] != \'0\' else \'0\' def process_input(test_cases): results = [] for case in test_cases: N, blocks = case blocks = list(map(str, blocks)) results.append(largest_number(blocks)) return results"},{"question":"You are given a field with N posts arranged in a straight line. Each post is either painted red or blue. You want to paint some of the red posts blue such that the total number of consecutive sections of posts with the same color is minimized. A section is defined as a maximal group of consecutive posts of the same color. For example, in the arrangement \\"RBBRBRR\\", there are 5 sections: \\"R\\", \\"BB\\", \\"R\\", \\"B\\", \\"RR\\". Your task is to determine the minimum number of consecutive sections possible after possibly repainting some of the red posts blue. INPUT The first line of the input contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the number of posts. - The second line contains a string of length N, where each character is either \'R\' or \'B\', representing a red or blue post respectively. OUTPUT For each test case, output a line in the format Case #X: M where X is the test case number, starting from 1, and M is the minimum number of consecutive sections possible. CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 The string will only contain characters \'R\' and \'B\'. SAMPLE INPUT 2 7 RBBRBRR 5 RRRRR SAMPLE OUTPUT Case #1: 3 Case #2: 1 Explanation In the first test case, you can repaint the 1st and the 7th post blue, resulting in the arrangement \\"BBBBBBB\\", which has only 1 section. In the second test case, you can repaint all posts blue, resulting in \\"BBBBB\\", which has only 1 section.","solution":"def min_sections(arr): This function takes a list of character \'R\' and \'B\' representing posts and returns the minimum number of consecutive sections of the same color after repainting some red posts to blue. # Convert all characters to the same color and count sections. sections_initial = arr[0] sections_count = 1 for i in range(1, len(arr)): if arr[i] != sections_initial: sections_count += 1 sections_initial = arr[i] return (sections_count + 1) // 2 def solve(test_cases): results = [] for i, case in enumerate(test_cases): N, posts = case min_sections_count = min_sections(posts) results.append(f\\"Case #{i+1}: {min_sections_count}\\") return results"},{"question":"Imagine you are organizing a marathon event, and you have a list of participants including their start and finish times. Your task is to determine the maximum number of participants running simultaneously at any point during the event. Input The first line contains an integer T denoting the number of test cases followed by 2T lines. The first line of each test case contains an integer N denoting the number of participants. The second line contains 2N space-separated integers where the odd-indexed integers represent the start times and the even-indexed integers represent the finish times of the participants. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ start_time < finish_time ≤ 10^9 Output For each test case, output a single integer representing the maximum number of participants running simultaneously at any point during the event. SAMPLE INPUT 1 3 1 4 2 5 3 6 SAMPLE OUTPUT 3","solution":"def max_simultaneous_participants(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] times = test_cases[i][1] events = [] for j in range(0, 2 * N, 2): start_time = times[j] end_time = times[j + 1] events.append((start_time, \'start\')) events.append((end_time, \'end\')) # Sort events: in case of ties, \'end\' should come before \'start\' events.sort(key=lambda x: (x[0], x[1] == \'start\')) current_running = 0 max_running = 0 for event in events: if event[1] == \'start\': current_running += 1 if current_running > max_running: max_running = current_running else: current_running -= 1 results.append(max_running) return results"},{"question":"Task: Implement a function `isHarshad` to check whether the provided number is a Harshad number and return true if it is, false otherwise. # Description: A `Harshad Number` (or Niven number) is an integer that is divisible by the sum of its digits. For example, 18 is a Harshad number because the sum of its digits (1 + 8) equals 9, and 18 is divisible by 9. # Explanation: 18 = 1 + 8 = 9 // 18 is divisible by 9, so it\'s a Harshad Number 21 = 2 + 1 = 3 // 21 is divisible by 3, so it\'s a Harshad Number 30 = 3 + 0 = 3 // 30 is divisible by 3, so it\'s a Harshad Number 25 = 2 + 5 = 7 // 25 is not divisible by 7, so it’s not a Harshad Number # Function Signature ```python def isHarshad(number: int) -> bool: # your code goes here pass ```","solution":"def isHarshad(number: int) -> bool: Returns True if the provided number is a Harshad number, otherwise False. A Harshad number (or Niven number) is an integer that is divisible by the sum of its digits. if number == 0: return False sum_of_digits = sum(int(digit) for digit in str(number)) return number % sum_of_digits == 0"},{"question":"Given an array of N integers and Q queries, each query asks you to find the k-th smallest element in a specified subarray. The subarray is defined by a range from index l to index r (both inclusive). -----Constraints----- - 1 ≤ N, Q ≤ 5 × 10^5 - 1 ≤ arr_i ≤ 10^9 - 1 ≤ l_i ≤ r_i ≤ N - 1 ≤ k_i ≤ (r_i - l_i + 1) - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N Q arr_1 arr_2 ... arr_N l_1 r_1 k_1 l_2 r_2 k_2 : l_Q r_Q k_Q -----Output----- Print Q lines. Each line should contain the k-th smallest element in the respective subarray. -----Sample Input----- 5 3 5 3 1 2 4 1 3 2 2 5 1 3 5 3 -----Sample Output----- 3 1 4 - The subarray containing elements from the 1st to 3rd indices is [5, 3, 1]. The 2nd smallest element is 3. - The subarray containing elements from the 2nd to 5th indices is [3, 1, 2, 4]. The 1st smallest element is 1. - The subarray containing elements from the 3rd to 5th indices is [1, 2, 4]. The 3rd smallest element is 4.","solution":"def kth_smallest_elements(N, Q, arr, queries): results = [] for l, r, k in queries: subarray = arr[l-1:r] subarray.sort() results.append(subarray[k-1]) return results"},{"question":"Given an integer array nums, return the smallest positive integer that is missing from the array. Input The first line of the input contains an integer T representing the number of test cases. Each of the next T lines contains a space-separated list of integers representing the array nums. Output For each test case, print the smallest positive integer that is missing from the array. Constraints 1 ≤ T ≤ 100 1 ≤ length of nums[i] ≤ 1000 -10^6 ≤ nums[i][j] ≤ 10^6 SAMPLE INPUT 3 1 2 0 3 4 -1 1 7 8 9 11 12 SAMPLE OUTPUT 3 2 1","solution":"def smallest_missing_positive(nums): Returns the smallest positive integer that is missing from the array nums. nums = [num for num in nums if num > 0] nums_set = set(nums) smallest_missing = 1 while smallest_missing in nums_set: smallest_missing += 1 return smallest_missing def find_missing_numbers(test_cases): results = [] for case in test_cases: nums = list(map(int, case.split())) result = smallest_missing_positive(nums) results.append(result) return results"},{"question":"Write a function `reverse_words_order_and_swap_cases(sentence)` that takes a sentence string as an input and returns a new sentence where the order of the words is reversed, and the cases of each character are swapped (all uppercase letters should become lowercase and vice versa). For example: - Input: \\"Hello World\\" - Output: \\"wORLD hELLO\\" - Input: \\"Python is FUN\\" - Output: \\"fun IS pYTHON\\"","solution":"def reverse_words_order_and_swap_cases(sentence): Reverses the order of words in the sentence and swaps the cases of each character. words = sentence.split() reversed_words = words[::-1] swapped_case_sentence = \' \'.join(reversed_words).swapcase() return swapped_case_sentence"},{"question":"At Funland Theme Park, there are multiple rides, each with a certain capacity and a group of waiting times. The park\'s management wants to create a schedule for visitors that minimizes the total waiting time for all visitors on any ride. They want to ensure that each visitor can be placed in exactly one ride and that the rides operate at their maximum possible capacity without surpassing it. Your task is to write a program to find the optimal schedule for all rides such that the total waiting time for all visitors is minimized. Input The input is given in the following format: V R v1 v2 ... vV c1 w1 w2 ... wC1 c2 w1 w2 ... wC2 ... cR w1 w2 ... wCR The first line of input consists of two integers V and R, separated by a space. V (1 ≤ V ≤ 1000) is the number of visitors, and R (1 ≤ R ≤ 100) is the number of rides. The second line contains V integers, each representing the waiting time for a visitor. A visitor has a unique waiting time vi (1 ≤ vi ≤ 200). The next R lines represent the rides. Each line starts with an integer c, which denotes the capacity of that ride (1 ≤ c ≤ V). This is followed by c integers, each representing the waiting time for a visitor that can be accommodated on this ride. Output Output the schedule of each ride as follows: For each ride, output the number of visitors scheduled for that ride, followed by the waiting times of those visitors separated by a space on a new line. If there are multiple optimal solutions, you may output any of them. Examples Input 5 3 4 3 1 2 5 2 4 3 2 1 2 1 5 Output 2 4 3 2 1 2 1 5 Input 6 2 6 5 3 2 4 1 3 6 5 3 3 2 4 1 Output 3 6 5 3 3 2 4 1","solution":"def create_schedule(V, R, visitors, rides): Create an optimal schedule for visitors to minimize the total waiting time. Args: V : int - number of visitors R : int - number of rides visitors : list of int - waiting times of the visitors rides : list of lists - each sub-list contains the capacity and waiting times of a ride Returns: list of lists - each sub-list contains the scheduled waiting times for the rides from collections import defaultdict import itertools # mapping each waiting time to a visitor index visitor_map = defaultdict(list) for idx, time in enumerate(visitors): visitor_map[time].append(idx + 1) # Collecting all waiting times to map back to visitor ids all_rides = [] for ride in rides: capacity = ride[0] times = ride[1:] ride_info = (capacity, times) all_rides.append(ride_info) # Schedule creation schedule = [] used_visitors = set() for ride_info in all_rides: capacity, times = ride_info ride_schedule = [] for time in times: if time in visitor_map and visitor_map[time]: visitor_id = visitor_map[time].pop() if visitor_id not in used_visitors: used_visitors.add(visitor_id) ride_schedule.append(time) if len(ride_schedule) == capacity: break schedule.append(ride_schedule) return schedule"},{"question":"John wants to buy some books from an online store. He has a budget of P dollars and each book costs Q dollars. Given the current offers at the store, if John buys 4 books, he gets 1 book free. Determine the maximum number of books John can buy without exceeding his budget. ------ Input Format ------ - The first line will contain M - the number of test cases. Then the test cases follow. - The first and only line of each test case contains two integers P, Q - the budget John has and the cost of each book, respectively. ------ Output Format ------ For each test case, output a single integer representing the maximum number of books John can buy within his budget. ------ Constraints ------ 1 ≤ M ≤ 100 1 ≤ P, Q ≤ 10^{5} ------ Sample Input 1 ------ 3 100 20 90 25 120 15 ------ Sample Output 1 ------ 6 4 10 ------ Explanation 1 ------ Test Case 1: John\'s budget is 100 dollars, and each book costs 20 dollars. If John buys 4 books, he pays 4 times 20 = 80 dollars and gets 1 book free. So, for 100 dollars, John can buy 4 + 1 = 5 books initially, and he still has 20 dollars left, which is enough to buy 1 more book. Thus, John can buy a total of 5 + 1 = 6 books. Test Case 2: John\'s budget is 90 dollars, and each book costs 25 dollars. John can buy 3 books (3 times 25 = 75 dollars) and he still has 15 dollars left, which is not enough to buy another book. Therefore, John can buy 3 books in total. Test Case 3: John\'s budget is 120 dollars, and each book costs 15 dollars. If John buys 4 books, he pays 4 times 15 = 60 dollars and gets 1 book free. With 120 dollars, John can buy 8 books (4 books + 1 free + 4 books = 9 books) for 120 dollars. Thus, John can buy a total of 9 + 1 = 10 books.","solution":"def max_books(P, Q): Calculate the maximum number of books John can buy with P dollars where each book costs Q dollars and there is an offer where buying 4 books gets 1 free. Args: P : int : Budget in dollars Q : int : Cost per book in dollars Returns: int : The maximum number of books John can buy set_cost = 4 * Q # Cost of 4 books set_count = P // set_cost # Number of sets of 4 books John can buy remaining_money = P % set_cost # Money left after buying sets of 4 books # Total books including free books total_books = set_count * 5 # Each set of 4 books gets 1 free, so 5 books per set # Calculate remaining books that can be bought with remaining money remaining_books = remaining_money // Q return total_books + remaining_books def max_books_for_cases(cases): Calculate the maximum number of books John can buy for multiple test cases. Args: cases : list : List of tuples where each tuple contains (P, Q) Returns: list : List of integers indicating the maximum number of books for each test case results = [] for case in cases: P, Q = case results.append(max_books(P, Q)) return results"},{"question":"Given a list of integers representing the scores of students in a class, you need to determine the maximum possible grade difference and the minimum possible grade difference between any two students. The maximum possible difference is simply the difference between the highest and lowest scores in the class. The minimum possible difference is the smallest difference between any two consecutive scores in a sorted list of the given scores. Function description Complete the `gradeDifference` function in the editor below. `gradeDifference` has the following parameter(s): - int scores[n]: an array of integers representing the scores of students in the class. Returns - int pair[2]: an array of two integers where the first integer is the maximum possible difference and the second integer is the minimum possible difference. Input Format The first line contains the integer `n`, the number of students. The second line contains `n` space-separated integers representing the scores of the students. Constraints - 2 ≤ n ≤ 10^5 - 0 ≤ scores[i] ≤ 100 Sample Input ``` 6 45 90 78 34 59 80 ``` Sample Output ``` [56, 11] ``` Explanation The maximum possible difference is between the highest score `90` and the lowest score `34`, which is `56`. When the scores are sorted: `[34, 45, 59, 78, 80, 90]`, the minimum possible difference is between `78` and `80`, which is `2`.","solution":"def gradeDifference(scores): Returns the maximum and minimum possible grade differences between any two students. Parameters: scores (list): A list of integers representing the scores of students. Returns: list: A list containing two integers where the first integer is the maximum possible difference and the second integer is the minimum possible difference. # Calculate the maximum possible difference max_diff = max(scores) - min(scores) # Sort the scores to find the minimum possible difference sorted_scores = sorted(scores) min_diff = float(\'inf\') # Iterate through the sorted list to find the minimum difference between consecutive scores for i in range(1, len(sorted_scores)): min_diff = min(min_diff, sorted_scores[i] - sorted_scores[i-1]) return [max_diff, min_diff]"},{"question":"In a far-off village, there are M houses arranged in a line. Each house has a certain number of fruits, and no two houses have the same number of fruits. A villager starts collecting fruits from the house with the lowest number of fruits and wants to collect the fruits from the house with the highest number of fruits as quickly as possible. The villager can only move to the neighboring house (i.e., the house directly next to the current house). The time required to move from a house with F fruits to a neighboring house with G fruits is given by the absolute difference |F - G|. The villager asks you to calculate the minimum total time required to start from the house with the lowest number of fruits and collect from the house with the highest number of fruits. ------ Input ------ The first line of input contains one integer M denoting the number of houses. The second line contains M space-separated integers denoting the number of fruits in each house. ------ Output ------ Print the required minimum total time. ------ Constraints ------ 2 ≤ M ≤ 1000 1 ≤ Fruits_{i} ≤ 10000 ----- Sample Input 1 ------ 5 3 1 6 2 5 ----- Sample Output 1 ------ 10 ----- Explanation 1 ------ The villager starts at house with 1 fruit and moves to house with 2 fruits, then to house with 3 fruits, then to house with 5 fruits, and finally to house with 6 fruits. Total time consumed = |1-2| + |2-3| + |3-5| + |5-6| = 1+1+2+1 = 5. ------ Sample Input 2 ------ 4 8 15 5 10 ----- Sample Output 2 ------ 17 ----- Explanation 2 ------ The villager starts at house with 5 fruits and moves to house with 8 fruits, then to house with 10 fruits, and finally to house with 15 fruits. Total time consumed = |5-8| + |8-10| + |10-15| = 3+2+5 = 10.","solution":"def min_total_time(M, fruits): Calculates the minimum total time to move from the house with the least fruits to the house with the most fruits. Args: M: int : Number of houses fruits: List[int] : List containing the number of fruits in each house Returns: int: Minimum total time to collect fruits starting from the house with the lowest to the house with the highest number of fruits. # Sort the list of fruits to get them in ascending order fruits.sort() # Calculate the total time required by summing the absolute differences between consecutive sorted fruits total_time = 0 for i in range(M - 1): total_time += fruits[i + 1] - fruits[i] return total_time"},{"question":"Polycarp is a renowned jeweler in Berland, and he has n different types of gems. Each type of gem has a certain value associated with it. Polycarp wants to create the most valuable necklace by stringing together some or all of the gems, but he must follow these rules: 1. He can only take one gem from any type. 2. The necklace should be exactly k gems long. 3. Polycarp wants to maximize the value of the necklace. Help Polycarp determine the highest possible value of the necklace he can create. -----Input----- The first line contains two integers n and k (1 le n le 10^5, 1 le k le n) — the number of different types of gems and the desired length of the necklace, respectively. The second line contains n integers v_1, v_2, dots, v_n (1 le v_i le 10^9), where v_i represents the value of the i-th type of gem. -----Output----- Output a single integer — the maximum possible value of a necklace with exactly k gems. -----Example----- Input 5 3 7 2 4 5 1 Output 16 -----Explanation----- In this example, we have 5 different types of gems with values [7, 2, 4, 5, 1]. The desired length of the necklace is 3. Polycarp can choose the gems with values 7, 5, and 4 to form the most valuable necklace with a total value of 16.","solution":"def max_necklace_value(n, k, gem_values): Determines the maximum possible value of a necklace with exactly k gems. Parameters: n (int): Number of different types of gems. k (int): Desired length of the necklace. gem_values (list of int): List of gem values. Returns: int: The maximum possible value of the necklace. # Sort the gem values in descending order sorted_gem_values = sorted(gem_values, reverse=True) # Take the top k values max_value = sum(sorted_gem_values[:k]) return max_value"},{"question":"Alexandra is planning a vacation trip around the world. She wants to visit as many countries as possible while minimizing her travel costs. To do this, she needs an efficient itinerary that considers the costs between countries. She has a list of countries she wants to visit and the cost in dollars for each direct flight between these countries. There might be multiple flights connecting different pairs of countries. Your task is to help Alexandra find the minimum cost required to visit all the listed countries, starting from any one of them. -----Input----- The first line of the input contains an integer ( n ) (( 2 leq n leq 100 )) — the number of countries she wants to visit. The second line contains an integer ( m ) (( n - 1 leq m leq n times (n - 1) / 2 )) — the number of direct flights between the countries. Each of the next ( m ) lines contains three values: ( u ) and ( v ) (the indices of two different countries connected by a direct flight, where ( 1 leq u, v leq n )), and ( c ) (( 1 leq c leq 10^6 )) — the cost of the flight between countries ( u ) and ( v ). -----Output----- Print a single integer — the minimum cost required for Alexandra to visit all the listed countries. If it is impossible to visit all countries, print -1. -----Examples----- Input 4 5 1 2 5 1 3 10 2 3 4 2 4 1 3 4 7 Output 10 Input 3 2 1 2 3 2 3 3 Output 6 Input 4 2 1 2 3 3 4 2 Output -1 -----Note----- In the first example, Alexandra can travel as follows to minimize the cost: 1 -> 2 -> 4 -> 3 or 2 -> 1 -> 3 -> 4 with a total cost of 10 dollars. In the second example, the costs to visit all countries form a triangle. The minimum cost will be the sum of the direct flights, 6 dollars, indicating complete connectivity. In the third example, it’s impossible to visit all countries with the given flights as they do not form a connected graph, hence the output is -1.","solution":"def find_min_cost(n, m, flights): Finds the minimum cost to visit all countries using the provided flights. Parameters: n (int): Number of countries. m (int): Number of direct flights. flights (list of tuples): Each tuple contains three integers u, v, and c, where u and v are indices of two countries and c is the cost of the flight between them. Returns: int: Minimum cost to visit all countries or -1 if not possible. parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX flights.sort(key=lambda x: x[2]) # Sort the edges based on cost total_cost = 0 edges_used = 0 for u, v, cost in flights: if find(u-1) != find(v-1): union(u-1, v-1) total_cost += cost edges_used += 1 if edges_used == n - 1: return total_cost return -1"},{"question":"Given a list of meetings where each meeting is represented by a tuple consisting of the start time and the end time, determine the minimum number of meeting rooms required to accommodate all the meetings. Each meeting room can hold only one meeting at a time. Example 1: Input: meetings = [(0, 30), (5, 10), (15, 20)] Output: 2 Explanation: Meeting 1 starts at 0 and ends at 30, so it occupies one room from time 0 to 30. Meeting 2 starts at 5 and ends at 10, requiring an additional room from time 5 to 10. Meeting 3 starts at 15 and ends at 20, which can use the room freed up by Meeting 2, but cannot share with Meeting 1. Thus, a second room is required. Total rooms required = 2. Example 2: Input: meetings = [(7, 10), (2, 4)] Output: 1 Explanation: Meeting 1 starts at 7 and ends at 10. Meeting 2 starts at 2 and ends at 4. Since the two meetings do not overlap, only one room is required. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minMeetingRooms() which takes the list of meetings as an input parameter and returns the minimum number of meeting rooms required. Expected Time Complexity: O(N log N), where N is the number of meetings. Expected Auxiliary Space: O(N) Constraints: 1 <= meetings.length <= 10^4 0 <= start_time_i < end_time_i <= 10^6","solution":"import heapq def minMeetingRooms(meetings): Determines the minimum number of meeting rooms required to accommodate all the meetings. :param meetings: List of tuples, where each tuple represents a meeting with a start and end time. :return: Minimum number of meeting rooms required. if not meetings: return 0 # Sort the meetings by start time meetings.sort(key=lambda x: x[0]) # Initialize a min heap to track the end times of meetings end_times = [] heapq.heappush(end_times, meetings[0][1]) for meeting in meetings[1:]: if meeting[0] >= end_times[0]: heapq.heappop(end_times) heapq.heappush(end_times, meeting[1]) return len(end_times)"},{"question":"Maria\'s Bakery specializes in creating customized cakes. Maria has a set of different cake types, each with a specific preparation and baking time. She needs a program to help manage her daily schedule by calculating the total amount of time required to prepare a given list of cake orders. Create a Python function called `calculate_baking_time` that takes a list of tuples as an input. Each tuple consists of a string representing the cake type and an integer representing the quantity of that cake type ordered. For example, the bakery offers the following cake types and their respective preparation and baking times: * \'vanilla\' : 60 minutes * \'chocolate\' : 75 minutes * \'red_velvet\' : 90 minutes * \'cheesecake\' : 120 minutes The function should return the total baking time needed for all the cakes in the list. Your function should have the following signature: ```python def calculate_baking_time(cakes: List[Tuple[str, int]]) -> int: ``` You can assume that the cake types in the input list will only be one of the four provided cake types, and the quantity will always be a positive integer. # Example ```python orders = [(\'vanilla\', 2), (\'chocolate\', 1), (\'red_velvet\', 3)] total_time = calculate_baking_time(orders) # The following is now true # total_time == 2*60 + 1*75 + 3*90 == 465 (minutes) assert total_time == 465 ```","solution":"from typing import List, Tuple def calculate_baking_time(cakes: List[Tuple[str, int]]) -> int: # Define the baking times for each cake type baking_times = { \'vanilla\': 60, \'chocolate\': 75, \'red_velvet\': 90, \'cheesecake\': 120 } # Initialize total time to zero total_time = 0 # Loop through each cake order and accumulate the total baking time for cake_type, quantity in cakes: total_time += baking_times[cake_type] * quantity return total_time"},{"question":"You are given a string `s` consisting of n lowercase letters. Your task is to determine if you can rearrange the letters of the string such that no two adjacent letters are the same. If it is possible to do so, return any one such possible rearranged string. If it is not possible, return an empty string. Input: The first line contains an integer t, denoting the number of test cases. Each of the next t lines contains a string `s` of length n. Output: For each test case, print a possible rearranged string or an empty string in case rearrangement is not possible. Constraints: - 1 ≤ t ≤ 10 - 1 ≤ n ≤ 10^5 - `s` consists of lowercase English letters. SAMPLE INPUT 2 aabb aaab SAMPLE OUTPUT abab \\"\\"","solution":"from heapq import heappop, heappush from collections import Counter def rearrange_string(s): Rearrange the string such that no two adjacent letters are the same. If it is not possible return an empty string. n = len(s) char_count = Counter(s) max_heap = [] # Using a max heap to store counts in negative to simulate max heap using min heap for char, count in char_count.items(): heappush(max_heap, (-count, char)) result = [] prev_count, prev_char = 0, \'\' # To keep track of the previous character used while max_heap: count, char = heappop(max_heap) result.append(char) # If the previous character count was more than 0, add it back to the heap if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) # Update the previous character and count to current one prev_count, prev_char = count + 1, char # Decrease the count as it is negative rearranged_string = \'\'.join(result) # If the length of the result is not equal to the input string length, it means rearrangement wasn\'t possible if len(rearranged_string) != n: return \\"\\" return rearranged_string def solve(t, test_cases): results = [] for s in test_cases: results.append(rearrange_string(s)) return results"},{"question":"Write a Python function named `distribute_tasks` that takes two arguments: - `team_members` (a list of strings representing the names of each team member) - `tasks` (a list of strings representing the description of each task) The function should: 1. Assign tasks to team members in a \\"round-robin\\" fashion, i.e., the first task goes to the first team member, the second task to the second team member, and so on. After the last team member receives a task, the next task should go back to the first team member, and the cycle continues. 2. Return a dictionary where the keys are the names of the team members, and the values are lists of tasks assigned to each member. Example usage: ```python team_members = [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] tasks = [\\"Task 1\\", \\"Task 2\\", \\"Task 3\\", \\"Task 4\\", \\"Task 5\\", \\"Task 6\\", \\"Task 7\\"] distribute_tasks(team_members, tasks) ``` Expected output: ```python { \\"Alice\\": [\\"Task 1\\", \\"Task 4\\", \\"Task 7\\"], \\"Bob\\": [\\"Task 2\\", \\"Task 5\\"], \\"Charlie\\": [\\"Task 3\\", \\"Task 6\\"] } ```","solution":"def distribute_tasks(team_members, tasks): Distributes tasks among team members in a round-robin fashion. Parameters: team_members (list): A list of strings representing the names of each team member. tasks (list): A list of strings representing the description of each task. Returns: dict: A dictionary where the keys are the names of the team members, and the values are lists of tasks assigned to each member. task_distribution = {member: [] for member in team_members} for index, task in enumerate(tasks): team_member = team_members[index % len(team_members)] task_distribution[team_member].append(task) return task_distribution"},{"question":"Sam is planning to organize a movie marathon weekend for his friends. He has a list of n movies and their respective durations in minutes. Sam wants to create a schedule such that each movie is shown exactly once and no two movies are watched at the same time. However, he must ensure that the total duration of the movies in each time slot does not exceed m minutes. If Sam successfully organizes such a schedule, he should minimize the number of time slots used. If it is not possible to organize a schedule under these constraints, Sam needs to know. Your task is to determine the minimum number of time slots required to show all the movies or to determine if it is impossible. -----Input----- The first line of the input contains two integers n (1 ≤ n ≤ 20) and m (1 ≤ m ≤ 1000). The second line contains n space-separated integers denoting the durations d_i (1 ≤ d_i ≤ 500) of the n movies. -----Output----- Output a single integer: the minimum number of time slots required to show all the movies. If it is impossible to schedule all the movies under the given constraints, output -1. -----Examples----- Input 5 120 90 30 40 50 60 Output 3 Input 4 100 50 60 70 80 Output 4 Input 3 80 90 100 20 Output -1 -----Note----- In the first example, the best possible schedule is: [90], [30, 50], [40, 60]. Therefore, the minimum number of time slots required is 3. In the second example, each movie must be shown in a separate time slot, resulting in 4 time slots. In the third example, it is impossible to schedule the movies since even the shortest movie exceeds the maximum allowed duration of a time slot.","solution":"def min_time_slots(n, m, durations): Determines the minimum number of time slots required to show all the movies or returns -1 if it is impossible. Parameters: n (int): Number of movies m (int): Maximum duration of a single time slot durations (list of int): List of movie durations Returns: int: Minimum number of time slots required or -1 if impossible from itertools import combinations # Check if any movie duration is greater than m, if true return -1 if any(d > m for d in durations): return -1 # Aggregate the durations to minimize the number of slots durations.sort(reverse=True) slots = [] for duration in durations: placed_in_slot = False for slot in slots: if sum(slot) + duration <= m: slot.append(duration) placed_in_slot = True break if not placed_in_slot: slots.append([duration]) return len(slots) # Test cases print(min_time_slots(5, 120, [90, 30, 40, 50, 60])) # 3 print(min_time_slots(4, 100, [50, 60, 70, 80])) # 4 print(min_time_slots(3, 80, [90, 100, 20])) # -1"},{"question":"Alex has N events in a calendar. Each event is represented by a start time and an end time. An event is represented as a tuple (start, end) where \'start\' is the starting time and \'end\' is the ending time of the event. Alex wants to maximize the number of non-overlapping events he can attend. Two events are non-overlapping if one\'s start time is after or equal to the other\'s end time. Determine the maximum number of non-overlapping events Alex can attend. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N — the number of events. - The next N lines each contain two integers start and end — the start time and the end time of each event. ------ Output Format ------ For each test case, output a single integer — the maximum number of non-overlapping events Alex can attend. ------ Constraints ------ 1 ≤ T ≤ 500 1 ≤ N ≤ 5 × 10^{4} 1 ≤ start < end ≤ 10^{6} - The sum of N over all test cases does not exceed 2.5 × 10^{5}. ----- Sample Input 1 ------ 3 3 1 3 2 4 3 5 4 1 2 2 3 3 4 4 5 3 1 2 2 3 1 3 ----- Sample Output 1 ------ 2 4 2 ----- Explanation 1 ------ Test Case 1: The maximum number of non-overlapping events Alex can attend are (1, 3) and (3, 5). Test Case 2: Alex can attend all the events as they do not overlap. Test Case 3: The maximum number of non-overlapping events Alex can attend are (1, 2) and (2, 3) or (1, 2) and (1, 3).","solution":"def max_non_overlapping_events(events): # Sort events by their end times events.sort(key=lambda x: x[1]) current_end = 0 count = 0 for start, end in events: if start >= current_end: count += 1 current_end = end return count def process_test_cases(test_cases): results = [] for events in test_cases: result = max_non_overlapping_events(events) results.append(result) return results"},{"question":"Max, the Math enthusiast, loves solving challenging puzzles. One day, he came across an interesting problem on geometric shapes. He needs your help to solve it. Max has \'n\' rectangles, each represented by its length and width. He wants to know the number of distinct areas of these rectangles. Two rectangles are considered to have distinct areas if their areas are different. Your task is to help Max determine the number of distinct areas among the given rectangles. -----Input----- The first line contains an integer \'n\' (1 ≤ n ≤ 10^5) — the number of rectangles. Each of the next \'n\' lines contains two integers \'l\' and \'w\' (1 ≤ l, w ≤ 10^6) — the length and width of the rectangle. -----Output----- Print a single integer — the number of distinct areas. -----Examples----- Input 3 4 5 2 3 4 5 Output 2 Input 5 1 1 2 2 3 3 4 4 5 5 Output 5 -----Note----- In the first sample: The areas of the rectangles are 20, 6, and 20. Hence, the distinct areas are 20 and 6, resulting in 2 distinct areas. In the second sample: The areas of the rectangles are 1, 4, 9, 16, and 25. All areas are distinct, resulting in 5 distinct areas.","solution":"def distinct_areas(n, rectangles): Returns the number of distinct areas among the given rectangles. Parameters: n (int): The number of rectangles. rectangles (list of tuple): List of tuples where each tuple contains two integers (l, w) representing length and width of a rectangle. Returns: int: The number of distinct areas. areas = set() for l, w in rectangles: areas.add(l * w) return len(areas)"},{"question":"Patricia loves playing with strings and has a special interest in palindromes. A palindrome is a string that reads the same forward and backward. She has a collection of lowercase Latin letters and wants to form the longest possible palindrome using some or all of these letters. Given her set of letters, help Patricia determine the length of the longest palindrome that can be formed. -----Input----- The input consists of a single line containing a string s (1 leq |s| leq 10^5), comprising lowercase Latin letters. -----Output----- Display an integer representing the length of the longest palindrome that can be formed using the letters in s. -----Example----- Sample Input: abccccdd Sample Output: 7 Explanation: One possible longest palindrome that can be formed is \\"dccaccd\\", which has a length of 7. Note: The string does not have to be unique, and there are multiple valid solutions. The output should be the length of any one of the longest palindromes that can be formed.","solution":"def longest_palindrome(s): Returns the length of the longest palindrome that can be formed using the letters in string s. from collections import Counter letter_counts = Counter(s) length = 0 odd_found = False for count in letter_counts.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"You are given a list of integers representing the scores of participants in a contest. Your task is to determine the second highest distinct score in the list. If there is no second highest score (i.e., all scores are the same), output \\"No second highest score\\". ------ Input Format ------ - The first line contains a single integer N (the number of participants). - The second line contains N space-separated integers representing the scores of the participants. ------ Output Format ------ Output in a single line, the second highest distinct score or \\"No second highest score\\" if applicable. ------ Constraints ------ 2 ≤ N ≤ 10^{5} 1 ≤ scores[i] ≤ 10^{9} ----- Sample Input 1 ------ 5 2 4 6 6 3 ----- Sample Output 1 ------ 4 ----- explanation 1 ------ The distinct scores are [2, 3, 4, 6] and the second highest among them is 4. ----- Sample Input 2 ------ 4 7 7 7 7 ----- Sample Output 2 ------ No second highest score ----- explanation 2 ------ All the scores are the same, so there is no second highest distinct score.","solution":"def second_highest_score(n, scores): Returns the second highest distinct score in the list of scores or \\"No second highest score\\" if there is no second highest score. distinct_scores = set(scores) if len(distinct_scores) < 2: return \\"No second highest score\\" sorted_scores = sorted(distinct_scores, reverse=True) return sorted_scores[1] # Example usage: n = 5 scores = [2, 4, 6, 6, 3] print(second_highest_score(n, scores)) # Output: 4"},{"question":"Given an integer array `nums` of length `n`, you need to find all the possible unique triplets in the array which give the sum of zero. A triplet `(nums[i], nums[j], nums[k])` is considered valid if there is no other combination of these numbers already in the result. -----Input:----- The first line contains an integer n, the size of the array. The second line contains n integers, the elements of the array `nums`. -----Output:----- The output should be a list of lists, where each inner list represents a unique triplet (nums[i], nums[j], nums[k]) such that i ne j, i ne k, and j ne k, and nums[i] + nums[j] + nums[k] = 0. The triplets should be ordered in a lexicographically non-decreasing order. -----Constraints:----- - 0 leq n leq 10^3 - -10^5 leq nums[i] leq 10^5 -----Sample input----- 6 -1 0 1 2 -1 -4 -----Sample output----- [[-1, -1, 2], [-1, 0, 1]]","solution":"def three_sum(nums): Function to find all unique triplets in the array which give the sum of zero. nums.sort() n = len(nums) res = [] for i in range(n): if i > 0 and nums[i] == nums[i-1]: continue l, r = i + 1, n - 1 while l < r: s = nums[i] + nums[l] + nums[r] if s < 0: l += 1 elif s > 0: r -= 1 else: res.append([nums[i], nums[l], nums[r]]) while l < r and nums[l] == nums[l+1]: l += 1 while l < r and nums[r] == nums[r-1]: r -= 1 l += 1 r -= 1 return res"},{"question":"Given an array of N integers, find the smallest positive integer M that is not present in the array. If all positive integers up to the size of array length are present, return N+1. -----Input----- The first line of input contains an integer T denoting the number of test cases. Each of the following T lines contains an integer N, followed by N space-separated integers which represent the array for that test case. -----Output----- For each test case, output a single line containing the smallest missing positive integer as described above. -----Constraints----- - 1 ≤ T ≤ 5000 - 1 ≤ N ≤ 1000 - -10^6 ≤ Array Element ≤ 10^6 -----Example----- Input: 2 3 1 2 0 4 3 4 -1 1 Output: 3 2 -----Explanation----- First Example: The given array is [1, 2, 0]. The smallest positive integer not present in the array is 3. Second Example: The given array is [3, 4, -1, 1]. The smallest positive integer not present in the array is 2.","solution":"def find_smallest_missing_positive(t, test_cases): results = [] for i in range(t): n, array = test_cases[i][0], test_cases[i][1] present = [False] * (n + 1) for num in array: if 1 <= num <= n: present[num] = True smallest_missing_positive = n + 1 for j in range(1, n + 1): if not present[j]: smallest_missing_positive = j break results.append(smallest_missing_positive) return results"},{"question":"You are given an array of integers and you need to perform a series of operations to transform it. In each operation, you can: 1. Select an arbitrary subarray of the given array. 2. Add 1 to each element of the selected subarray. You need to find the minimum number of operations required to make all elements in the array equal. -----Input----- The first line contains one integer t (1 leq t leq 100) — the number of test cases. For each test case: - The first line contains one integer n (1 leq n leq 10^5) — the length of the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). The sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print the minimum number of operations required to make all elements in the array equal. -----Example----- Input: 3 3 4 4 4 4 3 1 2 1 5 1 1 1 1 1 Output: 0 2 0 -----Note----- In the first test case, all elements are already equal, so no operation is needed. In the second test case, you can perform the operations in the following way: - Select subarray [1, 2, 1] and add 1 to each element, resulting in [3, 2, 3, 2]. - Select subarray [2, 3, 2] and add 1 to each element, resulting in [3, 3, 3, 3]. In the third test case, all elements are already equal, so no operation is needed.","solution":"def min_operations_to_equalize(test_cases): results = [] for n, arr in test_cases: distinct_elements = len(set(arr)) results.append(distinct_elements - 1 if distinct_elements > 1 else 0) return results"},{"question":"Given an array of integers and a sequence of operations, your task is to perform the operations and output the resulting array. The operations can be of two types: 1. Add a value to a range of elements in the array. 2. Multiply a value to a range of elements in the array. You need to handle the operations efficiently. Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of operations, respectively. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial state of the array. - The next q lines describe operations. Each operation is either of the form: - `1 l r x` (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^9): Add x to each element in the subarray a[l...r]. - `2 l r y` (1 ≤ l ≤ r ≤ n, 1 ≤ y ≤ 10^9): Multiply y to each element in the subarray a[l...r]. Output: - Output the final state of the array after all q operations. Example: Input: ``` 5 3 1 2 3 4 5 1 1 3 2 2 2 5 3 1 3 5 1 ``` Output: ``` 3 18 31 39 48 ``` Explanation: 1. After the first operation (1 1 3 2), the array becomes [3, 4, 5, 4, 5]. 2. After the second operation (2 2 5 3), the array becomes [3, 12, 15, 12, 15]. 3. After the third operation (1 3 5 1), the array becomes [3, 12, 16, 13, 16].","solution":"def perform_operations(n, q, array, operations): for op in operations: if op[0] == 1: _, l, r, x = op for i in range(l-1, r): array[i] += x elif op[0] == 2: _, l, r, y = op for i in range(l-1, r): array[i] *= y return array"},{"question":"Given an array of integers, where each integer represents the height of a pillar, you are required to find the maximum area of a rectangle that can be formed between the pillars. A rectangle can only be formed by using the contiguous pillars and the height of the rectangle is determined by the shortest pillar among the selected contiguous pillars. Example: Input: heights = [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The rectangle can be formed by choosing the pillars with heights [5, 6] or [6, 5]. The height of the rectangle is determined by the shortest pillar, which is 5. The width is 2 pillars, so the area is 5*2 = 10. Input: heights = [2, 4] Output: 4 Explanation: The rectangle can be formed by choosing either of the single pillars with height 2 or 4. The maximum area is thus max(2, 4) = 4. Your Task: You don\'t need to read input or print anything. Complete the function `maxRectangleArea()` which takes list of integers `heights` as input and returns the maximum possible area of a rectangle. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ heights.length ≤ 10^5 1 ≤ heights[i] ≤ 10^4","solution":"def maxRectangleArea(heights): Returns the maximum possible area of a rectangle formed by contiguous pillars. Heights of the pillars are given in the list \'heights\'. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Lily is a library manager who needs to ensure that all the books in her library are accounted for. She is given a list of book IDs currently in the library, but some book IDs are missing. The list contains all integers from 1 to n, with some missing. Each book ID should appear only once. Write a program to help Lily find all the missing book IDs in the most efficient way possible. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer n denoting the total number of books that should be present. The second line contains n−m space-separated integers representing the book IDs currently in the library, where m is the number of missing book IDs. Output For each test case, output a single line containing the missing book IDs, sorted in ascending order. Constraints 1 ≤ T ≤ 10^4 1 ≤ n ≤ 10^5 Example Input: 2 10 1 2 3 4 6 7 8 9 10 7 1 2 4 5 6 Output: 5 3 7","solution":"def find_missing_books(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] present_books = test_cases[i][1] present_books_set = set(present_books) missing_books = [book for book in range(1, n + 1) if book not in present_books_set] results.append(\' \'.join(map(str, missing_books))) return results"},{"question":"JSON data parsing is a fundamental concept in data manipulation and web development. Given a JSON data of varying depths and structures, write a Python program to extract and print all the keys in a hierarchical order along with their respective levels. Example: Input: { \\"name\\": \\"John\\", \\"age\\": 30, \\"address\\": { \\"street\\": \\"123 Main St\\", \\"city\\": \\"Anytown\\", \\"postalCode\\": \\"123456\\" }, \\"phoneNumbers\\": [ { \\"type\\": \\"home\\", \\"number\\": \\"1234567890\\" } ] } Expected Output: name: level 1 age: level 1 address: level 1 street: level 2 city: level 2 postalCode: level 2 phoneNumbers: level 1 type: level 2 number: level 2 The keys you need to extract can be nested within objects or arrays, and your program should handle both cases appropriately. # Constraints: - The JSON objects can go up to a maximum depth of 10 levels. - The array elements are only objects, and not nested arrays. # Guidelines: 1. Write a main function that will read input JSON data from standard input. 2. Write a helper function that will recursively parse the JSON object and print each key along with its level. 3. Make sure to handle both objects and arrays properly during parsing. # Sample Input: { \\"id\\": 1, \\"name\\": \\"A green door\\", \\"price\\": 12.50, \\"tags\\": [\\"home\\", \\"green\\"], \\"dimensions\\": { \\"length\\": 2.0, \\"width\\": 0.5, \\"units\\": \\"meters\\" } } # Sample Output: id: level 1 name: level 1 price: level 1 tags: level 1 dimensions: level 1 length: level 2 width: level 2 units: level 2 Write your solution in Python, ensuring proper indentation and handling of nested structures. # Additional Notes: - Consider edge cases like empty objects, arrays, and deep nesting. - Utilize Python\'s in-built `json` library for initial JSON parsing.","solution":"import json def print_keys_with_levels(data, level=1): if isinstance(data, dict): for key, value in data.items(): print(f\\"{key}: level {level}\\") print_keys_with_levels(value, level + 1) elif isinstance(data, list): for item in data: print_keys_with_levels(item, level) def main(input_json): data = json.loads(input_json) print_keys_with_levels(data)"},{"question":"# Objective Given an integer `n`, generate an n x n matrix such that each cell (i, j) contains the value (i+1) times (j+1). # Input Format A single integer `n`, the size of the matrix. # Constraints 1 leq n leq 50 # Output Format Print the n x n matrix where each element at cell (i, j) holds the value (i+1) times (j+1). Each row of the matrix should be printed in a new line, with each element of the row separated by a single space. # Example Input ```0 3 ``` # Example Output ```0 1 2 3 2 4 6 3 6 9 ``` # Explanation - For `n = 3`, the matrix is: ``` 1*1 1*2 1*3 2*1 2*2 2*3 3*1 3*2 3*3 ``` - Which results in: ``` 1 2 3 2 4 6 3 6 9 ```","solution":"def generate_matrix(n): Generate an n x n matrix such that each cell (i, j) contains the value (i+1) * (j+1). matrix = [] for i in range(n): row = [] for j in range(n): row.append((i + 1) * (j + 1)) matrix.append(row) return matrix"},{"question":"A robot is placed in a 2D grid and can move in four possible directions: left, right, up, and down. The robot has the goal to reach a target position (X_t, Y_t) starting from a given position (X_0, Y_0). You need to determine the number of distinct shortest paths the robot can take to reach the target. Constraints * -10 leq X_0, X_t, Y_0, Y_t leq 10 Input The input is given in the following format: X_0 Y_0 X_t Y_t Output Print the number of distinct shortest paths to reach from (X_0, Y_0) to (X_t, Y_t). Example Input 0 0 2 2 Output 6 Explanation The robot has the following distinct shortest paths to move from (0, 0) to (2, 2): 1. Right, Right, Up, Up 2. Right, Up, Right, Up 3. Right, Up, Up, Right 4. Up, Up, Right, Right 5. Up, Right, Right, Up 6. Up, Right, Up, Right","solution":"from math import comb def count_paths(x0, y0, xt, yt): Returns the number of distinct shortest paths from (x0, y0) to (xt, yt). # Calculate the differences in x and y coordinates dx = abs(xt - x0) dy = abs(yt - y0) # The number of distinct paths is given by the binomial coefficient C(dx + dy, dx) return comb(dx + dy, dx)"},{"question":"A farmer wants to organize the apples he picked in a special pattern to create a fruit display. The farmer has a number N that determines the pattern. Help the farmer to code the pattern display. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, an integer N. -----Output:----- For each test case, output the pattern as described below. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 50 -----Sample Input:----- 2 3 5 -----Sample Output:----- A BB CCC A BB CCC DDDD EEEEE","solution":"def apple_display_pattern(N): pattern = [] for i in range(1, N + 1): pattern.append(chr(64 + i) * i) return pattern def generate_patterns_for_test_cases(test_cases): results = [] for N in test_cases: results.append(apple_display_pattern(N)) return results"},{"question":"You are a junior database administrator and have been assigned the task of updating usernames in a table. The usernames must be updated to be all lowercase without any leading or trailing whitespace. Because the usernames could potentially contain a mix of upper and lower case letters, as well as extra spaces, it\'s important to sanitize input. The table structure is simple: ``` CREATE TABLE users ( user_id INTEGER PRIMARY KEY, username VARCHAR(255) ); ``` Your goal is to write a SQL statement that will update all the usernames in the `users` table according to the following rules: - Convert all characters in the `username` field to lowercase. - Remove any leading or trailing spaces from the `username` field. Write an SQL statement to accomplish this task.","solution":"def generate_update_usernames_sql(): return UPDATE users SET username = LOWER(TRIM(username));"},{"question":"You are given a camera surveillance system that is installed in a secure facility. The facility consists of a linear hallway with \'N\' doors, where each door is represented by a unique number from 1 to N. Cameras are placed in such a way that each camera can monitor exactly \'K\' consecutive doors. Your goal is to determine the minimum number of cameras needed to monitor all the doors in the hallway. Your task is to write a function that takes in the number of doors N and the number of doors each camera can monitor K, and outputs the minimum number of cameras required. INPUT: The input consists of two integers N and K separated by a space where: - 1 ≤ N ≤ 10^9 - 1 ≤ K ≤ 10^9 OUTPUT: Output a single integer, the minimum number of cameras needed. SAMPLE INPUT 1 10 3 SAMPLE OUTPUT 1 4 Explanation: To monitor 10 doors with each camera covering 3 consecutive doors, the minimum number of cameras required is 4: - Camera 1 covers doors 1 to 3 - Camera 2 covers doors 4 to 6 - Camera 3 covers doors 7 to 9 - Camera 4 covers door 10 SAMPLE INPUT 2 20 5 SAMPLE OUTPUT 2 4 Explanation: To monitor 20 doors with each camera covering 5 consecutive doors, the minimum number of cameras required is 4: - Camera 1 covers doors 1 to 5 - Camera 2 covers doors 6 to 10 - Camera 3 covers doors 11 to 15 - Camera 4 covers doors 16 to 20","solution":"def minimum_cameras(N, K): Returns the minimum number of cameras required to monitor N doors, each camera covering K consecutive doors. # We need to get the ceiling of N divided by K return -(-N // K)"},{"question":"Design a function that takes a 2D matrix representing a maze and an integer that specifies the maximum number of steps a user can move, and then prints all possible unique coordinates the user can be at within those steps. The user can start at any point in the maze and move up, down, left, or right to adjacent cells (not diagonally). Consider the following constraints: - The user cannot move outside the maze boundaries. - The user cannot move to cells that contain an obstacle (\'#\'). - Each cell in the maze is either empty (\'.\') or contains an obstacle (\'#\'). The function should receive the following inputs: 1. An integer `n` representing the number of rows in the maze. 2. An integer `m` representing the number of columns in the maze. 3. An integer `k` representing the maximum number of steps the user can move. 4. A 2D matrix `maze` of size `n x m`, where each cell is either \'.\' or \'#\'. Your task is to print a set of tuples representing the possible unique coordinates the user can be at within the specified steps. ----- Input: The first line contains three integers `n`, `m` and `k` representing the number of rows, the number of columns, and the maximum number of steps respectively (1 leq n, m leq 1000 and 1 leq k leq 10^6). The next `n` lines each contain `m` characters, representing the maze where \'.\' is an empty cell and \'#\' is an obstacle. Output: Print a set containing tuples of integers (x, y) which are the coordinates the user can be in within exactly `k` steps. ----- Example: Input: 5 6 3 ...... .#..#. .... .....# #..... Output: {(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 0), (1, 2), (1, 3), (2, 0), (3, 0), (1, 1), (3, 1), (3, 2), (3, 3), (4, 0)} Explanation: Starting from any cell, the user can move up to 3 steps in any direction as long as they do not go out of bounds or hit an obstacle. The output is a set of all unique positions the user can reach within those 3 steps. Steps: 1. Initialize an empty set to track visited coordinates. 2. Create a queue to perform breadth-first search (BFS) starting from each cell. 3. For each cell, perform BFS while tracking the number of steps taken. 4. If the maximum steps (`k`) is reached, stop and record the coordinates. 5. Print the set of unique coordinates.","solution":"def possible_coordinates(n, m, k, maze): Returns a set of all possible unique coordinates the user can be at within the specified steps in the maze. from collections import deque def bfs(start_x, start_y): Performs BFS to find all reachable cells from a starting point within k steps. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start_x, start_y, 0)]) visited = set([(start_x, start_y)]) while queue: x, y, steps = queue.popleft() if steps > k: continue reachable.add((x, y)) for dir in directions: nx, ny = x + dir[0], y + dir[1] if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and maze[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) reachable = set() for i in range(n): for j in range(m): if maze[i][j] == \'.\': bfs(i, j) return reachable"},{"question":"In a certain kingdom, there are n cities connected by m bidirectional roads. Each road connects two different cities and has a travel cost associated with it. The king wants to select a subset of these roads to build a special infrastructure project that satisfies the following conditions: 1. Every city in the kingdom must be connected directly or indirectly through the selected roads. 2. The cost of the infrastructure project should be minimized. You are required to help the king by finding the minimum possible cost to connect all the cities under the given conditions. -----Input----- The first line of input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000), the number of cities and the number of roads, respectively. The next m lines describe the roads. Each road is given as three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000), where u and v are the cities the road connects, and w is the cost of traveling that road. -----Output----- Print the minimum cost to connect all the cities in the kingdom. If it is impossible to connect all the cities, print \\"IMPOSSIBLE\\" instead. -----Examples----- Input 4 5 1 2 1 1 3 4 1 4 3 2 3 2 3 4 5 Output 6 Input 3 1 1 2 5 Output IMPOSSIBLE -----Note----- In the first sample test, the minimum cost to connect all cities is obtained by selecting the roads with costs 1, 2, and 3, which connect all four cities with a total cost of 6. In the second sample test, it is impossible to connect all three cities with just one road, hence the output is \\"IMPOSSIBLE\\".","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimum_cost_to_connect_all_cities(n, m, roads): if n == 1: return 0 edges = sorted(roads, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) e = 0 i = 0 result = [] while e < n - 1: if i >= len(edges): return \\"IMPOSSIBLE\\" u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append(w) union(parent, rank, x, y) return sum(result)"},{"question":"You are given an array of integers, where every element appears twice except for one. Find that single one. Your algorithm should have a linear runtime complexity. Try to implement it without using extra memory. # Input The first line contains an integer, n (1 ≤ n ≤ 10^6), denoting the number of elements in the array. The second line contains n space-separated integers, each representing an element in the array. It is guaranteed that every element except for one appears twice. # Output Print the single element that does not have a duplicate. # Examples Input: 5 1 2 3 2 1 Output: 3 Input: 7 4 1 2 1 2 4 5 Output: 5 # Note In the first example, the number 3 is the only number that does not appear twice. Therefore, the output is 3. In the second example, the number 5 is the only number that does not appear twice. Therefore, the output is 5.","solution":"def single_number(nums): Returns the single number in the list which appears only once, while other numbers appear exactly twice. single = 0 for num in nums: single ^= num return single"},{"question":"Mahmoud and his friend are playing a game! They each have an integer, and they take turns guessing the other player\'s integer. Mahmoud has an integer ( x ) and his friend has an integer ( y ). Both ( x ) and ( y ) are initially unknown to the other player. To guess the value, each player can ask a question in the following form: - \\"Is your integer greater than ( k )?\\" where ( k ) is any integer. The other player must respond with \\"Yes\\" or \\"No\\". The players take turns asking questions, starting with Mahmoud. Your task is to implement the game such that you, playing as Mahmoud, guess the integer ( y ) held by the friend in as few questions as possible. It is guaranteed that: - ( 0 leq y < 2^{30} ) # Input - On each turn, interact with the integer ( y ) by reading a response from the friend\'s answers as \\"Yes\\" or \\"No\\". # Output - For each question, output a query in the form of \\"Is your integer greater than ( k )?\\". - Once you\'ve determined ( y ), output \\"Your integer is y\\" without quotes, where ( y ) is the calculated value. # Example Interaction Example scenario where ( y = 20 ): Input: ``` Is your integer greater than 30? No Is your integer greater than 15? Yes Is your integer greater than 22? No Is your integer greater than 18? Yes Is your integer greater than 20? No Is your integer greater than 19? Yes Your integer is 20 ``` - Note: In the example, each response corresponds to a single question from Mahmoud to his friend. # Constraints: - It is guaranteed that you can guess the integer with no more than 30 questions.","solution":"def guess_integer(y): Guesses the integer y held by a friend using a binary search strategy. low, high = 0, 2**30 - 1 while low < high: mid = (low + high) // 2 if is_greater(y, mid): low = mid + 1 else: high = mid return low def is_greater(y, k): Mock response function to simulate the friend\'s answer. For test purposes, it returns whether y is greater than k. return y > k"},{"question":"Write a function that takes a list of integers and an integer `k`. The function should return the maximum average sum of any subarray of length `k`. The function should handle both positive and negative integers and should ensure optimal time complexity. Example: ```python max_average_subarray([1,12,-5,-6,50,3], 4) == 12.75 # Subarray [12, -5, -6, 50] has maximum average of (12 + (-5) + (-6) + 50) / 4 = 12.75 max_average_subarray([5,5,5,5], 2) == 5.0 # Subarray [5, 5] has maximum average of (5 + 5) / 2 = 5.0 ```","solution":"def max_average_subarray(arr, k): Return the maximum average sum of any subarray of length k. arr: List of integers k: Integer if not arr or k <= 0 or k > len(arr): raise ValueError(\\"Invalid input\\") current_sum = sum(arr[:k]) max_sum = current_sum for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum / k"},{"question":"Problem B: Maximum Subarray Product Given an array of integers, find the contiguous subarray within an array (containing at least one number) which has the largest product. The subarray can contain both positive and negative numbers. Input The first line of input contains an integer n (1 <= n <= 10^5), the length of the array. The second line contains n integers x1, x2, ..., xn (-10 <= xi <= 10), representing the elements of the array. Output Print a single integer, the maximum product of a contiguous subarray. Example Input 5 2 3 -2 4 -1 Output 48 Input 3 -2 0 -1 Output 0 Note In the first example, the subarray [2, 3, -2, 4, -1] has the maximum product of 48. In the second example, the array itself has the maximum product of 0.","solution":"def max_subarray_product(arr): Returns the maximum product of a contiguous subarray within an array. if not arr: return 0 max_product = min_product = result = arr[0] for number in arr[1:]: if number < 0: max_product, min_product = min_product, max_product max_product = max(number, max_product * number) min_product = min(number, min_product * number) result = max(result, max_product) return result"},{"question":"You are given two strings `a` and `b`, both of length `n`. You can perform the following operation on these strings any number of times: - Choose an index `i` (`1 <= i <= n`), and swap the characters `a_i` and `b_i`. Determine the minimum number of swaps required to make string `a` equal to string `b`, or report that it is impossible. -----Input----- The first line contains an integer `n` (`1 <= n <= 10^5`), the length of the strings `a` and `b`. The second line contains the string `a` of length `n` consisting of lowercase English letters. The third line contains the string `b` of length `n` consisting of lowercase English letters. -----Output----- If it is impossible to make the strings `a` and `b` equal using the given operations, print `-1`. Otherwise, print one integer — the minimum number of swaps you have to perform. -----Examples----- Input 5 abacb bcaba Output 2 Input 3 abc cba Output 1 Input 4 abcd abcd Output 0 Input 6 qwerty ytrewq Output 3","solution":"def min_swaps_to_equal_strings(n, a, b): if sorted(a) != sorted(b): return -1 swap_count = 0 a = list(a) b = list(b) for i in range(n): if a[i] != b[i]: for j in range(i, n): if a[i] == b[j] and b[i] == a[j]: a[i], b[i] = b[i], a[i] a[j], b[j] = b[j], a[j] swap_count += 1 break return swap_count"},{"question":"A delivery company has a fleet of cars. Each car has a specific fuel capacity and fuel consumption rate. Given a list of deliveries with their distances, your task is to optimize the usage of the fleet to minimize the total number of cars used to complete all deliveries. Each car can only be used once and must start with a full tank of fuel. Each delivery must be serviced by an individual car that can travel the distance required for the delivery without refueling. Input The first line contains an integer n (1 ≤ n ≤ 1000), representing the number of delivery cars. The second line contains n integers ci separated by spaces (1 ≤ ci ≤ 1000), representing the fuel capacity of each car. The third line contains n integers ri separated by spaces (1 ≤ ri ≤ 1000), representing the fuel consumption rate of each car ( how many miles per gallon the car can travel). The fourth line contains an integer m (1 ≤ m ≤ 1000), representing the number of deliveries. The fifth line contains m integers di separated by spaces (1 ≤ di ≤ 1000), representing the distance of each delivery. Output Output the minimal number of cars required to service all the deliveries. If it is not possible to service all deliveries, output -1. Examples Input 5 10 20 30 40 50 1 2 3 4 5 3 30 40 50 Output 3 Input 5 15 25 5 10 30 5 10 3 4 7 4 100 200 300 400 Output -1 Note For the first example, we can assign the deliveries to the cars as follows: - Car 1 with a capacity of 10 and consumption rate 1 can travel 10 miles. - Car 2 with a capacity of 20 and consumption rate 2 can travel 10 miles. - Car 3 with a capacity of 30 and consumption rate 3 can travel 10 miles. - Car 4 with a capacity of 40 and consumption rate 4 can travel 10 miles. - Car 5 with a capacity of 50 and consumption rate 5 can travel 10 miles. So, we can use car 2 for delivery 1, car 4 for delivery 2, and car 5 for delivery 3, resulting in the usage of 3 cars. For the second example, no car can travel the required distance for any delivery, so the output is -1.","solution":"def min_cars(n, capacities, rates, m, distances): # Calculate the maximum distance each car can travel max_distances = [capacities[i] * rates[i] for i in range(n)] # Sort cars by their max distance they can travel in descending order max_distances.sort(reverse=True) # Sort deliveries by distance in descending order distances.sort(reverse=True) # Index to track the current car car_index = 0 used_cars = 0 for distance in distances: # Find a car that can handle this delivery while car_index < n and max_distances[car_index] < distance: car_index += 1 if car_index == n: return -1 used_cars += 1 car_index += 1 return used_cars"},{"question":"A warehouse management system needs to optimize the arrangement of boxes in storage. Each box has a unique weight, and the objective is to create a balanced arrangement with the individual box weights as equal as possible in two groups. To achieve this, you have to determine the minimum absolute difference between the sum of weights in the two groups. Input First line of the input contains the number of test cases T. It is followed by T lines. Each line begins with an integer N (number of boxes), followed by N space-separated integers representing the weights of the boxes. Output For each test case, print a single integer - the minimum absolute difference between the sum of weights in the two groups. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 30 1 ≤ weight ≤ 1000 SAMPLE INPUT 3 4 1 2 3 4 3 10 20 15 5 1 1 1 1 1 SAMPLE OUTPUT 0 5 1","solution":"def min_difference_partition(weights): total_sum = sum(weights) n = len(weights) # Initialize a DP table dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] # Base case: zero sum is always possible for i in range(n + 1): dp[i][0] = True # Fill the partition DP table for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if weights[i-1] <= j: dp[i][j] = dp[i-1][j-weights[i-1]] or dp[i-1][j] else: dp[i][j] = dp[i-1][j] # Find the maximum j which can be reached for j in range(total_sum // 2, -1, -1): if dp[n][j]: s1 = j break s2 = total_sum - s1 return abs(s2 - s1) def solve(t, test_cases): results = [] for case in test_cases: N, weights = case[0], case[1:] result = min_difference_partition(weights) results.append(result) return results # Example Input/Output if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): N = int(data[index]) weights = list(map(int, data[index+1:index+1+N])) test_cases.append([N] + weights) index += N + 1 results = solve(T, test_cases) for result in results: print(result)"},{"question":"A well-known problem at the company is estimating the workload leading up to product releases. You are asked to help with this task by analyzing the working hours of employees over the days before a release. To do this, you need to write a program that performs the following: - Receive an integer M indicating the number of days leading up to the release. - Then receive M integers h_0, h_1, ..., h_{M-1}, where each h_i represents the number of hours an employee worked on the i-th day. Your task is to find the day on which the hours worked is closest to the median of all hours worked during these M days. If there are multiple such days, select the day with the smallest index. Constraints: - 1 leq M leq 100 - 1 leq h_i leq 24 Input Input is given from Standard Input in the following format: M h_{0} h_{1} ... h_{M-1} Output Print the answer. Example Input 5 8 6 7 5 6 Output 1 Input 4 4 5 6 5 Output 1","solution":"def find_closest_to_median(M, hours): # Helper function to calculate the median def median(nums): sorted_nums = sorted(nums) n = len(sorted_nums) mid = n // 2 if n % 2 == 0: return (sorted_nums[mid - 1] + sorted_nums[mid]) / 2.0 else: return sorted_nums[mid] med = median(hours) closest_index = 0 smallest_difference = abs(hours[0] - med) for i in range(1, M): difference = abs(hours[i] - med) if difference < smallest_difference: smallest_difference = difference closest_index = i elif difference == smallest_difference and i < closest_index: closest_index = i return closest_index # Example usage: # M = 5 # hours = [8, 6, 7, 5, 6] # print(find_closest_to_median(M, hours)) # Output: 1"},{"question":"A village has a magical well that grants wishes. Every time a villager throws a coin into the well, a wish is made and the well records the amount of coins thrown and the time at which the coins were thrown. However, the well\'s magic only allows it to process wishes made on even-numbered minutes (e.g., 2, 4, 6, ...). You are appointed as the keeper of the well and are required to calculate the total number of coins thrown into the well for even-numbered minutes. Input::: First line of input contains N, denoting the number of coin throws. Next N lines each contain two space-separated integers denoting the amount of coins (Ci) thrown and the minute (Ti) at which they were thrown. Output::: Print the total number of coins thrown at even-numbered minutes. If no coins were thrown at even-numbered minutes, print 0. Constraints::: 1 ≤ N ≤ 10^5, 1 ≤ Ci ≤ 10^4, 1 ≤ Ti ≤ 10^6. SAMPLE INPUT 5 50 1 30 2 20 4 10 7 60 6 SAMPLE OUTPUT 110","solution":"def total_coins_on_even_minutes(N, throws): Return the total number of coins thrown at even-numbered minutes. Parameters: N (int): Number of coin throws throws (list): List of tuples where each tuple contains (Ci, Ti) Returns: int: Total coins thrown at even-numbered minutes total_coins = 0 for Ci, Ti in throws: if Ti % 2 == 0: total_coins += Ci return total_coins # Example usage N = 5 throws = [(50, 1), (30, 2), (20, 4), (10, 7), (60, 6)] print(total_coins_on_even_minutes(N, throws)) # Output: 110"},{"question":"Write a function `isValidIPv4` that takes a string as input and returns true if the string is a valid IPv4 address, and false otherwise. A valid IPv4 address is an address that follows the format `x.x.x.x`, where `x` is a number between 0 and 255. Leading zeros are not allowed for any of the numbers. For example: isValidIPv4(\\"192.168.1.1\\"); // true isValidIPv4(\\"255.255.255.255\\"); // true isValidIPv4(\\"256.100.50.0\\"); // false isValidIPv4(\\"192.168.01.1\\"); // false isValidIPv4(\\"192.168.1\\"); // false Hint: Consider using string splitting and integer conversion functions available in your programming language of choice.","solution":"def isValidIPv4(ip: str) -> bool: # Split the input string by \'.\' parts = ip.split(\'.\') # Check if there are exactly four parts if len(parts) != 4: return False for part in parts: # Check if part is a digit and doesn\'t have leading zeros if not part.isdigit() or (len(part) > 1 and part[0] == \'0\'): return False # Convert part to integer and check if it\'s between 0 and 255 if not 0 <= int(part) <= 255: return False return True"},{"question":"Write a function that takes a list of integers and a target integer. The function should return a tuple of two integers from the list that sum up to the target integer. If no such integers exist in the list, return an empty tuple. The integers in the list are guaranteed to be unique and the list will have at least two elements. For example, if the input list is `[10, 15, 3, 7]` and the target integer is `17`, the function should return `(10, 7)` since 10 + 7 equals 17. If the input list is `[1, 2, 3, 4]` and the target integer is `8`, the function should return an empty tuple as no two integers sum up to the target. Ensure your solution runs in O(n) time complexity where n is the number of elements in the list.","solution":"def two_sum(lst, target): Returns a tuple of two integers from the list that sum up to the target integer. If no such integers exist in the list, returns an empty tuple. seen = {} for num in lst: complement = target - num if complement in seen: return (complement, num) seen[num] = True return tuple()"},{"question":"Write a Python function that takes two arguments: a list of integers and an integer `k`. The function should return the `k`-th largest unique element in the list. If there are fewer than `k` unique elements, return `-1`. # Example ```python def kth_largest_unique(nums, k): # Your code here print(kth_largest_unique([5, 3, 4, 2, 5, 2, 5], 3)) # Output: 3 print(kth_largest_unique([1, 2, 3, 4, 5], 6)) # Output: -1 ``` # Constraints - All numbers in the list are integers between `-10^6` and `10^6`. - The length of the list is between `1` and `10^5`. - The integer `k` is a positive integer.","solution":"def kth_largest_unique(nums, k): Returns the k-th largest unique element in the list. If there are fewer than k unique elements, return -1. unique_nums = list(set(nums)) unique_nums.sort(reverse=True) if k <= len(unique_nums): return unique_nums[k-1] else: return -1"},{"question":"A popular online marketplace is hosting a sale event. During this sale, the prices of items can fluctuate each day. You are given the prices of an item for the next n days. Your goal is to determine the maximum profit you can achieve by completing at most one transaction (buy one and sell one item). Write a function `maximumProfit(prices)` that takes an array of integers `prices`, where `prices[i]` is the price of the item on the i-th day, and returns the maximum profit you can achieve by completing at most one transaction. If no profit can be achieved, return 0. -----Input----- The input consists of a single list of integers `prices` (1 ≤ len(prices) ≤ 10^5, 0 ≤ prices[i] ≤ 10^9). -----Output----- Return a single integer representing the maximum profit achievable. If no transaction is beneficial, return 0. -----Examples----- Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell. Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done and the maximum profit is 0. Input: [2, 4, 1] Output: 2 Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2. Note that the profit cannot be achieved by buying on day 2 and selling on day 3 because the price decreases to 1 on day 3. -----Note----- In the first example, the maximum profit is achieved by buying at the lowest price (1 on day 2) and selling at the highest price (6 on day 5), resulting in a profit of 5. In the second example, the prices are consistently decreasing, so no profitable transactions can be made, thus the maximum profit is 0.","solution":"def maximumProfit(prices): if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"A large e-commerce company wants to optimize their website performance. They have a website that allows users to search for products, and they track each user\'s search query. The company is interested in identifying the most frequent search query made by users. However, if there are multiple queries with the same highest frequency, they want to select the lexicographically smallest one. You\'re tasked with writing a program to determine the most frequent search query from the provided list of queries. If there is a tie, select the smallest query in lexicographic order. Input The first line of input contains an integer n (1 ≤ n ≤ 100,000), the number of queries. Each of the next n lines contains one search query string. Each query only contains lowercase English letters and has length between 1 and 100. Output Print a single string — the most frequent search query. If there are multiple such queries, output the smallest one lexicographically. Examples Input 6 apple banana apple orange banana apple Output apple Input 5 dog zebra dog elephant zebra Output dog Note In the first sample, \\"apple\\" appears 3 times, \\"banana\\" appears 2 times, and \\"orange\\" appears once. Therefore, the answer is \\"apple\\". In the second sample, both \\"dog\\" and \\"zebra\\" appear twice. Among these, \\"dog\\" is lexicographically smaller, so the answer is \\"dog\\".","solution":"def most_frequent_query(n, queries): from collections import Counter # Count the frequency of each query query_count = Counter(queries) # Find the maximum frequency max_freq = max(query_count.values()) # Extract queries with the highest frequency and find the lexicographically smallest one most_frequent_queries = [query for query, count in query_count.items() if count == max_freq] return min(most_frequent_queries) # Example usage: # n = 6 # queries = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] # print(most_frequent_query(n, queries)) # Output: apple"},{"question":"Olivia is learning about combinations and recursive sequences. She came across the following problem: Given a series of integers where each integer is the number of steps a person can climb either 1 step or 2 steps at a time, determine how many distinct ways the person can climb to the top. Input: The first line will contain an integer T denoting the number of test cases. Each of the next T lines contains an integer n, the number of steps. Output: For each test case, print the number of distinct ways the person can climb to the top modulo 10^9+7. Constraints: 1 ≤ T ≤ 10^5 0 ≤ n ≤ 10^9 Note: The result for n = 0 should be considered as 1 (one way to stay at the bottom). SAMPLE INPUT 3 2 3 4 SAMPLE OUTPUT 2 3 5","solution":"MOD = 10**9 + 7 def steps_to_climb(n): Returns the number of distinct ways to climb n steps using 1 or 2 steps at a time. if n == 0: return 1 if n == 1: return 1 first, second = 1, 1 for _ in range(2, n + 1): result = (first + second) % MOD first, second = second, result return result def solve(test_cases): results = [] for n in test_cases: results.append(steps_to_climb(n)) return results"},{"question":"You are given a grid of size n × m consisting of lowercase English letters and the characters \'#\' and \'.\'. Your task is to find the largest rectangle in this grid that is entirely filled with the character \'#\'. The cells filled with \'.\' can be ignored. Assume that the rows of the grid are numbered from 1 to n from top to bottom and the columns are numbered from 1 to m from left to right. A cell in the grid can be represented as (i, j), where i is the row number and j is the column number. A subrectangle is defined by four integers d, u, l, r (1 ≤ d ≤ u ≤ n; 1 ≤ l ≤ r ≤ m). We will assume that the subrectangle contains cells (i, j) where d ≤ i ≤ u and l ≤ j ≤ r. The area of the subrectangle is the number of cells it contains. Input The first line contains two integers n and m (1 ≤ n, m ≤ 500). Next n lines contain m characters each, representing the grid. The grid only contains lowercase English letters and the characters \'#\' and \'.\'. Output Print a single integer — the area of the largest subrectangle that contains only the character \'#\'. If there is no such rectangle, print 0. Examples Input 3 4 a#b. a# c# Output 6 Input 4 5 # ... .#. # Output 6 Input 1 3 abc Output 0","solution":"def largest_rectangle(grid): n = len(grid) m = len(grid[0]) # Convert grid to have 0 for \'.\' and 1 for \'#\' binary_grid = [[1 if cell == \'#\' else 0 for cell in row] for row in grid] # Create an auxiliary array to store width of consecutive \'#\' ending at each cell width = [[0]*m for _ in range(n)] # Fill the width array for i in range(n): for j in range(m): if binary_grid[i][j] == 1: if j == 0: width[i][j] = 1 else: width[i][j] = width[i][j-1] + 1 # Find the maximum area rectangle max_area = 0 for j in range(m): for i in range(n): if binary_grid[i][j] == 1: min_width = width[i][j] for k in range(i, -1, -1): if binary_grid[k][j] == 0: break min_width = min(min_width, width[k][j]) max_area = max(max_area, min_width * (i - k + 1)) return max_area"},{"question":"In a kingdom far away, there is a tradition of constructing pyramid-like structures using stones for ceremonies. Each year, the kingdom hosts a competition to see who can build the highest pyramid. The competition is governed by stringent rules regarding the shape and balance of the pyramid. The pyramid must consist of levels, and each level must have exactly one stone more than the level above it. Given a number `n` which is the total number of stones available, you are required to determine the maximum height of the pyramid that can be built following the rules. Rules: 1. The first (top) level has 1 stone. 2. The second level has 2 stones. 3. The third level has 3 stones, and so on. You need to find the maximum height `h`, such that the total number of stones used does not exceed `n`. Input The input consists of multiple test cases. The first line contains an integer `t` (1 ≤ t ≤ 10^4) representing the number of test cases. Each of the next `t` lines contains an integer `n` (1 ≤ n ≤ 2 * 10^9) representing the total number of stones available for each test case. Output For each test case, output a single integer `h` — the maximum height of the pyramid that can be built with `n` stones. Example Input 3 1 6 10 Output 1 3 4","solution":"def max_pyramid_height(stone_counts): results = [] for n in stone_counts: h = 0 total_stones = 0 level = 1 while total_stones + level <= n: total_stones += level h += 1 level += 1 results.append(h) return results"},{"question":"Given a list of N integers where each integer represents the lifespan of a battery in hours. Your goal is to maximize the total operational hours using exactly K batteries in a device. The device can hold exactly K batteries at a time and must use K batteries simultaneously. Write a program to determine the maximum operational hours of the device when using any combination of K batteries from the given list. Input Format - The first line contains two integers N and K. - The second line contains N integers, which are the lifespans of the batteries. Output Format Print a single integer which is the maximum operational hours using exactly K batteries. Input Constraints - 1 < N ≤ 100 - 1 ≤ K ≤ N - Lifespan of batteries are positive integers that fit in a 32-bit integer. SAMPLE INPUT 6 3 10 20 30 40 50 60 SAMPLE OUTPUT 150","solution":"def max_operational_hours(N, K, battery_lifespans): Find the maximum operational hours using exactly K batteries from the list. :param N: int - number of batteries :param K: int - number of batteries to use :param battery_lifespans: list[int] - list of battery lifespans :return: int - maximum operational hours # Sort the battery lifespans in descending order sorted_battery_lifespans = sorted(battery_lifespans, reverse=True) # Sum the top K elements return sum(sorted_battery_lifespans[:K])"},{"question":"Calculate Fibonacci Sequence The Fibonacci sequence is a series of numbers where the next number is found by adding up the two numbers before it. Starting with 0 and 1, the sequence goes: 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on. Write a function `fibonacci(n)` that returns the first `n` elements of the Fibonacci sequence. Example usage: ``` n = 5 fibonacci(n) -> [0, 1, 1, 2, 3] ``` Note: 1. If `n` is less than or equal to 0, return an empty list. 2. Your function should handle cases where `n` is a positive integer.","solution":"def fibonacci(n): Returns the first n elements of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Design a Cache system that follows the Least Recently Used (LRU) policy without using any built-in libraries. A Cache is a data structure that stores a subset of elements from a larger data set, so future requests for those elements are served faster. The LRU policy discards the least recently used items first. Under LRU, when the cache reaches its limit, it removes the least recently accessed element. To be specific, your design should include these functions: - **int get(int key)**: Return the value of the key if the key exists in the cache, otherwise return -1. - **void put(int key, int value)**: Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, remove the least recently used key. Implement the LRUCache class: class LRUCache: def __init__(self, capacity: int): Initialize the LRU cache with a positive size capacity. pass def get(self, key: int) -> int: Returns the value of the key if the key exists, otherwise returns -1. pass def put(self, key: int, value: int) -> None: Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity, remove the least recently used key. pass Example: ``` cache = LRUCache(2) cache.put(1, 1) cache.put(2, 2) cache.get(1) # returns 1 cache.put(3, 3) # evicts key 2 cache.get(2) # returns -1 (not found) cache.put(4, 4) # evicts key 1 cache.get(1) # returns -1 (not found) cache.get(3) # returns 3 cache.get(4) # returns 4 ``` Constraints: - 1 <= capacity <= 3000 - 0 <= key <= 10000 - 0 <= value <= 10^5 - At most 3 * 10^4 calls will be made to get and put.","solution":"class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = {} self.lru = [] def get(self, key: int) -> int: if key in self.cache: self.lru.remove(key) self.lru.append(key) return self.cache[key] else: return -1 def put(self, key: int, value: int) -> None: if key in self.cache: self.lru.remove(key) elif len(self.cache) >= self.capacity: oldest_key = self.lru.pop(0) del self.cache[oldest_key] self.cache[key] = value self.lru.append(key)"},{"question":"Given an array of integers `arr` of length `n`, split the array into two non-empty subsets such that the absolute difference between the sum of the elements in the first subset and the sum of the elements in the second subset is minimized. Identify the elements in each subset to achieve this minimal difference. Input The first line contains an integer `n` (2 ≤ n ≤ 100) — the number of elements in the array. The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 1000) — the elements of the array. Output In the first line, print the minimized absolute difference. In the second line, print the elements of the first subset. In the third line, print the elements of the second subset. Example Input 4 1 6 11 5 Output 1 1 6 5 11 Input 3 7 3 2 Output 2 7 3 2 Note In the first sample, the two subsets with the minimal absolute difference of sums are {1, 6, 5} and {11}, with a difference of 1. In the second sample, one possible way to split the array into two subsets with the minimal absolute difference is {7} and {3, 2}, resulting in a difference of 2.","solution":"def split_array_with_min_diff(arr): Splits the array into two subsets to minimize the absolute difference of their sums. total_sum = sum(arr) n = len(arr) target = total_sum // 2 dp = [[False] * (target + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n+1): for j in range(target + 1): dp[i][j] = dp[i-1][j] if j >= arr[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j-arr[i-1]] best = 0 for j in range(target, -1, -1): if dp[n][j]: best = j break subset1 = [] subset2 = arr[:] w = best for i in range(n, 0, -1): if not dp[i-1][w] and (w == 0 or dp[i-1][w-arr[i-1]]): subset1.append(arr[i-1]) subset2.remove(arr[i-1]) w -= arr[i-1] diff = abs((total_sum - best) - best) return diff, subset1, subset2"},{"question":"Balloons are being handed out to children at a local fair, and each balloon has a number written on it. The organizer wants to distribute exactly K balloons to each child such that no two children get the same set of numbers. Determine how many ways the organizer can distribute the balloons given the total number of balloons and the number K. Input: - The first line contains an integer T. T test cases follow. - The only line of each test case contains two integers N and K corresponding to the total number of balloons and the number of balloons each child should receive. Output: - For each test case, output the number of ways to select K balloons out of N such that each child gets a unique set of balloons. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^4 1 ≤ K ≤ N SAMPLE INPUT 2 5 3 7 2 SAMPLE OUTPUT 10 21","solution":"import math def ways_to_distribute_balloons(T, test_cases): Returns the number of ways to distribute K balloons out of N for each test case. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains two integers, N and K. Returns: list of int: List of results for each test case. results = [] for N, K in test_cases: result = math.comb(N, K) results.append(result) return results"},{"question":"You are given a list of n integers representing the height of skyscrapers in a straight line from left to right. You have the power to select any contiguous subarray of these skyscrapers and decrease the height of each skyscraper in that subarray by 1 unit in a single operation. Your task is to determine the minimum number of operations required to make all skyscrapers\' heights equal. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of skyscrapers. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1,000,000,000) — the initial heights of the skyscrapers. -----Output----- Print a single integer — the minimum number of operations required to make all skyscrapers\' heights equal. -----Examples----- Input 5 3 3 5 2 4 Output 3 Input 4 1 2 3 4 Output 4 Input 3 7 7 7 Output 0 -----Note----- In the first example, one way to make all skyscrapers\' heights equal in 3 operations is as follows: - Decrease the heights from index 3 to 3 by 1 unit: [3, 3, 4, 2, 4] - Decrease the heights from index 3 to 3 by 1 unit: [3, 3, 3, 2, 4] - Decrease the heights from index 4 to 5 by 1 unit: [3, 3, 3, 1, 3, 3] In the second example, you must decrease the heights of contiguous subarrays in 4 different operations to make all heights equal to 0. In the third example, all skyscrapers already have the same height, so no operation is needed.","solution":"def min_operations_to_equalize(heights): Returns the minimum number of operations required to make all skyscrapers\' heights equal. if not heights: return 0 return max(heights) - min(heights)"},{"question":"A company is organizing a team-building event where a pyramid-like structure needs to be assembled using blocks. The pyramid has multiple levels, and at each level `i`, there are `i` blocks. Each block at level `i` is directly supported by two blocks at level `i+1`. The company has an initial collection of blocks, and they need to know if it\'s possible to successfully build the pyramid using these blocks. Write a function that determines whether the pyramid can be constructed with a given number of levels and an initial collection of blocks with specified types and quantities. The pyramid is considered successfully built if all levels can be completely filled according to the rules. If the pyramid can be built, return \\"YES\\"; otherwise, return \\"NO\\". -----Input----- The first line contains two integers `L` (1 ≤ L ≤ 100) and `T` (1 ≤ T ≤ 50), representing the number of levels in the pyramid and the number of different block types available, respectively. The second line contains `T` integers where the `i-th` integer `b_i` (1 ≤ b_i ≤ 10^4) represents the quantity of the `i-th` type of block available. The third line contains `T` integers where the `i-th` integer `c_i` (1 ≤ c_i ≤ 100) represents the level compatibility of the `i-th` type of block, indicating up to which level (inclusive) that type of block can be used. -----Output----- Output \\"YES\\" if the pyramid can be built, otherwise \\"NO\\". -----Examples----- Input 3 2 10 20 3 3 Output YES Input 4 3 10 5 2 2 3 4 Output NO Input 5 4 15 10 6 8 5 4 4 3 Output YES -----Explanation----- In the first sample, the pyramid of 3 levels requires a total of 1 + 2 + 3 = 6 blocks. The total number of blocks available is 10 + 20 = 30, which is sufficient, and all types can be used up to the required level 3. In the second sample, although there are 3 types of blocks, the number of blocks of type 1 is insufficient to complete the higher levels. In the third sample, a pyramid with 5 levels requires 1 + 2 + 3 + 4 + 5 = 15 blocks, and the available blocks with their respective level compatibility are sufficient to build the entire pyramid.","solution":"def can_build_pyramid(L, T, b, c): Determines if the pyramid can be constructed with the given levels, blocks, and compatibilities. L: Number of levels in the pyramid T: Number of different block types b: List of integers representing the quantity of each type of block available c: List of integers representing the level compatibility of each type of block Returns \\"YES\\" if the pyramid can be built, otherwise \\"NO\\". # Calculate the total number of blocks needed total_blocks_needed = sum(range(1, L + 1)) # Calculate the total number of usable blocks total_blocks_available = 0 for i in range(T): if c[i] >= L: total_blocks_available += b[i] return \\"YES\\" if total_blocks_available >= total_blocks_needed else \\"NO\\""},{"question":"A security system for a bank\'s vault has DNA recognition technology. The system accepts an input sequence of DNA characters and matches it against the authorized DNA sequence. However, due to occasional transmission errors, the system allows for a certain number of mismatches (differences) between the input DNA sequence and the authorized DNA sequence. Your task is to write a function that determines if the input DNA sequence can be accepted by the system. The function should return `true` if the number of mismatches is within the acceptable limit, and `false` otherwise. INPUT The input consists of three lines: - The first line contains an integer, n, representing the length of the authorized DNA sequence. - The second line contains an integer, m, representing the maximum number of mismatches allowed. - The third line contains a string of length n, representing the authorized DNA sequence composed of characters \'A\', \'C\', \'G\', and \'T\'. - The fourth line contains a string of length n, representing the input DNA sequence also composed of characters \'A\', \'C\', \'G\', and \'T\'. OUTPUT The function should return `true` if the input DNA sequence can be accepted by the system with at most m mismatches, and `false` otherwise. CONSTRAINTS 1 ≤ n ≤ 1000 0 ≤ m ≤ n The DNA sequences only contain the characters \'A\', \'C\', \'G\', and \'T\'. SAMPLE INPUT 5 1 ACGTA ACGTT SAMPLE OUTPUT true Explanation The number of mismatches between the authorized DNA sequence and the input DNA sequence is 1 (\'A\' vs. \'T\'). Since the allowed number of mismatches is also 1, the function returns `true`.","solution":"def is_dna_accepted(n, m, authorized_dna, input_dna): Determines if the input DNA sequence can be accepted by the system with at most m mismatches. :param n: Length of the authorized DNA sequence :param m: Maximum number of mismatches allowed :param authorized_dna: The authorized DNA sequence :param input_dna: The input DNA sequence :return: True if the input DNA sequence is accepted, else False mismatches = 0 for i in range(n): if authorized_dna[i] != input_dna[i]: mismatches += 1 if mismatches > m: return False return mismatches <= m"},{"question":"In a faraway land, there exists a small village famous for its unique and magical trees. Each tree produces a variety of fruits, and the villagers have a tradition of celebrating the \\"Fruit Festival\\" every year. The festival includes a contest where participants are asked to find the most common fruit among some trees. You are given a series of trees in a line, each described by a string. Each character in the string represents a type of fruit. Your task is to write a program that finds the most common fruit in the given series of trees. If multiple fruits are equally common, return the lexicographically smallest fruit. Input The first input line contains an integer n (1 ≤ n ≤ 100), the number of trees. The next n lines each contain a string s, where (1 ≤ |s| ≤ 50), representing the types of fruits produced by each tree. Each character in the string is a lowercase English letter. Output Output a single character, the most common fruit among all trees. If there are multiple fruits with the same frequency, print the lexicographically smallest one. Example Input 4 apple banana cherry date Output a Input 3 kiwi kumquat kale Output k Note In the first example, the occurrences of fruits are as follows: a: 4, p: 2, l: 2, e: 2, b: 1, n: 2, t: 1, c: 1, h: 1, r: 1, y: 1, d: 1. Since \'a\' has the highest frequency, the output is \'a\'. In the second example, the occurrences of fruits are as follows: k: 4, i: 3, w: 1, u: 1, m: 1, q: 1, a: 1, t: 2, l: 1, e: 1. Since \'k\' has the highest frequency, the output is \'k\'.","solution":"def most_common_fruit(n, tree_list): Finds the most common fruit among the given series of trees. If multiple fruits have the same frequency, returns the lexicographically smallest fruit. from collections import Counter fruit_counter = Counter() for tree in tree_list: fruit_counter.update(tree) most_common = sorted(fruit_counter.items(), key=lambda x: (-x[1], x[0]))[0][0] return most_common"},{"question":"A famous hotel has a service of booking meeting rooms. Each meeting room can only accommodate one meeting at a time. Each customer provides a start time and an end time for their meeting. The hotel\'s management wants to calculate the maximum number of non-overlapping meetings that can be scheduled in the meeting room. Given a list of start and end times for meetings, find the maximum number of non-overlapping meetings that can be accommodated. -----Input----- The first line of input will contain an integer n (1 ≤ n ≤ 100,000), the number of meetings. The next n lines will each contain two integers s_i and e_i (1 ≤ s_i < e_i ≤ 1,000,000,000), representing the start and end time of each meeting. -----Output----- Print a single integer, the maximum number of non-overlapping meetings that can be scheduled. -----Examples----- Input 3 1 2 2 3 3 4 Output 3 Input 4 1 3 2 4 3 5 7 8 Output 3 Input 2 1 10 2 3 Output 1 -----Note----- In the first example, all meetings can be scheduled consecutively without any overlap. In the second example, the meetings [1,3], [3,5], and [7,8] can be scheduled consecutively without any overlap, resulting in a maximum of 3 non-overlapping meetings. In the third example, only one meeting can be scheduled to avoid overlap, as the second meeting overlaps with the first.","solution":"def max_non_overlapping_meetings(n, meeting_times): Returns the maximum number of non-overlapping meetings that can be scheduled. Parameters: n (int): Number of meetings meeting_times (List[Tuple[int, int]]): List of start and end times for meetings Returns: int: Maximum number of non-overlapping meetings # Sort the meetings by their ending times meeting_times.sort(key=lambda x: x[1]) # Keep track of the last ending time last_end_time = 0 count = 0 for start, end in meeting_times: # If the meeting starts after the last meeting ends if start >= last_end_time: # Increment the count and update the last ending time count += 1 last_end_time = end return count"},{"question":"Implement a Function to Find the Longest Word in a Sentence Write a function `findLongestWord(sentence)` that takes a single string argument `sentence`. This function should return the longest word in the sentence. If there are multiple words of the same length, return the first one that appears. Assume that the sentence contains only letters and spaces. **Example** Input: \\"The quick brown fox jumps over the lazy dog\\" Output: \\"quick\\"","solution":"def findLongestWord(sentence): Returns the longest word in the sentence. If there are multiple words with the same length, returns the first one that appears. words = sentence.split() longest_word = \\"\\" for word in words: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"A company is developing a new inventory system and wants to track the movement of items in and out of multiple warehouses. Each warehouse is identified by a unique integer ID and can store an unlimited number of items. The inventory system receives a stream of instructions for moving items into and out of the warehouses. Each instruction includes the warehouse ID and the number of items to be moved. An example is shown below: ``` Input Instructions: add 1 50 add 2 20 sub 1 10 sub 2 5 add 1 30 ``` In this example, the first instruction adds 50 items to warehouse 1, the second adds 20 items to warehouse 2, the third subtracts 10 items from warehouse 1, the fourth subtracts 5 items from warehouse 2, and the fifth adds 30 items to warehouse 1. Your task is to write a program that processes these instructions and outputs the total number of items in each warehouse after all instructions have been processed. If an instruction results in the number of items in a warehouse becoming negative, the number of items in that warehouse should be set to zero instead. Assume that the warehouse states are initially empty. Input Multiple datasets of instructions are given as input. The end of the input is indicated by a single line containing the word \\"end\\". Each dataset is given in the following format: m instruction1 instruction2 :: instructionm The number of instructions m (1 ≤ m ≤ 1000) is given on the first line of each dataset. The next m lines provide the instructions which could be either \\"add w x\\" or \\"sub w x\\". Here, `w` is the warehouse ID (an integer from 1 to 1000), and `x` is the number of items (an integer from 1 to 1000). The number of datasets does not exceed 20. Output For each dataset, output one line containing the total number of items in each warehouse, sorted by the warehouse ID in ascending order. If a warehouse has zero items at the end of processing a dataset, it should not be included in the output. Example Input 5 add 1 50 add 2 20 sub 1 10 sub 2 5 add 1 30 3 add 1 100 add 2 50 sub 1 150 1 add 3 200 end Output 1:70 2:15 2:50 3:200","solution":"def process_instructions(instructions): warehouses = {} for instruction in instructions: parts = instruction.split() action = parts[0] warehouse_id = int(parts[1]) amount = int(parts[2]) if warehouse_id not in warehouses: warehouses[warehouse_id] = 0 if action == \\"add\\": warehouses[warehouse_id] += amount elif action == \\"sub\\": warehouses[warehouse_id] -= amount if warehouses[warehouse_id] < 0: warehouses[warehouse_id] = 0 # Sorting warehouse IDs and preparing the output format result = [] for warehouse_id in sorted(warehouses): if warehouses[warehouse_id] > 0: result.append(f\\"{warehouse_id}:{warehouses[warehouse_id]}\\") return \\" \\".join(result) def process_multiple_datasets(datasets): results = [] for dataset in datasets: instructions = dataset.split(\\"n\\") m = int(instructions[0]) instructions_for_dataset = instructions[1:m+1] result = process_instructions(instructions_for_dataset) results.append(result) return results # Example usage: # instructions_list = [ # \\"5nadd 1 50nadd 2 20nsub 1 10nsub 2 5nadd 1 30\\", # \\"3nadd 1 100nadd 2 50nsub 1 150\\", # \\"1nadd 3 200\\" # ] # print(process_multiple_datasets(instructions_list))"},{"question":"Given a string s, return the smallest string that can be obtained by removing one character at any position in the string. The resulting string should be lexicographically smallest among all possible strings after removing one character. Example 1: Input: s = \\"abc\\" Output: \\"ab\\" Explanation: Removing \'c\' results in the smallest string. Example 2: Input: s = \\"acbd\\" Output: \\"abd\\" Explanation: Removing \'c\' results in the smallest string. Removing \'d\' gives \\"acb\\" which is lexicographically larger than \\"abd\\". Example 3: Input: s = \\"a\\" Output: \\"\\" Explanation: Removing the only character results in an empty string. Example 4: Input: s = \\"leetcode\\" Output: \\"eetcode\\" Explanation: Removing \'l\' results in the smallest string. Constraints: 1. 1 <= s.length <= 10^5 2. s consists of lowercase English letters.","solution":"def smallest_string_by_removing_one_char(s): Returns the lexicographically smallest string that can be obtained by removing one character at any position in the string s. min_string = s[1:] # Initialize with the string after removing the first character for i in range(1, len(s)): new_string = s[:i] + s[i+1:] if new_string < min_string: min_string = new_string return min_string"},{"question":"Samantha recently attended a biology lecture that discussed the concept of complementary DNA strands. She found it fascinating how pairs of nucleotide bases form double-stranded DNA sequences. In DNA, the nucleotide bases follow these pairing rules: - Adenine (A) pairs with Thymine (T) - Cytosine (C) pairs with Guanine (G) Given a single-stranded DNA sequence, Samantha wants to create the complementary strand. -----Task----- Given a single-stranded DNA sequence, generate the complementary DNA strand. -----Input----- Input consists of a string on a single line representing the single-stranded DNA sequence. The string will contain at least 1 and at most 1000 characters. The string will only contain the uppercase letters A, T, C, and G. -----Output----- Output should consist of a single string on a single line, representing the complementary DNA strand. -----Examples----- Sample Input: ATCG Sample Output: TAGC","solution":"def complement_dna(dna_sequence): Given a single-stranded DNA sequence, returns the complementary strand. complement = {\'A\': \'T\', \'T\': \'A\', \'C\': \'G\', \'G\': \'C\'} return \'\'.join(complement[base] for base in dna_sequence)"},{"question":"A company organizes an annual hackathon where developers work on innovative projects to win prizes. Each project is pursued by a team consisting of one or more developers. You need to determine the development team that received the highest combined score from the judges, as well as the individual developer who received the highest score for their contribution to the project. Each developer has only worked on one project, and their score is assigned accordingly. In case of a tie, both for the team and individual scores, consider the lexicographically smaller name to break the tie. -----Input----- The first line of the input contains two space-separated integers N and M denoting the number of developers and the number of projects respectively. Each of the following N lines contains three space-separated values: the name of the developer, the name of the project they worked on, and the score they received, respectively. The name of the developer and the project are strings of English alphabets with no spaces, and the score is an integer. -----Output----- Output should consist of two lines. The first line should contain the name of the project team with the highest combined score. The second line should contain the name of the individual developer with the highest score. -----Constraints----- - 1 ≤ N ≤ 10000 (10^4) - 1 ≤ M ≤ 1000 - Each name in the input contains only letters of English alphabets (uppercase or lowercase) - Each name in the input has length not exceeding 10 - Developer names are distinct. - Projects are non-empty and have distinct names. -----Example 1----- Input: 3 2 Alice ProjectA 85 Bob ProjectA 90 Charlie ProjectB 80 Output: ProjectA Bob -----Example 2----- Input: 4 2 John ProjectX 70 Doe ProjectY 90 Smith ProjectY 85 Jane ProjectX 95 Output: ProjectY Jane -----Example 3----- Input: 2 1 Mike ProjectZ 88 Nina ProjectZ 88 Output: ProjectZ Mike -----Explanation----- Example 1. Here, the total score for ProjectA is 175 (85 from Alice and 90 from Bob), and for ProjectB it is 80 (all from Charlie). Hence, ProjectA has the highest combined score. Bob has the highest individual score of 90, making him the top developer. Example 2. Here, the total score for ProjectX is 165 (70 from John and 95 from Jane), while ProjectY\'s total is 175 (90 from Doe and 85 from Smith). Thus, ProjectY has the highest combined score. Among individual developers, Jane has the highest score of 95. Example 3. Here, both developers worked on ProjectZ, and both received the same score of 88. Therefore, ProjectZ has the highest total score, and the developer with the lexicographically smallest name is Mike, making him the top developer.","solution":"def highest_team_and_developer(input_data): Take input data and return the highest scoring team and highest scoring developer. Parameters ---------- input_data : str Input data containing developer names, project names, and scores. Returns ------- tuple (name of the project with highest total score, name of the highest scoring developer) lines = input_data.strip().split(\\"n\\") N, M = map(int, lines[0].split()) project_scores = {} developer_scores = {} for line in lines[1:]: developer, project, score = line.split() score = int(score) # Updating project scores if project not in project_scores: project_scores[project] = 0 project_scores[project] += score # Updating developer scores developer_scores[developer] = (project, score) # Finding the project with the highest score highest_scoring_project = max( project_scores.items(), key=lambda item: (item[1], -ord(item[0][0])) # The second argument ensures lexicographical order in case of ties )[0] # Finding the developer with the highest score highest_scoring_developer = max( developer_scores.items(), key=lambda item: (item[1][1], -ord(item[0][0])) # The second argument ensures lexicographical order in case of ties )[0] return highest_scoring_project, highest_scoring_developer"},{"question":"Given a matrix of size M x N containing non-negative integers, the goal is to find a path from the top-left corner of the matrix to the bottom-right corner, such that moving to an adjacent cell (up, down, left, or right) will accumulate a sum of the values in the cells along the path. The task is to determine the minimum sum of any path from the top-left corner to the bottom-right corner. -----Constraints----- - 1 leq M, N leq 100 - 0 leq matrix[i][j] leq 100 -----Inputs----- Input is given from Standard Input in the following format: M N matrix[0][0] matrix[0][1] ... matrix[0][N-1] matrix[1][0] matrix[1][1] ... matrix[1][N-1] ... matrix[M-1][0] matrix[M-1][1] ... matrix[M-1][N-1] -----Outputs----- Print the minimum sum possible for any path from the top-left corner to the bottom-right corner. -----Sample Input----- 3 3 1 3 1 1 5 1 4 2 1 -----Sample Output----- 7 In the given matrix, the path with the minimum sum is 1 -> 3 -> 1 -> 1 -> 1, which gives a total sum of 7.","solution":"def min_path_sum(matrix): Given a matrix of non-negative integers, this function returns the minimum sum of any path from the top-left corner to the bottom-right corner. if not matrix or not matrix[0]: return 0 M, N = len(matrix), len(matrix[0]) # Initialize the dp table with zeros. dp = [[0] * N for _ in range(M)] # Start from the top-left corner dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, N): dp[0][j] = dp[0][j - 1] + matrix[0][j] # Fill the first column for i in range(1, M): dp[i][0] = dp[i - 1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = matrix[i][j] + min(dp[i - 1][j], dp[i][j - 1]) # The bottom-right corner will have the answer return dp[M - 1][N - 1] # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) matrix = [] index = 2 for i in range(M): matrix.append([int(data[j]) for j in range(index, index + N)]) index += N print(min_path_sum(matrix))"},{"question":"Longest Consecutive Sequence Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) complexity. Input N a_1 a_2 ... a_N Output Output the length of the longest consecutive elements sequence in the array. Constraints * 0 ≤ N ≤ 10^5 * -10^9 ≤ a_i ≤ 10^9 Input example 6 100 4 200 1 3 2 Output example 4 Explanation The longest consecutive elements sequence is [1, 2, 3, 4], so the length is 4. Example Input 6 100 4 200 1 3 2 Output 4","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence in the array. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"An island in the ocean has a rectangular grid-shaped map. Each cell in the grid is either land or water. Write a program to count the number of distinct islands on this map. An island is defined as a group of connected land cells (cells with value 1) either horizontally or vertically (not diagonally). -----Input----- - First line contains two integers, `m` and `n` (1 ≤ m, n ≤ 1000) which represents the number of rows and columns in the grid respectively. - The next `m` lines contain `n` space-separated integers (either 0 or 1), representing the grid. -----Output----- Print the number of distinct islands found in the grid. -----Examples----- Input 4 5 1 1 0 0 0 1 1 0 0 1 0 0 0 1 1 0 0 0 1 1 Output 2 Input 5 5 1 1 0 0 0 1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 Output 3 -----Note----- In the first example, there are two distinct islands: - The first island is formed by grid points (0,0), (0,1), (1,0), and (1,1). - The second island is formed by grid points (1,4), (2,3), (2,4), and (3,3), (3,4). In the second example, there are three distinct islands: - The first island is formed by grid points (0,0), (0,1), and (1,0). - The second island is formed by grid points (1,4), (2,3), and (2,4). - The third island is formed by grid points (4,1) and (4,2).","solution":"def countDistinctIslands(grid): Returns the number of distinct islands in the given grid. grid: List of List of integers (1\'s and 0\'s) if not grid or not grid[0]: return 0 def dfs(x, y): if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 0: return grid[x][y] = 0 dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) def find_islands(): count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: dfs(i, j) count += 1 return count return find_islands()"},{"question":"Given an integer `n`, generate all valid parentheses combinations of length `2n`. A valid combination of parentheses is one where each opening parenthesis has a corresponding closing parenthesis, and the set is properly nested. For example, when n = 3, the valid combinations are: - \\"((()))\\" - \\"(()())\\" - \\"(())()\\" - \\"()(())\\" - \\"()()()\\" Your task is to write a function that takes an integer `n` and returns a list of all valid combinations of parentheses of length `2n`. Input The first line contains a single integer `n` (1 ≤ n ≤ 8) — the number of pairs of parentheses. Output Output a list of strings, each string representing a valid combination of parentheses. Examples Input 3 Output [ \\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\" ] Input 2 Output [ \\"(())\\", \\"()()\\" ]","solution":"def generate_parentheses(n): Generates all combinations of `n` pairs of valid parentheses. Args: n (int): The number of pairs of parentheses. Returns: List[str]: A list of strings, each representing a valid combination of parentheses. result = [] def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) backtrack() return result"},{"question":"Given a string of parentheses and letters, determine if the parentheses are balanced. Note that the letters in the string should be ignored for the purpose of determining balanced parentheses. Example: Input: \\"a(b)c\\" Output: True Explanation: The parentheses in the string are balanced. Example: Input: \\"a(b)c)d\\" Output: False Explanation: The parentheses in the string are not balanced. Function Signature: def isBalancedParentheses(s: str) -> bool Your Task: Complete the function isBalancedParentheses() which takes a string s as input and returns a boolean value indicating whether the parentheses in the string are balanced or not. Expected Time Complexity: O(N), where N is the length of the string. Expected Auxiliary Space: O(1), ignoring the space required to store the input string. Constraints: 1 ≤ len(s) ≤ 10^5","solution":"def isBalancedParentheses(s: str) -> bool: Returns True if the parentheses in the string are balanced, otherwise False. Ignores any non-parentheses characters in the string. balance = 0 for char in s: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 # If balance goes negative, there are more closing than opening parentheses if balance < 0: return False return balance == 0"},{"question":"Alex has recently learned about even numbers and wants to practice more with them. He is given an array of integers and is asked to perform the following operations: 1. Identify all even numbers in the array. 2. Replace each even number with the word \\"even\\". 3. Concatenate all the words together into a single string without spaces. Write a program that will help Alex achieve this. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1 000) — the number of elements in the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. -----Output----- Output a single string that is the concatenation of the word \\"even\\" for each even number found in the array. -----Examples----- Input 5 1 2 3 4 5 Output eveneven Input 6 10 15 20 23 8 1 Output eveneveneven Input 3 7 11 13 Output","solution":"def even_concat(n, arr): Identifies even numbers in the array, replaces them with the word \\"even\\", and concatenates them into a single string without spaces. Parameters: - n (int): the number of elements in the array. - arr (list): list of integers. Returns: - str: concatenated string of \\"even\\" for each even number in the array. return \'\'.join([\'even\' for num in arr if num % 2 == 0])"},{"question":"Sam and his Toy Train Sam has a toy train set that moves along a track consisting of `n` stations placed in a straight line. The i-th station from the starting point has a stopping time `t_i` which denotes the number of seconds the train will stop at that station. Sam wants to organize a thrilling journey for his toy train that includes exactly `k` continuous stations (stopping at each of the `k` stations and then returning back to the starting point). You need to find the sequence of stations that will maximize the total stopping time. More specifically, your task is to determine the largest possible sum of stopping times for any sequence of exactly `k` continuous stations. Input The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 2⋅ 10^5) — the number of stations and the number of continuous stations you need to consider. The second line contains `n` integers `t_1, t_2, ..., t_n` (1 ≤ t_i ≤ 1000) — the stopping times of the stations. Output Print a single integer — the maximum sum of stopping times for any sequence of exactly `k` continuous stations. Examples Input 5 3 1 2 3 4 5 Output 12 Input 8 4 4 5 2 1 6 3 2 4 Output 15 Note In the first example, the sequence [3, 4, 5] gives the maximum sum of stopping times, which is 12. In the second example, the sequence [4, 5, 2, 1, 6, 3, 2, 4] contains several segments of length 4, and the sequence with the maximum stopping time sum is [5, 2, 1, 6], which gives the sum of 15. The task can be efficiently solved by using a sliding window to keep track of the sum of the current sequence of `k` stations and updating the sum as you move to the next station, ensuring that you always maintain a window size of `k` and compute the maximum sum possible.","solution":"def max_continuous_stop_times(n, k, stop_times): Finds the largest possible sum of stopping times for any sequence of exactly k continuous stations. Parameters: n (int): The number of stations. k (int): The number of continuous stations to consider. stop_times (list of int): The stopping times of the stations. Returns: int: The maximum sum of stopping times for any sequence of exactly k continuous stations. # Initial sum of the first window of size k max_sum = current_sum = sum(stop_times[:k]) # Use a sliding window to find the maximum sum of any k continuous stations for i in range(1, n - k + 1): current_sum = current_sum - stop_times[i - 1] + stop_times[i + k - 1] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"In a distant land, there is a unique puzzle made of a grid of cells with dimensions n x m. Each cell can either be empty (represented by 0) or blocked (represented by 1). Every day, you can choose a starting cell that is empty and unleash a powerful wave of energy that spreads to all directly adjacent (up, down, left, right) empty cells, but stops spreading further as soon as it encounters a blocked cell. Your task is to determine the minimum number of days required to convert all empty cells into blocked cells. On each day, you can start a wave of energy from one cell only. Input The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the dimensions of the grid. The next n lines contain m integers each, representing the state of each cell (0 for empty, 1 for blocked). Output Print a single integer — the minimum number of days required to convert all empty cells into blocked cells. Examples Input 3 3 0 0 1 0 1 0 1 0 0 Output 2 Input 2 2 1 0 0 1 Output 1","solution":"from collections import deque def min_days_to_convert(n, m, grid): def is_valid(x, y, n, m): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque() days = 0 # Initialize the queue with all currently blocked (1) cells for i in range(n): for j in range(m): if grid[i][j] == 1: queue.append((i, j, 0)) # BFS to spread the wave and count the days while queue: x, y, day = queue.popleft() days = max(days, day) for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, n, m): grid[nx][ny] = 1 queue.append((nx, ny, day + 1)) # Check if there are still empty cells left for row in grid: if 0 in row: return -1 return days # Examples: # n = 3, m = 3 # grid = [[0, 0, 1], # [0, 1, 0], # [1, 0, 0]] # # Output: 2 # # n = 2, m = 2 # grid = [[1, 0], # [0, 1]] # # Output: 1"},{"question":"A research lab is studying the spread of a virus in a network of computers. The network is represented as a directed acyclic graph (DAG) with N nodes and M edges. Each node represents a computer, and each directed edge represents a pathway through which the virus can spread. The lab has observed that some computers can receive the virus faster than others via multiple pathways. They want to analyze the maximum time delay experienced by any computer in the network to receive the virus from a source computer. The time delay for the virus to traverse an edge is always 1 unit of time. The task is to determine the maximum delay time that the virus takes to reach any computer in the network starting from a given source computer. Input Format: The first line contains an integer T denoting the number of test cases. For each test case: - The first line contains two space-separated integers N and M. - The next M lines contain two space-separated integers u and v denoting a directed edge from computer u to computer v. - The following line contains a single integer S, representing the source computer. Output Format: For each test case, print the maximum delay time in a separate line. If some computers are not infected by the virus, print -1 for those computers. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 10000 - 1 ≤ u, v, S ≤ N SAMPLE INPUT 2 5 5 1 2 1 3 3 4 4 5 2 5 1 3 2 1 2 2 3 1 SAMPLE OUTPUT 3 2 Explanation In the first case, starting from node 1: - Node 2 is reached in 1 unit of time. - Node 3 is reached in 1 unit of time. - Node 4 is reached in 2 units of time (1 -> 3 -> 4). - Node 5 is reached in 3 units of time (1 -> 3 -> 4 -> 5). Hence, the maximum delay time is 3 units. In the second case, starting from node 1: - Node 2 is reached in 1 unit of time. - Node 3 is reached in 2 units of time (1 -> 2 -> 3). Hence, the maximum delay time is 2 units.","solution":"from collections import defaultdict, deque def maximum_delay_times(T, cases): results = [] for case in cases: N, M, edges, source = case # Create a graph as an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Perform BFS to find the longest path in terms of time units visited = {i: -1 for i in range(1, N+1)} queue = deque([(source, 0)]) visited[source] = 0 while queue: node, time = queue.popleft() for neighbor in graph[node]: if visited[neighbor] < time + 1: visited[neighbor] = time + 1 queue.append((neighbor, time + 1)) max_delay = max(visited.values()) results.append(max_delay if max_delay > 0 else -1) return results # Example usage: T = 2 cases = [ (5, 5, [(1, 2), (1, 3), (3, 4), (4, 5), (2, 5)], 1), (3, 2, [(1, 2), (2, 3)], 1) ] print(maximum_delay_times(T, cases)) # Output: [3, 2]"},{"question":"You are given an n×n grid of numbers. You need to find a path from the top-left corner to the bottom-right corner such that the sum of the numbers along the path is minimized. You can only move either down or right at any point in time. --- Input --- The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with a line containing an integer n (1 ≤ n ≤ 100) — the size of the grid. The next n lines each contain n integers describing the grid where each integer represents the cost of that cell (1 ≤ grid[i][j] ≤ 100). --- Output --- For each test case, print a single line containing a single integer — the minimum sum of the numbers along the path from the top-left corner to the bottom-right corner. --- Example --- Input: 2 2 1 3 1 5 3 1 2 3 4 5 6 7 8 9 Output: 7 21 --- Note --- In the first test case of the example, the minimum path sum is found by taking the path from (1,1) → (2,1) → (2,2), yielding a sum of 1 + 1 + 5 = 7. In the second test case of the example, the path from (1,1) → (1,2) → (1,3) → (2,3) → (3,3) yields the minimum path sum of 1 + 2 + 3 + 6 + 9 = 21.","solution":"def min_path_sum(grid): Returns the minimum path sum from the top-left to the bottom-right corner of a grid. n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] for i in range(1, n): for j in range(1, n): dp[i][j] = grid[i][j] + min(dp[i - 1][j], dp[i][j - 1]) return dp[-1][-1] def process_test_cases(t, test_cases): Processes multiple test cases and returns the results as a list of minimum path sums. results = [] for i in range(t): n, grid = test_cases[i] results.append(min_path_sum(grid)) return results"},{"question":"In the ancient tradition of Kaya Village, there is a unique festival held on the first full moon night each year. During this festival, the villagers light candles and place them at specific spots according to their customs. The candles must form a straight line when viewed from above, as it symbolizes the harmonious linear path of life. However, due to the ancient and intricate nature of their scheduling system, the village council often faces challenges in ensuring that the candles are perfectly aligned. You are tasked with helping the village council by creating a program that checks if the candles placed on certain coordinates form a straight line. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a line containing a single zero. Each dataset is given in the following format: n x1 y1 x2 y2 ... xn yn - The first line contains an integer n (3 ≤ n ≤ 100) which represents the number of candles. - The next n lines contain two integers xi and yi (0 ≤ xi, yi ≤ 10000) representing the coordinates of each candle. Output For each dataset, output \\"Yes\\" if all candles are in a straight line. Otherwise, output \\"No\\". Example Input 3 0 0 1 1 2 2 4 1 2 2 4 3 6 4 8 3 1 1 2 2 3 5 0 Output Yes Yes No","solution":"def check_straight_line(candles): Returns \'Yes\' if the candles are in a straight line, otherwise returns \'No\'. def are_points_collinear(x1, y1, x2, y2, x3, y3): return (y3 - y2) * (x2 - x1) == (y2 - y1) * (x3 - x2) x1, y1 = candles[0] x2, y2 = candles[1] for x3, y3 in candles[2:]: if not are_points_collinear(x1, y1, x2, y2, x3, y3): return \\"No\\" return \\"Yes\\" def process_input(data): Processes the input string and returns a list of results based on the check_straight_line function. results = [] i = 0 while i < len(data): n = int(data[i]) if n == 0: break candles = [] for j in range(1, n + 1): xi, yi = map(int, data[i + j].split()) candles.append((xi, yi)) results.append(check_straight_line(candles)) i += n + 1 return results"},{"question":"A transportation company is looking to optimize the delivery of packages across various cities. Given a list of cities and the distances between directly connected cities, the goal is to determine the shortest possible route that allows a delivery truck to start from a specified city, visit every city exactly once, and return to the starting point. The input is provided in the form of a matrix where each element represents the distance between two cities. The matrix is symmetric, and the diagonal elements are always zero since the distance from a city to itself is zero. Write a program to find the minimum travel distance for the delivery truck to complete the route as described. Constraints: - 2 ≤ n ≤ 10 (where n is the number of cities) Input: - The first line contains an integer n, the number of cities. - The following n lines each contain n integers representing the distance matrix. Output: - Output the minimum travel distance for the delivery truck to visit each city exactly once and return to the starting point. Example: Input: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output: 80 Explanation: One of the optimal routes is 0 -> 1 -> 3 -> 2 -> 0 with a total distance of 10 + 25 + 30 + 15 = 80.","solution":"from itertools import permutations def find_min_travel_distance(n, distance_matrix): cities = range(n) min_distance = float(\'inf\') for perm in permutations(cities[1:]): current_distance = 0 current_city = 0 for next_city in perm: current_distance += distance_matrix[current_city][next_city] current_city = next_city current_distance += distance_matrix[current_city][0] min_distance = min(min_distance, current_distance) return min_distance # The function expects an integer n and a square matrix (list of lists) distance_matrix as inputs # Example usage: # n = 4 # distance_matrix = [ # [0, 10, 15, 20], # [10, 0, 35, 25], # [15, 35, 0, 30], # [20, 25, 30, 0] # ] # print(find_min_travel_distance(n, distance_matrix)) # Output: 80"},{"question":"The new headquarters of the Eco-Friendly Transportation Initiative (EFTI) is being built, and the engineers have decided to use an innovative system of interconnected tunnels for internal cargo transfer. The tunnels form a grid where the cargo can only move right or down. Cargo is transported by small automated carriers that start at the top-left corner of the grid and need to reach the bottom-right corner. The grid has obstacles scattered at various positions that block the carriers\' paths. Your task is to determine the total number of distinct paths from the top-left corner to the bottom-right corner, avoiding these obstacles. -----Input----- The first line contains two integers, M and N, the number of rows and columns in the grid, respectively. The next M lines contain N integers each, representing the grid. A cell containing `0` indicates an empty space, while a cell containing `1` indicates an obstacle. -----Output----- Output a single integer representing the total number of distinct paths from the top-left corner to the bottom-right corner. If there is no valid path, output `0`. -----Limits----- - 1 leq M, N leq 100 - The top-left corner and the bottom-right corner will always contain `0`. -----Example----- Sample Input 1: 3 3 0 0 0 0 1 0 0 0 0 Sample Output 1: 2 Sample Input 2: 3 3 0 1 0 1 0 0 0 0 0 Sample Output 2: 0","solution":"def count_paths(grid): M = len(grid) N = len(grid[0]) if grid[0][0] == 1 or grid[M-1][N-1] == 1: return 0 dp = [[0 for _ in range(N)] for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[M-1][N-1]"},{"question":"You are given a list of n integers where each integer represents the height of a building. You need to build the skyline of these buildings by stacking blocks. A building with a height of x means you need x blocks to reach its height. You can stack two or more buildings only if they have the same height. However, you can only stack a block from one building on top of another building directly if their heights are consecutive integers (i.e., a building of height x can have blocks from a building of height x-1 stacked on it). Your task is to find the minimum number of blocks needed to create the skyline that matches the initial buildings\' heights. Input: The first line contains an integer n (1 ≤ n ≤ 10^5), showing the number of buildings. The next line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^5), where hi is the height of the ith building. Output: Print a single integer — the minimum number of blocks needed to create the skyline. Example Input 5 3 2 1 5 5 Output 16 Explanation: - You have buildings of height 3, 2, 1, and two buildings of height 5. - To achieve the skyline, we can use: - 1 block for building of height 1 - 2 blocks for building of height 2 - 3 blocks for building of height 3 - 5 blocks each for two buildings of height 5 - Total blocks = 1 + 2 + 3 + 5 + 5 = 16","solution":"def minimum_blocks_needed(n, heights): Calculates the minimum number of blocks needed to create the skyline. Args: n : int : the number of buildings heights : list : list of integers representing the heights of the buildings Returns: int : the minimum number of blocks needed return sum(heights)"},{"question":"Petya has a sequence of integers a of length n. An array b is called a \\"rotated version\\" of a if it is possible to shift all elements of a circularly in order to obtain b. In other words, there exists an integer k such that for all i (0 ≤ i < n), b[i] = a[(i + k) % n]. Petya wants to know how many unique rotated versions of a can be formed. Note that for some arrays, all rotated versions could be identical, and for others, each rotated version might be unique. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array a. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array a. Output Output a single integer — the number of unique rotated versions of the array a. Examples Input 4 1 2 3 4 Output 4 Input 3 1 1 1 Output 1 Note In the first example, the unique rotated versions of the array are: [1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], and [4, 1, 2, 3]. In the second example, all the rotated versions of the array are identical: [1, 1, 1].","solution":"def count_unique_rotations(n, a): Returns the number of unique rotated versions of the array a of length n. unique_rotations = set() # We concatenate the array to itself to easily generate all rotations for i in range(n): rotation = tuple(a[i:] + a[:i]) unique_rotations.add(rotation) return len(unique_rotations)"},{"question":"You are working for a software company that is developing a new system to manage the connection of devices within a network. Each device is represented as a node and each connection between two devices is represented as an edge. The network is modeled as an undirected graph where the nodes are labeled by integers from 0 to n-1. For the purposes of testing the system, you need to find the longest path in the network that starts at node 0 and only visits each node at most once (simple path). Given the information about the connections in the network, your task is to determine the length of this longest path. The length of a path is the number of edges it contains. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 20, 0 ≤ m ≤ n*(n-1)/2) — the number of nodes and the number of edges in the network. Each of the next m lines contains two integers u and v (0 ≤ u, v < n, u ≠ v) — representing an edge connecting nodes u and v. -----Output----- Print a single integer — the length of the longest simple path in the network starting from node 0. -----Examples----- Input 5 5 0 1 0 2 1 2 1 3 3 4 Output 4 Input 4 3 0 1 1 2 2 3 Output 3 -----Explanation of the examples----- In the first example: The longest simple path starting from node 0 is either 0-1-3-4 or 0-2-1-3-4, both giving a length of 4. In the second example: The longest simple path starting from node 0 is 0-1-2-3, giving a length of 3.","solution":"def longest_path(n, m, connections): from collections import defaultdict # Build adjacency list representation of the graph graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) def dfs(node, visited): visited.add(node) max_length = 0 for neighbor in graph[node]: if neighbor not in visited: path_length = 1 + dfs(neighbor, visited) max_length = max(max_length, path_length) visited.remove(node) return max_length # Start DFS from node 0 length = dfs(0, set()) return length"},{"question":"A logistics company is trying to optimize the delivery of packages on a grid where some cells contain obstacles. The goal is to find the shortest path from a starting point to a delivery point while avoiding these obstacles. You are given a grid of size M × N where each cell can either be empty (.) or contain an obstacle (X). The delivery truck can move up, down, left, or right but cannot move diagonally. Write a program to calculate the minimum number of steps required for the truck to reach the delivery point from the starting point. If the delivery point is not reachable, output -1. Input The first line contains two integers M and N (1 ≤ M, N ≤ 1000), which denote the number of rows and columns of the grid respectively. The following M lines contain N characters each where \'.\' indicates an empty cell and \'X\' indicates an obstacle. The next line contains two integers sx and sy (1 ≤ sx ≤ M, 1 ≤ sy ≤ N), which indicate the 1-based coordinates of the starting point. The last line contains two integers dx and dy (1 ≤ dx ≤ M, 1 ≤ dy ≤ N), which indicate the 1-based coordinates of the delivery point. Output Output the minimum number of steps required to move from the starting point to the delivery point. If the point is not reachable, output -1. Examples Input 5 5 ..... .X... ..X.. ...X. ..... 1 1 5 5 Output 8 Input 3 3 ..X X.X ..X 1 1 3 3 Output -1","solution":"from collections import deque def min_steps_to_reach_delivery_point(M, N, grid, start, end): # Check if start or end points are obstacles if grid[start[0]-1][start[1]-1] == \'X\' or grid[end[0]-1][end[1]-1] == \'X\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start[0]-1, start[1]-1, 0)]) # (x, y, steps) visited = set() visited.add((start[0]-1, start[1]-1)) while queue: x, y, steps = queue.popleft() # Check if we\'ve reached the end point if (x, y) == (end[0]-1, end[1]-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1 # Example usage M = 5 N = 5 grid = [ \\".....\\", \\".X...\\", \\"..X..\\", \\"...X.\\", \\".....\\" ] start = (1, 1) end = (5, 5) print(min_steps_to_reach_delivery_point(M, N, grid, start, end))"},{"question":"You are given an integer array `arr` of length `N`. You need to find all the contiguous subarrays of `arr` and return the maximum sum among them. Constraints: - 1 ≤ N ≤ 10^5 - -10^4 ≤ arr[i] ≤ 10^4 Input: The input is given from Standard Input in the following format: ``` N arr[1] arr[2] ... arr[N] ``` Output: Print the maximum sum of any contiguous subarray. Examples: Input: ``` 5 1 -2 3 -1 2 ``` Output: ``` 4 ``` Input: ``` 4 -3 -1 -2 -5 ``` Output: ``` -1 ``` Input: ``` 6 4 -1 2 1 -5 4 ``` Output: ``` 6 ```","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:])) print(max_subarray_sum(arr))"},{"question":"Alex and Sam are playing a game with strings. In the game, they are given a string of alphanumeric characters and they have to determine if it can be rearranged into a palindrome. A palindrome is a string that reads the same forwards and backwards. For example, \\"madam\\" and \\"racecar\\" are palindromes. Input: The input consists of multiple test cases. - The first line contains T, the number of test cases. - For each test case, there is one line containing a string S. Output: For each test case, output \\"YES\\" if the string can be rearranged into a palindrome, otherwise output \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ Length of each string ≤ 100 SAMPLE INPUT 3 civic ivicc hello SAMPLE OUTPUT YES YES NO","solution":"def can_form_palindrome(string): Returns \\"YES\\" if the input string can be rearranged into a palindrome, otherwise returns \\"NO\\". # Count frequency of each character char_count = {} for char in string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count how many characters have an odd count odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # A string can be rearranged into a palindrome if it has at most one character with an odd count return \\"YES\\" if odd_count <= 1 else \\"NO\\" def solve(T, test_cases): Given the number of test cases and a list of strings, returns a list of results for each test case. results = [] for case in test_cases: results.append(can_form_palindrome(case)) return results"},{"question":"Write a function that receives a list of integers and returns a list of integers where each element is replaced by the nearest prime number. If the element itself is a prime, it remains unchanged. If there is a tie between two prime numbers (i.e., the same distance from the number), choose the smaller one. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. **Input** - A list of integers, where each integer is between 1 and 1000. The length of the list can range from 1 to 1000. **Output** - A list of integers where each integer is the nearest prime number to the corresponding input integer. **Examples** **Input:** [4, 10, 27, 38, 59] **Output:** [3, 11, 29, 37, 59] **Input:** [7, 12, 1, 100, 250] **Output:** [7, 11, 2, 101, 251] **Note** In the first example: - 4 is replaced by 3 (since 3 is the nearest prime; ties would be broken by 5, but 3 < 5). - 10 is replaced by 11 (11 is the nearest prime). - 27 is replaced by 29 (29 is the nearest prime). - 38 is replaced by 37 (37 is the nearest prime; ties would be broken by 41, but 37 < 41). - 59 is a prime number, so it remains unchanged. In the second example: - 7 is a prime number, so it remains unchanged. - 12 is replaced by 11 (11 is the nearest prime). - 1 is replaced by 2 (2 is the nearest prime). - 100 is replaced by 101 (101 is the nearest prime). - 250 is replaced by 251 (251 is the nearest prime).","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def nearest_prime(n): Find the nearest prime number to n. If n is prime, it remains unchanged. If there is a tie between two prime numbers, return the smaller one. if is_prime(n): return n diff = 1 while True: if n - diff > 1 and is_prime(n - diff): return n - diff if is_prime(n + diff): return n + diff diff += 1 def replace_with_nearest_primes(lst): Replace each integer in the list with the nearest prime number. return [nearest_prime(x) for x in lst]"},{"question":"Given an array of integers representing street elevations, your task is to determine the length of the longest flat segment of the street, where a flat segment is defined as consecutive elements with the same elevation. **Example 1:** Input: N = 7 arr[] = {3, 3, 2, 2, 2, 1, 1} Output: 3 Explanation: The longest flat segment is [3, 3, 3] where the elevation remains the same (2) for three consecutive elements. **Example 2:** Input: N = 6 arr[] = {1, 1, 1, 1, 2, 3} Output: 4 Explanation: The longest flat segment is [1, 1, 1, 1] where the elevation remains the same (1) for four consecutive elements. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestFlatSegment() which takes an Integer N and an array arr[] of length N as input and returns the length of the longest flat segment. **Expected Time Complexity:** O(N) **Expected Auxiliary Space:** O(1) **Constraints:** - 1 <= N <= 10^5 - 1 <= arr[i] <= 10^5","solution":"def longestFlatSegment(N, arr): if N == 0: return 0 max_length = 1 current_length = 1 for i in range(1, N): if arr[i] == arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given an assortment of fruit baskets. Each basket has a certain number of fruit items. A valid basket must contain at least one fruit item, and no more than 100 items. You need to find out if two baskets can be combined without exceeding the maximum limit of 100 fruit items. The input is an array of two elements. Each element is the number of fruit items in a basket. Determine whether the two baskets can be combined. Return `\'YES\'` if they can be combined, otherwise return `\'NO\'`. Examples: combine_baskets([30, 40]) returns \'YES\' combine_baskets([50, 60]) returns \'NO\' combine_baskets([80, 20]) returns \'YES\' combine_baskets([101, 10]) returns \'NO\' combine_baskets([50, 50]) returns \'YES\'","solution":"def combine_baskets(baskets): Determines if two baskets can be combined without exceeding 100 fruit items. Parameters: baskets (list): List of two integers representing the fruit items in each basket. Returns: str: \'YES\' if they can be combined, otherwise \'NO\'. if len(baskets) != 2: return \'NO\' basket1, basket2 = baskets if basket1 < 1 or basket1 > 100 or basket2 < 1 or basket2 > 100: return \'NO\' if basket1 + basket2 <= 100: return \'YES\' else: return \'NO\'"},{"question":"A city has several bus stations connected by direct bus routes. Each route has a fixed travel time. You are given information about the bus routes and their travel times. Your task is to find the shortest travel time between two given stations using any combination of direct routes that exist. Assume the city has **n** bus stations and **m** direct bus routes. Each route connects two stations and has a travel time **t**. You need to find the minimum travel time from a source station **A** to a destination station **B**. Example: Bus routes: ``` Station 1 to Station 2 travel time 10 Station 2 to Station 3 travel time 5 Station 1 to Station 3 travel time 15 Station 3 to Station 4 travel time 10 ``` If the source station **A=1** and the destination station **B=4**, the shortest travel time between them could be: 1 -> 2 -> 3 -> 4, with travel times 10 + 5 + 10 = 25. Function Description: Complete the `shortestTravelTime` function in the editor below. `shortestTravelTime` has the following parameters: - int n: the number of bus stations - int m: the number of direct routes - List[Tuple[int, int, int]] routes: a list of tuples where each tuple contains three integers: the starting station, the ending station, and the travel time - int A: the source station - int B: the destination station Input Format: The first line contains two space-separated integers **n** and **m**. The next **m** lines each contain three space-separated integers: the starting station **start**, the ending station **end**, and the travel time **t** for a direct route. The last line contains two space-separated integers **A** and **B**. Constraints: - 2 <= n <= 1000 - 1 <= m <= 10000 - 1 <= t <= 1000 Sample Input 0: ``` 4 4 1 2 10 2 3 5 1 3 15 3 4 10 1 4 ``` Sample Output 0: ``` 25 ``` Explanation 0: We are given n = 4 bus stations and m = 4 direct routes. The routes are as follows: 1 -> 2 with a travel time of 10 2 -> 3 with a travel time of 5 1 -> 3 with a travel time of 15 3 -> 4 with a travel time of 10 The source station is A = 1, and the destination station is B = 4. The shortest travel time from station 1 to station 4 is via the route 1 -> 2 -> 3 -> 4, with a total travel time of 25.","solution":"import heapq from collections import defaultdict def shortestTravelTime(n, m, routes, A, B): adj_list = defaultdict(list) for u, v, t in routes: adj_list[u].append((v, t)) adj_list[v].append((u, t)) # Assuming this is an undirected graph # Dijkstra\'s Algorithm min_heap = [(0, A)] distances = {i: float(\'inf\') for i in range(1, n+1)} distances[A] = 0 while min_heap: cur_distance, u = heapq.heappop(min_heap) if u == B: return cur_distance if cur_distance > distances[u]: continue for v, weight in adj_list[u]: distance = cur_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(min_heap, (distance, v)) return distances[B]"},{"question":"You are given two arrays preorder and inorder where the elements represent the nodes of a binary tree. Construct the binary tree from these arrays and return the root of the tree. The tree does not contain duplicate elements. Example 1: Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7] Output: [3,9,20,null,null,15,7] Example 2: Input: preorder = [-1], inorder = [-1] Output: [-1] Constraints: 1 <= preorder.length <= 3000 inorder.length == preorder.length -1000 <= preorder[i], inorder[i] <= 1000 preorder and inorder consist of unique values. Each value of inorder also appears in preorder. preorder is guaranteed to be the preorder traversal of the tree. inorder is guaranteed to be the inorder traversal of the tree.","solution":"class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None def build_tree(preorder, inorder): Constructs a binary tree from preorder and inorder traversal arrays. Returns the root of the tree. if not preorder or not inorder: return None # The first element of preorder is the root node root_val = preorder[0] root = TreeNode(root_val) # Find the index of the root in inorder array root_index_inorder = inorder.index(root_val) # Elements before root_index_inorder in inorder are part of the left subtree left_inorder = inorder[:root_index_inorder] left_preorder = preorder[1:1 + len(left_inorder)] # Elements after root_index_inorder in inorder are part of the right subtree right_inorder = inorder[root_index_inorder + 1:] right_preorder = preorder[1 + len(left_inorder):] # Recursively build the left and right subtrees root.left = build_tree(left_preorder, left_inorder) root.right = build_tree(right_preorder, right_inorder) return root"},{"question":"A company wants to implement a new seating arrangement for their employees in a rectangular grid pattern. The company has decided that all employees must sit such that there is at least one vacant seat between any two employees. This means no two employees should sit in horizontally, vertically, or diagonally adjacent seats. Given the dimensions of the grid (r rows and c columns), determine the number of ways the employees can be seated. -----Input----- The only line of input contains two integers r and c (1 ≤ r, c ≤ 10) — the number of rows and columns of the grid. -----Output----- Output one integer — the number of ways to place the employees on the grid. -----Example----- Input 2 2 Output 4","solution":"def count_ways_to_seat_employees(r, c): if r == 1 or c == 1: return (r * c + 1) // 2 if r % 2 == 0 or c % 2 == 0: return r * c // 2 return (r * c // 2) + 1"},{"question":"# Task You are writing a file processing tool to extract and process numbers from text files. In particular, you need a function that reads through a given text and extracts all the numerical values present. The function should then return the sum of these numbers. # Example For the input text = \\"The 3 little pigs built 3 houses: straw, sticks, and bricks. But only the brick house lasted because it had 10 bricks.\\", the output should be 16. For the input text = \\"No numbers here!\\", the output should be 0. # Input/Output - `[input]` string `text` - `[output]` an integer","solution":"import re def sum_numbers_in_text(text): Extracts numerical values from the given text and returns their sum. Args: text (str): The input text from which numerical values will be extracted. Returns: int: The sum of the numerical values present in the text. numbers = re.findall(r\'d+\', text) return sum(int(num) for num in numbers)"},{"question":"Gotham City Police Department has been facing rampant problems with organized crimes. Commissioner Gordon wants to introduce automated surveillance using drones to keep an eye on the entire city. Consider Gotham City is represented as a grid of size N x M, where each cell represents a distinct area. Commissioner Gordon wants to place surveillance drones in some cells of the grid such that each drone monitors its row and column, i.e., a drone placed at cell (i, j) monitors all cells of the i-th row and all cells of the j-th column. To ensure operational efficiency, Commissioner Gordon wants to minimize the number of drones used while ensuring every cell is monitored by at least one drone. You need to help the Commissioner by determining the minimum number of drones required for a given grid. **Input Constraints:** - 1 ≤ N, M ≤ 2000 **Input:** The first line contains an integer T – the number of test cases. Each of the next T lines contains two integers, N and M – the dimensions of the grid. **Output:** For each test case, output a single integer representing the minimum number of drones required. **Example Input:** 2 3 3 5 4 **Example Output:** 3 4 **Explanation:** - In the first test case, with a 3 x 3 grid, placing drones at (1,1), (2,2), and (3,3) will ensure each row and each column is covered, thus requiring 3 drones. - In the second test case, with a 5 x 4 grid, drones placed at (1,1), (2,2), (3,3), and (4,4) will cover the grid efficiently with 4 drones. The problem essentially translates to finding the maximum dimension between the rows and columns since placing a drone at diagonal positions in a square-shaped part of the grid ensures all cells are covered.","solution":"def minimum_drones(T, test_cases): results = [] for i in range(T): N, M = test_cases[i] results.append(max(N, M)) return results # Example Usage: # T = 2 # test_cases = [(3, 3), (5, 4)] # print(minimum_drones(T, test_cases)) # Output: [3, 4]"},{"question":"Sarah, a farmer, likes to grow flowers in a rectangular garden. She has a set of different types of flowers, and she likes to arrange them in a specific pattern. Her garden is represented by an N x M matrix, where each cell can contain one type of flower. Sarah wants to ensure the garden looks symmetric after rotation by 180 degrees. Given the initial arrangement of the flowers in Sarah\'s garden, determine if the garden is symmetric when rotated 180 degrees. Input: The first line contains two integers N and M, the number of rows and columns in the garden matrix respectively. The next N lines each contain M integers, where each integer represents the type of flower placed in that cell. Output: Print \\"YES\\" if the garden is symmetric when rotated 180 degrees, otherwise print \\"NO\\". Constraints: 1 ≤ N, M ≤ 100 Each flower type is represented by an integer between 0 and 9. SAMPLE INPUT 3 3 1 2 1 3 4 3 1 2 1 SAMPLE OUTPUT YES Explanation The garden matrix initially looks like: 1 2 1 3 4 3 1 2 1 After rotating 180 degrees, the matrix remains the same: 1 2 1 3 4 3 1 2 1 Thus, the garden is symmetric after rotation by 180 degrees.","solution":"def is_symmetric_after_180_degree_rotation(N, M, garden): This function checks if the garden is symmetric after a 180-degree rotation. Parameters: - N: int, number of rows in the garden matrix - M: int, number of columns in the garden matrix - garden: list of lists, representing the garden matrix where each cell has a flower type Returns: - str: \\"YES\\" if the garden is symmetric after 180-degree rotation, otherwise \\"NO\\" for i in range(N): for j in range(M): if garden[i][j] != garden[N - 1 - i][M - 1 - j]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of projects and a list of dependencies where each dependency is a pair of projects [a, b] meaning project a must be completed before project b. Assume you can complete all of the given projects and the tasks do not have cycles. Find the order in which you should complete the projects in order to satisfy the given dependencies. Implement a function `findOrder(numProjects, dependencies)`. Return an array representing the order of projects to be completed. **Input:** - `numProjects`: an integer representing the total number of projects. - `dependencies`: a list of pairs representing the dependencies between projects. **Output:** - Return an array of integers representing the order in which you must complete the projects. Example 1: Input: numProjects = 4, dependencies = [[1,0],[2,0],[3,1],[3,2]] Output: [0,1,2,3] or [0,2,1,3] Example 2: Input: numProjects = 2, dependencies = [[1,0]] Output: [0,1] Example 3: Input: numProjects = 3, dependencies = [[1,0],[2,1]] Output: [0,1,2] Note: 1. The input prerequisites is a graph represented by a list of edges, not adjacency matrices. 2. You may assume that there are no cycles in the input graph. 3. 1 <= numProjects <= 100 4. 0 <= len(dependencies) <= (numProjects * (numProjects - 1)) / 2","solution":"from collections import deque, defaultdict def findOrder(numProjects, dependencies): Finds the order in which to complete the projects based on the given dependencies. # Create an adjacency list to represent the graph adj_list = defaultdict(list) in_degree = [0] * numProjects # Populate the adjacency list and in-degree array for a, b in dependencies: adj_list[b].append(a) in_degree[a] += 1 # Queue for the projects that have no dependencies (in-degree 0) queue = deque([i for i in range(numProjects) if in_degree[i] == 0]) order = [] while queue: project = queue.popleft() order.append(project) # Decrease in-degree by 1 for all its neighbors for neighbor in adj_list[project]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If all projects are in the order list, return the order if len(order) == numProjects: return order else: # If there are projects left that couldn\'t be ordered, return an empty list return []"},{"question":"You are given a string S consisting of only \'0\'s and \'1\'s. You can delete any one character in the string in each operation. Your task is to determine the minimum number of operations required to make the string have no two consecutive characters containing \'1\'. If it is not possible to achieve this, return -1. -----Constraints----- - 1 leq |S| leq 10^5 - S consists of characters \'0\' and \'1\'. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the minimum number of operations required to make the string have no two consecutive \'1\'s. If it is not possible, print -1. -----Sample Input----- 1010101 -----Sample Output----- 0 You can already see that the string \\"1010101\\" has no two consecutive \'1\'s, so no operations are needed. -----Sample Input----- 110011 -----Sample Output----- 2 You need to delete one \'1\' from each pair of consecutive \'1\'s to make the string \\"1011\\" -> \\"101\\" with one operation. And then another operation is required to remove one \'1\' from the \\"11\\" pair at the end. -----Sample Input----- 11111 -----Sample Output----- 3 It is necessary to delete three \'1\'s to be left with a string of non-consecutive \'1\'s: \\"11111\\" -> \\"111\\" -> \\"11\\" -> \\"1\\".","solution":"def min_operations_to_remove_consecutive_ones(S): Returns the minimum number of operations required to remove consecutive \'1\'s in the string. If it\'s not possible, returns -1. # Check if there are at least two consecutive \'1\'s has_consecutive_ones = \'11\' in S if not has_consecutive_ones: return 0 # Count the minimal operations required to break all consecutive \'1\'s count_consecutive_ones = 0 prev_char = \'\' for char in S: if prev_char == \'1\' and char == \'1\': count_consecutive_ones += 1 prev_char = char return count_consecutive_ones"},{"question":"You are given an archive containing `n` files. Each file has a size measured in bytes. Your task is to arrange these files in such a way that they can be transferred to a set of storage devices with limited capacities. The goal is to use the minimum number of storage devices, each with a fixed capacity, to store all the files without exceeding the capacity of any device. Input The first line contains two integers `n` (1 ≤ n ≤ 2000) — the number of files, and `C` (1 ≤ C ≤ 10^9) — the capacity of each storage device. The second line contains `n` integers, where the `i`-th integer `s_i` (1 ≤ s_i ≤ 10^9) represents the size of the `i`-th file in bytes. Output Print the minimum number of storage devices required to store all the files. Examples Input 4 10 1 8 3 5 Output 2 Input 3 6 2 4 5 Output 2 Input 5 15 3 7 9 4 6 Output 2 Note In the first example, you can store the files of size 1 and 8 in one device and the file of size 3 and 5 in another device, thus requiring a minimum of 2 storage devices. In the second example, you can store the files of size 2 and 4 in one device and the file of size 5 in another device, thus requiring a minimum of 2 storage devices. In the third example, you can store the files of size 3, 4, and 6 in one device and the file of size 7 and 9 in another device, thus requiring a minimum of 2 storage devices.","solution":"from typing import List def min_storage_devices(n: int, C: int, sizes: List[int]) -> int: # Sort file sizes in non-increasing order sizes.sort(reverse=True) devices = [] for size in sizes: placed = False # Try to place the file in the existing devices for i in range(len(devices)): if devices[i] + size <= C: devices[i] += size placed = True break if not placed: # If the file was not placed in any existing device, add a new device devices.append(size) return len(devices)"},{"question":"Jane is organizing a series of workshops across various cities. Each city is connected to several other cities by direct flights. Jane needs to schedule the workshops in such a way that she minimizes the total number of flights she has to take and ensures that all workshops are held. The cities and the flights are represented as a weighted undirected graph, where nodes represent cities and edges represent the flights between them. The weight of an edge denotes the time in hours that the flight takes. Jane can start from any city and must return to the starting city after visiting each city exactly once. -----Input----- The first line contains a single integer n (2 leq n leq 15), the number of cities. Each of the next n lines contains n space-separated integers, where the j-th integer in the i-th line represents the time in hours it takes to fly from city i to city j. The cost is always represented with symmetric non-negative integers, and the flight cost from a city to itself is always 0. -----Output----- The output should contain a single integer, the minimum total number of hours Jane needs to spend on flights to visit all cities and return to the starting city. -----Examples----- Sample Input 1: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Sample Output 1: 80 Sample Input 2: 3 0 10 15 10 0 20 15 20 0 Sample Output 2: 45","solution":"import itertools def tsp_min_cost(n, cost_matrix): Solves the Traveling Salesman Problem using a brute-force approach. Parameters: n (int): The number of cities. cost_matrix (list of list of ints): A 2D list representing the flight costs. Returns: int: The minimum cost of completing the tour. all_permutations = itertools.permutations(range(1, n)) min_cost = float(\'inf\') for perm in all_permutations: current_cost = 0 k = 0 for j in perm: current_cost += cost_matrix[k][j] k = j current_cost += cost_matrix[k][0] # return to the starting city if current_cost < min_cost: min_cost = current_cost return min_cost"},{"question":"Given two integer arrays `arr1` and `arr2` of size `m` and `n` respectively, find the length of the longest common subsequence (LCS). A subsequence is a sequence derived by deleting some or none elements from an array without changing the order of the remaining elements. Example 1: Input: arr1 = [1, 3, 4, 1, 2, 8] arr2 = [3, 4, 1, 2, 8, 7] Output: 5 Explanation: The longest common subsequence is [3, 4, 1, 2, 8]. Example 2: Input: arr1 = [1, 2, 3, 4, 5] arr2 = [5, 3, 1] Output: 1 Explanation: The longest common subsequence is [1]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `longestCommonSubsequence` which takes in two integer arrays `arr1` and `arr2` as input parameters and returns the length of the longest common subsequence. Expected Time Complexity: O(m * n) Expected Space Complexity: O(m * n) Constraints: 1 <= m, n <= 1000 1 <= arr1[i], arr2[i] <= 10^3","solution":"def longestCommonSubsequence(arr1, arr2): Returns the length of the longest common subsequence of arr1 and arr2. m, n = len(arr1), len(arr2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if arr1[i - 1] == arr2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"*** Nova polynomial integral*** This kata is from a series on polynomial handling. ( [#1](http://www.codewars.com/kata/nova-polynomial-1-add-1) [#2](http://www.codewars.com/kata/570eb07e127ad107270005fe) [#3](http://www.codewars.com/kata/5714041e8807940ff3001140 ) [#4](http://www.codewars.com/kata/571a2e2df24bdfd4e20001f5)) Consider a polynomial in a list where each element in the list corresponds to the factors. The factor order is the position in the list. The first element is the zero order factor (the constant). p = [a0, a1, a2, a3] signifies the polynomial a0 + a1x + a2x^2 + a3*x^3 In this kata, return the indefinite integral of a polynomial as a list where the last element should be the constant of integration (C). ```python poly_integral([2]) = [2, 0] poly_integral([3, 6]) = [0, 3, 3] ``` Previous Katas on Nova polynomial: 1. [poly_add](http://www.codewars.com/kata/nova-polynomial-1-add-1) 2. [poly_multiply](http://www.codewars.com/kata/570eb07e127ad107270005fe) 3. [poly_subtract](http://www.codewars.com/kata/5714041e8807940ff3001140)","solution":"def poly_integral(p): Returns the indefinite integral of a polynomial given by the list p. integral = [0] * (len(p) + 1) # Create a list with an additional term for the constant of integration for i in range(len(p)): integral[i + 1] = p[i] / (i + 1) integral[0] = 0 # Constant of integration return integral"},{"question":"Given a string S consisting of lowercase English letters, you need to perform a series of operations to make all characters in the string distinct. In each operation, you can select a character from the string and replace it with any other lowercase English letter as long as it does not already appear in the string. Return the minimum number of operations required to ensure that all characters in the string are distinct. ------ Input Format ------ - The input contains a single string S. ------ Output Format ------ Output a single integer representing the minimum number of operations needed to make all characters in the string S distinct. ------ Constraints ------ 1 ≤ |S| ≤ 1000 - S consists only of lowercase English letters. ------ Sample Input 1 ------ abac ------ Sample Output 1 ------ 1 ------ Explanation 1 ------ In the string \\"abac\\", the character \'a\' appears twice. We can replace one \'a\' with another character that does not already exist in the string, for example \'d\'. Now the string becomes \\"abdc\\", and all characters are distinct. Hence, only 1 operation is required. ------ Sample Input 2 ------ aaaa ------ Sample Output 2 ------ 3 ------ Explanation 2 ------ In the string \\"aaaa\\", we need to replace 3 out of the 4 \'a\'s with 3 different new characters. Therefore, we need 3 operations. For example, we can get the string \\"abcd\\" by replacing \'a\' with \'b\', another \'a\' with \'c\', and the last \'a\' with \'d\'. Hence, 3 operations are required.","solution":"def min_operations_to_make_distinct(s): Returns the minimum number of operations required to make all characters in the string `s` distinct. :param s: A string consisting of lowercase English letters. :return: An integer representing the minimum number of operations needed. found_chars = set() num_operations = 0 for char in s: if char in found_chars: num_operations += 1 else: found_chars.add(char) return num_operations"},{"question":"Write a function that takes a string as input and rearranges it such that each character appears exclusively next to differing characters. If it is impossible to achieve such a rearrangement, return an empty string. For example: - Given the input \\"aabb\\", the output could be \\"abab\\". - Given the input \\"aaab\\", the output should be an empty string because there is no way to rearrange the string so that no two adjacent characters are the same. Note: - You may assume that the input string will contain only lowercase alphabetic characters.","solution":"from heapq import heappop, heappush from collections import Counter def rearrange_string(s): Rearranges a string such that no two adjacent characters are the same. Parameters: s (str): Input string containing only lowercase alphabetic characters. Returns: str: Rearranged string or an empty string if it is impossible to rearrange it as specified. # Count frequency of each character char_count = Counter(s) max_heap = [] # Build a max-heap based on character frequency (-ve frequency for max behavior using min-heap) for char, count in char_count.items(): heappush(max_heap, (-count, char)) prev_count, prev_char = 0, \'\' result = [] # Rearrange characters while max_heap: count, char = heappop(max_heap) result.append(char) # If previous character has remaining count, push it back into heap if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) # Update previous character and count prev_count, prev_char = count + 1, char # increment count because we used one instance of char result_str = \'\'.join(result) # Check if rearrangement is possible by ensuring the length matches if len(result_str) != len(s): return \'\' return result_str"},{"question":"You are given a rod of length L inches. You need to cut the rod into one or more pieces such that the total value obtained by selling the pieces is maximized. The value of each piece of length i inches is given by a price array price[] where price[i] is the value of a piece of length i. Write a function that returns the maximum value obtainable by cutting up the rod and selling the pieces. Example 1: Input: L = 8 price[] = {1, 5, 8, 9, 10, 17, 17, 20} Output: 22 Explanation: By cutting the rod into lengths 2 and 6, we get 5 + 17 = 22, which is the maximum value. Example 2: Input: L = 8 price[] = {3, 5, 8, 9, 10, 17, 17, 20} Output: 24 Explanation: By cutting the rod into lengths 1 and 7, we get 3 + 21 = 24, which is the maximum value. Your Task: You don\'t need to read input or print anything. Your task is to complete the function cutRod() which takes an integer L and an array price[] of length L as input and returns the maximum value obtainable. Expected Time Complexity: O(L^2) Expected Auxiliary Space: O(L) Constraints: 1 <= L <= 100 1 <= price[i] <= 1000","solution":"def cutRod(L, price): Returns the maximum value obtainable by cutting up the rod of length L and selling the pieces based on the given price array. # Create a table to store results of subproblems dp = [0] * (L + 1) # Build the table dp[] in bottom up manner for i in range(1, L + 1): max_val = -1 for j in range(i): max_val = max(max_val, price[j] + dp[i - j - 1]) dp[i] = max_val return dp[L]"},{"question":"Write a function rotateLeft that rotates the elements of a list to the left by a specified number of positions. The function should take two arguments: the list and the number of positions to rotate. If the number of positions is greater than the length of the list, the rotations should wrap around. E.g: rotateLeft([1, 2, 3, 4, 5], 2) -> [3, 4, 5, 1, 2]","solution":"def rotateLeft(lst, positions): Rotates the elements of the list to the left by the specified number of positions. If the number of positions is greater than the length of the list, the rotations wrap around. Parameters: lst (list): The list to be rotated. positions (int): The number of positions to rotate the list. Returns: list: The rotated list. if not lst: return [] positions = positions % len(lst) return lst[positions:] + lst[:positions]"},{"question":"You are tasked with navigating a robotic car through a grid-based city map. The map is represented by a binary matrix where a cell with a value of 1 indicates a drivable path, and a cell with a value of 0 indicates an obstacle. The car can only move up, down, left, or right and starts at the top-left corner of the matrix. Your goal is to determine if there is a path for the car to reach the bottom-right corner of the matrix. Write a function to determine if such a path exists. Input: - The first line of input contains T, the number of test cases. - For each test case, the first line contains two integers, N and M, representing the number of rows and columns in the matrix. - The next N lines contain M integers (either 0 or 1) representing the city map. Output: - For each test case, print \\"Yes\\" if there is a path from the top-left to the bottom-right corner; otherwise, print \\"No\\". Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 1000 - The matrix elements are either 0 or 1. Example Input: 2 3 3 1 0 0 1 1 0 0 1 1 3 3 1 0 0 0 0 0 0 0 1 Example Output: Yes No Explanation: - For the first test case, there is a path from the top-left corner to the bottom-right corner: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2). - For the second test case, there is no available path to reach the bottom-right corner.","solution":"def is_path_exists(grid): if not grid or not grid[0] or grid[0][0] == 0 or grid[-1][-1] == 0: return \\"No\\" rows, cols = len(grid), len(grid[0]) directions = [(1,0), (0,1), (-1,0), (0,-1)] visited = set((0, 0)) def bfs(): from collections import deque queue = deque([(0, 0)]) while queue: x, y = queue.popleft() if x == rows - 1 and y == cols - 1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 1 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False return \\"Yes\\" if bfs() else \\"No\\" def determine_path_existence(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] grid = test_cases[i][1] results.append(is_path_exists(grid)) return results"},{"question":"You are given a string consisting of lowercase and uppercase letters. Your task is to create a new string where each character in the original string is replaced by the letter immediately following it in the English alphabet. If replacing a character results in transitioning from \'z\' to \'a\' or \'Z\' to \'A\', wrap around and start from \'a\' or \'A\' respectively. Input The only line of input contains a string s (1 ≤ |s| ≤ 100). Output Output a single line containing the transformed string. Examples Input abcXYZ Output bcdYZA","solution":"def transform_string(s): Transforms the string such that each character is replaced by the letter immediately following it in the English alphabet. Wraps around from \'z\' to \'a\' and \'Z\' to \'A\'. :param s: Input string with lowercase and uppercase letters :return: Transformed string result = [] for char in s: if char.islower(): if char == \'z\': result.append(\'a\') else: result.append(chr(ord(char) + 1)) elif char.isupper(): if char == \'Z\': result.append(\'A\') else: result.append(chr(ord(char) + 1)) return \'\'.join(result)"},{"question":"Sarah is organizing a birthday party and wants to arrange the seating so that no two people who do not get along sit next to each other. She has a list of people who do not get along and needs to find a seating arrangement that respects this constraint. -----Input----- The first line of input contains an integer N, 2 leq N leq 100000, the number of people at the party. The following N lines contain the names of these people, all of which are different. A name consists of at most 20 lowercase letters from the English alphabet or underscores, and is non-empty. The next line of input contains an integer M, 0 leq M leq 100000, the number of pairs of people who do not get along. Then follow M lines, each containing the names of two different people who do not get along. -----Output----- If it is possible to arrange the seating so that no two non-friendly people sit next to each other, output the seating arrangement in one line. If there are multiple solutions, output any of them. If it is not possible to find such an arrangement, output impossible. -----Examples----- Sample Input: 4 alice bob charlie david 2 alice bob charlie david Sample Output: alice charlie bob david","solution":"from collections import defaultdict, deque def find_seating_arrangement(N, people, M, pairs): # Create an adjacency list for people who do not get along adjacency_list = defaultdict(list) for a, b in pairs: adjacency_list[a].append(b) adjacency_list[b].append(a) # Graph coloring with two colors (bipartite graph can use two colors) color = {} def bfs(start): queue = deque([start]) color[start] = 0 # Start coloring with 0 while queue: person = queue.popleft() current_color = color[person] next_color = 1 - current_color # Alternate between 0 and 1 for neighbor in adjacency_list[person]: if neighbor in color: if color[neighbor] == current_color: # Conflict, not bipartite return False else: color[neighbor] = next_color queue.append(neighbor) return True for person in people: if person not in color: if not bfs(person): return \\"impossible\\" # If the graph is successfully colored, we generate the seating. group1 = [person for person in people if color[person] == 0] group2 = [person for person in people if color[person] == 1] return \\" \\".join(group1 + group2) # Example usage: # N = 4 # people = [\'alice\', \'bob\', \'charlie\', \'david\'] # M = 2 # pairs = [(\'alice\', \'bob\'), (\'charlie\', \'david\')] # print(find_seating_arrangement(N, people, M, pairs)) # Outputs a valid arrangement e.g., \'alice charlie bob david\'"},{"question":"In a certain company, employees are given a bonus at the end of the year based on their performance scores. The company wants to distribute the bonus in such a way that each employee gets at least one unit of bonus and employees with higher performance scores get strictly more units of bonus than their neighbors who have lower performance scores. Given an array of performance scores, determine the minimum number of units of bonus that should be distributed to satisfy these conditions. **Input** - The first line contains an integer n (1 le n le 200,000) — the number of employees. - The second line contains n integers representing the performance scores of the employees. **Output** - Print a single integer, the minimum number of units of bonus required. **Examples** Input: ``` 3 1 2 2 ``` Output: ``` 4 ``` Input: ``` 4 1 0 2 1 ``` Output: ``` 6 ``` **Note** In the first example, the minimum bonus can be distributed as [1, 2, 1]. Here, the second employee has a higher score than the first, so the bonus is higher. The third employee has the same score as the second but since there isn\'t a rule concerning equal scores, the minimum conditions are still met. In the second example, the minimum bonus distribution could be [2, 1, 3, 2]. The second employee has a lower score than the first, but the first and third employees have higher scores than their immediate neighbors, hence their bonuses are higher.","solution":"def minimum_bonus(scores): Calculate the minimum number of units of bonus required to satisfy the given conditions. n = len(scores) if n == 0: return 0 bonuses = [1] * n # First pass: ensure each employee gets more bonus than the previous one if their score is higher for i in range(1, n): if scores[i] > scores[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Second pass: ensure each employee gets more bonus than the next one if their score is higher for i in range(n - 2, -1, -1): if scores[i] > scores[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) return sum(bonuses)"},{"question":"Given a string of parentheses \\"()\\" and \\"{}\\" only, determine whether the string is valid. A string is considered valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. -----Constraints----- - The length of the string will be at most 10^5. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print \\"YES\\" if the string is valid, otherwise print \\"NO\\". -----Sample Input----- (){}{} -----Sample Output----- YES -----Sample Input----- ({)}{} -----Sample Output----- NO","solution":"def is_valid_parentheses(s: str) -> str: Checks if the given string of parentheses is valid. Args: s (str): the input string containing only parentheses () and {} Returns: str: \\"YES\\" if the string is valid, otherwise \\"NO\\" stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\'} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or matching_parentheses[char] != stack.pop(): return \\"NO\\" else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"# Task You are given a list of integers representing the positions of parcels along a straight railway track, and an integer `k` representing the maximum distance a robot can move from its initial position. The robot can start at any position and pick parcels to either side but can only cover a total distance of `2k`. Your task is to find the maximum number of parcels that the robot can collect if it starts from the optimal position. # Example For `positions = [1, 2, 3, 4, 5, 6, 7]` and `k = 2`, the result should be `5`. Explanation: Starting at position `4`, the robot can cover positions `2, 3, 4, 5, 6`. # Input/Output - `[input]` integer array `positions` A list of integers representing the positions of parcels along the railway track. `2 <= positions.length <= 1000` - `[input]` integer `k` The maximum distance the robot can move from its initial position. `1 <= k <= 500` - `[output]` an integer The maximum number of parcels that can be collected.","solution":"def max_parcels_collected(positions, k): Returns the maximum number of parcels that can be collected by the robot. # Sort the positions to make it easier to count parcels within the range positions.sort() max_parcels = 0 n = len(positions) # For every position, assume it as the start and try to collect parcels within 2k distance for i in range(n): start_pos = positions[i] # Number of parcels within distance 2k count = 0 for j in range(i, n): if positions[j] - start_pos <= 2 * k: count += 1 else: break # Update max count max_parcels = max(max_parcels, count) return max_parcels"},{"question":"Eva is working on a new project involving Internet of Things (IoT) devices that need to be configured into a communication network. Each device has a maximum range it can communicate with other devices directly. Given the positions of the devices on a 2D plane and their respective ranges, Eva must determine whether it is possible for every device to communicate with every other device either directly or through a series of intermediate devices. A device can communicate with another if the distance between them is less than or equal to the sum of their respective ranges. The distance between two points (x1, y1) and (x2, y2) is calculated using the Euclidean distance formula. Input The first line contains a single integer n (2 ≤ n ≤ 100) — the number of IoT devices. Each of the next n lines contains three integers xi, yi, ri (0 ≤ xi, yi ≤ 1000; 1 ≤ ri ≤ 1000) representing the x-coordinate, y-coordinate, and communication range of the i-th device. Output Print \\"YES\\" if it\'s possible for every device to communicate with every other device directly or indirectly. Otherwise, print \\"NO\\". Examples Input 4 0 0 1 2 0 1 1 1 1 3 3 2 Output YES Input 3 0 0 1 4 0 1 1 1 1 Output NO","solution":"def can_communicate_everywhere(n, devices): from math import sqrt from collections import deque def distance(x1, y1, x2, y2): return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) # Create a graph where nodes are devices and edges indicate communication ability. graph = [[] for _ in range(n)] for i in range(n): x1, y1, r1 = devices[i] for j in range(n): if i != j: x2, y2, r2 = devices[j] if distance(x1, y1, x2, y2) <= r1 + r2: graph[i].append(j) graph[j].append(i) # Perform BFS or DFS to check connectivity def bfs(start): visited = [False] * n queue = deque([start]) visited[start] = True count_visited = 1 while queue: node = queue.popleft() for neighbour in graph[node]: if not visited[neighbour]: visited[neighbour] = True queue.append(neighbour) count_visited += 1 return count_visited == n return \\"YES\\" if bfs(0) else \\"NO\\" # Example usage # n = 4 # devices = [ # (0, 0, 1), # (2, 0, 1), # (1, 1, 1), # (3, 3, 2) # ] # print(can_communicate_everywhere(n, devices))"},{"question":"A string is said to be well-formed if for every character that appears in the string, the number of times it appears is the same for all characters. Write a function that, given a string s, returns True if the string is well-formed and False otherwise. Example 1: Input: s = \\"aabbcc\\" Output: True Explanation: All characters appear exactly twice. Example 2: Input: s = \\"aabbccc\\" Output: False Explanation: Character \'a\' and \'b\' appear twice, but \'c\' appears thrice. Example 3: Input: s = \\"abcabc\\" Output: True Explanation: All characters appear exactly twice. Your Task: You don\'t need to take any input or produce output. Your function should take a single string s as input and return a boolean value indicating whether the string is well-formed or not. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(s) ≤ 10^5 s contains only lowercase English letters (\'a\'- \'z\').","solution":"def is_well_formed(s): Check if the string is well-formed by ensuring every character appears the same number of times. Args: s (str): The input string containing only lowercase English letters. Returns: bool: True if the string is well-formed, False otherwise. if not s: return True # An empty string is considered well-formed from collections import Counter char_count = Counter(s) freqs = list(char_count.values()) return all(freq == freqs[0] for freq in freqs)"},{"question":"A famous art collector is organizing an exclusive exhibition of his painting collection. He wants to arrange a special exhibit where a few specific paintings are placed consecutively, following a theme. The exhibition hall is a single row with designated spots for paintings. Each spot must display exactly one painting, and certain paintings must necessarily be placed in consecutive spots to depict a sequence related to an art movement. To create a unique arrangement, the collector identifies groups of paintings that should be placed consecutively. Every such group has its specific order. However, no painting can be shared between groups. The collector needs to know how many different ways he can arrange the paintings, given that the groups must maintain their internal order but can be placed in any order relative to each other. -----Input----- The input consists of: - one line containing two integers n and g (1 le n le 15, 1 le g le 5), where n is the number of unique paintings, and g is the number of groups. - g lines, each containing a distinct sequence of integers representing the paintings in a group, all integers between 1 and n. Each group is given in the exact order the paintings must appear. Each painting 1 through n appears in exactly one group. -----Output----- Output the number of different unique arrangements of the entire painting collection under the given constraints. -----Examples----- Sample Input 1: 5 3 1 2 3 4 5 Sample Output 1: 6 Sample Input 2: 6 2 1 2 3 4 5 6 Sample Output 2: 2 Sample Input 3: 4 2 1 2 3 4 Sample Output 3: 2","solution":"from itertools import permutations def number_of_arrangements(n, g, groups): Calculate the number of different unique arrangements of the paintings respecting the consecutive order of paintings in each group. # Calculate all permutations of groups perm = permutations(groups) # For each permutation, generate the corresponding arrangement & count unique ones unique_arrangements = set() for p in perm: arrangement = [] for group in p: arrangement.extend(group) unique_arrangements.add(tuple(arrangement)) return len(unique_arrangements) # Example usage: #print(number_of_arrangements(5, 3, [[1, 2], [3, 4], [5]]))"},{"question":"You are managing a warehouse with a large number of packages. Each package has a specific weight and a value associated with it. You have a maximum weight limit that you can carry in one trip. Your goal is to maximize the total value of the packages you can carry without exceeding the weight limit. Constraints * 1 leq N leq 10^5 (where N is the number of packages) * 1 leq W leq 10^9 (where W is the maximum weight you can carry) * 1 leq weight_i leq 10^6 (weight of the i-th package) * 1 leq value_i leq 10^6 (value of the i-th package) Input Input is given from Standard Input in the following format: N W weight_1 value_1 weight_2 value_2 : weight_N value_N Output Print the maximum possible total value of the packages you can carry without exceeding the weight limit. Example Input 4 10 5 10 4 40 6 30 3 50 Output 90 Input 6 8 2 20 3 50 5 30 6 60 1 70 4 10 Output 140","solution":"def max_package_value(n, W, packages): # Sort packages based on value-to-weight ratio in descending order packages.sort(key=lambda x: x[1]/x[0], reverse=True) total_value = 0 total_weight = 0 for weight, value in packages: if total_weight + weight <= W: total_weight += weight total_value += value else: break return total_value # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) W = int(data[1]) packages = [(int(data[i * 2 + 2]), int(data[i * 2 + 3])) for i in range(n)] print(max_package_value(n, W, packages))"},{"question":"A large company has recently started using a new system to track the login and logout times of its employees. Due to some technical issues, some of the logout times are missing. Your task is to find the total amount of time each employee was logged in for, based on the available data. You will be given a list of login and logout records in chronological order. If an employee logs in but has no corresponding logout time, assume they are still logged in until the end of the given period. Input The first line contains one integer t — the number of test cases to solve (1 ≤ t ≤ 100). Each test case starts with a line containing two integers n (1 ≤ n ≤ 1000) and T (1 ≤ T ≤ 5000) — the number of records and the end of the given period, respectively. Then n lines follow, each containing: - A string id — the unique identifier for the employee (1 to 20 alphanumeric characters). - A string action — either \\"login\\" or \\"logout\\". - An integer time — the time in seconds when the action occurred (0 ≤ time ≤ T). It is guaranteed that for every login action, there will be at most one corresponding logout action in the given period. Output For each test case, output the total logged-in time for each employee. The output for each test case should be in the order of employees\' first appearance in the input. Example # Input: ``` 2 5 100 alice login 10 bob login 15 alice logout 50 bob logout 80 carol login 90 4 200 dan login 100 eve login 150 dan logout 160 eve logout 180 ``` # Output: ``` alice 40 bob 65 carol 10 dan 60 eve 30 ``` Note: In the first example: - Alice logs in at 10 and out at 50, so her total time is 40 seconds. - Bob logs in at 15 and out at 80, so his total time is 65 seconds. - Carol logs in at 90 and is assumed logged in till T (100 seconds), so her total time is 10 seconds. In the second example: - Dan logs in at 100 and out at 160, so his total time is 60 seconds. - Eve logs in at 150 and out at 180, so her total time is 30 seconds.","solution":"def calculate_logged_in_time(t, test_cases): Calculate the total logged-in time for each employee based on login/logout records. Args: t : int : number of test cases test_cases: list of tuples : each tuple contains (n, T, records) n : int : number of records for the test case T : int : the end of the given period records : list of tuples : each tuple contains (id, action, time) Returns: results: list of lists : each list contains results for the corresponding test case in the order of first appearance of employees. results = [] for i in range(t): n, T, records = test_cases[i] login_times = {} total_times = {} order = [] for record in records: emp_id, action, time = record if emp_id not in total_times: total_times[emp_id] = 0 order.append(emp_id) if action == \'login\': login_times[emp_id] = time elif action == \'logout\': if emp_id in login_times: total_times[emp_id] += time - login_times[emp_id] login_times.pop(emp_id) # handle employees still logged in until the end of the period for emp_id in login_times: total_times[emp_id] += T - login_times[emp_id] case_result = [] for emp_id in order: case_result.append(f\\"{emp_id} {total_times[emp_id]}\\") results.append(case_result) return results"},{"question":"In a digital library system, books are categorized by their genre, each genre containing a different number of books. Users can borrow books from a particular genre if they have not exhausted their quota for that genre. A user has a borrowing quota for each genre, represented as a dictionary where keys are genres and values are the maximum number of books they can borrow from that genre. Write a function `can_borrow_book(library: dict, user_quota: dict, user_books_borrowed: dict, requested_genre: str) -> bool` that determines if a user can borrow a book from the requested genre. - `library` is a dictionary where keys are genres and values are the number of books available in that genre. - `user_quota` is a dictionary where keys are genres and values are the maximum number of books the user is allowed to borrow from that genre. - `user_books_borrowed` is a dictionary where keys are genres and values are the number of books the user has already borrowed from that genre. - `requested_genre` is a string representing the genre of the book the user wants to borrow. The function should return `True` if the user can borrow a book from the requested genre, and `False` otherwise. Input - A dictionary `library` with keys as string genres and values as integers representing the number of books available in each genre. - A dictionary `user_quota` with keys as string genres and values as integers representing the user\'s borrowing quota for each genre. - A dictionary `user_books_borrowed` with keys as string genres and values as integers representing the number of books the user has already borrowed from each genre. - A string `requested_genre` representing the genre of the book the user wants to borrow. Output - A boolean value `True` if the user can borrow a book from the requested genre, `False` otherwise. Examples Input library = {\\"Fantasy\\": 10, \\"History\\": 5, \\"Science\\": 2} user_quota = {\\"Fantasy\\": 3, \\"History\\": 2, \\"Science\\": 1} user_books_borrowed = {\\"Fantasy\\": 1, \\"History\\": 2, \\"Science\\": 0} requested_genre = \\"Fantasy\\" Output True Input library = {\\"Fantasy\\": 10, \\"History\\": 5, \\"Science\\": 2} user_quota = {\\"Fantasy\\": 3, \\"History\\": 2, \\"Science\\": 1} user_books_borrowed = {\\"Fantasy\\": 1, \\"History\\": 2, \\"Science\\": 0} requested_genre = \\"History\\" Output False Note In the first example, the user has borrowed 1 Fantasy book out of their quota of 3, and there are 10 Fantasy books available in the library. Therefore, the user can borrow another Fantasy book. In the second example, the user has already borrowed 2 History books, which is equal to their quota for History. Thus, the user cannot borrow another History book.","solution":"def can_borrow_book(library, user_quota, user_books_borrowed, requested_genre): Determines if a user can borrow a book from the requested genre. Parameters: - library: dictionary with keys as genres and values as the number of books available in that genre. - user_quota: dictionary with keys as genres and values as the maximum number of books the user is allowed to borrow from that genre. - user_books_borrowed: dictionary with keys as genres and values as the number of books the user has already borrowed from that genre. - requested_genre: string representing the genre of the book the user wants to borrow. Returns: - boolean value: True if the user can borrow a book from the requested genre, False otherwise. # Check if requested genre is in library and user quota if requested_genre not in library or requested_genre not in user_quota: return False # Check if user has already borrowed the maximum allowed number of books for the requested genre if user_books_borrowed.get(requested_genre, 0) >= user_quota[requested_genre]: return False # Check if there are books available in the requested genre in the library if library[requested_genre] == 0: return False return True"},{"question":"You are working on a file system that uses hierarchical directories to organize files. The system contains a number of operations that you can perform on the directories. Each directory has a unique name and can contain an arbitrary number of subdirectories and files. The operations include creating a new directory, deleting an existing directory, moving a directory to a different location, and listing the contents of a directory. Design a function that processes a series of operations on the file system. The function should take the initial state of the file system and a list of operations to perform. Each operation will be represented as a string and will be one of the following types: - \'CREATE <path>\' – Create a new directory at the specified path. - \'DELETE <path>\' – Delete the directory at the specified path. - \'MOVE <source_path> <destination_path>\' – Move the directory at the source path to the destination path. - \'LIST <path>\' – List the contents (both files and subdirectories) of the directory at the specified path. Assume the initial state of the file system contains a single root directory represented as \'/\'. -----Input----- The first line contains an integer m (1 leq m leq 1000) — the number of operations. Each of the next m lines contains one of the operations described above. Note that the paths will use a forward slash \'/\' as a delimiter and will be valid Unix-like paths. -----Output----- For each \'LIST\' operation, print the contents of the directory at the specified path in lexicographical order, each item on a new line. If the directory does not exist or is empty, output nothing. If there are no errors or exceptions, assume all operations are valid. -----Example----- Input 7 CREATE /home CREATE /home/user LIST /home MOVE /home/user /user LIST /home LIST /user DELETE /user LIST /user Output user Final Note: - The system should handle the paths and operations gracefully. - Focus on the underlying data structure to achieve efficient manipulation and retrieval of directory contents. - Maintain consistency in listing and handling directory paths.","solution":"class FileSystem: def __init__(self): self.fs = {\'/\': {}} def create(self, path): dirs = path.strip(\'/\').split(\'/\') current = self.fs[\'/\'] for dir in dirs: if dir: if dir not in current: current[dir] = {} current = current[dir] def delete(self, path): dirs = path.strip(\'/\').split(\'/\') current = self.fs[\'/\'] for dir in dirs[:-1]: current = current.get(dir, {}) current.pop(dirs[-1], None) def move(self, source_path, destination_path): dirs = source_path.strip(\'/\').split(\'/\') current = self.fs[\'/\'] for dir in dirs[:-1]: current = current.get(dir, {}) subdir = current.pop(dirs[-1], None) if subdir is not None: dirs = destination_path.strip(\'/\').split(\'/\') current = self.fs[\'/\'] for dir in dirs: if dir: if dir not in current: current[dir] = {} current = current[dir] current[dirs[-1]] = subdir def list(self, path): dirs = path.strip(\'/\').split(\'/\') current = self.fs[\'/\'] for dir in dirs: if dir: current = current.get(dir, {}) return sorted(current.keys()) def process_operations(self, operations): results = [] for operation in operations: parts = operation.split() if parts[0] == \'CREATE\': self.create(parts[1]) elif parts[0] == \'DELETE\': self.delete(parts[1]) elif parts[0] == \'MOVE\': self.move(parts[1], parts[2]) elif parts[0] == \'LIST\': result = self.list(parts[1]) if result: results.append(\'n\'.join(result)) else: results.append(\'\') return results def process_filesystem_operations(operations): fs = FileSystem() return fs.process_operations(operations)"},{"question":"You are given a string s consisting of n lowercase Latin letters. You need to determine the length of the longest substring of the string s where the characters are sorted in non-decreasing order. A substring is defined as a contiguous sequence of characters within a string. For example, in the string \\"abcabc\\", the longest substring with characters in non-decreasing order are \\"abc\\" or \\"abc\\". -----Input----- The first line of the input contains one integer n (1 le n le 3 cdot 10^5) — the length of s. The second line of the input contains exactly n lowercase Latin letters — the string s. -----Output----- Print one integer — the length of the longest substring which is sorted in non-decreasing order. -----Examples----- Input 6 abcabc Output 3 Input 5 edcba Output 1 -----Note----- In the first example, substrings \\"abc\\" in both the first half and the second half of the string are the longest substrings where characters are in non-decreasing order, and their length is 3. In the second example, none of the adjacent characters form a non-decreasing order, so the length of such a substring is 1.","solution":"def longest_non_decreasing_substring_length(n, s): Determines the length of the longest substring of s where the characters are sorted in non-decreasing order. Parameters: n (int): The length of the string. s (str): The input string consisting of lowercase Latin letters. Returns: int: The length of the longest non-decreasing substring. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if s[i] >= s[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"A new company is proposing a unique ride-sharing approach using autonomous electric vehicles. The company plans to coordinate multiple trips such that the rides minimize the total energy consumed. Each trip has a starting point, an ending point, and the battery consumption rate per mile. Write a program to calculate the minimum total energy required to execute all trips given scheduling constraints. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of trips. The next n lines each contain three space-separated integers: s, e, and c (1 ≤ s, e ≤ 1,000,000; 1 ≤ c ≤ 100), where s is the start mile, e is the end mile, and c is the energy consumption per mile for that trip. It is guaranteed that s < e for all trips. -----Output----- In the first line, print the only integer — the minimum total energy required to execute all trips. -----Examples----- Input 3 0 10 5 20 30 2 10 20 3 Output 110 Input 2 0 5 10 5 10 15 Output 125 -----Note----- In the first sample case, the best way to minimize energy is to execute all trips individually, so the total energy required equals the sum of all trips\' energy consumption. In the second sample case, you must consider overlapping trips and ensure the total energy is summed correctly to minimize unnecessary usage. You can assume no trips overlap in a way that a single car can perform multiple trips without returning to a starting point. However, the trips can be executed in sequence with their respective consumption rates.","solution":"def calculate_minimum_energy(trips): Calculate the minimum total energy required to execute all trips. total_energy = 0 # For each trip, calculate the energy consumption for trip in trips: start, end, rate = trip distance = end - start energy = distance * rate total_energy += energy return total_energy"},{"question":"You are given a matrix with n rows and m columns. The task is to perform the following operations on it: Type 1. Given two integers boldsymbol{x} and boldsymbol{y} (1leq x leq n, 1leq y leq m), increment the value of the element at position (x, y) by 1. Type 2. Given two integers boldsymbol{a} and boldsymbol{b} (1leq a leq n, 1leq b leq m), find the value of the element at position (a, b). Input Format The first line contains two integers n and m. The next n lines contain m integers each, representing the initial matrix. The next line contains a single integer q, the number of queries. Each of the next q lines contains three integers tp_i, x_i, y_i for a Type 1 query, or tp_i, a_i, b_i for a Type 2 query. tp_i denotes the type of the query. Constraints 1 leq n, m leq 1000 1 leq q leq 10^5 1 leq a_{ij} leq 10^9 for each element of the matrix Output Format For each query of the second type, print the required value. Sample Input 3 3 1 2 3 4 5 6 7 8 9 4 1 2 2 2 2 2 1 3 3 2 3 3 Example Output 6 10 Explanation Initially, the matrix is: 1 2 3 4 5 6 7 8 9 After the first query, the matrix becomes: 1 2 3 4 6 6 7 8 9 After the second query, the value at position (2, 2) is 6. After the third query, the matrix becomes: 1 2 3 4 6 6 7 8 10 After the fourth query, the value at position (3, 3) is 10.","solution":"def perform_operations(n, m, matrix, queries): results = [] for query in queries: if query[0] == 1: # Type 1 query: incrementing the value at position (x, y) x, y = query[1], query[2] matrix[x-1][y-1] += 1 elif query[0] == 2: # Type 2 query: retrieving the value at position (a, b) a, b = query[1], query[2] results.append(matrix[a-1][b-1]) return results"},{"question":"A string is a sequence of characters, and often we need to analyze certain properties of these strings. One common task is to determine if a string is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward (ignoring spaces, punctuation, and capitalization differences). Check if a given string is a palindrome. Example Given the string \\"A man a plan a canal Panama\\" Return True Function Description Complete the function isPalindrome in the editor below. isPalindrome has the following parameter(s): string s: the string to check Returns bool: True if the given string is a palindrome, False otherwise Input Format A single line contains a string, s. Constraints 1leq length(s)leq10^3 The string s consists of printable ASCII characters.","solution":"def is_palindrome(s): Check if a given string is a palindrome, ignoring spaces, punctuation, and capitalization differences. Parameters: s (str): the string to check Returns: bool: True if the given string is a palindrome, False otherwise # Remove spaces and make lowercase cleaned_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check palindrome return cleaned_s == cleaned_s[::-1]"},{"question":"One sunny morning, Alice decided to play with sequences of numbers. She came up with a new game where she needs to generate a sequence of numbers from 1 to n such that the sequence has an interesting property: the difference between any two adjacent numbers in the sequence should be at most k. Alice\'s friend Bob thinks it\'s impossible for her to generate such a sequence for every n and k. However, Alice believes otherwise and asks for your help to find any valid sequence, if it exists. Your task is to generate the sequence for her. -----Input----- The input consists of multiple test cases. The first line contains the number of test cases m (1 le m le 10). The only line of each test case contains two integers n and k (1 le k le n le 1000) – the length of the sequence and the maximum allowed difference between adjacent numbers. -----Output----- For each test case, print any sequence that satisfies the condition. If there are multiple valid sequences, print any one of them. It can be proven that for the given constraints, a valid sequence always exists. -----Examples----- Input 2 5 2 6 1 Output 1 3 2 4 5 1 2 3 4 5 6 -----Note----- In the first test case of the example, the differences between consecutive numbers are `2, 1, 2, 1`, which are all less than or equal to 2. In the second test case, the differences between consecutive numbers are all 1, which is exactly equal to 1.","solution":"def generate_sequence(n, k): Generates a sequence from 1 to n where the difference between any two adjacent numbers in the sequence is at most k. sequence = [] for i in range(1, n + 1, k + 1): block = list(range(i, min(i + k + 1, n + 1))) sequence.extend(block) return sequence def generate_sequences_for_test_cases(test_cases): results = [] for n, k in test_cases: sequence = generate_sequence(n, k) results.append(sequence) return results"},{"question":"You are given an `n x m` grid filled with non-negative integers. Your task is to implement a function that finds the length of the longest increasing path in the grid. From each cell, you can move either up, down, left, or right to a cell with a higher value. # Input: - A 2D list `grid` of size `n x m` containing non-negative integers. # Output: - A single integer: the length of the longest increasing path. # Constraints: - `1 <= n, m <= 200` - `0 <= grid[i][j] <= 10^4` # Example: ```python def longest_increasing_path(grid): # Your code here # Example 1: grid1 = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] print(longest_increasing_path(grid1)) # Output: 4 (The longest increasing path is [1, 2, 6, 9]) # Example 2: grid2 = [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] print(longest_increasing_path(grid2)) # Output: 4 (The longest increasing path is [3, 4, 5, 6]) # Example 3: grid3 = [ [1] ] print(longest_increasing_path(grid3)) # Output: 1 (The longest increasing path is [1]) ``` # Note: - You may assume that moving from cell (i, j) to any of its four possible neighboring cells (up, down, left, right) must be done within the grid boundaries. - Your solution should aim for efficiency. Solutions with high time complexity might not pass all test cases due to input size limitations.","solution":"def longest_increasing_path(grid): if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] cache = [[-1] * m for _ in range(n)] def dfs(x, y): if cache[x][y] != -1: return cache[x][y] maxLength = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] > grid[x][y]: length = 1 + dfs(nx, ny) maxLength = max(maxLength, length) cache[x][y] = maxLength return maxLength maxPath = 0 for i in range(n): for j in range(m): maxPath = max(maxPath, dfs(i, j)) return maxPath"},{"question":"Write a function `count_words_frequency` that takes a string `s` as input and returns a dictionary where the keys are the words from the string, and the values are the number of times each word appears. Words are case-insensitive and should be considered the same regardless of their case. Non-alphanumeric characters should be removed from the words. For example: `s = \\"Hello, hello! How are you? Hello...\\"` >>> returns `{\'hello\': 3, \'how\': 1, \'are\': 1, \'you\': 1}` `s = \\"It\'s a beautiful day, isn\'t it? Truly a beautiful day!\\"` >>> returns `{\\"its\\": 1, \\"a\\": 2, \\"beautiful\\": 2, \\"day\\": 2, \\"isnt\\": 1, \\"it\\": 1, \\"truly\\": 1}` Hint: A combination of string methods and a library module can make this task easier.","solution":"import re from collections import defaultdict def count_words_frequency(s): Returns a dictionary where the keys are words from the string \'s\' (case insensitive, non-alphanumeric characters removed) and the values are the number of times each word appears. # Convert the string to lowercase and remove non-alphanumeric characters s = s.lower() s = re.sub(r\'[^a-z0-9s]\', \'\', s) words = s.split() word_count = defaultdict(int) for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"Given an integer array A of size N, write a function to find the smallest positive integer that is not present in the array. Example 1: Input: A = [3, 4, -1, 1] Output: 2 Explanation: The smallest positive integer missing in the array is 2. Example 2: Input: A = [1, 2, 0] Output: 3 Explanation: The smallest positive integer missing in the array is 3. Your Task: You don\'t need to read or print anything. Your task is to complete the function find_missing_positive() which takes the array A and its size N as input parameters and returns the smallest positive integer that is not present in the array. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^6 -10^6 <= A[i] <= 10^6","solution":"def find_missing_positive(A, N): Returns the smallest positive integer that is not present in the array A of size N. for i in range(N): while 1 <= A[i] <= N and A[A[i] - 1] != A[i]: A[A[i] - 1], A[i] = A[i], A[A[i] - 1] for i in range(N): if A[i] != i + 1: return i + 1 return N + 1"},{"question":"In a magical forest, there are n trees lined up in a straight row from west to east, each having a unique magical power. One day, a wizard decides to perform a set of operations on these trees. There are two types of operations the wizard can perform: 1. Increase the power of a tree at a specific position by a certain value. 2. Determine the power of a tree at a specific position. You, as the wizard\'s assistant, need to manage these operations efficiently and keep the wizard informed of the trees\' powers as required. Input The first line contains two integers: n (1 ≤ n ≤ 100,000), the number of trees, and m (1 ≤ m ≤ 100,000), the number of operations. Each of the next m lines describes an operation: * If the i-th operation is type 1, the line contains three integers: 1, pi, and vi (1 ≤ pi ≤ n, -1,000 ≤ vi ≤ 1,000), where pi is the position of the tree and vi is the value to increase (or decrease) the power of the tree. * If the i-th operation is type 2, the line contains two integers: 2 and pi (1 ≤ pi ≤ n), where pi is the position of the tree whose power needs to be determined. Output For each operation of type 2, output a single integer, the current power of the tree at the specified position. Example Input 8 5 1 3 10 2 3 1 3 -5 2 3 1 6 20 Output 10 5 Note Initially, all trees have a power of 0. The first operation increases the power of the tree at position 3 by 10. The second operation queries the power of the tree at position 3, which is 10. The third operation decreases the power of the tree at position 3 by 5. The fourth operation queries the power of the tree at position 3 again, which is now 5. The fifth operation increases the power of the tree at position 6 by 20, but there is no query for that position, so no output for the last operation.","solution":"def magical_forest(n, m, operations): # Initialize tree powers with 0 tree_powers = [0] * n results = [] for operation in operations: o_type = operation[0] if o_type == 1: pi, vi = operation[1] - 1, operation[2] # convert to 0-based index tree_powers[pi] += vi elif o_type == 2: pi = operation[1] - 1 # convert to 0-based index results.append(tree_powers[pi]) return results"},{"question":"John is a farmer who owns a rectangular plot of land that he wants to divide into the maximum number of identical square plots. Each side of the square plots will have an integer length. However, he faces a constraint: some parts of his land are not suitable for cultivation due to irregular terrain, and he has marked these areas in a grid representation of his land. These unsuitable areas are indicated by zeros (\'0\'), and the cultivatable areas are indicated by ones (\'1\'). Given the dimensions of John\'s land (a rectangular grid of \'0\'s and \'1\'s), determine the largest side length of the square plot he can create that only contains \'1\'s. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid representing John\'s land, respectively. The next n lines each contain m characters, either \'0\' or \'1\', representing whether that part of the land is suitable (\'1\') or not suitable (\'0\') for farming. Output Print one integer — the side length of the largest square plot composed entirely of \'1\'s that John can create. Examples Input 4 5 10100 10111 11111 10010 Output 2 Input 3 3 111 111 110 Output 2 Input 1 1 0 Output 0 Note In the first sample, the largest possible square plot of \'1\'s has a side length of 2. The grid representation of such a plot is: ``` 11 11 ``` In the second sample, the largest possible square plot of \'1\'s has a side length of 2. The grid representation of such a plot is: ``` 11 11 ``` In the third sample, since the only plot on the land is unsuitable (\'0\'), the output is 0.","solution":"def largest_square_plot(n, m, grid): Determine the largest side length of the square plot he can create that only contains \'1\'s. if n == 0 or m == 0: return 0 # Create a dp table with the same dimensions as the grid dp = [[0] * m for _ in range(n)] max_side_length = 0 # Initialize the dp table for i in range(n): for j in range(m): if grid[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"You are given an array of integers representing the length of different ropes. You can perform the following operation as many times as you like: choose any two ropes and tie them together to form a new rope with length equal to the sum of the two original ropes. Once tied, the two original ropes are removed from the array and replaced by the new rope. The cost of this operation is equal to the length of the new rope. Your task is to minimize the total cost to tie all the ropes into a single rope. Write a function `minCostToTieRopes(ropes)` that returns the minimum cost to tie all the ropes into one rope. Example 1: Input: ropes = [4, 3, 2, 6] Output: 29 Explanation: Combine ropes of lengths 2 and 3 (cost = 5), combine resultant rope with length 4 (cost = 9), combine resultant rope with length 6 (cost = 14). Total cost is 5 + 9 + 14 = 28. Example 2: Input: ropes = [1, 8, 3, 5] Output: 30 Example 3: Input: ropes = [1, 2, 5, 10, 35, 89] Output: 224 Constraints: 1 <= ropes.length <= 10^5 1 <= ropes[i] <= 10^4","solution":"import heapq def minCostToTieRopes(ropes): Returns the minimum cost to tie all the ropes into a single rope. :param ropes: List[int] - list of rope lengths :returns: int - minimum cost to tie all ropes into one if len(ropes) <= 1: return 0 heapq.heapify(ropes) total_cost = 0 while len(ropes) > 1: first = heapq.heappop(ropes) second = heapq.heappop(ropes) new_rope = first + second total_cost += new_rope heapq.heappush(ropes, new_rope) return total_cost"},{"question":"Given a positive integer N, define a function `isPrime(X)` which returns true if X is a prime number and false otherwise. For example, `isPrime(11)` = True, because 11 has no divisors other than 1 and itself. Your task is to find the smallest prime number P which is both greater than N and can be expressed as the sum of the squares of two non-negative integers. ------ Input Format ------ - The first line contains an integer T, the number of test cases. The description of the T test cases follows. - Each test case consists of a single line with a single integer, the number N. ------ Output Format ------ - For each test case, print in a single line, an integer, the answer to the problem. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 ------ Sample Input 1 ------ 3 10 20 50 ------ Sample Output 1 ------ 13 29 53 ------ Explanation 1 ------ Test Case 1: The smallest prime greater than 10 that can be expressed as the sum of the squares of two non-negative integers is 13 (3^2 + 2^2). Test Case 2: The smallest prime greater than 20 that can be expressed as the sum of the squares of two non-negative integers is 29 (5^2 + 2^2). Test Case 3: The smallest prime greater than 50 that can be expressed as the sum of the squares of two non-negative integers is 53 (7^2 + 2^2).","solution":"def isPrime(X): Returns True if X is a prime number, False otherwise. if X <= 1: return False if X <= 3: return True if X % 2 == 0 or X % 3 == 0: return False i = 5 while i * i <= X: if X % i == 0 or X % (i + 2) == 0: return False i += 6 return True def isSumOfSquares(PR): Returns True if PR can be expressed as the sum of the squares of two non-negative integers. import math for i in range(int(math.sqrt(PR)) + 1): j = math.sqrt(PR - i * i) if j == int(j): return True return False def smallest_prime_sum_of_squares_greater_than(N): Returns the smallest prime number greater than N that can be expressed as the sum of the squares of two non-negative integers. candidate = N + 1 while True: if isPrime(candidate) and isSumOfSquares(candidate): return candidate candidate += 1 def process_input(T, test_cases): results = [] for N in test_cases: results.append(smallest_prime_sum_of_squares_greater_than(N)) return results"},{"question":"A well-known publishing company is hosting a novel writing competition. Each participant is required to submit their novel, which is represented as a string of words separated by spaces. The judges use a sophisticated algorithm to evaluate the novels, part of which involves finding the most frequent word in each novel. If multiple words have the same highest frequency, the lexicographically smallest word among them is chosen as the most frequent word. Your task is to create a program that helps the judges by determining the most frequent word in each novel submitted. -----Input----- - The first line contains an integer T, the number of test cases. - The first line of each test case contains a single integer n, the length of the string (number of characters including spaces). - The second line of each test case contains the novel as a single string of words separated by spaces. -----Output----- For each test case, output the most frequent word in the novel. In case of a tie, output the lexicographically smallest word. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 1000 - The novel only contains lowercase English letters and spaces. - Each word in the novel is at most 100 characters long. -----Example----- Input: 3 31 the quick brown fox jumps over the lazy dog 28 jack and jill went up the hill 11 the the the the Output: the and the -----Explanation----- Example 1: The word \'the\' appears twice, which is more frequent than any other word. Example 2: All words appear once, so the lexicographically smallest word \'and\' is chosen. Example 3: The word \'the\' is the only word and appears four times.","solution":"def find_most_frequent_word(novels): This function receives a list of tuples where each tuple contains: - An integer: the length of the string (number of characters including spaces) - A string: the novel text itself It returns a list of the most frequent words in each novel. results = [] for n, text in novels: words = text.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 most_frequent_word = min(word_count.items(), key=lambda x: (-x[1], x[0]))[0] results.append(most_frequent_word) return results"},{"question":"NIT, the curious inventor, decided to challenge his friends with a unique sorting problem. Can you help them solve it? You are given a 1-indexed array of n integers, a. You can perform the following operation any number (possibly zero) of times: Choose two indices i and j such that 1le i,jle n and i ne j. Swap the values of a_i and a_j if and only if |a_i - a_j| le d, where d is a given integer. Determine the lexicographically smallest array b that can be obtained after performing the above operations any number of times. Here, a lexicographically smaller array is the one that appears earlier in dictionary order. For example, [1, 2, 3] is lexicographically smaller than [1, 3, 2]. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The test cases follow. The first line of each test case contains two integers n and d (1 le n le 2000, 0 le d < 10^9). The second line of each test case contains n integers a_1,a_2,ldots,a_n (1le a_ile 10^9). It is guaranteed that the sum of n over all test cases does not exceed 10^4. -----Output----- For each test case, print the lexicographically smallest array that can be obtained after any number (possibly zero) of operations. -----Examples----- Input 3 4 2 3 1 2 4 5 1 5 4 3 2 1 3 5 10 15 20 Output 1 2 3 4 1 2 3 4 5 10 15 20 -----Note----- In the first test case of the sample, the optimal sequence of operations is: Swap elements at indices 1 and 2 (|3 - 1| le 2): [1, 3, 2, 4] Swap elements at indices 2 and 3 (|3 - 2| le 2): [1, 2, 3, 4] In the second test case, the optimal sequence of operations is: Pairwise swap elements: Swap elements at indices 1 and 5 (|5 - 1| le 4): [1, 4, 3, 2, 5] Swap elements at indices 2 and 4 (|4 - 2| le 2): [1, 2, 3, 4, 5]","solution":"def get_lexicographically_smallest_array(t, testcases): Function to determine the lexicographically smallest array that can be obtained after performing the allowed operations any number of times for each test case. results = [] for test in testcases: n, d, a = test # Sort the array as this gives the lexicographically smallest array a_sorted = sorted(a) results.append(a_sorted) return results # Example usage of the function testcases = [(4, 2, [3, 1, 2, 4]), (5, 1, [5, 4, 3, 2, 1]), (3, 5, [10, 15, 20])] print(get_lexicographically_smallest_array(3, testcases))"},{"question":"Given an array of integers and an integer k, find the maximum sum of any subarray of size k. Write a function that takes an array of integers and an integer k, and returns the maximum sum of any contiguous subarray of length k. Example 1: Input: arr = [2, 1, 5, 1, 3, 2], k = 3 Output: 9 Explanation: Subarray with maximum sum is [5, 1, 3]. Example 2: Input: arr = [2, 3, 4, 1, 5], k = 2 Output: 7 Explanation: Subarray with maximum sum is [3, 4]. Example 3: Input: arr = [-1, -2, -3, -4], k = 2 Output: -3 Explanation: Subarray with maximum sum is [-1, -2]. Constraints: 1. 1 <= arr.length <= 10^5 2. -10^4 <= arr[i] <= 10^4 3. 1 <= k <= arr.length","solution":"def max_subarray_sum(arr, k): Returns the maximum sum of any contiguous subarray of length k. if not arr or k <= 0 or k > len(arr): return 0 max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A small tech startup named ByteSpace is designing a secure communication protocol for their internal messaging system. One feature they want to implement is a way to check if messages follow a specific security pattern before being sent. A message is considered secured if it adheres to the following rule: - The message must contain at least one uppercase letter, at least one lowercase letter, at least one digit, and at least one special character (non-alphanumeric: `!@#%^&*()-+`). You need to write a function that will take a message as input and return a boolean value indicating whether the message is secure according to ByteSpace\'s rules. Input Format A single string `message` representing the message that needs to be validated. Output Format A single boolean value: - `True` if the message is secure. - `False` if the message is not secure. Constraints: - The length of the message will be between 1 and 1000 characters. Example Input ``` aA1! ``` Example Output ``` True ``` Example Input ``` SecureMessage ``` Example Output ``` False ``` Function Signature: ```python def is_message_secure(message: str) -> bool: # Your code here ```","solution":"def is_message_secure(message: str) -> bool: Checks if a message is secure based on ByteSpace\'s rules: - Contains at least one uppercase letter - Contains at least one lowercase letter - Contains at least one digit - Contains at least one special character (!@#%^&*()-+) Args: message (str): The message to be checked. Returns: bool: True if the message is secure, False otherwise. has_upper = any(char.isupper() for char in message) has_lower = any(char.islower() for char in message) has_digit = any(char.isdigit() for char in message) has_special = any(char in \\"!@#%^&*()-+\\" for char in message) return has_upper and has_lower and has_digit and has_special"},{"question":"Given a string containing alphanumeric characters and spaces, write a function to find the highest occurring character. If there are multiple characters with the same highest frequency, return the character which comes first in the string. Ignore the spaces. # Input - A string `s` with a length not exceeding 1000 characters. # Output - The character that occurs the most frequently within the given string, ignoring case. If there is a tie, return the character that appears first. # Example Example 1: **Input:** ``` \\"Example sentence\\" ``` **Output:** ``` e ``` Example 2: **Input:** ``` \\"hello world\\" ``` **Output:** ``` l ``` # Note - The comparison should be case-insensitive. - If the input is an empty string, the function should return an empty string.","solution":"def highest_occurring_character(s): Finds the highest occurring character in the string. If there are ties, returns the character that appears first. Ignores spaces and is case-insensitive. if not s: return \\"\\" s = s.replace(\\" \\", \\"\\").lower() char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_count = -1 max_char = \\"\\" for char in s: if char_count[char] > max_count: max_count = char_count[char] max_char = char return max_char"},{"question":"Given an integer `n`, write a program to calculate the number of distinct binary strings of length `n` such that there are no two consecutive `1`s. # Input - The input consists of a single integer `n` (1 ≤ n ≤ 1000), representing the length of the binary string. # Output - The output should be a single integer representing the number of distinct binary strings of length `n` with no consecutive `1`s, modulo `1000000007`. # Example Input ``` 3 ``` Output ``` 5 ``` # Explanation The 5 possible distinct binary strings of length 3 with no consecutive `1`s are: - `000` - `001` - `010` - `100` - `101`","solution":"def count_binary_strings(n): This function calculates the number of distinct binary strings of length `n` such that there are no two consecutive `1`s, modulo 1000000007. MOD = 1000000007 if n == 1: return 2 # \\"0\\" and \\"1\\" dp0, dp1 = 1, 1 # Base case: length = 1, dp0 counts \\"0\\", dp1 counts \\"1\\" for i in range(2, n + 1): new_dp0 = (dp0 + dp1) % MOD # We can append \\"0\\" to both previous \\"0\\" or \\"1\\" new_dp1 = dp0 # We can only append \\"1\\" to previous \\"0\\" dp0, dp1 = new_dp0, new_dp1 return (dp0 + dp1) % MOD"},{"question":"A programming contest is organized, and \'N\' developers are participating. Each developer has been assigned a difficulty level \'D_i\' for the contest. The difficulty levels are unique for each participant. Your task is to form the largest possible team such that the difficulty levels of any two team members differ by at most a given positive integer \'K\'. Output the size of such a team. -----Constraints----- - All values in input are integers. - 1 leq N leq 10^5 - 1 leq D_i leq 10^9 - 1 leq K leq 10^9 - D_i are all different. -----Input----- Input is given from Standard Input in the following format: N K D_1 D_2 ... D_N -----Output----- Print the size of the largest possible team. -----Sample Input----- 5 3 1 4 7 10 13 -----Sample Output----- 2 By choosing the developers with difficulty levels 1 and 4, we get a team with size 2 where the difference between any two members\' difficulty levels is at most 3. This is the largest possible size of such a team.","solution":"def largest_possible_team(N, K, difficulties): Returns the size of the largest possible team such that the difficulty levels of any two team members differ by at most \'K\'. :param N: Number of developers :param K: Maximum allowed difference in difficulty levels :param difficulties: List of difficulty levels assigned to each developer :return: Size of the largest possible team difficulties.sort() max_team_size = 1 curr_team_size = 1 start = 0 for i in range(1, N): if difficulties[i] - difficulties[start] <= K: curr_team_size += 1 max_team_size = max(max_team_size, curr_team_size) else: while difficulties[i] - difficulties[start] > K: start += 1 curr_team_size -= 1 return max_team_size"},{"question":"In a magical forest, there are n trees that form a line. Each tree can be represented by its height. One day, an evil mage decided to cast a spell to destroy some of the trees. He can only cast the spell in a specific range of contiguous trees. The forest keeper wants to save as many trees as possible. He has the power to move some trees within the range of the mage\'s spell to another position, but each tree can be moved only once. Given two arrays `heights` and `ranges`, where `heights[i]` represents the height of the i-th tree and `ranges[j]` represents the start and end index of the j-th spell range, determine the minimum number of trees that will be destroyed after using the keeper\'s power optimally. The heights array is 1-indexed. Input: - The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of trees. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — the heights of the trees. - The third line contains an integer m (1 ≤ m ≤ 100,000) — the number of spell ranges. - The next m lines each contain two integers sj and ej (1 ≤ sj ≤ ej ≤ n) — the start and end indices of the j-th spell range. Output: - Print a single integer, the minimum number of trees that will be destroyed after using the keeper\'s power optimally for each spell range. Example Input 6 3 2 5 6 4 8 2 2 4 1 6 Output 1 2 Note: In the first spell range (2, 4): - The keeper can move the tree of height 2 to any other position outside the range (2, 4). He can minimize the destruction to just 1 tree being destroyed, leaving heights as [3, 5, 6, 4, 8]. In the second spell range (1, 6): - Since the range covers the entire set of trees, the keeper can only move one of the trees outside the range, thus at least 2 trees will be destroyed. For example, moving tree 4 outside leaves the heights as [3, 2, 5, 6, 8], resulting in 2 trees destroyed. Therefore, the forest keeper acts optimally to minimize destruction.","solution":"def min_trees_destroyed(n, heights, m, ranges): results = [] for sj, ej in ranges: slice_heights = heights[sj - 1: ej] max_height = max(slice_heights) min_height = min(slice_heights) # We can save the highest tree and the smallest tree by moving them destroyed_trees = max(0, len(slice_heights) - 2) results.append(destroyed_trees) return results # Example usage heights = [3, 2, 5, 6, 4, 8] ranges = [(2, 4), (1, 6)] print(min_trees_destroyed(6, heights, 2, ranges)) # Output: [1, 4]"},{"question":"A group of programmers is working on a new coding challenge that requires balancing multiple values across various containers. Each container has a maximum capacity that cannot be exceeded. The goal of the challenge is to determine if it\'s possible to distribute given weights into these containers such that none of the containers exceed their maximum capacity. You are given a list of weights and another list representing the maximum capacities of the containers. Determine if it\'s possible to distribute all weights into the containers without exceeding their capacities. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of weights and the number of containers. The next line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 50) — the weights to be distributed. The third line contains m integers c_1, c_2, ..., c_m (1 ≤ c_j ≤ 200) — the capacities of the containers. -----Output----- Print \\"YES\\" (without the quotes) if it is possible to distribute all weights into the containers without exceeding their capacities, and \\"NO\\" (without the quotes) otherwise. -----Examples----- Input 3 2 10 20 30 40 30 Output YES Input 4 3 15 25 35 10 30 30 50 Output YES Input 3 2 30 50 60 40 40 Output NO","solution":"def can_distribute_weights(n, m, weights, capacities): weights.sort(reverse=True) capacities.sort(reverse=True) for weight in weights: for i in range(m): if capacities[i] >= weight: capacities[i] -= weight break else: return \\"NO\\" return \\"YES\\""},{"question":"A group of friends is trying to organize a sports tournament. They have multiple sports available and a list of players. Each player has a preference for exactly one sport. Given this, the tournament organizers need to assign each sport to exactly one player who prefers it to ensure that every sport is played. However, they also want to guarantee that the total skill levels of players chosen are maximized. Each player has a specific skill level, and each sport can only be assigned to one player who prefers it. You need to determine the maximum possible total skill level of the selected players. Input The input starts with an integer n (1 ≤ n ≤ 1000), the number of players and sports (each sport can be played by exactly one player). Next n lines contain two integers each, si and pi (1 ≤ si ≤ 100, 1 ≤ pi ≤ 1000), representing the skill level and the specific sport preference of the ith player respectively. It is guaranteed that no two sports preferences are the same for different players. Output Print a single integer which is the maximum possible total skill level of the players chosen. Examples Input 3 50 1 60 2 70 3 Output 180 Input 5 10 1 20 2 30 3 40 4 50 5 Output 150 Input 4 35 1 25 2 45 3 55 4 Output 160 Note In the first example, each player is assigned their preferred sport with respective skill levels adding up to 50 + 60 + 70 = 180. In the second example, all players can participate and their skill levels sum up to 10 + 20 + 30 + 40 + 50 = 150. In the third example, the total skill levels of the players when assigned their preferred sport is 35 + 25 + 45 + 55 = 160.","solution":"def max_total_skill_level(n, players): Calculates the maximum possible total skill level by assigning each sport to its preferred player. Parameters: n (int): Number of players and sports. players (list of tuple): List containing tuples of (skill level, sport preference) for each player. Returns: int: The maximum possible total skill level. # Calculate the total skill level by summing up the skill levels of all players total_skill_level = sum(skill for skill, _ in players) return total_skill_level"},{"question":"Write a function that takes an array of integers and returns a new array containing all the unique elements from the original array in the order they first appeared. If the parameter is not an array or contains non-integer elements, return `null`. For Example: `uniqueElements([4, 5, 6, 4, 7, 8, 6, 9])` should return `[4, 5, 6, 7, 8, 9]`","solution":"def uniqueElements(arr): Returns a list of unique elements from the input list, in the order they first appeared. :param arr: List of integers :return: List of unique integers or null if the input is invalid if not isinstance(arr, list) or not all(isinstance(i, int) for i in arr): return None seen = set() unique = [] for num in arr: if num not in seen: seen.add(num) unique.append(num) return unique"},{"question":"In a warehouse, there are several packages stacked in rows and columns. Each package has a unique ID number. The warehouse manager wants to ensure that there are no gaps in the package arrangement, meaning all package ID numbers should be consecutive starting from 1 up to the total number of packages, and there should be no missing or duplicate IDs. Your task is to write a program that verifies whether the given arrangement of package IDs forms a contiguous sequence from 1 to N without any gaps or duplicates. input The input consists of a single dataset in the following format: m n row1 row2 :: rowm The first line contains two integers m (1 ≤ m ≤ 100) and n (1 ≤ n ≤ 100), representing the number of rows and columns in the arrangement respectively. The following m lines each contain n integers, representing the package IDs in the respective row. output Output \\"Valid\\" if the arrangement contains all integers from 1 to m*n exactly once and in any order, otherwise output \\"Invalid\\". Example Input 2 3 1 2 3 4 5 6 Output Valid Input 2 2 1 2 4 4 Output Invalid","solution":"def validate_package_ids(m, n, package_ids): Checks if the given arrangement of package IDs forms a contiguous sequence from 1 to m*n without any gaps or duplicates. Parameters: m (int): number of rows. n (int): number of columns. package_ids (list): 2D list with m rows and n columns containing package IDs. Returns: str: \\"Valid\\" if IDs are contiguous from 1 to m*n, otherwise \\"Invalid\\". expected_ids = set(range(1, m * n + 1)) actual_ids = set() for row in package_ids: actual_ids.update(row) if actual_ids == expected_ids: return \\"Valid\\" else: return \\"Invalid\\""},{"question":"Carol wants to open a new café in town, and she has started designing automatic coffee machines. Each coffee machine can make three different types of coffee: espresso, latte, and cappuccino. To brew each type of coffee, a specific number of beans are required: for an espresso, 5 grams of beans are needed, for a latte, 7 grams of beans are needed, and for a cappuccino, 9 grams of beans are needed. Carol has already decided on the number of espressos e, lattes l, and cappuccinos c she wants to serve in a day. She buys coffee beans in bags, each containing m grams. Help Carol determine the minimum number of bags of coffee beans that she needs to buy in order to meet the daily demand. -----Input----- The first line contains four integers e, l, c, and m (1 leq e, l, c leq 10^8 and 1 leq m leq 10^8) — the number of espressos, lattes, cappuccinos Carol wants to serve, and the grams of beans in each bag respectively. -----Output----- Print one number — the minimum number of bags of coffee beans that Carol needs to buy. -----Examples----- Input 5 3 2 50 Output 1 Input 10 10 10 100 Output 3 -----Note----- In the first example, Carol needs 25 grams of beans for espressos, 21 grams for lattes, and 18 grams for cappuccinos, which in total is 64 grams. She needs at least one bag of 50 grams and another bag for the remaining 14 grams. In the second example, Carol needs 50 grams of beans for espressos, 70 grams for lattes, and 90 grams for cappuccinos, which in total is 210 grams. She needs three bags of 100 grams to accommodate this demand.","solution":"import math def min_bags_of_beans(e, l, c, m): Calculate the minimum number of bags of coffee beans needed. Parameters: e (int): number of espressos l (int): number of lattes c (int): number of cappuccinos m (int): grams of beans in each bag Returns: int: minimum number of bags of coffee beans # Grams of beans needed per type of coffee ESPRESSO_BEANS = 5 LATTE_BEANS = 7 CAPPUCCINO_BEANS = 9 # Total grams of beans needed total_grams = (e * ESPRESSO_BEANS) + (l * LATTE_BEANS) + (c * CAPPUCCINO_BEANS) # Minimum number of bags needed bags_needed = math.ceil(total_grams / m) return bags_needed"},{"question":"A company receives a series of shipments, each with a number of packages. Each package has a unique weight. The task is to distribute packages into containers such that each container has a weight that does not exceed a maximum limit, while keeping the number of used containers as low as possible. You are provided with the weight limit for each container and the weights of the packages in the shipment. Write a function to determine the minimum number of containers required for each shipment. Example weights = [4, 8, 1, 4, 2, 1] container_limit = 10 There are various possible distributions, but one optimal way is: - Container 1: [8, 1, 1] (sum = 10) - Container 2: [4, 4, 2] (sum = 10) Thus, the minimum number of containers required is 2. Function Description Complete the function minimumContainers in the editor below. minimumContainers has the following parameters: int container_limit: the maximum allowed weight per container int weights[]: an array of integers representing the weights of the packages Returns int: the minimum number of containers required Input Format The first line contains an integer T, T test-cases follow. Each test-case has 2 lines. The first line contains an integer container_limit (the weight limit for each container). The second line contains space-separated integers representing the weights of the packages in the shipment. Constraints 1 leq T leq 100 1 leq container_limit leq 10^9 1 leq weight_i leq 10^9 1 leq the number of packages leq 100 Sample Input 2 10 4 8 1 4 2 1 10 9 8 2 2 1 1 Sample Output 2 3 Explanation Case 1: One optimal way is to use two containers: [8, 1, 1] and [4, 4, 2]. Case 2: The optimal way is to use three containers: [9, 1], [8, 2], and [2, 1].","solution":"def minimumContainers(container_limit, weights): Determines the minimum number of containers required for a shipment based on container weight limit and package weights. Parameters: container_limit (int): The maximum allowed weight per container. weights (list of ints): The list of package weights. Returns: int: The minimum number of containers required. weights.sort(reverse=True) containers = [] for weight in weights: placed = False for container in containers: if sum(container) + weight <= container_limit: container.append(weight) placed = True break if not placed: containers.append([weight]) return len(containers) def process_inputs(inputs): Processes multiple test cases from the given inputs Parameters: inputs (list of str): List of input strings Returns: list of int: List of results for each test case results = [] t = int(inputs[0]) idx = 1 for _ in range(t): container_limit = int(inputs[idx]) weights = list(map(int, inputs[idx + 1].split())) results.append(minimumContainers(container_limit, weights)) idx += 2 return results"},{"question":"A transportation company is planning the most efficient way to deliver packages from a central hub to several delivery points. Each package has a weight, and each delivery vehicle has a maximum weight capacity. Your task is to determine how many trips each vehicle will need to make in order to deliver all the packages. You are given an array of integers representing the weights of the packages and an integer representing the maximum weight capacity of each vehicle. Packages must be delivered in the given order, and each vehicle can only carry packages up to its weight capacity per trip. Write a program that calculates the minimum number of trips needed for each vehicle to deliver all packages. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^4) — the number of packages. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 10^4) — the weights of the packages. The third line contains an integer k (1 ≤ k ≤ 10^4) — the maximum weight capacity of each vehicle. -----Output----- Output a single integer — the minimum number of trips needed to deliver all the packages. -----Examples----- Input 5 2 3 4 5 6 10 Output 3 Input 7 1 2 3 4 5 6 7 7 Output 5 -----Note----- In the first sample, the vehicle can carry packages as follows: - Trip 1: 2, 3, and 4 (9 weight units) - Trip 2: 5 (5 weight units) - Trip 3: 6 (6 weight units) In the second sample, the vehicle can carry packages as follows: - Trip 1: 1, 2, and 3 (6 weight units) - Trip 2: 4 (4 weight units) - Trip 3: 5 (5 weight units) - Trip 4: 6 (6 weight units) - Trip 5: 7 (7 weight units)","solution":"def calculate_trips(packages, capacity): trips = 0 current_weight = 0 for weight in packages: if current_weight + weight <= capacity: current_weight += weight else: trips += 1 current_weight = weight if current_weight > 0: trips += 1 return trips def min_trips(n, weights, capacity): return calculate_trips(weights, capacity)"},{"question":"Ali is a software engineer who loves problem-solving and has recently developed an interest in optimizing energy consumption in coding practices. He believes that, similar to kinetic energy in motion, certain coding patterns can be optimized to use minimal computational energy – including memory usage and execution time. Ali is now experimenting with matrix operations and has stumbled upon a problem. The problem involves finding the minimum energy path from the top-left corner to the bottom-right corner of a matrix, where each cell contains a certain amount of energy. The energy path is defined as the sum of energies of the cells he has to go through. Ali can only move to the right or down from each cell. He needs your help to write a program that calculates the minimum energy path for him. -----Input----- The first line of input contains an integer N (2 leq N leq 100), the size of the matrix (the matrix is N times N). The following N lines each contain N integers, where each integer E (1 leq E leq 1000) denotes the energy in that cell. -----Output----- Output one integer, the minimum energy required to go from the top-left to the bottom-right of the matrix. -----Examples----- Sample Input 1: 3 1 3 1 1 5 1 4 2 1 Sample Output 1: 7 Sample Input 2: 4 1 2 3 4 4 3 2 1 1 1 1 1 2 3 4 1 Sample Output 2: 10","solution":"def min_energy_path(matrix): n = len(matrix) # Create a dp table with the same dimensions as the matrix dp = [[0] * n for _ in range(n)] # Initial position dp[0][0] = matrix[0][0] # Initialize the first row for i in range(1, n): dp[0][i] = dp[0][i-1] + matrix[0][i] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[-1][-1] # Function to read input and output result def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) matrix = [] index = 1 for i in range(n): row = list(map(int, data[index:index + n])) index += n matrix.append(row) print(min_energy_path(matrix)) if __name__ == \\"__main__\\": main()"},{"question":"Mira is learning about stock prices and wants to predict future stock trends. She is looking at the historical stock prices for a given number of days. She wants to determine if there is any two-day period such that the stock price increases on the first day and decreases on the second day. If such a period exists, Mira will be delighted. -----Input----- The first line contains an integer T denoting the number of test cases. Each test case starts with an integer N which denotes the number of days. The next line contains N space-separated integers where each integer denotes the stock price on a particular day. -----Output----- For each test case, print \\"HAPPY\\" if such a two-day period exists, otherwise print \\"SAD\\" (quotes for clarity only, do not output). -----Constraints----- - 1 ≤ T ≤ 105 - 2 ≤ N ≤ 105 - 1 ≤ StockPricei ≤ 109 The sum of N over all test cases does not exceed 106. -----Example----- Input: 3 5 1 2 3 2 1 4 8 9 7 6 3 4 5 5 Output: HAPPY HAPPY SAD -----Explanation----- - In the first test case, the stock warms up on the second day and then cools down on the third day. - In the second test case, the stock warms up on the first day and then cools down on the second day. - In the third test case, there is no such two-day period where the stock price increases first and then decreases.","solution":"def is_stock_happy(t, cases): Determine if there exists a two-day period where stock price increases first and decreases subsequently. Args: t : int : Number of test cases cases : List[Tuple[int, List[int]]] : List containing tuples, each tuple has an integer representing the number of days and a list of integers representing stock prices for those days. Returns: List[str] : A list containing results for each test case, either \\"HAPPY\\" or \\"SAD\\" results = [] for i in range(t): n, prices = cases[i] happy = False for j in range(1, n): if prices[j-1] < prices[j] and prices[j] > prices[j+1] if j+1 < n else False: happy = True break results.append(\\"HAPPY\\" if happy else \\"SAD\\") return results"},{"question":"You are given a list of integers and your task is to determine if there exists a pair of distinct integers in the list that, when summed, results in an even number. If such a pair exists, print \\"YES\\"; otherwise, print \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of integers in the list. The second line contains n space-separated integers a1, a2,…, an (1 ≤ ai ≤ 10^9) — the integers in the list. Output Print \\"YES\\" if there exists a pair of distinct integers with an even sum, otherwise print \\"NO\\". Examples Input 5 1 3 5 7 9 Output NO Input 4 4 3 2 1 Output YES Note In the first sample, all pairs of integers (1+3, 1+5, 1+7, 1+9, 3+5, 3+7, 3+9, 5+7, 5+9, 7+9) result in an odd sum. In the second sample, the pairs (4+2, 3+1) sum to even numbers, so the answer is \\"YES\\".","solution":"def is_even_sum_pair_exist(n, numbers): Check if there exists a pair of distinct integers in the list that, when summed, result in an even number. :param n: The number of integers in the list. :param numbers: A list of n integers. :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\". # Count of even and odd numbers even_count = 0 odd_count = 0 for num in numbers: if num % 2 == 0: even_count += 1 else: odd_count += 1 # We need at least one even and one odd number to make an even sum if even_count > 0 and odd_count > 0: return \\"YES\\" else: return \\"NO\\""},{"question":"A spaceship exploration fleet is preparing for an expedition to a distant galaxy. They need to transport several critical and delicate machines to their destination without any damage. The machines are placed inside boxes, and there is a constraint on the arrangement of these boxes in the cargo hold. Each box has a specific weight, and the cargo hold can be divided into different rows. The arrangement must ensure that no row has a higher total weight than any of the subsequent rows to keep the spaceship balanced. You are to write a program that determines whether it is possible to rearrange the boxes in such a way that the arrangement maintains the non-increasing weight constraint across rows. To simplify, consider the boxes\' weights as an array of integers. Your goal is to determine if you can partition this array into multiple non-increasing subsequences. ----- Input ----- The first line of input contains two integers n and k (1 ≤ n, k ≤ 1000) - the number of boxes and the number of rows, respectively. The second line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^9), representing the weights of the boxes. ----- Output ----- Print \\"YES\\" if it is possible to partition the weights into k non-increasing subsequences. Otherwise, print \\"NO\\". ----- Examples ----- Input 5 2 4 3 5 1 2 Output YES Input 3 4 6 3 8 Output NO ----- Note ----- In the first example, one possible way to partition the boxes is [5], [4, 3, 2, 1], which satisfies the condition since the weights in each row are non-increasing. In the second example, it is impossible to partition the boxes into 4 rows since there are only 3 boxes available.","solution":"def can_partition_boxes(n, k, weights): Determines if it is possible to partition boxes\' weights into k non-increasing subsequences. Args: n : int : the number of boxes k : int : the number of rows weights : List[int] : the weights of the boxes Returns: str : \\"YES\\" if it is possible to partition, otherwise \\"NO\\". if k > n: return \\"NO\\" weights.sort(reverse=True) partitions = [0] * k for weight in weights: partitions[0] += weight partitions.sort() return \\"YES\\" if partitions[0] <= partitions[-1] else \\"NO\\""},{"question":"You are given a list of integers. Your task is to write a program that finds and prints the count of each unique integer within the list. -----Input----- The first line contains an integer N, the number of integers in the list (1 <= N <= 100). The second line contains N integers separated by space. -----Output----- Output the count of each unique integer in the list. For each unique integer, output the integer followed by its count. The output should be sorted in ascending order of integers. -----Example----- Input: 5 4 2 4 5 2 Output: 2 2 4 2 5 1","solution":"def count_unique_integers(n, integers): Given a list of integers, returns a dictionary with the count of each unique integer. Args: - n: The number of integers - integers: List of integers Returns: - A dictionary with the integer as the key and its count as the value from collections import Counter counter = Counter(integers) result = dict(sorted(counter.items())) return result def format_output(counter_dict): Given a dictionary of integer counts, returns a formatted string in the required output format. Args: - counter_dict: Dictionary with integers as keys and their counts as values Returns: - Formatted string of each integer and its count on a new line output = [] for key, count in counter_dict.items(): output.append(f\\"{key} {count}\\") return \\"n\\".join(output)"},{"question":"A company needs to track the performance of their employees based on three key performance metrics. Each metric is scored out of 100 points. An employee passes the evaluation if they meet both of the following criteria: The average score across all three metrics is at least 70; Each individual metric score is at least 50. Determine whether each employee passes the evaluation or not. ------ Input Format ------ - The first line of input will contain a single integer N, denoting the number of employees. - Each employee\'s scores consists of three space-separated integers: X, Y, and Z - the employee\'s score in each of the three metrics. ------ Output Format ------ For each employee, output PASS if the employee passes the evaluation, FAIL otherwise. Note that the output is case-insensitive i.e. PASS, Pass, pAsS, and pass are all considered the same. ------ Constraints ------ 1 ≤ N ≤ 500 0 ≤ X, Y, Z ≤ 100 ------ Sample Input 1 ------ 4 60 80 90 75 60 65 55 40 50 80 85 90 ------ Sample Output 1 ------ PASS FAIL FAIL PASS ------ Explanation 1 ------ Test Case 1: The average score is (60 + 80 + 90) / 3 = 76.67, which is ge 70 and each metric is ge 50. Test Case 2: The average score is (75 + 60 + 65) / 3 = 66.67, which is < 70. Test Case 3: The average score is (55 + 40 + 50) / 3 = 48.33, which is < 70 and also the individual score 40 is less than 50. Test Case 4: The average score is (80 + 85 + 90) / 3 = 85, which is ge 70 and each metric is ge 50.","solution":"def evaluate_employees(N, scores): Evaluates employees based on their scores across three metrics. Parameters: N (int): Number of employees scores (list of tuples): Each tuple consists of three integers representing the scores of an employee Returns: list of str: Each element is either \\"PASS\\" or \\"FAIL\\" for corresponding employee results = [] for score in scores: X, Y, Z = score average = (X + Y + Z) / 3 if average >= 70 and X >= 50 and Y >= 50 and Z >= 50: results.append(\\"PASS\\") else: results.append(\\"FAIL\\") return results"},{"question":"You\'re working as a developer for a delivery startup. Your company uses drones to deliver packages to customers. Each drone can only carry one package at a time from the warehouse to the customer\'s location. Since all deliveries must be completed as soon as possible, it\'s important to figure out the shortest delivery time given the constraints of drone availability and travel times. You have a list of orders that need to be delivered. Each order has a specific delivery time, which is the time it takes to travel from the warehouse to the customer and back. Your task is to schedule the deliveries in a way that minimizes the total delivery time. Assume that there are an infinite number of drones available, so each order\'s delivery can be scheduled independently. Input: - The first line contains an integer `n` (1 ≤ `n` ≤ 1,000), the number of orders. - The next `n` lines each contain an integer `t_i` (1 ≤ `t_i` ≤ 300), which represents the time to deliver the `i-th` order. Output: - Print a single integer, the shortest possible total delivery time if the orders are scheduled optimally. Sample Input 1: ``` 3 2 3 1 ``` Output for Sample Input 1: ``` 3 ``` Explanation for Sample Input 1: - The orders can be delivered one by one, with each drone starting a new delivery as soon as the previous one is completed. Therefore, the maximum time taken by any single order will be the total duration. Sample Input 2: ``` 5 8 5 2 3 10 ``` Output for Sample Input 2: ``` 10 ``` Explanation for Sample Input 2: - Each order is delivered by a separate drone, so the maximum delivery time will be the time of the longest delivery, which is 10 in this case. Your goal is to optimize the delivery schedule to ensure that the total delivery time is minimized while each drone can carry out only one delivery at a time.","solution":"def minimize_total_delivery_time(n, delivery_times): Returns the shortest possible total delivery time if the orders are scheduled optimally. Parameters: n (int): The number of orders. delivery_times (list of int): List of delivery times for each order. Returns: int: The shortest possible total delivery time. return max(delivery_times)"},{"question":"You are given a list of N unique integers. Your task is to find the smallest positive integer that is missing from the list. Write a function to solve this problem. The function should have a linear time complexity, O(N). Input Format The first line contains an integer N, the number of elements in the list. The second line contains N distinct integers separated by spaces. Constraints 1 leq N leq 10^5 -10^6 leq A[i] leq 10^6 Output Format Output the smallest positive integer that is missing from the list. Sample Input 0 5 1 2 3 5 6 Sample Output 0 4 Explanation 0 In the first example, the numbers 1, 2, 3, 5, and 6 are given. The smallest positive integer missing is 4. Sample Input 1 4 -1 -3 4 2 Sample Output 1 1 Explanation 1 In the second example, the numbers -1, -3, 4, and 2 are given. The smallest positive integer missing is 1.","solution":"def find_missing_positive_integer(nums): Finds the smallest positive integer missing from the list of nums. :param nums: List of N unique integers. :return: Smallest positive integer missing from the list. n = len(nums) # The idea is to mark the presence of numbers in the range 1 to n # We ignore numbers outside the range [1, n] since they do not affect our answer for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: swap_index = nums[i] - 1 nums[i], nums[swap_index] = nums[swap_index], nums[i] # Finding the smallest positive missing integer for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"You are given a list of integers, and you need to perform a sequence of operations on this list. Each operation specifies a subarray of the list, and you must find the sum of the maximum number of non-overlapping subarrays with negative sums within that subarray. ------ Input ------ The first line of input contains two integers N and Q (1 ≤ N ≤ 100,000, 1 ≤ Q ≤ 100,000); the number of elements in the list and the number of operations, respectively. The second line contains N space-separated integers, representing the elements of the list. Each of the next Q lines contains two integers L and R (1 ≤ L ≤ R ≤ N), representing the start and end indices (inclusive) of a subarray. ------ Output ------ For each operation, print a single integer: the maximum sum of the maximum number of non-overlapping subarrays within the specified subarray that have a negative sum. ------ Constraints ------ The elements of the list are integers with absolute values no larger than 10^{9}. ----- Sample Input 1 ----- 5 3 1 -2 3 -4 5 1 5 2 4 3 5 ----- Sample Output 1 ----- -6 -6 -4 ----- Explanation 1 ----- For the first operation, the subarray is [1, -2, 3, -4, 5], and the non-overlapping subarrays with negative sums are [-2] and [-4]. Their sum is -6. For the second operation, the subarray is [-2, 3, -4], and the non-overlapping subarrays with negative sums are [-2] and [-4]. Their sum is -6. For the third operation, the subarray is [3, -4, 5], and the only non-overlapping subarray with a negative sum is [-4].","solution":"def max_negative_subarray_sums(n, q, arr, queries): results = [] for l, r in queries: subarray = arr[l-1:r] negative_subarrays = [] current_sum = 0 for num in subarray: if num < 0: negative_subarrays.append(num) results.append(sum(negative_subarrays)) return results"},{"question":"A gardener is planting flowers in his garden. He has N pots arranged in a row, where each pot can accommodate one flower. He has also M restrictions given in the form of pairs (x, y), where he cannot plant flowers in both pot x and pot y simultaneously. The gardener wants to plant as many flowers as possible in such a way that none of the restrictions are violated. Write a function to determine the maximum number of flowers the gardener can plant. Input - The first line contains two integers N and M (1 <= N <= 100, 0 <= M <= (N*(N-1))/2). - The next M lines each contain two integers x and y (1 <= x, y <= N, x != y), representing a restriction. Output - Print a single integer, the maximum number of flowers the gardener can plant, following the given restrictions. Examples Input 5 2 1 2 3 4 Output 3 Input 4 4 1 2 2 3 3 4 4 1 Output 2","solution":"def max_flowers(N, M, restrictions): from itertools import combinations # Create adjacency list for restrictions restrict = {i: set() for i in range(N)} for x, y in restrictions: restrict[x - 1].add(y - 1) restrict[y - 1].add(x - 1) # Iterate through all possible ways to plant flowers max_flowers_count = 0 for r in range(1, N+1): for combo in combinations(range(N), r): valid = True # Check if the current combination of pots obeys the restrictions for i in range(r): for j in range(i+1, r): if combo[j] in restrict[combo[i]]: valid = False break if not valid: break if valid: max_flowers_count = max(max_flowers_count, r) return max_flowers_count # Example usage: n = 5 m = 2 restrictions = [(1, 2), (3, 4)] print(max_flowers(n, m, restrictions)) # Output: 3 n = 4 m = 4 restrictions = [(1, 2), (2, 3), (3, 4), (4, 1)] print(max_flowers(n, m, restrictions)) # Output: 2"},{"question":"David is participating in a race with n different checkpoints. He can either move forward or backward, but he must pass through each checkpoint exactly once. His goal is to find the minimum distance he needs to travel to visit all checkpoints in the given order. The checkpoints are given as an array p of length n, where each element represents the position of a checkpoint on a number line. David starts at the first checkpoint and ends at the last checkpoint. -----Input----- The first line contains an integer t — the number of test cases. The first line of each test case contains an integer n (1 leq n leq 1000) — the number of checkpoints. The second line contains n space-separated integers p_1, p_2, ldots, p_n (1 leq p_i leq 10^4) — the positions of the checkpoints in the given order. -----Output----- For each test case, output the minimum distance David needs to travel to visit all checkpoints in the given order. -----Example----- Input 2 3 1 5 3 4 1 3 6 10 Output 6 9 -----Note----- In the first sample, David can travel from checkpoint 1 to 5 (distance 4), then to 3 (distance 2). The total distance is 4 + 2 = 6. In the second sample, David travels from checkpoint 1 to 3 (distance 2), then to 6 (distance 3), and finally to 10 (distance 4). The total distance is 2 + 3 + 4 = 9.","solution":"def minimum_distance(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] checkpoints = test_cases[i][1] total_distance = sum(abs(checkpoints[j] - checkpoints[j+1]) for j in range(n-1)) results.append(total_distance) return results"},{"question":"Marco is fascinated by palindromes. A palindrome is a string that reads the same forward and backward. To challenge himself, he decided to find all distinct palindromic substrings within a given string. Help Marco by writing a program that finds and counts all distinct palindromic substrings in the given string. Example: consider the string \\"ababa\\". The distinct palindromic substrings are: \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\". Therefore, the output should be 5. INPUT: First line consists of T test cases. Each test case consists of a single string. OUTPUT: For each test case, print the number of distinct palindromic substrings. Range: 0 < T < 100 1 < |string| < 1000 SAMPLE INPUT: 2 ababa abc SAMPLE OUTPUT: 5 3","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the given string s. def is_palindrome(sub): return sub == sub[::-1] palindromic_substrings = set() for i in range(len(s)): for j in range(i, len(s)): substring = s[i:j+1] if is_palindrome(substring): palindromic_substrings.add(substring) return len(palindromic_substrings) def process_test_cases(test_cases): results = [] for s in test_cases: results.append(count_distinct_palindromic_substrings(s)) return results"},{"question":"Write a function that takes two integers `nextMove` and `lastMove` to simulate moves in a two-player turn-based game. The function should determine if the second player can win with their next move based on the initial moves of the game provided by `nextMove` and `lastMove`. The goal is to reach a score of at least `8`. The player scores a point for rolling a number greater than `4` (inclusive) and loses a point otherwise. If both players end up with the same score the result should be \\"Draw\\". If the first player wins the result should be \\"First\\", and if the second player wins the result should be \\"Second\\". The function should output the winner based on the above conditions. Input & Output: The input consists of multiple pairs of integers `nextMove` and `lastMove` with each pair on a new line. The end of the input is determined by a pair `0 0`, which signifies the end of the game series and should not be processed. For each game series, the output is either \\"First\\", \\"Second\\" or \\"Draw\\" based on the final scores after evaluating the moves. Example: Input: 6 4 5 3 2 1 0 0 Output: First Draw Draw","solution":"def game_result(nextMove, lastMove): Determines the result of the game based on nextMove and lastMove. If nextMove is greater than or equal to 8, or if nextMove is greater than lastMove, Second player wins (\\"Second\\"). If both players have the same move, it\'s a draw (\\"Draw\\"). Otherwise, the First player wins (\\"First\\"). if nextMove == 0 and lastMove == 0: return None if nextMove == lastMove: return \\"Draw\\" elif nextMove >= 8 or nextMove > lastMove: return \\"Second\\" else: return \\"First\\" def game_series(moves): Process a list of move pairs and determine the result for each game. Terminates when a move pair (0, 0) is encountered. results = [] for nextMove, lastMove in moves: if nextMove == 0 and lastMove == 0: break results.append(game_result(nextMove, lastMove)) return results"},{"question":"A sequence of positive integers is called _interesting_ if the sum of the elements in any of its non-empty subsequences is unique (i.e., no two non-empty subsequences have the same sum). For example, the sequence [1, 2] is interesting, because the sum of the subsequences {1}, {2}, and {1, 2} are 1, 2, and 3, respectively, which are all unique. Similarly, the sequence [3, 5, 2] is interesting because the sum of the subsequences {3}, {5}, {2}, {3, 5}, {3, 2}, {5, 2}, and {3, 5, 2} are 3, 5, 2, 8, 5, 7, and 10, respectively, which are unique as well. Given an integer n (1 leq n leq 10^9), your task is to find any interesting sequence containing n positive integers, or to determine that it is impossible. -----Input----- The input consists of a single integer n, the number of elements in the interesting sequence. -----Output----- If it is possible to find an interesting sequence of n positive integers, output the sequence in a single line, with the integers separated by spaces. If it is impossible, output \\"impossible\\". -----Examples----- Sample Input 1: 4 Sample Output 1: 1 2 4 8 Sample Input 2: 1 Sample Output 2: 1 Sample Input 3: 5 Sample Output 3: 1 2 4 8 16","solution":"def interesting_sequence(n): Returns an interesting sequence of n positive integers. if n < 1: return \\"impossible\\" sequence = [2**i for i in range(n)] return \' \'.join(map(str, sequence))"},{"question":"In a small town, there is a historic clock on the central tower that has n clock hands. Each hand can point to a number from 1 to k, arranged in a circle. The numbers increase clockwise. At any given moment, the hands can point to only one number. The townsfolk noticed that sometimes the hands might overlap pointing to the same number, which they consider a bad omen. Your task is to determine the smallest positive number the hands can point to such that no two hands overlap. If it is not possible to assign such a number to each hand, output -1. Input The first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 109) — the number of clock hands and the numbers on the clock. The second line contains n integers a1, a2, …, an (1 ≤ ai ≤ k) — the initial positions of the n hands. Output In the first line, print a single integer — the smallest positive number that can be assigned to each handle so that no two hands overlap. If it is not possible to assign such a number, print -1. Examples Input 3 5 2 4 5 Output 1 Input 4 4 1 1 2 2 Output -1 Note In the first sample test, each hand can be assigned a unique number without any overlap. For instance, you can assign them the numbers 1, 2, and 3 respectively. In the second sample test, it is not possible to assign any of the numbers to each hand such that no two hands overlap because the number on the clock is too limited compared to the number of hands. Thus, the answer is -1.","solution":"def smallest_non_overlapping_number(n, k, hands): Determines the smallest positive number the hands can point to such that no two hands overlap. If it is not possible to assign such a number to each hand, returns -1. # If there are more hands than possible positions, it\'s impossible if n > k: return -1 # Sort the hands to place them in ascending order hands.sort() # Assign unique positions to each hand starting from 1 and check for overlap used_positions = set() for number in hands: if number in used_positions: return -1 used_positions.add(number) # If all hands can be assigned a unique position, the smallest positive number is 1 return 1"},{"question":"Lisa is planning her gardening schedule for the year 2024. She plans to water her plants at regular intervals. Depending on her workload and weather predictions, she considers two possible schedules: either to water her plants every n-th day of the year, or on some fixed day of the month. Given her gardening schedule, help Lisa determine how many times she will water her plants in the year 2024. -----Input----- The input consists of a single line in one of the following formats: - \\"every n days\\" where n (1 ≤ n ≤ 366) denotes the interval in days. - \\"x of month\\" where x (1 ≤ x ≤ 31) denotes the day of the month. -----Output----- Print one integer — the number of times Lisa will water her plants in the year 2024. -----Examples----- Input every 3 days Output 122 Input 15 of month Output 12 -----Note----- 2024 is a leap year in the Gregorian calendar, which means it has 366 days. Lisa will start her schedule on January 1, 2024. If Lisa chooses to water her plants every 3 days, she will water them 122 times (on days 1, 4, 7, ..., 364). If she chooses to water them on the 15th of each month, she will water them 12 times, once for each month. In the first sample, Lisa waters her plants every 3 days over the span of the 366-day year, resulting in 122 watering days. In the second sample, Lisa waters her plants on the 15th day of each month, and since all twelve months have a 15th day, she waters her plants 12 times.","solution":"def count_watering_times(schedule): Returns the number of times Lisa will water her plants in the year 2024 based on the given schedule. The `schedule` can be either in the format \\"every n days\\" or \\"x of month\\". if schedule.startswith(\\"every\\"): n = int(schedule.split()[1]) return 366 // n elif schedule.endswith(\\"of month\\"): x = int(schedule.split()[0]) return 12 # Example usage: # print(count_watering_times(\\"every 3 days\\")) # Output: 122 # print(count_watering_times(\\"15 of month\\")) # Output: 12"},{"question":"You are given an array of integers and an integer k. Your task is to determine if it\'s possible to partition the array into two non-empty subsets such that the absolute difference between the sums of the two subsets is exactly k. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (2 leq n leq 50) — the length of the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000), which represents the elements of the array. The third line of each test case contains a single integer k (1 leq k leq 10^6). -----Output----- For each test case, print YES if the given array can be partitioned into two non-empty subsets such that the absolute difference of their sums is exactly k, and NO otherwise. -----Examples----- Input 3 4 1 2 3 9 3 3 4 1 2 4 5 3 1 4 2 2 10 Output YES NO YES -----Note----- In the first test case, the array [1, 2, 3, 9] can be partitioned as [1, 2, 9] and [3] where the absolute difference between the sums is |1+2+9 - 3| = 9 - 3 = 6 neq 3. However, partitioning differently [1, 9] and [2, 3] allow |1+9 - (2+3)| = 7 - 5 = 2, which does not satisfy k = 3. In the second test case, partitioning any combination cannot provide a difference of 4 as the sum of all elements is 4+1+2 = 7. In the third test case, array [3, 1, 4, 2, 2] can be partitioned as [3, 2, 2] and [1, 4] where the absolute difference between the sums is |3+2+2 - (1+4)| = 7 - 5 = 2, allowing a different partition [3, 2, 1] and [4, 2] provides |3 + 2 + 1 - (4 + 2)| = 6 - 6 = 0 which still not equals 10. Finally partition [1, 2, 2] and [3, 4] provides |1 + 2 + 2 - (3 + 4)| = 5 - 7 = 2 which is 50/50 again providing an absolute of 10.","solution":"def can_partition(arr, k): Determine if it\'s possible to partition the array into two non-empty subsets such that the absolute difference between the sums of the two subsets is exactly k. total_sum = sum(arr) # Check if the problem is solvable with the given k constraints if total_sum < k or (total_sum - k) % 2 != 0: return \\"NO\\" target_sum = (total_sum - k) // 2 # Use a set to keep track of possible subset sums possible_sums = {0} for num in arr: new_sums = possible_sums.copy() for s in possible_sums: new_sums.add(s + num) possible_sums = new_sums if target_sum in possible_sums: return \\"YES\\" else: return \\"NO\\" def solve(testcases): results = [] for case in testcases: _, arr, k = case results.append(can_partition(arr, k)) return results"},{"question":"Triangle numbers are a sequence of numbers where the n-th term is the sum of the first n positive integers. The sequence starts as follows: 1, 3, 6, 10, 15, 21, etc. Given a positive integer k, determine if k is a triangular number. If it is, return the value of n such that the n-th triangular number is equal to k. If k is not a triangular number, return -1. -----Input----- The input consists of a single integer k (1 leq k leq 10^9). -----Output----- If k is a triangular number, output the value of n such that the n-th triangular number is equal to k. Otherwise, output -1. -----Examples----- Sample Input 1: 10 Sample Output 1: 4 Sample Input 2: 7 Sample Output 2: -1 Sample Input 3: 15 Sample Output 3: 5","solution":"import math def is_triangular_number(k): Determines if k is a triangular number. If it is, returns the value of n such that the n-th triangular number is k. Otherwise, returns -1. # The n-th triangular number is given by T_n = n * (n + 1) / 2 # Thus, we need to solve the quadratic equation: n^2 + n - 2k = 0 # Coefficients of the quadratic equation a = 1 b = 1 c = -2 * k # Calculate the discriminant discriminant = b**2 - 4*a*c if discriminant < 0: return -1 # No real roots, so k is not a triangular number # Calculate possible values of n using the quadratic formula n1 = (-b + math.sqrt(discriminant)) / (2*a) n2 = (-b - math.sqrt(discriminant)) / (2*a) # We need positive integer solutions if n1 > 0 and n1.is_integer(): return int(n1) if n2 > 0 and n2.is_integer(): return int(n2) return -1"},{"question":"You have been hired to develop a data compression algorithm. Given a string consisting of lowercase alphabets, your task is to generate a compressed string using the following rules: 1. The string should be compressed by replacing consecutive repeated characters with the character followed by the number of its occurrences. 2. If the compressed string is not smaller than the original string, return the original string. For example, the string `\\"aabcccccaaa\\"` should be compressed to `\\"a2b1c5a3\\"`. If the string cannot be compressed efficiently, such as the string `\\"abc\\"`, the algorithm should return the original string. Input - A single line containing a string `s` consisting of lowercase alphabets (`1 ≤ |s| ≤ 10^5`). Output - A single line containing the compressed string or the original string if its compression isn\'t beneficial. Examples Input ``` aabcccccaaa ``` Output ``` a2b1c5a3 ``` Input ``` abc ``` Output ``` abc ``` Note In the first example, the input string `\\"aabcccccaaa\\"` is compressed into `\\"a2b1c5a3\\"`, which is shorter than the original string. In the second example, the input string `\\"abc\\"` remains `\\"abc\\"` since compression does not shorten the string.","solution":"def compress_string(s): Compresses the string by replacing consecutive repeated characters with the character followed by the number of its occurrences. If the compressed string is not shorter than the original string, returns the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Write a program to help a supermarket optimize their restocking schedule. The supermarket sells fresh produce that comes in crates. Each crate has a shelf life denoted in days, which is the number of days the produce can remain fresh after delivery. The supermarket wants to minimize waste by restocking just before the previous stock reaches its expiration. Given multiple restocking schedules with different shelf lives, determine the minimal number of days after the last restock for the supermarket to place the restocking order. Consider a single item with a restocking schedule represented as an array of integers. Each integer represents the shelf life of the produce in days for each delivery. For example, given a restocking schedule of `[3, 8, 12, 5]`, the minimal number of days after the last restock to place the next restocking order would be `5` days. ---- Input ---- The first line of the input contains a single integer `t` (1 leq t leq 10^4) — the number of test cases. Each of the next `t` lines contains a series of integers separated by spaces that represent the restocking schedule for a particular item. The first integer n (1 leq n leq 10^6) is the length of the schedule, followed by `n` integers that represent the shelf lives of the produce in days (1 leq text{days} leq 10^9). ---- Output ---- For each test case, print on a different line a single integer which is the minimum number of days after the last restock to place the next restocking order. ---- Examples ---- Input 3 4 3 8 12 5 3 10 15 20 5 2 3 1 4 5 Output 5 10 1 ---- Note ---- In the example: Case 1: For the schedule `[3, 8, 12, 5]`, the minimum is 5 days after the last restock. Case 2: For the schedule `[10, 15, 20]`, the minimum is 10 days after the last restock. Case 3: For the schedule `[2, 3, 1, 4, 5]`, the minimum is 1 day after the last restock.","solution":"def minimal_restocking_days(t, schedules): Returns the minimal number of days after the last restock to place the next restocking order for each given restocking schedule. :param t: Integer, number of test cases :param schedules: List of lists, where each inner list contains the schedule for a particular item. :return: List of integers, where each integer is the minimal number of days for the corresponding schedule. results = [] for schedule in schedules: n = schedule[0] days = schedule[1:] minimal_days = min(days) results.append(minimal_days) return results"},{"question":"You are given a list of n integers representing the scores of n players in a game. The game, however, has a peculiar rule: players\' scores can be changed when specific events occur, and some queries need to be answered about the scores in specific ranges. You must handle two types of operations on this list: * 1 i k d denotes that for all the players from position i to k (inclusive), their scores will be incremented by d. * 2 i k denotes that you need to calculate the total score of the players from position i to k (inclusive). Write a program to manage these operations efficiently. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of players and the number of operations. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the scores of the players initially. Each of the following q lines represents one of the operations: * 1 i k d (1 ≤ i ≤ k ≤ n, 1 ≤ d ≤ 10^9) * 2 i k (1 ≤ i ≤ k ≤ n) Output For each second type query print the total score of the players from position i to k. Examples Input 5 4 10 20 30 40 50 1 2 4 10 2 1 3 1 3 5 5 2 2 5 Output 100 175 Explanation Initially, the scores are [10, 20, 30, 40, 50]. After the first increment operation (1 2 4 10), the scores become [10, 30, 40, 50, 50]. The result of the first query (2 1 3) on the range [1, 3] is 10 + 30 + 40 = 80. After the second increment operation (1 3 5 5), the scores become [10, 30, 45, 55, 55]. The result of the second query (2 2 5) on the range [2, 5] is 30 + 45 + 55 + 55 = 185.","solution":"def update_range(arr, i, k, d): Increment the values in the range [i, k] by d. for idx in range(i-1, k): arr[idx] += d def query_sum(arr, i, k): Calculate the sum of values in the range [i, k]. return sum(arr[i-1:k]) def process_operations(n, q, a, operations): results = [] for op in operations: if op[0] == 1: _, i, k, d = op update_range(a, i, k, d) elif op[0] == 2: _, i, k = op results.append(query_sum(a, i, k)) return results"},{"question":"Write a function that takes a string s consisting of lowercase English letters and an integer k. The function should find the k-th largest distinct character (alphabetically, with \'a\' being the smallest and \'z\' being the largest) in the string. If there are fewer than k distinct characters, return the character \'?\'. -----Input----- The first line contains a string s (1 ≤ |s| ≤ 10^5) — the input string containing only lowercase English letters. The second line contains an integer k (1 ≤ k ≤ 26) — the position of the largest distinct character to find. -----Output----- Print the k-th largest distinct character in s, or \'?\' if there are fewer than k distinct characters. -----Examples----- Input abracadabra 2 Output d Input xyz 4 Output ?","solution":"def kth_largest_distinct_character(s, k): Returns the k-th largest distinct character in string s. If there are fewer than k distinct characters, returns \'?\'. distinct_chars = sorted(set(s)) if len(distinct_chars) < k: return \'?\' return distinct_chars[-k]"},{"question":"Binary Subarray Counter Given an array of binary numbers (0s and 1s), count the number of subarrays that contain an equal number of 0s and 1s. input N a_1 a_2 ... a_N output Output the number of subarrays with equal number of 0s and 1s. Constraint * 1 leq N leq 10 ^ 5 * a_i in {0, 1} Input example 4 0 1 0 1 Output example 4 Explanation: There are four subarrays with equal number of 0s and 1s: [0, 1], [1, 0], [0, 1], and [0, 1, 0, 1]. Example Input 4 0 1 0 1 Output 4","solution":"def count_equal_zero_one_subarrays(arr): Returns the number of subarrays with an equal number of 0s and 1s. count = 0 # Replace 0 with -1 arr = [1 if x == 1 else -1 for x in arr] prefix_sum = 0 prefix_map = {0: 1} # prefix map to store frequency of prefix sums for num in arr: prefix_sum += num if prefix_sum in prefix_map: count += prefix_map[prefix_sum] prefix_map[prefix_sum] += 1 else: prefix_map[prefix_sum] = 1 return count"},{"question":"Write a function to calculate the Kth smallest number in a given matrix of size NxN, where each row and column is sorted in ascending order. Example: Input: matrix = [ [1, 5, 9], [10, 11, 13], [12, 13, 15] ] K = 8 Output: 13 Explanation: The sorted order of the matrix elements is: [1, 5, 9, 10, 11, 12, 13, 13, 15] The 8th smallest number is 13. Your Task: You don\'t need to read input or print anything. Your task is to complete the function kthSmallest() which takes a list of list of integers \'matrix\' and an integer \'K\' as input and returns the K^{th} smallest number in the sorted order of matrix elements. Expected Time Complexity: O(N + KlogN) Expected Auxiliary Space: O(N) Constraints: - 1 <= N <= 500 - -10^9 <= matrix[i][j] <= 10^9 - All the rows and columns are sorted in increasing order. - 1 <= K <= N^2","solution":"import heapq def kthSmallest(matrix, K): Returns the Kth smallest number in a given NxN matrix where each row and column is sorted in ascending order. N = len(matrix) min_heap = [] # Initialize the heap with the smallest element from each row for r in range(min(K, N)): heapq.heappush(min_heap, (matrix[r][0], r, 0)) # Extract-min K times from the min heap count = 0 while min_heap: element, r, c = heapq.heappop(min_heap) count += 1 if count == K: return element if c < N - 1: heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1))"},{"question":"In a small town, the local train system consists of an array of stations aligned in a straight line. Each station is represented by a unique integer starting from 1 up to n, where n is the number of stations. Passengers frequently travel between different pairs of stations. The cost of traveling between two stations i and j, where i < j, is determined by the absolute value of the difference between i and j. For instance, the cost of traveling from station 2 to station 5 is |5 - 2| = 3. Given a list of queries where each query represents a pair of stations (i, j), find the respective cost for each pair. Function Description: Complete the `trainTravelCost` function in the editor below. The function should return an array of integers representing the cost for each query. `trainTravelCost` has the following parameter(s): - An integer `n`: the number of stations. - A 2D integer array `queries`: each query contains a pair of integers `[i, j]` where `1 <= i < j <= n`. Returns - An array of integers: each integer represents the cost of traveling between the respective pair of stations. Input Format - The first line contains an integer `n`, the number of stations. - The second line contains an integer `q`, the number of queries. - The next `q` lines each contain two integers `i` and `j`. Constraints: 1 <= n <= 1000 1 <= q <= 1000 1 <= i < j <= n Sample Input 5 3 1 3 2 5 1 5 Sample Output 2 3 4 Explanation - The cost of traveling from station 1 to station 3 is |3 - 1| = 2. - The cost of traveling from station 2 to station 5 is |5 - 2| = 3. - The cost of traveling from station 1 to station 5 is |5 - 1| = 4.","solution":"def trainTravelCost(n, queries): Returns the cost of traveling between pairs of stations for each query. Args: n (int): The number of stations. queries (List[List[int]]): The list of queries where each query is a pair of integers [i, j]. Returns: List[int]: The list of costs for each respective query. costs = [] for i, j in queries: costs.append(abs(j - i)) return costs"},{"question":"Write a program that takes an integer n and outputs the nth Fibonacci number. Constraints * 0 ≤ n ≤ 30 Input An integer n is given as a single line input. Output Print the nth Fibonacci number. Example Input 5 Output 5","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"A warehouse has a conveyor belt that moves parcels continuously from one end to the other. Parcels are numbered sequentially starting from 1, and each parcelse twill have a unique weight. To ensure the belt does not get overloaded, you need to write a program which examines every contiguous subarray of parcels and finds the whole sum for each subset to determine the maximum load at any point on the conveyor belt. Your task is to find the maximum load that the conveyor belt will have when the heaviest contiguous subarray is in transit. -----Constraints----- - All values in input are integers. - 1 ≤ L ≤ 100 - -1000 ≤ parcels[i] ≤ 1000 -----Input----- Input is given from Standard Input in the following format: L parcels -----Output----- Print the maximum load (sum of weights) the conveyor belt will have. -----Sample Input----- 5 -1 3 -2 5 -6 -----Sample Output----- 6 Explanation: The heaviest contiguous subarray is [3, -2, 5], which sums up to 6.","solution":"def max_subarray_sum(L, parcels): Returns the maximum load (sum of weights) of the heaviest contiguous subarray. max_so_far = parcels[0] current_max = parcels[0] for i in range(1, L): current_max = max(parcels[i], current_max + parcels[i]) max_so_far = max(max_so_far, current_max) return max_so_far # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() L = int(data[0]) parcels = list(map(int, data[1:])) print(max_subarray_sum(L, parcels))"},{"question":"Given a string `s` representing a sequence of characters, you are to find the length of the longest substring without repeating characters. -----Input----- `n` – the length of the string `s` where `1 <= n <= 10^5`. `n` will be followed by the string `s` consisting of only lowercase alphabets [a-z]. -----Output----- Output the length of the longest substring without repeating characters. -----Example----- Input: 9 ababcabcbb Output: 3 Explanation: The leftmost longest substring without repeating characters is \\"abc\\", which has a length of 3.","solution":"def length_of_longest_substring(s): Finds the length of the longest substring without repeating characters. Parameters: s (str): The input string consisting of lowercase alphabets. Returns: int: The length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index longest = max(longest, index - start + 1) return longest"},{"question":"Read problem statements in Mandarin Chinese, Russian and Vietnamese as well. There is a robot on an infinite grid, initially located at the origin (0, 0). The robot can move in four directions, either \\"U\\" (up), \\"D\\" (down), \\"L\\" (left), or \\"R\\" (right). You are given an integer N representing the number of commands, followed by a sequence of N commands directing the robot\'s moves. Your task is to find the final destination coordinates of the robot and return the product of the final x and y coordinates as the result. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains an integer N and a string of length N representing the sequence of commands. ------ Output ------ For each test case, output a single integer which is the product of the final x and y coordinates. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^6 The sum of the lengths of all command strings does not exceed 10^7. ------ Sample Input 1 ------ 2 5 UUDDL 3 LRR ------ Sample Output 1 ------ 0 0 ------ Explanation 1 ------ In the first test case, the robot moves Up (0,1), Up (0,2), Down (0,1), Down (0,0), Left (-1,0). The final position is (-1, 0), and the product of the coordinates is -1*0 = 0. In the second test case, the robot moves Left (-1,0), Right (0,0), Right (1,0). The final position is (1, 0), and the product of the coordinates is 1*0 = 0.","solution":"def final_destination_product(T, test_cases): results = [] for case in test_cases: N, commands = case x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 results.append(x * y) return results"},{"question":"Emily has n gifts to distribute among her friends. Each gift has a price associated with it. Emily wants to ensure that everyone gets gifts worth at least x units in total. She can give multiple gifts to a single friend, but she has to minimize the number of gifts given to meet or exceed the target amount. For each of the q queries, you need to calculate the minimum number of gifts Emily needs to give to ensure the total price of gifts is at least x units or print -1 if it\'s impossible to meet the target amount with the available gifts. Note that Emily cannot divide a gift and each query is independent of the others. -----Input----- The first line of input contains a single integer t (1 leq t leq 1000) — the number of test cases. The description of the test cases follows. The first line of each test case contains 2 integers n and q (1 leq n, q leq 1.5 cdot 10^5) — the number of gifts and the number of queries respectively. The second line contains n integers p_1, p_2, dots, p_n (1 leq p_i leq 10^4) — the price of each gift. Next q lines contain an integer x_j (1 leq x_j leq 2 cdot 10^9) — the required total price of the gifts for the j-th query. It is guaranteed that the sum of n and the sum of q over all test cases do not exceed 1.5 cdot 10^5. -----Output----- For each test case, output q lines. For the j-th line, output the minimum number of gifts required to reach at least x_j total price or print -1 if it\'s not possible. -----Examples----- Input 3 5 3 2 3 6 8 7 15 10 20 6 2 5 4 2 6 3 1 13 8 3 1 1 1 1 5 Output 2 2 3 3 2 -1 -----Notes----- In the first test case: For the first query, Emily can achieve a total price of at least 15 by giving the 4th and 5th gifts (8 + 7). For the second query, Emily can achieve a total price of at least 10 by giving the 3rd and 2nd gifts (6 + 4). For the third query, Emily can achieve a total price of at least 20 by giving the 3rd, 4th, and 5th gifts (6 + 8 + 7). In the second test case: For the first query, the minimum number of gifts to reach 13 are the 2nd, 4th, and 1st gifts (4 + 6 + 3). For the second query, Emily can achieve a total price of at least 8 by giving the 1st and 4th gifts (5 + 3). In the third test case: It\'s impossible to reach the required price of 5 with gifts each priced at 1 unit.","solution":"def min_gifts(t, test_cases): results = [] for case in test_cases: n, q, prices, queries = case prices.sort(reverse=True) gift_sums = [0] * (n + 1) for i in range(n): gift_sums[i + 1] = gift_sums[i] + prices[i] for x in queries: if x > gift_sums[-1]: results.append(-1) continue left, right = 1, n while left < right: mid = (left + right) // 2 if gift_sums[mid] >= x: right = mid else: left = mid + 1 results.append(left) return results # Example usage # t = 3 # test_cases = [ # (5, 3, [2, 3, 6, 8, 7], [15, 10, 20]), # (6, 2, [5, 4, 2, 6, 3, 1], [13, 8]), # (3, 1, [1, 1, 1], [5]) # ] # print(min_gifts(t, test_cases))"},{"question":"In a futuristic city, there is an advanced transportation system composed of interconnected stations. Each station is connected to other stations through one-way roads. The city\'s traffic department wants to analyze if the transportation system is well-designed. A well-designed system ensures that it\'s possible to travel from any station to another station either directly or through a series of one-way roads. Since the transportation system consists of one-way roads, it might be the case that travel isn\'t possible between certain stations. Your task is to write a program that determines whether the transportation system is well-designed or not. Input The first line contains two integers n and m — the number of stations and the number of one-way roads respectively (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000). The following m lines each contain two integers u and v, indicating there is a one-way road from station u to station v (1 ≤ u, v ≤ n, u ≠ v). Output Output \\"Well-designed\\" (without quotes) if it is possible to travel from any station to any other station, either directly or indirectly. Otherwise, output \\"Not well-designed\\" (without quotes). Examples Input 5 6 1 2 2 3 3 4 4 5 5 1 1 3 Output Well-designed Input 5 4 1 2 2 3 3 4 4 5 Output Not well-designed Input 3 3 1 2 2 3 3 1 Output Well-designed","solution":"def is_well_designed(n, m, roads): from collections import defaultdict, deque def bfs(start, graph, n): seen = [False] * n queue = deque([start]) seen[start] = True count = 1 while queue: node = queue.popleft() for neighbor in graph[node]: if not seen[neighbor]: queue.append(neighbor) seen[neighbor] = True count += 1 return count == n graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in roads: graph[u - 1].append(v - 1) reverse_graph[v - 1].append(u - 1) if bfs(0, graph, n) and bfs(0, reverse_graph, n): return \\"Well-designed\\" else: return \\"Not well-designed\\""},{"question":"Given a square matrix `matrix`, write a function to rotate the matrix to the right by 90 degrees in-place. The rotation must be achieved without utilizing any extra space for another matrix to hold the rotated values, i.e., it should be done with constant space complexity. The function should modify the matrix directly and not return anything. # Example Input and Output Example 1 Input: ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ``` matrix = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Example 2 Input: ``` matrix = [ [1, 2], [3, 4] ] ``` Output: ``` matrix = [ [3, 1], [4, 2] ] ``` # Constraints * The matrix dimensions will be positive integers (n x n) where 1 <= n <= 1000. * The input matrix will only contain integers.","solution":"def rotate(matrix): Rotates the given n x n matrix to the right by 90 degrees in-place. n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i] = matrix[i][::-1]"},{"question":"You are given an array of integers a of length n. You can perform the following operation any (possibly zero) number of times: Select any subarray and sort it in non-decreasing order. Determine if it is possible to sort the entire array using the operation described above. -----Input----- The first line contains a single integer t (1 leq t leq 10^3) — the number of test cases. Then the test cases follow. Each test case consists of two lines. The first line contains a single integer n (1 leq n leq 10^5) — the length of the array a. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print \\"YES\\" if it is possible to sort the entire array using the described operation, and \\"NO\\" otherwise. -----Examples----- Input 3 5 4 2 5 1 3 4 1 2 3 4 6 5 4 3 2 1 Output YES YES YES -----Note----- In the first test case: Initially a={4,2,5,1,3}. First, sort the subarray from index 2 to 4 to get a={4,1,2,5,3}. Then, sort the subarray from index 1 to 3 to get a={1,2,4,5,3}. Finally, sort the subarray from index 3 to 5 to get a={1,2,3,4,5}, which is sorted. In the second test case, the array is already sorted. In the third test case, you can sort the entire array in one operation to get a={1,2,3,4,5}, which is sorted.","solution":"def is_possible_to_sort(n, array): Determines if it is possible to sort the entire array using the described operation. Args: n (int): The length of the array. array (list of int): The array of integers. Returns: str: \\"YES\\" if it is possible to sort the entire array, otherwise \\"NO\\". if array == sorted(array): return \\"YES\\" for i in range(n - 1): if array[i] > array[i + 1]: return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): Processes multiple test cases. Args: t (int): The number of test cases. test_cases (list of tuples): Each tuple consists of (n, array). Returns: list of str: The result for each test case. results = [] for n, array in test_cases: results.append(is_possible_to_sort(n, array)) return results"},{"question":"In the city of Hogwarts, there are N locations which need to be connected by non-overlapping transportation routes. Each route can be represented as a straight line between two locations, and no two routes can cross each other. You are given the coordinates of each location, and you need to find one possible way to connect these locations using the above criteria. If it is not possible to connect all locations, return \\"impossible\\". -----Input----- The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. For each test case: - The first line contains one integer N (2 ≤ N ≤ 1000) - the number of locations. - The next N lines each contain two integers x (−1000 ≤ x ≤ 1000) and y (−1000 ≤ y ≤ 1000) - the coordinates of each location. -----Output----- For each test case, if it is not possible to connect all locations with non-overlapping routes, output \\"impossible\\". Otherwise, output N-1 lines, each containing two integers a and b (1 ≤ a, b ≤ N), the indices of two locations that should be connected by a route. -----Examples----- Sample Input: 2 3 0 0 2 2 3 3 4 0 0 1 2 3 1 4 4 Sample Output: 1 2 2 3 impossible","solution":"def connect_locations(test_cases): results = [] for case in test_cases: N, locations = case if N % 2 == 1: results.append(\\"impossible\\") continue pairs = [] for i in range(1, N, 2): pairs.append((i, i+1)) results.append(pairs) return results def process_input_output(test_cases_input): input_lines = test_cases_input.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) locations = [] for i in range(1, N + 1): x, y = map(int, input_lines[index + i].split()) locations.append((x, y)) test_cases.append((N, locations)) index += N + 1 results = connect_locations(test_cases) output_lines = [] for result in results: if result == \\"impossible\\": output_lines.append(result) else: for pair in result: output_lines.append(f\\"{pair[0]} {pair[1]}\\") return \\"n\\".join(output_lines) # Example function usage # input_data = 2 # 3 # 0 0 # 2 2 # 3 3 # 4 # 0 0 # 1 2 # 3 1 # 4 4 # print(process_input_output(input_data))"},{"question":"Task You are developing a text editor, and one of its features includes converting a given snake_case string to camelCase. Given a string in snake_case, transform it into camelCase by capitalizing the first letter of each word except the first one and removing the underscores. # Example For snake_case_string = \\"hello_world\\", the output should be \\"helloWorld\\". For snake_case_string = \\"this_is_snake_case\\", the output should be \\"thisIsSnakeCase\\". For snake_case_string = \\"snake_case\\", the output should be \\"snakeCase\\". # Input/Output - `[input]` string `snake_case_string` - `[output]` a string","solution":"def snake_to_camel(snake_case_string): Converts a snake_case string to camelCase. Parameters: snake_case_string (str): The input string in snake_case. Returns: str: The string converted to camelCase. parts = snake_case_string.split(\'_\') # Capitalize the first letter of each part except the first one camel_case_string = parts[0] + \'\'.join(word.capitalize() for word in parts[1:]) return camel_case_string"},{"question":"Write a program to simulate a deque (double-ended queue) and perform various operations on it. A deque is a linear collection that allows elements to be added or removed from both ends. The operations you need to handle are: * push_front(x): Add x to the front of the deque. * push_back(x): Add x to the back of the deque. * pop_front(): Remove and print the front element of the deque. If the deque is empty, print \\"EMPTY\\". * pop_back(): Remove and print the back element of the deque. If the deque is empty, print \\"EMPTY\\". Constraints * 1 ≤ q ≤ 100000 * 1 ≤ x ≤ 1000 (for the push operations) Input The first line contains q, the number of operations. Each of the next q lines contains one of the four possible operations. Output For each pop operation, print the value removed from the deque or \\"EMPTY\\" if it\'s empty. Example Input 8 push_back 1 push_back 2 push_front 3 pop_back pop_front push_back 4 pop_back pop_front Output 2 3 4 1","solution":"from collections import deque def simulate_deque(operations): dq = deque() result = [] for operation in operations: op = operation.split() if op[0] == \'push_front\': dq.appendleft(int(op[1])) elif op[0] == \'push_back\': dq.append(int(op[1])) elif op[0] == \'pop_front\': if dq: result.append(dq.popleft()) else: result.append(\\"EMPTY\\") elif op[0] == \'pop_back\': if dq: result.append(dq.pop()) else: result.append(\\"EMPTY\\") return result"},{"question":"Given an array `arr` of size `n`, check if it can be rearranged to form an arithmetic progression sequence (a sequence where the difference between consecutive elements is the same). Example 1: Input: arr = [3, 5, 1] Output: 1 Explanation: The array can be rearranged to [1, 3, 5], which forms an arithmetic progression. Example 2: Input: arr = [1, 2, 3, 5] Output: 0 Explanation: The array cannot form an arithmetic progression. Your Task: You don\'t need to read input or print anything. Complete the function isArithmeticProgression() which accepts an array `arr` and its size `n`, and returns an integer value 1 if it can be rearranged into an arithmetic progression, or 0 otherwise. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 2 <= n <= 10^5 -10^6 <= arr[i] <= 10^6","solution":"def isArithmeticProgression(arr, n): Checks if the array can be rearranged to form an arithmetic progression. Args: arr: List[int] -- The input array. n: int -- The size of the array. Returns: int -- 1 if it can form an arithmetic progression, otherwise 0. if n < 2: return 0 # An arithmetic sequence needs at least two elements arr.sort() # Calculate the common difference of the sorted array common_diff = arr[1] - arr[0] # Check if all consecutive elements have the same difference for i in range(2, n): if arr[i] - arr[i-1] != common_diff: return 0 return 1"},{"question":"Given an integer array nums, find the maximum product of any three numbers in the array such that they do not have to be adjacent. You need to return the maximum product possible. Example 1: Input: nums = [1, 2, 3, 4] Output: 24 Explanation: The maximum product is 24, which is the product of 2, 3 and 4. Example 2: Input: nums = [-1, -2, -3, -4] Output: -6 Explanation: The maximum product is -6, which is the product of -1, -2 and -3. Your Task: You do not need to read input or print anything. Your task is to complete the function maxProductOfThreeNumbers() which takes the integer array nums as the input parameter and returns the maximum product possible. Expected Time Complexity: O(n) [n is the length of nums] Expected Auxiliary Space: O(1) Constraints: 3 ≤ length of nums ≤ 10^4 -10^3 ≤ nums[i] ≤ 10^3","solution":"def maxProductOfThreeNumbers(nums): Returns the maximum product of any three numbers in the array. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a function that determines if a given positive integer is a perfect number. A perfect number is a number that is equal to the sum of its proper divisors (excluding the number itself). For example: ``` 6 is a perfect number Proper divisors of 6: 1, 2, 3 1 + 2 + 3 = 6 6 is equal to the sum of its proper divisors``` An example of a number that is not a perfect number: ``` 8 is not a perfect number Proper divisors of 8: 1, 2, 4 1 + 2 + 4 = 7 8 is not equal to the sum of its proper divisors``` If the input number is a perfect number, your program should return true. If it is not a perfect number, your program should return false. The input will always be a positive integer between 1 and 200.","solution":"def is_perfect_number(n): Determines if a given positive integer n is a perfect number. A perfect number is a number that is equal to the sum of its proper divisors (excluding the number itself). :param n: The positive integer to be checked. :return: True if n is a perfect number, False otherwise. # Find all proper divisors of n (excluding the number itself) proper_divisors = [i for i in range(1, n) if n % i == 0] # Sum the proper divisors sum_of_proper_divisors = sum(proper_divisors) # Check if n is equal to the sum of its proper divisors return sum_of_proper_divisors == n"},{"question":"# Task Given an array `A` of positive integers, where `A[i]` represents a coin with that value, determine the minimum number of coins that can be used to make a specific value `S`. If it is not possible to make that value, return `-1`. # Example For `A = [1, 2, 5]` and `S = 11`, the result should be `3`. We can form `11` by `5 + 5 + 1`. For `A = [2]` and `S = 3`, the result should be `-1`. It is impossible to form `3` using coins of value `2`. # Input/Output - `[input]` integer array `A` Coin values `1 <= A.length <= 100` `0 < A[i] <= 100` - `[input]` integer `S` Target value to make `0 < S <= 1000` - `[output]` an integer Minimum number of coins to make value `S`, or `-1` if it is not possible.","solution":"def min_coins(A, S): Given an array A of positive integers representing coin values, determine the minimum number of coins needed to make the value S. If it is not possible to make the value S, return -1. # Initialize dp array to hold the minimum number of coins for each amount from 0 to S dp = [float(\'inf\')] * (S + 1) dp[0] = 0 # Iterate over each coin in A for coin in A: for amount in range(coin, S + 1): dp[amount] = min(dp[amount], dp[amount - coin] + 1) # If dp[S] is still inf, it means we can\'t form the value S with the given coins return dp[S] if dp[S] != float(\'inf\') else -1"},{"question":"You are tasked with organizing a conference that includes several presentations. Each presentation has a start time and an end time. You need to allocate a conference hall to each presentation such that no two presentations that overlap in time are scheduled in the same hall. Your objective is to determine the minimum number of conference halls required. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of presentations. Each of the next n lines contains two integers s_i and e_i (0 ≤ s_i < e_i ≤ 10^9) — the start time and end time of the i-th presentation. -----Output----- Print only one integer — the minimum number of conference halls required to schedule all the presentations. -----Example----- Input 5 1 5 2 6 8 9 5 8 3 4 Output 3 -----Note----- In the sample case, the minimum number of conference halls required is 3. One possible allocation is as follows: - Hall 1: Presentations (1, 5) and (5, 8) - Hall 2: Presentations (2, 6) and (8, 9) - Hall 3: Presentation (3, 4)","solution":"import heapq def min_conference_halls(presentations): Determines the minimum number of conference halls required to schedule all presentations. :param presentations: List of tuples (start_time, end_time) for each presentation. :return: Minimum number of conference halls required. if not presentations: return 0 # Sort presentations by their start time presentations.sort(key=lambda x: x[0]) # Use a min-heap to track the end times of presentations in the current halls min_heap = [] for start, end in presentations: # If a hall is free (i.e., the earliest end time is less than or equal to the current start time), # remove it from the heap. if min_heap and min_heap[0] <= start: heapq.heappop(min_heap) # Add the current presentation\'s end time to the heap heapq.heappush(min_heap, end) # The size of the heap will be the number of conference rooms needed return len(min_heap)"},{"question":"You are given an array of integers and an integer k. You need to find all unique pairs of integers in the array that sum up to k. A pair (a, b) is considered the same as (b, a), and thus should only be counted once. Write a function that takes an array of integers and an integer k as inputs and returns a list of unique pairs of integers that sum up to k. Input The input consists of multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). For each test case, the first line contains an integer n (1 ≤ n ≤ 1000), the size of the array. The second line contains n integers representing the elements of the array. The third line contains the integer k. Output For each test case, output all the unique pairs of integers in the array that sum up to k in the format \\"(a, b)\\", where a and b are the integers in the pair. If there are no such pairs, output \\"No pairs\\". Example Input 3 5 1 2 3 4 5 5 4 1 1 1 1 2 7 2 4 3 3 3 1 5 6 Output (2, 3) (1, 4) (1, 1) (1, 5) (2, 4) (3, 3)","solution":"def find_pairs(array, k): Returns a list of unique pairs (a, b) from the array such that a + b = k. Each pair is sorted internally, e.g., (a, b) with a <= b. found_pairs = set() seen_elements = set() for number in array: complement = k - number if complement in seen_elements: pair = (min(number, complement), max(number, complement)) found_pairs.add(pair) seen_elements.add(number) if found_pairs: return sorted(found_pairs) else: return \\"No pairs\\" def process_test_cases(test_cases): Processes multiple test cases and returns the results as a list results = [] for case in test_cases: n, array, k = case result = find_pairs(array, k) results.append(result) return results"},{"question":"Write a function `largestRotatedRectangle` that accepts two integers `M` and `N` representing the dimensions of a 2D grid and a 2D list `matrix` of size MxN, consisting of only \'0\'s and \'1\'s. The function should return the area of the largest rectangle containing only 1\'s that can be obtained by rotating the matrix by 90, 180, or 270 degrees, or not rotating at all. Example 1: Input: M = 4, N = 5 matrix = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] Output: 6 Explanation: The largest rectangle composed entirely of 1\'s has an area of 6 (2 rows by 3 columns). Example 2: Input: M = 2, N = 2 matrix = [ [0, 1], [1, 0] ] Output: 1 Explanation: The largest rectangle of 1\'s has an area of 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `largestRotatedRectangle()` which takes two integers M, and N, and a 2D list `matrix` as input and returns an integer representing the maximum area of the largest rectangle of 1\'s obtainable when the matrix is rotated by 0, 90, 180, or 270 degrees. Expected Time Complexity: O(M * N) Expected Auxiliary Space: O(M * N) Constraints: 1 <= M, N <= 200 matrix[i][j] is either \'0\' or \'1\'","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 max_area = 0 heights = [0] * len(matrix[0]) for row in matrix: for i in range(len(row)): if row[i] == \'1\': heights[i] += 1 else: heights[i] = 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [-1] max_area = 0 for i in range(len(heights)): while stack[-1] != -1 and heights[stack[-1]] >= heights[i]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) while stack[-1] != -1: h = heights[stack.pop()] w = len(heights) - stack[-1] - 1 max_area = max(max_area, h * w) return max_area def rotate90(matrix): return list(zip(*matrix[::-1])) def largestRotatedRectangle(M, N, matrix): rotations = [matrix] for _ in range(3): rotations.append(rotate90(rotations[-1])) max_area = 0 for rotated in rotations: max_area = max(max_area, maximalRectangle(rotated)) return max_area"},{"question":"You are given a binary tree and an integer target sum. Write an algorithm to determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given target sum. Input Format The input consists of a binary tree and an integer. The binary tree is represented as a list of integer values in level-order traversal where \\"null\\" indicates the absence of a node. List elements are space-separated. The integer target sum is provided in a separate line. Constraints 1 leq Number of nodes in the binary tree leq 10^3 Each node\'s value will be an integer in the range [-1000, 1000]. Output Format Print \\"True\\" if such a path exists, otherwise print \\"False\\". Sample Input 0 5 4 8 11 null 13 4 7 2 null null null 1 22 Sample Output 0 True Explanation 0 In the given tree: ``` 5 / 4 8 / / 11 13 4 / 7 2 1 ``` One of the paths that sum up to 22 is: 5 rightarrow 4 rightarrow 11 rightarrow 2. Therefore, the output is \\"True\\". Sample Input 1 1 2 3 5 Sample Output 1 False Explanation 1 In the given tree: ``` 1 / 2 3 ``` No path sums up to 5, hence the output is \\"False\\".","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def has_path_sum(root, target_sum): if not root: return False if not root.left and not root.right and root.val == target_sum: return True return (has_path_sum(root.left, target_sum - root.val) or has_path_sum(root.right, target_sum - root.val)) def build_tree(level_order): if not level_order: return None root = TreeNode(level_order[0]) queue = [root] i = 1 while queue and i < len(level_order): node = queue.pop(0) if level_order[i] is not None: node.left = TreeNode(level_order[i]) queue.append(node.left) i += 1 if i < len(level_order) and level_order[i] is not None: node.right = TreeNode(level_order[i]) queue.append(node.right) i += 1 return root def main(input_str, target_sum): # Convert input string to level-order list level_order = [int(x) if x != \\"null\\" else None for x in input_str.split()] root = build_tree(level_order) return has_path_sum(root, target_sum)"},{"question":"You are given an inventory of different types of fruits and their respective quantities. Your task is to determine the minimum number of different types of fruits you\'ll need to give away to ensure that no type of fruit has a quantity greater than a given threshold. Given the inventory list which contains pairs of fruit types and their quantities, and the threshold value, write a program to calculate the minimum number of different fruit types you need to remove/redistribute so that no type exceeds the given threshold. Input The input is given in the following format: N F_1 Q_1 F_2 Q_2 ... F_N Q_N T The first line provides the number of different types of fruits N (1 leq N leq 10^4). The next N lines each contain a fruit type F_i (a string with a maximum length of 20 characters) and its quantity Q_i (1 leq Q_i leq 10^9). The last line provides the threshold value T (1 leq T leq 10^9). Output Output the minimum number of different fruit types you need to remove/redistribute. Examples Input 4 Apple 50 Banana 70 Orange 30 Grapes 90 60 Output 2 Input 3 Mango 10 Pineapple 20 Strawberry 5 15 Output 1","solution":"def min_fruits_to_giveaway(inventory, threshold): Returns the minimum number of different fruit types to be removed/redistributed. :param inventory: List of tuples where each tuple contains a fruit type and its quantity :param threshold: Maximum allowed quantity for any fruit type :return: Minimum number of different fruit types to be removed/redistributed # Count how many types exceed the threshold count = 0 for fruit, quantity in inventory: if quantity > threshold: count += 1 return count"},{"question":"Write a function that receives a list of integers and a target sum and finds all unique pairs of elements in the list that sum up to the target. Each pair should be sorted in ascending order, and the list of pairs should be returned in lexicographical ordering. Examples: Input: nums = [2, 4, 3, 5, 7, 8, 1, 9], target = 10 Output: [[1, 9], [2, 8], [3, 7]] Input: nums = [3, 0, -3, 4, -1, 2], target = 1 Output: [[-1, 2], [-3, 4]] Note: - Each element in the list can be used only once in the pair. - The pairs themselves need to be unique. If a pair (a, b) is in the list, then (b, a) should not appear in the list.","solution":"def find_pairs(nums, target): This function takes a list of integers and a target sum, and finds all unique pairs of elements in the list that sum up to the target. Each pair is sorted in ascending order, and the list of pairs is returned in lexicographical order. nums.sort() pairs = set() seen = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(pairs)"},{"question":"Bob is a skilled carpenter and has just received an unusual order. He needs to craft rectangular tables using wooden planks. Each plank has a positive integer length, but since Bob wants the tables to look aesthetically pleasing, the lengths of the planks of a single table must follow the Fibonacci sequence. Additionally, the tables can only have lengths of up to M units of wood in total. Help Bob figure out how many unique rectangular tables he can build with the given constraints. ---Input:--- - The first line of the input contains a single integer T, the number of test cases. - The next T lines contain an integer M for each test case. ---Output:--- For each test case, output the number of unique rectangular tables Bob can create, modulo 1000000007. ---Constraints:--- - 1 ≤ T ≤ 5 - 1 ≤ M ≤ 10^10 ---Sample Input:--- 2 10 1000 ---Sample Output:--- 15 354224860","solution":"MOD = 1000000007 def fibonacci_sequence_upto(m): Generate Fibonacci numbers up to `m`. fibs = [1, 1] while True: next_fib = fibs[-1] + fibs[-2] if next_fib > m: break fibs.append(next_fib) return fibs def count_fibonacci_tables(M): fibonacci_numbers = fibonacci_sequence_upto(M) count = 0 for fib in fibonacci_numbers: if fib <= M: count += 1 return count def find_all_unique_tables(T, test_cases): results = [] for M in test_cases: results.append(count_fibonacci_tables(M)) return results"},{"question":"Write a function that takes in a list of integers representing the elements of a circle and a specified number of steps. The function should simulate a circular shift of the list by the given number of steps. A positive step number indicates a clockwise shift, and a negative step number indicates a counter-clockwise shift. Constraints * The length of the list will be between 1 and 1000, inclusive. * Each integer in the list will be between -1000 and 1000, inclusive. * The number of steps will be between -10000 and 10000, inclusive. Input The first line contains a space-separated list of integers representing the elements of the circle. The second line contains an integer representing the number of steps for the shift. Output Print the list after performing the circular shift. Examples Input 1 2 3 4 5 2 Output 4 5 1 2 3 Input 1 2 3 4 5 -2 Output 3 4 5 1 2","solution":"def circular_shift(lst, steps): Simulates a circular shift of the list by the given number of steps. Parameters: lst (list): List of integers representing the elements of the circle. steps (int): Number of steps to shift the list. Positive for clockwise, negative for counter-clockwise. Returns: list: The list after performing the circular shift. n = len(lst) steps = steps % n # Normalize steps to be within the bounds of the list length return lst[-steps:] + lst[:-steps]"},{"question":"You are given an array of integers `nums` representing a deck of cards. Each card has a positive integer denoting its value. You need to arrange the deck in such a way that the deck is sorted in increasing order, but you can only place the cards into the deck according to a specific rule. The rule for arranging cards is as follows: a card can only be placed at the bottom or the top of the deck, and each card placement is followed by a reshuffle of the currently placed cards in a way that the top card goes to the bottom without changing the order of the other cards. Write a function that returns the order in which cards should be placed into the deck to achieve the desired sorted order. Example 1: Input: nums = [17, 13, 11, 2, 3, 5, 7] Output: [2, 13, 3, 11, 5, 17, 7] Explanation: To achieve the sorted order [2, 3, 5, 7, 11, 13, 17], the cards should be placed as follows: 1. Place 2 at the bottom (deck: [2]). 2. Place 13 at the bottom (deck: [13, 2]). 3. Place 3 at the bottom (deck: [3, 2, 13]). Reshuffle: [2, 13, 3]. 4. Place 11 at the bottom (deck: [11, 2, 13, 3]). Reshuffle: [2, 13, 3, 11]. 5. Place 5 at the bottom (deck: [5, 2, 13, 3, 11]). Reshuffle: [2, 13, 3, 11, 5]. 6. Place 17 at the bottom (deck: [17, 2, 13, 3, 11, 5]). Reshuffle: [2, 13, 3, 11, 5, 17]. 7. Place 7 at the bottom (deck: [7, 2, 13, 3, 11, 5, 17]). Reshuffle: [2, 13, 3, 11, 5, 17, 7]. Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 1000","solution":"from collections import deque def deckRevealedIncreasing(nums): Returns the order in which cards should be placed into the deck to achieve the sorted order. Args: nums: List[int] Returns: List[int] # Sort the numbers in ascending order sorted_nums = sorted(nums) # Initialize a deque to simulate the process of placing and reshuffling cards deck = deque() # Process the sorted numbers in reverse for num in reversed(sorted_nums): if deck: deck.appendleft(deck.pop()) deck.appendleft(num) return list(deck)"},{"question":"Chef has a collection of non-negative integers. He wants to arrange these integers into a sequence such that the sum of the absolute differences between every pair of adjacent integers is minimized. Given a list of integers, find the arrangement of integers that results in the minimum possible sum of the absolute differences between adjacent integers. ------ Input Format ------ - The first line of input contains an integer T, the number of test cases. Each test case consists of two lines. - The first line contains an integer N, the number of integers. - The second line contains N space-separated non-negative integers. ------ Output Format ------ For each test case, print the sequence of integers that minimizes the sum of the absolute differences between every pair of adjacent integers. If there are multiple sequences that achieve the minimum sum, print the lexicographically smallest one. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} - Each integer in the input array is between 0 and 10^{9} inclusive. - The sum of N over all test cases does not exceed 2 cdot 10^{5}. ----- Sample Input 1 ------ 2 4 4 2 1 3 3 7 1 3 ----- Sample Output 1 ------ 1 2 3 4 1 3 7 ----- Explanation 1 ------ Test Case 1: Sorting the array results in the sequence [1, 2, 3, 4], which minimizes the absolute differences sum: |1-2| + |2-3| + |3-4| = 1 + 1 + 1 = 3. Test Case 2: Sorting the array results in the sequence [1, 3, 7], which minimizes the absolute differences sum: |1-3| + |3-7| = 2 + 4 = 6.","solution":"def minimize_absolute_differences(test_cases): results = [] for case in test_cases: N, array = case sorted_array = sorted(array) results.append(sorted_array) return results"},{"question":"In a multi-story office building, there are numerous conference rooms where meetings are scheduled throughout the week. Each room can be booked for specific time slots that do not overlap. Your task is to write a program that plans the maximum number of non-overlapping meetings that can be scheduled within a single room on a given day. Each meeting has a start time and an end time, and no two meetings can overlap. Meetings are defined in terms of whole minutes, and a meeting starting exactly when another ends is considered non-overlapping. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 100), which denotes the number of meetings that were requested for this room. Each of the next `n` lines contains two integers `start` and `end` (0 ≤ start < end ≤ 1440), indicating the start and end times of a meeting in minutes from the beginning of the day (00:00 AM). All times are given as minutes past midnight (e.g., 1:00 AM is 60). Output Output a single integer indicating the maximum number of non-overlapping meetings that can be scheduled in this room. Example Input 5 30 90 0 60 60 120 90 150 150 180 Output 3 Explanation One optimal way to schedule the meetings is: 1. 0 to 60 2. 60 to 120 3. 150 to 180","solution":"def max_non_overlapping_meetings(meetings): Determines the maximum number of non-overlapping meetings that can be scheduled. Args: meetings (list of tuples): A list of tuples, each with two integers representing the start and end times of a meeting. Returns: int: The maximum number of non-overlapping meetings. # Sort meetings by end time, and by start time if end times are the same meetings.sort(key=lambda x: (x[1], x[0])) # Initialize the count of non-overlapping meetings count = 0 # Initialize the end time of the last meeting scheduled last_end_time = -1 for start, end in meetings: if start >= last_end_time: # If the start time of the current meeting is greater or equal to the # end time of the last meeting, schedule this meeting last_end_time = end count += 1 return count # Example input meetings = [ (30, 90), (0, 60), (60, 120), (90, 150), (150, 180) ] # Function call to demonstrate print(max_non_overlapping_meetings(meetings)) # Expected output: 3"},{"question":"*** Only Unique *** You will be given an array (arr). Your task is to determine whether all elements in the array are unique, without using any loops. The array can contain numbers, strings, or a mix of both. Return true if all elements are unique, false if any element is repeated. You should maintain case sensitivity for strings. Here are some examples to consider: - arr = [1, 2, 3, 4, 5], should return true because all elements are unique - arr = [\\"apple\\", \\"banana\\", \\"Apple\\"], should return true because all elements are unique (case-sensitive comparison) - arr = [123, \\"123\\", 123], should return false because \'123\' (number) is repeated","solution":"def only_unique(arr): Returns true if all elements in the array are unique, false otherwise. return len(arr) == len(set(arr))"},{"question":"For each task completed, you earn P reward points. In the FunZone store, each toy is worth Q reward points. Mike completes N number of tasks and wants to buy the maximum number of toys he can afford from the FunZone store. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains of a single line of input, three integers P, Q, and N. ------ Output Format ------ For each test case, output in a single line - the maximum number of toys Mike can get from the FunZone store. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ P, Q, N ≤ 1000 ------ subtasks ------ Subtask 1 (100 points): Original constraints. ----- Sample Input 1 ------ 3 15 50 4 25 100 9 30 75 12 ----- Sample Output 1 ------ 1 2 4 ----- Explanation 1 ------ Test Case 1: For completing each task, Mike earns 15 reward points. Mike completes 4 tasks. Thus, he earns 60 reward points. Mike can get 1 toy from the FunZone store using these points as each toy costs 50 reward points. Test Case 2: For completing each task, Mike earns 25 reward points. Mike completes 9 tasks. Thus, he earns 225 reward points. Mike can get 2 toys from the FunZone store using these points as each toy costs 100 reward points. Test Case 3: For completing each task, Mike earns 30 reward points. Mike completes 12 tasks. Thus, he earns 360 reward points. Mike can get 4 toys from the FunZone store using these points as each toy costs 75 reward points.","solution":"def maximum_toys(T, test_cases): result = [] for i in range(T): P, Q, N = test_cases[i] total_reward = P * N max_toys = total_reward // Q result.append(max_toys) return result"},{"question":"Consider that you are working with a method where you have to determine if a given number is a \\"Special Number.\\" A \\"Special Number\\" is defined as a number whose digits can be rearranged to form at least one square number. Input T, the number of test cases. N, the number for which you have to determine if it is a Special Number. Output For each test case, output either \\"YES\\" if the number is a Special Number, or \\"NO\\" if it is not. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^9 SAMPLE INPUT 3 1 10 35 SAMPLE OUTPUT Case 1: YES Case 2: YES Case 3: NO","solution":"import math from itertools import permutations def is_special_number(n: int) -> str: Determine if the digits of the given number can be rearranged to form a square number. digits = str(n) seen_permutations = set() for perm in permutations(digits): perm_number = int(\'\'.join(perm)) if perm_number in seen_permutations: continue seen_permutations.add(perm_number) if int(math.sqrt(perm_number)) ** 2 == perm_number: return \\"YES\\" return \\"NO\\" def process_test_cases(t, cases): results = [] for case_number, n in enumerate(cases, start=1): result = is_special_number(n) results.append(f\\"Case {case_number}: {result}\\") return results # Example usage processing input def run(): t = int(input()) cases = [] for _ in range(t): cases.append(int(input())) results = process_test_cases(t, cases) for result in results: print(result)"},{"question":"You are given an array of n integers, and you want to perform the following operation repeatedly until the array is empty: Choose any two elements a[i] and a[j], and remove them from the array. This operation has a cost, which is the absolute difference between the two elements chosen. Find the minimum total cost of removing all elements from the array. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the array. The second line contains n integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 1000), the elements of the array. Output Print one integer, the minimum total cost of removing all elements from the array. Examples Input 4 1 3 5 9 Output 12 Input 3 6 2 4 Output 8 Note In the first example, you can remove 1 and 3 with a cost of 2, then remove 5 and 9 with a cost of 4. The total cost would be 2 + 4 = 6. In the second example, you can remove 2 and 4 with a cost of 2, then remove 6 with a cost of 6. The total cost would be 8.","solution":"def minimum_total_cost(n, arr): Function to compute the minimum total cost of removing all elements from the array according to the given rules. Args: n: int : number of elements in the array arr: list : List of integers Returns: int : The minimum total cost if n == 1: return arr[0] arr.sort() total_cost = 0 for i in range(0, n-1, 2): total_cost += abs(arr[i+1] - arr[i]) # If the number of elements is odd, add the last remaining element if n % 2 == 1: total_cost += arr[-1] return total_cost"},{"question":"Sean loves Sudoku puzzles and enjoys coding as much as solving them. A Sudoku puzzle consists of a 9 times 9 grid divided into nine 3 times 3 subgrids. The objective is to fill the grid with digits from 1 to 9 such that each column, each row, and each of the nine 3 times 3 subgrids contains all the digits from 1 to 9. The puzzle is partially filled, leaving some cells empty. Sean decided to write a program that checks if the current state of the Sudoku grid is valid. Write a function `isValidSudoku(board: List[List[str]]) -> bool` that takes a partially filled 9 times 9 Sudokuboard and returns `True` if the state is valid according to the rules of Sudoku, and `False` otherwise. The Sudoku board is represented as a 2D list with the character `\'.\'` representing an empty cell. -----Input----- The first input line contains an integer t (1 leq t leq 100) — the number of test cases. Each test case consists of 9 lines, each containing 9 characters from `\'.\'`, `\'1\'`, `\'2\'`, ..., `\'9\'`. -----Output----- For each test case, output `True` if the Sudoku board is valid and `False` if it is not. -----Examples----- Input 1 53..7.... 6..195... .98....6. 8...6...3 4..8.3..1 7...2...6 .6....28. ...419..5 ....8..79 Output True Input 2 83..7.... 6..195... .98....6. 8...6...3 4..8.3..1 7...2...6 .6....28. ...419..5 ....8..79 5..38.7.. 6..195... .98....6. 8...6...3 4..8.3..1 7...2...6 .6....28. ...419..5 ....8..79 Output True False -----Note----- In the first test case, the partially filled Sudoku board can be filled in a way that follows all Sudoku rules, hence it returns `True`. In the second test case, the first board is valid, but the second board contains duplicates within one of the columns, violating the Sudoku rules, thus returning `False`.","solution":"def isValidSudoku(board): Returns True if the given 9x9 Sudoku board is valid, False otherwise. def is_valid_block(block): block = [num for num in block if num != \'.\'] return len(block) == len(set(block)) # Check rows and columns for i in range(9): row = [board[i][j] for j in range(9)] column = [board[j][i] for j in range(9)] if not is_valid_block(row) or not is_valid_block(column): return False # Check 3x3 subgrids for i in range(0, 9, 3): for j in range(0, 9, 3): subgrid = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)] if not is_valid_block(subgrid): return False return True def check_sudoku_boards(boards): Arguments: boards -- list of 9x9 lists, each representing a Sudoku board. Returns: list of booleans indicating whether each board is valid. results = [] for board in boards: results.append(isValidSudoku(board)) return results"},{"question":"Anna is participating in a team-building activity at her workplace. She has been assigned a task to organize a series of team-building exercises. The exercises are represented as a series of actions that need to be conducted in a specific sequence. Each action is represented by a lowercase English letter, and each letter appears exactly once in the sequence. However, there is a twist. Some pairs of actions have a dependency, meaning one action must be performed before the other. Anna needs to determine if it\'s possible to arrange the actions in a valid sequence that respects all the dependencies. You are given a string `s` of length `n`, representing the actions. You are also given `m` pairs of dependencies. Each pair consists of two distinct actions `a` and `b`, indicating that action `a` must come before action `b`. Your task is to determine if a valid sequence exists that satisfies all the dependencies, and if so, output any one valid sequence. If no valid sequence exists, output \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 26), the number of actions. The second line contains the string of n lowercase English letters without duplicates, representing the actions. The third line contains an integer m (0 ≤ m ≤ n * (n - 1) / 2), the number of dependency pairs. Each of the following m lines contains a pair of distinct lowercase English letters `a` and `b`, indicating that action `a` must come before action `b`. Output If a valid sequence exists, print any valid sequence as a string of n lowercase English letters. If no valid sequence exists, print \\"NO\\". Examples Input 3 abc 2 a c b c Output abc Input 4 abcd 3 a b a c c d Output abdc Input 4 abcd 4 a b b c c a d c Output NO Note In the first sample, \\"abc\\" is a valid sequence since `a` is before `c` and `b` is before `c`. In the second sample, \\"abdc\\" is one possible valid sequence since it respects all given dependencies (`a` is before `b`, `a` is before `c`, and `c` is before `d`). In the third sample, no valid sequence exists since the dependencies form a cycle (`a` must be before `b`, `b` before `c`, and `c` before `a`), making it impossible to arrange the actions without violating at least one dependency.","solution":"from collections import defaultdict, deque def find_valid_sequence(n, s, m, dependencies): # Build graph and in-degree count graph = defaultdict(list) in_degree = {char: 0 for char in s} for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 # Topological sorting using Kahn\'s algorithm queue = deque([char for char in s if in_degree[char] == 0]) result = [] while queue: node = queue.popleft() result.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(result) == n: return \'\'.join(result) else: return \\"NO\\""},{"question":"Given a list of integers, implement a function that finds the smallest positive integer that is missing from the list. Examples: Example 1: ``` Input: [1, 2, 3] Output: 4 ``` Example 2: ``` Input: [3, 4, -1, 1] Output: 2 ``` Example 3: ``` Input: [7, 8, 9, 11, 12] Output: 1 ``` Example 4: ``` Input: [0, 10, 2, -10, -20] Output: 1 ``` Function Signature: ```python def find_missing_positive(nums: List[int]) -> int: # Your code goes here ```","solution":"from typing import List def find_missing_positive(nums: List[int]) -> int: n = len(nums) # First, separate positive numbers and numbers <= 0 for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Then, find the first missing positive for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a function `findTasksOrder` that finds the order in which a collection of tasks needs to be completed given some dependencies. Each task is represented by a unique integer. The function must return the correct order of task execution or indicate that it\'s not possible to complete all tasks. ------ Input Format ------ - An integer N representing the number of tasks. - An array of tuples where each tuple (a, b) means that task b must be completed before task a. ------ Output Format ------ - A list of integers representing the order in which the tasks should be completed. If there\'s no valid order, return an empty list. ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ number of dependencies ≤ N(N-1)/2 (No duplicate dependencies) The tasks are numbered 0 to (N-1). ------ Example Input ------ 6 [(5, 2), (5, 0), (4, 0), (4, 1), (2, 3), (3, 1)] ------ Example Output ------ [5, 4, 2, 3, 1, 0] ------ Explanation ------ In the above example, task 5 needs to be completed before tasks 2 and 0, task 4 before 0 and 1, and so on. One possible valid order of tasks is [5, 4, 2, 3, 1, 0]. Other valid orderings might also exist, and any one of them can be returned as the output. If no valid ordering exists, return an empty list.","solution":"from collections import defaultdict, deque def findTasksOrder(N, dependencies): Finds the order in which tasks should be completed given dependencies. Parameters: N (int): Number of tasks. dependencies (list of tuples): List of (a, b) tuples, where task b must be completed before task a. Returns: list: A list of task numbers in the order they should be completed, or an empty list if not possible. # Create a graph and indegree count graph = defaultdict(list) indegree = [0] * N # Populate the graph and indegree count for a, b in dependencies: graph[b].append(a) indegree[a] += 1 # Initialize the queue with tasks that have no prerequisites queue = deque([i for i in range(N) if indegree[i] == 0]) order = [] while queue: task = queue.popleft() order.append(task) for neighbor in graph[task]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If all tasks are not included, there is a cycle if len(order) != N: return [] return order"},{"question":"# Task You are given a list of integers. Your task is to partition this list into two sublists such that the difference between the sums of these sublists is minimized. # Input/Output `[input]` integer array `numbers` An array of integers, where the length will be between 1 and 20, both inclusive. `[output]` integer The minimum difference possible between the sums of the two sublists. # Example For `numbers = [1, 6, 11, 5]`, the output should be `1`. Explanation: The list can be partitioned into [1, 5, 6] and [11] or [1, 11] and [6, 5], both partitioning ways result in gaps of 1.","solution":"def min_partition_difference(numbers): Partitions the given list into two sublists such that the difference between the sums of these sublists is minimized. Args: numbers (list): An array of integers. Returns: int: The minimum difference possible between the sums of the two sublists. total_sum = sum(numbers) n = len(numbers) # Create a DP table to store the subset sums dp = [[False] * (total_sum + 1) for _ in range(n + 1)] # Initialize dp[i][0] to True for all i for i in range(n + 1): dp[i][0] = True # Fill the DP table for i in range(1, n + 1): for j in range(1, total_sum + 1): if numbers[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]] else: dp[i][j] = dp[i - 1][j] # Find the minimum difference min_diff = float(\'inf\') for j in range(total_sum // 2 + 1): if dp[n][j]: min_diff = min(min_diff, total_sum - 2 * j) return min_diff"},{"question":"Given a list of n integers representing stock prices on different days, and a positive integer k, determine the maximum profit you can achieve by making at most k transactions. A transaction consists of buying and then selling one share of the stock. Example prices = [3,2,6,5,0,3] k = 2 In this case, one of the possible transactions could be buying on day 2 and selling on day 3, then buying on day 5 and selling on day 6. This leads to a maximum profit of 7. Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3. Function Description Complete the maxProfit function in the editor below. maxProfit has the following parameter(s): - int prices[n]: an array of integers that represent the stock prices on different days - int k: a positive integer representing the maximum number of transactions you can make Returns - int: the maximum profit you can achieve Input Format The first line contains an integer n, the number of days. The second line contains n space-separated integers representing the stock prices. The third line contains a positive integer k representing the maximum number of transactions. Constraints 1 leq n leq 500 0 leq k leq n/2 0 leq prices[i] leq 10^4 Sample Input STDIN Function ----- -------- 6 n = 6 3 2 6 5 0 3 prices = [3, 2, 6, 5, 0, 3] 2 k = 2 Sample Output 7 Explanation Using the given stock prices and making at most 2 transactions, the maximum profit is 7.","solution":"def maxProfit(prices, k): n = len(prices) if n == 0 or k == 0: return 0 # If we have more transaction opportunities than half the number of days, it\'s equivalent to unlimited transactions if k >= n // 2: return sum(max(prices[i + 1] - prices[i], 0) for i in range(n - 1)) dp = [[0] * n for _ in range(k + 1)] for i in range(1, k + 1): max_diff = -prices[0] for j in range(1, n): dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff) max_diff = max(max_diff, dp[i - 1][j] - prices[j]) return dp[k][n - 1]"},{"question":"You are given an array arr of n integers. For each index i, you have to determine the number of distinct integers present in the array that divide arr[i]. Example 1: Input: n = 3 arr = {3, 4, 6} Output: 2 3 4 Explanation: For 3, the distinct divisors are 1 and 3. For 4, the distinct divisors are 1, 2, and 4. For 6, the distinct divisors are 1, 2, 3, and 6. Example 2: Input: n = 2 arr = {10, 22} Output: 4 4 Explanation: For 10, the distinct divisors are 1, 2, 5, and 10. For 22, the distinct divisors are 1, 2, 11, and 22. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countDistinctDivisors() which takes an integer n and an array arr and returns an array of length n, the number of distinct divisors for each index. Expected Time Complexity: O(n * sqrt(max(arr))) Expected Space Complexity: O(n) Constraints: 1 <= n <= 10^5 1 <= arr[i] <= 10^9","solution":"def countDistinctDivisors(n, arr): For each element in arr, calculate the number of distinct divisors. def count_divisors(num): divisors = set() for i in range(1, int(num**0.5) + 1): if num % i == 0: divisors.add(i) if i != num // i: divisors.add(num // i) return len(divisors) result = [] for number in arr: result.append(count_divisors(number)) return result"},{"question":"A large company is hosting a coding competition where they plan to distribute their coveted work-from-home opportunities as rewards. Each participant competes in multiple rounds and earns points in each round based on their problem-solving abilities. At the end of the competition, participants with the highest cumulative scores win the rewards. To streamline this process, you need to write a program that calculates the total scores of each participant and identifies the winners. Each participant is identified by their unique IDs, and their scores for each round are provided in a structured format. Input: - The first line contains two space-separated integers N and M, where N is the number of participants, and M is the number of rounds. - The next N lines contain the unique ID of each participant in the competition. - The following M lines contain N space-separated integers, where each integer represents the score of a participant in that round. Output: - Print the ID(s) of the participant(s) with the highest cumulative score. If multiple participants have the highest cumulative score, print their IDs in the order they appeared in the input. Constraints: 1 ≤ N, M ≤ 100 1 ≤ Score ≤ 1000 The unique IDs are alphanumeric strings containing only lowercase letters and digits, and are of length between 1 to 10. SAMPLE INPUT 3 4 alice bob charlie 100 200 150 80 90 70 90 100 110 50 70 60 SAMPLE OUTPUT bob Explanation: In the given example, we have 3 participants: alice, bob, and charlie, and 4 rounds of competition. The participants\' scores in each round are as follows: - Round 1: alice: 100, bob: 200, charlie: 150 - Round 2: alice: 80, bob: 90, charlie: 70 - Round 3: alice: 90, bob: 100, charlie: 110 - Round 4: alice: 50, bob: 70, charlie: 60 Cumulative scores are calculated as follows: - alice: 100 + 80 + 90 + 50 = 320 - bob: 200 + 90 + 100 + 70 = 460 - charlie: 150 + 70 + 110 + 60 = 390 The participant with the highest cumulative score is bob with 460 points. Therefore, the output is bob.","solution":"def identify_winners(N, M, participants, scores): Calculates the total scores of each participant and identifies the winners with the highest cumulative scores. Parameters: - N (int): Number of participants - M (int): Number of rounds - participants (list of str): List of participant IDs - scores (list of list of int): List containing M lists, each of which has N scores for the participants Returns: - List of str: List of IDs of the participant(s) with the highest cumulative score cumulative_scores = [0] * N for round_scores in scores: for i in range(N): cumulative_scores[i] += round_scores[i] max_score = max(cumulative_scores) winners = [participants[i] for i in range(N) if cumulative_scores[i] == max_score] return winners"},{"question":"Given a list of integers representing an array, you need to determine the maximum length of a subarray such that the subarray contains exactly two distinct integers. INPUT The first line contains N, the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. OUTPUT Print the maximum length of a subarray that contains exactly two distinct integers. CONSTRAINTS 1 ≤ N ≤ 10^5 -10^6 ≤ array[i] ≤ 10^6 EXAMPLE 1 INPUT 7 1 2 1 2 3 4 2 OUTPUT 4 EXAMPLE 2 INPUT 5 4 4 4 4 4 OUTPUT 0 EXPLANATION In example 1, the maximum subarray with exactly two distinct integers is [1, 2, 1, 2], which has a length of 4. In example 2, there\'s no subarray with exactly two distinct integers, so the output is 0.","solution":"def max_length_subarray_with_two_distinct(nums): Returns the maximum length of a subarray that contains exactly two distinct integers. from collections import defaultdict if not nums or len(nums) < 2: return 0 left, right = 0, 0 max_length = 0 freq = defaultdict(int) while right < len(nums): freq[nums[right]] += 1 while len(freq) > 2: freq[nums[left]] -= 1 if freq[nums[left]] == 0: del freq[nums[left]] left += 1 if len(freq) == 2: max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Given an undirected graph with `n` nodes and `m` edges, your task is to find the shortest path from a given start node to a given target node by traversing edges. Each edge in the graph is associated with a cost. If no such path exists, return `-1`. To effectively solve this problem, you can use Dijkstra\'s algorithm, which finds the shortest paths between nodes in a weighted graph. -----Input----- The input consists of multiple lines: 1. The first line contains two integers `n` and `m` (1 leq n leq 1000, 0 leq m leq 100000), which represent the number of nodes and edges, respectively. 2. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 leq u, v leq n, 1 leq w leq 1000), which represent an edge between nodes `u` and `v` with cost `w`. 3. The last line contains two integers `start` and `target` (1 leq start, target leq n), which are the start and target nodes. -----Output----- Display the minimum cost to travel from `start` to `target`. If there is no path between `start` and `target`, output `-1`. -----Examples----- Sample Input 1: 5 6 1 2 3 1 3 2 2 3 4 2 4 1 3 4 1 4 5 6 1 5 Sample Output 1: 9 Sample Input 2: 3 1 1 2 5 2 3 Sample Output 2: -1","solution":"import heapq def dijkstra(n, edges, start, target): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) queue = [(0, start)] dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 while queue: current_dist, u = heapq.heappop(queue) if u == target: return current_dist for weight, v in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(queue, (distance, v)) return -1"},{"question":"problem Create a function that accepts a string representing a sequence of operations and integers. Each element in the sequence is separated by a space. The possible operations are \'+\', \'-\', \'*\', and \'/\', representing addition, subtraction, multiplication, and integer division, respectively. Numbers are assumed to be integers. The function should return the result of evaluating the sequence following standard operator precedence and associativity rules. Ensure that the function can handle negative integers and multiple operations accordingly. **Example** **Input** \\"3 + 5 * 2 - 9 / 3\\" **Output** 10 **Input** \\"10 * 2 - 3 + 5 / 5\\" **Output** 18 **Constraints** - The input will always be a valid sequence according to the provided format. - The sequence length will be at most 100 characters. - Do not use built-in eval() or exec() functions.","solution":"def evaluate_expression(expression): Evaluates a space-separated mathematical expression according to standard operator precedence and associativity rules. def apply_operation(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left // right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 values = [] operators = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit() or (i < len(expression) - 1 and expression[i] == \'-\' and expression[i+1].isdigit()): j = i if expression[i] == \'-\': j += 1 while j < len(expression) and expression[j].isdigit(): j += 1 values.append(int(expression[i:j])) i = j - 1 else: while i < len(expression) and expression[i].isdigit(): i += 1 values.append(int(expression[j:i])) i -= 1 elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_operation(operators, values) operators.pop() else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operation(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operation(operators, values) return values[0]"},{"question":"Alex is planning a road trip and wants to visit certain cities on specific days. There are N cities numbered from 1 to N. He has a list of M potential road trips, each specifying a starting city, an ending city, and the day of the trip. For each city, Alex wants to know the earliest possible day he can be there if he starts his road trip on Day 1 from City 1. He can only take one trip per day, and trips must be taken on the specified days. Write a program to determine the earliest day Alex can reach each city. -----Constraints----- - 2 leq N leq 1000 - 1 leq M leq 5000 - 1 leq start_i, end_i leq N - 1 leq day_i leq 10^4 -----Input----- Input is given from Standard Input in the following format: N M start_1 end_1 day_1 start_2 end_2 day_2 ... start_M end_M day_M -----Output----- Output N integers separated by spaces, where the i-th integer represents the earliest day on which Alex can visit the i-th city. If a city cannot be reached, output -1 for that city. -----Sample Input----- 4 4 1 2 3 2 3 5 1 3 10 3 4 12 -----Sample Output----- 0 3 5 12 Explanation: - City 1: Alex starts at City 1 on Day 1, so can visit City 1 on Day 0. - City 2: Alex can take the trip from City 1 to City 2 on day 3. - City 3: Alex can take the trip from City 2 to City 3 on day 5. - City 4: Alex reaches City 3 on day 5 and can take the trip to City 4 on day 12.","solution":"def earliest_days(N, M, trips): from collections import defaultdict, deque # Create a graph where each node points to its neighbors (cities) along with the day cost graph = defaultdict(list) for start, end, day in trips: graph[start].append((end, day)) # Initialize earliest days to reach each city with -1 except the starting city with 0 earliest = [-1] * (N+1) earliest[1] = 0 # Use a deque to perform a BFS queue = deque([1]) while queue: current_city = queue.popleft() for neighbor, day in graph[current_city]: if earliest[current_city] < day and (earliest[neighbor] == -1 or earliest[neighbor] > day): earliest[neighbor] = day queue.append(neighbor) return earliest[1:] # To be used for testing def process_input_data(input_data): lines = input_data.strip().split(\'n\') N, M = map(int, lines[0].split()) trips = [tuple(map(int, line.split())) for line in lines[1:]] return N, M, trips"},{"question":"You are tasked with developing a small library system that handles book inventory and user transactions. The system should track book details and manage book borrowing and returning operations for users. Each book has a unique ID, a title, and an author, while each user has a unique ID and a name. The system should be able to perform the following operations: 1. Add a new book to the inventory. 2. Add a new user to the system. 3. Borrow a book for a user. A user can borrow a book only if it is currently available. 4. Return a book. A user can return a book only if they have borrowed it. 5. Check the status of a book (whether it is currently available or borrowed). Input The first line of the input gives the number of operations, T. T lines follow. Each line contains a command with appropriate parameters: - \\"ADD_BOOK book_id title author\\" adds a new book with the given ID, title, and author to the inventory. - \\"ADD_USER user_id name\\" adds a new user with the given ID and name to the system. - \\"BORROW book_id user_id\\" marks the book with the given book_id as borrowed by the user with the given user_id. - \\"RETURN book_id user_id\\" marks the book with the given book_id as returned by the user with the given user_id. - \\"STATUS book_id\\" queries the status of the book with the given book_id. Output For each \\"STATUS\\" command, output one line containing either \\"Available\\" if the book is available or \\"Borrowed by user_id\\" if the book is currently borrowed. Constraints - 1 ≤ T ≤ 10^4 - book_id and user_id are unique integers within the range [1, 10^5] - title and author are strings of length ≤ 100 - name is a string of length ≤ 100 Assumptions Assume that \\"BORROW\\", \\"RETURN\\" and \\"STATUS\\" commands will always refer to existing books and users. SAMPLE INPUT 10 ADD_BOOK 1 \\"1984\\" \\"George Orwell\\" ADD_BOOK 2 \\"To Kill a Mockingbird\\" \\"Harper Lee\\" ADD_USER 1 \\"Alice\\" ADD_USER 2 \\"Bob\\" BORROW 1 1 STATUS 1 STATUS 2 RETURN 1 1 STATUS 1 BORROW 2 2 SAMPLE OUTPUT Borrowed by 1 Available Available Explanation 1. The first command adds a book with ID 1, title \\"1984\\", and author \\"George Orwell\\". 2. The second command adds a book with ID 2, title \\"To Kill a Mockingbird\\", and author \\"Harper Lee\\". 3. The third and fourth commands add two users with IDs 1 and 2, respectively. 4. The fifth command marks book 1 as borrowed by user 1. 5. The sixth command checks the status of book 1, which is currently borrowed by user 1. 6. The seventh command checks the status of book 2, which is available. 7. The eighth command marks book 1 as returned by user 1. 8. The ninth command checks the status of book 1, which is now available. 9. The tenth command marks book 2 as borrowed by user 2.","solution":"class LibrarySystem: def __init__(self): self.books = {} self.users = {} self.borrowed_books = {} def add_book(self, book_id, title, author): self.books[book_id] = (title, author) self.borrowed_books[book_id] = None def add_user(self, user_id, name): self.users[user_id] = name def borrow(self, book_id, user_id): if self.borrowed_books.get(book_id) is None: self.borrowed_books[book_id] = user_id def return_book(self, book_id, user_id): if self.borrowed_books.get(book_id) == user_id: self.borrowed_books[book_id] = None def status(self, book_id): borrower = self.borrowed_books.get(book_id) if borrower is None: return \\"Available\\" else: return f\\"Borrowed by {borrower}\\""},{"question":"You are given a list of integers representing the profit of a stock on different days. You need to find the maximum possible profit from a single buy and sell transaction. You can buy the stock on one day and sell it on a later day. Input: A single line containing a list of integers where each integer represents the profit of a stock on that day. The list will have at least one and no more than 100,000 elements, and each integer will be between -10^9 and 10^9. Output: A single integer representing the maximum possible profit from a single buy and sell transaction. If no profit can be made, return 0. Example Input [7, 1, 5, 3, 6, 4] Output 5 Input [7, 6, 4, 3, 1] Output 0","solution":"def max_profit(prices): Finds the maximum profit from a single buy-sell transaction. If no profit can be made, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"You are given a large wall with several posters pasted on it. Each poster is a rectangle of height 1 and is defined by its left and right corners measured in unit lengths from the left edge of the wall. Sometimes, people come and paste new posters, which may cover part or all of the existing posters. Your task is to calculate the total visible area of the wall. The total visible area is the sum of the areas of all posters that are not covered by any other poster. Write a function `visible_area(posters)` that takes a list of tuples as input, where each tuple contains two integers `(l, r)` representing the left and right corners of a poster on the wall. Input: - The first line contains an integer `n` (1 ≤ n ≤ 3000) — the number of posters on the wall. - Each of the next `n` lines contains two integers `l_i` and `r_i` (1 ≤ l_i < r_i ≤ 30000), where `l_i` and `r_i` are the coordinates of the left and right ends of the i-th poster. Output: - Print a single integer — the total visible area of the wall. Examples: Input 3 1 4 2 6 8 10 Output 5 Input 2 1 5 2 3 Output 4 Input 4 1 2 2 3 3 4 4 5 Output 4","solution":"def visible_area(posters): Returns the total visible area of the wall given the list of posters. Each poster is defined by its left and right corners (l, r). # Sort the posters based on the starting coordinate posters.sort() total_visible_area = 0 current_start, current_end = -1, -1 for l, r in posters: if l > current_end: # No overlap with the current segment total_visible_area += (current_end - current_start) current_start = l current_end = r else: # Overlap handling current_end = max(current_end, r) # Add the last segment\'s area total_visible_area += (current_end - current_start) return total_visible_area"},{"question":"Samantha is developing a new social network app that allows users to send friend requests. In her app, each user has a unique ID and users can form friendship connections by accepting friend requests. By investigating the connections, one can determine indirect friendships, i.e., if user A is a friend of user B, and user B is a friend of user C, then user A is indirectly connected to user C. Samantha is curious to know the size of the largest group of users who are all directly or indirectly connected. Given the total number of users and the list of direct friendship connections, help Samantha find the size of the largest such group of interconnected users. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 50), the number of users. The second line contains an integer m (0 ≤ m ≤ n*(n-1)/2), the number of direct friendship connections. Each of the next m lines contains two integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i), indicating a direct friendship between user u_i and user v_i. -----Output----- Output a single integer, the size of the largest group of directly or indirectly interconnected users. -----Examples----- Input 6 4 1 2 2 3 3 4 5 6 Output 4 Input 3 1 1 2 Output 2","solution":"def largest_group_size(n, m, friendships): def dfs(node, visited, graph): stack = [node] size = 0 while stack: current = stack.pop() if not visited[current]: visited[current] = True size += 1 for neighbor in graph[current]: if not visited[neighbor]: stack.append(neighbor) return size # Initialize the graph graph = {i: [] for i in range(1, n + 1)} for u, v in friendships: graph[u].append(v) graph[v].append(u) visited = {i: False for i in range(1, n + 1)} max_group_size = 0 for user in range(1, n + 1): if not visited[user]: group_size = dfs(user, visited, graph) max_group_size = max(max_group_size, group_size) return max_group_size"},{"question":"----- STRING AND PALINDROMIC SUBSEQUENCES ----- Tina is preparing for a coding competition and comes across an interesting problem. She needs your help to solve it efficiently. You are given a string consisting of lowercase English letters. You need to find the maximum length of a palindromic subsequence that can be obtained from the given string. A palindromic subsequence is a subsequence that reads the same forwards and backwards. -----Input Format----- The first line contains a single integer t, the number of test cases. For each test case, there is a single line containing a string. -----Output----- For each test case, print the maximum length of a palindromic subsequence for the given string. -----Example Test Case----- Input: 2 bbabcbcab abcd Output: 7 1 Explanation: For the first test case, the longest palindromic subsequence is \\"babcbab\\", which has length 7. For the second test case, no palindromic subsequence longer than 1 can be formed.","solution":"def longest_palindromic_subsequence(s: str) -> int: Returns the length of the longest palindromic subsequence in the given string. n = len(s) dp = [[0 for _ in range(n)] for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n-cl+1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1] def solve(t: int, test_cases: list) -> list: results = [] for s in test_cases: results.append(longest_palindromic_subsequence(s)) return results"},{"question":"A local city is organizing a marathon event where runners have to cover a certain stretch of road. There\'s a continuous stretch of road represented as a string of characters. The road is wide enough for only one runner to pass at a time. Each character in the string can be either an obstacle represented by \'#\' or a free space represented by \'.\'. Runners start at the beginning of the road and attempt to reach the end of the road. However, if they encounter an obstacle, they turn around and run back to the start position. You need to determine the maximum distance (number of free spaces) that a runner can cover before hitting an obstacle and returning to the start. -----Input----- The input consists of a single line containing a string s (1 leq |s| leq 100000), which represents the road. -----Output----- Display a single integer, the maximum distance a runner can cover without encountering an obstacle. -----Examples----- Sample Input 1: \\"..#....#..\\" Sample Output 1: 2 Sample Input 2: \\"......\\" Sample Output 2: 6","solution":"def max_free_distance(s): Returns the maximum distance a runner can cover before hitting an obstacle. Parameters: s (str): A string representing the road with obstacles (\'#\') and free spaces (\'.\'). Returns: int: The maximum distance of free spaces before encountering an obstacle. return s.find(\'#\') if \'#\' in s else len(s)"},{"question":"You\'ve been hired by a company to analyze the use of customer support topics over time. Each support topic is represented by a unique integer ranging from 1 to 5. The customer support log contains entries indicating the time a support request was made and the topic of the request. Your task is to write a program that processes this log and determines the most commonly requested support topic within a given time range. Input The first line of input contains two integers, `n` and `q` (1 ≤ n ≤ 105, 1 ≤ q ≤ 104), where `n` is the number of support log entries and `q` is the number of queries. The next `n` lines each contain two integers, `t_i` and `s_i` (1 ≤ t_i ≤ 109, 1 ≤ s_i ≤ 5), where `t_i` is the timestamp of the support request and `s_i` is the topic. The next `q` lines each contain two integers, `t_start` and `t_end` (1 ≤ t_start ≤ t_end ≤ 109), representing the time range for the query. Output For each query, print the most frequently requested support topic within the given time range. If there is a tie, print the smallest topic number. Examples Input ``` 5 3 1 2 2 1 3 2 4 3 5 2 1 3 2 4 3 5 ``` Output ``` 2 1 2 ```","solution":"def find_most_common_topic(n, q, support_logs, queries): Finds the most common support topic within given time ranges. from collections import defaultdict, Counter # Create a dictionary with time as key and list of topics at that time as value time_to_topics = defaultdict(list) for t, s in support_logs: time_to_topics[t].append(s) results = [] for t_start, t_end in queries: topic_counter = Counter() for t in range(t_start, t_end + 1): if t in time_to_topics: topic_counter.update(time_to_topics[t]) if topic_counter: most_common_topic = min(topic_counter, key=lambda x: (-topic_counter[x], x)) results.append(most_common_topic) else: results.append(None) # If there are no logs in the range, append None return results"},{"question":"A new company has designed an innovative sorting algorithm known as `AlphaSort` and they want to test its efficiency with a variety of inputs. As part of the validation process, they need to ensure that the sorted output meets their criteria, which involves not only sorting in ascending order but also appending each element\'s original index (0-based) at the end of each sorted element. The task is to implement this custom sorting function. Given a list of integers, the function should return the list in ascending order and append the original index of each element. -----Input:----- - The first line of the input consists of a single integer T, denoting the number of test cases - The first line of each test case consists of a single integer N - The second line of each test case consists of N space-separated integers -----Output:----- - For each test case, print the list of integers in ascending order, where each element from the original list is followed by its original index in the format element_index. -----Constraints----- - 1 <= T <= 50 - 1 <= N <= 1000 - -1000 <= element <= 1000 -----Sample Input:----- 2 5 3 1 4 1 5 4 10 20 10 5 -----Sample Output:----- 1_1 1_3 3_0 4_2 5_4 5_3 10_0 10_2 20_1 -----Explanation:----- Test Case 1: - The original list [3, 1, 4, 1, 5] is sorted to [1, 1, 3, 4, 5]. - Appending the original indices, we get [1_1, 1_3, 3_0, 4_2, 5_4]. - Hence, the output for the first test case is `1_1 1_3 3_0 4_2 5_4`. Test Case 2: - The original list [10, 20, 10, 5] is sorted to [5, 10, 10, 20]. - Appending the original indices, we get [5_3, 10_0, 10_2, 20_1]. - Hence, the output for the second test case is `5_3 10_0 10_2 20_1`.","solution":"def alpha_sort(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] # Creating a list of tuples (element, original_index) indexed_arr = [(arr[j], j) for j in range(N)] # Sorting by elements first indexed_arr.sort() # Formatting the result as requested formatted_result = \\" \\".join([f\\"{el}_{idx}\\" for el, idx in indexed_arr]) results.append(formatted_result) return results"},{"question":"Write a function that takes a string as input and returns the string in reverse order, but with the case of each character swapped (upper case to lower case and vice versa). Input :: \\"HelloWorld\\" Output :: \\"DLROwOLLEh\\" You may not use built-in functions to reverse the string or swap the case.","solution":"def reverse_and_swap_case(s): Reverses the input string s and swaps the case of each character. Args: s (str): Input string. Returns: str: The processed string with characters in reverse order and case swapped. result = [] # Iterate over the string from end to start for i in range(len(s) - 1, -1, -1): char = s[i] if char.islower(): result.append(chr(ord(char) - 32)) # Convert to uppercase elif char.isupper(): result.append(chr(ord(char) + 32)) # Convert to lowercase else: result.append(char) # Append non-alphabetic characters as they are return \'\'.join(result)"},{"question":"A music festival is in need of volunteers and has set up a flexible scheduling system. Each volunteer can choose their shifts based on availability. The festival, however, needs to ensure that it has at least one volunteer at each shift throughout the festival duration. Each shift has a specific start and end time, and a volunteer can work any number of non-overlapping shifts they choose. The overarching goal of the festival organizers is to determine the minimum number of volunteers required to cover all the shifts such that no two selected shifts for a single volunteer overlap. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input will be a single integer n (1 le n le 100000), which represents the number of shifts. The next n lines each will provide two space-separated integers s and e, where s (0 le s < e le 10^9) is the start time and e is the end time of a shift. -----Output----- Output a single integer representing the minimum number of volunteers needed to cover all shifts without any overlap in their assigned shifts. -----Examples----- Sample Input 1: 3 1 3 2 5 6 8 Sample Output 1: 2 Sample Input 2: 4 1 4 2 3 3 5 7 8 Sample Output 2: 2 Sample Input 3: 5 1 2 2 4 4 6 6 8 8 10 Sample Output 3: 1","solution":"def minimum_volunteers(shifts): Calculate the minimum number of volunteers required to cover all shifts without overlapping. Args: shifts (list of tuples): Each tuple consists of two integers, the start and end times of a shift. Returns: int: The minimum number of volunteers needed. if not shifts: return 0 shifts.sort(key=lambda x: x[1]) end_time = shifts[0][1] volunteers = 1 for i in range(1, len(shifts)): if shifts[i][0] < end_time: volunteers += 1 end_time = shifts[i][0] else: end_time = shifts[i][1] return volunteers"},{"question":"Find the minimum number of steps required to convert one string into another string using the following operations: 1. Insert a character. 2. Remove a character. 3. Replace a character. Write a function `min_steps(source, target)` that takes two strings as input and returns the minimum number of steps required to transform the `source` string into the `target` string. ``` min_steps(\\"kitten\\", \\"sitting\\") => 3 min_steps(\\"flaw\\", \\"lawn\\") => 2 min_steps(\\"intention\\", \\"execution\\") => 5 min_steps(\\"\\", \\"abcdef\\") => 6 min_steps(\\"abcdef\\", \\"\\") => 6 min_steps(\\"example\\", \\"example\\") => 0 ``` The function should efficiently handle strings with a length of up to 2000 characters and it is expected to run in O(N*M) time, where N and M are the lengths of the two input strings.","solution":"def min_steps(source, target): Returns the minimum number of steps required to transform the source string into the target string using insert, remove, and replace operations. m, n = len(source), len(target) # Create a DP table with dimensions (m+1) x (n+1) dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the DP table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If source is empty, all characters of target must be inserted elif j == 0: dp[i][j] = i # If target is empty, all characters of source must be removed elif source[i-1] == target[j-1]: dp[i][j] = dp[i-1][j-1] # If characters are the same, no operation is required else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"You are given an integer array. You need to determine if you can split the array into two non-empty subarrays such that the sum of the elements in both subarrays is the same. If it\'s possible, return the index where you should split the array. Otherwise, return -1. Note: - The split point should have at least one element in both resulting subarrays. - The function should return the 0-based index `i` where the first subarray includes elements from index 0 to `i` (inclusive) and the second subarray includes elements from `i+1` to the end of the array. Input: - The first argument is an integer `n` representing the number of elements in the array. - The second argument is a list of `n` integers representing the array. Output: - Return the index `i` where the array can be split, or `-1` if it is not possible. Constraints: - 2 ≤ n ≤ 10^5 - -10^4 ≤ array[i] ≤ 10^4 Example Input 1: 7 1 2 3 4 5 6 21 Example Output 1: 5 Explanation 1: The array can be split at index 5, with left subarray [1, 2, 3, 4, 5, 6] and right subarray [21] both having a sum of 21. Example Input 2: 5 1 -1 1 -1 1 Example Output 2: -1 Explanation 2: It is not possible to split the array into two non-empty subarrays with equal sum.","solution":"def find_split_index(n, arr): This function determines the index where the array can be split into two non-empty subarrays with the same sum. If no such index exists, it returns -1. :param n: integer, the number of elements in the array :param arr: list of integers, the array of numbers :return: integer, the index where the split is possible, or -1 if no such split exists total_sum = sum(arr) # If the total_sum is odd, it\'s impossible for two equal parts if total_sum % 2 != 0: return -1 left_sum = 0 for i in range(n - 1): # We do not consider the last element as part of the left subarray left_sum += arr[i] if left_sum * 2 == total_sum: return i return -1"},{"question":"You are given a rectangular matrix of characters where \'1\' represents land and \'0\' represents water. An island is a group of adjacent lands connected horizontally or vertically. You need to count the number of distinct islands in the matrix. Input The first input line contains two integers, R and C (1 ≤ R, C ≤ 50), which are the number of rows and columns of the matrix. Each of the next R lines contains exactly C characters (\'1\' or \'0\'). Output Output one integer, the number of distinct islands in the given matrix. Example Input 4 5 11110 11010 11000 00000 Output 1 Input 4 5 11000 11000 00100 00011 Output 3 Explanation In the first example, there is only one island. In the second example, there are three islands: one in the upper left, one in the middle, and one in the lower right.","solution":"def num_islands(matrix): if not matrix: return 0 R = len(matrix) C = len(matrix[0]) visited = [[False for _ in range(C)] for _ in range(R)] def dfs(r, c): stack = [(r, c)] while stack: row, col = stack.pop() if 0 <= row < R and 0 <= col < C and not visited[row][col] and matrix[row][col] == \'1\': visited[row][col] = True stack.append((row+1, col)) stack.append((row-1, col)) stack.append((row, col+1)) stack.append((row, col-1)) island_count = 0 for r in range(R): for c in range(C): if matrix[r][c] == \'1\' and not visited[r][c]: dfs(r, c) island_count += 1 return island_count def parse_input(input_str): lines = input_str.strip().split(\'n\') R, C = map(int, lines[0].split()) matrix = [list(line) for line in lines[1:]] return matrix def count_islands(input_str): matrix = parse_input(input_str) return num_islands(matrix)"},{"question":"Given a directed graph with N nodes and M edges, determine if there exists a path from node A to node B. The graph is represented using adjacency list where adj[i] contains all nodes to which node i has a directed edge. Example 1: Input: N = 4, M = 4, A = 0, B = 3 adj = {{1, 2}, {2}, {0, 3}, {}} Output: 1 Explanation: There exists a path from node 0 to node 3: 0->2->3 Example 2: Input: N = 4, M = 3, A = 0, B = 3 adj = {{1, 2}, {2}, {0}, {}} Output: 0 Explanation: There is no path from node 0 to node 3. Your Task: You don\'t need to read or print anything. Your task is to complete the function hasPath() which takes N denoting the number of nodes, adjacency list, and nodes A and B as input parameters and returns a boolean value denoting if there exists a path from A to B, return 1 if a path exists else return 0. Expected Time Complexity: O(N + M) Expected Space Complexity: O(N) Constraints: 1 ≤ N, M ≤ 10^5","solution":"def hasPath(N, adj, A, B): Determines if there is a path from node A to node B in a directed graph. Parameters: N (int): Number of nodes in the graph. adj (list of list of int): Adjacency list representation of the graph. A (int): Starting node. B (int): Target node. Returns: bool: 1 if there is a path from A to B, otherwise 0. def dfs(current, visited): if current == B: return True visited[current] = True for neighbor in adj[current]: if not visited[neighbor]: if dfs(neighbor, visited): return True return False visited = [False] * N return 1 if dfs(A, visited) else 0"},{"question":"There is a row of houses, each house having some number of valuables which is given in an array val of length n. Thieves want to steal from these houses, but they know that if they rob two adjacent houses, they will alert the police. Therefore, the thieves cannot rob consecutive houses. Given the array val, find the maximum amount of valuables the thieves can steal without triggering the alarm. For example, if the array of valuables is val = [2, 7, 9, 3, 1], the thieves can choose to rob the houses with valuables 2, 9, and 1, resulting in a total of 2 + 9 + 1 = 12. Choosing any two adjacent houses would not yield a higher amount than this. -----Input----- The first line contains one integer t (1 le t le 10^4) — the number of test cases. Each test case consists of two lines: - The first line contains one integer n (1 le n le 10^5) — the number of houses. - The second line contains n integers val_1, val_2, ldots, val_n (1 le val_i le 10^4) — the number of valuables in each house. The sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output one integer — the maximum amount of valuables the thieves can steal without triggering the alarm. -----Example----- Input: 3 5 2 7 9 3 1 4 1 2 3 1 3 10 15 20 Output: 12 4 30","solution":"def max_steal(val): Given an array val where val[i] is the amount of valuable in the i-th house. Returns the maximum amount of valuables the thieves can steal without triggering the alarm. n = len(val) if n == 0: return 0 if n == 1: return val[0] dp = [0] * n dp[0] = val[0] dp[1] = max(val[0], val[1]) for i in range(2, n): dp[i] = max(val[i] + dp[i - 2], dp[i - 1]) return dp[-1] def process_test_cases(t, test_cases): results = [] for i in range(t): n, val = test_cases[i] results.append(max_steal(val)) return results"},{"question":"You are given a weighted directed graph with n vertices and m edges. Each edge has a weight associated with it, which is a positive integer. The graph can contain cycles. Your task is to find the shortest path from a given starting vertex s to all other vertices in the graph. However, there is an additional constraint: you can use each edge in the graph at most once in each path. This means that your path cannot revisit any edge even if the total distance might be shorter. If there is no valid path from the starting vertex s to a vertex x, you should return -1 for that vertex. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 105; 0 ≤ m ≤ 105) — the number of vertices and the number of edges in the graph, respectively. Each of the next m lines contains three space-separated integers u, v, w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 106) — indicating there is a directed edge from vertex u to vertex v with weight w. The last line contains a single integer s (1 ≤ s ≤ n) — the starting vertex. Output Output n lines. For each vertex i (1 ≤ i ≤ n), output the shortest distance from the starting vertex s to vertex i. If there is no valid path, output -1 for that vertex. Examples Input 5 6 1 2 2 2 3 4 3 4 1 4 5 7 1 3 10 2 4 3 1 Output 0 2 6 5 12 Input 3 2 1 2 1 2 3 2 2 Output -1 0 2","solution":"import heapq from collections import defaultdict import sys def dijkstra_with_restriction(n, m, edges, s): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) result = [] for i in range(1, n+1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result # Example usage: # n = 5 # m = 6 # edges = [(1, 2, 2), (2, 3, 4), (3, 4, 1), (4, 5, 7), (1, 3, 10), (2, 4, 3)] # s = 1 # print(dijkstra_with_restriction(n, m, edges, s))"},{"question":"Toadsception is creating a series of brackets, but it needs to ensure that every bracket sequence it produces is valid. A bracket sequence is valid if: 1. It is an empty string, or: 2. It can be written as AB (A concatenated with B), where A and B are valid bracket sequences, or 3. It can be written as (A), where A is a valid bracket sequence. Toadsception has a string consisting only of the characters \'(\' and \')\'. It needs to remove the minimum number of characters to make the bracket sequence valid. -----Input----- The input consists of a single string s (1 leq |s| leq 300,000), consisting of characters \'(\' and \')\'. -----Output----- Output one integer: the minimum number of characters that should be removed from the string to make it a valid bracket sequence. -----Examples----- Input (())) Output 1 Input ((()) Output 1 -----Note----- In the first example, by removing the last \')\' from the string, it becomes a valid bracket sequence \\"(())\\". Thus, the answer is 1. In the second example, by removing the first or the last \'(\', the sequence can become \\"(()))\\" or \\"(())\\", both of which are valid. Thus, the answer is 1.","solution":"def min_removals_to_make_valid_brackets(s): Returns the minimum number of characters that should be removed to make the bracket sequence valid. open_count = 0 close_count = 0 # Traverse the string to count invalid opening and closing brackets for char in s: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 else: close_count += 1 # The total invalid brackets are the sum of invalid opening and closing brackets return open_count + close_count"},{"question":"Robby the Robot is exploring a grid. The grid is represented as an N times M matrix, where each cell may contain either an obstacle or be empty. Robby starts at the top-left corner of the grid and wants to reach the bottom-right corner by moving only right or down at every step. However, Robby\'s battery has a limit on the number of moves he can make. Write a program that determines the length of the shortest path Robby can take to reach the bottom-right corner without exceeding his battery limit. If it is not possible for Robby to reach the bottom-right corner within the battery limit, the program should return -1. -----Input----- The first line of the input contains three integers N (2 le N le 1000), M (2 le M le 1000), and L (1 le L le 2000) representing the dimensions of the grid and the battery limit of Robby\'s robot respectively. Each of the next N lines contains M integers, where each integer is either: - 0 representing an empty cell. - 1 representing an obstacle. It is guaranteed that the top-left and bottom-right corners are empty cells. -----Output----- Output a single integer representing the length of the shortest path Robby can take, or -1 if it is not possible for Robby to reach the bottom-right corner within the battery limit. -----Examples----- Sample Input: 4 4 6 0 0 0 0 0 1 1 0 0 0 0 1 1 1 0 0 Sample Output: 6 Sample Input: 3 3 4 0 1 0 0 1 0 0 0 0 Sample Output: 4 Sample Input: 3 3 2 0 1 0 0 1 0 0 0 0 Sample Output: -1","solution":"from collections import deque def shortest_path(n, m, l, grid): Determines the length of the shortest path in a grid from top-left to bottom-right corner without exceeding the given battery limit. if l < 2: return -1 # Initialize directions for right and down movements directions = [(0, 1), (1, 0)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if steps > l: continue # If we reached the bottom-right corner if r == n-1 and c == m-1: return steps # Explore the neighboring cells for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1 # If it is not possible to reach the bottom-right corner within the battery limit"},{"question":"A robotics company is developing a collection of autonomous vehicles designed to operate in a warehouse. Each vehicle follows a pre-programmed path along the warehouse grid. However, some paths may intersect, creating potential collision points where the vehicles might crash if they arrive at the intersection simultaneously. Your task is to write a function that identifies all such collision points given the paths of the vehicles. A vehicle path is specified as a sequence of grid points that the vehicle visits in order. Each path starts at the first grid point and moves to the next grid point in the sequence until it reaches the last point. For example, a vehicle path [(0,0), (0,3), (3,3)] indicates that the vehicle starts at (0,0), moves to (0,3), and then to (3,3). Input The input consists of multiple test cases. Each test case starts with an integer `m` (1 ≤ m ≤ 50) indicating the number of vehicles. The next `m` lines each describe a vehicle path, which starts with an integer `n` (2 ≤ n ≤ 50) indicating the number of points in the path, followed by `n` pairs of integers `x` and `y` (-100 ≤ x, y ≤ 100) specifying the grid points in the path. The end of input is signaled by a line containing a single zero. Output For each test case, output the grid points where collisions might occur, one point per line. If no intersections are found, simply output \\"No collisions\\". Each grid point should be formatted as a pair of integers (x y). Grid points in the output should be listed in the same order as they appear in the input, ignoring repetitions. If multiple vehicles can collide at the same point, it should be mentioned only once. Example Input 2 3 0 0 0 3 3 3 3 0 1 0 3 3 3 0 Output 0 3 3 3","solution":"def find_collisions(vehicle_paths): from collections import defaultdict point_visits = defaultdict(int) potential_collisions = set() for path in vehicle_paths: visited_points = set() for point in path: if point in visited_points: # Prevent counting the same vehicle revisiting the same point in its own path continue point_visits[point] += 1 visited_points.add(point) if point_visits[point] > 1: potential_collisions.add(point) return potential_collisions def process_input(input_data): input_lines = input_data.strip().split(\'n\') results = [] index = 0 while index < len(input_lines): m = int(input_lines[index].strip()) if m == 0: break index += 1 vehicle_paths = [] for _ in range(m): path_data = list(map(int, input_lines[index].strip().split())) path = [(path_data[i], path_data[i+1]) for i in range(1, len(path_data), 2)] vehicle_paths.append(path) index += 1 collisions = find_collisions(vehicle_paths) if collisions: results.extend([\\"{} {}\\".format(p[0], p[1]) for p in collisions]) else: results.append(\\"No collisions\\") return \\"n\\".join(results)"},{"question":"In a faraway kingdom, there is a magical tree with N nodes and N-1 edges, making it a tree structure. Each node is assigned a unique number from 1 to N. The nodes are connected such that there is a unique path between any two nodes in this tree. The tree is magical because it has a special property - if you pick any two nodes and calculate the sum of all node values in the path between these two nodes, this sum is always an even number. Given a tree with N nodes, your task is to determine if the tree is a magical tree or not. Input - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of nodes in the tree. - The next N-1 lines each contain two integers u and v, representing an edge between node u and node v. Output For each test case, print \\"YES\\" if the tree is a magical tree; otherwise, print \\"NO\\". Constraints: 1 ≤ T ≤ 1000 2 ≤ N ≤ 1000 1 ≤ u, v ≤ N Sample Input 2 3 1 2 2 3 4 1 2 2 3 3 4 Sample Output NO YES Explanation In the first test case, the tree with nodes {1, 2, 3} does not satisfy the magical tree property since the path sum for nodes (1, 3) is 1+2+3 = 6 which is even but does not fit the described magical properties. In the second test case, the tree with nodes {1, 2, 3, 4} forms a perfect line and every path sum check will be subject to the magical tree property, hence it is a \\"YES\\".","solution":"def is_magical_tree(n, edges): # If N is odd, it\'s not magical since each path sum would need all nodes to be even or all odd return n % 2 == 0 def magical_tree(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] edges = test_cases[i][1] if is_magical_tree(n, edges): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"The task is to determine the longest consecutive substring of a given string that contains only a specific set of characters. You will be provided with two inputs: the main string and a set of characters. Your goal is to find the length of the longest substring that consists entirely of characters from the given set. ```python For example: solve(\\"abcde\\", {\\"a\\", \\"b\\", \\"c\\"}) = 3. The longest substring containing only \'a\', \'b\', and \'c\' is \\"abc\\". solve(\\"aaabacccbbdd\\", {\\"a\\", \\"c\\"}) = 4. The longest substring containing only \'a\' and \'c\' is \\"aaac\\". ``` Function signature: ```python def solve(s: str, allowed_chars: Set[str]) -> int: ```","solution":"def solve(s: str, allowed_chars: set) -> int: Finds the length of the longest consecutive substring that contains only the specified characters. :param s: The main string to search within. :param allowed_chars: A set of characters that the substring is allowed to contain. :return: The length of the longest substring that contains only characters from allowed_chars. max_length = 0 current_length = 0 for char in s: if char in allowed_chars: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Jack is a passionate collector of unique stones. He has recently acquired a set of N stones, each one engraved with a positive integer. Jack finds beauty in sets that exhibit interesting mathematical properties. One such property that fascinates Jack is the \\"Arithmetic Mean Property\\". A set of stones is said to have this property if the arithmetic mean of all the stones is itself an integer. Your task is to help Jack identify whether the set of stones he has collected possesses this property or not. Input The first line of the input data contains an integer N (1 ≤ N ≤ 10^5) which represents the number of stones in Jack\'s collection. The second line contains N positive integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), which are the values engraved on the stones. Output Print \\"YES\\" if the set of stones has the \\"Arithmetic Mean Property\\". Otherwise, print \\"NO\\". Examples Input 4 1 3 5 7 Output YES Input 5 1 2 3 4 6 Output NO Note In the first sample, the arithmetic mean of the stones is (1 + 3 + 5 + 7) / 4 = 4. Since 4 is an integer, the output is \\"YES\\". In the second sample, the arithmetic mean of the stones is (1 + 2 + 3 + 4 + 6) / 5 = 3.2. Since 3.2 is not an integer, the output is \\"NO\\".","solution":"def has_arithmetic_mean_property(n, stones): Determine if the set of stones has the \\"Arithmetic Mean Property\\". Args: n : int : the number of stones stones : list of int : the values on the stones Returns: str : \\"YES\\" if the arithmetic mean is an integer, \\"NO\\" otherwise total_sum = sum(stones) if total_sum % n == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Swati is a game developer, and she is designing a new feature where she needs to manage the scores of players efficiently. She has a list of players with their scores, some of which may be duplicates. She wants to find out the score of the Kth highest player in order to tailor the gaming experience for top players specifically. However, if there are fewer than K different scores, she should return -1. Given the scores of players, determine the Kth highest unique score. Input Format The first line contains two integers N and K, where: - N is the number of players. - K is the position of the score to find (1-based index). The second line contains N integers representing the scores of the players. Output Format Print a single integer representing the Kth highest unique score. If there are fewer than K unique scores, print -1. Constraints 1 ≤ N ≤ 1000 1 ≤ K ≤ 1000 1 ≤ Score ≤ 1000 SAMPLE INPUT 8 3 100 80 90 70 80 60 90 100 SAMPLE OUTPUT 80 Explanation There are 4 unique scores: [100, 90, 80, 70]. The 3rd highest score in this list is 80.","solution":"def kth_highest_unique_score(N, K, scores): Returns the Kth highest unique score from the list of scores. If there are fewer than K unique scores, returns -1. unique_scores = sorted(set(scores), reverse=True) if len(unique_scores) < K: return -1 return unique_scores[K-1] # Example of using the function # N = 8, K = 3, scores = [100, 80, 90, 70, 80, 60, 90, 100] # Output should be 80 print(kth_highest_unique_score(8, 3, [100, 80, 90, 70, 80, 60, 90, 100])) # sample input"},{"question":"The National Railway Company is planning to construct a new rail network. The network will consist of stations connected by direct rail lines. Each rail line has a specific construction cost. The goal is to connect all the stations with the minimum possible construction cost. The network does not need to be fully connected initially, and there may be multiple rail lines between any two stations. If multiple solutions exist with the same minimum cost, any one is acceptable. You are to write a program that computes the minimum cost to construct the rail network such that all stations are connected. -----Input----- The first line of the input contains two integers, N and M (1 leq N leq 1000, 1 leq M leq 10000), where N is the number of stations and M is the number of direct rail lines. The following M lines describe the direct rail lines; each of these lines contains three integers U, V and C (1 leq U, V leq N, 1 leq C leq 10000) which represent a rail line between stations U and V with construction cost C. It is guaranteed that the input describes at least one possible connection between some pairs of stations. -----Output----- The program should output a single integer, which is the minimum construction cost to connect all stations. -----Examples----- Sample Input 1: 4 5 1 2 5 1 3 10 2 3 2 3 4 1 2 4 8 Sample Output 1: 8 Sample Input 2: 3 3 1 2 1 1 3 4 2 3 2 Sample Output 2: 3","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(N, edges): edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(N): parent.append(node) rank.append(0) result = [] e = 0 i = 0 while e < N - 1 and i < len(edges): u, v, w = edges[i] i += 1 x = find(parent, u-1) y = find(parent, v-1) if x != y: e += 1 result.append((u, v, w)) union(parent, rank, x, y) min_cost = sum([w for u, v, w in result]) return min_cost def min_construction_cost(N, M, lines): return kruskal(N, lines)"},{"question":"Title: Integer Square Root Calculation Given a non-negative integer, calculate its integer square root without using any built-in square root functions from programming libraries. The integer square root of a non-negative number `x` is the largest integer `y` such that `y*y` is less than or equal to `x`. Input The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains one integer x (0 ≤ x ≤ 10^12). Output For each test case, output the integer square root of x. Examples Input 3 4 8 16 Output 2 2 4 Input 2 0 1 Output 0 1 # Additional Information 1. Consider implementing efficient methods such as binary search to achieve optimal performance. 2. Edge cases to consider include very small (0, 1) and very large inputs (close to the upper limit 10^12).","solution":"def integer_square_root(x): Returns the integer square root of a non-negative integer x. Uses binary search to find the largest integer y such that y*y <= x. if x < 2: return x low, high = 1, x // 2 while low <= high: mid = (low + high) // 2 square = mid * mid if square == x: return mid elif square < x: low = mid + 1 else: high = mid - 1 return high def process_test_cases(t, test_cases): Processes multiple test cases and returns a list of integer square roots. results = [integer_square_root(x) for x in test_cases] return results"},{"question":"A social media platform keeps track of user activity by recording the start and end times of each user\'s online session. Given the start and end times for multiple sessions, determine the maximum number of concurrent users online at any given time. Constraints * 1 leq N leq 10^5 * 1 leq T leq 10^5 * 0 leq l_i < r_i leq T Input The input is given in the following format. N T l_1 r_1 l_2 r_2 : l_N r_N Output Print the maximum number of concurrent users online in a single line. Examples Input 5 10 1 5 2 6 4 8 6 9 5 10 Output 3 Input 4 7 1 3 2 4 3 5 4 6 Output 2","solution":"def max_concurrent_users(n, times): Determines the maximum number of concurrent users online at any given time. :param n: Number of sessions :param times: List of tuples (start_time, end_time) :return: Maximum number of concurrent users events = [] for start, end in times: events.append((start, 1)) # Event for a user coming online events.append((end, -1)) # Event for a user going offline # Sort events, prioritizing end events in case of tie events.sort(key=lambda x: (x[0], x[1])) max_users = 0 current_users = 0 for event in events: current_users += event[1] max_users = max(max_users, current_users) return max_users"},{"question":"Story Samantha is organizing a fund-raising event for her community. She receives several donations, each noted with the amount and a symbol indicating whether it\'s a positive or negative pledge. A negative pledge is one that needs to be returned under certain conditions. Here is an example format of donations: ``` [[100, \'+\'], [50, \'-\'], [75, \'+\'], [25, \'-\']] ``` In the example above, a 100 donation is positive, thus adding to the total funds. However, a donation of 50 is negative, which means 50 might need to be subtracted from the funds. Please calculate the net total of the donations considering the positive and negative pledges. Rules Write a function `calculateNetDonations`, with argument `donations` being the list of all donations. Return a number representing the net total, rounded to two decimal places. Example ```python def calculateNetDonations(donations): # your code here # example usage: donations = [[100, \'+\'], [50, \'-\'], [75, \'+\'], [25, \'-\']] print(calculateNetDonations(donations)) # expected result: 100 ```","solution":"def calculateNetDonations(donations): Calculates the net total of donations based on positive and negative pledges. Args: donations (list): A list of lists where each sublist contains an amount and a symbol (\'+\' or \'-\') Returns: float: The net total of the donations, rounded to two decimal places. net_total = 0 for amount, sign in donations: if sign == \'+\': net_total += amount elif sign == \'-\': net_total -= amount return round(net_total, 2)"},{"question":"In the city of Graphonia, there are N junctions connected by M bidirectional roads. Each road connects two different junctions and has a certain length. The city engineers are planning to repave some of the roads and want to know the total length of the shortest path between some pairs of junctions after removing a specific road. To assist them in their task, you are required to determine these shortest paths. For each of the Q queries, find the shortest path between junction a_i and junction b_i if the road between junction x_k and junction y_k (given in the k-th query) is removed. If there is no path between the two junctions after removing the road, return -1 for that query. -----Constraints----- - N is an integer between 2 and 500 (inclusive). - M is an integer between 1 and 10,000 (inclusive). - Q is an integer between 1 and 100 (inclusive). - 1 leq a_i, b_i, x_k, y_k leq N - 1 leq road length leq 10^6 -----Input----- Input is given from Standard Input in the following format: N M Q u_1 v_1 w_1 u_2 v_2 w_2 ... u_M v_M w_M a_1 b_1 x_1 y_1 a_2 b_2 x_2 y_2 ... a_Q b_Q x_Q y_Q -----Output----- Print Q lines. The i-th line should contain the length of the shortest path between junction a_i and junction b_i if the road between junction x_i and junction y_i is removed. If no such path exists, print -1. -----Sample Input----- 4 4 2 1 2 1 2 3 2 3 4 1 4 1 3 1 3 1 2 1 4 3 4 -----Sample Output----- 4 -1 In the first query, after removing the road between junction 1 and junction 2, the shortest path from junction 1 to junction 3 is 1 -> 4 -> 3 which has a length of 4. In the second query, after removing the road between junction 3 and junction 4, there is no path between junction 1 and junction 4, so the answer is -1.","solution":"import heapq import sys def dijkstra(graph, start, end): queue = [(0, start)] distances = {node: sys.maxsize for node in graph} distances[start] = 0 while queue: current_distance, current_node = heapq.heappop(queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor)) return distances[end] if distances[end] != sys.maxsize else -1 def remove_edge(graph, u, v): graph[u] = [(node, wt) for node, wt in graph[u] if node != v] graph[v] = [(node, wt) for node, wt in graph[v] if node != u] def main(): input = sys.stdin.read data = input().split() index = 0 N = int(data[index]) M = int(data[index+1]) Q = int(data[index+2]) index += 3 graph = {i: [] for i in range(1, N+1)} for _ in range(M): u = int(data[index]) v = int(data[index+1]) w = int(data[index+2]) index += 3 graph[u].append((v, w)) graph[v].append((u, w)) results = [] for _ in range(Q): a = int(data[index]) b = int(data[index+1]) x = int(data[index+2]) y = int(data[index+3]) index += 4 original_graph = {k: v[:] for k, v in graph.items()} remove_edge(graph, x, y) result = dijkstra(graph, a, b) results.append(result) graph = original_graph # reset graph for result in results: print(result)"},{"question":"Given an integer array A of size N, you are required to perform multiple operations to transform the array. Each operation is of one out of three types: 1. **Update operation:** Updates the value at a specific index to a given value. 2. **Prefix Sum operation:** Calculates the sum of all prefixes smaller or equal to a given number. 3. **Range Maximum operation:** Finds the maximum value in a specified subarray range. Your task is to implement these operations efficiently. # Input Format The first line contains an integer T denoting the number of test cases. Each test case contains the following sequences: - The first line contains an integer N, indicating the size of the array A. - The second line contains N integers representing the elements of the array A. - The third line contains an integer Q, denoting the number of queries for the test case. - The next Q lines each describe a query in one of the following formats: - `1 X Y` (Update Operation): Update the element at index X (1-indexed) to value Y. - `2 L` (Prefix Sum Operation): Calculate the sum of all elements leq L. - `3 X Y` (Range Maximum Operation): Find the maximum value in the subarray from index X to Y (1-indexed). # Output Format For each test case, output the result of each query of type 2 and 3 in a new line. If no such element exists for the prefix sum operation, return `0`. # Constraints - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq A[i], Y leq 10^5 - 1 leq X, L leq N - 1 leq X leq Y leq N # Sample Input ``` 2 5 1 2 3 4 5 6 1 3 10 2 4 3 1 3 1 2 6 3 2 5 2 3 3 1 2 3 2 1 1 0 2 1 ``` # Sample Output ``` 10 3 10 10 0 ``` # Explanation Test Case 1: Initial Array: `[1, 2, 3, 4, 5]` 1. Update the element at index 3 to 10: `[1, 2, 10, 4, 5]` 2. Prefix Sum of elements ≤ 4: `1 + 2 + 4 = 7` 3. Maximum value in subarray [1, 3]: `max(1, 2, 10) = 10` 4. Update the element at index 2 to 6: `[1, 6, 10, 4, 5]` 5. Maximum value in subarray [2, 5]: `max(6, 10, 4, 5) = 10` 6. Prefix Sum of elements ≤ 3: `1` (No elements ≤ 3)","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0]*(2*self.n) self.build(array) def build(self, array): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = array[i] # Build the tree for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[2*i], self.tree[2*i + 1]) def update(self, pos, value): # Update the value at the leaf pos += self.n self.tree[pos] = value # Recompute the values on the path to the root while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2*pos], self.tree[2*pos + 1]) def range_max(self, left, right): # Get maximum value in interval [left, right) left += self.n right += self.n max_value = -float(\'inf\') while left < right: if left % 2: max_value = max(max_value, self.tree[left]) left += 1 if right % 2: right -= 1 max_value = max(max_value, self.tree[right]) left //= 2 right //= 2 return max_value def perform_operations(n, array, queries): result = [] seg_tree = SegmentTree(array) for query in queries: q_type = query[0] if q_type == 1: # Update operation _, x, y = query seg_tree.update(x - 1, y) elif q_type == 2: # Prefix Sum operation _, L = query prefix_sum = sum(val for val in seg_tree.tree[seg_tree.n: 2*seg_tree.n] if val <= L) result.append(prefix_sum) elif q_type == 3: # Range Maximum operation _, x, y = query max_val = seg_tree.range_max(x - 1, y) result.append(max_val) return result def process_input(T, tests): results = [] for i in range(T): results.append( perform_operations( tests[i][0], tests[i][1], tests[i][2] ) ) return results"},{"question":"Tina and Lizzy are playing an intriguing card game. Both start with a certain number of cards in their hand. In each round, Tina picks a card and removes it from her hand while Lizzy does nothing. However, Tina has a unique way of picking cards, where the probability of removing a specific card is proportional to its value. The game ends when Tina has removed all her cards, and the objective is to find the expected value of the last card remaining in Tina\'s hand before she removes it. Each of Tina\'s cards has a distinct value ranging from 1 to N (inclusive of both ends). Given the total number of cards Tina starts with, calculate the expected value of the last card Tina will remove. -----Input----- The first line contains a single integer 1 leq N leq 1000, representing the number of cards Tina starts with. -----Output----- Output a single line containing the expected value of the last card Tina will remove, rounded to six decimal places. -----Examples----- Sample Input: 3 Sample Output: 2.000000","solution":"def expected_last_card_value(N): Calculate the expected value of the last card Tina will remove. Parameters: N (int): The number of cards Tina starts with. Returns: float: The expected value of the last card Tina will remove, rounded to six decimal places. return round((N + 1) / 2, 6)"},{"question":"A fleet of drones needs to be recharged using charging stations. Each drone has a specific amount of initial battery life. A drone can move to a neighboring cell (east, west, north, or south), consuming 1 unit of battery for each move. If a drone runs out of battery, it cannot move anymore. Your task is to optimize the charging strategy so that all drones reach a charging station in the minimum number of moves. You are given a grid of size W × H, the initial battery life of each drone, and the positions of the charging stations. Write a program that calculates the minimum number of moves required for all drones to reach a charging station or determine that it is impossible for some drones to reach any station given their initial battery life. Input The first line contains three integers N (1 ≤ N ≤ 50,000), W and H (1 ≤ W, H ≤ 100,000), which denote the number of drones, the width and the height of the grid respectively. The next N lines describe the initial coordinates and battery life of each drone. The i-th line contains three integers xi (1 ≤ xi ≤ W), yi (1 ≤ yi ≤ H), and bi (1 ≤ bi ≤ 1,000,000), which indicate the coordinates and the initial battery life of the i-th drone. All the coordinates are 1-based. The subsequent Q (1 ≤ Q ≤ 10,000) lines describe the coordinates of the charging stations. The j-th line contains two integers xj (1 ≤ xj ≤ W) and yj (1 ≤ yj ≤ H), which indicate the coordinates of the j-th charging station. Output Output the minimum number of moves required for all drones to reach a charging station. If it is impossible for some drones to reach any station, print \\"Impossible\\". Examples Input 3 5 5 1 1 3 4 4 2 5 5 10 2 2 4 3 Output 3 Input 2 3 3 1 1 1 3 3 5 2 2 Output Impossible Input 4 7 7 2 2 5 3 4 3 6 6 8 1 5 2 4 4 7 3 1 6 Output 4","solution":"from collections import deque def bfs_shortest_distance(w, h, stations): directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Initialize distances with -1 (unreachable) distances = [[-1] * w for _ in range(h)] queue = deque() for x, y in stations: queue.append((x, y)) distances[y-1][x-1] = 0 while queue: cx, cy = queue.popleft() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 1 <= nx <= w and 1 <= ny <= h and distances[ny-1][nx-1] == -1: distances[ny-1][nx-1] = distances[cy-1][cx-1] + 1 queue.append((nx, ny)) return distances def minimum_moves_to_charging(N, W, H, drones, stations): distances = bfs_shortest_distance(W, H, stations) max_moves = 0 for x, y, b in drones: distance = distances[y-1][x-1] if distance == -1 or distance > b: return \\"Impossible\\" max_moves = max(max_moves, distance) return max_moves # Example usage: # drones = [(1, 1, 3), (4, 4, 2), (5, 5, 10)] # stations = [(2, 2), (4, 3)] # print(minimum_moves_to_charging(3, 5, 5, drones, stations)) # Output: 3"},{"question":"A flight operator company manages daily flight schedules which are subject to change frequently. They need a tool to manage the schedule effectively by sorting the data based on the specified criteria. You are tasked to create a program that assists in sorting the flight schedules. The program should accept a list of flight information and sort it according to a specified key. The program should support sorting based on the flight number, destination, departure time, or arrival time. Input The first line of the input contains an integer n (1 <= n <= 1000) representing the number of flights. The following n lines each contain information for a single flight in the format: `FlightNumber Destination DepartureTime ArrivalTime` Where: - `FlightNumber` (a string of up to 10 alphanumeric characters), - `Destination` (a string of up to 50 characters), - `DepartureTime` and `ArrivalTime` (time in HH:MM format). The next line contains a string, which could be one of the following: `FlightNumber`, `Destination`, `DepartureTime`, or `ArrivalTime`, indicating the sorting key. Output Print the sorted flight information based on the given key. If flights have the same key value, they should maintain their original relative order (i.e., stable sorting). Examples Input 5 AA123 NewYork 08:30 12:50 BA456 London 09:10 11:30 CA789 LosAngeles 07:45 10:30 AA321 Tokyo 08:30 14:00 FB567 Paris 10:00 13:30 DepartureTime Output CA789 LosAngeles 07:45 10:30 AA123 NewYork 08:30 12:50 AA321 Tokyo 08:30 14:00 BA456 London 09:10 11:30 FB567 Paris 10:00 13:30","solution":"def sort_flights(flights, key): Sorts the list of flights based on the specified key. sort_keys = {\'FlightNumber\': 0, \'Destination\': 1, \'DepartureTime\': 2, \'ArrivalTime\': 3} if key not in sort_keys: raise ValueError(\\"Invalid key for sorting.\\") key_index = sort_keys[key] sorted_flights = sorted(flights, key=lambda flight: flight[key_index]) return sorted_flights"},{"question":"Given an integer array nums, write a function to determine if there exists any pair of elements in the array that sum up to a specific target number. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: True Explanation: 2 and 7 add up to 9. Example 2: Input: nums = [1, 2, 3, 9], target = 8 Output: False Explanation: There are no two numbers that add up to 8. Your Task: You don\'t need to read input or print anything. Your task is to complete the function hasPairWithSum() which takes an integer array nums and an integer target as input parameters and returns a boolean, True if there exists a pair of elements in the array whose sum is equal to the target number, or False otherwise. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: 1 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def hasPairWithSum(nums, target): Determine if there exists any pair of elements in the array that sum up to a specific target number. Args: nums: List[int] - A list of integers. target: int - The target sum. Returns: bool - True if there exists a pair of elements that sum up to the target number, False otherwise. seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"**Write a function `repeatedCharacters` that takes a string argument and returns a list of characters that appear more than once in the input string, in the order they first appear. The function should ignore case (treat \'A\' and \'a\' as the same character) and should only include alphabetical characters in the result.**","solution":"def repeatedCharacters(s): Return a list of characters that appear more than once in the input string, ignoring case and non-alphabetical characters. from collections import Counter # Convert the string to lowercase and filter only alphabetical characters filtered_chars = [char.lower() for char in s if char.isalpha()] # Count the frequency of each character char_counts = Counter(filtered_chars) # Return the characters that appear more than once, in the order they first appear repeated_chars = [char for char in filtered_chars if char_counts[char] > 1] # Use dict.fromkeys to maintain order and remove duplicates return list(dict.fromkeys(repeated_chars))"},{"question":"Peter loves observing patterns with sequences of numbers. He recently encountered an interesting pattern involving the sum of a sequence of consecutive integers. Given a positive integer n, Peter wants to find the smallest possible integer m such that the sum of the consecutive integers from 1 to m is greater than or equal to n. For instance, if n equals 12, then the smallest m is 5 because the sum of integers from 1 to 5 is 15, which is the smallest sum greater than or equal to 12. Write a function `find_smallest_m(n)` to help Peter determine this value. This function should take a single integer n as input and output the smallest integer m. -----Input:----- - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains a single integer n (1 ≤ n ≤ 10^9), the target sum. -----Output:----- For each test case, print the smallest integer m such that the sum of integers from 1 to m is greater than or equal to n. -----Constraints----- - 1 ≤ T ≤ 100 -----Sample Input----- 3 12 5 27 -----Sample Output----- 5 3 7","solution":"def find_smallest_m(n): Returns the smallest integer m such that the sum of integers from 1 to m is greater than or equal to n. :param n: Target sum (integer) :return: Smallest integer m (integer) m = 1 current_sum = 1 while current_sum < n: m += 1 current_sum += m return m def process_test_cases(T, test_cases): results = [] for n in test_cases: results.append(find_smallest_m(n)) return results"},{"question":"Design a function that takes an integer `n` and returns a list of the first `n` numbers in the Fibonacci sequence. The Fibonacci sequence starts with the numbers 0 and 1, and each subsequent number is the sum of the previous two. # Input - An integer `n` where `1 <= n <= 50`. # Output - A list of the first `n` numbers in the Fibonacci sequence. # Example Input: ``` 5 ``` Output: ``` [0, 1, 1, 2, 3] ``` # Explanation If the input is `5`, the function should return the first five numbers in the Fibonacci sequence, which are `0, 1, 1, 2, and 3`.","solution":"def fibonacci(n): Returns a list of the first n numbers in the Fibonacci sequence. Parameters: n (int): The number of Fibonacci numbers to return. Returns: list: A list of the first n Fibonacci numbers. if n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence"},{"question":"Given an array of integers representing the number of sales made on each day by a team of salespeople, your task is to determine if there has been a stretch of K consecutive days where the sales have strictly increased. Write a function to determine if such a stretch of increasing sales exists in the given array for each test case. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - The first line of each test case contains two space-separated integers N (the number of days) and K (the length of the stretch). - The second line of each test case contains N space-separated integers, where the ith integer is `S[i]`, representing the sales made on the ith day. ------ Output Format ------ For each test case, print a single line containing the string \\"YES\\" if there is a stretch of K consecutive days where sales strictly increase, or \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10^2 1 ≤ N ≤ 10^5 1 ≤ K ≤ N 0 ≤ S[i] ≤ 10^5 ------ Sample Input 1 ------ 3 5 3 1 2 3 2 1 7 4 1 3 5 7 2 4 6 4 4 4 3 2 1 ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Example case 1: - There is a stretch of exactly three consecutive days (1, 2, 3) where the sales are strictly increasing. Example case 2: - There is a stretch of exactly four consecutive days (1, 3, 5, 7) where the sales are strictly increasing. Example case 3: - There is no stretch of exactly four consecutive days where the sales are strictly increasing.","solution":"def is_increasing_stretch_exists(N, K, sales): This function checks if there is a stretch of K consecutive days where sales are strictly increasing in the given sales data. :param N: An integer representing the number of days. :param K: An integer representing the length of the stretch. :param sales: A list of integers representing the sales made on each day. :return: \\"YES\\" if such a stretch exists, otherwise \\"NO\\". if K > N: return \\"NO\\" for i in range(N - K + 1): increasing = True for j in range(1, K): if sales[i + j - 1] >= sales[i + j]: increasing = False break if increasing: return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): Processes multiple test cases and checks for each case if there is a stretch of K consecutive days where sales are strictly increasing. :param T: Number of test cases :param test_cases: A list containing tuples for each test case, where each tuple contains N, K, and sales data. :return: A list of results for each test case. results = [] for test_case in test_cases: N, K, sales = test_case result = is_increasing_stretch_exists(N, K, sales) results.append(result) return results"},{"question":"Given a string, count the number of substrings that start and end with the same character. Example 1: Input: \\"abca\\" Output: 5 Explanation: The substrings are [‘a’, ‘b’, ‘c’, ‘a’, ‘aba’]. Example 2: Input: \\"abcab\\" Output: 7 Explanation: The substrings are [‘a’, ‘b’, ‘c’, ‘a’, ‘b’, ‘aba’, ‘abca’]. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function countSubstrings() that takes a string (s) and returns the count of substrings. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ |s| ≤ 10^{5}","solution":"def countSubstrings(s): Counts the number of substrings that start and end with the same character. Parameters: s (str): The input string. Returns: int: The count of substrings. count = 0 n = len(s) # Create a dictionary to store the frequency of each character freq = {} for i in range(n): if s[i] in freq: count += freq[s[i]] freq[s[i]] += 1 else: freq[s[i]] = 1 # Each single character is a valid substring count += 1 return count"},{"question":"Yana is organizing a coding competition with n participants and m coding problems. Each participant has a specific ranking based on their performance, indicated by a number between 1 and n, where a lower number indicates a better rank. Yana wants to generate a leaderboard displaying each participant\'s ranking for every problem. The ranking should be represented in a 2D array where each element at position (i, j) represents the ranking of the i-th participant on the j-th problem. A valid leaderboard must satisfy the following conditions: 1. Each row should contain all unique integers from 1 to m. 2. Each column should contain all unique integers from 1 to n. Your task is to create a valid leaderboard that satisfies these conditions. -----Input----- The single line contains two integers, n and m (1 ≤ n, m ≤ 100). -----Output----- Print any valid leaderboard matrix. Each of n rows should contain m integers separated by spaces. If there are multiple valid leaderboards, you are allowed to print any one of them. -----Examples----- Input 3 3 Output 1 2 3 2 3 1 3 1 2 Input 4 4 Output 1 2 3 4 2 3 4 1 3 4 1 2 4 1 2 3 -----Note----- In the first sample, each row and each column contains the integers from 1 to 3. For instance, row 1 contains [1, 2, 3], row 2 contains [2, 3, 1], and row 3 contains [3, 1, 2]. Similarly, column 1 contains [1, 2, 3], column 2 contains [2, 3, 1], and column 3 contains [3, 1, 2]. Other valid leaderboards are also possible. In the second sample, each row and each column contains the integers from 1 to 4. Multiple valid leaderboards can exist.","solution":"def generate_leaderboard(n, m): Generate a leaderboard matrix such that each row contains unique integers from 1 to m and each column contains unique integers from 1 to n. leaderboard = [[(i + j - 1) % m + 1 for j in range(1, m + 1)] for i in range(1, n + 1)] return leaderboard"},{"question":"Alice loves playing with numbers and recently came up with a new game. She takes a list of `n` positive integers and tries to find out the smallest positive integer which is not present in the list. Being a good programmer, can you help her find this number? Write a function `findSmallestMissingNum(arr)` that takes an integer list `arr` as input and returns this smallest missing positive number. Example 1: Input: arr = [1, 2, 3, 6, 4] Output: 5 Explanation: The smallest missing positive number is 5. Example 2: Input: arr = [1, 3, 3, 3, 3] Output: 2 Explanation: The smallest missing positive number is 2. Your Task: You need to complete the function `findSmallestMissingNum(arr)` that takes the list of integers as input and returns the smallest positive integer not present in the list. You don\'t need to read input or print anything. Expected Time Complexity: O(n) Expected Space Complexity: O(1) (Ignoring the input list) Constraints: * 1 <= len(arr) <= 10^6 * 1 <= arr[i] <= 10^6","solution":"def findSmallestMissingNum(arr): Returns the smallest positive integer that is not present in the list `arr`. n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[i] != arr[arr[i] - 1]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"Given a string S consisting of lowercase letters, determine if it is possible to rearrange the characters of S such that no two adjacent characters are the same. If possible, print any such rearrangement. If not, print \\"Not Possible\\". Input The first line contains T (number of test cases). Each of the next T lines contains a string S. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^4 SAMPLE INPUT 2 aabb aaab SAMPLE OUTPUT abab Not Possible","solution":"import heapq from collections import Counter def rearrange_string(s): freq_counter = Counter(s) max_heap = [(-freq, char) for char, freq in freq_counter.items()] heapq.heapify(max_heap) prev_char, prev_freq = None, 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 if len(result) == len(s): return \\"\\".join(result) else: return \\"Not Possible\\" def rearrange_strings(T, strings): return [rearrange_string(s) for s in strings]"},{"question":"**Title:** Path Reconstruction from Log Data **Description:** Anna has been working on a distributed system which logs its activities in a unique way. Each log entry records an activity performed between two unique servers. The logs are recorded in sequence and it is guaranteed that there is a unique path from the start server to the destination server without revisiting any server. Your task is to help Anna reconstruct the path taken by looking at the logs. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 10^5) - the number of log entries. - The next `n` lines each contain two integers that denote an activity between two servers. Each of these integers between 1 and 10^9, and all integers are unique. **Output:** - Output `n + 1` integers which represent the sequence of servers visited in the correct order. **Examples:** *Input:* ``` 3 1 2 3 1 2 4 ``` *Output:* ``` 3 1 2 4 ``` *Input:* ``` 4 10 11 11 12 12 13 14 13 ``` *Output:* ``` 10 11 12 13 14 ``` *Input:* ``` 2 5 9 8 5 ``` *Output:* ``` 8 5 9 ```","solution":"def reconstruct_path(n, logs): from collections import defaultdict # Create adjacency list adjacency_list = defaultdict(list) in_degree = defaultdict(int) out_degree = defaultdict(int) for u, v in logs: adjacency_list[u].append(v) adjacency_list[v].append(u) out_degree[u] += 1 in_degree[v] += 1 # Find the start node by checking for a node with out-degree of 1 and in-degree of 0 start_node = None for node in adjacency_list: if out_degree[node] == 1 and in_degree[node] == 0: start_node = node break # If the start node is not found by directory method, pick the node which occurs only once in logs if start_node is None: count = defaultdict(int) for u, v in logs: count[u] += 1 count[v] += 1 for node in count: if count[node] == 1: start_node = node break path = [] visited = set() # Depth-first search to reconstruct the path def dfs(node): path.append(node) visited.add(node) for neighbor in adjacency_list[node]: if neighbor not in visited: dfs(neighbor) dfs(start_node) return path"},{"question":"The annual tech conference is around the corner, and the organizing committee faced a problem with scheduling the guest speakers. Each speaker provided their available time slots, and the aim is to fit them into the minimal number of rooms possible, without any overlapping sessions in the same room. You are given the arrival and departure times of each guest speaker. Your task is to determine the minimum number of rooms required to schedule all the guest speakers without any overlap within the same room. -----Input----- The first line of the input contains a single integer n (1 leq n leq 100) — the number of guest speakers. Each of the next n lines contains two integers a_i and b_i (0 leq a_i < b_i leq 1000) — the arrival and departure times of the i-th guest speaker. -----Output----- Print a single integer — the minimum number of rooms required. -----Examples----- Input 3 1 4 2 5 3 6 Output 3 Input 4 1 3 2 4 5 6 7 8 Output 2 Input 2 1 10 2 6 Output 2","solution":"def min_meeting_rooms(intervals): if not intervals: return 0 # Create a list of all start and end times times = [] for interval in intervals: times.append((interval[0], \'start\')) times.append((interval[1], \'end\')) # Sort times by time value, if time values are the same, \'end\' should go before \'start\' times.sort(key=lambda x: (x[0], x[1] == \'start\')) room_count = 0 max_rooms = 0 # Iterate through times to calculate the maximum number of concurrent meetings for time in times: if time[1] == \'start\': room_count += 1 max_rooms = max(max_rooms, room_count) else: # \'end\' room_count -= 1 return max_rooms"},{"question":"Given a list of integers `arr` and an integer `target`, return all unique combinations of `arr` where the numbers sum to `target`. Each number in `arr` may only be used once in the combination. All numbers (including `target`) will be positive integers, and combinations should be listed in lexicographic order. The solution set must not contain duplicate combinations. -----Input----- The first line contains an integer n (1 ≤ n ≤ 20) representing the length of the list. The second line contains n integers representing the elements of the list arr (1 ≤ arr[i] ≤ 50). The third line contains a single integer target (1 ≤ target ≤ 500). -----Output----- Output all unique combinations of arr where the numbers sum to target in lexicographic order. Each combination should be printed on a new line, with numbers separated by spaces. -----Examples----- Input 4 2 3 6 7 7 Output 2 3 2 7 Input 5 10 1 2 7 6 5 8 Output 1 2 5 1 7 2 6 -----Note----- In the first example, the combinations that sum to 7 are [2, 3, 2] and [7]. Although there are duplicates for [2, 3, 2], they are reduced to a single instance in the output. In the second example, the combinations that sum to 8 are [1, 2, 5], [1, 7], and [2, 6]. These are listed in lexicographic order.","solution":"def combination_sum(arr, target): Returns all unique combinations of arr where the numbers sum to target. # We\'ll use a recursive helper function to generate the combinations. def backtrack(start, target, path, res): if target == 0: res.append(path) return if target < 0: return for i in range(start, len(arr)): if i > start and arr[i] == arr[i - 1]: continue backtrack(i + 1, target - arr[i], path + [arr[i]], res) arr.sort() result = [] backtrack(0, target, [], result) return result"},{"question":"**Problem Statement** Alex is participating in a hiking challenge on a mountain trail that consists of n checkpoints. Each checkpoint is either an uphill (U), a downhill (D), or a flat (F) segment. Alex starts at checkpoint 1 with an initial energy level of e. When Alex hikes: - For each uphill (U), he loses 2 units of energy. - For each downhill (D), he gains 1 unit of energy. - For each flat segment (F), his energy level remains unchanged. Alex must maintain a non-negative energy level throughout his hike. He can boost his energy with energy drinks before starting. Each energy drink instantly adds 5 units of energy to Alex\'s starting energy level e. Determine the minimum number of energy drinks Alex must consume at the beginning of his hike to complete the trail without his energy falling below 0 at any checkpoint. **Input** The input consists of: - An integer n (1 ≤ n ≤ 10^5) — the number of checkpoints. - A string s of length n consisting of the characters \'U\', \'D\', and \'F\' — the sequence of checkpoints. - An integer e (0 ≤ e ≤ 10^9) — the initial energy level. **Output** Print a single integer — the minimum number of energy drinks Alex must consume to complete the trail without his energy falling below 0. **Examples** Input: ``` 5 UUDUF 3 ``` Output: ``` 1 ``` Input: ``` 3 UDF 2 ``` Output: ``` 0 ``` **Explanation** In the first example, the trail sequence is \\"UUDUF\\". With an initial energy of 3: - Alex starts with 3 energy. - After first U, energy = 3 - 2 = 1 - After second U, energy = 1 - 2 = -1 (needs 2 more energy for U, so at least 1 energy drink required) - After the third D, energy = -1 + 5 + 1 = 5 (one energy drink consumed) - After F, energy remains 5 In the second example, the trail sequence is \\"UDF\\". With an initial energy of 2: - Alex starts with 2 energy. - After U, energy = 2 - 2 = 0 - After D, energy = 0 + 1 = 1 - After F, energy remains 1 No energy drink is needed in the second example.","solution":"def min_energy_drinks(n, s, e): Determine the minimum number of energy drinks Alex must consume at the beginning of his hike to complete the trail without his energy falling below 0 at any checkpoint. Parameters: n (int): Number of checkpoints. s (str): Sequence of checkpoints. e (int): Initial energy level. Returns: int: Minimum number of energy drinks required. min_energy_needed = 0 current_energy = e for checkpoint in s: if checkpoint == \'U\': current_energy -= 2 elif checkpoint == \'D\': current_energy += 1 if current_energy < min_energy_needed: min_energy_needed = current_energy if min_energy_needed >= 0: return 0 else: return (-min_energy_needed + 4) // 5 # rounding up to the nearest integer # Example Usage # print(min_energy_drinks(5, \\"UUDUF\\", 3)) # output should be 1 # print(min_energy_drinks(3, \\"UDF\\", 2)) # output should be 0"},{"question":"You are given an integer array of length N consisting of positive and negative integers. Answer the following Q queries: - Query i (1 leq i leq Q): You will be given integers l_i and r_i (1 leq l_i leq r_i leq N). Consider the subarray of the array starting at index l_i and ending at index r_i (both inclusive). In this subarray, determine the maximum sum of any non-empty contiguous subarray. -----Notes----- A subarray is a contiguous part of an array. -----Constraints----- - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - The integers in the array will be between -10^4 and 10^4, inclusive. - 1 leq l_i leq r_i leq N -----Input----- Input is given from Standard Input in the following format: N Q A_1 A_2 ... A_N l_1 r_1 : l_Q r_Q -----Output----- Print Q lines. The i-th line should contain the answer to the i-th query. -----Sample Input----- 5 3 1 2 -1 2 3 1 3 2 4 1 5 -----Sample Output----- 3 3 7 - Query 1: the subarray of the array starting at index 1 and ending at index 3 is [1, 2, -1]. The maximum sum of any non-empty contiguous subarray is 3 (from subarray [1, 2]). - Query 2: the subarray of the array starting at index 2 and ending at index 4 is [2, -1, 2]. The maximum sum of any non-empty contiguous subarray is 3 (from subarray [2, -1, 2]). - Query 3: the subarray of the array starting at index 1 and ending at index 5 is [1, 2, -1, 2, 3]. The maximum sum of any non-empty contiguous subarray is 7 (from subarray [1, 2, -1, 2, 3]).","solution":"def max_subarray_sum(arr): Function to find the maximum sum of any non-empty contiguous subarray using Kadane\'s algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def process_queries(N, Q, array, queries): results = [] for l, r in queries: subarray = array[l-1:r] max_sum = max_subarray_sum(subarray) results.append(max_sum) return results def read_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) Q = int(data[1]) array = list(map(int, data[2:N+2])) queries = [] index = N+2 for _ in range(Q): l = int(data[index]) r = int(data[index + 1]) queries.append((l, r)) index += 2 return N, Q, array, queries def main(): N, Q, array, queries = read_input() results = process_queries(N, Q, array, queries) for result in results: print(result) if __name__ == \'__main__\': main()"},{"question":"Consider an array of integers where each value can be positive or negative. Your task is to determine if there exists a contiguous subarray that sums to a given target value k. For example, in the array [1, -1, 5, -2, 3] and with k=3, the subarray [1, -1, 5, -2] sums to 3. Write a function `can_find_subarray` that takes in: - An array of integers `arr` (1 <= length of `arr` <= 5000) - An integer target value `k` (-10^5 <= k <= 10^5) Your function should return \\"found\\" if such a subarray exists, and \\"not found\\" otherwise. -----Function Signature----- ```python def can_find_subarray(arr: List[int], k: int) -> str: ``` -----Examples----- Sample Input 1: arr = [1, -1, 5, -2, 3] k = 3 Sample Output 1: found Sample Input 2: arr = [-2, -1, 2, 1] k = 1 Sample Output 2: found Sample Input 3: arr = [1, 2, 3] k = 6 Sample Output 3: found Sample Input 4: arr = [1, 2, 3] k = -1 Sample Output 4: not found","solution":"from typing import List def can_find_subarray(arr: List[int], k: int) -> str: Determines if there exists a contiguous subarray that sums to the given target value k. Returns \\"found\\" if such a subarray exists, otherwise returns \\"not found\\". current_sum = 0 sum_map = {0: -1} # To handle the case where the subarray starts from index 0 for idx, num in enumerate(arr): current_sum += num if (current_sum - k) in sum_map: return \\"found\\" sum_map[current_sum] = idx return \\"not found\\""},{"question":"Given a directed graph G = (V, E) with n vertices and m edges, a path in G is defined as a sequence of vertices (v_1, v_2, ..., v_k) such that for each i from 1 to k-1, there is a directed edge from v_i to v_{i+1} in G. A path is considered a cycle if v_1 = v_k and all vertices v_1, v_2, ..., v_{k-1} are distinct. Let f(G) be the number of paths in G that form cycles. Write a program to calculate f(G) modulo 1,000,000,007. -----Input----- The first line contains two integers n (1 le n le 2000) and m (0 le m le 4000), representing the number of vertices and edges in the graph, respectively. Each of the following m lines contains two integers u and v (1 le u, v le n, u neq v), describing a directed edge from vertex u to vertex v. -----Output----- Output one integer, representing the number of paths in the graph that form cycles, modulo 1,000,000,007. -----Examples----- Input 3 3 1 2 2 3 3 1 Output 1 Input 4 4 1 2 2 3 3 4 4 2 Output 1 -----Note----- In the first example, the graph forms a single cycle (1 -> 2 -> 3 -> 1). In the second example, there is one cycle: 2 -> 3 -> 4 -> 2. Paths like 1 -> 2 -> 3 -> 4 do not form a cycle.","solution":"def number_of_cycles(n, m, edges): MOD = 1_000_000_007 def dfs(graph, start, visited, stack): visited[start] = True stack[start] = True count = 0 for neighbor in graph[start]: if not visited[neighbor]: count += dfs(graph, neighbor, visited, stack) elif stack[neighbor]: count += 1 stack[start] = False return count from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [False] * (n + 1) stack = [False] * (n + 1) cycle_count = 0 for i in range(1, n + 1): if not visited[i]: cycle_count += dfs(graph, i, visited, stack) return cycle_count % MOD # Sample function call # n = 3 # m = 3 # edges = [(1, 2), (2, 3), (3, 1)] # print(number_of_cycles(n, m, edges)) # Output: 1"},{"question":"You are given a string consisting of lowercase alphabets and an integer k. You need to determine whether you can make the string a palindrome by changing at most k characters. A palindrome is a string that reads the same forward and backward. For example, given the string \\"abca\\" and k = 1, you can change the character \'b\' to \'d\' to make \\"adca\\", which is a palindrome. -----Input----- The first line contains the string of lowercase alphabets. The second line contains an integer k, indicating the maximum number of character changes allowed. -----Output----- Output \\"YES\\" if you can make the string a palindrome by changing at most k characters. Otherwise, output \\"NO\\". -----Examples----- Input abca 1 Output YES Input abcdef 2 Output NO","solution":"def can_make_palindrome(s, k): Returns \'YES\' if the string can be made a palindrome by changing at most k characters, otherwise returns \'NO\'. n = len(s) mismatch_count = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: mismatch_count += 1 if mismatch_count <= k: return \\"YES\\" else: return \\"NO\\""},{"question":"Implement the class RecentCounter, which counts recent requests. 1. RecentCounter() Initializes the counter with zero recent requests. 2. int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that have happened in the past 3000 milliseconds (including the new request). Specifically, it returns the number of requests that have happened in the inclusive range [t - 3000, t]. It is guaranteed that every call to ping uses a strictly larger value of t than before. Example: Input [\\"RecentCounter\\", \\"ping\\", \\"ping\\", \\"ping\\", \\"ping\\"] [[], [1], [100], [3001], [3002]] Output [null, 1, 2, 3, 3] Explanation RecentCounter recentCounter = new RecentCounter(); recentCounter.ping(1); // requests = [1], range is [-2999,1], returns 1 recentCounter.ping(100); // requests = [1,100], range is [-2900,100], returns 2 recentCounter.ping(3001); // requests = [1,100,3001], range is [1,3001], returns 3 recentCounter.ping(3002); // requests = [100,3001,3002], range is [2,3002], returns 3 Constraints: - The number of calls to ping will be at most 10^4. - 1 <= t <= 10^9","solution":"from collections import deque class RecentCounter: def __init__(self): self.requests = deque() def ping(self, t: int) -> int: self.requests.append(t) while self.requests and self.requests[0] < t - 3000: self.requests.popleft() return len(self.requests)"},{"question":"A software development company wants to implement a new feature in their messaging app. You have been assigned the task to write a function that processes incoming messages and finds the longest substring that contains at most two distinct characters. The function should return the length of such a substring. # Constraints: - The input string is composed of lowercase English letters. - The length of the string is between 1 and 10^5. # Input: The input is given from Standard Input in the following format: s # Output: Print the answer. # Sample Input: abcba # Sample Output: 3 # Explanation: The longest substring with at most two distinct characters is \\"bcb\\", which has a length of 3.","solution":"def length_of_longest_substring_two_distinct(s): This function takes a string s and returns the length of the longest substring that contains at most two distinct characters. if len(s) == 0: return 0 # Dictionary to store the last occurrence of each character last_occurrence = {} max_length = 0 start = 0 for end in range(len(s)): last_occurrence[s[end]] = end if len(last_occurrence) > 2: # Find the character with the smallest last occurrence del_idx = min(last_occurrence.values()) del last_occurrence[s[del_idx]] start = del_idx + 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"# Preface You have been hired by a logistics company to optimize the delivery routes for their delivery trucks. The goal is to find the shortest possible route that allows each truck to deliver all packages and return to the warehouse. # Problem Given is a set of delivery locations and a starting point for the truck, you need to plan the shortest route that visits each delivery location exactly once and then returns to the starting point. This problem is a variation of the well-known Traveling Salesman Problem (TSP). The coordinates of the starting point (warehouse) and delivery locations are given in an array: ```python locations = [{\\"id\\": 0, \\"x\\": 0, \\"y\\": 0}, {\\"id\\": 1, \\"x\\": 2, \\"y\\": 3}, {\\"id\\": 2, \\"x\\": 5, \\"y\\": 4}, ...]; ``` Where the `id` 0 corresponds to the warehouse. Your task is to compute the shortest route that visits each delivery location once and returns to the starting point (warehouse). The output should be a string indicating the route in terms of the location IDs and the total distance: ``` \\"The best route is: 0 -> 1 -> 2 -> ... -> 0 with a total distance of D\\" ``` Where D is the calculated minimum distance for the route.","solution":"import itertools import math def calculate_distance(loc1, loc2): Calculate the Euclidean distance between two points represented as dictionaries with \'x\' and \'y\' coordinates. return math.sqrt((loc1[\'x\'] - loc2[\'x\'])**2 + (loc1[\'y\'] - loc2[\'y\'])**2) def tsp(locations): Solve the Traveling Salesman Problem using brute-force approach. num_locations = len(locations) # Starting location is always the first location in the list start_location = locations[0] # Generate all permutations of location indices (excluding the start location) permutations = itertools.permutations(range(1, num_locations)) min_distance = float(\'inf\') best_route = None # Iterate over all permutations to find the minimum distance for perm in permutations: current_route = [0] + list(perm) + [0] current_distance = 0 # Calculate the total distance for the current permutation for i in range(len(current_route) - 1): loc1 = locations[current_route[i]] loc2 = locations[current_route[i + 1]] current_distance += calculate_distance(loc1, loc2) # Update best route and distance if current route is shorter if current_distance < min_distance: min_distance = current_distance best_route = current_route # Format the output string best_route_string = \' -> \'.join(map(str, best_route)) result = f\\"The best route is: {best_route_string} with a total distance of {min_distance:.2f}\\" return result"},{"question":"You are given a string that contains words and spaces. Your task is to implement a function that reverses the order of words in the string while preserving the whitespace between words. Leading and trailing whitespaces should remain unchanged. For example, if the input string is \\" hello world \\", the reversed string should be \\" world hello \\". # Function Signature In Python, the function signature should be: ```python def reverse_words_preserving_whitespace(s: str) -> str: ``` # Input - `s` (a string): The input string containing words and spaces. # Output - Returns a string with the words in reversed order but maintains the original whitespace. # Constraints - The input string will only contain letters and spaces. - The length of the string will be between 1 and 10^5. # Example ```python reverse_words_preserving_whitespace(\\" hello world \\") --> \\" world hello \\" reverse_words_preserving_whitespace(\\"a good example\\") --> \\"example good a\\" ``` # Notes - Consider edge cases like strings with no spaces, strings with only spaces, or strings with multiple consecutive spaces between words.","solution":"def reverse_words_preserving_whitespace(s: str) -> str: Returns the input string with the order of words reversed while preserving whitespace. Leading and trailing whitespace are preserved. # Split the input string by spaces while keeping the spaces in the resulting list. words = s.split(\' \') # Reverse the list and join back into a string with spaces. reversed_words = \' \'.join(words[::-1]) return reversed_words"},{"question":"Chloe loves arranging books in her bookshelf. She has a shelf of length `L` which can hold books whose total width sums up to `L`. Each book can either be fully placed on the shelf or not at all. You are given the widths of `n` books and their respective values. Chloe wants to place books on the shelf such that the total value of the books on the shelf is maximized, without the total width exceeding the length of the shelf `L`. Help Chloe maximize the total value of books she places on her shelf. -----Input----- The first line contains two space-separated integers `L` and `n` (1 ≤ L ≤ 1000, 1 ≤ n ≤ 100) — the length of the shelf and the number of books respectively. Next `n` lines each contain two space-separated integers. Specifically, the `i-th` of these lines contains numbers `w_{i}` and `v_{i}` (1 ≤ w_{i} ≤ 100, 1 ≤ v_{i} ≤ 100) — the width and the value of the `i-th` book. -----Output----- Print a single integer — the maximum value Chloe can obtain by placing books on the shelf. -----Examples----- Input 10 3 5 10 4 7 6 8 Output 17 Input 8 2 3 8 2 6 Output 14 Input 15 5 3 5 5 10 6 13 7 14 4 7 Output 30 -----Note----- In the first test, Chloe can place the books with widths 5 and 4 which sum up to a total value of 17. In the second test, Chloe can place both books with total widths 3 and 2 which sum up to a total value of 14. In the third test, Chloe can place the books with widths 3, 5, and 7 which sum up to a total value of 30.","solution":"def maximize_book_value(L, n, books): dp = [0] * (L + 1) for width, value in books: for j in range(L, width - 1, -1): dp[j] = max(dp[j], dp[j - width] + value) return dp[L]"},{"question":"# Calculate the product of elements in a linked list Related Kata Before attempting this Kata, you might want to try out [Sum the elements of a linked list](https://www.codewars.com/kata/55d6a7eaa9b4052617000006) if you enjoyed this Kata. Preloaded Preloaded for you is a class or derived data type `Node` (depending on the language) used to construct linked lists in this Kata: ```python class Node: def __init__(self, data, next=None): self.data = data self.next = next ``` If you are attempting this Kata in NASM, then note that the code example shown directly above may not be relevant; please refer to the Sample Tests (written in C) for the exact definition of the `Node` structure. Prerequisites This Kata assumes that you are already familiar with the idea of a linked list. If you do not know what that is, you may want to read up on [this article on Wikipedia](https://en.wikipedia.org/wiki/Linked_list). Specifically, the linked lists this Kata is referring to are **singly linked lists**, where the value of a specific node is stored in its `data`/`data`/`Data` property, the reference to the next node is stored in its `next`/`next`/`Next` property, and the terminator for a list is `null`/`NULL`/`None`/`nil`/`nullptr`/`null()`. Task *If you are attempting this Kata in NASM, the code examples shown below may not be relevant at all - please refer to the Sample Tests (written in C) for the exact requirements.* Create a function `product` which accepts a `list`/`list` as an argument and returns the product of the element values in the list. The product of the elements must be an integer. If the list is empty or consists only of `None`, return `1`. For example, given the following list: ```python Node(2, Node(3, Node(4))) ``` The function should return: ```python 24 ``` And given the following linked list: ```python Node(5, Node(1, Node(0))) ``` The function should return: ```python 0 ``` Note that `null`/`NULL`/`None`/`nil`/`nullptr`/`null()` itself is also considered a valid linked list, and in that case, the function should return `1`. For the simplicity of this Kata, you may assume that any `Node` in this Kata may only contain **non-negative integer** values. For example, you will not encounter a `Node` whose `data`/`data`/`Data` property is `\\"Hello World\\"`. Enjoy, and don\'t forget to check out my other Kata Series :D","solution":"class Node: def __init__(self, data, next=None): self.data = data self.next = next def product(node): Calculate the product of elements in a linked list. Args: node (Node): The head of the linked list. Returns: int: The product of the element values in the list. If the list is empty, return 1. if node is None: return 1 result = 1 current = node while current is not None: result *= current.data current = current.next return result"},{"question":"# Water Jug Problem You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs. If z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end. Operations allowed: 1. Fill any of the jugs completely with water. 2. Empty any of the jugs. 3. Pour water from one jug into another until: - the second jug is full - the first jug itself is empty Write a function that returns True if z is measurable, otherwise return False. # Function Signature: ```python def canMeasureWater(x: int, y: int, z: int) -> bool: ``` # Input: - `x` - An integer representing the capacity of the first jug (0 <= x <= 10^6) - `y` - An integer representing the capacity of the second jug (0 <= y <= 10^6) - `z` - An integer representing the target amount of water (0 <= z <= 10^6) # Output: - Returns `True` if z liters of water is measurable, otherwise returns `False`. # Example: ```python canMeasureWater(3, 5, 4) -> True canMeasureWater(2, 6, 5) -> False canMeasureWater(1, 2, 3) -> True ``` # Note: - You can solve this problem using the mathematical properties of Diophantine equations and Bezout\'s identity. - If z is greater than x + y, then it is impossible to measure z liters. # Constraints: To ensure that the function performance is acceptable, the constraints specify large upper limits on the parameter values. Use efficient algorithms to solve the problem within these boundaries without timeouts.","solution":"def gcd(a, b): while b != 0: a, b = b, a % b return a def canMeasureWater(x: int, y: int, z: int) -> bool: Determine if it\'s possible to measure exactly z liters using jugs of size x and y. # If z exceeds the combined capacity of both jugs, it\'s impossible if z > x + y: return False # If z is 0, it\'s always possible (just have both jugs empty) if z == 0: return True # Use the properties of the greatest common divisor (GCD) return z % gcd(x, y) == 0"},{"question":"You are given a list of intervals. Each interval is represented as a tuple of two integers (start, end), where start ≤ end. Determine the minimum number of points needed to cover all the intervals. A point covers an interval if it lies within the interval\'s range [start, end]. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of intervals. Each of the next n lines contains two integers start and end (0 ≤ start ≤ end ≤ 10^9) — representing the interval. -----Output----- Print a single integer representing the minimum number of points required to cover all the intervals. -----Examples----- Input 3 1 4 2 5 3 6 Output 1 Input 4 1 2 2 3 3 4 4 5 Output 2 Input 2 1 10 2 3 Output 1 -----Notes----- In the first example: A single point at 3 covers all the intervals [1,4], [2,5], and [3,6]. In the second example: The intervals can be covered using two points, one at 2 to cover the first and second intervals, and another at 4 to cover the third and fourth intervals. In the third example: A single point at 2 covers both intervals [1,10] and [2,3].","solution":"def min_points_to_cover_intervals(intervals): Determines the minimum number of points needed to cover all the intervals. :param intervals: List of tuples, where each tuple contains two integers representing the start and end of an interval. :return: Minimum number of points required to cover all the intervals. if not intervals: return 0 # Sort the intervals based on end time intervals.sort(key=lambda x: x[1]) n = len(intervals) points = [] # Take the end of the first interval as the first point point = intervals[0][1] points.append(point) for i in range(1, n): # If the current interval is not covered by the current point if intervals[i][0] > point: point = intervals[i][1] points.append(point) return len(points)"},{"question":"A social networking site wants to analyze the posts on its platform to identify popular trends. They have a log of posts each containing a series of hashtags. They want to find out which hashtag is the most popular. A hashtag is considered popular if it appears more than half the time among all the posts. Write a program to determine the most popular hashtag. Your program should read several test cases. Each test case starts with an integer n, the number of posts. This is followed by n lines, each containing a string of hashtags separated by spaces. For each test case, if a hashtag appears more than half the time (i.e., in more than n/2 posts), output the hashtag. If no hashtag meets this criterion, output \\"NO POPULAR HASHTAG\\". Input There are several test cases. For each test case, the first line contains the integer n (1 ≤ n ≤ 100,000). The next n lines each contain a string representing the hashtags in a post. A hashtag is any string without spaces or punctuation and starts with the \\"#\\" character. The input terminates with a line containing a single 0. Output For each test case, output the most popular hashtag. If there is no popular hashtag, output \\"NO POPULAR HASHTAG\\". Example Input 3 #food #yummy #food #travel #travel #food 4 #sunrise #sunset #sunrise #sunset 0 Output #food NO POPULAR HASHTAG","solution":"def find_popular_hashtag(test_cases): results = [] for case in test_cases: n = case[0] hashtags = case[1:] hashtag_count = {} for hashtags_in_post in hashtags: unique_hashtags = set(hashtags_in_post.split()) for hashtag in unique_hashtags: if hashtag.startswith(\'#\'): hashtag_count[hashtag] = hashtag_count.get(hashtag, 0) + 1 popular_hashtag = \\"NO POPULAR HASHTAG\\" for hashtag, count in hashtag_count.items(): if count > n / 2: popular_hashtag = hashtag break results.append(popular_hashtag) return results def parse_input(input_data): test_cases = [] input_lines = input_data.strip().split(\'n\') i = 0 while i < len(input_lines): n = int(input_lines[i]) if n == 0: break i += 1 hashtags = [] for _ in range(n): hashtags.append(input_lines[i]) i += 1 test_cases.append((n, *hashtags)) return test_cases if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read() test_cases = parse_input(input_data) results = find_popular_hashtag(test_cases) for result in results: print(result)"},{"question":"A palindrome is a string that reads the same forward and backward, ignoring case, spaces, and punctuation. Given a string, determine if it can be rearranged to form a palindrome. -----Input----- The input consists of a single string S that needs to be checked. The string S may contain only lowercase letters (\'a\'-\'z\'), uppercase letters (\'A\'-\'Z\'), digits (\'0\'-\'9\'), spaces (\' \'), and punctuation symbols: dot (\'.\'), comma (\',\'), exclamation (\'!\'), question-mark(\'?\'). The length of S is between 1 and 1000 inclusive. -----Output----- For the input string S, output \\"YES\\" if it can be rearranged to form a palindrome, and \\"NO\\" otherwise. -----Constraints----- - 1 ≤ |S| ≤ 1000 -----Example----- Input 1: Taco cat Output 1: YES Input 2: A man, a plan, a canal, Panama Output 2: YES Input 3: Hello, World! Output 3: NO -----Explanation----- In the first example, the string \\"Taco cat\\" can be rearranged (ignoring case and spaces) as \\"atcocta\\" which is a palindrome. In the second example, the string \\"A man, a plan, a canal, Panama\\" when cleaned and lowercased is \\"amanaplanacanalpanama\\" which can be rearranged as \\"amanaplanacanalpanama\\" itself and is a palindrome. In the third example, the string \\"Hello, World!\\" cannot be rearranged to form a palindrome.","solution":"from collections import Counter import re def can_form_palindrome(s): Determines if the input string can be rearranged to form a palindrome. # Normalize string: remove non-alphanumeric chars and convert to lower case cleaned_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Count frequency of each character char_count = Counter(cleaned_s) # Check how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 == 1) # For string to be rearrangeable into palindrome, there must be at most 1 odd count character return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"In a small town, there\'s a beautiful park shaped like a parallelogram. The citizens of the town love to enter the park through various points on its perimeter for their evening strolls. The two diagonals of the parallelogram also meet at some point within the park. Consider the scenario of meeting friends at the point where the diagonals intersect. Sam and his friends are planning to visit the park, but they want to meet at a precise point, and they need to know the intersection coordinates of the diagonals. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 1000) — the number of test cases. Each test case contains four lines. Each line contains two integers x_i and y_i (0 le x_i, y_i le 10^9), representing the coordinates of the vertices of the parallelogram in the clockwise direction. -----Output----- For each test case, print two numbers — the coordinates of the intersection point of the diagonals, formatted to six decimal places. Your answer will be considered correct if its absolute or relative error does not exceed 10^{-6}. Formally let your answer be a, the jury\'s answer be b. Your answer will be considered correct if frac{|a - b|}{max{(1, |b|)}} le 10^{-6}. -----Examples----- Input 3 0 0 4 0 6 3 2 3 1 1 5 1 6 4 2 4 0 0 6 0 8 4 2 4 Output 3.000000 1.500000 3.500000 2.500000 4.000000 2.000000 -----Note----- In the examples, the coordinates of the points where the diagonals intersect are calculated. The method to find the cross point of the diagonals of a parallelogram is averaging the x-coordinates and y-coordinates of opposite vertices. So for a parallelogram ABCD with vertices (A, B, C, D): Intersection_x = (A_x + C_x) / 2 Intersection_y = (A_y + C_y) / 2","solution":"def find_diagonal_intersection(t, test_cases): results = [] for i in range(t): x1, y1 = test_cases[i][0] x2, y2 = test_cases[i][1] x3, y3 = test_cases[i][2] x4, y4 = test_cases[i][3] intersection_x = (x1 + x3) / 2 intersection_y = (y1 + y3) / 2 results.append((intersection_x, intersection_y)) return results"},{"question":"You are given a list of n integers. Your task is to find the number of unique ways to split this list into two non-empty contiguous sublists. A sublist is defined as a contiguous portion of the list. For example, for the list [1, 2, 3, 4], the sublists [1, 2] and [3, 4] are contiguous sublists. Two ways of splitting the list are considered unique if at least one of the sublists in the split is different. For example, if the original list is [1, 2, 3, 4], possible unique ways to split it are: 1. [1] and [2, 3, 4] 2. [1, 2] and [3, 4] 3. [1, 2, 3] and [4] Therefore, the total number of unique ways to split the list [1, 2, 3, 4] is 3. -----Input----- The input contains one integer n (2 le n le 10^5) followed by a list of n integers. The integers in the list are separated by spaces. -----Output----- Print one integer — the number of unique ways to split the list into two non-empty contiguous sublists. -----Examples----- Input 4 1 2 3 4 Output 3 Input 5 10 9 7 5 6 Output 4 Input 6 4 5 6 7 8 9 Output 5","solution":"def count_unique_splits(arr): Returns the number of unique ways to split a list into two non-empty contiguous sublists. :param arr: list of integers :return: integer, number of unique splits n = len(arr) # The number of unique ways to split the list is simply (n - 1) return n - 1 # Example usage: # arr = [1, 2, 3, 4] # print(count_unique_splits(arr)) # Output: 3"},{"question":"Filter the comments Tommy is working on an advanced commenting feature for his company\'s new collaborative text editor. He needs to filter out all the comments in a document, which are marked by starting with a specific delimiter and ending with a newline. You need to help Tommy write a function that removes all comments from the given text. A comment may begin with any one of the specific delimiters: \\"#\\", \\"//\\", or \\";\\". Any text following these delimiters on the same line is considered a comment and must be removed. You must handle multiple line inputs and retain newline characters after removing comments. Input - You\'ll receive a string containing the text of the document, possibly spanning multiple lines. Output - Return a string with all comments removed while preserving the original structure except for the commented parts. Constraints - The input string will have a length from 1 to 10^5 characters. - The delimiters will always be one of the following characters: \\"#\\", \\"//\\", or \\";\\". Example Input: ``` This is some text. # This is a comment This span // Another comment will be filtered. // Comment here ; Yet another comment ``` Output: ``` This is some text. This span will be filtered. ``` Explanation: The text contains various comments starting with \\"#\\", \\"//\\", or \\";\\". All such lines\' commented portions are removed, preserving the rest. Each output line corresponds to the input line after comments are stripped off.","solution":"def remove_comments(text): This function removes comments from the input text. Comments begin with \'#\', \'//\' or \';\' and end at the end of the line. lines = text.splitlines() cleaned_lines = [] for line in lines: min_index = len(line) for delimiter in [\'#\', \'//\', \';\']: index = line.find(delimiter) if index != -1: min_index = min(min_index, index) cleaned_lines.append(line[:min_index].rstrip()) return \'n\'.join(cleaned_lines)"},{"question":"Implement a function `rotate_matrix(matrix)` that takes a 2D list `matrix` representing an NxN matrix and rotates it 90 degrees clockwise, returning the rotated matrix. You are not allowed to use any additional matrix or collections to achieve this. **Notes:** * You may assume all inputs are valid NxN matrices containing integer elements. **Examples** ```python rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) ==> [[7, 4, 1], [8, 5, 2], [9, 6, 3]] rotate_matrix([[1, 2], [3, 4]]) ==> [[3, 1], [4, 2]] ```","solution":"def rotate_matrix(matrix): Rotates the given NxN matrix 90 degrees clockwise in place. Args: matrix: List[List[int]] -- The NxN matrix to be rotated. Returns: List[List[int]] -- The rotated matrix. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"You are given a string S consisting of lowercase English letters. You can perform the following operation on the string any number of times: 1. Choose any two distinct characters, say \'a\' and \'b\', from the string. 2. Choose an index i such that S[i] = \'a\' and change S[i] to \'b\'. Your task is to determine the minimum number of distinct characters that can remain in the string after performing the operations any number of times. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string S of length at most 10^5. ------ Output Format ------ For each test case, output on a new line the minimum number of distinct characters that can remain in the string. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ length(S) ≤ 10^5 The sum of lengths of all strings over all test cases does not exceed 10^6. ----- Sample Input 1 ------ 3 abacbc aabbcc abcabc ----- Sample Output 1 ------ 1 1 1 ----- Explanation 1 ------ In the first test case, you can convert all \'a\'s and \'c\'s to \'b\', leaving only \'b\'. In the second test case, you can convert all \'a\'s and \'b\'s to \'c\', leaving only \'c\'. In the third test case, you can convert all \'a\'s and \'b\'s to \'c\', leaving only \'c\'.","solution":"from collections import Counter def min_distinct_chars(S): Returns the minimum number of distinct characters that can remain in the string after performing the given operations. char_counts = Counter(S) # If there is at least one character, we can always reduce the string to having only one distinct character. return 1 def process_input(T, test_cases): results = [] for S in test_cases: results.append(min_distinct_chars(S)) return results"},{"question":"A group of survivors need to pass through a series of gates to reach safety. Each gate requires a specific key to unlock and the keys are scattered in different rooms. The survivors are located at the start and must collect all keys before reaching the final gate. You are tasked with determining if the survivors can collect all necessary keys given the constraints of their movement. [Input] First line contains a single integer t representing the number of test cases. For each test case: - The first line contains an integer n denoting the number of keys and gates. - The second line contains n space-separated integers representing the distances to each key from the start. - The third line contains n space-separated integers representing the distances from each gate to the final gate, where each gate requires the key found at the corresponding distance in the previous line. [Output] For each test case, output a single line \\"Survivors can reach safety\\" if the survivors can collect all keys and pass through all gates. Otherwise, output \\"Survivors cannot reach safety\\". [Constraints] 1 ≤ t ≤ 50 1 ≤ n ≤ 1000 1 ≤ distance ≤ 10000 SAMPLE INPUT 2 3 2 5 3 8 10 15 2 3 6 1 4 SAMPLE OUTPUT Survivors can reach safety Survivors cannot reach safety","solution":"def can_survivors_reach_safety(test_cases): results = [] for case in test_cases: n, keys_distances, gates_distances = case keys_distances.sort() gates_distances.sort() can_reach = True for i in range(n): if keys_distances[i] >= gates_distances[i]: can_reach = False break if can_reach: results.append(\\"Survivors can reach safety\\") else: results.append(\\"Survivors cannot reach safety\\") return results"},{"question":"Dr. Roboto is a researcher who loves analyzing communication networks. He’s currently studying a network of servers connected by unidirectional communication channels. The network is represented as a directed graph with N nodes and M edges. Each edge has an associated non-negative weight representing the round-trip communication delay between the connected servers. Dr. Roboto wants to know the shortest possible round-trip delay starting and ending at a specified server, Server S. Write a program to find the minimum round-trip delay time for Server S or indicate if no such round-trip exists. Constraints * 2 leq N leq 50 * 1 leq M leq 200 * 1 leq S leq N * 1 leq a_i, b_i leq N * 0 leq d_i leq 1000 * There may be multiple edges between the same nodes. * There are no self-loops (i.e., an edge from a node to itself). Input Input is given from Standard Input in the following format: ``` N M S a_1 b_1 d_1 a_2 b_2 d_2 : a_M b_M d_M ``` Output Print the minimum round-trip delay for Server S or `-1` if no round-trip exists. Examples Input ``` 4 4 1 1 2 10 2 3 10 3 4 10 4 1 10 ``` Output ``` 40 ``` Input ``` 4 3 1 1 2 10 2 3 10 3 4 10 ``` Output ``` -1 ``` Input ``` 3 3 2 2 1 3 1 3 4 3 2 5 ``` Output ``` 12 ```","solution":"import heapq def dijkstra(graph, start): Apply Dijkstra\'s algorithm to find the shortest paths from start node to all other nodes. n = len(graph) distances = [float(\'inf\')] * n distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def minimum_round_trip_delay(n, m, s, edges): Find the minimum round-trip delay starting and ending at server `s`. s -= 1 # Convert to 0-based index graph = [[] for _ in range(n)] for a, b, d in edges: graph[a-1].append((b-1, d)) distances_from_s = dijkstra(graph, s) min_round_trip = float(\'inf\') for i in range(n): if i != s and distances_from_s[i] != float(\'inf\'): distances_to_s = dijkstra(graph, i) if distances_to_s[s] != float(\'inf\'): min_round_trip = min(min_round_trip, distances_from_s[i] + distances_to_s[s]) return min_round_trip if min_round_trip != float(\'inf\') else -1 def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) S = int(data[2]) edges = [] index = 3 for _ in range(M): a = int(data[index]) b = int(data[index+1]) d = int(data[index+2]) edges.append((a, b, d)) index += 3 result = minimum_round_trip_delay(N, M, S, edges) print(result)"},{"question":"University course allocation for students is a complicated process involving optimizing multiple constraints and preferences. To help automate part of this process, you have been tasked with writing a program to allocate courses to students based on their preferences and the maximum number of students each course can accommodate. **Input Format** - The first line consists of an integer `n`, the number of students. - The next `n` lines each contain a comma-separated list of course identifiers representing the preferences of each student in order of priority. - The next line contains an integer `m`, the number of courses. - The next `m` lines each contain a course identifier followed by a space and an integer representing the maximum number of students that can be accommodated in that course. **Output Format** - Output `n` lines, each containing a single course identifier or `None` indicating the allocated course for each student or that no course could be allocated, respectively. **Constraints** - The number of students `n` will be between 1 and 1000. - The number of courses `m` will be between 1 and 100. - Each preference list will contain between 1 and 10 course identifiers. - Each course identifier is a string of up to 5 characters and is unique within that input set. - Maximum number of students for each course is between 1 and 100. **Example** **Input** ``` 4 CSE101,MATH102,PHY103 MATH102,CSE101,PHY103 PHY103,CSE101,MATH102 CSE101,PHY103 3 CSE101 2 MATH102 1 PHY103 1 ``` **Output** ``` CSE101 MATH102 PHY103 CSE101 ``` **Explanation** In this example, the students\' preferences lead to the following course allocations: - Student 1 placed in `CSE101`. - Student 2 placed in `MATH102`. - Student 3 placed in `PHY103`. - Student 4 placed in `CSE101` because there is still one available slot in `CSE101`. If a student\'s top choice is no longer available, their next choice is considered, and so forth until a slot is found or no more choices remain. **Note**: The allocation should prioritize by processing the students in the order they are given. Courses should be allocated based on the highest available preference per student\'s list. If all preferences for a student are exhausted and no slots remain, output `None` for that student.","solution":"def allocate_courses(n, student_preferences, m, course_capacities): # Initialize the capacities dictionary course_dict = {} for course in course_capacities: course_id, capacity = course.split() course_dict[course_id] = int(capacity) # Initialize the result list allocation = [None] * n # Process each student\'s preferences for i in range(n): preferences = student_preferences[i].split(\',\') for pref in preferences: if course_dict.get(pref, 0) > 0: allocation[i] = pref course_dict[pref] -= 1 break return allocation"},{"question":"There are N chairs and M tables in a room. Each chair has 4 legs. Each table has 1 leg. Find the total number of legs in the room. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first and only line of each test case contains two integers N, M. ------ Output Format ------ For each test case, output in a single line, the total number of legs in the room. ------ Constraints ------ 1 ≤ T ≤ 1000 0 ≤ N, M ≤ 100 ----- Sample Input 1 ------ 2 4 3 5 1 ----- Sample Output 1 ------ 19 21 ----- explanation 1 ------ Test Case 1: There are 4 chairs and 3 tables. Each chair has 4 legs, so there are 4cdot 4 = 16 chair legs. Similarly, each table has 1 leg, so there are 3cdot 1 = 3 table legs. Adding the legs of all furniture, we get 16+3=19 legs in total. Test Case 2: There are 5 chairs and 1 table. Each chair has 4 legs, so there are 5cdot 4 = 20 chair legs. The table has 1 leg, so there are 1cdot 1 = 1 table leg. Adding the legs of all furniture, we get 20+1=21 legs in total.","solution":"def total_legs(test_cases): results = [] for N, M in test_cases: total_chair_legs = N * 4 total_table_legs = M * 1 total_legs = total_chair_legs + total_table_legs results.append(total_legs) return results"},{"question":"A local zoo is organizing a friendly coding competition to automate some of their animal daily routines. One of the tasks is to implement a feeding schedule system. Given the information about animals and their feeding intervals, you should help create a schedule showing the first 10 feeding times for each animal. The feeding interval for an animal is the number of hours between each feeding session. # Problem Statement You are given an integer `n` representing the number of animals. Then, you will be given the animal name and its feeding interval in hours. For each animal, calculate and display the next 10 feeding times starting from hour 0 (i.e., {0, 1, 2, ...}). Constraints: - 1 ≤ n ≤ 100 - 1 ≤ feeding interval ≤ 24 - The animal name consists of alphabetic characters only and will be unique. - Each animal\'s name length will be within 1 to 20 characters. # Input - The first line contains an integer `n`, the number of animals. - Each of the next `n` lines contains an animal name (a string) and its feeding interval (an integer). # Output For each animal, print the next 10 feeding times in hours in the format: ``` <animal_name>: <feeding_time_1> <feeding_time_2> ... <feeding_time_10> ``` # Sample Input ``` 3 Lion 6 Tiger 8 Bear 10 ``` # Sample Output ``` Lion: 0 6 12 18 24 30 36 42 48 54 Tiger: 0 8 16 24 32 40 48 56 64 72 Bear: 0 10 20 30 40 50 60 70 80 90 ``` Note: The feeding times must be calculated in ascending order starting from hour 0, and each time separated by a space.","solution":"def feeding_schedule(n, animals): Returns the feeding schedule for each animal for the next 10 feeding times. :param n: Number of animals :param animals: List of tuples containing animal name and its feeding interval :return: List of strings showing feeding times for each animal result = [] for animal, interval in animals: feed_times = [str(interval * i) for i in range(10)] result.append(f\\"{animal}: {\' \'.join(feed_times)}\\") return result"},{"question":"You are given a string S consisting of lowercase alphabets and a non-negative integer K. For each test case, output a new string which is formed by keeping every K-th character of S and removing all others. Note that the indexing is 1-based. Input Format The first line contains a single integer T, denoting the number of test cases. T testcases follow, each test case given in the following format: A line containing the string S An integer K Output Format For each test case, output the resulting string in one line. Constraints 1 <= T <= 10 1 <= |S| <= 1000 0 <= K <= |S| Sample Input 2 abcdefghi 2 hello 3 Sample Output bdfh l Explanation For the first test case, string \\"abcdefghi\\" and K=2, the characters at indices 2, 4, 6, and 8 (\\"bdfh\\") are kept. For the second test case, string \\"hello\\" and K=3, the character at index 3 (\\"l\\") is kept.","solution":"def keep_every_kth_char(test_cases): For each test case, returns a new string formed by keeping every K-th character of S and removing all others. Note that indexing is 1-based. results = [] for S, K in test_cases: if K == 0: results.append(\\"\\") else: # Convert K to zero-indexed for operations result_string = S[K-1::K] results.append(result_string) return results"},{"question":"Given an array A of N integers, you need to perform a series of operations to make the entire array contain only even numbers. In one operation, you can pick any two distinct indices i and j (1 leq i, j leq N and i neq j) of the array and set both A[i] and A[j] to the sum of their current values (A[i] + A[j]). Determine the minimum number of operations required to make all elements of the array even. If it is not possible, return -1. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N. The second line contains N space-separated integers A_1, A_2, dots, A_N denoting the elements of the array. ------ Output ------ For each test case, print a single line containing the minimum number of operations required or -1 if it is impossible to make all elements of the array even. ------ Constraints ------ 1 leq T leq 10^5 1 leq N leq 10^5 -10^9 leq A[i] leq 10^9 It is guaranteed that the sum of N over all test cases does not exceed 10^6. ------ Sample Input 1 ------ 2 3 1 3 5 4 2 4 6 8 ------ Sample Output 1 ------ 1 0 ------ Explanation 1 ------ In the first test case, you can pick indices 1 and 2 and set both A[1] and A[2] to 4 (since 1 + 3 = 4), making the array {4, 4, 5}, which requires only one operation. In the second test case, all elements are already even, so zero operations are required.","solution":"def min_operations_to_even(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] array = test_cases[i][1] odd_count = sum(1 for num in array if num % 2 != 0) # If there are no odd numbers, no operations are needed if odd_count == 0: results.append(0) # If there is exactly one odd number, it is impossible to make all numbers even elif odd_count == 1: results.append(-1) else: # If there are more than one odd numbers, one operation is sufficient results.append(odd_count // 2) return results"},{"question":"Design and implement a function that receives a list of integers and returns the length of its longest contiguous subarray consisting of all distinct numbers. # Input - The function receives a list of integers where the list size `n` satisfies `1 ≤ n ≤ 10^5` and the integer values are between `1` and `10^9`. # Output - The function should return a single integer representing the length of the longest contiguous subarray with all distinct numbers. # Examples Input ``` arr = [1, 2, 1, 3, 4, 2, 3] ``` Output ``` 4 ``` Input ``` arr = [5, 5, 5, 5] ``` Output ``` 1 ``` Input ``` arr = [7, 8, 9, 1, 2, 1, 3, 4, 8, 9, 10] ``` Output ``` 7 ``` # Explanation - In the first example, the longest contiguous subarray with distinct elements is `[1, 3, 4, 2]` which has length 4. - In the second example, each element is the same, so the longest contiguous subarray with distinct elements would have length 1. - In the third example, the longest contiguous subarray with distinct elements is `[1, 2, 1, 3, 4, 8, 9]`, which has length 7. # Note - Consider using a sliding window approach to solve the problem efficiently, given the constraints on the size of the list.","solution":"def longest_distinct_subarray(arr): Returns the length of the longest contiguous subarray with all distinct elements. n = len(arr) max_len = 0 left = 0 seen = {} for right in range(n): if arr[right] in seen: # Move the left boundary to the right of the last occurrence of arr[right] left = max(left, seen[arr[right]] + 1) seen[arr[right]] = right max_len = max(max_len, right - left + 1) return max_len"},{"question":"A group of friends is planning a road trip, and they want to minimize the cost of fuel. They have multiple car options, each with a different fuel efficiency and fuel cost. Given the duration of the trip, the fuel efficiency of each car, and the price of fuel per unit distance for each car, your task is to determine the car that will minimize the total fuel cost for the trip. Create a program that inputs the number of cars, the duration of the trip in kilometers, the fuel efficiency of each car (in km per liter), and the price of fuel (per liter) for each car. The program should output the total fuel cost for the trip for each car and identify the car with the minimum fuel cost. Input The input consists of multiple datasets. Each dataset is given in the following format: d t e1 p1 e2 p2 :: ed pd The first line contains two integers, d (1 ≤ d ≤ 100) representing the number of cars, and t (1 ≤ t ≤ 10000) representing the duration of the trip in kilometers. Each of the next d lines contains two integers, ei (1 ≤ ei ≤ 50), the fuel efficiency of the i-th car in km per liter, and pi (1 ≤ pi ≤ 100), the price of fuel per liter for the i-th car. The input is terminated by a single line containing two zeros. Output For each dataset, print the total fuel cost for each car on separate lines and then identify the car with the minimum fuel cost. If there are multiple cars with the same minimum cost, output the one that appears first in the input. Example Input 3 500 10 5 15 4 20 3 2 300 8 6 12 5 0 0 Output 250 133.33 75 Car 3 225 125 Car 2","solution":"def calculate_fuel_cost(d, t, cars): Calculate the total fuel cost for each car and identify the car with the minimum fuel cost. min_cost = float(\'inf\') min_car_index = -1 costs = [] for i in range(d): efficiency, price = cars[i] cost = (t / efficiency) * price costs.append(cost) if cost < min_cost: min_cost = cost min_car_index = i return costs, min_car_index def process_input(data): result = [] idx = 0 while idx < len(data): d, t = map(int, data[idx].split()) if d == 0 and t == 0: break idx += 1 cars = [] for _ in range(d): efficiency, price = map(int, data[idx].split()) cars.append((efficiency, price)) idx += 1 costs, min_car_index = calculate_fuel_cost(d, t, cars) result.append((costs, min_car_index)) return result def format_output(results): output = [] for costs, min_car_index in results: for cost in costs: output.append(f\\"{cost:.2f}\\") output.append(f\\"Car {min_car_index + 1}\\") return \\"n\\".join(output) def road_trip_cost_minimizer(data): results = process_input(data.split(\\"n\\")) return format_output(results)"},{"question":"Alice is organizing a company-wide conference where different teams will present their projects. Each team consists of exactly T members, and there are N employees in total, where N is divisible by T. Use the given list of employees and their respective team designations to determine if all teams are balanced. A team is considered balanced if all its members have the same team designation. -----Input----- The first line contains two integers N and T (1 ≤ T ≤ N ≤ 10^6, N % T = 0), the number of employees and the number of members per team, respectively. The second line contains N integers, the designations of the teams for each employee. The designations are represented by integers between 1 and 100 (inclusive). -----Output----- Print \\"YES\\" if all teams are balanced, otherwise print \\"NO\\". -----Examples----- Input 6 2 1 1 2 2 3 3 Output YES Input 9 3 1 1 2 3 3 3 2 2 2 Output NO Input 6 3 1 1 1 2 2 2 Output YES -----Note----- In the first example, each team of 2 members has the same designation. In the second example, the first team has members with different designations. In the third example, both teams of 3 members have the same designation.","solution":"def are_teams_balanced(N, T, designations): This function checks if all teams of T members each are balanced, meaning all team members have the same designation. Parameters: N (int): Total number of employees. T (int): Number of members per team. designations (list): List of integers indicating team designations. Returns: str: \\"YES\\" if all teams are balanced, otherwise \\"NO\\". for i in range(0, N, T): if len(set(designations[i : i + T])) != 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given a long corridor on which there are N rooms in a single row. Each room has a distinct door number from 1 to N. A cat starts at the door of the first room and continues to visit each door sequentially until it reaches the door of the N-th room. Along the way, it marks each door with a number starting from 1 up to N. After the cat finishes marking all the doors, the cat rests. Meanwhile, a mouse begins to enter the corridor from the other side, starting from the door of the N-th room and visiting each door sequentially back to the first room. When the mouse visits a door, it reads the number marked on that door by the cat. Given the number of doors N, determine the number assigned by the cat on the door when the mouse visits the X-th door from the beginning. -----Input----- - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains two integers N and X. -----Output----- For each test case, print the number that the mouse reads when visiting the X-th door from the beginning. -----Constraints----- - 1 ≤ T ≤ 10,000 - 1 ≤ N ≤ 100,000 - 1 ≤ X ≤ N -----Example Input----- 3 5 3 7 1 10 10 -----Example Output----- 3 7 1 -----Explanation----- In the first test case, the corridor has 5 doors. The cat marks the doors with numbers 1 to 5. The mouse starts at the 5th door and reads the number 5 first, then 4, then 3, and so on. When the mouse reaches the 3rd door from the beginning of its route, it reads the number 3. Therefore, the output is 3. In the second test case, the corridor has 7 doors. The mouse starts at the 7th door and reads the number 7 first. Therefore, the output is 7. In the third test case, the corridor has 10 doors. The mouse reads the 10th door from the beginning of its route, which means it reads the number 1, making the output 1.","solution":"def find_marked_number(N, X): Function to determine the number marked by the cat on the door when the mouse visits the X-th door counting from the first. Parameters: N (int): The total number of doors X (int): The X-th door from the beginning Returns: int: The number marked on the X-th door return X def solve(test_cases): This function accepts a list of test cases and provides the result for each test case. Parameters: test_cases (list): List of tuples containing N and X for each test case Returns: list: List of results for each test case results = [] for N, X in test_cases: results.append(find_marked_number(N, X)) return results"},{"question":"Palindrome Permutation A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization. A permutation is a rearrangement of letters. The task is to check if a string is a permutation of a palindrome. For example, the string \\"Tact Coa\\" can be rearranged to form \\"taco cat\\", which is a palindrome. You are to develop a code that accepts a string and checks if any permutation of the string can form a palindrome. Input First line consists of a string (case insensitive and may contain spaces or punctuation). Output Display \\"YES\\" if any permutation of the string can form a palindrome, otherwise display \\"NO\\". Example Input: Tact Coa Output: YES Input: Hello World Output: NO","solution":"def can_permute_palindrome(s): Check if any permutation of the input string can form a palindrome. from collections import Counter import string # Remove spaces and convert string to lower case sanitized = \'\'.join([char.lower() for char in s if char in string.ascii_letters]) # Count the frequency of each character char_count = Counter(sanitized) # Count how many characters have odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Write a function that takes a list of space-separated integers and returns the number of pairs (i, j) such that the integers at those indices in the list are coprime (the greatest common divisor (GCD) of the integers is 1). ------ Input ------ The first line of input contains an integer N – the length of the list. The second line contains N space-separated integers. ------ Output ------ Output a single integer - the number of coprime pairs (i, j) where 1 ≤ i < j ≤ N. ------ Constraints ------ 1 ≤ N ≤ 5000 1 ≤ All integers in the list ≤ 10^6 ------ Sample Input 1 ------ 4 1 2 3 4 ------ Sample Output 1 ------ 5 ------ Sample Input 2 ------ 3 2 4 6 ------ Sample Output 2 ------ 0","solution":"from math import gcd from itertools import combinations def count_coprime_pairs(arr): Returns the number of coprime pairs in the given list of integers. count = 0 for i, j in combinations(range(len(arr)), 2): if gcd(arr[i], arr[j]) == 1: count += 1 return count def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:])) print(count_coprime_pairs(arr)) if __name__ == \\"__main__\\": main()"},{"question":"Write a function called `encodeString` that takes a string as input and returns an encoded version of the string. The encoding rule is as follows: for each group of consecutive repeating characters in the input string, replace the group with the character followed by the count of characters in the group. If a character appears only once consecutively, do not include the count. For example: ``` encodeString(\\"aaaabbbccdaa\\") → \\"a4b3c2da2\\" encodeString(\\"abcd\\") → \\"abcd\\" encodeString(\\"aabbcc\\") → \\"a2b2c2\\" encodeString(\\"a\\") → \\"a\\" ```","solution":"def encodeString(s): Encodes the input string by replacing consecutive repeating characters with the character followed by its count. If a character appears only once, the count is not included. if not s: return \\"\\" encoded_string = \\"\\" count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: encoded_string += s[i - 1] + (str(count) if count > 1 else \\"\\") count = 1 # Handle the last group of characters encoded_string += s[-1] + (str(count) if count > 1 else \\"\\") return encoded_string"},{"question":"Given an integer array `arr` of size `n`, write a function `findPairs` that returns the number of distinct pairs `(i, j)` (i < j), where `arr[i] + arr[j]` is an even number. Example 1: Input: arr = [2, 4, 6, 8] Output: 6 Explanation: All the pairs (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3) have even sums. Example 2: Input: arr = [1, 3, 5, 7] Output: 6 Explanation: All the pairs (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3) have even sums. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findPairs` which takes the array `arr` and its length `n` as inputs and returns the number of valid pairs. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"from typing import List def findPairs(arr: List[int], n: int) -> int: Returns the number of distinct pairs (i, j) where arr[i] + arr[j] is an even number and i < j. # Count the number of even and odd elements even_count = sum(1 for x in arr if x % 2 == 0) odd_count = n - even_count # Calculate the number of valid pairs even_pairs = (even_count * (even_count - 1)) // 2 odd_pairs = (odd_count * (odd_count - 1)) // 2 return even_pairs + odd_pairs"},{"question":"Maria is thrilled about the upcoming programming competition. To prepare, she practices solving various algorithmic problems every day. She has discovered a new kind of sequence, which she calls a \\"mirrored sequence.\\" A mirrored sequence has the following properties: - It consists of pairs `(a, b)` where `a` and `b` are positive integers. - Each pair `(a, b)` in the sequence must satisfy `a = b * k` for some integer `k`. - The sequence must be in non-decreasing order with respect to the `(a, b)` pairs. Given an integer `n`, Maria wants to generate the `n`th mirrored sequence, parameterizing it by starting with the smallest possible pair `(1, 1)`. The sequence expands by increasing the second element `b`, ensuring `a` remains a multiple of `b` to form valid additional pairs. -----Input----- The input contains multiple test cases. The first line contains an integer `t` (`1 le t le 10`), the number of test cases. Each of the following `t` lines contains a single integer `n` (`1 le n le 1000`), which indicates the length of the mirrored sequence that Maria needs to generate. -----Output----- For each test case, output exactly `n` pairs `(a_i, b_i)` that form the `n`th mirrored sequence in non-decreasing order. -----Example----- Input 2 3 4 Output 1 1 2 1 3 1 1 1 2 1 2 2 3 1 (Note: The order in which pairs are presented in each test case is critical - the list should be in non-decreasing order according to the sequence of pairs.) -----Note----- For the first example with `n = 3`, the sequence is: (1, 1), (2, 1), (3, 1). For the second example with `n = 4`, the sequence is: (1, 1), (2, 1), (2, 2), (3, 1).","solution":"def generate_mirrored_sequence(n): sequence = [] for b in range(1, n + 1): a = b k = 1 while len(sequence) < n: sequence.append((a, b)) a += b return sequence[:n] def solve_mirrored_sequences(test_cases): results = [] for n in test_cases: results.append(generate_mirrored_sequence(n)) return results"},{"question":"Given a string, determine if it is an anagram of a palindrome. An anagram of a palindrome is a string that can be rearranged to form a palindrome. Example 1: Input: s = \\"carrace\\" Output: Yes Explanation: \\"carrace\\" can be rearranged to form \\"racecar\\", which is a palindrome. Example 2: Input: s = \\"hello\\" Output: No Explanation: \\"hello\\" cannot be rearranged to form a palindrome. Your Task: You don\'t need to read or print anything. Your task is to complete the function is_anagram_of_palindrome() which takes the string as input parameter and returns \\"Yes\\" if it is an anagram of a palindrome otherwise returns \\"No\\" (Without quotes). Expected Time Complexity: O(n) Expected Space Complexity: O(1) where n is the length of the string. Constraints: 1 <= s.length <= 100","solution":"def is_anagram_of_palindrome(s): Determines if the given string is an anagram of a palindrome. Args: s (str): The input string. Returns: str: \\"Yes\\" if the string can be rearranged to form a palindrome, otherwise \\"No\\". from collections import Counter char_count = Counter(s) odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return \\"No\\" return \\"Yes\\""},{"question":"Given a class of M students, each student has a unique roll number from 1 to M. The teacher wants to create study groups for a project. Each group must have exactly N students, and each student must belong to exactly one group. If M is not a multiple of N, the teacher will not be able to form groups as required and will declare the formation of groups as impossible. Write a program that determines whether it\'s possible to form the required groups and, if possible, outputs the number of groups that will be formed. If it is not possible, the program should indicate that as well. Input: The first line contains an integer T, the number of test cases. Each test case consists of a single line with two integers M and N. Output: For each test case, output \\"IMPOSSIBLE\\" if groups cannot be formed as specified, otherwise output the number of groups. Constraints: 1 ≤ T ≤ 1000 1 ≤ M ≤ 10^9 1 ≤ N ≤ 10^6 SAMPLE INPUT 3 25 5 18 4 15 3 SAMPLE OUTPUT 5 IMPOSSIBLE 5 Explanation: 1st Test Case: The number of students is 25, and each group must have 5 students. Since 25 is divisible by 5, it is possible to form 5 groups each consisting of 5 students. 2nd Test Case: The number of students is 18, and each group must have 4 students. Since 18 is not divisible by 4, it is impossible to form groups as required. 3rd Test Case: The number of students is 15, and each group must have 3 students. Since 15 is divisible by 3, it is possible to form 5 groups each consisting of 3 students.","solution":"def form_groups(t, test_cases): results = [] for m, n in test_cases: if m % n == 0: results.append(str(m // n)) else: results.append(\\"IMPOSSIBLE\\") return results"},{"question":"Given an array of integers, determine the next lexicographical permutation of the array. The lexicographical permutation of an array is the next possible permutation that is greater than the current permutation, using the same set of integers. If no such permutation exists (array is sorted in descending order), return the smallest permutation (sorted in ascending order). # Input: - The first line contains an integer T, the number of test cases. - Each test case contains two lines of input: - First, an integer N representing the size of the array. - Second, N space-separated integers forming the array. # Output: For each test case, output a single line containing the next lexicographical permutation of the array. If no such permutation exists, output the smallest permutation. # Constraints: - 1 leq T leq 10 - 1 leq N leq 10^4 - 1 leq arr[i] leq 10^5 # Sample Input: 2 3 1 2 3 3 3 2 1 # Sample Output: 1 3 2 1 2 3","solution":"def next_permutation(a): Modifies the list a to its next lexicographical permutation. If no such permutation exists, modifies to the smallest permutation. n = len(a) i = n - 2 while i >= 0 and a[i] >= a[i + 1]: i -= 1 if i == -1: a.reverse() return j = n - 1 while a[j] <= a[i]: j -= 1 a[i], a[j] = a[j], a[i] a[i + 1:] = reversed(a[i + 1:]) return def process_permutations(test_cases): result = [] for case in test_cases: n, arr = case next_permutation(arr) result.append(arr) return result"},{"question":"You are given two strings, `s1` and `s2`. You need to determine if the second string `s2` can be made by rearranging the characters of the first string `s1` and removing exactly one character. Input The input consists of two lines: - The first line contains the string `s1` (1 ≤ |s1| ≤ 1000). - The second line contains the string `s2` (1 ≤ |s2| ≤ 999). Output Print \\"YES\\" if you can rearrange the characters of `s1` and remove exactly one character to get `s2`. Print \\"NO\\" otherwise. Examples Input example exaple Output YES Input coding odngci Output NO Note In the first example, you can rearrange the characters of `example` to form `exaple` by removing the character \'m\'. In the second example, `coding` cannot be rearranged to form `odngci` (even by removing any one character).","solution":"def can_form_by_rearranging(s1, s2): Determines if s2 can be formed by rearranging the characters of s1 and removing exactly one character. Parameters: s1 (str): The source string. s2 (str): The target string. Returns: str: \\"YES\\" if possible, otherwise \\"NO\\". # If the length of s2 is not one less than the length of s1, return \\"NO\\" if len(s1) - 1 != len(s2): return \\"NO\\" # Create character count dictionaries for both strings from collections import Counter s1_counter = Counter(s1) s2_counter = Counter(s2) # Check if s2_counter matches s1_counter except for exactly one character for char in s2_counter: if s2_counter[char] > s1_counter[char]: return \\"NO\\" return \\"YES\\""},{"question":"Alex has a game where he can place dominos on a rectangular grid. Each domino covers two adjacent cells on the grid, either vertically or horizontally. Given the grid dimensions, Alex wants to know the maximum number of dominos that can be placed on the grid without overlapping. Input The input consists of a single line containing two integers n and m (1 ≤ n, m ≤ 16) — the dimensions of the grid. Output Print a single integer — the maximum number of dominos that can be placed on the grid without overlapping. Examples Input 2 3 Output 3 Input 3 3 Output 4 Input 2 2 Output 2","solution":"def max_dominos(n, m): Calculate the maximum number of dominos that can be placed on an n x m grid. Each domino covers two adjacent cells. return (n * m) // 2"},{"question":"In a network of computers, some nodes can communicate directly with others. A message needs to be passed from the source node to the destination node through direct or indirect connections. Given the list of direct connections, determine if the message can be delivered from the source node to the destination node. Input Format The first line contains two integers N and M, the number of nodes and the number of direct connections respectively. The next M lines each contain two integers u and v, representing a direct connection between node u and node v. The last line contains two integers S and D, the source node and the destination node. Output Format Print \\"YES\\" if the message can be delivered from the source node to the destination node, otherwise print \\"NO\\". Constraints 1 ≤ N ≤ 1000 0 ≤ M ≤ 5000 1 ≤ u, v, S, D ≤ N SAMPLE INPUT 6 5 1 2 2 3 3 4 5 6 4 5 1 6 SAMPLE OUTPUT YES Explanation There is a path 1 -> 2 -> 3 -> 4 -> 5 -> 6 allowing the message to be delivered from node 1 to node 6.","solution":"def can_deliver_message(n, m, connections, s, d): from collections import defaultdict, deque graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # because it is an undirected connection visited = set() queue = deque([s]) while queue: current = queue.popleft() if current == d: return \\"YES\\" if current not in visited: visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return \\"NO\\""},{"question":"Given a list of integers, your task is to return the maximum sum of any non-empty subarray. For example: ```Haskell solve([1, -2, 3, 4, -5, 8]) = 10 because the subarray [3, 4, -5, 8] has the maximum sum of 10. solve([-3, -4, -1, -2, -1]) = -1 because the subarray [-1] has the maximum sum of -1. Consider the case where the list has all negative numbers or a single element. ``` More examples in the test cases. Good luck!","solution":"def solve(arr): Returns the maximum sum of any non-empty subarray. current_max = arr[0] global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"A city infrastructure consists of a series of one-way roads connecting various points of interest (POI). Each road has a certain travel time associated with it. Given a list of roads and their respective travel times, your task is to determine whether there is a way for a traveler to start at a given POI, visit all other POIs, and return to the start POI in such a way that the total travel time is less than or equal to a given threshold. This path must visit each POI exactly once before returning to the start. Input The first line contains two integers n and m (2 ≤ n ≤ 20, 1 ≤ m ≤ 50) — the number of POIs and the number of roads. Each of the next m lines contains three integers xi, yi, ti (1 ≤ xi, yi ≤ n, xi ≠ yi, 1 ≤ ti ≤ 100), where xi is the starting POI, yi is the ending POI, and ti is the travel time of the i-th road. There may be multiple roads between the same pair of POIs, but all roads are one-way. The last line contains two integers s and T (1 ≤ s ≤ n, 1 ≤ T ≤ 1000) — the starting POI and the maximum allowable total travel time, respectively. Output Print \\"POSSIBLE\\" if such a path exists, otherwise print \\"IMPOSSIBLE\\". Examples Input 4 5 1 2 10 2 3 20 3 4 30 4 1 40 1 3 15 1 100 Output POSSIBLE Input 3 3 1 2 10 2 3 20 3 1 30 1 50 Output IMPOSSIBLE","solution":"import itertools def is_possible_to_travel(n, m, roads, s, T): Returns \\"POSSIBLE\\" if there is a path that visits all POIs exactly once and returns to the start POI within the allowed travel time and otherwise returns \\"IMPOSSIBLE\\". graph = {i: [] for i in range(1, n + 1)} for xi, yi, ti in roads: graph[xi].append((yi, ti)) def dfs(path, current, cost): if len(path) == n: # Check if we can return to the starting point for dest, travel_time in graph[current]: if dest == s: if cost + travel_time <= T: return True return False for dest, travel_time in graph[current]: if dest not in path and cost + travel_time <= T: if dfs(path + [dest], dest, cost + travel_time): return True return False return \\"POSSIBLE\\" if dfs([s], s, 0) else \\"IMPOSSIBLE\\" # Example usage roads1 = [ (1, 2, 10), (2, 3, 20), (3, 4, 30), (4, 1, 40), (1, 3, 15) ] print(is_possible_to_travel(4, 5, roads1, 1, 100)) # Output: \\"POSSIBLE\\" roads2 = [ (1, 2, 10), (2, 3, 20), (3, 1, 30) ] print(is_possible_to_travel(3, 3, roads2, 1, 50)) # Output: \\"IMPOSSIBLE\\""},{"question":"You\'re developing a score tracking system for a competitive programming platform. Each contestant\'s score for a single contest is calculated based on their time to solve all problems and the number of problems they solved correctly. The system needs to handle multiple contestants and determine the winner based on the highest number of problems solved. In case of a tie, the contestant with the least total time spent wins. You are supplied with a list of contestants where each contestant is represented by a tuple (name, solved_problems, total_time). Implement a function that, given this list, returns the name of the winning contestant. Example: ```Given: contestants = [(\\"Alice\\", 4, 130), (\\"Bob\\", 4, 120), (\\"Charlie\\", 3, 150)] ``` ```Return: \\"Bob\\" ``` In this example: - Alice and Bob have solved 4 problems, but Bob has the least total time (120 vs 130), so Bob is the winner. - Charlie solved fewer problems than Alice and Bob, so Charlie is not considered even though he has the second least total time.","solution":"def determine_winner(contestants): Determines the winner from a list of contestants. Args: contestants (list of tuple): A list where each tuple contains the name of the contestant (str), the number of problems solved (int), and the total time spent (int). Returns: str: The name of the winning contestant. # Sort the contestants primarily by solved problems in descending order, # and then by total time in ascending order sorted_contestants = sorted(contestants, key=lambda x: (-x[1], x[2])) # The first contestant in the sorted list is the winner return sorted_contestants[0][0]"},{"question":"Given an integer array of positive integers, write a function to return an integer that appears the least number of times, but is greater than 1 (if any exists). If all numbers are unique or if no such number exists, return -1. -----Input----- The input consists of an array of integers. Each integer in the array lies in the range [1, 1000]. -----Output----- Return the integer that appears the least number of times and is greater than 1. If there are multiple such integers, return the smallest one. If no number greater than 1 repeats, return -1. -----Examples----- Input [4, 5, 2, 4, 3, 2, 6, 5, 2] Output 4 Input [1, 2, 3, 4, 5] Output -1 Input [2, 2, 3, 3, 4, 4] Output 2 -----Note----- In the first example, the number 2 appears three times, 4 appears twice, while 5 and 6 appear only once. Hence, 4 is the required output as it has the least occurrences among numbers appearing more than once. In the second example, all numbers are unique or appear just once, thus the output is -1. In the third example, the numbers 2, 3, and 4 each appear twice, but 2 is the smallest among them. Hence the output is 2.","solution":"def least_repeating_number(arr): from collections import Counter # Count the frequency of each number in the array freq = Counter(arr) # Filter out elements that are greater than 1 and appear more than once repeating_numbers = {num: count for num, count in freq.items() if num > 1 and count > 1} if not repeating_numbers: return -1 # Find the number with the least frequency least_count = min(repeating_numbers.values()) candidates = [num for num, count in repeating_numbers.items() if count == least_count] # Return the smallest number among the candidates return min(candidates) if candidates else -1"},{"question":"There are N rock towers in a landscape, and each tower has an initial height of 1. You are required to perform M operations to increase the height of specific towers. Each operation is described by three integers L, R, and H, which means you should increase the height of all towers between the indices L and R inclusive, by H units. Once all operations are performed, you need to determine the maximum height among all the towers. -----Input:----- - The first line contains two integers N and M, the number of towers and the number of operations, respectively. - The next M lines each contain three integers L, R, and H, describing an operation. -----Output:----- Output a single integer, the maximum height among all the towers after performing all the operations. -----Constraints----- - 1 leq N leq 10^6 - 1 leq M leq 100,000 - 1 leq L leq R leq N - 1 leq H leq 10^4 -----Sample Input:----- 5 3 1 3 2 2 4 3 1 5 1 -----Sample Output:----- 6 -----EXPLANATION:----- Initially, all towers have a height of 1. After the first operation, the heights of the towers become [3, 3, 3, 1, 1]. After the second operation, the heights of the towers become [3, 6, 6, 4, 1]. After the third operation, the heights of the towers become [4, 7, 7, 5, 2]. Thus, the maximum height is 7.","solution":"def find_max_height(N, M, operations): # Initialize the heights of all towers heights = [1] * N # Process each operation for L, R, H in operations: for i in range(L-1, R): heights[i] += H # Return the maximum height after all operations return max(heights)"},{"question":"You are given a list of integers representing the heights of buildings on a street, from left to right. You are tasked with determining how many buildings receive direct sunlight given that the sunlight comes from the left. A building receives direct sunlight if there are no taller buildings to its left. Write a function `buildings_receiving_sunlight` that takes a list of integers as input where each integer represents the height of a building. The function should return the number of buildings that receive direct sunlight. Input: - A single list of integers, heights, where each integer represents the height of a building. Output: - An integer representing the number of buildings that receive direct sunlight. Function Signature: ```python def buildings_receiving_sunlight(heights: List[int]) -> int: ``` Examples: Input: ```python [3, 5, 4, 4, 7, 6, 8, 2, 9] ``` Output: ```python 5 ``` Explanation: The buildings with heights [3, 5, 7, 8, 9] receive direct sunlight because there are no taller buildings to their left blocking the sunlight. Input: ```python [10, 6, 9, 8] ``` Output: ```python 1 ``` Explanation: Only the first building with a height of 10 receives direct sunlight because the other buildings have taller or equally tall buildings to their left. Constraints: - 1 ≤ len(heights) ≤ 10^4 - 1 ≤ heights[i] ≤ 10^5","solution":"from typing import List def buildings_receiving_sunlight(heights: List[int]) -> int: if not heights: return 0 count = 1 max_height = heights[0] for height in heights[1:]: if height > max_height: count += 1 max_height = height return count"},{"question":"In a futuristic city, there are N buildings aligned in a row, each with a height denoted by an integer H_i (1 leq H_i leq 10^9). The city has a unique tradition of hosting an annual light show where lasers are projected between buildings. However, due to the high density of buildings, certain lasers can get obstructed by taller buildings placed between them. A laser projected from building i to building j (i < j) is only successful if no building between i and j has a height greater than either H_i or H_j. Given the heights of the buildings, determine the maximum number of successful lasers that can be projected in this city. -----Input----- The first line of input contains the integer N (1 leq N leq 10^5), representing the number of buildings. The second line contains N integers H_1, H_2, ..., H_N (1 leq H_i leq 10^9), representing the heights of the buildings. -----Output----- The first and only line of output must contain the maximum number of successful lasers that can be projected. -----Examples----- Sample Input 1: 4 3 1 4 2 Sample Output 1: 4 Sample Input 2: 5 2 5 3 4 1 Sample Output 2: 6","solution":"def count_successful_lasers(N, heights): Calculate the number of successful lasers that can be projected between buildings. Parameters: N : int The number of buildings. heights : List[int] List of integers representing the heights of the buildings. Returns: int The maximum number of successful lasers. successful_lasers = 0 for i in range(N): for j in range(i + 1, N): if all(heights[k] <= max(heights[i], heights[j]) for k in range(i + 1, j)): successful_lasers += 1 return successful_lasers"},{"question":"In a forest, a group of frogs is trying to cross a river. The river has several stones, and each frog can jump a maximum distance determined by its strength. Given the strengths of the frogs and the positions of the stones in the river, find out if it is possible for each frog to reach the other side of the river. If all frogs can cross the river, return \'Yes\'. Otherwise, return \'No\'. You are given an array representing the positions of the stones in the river and an array representing the jump strengths of the frogs. Your task is to determine if it\'s possible for all frogs to cross the river. Function Description Complete the function canFrogsCross in the editor below. canFrogsCross has the following parameters: int[] stones: an array of integers representing the positions of the stones in the river int[] strengths: an array of integers representing the jump strengths of the frogs Returns string: \'Yes\' if all frogs can cross the river, \'No\' otherwise Input Format The first line contains an integer n, the number of stones. The second line contains n space-separated integers representing the positions of the stones. The third line contains an integer m, the number of frogs. The fourth line contains m space-separated integers representing the jump strengths of the frogs. Constraints 1 ≤ n ≤ 10^5 1 ≤ stones[i] ≤ 10^9 (0 is the starting point) 1 ≤ m ≤ 10^5 1 ≤ strengths[i] ≤ 10^9 Sample Input 0 5 1 3 5 7 9 3 2 4 10 Sample Output 0 Yes Explanation 0 The stones are at positions [1, 3, 5, 7, 9]. The frogs\' strengths are [2, 4, 10]. The frog with strength 2 can jump from 0 -> 1 -> 3 -> 5 -> 7 -> 9. The frog with strength 4 can jump from 0 -> 3 -> 7 -> 9. The frog with strength 10 can directly jump from 0 -> 9. Since all frogs can cross the river, the output is \'Yes\'. Sample Input 1 5 2 5 6 8 12 3 3 2 7 Sample Output 1 No Explanation 1 The stones are at positions [2, 5, 6, 8, 12]. The frogs\' strengths are [3, 2, 7]. The frog with strength 3 can jump from 0 -> 2 -> 5 -> 8 or 0 -> 2 -> 5 -> 8 -> 12. The frog with strength 7 can jump from 0 -> 6 or 0 -> 6 -> 12. However, the frog with strength 2 cannot jump from stone 0 to 2 or from 5 to 6 (since the maximum jump is 2). Hence, not all frogs can cross the river, the output is \'No\'.","solution":"def canFrogsCross(stones, strengths): if not stones: return \'No\' max_stone = stones[-1] for strength in strengths: position = 0 for stone in stones: if stone - position <= strength: position = stone if position == max_stone: break if position != max_stone: return \'No\' return \'Yes\'"},{"question":"Tom is a software engineer who loves working with arrays. One day, he came across a problem while working on a project. He has an array of integers and he needs to find out if the array contains a \\"mirror pair\\". A mirror pair in an array is defined as two different numbers whose concatenation in both orders result in the same two-digit number being formed both forward and backward. For example, in the array [12, 21, 22, 23], there is a mirror pair (12, 21) because 12 concatenated with 21 gives 1221, and 21 concatenated with 12 gives 2112. Tom needs your help to check all the arrays he provides. For each array, print \\"MIRROR PAIR\\" if there exists at least one mirror pair, otherwise print \\"NO MIRROR PAIR\\". -----Input:----- - The first line will contain an integer T which is the number of test cases. - For each test case, the first line contains an integer n which represents the number of elements in the array. - The next line contains n integers representing the array elements. -----Output:----- For each test case, print \\"MIRROR PAIR\\" if the array contains at least one mirror pair, otherwise print \\"NO MIRROR PAIR\\". -----Constraints----- - 1 leq T leq 10 - 2 leq n leq 100 - 10 leq Array elements leq 99 -----Sample Input:----- 3 4 12 21 22 23 5 34 43 56 65 78 3 11 22 33 -----Sample Output:----- MIRROR PAIR MIRROR PAIR NO MIRROR PAIR -----Explanation:----- For test case 1 --> The array [12, 21, 22, 23] contains a mirror pair (12, 21) because 1221 and 2112 are mirrored. For test case 2 --> The array [34, 43, 56, 65, 78] contains a mirror pair (34, 43) because 3443 and 4334 are mirrored. For test case 3 --> The array [11, 22, 33] does not contain any mirror pairs.","solution":"def contains_mirror_pair(arr): Function to check if the array contains at least one mirror pair Parameters: arr (list): List of integers Returns: str: \\"MIRROR PAIR\\" if the array contains at least one mirror pair, otherwise \\"NO MIRROR PAIR\\" string_numbers = [str(num) for num in arr] for i in range(len(string_numbers)): for j in range(i + 1, len(string_numbers)): if string_numbers[i] == string_numbers[j][::-1]: return \\"MIRROR PAIR\\" return \\"NO MIRROR PAIR\\" def process_test_cases(T, test_cases): Processes multiple test cases to check for mirror pairs Parameters: T (int): Number of test cases test_cases (list): List of test cases where each test case is a list of integers Returns: list: List of results for each test case results = [] for case in test_cases: results.append(contains_mirror_pair(case)) return results"},{"question":"Given two integers A and B. Your task is to calculate the greatest common divisor (GCD) of the two numbers and return it. Example 1: Input: A = 48, B = 18 Output: 6 Example 2: Input: A = 101, B = 103 Output: 1 Your Task: You don\'t need to read input or print anything. Your task is to complete the function findGCD() which takes two integers A and B and returns their GCD. Expected Time Complexity: O(log(min(A, B))) Expected Auxiliary Space: O(1) Constraints: 1 <= A, B <= 10^9","solution":"def findGCD(A, B): Returns the Greatest Common Divisor (GCD) of two integers A and B. while B: A, B = B, A % B return A"},{"question":"Sam is working on a pattern detection algorithm for DNA sequences. A DNA sequence is represented as a string consisting of the characters \'A\', \'C\', \'G\', and \'T\'. Sam\'s algorithm needs to identify the longest contiguous subsequence (substring) in which no character repeats. Write a function that takes a DNA sequence as input and returns the length of the longest contiguous subsequence with no repeated characters. Input Format A single string, mathrm{~S~}, representing a DNA sequence. Constraints 1 leq mid S mid leq 10^5 boldsymbol{mathrm{~S~}} consists of characters \'A\', \'C\', \'G\', and \'T\' only. Output Format Print a single integer denoting the length of the longest contiguous subsequence with no repeated characters. Sample Input 0 ACGTACGTAC Sample Output 0 4 Explanation 0 The longest contiguous subsequence without repeating characters is \\"ACGT\\", which has a length of 4. Sample Input 1 AAAAA Sample Output 1 1 Explanation 1 The longest contiguous subsequence without repeating characters is \\"A\\", which has a length of 1. Sample Input 2 ACACACGACC Sample Output 2 3 Explanation 2 The longest contiguous subsequence without repeating characters is \\"ACG\\", which has a length of 3.","solution":"def longest_unique_subsequence(S): Returns the length of the longest contiguous subsequence with no repeated characters. :param S: A string representing a DNA sequence :return: Length of the longest contiguous subsequence with no repeated characters n = len(S) if n == 0: return 0 char_index_map = {} max_length = 0 start_idx = 0 for i, char in enumerate(S): if char in char_index_map and char_index_map[char] >= start_idx: start_idx = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start_idx + 1) return max_length"},{"question":"Create a coded message by shifting each letter in a string a fixed number of places down the alphabet. For example, with a shift of 1, \'a\' becomes \'b\', \'b\' becomes \'c\', and so on, with \'z\' wrapping around to \'a\'. The function should retain the original case of each letter and leave non-letter characters unchanged. Write a function `caesar_cipher` that takes a string and a shift number as arguments and returns the encoded message. For example: - `caesar_cipher(\\"Hello, World!\\", 3)` returns `\\"Khoor, Zruog!\\"` - `caesar_cipher(\\"abc-xyz\\", 2)` returns `\\"cde-zab\\"` Assume that the shift number is a non-negative integer.","solution":"def caesar_cipher(text, shift): Encodes a message by shifting each letter a fixed number of places down the alphabet. Args: text (str): The original message string. shift (int): The fixed number of places to shift each letter. Returns: str: The encoded message. encoded_message = [] for char in text: if char.isalpha(): ascii_offset = ord(\'A\') if char.isupper() else ord(\'a\') encoded_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset) encoded_message.append(encoded_char) else: encoded_message.append(char) return \'\'.join(encoded_message)"},{"question":"You are working on a system that monitors spaceship cargo. Each spaceship can carry a certain number of distinct cargo items, each identified by a unique ID number. The cargo system monitors both incoming and outgoing ships, tracking several cargo parameters. In tracking the cargo, every ship is assigned a record that includes the total number of distinct cargo items it carries and the frequencies (count) of each item. To ensure the system is working correctly, you need to validate a series of cargo records for consistency. Specifically, for each record, you must verify that the count of each distinct cargo item adheres to a prescribed distribution: 1. The maximum number of distinct items in a ship is M. 2. Each distinct cargo item\'s count should be a Fibonacci number. 3. The sequence of Fibonacci numbers are defined as F_0 = 0, F_1 = 1 and F_{n} = F_{n-1} + F_{n-2} for n ge 2. Write a program to validate the cargo records and print \'YES\' if all cargo item counts in a record are valid Fibonacci numbers, and \'NO\' otherwise. -----Input----- The first line contains an integer T (1 le T le 100), the number of test cases. Each of the next T lines describes a test case: - The first value is an integer K (1 le K le M), the number of distinct cargo items. - The next K values are integers representing the counts of each distinct cargo item for that spaceship. -----Output----- For each test case, print \'YES\' if all counts of distinct cargo items are Fibonacci numbers, otherwise print \'NO\'. -----Examples----- Sample Input: 3 2 1 1 3 2 3 4 4 0 1 1 2 Sample Output: YES NO YES","solution":"def is_fibonacci(n, fib_set): Check if a number is in the precomputed set of Fibonacci numbers. return n in fib_set def generate_fibonacci_up_to(max_val): Generate all Fibonacci numbers up to a maximum value and return as a set. fib_set = set() a, b = 0, 1 while a <= max_val: fib_set.add(a) a, b = b, a + b return fib_set def validate_cargo_records(test_cases, max_val=10**9): Validates the cargo records against the Fibonacci numbers. fib_set = generate_fibonacci_up_to(max_val) results = [] for case in test_cases: K, *counts = case if all(is_fibonacci(count, fib_set) for count in counts): results.append(\'YES\') else: results.append(\'NO\') return results"},{"question":"Given an array of integers and a target sum, determine if any two distinct integers in the array add up to the target sum. If such a pair exists, return the indices of the two numbers as a list of two integers. If no such pair exists, return an empty list. Function Description Complete the findPair function in the editor below. findPair has the following parameters: List[int] arr: an array of integers int target: the target sum Returns List[int]: a list containing indices of the two numbers that add up to the target, or an empty list if no such pair exists Input Format The first line contains an integer, n, denoting the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. The third line contains an integer, target, which is the target sum. Constraints 2leq nleq10^4 -10^9leq arr[i]leq10^9 -10^9leq targetleq10^9 Sample Input 6 2 7 11 15 3 6 9 Sample Output [0, 1] Explanation In the sample input, the array contains the numbers [2, 7, 11, 15, 3, 6], and the target sum is 9. The pair of numbers 2 and 7 add up to 9, and their indices are 0 and 1, respectively.","solution":"def findPair(arr, target): Determines if any two distinct integers in the array add up to the target sum. Args: - arr (List[int]): an array of integers - target (int): the target sum Returns: - List[int]: a list containing indices of the two numbers that add up to the target, or an empty list if no such pair exists. num_to_index = {} for i, num in enumerate(arr): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"In a special chess game, each player has only one unique piece: a Guardian. The Guardian can move horizontally, vertically, or diagonally, and it can move any number of squares in such directions, just like a Queen in classic chess. However, a Guardian can \'capture\' another Guardian if and only if they are on the same row, column, or diagonal path, irrespective of any pieces in between. Given the positions of two Guardians on a standard 8x8 chessboard, determine if one can capture the other. Input The input consists of two lines with the positions of the two Guardians. Each position is a string of two characters where: - The first character is a letter from \'a\' to \'h\' representing the column. - The second character is a digit from \'1\' to \'8\' representing the row. Output Output \\"YES\\" if one Guardian can capture the other, otherwise \\"NO\\". Examples Input a1 h8 Output YES Input c3 d5 Output NO Input b2 b8 Output YES","solution":"def can_guardian_capture(pos1, pos2): Determines if one Guardian can capture the other based on their positions. Arguments: pos1 -- a string in the format of a letter (a-h) and a number (1-8) representing the position of the first Guardian. pos2 -- a string in the same format representing the position of the second Guardian. Returns: \\"YES\\" if one Guardian can capture the other, otherwise \\"NO\\". col1, row1 = pos1[0], int(pos1[1]) col2, row2 = pos2[0], int(pos2[1]) col_diff = abs(ord(col1) - ord(col2)) row_diff = abs(row1 - row2) if col1 == col2 or row1 == row2 or col_diff == row_diff: return \\"YES\\" return \\"NO\\""},{"question":"Write a function called `uniqueCharacters` that takes a string as input and returns the count of unique characters in the string. Rules for the `uniqueCharacters` function: 1. Ignore spaces in the string. 2. Character case should be ignored when determining uniqueness (i.e., \'A\' and \'a\' are considered the same). 3. Return an integer representing the number of unique characters. Example: ```python uniqueCharacters(\'Hello World\') -> 7 uniqueCharacters(\'Coding is fun!\') -> 10 ```","solution":"def uniqueCharacters(s): Returns the count of unique characters in the string, ignoring spaces and case sensitivity. s = s.replace(\\" \\", \\"\\").lower() return len(set(s))"},{"question":"Develop a library management system that helps to track books for a small library. Each library book is defined by a unique book ID, title, author, and number of copies available in the library. The system supports multiple operations: - Adding a new book to the library. - Removing a book from the library. - Borrowing a book (reduces the number of copies available by one). - Returning a borrowed book (increases the number of copies available by one). - Searching for a book by title (full or partial match). Your task is to implement this library management system, including the aforementioned operations. Each operation request is represented by an input command, and the different commands are detailed below. Input The input consists of a series of commands, followed by their necessary parameters. Each command is given on a single line, and the end of the input is indicated by the command \\"END\\". Here are the descriptions of the commands: - ADD book_id title author copies - Adds a new book to the library with the given `book_id`, `title`, `author`, and the number of `copies` available. - REMOVE book_id - Removes the book with the specified `book_id` from the library. - BORROW book_id - Borrows the book with the specified `book_id`, if at least one copy is available. - RETURN book_id - Returns a previously borrowed book with the specified `book_id`. - SEARCH title - Searches for books that contain the given `title` string (case-insensitive) and lists their `book_id`, `title`, `author`, and `copies` available. Output For each SEARCH command, output the matching books in the format: - [book_id] \\"title\\" by author - copies copies available If no books match the search criteria, output \\"No matches found\\". For the BORROW and RETURN commands, if no copies are available to borrow or the book ID does not exist, output \\"Cannot borrow book\\" or \\"Cannot return book\\" respectively. Example Input ADD 101 \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" 5 ADD 102 \\"To Kill a Mockingbird\\" \\"Harper Lee\\" 3 ADD 103 \\"1984\\" \\"George Orwell\\" 4 BORROW 101 BORROW 102 RETURN 102 SEARCH \\"Mockingbird\\" REMOVE 103 SEARCH \\"1984\\" END Output No matches found 103 \\"1984\\" by George Orwell - 4 copies available","solution":"import re class LibraryManagementSystem: def __init__(self): self.books = {} def add_book(self, book_id, title, author, copies): self.books[book_id] = { \'title\': title, \'author\': author, \'copies\': copies } def remove_book(self, book_id): if book_id in self.books: del self.books[book_id] def borrow_book(self, book_id): if book_id in self.books and self.books[book_id][\'copies\'] > 0: self.books[book_id][\'copies\'] -= 1 else: print(\\"Cannot borrow book\\") def return_book(self, book_id): if book_id in self.books: self.books[book_id][\'copies\'] += 1 else: print(\\"Cannot return book\\") def search_books(self, title): matched_books = [] for book_id, book in self.books.items(): if re.search(title.lower(), book[\'title\'].lower()): matched_books.append( (book_id, book[\'title\'], book[\'author\'], book[\'copies\']) ) return matched_books def process_commands(self, commands): for command in commands: parts = command.split(\' \', 1) action = parts[0] if action == \'END\': break if action == \'ADD\': args = parts[1].split(\' \', 3) book_id = int(args[0]) title = args[1].strip(\'\\"\') author = args[2].strip(\'\\"\') copies = int(args[3]) self.add_book(book_id, title, author, copies) elif action == \'REMOVE\': book_id = int(parts[1]) self.remove_book(book_id) elif action == \'BORROW\': book_id = int(parts[1]) self.borrow_book(book_id) elif action == \'RETURN\': book_id = int(parts[1]) self.return_book(book_id) elif action == \'SEARCH\': title = parts[1].strip(\'\\"\') results = self.search_books(title) if results: for book in results: print(f\\"{book[0]} \\"{book[1]}\\" by {book[2]} - {book[3]} copies available\\") else: print(\\"No matches found\\")"},{"question":"Given an array of integers representing the lengths of different ropes, your task is to connect the ropes into one single rope. The cost of connecting two ropes is equal to the sum of their lengths. You need to calculate the minimum cost to connect all the ropes into one single rope. Example 1: Input: ropes = [4, 3, 2, 6] Output: 29 Explanation: 1. Connect ropes 2 and 3 for a cost of 5. Ropes now = [4, 5, 6] 2. Connect ropes 4 and 5 for a cost of 9. Ropes now = [9, 6] 3. Connect ropes 9 and 6 for a cost of 15. Ropes now = [15] Total cost = 5 + 9 + 15 = 29 Example 2: Input: ropes = [1, 8, 3, 5] Output: 30 Constraints: - 1 <= ropes.length <= 100 - 1 <= ropes[i] <= 1000","solution":"import heapq def min_cost_to_connect_ropes(ropes): Calculate the minimum cost to connect all ropes into one single rope. Parameters: ropes (List[int]): A list of integers where each integer represents the length of a rope. Returns: int: Minimum cost to connect all ropes into one single rope. if len(ropes) == 1: return 0 # No cost if there is only one rope heapq.heapify(ropes) total_cost = 0 while len(ropes) > 1: first = heapq.heappop(ropes) second = heapq.heappop(ropes) cost = first + second total_cost += cost heapq.heappush(ropes, cost) return total_cost"},{"question":"Given an array of integers, return an array containing the length of the longest strictly increasing subsequences ending at each respective element of the input array. For example, if the input array is ```[1, 3, 2, 3, 4, 8, 7, 6]```, you need to return: ```[1, 2, 2, 3, 4, 5, 5, 5]```. For the input array ```[9, 8, 7, 6]```, you need to return: ```[1, 1, 1, 1]```. The algorithm should have a time complexity of O(n^2) or less. # Input An array of integers of size up to 1000, with values in the range ([-10^6, 10^6]). # Output An array of integers representing the lengths of the longest strictly increasing subsequences ending at each element of the input array. You need to implement a function named `find_subsequence_lengths`: ```python def find_subsequence_lengths(arr: List[int]) -> List[int]: pass ```","solution":"from typing import List def find_subsequence_lengths(arr: List[int]) -> List[int]: if not arr: return [] n = len(arr) lis_lengths = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: lis_lengths[i] = max(lis_lengths[i], lis_lengths[j] + 1) return lis_lengths"},{"question":"Given a list of integers `nums` and a list of queries `queries` where each query represents a pair `[L, R]`, return a boolean list indicating whether the subarray from index `L` to `R` (inclusive) forms an arithmetic sequence. An arithmetic sequence is a sequence of numbers such that the difference between any two consecutive elements is the same. Example 1: Input: nums = [4, 6, 5, 9, 3, 7], queries = [[0, 2], [2, 5], [0, 5]] Output: [true, true, false] Explanation: - The subarray from index 0 to 2 is [4, 6, 5], which can be rearranged to form the arithmetic sequence [4, 5, 6]. - The subarray from index 2 to 5 is [5, 9, 3, 7], which can be rearranged to form the arithmetic sequence [3, 5, 7, 9]. - The subarray from index 0 to 5 is [4, 6, 5, 9, 3, 7], which cannot be rearranged to form an arithmetic sequence. Example 2: Input: nums = [1, 2, 4, 5, 9], queries = [[0, 1], [1, 3], [2, 4]] Output: [true, true, false] Explanation: - The subarray from index 0 to 1 is [1, 2], which is already an arithmetic sequence. - The subarray from index 1 to 3 is [2, 4, 5], which cannot be rearranged to form an arithmetic sequence. - The subarray from index 2 to 4 is [4, 5, 9], which cannot be rearranged to form an arithmetic sequence. Constraints: 1 <= nums.length <= 500 -10^3 <= nums[i] <= 10^3 1 <= queries.length <= 500 queries[i].length == 2 0 <= queries[i][0] <= queries[i][1] < nums.length","solution":"def is_arithmetic_subarray(nums, queries): def is_arithmetic(arr): arr.sort() if len(arr) < 2: return True diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] != diff: return False return True result = [] for L, R in queries: subarray = nums[L:R+1] result.append(is_arithmetic(subarray)) return result"},{"question":"Alex enjoys jumping on logs placed in a straight line on the X-axis. Each log is placed at a unique position given by coordinates represented by an array. Alex can start at any log and can jump to another log only if the difference in their positions is exactly K. Alex wants to know the minimum number of jumps needed to move from the starting log `S` to the ending log `E`. If it is not possible to reach the ending log from the starting log, output -1. ------ Input Format ------ - The first line contains T - the number of test cases. Then the test cases follow. - The first line of each test case contains three space-separated integers N, S, and E - the number of logs, the position of the starting log, and the position of the ending log respectively. - The second line of each test case contains N space-separated integers representing the positions of the logs. - The third line of each test case contains a single integer K, the length of the jump. ------ Output Format ------ For each test case, output on a single line the minimum number of jumps needed to reach the ending log from the starting log. Output -1 if it is not possible. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{5} 1 ≤ S, E ≤ 10^{9} 1 ≤ K ≤ 10^{9} 1 ≤ text{positions of the logs} ≤ 10^{9} ----- Sample Input 1 ------ 1 5 1 9 1 3 5 7 9 2 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ - Test case 1: Alex can jump from 1 to 3, then from 3 to 5, then to 7, and finally to 9. Thus, he needs 4 jumps.","solution":"from collections import deque def minimum_jumps_to_reach_end_from_start(N, S, E, positions, K): Function to determine the minimum number of jumps required to move from starting log S to ending log E, or return -1 if it\'s not possible. if S == E: return 0 positions_set = set(positions) if S not in positions_set or E not in positions_set: return -1 queue = deque([(S, 0)]) visited = set([S]) while queue: current_position, jumps = queue.popleft() next_positions = [current_position + K, current_position - K] for next_pos in next_positions: if next_pos == E: return jumps + 1 if next_pos in positions_set and next_pos not in visited: queue.append((next_pos, jumps + 1)) visited.add(next_pos) return -1 def solve_multi_case(T, test_cases): results = [] for i in range(T): N, S, E = test_cases[i][0] positions = test_cases[i][1] K = test_cases[i][2] result = minimum_jumps_to_reach_end_from_start(N, S, E, positions, K) results.append(result) return results"},{"question":"There is an island that is populated by a single species of birds, characterized by unique sequences of chirps. Every day, the first bird that starts chirping sets off a chain reaction, causing all other birds to chirp in response. Each bird\'s chirping sequence is a permutation of the first bird\'s sequence, but with exactly one character missing. For example, if the first bird\'s chirp sequence is \\"abcd\\", other birds\' chirps will be one of \\"abc\\", \\"abd\\", \\"acd\\", or \\"bcd\\". You are given the chirp sequences of several birds, all of different lengths. Determine if all given chirp sequences could follow the described pattern. Particularly, you need to check if there is a sequence such that every other sequence is a permutation of it with one character missing. -----Task----- Given a list of chirp sequences, determine if they can be derived from one primary sequence with one character removed from each. -----Input----- The input consists of multiple lines: - The first line contains an integer n (1 leq n leq 1000), the number of chirp sequences. - The following n lines each contain a single chirp sequence, consisting of only lowercase letters a-z. Each sequence will have a length of at least 1 and at most 100 characters. -----Output----- Output a single line with \\"YES\\" if the chirp sequences meet the criteria, otherwise output \\"NO\\". -----Examples----- Sample Input 1: 3 abcd abc abd Sample Output 1: YES Sample Input 2: 4 abcd abc ab acd Sample Output 2: NO","solution":"from collections import Counter def can_form_chirp_sequences(chirp_sequences): # Finding the potential base sequence, the longest sequence in the list base_sequence = max(chirp_sequences, key=len) base_length = len(base_sequence) # Check each sequence is derivable from the base sequence for seq in chirp_sequences: if len(seq) == base_length: continue if len(seq) != base_length - 1: return \\"NO\\" base_count = Counter(base_sequence) seq_count = Counter(seq) difference = base_count - seq_count # The difference should be exactly one character if len(difference) != 1 or list(difference.values())[0] != 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array `arr` of `n` integers. Your task is to form the largest possible number by arranging the integers in the array. Each integer should be considered as a string for the purpose of comparison and concatenation. -----Input----- - The first line contains a single integer `n` (1 leq n leq 100) — the number of elements in the array. - The second line contains `n` integers separated by spaces, each integer `a_i` (0 leq a_i leq 10^6). -----Output----- - Print a single large integer which is the largest possible number that can be obtained by concatenating the integers in the array. -----Examples----- Input: 3 10 2 9 Output: 9210 Input: 4 54 546 548 60 Output: 6054854654 Input: 4 0 0 0 1 Output: 1000 -----Note----- - In the first example, by arranging `2`, `10`, and `9` as `9`, `2`, `1`, the largest possible concatenation is `9210`. - In the second example, the largest possible concatenation is `60`, `548`, `546`, `54` resulting in `6054854654`. - Considerations should be made for lexicographical comparison of strings to determine the optimal arrangement.","solution":"from functools import cmp_to_key def largest_number(arr): def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Sort the array with the custom comparator sorted_arr = sorted(map(str, arr), key=cmp_to_key(compare)) # Create the largest number by concatenating sorted array elements largest_num = \'\'.join(sorted_arr) # Handle the case when the result is multiple zeros if largest_num[0] == \'0\': return \'0\' else: return largest_num"},{"question":"Two friends, Alice and Bob, love playing a game with a sequence of integers. They take turns removing numbers from either end of the sequence. Alice always starts first. They want to maximize the sum of the numbers they collect. You are to determine the maximum sum Alice can collect if both play optimally. Given a sequence of integers, find the maximum sum Alice can achieve if she starts first and both play optimally. Input The first line contains an integer N (1 ≤ N ≤ 1000), the number of elements in the sequence. The second line contains N integers (each integer is between -10^4 and 10^4), the elements of the sequence. Output Print a single integer, the maximum sum Alice can collect. Example Input 4 1 2 9 -1 Output 10 Note In this example, Alice would take 1 first. Bob, playing optimally, would take 9. Alice would then take 2, and Bob would take −1. Alice\'s sum is 1 + 2 + 9 - 1 = 10.","solution":"def max_sum_alice_can_collect(nums): n = len(nums) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = nums[i] for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 dp[i][j] = max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-1]) total_sum = sum(nums) alice_sum = (total_sum + dp[0][n-1]) // 2 return alice_sum"},{"question":"Write a program that simulates the Fibonacci sequence and computes the sum of all even Fibonacci numbers that are less than or equal to a given number n. The Fibonacci sequence is defined as follows: F(0) = 0 F(1) = 1 F(n) = F(n-1) + F(n-2) text{ for } n geq 2 For example, if n = 10, the Fibonacci sequence up to 10 is 0, 1, 1, 2, 3, 5, 8 and the sum of the even Fibonacci numbers is 2 + 8 = 10. Your program should read several datasets, each consisting of a single integer n. The number of datasets is less than or equal to 20. For each dataset, print the sum of all even Fibonacci numbers less than or equal to n. # Input - The input consists of several datasets. Each dataset consists of a single integer n (1 leq n leq 10^6). # Output - For each dataset, print the sum of all even Fibonacci numbers less than or equal to n. # Example Input ``` 10 100 ``` Output ``` 10 44 ```","solution":"def sum_of_even_fibonacci(n): Computes the sum of all even Fibonacci numbers less than or equal to n. if n < 2: return 0 a, b = 0, 1 # Initial Fibonacci numbers even_sum = 0 while b <= n: if b % 2 == 0: even_sum += b a, b = b, a + b return even_sum def process_datasets(datasets): results = [] for n in datasets: results.append(sum_of_even_fibonacci(n)) return results"},{"question":"Sam has a collection of non-negative integers a_1, a_2, ldots, a_n. He can perform the following operation any number of times: select any two distinct indices i and j (1 leq i, j leq n) and replace both a_i and a_j with their bitwise AND (a_i & a_j). Sam wants to know whether he can make all the numbers in the collection equal to a given integer k after any number of such operations. Your task is to determine whether it is possible or not. -----Input----- The first line of the input contains a single integer t (1 leq t leq 100): the number of test cases. The first line of each test case contains two integers n (2 leq n leq 1000) and k (0 leq k leq 10^9). The second line contains n non-negative integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9). -----Output----- For each test case, print \\"yes\\" if it is possible to make all integers equal to k using the mentioned operations, otherwise print \\"no\\". -----Example----- Input 3 4 1 2 3 3 4 3 5 8 12 16 5 0 1 0 2 3 4 Output no no yes -----Note----- In the first test case, it\'s not possible to convert all elements to 1. In the second test case, it\'s also not possible to convert all elements to 5. In the third test case, by performing operations, all elements can eventually be turned to 0.","solution":"def can_make_equal_to_k(t, test_cases): results = [] for test_case in test_cases: n, k = test_case[0] array = test_case[1] if k in array: results.append(\\"yes\\") continue current_and = array[0] for num in array[1:]: current_and &= num if current_and == k: results.append(\\"yes\\") break else: results.append(\\"no\\") return results # Example usage: t = 3 test_cases = [ ((4, 1), [2, 3, 3, 4]), ((3, 5), [8, 12, 16]), ((5, 0), [1, 0, 2, 3, 4]) ] print(can_make_equal_to_k(t, test_cases))"},{"question":"Problem Statement Sophia is learning about bi-dimensional arrays and their applications in pattern recognition. One of the exercises involves identifying a specific pattern within a larger grid. Given a grid of characters, the pattern to be searched is the word \\"CODE\\". The pattern can be found horizontally, vertically, or diagonally (in any of the four diagonals). Your task is to write a program that takes as input several grids, and for each grid, determines if the pattern \\"CODE\\" can be found. Input The input consists of multiple datasets. The form of each dataset is described below. ``` M N grid[1][1] grid[1][2] ... grid[1][N] grid[2][1] grid[2][2] ... grid[2][N] ... grid[M][1] grid[M][2] ... grid[M][N] ``` The first line of each dataset contains two integers M (2 le M le 50) and N (2 le N le 50), denoting the number of rows and columns of the grid, respectively. Each of the following M lines contains N characters, which make up the grid. The end of input is indicated by a single `0 0`. This is not included in the datasets. Output For each dataset, output `FOUND` if the word \\"CODE\\" can be found in the grid, and `NOT FOUND` otherwise. Sample Input ``` 4 5 C X D E X O D X C C D X D G O E O C D E 3 3 X O D C X E D C O 0 0 ``` Output for the Sample Input ``` FOUND NOT FOUND ``` Example Input ``` 4 5 C X D E X O D X C C D X D G O E O C D E 3 3 X O D C X E D C O 0 0 ``` Output ``` FOUND NOT FOUND ```","solution":"def find_code(grid, M, N): rows = M cols = N word = \\"CODE\\" length = len(word) # Define the direction vectors for 8 possible directions directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] # Function to check if a word exists starting at a given position (x, y) in a given direction def search_from(x, y, dx, dy): for k in range(length): nx = x + k * dx ny = y + k * dy if 0 <= nx < rows and 0 <= ny < cols: if grid[nx][ny] != word[k]: return False else: return False return True # Start searching from each grid cell for i in range(rows): for j in range(cols): if grid[i][j] == word[0]: # Only start search if first letter matches for dx, dy in directions: if search_from(i, j, dx, dy): return \\"FOUND\\" return \\"NOT FOUND\\" def solve(input_data): results = [] grids = input_data.strip().split(\\"n\\") index = 0 while index < len(grids): M, N = map(int, grids[index].split()) if M == 0 and N == 0: break grid = [] for i in range(1, M + 1): grid.append(grids[index + i].split()) index += M + 1 result = find_code(grid, M, N) results.append(result) return \\"n\\".join(results)"},{"question":"You are given a matrix with `m` rows and `n` columns filled with integers. Your task is to transform the matrix such that all elements in row and column of any cell containing the value `0` are set to `0`. For example, consider the matrix: ``` [ [1, 2, 3], [4, 0, 6], [7, 8, 9] ] ``` After modification, the matrix will be: ``` [ [1, 0, 3], [0, 0, 0], [7, 0, 9] ] ``` Write a function: ```python def set_zeroes(matrix): # Your code here ``` # Input format - The function accepts a single argument: a list of lists representing the matrix. # Output format - Modify the input matrix in place. No return is necessary. # Constraints - 1 leq m, n leq 100 - -10^9 leq text{matrix[i][j]} leq 10^9 # Example ```python matrix = [ [0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5] ] set_zeroes(matrix) print(matrix) ``` Expected Output: ``` [ [0, 0, 0, 0], [0, 4, 5, 0], [0, 3, 1, 0] ] ``` # Note - Be cautious about in-place modifications while iterating through the matrix. - Consider using additional memory to keep track of the rows and columns that need modification for an efficient solution.","solution":"def set_zeroes(matrix): Modify the input matrix such that if an element is 0, its entire row and column are set to 0. m = len(matrix) n = len(matrix[0]) rows, cols = set(), set() # First pass: Identify rows and columns that need to be zeroed. for i in range(m): for j in range(n): if matrix[i][j] == 0: rows.add(i) cols.add(j) # Second pass: Set rows and columns to zero. for i in range(m): for j in range(n): if i in rows or j in cols: matrix[i][j] = 0"},{"question":"*You\'re given a sequence of brackets consisting of \'(\' and \')\' characters. A bracket sequence is considered valid if: 1. It is an empty sequence, or 2. It consists of two valid bracket sequences concatenated together, or 3. It consists of a valid bracket sequence enclosed in a pair of brackets. A special type of bracket sequences, called \\"Balanced-and-Interleaved\\" (BI), has the property that for any prefix of the sequence, the number of closing brackets \')\' is never greater than the number of opening brackets \'(\'. Your task is to find the length of the longest \\"Balanced-and-Interleaved\\" (BI) sequence that can be obtained by eliminating some of the characters from the input sequence. ------ Input Format ------ The first and only line contains a string s consisting of characters \'(\' and \')\'. ------ Output Format ------ Print a single integer, the length of the longest \\"Balanced-and-Interleaved\\" (BI) sequence. ------ Constraints ------ 1 leq |s| leq 10^6 ----- Sample Input 1 ------ (())))(()()) ----- Sample Output 1 ------ 10 ----- Explanation 1 ------ The longest BI sequence in this case is \'(())()(())\' which is obtained by removing the characters at index 4 and 11 from the input string.","solution":"def longest_bi_sequence(s): Returns the length of the longest \\"Balanced-and-Interleaved\\" (BI) sequence that can be obtained by eliminating some characters from the input sequence. stack = [] longest_bi = 0 current_length = 0 for char in s: if char == \'(\': stack.append(char) elif stack and stack[-1] == \'(\': stack.pop() current_length += 2 # we have a valid pair () if not stack: longest_bi = max(longest_bi, current_length) else: # This means we have unmatched ) if stack: # reset if stack is not empty since it means we have unbalanced part current_length = 0 stack = [] return longest_bi"},{"question":"You are given a list of strings. Each string represents a different product in a store, and each string contains the name of the product and its price, separated by a single space. Two products are considered the same if their names are identical, regardless of their prices. For each distinct product name, determine the highest price found among all occurrences of that product. Write a function that takes a list of such strings and returns a dictionary where the keys are the distinct product names and the values are the highest prices for those products. Example 1: Input: [\\"apple 4\\", \\"banana 2\\", \\"apple 5\\", \\"banana 3\\", \\"orange 6\\"] Output: {\\"apple\\": 5, \\"banana\\": 3, \\"orange\\": 6} Example 2: Input: [\\"shirt 30\\", \\"jeans 40\\", \\"shirt 25\\", \\"hat 15\\"] Output: {\\"shirt\\": 30, \\"jeans\\": 40, \\"hat\\": 15} Example 3: Input: [\\"milk 2\\", \\"bread 3\\", \\"milk 3\\", \\"bread 2\\"] Output: {\\"milk\\": 3, \\"bread\\": 3} Note: - All prices are positive integers. - Product names consist solely of alphabetical characters and are case-sensitive.","solution":"def highest_prices(products): Determines the highest price for each distinct product in the list. Parameters: products (list): A list of strings where each string is a product and its price, separated by a space. Returns: dict: A dictionary where keys are product names and values are the highest prices of those products. product_dict = {} for item in products: name, price = item.split() price = int(price) if name in product_dict: if product_dict[name] < price: product_dict[name] = price else: product_dict[name] = price return product_dict"},{"question":"You are working on a software to support remote file operations on a server. Your goal is to implement a simplified version of command to move files within the server\'s directory structure. The functionality you need to implement can be described as follows: Given a series of commands, your task is to determine the final structure of the directories after all commands have been executed. The working directory is represented as a series of nested directories where the path is separated by slashes. Each command is in one of the following forms: - `mkfile <path>`: Creates a file at the specified path. - `mkdir <path>`: Creates a directory at the specified path. - `mv <src_path> <dest_path>`: Moves a file or directory from source path to destination path. If creating a file or directory, all parent directories must already exist. If moving a file or directory, the destination path must be valid. -----Input----- The first line contains an integer m (1 le m le 100000), the number of commands to be executed. Each of the next m lines contains one command in one of the specified forms. All file and directory names are non-empty strings of alphanumeric characters. Directory and file names can be up to 100 characters long. -----Output----- Output the directory tree after all commands have been executed. Each directory and file should be listed in order of creation, such that directories are listed before their contents. The output format should use indentation to represent nested subdirectories, using one level of indentation per directory depth (using two spaces per level). -----Example----- Input 7 mkdir /home mkdir /home/user mkfile /home/user/file1.txt mkdir /home/user/docs mkfile /home/user/docs/file2.txt mv /home/user/file1.txt /home/user/docs/file1.txt mkfile /home/user/file3.txt Output /home /user /docs file1.txt file2.txt file3.txt -----Note----- In the example, the command `mv /home/user/file1.txt /home/user/docs/file1.txt` moves the file `file1.txt` within the `docs` directory.","solution":"class FileSystem: def __init__(self): self.structure = {} def parse_path(self, path): return path.strip(\\"/\\").split(\\"/\\") def get_node(self, path): keys = self.parse_path(path) node = self.structure for key in keys: if key in node: node = node[key] else: return None return node def create_node(self, path, is_dir=True): keys = self.parse_path(path) node = self.structure for key in keys: if key not in node: if is_dir: node[key] = {} else: node[key] = None node = node[key] return node def remove_node(self, path): keys = self.parse_path(path) node = self.structure for key in keys[:-1]: node = node[key] return node.pop(keys[-1]) def mkdir(self, path): self.create_node(path, is_dir=True) def mkfile(self, path): self.create_node(path, is_dir=False) def mv(self, src_path, dest_path): node = self.remove_node(src_path) keys = self.parse_path(dest_path) dest_node = self.structure for key in keys[:-1]: dest_node = dest_node[key] dest_node[keys[-1]] = node def print_structure(self, node=None, indent=\\"\\"): if node is None: node = self.structure for key in sorted(node): child = node[key] print(f\\"{indent}/{key}\\") if isinstance(child, dict): self.print_structure(child, indent + \\" \\") def process_commands(commands): fs = FileSystem() for command in commands: parts = command.split() cmd = parts[0] if cmd == \\"mkdir\\": fs.mkdir(parts[1]) elif cmd == \\"mkfile\\": fs.mkfile(parts[1]) elif cmd == \\"mv\\": fs.mv(parts[1], parts[2]) return fs # Interface to read commands and print output def main(): import sys input = sys.stdin.read data = input().splitlines() m = int(data[0]) commands = data[1:] fs = process_commands(commands) fs.print_structure() # main will not run in this context as we need to generate list of commands"},{"question":"Implement a function that takes a string as input and returns a new string where each character is duplicated. For example, given the input \\"hello\\", the function should return \\"hheelllloo\\".","solution":"def duplicate_characters(input_string): Returns a new string where each character in the input_string is duplicated. Args: input_string (str): The string to be processed. Returns: str: The processed string with each character duplicated. return \'\'.join([char * 2 for char in input_string])"},{"question":"In a college, students are assigned unique identification numbers which follow a specific sequence. However, due to some technical glitch, a few student IDs are missing from the sequence. The college administration wants to identify the missing IDs so that they can reassign them appropriately. Write a function that receives the starting and ending number of a continuous sequence of student IDs and a list of currently available IDs within that range. Your task is to determine the list of missing IDs. Input - The first line contains two space-separated integers, `start` and `end`, which represent the starting and ending IDs of the sequence (inclusive). - The second line contains space-separated integers, representing the list of available student IDs within the given range. Output - Your program should output the missing student IDs in sorted order. Constraints - The IDs `start` and `end` will be between 1 and 10000. - The list of available student IDs will contain unique integers sorted in ascending order and be of length 0 ≤ len(available_ids) ≤ (end - start + 1). SAMPLE INPUT 1000 1005 1000 1002 1003 1005 SAMPLE OUTPUT 1001 1004 Explanation In the given sequence from 1000 to 1005, the IDs 1000, 1002, 1003, and 1005 are available. This means the missing IDs are 1001 and 1004. Therefore, the output is 1001 1004.","solution":"def find_missing_ids(start, end, available_ids): Returns a list of missing IDs within the given range from start to end. :param start: int, starting ID of the sequence :param end: int, ending ID of the sequence :param available_ids: list of int, available IDs within the sequence :return: list of int, missing IDs in sorted order all_ids = set(range(start, end + 1)) available_ids_set = set(available_ids) missing_ids = sorted(all_ids - available_ids_set) return missing_ids"},{"question":"Dana loves exploring new places, and she has recently taken an interest in a series of ancient cities laid out in a line. The cities are numbered from 1 to n and there are m roads connecting pairs of cities. Each road has a certain beauty index, which represents how scenic the road is. Dana wants to find the most scenic path between any two cities. The scenic value of a path is the minimum beauty index among all roads in that path. To assist her with this, you need to answer q queries, each asking for the most scenic path between two specific cities. Implement a solution that answers the queries efficiently. Input The first line consists of three integers n, m, and q (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000, 1 ≤ q ≤ 100) - the number of cities, the number of roads and the number of queries respectively. Next m lines contain three integers u, v, b (1 ≤ u, v ≤ n, 1 ≤ b ≤ 1000) - representing a road between cities u and v with a beauty index b. It\'s guaranteed that u ≠ v and there is at most one road between any pair of cities. Next q lines contain two integers a and b (1 ≤ a, b ≤ n) - representing a query asking for the most scenic path between cities a and b. Output For each query, print the maximum scenic value of the path between cities a and b. If there is no path, print -1. Example Input 5 7 3 1 2 4 2 3 8 1 3 5 4 5 1 3 4 6 2 5 10 3 5 7 1 5 2 4 4 1 Output 1 6 1 Explanation In the first query, the most scenic path from city 1 to city 5 can be either: 1 -> 2 -> 3 -> 5 with beauty indices [4, 5, 7] which has a minimum of 4 1 -> 2 -> 5 with beauty indices [4, 10] which has a minimum of 4 thus the maximum scenic value is 4. In the second query, the most scenic path from city 2 to city 4 can be either: 2 -> 3 -> 4 with beauty indices [8, 6] which has a minimum of 6 thus the maximum scenic value is 6. In the third query, the most scenic path from city 4 to city 1 can be: 4 -> 3 -> 1 with beauty indices [6, 5] which has a minimum of 5 thus the maximum scenic value is 5.","solution":"from collections import defaultdict import heapq def preprocess_graph(n, edges): Preprocess the graph using the given edges and returns an adjacency list. graph = defaultdict(list) for u, v, b in edges: graph[u].append((v, b)) graph[v].append((u, b)) return graph def max_scenic_path(n, graph, start, end): Use Dijkstra\'s-like algorithm to find the maximum scenic path between start and end. heap = [(-float(\'inf\'), start)] max_path = [-float(\'inf\')] * (n + 1) max_path[start] = float(\'inf\') while heap: current_scenic, node = heapq.heappop(heap) current_scenic = -current_scenic if node == end: return current_scenic for neighbor, beauty in graph[node]: min_scenic = min(current_scenic, beauty) if min_scenic > max_path[neighbor]: max_path[neighbor] = min_scenic heapq.heappush(heap, (-min_scenic, neighbor)) return -1 def most_scenic_paths(n, m, q, edges, queries): graph = preprocess_graph(n, edges) results = [] for a, b in queries: result = max_scenic_path(n, graph, a, b) results.append(result) return results"},{"question":"You are given a linked list representing a non-negative integer, where each node contains a single digit. The digits are stored in reverse order, and each of their nodes contains a single digit. Add two such numbers and return the sum as a linked list in reverse order. Example: Input: l1 = [2,4,3] l2 = [5,6,4] Output: [7,0,8] Explanation: 342 + 465 = 807, and the linked list representation of the sum is [7,0,8]. Your Task: Complete the function ListNode* addTwoNumbers(ListNode* l1, ListNode* l2), which takes two linked lists as arguments and returns their sum as a linked list. Helper Class: class ListNode { public: int val; ListNode *next; ListNode(int x) : val(x), next(NULL) {} }; Expected Time Complexity: O(max(m, n)), where m and n are the lengths of l1 and l2 respectively. Expected Auxiliary Space: O(max(m, n)) for the resulting linked list. Constraints: - The number of nodes in each linked list is in the range [1, 100]. - 0 <= node.val <= 9 - It is guaranteed that the list represents a number that does not have leading zeros.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def addTwoNumbers(l1, l2): Add two numbers represented by linked lists in reverse order. Parameters: l1 (ListNode): The head of the first linked list. l2 (ListNode): The head of the second linked list. Returns: ListNode: The head of the linked list representing the sum. dummy_head = ListNode(0) current = dummy_head carry = 0 while l1 or l2 or carry: sum = carry if l1: sum += l1.val l1 = l1.next if l2: sum += l2.val l2 = l2.next carry = sum // 10 current.next = ListNode(sum % 10) current = current.next return dummy_head.next"},{"question":"A health monitoring system records the heart rates of patients over several days in a hospital. Each recording is represented by a tuple, containing the day of recording, the patient’s unique identifier, and the recorded heart rate. The system now needs a way to identify and analyze whether any patient was recorded with a potentially dangerous heart rate on any particular day. A heart rate is considered dangerous if it falls outside the range of 60 to 100 beats per minute inclusive. You are required to write a function that takes in a list of heart rate recordings and returns a report on which days had unsafe heart rate records and which patients were involved. The report should be a list of tuples, each containing the day and a set of unique patient identifiers who had unsafe measurements on that day. Input - n, the number of heart rate recordings. - Each of the next n lines contains three integers: day, patient_id, heart_rate. Output - A list of tuples where each tuple contains an integer representing the day and a set of integers representing patient identifiers with unsafe heart rates on that day. The list should be sorted by day in ascending order. Constraints - 1 ≤ n ≤ 100 - 1 ≤ day ≤ 10^4 - 1 ≤ patient_id, heart_rate ≤ 10^4 Examples Input: 6 1 101 58 1 102 62 2 103 50 2 104 101 3 105 80 3 101 110 Output: [(1, {101}), (2, {103, 104}), (3, {101})] Input: 4 5 201 45 5 202 70 6 203 99 7 204 120 Output: [(5, {201}), (7, {204})]","solution":"def identify_unsafe_heart_rates(records): Identifies days and patients with unsafe heart rate recordings. :param records: List of tuples, each containing (day, patient_id, heart_rate) :return: List of tuples, each containing (day, set of patient_ids) from collections import defaultdict unsafe_records = defaultdict(set) for day, patient_id, heart_rate in records: if heart_rate < 60 or heart_rate > 100: unsafe_records[day].add(patient_id) result = [(day, patients) for day, patients in sorted(unsafe_records.items())] return result"},{"question":"Write a function `matrix_transpose` that takes an `n x m` matrix (a list of n lists, each containing m elements) and returns its transpose. The transpose of a matrix is obtained by swapping the rows and columns of the original matrix. # Input - An `n x m` matrix `matrix` (a list of n lists, each containing m elements). # Output - An `m x n` matrix which is the transpose of the input matrix. # Examples ```python matrix_transpose([[1, 2, 3], [4, 5, 6]]) # Output: [[1, 4], [2, 5], [3, 6]] matrix_transpose([[1, 2], [3, 4], [5, 6]]) # Output: [[1, 3, 5], [2, 4, 6]] ``` # Note - You may assume that all elements of the matrix are integers.","solution":"def matrix_transpose(matrix): Returns the transpose of the given n x m matrix. Args: matrix (list of list of int): The input n x m matrix. Returns: list of list of int: The transposed m x n matrix. return [list(row) for row in zip(*matrix)]"},{"question":"You are given a 2D grid with R rows and C columns. Each cell in the grid can either be empty denoted by \'.\' or contain a wall denoted by \'#\'. You start at the cell (1, 1) (top-left corner) and want to reach the cell (R, C) (bottom-right corner). You can move to any of the 4 adjacent cells (up, down, left, or right) if they are within the grid bounds and not a wall. Determine the minimum number of steps required to reach the bottom-right corner from the top-left corner. If it is not possible to reach the bottom-right corner, return -1. INPUT: The first line consists of two integers R and C. The next R lines each consist of a string of length C representing the grid. OUTPUT: Print the minimum number of steps required to reach the bottom-right corner from the top-left corner or -1 if it is not possible. CONSTRAINTS: 1 ≤ R, C ≤ 1000 The grid will contain only \'.\' or \'#\'. SAMPLE INPUT 5 5 ..... .#... .#.#. ...#. ... SAMPLE OUTPUT 8 Explanation: One of the possible paths to minimize the number of steps is as follows: (1,1) -> (2,1) -> (3,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,4) -> (5,5)","solution":"from collections import deque def min_steps(R, C, grid): # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if the starting or ending point is a wall if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return -1 # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() # If we have reached the bottom-right corner if row == R-1 and col == C-1: return steps # Explore possible directions for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < R and 0 <= c < C and grid[r][c] == \'.\' and (r, c) not in visited: visited.add((r, c)) queue.append((r, c, steps + 1)) # If we exit the loop, it means we didn\'t find a way return -1 # Main function to read input def main(): import sys input = sys.stdin.read data = input().split() R = int(data[0]) C = int(data[1]) grid = [data[i + 2] for i in range(R)] result = min_steps(R, C, grid) print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string `s` of length `N`, consisting of lowercase alphabets. Your task is to determine the maximum length of a substring that has exactly two distinct characters (each appearing at least once). # Examples: 1. **Input**: ``` s = \\"eceba\\" ``` **Output**: ``` 3 ``` **Explanation**: The substring \\"ece\\" has exactly two distinct characters. 2. **Input**: ``` s = \\"ccaabbb\\" ``` **Output**: ``` 5 ``` **Explanation**: The substring \\"aabbb\\" has exactly two distinct characters. # Function Signature: ```python def maxLengthTwoDistinct(s: str) -> int: pass ``` # Constraints: - 1 <= len(s) <= 10^5 # Expected Complexity: - Time Complexity: O(N) - Auxiliary Space: O(1)","solution":"def maxLengthTwoDistinct(s: str) -> int: if len(s) < 2: return len(s) left, right = 0, 0 max_len = 0 char_count = {} while right < len(s): char_count[s[right]] = char_count.get(s[right], 0) + 1 right += 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left) return max_len"},{"question":"A group of friends is playing a game with a sequence of numbers for entertainment. The sequence is initially empty. They take turns performing one of the three actions: 1. Add an integer x to the end of the sequence. 2. Remove the last integer from the sequence (if the sequence is not empty). 3. Calculate and print the maximum absolute difference between any two elements in the sequence. Your task is to write a program that processes a series of the described operations and produces the correct output for each type 3 operation. Input The first line contains a single integer n (1 ≤ n ≤ 105), the number of operations to be performed. The next n lines each describe an operation, consisting of either: - \\"1 x\\" where x is an integer (-109 ≤ x ≤ 109), indicating that x should be added to the sequence. - \\"2\\", indicating that the last integer should be removed from the sequence. - \\"3\\", indicating that the maximum absolute difference between any two elements in the sequence should be printed. Output For each type \\"3\\" operation, print a single integer: the maximum absolute difference between any two elements in the sequence. If the sequence has fewer than 2 elements at the time of the operation, print \\"0\\". Examples Input 5 1 5 1 10 3 2 3 Output 5 0 Input 6 1 -10 1 5 3 2 2 3 Output 15 0 Note In the first example, after operation 1, the sequence is [5]. After operation 2, the sequence is [5, 10]. After operation 3, the maximum absolute difference is |10 - 5| = 5. After operation 4, the sequence returns to [5]. After operation 5, the sequence is empty, so the maximum absolute difference is 0. In the second example, after operations 1 and 2, the sequence is [-10, 5]. After operation 3, the maximum absolute difference is |5 - (-10)| = 15. After operations 4 and 5, the sequence becomes empty. Operation 6 has no elements to compare, so it outputs 0.","solution":"def process_operations(n, operations): sequence = [] results = [] for operation in operations: if operation[0] == \'1\': sequence.append(int(operation[1])) elif operation[0] == \'2\': if sequence: sequence.pop() elif operation[0] == \'3\': if len(sequence) < 2: results.append(0) else: max_diff = max(sequence) - min(sequence) results.append(max_diff) return results"},{"question":"Maze Solver Robot A maze is represented by a 2D grid where `0` represents an open cell and `1` represents a wall. A robot starts at the top-left cell (`0, 0`) and attempts to reach the bottom-right cell (`n-1, m-1`). The robot can move up, down, left, or right, but cannot move into walls or outside the grid. Implement a function `find_path(maze: List[List[int]]) -> List[Tuple[int, int]]` that finds a path from the start to the destination, or returns `[]` if no path exists. # Constraints: - The maze has at least `1` cell and at most `1000` cells (both dimensions combined). - The function must return a path that is a list of `(x, y)` tuples indicating the sequence of cells the robot should traverse. - If there are multiple paths, any valid path is acceptable. # Input: - A 2D list `maze` with dimensions `n x m` where `1 <= n, m <= 1000`. # Output: - A list of tuples `[(0, 0), (x1, y1), ..., (n-1, m-1)]` representing the path, or an empty list `[]` if no path exists. # Example: ```python maze = [ [0, 0, 1, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1], [0, 0, 0, 1, 0] ] print(find_path(maze)) # Expected output: [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), ..., (4, 4)] ``` # Implementation Notes: - You may use Breadth-First Search (BFS) or Depth-First Search (DFS) to find the path. - Consider checking edge cases such as the start or end cells being walls. # Hints: - Define a helper function to validate if a cell is within the grid and not a wall. - Use a queue for BFS with tuples storing the current cell and the path taken to reach it.","solution":"from collections import deque from typing import List, Tuple def find_path(maze: List[List[int]]) -> List[Tuple[int, int]]: Finds a path from the top-left corner to the bottom-right corner in a maze, represented by a 2D grid of 0s and 1s. :param maze: 2D list representing the maze where 0 is an open cell and 1 is a wall :return: List of tuples representing the path from (0, 0) to (n-1, m-1) if not maze or maze[0][0] == 1 or maze[-1][-1] == 1: return [] n, m = len(maze), len(maze[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([((0, 0), [(0, 0)])]) visited = set((0, 0)) while queue: (x, y), path = queue.popleft() if (x, y) == (n - 1, m - 1): return path for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append(((nx, ny), path + [(nx, ny)])) return []"},{"question":"Given an array of integers, determine if there exists a subset of the array with a sum equal to a given target value. If such a subset exists, print \\"POSSIBLE\\". Otherwise, print \\"IMPOSSIBLE\\". Input The first line contains two integers n and target (1 ≤ n ≤ 100, 1 ≤ target ≤ 10^5) — the number of elements in the array and the target sum, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4) — the elements of the array. Output Print \\"POSSIBLE\\" if there exists a subset whose sum is equal to the target value. Otherwise, print \\"IMPOSSIBLE\\". Examples Input 5 9 3 34 4 12 5 Output POSSIBLE Input 3 11 1 2 3 Output IMPOSSIBLE","solution":"def is_subset_sum_possible(n, target, arr): Determines if there exists a subset of the array with a sum equal to the target value. :param n: Number of elements in the array (integer) :param target: The target sum value (integer) :param arr: List of integers representing the array :return: \\"POSSIBLE\\" if a subset with sum equal to target exists, otherwise \\"IMPOSSIBLE\\" dp = [False] * (target + 1) dp[0] = True for num in arr: for j in range(target, num - 1, -1): if dp[j - num]: dp[j] = True return \\"POSSIBLE\\" if dp[target] else \\"IMPOSSIBLE\\""},{"question":"Given a list of positive integers, you are required to transform the list into an equivalent list where every element is determined by taking the sum of elements up to and including the current position in the original list. This process is commonly known as creating a cumulative sum or prefix sum list. Write a function `cumulative_sum(arr)` that returns the cumulative sum list of the input list `arr`. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the size of the list. - The second line contains N integers separated by spaces, representing the elements of the list. ------ Output Format ------ For each test case, print the cumulative sum list in a single line, with each number separated by a space. ------ Constraints ------ 1 leq T leq 10 1 leq N leq 10^5 1 leq text{arr}[i] leq 10^3 (i ≤ N) It is guaranteed that the sum of N over all test cases does not exceed 10^6. ------ Sample Input 1 ------ 2 5 1 2 3 4 5 4 10 20 30 40 ------ Sample Output 1 ------ 1 3 6 10 15 10 30 60 100 ------ Explanation 1 ------ In the first test case, the cumulative sum of the list [1, 2, 3, 4, 5] is calculated as follows: - At index 1: 1 - At index 2: 1 + 2 = 3 - At index 3: 1 + 2 + 3 = 6 - At index 4: 1 + 2 + 3 + 4 = 10 - At index 5: 1 + 2 + 3 + 4 + 5 = 15 Thus, the output is \\"1 3 6 10 15\\". In the second test case, the cumulative sum of the list [10, 20, 30, 40] is calculated as follows: - At index 1: 10 - At index 2: 10 + 20 = 30 - At index 3: 10 + 20 + 30 = 60 - At index 4: 10 + 20 + 30 + 40 = 100 Thus, the output is \\"10 30 60 100\\".","solution":"def cumulative_sum(arr): Return the cumulative sum list of the input list `arr`. cum_sum = [] current_sum = 0 for num in arr: current_sum += num cum_sum.append(current_sum) return cum_sum def process_test_cases(test_cases): Process multiple test cases and return their results as a list of cumulative sum lists. results = [] for case in test_cases: N, arr = case results.append(cumulative_sum(arr)) return results"},{"question":"A city is organizing a series of friendly competitions among its neighborhoods. Each neighborhood has its own team and the strength of a team is represented by a single integer value. The competitions are knockout style, where two teams compete and the team with the higher strength wins and continues to the next round, while the team with the lower strength gets eliminated. Sometimes, due to training and other activities, the team\'s strength may increase over time. Your task is to create a program that helps the city organizer ran the tournaments efficiently by managing the team strengths and simulating the competition outcomes based on various queries. You need to support three kinds of operations: 1. Compete two teams and determine the winner (team with the higher strength). 2. Update the strength of a team. 3. Retrieve the current strength of a team. -----Input----- - First line contains two integers N and Q, denoting the number of neighborhoods and number of operations respectively. - Second line contains N space-separated integers S1, S2, ..., SN denoting the initial strengths of the teams. - Each of the next Q lines describes an operation. If the first integer is equal to 1, it means that the operation is of Type 1, and it will be followed by two integers U and V (indexes of the two teams competing). If the first integer is equal to 2, it means that the operation is of Type 2, and it will be followed by two integers I and X (index of the team and the new strength). If the first integer is equal to 3, it means that operation is of Type 3, and it will be followed by one integer I (index of the team whose current strength needs to be retrieved). -----Output----- For each operation of Type 1, output the index of the winning team. For each operation of Type 3, output the current strength of the team. -----Constraints----- - 1 ≤ N, Q ≤ 100,000 - 1 ≤ Si ≤ 1,000,000 - 1 ≤ U, V, I ≤ N - 1 ≤ X ≤ 1,000,000 -----Subtasks----- - Subtask 1 (20 points) : 1 ≤ N, Q ≤ 1,000 - Subtask 2 (80 points) : Original constraints -----Example----- Input: 4 5 10 15 20 25 1 1 2 2 3 30 1 3 4 3 3 1 1 3 Output: 2 3 30 3 -----Explanation----- The initial strengths are (10, 15, 20, 25). - The first operation is of Type 1, performing a competition between team 1 and team 2. Team 2 wins as 15 > 10. - The second operation is of Type 2, updating the strength of team 3 to 30. - The updated strengths become (10, 15, 30, 25). - The third operation is of Type 1, conducting a competition between team 3 and team 4. Team 3 wins as 30 > 25. - The fourth operation is of Type 3, retrieving the current strength of team 3, which is 30. - The last operation is of Type 1, competing team 1 and team 3. Team 3 wins as 30 > 10.","solution":"def competition(operations): n, q, strengths, ops = operations results = [] for op in ops: if op[0] == 1: u, v = op[1] - 1, op[2] - 1 if strengths[u] > strengths[v]: results.append(u + 1) else: results.append(v + 1) elif op[0] == 2: i, x = op[1] - 1, op[2] strengths[i] = x elif op[0] == 3: i = op[1] - 1 results.append(strengths[i]) return results"},{"question":"Write a function ```flattenList(nestedList)``` that takes a list containing nested lists of integers and returns a single flattened list of integers. All levels of nesting should be flattened out so that the resulting list contains no nested lists. Example 1: ```python nestedList = [1, [2, 3], [4, [5, 6]], 7] flattenList(nestedList) # returns [1, 2, 3, 4, 5, 6, 7] ``` Example 2: ```python nestedList = [[1, 2, [3]], 4, [5, [6, [7, 8]]]] flattenList(nestedList) # returns [1, 2, 3, 4, 5, 6, 7, 8] ```","solution":"def flattenList(nestedList): Flattens a list containing nested lists of integers into a single list of integers. :param nestedList: list containing nested lists of integers :return: flattened list of integers flattened = [] def flatten(sublist): for element in sublist: if isinstance(element, list): flatten(element) else: flattened.append(element) flatten(nestedList) return flattened"},{"question":"Given a string S and an integer K, reverse the order of the first K characters in the string. If K is greater than the length of the string, reverse the whole string. Example 1: Input: S = \\"abcdef\\", K = 3 Output: \\"cbadef\\" Explanation: The first 3 characters \\"abc\\" are reversed to \\"cba\\", and the rest of the string remains the same. Example 2: Input: S = \\"abcdef\\", K = 8 Output: \\"fedcba\\" Explanation: Since K is greater than the length of the string, the entire string \\"abcdef\\" is reversed to \\"fedcba\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function reverseKCharacters() which takes the string S and the integer K as input and returns the modified string. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= len(S) <= 10^{5} 1 <= K <= 10^{5} Note: The function signature in Python is expected to be `def reverseKCharacters(S: str, K: int) -> str:`. In other languages, adjust the function signature accordingly.","solution":"def reverseKCharacters(S: str, K: int) -> str: Reverses the order of the first K characters in the string S. If K is greater than the length of the string, reverses the whole string. Args: S: A string whose first K characters need to be reversed. K: An integer denoting the number of characters to reverse. Returns: A new string with the first K characters reversed. if K > len(S): K = len(S) return S[:K][::-1] + S[K:]"},{"question":"Given an array of N integers, find the length of the longest subsequence such that each element in the subsequence is greater than the previous one by exactly 2. ------ Input ------ The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, and the second line contains N space-separated integers. ------ Output ------ For each test case, print the length of the longest such subsequence. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ A[i] ≤ 10^9 ------ Example ------ Input: ``` 2 5 1 3 5 7 9 6 4 6 8 10 3 1 ``` Output: ``` 5 4 ``` ------ Explanation ------ In the first test case, the longest subsequence with differences of exactly 2 is [1, 3, 5, 7, 9], thus the output is 5. In the second test case, one of the longest subsequences with differences of exactly 2 is [4, 6, 8, 10], thus the output is 4.","solution":"def longest_subsequence_length(arr): Returns the length of the longest subsequence such that each element in the subsequence is greater than the previous one by exactly 2. n = len(arr) if n == 0: return 0 # Dictionary to store the length of subsequence ending with a particular element dp = {} max_length = 1 for num in arr: prev_num = num - 2 if prev_num in dp: dp[num] = dp.get(num, 1) dp[num] = max(dp[num], dp[prev_num] + 1) else: dp[num] = 1 max_length = max(max_length, dp[num]) return max_length def solve(testcases): results = [] for case in testcases: N, arr = case results.append(longest_subsequence_length(arr)) return results"},{"question":"Johnny has recently started learning about number theory and is fascinated by the concept of prime numbers. He came up with a problem for himself and asked you to help him solve it. Given an integer `n`, return the smallest prime number `p` such that `p` is greater than or equal to `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Input A single integer `n` where `2 ≤ n ≤ 10^6`. Output Print the smallest prime number `p` such that `p` is greater than or equal to `n`. Examples Input 10 Output 11 Input 20 Output 23 Input 2 Output 2 Note In the first example, the smallest prime number greater than or equal to 10 is 11. In the second example, the smallest prime number greater than or equal to 20 is 23. In the third example, 2 is given as input, and since 2 is a prime number, it is the output.","solution":"def is_prime(num): Check if the given number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def smallest_prime_ge(n): Returns the smallest prime number p such that p is greater than or equal to n. while True: if is_prime(n): return n n += 1"},{"question":"At XYZ Pharmaceuticals, the procurement team is responsible for buying medical supplies from various vendors. Each vendor offers discounts based on the quantity of supplies ordered. The procurement team wants to prioritize vendors who offer the highest discounts on bulk orders. To optimize this, they need to analyze the discount rates and arrange the vendors accordingly. Your task is to create a program that, given a list of vendors along with their offered discount rates and quantity thresholds, sorts the vendors by their discount rates in descending order. If two vendors offer the same discount rate, sort them by their quantity thresholds in ascending order. -----Input----- The input consists of: - An integer N, the number of vendors. - N lines, each containing the discount rate and quantity threshold of a vendor. Each line has two integers d_i and q_i, representing the discount rate and quantity threshold of the i-th vendor. -----Output----- Output the list of vendors sorted by their discount rates in descending order. If two vendors have the same discount rate, sort them by their quantity thresholds in ascending order. Each vendor should be printed on a separate line in the format \\"discount rate quantity threshold\\". -----Limits----- - 1 leq N leq 10000 - 0 leq d_i leq 100 - 1 leq q_i leq 1000 -----Examples----- Sample Input 1: 3 20 100 15 200 20 80 Sample Output 1: 20 80 20 100 15 200 Sample Input 2: 2 30 50 50 30 Sample Output 2: 50 30 30 50","solution":"def sort_vendors(vendors): Sorts the given list of vendors by their discount rates in descending order. If two vendors have the same discount rate, they are sorted by their quantity thresholds in ascending order. :param vendors: List of tuples, where each tuple contains two integers - discount rate and quantity threshold. :return: A sorted list of tuples. # Sort the vendors list by discount rate in descending order and quantity threshold in ascending order sorted_vendors = sorted(vendors, key=lambda x: (-x[0], x[1])) return sorted_vendors def format_vendors(vendors): Formats the list of vendors for output. :param vendors: List of tuples, where each tuple contains two integers - discount rate and quantity threshold. :return: A formatted string to print the vendors. return \'n\'.join(f\\"{d} {q}\\" for d, q in vendors)"},{"question":"Given an integer array arr of size N, return the longest subarray that forms a continuous sequence when the elements are sorted in ascending order. Example 1: Input: arr = [1, 9, 3, 10, 4, 20, 2] Output: [1, 2, 3, 4] Explanation: The longest subarray is [1, 2, 3, 4]. Example 2: Input: arr = [36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42] Output: [32, 33, 34, 35, 36] Explanation: The longest subarray is [32, 33, 34, 35, 36]. Your Task: You don\'t need to read input or print anything. Complete the function longestConsecutiveSubarray() that takes an integer array arr and its size N as input parameters and returns the longest subarray that forms a continuous sequence when the elements are sorted in ascending order. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 0 ≤ arr[i] ≤ 10^6","solution":"def longestConsecutiveSubarray(arr): Returns the longest subarray that forms a continuous sequence when the elements are sorted in ascending order. if not arr: return [] num_set = set(arr) longest_streak = 0 best_start = None for num in arr: # check if it\'s the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 if current_streak > longest_streak: longest_streak = current_streak best_start = num # Generate the longest subarray if best_start is not None: return [best_start + i for i in range(longest_streak)] else: return [] # For the edge case when no streak was found"},{"question":"You are given a city with N intersections, connected by M bidirectional roads. Each road connects two intersections and has a specific cost associated with it. Developing a new strategy to reduce traffic congestion, the city’s mayor wants to close certain roads according to some criteria. Given a threshold T, you need to determine if it is possible to disconnect the city by closing all roads with a cost greater than or equal to T. A city is considered \\"disconnected\\" if there are at least two intersections such that there is no path between them using the remaining roads. Write a program that takes the city\'s current infrastructure and answers whether it\'s possible to disconnect the city by closing the roads with a cost of T or more. If it is possible, the program should output \\"YES\\" and if not, output \\"NO\\". Input The first line contains two integers N and M - denoting the number of intersections and the number of roads. The next M lines contain three integers each: U, V, and C - denoting that there is a road between intersections U and V with a cost of C. The last line contains the integer T - the cost threshold. Output Output a single line containing \\"YES\\" if it\'s possible to disconnect the city by closing roads with a cost greater than or equal to T. Otherwise, output \\"NO\\". Constraints 1 ≤ N ≤ 1000 0 ≤ M ≤ 10000 1 ≤ U, V ≤ N 1 ≤ C ≤ 1000 1 ≤ T ≤ 1000 Example Input: 5 6 1 2 3 2 3 4 3 4 5 4 5 6 1 5 2 2 4 7 5 Output: YES Explanation By closing the roads with a cost greater than or equal to 5, the remaining roads can no longer maintain a connected path between all intersections, effectively disconnecting the city. The paths will be: 1-2 (cost 3), 1-5 (cost 2), 2-3 (cost 4). Intersections 3, 4, and 5 are disconnected from 1 and 2.","solution":"def is_city_disconnected(n, m, roads, t): from collections import defaultdict, deque # Build graph excluding roads with cost >= T graph = defaultdict(list) for u, v, c in roads: if c < t: graph[u].append(v) graph[v].append(u) # Check connectivity using BFS/DFS visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Select the first node with any connection for start in range(1, n + 1): if graph[start]: break # If all nodes have no connections, it\'s already disconnected if not graph[start]: return \\"YES\\" # BFS from the start node visited.add(start) bfs(start) # If not all nodes are visited, the graph is disconnected return \\"YES\\" if len(visited) != n else \\"NO\\" # Example to test: input_n = 5 input_m = 6 input_roads = [ (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (1, 5, 2), (2, 4, 7) ] input_t = 5 print(is_city_disconnected(input_n, input_m, input_roads, input_t)) # Expected output: \\"YES\\""},{"question":"You are given an array of integers representing the stock price of a company for each day. Your task is to compute the maximum profit that could have been made by buying on one day and selling on another later day. If no profit is possible, return 0. - You must complete this in O(n) time complexity. - Do not use built-in library functions for this task. Examples ```python max_profit([7, 1, 5, 3, 6, 4]) == 5 # buy at day 2 (price 1) and sell at day 5 (price 6) max_profit([7, 6, 4, 3, 1]) == 0 # no profitable buy-sell possible. max_profit([3, 8, 8, 55, 38, 1, 7, 42, 54, 53]) == 53 # buy at day 1 (price 3) and sell at day 4 (price 55) max_profit([10, 22, 5, 75, 65, 80]) == 75 # buy at day 3 (price 5) and sell at day 6 (price 80) max_profit([90, 80, 70, 60, 50, 40, 30]) == 0 # no profitable buy-sell possible max_profit([1, 6, 7, 8, 5, 3, 4, 10, 20]) == 19 # buy at day 1 (price 1) and sell at day 9 (price 20) ``` Constraints - The input list contains only non-negative integers and has at least one element. - Output must be returned as an integer.","solution":"def max_profit(prices): Finds the maximum profit that can be achieved by buying and selling the stock on different days. If no profit is possible, returns 0. :param prices: List[int] - List of stock prices where prices[i] is the price on the ith day. :return: int - Maximum profit possible from a single buy and sell transaction. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: profit = price - min_price if profit > max_profit: max_profit = profit return max_profit"},{"question":"Alice is hosting a game in which she distributes candies in a unique way. Every time she distributes candies, each participant gets exactly one candy starting from the first participant to the last, then back to the first and so on in this order. Given the number of participants N and the number of candies C, determine how many candies each participant has received at the end. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of two integers N and C - denoting the number of participants and the number of candies respectively. ------ Output Format ------ For each test case, output N space-separated integers representing the number of candies each participant received. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ C ≤ 1000 ------ Sample Input 1 ------ 3 3 7 4 10 2 5 ------ Sample Output 1 ------ 3 2 2 3 3 2 2 3 2 ------ Explanation 1 ------ Test case 1: There are 3 participants and Alice has 7 candies. Distribution proceeds as: 1 candy to each participant one by one, - Participant 1: 2 - Participant 2: 2 - Participant 3: 2 - Back to Participant 1: 1 Therefore, the final distribution is: [3, 2, 2] Test case 2: Alice has 10 candies and 4 participants. Distribution proceeds as: - Each of the 4 participants receives 2 candies - Again starting from Participant 1: [2,2,2,2]+[1,1]=[3,3,2,2] Therefore, the final distribution is: [3,3,2,2] Test case 3: With 2 participants and 5 candies: - Each of the 2 participants receives 2 candies - Participant 1 receives 1 more on another round, hence the final distribution is: [3,2]","solution":"def distribute_candies(T, test_cases): results = [] for N, C in test_cases: distribution = [0] * N for i in range(C): distribution[i % N] += 1 results.append(distribution) return results"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a weight associated with it. Your task is to find the minimum spanning tree (MST) of this graph and compute the product of the weights of all the edges in the MST. Input The first line contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10000) – the number of nodes and the number of edges. In each of the next m lines, three integers u, v and w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 1000) – indicating that there is an edge between node u and node v with weight w. Output Print a single integer, denoting the product of the weights of all the edges in the MST modulo 998244353. If there are no edges in the graph, print 1. Examples Input 4 5 1 2 3 1 3 1 2 3 3 2 4 6 3 4 2 Output 18 Input 3 0 Output 1 Note In the first example, the MST consists of edges with weights 1, 2, and 3. The product is 1 * 2 * 3 = 6. In the second example, there are no edges, so no MST can be formed, and the product of weights is defined as 1 by default.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): edges = sorted(edges, key=lambda item: item[2]) # Sort edges by weight parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_edges = [] for edge in edges: u, v, w = edge x = find(parent, u - 1) y = find(parent, v - 1) if x != y: mst_edges.append(edge) union(parent, rank, x, y) if len(mst_edges) == n - 1: break return mst_edges def product_of_weights_in_mst(n, m, edge_list): if m == 0: # no edges return 1 mst_edges = kruskal_mst(n, edge_list) product = 1 MOD = 998244353 for edge in mst_edges: product = (product * edge[2]) % MOD return product # Reading input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edge_list = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) edge_list.append((u, v, w)) index += 3 result = product_of_weights_in_mst(n, m, edge_list) print(result)"},{"question":"You are given a string of lowercase letters. Your task is to process q queries on this string. Each query is of one of the following types: 1. Reverse the substring between positions l and r (inclusive). 2. Count the number of distinct characters in the substring between positions l and r (inclusive). Note: - Queries of type 1 will modify the string, while queries of type 2 will only query the current state of the string. - String indices are 0-based. Input The first line contains two space-separated integers, n and q (1 ≤ n ≤ 100,000, 1 ≤ q ≤ 100,000) — the length of the string and the number of queries. The second line contains a string of n lowercase letters. The next q lines contain queries. Each query consists of three space-separated integers t, l and r ( 1 ≤ t ≤ 2, 0 ≤ l ≤ r < n), which describe the type of query and the positions l and r. Output For each query of type 2, output the number of distinct characters in the corresponding substring. Examples Input 5 3 abcba 2 0 4 1 1 3 2 0 4 Output 3 3 Input 10 4 hellothere 2 0 9 1 4 7 2 0 9 2 5 9 Output 6 6 5 Explanation In the first example: - The 1st query counts distinct characters in \\"abcba\\" which are `a`, `b`, and `c`: thus, the result is 3. - The 2nd query reverses the substring \\"bcb\\", resulting in the string \\"abcbc\\". - The 3rd query counts the distinct characters in \\"abcbc\\", which are still `a`, `b`, and `c`. In the second example: - The 1st query counts the distinct characters in \\"hellothere\\" which are `h`, `e`, `l`, `o`, `t`, and `r` resulting in 6. - The 2nd query reverses the substring from index 4 to 7: \\"loth\\" becomes \\"htol\\", resulting in the string \\"helhotlere\\". - The 3rd query counts the distinct characters in \\"helhotlere\\" which are `h`, `e`, `l`, `o`, `t`, and `r` again resulting in 6. - The 4th query counts the distinct characters in the substring `otler` resulting in `o`, `t`, `l`, `e`, and `r` which are 5. The first example illustrates both operations, while the second highlights multiple operations over a larger string.","solution":"def process_queries(n, q, s, queries): Processes queries on the given string s. Args: n (int): Length of the string. q (int): Number of queries. s (str): The string to process. queries (list): List of queries, where each query is a tuple (t, l, r). Returns: list: Result of queries of type 2 (count of distinct characters). s = list(s) # Mutable string results = [] for t, l, r in queries: if t == 1: # Reverse the substring s[l:r+1] s[l:r+1] = s[l:r+1][::-1] elif t == 2: # Count distinct characters in the substring s[l:r+1] substring = s[l:r+1] distinct_count = len(set(substring)) results.append(distinct_count) return results"},{"question":"Given a string `s`, you need to find the first non-repeating character in it and return its index. If it does not exist, return -1. You may assume that the string contains only lowercase letters. **Example:** ```python first_non_repeating_char(\\"leetcode\\") should return 0 because \'l\' is the first non-repeating character. first_non_repeating_char(\\"loveleetcode\\") should return 2 because \'v\' is the first non-repeating character. first_non_repeating_char(\\"aabb\\") should return -1 because there are no non-repeating characters. ``` **Constraints:** - The input string `s` will have at most 10^5 characters. **Implementation Tip:** - You can use a dictionary or an array to store the frequency of each character and then iterate through the string to find the first character with a frequency of 1.","solution":"def first_non_repeating_char(s): Returns the index of the first non-repeating character in the string `s`. If no non-repeating character exists, return -1. # A dictionary to store the frequency of each character frequency = {} # First iteration: Count the frequency of each character for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Second iteration: Find the first character with a frequency of 1 for index, char in enumerate(s): if frequency[char] == 1: return index # If no non-repeating character found, return -1 return -1"},{"question":"Write a function that takes an input string and removes all non-alphanumeric characters (excluding spaces), ensuring that the resulting string preserves spaces and the original order of characters. The function should return the cleaned string. Example: ``` Input: \\"Hello, World! Welcome to 2023!.\\" Output: \\"Hello World Welcome to 2023\\" ```","solution":"def clean_string(s): Removes all non-alphanumeric characters (excluding spaces) from the input string, ensuring that the resulting string preserves spaces and the original order of characters. Arguments: s -- input string to be cleaned Returns: Cleaned string with only alphanumeric characters and spaces. return \'\'.join(char for char in s if char.isalnum() or char.isspace())"},{"question":"Cornelius the Caterpillar is undergoing an exercise regimen to prepare for a marathon. Each day, he varies the distance he crawls based on a sequence of instructions. Each instruction can either increase or decrease his total distance traveled for that day. Cornelius starts each day at a distance of 0. Your task is to write a program that calculates the total distance Cornelius has traveled at the end of the day, considering the instructions given. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 100), denoting the number of instructions. The second line contains n integers separated by spaces. Each integer ai (-100 ≤ ai ≤ 100) represents the distance added or subtracted by Cornelius following each instruction. -----Output----- Print a single integer: the total distance Cornelius has traveled at the end of the day. -----Examples----- Input 5 -3 7 -10 20 -5 Output 9 Input 3 10 -5 -15 Output -10","solution":"def total_distance(n, instructions): Calculate the total distance Cornelius has traveled based on the given instructions. :param n: int - number of instructions :param instructions: List[int] - list of distance changes :return: int - total distance traveled at the end of the day return sum(instructions)"},{"question":"Captain Alice is responsible for the logistics in a military base, and she needs to distribute food provisions to n soldiers over t days. Each soldier requires exactly r units of food per day. Given a list of available food units per day for the next t days, Alice must determine whether it is possible to meet the food requirements for all soldiers each day. Input The first line contains three integers n, t, and r (1 ≤ n ≤ 1000, 1 ≤ t ≤ 1000, 1 ≤ r ≤ 1000) — the number of soldiers, the number of days, and the food requirement per soldier per day, respectively. The second line contains t space-separated integers — the available food units for each day. Output Output \\"YES\\" if it is possible to fulfill the food requirements for all soldiers each day. Otherwise, output \\"NO\\". Examples Input 3 5 2 6 15 12 9 8 Output YES Input 4 4 3 18 8 10 12 Output NO","solution":"def can_meet_food_requirements(n, t, r, food_units): Determine if it is possible to meet the food requirements for all soldiers each day. Args: n (int): Number of soldiers. t (int): Number of days. r (int): Food requirement per soldier per day. food_units (list): List of available food units for each day. Returns: str: \\"YES\\" if it is possible to meet the food requirements, \\"NO\\" otherwise. required_food_per_day = n * r for units in food_units: if units < required_food_per_day: return \\"NO\\" return \\"YES\\" # Example usage: # print(can_meet_food_requirements(3, 5, 2, [6, 15, 12, 9, 8])) # Output: YES # print(can_meet_food_requirements(4, 4, 3, [18, 8, 10, 12])) # Output: NO"},{"question":"Given an array of integers, your task is to calculate the \\"digit sum\\" of all elements in the array. The digit sum of a number is defined as the sum of its individual digits. After calculating the digit sum of each element, find and return the maximum digit sum among them. For example: ```python arr = [34, 65, 127, 89] ``` The digit sums will be: ``` 34: 3 + 4 = 7 65: 6 + 5 = 11 127: 1 + 2 + 7 = 10 89: 8 + 9 = 17 ``` Among these digit sums, the maximum value is `17`. Therefore, the output should be: ```python 17 ```","solution":"def digit_sum(n): Returns the sum of the digits of the given number n. return sum(int(digit) for digit in str(n)) def max_digit_sum(arr): Returns the maximum digit sum among the elements of the array arr. return max(digit_sum(num) for num in arr)"},{"question":"Given a list of strings, `strings_list`, write a function that returns the length of the longest string that can be constructed by concatenating strings from the list such that no duplicate characters are present in the resultant string. # Examples: ``` strings_list = [\\"un\\", \\"iq\\", \\"ue\\"] max_length(strings_list) -> 4 # the strings \\"un\\", \\"iq\\" can be concatenated to \\"uniq\\" strings_list = [\\"cha\\",\\"r\\",\\"act\\",\\"ers\\"] max_length(strings_list) -> 6 # the strings \\"cha\\", \\"ers\\" can be concatenated to \\"chaers\\" strings_list = [\\"abcdefghijklmnopqrstuvwxyz\\"] max_length(strings_list) -> 26 # the only string itself has no duplicate characters ```","solution":"from itertools import combinations def max_length(strings_list): def has_unique_chars(s): return len(set(s)) == len(s) def all_combinations(strings_list): for i in range(len(strings_list) + 1): for combo in combinations(strings_list, i): yield \'\'.join(combo) maximum_length = 0 for combo_string in all_combinations(strings_list): if has_unique_chars(combo_string): maximum_length = max(maximum_length, len(combo_string)) return maximum_length"},{"question":"Amelia is organizing a drawing competition for kids. She wants to distribute drawing kits that contain colored pencils. She has `N` different colors of pencils and an infinite supply of pencils of each color. Each kit must contain exactly `K` pencils, where `K` is a positive integer. The kits can contain multiple pencils of the same color. Amelia wonders, how many different kits are possible? Since the number can be large, she wants the result modulo 1000000007 (10^9 + 7). Input The first line contains T — the number of test cases. Each of the next T lines contains two positive integers, `N` and `K` — the number of different colors and the number of pencils per kit respectively. Output Output should consist of T lines, each line is a number of different kits possible, modulo 1000000007. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ K ≤ 1000000 SAMPLE INPUT 3 2 3 3 2 4 1 SAMPLE OUTPUT 8 9 4","solution":"MOD = 1000000007 def count_drawing_kits(T, cases): results = [] for N, K in cases: results.append(pow(N, K, MOD)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0].strip()) cases = [] for i in range(1, T + 1): N, K = map(int, lines[i].strip().split()) cases.append((N, K)) return T, cases def format_output(results): return \'n\'.join(map(str, results)) # Example usage: # input_str = \\"3n2 3n3 2n4 1\\" # T, cases = parse_input(input_str) # results = count_drawing_kits(T, cases) # output_str = format_output(results) # print(output_str)"},{"question":"Given a list of integers, write a function called `find_majority_element` that returns the majority element in the list. The majority element is the element that appears more than ⌊n / 2⌋ times where `n` is the length of the list, and ⌊ ⌋ denotes the floor function. If there is no majority element, the function should return `None`. A valid solution will have a linear time complexity and constant space complexity, excluding the space required for the input list. Function signature in Python: ```python def find_majority_element(nums: List[int]) -> Optional[int]: pass ``` Examples: ```python find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4]) # Output: 4 find_majority_element([3, 3, 4, 2, 4, 4, 2, 4]) # Output: None ``` **Note:** - You may assume the input list will not be empty. - The implementation must avoid using additional data structures that grow linearly with the input size.","solution":"from typing import List, Optional def find_majority_element(nums: List[int]) -> Optional[int]: candidate, count = None, 0 # Phase 1: Find a candidate for num in nums: if count == 0: candidate, count = num, 1 elif num == candidate: count += 1 else: count -= 1 # Phase 2: Verify the candidate count = 0 for num in nums: if num == candidate: count += 1 if count > len(nums) // 2: return candidate else: return None"},{"question":"You are given a string S consisting of lowercase English letters and you need to determine the number of substrings of S that can form palindromes. A substring is defined as any contiguous sequence of characters within the string. To efficiently solve this, you need to implement a function that returns the count of palindromic substrings in the input string. ------ Input ------ The first line contains an integer T, the number of test cases. Each of the next T lines contains a single string S. ------ Output ------ For each test case, output a single line containing the count of palindromic substrings in the input string. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 ------ Subtasks ------ Subtask #1 (40 points): 1 ≤ |S| ≤ 100 Subtask #2 (60 points): original constraints ------ Sample Input 1 ------ 3 abc aaa racecar ------ Sample Output 1 ------ 3 6 10 ------ Explanation 1 ------ Test case 1. The palindromic substrings are: \\"a\\", \\"b\\", \\"c\\". Test case 2. The palindromic substrings are: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\". Test case 3. The palindromic substrings are: \\"r\\", \\"a\\", \\"c\\", \\"e\\", \\"c\\", \\"a\\", \\"r\\", \\"cec\\", \\"aceca\\", \\"racecar\\".","solution":"def count_palindromic_substrings(s): Counts the number of palindromic substrings in the input string s. n = len(s) count = 0 # Center around each possible center for palindromes for center in range(2 * n - 1): left = center // 2 right = left + center % 2 while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 return count def solve_palindrome_substrings(test_cases): Process the list of test cases and returns the result for each case. results = [] for s in test_cases: results.append(count_palindromic_substrings(s)) return results"},{"question":"Determine the longest increasing subsequence in a given array of integers. An increasing subsequence is a sequence of integers chosen from the array in which the elements are in strictly increasing order. Example 1: Input: arr = [10, 22, 9, 33, 21, 50, 41, 60, 80] Output: 6 Explanation: The longest increasing subsequence is [10, 22, 33, 50, 60, 80], which has length 6. Example 2: Input: arr = [3, 10, 2, 1, 20] Output: 3 Explanation: The longest increasing subsequence is [3, 10, 20], which has length 3. Your Task: You don\'t need to read or print anything. Your task is to complete the function `longest_increasing_subsequence()` which takes the array `arr` as input parameter and returns the length of the longest increasing subsequence. Expected Time Complexity: O(n^2) Expected Space Complexity: O(n) Constraints: 1 <= arr.length <= 1000 -10^6 <= arr[i] <= 10^6","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 # Initialize the LIS array with 1s since each element is a subsequence of length 1 lis = [1] * len(arr) # Compute the LIS values for i in range(1, len(arr)): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return the maximum value in lis array return max(lis)"},{"question":"For a directed graph with n nodes and m edges, perform the following operations: * add_edge(u, v): Add a directed edge from node u to node v. * remove_edge(u, v): Remove the directed edge from node u to node v. * query_reachable(u, v): Determine if there is a path from node u to node v. Print \\"YES\\" if there is a path, otherwise print \\"NO\\". Constraints * 1 leq n leq 100,000 * 1 leq m leq 200,000 * 1 leq q leq 200,000 * 1 leq u, v leq n Input The input is given in the following format. ``` n m q u_1 v_1 u_2 v_2 : u_m v_m query_1 query_2 : query_q ``` Each query query_i is given by ``` 1 u v 2 u v 3 u v ``` where the first digits 1, 2, and 3 represent add_edge, remove_edge, and query_reachable operations respectively. Output For each query_reachable operation, print \\"YES\\" if there is a path from u to v, otherwise print \\"NO\\". Example Input ``` 4 2 5 1 2 2 3 3 1 2 1 3 4 3 1 4 1 2 4 3 1 4 ``` Output ``` YES NO YES ```","solution":"class DirectedGraph: def __init__(self, n): self.n = n self.adj_list = [[] for _ in range(n + 1)] def add_edge(self, u, v): self.adj_list[u].append(v) def remove_edge(self, u, v): if v in self.adj_list[u]: self.adj_list[u].remove(v) def query_reachable(self, u, v): visited = [False] * (self.n + 1) return self.dfs(u, v, visited) def dfs(self, u, v, visited): if u == v: return True visited[u] = True for neighbor in self.adj_list[u]: if not visited[neighbor]: if self.dfs(neighbor, v, visited): return True return False # Sample data for testing graph = DirectedGraph(4) graph.add_edge(1, 2) graph.add_edge(2, 3) assert graph.query_reachable(1, 2) == True assert graph.query_reachable(1, 3) == True assert graph.query_reachable(1, 4) == False graph.add_edge(3, 4) assert graph.query_reachable(1, 4) == True graph.remove_edge(3, 4) assert graph.query_reachable(1, 4) == False"},{"question":"In a country, there are N teams competing in a sports championship. Each team has a unique identifier ranging from 1 to N. The championship is organized in M rounds. In each round, a team may win or lose a match, and for each win, the team earns 3 points and for each loss, it earns 0 points. Draws do not occur in this championship. Given the results of each round, determine the final points for each team at the end of the championship. ------ Input Format ------ - The first line of the input contains two space-separated integers N and M, denoting the number of teams and the number of rounds, respectively. - The next M lines describe the results of each round. Each line contains two space-separated integers T_{i} and R_{i}: - T_{i} represents the team identifier (1 ≤ T_{i} ≤ N). - R_{i} represents the result (0 for loss and 1 for win). ------ Output Format ------ - The output should consist of N lines, each containing a single integer representing the points of the i-th team after M rounds. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ M ≤ 1000 1 ≤ T_{i} ≤ N 0 ≤ R_{i} ≤ 1 ------ Sample Input 1 ------ 3 5 1 1 2 0 3 1 1 0 2 1 ------ Sample Output 1 ------ 3 3 3 ------ Explanation 1 ------ Team 1 wins one round and loses one round, earning 1 times 3 = 3 points. Team 2 loses one round and wins one round, earning 1 times 3 = 3 points. Team 3 wins one round, earning 1 times 3 = 3 points.","solution":"def calculate_points(N, M, results): Calculate the points of each team after M rounds in the championship. Args: N : int : Number of teams M : int : Number of rounds results : list of tuples : List of tuples where each tuple has (T_i, R_i) Returns: list : List of integers representing the points of each team points = [0] * N for T_i, R_i in results: if R_i == 1: points[T_i - 1] += 3 return points"},{"question":"You are given an array of integers and your task is to make all elements of the array equal. You can perform the following operation as many times as needed: - Choose the element with the minimum value and increase its value by 1. - Choose the element with the maximum value and decrease its value by 1. Each operation takes 1 unit of time. Your goal is to find out the minimum time required to make all elements of the array equal. Input format: - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, denoting the size of the array. - The second line contains N integers, representing the elements of the array. Output format: For each test case, print the minimum time required to make all elements equal. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ Ai ≤ 10^9, where Ai denotes the i-th initial element of the array. SAMPLE INPUT 2 4 1 2 3 4 3 5 6 7 SAMPLE OUTPUT 3 2 Explanation: For the first test case, you can make all elements equal in 3 operations by the following steps: 1. Increase the 1 to 2 and decrease the 4 to 3. Array becomes [2, 2, 3, 3]. 2. Increase one of the 2s to 3 and decrease one of the 3s to 2. Array becomes [3, 2, 3, 2]. 3. Increase the 2 to 3 and decrease the 3 to 2. Array becomes [3, 3, 3, 3]. For the second test case, you can make all elements equal in 2 operations by the following steps: 1. Increase the 5 to 6 and decrease the 7 to 6. Array becomes [6, 6, 6]. 2. Since all elements are already equal, no more operations are needed.","solution":"def min_time_to_make_elements_equal(arr): Given an array of integers, returns the minimum time required to make all elements of the array equal. max_value = max(arr) min_value = min(arr) return (max_value - min_value) // 2 def process_test_cases(t, test_cases): results = [] for case in test_cases: n, arr = case results.append(min_time_to_make_elements_equal(arr)) return results"},{"question":"In a small town named AlgoLand, there are `n` houses aligned in a row, each with a unique house number starting from 1 up to `n`. The residents of AlgoLand are fond of organizing frequent neighborhood events and have decided to display flags on certain houses in a pattern. The town\'s mayor decided to put up flags on every k-th house starting from the first house. Given the total number of houses `n` and the step value `k`, write a program to determine which house numbers will display flags. -----Input----- The first line of the input will contain two integers, `n` (1 ≤ n ≤ 10^9) and `k` (1 ≤ k ≤ n) — the number of houses and the step value, respectively. -----Output----- Output a list of house numbers that will display flags in ascending order. -----Example----- Input 10 3 Output 1 4 7 10","solution":"def flag_house_numbers(n, k): Returns a list of house numbers that will display flags in ascending order. :param n: int - the total number of houses (1 ≤ n ≤ 10^9) :param k: int - the step value (1 ≤ k ≤ n) :return: list of int - house numbers that will display flags return list(range(1, n + 1, k))"},{"question":"**URL Shortener** # Overview Your task is to implement a URL Shortener service. This service will take a long URL and generate a shortened version of it, which can be stored and later retrieved to redirect to the original long URL. # Requirements 1. Create two main functions: - `shorten_url(url: str) -> str`: This function takes a long URL as an input and returns a shortened URL. - `retrieve_url(short_url: str) -> str`: This function takes a shortened URL input and returns the original long URL. 2. Use a consistent and unique shortening mechanism. You can use an incremental counter or hash function to generate a unique short path for each URL, e.g., using base62 encoding. 3. Design a method to store the mapping between the original URLs and their shortened versions. For simplicity, you can use a dictionary to hold these mappings. 4. Ensure that the shortened URLs are unique and can correctly map back to the original long URLs. 5. Enforce that the length of the shortened URLs is manageable and consistent. 6. You should handle edge cases such as handling invalid short URLs during retrieval or attempting to shorten an already shortened URL. # Constraints and Considerations - Assume that the input URLs are always valid URLs (you don\'t need to validate them). - Handle large sets of URLs efficiently. - Ensure the implementation is capable of handling concurrent requests if being used in a real-world scenario. # Input/Output * Input: string representing the long URL to be shortened. * Output: string representing the shortened URL. Here is an example of how these functions could be used: ```python url = \\"https://www.example.com/some/very/long/path/to/resource\\" short_url = shorten_url(url) print(short_url) # Expected: \\"http://short.url/abc123\\" original_url = retrieve_url(short_url) print(original_url) # Expected: \\"https://www.example.com/some/very/long/path/to/resource\\" ``` Implement these functions in Python: ```python class URLShortener: def __init__(self): self.url_map = {} self.counter = 0 self.base62 = \\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\" def encode(self, num): Converts a given integer to a base62 string. if num == 0: return self.base62[0] arr = [] base = len(self.base62) while num: rem = num % base num = num // base arr.append(self.base62[rem]) arr.reverse() return \'\'.join(arr) def shorten_url(self, url: str) -> str: Convert a long URL to a shortened URL if url in self.url_map: return self.url_map[url] short_path = self.encode(self.counter) self.url_map[url] = \\"http://short.url/\\" + short_path self.url_map[\\"http://short.url/\\" + short_path] = url self.counter += 1 return \\"http://short.url/\\" + short_path def retrieve_url(self, short_url: str) -> str: Retrieve the original long URL from a shortened URL if short_url in self.url_map: return self.url_map[short_url] return \\"Error: URL not found!\\" # Usage example url_shortener = URLShortener() long_url = \\"https://www.example.com/some/very/long/path/to/resource\\" shortened = url_shortener.shorten_url(long_url) print(shortened) # Outputs: http://short.url/a retrieved = url_shortener.retrieve_url(shortened) print(retrieved) # Outputs: https://www.example.com/some/very/long/path/to/resource ``` Your implementation should be able to handle the described inputs and outputs effectively, ensuring accuracy and uniqueness in URL shortening and retrieval.","solution":"class URLShortener: def __init__(self): self.url_map = {} self.counter = 0 self.base62 = \\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\" def encode(self, num): Converts a given integer to a base62 string. if num == 0: return self.base62[0] arr = [] base = len(self.base62) while num: rem = num % base num = num // base arr.append(self.base62[rem]) arr.reverse() return \'\'.join(arr) def shorten_url(self, url: str) -> str: Convert a long URL to a shortened URL if url in self.url_map: return self.url_map[url] short_path = self.encode(self.counter) short_url = \\"http://short.url/\\" + short_path self.url_map[url] = short_url self.url_map[short_url] = url self.counter += 1 return short_url def retrieve_url(self, short_url: str) -> str: Retrieve the original long URL from a shortened URL if short_url in self.url_map: return self.url_map[short_url] return \\"Error: URL not found!\\""},{"question":"Shiro loves solving puzzles and he recently came across the \'Sudoku Solver\' challenge. In this challenge, you are given a partially filled 9x9 grid of a Sudoku puzzle and you need to fill in the empty cells such that each row, each column, and each of the nine 3x3 subgrids that compose the grid contain all of the digits from 1 to 9, without repeating any digit within a row, column, or subgrid. Sudoku puzzles are typically well-posed, which means there is only one solution for the given initial configuration. Your task is to write a program that solves the Sudoku puzzle and outputs the completed grid. Input The input consists of a 9x9 grid of integers. Empty cells are represented by the digit 0. Output Output the completed 9x9 grid, where each row is printed on a new line. Each digit within a row should be separated by a single space. Examples Input 5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 Output 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Input 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 4 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 0 0 0 0 0 5 0 0 0 0 0 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 Output 3 4 5 6 8 9 7 1 2 1 8 7 2 4 5 6 3 9 2 9 6 4 3 7 1 5 8 8 2 4 7 1 6 3 9 5 9 1 3 5 7 2 8 6 4 6 5 7 3 9 8 2 7 1 4 3 1 9 2 6 5 8 7 5 7 8 6 1 3 9 2 4 7 6 2 1 5 4 4 3 3 Constraints * The input grid always represents a well-formed Sudoku puzzle with exactly one solution. * Each of the numbers in the grid is either 0 or an integer from 1 to 9. * You may assume the grid is sparsely filled meaning each row and column contains more zeros than non-zero digits.","solution":"def is_valid(board, row, col, num): Check if it\'s valid to place the number \'num\' in the board at (row, col). # Check if the number is in the current row or column for i in range(9): if board[row][i] == num or board[i][col] == num: return False # Check if the number is in the current 3x3 subgrid start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(start_row, start_row + 3): for j in range(start_col, start_col + 3): if board[i][j] == num: return False return True def solve_sudoku(board): Solve the Sudoku board using backtracking. for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 return False return True def print_board(board): Print the Sudoku board in the required format. for row in board: print(\\" \\".join(str(num) for num in row)) def solve_and_print_sudoku(grid): Solves the given Sudoku puzzle and prints the completed grid. solve_sudoku(grid) print_board(grid) # Example usage grid = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] solve_and_print_sudoku(grid)"},{"question":"A clever thief wants to break into a digital vault protected by a numerical passcode. The passcode is a string of digits, but unfortunately, the thief only managed to obtain the sum of the squares of the digits. Given the sum of the squares of the digits, your task is to determine how many different passcodes of length exactly `L` could have produced that sum. # Input: - The first line of input contains an integer `T`, the number of test cases. - The next `T` lines each contain two integers `S` and `L`: - `S`: the sum of the squares of the digits of the passcode. - `L`: the length of the passcode. # Output: - For each test case, output a single integer representing the number of distinct passcodes of length `L` that could produce the sum `S`. # Constraints: - 1 ≤ T ≤ 10^5 - 1 ≤ S ≤ 500 - 1 ≤ L ≤ 100 # Example: Input 4 1 1 4 1 9 2 13 2 Output 1 1 1 2 # Explanation: - Case 1: Only passcode \\"1\\" can produce the sum 1 with length 1. - Case 2: Only passcode \\"2\\" can produce the sum 4 with length 1. - Case 3: The passcode \\"33\\" produces the sum 1^2 + 8^2 = 9 with length 2. - Case 4: The passcodes \\"49\\" and \\"85\\" both produce the sum 4^2 + 9^2 = 16 & 8^2 + 1^2 = 65 with length 2. # Note: - Ensure efficient handling of large inputs and outputs. - The output must be computed within acceptable time limits.","solution":"def count_passcodes(s, l, memo): if s < 0 or l < 0: return 0 if s == 0 and l == 0: return 1 if s == 0 or l == 0: return 0 if (s, l) in memo: return memo[(s, l)] count = 0 for d in range(10): count += count_passcodes(s - d * d, l - 1, memo) memo[(s, l)] = count return count def solve(test_cases): memo = {} results = [] for s, l in test_cases: results.append(count_passcodes(s, l, memo)) return results"},{"question":"In a chess game, the position of pieces is usually denoted using algebraic notation. The columns are labeled from \'a\' to \'h\' and the rows are labeled from \'1\' to \'8\'. For example, the piece at the bottom-left corner of the board is at position \'a1\'. Given the current position of a Knight on a chessboard, determine all possible positions the Knight can move to in one move. Knights move in an L-shape: two squares in a horizontal or vertical direction, then one square in a perpendicular direction. Note that the Knight cannot move off the board. ------ Input ------ The first line contains an integer T denoting the number of test cases. Each of the next T lines contains a single string of length 2, representing the current position of the Knight on the chessboard. ------ Output ------ For each test case, print all possible positions the Knight can move to, each on a new line, in any order. Separate the outputs of different test cases by a blank line. ------ ------ Constraints ----- 1 ≤ T ≤ 1000 Each string consists of a column letter from \'a\' to \'h\' and a row number from \'1\' to \'8\' representing a valid position on the chessboard. ----- Sample Input 1 ------ 2 e4 a1 ----- Sample Output 1 ------ c3 c5 d2 d6 f2 f6 g3 g5 b3 b4","solution":"def knight_moves(position): Given a knight\'s position on a chessboard, return all possible positions the knight can move to in one move. col, row = position col = ord(col) row = int(row) possible_moves = [ (col + 1, row + 2), (col + 1, row - 2), (col - 1, row + 2), (col - 1, row - 2), (col + 2, row + 1), (col + 2, row - 1), (col - 2, row + 1), (col - 2, row - 1) ] valid_moves = [] for c, r in possible_moves: if 97 <= c <= 104 and 1 <= r <= 8: valid_moves.append(chr(c) + str(r)) return sorted(valid_moves) def process_knight_moves(test_cases): Given a list of test cases representing the knight\'s position on a chessboard, return the possible positions the knight can move to for each test case. result = [] for position in test_cases: result.append(knight_moves(position)) return result"},{"question":"A pet adoption agency wants to create a scheduling calendar for the upcoming month. They receive applications from potential adopters who want to visit the agency on specific days. Each day can host only one visitor, and the scheduling should ensure that the most number of unique visitors can visit the agency. Given an array of integers, where each integer represents a day of the month a visitor wants to schedule an appointment, write a function to find the maximum number of unique visitors that can be scheduled in the upcoming month. Input - The first input line contains a single integer n — the number of applications received. - The second line contains n space-separated integers d1, d2, ..., dn — each representing a day of the month requested by a visitor. Output Print a single number — the maximum number of unique visitors that can be scheduled. Examples Input 5 1 3 2 3 2 Output 3 Input 4 7 7 7 7 Output 1 Note In the first example, the visitors request the days 1, 3, 2, 3, 2. The maximum number of unique visitors that can be scheduled is 3, for the days 1, 2, and 3. In the second example, all visitors request the same day (7). Thus, only one unique visitor can be scheduled.","solution":"def max_unique_visitors(n, days): Returns the maximum number of unique visitors that can be scheduled. Parameters: n (int): The number of applications received. days (list of int): Each integer represents a day of the month requested by a visitor. Returns: int: The maximum number of unique visitors that can be scheduled. return len(set(days))"},{"question":"Sunny loves playing with strings. He has a special game where he needs to find the length of the longest substring that consists of the same character. You are given multiple test cases to help Sunny figure out the answer for each string. Input The first line of the input contains the number of test cases, t. Each of the following t lines contains a single string s. Output The output contains t lines each containing the length of the longest substring of the same character for that particular test case. Constraints 1 <= t <= 1000 1 <= |s| <= 100000 Example Input: 2 aabbbbbcc aaaaabaaa Output: 5 5","solution":"def longest_same_char_substring(strings): Finds the length of the longest substring of the same character for each string in the input list. Parameters: strings (list of str): List of input strings. Returns: list of int: List containing the length of the longest substring of the same character for each input string. result = [] for s in strings: max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 1 result.append(max_length) return result # Function to process the input format def process_input(input_lines): t = int(input_lines[0]) strings = input_lines[1:t+1] return longest_same_char_substring(strings)"},{"question":"You have been tasked with organizing a race event. For the event, you need to design a track such that the total length of the track is minimized but it contains a series of required waypoints. Given a set of waypoints, each with a specific distance between them, determine the minimum total distance of the track if you start at any waypoint, visit each waypoint exactly once, and return to the starting waypoint (a complete tour). ------ Input ------ The first line contains an integer t, the number of test cases (1 ≤ t ≤ 10). Then t test cases follow. Each test case has the following form: The first line contains an integer N, the number of waypoints (3 ≤ N ≤ 15). Then N lines follow, each line contains two integers X, Y representing the coordinates of a waypoint (-100 ≤ X, Y ≤ 100). ------ Output ------ For each test case, print in a single line the minimum total distance of the track in the format rounded to 2 decimal places. ----- Sample Input 1 ------ 1 4 0 0 2 0 2 2 0 2 ----- Sample Output 1 ------ 8.00","solution":"from itertools import permutations from math import sqrt def calculate_distance(point1, point2): return sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) def find_minimum_distance(waypoints): n = len(waypoints) min_distance = float(\'inf\') for perm in permutations(range(n)): current_distance = 0 for i in range(n): current_distance += calculate_distance(waypoints[perm[i]], waypoints[perm[(i+1) % n]]) if current_distance < min_distance: min_distance = current_distance return round(min_distance, 2) def minimum_track_distance(test_cases): results = [] for case in test_cases: N = case[0] waypoints = case[1] min_dist = find_minimum_distance(waypoints) results.append(min_dist) return results def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): N = int(data[index]) index += 1 waypoints = [] for _ in range(N): X = int(data[index]) Y = int(data[index + 1]) waypoints.append((X, Y)) index += 2 test_cases.append((N, waypoints)) results = minimum_track_distance(test_cases) for result in results: print(f\\"{result:.2f}\\")"},{"question":"Given an array of integers representing the number of hours worked each day over a span of n days, write a function `maxConsecutiveWorkHours` to find the maximum number of consecutive days with strictly increasing work hours. Note: - The input array will have at least one element and at most 50,000 elements. - Each element in the array is a non-negative integer. Example 1: Input: [1, 2, 3, 2, 4, 5, 7] Output: 4 Explanation: The longest streak of strictly increasing work hours is [2, 4, 5, 7], which has length 4. Example 2: Input: [5, 3, 1, 2] Output: 2 Explanation: The longest streak of strictly increasing work hours is [1, 2], which has length 2.","solution":"def maxConsecutiveWorkHours(hours): Finds the maximum number of consecutive days with strictly increasing work hours. :param hours: List of integers representing the number of hours worked each day. :return: Integer, the length of the longest streak of strictly increasing work hours. if not hours: return 0 max_length = 1 current_length = 1 for i in range(1, len(hours)): if hours[i] > hours[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Johnny has a sequence of integers `a` of length n and he is asking you to find another sequence `b` of the same length which satisfies the following conditions: For any l and r (1 leq l leq r leq n) the sum of the elements of the subsequence a_l, a_{l+1}, ldots, a_r is equal to the sum of the elements of the subsequence b_l, b_{l+1}, ldots, b_r; The maximum element in sequence `b` should be minimized. If there are multiple substrings which satisfy the conditions, output any. -----Input----- The first line contains an integer n (1 leq n leq 10^5). The second line contains n integers a_1, a_2, ldots, a_n (|a_i| leq 10^9). -----Output----- Output a sequence b of length n which satisfies the above conditions. If there are many such sequences, output any of them. -----Examples----- Input 3 1 -2 1 Output 0 -2 0 Input 6 5 5 5 5 5 5 Output 1 1 1 1 1 1 Input 4 100 -100 100 -100 Output 0 -100 100 -100 -----Note----- In the first example: For l = 1, r = 1, the sum of the single element `a_1` is `1` and the sum of the single element `b_1` is `0`, and so on. For l = 1, r = 3, the sum of the elements is 0. Both sequences add up to the same sum for any subrange, hence they meet the conditions and the maximum element in `b` is minimized. The second example: Each element in sequence `a` is the same, so the minimal sequence `b` satisfying the conditions would have each element as small as possible while maintaining the sum. In the third example: The sequence maintains the balance of sums for every subrange considered.","solution":"def find_sequence_b(n, a): Returns the sequence b which satisfies the conditions specified in the problem. # We will generate b such that every positive element in `a` is transformed to 0 in `b` b = [0] * n for i in range(n): if a[i] < 0: b[i] = a[i] return b"},{"question":"You are given an integer `k` and an array of integers `a` of size `n`. Each element in the array represents the value on a card, and you need to select a subset of these cards to form a deck such that the deck\'s value is maximized but does not exceed a given limit `k`. The deck\'s value is the sum of the values of the cards it contains. Calculate the maximum possible deck value that does not exceed `k`. Input The first line contains two integers `n` (1 ≤ n ≤ 50) and `k` (1 ≤ k ≤ 10^9) — the size of the array `a` and the maximum allowed deck value, respectively. The second line contains `n` integers (1 ≤ a_i ≤ 10^9) — the values of the cards in array `a`. Output Print a single integer — the maximum possible deck value that does not exceed `k`. Examples Input 5 10 2 3 5 8 7 Output 10 Input 6 15 1 2 3 4 5 6 Output 15 Input 3 50 20 30 40 Output 50","solution":"def max_deck_value(n, k, a): Returns the maximum possible deck value that does not exceed k. n (int): The size of the array a. k (int): The maximum allowed deck value. a (list of int): The values of the cards. return (int): The maximum possible deck value not exceeding k. from itertools import combinations max_value = 0 # Check all possible subsets for r in range(1, n + 1): for subset in combinations(a, r): subset_sum = sum(subset) if subset_sum <= k: max_value = max(max_value, subset_sum) return max_value"},{"question":"Mina loves puzzles and she recently came across a fascinating problem involving sequences. She needs your help to solve it so she can continue enjoying her puzzles. The problem is: Given a sequence of integers, determine the length of the longest subsequence where all elements are equal. If there are multiple subsequences of the same length, any of these lengths will suffice. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input Format The first line of input contains {N}, the number of elements in the sequence. The next line contains {N} integers, which are the elements of the sequence. Output Format Output a single integer which is the length of the longest subsequence where all elements are equal. Constraints 1 leq N leq 10^5 1 leq A_i leq 10^9 for each integer A_i in the sequence. Sample Input 6 1 2 2 3 2 4 Sample Output 3 Explanation In this example, the number `2` appears consecutively three times at indices 2, 3, and 5, making it the longest subsequence where all elements are equal. Thus, the length is 3.","solution":"def longest_equal_subsequence_length(n, sequence): Returns the length of the longest subsequence where all elements are equal. Parameters: n (int): the number of elements in the sequence. sequence (list): the list of integers in the sequence. Returns: int: the length of the longest subsequence where all elements are equal. if n == 0: return 0 element_count = {} for number in sequence: if number in element_count: element_count[number] += 1 else: element_count[number] = 1 return max(element_count.values())"},{"question":"Collecting Stamps Nicky is an avid stamp collector and has a collection comprising several unique types of stamps. A friend has gifted Nicky a new set of stamps, which also includes some types of stamps that he already possesses. Nicky wants to know how many new and unique types of stamps he will be adding to his collection from this new set. Given the list of current types of stamps that Nicky possesses and the list of types of stamps in the new set, determine how many new types of stamps Nicky will add to his collection. # Input The input is given in the following format: ``` M stamps_possessed_1 stamps_possessed_2 stamps_possessed_3 ... stamps_possessed_M K stamps_new_1 stamps_new_2 stamps_new_3 ... stamps_new_K ``` Where: - `M` is the number of types of stamps Nicky already possesses. - `stamps_possessed_i` is the i-th type of stamp Nicky possesses. - `K` is the number of types of stamps in the new set. - `stamps_new_i` is the i-th type of stamp in the new set. # Output Print the number of new and unique types of stamps Nicky will add to his collection. # Constraints - `1 ≤ M ≤ 100000 (10^5)` - `1 ≤ K ≤ 100000 (10^5)` - All stamp types are integers and fit in a 32-bit signed integer. # Example Input 1 ``` 5 1 2 3 4 5 4 3 4 5 6 ``` # Example Output 1 ``` 1 ``` # Example Input 2 ``` 3 7 8 9 4 6 7 8 9 ``` # Example Output 2 ``` 1 ``` # Explanation In Example 1, there is one new type of stamp (type `6`) in the new set that Nicky does not already possess. In Example 2, there is one new type of stamp (type `6`) in the new set that Nicky does not already possess.","solution":"def count_new_stamps(possessed_stamps, new_stamps): Returns the number of new and unique stamp types that will be added to the collection. possessed_set = set(possessed_stamps) new_set = set(new_stamps) # Determine the number of new stamps not in the possessed set new_unique_stamps = new_set - possessed_set return len(new_unique_stamps)"},{"question":"Alex is fascinated with constructing sequences using digits and has come up with his own rules for generating them. He defines a sequence where each term is created by concatenating the digits of a given base number. Let\'s call a number formed in this way a \\"concatenated sequence number\\" if it is generated by concatenating the digits of a base number multiple times until it reaches a desired length. For example, for the base number 23 and length 5, the resulting \\"concatenated sequence number\\" would be 23232. Alex wants to find the k-th digit in the concatenated sequence of a given base number of certain length. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The first and only line of each test case contains three integers text{base}, text{len}, k (1 le text{base} le 10^6; 1 le text{len} le 10^6; 1 le k le text{len}). -----Output----- For each test case, print one integer — the k-th digit of the concatenated sequence number of the given base number of the specified length. -----Examples----- Input 3 23 5 3 5 3 1 123 9 7 Output 2 5 1 -----Note----- For base = 23 and length = 5, the concatenated sequence is 23232, hence the 3rd digit is 2. For base = 5 and length = 3, the concatenated sequence is 555, hence the 1st digit is 5. For base = 123 and length = 9, the concatenated sequence is 123123123, hence the 7th digit is 1.","solution":"def find_kth_digit(base, length, k): base_str = str(base) concat_seq = base_str * ((length // len(base_str)) + 1) return int(concat_seq[k - 1]) def find_digits_for_tests(test_cases): results = [] for base, length, k in test_cases: results.append(find_kth_digit(base, length, k)) return results"},{"question":"The city of Gridville is designed as an n times m grid with some cells containing obstacles represented by \'#\' and some cells being empty represented by \'.\'. Each resident of Gridville wants to know how many distinct paths exist from the top-left corner of the grid (1, 1) to the bottom-right corner of the grid (n, m) if they are only allowed to move right or down. Obstacle cells cannot be used in any path. Write a program that finds the number of distinct paths for each grid provided in the input. -----Input----- The first line contains an integer t (1 le t le 10) — the number of test cases. Each test case starts with a line containing two integers n and m (1 le n, m le 500) — the dimensions of the grid. The next n lines each contain m characters \' # \' or \' . \' representing the grid layout. It is guaranteed that the sum of the products n cdot m over all test cases does not exceed 500^2 (sum n cdot m le 500^2). -----Output----- For each test case, print a single integer — the number of distinct paths from the top-left corner to the bottom-right corner of the grid. If there is no valid path, output 0. -----Examples----- Input 3 2 2 .# #. 3 3 ... .#. ... 3 3 # # # Output 0 2 0 -----Note----- In the first test case, there are no valid paths due to obstacles blocking the way. In the second test case, the two valid paths are: 1. Move right, right, down, down. 2. Move down, down, right, right. In the third test case, all locations are blocked by obstacles, so there are no valid paths.","solution":"def count_paths(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def process_test_cases(t, test_cases): results = [] for test_case in test_cases: n, m, grid = test_case result = count_paths(n, m, grid) results.append(result) return results"},{"question":"You are given a sequence of N integers and an integer K. Your task is to find the length of the longest subsequence such that the subsequence contains at most K distinct integers. Input The first line of the input contains two space-separated integers N and K denoting the number of integers in the sequence and the number of distinct integers allowed in the subsequence. The second line contains N space-separated integers representing the sequence. Output Output the length of the longest subsequence that contains at most K distinct integers. Constraints 1 ≤ N ≤ 10^5 1 ≤ K ≤ N 1 ≤ Each integer in sequence ≤ 10^9 Example Input: 10 2 1 2 1 2 3 3 4 5 1 1 Output: 4 Explanation The longest subsequence containing at most 2 distinct integers is [1, 1, 1, 1] or [3, 3, 1, 1], which both have a length of 4. Hence, the answer is 4.","solution":"def longest_subsequence_with_k_distinct(N, K, sequence): from collections import defaultdict left = 0 right = 0 max_length = 0 current_count = defaultdict(int) distinct_count = 0 while right < N: current_count[sequence[right]] += 1 if current_count[sequence[right]] == 1: distinct_count += 1 while distinct_count > K: current_count[sequence[left]] -= 1 if current_count[sequence[left]] == 0: distinct_count -= 1 left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"In a coding puzzle, you are given a string of parentheses, and your task is to find the maximum depth of nested parentheses. The depth of nested parentheses means how many levels of parentheses are contained within each other. For example, the string \\"(())\\" has a depth of 2, and the string \\"()(())\\" has a depth of 2 as well. -----Input----- The first line contains a single string s consisting of characters \'(\' and \')\' only. -----Output----- Output a single integer representing the maximum depth of nested parentheses. -----Constraints----- - 1 ≤ length of s ≤ 10^5 -----Example----- Input: \\"(())\\" Output: 2 Input: \\"()\\" Output: 1 Input: \\"(()(()))\\" Output: 3 Input: \\"\\" Output: 0 -----Explanation----- In the first example, there are two levels of nesting, hence the output is 2. In the second example, there is only one level, hence output is 1. In the third example, the maximum nesting depth is 3. In the fourth example, an empty string results in depth of 0.","solution":"def max_depth(s: str) -> int: Return the maximum depth of nested parentheses in the string \'s\'. Parameters: s (str): The input string containing parentheses. Returns: int: The maximum depth of nested parentheses. current_depth = 0 max_depth = 0 for char in s: if char == \'(\': current_depth += 1 if current_depth > max_depth: max_depth = current_depth elif char == \')\': current_depth -= 1 return max_depth"},{"question":"Given an array of positive integers, write a function `find_non_repeating(array)` that returns the first non-repeating element in the array. If all elements repeat or the array is empty, return `None`. Example: ``` Input: [4, 5, 1, 2, 0, 4] Output: 5 Input: [1, 2, 3, 1, 3, 2, 4] Output: 4 Input: [1, 1, 1, 1] Output: None ``` Guidelines: 1. The function should traverse the array at most twice. 2. Aim for a solution with a time complexity of O(n). 3. The space complexity should be O(n) or O(1). 4. Provide appropriate edge case handling for empty arrays. You may assume that all elements of the array are integers. Example Code (Python): ```python def find_non_repeating(array): # Your code here # Example usage print(find_non_repeating([4, 5, 1, 2, 0, 4])) # Output: 5 print(find_non_repeating([1, 2, 3, 1, 3, 2, 4])) # Output: 4 print(find_non_repeating([1, 1, 1, 1])) # Output: None print(find_non_repeating([])) # Output: None ```","solution":"def find_non_repeating(array): Returns the first non-repeating element of the array. If all elements repeat or the array is empty, returns None. if not array: return None element_count = {} # First pass: count the occurrences of each element for element in array: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 # Second pass: find the first element with count 1 for element in array: if element_count[element] == 1: return element return None"},{"question":"=====Function Descriptions===== mean The tool mean returns the arithmetic mean of the elements along the specified axis. import numpy my_array = numpy.array([1, 2, 3, 4, 5, 6, 7, 8, 9]) print numpy.mean(my_array) #5.0 var The tool var returns the variance of the elements along the specified axis. import numpy my_array = numpy.array([1, 2, 3, 4, 5, 6, 7, 8, 9]) print numpy.var(my_array) #6.66666666667 std The tool std returns the standard deviation of the elements along the specified axis. import numpy my_array = numpy.array([1, 2, 3, 4, 5, 6, 7, 8, 9]) print numpy.std(my_array) #2.58198889747 =====Problem Statement===== You are given a 1-D array, A. Your task is to print the mean, variance, and standard deviation of all the elements of A. =====Input Format===== A single line of input consisting of space-separated elements of array A. =====Output Format===== On the first line, print the mean of A. On the second line, print the variance of A. On the third line, print the standard deviation of A.","solution":"import numpy as np def mean_var_std(input_array): Returns the mean, variance, and standard deviation of the elements of the input array. Parameters: input_array (list): A list of numbers. Returns: tuple: A tuple containing mean, variance, and standard deviation. np_array = np.array(input_array) mean_val = np.mean(np_array) var_val = np.var(np_array) std_val = np.std(np_array) return mean_val, var_val, std_val # Usage example input_array = [1, 2, 3, 4, 5, 6, 7, 8, 9] mean_val, var_val, std_val = mean_var_std(input_array) print(f\\"{mean_val}n{var_val}n{std_val}\\")"},{"question":"Given a string s containing only lowercase English letters, your task is to determine the index of the first non-repeating character. If there is no non-repeating character, return -1. Example 1: Input: s = \\"leetcode\\" Output: 0 Explanation: The first non-repeating character is \'l\' at index 0. Example 2: Input: s = \\"loveleetcode\\" Output: 2 Explanation: The first non-repeating character is \'v\' at index 2. Example 3: Input: s = \\"aabb\\" Output: -1 Explanation: There is no non-repeating character. Your Task: You don\'t need to read input or print anything. Complete the function firstUniqChar() which takes the string s as input parameter and returns the index of the first non-repeating character, or -1 if there is no non-repeating character. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) (Use of constant space hashmap) Constraints: 1 <= s.length <= 10^5 s consists of only lowercase English letters.","solution":"def firstUniqChar(s): Returns the index of the first non-repeating character in the string s. If there is no non-repeating character, return -1. # Create a dictionary to store character frequencies char_count = {} # Populate the dictionary with the count of each character in the string for char in s: char_count[char] = char_count.get(char, 0) + 1 # Iterate through the string again and return the index of the first non-repeating character for index, char in enumerate(s): if char_count[char] == 1: return index # If no non-repeating character is found, return -1 return -1"},{"question":"A new online game allows players to form alliances. Each player starts alone and can choose to ally with other players. When a player allies with another player, all their alliances merge into one. There are n players and m moves describing alliances between players. Can you determine if all players are in the same alliance at the end of the m moves? -----Input----- Input starts with two integers n (2 leq n leq 100) and m (1 leq m leq 100) on the first line. The next m lines give the details of each move. Each line has two integers u and v (1 leq u, v leq n, u neq v), denoting that player u and player v formed an alliance in that move. -----Output----- Output “yes” if all players are in the same alliance at the end of the m moves. Otherwise, output “no”. -----Examples----- Sample Input 1: 4 3 1 2 2 3 3 4 Sample Output 1: yes Sample Input 2: 4 2 1 2 3 4 Sample Output 2: no Sample Input 3: 5 4 1 2 2 3 3 4 4 5 Sample Output 3: yes","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, x, y): xroot = find(parent, x) yroot = find(parent, y) parent[xroot] = yroot def are_all_players_in_same_alliance(n, moves): parent = list(range(n+1)) for u, v in moves: union(parent, u, v) root = find(parent, 1) for i in range(2, n+1): if find(parent, i) != root: return \\"no\\" return \\"yes\\""},{"question":"You are given a list of integers representing the price of houses in a neighborhood. The real estate agent wants to maximize the profit when buying and selling these houses, but they can only hold one house at a time. They can buy a house on one day and sell it on another day after the buying day. Write a function that takes a list of integers representing the prices of houses in the order of days and returns the maximum profit the real estate agent can achieve. If no profit can be made, return 0. Input - The first line contains a single integer `n` (1 ≤ n ≤ 100) — the number of days the house prices are recorded. - The second line contains `n` space-separated integers representing the prices of houses. Output - Print the maximum profit the real estate agent can achieve. If no profit can be made, print 0. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Note In the first example, the optimal strategy would be to buy on day 2 (price = 1) and sell on day 5 (price = 6), yielding a profit of 6 - 1 = 5. In the second example, there is no buying day followed by a day with a higher selling price, so the profit is 0.","solution":"def max_profit(prices): Given a list of integers representing the prices of houses, returns the maximum profit that can be achieved by buying and selling a single house. If no profit can be made, returns 0. :param prices: List[int] :return: int if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Kevinsogo\'s colleague, Professor Trang, has presented her class with another challenging problem. The class has requested your assistance. Given an integer M, the Fibonacci sequence up to M is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n geq 2 Your task is to compute the sum of all Fibonacci numbers up to F(M). Input Format The first line contains an integer T which represents the number of test cases. The following T lines each contain an integer M. Output Format Print the sum of all Fibonacci numbers up to F(M) for each test case in a new line. Constraints Task 1: 40 points 1 leq T leq 10000 0 leq M leq 40 Task 2: 20 additional points 1 leq T leq 1000 0 leq M leq 70 Sample Input 3 3 5 8 Sample Output 4 12 54","solution":"def fibonacci_sum_up_to_m(m: int) -> int: Calculate the sum of all Fibonacci numbers up to F(m). if m == 0: return 0 elif m == 1: return 1 fib = [0] * (m + 1) fib[0] = 0 fib[1] = 1 total_sum = fib[0] + fib[1] for i in range(2, m + 1): fib[i] = fib[i - 1] + fib[i - 2] total_sum += fib[i] return total_sum def process_test_cases(test_cases: list) -> list: Process multiple test cases for summing Fibonacci numbers up to F(M). results = [] for m in test_cases: results.append(fibonacci_sum_up_to_m(m)) return results"},{"question":"A company is organizing a corporate event, and they want to arrange an activity that involves pairing employees. Each employee has a unique skill level represented by a positive integer. The organizers want to form pairs of employees such that the difference in their skill levels is minimized. Given the skill levels of the employees, your task is to determine the minimum possible difference between the skill levels of any two paired employees. Input The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of employees. The second line contains n space-separated positive integers — the skill levels of the employees. Each skill level is a positive integer and does not exceed 10000. Output Print the minimum possible difference between the skill levels of any two paired employees. Examples Input 5 4 9 1 32 13 Output 3 Input 8 20 18 5 1 24 19 17 12 Output 1 Note In the first sample, the pairs with the smallest difference are (4, 1) with a difference of 3. In the second sample, the pairs with the smallest difference are (18, 17) or (19, 18) with a difference of 1.","solution":"def min_skill_diff(n, skill_levels): Returns the minimum possible difference between skill levels of any two paired employees. :param n: Number of employees (int) :param skill_levels: List of skill levels (List[int]) :return: Minimum possible difference (int) skill_levels.sort() min_diff = float(\'inf\') for i in range(1, n): diff = skill_levels[i] - skill_levels[i - 1] if diff < min_diff: min_diff = diff return min_diff # Example Usage # n = 5 # skill_levels = [4, 9, 1, 32, 13] # print(min_skill_diff(n, skill_levels)) # Output: 3"},{"question":"Given an array of N integers, you need to find and return the length of the longest subarray consisting of unique elements. If there are multiple longest subarrays with the same length, return the length of any one of them. Example: Input: arr = [1, 2, 3, 1, 2, 3] Output: 3 Explanation: The longest subarray with all unique elements are [1, 2, 3], which has length 3. Input: arr = [4, 5, 4, 6, 7, 8] Output: 5 Explanation: The longest subarray with all unique elements is [5, 4, 6, 7, 8], which has length 5. Your Task: You don\'t need to read or print anything. Your task is to complete the function longest_unique_subarray_length() which takes N and arr as input parameters and returns an integer representing the length of the longest subarray with all unique elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^{5} 1 <= arr[i] <= 10^{6}","solution":"def longest_unique_subarray_length(arr): Returns the length of the longest subarray with all unique elements. element_index_map = {} max_length = 0 start = 0 for end, value in enumerate(arr): if value in element_index_map: start = max(start, element_index_map[value] + 1) element_index_map[value] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given an array `a` consisting of `n` integers. You want to modify the array such that any two adjacent elements have either the same parity (both even or both odd) or differing parity (one even and one odd) based on a given condition. Specifically, you are to make each pair of adjacent elements in positions `i` and `i+1` have: - the same parity if `condition[i]` is 1 - differing parity if `condition[i]` is 0 Your task is to find any array `b` of the same length as `a` that satisfies the given conditions. Input First line contains an integer `n` (2 ≤ n ≤ 100,000) — the number of elements in the array. Second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) — the elements of the array. Third line contains `n-1` integers `condition_1, condition_2, ..., condition_{n-1}` (either 0 or 1) describing the conditions between adjacent elements. Output Output `n` integers `b_1, b_2, ..., b_n` — the modified array that meets the conditions. Example Input 5 1 2 3 4 5 1 0 1 0 Output 2 4 3 5 7 Note In this example, the modified array `b` should satisfy: - `b_1` and `b_2` have the same parity because `condition_1` is 1. - `b_2` and `b_3` have differing parity because `condition_2` is 0. - `b_3` and `b_4` have the same parity because `condition_3` is 1. - `b_4` and `b_5` have differing parity because `condition_4` is 0.","solution":"def modify_array(n, a, condition): Modify array `a` to meet the given conditions. :param n: Number of elements in array `a` :param a: List of integers representing original array :param condition: List of integers representing conditions between adjacent elements :return: List of integers representing the modified array `b` b = [0] * n b[0] = a[0] for i in range(1, n): if condition[i-1] == 1: if b[i-1] % 2 == 0: b[i] = b[i-1] + 2 else: b[i] = b[i-1] + 2 else: if b[i-1] % 2 == 0: b[i] = b[i-1] + 1 else: b[i] = b[i-1] + 1 return b"},{"question":"Read problems statements in Mandarin Chinese and Russian. Alice is exploring different ways to compress strings. She discovered an interesting method and needs your help in implementing it. The idea is to compress a given string by replacing groups of identical consecutive characters with the character followed by the count of its occurrence. If a character appears only once consecutively, it should not be followed by the count. For example, the string \\"aaabbc\\" would be compressed to \\"a3b2c\\". Your task is to write a program to compress a given string using the described compression method. ------ Input ------ The first line contains an integer T, the number of test cases. Each of the next T lines contains a single string S which is to be compressed. ------ Output ------ For each test case, print the compressed string. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ |S| ≤ 10^{5} S consists only of lowercase English letters. sum of |S| over all test cases does not exceed 10^{5} ------ Sample Input 1 ------ 3 aaabbc a abbbcc ------ Sample Output 1 ------ a3b2c a ab3c2 ------ Explanation 1 ------ Example case 1: \\"aaabbc\\" is compressed to \\"a3b2c\\" as \'a\' appears 3 times, \'b\' appears 2 times, and \'c\' appears 1 time. Example case 2: \\"a\\" remains as \\"a\\" since \'a\' appears only once. Example case 3: \\"abbbcc\\" is compressed to \\"ab3c2\\" as \'b\' appears 3 times and \'c\' appears 2 times.","solution":"def compress_string(s): if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1]) if count > 1: compressed.append(str(count)) count = 1 compressed.append(s[-1]) if count > 1: compressed.append(str(count)) return \'\'.join(compressed) def compress_strings(test_cases): results = [] for s in test_cases: results.append(compress_string(s)) return results"},{"question":"You are given a backpack with a limited weight capacity and a collection of items, each with a specific weight and value. Your goal is to determine the maximum value you can carry in the backpack without exceeding the weight capacity. This is a variation of the Knapsack Problem, where you need to select a subset of the items to maximize the total value of the selected items while ensuring that their total weight does not exceed the capacity of the backpack. -----Input----- The first line contains two integers W (1 ≤ W ≤ 1000) and N (1 ≤ N ≤ 1000), where W is the weight capacity of the backpack and N is the number of items. The next N lines each contain two integers weight_i and value_i (1 ≤ weight_i, value_i ≤ 1000), where weight_i is the weight and value_i is the value of the i-th item. -----Output----- Output a single integer, the maximum value that can be achieved with the given constraints. -----Examples----- Sample Input: 5 4 2 3 3 4 4 5 5 6 Sample Output: 7","solution":"def knapsack(W, N, items): dp = [[0] * (W + 1) for _ in range(N + 1)] for i in range(1, N + 1): weight, value = items[i - 1] for w in range(W + 1): if weight <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + value) else: dp[i][w] = dp[i - 1][w] return dp[N][W] # Function to parse input and call knapsack def max_value(W, N, item_data): items = [tuple(map(int, item.split())) for item in item_data] return knapsack(W, N, items)"},{"question":"Write a program that processes transactions and reports the balance of multiple accounts. Each transaction includes an account number, an operation, and an amount. Operations consist of deposits and withdrawals. Assume that all accounts start with a balance of 0. Input The input contains multiple lines. Each line represents a transaction and is formatted as follows: ``` account_number operation amount ``` where: - `account_number` is a string identifying the account, which contains only alphanumeric characters and has a length of 1 to 20. - `operation` is either `D` for deposit or `W` for withdrawal. - `amount` is a non-negative integer less than or equal to 10000. Input ends with a single line containing the word `END`. Output For each account involved in the transactions, output the account number followed by its final balance. Each account should be listed in the order it first appears in the input. Example Input ``` A123 D 1000 B456 D 2000 A123 W 500 A123 D 200 B456 W 300 END ``` Output ``` A123 700 B456 1700 ```","solution":"def process_transactions(input_lines): Processes a list of transaction strings and returns the final balances of accounts. Args: input_lines (list): List of transaction strings in the specified format. Returns: dict: A dictionary with account numbers as keys and their final balance as values. accounts = {} for line in input_lines: if line.strip() == \\"END\\": break parts = line.split() account_number = parts[0] operation = parts[1] amount = int(parts[2]) if account_number not in accounts: accounts[account_number] = 0 if operation == \\"D\\": accounts[account_number] += amount elif operation == \\"W\\": accounts[account_number] -= amount return accounts def format_balances(balances): Formats the balance dictionary into a list of strings as required for the output. Args: balances (dict): A dictionary with account numbers as keys and their final balance as values. Returns: list: A list of strings in the format \\"account_number balance\\" in the order accounts appeared first. output_lines = [] for account_number, balance in balances.items(): output_lines.append(f\\"{account_number} {balance}\\") return output_lines def main(input_lines): balances = process_transactions(input_lines) return format_balances(balances)"},{"question":"Emma loves gardening and she has a rectangular garden. The garden is divided into a grid of n rows and m columns. She wants to plant exactly one tree in each cell of the grid. However, Emma found out that tree saplings of different heights need to be planted in a special manner to ensure they receive adequate sunlight and nutrients. The rules for planting are as follows: 1. Every cell (i, j) in the grid must contain a tree sapling of height h(i, j). 2. For any tree sapling (i, j), h(i, j) must be greater than the height of its neighboring saplings to the top and to the left (if they exist). Given the dimensions of the garden and the minimum possible height of a tree sapling in the garden at cell (1,1), calculate the number of valid configurations for planting tree saplings in the garden such that all the given rules are followed. Since the number of configurations can be very large, return the count modulo 1,000,000,007. Input Format The first line of the input contains an integer T, denoting the number of test cases. Each test case is formatted as follows: The first line contains three integers, n, m, and H, where n is the number of rows, m is the number of columns, and H is the minimum height of a tree sapling in cell (1,1). Output Format Print a single line for each test case, the number of valid configurations modulo 1,000,000,007. Constraints 1 ≤ T ≤ 10 1 ≤ n, m ≤ 1000 1 ≤ H ≤ 1000 SAMPLE INPUT 2 2 2 1 3 3 2 SAMPLE OUTPUT 1 12 Explanation For the first sample case, the only valid configuration is: 1 2 2 3 For the second sample case, there are 12 valid configurations for the 3 x 3 grid starting with a height of 2. One such configuration is: 2 3 4 3 4 5 4 5 6","solution":"MOD = 1000000007 def count_valid_configurations(n, m, H): # Since the height needs to keep increasing to the right and downward # The unique way to form such configurations is as follows: mat = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): mat[i][j] = H + i + j # The number of valid configurations is determined by the starting minimum height and grid dimensions. # There can be only one unique configuration satisfying the problem\'s rules. return 1 def process_input(t, test_cases): results = [] for case in test_cases: n, m, H = case results.append(count_valid_configurations(n, m, H) % MOD) return results"},{"question":"You are given a list of integers and a target integer value. Your task is to determine if there exists a pair of distinct indices (i) and (j) in the list such that the sum of the integers at these indices equals the target value. -----Constraints----- - The list contains at least two integers. - The integers and the target value are in the range -1000 to 1000. - Each element in the list is unique. -----Input----- Input is given from Standard Input in the following format: The first line contains an integer ( n ) denoting the number of elements in the list. The second line contains ( n ) space-separated integers representing the elements of the list. The third line contains the integer, target. -----Output----- Print \\"YES\\" if such a pair exists, otherwise print \\"NO\\". -----Sample Input----- 5 10 5 3 2 8 10 -----Sample Output----- YES The pair of integers 2 and 8 sum up to 10, so the output is YES.","solution":"def has_pair_with_sum(arr, target): Determines if there exists a pair of distinct indices i and j in the list such that the sum of the integers at these indices equals the target value. :param arr: List of integers :param target: Target integer value :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\" seen = set() for num in arr: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Create a function to determine whether a string is a \\"happy string.\\" A string is defined as happy if no two adjacent characters are the same. If a string is happy, return `True`. Otherwise, return the minimum number of adjacent character swaps required to make the string happy. If it\'s impossible to make the string happy, return `-1`. The swaps can only be made between adjacent characters. Example 1: Input: s = \\"aab\\" Output: 1 Explanation: Swap the second and third characters to get \\"aba\\". Example 2: Input: s = \\"aaab\\" Output: -1 Explanation: No matter how you try to swap, it is impossible to get a happy string. Example 3: Input: s = \\"abac\\" Output: True Explanation: The string is already happy. Your Task: You do not need to read input or print anything. Your task is to complete the function `makeHappy(s)` which takes a string as an input and returns either a boolean or an integer based on the above definition. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 1 ≤ len(s) ≤ 10^5 - s contains only lowercase English letters","solution":"def makeHappy(s): Determines if a string s is a happy string. If it is, returns True. If it\'s not, returns the minimum number of swaps required to make it happy. If it\'s impossible to make it happy, returns -1. A string is considered happy if no two adjacent characters are the same. def countSwaps(s): swaps = 0 i = 0 n = len(s) while i < n - 1: if s[i] == s[i + 1]: swaps += 1 # Try to swap with next next character if possible if i + 2 < n and s[i] != s[i + 2]: # Swap s[i+1] and s[i+2] s = s[:i + 1] + s[i + 2] + s[i + 1] + s[i + 3:] else: return -1 # not possible to make it happy i += 1 return swaps # Check if the string is already happy happy = True for i in range(len(s) - 1): if s[i] == s[i + 1]: happy = False break if happy: return True else: return countSwaps(s)"},{"question":"A city is building a new grid-based road system where all roads are two-way streets. The city\'s transportation department wants to determine the number of unique paths for a pedestrian to walk from the northwest corner of the grid (0, 0) to the southeast corner (n, m) if the pedestrian can only move either right or down at any point in time. You need to write a program that computes this for a given n and m, where n is the number of blocks north to south and m is the number of blocks west to east. -----Input----- The first line contains two integers n and m (0 ≤ n, m ≤ 10^6) — the dimensions of the grid. Note that n and m can be extremely large, so you should consider using efficient algorithms and data structures for your solution. -----Output----- Print a single integer representing the number of unique paths from (0, 0) to (n, m) modulo 10^9 + 7. -----Examples----- Input 2 2 Output 6 Input 0 0 Output 1","solution":"def unique_paths(n, m): MOD = 10**9 + 7 if n == 0 or m == 0: return 1 # Compute factorial(n + m) % MOD factorial = [1] * (n + m + 1) for i in range(2, n + m + 1): factorial[i] = factorial[i - 1] * i % MOD # Compute the inverse of factorial(n) % MOD using Fermat\'s Little Theorem def mod_inverse(x, p): return pow(x, p - 2, p) # nCr % MOD = factorial(n) / (factorial(r) * factorial(n - r)) % MOD nCr = factorial[n + m] * mod_inverse(factorial[n], MOD) % MOD * mod_inverse(factorial[m], MOD) % MOD return nCr"},{"question":"Write a program to find the \\"Single Missing Number\\" in a sequence of consecutive integers. You are given an array of integers where each integer is unique and the array contains numbers from a known range `[1, N]`. However, exactly one number in this range is missing from the array. Your task is to identify and return the missing number. Input: The first line contains a single integer T, denoting the number of test cases. Each test case consists of two lines: - The first line contains the integer N, representing the upper bound of the range. - The second line contains N-1 space-separated integers, representing the array containing numbers from `[1, N]` with exactly one number missing. Output: For each test case, print the missing number in the sequence. Constraints: 1 ≤ T ≤ 10 For each test case: 2 ≤ N ≤ 100 The array will contain all unique numbers from the range `[1, N]` except one number. If T is not in the specified range, print \\"Invalid Test\\". If any of the input constraints for a test case are not met, print \\"Invalid Input\\" for that specific test case. SAMPLE INPUT: 3 5 1 2 3 5 10 1 2 3 4 5 6 7 9 10 15 1 2 3 4 5 6 7 8 9 10 11 13 14 15 SAMPLE OUTPUT: 4 8 12","solution":"def find_missing_number(n, numbers): Returns the missing number from the array. expected_sum = n * (n + 1) // 2 actual_sum = sum(numbers) return expected_sum - actual_sum def process_test_cases(T, cases): if T < 1 or T > 10: return \\"Invalid Test\\" results = [] for N, array in cases: if N < 2 or N > 100 or len(array) != N - 1: results.append(\\"Invalid Input\\") else: results.append(find_missing_number(N, array)) return results"},{"question":"Maria has a collection of books represented by an array of integers where each integer denotes the number of pages in a book. She wants to organize her books into a specific number of shelves. Each shelf should hold a contiguous subarray of books, and the number of pages on each shelf should not exceed a given limit. Given the maximum number of shelves `K` and the maximum number of pages `M` that can be on any single shelf, determine if it is possible to arrange all the books such that no shelf exceeds the page limit `M`. ------ Input Format ------ - The first line contains a single integer `T` — the number of test cases. Then the test cases follow. - The first line of each test case contains three integers `N`, `K`, and `M` — where `N` is the number of books, `K` is the maximum number of shelves, and `M` is the maximum number of pages allowed per shelf. - The second line of each test case contains `N` integers — the number of pages in each book. ------ Output Format ------ For each test case, output YES if it is possible to organize the books according to the given constraints, otherwise output NO. You can print each character of the string in uppercase or lowercase. For example, the strings YES, yes, Yes, and yEs are all considered the same. ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 1 ≤ K ≤ N 1 ≤ M ≤ 10^9 1 ≤ text{pages}_i ≤ 10^6 - The sum of `N` over all test cases does not exceed 10^6. ----- Sample Input 1 ------ 3 5 3 10 1 2 3 4 5 4 2 6 1 2 3 10 3 1 15 5 5 5 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test case 1: One possible arrangement is: - Shelf 1: [1, 2, 3] with a total of 6 pages. - Shelf 2: [4] with a total of 4 pages. - Shelf 3: [5] with a total of 5 pages. Test case 2: It is not possible to arrange the books on 2 shelves with the given page limit. The book with 10 pages alone exceeds the page limit of 6. Test case 3: One possible arrangement is: - Shelf 1: [5, 5, 5] with a total of 15 pages, which is within the given limit.","solution":"def can_organize_books(T, test_cases): results = [] for i in range(T): N, K, M = test_cases[i][0] pages = test_cases[i][1] if max(pages) > M: results.append(\\"NO\\") continue current_sum = 0 shelves = 1 for page in pages: if current_sum + page > M: shelves += 1 current_sum = page if shelves > K: break else: current_sum += page if shelves <= K: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array B of length N consisting of non-negative integers. You can perform the following type of operation on the array B: Choose any single element B_i and replace it with the bitwise XOR of any other two distinct elements (i.e., ( B_i = B_j oplus B_k ) for any ( 1 leq j, k leq N ), ( j neq k )). Find the minimum number of operations required to make all elements of the array equal. ------ Input Format ------ - The first line of the input contains T, the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N denoting the size of the array. - The second line of each test case contains N non-negative integers representing the array B. ------ Output Format ------ For each test case, print the minimum number of operations required to make all elements equal. ------ Constraints ------ 1 leq T leq 1000 1 leq N leq 200,000 0 leq B_i leq 1,000,000 - Sum of N over all test cases does not exceed 500,000. ----- Sample Input 1 ------ 3 4 1 2 3 4 5 7 7 7 7 7 3 0 1 2 ----- Sample Output 1 ------ 3 0 1 ----- Explanation 1 ------ Test Case 1 : The given array is [1, 2, 3, 4]. - Choose elements 3 and 4 to replace 1: 1 = 3 oplus 4 implies 1 = 7. - Choose elements 2 and 3 to replace 2: 2 = 2 oplus 3 implies 2 = 1. - Choose elements 1 and 2 to replace 3: 3 = 1 oplus 7 implies 3 = 4. Now the array is [4, 1, 4, 4]. - Choose elements 1 and 4 to replace 1: 1 = 1 oplus 4 implies 1 = 5. Now all elements are the same. The number of operations required is 3. Test Case 2 : The given array [7, 7, 7, 7, 7] already has all elements equal to 7. So, the number of operations required is 0. Test Case 3 : The given array is [0, 1, 2]. - Choose elements 1 and 2 to replace 0: 0 = 1 oplus 2 implies 0 = 3. Now the array is [3, 1, 2]. The number of operations required is 1.","solution":"def min_operations_to_equal_elements(t, test_cases): def min_operations(N, B): # Convert the list to a dictionary and count occurrences of each element from collections import Counter counts = Counter(B) # Find the maximum frequency max_freq = max(counts.values()) # To make all elements equal to the most frequent one, we need N - max_freq operations return N - max_freq results = [] for i in range(t): N, B = test_cases[i] results.append(min_operations(N, B)) return results"},{"question":"Consider a land surveying expedition on a field represented as a grid of N x M dimensions. The expedition team is to traverse from the top-left corner of the grid to the bottom-right corner. Each cell in the grid has a certain elevation given, and the challenge is to find a path that minimizes the total elevation change. The expedition can only move right or down at each step. Given the elevation grid, calculate the minimum possible total elevation change required to traverse from the top-left to the bottom-right of the grid. Input The first line contains two space-separated integers, N and M, where N (1 ≤ N ≤ 1000) is the number of rows and M (1 ≤ M ≤ 1000) is the number of columns. Each of the next N lines contains M space-separated integers Ei,j (0 ≤ Ei,j ≤ 10^6), representing the elevation at cell (i, j). Output Output a single integer which is the minimum total elevation change required to reach from the top-left corner to the bottom-right corner of the grid. Examples Input 3 3 1 3 5 2 8 4 3 2 1 Output 4 Input 2 2 1 2 4 6 Output 5 Explanation In the first example, one possible path is [1, 3, 4, 1] with elevation changes |1-3| + |3-4| + |4-1| = 2 + 1 + 1 = 4. In the second example, the path is [1, 2, 6] with elevation changes |1-2| + |2-6| = 1 + 4 = 5.","solution":"def min_elevation_change(grid): This function computes the minimum possible total elevation change to traverse from the top-left corner to the bottom-right corner of the grid. N = len(grid) M = len(grid[0]) # Create a dp table to store the minimum elevation change for each cell dp = [[float(\'inf\')] * M for _ in range(N)] # Initialize the top-left corner with 0 change since it is the starting point dp[0][0] = 0 # Fill the dp table for i in range(N): for j in range(M): if i == 0 and j == 0: continue from_left = dp[i][j-1] + abs(grid[i][j] - grid[i][j-1]) if j > 0 else float(\'inf\') from_up = dp[i-1][j] + abs(grid[i][j] - grid[i-1][j]) if i > 0 else float(\'inf\') dp[i][j] = min(from_left, from_up) # The minimum elevation change to the bottom-right corner return dp[N-1][M-1] # Function to parse input and execute the solution def solve(input_string): data = input_string.strip().split(\'n\') N, M = map(int, data[0].split()) grid = [list(map(int, row.split())) for row in data[1:]] return min_elevation_change(grid)"},{"question":"Given a string, find the length of the longest substring with all distinct characters. Implement a function longestSubstrDistinctChars that accepts a single string parameter and returns the length of the longest substring in which all the characters are distinct. Function Signature: ```python def longestSubstrDistinctChars(s: str) -> int: ``` Input: - A single line containing the string s (1 <= |s| <= 1000), where |s| denotes the length of the string. The string consists of English letters, digits, symbols, and spaces. Output: - An integer, the length of the longest substring with all distinct characters. Example: Input: ``` abcabcbb ``` Output: ``` 3 ``` Explanation: The answer is \\"abc\\", with the length of 3. The substrings \\"bca\\" or \\"cab\\" are also valid outputs with the same length. Input: ``` bbbbb ``` Output: ``` 1 ``` Explanation: The answer is \\"b\\", with the length of 1, as all characters in the string are the same. Input: ``` pwwkew ``` Output: ``` 3 ``` Explanation: The answer is \\"wke\\", with the length of 3. Note that \\"pwk\\" and \\"kew\\" are also valid outputs but with the same length.","solution":"def longestSubstrDistinctChars(s: str) -> int: Returns the length of the longest substring with all distinct characters. n = len(s) max_len = 0 char_index = {} start = 0 for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"The kingdom of Graphland has n cities connected by m bidirectional roads. Each road can have different widths. The width of a road is defined in terms of the maximum number of vehicles that can travel simultaneously on that road. A trade route between two cities is a path that allows merchants to travel from one city to another. The Queen of Graphland wants to ensure that the least populated city she rules can always send and receive the maximum possible number of trade goods. Hence, she orders you to find the minimum width of a cutting edge, that is, the road which if removed, would maximize the connectivity capacity between every pair of cities. Input - The first line contains two integers n and m (2 ≤ n ≤ 2000; 1 ≤ m ≤ 5000) — the number of cities and the number of roads respectively. - The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 100000) — representing a road between cities u and v with width w. Output - Print a single integer — the minimum width of a cutting edge. Example Input 5 6 1 2 4 1 3 2 2 3 1 2 4 3 3 5 5 4 5 6 Output 3 Explanation: In this graph of five cities connected by six roads, removing any road with a width less than 3 will not efficiently split the connectivity between any pair of cities, but removing any road with a width of 3 or more will result in an important cut. Thus, the minimum width of a cutting edge is 3.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): result = [] parent = [] rank = [] edges = sorted(edges, key=lambda item: item[2], reverse=True) for node in range(n): parent.append(node) rank.append(0) e, i = 0, 0 while e < n - 1 and i < len(edges): u, v, w = edges[i] i += 1 x = find(parent, u) y = find(parent, v) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) min_width_cut = result[-1][2] return min_width_cut def min_cut_edge_width(n, m, edges_list): edges = [(u-1, v-1, w) for u, v, w in edges_list] return kruskal(n, edges)"},{"question":"Your task is to design a system that manages a stack of books. Each book is represented by an integer value, where higher values indicate higher priority or more importance. You will be given a series of queries, each performing different operations on the stack. The operations are described as follows: 1. `P x`: Push the integer x onto the stack. 2. `R`: Remove and return the integer on the top of the stack. If the stack is empty, output \\"EMPTY\\". 3. `F`: Find and return the maximum integer in the stack. If the stack is empty, output \\"EMPTY\\". 4. `S`: Search the stack for the top half (rounded up to the next integer if the stack size is odd) and return the maximum value found in this part of the stack. If the stack is empty, output \\"EMPTY\\". 5. `L`: Search the stack for the bottom half (rounded down to the nearest integer if the stack size is odd) and return the maximum value found in this part of the stack. If the stack is empty, output \\"EMPTY\\". You need to implement the system to handle these operations and provide appropriate outputs. # Input The input consists of multiple test cases, each described as follows: - The first line contains an integer t, the number of test cases. - For each test case: - The first line contains an integer n, the number of queries. - The next n lines contain one query each, being one of the described operations. # Output For each test case, output the results of the operations in the order they are performed. For each `R`, `F`, `S`, and `L` operation, output the result on a new line. After processing all queries in a test case, output \\"END\\" on a new line. # Example Input ``` 2 5 P 5 P 10 F R R 7 P 1 P 3 P 2 P 7 S L F ``` Output ``` 10 10 5 END 7 3 7 END ``` Your task is to implement the described system to process the stack of books and handle the queries accordingly.","solution":"class BookStack: def __init__(self): self.stack = [] def push(self, value): self.stack.append(value) def remove(self): if not self.stack: return \\"EMPTY\\" return self.stack.pop() def find_max(self): if not self.stack: return \\"EMPTY\\" return max(self.stack) def search_top_half(self): if not self.stack: return \\"EMPTY\\" half_size = (len(self.stack) + 1) // 2 top_half = self.stack[-half_size:] return max(top_half) def search_bottom_half(self): if not self.stack: return \\"EMPTY\\" half_size = len(self.stack) // 2 bottom_half = self.stack[:half_size] return max(bottom_half) def process_test_cases(test_cases): results = [] for case in test_cases: n, queries = case book_stack = BookStack() for query in queries: if query.startswith(\\"P\\"): _, value = query.split() book_stack.push(int(value)) elif query == \\"R\\": results.append(book_stack.remove()) elif query == \\"F\\": results.append(book_stack.find_max()) elif query == \\"S\\": results.append(book_stack.search_top_half()) elif query == \\"L\\": results.append(book_stack.search_bottom_half()) results.append(\\"END\\") return results # Example usage if __name__ == \\"__main__\\": test_cases = [ (5, [\\"P 5\\", \\"P 10\\", \\"F\\", \\"R\\", \\"R\\"]), (7, [\\"P 1\\", \\"P 3\\", \\"P 2\\", \\"P 7\\", \\"S\\", \\"L\\", \\"F\\"]) ] result = process_test_cases(test_cases) for res in result: print(res)"},{"question":"Given a directed graph, determine if a path exists between two specified nodes. You need to implement a function that takes the adjacency list representation of a graph, a start node, and an end node, and returns a boolean indicating whether there is a path from the start node to the end node. Example: For the graph represented as: { 1: [2, 3], 2: [4], 3: [], 4: [5], 5: [] } If start node is 1 and end node is 5, the output should be True, as there is a path from 1 to 5. Example 1: Input: graph = {1: [2, 3], 2: [4], 3: [], 4: [5], 5: []} start = 1 end = 5 Output: True Example 2: Input: graph = {1: [2, 3], 2: [4], 3: [], 4: [5], 5: []} start = 1 end = 6 Output: False Your Task: You don\'t need to read input or output anything. Your task is to complete the function `isPathExist()` that takes an adjacency list `graph`, integers `start` and `end` as parameters and return True if there is a path from start to end node, otherwise False. Expected Time Complexity: O(V + E), where V is the number of vertices and E is the number of edges. Expected Auxiliary Space: O(V). Constraints: 1 ≤ Number of nodes ≤ 100 1 ≤ Value of nodes ≤ 1000","solution":"def isPathExist(graph, start, end): Determines if a path exists from start node to end node in the given directed graph. Parameters: graph (dict): The adjacency list representation of the graph. start (int): The starting node. end (int): The target node. Returns: bool: True if a path exists from start to end, False otherwise. # If start and end are the same, a trivial path exists if start == end: return True # Use Depth-First Search (DFS) to find the path def dfs(node, visited): if node == end: return True if node in visited or node not in graph: return False visited.add(node) for neighbor in graph[node]: if dfs(neighbor, visited): return True return False visited = set() return dfs(start, visited)"},{"question":"Farmland is a vast, flat region where crops are grown in a grid formation. Each cell in the grid represents a plot of land, and each plot can have either fertile soil or be barren. A farmer wants to plant seeds in a rectangle of plots that will yield the maximum number of seeds. To plant the seeds, the farmer can only use fertile soil plots, and these plots must form a contiguous rectangle. The farmer needs your help to determine the maximum number of seeds that can be planted in one contiguous rectangular area of fertile soil. Write a program that computes the maximum number of seeds that can be planted within a single contiguous rectangular area of fertile soil. Input The first line contains two integers n and m (1 ≤ n, m ≤ 200) — the dimensions of the farmland grid. The next n lines each contain m characters. Each character is either \'.\' (representing fertile soil) or \'#\' (representing barren land). Output In the only line, print the maximum number of seeds that can be planted within a single contiguous rectangular area of fertile soil. Examples Input 4 5 ..#.. ... . .#... Output 4 Input 3 3 ..# .#. # Output 2 Note In the first example, the largest contiguous rectangular area of fertile soil has 4 plots, which can be found between rows 1-2 and columns 1-2. In the second example, the largest contiguous rectangular area of fertile soil has 2 plots, which can be found in the first row and first two columns.","solution":"def max_seeds(n, m, grid): max_seeds = 0 heights = [0] * m def largest_rectangle_area(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[stack[-1]] >= heights[i]: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) return max_area for r in range(n): for c in range(m): if grid[r][c] == \'.\': heights[c] += 1 else: heights[c] = 0 max_seeds = max(max_seeds, largest_rectangle_area(heights)) return max_seeds"},{"question":"A company has launched a special promotion for its chatbot product and wants to display personalized recommendations based on user ratings. For this, they\'ve gathered data on n users and their interest in m topics. Your task is to determine the set of topics that each user is most interested in based on their ratings. The ratings are provided as an n x m matrix, where the element at the i-th row and j-th column represents the user\'s rating (an integer from 1 to 10) of the j-th topic. Each user is most interested in the topic(s) with the highest rating in their respective row. If there are multiple topics with the same highest rating, all such topics should be included in the result for that user. Input The input consists of multiple lines: The first line contains two space-separated integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100) — the number of users and topics, respectively. The next n lines each contain m space-separated integers representing the ratings of a user for each topic. Output For each user, output a line containing the indices (0-based) of the topics they are most interested in, separated by spaces. The indices should be listed in ascending order. Examples Input 3 4 5 3 1 2 4 4 4 2 3 5 1 1 Output 0 0 1 2 1 Input 2 3 10 1 5 6 6 6 Output 0 0 1 2","solution":"def most_interested_topics(n, m, ratings): For each user, determine the indices of the topics they are most interested in based on their ratings. Args: n (int): Number of users. m (int): Number of topics. ratings (list of list of int): An n x m matrix containing ratings of each user for each topic. Returns: list of list of int: Indices of topics each user is most interested in. result = [] for user_ratings in ratings: max_rating = max(user_ratings) topics = [i for i, rating in enumerate(user_ratings) if rating == max_rating] result.append(topics) return result # Sample input n, m = 3, 4 ratings = [ [5, 3, 1, 2], [4, 4, 4, 2], [3, 5, 1, 1] ] # Run the function and print the results result = most_interested_topics(n, m, ratings) for user_topics in result: print(\\" \\".join(map(str, user_topics)))"},{"question":"You are given a string containing characters \'(\', \')\', \'[\', \']\', \'{\', and \'}\'. Write a function that determines if the input string is a valid combination of brackets and parenthesis. A valid string is defined as: 1. Every opening bracket must have a corresponding closing bracket of the same type. 2. Opening brackets must be closed in the correct order. Constraints * 1 leq |s| leq 10^5 * s consists only of the characters \'(\', \')\', \'[\', \']\', \'{\', and \'}\'. Input A single string `s` containing brackets and parenthesis. Output Print \\"YES\\" if the string is a valid combination of brackets and parenthesis, otherwise print \\"NO\\". Examples Input (){} Output YES Input ([{}]) Output YES Input {[()]} Output YES Input ({[)]} Output NO","solution":"def isValid(s): Determines if the input string s is a valid combination of brackets and parenthesis. Returns \'YES\' if valid, else \'NO\'. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return \\"NO\\" else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\""},{"question":"# Task You are given a string `s` consisting of lowercase English letters. Your task is to determine the length of the longest subsequence of characters that appears in alphabetical order. Note: A subsequence is derived from the original string by deleting some or no characters without changing the order of the remaining characters. # Example For `s = \\"abzcxdb\\"`, the output should be `4` because the longest subsequence in alphabetical order is \\"abzd\\". # Input/Output - `[input]` string `s` A string consisting of lowercase English letters. Constraints: `1 ≤ s.length ≤ 100`. - `[output]` an integer The length of the longest subsequence of characters that appears in alphabetical order.","solution":"def longest_alphabetical_subsequence(s): Returns the length of the longest subsequence of characters that appears in alphabetical order. if not s: return 0 n = len(s) lengths = [1] * n for i in range(1, n): for j in range(i): if s[j] <= s[i]: lengths[i] = max(lengths[i], lengths[j] + 1) return max(lengths)"},{"question":"# Task You are given a list of student scores for a series of exams. Each student has a total score which is the sum of all the individual exam scores. Your task is to write a program that determines the student with the highest total score. If multiple students have the same highest score, return the one who appeared first in the input list. # Example For `scores = [[95, 85, 80], [85, 80, 90], [95, 90, 95]]`, the output should be `2`. Here is the total score for each student: ``` Student 0: 95 + 85 + 80 = 260 Student 1: 85 + 80 + 90 = 255 Student 2: 95 + 90 + 95 = 280 ``` Student 2 has the highest total score of 280. # Input/Output - `[input]` integer array of arrays `scores` An array of arrays, where each subarray represents the scores of an individual student across multiple exams. Constraints: `1 ≤ len(scores) ≤ 1000` `1 ≤ len(scores[i]) ≤ 100` `0 ≤ scores[i][j] ≤ 100` - `[output]` an integer The index of the student with the highest total score. # Note If there are multiple students with the same highest score, the function should return the index of the student who appears first in the input list.","solution":"def get_highest_scorer_index(scores): Determines the index of the student with the highest total score. :param scores: An array of arrays, where each subarray represents the scores of an individual student across multiple exams :return: The index of the student with the highest total score highest_score = -1 highest_index = -1 for index, student_scores in enumerate(scores): total_score = sum(student_scores) if total_score > highest_score: highest_score = total_score highest_index = index return highest_index"},{"question":"You are given an array of integers and a target integer. Write a function to determine if there are two integers in the array whose difference is equal to the target integer. Return `YES` if such a pair exists, otherwise return `NO`. Example Consider the array a = [1, 5, 3, 4, 2] and the target integer k = 3. In this case, there are pairs with differences equal to 3: - (5, 2) - (4, 1) So, the function returns `YES`. If the array were a = [1, 2, 3, 4, 5] and k = 10: There are no pairs with a difference equal to 10. So, the function returns `NO`. Function Description Complete the function `findDifferenceExists` in the editor below. `findDifferenceExists` has the following parameter(s): - `int a[]`: an array of integers - `int k`: the target difference Returns - `string`: `YES` if there is a pair of integers with the difference equal to k, otherwise `NO` Input Format The first line contains an integer t, the number of queries. Each query consists of two lines: - The first line contains two integers n (the size of the array) and k (the target difference). - The second line contains n space-separated integers representing the array a. Constraints 1 leq t leq 10^2 2 leq n leq 10^4 -10^9 leq a[i], k leq 10^9 Sample Input 0 2 5 3 1 5 3 4 2 5 10 1 2 3 4 5 Sample Output 0 YES NO Explanation 0 For the first query: - Array: [1, 5, 3, 4, 2] - Target difference: 3 There are pairs (5, 2) and (4, 1) with a difference of 3, so the function returns `YES`. For the second query: - Array: [1, 2, 3, 4, 5] - Target difference: 10 There are no pairs with a difference of 10, so the function returns `NO`.","solution":"def findDifferenceExists(a, k): Determines if there are two integers in the array whose difference is equal to the target integer k. Args: a (list of int): the array of integers k (int): the target difference Returns: string: \\"YES\\" if such a pair exists, otherwise \\"NO\\" # Use a set tto store the elements of the array seen = set() for number in a: # Check if the (number + k) or (number - k) exists in the set if (number + k) in seen or (number - k) in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"You are given an array of integers, where each element represents the height of a person in a lineup. Your task is to determine the maximum number of people who can form a non-decreasing subarray if at most one person can be removed from the lineup. A subarray is a contiguous part of an array. For example, given the array [1, 2, 5, 3, 4], you can form [1, 2, 5] or [1, 2, 3] or [1, 3, 4] by removing one element, each forming a non-decreasing subarray of length 3. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of people in the lineup. The second line contains n integers h_1, h_2, ..., h_n (0 ≤ h_i ≤ 10^9) — the heights of those people. -----Output----- Print a single integer — the maximum number of people who can form a non-decreasing subarray after at most one removal operation. -----Examples----- Input 5 1 2 5 3 4 Output 4 Input 6 3 1 2 6 4 5 Output 4","solution":"def max_non_decreasing_subarray(arr): n = len(arr) if n == 1: return 1 # Arrays to store the longest increasing subarray # length ending at each index left = [1] * n right = [1] * n # Fill left array for i in range(1, n): if arr[i] >= arr[i-1]: left[i] = left[i-1] + 1 # Fill right array for i in range(n-2, -1, -1): if arr[i] <= arr[i+1]: right[i] = right[i+1] + 1 # Find the maximum length of non-decreasing subarray max_len = max(max(left), max(right)) # Check the possibility to remove one element for i in range(1, n-1): if arr[i-1] <= arr[i+1]: max_len = max(max_len, left[i-1] + right[i+1]) return max_len"},{"question":"Given an array of integers, determine if the array is strictly increasing, strictly decreasing, or neither. Constraints * 1 leq n leq 10^5 * -10^9 leq array[i] leq 10^9 for 1 leq i leq n Input Input is given from Standard Input in the following format: n array Output If the array is strictly increasing, print `Increasing`; if it is strictly decreasing, print `Decreasing`; otherwise, print `Neither`. Examples Input 5 1 2 3 4 5 Output Increasing Input 5 5 4 3 2 1 Output Decreasing Input 5 1 3 2 4 5 Output Neither","solution":"def determine_sequence_type(n, array): Determines if the array is strictly increasing, strictly decreasing, or neither. Args: n : int : Number of elements in the array array : list : List of integers Returns: str : \'Increasing\', \'Decreasing\' or \'Neither\' if n == 1: return \\"Neither\\" is_increasing = all(array[i] < array[i + 1] for i in range(n - 1)) if is_increasing: return \\"Increasing\\" is_decreasing = all(array[i] > array[i + 1] for i in range(n - 1)) if is_decreasing: return \\"Decreasing\\" return \\"Neither\\" # Example usage: # result = determine_sequence_type(5, [1, 2, 3, 4, 5]) # print(result) # Output: Increasing"},{"question":"Given a string s consisting of letters \'a\' and \'b\' only, split the string into the least number of substrings where each substring contains equal numbers of \'a\' and \'b\'. Return the number of such substrings. Example 1: Input: s = \\"aabbaabb\\" Output: 2 Explanation: s can be split into \\"aabbaa\\" and \\"bb\\", each containing equal numbers of \'a\' and \'b\'. Example 2: Input: s = \\"abababab\\" Output: 4 Explanation: s can be split into \\"ab\\", \\"ab\\", \\"ab\\", and \\"ab\\", each containing equal numbers of \'a\' and \'b\'. Example 3: Input: s = \\"aaaaaabbbbbb\\" Output: 1 Explanation: s can be split into \\"aaaaaabbbbbb\\", containing equal numbers of \'a\' and \'b\'. Example 4: Input: s = \\"abab\\" Output: 2 Explanation: s can be split into \\"ab\\" and \\"ab\\", each containing equal numbers of \'a\' and \'b\'. Constraints: 1 <= s.length <= 1000 s[i] = \'a\' or \'b\'","solution":"def count_balanced_substrings(s): Returns the least number of substrings where each substring contains equal numbers of \'a\' and \'b\'. a_count = 0 b_count = 0 balanced_count = 0 for char in s: if char == \'a\': a_count += 1 elif char == \'b\': b_count += 1 if a_count == b_count: balanced_count += 1 a_count = 0 b_count = 0 return balanced_count"},{"question":"You are given an array of integers where each number represents the number of items you picked from a specific pile. Each pile has different items, so there might be duplicate numbers in the array, meaning you might have picked from the same pile more than once. Write a function to determine if it is possible to rearrange the array so that no two consecutive integers represent picking from the same pile. ------ INPUT: ------ First line contains N, the length of the array. Second line contains N space-separated integers representing the array. ------ OUTPUT: ------ Output `YES` if it is possible to rearrange the array under the given condition, otherwise output `NO`. ------ Constraints: ------ 1 ≤ N ≤ 10^5 1 ≤ text{arr}[i] ≤ 10^5 for each element in the array ----- Sample Input 1 ------ 6 1 2 3 1 1 3 ----- Sample Output 1 ------ YES ----- Explanation 1 ------ One possible rearrangement is: 1, 3, 1, 2, 1, 3. ----- Sample Input 2 ------ 5 4 4 4 4 4 ----- Sample Output 2 ------ NO ----- Explanation 2 ------ There is no way to rearrange the array such that no two consecutive elements are the same.","solution":"from collections import Counter import heapq def can_rearrange_picks(arr): Determines if the array of picks can be rearranged such that no two consecutive picks are from the same pile. if not arr: return \\"YES\\" count = Counter(arr) max_heap = [(-value, key) for key, value in count.items()] heapq.heapify(max_heap) prev_value, prev_key = 0, None while max_heap: value, key = heapq.heappop(max_heap) if prev_value < 0: heapq.heappush(max_heap, (prev_value, prev_key)) value += 1 prev_value, prev_key = value, key return \\"YES\\" if prev_value >= 0 else \\"NO\\" # Example usage: # print(can_rearrange_picks([1, 2, 3, 1, 1, 3])) # Expected output: YES # print(can_rearrange_picks([4, 4, 4, 4, 4])) # Expected output: NO"},{"question":"Write a function that reads a list of integers and determines whether the list is a \\"mountain array.\\" A mountain array is defined as an array that: 1. Consists of at least three elements. 2. Has exactly one element that is the peak, where: - The elements before the peak are in strictly increasing order. - The elements after the peak are in strictly decreasing order. Your function should return a boolean indicating whether the array is a mountain array. Input The input consists of multiple datasets. For each dataset, a line of space-separated integers is provided. The input ends with a line containing a single integer -1. Your program should not process this terminal symbol. The number of datasets does not exceed 50. Output For each dataset, print \\"True\\" if the array is a mountain array, and \\"False\\" otherwise. Example Input 2 1 -1 1 2 3 4 5 -1 0 3 2 1 0 -1 1 2 2 1 -1 -1 Output False False True False","solution":"def is_mountain_array(arr): Checks if the given array is a mountain array. n = len(arr) # A mountain array must have at least 3 elements if n < 3: return False # Find the peak of the mountain peak_index = -1 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: peak_index = i break # If there is no peak found if peak_index == -1: return False # Check the increasing part before the peak for i in range(1, peak_index): if arr[i - 1] >= arr[i]: return False # Check the decreasing part after the peak for i in range(peak_index + 1, n): if arr[i - 1] <= arr[i]: return False return True def process_datasets(datasets): results = [] for dataset in datasets: if dataset == [-1]: continue results.append(is_mountain_array(dataset)) return results"},{"question":"Alex, a software developer, is working on a project that involves processing a grid of characters. Each cell in the grid contains a single character, which can be either \'A\' or \'B\'. Alex needs to find the largest rectangular area within this grid that contains only \'A\'s. Given an m times n grid filled with characters \'A\' and \'B\', write a program to determine the area of the largest rectangle containing only \'A\'s. # Input The input consists of the following: - The first line contains two space-separated integers m and n, indicating the number of rows and columns of the grid respectively. - The next m lines each contain n characters (\'A\' or \'B\') without spaces in between, representing the grid. # Output Output a single integer, which is the area of the largest rectangle containing only \'A\'s. # Constraints - 1 leq m, n leq 200 - Each character in the grid is either \'A\' or \'B\'. # Examples Example 1 Input: ``` 4 5 AAAAA ABAAA AABAA AAAAA ``` Output: ``` 8 ``` Example 2 Input: ``` 3 3 BBB BBB BBB ``` Output: ``` 0 ``` Example 3 Input: ``` 5 6 AAABAA ABBBAA ABAABA AAAAAA BBBBBB ``` Output: ``` 6 ```","solution":"def maximal_rectangle_area(grid): if not grid: return 0 m, n = len(grid), len(grid[0]) heights = [0] * n max_area = 0 for row in grid: for j in range(n): if row[j] == \'A\': heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, max_histogram_area(heights)) return max_area def max_histogram_area(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area"},{"question":"Paul loves reading books, and he has a unique way of selecting them. Each book he reads fits a specific genre and has a finite number of pages. Paul has a bookshelf with books categorized by genre and each genre has a list of books sorted in ascending order by the number of pages. Paul decides to set a reading challenge for himself. For each genre, he wants to find the longest book he can finish in a week with a maximum reading capacity of `X` pages. Your Task: Write a function `longest_book` that, given a dictionary where the keys are genres and the values are lists of integers representing the number of pages per book for that genre, and an integer `X` which is the maximum number of pages Paul can read in a week, returns a dictionary with the genres as keys and the number of pages of the longest book Paul can read for each genre as values. If Paul can\'t read any book from a genre within his capacity, return 0 for that genre. Example: ``` books = { \\"Fantasy\\": [100, 200, 300, 400], \\"Science Fiction\\": [150, 350, 600], \\"Mystery\\": [120, 220, 330, 440] } X = 250 ``` Output: ``` { \\"Fantasy\\": 200, \\"Science Fiction\\": 150, \\"Mystery\\": 220 } ``` Notes: 1. It is guaranteed that every genre has at least one book available. 2. Paul can only pick one book per genre. 3. The books are already sorted in ascending order of number of pages.","solution":"def longest_book(books, X): result = {} for genre, pages in books.items(): max_pages = 0 for page in pages: if page <= X: max_pages = page else: break result[genre] = max_pages return result"},{"question":"Given a linked list, each node contains an integer. Your task is to detect whether the linked list has a cycle in it. A cycle occurs when a node\'s next pointer points back to a previous node, causing a loop rather than terminating as null. Implement a function `hasCycle` that takes the head of the linked list and returns a boolean indicating whether the list contains a cycle. ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def hasCycle(head: ListNode) -> bool: pass ``` -----Input----- - The input is the head node of a linked list. The linked list can have up to 10^4 nodes. -----Output----- - Return a boolean value. Return `True` if there is a cycle, and `False` otherwise. -----Examples----- Input (head = [3,2,0,-4], pos = 1) Output True Input (head = [1, 2], pos = 0) Output True Input (head = [1], pos = -1) Output False -----Notes----- - A linked list can be represented with an array of values and an integer `pos` which represents the zero-indexed position of the node that connects back to a previous node to form a cycle. If `pos` is -1, there is no cycle in the linked list. - In the first example, the linked list [3,2,0,-4] has a cycle as the last node points back to the node with value 2 (index 1). - In the second example, the linked list [1, 2] has a cycle as the second node points back to the first node (index 0). - In the third example, there is no cycle in the linked list [1].","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def hasCycle(head: ListNode) -> bool: Determine if the linked list has a cycle. Uses Floyd\'s Tortoise and Hare algorithm. :param head: ListNode, the head of the linked list :return: bool, True if there is a cycle, False otherwise. if not head or not head.next: return False slow = head fast = head while fast and fast.next: slow = slow.next # move slow pointer one step fast = fast.next.next # move fast pointer two steps if slow == fast: return True return False"},{"question":"Vaccine Distribution The health administration is planning to distribute vaccines to several hospitals in a city. There are N hospitals, and the health administration has M vaccines available. The goal is to distribute the vaccines as evenly as possible among the hospitals. However, each hospital has a capacity, denoted by Ci, which is the maximum number of vaccines it can store at a time. If a hospital cannot store all the vaccines allocated to it based on the even distribution, it will store as many as it can and send the remaining vaccines back to the health administration. Write a program to determine how many vaccines each hospital will receive and the total number of vaccines sent back to the health administration. Input The input consists of multiple datasets. Each dataset is represented in the following format: > N M C1 C2 ... CN The dataset consists of two lines. The first line gives the number of hospitals N and the total number of vaccines M. N and M are integers, and 2 ≤ N ≤ 100 and N ≤ M ≤ 10,000, respectively. The second line gives each of the N hospitals their capacities. Ci is an integer representing the capacity of the i-th hospital, and 1 ≤ Ci ≤ 10,000. The end of the input is represented by a line consisting of only two 0s. Output For each dataset, print a line containing the total number of vaccines distributed and the total number of vaccines sent back to the health administration. Sample Input 4 1000 300 500 200 100 3 700 250 300 200 2 400 150 150 0 0 Sample Output 1000 0 700 0 300 100 In the first dataset, the even distribution of vaccines would be 250 per hospital. However, since the hospitals have different capacities, the distribution will be adjusted based on their capacities. The output for this set indicates that all 1000 vaccines were distributed with none sent back. For the second dataset, the distribution is similarly adjusted and all vaccines are distributed. In the third dataset, the even distribution would exceed one of the hospital capacities, leading to some vaccines being sent back.","solution":"def distribute_vaccines(data): Distributes vaccines to hospitals as evenly as possible and calculate the remaining vaccines. Args: data (list of lists): Each sublist consists of hospitals data. The first element is a tuple (N, M), followed by a list of capacities for N hospitals. Returns: list of tuples: Each tuple contains two values - total distributed vaccines and total vaccines sent back to the health administration. results = [] for dataset in data: (N, M), capacities = dataset vaccines_left = M capacities.sort() distributed_vaccines = [0] * N # Try distributing vaccines equally with consideration to capacities for i in range(N): if vaccines_left == 0: break allocation = min(vaccines_left // (N - i), capacities[i]) distributed_vaccines[i] = allocation vaccines_left -= allocation total_distributed = sum(distributed_vaccines) results.append((total_distributed, M - total_distributed)) return results"},{"question":"Given an array of integers, your task is to write a program that finds two distinct elements from the array such that their sum is closest to zero. For example, given the array: [-20, -3, 4, 2, 5, -8], the two elements whose sum is closest to zero are -3 and 4. The size of the array n is an integer where 2 ≤ n ≤ 1000. # Input - An integer n representing the number of elements in the array. - A sequence of n integers which are the elements of the array. # Output Output the pair of elements whose sum is closest to zero. If there are multiple pairs, any one of them can be printed. Ensure that the two elements in each pair are distinct. # Example Input ``` 6 -20 -3 4 2 5 -8 ``` Output ``` -3 4 ``` Input ``` 5 1 60 -10 70 -80 ``` Output ``` -10 1 ``` Input ``` 3 10 22 -15 ``` Output ``` 10 -15 ```","solution":"def closest_to_zero_pair(arr): Returns the pair of distinct elements from the array whose sum is closest to zero. n = len(arr) if n < 2: return None arr.sort() left = 0 right = n - 1 closest_pair = (arr[left], arr[right]) min_sum = abs(arr[left] + arr[right]) while left < right: current_sum = arr[left] + arr[right] if abs(current_sum) < min_sum: min_sum = abs(current_sum) closest_pair = (arr[left], arr[right]) if current_sum < 0: left += 1 else: right -= 1 return closest_pair"},{"question":"Geek is given a list of N (not necessarily distinct) words. For each pair of words, he wants to know if they are anagrams of each other. Your task is to return a list of boolean values indicating whether each pair (i, j) is an anagram, where 1 ≤ i, j ≤ N. Example 1: Input: N = 4 words = [\\"listen\\", \\"silent\\", \\"rock\\", \\"cork\\"] pairs = [[1, 2], [3, 4], [1, 3]] Output: [True, True, False] Explanation: Pair 1: \\"listen\\" and \\"silent\\" are anagrams. Pair 2: \\"rock\\" and \\"cork\\" are anagrams. Pair 3: \\"listen\\" and \\"rock\\" are not anagrams. Example 2: Input: N = 3 words = [\\"cat\\", \\"tac\\", \\"dog\\"] pairs = [[1, 2], [1, 3]] Output: [True, False] Explanation: Pair 1: \\"cat\\" and \\"tac\\" are anagrams. Pair 2: \\"cat\\" and \\"dog\\" are not anagrams. Your Task: You do not need to read input or print anything. Your task is to complete the function areAnagrams() which takes N, words[], and pairs[] as input parameters and returns a list containing boolean values for each pair, indicating whether they are anagrams. Expected Time Complexity: O(N*K + P), where K is the average length of the words, and P is the number of pairs. Expected Auxiliary Space: O(N*K) Constraints: 1 ≤ N ≤ 10^3 1 ≤ |words[i]| ≤ 100 1 ≤ |pairs| ≤ 10^4","solution":"from typing import List def areAnagrams(N: int, words: List[str], pairs: List[List[int]]) -> List[bool]: def sorted_word(word): return \'\'.join(sorted(word)) sorted_words = [sorted_word(word) for word in words] results = [] for i, j in pairs: results.append(sorted_words[i-1] == sorted_words[j-1]) return results"},{"question":"Aisha is interested in string manipulation and word games. She has come across a curious problem involving string patterns and now she\'s seeking your help to solve it. The problem is to find the length of the longest substring containing at most two distinct characters from a given string `s`. For example, given the string \\"eceba\\", the longest substring with at most two distinct characters is \\"ece\\", which has a length of 3. Similarly, for the string \\"ccaabbb\\", the longest substring with at most two distinct characters is \\"aabbb\\", with a length of 5. Write a function that takes a string `s` as input and returns the length of the longest substring that contains at most two distinct characters. Function Signature: ```python def longest_substring_with_two_distinct(s: str) -> int: pass ``` Input: - A single line contains the string `s` (1 ≤ |s| ≤ 100,000), where `s` is composed of lowercase English letters. Output: - An integer representing the length of the longest substring with at most two distinct characters. Examples: Input: ``` eceba ``` Output: ``` 3 ``` Input: ``` ccaabbb ``` Output: ``` 5 ``` Input: ``` a ``` Output: ``` 1 ```","solution":"def longest_substring_with_two_distinct(s: str) -> int: if not s: return 0 # Dictionary to store the last positions of each character last_seen = {} left = 0 max_len = 0 for right in range(len(s)): last_seen[s[right]] = right # If we have more than two distinct characters, move the left pointer while len(last_seen) > 2: if last_seen[s[left]] == left: del last_seen[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are given a grid with N rows and M columns consisting of lowercase English letters. Your task is to find the length of the longest path in the grid such that consecutive characters in this path follow each other in alphabetical order, wrapping around from \'z\' to \'a\'. The path may start from any cell in the grid and can include any number of cells, but each cell can be visited only once. The path can move to an adjacent cell horizontally, vertically, or diagonally. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M. - N lines follow, each containing a string of length M representing one row of the grid. -----Output----- For each test case, print a single line containing one integer — the length of the longest alphabetical path. -----Constraints----- - 1 le T le 10 - 1 le N, M le 100 - each string contains only lowercase English letters -----Example Input----- 2 3 4 abcd bcda dabc 2 2 az bz -----Example Output----- 4 3 -----Explanation----- Example case 1: In the grid, one possible path is \'a\' -> \'b\' -> \'c\' -> \'d\'. Example case 2: In the grid, one possible path is \'a\' -> \'z\' -> \'y\'.","solution":"def longest_alphabetical_path(n, m, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] def valid(x, y): return 0 <= x < n and 0 <= y < m def dfs(x, y): if dp[x][y] != -1: return dp[x][y] max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if valid(nx, ny) and (ord(grid[nx][ny]) - ord(grid[x][y]) == 1 or (grid[x][y] == \'z\' and grid[nx][ny] == \'a\')): max_length = max(max_length, 1 + dfs(nx, ny)) dp[x][y] = max_length return max_length dp = [[-1 for _ in range(m)] for _ in range(n)] result = 0 for i in range(n): for j in range(m): result = max(result, dfs(i, j)) return result def process_input(test_cases): results = [] for n, m, grid in test_cases: results.append(longest_alphabetical_path(n, m, grid)) return results"},{"question":"You are given a directed graph with n nodes and m edges, each edge having a non-negative weight. Your task is to partition the graph into two non-empty subgraphs A and B such that there is at least one vertex in subgraph A that has a direct edge to a vertex in subgraph B, and this edge has the smallest weight among all edges in the graph. Input The first line contains two integers n and m (2 ≤ n ≤ 500, 1 ≤ m ≤ 10^5) — the number of nodes and edges in the graph. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 0 ≤ w ≤ 10^6) — representing a directed edge from node u to node v with weight w. Output In the first line, output k (1 ≤ k ≤ n-1) — the number of nodes in subgraph A. In the second line, output k integers — the indexes of the nodes that you include into subgraph A. If there are multiple partitions satisfying the condition, you are allowed to output any. Examples Input 4 5 1 2 10 1 3 5 2 4 1 3 2 2 3 4 3 Output 3 1 3 2 Input 3 3 1 2 4 2 3 1 1 3 3 Output 2 1 2 Note In the first example, the smallest weight edge is from node 2 to node 4 with weight 1. Partitioning nodes 1, 3, and 2 in subgraph A and node 4 in subgraph B ensures the edge with weight 1 goes from A to B. In the second example, the smallest weight edge is from node 2 to node 3 with weight 1. Partitioning nodes 1 and 2 in subgraph A and node 3 in subgraph B ensures the edge with weight 1 goes from A to B.","solution":"def partition_graph(n, m, edges): Returns the partition of the graph so that the edge with the minimum weight leads from subgraph A to subgraph B. Arguments: n -- number of nodes m -- number of edges edges -- list of edges, where each edge is represented by a tuple (u, v, w) Returns: tuple -- a tuple (k, nodes_in_A) where k is the number of nodes in subgraph A nodes_in_A is the list of nodes in subgraph A # Find the edge with the minimum weight edges.sort(key=lambda x: x[2]) u, v, w = edges[0] # Subgraph A contains all nodes except the target node of the smallest edge subgraph_A = [node for node in range(1, n+1) if node != v] return len(subgraph_A), subgraph_A"},{"question":"A popular game involves converting numbers into Roman numerals. Roman numerals consist of the following symbols and their values: | Symbol | Value | |--------|-------| | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | Given an integer, write a function to convert it to a Roman numeral. -----Input----- N: Number of inputs then N lines with input integers 1 <= N <= 10 1 <= integer <= 3999 -----Output----- The corresponding Roman numeral for each integer -----Example----- Input: 2 9 58 Output: IX LVIII","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"There is a magical tree in Chef\'s garden that bears fruits with magical properties. These fruits can either aid in healing or provide energy. Chef has carefully divided these fruits into boxes. Each box may have a combination of healing and energy fruits. The healing fruits are represented by `H` and the energy fruits by `E`. Chef wants to distribute these boxes such that each person gets at least one healing fruit. Help Chef determine the minimum number of boxes required to ensure that each person gets at least one healing fruit. -----Input:----- - First line will contain T, number of testcases. - Each testcase consists of two lines. - The first line contains an integer P, representing the number of people. - The second line contains a string S, where each character represents a box and either contains `H` (healing fruit) or `E` (energy fruit). -----Output:----- For each test case, print a single integer, the minimum number of boxes required. -----Constraints----- - 1 leq T leq 100 - 1 leq P leq 1000 - 1 leq |S| leq 1000 - The string S contains at least P healing fruits. -----Sample Input 1:----- 1 3 HEHEH -----Sample Output 1:----- 3 -----Sample Input 2:----- 1 2 EHEEEHHE -----Sample Output 2:----- 2 -----Explanation 2:----- In the second example, Chef can distribute the first `H` to one person and the second `H` to another person, using the minimum number of boxes which is 2.","solution":"def min_boxes_required(T, test_cases): results = [] for P, S in test_cases: count = 0 for char in S: if char == \'H\': count += 1 if count >= P: results.append(count) break return results"},{"question":"Given an integer list, nums, return the length of the longest strictly increasing subsequence. A subsequence is derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Use dynamic programming to solve this problem and aim for O(n^2) time complexity. ```python longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) => 4 longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) => 4 longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) => 1 ``` Explanation: In the first example, the longest increasing subsequence is `[2, 3, 7, 101]` which has a length of 4. In the second example, the longest increasing subsequence is `[0, 1, 3, 3]` or `[0, 1, 2, 3]` which has a length of 4. In the third example, the longest increasing subsequence is `[7]` which has a length of 1.","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest strictly increasing subsequence. :param nums: List of integers :return: Length of the longest strictly increasing subsequence if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You have recently started working as a software engineer at a tech company. Your manager has assigned you the task of creating an inventory management system. One of the requirements is to develop a feature that can identify the top K most frequent items in the inventory based on their frequency of appearance. Given a list of items followed by Q queries, each of which asks for the top K frequent items, can you write a function that returns the items sorted by their frequency in descending order? Function Signature: ``` def top_k_frequent_items(items: List[int], queries: List[int]) -> List[List[int]]: ``` Input - The function will receive two arguments: * `items`: a list of integers, where each integer represents an item in the inventory. * `queries`: a list of integers, where each integer represents a value K for which you have to find the top K frequent items. Output - The function should return a list of lists, where each inner list contains the top K frequent items corresponding to each query. If two items have the same frequency, they should be sorted by their value in ascending order. The results for each query should be in descending order of item frequency. Constraints - 1 ≤ len(items) ≤ 10^5 - 1 ≤ items[i] ≤ 10^9 - 1 ≤ len(queries) ≤ 10^5 - 1 ≤ K ≤ len(items) Example ```python items = [1,1,1,2,2,3,4,4,4,4] queries = [2, 3] assert top_k_frequent_items(items, queries) == [[1, 4], [1, 4, 2]] ``` Explanation For the first query K = 2, the two most frequent items are 1 (3 times) and 4 (4 times). For the second query K = 3, the three most frequent items are 1 (3 times), 4 (4 times), and 2 (2 times).","solution":"from collections import Counter from typing import List def top_k_frequent_items(items: List[int], queries: List[int]) -> List[List[int]]: Determines the top K most frequent items for each query in the inventory. :param items: List of integers representing the items in the inventory. :param queries: List of integers representing the values of K for each query. :return: List of lists, where each list contains the top K frequent items sorted by frequency. # Count the frequency of each item in the inventory item_count = Counter(items) # Sort the items first by frequency (in descending order) and then by the item value (in ascending order) sorted_items = sorted(item_count.items(), key=lambda x: (-x[1], x[0])) # Extract just the item values into a sorted list (we don\'t need frequencies for the final output) sorted_items_list = [item for item, count in sorted_items] # For each query, get the top K items from the sorted items list result = [] for k in queries: result.append(sorted_items_list[:k]) return result"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n. Your task is to perform the following queries on it: Type 1. Given three integers boldsymbol{k}, boldsymbol{l}, and boldsymbol{r} (1 leq l leq r leq n). Add the integer k to each element within the subarray a_l, a_{l+1}, ldots, a_r inclusive. Type 2. Given two integers boldsymbol{l} and boldsymbol{r} (1 leq l leq r leq n). Find the maximum element within the subarray a_l, a_{l+1}, ldots, a_r inclusive. Input Format The first line contains two integers n and textit{q}. The second line contains n integers a_1, a_2, ldots, a_n, denoting the initial array. Each of the next q lines contains either three integers 1, k, l, r or two integers 2, l, r. The integer 1 denotes a Type 1 query and 2 denotes a Type 2 query as described above. Constraints 1 leq n leq 10^5 1 leq q leq 10^5 1 leq a_i leq 10^6 1 leq k leq 10^6 1 leq l leq r leq n Output Format For each query of the second type, print the required maximum element. Sample Input 8 5 4 2 7 1 3 5 8 6 1 3 2 4 2 1 4 2 5 7 1 -2 1 3 2 3 6 Example Output 10 8 8 Explanation After the first query, the array becomes [4, 5, 10, 4, 3, 5, 8, 6]. The maximum element in the subarray from 1 to 4 is 10. The maximum element in the subarray from 5 to 7 is 8. After the fourth query, the array becomes [2, 3, 8, 4, 3, 5, 8, 6]. The maximum element in the subarray from 3 to 6 is 8.","solution":"def perform_queries(n, q, arr, queries): This function performs a series of type 1 and type 2 queries on the given array `arr`. Parameters: n (int): The length of the array `arr`. q (int): The number of queries. arr (List[int]): The initial array of integers. queries (List[Tuple[int, ...]]): A list of queries where each query is a tuple. The first element of the tuple is the query type (1 or 2). For Type 1: The tuple is (1, k, l, r) For Type 2: The tuple is (2, l, r) Returns: List[int]: The results of all Type 2 queries. results = [] for query in queries: if query[0] == 1: # Type 1 query k, l, r = query[1], query[2], query[3] for i in range(l-1, r): arr[i] += k elif query[0] == 2: # Type 2 query l, r = query[1], query[2] results.append(max(arr[l-1:r])) return results"},{"question":"Write a program to compute the sum of prime numbers in a given range. Input The input consists of two integers, a and b (1 ≤ a ≤ b ≤ 10^6), representing the range [a, b]. Output Output a single integer, the sum of all prime numbers in the range [a, b]. If there are no prime numbers in this range, output 0. Examples Input 10 20 Output 60 Input 5 5 Output 5 Input 14 14 Output 0","solution":"def sum_of_primes_in_range(a, b): Returns the sum of prime numbers in the range [a, b]. def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True sum_primes = 0 for num in range(a, b + 1): if is_prime(num): sum_primes += num return sum_primes"},{"question":"In a galaxy far, far away, there exists a unique transportation system in a large futuristic city. The system is represented as a directed graph where intersections are nodes and roads are edges with varying travel times. Agents in the city need to determine the shortest travel time between intersections using this system. Write a program to find the shortest travel time between two designated intersections. -----Input----- The first line contains two integers N and M, where N is the number of intersections (nodes) and M is the number of roads (edges). The next M lines each contain three integers u, v, and w, representing a directed road from intersection u to intersection v with a travel time of w. The last line contains two integers S and T, representing the start and the destination intersections respectively. -----Output----- Print the shortest travel time from intersection S to intersection T. If there is no path from S to T, print -1. -----Constraints----- 1 ≤ N ≤ 1000 1 ≤ M ≤ 5000 1 ≤ u, v, S, T ≤ N 1 ≤ w ≤ 1000 -----Sample Input----- 5 6 1 2 4 1 3 2 2 3 5 2 4 10 3 4 3 4 5 1 1 5 -----Sample Output----- 6 -----Explanations----- In the given sample, the shortest path from intersection 1 to intersection 5 is through the path 1 -> 3 -> 4 -> 5 with a total travel time of 6 (2 + 3 + 1 = 6).","solution":"import heapq def shortest_travel_time(N, M, roads, S, T): Returns the shortest travel time from node S to node T. If there is no such path, returns -1. Parameters: N (int): Number of intersections (nodes). M (int): Number of roads (edges). roads (list of tuples): Each tuple contains three integers u, v, w representing a directed road from u to v with travel time w. S (int): Starting intersection. T (int): Destination intersection. Returns: int: Shortest travel time from S to T. If no path, returns -1. # Create adjacency list representation of the graph graph = {i: [] for i in range(1, N + 1)} for u, v, w in roads: graph[u].append((v, w)) # Dijkstra\'s algorithm heap = [(0, S)] # Min-heap, (travel_time, node) distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[S] = 0 while heap: current_distance, current_node = heapq.heappop(heap) if current_node == T: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return -1 if distances[T] == float(\'inf\') else distances[T]"},{"question":"Given a grid with \'X\' and \'O\', where \'X\' denotes walls and \'O\' denotes open spaces. Write a function to count the number of distinct enclosed regions formed exclusively by \'O\' surrounded by \'X\'. Example 1: Input: grid = [ [\'X\', \'X\', \'X\', \'X\'], [\'X\', \'O\', \'O\', \'X\'], [\'X\', \'X\', \'O\', \'X\'], [\'X\', \'O\', \'X\', \'X\'] ] Output: 1 Explanation: The 2x2 area made up of \'O\' in the center of the grid is one enclosed region. Example 2: Input: grid = [ [\'X\', \'O\', \'X\'], [\'X\', \'O\', \'X\'], [\'X\', \'X\', \'X\'] ] Output: 0 Explanation: There are no enclosed regions, as the \'O\'s are along the edge of the grid. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countEnclosedRegions() which takes a 2D list of characters \'X\' and \'O\' and returns the number of distinct enclosed regions. Expected Time Complexity: O(n*m) Expected Auxiliary Space: O(n*m) Constraints: 1 ≤ n, m ≤ 100","solution":"def countEnclosedRegions(grid): if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] != \'O\': return grid[r][c] = \'E\' # Mark this cell as visited (escaped) # Perform DFS in all four directions dfs(r+1, c) dfs(r-1, c) dfs(r, c+1) dfs(r, c-1) # Step 1: Mark all \'O\'s that are connected to the boundary for r in range(rows): if grid[r][0] == \'O\': dfs(r, 0) if grid[r][cols-1] == \'O\': dfs(r, cols-1) for c in range(cols): if grid[0][c] == \'O\': dfs(0, c) if grid[rows-1][c] == \'O\': dfs(rows-1, c) # Step 2: Count and mark all remaining \'O\'s as enclosed regions enclosed_regions = 0 for r in range(1, rows-1): for c in range(1, cols-1): if grid[r][c] == \'O\': enclosed_regions += 1 dfs(r, c) return enclosed_regions"},{"question":"You are given an undirected graph represented by n nodes and m edges. The graph contains no self-loops or multiple edges between the same pair of vertices. Your task is to determine the minimum number of edges to remove so that after the removal, the graph becomes a collection of trees (i.e., each connected component of the graph becomes a tree). ----- Input ----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. Description of the test cases follows. Each test case starts with two integers n and m (1 le n le 10^5, 0 le m le 10^5) — the number of nodes and edges, respectively. Then m lines follow, each line contains two integers u and v (1 le u, v le n) — denoting an edge between nodes u and v. It is guaranteed that the sum of n over all test cases does not exceed 10^5 and the sum of m over all test cases does not exceed 10^5. ----- Output ----- For each test case output a single integer — the minimum number of edges to remove. ----- Examples ----- Input 2 4 3 1 2 2 3 3 4 6 6 1 2 2 3 3 1 4 5 5 6 6 4 Output 0 2 ----- Note ----- In the first test case, the graph is already a tree, so no edges need to be removed. In the second test case, the graph contains a cycle among nodes 1, 2, and 3, and a cycle among nodes 4, 5, and 6. Removing two edges (one from each cycle) would suffice to convert the graph into a collection of trees.","solution":"def min_edges_to_remove(t, test_cases): def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if xroot != yroot: if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 results = [] for n, m, edges in test_cases: parent = [i for i in range(n)] rank = [0] * n excess_edges = 0 for u, v in edges: u, v = u - 1, v - 1 if find(parent, u) != find(parent, v): union(parent, rank, u, v) else: excess_edges += 1 results.append(excess_edges) return results # Test case example usage if __name__ == \\"__main__\\": t = 2 test_cases = [ (4, 3, [(1, 2), (2, 3), (3, 4)]), (6, 6, [(1, 2), (2, 3), (3, 1), (4, 5), (5, 6), (6, 4)]) ] results = min_edges_to_remove(t, test_cases) for result in results: print(result)"},{"question":"You are tasked with creating a software system that keeps track of task priorities for various departments within a company. The system should be able to sort tasks within each department based on their priority levels. Each task has a unique integer identifier, a department code, and an integer priority level. The company has multiple departments, each identified by a unique department code. Your task is to write a program that sorts all tasks first by department code in ascending order, and then by task priority within each department in descending order. INPUT: The first line contains an integer N, the number of tasks. The next N lines each contain three integers separated by space: the task identifier, the department code, and the priority level of the task. OUTPUT: Print N lines containing the task identifier, department code, and priority level of each task, sorted in the order specified. CONSTRAINTS: 1 ≤ N ≤ 1000006 0 ≤ Priority ≤ 10^9 SAMPLE INPUT 6 1 3 500 2 1 300 3 2 400 4 1 400 5 2 200 6 3 600 SAMPLE OUTPUT 2 1 400 2 1 300 3 2 400 5 2 200 6 3 600 1 3 500 Explanation: - Department \'1\' has two tasks with priorities \'300\' and \'400\'. - Department \'2\' has two tasks with priorities \'200\' and \'400\'. - Department \'3\' has two tasks with priorities \'500\' and \'600\'. Departments are sorted in ascending order (1, 2, 3) and within each department, tasks are sorted by priority in descending order.","solution":"def sort_tasks(tasks): Sort tasks first by department code in ascending order, and then by task priority within each department in descending order. Args: tasks (list of tuples): list of tasks where each task is represented as a tuple (task_id, dept_code, priority) Returns: list of tuples: sorted list of tasks based on the specified order # Sorting by department code (asc) and then by priority (desc) return sorted(tasks, key=lambda x: (x[1], -x[2]))"},{"question":"Write a function that accepts a string as input and returns a new string with the words reversed but kept in their original order. For example, given the input string \\"The quick brown fox,\\" the output should be \\"ehT kciuq nworb xof.\\" Requirements * Assume the input string will only contain alphabetic characters and spaces. * You should maintain the original case of the letters. * No punctuation will be present in the input string. Example ```python reverse_words(\'The quick brown fox\') # Output: \'ehT kciuq nworb xof\' reverse_words(\'Hello World\') # Output: \'olleH dlroW\' ```","solution":"def reverse_words(input_string): Returns a new string with the words reversed but kept in their original order :param input_string: str :return: str words = input_string.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"In a video game, a player can move in a 2D grid. The grid is represented by a matrix where some cells are passable and others are blocked. The player starts at the top-left corner of the grid (0, 0) and aims to reach the bottom-right corner (N-1, M-1). The player can only move horizontally or vertically to adjacent passable cells. The goal is to determine the minimum number of moves required to get from the start to the destination. If there is no possible path, return -1. Input: The first line contains two integers N and M (1 ≤ N, M ≤ 100) - the dimensions of the grid. Each of the next N lines contains M integers, either 0 or 1, representing the grid. 0 represents a passable cell, and 1 represents a blocked cell. Output: Print the minimum number of moves required or -1 if there is no possible path. SAMPLE INPUT 5 5 0 0 0 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 0 0 0 SAMPLE OUTPUT 8 Explanation In the given grid: 0 0 0 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 0 0 0 One possible path with the minimum number of moves is: (0, 0) → (0, 1) → (0, 2) → (0, 3) → (1, 3) → (1, 4) → (2, 4) → (3, 4) → (4, 4) Thus, the minimum number of moves is 8.","solution":"def min_moves_to_reach_end(N, M, grid): from collections import deque # Directions: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS initialization queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # If we\'ve reached the bottom-right corner, return the distance if (x, y) == (N-1, M-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If we exhaust the queue without finding the end, return -1 return -1 # Example usage # N, M = 5, 5 # grid = [ # [0, 0, 0, 0, 1], # [1, 1, 0, 0, 0], # [0, 1, 0, 1, 0], # [0, 0, 0, 1, 0], # [1, 1, 0, 0, 0] # ] # print(min_moves_to_reach_end(N, M, grid)) # Output: 8"},{"question":"Given an array of N integers, you are tasked with constructing a new array by combining all the elements of the given array in pairs, using the operation a oplus b. The oplus operation is defined as follows: if both a and b are non-negative, then a oplus b = a + b, if both a and b are negative, then a oplus b = a times b, and if one is non-negative and the other is negative, then a oplus b = 0. Your goal is to determine the maximum possible sum of the constructed array. Write a program to compute this sum for given test cases. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, representing the size of the array. - The second line contains N space-separated integers a_1, a_2, ldots, a_N, the elements of the array. -----Output----- For each test case, print a single line containing one integer — the maximum possible sum of the constructed array. -----Constraints----- - 1 le T le 100 - 2 le N le 1000 - -10^4 le a_i le 10^4 for each valid i -----Example Input----- 2 4 1 2 -3 -4 3 0 1 -2 -----Example Output----- 3 1 -----Explanation----- Example case 1: The array can be paired as (1, 2) and (-3, -4). The operations result in 1 oplus 2 = 3 and -3 oplus -4 = 12. The sum is 3 + 12 = 15. Example case 2: The array can be paired as (0, 1) and (-2, 0). The operations result in 0 oplus 1 = 1 and -2 oplus 0 = 0. The sum is 1 + 0 = 1.","solution":"def max_possible_sum(test_cases): Given multiple test cases, compute the maximum possible sum of the array constructed using a ⊕ b operation. results = [] for test in test_cases: N, arr = test non_negatives = [] negatives = [] for num in arr: if num >= 0: non_negatives.append(num) else: negatives.append(num) non_negatives.sort(reverse=True) negatives.sort() max_sum = 0 paired_elements = [] # Process pairs of non-negative numbers while len(non_negatives) >= 2: a = non_negatives.pop() b = non_negatives.pop() max_sum += a + b paired_elements.append((a, b, a + b)) # Process pairs of negative numbers while len(negatives) >= 2: a = negatives.pop() b = negatives.pop() max_sum += a * b paired_elements.append((a, b, a * b)) results.append(max_sum) return results # Example usage # T = 2 # test_cases = [ # (4, [1, 2, -3, -4]), # (3, [0, 1, -2]) # ] # output = max_possible_sum(test_cases) # Should return [15, 1]"},{"question":"You are given a binary string s consisting only of characters \'0\' and \'1\'. You need to split this string into the minimum number of non-overlapping substrings such that within each substring no two \'1\'s are adjacent to each other. In other words, there should be no \'11\' in any substring. Write a function to perform the split and return the minimum number of substrings needed to satisfy the condition. Implement the function `min_substrings(s: str) -> int`. **Input** - The input consists of a single string s (1 ≤ |s| ≤ 2 * 10^5). **Output** - Output a single integer — the minimum number of substrings needed. **Examples** Input ``` \\"100101\\" ``` Output ``` 3 ``` Input ``` \\"111\\" ``` Output ``` 3 ``` Input ``` \\"000\\" ``` Output ``` 1 ``` **Note** In the first example, we can split the string into \\"100\\", \\"1\\", and \\"01\\". In the second example, each \'1\' must be in its own substring to avoid any two \'1\'s being adjacent. In the third example, the string does not contain \'1\'s, so it remains as one substring.","solution":"def min_substrings(s: str) -> int: Returns the minimum number of non-overlapping substrings such that within each substring no two \'1\'s are adjacent to each other. # Count the number of \'1\'s in the input string. ones_count = s.count(\'1\') # Each \'1\' must be in its own substring or be separated by \'0\'s. # To ensure no two \'1\'s are adjacent, the only option is to separate them completely. # Therefore, the minimum number of substrings is equal to the number of \'1\'s. return ones_count if ones_count > 0 else 1"},{"question":"There are n different types of candy, and each type i has an associated sweetness level s_i. You are given a list of candies and their sweetness levels, but you want to distribute them in such a manner that each person you give candy to receives exactly m candies in total. Each person should have candies with the greatest possible combined sweetness. Formally, suppose you have n different types of candy and their corresponding sweetness levels. You need to divide these candies into a number of groups, each containing exactly m candies and having the maximum possible total sweetness. Determine the maximum total sweetness for each of the groups formed. Input The first line contains two integers n (1 ≤ n ≤ 100) — the number of different types of candy, and m (1 ≤ m ≤ 1000) — the number of candies each person should receive. The second line contains n integers s_i (1 ≤ s_i ≤ 1000) — the sweetness levels of each type of candy. Output Print the maximum total sweetness for each person. Example Input 4 3 5 3 9 7 Output 21 Note In the sample case, the best possible divisions are: {9, 7, 5} (with total sweetness 21). Notice that you are to maximize the total sweetness for the distribution of m candies per person. If there are multiple solutions, any one is acceptable as long as the sweetness total is maximized.","solution":"def max_total_sweetness(n, m, sweetness_levels): Returns the maximum possible total sweetness for groups of m candies. # Sorting sweetness levels in descending order. sweetness_levels.sort(reverse=True) # Get the sum of m highest sweetness levels. return sum(sweetness_levels[:m])"},{"question":"Read problems statements in Mandarin Chinese and Russian. Our farmer John owns a vast rectangular farm that he needs to plow. The farm is divided into a grid of NxM cells. Each cell is either fertile (represented by \'.\') or barren (represented by \'#\'). Farmer John uses a special tractor that can plow only fertile cells. John starts plowing from the top-left corner of the grid (1,1). He moves the tractor in four possible directions – up, down, left, or right, but he can only move to a neighboring fertile cell. If John encounters a barren cell, he has to change his direction. The task is to determine the number of connected fertile regions in the farm. A fertile region is a group of one or more connected fertile cells. Two fertile cells are part of the same region if they are connected horizontally or vertically. ------ Input ------ First line contains T, the number of test cases. T test cases follow. For each test case: - The first line contains two integers N and M separated by a space. - The next N lines each contain M characters (\'.\' or \'#\'), representing the farm grid. ------ Constraints ------ 1 leq T leq 10 1 leq N, M leq 1000 Each cell is either \'.\' or \'#\'. ------ Output ------ For each test case, output the number of connected fertile regions on a new line. ------ Sample Input ------ 2 4 5 ..... .#. ..#.. ..... 3 3 # .#. # ------ Sample Output ------ 1 0 In the first test case, the entire grid is fertile except for a few barren cells which split the grid into one large connected fertile region. In the second test case, all cells are barren except for a single isolated fertile cell, so there are zero connected fertile regions.","solution":"def count_fertile_regions(grid, N, M): def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() for nx, ny in [(cx-1, cy), (cx+1, cy), (cx, cy-1), (cx, cy+1)]: if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\': grid[nx][ny] = \'#\' # Mark as visited stack.append((nx, ny)) count = 0 for i in range(N): for j in range(M): if grid[i][j] == \'.\': dfs(i, j) count += 1 return count def main(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 results = [] for _ in range(T): N = int(data[idx]) M = int(data[idx + 1]) idx += 2 grid = [] for i in range(N): grid.append(list(data[idx])) idx += 1 results.append(count_fertile_regions(grid, N, M)) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an array A of size N consisting of integers. You can perform the following operation any number of times: Operation: Pick any subarray of array A and reverse the elements in that subarray. Your task is to determine if it is possible to sort the array A in non-decreasing order using the given operation. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. - The first line of each test case contains a single integer N, the size of array A. - The next line contains N space-separated integers, the elements of array A. ------ Output Format ------ For each test case, print \\"YES\\" if it\'s possible to sort the array A in non-decreasing order using the given operation, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 ----- Sample Input 1 ------ 3 5 3 1 2 4 5 4 4 3 2 1 6 1 2 3 4 5 6 ----- Sample Output 1 ------ YES YES YES ----- Explanation 1 ------ Test Case 1: - Reverse the subarray [3, 1], array becomes [1, 3, 2, 4, 5] - Reverse the subarray [3, 2], array becomes [1, 2, 3, 4, 5] Test Case 2: - Reverse the subarray [4, 3, 2, 1], the array becomes [1, 2, 3, 4] Test Case 3: - The array is already sorted in non-decreasing order","solution":"def can_sort_by_reversing_subarrays(test_cases): results = [] for N, array in test_cases: if array == sorted(array): results.append(\\"YES\\") else: results.append(\\"YES\\") return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((N, array)) index += 2 return test_cases def process_output(results): return \'n\'.join(results) def main(input_data): test_cases = process_input(input_data) results = can_sort_by_reversing_subarrays(test_cases) return process_output(results)"},{"question":"Write a function named `reverse_and_negate` that takes an integer as its input and returns a new integer that is the reverse of the input integer\'s digits and negated in sign. For instance: ```python reverse_and_negate(123) == -321 reverse_and_negate(-456) == 654 reverse_and_negate(1000) == -1 reverse_and_negate(0) == 0 reverse_and_negate(-900) == 9 ```","solution":"def reverse_and_negate(n): Returns the reverse of the digits of the input integer n and changes its sign. # Convert the absolute value of the number to a string and reverse it reversed_number = int(str(abs(n))[::-1]) # Negate the sign depending on the original number\'s sign return -reversed_number if n > 0 else reversed_number"},{"question":"You are given an array of integers where each element represents the altitude at that point. Imagine the array forms a landscape, and each element represents the height of a column. Water fills the landscape such that it always flows downhill. Write a function that calculates the total volume of water trapped between the columns after a rainfall. Input An integer n (1 ≤ n ≤ 1000) — the number of columns, followed by an array of n non-negative integers: the heights of the columns. Output Print a single integer: the total volume of trapped water. Examples Input 6 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 Input 5 4 2 0 3 2 5 Output 9 Note In the first sample, the landscape formed by the columns allows for water to be trapped in multiple places. The columns at positions 1, 4, 5, and 6 trap a total of 6 units of water. In the second sample, the landscape formed by the columns traps a total of 9 units of water. Hints: 1. Start by identifying the maximum height column to the left and to the right of each column. 2. The water level above each column is determined by the shorter of the maximum heights from the left and right minus the height of the current column. 3. Sum up the water levels above each column to get the total trapped water.","solution":"def calculate_trapped_water(n, heights): Calculate the total volume of water trapped between columns after a rainfall. Parameters: n (int): Number of columns heights (list): Heights of the columns Returns: int: Total volume of trapped water if n <= 2: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Given a string `s`, find the length of the longest substring without repeating characters. -----Constraints----- - `s` consists of printable ASCII characters. - 1 ≤ `s.length` ≤ 10^5 -----Input----- Input is given from Standard Input in the following format: `s` -----Output----- Print the length of the longest substring without repeating characters. -----Sample Input----- abcabcbb -----Sample Output----- 3 Explanation: The longest substring without repeating characters is \\"abc\\", which the length is 3.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} start = 0 max_length = 0 for end, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a list of \'n\' barrels, each having a certain capacity (in liters), and you are also given an integer \'k\' which denotes the number of barrels you can use. You need to select \'k\' barrels in such a way that the sum of their capacities is as large as possible. The first line of input contains two space-separated integers n and k. The second line contains n space-separated integers denoting the capacities of the barrels. Example 1: Input: n=5 k=3 capacities = [1 2 4 8 9] Output: 21 Explanation: Selecting barrels with capacities 9, 8, and 4 gives us the maximum possible sum, which is 21. Example 2: Input: n=5 k=2 capacities = [3 1 2 5 6] Output: 11 Explanation: Selecting barrels with capacities 6 and 5 gives us the maximum possible sum, which is 11. Your Task: Complete the function int maxBarrelCapacity(), which takes integers n, k, and a vector capacities with n integers as input and returns the maximum possible sum of the capacities of \'k\' barrels. Expected Time Complexity: O(n*log(n)). Expected Auxiliary Space: O(1). Constraints: 2 <= n <= 10^5 1 <= k <= n 1 <= capacities[i] <= 10^9","solution":"def maxBarrelCapacity(n, k, capacities): Returns the maximum possible sum of the capacities of \'k\' barrels. # Sort the capacities in descending order capacities.sort(reverse=True) # Sum the top k capacities max_capacity = sum(capacities[:k]) return max_capacity # Example usage # n = 5, k = 3, capacities = [1, 2, 4, 8, 9] # The maximum possible sum is 21 print(maxBarrelCapacity(5, 3, [1, 2, 4, 8, 9])) # Output: 21"},{"question":"You are given a string containing digits from \'0\' to \'9\' and lowercase letters. Your task is to rearrange the string so that all the letters come first, followed by all the digits. The relative order between letters and between digits should be preserved. If you receive an empty string, return it as is. *Example* ```python rearrange_string(\\"a1b2c3\\") == \\"abc123\\" ```","solution":"def rearrange_string(s): Rearrange the string so that all letters come first followed by all digits. The relative order between letters and between digits is preserved. Parameters: s (str): Input string containing digits and lowercase letters. Returns: str: Rearranged string with letters first followed by digits. letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(letters) + \'\'.join(digits)"},{"question":"A city’s traffic control system is being upgraded to facilitate smoother traffic flows. Your task is to write a program that helps determine the optimal way to clear a traffic intersection. You will be given directions from which cars are coming. A car can either come from the north, south, east, or west. If a car is coming from multiple directions at the same time, a collision occurs. -----Input----- Input is a text with multiple lines. Each line represents the directions from which cars are coming to the intersection in a particular second. The directions are represented by the characters ‘N’ (north), ‘S’ (south), ‘E’ (east), and ‘W’ (west). Each character appears at most once per line. Input ends at end of file. -----Output----- Print “Safe” if all the cars in each second can pass without collision or “Collision” if there is any second where cars from two or more directions arrive simultaneously. -----Examples----- Sample Input: N ES W NW Sample Output: Safe Collision Safe Collision","solution":"def check_traffic(lines): results = [] for line in lines: if len(line.strip()) > 1: results.append(\\"Collision\\") else: results.append(\\"Safe\\") return results"},{"question":"You are given an array of integers representing a sequence of tasks, where the value of each integer represents the time taken to complete that task. You have multiple processors available to execute these tasks. Each processor can execute only one task at a time, and each task must be assigned to exactly one processor. The objective is to assign tasks to processors in such a way that the time taken to complete all tasks (makespan) is minimized. The makespan is the maximum time taken by any processor to complete its assigned tasks. Your task is to determine the minimum makespan when the tasks are optimally assigned to the processors. Write a function `minimize_makespan(tasks, m)` that takes a list of integers `tasks` representing task times and an integer `m` representing the number of processors, and returns the minimum possible makespan. -----Input----- - `tasks`: A list of integers text{tasks} = [t_1, t_2, ldots, t_n] where 1 leq t_i leq 10^4 and 1 leq n leq 10^4. - `m`: An integer representing the number of processors, where 1 leq m leq 100. -----Output----- - An integer representing the minimum possible makespan. -----Example----- Input ``` tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] m = 5 ``` Output ``` 15 ``` Explanation: One possible optimal assignment is: - Processor 1: 10 - Processor 2: 9 + 1 = 10 - Processor 3: 8 + 2 = 10 - Processor 4: 7 + 3 = 10 - Processor 5: 6 + 4 + 5 = 15 Thus, the makespan is 15.","solution":"def minimize_makespan(tasks, m): Returns the minimum possible makespan when tasks are optimally assigned to m processors. def can_complete_in_time(mid, tasks, m): required_processors = 1 current_time = 0 for task in tasks: if current_time + task > mid: required_processors += 1 current_time = task if required_processors > m: return False else: current_time += task return True if not tasks or m <= 0: return 0 tasks.sort(reverse=True) left, right = max(tasks), sum(tasks) while left < right: mid = (left + right) // 2 if can_complete_in_time(mid, tasks, m): right = mid else: left = mid + 1 return left"},{"question":"A scientist is researching the properties of neighboring cells in a two-dimensional grid. Each cell in the grid contains a single positive integer, representing some measurable property. The scientist would like to find the largest possible sum of values contained in any 2x2 subgrid within the given grid. Can you help the scientist by writing a program that finds this sum? ------ Input Format ------ - The first line of input contains two integers n and m, denoting the number of rows and columns in the grid respectively. - Each of the next n lines contains m integers, representing the values in the grid. ------ Output Format ------ - Output a single integer, the largest possible sum of any 2x2 subgrid. ------ Constraints ------ 2 ≤ n, m ≤ 50 1 ≤ text{grid[i][j]} ≤ 100 ----- Sample Input 1 ------ 3 3 1 2 3 4 5 6 7 8 9 ----- Sample Output 1 ------ 28 ----- explanation 1 ------ The subgrid with the largest sum is: 5 6 8 9 The sum is 5 + 6 + 8 + 9 = 28","solution":"def max_2x2_sum(grid): Given a 2D grid, find the maximum sum of any 2x2 subgrid. n = len(grid) m = len(grid[0]) max_sum = float(\'-inf\') for i in range(n - 1): for j in range(m - 1): current_sum = ( grid[i][j] + grid[i][j + 1] + grid[i + 1][j] + grid[i + 1][j + 1] ) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Write a function named `evenIndicesSum` that takes a list of integers as its input and returns the sum of the elements that are located at even indices (0, 2, 4, ...). If the input is not a list of integers, return 0. Examples of inputs and subsequent outputs: ``` [1, 2, 3, 4, 5] -> 9 (1 + 3 + 5) [10, 20, 30, 40, 50, 60] -> 150 (10 + 30 + 50 + 60) \\"12345\\" -> 0 [5, 15, 25] -> 30 (5 + 25) ```","solution":"def evenIndicesSum(lst): Returns the sum of elements located at even indices in the list. If the input is not a list of integers, returns 0. if not isinstance(lst, list) or not all(isinstance(i, int) for i in lst): return 0 return sum(lst[i] for i in range(0, len(lst), 2))"},{"question":"You are given a string `s` of length `n` consisting only of characters \'X\' and \'O\'. You have to process this string and count the number of contiguous subsequences of one or more \'O\'s. For instance, given the string \\"XOOXOXOX\\", there are three contiguous subsequences of \'O\'s (\\"OO\\", \\"O\\", and \\"O\\"). Write a function that takes the string `s` as input and returns the count of contiguous subsequences of \'O\'s. -----Input----- The input consists of a single line containing the string `s` (1 ≤ n ≤ 100,000). -----Output----- Output a single integer, the count of contiguous subsequences of \'O\'s. -----Examples----- Input XOOXOXOX Output 3 Input OOOOO Output 1 Input XXOXOXOXOX Output 4 -----Note----- In the first sample, the three contiguous subsequences of \'O\'s are \\"OO\\", \\"O\\", and \\"O\\". In the second sample, there is only one contiguous subsequence of \'O\'s which is \\"OOOOO\\". In the third sample, there are four contiguous subsequences of \'O\'s, each consisting of a single \'O\'.","solution":"def count_contiguous_Os(s): Count the number of contiguous subsequences of \'O\'s. count = 0 in_O_sequence = False for char in s: if char == \'O\': if not in_O_sequence: in_O_sequence = True count += 1 else: in_O_sequence = False return count"},{"question":"Write a function that takes a string and returns the character that appears most frequently. If there is a tie, return the character that appears first in the string. Assume that the input string will always be non-empty and consist only of alphabets. Examples: ```python most_frequent_char(\\"abacaba\\") > \'a\' # \'a\' appears 4 times, which is the most frequent most_frequent_char(\\"aabbbcc\\") > \'b\' # \'b\' and \'a\' are both tied for most frequent, but \'b\' appears first in the sequence ```","solution":"def most_frequent_char(s): Returns the character that appears most frequently in the string. If there is a tie, return the character that appears first. char_count = {} max_char = s[0] max_count = 1 for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 if char_count[char] > max_count or (char_count[char] == max_count and s.index(char) < s.index(max_char)): max_char = char max_count = char_count[char] return max_char"},{"question":"You are given a large array of integers of size (N) and are required to handle two types of queries efficiently: 1. add l r value: Add a certain value to all elements in the subarray from index (l) to (r) (both inclusive). 2. sum l r: Compute the sum of all elements in the subarray from index (l) to (r) (both inclusive). Input Format The first line contains an integer (N), the size of the array. The second line contains (N) integers representing the initial values of the array. The next line contains (Q), the number of queries to process. The next (Q) lines contain either an `add` or `sum` query. Constraints (1 leq N leq 10^5) (1 leq Q leq 10^5) (1 leq l leq r leq N) (-10^4 leq value, element leq 10^4) Output Format For each `sum` query, output the result in a new line. Sample Input 6 1 2 3 4 5 6 4 add 2 4 10 sum 1 3 add 1 6 -2 sum 1 6 Sample Output 36 33 Explanation Initially, the array is [1, 2, 3, 4, 5, 6]. - After `add 2 4 10`, the array becomes [1, 12, 13, 14, 5, 6]. - Sum of elements from index 1 to 3 is (1 + 12 + 13 = 26). - After `add 1 6 -2`, the array becomes [-1, 10, 11, 12, 3, 4]. - Sum of elements from index 1 to 6 is (-1 + 10 + 11 + 12 + 3 + 4 = 39).","solution":"class ArrayManipulator: def __init__(self, arr): self.n = len(arr) self.arr = arr self.lazy = [0] * (self.n + 1) def add(self, l, r, value): self.lazy[l-1] += value if r < self.n: self.lazy[r] -= value def sum(self, l, r): current_addition = 0 result = 0 for i in range(l-1, r): current_addition += self.lazy[i] result += self.arr[i] + current_addition return result"},{"question":"Given a list of `N` positive integers representing the heights of buildings in a row, imagine a scenario where you can only see a building if there are no taller buildings standing before it. Write a function that returns the number of buildings that are visible from the left side of the array. Example 1: Input: N = 6 buildings = [3, 5, 4, 9, 2, 6] Output: 3 Explanation: The buildings that are visible are the ones with heights 3, 5, and 9. Buildings with heights 4, 2, and 6 are not visible because there are taller buildings before them. Example 2: Input: N = 5 buildings = [1, 2, 3, 4, 5] Output: 5 Explanation: All the buildings are visible as each building is taller than the previous one. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countVisibleBuildings() which takes an integer N and a list of integers buildings as input and returns the number of visible buildings. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^3 1 <= buildings[i] <= 10^3","solution":"def count_visible_buildings(N, buildings): Returns the number of buildings that are visible from the left side. Parameters: N (int): Number of buildings buildings (list): List of heights of buildings Returns: int: Number of visible buildings if N == 0: return 0 max_height = buildings[0] visible_count = 1 # The first building is always visible for i in range(1, N): if buildings[i] > max_height: visible_count += 1 max_height = buildings[i] return visible_count"},{"question":"Given two integers start and target, you are tasked with finding the minimum number of operations required to convert start to target using only the following operations: 1. Multiply the current number by 2. 2. Subtract 1 from the current number. Example 1: Input: start = 2, target = 3 Output: 2 Explanation: 2 -> 4 -> 3 Example 2: Input: start = 5, target = 8 Output: 2 Explanation: 5 -> 10 -> 9 -> 8 Your Task: You don\'t need to read or print anything. Your task is to complete the function minOperations() which takes start and target as input parameters and returns the minimum number of operations needed to convert start to target. Expected Time Complexity: O(log(target)) Expected Space Complexity: O(1) Constraints: 1 <= start, target <= 10^9","solution":"def minOperations(start, target): Returns the minimum number of operations to convert start to target using the specified operations. operations = 0 while target > start: if target % 2 == 0: target //= 2 else: target += 1 operations += 1 operations += (start - target) return operations"},{"question":"Given a number N. Determine if the digits of N can be permuted to form a palindrome. A palindrome is a number that reads the same backward as forward. Example 1: Input: N = 121 Output: 1 Explanation: 121 reads the same backward as forward. Example 2: Input: N = 123 Output: 0 Explanation: No permutation of 123 forms a palindrome. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canFormPalindrome() which takes an integer N as input parameters and returns an integer, 1 if the digits can be permuted to form a palindrome and 0 otherwise. Expected Time Complexity: O(log N) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^{5}","solution":"def canFormPalindrome(N): Determine if the digits of the number N can be permuted to form a palindrome. Parameters: N (int): The input number. Returns: int: 1 if the digits can be permuted to form a palindrome, 0 otherwise. from collections import Counter # Convert number to a string to iterate its digits str_N = str(N) # Count the occurrences of each digit count = Counter(str_N) # Check the number of digits with odd occurrences odd_count = sum(1 for digit in count if count[digit] % 2 != 0) # A number can be permuted to form a palindrome if there is at most one digit with an odd count return 1 if odd_count <= 1 else 0"},{"question":"Implement a function that takes a string as input and returns a new string where each letter is replaced by the next letter in the alphabet. The transformation should be case-sensitive and should wrap around starting from \'a\' to \'z\' and \'A\' to \'Z\' (i.e., \'z\' becomes \'a\' and \'Z\' becomes \'A\'). Non-letter characters should remain unchanged. # Examples: ``` \\"abcd\\" ==> \\"bcde\\" \\"XYZ\\" ==> \\"YZA\\" \\"Hello, World!\\" ==> \\"Ifmmp, Xpsme!\\" \\"123_abc_XYZ\\" ==> \\"123_bcd_YZA\\" ```","solution":"def shift_characters(input_string): Takes a string and returns a new string where each letter is replaced by the next letter in the alphabet. The transformation is case-sensitive and wraps around from \'z\' to \'a\' and \'Z\' to \'A\'. Non-letter characters remain unchanged. def shift_char(c): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + 1) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + 1) % 26 + ord(\'A\')) return c return \'\'.join(shift_char(c) for c in input_string)"},{"question":"Aman loves reading and has a collection of books. Each book is represented by a unique ID and has its own number of pages. Each page of a book can contain different numbers of words. Aman wants to know the total number of words across all pages in a specific book from his collection. **Help Aman calculate the total number of words in a specified book.** ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - For each test case: - The first line contains a single integer B, denoting the number of books. - The next B lines contain: - An integer ID, denoting the unique ID of the book. - An integer P, denoting the number of pages in the book. - P integers W1, W2, ..., WP, where Wi represents the number of words on page i of the book. - The next line contains a single integer Q, the ID of the book Aman is querying about. ------ Output Format ------ For each test case, output on a new line, the total number of words in the specified book. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ B ≤ 100 1 ≤ ID ≤ 1000 1 ≤ P ≤ 100 1 ≤ Wi ≤ 1000 ------ Sample Input 1 ------ 2 3 1 3 100 200 300 2 2 50 75 3 4 10 20 30 40 2 2 1 3 100 200 300 3 4 10 20 30 40 3 ------ Sample Output 1 ------ 125 100 ------ Explanation 1 ------ Test case 1: The book with ID 2 has 2 pages with 50 and 75 words respectively. The total number of words in this book is 50+75=125. Test case 2: The book with ID 3 has 4 pages with 10, 20, 30, and 40 words each. The total number of words in this book is 10+20+30+40=100.","solution":"def calculate_total_words(test_cases): results = [] for test_case in test_cases: book_details = test_case[\'book_details\'] query_id = test_case[\'query_id\'] for book in book_details: if book[\'id\'] == query_id: results.append(sum(book[\'words\'])) break return results def parse_input(input_text): lines = input_text.split(\'n\') T = int(lines[0].strip()) index = 1 test_cases = [] for _ in range(T): B = int(lines[index].strip()) index += 1 book_details = [] for _ in range(B): parts = list(map(int, lines[index].strip().split())) book_id = parts[0] P = parts[1] words = parts[2:] book_details.append({\'id\': book_id, \'words\': words}) index += 1 query_id = int(lines[index].strip()) test_cases.append({\'book_details\': book_details, \'query_id\': query_id}) index += 1 return test_cases def solve(input_text): test_cases = parse_input(input_text) return calculate_total_words(test_cases) # Sample Input sample_input = 2 3 1 3 100 200 300 2 2 50 75 3 4 10 20 30 40 2 2 1 3 100 200 300 3 4 10 20 30 40 3 # This line is for directly getting the output to ensure function is working. print(solve(sample_input)) # Expected output: [125, 100]"},{"question":"Amber loves pancakes. One fine morning, she decides to make a perfect batch of pancakes for breakfast. She has a specific recipe to follow, and she needs your assistance to check if she has the right mix of ingredients. The recipe calls for the following: - `p` grams of flour - `q` eggs - `r` milliliters of milk - `s` grams of butter Amber has `P` grams of flour, `Q` eggs, `R` milliliters of milk, and `S` grams of butter. She wants to make sure that she has enough of each ingredient to make at least one batch of pancakes, or else she needs to know which ingredient(s) she is short of. Help her determine if she can make the pancakes and if not, identify the lacking ingredients. Input The input consists of: 1. Four space-separated integers: `P Q R S` (the available quantities of flour, eggs, milk, and butter respectively with 1 ≤ P, Q, R, S ≤ 100000) 2. Four space-separated integers: `p q r s` (the required quantities per batch, with 1 ≤ p, q, r, s ≤ 100000) Output Output `Yes` if she can make at least one batch of pancakes. If not, output `No` followed by the lacking ingredient(s), each preceded by a minus sign and space-separated. Ingredients should be listed in the following order if they are lacking: flour, eggs, milk, butter. SAMPLE INPUT 500 5 200 50 200 2 150 40 SAMPLE OUTPUT Yes SAMPLE INPUT 300 3 100 20 200 2 150 40 SAMPLE OUTPUT No -milk -butter Explanation In the first sample: - Amber has 500 grams of flour and needs 200 grams, which is enough. - Amber has 5 eggs and needs 2 eggs, which is enough. - Amber has 200 milliliters of milk but needs 150 milliliters, which is enough. - Amber has 50 grams of butter and needs 40 grams, which is enough. Therefore, the output is \\"Yes\\". In the second sample: - Amber has 300 grams of flour and needs 200 grams, which is enough. - Amber has 3 eggs and needs 2 eggs, which is enough. - Amber has 100 milliliters of milk but needs 150 milliliters, which is not enough. - Amber has 20 grams of butter and needs 40 grams, which is not enough. Therefore, the output is \\"No -milk -butter\\".","solution":"def can_make_pancakes(P, Q, R, S, p, q, r, s): Determine if Amber can make at least one batch of pancakes. Parameters: P (int): available grams of flour Q (int): available eggs R (int): available milliliters of milk S (int): available grams of butter p (int): required grams of flour per batch q (int): required eggs per batch r (int): required milliliters of milk per batch s (int): required grams of butter per batch Returns: str: \\"Yes\\" if enough ingredients, otherwise \\"No\\" followed by the lacking ingredients lacking_ingredients = [] if P < p: lacking_ingredients.append(\\"-flour\\") if Q < q: lacking_ingredients.append(\\"-eggs\\") if R < r: lacking_ingredients.append(\\"-milk\\") if S < s: lacking_ingredients.append(\\"-butter\\") if not lacking_ingredients: return \\"Yes\\" else: return \\"No \\" + \\" \\".join(lacking_ingredients)"},{"question":"Given a linked list, determine if it is a palindrome. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, the number of nodes in the linked list. - The second line contains N space-separated integers, the values of the nodes in the order they appear in the list. -----Output:----- - For each test case, print \\"yes\\" if the linked list is a palindrome, otherwise print \\"no\\". -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 10^5 - The values of the nodes will be integers within the range -10^6 to 10^6. -----Sample Input:----- 2 3 1 2 1 4 1 2 3 4 -----Sample Output:----- yes no -----Explanation:----- - In the first test case, the linked list is [1 -> 2 -> 1] which is a palindrome because it reads the same forward and backward. - In the second test case, the linked list is [1 -> 2 -> 3 -> 4] which is not a palindrome because it does not read the same forward and backward.","solution":"def is_palindrome_linked_list(arr): Returns \'yes\' if the linked list represented by array arr is a palindrome, \'no\' otherwise. return \'yes\' if arr == arr[::-1] else \'no\' def process_palindrome_tests(T, test_cases): results = [] for case in test_cases: N, arr = case results.append(is_palindrome_linked_list(arr)) return results"},{"question":"Alicia has a garden where she plants flowers in a straight line. Each flower has a specific height, and she wants to trim some flowers to create a visually pleasing pattern. She decides that a flower arrangement is visually pleasing if after trimming some flowers, the remaining flowers form an increasing subsequence in their heights. Given the heights of the flowers in order, you need to find the length of the longest visually pleasing arrangement that she can achieve. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the number of flowers in the garden. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1000), where h_i represents the height of the i-th flower. -----Output----- Print a single integer, the length of the longest visually pleasing arrangement of flowers. -----Examples----- Input 6 10 9 2 5 3 7 101 18 Output 4 Input 4 1 3 2 4 Output 3","solution":"def length_of_LIS(flowers): Given the heights of the flowers in the garden, determine the length of the longest visually pleasing arrangement that can be achieved by trimming some flowers to form an increasing subsequence. :param flowers: List of integers representing the heights of flowers. :return: Length of the longest increasing subsequence. if not flowers: return 0 dp = [1] * len(flowers) for i in range(1, len(flowers)): for j in range(i): if flowers[i] > flowers[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"# Scenario Given an array of integers, we define its \\"zigzag sum\\" as the sum of elements at odd indices minus the sum of elements at even indices. ___ # Task **Given** a *sequence of n integers*, **calculate** *the zigzag sum*. ___ # Notes * **Sequence size** is **at least** **3** * Indices are **0-based** * **Return** the calculated zigzag sum as a single integer ___ # Input >> Output Examples: ``` zigzagSum([1, 2, 3, 4, 5]) ==> return (3) ``` **Explanation**: - Sum of odd indices: 2 + 4 = 6 - Sum of even indices: 1 + 3 + 5 = 9 - Zigzag sum: 6 - 9 = -3 ____ ``` zigzagSum([-10, 20, -30, 40, -50]) ==> return (10) ``` **Explanation**: - Sum of odd indices: 20 + 40 = 60 - Sum of even indices: -10 + -30 + -50 = -90 - Zigzag sum: 60 - (-90) = 60 + 90 = 150 ____ ``` zigzagSum([5, 5, 5, 5, 5, 5, 5, 5, 5]) ==> return (0) ``` **Explanation**: - Sum of odd indices: 5 + 5 + 5 + 5 = 20 - Sum of even indices: 5 + 5 + 5 + 5 + 5 = 25 - Zigzag sum: 20 - 25 = -5 - The benchmark indicates a pattern indicating the number of odd indices is smaller by half or one less compared to even indices. ____ # Ensure O(N) complexity solutions will pass for the input `sequence` of up to 100,000 elements.","solution":"def zigzag_sum(arr): Calculate the zigzag sum: sum of elements at odd indices - sum of elements at even indices. Parameters: arr (list): A list of integers. Returns: int: The zigzag sum. odd_sum = sum(arr[i] for i in range(1, len(arr), 2)) even_sum = sum(arr[i] for i in range(0, len(arr), 2)) return odd_sum - even_sum"},{"question":"You are given a binary string S consisting of characters \'0\' and \'1\'. Your task is to determine the minimum number of operations required to make the string \\"beautiful.\\" A string is considered \\"beautiful\\" if it doesn\'t contain the substring \\"010\\" or \\"101\\". In one operation, you are allowed to change any \'0\' to \'1\' or vice versa. For example, the strings \\"0110\\", \\"1001\\", and \\"1100\\" are beautiful, but \\"0101\\" and \\"1010\\" are not. ------ Input ------ - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a binary string S. ------ Output ------ For each test case, output the minimum number of operations required to make the string \\"beautiful\\". ------ Constraints ------ 1. 1 ≤ T ≤ 100 2. 1 ≤ |S| ≤ 10^5 The sum of |S| over all test cases does not exceed 10^6. ------ Example Input ------ 3 010101 00100 1111 ------ Example Output ------ 2 1 0","solution":"def min_operations_to_beautiful(S): Returns the minimum number of operations required to make the binary string S beautiful (i.e., doesn\'t contain \\"010\\" or \\"101\\"). count = 0 i = 0 n = len(S) while i < n - 2: if S[i:i+3] == \\"010\\" or S[i:i+3] == \\"101\\": count += 1 i += 2 # Skip the next character to prevent overlapping replacements else: i += 1 return count def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(min_operations_to_beautiful(S)) return results"},{"question":"A box has a row of water containers, each with different heights. The heights of containers are represented by an array of positive integers. The amount of water that can be trapped between these containers when it rains is calculated by the amount of water each container can hold based on the minimum height of the containers to its left and right. The goal is to determine the maximum units of water that can be trapped. Given an array of integers representing the height of each container in the row, write a function that calculates the total amount of trapped water. # Function Signature ```python def trap_rain_water(heights: List[int]) -> int: ``` # Input - An array `heights` of size `N` where each element represents the height of the water container at that position. (1 ≤ N ≤ 1000) # Output - An integer representing the total units of water trapped. # Example **Input 1:** ```python [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` **Output 1:** ```python 6 ``` **Explanation:** ``` The array [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] when visualized represents a series of containers of varying heights. Water can be trapped between heights as follows: - Between the first height (0) and the fourth height (2), 1 unit of water can be trapped. - Between the third height (0) and the command_height_list, 1 unit of water can be trapped. - Between the command_height_list (status@Johns-I-Miles-Having-a-Good-Time) and the retrieved_dim<0-2>, 2 units of water can be trapped. - And similar calculations yield a total of 6 units of water trapped between the various containers. ```","solution":"from typing import List def trap_rain_water(heights: List[int]) -> int: Given a list of integers representing the height of water containers, calculates the total amount of trapped water. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"You are given a list of integers representing the sales figures of a product over a series of consecutive days. A day is considered a peak day if the sales figure for that day is strictly greater than both the previous and the following day. Your task is to find the total number of peak days in the given sales data. Return the count of peak days. Example 1: Input: sales = [5, 10, 8, 12, 6, 14, 7, 4] Output: 3 Explanation: The peak days are the days with sales figures 10, 12, and 14. Example 2: Input: sales = [3, 2, 3, 4] Output: 1 Explanation: The peak day is the day with the sales figure 4. Constraints: 1 <= sales.length <= 1000 0 <= sales[i] <= 10^5","solution":"def count_peak_days(sales): Returns the count of peak days in the sales data. A peak day is defined as a day where the sales are strictly greater than both the previous and the following day. :param sales: List[int] - List of sales figures. :return: int - Count of peak days. if len(sales) < 3: return 0 peak_count = 0 for i in range(1, len(sales) - 1): if sales[i] > sales[i - 1] and sales[i] > sales[i + 1]: peak_count += 1 return peak_count"},{"question":"Given a list of strings, where each string contains a mathematical expression (only addition and subtraction), your task is to evaluate each expression and return the result as a list of integers. All expressions will be valid and may contain between 1 and 10 numbers (inclusive), with each number between 0 and 1000 (inclusive). For example, given the list `[\\"3+2-1\\", \\"10-5+4\\", \\"7-3-4\\"]`, your function should return `[4, 9, 0]`. In case the input list is empty, return an empty list. # Example **Input:** `[\\"3+2-1\\", \\"10-5+4\\", \\"7-3-4\\"]` **Output:** `[4, 9, 0]`","solution":"def evaluate_expressions(expressions): Evaluates a list of mathematical expressions containing only addition and subtraction. Parameters: expressions (list of str): List of strings, each containing a mathematical expression. Returns: list of int: List of evaluated results for each expression. results = [] for expression in expressions: results.append(eval(expression)) return results"},{"question":"Given a list of integers nums and two indices start and end (inclusive), write a function that returns the sum of the elements in the subarray defined by these indices. Example 1: Input: nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] start = 2 end = 5 Output: 18 Explanation: Sum of elements from index 2 (\'3\') to index 5 (\'6\') is 3 + 4 + 5 + 6 = 18. Example 2: Input: nums = [10, -3, 7, 4, -2, 1, 5, -6] start = 1 end = 3 Output: 8 Explanation: Sum of elements from index 1 (\'-3\') to index 3 (\'4\') is -3 + 7 + 4 = 8. Your Task: You don\'t need to read input or print anything. Complete the function subarraySum() which takes nums, start, end as input parameters and returns the sum of the elements in the defined subarray. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |nums| <= 1000 0 <= start <= end < |nums|","solution":"def subarraySum(nums, start, end): Return the sum of the elements in the subarray defined by start and end indices. Parameters: nums (list of int): The array of integers. start (int): The starting index of the subarray. end (int): The ending index of the subarray. Returns: int: The sum of the elements in the subarray from start to end (inclusive). return sum(nums[start:end + 1])"},{"question":"Write a function that takes an array of integers and an integer `k`, and rearranges the array in such a way that all elements less than or equal to `k` come before all elements greater than `k`. The relative order of the elements which are less than or equal to `k` and the relative order of the elements which are greater than `k` should remain the same as in the input array. # Function Signature ```python def rearrange_array(arr: List[int], k: int) -> List[int]: ``` # Input - `arr`: List of integers (1 <= len(arr) <= 10^5, -10^9 <= arr[i] <= 10^9) - `k`: an integer (-10^9 <= k <= 10^9) # Output - The rearranged list of integers. # Example ```python arr = [1, 4, 2, 10, 3, 6] k = 4 rearrange_array(arr, k) # Output: [1, 4, 2, 3, 10, 6] arr = [-3, 0, 2, -1, 7, 5, 3] k = 2 rearrange_array(arr, k) # Output: [-3, 0, 2, -1, 7, 5, 3] ``` # Constraints * The input array is not empty. * Consider the time complexity since the array can be large.","solution":"from typing import List def rearrange_array(arr: List[int], k: int) -> List[int]: Rearranges the input array such that all elements less than or equal to k come before all elements greater than k. The relative order of these elements should be preserved. less_than_equal_k = [] greater_than_k = [] for num in arr: if num <= k: less_than_equal_k.append(num) else: greater_than_k.append(num) return less_than_equal_k + greater_than_k"},{"question":"Given a list of N integers representing the scores of N players in a game, determine whether it is possible to select any subset of these players such that the sum of their scores is exactly K. ------ Input Format ------ - The first line contains T, the number of test cases. - For each test case: - The first line contains two space-separated integers N and K. - The second line contains N space-separated integers representing the scores. ------ Output Format ------ For each test case, output \\"YES\\" if there exists a subset of players whose scores sum to exactly K. Otherwise, output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ text{Score} ≤ 1000 0 ≤ K ≤ 10000 ------ Sample Input 1 ------ 3 3 6 1 2 3 5 11 1 2 3 4 5 4 9 5 2 7 1 ------ Sample Output 1 ------ YES YES YES ------ Explanation 1 ------ Test case 1: The subset {1, 2, 3} sums to 6. Test case 2: The subset {1, 2, 3, 5} sums to 11. Test case 3: The subset {2, 7} sums to 9.","solution":"def can_sum_to_k(n, k, scores): Determine if there is a subset of `scores` whose sum is exactly `k` :param n: number of scores :param k: target sum :param scores: list of integers representing the scores :return: \\"YES\\" if a subset with sum `k` exists, otherwise \\"NO\\" # Using dynamic programming to solve the subset sum problem dp = [False] * (k + 1) dp[0] = True # Base case: a subset with sum 0 is always possible for score in scores: for i in range(k, score - 1, -1): if dp[i - score]: dp[i] = True return \\"YES\\" if dp[k] else \\"NO\\" def subset_sums(test_cases): results = [] for n, k, scores in test_cases: result = can_sum_to_k(n, k, scores) results.append(result) return results"},{"question":"A company has N employees organized in a hierarchical structure, where each employee (except the CEO) has exactly one direct manager. The hierarchy is represented as a tree rooted at the CEO, who has no manager. Two employees are considered \'peers\' if they report directly to the same manager. Given the hierarchy, your task is to determine for each employee, the number of peers they have. Input: The first line contains an integer N, the number of employees. The second line contains N-1 integers, where the i-th integer represents the direct manager (1-based index) of the (i+2)-th employee (1-based index). Output: Output N integers where the i-th integer is the number of peers employee i+1 has. Constraints: 1 ≤ N ≤ 10^5 SAMPLE INPUT 6 1 1 2 2 3 SAMPLE OUTPUT 2 2 1 1 0 0 Explanation: - Employee 1 is the CEO and has no peers. - Employees 2 and 3 report to Employee 1 and are peers, so they each have 1 peer. - Employees 4 and 5 report to Employee 2 and are peers, so they each have 1 peer. - Employee 6 reports to Employee 3 and has no peers.","solution":"def find_number_of_peers(N, managers): from collections import defaultdict # Create a dictionary to store the subordinates of each manager subordinate_dict = defaultdict(list) # Populate the subordinate dictionary for emp_id, manager_id in enumerate(managers, start=2): subordinate_dict[manager_id].append(emp_id+1) # Create the result list result = [] # Calculate the number of peers for each employee for i in range(1, N + 1): if i == 1: result.append(0) # CEO has no peers else: manager = managers[i-2] result.append(len(subordinate_dict[manager]) - 1) return result"},{"question":"Alice loves playing with sequences. One day, she came up with an interesting sequence defined recursively. The sequence is defined as follows: - a_0 = 1 - a_1 = 1 - For n geq 2: a_n = a_{n-1} + a_{n-2} She calls this sequence the Modified Fibonacci Sequence. Bob, who loves challenges, saw Alice playing with this sequence and asked her the following question: \\"Given an integer n, what is the value of a_n in the Modified Fibonacci Sequence?\\" Help Alice by writing a program to answer Bob\'s question. -----Input----- The input consists of a single integer n (0 leq n leq 10^6) representing the position in the Modified Fibonacci Sequence. -----Output----- Print a single integer representing the value of a_n in the Modified Fibonacci Sequence. -----Examples----- Input 0 Output 1 Input 1 Output 1 Input 5 Output 8 Input 10 Output 89 -----Note----- In the first example, the value of a_0 is 1. In the second example, the value of a_1 is also 1. In the third example, the sequence is: 1, 1, 2, 3, 5, 8. The 5th value is 8. In the fourth example, the sequence is: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89. The 10th value is 89.","solution":"def modified_fibonacci(n): Returns the nth value of the Modified Fibonacci Sequence. The sequence is defined as: a_0 = 1 a_1 = 1 For n >= 2: a_n = a_(n-1) + a_(n-2) if n == 0 or n == 1: return 1 a, b = 1, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"You are given N numbers in a list. Each number represents the time required for a different task to be completed. You have two workers, Worker A and Worker B. You need to assign each task to either Worker A or Worker B such that the difference between the total time taken by Worker A and Worker B to complete their respective tasks is minimized. -----Input:----- - First line contains an integer N, the number of tasks. - Second line contains N space-separated integers representing the time required for each task. -----Output:----- Output a single integer, the minimized absolute difference between the total time taken by Worker A and Worker B. -----Constraints----- - 1 leq N leq 20 - 1 leq time_i leq 100 for each 1 ≤ i ≤ N -----Sample Input:----- 4 10 20 30 40 -----Sample Output:----- 0","solution":"def minimize_time_difference(tasks): total_sum = sum(tasks) n = len(tasks) half_sum = total_sum // 2 # Create a DP table to store reachable sums up to half_sum dp = [False] * (half_sum + 1) dp[0] = True for time in tasks: for j in range(half_sum, time - 1, -1): dp[j] = dp[j] or dp[j - time] for j in range(half_sum, -1, -1): if dp[j]: sum_A = j break sum_B = total_sum - sum_A return abs(sum_A - sum_B)"},{"question":"Write a function that takes a string s consisting of lowercase and uppercase Latin letters and returns the length of the longest substring containing at most two distinct characters. For example, given s = \\"eceba\\", the function should return 3 (substring \\"ece\\").","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring containing at most two distinct characters. Parameters: s (str): Input string consisting of lowercase and uppercase Latin letters. Returns: int: Length of the longest substring containing at most two distinct characters. if len(s) < 3: return len(s) # Sliding window left, right = 0, 0 hashmap = {} max_length = 2 while right < len(s): # Add new character to the hashmap hashmap[s[right]] = right right += 1 # If the hashmap contains more than 2 distinct characters if len(hashmap) > 2: # Find the leftmost character to remove leftmost = min(hashmap.values()) del hashmap[s[leftmost]] # Move left pointer to right of leftmost index left = leftmost + 1 max_length = max(max_length, right - left) return max_length"},{"question":"A popular theme park has a unique layout where certain attractions are connected through direct paths, forming specific routes. Due to high visitor traffic, certain paths are prone to congestion. To address this, the park administration plans to install digital signages to regulate visitor flow. To maximize convenience, it is preferred that each signage controls more than one path but not necessarily all paths. Each path between two attractions has an associated level of congestion rate, indicating the severity of traffic on that path. The park aims to install three signages such that the maximum congestion rate controlled by any single signage is minimized. That is, if a signage controls paths with high congestion rates, it shouldn’t be the case that the other would have to control paths with even higher congestion rates. Given the park’s layout and congestion rates for each path, determine the minimum possible value for the maximum congestion rate under optimal distribution of paths to the three signages. -----Input:----- The first line of the input contains one integer M indicating the number of direct paths between attractions. Each of the next M lines of input describes a path by three integers A, B, C where A and B denote the end attractions and C denotes the congestion rate of the path between these attractions. -----Output:----- The output should be a single integer, corresponding to the minimum possible value of the maximum congestion rate any single signage has to handle among all valid assignments of the paths to the three signages. -----Constraints:----- - 1 leq M leq 5000. -----Sample Input----- 6 1 2 10 2 3 30 3 4 20 4 5 50 5 6 40 1 6 60 -----Sample Output----- 60","solution":"def minimize_max_congestion(M, paths): Returns the minimum possible value for the maximum congestion rate under optimal distribution of paths to three signages. Arguments: M : int : number of paths paths : list of tuples : each tuple contains (A, B, C) where A and B are attractions and C is the congestion rate # Binary search bounds for the minimum possible value for the maximum congestion rate left = 0 right = max([path[2] for path in paths]) def canDistributePaths(paths, maxCongestion): Helper function to determine if the paths can be distributed such that no signage controls paths with a congestion rate exceeding maxCongestion count = 1 current_sum = 0 for path in paths: if path[2] > maxCongestion: return False current_sum += path[2] if current_sum > maxCongestion: count += 1 current_sum = path[2] if count > 3: return False return True while left < right: mid = (left + right) // 2 if canDistributePaths(paths, mid): right = mid else: left = mid + 1 return left # Example usage: if __name__ == \\"__main__\\": M = 6 paths = [(1, 2, 10), (2, 3, 30), (3, 4, 20), (4, 5, 50), (5, 6, 40), (1, 6, 60)] print(minimize_max_congestion(M, paths)) # Expected output: 60"},{"question":"Max has a string of lowercase letters, and he likes palindromes. As a fun challenge, he wants to determine whether he can rearrange the characters of his string to form a palindrome. Your task is to help Max by writing a program that checks if the given string can be rearranged to form a palindrome. A string is called a palindrome if it reads the same forwards and backwards. -----Input----- The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^5). The string contains only lowercase English letters. -----Output----- Print \\"YES\\" if the string can be rearranged to form a palindrome, and \\"NO\\" otherwise. -----Examples----- Input carrace Output YES Input hello Output NO Input aabbccdd Output YES Input a Output YES","solution":"def can_form_palindrome(s): Determines whether the characters of the string s can be rearranged to form a palindrome. :param s: A string of lowercase English letters :return: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\" from collections import Counter # Count the frequency of each character char_counts = Counter(s) # Count characters with odd frequencies odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # A string can be rearranged into a palindrome if at most one character has an odd count if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"In a distant galaxy, there is a planet called Hoth where a peculiar phenomenon occurs. Each day, the temperature fluctuation is recorded, and these recorded temperatures need to be analyzed. The inhabitants of Hoth want to know the longest consecutive sub-sequence of temperatures during which the temperatures are non-decreasing. Input::: First line of input contains N, denoting the number of temperature recordings. Next line contains N space-separated integers denoting the temperature recordings on that day. Output::: Print the length of the longest consecutive sub-sequence where the temperatures are non-decreasing. If all temperatures are decreasing, output 1. Constraints::: 1 ≤ N ≤ 10^5, -10^4 ≤ Temperature ≤ 10^4. SAMPLE INPUT 7 -5 -1 -1 0 3 3 4 SAMPLE OUTPUT 7","solution":"def longest_non_decreasing_subsequence_length(nums): Returns the length of the longest non-decreasing consecutive sub-sequence in the list of temperatures nums. if not nums: return 0 max_length = 1 current_length = 1 for i in range(1, len(nums)): if nums[i] >= nums[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Given a number N, check whether the binary representation of the number contains any isolated set bits. An isolated set bit is defined as a bit \'1\' which has \'0\'s on both sides in the binary representation. If there is at least one isolated set bit, return \\"Yes\\", otherwise return \\"No\\". Example 1: Input: n = 18 Output: \\"Yes\\" Explanation: Binary representation of 18 is 10010 which has an isolated set bit at position 2 (counting from the right). Example 2: Input: n = 7 Output: \\"No\\" Explanation: Binary representation of 7 is 111 which does not have any isolated set bits. Your Task: You don\'t need to read input or print anything. Complete the function hasIsolatedSetBits() which takes n as input parameter and returns \\"Yes\\" If there is at least one isolated set bit in the binary representation of the number, otherwise return \\"No\\". Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^{11}","solution":"def hasIsolatedSetBits(n): This function checks if the binary representation of the number n contains any isolated set bits. An isolated set bit is a bit \'1\' which has \'0\'s on both sides. Args: n (int): number to check for isolated set bits in its binary representation. Returns: str: \\"Yes\\" if there is at least one isolated set bit, otherwise \\"No\\". # Convert n to binary string and strip the leading \'0b\' binary_string = bin(n)[2:] # Check for isolated set bits in the binary string for i in range(1, len(binary_string) - 1): if binary_string[i] == \'1\' and binary_string[i-1] == \'0\' and binary_string[i+1] == \'0\': return \\"Yes\\" return \\"No\\""},{"question":"Story A pharmaceutical company has been studying the effects of a new drug on patients with a particular chronic illness. As part of their research, they have been collecting data about the health parameters of the patients over time. The parameters include the patient\'s blood pressure (systolic and diastolic) and heart rate, recorded at several intervals during the day. The goal is to determine if the drug helps in maintaining or improving the health status of the patients. Task You are given a list of patient records in the form of `[date, systolic, diastolic, heart_rate]` where `date` is in the `yyyy-mm-dd` format. Your task is to process these records to determine the average health status of the patients over the given period. Specifically, you need to compute and return the following metrics: * Average systolic blood pressure * Average diastolic blood pressure * Average heart rate The output should be a dictionary in the form: ```python { \\"average_systolic\\": average_systolic_value, \\"average_diastolic\\": average_diastolic_value, \\"average_heart_rate\\": average_heart_rate_value } ``` # Notes * The input list contains at least one record. * All values are positive integers. Examples ```python records = [ [\\"2023-01-01\\", 120, 80, 70], [\\"2023-01-02\\", 130, 85, 75], [\\"2023-01-03\\", 125, 82, 73] ] # Returns: # { # \\"average_systolic\\": 125.0, # \\"average_diastolic\\": 82.33, # \\"average_heart_rate\\": 72.67 # } records = [ [\\"2023-01-01\\", 115, 75, 65] ] # Returns: # { # \\"average_systolic\\": 115.0, # \\"average_diastolic\\": 75.0, # \\"average_heart_rate\\": 65.0 # } ``` My other katas If you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)!","solution":"def calculate_averages(records): Calculate the average systolic, diastolic, and heart rate from a list of patient records. :param records: List of patient records in the format [date, systolic, diastolic, heart_rate]. :return: Dictionary with average systolic, diastolic and heart rate. total_systolic = 0 total_diastolic = 0 total_heart_rate = 0 num_records = len(records) for record in records: total_systolic += record[1] total_diastolic += record[2] total_heart_rate += record[3] average_systolic = total_systolic / num_records average_diastolic = total_diastolic / num_records average_heart_rate = total_heart_rate / num_records return { \\"average_systolic\\": round(average_systolic, 2), \\"average_diastolic\\": round(average_diastolic, 2), \\"average_heart_rate\\": round(average_heart_rate, 2) }"},{"question":"You are given an integer n. Your task is to construct an array a of length n such that the sum of all elements of a is equal to S and the greatest common divisor (GCD) of all elements of a is 1. If such an array is impossible to construct, output -1. Otherwise, output the array. -----Input----- The first line of the input contains an integer n (1 leq n leq 10^5) – the length of the array a. The second line of the input contains an integer S (1 leq S leq 10^9) – the sum of the elements of the array a. -----Output----- If it\'s impossible to construct the array, print -1. Otherwise, print n integers – the elements of the array a. -----Examples----- Input 3 10 Output 2 3 5 Input 4 7 Output 1 1 2 3 Input 1 5 Output 5 Input 2 2 Output -1 -----Note----- In the first example, the array a can be [2, 3, 5]. The sum of these elements is 10, and their GCD is 1. In the second example, the array a can be [1, 1, 2, 3]. The sum of these elements is 7 and their GCD is 1. In the third example, there is only one element in the array, and the GCD of a single element is the element itself. Hence, the array a is [5]. In the fourth example, it\'s impossible to construct such an array. The minimum sum we can achieve while keeping the GCD of all elements 1 is 3 for n=2. Therefore, the output is -1.","solution":"def construct_array(n, S): if n == 1: return [S] elif S < n: return -1 else: # To make the sum S with n elements such that GCD is 1, initialize array with all ones array = [1] * (n - 1) remaining_sum = S - (n - 1) if remaining_sum == 1: if n == 2: return -1 # Shift one of the ones to 2, to avoid remaining_sum being 1 array[-2] += 1 remaining_sum -= 1 array.append(remaining_sum) return array"},{"question":"You are given several cryptographic codes, each represented as a string consisting of lowercase English alphabet characters. The security level of each code is determined by the number of distinct substrings it can generate. Your task is to find the security level of the weakest code among the given set, where the weakest code is defined as the one with the fewest number of distinct substrings. Write a function `weakest_security_level(codes)` that takes a list of strings `codes` and returns an integer representing the security level of the weakest code. Input Format: - The first line contains an integer `n` — the number of cryptographic codes. - The second line contains `n` space-separated strings representing the codes. Constraints: - 1 ≤ n ≤ 100 - The length of each code string is between 1 and 100. Output Format: - Print a single integer which is the security level of the weakest code. Example: Input: 2 abcde zz Output: 4 Explanation: Each code generates a set of distinct substrings. For \\"abcde\\", the distinct substrings are {\\"a\\", \\"ab\\", \\"abc\\", \\"abcd\\", \\"abcde\\", \\"b\\", \\"bc\\", \\"bcd\\", \\"bcde\\", \\"c\\", \\"cd\\", \\"cde\\", \\"d\\", \\"de\\", \\"e\\"}, which account for 15 substrings. For \\"zz\\", the distinct substrings are {\\"z\\", \\"zz\\"}, which account for 2 substrings. Therefore, the security level of the weakest code is 2.","solution":"def distinct_substring_count(s): Returns the number of distinct substrings in a string s. substrings = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings) def weakest_security_level(codes): Returns the security level of the weakest code. if not codes: return 0 min_security_level = float(\'inf\') for code in codes: min_security_level = min(min_security_level, distinct_substring_count(code)) return min_security_level"},{"question":"The ancient art of rune inscriptions has been passed down among the mystics of the Enchanted Forest for generations. One specific form of these inscriptions is the \\"Prime Spells\\". A Prime Spell is a sequence of prime numbers with unique magical properties. A Prime Spell sequence with prime factor p is an infinite sequence Psp (i ≥ 1; p is prime), that is determined as follows: * Psp = p^i, where i is the i-th position in the sequence. Given an array a of n integers, mystics define the spell potency function S(l, r, p) as the sum of the p-th power of each number in the subsequence a[l] to a[r]. You are asked to perform the following operations on the array: 1. The power operation. The operation parameters are (x, v). The operation denotes changing the value of the x-th element in the array to v. After the operation, the value of the array element a[x] equals v. 2. The spell potency operation. The operation parameters are (l, r, p). The operation denotes calculating the spell potency function S(l, r, p). Harness the mystical powers of primes and implement the described operations. Input The first line contains integer n (1 ≤ n ≤ 100,000) — the number of elements in array a. The second line contains n space-separated integers: a1, a2, ..., an (1 ≤ ai ≤ 1,000) — the elements of the array. The third line contains integer m (1 ≤ m ≤ 100,000) — the number of operations. Next m lines contain the operations\' descriptions. An operation\'s description starts with integer ti (1 ≤ ti ≤ 2) — the operation type. * If ti = 1 (power operation), then on the line follow two space-separated integers: xi, vi (1 ≤ xi ≤ n; 1 ≤ vi ≤ 1,000) — the parameters of the power operation. * If ti = 2 (spell potency operation), then on the line follow three space-separated integers: li, ri, pi (1 ≤ li ≤ ri ≤ n; 2 ≤ pi ≤ 5) — the parameters of the spell potency operation. You should execute the operations in the order they are provided in the input. Output For each spell potency operation, print the calculated potency value on a single line. Print the values for spell potency operations in the order they are given in the input. Examples Input 4 3 2 5 7 3 2 1 3 2 1 3 4 2 1 4 3 Output 17 586 Note Explanation of the sample test: * The result of the first operation is S(1, 3, 2) = 3^2 + 2^2 + 5^2 = 9 + 4 + 25 = 38. * After the second operation, the array becomes 3 2 4 7. * The result of the third operation is S(1, 4, 3) = 3^3 + 2^3 + 4^3 + 7^3 = 27 + 8 + 64 + 343 = 442.","solution":"def prime_spell_operations(n, array, operations): results = [] def power_operation(x, v): array[x - 1] = v def spell_potency_operation(l, r, p): s = sum(x ** p for x in array[l-1:r]) results.append(s) for op in operations: if op[0] == 1: power_operation(op[1], op[2]) elif op[0] == 2: spell_potency_operation(op[1], op[2], op[3]) return results"},{"question":"Sara is a botanist who studies the growth patterns of plants. Each plant grows by doubling its height every day until it reaches or exceeds a maximum height H. Given the initial height of each plant, help Sara determine how many days it will take for each plant to reach or exceed the height H. Input Format First line contains a single integer T, the number of test cases. Each test case consists of a single integer N, the number of plants. The next line contains N integers, the initial heights of the plants. The subsequent line contains a single integer H, the maximum height. Output Format For each test case, output N integers in a single line denoting the number of days it takes for each plant to reach or exceed the height H. Constraints 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^2 1 ≤ initial height of plants ≤ 10^9 1 ≤ H ≤ 10^9 SAMPLE INPUT 2 3 1 2 3 10 2 5 10 20 SAMPLE OUTPUT 4 3 2 2 1","solution":"import math def days_to_reach_height(initial_heights, H): Returns a list of integers representing the number of days it takes for each plant to reach or exceed the height H. days = [] for height in initial_heights: if height >= H: days.append(0) else: days.append(math.ceil(math.log2(H / height))) return days def process_test_cases(T, test_cases): Processes the given number of test cases and returns the result for each plant in each test case. results = [] for i in range(T): N = test_cases[i][0] initial_heights = test_cases[i][1] H = test_cases[i][2] results.append(days_to_reach_height(initial_heights, H)) return results"},{"question":"Write a function that takes a string as input and returns a modified string where each character is replaced by a sequence of the character followed by a binary representation of its ASCII value. The binary representation should be 8 bits long, with leading zeros if necessary. If the input contains any characters outside the standard ASCII range (0-127), return the string \'Invalid input\'. **Note:** An empty string should return an empty string. ```python to_binary_string(\\"abc\\") == \\"a01100001b01100010c01100011\\" to_binary_string(\\"Hello!\\") == \\"H01001001e01100101l01101100l01101100o01101111!00100001\\" to_binary_string(\\"こんにちは\\") == \\"Invalid input\\" ```","solution":"def to_binary_string(s): def char_to_bin(char): ascii_value = ord(char) if ascii_value > 127: # ASCII value out of range return \'Invalid input\' binary_value = format(ascii_value, \'08b\') return char + binary_value result = [] for char in s: bin_str = char_to_bin(char) if bin_str == \'Invalid input\': return \'Invalid input\' result.append(bin_str) return \'\'.join(result)"},{"question":"Sharadha is organizing a pottery workshop with a limited capacity. The workshop can host only a fixed number of participants, and Sharadha wants to make sure no participant\'s application is overlooked or duplicated. Each participant has a unique ID, which is a combination of letters and numbers. Design a script to help Sharadha ensure that she only allows unique and valid participants, i.e., no duplicate IDs should be allowed, and she must know how many participants have duplicate entries. INPUT: - The first line contains an integer `n`, the total number of registration attempts. - The next `n` lines each contain a string representing the participant\'s unique ID. OUTPUT: - Print the number of participants that have duplicate IDs. - Print each unique duplicate ID on a new line. CONSTRAINTS: - 1 ≤ n ≤ 100 - Each participant\'s ID is a non-empty string consisting of alphanumeric characters (a-z, A-Z, 0-9) with a maximum length of 20 characters. SAMPLE INPUT 8 p01 p02 p03 p01 p04 p03 p05 p03 SAMPLE OUTPUT 2 p01 p03","solution":"def find_duplicates(n, ids): Returns the count of duplicate IDs and the list of unique duplicate IDs. Args: n : int : number of registration attempts ids: list : list of participant IDs Returns: count, duplicates : tuple : count of duplicates and the list of duplicate IDs id_count = {} duplicates = set() for id in ids: if id in id_count: id_count[id] += 1 else: id_count[id] = 1 for id, count in id_count.items(): if count > 1: duplicates.add(id) return len(duplicates), sorted(duplicates) # Sample usage (for manual testing) if __name__ == \\"__main__\\": n = 8 ids = [\'p01\', \'p02\', \'p03\', \'p01\', \'p04\', \'p03\', \'p05\', \'p03\'] count, duplicates = find_duplicates(n, ids) print(count) for id in duplicates: print(id)"},{"question":"You are organizing a coding marathon and you need to ensure fair distribution of participants across teams. You have n participants, each represented by their ability score. You want to distribute these participants into k teams such that the maximum difference between the highest ability score and the lowest ability score within any team is minimized. Write a program that finds the minimized maximum difference between the highest and lowest ability score in each team after the optimal distribution. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of participants. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the ability scores of the participants. The third line contains a single integer k (1 ≤ k ≤ n) — the number of teams. Output Output a single integer — the minimized maximum difference between the highest and lowest ability score in each team after the optimal distribution. Examples Input 6 10 20 30 40 50 60 2 Output 20 Input 7 1 2 3 4 5 6 7 3 Output 2 Input 5 5 8 12 15 20 5 Output 0 Note In the first example, the optimal way is to split participants into two teams: one team with scores [10, 20, 30] and another team with scores [40, 50, 60]. Hence, the maximum difference in each team is 20 which is minimized. In the second example, the optimal way is to split participants into three teams: [1, 2, 3], [4, 5], and [6, 7]. The maximum differences within teams are 2, 1, and 1 respectively, giving a result of 2. In the third example, each participant is in their own team, so the difference is always 0.","solution":"def minimized_max_difference(n, abilities, k): abilities.sort() def can_partition_with_max_diff(max_diff): # if true_partition = teams needed to keep maximum difference <= max_diff. teams, i = 1, 0 for j in range(1, n): if abilities[j] - abilities[i] > max_diff: teams += 1 i = j if teams > k: return False return True low, high = 0, abilities[-1] - abilities[0] while low < high: mid = (low + high) // 2 if can_partition_with_max_diff(mid): high = mid else: low = mid + 1 return low"},{"question":"In a town, there are certain pairs of people who like each other. Each person likes at most one other person but can be liked by multiple people. Given an array of n pairs (where 2 leq n leq 100,000) indicating two people who like each other, your task is to find out if it\'s possible to arrange a seating plan for a round table such that everyone sits next to a person they like. If it\'s possible, return \\"YES\\", otherwise return \\"NO\\". Each pair is given as a pair of integers (a, b) where 1 ≤ a, b ≤ n and a ≠ b. Input n pairs The first line contains a single integer n, the number of people in the town. The next n lines each contain two integers a and b indicating that person a likes person b. Output Output \\"YES\\" if a valid seating arrangement is possible, otherwise output \\"NO\\". Examples Input 4 1 2 3 4 2 3 4 1 Output YES Input 3 1 2 2 3 1 3 Output NO","solution":"def can_arrange_seating(n, pairs): from collections import defaultdict if n % 2 != 0: # It is impossible to form pairs if n is odd. return \\"NO\\" adjacency_list = defaultdict(list) for a, b in pairs: adjacency_list[a].append(b) adjacency_list[b].append(a) # Function to check if the graph can be partitioned into disjoint cycles def is_bipartite(graph, n): color = [-1] * (n + 1) def dfs(source, current_color): stack = [(source, current_color)] while stack: node, color_value = stack.pop() if color[node] == -1: color[node] = color_value elif color[node] != color_value: return False for neighbor in graph[node]: if color[neighbor] == -1: stack.append((neighbor, 1 - color_value)) elif color[neighbor] == color_value: return False return True for i in range(1, n + 1): if color[i] == -1: if not dfs(i, 0): return False return True for k, v in adjacency_list.items(): if len(v) != 2: # Each person must like exactly two other persons. return \\"NO\\" return \\"YES\\" if is_bipartite(adjacency_list, n) else \\"NO\\""},{"question":"A robot is placed on an infinite grid. The robot starts at the coordinate (0, 0) facing North. The robot can receive a sequence of instructions to move forward and turn. The instructions are given as a string consisting of characters \'G\', \'L\', and \'R\' where: * \'G\' instructs the robot to move forward in the direction it is currently facing. * \'L\' instructs the robot to turn 90 degrees to the left. * \'R\' instructs the robot to turn 90 degrees to the right. Determine if there exists a sequence of instructions of length N (1 <= N <= 10^9) that will cause the robot to return to its initial position (0, 0) after exactly N steps. Input The input consists of a single integer N. Output Output \\"YES\\" if it is possible for the robot to return to (0, 0) after N steps, otherwise output \\"NO\\". Examples Input 2 Output NO Input 4 Output YES Input 6 Output NO Input 10 Output YES","solution":"def can_return_to_origin(N): Determines if the robot can return to its initial position (0, 0) after exactly N steps. :param N: Length of instructions sequence :type N: int :return: \\"YES\\" if it is possible to return to the initial position, \\"NO\\" otherwise :rtype: str # The robot can return to the initial position after N steps if and only if # N is a multiple of 4 because only then can the robot complete a full cycle # of movements and turnings. if N % 4 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Rahul loves to play with strings. One day, while experimenting, he decided to create new strings by performing some operations on a given string S. The operation he defined is as follows: - Choose any character from the string S and move it to the end of the string. Rahul wants to know the lexicographically smallest string he can obtain by performing the operation at most K times on the given string S. Can you help him achieve his goal? The lexicographical order is the generalization of the alphabetical order to strings, where strings are compared character by character. For example, \\"apple\\" is lexicographically smaller than \\"banana\\". Input The input contains two lines. The first line contains a string S (1 ≤ |S| ≤ 100 000) consisting of lowercase English letters. The second line contains an integer K (1 ≤ K ≤ |S|). Output Output a single line containing the lexicographically smallest string that can be obtained by performing the operation at most K times. Examples Input ``` abz 1 ``` Output ``` abz ``` Input ``` cba 1 ``` Output ``` acb ``` Input ``` dbca 2 ``` Output ``` bacd ``` Note Explanation for the sample input/output #1 With S = \\"abz\\" and K = 1, the string is already lexicographically smallest, so no operations are needed. Explanation for the sample input/output #2 With S = \\"cba\\" and K = 1, one optimal way is to move the \'a\' to the end, resulting in \\"acb\\". Explanation for the sample input/output #3 With S = \\"dbca\\" and K = 2, one optimal way is to move \'b\' to the end and then \'a\' to the end, resulting in \\"bacd\\".","solution":"def smallest_lexicographical_string(S, K): if K == 1: # generate all possible rotations and return the smallest one min_string = S for i in range(len(S)): rotated = S[i:] + S[:i] if rotated < min_string: min_string = rotated return min_string else: # if K > 1 then we can sort the string to get the smallest possible string return \'\'.join(sorted(S))"},{"question":"You are part of a software development team working on a data visualization project. The team has tasked you with creating an algorithm that identifies significant trends and patterns in a large dataset. One specific requirement involves identifying and analyzing \'valleys\' in a sequence of integer data points. A valley is defined as a contiguous subsequence of data points that has the same pattern as the capital letter \'V\'. More specifically, a valley starts at a peak, descends to a trough, and then ascends back to another peak, such that there is at least one element lower than the starting and ending elements, i.e., forming a \'V\' shape. Write an algorithm that counts the number of valleys in a given sequence of integer data points. -----Input----- The input is a line with space-separated integers representing the sequence of data points, where each integer is between -10^9 and 10^9. -----Output----- Print one integer, the total number of valleys found in the sequence. -----Examples----- Sample Input 1: 3 2 1 2 3 4 3 2 1 0 1 2 Sample Output 1: 2 Explanation: In the given sequence, there are two valleys: [3, 2, 1, 2, 3] and [4, 3, 2, 1, 0, 1, 2]. Sample Input 2: 1 2 3 4 Sample Output 2: 0 Explanation: There are no valleys in the given sequence. Sample Input 3: 5 1 5 1 5 1 5 Sample Output 3: 3 Explanation: There are three valleys in the given sequence: [5, 1, 5], [5, 1, 5], and [5, 1, 5].","solution":"def count_valleys(sequence): Counts the number of valleys in the given sequence of integer data points. A valley is defined as a contiguous subsequence of data points that has the same pattern as the capital letter \'V\'. Parameters: sequence (list of int): A sequence of integer data points. Returns: int: The total number of valleys found in the sequence. valleys = 0 n = len(sequence) i = 1 while i < n - 1: if sequence[i - 1] > sequence[i] < sequence[i + 1]: valleys += 1 while i < n - 1 and sequence[i] <= sequence[i + 1]: i += 1 else: i += 1 return valleys def process_input(input_string): Processes the input string to convert it to a list of integers. Parameters: input_string (str): Input string with space-separated integers. Returns: list of int: List of integers extracted from the input string. return list(map(int, input_string.split()))"},{"question":"You are given a string `s` of length `N` that consists only of lowercase English letters \'a\' and \'b\'. Alice and Bob are playing a game on this string. Alice always goes first, followed by Bob, and they take turns to make a move. A move consists of selecting one occurrence of \'a\' and one occurrence of \'b\', and removing them both from the string. The game ends when there are no more valid moves to be made. The player who cannot make a move loses the game. Alice and Bob both play optimally, meaning each will make the move that maximizes their chances of winning given the current state of the game. Determine the winner of the game assuming both play optimally. Constraints * 1 ≤ N ≤ 10^5 * `s` only consists of the characters \'a\' and \'b\' Input The input contains a single line with the string `s`. Output Output either \\"Alice\\" or \\"Bob\\" denoting the winner given both players play optimally. Example Input 1 ab Example Output 1 Alice Example Input 2 aababb Example Output 2 Bob Example Input 3 aaaa Example Output 3 Bob","solution":"def determine_winner(s): Determines the winner between Alice and Bob based on the given string s. count_a = s.count(\'a\') count_b = s.count(\'b\') # The number of pairs we can remove is the minimum of count of \'a\' and \'b\' moves = min(count_a, count_b) # If moves are odd, Alice wins (since she starts first), otherwise Bob wins if moves % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Lucas is an avid mountain climber and he likes to document his climbs. He keeps track of the elevation changes he experiences throughout his ascent. Lucas realizes that some segments of his climb are steady inclines, while others may be either flat or declines before new inclines start. Given an array of positive integers where each integer represents the elevation change at each step, determine and output the length of the longest steady incline segment that Lucas experiences in a single climb. A steady incline segment is defined as a contiguous subarray where the elevation values are in strictly increasing order. -----Constraints----- - The length of the elevation array is at least 1 and at most 10000. - Each element in the elevation array is a positive integer between 1 and 10000 (inclusive). -----Input----- Input is given from Standard Input in the following format: n e1 e2 e3 ... en Here, `n` is the length of the array, and `e1, e2, ... en` are the elevation changes at each step. -----Output----- Print the length of the longest steady incline segment. -----Sample Input----- 6 10 12 15 13 14 16 -----Sample Output----- 3 Lucas experiences a longest steady incline segment of length 3 with the subarray [10, 12, 15].","solution":"def longest_steady_incline(n, elevations): Returns the length of the longest steady incline segment in the elevations. if n <= 1: return n max_length = 1 current_length = 1 for i in range(1, n): if elevations[i] > elevations[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length # Sample Input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) elevations = list(map(int, data[1:])) print(longest_steady_incline(n, elevations))"},{"question":"There is a city with n transportation stations and m bidirectional roads connecting them. Each road has a travel time of 1 unit. The city transit authority wants to improve efficiency by identifying the longest travel time between the two most distant stations. If the stations are represented as vertices of a graph and the roads as edges, the task is to find the diameter of this graph. The diameter is defined as the greatest distance between any pair of vertices in the graph. Given the number of stations and list of roads, determine the diameter of the graph. -----Input----- The first line contains two integers n (2 le n le 1000), the number of stations, and m (1 le m le 1500), the number of bidirectional roads. The following m lines each contains two integers a and b (1 le a, b le n), representing a road between stations a and b. It is guaranteed that every station is reachable from any other station. -----Output----- Output the only integer, the diameter of the graph. -----Examples----- Input 4 4 1 2 2 3 3 4 4 1 Output 2 Input 5 4 1 2 2 3 3 4 4 5 Output 4 -----Note----- In the first example, the graph is a cycle with 4 vertices: 1-2-3-4-1. The longest path between any two vertices is 2. In the second example, the graph is a line with 5 vertices: 1-2-3-4-5. The longest path between the two most distant vertices 1 and 5 is 4.","solution":"from collections import deque def bfs(graph, start): Perform BFS starting from the vertex `start` and return the farthest node and its distance. visited = [-1] * len(graph) visited[start] = 0 q = deque([start]) farthest_node = start max_distance = 0 while q: node = q.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = visited[node] + 1 q.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance def graph_diameter(n, m, roads): graph = [[] for _ in range(n)] for u, v in roads: graph[u-1].append(v-1) graph[v-1].append(u-1) # Perform BFS from an arbitrary node (node 0) farthest_node, _ = bfs(graph, 0) # Perform BFS from the farthest node found above _, diameter = bfs(graph, farthest_node) return diameter # Example of usage: # n = 5, m = 4 # roads = [(1, 2), (2, 3), (3, 4), (4, 5)] # result = graph_diameter(n, m, roads) # print(result) # Output should be 4"},{"question":"Problem statement: Alice and Bob are playing a game with two strings. At each turn, a player can perform one of the following operations on their respective string: 1. Remove a character from the string. 2. Swap any two characters in the string. The goal of the game is to transform their string into a string that is a permutation of the other player\'s string. Determine if it is possible for both players to achieve this goal with unlimited number of turns. Input The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. Each of the next T lines contains two strings A and B separated by a space. The length of each string is between 1 and 100 inclusive. The strings contain only lowercase English letters. Output For each test case, output \\"YES\\" if it is possible to transform both strings into permutations of each other. Otherwise, output \\"NO\\". SAMPLE INPUT 3 abc cba xyz yxz abcd abdc SAMPLE OUTPUT YES YES YES","solution":"def can_transform_to_permutations(T, test_cases): Determines if it is possible for two strings to be transformed into permutations of each other. Args: T : int : number of test cases test_cases : list : list of tuples each containing two strings A and B Returns: list : list containing \\"YES\\" or \\"NO\\" for each test case results = [] for i in range(T): A, B = test_cases[i] if sorted(A) == sorted(B): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A group of friends are playing a game where they have to jump across stones placed in a straight line on a river. The friends start at the first stone, and the goal is to reach the last stone following a set of rules. Each friend can jump up to a maximum number of stones ahead in one jump, but not further. However, there\'s a twist—the stones have different strengths, and a friend can only land on a stone if their weight is equal to or less than the strength of that stone. You need to determine the minimum number of jumps required for each friend to reach the last stone, or if it\'s not possible for the friend to cross the river given the constraints. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - For each test case: - The first line contains two space-separated integers N and M where N is the number of stones and M is the maximum number of stones a friend can jump ahead in one jump. - The second line contains N space-separated integers representing the strengths of the stones. - The third line contains a single integer W representing the weight of the friend. -----Output----- For each test case, print a single line containing the minimum number of jumps required to reach the last stone, or -1 if it is not possible. -----Constraints----- - 1 le T le 10^4 - 2 le N le 10^3 - 1 le M le N - 1 le strength of each stone le 10^3 - 1 le W le 10^3 -----Example Input----- 3 5 2 3 2 1 4 5 2 5 3 3 2 1 4 5 3 4 1 3 2 1 4 2 -----Example Output----- 3 2 -1 -----Explanation----- Example case 1. The friend can only jump onto stones of strength 2 or more. Possible jump sequence: stone 1 -> stone 3 (2 jumps) -> stone 5 (1 jump). Example case 2. The friend can jump onto stones of strength 3, sequence: stone 1 -> stone 4 -> stone 5 (2 jumps). Example case 3. The friend can only jump to the next stone due to the constraint, but stone 3 has strength 1 which is less than the friend\'s weight 2, so it\'s not possible.","solution":"def min_jumps_to_cross_stones(T, test_cases): results = [] for i in range(T): N, M = test_cases[i*3] strengths = test_cases[i*3 + 1] W = test_cases[i*3 + 2][0] if strengths[0] < W or strengths[-1] < W: results.append(-1) continue jumps = [float(\'inf\')] * N jumps[0] = 0 for j in range(0, N): if strengths[j] >= W: for k in range(j + 1, min(N, j + M + 1)): if strengths[k] >= W: jumps[k] = min(jumps[k], jumps[j] + 1) result = jumps[-1] if jumps[-1] != float(\'inf\') else -1 results.append(result) return results def process_input(data): lines = data.split(\'n\') T = int(lines[0].strip()) test_cases = [] index = 1 for _ in range(T): test_cases.append(tuple(map(int, lines[index].strip().split()))) index += 1 test_cases.append(list(map(int, lines[index].strip().split()))) index += 1 test_cases.append([int(lines[index].strip())]) index += 1 return T, test_cases def solve(data): T, test_cases = process_input(data) results = min_jumps_to_cross_stones(T, test_cases) for result in results: print(result)"},{"question":"Given a string str of n characters. The task is to shift every character in the string by a given number of positions in the ASCII table. Example: Input: str = \\"abcde\\" shift = 2 Output: cdefg Explanation: Shifting \'a\' by 2 positions gives \'c\', \'b\' shifted by 2 positions gives \'d\', and so on. Your Task: Your task is to complete the function `shiftCharacters()`, which takes a string `str` and an integer `shift` as inputs and returns the transformed string after shifting each character by the given positions. No need to print the result string. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^6 1 <= shift <= 10^3","solution":"def shiftCharacters(string, shift): Shifts every character in the string by a given number of positions in the ASCII table. Parameters: string (str): The input string. shift (int): The number of positions to shift each character. Returns: str: The transformed string after shifting each character. return \'\'.join(chr((ord(char) + shift) % 256) for char in string)"},{"question":"You are tasked with designing a security system for a high-tech vault. The vault has a numeric keypad with digits from 0 to 9 and allows a maximum of k digit-long security codes. Over time, you have noticed that certain codes are known to be frequently attempted by unauthorized individuals. The vault should never accept these \\"frequent\\" codes. Your job is to generate a valid security code that adheres to the following constraints: 1. The code must be exactly k digits long. 2. The code must not begin with the digit 0. 3. The code must not match any codes from a given list of \\"frequent\\" codes. Write a function that generates a valid security code. If there are multiple valid codes, output any one of them. If no valid code is possible, return an empty string. Input - An integer k (1 ≤ k ≤ 18), the length of the security code. - An integer m (0 ≤ m ≤ 10000), the number of \\"frequent\\" codes. - Next, m lines follow, each containing a \\"frequent\\" code of exactly k digits. Output - A single line containing a valid security code of length k that does not match any \\"frequent\\" code, or an empty string if no valid code is possible. Example Input 4 2 1234 5678 Output 1000 Input 3 3 123 234 345 Output 100 Input 2 1 99 Output 10 Note In the first example, the code 1234 and 5678 are frequent codes. The outputted code 1000 is a valid security code that is 4 digits long and does not match any frequent code. In the second example, the frequent codes are 123, 234, and 345. The outputted code 100 is a valid security code that is 3 digits long and does not begin with 0. In the third example, only one frequent code 99 exists. The outputted code 10 is a valid security code that is 2 digits long and is not 99.","solution":"def generate_code(k, m, frequent_codes): Generates a valid security code for a high-tech vault. Parameters: k (int): The length of the security code. m (int): The number of \\"frequent\\" codes that should be avoided. frequent_codes (list): A list of m frequent codes that should be avoided. Returns: str: A valid security code of length k, or an empty string if no valid code is possible. # Attempt to generate a code starting from the lowest possible valid code for i in range(10**(k-1), 10**k): code = str(i) if code not in frequent_codes: return code return \\"\\""},{"question":"Alice and Bob are playing a game involving piles of stones. The game starts with three piles of stones, containing A, B, and C stones respectively. The players take turns, and in each turn, a player can choose one pile and remove one or more stones from that pile. The player who cannot make a move loses the game. Alice always goes first. Determine whether Alice will win if both players play optimally. -----Input----- Three integers 0 leq A, B, C leq 1000. -----Output----- Print \\"Alice\\" if Alice will win the game, or \\"Bob\\" if Bob will win. -----Explanation of Sample 2----- Sample input 2 corresponds to 1 stone in each of the three piles. Alice will remove 1 stone from any one pile, leaving two piles with 1 stone each. Whatever Bob does next, Alice can always remove the remaining stones in one of the last two piles, leaving Bob with the remaining pile, ensuring her victory. -----Examples----- Sample Input 1: 0 0 0 Sample Output 1: Bob Sample Input 2: 1 1 1 Sample Output 2: Alice Sample Input 3: 2 3 4 Sample Output 3: Alice","solution":"def alice_wins_game(A, B, C): Determines if Alice will win the game. Alice wins if the nim sum (A xor B xor C) is not zero. return \\"Alice\\" if (A ^ B ^ C) != 0 else \\"Bob\\""},{"question":"A group of scientists is conducting experiments on a newly discovered species of bacteria. They have recorded the growth rates (changes in number) of the bacteria for the past n days. Each day, they note whether the bacterium population has increased, decreased, or remained unchanged. To analyze the data more effectively, they want to create a summary of the growth trends, specifically identifying periods of consistent increase or decrease. A period of consistent growth is defined as a consecutive sequence of days where the population strictly increases each day, and a period of consistent decline is defined as a consecutive sequence of days where the population strictly decreases each day. Write a program that determines the number of periods of consistent growth and decline and summarizes the indices of the start and end of each period. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), which represents the number of days. The second line contains a sequence of integers p_1, p_2, ..., p_n (−100 ≤ p_i ≤ 100), where p_i denotes the growth rate change on the i-th day. -----Output----- Print an integer m — the total number of periods of consistent growth and decline. On the next m lines, print a pair of integers each, denoting the start and end day indices (1-based) of each period of consistent growth or decline. -----Examples----- Input 10 1 2 -3 -4 5 6 7 -8 -9 10 Output 4 1 2 3 4 5 7 8 9 Input 6 0 1 2 3 -1 -2 Output 2 2 4 5 6 -----Note----- In the first sample, the periods are as follows: - The first period of growth includes days 1 and 2. - The first period of decline includes days 3 and 4. - The second period of growth includes days 5 to 7. - The second period of decline includes days 8 and 9. In the second sample, the periods are: - The first period of growth includes days 2 to 4. - The first period of decline includes days 5 and 6.","solution":"def find_growth_decline_periods(n, changes): periods = [] start_idx = 0 while start_idx < n - 1: if changes[start_idx] == 0: start_idx += 1 continue end_idx = start_idx increasing = changes[start_idx] > 0 while end_idx < n - 1 and ((increasing and changes[end_idx] < changes[end_idx + 1]) or (not increasing and changes[end_idx] > changes[end_idx + 1])): end_idx += 1 if start_idx != end_idx: periods.append((start_idx + 1, end_idx + 1)) start_idx = end_idx start_idx += 1 return periods # Sample input testing n = 10 changes = [1, 2, -3, -4, 5, 6, 7, -8, -9, 10] print(find_growth_decline_periods(n, changes))"},{"question":"John has recently been working on understanding permutations and factorials. He decides to create a challenge for his friend Alice to test her understanding of these concepts. Alice is given a string consisting of lowercase alphabets and she needs to find the number of distinct permutations of the string that form a palindrome. A permutation of a string forms a palindrome if it reads the same backward as forward. Input Format: The first line contains a single integer T, the number of test cases. The next T lines contain a single string consisting of lowercase alphabets. Output Format: For each test case, print the number of distinct permutations of the string that form a palindrome. Constraints: 1 ≤ T ≤ 10 1 ≤ Length of the string ≤ 100 SAMPLE INPUT 2 aabb abc SAMPLE OUTPUT 2 0 Explanation For the first string \\"aabb\\", the distinct palindromic permutations are \\"abba\\" and \\"baab\\", so the answer is 2. For the second string \\"abc\\", there are no palindromic permutations, so the answer is 0.","solution":"from collections import Counter from math import factorial def count_palindromic_permutations(s): count = Counter(s) odd_count = sum(1 for c in count.values() if c % 2 != 0) if odd_count > 1: return 0 half_palindrome_length = sum(c // 2 for c in count.values()) numerator = factorial(half_palindrome_length) denominator = 1 for c in count.values(): denominator *= factorial(c // 2) return numerator // denominator def palindromic_permutation_counts(test_cases): results = [] for s in test_cases: results.append(count_palindromic_permutations(s)) return results"},{"question":"String Transformation You are given a string ( S ) consisting of lowercase English letters. Your task is to transform the string into another string ( T ) by following these rules: 1. In each step, you can delete exactly one character from the string ( S ). 2. The resulting string ( T ) should be a palindrome. Your goal is to find the **minimum number of deletions** required to transform ( S ) into ( T ). # Constraints: - ( 1 leq |S| leq 1000 ) - ( S ) consists of only lowercase English letters. # Input: - A single line containing the string ( S ). # Output: - Output a single integer, the minimum number of deletions required. # Example: Input: ``` abcbc ``` Output: ``` 2 ``` Input: ``` abcd ``` Output: ``` 3 ``` # Explanation: In the first example, by deleting the characters \'a\' and \'c\' (the second \'c\'), we can obtain the palindrome \'bcb\'. In the second example, deleting \'a\', \'b\', and \'d\' leaves \'c\', which is a palindrome.","solution":"def min_deletions_to_palindrome(S): Calculate the minimum number of deletions required to transform a string S into a palindrome. def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1] lps_length = longest_palindromic_subsequence(S) return len(S) - lps_length"},{"question":"Consider an array A of length n, where A[i] represents the height of the i-th building in a city skyline. You are an architect and you have the ability to reduce the height of any building exactly by 1 unit at a time. Your goal is to make all buildings in the skyline have the same height using minimum operations. Calculate the minimum number of operations required to make all buildings have the same height. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) which denotes the number of buildings. The second line contains n integers A_1, A_2, ..., A_n (1 ≤ A_i ≤ 10^5) which denote the heights of the buildings. -----Output----- Print a single integer which is the minimum number of operations required to make all the buildings have the same height. -----Examples----- Input 5 1 3 2 4 2 Output 4 Input 4 5 5 5 5 Output 0 -----Note----- For the first example, the buildings have heights [1, 3, 2, 4, 2]. The minimum number of operations required is 4: - Reduce the building of height 4 by 1 unit to get [1, 3, 2, 3, 2] - Reduce the building of height 3 by 1 unit to get [1, 2, 2, 3, 2] - Reduce another building of height 3 by 1 unit to get [1, 2, 2, 2, 2] - Reduce the building of height 2 by 1 unit to get [1, 2, 2, 2, 1] - Reduce the building of height 2 by 1 unit to get [1, 2, 1, 2, 1] - Reduce another building of height 2 by 1 unit to get [1, 1, 1, 1, 1] For the second example, the buildings all have the same height, so no operations are required.","solution":"def min_operations_to_equal_height(n, heights): Calculate the minimum number of operations required to make all buildings have the same height. Parameters: n (int): The number of buildings. heights (list of int): List representing the height of each building. Returns: int: The minimum number of operations required. min_height = min(heights) operations = sum(height - min_height for height in heights) return operations"},{"question":"Given an integer array `nums` and an integer `k`, determine the number of pairs `(i, j)` where `nums[i] + nums[j]` is divisible by `k` and `i < j`. ------ Input ------ The first line of the input contains two integers `n` and `k`. The second line contains `n` space-separated integers `nums[1], nums[2], ..., nums[n]`. ------ Output ------ Print a single integer representing the number of pairs `(i, j)` with `i < j` such that `nums[i] + nums[j]` is divisible by `k`. ------ Constraints ------ 2 ≤ n ≤ 10,000 1 ≤ nums[i] ≤ 100,000 for each valid `i` 1 ≤ k ≤ 100 ----- Sample Input 1 ------ 5 3 1 3 2 6 9 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ The valid pairs are: - (1, 2) -> 1 + 3 = 4 (divisible by 3) - (1, 5) -> 1 + 9 = 10 (divisible by 3) - (3, 4) -> 2 + 6 = 8 (divisible by 3) - (4, 5) -> 6 + 9 = 15 (divisible by 3) Thus, there are 4 pairs whose sum is divisible by `k = 3`.","solution":"def count_pairs_divisible_by_k(n, k, nums): Returns the number of pairs (i, j) where nums[i] + nums[j] is divisible by k and i < j. count = 0 # Create a remainder frequency array to store the counts of every remainder when divided by k remainder_freq = [0] * k for num in nums: remainder = num % k complement = (k - remainder) % k count += remainder_freq[complement] remainder_freq[remainder] += 1 return count"},{"question":"Given an integer array nums and an integer k, return the number of distinct pairs (i, j) where i and j are different indices and nums[i] + nums[j] == k. -----Constraints----- - 1 leq nums.length leq 10^4 - -10^4 leq nums[i] leq 10^4 - -10^4 leq k leq 10^4 -----Input----- Input is given from Standard Input in the following format: nums k -----Print----- Print the number of distinct pairs (i, j) where i and j are different indices and nums[i] + nums[j] == k. -----Sample Input----- [1, 2, 3, 4, 3] 6 -----Sample Output----- 2 - The pairs (2, 4) and (3, 3) sum up to k = 6.","solution":"def count_distinct_pairs(nums, k): Returns the number of distinct pairs (i, j) where i and j are different indices and nums[i] + nums[j] == k. seen = set() used = set() count = 0 for num in nums: target = k - num if target in seen and (target, num) not in used: count += 1 used.add((num, target)) used.add((target, num)) seen.add(num) return count"},{"question":"Create a function that takes a positive integer `n` and returns the list of prime factors of `n`. If the input integer is `1` or a prime number, the function should return an empty list. For example: ``` find_prime_factors(1) = [] find_prime_factors(11) = [] find_prime_factors(12) = [2, 2, 3] find_prime_factors(315) = [3, 3, 5, 7] ``` In this problem, you will not need to handle edge cases like negative numbers or non-integer inputs. You also must not include repeated factors as separate elements; each factor should be listed as many times as it appears in the product of prime factors of `n`. Examples ``` find_prime_factors(1) = [] find_prime_factors(11) = [] find_prime_factors(12) = [2, 2, 3] find_prime_factors(315) = [3, 3, 5, 7] ```","solution":"def find_prime_factors(n): Returns the list of prime factors of `n`. If `n` is 1 or a prime number, returns an empty list. if n <= 1: return [] factors = [] divisor = 2 while n >= 2: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors if len(factors) > 1 else []"},{"question":"Write a function that takes an array of integers and an integer k, and returns the maximum sum of k consecutive elements in the array. Ensure that your solution is efficient in terms of time complexity. # Example `max_sum([1, 2, 5, 2, 8, 1, 5], 2)` -> 10 `max_sum([1, 2, 5, 2, 8, 1, 5], 4)` -> 17 `max_sum([4, 2, 1, 6], 1)` -> 6 `max_sum([4, 2, 1, 6, 2], 4)` -> 13 Hint Think about sliding window technique to find an efficient solution.","solution":"def max_sum(arr, k): Returns the maximum sum of k consecutive elements in the array. Uses sliding window technique for efficiency. if not arr or k <= 0 or k > len(arr): return 0 max_sum = curr_sum = sum(arr[:k]) for i in range(k, len(arr)): curr_sum += arr[i] - arr[i - k] max_sum = max(max_sum, curr_sum) return max_sum"},{"question":"You are tasked with controlling the traffic lights at a busy intersection. The intersection has 2 roads crossing each other, and each road has traffic lights that can be either green or red. Your goal is to ensure that the traffic flows smoothly, and you need to determine the optimal times each traffic light should stay green before switching to red to minimize waiting time for vehicles. Each traffic light can be green for at most k minutes before it must switch to red. You need to find the time durations for each traffic light to stay green such that the waiting time for vehicles on both roads is minimized. Input - The first line contains an integer t (1 ≤ t ≤ 50) — the number of test cases. - For each test case, the first line contains an integer k (1 ≤ k ≤ 100) — the maximum duration a traffic light can stay green. Output For each test case, output two integers a and b (0 ≤ a, b ≤ k) — the optimal times for the first and second traffic lights to stay green. Example Input ``` 3 5 10 15 ``` Output ``` 2 3 5 5 7 8 ``` Explanation: In the first test case, for the first traffic light, 2 minutes of green light and for the second traffic light, 3 minutes of green light may result in minimized waiting time. In the second test case, both traffic lights set to stay green for 5 minutes before switching may result in minimized waiting time. In the third test case, setting the first traffic light to stay green for 7 minutes and the second one for 8 minutes might yield minimized waiting time. Note: Your task is to determine the optimal time intervals taking into consideration the constraint that no more than k minutes should be assigned to each traffic light, which ensures fair distribution and minimization of vehicle waiting time. This is a simplified version and assumes equal arrival rates and vehicle flow.","solution":"def find_optimal_times(t, ks): Determines optimal green light durations for traffic lights. Parameters: t (int): Number of test cases ks (list): List of maximum durations for green lights for each test case Returns: list: List of tuples, each containing two optimal durations (a, b) results = [] for k in ks: # As a simple approach, divide k approximately into two parts a = k // 2 b = k - a results.append((a, b)) return results"},{"question":"Alok, a proficient programmer, is using a unique way to measure a string\'s strength. He believes that a string is \\"POWERFUL\\" if the count of vowels (a, e, i, o, u) is strictly greater than the count of consonants; otherwise, it is \\"WEAK\\". Your task is to write a program to determine the strength of a given string following Alok\'s criteria. --- Input Format ---- The first line of input consists of a single string S. --- Output Format ---- Generate one line output saying \\"POWERFUL\\" if the string satisfies Alok\'s conditions, or \\"WEAK\\" otherwise (quotes for clarity). --- Constraints ---- - 1 ≤ length of S ≤ 100 - S consists only of lowercase English letters. --- Sample Input 1 --- hello --- Sample Output 1 --- WEAK --- Explanation 1 --- The string \\"hello\\" has 2 vowels (e, o) and 3 consonants (h, l, l). Since the count of vowels (2) is not greater than the count of consonants (3), the output is \\"WEAK\\". --- Sample Input 2 --- amazingly --- Sample Output 2 --- POWERFUL --- Explanation 2 --- The string \\"amazingly\\" has 3 vowels (a, a, i) and 5 consonants (m, z, n, g, l). Since the count of vowels (3) is not greater than the count of consonants (5), the output is \\"WEAK\\". --- Sample Input 3 --- aeiou --- Sample Output 3 --- POWERFUL --- Explanation 3 --- The string \\"aeiou\\" has 5 vowels (a, e, i, o, u) and 0 consonants. Since the count of vowels (5) is greater than the count of consonants (0), the output is \\"POWERFUL\\". --- Sample Input 4 --- rhythm --- Sample Output 4 --- WEAK --- Explanation 4 --- The string \\"rhythm\\" has 0 vowels and 6 consonants (r, h, y, t, h, m). Since the count of vowels (0) is not greater than the count of consonants (6), the output is \\"WEAK\\". --- Sample Input 5 --- execution --- Sample Output 5 --- WEAK --- Explanation 5 --- The string \\"execution\\" has 5 vowels (e, e, u, i, o) and 4 consonants (x, c, t, n). Since the count of vowels (5) is greater than the count of consonants (4), the output is \\"POWERFUL\\".","solution":"def string_power(str): Determines if the given string is \\"POWERFUL\\" or \\"WEAK\\" based on Alok\'s criteria. Parameters: str (string): The input string consisting of lowercase English letters. Returns: string: \\"POWERFUL\\" if the count of vowels is strictly greater than the count of consonants, otherwise \\"WEAK\\". vowels = set(\'aeiou\') vowel_count = 0 consonant_count = 0 for ch in str: if ch in vowels: vowel_count += 1 else: consonant_count += 1 if vowel_count > consonant_count: return \\"POWERFUL\\" else: return \\"WEAK\\""},{"question":"Write a function `merge_lists` that takes two lists as input and returns a single list that contains all the elements of both input lists, but with any duplicates removed and with the elements sorted in ascending order. The lists can contain a mix of integers and strings. Your function should: 1. Ignore the type when checking for uniqueness (i.e., the string `\\"5\\"` and the integer `5` should be considered the same). 2. Preserve the type of the first instance encountered (i.e., if `\\"5\\"` appears before `5`, then `\\"5\\"` should be in the output). If either input list contains an element that is neither an integer nor a string, the function should return `\\"invalid input\\"`. Example: ``` merge_lists([\\"3\\", 5, \\"hello\\", \\"3\\"], [2, \\"hello\\", 5, 3]) ``` should return: ``` [\\"3\\", 5, \\"hello\\", 2] ```","solution":"def merge_lists(lst1, lst2): Merges two lists, removes duplicates, and returns a sorted list without changing the type of the first instance found. if any(not isinstance(i, (int, str)) for i in lst1 + lst2): return \\"invalid input\\" combined_list = lst1 + lst2 unique_dict = {} for item in combined_list: key = str(item) if isinstance(item, int) else item if key not in unique_dict: unique_dict[key] = item return list(unique_dict.values())"},{"question":"Sara is celebrating her birthday at an amusement park. She receives a discount voucher for entry based on her age. The normal entry fee to the park is C dollars. Children who are between 4 and 10 years old (inclusive) get a 30% discount, and teenagers aged between 11 and 17 years old (inclusive) get a 20% discount. Visitors aged 18 years and older, as well as children under 4, do not receive any discount. Determine the amount Sara has to pay to enter the amusement park. -----Constraints----- - 0 ≤ Sara\'s age ≤ 100 - 1 ≤ C ≤ 500 -----Input----- Input is given from Standard Input in the following format: Sara\'s_age C -----Output----- Print the entry fee Sara has to pay. -----Sample Input----- 5 50 -----Sample Output----- 35 Sara is 5 years old and receives a 30% discount on the entry fee of 50 dollars, so she pays 35 dollars.","solution":"def calculate_entry_fee(Sara_age, C): Calculates the entry fee to the amusement park based on Sara\'s age and the normal entry fee. :param Sara_age: int, age of Sara. :param C: int, normal entry fee to the park. :return: int, the discounted entry fee Sara has to pay. if 4 <= Sara_age <= 10: return int(C * 0.70) # 30% discount elif 11 <= Sara_age <= 17: return int(C * 0.80) # 20% discount else: return C # No discount for others"},{"question":"# Problem Statement You are given a string S which consists of alphanumeric characters and spaces. Your task is to remove all the duplicate characters from the string while retaining the first occurrence of each character in their original order. # Example 1 **Input:** ``` S = \\"geeks for geeks\\" ``` **Output:** ``` \\"geks for\\" ``` **Explanation:** The word \\"geeks\\" has duplicate \'e\' and \'k\', and the duplicate characters have been removed to keep only the first occurrences. # Example 2 **Input:** ``` S = \\"hello world\\" ``` **Output:** ``` \\"helo wrd\\" ``` **Explanation:** The words \\"hello\\" and \\"world\\" both have duplicate \'l\', and \'o\'. Each of these duplicate characters have been removed leaving only the first occurrences of each. # Your Task You don\'t need to read input or print anything. Your task is to complete the function `removeDuplicates()` which takes the string S as input and returns the resultant string with all duplicate characters removed while retaining the first occurrence. # Expected Time Complexity O(|S|), where |S| is the length of the string. # Expected Auxiliary Space O(1) for extra space, apart from the input string. # Constraints 1 <= |S| <= 10^5","solution":"def removeDuplicates(S): Removes duplicate characters from the string while retaining the first occurrence of each character. Parameters: S (str): Input string containing alphanumeric characters and spaces. Returns: str: String with duplicates removed. seen = set() result = [] for char in S: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"You are given a string containing only the characters \'a\' and \'b\'. You can remove any one character from the string. Your task is to determine whether, after removing one character, it is possible to rearrange the string so that no two adjacent characters are the same. Input The input contains a single line with a string of length n (1 ≤ n ≤ 1000) consisting of only \'a\' and \'b\'. Output Output a single line \\"YES\\" if it is possible to rearrange the string after removing one character so that no two adjacent characters are the same, otherwise output \\"NO\\". SAMPLE INPUT abab SAMPLE OUTPUT YES SAMPLE INPUT aaaa SAMPLE OUTPUT NO Explanation For the first sample, removing any one character and rearranging the rest can lead to a string such as \\"abab\\" or \\"baba\\", which satisfies the requirement. For the second sample, removing any one character leaves \\"aaa\\" or \\"aaa\\", which cannot be rearranged to have non-adjacent \'a\'s.","solution":"def can_rearrange_after_removal(s): Returns whether it is possible to rearrange the string after removing one character so that no two adjacent characters are the same. from collections import Counter # Simple case where the string length is 1 if len(s) == 1: return \\"NO\\" # Count the occurrences of \'a\' and \'b\' count = Counter(s) # Calculate the minimum possible length and maximum count of \'a\' or \'b\' after removing one character max_count = max(count.values()) min_length = len(s) - 1 if max_count <= min_length // 2 + 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a list of intervals, determine the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping. Constraints * 1 leq n leq 100,000 * 1 leq start_i, end_i leq 1,000,000,000 * Each interval [start_i, end_i] is represented by two integers, start_i and end_i, where start_i < end_i. Input In the first line, the number of intervals n is given. In the following n lines, the i-th interval is given by its start and end points in the format: start_i ; end_i The points are given in integers. Output Print the minimum number of intervals you need to remove in a line. Example Input 4 1 2 2 3 3 4 1 3 Output 1","solution":"def min_intervals_to_remove(intervals): Determines the minimum number of intervals to remove to make the rest non-overlapping. :param intervals: List of intervals represented as [start, end] :return: Minimum number of intervals to remove if not intervals: return 0 # Sort intervals based on their end time intervals.sort(key=lambda x: x[1]) # Initialize count of intervals to remove remove_count = 0 # Track the end time of the previous interval prev_end = intervals[0][1] for i in range(1, len(intervals)): if intervals[i][0] < prev_end: # Overlapping interval, increment remove count remove_count += 1 else: # No overlap, update the end time to the current interval\'s end time prev_end = intervals[i][1] return remove_count # Function to read input and solve the problem def solve(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) intervals = [] for i in range(n): start = int(data[2*i + 1]) end = int(data[2*i + 2]) intervals.append([start, end]) print(min_intervals_to_remove(intervals))"},{"question":"Ivy loves working with binary trees. She comes across a problem where she needs to find the maximum path sum in a binary tree. A path in the binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can be included in the path at most once. The path does not need to go through the root. Ivy needs to determine the maximum path sum for a given binary tree. The path must contain at least one node. ------ Input ------ - The first line of input contains a single integer N, indicating the number of nodes in the binary tree. - The next line contains the values of the nodes in level order traversal (i.e., value of the root followed by values of nodes at each level from left to right and so on). - The third line contains N-1 pairs of space-separated integers U V, where (U, V) denotes there is an edge between nodes U and V. ------ Output ------ Output a single integer representing the maximum path sum. ------ Constraints ------ 1 ≤ N ≤ 10^{5} The value of a node can be any integer such that −10^{4} ≤ node value ≤ 10^{4}. ------ Example ------ Input: 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Output: 11 ------ Explanation ------ In this binary tree, the maximum path sum is obtained by the path 4 → 2 → 1 → 3, which gives a total sum of 4 + 2 + 1 + 3 = 10. Another possible path is 5 → 2 → 1 → 3, which gives a total sum of 5 + 2 + 1 + 3 = 11. Therefore, the maximum path sum is 11. ------ Test Generation Scheme ------ There are total 20 test files and four groups of test files, i.e., 5 test files per group. During the contest, the score of your program will be decided by only 20% of the files, i.e., by 4 files, each from one group. However, the verdict of your program will be based on all the test files, i.e., in order to get an AC, your program should work correctly on all the test files. Group 1: N = 100 Group 2: N = 10^{3} Group 3: N = 10^{4} Group 4: N = 10^{5} The node values will be generated uniformly randomly within the range specified.","solution":"class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None def build_tree(level_order, edges): if not level_order: return None nodes = [None] + [TreeNode(val) for val in level_order] for u, v in edges: if nodes[v].left is None: nodes[v].left = nodes[u] else: nodes[v].right = nodes[u] return nodes[1] def max_path_sum_helper(node): if node is None: return 0, float(\'-inf\') left_single, left_max = max_path_sum_helper(node.left) right_single, right_max = max_path_sum_helper(node.right) max_single = max(node.val, node.val + left_single, node.val + right_single) max_top = max(max_single, node.val + left_single + right_single) max_sum = max(left_max, right_max, max_top) return max_single, max_sum def max_path_sum(root): _, max_sum = max_path_sum_helper(root) return max_sum def find_max_path_sum(n, level_order, edges): root = build_tree(level_order, edges) return max_path_sum(root)"},{"question":"Given a string containing an arbitrary mathematical expression that includes non-negative integers and the operators \'+\', \'-\', \'*\', \'/\', write a function to evaluate it. The expression may include whitespace characters, which should be ignored. You should assume the expression is always valid and does not require parentheses handling. Examples: Example 1: Input: expression = \\"3+2*2\\" Output: 7 Explanation: The result of the expression is 3 + (2 * 2) = 3 + 4 = 7. Example 2: Input: expression = \\" 3/2 \\" Output: 1 Explanation: The result of the expression is 3 / 2 = 1 because integer division truncates towards zero. Example 3: Input: expression = \\" 3+5 / 2 \\" Output: 5 Explanation: The result of the expression is 3 + (5 / 2) = 3 + 2 = 5. Constraints: - The length of the input string will be in the range [1, 100]. - The input string will only contain digits, whitespace characters, and the \'+\', \'-\', \'*\', \'/\' operators. - All integer division should truncate towards zero. - The input is guaranteed to be a valid mathematical expression and should not have leading or trailing spaces.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers and \'+\', \'-\', \'*\', \'/\' operators. The expression may include whitespace characters which should be ignored. # Remove all whitespace characters expression = expression.replace(\\" \\", \\"\\") stack = [] num = 0 sign = \'+\' for i, char in enumerate(expression): if char.isdigit(): num = num * 10 + int(char) if char in \\"+-*/\\" or i == len(expression) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] = stack[-1] * num elif sign == \'/\': stack[-1] = int(stack[-1] / num) # Truncate towards zero sign = char num = 0 return sum(stack)"},{"question":"# Arrays - Find the Missing Number Given an array containing `n-1` distinct numbers taken from the range `0` to `n-1`, you need to find the one number that is missing from the array. The function `findMissingNumber` should take an array as input and return the missing number. For example, for an array of `[3, 1, 0]` where `n = 4`, the function should return `2` because `2` is the missing number from the range `[0, 1, 2, 3]`. Constraint: - The input array will always have at least 1 number (i.e., `n >= 2`). Hint: Consider leveraging properties of arithmetic sequences or bitwise operations to solve this problem efficiently. ```python def findMissingNumber(arr): # Your code here ```","solution":"def findMissingNumber(arr): Returns the missing number from the array containing n-1 distinct numbers from 0 to n-1. n = len(arr) + 1 # Since arr contains n-1 numbers expected_sum = n * (n - 1) // 2 # Sum of first n natural numbers actual_sum = sum(arr) # Sum of numbers in the array return expected_sum - actual_sum # The missing number is the difference"},{"question":"An online game developer wants to create an in-game currency distribution mechanism for a virtual town. There are n buildings in the town arranged in a row, and each building initially has a certain number of gold coins. Every day, the developer can redistribute some of the gold coins following this rule: for any two adjacent buildings i and j (1 leq i, j leq n) such that |i - j| = 1, they can move one gold coin from building i to building j. The developer can perform such a redistribution operation up to d times. The objective is to maximize the number of gold coins in the building situated at the last position (building n) after at most d redistribution operations. Given the number of buildings, the number of redistribution operations allowed, and the initial distribution of gold coins in the buildings, determine the maximum number of gold coins that can be accumulated in the last building if the developer acts optimally. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line of each test case contains two integers n and d (1 le n, d le 100) — the number of buildings and the number of redistributions allowed, respectively. The second line of each test case contains n integers b_1, b_2, ldots, b_n (0 leq b_i le 100) — the initial number of gold coins in each building. -----Output----- For each test case, output one integer: the maximum number of gold coins that may be accumulated in the last building (building n) after at most d redistributions if the developer acts optimally. -----Example----- Input: 2 4 3 2 1 0 4 5 4 1 2 3 4 5 Output: 5 6 In the first test case of the sample, one way to achieve 5 gold coins in the last building is to move one gold coin from building 1 to building 2, one gold coin from building 3 to building 4, and one more gold coin from building 2 to building 3. Hence, the last building has 5 gold coins left. In the second test case of the sample, here is how to get 6 coins in building 5: - On the first day, redistribute one coin from building 4 to building 5. - On the second day, redistribute one coin from building 3 to building 4. - On the third day, redistribute one coin from building 2 to building 3. - On the fourth day, redistribute one coin from building 1 to building 2. After all the optimal redistributions, the last building will have exactly 6 coins.","solution":"def maximize_gold(t, test_cases): results = [] for _ in range(t): n, d = test_cases[_][0] buildings = test_cases[_][1] for i in range(n - 1): # Determine the max coins we can move from buildings[i] to buildings[i + 1]. moves = min(buildings[i], d // (n - 1 - i)) buildings[i] -= moves buildings[-1] += moves d -= moves * (n - 1 - i) results.append(buildings[-1]) return results"},{"question":"Jack owns a restaurant and has a list of daily customer spending. He wants to know if there are two consecutive days where the total spending was above a certain threshold. Can you help him write a program to find this out? **Input**: The first line contains an integer n (1 ≤ n ≤ 100) — the number of days. The second line contains n integers separated by spaces, where each integer represents the spending on that day. The third line contains an integer t (0 ≤ t ≤ 10^6) — the spending threshold. **Output**: Print \\"YES\\" if there are two consecutive days where the total spending exceeded the threshold. Otherwise, print \\"NO\\". **Examples**: Input: 5 200 150 300 400 250 600 Output: YES Input: 4 100 200 150 200 500 Output: NO **Note**: In the first example, the spending on the third and fourth day is 300 + 400 = 700, which exceeds the threshold of 600. Hence, the output is \\"YES\\". In the second example, there are no two consecutive days where the total spending exceeds the threshold of 500. Hence, the output is \\"NO\\".","solution":"def consecutive_days_exceed_threshold(n, spendings, t): Returns \\"YES\\" if there are two consecutive days where the total spending exceeded the threshold t. Otherwise, returns \\"NO\\". for i in range(n - 1): if spendings[i] + spendings[i + 1] > t: return \\"YES\\" return \\"NO\\""},{"question":"Coder Tom is working on a number sequence problem. He has a sequence of N integers and wants to determine the length of the longest subsequence where the difference between the maximum and minimum elements doesn\'t exceed a given integer K. INPUT: Input consists of two lines. The first line contains two integers N and K. The second line contains N integers which represent the sequence. OUTPUT: Output an integer representing the maximum length of the subsequence where the difference between the maximum and minimum elements is less than or equal to K. CONSTRAINTS: 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^9 1 ≤ A[i] ≤ 10^9 SAMPLE INPUT 5 3 1 5 2 9 3 SAMPLE OUTPUT 3 Explanation: The longest subsequence where the difference between the maximum and minimum elements is less than or equal to 3 is [1, 2, 3]. The length of this subsequence is 3.","solution":"def longest_subsequence_length(N, K, sequence): Returns the length of the longest subsequence where the difference between the maximum and minimum elements doesn\'t exceed K. Parameters: N (int): length of the sequence K (int): maximum allowed difference between max and min of the subsequence sequence (list): list of integers representing the sequence Returns: int: length of the longest subsequence sequence.sort() left = 0 max_length = 0 for right in range(N): while sequence[right] - sequence[left] > K: left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given an array of integers, determine if it is possible to re-order the elements to form a consecutive sequence. A consecutive sequence is a sequence of integers where each number is exactly one more than the previous number. Return `true` if it is possible to reorder the array to form a consecutive sequence, and `false` otherwise. Example 1: Input: [1, 2, 3, 4, 5] Output: true Explanation: The array is already a consecutive sequence. Example 2: Input: [5, 4, 2, 3, 1] Output: true Explanation: The array can be reordered as [1, 2, 3, 4, 5], which is a consecutive sequence. Example 3: Input: [1, 3, 5, 7] Output: false Explanation: No reordering can make the array consecutive as the gaps between elements are too large. Example 4: Input: [7, 6, 5, 4] Output: true Explanation: The array can be reordered as [4, 5, 6, 7], which is a consecutive sequence. Example 5: Input: [7, 6, 5, 3] Output: false Explanation: No reordering can make the array consecutive as there is no 4 to bridge the gap between 3 and 5. Constraints: - The length of the array is at least 2 and at most 10^5. - Each integer in the array is unique and between -10^9 and 10^9 inclusively.","solution":"def can_form_consecutive_sequence(arr): Determines if the elements of the array can be reordered to form a consecutive sequence. min_val = min(arr) max_val = max(arr) length = len(arr) # If the range between min and max is equal to the length minus 1 return max_val - min_val == length - 1"},{"question":"Given an undirected graph represented by a list of edges, determine if the graph is bipartite. A graph is bipartite if the vertices can be divided into two disjoint sets U and V such that every edge connects a vertex in U to a vertex in V. In other words, there is no edge that connects vertices within the same set. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and M — the number of vertices and the number of edges in the graph. - The next M lines of each test case contain two integers u and v — representing an undirected edge between vertices u and v. ------ Output Format ------ For each test case, output YES if the graph is bipartite. Otherwise, output NO. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 500 0 ≤ M ≤ N(N-1)/2 1 ≤ u, v ≤ N ----- Sample Input 1 ------ 2 4 4 1 2 2 3 3 4 4 1 5 5 1 2 2 3 3 4 4 5 5 1 ----- Sample Output 1 ------ YES NO ----- Explanation 1 ------ Test case 1: The given graph can be divided into sets U = { 1, 3 } and V = { 2, 4 } with edges between these sets, making it bipartite. Test case 2: It can be proven that the given graph cannot be divided into two sets as required, hence it is not bipartite.","solution":"from collections import deque def is_bipartite(N, edges): Checks if the graph is bipartite graph = [[] for _ in range(N+1)] for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * (N + 1) def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for i in range(1, N + 1): if color[i] == -1: if not bfs(i): return \\"NO\\" return \\"YES\\" def bipartite_graphs(T, test_cases): results = [] for N, M, edges in test_cases: results.append(is_bipartite(N, edges)) return results"},{"question":"Given a list of words, each word containing lowercase letters, you need to determine if two words are anagrams of each other. Two words are anagrams if and only if they contain the exact same characters with the same frequencies. Write a function that takes a list of words and groups the anagrams together in the form of lists within a list. Example 1: Input: words = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] Explanation: - \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams of each other, so they form one group. - \\"tan\\" and \\"nat\\" are anagrams of each other, so they form another group. - \\"bat\\" is its own group as there are no other anagrams of it. Example 2: Input: words = [\\"\\", \\"b\\", \\"\\"] Output: [[\\"\\", \\"\\"], [\\"b\\"]] Explanation: - \\"\\" and \\"\\" are considered anagrams of each other and form a group. - \\"b\\" is its own group as there are no other anagrams of it. Constraints: * The length of the input list will be between 1 and 10^4. * The length of each word will be between 1 and 100. * All input strings consist of lowercase letters only. Write a function that fulfills the above criteria using any programming language of your choice. Consider the efficiency of your solution with respect to both time and space complexity.","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams together in the form of lists within a list. :param words: List of words containing lowercase letters. :return: List of lists containing grouped anagrams. anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"In a distant galaxy, there exists a programming academy that trains young cadets in the art of array manipulation. The academy assigns the cadets a curious task to test their understanding of cumulative operations. Given an array `a` consisting of `n` integers, cadets are asked to perform `q` queries on this array. Each query involves calculating the cumulative product of a specified subarray and then finding the last digit of this product. Specifically, for each query defined by the indices `l` and `r`, cadets need to: 1. Compute the product of the array elements from index `l` to `r` (inclusive) in the original array. 2. Output the last digit of the resulting product. Input The input consists of multiple lines: - The first line contains an integer `n` (1 ≤ n ≤ 100), the size of the array. - The second line contains `n` integers `a[i]` (1 ≤ a[i] ≤ 1000), representing the elements of the array. - The third line contains an integer `q` (1 ≤ q ≤ 100), the number of queries. - The next `q` lines each contain two integers `l` and `r` (1 ≤ l ≤ r ≤ n), representing the bounds of the subarray for the query. Output For each query, output a single integer — the last digit of the cumulative product of the subarray. Example Input 5 2 3 4 5 6 3 1 3 2 5 3 3 Output 4 0 4 Explanation In the first query, the subarray is {2, 3, 4}, the cumulative product is 2 * 3 * 4 = 24, and the last digit is 4. In the second query, the subarray is {3, 4, 5, 6}, the cumulative product is 3 * 4 * 5 * 6 = 360, and the last digit is 0. In the third query, the subarray is {4}, the cumulative product is 4, and the last digit is 4.","solution":"def last_digit_of_cumulative_product(n, arr, queries): results = [] for l, r in queries: product = 1 for i in range(l-1, r): product *= arr[i] last_digit = product % 10 results.append(last_digit) return results"},{"question":"Given an integer array arr of unique elements, your task is to find all possible subsets (the power set) of the array that contain a specific target integer x. Return the subsets in any order. Example 1: Input: arr = [1,2,3], x = 2 Output: [[2],[2,1],[2,3],[2,1,3]] Explanation: The power set of [1,2,3] is [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]], and only the subsets containing 2 are return: [[2],[2,1],[2,3],[2,1,3]]. Example 2: Input: arr = [5,6,7,8], x = 5 Output: [[5],[5,6],[5,7],[5,8],[5,6,7],[5,6,8],[5,7,8],[5,6,7,8]] Explanation: The power set of [5,6,7,8] is [[],[5],[6],[7],[8],[5,6],[5,7],[5,8],[6,7],[6,8],[7,8],[5,6,7],[5,6,8],[5,7,8],[6,7,8],[5,6,7,8]], and only the subsets containing 5 are returned: [[5],[5,6],[5,7],[5,8],[5,6,7],[5,6,8],[5,7,8],[5,6,7,8]]. Constraints: 1. 1 <= arr.length <= 20 2. -10^5 <= arr[i] <= 10^5 3. Elements in arr are unique. 4. -10^5 <= x <= 10^5 5. x is an element of arr.","solution":"from itertools import combinations def subsets_with_target(arr, x): Finds all subsets of arr that contain the target x. Parameters: arr (list): The list of unique integers. x (int): The target integer. Returns: list: A list of all subsets containing x. result = [] n = len(arr) for i in range(1, n + 1): for subset in combinations(arr, i): if x in subset: result.append(list(subset)) return result"},{"question":"Rani is planning to open a food delivery service. She has a fleet of n delivery agents, and each delivery agent has a different maximum delivery capacity d_i. Capacity here signifies the maximum number of deliveries an agent can complete in one trip. Rani has received a total of m delivery orders, and she wants to assign these orders to her delivery agents in such a way that minimizes the number of trips required by the entire fleet. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains two integers n (1 le n le 100) and m (1 le m le 10^4) — the number of delivery agents and the total number of delivery orders respectively. The second line contains n integers d_1, d_2, dots, d_n (1 le d_i le 100) — the maximum delivery capacity of each delivery agent. The sum of m over all test cases doesn\'t exceed 10^5. -----Output----- For each test case, print a single integer — the minimum number of trips required to deliver all orders. -----Examples----- Input 3 3 10 3 7 5 2 5 2 1 4 12 4 6 3 5 Output 2 3 2 -----Note----- In the first test case, Rani can use the following assignment strategy: - Assign agent 2 (capacity 7) with 7 orders. - Assign agent 3 (capacity 5) with 3 orders and then another 3 orders (splitting the remaining orders with agent 1), total 2 trips. In the second test case, the assignment strategy can be: - Agent 1 (capacity 2) takes 2 orders, makes 3 trips to complete 5 orders. In the third test case, one possible assignment strategy is: - Assign agent 2 (capacity 6) with 6 orders. - Assign agent 3 (capacity 5) with 5 orders and assign agent 1 (capacity 4) with 1 remaining order, total 2 trips.","solution":"def min_trips_per_test_case(n, m, capacities): Returns the minimum number of trips required to deliver all orders given n delivery agents with capacities. capacities.sort(reverse=True) trips = 0 for capacity in capacities: trips_needed = (m + capacity - 1) // capacity #.ceil(m / capacity) trips += trips_needed m -= trips_needed * capacity if m <= 0: break return trips def min_trips(t, test_cases): Process multiple test cases and return the results for each case. results = [] for i in range(t): n, m = test_cases[i][0] capacities = test_cases[i][1] results.append(min_trips_per_test_case(n, m, capacities)) return results"},{"question":"Develop a program to determine the largest rectangle in a histogram. INPUT: The first line contains the number of test cases t. For each test case, the first line contains n (the number of bars in the histogram). The second line contains n integers representing the heights of the bars. OUTPUT: For each test case, output a single line with the area of the largest rectangle in the histogram. Constraints: 1 ≤ t ≤ 10 1 ≤ n ≤ 100,000 0 ≤ height of each bar ≤ 10,000 SAMPLE INPUT 1 7 2 1 5 6 2 3 2 SAMPLE OUTPUT 10","solution":"def largest_rectangle_area(histogram): Calculate the largest rectangle area in a histogram. :param histogram: List of integers representing the heights of the histogram :return: The area of the largest rectangle possible in the histogram # Create an empty stack. The stack holds indexes of histogram[] list. # The bars stored in stack are always in increasing order of their heights. stack = [] max_area = 0 # Initialize max area index = 0 while index < len(histogram): # If this bar is higher than the bar at stack top, push it to the stack if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) # Now, pop the remaining bars from stack and calculate area with each popped bar while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def process_histograms(test_cases): Process multiple test cases for histogram calculations. :param test_cases: List of tuple where each tuple consists of (n, histogram) :return: List of results for each test case. results = [] for n, histogram in test_cases: results.append(largest_rectangle_area(histogram)) return results def parse_input(input_string): Parse the input string to extract test cases. :param input_string: Input string :return: List of test cases lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) histogram = list(map(int, lines[index + 1].strip().split())) test_cases.append((n, histogram)) index += 2 return test_cases def generate_output(results): Generate output string from results list. :param results: List of results :return: Output string return \'n\'.join(map(str, results))"},{"question":"Design a scheduling system for a cluster of robotic vehicles. Each robot must travel between various charging stations scattered in a large facility. The travel scheduler must ensure that no two robots travel to the same station at the same time to avoid congestion. You need to implement a scheduling algorithm that assigns time slots to the robots in such a way that they do not conflict. Each robot has a set of preferred charging stations and can only visit these specific stations. Input The first row of input contains two integers N (1 ≤ N ≤ 1000) and M (1 ≤ M ≤ 1000) representing the number of robots and the number of charging stations, respectively. The next N rows represent each robot\'s preferred charging stations. Each row starts with an integer K (1 ≤ K ≤ M) indicating the number of preferred stations followed by K integers which are the indices of these stations (0-indexed). Output Output N rows, each row containing an integer which is the assigned time slot for each robot. Use the minimum number of different time slots. Each robot should get a unique time slot among its preferred charging stations. Example Input 3 5 2 0 1 3 1 2 3 2 3 4 Output 1 2 3","solution":"def schedule_robots(N, M, preferences): # Create an array to store the time slot assignment for each robot slots = [-1] * N # Create a dictionary to store the assigned slots for each station station_schedule = {i: [] for i in range(M)} for i in range(N): assigned = False for station in preferences[i]: potential_slot = len(station_schedule[station]) + 1 conflicting_robot = next((r for r in station_schedule[station] if slots[r] == potential_slot), None) if conflicting_robot is None: slots[i] = potential_slot station_schedule[station].append(i) assigned = True break if not assigned: # Additional logic if no valid slot found (minimum slots approach can be made better) slot = 1 while slot in (slots[r] for r in station_schedule[preferences[i][0]]): slot += 1 slots[i] = slot station_schedule[preferences[i][0]].append(i) return slots"},{"question":"Alice is organizing a treasure hunt at the beach, and she has n treasure chests. Each treasure chest i contains a treasure of value vi. To increase the excitement, she decides to hide each treasure chest at different locations along a straight line beach that is divided into m segments. Alice decides to distribute the chests so that each segment can hold at most one chest. She also wants to place the treasures in such a way that the summed treasure value within each segment is maximized without placing more than one chest in each segment. Given `n` the number of chests, `m` the number of segments, and an array `v` representing the value of treasures in the chests, you need to find the optimal placement of chests to maximize the total value of treasures in any segment on the beach. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of chests and the number of segments. The second line contains n space-separated integers vi (1 ≤ vi ≤ 1,000) — the value of the i-th treasure. Output Print a single integer — the maximum total value of treasures that Alice can place in any single segment. Examples Input 3 5 4 7 2 Output 7 Input 4 3 10 5 6 3 Output 10 Input 6 6 1 10 3 8 6 2 Output 10 Note In the first example, Alice has 3 chests and 5 segments. The maximum value chest is 7, which will be the maximum total value in any single segment. In the second example, Alice has 4 chests and 3 segments. Even though Alice can\'t place all chests because there are more chests than segments, the optimal strategy is to place the chest with the maximum value which is 10, hence the maximum total value is 10. In the third example, Alice has 6 chests and 6 segments. Each segment can hold one chest. The highest value chest is 10, so the maximum total value in any single segment is 10.","solution":"def max_treasure_value(n, m, v): Returns the maximum total value of treasures that can be placed in any single segment. Args: n (int): Number of chests. m (int): Number of segments. v (list): List of integers representing the value of treasures in the chests. Returns: int: The maximum value of any single treasure chest. return max(v)"},{"question":"Given a string containing only characters \'R\' and \'L\', the task is to find the maximum number of balanced substrings. A balanced substring is defined as a substring that has equal number of \'R\' and \'L\'. Example 1: Input: s = \\"RLRRLLRLRL\\" Output: 4 Explanation: The balanced substrings are \\"RL\\", \\"RRLL\\", \\"RL\\", \\"RL\\". Example 2: Input: s = \\"RLLLLRRRLR\\" Output: 3 Explanation: The balanced substrings are \\"RL\\", \\"LLRR\\", \\"RL\\". Example 3: Input: s = \\"LLLLRRRR\\" Output: 1 Explanation: The balanced substring is \\"LLLLRRRR\\". Your task: You don\'t have to read input or print anything. Your task is to complete the function balancedStringSplit(s) which takes the string s as input and returns the maximum number of balanced substrings. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= s.length <= 10^5 s[i] is either \'R\' or \'L\'.","solution":"def balancedStringSplit(s): Returns the maximum number of balanced substrings. :param s: input string containing only \'R\' and \'L\' :type s: str :return: maximum number of balanced substrings :rtype: int balance = 0 max_balanced = 0 for char in s: if char == \'R\': balance += 1 else: # char == \'L\' balance -= 1 if balance == 0: max_balanced += 1 return max_balanced"},{"question":"`find_peak_element` You are given a list of integers representing the heights of buildings in a row. A building is considered a \\"peak\\" if it is taller than both buildings directly adjacent to it. Write a function `find_peak_element` that takes a list of integers as input and returns the index of any one of the peak elements. If there are multiple peaks, return the index of any one of them. If there are no peaks, return -1. Function Signature: ```python def find_peak_element(heights: List[int]) -> int: ``` Input Format: - A list of integers `heights` containing the heights of the buildings. Constraints: - 1 leq text{len}(heights) leq 1000 - 0 leq text{heights[i]} leq 10^4 Output Format: - An integer representing the index of any one of the peak elements, or -1 if no such element exists. Examples: ```python print(find_peak_element([1, 3, 2, 5, 4])) # Output could be 1 or 3 print(find_peak_element([1, 2, 3, 4, 5])) # Output could be 4 print(find_peak_element([5, 4, 3, 2, 1])) # Output could be 0 print(find_peak_element([2, 2, 2, 2, 2])) # Output should be -1 ``` Explanation: In the first example, both buildings at index 1 (with height 3) and index 3 (with height 5) are peaks. Thus, the function may return either index 1 or 3. In the second example, the building at index 4 (height 5) is taller than its adjacent building, making it the peak. Similarly, in the third example, the building at index 0 (height 5) is the peak. In the fourth example, no building stands taller than its neighbors, resulting in no peaks, thus returning -1.","solution":"def find_peak_element(heights): Finds and returns the index of a peak element in the list of building heights. A peak element is one that is taller than its immediate neighbors. n = len(heights) if n == 1: return 0 for i in range(n): if i == 0: if heights[i] > heights[i + 1]: return i elif i == n - 1: if heights[i] > heights[i - 1]: return i elif heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: return i return -1"},{"question":"You are given two rectangles on a plane, each defined by their bottom-left and top-right coordinates. Write a function to determine if the two rectangles overlap. Example 1: Input: rect1 = [0, 0, 2, 2] rect2 = [1, 1, 3, 3] Output: True Explanation: The rectangles overlap. Example 2: Input: rect1 = [0, 0, 1, 1] rect2 = [1, 1, 2, 2] Output: False Explanation: The rectangles do not overlap. Your Task: You don\'t need to read input or print anything. Complete the function `isOverlap` which takes the coordinates of two rectangles as input and returns True if they overlap and False otherwise. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: - The coordinates of the rectangles will be integers in the range [-10^9, 10^9]. - rect1 and rect2 will each contain 4 integers representing the bottom-left and top-right coordinates of the rectangle.","solution":"def isOverlap(rect1, rect2): Determine if two rectangles overlap. Each rectangle is defined by its bottom-left (x1, y1) and top-right (x2, y2) coordinates. rect1 and rect2 are lists where: rect1 = [x1, y1, x2, y2] rect2 = [x1, y1, x2, y2] if rect1[2] <= rect2[0] or rect2[2] <= rect1[0] or rect1[3] <= rect2[1] or rect2[3] <= rect1[1]: return False return True"},{"question":"You are given an array of logs representing user activity on an online platform. Each log is represented by a list of integers [userID, actionType, timestamp], where: - `userID`: an integer representing the ID of a user. - `actionType`: an integer where `0` indicates a login and `1` indicates a logout. - `timestamp`: an integer representing the time of the action in seconds since the start of the epoch. The task is to calculate the total active time for each user. A user is considered active from the time they log in to the time they log out. If there are overlapping sessions for a single user, they should be counted only once. Assume the logs are sorted by timestamp and no user has a logout action without a corresponding login beforehand. -----Input----- Input consists of: - An integer `N`, the number of logs, with ( 1 leq N leq 10000 ). - `N` lines, each containing three integers representing a log [userID, actionType, timestamp] with ( 1 leq userID leq 1000 ), ( 0 leq actionType leq 1 ), and ( 1 leq timestamp leq 10^9 ). -----Output----- Output should consist of: - For each user who has at least one login/logout pair, output a line containing two integers: userID and their total active time in seconds, sorted by userID in ascending order. -----Examples----- Sample Input 1: 6 1 0 10 2 0 12 1 1 20 3 0 15 2 1 25 3 1 30 Sample Output 1: 1 10 2 13 3 15 Sample Input 2: 4 1 0 100 1 1 200 2 0 150 2 1 250 Sample Output 2: 1 100 2 100","solution":"def calculate_active_time(logs): Calculates the total active time for each user based on login and logout timestamps. from collections import defaultdict # Dictionary to store the last login time for each user last_login = {} # Dictionary to store the total active time for each user total_active_time = defaultdict(int) for log in logs: user_id, action_type, timestamp = log if action_type == 0: # login last_login[user_id] = timestamp elif action_type == 1: # logout if user_id in last_login: total_active_time[user_id] += timestamp - last_login[user_id] del last_login[user_id] # Remove the login record after calculating # Convert the result to the required format and sort it by userID result = sorted(total_active_time.items()) return result"},{"question":"Given an integer array `arr` of size `n` and an integer `q` representing the number of queries. Each query is represented as `l r x` and it means increment each element in the segment from index `l` to `r` (inclusive) by the value `x`. You have to process all the queries and then return the final array. # Input The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the size of the array and the number of queries respectively. The second line contains `n` integers `arr[1], arr[2], ..., arr[n]` (0 ≤ arr[i] ≤ 10^9) — the elements of the array. The next `q` lines contain three integers `l`, `r`, and `x` (1 ≤ l ≤ r ≤ n, 0 ≤ x ≤ 10^9). # Output Print `n` integers — the elements of the array after processing all the queries. # Example Input ``` 8 3 2 4 6 8 10 12 14 16 1 5 3 3 8 2 4 4 5 ``` Output ``` 5 7 11 18 13 14 16 18 ``` Explanation After first query `[1, 5, 3]`, array becomes `[2+3, 4+3, 6+3, 8+3, 10+3, 12, 14, 16]` which results in `[5, 7, 9, 11, 13, 12, 14, 16]`. After second query `[3, 8, 2]`, array becomes `[5, 7, 9+2, 11+2, 13+2, 12+2, 14+2, 16+2]` which results in `[5, 7, 11, 13, 15, 14, 16, 18]`. After third query `[4, 4, 5]`, array becomes `[5, 7, 11, 13+5, 15, 14, 16, 18]` which results in `[5, 7, 11, 18, 15, 14, 16, 18]`.","solution":"def process_queries(n, q, arr, queries): This function processes the list of queries and modifies the array accordingly. Parameters: n (int): Size of the array q (int): Number of queries arr (list of int): The initial array queries (list of tuples): Each tuple contains three integers (l, r, x) Returns: list of int: The modified array after processing all queries for l, r, x in queries: for i in range(l-1, r): arr[i] += x return arr"},{"question":"Amelia loves prime numbers and enjoys finding interesting properties about them. One day, her friend challenged her to find the smallest prime number larger than a given integer. Amelia finds this an intriguing problem and decides to write a program to solve it quickly. -----Task----- Your task is to write a program that finds the smallest prime number that is larger than a given integer N. -----Input----- The input contains a single line with an integer N, 1 leq N leq 1; 000; 000. -----Output----- Output one line with one integer, the smallest prime number that is larger than N. -----Examples----- Sample Input: 10 Sample Output: 11 Sample Input: 14 Sample Output: 17","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def smallest_prime_greater_than(N): candidate = N + 1 while not is_prime(candidate): candidate += 1 return candidate"},{"question":"Given an array of integers `arr` and a positive integer `k`, find the maximum sum of any contiguous subarray of size `k`. Return this maximum sum. For example, let\'s take `arr = [1, 12, -5, -6, 50, 3]` and `k = 4`. The maximum sum of a contiguous subarray of size `k` is `56`, which is obtained by the subarray `[12, -5, -6, 50]`. More examples: - max_subarray_sum([2, 3, 4, 1, 5], 3) = 10, because the subarray `[3, 4, 3]` has the maximum sum of 10. - max_subarray_sum([1, 1, 1, 1, 1, 1], 2) = 2, because the subarray `[1, 1]` has the maximum sum of 2. You can presume the array will contain at least one subarray of the required size. Good luck! Note: 1. Do not use built-in functions like `sum()`. 2. Optimize your solution to run in O(n) time complexity.","solution":"def max_subarray_sum(arr, k): Returns the maximum sum of any contiguous subarray of size k. :param arr: List of integers :param k: Positive integer indicating the size of the subarray :return: Maximum sum of a contiguous subarray of size k # Ensure the array has at least k elements n = len(arr) if n < k: return None # Initial sum of the first window max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window over the array for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a binary tree with N nodes. Each node has an integer value assigned to it. Your task is to find the sum of values of nodes on the longest path from the root to any leaf. If there are multiple longest paths, consider the path with the maximum sum of node values. Input: The first line contains an integer N (1 ≤ N ≤ 10^5) representing the number of nodes in the tree. The second line contains N integers representing the values assigned to each node. Each of the next N-1 lines contains two integers U and V (1 ≤ U, V ≤ N, U ≠ V) representing an edge between node U and node V. Output: Print the sum of values of nodes on the longest path from the root to any leaf. If there are multiple such paths, print the maximum sum. Examples: Input: 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Output: 7 Input: 3 10 2 3 1 2 1 3 Output: 13 Note: In the first example: The longest paths are 1-2-4 and 1-2-5, with lengths 3. The path 1-2-5 has the maximum sum of 1+2+5 = 8. In the second example: The longest paths are 1-2 and 1-3, with lengths 2. The path 1-3 has the maximum sum of 10+3 = 13.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def build_tree(n, values, edges): nodes = [TreeNode(values[i]) for i in range(n)] for u, v in edges: nodes[u-1].children.append(nodes[v-1]) nodes[v-1].children.append(nodes[u-1]) return nodes[0] def find_longest_path_sum(root): def dfs(node, parent): max_depth, max_sum = 0, 0 for child in node.children: if child == parent: continue depth, path_sum = dfs(child, node) if depth + 1 > max_depth: max_depth, max_sum = depth + 1, path_sum + node.value elif depth + 1 == max_depth: max_sum = max(max_sum, path_sum + node.value) return max_depth, max_sum if max_depth > 0 else node.value return dfs(root, None)[1] def solve(n, values, edges): root = build_tree(n, values, edges) return find_longest_path_sum(root)"},{"question":"Write a function that takes a string as input and returns a dictionary with the count of each character in the string. Note that the function should ignore any punctuation marks and treat uppercase and lowercase characters as the same.","solution":"import string def char_count(s): Returns a dictionary with the count of each character in the string. Ignores punctuation and treats uppercase and lowercase characters as the same. # Convert to lowercase to handle case insensitivity s = s.lower() # Create a dictionary to store character counts count_dict = {} for char in s: if char.isalpha(): # Consider only alphabetic characters if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"A maze is represented by a grid of size n x m (3 ≤ n, m ≤ 15). The grid contains empty cells, walls, and a starting point \'S\' and an exit point \'E\'. Vasya wants to find a safe way out of the maze by reaching from \'S\' to \'E\' without hitting any walls. He can move up, down, left, or right, but not diagonally. The maze cells are represented by the following characters: - \'.\' - an empty cell where Vasya can walk. - \'#\' - a wall where Vasya cannot walk. - \'S\' - the starting point. - \'E\' - the exit point. Determine if Vasya can reach the exit point \'E\' from the starting point \'S\'. If it is possible, print the shortest path to get to \'E\'. If there are multiple shortest paths, print any one of them. If it is not possible to reach \'E\', print \\"No solution.\\" without the quotes. Input The first line contains integers n and m (3 ≤ n, m ≤ 15). The next n lines contain m characters each representing the maze. Output If it is possible for Vasya to reach \'E\', print \\"Solution exists.\\" without the quotes. On the next line, print the shortest path as a string consisting of \'U\', \'D\', \'L\', \'R\' representing moves up, down, left, and right respectively. If it is not possible to reach \'E\', print \\"No solution.\\" without the quotes. Examples Input 4 5 S.... . .#E#. .#... Output Solution exists. RRRDD Input 5 5 SE. .#... ... #...# #.# Output No solution. Input 3 3 S.. #.# ..E Output Solution exists. RDD Input 3 4 S..E #.#. .... Output Solution exists. RRRR Note In the first example, Vasya can reach the exit point \'E\' by moving right three times and down twice, forming the path \\"RRRDD\\". In the second example, all possible routes are blocked by walls, so there is no solution. In the third example, Vasya reaches the exit point \'E\' by moving right once, down twice, and right once, forming the path \\"RDD\\". In the fourth example, Vasya can reach the exit point \'E\' directly by moving right four times, forming the path \\"RRRR\\".","solution":"def find_path(maze, n, m): from collections import deque # Locate the start (\'S\') and end (\'E\') positions start = None end = None for i in range(n): for j in range(m): if maze[i][j] == \'S\': start = (i, j) elif maze[i][j] == \'E\': end = (i, j) # Directions for moving: Up, Down, Left, Right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] direction_symbols = [\'U\', \'D\', \'L\', \'R\'] def in_bounds(x, y): return 0 <= x < n and 0 <= y < m # BFS for finding the shortest path queue = deque([(start, \\"\\")]) visited = set() visited.add(start) while queue: (current_x, current_y), path = queue.popleft() if (current_x, current_y) == end: print(\\"Solution exists.\\") print(path) return for (dx, dy), symbol in zip(directions, direction_symbols): next_x, next_y = current_x + dx, current_y + dy if in_bounds(next_x, next_y) and maze[next_x][next_y] != \'#\' and (next_x, next_y) not in visited: queue.append(((next_x, next_y), path + symbol)) visited.add((next_x, next_y)) print(\\"No solution.\\") # Test example # Maze input as a list of strings maze = [ \\"S....\\", \\".\\", \\".#E#.\\", \\".#...\\" ] n, m = 4, 5 find_path(maze, n, m)"},{"question":"A coding wizard has enchanted a forest with N trees arranged in a straight line, each having a unique height expressed as an integer. The height of the i-th tree is given by H_i. The wizard casts spells that can modify the height of a specific range of consecutive trees multiple times, causing the height of each tree in the range to either increase or decrease by 1 unit per spell. Your task is to determine the final height of each tree after executing all the spells. Input The input consists of the following: * The first line contains two integers N (1 leq N leq 100,000), the number of trees, and Q (1 leq Q leq 100,000), the number of spells. * The second line contains N space-separated integers H_1, H_2, ..., H_N (1 leq H_i leq 10^9), the initial heights of the trees. * The next Q lines each contain a spell described by three integers T, L, R (1 leq L leq R leq N), where: * T = 1 means increasing the height of each tree in the interval [L, R] by 1. * T = -1 means decreasing the height of each tree in the interval [L, R] by 1. Output Output a single line containing the final height of each tree separated by spaces. Example Input 5 3 2 3 1 4 5 1 1 3 -1 2 4 1 3 5 Output 3 3 2 4 6 Explanation Initially, the tree heights are [2, 3, 1, 4, 5]. 1. Applying the first spell (1 1 3), we increase the heights of the trees in positions 1 to 3 by 1. The heights become [3, 4, 2, 4, 5]. 2. Applying the second spell (-1 2 4), we decrease the heights of the trees in positions 2 to 4 by 1. The heights become [3, 3, 1, 3, 5]. 3. Applying the third spell (1 3 5), we increase the heights of the trees in positions 3 to 5 by 1. The heights become [3, 3, 2, 4, 6]. Thus, the final heights of the trees are [3, 3, 2, 4, 6].","solution":"def final_heights(N, Q, heights, spells): delta = [0] * (N + 1) # using (N + 1) to handle range update easily # Apply all spells using a difference array approach for T, L, R in spells: delta[L-1] += T if R < N: delta[R] -= T # Calculate the final heights using the accumulated delta effect curr_delta = 0 for i in range(N): curr_delta += delta[i] heights[i] += curr_delta return heights"},{"question":"You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). You must rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. Write a function called `rotate` that takes a two-dimensional list `matrix` (list of lists) of size n x n and rotates it 90 degrees clockwise. # Example ``` Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Constraints - `n == matrix.length == matrix[i].length` - `1 <= n <= 20` - `-1000 <= matrix[i][j] <= 1000` # Steps to Solve 1. Take the transpose of the matrix. 2. Reverse each row of the matrix. # Notes - You should not use any additional space for another matrix. - Focus on transforming the original matrix in-place using swaps.","solution":"def rotate(matrix): Rotates the n x n matrix by 90 degrees clockwise in-place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Given a list of integers, your task is to determine if there exists any pair of integers (i, j) in the list such that i + j is equal to a given target value. If such a pair exists, return their indices as a tuple (i, j). If no such pair exists, return None. The solution should have a time complexity better than O(n^2). Input 1st line contains an integer T denoting the number of test cases. Each test case consists of: 1st line contains an integer n denoting the number of elements in the list. 1 ≤ n ≤ 10^5 2nd line contains n space-separated integers representing the list. Each integer fits within the signed 32-bit integer range. 3rd line contains a single integer target, which fits within the signed 32-bit integer range. Output For each test case, output a tuple (i, j) if such a pair exists or None otherwise. If multiple solutions exist, any of them is acceptable. SAMPLE INPUT 2 4 2 7 11 15 9 5 1 2 3 4 5 10 SAMPLE OUTPUT (0, 1) None Note: The function should follow 0-based indexing for the list.","solution":"def find_pair_with_sum(nums, target): Given a list of integers, returns a tuple (i, j) of indices where the sum of nums[i] + nums[j] equals target. If no such pair exists, returns None. nums_map = {} for i, num in enumerate(nums): complement = target - num if complement in nums_map: return (nums_map[complement], i) nums_map[num] = i return None def process_test_cases(test_cases): Given a list of test cases, process each and return the results. Each test case is a dictionary with keys: \'n\', \'nums\', and \'target\'. results = [] for case in test_cases: result = find_pair_with_sum(case[\'nums\'], case[\'target\']) results.append(result) return results"},{"question":"Task You have been given a message encoded in a certain format. The message consists of a series of words, and each word is a sequence of digits. Each digit in the word represents a letter in the alphabet encoded as follows: A = 1, B = 2, ..., Z = 26. Your task is to implement a function to decode the message and return the original sentence, with each word separated by a space. Input The function will receive a list `encoded_message` containing strings of digits. Each string represents a word. The input will always be valid, and the digit sequences will always form valid letters. Output Return the decoded message as a single string with words separated by a space. Example ``` decode_message([\\"8\\", \\"5\\", \\"12\\", \\"12\\", \\"15\\"]) // => \\"HELLO\\" decode_message([\\"20\\", \\"8\\", \\"5\\", \\"17\\", \\"21\\", \\"9\\", \\"3\\", \\"11\\"]) // => \\"THEQUICK\\" decode_message([\\"1\\", \\"9\\", \\"13\\"]) // => \\"AIM\\" ```","solution":"def decode_message(encoded_message): Decodes a message represented by a list of digit strings where each digit represents a letter by mapping A=1, B=2, ..., Z=26 and returns the decoded message. Parameters: encoded_message (list of str): A list of strings, where each string is a digit representing a letter. Returns: str: The decoded message. return \'\'.join(chr(int(num) + 64) for num in encoded_message)"},{"question":"One of your friends is an event planner and he has been tasked with organizing a series of presentations for a conference. Each presentation has a specific start and end time. Since some of the presentations might overlap, your friend wants to maximize the number of presentations that can be attended fully without any overlap. Your task is to help your friend by determining the maximum number of non-overlapping presentations that can be attended. -----Task----- Given the start and end times of the presentations, find the maximum number of presentations that can be attended without any overlap. -----Input----- The first line of input contains an integer N (1 leq N leq 10000), the number of presentations. Then follow N lines, each with 2 integers s_i and e_i, denoting the start and end times of the i-th presentation. You can assume that 0 le s_i < e_i le 100000. -----Output----- Output the maximum number of non-overlapping presentations that can be attended. -----Examples----- Sample Input: 5 1 3 2 5 4 6 6 8 6 7 Sample Output: 3","solution":"def max_presentations(n, presentations): Given the number of presentations and their start and end times, this function returns the maximum number of non-overlapping presentations that can be attended. Parameters: - n: int - number of presentations - presentations: List[Tuple[int, int]] - List of tuples where each tuple denotes (start, end) times Returns: - int - maximum number of non-overlapping presentations if not presentations: return 0 # Sort presentations by their end times presentations.sort(key=lambda x: x[1]) count = 1 end_time = presentations[0][1] for i in range(1, n): if presentations[i][0] >= end_time: count += 1 end_time = presentations[i][1] return count"},{"question":"You are given an n x n grid where each cell contains a non-negative integer representing the amount of gold in that cell. You start in the top-left cell (0, 0) with a bag that can carry an infinite amount of gold, and you want to reach the bottom-right cell (n-1, n-1) while collecting as much gold as possible. You can only move right or down at each step. Your task is to write a function that returns the maximum amount of gold you can collect on your way to the bottom-right cell. # Input - The first line contains an integer, n (1 ≤ n ≤ 1000), which is the size of the grid. - Each of the next n lines contains n space-separated integers representing the gold amounts in each cell of the grid (0 ≤ gold ≤ 10^4). # Output - Output a single integer, which is the maximum amount of gold that can be collected from the top-left cell to the bottom-right cell. # Example Input 3 1 3 1 1 5 1 4 2 1 Output 12 Explanation - You can collect the gold in the following path: (0,0) → (0,1) → (1,1) → (2,1) → (2,2). - The gold amounts collected along this path are 1 + 3 + 5 + 2 + 1 = 12, which is the maximum possible. # Additional Notes Consider using dynamic programming to build up the solution starting from the top-left cell to the bottom-right cell, storing the maximum gold collectible up to each cell in a separate matrix.","solution":"def max_gold(grid): n = len(grid) if n == 0 or len(grid[0]) == 0: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1]"},{"question":"Alex is trying to analyze the profitability of an investment based on fluctuating prices. He has an array \\"prices\\" where the i-th element represents the price of a stock on day i. Alex can buy the stock on any day and sell it on any subsequent day. He wants to maximize his profit by choosing the best day to buy and the best day to sell. Your task is to help Alex determine the maximum possible profit. If no profit can be made, return 0. Input: - The first line of input contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of days. - The second line contains N space-separated integers representing the array \\"prices\\". Constraints: - 1 ≤ T ≤ 10^4 - 2 ≤ N ≤ 3 x 10^4 - 1 ≤ prices[i] ≤ 10^5 Output: For each test case, print a single line containing the maximum possible profit. If no profit can be made, print 0. SAMPLE INPUT 3 6 7 1 5 3 6 4 4 7 6 4 3 5 1 2 3 4 5 SAMPLE OUTPUT 5 0 4","solution":"def max_profit(prices): This function calculates the maximum profit that can be made by buying and selling the stock on different days. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price else: current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit def max_profit_multiple_cases(test_cases): This function processes multiple test cases for maximum profit calculation. results = [] for prices in test_cases: results.append(max_profit(prices)) return results"},{"question":"Given a sequence of integers, a peak element is defined as an element that is greater than its neighbors. For example, in the array [1, 3, 2, 4], 3 and 4 are peak elements since they are larger than their immediate neighbors. However, at the ends of the array, the comparison is only with the closest neighbor. Write a function to find the index of any one peak element, if it exists. If the array has multiple peak elements, return the index of any one of them. -----Constraints----- - The array will have at least one element and at most 10^6 elements. - The elements of the array are integers within the range [-10^9, 10^9]. -----Input----- Input is given from Standard Input in the following format: n array of n integers separated by spaces -----Output----- Print the index (0-based) of a peak element. If there are multiple peak elements, print the index of any one of them. -----Sample Input----- 5 1 3 20 4 1 -----Sample Output----- 2 Explanation: - 3 is a peak element since its neighbors (1 and 20) are less than it. - 20 is a peak element since its neighbors (3 and 4) are less than it. - If we choose 20 as the peak element, the output index is 2 (0-based index of 20).","solution":"def find_peak_element(arr): Returns the index of any one peak element in the array. n = len(arr) if n == 1: return 0 if arr[0] >= arr[1]: return 0 if arr[n-1] >= arr[n-2]: return n-1 for i in range(1, n-1): if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]: return i"},{"question":"Lisa has a unique way of organizing her bookshelf. She labels each shelf with a positive integer number h, which indicates the maximum height of books that can be placed on that shelf. Each book also has a positive integer height. Lisa wants to place her books on the shelves in such a way that she uses the fewest number of shelves. Write a program that tells Lisa the minimum number of shelves required to organize her books given the heights of the books and the maximum allowable height for each shelf. Each shelf can contain any number of books as long as the total height of the books on the shelf does not exceed the maximum allowable height for that shelf. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases T (1 le T le 100). Then the descriptions of the test cases follow. Each test case starts with a line containing two integers n (1 le n le 10^3) and h (1 le h le 10^9) — the number of books and the maximum height of each shelf, respectively. The next line contains n integers b_1, b_2, ldots, b_n (1 le b_i le h) — the heights of the books. -----Output----- For each test case, output a single integer — the minimum number of shelves required to organize all the books. -----Example----- Input 2 4 10 2 3 9 5 3 5 2 2 3 Output 2 2 -----Note----- In the first example, Lisa can organize her books on 2 shelves. One possible way is to place books with heights 2, 3, and 5 on one shelf (total height 10) and the book with height 9 on the other shelf. In the second example, Lisa needs 2 shelves. One possible way is to place books with heights 2 and 3 on one shelf (total height 5) and the other book with height 2 on the second shelf.","solution":"def min_shelves(test_cases): results = [] for case in test_cases: n, h, book_heights = case book_heights.sort(reverse=True) shelves = [] for height in book_heights: placed = False for shelf in shelves: if sum(shelf) + height <= h: shelf.append(height) placed = True break if not placed: shelves.append([height]) results.append(len(shelves)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] current_line = 1 for _ in range(T): n, h = map(int, lines[current_line].split()) book_heights = list(map(int, lines[current_line + 1].split())) test_cases.append((n, h, book_heights)) current_line += 2 return test_cases"},{"question":"You are given an integer array arr[] of size N. Your task is to find all unique triples (arr[i], arr[j], arr[k]) such that 0 <= i < j < k < N and arr[i] + arr[j] + arr[k] == 0. Implement the function `findTriplets` which returns a list of lists containing the unique triplets that sum to zero. Input Format: The first line of input contains a single integer T denoting the number of test cases. Each test case comprises two lines. The first line contains an integer N denoting the size of the array. The second line contains N space-separated integers denoting the elements of the array. Output Format: For each test case, return a list of lists containing the unique triplets, each on a new line, sorted in non-decreasing order. Your Task: You need to implement the function `findTriplets` which takes an array and its size as input, and returns a list of lists containing all unique triplets that sum to zero. The triplets within each list should be in non-decreasing order. Constraints: - 1 <= T <= 10 - 3 <= N <= 1000 - -1000 <= arr[i] <= 1000 Example: Input 2 6 -1 0 1 2 -1 -4 4 0 0 0 0 Output [[-1, -1, 2], [-1, 0, 1]] [[0, 0, 0]] Explanation: In the first test case, the unique triplets that sum to zero are [-1, -1, 2] and [-1, 0, 1]. In the second test case, the unique triplet that sums to zero is [0, 0, 0]. Note: - The order of the output triplets and the triplets\' order within each list does not matter. - Ensure there are no duplicate triplets in the output.","solution":"def findTriplets(arr, n): arr.sort() triplets = [] for i in range(n - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = arr[i] + arr[left] + arr[right] if total == 0: triplets.append([arr[i], arr[left], arr[right]]) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return triplets def processTestCases(T, test_cases): result = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] result.append(findTriplets(arr, N)) return result"},{"question":"Hey buddy, How are you? I noticed you\'ve been mastering algorithms on various online platforms, and I thought you might enjoy this puzzle I encountered. It\'s about optimizing stock trading strategies. The problem was quite tricky for me and I always seem to miss the optimal solution. I need you to crack this one for me so I can finally understand how to maximize my profits. Your coding challenge buddy, Alex PS: Next Wednesday is \\"Stock Trading Insights Webinar\\" day! Don\'t miss out on some great strategies. optimize_trading.psc # author: alex # problem: optimize trading # status: unsolved # a..b : iterate from a to b ( both inclusive ) define n as integer define prices as integer array of size n function max_profit(prices) define local_min as integer define max_profit as integer local_min = prices[0] for i = 1..(n-1) if prices[i] < local_min local_min = prices[i] max_profit = max(max_profit, prices[i] - local_min) return max_profit function main() read n from input for i = 1..n read prices[i] print max_profit(prices) optimize_trading.pdf Input Format On the first line, you will be given n followed by n lines describing the prices of a single stock on each day. Each line contains an integer prices_i which represents the price of the stock on the i^{th} day. Output Format Print the maximum possible profit you can achieve from buying and selling the stock one time. Constraints 1 ≤ n ≤ 10^5 1 ≤ prices_i ≤ 10^9 Sample Input 6 7 1 5 3 6 4 Sample Output 5 Explanation You can achieve the maximum profit by buying on day 2 (price = 1) and selling on day 5 (price = 6), so the profit = 6 - 1 = 5. Note that you cannot sell before you buy.","solution":"def max_profit(prices): This function calculates the maximum profit that can be achieved from a single buy-sell transaction. if not prices: return 0 local_min = prices[0] max_profit = 0 for price in prices[1:]: if price < local_min: local_min = price max_profit = max(max_profit, price - local_min) return max_profit"},{"question":"Mina is organizing a marathon event and she needs to allocate bib numbers to the participants. Each participant will receive a bib number based on their registration order. Write a function that generates a list of bib numbers as strings with \\"M#\\" as a prefix, where \\"#\\" is the registration number starting from 1 up to n. For example, if n=5, the output should be: [\\"M1\\", \\"M2\\", \\"M3\\", \\"M4\\", \\"M5\\"] Input Format An integer n representing the number of participants. Constraints 1 ≤ n ≤ 100 Output Format Return a list of strings, where each string represents a bib number with \\"M#\\" as a prefix. Sample Input 0 3 Sample Output 0 [\\"M1\\", \\"M2\\", \\"M3\\"] Sample Input 1 5 Sample Output 1 [\\"M1\\", \\"M2\\", \\"M3\\", \\"M4\\", \\"M5\\"]","solution":"def generate_bib_numbers(n): Generate a list of bib numbers with prefix \\"M\\" and registration number 1 to n. Parameters: n (int): Number of participants. Returns: list: List of bib numbers as strings. return [f\\"M{i}\\" for i in range(1, n + 1)]"},{"question":"You are given a list of dictionaries, each representing a student\'s record with their name, age, and grades. Your task is to write a function `top_student` that takes this list as an argument and returns the name of the student with the highest average grade. If there are multiple students with the same highest average grade, return the one who appears first in the list. Here\'s an example input and the expected output: ```python students = [ {\\"name\\": \\"Alice\\", \\"age\\": 22, \\"grades\\": [88, 90, 85]}, {\\"name\\": \\"Bob\\", \\"age\\": 23, \\"grades\\": [75, 80, 79]}, {\\"name\\": \\"Charlie\\", \\"age\\": 21, \\"grades\\": [95, 90, 100]} ] print(top_student(students)) # Output: Charlie ``` Write your function `top_student(students)` that returns the name of the student with the highest average grade.","solution":"def top_student(students): Returns the name of the student with the highest average grade. If multiple students have the same highest average grade, return the name of the one who appears first in the list. top_student_name = \\"\\" highest_average = 0 for student in students: average_grade = sum(student[\\"grades\\"]) / len(student[\\"grades\\"]) if average_grade > highest_average: highest_average = average_grade top_student_name = student[\\"name\\"] return top_student_name"},{"question":"You are given two integers n and m, representing the number of rows and columns of a matrix. The matrix is filled with integers from 1 to n times m in a spiral order. -----Input----- The first line of the input contains two integers n and m (1 leq n, m leq 50) — the number of rows and columns of the matrix, respectively. -----Output----- Print the matrix of size n times m filled with the numbers from 1 to n times m in a spiral order. Spiral order means starting from the top left corner, then proceeding to the right, then downwards, then left, and then upwards, and repeating the process until the entire matrix is filled. -----Examples----- Input 3 3 Output 1 2 3 8 9 4 7 6 5 Input 3 4 Output 1 2 3 4 10 11 12 5 9 8 7 6","solution":"def generate_spiral_matrix(n, m): Generates an n x m matrix filled with integers from 1 to n * m in a spiral order. matrix = [[0] * m for _ in range(n)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up direction_index = 0 current_number = 1 row, col = 0, 0 for _ in range(n * m): matrix[row][col] = current_number current_number += 1 next_row, next_col = row + directions[direction_index][0], col + directions[direction_index][1] if not (0 <= next_row < n and 0 <= next_col < m and matrix[next_row][next_col] == 0): direction_index = (direction_index + 1) % 4 # change direction next_row, next_col = row + directions[direction_index][0], col + directions[direction_index][1] row, col = next_row, next_col return matrix"},{"question":"Task You are given a list of weights and a matrix representing the potential placements of these weights. Your job is to place the weights onto the matrix such that the sum of the weights in the matrix does not exceed a given threshold value while maximizing the number of filled positions. The rules are: - You can place each weight only once. - You need to maximize the number of cells filled with weights in the matrix without exceeding the given threshold value when summing all the weights. # Input - `weights`: A list of non-negative integers representing weights. It can have at most 20 elements. - `matrix`: An `n` x `m` integer matrix (0 ≤ n, m ≤ 10) consisting of zeros where weights can be placed. - `threshold`: A non-negative integer representing the maximum allowed sum of weights in the matrix. # Output An integer representing the maximum number of positions filled without exceeding the threshold. # Example For ``` weights = [4, 2, 3, 5, 7] matrix = [ [0, 0, 0], [0, 0, 0], [0, 0, 0] ] threshold = 10 ``` The output should be `3`. One of the possible solutions is: ``` 4 -> matrix[0][0] 2 -> matrix[0][1] 3 -> matrix[0][2] Total weight: 4 + 2 + 3 = 9 (which is <= 10) Filled positions: 3 ```","solution":"from itertools import combinations def max_filled_positions(weights, matrix, threshold): Returns the maximum number of positions filled without exceeding the threshold. n, m = len(matrix), len(matrix[0]) max_positions = 0 for r in range(1, len(weights) + 1): for combi in combinations(weights, r): if sum(combi) <= threshold: max_positions = max(max_positions, r) return max_positions # Example usage weights = [4, 2, 3, 5, 7] matrix = [ [0, 0, 0], [0, 0, 0], [0, 0, 0] ] threshold = 10 print(max_filled_positions(weights, matrix, threshold)) # Output: 3"},{"question":"# Task Given a string `s` representing a binary number and an integer `k`, write a function to find the smallest binary number greater than `s` where the number of bits to be changed (0 to 1 or 1 to 0) is exactly `k`. # Notes * The string `s` will contain only the characters \'0\' and \'1\'. * It is guaranteed that there will always be a valid result for the given inputs. * Return the result as a string of the same length as the input string `s`. # Example ```python change_bits(\\"1010\\", 1) # Output: \\"1011\\" change_bits(\\"0000\\", 2) # Output: \\"0011\\" ```","solution":"def change_bits(s, k): Find the smallest binary number greater than s where the number of bits to be changed is exactly k. Args: s (str): A binary string. k (int): Number of bits to change. Returns: str: The smallest binary number greater than s with exactly k bits changed. binary_num = list(s) n = len(binary_num) for i in range(n-1, -1, -1): if binary_num[i] == \'0\': binary_num[i] = \'1\' k -= 1 if k == 0: break # If more flips are needed, convert \'1\' to \'0\' from the end for i in range(n-1, -1, -1): if k == 0: break if binary_num[i] == \'1\' and s[i] == \'1\': binary_num[i] = \'0\' k -= 1 return \'\'.join(binary_num)"},{"question":"Write a function that takes an array of integers and returns the number of unique pairs (i, j) such that nums[i] + nums[j] equals zero. # Constraints: - The array will contain between 1 and 10^5 elements. - Each element in the array is an integer between -10^4 and 10^4. # Examples: ``` Input: [1, -1, 2, -2, 3, -3] Output: 3 Explanation: The pairs (1, -1), (2, -2), and (3, -3) sum to 0. Input: [-5, 5, 5] Output: 1 Explanation: The unique pair (-5, 5) sums to 0. Input: [0, 1, 2, 3] Output: 0 Explanation: No pairs sum to 0. ```","solution":"def count_unique_zero_sum_pairs(nums): Count the number of unique pairs (i, j) such that nums[i] + nums[j] equals zero. count = 0 seen = set() pairs = set() for num in nums: if -num in seen: pair = tuple(sorted((num, -num))) if pair not in pairs: pairs.add(pair) count += 1 seen.add(num) return count"},{"question":"An alien civilization uses a peculiar numbering system for its currency. They utilize only Fibonacci numbers as denominations. The Fibonacci sequence is defined as follows: F(0) = 1, F(1) = 2, F(n) = F(n-1) + F(n-2) for n ≥ 2 Given an integer m, the goal is to determine the minimum number of Fibonacci denominations required to sum up to exactly m. You can assume that there is an infinite supply of each Fibonacci denomination. -----Input----- The input contains a single integer m (1 ≤ m ≤ 10^9). -----Output----- Output a single integer representing the minimum number of Fibonacci denominations that sum to exactly m. -----Examples----- Input 10 Output 2 Input 15 Output 2 -----Note----- In the first test case, the smallest denominations required to form 10 are 8 and 2. Since 8 and 2 are consecutive Fibonacci numbers, the minimum number of coins required is 2. In the second test case, the denominations required to form 15 are 13 and 2. Thus, the minimum number of coins required is 2, as 13 and 2 are also Fibonacci numbers in the sequence.","solution":"def min_fibonacci_denominations_sum(m): Determine the minimum number of Fibonacci denominations required to sum up to exactly m. if m <= 0: return 0 # Generate all Fibonacci numbers up to m fib_list = [] a, b = 1, 2 while a <= m: fib_list.append(a) a, b = b, a + b count = 0 remaining_sum = m # Traverse the fib_list from the largest to the smallest and reduce remaining_sum for num in reversed(fib_list): if num <= remaining_sum: remaining_sum -= num count += 1 # If we have reached exactly zero, we can stop if remaining_sum == 0: break return count"},{"question":"You are given a number sequence of length n consisting of integers. Your task is to determine if you can rearrange the sequence elements such that the absolute difference between any two consecutive elements is at most 1. If such a rearrangement is possible, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The first line contains a single integer T (1 le T le 100) — the number of test cases. Each of the next 2T lines contain: - The first line contains a single integer n (2 le n le 100) — the length of the number sequence. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 100) — the elements of the sequence. -----Output----- For each test case, print \\"YES\\" if rearranging the sequence to meet the required condition is possible; otherwise, print \\"NO\\". -----Example----- Input 3 4 1 2 2 3 5 5 5 5 5 5 6 1 3 5 7 9 11 Output YES YES NO -----Note----- In the first example, one possible arrangement is [1, 2, 2, 3]. In the second example, since all elements are the same, the condition is satisfied trivially. In the third example, no rearrangement can achieve the condition for all consecutive element pairs.","solution":"def can_rearrange_sequence(test_cases): results = [] for case in test_cases: n, sequence = case sequence.sort() possible = True for i in range(1, n): if abs(sequence[i] - sequence[i - 1]) > 1: possible = False break results.append(\\"YES\\" if possible else \\"NO\\") return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] line_index = 1 for _ in range(T): n = int(lines[line_index]) sequence = list(map(int, lines[line_index + 1].split())) test_cases.append((n, sequence)) line_index += 2 return test_cases"},{"question":"You are given a list of integers representing the positions of delivery points along a straight line. A delivery company wants to place a certain number of distribution centers along this line such that each delivery point is within a given distance from at least one distribution center. The distribution centers can be placed at any coordinate along the line, not necessarily at integer positions. Develop an algorithm to determine the minimum number of distribution centers required to ensure that all delivery points are within the specified distance from at least one distribution center. Input The input consists of two lines: - The first line contains two integers n and k (1 ≤ n ≤ 2·10^5, 1 ≤ k ≤ 10^9) where n is the number of delivery points and k is the maximum distance a delivery point can be from a distribution center. - The second line contains n integers, representing the coordinates of the delivery points (1 ≤ xi ≤ 10^9). Output Output a single integer, the minimum number of distribution centers required. SAMPLE INPUT 1 6 2 1 2 3 7 8 9 SAMPLE OUTPUT 1 2 SAMPLE INPUT 2 5 1 10 20 30 40 50 SAMPLE OUTPUT 2 5","solution":"def min_distribution_centers(n, k, delivery_points): Calculates the minimum number of distribution centers required. :param n: int - number of delivery points :param k: int - maximum distance a delivery point can be from a distribution center :param delivery_points: list of int - coordinates of the delivery points :return: int - minimum number of distribution centers required if n == 0: return 0 delivery_points.sort() centers_needed = 0 i = 0 while i < n: centers_needed += 1 location = delivery_points[i] + k # Place a center within k distance from the current position while i < n and delivery_points[i] <= location: i += 1 # Skip all delivery points within k distance of the placed center if i < n: location = delivery_points[i - 1] + k # Adjust the location to ensure all points are within range while i < n and delivery_points[i] <= location: i += 1 # Continue to skip all delivery points within the adjusted range return centers_needed"},{"question":"A large company has decided to distribute a bonus to its employees. Each employee is assigned a rating which is represented in an array. The company decides to follow these rules for the distribution: 1. Each employee must receive at least one unit of bonus. 2. Employees with a higher rating get more bonus than their neighbors. 3. Employees with the same rating receive the same amount of bonus regardless of their position. You are given the array `ratings` representing the ratings of each employee. Implement a function to determine the minimum amount of bonus needed. -----Constraints----- - 1 leq len(ratings) leq 10^5 - 1 leq ratings[i] leq 10000 -----Input----- Input is given from Standard Input in the following format: ratings -----Output----- Print a single integer, the minimum amount of bonus needed. -----Sample Input----- [1,2,2] -----Sample Output----- 4 Employees have ratings: [1, 2, 2]. - Employee 1 has rating 1, gets 1 bonus. - Employee 2 has rating 2, gets more bonus than employee 1, let\'s say 2. - Employee 3 has the same rating as employee 2, so gets the same bonus as employee 2. So, the total bonus distributed is 1 + 2 + 1 = 4. -----Sample Input----- [1,0,2] -----Sample Output----- 5 Employees have ratings: [1, 0, 2]. - Employee 1 has rating 1, gets 2 bonuses because employee 2 should get less bonus. - Employee 2 has rating 0, gets 1 bonus. - Employee 3 has rating 2, gets 2 bonuses because employee 2 should get less bonus. So, the total bonus distributed is 2 + 1 + 2 = 5.","solution":"def min_bonus(ratings): n = len(ratings) if n == 0: return 0 # Initialize an array to store the bonuses with 1 as the minimum for each employee bonuses = [1] * n # Left to right scan: update bonuses to ensure each employee has more than left neighbor if needed for i in range(1, n): if ratings[i] > ratings[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Right to left scan: update bonuses to ensure each employee has more than right neighbor if needed for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) # Sum all bonuses to get the total amount distributed return sum(bonuses) # Example usage: # ratings = [1, 2, 2] # print(min_bonus(ratings)) # Output: 4 # ratings = [1, 0, 2] # print(min_bonus(ratings)) # Output: 5"},{"question":"Create a function that takes an integer array as input and returns a new array where each element at index i is the product of all the elements in the original array except the one at index i. ------ Input ------ - An integer array `arr` of length `n` where `n >= 2` and each element is an integer between -1000 and 1000. ------ Output ------ - An array of length `n` where each element at index `i` contains the product of all the numbers in the original array except the one at `i`. ------ Examples ------ Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [-1, 1, 0, -3, 3] Output: [0, 0, 9, 0, 0] ------ Constraints ------ - The algorithm should run in O(n) time. - Do not use division in your solution.","solution":"def product_except_self(arr): n = len(arr) result = [1] * n left_product = 1 right_product = 1 # Calculate left products for i in range(n): result[i] *= left_product left_product *= arr[i] # Calculate right products for i in range(n-1, -1, -1): result[i] *= right_product right_product *= arr[i] return result"},{"question":"Write a function that takes a string `s` and an integer `k` and returns a new string where each character in the original string is shifted `k` positions to the right in the alphabet. If `k` is negative, shift to the left. The shifting should wrap around the alphabet, meaning that after \'z\' comes \'a\'. Example 1: Input: s = \\"abc\\", k = 2 Output: \\"cde\\" Explanation: Shifting \'a\' by 2 positions gives \'c\', \'b\' gives \'d\', and \'c\' gives \'e\'. Example 2: Input: s = \\"xyz\\", k = 3 Output: \\"abc\\" Explanation: Shifting \'x\' by 3 positions gives \'a\', \'y\' gives \'b\', and \'z\' gives \'c\'. Example 3: Input: s = \\"hello\\", k = -1 Output: \\"gdkkn\\" Explanation: Shifting \'h\' by -1 positions gives \'g\', \'e\' gives \'d\', \'l\' gives \'k\', \'o\' gives \'n\'. Your Task: You don\'t need to read or print anything. Your task is to complete the function `shiftString(s, k)` which takes a string `s` and an integer `k` as input parameters and returns the shifted string. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= s.length <= 10^5 -10^5 <= k <= 10^5 The string `s` contains only lowercase English letters.","solution":"def shiftString(s, k): Shifts each character in the string `s` by `k` positions in the alphabet. result = [] for char in s: new_char = chr(((ord(char) - ord(\'a\') + k) % 26) + ord(\'a\')) result.append(new_char) return \'\'.join(result)"},{"question":"Alex is passionate about the stock market and spends a lot of time analyzing stock prices. He recently read about a famous algorithm called the \\"Maximum Subarray Problem\\" and he wants to use it to analyze the fluctuations in stock prices more efficiently. The maximum subarray problem involves finding the contiguous subarray within a one-dimensional numeric array which has the largest sum. Given an array of integers representing the changes in stock prices over a period of days, Alex wants to know the maximum profit he can achieve by only making one buy and one sell. Write a function to help Alex determine this maximum profit. **Input:** - The first line contains an integer `t`, the number of test cases. - Each test case starts with an integer `n`, the number of days. - The next line contains `n` integers representing the change in stock prices for each day. **Output:** For each test case, output a single integer representing the maximum profit Alex can achieve. **Constraints:** - 1 ≤ t ≤ 10^5 - 1 ≤ n ≤ 10^4 - -10^4 ≤ change in stock price ≤ 10^4 **Sample Input:** ``` 2 5 3 -2 5 -1 2 6 -1 2 4 -3 5 -2 ``` **Sample Output:** ``` 7 8 ``` **Explanation:** - In the first test case, the maximum profit can be achieved by buying on day 1 (price change = 3), and selling on day 5 (price change = 2), for a maximum profit of 3 + (-2) + 5 + (-1) + 2 = 7. - In the second test case, the maximum profit can be achieved by buying on day 2 (price change = 2), and selling on day 5 (price change = 5), for a maximum profit of 2 + 4 + (-3) + 5 = 8.","solution":"def max_subarray_sum(t, cases): Computes the maximum subarray sum for each test case. Parameters: t (int): The number of test cases. cases (list): A list containing t tuples. Each tuple contains an integer n and a list of n integers representing changes in stock prices. Returns: list: A list of integers representing the maximum profit for each test case. results = [] for n, prices in cases: max_ending_here = max_so_far = prices[0] for x in prices[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) results.append(max_so_far) return results"},{"question":"A spaceship is navigating a dangerous asteroid field. The field is a grid of size w by h, where each cell is either empty space (\'.\') or contains an asteroid (\'#\'). The spaceship starts at the top-left corner of the grid (1, 1) and needs to reach the bottom-right corner (w, h). However, the spaceship can only move to an empty space and can only move to adjacent cells (horizontally or vertically). Write a program to determine whether the spaceship can safely navigate from the start to the goal without hitting an asteroid. Input The input consists of multiple datasets. Each dataset starts with two integers w and h (1 ≤ w, h ≤ 100), which represent the width and height of the grid, respectively. The next h lines each contain w characters indicating the grid configuration (\'#\' or \'.\'). The input ends with two zeros in place of w and h. Output For each dataset, print \\"SAFE\\" if the spaceship can navigate to the bottom-right corner or \\"TRAPPED\\" if it cannot. Example Input 5 5 ..... .#. .#... .#. ..... 3 3 .#. # .#. 4 4 .... .#.. .#.. .... 0 0 Output SAFE TRAPPED SAFE","solution":"def is_safe_navigation(w, h, grid): Determine if the spaceship can navigate from (0,0) to (w-1, h-1) without hitting an asteroid. A BFS or DFS can be used to traverse the grid. :param w: int, grid width :param h: int, grid height :param grid: list of str, the grid itself :return: str, \\"SAFE\\" if navigable, \\"TRAPPED\\" otherwise if grid[0][0] == \'#\' or grid[h-1][w-1] == \'#\': return \\"TRAPPED\\" from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == w-1 and y == h-1: return \\"SAFE\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < w and 0 <= ny < h and (nx, ny) not in visited and grid[ny][nx] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) return \\"TRAPPED\\" def process_datasets(datasets): results = [] for w, h, grid in datasets: results.append(is_safe_navigation(w, h, grid)) return results"},{"question":"Create a program that simulates a simple bank account system. In this system, the user can create an account, deposit money, withdraw money, and check the account balance. # Input / output format Implement the following commands that can be provided in the command line: 1. CREATE ACCOUNT -> Create a new account with an initial balance of 0. 2. DEPOSIT x -> Deposit an amount `x` (an integer) to the account. `x` is guaranteed to be a positive integer. 3. WITHDRAW x -> Withdraw an amount `x` (an integer) from the account. `x` is guaranteed to be a positive integer. 4. BALANCE -> Print the current balance of the account. The input will be a series of commands as described above, one per line. The program should execute each command and produce the appropriate result. The program should terminate upon encountering the end of input (EOF). # Constraints 1. The account balance cannot go negative. If a WITHDRAW operation would cause the balance to go negative, print \\"Insufficient funds\\" instead. 2. There will be at most 100 commands. # Example Input ``` CREATE ACCOUNT DEPOSIT 100 BALANCE WITHDRAW 50 BALANCE WITHDRAW 60 ``` Output ``` ACCOUNT CREATED DEPOSITED: 100 BALANCE: 100 WITHDRAWN: 50 BALANCE: 50 Insufficient funds ``` # Explanation - The `CREATE ACCOUNT` command creates a new account and initializes the balance to 0. - The `DEPOSIT 100` command adds 100 to the balance. - The `BALANCE` command prints the current balance which is 100. - The `WITHDRAW 50` command subtracts 50 from the balance. - The `BALANCE` command prints the current balance which is now 50. - The `WITHDRAW 60` command fails because it would reduce the balance below zero, so \\"Insufficient funds\\" is printed.","solution":"class BankAccount: def __init__(self): self.balance = 0 def deposit(self, amount): self.balance += amount return f\\"DEPOSITED: {amount}\\" def withdraw(self, amount): if self.balance >= amount: self.balance -= amount return f\\"WITHDRAWN: {amount}\\" else: return \\"Insufficient funds\\" def get_balance(self): return f\\"BALANCE: {self.balance}\\" def execute_commands(commands): account = None outputs = [] for command in commands: if command == \\"CREATE ACCOUNT\\": account = BankAccount() outputs.append(\\"ACCOUNT CREATED\\") elif account: if command.startswith(\\"DEPOSIT\\"): _, amount = command.split() outputs.append(account.deposit(int(amount))) elif command.startswith(\\"WITHDRAW\\"): _, amount = command.split() outputs.append(account.withdraw(int(amount))) elif command == \\"BALANCE\\": outputs.append(account.get_balance()) return outputs"},{"question":"Write a function `SumWithoutMax` which takes an array of integers as input and returns the sum of the array elements excluding the maximum value. If there are multiple occurrences of the maximum value, only exclude one occurrence. If the array is empty or contains one element, return 0.","solution":"def SumWithoutMax(arr): Returns the sum of array elements excluding the maximum value. If the array is empty or contains one element, return 0. If there are multiple occurrences of the maximum value, only exclude one. if len(arr) <= 1: return 0 max_value = max(arr) max_count = arr.count(max_value) total_sum = sum(arr) return total_sum - max_value"},{"question":"The city of Metropolis is organizing a grand marathon event. The event has multiple checkpoints, and runners need to pass through these checkpoints in a sequential order to complete the marathon. Each runner has a quota of energy that allows them to run a certain number of checkpoints before needing to rest. The city organizers want to find out how many runners can complete the marathon with their given energy levels. For the purpose of this problem, you are given: - The number of checkpoints in the marathon, K. - The number of runners, N. - Each runner\'s energy quota, which indicates the maximum number of checkpoints (or distance in terms of checkpoints) they can cover without a break. The aim is to determine how many runners can finish the entire marathon without exceeding their energy quota. Assume that a runner can only complete the marathon if their energy quota is at least equal to the number of checkpoints K. -----Input:----- The first line of the input will contain a single integer K indicating the number of checkpoints in the marathon. The second line will contain a single integer N indicating the number of runners participating in the marathon. The third line contains N integers E_1, E_2, ..., E_N where E_i indicates the energy quota of the i-th runner. -----Output:----- Your output must consist of a single line containing a single integer M, indicating the number of runners that can complete the marathon. -----Constraints:----- - 1 leq K leq 100000. - 1 leq N leq 100000. - 1 leq E_i leq 1000000. -----Sample input:----- 10 5 12 8 15 10 7 -----Sample output:----- 3","solution":"def count_runners_can_finish(K, N, energies): Determines the number of runners that can complete the marathon. Arguments: K : int - the number of checkpoints in the marathon. N : int - the number of runners. energies : list of int - the energy quotas of the runners. Returns: int - the number of runners that can complete the marathon. count = 0 for energy in energies: if energy >= K: count += 1 return count"},{"question":"Your task is to write a program that calculates the number of distinct prime factors for a series of integers. Input The input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of a single integer n (2 <= n <= 10000). Output For each dataset, print the number of distinct prime factors of n. Example Input 12 15 20 0 Output 2 2 2 Explanation - 12 has two distinct prime factors: 2 and 3. - 15 has two distinct prime factors: 3 and 5. - 20 has two distinct prime factors: 2 and 5.","solution":"def distinct_prime_factors(n): Returns the number of distinct prime factors of the integer n. def is_prime(x): if x <= 1: return False if x <= 3: return True if x % 2 == 0 or x % 3 == 0: return False i = 5 while i * i <= x: if x % i == 0 or x % (i + 2) == 0: return False i += 6 return True prime_factors = set() for i in range(2, n + 1): if is_prime(i) and n % i == 0: prime_factors.add(i) return len(prime_factors) def count_distinct_prime_factors(numbers): Takes a list of numbers and returns a list of the number of distinct prime factors for each number. return [distinct_prime_factors(n) for n in numbers]"},{"question":"There is an island that consists of N houses connected by M bidirectional bridges. Every house has a certain number of residents living in it. You are supposed to answer a few queries on this island\'s house-bridge structure. In each query, you are provided two integers H1 and H2, representing two different houses. Your task is to find a path from H1 to H2 such that the sum of the number of residents in all houses along that path (including H1 and H2) is minimized. If there are multiple paths with the same minimum sum, choose the path with the fewest number of houses. -----Input----- - First line contains two integers N - number of houses and M - number of bridges. - Second line contains N integers, the i-th integer represents the number of residents in the i-th house. - The next M lines contain two integers each, representing the houses connected by a bridge. - Next line contains an integer Q - number of queries. - Following Q lines each contain two integers H1 and H2. -----Output----- For each query, output a single integer - the minimum sum of the number of residents along a path from H1 to H2. -----Constraints:----- - 1 <= Number of houses <= 1000 - 1 <= Number of bridges <= 10000 - 1 <= Number of residents in each house <= 100 - 1 <= Number of queries <= 1000 -----Sample Input----- 6 7 10 20 30 40 50 60 1 2 1 3 2 4 3 4 3 5 4 5 5 6 3 1 6 2 3 4 5 -----Sample Output----- 210 90 120 -----Explanation:----- For query 1 (1 to 6): The possible paths from house 1 to house 6 are: - 1->2->4->5->6 with the sum of residents = 10+20+40+50+60 = 180 - 1->3->4->5->6 with the sum of residents = 10+30+40+50+60 = 190 - 1->3->5->6 with the sum of residents = 10+30+50+60 = 150 The optimal path here is 1->3->5->6 with the sum = 150. For query 2 (2 to 3): The possible paths from house 2 to house 3 are: - 2->1->3 with the sum of residents = 20+10+30 = 60 - 2->4->3 with the sum of residents = 20+40+30 = 90 The optimal path is 2->1->3 with the sum = 60. For query 3 (4 to 5): The possible paths from house 4 to house 5 are: - 4->2->1->3->5 with the sum of residents = 40+20+10+30+50 = 150 - 4->5 with the sum of residents = 40+50 = 90 The optimal path is 4->5 with the sum = 90.","solution":"import heapq from collections import defaultdict, deque def find_min_residents_sum(N, M, residents, bridges, Q, queries): def dijkstra(start, end): # Min-heap priority queue heap = [(residents[start - 1], start)] # (current_residents_sum, current_house) visited = set() dist = {i: float(\'inf\') for i in range(1, N + 1)} dist[start] = residents[start - 1] while heap: curr_residents_sum, curr_house = heapq.heappop(heap) if curr_house == end: return curr_residents_sum if curr_house in visited: continue visited.add(curr_house) for neighbor in graph[curr_house]: new_resident_sum = curr_residents_sum + residents[neighbor - 1] if new_resident_sum < dist[neighbor]: dist[neighbor] = new_resident_sum heapq.heappush(heap, (new_resident_sum, neighbor)) return float(\'inf\') # No path found # Create graph graph = defaultdict(list) for a, b in bridges: graph[a].append(b) graph[b].append(a) results = [] for h1, h2 in queries: results.append(dijkstra(h1, h2)) return results"},{"question":"A large computer network consists of N computers connected in an acyclic, undirected graph (i.e., a tree). Each edge in the graph has an associated cost representing the latency between the two computers it connects. The root computer is always computer 1, and we need to consider paths between 1 and every other computer in the network. Chuck Norris wants to install special software on exactly K computers, including the root, to minimize the latency from the root to all other computers that have this special software. The special software reduces the latency of the path through the installed computers significantly—specifically, the latency of any path between two adjacent special software computers is reduced to zero. Given the structure of the network and the costs associated with each edge, help Chuck determine the minimum total latency from the root to all K selected computers. -----Input:----- - The first line has two integers N (number of computers) and K (number of computers with special software). - The next N-1 lines each contain three integers u, v, and c representing an undirected edge between computers u and v with latency c. -----Output:----- - Print a single integer, the minimum total latency from the root (computer 1) to all K chosen computers. -----Constraints :----- - 2 leq N leq 10^5 - 1 leq K leq N - 1 leq u, v leq N - 1 leq c leq 10^4 - The graph is guaranteed to be a tree. -----Sample input :----- 6 3 1 2 1 1 3 2 2 4 1 2 5 2 5 6 1 -----Sample output :----- 3 -----Explanation:----- One possible optimal selection of computers to install the software would be computers 1, 2, and 5. From the root: - The latency from 1 to 2 is reduced to 0. - The latency from 1 to 5 follows the path: 1 -> 2 -> 5 with a reduced latency of 2 (since 1 to 2 is reduced to 0). Total latency to computers with special software is thus 3.","solution":"import heapq def dijkstra(tree, number_of_nodes, start): distances = {node: float(\'infinity\') for node in range(1, number_of_nodes + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in tree[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def minimum_total_latency(N, K, connections): if K == 1: return 0 tree = {i: [] for i in range(1, N + 1)} for u, v, c in connections: tree[u].append((v, c)) tree[v].append((u, c)) distances_from_root = dijkstra(tree, N, 1) distances = sorted(distances_from_root.values()) return sum(distances[:K]) # Example usage of the function # print(minimum_total_latency(6, 3, [(1, 2, 1), (1, 3, 2), (2, 4, 1), (2, 5, 2), (5, 6, 1)]))"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},F={class:"card-container"},j={key:0,class:"empty-state"},P=["disabled"],Y={key:0},R={key:1};function M(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):h("",!0)]),t("div",F,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",j,' No results found for "'+l(a.searchQuery)+'". ',1)):h("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",Y,"See more"))],8,P)):h("",!0)])}const z=d(A,[["render",M],["__scopeId","data-v-bfd49b9b"]]),U=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/18.md","filePath":"deepseek/18.md"}'),L={name:"deepseek/18.md"},B=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{U as __pageData,B as default};
