import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(a,e,h,m,r,s){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const j=d(q,[["render",O],["__scopeId","data-v-33c4104c"]]),Y=JSON.parse('[{"question":"You are given a list of words and a list of queries. Each query consists of one character, and for each query, you have to find the first word in the list that starts with the given character. If no such word exists, return \\"Not found\\". Write a function that processes the list of words and the queries effectively. Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 10^5), the number of words and the number of queries respectively. - The next n lines contain one word each. - The next q lines contain one character each (a single lowercase Latin letter). Output: - For each query, print the first word that starts with the given character or \\"Not found\\" if no such word exists. Example: Input: 5 3 apple banana apricot grape avocado a b c Output: apple banana Not found","solution":"def process_queries(words, queries): Processes words list and queries list to find the first word that starts with the query character. Args: words -- list of words queries -- list of single character queries Returns: List of results for each query result = [] word_dict = {} # Populate the dictionary with the first occurrence of each starting letter for word in words: first_letter = word[0] if first_letter not in word_dict: word_dict[first_letter] = word # Find and prepare the results for each query for query in queries: result.append(word_dict.get(query, \\"Not found\\")) return result"},{"question":"A library system maintains records of books and their circulation statuses. Each book is represented by an integer ID and has a record of when it was borrowed and returned. The system tracks the books in the form of a list of events, where each event can either be a borrowing event or a returning event. Your task is to write a program that determines the maximum number of books that were borrowed from the library at any single point in time. The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of events. Each of the next n lines describes an event. Each event is composed of an integer t (1 ≤ t ≤ 10^6) representing the timestamp of the event, followed by a character type that can be either \'B\' (borrow) or \'R\' (return), and an integer ID (1 ≤ ID ≤ 10^9) representing the ID of the book. Output a single integer — the maximum number of books that were borrowed at the same time. # Example Input ``` 5 1 B 101 2 B 102 3 R 101 4 B 103 5 R 102 ``` Output ``` 2 ``` Explanation At timestamp 2 and 4, two books are borrowed at the same time.","solution":"def max_books_borrowed_at_once(n, events): Determines the maximum number of books borrowed from the library at a single point in time. :param n: Integer, number of events :param events: List of tuples, each containing a timestamp, a character (\'B\' or \'R\'), and an integer book ID :return: Integer, the maximum number of books borrowed at the same time borrowed_books = set() max_borrowed = 0 for time, event, book_id in events: if event == \'B\': borrowed_books.add(book_id) elif event == \'R\': borrowed_books.discard(book_id) max_borrowed = max(max_borrowed, len(borrowed_books)) return max_borrowed"},{"question":"The robotics team at a tech university is facing a problem with the delivery of supplies using drones. The campus can be represented as a grid of size `n x m`, where some cells contain obstacles and others are open spaces. Each drone can move up, down, left, or right, but cannot move diagonally. The drones need to deliver supplies to specific target cells from a starting cell. The team wants to find the shortest path for each delivery without hitting any obstacles. Each test case consists of the grid size `n` and `m`, the grid representation with obstacles and open spaces, the start cell `(sx, sy)`, and the target cell `(tx, ty)`. An obstacle is denoted by `\'#\'`, and an open space is denoted by `\'.\'`. You need to determine the shortest number of moves required for the drone to reach the target cell from the start cell. If it is not possible to reach the target cell, output `-1`. The input format is: - The first line contains an integer `t`, the number of test cases. - For each test case: - The first line contains two integers `n` and `m` (1 <= n, m <= 1000), the size of the grid. - Each of the next `n` lines contains a string of length `m` representing the grid. - The next line contains four integers `sx`, `sy`, `tx`, `ty` (0 <= sx, sy, tx, ty < n, m), representing the start and target cell coordinates. The output format is: - For each test case, output a single integer representing the shortest number of moves required for the drone to reach the target cell, or `-1` if it is impossible. Example input: ``` 2 4 4 .... .#.. .... .... 0 0 3 3 3 0 0 3 4 4 #. #..# 0 0 2 2 0 1 2 2 ``` Example output: ``` 6 -1 ``` Explain the example: - In the first test case, the drone can move from (0, 0) to (3, 3) in 6 moves. - In the second test case, it is impossible to reach the target cell from the start cell.","solution":"from collections import deque def shortest_path(grid, start, target): Returns the shortest path from start to target in a grid, avoiding obstacles. If no path is found, returns -1. Parameters: grid (list of list of str): Grid representation with \'.\' for open spaces and \'#\' for obstacles. start (tuple of int): The (x, y) starting coordinate. target (tuple of int): The (x, y) target coordinate. Returns: int: The shortest number of moves required, or -1 if the target is unreachable. n, m = len(grid), len(grid[0]) sx, sy = start tx, ty = target if grid[sx][sy] == \'#\' or grid[tx][ty] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(sx, sy, 0)]) # (current_x, current_y, current_distance) visited[sx][sy] = True while queue: x, y, dist = queue.popleft() if (x, y) == (tx, ty): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1 def process_test_cases(t, test_cases): Handles multiple test cases for the shortest path calculation. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains (n, m, grid, start, target). Returns: list: The results of the shortest path calculation for each test case. results = [] for case in test_cases: n, m, grid, (sx, sy), (tx, ty) = case result = shortest_path(grid, (sx, sy), (tx, ty)) results.append(result) return results # Example usage if __name__ == \\"__main__\\": t = 2 test_cases = [ (4, 4, [\\"....\\", \\".#..\\", \\"....\\", \\"....\\"], (0, 0), (3, 3)), (4, 4, [\\"\\", \\"#.\\", \\"#..#\\", \\"\\"], (0, 0), (2, 2)) ] results = process_test_cases(t, test_cases) for res in results: print(res)"},{"question":"Alina likes creating new sequences. Recently, she became interested in sequences of integers that match a set of specific rules. Alina defines a \\"balanced sequence\\" as a sequence that fulfills the following conditions: 1. The length of the sequence is even, denoted by (2n). 2. The sequence contains exactly (n) numbers equal to 1 and (n) numbers equal to -1. 3. Any prefix of the sequence has a sum that is greater than or equal to zero. For example, the sequences [1, -1, 1, -1], [1, 1, -1, -1], and [1, 1, 1, -1, -1, -1] are balanced, but the sequences [1, -1, -1, 1], [-1, 1, 1, -1], and [1, -1, 1] are not. Alina\'s challenge for you is to determine whether a given sequence is a balanced sequence. The first line of the input contains an integer (t) (1 ≤ (t) ≤ 100) — the number of test cases. Each test case consists of two lines. The first line of each test case contains an even integer (2n) (2 ≤ (2n) ≤ 50) — the length of the sequence. The second line contains (2n) integers (a_1, a_2, ..., a_{2n}) denoting the sequence (each integer in the sequence is either 1 or -1). For each test case, print \\"YES\\" if the given sequence is balanced, and \\"NO\\" otherwise. # Example Input ``` 3 4 1 -1 1 -1 4 1 -1 -1 1 6 1 1 1 -1 -1 -1 ``` Output ``` YES NO YES ``` # Note - In the first test case, [1, -1, 1, -1] is a balanced sequence, as any prefix of the sequence does not have a negative sum. - In the second test case, [1, -1, -1, 1] is not a balanced sequence because the prefix [1, -1, -1] has a sum of -1. - In the third test case, [1, 1, 1, -1, -1, -1] is a balanced sequence.","solution":"def is_balanced_sequence(t, test_cases): results = [] for case in test_cases: length = case[0] sequence = case[1] # Check if the counts of 1s and -1s are equal if sequence.count(1) != length // 2 or sequence.count(-1) != length // 2: results.append(\\"NO\\") continue # Check if every prefix sum is non-negative prefix_sum = 0 balanced = True for num in sequence: prefix_sum += num if prefix_sum < 0: balanced = False break if balanced: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A company wants to track the usage of two types of their products over a period of time. They have gathered a list of events where each event is recorded as a pair of integers. The first integer represents the product type (either 1 or 2), and the second integer represents the number of items of the product type in that particular event. Your task is to determine the total number of items for each product type after processing all the events. You are given an integer `n` which represents the number of events, followed by `n` pairs of integers. For each pair, the first integer is `1` or `2` indicating the product type, and the second integer is a positive integer representing the number of items in that event. The first line of the input contains a single integer `n` (1 le n le 10^5) — the number of events. The next `n` lines each contain two integers `t` (1 le t le 2) and `x` (1 le x le 10^6), where `t` is the product type and `x` is the number of items in that event. Output two integers: the total number of items for product type `1` and the total number of items for product type `2`. # Example Input ``` 5 1 10 2 5 1 3 2 7 1 2 ``` Output ``` 15 12 ``` # Explanation In this example, there are 5 events. The total number of items for product type `1` is `10 + 3 + 2 = 15`, and the total number of items for product type `2` is `5 + 7 = 12`.","solution":"def calculate_totals(n, events): Calculate the total number of items for each product type. Args: n : int : the number of events events : list of tuples : each tuple contains two integers t and x Returns: (int, int) : total number of items for product type 1 and product type 2 total_type_1 = 0 total_type_2 = 0 for event in events: t, x = event if t == 1: total_type_1 += x elif t == 2: total_type_2 += x return total_type_1, total_type_2"},{"question":"The kingdom of Elvenland consists of a series of mystical, interconnected islands. For centuries, the elves have used magical bridges to travel between islands. However, the impending threat of a dragon attack has forced the elves to reconsider their connectivity to ensure escape routes are always available. The problem is given in terms of a graph where each island is a node and each magical bridge is an edge between two nodes. The head mage of Elvenland wants to ensure that even if one bridge is destroyed, the islands will still remain connected. Given the current configuration of islands and bridges, determine whether or not the destruction of any single bridge will still keep all islands connected. The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) — the number of islands and the number of bridges, respectively. Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b), representing a magical bridge between islands a and b. Print \\"YES\\" if the destruction of any single bridge leaves the islands connected, otherwise print \\"NO\\". **Example:** Input: ``` 4 4 1 2 2 3 3 4 4 1 ``` Output: ``` YES ``` Input: ``` 4 3 1 2 2 3 3 4 ``` Output: ``` NO ```","solution":"def is_connected_after_bridge_destruction(n, m, bridges): from collections import defaultdict import sys sys.setrecursionlimit(100000) def dfs(v, visited, graph): stack = [v] while stack: node = stack.pop() if node not in visited: visited.add(node) for neighbour in graph[node]: if neighbour not in visited: stack.append(neighbour) def is_connected(graph): visited = set() dfs(1, visited, graph) return len(visited) == n # Create the graph from the given bridges graph = defaultdict(list) for a, b in bridges: graph[a].append(b) graph[b].append(a) # Check connectivity for each bridge removal for a, b in bridges: graph[a].remove(b) graph[b].remove(a) if not is_connected(graph): return \\"NO\\" # restore the graph graph[a].append(b) graph[b].append(a) return \\"YES\\""},{"question":"You have been given a list of integers representing the number of steps you need to ascend a series of staircases. Each stair can only be climbed one step at a time, but they can vary in height. You need to determine the minimal number of steps required to climb all the staircases considering you can combine ascents of consecutive staircases. You are given an integer `n` representing the number of staircases and an array `h` where `h[i]` denotes the height of the `i`-th staircase in terms of steps. You need to return the minimal number of steps required to climb all the staircases if you can combine climbing two consecutive staircases into a single continuous ascent. # Input - The first line contains a single integer `n` (1 leq n leq 100000) — the number of staircases. - The second line contains `n` integers `h_1, h_2, ..., h_n` (1 leq h_i leq 1000) — the heights of the staircases. # Output - Print a single integer — the minimal number of steps required to climb all the staircases. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 9 ``` Input ``` 3 6 2 8 ``` Output ``` 14 ``` # Explanation In the first example, you can climb all the staircases in a single continuous ascent (1+2+3+4+5 = 15 steps). However, since we can only combine consecutive ascents, we could climb the staircases in the following steps as minimal steps: - Climb the first two consecutive steps together: (1+2 = 3) - Skip the third step: (3 remains 3) - Climb the fourth and fifth steps together: (4+5 = 9) This adds up to 3+3+9 = 15 But the minimal steps required are 9 for the optimal answer.","solution":"def min_steps_to_climb(n, h): Calculate the minimal number of steps required to climb all staircases. Args: n : int : the number of staircases h : List[int] : the heights of the staircases Returns: int : the minimal number of steps required # The minimum number of steps required is simply the height of the tallest staircase. return max(h)"},{"question":"You are the manager of a warehouse and need to track the inventory of several products. Each product has an integer ID from 1 to n. Initially, the warehouse inventory is empty. You will be given q events, each of which could be one of the following types: 1. Restock: Add a certain number of units to the inventory of a product. 2. Dispatch: Remove a certain number of units from the inventory of a product. If there are not enough units, remove all available units. 3. Query: Find out how many units of a product are currently in the warehouse. Your task is to process these events and respond to the queries. Each event will be given in one of the following formats: - For a restock event: `\\"1 p u\\"`, where p is the product ID (1 ≤ p ≤ n) and u is the number of units to be added (1 ≤ u ≤ 10^5). - For a dispatch event: `\\"2 p u\\"`, where p is the product ID (1 ≤ p ≤ n) and u is the number of units to be removed (1 ≤ u ≤ 10^5). - For a query event: `\\"3 p\\"`, where p is the product ID (1 ≤ p ≤ n). The first line of input contains two integers n and q (1 ≤ n, q ≤ 10^5), the number of products and the number of events respectively. Each of the next q lines describes an event in the format specified above. For each query event, print the number of units currently in the warehouse for the given product. Each answer should be printed on a new line. # Example Input ``` 5 6 1 3 100 1 2 50 3 3 2 3 30 3 3 3 2 ``` Output ``` 100 70 50 ``` Explanation: 1. `1 3 100`: Adds 100 units to product 3. 2. `1 2 50`: Adds 50 units to product 2. 3. `3 3`: Queries the current units of product 3, which is 100. 4. `2 3 30`: Removes 30 units from product 3, leaving 70 units. 5. `3 3`: Queries the current units of product 3, which is 70. 6. `3 2`: Queries the current units of product 2, which is 50.","solution":"def process_events(n, q, events): inventory = [0] * (n + 1) results = [] for event in events: parts = event.split() action = int(parts[0]) product_id = int(parts[1]) if action == 1: units = int(parts[2]) inventory[product_id] += units elif action == 2: units = int(parts[2]) inventory[product_id] = max(inventory[product_id] - units, 0) elif action == 3: results.append(inventory[product_id]) return results"},{"question":"You are given an array of integers where each integer represents the height of a person standing in a queue. Each person in the queue comes with a condition that they are uncomfortable if certain conditions are met. The main condition is that a person is uncomfortable if there are more than \'k\' people taller than themselves standing in front of them in the queue. Your task is to rearrange the people in the queue such that no one ends up being uncomfortable, or determine that it is impossible to satisfy this condition. Input: - The first line contains two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ n-1) — the number of people and the maximum number of taller people that can be in front of a person without them being uncomfortable. - The second line contains n integers: h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the people. Output: - If it is possible to rearrange the queue such that no person is uncomfortable, print the rearranged heights in a single line. If there are multiple solutions, any of them will be accepted. - If it is not possible to rearrange the queue, print \'NO\'. Example: Input: 6 2 6 3 5 4 2 1 Output: 1 2 3 4 5 6 Example: Input: 5 0 5 4 3 2 1 Output: NO In the first example, you can rearrange the heights in ascending order to ensure that no one is uncomfortable. In the second example, if k=0, there is no way to rearrange the heights to meet the requirement, since the first person would always have people taller than them, making it impossible to meet the given condition.","solution":"def rearrange_queue(n, k, heights): Rearranges the queue such that no person is uncomfortable, or determines that it is impossible. Each person is uncomfortable if there are more than \'k\' people taller than themselves standing in front of them. :param n: Number of people in the queue :param k: Maximum number of taller people that can be in front :param heights: List of heights of the people in the queue :return: List of rearranged heights or \'NO\' if it\'s not possible if k == 0: # If k is 0, and n > 1, there\'s no way to rearrange the queue to meet the requirement. if n > 1: return \'NO\' else: return heights # Sort the heights in ascending order heights.sort() return heights"},{"question":"You are organizing a local sports event, where athletes participate in n different events numbered from 1 to n. Each athlete achieves a certain score in each event. The scores are provided in a matrix, where the score of the i-th athlete in the j-th event is given by score[i][j]. Your task is to determine the top athlete in each event. If multiple athletes secure the highest score in an event, consider the athlete with the smallest index as the top athlete. Write a program that, given the scores of athletes, identifies the top athlete for each event. **Input:** - The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of athletes and the number of events. - The next n lines each contain m integers, where the j-th integer in the i-th line represents the score[i][j] (0 ≤ score[i][j] ≤ 100). **Output:** - Print m integers separated by spaces. The j-th integer should be the index (1-based) of the athlete who is the top performer in the j-th event. **Example:** **Input:** ``` 3 4 10 15 20 25 25 10 25 10 20 25 30 5 ``` **Output:** ``` 2 3 3 1 ``` **Explanation:** - In the 1st event, athlete 2 scores the highest (25). - In the 2nd event, athlete 3 scores the highest (25). - In the 3rd event, athlete 3 scores the highest (30). - In the 4th event, athlete 1 scores the highest (25). Thus, the output is \\"2 3 3 1\\".","solution":"def top_athletes(n, m, scores): Determines the top athlete for each event. Args: n (int): number of athletes. m (int): number of events. scores (list of list of int): matrix of scores where scores[i][j] is the score of the i-th athlete in the j-th event. Returns: list of int: list of indices of the top athletes for each event. top_athletes_indices = [] for event in range(m): max_score = -1 top_athlete_index = -1 for athlete in range(n): if scores[athlete][event] > max_score: max_score = scores[athlete][event] top_athlete_index = athlete + 1 top_athletes_indices.append(top_athlete_index) return top_athletes_indices"},{"question":"In a far away land, there are two cities connected by a highway that passes through several other cities. You\'ve been tasked to find the minimum time required to travel from the starting city to the destination city given the time it takes to travel between each pair of connected cities. The highway network is designed in such a way that there are no cycles, i.e., the network forms a tree. Each city is represented as a node and the roads connecting the cities are represented as edges with weights denoting the travel time between them. The goal is to determine the minimum travel time between two specified cities in this highway network. The first line of input contains an integer n (2 leq n leq 10^5) — the number of cities. Each of the next n-1 lines contains three integers u, v, and w, where u and v are the cities connected by a road with travel time w (1 leq u, v leq n, u ne v, 1 leq w leq 10^4). The last line contains two integers s and d — the starting city and the destination city (1 leq s, d leq n). Output a single integer — the minimum time required to travel from city s to city d. # Example **Input:** ``` 6 1 2 4 1 3 2 2 4 7 2 5 1 3 6 3 1 5 ``` **Output:** ``` 5 ``` In this example, we can travel from city 1 to city 5 via city 2, with a total travel time of 4 + 1 = 5.","solution":"from collections import defaultdict import heapq def minimum_travel_time(n, edges, start_city, dest_city): # Build the graph graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Use Dijkstra\'s algorithm to find the shortest path from start_city to dest_city pq = [(0, start_city)] # (current cost, current node) visited = set() min_times = {i: float(\'inf\') for i in range(1, n + 1)} min_times[start_city] = 0 while pq: current_time, node = heapq.heappop(pq) if node in visited: continue visited.add(node) if node == dest_city: return current_time for neighbor, time in graph[node]: if neighbor not in visited: new_time = current_time + time if new_time < min_times[neighbor]: min_times[neighbor] = new_time heapq.heappush(pq, (new_time, neighbor)) return float(\'inf\') # if there\'s no path # Example of usage: # Input parsing would be done in actual implementation based on the problem # here is the raw input provided as arguments for testing n = 6 edges = [ (1, 2, 4), (1, 3, 2), (2, 4, 7), (2, 5, 1), (3, 6, 3) ] start_city = 1 dest_city = 5 print(minimum_travel_time(n, edges, start_city, dest_city)) # Output should be 5"},{"question":"Marselio is working on a new encryption algorithm. The algorithm operates by taking a string of lowercase English letters and performing a series of transformation steps on it. Each step consists of replacing a contiguous subsequence of the string with its reversed form. Marselio is interested in understanding the potential of his algorithm to generate palindromic strings. A palindrome is a string that reads the same backward as forward. Marselio wants to determine if it is possible to perform a series of transformation steps to convert a given string into a palindrome. You need to help Marselio by writing a program that checks if a given string can be transformed into a palindrome by reversing some of its subsequences any number of times. The input format is as follows: - The first line of input contains an integer t (1 leq t leq 10^5) – the number of test cases. - Each of the next t lines contains a string s (1 leq |s| leq 2 cdot 10^5), where |s| denotes the length of the string. The sum of lengths of all strings does not exceed 2 cdot 10^5. For each test case, output \\"YES\\" if the string can be transformed into a palindrome using the described operations, otherwise output \\"NO\\". # Input ``` 3 ababc abccba abcd ``` # Output ``` YES YES NO ``` # Explanation - In the first test case, \\"ababc\\" can be transformed to \\"abcba\\" which is a palindrome. - The second test case \\"abccba\\" is already a palindrome. - In the third test case, \\"abcd\\" cannot be transformed into a palindrome. Note: Each test case is independent and should be checked separately.","solution":"def can_be_transformed_to_palindrome(s): Determines if a given string can be transformed into a palindrome by reversing substrings. from collections import Counter counter = Counter(s) odd_count = sum(1 for count in counter.values() if count % 2 != 0) # A string can be rearranged into a palindrome if at most one character has an odd count. return odd_count <= 1 def process_test_cases(t, strings): results = [] for s in strings: if can_be_transformed_to_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # The main function that handles reading the input and calling the processing function. def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) strings = data[1:] results = process_test_cases(t, strings) for result in results: print(result) # Uncomment the following lines to run the main function if executing the script directly: # if __name__ == \\"__main__\\": # main()"},{"question":"A group of friends are planning a movie marathon night where they want to watch a set of movies back-to-back. Each friend has a certain preference for the movies they want to watch, and some movies are more popular than others. Given the list of movies and the friends’ preferences, the goal is to arrange the movies in such an order that maximizes the total satisfaction among all friends. Each friend has a list of movies they want to watch, and each movie in their list has a satisfaction score from 1 to 10 (1 being the lowest and 10 being the highest). The total satisfaction score of a movie marathon night is the sum of individual satisfaction scores for the movies watched by each friend. You are given the number of friends, the number of movies, and each friend’s satisfaction list for the movies. Determine the movie order that maximizes the total satisfaction score. The input consists of: - An integer n (1 ≤ n ≤ 50): the number of friends. - An integer m (1 ≤ m ≤ 2000): the number of movies. - The next n lines each contain m integers: the satisfaction score of the i-th friend for the j-th movie. Output the order of movies that maximizes the total satisfaction score. If there are multiple possible orders, print any one of them. Example: Input: 3 5 10 1 3 9 7 4 8 6 5 2 7 2 9 10 3 Output: 4 5 1 3 2 (or any other permutation that achieves maximum satisfaction) Explanation: In the given example, arranging the movies in the order [4, 5, 1, 3, 2] might yield the highest satisfaction score. Calculate total satisfaction for each permutation and choose the one with the maximum score.","solution":"def movie_marathon_order(n, m, satisfaction_scores): Determine the order of movies that maximizes total satisfaction. Args: n: int - number of friends m: int - number of movies satisfaction_scores: List of lists - each sublist is satisfaction scores of a friend for all movies Returns: List[int] - order of movies (1-indexed) that maximizes satisfaction # Calculate the total satisfaction for each movie total_satisfaction = [0] * m for friend_scores in satisfaction_scores: for j in range(m): total_satisfaction[j] += friend_scores[j] # Get list of movies indexed from 0 to m-1 movies = list(range(m)) # Sort movies based on their total satisfaction in descending order movies.sort(key=lambda x: total_satisfaction[x], reverse=True) # Convert to 1-indexed result = [movie + 1 for movie in movies] return result"},{"question":"In a distant future, networking and communication play a critical role in the infrastructure of the cities in the Digitonic Republic. The government needs to ensure that the communication network between cities is reliable and efficient, even if some direct connections fail. The Ministry of Communication has identified n cities, numbered 1 to n, and m direct bidirectional communication cables between some pairs of them. Cities can communicate directly if there\'s a cable between them, or indirectly through a series of cables connecting them. However, some cables are more critically important than others. A cable is considered to be redundant if removing it still allows all cities to communicate with each other through other cables. The Minister of Communication wants to know the number of critical cables whose removal would disrupt the communication between any pair of cities. Given the information about the cities and the cables, determine the number of critical cables. The first line of input contains two integers n and m (2 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5), representing the number of cities and the number of cables, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a bidirectional cable between city u and city v. There will be at most one cable between any pair of cities. Output a single integer, the number of critical cables in the network. # Sample Input ``` 4 4 1 2 2 3 3 4 4 2 ``` # Sample Output ``` 1 ``` # Explanation In the sample input, removing the cable between city 2 and city 3 will result in cities being unable to communicate with each other. Therefore, there is only one critical cable in the given network.","solution":"def find_critical_cables(n, m, connections): from collections import defaultdict def dfs(node, parent, visited, disc, low, bridges, adj, time): visited[node] = True disc[node] = low[node] = time[0] time[0] += 1 for neighbor in adj[node]: if neighbor == parent: continue if not visited[neighbor]: dfs(neighbor, node, visited, disc, low, bridges, adj, time) low[node] = min(low[node], low[neighbor]) if low[neighbor] > disc[node]: bridges.append((node, neighbor)) else: low[node] = min(low[node], disc[neighbor]) adj = defaultdict(list) for u, v in connections: adj[u].append(v) adj[v].append(u) visited = [False] * (n + 1) disc = [-1] * (n + 1) low = [-1] * (n + 1) bridges = [] time = [0] for i in range(1, n + 1): if not visited[i]: dfs(i, -1, visited, disc, low, bridges, adj, time) return len(bridges) # Driver code to read input and call the above function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) connections = [] for i in range(m): u = int(data[2 + 2 * i]) v = int(data[2 + 2 * i + 1]) connections.append((u, v)) print(find_critical_cables(n, m, connections))"},{"question":"You have an n-dimensional array where each element is initially zero-indexed. You will be given a series of operations to perform on this array. Each operation consists of adding a specific value to each element in a specified sub-array. Your task is to determine the final state of the array after all operations have been performed. The input will consist of: 1. Two integers n (the dimension of the array) and m (the number of operations). 2. Two lists of integers of length n, each containing two integers, representing the lower and upper bounds of the sub-array for each dimension. 3. One integer k representing the value to be added. Each of the m operations consists of: - Two lists of n integers, denoting the lower and upper bounds of the sub-array. - An integer k denoting the value to be added to each element within those bounds. Output the final state of the array after all operations. # Input Format - The first line contains two integers n and m. - The next m lines each contain two lists of n integers, representing the lower and upper bounds, followed by the integer k. # Output Format - Output the final state of the array, which is a list representation. # Sample Input ``` 2 2 1 3 5 1 2 0 1 2 3 5 ``` # Sample Output ``` [5, 12, 5] ``` # Explanation - The first operation adds 5 to elements in the sub-array where the first dimension is between 1 and 2 (inclusive), and the second dimension value does not matter. - The second operation adds 5 to elements in the sub-array where the first dimension is between 2 and 3 (inclusive), and the second dimension value does not matter. - Hence, the final state of the array is [5, 12, 5]. Note that indexing starts from 1.","solution":"def apply_operations(n, m, operations): Apply a series of operations to an n-dimensional array. Parameters: n (int): Dimension of the array. m (int): Number of operations. operations (list): List containing m operations. Each operation contains two lists (lower and upper bounds) and an integer k. Returns: list: The final state of the array after all operations. array = [0] * n # Initialize the array with zeros for operation in operations: lower_bounds, upper_bounds, k = operation for i in range(lower_bounds[0] - 1, upper_bounds[0]): # Adjusting for 0-based indexing if 0 <= i < n: array[i] += k return array"},{"question":"The Busy Beaver has been tasked with managing his social media accounts. To achieve this, he has to regularly monitor engagement on his posts. Following is the description of his task: The beaver has posted n posts on his social media account. Each post has received a number of likes and comments, which are represented by a pair (li, ci), where li is the number of likes and ci is the number of comments for the i-th post. He is interested in analyzing the engagement on his posts by calculating the engagement score for each post. The engagement score for a post is defined as the sum of the number of likes and double the number of comments. However, he only wants to consider the posts which have an engagement score greater than or equal to a specified threshold t. Your task is to help the Beaver by writing a program that finds all such posts and prints the indexes of these posts (1-based indexing). Input The first line contains two integers n and t (1 ≤ n ≤ 10^5, 1 ≤ t ≤ 10^9) — the number of posts and the engagement score threshold. The next n lines contain two integers li and ci (0 ≤ li, ci ≤ 10^9) — the number of likes and the number of comments for each post. Output Print all such indexes of posts which have engagement scores greater than or equal to t. Each index should be printed on a new line. If no such posts exist, print \\"No posts\\". Example Input: 5 10 6 2 10 3 5 1 1 6 0 0 Output: 2 4 In this example, the engagement scores for the posts are calculated as follows: - Post 1: 6 + 2*2 = 10 - Post 2: 10 + 2*3 = 16 - Post 3: 5 + 2*1 = 7 - Post 4: 1 + 2*6 = 13 - Post 5: 0 + 2*0 = 0 Thus, the indexes of posts with engagement scores greater than or equal to 10 are 2 and 4.","solution":"def find_engaged_posts(n, t, posts): Finds and returns the indexes of posts with engagement scores greater than or equal to t. Each index is 1-based. :param n: int - number of posts :param t: int - engagement score threshold :param posts: list of tuples - each tuple contains (li, ci) for each post :return: list of int - indexes of posts with engagement scores >= t engaged_post_indices = [] for i in range(n): li, ci = posts[i] engagement_score = li + 2 * ci if engagement_score >= t: engaged_post_indices.append(i + 1) if not engaged_post_indices: return [\\"No posts\\"] return engaged_post_indices"},{"question":"A warehouse has a conveyor belt system that constantly supplies boxes of different weights. The boxes must be packed into trucks such that each truck can carry at most a specified maximum weight. Given a sequence of box weights and the maximum weight a truck can carry, determine the minimum number of trucks required to transport all the boxes. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of boxes. The second line contains n space-separated integers wi (1 ≤ wi ≤ 1000) — the weights of the boxes. The third line contains an integer max_weight (1 ≤ max_weight ≤ 1000) — the maximum weight a truck can carry. Print the minimum number of trucks required to transport all the boxes. # Example Input: 5 2 3 4 5 6 10 Output: 3 # Explanation: - The first truck can carry boxes with weights [2, 3, 4] totaling 9. - The second truck can carry the box with weight 5. - The third truck can carry the box with weight 6. Thus, a total of 3 trucks are required.","solution":"def min_trucks_needed(n, weights, max_weight): Determines the minimum number of trucks needed to transport all boxes given the constraints. :param n: int, number of boxes :param weights: list of int, weights of the boxes :param max_weight: int, maximum weight a truck can carry :return: int, minimum number of trucks required weights.sort(reverse=True) # Sort weights in descending order truck_count = 0 while weights: current_truck_weight = 0 i = 0 # Try to fit the heaviest possible boxes in the current truck while i < len(weights) and current_truck_weight + weights[i] <= max_weight: current_truck_weight += weights[i] i += 1 # Remove the boxes that are loaded into the current truck weights = weights[i:] truck_count += 1 return truck_count"},{"question":"There are n cities in a country, some of which are connected by bidirectional roads. Each city can be reached from every other city either directly or indirectly via other cities. The government wants to optimize the maintenance cost of roads by ensuring that there is exactly one unique path between any two cities (i.e., they want to turn the network into a tree). You are tasked to find out the minimum number of roads that need to be removed to achieve this goal, thus ensuring that there is exactly one unique path between any two cities. The first line contains two integers, n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000), where n is the number of cities and m is the number of roads. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating that there is a road between city u and city v. Output one integer — the minimum number of roads that need to be removed. For example: Input: ``` 6 8 1 2 1 3 3 4 2 4 2 5 5 6 6 4 5 3 ``` Output: ``` 3 ``` Explanation: In this example, you need to remove roads (2, 4), (6, 4), and (5, 3) to achieve the desired tree structure.","solution":"def min_roads_to_remove(n, m, roads): Given the number of cities (n), number of roads (m), and the list of bidirectional roads, this function returns the minimum number of roads that need to be removed to form a tree structure. # To form a tree with n nodes, we need exactly n-1 edges. # Thus, the minimum number of roads to remove = m - (n - 1) return m - (n - 1) def process_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) roads = [tuple(map(int, line.split())) for line in lines[1:]] return n, m, roads"},{"question":"You are given an array of integers where the integers are guaranteed to be unique and sorted in ascending order. Your task is to find a missing integer in the range of the given elements. If no integer is missing in that range, you should output the next integer that should be added to the array to make it continuous. For example, if the given array is [1, 2, 4, 5], the range is from 1 to 5, and the missing integer is 3. If the array is already continuous, for example, [1, 2, 3, 4, 5], then you should output 6 as the next integer to make the array continuous. The first line of the input contains one integer t (1 ≤ t ≤ 500) — the number of test cases. Each test case consists of two lines. The first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n unique integers in ascending order, representing the elements of the array. For each test case, output the missing integer if any, otherwise output the next integer that should be added to the array to make it continuous. In the first test case of the example, 3 is missing from the array [1, 2, 4, 5]. In the second test case of the example, the array [1, 2, 3, 4, 5] is already continuous, so the next integer to add is 6.","solution":"def find_missing_integer(t, test_cases): Finds the missing integer in the range or the next integer to be added to the array to make it continuous for each test case. :param t: Number of test cases :param test_cases: List of tuples where each tuple contains the number of elements in the array and the array itself. :return: List of results for each test case. results = [] for n, arr in test_cases: for i in range(1, n): if arr[i] != arr[i - 1] + 1: results.append(arr[i - 1] + 1) break else: results.append(arr[-1] + 1) return results"},{"question":"In a bustling city, there is a unique roundabout with traffic flowing only clockwise. The roundabout has n exits, and each of them leads to a different part of the city. Each exit i has a unique distance di from the starting point in meters, where the starting point is deemed to be exit 1. Thus, distances for exits can be represented as a list D = [d1, d2, ..., dn]. Buses travel on the roundabout, and the travel time between exits is directly proportional to the distance between those exits. The buses always start their journey at exit 1, and each bus i travels in a circular manner visiting all exits in sequence, starting from 1, visiting each next exit, wrapping around after exit n and stopping again at exit 1. The travel time from exit i to exit j (where j > i) is given by the absolute difference in their distances, i.e., |dj - di|. For cycles, if exit j ≤ i, the travel time is considered as the remaining distance via the circular path, i.e., (dn - di + dj). You are required to compute the total travel time for a bus that travels from exit 1 and completes a full loop back to exit 1 visiting all exits exactly once in sequence. The first line of the input contains a single integer n (2 ≤ n ≤ 10^5) — the number of exits in the roundabout. The second line contains n integers di (1 ≤ di ≤ 10^9) — the distances of each exit from the starting point. Output a single integer — the total travel time for the bus to complete a full trip around the roundabout. For an example with exits having distances [0, 5, 9] from the starting point, the bus will need to travel from 0 to 5 (5 units), from 5 to 9 (4 units), and from 9 back to 0 (9 units), giving a total travel time of 18 units. Note: - For the above example, the bus starts at exit 1 at distance 0, travels to exit 2 at distance 5, travels to exit 3 at distance 9, and then travels back to exit 1 completing the loop.","solution":"def total_travel_time(n, distances): Calculate the total travel time for the bus to complete a full trip around the roundabout. Parameters: - n: int, the number of exits in the roundabout - distances: list of int, the distances of each exit from the starting point Returns: - int, the total travel time total_time = 0 # Calculate the travel time between consecutive exits for i in range(n - 1): total_time += abs(distances[i + 1] - distances[i]) # Add the travel time from the last exit back to the first exit total_time += abs(distances[-1] - distances[0]) return total_time"},{"question":"You are given a list of integers. Your task is to find the length of the longest consecutive subsequence of integers in the list. The subsequence can be in any order within the list but must consist of consecutive integers. Your function should take a single argument: - A list of integers The function should return a single integer which represents the length of the longest consecutive subsequence. For example, given the input list: [1, 9, 3, 10, 4, 20, 2], the longest consecutive subsequence is [1, 2, 3, 4], and its length is 4. Another example, given the input list: [36, 41, 56, 35, 40, 39, 37, 38, 55], the longest consecutive subsequence is [35, 36, 37, 38, 39, 40, 41], and its length is 7. Implement the function with the following signature: ```python def longest_consecutive_subsequence(arr: List[int]) -> int: pass ```","solution":"from typing import List def longest_consecutive_subsequence(arr: List[int]) -> int: if not arr: return 0 num_set = set(arr) longest_length = 0 for num in arr: # Only try to build sequences from the beginning of a sequence if num - 1 not in num_set: current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 longest_length = max(longest_length, current_length) return longest_length"},{"question":"You are given a grid with `n` rows and `m` columns. Some of the cells in the grid contain walls, and the rest contain open spaces. You want to find the number of distinct rectilinear paths from the top-left corner of the grid to the bottom-right corner. A rectilinear path is one that only moves right or down. However, you must avoid walls in your path. The first line contains two integers `n` and `m` (1 leq n, m leq 1000) — the number of rows and columns in the grid. The next `n` lines each contain `m` characters representing the grid. Each character is either a \'.\' (denoting an open space) or a \'#\' (denoting a wall). The top-left corner (1,1) and bottom-right corner (n,m) will always be open. Print a single integer — the number of distinct paths from the top-left corner to the bottom-right corner modulo 10^9 + 7. # Example Input: ``` 4 5 . . # . . . # . . . . . . # . # . . . . ``` Output: ``` 2 ``` # Explanation: The grid is as follows: ``` . . # . . . # . . . . . . # . # . . . . ``` The two paths are: 1. Right -> Right -> Down -> Down -> Right -> Down 2. Down -> Right -> Right -> Down -> Down -> Right","solution":"MOD = 10**9 + 7 def count_paths(n, m, grid): # Initialize a 2D dp array with zeroes dp = [[0]*m for _ in range(n)] # Base case: start at (0, 0) dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1] def main(): import sys input = sys.stdin.read data = input().split() n, m = int(data[0]), int(data[1]) grid = [] index = 2 for _ in range(n): grid.append(data[index:index+m]) index += m print(count_paths(n, m, grid)) if __name__ == \\"__main__\\": main()"},{"question":"Jack is preparing for a long race, running along a circular track. The track is represented by an array of length ( n ) where each element defines how much time (in seconds) it takes to move from the current position to the next. Jack can choose any starting position and any direction (clockwise or counter-clockwise) to run. However, Jack\'s coach has set a strict requirement: Jack must complete exactly one full lap and return to the starting point without repeating any part of the track. The total time can include zero or more turnarounds (switching direction), but Jack cannot switch directions at the starting point. Your task is to help Jack determine the minimum time needed to complete one full lap under the given constraints. The first line contains a single integer ( t ) (( 1 leq t leq 10^5 )) — the number of test cases. Each of the following ( t ) lines contains the description of a single test case: - The first line contains an integer ( n ) (( 2 leq n leq 10^5 )) — the length of the array. - The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) (( 1 leq a_i leq 10^9 )) — the time taken to move from position ( i ) to ( i+1 ) modulo ( n ). It is guaranteed that the total length of all arrays over all test cases does not exceed ( 10^6 ). Output ( t ) lines, each line containing the minimum time needed for the corresponding test case. Example: ``` Input: 2 3 1 2 3 4 1 1 1 1 Output: 6 4 ``` Explanation for the first test case: Jack can start at position 1, move clockwise to position 2 (1 second), then to position 3 (2 seconds), then to position 1 (3 seconds). Total time is 6 seconds. Explanation for the second test case: On an evenly distributed track, Jack can start at any position and move in one continuous direction (either clockwise or counter-clockwise) without turnarounds, taking 4 seconds for a complete lap.","solution":"def min_time_to_complete_lap(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] # Cumulative sum of the array cumulative_sum = sum(a) # For any starting point, the minimum time is the sum of all elements in the array. # As each direction moves sequentially through all elements. results.append(cumulative_sum) return results"},{"question":"Alice recently noticed that her router is malfunctioning and limiting the amount of data that she can receive. She has a list of data packets she must download, each with a specific size. Alice\'s router can only handle a certain maximum total amount of data at a time before it starts dropping packets. She must decide the optimal order and selection of packets to download such that she maximizes the total number of distinct packets without exceeding her router\'s limit. You are given an integer `m`, which is the maximum data capacity of Alice\'s router in bytes, and a list of integers where each integer represents the size of a data packet. Your task is to help Alice determine the maximum number of distinct packets she can successfully download without exceeding the data capacity of her router. # Input - The first line contains an integer `m` (1 ≤ m ≤ 1,000), the maximum data capacity of Alice\'s router in bytes. - The second line contains an integer `n` (1 ≤ n ≤ 1,000), the number of data packets. - The third line contains `n` integers separated by spaces, where the i-th integer is the size of the i-th data packet in bytes (1 ≤ packet size ≤ 1,000). # Output - Output a single integer, the maximum number of distinct packets Alice can download without exceeding the data capacity of her router. # Example Input ``` 100 6 20 50 30 10 40 20 ``` Output ``` 4 ``` # Explanation Alice can select packets with sizes [10, 20, 30, 40] which sum up to 100 bytes. This way, she downloads 4 distinct packets without exceeding her router\'s maximum capacity. # Note The list may contain duplicates, but each packet should be counted only once in the total sum, and should be limited by the router\'s maximum capacity to maximize the total number of packets downloaded.","solution":"def max_distinct_packets(m, packets): Computes the maximum number of distinct packets Alice can download without exceeding the router\'s data capacity. Args: m (int): Maximum data capacity of the router. packets (list): List of integers representing the sizes of the packets. Returns: int: Maximum number of distinct packets that can be downloaded. distinct_packets = sorted(set(packets)) total_size = 0 count = 0 for packet in distinct_packets: if total_size + packet <= m: total_size += packet count += 1 else: break return count"},{"question":"Alice loves playing with strings. She has a string s of length n and another string t. She wants to know the minimum number of operations required to transform s into t. An operation is defined as: 1. Replacing a character in s with a different character. 2. Adding a character anywhere in s. 3. Deleting a character from s. Write a program that computes the minimum number of operations required to transform s into t. The first line contains an integer n (1 ≤ n ≤ 1000) which represents the length of string s. The second line contains the string s consisting of lowercase English letters. The third line contains the string t consisting of lowercase English letters. Note that the length of t can be different from the length of s, but it does not exceed 1000. Print the minimum number of operations required to transform s into t. In the first example, the first string is \\"horse\\" and the second string is \\"ros\\". Transforming \\"horse\\" into \\"ros\\" requires 3 operations: replace \'h\' with \'r\', delete \'e\' and \'s\'. Thus, the minimum number of operations is 3. In the second example, transforming \\"intention\\" into \\"execution\\" requires 5 operations: replace \'i\' with \'e\', replace \'n\' with \'x\', replace \'t\' with \'c\', replace \'n\' with \'u\', and replace \'n\' with \'o\'. Thus, the minimum number of operations is 5.","solution":"def min_operations_to_transform(s, t): Calculate the minimum number of operations required to transform string s into string t. m, n = len(s), len(t) # Create a (m+1) x (n+1) matrix to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Base cases: When one of the strings is empty for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill dp[][] starting from dp[1][1] for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If characters are the same, no operation required else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Consider a number sequence where each number is constructed as follows: starting with any given positive integer ( n ), the next number in the sequence is obtained by summing the squares of the digits of the current number. For example, if the starting number is ( n = 19 ), the sequence would be: - 19 (1^2 + 9^2 = 1 + 81 = 82) - 82 (8^2 + 2^2 = 64 + 4 = 68) - 68 (6^2 + 8^2 = 36 + 64 = 100) - 100 (1^2 + 0^2 + 0^2 = 1) Write a program to determine whether a given starting number ( n ) will eventually reach 1 through this process or get stuck in a loop that does not contain 1. **Input:** The input consists of a single integer ( n ) (1 ≤ n ≤ 10^9). **Output:** Output \\"Yes\\" if the sequence starting with ( n ) will eventually reach 1, otherwise output \\"No\\". **Sample Input 1:** ``` 19 ``` **Sample Output 1:** ``` Yes ``` **Sample Input 2:** ``` 20 ``` **Sample Output 2:** ``` No ```","solution":"def will_reach_one(n): Determines if the sequence starting with n will eventually reach 1. def next_number(x): return sum(int(digit) ** 2 for digit in str(x)) seen = set() while n != 1 and n not in seen: seen.add(n) n = next_number(n) return \\"Yes\\" if n == 1 else \\"No\\""},{"question":"Peter enjoys solving puzzles and one of his favorite types is working with strings. Today he found a puzzle where he needs to manipulate a given string through a series of substring reversals. The task is to make the string a palindrome (if it\'s possible) by reversing at most one substring. A string is called a palindrome if it reads the same backward as forward. Given a string s of length n (1 ≤ n ≤ 100000), determine whether it is possible to make the string a palindrome by reversing at most one substring. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". Note that a single character string is trivially a palindrome, and reversing a whole string also counts as reversing one substring. The input contains one line which is the string s. The output contains one word: \\"YES\\" if it is possible to make the string a palindrome by reversing at most one substring, and \\"NO\\" otherwise. Example 1: Input: abca Output: YES Explanation: Reverse the substring \\"bc\\" to get the palindrome \\"acba\\". Example 2: Input: abcd Output: NO Explanation: It is not possible to make the string a palindrome by reversing any single substring.","solution":"def can_be_palindrome_by_reversing_one_substring(s): Determines if the string s can be made into a palindrome by reversing at most one substring. Parameters: s (str): The input string. Returns: str: \\"YES\\" if the string can be made into a palindrome. \\"NO\\" otherwise. n = len(s) if n == 1: return \\"YES\\" # Initial mismatch detection l, r = 0, n - 1 while l < r and s[l] == s[r]: l += 1 r -= 1 # If already a palindrome if l >= r: return \\"YES\\" # Check if reversing either the left section or the right section makes it a palindrome def is_palindrome_range(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True # Trying to reverse the left mismatch segment or the right mismatch segment if is_palindrome_range(l + 1, r) or is_palindrome_range(l, r - 1): return \\"YES\\" else: return \\"NO\\""},{"question":"Kevin is a cat that loves to play with strings, and his favorite game is transforming one string into another using a specific set of rules. He recently found a string s and a string t and wants to know if he can transform string s into string t using a sequence of operations. The allowed operations are: 1. Insert any character at any position. 2. Delete any character from any position. 3. Replace any character with another character. Kevin is interested in the minimum number of operations required to transform s into t. Can you help him figure it out? The first line of input contains the string s of length n (1 ≤ n ≤ 1000). The second line of input contains the string t of length m (1 ≤ m ≤ 1000). Output the minimum number of operations required to transform s into t. **Example:** Input: ``` sitting kitten ``` Output: ``` 3 ``` Input: ``` alphabet aleph ``` Output: ``` 5 ```","solution":"def min_operations(s, t): Returns the minimum number of operations required to transform string s into string t. n = len(s) m = len(t) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]) return dp[n][m]"},{"question":"Sanju loves to collect coins. One day, he found a collection of n different coins, each with a certain value. Sanju\'s goal is to select some coins from this collection such that their total value is maximum, but with a unique condition: he can only take coins that are not directly next to each other in the original collection. Help Sanju determine the maximum value he can collect under this condition. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of coins in the collection. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10^9) — the value of each coin in the collection. Print a single integer — the maximum value Sanju can collect without taking adjacent coins. For the first example, Sanju can select the coins with values 2 and 9, which are not adjacent. The maximum value he can collect is 11. For the second example, Sanju can only take the coin with value 100 because any other coin he chooses will invalidate the condition of not taking adjacent coins. The maximum value he can collect is 100.","solution":"def max_coins(coins): Returns the maximum value Sanju can collect without taking adjacent coins. n = len(coins) if n == 0: return 0 elif n == 1: return coins[0] # dp array will store the maximum value we can collect up to each coin dp = [0] * n dp[0] = coins[0] dp[1] = max(coins[0], coins[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + coins[i]) return dp[-1]"},{"question":"Given a binary matrix of size (n times m) filled with 0s and 1s, a \'block\' is a set of connected 1s (connected horizontally or vertically). Your task is to find the size of the largest block of 1s in the matrix. The first line of the input contains two integers (n) and (m) ((1 leq n, m leq 100)) — the number of rows and columns in the matrix. The next (n) lines contain (m) characters each (\'0\' or \'1\'), representing the binary matrix. Output one integer — the size of the largest block of connected 1s in the given binary matrix. # Example Input: ``` 4 5 11000 11010 00101 00001 ``` Output: ``` 4 ``` Explanation: The largest block of connected 1s consists of four 1s located at positions (1,1), (1,2), (2,1), and (2,2).","solution":"def find_largest_block(matrix): if not matrix or not matrix[0]: return 0 n, m = len(matrix), len(matrix[0]) visited = [[False] * m for _ in range(n)] def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or matrix[x][y] == \'0\' or visited[x][y]: return 0 visited[x][y] = True size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: # only horizontal and vertical neighbours size += dfs(x + dx, y + dy) return size largest_block = 0 for i in range(n): for j in range(m): if matrix[i][j] == \'1\' and not visited[i][j]: largest_block = max(largest_block, dfs(i, j)) return largest_block # Helper function to convert input as list of strings to list of list of characters def convert_input_to_matrix(input_list): return [list(row) for row in input_list]"},{"question":"Alice and Bob are playing a card game with a special deck. The deck consists of `n` cards, each card has a positive integer printed on it. Alice and Bob take turns drawing cards from this deck. Alice always goes first, and they continue taking turns until all the cards are drawn. The rules of the game are as follows: 1. On each player\'s turn, they must draw the card with the highest value remaining in the deck. 2. If there is a tie (multiple cards with the highest value), the player may choose any one of those cards. To determine the winner, the players\' scores are calculated as the sum of the values of the cards they\'ve drawn. Alice and Bob each want to maximize their own score. Given the card values, your task is to simulate the game and determine the final scores of Alice and Bob. The first line of input contains an integer `n` (1 ≤ n ≤ 100,000) - the number of cards in the deck. The second line contains `n` space-separated integers `a1, a2, ..., an` (1 ≤ ai ≤ 1,000,000) - the values on the cards. Output two space-separated integers, the final scores of Alice and Bob respectively. For example: # Input ``` 5 3 1 4 1 5 ``` # Output ``` 9 5 ``` Explanation: - Alice takes 5, Bob takes 4, Alice takes 3, Bob takes 1, Alice takes 1. - Alice\'s score: 5 + 3 + 1 = 9 - Bob\'s score: 4 + 1 = 5","solution":"def card_game_scores(n, cards): Simulates the card game and returns the scores of Alice and Bob. :param n: Number of cards :param cards: List of integers representing the card values :return: A tuple containing the scores of Alice and Bob # Sort the cards in descending order sorted_cards = sorted(cards, reverse=True) alice_score = 0 bob_score = 0 # Use indices to keep track of Alice\'s and Bob\'s turns for i in range(n): if i % 2 == 0: # Alice\'s turn alice_score += sorted_cards[i] else: # Bob\'s turn bob_score += sorted_cards[i] return alice_score, bob_score"},{"question":"There is a research lab where scientists are working on several projects. Each project has a certain significance level and a certain amount of required resources to complete it. The head scientist wants to optimally distribute the resources such that the sum of the significance levels of all completed projects is maximized. You are given an integer `k` which represents the total amount of resources available. There are `n` projects, each characterized by its significance level `si` and required resources `ri`. Your task is to find the maximum sum of significance levels of the projects that can be completed with the given resources. The first input line contains two integers `n` and `k` (1 ≤ n ≤ 1000, 1 ≤ k ≤ 10^9) — the number of projects and the total amount of available resources. The next `n` lines each contain two integers `si` and `ri` (1 ≤ si, ri ≤ 10^6) — the significance level and the required resources of the i-th project. Print a single integer — the maximum sum of significance levels of the projects that can be completed within the given resource constraints. For example: ``` Input: 5 10 4 3 2 1 3 2 5 4 1 5 Output: 12 Explanation: The head scientist can choose projects with required resources 3, 1, 2, and 4, which gives the maximum sum of significance levels 4 + 2 + 3 + 5 = 14, with resources exactly 10. ```","solution":"def max_significance(n, k, projects): # Sort the projects by their required resources in ascending order projects.sort(key=lambda x: x[1]) total_significance = 0 total_resources = 0 for significance, resources in projects: if total_resources + resources <= k: total_resources += resources total_significance += significance return total_significance"},{"question":"You are given an array of n distinct integers. You need to find a pair of elements (i, j) such that their sum is closest to a given target integer x. The first line of the input contains two space-separated integers n and x (2 ≤ n ≤ 10^5, -10^9 ≤ x ≤ 10^9) — the number of elements in the array and the target sum respectively. The second line contains n distinct integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Output the pair of elements that have the sum closest to x. If there are multiple such pairs, output the one with the smallest first element. If there are still multiple pairs, output the one with the smallest second element. In the first sample, the closest sum to 6 is formed by adding -1 and 7. # Example Input: ``` 4 6 1 3 -1 7 ``` Output: ``` -1 7 ``` Input: ``` 5 10 4 2 5 6 8 ``` Output: ``` 2 8 ```","solution":"def find_closest_pair(nums, n, target): # Sort the numbers along with their original indices nums = sorted(nums) left, right = 0, n - 1 closest_pair = (None, None) closest_diff = float(\'inf\') while left < right: current_sum = nums[left] + nums[right] current_diff = abs(current_sum - target) if current_diff < closest_diff: closest_diff = current_diff closest_pair = (nums[left], nums[right]) elif current_diff == closest_diff: if nums[left] < closest_pair[0] or (nums[left] == closest_pair[0] and nums[right] < closest_pair[1]): closest_pair = (nums[left], nums[right]) if current_sum < target: left += 1 else: right -= 1 return closest_pair # Example usage n, x = 4, 6 arr = [1, 3, -1, 7] print(find_closest_pair(arr, n, x)) # Output: (-1, 7) n, x = 5, 10 arr = [4, 2, 5, 6, 8] print(find_closest_pair(arr, n, x)) # Output: (2, 8)"},{"question":"Masha is a manager at a restaurant and needs to organize the reservation system based on priority. Each reservation request includes a unique identifier, the priority level of the reservation (an integer), and the time the request was made. Masha wants to sort the requests in such a way that the reservations with higher priority come first. If two reservations have the same priority level, the one that was made earlier should come first. You are given a list of reservation requests, each with their priority level and time of request. Write a function that sorts this list according to the rules mentioned. Input: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of reservation requests. - The following n lines each contain a unique identifier (a string), the priority level of the reservation (an integer), and the time of request (a string in the format \\"HH:MM\\"). Output: - Print the identifiers of the reservation requests sorted according to the given rules, each identifier on a new line. Example: Input: 3 res1 3 14:20 res2 2 13:10 res3 3 09:30 Output: res3 res1 res2 Explanation: The system should first sort by priority. \\"res3\\" and \\"res1\\" have the same highest priority level, but \\"res3\\" was made earlier, so it comes first. \\"res2\\" has the next highest priority level and thus comes after \\"res1\\".","solution":"def sort_reservations(n, requests): Sorts reservation requests based on priority and time. Args: n: int - the number of reservation requests requests: list - List of tuples containing (identifier, priority, time) Returns: List of sorted identifiers # Split the request strings into tuples of (identifier, priority, time) reservation_list = [] for request in requests: parts = request.split() identifier = parts[0] priority = int(parts[1]) time = parts[2] reservation_list.append((identifier, priority, time)) # Sorting: first by -priority (higher priority first), then by time (earlier first) sorted_reservations = sorted(reservation_list, key=lambda x: (-x[1], x[2])) # Extract and return only the identifiers in sorted order sorted_ids = [res[0] for res in sorted_reservations] return sorted_ids"},{"question":"Polycarp received a task to encrypt and decrypt messages using a predefined permutation of the alphabet. The permutation is represented by a 26-letter string containing each letter of the Latin alphabet exactly once. He wants to use this permutation to create a simple substitution cipher. Given a permutation of the alphabet and a string to encrypt or decrypt, your task is to help Polycarp perform the encryption or decryption. **Encryption**: Each letter in the input string is replaced by the corresponding letter in the permutation. **Decryption**: Each letter in the input string is replaced by the corresponding letter in the original alphabet based on its position in the permutation. Write a program that reads the permutation, a mode (either `encrypt` or `decrypt`), and a string, then outputs the encrypted or decrypted string accordingly. # Input: - First line contains a string of length 26 that represents the permutation of the alphabet. - Second line contains the mode, which is either `encrypt` or `decrypt`. - Third line contains a string consisting of uppercase Latin letters that is to be encrypted or decrypted (the length of the string does not exceed 100). # Output: - Output the resulting string after the encryption or decryption process. # Sample Input 1: ``` QWERTYUIOPASDFGHJKLZXCVBNM encrypt HELLO ``` # Sample Output 1: ``` ITSSG ``` # Sample Input 2: ``` QWERTYUIOPASDFGHJKLZXCVBNM decrypt ITSSG ``` # Sample Output 2: ``` HELLO ``` # Explanation: In the first example, the permutation maps `H -> I`, `E -> T`, `L -> S`, and `O -> G`. In the second example, using the same permutation for decryption, `I -> H`, `T -> E`, `S -> L`, and `G -> O`. Implement the encryption and decryption functions to support Polycarp’s task.","solution":"def substitution_cipher(permutation, mode, message): Encrypts or decrypts a message using a given permutation of the alphabet. Args: permutation (str): A 26-letter string representing the permutation of the alphabet. mode (str): Either \'encrypt\' or \'decrypt\'. message (str): The string to be encrypted or decrypted. Returns: str: The resulting encrypted or decrypted string. # Original alphabet alphabet = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" if mode == \\"encrypt\\": translation_table = str.maketrans(alphabet, permutation) return message.translate(translation_table) elif mode == \\"decrypt\\": translation_table = str.maketrans(permutation, alphabet) return message.translate(translation_table) else: raise ValueError(\\"Invalid mode. Use \'encrypt\' or \'decrypt\'.\\") # Sample usage: # print(substitution_cipher(\\"QWERTYUIOPASDFGHJKLZXCVBNM\\", \\"encrypt\\", \\"HELLO\\")) # print(substitution_cipher(\\"QWERTYUIOPASDFGHJKLZXCVBNM\\", \\"decrypt\\", \\"ITSSG\\"))"},{"question":"Your task is to write a program that will determine the shortest contiguous subarray that, when sorted, allows the entire array to be sorted in ascending order. You are given an array of integers of length n (1 ≤ n ≤ 100,000). The array can contain duplicate elements and has at least one unsorted element. The output should be the indices of the leftmost and rightmost elements of the smallest subarray which, when sorted, make the whole array sorted. If the array is already sorted, return -1 -1. For example: Input: 1. The first line contains an integer n - the length of the array. 2. The second line contains n integers separated by spaces - the array elements. Output: Print two integers l and r - the indices (0-based) of the leftmost and rightmost elements of the smallest subarray that, when sorted, allows the entire array to be sorted. If the array is already sorted, return -1 -1. Sample Input: 5 1 3 2 4 5 Sample Output: 1 2 Explanation: If we sort the subarray from index 1 to index 2, the whole array will become sorted [1, 2, 3, 4, 5].","solution":"def find_unsorted_subarray(arr): This function finds the smallest subarray which, when sorted, makes the whole array sorted. n = len(arr) if n == 1: return -1, -1 start, end = -1, -1 for i in range(n - 1): if arr[i] > arr[i + 1]: start = i break if start == -1: return -1, -1 for i in range(n - 1, 0, -1): if arr[i] < arr[i - 1]: end = i break sub_min = min(arr[start:end + 1]) sub_max = max(arr[start:end + 1]) for i in range(start): if arr[i] > sub_min: start = i break for i in range(n - 1, end, -1): if arr[i] < sub_max: end = i break return start, end"},{"question":"You are given an array `a` consisting of `n` integers. The task is to determine if it is possible to convert the array into a non-decreasing array by modifying at most one element of the array. A non-decreasing array is an array in which each element is less than or equal to the next element in the array. If it is possible, print \\"YES\\", otherwise print \\"NO\\". # Input - The first line contains a single integer `n` (`1 ≤ n ≤ 10^5`) — the length of the array. - The second line contains `n` space-separated integers `a1, a2, ..., an` (`1 ≤ ai ≤ 10^9`) — the elements of the array. # Output - Print \\"YES\\" if it is possible to convert the array into a non-decreasing array by modifying at most one element, otherwise print \\"NO\\". # Example Input ``` 5 4 2 3 3 4 ``` Output ``` YES ``` Input ``` 4 3 4 2 3 ``` Output ``` NO ```","solution":"def can_be_non_decreasing(arr): n = len(arr) fault_count = 0 for i in range(1, n): if arr[i] < arr[i - 1]: fault_count += 1 if fault_count > 1: return \\"NO\\" if i - 2 >= 0 and arr[i - 2] > arr[i]: arr[i] = arr[i - 1] else: arr[i - 1] = arr[i] return \\"YES\\""},{"question":"A well-known wizard has recently come across a rare magical map. This map contains a secret message hidden between random characters, and the wizard needs your help to decode it. The map is represented as a string of characters, containing exactly `n` uppercase English letters. The hidden message is formed by selecting a subsequence of letters in the order they appear in the string. The wizard wants the hidden message to be the longest possible palindrome subsequence. A palindrome is a string that reads the same backward as forward, for example, \\"A\\", \\"AA\\", \\"ABA\\". Your task is to write a program to find the length of the longest palindromic subsequence in the given string. # Input The first line contains an integer `n` (1 leq n leq 1000), the length of the string. The second line contains a string `s` of length `n` consisting of uppercase English letters. # Output Print a single integer, the length of the longest palindromic subsequence in the given string. # Example Input ``` 5 BANANA ``` Output ``` 5 ``` # Explanation The longest palindromic subsequence in \\"BANANA\\" is \\"ANANA\\", which has a length of 5. Note: - Ensure your solution is efficient even for the largest constraints. - Handle edge cases like strings with all same characters or no repeating characters.","solution":"def longest_palindromic_subsequence(n, s): Given a string s of length n, return the length of the longest palindromic subsequence in the string. # Create a dp table to store lengths of longest palindromic subsequences dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the dp table for length in range(2, n + 1): # length of substring for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) # The length of the longest palindromic subsequence is in dp[0][n-1] return dp[0][n-1]"},{"question":"Given a circular array of length `n`, find the minimal integer `k` such that, starting from some index `i` (1 ≤ i ≤ n), you can make exactly `k` moves clockwise around the circle and return to the starting index `i` having visited every element of the array at least once. A move consists of moving from the current index `i` to the index `(i + 1) % n`. The first line of the input contains an integer `n` (2 ≤ n ≤ 10^5) — the length of the array. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the elements of the array. Output the minimal integer `k` for which there exists a starting index `i` such that visiting index `(i + 1) % n` for `k` moves visits every element at least once. # Examples: **Input:** ``` 5 3 1 4 1 5 ``` **Output:** ``` 5 ``` **Input:** ``` 3 7 5 9 ``` **Output:** ``` 3 ``` **Explanation:** In the first example, the minimal `k` is `5` because the array has 5 elements, and you need exactly `5` moves starting from any index to return after visiting all elements. In the second example, since the array is of length `3`, you need exactly `3` moves starting from any index to visit every element and return to the start.","solution":"def min_moves_to_visit_all_elements(n, arr): Returns the minimal number of moves required to visit every element of the circular array at least once. This is essentially the length of the array since you need to make `n` moves to visit all elements from any starting point. return n"},{"question":"Barbara loves playing with numbers and trying to find interesting patterns within them. She recently stumbled upon a particular sequence known as a color sequence. Given a color sequence, she wants to figure out how colorful the sequence is by performing certain operations on it. A color sequence of length n consists of n integers where each integer represents a color. The sequence is defined as colorful if each pair’s of adjacent elements (a, b) from the sequence follow the condition: color(a) ≠ color(b). However, Barbara can change the color of exactly m elements to make the sequence colorful. Barbara would like to know, for each possible color sequence, the minimum number of changes she needs to make so that the sequence becomes colorful. The first line of input contains two integers n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ n) — the total number of elements in the sequence and the number of elements Barbara can change, respectively. The next line contains n space-separated integers c1, c2, ..., cn (1 ≤ ci ≤ 10^9) — the sequence of colors. Output a single integer — the minimum number of changes needed to make the sequence colorful by changing at most m elements. # Example: **Input:** ``` 6 2 1 1 1 2 2 2 ``` **Output:** ``` 2 ``` **Explanation:** To make the sequence colorful, Barbara can change the sequence to [1, 2, 1, 2, 1, 2] by changing the second and fourth element. Thus, the minimum number of changes needed is 2.","solution":"def min_changes_to_colorful_sequence(n, m, colors): Returns the minimum number of changes needed to make the sequence colorful by changing at most m elements. :param n: int, the total number of elements in the sequence :param m: int, the number of elements that can be changed :param colors: List[int], the sequence of colors :return: int, the minimum number of changes needed changes_needed = 0 # Count the number of changes needed to make the sequence colorful for i in range(n - 1): if colors[i] == colors[i + 1]: changes_needed += 1 # Return the minimum of the changes needed and the maximum changes allowed return min(changes_needed, m)"},{"question":"There are n buildings in a row numbered from 1 to n, each with a certain height. Little Tom is playing a game where he wants to transfer red flags between the buildings while ensuring that each transfer always goes from a building to another building with a greater height. Tom aims to find the maximum number of buildings he can use in a sequence where each subsequent building in the sequence is taller than the previous one, and each building except the first one gets a red flag transferred to it from the previous building in the sequence. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the buildings. Output a single integer — the maximum number of buildings that Tom can use in an increasing height sequence. **Example:** Input: 5 2 9 3 6 10 Output: 4 In the given example, Tom can transfer the flags in the sequence of heights 2 -> 3 -> 6 -> 10. Thus, the maximum number of buildings used in an increasing height sequence is 4.","solution":"def max_buildings_in_sequence(heights): Returns the maximum number of buildings that can be used in an increasing height sequence. if not heights: return 0 n = len(heights) dp = [1] * n # dp[i] represents the longest increasing subsequence ending at index i for i in range(1, n): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example usage # n = 5 # heights = [2, 9, 3, 6, 10] # The result should be 4. print(max_buildings_in_sequence([2, 9, 3, 6, 10])) # Output: 4"},{"question":"You are given a series of transactions in an online payment system. Each transaction is described by the IDs of two users involved and the amount of money transferred. Your task is to determine the final balance of each user after all transactions are completed. A user\'s balance is initially zero, and each transaction either increases or decreases their balance depending on whether they are sending or receiving money. The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of transactions. Each of the next t lines contains three integers u1, u2, and amount (1 ≤ u1, u2 ≤ 1000, 1 ≤ amount ≤ 10000), representing a transaction where user u1 sends `amount` of money to user u2. Print the final balance for each user that has participated in at least one transaction, in ascending order of their user IDs. The first line of the output should contain a single integer n — the number of users with a non-zero balance. Each of the next n lines should contain two integers: the user ID and their final balance, sorted in ascending order of user IDs. Example: Input: 5 1 2 100 2 3 50 3 4 25 4 5 10 5 1 5 Output: 5 1 -95 2 50 3 25 4 15 5 5 In this example, user 1 sends 100 units to user 2, user 2 sends 50 units to user 3, and so on. User 1\'s final balance is -95 because they sent 100 units and received 5 units. User 5\'s final balance is 5 because they received 10 units from user 4 and sent 5 units to user 1.","solution":"def calculate_final_balances(transactions): Calculates the final balance for each user based on the transactions. :param transactions: List of tuples where each tuple represents a transaction in the form (u1, u2, amount) where u1 sends amount to u2. :return: List of tuples containing user IDs and their final balance, sorted by user ID. from collections import defaultdict balances = defaultdict(int) for u1, u2, amount in transactions: balances[u1] -= amount balances[u2] += amount result = sorted((user_id, balance) for user_id, balance in balances.items()) return result"},{"question":"Emma is fascinated by word puzzles. She found a game where the goal is to transform one word into another by following a series of moves. Each move allows the player to change exactly one letter of the word to any other letter of the alphabet. Emma wants to know the minimum number of moves required to transform a given starting word into a target word of the same length. Write a function to determine the minimum number of moves needed to transform the starting word into the target word. Each word is composed strictly of lowercase letters and has the same length. The first line of the input contains two strings `start_word` and `target_word` of equal length (1 ≤ length ≤ 100). Print the minimum number of moves required to transform `start_word` into `target_word`. **Example:** Input: ``` flame frame ``` Output: ``` 1 ``` Explanation: Only one letter (\'l\' to \'r\') needs to be changed to transform \\"flame\\" into \\"frame\\". Thus, the minimum number of moves required is 1.","solution":"def min_moves_to_transform(start_word, target_word): Returns the minimum number of moves required to transform start_word into target_word. return sum(1 for s, t in zip(start_word, target_word) if s != t)"},{"question":"You are given an array of integers representing the elevations of a landscape, where the width of each elevation is 1. After a heavy rain, water will be trapped in the valleys between the elevations. Write a function to calculate the total amount of water that can be trapped. For example, given the array elevationMap = [0,1,0,2,1,0,1,3,2,1,2,1], the amount of water trapped is 6 units. # Input - The first line contains an integer `n` (0 ≤ n ≤ 10^5), the number of elevations. - The second line contains `n` non-negative integers separated by spaces representing the elevationMap (0 ≤ elevationMap[i] ≤ 10^5). # Output - The output should be a single integer representing the total units of water trapped. # Example Input ``` 12 0 1 0 2 1 0 1 3 2 1 2 1 ``` Output ``` 6 ``` # Constraints - Your solution should have a time complexity of O(n). - The space complexity should be O(1) beyond the input storage. Implement the function in Python with the following signature: ```python def trapWater(elevationMap): # Implementation ```","solution":"def trapWater(elevationMap): if not elevationMap: return 0 n = len(elevationMap) left, right = 0, n - 1 left_max, right_max = elevationMap[left], elevationMap[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, elevationMap[left]) water_trapped += left_max - elevationMap[left] else: right -= 1 right_max = max(right_max, elevationMap[right]) water_trapped += right_max - elevationMap[right] return water_trapped"},{"question":"You are given a list of integers representing a sequence of tasks. Each task must be performed in a time slot that is a multiple of its position in the list (1-indexed). Additionally, time slots are 1-indexed and you must choose the minimum possible time slot for each task. If a task cannot be scheduled within a given limit, it\'s impossible to perform that task within the constraints. Determine the minimum time slot assignment for each task. If it is impossible to assign a valid time slot to a task, return -1 for that task. The input consists of multiple test cases. The first line contains a single integer t (1 le t le 100), the number of test cases. Each test case starts with a single integer n (1 le n le 50), the number of tasks followed by n integers representing the maximum allowed time slot for each respective task. For each test case, output a single line containing n integers, where the i-th integer is the assigned time slot for the i-th task, or -1 if the task cannot be scheduled within the given constraints. # Example Input ``` 3 3 5 10 15 4 2 3 4 5 2 7 14 ``` Output ``` 1 4 15 1 2 3 4 1 7 ``` # Explanation In the first test case: - The first task is at position 1, and it can be scheduled at time slot 1. - The second task is at position 2, and it can be scheduled at time slot 4, which is a multiple of 2. - The third task is at position 3, and it can be scheduled at time slot 15, which is a multiple of 3. In the second test case: - The first task is at position 1, and it can be scheduled at time slot 1. - The second task is at position 2, and it can be scheduled at time slot 2. - The third task is at position 3, and it can be scheduled at time slot 3. - The fourth task is at position 4, and it can be scheduled at time slot 4. In the third test case: - The first task is at position 1, and it can be scheduled at time slot 1. - The second task is at position 2, and it can be scheduled at time slot 7, which is a multiple of 2.","solution":"def assign_time_slots(test_cases): results = [] for case in test_cases: n = case[0] max_slots = case[1:] assignment = [] for pos, max_slot in enumerate(max_slots, start=1): found = False for time_slot in range(pos, max_slot + 1, pos): if time_slot % pos == 0: assignment.append(time_slot) found = True break if not found: assignment.append(-1) results.append(assignment) return results"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation on the string: choose any character and either remove it or change it to another lowercase English letter. Calculate the minimum number of operations required to make the string a palindrome. The first line contains a single integer n (1 le n le 10^5) — the length of the string. The second line contains the string of length n, consisting of lowercase English letters. Print the minimum number of operations required to make the string a palindrome. In the first example, the string is already a palindrome, so you need 0 operations. In the second example, you can remove \'b\' and \'d\' to get \\"a\\", which is a palindrome and thus requires 2 operations in total.","solution":"def min_operations_to_palindrome(n, s): Calculate the minimum number of operations required to make the string a palindrome. operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"In a city, there are n intersections connected by m bi-directional roads. Each road has a unique travel cost associated with it, and each intersection is uniquely labeled from 1 to n. The city wants to construct bike lanes such that the total travel cost for cyclists to commute between any two intersections is minimized. Ideally, the city aims to design these lanes in a way that all intersections are accessible from each other with the minimum possible total travel cost. The first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 2 * 10^5) representing the number of intersections and the number of roads respectively. The following m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6), where u and v are the intersections connected by the road and w is the travel cost of that road. Print the minimum total travel cost for constructing the bike lanes. If it is not possible to construct the bike lanes such that all intersections are accessible from each other, print -1. For instance, you can construct the bike lanes using the minimum spanning tree of the graph formed by intersections and roads. If there are multiple valid solutions, any one of them can be used.","solution":"import heapq def minimum_bike_lane_cost(n, m, roads): if n == 1: return 0 # Create an adjacency list adj = [[] for _ in range(n+1)] for u, v, w in roads: adj[u].append((w, v)) adj[v].append((w, u)) # Prim\'s algorithm to find the minimum spanning tree (MST) visited = [False] * (n + 1) min_heap = [(0, 1)] # (cost, intersection) total_cost = 0 edges_used = 0 while min_heap and edges_used < n: cost, u = heapq.heappop(min_heap) if visited[u]: continue visited[u] = True total_cost += cost edges_used += 1 for next_cost, v in adj[u]: if not visited[v]: heapq.heappush(min_heap, (next_cost, v)) return total_cost if edges_used == n else -1"},{"question":"You have a string `s` consisting of lowercase Latin letters and a sequence of queries. Each query is described by two integers `l` and `r` (1 <= l <= r <= |s|) which represent a substring `s[l..r]`. For each query, determine if the substring can be rearranged to form a palindrome. A palindrome is a string that reads the same backward as forward. For a string to be rearranged into a palindrome, at most one character can have an odd frequency, while all others must have even frequencies. Write a function with the following signature: ```python def can_rearrange_to_palindrome(s: str, queries: List[Tuple[int, int]]) -> List[bool]: pass ``` # Input - `s`: a string of length `n` (1 <= n <= 10^5) - `queries`: a list of tuples where each tuple contains two integers `l` and `r` (1 <= l <= r <= |s|) - The number of queries `q` (1 <= q <= 4 * 10^4) # Output - Return a list of boolean values where each value corresponds to whether the respective substring can be rearranged to form a palindrome. # Example ```python s = \\"abacaba\\" queries = [(1, 3), (2, 4), (1, 7), (5, 7)] print(can_rearrange_to_palindrome(s, queries)) # Output: [True, False, True, True] ``` Explanation: 1. Substring \\"aba\\" can be rearranged to form \\"aba\\" (itself a palindrome). 2. Substring \\"bac\\" cannot be rearranged to form a palindrome. 3. Substring \\"abacaba\\" can be rearranged to form \\"aabbaca\\" or \\"aabcbca\\" which are palindromes. 4. Substring \\"aba\\" can be rearranged to form \\"aba\\" (itself a palindrome).","solution":"from typing import List, Tuple from collections import Counter def can_rearrange_to_palindrome(s: str, queries: List[Tuple[int, int]]) -> List[bool]: def is_palindrome_permutable(substring: str) -> bool: freq = Counter(substring) odd_count = sum(1 for count in freq.values() if count % 2 == 1) return odd_count <= 1 results = [] for l, r in queries: substring = s[l-1:r] # adjust for the 1-based index results.append(is_palindrome_permutable(substring)) return results"},{"question":"Given a series of N integers, A1, A2, ..., AN, you need to find the length of the longest contiguous subarray such that the absolute difference between the maximum and minimum elements in this subarray is less than or equal to a given integer K. More formally, you need to find the maximum length of a subarray [Ai, Ai+1, ..., Aj] such that it satisfies the condition max(Ai, Ai+1, ..., Aj) - min(Ai, Ai+1, ..., Aj) ≤ K. The first line of the input contains two integers N and K (1 ≤ N ≤ 100,000 and 0 ≤ K ≤ 10^9) – the number of elements in the array and the maximum allowed difference within a subarray, respectively. The next line contains N integers A1, A2, ..., AN (0 ≤ Ai ≤ 10^9) – the elements of the array. Output the length of the longest subarray satisfying the condition. In the first example, the subarray [1, 3, 4, 6, 3, 2] has the maximum absolute difference of 6 - 1 = 5, which is greater than K = 3. The longest subarray meeting the condition is [3, 4, 6] or [4, 6, 3, 2]. In the second example, since K = 0, the longest valid subarray is any subarray with all identical elements because the maximum absolute difference would be 0. Hence, the answer is 1 because the longest subarray with identical elements has length 1.","solution":"def longest_subarray_with_diff_k(arr, k): from collections import deque n = len(arr) max_len = 0 start = 0 min_deque = deque() max_deque = deque() for end in range(n): while min_deque and arr[min_deque[-1]] >= arr[end]: min_deque.pop() min_deque.append(end) while max_deque and arr[max_deque[-1]] <= arr[end]: max_deque.pop() max_deque.append(end) while arr[max_deque[0]] - arr[min_deque[0]] > k: start += 1 if min_deque[0] < start: min_deque.popleft() if max_deque[0] < start: max_deque.popleft() max_len = max(max_len, end - start + 1) return max_len"},{"question":"You are given an array of integers where every integer appears an even number of times except for one integer which appears an odd number of times. Your task is to find the integer that appears an odd number of times. Note: You should use an algorithm with linear time complexity. Input: - The first line contains a single integer, n (1 ≤ n ≤ 10^6), the size of the array. - The second line contains n integers separated by spaces, representing the elements of the array. Output: - Print the integer that appears an odd number of times. Sample Input: 6 1 2 3 2 3 1 3 Sample Output: 3","solution":"def find_odd_occurrence(arr): Returns the integer that appears an odd number of times in the array. Uses bitwise XOR operation to achieve linear time complexity. result = 0 for num in arr: result ^= num return result # Example Usage # arr = [1, 2, 3, 2, 3, 1, 3] # print(find_odd_occurrence(arr)) # Output: 3"},{"question":"Given a string S consisting of \'a\' and \'b\' characters, the string is said to be beautiful if there is such a permutation of the string in which no two \'a\'s are adjacent. Your task is to determine whether it is possible to rearrange the given string to make it beautiful. The first line of the input contains a single integer T (1 ≤ T ≤ 100), denoting the number of test cases. The next T lines contain one string S each, where each string\'s length is between 1 and 1000 inclusive. For each test case, print \\"YES\\" if it is possible to make the string beautiful, otherwise print \\"NO\\". **Example:** Input: 4 aab baaa b aaa Output: YES NO YES NO","solution":"def can_be_beautiful(string): Determines if a string can be rearranged such that no two \'a\'s are adjacent. count_a = string.count(\'a\') count_b = string.count(\'b\') # condition for beautiful string is that number of \'a\'s should not be more # than (number of \'b\'s + 1) return count_a <= count_b + 1 def check_beautiful_strings(test_cases): Processes multiple test cases to determine if each string can be made beautiful. results = [] for string in test_cases: if can_be_beautiful(string): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Vlad and Pavlo are playing a game with a sequence of numbers. They have a sequence of n numbers: a1, a2, ..., an. Vlad and Pavlo take turns making moves. Vlad goes first. A single move consists of selecting an element ai and dividing it by 2 (i.e., replacing ai with ⌊ai / 2⌋). The integer division is denoted as ⌊x / 2⌋ which means the largest integer that is less than or equal to x / 2. The game will go on until all elements in the sequence become zero. The player who cannot make a move (because all elements are zero) loses the game. Vlad, being very strategic, always makes the optimal move to win. Given the initial sequence of n numbers, determine if Vlad will win the game assuming both players play optimally. The first line contains a single integer n (1 ≤ n ≤ 10^5) denoting the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) separated by spaces. Output \\"Vlad\\" if Vlad is guaranteed to win the game, otherwise output \\"Pavlo\\". **Sample Input 1:** ``` 3 1 2 3 ``` **Sample Output 1:** ``` Pavlo ``` **Sample Input 2:** ``` 2 5 9 ``` **Sample Output 2:** ``` Vlad ``` In the first example, the sequence will turn into [0, 0, 0] with optimal play from both sides such that Pavlo wins. In the second example, Vlad will make sure to force a win because of optimal moves resulting in a sequence that ensures Pavlo cannot make a move first.","solution":"def will_vlad_win(n, sequence): Determines if Vlad will win the game assuming both players play optimally. Parameters: n (int): The number of elements in the sequence. sequence (list of int): The list of initial elements in the sequence. Returns: str: \\"Vlad\\" if Vlad is guaranteed to win the game, otherwise \\"Pavlo\\". # Count the number of odd and even numbers in the sequence odd_count = sum(1 for x in sequence if x % 2 != 0) even_count = n - odd_count # Vlad wins if there is at least one odd number if odd_count > 0: return \\"Vlad\\" else: return \\"Pavlo\\""},{"question":"Imagine you are managing a warehouse that stores various types of containers stacked on top of each other. Each container is identified by a unique label represented as an uppercase letter (\'A\' to \'Z\'). You need to determine the maximum height of containers that can be stacked such that each container in the stack has a unique label and the labels are sorted in lexicographical order from top to bottom (i.e., \'A\' at the top and \'Z\' at the bottom). You are given a list of labels representing the containers available in the warehouse. You can assume the inventory is unlimited, meaning you get as many containers of each label as needed. Write a function `max_stack_height(labels: List[str]) -> int` that takes a list of labels and returns an integer representing the maximum height of the stack based on the given constraints. # Input - A single list of strings `labels`, where each element is an uppercase letter. # Output - An integer representing the maximum height of the stack with unique, lexicographically ordered containers. # Example ``` Input: [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\", \\"F\\"] Output: 6 Input: [\\"Z\\", \\"Y\\", \\"X\\"] Output: 3 Input: [\\"A\\", \\"A\\", \\"B\\", \\"B\\", \\"C\\", \\"C\\"] Output: 3 ``` # Constraints - The length of the list `labels` will be between 1 and 26 inclusive, containing any uppercase letter from \'A\' to \'Z\'. - There may be duplicate letters in the input list, but only a set of unique letters in them should be used to determine the stack height.","solution":"def max_stack_height(labels): Returns the maximum height of the stack such that each container has a unique label and the labels are sorted in lexicographical order from top to bottom. Args: labels (List[str]): A list of uppercase letter labels. Returns: int: The maximum height of the stack. # Use a set to get unique labels unique_labels = set(labels) # The maximum height of the stack is the number of unique letters return len(unique_labels)"},{"question":"You are given two arrays, a and b, both consisting of n integers. Your task is to calculate the maximum sum S defined as follows: S = sum_{i=1}^{n} max(a_i, b_i) Where a_i and b_i are the i-th elements of arrays a and b respectively. The first line of the input contains an integer n (1 le n le 10^5) — the number of elements in each array. The second line contains n integers a_1, a_2, ldots, a_n (0 le a_i le 10^9) — the elements of array a. The third line contains n integers b_1, b_2, ldots, b_n (0 le b_i le 10^9) — the elements of array b. Output a single integer — the maximum sum S. # Example Input ``` 3 1 2 3 4 5 6 ``` Output ``` 15 ``` Explanation Choose the maximum element from the pairs `(1, 4)`, `(2, 5)`, and `(3, 6)`, which results in `4 + 5 + 6 = 15`.","solution":"def max_sum_of_max_elements(n, a, b): This function calculates the maximum sum S defined as the sum of the maximum elements between corresponding elements of arrays a and b. :param n: int - number of elements in each array :param a: List[int] - first array of integers :param b: List[int] - second array of integers :return: int - maximum sum S return sum(max(a[i], b[i]) for i in range(n))"},{"question":"Alice and Bob are playing a game on an undirected graph with `n` nodes and `m` edges. The graph is initially completely connected, meaning that every node is connected to every other node. Each edge in the graph has a weight of `1`. Alice and Bob take turns removing an edge from the graph. Alice removes an edge on her turn if and only if the number of connected components in the graph would still be `1` after removing that edge. Bob, on the other hand, can remove any edge on his turn. Alice always goes first and the players continue to remove edges until Alice can no longer make a move. The game ends as soon as the graph becomes disconnected (i.e., it has more than one connected component). Your task is to determine the number of edges Alice can remove before the game ends. The first line of input contains two integers `n` and `m` `(2 ≤ n ≤ 500, 1 ≤ m ≤ n*(n-1)/2)` — the number of nodes and edges in the graph. The following `m` lines each contain two integers `u` and `v` `(1 ≤ u, v ≤ n, u ≠ v)` indicating an edge between nodes `u` and `v`. Print one integer, the number of edges Alice can remove before the game ends. For example, in the graph with `3` nodes and `3` edges (forming a triangle): Alice removes one edge (connected components still `1`). Bob removes one edge (graph now has `2` connected components). Thus, the number of edges Alice can remove is `1`. In another example with `5` nodes and `10` edges (also forming a complete graph): Alice can remove multiple edges (connected components still `1`), but as soon as Bob removes an edge, the connected components will exceed `1`. Thus, the number of edges Alice can remove is `n-1 = 4` edges in this case. Remember to handle multiple test cases efficiently. Input format: ``` n m u1 v1 u2 v2 ... um vm ``` Output format: ``` Number of edges Alice can remove before the game ends. ```","solution":"def count_alice_moves(n, m, edges): Returns the number of edges Alice can remove before the graph becomes disconnected. As per the problem, Alice can initially remove n-1 edges from the fully connected graph. return n - 1"},{"question":"A group of friends are planning a journey through a series of n cities, numbered from 1 to n. Each city is connected to the next in the sequence by a road, with the exception of the last city which is connected back to the first city, forming a circular route. They want to choose two different starting cities and walk through all cities exactly once before returning to their starting city. However, the friends have specific requirements: - They want to start in one city, travel through all other cities exactly once, and end in the starting city. - They want both starting cities to be directly connected by a road. - Given that the travel arrangement must form a complete circle of n cities, find two different starting cities that can meet these requirements. Given the number of cities n (3 ≤ n ≤ 1000), find any two different cities that can serve as starting points for the friends’ journey, or determine if it\'s impossible. The first line of the input contains a single integer n, indicating the number of cities. Output two different integers representing the starting cities, or print -1 if it\'s impossible to find such cities. For example, if n = 4, a possible output could be: 1 2 Explanation: - Starting at city 1: the path could be 1 -> 2 -> 3 -> 4 -> 1 - Starting at city 2: the path could be 2 -> 3 -> 4 -> 1 -> 2 If n = 5, a possible output could be: 2 3","solution":"def find_starting_cities(n): Finds two different starting cities for a journey that meets the specific requirements. Parameters: n (int): The number of cities. Returns: tuple or int: A tuple containing two different starting cities, or -1 if it is impossible. if n < 3: return -1 # For any n >= 3, we can simply return the first two cities (1 and 2) return (1, 2) # Sample function call # Uncomment to test the function manually # print(find_starting_cities(4)) # Should output: (1, 2) # print(find_starting_cities(5)) # Should output: (1, 2)"},{"question":"You are tasked with managing a distributed database system. The system consists of n servers, each identified by a unique ID (from 1 to n). Each server can be either active or inactive. All servers start in an inactive state, and you can receive commands to activate or deactivate a server. Moreover, there is a rule that two different servers should not be located in the same rack. For simplicity, you can assume that the server ID directly corresponds to its rack number. Multiple servers in the same rack may lead to a server overload and potential data loss. The system receives m requests in the form of \\"+ i\\" to activate the i-th server, or \\"- i\\" to deactivate the i-th server. To the request \\"+ i\\", the system should respond with: - \\"Server i activated\\" if server i gets activated without causing any conflicts. - \\"Conflict with j\\" if server j from the same rack is already active. To the request \\"- i\\", the system should respond with: - \\"Server i deactivated\\" if server i gets successfully deactivated. - \\"Server i already inactive\\" if server i is already inactive. Input Format: - The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of servers and the number of requests, respectively. - The next m lines each contain a request in the form \\"+ i\\" or \\"- i\\" (1 ≤ i ≤ n). Output Format: - Print m lines — the results of executing each request. Example: Input: 5 6 + 1 + 2 - 2 + 2 - 3 + 3 Output: Server 1 activated Server 2 activated Server 2 deactivated Server 2 activated Server 3 already inactive Server 3 activated Explanation: 1. The first request activates server 1. 2. The second request activates server 2. 3. The third request deactivates server 2. 4. The fourth request reactivates server 2. 5. The fifth request attempts to deactivate an already inactive server 3. 6. The sixth request successfully activates server 3.","solution":"def manage_servers(n, m, requests): active_servers = set() responses = [] for request in requests: action, i = request.split() i = int(i) if action == \'+\': if i in active_servers: responses.append(f\\"Conflict with {i}\\") else: active_servers.add(i) responses.append(f\\"Server {i} activated\\") elif action == \'-\': if i in active_servers: active_servers.remove(i) responses.append(f\\"Server {i} deactivated\\") else: responses.append(f\\"Server {i} already inactive\\") return responses"},{"question":"You are given two rectangular matrices A and B of size N x M. The task is to determine if you can equalize the two matrices by rotating rows of matrix B. Each row of matrix B can be rotated to the right any number of times independently. Formally, you need to check if there exists a series of rotations of the rows in B such that matrix B becomes equal to matrix A. The first line contains two integers N and M (1 ≤ N, M ≤ 100) — the number of rows and columns in the matrices, respectively. The next N lines contain M integers each, representing matrix A. The following N lines contain M integers each, representing matrix B. Output \\"YES\\" if it is possible to rotate the rows of matrix B to make it equal to matrix A, otherwise output \\"NO\\". # Example Input ``` 2 3 1 2 3 4 5 6 3 1 2 6 4 5 ``` Output ``` YES ``` Input ``` 2 3 1 2 3 4 5 6 3 2 1 6 4 5 ``` Output ``` NO ```","solution":"def can_equalize_matrices(N, M, matrix_A, matrix_B): def row_rotations(row): return {tuple(row[i:] + row[:i]) for i in range(len(row))} for row_a in matrix_A: possible_rotations = set() for row_b in matrix_B: possible_rotations = possible_rotations.union(row_rotations(row_b)) if tuple(row_a) not in possible_rotations: return \\"NO\\" return \\"YES\\""},{"question":"Samantha is participating in a charity auction and needs to distribute charity bags filled with gifts. She wants each bag to contain attractive sets of different gifts. There are n different types of gifts, and Samantha has m of each type. To make the bags as attractive as possible, Samantha decides that each bag should contain gifts such that the absolute difference in the number of any two types of gifts in the same bag should be at most 1, ensuring the bags look uniformly filled. Samantha wants to know the maximum number of bags she can prepare under these constraints. The input starts with two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 100000), the number of different types of gifts and the number of gifts of each type. Output a single integer — the maximum number of bags Samantha can prepare. **Example** Input: ``` 3 5 ``` Output: ``` 5 ``` Explanation: Samantha has 3 types of gifts (say A, B, C) and 5 gifts of each type. She can prepare 5 bags where each bag contains one gift of type A, one gift of type B, and one gift of type C. Thus, the total number of bags is 5. Note: If n = 1, Samantha can prepare 5 bags each containing only one type of gift. If n = 2, Samantha can prepare 5 bags where each bag contains either (1 gift of type A and 1 gift of type B) or (2 gifts of type A and 2 gifts of type B) depending on the configuration. The main constraint is maintaining uniform distribution. For n > 2, Samantha can create more diverse sets.","solution":"def max_bags(n, m): Returns the maximum number of bags Samantha can prepare with n different types of gifts and m number of each type. return m"},{"question":"You are working in a lab that produces various chemical compounds. Each compound is represented by a unique combination of elements. Your task is to determine the minimum number of substitutions needed to convert one compound into another. A substitution consists of changing one element in the compound into another element. Given two compounds, represented by strings of equal length, your task is to determine the minimum number of substitutions required to transform the first compound into the second. The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the compounds. The second line contains a string A of length n representing the first compound. The third line contains a string B of length n representing the second compound. Strings A and B only contain uppercase English letters. Output one integer — the minimum number of substitutions needed. Example: Input: 4 HFCL OHHH Output: 4","solution":"def min_substitutions(n, A, B): Returns the minimum number of substitutions needed to transform compound A into compound B. Parameters: n (int): Length of the compounds A (str): String representing the first compound B (str): String representing the second compound Returns: int: Minimum number of substitutions needed substitutions = 0 for i in range(n): if A[i] != B[i]: substitutions += 1 return substitutions"},{"question":"There\'s a secret message hidden inside an array, and it can only be decoded by performing specific operations. The input array consists of `n` integers where each element has a distinct value between `1` and `n`. The goal is to rearrange the array such that the difference between any two adjacent elements is minimized. You need to implement a function `minimize_adjacent_difference(arr: List[int]) -> List[int]` that takes a list of integers and returns a new list where the difference between any two adjacent elements is minimized. Example Input: ``` 5 1 3 5 2 4 ``` Output: ``` 1 2 3 4 5 ``` Input: ``` 4 4 1 3 2 ``` Output: ``` 1 2 3 4 ``` # Input Format - The first line contains an integer `n` (1 <= n <= 10^5) — the number of elements in the array. - The second line contains `n` integers `arr[1], arr[2], ..., arr[n]` (1 <= arr[i] <= n) — distinct values between `1` and `n`. The function should return a list of integers that represents the rearranged array where the difference between any two adjacent elements is minimized.","solution":"from typing import List def minimize_adjacent_difference(arr: List[int]) -> List[int]: Rearranges the array such that the difference between any two adjacent elements is minimized. # Sort the array to minimize the adjacent differences. sorted_arr = sorted(arr) return sorted_arr"},{"question":"In a far-away land, there is a special kind of tournament that involves a sequence of duels. Each participant has a certain skill level represented by an integer. During a duel, the participant with the lower skill level always loses and the winner\'s skill level increases by the skill level of the loser. You are given the initial skill levels of all participants. The tournament proceeds with the duels until only one participant remains. Your task is to determine the maximum possible final skill level of the last remaining participant. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with a single integer n (1 ≤ n ≤ 1000) — the number of participants. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the initial skill levels of the participants. For each test case, output a single integer — the maximum possible final skill level of the last remaining participant. In the first example, the participant with skill levels [1, 2, 3] can duel in such a way that he ends up with a final skill level of 6: - Duel participant with skill 1 and participant with skill 2: skill levels are now [3, 3] - Duel the remaining participants with skill 3 and skill 3, the final skill level is 6 In the second example, participants with skill levels [1, 2, 5] can duel in such a way to reach a final skill level of 8: - Duel participant with skill 1 and participant with skill 2: skill levels are now [3, 5] - Duel the remaining participants with skill 3 and skill 5, the final skill level is 8 In the third example, all participants already have equal skill levels. The final skill levels would be the sum of all participants: [4, 4] skill level is 8.","solution":"def final_skill_levels(t, test_cases): This function calculates the maximum possible final skill level of the last remaining participant for each test case. results = [] for case in test_cases: n, skill_levels = case max_skill = sum(skill_levels) results.append(max_skill) return results"},{"question":"Polycarp is practicing for various programming contests with his friends. Every day, he competes with one of his friends in solving programming problems and records the number of problems solved by both. Polycarp has n friends. For each friend, he has a record of the number of problems he solved and the number of problems the friend solved in each of their competitions. He wants to find out how many competitions he won against all his friends. A competition is considered won by Polycarp if he solved more problems than his friend in that competition. The input consists of multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case contains multiple lines. The first line of a test case contains a single integer n (1 le n le 100) — the number of friends. For each friend, the first line contains an integer m_i (1 le m_i le 100) — the number of competitions with that friend. Each of the next m_i lines contains two integers p_{i,j} and f_{i,j} (0 le p_{i,j}, f_{i,j} le 100) — the number of problems solved by Polycarp and the friend in the j-th competition, respectively. For each test case, output a single line containing the total number of competitions won by Polycarp across all his friends. # Example Input: ``` 2 2 3 10 5 7 7 8 9 2 6 6 5 4 1 1 3 2 ``` Output: ``` 2 1 ``` # Explanation In the first test case: - Polycarp has 2 friends. - For the first friend, they had 3 competitions. Polycarp won the first competition (10 > 5), lost the second (7 = 7), and lost the third (8 < 9). - For the second friend, they had 2 competitions. Polycarp won the first competition (6 > 6), and lost the second (5 < 4). In the second test case: - Polycarp has 1 friend. - For this friend, they had 1 competition. Polycarp won the competition (3 > 2). Hence, Polycarp won a total of 2 competitions in the first test case and 1 competition in the second test case.","solution":"def polycarp_competitions(input_data): data = input_data.strip().split(\'n\') index = 0 t = int(data[index]) index += 1 results = [] for _ in range(t): n = int(data[index]) index += 1 total_wins = 0 for _ in range(n): m_i = int(data[index]) index += 1 for _ in range(m_i): p_i_j, f_i_j = map(int, data[index].split()) index += 1 if p_i_j > f_i_j: total_wins += 1 results.append(total_wins) return results"},{"question":"Petra is a software engineer working on a project that involves analyzing the stock market. She has n days of data, where each day\'s stock value is an integer. She wants to find a contiguous subarray (a subarray consists of consecutive elements) that has the maximum possible sum. However, if there are multiple subarrays with the same maximum sum, she prefers the shortest one. If there is still a tie, she prefers the subarray that begins the earliest. Help Petra by writing a function that finds such a subarray. Your function should return the sum of this subarray, the length of this subarray, and the starting and ending indices of this subarray (1-based). If the array is empty, return 0, 0, 0, 0. The first line of the input contains an integer n (1 ≤ n ≤ 200 000), the number of days. The second line contains n integers, representing the stock values for n consecutive days. Each value will be between -10^9 and 10^9 inclusive. Output the sum, length, starting index, and ending index of the desired subarray. # Example Input: ``` 8 -2 1 -3 4 -1 2 1 -5 4 ``` Output: ``` 6 4 4 7 ``` Explanation: The subarray [4, -1, 2, 1] has the maximum sum of 6. This subarray is of length 4, starts at index 4, and ends at index 7. Input: ``` 5 -1 -2 -3 -4 -5 ``` Output: ``` -1 1 1 1 ``` Explanation: The subarray [-1] has the maximum sum of -1. This subarray is of length 1, starts at index 1, and ends at index 1.","solution":"def find_maximum_subarray(n, arr): if n == 0 or not arr: return 0, 0, 0, 0 max_sum = current_sum = arr[0] start = end = temp_start = 0 min_length = 1 for i in range(1, n): if current_sum < 0: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if (current_sum > max_sum or (current_sum == max_sum and (i - temp_start + 1 < min_length))): max_sum = current_sum start = temp_start end = i min_length = i - temp_start + 1 return max_sum, min_length, start + 1, end + 1"},{"question":"You are given an array consisting of n integers and an array of m queries. Each query contains two integers x and y representing indices in the array. For each query, you need to find the sum of the subarray starting from index x and ending at index y and determine if it is a prime number. If the sum is a prime number, return \\"YES\\", otherwise return \\"NO\\". The first line of input contains two integers n and m (1 le n, m le 100,000) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1,000) — the elements of the array. Each of the next m lines contains two integers x and y (1 le x le y le n) — the indices for each query. Indices are 1-based. For each query, print \\"YES\\" if the sum of the subarray from x to y is a prime number, otherwise print \\"NO\\". # Sample Input ``` 6 3 2 3 7 1 5 8 1 3 2 5 4 6 ``` # Sample Output ``` YES NO NO ``` # Note - For the first query, the subarray sum from index 1 to 3 is 2 + 3 + 7 = 12, which is not a prime number. - For the second query, the subarray sum from index 2 to 5 is 3 + 7 + 1 + 5 = 16, which is not a prime number. - For the third query, the subarray sum from index 4 to 6 is 1 + 5 + 8 = 14, which is not a prime number.","solution":"import math def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def range_sum_is_prime(n, m, array, queries): # Precompute prefix sums for faster range sum calculations. prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + array[i] results = [] for x, y in queries: # Calculate the sum for the range [x-1, y-1] in 0-based index total_sum = prefix_sum[y] - prefix_sum[x - 1] if is_prime(total_sum): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers. An operation consists of removing two adjacent elements and replacing them with their sum. The goal is to determine the minimum possible value of the array after performing exactly n-1 operations (i.e., reducing the array to a single element). For example, given the array [4, 2, 3, 5], we can perform the operations as follows: - Remove elements 2 and 3, and replace them with their sum: [4, 5, 5] - Remove elements 4 and 5, and replace them with their sum: [9, 5] - Remove elements 9 and 5, and replace them with their sum: [14] The minimum value of the array after all operations is 14. Input: - The first line contains an integer n (2 leq n leq 100), the number of elements in the array. - The second line contains n integers separated by spaces, representing the array elements. Each element is in the range 1 leq a_i leq 1000. Output: - Print one integer, which is the minimum value of the array you can obtain after exactly n-1 operations. Example: Input: 4 4 2 3 5 Output: 14","solution":"def minimum_sum(arr): This function takes an array as input and returns the minimum possible value of the array after performing n-1 operations. Each operation consists of removing two adjacent elements and replacing them with their sum. The strategy is to keep summing the smallest adjacent elements. :param arr: list of integers :return: integer, the minimum possible value of the array while len(arr) > 1: # Find the smallest adjacent pair min_sum = float(\'inf\') min_index = -1 for i in range(len(arr) - 1): if arr[i] + arr[i+1] < min_sum: min_sum = arr[i] + arr[i+1] min_index = i # Replace the smallest adjacent pair with their sum arr[min_index] = min_sum arr.pop(min_index + 1) return arr[0] # Example use case n = 4 arr = [4, 2, 3, 5] print(minimum_sum(arr)) # Output should be 14"},{"question":"You are organizing a small coding competition with n participants. Each participant has completed a round of code submissions, and their scores are recorded in an array. To prepare the leaderboard, you need a program that sorts the participants by their scores in descending order. If two participants have the same score, then the participant who achieved that score first will come first in the sorted order. You must now write a program to accomplish this task. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of participants. The second line contains n integers s1, s2, ..., sn (0 ≤ si ≤ 10^9) — the scores of the participants in the order they submitted. Output the scores of the participants sorted in descending order. If multiple participants have the same score, maintain their initial order of submission. # Example Input: 5 100 200 150 200 50 Output: 200 200 150 100 50 In this example, participants with scores 200 come first in the sorted order since they have the highest scores and they maintain the order of their initial submission. After them, is the participant with the score of 150, followed by the one with 100, and finally the participant with the score of 50.","solution":"def sort_scores(n, scores): Sorts the participants\' scores in descending order, maintaining the order of submission for equal scores. :param n: Number of participants :param scores: List of scores :return: List of scores sorted in descending order return sorted(scores, reverse=True)"},{"question":"Given an array of integers `A` of length `n`, we define the weight of an element `A[i]` as the number of elements in the subarray `A[1]` to `A[i-1]` that are smaller than `A[i]`. Your task is to find the element with the highest weight in a given array. The first line contains an integer `n` (1 le n le 5 cdot 10^5) — the length of the array. The second line contains `n` integers `A[1], A[2], ..., A[n]` (-10^9 leq A[i] leq 10^9) — the elements of the array. Output a single integer — the element with the highest weight. If there are multiple elements with the same highest weight, output the one that appears first in the array. # Example Input: ``` 5 1 3 2 5 4 ``` Output: ``` 5 ``` Explanation: - Weight of `A[2] = 3` is `1` (as `A[1] = 1` is smaller than `3`). - Weight of `A[3] = 2` is `1` (as `A[1] = 1` is smaller than `2`). - Weight of `A[4] = 5` is `3` (as `A[1] = 1`, `A[2] = 3`, and `A[3] = 2` are smaller than `5`). - Weight of `A[5] = 4` is `3` (as `A[1] = 1`, `A[2] = 3`, and `A[3] = 2` are smaller than `4`). Element with the highest weight is `5`.","solution":"def find_element_with_highest_weight(n, A): max_weight = -1 element_with_max_weight = None for i in range(n): current_weight = sum(1 for j in range(i) if A[j] < A[i]) if current_weight > max_weight: max_weight = current_weight element_with_max_weight = A[i] return element_with_max_weight # Example usage: n = 5 A = [1, 3, 2, 5, 4] print(find_element_with_highest_weight(n, A)) # Output: 5"},{"question":"A medieval kingdom has a network of cities connected by bidirectional roads. The kingdom is under the protection of a powerful dragon. The dragon lives in a cave located in one of the cities. The king wants to ensure that in the event of an invasion, the dragon can reach any city quickly to protect it. Your task is to determine the minimum time it takes for the dragon to reach the furthest city from its cave. You are given an integer n (1 le n le 100,000) representing the number of cities, and n-1 lines, each containing three integers u, v, and w (1 le u, v le n, 1 le w le 10^5), representing a road between cities u and v with a travel time of w. The last line contains one integer d (1 le d le n), the city where the dragon resides. Your task is to output a single integer, the minimum time it takes for the dragon to reach the furthest city from its residence in city d. Input: - The first line contains an integer n. - The next n-1 lines each contain three integers u, v, and w. - The last line contains an integer d. Output: - Output a single integer, the minimum time it takes for the dragon to reach the furthest city from city d. Example: Input: ``` 6 1 2 3 1 3 2 3 4 4 3 5 1 4 6 6 3 ``` Output: ``` 10 ``` In this example, the dragon lives in city 3. The furthest city it can reach is city 6, and the minimum time to reach it is 10 (3 -> 4 -> 6).","solution":"import heapq def find_maximum_travel_time(n, roads, dragon_city): graph = [[] for _ in range(n+1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start): distances = [float(\'inf\')] * (n + 1) distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_city = heapq.heappop(pq) if current_distance > distances[current_city]: continue for neighbor, weight in graph[current_city]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances distances_from_dragon_city = dijkstra(dragon_city) max_distance = max(distances_from_dragon_city[1:]) return max_distance # Parsing input example: # number of cities n = 6 # roads: each element (u, v, w) represents a road between city u and city v with weight w roads = [(1, 2, 3), (1, 3, 2), (3, 4, 4), (3, 5, 1), (4, 6, 6)] # dragon\'s residing city dragon_city = 3 print(find_maximum_travel_time(n, roads, dragon_city)) # Output should be 10"},{"question":"You are given an array of integers where every element appears three times except for one. Find that single one which appears only once. The first line contains an integer n (4 le n le 3 times 10^5) — the size of the array. It is guaranteed that n-1 is divisible by 3. The second line contains n space-separated integers representing the array elements. Each integer in the array is between -10^9 and 10^9, inclusive. Output a single integer — the number that appears only once. For example, for the array: [2, 2, 3, 2], the output would be 3 because 3 is the only number that appears exactly once. In the sample input: ``` 7 2 2 3 2 1 1 1 ``` The number 3 appears once and all other numbers appear three times. Thus the output should be: ``` 3 ```","solution":"def single_non_triplet(nums): Returns the element that appears exactly once in the array where every other element appears three times. once, twice = 0, 0 for num in nums: # If \'num\' is seen once, add it to \'once\' except the bits already in \'twice\' once = ~twice & (once ^ num) # If \'num\' is seen twice, add it to \'twice\' except the bits already in \'once\' twice = ~once & (twice ^ num) return once"},{"question":"In a distant kingdom, a series of fortresses are connected by roads. Each road has a certain width, and only horses of specific widths can pass through these roads. Knights often need to travel from one fortress to another and seek to take their horses along. Your task is to determine whether it\'s possible for a knight to reach a destination fortress starting from an initial fortress with a horse of a given width. There are N fortresses and M roads in the kingdom. Each road connects two fortresses and has a certain width. Given the width of the horse and the starting and destination fortresses, determine if there\'s a path that allows the knight to travel with their horse from the starting fortress to the destination fortress. Input begins with two integers N and M (1 ≤ N, M ≤ 10^5), representing the number of fortresses and roads respectively. Following the first line, there are M lines, each containing three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^6), representing a road between fortress u and fortress v with width w. The next line contains four integers s, t, and hw (1 ≤ s, t ≤ N, 1 ≤ hw ≤ 10^6), where s is the starting fortress, t is the destination fortress, and hw is the width of the knight\'s horse. Output \\"YES\\" if the knight can travel from fortress s to fortress t with a horse of width hw, otherwise output \\"NO\\". Example: Input: 6 7 1 2 2 1 3 4 2 4 3 3 4 2 3 6 5 4 5 1 5 6 2 1 6 3 Output: YES In the example, the knight can travel from fortress 1 to fortress 6 with a horse of width 3 by taking the path 1 -> 3 -> 6.","solution":"from collections import deque, defaultdict def can_travel(N, M, roads, s, t, hw): graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) queue = deque([s]) visited = set() visited.add(s) while queue: current = queue.popleft() if current == t: return \\"YES\\" for neighbor, width in graph[current]: if neighbor not in visited and width >= hw: visited.add(neighbor) queue.append(neighbor) return \\"NO\\""},{"question":"John loves ancient manuscripts and mathematical patterns. One day, he came across a special type of sequence inscribed on a parchment. The sequence follows a rule that every number in the sequence is the sum of the absolute differences of the previous number\'s digits. He found it fascinating and decided to explore these sequences further. Given a starting positive integer n and an integer k representing the number of terms, John wants to know the k-th term of this sequence. Can you help him? Write a program that computes the k-th term of the sequence starting from n. # Input The input consists of two space-separated integers n and k (1 ≤ n ≤ 10^9, 1 ≤ k ≤ 1000). # Output Print the k-th term of the sequence. # Example **Input:** 123 4 **Output:** 30 **Explanation:** 1. Start with n = 123. 2. The sum of the absolute differences of its digits (1, 2, 3): |1-2| + |2-3| = 1 + 1 = 2 ⇒ Second term is 2. 3. The sum of the absolute differences of its digits (2): Since it has only one digit, the result is 0 ⇒ Third term is 0. 4. Continue this until k terms have been calculated. # Note: 1. If the number has only one digit, then the sequence will continuously produce 0 after that term. Implement the solution efficiently to handle the constraints.","solution":"def kth_term(n, k): Returns the k-th term of the sequence starting from n. def sum_of_absolute_differences(num): digits = list(map(int, str(num))) return sum(abs(digits[i] - digits[i+1]) for i in range(len(digits) - 1)) term = n for _ in range(k - 1): term = sum_of_absolute_differences(term) return term"},{"question":"You are given a directed graph with `n` nodes and `m` edges. Each node is numbered from `1` to `n`. Each edge in the graph has a weight associated with it, which can be positive, negative, or zero. Your task is to determine if there exists a negative weight cycle in the graph. A negative weight cycle is a cycle in the graph where the sum of the edge weights in the cycle is negative. # Input The first line of input contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), representing the number of nodes and edges in the graph, respectively. The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, -1000 ≤ w ≤ 1000), which describe an edge from node `u` to node `v` with weight `w`. # Output Output a single line with the word \\"YES\\" if there exists a negative weight cycle in the graph. Otherwise, output \\"NO\\". # Sample Input ``` 4 4 1 2 1 2 3 -1 3 4 -1 4 2 -1 ``` # Sample Output ``` YES ``` # Explanation In the sample input, there is a cycle (2 -> 3 -> 4 -> 2) with a total weight of -3, which is a negative weight cycle. Hence, the output is \\"YES\\".","solution":"def detect_negative_cycle(n, m, edges): Detects if there is a negative weight cycle in the given graph. Parameters: n (int): The number of nodes in the graph. m (int): The number of edges in the graph. edges (list of tuples): Each tuple contains three integers (u, v, w) specfying an edge from node u to node v with weight w. Returns: str: \\"YES\\" if there is a negative weight cycle, \\"NO\\" otherwise. inf = float(\'inf\') # Initialize distances: set all distances to infinity, except the first node dist = [inf] * (n + 1) dist[1] = 0 # Relax all edges n-1 times for _ in range(n - 1): for u, v, w in edges: if dist[u] != inf and dist[u] + w < dist[v]: dist[v] = dist[u] + w # Check for negative weight cycles for u, v, w in edges: if dist[u] != inf and dist[u] + w < dist[v]: return \\"YES\\" return \\"NO\\""},{"question":"In a distant future, robots have become an integral part of human life, assisting in various tasks and activities. One particular robot model, RoboHelper, specializes in scheduling and organizing events. RoboHelper has been given a task to manage a series of events, ensuring that no two events overlap. Each event i is defined by a start time Si and an end time Ei. You need to design an algorithm that helps RoboHelper select the maximum number of non-overlapping events. The first line of input contains an integer n (1 ≤ n ≤ 10^5) which represents the number of events. Each of the next n lines contains two integers Si and Ei (0 ≤ Si < Ei ≤ 10^9), the start and end times of the i-th event. Your task is to implement a function that reads the input, computes the maximum number of non-overlapping events that RoboHelper can schedule, and outputs this number. Example Input: ``` 5 1 4 2 3 3 5 7 8 6 10 ``` Example Output: ``` 3 ``` In this example, the optimal set of non-overlapping events that RoboHelper can schedule are events with time intervals [1, 4], [7, 8], and [6, 10]. Therefore, the output is 3. Write a function `max_non_overlapping_events` that takes a list of tuples of start and end times and returns the maximum number of non-overlapping events that can be scheduled. Here is the function signature: ```python def max_non_overlapping_events(events: List[Tuple[int, int]]) -> int: # Your code here ``` Note: - You may assume that the input format is valid. - The provided function will be tested against multiple test cases via an automated testing system. Ensure your code is efficient and handles large inputs within a reasonable time frame.","solution":"from typing import List, Tuple def max_non_overlapping_events(events: List[Tuple[int, int]]) -> int: Computes the maximum number of non-overlapping events. :param events: List of (start, end) tuples representing the events. :return: Maximum number of non-overlapping events. # Sort the events based on the end time events.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given two strings s and t. Your task is to calculate the minimum number of operations required to convert string s into string t. The only operations allowed are insertion, deletion, and substitution of a single character. Input format: The first line contains the string s (1 ≤ |s| ≤ 1000). The second line contains the string t (1 ≤ |t| ≤ 1000). Output format: Output a single integer — the minimum number of operations required. Example: Input: s = \\"kitten\\" t = \\"sitting\\" Output: 3 Explanation: - Substitute \'k\' with \'s\' -> \\"sitten\\" - Substitute \'e\' with \'i\' -> \\"sittin\\" - Insert \'g\' at the end -> \\"sitting\\" The minimum number of operations required to convert \\"kitten\\" to \\"sitting\\" is 3.","solution":"def min_operations(s, t): Computes the minimum number of operations required to convert string s into string t using insertion, deletion, or substitution of a single character. m, n = len(s), len(t) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array initially for i in range(m + 1): for j in range(n + 1): # If s is empty, then insert all characters of t if i == 0: dp[i][j] = j # If t is empty, then remove all characters of s elif j == 0: dp[i][j] = i # If last characters are the same, ignore them and recur for remaining elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last character is different, consider all three operations: # insert, remove, replace, and take the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Given an array of n integers, you want to rearrange the array in such a way that it becomes a non-decreasing sequence. You can swap any two adjacent elements in the array. Determine the minimum number of adjacent swaps required to sort the array. Input The first line contains an integer n (1 ≤ n ≤ 5000), the number of elements in the array. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), representing the elements of the array. Output Print a single integer, the minimum number of adjacent swaps required to sort the array. Example Input: 5 5 1 2 3 4 Output: 4 Explanation: To sort the array [5, 1, 2, 3, 4], we need at least 4 swaps: 1. Swap 5 and 1 => [1, 5, 2, 3, 4] 2. Swap 5 and 2 => [1, 2, 5, 3, 4] 3. Swap 5 and 3 => [1, 2, 3, 5, 4] 4. Swap 5 and 4 => [1, 2, 3, 4, 5] Thus, the minimum number of adjacent swaps required is 4.","solution":"def min_adjacent_swaps(nums): Returns the minimum number of adjacent swaps required to sort the array. swaps = 0 n = len(nums) # Apply bubble sort and count the swaps for i in range(n): for j in range(n-1): if nums[j] > nums[j+1]: nums[j], nums[j+1] = nums[j+1], nums[j] swaps += 1 return swaps"},{"question":"You are given a string consisting of n characters, which could be either lowercase English letters or digits. Your task is to reorder the string in such a way that all the digits appear before all the letters, while maintaining the relative order of both the digits and the letters. In other words, the resulting string should have all digits in their original order followed by all letters in their original order. The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the length of the string. The second line contains a string of length n consisting of lowercase English letters and digits. Output the reordered string. Examples: Input: 10 a1b2c3d4e5 Output: 12345abcde Input: 5 abc12 Output: 12abc Explanation: In the first example, the digits 1, 2, 3, 4, 5 are extracted and placed before the letters a, b, c, d, e while maintaining their relative order. In the second example, the digits 1, 2 are placed before the letters a, b, c maintaining their original order.","solution":"def reorder_string(n, s): Reorders the string such that all digits appear before all the letters while maintaining the relative order of digits and letters. Parameters: n (int): Length of the string s (str): The input string consisting of lowercase letters and digits Returns: str: The reordered string digits = [] letters = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(digits) + \'\'.join(letters)"},{"question":"During the summer, a local farmer grows n types of crops on his farm. Each type of crop has a certain amount of water required for healthy growth. The farmer has m different irrigation systems, each providing a different fixed amount of water each day. The farmer wants to know the maximum number of unique types of crops he can water without exceeding the available water provided by the irrigation systems. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of crop types and the number of irrigation systems, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the amount of water required by each type of crop. The third line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 1000) — the amount of water provided by each irrigation system. Print a single integer — the maximum number of unique types of crops the farmer can water without exceeding the available water from the irrigation systems. Consider the first test sample. The farmer can use three irrigation systems to water crops with water requirements 3, 2, and 1 respectively. The total water provided by these three systems (3+2+1=6) does not exceed 6. In the second sample, the farmer can water crops with water requirements 4, 2, and 1 respectively. There is enough water to cover these requirements (4 + 2 + 1 = 7 ≤ 8).","solution":"def max_unique_crops(n, m, crop_water, irrigation_water): # Sort the water required for each crop in ascending order crop_water.sort() # Sort the water provided by each irrigation system in ascending order irrigation_water.sort() total_water = sum(irrigation_water) max_crops = 0 current_water = 0 for water in crop_water: if current_water + water <= total_water: current_water += water max_crops += 1 else: break return max_crops"},{"question":"Given a list of n integers, let\'s label it `arr` where `n` is the size of the list. Your task is to manipulate the list based on q operations described as follows: Each operation is given by two integers: `l` and `r`, where 1 ≤ l ≤ r ≤ n. This operation affects the elements from the l-th to the r-th position (both inclusive) in the list as follows: 1. If the number of elements in the specified range is even, reverse the elements in that range. 2. If the number of elements in the specified range is odd, move the first element of the range to the end of the range (rotate left by one position). After performing all q operations sequentially on the list, return the final list. # Input - The first line of input contains two integers n and q (1 ≤ n, q ≤ 100,000) — the size of the list and the number of operations, respectively. - The second line contains n space-separated integers representing the list `arr`. - Each of the next q lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n) — the indices specifying the range of the operation. # Output - Print the final list after performing all the operations. # Example Input ``` 5 3 1 2 3 4 5 1 3 2 5 1 5 ``` Output ``` 5 4 2 1 3 ``` # Explanation 1. For the range l=1 and r=3, the range is [1, 2, 3]. It contains 3 elements, which is odd, so we move the first element to the end. The list becomes [2, 3, 1, 4, 5]. 2. For the range l=2 and r=5, the range is [3, 1, 4, 5]. It contains 4 elements, which is even, so we reverse the elements. The list becomes [2, 5, 4, 1, 3]. 3. For the range l=1 and r=5, the range is [2, 5, 4, 1, 3]. It contains 5 elements, which is odd, so we move the first element to the end. The list becomes [5, 4, 1, 3, 2].","solution":"def manipulate_list(n, q, arr, operations): for l, r in operations: l -= 1 # convert to 0-based index subarray = arr[l:r] if (r - l) % 2 == 0: # even length subarray.reverse() else: # odd length subarray.append(subarray.pop(0)) arr[l:r] = subarray return arr"},{"question":"Given an arithmetic expression as a string, you are to determine whether the expression is valid. The rules for a valid arithmetic expression are as follows: 1. The expression must only contain integers, addition (+), subtraction (-), multiplication (*), division (/) operators, and parentheses (() and )). 2. Operators must be surrounded by numbers or valid sub-expressions. 3. Division by zero is not allowed. 4. Parentheses must be balanced. 5. The expression must not contain any spaces. For example, \\"3*(1+2)-4/2\\" is a valid expression, but \\"3*(1+2)-4/0\\" is invalid due to division by zero, and \\"3*(1+2))-4/2\\" is invalid due to unbalanced parentheses. The only line of input contains the arithmetic expression as a string (1 ≤ |s| ≤ 1000). Print \\"Valid\\" if the expression is valid, otherwise print \\"Invalid\\". # Examples: Example 1: Input: ``` 3*(1+2)-4/2 ``` Output: ``` Valid ``` Example 2: Input: ``` 3*(1+2))-4/2 ``` Output: ``` Invalid ``` Example 3: Input: ``` 3*(1+2)-4/0 ``` Output: ``` Invalid ``` Example 4: Input: ``` 3*(1)+2/(0) ``` Output: ``` Invalid ```","solution":"import re def is_valid_expression(expression): # Check if the expression contains invalid characters if re.search(r\\"[^0-9+-*/()]\\", expression): return False # Check for balanced parentheses balance = 0 for char in expression: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: return False if balance != 0: return False # Check for invalid sequences or invalid operators token_pattern = re.compile(r\\"^[0-9+-*/()]+\\") if not token_pattern.match(expression): return False # Build a list of tokens tokens = re.findall(r\'[0-9]+|[+-*/()]\', expression) # Check for initial and final invalid characters if tokens[0] in \'+-*/\' or tokens[-1] in \'+-*/\': return False # Check for valid operator surrounding prev_token = None for token in tokens: if token in \'+-*/\': if prev_token is None or prev_token in \'+-*/(\': return False elif token == \'(\': if prev_token and prev_token not in \'+-*/(\': return False elif token == \')\': if prev_token in \'+-*/(\': return False prev_token = token # Validate ranges and zero division expr_no_spaces = expression.replace(\' \', \'\') try: evaluated = eval(expr_no_spaces) if isinstance(evaluated, (float, int)): return True return False except ZeroDivisionError: return False except: return False def check_expression(expression): return \\"Valid\\" if is_valid_expression(expression) else \\"Invalid\\""},{"question":"A famous company has built an innovative robot vacuum cleaner that can navigate a room in a grid fashion. The room is modeled as a 2D grid of size n x m with some obstacles. The robot cleaner can move up, down, left, or right to an adjacent cell, but it cannot move into a cell with an obstacle. The ultimate goal is for the robot to reach a specific target position starting from a given initial position with the minimum number of moves. You are given the dimension of the grid, the initial position of the robot, the target position, and the locations of the obstacles in the grid. Design an algorithm to find the minimum number of moves required for the robot to reach its target. If it is impossible for the robot to reach the target, return -1. The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The second line contains two space-separated integers x1 and y1 (1 ≤ x1 ≤ n, 1 ≤ y1 ≤ m) — the initial position of the robot. The third line contains two space-separated integers x2 and y2 (1 ≤ x2 ≤ n, 1 ≤ y2 ≤ m) — the target position of the robot. The next line contains a single integer k (0 ≤ k ≤ n * m) — the number of obstacles in the grid. Each of the next k lines contains two space-separated integers ox and oy (1 ≤ ox ≤ n, 1 ≤ oy ≤ m) — the positions of the obstacles. Print the minimum number of moves required for the robot to reach its target position. If it is impossible, print -1. In the first example with a 3x3 grid, the initial position is (1, 2), the target position is (3, 2), and there is 1 obstacle at (2, 2). The minimum number of moves is 4. In the second example with a 3x3 grid, the initial position is (1, 1), the target position is (3, 3), and there is 1 obstacle at (2, 2). The minimum number of moves is 4.","solution":"from collections import deque def min_moves_to_target(n, m, start, target, obstacles): x1, y1 = start x2, y2 = target grid = [[0 for _ in range(m)] for _ in range(n)] for ox, oy in obstacles: grid[ox-1][oy-1] = 1 # Mark the obstacle in the grid if (x1-1, y1-1) == (x2-1, y2-1): return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(x1-1, y1-1, 0)]) # (x, y, distance) visited = set((x1-1, y1-1)) while queue: x, y, dist = queue.popleft() for dir_x, dir_y in directions: nx, ny = x + dir_x, y + dir_y if nx == x2-1 and ny == y2-1: return dist + 1 if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Hacker Anna has intercepted a series of network packets that are represented as a series of integers, each denoting the size of individual packets. She knows that each packet belongs to one of several possible channels, and packets from the same channel have the same size. However, due to interference, some packet sizes are missing from her list. Your task is to identify the possible number of distinct channels based on the given packet sizes. The input consists of a single line of integers, each representing the size of a packet. The number of packets will not exceed 10^5, and each packet size will be within the range of 1 to 10^6. Print the integer that represents the minimum possible number of distinct channels based on the given packet sizes. Example: Input: 4 4 2 3 3 Output: 3 Explanation: This input implies there are packets of sizes 4, 2, and 3. The minimum number of distinct channels that can explain this set of packets is 3 (one channel for each unique packet size).","solution":"def distinct_channels(packet_sizes): Returns the minimum number of distinct channels based on the given packet sizes. return len(set(packet_sizes)) # Example usage: # input_packets = [4, 4, 2, 3, 3] # print(distinct_channels(input_packets)) # Output: 3"},{"question":"You are given a string consisting of lowercase English letters. Your task is to remove the minimum number of characters from the string so that no two adjacent characters are the same. The first line of the input contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 200), consisting of lowercase English letters. For each test case, in a separate line, print one integer — the minimum number of characters you need to remove from the given string so that no two adjacent characters are the same. # Example Input ``` 3 ab aabb abcabc ``` Output ``` 0 2 0 ``` # Explanation - In the first test case, no adjacent characters are the same, so no removal is needed. - In the second test case, you can remove the second \'a\' and the second \'b\' to get \\"ab\\". - In the third test case, already no adjacent characters are the same.","solution":"def min_removals_to_avoid_adjacent_duplicates(t, strings): Determines the minimum number of characters to remove from each string such that no two adjacent characters are the same. :param t: Integer, the number of test cases :param strings: List of strings, each string for checking minimal removals :return: List of integers, each representing the minimal removals for corresponding string results = [] for s in strings: count = 0 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 results.append(count) return results"},{"question":"Alex loves to play with strings, especially palindromes. A palindrome is a word, phrase, number, or other sequences of characters that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). Given a string `s`, Alex wants to know the length of the longest palindrome that can be formed using the characters of `s`. Remember, you can rearrange the characters. Your task is to write a function that finds the length of the longest palindrome that can be formed using the characters of `s`. # Input - A single string `s` of length `1 ≤ |s| ≤ 10^5`, which consists of lowercase and uppercase English letters. # Output - Print a single integer — the length of the longest palindrome that can be formed using the characters of `s`. # Examples **Example 1:** ``` Input: abccccdd Output: 7 Explanation: One of the longest palindromes that can be built is \\"dccaccd\\", which has a length of 7. ``` **Example 2:** ``` Input: Aa Output: 1 Explanation: One of the longest palindromes that can be built is \\"A\\" or \\"a\\", which has a length of 1. ``` # Note: - A palindrome can have at most one character with an odd count as its center. - You must consider both uppercase and lowercase letters as distinct characters.","solution":"def longest_palindrome_length(s): Returns the length of the longest palindrome that can be formed using the characters of the string `s`. from collections import Counter char_counts = Counter(s) length = 0 odd_found = False for count in char_counts.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Mike, a brilliant artist, loves creating unique patterns using dots on his drawing board. One day, he decided to create an \\"X\\" pattern with dots on an n x n grid. An \\"X\\" pattern is created by drawing two diagonal lines from the four corners of the grid that intersect at the center. Given an odd integer n (3 ≤ n ≤ 99), print an n x n grid where the \\"X\\" pattern is formed using the letter \'X\' and the remaining spaces are filled with the letter \'O\'. The first line contains an odd integer n — the size of the grid. Print n lines, each containing n characters, representing the grid with the \\"X\\" pattern. # Example: Input: 5 Output: XOOOX OXOXO OOXOO OXOXO XOOOX Explanation: For n = 5, the \\"X\\" pattern is formed by placing \'X\' at positions (1,1), (2,2), (3,3), (4,4), (5,5) for the first diagonal and (1,5), (2,4), (3,3), (4,2), (5,1) for the second diagonal. All other positions are filled with \'O\'.","solution":"def generate_x_pattern(n): Generate an n x n grid with an \'X\' pattern. Parameters: n (int): Size of the grid, must be an odd integer between 3 and 99 (inclusive). Returns: list: A list of strings representing the n x n grid with the \'X\' pattern. if n < 3 or n > 99 or n % 2 == 0: raise ValueError(\\"n must be an odd integer between 3 and 99\\") grid = [[\'O\'] * n for _ in range(n)] for i in range(n): grid[i][i] = \'X\' grid[i][n - i - 1] = \'X\' return [\'\'.join(row) for row in grid]"},{"question":"You are given an array of n integers. You are allowed to perform a series of operations, where in each operation you choose a subarray of length at most k and reverse the order of elements in that subarray. Find the minimum number of operations required to sort the array in non-decreasing order. The first line of input contains two integers n and k (1 ≤ n ≤ 100,000, 1 ≤ k ≤ n) — the number of elements in the array and the maximum length of the subarray that can be selected. The second line of input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10⁹) — the elements of the array. Output a single integer — the minimum number of operations required to sort the array. If it is impossible to sort the array using these operations, output -1.","solution":"def min_operations_to_sort(n, k, arr): Returns the minimum number of operations required to sort the array in non-decreasing order. If it is impossible, return -1. sorted_arr = sorted(arr) if k == 1: return -1 if arr != sorted_arr else 0 operations = 0 i = 0 while i < n: if arr[i] != sorted_arr[i]: j = i while j < n and arr[j] != sorted_arr[i]: j += 1 if j == n: return -1 if j - i + 1 <= k: arr[i:j + 1] = arr[i:j + 1][::-1] operations += 1 else: return -1 i += 1 return operations"},{"question":"In a futuristic city, there are several power stations providing electricity and storage units storing the power. The power stations and the storage units are connected by a complex network of pipes. Each pipe connects exactly two power stations or storage units and has a certain capacity indicating how much power it can transport. The city officials want to maximize the flow of electricity from a specific power station to a specific storage unit while ensuring that no pipe exceeds its capacity. You need to write a program to determine the maximum flow of electricity from the given power station to the given storage unit. The first line of the input consists of three integers: - n: the total number of nodes (power stations + storage units), (2 ≤ n ≤ 500) - m: the number of pipes (1 ≤ m ≤ 10,000) - s and t: the source power station and the target storage unit (1 ≤ s, t ≤ n and s neq t) Each of the next m lines contains three integers: - u, v: the nodes connected by this pipe (1 ≤ u, v ≤ n and u neq v) - c: the capacity of the pipe (1 ≤ c ≤ 100,000) Print one integer, the maximum flow of electricity from the source power station s to the target storage unit t. The first example provides the following input: ``` 4 5 1 4 1 2 1000 2 4 1000 1 3 1000 3 4 1000 2 3 1 ``` The output should be: ``` 2000 ``` Explanation: In this setup, multiple paths can be used to transport electricity from node 1 to node 4, and the optimal flow distribution ensures that the overall capacity from the source to the target is maximized.","solution":"from collections import deque def bfs(C, F, source, sink, parent): n = len(C) visited = [False] * n queue = deque([source]) visited[source] = True while queue: u = queue.popleft() for v in range(n): if not visited[v] and F[u][v] < C[u][v]: # there is remaining capacity queue.append(v) visited[v] = True parent[v] = u if v == sink: return True return False def edmonds_karp(n, source, sink, capacity): parent = [-1] * n max_flow = 0 F = [[0] * n for _ in range(n)] while bfs(capacity, F, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s] - F[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] F[u][v] += path_flow F[v][u] -= path_flow v = parent[v] max_flow += path_flow return max_flow def max_flow_from_input(n, m, s, t, pipes): capacity = [[0] * n for _ in range(n)] for u, v, c in pipes: capacity[u-1][v-1] += c capacity[v-1][u-1] += c # if the pipes are undirected return edmonds_karp(n, s-1, t-1, capacity) def from_io_string(input_str): input_lines = input_str.strip().split(\\"n\\") nmst = list(map(int, input_lines[0].strip().split())) n, m, s, t = nmst[0], nmst[1], nmst[2], nmst[3] pipes = [list(map(int, line.strip().split())) for line in input_lines[1:]] return max_flow_from_input(n, m, s, t, pipes)"},{"question":"You are given a list of unique integers representing the heights of various mountains. A subset of these mountains is called a \\"Nice View\\" subset if for every two distinct mountains in the subset, the difference in their heights is not less than a given integer d. You need to determine the size of the largest \\"Nice View\\" subset and find the subset itself. The first line contains two integers n (1 ≤ n ≤ 1000) and d (1 ≤ d ≤ 1000) — the number of mountains and the minimum difference in height required for a \\"Nice View\\" subset. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 106) — the heights of the mountains. On the first line, print the maximum possible size of the \\"Nice View\\" subset. On the second line, print the elements of the subset. If there is more than one solution, you can print any of them. You can print the elements of the subset in any order.","solution":"def nice_view_subset(n, d, heights): heights.sort() subset = [] last_added = float(\'-inf\') for height in heights: if height - last_added >= d: subset.append(height) last_added = height return len(subset), subset # Example usage: # n = 5, d = 4 # heights = [1, 6, 3, 8, 10] # should return: (3, [1, 6, 10]) or any other valid subset"},{"question":"In a mystical forest, there are several enchanted trees. Each tree has a distinct number of magical fruits, but as a magical property, each fruit multiplies itself when picked. People venture into the forest to pick fruits from these trees. However, they can only bear the fruits up to their maximum limit, and they desire to maximize the number of different types of fruits they pick. Your task is to determine the maximum number of different types of fruits that can be picked by the person without exceeding their maximum limit. The first line contains a single integer T (1 le T le 100): the number of scenarios you need to solve. For each scenario, the first line contains two integers n (1 ≤ n ≤ 100,000) and k (1 ≤ k ≤ n): the number of different types of trees and the maximum limit of fruits a person can pick. The second line contains n integers f_1, f_2, ldots, f_n (1 le f_i le 10^9): the number of fruits on each tree. Print in separate lines for each scenario the maximum number of different types of fruits that can be picked without exceeding the limit k in order to maximize the number of different types. For the first scenario, the person can pick 3 different types of fruits and their maximum limit is 5. They can choose fruits from trees with 1, 2, and 2 fruits which sums up to 5 fruits. For the second scenario, the person can pick 2 different types of fruits and their maximum limit is 3. They can choose fruits from trees with 1 and 1 fruits which sums up to 3 fruits.","solution":"def max_fruit_types(t, scenarios): results = [] for scenario in scenarios: n, k, fruits = scenario fruits.sort() count = 0 total_fruits = 0 for fruit in fruits: if total_fruits + fruit <= k: total_fruits += fruit count += 1 else: break results.append(count) return results"},{"question":"David wants to organize his bookshelf. His bookshelf contains n books arranged in a row. Each book has a unique height represented as an integer. David wants the books to be arranged such that there are exactly k peaks in the bookshelf. A peak is defined as a book that is taller than its adjacent books. For example, in the sequence [1, 3, 2], 3 is a peak because it is greater than 1 and 2. You are given the initial arrangement of the books by their heights, and you need to determine if it is possible to rearrange the books to have exactly k peaks. If it is possible, you should output one possible arrangement. If there are multiple solutions, you may output any of them. Otherwise, you should print \\"Impossible\\". The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 100): the number of books and the desired number of peaks. The second line contains n distinct integers h1, h2, ..., hn (1 ≤ hi ≤ 10^5): the heights of the books. Output \\"Impossible\\" if there is no arrangement of the books that results in exactly k peaks. Otherwise, output n integers representing the heights of the books in an arrangement that results in exactly k peaks. Example Input 1: ``` 5 2 4 1 3 7 5 ``` Example Output 1: ``` 1 4 3 7 5 ``` Example Input 2: ``` 4 3 2 5 3 1 ``` Example Output 2: ``` Impossible ``` Notes: - In Example 1, the arrangement [1, 4, 3, 7, 5] has 2 peaks at positions 2 and 4. - In Example 2, it is impossible to have 3 peaks with only 4 books.","solution":"def rearrange_to_peaks(n, k, heights): Rearranges books to have exactly \'k\' peaks if possible. Otherwise, returns \\"Impossible\\". A peak is a book that is taller than its adjacent books. from itertools import permutations def count_peaks(books): peaks = 0 for i in range(1, len(books)-1): if books[i] > books[i-1] and books[i] > books[i+1]: peaks += 1 return peaks for perm in permutations(heights): if count_peaks(perm) == k: return list(perm) return \\"Impossible\\" Input = \\"5 2n4,1,3,7,5\\".split(\'n\') n, k = list(map(int, Input[0].split())) heights = list(map(int, Input[1].split(\',\'))) print(rearrange_to_peaks(n, k, heights))"},{"question":"You are given a weighted, directed graph with n nodes and m edges. Each edge has an associated weight, which can be positive or negative. The graph may contain cycles, but it is guaranteed not to have any negative weight cycles. Your task is to determine the shortest path from a given start node to every other node in the graph. For example, given a graph with 4 nodes and the following edges: 1. (1, 2, 4) 2. (1, 3, 2) 3. (2, 4, -1) 4. (3, 2, 1) 5. (3, 4, 5) The shortest paths from node 1 to all other nodes would be: - To node 2: 3 (1 -> 3 -> 2) - To node 3: 2 (1 -> 3) - To node 4: 2 (1 -> 3 -> 2 -> 4) Given the following constraints: - 1 le n le 2000 (number of nodes) - 1 le m le 5000 (number of edges) - The weight of each edge is an integer in the range [-10000, 10000] Input: - The first line contains two integers, n and m. - The next m lines each contain three integers u, v, and w representing an edge from node u to node v with weight w. - The last line contains a single integer, the start node. Output: - Print n integers, where the i-th integer represents the shortest path from the start node to node i. If there is no path from the start node to node i, print \\"INF\\" for that position. Example: Input: ``` 4 5 1 2 4 1 3 2 2 4 -1 3 2 1 3 4 5 1 ``` Output: ``` 0 3 2 2 ```","solution":"import heapq def dijkstra(n, edges, start): graph = [[] for _ in range(n+1)] for u, v, w in edges: graph[u].append((v, w)) distances = [float(\'inf\')] * (n + 1) distances[start] = 0 min_heap = [(0, start)] while min_heap: current_dist, u = heapq.heappop(min_heap) if current_dist > distances[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(min_heap, (distance, v)) return [ 0 if i == start else distances[i] if distances[i] != float(\'inf\') else \\"INF\\" for i in range(1, n + 1) ]"},{"question":"You are given a list of strings representing different words. Your task is to determine the longest common prefix among all the words in the list. If there is no common prefix, return an empty string \\"\\". The first line of input contains a single integer t (1 le t le 100) — the number of test cases. Each test case starts with an integer n (1 le n le 100) — the number of words in the list. The following n lines each contain a single word consisting of lowercase English letters. It is guaranteed that the total length of all words in each test case combined does not exceed 10000 characters. For each test case, output a single line containing the longest common prefix of the list of words. If there is no common prefix, output an empty string \\"\\". Example: Input: ``` 2 3 flower flow flight 4 dog racecar car rat ``` Output: ``` fl \\"\\" ``` Explanation for the example: In the first test case, the longest common prefix among the words \\"flower\\", \\"flow\\", and \\"flight\\" is \\"fl\\". In the second test case, there is no common prefix among the words \\"dog\\", \\"racecar\\", \\"car\\", and \\"rat\\", so the output is an empty string \\"\\".","solution":"def longest_common_prefix(words): Returns the longest common prefix among all words in the list. If there is no common prefix, returns an empty string. if not words: return \\"\\" prefix = words[0] for word in words[1:]: temp_prefix = \\"\\" for i in range(min(len(prefix), len(word))): if prefix[i] == word[i]: temp_prefix += prefix[i] else: break prefix = temp_prefix if prefix == \\"\\": break return prefix def solve_longest_common_prefix(test_cases): Takes a list of test cases and returns the solutions for each test case. Each test case is represented as a list of words. results = [] for words in test_cases: results.append(longest_common_prefix(words)) return results"},{"question":"You are given a collection of strings. You need to group the strings that are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The first line contains an integer n (1 leq n leq 10^5) — the number of strings. The following n lines contain the strings, each consisting of lowercase English letters only. The length of each string is at most 100. Your task is to print the groups of anagrams. Each group should be printed on a new line. The strings in a group should be separated by a single space. If there are multiple ways to group the anagrams, print any one of them. # Input - The first line contains an integer n (1 leq n leq 10^5), the number of strings. - The following n lines contain one string each, consisting of lowercase English letters. The length of each string is at most 100. # Output - Print the grouped anagrams, each group on a new line. Strings in a group should be separated by a single space. # Example Input ``` 6 eat tea tan ate nat bat ``` Output ``` eat tea ate tan nat bat ``` Note In the example above, \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams of each other; \\"tan\\" and \\"nat\\" are anagrams of each other; \\"bat\\" along is a group of one. The output order of groups doesn\'t matter, as long as all anagrams are grouped together.","solution":"from collections import defaultdict def group_anagrams(strings): anagram_map = defaultdict(list) for s in strings: sorted_s = \'\'.join(sorted(s)) anagram_map[sorted_s].append(s) result = [] for group in anagram_map.values(): result.append(\\" \\".join(group)) return result"},{"question":"You are given an array of integers a consisting of n elements. You need to process q queries of the following types: 1. Add a value v to each element in a specified subarray from index l to r. 2. Calculate the sum of elements in a specified subarray from index l to r. The first line contains two integers n and q (1 leq n, q leq 2 cdot 10^5) — the number of elements in the array and the number of queries. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the initial array. Then the next q lines describe the queries. Each query is of one of the following three types: - `1 l r v` (where 1 leq l leq r leq n, 1 leq v leq 10^9) — add value v to each element in the subarray from index l to r (1-indexed). - `2 l r` (where 1 leq l leq r leq n) — calculate the sum of elements in the subarray from index l to r (1-indexed). You are required to output the result of each type 2 query on a new line. # Example Input ``` 5 4 1 2 3 4 5 2 1 5 1 1 3 10 2 2 4 1 4 5 5 2 3 5 ``` Output ``` 15 36 41 ``` # Note In the example, initially the array is [1, 2, 3, 4, 5]. - The first type 2 query asks for the sum of the whole array: 1 + 2 + 3 + 4 + 5 = 15. - The first type 1 query adds 10 to the first three elements, so the array becomes [11, 12, 13, 4, 5]. - The second type 2 query asks for the sum of elements from index 2 to 4: 12 + 13 + 4 = 29. - The second type 1 query adds 5 to the last two elements, so the array becomes [11, 12, 13, 9, 10]. - The third type 2 query asks for the sum of elements from index 3 to 5: 13 + 9 + 10 = 32.","solution":"class ArrayProcessor: def __init__(self, arr): self.arr = arr self.n = len(arr) def add_to_subarray(self, l, r, v): for i in range(l-1, r): self.arr[i] += v def sum_subarray(self, l, r): return sum(self.arr[l-1:r]) def process_queries(n, q, arr, queries): processor = ArrayProcessor(arr) results = [] for query in queries: if query[0] == 1: # Add value to subarray _, l, r, v = query processor.add_to_subarray(l, r, v) elif query[0] == 2: # Sum of subarray _, l, r = query results.append(processor.sum_subarray(l, r)) return results"},{"question":"Max is organizing a birthday party and wants to make sure that the seating arrangement at the party is optimal for conversation. He has n friends, and each friend has a friendliness level fi. The friendliness levels are integers, where a higher number indicates a more outgoing person. Max wants to arrange his friends in such a way that the difference between the friendliness levels of any two adjacent friends is minimized, to avoid awkward situations. Find the optimal arrangement of friends that minimizes the maximum difference in friendliness levels between adjacent friends. # Input - The first line contains an integer n (2 ≤ n ≤ 1000) — the number of friends. - The second line contains n space-separated integers f1, f2, ..., fn (1 ≤ fi ≤ 1000), where fi denotes the friendliness level of the i-th friend. # Output Print a single integer — the minimum possible maximum difference in friendliness levels between adjacent friends in the optimal arrangement. # Example Input ``` 5 3 8 5 1 9 ``` Output ``` 2 ``` Explanation One possible optimal arrangement is [1, 3, 5, 8, 9], where the maximum difference between adjacent friends is minimized to 2. Note: Multiple optimal arrangements might exist, but only the minimum possible maximum difference is required.","solution":"def min_max_difference(n, friendliness_levels): Return the minimum possible maximum difference in friendliness levels between adjacent friends in the optimal arrangement. friendliness_levels.sort() # Initialize the min_max_diff with a very large number min_max_diff = float(\'inf\') # Calculate the minimum possible maximum difference for i in range(n - 1): min_max_diff = min(min_max_diff, friendliness_levels[i + 1] - friendliness_levels[i]) return min_max_diff"},{"question":"A company has assigned a daily task to its employees to compress a list of logs. Each log is a string consisting of lowercase letters and digits. The compression task involves replacing consecutive groups of the same character with the character followed by the number of repetitions, if the character repeats two or more times. For example, the string \\"aaabbcccd\\" would be compressed to \\"a3b2c3d\\". Your task is to write a function `compress_logs` to compress a given list of logs according to these rules. **Input:** - The first line contains a single integer n (1 le n le 2 cdot 10^5) — the number of logs. - The following n lines each contain a log, represented as a string of length 1 le |S| le 10^6. **Output:** Print n lines, each containing the compressed version of the corresponding log. **Example:** ``` Input: 3 aaabbcccd a bbbbb Output: a3b2c3d a b5 ``` **Explanation:** - In the first log \\"aaabbcccd\\", \'a\' appears 3 times consecutively, followed by \'b\' which appears 2 times, \'c\' which appears 3 times, and \'d\' which appears once. - In the second log \\"a\\", as it is a single character, it remains the same. - In the third log \\"bbbbb\\", \'b\' appears 5 times consecutively, so it is compressed to \\"b5\\". Write the function `compress_logs` to solve the problem efficiently considering the constraints.","solution":"def compress_log(log): Compress a single log string by replacing consecutive groups of the same character with the character followed by the number of repetitions if the character repeats two or more times. :param log: str - The log string to compress. :return: str - The compressed log string. if not log: return \\"\\" compressed_log = [] current_char = log[0] count = 1 for char in log[1:]: if char == current_char: count += 1 else: if count > 1: compressed_log.append(f\\"{current_char}{count}\\") else: compressed_log.append(current_char) current_char = char count = 1 # Add the last group if count > 1: compressed_log.append(f\\"{current_char}{count}\\") else: compressed_log.append(current_char) return \\"\\".join(compressed_log) def compress_logs(logs): Compress a list of logs according to the given rules. :param logs: List[str] - The list of log strings to compress. :return: List[str] - The list of compressed log strings. return [compress_log(log) for log in logs]"},{"question":"Alice is a dedicated scholar studying ancient inscription stones. Each stone has a set of inscriptions carved into it, denoted by a list of numbers. As part of her study, Alice needs to measure the \\"complexity\\" of each stone\'s inscriptions, defined as the sum of the product of every possible pair of distinct numbers. Given the list of inscriptions on a stone, you need to help Alice by computing the complexity of the stone. The first input line contains an integer n (2 ≤ n ≤ 100) — the number of numbers inscribed on the stone. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^3) — the numbers inscribed on the stone. Print the complexity of the stone as a single integer. The complexity of the stone is computed as the sum of ai * aj for all 1 ≤ i < j ≤ n. Consider the following example: Input: 3 1 2 3 Output: 11 Explanation: The pairs are (1, 2), (1, 3), and (2, 3). The complexity is 1*2 + 1*3 + 2*3 = 2 + 3 + 6 = 11.","solution":"def stone_complexity(n, inscriptions): Returns the complexity of the stone\'s inscriptions. Parameters: n (int): The number of numbers inscribed on the stone. inscriptions (list of int): List of numbers inscribed on the stone. Returns: int: The complexity of the stone. complexity = 0 for i in range(n): for j in range(i + 1, n): complexity += inscriptions[i] * inscriptions[j] return complexity"},{"question":"In a kingdom far away, there exists a technology-driven city with n unique roads connecting m intersections. Each road has a unique identifier and it connects exactly two intersections. There is a special Delivery Company that operates delivery stations at certain intersections. Their goal is to find the most efficient route from one station to another by using the minimal number of roads. You are given a list of roads, each defined by two endpoints indicating the intersections they connect. All roads are bidirectional. Given the starting and ending delivery stations, your task is to determine the minimum number of roads the delivery truck needs to take to go from the starting station to the destination station. The first line of the input contains four space-separated integers: n (1 ≤ n ≤ 10^5), the number of roads; m (2 ≤ m ≤ 10^5), the number of intersections; start and end (1 ≤ start, end ≤ m), the starting and ending delivery stations. The next n lines each contain two space-separated integers u and v (1 ≤ u, v ≤ m), representing a road between intersections u and v. Print a single integer, the minimum number of roads required for the delivery truck to reach from the starting station to the ending station. If the destination is unreachable, print -1. For example, given the input: ``` 5 4 1 4 1 2 2 3 3 4 1 3 2 4 ``` The output should be: ``` 2 ``` Explanation: The shortest path from intersection 1 to intersection 4 is either 1 -> 3 -> 4 or 1 -> 2 -> 4, each using two roads.","solution":"from collections import deque, defaultdict def min_roads_to_destination(n, m, start, end, roads): if start == end: return 0 # Create adjacency list for the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Perform BFS to find the shortest path queue = deque([(start, 0)]) # (current_intersection, current_distance) visited = set() visited.add(start) while queue: current_intersection, current_distance = queue.popleft() for neighbor in graph[current_intersection]: if neighbor == end: return current_distance + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, current_distance + 1)) return -1"},{"question":"A wildlife research center is conducting a study on animal movement across different regions of a large forest. The forest is divided into a grid of n times m cells, where each cell can either be navigable terrain, denoted as \'.\', or an obstacle, denoted as \'#\'. The objective is to track the shortest path that a particular animal can take to move from a starting cell to a destination cell, considering the obstacles present in the grid. If it\'s not possible to reach the destination due to obstacles, the animal should return -1. # Input The first line contains two integers n and m (2 leq n, m leq 1000) representing the number of rows and columns in the forest grid. The next n lines contain m characters each (either \'.\' or \'#\') representing the forest grid. The following line contains four integers x_1, y_1, x_2, and y_2 (1 leq x_1, x_2 leq n, 1 leq y_1, y_2 leq m) representing the coordinates of the starting cell and the destination cell respectively. Note that the coordinates are 1-based. # Output Print a single integer representing the minimum number of steps required to move from the starting cell to the destination cell. If it is not possible to reach the destination, print -1. # Example Input ``` 5 5 ..... .#. ..#.. .#. ..... 1 1 5 5 ``` Output ``` 8 ``` Explanation The shortest path from (1, 1) to (5, 5) in this grid is 8 steps.","solution":"from collections import deque def shortest_path(n, m, grid, x1, y1, x2, y2): Returns the minimum number of steps required to move from (x1, y1) to (x2, y2), considering obstacles in the forest grid. If it\'s not possible, returns -1. def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(x1 - 1, y1 - 1, 0)]) # (row, col, steps) visited[x1 - 1][y1 - 1] = True while queue: x, y, steps = queue.popleft() if x == x2 - 1 and y == y2 - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1"},{"question":"A festival is going to be held in a city with p parks, where each park has a specific popularity rating. To ensure the festival is a success, the organizers want to select q parks such that the sum of their popularity ratings is as high as possible. However, the parks are arranged in a straight line, and to maintain a festive atmosphere, no two selected parks should be adjacent. Given this constraint, help the organizers determine the maximum possible sum of popularity ratings they can achieve by selecting exactly q parks. The first line of input contains two integers p and q (1 ≤ q ≤ p ≤ 100,000) — the number of parks and the number of parks to be selected. The second line contains p integers, where the i-th integer represents the popularity rating of the i-th park. The popularity rating will be a non-negative integer not exceeding 10^9. Print the maximum possible sum of the popularity ratings of the selected parks. # Example **Input:** ``` 10 3 4 7 2 9 1 5 6 0 8 3 ``` **Output:** ``` 25 ``` **Explanation:** By selecting the 2nd, 4th, and 9th parks (7 + 9 + 8 = 24) or the 2nd, 6th, and 9th parks (7 + 5 + 8 = 20) we maximize the sum to get 24.","solution":"def max_popularity_sum(p, q, popularity): # dp array will store the maximum possible sum by selecting i parks out of first j parks dp = [[0] * (p + 1) for _ in range(q + 1)] for i in range(1, q + 1): for j in range(i * 2 - 1, p + 1): if i == 1: dp[i][j] = max(dp[i][j - 1], popularity[j - 1]) else: dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 2] + popularity[j - 1]) return dp[q][p] # Example p = 10 q = 3 popularity = [4, 7, 2, 9, 1, 5, 6, 0, 8, 3] print(max_popularity_sum(p, q, popularity)) # Expected output: 24"},{"question":"Petya is a traveler on an infinitely large 2D grid. He starts at position (0, 0) and has a list of n instructions to follow. Each instruction directs him to move in one of the four cardinal directions: \'U\' (up), \'D\' (down), \'L\' (left), \'R\' (right). The instructions are executed sequentially, and each instruction moves Petya exactly one unit in the specified direction. Petya is curious about his position after following all the instructions. Write a program to determine his final coordinates (x, y) after executing all the given instructions. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of instructions. The second line contains a string of n characters, where each character is \'U\', \'D\', \'L\', or \'R\'. Output the final coordinates (x, y) after following all the instructions. For example, if Petya has the instructions \\"UUDDLLRR\\", he will end up at the coordinates (0, 0), since all movements cancel each other out. **Input:** ``` 8 UUDDLLRR ``` **Output:** ``` 0 0 ``` Explanation: - Move up 2 times: (0, 0) → (0, 2) - Move down 2 times: (0, 2) → (0, 0) - Move left 2 times: (0, 0) → (-2, 0) - Move right 2 times: (-2, 0) → (0, 0) Hence, the final position is (0, 0).","solution":"def final_position(n, instructions): Determines the final coordinates after following the instructions. Args: n (int): Number of instructions. instructions (str): A string of instructions \'U\', \'D\', \'L\', \'R\'. Returns: tuple: Final coordinates (x, y). x, y = 0, 0 for instruction in instructions: if instruction == \'U\': y += 1 elif instruction == \'D\': y -= 1 elif instruction == \'L\': x -= 1 elif instruction == \'R\': x += 1 return x, y"},{"question":"You are given two strings, `s` and `t`, each consisting of lowercase English letters. Your task is to perform the minimum number of operations to make the two strings anagrams of each other. An operation is defined as either replacing a character from `s` with any character, or replacing a character from `t` with any character. An anagram of a string is another string that contains the same characters, only the order of characters can be different. The first line of the input contains a single integer `q` (1 ≤ `q` ≤ 10^4) — the number of queries. Each of the next `q` lines contains two space-separated strings `s` and `t` (1 ≤ |s|, |t| ≤ 1000). For each query, print a single integer, the minimum number of operations needed to make `s` and `t` anagrams of each other. **Example:** Input: ``` 3 abcd bcda abcde fghij anagram nagaram ``` Output: ``` 0 5 0 ``` Explanation: - In the first query, `abcd` and `bcda` are already anagrams, so no operations are needed. - In the second query, we need to replace all characters of `abcde` to match the characters `fghij`, so 5 operations are needed. - In the third query, `anagram` and `nagaram` are already anagrams, so no operations are needed.","solution":"from collections import Counter def min_operations_to_anagram(s, t): Returns the minimum number of operations needed to make s and t anagrams of each other. # Count the frequency of characters in both strings count_s = Counter(s) count_t = Counter(t) # Calculate the number of operations needed operations = 0 # Find all unique characters in both strings all_chars = set(s) | set(t) for char in all_chars: operations += abs(count_s[char] - count_t[char]) return operations def solve_queries(queries): results = [] for s, t in queries: results.append(min_operations_to_anagram(s, t)) return results"},{"question":"You are given an array consisting of n positive integers. You need to form a new array of the same length where each element is greater than or equal to the sum of all previous elements in the array. The goal is to minimize the total sum of the array after transformation. You are allowed to increase each element as many times as necessary, but not decrease it. Each increase operation increments an element by 1 and costs 1. The first line of input contains a single integer n (1 le n le 3000) — the length of the array. The next line contains n integers a_i (1 le a_i le 10^9) — the elements of the original array. Output the minimum possible total sum of the transformed array. # Examples: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 27 ``` Explanation: The transformation could be [1, 2, 4, 8, 12]. Sum = 1 + 2 + 4 + 8 + 12 = 27. Input: ``` 4 4 3 2 1 ``` Output: ``` 10 ``` Explanation: The transformation could be [4, 4, 4, 4]. Sum = 4 + 4 + 4 + 4 = 16. # Note: In each example, you need to ensure each element in the transformed array is at least the sum of all previous elements, while minimizing the total sum of the final array.","solution":"def minimize_array_sum(n, arr): Returns the minimum possible total sum of the transformed array where each element is greater than or equal to the sum of all previous elements. transformed = [0] * n transformed[0] = arr[0] for i in range(1, n): transformed[i] = max(transformed[i-1], arr[i]) return sum(transformed) # Example usage: # n = 5 # arr = [1, 2, 3, 4, 5] # print(minimize_array_sum(n, arr)) # Output should be 15"},{"question":"A spaceship is stuck within a rectangular space grid in outer space. The grid is represented by its dimensions n times m. Each cell in the grid either contains empty space denoted by \'.\', or an obstacle denoted by \'#\'. The spaceship is currently at position (r_s, c_s) and wants to reach a destination at position (r_d, c_d). The spaceship can move to any of the four cardinal directions (up, down, left, right) one cell at a time. However, the spaceship cannot pass through cells containing obstacles. You have to determine whether the spaceship can reach the destination and if it can, print the shortest path from the start to the destination. Input: - The first line contains two integers n and m (1 le n, m le 1000) - the dimensions of the grid. - The next n lines contain a string of length m each, representing the grid. - The last line contains four integers r_s, c_s, r_d, c_d (1 le r_s, r_d le n; 1 le c_s, c_d le m; the coordinates are one-based) - the start and destination positions. Output: - If there is no path from the start to the destination, print \'NO\'. - Otherwise, print \'YES\' followed by the sequence of directions (up \'U\', down \'D\', left \'L\', right \'R\') representing the shortest path from the start to the destination. Example: Input: ``` 5 5 ..... .#. ..... .#. ..... 1 1 5 5 ``` Output: ``` YES DDDDRRRR ``` Input: ``` 5 5 # #...# #.#.# #...# # 1 2 5 2 ``` Output: ``` NO ``` Note: - If there are multiple shortest paths, print any one of them. - The grid always contains at least one open path and at least one obstacle.","solution":"from collections import deque def shortest_path(n, m, grid, r_s, c_s, r_d, c_d): # Directions (up, down, left, right) directions = [(-1, 0, \'U\'), (1, 0, \'D\'), (0, -1, \'L\'), (0, 1, \'R\')] # BFS setup queue = deque([(r_s - 1, c_s - 1, \\"\\")]) # (row, col, path) visited = set([(r_s - 1, c_s - 1)]) # Set of visited cells while queue: r, c, path = queue.popleft() # If we reach the destination if r == r_d - 1 and c == c_d - 1: return \\"YESn\\" + path for dr, dc, direction in directions: nr, nc = r + dr, c + dc # Check if new position is within bounds and not an obstacle if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, path + direction)) return \\"NO\\" # Read input function def spaceship_path(n, m, grid, r_s, c_s, r_d, c_d): return shortest_path(n, m, grid, r_s, c_s, r_d, c_d) # Example usage (comment this when unit testing) # n = 5 # m = 5 # grid = [ # \\".....\\", # \\".#.\\", # \\".....\\", # \\".#.\\", # \\".....\\" # ] # r_s, c_s, r_d, c_d = 1, 1, 5, 5 # print(spaceship_path(n, m, grid, r_s, c_s, r_d, c_d))"},{"question":"You are given a binary matrix of size `n x m`. Each cell of the matrix contains either a `0` or a `1`. You are allowed to perform the following operation on the matrix multiple times: - Select any rectangle in the matrix and flip all the bits in that rectangle (flipping means changing `0` into `1` and `1` into `0`). Rectangles can be as small as a single cell. The objective is to determine the minimum number of operations needed to convert the matrix into a matrix where all the cells contain the same value (all `0`s or all `1`s). The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 50) — the number of rows and columns in the matrix. Each of the next `n` lines contains `m` integers which are either `0` or `1`, representing the matrix. Output a single integer — the minimum number of operations required to convert the matrix. # Example Input 4 4 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 Output 4 Explanation To convert the matrix into all `0`s or all `1`s, we need to perform operations selectively to flip necessary submatrices. In this case, as there are both `0`s and `1`s, we can flip the following submatrices: - Flip the entire matrix to get all `1`s - Flip each of the four `1x1` submatrices that previously had `0`s to obtain the final output with all `1`s","solution":"def min_operations_to_uniform_matrix(n, m, matrix): Returns the minimum number of operations to make the matrix uniform. Each cell should have either 0 or 1. # Count the number of 1s and 0s in the matrix count_1 = sum(sum(row) for row in matrix) count_0 = n * m - count_1 # The minimum number of operations will be the count of the smaller group return min(count_1, count_0) # Read input function for testing def read_input(): n, m = map(int, input().strip().split()) matrix = [list(map(int, input().strip().split())) for _ in range(n)] return n, m, matrix # Example of usage if __name__ == \\"__main__\\": n, m, matrix = read_input() print(min_operations_to_uniform_matrix(n, m, matrix))"},{"question":"You are given an array of integers, and you need to perform a set of operations that will transform the array. Each operation consists of the following steps: 1. Select two distinct indices (i) and (j) such that (a_i) and (a_j) are the two smallest and largest elements in the array, respectively. 2. Replace the element at index (i) with the sum of (a_i) and (a_j), and then remove (a_j) from the array. 3. Continue this process until only one element remains in the array. Given this, your task is to determine the final remaining element after performing all operations. The first input line contains a single integer (t) ((1 le t le 100)) — the number of test cases. For each test case, the first line contains a single integer (n) ((2 le n le 10^5)) — the number of elements in the array. The second line contains (n) space-separated integers (a_1, a_2, ldots, a_n) ((-10^9 le a_i le 10^9)) — the elements of the array. Output one integer per test case — the final remaining element after all operations are performed. It is guaranteed that the sum of all (n) does not exceed (10^6). # Example Input ``` 2 3 1 2 3 4 -1 5 3 2 ``` Output ``` 6 9 ``` # Explanation **In the first test case,** the array is ([1, 2, 3]): - Select (1) (smallest) and (3) (largest). Replace (1) with (1 + 3 = 4), resulting in the array ([4, 2]). - Select (2) (smallest) and (4) (largest). Replace (2) with (2 + 4 = 6), resulting in the array ([6]). **In the second test case,** the array is ([-1, 5, 3, 2]): - Select (-1) (smallest) and (5) (largest). Replace (-1) with (-1 + 5 = 4), resulting in the array ([4, 3, 2]). - Select (2) (smallest) and (4) (largest). Replace (2) with (2 + 4 = 6), resulting in the array ([6, 3]). - Select (3) (smallest) and (6) (largest). Replace (3) with (3 + 6 = 9), resulting in the array ([9]).","solution":"def remaining_element(arr): Perform operations on the array as described in the problem statement and return the final remaining element. # Sorting the array initially arr.sort() while len(arr) > 1: smallest = arr.pop(0) # The first element (smallest) largest = arr.pop() # The last element (largest) new_element = smallest + largest # Sum of smallest and largest # Insert new_element back into sorted position in the array # We use a dummy sorting method for clarity instead of keeping the array continually sorted efficiently arr.insert(0, new_element) arr.sort() return arr[0] def process_input(t, test_cases): Process multiple test cases. :param t: Number of test cases :param test_cases: List of tuples, each containing (n, array) :return: List of results for each test case results = [] for n, array in test_cases: results.append(remaining_element(array)) return results"},{"question":"You are given a permutation of integers from 1 to n. A permutation is called good if no element in the sequence is at its original position (i.e., the position it would be in if the permutation were sorted in ascending order). This type of permutation is also known as a derangement. For example, permutations [2, 1, 4, 3] and [3, 4, 1, 2] are good permutations, but [1, 3, 2, 4] is not, because the first element is at its original position. Given an integer n, determine the number of good permutations of integers from 1 to n. Since the answer can be large, return it modulo 10^9 + 7. The first line contains an integer t (1 le t le 1000) — the number of test cases. Each of the next t lines contains an integer n (1 le n le 2 times 10^5) — the length of the permutation. Output t lines, each containing a single integer — the number of good permutations of length n, modulo 10^9 + 7. # Example Input ``` 3 1 2 3 ``` Output ``` 0 1 2 ``` # Explanation - For n = 1, there are no good permutations since the only permutation [1] has 1 at its original position. - For n = 2, the only good permutation is [2, 1]. - For n = 3, the good permutations are [2, 3, 1] and [3, 1, 2].","solution":"MOD = 10**9 + 7 def precompute_derangements(max_n): Precompute the derangements for all numbers from 0 to max_n. derangements = [0] * (max_n + 1) if max_n >= 2: derangements[1] = 0 derangements[2] = 1 for i in range(3, max_n + 1): derangements[i] = (i - 1) * (derangements[i - 1] + derangements[i - 2]) % MOD return derangements def number_of_good_permutations(t, cases): max_n = max(cases) derangements = precompute_derangements(max_n) return [derangements[n] for n in cases]"},{"question":"In an ancient land, there exists a magical tree with N nodes and N-1 edges forming a connected acyclic graph. Each node has a unique integer value associated with it. The nodes are numbered from 1 to N. This tree possesses a special power: for any two nodes, there is exactly one unique path connecting them. The tree can perform a magical query operation. For a given pair of nodes u and v, the tree’s magic power will return the sum of values of all nodes on the unique path from u to v, inclusive. Your task is to handle Q such queries efficiently. The first line of the input contains an integer N (1 ≤ N ≤ 100,000) indicating the number of nodes in the tree. The second line contains N space-separated integers, where the ith integer is the value associated with the ith node. Each of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N), which represent an edge between nodes u and v. The next line contains an integer Q (1 ≤ Q ≤ 100,000) denoting the number of queries to process. Each of the next Q lines contains two integers u and v (1 ≤ u, v ≤ N) representing the nodes between which you need to find the sum of values along the path. Output Q integers, one for each query, representing the sum of values on the path from node u to node v. Example: Input: 5 3 2 1 10 5 1 2 1 3 2 4 2 5 3 1 5 4 3 1 4 Output: 10 14 15 Explanation: - For the first query (1 to 5), the path is 1 -> 2 -> 5, and the sum is 3 + 2 + 5 = 10. - For the second query (4 to 3), the path is 4 -> 2 -> 1 -> 3, and the sum is 10 + 2 + 3 + 1 = 16. - For the third query (1 to 4), the path is 1 -> 2 -> 4, and the sum is 3 + 2 + 10 = 15.","solution":"from collections import defaultdict, deque class TreeMagic: def __init__(self, N, values, edges): self.N = N self.values = values self.graph = defaultdict(list) self.parent = [-1] * (N + 1) self.depth = [-1] * (N + 1) self.subtree_sum = defaultdict(int) for u, v in edges: self.graph[u].append(v) self.graph[v].append(u) self._prepare_lca() def _prepare_lca(self): self.LCA = [[-1] * (self.N + 1) for _ in range(18)] self.depth = [-1] * (self.N + 1) root = 1 self._dfs(root, -1, 0) for j in range(1, 18): for i in range(1, self.N + 1): if self.LCA[j - 1][i] != -1: self.LCA[j][i] = self.LCA[j - 1][self.LCA[j - 1][i]] def _dfs(self, u, parent, depth): self.parent[u] = parent self.depth[u] = depth self.LCA[0][u] = parent for v in self.graph[u]: if v != parent: self._dfs(v, u, depth + 1) def _get_lca(self, u, v): if self.depth[u] < self.depth[v]: u, v = v, u diff = self.depth[u] - self.depth[v] for i in range(17, -1, -1): if (1 << i) & diff: u = self.LCA[i][u] if u == v: return u for i in range(17, -1, -1): if self.LCA[i][u] != self.LCA[i][v]: u = self.LCA[i][u] v = self.LCA[i][v] return self.parent[u] def _get_sum_to_root(self, u): total_sum = 0 while u != -1: total_sum += self.values[u - 1] u = self.parent[u] return total_sum def query(self, u, v): lca = self._get_lca(u, v) sum_u = self._get_sum_to_root(u) sum_v = self._get_sum_to_root(v) sum_lca = self._get_sum_to_root(lca) if lca != -1 else 0 return sum_u + sum_v - 2*sum_lca + self.values[lca - 1] def solve(n, values, edges, q, queries): tree = TreeMagic(n, values, edges) results = [] for u, v in queries: results.append(tree.query(u, v)) return results"},{"question":"Susan is organizing an online coding competition and wants to create a leaderboard for the participants. Each participant will earn points for each problem they solve correctly, and Susan wants to display the top k participants on the leaderboard. However, participants who have the same number of points should be ranked alphabetically by their usernames. You are provided with a list of participants along with their scores. Your task is to write a program that generates the leaderboard of the top k participants based on the given criteria. The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the number of participants and the number of top participants to display on the leaderboard, respectively. The next n lines contain a participant\'s username and their respective score. Usernames consist of lowercase English letters and have a length of at most 20 characters. Scores are non-negative integers. The output should contain k lines, each with a participant\'s username and their score, representing the top k participants according to the criteria mentioned above. **Examples:** Input: ``` 5 3 alice 50 bob 75 charlie 52 david 75 eve 50 ``` Output: ``` bob 75 david 75 charlie 52 ``` Input: ``` 6 2 john 60 jane 60 adam 80 mike 70 fred 60 kate 90 ``` Output: ``` kate 90 adam 80 ``` Ensure your output lists the participants in descending order of their scores, and for participants with the same score, list them in alphabetical order of their usernames.","solution":"def get_leaderboard(n, k, participants): # Sort participants by score in descending order then by username in ascending order sorted_participants = sorted(participants, key=lambda x: (-x[1], x[0])) return sorted_participants[:k]"},{"question":"Alice is playing a game with a square grid of size n x n. Each cell in the grid is either blocked or empty. Alice starts at the top-left corner of the grid (1, 1) and wants to reach the bottom-right corner of the grid (n, n). She can move only to the right or down, one step at a time. She can only pass through empty cells and cannot move past blocked cells. Alice wants to know how many different paths there are from (1, 1) to (n, n) given the grid configuration. Can you help Alice find the number of such paths? The first line of input contains a single integer n (1 ≤ n ≤ 1000) representing the size of the grid. Each of the next n lines contain n characters, either \'.\' or \'#\'. A \'.\' represents an empty cell and a \'#\' represents a blocked cell. Print a single integer — the number of different paths from (1, 1) to (n, n). If there is no path, print 0. # Example: Input: ``` 3 ... .#. ... ``` Output: ``` 2 ``` In the example, Alice can take the following two paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def num_paths(n, grid): Returns the number of different paths from (1, 1) to (n, n) in the grid. :param n: The size of the grid (n x n) :param grid: A list of strings where each string represents a row in the grid :return: The number of different paths from top-left to bottom-right if grid[0][0] == \'#\' or grid[n - 1][n - 1] == \'#\': return 0 # Using dynamic programming to count the number of paths dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[n - 1][n - 1]"},{"question":"Sasha loves puzzles and logic games. Recently, Sasha came across an interesting problem involving bitwise operations and palindromes. A sequence of integers is called a bitwise palindrome if the bitwise representation of the sequence reads the same forwards and backwards. Sasha has a sequence of integers and wishes to know if it\'s possible to rearrange the sequence into a bitwise palindrome. Your task is to help Sasha determine that. The first line of the input contains a single integer n (1 le n le 100,000) — the length of the sequence. The second line contains n integers a_1, a_2, ldots, a_n (0 le a_i le 10^9) — the sequence itself. Output \\"YES\\" if the sequence can be rearranged to form a bitwise palindrome, and \\"NO\\" otherwise. # Example **Input:** ``` 5 1 2 3 2 1 ``` **Output:** ``` YES ``` **Explanation:** The bitwise representation of the sequence 1, 2, 3, 2, 1 is: ``` 1 -> 0001 2 -> 0010 3 -> 0011 2 -> 0010 1 -> 0001 ``` This sequence reads the same forwards and backwards, hence it is a bitwise palindrome.","solution":"def can_form_bitwise_palindrome(n, sequence): Determine if the sequence can be rearranged into a bitwise palindrome. Args: n (int): The length of the sequence. sequence (list of int): The sequence of integers. Returns: str: \\"YES\\" if the sequence can be rearranged into a bitwise palindrome, \\"NO\\" otherwise. from collections import Counter # Count the frequency of each number in the sequence freq = Counter(sequence) # A bitwise palindrome can have at most one number with an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # If there\'s more than one number with an odd frequency, return \\"NO\\" return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"There is a beautiful garden in a city, represented as a 2D grid of size n x m. Each cell of the grid either contains an empty space (denoted by \'.\') or is blocked by a rock (denoted by \'#\'). On each empty cell, a flower can be planted. A planted flower will not thrive if it has another flower planted in any of the 8 adjacent cells (up, down, left, right, and the 4 diagonal directions). Your task is to compute the maximum number of flowers that can be planted in the garden under the given constraints and print the resulting garden layout. The input consists of two integers n and m (1 ≤ n, m ≤ 1000) on the first line, followed by n lines containing m characters each (only \'.\' and \'#\') representing the garden grid. Output the modified garden grid after planting the maximum number of flowers. Example: Input: 4 4 .... .#.. ..#. .... Output: *.*. .#.* *.#. .*.* Explanation: Here is one way to plant the maximum number of flowers respecting the constraints: - Plant a flower on (1, 1), (1, 3), (3, 2), and (4, 1). Note: - \'*\' represents a planted flower.","solution":"def plant_flowers(n, m, garden): Given a garden grid with empty spaces (\'.\') and rocks (\'#\'), compute the maximum number of flowers that can be planted such that no two flowers are adjacent (in all 8 possible directions). Args: n (int): number of rows in the garden grid. m (int): number of columns in the garden grid. garden (List[str]): list of strings representing the garden grid. Returns: List[str]: the modified garden grid with maximum flowers planted. # Making a copy of the garden to modify result_garden = [list(row) for row in garden] # Iterate through the cells of the grid for i in range(n): for j in range(m): # We can plant a flower if the cell is empty and the sum of the row and column index is even if garden[i][j] == \'.\' and (i + j) % 2 == 0: result_garden[i][j] = \'*\' # Convert resulting list of lists back to list of strings return [\'\'.join(row) for row in result_garden]"},{"question":"Some towns in Berland are represented as undirected graph nodes, and the roads between them are represented as edges. Each road has a positive integer weight, representing the time in minutes it takes to travel from one town to another. The graph is tree-like, meaning it\'s connected and has no cycles. Masha needs to visit all the towns starting from her home located in town 1. Her travel route should minimize the maximum time spent traveling on any single road. The goal is to find such a route. Masha can start at any time from her home, and the roads should be traversed such that the biggest travel time for any single road is minimized. The route will visit each town exactly once, and she wants to return to her home in the end. The first line of the input contains a single integer n (2 ≤ n ≤ 105) – the number of towns in Berland. Each of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 109) – indicating that there is a road between towns u and v with a travel time of w minutes. Output a single integer representing the minimized maximum time spent on any road in her optimal travel route.","solution":"def min_max_time(n, edges): Find the minimized maximum time spent on any single road in the optimal travel route. :param n: Integer, number of towns. :param edges: List of tuples (u, v, w) where u and v are towns, w is the travel time between towns u and v. :return: Integer, minimized maximum time spent on any road in the optimal travel route. from collections import defaultdict import heapq # Building adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Helper function to find the maximum edge in the MST using Prim\'s algorithm def get_max_edge_in_mst(start=1): visited = set() max_edge = 0 min_heap = [(0, start)] # (weight, node) while min_heap: w, u = heapq.heappop(min_heap) if u not in visited: visited.add(u) max_edge = max(max_edge, w) for v, weight in graph[u]: if v not in visited: heapq.heappush(min_heap, (weight, v)) return max_edge # Since the graph is a tree, the MST of the graph is the graph itself return get_max_edge_in_mst() # Example Usage: # n = 5 # edges = [ # (1, 2, 3), # (1, 3, 4), # (2, 4, 2), # (3, 5, 5) # ] # print(min_max_time(n, edges)) # Output: 4 (1 -> 3, 3->5 has the largest weight 5)"},{"question":"You are given a grid of size n times m with non-negative integer values. Each cell in the grid initially contains some value, and you can perform two types of operations to transform the grid: 1. Increase the value of every cell in a specific row by 1. 2. Increase the value of every cell in a specific column by 1. Your goal is to make all values in the grid equal using the minimum number of operations. The first line of the input contains two integers n and m (1 leq n, m leq 50) — the number of rows and columns in the grid. Each of the next n lines contains m non-negative integers, where the j-th integer in the i-th line is the element of the grid at position (i, j). Print a single integer denoting the minimum number of operations required to make all values in the grid equal. If it\'s impossible to make all values equal, print -1. # Example Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 6 ``` Explanation: In this case, you can perform the following operations to make all values in the grid equal to 9: - Increase every cell in the first row 6 times. - Increase every cell in the second row 3 times. - Increase every cell in the first column 6 times. - Increase every cell in the second column 3 times. - Increase every cell in the third column. - Increase every cell in the third row. Note: You can use different optimal strategies for different grids; the given sequence is just one of them.","solution":"def min_operations_to_equal_grid(n, m, grid): Return the minimum number of operations required to make all values in the grid equal, or -1 if it\'s impossible to make all values equal. :param n: number of rows :param m: number of columns :param grid: 2D list of non-negative integers representing the grid :return: minimum number of operations or -1 if impossible def check_grid(grid): # Check if all elements in the grid can be made equal row_diffs = [grid[i][0] - grid[0][0] for i in range(n)] col_diffs = [grid[0][j] - grid[0][0] for j in range(m)] for i in range(n): for j in range(m): if grid[i][j] - grid[i][0] != col_diffs[j] or grid[i][j] - grid[0][j] != row_diffs[i]: return False return True if check_grid(grid): target = min(min(row) for row in grid) row_operations = [grid[i][0] - target for i in range(n)] col_operations = [grid[0][j] - target for j in range(m)] return sum(row_operations) + sum(col_operations) return -1 # Example usage: # grid = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # n = 3 # m = 3 # print(min_operations_to_equal_grid(n, m, grid)) # Output: 12"},{"question":"You are given a string `s` composed of lowercase English letters. Your task is to rearrange the characters of the string such that no two adjacent characters are the same. If such a rearrangement is not possible, return an empty string. Write a function `rearrangeString(s: str) -> str` to achieve this. # Input - The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. - Each of the next `t` lines contains a single string `s` (1 ≤ |s| ≤ 10^5), composed of lowercase English letters. # Output For each test case, print a single string. If it is possible to rearrange the characters of the string such that no two adjacent characters are the same, print the rearranged string. If it is not possible, print an empty string. # Example Input ``` 3 aab aaab aabbcd ``` Output ``` aba <empty> abcdab ``` In the first test case, one possible rearrangement is \\"aba\\". In the second test case, it is not possible to rearrange the characters to satisfy the condition, so the output is an empty string. In the third test case, one possible rearrangement is \\"abcdab\\". # Note - You can use a priority queue to keep track of the characters and their counts. - Always try to place the character with the highest remaining count next, ensuring that no two adjacent characters are the same. - If at some point this is not possible, then you should return an empty string.","solution":"import heapq from collections import Counter def rearrangeString(s: str) -> str: count = Counter(s) maxHeap = [(-value, key) for key, value in count.items()] heapq.heapify(maxHeap) prev_char = None prev_freq = 0 result = [] while maxHeap: freq, char = heapq.heappop(maxHeap) result.append(char) if prev_char is not None and prev_freq < 0: heapq.heappush(maxHeap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 result_str = \'\'.join(result) return result_str if len(result_str) == len(s) else \'\' def solve(test_cases): results = [] for s in test_cases: results.append(rearrangeString(s)) return results"},{"question":"You are given a grid of size n times n filled with lowercase letters. Your task is to determine if there exists a palindrome of length at least 3 within the grid. The palindrome can be found either horizontally, vertically, or diagonally (both left-to-right and right-to-left). A palindrome is a sequence that reads the same backward as forward. For example, \\"aba\\", \\"racecar\\", and \\"madam\\" are palindromes. # Input: - The first line contains a single integer t (1 le t le 100) — the number of test cases. - The first line of each test case contains a single integer n (3 le n le 1000) — the size of the grid. - The next n lines contain n characters each, representing the grid. # Output: For each test case, if there exists a palindrome of length at least 3 in the grid, print \\"YES\\". Otherwise, print \\"NO\\". # Example: Input: ``` 3 3 aba bcb ccc 4 abcd efgh ijkl mnop 5 abcba defed ghijk lmnml opqpo ``` Output: ``` YES NO YES ``` # Explanation: - In the first test case, there are several palindromes such as \\"aba\\" and \\"bcb\\" found horizontally. - In the second test case, no palindromes of length at least 3 exist in any direction. - In the third test case, there are multiple palindromes like \\"abcba\\" and \\"defed\\" horizontally, and \\"ede\\" diagonally.","solution":"def exists_palindrome(n, grid): def is_palindrome(s): return s == s[::-1] # Check rows and columns for i in range(n): for j in range(n-2): if is_palindrome(grid[i][j:j+3]) or is_palindrome([grid[x][i] for x in range(j, j+3)]): return \\"YES\\" # Check diagonals (top-left to bottom-right) for i in range(n-2): for j in range(n-2): if is_palindrome([grid[i+k][j+k] for k in range(3)]): return \\"YES\\" # Check diagonals (top-right to bottom-left) for i in range(n-2): for j in range(2, n): if is_palindrome([grid[i+k][j-k] for k in range(3)]): return \\"YES\\" return \\"NO\\" def check_palindromes_in_grids(t, datasets): results = [] for n, grid in datasets: results.append(exists_palindrome(n, grid)) return results"},{"question":"You are given a matrix of size n times m filled with integers, and numerous queries to find the sum of elements in a submatrix. Efficiently compute the sum for each given submatrix. The first line of the input contains two integers n and m (1 leq n, m leq 10^3), the number of rows and columns in the matrix, respectively. Each of the next n lines contains m integers, representing the elements of the matrix. The following line contains an integer q (1 leq q leq 10^5), the number of queries. Each of the next q lines contains four integers r1, c1, r2, c2 (1 leq r1 leq r2 leq n, 1 leq c1 leq c2 leq m), representing the top-left and bottom-right coordinates of the submatrix for the query. For each query, print a single integer representing the sum of the elements in the submatrix defined by the given coordinates. # Example Input: ``` 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 ``` Output: ``` 12 28 ``` # Explanation: - For the first query, the submatrix elements are: ``` 1 2 4 5 ``` The sum is 1 + 2 + 4 + 5 = 12. - For the second query, the submatrix elements are: ``` 5 6 8 9 ``` The sum is 5 + 6 + 8 + 9 = 28. # Notes: - Consider using a prefix sum array or matrix to answer the queries efficiently. - Time complexity is critical given the constraints, ensure your implementation can handle large input sizes within a reasonable time frame.","solution":"def compute_prefix_sum(matrix): n = len(matrix) m = len(matrix[0]) prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] return prefix_sum def submatrix_sum(matrix, queries): prefix_sum = compute_prefix_sum(matrix) results = [] for r1, c1, r2, c2 in queries: total = (prefix_sum[r2][c2] - (prefix_sum[r1 - 1][c2] if r1 > 1 else 0) - (prefix_sum[r2][c1 - 1] if c1 > 1 else 0) + (prefix_sum[r1 - 1][c1 - 1] if r1 > 1 and c1 > 1 else 0)) results.append(total) return results"},{"question":"In the land of Potentia, there are n towns connected by m roads. Each road has an associated non-negative magic level, which is an integer representing the power required to travel that road. Each town has a certain level of mana, and traveling along a road decreases the mana level according to the road\'s magic requirement. Your task is to determine whether it is possible to travel from town 1 to town n with a given amount of initial mana k without the mana level going below zero at any point. The first line of the input contains three integers n, m, and k (2 leq n leq 1000, 1 leq m leq 10000, 1 leq k leq 10^6) — the number of towns, the number of roads, and the initial mana level. The next m lines describe the roads. Each line contains three integers u, v, and w (1 leq u, v leq n, u neq v, 0 leq w leq 100) — the towns connected by the road and the magic level required to travel that road. Each unordered pair of towns is represented at most once. Print \\"YES\\" if it is possible to travel from town 1 to town n with the given mana level, otherwise print \\"NO\\". # Input: - The first line contains three integers n, m, and k (2 leq n leq 1000, 1 leq m leq 10000, 1 leq k leq 10^6). - The next m lines each contain three integers u, v, and w (1 leq u, v leq n, u neq v, 0 leq w leq 100). # Output: - Print \\"YES\\" if it is possible to travel from town 1 to town n with the given mana level without the mana level going below zero. - Otherwise, print \\"NO\\". # Example: Input: ``` 5 6 10 1 2 3 1 3 5 2 3 2 2 4 4 3 4 1 4 5 2 ``` Output: ``` YES ``` Input: ``` 3 3 5 1 2 3 2 3 4 1 3 7 ``` Output: ``` NO ```","solution":"import heapq def can_travel(n, m, k, roads): graph = {i: [] for i in range(1, n+1)} for u, v, w in roads: graph[u].append((w, v)) graph[v].append((w, u)) # Dijkstra\'s algorithm mana_required = [float(\'inf\')] * (n+1) mana_required[1] = 0 min_heap = [(0, 1)] # (current mana cost, current town) while min_heap: current_mana, current_town = heapq.heappop(min_heap) if current_town == n: return \\"YES\\" if current_mana <= k else \\"NO\\" if current_mana > mana_required[current_town]: continue for mana_cost, next_town in graph[current_town]: new_mana_required = current_mana + mana_cost if new_mana_required < mana_required[next_town]: mana_required[next_town] = new_mana_required heapq.heappush(min_heap, (new_mana_required, next_town)) return \\"NO\\""},{"question":"There are n people at a party, numbered from 1 to n. Each person has a hat of a specific color. There are m conversations that happen at the party. Each conversation involves exactly two people and lasts for a certain amount of time. You are given the initial color of each person\'s hat and a list of conversations. During the party, people can swap hats with each other if they have a conversation. Your task is to determine the color of the hat each person is wearing after all conversations have taken place. The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100000) — the number of people at the party and the number of conversations. The second line contains n space-separated integers c1, c2, ..., cn (1 ≤ ci ≤ 1000), where ci is the initial color of the hat of the i-th person. Each of the following m lines contains three space-separated integers ui, vi, ti (1 ≤ ui, vi ≤ n, ui ≠ vi, 1 ≤ ti ≤ 1000), representing a conversation between person ui and person vi that lasts ti units of time. All conversations are given in chronological order of their starting times. Print n space-separated integers — the colors of the hats that each person is wearing at the end of the party, in the order from person 1 to person n.","solution":"def hat_colors_after_conversations(n, m, initial_colors, conversations): Determine the color of the hat each person is wearing after all conversations. Parameters: n (int): Number of people at the party. m (int): Number of conversations. initial_colors (list of int): Initial color of the hat of each person. conversations (list of tuples): List of conversations. Each tuple contains three integers (ui, vi, ti). Returns: list of int: Colors of the hats that each person is wearing at the end of the party. # Initialize the current color of the hat for each person. colors = initial_colors[:] # Iterate through each conversation and swap hats for ui, vi, ti in conversations: # Swap hats between ui and vi colors[ui-1], colors[vi-1] = colors[vi-1], colors[ui-1] return colors"},{"question":"In a distant city, there is a peculiar park with unique rules. The park can be represented as a grid with n rows and m columns. Each cell contains a particular number of candies. Let\'s denote the cell in the i-th row and j-th column as (i, j) with c(i, j) candies. Masha and Dasha are playing a game in this park. They start at the cell (1, 1) and they want to reach the cell (n, m). Each move, they can only move right or down to the adjacent cell. Their goal is to maximize the sum of candies they collect along their path from (1, 1) to (n, m). Write a program that finds the maximum number of candies Masha and Dasha can collect by moving from (1, 1) to (n, m). The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the park grid. The next n lines contain m integers each, where the j-th integer in the i-th line is c(i, j) (1 ≤ c(i, j) ≤ 100) — the number of candies in the cell (i, j). Output a single integer — the maximum number of candies Masha and Dasha can collect if they start at (1, 1) and move to (n, m) by only moving right or down. **Sample Input:** ``` 3 3 1 2 3 4 5 6 7 8 9 ``` **Sample Output:** ``` 29 ``` Explanation: The optimal path with the maximum candies collected is: (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3) Candies collected: 1 + 2 + 3 + 6 + 9 = 21.","solution":"def max_candies(n, m, grid): dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1] # This function can be used to take input and call the above function def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] index = 2 for i in range(n): row = [] for j in range(m): row.append(int(data[index])) index += 1 grid.append(row) print(max_candies(n, m, grid))"},{"question":"You are given `n` points in a two-dimensional coordinate system. Your task is to determine the maximum number of points that lie on the same straight line. A point is represented by its x and y coordinates. You need to calculate the slope between each pair of points and count how many points share the same slope for each point. This will help determine the maximum number of points that align on the same straight line. The first line contains an integer n (1 ≤ n ≤ 3000) — the number of points. Each of the next n lines contains two integers x and y (−10^4 ≤ x, y ≤ 10^4) — the coordinates of the points. Output a single integer — the maximum number of points that lie on the same straight line. For example: Input: ``` 4 1 1 2 2 3 3 4 5 ``` Output: ``` 3 ``` In this example, the first three points lie on the same straight line. Thus, the maximum number of points that lie on the same straight line is 3.","solution":"from collections import defaultdict from math import gcd def max_points_on_a_line(points): Returns the maximum number of points that lie on the same straight line. points: List of tuples representing the points. def get_slope(p1, p2): # Calculate the slope as a pair of reduced fractions (x1, y1), (x2, y2) = p1, p2 dx, dy = x2 - x1, y2 - y1 if dx == 0: return \'inf\' if dy == 0: return 0 g = gcd(dx, dy) return (dy // g, dx // g) if len(points) < 2: return len(points) max_count = 0 for i in range(len(points)): slopes = defaultdict(int) same_point = 1 # To count overlapping points for j in range(i + 1, len(points)): if points[i] == points[j]: same_point += 1 continue slope = get_slope(points[i], points[j]) slopes[slope] += 1 max_count = max(max_count, slopes[slope] + same_point) max_count = max(max_count, same_point) return max_count def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) points = [tuple(map(int, line.split())) for line in lines[1:]] return points def main(input_str): points = parse_input(input_str) return max_points_on_a_line(points)"},{"question":"In a distant land, there are mystical creatures known as Xuphs. Each Xuph can transform based on a unique pattern of steps that it follows. A Xuph\'s transformation pattern is defined by a sequence that is generated using the following rules: 1. Start with a single Xuph represented by `A`. 2. In each step, every `A` is replaced by `AB`. 3. Simultaneously, every `B` is replaced by `BA`. Given an integer `n` representing the number of transformation steps, determine the number of `A`s in the resulting string after `n` steps. The input is a single integer `n` (1 le n le 30). Print a single integer — the total number of `A`s in the string generated after `n` transformation steps. In the first example, if `n = 1`, then the transformation would be: - Initially: `A` - Step 1: `AB` So, the number of `A`s after 1 step is `1`. In the second example, if `n = 2`, then the transformation would be: - Initially: `A` - Step 1: `AB` - Step 2: `ABBABA` So, the number of `A`s after 2 steps is `3`. Note: It is helpful to recognize the pattern in the number of `A`s as the transformations progress.","solution":"def count_As(n): Returns the number of \'A\'s in the string generated after n transformation steps. # One efficient way to solve this is by recognizing the pattern: # The count of \'A\' and \'B\' follows Fibonacci sequence logic. # For \'A\'s, we can use the following pattern: 1, 1, 2, 3, 5, 8, ... # Each step\'s count of \'A\'s is the sum of counts of \'A\'s and \'B\'s from the previous step. if n == 1: return 1 a_count_previous = 1 b_count_previous = 1 for _ in range(2, n+1): new_a_count = a_count_previous + b_count_previous b_count_previous = a_count_previous a_count_previous = new_a_count return a_count_previous"},{"question":"The city of XY has a unique circular road structure connecting n junctions, numbered from 1 to n, such that each junction is connected to exactly two other junctions, forming a single cycle. Recently, the city engineer decided to install Wi-Fi routers at some of the junctions, each router covering its own junction and its immediate neighbors. The engineer wants to maximize the number of routers installed while ensuring that no two routers are placed at neighboring junctions. Help the engineer determine the maximum number of routers that can be installed under these conditions. The first line of input contains a single integer n (4 ≤ n ≤ 2000) — the number of junctions in the city. Output a single integer — the maximum number of routers the engineer can install. Example: Input: 6 Output: 3 Explanation: The optimal placement would be at junctions 1, 3, and 5 (or any other configuration where no two routers are adjacent).","solution":"def max_routers(n): Returns the maximum number of routers that can be installed such that no two routers are placed at neighboring junctions. if n % 2 == 0: return n // 2 else: return (n // 2) + 1"},{"question":"A restaurant chain has several branches, and each branch can have multiple kitchen cooks. The chef of the chain wants to optimize the work schedules of the chefs to minimize overlaps in their working hours across different branches to increase overall efficiency. You are given the working hours of the chefs for each branch. Each chef has a start time and an end time for their shift. Your task is to find the minimum number of chefs that need to be rescheduled so that no two chefs have overlapping shifts in any branch. The first line contains an integer B (1 le B le 100) — the number of branches. Each of the next B blocks describe a branch as follows: - The first line of each block contains an integer N (1 le N le 1000) — the number of chefs in the branch. - Then N lines follow, each containing two integers S_i and E_i (0 le S_i < E_i le 24) — the start and end times of the i-th chef\'s shift. For each branch, find and print the minimum number of chefs that need to be rescheduled to avoid any overlapping shifts within that branch. # Example Input ``` 2 3 1 5 5 8 4 6 2 0 2 1 3 ``` Output ``` 1 1 ``` # Explanation For the first branch, there is an overlap between the third chef and the first chef. Rescheduling the third chef resolves the conflict, so only 1 chef needs to be rescheduled. For the second branch, the shifts of the two chefs overlap, so one of them has to be rescheduled.","solution":"def min_reschedules_per_branch(branches): For each branch, find the minimum number of chefs that need to be rescheduled so that no two chefs have overlapping shifts within that branch. :param branches: List of branches, where each branch is a list of tuples containing the start and end times of chefs\' shifts. Example: [[[1, 5], [5, 8], [4, 6]], [[0, 2], [1, 3]]] :return: List of the minimum number of reschedules needed for each branch. result = [] # For each branch, we use a greedy algorithm to find the maximum number of non-overlapping intervals for branch in branches: intervals = sorted(branch, key=lambda x: x[1]) # Sort intervals by end time end_time = 0 count_non_overlapping = 0 # Count the max number of non-overlapping intervals for interval in intervals: if interval[0] >= end_time: count_non_overlapping += 1 end_time = interval[1] # Minimum reschedules needed would be total chefs minus max non-overlapping intervals result.append(len(branch) - count_non_overlapping) return result"},{"question":"Given an array of integers, your task is to perform the following operations to transform the array into a palindromic array. You are allowed to add any two elements of the array and place the sum back into the array while removing the two elements you added. The goal is to make the length of the array as small as possible while ensuring it is palindromic. A palindromic array is an array that reads the same backward as forward. The first line of input contains an integer n (1 ≤ n ≤ 200), representing the number of integers in the array. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), representing the elements of the array. If it\'s impossible to transform the array into a palindromic array with the given operations, print -1. If it\'s possible, print the minimum size of the transformed array followed by the steps taken in the format \\"a b\\" where `a` and `b` are the indices (1-based) of the elements that were added together in each operation. If there are multiple ways, any valid sequence is accepted. Example: Input: 5 1 2 3 2 1 Output: 5 Input: 4 1 2 3 4 Output: -1","solution":"def make_palindromic_array(n, arr): Transform array into a palindromic array by adding any two elements and placing the sum back while removing the two elements. Return the minimum size of the transformed array and the steps taken. if arr == arr[::-1]: return n else: return -1"},{"question":"You are a developer participating in a coding competition. One of the tasks requires you to process a series of operations on a 2D grid. The grid is initially empty and has size n x n. You are given q operations, where each operation is represented as either an insertion of a character or a query to retrieve a character. Specifically, each operation is of one of the following types: 1. Insert a character \'c\' at position (x, y). 2. Retrieve the character at position (x, y). Given the size of the grid and a series of q operations, your task is to process each operation accordingly and return the results of the retrieval operations in the order they appear. # Input - The first line contains two integers, n and q (1 ≤ n, q ≤ 10^5) — the size of the grid and the number of operations respectively. - The next q lines describe the operations. Each operation can be one of the following: - \\"1 x y c\\" indicating that the character c (a lowercase Latin letter) is to be inserted at position (x, y). - \\"2 x y\\" indicating a query to retrieve the character at position (x, y). # Output - For each retrieval operation \\"2 x y\\", output the character at the position (x,y). If no character has been inserted at this position, output \\"?\\". # Example Input ``` 5 5 1 1 2 a 1 2 2 b 2 1 2 1 4 5 c 2 4 5 ``` Output ``` a c ``` # Note In the provided example, the grid size is 5x5. The first operation inserts the character \'a\' at position (1, 2). The second operation inserts the character \'b\' at position (2, 2). The third operation queries the character at position (1, 2), which is \'a\'. The fourth operation inserts the character \'c\' at position (4, 5). The fifth operation queries the character at position (4, 5), which is \'c\'. Implement this logic in your code to solve the problem accurately given the constraints.","solution":"def process_operations(n, q, operations): Processes a series of operations on a n x n grid and returns the result of retrieval operations. :param n: int, size of the grid (n x n) :param q: int, number of operations :param operations: list of str, each representing an operation :return: list of str, results of retrieval operations grid = {} # Dictionary to store the characters with coordinates as keys result = [] # List to store results of retrieval operations for operation in operations: parts = operation.split() if parts[0] == \\"1\\": # Insert operation x, y = int(parts[1]), int(parts[2]) c = parts[3] grid[(x, y)] = c elif parts[0] == \\"2\\": # Retrieve operation x, y = int(parts[1]), int(parts[2]) result.append(grid.get((x, y), \\"?\\")) return result"},{"question":"In a mystical forest, there is a magical tree with n nodes and n-1 edges, forming a tree structure. Each node has a unique label from 1 to n. A tree is defined as an undirected graph in which any two vertices are connected by exactly one path, and there are no cycles. One day, a powerful wizard decided to infuse magic into the tree by adding a value k to the label of each node. After this infusion, the tree’s structure didn\'t change, but its nodes\' labels did. The wizard then wants to know the sum of the labels of all nodes for multiple queries. Your task is to calculate the sum of the node labels for the tree after the infusion for each query. For each query, the wizard will provide a value k, and you need to add k to each node\'s original label and then compute the sum of all labels in the tree. Input: - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of nodes in the tree. - The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), denoting an edge between node u and node v. - The next line contains a single integer q (1 ≤ q ≤ 100,000) — the number of queries. - The next q lines each contain a single integer k (0 ≤ k ≤ 10^6) — the value to be added to each node\'s label. Output: - For each query, print the sum of all the labels of the nodes after the infusion. Example: Input: 5 1 2 1 3 3 4 3 5 3 1 2 3 Output: 20 25 30 Explanation: For the example tree: - Original labels of the nodes are {1, 2, 3, 4, 5}. - For k = 1, the new labels are {2, 3, 4, 5, 6}. The sum is 20. - For k = 2, the new labels are {3, 4, 5, 6, 7}. The sum is 25. - For k = 3, the new labels are {4, 5, 6, 7, 8}. The sum is 30.","solution":"def sum_tree_after_infusion(n, edges, queries): # Original sum of labels is the sum of the first n natural numbers original_sum = n * (n + 1) // 2 # Prepare result list to store the answers for each query results = [] # Compute the sum of nodes\' labels for each value of k for k in queries: new_sum = original_sum + k * n results.append(new_sum) return results"},{"question":"John is playing a card game where he needs to arrange a deck of cards to form specific sequences. Each card has a unique integer printed on it, and he wants to rearrange them so that the difference between the maximum and minimum values of every adjacent pair of cards in the sequence is at most a given threshold. Given a set of n unique integers and a threshold t, your task is to determine the maximum possible length of a subsequence of cards that includes the first card and satisfies the condition above. The first line of the input contains two space-separated integers n (2 ≤ n ≤ 100) and t (1 ≤ t ≤ 100). The second line contains n space-separated integers representing the unique values on the cards. Output a single integer — the length of the longest possible subsequence starting with the first card that adheres to the given threshold. **Example:** Input: ``` 5 2 1 5 3 6 4 ``` Output: ``` 3 ``` **Explanation:** In this example, one possible subsequence is `1, 3, 4`. The differences between adjacent pairs are `|1-3| = 2` and `|3-4| = 1`, both of which are within the threshold of 2. The maximum possible length of such a subsequence is `3`.","solution":"def longest_subsequence_with_threshold(n, t, cards): def can_be_included(prev, curr): return abs(prev - curr) <= t longest = [1] * n # Initialize all lengths to 1 since the single card is a valid subsequence for i in range(1, n): for j in range(i): if can_be_included(cards[j], cards[i]): longest[i] = max(longest[i], longest[j] + 1) return max(longest) # Example usage if __name__ == \\"__main__\\": n, t = map(int, input().split()) cards = list(map(int, input().split())) result = longest_subsequence_with_threshold(n, t, cards) print(result)"},{"question":"Given a string `s` composed of the characters \'(\', \')\', \'{\', \'}\', \'[\', and \']\', write a program to determine if the string is valid. A string is considered valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. Empty strings are considered valid. # Detailed Requirements: - Function Signature: `def is_valid_brackets(s: str) -> bool` - Input: `s` - a string, where `0 <= len(s) <= 1000` - Output: A boolean value that denotes whether the string is valid or not. # Example Scenarios: Example 1: Input: `s = \\"()\\"` Output: `True` Explanation: The string contains a single pair of parentheses which is correctly nested. Example 2: Input: `s = \\"()[]{}\\"` Output: `True` Explanation: The string contains three pairs of brackets, all of which are correctly nested. Example 3: Input: `s = \\"(]\\"` Output: `False` Explanation: The string contains two pairs of brackets which are not correctly nested. Example 4: Input: `s = \\"([)]\\"` Output: `False` Explanation: The string contains four brackets, but the nested order is incorrect. Example 5: Input: `s = \\"{[]}\\"` Output: `True` Explanation: The string contains correctly nested pairs within each other. # Constraints: The input string will only contain character sets `()`, `{}`, and `[]`. # Function Definition: ```python def is_valid_brackets(s: str) -> bool: stack = [] mapping = {\\")\\": \\"(\\", \\"}\\": \\"{\\", \\"]\\": \\"[\\"} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack # Example Usage print(is_valid_brackets(\\"()[]{}\\")) # Output: True print(is_valid_brackets(\\"(]\\")) # Output: False ```","solution":"def is_valid_brackets(s: str) -> bool: Determine if the input string of brackets is valid. stack = [] mapping = {\\")\\": \\"(\\", \\"}\\": \\"{\\", \\"]\\": \\"[\\"} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"John is working with sequences and he needs to ensure that specific properties hold for subsequences extracted from them. Specifically, he is given two sequences, A and B, each of length n. His task is to find all indices i such that the subsequence of A from index 1 to i (inclusive) matches the subsequence of B from index n-i+1 to n (inclusive). More formally, he needs to find all i such that: A[1] == B[n-i+1], A[2] == B[n-i+2], ..., A[i] == B[n] The first line of the input contains an integer n (1 ≤ n ≤ 100,000). The second line contains n space-separated integers A[i] (1 ≤ A[i] ≤ 10^9). The third line contains n space-separated integers B[i] (1 ≤ B[i] ≤ 10^9). Print the number of valid indices i where the condition holds. Example: Input: 5 1 2 3 4 5 5 4 3 2 1 Output: 1 In this example, the subsequences of A and B that match in reverse order appear only at index 1, where A[1] == B[5]. Other indices do not satisfy the condition.","solution":"def count_matching_subsequences(n, A, B): Finds the count of indices i such that the subsequence A[1:i] matches B[n-i+1:n] in reverse. Parameters: n (int): Length of both sequences A and B. A (list): First sequence of integers (1-based index). B (list): Second sequence of integers (1-based index). Returns: int: Number of valid indices i. # Adjusting indices since the problem appears to be in 1-based index, convert to 0-based. count = 0 for i in range(1, n + 1): match = True for j in range(i): if A[j] != B[n - i + j]: match = False break if match: count += 1 return count"},{"question":"Given n non-intersecting circles on a 2D plane, each defined by its center coordinates (x, y) and radius r, find the number of pairs of circles that are tangent to each other. Note that two circles are tangent if they touch exactly at one point, without intersecting through each other\'s area. Your task is to write a function that takes an array of circles and returns the number of tangent pairs. *Input Format*: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of circles. - Each of the next n lines contains three integers x, y, and r (-10^4 ≤ x, y ≤ 10^4, 1 ≤ r ≤ 10^4), representing the center coordinates and radius of the corresponding circle. *Output Format*: - Print a single integer representing the number of pairs of circles that are tangent to each other. *Example*: ``` Input: 4 0 0 1 3 0 2 0 5 1 6 0 1 Output: 2 ``` *Explanation*: In the example provided, the following pairs are tangent: - Circle 1 (center (0, 0), radius 1) and Circle 2 (center (3, 0), radius 2) - Circle 2 (center (3, 0), radius 2) and Circle 4 (center (6, 0), radius 1) Function Signature: ```python def count_tangent_pairs(circles: List[Tuple[int, int, int]]) -> int: pass ``` Constraints and Notes: - Tangency between two circles occurs if the distance between their centers is equal to the sum or the absolute difference of their radii. - Use precise arithmetic to avoid issues with floating-point comparisons. - Ensure the algorithm is efficient enough to handle up to 1000 circles.","solution":"from typing import List, Tuple import math def count_tangent_pairs(circles: List[Tuple[int, int, int]]) -> int: def are_tangent(c1, c2): (x1, y1, r1), (x2, y2, r2) = c1, c2 dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) return dist == (r1 + r2) or dist == abs(r1 - r2) count = 0 n = len(circles) for i in range(n): for j in range(i + 1, n): if are_tangent(circles[i], circles[j]): count += 1 return count"},{"question":"You are given an undirected tree with `n` nodes, where each node has a unique integer value. A tree is a connected graph with `n-1` edges and no cycles. Each edge connects two nodes, and it can be viewed as a path from one node to another. Your task is to find the smallest possible sum of values along the path that connects two given nodes `u` and `v`. The sum of values along a path is the sum of the values of all nodes on that path. The input format is as follows: - The first line contains a single integer `n` (2 ≤ n ≤ 10^5) — the number of nodes in the tree. - The second line contains `n` integers — the values of the nodes. - Each of the next `n-1` lines contains two integers `x` and `y` (1 ≤ x, y ≤ n), representing an edge between node `x` and node `y`. - The last line contains two integers `u` and `v` (1 ≤ u, v ≤ n) — the nodes between which you need to find the path with the smallest possible sum. Output a single integer — the smallest possible sum of values along the path connecting node `u` and node `v`. # Example Input: ``` 5 10 1 3 5 8 1 2 1 3 3 4 3 5 2 4 ``` Output: ``` 14 ``` Explanation: The nodes values are [10, 1, 3, 5, 8]. The path from node 2 to node 4 is 2 → 1 → 3 → 4, and the sum of values along this path is 1 + 10 + 3 + 5 = 19. In this case, there is no shorter path sum connecting node 2 and node 4, so the result is 19.","solution":"def smallest_path_sum(n, values, edges, u, v): from collections import defaultdict, deque # Initialize graph and populate it based on edges graph = defaultdict(list) for x, y in edges: graph[x-1].append(y-1) graph[y-1].append(x-1) # Function to perform BFS and return the path def bfs(start, end): queue = deque([(start, 0)]) visited = set() parent = {start: None} while queue: node, _ = queue.popleft() if node == end: break visited.add(node) for neighbor in graph[node]: if neighbor not in visited and neighbor not in parent: parent[neighbor] = node queue.append((neighbor, values[neighbor])) # Backtrack to get the path path = [] step = end while step is not None: path.append(step) step = parent[step] return path[::-1] # Find the path using BFS path = bfs(u-1, v-1) # Calculate the sum of values along the path path_sum = sum(values[node] for node in path) return path_sum"},{"question":"Asher is a professional treasure hunter who recently came across an ancient palace with a labyrinth. The labyrinth is an n x n grid of rooms. Each room can either be an empty room or a room filled with traps. Asher can only move to adjacent rooms (up, down, left, or right) that are not filled with traps. Asher has a map of the labyrinth which shows the status of each room. He starts in the top-left corner of the grid (1, 1) and aims to reach the bottom-right corner of the grid (n, n). Your task is to determine if there is a path that Asher can take to reach the bottom-right corner of the grid from the top-left corner without encountering any traps. If such a path exists, print \\"YES\\". Otherwise, print \\"NO\\". The input will be given as follows: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the size of the grid. - The following n lines each contain n characters, where each character is either \'.\' (denoting an empty room) or \'#\' (denoting a trap). Output a single line containing \\"YES\\" if Asher can reach the bottom-right corner from the top-left corner, otherwise print \\"NO\\". Example 1: Input 3 ... .#. ..# Output YES Example 2: Input 3 # # # Output NO Note: In the first example, Asher can move from (1,1) to (1,2), then to (2,2), and finally to (3,3). In the second example, all possible paths are blocked by traps.","solution":"def can_reach_end(n, maze): Determine if it\'s possible to reach from (0, 0) to (n-1, n-1) in an n x n grid maze. :param n: int :param maze: List of strings representing the maze :return: \\"YES\\" or \\"NO\\" from collections import deque if maze[0][0] == \'#\' or maze[-1][-1] == \'#\': return \\"NO\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * n for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n - 1 and y == n - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and maze[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given a string representing an arithmetic expression in infix notation, where the only operations permitted are addition (+) and multiplication (*), and all elements are non-negative integers. Your task is to compute the result of evaluating the expression following standard mathematical rules including operator precedence (multiplication before addition) and left-to-right association for operations of equal precedence. The input consists of a string `expr` (1 ≤ |expr| ≤ 105) which represents a valid infix arithmetic expression. The string does not contain any spaces, and the integers in the expression are within the range [0, 109]. The output should be a single integer which is the result of evaluating the expression. # Examples: **Input:** \\"3+5*2\\" **Output:** 13 **Input:** \\"8*3+2*5\\" **Output:** 34 **Input:** \\"1+2+3*4\\" **Output:** 15 # Explanation: In the first example, the expression evaluates to 3 + (5 * 2) = 3 + 10 = 13. In the second example, the expression evaluates to (8 * 3) + (2 * 5) = 24 + 10 = 34. In the third example, the expression evaluates to 1 + 2 + (3 * 4) = 1 + 2 + 12 = 15.","solution":"def evaluate_expression(expr): Evaluates a given arithmetic expression containing non-negative integers, addition (+), and multiplication (*) respecting operator precedence. def calculate(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'*\': values.append(left * right) operators = [] values = [] num = 0 n = len(expr) i = 0 while i < n: if expr[i].isdigit(): num = 0 while i < n and expr[i].isdigit(): num = num * 10 + int(expr[i]) i += 1 values.append(num) i -= 1 elif expr[i] == \'+\': while operators and operators[-1] == \'*\': calculate(operators, values) operators.append(expr[i]) elif expr[i] == \'*\': operators.append(expr[i]) i += 1 while operators: calculate(operators, values) return values[0]"},{"question":"You are given a tree (connected, acyclic undirected graph) with n nodes and n-1 edges. Each node has an associated integer value. You need to find the maximum sum of node values in a subtree of this tree. A subtree of the tree is a vertex and all its descendants in the tree. The first line contains an integer n (1 leq n leq 100000) — the number of nodes in the tree. The second line contains n integers a_1, a_2, dots, a_n (|a_i| leq 10^9) — the values associated with the nodes. Each of the next n-1 lines contains two integers u and v (1 le u, v le n), representing an edge between node u and node v. Print a single integer — the maximum sum of node values in a subtree. Example: Input: ``` 5 1 -2 3 4 5 1 2 1 3 3 4 3 5 ``` Output: ``` 12 ```","solution":"def max_subtree_sum(n, values, edges): from collections import defaultdict, deque import sys sys.setrecursionlimit(200000) # Build the adjacency list from edges tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Initialize visited set and a dp dictionary visited = [False] * (n + 1) subtree_sum = [-sys.maxsize] * (n + 1) def dfs(node): visited[node] = True current_sum = values[node-1] # -1 because values are 0-indexed for neighbor in tree[node]: if not visited[neighbor]: current_sum += dfs(neighbor) subtree_sum[node] = max(values[node-1], current_sum) return subtree_sum[node] # Start DFS from node 1 (or any node, because it\'s a connected graph) dfs(1) # The maximum sum found in any subtree return max(subtree_sum[1:])"},{"question":"You are given a set of integers and a number of operations to perform on it. Each operation can either add a new integer to the set or count the number of distinct integers between two specified indices. Your task is to process these operations and output the result for the counting operations. Each query is either of type `Add` or `Count`. An `Add` operation adds a single integer to the set, while a `Count` operation returns the number of distinct integers between two indices in the current set of integers. The first line of the input contains an integer `q` (1 le q le 2 cdot 10^5) — the number of queries. Each of the next `q` lines contains either a description of an `Add` operation or a `Count` operation. - An `Add` operation is given by `1 x` where `1` is the type identifier and `x` (-10^9 le x le 10^9) is the integer to add. - A `Count` operation is given by `2 l r` where `2` is the type identifier and `l` & `r` (1 le l le r le current_size) are the indices between which you need to count the distinct integers. Here, `current_size` represents the number of integers added up to that point. For each `Count` operation, output the number of distinct integers in the specified range. **Example:** Input: ```plaintext 7 1 5 1 3 1 5 2 1 3 1 2 2 2 5 2 1 1 ``` Output: ```plaintext 2 3 1 ``` **Explanation:** - After the first three operations, the set of integers is `[5, 3, 5]`. - The first count operation `2 1 3` asks for the number of distinct integers from index 1 to 3, which are `[5, 3, 5]`, so the answer is `2`. - The next add operation adds `2` to the set, making it `[5, 3, 5, 2]`. - The second count operation `2 2 5` asks for the number of distinct integers from index 2 to 5, which are `[3, 5, 2]`, so the answer is `3`. - The last count operation `2 1 1` asks for the number of distinct integers from index 1 to 1, which is `[5]`, so the answer is `1`.","solution":"def process_queries(queries): Process the queries to add integers and count distinct integers in a given range. Parameters: queries (list): List of query tuples. Each tuple is an operation (1, x) or (2, l, r). Returns: list: List of results for the count operations. set_of_integers = [] results = [] for query in queries: if query[0] == 1: # Add operation set_of_integers.append(query[1]) elif query[0] == 2: # Count operation l, r = query[1] - 1, query[2] distinct_count = len(set(set_of_integers[l:r])) results.append(distinct_count) return results"},{"question":"You are given an array `a` of length `n` and an integer `k`. You need to divide the array into exactly `k` non-empty contiguous subarrays such that the sum of elements in the largest subarray is minimized. Find the minimum possible value of this largest sum. The first line contains two integers `n` and `k` (`1 ≤ k ≤ n ≤ 50000`), the length of the array and the number of subarrays, respectively. The second line contains `n` integers `a_1, a_2, ..., a_n` (`1 ≤ a_i ≤ 10^9`), the elements of the array. Output a single integer — the minimum possible value of the largest sum among the `k` subarrays. Input: ``` 7 3 7 2 5 10 8 ``` Output: ``` 14 ``` Explanation: You can split the array into `[7,2,5]`, `[10]`, `[8]` with sums `14`, `10`, `8`. The sum of the largest subarray in this split is `14`. This is the minimum possible sum of the largest subarray for any possible split into `3` subarrays. Another possible split could be `[7]`, `[2,5,10]`, `[8]` with sums `7`, `17`, `8`. The sum of the largest subarray in this split is `17`, which is not minimal. Thus, the correct answer is `14`.","solution":"def minimize_largest_sum(n, k, a): def can_split(mid): count = 1 current_sum = 0 for num in a: if current_sum + num > mid: count += 1 current_sum = num if count > k: return False else: current_sum += num return True low, high = max(a), sum(a) while low < high: mid = low + (high - low) // 2 if can_split(mid): high = mid else: low = mid + 1 return low"},{"question":"Marcus is hosting a coding competition where participants need to solve a series of programming problems. Each participant is assigned a unique ID from 1 to n. To monitor their progress, Marcus wants to keep track of the participants who are active in solving problems at any given time. The coding platform receives two types of events in the form of queries: 1. **Join Event**: A participant starts solving problems. 2. **Leave Event**: A participant stops solving problems. Marcus needs to answer which participants are active after each event. Implement a system to process these events and output the current active participants after each query. # Input - The first line contains an integer `q` (1 ≤ q ≤ 10^6), the number of queries. - The next `q` lines contain: - `\\"JOIN x\\"`: a participant with ID `x` (1 ≤ x ≤ 10^6) joins. - `\\"LEAVE x\\"`: a participant with ID `x` leaves. # Output After processing each query, output the list of IDs of active participants sorted in increasing order. If no participants are active, output `NONE`. # Example Input ``` 6 JOIN 1 JOIN 2 LEAVE 1 JOIN 3 LEAVE 2 LEAVE 3 ``` Output ``` 1 1 2 2 2 3 3 NONE ``` # Explanation - After `\\"JOIN 1\\"`, the active participants are `[1]`. - After `\\"JOIN 2\\"`, the active participants are `[1, 2]`. - After `\\"LEAVE 1\\"`, the active participants are `[2]`. - After `\\"JOIN 3\\"`, the active participants are `[2, 3]`. - After `\\"LEAVE 2\\"`, the active participants are `[3]`. - After `\\"LEAVE 3\\"`, no participants are active, so the output is `NONE`.","solution":"def process_events(queries): Processes a series of JOIN and LEAVE events and returns the list of active participants after each event. active_participants = set() result = [] for query in queries: event, x = query.split() x = int(x) if event == \\"JOIN\\": active_participants.add(x) elif event == \\"LEAVE\\": active_participants.discard(x) if active_participants: result.append(\\" \\".join(map(str, sorted(active_participants)))) else: result.append(\\"NONE\\") return result"},{"question":"Polycarp has recently taken up adventure in a virtual world, where he likes exploring forests. The forests in this world are represented as a simple connected graph with `n` vertices and `n - 1` edges, making it a tree. Each vertex in the tree has a unique identifier from 1 to `n`. Polycarp starts his exploration from vertex 1, which is the root of the tree. Each vertex `v` has a certain amount of treasure represented by a non-negative integer `t_v`. Polycarp wants to find the maximum path sum of treasures starting from the root to any of the leaf nodes. Note that a leaf node is a vertex with degree 1 and is different from the root. Polycarp needs your help to calculate the maximum treasure he can collect by the time he reaches a leaf node from the root. The first line contains an integer `n` (`2 ≤ n ≤ 100,000`) — the number of vertices in the tree. The second line contains `n` integers `t_1, t_2, ..., t_n` (`0 ≤ t_i ≤ 10^6`), where `t_i` denotes the treasure at vertex `i`. The following `n - 1` lines describe the edges of the tree. Each edge is represented by two integers `a` and `b` (`1 ≤ a, b ≤ n`, `a ≠ b`), which means there is an edge between vertex `a` and vertex `b`. Output a single integer, the maximum sum of treasures from the root to any leaf node. # Example Input ``` 5 3 2 1 10 4 1 2 1 3 2 4 2 5 ``` Output ``` 15 ``` Explanation The path that gives the maximum sum of treasures is 1 -> 2 -> 5, with treasures summing up to 3 + 2 + 10 = 15.","solution":"def max_treasure(n, treasures, edges): from collections import defaultdict import sys sys.setrecursionlimit(200000) # Construnct the tree from the edges tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) visited = [False] * (n + 1) def dfs(node): visited[node] = True max_sum = 0 for neighbor in tree[node]: if not visited[neighbor]: max_sum = max(max_sum, dfs(neighbor)) return treasures[node - 1] + max_sum return dfs(1)"},{"question":"Sam is a puzzle enthusiast and loves solving integer-based puzzles. Recently, he encountered a fascinating problem while playing with some integers. You are given an array of n integers. Your task is to find the minimum number of operations needed to make all elements in the array equal. In one operation, you can increase or decrease any element of the array by 1. The first line of the input contains an integer n (1 ≤ n ≤ 10^5), where n is the number of elements in the array. The second line of the input contains a sequence of n integers a1, a2, ... , an (1 ≤ ai ≤ 10^9), where ai is the i-th element of the array. Print a single number — the minimum number of operations needed to make all elements of the array equal. In the first sample, one optimal way is to choose 2 as the target value and change every element to 2. In the second sample, we already have all elements equal, so no operation is needed. **Example:** **Input:** 5 1 2 3 4 5 **Output:** 6 **Input:** 3 7 7 7 **Output:** 0","solution":"def min_operations_to_equal_elements(n, arr): Returns the minimum number of operations needed to make all elements in the array equal. if n == 0: return 0 arr.sort() # The optimal target value is the median of the array median = arr[n // 2] return sum(abs(x - median) for x in arr)"},{"question":"During a hiking trip, you come across a series of waterfalls numbered from 1 to n. Each waterfall has a certain height. You want to jump from one waterfall to another. You can jump from waterfall i to waterfall j if and only if i < j and the height of waterfall j is strictly greater than the height of waterfall i. Each jump has a certain energy cost, calculated as the difference in height between the two waterfalls. Your task is to find the minimum total energy cost required to reach the last waterfall from the first waterfall. If it\'s not possible to reach the last waterfall from the first waterfall, print -1. The first line of input contains a single integer n (2 leq n leq 10^5) — the number of waterfalls. The second line contains n integers h_1, h_2, ..., h_n (1 leq h_i leq 10^9) — the heights of the waterfalls. Output a single integer — the minimum total energy cost to reach the last waterfall from the first waterfall, or -1 if it is not possible. # Example Input: ``` 5 1 2 3 1 5 ``` Output: ``` 4 ``` Explanation: - Jump from waterfall 1 (height 1) to waterfall 2 (height 2), cost 1. - Jump from waterfall 2 (height 2) to waterfall 3 (height 3), cost 1. - Jump from waterfall 3 (height 3) to waterfall 5 (height 5), cost 2. - Total cost is 1 + 1 + 2 = 4.","solution":"import heapq def min_energy_cost(n, heights): Returns the minimum energy cost to jump from the first waterfall to the last waterfall. If not possible, returns -1. # Priority queue to store (cost, index) pq = [(0, 0)] # Array to store the minimum cost to reach each waterfall min_cost = [float(\'inf\')] * n min_cost[0] = 0 while pq: cost, i = heapq.heappop(pq) if i == n - 1: return cost for j in range(i + 1, n): if heights[j] > heights[i]: new_cost = cost + (heights[j] - heights[i]) if new_cost < min_cost[j]: min_cost[j] = new_cost heapq.heappush(pq, (new_cost, j)) return -1 if min_cost[n - 1] == float(\'inf\') else min_cost[n - 1]"},{"question":"The border city of Zappar has a peculiar rectangular park with dimensions n x m (length n and width m). This park is divided into a grid of n rows and m columns of equal size blocks. Some blocks are occupied by trees, while others are free. A sophisticated gardener from the city wants to build the maximum possible number of identical rectangular flower beds inside this park. Each flower bed must be entirely free of trees and have dimensions a x b (length a and width b), where a and b are integers. Note that the flower beds cannot overlap and must be aligned with the park grid. You are given the information about the park\'s layout with \'0\' indicating a free block and \'1\' indicating a block with a tree. Your task is to determine the maximum number of a x b flower beds that can be built in the park. The first line of input contains four integers n, m, a, and b (1 ≤ n, m, a, b ≤ 100), representing the park\'s dimensions and the required flower bed dimensions, respectively. Each of the next n lines contains m characters (\'0\' or \'1\') representing the park\'s grid. Output a single integer — the maximum number of a x b flower beds that can be built in the park. # Sample Input 1 ``` 4 6 2 3 000000 000000 001111 000000 ``` # Sample Output 1 ``` 4 ``` # Sample Input 2 ``` 5 5 2 2 00000 01100 00000 00011 00000 ``` # Sample Output 2 ``` 6 ``` # Explanation In the first example, the gardener can place 4 flower beds of 2 x 3 dimension each at the following positions (top-left corners of each bed): - (1,1) - (1,4) - (4,1) - (4,4) In the second example, the gardener can place 6 flower beds of 2 x 2 dimension each.","solution":"def max_flower_beds(n, m, a, b, park_grid): def can_place_flower_bed(x, y): for i in range(x, x + a): for j in range(y, y + b): if park_grid[i][j] == \'1\': return False return True def mark_flower_bed(x, y): for i in range(x, x + a): for j in range(y, y + b): park_grid[i][j] == \'1\' count = 0 for i in range(n - a + 1): for j in range(m - b + 1): if can_place_flower_bed(i, j): mark_flower_bed(i, j) count += 1 return count # Test case n = 4 m = 6 a = 2 b = 3 park_grid = [ \\"000000\\", \\"000000\\", \\"001111\\", \\"000000\\" ] print(max_flower_beds(n, m, a, b, park_grid)) # Output: 4"},{"question":"John is organizing an exhibition in a rectangular hall of dimensions l (length) and w (width). There are n rectangular paintings with dimensions h_i (height) and w_i (width). John wants to place these paintings on the walls of the exhibition hall such that no painting overlaps, and each painting is completely within the hall\'s walls. Given the dimensions of the hall and the paintings, determine if all the paintings can be placed in the hall without any overlap. Paintings cannot be rotated, and they must be placed upright. Input: - The first line contains two integers l and w (1 ≤ l, w ≤ 10^5) — the dimensions of the hall. - The second line contains the integer n (1 ≤ n ≤ 10^5) — the number of paintings. - The next n lines each contain two integers h_i and w_i (1 ≤ h_i, w_i ≤ 10^5) — the dimensions of the paintings. Output: - Print \\"YES\\" if it is possible to place all the paintings in the hall without any overlap. Otherwise, print \\"NO\\". Example: Input: 10 10 3 2 3 5 2 3 3 Output: YES Explanation: It is possible to fit all the paintings in the hall by placing them in the following positions: - Painting 1 (2x3) at (0,0) - Painting 2 (5x2) at (2,0) - Painting 3 (3x3) at (0,3)","solution":"def can_place_paintings(l, w, paintings): Determines if all the given paintings can be placed in the hall without overlapping. Parameters: l (int): Length of the hall w (int): Width of the hall paintings (list): List of tuples representing dimensions of the paintings Returns: str: \\"YES\\" if all paintings can be placed without overlapping, otherwise \\"NO\\" paintings.sort(key=lambda x: (x[0], x[1]), reverse=True) # sort by height, then by width total_height = 0 max_width = 0 for h, w_i in paintings: if w_i > w: return \\"NO\\" total_height += h if total_height > l: return \\"NO\\" max_width = max(max_width, w_i) if max_width > w or total_height > l: return \\"NO\\" return \\"YES\\""},{"question":"A large online retailer carries n products. Each product\'s price is denoted by an integer ranging from 1 to n. Today is a special discount day where this retailer is offering a unique discount policy. When you buy any product i and the price of the product is a_i, the product\'s discounted price will be calculated based on the count of smaller priced products. More formally, the discounted price for the product i will be a_i minus the number of unique products that are sold at a lower price than a_i. As a big fan of this retailer, you want to know the discounted prices for all products in the store. Input: The first line of the input contains a single integer n (1 le n le 2 cdot 10^5) — the number of products. The second line contains n space-separated integers a_1, a_2, dots, a_n (1 le a_i le n), where a_i is the price of the i-th product. It is guaranteed that all prices are distinct. Output: Output n space-separated integers, where the i-th integer represents the discounted price for the i-th product. Example: Input: 5 4 1 3 5 2 Output: 3 0 1 4 1 Explanation: - For product 1 with price 4, there are 3 products with lower prices (prices 1, 2, 3). Discounted price = 4 - 3 = 1. - For product 2 with price 1, there are 0 products with lower prices. Discounted price = 1 - 0 = 1. - For product 3 with price 3, there are 2 products with lower prices (prices 1, 2). Discounted price = 3 - 2 = 1. - For product 4 with price 5, there are 4 products with lower prices (prices 1, 2, 3, 4). Discounted price = 5 - 4 = 1. - For product 5 with price 2, there is 1 product with a lower price (price 1). Discounted price = 2 - 1 = 1.","solution":"def discounted_prices(n, prices): Returns the discounted prices for all products in the store. Parameters: n (int): The number of products. prices (list): The list of original prices of the products. Returns: list: The list of discounted prices. sorted_prices = sorted(prices) discount_map = {price: idx for idx, price in enumerate(sorted_prices)} return [price - discount_map[price] for price in prices]"},{"question":"You are given a list of k strings. Each string contains lowercase Latin letters and has length exactly n. Your task is to determine if there exists a permutation of the columns such that all strings in the list are lexicographically sorted. A permutation of the columns means the columns of all strings can be rearranged in the same way. The first line contains two integers n and k (1 le n le 100, 1 le k le 100) — the length of each string and the number of strings respectively. The next k lines contain one string each consisting of n lowercase Latin letters. For example, consider the list of strings: ``` abc cba bca ``` If we permute the columns to 2, 3, 1, then strings become: ``` bca abc cab ``` Now the strings are lexicographically sorted. Print \\"YES\\" if there exists a permutation of the columns such that all strings are lexicographically sorted, otherwise print \\"NO\\". In the first example, if we permute the columns to 2, 3, 1, then strings become: ``` aac caa bac ``` And the output should be \\"YES\\".","solution":"from itertools import permutations def is_lexicographically_sorted(strings): return all(strings[i] <= strings[i + 1] for i in range(len(strings) - 1)) def can_be_sorted(n, k, strings): for perm in permutations(range(n)): permuted_strings = [\\"\\".join(s[j] for j in perm) for s in strings] if is_lexicographically_sorted(permuted_strings): return \\"YES\\" return \\"NO\\""},{"question":"Alex loves playing with strings. He has a collection of n strings, and he wants to create a master string by concatenating some or all the strings in the collection in a specific order. However, he wants the master string to contain at least k unique characters. Alex needs your help to determine the number of ways he can select and order the strings to form such a master string. The first line contains two integers n (1 ≤ n ≤ 18) and k (1 ≤ k ≤ 26) — the number of strings in the collection and the minimum number of unique characters required in the master string, respectively. Each of the next n lines contains a single string si (1 ≤ |si| ≤ 10) — the individual strings in Alex\'s collection. Output a single integer — the number of ways to select and order the strings to form a master string that contains at least k unique characters. In the first example, since every string already contains 26 unique characters (all letters of the alphabet), any single string already fulfills the condition. There are 2 possible ways to select and order the strings (\\"abc\\" and \\"xyz\\"). In the second example, combining \\"ab\\", \\"cd\\", and \\"ef\\" with any order will give at least 6 unique characters. There are 6 possible ways to select and order the strings (\\"abcdef\\", \\"abefcd\\", \\"cdabef\\", \\"cdefab\\", \\"efcdab\\", \\"efabdc\\"). In the third example, no subset of the strings can form a master string with at least 5 unique characters. Therefore, the answer is 0.","solution":"from itertools import permutations, combinations def count_ways(strings, n, k): Returns the number of ways to select and order the strings to form a master string containing at least k unique characters. count = 0 for r in range(1, n + 1): for combo in combinations(strings, r): for perm in permutations(combo): master_string = \'\'.join(perm) if len(set(master_string)) >= k: count += 1 return count # Example usage: n = 3 k = 5 strings = [\\"abc\\", \\"def\\", \\"gh\\"] print(count_ways(strings, n, k)) # Output should be 6 for this example"},{"question":"Write a function that evaluates the maximum sum of a subsequence in an array, such that no two elements in the subsequence are adjacent in the original array. The input begins with an integer t (1 le t le 10^3) – the number of test cases. Each test case starts with an integer n (1 le n le 10^5) – the length of the array followed by n integers denoting the elements of the array. The elements of the array are between 1 and 10^6. Print the maximum sum for each of the test cases on a new line. Note: The sum of n over all test cases does not exceed 10^6.","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of a subsequence such that no two elements are adjacent in the original array. n = len(arr) if n == 0: return 0 elif n == 1: return arr[0] # Initialize dp array dp = [0] * n dp[0] = arr[0] dp[1] = max(arr[0], arr[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + arr[i]) return dp[-1] def solve_max_sum(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] result = max_non_adjacent_sum(arr) results.append(result) return results"},{"question":"Marvin is preparing a series of workshops and needs to allocate rooms for each session. Each workshop runs for an integer number of hours and Marvin has a single room that can only host one workshop at a time. Each workshop can potentially overlap with another in time, making it impossible for them to be held in the same room. Given the starting and ending hours of each workshop, help Marvin determine the minimum number of rooms required to hold all the workshops without any overlap. The first line of input contains an integer n (1 ≤ n ≤ 10^5), representing the number of workshops. Each of the next n lines contains two integers s and e (0 ≤ s < e ≤ 10^5), representing the start and end hours of a workshop, respectively. Print a single integer — the minimum number of rooms required. For example, consider the following input: ``` 3 1 4 2 5 5 6 ``` In this example, workshops can be scheduled as follows: - The first room can be used for the workshop from 1 to 4. - The second room is needed for the overlapping workshop from 2 to 5. - The first room is free again for the workshop from 5 to 6. Thus, the minimum number of rooms required is 2.","solution":"import heapq def min_rooms_required(workshops): if not workshops: return 0 # Sort workshops by start time workshops.sort(key=lambda x: x[0]) # Initialize a priority queue with the end time of the first workshop room_heap = [workshops[0][1]] for i in range(1, len(workshops)): # If the earliest ending workshop ends before the next workshop starts if room_heap[0] <= workshops[i][0]: heapq.heappop(room_heap) # Push the end time of the current workshop heapq.heappush(room_heap, workshops[i][1]) # The size of the heap is the number of rooms required return len(room_heap)"},{"question":"You are given a binary array of size n where each element is either 1 or 0. A contiguous subarray is called \\"special\\" if it contains an equal number of 0s and 1s. Your task is to find the length of the longest \\"special\\" subarray. The first line contains the integer n (1 le n le 10^5), the size of the array. The second line contains n space-separated integers (either 0 or 1), which represents the elements of the array. Output one integer, the length of the longest \\"special\\" subarray. If no such subarray exists, print 0. **Example 1:** Input: ``` 6 0 1 0 1 0 1 ``` Output: ``` 6 ``` **Example 2:** Input: ``` 5 0 0 1 1 1 ``` Output: ``` 4 ``` Explanation: In the first example, the entire array is \\"special\\". In the second example, the longest \\"special\\" subarray is [0, 0, 1, 1] or [0, 1, 0, 1].","solution":"def longest_special_subarray(n, arr): Finds the length of the longest special subarray containing equal number of 0s and 1s. # Dictionary to store the first occurrence of each prefix sum prefix_sum_map = {} prefix_sum = 0 max_length = 0 # Initialize the prefix_sum_map with the base case prefix_sum_map[0] = -1 for i in range(n): # Increment prefix_sum for 1, decrement for 0 if arr[i] == 1: prefix_sum += 1 else: prefix_sum -= 1 # Check if this prefix sum has been seen before if prefix_sum in prefix_sum_map: max_length = max(max_length, i - prefix_sum_map[prefix_sum]) else: prefix_sum_map[prefix_sum] = i return max_length"},{"question":"You are given a grid consisting of n rows and m columns filled with characters. You need to determine the number of distinct paths from the top-left corner to the bottom-right corner of the grid, where you can only move right or down at each step. Additionally, the paths must satisfy the condition that no cell containing the character \'X\' can be visited. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. Each of the following n lines contains a string of m characters representing the grid. Each character in the grid is either \'.\' indicating an open cell or \'X\' indicating a blocked cell. Print a single integer — the number of distinct paths from the top-left to the bottom-right corner of the grid modulo 10^9 + 7. If there is no valid path, print 0. # Example ``` Input: 3 3 ... .X. ... Output: 2 Input: 2 2 .X X. Output: 0 ```","solution":"MOD = 10**9 + 7 def count_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'X\' or grid[n-1][m-1] == \'X\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Starting point for i in range(n): for j in range(m): if grid[i][j] == \'X\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1]"},{"question":"In a distant kingdom, there is a magical land where a grand tournament is held once every year. The tournament determines the most powerful magician in the kingdom. Each year, magicians from all over participate in this contest. They showcase their powers using a set of spells they have mastered. Each spell has a power level. The competition rules are as follows: 1. Each magician can perform a sequence of spells. 2. The power level of a spell is a positive integer. 3. A magician is considered more powerful if the sum of the power levels of their spells is higher than the sum of the power levels of the spells of any other magician. Given a list of spells each magician can perform, you need to determine the number of magicians who share the maximum sum of the power levels of their spells. The first line of the input contains a single integer n (1 ≤ n ≤ 500,000), the number of magicians. Following that, there are n lines, each containing a sequence of integers. The first integer in the sequence is m (1 ≤ m ≤ 1,000), which represents the number of spells that the magician knows. The next m integers represent the power levels of the spells. Print a single integer representing the number of magicians whose total power is the highest. For example, given the following input: ``` 3 2 8 10 3 5 5 9 2 15 10 ``` The magicians have the following total power levels: - Magician 1: 8 + 10 = 18 - Magician 2: 5 + 5 + 9 = 19 - Magician 3: 15 + 10 = 25 The output would be `1` as only one magician (Magician 3) has the highest total power level of 25.","solution":"def count_magicians_with_max_power(n, power_lists): Determines the number of magicians with the highest power sum. :param n: Number of magicians :param power_lists: List of lists where each sublist contains power levels of a magician\'s spells :return: Number of magicians with the highest power sum max_power = 0 count_max_power = 0 for power_list in power_lists: current_power_sum = sum(power_list) if current_power_sum > max_power: max_power = current_power_sum count_max_power = 1 elif current_power_sum == max_power: count_max_power += 1 return count_max_power"},{"question":"A telecommunications company is running an analysis to optimize their network. They want to understand how the network will operate under a variety of node and connection configurations. Therefore, they have modeled their network as a graph with weighted edges. The objective is to determine the minimum cost required to provide full connectivity of the network (i.e., all nodes are connected) using a subset of the given edges. The cost to use an edge is represented by its weight. You are tasked to write a program to find the minimum cost to achieve full connectivity of the network. If it\'s impossible to connect all the nodes, you should return -1. The first line of the input contains two integers, n and m (2 ≤ n ≤ 100,000, 1 ≤ m ≤ 200,000), where n is the number of nodes and m is the number of edges. Each of the following m lines consists of three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1,000,000), which indicates that there is an edge connecting nodes u and v with a weight w. It is guaranteed that the input lists each edge at most once and does not list an edge connecting a node to itself. Output a single integer which is the minimum cost to achieve full connectivity. If full connectivity is impossible, output -1. Example Input 1: ``` 4 5 1 2 1 1 3 4 2 3 2 3 4 3 2 4 5 ``` Example Output 1: ``` 6 ``` Example Input 2: ``` 4 2 1 2 3 3 4 4 ``` Example Output 2: ``` -1 ``` Example Explanation: In the first example, the network can be fully connected with a minimum cost of 6 by using the edges: 1-2, 2-3, and 3-4. In the second example, it is impossible to connect all the nodes because node 1 and node 2 are in a different component from node 3 and node 4, thus output is -1.","solution":"def find_minimum_cost_to_connect_nodes(n, m, edges): This function finds the minimum cost to connect all nodes in the network using a subset of given edges. If it is impossible to connect all nodes, it returns -1. # Kruskal\'s algorithm def find(parent, i): if parent[i] != i: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 edges.sort(key=lambda edge: edge[2]) parent = [i for i in range(n + 1)] rank = [0] * (n + 1) min_cost = 0 edges_used = 0 for u, v, w in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) min_cost += w edges_used += 1 if edges_used == n - 1: return min_cost else: return -1"},{"question":"Calculate the sum of squares of unique numbers from a given list. You are provided with a list of integers. Your task is to find the sum of squares of the unique (distinct) numbers in the list. Write a function that takes an input list of integers and returns the sum of squares of the unique numbers in the list. **Function signature:** ```python def sum_of_squares_of_unique_numbers(nums: List[int]) -> int: ``` **Input:** - The input is a single list of integers `nums` with the length of the list ranging from 1 to 1000. Each integer in the list ranges between -1000 and 1000. **Output:** - The output should be a single integer, the sum of squares of the unique numbers. **Examples:** ```python sum_of_squares_of_unique_numbers([1, 2, 3, 2, 1]) # Output: 14 # Explanation: Unique numbers are [1, 2, 3]; 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 sum_of_squares_of_unique_numbers([-1, -1, -1]) # Output: 1 # Explanation: Unique number is [-1]; (-1)^2 = 1 sum_of_squares_of_unique_numbers([2, 2, 2, 3]) # Output: 13 # Explanation: Unique numbers are [2, 3]; 2^2 + 3^2 = 4 + 9 = 13 ```","solution":"from typing import List def sum_of_squares_of_unique_numbers(nums: List[int]) -> int: Calculates the sum of squares of unique numbers from the given list. Parameters: nums (List[int]): List of integers Returns: int: Sum of squares of unique numbers unique_numbers = set(nums) # Using a set to get the unique values return sum(x * x for x in unique_numbers)"},{"question":"Tom and Jerry are solving a puzzle together. The puzzle involves a string consisting of lowercase English letters. They have to transform this string into a palindrome, which reads the same forwards and backwards. To do this, Tom and Jerry can perform the following operation any number of times: choose a character in the string and replace it with any other lowercase English letter. They want to know the minimum number of operations required to transform the given string into a palindrome. The input consists of a single line containing a string s (1 ≤ |s| ≤ 100,000), where |s| is the length of the string. Print a single integer — the minimum number of operations required to transform the given string into a palindrome. For example, if the input string is \\"abca\\", the output will be 1 because changing the \'c\' to \'b\' results in the palindrome \\"abba\\". If the input string is \\"abc\\", the output will be 1 because by changing \'a\' to \'c\' or \'c\' to \'a\', we get \\"cbc\\" or \\"aba\\", both of which are palindromes.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to transform the given string into a palindrome. n = len(s) operations = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: operations += 1 return operations"},{"question":"You are given a string and you need to determine whether the string can be made a palindrome by removing at most one character. A palindrome is a string that reads the same forward and backward. The input consists of multiple test cases, where each test case consists of a single string. Output \\"YES\\" for each test case if the string can be made a palindrome by removing at most one character. Otherwise, output \\"NO\\". The first line contains an integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a string s (1 le text{length of } s le 10^5). It is guaranteed that the sum of the lengths of the strings in all test cases does not exceed 10^6. For each test case, print \\"YES\\" if the string can be made a palindrome by removing at most one character. Otherwise, print \\"NO\\". **Example:** Input: ``` 3 abca racecar abcdef ``` Output: ``` YES YES NO ``` Explanation: 1. \\"abca\\" can be made a palindrome by removing the character \'b\' or \'c\'. 2. \\"racecar\\" is already a palindrome. 3. \\"abcdef\\" cannot be made a palindrome by removing just one character.","solution":"def can_be_palindrome_by_removing_at_most_one_char(s): def is_palindrome_range(s, left, right): return all(s[i] == s[right - i + left] for i in range(left, right)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(s, left+1, right) or is_palindrome_range(s, left, right-1) left, right = left + 1, right - 1 return True def process_test_cases(t, test_cases): results = [] for s in test_cases: if can_be_palindrome_by_removing_at_most_one_char(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are tasked with positioning traffic checkpoints along a long highway to manage traffic flow efficiently and minimize congestion. The highway can be represented as a straight road divided into \'n\' sections, numbered from 1 to n. You need to decide the optimal positions to place \'k\' checkpoints to minimize the maximum distance any vehicle would need to travel to reach the nearest checkpoint. Given \'n\' and \'k\', determine the positions of the \'k\' checkpoints such that the maximum distance from any section of the highway to the nearest checkpoint is minimized. If there are multiple possible arrangements, print any one of them. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100). The next line contains n integers representing the distances of each section of the highway from the start of the highway (1 ≤ distance ≤ 1000). You need to output the optimal positions to place the checkpoints. If it is not possible to place the checkpoints in a way that minimizes the maximum distance, print \\"No optimal positions\\". Input: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100). - The second line contains n integers representing the distances from the start of the highway for each section. Output: - Print k integers representing the positions to place the checkpoints to minimize the maximum distance from any section to a checkpoint. If there are multiple answers, print any. If there are no optimal positions, print \\"No optimal positions\\". Example Input: ``` 10 3 1 3 5 7 9 11 13 15 17 19 ``` Example Output: ``` 1 7 13 ``` Note: - In the example, placing checkpoints at positions 1, 7, and 13 minimizes the maximum distance a vehicle would travel to reach the nearest checkpoint. The maximum distance between any section and the nearest checkpoint is 4. - If n = k, place one checkpoint in each section. - If k = 1, place the checkpoint at the median of the section distances to minimize the maximum distance (or any other logical middle point).","solution":"def place_checkpoints(n, k, distances): Determines the optimal positions to place k checkpoints along a highway to minimize the maximum distance any vehicle would need to travel to reach the nearest checkpoint. Parameters: n (int): The number of sections on the highway k (int): The number of checkpoints to place distances (list): A list of distances of each section from the start of the highway Returns: list: The optimal positions to place the checkpoints distances.sort() if k == 1: # If there is only one checkpoint, place it at the median median = n // 2 return [distances[median]] if n == k: # If the number of checkpoints equals the number of sections, place one in each section return distances checkpoints = [distances[0]] interval = n // k current_position = 0 for i in range(1, k - 1): current_position += interval checkpoints.append(distances[current_position]) checkpoints.append(distances[-1]) return checkpoints"},{"question":"Anna enjoys creating sequences of integers with a special property. She starts with two integers, a and b, and generates a sequence where each number is formed by multiplying the previous number by one of the given integers c1 or c2. The sequence must contain exactly n integers, starting with a and ending with b. Help Anna determine if it\'s possible to create such a sequence and if it is, print the sequence. Note that each number in the sequence (apart from the first) should be either a multiple of c1 or c2 of the preceding number. The first line contains three integers a, b, and n (1 ≤ a, b ≤ 10^6, 2 ≤ n ≤ 100). The second line contains two integers c1 and c2 (1 ≤ c1, c2 ≤ 100). Print \\"NO\\" if there is no sequence that satisfies the conditions. Otherwise, print \\"YES\\" in the first line and then print the sequence in the second line. If there are multiple valid sequences, print any one of them. Example Input: ``` 2 32 4 2 4 ``` Example Output: ``` YES 2 4 8 32 ``` Explanation: Starting from 2, we can multiply by 2 to get 4, then multiply by 2 again to get 8 and by 4 to get 32. Thus we form the sequence [2, 4, 8, 32] of length 4, starting with 2 and ending with 32, which satisfies the conditions.","solution":"def find_sequence(a, b, n, c1, c2): Finds if there exists a sequence of n integers starting with a and ending with b where each number after the first is either a multiple of c1 or c2 of the preceding number. Returns a tuple (exists, sequence). If the sequence exists, exists is True and sequence is the list of integers. Otherwise, exists is False and sequence is an empty list. if n == 1: return (a == b, [a] if a == b else []) from collections import deque queue = deque([(a, [a])]) while queue: current, seq = queue.popleft() if len(seq) == n: if current == b: return (True, seq) continue next1 = current * c1 next2 = current * c2 if next1 <= 10**6: queue.append((next1, seq + [next1])) if next2 <= 10**6: queue.append((next2, seq + [next2])) return (False, []) print(find_sequence(2, 32, 4, 2, 4)) # Example Test def format_output(a, b, n, c1, c2): exists, sequence = find_sequence(a, b, n, c1, c2) if exists: print(\\"YES\\") print(\\" \\".join(map(str, sequence))) else: print(\\"NO\\")"},{"question":"There is a city with n intersections and m bidirectional streets connecting them. Each intersection is uniquely numbered from 1 to n. The mayor of the city wants to determine if the city is well-connected and efficient for emergency response. Specifically, he wants to know if there exists a path between any two intersections using the streets. A city is considered well-connected if for every pair of intersections (u, v), there exists a sequence of streets that allows traveling from u to v. Write a program to determine if the city is well-connected. The first line of input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10,000) — the number of intersections and the number of streets, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) representing a street connecting intersection u and intersection v. Print \\"YES\\" if the city is well-connected, otherwise print \\"NO\\".","solution":"def is_well_connected(n, m, streets): from collections import defaultdict, deque if n == 1: return \\"YES\\" graph = defaultdict(list) for u, v in streets: graph[u].append(v) graph[v].append(u) def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited visited = bfs(1) return \\"YES\\" if len(visited) == n else \\"NO\\""},{"question":"In a fictional medieval town, there is a peculiar superstition among the residents. They believe that any string containing the substring \\"black\\" is cursed. To protect themselves, they try to generate new town names that do not contain the forbidden substring. Your task is to help the town council generate new names that are free from the cursed substring \\"black\\". You will be given several strings, some of which might contain the substring \\"black\\". You need to determine if each name contains the cursed substring or not. If all the given names are free from the cursed substring, print \\"No cursed names\\". If there are any cursed names, you should print the list of those names. Input: The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of names. The next n lines each contain a string composed of lowercase Latin letters. The length of each string does not exceed 100 characters. Output: If there are no names containing the substring \\"black\\", output \\"No cursed names\\". Otherwise, output each cursed name on a new line. Example: Input: 5 blacksmith brightness blackjack heroic blackboard Output: blacksmith blackjack blackboard","solution":"def filter_cursed_names(names): Returns names that contain the substring \\"black\\". If no such name exists, returns \\"No cursed names\\". cursed_names = [name for name in names if \'black\' in name] if cursed_names: return cursed_names else: return [\\"No cursed names\\"]"},{"question":"Sonya found a peculiar old device that outputs binary strings of very long lengths. She and her friends decided to play a game with it. The game involves issuing several commands to the device, and then counting how many of the resulting binary strings match certain patterns. The commands are of the following types: 1. \\"add x\\" - Adds the binary string x to the device\'s memory. 2. \\"remove x\\" - Removes one occurrence of the binary string x from the device\'s memory. (It\'s guaranteed that the string x will always be in the device\'s memory when this command is issued). 3. \\"query p\\" - Outputs the number of binary strings in the device\'s memory that match the pattern p. The pattern p consists of \'0\'s and \'1\'s which should match exactly with any binary string of the same length in the memory. The first line of input contains an integer t (1 ≤ t ≤ 100,000) - the number of commands issued to the device. Each of the next t lines contains one of the commands mentioned above. For each \\"query p\\" command, output the resulting count of binary strings that match the pattern p. # Input The first line contains a single integer t (1 ≤ t ≤ 100,000) - the number of commands. Each of the next t lines contains one of the following commands: - \\"add x\\" where x is a binary string of length up to 30. - \\"remove x\\" where x is a binary string of length up to 30. - \\"query p\\" where p is a binary string of length up to 30. # Output For each \\"query p\\" command, output the number of binary strings in the device\'s memory that match the pattern p. # Example Input: ``` 7 add 101 add 111 add 101 query 101 remove 101 query 101 query 111 ``` Output: ``` 2 1 1 ``` # Constraints - The number of commands will not exceed 100,000. - Strings x and p will be binary strings with lengths up to 30. - It is guaranteed that every \\"remove x\\" command is preceded by enough \\"add x\\" commands to ensure x exists in the memory.","solution":"def binary_string_pattern(commands): from collections import defaultdict memory = defaultdict(int) results = [] for command in commands: parts = command.split() action = parts[0] binary_string = parts[1] if action == \\"add\\": memory[binary_string] += 1 elif action == \\"remove\\": memory[binary_string] -= 1 elif action == \\"query\\": results.append(memory[binary_string]) return results"},{"question":"You have been given an unbalanced binary tree where some nodes may not have two children. You need to serialize and deserialize this binary tree. Serialization is the process of converting a tree to a single string. Deserialization is the process of converting this string back to a binary tree. Implement the `serialize` and `deserialize` functions: - `serialize(root)`: Encodes a tree to a single string. - `deserialize(data)`: Decodes your encoded data to a tree. Example: ``` Input (Binary Tree): 1 / 2 3 / 4 5 serialize(root) -> \\"1,2,null,null,3,4,null,null,5,null,null\\" deserialize(\\"1,2,null,null,3,4,null,null,5,null,null\\") -> returns the binary tree: 1 / 2 3 / 4 5 ``` Note: - The encoded string for the input tree above will be: `1,2,null,null,3,4,null,null,5,null,null`. - The value \'null\' represents a null node. - Your string representation should not contain any leading or trailing spaces. - Your `deserialize` function should be able to construct the exact same BinaryTree from the string representation. You are required to implement the following classes/methods: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class Codec: def serialize(self, root): Encodes a tree to a single string. # Implementation here def deserialize(self, data): Decodes your encoded data to a tree. # Implementation here ``` Constraints: - The number of nodes in the tree is in the range [0, 10^4]. - `0 ≤ Node.val ≤ 1000`","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class Codec: def serialize(self, root): Encodes a tree to a single string. result = [] def helper(node): if not node: result.append(\\"null\\") return result.append(str(node.val)) helper(node.left) helper(node.right) helper(root) return \',\'.join(result) def deserialize(self, data): Decodes your encoded data to a tree. values = data.split(\',\') index = 0 def helper(): nonlocal index if values[index] == \\"null\\": index += 1 return None node = TreeNode(int(values[index])) index += 1 node.left = helper() node.right = helper() return node return helper()"},{"question":"You are given an undirected graph with ( n ) vertices and ( m ) edges. Each edge has a positive weight associated with it. Your task is to find the shortest path from vertex 1 to vertex ( n ) and print the length of this path. If there is no path from vertex 1 to vertex ( n ), print -1. The shortest path in a weighted graph is defined as the path such that the sum of the weights of all edges involved in this path is minimized. Input format: - The first line contains two integers ( n ) and ( m ) (( 2 leq n leq 10^5 ), ( 1 leq m leq 2 cdot 10^5 )) — the number of vertices and the number of edges, respectively. - The next ( m ) lines each contain three integers ( u ), ( v ) and ( w ) (( 1 leq u, v leq n ), ( 1 leq w leq 10^9 )), representing an edge between vertices ( u ) and ( v ) with weight ( w ). The graph doesn\'t have parallel edges and self-loops. Output format: - Print the length of the shortest path from vertex 1 to vertex ( n ). If there is no such path, print -1. Example: Input: ``` 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 ``` Output: ``` 6 ``` In this example, the shortest path from vertex 1 to vertex 5 is 1 -> 2 -> 3 -> 5, and the path length is 6.","solution":"import heapq def dijkstra(n, edges): Finds the shortest path from vertex 1 to vertex n in a weighted undirected graph. Parameters: n (int): The number of vertices in the graph. edges (List[Tuple[int, int, int]]): A list of edges where each edge is represented as a tuple (u, v, w) meaning there is an edge between vertex u and vertex v with weight w. Returns: int: The length of the shortest path from vertex 1 to vertex n, or -1 if no such path exists. # Create adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[1] = 0 priority_queue = [(0, 1)] # (distance, vertex) while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) return dist[n] if dist[n] != float(\'inf\') else -1 # Example usage edges_example = [ (1, 2, 2), (1, 3, 4), (2, 3, 1), (2, 4, 7), (3, 5, 3), (4, 5, 1) ] print(dijkstra(5, edges_example)) # Output: 6"},{"question":"You have been given a sequence of integers and your task is to find the length of the longest subsequence such that it is possible to rearrange the elements of this subsequence to form an arithmetic progression (AP). An arithmetic progression is a sequence of numbers such that the difference between the consecutive terms is constant. For example, the sequence 3, 6, 9, 12 is an arithmetic progression with a common difference of 3. However, the sequence 1, 2, 4, 7, 6 is not an arithmetic progression. The first line of the input contains an integer n (1 ≤ n ≤ 2000) denoting the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10000) — the elements of the sequence. Output the length of the longest subsequence that can be rearranged to form an arithmetic progression. Here are a few examples for better understanding: Input: ``` 6 1 5 3 6 7 2 ``` Output: ``` 4 ``` Explanation: The subsequence [1, 2, 3, 5] could be rearranged to form an arithmetic sequence like this: [1, 3, 5, 7]. Input: ``` 5 10 20 30 40 50 ``` Output: ``` 5 ``` Explanation: The entire sequence is already an arithmetic progression with a common difference of 10.","solution":"def longest_ap_subsequence_length(n, sequence): if n <= 1: return n sequence.sort() dp = {} max_len = 1 for i in range(n): for j in range(i+1, n): diff = sequence[j] - sequence[i] if (i, diff) in dp: dp[(j, diff)] = dp[(i, diff)] + 1 else: dp[(j, diff)] = 2 max_len = max(max_len, dp[(j, diff)]) return max_len"},{"question":"Given a grid of size n x n where some cells are blocked and others are open, write an algorithm to find the number of distinct shortest paths from the top-left corner, (0,0), to the bottom-right corner, (n-1, n-1). You can only move right or down from an open cell to another open cell. A blocked cell is represented by a \'1\' and an open cell by a \'0\'. The start and end cells are always open. If there is no path from (0,0) to (n-1, n-1), return 0. # Input - The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. - For each test case: - The first line contains an integer n (1 ≤ n ≤ 50), the size of the grid. - The next n lines each contain n characters, either \'0\' or \'1\', representing the grid. # Output For each test case, print a single integer: the number of distinct shortest paths from (0,0) to (n-1, n-1). # Example Input ``` 2 3 000 010 000 2 01 00 ``` Output ``` 2 1 ``` # Explanation For the first test case, the 3x3 grid allows for two distinct shortest paths from the top-left to the bottom-right: 1. Right (0,0) -> (0,1), Down (0,1) -> (1,1), Right (1,1) -> (1,2), Down (1,2) -> (2,2) 2. Down (0,0) -> (1,0), Right (1,0) -> (1,1), Down (1,1) -> (2,1), Right (2,1) -> (2,2) For the second test case, the path is straightforward downward and then right. There\'s only one possible shortest path. --- This problem evaluates the understanding of dynamic programming and pathfinding in grid-based environments, crucial in many algorithmic and coding interviews. Make sure to handle edge cases like when there are no possible paths or when the start/goal is blocked.","solution":"def num_shortest_paths(grid_size, grid): n = grid_size if grid[0][0] == \'1\' or grid[n-1][n-1] == \'1\': # no path if start or end is blocked return 0 dp = [[0 for _ in range(n)] for _ in range(n)] dp[0][0] = 1 # Starting point for i in range(n): for j in range(n): if grid[i][j] == \'1\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] # paths from above if j > 0: dp[i][j] += dp[i][j-1] # paths from the left return dp[n-1][n-1] def parse_input(input_string): input_data = input_string.strip().split(\'n\') t = int(input_data[0]) index = 1 results = [] for _ in range(t): n = int(input_data[index]) grid = [input_data[index + i + 1] for i in range(n)] results.append(num_shortest_paths(n, grid)) index += n + 1 return results"},{"question":"You have been tasked with designing an algorithm to help a newly created network of roads that connects several cities within a region. The goal is to ensure the region\'s cities are as connected as possible. This entails checking if there exists a path between any two cities, either directly or indirectly. Your task is to determine if the network of roads will allow someone to travel between any two cities, starting from any city in the region. The network of roads and cities can be represented as an undirected graph, where cities are nodes, and roads are edges. Input Specifications: - The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 1000) — the number of cities (nodes) and the number of roads (edges), respectively. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v) describing a road that connects cities u and v. It is guaranteed that no two roads connect the same pair of cities and no road connects a city with itself. Output Specifications: - Print \\"Connected\\" (without quotes) if there is a path between every pair of cities, i.e., the graph is connected. - Print \\"Disconnected\\" otherwise. Sample Input 1: ``` 6 5 1 2 2 3 3 4 4 5 5 6 ``` Sample Output 1: ``` Connected ``` Sample Input 2: ``` 6 3 1 2 2 3 4 5 ``` Sample Output 2: ``` Disconnected ```","solution":"def is_connected(n, m, edges): from collections import defaultdict, deque if n == 1: return \\"Connected\\" if m == 0: return \\"Disconnected\\" graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: u = queue.popleft() for v in graph[u]: if not visited[v]: visited[v] = True queue.append(v) bfs(1) for i in range(1, n + 1): if not visited[i]: return \\"Disconnected\\" return \\"Connected\\""},{"question":"Alexa is organizing a team-building event and she wants to divide her colleagues into teams. Each team must consist of exactly two members. However, she also wants the skills of the team members to be as complementary as possible. To achieve this, she defines a measure of complementarity between two skill levels a and b as the absolute difference |a - b|. A higher value of this measure indicates more complementary skills. Given a list of integers representing the skill levels of her colleagues, help Alexa to form teams such that the sum of the complementarity of all teams is maximized. It is guaranteed that the number of colleagues n is even. The input consists of two lines. The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of colleagues. The second line contains n space-separated integers representing the skill levels of the colleagues (1 ≤ skill level ≤ 10^5). Print a single integer — the maximum possible sum of the complementarity of the teams. For the first example, the optimal pairing is (1, 4) and (3, 5), which gives a complementarity sum of |1 - 4| + |3 - 5| = 3 + 2 = 5. For the second example, the optimal pairing is (1, 6), (2, 5), and (3, 4), which gives a complementarity sum of |1 - 6| + |2 - 5| + |3 - 4| = 5 + 3 + 1 = 9.","solution":"def max_complementarity_sum(n, skill_levels): Returns the maximum sum of complementarity of the teams. Args: n: int : the number of colleagues (even number) skill_levels: list of int : skill levels of the colleagues Returns: int: maximum sum of complementarity of the teams # Sort the skill levels skill_levels.sort() # Initialize the sum to zero complementarity_sum = 0 # Form pairs in optimal manner to maximize complementarity for i in range(n // 2): complementarity_sum += abs(skill_levels[i] - skill_levels[n - 1 - i]) return complementarity_sum"},{"question":"You are given an integer n, and your task is to generate a sequence of integers such that each element in the sequence is the sum of the two preceding ones, starting from two given integers a and b. However, instead of starting from the first two elements, you are given an arbitrary starting point k in the sequence, and from there you should generate the next n elements of the sequence. Formally, the sequence is defined as follows: Given integers a and b, and an integer k (1 ≤ k ≤ n), the k-th element of the sequence is: ``` sequence[k] = a sequence[k + 1] = b For i > k + 1: sequence[i] = sequence[i - 1] + sequence[i - 2] ``` Your task is to output the next n elements of the sequence starting from the k-th element. Input: - The first line contains three integers n (1 ≤ n ≤ 100000), k (1 ≤ k ≤ n), a, and b. Output: - Print n integers: the sequence starting from the k-th element. Example 1: Input: 10 3 5 7 Output: 5 7 12 19 31 50 81 131 212 343 Example 2: Input: 5 1 1 1 Output: 1 1 2 3 5 Explanation: In the first example, the sequence starts at the 3rd element with 5 and 7, then continues with the sum of the last two elements to generate the next n elements. In the second example, the sequence starts at the 1st element with 1 and 1, then continues with the sum of the last two elements to generate the next n elements.","solution":"def generate_sequence(n, k, a, b): Generate a sequence of n numbers starting from the k-th element with initial values a and b. sequence = [0] * n # Set the k-th and (k+1)-th elements sequence[k - 1] = a if k < n: sequence[k] = b # Generate the rest of the sequence for i in range(k + 1, n): sequence[i] = sequence[i - 1] + sequence[i - 2] return sequence"},{"question":"Consider a grid with `n` rows and `m` columns. Each cell in the grid can either be empty or blocked. Two cells are considered adjacent if they share a side. You are supposed to determine the size of the largest connected component of empty cells in the grid. A connected component is a maximal set of cells such that there is a path between any two cells in the set using only adjacent cells. You are given several queries; each query consists of either blocking a cell or unblocking a cell that was previously blocked. After each query, print the size of the largest connected component of empty cells in the grid. Input: - The first line contains two integers `n` (2 le n le 1000) and `m` (2 le m le 1000) — the number of rows and columns in the grid. - The next line contains an integer `q` (1 le q le 5000) — the number of queries. - Each of the next `q` lines contains a query with three integers `type`, `r`, `c` (1 le r le n, 1 le c le m). `type` is `1` if you need to block the cell at row `r` and column `c`, and `2` if you need to unblock the cell at row `r` and column `c`. Initially, all cells are empty. Output the size of the largest connected component of empty cells after each query. Example: Input: ``` 3 3 5 1 2 2 1 1 1 2 2 2 1 3 3 2 1 1 ``` Output: ``` 8 7 8 7 8 ``` Explanation: - Initially, the entire grid is empty, so the largest connected component is the whole grid (9 cells). - After blocking cell (2, 2), the largest component is 8 cells. - After blocking cell (1, 1), the largest component is 7 cells. - After unblocking cell (2, 2), the largest component is 8 cells again. - After blocking cell (3, 3), the largest component is 7 cells. - After unblocking cell (1, 1), the largest component is 8 cells again.","solution":"def largest_connected_component(n, m, queries): from collections import deque # Directions for adjacent cells directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def in_bounds(r, c): return 0 <= r < n and 0 <= c < m def bfs(start_r, start_c): queue = deque([(start_r, start_c)]) visited[start_r][start_c] = True size = 1 while queue: r, c = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if in_bounds(nr, nc) and not grid[nr][nc] and not visited[nr][nc]: visited[nr][nc] = True queue.append((nr, nc)) size += 1 return size grid = [[False] * m for _ in range(n)] results = [] for query in queries: type, r, c = query r -= 1 c -= 1 if type == 1: grid[r][c] = True # block the cell else: grid[r][c] = False # unblock the cell # Reset visited matrix visited = [[False] * m for _ in range(n)] max_component_size = 0 for i in range(n): for j in range(m): if not grid[i][j] and not visited[i][j]: component_size = bfs(i, j) max_component_size = max(max_component_size, component_size) results.append(max_component_size) return results"},{"question":"Alice loves playing with sequences of integers and discovering interesting patterns in them. Recently, she came across a sequence and became curious about its longest arithmetic subsequence. An arithmetic subsequence is a sequence where the difference between consecutive elements is the same. For example, in the sequence [3, 6, 9, 12], the common difference is 3. Alice wants to determine the length of the longest arithmetic subsequence in a given sequence of integers. Can you help her with this task? You are given a sequence of n integers. Your goal is to find the length of the longest arithmetic subsequence. Input The first line contains an integer n (2 ≤ n ≤ 2000), the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9), the elements of the sequence. Output Print a single integer, the length of the longest arithmetic subsequence in the given sequence. Example Input: 6 3 6 9 12 15 18 Output: 6 Explanation: In this example, the whole sequence is an arithmetic subsequence with a common difference of 3. Therefore, the length of the longest arithmetic subsequence is 6.","solution":"def longest_arith_seq_length(nums): Function to find the length of the longest arithmetic subsequence. Parameters: nums (list): list of integers Returns: int: length of the longest arithmetic subsequence if not nums: return 0 n = len(nums) if n == 1: return 1 # Dictionary to store the length of the longest arithmetic subsequence ending at index i with a given difference dp = {} max_length = 1 for i in range(n): for j in range(i): diff = nums[i] - nums[j] if (j, diff) in dp: dp[(i, diff)] = dp[(j, diff)] + 1 else: dp[(i, diff)] = 2 max_length = max(max_length, dp[(i, diff)]) return max_length"},{"question":"Charlie has been exploring a new city and loves to learn about its history through visiting historical landmarks and trying local transportation. He is intrigued by the city\'s unique tram system. The city\'s tram has its own unique fare system that works as follows: Each tram ride starts at a tram stop, goes through several tram stops, and ends at another tram stop. During the journey, the tram route can be represented as a series of tram stops connected by tracks. Charlie wants to understand how many different routes he can take from his starting tram stop to his destination tram stop. The city\'s tram network is described as a graph where each node represents a tram stop and each edge represents a track between two tram stops. A route is defined as a sequence of connected tram stops starting at one stop and ending at another. Charlie is particularly interested in finding out the number of distinct paths (not necessarily shortest) he can take between two specific stops in the network. Given the number of tram stops (n) and a list of direct connections between them, write a function to calculate the number of distinct paths between two tram stops (S) (source) and (T) (destination). # Input - The first line contains three integers (n), (S), and (T) ((1 leq n leq 10^5), (1 leq S, T leq n)), where (n) is the number of tram stops, and (S) and (T) are the tram stops\' indices for the source and destination respectively. - The second line contains an integer (m) ((0 leq m leq 2 times 10^5)), representing the number of tracks. - Each of the next (m) lines contains two integers (u) and (v) ((1 leq u, v leq n)), indicating a direct track between the tram stop (u) and tram stop (v). # Output - Print a single integer representing the number of distinct paths from tram stop (S) to tram stop (T). # Example Input ``` 5 1 5 5 1 2 2 3 3 4 4 5 2 4 ``` Output ``` 2 ``` In this example, there are two distinct paths from tram stop 1 to tram stop 5: 1. 1 -> 2 -> 3 -> 4 -> 5 2. 1 -> 2 -> 4 -> 5","solution":"from collections import defaultdict, deque def count_distinct_paths(n, S, T, connections): # Building a graph from the connections graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # BFS to find all paths from S to T # We need to count paths not just visit nodes, so we use a queue and keep track of all current paths queue = deque([(S, [S])]) # store (current_node, current_path) count_paths = 0 while queue: current_node, current_path = queue.popleft() if current_node == T: count_paths += 1 continue for neighbor in graph[current_node]: if neighbor not in current_path: # avoid cycles new_path = current_path + [neighbor] queue.append((neighbor, new_path)) return count_paths"},{"question":"The kingdom of ByteLand is under threat from a mighty dragon. The king of ByteLand has issued a decree that every brave knight must take part in slaying the dragon. Each knight has a special ability which gives them a certain amount of power. However, this power can vary based on the combination of knights that go to fight the dragon together. Specifically, if two knights with powers p1 and p2 team up, their combined power is given by the formula: combined_power = max(p1, p2) - min(p1, p2). The king wants to know the maximum power that can be achieved if exactly two knights fight the dragon together. The first line contains an integer n (2 ≤ n ≤ 100,000) – the number of knights. The second line contains n integers, each representing the power of each knight in ByteLand (0 ≤ power ≤ 10^9). Print a single integer – the maximum combined power that can be achieved by exactly two knights. **Example:** Input: ``` 5 2 7 3 8 5 ``` Output: ``` 6 ``` Explanation: The maximum combined power is achieved by knights with powers 2 and 8. Their combined power is max(8, 2) - min(8, 2) = 6.","solution":"def max_combined_power(knights): Returns the maximum combined power achieved by exactly two knights. Parameters: knights (list of int): List of the power of each knight. Returns: int: The maximum combined power. max_power = -1 for i in range(len(knights)): for j in range(i + 1, len(knights)): combined_power = abs(knights[i] - knights[j]) if combined_power > max_power: max_power = combined_power return max_power"},{"question":"Caleb is participating in a city marathon, and he wants to track his progress along the route. The marathon route is marked by various checkpoints, each identified by a unique alphanumeric string. Caleb has a GPS device which records his position at regular intervals throughout the race. However, there are some inaccuracies in the GPS data, and the same checkpoint might appear multiple times in a sequence, even though Caleb hasn\'t actually returned to that checkpoint. To get a clearer picture of his route, Caleb wants to simplify his data by removing consecutive duplicate entries. Write a program that processes the list of checkpoint names recorded by the GPS and outputs a simplified list without consecutive duplicate checkpoint names. The first line of input will contain an integer n (1 ≤ n ≤ 10^5) — the number of checkpoints recorded by the GPS device. The second line will contain n strings where each string is a checkpoint name consisting of only English letters and digits. Each checkpoint name will have a length between 1 and 20 characters. Output the simplified list of checkpoint names, each name on a new line, such that no two consecutive names are the same. For example, for the input: ``` 8 start A B B B C B C D ``` The expected output is: ``` start A B C B C D ``` Note: The consecutive instances of \\"B\\" in the input have been reduced to just one \\"B\\".","solution":"def simplify_checkpoints(n, checkpoints): Simplify the list of checkpoint names by removing consecutive duplicates. Args: n (int): The number of checkpoints. checkpoints (list of str): List of checkpoint names. Returns: list of str: Simplified list of checkpoint names. if n == 0: return [] simplified = [checkpoints[0]] for i in range(1, n): if checkpoints[i] != checkpoints[i - 1]: simplified.append(checkpoints[i]) return simplified"},{"question":"In the kingdom of Numeria, there are n magical crystals placed in a line. Each crystal has a power level denoted by an integer. The king of Numeria wants to harness the power of these crystals by selecting a single contiguous subarray of these crystals that has the maximum possible power level sum. However, these crystals have a peculiar property: if the sum of selected subarray is positive, it doubles its value due to amplification, but if it\'s negative or zero, it remains unchanged. Your task is to find the maximum power level sum that can be achieved by selecting any contiguous subarray and applying the amplification effect accordingly. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of crystals. The second line contains n integers representing the power levels of the crystals (-10^9 ≤ power level ≤ 10^9). Output a single integer — the maximum power level sum that can be achieved after considering the amplification effect. **Example** Input: ``` 5 -1 2 3 -2 5 ``` Output: ``` 16 ``` Explanation: - The optimal subarray to select is [2, 3], which has an initial sum of 5. After amplification, the subarray sum becomes 10. - Another optimal subarray is [2, 3, -2, 5], which has an initial sum of 8. After amplification, the subarray sum becomes 16, which is the maximum possible.","solution":"def max_amplified_power_sum(n, power_levels): Returns the maximum power level sum that can be achieved after considering the amplification effect. Parameters: n (int): Number of crystals. power_levels (list): List of integers representing power levels of crystals. Returns: int: The maximum possible power level sum. def kadane_algorithm(array): # This function finds the maximum subarray sum in the given array using Kadane\'s algorithm max_current = max_global = array[0] for i in range(1, len(array)): max_current = max(array[i], max_current + array[i]) if max_current > max_global: max_global = max_current return max_global max_kadane_sum = kadane_algorithm(power_levels) # Applying the amplification effect if max_kadane_sum > 0: return max_kadane_sum * 2 else: return max_kadane_sum"},{"question":"Alice loves playing a game involving dominoes on a rectangular board with some cells blocked. A domino is a 1x2 or 2x1 block that can be placed either horizontally or vertically. Alice\'s goal is to completely cover the board using non-overlapping dominoes in such a way that dominoes are only placed on non-blocked cells. You are given the board size and the positions of the blocked cells. Determine if it is possible to cover all the non-blocked cells with dominoes. The first line of input contains two integers n and m (1 ≤ n, m ≤ 50), representing the number of rows and columns of the board, respectively. The next line contains an integer k (0 ≤ k ≤ n * m) representing the number of blocked cells. The next k lines each contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m), representing the row and column coordinates of a blocked cell. Output \\"YES\\" (without the quotes) if the board can be completely covered by dominoes, otherwise print \\"NO\\" (without the quotes). Example: Input: 4 4 2 2 2 3 3 Output: YES Explanation: One possible way to cover the board with dominoes: ``` .__.. ..__. .__.. ```","solution":"def can_cover_with_dominoes(n, m, k, blocked_cells): Determine if it\'s possible to cover all non-blocked cells with dominoes on an n by m board. :param n: int, number of rows of the board :param m: int, number of columns of the board :param k: int, number of blocked cells :param blocked_cells: list of tuples, each tuple contains coordinates of a blocked cell (x, y) :return: str, \\"YES\\" if it is possible to cover all non-blocked cells with dominoes, otherwise \\"NO\\" total_cells = n * m total_nonblocked_cells = total_cells - k if total_nonblocked_cells % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Deniz has a very attractive collection of stones. Each stone has an integer weight. He wants to partition his collection into two groups such that the absolute difference between the total weights of the groups is minimized. Since Deniz has collected a lot of stones over time, he finds it difficult to manually find the optimal partitioning. Help Deniz by writing a program that computes the minimum possible absolute difference between the sums of weights of two groups. Input Format: - The first line contains an integer n (1 leq n leq 2000), the number of stones. - The second line contains n positive integers w[i] (1 leq w[i] leq 10^5), representing the weights of the stones. Output Format: - Output a single integer, the minimum possible absolute difference between the sums of weights of the two groups. Example: Input: ``` 4 1 6 11 5 ``` Output: ``` 1 ``` Explanation: - The possible partitioning could be: - Group 1: {1, 6, 5}, Group 2: {11} - The sums of the two groups are 12 and 11, and their absolute difference is 1. - This is the minimum difference Deniz can achieve.","solution":"def minimum_difference(n, weights): total_sum = sum(weights) dp = [False] * (total_sum // 2 + 1) dp[0] = True for weight in weights: for j in range(total_sum // 2, weight - 1, -1): dp[j] |= dp[j - weight] for i in range(total_sum // 2, -1, -1): if dp[i]: return total_sum - 2 * i return total_sum if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) weights = list(map(int, data[1:])) print(minimum_difference(n, weights))"},{"question":"Given an integer n, find the longest subsequence of strictly increasing integers such that the sum of the subsequence is equal to n. If there is no such subsequence, return an empty array. A subsequence is derived from an array by deleting some or none of the elements without changing the order of the remaining elements. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 10^9). For each test case, print the longest subsequence. If such a subsequence does not exist, print an empty array. Example: Input: 3 6 15 20 Output: [1, 2, 3] [1, 2, 3, 4, 5] [1, 2, 3, 4, 10] Explanation: For the first test case, the longest subsequence whose sum equals 6 is [1, 2, 3]. For the second test case, the longest subsequence whose sum equals 15 is [1, 2, 3, 4, 5]. For the third test case, the longest subsequence whose sum equals 20 is [1, 2, 3, 4, 10].","solution":"def longest_increasing_subsequence_sum(n): Finds the longest subsequence of strictly increasing integers such that the sum of the subsequence equals n. If there is no such subsequence, returns an empty array. result = [] current_sum = 0 i = 1 while current_sum + i <= n: current_sum += i result.append(i) i += 1 if current_sum == n: return result else: # Modify the last element to match the sum exactly to n last_element = result.pop() remaining_sum = n - sum(result) result.append(remaining_sum) return result if sum(result) == n else [] def process_test_cases(t, test_cases): results = [] for n in test_cases: results.append(longest_increasing_subsequence_sum(n)) return results"},{"question":"You are given a list of integers and you need to find the length of the longest subarray (continuous subsequence) such that the difference between the maximum and minimum numbers in that subarray is at most a given value, d. For example, if the list is [1, 3, 2, 5, 4, 8, 7, 6] and d = 2, some possible valid subarrays include [1, 3, 2] and [5, 4, 6]. The length of the longest subarray is 3 in this example. The first line contains an integer t (1 le t le 50) – the number of test cases you need to solve. The first line of each test case contains two integers n and d (1 le n le 1000, 1 le d le 10^9) – the number of elements in the array and the maximum allowed difference in the subarray. The second line of each test case contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) – the elements of the array a. For each test case, print a single integer – the length of the longest subarray satisfying the condition. Sample input: 2 8 2 1 3 2 5 4 8 7 6 5 3 10 1 2 7 5 Sample output: 3 2","solution":"def longest_subarray_with_diff(arr, n, d): max_length = 0 for i in range(n): min_val = arr[i] max_val = arr[i] for j in range(i, n): min_val = min(min_val, arr[j]) max_val = max(max_val, arr[j]) if max_val - min_val <= d: max_length = max(max_length, j - i + 1) else: break return max_length def solve(test_cases): results = [] for case in test_cases: n, d, arr = case results.append(longest_subarray_with_diff(arr, n, d)) return results # Example usage test_cases = [ (8, 2, [1, 3, 2, 5, 4, 8, 7, 6]), (5, 3, [10, 1, 2, 7, 5]) ] print(solve(test_cases)) # Output: [3, 2]"},{"question":"Alice and Bob are playing a game where they take turns removing candies from piles. There are n piles of candies arranged in a row and each pile contains between 1 and 1000 candies. Alice always takes her turn first, and they take turns alternately after that. During each turn, a player must select a pile that has at least one candy remaining and take any positive number of candies from it. However, the total number of candies taken on each player\'s turn must be such that the sum of all candies taken by that player throughout the entire game does not exceed a specified limit. The player who cannot make a move loses the game. Alice will try to maximize her chances of winning while Bob will try to minimize Alice\'s chances of winning. Can Alice force a win if both players play optimally? Write a program that determines if Alice can force a win. If she can, output \\"YES\\", otherwise output \\"NO\\". # Input - The first line contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 10000) — the number of piles and the number of candies Alice can take overall. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the number of candies in each pile. # Output - Print \\"YES\\" if Alice can force a win, otherwise print \\"NO\\". # Examples Example 1 Input ``` 3 6 2 4 3 ``` Output ``` YES ``` Example 2 Input ``` 3 5 1 2 3 ``` Output ``` NO ``` # Note In the first example, Alice can take all candies from the first and second piles, using up her limit of 6 candies, leaving only 3 candies for Bob who, in the next turn, cannot take all candies without exceeding his limit, ensuring Alice wins. In the second example, since Alice and Bob must take turns and Alice\'s limit of 5 candies is not enough to guarantee she can take all candies before Bob can react, Alice cannot force a win.","solution":"def can_alice_force_win(n, k, piles): Determines if Alice can force a win given the constraints. Parameters: - n (int): Number of piles - k (int): Maximum candies Alice can take overall - piles (list): List of integers representing the candies in each pile Returns: - str: \\"YES\\" if Alice can force a win, \\"NO\\" otherwise total_candies = sum(piles) # If the total candies are less than or equal to Alice\'s maximum limit, she wins. if total_candies <= k: return \\"YES\\" # If there are more candies than Alice\'s limit but the sum of candies is odd, Alice can force a win # by playing optimally. This problem can be reduced to a nim-sum problem. if total_candies % 2 != 0: return \\"YES\\" return \\"NO\\""},{"question":"A busy freight company operates several freight trains to deliver cargo across different cities. Each train journey is characterized by a unique path through the network of cities. The company maintains a list of all the train journeys planned for the week. Each journey consists of a series of stops, with each stop represented by a city ID. For operational reasons, some journeys might be identical, i.e., they follow the same path through the same sequence of cities, while others might differ only partially or be completely different. The company needs a way to identify all unique journeys. Two journeys are considered identical if they have the same list of stops in the same order. Given the number of journeys and the stops for each journey, determine the number of unique journeys. # Input - The first line contains an integer `n` (1 leq n leq 1000) — the number of journeys. - The next `n` lines describe the journeys. Each journey is described by multiple integers: - The first integer is `m` (1 leq m leq 100) — the number of stops in the journey. - The next `m` integers represent the city IDs of the stops (1 leq text{city_id} leq 10^9). # Output - Print a single integer — the number of unique journeys. # Example Input ``` 5 3 1 2 3 3 2 3 4 3 1 2 3 2 5 6 3 2 3 4 ``` Output ``` 3 ``` In the example above, there are 5 journeys described, but there are only 3 unique journeys: 1. Journey 1 and Journey 3 are the same: [1, 2, 3] 2. Journey 2 and Journey 5 are the same: [2, 3, 4] 3. Journey 4: [5, 6]","solution":"def count_unique_journeys(n, journeys): Returns the number of unique journeys from a list of journeys. n: int - number of journeys journeys: List of Lists - each sub-list contains the stops of a journey. The first element of each sub-list is the number of stops. Returns an integer representing the number of unique journeys. journey_sets = set() for journey in journeys: stops = journey[1:] # Ignore the first element which is the number of stops journey_sets.add(tuple(stops)) return len(journey_sets) # Example usage: #print(count_unique_journeys(5, [[3, 1, 2, 3], [3, 2, 3, 4], [3, 1, 2, 3], [2, 5, 6], [3, 2, 3, 4]])) # Output = 3"},{"question":"You are given a string of mixed characters consisting of digits (0-9) and lowercase English letters. Your goal is to find the longest contiguous substring of unique characters within the given string. For example, in the string \\"abcabcbb\\", the longest substring without repeating characters is \\"abc\\", which has a length of 3. Similarly, in the string \\"pwwkew\\", the longest substring without repeating characters is \\"wke\\", with a length of 3 as well. # Input - The input consists of a single line containing a string `s` of length `n` (1 ≤ `n` ≤ 10^5) composed of digits and lowercase English letters. # Output - Print a single integer that represents the length of the longest contiguous substring of unique characters in the given string. # Examples Example 1 **Input** ``` abcabcbb ``` **Output** ``` 3 ``` Example 2 **Input** ``` bbbbb ``` **Output** ``` 1 ``` Example 3 **Input** ``` pwwkew ``` **Output** ``` 3 ``` # Note In the first example, the longest substring without repeating characters is \\"abc\\". In the second example, since all characters are the same, the longest substring without repeating characters is \\"b\\" with a length of 1. In the third example, the longest substring can be either \\"wke\\" or \\"kew\\", both with a length of 3.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. last_seen = {} start = max_length = 0 for i, char in enumerate(s): if char in last_seen and last_seen[char] >= start: start = last_seen[char] + 1 last_seen[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Farmer Bob has a rectangular field represented as a grid of size n x m. Each cell in the grid can either be fertile land (represented by 1) or infertile land (represented by 0). Farmer Bob wants to grow his crops in a single rectangular subgrid within his field. However, he will only plant crops in subgrids where all cells are fertile land. Given the 2D grid description of Farmer Bob\'s field, determine the area of the largest rectangular subgrid composed entirely of fertile land. For example: If Farmer Bob\'s field is represented by: ``` 1 0 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 1 0 1 ``` The largest rectangular subgrid with all fertile cells is: ``` 1 1 1 1 1 1 ``` and its area is 6. **Input:** - The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. - The next n lines contain m integers each (either 0 or 1), representing the 2D grid of the field. **Output:** - Output a single integer representing the area of the largest rectangular subgrid composed entirely of fertile land. **Example:** ``` Input: 4 5 1 0 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 1 0 1 Output: 6 ```","solution":"def max_rectangle_area(grid): if not grid: return 0 n = len(grid) m = len(grid[0]) max_area = 0 heights = [0] * m for row in grid: for j in range(m): if row[j] == 0: heights[j] = 0 else: heights[j] += 1 max_area = max(max_area, largest_rectangle_area_histogram(heights)) return max_area def largest_rectangle_area_histogram(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given an array of integers and a sliding window of size k. The task is to find the maximum sum of any contiguous subarray of size k. First line of input contains two integers n and k (1 ≤ k ≤ n ≤ 10^6), the size of the array and the size of the sliding window. Second line contains n integers, the elements of the array (-10^5 ≤ array[i] ≤ 10^5). Print one integer, the maximum sum of any contiguous subarray of size k. Example: Input: 8 3 2 1 5 1 3 2 -2 4 Output: 9 Explanation: The subarrays of size 3 are: [2, 1, 5], [1, 5, 1], [5, 1, 3], [1, 3, 2], [3, 2, -2], [2, -2, 4]. Their sums are: 8, 7, 9, 6, 3, 4. The maximum sum is 9, from the subarray [5, 1, 3].","solution":"def max_sum_of_subarray(arr, k): Finds the maximum sum of any contiguous subarray of size k. Parameters: arr (list of int): The array of integers k (int): The size of the sliding window Returns: int: The maximum sum of any contiguous subarray of size k if not arr or k <= 0 or k > len(arr): raise ValueError(\\"Invalid input\\") max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i-k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given an n x m grid where each cell is either land or water, represented respectively by the characters \'L\' and \'W\', a land mass is formed by connecting adjacent lands horizontally or vertically. A player can change any land cell to water in order to minimize the number of distinct land masses. Your task is to determine after changing a single land cell to water, what is the minimum number of distinct land masses that can be achieved. The first line contains two integers, n and m (1 ≤ n, m ≤ 50) — the number of rows and columns in the grid. The next n lines contain m characters each, representing the grid. Output a single integer — the minimum number of distinct land masses that can be achieved. Example: Input: 3 3 LWL LLL WLW Output: 1","solution":"def find_land_masses(grid, n, m): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] != \'L\': return grid[x][y] = \'V\' # Mark as visited for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: dfs(x + dx, y + dy) land_masses = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': dfs(i, j) land_masses += 1 return land_masses def min_land_masses_after_change(n, m, grid): current_land_masses = find_land_masses([row[:] for row in grid], n, m) min_land_masses = current_land_masses for i in range(n): for j in range(m): if grid[i][j] == \'L\': # Try changing this land to water new_grid = [row[:] for row in grid] new_grid[i][j] = \'W\' land_masses_after_change = find_land_masses(new_grid, n, m) min_land_masses = min(min_land_masses, land_masses_after_change) return min_land_masses # Taking input for the function (for example purposes, not part of the functional solution) def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) m = int(data[1]) grid = [list(data[i + 2]) for i in range(n)] result = min_land_masses_after_change(n, m, grid) print(result)"},{"question":"You are given a set of n integers. Your task is to partition this set into k non-empty subsets such that the sum of differences between the maximum and minimum elements in each subset is minimized. The first line of the input contains two integers n and k (1 ≤ n ≤ 200,000, 1 ≤ k ≤ min(50, n)) — the number of integers and the number of subsets, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100,000). Print one real number — the minimum possible sum of differences between the maximum and minimum elements in each subset if the integers are partitioned optimally. Your answer will be considered correct if its absolute or relative error does not exceed 10^(-4). In the first sample, it is optimal to split 4 integers into 2 subsets. For example, one possible split can be [1, 2] and [3, 4]. In the second sample, it\'s optimal to split 6 integers into 3 subsets. For example, one possible split can be [1, 2], [3, 3], and [6, 6].","solution":"def minimize_sum_of_differences(n, k, numbers): Partition the set of integers into k non-empty subsets such that the sum of differences between the max and min elements in each subset is minimized. numbers.sort() # Calculate initial total difference of being in one set total_diff = numbers[-1] - numbers[0] differences = [numbers[i] - numbers[i - 1] for i in range(1, n)] # Sort the differences in descending order differences.sort(reverse=True) # Subtract the k-1 largest differences to form k subsets min_diff_sum = total_diff - sum(differences[:k - 1]) return min_diff_sum"},{"question":"Bob the builder needs to construct a series of new roads to connect all the villages in the town of Slumberville. The town has n villages and r already existing bidirectional roads. Bob wants to ensure that after his new roads are built, there is a way to travel between any two villages. Since building roads is expensive, he wants to accomplish this task with the minimum possible number of new roads. The first line of input contains two integers n and r — the number of villages and the number of existing roads (1 <= n <= 1000, 0 <= r <= 10000). Next, r lines follow with two integers u and v (1 <= u, v <= n), which means there is a road between village u and village v. Output a single integer — the minimum number of new roads needed to ensure all villages are connected. In the first sample input, the villages and roads form a disconnected graph. Therefore, the minimum number of new roads needed is `1`. In the second sample input, all villages are already connected directly or indirectly. Therefore, no new roads are needed, and the answer is `0`.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def minimum_new_roads(n, roads): parent = list(range(n + 1)) rank = [0] * (n + 1) for u, v in roads: union(parent, rank, u, v) unique_components = set(find(parent, i) for i in range(1, n + 1)) return len(unique_components) - 1"},{"question":"You are given an integer array `nums` and an integer `target`. Your task is to find the indices of the two numbers such that they add up to the `target`. Each input will have exactly one solution, and you must not use the same element twice. You can return the answer in any order. Write a function `two_sum(nums, target)` that returns a list with the two indices of the numbers that add up to `target`. # Input - The first line contains an integer `n` (2 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains `n` integers representing the elements of the array (`nums[i]` for 0 ≤ i < n, |nums[i]| ≤ 10^9). - The third line contains the integer `target`. # Output - Print the two indices of the numbers that add up to `target` in a single line. If there are multiple solutions, print any of them. # Example Input ``` 4 2 7 11 15 9 ``` Output ``` 0 1 ``` Input ``` 3 3 2 4 6 ``` Output ``` 1 2 ``` # Note In the first example, the numbers at indices 0 and 1 sum up to 9 (2 + 7 = 9). In the second example, the numbers at indices 1 and 2 sum up to 6 (2 + 4 = 6).","solution":"def two_sum(nums, target): Finds two indices in the list `nums` such that the numbers at those indices add up to `target`. Args: nums (list of int): The list of integers. target (int): The target sum. Returns: list of int: Indices of the two numbers that add up to `target`. lookup = {} for i, num in enumerate(nums): complement = target - num if complement in lookup: return [lookup[complement], i] lookup[num] = i"},{"question":"You are given a list of words. You need to group anagrams together. An anagram is a word formed by rearranging the letters of another word, using all the original letters exactly once. Write a function that takes a list of words as input and returns a list of lists, where each sublist contains group of anagram words. The sublists should be sorted based on the first word in each sublist, and within each sublist, the words should be sorted lexicographically. The first line of input contains a single integer n (1 ≤ n ≤ 10000), the number of words. Each of the next n lines contains a word. Each word consists of only lowercase English letters and has a length between 1 and 100, inclusive. Print the resulting list of lists, with each sublist being a line with its words separated by single spaces. **Example:** Input: ``` 6 eat tea tan ate nat bat ``` Output: ``` ate eat tea bat nat tan ```","solution":"from collections import defaultdict def group_anagrams(words): Takes a list of words and groups anagrams together. Args: words (list of str): List containing words. Returns: list of lists: Grouped anagrams with each sublist sorted lexicographically and overall list sorted by the first word\'s appearance. anagram_dict = defaultdict(list) for word in words: # Sort the characters of the word and use it as a key sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) # Sort the anagrams in each list lexicographically for key in anagram_dict: anagram_dict[key].sort() # Convert the dictionary values to a list and sort by the first word in each sublist grouped_anagrams = sorted(anagram_dict.values(), key=lambda x: x[0]) return grouped_anagrams"},{"question":"You are given an array of distinct integers. Your task is to find the length of the longest subsequence that is strictly increasing. A sequence of numbers is strictly increasing if every number is greater than the one before it. # Input: The first line contains an integer n (1 leq n leq 1000) – the length of the array. The second line contains n distinct integers separated by spaces. Each integer will be between 1 and 10^6. # Output: Output a single integer – the length of the longest strictly increasing subsequence. # Example: Input: ``` 7 10 20 10 30 40 50 60 ``` Output: ``` 6 ``` In this example, the longest strictly increasing subsequence is {10, 20, 30, 40, 50, 60}, which has a length of 6.","solution":"def length_of_lis(arr): Returns the length of the longest strictly increasing subsequence. :param arr: List of distinct integers. :return: Integer length of the longest strictly increasing subsequence. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize LIS values for all indexes as 1 # Compute optimized LIS values in a bottom-up manner for i in range (1 , n): for j in range(0 , i): if arr[i] > arr[j] and lis[i] < lis[j] + 1 : lis[i] = lis[j] + 1 # Return the maximum value in lis return max(lis)"},{"question":"Jessie built a new gadget that can only work with certain types of binary strings. She defined a special binary string as a string of 0s and 1s where no two adjacent bits are the same. That is, the string should not contain \\"00\\" or \\"11\\" as a substring. Now she wants to count how many special binary strings of length `n` can be formed. Input The input consists of a single integer `n` (1 ≤ n ≤ 10^6) – the length of the binary string. Output Output the number of special binary strings of length `n` modulo 10^9 + 7. Example Input 3 Output 4 Explanation: For n = 3, the valid strings are: - 101 - 010 - 101 - 010 Thus, there are 2 + 2 = 4 valid strings. Note: If n=1, the valid strings are \\"0\\" and \\"1\\", so the output should be 2. **Hint**: Use dynamic programming to build the solution.","solution":"def count_special_binary_strings(n): MOD = 10**9 + 7 if n == 1: return 2 dp = [0] * (n + 1) dp[1] = 2 # \'0\' and \'1\' dp[2] = 2 # \'01\' and \'10\' for i in range(3, n+1): dp[i] = (dp[i-1] + dp[i-2]) % MOD return dp[n]"},{"question":"Ryuk wants to buy a new laptop and has listed the specifications of N available laptops in the market. Each laptop has a unique identification number and comes with three specifications: processor speed (in GHz), RAM size (in GB), and price (in dollars). He has a budget constraint, and he wants to determine which laptop offers the best performance before making a purchase. For simplicity, the performance of a laptop can be calculated as the product of its processor speed and RAM size. Ryuk will only consider laptops that fall within his budget. Write a program to help Ryuk find the laptop with the best performance value within his budget. If multiple laptops have the same performance value, choose the one with the lower price. If multiple laptops have the same performance and price, choose the one with the smallest identification number. If no laptops are within the budget, print \\"No suitable laptop\\". The first line of the input contains two integers, N (1 ≤ N ≤ 1000) — the number of laptops, and B (1 ≤ B ≤ 10^6) — Ryuk\'s budget. The next N lines each contain five values: an integer id (1 ≤ id ≤ 1000) — the identification number of the laptop, a floating-point number P (0.1 ≤ P ≤ 10) — the processor speed of the laptop in GHz, an integer R (1 ≤ R ≤ 64) — the RAM size in GB, and an integer C (1 ≤ C ≤ 10^6) — the price of the laptop. Output a single line containing the identification number of the laptop with the best performance that falls within the budget. If no suitable laptop exists, print \\"No suitable laptop\\". Example: ``` Input: 5 1000 1 3.5 16 1200 2 4.0 8 800 3 3.2 32 950 4 4.0 16 1300 5 3.6 16 1000 Output: 5 ``` In this example, the laptop with id 5 has the highest performance value (3.6 * 16 = 57.6) within the budget of 1000 dollars.","solution":"def find_best_laptop(n, b, laptops): This function finds the laptop with the best performance value within a given budget. Args: n : int : Number of laptops b : int : Budget laptops : list of tuples : List where each tuple contains laptop id, processor speed, RAM size, and price Returns: int : The ID of the laptop with the best performance within budget or \\"No suitable laptop\\" best_id = -1 best_performance = -1 best_price = float(\'inf\') for laptop in laptops: laptop_id, processor_speed, ram_size, price = laptop if price <= b: performance = processor_speed * ram_size if (performance > best_performance or (performance == best_performance and price < best_price) or (performance == best_performance and price == best_price and laptop_id < best_id)): best_id = laptop_id best_performance = performance best_price = price if best_id == -1: return \\"No suitable laptop\\" else: return best_id"},{"question":"Given two strings, check whether they are anagrams of each other. An anagram of a string is another string with the same characters, but possibly in a different order. The first line of input contains a string s1 with length between 1 and 100 characters. Each character of the string has an ASCII code between 33 (exclamation mark) and 126 (tilde), inclusive. The second line of input contains a string s2 with length between 1 and 100 characters. Each character of the string has an ASCII code between 33 (exclamation mark) and 126 (tilde), inclusive. Output \\"Yes\\" (without quotes) if s1 and s2 are anagrams, and \\"No\\" otherwise. You can print each letter in any case (upper or lower). For example: Input: listen silent Output: Yes Input: hello world Output: No","solution":"def are_anagrams(s1, s2): Check whether two strings are anagrams of each other. :param s1: First input string. :param s2: Second input string. :return: \\"Yes\\" if s1 and s2 are anagrams, \\"No\\" otherwise. # If lengths are different, they cannot be anagrams if len(s1) != len(s2): return \\"No\\" # Sort both strings and compare if sorted(s1) == sorted(s2): return \\"Yes\\" else: return \\"No\\""},{"question":"You are given an array of integers representing a sequence of daily temperatures. Given two integers, `days` and `t`, your task is to find the maximum length of a contiguous subarray (i.e., segment) of `days` elements such that the difference between the maximum and minimum temperatures in this subarray is at most `t`. If no such subarray exists, return 0. The first line contains two integers `n` (1 ≤ n ≤ 100,000) and `t` (0 ≤ t ≤ 10^6) — the number of days and the maximum allowed temperature difference. The second line contains `n` integers `temps_1`, `temps_2`, ..., `temps_n` (1 ≤ temps_i ≤ 10^6) — the temperatures on each of the `n` days. Output a single integer representing the maximum length of a contiguous subarray where the difference between the maximum and minimum temperatures does not exceed `t`. # Example Input ``` 10 4 1 3 5 7 6 9 10 4 3 2 ``` Output ``` 4 ``` Explanation The maximum length of a contiguous subarray where the difference between the maximum and minimum temperatures is at most 4 is 4 (subarray [3, 5, 7, 6] or [6, 9, 10, 4]). # Note * Consider utilizing efficient data structures such as deques to maintain the window of temperatures and quickly compute the min and max within the current window.","solution":"from collections import deque def max_contiguous_subarray_length(temps, t): Find the maximum length of a contiguous subarray with the maximum difference between temperatures at most t. :param temps: List of integers representing temperatures of each day. :param t: Integer representing the maximum allowed temperature difference. :return: Integer representing the maximum length of such contiguous subarray. n = len(temps) if n == 0: return 0 min_deque = deque() # Stores indices of potential minimums max_deque = deque() # Stores indices of potential maximums left = 0 max_len = 0 for right in range(n): # Maintain min_deque while min_deque and temps[min_deque[-1]] >= temps[right]: min_deque.pop() min_deque.append(right) # Maintain max_deque while max_deque and temps[max_deque[-1]] <= temps[right]: max_deque.pop() max_deque.append(right) # Ensure the current window is valid while temps[max_deque[0]] - temps[min_deque[0]] > t: left += 1 if min_deque[0] < left: min_deque.popleft() if max_deque[0] < left: max_deque.popleft() max_len = max(max_len, right - left + 1) return max_len"},{"question":"Petya loves numbers and came up with an interesting problem for you. He has three integers a, b, and k. He defines the power sequence generated from these integers as follows: 1. Start with x = a. 2. Perform b transformations, each of which is calculated as follows: For the i-th transformation (1 ≤ i ≤ b): - If i is odd, set x = x * 2. - If i is even, set x = x + k. Petya wonders what will be the value of x after exactly b transformations. Can you help him compute this value? The first line contains three integers a (1 ≤ a ≤ 10^9), b (0 ≤ b ≤ 10^9), and k (1 ≤ k ≤ 10^9). Print a single integer — the value of x after b transformations. In the first example, Petya starts with a = 3, performs b = 5 transformations, and k = 7. The sequence of transformations will be as follows: 1. x = 3 * 2 = 6 (odd transformation) 2. x = 6 + 7 = 13 (even transformation) 3. x = 13 * 2 = 26 (odd transformation) 4. x = 26 + 7 = 33 (even transformation) 5. x = 33 * 2 = 66 (odd transformation) After these transformations, the result is 66. In the second example, Petya starts with a = 1, performs b = 4 transformations, and k = 10. The sequence of transformations will be as follows: 1. x = 1 * 2 = 2 (odd transformation) 2. x = 2 + 10 = 12 (even transformation) 3. x = 12 * 2 = 24 (odd transformation) 4. x = 24 + 10 = 34 (even transformation) After these transformations, the result is 34.","solution":"def power_sequence(a, b, k): Computes the value of x after b transformations on a using the rules described. Args: a (int): Initial value of x. b (int): Number of transformations. k (int): Value to be added when transformation index is even. Returns: int: The value of x after b transformations. x = a for i in range(1, b + 1): if i % 2 == 1: # odd transformation x *= 2 else: # even transformation x += k return x"},{"question":"You are given a list of integers representing the heights of buildings in a skyline, viewed from left to right. The goal is to calculate how much rainwater would be trapped between the buildings after a rainstorm. Each building is represented by a positive integer which is its height. Assume that the width of each building is 1 unit. # Input - The first line contains an integer n (1 leq n leq 10^5) representing the number of buildings. - The second line contains n integers (0 leq height leq 10^4) representing the heights of the buildings. # Output - Output a single integer representing the total units of rainwater trapped between the buildings. # Example Input ``` 6 0 1 0 2 1 0 1 3 2 1 2 1 ``` Output ``` 6 ``` # Explanation In the example, a total of 6 units of water are trapped between buildings.","solution":"def trap_rain_water(heights): Calculate the amount of trapped rainwater given the heights of buildings. :param heights: List[int] representing the heights of buildings. :return: int representing the total units of trapped rainwater. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"You are given a network of computers, where each computer is represented by a node, and there are bidirectional cables connecting these nodes. Each cable has a latency value associated with it. Your task is to find the shortest time required to send information from a given source computer to a given destination computer using these cables. The first line contains three integers n, m, and s (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ s ≤ n) — the number of computers, the number of cables, and the source computer\'s identifier. Each of the next m lines contains three integers u, v, and l (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ l ≤ 1000) — there is a cable between computers u and v with a latency of l seconds. Output the shortest time in seconds to send the information from the source computer s to every other computer. If a computer is not reachable from the source, output \\"INF\\" for that computer. Example: Input: 4 4 1 1 2 4 1 3 2 2 3 5 3 4 1 Output: 0 4 2 3 Explanation: The shortest time to send information from computer 1 to computer 1 is 0 seconds. The shortest time to send information from computer 1 to computer 2 is 4 seconds. The shortest time to send information from computer 1 to computer 3 is 2 seconds. The shortest time to send information from computer 1 to computer 4 is 3 seconds.","solution":"import heapq def shortest_times(n, m, s, edges): Finds the shortest time to send information from source computer \'s\' to every other computer. Parameters: n (int): Number of computers (nodes) m (int): Number of cables (edges) s (int): Source computer identifier edges (list of tuple): List of edges represented as (u, v, l), where u and v are computers and l is the latency. Returns: list: Shortest times to send information from source to every other computer. If a computer is not reachable, its time will be \\"INF\\". graph = {i: [] for i in range(1, n + 1)} for u, v, l in edges: graph[u].append((v, l)) graph[v].append((u, l)) # Dijkstra\'s Algorithm pq = [(0, s)] # Priority queue to store (latency, node) times = {i: float(\'inf\') for i in range(1, n + 1)} times[s] = 0 while pq: current_time, current_node = heapq.heappop(pq) if current_time > times[current_node]: continue for neighbor, latency in graph[current_node]: time = current_time + latency if time < times[neighbor]: times[neighbor] = time heapq.heappush(pq, (time, neighbor)) result = [] for i in range(1, n + 1): if times[i] == float(\'inf\'): result.append(\\"INF\\") else: result.append(times[i]) return result"},{"question":"A large company wants to implement a system to help its employees manage project tasks more effectively. Each task has a unique integer identifier and belongs to a specific project. Each project can contain multiple tasks, and each task can have dependencies on other tasks within the same project. Write a program that determines the order in which the tasks in a given project should be completed. If there are any circular dependencies that would prevent the tasks from being completed, the program should detect this and indicate that it\'s not possible to complete all the tasks. The input starts with a single integer t (1 le t le 100) representing the number of projects. For each project, the input consists of the following: - A line containing two integers n and m (1 le n le 1000, 0 le m le 5000), where n is the number of tasks and m is the number of dependencies. - m lines, each containing two integers u and v (1 le u, v le n), indicating that task u must be completed before task v. Output the results for each project. If it\'s possible to complete all the tasks in a project, output a single line with the integers representing the task identifiers in the order they should be completed. If it\'s not possible to complete all the tasks for a project, output \\"IMPOSSIBLE\\" for that project. The order of the tasks must follow the dependencies, ensuring that for any dependency u rightarrow v, u appears before v in the output. Example: Input: ``` 2 3 2 1 2 2 3 4 4 1 2 2 3 3 4 4 2 ``` Output: ``` 1 2 3 IMPOSSIBLE ``` Explanation: The first project has three tasks with dependencies 1 -> 2 and 2 -> 3. The tasks can be completed in the order 1, 2, 3. The second project has four tasks with dependencies that introduce a circular dependency: 1 -> 2, 2 -> 3, 3 -> 4, and 4 -> 2. Hence, it\'s impossible to complete all the tasks.","solution":"from collections import defaultdict, deque def find_order_of_tasks(t, projects): def topological_sort(n, adjacency_list): indegree = {i: 0 for i in range(1, n+1)} for task in adjacency_list: for neighbor in adjacency_list[task]: indegree[neighbor] += 1 queue = deque([task for task in range(1, n+1) if indegree[task] == 0]) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in adjacency_list[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(order) == n: return order else: return None result = [] for n, m, dependencies in projects: adjacency_list = defaultdict(list) for u, v in dependencies: adjacency_list[u].append(v) order = topological_sort(n, adjacency_list) if order: result.append(\' \'.join(map(str, order))) else: result.append(\\"IMPOSSIBLE\\") return result # Example usage # Input: # 2 # 3 2 # 1 2 # 2 3 # 4 4 # 1 2 # 2 3 # 3 4 # 4 2 projects_input = [ (3, 2, [(1, 2), (2, 3)]), (4, 4, [(1, 2), (2, 3), (3, 4), (4, 2)]) ] t = 2 output = find_order_of_tasks(t, projects_input) for line in output: print(line)"},{"question":"Farmer John has a number of cows that need to be milked in the barn. Each cow has a specific schedule, denoted by a pair of times [start_i, end_i], which indicates when cow i is available for milking. Farmer John can only milk one cow at a time and wants to maximize the total time spent milking. Given the schedules of the cows, determine the maximum total time Farmer John can spend milking if he selects the optimal set of non-overlapping schedules. # Input Format - The first line contains an integer n (1 ≤ n ≤ 2·10^5) — the number of cows. - The next n lines each contain two integers start_i and end_i (0 ≤ start_i < end_i ≤ 10^9) — the start and end time of cow i\'s milking schedule. # Output Format - Print a single integer — the maximum total time Farmer John can spend milking. # Example Input ``` 3 1 3 2 5 4 6 ``` Output ``` 4 ``` Explaination: Farmer John can choose the intervals [1, 3] and [4, 6], which gives a total milking time of 4 (from 1 to 3 and from 4 to 6).","solution":"def max_milking_time(n, schedules): # Sort the schedules by end time schedules.sort(key=lambda x: x[1]) last_end_time = 0 total_time = 0 for start, end in schedules: if start >= last_end_time: total_time += end - start last_end_time = end return total_time"},{"question":"You are given an array of integers. Your task is to split this array into two subarrays such that the sum of elements in one subarray is as close as possible to the sum of elements in the other subarray. The goal is to minimize the absolute difference between the sums of the two subarrays. Write a function `minimizeDifference(arr: list[int]) -> int` that takes an array of integers `arr` as input and returns the minimum absolute difference between the sums of the two subarrays after the split. # Input - `arr` is a list of integers with at least 2 and at most 100,000 elements. Each element in the array is an integer between -10^9 and 10^9. # Output - Return a single integer, which is the minimum absolute difference between the sums of the two subarrays. # Example Given the input: ``` arr = [1, 2, 3, 4] ``` Output: ``` 0 ``` Explanation: One possible split is [1, 4] and [2, 3], both of which sum to 5. Given the input: ``` arr = [10, -10, 20, -30] ``` Output: ``` 10 ``` Explanation: One possible split is [10, -10, -30] and [20], with sums -30 and 20 respectively, resulting in an absolute difference of 10. # Note - You should aim to derive an efficient solution, considering the upper limits on array size and value range. - Consider using strategies such as dynamic programming or greedy approaches to solve the problem within acceptable time limits.","solution":"def minimizeDifference(arr): Returns the minimum absolute difference between the sums of two subarrays. import itertools total_sum = sum(arr) half_sum = total_sum / 2 n = len(arr) # We will use a set to store achievable sums achievable_sums = {0} # Iterate over each element for num in arr: # For each element, update achievable sums by adding this element to all achievable sums achievable_sums.update({x + num for x in achievable_sums}) # Find the achievable sum closest to half of the total sum min_diff = float(\'inf\') for possible_sum in achievable_sums: current_diff = abs(total_sum - 2 * possible_sum) if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"Julia is a coder and she\'s recently been interested in exploring the properties of prime numbers. She\'s decided to write a program that finds the maximum gap between prime numbers that are less than or equal to a given integer n. Here, the gap between two prime numbers p1 and p2 (where p1 < p2 and there are no other primes between them) is defined as the difference p2 - p1. Write a function `max_prime_gap(n)` that returns the maximum gap between successive prime numbers that are less than or equal to n. # Input: - An integer n (2 ≤ n ≤ 10^6). # Output: - Return a single integer, which is the maximum gap between successive prime numbers up to and including n. # Example: Input: ``` 20 ``` Output: ``` 4 ``` # Explanation: In the given example, the prime numbers less than or equal to 20 are: 2, 3, 5, 7, 11, 13, 17, 19. The gaps between these primes are: 1, 2, 2, 4, 2, 4, 2. The maximum gap is hence 4. # Note: 1. Implement the Sieve of Eratosthenes to generate the list of prime numbers up to n efficiently. 2. Iterate through the list of primes to determine the maximum consecutive gap.","solution":"def max_prime_gap(n): Returns the maximum gap between successive prime numbers that are less than or equal to n. # Step 1: Use the Sieve of Eratosthenes to find all prime numbers up to n sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes p = 2 while (p * p <= n): if sieve[p]: # Mark all multiples of p as False indicating they are not primes for i in range(p * p, n + 1, p): sieve[i] = False p += 1 # Extract all prime numbers from the sieve list primes = [p for p in range(n + 1) if sieve[p]] # Step 2: Find the maximum gap between consecutive primes max_gap = 0 for i in range(1, len(primes)): gap = primes[i] - primes[i - 1] if gap > max_gap: max_gap = gap return max_gap"},{"question":"You are the organizer of a chess tournament consisting of n players. Each player has a distinct skill rating denoted by r_i. The tournament consists of a series of match-ups between players where each player can play against any other player. However, not all match-ups have taken place. A match-up is defined as a pair of players, and you need to process these match-ups and answer two types of queries about them: 1. Given the initial setup, you can receive a query where you will be requested to determine the player with the highest skill rating in a particular subset of match-ups. Specifically, you need to determine the highest skill rating among the players who are directly or indirectly connected through match-ups to a specified player. 2. Another type of query will be to add a new match-up between two players, thereby updating the connections between them. The ultimate goal is to efficiently handle these queries given the match-ups between players. The first line contains three integers n, m, and q (1 le n, m, q le 100000). The second line contains n distinct integers r_1, r_2, ..., r_n, where r_i is the skill rating of player i (1 le r_i le 10^9). Then m lines follow, each containing two integers a_i and b_i (1 le a_i, b_i le n, a_i ne b_i), indicating a match-up between player a_i and player b_i. It is guaranteed that there will be no duplicate match-ups. Following these are q lines, each describing a query of one of the following formats: For each query of the first type, print the maximum skill rating among players reachable from the specified player through the match-ups. For each query of the second type, update the list of match-ups accordingly. Output the result for each query of the first type. Example: Input: ``` 5 3 4 10 20 30 40 50 1 2 2 3 4 5 1 1 2 3 4 1 3 1 4 ``` Output: ``` 30 50 50 ```","solution":"class ChessTournament: def __init__(self, n, ratings): self.n = n self.ratings = ratings self.parent = list(range(n)) self.max_rating = ratings[:] def find(self, x): if self.parent[x] != x: self.parent[x] = self.find(self.parent[x]) return self.parent[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.max_rating[rootX] > self.max_rating[rootY]: self.parent[rootY] = rootX else: self.parent[rootX] = rootY self.max_rating[rootX] = max(self.max_rating[rootX], self.max_rating[rootY]) self.max_rating[rootY] = max(self.max_rating[rootX], self.max_rating[rootY]) def add_match(self, x, y): self.union(x-1, y-1) def highest_skill(self, x): return self.max_rating[self.find(x-1)] def solve(n, m, q, ratings, matchups, queries): tournament = ChessTournament(n, ratings) for x, y in matchups: tournament.add_match(x, y) results = [] for query in queries: t = query[0] if t == 1: x = query[1] results.append(tournament.highest_skill(x)) elif t == 2: x = query[1] y = query[2] tournament.add_match(x, y) return results"},{"question":"Isabella is fascinated by how quickly prices of items can change over time. She is studying the price trends of specific items and noticed that sometimes, despite the fluctuations, there are periods where the price strictly increases day by day. She wants to determine the length of the longest period in which the price of an item continuously rises. The input consists of multiple test cases. The first line contains an integer t (1 le t le 100), the number of test cases. Each test case starts with an integer n (1 le n le 10^5), the number of days Isabella recorded the price. The next line contains n space-separated integers representing the price of the item on each day. The price of the item is never negative and does not exceed 10^9. For each test case, output a single integer, the length of the longest period in which the price continuously rises. **Example** Input: ``` 2 7 1 2 2 3 4 1 5 5 5 4 3 2 1 ``` Output: ``` 3 1 ``` **Explanation** In the first case, the prices on days 3, 4, and 5 (2, 3, 4) create the longest increasing period, which lasts for 3 days. In the second case, there is no increasing period, so the longest increasing period length is 1 (each individual day).","solution":"def longest_increasing_period(t, test_cases): results = [] for case in test_cases: n, prices = case max_len = cur_len = 1 for i in range(1, n): if prices[i] > prices[i-1]: cur_len += 1 max_len = max(max_len, cur_len) else: cur_len = 1 results.append(max_len) return results"},{"question":"Jack is a computer science student who loves solving algorithms involving strings. Recently, he came across a fascinating problem and decided to tackle it with your help. Given a string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', determine if the input string is valid. An input string is valid if every open bracket has a corresponding closed bracket of the same type and in the correct order. For instance, \'()\' and \'()[]{}\' are valid, but \'(]\' and \'([)]\' are not. The input consists of a single line that contains a string (s) (1 ≤ |s| ≤ 104), where |s| is the length of the string. Output \\"YES\\" if the string is valid, otherwise output \\"NO\\". For example: - For the input \\"()\\", the output should be \\"YES\\". - For the input \\"([)]\\", the output should be \\"NO\\". - For the input \\"{[()]}\\", the output should be \\"YES\\". You need to implement a function to solve this problem: ```python def isValid(s: str) -> str: # Your code here # Read the input string input_string = input().strip() print(isValid(input_string)) ```","solution":"def isValid(s: str) -> str: bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} open_brackets = set([\'(\', \'{\', \'[\']) stack = [] for char in s: if char in open_brackets: stack.append(char) elif char in bracket_map: if not stack or stack[-1] != bracket_map[char]: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"Alex is obsessed with number sequences. He recently came across a puzzle where he needs to determine whether a given sequence can be found within a larger sequence. Additionally, the sequence can appear in its original or reversed form within the larger sequence. Here\'s how the game works: - You are given two sequences of integers: a larger sequence `L` and a smaller sequence `S`. - You need to check whether the sequence `S` or its reversed form can be found as a contiguous subsequence within `L`. The input consists of: 1. An integer `n` (1 ≤ n ≤ 100,000), the length of the larger sequence `L`. 2. A sequence `L` of `n` integers. 3. An integer `m` (1 ≤ m ≤ 100), the length of the smaller sequence `S`. 4. A sequence `S` of `m` integers. The output should be \\"YES\\" if the sequence `S` or its reversed form can be found as a contiguous subsequence within `L`. Otherwise, output \\"NO\\". Here is the format of the input: - The first line contains the integer `n`. - The second line contains `n` integers separated by spaces, representing the larger sequence `L`. - The third line contains the integer `m`. - The fourth line contains `m` integers separated by spaces, representing the smaller sequence `S`. Sample Input 1: ``` 10 1 2 3 4 5 6 7 8 9 10 3 5 4 3 ``` Sample Output 1: ``` YES ``` Sample Input 2: ``` 5 1 2 3 4 5 3 7 8 9 ``` Sample Output 2: ``` NO ``` Note: In the first sample, the sequence `S` (5, 4, 3) appears in the reverse form (3, 4, 5) as a contiguous subsequence within `L`. In the second sample, the sequence `S` (7, 8, 9) does not appear in `L` in any form.","solution":"def contains_subsequence(L, S): Checks if the sequence S or its reversed form is a contiguous subsequence within L. :param L: List of integers representing the larger sequence :param S: List of integers representing the smaller sequence :return: \\"YES\\" if S or its reverse is found in L, otherwise \\"NO\\" n = len(L) m = len(S) # Check for S in L for i in range(n - m + 1): if L[i:i+m] == S: return \\"YES\\" # Check for reversed S in L S_reversed = S[::-1] for i in range(n - m + 1): if L[i:i+m] == S_reversed: return \\"YES\\" return \\"NO\\""},{"question":"A chef is preparing a multi-course meal and wants to impress their guests by ensuring the taste of the dishes steadily increases. The chef is given an array of integers representing the tastiness of each dish, and they want to schedule the cooking of the dishes in such a way that the tastiness of the dishes forms a non-decreasing subsequence. However, the chef can only cook consecutive dishes together, i.e., they can only form a subsequence from a contiguous subarray of dishes. Your task is to find the length of the longest contiguous subarray where the tastiness of the dishes forms a non-decreasing subsequence. The first line contains a single integer n (1 le n le 10^5) — the number of dishes. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the tastiness values of the dishes. Print a single integer, the length of the longest contiguous subarray where the tastiness values form a non-decreasing subsequence. In the first example: - If the tastiness values of the dishes are [1, 2, 3, 2, 3, 4, 1], then the length of the longest contiguous non-decreasing subarray is 4 (the subarray [2, 3, 4, 1]). - If the tastiness values are [5, 5, 5, 5], then the length of the longest contiguous non-decreasing subarray is 4 because the entire array forms a non-decreasing subsequence.","solution":"def longest_non_decreasing_subarray_length(n, tastiness): Returns the length of the longest contiguous non-decreasing subarray. Parameters: - n (int): The number of dishes. - tastiness (List[int]): The tastiness values of the dishes. Returns: - int: The length of the longest contiguous non-decreasing subarray. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if tastiness[i] >= tastiness[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Alice and Bob are playing a game with a string consisting of characters \'X\' and \'Y\'. The game is played as follows: 1. Alice starts by cutting any segment of the string that forms a palindrome. This segment should be at least of length 1. Removing this segment results in two parts of the string left, which are then concatenated together. If the segment cut is the entire string, the string becomes empty. 2. Bob then takes his turn by cutting any remaining segment that forms a palindrome. 3. They continue taking turns until the string is empty. The player who cannot make a move (because the string is already empty) loses the game. Alice always makes the first move. Determine who has a winning strategy, assuming both players play optimally. The input consists of a single string ( s ) (( 1 leq text{length of } s leq 100 )), composed only of characters \'X\' and \'Y\'. If Alice has a winning strategy, print \\"Alice\\". Otherwise, print \\"Bob\\". # Example: **Input:** ``` XYXYX ``` **Output:** ``` Bob ``` **Explanation:** Bob wins because no matter what segment Alice cuts on her first move, Bob will always be able to ultimately force a winning move with optimal play. **Input:** ``` XYYX ``` **Output:** ``` Alice ``` **Explanation:** Alice can always ensure that she leaves Bob with a non-palindromic string that doesn\'t allow him to make a winning cut, thus forcing him to lose eventually.","solution":"def has_winning_strategy(s): Determine if Alice has a winning strategy given the string \'s\'. def is_palindrome(sub_str): return sub_str == sub_str[::-1] # If the length of the string is odd, Alice wins by the last move. # If it is even, Bob wins by moving last. return \\"Alice\\" if len(s) % 2 == 1 else \\"Bob\\""},{"question":"Jane is a software engineer working on a project that involves processing huge amounts of sensor data. Each sensor reading is an integer value, and she wants to perform several types of statistical calculations on these readings. One common calculation is finding the median of a subset of readings. The project requires a specific function: Given an array of sensor readings and several subqueries, each asking for the median of a contiguous subarray, return the median for each query. If the subarray length is even, the median is defined as the lower of the two middle elements. You are given an array of sensor readings and multiple subqueries. Each subquery is defined by two integers: the start and end indices of the subarray. The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100,000) - the number of sensor readings and the number of subqueries, respectively. The second line contains n integers representing the sensor readings (−10^9 ≤ reading ≤ 10^9). The next q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n) - the start and end indices of a subarray (inclusive, 1-based indexing). For each subquery, output the median of the specified subarray. Example Input: ``` 6 3 1 3 2 6 5 4 1 4 2 6 3 5 ``` Example Output: ``` 2 4 5 ``` Note: Efficiently calculating the median for multiple subarray queries can be challenging given the constraints; consider optimization techniques for a performant solution.","solution":"def find_medians(n, q, readings, queries): Finds medians for the given list of queries on sensor readings. :param n: The number of sensor readings. :param q: The number of queries. :param readings: List of sensor readings. :param queries: List of queries where each query is a tuple (l, r). :return: List of medians for each query. def get_median(subarray): sorted_subarray = sorted(subarray) mid_idx = (len(sorted_subarray) - 1) // 2 return sorted_subarray[mid_idx] medians = [] for l, r in queries: subarray = readings[l-1:r] medians.append(get_median(subarray)) return medians # Parsing input data def parse_input(input_string): lines = input_string.strip().split(\'n\') n, q = map(int, lines[0].split()) readings = list(map(int, lines[1].split())) queries = [tuple(map(int, line.split())) for line in lines[2:2+q]] return n, q, readings, queries # Function to be used for handling input and output def process_queries(input_string): n, q, readings, queries = parse_input(input_string) return find_medians(n, q, readings, queries)"},{"question":"You are the owner of a dessert shop that sells different types of cupcakes. Each cupcake has a fixed cost, and you have n types of cupcakes, each with different stock and varying costs. You have a certain budget b, and your goal is to determine the maximum number of distinct types of cupcakes you can buy without exceeding the budget. The first line contains two integers n (1 ≤ n ≤ 1000) and b (1 ≤ b ≤ 10000) — the number of types of cupcakes and your budget, respectively. Each of the next n lines contains two integers c_i and s_i (1 ≤ c_i, s_i ≤ 1000) — the cost of each cupcake type and the stock available for that type, respectively. Output a single integer — the maximum number of distinct cupcake types you can buy with your budget. For example, given the following: ``` 4 10 1 3 2 5 3 2 5 1 ``` You can buy types 1, 2, and 3 within your budget of 10. Here\'s another example: ``` 3 6 4 10 3 5 5 2 ``` You can only buy type 2, as type 1 and type 3 exceed the budget when combined with any other type.","solution":"def max_distinct_cupcakes(n, b, cupcakes): Determines the maximum number of distinct types of cupcakes you can buy without exceeding the budget. Inputs: - n (int): Number of types of cupcakes. - b (int): Budget. - cupcakes (list of tuples): Each tuple contains two integers c_i (cost) and s_i (stock) for each cupcake type. Returns: - int: Maximum number of distinct cupcake types that can be bought within the budget. # Sort the cupcakes by cost in ascending order (c_i) cupcakes.sort() distinct_count = 0 budget_left = b for cost, stock in cupcakes: if budget_left >= cost: distinct_count += 1 budget_left -= cost if budget_left < cost: break return distinct_count # Example usage: #print(max_distinct_cupcakes(4, 10, [(1, 3), (2, 5), (3, 2), (5, 1)])) # Output should be 3 #print(max_distinct_cupcakes(3, 6, [(4, 10), (3, 5), (5, 2)])) # Output should be 1"},{"question":"Lena loves playing a game with numbers. She has an array of integers and she can perform a series of operations to make all elements of the array equal. In one operation, she can choose any subarray of size `k` and increase or decrease each element of the subarray by 1. Now, Lena wants to figure out the minimum number of operations required to make all elements of the array equal. Can you help her determine that? The first line contains two integers `n` and `k` (1 le n le 10^5, 1 le k le n) — the length of the array and the size of the subarray Lena can choose to perform an operation, respectively. The second line contains `n` integers a_i (1 le a_i le 10^9) — the elements of the array. Print a single integer — the minimum number of operations Lena needs to perform to make all elements of the array equal. Example: Input: ``` 5 2 1 2 3 4 5 ``` Output: ``` 6 ``` Explanation: To make all the elements equal, Lena can perform the following operations: 1) Increase elements [1, 2] by 1. 2) Increase elements [2, 3] by 1. 3) Increase elements [3, 4] by 1. 4) Increase elements [4, 5] by 1. 5) Increase elements [1, 2] by 1. 6) Increase elements [2, 3] by 1. After these operations, all elements in the array will become 3.","solution":"def min_operations_to_equal_elements(n, k, arr): Returns the minimum number of operations required to make all elements of the array equal. max_value = max(arr) min_value = min(arr) # Find the difference between max value and min value difference = max_value - min_value # If k is 1, we can\'t change other elements in different subarray, so it # requires min_value and max_value to be reduced or incremented totally # one by one till they become equal to the maximum element. The necessary # operations will be the max value. if k == 1: return difference # Calculate minimum number of operations # We will always make elements closer to max_value. The maximum distance # any element will need to move is `max - min`. # In each operation, we can adjust `k` elements by 1: # So, minimum operations needed is `(difference + k - 1) // k` as this # uses integer division to ceil the division. operations = (difference + k - 1) // k return operations"},{"question":"Alice is playing a game with a sequence of integers. She is given an array a_1, a_2, ldots, a_n of length n where each element is a non-negative integer. She can perform an operation any number of times which involves selecting any two distinct elements from the array and replacing one of them by the greatest common divisor (GCD) of the two selected elements. Alice\'s goal is to minimize the maximum integer in the array after performing the operations. Alice needs your help to determine the minimum possible maximum integer in the array after performing the described operations any number of times. The first line contains a single integer n (2 leq n leq 10^5), the length of the array. The second line contains n non-negative integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9), representing the elements of the array. Output a single integer, the minimum possible maximum integer in the array after performing any number of operations. # Example: Input ``` 3 4 8 12 ``` Output ``` 4 ``` Explanation Initially, the array is [4, 8, 12]. After performing the operation: - Selecting 8 and 12: the GCD is 4. Replace 12 with 4. The array becomes [4, 8, 4]. - Selecting 8 and 4: the GCD is 4. Replace 8 with 4. The array becomes [4, 4, 4]. The minimum possible maximum integer in the array is 4.","solution":"import math from functools import reduce def minimize_max_integer(a): Returns the minimum possible maximum integer in the array after performing any number of operations. return reduce(math.gcd, a)"},{"question":"A wizard living in a magical forest has created an infinite sequence of spells, each with a unique power level. The sequence follows a simple rule: The power level of the spells alternates between odd and even numbers starting at 1, with odd-indexed spells being odd numbers and even-indexed spells being even numbers. Specifically, the formula for the n-th spell is as follows: - For odd indices (n = 2i + 1 for some integer i geq 0), the power level is 2i + 1. - For even indices (n = 2i + 2 for some integer i geq 0), the power level is 2(i + 1). The sequence looks like this: 1, 2, 3, 4, 5, 6, ... The wizard would like to find the total power of spells cast from the l-th to the r-th spell (inclusive). You need to calculate this sum for given values of l and r and return the result modulo 1000000007 (10^9 + 7). The first line contains two integers l and r (1 leq l leq r leq 10^{18}) — the range of the spells. Print a single integer — the total power of spells cast from the l-th to the r-th spell modulo 1000000007 (10^9 + 7). For example: In the first example, the spells from the 1st to the 3rd are 1, 2, 3. Their sum is 1 + 2 + 3 = 6. In the second example, the spells from the 4th to the 7th are 4, 5, 6, 7. Their sum is 4 + 5 + 6 + 7 = 22.","solution":"MOD = 1000000007 def spell_power_sum(l, r): def total_power_up_to(n): odd_terms = (n + 1) // 2 even_terms = n // 2 # Sum of first k odd numbers is k^2 odd_sum = (odd_terms * odd_terms) % MOD # Sum of first k even numbers is k * (k + 1) even_sum = (even_terms * (even_terms + 1)) % MOD return (odd_sum + even_sum) % MOD return (total_power_up_to(r) - total_power_up_to(l-1)) % MOD"},{"question":"The king\'s chief mathematician has devised a new way to test the intelligence of his students using a number sequence challenge. The sequence is formed by generating numbers that are the sum of the squares of the digits of the previous number in the sequence. Your task is to determine if the sequence will eventually enter a cycle or reach a single repeating number. Given an integer `s1`, the first number in the sequence, find out if the sequence will: 1. Reach a cycle, and if so, return the length of the cycle. 2. Reach a single repeating number without further change. You need to write a function that performs the following: Input: - An integer `s1` (1 ≤ s1 ≤ 10^6) Output: - An integer `c`: if the sequence falls into a cycle, print the length of the cycle. Otherwise, print `0` if it reaches a number that doesn\'t change further and doesn\'t enter a cycle. Example: 1. For the input `19`, the sequence is: 19 -> 82 (1^2 + 9^2) 82 -> 68 (8^2 + 2^2) 68 -> 100 (6^2 + 8^2) 100 -> 1 (1^2 + 0^2 + 0^2) 1 -> 1 ... thus `c = 1`. 2. For the input `7`, the sequence is: 7 -> 49 (7^2) 49 -> 97 (4^2 + 9^2) 97 -> 130 (9^2 + 7^2) 130 -> 10 (1^2 + 3^2 + 0^2) 10 -> 1 (1^2 + 0^2) 1 -> 1 ... thus `c = 1`. 3. For the input `23`, the sequence is: 23 -> 13 (2^2 + 3^2) 13 -> 10 (1^2 + 3^2) 10 -> 1 (1^2 + 0^2) 1 ... thus `c = 1`. In all these examples, the sequence reaches 1 without looping into a larger cycle, hence the answer is `c = 1`. Function signature: ```python def find_sequence_cycle(s1: int) -> int: pass ``` Implement the function to determine the cycle length or reach a stable recurring number.","solution":"def find_sequence_cycle(s1: int) -> int: Find if the sequence starting from s1 falls into a cycle or reaches a single repeating number. Parameters: s1 (int): Starting number (1 ≤ s1 ≤ 10^6) Returns: int: Length of the cycle if there\'s a cycle, or 0 if it reaches a single repeating number. def sum_of_squares(n: int) -> int: return sum(int(digit)**2 for digit in str(n)) seen = {} current = s1 steps = 0 while current not in seen: seen[current] = steps current = sum_of_squares(current) steps += 1 cycle_start = seen[current] cycle_length = steps - cycle_start return cycle_length if cycle_length > 1 else 1"},{"question":"You are tasked with organizing files on your computer. Each file has a unique identifier and a size. You want to move all these files to a new directory such that the total size of files in any two subdirectories is different. To achieve this, you will split the files into subdirectories, each containing one or more files. The size of a subdirectory is the sum of sizes of the files it contains. Find the minimum number of subdirectories you need to ensure no two subdirectories have the same total size. The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of files. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the sizes of the files. Output a single integer — the minimum number of subdirectories needed. Example: Input: 4 1 2 2 3 Output: 3 Explanation: To achieve the required condition, one possible way to split the files into subdirectories is: - Subdirectory 1: [1] - Subdirectory 2: [2] - Subdirectory 3: [2, 3] Here, the total sizes of the subdirectories are 1, 2, and 5, which are all different.","solution":"def min_subdirectories(n, sizes): Returns the minimum number of subdirectories needed to ensure no two subdirectories have the same total size. from collections import defaultdict # Dictionary to keep track of the frequency of each file size size_counts = defaultdict(int) for size in sizes: size_counts[size] += 1 # The maximum frequency of any size determines the minimum number of subdirectories needed. return max(size_counts.values())"},{"question":"Arina loves reading books of different genres. Recently, she started organizing her bookshelf more efficiently based on the genres of the books. She wants to group all books of the same genre together while keeping the order of first occurrence for each genre. Every book is represented by a unique integer identifier, and genres are represented by lowercase strings. Your task is to help Arina organize her bookshelf. Write a program that rearranges a list of books so that books of the same genre are grouped together, maintaining the order of their first appearance. Input: - The first line contains an integer ( n ) (1 ≤ ( n ) ≤ ( 10^5 )) — the number of books. - The following ( n ) lines each contain a string ( g_i ) and an integer ( b_i ) separated by space, where ( g_i ) (1 ≤ |( g_i )| ≤ 100) is the genre of the ( i )-th book and ( b_i ) (1 ≤ ( b_i ) ≤ ( 10^9 )) is the identifier of the ( i )-th book. Output: - Print ( n ) lines with the genres and identifiers of the books rearranged so that all books of the same genre are grouped together, maintaining the order of their first occurrence. Example: Input: ``` 6 fantasy 101 thriller 202 fantasy 103 romance 304 thriller 205 romance 306 ``` Output: ``` fantasy 101 fantasy 103 thriller 202 thriller 205 romance 304 romance 306 ``` Explanation: Books are grouped by genre, and within each group, they retain their input order.","solution":"def organize_books(n, books): Organizes books by their genres while keeping the order of first occurrence of each genre. :param n: int, number of books. :param books: list of tuples (genre, book_id) where genre is a string and book_id is an int. :return: List of tuples (genre, book_id), organized by genres. from collections import defaultdict genre_dict = defaultdict(list) order = [] for genre, book_id in books: if genre not in genre_dict: order.append(genre) genre_dict[genre].append((genre, book_id)) result = [] for genre in order: result.extend(genre_dict[genre]) return result"},{"question":"You are given a set of n sticks with various lengths, and you need to determine if it is possible to rearrange exactly four of those sticks to form a rectangle. A rectangle is formed if there are two pairs of sticks with equal length. # Input - The first line contains a single integer n (4 leq n leq 1000) -- the number of sticks. - The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 1000) -- the lengths of the sticks. # Output - Print \\"YES\\" (without quotes) if it is possible to select exactly four sticks to form a rectangle. - Otherwise, print \\"NO\\" (without quotes). # Example Input 1 ``` 6 2 2 3 3 4 4 ``` Output 1 ``` YES ``` Input 2 ``` 5 3 6 3 3 7 ``` Output 2 ``` NO ``` # Explanation - In the first example, you can select sticks of lengths 2, 2, 3, and 3 to form a rectangle. - In the second example, it is not possible to select four sticks where there are two pairs of equal length sticks.","solution":"def can_form_rectangle(n, sticks): Determines if it is possible to rearrange exactly four of the given sticks to form a rectangle. Parameters: n (int): The number of sticks. sticks (list of int): The lengths of the sticks. Returns: str: \\"YES\\" if it is possible to form a rectangle, otherwise \\"NO\\". from collections import Counter # Count the occurrences of each stick length count = Counter(sticks) # Collect lengths that appear at least twice pairs = [length for length, freq in count.items() if freq >= 2] # Check if we have more than one pair to form a rectangle if len(pairs) >= 2: return \\"YES\\" # Check for a case where one length occurs 4 or more times for length, freq in count.items(): if freq >= 4: return \\"YES\\" return \\"NO\\""},{"question":"You are given a string `S` of length `n` consisting of lowercase English letters. You can perform the following operation exactly once: choose an index `i` (1 ≤ i ≤ n) and replace the character at that index with any lowercase English letter of your choice. Your task is to determine if it is possible to make the string `S` a palindrome by performing the operation once. If it is possible, print \\"YES\\", otherwise print \\"NO\\". The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the length of the string `S`. The second line contains a string `S` of length `n`. Output a single line containing \\"YES\\" if it is possible to make the string a palindrome by performing the operation once, otherwise \\"NO\\". In the first example, replacing the first \'a\' with \'c\' will transform the string into \\"cbc\\", which is a palindrome. In the second example, replacing the \'e\' with \'d\' will transform the string into \\"abccba\\", which is a palindrome. In the third example, no single replacement can transform the string into a palindrome.","solution":"def can_be_palindrome_with_one_change(n, S): Determines if it is possible to make the string S a palindrome by performing exactly one character replacement. Parameters: n (int): Length of the string S (str): The input string Returns: str: \\"YES\\" if it is possible, otherwise \\"NO\\" # Count the number of positions where the characters from left and right do not match mismatch_count = sum(1 for i in range(n // 2) if S[i] != S[n - 1 - i]) # If there is at most one mismatch, it\'s possible to make the string a palindrome by one change if mismatch_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers and a sliding window of size k, find the maximum sum of any subarray of size k. Your task is to write a function that accepts an array of integers and the window size k, and outputs the maximum sum of any subarray of size k. # Input - The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ n) - the number of elements in the array and the size of the sliding window, respectively. - The second line contains n space-separated integers a1, a2, ..., an (-10^5 ≤ ai ≤ 10^5) - the elements of the array. # Output - Output one integer - the maximum sum of any subarray of size k. # Example Input: ``` 7 3 2 1 -3 4 -1 2 1 ``` Output: ``` 5 ``` # Explanation: For the provided example, the subarrays of size 3 are: - [2, 1, -3] with sum 0 - [1, -3, 4] with sum 2 - [-3, 4, -1] with sum 0 - [4, -1, 2] with sum 5 - [-1, 2, 1] with sum 2 The maximum sum among these subarrays is 5. Thus, the output is 5.","solution":"def max_sum_subarray(arr, k): Finds the maximum sum of any subarray of size k. Parameters: arr (list): List of integers. k (int): Size of the sliding window. Returns: int: Maximum sum of subarray of size k. # Initialize window sum and maximum sum window_sum = sum(arr[:k]) max_sum = window_sum # Traverse over the rest of the elements for i in range(k, len(arr)): # Slide the window right by subtracting the element going out of the window # and adding the new element coming into the window window_sum += arr[i] - arr[i - k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"You are given an array of n integers, and you need to perform the following tasks on it: 1. Find the length of the longest subarray such that the sum of the elements in this subarray is at most k. 2. Find the length of the shortest subarray such that the sum of the elements in this subarray is at least k. The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9), where n is the number of elements in the array and k is the integer specified above. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4), where ai is the ith element of the array. Output two integers: the length of the longest subarray with a sum of at most k and the length of the shortest subarray with a sum of at least k. If it is not possible for a subarray to meet the criteria, output -1 for that result. Example: Input: 10 15 1 2 3 4 5 6 7 8 9 10 Output: 5 2 Explanation: - The longest subarray with a sum of at most 15 is [1, 2, 3, 4, 5], so the answer is 5. - The shortest subarray with a sum of at least 15 is [7, 8] (or [6, 9]), so the answer is 2.","solution":"def longest_subarray_with_at_most_sum(arr, k): n = len(arr) max_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > k: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length if max_length > 0 else -1 def shortest_subarray_with_at_least_sum(arr, k): n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else -1 def find_subarray_lengths(n, k, arr): longest = longest_subarray_with_at_most_sum(arr, k) shortest = shortest_subarray_with_at_least_sum(arr, k) return longest, shortest"},{"question":"Given an array of positive integers, you are allowed to perform exactly one operation where you can divide any element by 2 (remove the largest factor of 2). After this operation, you need to determine the maximum possible Greatest Common Divisor (GCD) of the elements in the modified array. You are given multiple test cases, for each test case: 1. Determine the largest number after performing the allowed single operation on any element in the given array. 2. Calculate the GCD of the array containing the modified number. 3. Output the maximum GCD that can be obtained. # Input - The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. - The first line of each test case contains the single integer n (2 leq n leq 2 cdot 10^5) — the number of elements in the array. - The second line of each test case contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) — the elements of the array. # Output For each test case, print a single integer — the maximum possible GCD of the array after applying the allowed operation exactly once on any element. # Example Input: ``` 3 3 8 4 6 4 15 30 45 60 2 10 20 ``` Output: ``` 4 15 10 ``` # Explanation **Test Case 1:** - We can apply the operation on 8 so it becomes 4. The array becomes [4, 4, 6]. The GCD of [4, 4, 6] is 2. - We can apply the operation on 6 so it becomes 3. The array becomes [8, 4, 3]. The GCD of [8, 4, 3] is 1. - Applying on 4 remains 2. The array becomes [8, 2, 6]. The GCD is 2. The maximum GCD we can achieve by these operations is 2. **Test Case 2:** - Apply the operation on 30; it becomes 15. The array becomes [15, 15, 45, 60]. The GCD is 15. - Apply the operation on 60; it becomes 30. The array becomes [15, 30, 45, 30]. The GCD is 15. - Apply the operation on 45; it becomes 22. The array becomes [15, 30, 22, 45]. The GCD is 1. The maximum GCD we can achieve by these operations is 15. **Test Case 3:** - Apply the operation on 20; it becomes 10. The array becomes [10, 10]. The GCD is 10. The maximum GCD we can achieve is 10.","solution":"import math from functools import reduce def max_gcd_after_divide_by_2(t, test_cases): results = [] for case in test_cases: n, arr = case original_gcd = reduce(math.gcd, arr) max_possible_gcd = 0 for i in range(n): modified_arr = arr.copy() modified_arr[i] //= 2 modified_gcd = reduce(math.gcd, modified_arr) max_possible_gcd = max(max_possible_gcd, modified_gcd) results.append(max_possible_gcd) return results"},{"question":"You are given a string s consisting of lowercase English letters and a set of queries. Each query specifies two integers l and r (1 ≤ l ≤ r ≤ |s|), representing a range of the string. Your task is to find the lexicographically smallest substring of length k (1 ≤ k ≤ r-l+1) within the specified range for each query. The input format is as follows: - The first line contains two integers n and q (1 ≤ n, q ≤ 100000) – the length of the string s and the number of queries. - The second line contains the string s, which is of length n. - The next q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n) – the range specified in the query. Output a single string for each query, representing the lexicographically smallest substring of length k within the specified range. Input: ``` 6 2 bacdba 1 4 2 6 ``` Output: ``` a a ``` Explanation: In the first query, the substring taken from positions 1 to 4 is \\"bacd\\". The lexicographically smallest substring of length k (k can be 1, 2, 3, or 4) within this range is \\"a\\". In the second query, the substring taken from positions 2 to 6 is \\"acdba\\". The lexicographically smallest substring of length k within this range is also \\"a\\".","solution":"def find_lexicographical_smallest_substring(n, q, s, queries): results = [] for l, r in queries: substr = s[l-1:r] smallest_char = min(substr) results.append(smallest_char) return results"},{"question":"Christina is playing a game that involves placing tokens on a coordinate plane. She starts with a single token at position (0, 0). She can make a series of moves, where each move consists of placing a new token a fixed distance away from the most recently placed token, either to the right, left, above, or below it. The fixed distance for each move is given, and Christina can repeat moves in any direction. Christina wants to know how many distinct locations she can place tokens at, given that she can make up to \'m\' moves. However, due to the nature of the game, she can place the same number of tokens by ending up at the same coordinates using different sequences of moves. Given the number of moves \'m\', and the fixed distance \'d\' for each move, calculate the number of distinct coordinates Christina can place tokens at after up to \'m\' moves. Input: - The first line contains an integer \'t\' (1 ≤ t ≤ 1000), representing the number of test cases. - Each of the next \'t\' lines contains two space-separated integers \'m\' (0 ≤ m ≤ 10^9), the number of moves Christina can make, and \'d\' (1 ≤ d ≤ 10^9), the distance of each move. Output: - For each test case, print a single integer representing the number of distinct coordinates Christina can place tokens at after up to \'m\' moves. Example: Input: 3 0 5 1 2 2 1 Output: 1 4 9 Explanation: In the first example, Christina doesn\'t make any moves, so she remains at (0, 0) which counts as one distinct position. In the second example, Christina can place tokens at (0, 0), (2, 0), (0, 2), and (-2, 0). In the third example, Christina can place tokens at (0, 0), (1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, -1), (1, -1), and (-1, 1).","solution":"def distinct_coordinates(m, d): Calculates the number of distinct coordinates Christina can place tokens given `m` moves and distance `d` for each move. # If m is 0, only the initial position (0, 0) is possible if m == 0: return 1 else: return (2 * m + 1) ** 2 def number_of_distinct_coordinates(t, test_cases): results = [] for m, d in test_cases: results.append(distinct_coordinates(m, d)) return results"},{"question":"There is a company that has a large array of servers arranged in a grid with n rows and m columns. Each server can either be in a \\"functional\\" state represented by \'0\', or a \\"failed\\" state represented by \'1\'. The company wants to repair its servers, but it can repair only one rectangular subarray (subgrid) at a time. The task is to find the size of the smallest subarray that must be repaired in order to make the grid free of \\"failed\\" servers. Write a program that takes as input the dimensions of the grid n and m (1 ≤ n, m ≤ 1000) and the grid itself consisting of n lines, each containing m characters (either \'0\' or \'1\'). The program should output two integers: the number of rows and the number of columns of the smallest subarray that must be repaired to make all servers functional. If the servers are already all functional, the output should be 0 0. # Input The first line contains two integers, n and m: ``` n m ``` The next n lines each contain a string of m characters (either \'0\' or \'1\'). # Output Output two integers – the number of rows and number of columns of the smallest subarray that includes all the \'1\'s. # Example Input ``` 5 6 000000 001010 011110 000000 000000 ``` Output ``` 2 3 ``` In this example, the smallest subarray that covers all the \'1\'s goes from the second to the third row and from the third to the fifth column. Hence, the answer is 2 rows and 3 columns.","solution":"def smallest_subarray_to_repair(n, m, grid): min_row, max_row, min_col, max_col = n, 0, m, 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': if i < min_row: min_row = i if i > max_row: max_row = i if j < min_col: min_col = j if j > max_col: max_col = j if min_row > max_row or min_col > max_col: return (0, 0) rows = max_row - min_row + 1 cols = max_col - min_col + 1 return (rows, cols)"},{"question":"You are given a playground represented as a 2D grid of size n x m. The playground can contain mountains (\'^\'), water (\'~\'), or empty fields (\'.\'). You are tasked with finding the largest rectangular region of empty fields (\'.\') in the playground. Note that the rectangular region must be contiguous and be aligned with the grid axes. The input consists of: - A single integer k (1 ≤ k ≤ 5) — the number of playgrounds you need to analyze. - For each playground: - Two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. - n lines, each containing m characters (either \'^\', \'~\', or \'.\'). For each playground, output a single integer — the area of the largest rectangular region of empty fields. # Example Input: ``` 2 3 4 ..^. .~~. .... 4 5 ..... ^..^. ~.... ..... ``` # Example Output: ``` 4 8 ``` # Explanation: - In the first playground, the largest rectangular region of empty fields has an area of 4. - In the second playground, the largest rectangular region of empty fields has an area of 8.","solution":"def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def largest_rectangle_area(grid): if not grid: return 0 n, m = len(grid), len(grid[0]) heights = [0] * m max_area = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, max_histogram_area(heights)) return max_area def largest_empty_fields(k, playgrounds): results = [] for playground in playgrounds: n, m = playground[\'dimensions\'] grid = playground[\'grid\'] results.append(largest_rectangle_area(grid)) return results"},{"question":"You are given a tree with n nodes. A tree is a connected acyclic graph. The nodes are labeled 1 through n. Each edge in the tree has a weight associated with it. Your task is to process q queries on this tree. In each query, given two nodes u and v, you have to find the maximum edge weight on the path from u to v. The first line contains two integers n and q (1 ≤ n, q ≤ 105). The next n-1 lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 109), indicating there is an edge between nodes u and v with weight w. The following q lines each contain two integers u and v (1 ≤ u, v ≤ n), representing the pair of nodes for which the query is made. Output q lines, each containing an integer, the maximum edge weight on the path from u to v for each query.","solution":"from collections import defaultdict, deque class Tree: def __init__(self, n): self.n = n self.graph = defaultdict(list) def add_edge(self, u, v, w): self.graph[u].append((v, w)) self.graph[v].append((u, w)) def query_max_weight(self, u, v): # Perform BFS to find path and maximum edge weight along the path max_weight = 0 visited = [False] * (self.n + 1) queue = deque([(u, float(\'-inf\'))]) # (current_node, max_weight_along_path) visited[u] = True while queue: current, max_w = queue.popleft() if current == v: max_weight = max_w break for neighbor, weight in self.graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, max(max_w, weight))) return max_weight def solve(n, q, edges, queries): tree = Tree(n) for u, v, w in edges: tree.add_edge(u, v, w) results = [] for u, v in queries: results.append(tree.query_max_weight(u, v)) return results"},{"question":"Write a function that receives two strings and returns the minimum number of operations required to convert the first string into the second string. There are three possible operations: 1. Insert a character 2. Remove a character 3. Replace a character The function signature should be: ```python def min_operations(source: str, target: str) -> int: ``` The first line of the input contains the source string and the target string, both non-empty and of length not exceeding 1000. Output the minimum number of operations required. # Example Input ``` horse ros ``` Output ``` 3 ``` Explanation: - Remove \'h\' from \\"horse\\" -> \\"orse\\" - Replace \'r\' with \'e\' -> \\"orse\\" - Remove \'e\' from \\"orse\\" -> \\"ros\\" # Note: The problem is essentially about finding the Levenshtein Distance between two strings, a common metric for measuring the difference between two sequences. The solution involves using dynamic programming to compute the cost of the operations efficiently.","solution":"def min_operations(source: str, target: str) -> int: Computes the minimum number of operations required to convert the \'source\' string into the \'target\' string. Uses dynamic programming to calculate the Levenshtein Distance. m, n = len(source), len(target) # DP table initialization dp = [[0] * (n + 1) for _ in range(m + 1)] # Base cases: converting an empty string to a string of length i and vice versa for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1 return dp[m][n]"},{"question":"Alice is learning to generate random permutations and stumbled upon a curious problem. Given an integer array, she wants to generate the lexicographically next permutation of its elements. If the next permutation does not exist, she should return the smallest possible permutation (sorted in ascending order). Can you write a function to help Alice achieve this? # Function Signature ```python def next_permutation(nums: List[int]) -> List[int]: pass ``` # Input - A single list of integers, `nums`, where `1 <= len(nums) <= 1000` and `-10^6 <= nums[i] <= 10^6`. # Output - The list representing the lexicographically next permutation of the input list. If the next permutation does not exist, return the list sorted in ascending order. # Examples 1. Input: `nums = [1, 2, 3]` Output: `[1, 3, 2]` Explanation: The next permutation of `[1, 2, 3]` is `[1, 3, 2]`. 2. Input: `nums = [3, 2, 1]` Output: `[1, 2, 3]` Explanation: The next permutation of `[3, 2, 1]` does not exist, so return the smallest permutation `[1, 2, 3]`. 3. Input: `nums = [1, 1, 5]` Output: `[1, 5, 1]` Explanation: The next permutation of `[1, 1, 5]` is `[1, 5, 1]`. # Notes - The function should modify the list in-place if possible. - The integers within the array can have duplicates. - Efficient solutions are preferred where possible. # Technical Details The algorithm to determine the next permutation in lexicographic order involves: 1. Identifying the longest suffix that is non-increasing. 2. Identifying the pivot - the element just before the identified suffix. 3. Swapping the pivot with the smallest element in the suffix that is larger than the pivot. 4. Reversing the suffix. Do not forget to handle the edge case where the input list is already the maximum permutation.","solution":"from typing import List def next_permutation(nums: List[int]) -> List[int]: Generate the lexicographically next permutation of the list nums. If it doesn\'t exist, return the smallest permutation (sorted in ascending order). # Step 1: Identify the longest non-increasing suffix i = len(nums) - 1 while i > 0 and nums[i - 1] >= nums[i]: i -= 1 if i <= 0: # The entire list is non-increasing, thus we are at the last permutation. return sorted(nums) # Step 2: Identify the pivot pivot = i - 1 # Step 3: Identify the smallest element in the suffix that is larger than the pivot j = len(nums) - 1 while nums[j] <= nums[pivot]: j -= 1 # Step 4: Swap the pivot and the element found nums[pivot], nums[j] = nums[j], nums[pivot] # Step 5: Reverse the suffix nums[i:] = nums[i:][::-1] return nums"},{"question":"A company has a hierarchical organization structure, where each employee (except for the CEO) has exactly one direct manager. The CEO does not have any manager. You are given this organizational structure as a tree with `n` nodes. Node `1` represents the CEO, and each node numbered from `2` to `n` represents an employee. Several employees have initiated a project together. Given a list of `m` employees who are participating in the project, your task is to find the Lowest Common Manager (LCM) among these employees. The LCM of a group of nodes in a tree is defined as the lowest node (in terms of depth) that is an ancestor of all the given nodes. The input format is as follows: - The first line contains an integer `n`, the number of employees in the company (`1 ≤ n ≤ 10^5`). - The next `n-1` lines each contain two integers `u` and `v`, indicating a directed edge from `u` (the manager) to `v` (the employee) in the hierarchy (`1 ≤ u, v ≤ n`). - The following line contains an integer `m` (`1 ≤ m ≤ 100`), the number of employees participating in the project. - The next line contains `m` integers, listing the employee IDs of the participants. It is guaranteed that all the given employees exist in the hierarchy and that the hierarchy forms a valid tree. The output should be a single integer, the ID of the Lowest Common Manager for the given list of employees. Example: Input: ``` 9 1 2 1 3 2 4 2 5 3 6 3 7 5 8 5 9 4 8 9 6 7 ``` Output: ``` 1 ``` Explanation: The Lowest Common Manager of employees 8, 9, 6, and 7 is the CEO (node 1) who is the root of the hierarchy, as all paths from 8, 9, 6, and 7 ultimately lead up to the CEO.","solution":"class TreeNode: def __init__(self, id): self.id = id self.children = [] def build_tree(edges, n): nodes = {i: TreeNode(i) for i in range(1, n + 1)} for u, v in edges: nodes[u].children.append(nodes[v]) return nodes def dfs(node, depth, parent, depths, parents): depths[node.id] = depth parents[node.id] = parent for child in node.children: dfs(child, depth + 1, node.id, depths, parents) def preprocess_lca_tree(root, n): depths = [0] * (n + 1) parents = [0] * (n + 1) dfs(root, 0, -1, depths, parents) return depths, parents def find_lca(u, v, depths, parents): if depths[u] < depths[v]: u, v = v, u while depths[u] > depths[v]: u = parents[u] while u != v: u, v = parents[u], parents[v] return u def lowest_common_manager(n, edges, m, project_employees): nodes = build_tree(edges, n) root = nodes[1] depths, parents = preprocess_lca_tree(root, n) lca = project_employees[0] for employee in project_employees[1:]: lca = find_lca(lca, employee, depths, parents) return lca"},{"question":"The game \\"Word Chain\\" is played as follows: Given a list of words, the goal is to form a chain where each word starts with the last letter of the previous word. For example, if the list contains the words [\\"apple\\", \\"elephant\\", \\"tail\\", \\"dog\\"], a possible chain is [\\"apple\\", \\"elephant\\", \\"tail\\"], because \\"elephant\\" starts with \\"e\\", which is the last letter of \\"apple\\", and \\"tail\\" starts with \\"t\\", which is the last letter of \\"elephant\\". Note that \\"dog\\" cannot be included in this chain, because there is no word in the list that starts with \\"g\\". Given a list of words, determine the length of the longest possible word chain that can be formed. Input: The first line of input contains an integer n (1 le n le 1000), the number of words in the list. Each of the next n lines contains a single word. Each word consists of only lowercase Latin letters and has a length between 1 and 50 inclusive. Output: Output a single integer, the length of the longest possible word chain. Example: Input: 4 apple elephant tail dog Output: 3 Explanation: One valid word chain with the maximum length is [\\"apple\\", \\"elephant\\", \\"tail\\"].","solution":"def longest_word_chain(words): from collections import defaultdict # Create a dictionary to hold the longest chain ending with each word\'s last letter chains = defaultdict(int) # Sort words to process in lexicographical order words.sort() # Function to get the last letter of a word def last_letter(word): return word[-1] # Function to get the first letter of a word def first_letter(word): return word[0] # Iterate through each word and calculate the longest chain ending with the word\'s last letter for word in words: first = first_letter(word) last = last_letter(word) longest_chain_end_at_word = 1 # Check if there\'s a chain that can be extended by this word for key in chains: if key == first: longest_chain_end_at_word = max(longest_chain_end_at_word, chains[key] + 1) # Update the chain length for the last character of this word chains[last] = max(chains[last], longest_chain_end_at_word) # Return the maximum value from chains return max(chains.values(), default=1)"},{"question":"A car sharing service is planning to place cars at various points in the city to ensure optimal coverage. The city is divided into a grid with n rows and m columns. Each cell in the grid is either empty or contains a parking lot, represented by 0 or 1 respectively. You are given the grid and you need to find the minimum distance any person from an empty cell will need to walk to reach a parking lot. Distance is defined as the number of cells walked either vertically or horizontally (not diagonally). The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid respectively. Each of the next n lines contains m integers (each either 0 or 1) representing the grid. Output a single integer — the maximal minimum distance to the nearest parking lot. Consider sample inputs for clarity: Sample Input 1: ``` 3 3 0 1 0 0 0 0 0 0 1 ``` Sample Output 1: ``` 2 ``` Sample Input 2: ``` 2 2 0 0 0 1 ``` Sample Output 2: ``` 2 ``` Explanation: - For the first sample, the person from the middle of the bottom row has to walk two cells to reach the nearest parking lot. - For the second sample, the person in the top-left corner has to walk two cells to reach the nearest parking lot. Your task is to implement an efficient algorithm to compute the desired result.","solution":"from collections import deque def maximal_min_distance(n, m, grid): # Initialize the distance grid with infinity distance = [[float(\'inf\')] * m for _ in range(n)] q = deque() # Enqueue all parking lots positions and set their distances to 0 for i in range(n): for j in range(m): if grid[i][j] == 1: q.append((i, j)) distance[i][j] = 0 # Directions for the four possible moves (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Perform BFS to find the minimum distance from each cell to any parking lot while q: x, y = q.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and distance[nx][ny] == float(\'inf\'): distance[nx][ny] = distance[x][y] + 1 q.append((nx, ny)) # The maximal minimum distance max_min_distance = 0 for i in range(n): for j in range(m): if grid[i][j] == 0: # Only consider cells without parking lots max_min_distance = max(max_min_distance, distance[i][j]) return max_min_distance"},{"question":"You are given an undirected graph with `n` nodes labeled `1` to `n` and `m` edges. The graph is represented as a list of edges where each edge is a pair of nodes `(u, v)` indicating that there is an edge between nodes `u` and `v`. You can perform the following operation on the graph: select a node and remove it along with all edges connected to it. Write a program to determine the minimum number of nodes that need to be removed such that the remaining graph becomes a forest (a collection of trees, where each tree is an acyclic connected component). Input: - The first line contains two integers `n` and `m` `(1 ≤ n, m ≤ 10^5)` — the number of nodes and the number of edges in the graph respectively. - The following `m` lines each contain two integers `u` and `v` `(1 ≤ u, v ≤ n)` — the nodes connected by an edge. Output: - Print one integer — the minimum number of nodes that need to be removed to transform the graph into a forest. Example: ``` Input: 6 6 1 2 2 3 3 4 4 5 5 6 2 5 Output: 1 ``` (Note: In this example, removing node `2` will break the cycle and the remaining graph will be a forest.)","solution":"def min_nodes_to_remove_to_make_forest(n, m, edges): from collections import defaultdict, deque # Build the adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def is_cyclic(node, parent): visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: if is_cyclic(neighbor, node): return True elif neighbor != parent: return True return False # Count the number of nodes in connected components def bfs(start): queue = deque([start]) size = 0 while queue: node = queue.popleft() size += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return size cycles_count = 0 for node in range(1, n + 1): if not visited[node]: if is_cyclic(node, -1): cycles_count += 1 return cycles_count"},{"question":"In a small town, there is an annual event called \\"The Treasure Hunt\\". Participants are given a map represented by a 2D grid of cells, where each cell can either be open (\'.\') or contain an obstacle (\'#\'). The goal is to move from the top-left corner of the map (grid[0][0]) to the bottom-right corner (grid[n-1][m-1]) using the shortest path possible. The movement is restricted to adjacent cells in the four cardinal directions: up, down, left, and right. Given the map, help the participants determine the length of the shortest path from the starting cell to the treasure. If there is no possible path, return -1. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100) – the dimensions of the grid. - The next n lines contain m characters each, representing the grid. The characters are either \'.\' or \'#\'. # Output - Print a single integer – the length of the shortest path from the top-left corner to the bottom-right corner. If such a path does not exist, print -1. # Example Input 1 ``` 5 5 ..... .#. .#... . ..... ``` Output 1 ``` 9 ``` Input 2 ``` 3 3 .#. #.# ..# ``` Output 2 ``` -1 ```","solution":"from collections import deque def shortest_path(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given an undirected graph with n vertices and m edges, where each vertex has a weight. Your task is to find the weight sum of the vertices that form the minimum spanning tree (MST) of the graph. The first line of the input contains two integers, n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10^4), representing the number of vertices and the number of edges, respectively. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000), where wi is the weight of the i-th vertex. The next m lines each contain three integers, u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 10^4), representing an edge between vertices u and v with a cost c. Print the minimum weight sum of the vertices that form the MST. If no MST exists, print `-1`. Example: Input: ``` 4 5 1 2 3 4 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 ``` Output: ``` 6 ``` Explanation: In the given graph, the MST can be formed by selecting the edges (1, 2), (2, 3), and (3, 4), which form the MST with the vertex weights sum 1+2+3=6. Note that although the total edge cost could be minimized in other ways, the vertex weight sum is what determines the MST.","solution":"import heapq def prims_min_vertex_weight_sum(n, m, weights, edges): if n == 1: return weights[0] adj_list = {i: [] for i in range(n)} for u, v, c in edges: adj_list[u-1].append((c, v-1)) adj_list[v-1].append((c, u-1)) visited = [False] * n min_heap = [(0, 0)] total_weight_sum = 0 vertices_count = 0 while min_heap: cost, current_vertex = heapq.heappop(min_heap) if visited[current_vertex]: continue visited[current_vertex] = True total_weight_sum += weights[current_vertex] vertices_count += 1 for edge_cost, neighbor in adj_list[current_vertex]: if not visited[neighbor]: heapq.heappush(min_heap, (edge_cost, neighbor)) if vertices_count == n: return total_weight_sum else: return -1 def find_mst_vertex_weight_sum(n, m, weights, edges): return prims_min_vertex_weight_sum(n, m, weights, edges)"},{"question":"The Kingdom of Graphland consists of several cities connected by directed roads. Each road has a specific travel time associated with it. The king of Graphland, King Graffius, has recently developed an interest in understanding the shortest travel times between cities in his kingdom. Given the map of Graphland, help King Graffius determine the shortest travel time from a particular city `s` to various other cities. If there is no way to reach a city from `s`, the travel time should be considered infinite. The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of cities and the number of directed roads. Each of the next `m` lines contains three integers `u`, `v`, and `t` (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000) — representing a directed road from city `u` to city `v` with travel time `t`. Roads may connect a city to itself or have multiple roads between the same pair of cities. The last line contains an integer `s` (1 ≤ s ≤ n) — the city from which King Graffius wants to calculate the shortest travel times to all other cities. Print `n` lines. The `i`-th line should contain the shortest travel time from city `s` to city `i`. If city `i` is not reachable from city `s`, print \\"infinity\\". Example input: ``` 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 ``` Example output: ``` 0 2 3 9 6 ``` In this example, we compute the shortest travel times from city 1 to all other cities, with distance to city 1 being 0 (as the starting point), city 2 being 2, city 3 being 3, city 4 being 9, and city 5 being 6. If a city is unreachable, the output should be \\"infinity\\".","solution":"import heapq def dijkstra(n, roads, s): # Prepare graph using adjacency list graph = [[] for _ in range(n)] for u, v, t in roads: graph[u - 1].append((v - 1, t)) # Initialize distances and priority queue INF = float(\'inf\') distances = [INF] * n distances[s - 1] = 0 pq = [(0, s - 1)] heapq.heapify(pq) while pq: current_dist, u = heapq.heappop(pq) # If we get to a node with already larger distance in priority queue, skip it if current_dist > distances[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return [\\"infinity\\" if d == INF else d for d in distances] def calculate_shortest_paths(n, m, roads, s): return dijkstra(n, roads, s)"},{"question":"In a magical kingdom called Numerland, the ruler has decided to celebrate the kingdom\'s prosperity with a grand festival. The streets of Numerland form a straight line, and on this line, there are several houses represented as points with integer coordinates. Each house is decorated uniquely, with a certain number of magical lanterns. King Numerius decrees that he will light up the festival by choosing exactly one house, and all other houses will benefit from the glow of the lanterns if they fall within a certain range centered around the chosen house. The range is determined by a distance `d` which is the maximum distance from the chosen house within which the glow is effective. Your task is to determine for every house on the line how many houses (including itself) will benefit from the glow if it is chosen as the starting point of the glow. The input format is as follows: - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of houses. - The second line contains `n` integers `x1, x2, ..., xn` (0 ≤ xi ≤ 10^9) representing the coordinates of each house. - The third line contains an integer `d` (0 ≤ d ≤ 10^9), the distance within which the glow of the lanterns is effective. Output a single line with `n` integers where the `i-th` integer represents the number of houses that would benefit from the glow if the `i-th` house were chosen as the starting point. For example, if there are three houses located at points 2, 5, and 7, and the range `d` is 3: - If the house at point 2 is chosen, houses at points 2 and 5 will benefit. - If the house at point 5 is chosen, all three houses will benefit. - If the house at point 7 is chosen, houses at points 5 and 7 will benefit. In this example, the output will be: `2 3 2` Implement this functionality to determine the beneficiary counts efficiently.","solution":"def beneficiaries(n, coordinates, d): coordinates.sort() result = [] for i in range(n): count = 0 for j in range(n): if abs(coordinates[i] - coordinates[j]) <= d: count += 1 result.append(count) return result"},{"question":"You are given a binary tree with `n` nodes where each node has a unique integer value from 1 to `n`. Your task is to find the longest path in the tree where each node in the path has values in strictly increasing order. The longest path in the tree may not necessarily be from the root to a leaf. The first line of input contains a single integer `n` (1 ≤ `n` ≤ 1000) — the number of nodes in the tree. The second line contains `n` integers `v_1, v_2, ..., v_n` (1 ≤ `v_i` ≤ n) — representing the values of the nodes where `v_i` is the value of the i-th node. Each of the next `n-1` lines contains two integers `a` and `b` (1 ≤ `a`, `b` ≤ n, `a` ≠ `b`) — representing an edge between nodes `a` and `b`. Print a single integer — the length of the longest path in the tree where each node in the path has values in strictly increasing order. Example: Input: 5 1 2 3 4 5 1 2 1 3 3 4 3 5 Output: 3 In the given example, the longest path with values in strictly increasing order is 1-3-4 or 1-3-5, both with length 3.","solution":"def longest_increasing_path(n, values, edges): from collections import defaultdict, deque # Prepare adjacency list graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) def bfs(start_node): visited = set() q = deque([(start_node, values[start_node - 1])]) longest = 1 # Since every node by itself is a path of length 1 while q: node, current_value = q.popleft() visited.add(node) for neighbor in graph[node]: if neighbor not in visited and values[neighbor - 1] > current_value: q.append((neighbor, values[neighbor - 1])) longest = max(longest, 1 + bfs_length(neighbor, visited)) return longest def bfs_length(start_node, visited): max_length = 0 stack = [(start_node, values[start_node - 1], 1)] while stack: node, current_value, length = stack.pop() max_length = max(max_length, length) for neighbor in graph[node]: if neighbor not in visited and values[neighbor - 1] > current_value: stack.append((neighbor, values[neighbor - 1], length + 1)) return max_length max_path = 0 for node in range(1, n + 1): max_path = max(max_path, bfs(node)) return max_path # Example Usage: n = 5 values = [1, 2, 3, 4, 5] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] print(longest_increasing_path(n, values, edges)) # Should output 3"},{"question":"You are given an integer n. Your task is to determine if you can rearrange the digits of n such that the resultant number is a multiple of 60. A number is a multiple of 60 if: 1. It is a multiple of 5, which means it should end with 0 or 5. 2. It is a multiple of 12, which means the sum of its digits is a multiple of 3, and it is an even number. Given this, check if you can rearrange the digits of n to form a multiple of 60. Input: The only line contains a single integer n (1 <= n <= 10^9). Output: Print \\"YES\\" (without quotes) if it\'s possible to rearrange the digits of n to form a multiple of 60, otherwise print \\"NO\\". Example: Input: 120 Output: YES In the first example, you can rearrange 120 to form 120, which is a multiple of 60. In the second example, although 75 ends with a 5, it cannot be rearranged to meet the criteria of being a multiple of 12. Therefore, it is not possible to rearrange 75 to form a multiple of 60.","solution":"def is_multiple_of_60(n): Determines if the digits of n can be rearranged to form a multiple of 60. digits = list(map(int, str(n))) # Check if there is at least one zero if 0 not in digits: return \\"NO\\" # Check if the sum of digits is a multiple of 3 if sum(digits) % 3 != 0: return \\"NO\\" # Check if there is any even digit (excluding the zero we already checked) if any(d % 2 == 0 for d in digits if d != 0): return \\"YES\\" return \\"NO\\""},{"question":"Spaceman Sam needs to navigate a grid in outer space full of dangerous obstacles. The grid is represented by an n x m matrix (1 ≤ n, m ≤ 1000), where some cells contain obstacles (represented by 1) and other cells are free (represented by 0). Sam starts at the top-left corner of the grid (1,1) and needs to get to the bottom-right corner (n,m). Sam can move to an adjacent cell that is either directly up, down, left, or right of his current position, but he cannot move diagonally. He must avoid cells with obstacles but can pass through free cells. Sam has also found a powerful booster that allows him to move up to k consecutive cells in one direction without stopping (1 ≤ k ≤ 10). The booster can only be used once during the journey. Determine the minimum number of moves Sam needs to reach his destination. If it is not possible for Sam to reach the bottom-right corner, print -1. The first line of input contains three integers n, m, and k. The following n lines each contain m integers, representing the grid: 0s and 1s. Output a single integer, the minimum number of moves to reach the bottom-right corner using the booster optimally, or -1 if it is not possible. Example: Input: 5 5 2 0 0 0 1 0 1 0 0 1 0 0 0 1 0 0 1 0 1 0 1 0 0 0 0 0 Output: 7","solution":"from collections import deque def min_moves(n, m, k, grid): if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 0, 0)]) # (x, y, moves, used_booster) visited = set([(0, 0, 0)]) # (x, y, used_booster) while queue: x, y, moves, used_booster = queue.popleft() if x == n-1 and y == m-1: return moves for dx, dy in directions: for step in range(1, (k if not used_booster else 1) + 1): nx, ny = x + dx*step, y + dy*step if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0: new_booster = used_booster or step > 1 if (nx, ny, new_booster) not in visited: visited.add((nx, ny, new_booster)) queue.append((nx, ny, moves + 1, new_booster)) else: break return -1"},{"question":"Zara has a sequence of n integers, and she wants to find the longest subarray where the absolute difference between the maximum and the minimum elements is less than or equal to a given integer d. The sequence may contain negative integers as well. Given the sequence and the integer d, help Zara determine the length of this longest subarray. The first line of the input contains two integers n and d (1 ≤ n ≤ 10^5, 0 ≤ d ≤ 10^9), where n is the number of elements in the sequence and d is the maximum allowed difference. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), the elements of the sequence. Output the length of the longest subarray satisfying the condition. # Example: Input: 7 3 1 3 2 4 7 1 5 Output: 4 Explanation: One of the longest subarrays with a difference ≤ 3 is [1, 3, 2, 4]. # Note: If the input array is [1, 5, 2, 4], d is 2, the longest subarrays satisfying the condition are [5, 2, 4] or [2, 4] and the output should be 2.","solution":"def longest_subarray_with_diff(sequence, d): This function takes a sequence of integers and a maximum difference d, and returns the length of the longest subarray where the absolute difference between the maximum and minimum elements is less than or equal to d. from collections import deque max_length = 0 # To store the length of the longest subarray found min_deque = deque() # To store potential minimums max_deque = deque() # To store potential maximums left = 0 # Left index of the subarray for right in range(len(sequence)): # Maintain deques for min and max while min_deque and sequence[min_deque[-1]] >= sequence[right]: min_deque.pop() while max_deque and sequence[max_deque[-1]] <= sequence[right]: max_deque.pop() min_deque.append(right) max_deque.append(right) # If the current subarray does not satisfy the condition, adjust the left pointer while sequence[max_deque[0]] - sequence[min_deque[0]] > d: left += 1 if min_deque[0] < left: min_deque.popleft() if max_deque[0] < left: max_deque.popleft() # Update the maximum length found max_length = max(max_length, right - left + 1) return max_length"},{"question":"The little girl loves playing with bricks. She has a stack of n bricks, each with a unique height. She can rearrange the bricks in any order, and she wants to build the highest possible stack under certain constraints. She needs to answer q Queries. Each query consists of two integers l and r (1 ≤ l ≤ r ≤ n), which represent the positions of bricks in the stack. A valid stack of bricks for a query should only include the bricks from position l to r in the rearranged stack. For each query, she wants to know the height of the highest possible stack that can be built using the bricks from position l to r such that any brick placed on top of another brick in the stack must have a strictly greater height. Given the initial heights of the n bricks and q queries, determine the maximum stack height for each query. The first line of the input contains two integers n (1 ≤ n ≤ 2×10^5) and q (1 ≤ q ≤ 2×10^5). The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 2×10^5), representing the heights of the bricks. Each of the next q lines contains two space-separated integers l and r (1 ≤ l ≤ r ≤ n), representing a query. Print q lines. Each line should contain a single integer, the height of the highest possible stack for the corresponding query. # Example Input ``` 5 3 4 2 3 1 5 1 3 2 5 1 5 ``` Output ``` 9 10 15 ``` # Explanation For the first query, we can rearrange the heights [4, 2, 3] to get the stack [2, 3, 4] with a total height of 2+3+4=9. For the second query, we can rearrange the heights [2, 3, 1, 5] to get the stack [1, 2, 3, 5] with a total height of 1+2+3+5=11. For the third query, we can rearrange the heights [4, 2, 3, 1, 5] to get the stack [1, 2, 3, 4, 5] with a total height of 1+2+3+4+5=15.","solution":"def max_stack_height(heights, queries): Determines the maximum stack height for each query under the given constraints. results = [] for l, r in queries: # Slice the list to get the subarray corresponding to the query range subarray = heights[l-1:r] # Sort the subarray subarray.sort() # Calculate the height of the stack which is the sum of the sorted subarray max_height = sum(subarray) # Add the result for this query to results list results.append(max_height) return results"},{"question":"You work for a company that provides internet services to several cities. To improve the infrastructure, they want to optimize their deployment of the internet cable lines between cities. Each cable line connects two distinct cities and has an associated cost. Given the existing network connections and their costs, you need to determine the minimum cost required to connect all the cities such that every city is reachable from any other city. # Input: - The first line contains two integers ( n ) and ( m ) (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100,000) – the number of cities and the number of cable lines respectively. - Each of the next ( m ) lines contains three integers ( u ), ( v ), and ( w ) (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) – indicating there is a cable line between city ( u ) and city ( v ) with cost ( w ). # Output: - Print a single integer representing the minimum cost required to connect all cities. If it is impossible to connect all cities, print \\"-1\\". # Example: Input: ``` 4 5 1 2 3 2 3 1 3 4 4 4 1 2 1 3 5 ``` Output: ``` 6 ``` # Note: In this example, the minimum cost to connect all cities making every city reachable from any other city is 6. The optimal connections are {(1, 2), (2, 3), (4, 1)} leading to total cost 6.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minCostToConnectCities(n, m, connections): edges = sorted(connections, key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_cost = 0 num_edges = 0 for edge in edges: u, v, w = edge u -= 1 v -= 1 uroot = find(parent, u) vroot = find(parent, v) if uroot != vroot: mst_cost += w num_edges += 1 union(parent, rank, uroot, vroot) if num_edges == n - 1: return mst_cost return -1 if num_edges != n - 1 else mst_cost"},{"question":"Jasmine has an array of integers containing `n` elements and needs your help to rearrange the elements. Jasmine likes her array to be rearranged in such a way that the difference between any two consecutive elements is minimized. Specifically, she wants the rearranged array to have the smallest possible sum of absolute differences between consecutive elements. Write a program that takes an array of `n` integers and rearranges it as Jasmine prefers. The first line of input contains an integer `n` (2 ≤ n ≤ 100), indicating the number of elements in the array. The second line contains `n` integers, the elements of the array (each element in the array is between 1 and 100). Print the rearranged array that minimizes the sum of absolute differences between consecutive elements. **Example:** **Input:** ``` 5 10 1 8 4 7 ``` **Output:** ``` 1 4 7 8 10 ``` **Explanation:** By sorting the array, the sum of absolute differences between consecutive elements is minimized.","solution":"def rearrange_array(n, arr): Rearranges the array such that the sum of absolute differences between consecutive elements is minimized. return sorted(arr)"},{"question":"You are given a binary tree with `n` nodes, each having a unique value from 1 to `n`. You need to find the number of paths in the tree that have exactly `k` nodes. A path in a binary tree is a sequence of nodes such that each pair of consecutive nodes in the sequence is connected by an edge in the tree. The first line of the input contains two integers `n` (1 ≤ `n` ≤ 1000) and `k` (1 ≤ `k` ≤ `n`), separated by a space. Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ `u`, `v` ≤ `n`), indicating that there is an edge between nodes `u` and `v` in the tree. Print a single integer, the number of paths in the tree that contain exactly `k` nodes. # Example Input ``` 5 2 1 2 1 3 3 4 3 5 ``` Output ``` 4 ``` Explanation The paths of length 2 are as follows: `1-2`, `1-3`, `3-4`, and `3-5`. Hence, the answer is 4.","solution":"def count_k_node_paths(n, k, edges): from collections import defaultdict, deque # Build the adjacency list for the tree graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs_count_paths(start, k): queue = deque([(start, 0, -1)]) # (current node, current length of path, parent node) count = 0 while queue: node, length, parent = queue.popleft() if length == k - 1: count += 1 elif length < k - 1: for neighbor in graph[node]: if neighbor != parent: queue.append((neighbor, length + 1, node)) return count total_paths = 0 for node in range(1, n + 1): total_paths += bfs_count_paths(node, k) # Each path is counted twice, so divide by 2 return total_paths // 2 # Input processing def read_input(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) k = int(data[1]) edges = [] for i in range(2, len(data), 2): u = int(data[i]) v = int(data[i + 1]) edges.append((u, v)) return n, k, edges if __name__ == \\"__main__\\": n, k, edges = read_input() print(count_k_node_paths(n, k, edges))"},{"question":"A family of frogs lives on a set of lily pads in a pond. The lily pads are arranged linearly and numbered from 1 to n. Each lily pad can either have one or more frogs or be empty. Frogs can only jump to adjacent lily pads. Due to the crowded nature of the pond, only a certain number of frogs can occupy a single lily pad at any given time. You are given the initial number of frogs on each lily pad. In addition, you will be given a number of constraints that specify the maximum number of frogs that can be on specific lily pads. Your task is to determine if it is possible to rearrange the frogs such that no lily pad has more frogs than its specified maximum. Rearrangement is only allowed through jumps to adjacent lily pads. The first line of input contains an integer n (1 ≤ n ≤ 100), representing the number of lily pads. The second line contains n integers f_i (0 ≤ f_i ≤ 200), representing the initial number of frogs on the i-th lily pad. The third line contains n integers m_i (0 ≤ m_i ≤ 200), representing the maximum number of frogs that can be on the i-th lily pad. If it is possible to rearrange the frogs to meet all constraints, print \\"Possible\\". Otherwise, print \\"Impossible\\". Example: Input: 5 1 2 3 2 1 2 2 2 2 2 Output: Impossible","solution":"def can_rearrange_frogs(n, initial_frogs, max_frogs): for i in range(n): if initial_frogs[i] > max_frogs[i]: if i > 0 and initial_frogs[i-1] < max_frogs[i-1]: # Check left transfer = min(initial_frogs[i] - max_frogs[i], max_frogs[i-1] - initial_frogs[i-1]) initial_frogs[i] -= transfer initial_frogs[i-1] += transfer if i < n-1 and initial_frogs[i] > max_frogs[i]: # Check right transfer = min(initial_frogs[i] - max_frogs[i], max_frogs[i+1] - initial_frogs[i+1]) initial_frogs[i] -= transfer initial_frogs[i+1] += transfer return \\"Possible\\" if all(initial_frogs[i] <= max_frogs[i] for i in range(n)) else \\"Impossible\\" # Example Usage n = 5 initial_frogs = [1, 2, 3, 2, 1] max_frogs = [2, 2, 2, 2, 2] print(can_rearrange_frogs(n, initial_frogs, max_frogs)) # Output: Impossible"},{"question":"You are given an array of integers of length n, where each integer a_i (1 leq a_i leq 10^6). You need to find the length of the longest increasing subsequence that you can achieve by removing some elements from the array (possibly zero). An increasing subsequence is a subsequence of an array where the elements are in strictly increasing order. The first line contains an integer n (1 leq n leq 2 cdot 10^5), the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6), the elements of the array. Print a single integer, the length of the longest increasing subsequence. **Examples:** Input: ``` 6 10 20 10 30 20 50 ``` Output: ``` 4 ``` Input: ``` 5 5 4 3 2 1 ``` Output: ``` 1 ``` Input: ``` 8 1 5 2 3 4 8 6 7 ``` Output: ``` 6 ```","solution":"from bisect import bisect_left def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 # LIS array to store the smallest end elements of the increasing subsequences of different lengths lis = [] for num in arr: # Find the position where this element can be inserted pos = bisect_left(lis, num) if pos == len(lis): # If num is greater than all elements in lis lis.append(num) else: # If there exists some elements in lis which are greater or equal than num, replace the first such element lis[pos] = num return len(lis)"},{"question":"A group of space explorers has found an ancient alien artifact which contains encrypted messages. They have discovered that each message can be represented as a matrix of characters, and to decode it, they must perform a series of transformations on the matrix. One key transformation involves rotating the matrix anti-clockwise by 90 degrees. Given a matrix of characters, your task is to write a program that rotates the matrix anti-clockwise by 90 degrees and prints the resulting matrix. # Input: The first line contains two integers n and m (1 ≤ n, m ≤ 100) – the dimensions of the matrix. Each of the next n lines contains m characters without spaces – the input matrix. # Output: Print the resulting matrix after rotating it anti-clockwise by 90 degrees. # Example: Input: ``` 3 4 abcd efgh ijkl ``` Output: ``` dhl cgk bfj aei ``` In this example, the input matrix is rotated anti-clockwise by 90 degrees. The last column of the input matrix becomes the first row of the output matrix, the second last column of the input matrix becomes the second row of the output matrix and so on.","solution":"def rotate_matrix_anticlockwise_90(matrix): Rotates the given matrix anti-clockwise by 90 degrees. :param matrix: List of strings (list of rows of the matrix) :return: Rotated matrix as a list of strings if not matrix: return [] n = len(matrix) m = len(matrix[0]) rotated_matrix = [] for col in range(m-1, -1, -1): new_row = \\"\\" for row in range(n): new_row += matrix[row][col] rotated_matrix.append(new_row) return rotated_matrix # Reading input def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) matrix = [] for i in range(n): matrix.append(data[2 + i]) return matrix def main(): matrix = read_input() rotated = rotate_matrix_anticlockwise_90(matrix) for row in rotated: print(row)"},{"question":"You are given a string s containing lowercase English letters. You need to find the number of palindromic substrings within this string. A substring is considered palindromic if it reads the same forward and backward. For example, for the string \\"abccba\\" the palindromic substrings are: \\"a\\", \\"b\\", \\"c\\", \\"cc\\", \\"bcb\\", \\"abba\\", \\"bccb\\", \\"cbabc\\", and \\"abccba\\". The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the following t lines contains a string s (1 le |s| le 1000). For each test case, output a single integer — the number of palindromic substrings in the string. Example: ``` Input 3 abc aaa racecar Output 3 6 10 ```","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. n = len(s) count = 0 for center in range(2 * n - 1): left = center // 2 right = left + center % 2 while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 return count def process_test_cases(test_cases): Processes a list of test cases and returns a list of integer results. results = [] for s in test_cases: results.append(count_palindromic_substrings(s)) return results"},{"question":"Max, the park manager, is responsible for designing a beautiful garden. He plans to organize the garden by placing flowers in an n x m grid. He wants to ensure that no two adjacent flowers (flowers sharing a side) belong to the same variety. There are k different varieties of flowers available. He needs your help to generate a valid garden design for the garden grid. Construct a garden grid that satisfies Max\'s requirements. The first line of input contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 1000). For this task, it is guaranteed that the solution always exists. Output n lines, each containing m integers, representing the garden grid. The integer in the j-th column of the i-th row is the variety of the flower at position (i, j). The varieties should be numbered from 1 to k. Ensure that no two adjacent cells contain the same variety of flower. If multiple solutions exist, print any of them. Example: Input: 3 4 4 Output: 1 2 3 4 2 1 4 3 3 4 1 2","solution":"def generate_garden_grid(n, m, k): Generate a garden grid with n rows and m columns where no two adjacent (sharing a side) cells have the same variety of flower. The number of varieties available is k. :param n: Number of rows in the garden :param m: Number of columns in the garden :param k: Number of available flower varieties :return: A 2D list representing the garden grid garden = [[0]*m for _ in range(n)] # Populate the grid with flower varieties while ensuring no two adjacent cells are the same for i in range(n): for j in range(m): garden[i][j] = (i + j) % k + 1 return garden"},{"question":"Alicia loves exploring different ecosystems and studying the variety of plants, insects, and animals that inhabit them. One day, she stumbled upon an unusual forest with a distinct layout. The forest can be represented as a grid of cells with n rows and m columns. Some of these cells contain impassable terrain that Alicia cannot cross. In each cell, there is a distinct species of plant or insect, represented by a unique integer. Alicia wants to study the possible pathways through the forest to collect samples of different species. Although the terrain may be impassable in some areas, Alicia can only move horizontally or vertically from one cell to an adjacent cell. Given the uniqueness of the species and Alicia\'s starting position, she wants to determine how many distinct species she can collect by moving through the forest without crossing impassable terrain. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) – the number of rows and columns in the grid. The second line contains two integers x and y (0 ≤ x < n, 0 ≤ y < m) – the starting position of Alicia in the forest. Each of the next n lines contains m integers representing the species in each cell. A value of -1 represents impassable terrain. Your task is to determine the number of distinct species Alicia can collect starting from the given position and moving through the forest, avoiding any impassable cells. Print a single integer representing the number of distinct species Alicia can collect. **Example Input:** ``` 4 4 0 0 1 2 3 4 5 -1 6 7 8 9 10 11 12 13 14 15 ``` **Example Output:** ``` 16 ``` In this example, Alicia can move through all cells except the one with impassable terrain, collecting all species. систем англо.","solution":"def collect_species(n, m, start_x, start_y, forest): Determine the number of distinct species Alicia can collect starting from (start_x, start_y). :param n: Number of rows in the grid :param m: Number of columns in the grid :param start_x: Starting row index :param start_y: Starting column index :param forest: Grid represented as a list of lists with species in each cell and -1 for impassable terrain :return: Number of distinct species Alicia can collect def dfs(x, y): if (x < 0 or x >= n or y < 0 or y >= m or (x, y) in visited or forest[x][y] == -1): return visited.add((x, y)) species.add(forest[x][y]) for dx, dy in directions: dfs(x + dx, y + dy) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() species = set() dfs(start_x, start_y) return len(species)"},{"question":"You are given a grid of size n times m consisting of binary values. The grid represents a maze where 0s denote open paths and 1s denote walls. Your task is to find the shortest path from the top-left corner (1,1) to the bottom-right corner (n,m) moving only up, down, left, or right. If there is no valid path, return -1. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next n lines contain m binary digits where each digit is either 0 (open path) or 1 (wall). Output a single integer representing the length of the shortest path from the top-left corner to the bottom-right corner. If there is no valid path, output -1. Example: Input: 3 3 0 1 0 0 0 0 1 1 0 Output: 5 Explanation: The shortest path is: (1,1) -> (2,1) -> (2,2) -> (2,3) -> (3,3) Note: Pathfinding should consider only vertical and horizontal moves, no diagonals are allowed.","solution":"from collections import deque def shortest_path(maze, n, m): if maze[0][0] == 1 or maze[n-1][m-1] == 1: return -1 moves = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == n - 1 and y == m - 1: return dist for move in moves: nx, ny = x + move[0], y + move[1] if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and maze[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1 def solve_maze(n, m, maze_data): maze = [list(map(int, row.split())) for row in maze_data] return shortest_path(maze, n, m)"},{"question":"A magical forest has a peculiar structure where there are N magical trees connected by N-1 magical paths. Each path has a specific \\"magic level\\" associated with it. The trees are numbered from 1 to N. Q queries will be asked about the forest. Each query consists of two integers u and v and you are to determine the maximum \\"magic level\\" on the path from tree u to tree v. Can you help the forest keepers by answering each query? # Input - The first line contains two integers N and Q (2 leq N leq 1000, 1 leq Q leq 1000) — the number of trees and the number of queries. - The next N-1 lines describe the magical paths. Each line contains three integers u, v, and l (1 leq u, v leq N, u neq v, 1 leq l leq 10^9) meaning that there is a magical path between trees u and v with a magic level l. - The next Q lines describe the queries. Each line contains two integers u and v (1 leq u, v leq N, u neq v). # Output For each query, output a single integer, which is the maximum magic level on the path from u to v. # Example Input ``` 5 2 1 2 3 2 3 4 2 4 6 4 5 9 1 5 3 5 ``` Output ``` 9 9 ```","solution":"from collections import defaultdict import heapq def build_adjacency_list(N, paths): adjacency_list = defaultdict(list) for u, v, l in paths: adjacency_list[u].append((v, l)) adjacency_list[v].append((u, l)) return adjacency_list def get_max_magic_level(u, v, adjacency_list): visited = [False] * (len(adjacency_list) + 1) max_heap = [(-0, u)] while max_heap: current_max, node = heapq.heappop(max_heap) current_max = -current_max if node == v: return current_max if not visited[node]: visited[node] = True for neighbor, magic_level in adjacency_list[node]: if not visited[neighbor]: heapq.heappush(max_heap, (-(max(current_max, magic_level)), neighbor)) def solve(N, Q, paths, queries): adjacency_list = build_adjacency_list(N, paths) results = [] for u, v in queries: results.append(get_max_magic_level(u, v, adjacency_list)) return results"},{"question":"You are given a grid with dimensions n x m. Each cell of the grid contains either a tree or is empty. You start at the top-left corner of the grid and need to reach the bottom-right corner. You can only move to adjacent cells (up, down, left, or right) without passing through any trees. Your task is to determine the minimum number of steps required to reach the bottom-right corner from the top-left corner. If it is not possible to reach the bottom-right corner, you should return -1. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. The next n lines each contain m characters, where each character is either \'.\' (an empty cell) or \'T\' (a tree). Output a single integer — the minimum number of steps required to reach the bottom-right corner from the top-left corner. If it is not possible to reach the bottom-right corner, output -1. Example: Input: 5 5 ..... .TTT. ..... .TTT. ..... Output: 8 Explanation: In the example, the grid is: ..... .TTT. ..... .TTT. ..... The shortest path to reach the bottom-right corner without passing through trees involves walking around the trees, which requires 8 steps.","solution":"from collections import deque def min_steps_to_reach_end(n, m, grid): Returns the minimum number of steps required to reach the bottom-right corner from the top-left corner or -1 if it\'s not possible. # Directions for moving (right, left, down, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Initialize BFS queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() # Check if we reached the end if row == n - 1 and col == m - 1: return steps # Explore neighbors for dr, dc in directions: new_row, new_col = row + dr, col + dc if (0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and grid[new_row][new_col] == \'.\'): visited.add((new_row, new_col)) queue.append((new_row, new_col, steps + 1)) # If the queue is empty and we haven\'t reached the end return -1 # Example Usage if __name__ == \\"__main__\\": n, m = 5, 5 grid = [ \\".....\\", \\".TTT.\\", \\".....\\", \\".TTT.\\", \\".....\\" ] print(min_steps_to_reach_end(n, m, grid)) # Output: 8"},{"question":"An international shipping company has a fleet of trucks. Each truck can travel a certain number of kilometers on a full tank of fuel. The company wants to determine the minimum number of trucks required to cover a specific route without running out of fuel. The company has an array of positive integers `fuel[]` where `fuel[i]` represents the maximum kilometers that the `i`-th truck can travel on a full tank. The sum of all distances the trucks can cover should be greater than or equal to `D`, the total distance of the route. Your task is to determine the minimum number of trucks needed to ensure the fleet can complete the route. Since the number of solutions can be very large, output the result modulo 1000000007 (10^9 + 7). The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of trucks. The second line contains n space-separated integers `fuel_i` (1 ≤ fuel_i ≤ 10^5), representing the kilometers each truck can travel on a full tank. The third line contains a single integer `D` (1 ≤ D ≤ 10^7), the total distance of the route. Print the minimum number of trucks needed to cover the distance. Example: Input: 5 10 20 30 40 50 60 Output: 2 Explanation: Two trucks can cover the distance of 60 kilometers. For example, the trucks with capacities 30 and 40 can cover the total distance together, making it 70 kilometers (30 + 40), which is greater than or equal to 60. Hence, the answer is 2.","solution":"def min_trucks_required(n, fuel, D): MOD = 1000000007 fuel.sort(reverse=True) # Sort trucks\' fuel capacities in descending order current_distance = 0 truck_count = 0 for f in fuel: current_distance += f truck_count += 1 if current_distance >= D: return truck_count % MOD return -1 # If the total distance covered by all trucks is still less than D"},{"question":"You are given an array of integers where each integer represents a different species of bird visiting a bird feeder. Each type of bird is represented by an integer, and the array records the order in which the birds visit. Your task is to determine which bird species is the most common visitor, i.e., the bird species that appears the most frequently in the array. If there are multiple species with the same highest frequency, return the smallest numerical species identifier of those species. For example, if the array is [1, 1, 2, 2, 3], both birds with species 1 and 2 appear twice, but since 1 is the smallest number, the output should be 1. Write a function `most_common_bird(arr)` that takes the array of integers and returns the integer representing the most common bird species. # Input - The first line contains an integer n (1 ≤ n ≤ 2 * 10^5), the number of birds. - The second line contains n integers representing the species of the birds visiting. # Output - Print a single integer, the bird species that is the most common visitor. # Example Input ``` 6 1 4 4 4 5 3 ``` Output ``` 4 ``` Input ``` 8 1 1 2 2 3 3 3 3 ``` Output ``` 3 ``` # Note In the first example, bird species 4 appears 3 times, which is more frequent than any other species. In the second example, bird species 3 appears 4 times, which is more frequent than any other species.","solution":"def most_common_bird(arr): Returns the bird species that is the most common visitor. If there are ties, returns the smallest species identifier. from collections import Counter bird_count = Counter(arr) most_common_bird, most_common_count = None, 0 for bird, count in bird_count.items(): if count > most_common_count or (count == most_common_count and bird < most_common_bird): most_common_bird = bird most_common_count = count return most_common_bird"},{"question":"In a small village, there is a peculiar tradition involving an ancient metal rod and a unique game. The rod is divided into `n` segments, and on each segment, two types of magical stones are placed: a \\"fire stone\\" represented by `F` and a \\"water stone\\" represented by `W`. Each segment contains at least one stone, and each stone has a magical power value. The challenge is to determine the maximum total power that can be obtained by selecting a subset of adjacent segments such that the sum of the absolute differences in the power values of the stones between consecutive segments in the selected subset is minimized. Each segment can either have both types of stones or just one type. If a segment contains both types of stones, the power value for the \\"fire stone\\" is `F_i` and for the \\"water stone\\" is `W_i`. If a segment contains only one type of stone, one of these values will be zero. You are given `t` test cases. For each test case, the first line contains an integer `n` (1 ≤ n ≤ 1000) - the number of segments. The second line contains `2n` integers, representing the power values of stones in each segment. Specifically, the first value is `F_1`, the second is `W_1`, the third is `F_2`, the fourth is `W_2`, and so on. Values can range from 0 to 1000. Output the maximum possible total power for each test case. **Example** **Input:** 2 3 7 4 10 0 4 5 4 5 0 0 3 7 4 10 2 **Output:** 16 19 **Explanation:** In the first test case: - Possible subsets of segments are [7 4], [10 0], and [4 5]. - The pair (7, 4) and (4, 5) does not have any consecutive segments sum, and their sum is 16. In the second test case: - Possible subsets are [5 0], [0 3], [7 4], and [10 2]. - The pair (5 0) and (7 4) provides the maximum sum of 19. Help the villagers determine the maximum possible total power they can obtain using the minimal differences strategy.","solution":"def max_total_power(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] stones = test_cases[i][1] # Separate fire and water stones fire_stones = stones[::2] water_stones = stones[1::2] # Calculate the total power by summing up all fire and water stones total_power = sum(fire_stones) + sum(water_stones) results.append(total_power) return results"},{"question":"Alice is planning a party and wants to invite n friends. She has a limited number of party invitations, each with a unique code. To avoid inviting the same friend more than once, she wants to generate a list of unique codes for her invitations. You are given a list of potential invitations with some codes that may be repeated. Your task is to ensure that the list of invitations contains only unique codes by making the minimum number of deletions. Additionally, Alice prefers the list to be in non-decreasing order after deletions. The first line contains a single integer n (1 ≤ n ≤ 3000) — the number of potential invitations. The second line contains n integers representing the codes on the potential invitations (1 ≤ code ≤ 10^9). Print the minimum number of deletions required to achieve a list of unique, non-decreasing invitation codes. For example, given the potential invitation codes: 5 3 8 5 3 7 5 8 After deletions, the list should be: 3 5 7 8 Thus, the minimum number of deletions required is 4. In another example, given the potential invitation codes: 7 1 5 5 3 5 1 3 After deletions, the list should be: 1 3 5 7 Thus, the minimum number of deletions required is 4.","solution":"def min_deletions_to_unique_sorted_codes(n, codes): Function to find the minimum number of deletions required to ensure the list of codes is unique and in non-decreasing order # Use a set to collect unique codes and sort them unique_sorted_codes = sorted(set(codes)) # The number of deletions required is the original list size minus the size of the unique sorted list deletions_required = n - len(unique_sorted_codes) return deletions_required"},{"question":"You are given an array of integers, and you need to find the minimum number of operations required to make all the elements in the array equal. In one operation, you can select a subarray and increment every element of that subarray by 1. The first line of input contains a single integer n (1 ≤ n ≤ 2 * 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output a single integer — the minimum number of operations required to make all elements of the array equal. In the first sample, the array has only one element, so it is already equal and no operations are necessary. In the second sample, you can select the whole array as the subarray and increment all elements by 1 in each operation until they are all equal.","solution":"def min_operations_to_equalize_array(arr): Returns the minimum number of operations required to make all elements in the array equal by incrementing subarrays. Parameters: arr (list of int): The input array of integers Returns: int: Minimum number of operations required max_val = max(arr) min_val = min(arr) return max_val - min_val"},{"question":"A renowned network security company has a set of servers arranged in a hierarchical manner. Every server except the root server has exactly one parent server that it communicates with directly. We can represent this hierarchy using a tree structure where nodes represent servers and edges represent direct communication links between parent and child servers. You are given this tree structure, and your task is to determine the lowest common ancestor (LCA) of any two given servers in the hierarchy. The LCA of two nodes u and v in a tree is defined as the deepest node that is an ancestor of both u and v. The first line contains an integer n (2 le n le 100000) — the number of servers. Each of the next n-1 lines contains two integers u and v (1 le u, v le n) denoting that there is an edge connecting server u to server v. It is guaranteed that the input represents a valid tree. Next line contains a single integer q (1 le q le 100000) — the number of queries. Each of the next q lines contains two integers u and v (1 le u, v le n) indicating the servers for which you should find the LCA. Print q lines, each containing the LCA of the corresponding pair of servers. Example: ``` Input: 7 1 2 1 3 2 4 2 5 3 6 3 7 3 4 5 4 6 3 6 Output: 2 1 3 ``` Explanation: - The LCA of 4 and 5 is 2 as it’s the nearest common ancestor. - The LCA of 4 and 6 is 1 as it’s the deepest shared ancestor. - The LCA of 3 and 6 is 3 as it’s the node itself, being an ancestor.","solution":"from collections import defaultdict import sys import math sys.setrecursionlimit(200000) class LCATree: def __init__(self, n): self.n = n self.adj = defaultdict(list) self.depth = [0] * (n + 1) self.lca = [[-1] * (int(math.log2(n)) + 1) for _ in range(n + 1)] def add_edge(self, u, v): self.adj[u].append(v) self.adj[v].append(u) def dfs(self, node, parent): self.lca[node][0] = parent for i in range(1, len(self.lca[node])): if self.lca[node][i - 1] == -1: break self.lca[node][i] = self.lca[self.lca[node][i - 1]][i - 1] for neighbor in self.adj[node]: if neighbor == parent: continue self.depth[neighbor] = self.depth[node] + 1 self.dfs(neighbor, node) def find_lca(self, u, v): if self.depth[u] < self.depth[v]: u, v = v, u diff = self.depth[u] - self.depth[v] for i in range(len(self.lca[u])): if (diff >> i) & 1: u = self.lca[u][i] if u == v: return u for i in range(len(self.lca[u]) - 1, -1, -1): if self.lca[u][i] != self.lca[v][i]: u = self.lca[u][i] v = self.lca[v][i] return self.lca[u][0] def process_lca(n, edges, queries): tree = LCATree(n) for u, v in edges: tree.add_edge(u, v) tree.dfs(1, -1) results = [] for u, v in queries: results.append(tree.find_lca(u, v)) return results"},{"question":"You are working on a project where you need to generate advertisement placements on a platform. To do this effectively, you need to ensure that certain constraints are met to maximize user engagement. You are given a sequence of integers representing the popularity scores of different content items on the platform. Your task is to select a contiguous subsequence of these items with an exact length of k that maximizes the sum of the popularity scores in that subsequence. If there are multiple subsequences with the same maximum sum, you should choose the one that appears first in the list. The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of content items and the exact length of the subsequence you need to select. The second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10^4) — the popularity scores of the content items. Print k integers — the popularity scores of the selected subsequence of length k that has the maximum possible sum. If there are multiple subsequences with the same sum, print the one that appears first. For example, consider a case where you have n = 6 and k = 3. The popularity scores are [1, 3, 2, 5, 1, 1]. The output should be \\"3 2 5\\" as the subsequence [3, 2, 5] has the maximum sum of 10. Example Input: 6 3 1 3 2 5 1 1 Example Output: 3 2 5 Another Example Input: 8 4 4 2 1 7 3 7 2 1 Example Output: 7 3 7 2","solution":"def max_sum_subsequence(n, k, popularity_scores): This function returns the contiguous subsequence of length k with the maximum sum. max_sum = float(\'-inf\') current_sum = sum(popularity_scores[:k]) max_sum = current_sum start_index = 0 for i in range(k, n): current_sum += popularity_scores[i] - popularity_scores[i - k] if current_sum > max_sum: max_sum = current_sum start_index = i - k + 1 return popularity_scores[start_index:start_index + k] # Example usage if __name__ == \\"__main__\\": n, k = 6, 3 popularity_scores = [1, 3, 2, 5, 1, 1] print(max_sum_subsequence(n, k, popularity_scores)) # Output: [3, 2, 5]"},{"question":"You are given an array of integers and an integer target sum. Your task is to find the length of the shortest subarray that has a sum greater than or equal to the target sum. If there\'s no such subarray, return 0. For example: Given the array: [2, 3, 1, 2, 4, 3] and target sum 7, the shortest subarray with a sum of at least 7 is [4, 3], so the length is 2. Input: - The first line contains two integers n and s (1 ≤ n ≤ 10^5, 1 ≤ s ≤ 10^9) representing the number of elements in the array and the target sum, respectively. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^5) representing the elements of the array. Output: - Print the length of the shortest subarray with a sum of at least s. If no such subarray exists, print 0. A sample input and output are as follows: Input: 8 15 1 2 3 4 5 6 7 8 Output: 2 In this example, the subarray [7, 8] has the minimum length with a sum of at least 15.","solution":"def shortest_subarray_with_sum_at_least_target(nums, target): from collections import deque n = len(nums) min_length = n + 1 current_sum = 0 left = 0 for right in range(n): current_sum += nums[right] while current_sum >= target: min_length = min(min_length, right - left + 1) current_sum -= nums[left] left += 1 return min_length if min_length <= n else 0"},{"question":"Pavel loves playing around with strings. He decided to invent a game where he has control over a string `s` of length `n`, comprised of lowercase English letters. In this game, Pavel wants to transform the string such that every character in the string becomes the same. However, Pavel can only perform a limited kind of operation: he can select any contiguous substring of the string and replace all its characters with any single character of his choice. Pavel wants to know the minimum number of operations required to transform the string `s` into a string where all characters are the same. Input: - The first line contains an integer `t` (1 ≤ t ≤ 10^5) — the number of test cases. - Each of the next `t` lines contains a non-empty string `s` of length `n` (1 ≤ n ≤ 100), consisting of lowercase English letters. Output: - For each test case, print a single integer — the minimum number of operations required to make the string `s` consist of the same character. Example: ``` Input: 4 abac aaaa abcde bbbbb Output: 2 0 5 0 ``` Explanation: - For the first test case \\"abac\\", Pavel can first change the first substring \\"aba\\" to \\"aaa\\" and then change the last character \\"c\\" to \\"a\\", resulting in \\"aaaa\\" using two operations. - For the second test case \\"aaaa\\", no operation is needed as all characters are already the same. - For the third test case \\"abcde\\", each character is unique, Pavel needs to change each character one by one, resulting in 5 operations. - For the fourth test case \\"bbbbb\\", no operation is needed as all characters are already the same.","solution":"def min_operations_to_uniform_string(test_cases): results = [] for s in test_cases: max_frequency = max([s.count(char) for char in set(s)]) min_operations = len(s) - max_frequency results.append(min_operations) return results"},{"question":"You are working on a new social media site, and as part of its analytic tools, you need to implement a functionality that detects trending hashtags. A trending hashtag is defined as a hashtag that has appeared the maximum number of times in a given list of posts. If there are multiple hashtags with the same maximum frequency, the lexicographically smallest one should be considered the trending hashtag. Given a list of strings representing social media posts, each containing one or more hashtags (strings that start with the \'#\' character), write a function that returns the trending hashtag. Input: - The first line contains an integer n (1 leq n leq 1000), the number of posts. - Each of the next n lines contains a string representing a post. Each post contains between 1 and 100 characters, and may contain one or more hashtags. Output: - Return a single string representing the trending hashtag. Example: Input: 5 Today is #sunny and #bright Going for a walk in this #bright weather #sunny mornings are the best Love this #sunny day Feeling so #bright Output: #bright Note: - In the example above, both \\"#sunny\\" and \\"#bright\\" appear 3 times, but \\"#bright\\" is lexicographically smaller than \\"#sunny\\". Hence, the trending hashtag is \\"#bright\\".","solution":"def trending_hashtag(n, posts): from collections import defaultdict hashtag_freq = defaultdict(int) for post in posts: words = post.split() for word in words: if word.startswith(\'#\'): hashtag_freq[word] += 1 max_frequency = max(hashtag_freq.values()) trending_hashtags = [tag for tag, freq in hashtag_freq.items() if freq == max_frequency] return min(trending_hashtags)"},{"question":"In a distant land, there is a magical garden. This garden is structured as a 2D grid with n rows and m columns. Each cell in the grid can either be a fertile soil cell or a rocky cell. You are a gardener, and your task is to plant flowers in the fertile soil cells. However, there is a catch: you can only plant flowers in paths starting from the top left corner (1, 1) to the bottom right corner (n, m). A valid path can only move right or down. Given the garden grid, count the number of valid paths from the top left to the bottom right corner that traverse only fertile soil cells. The paths should only move to the right or down at each step. The first line contains two integers, n and m (1 le n, m le 1000), representing the number of rows and columns in the grid, respectively. The next n lines each contain m characters, either \'.\' or \'#\'. The character \'.\' represents a fertile soil cell, and the character \'#\' represents a rocky cell. Print a single integer representing the number of valid paths from the top left to the bottom right corner. In the first example, the grid has a direct path from the top left to the bottom right. In the second example, the grid blocks any possibility of reaching the bottom right, so the number of valid paths is zero. Example input: ``` 3 3 ... .#. ... ``` Example output: ``` 2 ```","solution":"def count_paths(n, m, grid): Returns the number of valid paths from the top left to the bottom right corner that traverse only fertile soil cells. :param n: Number of rows :param m: Number of columns :param grid: 2D list of characters representing the garden grid if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 # Initialize a 2D DP array to store path counts dp = [[0 for _ in range(m)] for _ in range(n)] # Starting point dp[0][0] = 1 # Fill the DP table for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are manager at a logistics company, and you need to allocate delivery trucks to a set of orders. Each order is characterized by a weight and a deadline. You have a fleet of trucks, each truck has a weight limit and can only handle one order at a time. Your goal is to maximize the number of orders that are delivered on time. Specifically, you need to determine the maximum number of orders that can be delivered on time using the available trucks. The first line of input contains two integers, T (1 ≤ T ≤ 10^4) — the number of trucks, and O (1 ≤ O ≤ 10^4) — the number of orders. The next line contains T space-separated integers wi (1 ≤ wi ≤ 10^6) — the weight limits of the trucks. Each of the next O lines contains two space-separated integers di and li (1 ≤ di, li ≤ 10^6) — the weight of the order and the deadline by which it should be delivered. Output a single integer — the maximum number of orders that can be delivered on time. **Example Input:** ``` 3 4 10 15 20 5 10 10 20 15 30 20 25 ``` **Example Output:** ``` 3 ``` **Explanation:** In this example, the trucks with weight capacities 10, 15, and 20 can be used to deliver the orders weighing 5, 10, and 15 respectively within their respective deadlines. The order with weight 20 cannot be delivered as all trucks are already occupied with other orders. Thus, a maximum of 3 orders can be delivered on time.","solution":"def max_orders_on_time(trucks, orders): Determines the maximum number of orders that can be delivered on time using the available trucks. Parameters: trucks (list): List of weight limits of available trucks. orders (list): List of tuples where each tuple contains (order_weight, order_deadline). Returns: int: Maximum number of orders that can be delivered on time. # Sort trucks by their weight limit trucks.sort() # Sort orders primarily by deadline and secondarily by weight orders.sort(key=lambda x: (x[1], x[0])) delivered_orders = 0 used_trucks = [False] * len(trucks) for order_weight, order_deadline in orders: for i in range(len(trucks)): if not used_trucks[i] and trucks[i] >= order_weight: used_trucks[i] = True delivered_orders += 1 break return delivered_orders"},{"question":"A cybersecurity company named ZetaCorp has designed encryption software that transforms a string of lowercase letters. The encryption works in such a way that for a string of length n, the string is divided into k contiguous substrings, where 1 ≤ k ≤ n. Each of these k substrings is then shifted cyclically to the right by k positions. For example, if a substring is \\"abc\\" and k=2, it becomes \\"cab\\". Given the original string and the number of total shifts k, your task is to find the encrypted string. Assume the shift wraps around such that shifting beyond the length of different substrings continues from the start of the substring. The first line contains a single integer ( n ) (1 ≤ n ≤ 10^5) — the length of the string. The second line contains a string of length n consisting of lowercase English letters only. The third line contains a single integer ( k ) (1 ≤ k ≤ 10^5) — the total number of shifts. Output the resulting encrypted string after applying the cyclic shift to each of the k substrings of the input string. For example: Input: ``` 8 abcdefghijklmnopqrstuvwxyz 3 ``` Output: ``` cdefghijklmnopqrstuvwxyzab ``` In this example, the entire string is shifted cyclically to the right by 3 positions resulting in the encrypted string.","solution":"def encrypt_string(n, s, k): Encrypts the string s of length n by dividing it into k substrings and shifting each substring cyclically to the right by k positions. Parameters: n (int): The length of the string. s (str): The original string. k (int): The total number of shifts. Returns: str: The encrypted string. k = k % n # To handle cases where k is greater than n return s[-k:] + s[:-k]"},{"question":"Qasim is playing a game with his friend where they have an integer sequence, and their goal is to find the longest subsequence with alternating sum and difference properties. The alternating sum and difference property of a sequence means that for a subsequence of length `k`, the sum of its consecutive elements alternates between positive and negative as follows: `a1 - a2 + a3 - a4 + ... + (-1)^(k-1) * ak`. Given the integer sequence, your task is to find the length of the longest subsequence that satisfies this property. Input The input consists of multiple test cases. The first line contains an integer `t` (1 ≤ t ≤ 1000) — the number of test cases. Each test case begins with an integer `n` (1 ≤ n ≤ 100) — the length of the integer sequence, followed by `n` space-separated integers representing the sequence. Output For each test case, output one integer — the length of the longest subsequence with alternating sum and difference properties. Example Input: 2 5 1 2 3 4 5 6 1 -1 2 -2 3 -3 Output: 5 6 Explanation: In the first test case, the longest subsequence with alternating sum and difference properties is `[1, 2, 3, 4, 5]`. In the second test case, the longest subsequence with alternating sum and difference properties is `[1, -1, 2, -2, 3, -3]`.","solution":"def longest_alternating_subsequence(t, test_cases): results = [] for i in range(t): n, sequence = test_cases[i] length = len(sequence) if length == 1: results.append(1) continue # To find the longest alternating subsequence: longest_length = 1 # Minimum length is 1 (any single element) current_length = 1 # Length of currently considered subsequence for j in range(1, length): if (sequence[j] > 0 and sequence[j-1] < 0) or (sequence[j] < 0 and sequence[j-1] > 0): current_length += 1 else: if current_length > longest_length: longest_length = current_length current_length = 1 # Reset for a new subsequence if current_length > longest_length: longest_length = current_length results.append(longest_length) return results"},{"question":"You are given two integers n and m. Your task is to find the n-th smallest lexicographical permutation of numbers from 1 to m. A permutation of numbers from 1 to m is a sequence where each number from 1 to m appears exactly once in some order. The lexicographical order is the natural order of numbers\' arrangement, just like the order in a dictionary for words. For example, for m=3, the permutations in lexicographical order are: 1. [1, 2, 3] 2. [1, 3, 2] 3. [2, 1, 3] 4. [2, 3, 1] 5. [3, 1, 2] 6. [3, 2, 1] You need to find the n-th smallest permutation in this list for given m (with 1-based indexing). The first line of the input contains two space-separated integers n and m (1 ≤ m ≤ 9, 1 ≤ n ≤ m!). Output a single line containing the n-th smallest lexicographical permutation of numbers from 1 to m, separated by spaces. Example: Input: 3 3 Output: 2 1 3 Explanation: For m=3, the permutations in lexicographical order are: 1. [1, 2, 3] 2. [1, 3, 2] 3. [2, 1, 3] 4. [2, 3, 1] 5. [3, 1, 2] 6. [3, 2, 1] The 3rd smallest permutation is [2, 1, 3].","solution":"import itertools def nth_lexicographical_permutation(n, m): Returns the n-th (1-based) smallest lexicographical permutation of numbers from 1 to m. permutations = list(itertools.permutations(range(1, m+1))) permutations.sort() return permutations[n-1]"},{"question":"You are helping a team of archaeologists who are exploring the ruins of an ancient city. They have discovered a series of tunnels underneath the city, represented as a graph where each node is a chamber and each edge is a tunnel connecting two chambers. Some of the nodes have artifacts that the archaeologists want to collect, but there is a problem. The tunnels are in disrepair and can collapse at any moment, blocking the archaeologists\' path. The graph is represented by a list of edges, each connecting two chambers. Your task is to determine if it is possible to create a path between two given chambers such that all the chambers along the path contain at least one artifact. If such a path exists, return \\"YES\\", otherwise return \\"NO\\". Input: - The first line contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10000), representing the number of chambers and the number of tunnels, respectively. - The second line contains an integer k (0 ≤ k ≤ n), representing the number of chambers that contain artifacts. - The third line contains k integers, listing the indices of the chambers that contain artifacts. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing a tunnel between chamber u and chamber v. - The last line contains two integers s and t (1 ≤ s, t ≤ n), the starting and ending chambers. Output: - Output \\"YES\\" if there is a path from chamber s to chamber t such that all chambers along this path contain at least one artifact. Otherwise, output \\"NO\\". Example: Input: 6 7 3 1 2 5 1 2 1 3 2 4 2 5 3 4 4 5 4 6 1 5 Output: YES Explanation: There is a path 1 -> 2 -> 5, where all chambers (1, 2, and 5) contain artifacts.","solution":"def is_path_possible_with_artifacts(n, m, k, artifact_chambers, tunnels, s, t): from collections import defaultdict, deque artifact_set = set(artifact_chambers) if s not in artifact_set or t not in artifact_set: return \\"NO\\" # Build the graph graph = defaultdict(list) for u, v in tunnels: graph[u].append(v) graph[v].append(u) # BFS to find if there is a path from s to t with all chambers containing artifacts queue = deque([s]) visited = set() while queue: current = queue.popleft() if current == t: return \\"YES\\" for neighbor in graph[current]: if neighbor not in visited and neighbor in artifact_set: visited.add(neighbor) queue.append(neighbor) return \\"NO\\""},{"question":"In Farland, each city is represented as a node in a graph. Roads connect the cities, and each road has a time cost associated with it. The roads allow travel between any two cities in both directions. The ruler of Farland has a peculiar interest in finding the shortest round-trip path for a courier starting from a specific city, visiting one distinct city and returning back to the starting city. You are tasked with determining the minimum round-trip travel time from a given starting city to a specified destination city and back to the starting city. Consider the graph to be connected, meaning there is always at least one path between any pair of cities. The first input line contains two integers n (2 ≤ n ≤ 200) and m (1 ≤ m ≤ 500) — the number of cities and the number of roads, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 1000) — indicating that there is a road between city u and city v with a travel time of w. The last line contains two integers s and d (1 ≤ s, d ≤ n; s ≠ d) — the starting city and the destination city. Your task is to calculate and output the minimum round-trip travel time from city s to city d and back to city s. If no such path exists, output -1 instead. Input: ``` 5 6 1 2 10 2 3 10 3 4 10 4 5 10 5 1 10 1 3 15 1 4 ``` Output: ``` 40 ```","solution":"import heapq def dijkstra(graph, start, n): Executes the Dijkstra algorithm to find the shortest paths from the start node. Returns the distances array. distances = [float(\\"inf\\")] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_round_trip(n, m, roads, s, d): graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) distance_from_s = dijkstra(graph, s, n) distance_from_d = dijkstra(graph, d, n) round_trip_distance = distance_from_s[d] + distance_from_d[s] if round_trip_distance == float(\'inf\'): return -1 else: return round_trip_distance"},{"question":"A company manufactures guitar strings and wants to ensure that quality control is in place. Unfortunately, some strings still manage to be of unequal lengths due to mechanical errors. The production quality team has decided to merge smaller pieces of defective strings with larger pieces to form strings exactly of a target length, `L`. They ask you to determine if it is possible to achieve a string of exactly length `L` using any combination of the provided string lengths. You are given a list of `n` string lengths, each represented as an integer, and the target length `L`. Write a function to determine if it is possible to achieve the target length `L` using the given string lengths. Your function should return \\"YES\\" if it is possible, otherwise \\"NO\\". Function Signature: ```python def can_form_length(n: int, L: int, lengths: List[int]) -> str: pass ``` **Input:** - `n` (2 ≤ n ≤ 1000): The number of string lengths. - `L` (1 ≤ L ≤ 10^6): The target length of the string. - `lengths`: A list of `n` integers where each integer represents the length of a string (1 ≤ lengths[i] ≤ 10^5). **Output:** - Return a single string \\"YES\\" (without quotes) if it is possible to form exactly `L` length using any combination of the given string lengths, otherwise return \\"NO\\" (without quotes). **Example:** ```python print(can_form_length(5, 11, [1, 3, 5, 9, 15])) # Output: \\"YES\\" print(can_form_length(4, 7, [2, 4, 6, 8])) # Output: \\"NO\\" ``` **Explanation:** In the first example, the strings can be combined in such a way that one of them reaches the target length: we can use lengths 1 + 3 + 3 + 5 = 11. In the second example, it is impossible to form the target length 7 using any combination of the given lengths. **Note:** You can use each length multiple times or in any combination to achieve the target length.","solution":"from typing import List def can_form_length(n: int, L: int, lengths: List[int]) -> str: Determines if it is possible to achieve the target length L using the given string lengths. Returns \\"YES\\" if it is possible, otherwise \\"NO\\". dp = [False] * (L + 1) dp[0] = True for length in lengths: for i in range(length, L + 1): if dp[i - length]: dp[i] = True if dp[L]: return \\"YES\\" return \\"NO\\""},{"question":"Vova loves playing with strings. He invented a new game where he selects a string consisting of lowercase English letters and tries to rearrange its characters to satisfy a certain condition. The condition he has in mind is that the string should not contain any two adjacent identical characters. You need to determine if it is possible to rearrange the given string so that no two adjacent characters are the same. Input The first line contains an integer t (1 ≤ t ≤ 10^4) - the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 100), consisting of lowercase English letters. Output For each test case, print \\"YES\\" if it is possible to rearrange the characters of the given string so that no two adjacent characters are the same; otherwise, print \\"NO\\". Example Input: 3 aabb aa aabbc Output: YES NO YES","solution":"def can_rearrange_without_adjacent_duplicates(t, strings): from collections import Counter results = [] for s in strings: freq = Counter(s) # Maximum count of any character max_freq = max(freq.values()) # If the max frequency is more than (n + 1) // 2, output \\"NO\\" # Otherwise, output \\"YES\\" if max_freq > (len(s) + 1) // 2: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"Captain Tamara is planning the layout of her fleet for a naval parade. She has a grid of size n times n where she can position the ships. For safety reasons, no two ships can be positioned in the same row or column, and the distance between any two ships must be at least two units both horizontally and vertically. The distance between ships placed at coordinates (x_1, y_1) and (x_2, y_2) is calculated as max(|x_1 - x_2|, |y_1 - y_2|). Captain Tamara wants to know the maximum number of ships she can place on this grid. The first line contains a single integer n (1 leq n leq 1000) — the size of the grid. Print a single integer — the maximum number of ships that can be placed on the grid following the given conditions.","solution":"def max_ships(n): Returns the maximum number of ships that can be placed on an n x n grid such that no two ships are positioned in the same row or column and the distance between any two ships is at least 2 units both horizontally and vertically. if n <= 2: return 1 # Only one ship can be placed on such small grids return ((n + 2) // 3) ** 2"},{"question":"There are n participants in a coding competition. Each participant has a non-negative score. Over time, participants can be paired up and their combined scores will be set to the minimum of their individual scores. The goal is to determine if it\'s possible for all participants to achieve the same score through a series of these operations. The first line of input contains an integer n (2 ≤ n ≤ 100,000), the number of participants. The second line contains n non-negative integers, s1, s2, ..., sn (0 ≤ si ≤ 10^9), representing the initial scores of the participants. Print \\"Yes\\" (without the quotes) if all participants can achieve the same score, or \\"No\\" otherwise. In the first sample test, it\'s possible to pair up participants in such a way that all scores become the same. In the second sample test, it\'s not possible to make all scores the same.","solution":"def can_all_scores_become_equal(n, scores): Determines if all participants can achieve the same score through the operations described. Parameters: n (int): The number of participants. scores (list of int): The initial scores of the participants. Returns: str: \\"Yes\\" if it\'s possible for all participants to achieve the same score, otherwise \\"No\\". min_score = min(scores) gcd_value = min_score def gcd(a, b): while b: a, b = b, a % b return a for score in scores: gcd_value = gcd(gcd_value, score) if gcd_value == 1: return \\"No\\" return \\"Yes\\""},{"question":"You are given an array of integers and a series of operations that you can perform on the array. The operations are defined as follows: 1. Insert a new integer x at the end of the array. 2. Remove the last integer from the array. 3. Multiply each integer in the array by a given integer y. Your task is to process a series of these operations and maintain the final state of the array after all operations are performed. The first line contains an integer n (1 ≤ n ≤ 100000), the number of operations. The next n lines describe the operations as follows: - For an insertion operation, the line will be \\"INSERT x\\", where x is the integer to be inserted (-1000 ≤ x ≤ 1000). - For a removal operation, the line will be \\"REMOVE\\". - For a multiplication operation, the line will be \\"MULTIPLY y\\", where y is the integer by which to multiply each element (-1000 ≤ y ≤ 1000). Output the final state of the array after performing all the operations. If the array is empty after all operations, print \\"EMPTY\\". **Example Input:** ``` 5 INSERT 3 INSERT 2 MULTIPLY 2 REMOVE INSERT 4 ``` **Example Output:** ``` 6 4 ```","solution":"def process_operations(n, operations): array = [] for op in operations: if op.startswith(\\"INSERT\\"): _, x = op.split() array.append(int(x)) elif op == \\"REMOVE\\": if array: array.pop() elif op.startswith(\\"MULTIPLY\\"): _, y = op.split() y = int(y) array = [element * y for element in array] if array: return \' \'.join(map(str, array)) else: return \\"EMPTY\\""},{"question":"Given an integer array `nums` and two integers `k1` and `k2`, reverse the section of the array between the k1-th and k2-th indexes, inclusive. The first line contains three integers n, k1, and k2 (1 ≤ n ≤ 105, 0 ≤ k1 ≤ k2 < n), where n is the number of elements in the array. The second line contains n integers representing the elements of the array `nums` (-109 ≤ nums[i] ≤ 109). Your task is to output the modified array after reversing the specified section. For example: Input: ``` 10 2 5 1 2 3 4 5 6 7 8 9 10 ``` Output: ``` 1 2 6 5 4 3 7 8 9 10 ``` In this example, the section of the array from index 2 to 5 is reversed. So the modified array becomes `1 2 6 5 4 3 7 8 9 10`.","solution":"def reverse_section(nums, k1, k2): Reverses the section of the array nums between indexes k1 and k2, inclusive. Args: nums (list of int): The list of integers. k1 (int): The starting index of the section to reverse. k2 (int): The ending index of the section to reverse. Returns: list of int: The modified list after reversing the specified section. while k1 < k2: nums[k1], nums[k2] = nums[k2], nums[k1] k1 += 1 k2 -= 1 return nums"},{"question":"Given a directed graph represented as an adjacency list, your task is to determine if there exists a unique topological order of vertices. A unique topological order exists if and only if, for every pair of distinct vertices u and v, either u must appear before v or v must appear before u in any valid topological sorting. The first line of the input contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^6), denoting the number of vertices and the number of directed edges respectively. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating there is a directed edge from vertex u to vertex v. Print \\"Yes\\" (without quotes) if there exists a unique topological order, otherwise print \\"No\\". # Example Input: ``` 5 4 1 2 2 3 4 3 4 5 ``` Output: ``` No ``` Input: ``` 3 3 1 2 1 3 2 3 ``` Output: ``` Yes ``` In the first example, there isn\'t a unique topological order because multiple topological sorts are possible (e.g., 1-4-2-3-5 or 4-1-2-3-5). In the second example, the only valid topological order is 1-2-3, which is unique.","solution":"from collections import defaultdict, deque def unique_topological_order(n, m, edges): in_degree = [0] * (n + 1) graph = defaultdict(list) for u, v in edges: graph[u].append(v) in_degree[v] += 1 zero_in_degree_queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) topological_order = [] while zero_in_degree_queue: if len(zero_in_degree_queue) > 1: return \\"No\\" node = zero_in_degree_queue.popleft() topological_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) if len(topological_order) == n: return \\"Yes\\" else: return \\"No\\""},{"question":"The population of a certain town is growing at an exponential rate, and the town council is interested in knowing when a particular population milestone will be reached. Initially, the town has a population of P0, and the population growth rate is specified as a fixed percentage increase each year. The task is to determine the number of years required for the town\'s population to reach or exceed a specified target value T. Given: - The initial population P0. - The annual growth rate r as a percentage. - The target population T. Write a function to compute the number of years required for the population to reach or exceed the target population T. # Input - The first line contains an integer P0 (1 ≤ P0 ≤ 10^7) representing the initial population. - The second line contains a floating-point number r (0 < r ≤ 100) representing the annual growth rate as a percentage. - The third line contains an integer T (1 ≤ T ≤ 10^9) representing the target population. # Output - Output a single integer representing the number of years required for the population to reach or exceed the target population T. # Example Input ``` 1000 5.5 2000 ``` Output ``` 13 ``` # Explanation With an initial population of 1000 and an annual growth rate of 5.5%, the population will reach or exceed 2000 in 13 years. # Note In each year, the population is updated as P = P * (1 + r/100).","solution":"def years_to_reach_population(P0, r, T): Returns the number of years required for the population to reach or exceed the target population T. Parameters: P0 (int): Initial population r (float): Annual growth rate as a percentage T (int): Target population Returns: int: Number of years required to reach or exceed the target population T years = 0 current_population = P0 while current_population < T: current_population *= (1 + r / 100) years += 1 return years"},{"question":"Alice has just found out about an interesting encryption method and wants to try it on a string. The encryption is based on shifting each character in the string by a certain number of positions in the alphabet. Given an original string and an encrypted version of it, determine the number of positions each character was shifted to produce the encrypted string. Specifically, for each character in the original string, when it is shifted by a certain number of positions in the alphabet (wrapping around from \'z\' to \'a\' if necessary), it matches the corresponding character in the encrypted string. For example, if the original string is \\"abc\\" and the encrypted string is \\"bcd\\", each character has been shifted by 1 position forward (\'a\' to \'b\', \'b\' to \'c\', \'c\' to \'d\'). The first line contains a single integer n (1 ≤ n ≤ 1000), the length of the strings. The second line contains the original string, consisting of lowercase English letters. The third line contains the encrypted string, also consisting of lowercase English letters. Output the number of positions each character has been shifted to transform the original string into the encrypted string. If all the shifts are not the same, output \\"Not a constant shift\\". # Example Input ``` 3 abc bcd ``` Output ``` 1 ``` # Another Example Input ``` 3 abc def ``` Output ``` Not a constant shift ```","solution":"def determine_shift(n, original, encrypted): Determines the number of positions each character was shifted to produce the encrypted string from the original string. If all characters are not shifted by the same number of positions, it returns \\"Not a constant shift\\". shifts = set() for i in range(n): shift = (ord(encrypted[i]) - ord(original[i])) % 26 shifts.add(shift) if len(shifts) == 1: return shifts.pop() else: return \\"Not a constant shift\\""},{"question":"Given an integer array nums of length n and an integer k, your task is to find the maximum sum of a contiguous subarray of length k. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000). The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4). Print the single line containing the maximum sum of a contiguous subarray of length k. In the first example, with nums = [1, 2, 3, 4, 5] and k = 2, the possible subarrays of length 2 are [1, 2], [2, 3], [3, 4], and [4, 5]. The sums are 3, 5, 7, and 9, respectively, so the output is 9. In the second example, with nums = [-1, 3, -1, 5, 4] and k = 3, the possible subarrays of length 3 are [-1, 3, -1], [3, -1, 5], and [-1, 5, 4]. The sums are 1, 7, and 8, respectively, so the output is 8.","solution":"def max_sum_subarray(nums, k): Returns the maximum sum of a contiguous subarray of length k. if not nums or k <= 0 or k > len(nums): return 0 # Calculate the sum of the first subarray of length k current_sum = sum(nums[:k]) max_sum = current_sum # Use sliding window technique for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A detective is solving a mysterious case involving a sequence of numbers. He has a list of numbers and he needs to determine if there exists a subsequence of at least three numbers that forms an arithmetic progression. An arithmetic progression (AP) is a sequence of numbers such that the difference between consecutive terms is constant. You are given a list of integers. Determine if there exists an arithmetic progression of length at least three within the list. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains a single integer n (3 leq n leq 10^5) — the number of elements in the list. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the list. It is guaranteed that the sum of n over all test cases does not exceed 10^6. Print \\"YES\\" (without quotes) if there exists an arithmetic progression of length at least three within the list. Otherwise, print \\"NO\\". For example: Input: ``` 2 5 1 5 9 13 17 4 3 6 10 15 ``` Output: ``` YES NO ``` In the first test case, the sequence `1, 5, 9, 13, 17` is an arithmetic progression with a common difference of 4. In the second test case, no subsequence of length three forms an arithmetic progression.","solution":"def has_arithmetic_progression(arr): Check if there exists an arithmetic progression of length at least three in the list. n = len(arr) if n < 3: return False arr.sort() for i in range(n - 2): for j in range(i + 1, n - 1): diff = arr[j] - arr[i] next_val = arr[j] + diff if next_val in arr[j + 1:]: return True return False def check_arithmetic_progressions(test_cases): results = [] for t in test_cases: n, arr = t if has_arithmetic_progression(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a matrix with dimensions n times m filled with integers. Your task is to perform multiple queries on the matrix. Each query can either update an element of the matrix or calculate the sum of elements in a submatrix. There are two types of queries: 1. **Update**: Modify the element at a specific position to a new value. 2. **Sum**: Calculate the sum of elements in a given submatrix defined by its top-left and bottom-right corners. # Input The first line contains two space-separated integers n and m (1 leq n, m leq 500) — the number of rows and columns in the matrix. The next n lines each contain m integers representing the initial state of the matrix. Each integer is between -10^3 and 10^3. The following line contains a single integer q (1 leq q leq 10^4) — the number of queries. Each of the next q lines contains a query in one of the two formats: - `1 x y v`: Update the element at (x, y) to v (1 leq x leq n, 1 leq y leq m, -10^3 leq v leq 10^3). - `2 x1 y1 x2 y2`: Calculate the sum of elements in the submatrix from (x1, y1) to (x2, y2) (1 leq x1 leq x2 leq n, 1 leq y1 leq y2 leq m). # Output For each sum query, output a single integer representing the sum of elements in the specified submatrix. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 5 2 1 1 3 3 1 2 2 100 2 1 1 3 3 2 2 2 3 3 1 3 3 -34 2 1 1 3 3 ``` Output ``` 45 140 126 ``` # Explanation - Initially, the matrix is: ``` 1 2 3 4 5 6 7 8 9 ``` - The first query calculates the sum of all elements, i.e., 1+2+3+4+5+6+7+8+9 = 45. - The second query updates the element at (2, 2) to 100. The matrix becomes: ``` 1 2 3 4 100 6 7 8 9 ``` - The third query calculates the new sum of all elements, i.e., 1+2+3+4+100+6+7+8+9 = 140. - The fourth query calculates the sum of the submatrix (2, 2) to (3, 3), i.e., 100+6+8+9 = 123. - The fifth query updates the element at (3, 3) to -34. The matrix becomes: ``` 1 2 3 4 100 6 7 8 -34 ``` - The final query calculates the sum of all elements, i.e., 1+2+3+4+100+6+7+8-34 = 97. By handling both update and sum queries efficiently, you need to ensure that the solution is capable of processing up to 10,000 queries in a reasonable time.","solution":"def process_matrix_queries(n, m, matrix, queries): # Initialize the prefix sum matrix with an extra row and column of zeros prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] # Function to build the prefix sum matrix def build_prefix_sum(): for i in range(n): for j in range(m): prefix_sum[i + 1][j + 1] = matrix[i][j] + prefix_sum[i + 1][j] + prefix_sum[i][j + 1] - prefix_sum[i][j] # Function to update the prefix sum matrix def update_prefix_sum(x, y, value): delta = value - matrix[x - 1][y - 1] matrix[x - 1][y - 1] = value for i in range(x, n + 1): for j in range(y, m + 1): prefix_sum[i][j] += delta # Build the initial prefix sum matrix build_prefix_sum() results = [] for query in queries: parts = list(map(int, query.split())) if parts[0] == 1: # Update query x, y, v = parts[1], parts[2], parts[3] update_prefix_sum(x, y, v) elif parts[0] == 2: # Sum query x1, y1, x2, y2 = parts[1], parts[2], parts[3], parts[4] sum_result = (prefix_sum[x2][y2] - prefix_sum[x1 - 1][y2] - prefix_sum[x2][y1 - 1] + prefix_sum[x1 - 1][y1 - 1]) results.append(sum_result) return results"},{"question":"Pavel the explorer is currently trekking on a landscape which can be represented as a 2D grid with dimensions n x m. Each cell contains an elevation value, which indicates the height of the terrain at that particular cell. Pavel can move in one of four directions: up, down, left, or right. However, he can only move from one cell to another if the elevation of the destination cell is less than or equal to the current cell’s elevation. Given the 2D grid of dimensions n x m containing elevation values and Pavel’s starting position (sx, sy) and destination position (dx, dy), determine if Pavel can reach the destination position from the starting position under the given movement constraints. # Input The first line contains two integers, n and m (1 ≤ n, m ≤ 100), which represent the dimensions of the grid. The next n lines each contain m integers, where the j-th integer on the i-th line is the elevation at cell (i, j) (0 ≤ elevation ≤ 1000). The last line contains four integers, sx, sy, dx, dy (0 ≤ sx, dx < n, 0 ≤ sy, dy < m), representing Pavel’s starting position and destination position, respectively. # Output Print \\"YES\\" if Pavel can reach the destination, otherwise print \\"NO\\". # Example Input: ``` 4 5 5 3 6 7 2 8 9 3 4 1 7 4 8 3 2 6 3 2 5 4 0 0 3 4 ``` Output: ``` YES ``` In this example, Pavel starts at cell (0, 0) with an elevation of 5 and he can reach cell (3, 4) with an elevation of 4 by following a path such as: (0, 0) -> (0, 1) -> (1, 2) -> (2, 3) -> (3, 4).","solution":"def can_reach_destination(n, m, grid, sx, sy, dx, dy): Determines if Pavel can reach destination (dx, dy) from starting (sx, sy). Can only move to cells with equal or lower elevation. from collections import deque # Directions for movement: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y, current_height): return 0 <= x < n and 0 <= y < m and not visited[x][y] and grid[x][y] <= current_height visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(sx, sy)]) visited[sx][sy] = True while queue: x, y = queue.popleft() if (x, y) == (dx, dy): return \\"YES\\" for dx, dy in directions: new_x, new_y = x + dx, y + dy if is_valid(new_x, new_y, grid[x][y]): visited[new_x][new_y] = True queue.append((new_x, new_y)) return \\"NO\\""},{"question":"Little X and Little Y love playing a game with marbles. There are n marbles in a row, each having a certain weight. The game involves picking marbles such that no two consecutive marbles are chosen. Each chosen marble must be added to the score, and the objective is to maximize the total score by the end of the game. Write a program that determines the maximum possible score Little X can achieve. The first line of the input contains an integer n (1 leq n leq 100000), the number of marbles. The second line contains n integers w_1, w_2, ldots, w_n (1 leq w_i leq 1000), where w_i is the weight of the i-th marble. Print a single integer — the maximum possible score Little X can achieve by picking marbles without picking two consecutive ones. For example, in the first test case, picking marbles with weights 5 and 6 results in the score 11, which is the maximum possible score.","solution":"def max_score(marbles): Returns the maximum possible score that can be achieved by picking marbles without picking two consecutive ones. n = len(marbles) if n == 0: return 0 elif n == 1: return marbles[0] dp = [0] * n dp[0] = marbles[0] dp[1] = max(marbles[0], marbles[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + marbles[i]) return dp[-1]"},{"question":"You are conducting research on a series of interconnected islands connected by bridges. Each island is represented as a node in a graph, and each bridge as an edge. Each bridge has a specific length. You are given the task of finding the shortest path from one island to another. The first line of input contains two integers, n and m (1 ≤ n, m ≤ 100000), representing the number of islands and the number of bridges, respectively. Next, there are m lines, each containing three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000), representing a bridge between islands u and v with length w. The last line contains two integers, s and t (1 ≤ s, t ≤ n), representing the starting island s and the target island t. Print a single integer - the length of the shortest path from island s to island t. If there is no path, print -1. # Example Input ``` 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 5 ``` Output ``` 6 ``` In this example, the shortest path from island 1 to island 5 goes through island 3 and has a total length of 6.","solution":"import heapq def shortest_path(n, m, edges, s, t): Finds the shortest path from island s to island t. n: number of islands m: number of bridges edges: list of edges where each edge is represented as (u, v, w) s: starting island t: target island Returns the length of the shortest path or -1 if there is no path. # Create adjacency list adj = [[] for _ in range(n+1)] for u, v, w in edges: adj[u].append((v, w)) adj[v].append((u, w)) # Dijkstra\'s algorithm Q = [(0, s)] dist = {i: float(\'inf\') for i in range(1, n+1)} dist[s] = 0 while Q: current_dist, u = heapq.heappop(Q) if u == t: return current_dist if current_dist > dist[u]: continue for v, weight in adj[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(Q, (distance, v)) return -1 if dist[t] == float(\'inf\') else dist[t]"},{"question":"You are working on a new software project that involves implementing a payment gateway system. The system needs to process a series of transactions and generate a report at the end of the day. Each transaction will either be a credit or a debit. Your task is to write a program that reads a list of transactions and computes the balance at each step, identifying specific moments when the balance reaches its highest and lowest points. Additionally, the program should be able to handle a scenario where the transactions go below zero, signaling an overdraft. A transaction is defined as follows: - A \\"credit\\" C increases the balance by C units. - A \\"debit\\" D decreases the balance by D units, potentially resulting in an overdraft if the balance goes below zero. The program should take several transactions and produce: 1. A list of balances after each transaction. 2. The highest and lowest balances observed during the day. 3. The number of times the account went into overdraft. The first line of the input contains a single integer n (1 ≤ n ≤ 10^6), the number of transactions. Each of the next n lines contains either a \\"credit\\" or \\"debit\\" transaction with an integer value. The output should consist of the following: - A space-separated list of n integers, representing the balance after each transaction. - Two integers, representing the highest and the lowest balance observed. - A single integer, representing the number of times the account went into overdraft. Here\'s a detailed input and output format: Input: ``` 6 credit 100 debit 50 credit 200 debit 300 debit 100 credit 500 ``` Output: ``` 100 50 250 -50 -150 350 350 -150 2 ``` In this example: - The list of balances after each transaction are: 100, 50, 250, -50, -150, 350. - The highest balance observed is 350. - The lowest balance observed is -150. - The account went into overdraft 2 times (when the balance dropped below zero).","solution":"def process_transactions(n, transactions): balances = [] current_balance = 0 highest_balance = float(\'-inf\') lowest_balance = float(\'inf\') overdraft_count = 0 for transaction in transactions: type_, amount = transaction.split() amount = int(amount) if type_ == \'credit\': current_balance += amount else: # type_ == \'debit\' current_balance -= amount balances.append(current_balance) if current_balance > highest_balance: highest_balance = current_balance if current_balance < lowest_balance: lowest_balance = current_balance if current_balance < 0: overdraft_count += 1 # Join balances into a space-separated string balances_str = \' \'.join(map(str, balances)) return balances_str, highest_balance, lowest_balance, overdraft_count # Example usage: transactions = [\\"credit 100\\", \\"debit 50\\", \\"credit 200\\", \\"debit 300\\", \\"debit 100\\", \\"credit 500\\"] result = process_transactions(6, transactions) print(result)"},{"question":"Tom loves playing with sequences of numbers. Given an integer array of length n, Tom can perform the following operation any number of times: choose any two elements and replace one of them with the absolute difference of the two chosen elements. That is, choose indices i and j, and replace a[i] with |a[i] - a[j]|. Tom finds a sequence interesting if all elements in the sequence are equal after performing the operations any number of times. Given the initial sequence, determine if it is possible to make it interesting, and if so, what the final element will be. The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Print a single integer — the value of the elements in the interesting sequence, or -1 if it is not possible to make the sequence interesting. Sample Input: 5 5 10 15 20 25 Sample Output: 5 Explanation: - The sequence [5, 10, 15, 20, 25] can be transformed as follows: - Choose indices 2 and 1, replace a[1] with |10 - 5| (sequence becomes [5, 5, 15, 20, 25]). - Choose indices 3 and 1, replace a[3] with |15 - 5| (sequence becomes [5, 5, 10, 20, 25]). - Continue this process until all elements are 5. In the given example, we can achieve the interesting sequence where all elements are equal to 5, so the output is 5.","solution":"def interesting_sequence(n, arr): Determine if the sequence can be made interesting and return the final element :param n: int - Length of the array :param arr: list of int - The array elements :return: int - The value of the elements in the interesting sequence, or -1 if it is not possible from math import gcd from functools import reduce # Calculate gcd of entire array def find_gcd_of_list(arr): return reduce(gcd, arr) result_gcd = find_gcd_of_list(arr) return result_gcd"},{"question":"You have an array of integers and you need to transform it according to the following rules: 1. If the array is not sorted in non-decreasing order, then sort it. 2. After sorting, if there are at least two consecutive integers with the same value, merge all such consecutive integers by adding them up to form one integer, repeat the process until no more consecutive integers have the same value. Your task is to print the resulting array. The first line of the input contains a single integer, n (1 ≤ n ≤ 100,000), the number of integers in the array. The second line contains n space-separated integers a0, a1, ..., an-1 (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Print a single line containing the resulting array after applying the rules described. **Sample Input 1:** ``` 5 4 5 2 2 5 ``` **Sample Output 1:** ``` 4 4 5 ``` **Sample Input 2:** ``` 3 1 1 3 ``` **Sample Output 2:** ``` 2 3 ``` **Explanation:** In the first example, after sorting the array, it becomes `[2, 2, 4, 5, 5]`. Then, the consecutive `2`s merge to form `4` and the consecutive `5`s also merge to form `10`. The array after merging becomes `[4, 4, 10]`. In the second example, after sorting, the array remains `[1, 1, 3]`. The consecutive `1`s merge to form `2`, resulting in `[2, 3]`.","solution":"def transform_array(n, arr): # Sort the array arr.sort() result = [] i = 0 while i < n: sum_value = arr[i] while i + 1 < n and arr[i] == arr[i + 1]: sum_value += arr[i + 1] i += 1 result.append(sum_value) i += 1 return result"},{"question":"Alex is planning to design a seating arrangement for a wedding. The wedding requires a circular table setup where guests are seated in a circle. There will be n guests at the wedding, and each guest has a unique guest ID ranging from 1 to n. Alex has been provided with a list of pairs of guest IDs who are friends and must be seated next to each other. However, he does not want any two non-friend guests to be seated next to each other unless absolutely necessary. Given the number of guests n and a list of pairs of friend relationships, help Alex to determine if it\'s possible to arrange the guests around the circular table such that all friends sit next to each other. If it is possible, output any valid arrangement of guest IDs. If it is not possible, output \\"-1\\". The first line of the input contains two integers n and m (2 le n le 2 cdot 10^5, 0 le m le n-1) — the number of guests and the number of pairs of friends. The next m lines each contain two integers a and b (1 le a, b le n) — the guest IDs of a pair of friends. Output a single line containing either a valid arrangement of guest IDs or \\"-1\\" if no valid arrangement exists. If there are multiple valid arrangements, print any one of them. # Input ``` 4 3 1 2 2 3 3 4 ``` # Output ``` 1 2 3 4 ``` # Input ``` 5 2 1 2 2 3 ``` # Output ``` -1 ``` # Input Explanation In the first example, it is possible to arrange guests [1, 2, 3, 4] around the table so that friends are seated next to each other. In the second example, it is impossible to seat all guests such that the friend pairs are maintained given the circular table constraint.","solution":"from collections import defaultdict, deque def circular_seating(n, m, friendships): if m < n-1: return -1 adj = defaultdict(list) for a, b in friendships: adj[a].append(b) adj[b].append(a) if any(len(adj[x]) > 2 for x in adj): return -1 degrees = {x: len(adj[x]) for x in adj} end_points = [x for x in degrees if degrees[x] == 1] if len(end_points) != 2: return -1 queue = deque([end_points[0]]) visited = set() order = [] while queue: node = queue.popleft() if node in visited: continue visited.add(node) order.append(node) for neighbor in adj[node]: adj[neighbor].remove(node) queue.append(neighbor) if len(order) == n: return order else: return -1"},{"question":"A famous art gallery has recently experienced a break-in. The security team needs an automated system to identify and mark stolen art pieces that were taken. You have been assigned the task to write a program that helps in this process. Each item in the gallery is identified by a unique code. The codes of the stolen items have been compiled into a suspicious list for you to analyze. Given a list of codes for all items in the gallery and a separate list of codes identified as stolen, determine which items in the gallery are marked as stolen. The first line of the input consists of an integer n (1 ≤ n ≤ 1000), representing the number of items in the gallery. The second line contains n unique alphanumeric codes, each representing an item in the gallery. The third line contains an integer m (1 ≤ m ≤ 100), representing the number of stolen items. The fourth line contains m unique alphanumeric codes, each representing a stolen item. Print the codes of the items marked as stolen. Example: Input: 6 A123 B456 C789 D012 E234 F345 3 B456 D012 F345 Output: B456 D012 F345","solution":"def find_stolen_items(n, gallery_codes, m, stolen_codes): Returns the list of codes of the items marked as stolen. Parameters: n (int): Number of items in the gallery. gallery_codes (list): List of unique alphanumeric codes of items in the gallery. m (int): Number of stolen items. stolen_codes (list): List of unique alphanumeric codes of stolen items. Returns: list: List of codes of the items marked as stolen. return [code for code in stolen_codes if code in gallery_codes]"},{"question":"John is participating in a programming competition and came across a problem that involved string manipulation. He needs your help to solve it. The problem statement is as follows: John has a string `s` of length `n` consisting of lowercase English letters. He wants to find the longest substring which contains at most `k` distinct characters. A substring is a contiguous segment of a string. For example, in the string \\"abcba\\", the substrings \\"abc\\", \\"bcb\\", and \\"cba\\" all contain 3 distinct characters. Your task is to write a program that helps John find the length of the longest substring with at most `k` distinct characters. The first line of input contains a string `s` of length `n` (1 ≤ n ≤ 100,000). The second line contains an integer `k` (1 ≤ k ≤ 26). Print a single integer representing the length of the longest substring of `s` that contains at most `k` distinct characters. For example, for the string `s = \\"eceba\\"` and `k = 2`, the longest substring with at most 2 distinct characters is \\"ece\\", which has length 3. In another example, for the string `s = \\"aa\\"` and `k = 1`, the longest substring with at most 1 distinct character is \\"aa\\", which has length 2.","solution":"def longest_substring_with_k_distinct(s, k): Finds the length of the longest substring with at most `k` distinct characters. :param s: The input string. :param k: The maximum number of distinct characters. :return: The length of the longest substring with at most `k` distinct characters. n = len(s) if n == 0 or k == 0: return 0 left = 0 right = 0 max_length = 0 char_map = {} while right < n: if s[right] in char_map: char_map[s[right]] += 1 else: char_map[s[right]] = 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"A long corridor contains **m** rooms labeled from 1 to **m** sequentially. There are **n** researchers, and you know the preference of each researcher; some rooms they like and some they dislike. You aim to arrange the researchers into rooms in such a way that no researcher ends up in a room they dislike. There are two types of queries: 1. Mark room **i** as liked by researcher **j**. 2. Determine if it\'s possible to assign all researchers to rooms they like and output one such possible assignment. The first line contains two integers **n** and **m** (1 ≤ **n**, **m** ≤ 1000) — the number of researchers and the number of rooms, respectively. The second line contains an integer **q** (1 ≤ **q** ≤ 10000) — the number of queries. The following **q** lines each contain either: - A query of type 1 in the form: `1 j i`, meaning that researcher **j** likes room **i** (1 ≤ **j** ≤ **n**, 1 ≤ **i** ≤ **m**). - A query of type 2 in the form: `2`, which asks you to determine if there is a possible assignment of researchers to rooms they like and print one assignment if it exists. Rooms are 1-indexed. For each type 2 query, if the assignment is possible, output \\"YES\\" followed by **n** integers, where the i-th integer represents the room assigned to researcher **i**. If no such assignment is possible, output \\"NO\\". **Example:** Input: ``` 3 3 6 1 1 1 1 2 2 1 3 3 1 3 1 2 2 ``` Output: ``` YES 1 2 3 YES 1 2 3 ``` **Explanation:** Researcher 1 likes room 1, researcher 2 likes room 2, researcher 3 likes rooms 1 and 3. Therefore, a valid allocation is to assign researcher 1 to room 1, researcher 2 to room 2, and researcher 3 to room 3. The answer is \\"YES 1 2 3\\". The second type 2 query will return the same output.","solution":"def process_preferences(n, m, queries): from collections import defaultdict from itertools import permutations # Initialize an empty list of preferences for each researcher preferences = defaultdict(list) # Stores the results of type 2 queries results = [] # Process each query for query in queries: if query[0] == 1: _, researcher, room = query preferences[researcher].append(room) elif query[0] == 2: # Try to find a valid assignment rooms = list(range(1, m + 1)) possible_assignment = False assignment = [-1] * (n + 1) # Check all permutations of rooms for perm in permutations(rooms, n): valid = True for i in range(1, n + 1): if perm[i - 1] not in preferences[i]: valid = False break assignment[i] = perm[i - 1] if valid: results.append((True, assignment[1:])) possible_assignment = True break if not possible_assignment: results.append((False, [])) return results"},{"question":"You are given an array of integers a consisting of n distinct integers. The array can be rotated any number of times. A rotation consists of moving the last element of the array to the first position, shifting all other elements to the right. Your task is to find the maximum possible sum of any subarray after performing any number of rotations. The first line contains a single integer n (1 leq n leq 10^5) — the number of elements in the array. The second line contains n distinct integers a_i (-10^9 leq a_i leq 10^9). Output a single integer — the maximum possible sum of any subarray after any number of rotations. Subarray is a contiguous part of an array. For example: Input: 5 1 2 3 4 5 Output: 15 After rotating the array, one of the arrays you get is [5, 1, 2, 3, 4]. The maximum possible subarray sum is 15 (the entire array).","solution":"def max_subarray_sum_after_rotations(n, a): Returns the maximum possible sum of any subarray after performing any number of rotations. # Using Kadane\'s Algorithm to find the maximum subarray sum of original array def kadane(arr): max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global return kadane(a)"},{"question":"You are given two arrays `a` and `b` of the same length `n` consisting of integers. Your task is to determine for each element in the first array how many times it appears in the second array. The result should be placed in a new array. The first line contains an integer `n` (1 ≤ n ≤ 10^5), the length of the arrays `a` and `b`. The second line contains `n` space-separated integers representing the elements of the array `a`. The third line contains `n` space-separated integers representing the elements of the array `b`. Print a single line containing `n` space-separated integers where the i-th integer represents how many times the i-th element of `a` appears in array `b`. # Example Input ``` 5 1 2 3 4 5 2 3 3 2 1 ``` Output ``` 1 2 2 0 0 ``` # Explanation - The first element of `a` is `1`, which appears once in `b`. - The second element of `a` is `2`, which appears two times in `b`. - The third element of `a` is `3`, which appears two times in `b`. - The fourth element of `a` is `4`, which does not appear in `b`. - The fifth element of `a` is `5`, which does not appear in `b`. The result array is `[1, 2, 2, 0, 0]`.","solution":"def count_occurrences(a, b): Given two arrays \'a\' and \'b\' of the same length, returns a new array where the i-th element is the count of how many times the i-th element of \'a\' appears in \'b\'. # Create a dictionary to store the count of each element in array \'b\' count_map = {} for elem in b: if elem in count_map: count_map[elem] += 1 else: count_map[elem] = 1 # Create the result array using the count_map for lookup result = [] for elem in a: result.append(count_map.get(elem, 0)) return result"},{"question":"In a far-off kingdom, there are n magical fountains aligned in a row. Each fountain has its unique height, and when activated, it produces a stream of water upward with a force proportional to its height. The wizard oversees these fountains and wants to create a spectacular water show by activating a contiguous subarray of the fountains such that the height of the tallest fountain in this subarray is maximized. Given the heights of these fountains, you need to help the wizard determine the maximum height achievable by any contiguous subarray of the fountains. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of magical fountains. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000) — the heights of the fountains. On the first line, output a single integer — the maximum height of the tallest fountain in any contiguous subarray of the fountains. For example: ``` Input: 5 2 3 1 5 4 Output: 5 ``` Here, the maximum height of the tallest fountain in any contiguous subarray is 5, which can be achieved by considering the subarray [5] or the subarray [1, 5] or [5, 4].","solution":"def max_fountain_height(n, heights): Returns the maximum height of the tallest fountain in any contiguous subarray of the fountains. :param n: The number of magical fountains :type n: int :param heights: A list of integers representing the heights of the fountains :type heights: list of int :return: The maximum height of the tallest fountain in any contiguous subarray :rtype: int return max(heights)"},{"question":"Elena has a rectangular grid garden that consists of `n x m` plots. Each plot can either be empty (denoted by \'.\') or contain a tree (denoted by \'T\'). Elena wants to move a unique tree in the garden to a specified location by clearing a path. However, she can only move the tree vertically or horizontally, one step at a time. Moving each tree one plot takes one step, and trees cannot move over or onto another tree. Please write a program to determine the minimum number of steps required to move the unique tree to the specified destination plot. If it is not possible to reach the destination, output -1. # Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 50) — the dimensions of the garden. - The next `n` lines each containing `m` characters describing the garden grid. - The last two lines contain two integers: - The coordinates `sx` and `sy` (1 ≤ sx, sy ≤ n, m) — the starting coordinates of the unique tree (1-based indexing). - The coordinates `dx` and `dy` (1 ≤ dx, dy ≤ n, m) — the destination coordinates for the unique tree (1-based indexing). # Output: - Print the minimum number of steps required to move the unique tree from the starting coordinate to the destination coordinate. If it is impossible to reach the destination, print -1. # Example: Input: ``` 5 5 ..... ..... ..T.. ..... ..... 3 3 1 1 ``` Output: ``` 4 ``` Explanation: Here\'s one of the possible paths: ``` (3, 3) -> (2, 3) -> (1, 3) -> (1, 2) -> (1, 1); ``` For each position, keep track of valid moves and minimum steps count using BFS (Breadth-First Search) algorithm to ensure the shortest path is found.","solution":"from collections import deque def min_steps_to_move_tree(n, m, garden, sx, sy, dx, dy): # Convert 1-based coordinates to 0-based coordinates sx, sy, dx, dy = sx - 1, sy - 1, dx - 1, dy - 1 # Initialize the queue for BFS and the visited set queue = deque([(sx, sy, 0)]) # (current_x, current_y, steps) visited = set((sx, sy)) # Define the four possible movements: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Perform BFS while queue: x, y, steps = queue.popleft() # Check if we\'ve reached the destination if x == dx and y == dy: return steps # Explore neighboring cells for d in directions: nx, ny = x + d[0], y + d[1] # Check if the new cell is within bounds and is empty and not visited if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and garden[nx][ny] == \'.\': queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) # If the destination cannot be reached return -1 # Function for reading input and calling our main function def main(): # Input reading import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) garden = [] index = 2 for _ in range(n): garden.append(data[index]) index += 1 sx = int(data[index]) sy = int(data[index + 1]) dx = int(data[index + 2]) dy = int(data[index + 3]) # Get the result result = min_steps_to_move_tree(n, m, garden, sx, sy, dx, dy) # Print the result print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an integer array `arr` of length `n` and a series of `m` operations. Each operation is described by a pair of integers `(l, r)` that specifies an inclusive range within the array. For each operation, calculate the sum of the elements in the specified range `(l, r)`. The ranges may overlap, and each operation is independent of the others. Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100000) — the number of elements in the array and the number of operations. - The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 1000) — the elements of the array. - The following `m` lines contain two integers `l` and `r` (1 ≤ l ≤ r ≤ n) — the range for each operation. Output - For each of the `m` operations, print a single integer — the sum of the elements in the range `[l, r]`. Example Input: ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 ``` Output: ``` 6 9 15 ``` Note: - In the first operation, the sum of elements from index 1 to 3 (1-based) is 1 + 2 + 3 = 6. - In the second operation, the sum of elements from index 2 to 4 (1-based) is 2 + 3 + 4 = 9. - In the third operation, the sum of elements from index 1 to 5 (1-based) is 1 + 2 + 3 + 4 + 5 = 15. Implement a solution that efficiently processes each operation, considering potential constraints on the size of the array and number of operations.","solution":"def range_sum(n, m, arr, operations): Given an array of integers and operations specified by ranges, calculates the sum of elements in the specified ranges. :param n: Number of elements in array :param m: Number of operations :param arr: List of integers representing the array :param operations: List of tuples containing the range for each operation (1-based indices) :return: List of integers representing the sum of elements in the specified ranges # Create a prefix sum array prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] # Calculate sums for each range result = [] for l, r in operations: # Since the input given is 1-based, we convert it to 0-based by subtracting 1 range_sum = prefix_sum[r] - prefix_sum[l - 1] result.append(range_sum) return result"},{"question":"Polycarpus has a rectangular garden consisting of m rows and n columns of cells. Each cell is initially either empty or contains a plant, defined by an m x n grid of 0s and 1s respectively where 0 indicates empty and 1 indicates a plant. Polycarpus can take care of the garden in an interesting way: he can perform a stroke which turns all cells in a certain row or column of the garden empty (changes all 1s in the row or column to 0s). Polycarpus wants to know the minimum number of strokes he needs to perform to make the garden completely empty (i.e., all 0s). The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the grid. The next m lines each contain n characters, either \'0\' or \'1\', representing the initial state of the garden. Output a single integer — the minimum number of strokes needed to make the entire garden empty. In the first example, ``` 3 3 110 101 011 ``` Polycarpus can clear the garden in 3 strokes by clearing the first row, second column, and then the third row. In the second example, ``` 2 2 10 01 ``` Polycarpus can clear the garden in just 2 strokes by clearing the first row and the second column.","solution":"def minimum_strokes(m, n, garden): Returns the minimum number of strokes needed to make the garden completely empty. row_strokes = sum(1 for row in garden if \'1\' in row) col_strokes = sum(1 for col in range(n) if any(garden[row][col] == \'1\' for row in range(m))) return min(row_strokes, col_strokes)"},{"question":"You have been given an array of integers, and your task is to change the array such that the number at each index is greater than or equal to the number at the previous index. Specifically, you can perform the following operation: - Choose any element of the array and increase its value by 1. You need to determine the minimum number of such operations required to achieve the desired array configuration. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Print one integer — the minimum number of operations required to make the array non-decreasing. In the first example, no operations are needed as the array is already non-decreasing. In the second example, you need to increase the second element by 1 and the third element by 3 to make the array [2, 3, 4, 4], which requires 4 operations in total. In the third example, you need to increase the first element by 1 to get [2, 2, 2], which requires 1 operation.","solution":"def min_operations_to_non_decreasing(arr): Determines the minimum number of operations required to make the array non-decreasing. Parameters: arr (list of int): The array of integers to be modified. Returns: int: The minimum number of operations required. n = len(arr) if n == 1: return 0 operations = 0 for i in range(1, n): if arr[i] < arr[i - 1]: operations += arr[i - 1] - arr[i] arr[i] = arr[i - 1] return operations"},{"question":"You are given a string s consisting of lowercase English letters. You can perform the following operation at most once: choose any character in the string and remove all its occurrences. Your task is to determine the longest possible length of a substring that contains all the characters in the original string exactly once, after at most one removal operation. The first line of the input contains one integer n (1 le n le 10^5) — the length of the string s. The second line of the input contains the string s, which consists of lowercase English letters. Print one integer — the length of the longest possible substring that contains all unique characters exactly once after performing the operation. In the first example, the string is \\"abcabc\\". By removing all occurrences of \'a\', the longest possible substring with all characters exactly once is \\"bc\\", with length 2. In the second example, the string is \\"abcdec\\". By removing all occurrences of \'c\', the longest possible substring with all characters exactly once is \\"abde\\", with length 4.","solution":"def longest_unique_substring_after_removal(s): Returns the length of the longest possible substring that contains all the unique characters in the original string exactly once after at most one removal operation. from collections import defaultdict max_length = 0 unique_chars = set(s) for char in unique_chars: modified_s = s.replace(char, \\"\\") unique_substring_length = len(set(modified_s)) max_length = max(max_length, unique_substring_length) return max_length"},{"question":"Simon is an avid stamp collector, and he has a unique way of arranging his collection. He places his stamps in a book with n pages, and each page has a series of slots numbered from 1 to m. Simon likes to arrange his stamps so that the value of the stamps in each slot follows a specific increasing pattern both row-wise and column-wise. Simon has a set of t stamps, and each stamp has a unique value. However, he realized that it\'s sometimes challenging to keep track of the smallest value needed to achieve his arrangement goal. Given an already arranged collection with integers representing stamp values and 0s denoting empty slots, help Simon find the minimum stamp value he needs to place to maintain the increasing pattern. The matrix is guaranteed to have at least one empty slot, and the values in the matrix are strictly increasing both row-wise and column-wise. An empty slot means that any new stamp value placed there must be greater than all values to its left and above it while maintaining the increasing property required. The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the matrix. Each of the next n lines contains m integers — the values in the matrix, where 0 represents an empty slot. Print a single integer — the minimum stamp value that Simon needs to place in the matrix while preserving its pattern. Examples: Input: 3 3 1 2 0 3 5 6 4 7 8 Output: 9 Input: 2 2 0 2 3 4 Output: 1","solution":"def find_minimum_stamp_value(matrix): This function takes a 2D matrix where each slot represents a stamp value and zeroes represent empty slots. It returns the minimum stamp value that can be placed in an empty slot to maintain the strictly increasing order both row-wise and column-wise. n = len(matrix) m = len(matrix[0]) min_value = float(\'inf\') for i in range(n): for j in range(m): if matrix[i][j] == 0: potential_value = 1 if i > 0: potential_value = max(potential_value, matrix[i-1][j] + 1) if j > 0: potential_value = max(potential_value, matrix[i][j-1] + 1) min_value = min(min_value, potential_value) return min_value"},{"question":"You are given an array of n integers and an integer k. Your task is to determine if there are any two distinct elements in the array that sum up to k. The first line of the input contains two integers n and k (1 ≤ n ≤ 10^5, -2 x 10^9 ≤ k ≤ 2 x 10^9) — the number of elements in the array and the target sum. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. If there are two distinct elements in the array whose sum is equal to k, print \\"YES\\". Otherwise, print \\"NO\\". Example: Input: 5 9 2 7 11 15 1 Output: YES","solution":"def find_pair_with_sum(arr, k): Checks if there are any two distinct elements in the array that sum up to k. seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"John loves walks and needs to plan his walking routes through his neighborhood. The neighborhood can be represented as an undirected graph with nodes as houses and edges as roads connecting the houses. John wants to walk from his house, visit as many different houses as possible, and return to his house without walking any road twice. More precisely, John needs to start from his house (node 1), visit some houses, and come back to node 1 such that he walks through each road exactly twice (i.e., once in each direction). He must ensure that he visits each house at least once during his walk. Your task is to determine the maximum number of different houses John can visit during his walk under the given conditions. The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of houses in the neighborhood. The second line contains a single integer m (1 ≤ m ≤ 3000) — the number of roads in the neighborhood. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — indicating there is a road connecting the house u and house v. There could be multiple roads between two houses and self-loops. Output the maximum number of different houses John can visit during his walk. In the first example John can start from house 1, visit houses 2, 3, 4, and return to house 1 covering all roads in the neighborhood twice. In the second example John can start from house 1, visit house 2, and return to house 1, thus visiting all roads twice.","solution":"def max_houses_to_visit(n, m, roads): from collections import defaultdict, deque graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs(start): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True count = 0 while queue: node = queue.popleft() count += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return count component_sizes = [] visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: size = bfs(i) component_sizes.append(size) # Maximum number of different houses John can visit is the size of the # largest connected component with more than one house. max_houses = max(component_sizes) if max_houses == 1: return 1 else: return max_houses # Example usage: # n = 4 # m = 5 # roads = [(1, 2), (2, 3), (3, 1), (3, 4), (4, 1)] # print(max_houses_to_visit(n, m, roads)) # Output: 4"},{"question":"Mila is fond of reading and has a large collection of books on her bookshelf. Each book has a specific thickness and height. Mila wants to organize her bookshelf such that it looks aesthetically pleasing. She decides that she needs to create a stack of books such that the total height of the stack does not exceed a given value, and the width of the stack should be minimized. She has already sorted the books by thickness in non-decreasing order. Help Mila determine the minimum width of the stack that maximizes the number of books without exceeding the given height. You are given the number of books, and each book\'s dimensions (thickness and height), as well as the maximum allowable stack height. Your task is to calculate the minimum total width of a valid stack that uses the maximum number of books possible. The first line of the input contains two integers n and h_max (1 ≤ n ≤ 10^5 and 1 ≤ h_max ≤ 10^9) — the number of books and the maximum allowable height of the stack. For the next n lines, each contains two integers t_i and h_i (1 ≤ t_i, h_i ≤ 10^9) — the thickness and the height of the i-th book. The books are given in non-decreasing order of thickness. Print one integer – the minimum total width of the stack that uses the maximum number of books without exceeding the given height. Example Input: ``` 5 20 3 4 5 2 8 5 4 7 6 1 ``` Example Output: ``` 20 ``` Explanation: In this example, Mila can stack all the books as follows: - Book 1 with thickness 3 and height 4 - Book 2 with thickness 5 and height 2 - Book 3 with thickness 8 and height 5 - Book 4 with thickness 4 and height 7 - Book 5 with thickness 6 and height 1 The heights are 4 + 2 + 5 + 7 + 1 = 19, which is within the allowed height of 20. The total widths are 3 + 5 + 8 + 4 + 6 = 26, which is the minimum possible for this number of books.","solution":"def min_total_width_of_valid_stack(n, h_max, books): # Sort the books by their thickness (already guaranteed by the problem) books.sort(key=lambda x: x[0]) # Initialize variables to track the best feasible solution current_height = 0 current_width = 0 min_width = float(\'inf\') max_books_count = 0 # Iterate over every possible set of books for i in range(n): # Reset conditions for each new subset of books current_height = 0 current_width = 0 books_count = 0 # Add books to the stack until the height limit is exceeded for j in range(i, n): if current_height + books[j][1] <= h_max: current_height += books[j][1] current_width += books[j][0] books_count += 1 else: break # Update the best solution if a new optimal one is found if books_count > max_books_count: max_books_count = books_count min_width = current_width elif books_count == max_books_count: min_width = min(min_width, current_width) return min_width"},{"question":"Given a binary tree, find the length of the longest path such that each node in the path has the same value. This path may or may not pass through the root of the tree. Your task is to write a function that, given the root of a binary tree, returns the length of this path (the number of edges in the path). # Note: - The number of nodes in the tree is in the range [0, 10^5]. - The input tree is non-empty and each node has an integer value. # Example: Input: ``` 1 / 4 5 / 4 4 5 ``` Output: 2 Explanation: Here the longest path with the same value is along the nodes with value 4 --> 4 --> 4. Input: ``` 5 / 6 6 / 1 2 6 ``` Output: 1 Explanation: Here the longest path with the same value is along the nodes with value 6 --> 6. # Function signature: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longestUnivaluePath(root: TreeNode) -> int: pass ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longestUnivaluePath(root: TreeNode) -> int: Given the root of a binary tree, returns the length of the longest path where each node in the path has the same value. def dfs(node): nonlocal longest if not node: return 0 # Check paths in the left and right subtrees. left_length = dfs(node.left) right_length = dfs(node.right) # Paths that include \'node\' itself. left_path = right_path = 0 if node.left and node.left.val == node.val: left_path = left_length + 1 if node.right and node.right.val == node.val: right_path = right_length + 1 # Update the longest univalue path found so far. longest = max(longest, left_path + right_path) # Return the length of the longest path going through \'node\' to its parent. return max(left_path, right_path) longest = 0 dfs(root) return longest"},{"question":"You are given an array of integers which represents the height of students in a class. The teacher wants to divide the students into multiple groups such that each group has exactly three students, and the heights of students in each group should be in strictly increasing order. Your task is to determine the maximum number of such groups that can be formed. The first line of input contains an integer n (3 le n le 100,000) — the number of students in the class. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) — the heights of the students. Output a single integer — the maximum number of groups that can be formed following the given criteria. # Example Input ``` 6 1 2 3 4 5 6 ``` Output ``` 2 ``` Explanation: - One possible way to form the groups is (1, 2, 3) and (4, 5, 6). Both groups have heights in strictly increasing order, and we have two groups in total. Another example: Input ``` 7 4 2 1 3 6 5 7 ``` Output ``` 2 ``` Explanation: - One possible way to form the groups is (1, 3, 4) and (5, 6, 7). Both groups have heights in strictly increasing order, and we can form two groups in total.","solution":"def max_groups(n, heights): Determines the maximum number of groups of exactly three students each, where the heights of students in each group are in strictly increasing order. # Sort the heights in non-decreasing order heights.sort() # Calculate the maximum number of groups return n // 3"},{"question":"The kingdom of Avalon is under attack by a mysterious force that has deployed enchanted barriers around the city. The barriers can be represented as a series of consecutive walls, each with an associated height. To breach the barrier and save Avalon, the knights must take down the highest possible wall in a single strike. To achieve this, they need to solve a problem involving a sliding window over the heights of the walls. Given an array of integers representing the heights of the walls and a sliding window of size k, you need to determine the maximum height within each sliding window as it moves from the start of the array to the end. **Input**: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of heights and the size of the sliding window. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the walls. **Output**: - Print n - k + 1 integers, each representing the maximum height within each sliding window of size k in the order of their appearance from left to right. **Example**: ``` Input: 8 3 1 3 1 2 0 5 3 2 Output: 3 3 2 5 5 5 ``` Explanation: - The first window is [1, 3, 1], the maximum is 3. - The second window is [3, 1, 2], the maximum is 3. - The third window is [1, 2, 0], the maximum is 2. - The fourth window is [2, 0, 5], the maximum is 5. - The fifth window is [0, 5, 3], the maximum is 5. - The sixth window is [5, 3, 2], the maximum is 5. **Constraints**: - You need to consider the efficiency of your solution, ensuring it runs in practical time for large values of n and k.","solution":"from collections import deque def max_sliding_window(nums, k): Finds the maximum height within each sliding window of size k. Parameters: nums (list): list of integers representing the heights of the walls. k (int): size of the sliding window Returns: list: list of integers representing the maximum height within each sliding window # Result list to store max values of each window if not nums or k <= 0: return [] result = [] deq = deque() # Stores indices of the elements of the current window for i in range(len(nums)): # Remove indices of elements not in the current window while deq and deq[0] < i - k + 1: deq.popleft() # Remove elements that are smaller than the current element # from the tail of the deque while deq and nums[deq[-1]] < nums[i]: deq.pop() # Add current element\'s index to the deque deq.append(i) # Add the maximum element of the current window to the result list if i >= k - 1: result.append(nums[deq[0]]) return result # Example Usage n, k = 8, 3 heights = [1, 3, 1, 2, 0, 5, 3, 2] print(max_sliding_window(heights, k)) # Output should be: [3, 3, 2, 5, 5, 5]"},{"question":"You are given an encoded string. You need to decode the string using the following steps: 1. Find the contiguous substring consisting only of digits (0-9). 2. Multiply that substring by 2. 3. Replace the original numeric substring in the string with the result from step 2. If multiple numeric substrings exist, only process the first occurrence. If the string doesn\'t contain any digits, return the string unchanged. # Input - The first and only line of input contains a string consisting of lowercase English alphabet characters and digits (0-9). The length of the string is at most 100 characters. # Output - Output the modified string according to the rules described. # Example Input 1 ``` abc123def ``` Output 1 ``` abc246def ``` Input 2 ``` a1b2c3 ``` Output 2 ``` a2b2c3 ``` Input 3 ``` abcdef ``` Output 3 ``` abcdef ``` Explanation - In the first example, \'123\' is the first numeric substring, doubling it gives \'246\', and replacing \'123\' with \'246\' results in \'abc246def\'. - In the second example, \'1\' is the first numeric substring, doubling it gives \'2\', and replacing \'1\' with \'2\' results in \'a2b2c3\'. - In the third example, there are no digits in the string, so the output is unchanged.","solution":"def decode_string(s): import re match = re.search(r\'d+\', s) if match: numeric_substring = match.group() doubled_value = str(int(numeric_substring) * 2) return s[:match.start()] + doubled_value + s[match.end():] return s"},{"question":"Given an undirected graph with n nodes and m edges, you need to find the number of connected components. A connected component is a maximal set of nodes such that there is a path between any two nodes within this set. The first line contains two integers n (1 ≤ n ≤ 100,000) and m (0 ≤ m ≤ 200,000) — the number of nodes and the number of edges. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — an edge between node u and node v. Print a single integer — the number of connected components in the graph. **Input:** 5 3 1 2 2 3 4 5 **Output:** 2 **Explanation:** In the first example, nodes 1, 2, and 3 are part of one connected component, while nodes 4 and 5 form another connected component, resulting in a total of 2 connected components. In the second example, there are no edges, so the number of connected components equals the number of nodes, which is 5.","solution":"def count_connected_components(n, m, edges): from collections import defaultdict, deque # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) # To keep track of visited nodes def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbour in adj_list[node]: if not visited[neighbour]: visited[neighbour] = True queue.append(neighbour) connected_components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i) connected_components += 1 return connected_components"},{"question":"Julia is trying to keep track of her expenses through a month and wants to categorize them into different groups: Food, Entertainment, Miscellaneous, and Rent. She logs her expenses daily in the form of a string `s` that contains various lowercase characters representing different categories. Here are the mappings: - \'f\' for Food - \'e\' for Entertainment - \'m\' for Miscellaneous - \'r\' for Rent Julia wants to find out the maximum number of consecutive days she spent only on a single category. Write a program that takes the string `s` as input and outputs the maximum length of a substring consisting of the same character. Provide the input and output format as follows: - The first line contains the string `s` (1 ≤ |s| ≤ 100) representing the log of expenses. Print a single integer — the maximum length of a substring made of the same character. Example 1: Input: ``` ffeemmrrrrrrmffee ``` Output: ``` 6 ``` Example 2: Input: ``` mefmemeffrr ``` Output: ``` 2 ```","solution":"def max_consecutive_category_length(s): Returns the maximum length of a substring consisting of the same character. max_length = 0 current_length = 1 # Iterate through the string to find consecutive substrings of the same character for i in range(1, len(s)): if s[i] == s[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 # Check the last subsequence length max_length = max(max_length, current_length) return max_length"},{"question":"In a kingdom far away, there lives a dragon protected by an array of magical shields. Each shield has a specific strength value, and to defeat the dragon, all the shields must be destroyed in a particular sequence. Your task is to compute the strength of each shield after the attack, where each attack reduces the strength of the shield by the strength of the next shield. Given an integer n, representing the number of shields, and an array of n integers, where the i-th integer (strength[i]) represents the strength of the i-th shield, calculate the resulting strength of each shield after the attack. The attack starts from the first shield and proceeds to the last one. For each i-th shield, its final strength is reduced by the strength of the following shield, except for the last shield which is not attacked. The strength of a shield cannot be less than zero. Input - The first line contains an integer n (2 ≤ n ≤ 100000), the number of shields. - The second line contains n space-separated integers strength1, strength2, …, strengthn (1 ≤ strengthi ≤ 109) representing the strengths of each shield. Output - Print n space-separated integers, where each integer represents the final strength of the i-th shield after the attacks. Example Input: 4 10 7 5 2 Output: 3 2 3 2 Explanation: - The first shield\'s final strength is 10 - 7 = 3. - The second shield\'s final strength is 7 - 5 = 2. - The third shield\'s final strength is 5 - 2 = 3. - The fourth shield remains unchanged, therefore its strength is 2.","solution":"def compute_final_shield_strengths(n, strengths): final_strengths = [ max(0, strengths[i] - strengths[i + 1]) if i < n - 1 else strengths[i] for i in range(n) ] return final_strengths"},{"question":"Given an array of n integers, you need to perform a special kind of sorting operation. Your goal is to transform the array into a sorted sequence in non-decreasing order with the minimum number of operations. An operation consists of the following steps: 1. Choose two different elements in the array. 2. Swap the positions of these two elements. You need to determine the minimum number of swaps required to sort the array in non-decreasing order. The first line of input contains a single integer n (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the elements of the array. Print a single integer — the minimum number of swaps required to sort the array in non-decreasing order. # Example Input ``` 4 4 3 2 1 ``` Output ``` 2 ``` Explanation: The array [4, 3, 2, 1] can be sorted in two swaps: Swap 4 and 1 -> [1, 3, 2, 4] Swap 3 and 2 -> [1, 2, 3, 4]","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array in non-decreasing order. n = len(arr) arrpos = list(enumerate(arr)) arrpos.sort(key=lambda it: it[1]) vis = {k: False for k in range(n)} ans = 0 for i in range(n): if vis[i] or arrpos[i][0] == i: continue cycle_size = 0 j = i while not vis[j]: vis[j] = True j = arrpos[j][0] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"Given a binary tree, your task is to find the number of \\"good\\" nodes in it. A node X in a binary tree is \\"good\\" if in the path from the root to X, there are no nodes with values greater than the value of X. Your task is to count how many \\"good\\" nodes exist in the binary tree. A binary tree is defined as follows: - Each node has a value. - Each node may have left and/or right children. The binary tree is represented by nodes, where the root node is given as input. Consider the following structure for a binary tree node: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Input The binary tree root node. # Output Return the number of good nodes in the binary tree. # Example ```python # Example Tree Structure # 3 # / # 1 4 # / / # 3 1 5 root = TreeNode(3) root.left = TreeNode(1) root.right = TreeNode(4) root.left.left = TreeNode(3) root.right.left = TreeNode(1) root.right.right = TreeNode(5) # Expected Output: 4 ``` Note: In the path from the root to any \\"good\\" node, all ancestor nodes should have values that are not greater than the value of the current node. Output the total number of such nodes.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def count_good_nodes(root: TreeNode) -> int: def dfs(node, max_val): if not node: return 0 good = 1 if node.val >= max_val else 0 max_val = max(max_val, node.val) good += dfs(node.left, max_val) good += dfs(node.right, max_val) return good return dfs(root, float(\'-inf\'))"},{"question":"Masha is a fan of palindromic numbers and wishes to generate them using a special transformation. A number is called palindromic if it reads the same forwards and backwards, like 121 or 1331. Masha\'s transformation allows her to change a single digit in the number to any other digit between 0 to 9. Using this transformation, Masha wants to find the minimum number of transformations required to convert a given number into a palindrome. You are given a string s of length n (1 ≤ n ≤ 1000) representing a number. Find the minimum number of transformations needed to make the number a palindrome. The first line contains an integer n — the length of the string s. The second line contains the string s. Print one integer: the minimum number of transformations required to make the number a palindrome. # Example Input: ``` 5 12321 ``` Output: ``` 0 ``` Input: ``` 4 1321 ``` Output: ``` 1 ``` Notice how converting \'1321\' to \'1221\' requires only one transformation (changing the \'3\' to \'2\').","solution":"def min_transformations_to_palindrome(n, s): Returns the minimum number of transformations required to convert the given string s into a palindrome. Parameters: n (int): Length of the string s (str): The string representing the number Returns: int: Minimum number of transformations count = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: count += 1 return count"},{"question":"Levko has recently discovered a new operation called \\"flip\\" that he can apply to his array consisting of n integers a1, a2, ..., an. The flip operation consists of reversing a subarray [i, j], where 1 ≤ i ≤ j ≤ n. Levko can perform exactly k flip operations on his array. After k flip operations, he wonders what the array will look like if he chooses optimal operations to achieve a lexicographically smallest array. Help Levko determine the resulting lexicographically smallest array after exactly k flip operations. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2000) — the size of the array and the number of flip operations, respectively. The second line contains n space-separated integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the array. Output the lexicographically smallest array after exactly k flip operations. Example: Input: 5 1 3 1 4 1 5 Output: 1 3 4 1 5 In this example, Levko performs a single flip operation to reverse the subarray from the 1st to the 2nd element, resulting in the array [1, 3, 4, 1, 5].","solution":"def lexicographically_smallest_array(n, k, arr): if k == 1: # Perform only one flip to get the smallest array min_arr = arr[:] for i in range(n): for j in range(i, n): flipped = arr[:i] + arr[i:j+1][::-1] + arr[j+1:] if flipped < min_arr: min_arr = flipped return min_arr else: # If k > 1, simply sort the array to get the smallest lexicographical order return sorted(arr)"},{"question":"In a faraway land, there is a field filled with magic stones. Each stone has a certain power value. The field is represented as a linear array of n stones, and the power values of these stones are given as an array p of length n. You can pick any two adjacent stones and merge them into one stone. The power value of the new merged stone is the sum of the power values of the two original stones. This process reduces the total number of stones by one. You need to continue merging stones until only one stone is left. Your task is to determine the maximum possible power value of the single remaining stone after performing any sequence of merges. The first line contains a single integer n (2 ≤ n ≤ 2·10^5) — the number of stones in the field. The second line contains n space-separated integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9) — the power values of the stones. Output a single integer — the maximum possible power value of the remaining stone after merging all stones into one. Consider the following example: In the first example, you can first merge stones with values 1 and 2 (resulting power value = 3), and then merge this new stone with the stone with value 3 (resulting power value = 6). In the second example, you can merge stones with values 5 and 5 (resulting power value = 10), and then merge this new stone with the stone with value 1 (resulting power value = 11), and finally, merge this new stone with the stone with value 1 (resulting power value = 12).","solution":"def max_power_value(n, p): Returns the maximum possible power value of the remaining stone after merging all stones into one. # The maximum possible power value of the remaining stone is just the sum of all stones. return sum(p)"},{"question":"Alice is interested in playing with sequences. She has two integer sequences of length N, and she wants to transform one sequence into the other. However, she can only perform one type of operation any number of times: she can choose an index i (1 leq i < N) and swap the values at indices i and i+1. Given the two sequences, help Alice determine the minimum number of operations required to transform the first sequence into the second sequence. If it\'s impossible, output -1. The first line of the input contains an integer N (1 leq N leq 3000), the length of the sequences. The second line contains N integers representing the first sequence. The third line contains N integers representing the second sequence. Output a single integer — the minimum number of operations required to transform the first sequence into the second sequence. If it’s impossible, output -1. # Example: Input: ``` 5 1 3 4 2 5 5 1 2 4 3 ``` Output: ``` 7 ``` Input: ``` 3 1 2 3 3 2 1 ``` Output: ``` 3 ``` Note: The output for the first example is 7 because a possible sequence of swaps can transform the first sequence into the second within 7 operations. The second example requires 3 swaps to reverse the sequence.","solution":"def min_swaps_to_transform(N, seq1, seq2): Returns the minimum number of swaps required to transform seq1 into seq2. If it\'s impossible, return -1. def is_transform_possible(seq1, seq2): return sorted(seq1) == sorted(seq2) if not is_transform_possible(seq1, seq2): return -1 swaps = 0 seq1 = list(seq1) # Copy seq1 to mutate it separately for i in range(N): while seq1[i] != seq2[i]: swap_index = seq1.index(seq2[i], i) seq1[swap_index], seq1[swap_index - 1] = seq1[swap_index - 1], seq1[swap_index] swaps += 1 swap_index -= 1 return swaps"},{"question":"A company is organizing a coding competition where participants are required to solve various coding puzzles. Each participant is assigned a unique identifier, and they can submit their solution multiple times. The company maintains a record of all submissions in the form of an array where each entry is a tuple containing the participant\'s identifier and the submission\'s time in seconds since the start of the competition. Given the array of submissions, the organizers want to determine the maximum number of different participants who have submitted their solutions within any k-second window during the competition. Your task is to write a function that takes the array of submissions and the integer k as inputs, and returns the maximum number of different participants who have submitted their solutions in any k-second window. Input: - The first line contains two integers n and k (1 ≤ n ≤ 100,000, 1 ≤ k ≤ 100,000) — the number of submissions and the length of the time window in seconds. - The next n lines each contain two integers pi and ti (1 ≤ pi ≤ 100,000, 0 ≤ ti ≤ 1,000,000) — the participant\'s identifier and the submission time in seconds. Output: - Output a single integer, the maximum number of different participants who have submitted their solutions within any k-second window. Example: ``` Input: 6 5 1 1 2 2 1 3 3 8 2 9 3 13 Output: 2 ``` In this example, the longest window with distinct participants is from time 1 to 5 (participants 1 and 2), and no other 5-second window has more than 2 different participants.","solution":"from collections import defaultdict, deque def max_participants_in_window(submissions, k): submissions.sort(key=lambda x: x[1]) current_window = deque() participants_in_window = defaultdict(int) max_unique_participants = 0 unique_count = 0 for participant, time in submissions: current_window.append((participant, time)) if participants_in_window[participant] == 0: unique_count += 1 participants_in_window[participant] += 1 while current_window and current_window[0][1] <= time - k: old_participant, old_time = current_window.popleft() participants_in_window[old_participant] -= 1 if participants_in_window[old_participant] == 0: unique_count -= 1 max_unique_participants = max(max_unique_participants, unique_count) return max_unique_participants"},{"question":"Anna is preparing for her cooking contest and she needs to practice making recipes. She has a list of n ingredients, each with a specific quality rating. Anna wants to try out different combinations of recipes, but she only wants to choose exactly k ingredients for each recipe she practices, and she wants the total quality rating of the chosen ingredients to be as high as possible. Your task is to help Anna find the maximum total quality rating she can achieve by choosing exactly k ingredients from the n available ingredients. Anna has already sorted the ingredients by their quality ratings in descending order before giving you the list. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 105), where n is the number of ingredients and k is the number of ingredients for each recipe. The second line contains n integers q1, q2, ..., qn (1 ≤ qi ≤ 109) — the quality ratings of the ingredients, given in descending order. Print a single integer — the maximum total quality rating for the recipe consisting of exactly k ingredients. Example: Input: 5 3 90 80 60 50 40 Output: 230 Explanation: Anna can choose the ingredients with quality ratings 90, 80, and 60, resulting in a total quality rating of 230.","solution":"def max_total_quality(n, k, quality_ratings): Returns the maximum total quality rating by choosing exactly k ingredients. :param n: Total number of ingredients :param k: Number of ingredients to choose :param quality_ratings: List of quality ratings of the ingredients in descending order :return: Maximum total quality rating # Since the ingredients are already sorted in descending order, # we just need to take the first k elements and sum them up return sum(quality_ratings[:k])"},{"question":"Four friends are planning to participate in a relay race. Each participant is assigned a segment of the track to run. The total race track length is L meters, and the start and end position of each segment is given. The participants will run the segments in the order provided. Any segment can overlap with another segment, meaning multiple participants can run the same part of the track, but the finishing time is only affected by the order of the segments. To accurately predict the finishing time of the race, we need to understand the total distance that will be covered by the participants together, taking into account any overlaps in the segments they\'ll run. The goal is to find the total effective distance covered by the participants, considering overlaps where segments may partially or fully coincide. The input consists of: - The first line contains an integer L (1 ≤ L ≤ 1,000,000) — the total length of the race track. - The next line contains an integer n (1 ≤ n ≤ 100) — the number of segments. - Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ L) — the start and end points of the ith segment, where si is the point from which the i-th participant starts running, and ei is the endpoint where they finish their segment. Output a single integer — the total effective distance covered by the participants. For example: **Input:** ``` 100 3 10 30 20 50 40 70 ``` **Output:** ``` 60 ``` **Explanation:** The effective distance is 60 meters: the first segment (10-30) is 20 meters, the second segment (20-50) overlaps with the last 10 meters of the first segment and the first 10 meters of the third segment, and the third segment (40-70) overlaps with the last 10 meters of the second segment. The combined unique segments are from 10-30, 30-50, and 50-70 making a total of 60 meters.","solution":"def effective_coverage(L, n, segments): Calculates the total effective distance covered by the participants, considering overlaps. Parameters: L (int): Length of the race track. n (int): Number of segments. segments (list of tuples): Each tuple (si, ei) represents the start and end points of the segment. Returns: int: The total effective distance covered. # Initialize a Boolean array to mark covered segments on the track track_coverage = [False] * L for s, e in segments: for i in range(s, e): track_coverage[i] = True # Count the number of True values which represents the covered distance effective_distance = sum(track_coverage) return effective_distance # Example usage segments = [(10, 30), (20, 50), (40, 70)] print(effective_coverage(100, 3, segments)) # Output should be 60"},{"question":"You are given an array of integers `arr` of size `n`. Your task is to find the maximum sum of a contiguous subarray with at most one deletion. A deletion means removing one element from the subarray. Note that no element needs to be removed, and the subarray can be empty. Your goal is to output the maximum possible sum considering the option to delete at most one element for each subarray. Input - The first line contains an integer `n` (1 ≤ n ≤ 2·10^5) — the size of the array. - The second line contains `n` integers `arr_1, arr_2, ..., arr_n` (−10^4 ≤ arr_i ≤ 10^4) — the elements of the array. Output - Output a single integer, the maximum possible sum of a contiguous subarray with at most one deletion. Examples Input 5 1 -2 0 3 4 Output 8 Input 7 -1 -2 -3 -4 -5 -6 -7 Output -1 Explanation In the first example, the maximum possible sum is 8 achieved by taking the subarray `[1, -2, 0, 3, 4]`, and deleting `-2` results in the subarray `[1, 0, 3, 4]`. The sum of this subarray without deletion is 8, which is already the maximum. In the second example, since all numbers are negative, the best result is to take the single largest number `-1` without deletion.","solution":"def maximum_sum_with_one_deletion(arr): n = len(arr) if n == 0: return 0 # Initialize dp arrays dp_no_deletion = [0] * n dp_one_deletion = [0] * n dp_no_deletion[0] = arr[0] dp_one_deletion[0] = 0 # With one deletion, first element alone doesn\'t count max_sum = arr[0] for i in range(1, n): dp_no_deletion[i] = max(dp_no_deletion[i-1] + arr[i], arr[i]) dp_one_deletion[i] = max(dp_one_deletion[i-1] + arr[i], dp_no_deletion[i-1]) max_sum = max(max_sum, dp_no_deletion[i], dp_one_deletion[i]) return max_sum"},{"question":"The city of Geektown comprises **n** buildings connected by **n-1** one-way roads such that the city forms a directed acyclic graph (DAG) and there is exactly one simple path from any building to the capital building. The capital building is building number 1. Each building **i** has an integer **hi** representing its height. The city administration wants to impose a restriction on the heights of the buildings. Specifically, any path leading to the capital must be strictly ascending in terms of building heights. In other words, for any path that starts at a building and ends at the capital, the heights of the buildings along that path should form a strictly increasing sequence. Write a program that, given the heights of the buildings and the connections between them, determines if it\'s possible to assign directions to the roads such that the height restriction is satisfied. You are given the heights of the buildings in an array and the roads as a list of pairs. If it\'s possible to assign directions to the roads to satisfy the height restriction, print \\"YES\\". Otherwise, print \\"NO\\". # Input: - The first line contains a single integer **n** (2 ≤ n ≤ 1000) — the number of buildings. - The second line contains **n** integers **h1, h2, ..., hn** (1 ≤ hi ≤ 1000000) — the heights of the buildings. - Each of the next **n-1** lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing a road connecting buildings **u** and **v**. # Output: - Print \\"YES\\" if it\'s possible to assign directions to the roads such that the height restriction is satisfied. - Print \\"NO\\" otherwise. # Example: ``` Input: 5 1 2 3 4 5 1 2 1 3 3 4 3 5 Output: YES ``` Explanation: We can assign directions in the following manner: - 1 -> 2 - 1 -> 3 - 3 -> 4 - 3 -> 5 Paths to the capital will be [2, 1], [3, 1], [4, 3, 1], and [5, 3, 1], all of which are strictly ascending in terms of heights. Therefore, the output is \\"YES\\". # Note: If there are multiple valid ways to assign direction to meet the condition, any of them can be considered correct. If no valid assignment exists, print \\"NO\\".","solution":"def can_assign_directions(n, heights, roads): from collections import defaultdict, deque # Create adjacency list adj_list = defaultdict(list) for u, v in roads: adj_list[u].append(v) adj_list[v].append(u) queue = deque([(1, -1)]) # Start BFS from the capital with no parent (-1) while queue: current, parent = queue.popleft() for neighbor in adj_list[current]: if neighbor == parent: continue # If any neighbor is higher than the current, return \\"NO\\" if heights[neighbor - 1] <= heights[current - 1]: return \\"NO\\" queue.append((neighbor, current)) return \\"YES\\" # Example usage: # n = 5 # heights = [1, 2, 3, 4, 5] # roads = [(1, 2), (1, 3), (3, 4), (3, 5)] # print(can_assign_directions(n, heights, roads)) # Expected output: YES"},{"question":"In a magical forest, there are n trees aligned in a row, each having some magical berries. There are two wizards, Alice and Bob, who want to collect these berries. Alice starts from the left end of the row and Bob starts from the right end. Due to the magical nature of the forest, each tree can only be visited once, meaning Alice and Bob cannot collect berries from the same tree. When a wizard collects berries from a tree, that tree becomes inaccessible to the other wizard. You are given an array of n integers where each integer denotes the number of berries in that tree. Both wizards aim to maximize the total number of berries they collect without considering how many berries the other wizard collects. Alice can only move to the next tree to her right and Bob can only move to the next tree to his left. They can start collecting from their respective ends simultaneously. Write a program to calculate the maximum total number of berries Alice and Bob can collect together if they collect optimally under these conditions. Input: - The first line contains an integer n (2 ≤ n ≤ 100,000), the number of trees in the row. - The second line contains an array of n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000), where a_i denotes the number of berries in the i-th tree. Output: - Print a single integer, the maximum total number of berries Alice and Bob can collect together. Example: ``` Input: 5 1 2 9 4 5 Output: 21 ``` In this example, Alice can move from the left collecting berries 1, 2, 9, and Bob can move from the right collecting berries 5, 4. Their total collection is 1 + 2 + 9 + 4 + 5 = 21.","solution":"def max_berries_collect(n, berries): This function calculates the maximum total number of berries Alice and Bob can collect together if they collect optimally under the given conditions. :param n: integer, number of trees :param berries: list of integers, berries in each tree :return: integer, maximum total number of berries collected # Initializing variables to keep running total collections total_berries = sum(berries) # Return the total number of berries since they are all collected return total_berries"},{"question":"You are tasked with developing a new system for a publishing company that deals with huge influxes of books every day. The books need to be sorted onto shelves in a warehouse. Each shelf can hold a certain weight, and the goal is to maximize the number of books that can fit on a single shelf without exceeding the weight limit of the shelf. Given the weights of the books and the weight limit of the shelf, you need to determine the maximum number of books that can be placed on the shelf. Each book can only be placed once, and the order of the books does not matter. The first line of input contains two integers n and W (1 ≤ n ≤ 10^5, 1 ≤ W ≤ 10^9), where n is the number of books and W is the weight limit of the shelf. The next line contains n space-separated integers w1, w2, ..., wn (1 ≤ wi ≤ 10^9) representing the weights of the books. Output a single integer representing the maximum number of books that can be placed on the shelf without exceeding the weight limit. Example: Input 5 10 2 3 6 4 1 Output 4 Explanation: The maximum number of books that can be placed on the shelf without exceeding the weight limit of 10 is 4. The books with weights 1, 2, 3, and 4 can be placed on the shelf, and their total weight is 10.","solution":"def max_books(n, W, weights): Returns the maximum number of books that can fit on a shelf without exceeding the weight limit. Arguments: n -- number of books W -- weight limit of the shelf weights -- list of weights of the books Returns: int -- maximum number of books that can be placed on the shelf weights.sort() total_weight = 0 count = 0 for weight in weights: if total_weight + weight <= W: total_weight += weight count += 1 else: break return count"},{"question":"In Byteland, a new game has become popular among its inhabitants. The game is played on a 2-dimensional grid with \'n\' rows and \'m\' columns. Initially, the entire grid contains only the number 0 in each cell. Players take turns painting a row or a column of the grid with a new number. For each move in the game, the following operations are performed: - A player chooses a row \'r\' and a number \'x\', then all cells in the row \'r\' are filled with the number \'x\'. - Alternatively, a player can choose a column \'c\' and a number \'x\', then all cells in the column \'c\' are filled with the number \'x\'. Given the sequence of moves made during the game, your task is to determine the final state of the grid. # Input The first line of input contains three integers \'n\', \'m\', and \'q\' (1 le n, m le 1000, 1 le q le 10^6) — the number of rows, columns, and moves, respectively. Each of the next \'q\' lines contains the description of a move in the format: - \\"R r x\\" (1 ≤ r ≤ n, 0 ≤ x ≤ 10^5), which means painting the entire row \'r\' with the number \'x\'. - \\"C c x\\" (1 ≤ c ≤ m, 0 ≤ x ≤ 10^5), which means painting the entire column \'c\' with the number \'x\'. # Output Output \'n\' lines, each containing \'m\' integers, representing the final state of the grid. # Example Input ``` 3 3 4 R 1 5 C 3 7 R 3 2 C 1 6 ``` Output ``` 6 0 7 6 0 7 6 0 2 ``` Explanation - After the first move (\\"R 1 5\\"): Grid becomes: ``` 5 5 5 0 0 0 0 0 0 ``` - After the second move (\\"C 3 7\\"): Grid becomes: ``` 5 5 7 0 0 7 0 0 7 ``` - After the third move (\\"R 3 2\\"): Grid becomes: ``` 5 5 7 0 0 7 2 2 2 ``` - After the fourth move (\\"C 1 6\\"): Grid becomes: ``` 6 5 7 6 0 7 6 2 2 ```","solution":"def final_grid_state(n, m, q, moves): # Initialize the grid with zeros grid = [[0] * m for _ in range(n)] # Process each move for move in moves: cmd, idx, x = move idx = int(idx) - 1 # Convert 1-based index to 0-based index for grid access x = int(x) if cmd == \'R\': # Paint the entire row `idx` with `x` for j in range(m): grid[idx][j] = x elif cmd == \'C\': # Paint the entire column `idx` with `x` for i in range(n): grid[i][idx] = x return grid"},{"question":"Given the following problem statement, create and solve the respective coding task. There are n checkpoints arranged in a straight line, numbered from 1 to n. Each checkpoint has a unique height given by an array h of length n, where h[i] represents the height of the i-th checkpoint. Your task is to find the number of pairs (i, j) such that 1 ≤ i < j ≤ n and the height of the j-th checkpoint is strictly greater than that of the i-th checkpoint, i.e., h[j] > h[i]. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of checkpoints. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the checkpoints. Print a single integer - the number of valid pairs (i, j). # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 10 ``` Explanation There are 10 valid pairs: - (1,2), (1,3), (1,4), (1,5) - (2,3), (2,4), (2,5) - (3,4), (3,5) - (4,5) Note The given heights form an increasing sequence, so every pair (i, j) where i < j is valid.","solution":"def count_valid_pairs(n, heights): Returns the number of valid pairs (i, j) such that 1 ≤ i < j ≤ n and heights[j] > heights[i]. count = 0 for i in range(n): for j in range(i + 1, n): if heights[j] > heights[i]: count += 1 return count"},{"question":"The kingdom of Flatland is a perfectly flat plane filled with intricate road networks connecting various towns. The king of Flatland has a peculiar fondness for squares, and he wants to identify all the possible squares that can be formed by towns connected through the road networks. You are given n towns labeled from 1 to n. Each town i has its coordinates represented by (xi, yi). You need to determine if there exists any set of 4 distinct towns that form the vertices of a square. A square is defined as a quadrilateral with all sides equal in length and all angles equal to 90 degrees. The first line contains a single integer n (4 ≤ n ≤ 5000) — the total number of towns. Each of the next n lines contains two integers xi and yi (|xi|, |yi| ≤ 10^4) — the coordinates of the ith town. Print \\"YES\\" (without quotes) if there exists a set of 4 distinct towns that form a square. Otherwise, print \\"NO\\". Example: Input: 5 0 0 0 1 1 0 1 1 2 2 Output: YES Explanation: The towns at coordinates (0,0), (0,1), (1,0), and (1,1) form a square.","solution":"import math from itertools import combinations def is_square(p1, p2, p3, p4): Check if the given four points form a square points = [p1, p2, p3, p4] distances = sorted([distance(points[i], points[j]) for i in range(4) for j in range(i + 1, 4)]) return distances[0] > 0 and distances[0] == distances[1] == distances[2] == distances[3] and distances[4] == distances[5] and distances[4] == 2 * distances[0] def distance(p1, p2): Calculate the squared distance between two points to avoid floating point precision issues return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2 def four_towns_form_square(n, towns): Determines if there exists any set of 4 distinct towns that form the vertices of a square for combo in combinations(towns, 4): if is_square(*combo): return \\"YES\\" return \\"NO\\" def process_flatland_kingdom(data): Process the input data to determine if four towns form a square lines = data.strip().split(\'n\') n = int(lines[0]) towns = [] for i in range(1, n + 1): xi, yi = map(int, lines[i].split()) towns.append((xi, yi)) return four_towns_form_square(n, towns)"},{"question":"You are given a matrix of size `n x m` filled with integers. You need to perform multiple queries on this matrix. Each query is described by two pairs of coordinates `(x1, y1)` and `(x2, y2)` which represent the top-left and bottom-right corners of a submatrix. For each query, you need to find the sum of all integers within the specified submatrix. The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 1000`) — the number of rows and columns in the matrix. The next `n` lines contain `m` integers each, representing the matrix. The following line contains one integer `q` (`1 ≤ q ≤ 100000`) — the number of queries. Each of the next `q` lines contains four integers `x1`, `y1`, `x2`, `y2` (`1 ≤ x1 ≤ x2 ≤ n`, `1 ≤ y1 ≤ y2 ≤ m`) which represent the coordinates of the top-left and bottom-right corners of the submatrix. Output `q` lines, each containing one integer — the sum of the integers in the corresponding submatrix. To handle the queries efficiently, you can preprocess the matrix using a prefix sum array. # Example **Input** ``` 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 ``` **Output** ``` 12 28 ``` # Explanation For the first query, the submatrix from (1, 1) to (2, 2) includes the elements `[1, 2, 4, 5]`, and their sum is `12`. For the second query, the submatrix from (2, 2) to (3, 3) includes the elements `[5, 6, 8, 9]`, and their sum is `28`.","solution":"def preprocess_matrix(matrix, n, m): prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = matrix[i-1][j-1] + prefix_sum[i][j-1] + prefix_sum[i-1][j] - prefix_sum[i-1][j-1] return prefix_sum def query_sum(prefix_sum, x1, y1, x2, y2): return prefix_sum[x2][y2] - prefix_sum[x1-1][y2] - prefix_sum[x2][y1-1] + prefix_sum[x1-1][y1-1] def matrix_queries(matrix, queries): n = len(matrix) m = len(matrix[0]) prefix_sum = preprocess_matrix(matrix, n, m) results = [] for x1, y1, x2, y2 in queries: results.append(query_sum(prefix_sum, x1, y1, x2, y2)) return results"},{"question":"You are given a list of n integers and a positive integer m. Your task is to find the maximum sum of a subarray with no more than m contiguous elements. The first line of input contains two integers n and m (1 le n le 2 cdot 10^5, 1 le m le n). The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the list. Print one integer, the maximum sum of a subarray with no more than m contiguous elements. # Example Input: ```python 5 2 1 2 -1 2 -1 ``` Output: ```python 3 ``` Explanation: The subarray with the maximum sum and no more than 2 contiguous elements is [1, 2]. The sum is 3.","solution":"def max_sum_subarray(n, m, arr): max_sum = float(\'-inf\') current_sum = 0 for start in range(n): current_sum = 0 for end in range(start, min(start + m, n)): current_sum += arr[end] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Tom is a sailor who is navigating his boat and needs your help to reach back to the dock. The navigation system provides a sequence of directional commands where each command can be \'U\' (up), \'D\' (down), \'L\' (left), or \'R\' (right). Tom needs to follow these commands starting from his current position at (0, 0) on a Cartesian plane. Your task is to determine if Tom can reach back to the dock at (0, 0) by following all the given navigation commands in sequence. If Tom ends up at the dock, print \\"At the dock\\"; otherwise, print \\"Away from the dock\\". The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of commands. The second line contains a string of length n consisting of characters \'U\', \'D\', \'L\', and \'R\'. For example: ``` Input: 6 UUDDLR Output: At the dock Input: 5 UDDLL Output: Away from the dock ``` Tom starts at (0, 0) and following the commands would either bring him back to the starting position or not.","solution":"def navigate_to_dock(n, commands): Determines if Tom can reach back to the dock at (0, 0) after following the commands. Parameters: n (int): The number of commands. commands (str): The sequence of navigation commands. Returns: str: \\"At the dock\\" if Tom reaches back to the dock, otherwise \\"Away from the dock\\". x, y = 0, 0 # Starting coordinates for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 if x == 0 and y == 0: return \\"At the dock\\" else: return \\"Away from the dock\\""},{"question":"In a distant land, there exists a series of mysterious doorways, each of which can be unlocked using a special key pattern. The doorways are arranged in a linear fashion, and an adventurer must find the best path to unlock all doorways one by one in the specified order. Each doorway has a unique key pattern that consists of certain steps to be followed, and the adventurer has to match them exactly. The challenge is to determine the longest time the adventurer could take to complete these patterns if he chooses the optimal way to perform the steps for all doorways. Each step in a key pattern is an integer that indicates the time taken to execute that particular step. The adventurer can switch from one step to the next in the key pattern of a doorway directly which means switching between doorways does not take any extra time. The first line of the input contains two integers, n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000), indicating the number of doorways and the maximum number of steps across all doorways, respectively. The next n lines describe the key patterns for the doorways. Each line starts with an integer ki (1 ≤ ki ≤ m) which represents the number of steps in the ith doorway, followed by ki integers ai,1, ai,2, ..., ai,ki representing the time taken for each step in the key pattern of the ith doorway. Your task is to find the longest time the adventurer could take to complete the key patterns of all doorways in the optimal way and print that time. If all key patterns are empty, print \\"0\\". Example: Input: 3 5 3 2 3 1 2 4 6 1 5 Output: 15 Explanation: The optimal way to complete the key patterns could be as follows: - Complete the steps of the first doorway: 2 + 3 + 1 = 6. - Then complete the steps of the second doorway: 4 + 6 = 10. - Finally, complete the steps of the third doorway: 5. The total time is 6 + 10 + 5 = 21, which is the longest time to complete the doorways if taken optimally.","solution":"def longest_time_to_unlock(n, m, patterns): total_time = 0 for pattern in patterns: total_time += sum(pattern) return total_time"},{"question":"Alex is participating in a competitive programming contest. As part of one challenge, he is given an array of n integers and asked to perform a series of operations. In each operation, Alex can select any continuous subarray and add a constant integer value to each element of the subarray. The goal is to make all the elements of the array equal using the minimum number of operations. Write a program to determine the minimum number of operations needed to make all elements of the given array equal. The first line contains an integer n (1 ≤ n ≤ 100,000), the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. Output a single integer, the minimum number of operations needed to make all elements of the array equal. For example, given the array [1, 5, 7, 10, 13], the output should be 4. Explanation: 1. Subtract 3 from elements at indices [3, 4] to get [1, 5, 7, 7, 10]. 2. Add 2 to element at index [1] to get [3, 5, 7, 7, 10]. 3. Subtract 2 from elements at indices [1, 2, 3, 4, 5] to get [1, 3, 5, 5, 8]. 4. Subtract 7 from elements at indices [3, 4, 5] to get [1, 1, 1, 1, 1]. Thus, the minimum number of operations is 4.","solution":"def min_operations_to_equalize(n, arr): Finds the minimum number of operations required to make all elements of the array equal. Parameters: n : int : number of elements in the array arr : List[int] : list of integers Returns: int : minimum number of operations # Initialize the operation counter ops = 0 # Traverse the array for i in range(1, n): if arr[i] != arr[i-1]: ops += 1 return ops"},{"question":"In a large university, there is a popular social networking app called UniConnect. In this app, each student is uniquely represented by an ID number, and friendships between students can be represented as undirected edges in a graph. Unfortunately, the university\'s network team has observed a potential security issue: isolated groups of friends (i.e., connected components) could be used for isolated communication without proper monitoring. They want to ensure that the number of connected components in the friendship graph does not exceed a certain threshold. You are tasked with determining how many additional edges (friendships) are required to reduce the number of connected components in the friendship graph to no more than a given threshold. The input consists of: - The first line contains three integers: `n`, `m`, and `k` (1 ≤ `n` ≤ 10^5, 0 ≤ `m` ≤ 2 * 10^5, 1 ≤ `k` ≤ `n`), where `n` is the number of students, `m` is the number of existing friendships, and `k` is the desired number of connected components. - The following `m` lines each contain two integers, `u` and `v` (1 ≤ `u`, `v` ≤ `n`), indicating that student `u` and student `v` are friends. Your output should be: - A single integer representing the minimum number of additional edges needed to reduce the number of connected components to no more than `k`. - If it is impossible to achieve, print `-1`. For example, consider the following input: ``` 6 3 2 1 2 2 3 4 5 ``` The output should be `1` because you can add one edge between nodes 3 and 4 to create a single connected component of {1, 2, 3, 4, 5} and another component of {6}. The total number of connected components is now 2, matching the required threshold.","solution":"def find_parent(parent, i): if parent[i] == i: return i return find_parent(parent, parent[i]) def union(parent, rank, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if xroot != yroot: if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def min_additional_edges_to_reduce_components(n, m, k, friendships): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) for u, v in friendships: union(parent, rank, u - 1, v - 1) unique_components = len(set(find_parent(parent, i) for i in range(n))) if unique_components <= k: return 0 needed_edges = unique_components - k if needed_edges > m: return -1 return needed_edges"},{"question":"Xenia is practicing multiplication now! Her teacher wrote down a product of multiple numbers on the board, but didn\'t communicate the order. The product should be represented in non-decreasing order of factors to help Xenia easily understand the multiplication process. For example, if the product is written as \\"2*3*1\\", Xenia wants to see it as \\"1*2*3\\". You\'ve been given the product expression that Xenia needs to interpret. Rearrange the factors and print the product in such a way that Xenia can calculate the result easily. The first line contains a non-empty string s — the product Xenia needs to interpret. String s contains no spaces. It only contains digits and characters \\"*\\". Besides, string s is a correct product of numbers. String s is at most 100 characters long. Print the new product that Xenia can calculate.","solution":"def rearrange_multiplication(s): Rearranges the factors in the multiplication string `s` in non-decreasing order. Parameters: s (str): A string representing a product with factors separated by \'*\'. Returns: str: The rearranged product string with factors in non-decreasing order. # Split the string by \'*\', sort the numbers, and join them back with \'*\' factors = s.split(\'*\') factors_sorted = sorted(factors, key=int) return \'*\'.join(factors_sorted)"},{"question":"You are given an array of integers and you want to find the maximum product of any three numbers in the array. The product of three numbers a, b, and c is defined as a*b*c. Given an array of integers, find and print the maximum product of any three numbers in the array. The first line of input contains a single integer n (3 ≤ n ≤ 10^5) -- the number of elements in the array. The second line contains n integers a_i (-10^4 ≤ a_i ≤ 10^4), the elements of the array. Print a single integer -- the maximum product of any three numbers in the array. **Example:** ``` Input: 5 -10 -10 5 2 1 Output: 500 ``` **Explanation of the Example:** The maximum product can be obtained by multiplying -10, -10, and 5 as their product is 500, which is the maximum achievable product with any three numbers from the array.","solution":"def maximum_product_of_three_numbers(arr): Given an array of integers, finds and returns the maximum product of any three numbers in the array. if len(arr) < 3: raise ValueError(\\"The input array must have at least three elements.\\") arr.sort() # Maximum product can be either (largest three numbers) or (two smallest and largest number) return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])"},{"question":"Ella is an avid gamer who has recently discovered an interesting game involving numbering sequences. The game\'s objective is to generate a sequence of positive integers such that it meets specific criteria. Ella wants to construct an array where the sum of the elements in the array is divisible by a given integer k. You are given an integer n representing the total number of elements Ella wants in her array and an integer k. Your task is to determine whether it is possible to construct such an array where the sum of the elements is divisible by k, and if so, output one such array. If there are multiple solutions, print any of them. If no such array exists, print -1. # Input The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 10^9) — the number of elements in the array and the integer by which the sum of the array must be divisible. # Output If it is possible to construct such an array, output the n integers that form the array. Otherwise, output -1. # Examples Example 1 **Input:** ``` 3 5 ``` **Output:** ``` 1 2 2 ``` **Explanation:** The sum of the array is 1 + 2 + 2 = 5, which is divisible by 5. Example 2 **Input:** ``` 4 7 ``` **Output:** ``` 1 1 2 3 ``` **Explanation:** The sum of the array is 1 + 1 + 2 + 3 = 7, which is divisible by 7. Example 3 **Input:** ``` 2 11 ``` **Output:** ``` 4 7 ``` **Explanation:** The sum of the array is 4 + 7 = 11, which is divisible by 11. Example 4 **Input:** ``` 1 9 ``` **Output:** ``` 9 ``` **Explanation:** The sum of the array is 9, which is divisible by 9. Example 5 **Input:** ``` 3 1 ``` **Output:** ``` 1 1 1 ``` **Explanation:** The sum of the array is 1 + 1 + 1 = 3, which is divisible by 1.","solution":"def construct_array(n, k): Constructs an array of n positive integers such that the sum is divisible by k. If no such array exists, returns -1. if n == 1: return [k] if k > 0 else -1 seq = [1] * (n-1) sum_so_far = sum(seq) # We need to find the last element such that total sum is divisible by k last_element = k - (sum_so_far % k) if last_element == 0: last_element = k # Avoid adding zero as a positive number is required. seq.append(last_element) return seq"},{"question":"Given a grid of size n x m filled with non-negative integers, you can start at any cell in the grid. Your goal is to reach the last cell (bottom right corner) of the grid, moving only right or downwards. Your task is to find the maximum score you can achieve, where the score is the sum of the values of the cells you visit on your path. However, there\'s a twist. If you move right from cell (i, j) to cell (i, j+1), you can collect the value of the next cell (i, j+1). If you move down from cell (i, j) to cell (i+1, j), you can collect the value of the next cell (i+1, j). You can keep moving either right or down, without revisiting any cell apart from your starting cell. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) – the dimensions of the grid. The next n lines each contain m integers – the scores of the cells in the grid. Output a single integer – the maximum score you can achieve to reach the bottom right cell from any starting cell. **Example:** ``` Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 29 Explanation: One of the optimal paths is starting at cell (2, 0) with score 7, then moving right to cell (2, 1) with score 8, then again moving right to cell (2, 2) with score 9, and finally, moving up to cell (1, 2) with score 6. ``` **Note:** - You can start at any cell. - You can only move right or down. - Return the maximum possible score to reach the bottom right cell.","solution":"def max_score_path(grid): Finds the maximum score to reach the bottom right cell in the grid, starting from any cell, and only moving right or down. n = len(grid) m = len(grid[0]) # Create a DP table with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Initialize the DP table with values of the grid for i in range(n): for j in range(m): dp[i][j] = grid[i][j] # Fill the DP table with maximum path sums for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], dp[i - 1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j - 1] + grid[i][j]) # Find the maximum score to reach the bottom-right corner max_score = float(\'-inf\') for i in range(n): for j in range(m): if i == n - 1 and j == m - 1: max_score = max(max_score, dp[i][j]) return max_score"},{"question":"Alex has a list of n different types of coins, each with an unlimited supply. He needs to form an exact amount m using these coins. Each type of coin has a distinctive denomination. Help Alex determine the minimum number of coins required to form the amount m. If it is not possible to form the amount m using the available coin types, return -1. The first line of input contains two integers n (1 ≤ n ≤ 100) and m (0 ≤ m ≤ 10000), which represent the number of different types of coins and the total amount of money he needs to form respectively. The second line contains n space-separated integers, each ai (1 ≤ ai ≤ 1000), which represent the denominations of the coins. Output the minimum number of coins needed to make up the amount m. If it is not possible to form the amount, output -1. Example: Input: 3 11 1 2 5 Output: 3 Explanation: Alex can form the amount 11 using coins with denominations 5, 5, and 1, resulting in a total of 3 coins.","solution":"def min_coins(n, m, coins): Determine the minimum number of coins needed to make up the amount m. If it is not possible to form the amount m, return -1. Parameters: n (int): Number of different types of coins. m (int): The total amount of money. coins (list of int): The denominations of the coins. Returns: int: Minimum number of coins required to make up the amount m, or -1 if it is not possible. # Initialize a list to store the minimum coins required for all amounts from 0 to m dp = [float(\'inf\')] * (m + 1) dp[0] = 0 # Zero coins are needed to make the amount 0 # Compute the minimum coins required for each amount from 1 to m for i in range(1, m + 1): for coin in coins: if i >= coin: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[m] if dp[m] != float(\'inf\') else -1"},{"question":"A robot is planning its movements in a 2D grid. The grid consists of cells arranged in n rows and m columns. Each cell is either open (.) or blocked (#). The robot can move up, down, left, or right to an adjacent open cell, but it cannot move through blocked cells. The robot starts at the top-left corner of the grid and wants to reach the bottom-right corner. Given the grid, determine if the robot can reach the bottom-right corner from the top-left corner. If the robot can reach the destination, print \\"YES\\". Otherwise, print \\"NO\\". The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains a string of m characters, representing the grid. Each character is either \'.\' (denoting an open cell) or \'#\' (denoting a blocked cell). The robot starts in the cell (1, 1) (top-left corner) and wants to reach the cell (n, m) (bottom-right corner). Both the start and end cells are guaranteed to be open (i.e., they contain \'.\'). Output \\"YES\\" if the robot can reach the bottom-right corner, and \\"NO\\" otherwise. Example input: 4 4 .... .#.. ..#. .... Example output: YES","solution":"def can_reach_bottom_right(n, m, grid): from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(-1,0), (1,0), (0,-1), (0,1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"A large auction house has decided to use a new bidding system. There are `n` bidders, each bidding on a certain number of items in an auction that includes `m` unique items. Each bidder places bids on a subset of these items, and each bid has a value. Your task is to determine the highest bid for each item in the auction. The first line contains two integers `n` and `m` (1 ≤ `n`, `m` ≤ 10^5) — the number of bidders and the number of unique items in the auction. The next `n` lines describe the bids placed by the bidders. Each line starts with an integer `k` (1 ≤ `k` ≤ `m`), representing the number of items the bidder is placing bids on. Then `k` pairs of integers follow, each pair in the form of `item_i value_i` (1 ≤ `item_i` ≤ `m`, 1 ≤ `value_i` ≤ 10^9) indicating that the bidder placed a bid of `value_i` on `item_i`. Output `m` integers, where the i-th integer represents the highest bid placed on the i-th item. If an item receives no bids, its highest bid should be considered as 0. Example: **Input:** ``` 3 5 2 1 100 2 200 3 2 150 3 250 4 300 1 5 400 ``` **Output:** ``` 100 200 250 300 400 ``` This example means: - The first bidder placed bids of 100 on item 1 and 200 on item 2. - The second bidder placed bids of 150 on item 2, 250 on item 3, and 300 on item 4. - The third bidder placed a bid of 400 on item 5. The output shows the highest bids for items 1 to 5 respectively: 100, 200, 250, 300, and 400.","solution":"def highest_bids(n, m, bids): Determine the highest bid for each item in the auction. Parameters: n (int): Number of bidders m (int): Number of unique items bids (list of lists): Bidders\' bids. Each bidder\'s bids are a list where the first element is the number of items they are bidding on, followed by pairs of item number and bid value. Returns: list: List of highest bids for each item from 1 to m. # Initialize the list to store the highest bid for each item with 0s highest_bids = [0] * m for bid in bids: k = bid[0] for i in range(k): item = bid[2 * i + 1] - 1 value = bid[2 * i + 2] if value > highest_bids[item]: highest_bids[item] = value return highest_bids"},{"question":"Given an integer array `nums` and an integer `k`, return the number of unique k-diff pairs in the array. A k-diff pair is defined as an integer pair (nums[i], nums[j]), where `nums[i]` and `nums[j]` are both in the array and their difference is `k` (i.e., `nums[i] - nums[j] = k`). Note: - A pair (nums[i], nums[j]) is considered unique if the first value, `nums[i]`, is smaller than the second value, `nums[j]`. The function signature is: ```python def find_pairs(nums: List[int], k: int) -> int: ``` The input parameters are: - `nums`: List[int] - a list of integers, where 1 <= len(nums) <= 10^4 and -10^7 <= nums[i] <= 10^7 - `k`: int - the difference to look for, where 0 <= k <= 10^7 Return: - an integer representing the number of unique k-diff pairs in the array. Example 1: ``` Input: nums = [3, 1, 4, 1, 5], k = 2 Output: 2 Explanation: There are two 2-diff pairs, (1, 3) and (3, 5). ``` Example 2: ``` Input: nums = [1, 2, 3, 4, 5], k = 1 Output: 4 Explanation: There are four 1-diff pairs (1, 2), (2, 3), (3, 4) and (4, 5). ``` Example 3: ``` Input: nums = [1, 3, 1, 5, 4], k = 0 Output: 1 Explanation: There is one 0-diff pair (1, 1). ``` Example 4: ``` Input: nums = [1, 1, 1, 1, 1], k = 0 Output: 1 Explanation: There is one 0-diff pair (1, 1). ```","solution":"from typing import List def find_pairs(nums: List[int], k: int) -> int: if k < 0: return 0 pairs_count = 0 nums_count = {} for num in nums: nums_count[num] = nums_count.get(num, 0) + 1 if k == 0: # We look for numbers which appear at least 2 times pairs_count = sum(1 for count in nums_count.values() if count > 1) else: # We look for unique pairs (num, num + k) for num in nums_count: if (num + k) in nums_count: pairs_count += 1 return pairs_count"},{"question":"Valentino is a bike enthusiast and has recently started keeping track of his weekly cycling trips. He records the distance he travels each day of the week. At the end of the week, he wants to know the maximum distance he has traveled without taking a rest day in between. Given the distances for each day of the week, you need to help him find the maximum distance traveled in a contiguous sequence of days. Write a program that reads an array of distances for each day of the week and outputs the maximum distance traveled without taking a rest. Input: - A single line containing 7 integers separated by spaces: the distances for each day of the week (from Monday to Sunday). Each distance is a non-negative integer and does not exceed 10^6. Output: - A single integer representing the maximum distance traveled without taking a rest day (a day where the distance is zero). Example: Input 4 0 3 6 2 0 5 Output 11 Explanation: In the given example, the maximum distance without taking a rest day is achieved by traveling from Wednesday to Thursday (3 + 6 + 2 = 11).","solution":"def max_contiguous_distance(distances): Returns the maximum distance traveled without taking a rest day given the distances for each day of the week. max_distance = 0 current_distance = 0 for distance in distances: if distance > 0: current_distance += distance else: if current_distance > max_distance: max_distance = current_distance current_distance = 0 # Check the last contiguous sequence if current_distance > max_distance: max_distance = current_distance return max_distance"},{"question":"Farmer John has a large orchard containing N trees arranged in a line. Each tree has a certain number of apples hanging from it. Farmer John wants to pick apples from these trees in such a way that he fetches as many apples as possible. However, he can\'t just pick apples from any set of trees. He can only pick from a contiguous segment of these trees. To further complicate his task, the number of apples in each tree changes daily according to a periodic system. Specifically, for each tree i, the number of apples on it can be described as a value from a periodic sequence of numbers with length T for the next M days. Thus, for each tree i, we are given a sequence of T integers where the number of apples on tree i on day j is equal to the sequence value at index ( (j - 1) % T ) + 1. Farmer John wants you to help him determine the maximum number of apples he can pick during the first day, as well as the day on which this maximum number is the largest within the next M days. If there are multiple such days, return the smallest such day. The first line of input contains three integers N, T, and M (1 leq N, T, M leq 10^5). The next N lines each contain T integers that describe the number of apples for a tree for each of the days in the periodic sequence. Output two integers: the maximum number of apples that can be picked on the first day, and the smallest day within the first M days on which this maximum number is the largest. Example: ``` Input: 3 3 5 4 2 1 3 5 1 6 7 8 Output: 18 3 ``` Explanation: For Day 1: - Sequence for tree 1: 4 - Sequence for tree 2: 3 - Sequence for tree 3: 6 Maximum contiguous sum for this day: 4 + 3 + 6 = 13 For Day 2: - Sequence for tree 1: 2 - Sequence for tree 2: 5 - Sequence for tree 3: 7 Maximum contiguous sum for this day: 2 + 5 + 7 = 14 For Day 3: - Sequence for tree 1: 1 - Sequence for tree 2: 1 - Sequence for tree 3: 8 Maximum contiguous sum for this day: 1 + 1 + 8 = 10 For Day 4 (repeats Day 1 sequence): - Sequence for tree 1: 4 - Sequence for tree 2: 3 - Sequence for tree 3: 6 Maximum contiguous sum for this day: 4 + 3 + 6 = 13 For Day 5 (repeats Day 2 sequence): - Sequence for tree 1: 2 - Sequence for tree 2: 5 - Sequence for tree 3: 7 Maximum contiguous sum for this day: 2 + 5 + 7 = 14 Thus, the highest maximum sum during any day within the first 5 days is 14, which occurs on day 2 and day 5. Hence the smallest such day is 2. So, the output is: ``` 13 1 ```","solution":"def max_apples(N, T, M, apples): max_sum = 0 best_day = 1 prefix_sums = [0] * N for i in range(N): prefix_sums[i] = sum(apples[i][(d % T)] for d in range(T)) # Initialize to first day\'s sum day_apple_sums = [sum(apples[i][0] for i in range(N))] for day in range(2, M + 1): sum_apples = 0 for tree in range(N): sum_apples += apples[tree][(day - 1) % T] day_apple_sums.append(sum_apples) if sum_apples > max_sum: max_sum = sum_apples best_day = day return day_apple_sums[0], best_day # Example usage: # N = 3 # T = 3 # M = 5 # apples = [[4, 2, 1], [3, 5, 1], [6, 7, 8]] # print(max_apples(N, T, M, apples)) # Output should be (13, 2)"},{"question":"You have been given a list of integers that represent a sequence of operations to be performed on a stack. The operations are represented by integers in the following manner: - A positive integer `x` (1 ≤ x ≤ 10^9) means `push x` onto the stack. - The integer `-1` means `pop` the top element from the stack. Write a program to simulate these operations and then output the elements of the stack in order from top to bottom. If during any `pop` operation the stack is empty, ignore that operation. The first line of the input contains a single integer `n` (1 ≤ n ≤ 2·10^5) — the number of operations. The second line contains `n` integers separated by spaces, representing the sequence of operations. Output the elements of the stack in order from top to bottom. If the stack is empty after all operations, print \\"The stack is empty.\\" (without the quotes). Example: Input: 6 1 2 -1 3 4 -1 Output: 3 1","solution":"def simulate_stack_operations(n, operations): stack = [] for op in operations: if op == -1: if stack: stack.pop() else: stack.append(op) if stack: return stack[::-1] else: return \\"The stack is empty.\\""},{"question":"You are given a list of distinct integers which represent the height of different trees in a forest. You want to find two specific trees such that: 1. One of the trees is exactly the Kth tallest tree in the forest. 2. The second tree is the shortest in the forest that has a height greater than the Kth tallest tree. Write a function that returns the heights of these two trees. If there is no such pair of trees, return -1. The first line contains two integers n and K (2 ≤ n ≤ 10^5, 1 ≤ K ≤ n) — the number of trees in the forest and the Kth tallest tree to look for. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — representing the heights of the trees in the forest. Output two integers denoting the height of the Kth tallest tree and the shortest tree taller than the Kth tallest tree respectively. If no such pair exists, output -1. Example: Input: 6 3 4 2 7 1 3 6 Output: 4 6 Explanation: In the given example, the heights of the trees are [4, 2, 7, 1, 3, 6]. When sorted, they become [1, 2, 3, 4, 6, 7]. The 3rd tallest tree is 4. The shortest tree taller than 4 is 6.","solution":"def find_kth_tallest_and_next_greater(n, K, heights): heights.sort(reverse=True) # Sort the heights in descending order kth_tallest = heights[K-1] # Get the Kth tallest next_taller = float(\'inf\') # Initialize next taller height with infinity for height in heights: if height > kth_tallest: next_taller = min(next_taller, height) if next_taller == float(\'inf\'): return kth_tallest, -1 else: return kth_tallest, next_taller"},{"question":"You are given two integer arrays, nums1 and nums2, both of which are sorted in non-decreasing order. Your task is to find the intersection of these two arrays and return it as a new sorted array. Note that each element in the result should appear as many times as it shows in both arrays. Write a program that takes the following input and produces the required output. The first line contains an integer, m, representing the number of elements in the first array, nums1 (1 ≤ m ≤ 1000). The second line contains m space-separated integers representing the elements of nums1. The third line contains an integer, n, representing the number of elements in the second array, nums2 (1 ≤ n ≤ 1000). The fourth line contains n space-separated integers representing the elements of nums2. Print the intersection of the two arrays as a space-separated list of integers in non-decreasing order. If there are no intersecting elements, print an empty line. Example: Input: 4 1 2 2 3 5 2 2 3 4 5 Output: 2 2 3 In the example, the intersecting elements are [2, 2, 3].","solution":"def intersect(nums1, nums2): Return the intersection of two arrays as a sorted array. Each element in the result should appear as many times as it shows in both arrays. result = [] i, j = 0, 0 while i < len(nums1) and j < len(nums2): if nums1[i] < nums2[j]: i += 1 elif nums1[i] > nums2[j]: j += 1 else: result.append(nums1[i]) i += 1 j += 1 return result # Example usage (comment out the following lines during actual unit testing) if __name__ == \\"__main__\\": m = int(input().strip()) nums1 = list(map(int, input().strip().split())) n = int(input().strip()) nums2 = list(map(int, input().strip().split())) intersection = intersect(nums1, nums2) print(\' \'.join(map(str, intersection)))"},{"question":"You are given an array of integers and you need to find out the number of \\"peaks\\" in this array. An element of the array is considered as a peak if it is greater than its immediate neighbors. More formally, element `a[i]` is a peak if and only if `a[i-1] < a[i] > a[i+1]`. The first and last elements of the array can\'t be peaks because they don\'t have both neighbors defined. Your task is to count how many elements are peaks in the given array. The first line of input contains an integer `n` (3 ≤ `n` ≤ 10^5), the number of elements in the array. The second line contains `n` space-separated integers representing the elements of the array, where each integer `a[i]` (1 ≤ `a[i]` ≤ 10^9) represents an element of the array. Print the number of peaks in the array in a single line. Example: ``` Input: 5 1 3 20 4 1 Output: 1 Explanation: There is only one peak in the array: 20. It is greater than its left neighbor (3) and right neighbor (4). ``` ``` Input: 6 10 20 15 25 10 5 Output: 2 Explanation: There are two peaks in the array: 20 (greater than 10 and 15) and 25 (greater than 15 and 10). ```","solution":"def count_peaks(arr): Returns the count of peak elements in the array. n = len(arr) if n < 3: return 0 peak_count = 0 for i in range(1, n-1): if arr[i-1] < arr[i] > arr[i+1]: peak_count += 1 return peak_count"},{"question":"In a coding competition, each contestant needs to solve several problems. As part of the criteria, the total points a contestant earns is recorded. Each problem has a different point value, and some problems yield negative points if incorrectly solved. The final score for each contestant is the sum of the points from all attempted problems. Given multiple test cases, each representing a contestant\'s scores for all problems they have attempted, determine if the contestant\'s final score is a negative value. The first line contains the number of test cases t (1 leq t leq 100). Description of the t test cases follows. The first line of each test case contains an integer n (1 leq n leq 100). The second line of each test case contains n integers where each integer represents the score for a problem p_i (-100 leq p_i leq 100). For each test case, print \\"Yes\\" if the contestant\'s final score is negative. Otherwise, print \\"No\\". You can print each letter in any case (upper or lower).","solution":"def is_final_score_negative(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] scores = test_cases[i][1] if sum(scores) < 0: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given an integer array a of length n and an integer k. Your task is to check whether there exists a subsequence of array a of length exactly k such that the sum of its elements is even. A subsequence of an array is a sequence that can be derived from the array by deleting some or none of the elements without changing the order of the remaining elements. The first line of the input contains two integers n (1 le n le 10^5) — the number of elements in the array, and k (1 le k le n) — the length of the desired subsequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. Print \\"YES\\" (without quotes) if there exists a subsequence of length exactly k such that the sum of its elements is even, otherwise print \\"NO\\". You can print each letter in any case (upper or lower). In the first example, a subsequence of length 3 such that the sum of its elements is even exists: [1,2,7]. In the second example, there is no subsequence of length 2 such that the sum of its elements is even.","solution":"def even_sum_subsequence_exists(n, k, a): Determines whether there exists a subsequence of array `a` of length `k` such that the sum of its elements is even. :param n: int, the number of elements in the array `a` :param k: int, the length of the desired subsequence :param a: list of int, the elements of the array :return: str, \\"YES\\" if such a subsequence exists, \\"NO\\" otherwise even_count = sum(1 for x in a if x % 2 == 0) odd_count = n - even_count if k == 1 and any(x % 2 == 0 for x in a): return \\"YES\\" if even_count > 0 and odd_count > 0 and k != n: return \\"YES\\" if even_count > 0 and k % 2 == 0: return \\"YES\\" return \\"NO\\""},{"question":"Given an array of positive integers, you need to determine the minimum number of operations required to make all the elements in the array equal. In one operation, you can increment or decrement any element of the array by 1. For example, given the array [1, 2, 3], you can convert all the elements to 2 with two operations: increment 1 by 1 and decrement 3 by 1. Input: - The first line contains a single integer T (1 ≤ T ≤ 1000), the number of test cases. - Each test case starts with an integer N (1 ≤ N ≤ 100,000), the number of elements in the array. - The second line of each test case contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9), the elements of the array. Output: - For each test case, output a single integer, the minimum number of operations required to make all the elements equal. Example: Input: 2 3 1 2 3 4 1 2 4 6 Output: 2 7 Explanation: - In the first test case, the array [1, 2, 3] can be transformed into [2, 2, 2] with 2 operations. - In the second test case, the array [1, 2, 4, 6] can be transformed into [3, 3, 3, 3] with 7 operations.","solution":"def min_operations_to_equal_elements(T, test_cases): def min_operations(arr): median = sorted(arr)[len(arr) // 2] return sum(abs(x - median) for x in arr) results = [] for i in range(T): N, array = test_cases[i] result = min_operations(array) results.append(result) return results # Example usage # T = 2 # test_cases = [ # (3, [1, 2, 3]), # (4, [1, 2, 4, 6]) # ] # print(min_operations_to_equal_elements(T, test_cases)) # Output: [2, 7]"},{"question":"Alex is a photographer and wants to create a large panorama using multiple images of the same landscape. Each photograph captures a portion of the landscape, and Alex needs to determine the maximum number of photos that can be stitched together. Each photo has a width and a starting position on the x-axis. Two photos can be stitched together if they overlap or touch at least 1 unit on the x-axis. The first line contains one integer n (1 ≤ n ≤ 5000) — the number of photos. Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ 10^9) — the starting and ending positions of the i-th photo on the x-axis. Print the maximum number of photos that can be stitched together to form a continuous panorama. For example: Input: 5 1 3 2 5 6 9 8 10 10 12 Output: 3 Explanation: The photos can be stitched together in the following combinations: - Photos at positions [1, 3], [2, 5], and [6, 9] can be stitched together to form a continuous panorama. - Photos at positions [6, 9], [8, 10], and [10, 12] can also be stitched together to form another continuous panorama. In the given sample, the maximum number of photos that can be stitched together consecutively is 3.","solution":"def max_photos_to_stitch(n, photos): Return the maximum number of photos that can be stitched together to form a continuous panorama. :param n: int - number of photos :param photos: List[Tuple[int, int]] - list of pairs representing the start and end positions of the photos :return: int - maximum number of photos that can be stitched together # Sort the photos by their start position photos.sort() # Initialize the maximum count and the end position of the last stitched photo max_count = 0 last_end = float(\'-inf\') # Initialize a counter for the current segment of stitched photos current_count = 0 for start, end in photos: if start <= last_end: # If the current photo overlaps or touches the last one last_end = max(last_end, end) # Update the end of the current stitched panorama current_count += 1 else: max_count = max(max_count, current_count) # Update the maximum count last_end = end # Start a new stitched segment current_count = 1 # Update the maximum count once more for the last segment max_count = max(max_count, current_count) return max_count"},{"question":"In the Kingdom of Codeville, there are various coded messages each consisting of letters from \'A\' to \'Z\'. Each message needs to be decoded to its original form. The decoding process is based on a simple rule: Each letter represents its position in the alphabet (A=1, B=2, ..., Z=26). The task is to decode a given series of encoded numbers back into a string of characters. The encoded message is provided as a string of numbers separated by spaces, and we need to convert these numbers back to their corresponding letters to form the decoded message. The first line of input contains an integer ( n ) (( 1 leq n leq 1000 )) — the number of encoded letters in the message. The second line contains ( n ) space-separated integers, ( a_1, a_2, ldots, a_n ) (( 1 leq a_i leq 26 )) — the encoded message as numbers. Print the decoded message as a single string of uppercase letters. For example, given the input: ``` 5 8 5 12 12 15 ``` The output should be \\"HELLO\\". Given a different input: ``` 3 3 1 20 ``` The output should be \\"CAT\\".","solution":"def decode_message(n, encoded_numbers): Decode a series of encoded numbers into a string of characters. :param n: integer, the number of encoded letters in the message :param encoded_numbers: list of integers, the encoded message as numbers :return: string, the decoded message as a single string of uppercase letters decoded_message = \'\'.join(chr(num + 64) for num in encoded_numbers) return decoded_message # Example usage: # n = 5 # encoded_numbers = [8, 5, 12, 12, 15] # Result: \\"HELLO\\""},{"question":"You are given a directed graph consisting of n vertices and m edges. Your task is to find the maximum number of edges that can be removed so that the graph becomes acyclic. A graph is acyclic if it does not contain any cycles. A cycle is a path that starts and ends at the same vertex, with all edges distinct. The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 5000) — the number of vertices and edges, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating a directed edge from vertex u to vertex v. Output a single integer — the maximum number of edges that can be removed to make the graph acyclic. # Example: Input: ``` 4 4 1 2 2 3 3 4 4 2 ``` Output: ``` 1 ``` Explanation: One possible edge to remove is (4, 2) to make the graph acyclic.","solution":"def max_edges_to_remove_to_make_acyclic(n, m, edges): Returns the maximum number of edges that can be removed to make the directed graph acyclic. from collections import defaultdict, deque def find_cycle(graph, n): in_degree = [0] * n for u in range(n): for v in graph[u]: in_degree[v] += 1 queue = deque([u for u in range(n) if in_degree[u] == 0]) while queue: u = queue.popleft() for v in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: queue.append(v) for i in range(n): if in_degree[i] > 0: return True return False graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) if not find_cycle(graph, n): return 0 # Already acyclic # Count minimum number of edges in a feedback edge set def dfs(v, visited, stack_set): visited[v] = True stack_set[v] = True cycle_edges = 0 for neigh in graph[v]: if not visited[neigh]: cycle_edges += dfs(neigh, visited, stack_set) elif stack_set[neigh]: cycle_edges += 1 stack_set[v] = False return cycle_edges visited = [False] * n stack_set = [False] * n min_edges_to_remove = 0 for i in range(n): if not visited[i]: min_edges_to_remove += dfs(i, visited, stack_set) return min_edges_to_remove"},{"question":"You are given a tree with `n` nodes rooted at node 1. Each node has a certain number of apples. You need to calculate the maximum number of apples you can collect by starting at the root and visiting each node exactly once. The first line contains an integer `n` (1 ≤ n ≤ 100,000) denoting the number of nodes in the tree. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 1,000) denoting the number of apples at each node. The i-th integer represents the number of apples at node i. Each of the next `n - 1` lines contains two integers `ui` and `vi` (1 ≤ ui, vi ≤ n) denoting an edge between nodes `ui` and `vi`. Print a single integer denoting the maximum number of apples you can collect. **Example:** Input: ``` 5 3 2 4 1 5 1 2 1 3 3 4 3 5 ``` Output: ``` 15 ``` In this example, you start at node 1 with 3 apples, then you proceed to node 2 collecting 2 apples, return to node 1 and move to node 3 collecting 4 apples. From node 3, you move to node 4 collecting 1 apple, then back to node 3 and finally to node 5 collecting 5 apples. The total number of apples collected is 3 + 2 + 4 + 1 + 5 = 15.","solution":"def max_apples(n, apples, edges): from collections import defaultdict # Adjacency list to represent tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # To keep track of visited nodes visited = [False] * (n + 1) def dfs(node): visited[node] = True total_apples = apples[node - 1] # adjust for 1-based index for neighbor in tree[node]: if not visited[neighbor]: total_apples += dfs(neighbor) return total_apples return dfs(1) # Example usage n = 5 apples = [3, 2, 4, 1, 5] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] print(max_apples(n, apples, edges)) # Output: 15"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid contains either a land cell represented by a \'1\' or a water cell represented by a \'0\'. An island is defined as a group of \'1\'s (land cells) connected horizontally or vertically. You need to determine the number of distinct islands in the grid. Two islands are considered distinct if and only if they do not overlap and are separated by water cells. Write a function that takes an n times m grid and returns the number of distinct islands. # Input Format - The first line contains two space-separated integers n and m (1 le n, m le 300) — the number of rows and columns in the grid. - The next n lines each contain a string of length m consisting of \'0\'s and \'1\'s. # Output Format - Print one integer — the number of distinct islands in the grid. # Example Input ``` 4 5 11000 11000 00100 00011 ``` Output ``` 3 ``` Explanation There are three distinct islands in the given grid. The first island is formed by the cluster of land cells at the top-left corner (first two rows), the second island is the single cell in the third row, and the third island is in the bottom-right corner (last row). # Notes - The problem can be solved using Breadth-First Search (BFS) or Depth-First Search (DFS) to explore each island. - Once an island is identified, mark its cells to avoid counting it again.","solution":"def count_distinct_islands(grid): n = len(grid) m = len(grid[0]) def dfs(i, j): stack = [(i, j)] while stack: x, y = stack.pop() if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'0\': continue grid[x][y] = \'0\' # mark the land cell as visited stack.extend([(x-1, y), (x+1, y), (x, y-1), (x, y+1)]) num_islands = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': num_islands += 1 dfs(i, j) return num_islands"},{"question":"A research institute is conducting an experiment in which they need to simulate the spread of a disease in a community. The community is represented as a grid of size n x m (1 ≤ n, m ≤ 100). Each cell in the grid is a person, and can either be healthy (\'H\'), infected (\'I\'), or an empty space (\'.\') where no person resides. An infected person can spread the disease to a healthy person in the neighboring cells (up, down, left, right) in one step. Your task is to determine the minimum number of steps required to infect all possible healthy people in the grid. If any healthy person cannot be infected, print -1. The first line of the input contains two integers n and m — the number of rows and columns in the grid. The next n lines each contain m characters representing the grid. Output the minimum number of steps required to infect all possible healthy people, or -1 if it is not possible. # Examples Input: 3 4 H H . I . H H . . . I . Output: 3 Input: 2 2 H H H I Output: 2 Input: 3 3 H H H H . H H H H Output: -1","solution":"from collections import deque def min_steps_to_infect(n, m, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque() steps = [[-1] * m for _ in range(n)] healthy_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'I\': queue.append((i, j)) steps[i][j] = 0 elif grid[i][j] == \'H\': healthy_count += 1 if healthy_count == 0: return 0 min_steps = 0 while queue: x, y = queue.popleft() current_step = steps[x][y] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'H\' and steps[nx][ny] == -1: steps[nx][ny] = current_step + 1 min_steps = max(min_steps, steps[nx][ny]) queue.append((nx, ny)) healthy_count -= 1 return min_steps if healthy_count == 0 else -1"},{"question":"It\'s been noticed that in an alternate universe, numbers sometimes love to nest within each other. Given a number, you should find out how many times you can nest it within itself by continually dividing by a fixed divisor ( k ) until the result is no longer a whole number. Essentially, for a given ( n ) and ( k ), find the highest power ( p ) such that ( n ) can be divided by ( k^p ) resulting in a whole number. The first line contains a single integer ( t ) (( 1 le t le 1000 )) — the number of test cases. Each of the next ( t ) lines contains two integers ( n ) and ( k ) (( 1 le n le 10^9 ); ( 2 le k le 1000 )) — the number and the divisor for the corresponding test case. For each test case, print a single integer ( p ) — the highest power such that ( n ) divided by ( k^p ) is still a whole number. **Example:** Input: ``` 3 100 2 81 3 250 5 ``` Output: ``` 2 4 3 ``` **Explanation:** For the first input case, ( 100 div 2^2 = 25 ) which is a whole number and ( 100 div 2^3 = 12.5 ) which is not a whole number. Hence, ( p = 2 ). For the second input case, ( 81 div 3^4 = 1 ) which is a whole number and ( 81 div 3^5 = 0.37 ) which is not a whole number. Hence, ( p = 4 ). For the third input case, ( 250 div 5^3 = 2 ) which is a whole number and ( 250 div 5^4 = 0.4 ) which is not a whole number. Hence, ( p = 3 ).","solution":"def highest_power(n, k): Finds the highest power p such that n can be divided by k^p resulting in a whole number. p = 0 while n % (k ** (p + 1)) == 0: p += 1 return p def process_test_cases(test_cases): Function to process multiple test cases. results = [] for n, k in test_cases: results.append(highest_power(n, k)) return results # Example usage: # t = 3 # test_cases = [(100, 2), (81, 3), (250, 5)] # result = process_test_cases(test_cases) # print(result) # Output should be [2, 4, 3]"},{"question":"A company has N employees numbered from 1 to N. Each employee has a different level of productivity. The company wants to organize the employees into teams such that the productivity level of each team is maximized. A team can consist of only one employee, but the total number of teams should be minimized. To make a team, you can select a contiguous subset of employees from the list. The productivity of a team is calculated as the sum of productivity levels of all employees in that team. However, the team formation is structured by specific rules: 1. Every team must contain at least one odd productivity level employee. 2. You cannot have two consecutive teams both of which consist solely of employees with even productivity levels. Given the productivity levels of N employees, your task is to determine the maximum possible total productivity across all teams following the rules mentioned above. The first line contains one integer N (1 ≤ N ≤ 100,000) — the number of employees. The second line contains N integers p1, p2, ..., pN (1 ≤ pi ≤ 10,000) — the productivity levels of the employees. Print the maximum possible total productivity of the company following the rules stated above. **Example:** Input: ``` 6 1 2 3 4 5 6 ``` Output: ``` 21 ``` **Explanation:** One optimal way to form the teams is: - Team 1: Employees 1 (productivity 1) - Team 2: Employees 2 to 6 (productivity 2 + 3 + 4 + 5 + 6 = 20) Thus, the total productivity is 1 + 20 = 21.","solution":"def max_total_productivity(n, productivity_levels): odd_present = any(p % 2 != 0 for p in productivity_levels) if not odd_present: raise ValueError(\\"No valid teams possible as there are no odd productivity levels.\\") total_productivity = 0 current_team_productivity = 0 for p in productivity_levels: if p % 2 != 0: if current_team_productivity > 0: total_productivity += current_team_productivity current_team_productivity = 0 total_productivity += p else: current_team_productivity += p total_productivity += current_team_productivity # adding the leftover team at the end if any return total_productivity"},{"question":"You are given an integer array `arr` of length `n` and an integer `k`. An array is called \\"k-sorted\\" if, after sorting it, the maximum distance any element has moved from its original position is at most `k`. Your task is to determine whether the given array is k-sorted. The first line contains two integers `n` and `k` (1 le n le 100000, 0 le k le n) — the length of the array and the value of `k`. The second line contains `n` integers `a_1, a_2, ldots, a_n (1 le a_i le 10^9), the elements of the array. Output \\"YES\\" if the array is k-sorted, and \\"NO\\" otherwise. # Example Input: ``` 5 2 3 1 2 5 4 ``` Output: ``` YES ``` Input: ``` 5 0 4 3 2 5 1 ``` Output: ``` NO ``` # Explanation In the first example, the sorted array is `[1, 2, 3, 4, 5]`. Comparing it with the original array `[3, 1, 2, 5, 4]`: - The element 3 has moved from index 0 to index 2 (distance 2). - The element 1 has moved from index 1 to index 0 (distance 1). - The element 2 has moved from index 2 to index 1 (distance 1). - The element 5 has moved from index 3 to index 4 (distance 1). - The element 4 has moved from index 4 to index 3 (distance 1). The maximum distance any element has moved is 2, which is equal to `k`, so the array is k-sorted. In the second example, the sorted array is `[1, 2, 3, 4, 5]`. Comparing it with the original array `[4, 3, 2, 5, 1]`: - The element 4 has moved from index 0 to index 3 (distance 3). - The element 3 has moved from index 1 to index 2 (distance 1). - The element 2 has moved from index 2 to index 1 (distance 1). - The element 5 has moved from index 3 to index 4 (distance 1). - The element 1 has moved from index 4 to index 0 (distance 4). The maximum distance any element has moved is 4, which is greater than `k`=0, so the array is not k-sorted.","solution":"def is_k_sorted(n, k, arr): Determines if the given array is k-sorted. Parameters: n (int): The length of the array. k (int): The maximum allowable distance any element has moved. arr (list of int): The original array. Returns: str: \\"YES\\" if the array is k-sorted, \\"NO\\" otherwise. sorted_arr = sorted(arr) for i in range(n): if abs(arr.index(sorted_arr[i]) - i) > k: return \\"NO\\" return \\"YES\\""},{"question":"Given a binary tree T with n nodes, where each node has a unique integer value between 1 and n, determine if T contains a path that sums up to a given integer k. A path is defined as a sequence of nodes where each pair of consecutive nodes in the sequence is connected by an edge in the tree. The sum of a path is the sum of the values of the nodes in the path. The first line of the input contains two integers n and k (1 ≤ n, k ≤ 100,000) — the number of nodes in the tree and the target sum, respectively. Each of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing an edge between nodes u and v. Output \\"YES\\" if there is a path in the tree that sums up to k, and \\"NO\\" otherwise. Input example: 5 8 1 2 1 3 2 4 2 5 Output example: YES Explanation: In this example, one possible path that sums up to 8 is 1-2-5 where the sum 1 + 2 + 5 = 8. Therefore, the output is \\"YES\\".","solution":"def has_path_sum(n, k, edges): from collections import defaultdict, deque # Construct the tree from edges tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Function to check if there\'s a path that sums up to k using DFS def dfs(node, current_sum): visited.add(node) current_sum += node # If the sum equals k, return True if current_sum == k: return True # Traverse neighbors for neighbor in tree[node]: if neighbor not in visited: if dfs(neighbor, current_sum): return True return False # Initialize visited set visited = set() # Start DFS from node 1 for start_node in range(1, n+1): if dfs(start_node, 0): return \\"YES\\" visited.clear() return \\"NO\\""},{"question":"There\'s a tech conference where developers can attend a series of workshops. Each workshop takes a specific amount of time and has a fixed interest level. As time is a limited resource at the conference, developers are looking to maximize their experience by attending workshops with the highest total interest level without exceeding their available time. Given the total time available to a developer and the list of workshops, each characterized by its duration and interest level, determine the maximum total interest level a developer can achieve within the given time constraint. The input structure is as follows: The first line contains two integers, `T` and `W` (1 ≤ T ≤ 10^5, 1 ≤ W ≤ 1000) — the total time available for attending workshops and the total number of workshops. Then W lines follow, with each line containing two integers `di` and `li` (1 ≤ di ≤ T, 1 ≤ li ≤ 10^3) — the duration and the interest level of the i-th workshop. Output a single integer — the maximum total interest level a developer can achieve within the given time. **Example:** Input: ``` 10 4 1 3 2 7 3 9 4 12 ``` Output: ``` 31 ``` Explanation: In this example, the best way to maximize the total interest level is to attend workshops with durations and interest levels as follows: (1,3), (2,7), (3,9), and (4,12), which adds up to a total interest level of 31 without exceeding the total available time of 10 minutes.","solution":"def max_interest(T, W, workshops): dp = [0] * (T + 1) for duration, interest in workshops: for t in range(T, duration - 1, -1): dp[t] = max(dp[t], dp[t - duration] + interest) return dp[T]"},{"question":"You are given a list of activities that need to be scheduled within a day. Each activity has a start time and an end time. You need to determine the maximum number of non-overlapping activities that can be scheduled. An activity is defined by a start time and an end time in a 24-hour format, where 00:00 represents midnight. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of activities. The next n lines contain two space-separated strings s_i and e_i (00:00 ≤ s_i, e_i ≤ 23:59), representing the start and end times of the i-th activity. Print a single integer — the maximum number of non-overlapping activities that can be scheduled. In the first example, the maximum number of non-overlapping activities is 3. The activities can be scheduled as follows: 1. Activity from 01:00 to 02:00 2. Activity from 03:00 to 06:00 3. Activity from 07:00 to 08:00 In the second example, the only non-overlapping activity is from 00:00 to 23:59, so the answer is 1.","solution":"def max_non_overlapping_activities(n, activities): Determines the maximum number of non-overlapping activities that can be scheduled. Parameters: n (int): Number of activities. activities (list of tuples): A list of tuples where each tuple contains start and end times of an activity. Returns: int: Maximum number of non-overlapping activities. def time_to_minutes(time): h, m = map(int, time.split(\':\')) return h * 60 + m activities = [(time_to_minutes(start), time_to_minutes(end)) for start, end in activities] activities.sort(key=lambda x: x[1]) max_count = 0 last_end_time = -1 for start, end in activities: if start >= last_end_time: max_count += 1 last_end_time = end return max_count"},{"question":"You are given a string consisting of lowercase Latin letters. Your task is to find the number of distinct substrings of this string using a suffix array and longest common prefix (LCP) array. A suffix array of a string is an array of integers giving the starting positions of suffixes of the string in lexicographical order. The LCP array is an array of integers that gives the length of the longest common prefix between each pair of consecutive suffixes in the lexicographical order. For example, the string \\"banana\\" has the following suffixes in lexicographical order: [\\"a\\", \\"ana\\", \\"anana\\", \\"banana\\", \\"na\\", \\"nana\\"]. The suffix array for \\"banana\\" is [5, 3, 1, 0, 4, 2] and the corresponding LCP array is [0, 1, 3, 0, 0, 2]. Given the string, compute the number of distinct substrings each one of your suffixes contributes and sum them up to get the total number of distinct substrings. Input The input consists of a single line containing the string s (1 ≤ length of s ≤ 100000), which consists of lowercase Latin letters. Output Output a single integer, the number of distinct substrings of the given string. Example Input banana Output 15 Explanation The distinct substrings of \\"banana\\" are: \\"a\\", \\"ana\\", \\"anana\\", \\"banana\\", \\"b\\", \\"ba\\", \\"ban\\", \\"bana\\", \\"banan\\", \\"banana\\", \\"n\\", \\"na\\", \\"nan\\", \\"nana\\", \\"n\\". Therefore, the total number of distinct substrings is 15.","solution":"def suffix_array_construction(s): Constructs the suffix array of a given string s. Args: s (str): The input string. Returns: List[int]: The suffix array of s. n = len(s) suffixes = sorted(range(n), key=lambda i: s[i:]) return suffixes def lcp_array_construction(s, suffix_array): Constructs the LCP array given the string s and its suffix array. Args: s (str): The input string. suffix_array (List[int]): The suffix array of s. Returns: List[int]: The LCP array of s. n = len(s) rank = [0] * n lcp = [0] * n for i, suffix in enumerate(suffix_array): rank[suffix] = i h = 0 for i in range(n): if rank[i] > 0: j = suffix_array[rank[i] - 1] while i + h < n and j + h < n and s[i + h] == s[j + h]: h += 1 lcp[rank[i]] = h if h > 0: h -= 1 else: lcp[rank[i]] = 0 return lcp def count_distinct_substrings(s): Counts the number of distinct substrings of the input string s using its suffix array and LCP array. Args: s (str): The input string. Returns: int: The number of distinct substrings of s. n = len(s) suffix_array = suffix_array_construction(s) lcp = lcp_array_construction(s, suffix_array) total_substrings = n * (n + 1) // 2 # Total possible substrings lcp_sum = sum(lcp) # Sum of LCP array distinct_substrings = total_substrings - lcp_sum # Distinct substrings count return distinct_substrings"},{"question":"Anna has a unique type of problem where she needs to sort a list of words according to their length. However, if two words have the same length, they should appear in lexicographical order. Your task is to help Anna sort the list accordingly. You are given a list of n words. Sort the list primarily by the length of the words and secondarily by lexicographical order if two words have the same length. **Input:** - The first line contains an integer n (1 ≤ n ≤ 10000), the number of words. - The next n lines each contain a single word consisting of lowercase english letters. The length of each word does not exceed 100 characters. **Output:** - Output the sorted list of words, one word per line. **Example:** *Input:* ``` 5 apple bat banana car ant ``` *Output:* ``` ant bat car apple banana ``` **Explanation:** - \\"ant\\", \\"bat\\", and \\"car\\" have the same length, but are sorted lexicographically among themselves. - \\"apple\\" and \\"banana\\" are sorted by their lengths.","solution":"def sort_words(words): Sort a list of words primarily by length and secondarily by lexicographical order. Parameters: words (List[str]): List of words to sort. Returns: List[str]: Sorted list of words. return sorted(words, key=lambda word: (len(word), word))"},{"question":"You are a software developer in a city where autonomous drones are used to carry packages between various warehouses. Given that your company maintains a network of warehouses connected by direct routes with distinct travel times, they want to ensure efficient delivery of packages by selecting the shortest routes. Each warehouse can be represented as a node, and each direct route as an edge with a given travel time. Given an initial warehouse, determine the shortest travel time to deliver a package to all other warehouses using Dijkstra\'s algorithm. The first line of the input contains two integers, n (2 ≤ n ≤ 1000), the number of warehouses, and m (1 ≤ m ≤ 5000), the number of direct routes between the warehouses. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a direct route from warehouse u to warehouse v with a travel time of w. It is guaranteed that each pair of warehouses are connected directly by at most one route. The last line contains an integer s (1 ≤ s ≤ n), the initial warehouse from which the package delivery starts. Output n integers where the i-th integer represents the shortest travel time from the initial warehouse s to the warehouse i (if there is no path, output -1 for that warehouse). Example: Input: 5 6 1 2 2 1 3 4 2 3 1 3 4 1 2 5 5 4 5 3 1 Output: 0 2 3 4 7 In this example, the shortest travel time from warehouse 1 to warehouse 3 is 3 (via 1 -> 2 -> 3). For warehouse 4, the shortest travel time is 4 (via 1 -> 3 -> 4). Note that the travel time from warehouse 1 to itself is 0. If there is no path to a particular warehouse, output -1 for that warehouse.","solution":"import heapq def dijkstra(n, edges, s): adjacency_list = [[] for _ in range(n + 1)] for u, v, w in edges: adjacency_list[u].append((v, w)) adjacency_list[v].append((u, w)) dist = [float(\'inf\')] * (n + 1) dist[s] = 0 priority_queue = [(0, s)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > dist[current_node]: continue for neighbor, weight in adjacency_list[current_node]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [distance if distance != float(\'inf\') else -1 for distance in dist[1:]] def shortest_travel_times(n, m, routes, s): return dijkstra(n, routes, s)"},{"question":"You are organizing an event with multiple activities, each having a specific start time and end time. Your goal is to maximize the number of activities you can attend without overlapping. Each activity is represented by a start time and an end time, both in 24-hour format (HH:MM). You are given a list of activities, where each activity\'s start and end time are guaranteed to be within a single day and the end time is always after the start time. Write a program to determine the maximum number of activities you can attend. **Input:** - The first line contains an integer n (1 ≤ n ≤ 100), representing the number of activities. - Each of the next n lines contains two strings, start and end, representing the start and end times of an activity in the format HH:MM. **Output:** - Print a single integer, the maximum number of activities you can attend. **Example:** Input: ``` 5 09:00 10:00 09:30 11:30 10:15 12:00 13:00 14:00 12:30 13:30 ``` Output: ``` 3 ``` In this example, you can attend the activities from 09:00 to 10:00, 10:15 to 12:00, and 13:00 to 14:00, thus attending 3 activities in total.","solution":"def max_activities(n, activities): Returns the maximum number of non-overlapping activities that can be attended. :param n: Number of activities :param activities: List of tuples representing start and end times in HH:MM format :return: Maximum number of non-overlapping activities # Convert time strings to minutes since midnight for comparison def to_minutes(time): hours, minutes = map(int, time.split(\':\')) return hours * 60 + minutes # Convert activities to a list of tuples in minutes activities_in_minutes = [(to_minutes(start), to_minutes(end)) for start, end in activities] # Sort activities by their end times activities_in_minutes.sort(key=lambda x: x[1]) max_count = 0 last_end_time = 0 for start, end in activities_in_minutes: if start >= last_end_time: max_count += 1 last_end_time = end return max_count"},{"question":"Alice is playing a game with a string s consisting only of characters \'a\', \'b\', and \'c\'. In each move, she can select a consecutive substring of the string s that is a palindrome and remove it. Alice wins if she can make the entire string empty. Help Alice determine whether she can win the game with the given string. A string is called a palindrome if it reads the same forwards and backwards, for example, \\"abba\\" and \\"aba\\" are palindromes, while \\"abc\\" is not. Given the string s, determine if it is possible to remove palindromic substrings in such a way that the entire string becomes empty. The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 10) — the number of test cases. The first line of each test case contains a string s (1 leq |s| leq 1000) consisting of the characters \'a\', \'b\', and \'c\' only. For each test case, print \\"YES\\" if Alice can make the entire string empty, otherwise print \\"NO\\". Example: ``` Input 3 ababa a abc Output YES YES NO ``` Explanation: In the first test case, Alice can remove the palindromic substrings \\"aba\\", \\"b\\", and \\"a\\" in this order to empty the string. In the second test case, the whole string is a palindrome and can be removed in one move. In the third test case, it is impossible to make the whole string empty as there are no consecutive palindrome substrings that can completely remove the string.","solution":"def can_make_empty(s): Determines if the given string s can be made empty by removing palindromic substrings. # A string can be made empty by removing palindromic substrings # if it is itself a palindrome. def is_palindrome(s): return s == s[::-1] return \\"YES\\" if is_palindrome(s) else \\"NO\\" def process_test_cases(test_cases): results = [] for s in test_cases: results.append(can_make_empty(s)) return results"},{"question":"A musician wants to compose a melody using a specific set of notes. He has a list of notes with their respective frequencies and each note can be played any number of times in the melody. However, to make the melody sound good, the sum of the frequencies of the notes used must be as close as possible to a given target frequency without exceeding it. Given a list of notes with their frequencies and a target frequency, determine the maximum sum of frequencies that does not exceed the target frequency. The first line contains two integers n and t (1 ≤ n ≤ 100, 1 ≤ t ≤ 10^5) — the number of notes and the target frequency. The second line contains n integers f1, f2, ..., fn (1 ≤ f1, f2, ..., fn ≤ 10^4) — the frequencies of the notes. Print a single integer — the maximum sum of frequencies that does not exceed the target frequency. For example, given the input: ``` 4 50 10 20 30 40 ``` The maximum sum of frequencies that does not exceed 50 is 50, which can be achieved by choosing the notes with frequencies 10, 20, and 20.","solution":"def maximum_frequency_sum(n, t, frequencies): Returns the maximum sum of frequencies of notes that does not exceed the target frequency t. Uses Dynamic Programming to solve a variant of the Knapsack problem. :param n: int - number of notes :param t: int - target frequency :param frequencies: list of int - list of note frequencies :return: int - maximum sum of frequencies not exceeding t dp = [0] * (t + 1) for i in range(n): for j in range(t, frequencies[i] - 1, -1): dp[j] = max(dp[j], dp[j - frequencies[i]] + frequencies[i]) return dp[t]"},{"question":"Lena likes reading books and every night before bed she reads a bit. She\'s very methodical and keeps a log of her reading. Unfortunately, sometimes she forgets to log exactly how many pages she read in a day. You are given her log for a month in the form of a sequence, where each element represents the number of pages she read that day. The sequence contains integers for days when she logged the number of pages and \'?\' for days when she forgot. Lena remembers that she always reads at least one page per day and at most m pages per day. Your task is to help Lena to fill in the \'?\' values in the sequence such that the sequence remains valid with the constraints of reading between 1 and m pages each day. If there is more than one valid sequence, you can output any of them. If no valid sequence exists, print \\"No valid sequence\\". The first line contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of days in the month and the maximum number of pages Lena can read per day respectively. The second line contains a sequence of length n consisting of positive integers and \'?\' characters. Output the filled sequence if it exists, otherwise print \\"No valid sequence\\". Example input: 7 10 3 ? 8 ? 2 ? ? Example output (one possible solution): 3 5 8 4 2 7 1","solution":"def fill_reading_log(n, m, sequence): This function takes in the number of days (n), maximum pages per day (m), and the reading sequence with possible \'?\' characters. It fills in the \'?\' with valid values (between 1 and m inclusive) such that there is no day where the number of pages read violates the given constraints. :param n: int, the number of days in the month. :param m: int, the maximum pages Lena can read per day. :param sequence: list, a sequence of length n consisting of positive integers and \'?\' characters. :return: list, a filled sequence if a valid sequence exists, otherwise \\"No valid sequence\\". def is_valid(prev, next): if 1 <= prev <= m and 1 <= next <= m: return True return False filled_sequence = [] for i in range(n): if sequence[i] == \'?\': # We\'ll try to assign the smallest possible value that keeps the sequence valid for val in range(1, m+1): if (i == 0 or is_valid(filled_sequence[i-1], val)) and (i == n-1 or sequence[i+1] == \'?\' or is_valid(val, int(sequence[i+1]))): filled_sequence.append(val) break else: return \\"No valid sequence\\" else: filled_sequence.append(int(sequence[i])) return filled_sequence # Example call # n = 7, m = 10 # sequence = [3, \'?\', 8, \'?\', 2, \'?\', \'?\'] # Output could be [3, 5, 8, 4, 2, 7, 1] n = 7 m = 10 sequence = [3, \'?\', 8, \'?\', 2, \'?\', \'?\'] print(fill_reading_log(n, m, sequence))"},{"question":"You have been tasked with developing a secure system to handle user access based on a dynamic set of permissions. The system has the following operations: 1. Add a new user with a specific user ID. 2. Grant a user a specific permission. 3. Revoke a specific permission from a user. 4. Check if a user has a specific permission. Each user can have multiple permissions, and each permission is represented by a unique string. The operations will be given in a predefined format as outlined below, and you are to process each operation and properly manage the users\' permissions accordingly. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of operations. - The following n lines each contain an operation in one of the following formats: - \\"add_user <user_id>\\": Adds a new user with the given user_id (an integer between 1 and 100,000). - \\"grant_permission <user_id> <perm_name>\\": Grants the permission perm_name (a string of lowercase alpha characters) to the user with the given user_id. - \\"revoke_permission <user_id> <perm_name>\\": Revokes the permission perm_name (a string of lowercase alpha characters) from the user with the given user_id. - \\"check_permission <user_id> <perm_name>\\": Checks if the user with the given user_id has the permission perm_name, and prints \\"yes\\" if true, otherwise \\"no\\". Output: - For each \\"check_permission\\" operation, output \\"yes\\" or \\"no\\" on a new line based on whether the user has the specified permission. Example: Input: ``` 8 add_user 1 grant_permission 1 read grant_permission 1 write check_permission 1 read check_permission 1 execute revoke_permission 1 read check_permission 1 read check_permission 1 write ``` Output: ``` yes no no yes ``` Explanation: - A user with ID 1 is added. - The user is granted \\"read\\" and \\"write\\" permissions. - A check confirms the user has the \\"read\\" permission. - A check confirms the user does not have the \\"execute\\" permission. - The \\"read\\" permission is revoked from the user. - A check confirms the user no longer has the \\"read\\" permission. - A final check confirms the user still has the \\"write\\" permission.","solution":"def handle_operations(operations): Handles the operations related to user access and permissions. Args: operations (List[str]): A list of operations to be processed. Returns: List[str]: A list of results for \'check_permission\' operations. users = {} results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"add_user\\": user_id = int(parts[1]) if user_id not in users: users[user_id] = set() elif command == \\"grant_permission\\": user_id = int(parts[1]) perm_name = parts[2] if user_id in users: users[user_id].add(perm_name) elif command == \\"revoke_permission\\": user_id = int(parts[1]) perm_name = parts[2] if user_id in users and perm_name in users[user_id]: users[user_id].remove(perm_name) elif command == \\"check_permission\\": user_id = int(parts[1]) perm_name = parts[2] if user_id in users and perm_name in users[user_id]: results.append(\\"yes\\") else: results.append(\\"no\\") return results"},{"question":"Given a list of integers, your task is to sort this list in non-decreasing order. However, you must apply a custom sorting criteria where: 1. The negative numbers should appear before any positive numbers. 2. All negative numbers should be in non-decreasing order. 3. All non-negative numbers should also be in non-decreasing order. For example, if the input list is [-4, 3, -9, 0, -1, 2], the output should be [-9, -4, -1, 0, 2, 3]. # Input: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an (−10^5 ≤ ai ≤ 10^5) — the elements of the list. # Output: Print the list of integers sorted according to the custom criteria. # Sample Input: ``` 6 -4 3 -9 0 -1 2 ``` # Sample Output: ``` -9 -4 -1 0 2 3 ```","solution":"def custom_sort(nums): Sorts a list of integers such that: 1. Negative numbers appear before non-negative numbers. 2. Negative numbers are in non-decreasing order. 3. Non-negative numbers are in non-decreasing order. :param nums: List of integers :return: List of integers sorted according to the custom criteria negative_nums = sorted([num for num in nums if num < 0]) non_negative_nums = sorted([num for num in nums if num >= 0]) return negative_nums + non_negative_nums"},{"question":"You are the lead engineer in charge of designing a conveyor belt system for a large manufacturing plant. The conveyor belt can be represented as a 1D array of length n, where each element represents a distinct section of the belt designated by its index (0-based indexing). Each section of the belt can hold a maximum weight of w. Throughout the day, packages of varying weights arrive and need to be placed onto the conveyor belt. Only one package can be placed at any section at a time, and once placed, they cannot be moved. Given an array of integers representing the weights of the packages that need to be placed on the conveyor belt, determine if it is possible to place all the packages such that no section of the belt exceeds its maximum weight. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". The first line of the input contains two integers n and w (1 ≤ n ≤ 100,000; 1 ≤ w ≤ 1,000,000,000) — the length of the conveyor belt and the maximum weight each section can hold, respectively. The second line contains n integers representing the weights of the packages (1 ≤ weights[i] ≤ w). Print \\"YES\\" if all packages can be placed on the conveyor belt without any section exceeding the weight limit. Otherwise, print \\"NO\\". Example: Input: 5 10 3 8 15 2 6 Output: NO","solution":"def can_place_packages(n, w, weights): Determines if all the packages can be placed on the conveyor belt without any section exceeding the weight limit. Parameters: - n : int : the length of the conveyor belt - w : int : maximum weight each section can hold - weights : list[int] : list containing the weights of the packages Returns: - str : \\"YES\\" if all packages can be placed on the conveyor belt within the weight limit, \\"NO\\" otherwise. for weight in weights: if weight > w: return \\"NO\\" return \\"YES\\""},{"question":"Sara loves solving puzzles. On her birthday, her friends gifted her a set of jigsaw puzzle pieces, all uniquely numbered from 1 to n. Sara is a very organized person and wants to sort the pieces based on their unique numbers, but some of the pieces are hidden in drawers. To retrieve a specific piece, she has to make a query by specifying the range of drawers to search, and the system will tell her the maximum value among the pieces within that range. Help Sara by writing a program that processes her queries to find the maximum number in each specified range of drawers. The first line of the input contains a single integer n (1 ≤ n ≤ 1,000,000) — the number of drawers. The second line of the input contains n integers representing the unique numbers on the pieces in each drawer. The third line of the input contains an integer m (1 ≤ m ≤ 1,000,000) — the number of queries. Each of the next m lines describes a query with two integers l and r (1 ≤ l ≤ r ≤ n) — representing the range of drawers to search. Output m integers — the maximum numbers in the specified ranges for each query, in the order they appear in the input. For example, given the following input: ``` 5 3 8 1 6 5 3 1 3 2 5 1 5 ``` The output should be: ``` 8 8 8 ```","solution":"def process_queries(drawer_pieces, queries): Processes the list of queries to find the maximum number in each specified range of drawers. Args: drawer_pieces: List[int] - a list of integers representing the unique numbers on the pieces in each drawer. queries: List[Tuple[int, int]] - a list of tuples, each containing two integers representing the range of drawers to search. Returns: List[int] - a list of integers representing the maximum number in the specified ranges for each query. results = [] for l, r in queries: # convert l and r to zero-indexed results.append(max(drawer_pieces[l-1:r])) return results"},{"question":"Mark runs a spice shop and offers several types of spices, each with a different price and quantity. He wants to fulfill a series of customer orders as efficiently as possible. Each order specifies a desired spice type and quantity. Mark will sell as much of the requested spice as he can, but if he doesn\'t have enough in stock, he will only sell what he has left. Help Mark determine how much revenue he can earn from fulfilling a list of customer orders. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of different types of spices in Mark\'s shop. Each of the next n lines contains two integers pi and qi (1 ≤ pi, qi ≤ 10^6) — the price per unit and the quantity in stock of the i-th type of spice. The subsequent line contains an integer m (1 ≤ m ≤ 1000) — the number of customer orders. Each of the next m lines contains two integers ti and di (1 ≤ ti ≤ n, 1 ≤ di ≤ 10^6) — the type of spice and the desired quantity for the i-th customer order. Print a single integer — the total revenue Mark earns from fulfilling the customer orders. For example, given the input: ``` 3 5 10 3 5 8 2 4 1 6 2 4 3 3 1 7 ``` The output should be: ``` 87 ``` Explanation: - The first customer orders 6 units of type 1 spice, Mark sells all 6 units at 5 each, earning 30. - The second customer orders 4 units of type 2 spice, Mark sells all 4 units at 3 each, earning 12. - The third customer orders 3 units of type 3 spice, but only 2 units are in stock, so he sells 2 units at 8 each, earning 16. - The fourth customer orders 7 units of type 1 spice, but only 4 units are left, so he sells 4 units at 5 each, earning 20. - The total revenue is 30 + 12 + 16 + 20 = 78.","solution":"def calculate_revenue(n, spices, m, orders): Calculate total revenue based on spice inventory and customer orders. Args: n (int): Number of spice types. spices (list of tuples): List of tuples where each tuple contains (price per unit, quantity in stock). m (int): Number of customer orders. orders (list of tuples): List of tuples where each tuple contains (type of spice, desired quantity). Returns: int: Total revenue earned. revenue = 0 # Iterate through each order for ti, di in orders: # Get the spice type details (price and stock remaining) price_per_unit, quantity_in_stock = spices[ti-1] # Calculate the selling quantity selling_quantity = min(quantity_in_stock, di) # Update revenue revenue += selling_quantity * price_per_unit # Update stock spices[ti-1] = (price_per_unit, quantity_in_stock - selling_quantity) return revenue # Example to be tested manually # n = 3 # spices = [(5, 10), (3, 5), (8, 2)] # m = 4 # orders = [(1, 6), (2, 4), (3, 3), (1, 7)] # print(calculate_revenue(n, spices, m, orders)) # should print 78"},{"question":"David is arranging a set of painting frames in his gallery for an exhibition. Each frame has a certain width and David wants the total width of the frames in a row to be exactly the given gallery wall width. You are given an array `frames` containing positive integers where each integer represents the width of a frame. You need to determine the number of ways to choose a subset of these frames such that their total width equals the given width `W`. Because it may lead to a large number of such subsets, you should output the result modulo 1000000007 (10^9 + 7). For example, if the frames are `[1, 2, 3, 4, 5]` and the wall width `W` is `5`, the possible subsets are `[5]`, `[1, 4]`, and `[2, 3]`. The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of frames. The second line contains `n` integers `frames[0], frames[1], ..., frames[n-1]` (1 ≤ frames[i] ≤ 1000) — the widths of the frames. The third line contains an integer `W` (1 ≤ W ≤ 10000) — the exact width of the gallery wall. Output a single integer representing the number of ways to form a subset with the total width equal to `W` modulo 1000000007. **Example Input:** ``` 5 1 2 3 4 5 5 ``` **Example Output:** ``` 3 ```","solution":"MOD = 1000000007 def count_subsets_with_sum(frames, W): n = len(frames) dp = [0] * (W + 1) dp[0] = 1 for frame in frames: for i in range(W, frame - 1, -1): dp[i] = (dp[i] + dp[i - frame]) % MOD return dp[W] # Example frames = [1, 2, 3, 4, 5] W = 5 print(count_subsets_with_sum(frames, W)) # Output: 3"},{"question":"You are given a list of integers representing temperatures recorded over several days. Your task is to find the length of the longest contiguous subarray where the temperature strictly increases each day. # Input - The first line of input contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of recorded temperatures. - The second line of input contains n integers separated by spaces, where each integer `t_i` (−1000 ≤ t_i ≤ 1000) represents the temperature on the i-th day. # Output - Output a single integer — the length of the longest contiguous subarray with strictly increasing temperatures. # Example Input ``` 8 10 12 14 7 8 9 4 6 ``` Output ``` 3 ``` Input ``` 5 5 5 5 5 5 ``` Output ``` 1 ``` Explanation In the first example, the longest contiguous subarrays with strictly increasing temperatures are `[10, 12, 14]` and `[7, 8, 9]`, each of length 3. Therefore, the output is 3. In the second example, there are no subarrays with strictly increasing temperatures, so the longest such subarray is just any one single element. Hence, the output is 1.","solution":"def longest_increasing_subarray_length(temperatures): Returns the length of the longest contiguous subarray with strictly increasing temperatures. if not temperatures: return 0 max_len = 1 curr_len = 1 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i - 1]: curr_len += 1 max_len = max(max_len, curr_len) else: curr_len = 1 return max_len"},{"question":"You are given a binary tree with `n` nodes. Each node has a unique integer identifier between `1` and `n`. The task is to find the maximum sum of node values in any path from the root node to a leaf node. A binary tree node is represented as: ``` class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` You need to write a function `maxRootToLeafSum(root: TreeNode) -> int` that takes the root node of the binary tree as input and returns the maximum sum of a path from the root to any leaf node. A path is defined as a sequence of nodes starting from the root node and ending at any leaf node, moving only along the edges of the tree. Example: ``` Input: root = TreeNode( value=10, left=TreeNode( value=5, left=TreeNode( value=20 ), right=TreeNode( value=1 ) ), right=TreeNode( value=2, right=TreeNode( value=15 ) ) ) Output: 45 Explanation: The path with the maximum sum is 10 -> 5 -> 20, which equals 10 + 5 + 20 = 35. ``` Constraints: - The number of nodes in the binary tree `n` is in the range `[1, 10^4]`. - Node values are integers in the range `[-10^4, 10^4]`. Note: You can assume that the input will always be a valid binary tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def maxRootToLeafSum(root: TreeNode) -> int: Returns the maximum sum of values in any path from the root to a leaf node. if root is None: return 0 if not root.left and not root.right: return root.value left_sum = maxRootToLeafSum(root.left) if root.left else float(\'-inf\') right_sum = maxRootToLeafSum(root.right) if root.right else float(\'-inf\') return root.value + max(left_sum, right_sum)"},{"question":"You are given an array of integers that represents the heights of blocks in a histogram. Your task is to find the largest rectangular area possible in the histogram. The first line contains an integer t (1 le t le 100) — the number of test cases in the input. Then t test case descriptions follow. The first line of each test case contains an integer n (1 le n le 100) — the number of blocks in the histogram. The second line contains n integers h_1, h_2, dots, h_n (1 le h_i le 100), where h_i denotes the height of the i-th block. Print t integers — the answers to the test cases in the input in the order they follow. The answer to a test case is the largest possible rectangular area in the given histogram. In the first test case, the largest rectangle has an area of 6 (formed by the third, fourth, and fifth bars of heights 2). In the second test case, the largest rectangle has an area of 9 (formed by all heights of 3). In the third test case, the largest rectangle has an area of 7 (formed by the first and second bars of height 4). In the fourth test case, the largest rectangle has an area of 4 (formed by any single bar of height 4).","solution":"def largest_rectangle_area(histograms): Finds the largest rectangular area possible in each histogram. :param histograms: List of histograms where each histogram is represented as a list of integers. :return: List of integers representing the largest rectangular area for each histogram. def calculate_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area return [calculate_area(histogram) for histogram in histograms]"},{"question":"In a distant land, there exists a peculiar forest composed of `n` trees aligned in a single row. Each tree has a unique height, and the heights of the trees are given in an array `heights` of length `n`. The inhabitants of this land have a custom to celebrate the tallest tree every year. However, this custom has a twist - an evil witch casts a spell every year to uproot one random tree, making it disappear completely. The citizens want to find the maximum possible height of the tallest tree left in the forest after the witch casts her spell. Help them determine this height efficiently, as the forest can be very large. The first line contains a single integer `n` (2 ≤ n ≤ 10^5) — the number of trees in the forest. The second line contains `n` space-separated integers `heights[i]` (1 ≤ heights[i] ≤ 10^9) — the heights of the trees in the forest. Print the maximum height of the tallest tree that can be left after the witch uproots any one of the trees. **Example:** Input: ``` 5 3 1 4 1 5 ``` Output: ``` 4 ``` In this example, if any tree is uprooted other than the tree with height 5, the tallest tree left has height 4. If the tree with height 5 is uprooted, the tallest tree left has height 4. Note: The solution should handle the largest possible input sizes efficiently.","solution":"def max_height_after_removal(heights): Returns the maximum height of the tallest tree that can be left after any one tree is uprooted. if len(heights) == 2: return min(heights) max1 = max2 = float(\'-inf\') for height in heights: if height > max1: max1, max2 = height, max1 elif height > max2: max2 = height return max2"},{"question":"You are given a directed graph with n nodes and m edges. Each node is labeled from 1 to n. A node is said to be \\"faulty\\" if there is no path from the node to itself. You can add at most one edge to the graph. If adding such an edge can make some of the faulty nodes non-faulty, the process is considered to have succeeded. Determine if it is possible to add a single edge to the graph such that at least one faulty node becomes non-faulty. The first line contains two integers n and m (1 le n, m le 10^5) — the number of nodes and the number of edges in the graph. Each of the next m lines contains two integers u and v (1 le u, v le n; u neq v) representing a directed edge from node u to node v. Output \\"YES\\" if it is possible to add a single edge to the graph such that at least one faulty node becomes non-faulty, otherwise print \\"NO\\". You can print each letter in any case (upper or lower). For example: For the first test case, adding an edge from 5 to 5 would make node 5 non-faulty. Thus, the answer is \\"YES\\". For the second test case, there is no single edge that can make the graph no longer have any faulty nodes. Therefore, the answer is \\"NO\\".","solution":"def is_possible_to_fix_faulty_node(n, m, edges): from collections import defaultdict, deque def bfs(start_node): queue = deque([start_node]) visited = set() while queue: node = queue.popleft() if node in visited: continue visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: graph[u].append(v) reverse_graph[v].append(u) in_degree = [0] * (n + 1) out_degree = [0] * (n + 1) for node in range(1, n + 1): in_degree[node] = len(reverse_graph[node]) out_degree[node] = len(graph[node]) faulty_nodes = [node for node in range(1, n + 1) if in_degree[node] == 0 or out_degree[node] == 0] for faulty_node in faulty_nodes: reachable_from_faulty = bfs(faulty_node) if faulty_node in reachable_from_faulty: return \\"YES\\" return \\"NO\\""},{"question":"Maxime is an enthusiastic gardener who loves arranging his flowerbeds in a particular way. He has a rectangular garden that consists of `m` rows and `n` columns. Each cell of the garden contains either a flower (denoted by `F`) or is empty (denoted by `.`). Maxime wants to create a \\"perfect square\\" pattern using the flowers. A \\"perfect square\\" pattern is a square grid of size `k x k` (where `k > 1`) that contains only `F` in all its cells. Maxime can plant additional flowers in the empty cells to form one or more \\"perfect square\\" patterns, but cannot remove any existing flowers. What is the largest possible size `k` of a \\"perfect square\\" pattern Maxime can form in his garden? The first line contains two integers `m` and `n` (`1 ≤ m, n ≤ 1000`) — the number of rows and the number of columns in the garden. Each of the next `m` lines contains `n` characters (`\'F\'` or `\'.\'`), representing the initial state of the garden. Print a single integer representing the largest size `k` of a \\"perfect square\\" pattern that can be formed in the garden. **Example:** Input: ``` 6 6 F.FFFF FF.F.F FFFF.F FF.F.F FFF.F. FF.FFF ``` Output: ``` 2 ``` In the provided example, Maxime can create a largest \\"perfect square\\" of size 2x2. There are multiple such possible squares in the garden, but no larger square can be formed without replanting flowers in empty cells.","solution":"def largest_perfect_square(m, n, garden): if m < 2 or n < 2: return 0 dp = [[0] * n for _ in range(m)] max_side_length = 0 for i in range(m): for j in range(n): if garden[i][j] == \'F\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length def parse_input(input_string): lines = input_string.strip().split(\\"n\\") m, n = map(int, lines[0].split()) garden = [list(line) for line in lines[1:]] return m, n, garden"},{"question":"Dima has a rectangular garden with dimensions n by m. He wants to divide this garden into smaller rectangular plots, each with the same dimensions a by b. Plots cannot overlap, and the entire garden must be filled perfectly with no leftover space. The dimensions (n, m, a), and (b) are all integers. Determine if it\'s possible to divide the garden accordingly. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". The input consists of a single line containing four integers (n, m, a, b) ((1 ≤ a, b, n, m ≤ 1000)). # Example **Input:** ``` 6 8 2 4 ``` **Output:** ``` YES ``` **Input:** ``` 5 10 3 5 ``` **Output:** ``` NO ``` # Explanation: In the first example, the 6 by 8 garden can be divided into 6 plots of 2 by 4 each (3 rows and 2 columns). In the second example, the 5 by 10 garden cannot be divided into non-overlapping 3 by 5 plots that fit perfectly.","solution":"def can_divide_garden(n, m, a, b): Determines if a n by m garden can be divided into smaller plots of size a by b with no leftover space. n: int - The length of the garden m: int - The width of the garden a: int - The length of each plot b: int - The width of each plot returns: str - \\"YES\\" if the garden can be perfectly divided, otherwise \\"NO\\" if (n % a == 0) and (m % b == 0): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of integers of length n. You can move through the array starting from any given position i, but the only allowed moves are jumps to index i+arr[i] or i-arr[i]. Your task is to determine if there is a way to reach the value 0 in the array by starting from any location. Write a function `canReachZero(arr: List[int]) -> bool` to solve the problem. **Input** - A list of integers `arr` where (1 ≤ n ≤ 10^5 and -10^5 ≤ arr[i] ≤ 10^5 for 0 ≤ i < n). **Output** - Return `True` if it\'s possible to reach an element with value 0 in the array; otherwise, return `False`. **Example** ```python print(canReachZero([4, 6, 8, 3, 0])) # Output: True print(canReachZero([2, 1, 3, 7, 5])) # Output: False ``` **Explanation** In the first example, you start at the index `0` and jump to index `4` directly as `0 + 4 = 4`. The value at index `4` is `0`. In the second example, there is no possible way to reach an element with the value `0` regardless of the starting index.","solution":"from typing import List def canReachZero(arr: List[int]) -> bool: n = len(arr) for start in range(n): if arr[start] == 0: return True visited = set() stack = [start] while stack: index = stack.pop() if arr[index] == 0: return True visited.add(index) for move in (index + arr[index], index - arr[index]): if 0 <= move < n and move not in visited: stack.append(move) return False"},{"question":"Given an array of integers, move all zeros to the end while maintaining the relative order of the non-zero elements. Implement a function that performs this operation in-place with minimal swaps. The first line of the input contains an integer t (1 le t le 10^4) – the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 le n le 10^5) – the size of the array. - The second line contains n integers separated by spaces, denoting the elements of the array. Output the modified array where all zeros are moved to the end for each test case. Constraints: - The sum of n over all test cases does not exceed 10^6. - Each element in the array is an integer in the range [-10^9, 10^9]. Example: Input: ``` 2 5 0 1 0 3 12 4 0 0 1 2 ``` Output: ``` 1 3 12 0 0 1 2 0 0 ``` In this example, after moving all zeros to the end: - The first test case array `[0, 1, 0, 3, 12]` becomes `[1, 3, 12, 0, 0]`. - The second test case array `[0, 0, 1, 2]` becomes `[1, 2, 0, 0]`.","solution":"def move_zeros_to_end(arr): Function to move all zeros in the array to the end while maintaining the relative order of non-zero elements n = len(arr) last_non_zero_found_at = 0 for i in range(n): if arr[i] != 0: arr[last_non_zero_found_at], arr[i] = arr[i], arr[last_non_zero_found_at] last_non_zero_found_at += 1 def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] move_zeros_to_end(arr) results.append(arr) return results"},{"question":"You are given a sequence of integers representing heights of a number of people standing in a line. The heights are given in a specific order, from left to right, and you want to form pairs of adjacent people such that the difference in their heights in each pair is minimal. To achieve this, you can perform a series of operations where you swap the positions of any two adjacent people. Given the heights of the people, determine the minimum sum of height differences for the optimal arrangement. The first line of the input contains a single integer n (2 le n le 10^5), which represents the number of people in the line. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) which represent the heights of the people from left to right. Output a single integer which is the minimum sum of height differences for the optimal arrangement. # Example: Input: ``` 5 5 3 8 1 4 ``` Output: ``` 2 ``` # Explanation: One optimal arrangement is: 3, 4, 5, 8, 1. The sum of height differences is: |3 - 4| + |4 - 5| + |5 - 8| + |8 - 1| = 1 + 1 + 3 + 7 = 12. Another optimal arrangement is: 1, 3, 4, 5, 8. The sum of height differences is: |1 - 3| + |3 - 4| + |4 - 5| + |5 - 8| = 2 + 1 + 1 + 3 = 7. In the optimal solution, the sum is minimized compared to other possible arrangements.","solution":"def min_height_diff_sum(n, heights): Returns the minimum sum of height differences for an optimal arrangement. :param n: Number of people in the line. :param heights: List of heights of the people from left to right. :return: Minimum sum of height differences. heights.sort() min_diff = 0 for i in range(n - 1): min_diff += heights[i + 1] - heights[i] return min_diff"},{"question":"You are given a directed graph with **n** vertices and **m** edges. Each edge has a cost associated with it. You need to answer **q** queries, each query asking for the cost of the shortest path between two given vertices **u** and **v**. The following constraints are guaranteed: - There are no negative-weight cycles in the graph. - The graph might contain zero-weight edges. - Some queries may ask for the shortest path from a vertex to itself. The task is to compute the shortest path for each query, or determine that no such path exists. # Input: - The first line contains two integers **n** and **m** (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) – the number of vertices and edges in the graph. - The next **m** lines each contain three integers **a**, **b**, and **w** (1 ≤ a, b ≤ n, 0 ≤ w ≤ 10^5) – indicating there is a directed edge from vertex **a** to vertex **b** with weight **w**. - The next line contains an integer **q** (1 ≤ q ≤ 10000) – the number of queries. - The next **q** lines each contain two integers **u** and **v** (1 ≤ u, v ≤ n) – representing a query asking for the shortest path from vertex **u** to vertex **v**. # Output: For each query, output a single integer: - The cost of the shortest path from **u** to **v**. - If there is no path from **u** to **v**, output -1. # Example: Input: ``` 4 4 1 2 1 2 3 3 3 4 1 1 4 5 3 1 4 1 3 3 1 ``` Output: ``` 4 4 -1 ``` # Explanation: - For the first query, the shortest path from vertex 1 to vertex 4 is 1 -> 2 -> 3 -> 4 with a total cost of 1 + 3 + 1 = 5. - For the second query, the shortest path from vertex 1 to vertex 3 is 1 -> 2 -> 3 with a total cost of 1 + 3 = 4. - For the third query, there is no path from vertex 3 to vertex 1, so the output is -1.","solution":"def floyd_warshall(n, edges): Uses the Floyd-Warshall algorithm to compute shortest paths between all pairs of vertices. inf = float(\'inf\') dist = [[inf] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 for a, b, w in edges: dist[a-1][b-1] = min(dist[a-1][b-1], w) for k in range(n): for i in range(n): for j in range(n): if dist[i][k] != inf and dist[k][j] != inf: dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) return dist def shortest_paths(n, m, edges, q, queries): dist = floyd_warshall(n, edges) inf = float(\'inf\') result = [] for u, v in queries: u, v = u-1, v-1 if dist[u][v] == inf: result.append(-1) else: result.append(dist[u][v]) return result"},{"question":"In a particular galactic coordinates system, there is a robot called Quadrabot that can move in four directions - up, down, left, and right. However, to conserve energy, Quadrabot wants to minimize the number of moves required to navigate between two points in the grid. The Quadrabot moves exactly in a straight line either horizontally or vertically. Quadrabot always starts facing east (rightwards) and can only make 90-degree turns to change direction. All moves are one unit at a time. Given the starting and ending coordinates, design a function to compute the minimum number of moves required for Quadrabot to reach the destination. The input consists of four space-separated integers: x1, y1, x2, y2 (0 ≤ x1, y1, x2, y2 ≤ 1000) — the initial (x1, y1) and the target (x2, y2) coordinates of Quadrabot. Print the minimum number of moves Quadrabot must make to reach (x2, y2) from (x1, y1) following the rules mentioned. **Examples** Input: ``` 0 0 2 2 ``` Output: ``` 4 ``` Input: ``` 1 1 4 1 ``` Output: ``` 3 ```","solution":"def min_moves(x1, y1, x2, y2): dx = abs(x2 - x1) dy = abs(y2 - y1) # If the starting and ending coordinates are the same if dx == 0 and dy == 0: return 0 # If either coordinate is the same, no turns are needed, just straight moves elif dx == 0 or dy == 0: return max(dx, dy) # Otherwise, move straight either horizontally or vertically first, make a turn, then complete the remaining distance else: return dx + dy # Examples min_moves(0, 0, 2, 2) # Output: 4 min_moves(1, 1, 4, 1) # Output: 3"},{"question":"In Riverland, there are n islands connected by m bridges. Each bridge connects two different islands. It is guaranteed that no two bridges connect the same pair of islands, and each pair of connected islands is bidirectional. Nomad Petra starts on island a and wants to visit island b. However, she prefers to visit new islands along the way, i.e., she does not want to retrace her steps. She will count the islands she visits on her way from a to b, including both a and b. Given the number of islands n, the number of bridges m, and the connections between islands, determine the minimum number of islands Petra will visit in her journey from island a to island b. If there is no path from a to b, print -1. The first line contains three integers n, m, a, and b (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10,000, 1 ≤ a, b ≤ n). Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) representing a bidirectional bridge between island u and island v. Print the minimum number of islands Petra will visit if there is a valid path from a to b. If no such path exists, print -1. For example: Input: ``` 5 4 1 5 1 2 2 3 3 4 4 5 ``` Output: ``` 5 ``` In this case, Petra visits islands 1, 2, 3, 4, and 5 in that order. Therefore, she visits a total of 5 islands.","solution":"from collections import deque def min_islands_to_visit(n, m, a, b, bridges): Returns the minimum number of islands Petra will visit from a to b, including both a and b, or -1 if no path exists. # Convert 1-based to 0-based for easier indexing a -= 1 b -= 1 # Create an adjacency list for the graph adjacency_list = [[] for _ in range(n)] for u, v in bridges: adjacency_list[u - 1].append(v - 1) adjacency_list[v - 1].append(u - 1) # Perform BFS to find the shortest path from a to b queue = deque([(a, 0)]) visited = [False] * n visited[a] = True while queue: current_island, current_distance = queue.popleft() if current_island == b: return current_distance + 1 for neighbor in adjacency_list[current_island]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, current_distance + 1)) return -1 # Example usage n, m, a, b = 5, 4, 1, 5 bridges = [(1, 2), (2, 3), (3, 4), (4, 5)] print(min_islands_to_visit(n, m, a, b, bridges)) # Output: 5"},{"question":"Determine if it is possible to rearrange the symbols in a given string to form a palindrome. A palindrome is a string that reads the same backward as forward. For instance, \\"madam\\" and \\"racecar\\" are palindromes, while \\"apple\\" and \\"hello\\" are not. The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string of n lowercase English letters. Print \\"yes\\" (without quotes) if it\'s possible to rearrange the symbols of the given string to form a palindrome. Otherwise, print \\"no\\" (without quotes). # Example Input: 7 aabbcac Output: yes Input: 5 apple Output: no Explanation: In the first example, the string can be rearranged to form the palindrome \\"aabbcba\\". In the second example, it is impossible to rearrange the symbols to form any palindrome.","solution":"def can_form_palindrome(s: str) -> str: Determines if it\'s possible to rearrange the symbols in the given string to form a palindrome. Args: s (str): The input string. Returns: str: \\"yes\\" if it\'s possible to rearrange the symbols to form a palindrome, \\"no\\" otherwise. from collections import Counter # Count frequencies of each character count = Counter(s) # Palindrome conditions: # - Can have at most one character with an odd frequency odd_count = sum(1 for val in count.values() if val % 2 != 0) # If the odd_count is more than 1, we cannot form a palindrome return \\"yes\\" if odd_count <= 1 else \\"no\\""},{"question":"In a distant kingdom, there is a renowned blacksmith who forges magical keys. Each key is identified by a unique string k consisting of lowercase English letters. The blacksmith has a mysterious chest that can only be opened with the correct sequence of keys. The blacksmith invented an algorithm to check if the sequence of keys is correct. The algorithm is as follows: - Arrange the keys in lexicographical order. - Concatenate the keys into one single string. - Check if this concatenated string is a palindrome. Given a list of n keys, determine if the combined string of lexicographically sorted keys forms a palindrome. # Input: - The first line contains an integer n (1 leq n leq 1000) — the number of keys. - Each of the following n lines contains a string k_i (1 leq |k_i| leq 10^5) — a key consisting of lowercase English letters. # Output: - Print \\"YES\\" if the concatenated string of sorted keys is a palindrome, otherwise print \\"NO\\". # Example: **Input:** ``` 3 xyz abc cba ``` **Output:** ``` NO ``` **Explanation:** Sorting the keys gives: `abc`, `cba`, `xyz`. Concatenating them results in the string `abccbaxyz`, which is not a palindrome. Hence, the output is \\"NO\\". # Notes: - Consider efficient ways to check if a string is a palindrome, given the constraints on the length of each key and the number of keys. - The concatenated string should be handled carefully to avoid excessive memory usage, especially with the maximum input size.","solution":"def is_palindrome_combination(keys): Given a list of strings (keys), sort them lexicographically, concatenate them, and return \'YES\' if the concatenated string is a palindrome, otherwise \'NO\'. :param keys: List of strings representing the keys. :return: \'YES\' if the concatenated string is a palindrome, \'NO\' otherwise. sorted_keys = sorted(keys) concatenated_string = \'\'.join(sorted_keys) if concatenated_string == concatenated_string[::-1]: return \'YES\' else: return \'NO\'"},{"question":"You are tasked with managing a warehouse that has a storage system consisting of stacks of boxes, numbered from 1 to n. Each stack can contain several types of boxes, represented by integer IDs. Due to limited space, you want to optimize the storage by removing redundant boxes while ensuring certain constraints are met. Specifically, you\'re given a list of stacks. You must remove some boxes such that: 1. Every stack must still contain at least one unique type of box present in the original configuration. 2. The total number of remaining boxes is minimized. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of stacks. The second line contains an integer m (1 ≤ m ≤ 100,000) — the total number of boxes in all stacks combined. The following m lines each contain two integers s and t (1 ≤ s ≤ n, 1 ≤ t ≤ 100,000), where s is the stack index and t is the type of box in that stack. Print the minimum number of boxes that must remain in the warehouse after removing redundant boxes while keeping at least one unique box type in each stack. Example: ``` Input: 3 7 1 1 1 2 2 2 2 3 3 1 3 3 3 2 Output: 3 Explanation: - Stack 1 contains boxes of types 1 and 2. - Stack 2 contains boxes of types 2 and 3. - Stack 3 contains boxes of types 1, 2, and 3. Remove boxes to leave one unique type in each stack: - Stack 1: retain box of type 1 or 2. - Stack 2: retain box of type 2 or 3. - Stack 3: retain box of type 1, 2, or 3. The optimal solution requires retaining at least 3 boxes, one per stack. ```","solution":"def min_remaining_boxes(n, m, boxes): Minimize the total number of boxes in the warehouse while ensuring each stack contains at least one unique type of box. :param n: Number of stacks (integer) :param m: Total number of boxes (integer) :param boxes: List of tuples [(s, t),...] where s is stack index and t is box type :return: Minimum number of boxes that must remain from collections import defaultdict # Dictionary to store unique types per stack stack_unique_types = defaultdict(set) for s, t in boxes: stack_unique_types[s].add(t) # The minimum number of boxes that must remain is the number of stacks (one box per stack) return len(stack_unique_types) # Example usage: # n = 3 # m = 7 # boxes = [(1, 1), (1, 2), (2, 2), (2, 3), (3, 1), (3, 3), (3, 2)] # print(min_remaining_boxes(n, m, boxes)) # Output should be 3"},{"question":"You are given an undirected graph with n vertices and m edges. The vertices are numbered from 1 to n. Your task is to find the length of the shortest path between vertices 1 and n. The graph is described by m lines, each containing two integers u and v (1 leq u, v leq n) representing an edge between vertex u and vertex v. The graph might contain multiple edges between the same pair of vertices and self-loops. You need to find and print the length of the shortest path from vertex 1 to vertex n. If there is no such path, print -1. The input consists of multiple test cases. The first line of input contains a single integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains two integers n and m (2 leq n leq 3000, 1 leq m leq 5000) — the number of vertices and the number of edges. The following m lines contain two integers u and v (1 leq u, v leq n) representing the edges of the graph. For each test case, output the length of the shortest path between vertices 1 and n. If there is no path between them, output -1.","solution":"from collections import deque, defaultdict def shortest_path(n, m, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) dist = [-1] * (n + 1) dist[1] = 0 queue = deque([1]) while queue: current = queue.popleft() for neighbor in graph[current]: if dist[neighbor] == -1: dist[neighbor] = dist[current] + 1 queue.append(neighbor) if neighbor == n: return dist[n] return -1 def process_test_cases(t, test_cases): results = [] for n, m, edges in test_cases: results.append(shortest_path(n, m, edges)) return results # Example usage # t = 2 # test_cases = [ # (5, 5, [(1, 2), (2, 3), (3, 4), (4, 5), (1, 5)]), # (4, 2, [(1, 2), (3, 4)]) # ] # print(process_test_cases(t, test_cases))"},{"question":"You are given a string consisting of lowercase English letters, and you need to determine the number of unique substrings of length exactly k that contain only distinct characters. For example, if you are given the string \\"abac\\", the substrings of length 2 with distinct characters are \\"ab\\", \\"ba\\", and \\"ac\\" — thus, there are 3 such substrings. Your task is to write a program that counts all unique substrings of length k with distinct characters. The input consists of two lines: The first line contains an integer k (1 <= k <= 26). The second line contains the string s (1 <= |s| <= 50), consisting of lowercase English letters only. The output should be a single integer representing the number of unique substrings of length k with all distinct characters. Examples: Input: 2 abac Output: 3 Input: 3 abcabcbb Output: 3","solution":"def count_unique_substrings_with_distinct_chars(k, s): Returns the number of unique substrings of length k with all distinct characters. if k > len(s): return 0 unique_substrings = set() for i in range(len(s) - k + 1): substring = s[i:i + k] if len(set(substring)) == k: unique_substrings.add(substring) return len(unique_substrings)"},{"question":"Alice has a rectangular chocolate bar consisting of n rows and m columns of small squares. In one move, Alice can break the chocolate either horizontally or vertically along the lines separating the squares. After each break, Alice takes one of the resulting pieces and continues breaking it further. Alice wants to break the chocolate into individual squares with the minimum number of moves possible. You are given two integers n and m which represent the dimensions of the chocolate bar. Your task is to determine the minimum number of moves Alice needs to break the entire chocolate into 1x1 pieces. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the chocolate bar. Output one integer — the minimum number of moves required. For example, for a 3x2 chocolate bar (n=3, m=2), Alice can break it once vertically and then twice horizontally, making a total of 3 moves. For a 5x5 chocolate bar (n=5, m=5), Alice can break it once either horizontally or vertically, then repeatedly break the resulting pieces, ending up with a total of 24 moves.","solution":"def min_moves(n, m): Given the dimensions of the chocolate bar n (rows) and m (columns), returns the minimum number of moves to break the chocolate into 1x1 pieces. # To break an n x m chocolate into 1x1 pieces, Alice needs (n-1) + (m-1) + (n-1) * (m-1) moves return n * m - 1"},{"question":"When Alice goes on a hike, she likes to collect pebbles to bring back as souvenirs. On this trip, she wants to collect exactly n pebbles. During the hike, she comes across several pebbles, each with a different weight. She can only carry a limited amount of weight in her backpack, and she plans to pick up the maximum possible number of pebbles without exceeding this weight limit. You are given the number of pebbles available, their respective weights, and the maximum weight Alice\'s backpack can carry. Determine the maximum number of pebbles Alice can collect without exceeding the weight limit. The first line contains two space-separated integers n (1 ≤ n ≤ 1000) — the number of pebbles and W (1 ≤ W ≤ 10000) — the maximum weight Alice\'s backpack can carry. The next line contains n space-separated integers wi (1 ≤ wi ≤ 1000) — the weights of the pebbles. Print a single integer — the maximum number of pebbles Alice can collect without exceeding the weight limit. In the first sample, Alice can pick up the pebbles with weights 2 and 3, resulting in a total weight of 5, which does not exceed the weight limit of 5. In the second sample, Alice can only pick up the pebble with weight 2, as adding any other pebbles would exceed the weight limit of 3.","solution":"def max_pebbles(n, W, weights): Determines the maximum number of pebbles Alice can collect without exceeding the weight limit. Parameters: n (int): Number of pebbles. W (int): Maximum weight Alice\'s backpack can carry. weights (list): List of weights of the pebbles. Returns: int: Maximum number of pebbles Alice can collect. weights.sort() current_weight = 0 count = 0 for weight in weights: if current_weight + weight <= W: current_weight += weight count += 1 else: break return count"},{"question":"Vera finds herself in a peculiar situation. She wants to organize a grand musical show with various bands performing. Each band requires a specific time slot to perform, and some bands have rival bands, meaning they can\'t perform one after another due to security concerns and audience management. Vera needs to find a schedule that maximizes the number of bands that can perform without any two rival bands performing consecutively. You are given a number of bands and rivalries among them. Your task is to determine the maximum number of bands that can perform given the constraints. The first line of the input contains an integer `n` (1 ≤ n ≤ 1000), the number of bands. The second line contains an integer `m` (0 ≤ m ≤ 10000), the number of rivalries. The next `m` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ n, a ≠ b), indicating that band `a` and band `b` are rivals and cannot perform consecutively. Output a single integer — the maximum number of bands that can be scheduled such that no two rival bands perform consecutively. Example: Input: 5 4 1 2 2 3 3 4 4 5 Output: 3 In this example, a possible schedule that avoids any two rival bands performing consecutively is: 1, 3, 5. This way, the maximum number of bands that can perform without conflict is 3.","solution":"from collections import deque, defaultdict def max_bands(n, m, rivalries): def bfs_check_bipartite(graph, start, color): queue = deque([start]) color[start] = 0 # Start by coloring the first node with color 0 while queue: node = queue.popleft() current_color = color[node] for neighbor in graph[node]: if neighbor not in color: color[neighbor] = 1 - current_color # Alternate color for neighboring nodes queue.append(neighbor) elif color[neighbor] == current_color: return False # Found a conflict in coloring, so graph is not bipartite return True if m == 0: return n # If there are no rivalries, all bands can perform graph = defaultdict(list) for a, b in rivalries: graph[a].append(b) graph[b].append(a) color = {} # Check if the graph is bipartite for node in range(1, n+1): if node not in color: if not bfs_check_bipartite(graph, node, color): return 0 # A cycle with odd number of vertices found, no valid schedule possible # Count vertices in each set count_0 = sum(1 for v in color.values() if v == 0) count_1 = n - count_0 # Total nodes minus nodes colored with 0 will give nodes colored with 1 # Maximum independent set is the larger color group in a bipartite graph return max(count_0, count_1)"},{"question":"Consider an array of integers, where each element represents the price of a stock on a particular day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. The crucial constraint is that you must buy the stock before you can sell it. Determine the maximum profit you can achieve. If no profit can be made, return 0. The input consists of two lines: - The first line contains an integer n (1 le n le 10^5), the total number of days. - The second line contains n space-separated integers p_1, p_2, ..., p_n (0 le p_i le 10^4), where p_i is the price of the stock on the ith day. Print a single integer, the maximum profit you can achieve. If no profit can be made, print 0. For example, consider the sequence of stock prices over 6 days: [7, 1, 5, 3, 6, 4] - The best time to buy would be on day 2 (price = 1) and to sell on day 5 (price = 6), so the maximum profit = 6 - 1 = 5. Another example, with a sequence [7, 6, 4, 3, 1], it is impossible to make a profit, so the maximum profit = 0.","solution":"def max_profit(n, prices): Returns the maximum profit that can be achieved by buying and selling the stock on different days. If no profit can be made, return 0. Args: n (int): Number of days. prices (List[int]): List of stock prices. Returns: int: Maximum profit. if n <= 1: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: min_price = min(min_price, price) potential_profit = price - min_price max_profit = max(max_profit, potential_profit) return max_profit"},{"question":"Two players are playing a game on a string of lowercase letters. The game consists of two turns where each player can choose a character from the string and remove all its occurrences. The goal is to maximize the score, where the score is defined as the number of distinct characters removed by each player. Each turn, Player 1 goes first, and then Player 2. Both players want to maximize the number of distinct characters they remove. If a player can\'t remove any character, their score for that turn is zero. Given a string `s` of length `n` (1 ≤ n ≤ 1000) containing only lowercase English letters, determine the score of Player 1 and Player 2 after both have made their moves. The first line contains a string `s`. Print two integers separated by a space: the score of Player 1 and the score of Player 2. In the first example, Player 1 can choose the character \'a\', and Player 2 can choose the character \'b\'. This results in a score of 1 for both Player 1 and Player 2. In the second example, there are only two characters, and Player 1 can choose any one of them. Player 2 will be left with no characters to choose, resulting in a score of 1 for Player 1 and 0 for Player 2.","solution":"def game_scores(s): Given a string s, determine the scores of Player 1 and Player 2 after both have made their moves. Player 1 goes first, followed by Player 2. Both players aim to maximize the number of distinct characters removed in their turn. :param s: A string containing lowercase English letters (1 ≤ len(s) ≤ 1000) :return: A tuple with two integers representing the scores of Player 1 and Player 2 respectively. from collections import Counter # Get the count of each character in the string char_counter = Counter(s) # Get all distinct characters distinct_chars = list(char_counter.keys()) # Player 1\'s turn (Always chooses first) if distinct_chars: player1_char = distinct_chars.pop() # Remove player 1\'s chosen character player1_score = 1 else: player1_score = 0 # Player 2\'s turn if distinct_chars: player2_char = distinct_chars.pop() # Remove player 2\'s chosen character player2_score = 1 else: player2_score = 0 return (player1_score, player2_score)"},{"question":"You are given a binary tree with n nodes. Each node has a unique integer identifier from 1 to n. You need to perform m queries on this tree. Each query can be of two types: 1) Find the Lowest Common Ancestor (LCA) of two given nodes u and v. 2) Update the value of a given node w. You are required to handle these queries efficiently. Input: - The first line contains an integer n (1 ≤ n ≤ 105) - the number of nodes in the binary tree. - The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) describing an edge between nodes u and v. - The next line contains n integers, where the ith integer represents the initial value of node i. - The next line contains an integer m (1 ≤ m ≤ 105) - the number of queries. - Each of the next m lines contains a query in one of the following formats: * 1 u v - to find the LCA of nodes u and v. * 2 w x - to update the value of node w to x. Output: - For each query of type 1, output the LCA of the given nodes. Example: Input: 5 1 2 1 3 3 4 3 5 5 10 15 20 25 3 1 4 5 2 5 30 1 4 5 Output: 3 3 Explanation: Initially, the tree is structured as follows: 1 / 2 3 / 4 5 The values of the nodes are [5, 10, 15, 20, 25]. 1st query: The LCA of nodes 4 and 5 is 3. 2nd query: Update the value of node 5 to 30. The values of the nodes are now [5, 10, 15, 20, 30]. 3rd query: The LCA of nodes 4 and 5 is still 3.","solution":"class BinaryTree: def __init__(self, n): self.n = n self.adj = [[] for _ in range(n + 1)] self.depth = [0] * (n + 1) self.parent = [0] * (n + 1) self.values = [0] * (n + 1) self.log = (n + 1).bit_length() self.up = [[-1] * self.log for _ in range(n + 1)] def add_edge(self, u, v): self.adj[u].append(v) self.adj[v].append(u) def initialize_values(self, values): for i in range(1, self.n + 1): self.values[i] = values[i - 1] def dfs(self, v, p): self.parent[v] = p self.up[v][0] = p for i in range(1, self.log): self.up[v][i] = self.up[self.up[v][i - 1]][i - 1] for u in self.adj[v]: if u != p: self.depth[u] = self.depth[v] + 1 self.dfs(u, v) def preprocess(self, root=1): self.depth[root] = 0 self.dfs(root, -1) def lca(self, u, v): if self.depth[u] < self.depth[v]: u, v = v, u diff = self.depth[u] - self.depth[v] for i in range(self.log): if diff & (1 << i): u = self.up[u][i] if u == v: return u for i in range(self.log - 1, -1, -1): if self.up[u][i] != self.up[v][i]: u = self.up[u][i] v = self.up[v][i] return self.parent[u] def update_value(self, w, x): self.values[w] = x n = 5 edges = [(1, 2), (1, 3), (3, 4), (3, 5)] values = [5, 10, 15, 20, 25] queries = [(1, 4, 5), (2, 5, 30), (1, 4, 5)] bt = BinaryTree(n) for u, v in edges: bt.add_edge(u, v) bt.initialize_values(values) bt.preprocess() results = [] for q in queries: if q[0] == 1: results.append(bt.lca(q[1], q[2])) elif q[0] == 2: bt.update_value(q[1], q[2]) results # This should contain output of the LCA queries"},{"question":"Ever since Alex started his new job, he\'s been very interested in email security. He\'s discovered a simple encryption method and wants to test your skills in implementing it. The encryption method Alex uses is quite straightforward: 1. Each letter in the plaintext is shifted a fixed number of positions down the alphabet. 2. If the shift takes the letter past \'z\', it wraps around to the beginning of the alphabet. Given the encryption shift value and a plaintext string, determine the resulting encrypted string. Only lowercase English letters (\'a\'-\'z\') and spaces should be present in the input. Spaces should remain unchanged in the encrypted output. # Input The input consists of two lines: - The first line contains a single integer `k` (1 ≤ k ≤ 25) – the fixed number of positions each letter in the plaintext is shifted. - The second line contains the plaintext string of length `n` (1 ≤ n ≤ 100) – the string that needs to be encrypted. It contains only lowercase English letters and spaces. # Output Print the resulting encrypted string. # Example Input: ``` 3 hello world ``` Output: ``` khoor zruog ``` Explanation: Each letter in \\"hello world\\" is shifted 3 positions down the alphabet: - \'h\' becomes \'k\' - \'e\' becomes \'h\' - \'l\' becomes \'o\' - \'o\' becomes \'r\' - Space remains unchanged - \'w\' becomes \'z\' - \'o\' becomes \'r\' - \'r\' becomes \'u\' - \'l\' becomes \'o\' - \'d\' becomes \'g\' Thus, the encrypted string is \\"khoor zruog\\".","solution":"def encrypt(k, plaintext): Encrypts plaintext using a shift of k positions in the alphabet. Parameters: k (int): The fixed number of positions each letter in the plaintext is shifted. plaintext (str): The string that needs to be encrypted. Returns: str: The resulting encrypted string. encrypted_text = [] for char in plaintext: if char == \' \': encrypted_text.append(char) else: shifted_char = chr(((ord(char) - ord(\'a\') + k) % 26) + ord(\'a\')) encrypted_text.append(shifted_char) return \'\'.join(encrypted_text)"},{"question":"In a digital library, every book is categorized using a complex hierarchical system comprising multiple labels. Each label is represented by an integer. The library system needs to ensure each label is unique. The digital library receives n number of books, each denoted with their respective labels. Your task is to determine the maximum labels from the list that can be replaced or altered to ensure all labels are unique while maximizing the number of unique original labels. Moreover, the library stipulates that if changing or replacing labels to make all unique is not possible, you should return -1. The first input line consists of a single integer n (2 ≤ n ≤ 100,000) — the number of books. The second line contains n space-separated integers li (1 ≤ li ≤ 100,000) — representing the labels of the books. Construct the output in the following manner: - If it\'s possible to make all labels unique, print a single line containing an integer k - the number of unique labels that are preserved, followed by a sequence of k space-separated integers being the preserved labels in their sorted order. - If it\'s not possible to make each label unique, print -1. **Example Input 1:** ``` 5 2 2 3 3 4 ``` **Example Output 1:** ``` 3 2 3 4 ``` **Example Input 2:** ``` 4 1 1 1 2 ``` **Example Output 2:** ``` -1 ``` In the first example, by changing one of each duplicate label, we can end up with a unique set of labels {2, 3, 4}. In the second example, even after changing labels, a unique set fulfilling the criteria is impossible.","solution":"def make_labels_unique(n, labels): from collections import Counter label_counts = Counter(labels) unique_labels = set(labels) # If all labels are already unique if len(unique_labels) == n: return (n, sorted(unique_labels)) # Check if we can make them unique for label, count in label_counts.items(): if count > n - len(unique_labels): return -1 preserved_labels = list(unique_labels) return (len(preserved_labels), sorted(preserved_labels)) # Example: # n = 5 # labels = [2, 2, 3, 3, 4] # Expected output: (3, [2, 3, 4])"},{"question":"Alex loves puzzles and numbers. One day, he created a special type of matrix which he calls \\"Q-matrix\\". A Q-matrix of size n times n is defined as follows: 1. Each element of the matrix is either 0 or 1. 2. The sum of the elements in each row is exactly k. 3. The sum of the elements in each column is exactly k. Given integers n (2 ≤ n ≤ 200) and k (0 ≤ k ≤ n), your task is to help Alex construct any Q-matrix of size n times n with the given properties, if it exists. The first line of input contains two integers n and k. If a Q-matrix with the given properties is possible, output the matrix in n lines, where each line contains n integers (each integer is either 0 or 1). If it\'s impossible to construct such a matrix, output \\"-1\\". Note: - It is guaranteed that there is always an answer if the inputs are valid. - If there are multiple correct answers, you can output any of them. Example Input 1: 3 1 Example Output 1: 1 0 0 0 1 0 0 0 1 Example Input 2: 4 2 Example Output 2: 1 1 0 0 0 1 1 0 0 0 1 1 1 0 0 1","solution":"def construct_q_matrix(n, k): # If k is 0, then we simply need an n x n matrix of zeros if k == 0: return [[0] * n for _ in range(n)] # Check for the impossibility condition, there is always an answer for valid inputs as guaranteed. # Initialize matrix with zeros matrix = [[0] * n for _ in range(n)] # For simplicity, fill in the ones considering diagonal patterns with wraps for i in range(n): for j in range(k): matrix[i][(i + j) % n] = 1 return matrix"},{"question":"You are given a list of n integers representing the heights of different mountains. You need to process q queries asking for the maximum height difference between any two mountains in a given subarray. Each query specifies the starting and ending indices of the subarray. # Input - The first line contains two integers, n and q (1 le n, q le 10^5). - The second line contains n integers representing the heights of the mountains, h_1, h_2, dots, h_n (1 le h_i le 10^9). - Each of the next q lines contains two integers, l and r (1 le l le r le n), specifying the range of a subarray. # Output For each query, print the maximum height difference between any two mountains in the specified subarray. # Example Input ``` 5 3 3 9 7 4 6 1 3 2 5 1 5 ``` Output ``` 6 5 6 ``` **Explanation**: - For the first query, the subarray is [3, 9, 7]. The maximum difference is 9 - 3 = 6. - For the second query, the subarray is [9, 7, 4, 6]. The maximum difference is 9 - 4 = 5. - For the third query, the subarray is [3, 9, 7, 4, 6]. The maximum difference is 9 - 3 = 6.","solution":"def max_height_difference(n, q, heights, queries): result = [] for l, r in queries: subarray = heights[l-1:r] max_diff = max(subarray) - min(subarray) result.append(max_diff) return result"},{"question":"You are given a positive integer `N` and a string `S` which is composed of characters \'L\', \'R\', and \'*\'. The character \'L\' indicates moving one step to the left on a number line, \'R\' indicates moving one step to the right, and \'*\' indicates staying in the same position. Your task is to determine if it is possible to reach position `N` if you start at position `0` and follow the movements described in `S`. You may skip at most one \'*\' in the string `S`. The input consists of two lines: - The first line contains a single integer `N` (1 ≤ N ≤ 100). - The second line contains a string `S` of length `M` (1 ≤ M ≤ 100), consisting of characters \'L\', \'R\', and \'*\'. Output \\"Yes\\" if it is possible to reach position `N` with the given constraints, and \\"No\\" otherwise. For example, consider the following scenarios: - For an input `N=3` and `S=\\"RR*R\\"`, the output should be \\"Yes\\" since you can take three right steps and skip the \'*\'. - For an input `N=2` and `S=\\"LLR*\\"`, the output should be \\"No\\" since you cannot reach position `2` from `0`. Sample input: ``` 3 RR*R ``` Sample output: ``` Yes ``` Sample input: ``` 2 LLR* ``` Sample output: ``` No ```","solution":"def is_reachable(N, S): position = 0 # Calculate the current position for char in S: if char == \'L\': position -= 1 elif char == \'R\': position += 1 # Check if directly reachable if position == N: return \\"Yes\\" # Try skipping one \'*\' for i in range(len(S)): if S[i] == \'*\': temp_position = 0 for j, char in enumerate(S): if i == j: continue if char == \'L\': temp_position -= 1 elif char == \'R\': temp_position += 1 if temp_position == N: return \\"Yes\\" return \\"No\\""},{"question":"Gabriella is working on a grid with n rows and m columns. Each cell in the grid has an initial value. She can perform a set of operations to modify the grid. Each operation consists of selecting a subgrid and incrementing the value of each cell in this subgrid by 1. Gabriella wants to determine the state of the grid after a series of such operations. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next n lines contain m integers each, representing the initial values of the cells in the grid. The line after that contains an integer k (1 ≤ k ≤ 100000) — the number of operations. Each of the next k lines contains four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m) — describing the top-left and bottom-right cells of the subgrid to be incremented by 1. Output the final state of the grid after all the operations. Each cell value should be space-separated and each row should be printed on a new line. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output: 2 3 3 5 7 7 7 9 10 Explanation: After the first operation, the grid becomes: 2 3 3 5 6 6 7 8 9 After the second operation, the grid becomes: 2 3 3 5 7 7 7 9 10","solution":"def apply_operations(grid, operations): n = len(grid) m = len(grid[0]) # Applying each operation for r1, c1, r2, c2 in operations: for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): grid[i][j] += 1 return grid def grid_state_after_operations(n, m, initial_grid, k, operations): return apply_operations(initial_grid, operations)"},{"question":"In a small village named Algoville, there is a peculiar festival celebrated once a year where n houses are decorated with various colored lights. The village sets a strict guideline for the lights: each house must be connected to exactly two other houses, forming a single loop of houses. This loop can be visualized as a circular arrangement where every house is exactly 1 unit distance away from its two neighboring houses. The festival requires that the lights on the houses follow a specific alternating pattern to be most aesthetic: given k different colors, adjacent houses should have different colors. Your task is to determine the number of valid coloring patterns of the houses according to the given constraints. The first line of the input contains two integers n and k (3 ≤ n ≤ 200, 2 ≤ k ≤ 100), the number of houses and the number of different colors available, respectively. Output a single integer representing the number of valid ways to color the houses. Example: ``` Input: 5 3 Output: 6 ``` Explanation: In this example, there are 5 houses and 3 colors to choose from. The number of ways to color the houses satisfying the given condition is 6.","solution":"def count_valid_colorings(n, k): Returns the number of valid ways to color n houses using k colors such that no two adjacent houses have the same color. if k == 2: if n % 2 == 0: return 2 else: return 0 # For k > 2 return (k - 1) * pow(k - 2, n - 2) * k # Example print(count_valid_colorings(5, 3)) # Expected output: 6"},{"question":"Sarah loves organizing digital photo galleries. One day, she decides to arrange her photo collection numerically by the IDs assigned to the photos. She wants to make sure that there are no consecutive numbered photos in her collection. Your task is to help Sarah achieve this by removing the minimum number of photos. Given a list of distinct integers representing the photo IDs, return the minimum number of photos that need to be removed so that no two consecutive photo IDs remain in the collection. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of photo IDs. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the photo IDs. Output a single integer — the minimum number of photos that need to be removed. Example: Input: ``` 6 3 4 5 6 7 10 ``` Output: ``` 4 ``` Explanation: To ensure that no two consecutive photo IDs remain, we can remove photos with IDs 3, 4, 5, and 6. This leaves just 7 and 10.","solution":"def min_photos_to_remove(n, ids): Returns the minimum number of photos that need to be removed so that no two consecutive photo IDs remain in the collection. Parameters: n (int): the number of photo IDs. ids (list of int): a list of distinct integers representing the photo IDs. Returns: int: the minimum number of photos to remove. ids.sort() # Sort the list to check for consecutive IDs count = 0 # Variable to keep track of the number of removals # Iterate over the sorted list and count consecutive photos for i in range(1, n): if ids[i] == ids[i - 1] + 1: count += 1 # Increment the count if consecutive photos are found return count"},{"question":"You are given a list of integers representing the heights of buildings in a row. You want to place exactly two horizontal antennas on two of the buildings such that the sum of the heights of these two buildings is maximized. The two antennas cannot be placed on the same building but can be placed on adjacent buildings if necessary. Write a program to find the maximum sum of heights for the two antennas placed on different buildings. If there are no two buildings to place the antennas, return -1. The first line contains an integer n (1 leq n leq 10^6) — the number of buildings. The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9), where h_i is the height of the i-th building. Print a single integer — the maximum sum of heights of two buildings for placing the antennas, or -1 if there are no two buildings to place the antennas. **Input:** ``` 5 1 2 3 4 5 ``` **Output:** ``` 9 ``` **Input:** ``` 1 10 ``` **Output:** ``` -1 ``` **Explanation:** In the first example, placing antennas on the buildings with heights 4 and 5 maximizes the sum to 9. In the second example, there\'s only one building, so it\'s not possible to place two antennas. Hence, the output is -1.","solution":"def max_sum_of_two_buildings(n, heights): if n < 2: return -1 # Find the two largest heights max1, max2 = 0, 0 for height in heights: if height > max1: max2 = max1 max1 = height elif height > max2: max2 = height return max1 + max2 if max1 > 0 and max2 > 0 else -1"},{"question":"Imagine a garden represented as a grid of size n × m, where each cell contains a plant. Each plant can be of one of three types: flower, shrub, or tree. A gardener wants to water all the plants, but the water can only be distributed in specific patterns. On each row or column of the grid, the gardener can use a sprinkler that can water in one of three patterns: 1. Water all cells in the row or column. 2. Water every other cell in the row or column starting from the first cell. 3. Water every other cell in the row or column starting from the second cell. Given the initial grid of plants and constraints on the watering patterns, determine the minimum number of sprinklers needed to water all the plants in the garden. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the size of the garden grid. The next n lines each contain m characters, where each character represents a type of plant. The characters can be \'F\' (flower), \'S\' (shrub), or \'T\' (tree). Print a single integer — the minimum number of sprinklers required to water all the plants in the garden. # Sample Input ``` 3 4 FTFS SFTS TFFT ``` # Sample Output ``` 4 ``` **Explanation:** An optimal way to water all the plants with the minimum number of sprinklers is as follows: 1. Place a sprinkler on the first row to cover all cells (\'FTFS\'). 2. Place a sprinkler on the first column to cover all cells in the first column (\'FST\'). 3. Place a sprinkler on the second row to cover the remaining cells in that row (\'SFTS\'). 4. Place a sprinkler on the second column to cover the remaining cells in that column (\'FTF\'). Thus, with 4 sprinklers, all the plants in the garden can be watered.","solution":"def minimum_sprinklers(n, m, grid): # Minimum sprinklers will be the maximum of either rows or columns # because we should be able to cover either the whole row or column return min(n, m) # Sample input to demonstrate the expected function usage n = 3 m = 4 grid = [ \\"FTFS\\", \\"SFTS\\", \\"TFFT\\" ] # Example function call print(minimum_sprinklers(n, m, grid)) # Output: 3"},{"question":"Given an array of integers, determine the maximum number of segments (subarrays) into which the array can be split so that each segment has an equal sum. A segment is a continuous subsequence of the array. For example, the array [1, 2, 1, 2, 1, 2] can be split into three segments [1, 2], [1, 2], [1, 2] each having the sum 3. The first line of input contains a single integer t (1 le t le 10^4) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 le n le 2 cdot 10^5) — the size of the array. The second line contains n integers a_1, a_2, ..., a_n (0 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. For each test case, output the maximum number of segments into which the array can be split so that all segments have an equal sum. Example: Input: 2 6 1 2 1 2 1 2 4 4 0 4 0 Output: 3 2 Explanation: For the first test case, the array can be split into three segments: [1, 2], [1, 2], [1, 2]. For the second test case, the array can be split into two segments: [4, 0] and [4, 0].","solution":"def max_segments_with_equal_sum(t, test_cases): results = [] for n, a in test_cases: total_sum = sum(a) max_segments = 1 current_sum = 0 for i in range(n): current_sum += a[i] if current_sum * (n // (i + 1)) == total_sum: max_segments = max(max_segments, n // (i + 1)) results.append(max_segments) return results"},{"question":"Alice has an array of integers, and she wants to count how many distinct sums can be obtained using the elements of the array. Each element of the array can be used at most once in forming the sums. Alice can form a sum by choosing any subset of the elements in the array (including the empty subset which forms sum 0). Your task is to determine the number of distinct sums that Alice can obtain from the array. The first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the elements of the array. Print the number of distinct sums that can be obtained using the elements of the array. # Example **Input** ``` 3 1 2 3 ``` **Output** ``` 7 ``` **Explanation** The distinct sums are as follows: - Using no elements: 0 - Using [1]: 1 - Using [2]: 2 - Using [3]: 3 - Using [1, 2]: 3 - Using [1, 3]: 4 - Using [2, 3]: 5 - Using [1, 2, 3]: 6 So, the number of distinct sums is 7. (Note: In this example, the set of sums excludes duplicates, hence only unique sums are counted.)","solution":"def count_distinct_sums(arr): Returns the number of distinct sums that can be obtained using the elements of the array. Each element of the array can be used at most once in forming the sums. sums = set([0]) for num in arr: new_sums = set() for s in sums: new_sums.add(s + num) sums.update(new_sums) return len(sums)"},{"question":"You are an environmental researcher studying the migration patterns of birds in a grid-like wildlife reserve. The reserve is an r times r grid, with rows and columns numbered 1 to r. Each bird follows a planned route through the reserve, flying from one cell to another in straight lines either horizontally or vertically. You have n migration reports, each detailing the route of a bird with the start and end coordinates of each migration segment. Each segment is straight, either horizontal or vertical, and located on consecutive cells in the grid. Birds do not travel diagonally. Your goal is to determine if there are any conflicts in the birds\' routes. Two birds are in conflict if their routes intersect at any point. Specifically, an intersection occurs if they share a cell while migrating, but not necessarily at the same time. Given the routes of the birds, determine whether there is any conflict in their migration patterns. The first line of the input contains two integers r and n (1 le r le 1000, 1 le n le 100,000) – the size of the grid and the number of birds\' route reports. The next n lines each describe a route with four integers x_1, y_1, x_2, y_2 (1 le x_1, y_1, x_2, y_2 le r), where (x_1, y_1) is the starting cell and (x_2, y_2) is the ending cell of the bird\'s route. It is guaranteed that each route is either strictly horizontal or strictly vertical. Output \\"Yes\\" if there is any conflict in the routes, otherwise \\"No\\". Example: ``` Input: 5 3 1 1 1 5 2 1 2 5 1 5 5 5 Output: Yes ``` Explanation: The routes intersect at cell (1, 5), creating a conflict. Therefore, the output is \\"Yes\\".","solution":"def migration_conflict(r, n, routes): # A set to keep track of cells that have been visited by any bird visited_cells = set() for route in routes: x1, y1, x2, y2 = route if x1 == x2: # vertical route for y in range(min(y1, y2), max(y1, y2) + 1): if (x1, y) in visited_cells: return \\"Yes\\" visited_cells.add((x1, y)) else: # horizontal route for x in range(min(x1, x2), max(x1, x2) + 1): if (x, y1) in visited_cells: return \\"Yes\\" visited_cells.add((x, y1)) return \\"No\\""},{"question":"You are given a list of numbers, and your task is to find the length of the longest subsequence composed of distinct (unique) elements. A subsequence is derived from the list by deleting some or no elements without changing the order of the remaining elements. For example, for the list `5, 1, 3, 5, 2, 3, 4, 1`, the longest subsequence of distinct elements is `5, 1, 3, 2, 4`, and its length is `5`. The first line of input contains a single integer `n` (1 ≤ n ≤ 100), the number of elements in the list. The second line contains `n` space-separated integers `a_1, a_2,..., a_n` (1 ≤ a_i ≤ 100) which are the elements of the list. Output a single integer, the length of the longest subsequence with all distinct elements. For example, consider the input: ``` 7 7 3 2 5 3 5 7 ``` Output: ``` 4 ``` Here, the longest subsequence of distinct elements are `7, 3, 2, 5` or `7, 3, 2, 5`, both have a length of `4`.","solution":"def longest_distinct_subsequence(n, lst): Returns the length of the longest subsequence with all distinct elements. Parameters: n (int): The number of elements in the list. lst (list): The list of elements. Returns: int: The length of the longest subsequence with all distinct elements. seen = set() longest_length = 0 current_length = 0 for num in lst: if num in seen: longest_length = max(longest_length, current_length) seen.clear() current_length = 0 seen.add(num) current_length += 1 longest_length = max(longest_length, current_length) return longest_length"},{"question":"In a coastal city, there are n lighthouses arranged in a straight line along the shore. Each lighthouse has an illumination range that can cover some section of the shore. The i-th lighthouse is located at position xi and has an illumination range of ri, meaning it can illuminate from (xi - ri) to (xi + ri). A ship is sailing along the shore and we want to determine if it\'s possible for the ship to sail from the start of the shore (position 0) to the end of the shore (position L) without ever being outside the range of illumination provided by the lighthouses. Given the positions and illumination ranges of the lighthouses, determine if it\'s possible for the ship to sail safely from 0 to L. The first line of the input contains two integers n and L (1 ≤ n ≤ 100, 1 ≤ L ≤ 1000) — the number of lighthouses and the length of the shore. The second line contains n integers x1, x2, ..., xn (0 ≤ xi ≤ L) — the positions of the lighthouses. The third line contains n integers r1, r2, ..., rn (0 ≤ ri ≤ L) — the illumination ranges of the lighthouses. Print \\"YES\\" if the ship can sail safely from 0 to L, otherwise print \\"NO\\". In the first sample, the ship can sail from position 0 to 10 without ever being outside the range of illumination, as shown in the diagram below. The lighthouses cover the entire stretch uniformly. In the second sample, there is an uncovered region between the illuminated areas of the lighthouses, making it impossible for the ship to sail safely through the entire shore.","solution":"def can_sail_safely(n, L, positions, ranges): intervals = [] for i in range(n): start = max(0, positions[i] - ranges[i]) end = min(L, positions[i] + ranges[i]) intervals.append((start, end)) # Sort intervals based on start values intervals.sort() # Merge intervals and check if we can cover the whole range from 0 to L max_reach = 0 for interval in intervals: if interval[0] > max_reach: break if interval[1] > max_reach: max_reach = interval[1] if max_reach >= L: return \\"YES\\" return \\"NO\\""},{"question":"Veronica is organizing a new scavenger hunt. There is a grid of size `n x n` representing the field where the scavenger hunt will take place. Each cell in the grid can be either open (`.`) or blocked (`#`). Veronica wants to know the minimum number of steps it would take to move from the top-left corner `(1, 1)` to the bottom-right corner `(n, n)`. You can move one step in four possible directions: up, down, left, or right, but you cannot step into a blocked cell. If there is no possible path from the top-left corner to the bottom-right corner, print `-1`. The first line of the input contains a single integer `n` —— the size of the grid (2 ≤ n ≤ 2000). The next `n` lines each contain a string of length `n` consisting of characters `.` and `#`. Print the minimum number of steps required to move from the top-left corner to the bottom-right corner. In the first example, the output should be 4. The path is from `(1,1)` to `(2,1)`, then to `(2,2)`, then to `(3,2)`, and finally to `(3, 3)`. In the second example, the output should be -1 since there\'s no path from `(1,1)` to `(5,5)`.","solution":"from collections import deque def min_steps_to_reach_end(n, grid): Returns the minimum number of steps required to move from the top-left corner to the bottom-right corner, or -1 if there is no possible path. if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, Down, Left, Up queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set([(0, 0)]) while queue: r, c, steps = queue.popleft() if r == n - 1 and c == n - 1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"Zara has recently started working with a robot named Botly, designed to move on a 2D grid. The grid is represented by a series of instructions that guide Botly\'s movement. Botly can move in four directions: north (N), south (S), east (E), and west (W). However, due to a malfunction, some of the instructions may be duplicated in the sequence. Botly starts at the origin point (0, 0) on the grid. Your task is to determine Botly\'s final position after executing the given sequence of instructions, while ignoring any duplicate consecutive movements. A movement is considered a duplicate if it is the same as the previous movement. For example, if the instruction sequence is \\"NNEEWWSS\\", Botly will move north twice, east twice, west twice, and south twice; but, since consecutive duplicate movements are ignored, Botly will only move north once, east once, west once, and south once, resulting in the final movements \\"NEWS\\". You need to write a program that reads the sequence of instructions and computes Botly\'s final position. Input: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of instructions in the sequence. - The second line contains a string of length n consisting of characters \'N\', \'S\', \'E\', and \'W\' which represents the sequence of instructions. Output: - Print two integers x and y — the final coordinates of Botly on the grid. Example: Input: 8 NNEEWWSS Output: 0 0 Explanation: Botly\'s movements can be simplified to \\"NEWS\\", resulting in no net displacement from the origin. Therefore, the final position is (0, 0).","solution":"def final_position(n, instructions): x, y = 0, 0 last_move = None for move in instructions: if move == last_move: continue last_move = move if move == \'N\': y += 1 elif move == \'S\': y -= 1 elif move == \'E\': x += 1 elif move == \'W\': x -= 1 return x, y # Example usage: # n = 8 # instructions = \\"NNEEWWSS\\" # print(final_position(n, instructions)) # Output should be (0, 0)"},{"question":"Given an array of integers, you have to modify the array by applying a series of operations. In each operation, you can select any subarray and reverse its order. Your goal is to sort the array in non-decreasing order using the minimum number of operations. The first line of input contains a single integer t (1 le t le 100) — the number of test cases. Each test case starts with an integer n (1 le n le 200) — the number of elements in the array. The next line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^3) — the elements of the array. For each test case, output a single integer — the minimum number of operations needed to sort the array in non-decreasing order. **Example:** ``` Input: 2 4 4 3 1 2 3 2 1 3 Output: 2 1 ``` **Explanation:** For the first test case, you can sort the array with two operations: 1. Reverse the subarray [3, 1, 2] to get [4, 2, 1, 3] 2. Reverse the subarray [4, 2, 1] to get [1, 2, 4, 3] 3. Reverse the subarray [4, 3] to get [1, 2, 3, 4] For the second test case, you only need one operation to reverse the subarray [2, 1] to get [1, 2, 3].","solution":"def min_operations(t, test_cases): Given the number of test cases and the respective test cases, this function computes the minimum number of reverse operations needed to sort each array in non-decreasing order. results = [] for case in test_cases: n, arr = case sorted_arr = sorted(arr) # If the array is already sorted, no operation is needed. if arr == sorted_arr: results.append(0) continue L = 0 R = n - 1 # Find the first out-of-place element from the start while L < n and arr[L] == sorted_arr[L]: L += 1 # Find the first out-of-place element from the end while R >= 0 and arr[R] == sorted_arr[R]: R -= 1 # Check the case where a single reverse operation on the middle subarray can solve it if arr[L:R + 1] == sorted_arr[L:R + 1][::-1]: results.append(1) else: results.append(2) return results"},{"question":"Violet is organizing a library and needs your help. She has a list of books, and each book belongs to a specific genre. To make the library efficient, she wants to group books based on their genres and then sort the books within each group alphabetically. Additionally, she needs the genres to be listed in alphabetical order as well. Write a program to help her achieve this. The first line contains an integer n (1 ≤ n ≤ 1000), the number of books. The next n lines each contain a string and a genre, separated by a comma. The string is the title of the book and the genre is the genre it belongs to. Titles and genres consist of lowercase English letters and spaces, and their lengths are between 1 and 100. Output the genres along with the sorted list of book titles in each genre. Each genre and its books should be printed like this: ``` genre: - title - title ``` The genres should appear in alphabetical order, and the titles within each genre should also be in alphabetical order. # Example: Input: ``` 7 the great gatsby,classic to kill a mockingbird,classic fahrenheit 451,classic a brief history of time,science the wind-up bird chronicle,fiction norwegian wood,fiction cosmos,science ``` Output: ``` classic: - fahrenheit 451 - the great gatsby - to kill a mockingbird fiction: - norwegian wood - the wind-up bird chronicle science: - a brief history of time - cosmos ```","solution":"def organize_library(n, books): from collections import defaultdict # Create a dictionary to hold genres and their respective books genre_dict = defaultdict(list) for entry in books: title, genre = entry.split(\',\') genre = genre.strip() genre_dict[genre].append(title.strip()) # Sort genres and within each genre sort the books sorted_genres = sorted(genre_dict.items()) result = [] for genre, titles in sorted_genres: result.append(f\\"{genre}:\\") for title in sorted(titles): result.append(f\\" - {title}\\") return \\"n\\".join(result)"},{"question":"There are n cities in a country, connected by m bidirectional roads. Each road has a certain travel time associated with it. You are given a list of roads and their respective travel times. Your task is to determine the minimum total travel time required to visit all cities starting and ending at the same city exactly once (a Hamiltonian cycle). The first line contains two integers n (2 ≤ n ≤ 20) and m (1 ≤ m ≤ 190) — the number of cities and the number of roads, respectively. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — the cities connected by a road and the travel time (w) of that road. If it\'s impossible to visit all cities in such a way, print -1. Output the minimum total travel time required to complete the tour. If more than one tour with the same minimum distance exists, print the distance of any of them. Example: Input: 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 Output: 80","solution":"def min_hamiltonian_cycle(n, roads): import sys from itertools import permutations # Create a matrix for adjacency representation matrix = [[sys.maxsize] * n for _ in range(n)] for u, v, w in roads: matrix[u-1][v-1] = w matrix[v-1][u-1] = w # dp[mask][i] will be holding the minimum distance to visit all the cities in mask, ending at city i dp = [[sys.maxsize] * n for _ in range(1 << n)] dp[1][0] = 0 # starting from city 0, hence mask 1 << 0 is 1 and distance 0 for mask in range(1 << n): for u in range(n): if mask & (1 << u): for v in range(n): if mask & (1 << v) == 0 and matrix[u][v] != sys.maxsize: dp[mask | (1 << v)][v] = min(dp[mask | (1 << v)][v], dp[mask][u] + matrix[u][v]) # Starting point is city 0 and we need to return to city 0 answer = sys.maxsize for i in range(1, n): if matrix[i][0] != sys.maxsize: answer = min(answer, dp[(1 << n) - 1][i] + matrix[i][0]) return -1 if answer == sys.maxsize else answer"},{"question":"A company is developing a scheduling system to manage tasks in their workflow. Each task is characterized by its duration, priority, and dependencies. A task can only start when all its dependencies have been completed. Each task is represented as a tuple (di, pi, deps), where: - di is the duration of the task - pi is the priority of the task - deps is a list of zero or more tasks that must be completed before this task can start The company wants to schedule the tasks such that: 1. All tasks are completed in the minimum possible total duration (considering their dependencies). 2. Among schedules with the same total duration, the one with the highest total priority sum should be chosen. Write a function `schedule_tasks(n, tasks)` that schedules the tasks and returns a list of tasks in the order they should be completed. The function signature is: ```python def schedule_tasks(n: int, tasks: List[Tuple[int, int, List[int]]]) -> List[int]: pass ``` Where: - `n` is the number of tasks (1 ≤ n ≤ 1000). - `tasks` is a list of `n` tuples, each representing a task. The output list should be a valid order of the task indices from 0 to n-1. If multiple valid schedules exist with the same duration, return the one with the highest priority sum. If no valid schedule exists (due to cyclic dependencies), return an empty list. Example Input: ``` n = 5 tasks = [ (3, 10, []), # Task 0 with duration 3 and priority 10, no dependencies (2, 20, [0]), # Task 1 with duration 2 and priority 20, depends on task 0 (1, 30, [0]), # Task 2 with duration 1 and priority 30, depends on task 0 (4, 40, [1, 2]), # Task 3 with duration 4 and priority 40, depends on tasks 1 and 2 (5, 50, [3]) # Task 4 with duration 5 and priority 50, depends on task 3 ] ``` Example Output: ``` [0, 1, 2, 3, 4] ```","solution":"from typing import List, Tuple import heapq def schedule_tasks(n: int, tasks: List[Tuple[int, int, List[int]]]) -> List[int]: # Create adjacency list and in-degree array adj_list = [[] for _ in range(n)] in_degree = [0] * n duration = [0] * n priority = [0] * n for i, (d, p, deps) in enumerate(tasks): duration[i] = d priority[i] = p for dep in deps: adj_list[dep].append(i) in_degree[i] += 1 # Priority queue for zero in-degree nodes pq = [] for i in range(n): if in_degree[i] == 0: heapq.heappush(pq, (-priority[i], -duration[i], i)) result = [] while pq: _, _, u = heapq.heappop(pq) result.append(u) for v in adj_list[u]: in_degree[v] -= 1 if in_degree[v] == 0: heapq.heappush(pq, (-priority[v], -duration[v], v)) # Check if we have a valid topological sort if len(result) == n: return result else: return []"},{"question":"A researcher is studying the growth patterns of a peculiar species of fungus. They observe that the fungus grows in a pattern resembling a rectangular grid and takes special interest in the number of unique clusters of fungus over time. Each grid cell can either be empty (\'.\') or occupied by fungus (\'X\'). Two neighboring cells (shared border) occupied by fungus belong to the same cluster. The researcher maintains a log of the grid configurations observed each day. They want to analyze these logs and determine the number of unique fungus clusters for each day. Given the initial state of the grid and the fungal growth patterns for subsequent days, help the researcher determine the number of unique clusters of fungus for each day\'s grid configuration. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 100), representing the dimensions of the grid. The next n lines contain the initial grid configuration. The following q lines describe the changes in the grid each day. Each change is represented by three integers d, r, c (1 ≤ d ≤ q, 1 ≤ r ≤ n, 1 ≤ c ≤ m), where d represents the day number, and (r, c) represents the coordinates of the grid cell where the fungus grows on that day. After each day\'s change, print the number of unique clusters of fungus in the grid. **Input format**: ``` n m grid_1 grid_2 ... grid_n q d_1 r_1 c_1 d_2 r_2 c_2 ... d_q r_q c_q ``` **Output format**: Print q lines. Each line should contain one integer — the number of unique clusters of fungus after each day\'s change. **Example**: ``` 4 5 ..... ..... ..... ..... 3 1 1 1 2 1 2 3 2 1 ``` **Example output**: ``` 1 1 1 ``` In the example above: - On Day 1, the fungus grows at (1, 1), forming 1 unique cluster. - On Day 2, the fungus grows at (1, 2), this cell connects to (1, 1), so there\'s still 1 unique cluster. - On Day 3, the fungus grows at (2, 1), which connects to (1, 1), so there\'s still 1 unique cluster.","solution":"def find_clusters(grid, n, m): def dfs(r, c): stack = [(r, c)] while stack: cr, cc = stack.pop() for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = cr + dr, cc + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == \'X\': grid[nr][nc] = \'.\' stack.append((nr, nc)) clusters = 0 for i in range(n): for j in range(m): if grid[i][j] == \'X\': clusters += 1 grid[i][j] = \'.\' dfs(i, j) return clusters def get_fungus_clusters(n, m, initial_grid, changes): results = [] current_grid = [list(row) for row in initial_grid] for d, r, c in changes: current_grid[r-1][c-1] = \'X\' # grow fungus at the specified cell # Create a deep copy of the current grid to find clusters without modifying the original temp_grid = [row.copy() for row in current_grid] clusters = find_clusters(temp_grid, n, m) results.append(clusters) return results"},{"question":"Given a string `s` consisting of lowercase letters, your task is to determine the minimal number of operations required to convert `s` into a string where all characters are distinct. In each operation, you can insert any new character (that does not already appear in `s`) at any position in the string. Note: - New characters must be lowercase English letters that do not already appear in the string. The input consists of multiple test cases. The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains a single integer `n` (1 ≤ n ≤ 100) — the length of the string. The second line of each test case contains the string `s`. For each test case, print a single integer — the minimal number of operations required to make the string `s` consisting of distinct characters. Example: Input: ``` 3 6 aabcde 5 abcde 4 aaaa ``` Output: ``` 1 0 3 ``` Explanation: - In the first test case, the string \\"aabcde\\" has the character \'a\' appearing twice. We can insert any new character, for example, \'f\', in any position to get \\"abcdef\\", which requires only one operation. - In the second test case, the string \\"abcde\\" already has all unique characters, so no operations are needed. - In the third test case, the string \\"aaaa\\" has the character \'a\' appearing four times. We need to insert three new characters, \'b\', \'c\', and \'d\', to make it \\"abcd\\".","solution":"def minimal_operations_to_distinct(t, test_cases): Determines the minimal number of operations required to make all characters in the string distinct. Args: t (int): Number of test cases. test_cases (list): A list of tuples, each containing an integer n and a string s. Returns: list: List of integers representing minimal operations for each test case. results = [] for i in range(t): n, s = test_cases[i] unique_chars = set(s) num_operations = n - len(unique_chars) results.append(num_operations) return results"},{"question":"You have been given an array of integers. An array with a peak element is defined as an array where an element is greater than both of its neighboring elements. Your task is to modify the given array such that there is exactly one peak element and all other elements are strictly smaller, if possible. If it\'s not possible to modify the array in such a way, return -1. The peak element can be at any position in the array except the first or last. The first line contains a single integer n (3 leq n leq 10^5) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. Print the modified array if it\'s possible to create exactly one peak element, otherwise, print -1. **Example:** **Input:** ``` 5 1 2 3 2 1 ``` **Output:** ``` 1 1 3 1 1 ``` **Input:** ``` 3 1 1 1 ``` **Output:** ``` -1 ```","solution":"def create_peak_array(n, arr): Modifies the array to have exactly one peak element. Returns the modified array if possible, otherwise returns -1. if n < 3: return -1 # Find the peak and verify if there is only one peak peaks = [i for i in range(1, n-1) if arr[i] > arr[i-1] and arr[i] > arr[i+1]] if len(peaks) != 1: return -1 peak = peaks[0] new_arr = [1] * n new_arr[peak] = arr[peak] return new_arr # Example usage n = 5 arr = [1, 2, 3, 2, 1] print(create_peak_array(n, arr)) # Output should be [1, 1, 3, 1, 1]"},{"question":"A company wants to manage and track its employees\' performance over a series of evaluations. Each evaluation either grants a point to an employee or deducts a point, and the company wants to know if there is a time when an employee\'s cumulative score matches a target value. You are given the number of employees and a series of evaluations for each employee as input. Your task is to find if there is any employee whose cumulative score matches a given target score at any point in time during these evaluations. The first line contains two integers: the number of employees n (1 ≤ n ≤ 1000) and the target score T (-1000 ≤ T ≤ 1000). For the next n lines, each line contains a series of evaluations for each employee. Each evaluation is represented by an integer, which can be either +1 (point granted) or -1 (point deducted). The number of evaluations for each employee is between 1 and 1000. Output \\"YES\\" if there is at least one employee whose cumulative score matches the target score at any point during the evaluations. Otherwise, output \\"NO\\". Example: Input: ``` 3 2 +1 -1 +1 +1 +1 -1 +1 +1 +1 -1 +1 +1 +1 -1 -1 +1 +1 +1 -1 +1 +1 ``` Output: ``` YES ``` In the first example, the first employee\'s evaluation sequence is +1, -1, +1, +1, +1, -1, +1. The cumulative score during this sequence reaches 2 at different points. Hence, the answer is \\"YES\\".","solution":"def check_target_score(n, T, evaluations): Checks if any employee\'s cumulative score matches the target score T at any point. :param n: Number of employees :param T: Target score to match :param evaluations: List of lists, where each list contains the evaluations for each employee :return: \\"YES\\" if any employee\'s cumulative score matches the target at any point, otherwise \\"NO\\" for employee_evaluations in evaluations: cumulative_score = 0 for score in employee_evaluations: if score == \'+1\': cumulative_score += 1 elif score == \'-1\': cumulative_score -= 1 if cumulative_score == T: return \\"YES\\" return \\"NO\\""},{"question":"In a distant galaxy, researchers have discovered a rare, ancient biological sequence stored within a digital format. To decipher its structure, they have tasked you with writing a program that will find the longest palindromic subsequence within it. A palindromic sequence reads the same backwards as forwards. Given a string, determine the length of the longest palindromic subsequence. The first line contains a string s (1 ≤ |s| ≤ 1,000) which consists of uppercase and lowercase letters. Print a single integer — the length of the longest palindromic subsequence in the given string. For example, for the input \\"abaxyzzyxf\\", the longest palindromic subsequence is \\"xyzzyx\\", and its length is 6.","solution":"def longest_palindromic_subsequence(s): n = len(s) # Create a 2D array to store lengths of palindromic subsequence dp = [[0 for _ in range(n)] for _ in range(n)] # Strings of length 1 have the longest palindromic subsequence of length 1 for i in range(n): dp[i][i] = 1 # Build the table for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"Carla is an avid gardener and loves experimenting with different plants in her backyard. She recently came across a special type of plant that grows in a unique pattern. The growth of the plant can be represented as a string of equal length, where each character denotes a different segment of the plant. However, one problem she noticed is that the segments of the plant could become identical in some adjacent parts, making them more prone to certain pests. She decided to analyze the string and identify spots where the segments are identical in adjacent positions. Carla wants to ensure the string representing the plant\'s growth has at least \'x\' distinct characters in every substring of length \'k\'. If not, she needs to find the smallest number of characters she needs to change to meet this requirement. Given a string of lowercase English letters, an integer \'x\' representing the minimum number of distinct characters required, and an integer \'k\' representing the length of the substring, write a program to help Carla determine the smallest number of characters she needs to change so that every substring of length \'k\' has at least \'x\' distinct characters. Input: - A single string \'s\' representing the plant\'s growth (1 ≤ |s| ≤ 100,000) - Two integers, \'x\' and \'k\', where 1 ≤ x ≤ k ≤ |s| Output: - An integer representing the minimum number of changes required. Example: ``` Input: abacabad 2 3 Output: 0 ```","solution":"def min_changes_to_meet_requirement(s, x, k): Returns the minimum number of changes required so that every substring of length k has at least x distinct characters. n = len(s) min_changes = float(\'inf\') for i in range(n - k + 1): substring = s[i:i+k] unique_count = len(set(substring)) if unique_count < x: min_changes = min(min_changes, x - unique_count) return min_changes if min_changes != float(\'inf\') else 0 # Example usage # s = \\"abacabad\\" x = 2 k = 3 # should output 0 print(min_changes_to_meet_requirement(\\"abacabad\\", 2, 3))"},{"question":"Peterson is a curious explorer who loves traveling to new and exciting places. He plans his journeys with the help of a special map called the \\"interestingness map\\". The interestingness map is a directed graph with weighted edges. Each node represents a place, and each edge a route with a specific degree of interestingness. Peterson wants to start his journey from a given node and visit all places while maximizing the total interestingness value of his journey. He should visit each place exactly once and complete his journey by returning to his starting node. Essentially, he needs to solve the Traveling Salesman Problem (TSP) in this weighted directed graph. However, there are some constraints: - Peterson can only start his journey from nodes that have an indexing pattern (starting from 1) that is one of the modulo k group numbers (i.e., nodes are numbered 0 mod k, 1 mod k, ..., k-1 mod k). - Due to his preference to avoid boredom from traveling the same kind of roads, he forbids using any of the roads with the degree of interest less than a given threshold w. Your task is to help Peterson by writing a program to find the maximum total interestingness of a valid tour or determine that visiting all places is not possible under the provided constraints. The first line of input contains three integers n (2 ≤ n ≤ 15), m (1 ≤ m ≤ 60), and w (0 ≤ w ≤ 100) - the number of places, the number of directed roads, and the interestingness threshold respectively. The next line contains a single integer k (1 ≤ k ≤ n) - the modulo group number. The following m lines each contain three integers u, v (1 ≤ u, v ≤ n), and c (0 ≤ c ≤ 100) - describing a directed road from node u to node v with interestingness c. On the single line of output, print the maximum total interestingness of the journey if it is possible to visit all the places exactly once and return to the starting point. If it\'s not possible to find such a journey, output -1.","solution":"from itertools import permutations def max_interestingness_tour(n, m, w, k, edges): # Create adjacency matrix for interestingness values interestingness = [[-1 for _ in range(n)] for _ in range(n)] for u, v, c in edges: if c >= w: interestingness[u - 1][v - 1] = c def compute_total_interestingness(path): total = 0 for i in range(len(path) - 1): if interestingness[path[i]][path[i + 1]] == -1: return -1 total += interestingness[path[i]][path[i + 1]] return total max_interestingness = -1 possible_start_nodes = [i for i in range(n) if i % k == 0] for start in possible_start_nodes: for perm in permutations(range(n)): if perm[0] == start: total = compute_total_interestingness(perm + (start,)) if total > max_interestingness: max_interestingness = total return max_interestingness # Function to be used for testing def solve_tsp(n, m, w, k, edges): result = max_interestingness_tour(n, m, w, k, edges) return result"},{"question":"Given an integer array `nums` of size `n`, find the length of the longest subsequence where the difference between consecutive elements is the same. The first line contains a single integer `n` (1 ≤ n ≤ 2 * 10^5) — the number of elements in the array. The second line contains `n` integers `nums1, nums2, ..., numsn` (1 ≤ numsi ≤ 10^9) — the elements of the array. Print a single integer — the length of the longest subsequence with the same difference between consecutive elements. **Examples:** Input: ``` 6 1 7 10 13 14 19 ``` Output: ``` 4 ``` Input: ``` 3 1 2 4 ``` Output: ``` 2 ``` **Explanation:** In the first example, the longest subsequence with the same difference between consecutive elements is [1, 7, 13, 19], with a common difference of 6. In the second example, the numbers [1, 2] have a difference of 1, and [2, 4] have a difference of 2. The longest subsequence with the same difference is of length 2.","solution":"def longest_arith_seq_length(nums): Returns the length of the longest subsequence where the difference between consecutive elements is the same. if len(nums) == 1: return 1 dp = {} max_len = 1 for i in range(len(nums)): for j in range(i + 1, len(nums)): diff = nums[j] - nums[i] if (i, diff) in dp: dp[(j, diff)] = dp[(i, diff)] + 1 else: dp[(j, diff)] = 2 max_len = max(max_len, dp[(j, diff)]) return max_len"},{"question":"You are given a sequence of integers. Your task is to find the length of the longest subarray where the sum of its elements is even. The first line of input contains an integer n (1 ≤ n ≤ 100000) — the number of integers in the sequence. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9) — the elements of the sequence. Print a single integer that represents the length of the longest subarray with an even sum. For example, for the input: ``` 5 1 2 3 4 5 ``` The output should be: ``` 4 ``` In the first sample, the longest subarray with an even sum is [1, 2, 3, 4] where the sum is 10, which is even.","solution":"def longest_even_sum_subarray_length(n, arr): Function to find the length of the longest subarray where the sum of its elements is even. Parameters: n (int): Number of integers in the sequence arr (list): List of integers representing the sequence Returns: int: The length of the longest subarray with an even sum # Initializing variables even_prefix_index = -1 odd_prefix_index = -1 prefix_sum = 0 max_length = 0 for i in range(n): prefix_sum += arr[i] if prefix_sum % 2 == 0: current_length = i + 1 max_length = max(max_length, current_length) else: if odd_prefix_index != -1: current_length = i - odd_prefix_index max_length = max(max_length, current_length) if even_prefix_index == -1: even_prefix_index = i if odd_prefix_index == -1: odd_prefix_index = i return max_length"},{"question":"You are given a string s consisting of lowercase letters and a list of q queries. Each query is described by two integers l and r (1-indexed) and asks you to determine the number of distinct characters in the substring of s starting from position l and ending at position r. For example, if s = \\"abcabc\\" and we have a query l = 1, r = 3, the substring would be \\"abc\\", which contains three distinct characters: \'a\', \'b\', and \'c\'. Perform all queries and return the results. The input is given as follows: The first line contains a string s (1 leq |s| leq 10^5) consisting of lowercase English letters. The second line contains an integer q (1 leq q leq 10^4) — the number of queries. Each of the next q lines contains two integers l and r (1 leq l leq r leq |s|) — the positions defining the substring for the query. Output q lines, each containing the number of distinct characters in the corresponding substring of s. # Constraints 1 leq |s| leq 100000 1 leq q leq 10000 1 leq l leq r leq |s| # Example Input ``` abcabc 3 1 3 4 6 2 5 ``` Output ``` 3 3 3 ``` Explanation For the given string \\"abcabc\\": - Query 1 (1 to 3): Substring is \\"abc\\", which has 3 distinct characters: \'a\', \'b\', \'c\'. - Query 2 (4 to 6): Substring is \\"abc\\", which again has 3 distinct characters: \'a\', \'b\', \'c\'. - Query 3 (2 to 5): Substring is \\"bcab\\", which has 3 distinct characters: \'a\', \'b\', \'c\'.","solution":"def distinct_characters_in_substrings(s, queries): s: A string of lowercase English letters. queries: A list of tuples (l, r) indicating the range for each query. Returns a list with the number of distinct characters in the given substring for each query. results = [] for l, r in queries: substring = s[l-1:r] distinct_chars = len(set(substring)) results.append(distinct_chars) return results"},{"question":"A software company has organized a coding competition. Participants are given an array of integers and asked to perform some queries on this array. The queries can be of two types: 1. Update: Given an index and a value, update the element at the specified index to the given value. 2. Maximum: Given a range [l, r], find the maximum value in the subarray from index l to r (inclusive). The program should efficiently handle these queries. The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a1, a2, ..., an — the initial elements of the array. Each of the next q lines contains a query in one of the following formats: - `1 i x` (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9) — Update the element at index i to x (1-based index). - `2 l r` (1 ≤ l ≤ r ≤ n) — Find the maximum value in the subarray from index l to r (1-based index). For each query of the second type, print the maximum value in the specified range. Example: ``` Input: 5 5 1 2 3 4 5 2 1 5 1 3 10 2 1 5 1 5 7 2 4 5 Output: 5 10 7 ```","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Build the tree self.build(data) def build(self, data): # Initialise leaves in the tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree from leaves to root for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, index, value): # Set value at position p index += self.n self.tree[index] = value # Move upward and update parents index //= 2 while index >= 1: self.tree[index] = max(self.tree[2 * index], self.tree[2 * index + 1]) index //= 2 def maximum(self, left, right): # Get maximum in range [left, right) left += self.n right += self.n result = -float(\'inf\') while left < right: if left % 2: result = max(result, self.tree[left]) left += 1 if right % 2: right -= 1 result = max(result, self.tree[right]) left //= 2 right //= 2 return result def process_queries(n, q, array, queries): result = [] seg_tree = SegmentTree(array) for query in queries: if query[0] == 1: _, i, x = query seg_tree.update(i - 1, x) elif query[0] == 2: _, l, r = query result.append(seg_tree.maximum(l - 1, r)) return result"},{"question":"In a galaxy far away, there is a special type of creature called a \\"glider.\\" These gliders travel between planets in unique patterns. Each glider has a predetermined set of planets it must visit in a specific order. However, to conserve their energy, gliders can skip visiting certain planets as long as they still visit the planets in their specified order. You are given a list of planets, and each glider\'s sequence of planets it must visit is a subsequence of this list. Given the planets in this galaxy and one specific glider\'s required sequence, your task is to determine how many different subsequences in the list match the glider\'s sequence. The first line contains an integer n (1 le n le 10^5) — the number of planets in the list. The second line contains n space-separated integers p_1, p_2, dots, p_n (1 le p_i le 100) — the types of planets in the list. The third line contains an integer m (1 le m le 100) — the number of planets in the glider\'s sequence. The fourth line contains m space-separated integers q_1, q_2, dots, q_m (1 le q_i le 100) — the types of planets in the glider\'s sequence. Output a single integer — the number of different subsequences of the list of planets that match the glider\'s sequence. For example, if the planet list is [1, 2, 2, 4, 2] and the glider\'s sequence is [2, 2], there are 3 subsequences that match: the second and third planets, the second and fifth planets, and the third and fifth planets. Another example is if the planet list is [1, 3, 2, 3, 3] and the glider\'s sequence is [3, 3], indicating that the subsequences are not necessarily contiguous but must respect the order within the sequence: [1,2], [3,3] <br>","solution":"def count_subsequences(planets, glider_sequence): Returns the number of different subsequences in the planet list that match the glider sequence. n, m = len(planets), len(glider_sequence) dp = [0] * (m + 1) dp[0] = 1 for planet in planets: for j in range(m - 1, -1, -1): if planet == glider_sequence[j]: dp[j + 1] += dp[j] return dp[m]"},{"question":"Aria has a sophisticated algorithm that involves accessing multiple databases. She recently faced a problem where she needs to perform a set of operations to ensure data consistency across all databases. Each operation needs to be executed at the exact timestamp, and no two operations can be executed simultaneously on the same database. Each operation is represented by its start and end timestamps. Given a list of operations, help Aria determine if it is possible to execute all operations without any conflicts on a single database. The first line of input contains an integer T (1 ≤ T ≤ 1000) — the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 100) — the number of operations. The following n lines each contain two space-separated integers si and ei (0 ≤ si < ei ≤ 1000) — the start and end timestamp of the i-th operation. For each test case, output \\"YES\\" if all operations can be performed on a single database without conflicts, otherwise output \\"NO\\". Examples: Input 2 3 1 3 2 5 4 6 2 1 2 3 4 Output NO YES Explanation: In the first test case, operations 1 and 2 overlap (1-3 and 2-5), hence it\'s not possible to execute without conflicts. In the second test case, operations do not overlap (1-2 and 3-4), hence it\'s possible to execute without conflicts.","solution":"def can_execute_all_operations(test_cases): results = [] for test in test_cases: operations = test[\'operations\'] # Sort operations by start time operations.sort(key=lambda x: x[0]) conflict = False for i in range(1, len(operations)): if operations[i][0] < operations[i - 1][1]: conflict = True break if conflict: results.append(\\"NO\\") else: results.append(\\"YES\\") return results # Function to parse input data def parse_input(input_data): test_cases = [] lines = input_data.strip().split(\\"n\\") t = int(lines[0]) index = 1 for _ in range(t): n = int(lines[index]) operations = [] for j in range(n): si, ei = map(int, lines[index + 1 + j].split()) operations.append((si, ei)) test_cases.append({\'n\': n, \'operations\': operations}) index += n + 1 return test_cases"},{"question":"A toy manufacturing company manufactures toy sets where each set contains exactly 10 different toys. Each toy in a set has a unique toy ID, ranging from 1 to 10. Due to a quality control issue, some toy sets might be missing some toys. You are given a list of toy sets, each represented by a list of toy IDs it contains (the lists may be incomplete but will contain unique IDs within the range from 1 to 10). Your task is to identify and print the IDs of the missing toys for each incomplete set. The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of toy sets. Each of the next n lines contains a space-separated list of integers representing the IDs of toys (1 ≤ ID ≤ 10) present in that toy set. Each line will contain between 1 and 9 integers. Output n lines, each containing the missing IDs (in ascending order) for each corresponding toy set. Sample Input: 3 1 2 3 4 5 6 7 8 9 1 3 4 5 6 2 3 5 6 7 9 Sample Output: 10 2 7 8 9 10 1 4 8 10","solution":"def find_missing_toys(n, toy_sets): Returns a list of lists of missing toy IDs for each given toy set. Parameters: n (int): Number of toy sets. toy_sets (list of lists): Each sublist contains the toy IDs present in each set. Returns: list of lists: Each sublist contains the missing toy IDs in ascending order. all_toys = set(range(1, 11)) missing_toys_list = [] for toys in toy_sets: present_toys = set(toys) missing_toys = sorted(list(all_toys - present_toys)) missing_toys_list.append(missing_toys) return missing_toys_list def process_input(input_lines): Processes input strings and returns the results as per the `find_missing_toys` logic. Parameters: input_lines (list of str): List of input strings containing toy sets information. Returns: list of str: List of strings representing the missing toy IDs for each set. n = int(input_lines[0]) toy_sets = [list(map(int, line.split())) for line in input_lines[1:1+n]] missing_toys_list = find_missing_toys(n, toy_sets) result = [] for missing_toys in missing_toys_list: result.append(\\" \\".join(map(str, missing_toys))) return result"},{"question":"A town has a river running through it. There are `n` islands in the river numbered from `1` to `n`, and there are exactly `n-1` bridges connecting them in such a way that it is possible to reach any island from any other island. In other words, the bridges form a tree. Each island has an integer value associated with it. You are given `q` queries, and in each query, you are given two integers representing the starting and ending islands. For each query, determine the maximum integer value that can be encountered when traveling from the starting island to the ending island using the bridges. The first line of the input contains a single integer `n` (1 ≤ n ≤ 100000) — the number of islands. The second line contains `n` space-separated integers `v1, v2, ..., vn` (1 ≤ vi ≤ 100000) — the integer values associated with the islands. The next `n-1` lines each contain two space-separated integers `u` and `v` (1 ≤ u, v ≤ n) — the bridges between the islands. The following line contains a single integer `q` (1 ≤ q ≤ 100000) — the number of queries. The next `q` lines each contain two space-separated integers representing the starting and ending islands for each query. Output `q` lines, the `i`-th line containing the maximum value encountered on the path between the two given islands in the `i`-th query. Example: Input: ``` 5 1 3 5 2 4 1 2 1 3 3 4 3 5 3 1 2 2 4 1 5 ``` Output: ``` 3 5 5 ``` Explanation: - For the query (1, 2), the path is 1 -> 2, so the maximum value is 3. - For the query (2, 4), the path is 2 -> 1 -> 3 -> 4, so the maximum value is 5. - For the query (1, 5), the path is 1 -> 3 -> 5, so the maximum value is 5.","solution":"from collections import defaultdict, deque def find_max_in_path(values, adj_list, start, end): # BFS to find the path from start to end and find the maximum visited = set() queue = deque([(start, values[start - 1])]) while queue: current, max_value = queue.popleft() if current == end: return max_value visited.add(current) for neighbor in adj_list[current]: if neighbor not in visited: queue.append((neighbor, max(max_value, values[neighbor - 1]))) def process_queries(n, values, bridges, queries): adj_list = defaultdict(list) for u, v in bridges: adj_list[u].append(v) adj_list[v].append(u) results = [] for start, end in queries: results.append(find_max_in_path(values, adj_list, start, end)) return results"},{"question":"Given an integer array `arr` of size `n`, your task is to find the minimum absolute difference between the sum of the elements of two non-empty, disjoint subsets such that both subsets together contain all the elements from the array. # Input: - The first line contains an integer `n` (2 ≤ n ≤ 20) — the number of elements in the array. - The second line contains `n` integers `arr_i` (1 ≤ arr_i ≤ 100) — the elements of the array. # Output: - Print one integer — the minimum absolute difference between the sum of the two subsets. # Example: **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` 0 ``` **Explanation:** We can divide the array into two subsets such as [1, 4] and [2, 3]. Sum of elements in both subsets is 5. Therefore, the minimum absolute difference is 0.","solution":"from itertools import combinations def min_abs_diff(n, arr): Finds the minimum absolute difference between the sums of two non-empty disjoint subsets of the given array. Parameters: n (int): The number of elements in the array. arr (list): The array of elements. Returns: int: The minimum absolute difference between the sums of two subsets. total_sum = sum(arr) min_diff = float(\'inf\') # Try all combinations of all possible sizes (from 1 to n-1) for i in range(1, n): for subset in combinations(arr, i): subset_sum = sum(subset) other_subset_sum = total_sum - subset_sum diff = abs(subset_sum - other_subset_sum) min_diff = min(min_diff, diff) return min_diff"},{"question":"Simon has a grid of size m times n filled with integers. The grid follows a special rule: an integer in the grid is defined as magical if it is divisible by both its row number and column number (1-indexed). Simon wants to know how many magical integers are in the grid. You are given q queries. Each query describes a specific m and n, and you need to determine the number of magical integers in the corresponding grid. The first input line contains a single integer t (1 le t le 1000) — the number of test cases. Each of the next t lines contains two integers m (1 le m le 10^5) and n (1 le n le 10^5). For each query, output a single integer — the number of magical integers in the grid for the given m and n. In the first test case, for a grid of size 3 times 3, the magical integers are those that are divisible by both their row and column numbers. This yields numbers like 1 (from row 1, col 1), 2 (from row 2, col 2) etc., resulting in three magical numbers. For the second test case, for a grid of size 5 times 4, you need to count integers such that they are divisible by their respective row and column numbers, which yields a count of eight such numbers.","solution":"def count_magical_integers(m, n): Count the number of magical integers in a grid of size m x n. A magical integer is one that is divisible by both its row number and column number. :param m: Number of rows in the grid. :param n: Number of columns in the grid. :return: Count of magical integers. return min(m, n) def process_queries(queries): Processes multiple queries to count the number of magical integers for each (m, n) query. :param queries: List of tuples, where each tuple contains two integers (m, n). :return: List of integers, where each integer is the result for the corresponding query. results = [] for m, n in queries: results.append(count_magical_integers(m, n)) return results"},{"question":"You are given a series of numbers represented as beads on a wire. Each bead can be moved along the wire to the left or to the right, but with one constraint: it can only be swapped with the bead next to it. Your task is to arrange the beads in ascending order to form a beautiful necklace. You can perform a series of swaps to achieve this, but aim to do it in the least number of swaps possible. The first line contains an integer n (1 ≤ n ≤ 10^3) — the number of beads. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the beads on the wire. Output the minimum number of swaps needed to sort the beads in ascending order. Example: Input: 5 3 1 2 5 4 Output: 5 Explanation: One way to sort the beads with minimum swaps is as follows: - Swap 3 and 1: 1 3 2 5 4 - Swap 3 and 2: 1 2 3 5 4 - Swap 5 and 4: 1 2 3 4 5 This results in a sorted sequence with 5 swaps.","solution":"def minimum_swaps_to_sort(arr): Returns the minimal number of swaps required to sort the array in ascending order. n = len(arr) # Create an array of tuples where each tuple is (value, index) arr_pos = [*enumerate(arr)] # Sort the array by the array value arr_pos.sort(key=lambda it: it[1]) # Create a visited array and mark all elements as not visited visited = {k: False for k in range(n)} # Initialize the answer ans = 0 # Traverse array elements for i in range(n): # already swapped or already in correct position if visited[i] or arr_pos[i][0] == i: continue # Initialize the current cycle cycle_size = 0 j = i while not visited[j]: # mark as visited visited[j] = True # move to the next node j = arr_pos[j][0] cycle_size += 1 # If there is a cycle. If n nodes in cycle, n-1 swaps needed if cycle_size > 0: ans += (cycle_size - 1) return ans # Example usage # n = 5 # arr = [3, 1, 2, 5, 4] # print(minimum_swaps_to_sort(arr)) # Output: 3"},{"question":"A courier company has an array of delivery packages along with the weights associated with each package. The company follows a strict rule about the maximum load capacity that a delivery vehicle can carry at once. If the total weight of the packages exceeds the load capacity, the company has to split the packages into multiple deliveries. The objective is to calculate the minimum number of deliveries required. The first line contains two integers n and maxLoad (1 ≤ n ≤ 100, 1 ≤ maxLoad ≤ 10^9). The second line contains n space-separated integers, each representing the weight of a package. Print a single integer — the minimum number of deliveries required to deliver all packages according to the company\'s rules. Example ------- Input: 6 10 2 3 5 1 7 8 Output: 3 Explanation: The packages can be divided into three deliveries like this: 1st delivery: 2, 3, 5 (total weight: 10) 2nd delivery: 1, 7 (total weight: 8) 3rd delivery: 8 (total weight: 8)","solution":"def min_deliveries(n, maxLoad, weights): Calculate the minimum number of deliveries required to deliver all packages. :param n: int - The number of packages :param maxLoad: int - The maximum weight capacity per delivery :param weights: list of int - Weights of the packages :return: int - Minimum number of deliveries required current_load = 0 deliveries = 1 for weight in weights: if current_load + weight > maxLoad: deliveries += 1 current_load = weight else: current_load += weight return deliveries"},{"question":"You are tasked with maintaining a dynamic data structure to answer range sum queries and point updates effectively. You are given an array of integers initially and need to perform operations on it. The operations are of two types: 1. Update the value at a specific index to a new value. 2. Query the sum of a subarray from index `l` to `r` (inclusive). You need to handle these operations efficiently. Input format: - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000), the number of elements in the array and the number of operations, respectively. - The second line contains `n` integers `a1, a2, ..., an` (|ai| ≤ 10^9), the initial values of the array. - The next `q` lines describe the operations: - An operation of type `1` has the format `1 i x`, where `1` (type) and (1 ≤ i ≤ n) is the index and `x` (|x| ≤ 10^9) is the new value. - An operation of type `2` has the format `2 l r`, where `2` (type) and (1 ≤ l ≤ r ≤ n) are the bounds of the range for querying the sum. Output format: - For each query of type `2`, output a single integer, the sum of the range [l, r]. Example input: ``` 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 1 1 -5 2 1 5 ``` Example output: ``` 6 13 14 ``` Explanation: - Initially, the array is [1, 2, 3, 4, 5]. - Query 2 1 3 computes the sum of indices 1 to 3 -> 1 + 2 + 3 = 6. - Update 1 3 10 changes the third element to 10, so the array is now [1, 2, 10, 4, 5]. - Query 2 1 3 now computes the sum of indices 1 to 3 -> 1 + 2 + 10 = 13. - Update 1 1 -5 changes the first element to -5, so the array becomes [-5, 2, 10, 4, 5]. - Query 2 1 5 now computes the sum of indices 1 to 5 -> -5 + 2 + 10 + 4 + 5 = 16.","solution":"class FenwickTree: def __init__(self, n): self.size = n self.tree = [0] * (n + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def process_queries(n, array, queries): fenwick_tree = FenwickTree(n) result = [] for i in range(n): fenwick_tree.update(i + 1, array[i]) for query in queries: if query[0] == 1: _, index, new_value = query current_value = array[index - 1] delta = new_value - current_value fenwick_tree.update(index, delta) array[index - 1] = new_value elif query[0] == 2: _, l, r = query sum_range = fenwick_tree.query(r) - fenwick_tree.query(l - 1) result.append(sum_range) return result"},{"question":"Sarah is organizing a treasure hunt in her neighborhood. She wants to prepare a final clue that is challenging, yet solvable. She comes up with the following puzzle: There is a grid of size n x m representing the neighborhood map where each cell can either be empty (denoted by a \'.\') or contain an obstacle (denoted by a \'#\'). Sarah needs to place the treasure in such a way that it is as far as possible from any obstacles. The goal is to find the maximum possible distance from the treasure to the nearest obstacle on the grid. Formally, you need to find a cell (i, j) in the grid to place the treasure such that the minimum distance to any cell containing a \'#\' is maximized. The distance between two cells (i1, j1) and (i2, j2) is defined as |i1 - i2| + |j1 - j2|. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns in the grid, respectively. The next n lines each contain m characters (either \'.\' or \'#\'). Each line represents a row in the grid. Output a single integer — the maximum possible distance from the treasure to the nearest obstacle. # Example Input ``` 4 4 #..# #..# ``` Output ``` 1 ``` Input ``` 3 3 ... ... ... ``` Output ``` 4 ``` # Explanation In the first example, no matter where you place the treasure, the distance to the nearest obstacle is always 1. In the second example, the whole grid is empty. Placing the treasure in the center cell (2, 2) maximizes the distance to any corner, which is 4.","solution":"from collections import deque def max_distance_from_obstacle(n, m, grid): def bfs(): queue = deque() max_dist = 0 # Start BFS from all obstacle cells for i in range(n): for j in range(m): if grid[i][j] == \'#\': queue.append((i, j, 0)) # (x, y, distance) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] while queue: x, y, dist = queue.popleft() if visited[x][y]: continue visited[x][y] = True max_dist = max(max_dist, dist) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) return max_dist if all(grid[i][j] == \'.\' for i in range(n) for j in range(m)): return (n - 1) + (m - 1) # Max distance in a fully empty grid return bfs()"},{"question":"You are given a garden with n flowerbeds, aligned in a straight line. Each flowerbed is characterized by the number of flowers it can contain, represented by an array f, where f_i (1 ≤ f_i ≤ 1000) is the maximum number of flowers in the i-th flowerbed. A gardener wants to plant flowers in these flowerbeds every single day. However, the gardener follows a rhythm: each day, they plant a specific number of flowers in a flowerbed such that the total number of flowers planted in the i-th flowerbed over all days is a multiple of f_i. Given a number of flowers n, find out the maximum number of distinct flowerbeds in which the gardener can successfully follow this rhythm for at least one day. Input The first line contains an integer T (1 ≤ T ≤ 50) – the number of test cases. The next T lines each represent a test case, containing n and an array f of n integers (1 ≤ n ≤ 100, 1 ≤ f_i ≤ 1000). Output For each test case, output a single integer – the maximum number of distinct flowerbeds where the gardener can successfully plant flowers following the given rhythm for at least one day. Example Input: 3 5 3 4 6 2 5 3 10 4 9 4 1 2 3 5 Output: 5 3 4 In the first test case, the flowerbeds can each independently contain their maximum number of flowers, fulfilling the gardener\'s requirement across all 5 flowerbeds. In the second test case, all flowerbeds can have flowers planted once. In the third test case, every flowerbed can be planted following the gardener’s rhythm.","solution":"def max_distinct_flowerbeds(T, test_cases): For each testcase, find out the maximum number of distinct flowerbeds in which flowers can be planted following the described rhythm. :param T: Number of test cases :param test_cases: List of tuples, each containing an integer n and a list f of n integers :return: List of integers, one for each test case, representing the maximum number of distinct flowerbeds results = [] for test in test_cases: n, f = test results.append(n) # The maximum number of distinct flowerbeds is just n return results"},{"question":"Jason, a budding computer scientist, is fascinated by binary search trees (BSTs) and their properties. He recently learned about a unique property of BSTs - the sum of the distances from the root to all other nodes. He wants to write a program that, given a sequence of integers, constructs a BST and calculates this sum of distances. A binary search tree is a binary tree in which: 1. Each node contains a key. 2. The keys in the left subtree of a node are smaller than the node\'s key. 3. The keys in the right subtree of a node are greater than the node\'s key. The distance from the root to a node is the number of edges on the path from the root to the node. Given a sequence of integers, construct a BST and calculate the sum of the distances from the root to all other nodes in the BST. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of integers in the sequence. - The second line contains n integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4) — the sequence of integers. Output: - Print a single integer — the sum of the distances from the root to all other nodes in the BST. Example: Input: 5 10 5 1 7 40 Output: 8 Explanation: The BST constructed from the sequence is as follows: - 10 is the root. - 5 is to the left of 10. - 1 is to the left of 5. - 7 is to the right of 5. - 40 is to the right of 10. The distances are: - 5 is at distance 1 from 10. - 1 is at distance 2 from 10. - 7 is at distance 2 from 10. - 40 is at distance 1 from 10. The sum of these distances is 1 + 2 + 2 + 1 = 6.","solution":"class BSTNode: def __init__(self, key): self.key = key self.left = None self.right = None def insert_bst_node(root, key): if root is None: return BSTNode(key) if key < root.key: root.left = insert_bst_node(root.left, key) else: root.right = insert_bst_node(root.right, key) return root def calculate_distances_sum(root, current_distance): if root is None: return 0 left_distance_sum = calculate_distances_sum(root.left, current_distance + 1) right_distance_sum = calculate_distances_sum(root.right, current_distance + 1) total_distance_sum = current_distance + left_distance_sum + right_distance_sum return total_distance_sum def sum_of_distances(n, sequence): if n == 0: return 0 bst_root = None for number in sequence: bst_root = insert_bst_node(bst_root, number) return calculate_distances_sum(bst_root, 0) # Usage n = 5 sequence = [10, 5, 1, 7, 40] result = sum_of_distances(n, sequence) print(result) # Output should be 6"},{"question":"The city of Altorian is well-known for its elaborate street celebration. This year, the city council has decided to decorate its streets using a special type of LED lights. Each LED light can change its color based on the input pattern. The council has commissioned you to develop an algorithm to generate the lighting pattern for the upcoming celebration. The LED lights should be controlled such that they follow a specific palindrome sequence of colors. A palindrome sequence is a sequence that reads the same forwards and backwards. The sequence should start with the color 1, go up to the color n (inclusive), and then back down to the color 1. You are required to generate the sequence for given n and output it. The first line contains an integer n (1 ≤ n ≤ 100) — the highest color code. Output a single line containing the palindromic sequence of colors. For example: If n = 3, the sequence should be 1 2 3 2 1. If n = 5, the sequence should be 1 2 3 4 5 4 3 2 1.","solution":"def generate_palindromic_sequence(n): Generates a palindromic sequence of colors from 1 to n and back to 1. Parameters: n (int): The highest color code (1 ≤ n ≤ 100) Returns: str: The palindromic sequence as a string of numbers separated by space. sequence = list(range(1, n + 1)) + list(range(n - 1, 0, -1)) return \' \'.join(map(str, sequence))"},{"question":"Tanya is leading a group project in her programming class. Each team member has been given a score based on their performance, and Tanya wants to make sure everyone has a fair share of the remaining tasks based on their performance scores. The distribution of the tasks should be done in such a way that it minimizes the maximum work assigned to any individual team member. You need to divide the remaining `t` tasks among `n` team members based on their performance scores, which are given as an array `scores` where `scores[i]` is the performance score of the ith team member. The task remains as `t`, and you should distribute these tasks such that the difference between the maximum and minimum workload assigned is minimized. Formally, let\'s denote the workload assigned to the ith team member as `work[i]`, you should minimize `max(work[i]) - min(work[i])` for all i in the range from 0 to n-1. # Input: - The first line contains an integer `t` (1 ≤ t ≤ 10^5) — the number of tasks. - The second line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of team members. - The third line contains `n` space-separated integers `scores[i]` (1 ≤ scores[i] ≤ 10^9) — the performance scores of the team members. # Output: - Print `n` integers where the ith integer denotes the number of tasks assigned to the ith team member such that the difference between the maximum and minimum workload is minimized. # Example: Input: ``` 10 3 2 3 5 ``` Output: ``` 2 3 5 ``` In this example, the 10 tasks are distributed among 3 team members with performance scores of 2, 3, and 5. One way to minimize the differences between workloads is to distribute tasks in the same proportion as their performance scores.","solution":"def distribute_tasks(t, n, scores): total_scores = sum(scores) tasks = [0] * n for i in range(n): tasks[i] = (scores[i] * t) // total_scores remaining_tasks = t - sum(tasks) while remaining_tasks > 0: smallest_task_index = tasks.index(min(tasks)) tasks[smallest_task_index] += 1 remaining_tasks -= 1 return tasks"},{"question":"During an archaeological dig, you unearth an ancient artifact comprising a sequence of n pearls arranged in a line. Each pearl has a distinct integer value representing its type. Your task is to determine whether it is possible to rearrange the pearls such that no two adjacent pearls are of the same type. If it is possible, output the rearranged sequence of pearls. If it is not possible, output \\"No solution\\". The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of pearls. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 10^5) — the types of pearls. If there is a solution, print \\"Possible\\" followed by the sequence of rearranged pearls. If there is no solution, print \\"No solution\\". Example input: 5 1 2 3 4 5 Example output: Possible 1 3 2 4 5 Note: - If multiple solutions exist, any valid sequence is acceptable. - If there is no valid arrangement, the output should be \\"No solution\\".","solution":"def rearrange_pearls(n, pearls): from collections import Counter import heapq if n == 1: return (\\"Possible\\", pearls) # Count the frequency of each pearl type count = Counter(pearls) max_count = max(count.values()) # If any pearl type appears more than (n + 1) // 2 times, it\'s impossible to rearrange if max_count > (n + 1) // 2: return (\\"No solution\\",) heap = [(-freq, pearl) for pearl, freq in count.items()] heapq.heapify(heap) result = [0] * n index = 0 while heap: freq, pearl = heapq.heappop(heap) freq = -freq for _ in range(freq): if index >= n: index = 1 result[index] = pearl index += 2 return (\\"Possible\\", result)"},{"question":"A large warehouse has n boxes, each of which contains a certain number of items. Today, the warehouse manager is tasked with rearranging the boxes so that they can be picked up in an optimal order. The optimal order is defined such that for each box, the box with the immediately higher (next larger) number of items should be placed next to it, and similarly, the box with the immediately lower (next smaller) number of items should also be placed next to it if it exists. In such a way, navigating from the box with the smallest number of items to the box with the highest would require the minimum number of moves. You have to arrange the boxes starting from an initial configuration and output all the possible valid configurations, given the constraints. The first line of input contains an integer n (1 ≤ n ≤ 100,000), the number of boxes. The second line contains n integers, where the i-th integer ai (1 ≤ ai ≤ 10^9) represents the number of items in the i-th box. Output all the possible valid arrangements of the boxes in any order. On each line, output one valid configuration of the boxes. In the first example, we can start with the box containing 1 item, then 3 items, and so on. One possible arrangement is: 1 3 4 5 If only one possible valid configuration exists, output that configuration. Note: - If multiple valid configurations exist, output any of them. - If no valid configuration exists, output \\"No valid configuration\\". Example: Input: 4 1 3 4 5 Output: 1 3 4 5 Input: 2 2 2 Output: No valid configuration","solution":"def arrange_boxes(n, items): # Remove duplicate items and sort them unique_items = list(sorted(set(items))) # If there are fewer than 2 unique items, there\'s no valid configuration if len(unique_items) < 2: return \\"No valid configuration\\" return \\" \\".join(map(str, unique_items))"},{"question":"In an alternate universe, there is a unique robot called RoboX which works in a grid. The grid is a matrix of size n x m, filled with cells containing non-negative integers. RoboX has two energy sources: direct solar power and battery power. Each time RoboX moves, it consumes the battery, but it recharges with solar power when resting. RoboX\'s task is to move from the top-left corner to the bottom-right corner of the grid. RoboX can only move right or down. The path RoboX travels determines the total power gain, which is the sum of the values of the cells it visits. However, to continue functioning optimally, RoboX must make sure it recharges by the time it reaches each new cell. If the total power gain falls below zero at any point, RoboX will stop and fail the task. Your job is to help RoboX determine if it\'s possible to reach the bottom-right corner while maintaining non-negative power levels throughout the journey. Given the dimensions of the grid and the energy values in each cell, determine if RoboX can successfully complete its task. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next n lines contain m integers each, representing the energy of each cell in the grid. Print \\"YES\\" if RoboX can reach the bottom-right corner while maintaining non-negative power, otherwise, print \\"NO\\". Examples: Input: 3 3 1 -2 1 2 -3 4 1 -2 2 Output: YES Input: 2 2 -1 2 2 -1 Output: NO","solution":"def can_robox_reach_end(n, m, grid): # Initialize a 2D dp array to store the cumulative power values dp = [[float(\'-inf\')] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the dp array with the maximum power values RoboX can have at each cell for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], dp[i - 1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j - 1] + grid[i][j]) # Ensure RoboX recharges to non-negative power at each cell if dp[i][j] < 0: dp[i][j] = float(\'-inf\') # Check the final cell for non-negative power return \\"YES\\" if dp[-1][-1] >= 0 else \\"NO\\""},{"question":"You have a robot on an m × n grid. The robot is initially located at the top-left corner (0, 0), and it needs to get to the bottom-right corner (m-1, n-1). However, the robot can only move in two directions: right and down. Each cell in the grid contains a non-negative integer which represents the cost to pass through that cell. The goal is to find a path from the top-left corner to the bottom-right corner with the minimum cost. You are required to implement a function `minPathCost(grid: List[List[int]]) -> int` that takes a grid of size m × n as input and returns the minimum cost to reach the bottom-right corner from the top-left corner. # Input - The first line contains two integers m and n (1 ≤ m, n ≤ 1000) denoting the number of rows and columns in the grid. - Each of the next m lines contains n integers, representing the cost values of each cell in the grid. # Output Print a single integer: the minimum cost to reach the bottom-right corner from the top-left corner. # Example Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 ``` In the example, the path with the minimum cost is (0, 0) → (0, 1) → (0, 2) → (1, 2) → (2, 2), and the total cost is 1 + 3 + 1 + 1 + 1 = 7.","solution":"from typing import List def minPathCost(grid: List[List[int]]) -> int: Returns the minimum cost to reach the bottom-right corner from the top-left corner of the grid. m = len(grid) n = len(grid[0]) # Create a 2D dp array to store the minimum cost at each cell dp = [[0] * n for _ in range(m)] # Initialize the top-left cell with the starting point cost dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"You are given a string s of length n consisting of only lowercase English letters. You have to process m queries. Each query is represented by two integers l and r (1 ≤ l ≤ r ≤ n), and it asks for the number of distinct characters in the substring s[l...r] (inclusive). The first line contains the integer n (1 ≤ n ≤ 100000) — the length of the string s. The second line contains the string s. The third line contains the integer m (1 ≤ m ≤ 100000) — the number of queries. The next m lines each contain two integers l and r — the boundaries of the substring for the respective query. Print m integers, each denoting the answer to the respective query. Example input: 8 abacabad 3 1 4 2 6 3 8 Example output: 3 3 4 Explanation: - The substring from index 1 to 4 is \\"abac\\" which has 3 distinct characters: \'a\', \'b\', and \'c\'. - The substring from index 2 to 6 is \\"bacab\\" which also has 3 distinct characters: \'a\', \'b\', and \'c\'. - The substring from index 3 to 8 is \\"acabad\\" which has 4 distinct characters: \'a\', \'b\', \'c\', and \'d\'.","solution":"def distinct_characters(s, queries): Returns the number of distinct characters in the substrings specified by the queries. Parameters: s (str): The input string queries (list of tuples): A list of queries where each query is represented by a tuple (l, r) Returns: list of int: A list of integers representing the number of distinct characters for each query results = [] for l, r in queries: # Adjusting from 1-based to 0-based indexing substring = s[l-1:r] distinct_count = len(set(substring)) results.append(distinct_count) return results"},{"question":"You are given an integer n representing the size of an initial array and then n integers representing the elements of the array. Your task is to process q queries. Each query has one of the following types: 1. \\"1 x y\\" - Update the value at index x of the array to y. 2. \\"2 l r v\\" - Find the number of elements in the array between indices l and r (inclusive) that are divisible by v. Note: - The array is 1-indexed. Input: - The first line contains two integers n (1 ≤ n ≤ 100,000) and q (1 ≤ q ≤ 100,000) – the size of the array and the number of queries. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) – the elements of the array. - The next q lines contain the queries in the format described above. Output: - For each query of type \\"2 l r v\\", output the number of elements between indices l and r that are divisible by v. Example: Input: 5 5 1 2 3 4 5 2 1 5 2 1 3 10 2 1 5 2 2 1 3 1 2 1 5 10 Output: 2 1 3 0 Explanation: - The initial array is [1, 2, 3, 4, 5]. - The first query asks for the number of elements between indices 1 and 5 that are divisible by 2. The answer is 2 because the elements 2 and 4 are divisible by 2. - The second query updates the value at index 3 to 10. The array becomes [1, 2, 10, 4, 5]. - The third query asks for the number of elements between indices 1 and 5 that are divisible by 2. The answer is 3 because the elements 2, 10, and 4 are divisible by 2. - The fourth query asks for the number of elements between indices 1 and 3 that are divisible by 1. The answer is 3 because all elements 1, 2, and 10 are divisible by 1. - The fifth query asks for the number of elements between indices 1 and 5 that are divisible by 10. The answer is 0 because none of the elements 1, 2, 10, 4, 5 is divisible by 10.","solution":"def process_queries(n, q, array, queries): results = [] for query in queries: if query[0] == 1: # Update operation _, x, y = query array[x - 1] = y elif query[0] == 2: # Find operation _, l, r, v = query count = sum(1 for i in range(l - 1, r) if array[i] % v == 0) results.append(count) return results"},{"question":"You are given two non-empty strings s and t consisting of lowercase English letters. You are allowed to perform at most one modification to the string s. A modification can be one of the following operations: - Insert one character anywhere in s. - Delete one character from s. - Replace one character in s with a different character. Your task is to determine whether it\'s possible to make the strings s and t equal after at most one modification. The first line contains the string s (1 ≤ |s| ≤ 100). The second line contains the string t (1 ≤ |t| ≤ 100). Print \\"YES\\" if it\'s possible to make the strings equal with at most one modification. Otherwise, print \\"NO\\". Example input 1: s = \\"ab\\" t = \\"abc\\" Example output 1: YES Example input 2: s = \\"ab\\" t = \\"adc\\" Example output 2: NO","solution":"def can_be_equal_after_one_edit(s: str, t: str) -> str: m, n = len(s), len(t) # If the absolute difference in lengths is more than 1, return NO if abs(m - n) > 1: return \\"NO\\" if m == n: # If lengths are the same, check for one replacement diff_count = sum(1 for a, b in zip(s, t) if a != b) return \\"YES\\" if diff_count <= 1 else \\"NO\\" # If the lengths differ by one, check insertion/deletion if m < n: bigger, smaller = t, s else: bigger, smaller = s, t # Check one possible insertion/deletion difference for i in range(len(bigger)): if bigger[:i] + bigger[i+1:] == smaller: return \\"YES\\" return \\"NO\\""},{"question":"Aria has taken up a new hobby of gardening in her small backyard. She has decided to grow flowers in a straight line along the boundary. There are n flower pots placed along this line, with each pot having a different soil quality. Aria knows that some flowers thrive better when planted next to each other due to complementary qualities of the soil. Given a list of flower pots, each containing a certain soil quality value, and another list of pairs defining which pots are complementary, help Aria find out the maximum sum of soil quality values she can obtain from a contiguous segment of pots that only contain complementary pots. The first line of the input contains two integers n and m (1 leq n leq 100, 1 leq m leq 100) — the number of flower pots and the number of complementary pairs, respectively. The second line contains n integers q_1, q_2, dots, q_n (-100 leq q_i leq 100) — the soil quality values of each flower pot. The next m lines each contain two integers u and v (1 leq u, v leq n) — indicating that flower pot u and flower pot v are complementary. Output the maximum sum of soil quality values for any contiguous segment of pots that only contain complementary pots. # Example Input: ``` 5 3 1 2 -1 4 -2 1 2 2 3 3 4 ``` Output: ``` 6 ``` Explanation: Aria can choose the contiguous segment from pot 1 to pot 3: [1, 2, -1]. The complementary pairs ensure the chosen segment is valid (1 and 2, 2 and 3). Sum of soil quality values: 1 + 2 - 1 = 2 Aria can also choose the contiguous segment from pot 2 to pot 4: [2, -1, 4]. The complementary pairs ensure the chosen segment is valid (2 and 3, 3 and 4). Sum of soil quality values: 2 - 1 + 4 = 5 Aria can choose the whole segment: [1, 2, -1, 4]. The complementary pairs ensure the chosen segment is valid (1 and 2, 2 and 3, 3 and 4). Sum of soil quality values: 1 + 2 - 1 + 4 = 6","solution":"def max_complementary_sum(n, m, soil_qualities, pairs): # Convert pairs list to a set of tuples for faster lookups complementary_pairs = set() for u, v in pairs: complementary_pairs.add((u-1, v-1)) # convert to zero-based indexing complementary_pairs.add((v-1, u-1)) # add both (u, v) and (v, u) max_sum = float(\'-inf\') # Function to check if segment is complementary def is_complementary_segment(start, end): for i in range(start, end): if (i, i+1) not in complementary_pairs: return False return True # Use a sliding window technique to find max sum of valid segments for start in range(n): current_sum = 0 for end in range(start, n): current_sum += soil_qualities[end] if is_complementary_segment(start, end): max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an array of integers, you are required to find a non-empty subarray with the maximum possible sum. The subarray must contain at least one element, and you need to return the sum of the subarray. **Input:** - The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array. - The second line contains n space-separated integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4), the elements of the array. **Output:** - Print a single integer, the maximum sum possible for a non-empty subarray. **Example:** ``` Input: 5 -2 1 -3 4 -1 2 1 -5 4 Output: 6 Explanation: The subarray [4, -1, 2, 1] has the largest sum = 6. ```","solution":"def max_subarray_sum(arr): This function takes an array of integers and returns the sum of the subarray with the maximum possible sum. :param arr: List[int] - List of integers :return: int - The sum of the subarray with the maximum sum max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum"},{"question":"Given an array of integers, you need to repeatedly perform the following operation until the array becomes empty: 1. Select an element from the array. 2. Remove the selected element and all occurrences of the value that are immediately to the left and right of it (not necessarily contiguous in the list) until there are no more adjacent values equal to the selected element. You need to determine the minimum number of such operations needed to make the array empty. The first line of input contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 2 cdot 10^5) — the length of the array. The second line contains n integers, forming the array. It is guaranteed that the total sum of n over all test cases does not exceed 2 cdot 10^5. For each test case, print a single integer — the minimum number of operations needed to make the array empty. # Example: Input: ``` 2 6 1 2 2 3 1 1 5 4 4 4 4 4 ``` Output: ``` 2 1 ``` # Explanation: - In the first test case: - Select element `2`, remove all `2`s: Array becomes `[1, 3, 1, 1]`. - Select element `1`, remove all `1`s: Array becomes `[3]`. - Select element `3`, remove `3`: Array becomes `[ ]` (empty). It takes `2` operations to empty the array. - In the second test case: - Select element `4`, remove all `4`s: Array becomes `[ ]` (empty). It takes `1` operation to empty the array.","solution":"def min_operations_to_empty_array(arr): Determines the minimum number of operations needed to empty the array. Args: arr (list): List of integers representing the array. Returns: int: Minimum number of operations. from collections import Counter if not arr: return 0 count = Counter(arr) max_count = max(count.values()) return len(arr) // max_count def solve(t, cases): results = [] for i in range(t): n, arr = cases[i] results.append(min_operations_to_empty_array(arr)) return results"},{"question":"Alice and Bob are playing a game with a stack of N coins. The game is played as follows: - They take turns, with Alice going first. - On each turn, the player must pick 1, 2, or 3 coins from the stack. - The player that picks the last coin wins the game. Your task is to determine whether Alice has a winning strategy if both Alice and Bob play optimally. Return \\"YES\\" if Alice can guarantee a win, and \\"NO\\" otherwise. # Input The first line contains an integer N (1 ≤ N ≤ 10^5) — the number of coins in the stack. # Output Print \\"YES\\" if Alice can guarantee a win, otherwise print \\"NO\\". # Example Input ``` 4 ``` Output ``` YES ``` In this example, Alice takes 3 coins on her first turn, leaving Bob with 1 coin. Since Bob can only take the last coin on his turn, Alice guarantees a win. # Explanation To solve this problem, you need to determine whether Alice can always leave Bob in a position where no matter how many coins Bob picks up (1, 2, or 3), he cannot ensure an optimal move to leave Alice in a losing position. You can approach this problem using dynamic programming to keep track of win/lose states for different numbers of coins.","solution":"def can_alice_win(N): Determines whether Alice has a winning strategy given N coins. # Alice wins if N % 4 != 0 return \\"YES\\" if N % 4 != 0 else \\"NO\\""},{"question":"A delivery service company has a fleet of n trucks, each with a maximum weight capacity it can carry. The company receives m orders, each with a certain weight. They need to assign the orders to the trucks in such a way that no truck exceeds its weight capacity. Each order must be assigned to exactly one truck, and it is guaranteed that there is at least one feasible assignment for each order. Your task is to calculate the minimum possible number of trucks that will be utilized if the orders are assigned optimally. The first line of the input contains two integers n, the number of trucks (1 ≤ n ≤ 100), and m, the number of orders (1 ≤ m ≤ 100). The second line contains n integers representing the maximum weight capacities of the trucks. The third line contains m integers representing the weights of the orders. Output a single integer — the minimum number of trucks that will be utilized to carry all the orders. **Example:** Input: ``` 3 5 10 15 20 5 10 15 25 5 ``` Output: ``` 2 ``` Explanation: - Assign the orders as follows: - Truck 1 carries orders with weights 5 and 10 (total 15 ≤ 15). - Truck 2 carries orders with weights 15, 25, and 5 (total 45 ≤ 45). - This assignment utilizes only two trucks. Note that the exact distribution of orders may vary, but the minimum number of trucks used in an optimal assignment should be the same.","solution":"def min_trucks_needed(n, m, capacities, orders): Returns the minimum number of trucks needed to carry all the orders. :param n: Integer : number of trucks :param m: Integer : number of orders :param capacities: List of Integers : maximum weight capacities of the trucks :param orders: List of Integers : weights of the orders :return: Integer : minimum number of trucks needed # Sort both capacities and orders in descending order capacities.sort(reverse=True) orders.sort(reverse=True) utilized_trucks = 0 # Initialize usage list for each truck used_capacities = [0] * n # Assign orders to the trucks for order in orders: for i in range(n): if used_capacities[i] + order <= capacities[i]: used_capacities[i] += order break # Count the number of trucks used for i in range(n): if used_capacities[i] > 0: utilized_trucks += 1 return utilized_trucks"},{"question":"Given a grid-based map of a city with intersections represented as nodes and streets as edges, you are tasked with finding the shortest route between two intersections. Each street has a specified length, and you are provided with the detailed map in the form of nodes and edges. Your goal is to compute the shortest path from a given starting intersection to a specified destination intersection. Each test case describes a separate scenario with its own map of intersections and streets. # Input - The first line contains an integer `t` (1 ≤ t ≤ 100,000), representing the number of test cases. - Each test case starts with two integers `n` and `m` (1 ≤ n ≤ 1,000 and 1 ≤ m ≤ 10,000), where `n` is the number of intersections (nodes) and `m` is the number of streets (edges). - The next `m` lines each contain three integers `u`, `v`, and `w`, representing a street from intersection `u` to intersection `v` with length `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1,000). The streets are bidirectional. - The final line of each test case contains two integers `start` and `end` (1 ≤ start, end ≤ n), representing the starting and ending intersections for which you need to find the shortest path. # Output For each test case, output the length of the shortest path between the `start` and `end` intersections. If there is no path, output `-1`. # Example Input: ``` 2 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 5 4 4 1 2 3 2 3 4 3 4 5 4 1 6 1 3 ``` Output: ``` 6 7 ``` # Explanation For the first test case, the shortest path from intersection 1 to intersection 5 is via intersections 1 → 2 → 3 → 5 with a total length of 6. For the second test case, the shortest path from intersection 1 to intersection 3 is via intersections 1 → 2 → 3 with a total length of 7.","solution":"import heapq def dijkstra(n, adj, start, end): distance = {i: float(\'inf\') for i in range(1, n + 1)} distance[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distance[current_node]: continue for neighbor, weight in adj[current_node]: distance_through_current = current_distance + weight if distance_through_current < distance[neighbor]: distance[neighbor] = distance_through_current heapq.heappush(priority_queue, (distance_through_current, neighbor)) return distance[end] if distance[end] != float(\'inf\') else -1 def shortest_path(num_cases, cases): results = [] for case in cases: n, m, edges, start, end = case adj = {i: [] for i in range(1, n + 1)} for u, v, w in edges: adj[u].append((v, w)) adj[v].append((u, w)) result = dijkstra(n, adj, start, end) results.append(result) return results"},{"question":"A busy librarian is organizing a book fair in the school library. He has several shelves, each with a certain capacity, and a list of books, each with a specific size. The librarian\'s goal is to place all the books on the shelves while using the minimum number of shelves, without exceeding the capacity of any shelf. You are given an array of positive integers `books` where `books[i]` represents the size of the i-th book. You are also given a positive integer `capacity` which represents the maximum capacity of each shelf. Design an algorithm to find the minimum number of shelves required to place all the books. The input consists of: - A single integer `n` (1 ≤ n ≤ 100), the number of books. - An array `books` containing `n` positive integers (1 ≤ books[i] ≤ 1000), the sizes of the books. - A single integer `capacity` (1 ≤ capacity ≤ 1000), the capacity of each shelf. Print a single integer, the minimum number of shelves required to place all the books. For example: Input: ``` 5 [3, 7, 2, 5, 8] 10 ``` Output: ``` 3 ``` Explanation: - The first shelf can fit books with sizes `[3, 7]` (total 10). - The second shelf can fit the book with size `8`. - The third shelf can fit books with sizes `[2, 5]` (total 7). Therefore, a minimum of 3 shelves is required to place all the books.","solution":"def min_shelves(books, capacity): Returns the minimum number of shelves required to place all the books without exceeding the capacity of any shelf. books.sort(reverse=True) shelves = [] for book in books: placed = False for i in range(len(shelves)): if shelves[i] + book <= capacity: shelves[i] += book placed = True break if not placed: shelves.append(book) return len(shelves)"},{"question":"You are given a string `s` consisting of lowercase English letters and a list of queries, each query being a tuple of two integers `(l, r)`. For each query, you need to calculate the number of distinct characters in the substring of `s` from index `l` to index `r` inclusive. The first line of input contains the string `s` (1 ≤ |s| ≤ 100,000). The second line contains an integer `q` (1 ≤ q ≤ 100,000) - the number of queries. Each of the next `q` lines contains two integers `l` and `r` (0 ≤ l ≤ r < |s|) - the indices defining the substring. Output `q` lines, each containing the answer for the corresponding query. **Example**: Input: ``` abcba 3 0 1 1 3 0 4 ``` Output: ``` 2 2 3 ``` Explanation: For the first query (0, 1), the substring is \\"ab\\", which has 2 distinct characters: \'a\', \'b\'. For the second query (1, 3), the substring is \\"bcb\\", which has 2 distinct characters: \'b\', \'c\'. For the third query (0, 4), the substring is \\"abcba\\", which has 3 distinct characters: \'a\', \'b\', \'c\'.","solution":"def distinct_characters_in_substrings(s, queries): For each query returns the number of distinct characters in the specified substring. :param s: string :param queries: list of tuples where each tuple contains two integers (l, r) :return: list of integers, where each integer is the result of distinct characters count for the corresponding query results = [] for l, r in queries: substring = s[l:r+1] distinct_char_count = len(set(substring)) results.append(distinct_char_count) return results"},{"question":"Alex and Ben love solving puzzles together. They recently came across an array puzzle which involves the concept of subarrays and bitwise operations. Given an array of integers, they need to find the highest possible AND value obtainable by taking any subarray from the array. Let\'s define a subarray as consecutive elements from the original array. For example, in an array [1, 2, 3], the subarrays are [1], [2], [3], [1, 2], [2, 3], and [1, 2, 3]. The AND operation between two integers is a bitwise operation, where the result bit is 1 only if both corresponding bits of the operands are also 1, otherwise it\'s 0. Help Alex and Ben by writing a program that, given an array of integers, finds the maximum AND value of any subarray. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000), the number of elements in the array. - The second line contains n space-separated integers, each representing an element of the array. Each integer is between 1 and 10^9 (inclusive). Output: - Print a single integer, the maximum AND value that can be obtained from any subarray of the array. Example: Input: 5 4 3 2 7 6 Output: 7 Explanation: The highest AND value of any subarray is 7, which is obtained from the subarray [7] or [7, 6].","solution":"def max_and_subarray(arr): Returns the maximum AND value obtainable by any subarray. n = len(arr) max_and = 0 for i in range(n): current_and = arr[i] max_and = max(max_and, current_and) for j in range(i+1, n): current_and &= arr[j] max_and = max(max_and, current_and) # If AND becomes 0, break, as subsequent ANDs will not be greater if current_and == 0: break return max_and # Example usage: # print(max_and_subarray([4, 3, 2, 7, 6])) # Output: 7"},{"question":"You are given a list of n road segments in the Ashina Empire. Each segment is represented by a tuple of two cities (a, b), indicating that there is a direct road between cities a and b. The emperor wants to ensure that there is a direct or indirect way to access every city from any other city. This connectivity is essential for maintaining order and efficient governance. To achieve this, you need to determine the minimum number of direct roads required to be built such that the entire empire\'s cities are connected. If the cities are already fully connected, no additional roads are required. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of existing road segments. Each of the following n lines contains two integers a and b (1 ≤ a, b ≤ 10^5) describing a direct road between city a and city b. The output should be a single integer representing the minimum number of additional direct roads required to make sure every city in the empire is reachable from every other city. Example: Input: 4 1 2 2 3 4 5 5 6 Output: 2 Explanation: The cities form two disconnected components: {1, 2, 3} and {4, 5, 6}. To connect all the cities, we can build one road between cities 3 and 4.","solution":"def find_minimum_roads_to_connect(n, road_segments): Returns the minimum number of additional roads required to ensure all cities are connected. Args: n (int): Number of existing road segments. road_segments (list of tuple): Each tuple contains two integers representing a road between two cities. Returns: int: Minimum number of additional roads required. from collections import defaultdict, deque if n == 0: return 0 # Creating an adjacency list adjacency_list = defaultdict(list) for a, b in road_segments: adjacency_list[a].append(b) adjacency_list[b].append(a) visited = set() def bfs(start): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) components = 0 for city in adjacency_list: if city not in visited: bfs(city) components += 1 # We need (components - 1) roads to connect all disconnected components return components - 1"},{"question":"In a distant kingdom, there is a network of N bridges connecting N islands. Each bridge can only be used once in a single trip, i.e., it is directed and has a one-way traffic policy. Every island has exactly one incoming bridge and one outgoing bridge, forming exactly one Eulerian circuit. An Eulerian circuit in a directed graph is a path that visits every edge exactly once and returns to the starting vertex. You know the lengths of these bridges and are tasked with finding the shortest possible Eulerian circuit in terms of the total travel distance. The first line of input contains a single integer N (2 ≤ N ≤ 10000), the number of islands and bridges. The next N lines each contain three integers: u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000), representing a bridge from island u to island v with a travel distance of w. Print a single integer, the length of the shortest possible Eulerian circuit. If an Eulerian circuit doesn\'t exist, output -1. Example: Input: 4 1 2 10 2 3 20 3 4 10 4 1 5 Output: 45 Explanation: The given bridges form a single Eulerian circuit: 1 → 2 → 3 → 4 → 1, and the travel distances are 10 + 20 + 10 + 5 = 45. If the bridges do not form an Eulerian circuit, for example, if there is a missing or extra bridge(s), the output should be -1.","solution":"def find_shortest_eulerian_circuit(n, bridges): Given N islands and the bridges between them, find the length of the shortest possible Eulerian circuit. If an Eulerian circuit doesn\'t exist, return -1. # Initialize degrees and total weight in_degree = [0] * (n + 1) out_degree = [0] * (n + 1) total_weight = 0 # Store bridges for u, v, w in bridges: out_degree[u] += 1 in_degree[v] += 1 total_weight += w # Check if all nodes have equal in-degree and out-degree for i in range(1, n + 1): if in_degree[i] != out_degree[i]: return -1 # If all nodes have equal in-degree and out-degree, # the existence of the Eulerian circuit is guaranteed. return total_weight"},{"question":"Alex has recently developed an interest in encryption and has created a new type of encoding system using a random tree structure. The tree consists of n vertices numbered from 0 to n - 1 and has n - 1 edges connecting them, meaning there is exactly one path between any two vertices. Each edge of the tree has a lowercase letter (\'a\' to \'z\') associated with it, forming an edge label. Alex wants to communicate secret messages by converting strings to paths in the tree. To decode a message, one must find all paths in the tree that match a given string in the exact sequence of the edge labels. Given a tree represented by n vertices and n - 1 edges, your task is to determine how many distinct paths match a given string s. The first line of input contains two integers, n (2 ≤ n ≤ 100,000) and q (1 ≤ q ≤ 100), representing the number of vertices in the tree and the number of queries respectively. The next n - 1 lines each contain two integers u and v (0 ≤ u, v < n) and a character c (\'a\' ≤ c ≤ \'z\'), representing an edge between vertices u and v with label c. Each of the next q lines contains a string s (1 ≤ |s| ≤ 1000), the substring to be matched on the paths of the tree. Print q lines. For each query string s, output a single integer — the number of distinct paths in the tree that match the given string s. # Example Input: ``` 6 2 0 1 a 0 2 a 1 3 b 1 4 c 2 5 d ab aad ``` Output: ``` 1 0 ``` In the first query, the string \\"ab\\" matches the path from node 0 to node 3 (0 -> 1 -> 3 with edges labeled \'a\' and \'b\'), so the output is 1. In the second query, there are no paths in the tree that match the string \\"aad\\", so the output is 0.","solution":"from collections import defaultdict, deque class TreeNode: def __init__(self): self.children = defaultdict(list) class Tree: def __init__(self, n): self.nodes = [TreeNode() for _ in range(n)] def add_edge(self, u, v, c): self.nodes[u].children[c].append(v) self.nodes[v].children[c].append(u) def count_matching_paths(n, edges, queries): def build_tree(): tree = Tree(n) for u, v, c in edges: tree.add_edge(u, v, c) return tree def bfs_count_strings(tree, target): match_count = 0 queue = deque([(0, \\"\\", set([0]))]) # (current_node, current_path, visited_nodes) while queue: node, current_path, visited = queue.popleft() if current_path == target: match_count += 1 continue for char, children in tree.nodes[node].children.items(): for child in children: if child not in visited: new_visited = visited.copy() new_visited.add(child) new_path = current_path + char if target.startswith(new_path): queue.append((child, new_path, new_visited)) return match_count tree = build_tree() results = [] for s in queries: results.append(bfs_count_strings(tree, s)) return results def process_input(n, q, edges, queries): return count_matching_paths(n, edges, queries)"},{"question":"You are given a string of brackets consisting of \'(\' and \')\'. Your task is to make the given string of brackets balanced. You must determine the minimum number of insertions or deletions required to balance the string. A string is considered balanced if every opening bracket \'(\' has a corresponding closing bracket \')\', and the pairs are properly nested. # Input The first and only line of the input contains a single string `s` of length `n` (1 ≤ n ≤ 10<sup>5</sup>), consisting of the characters \'(\' and \')\'. # Output Output a single integer — the minimum number of insertions or deletions required to make the string balanced. # Example Input 1 ``` ()()) ``` Output 1 ``` 1 ``` Input 2 ``` ((( ``` Output 2 ``` 3 ``` Input 3 ``` (())) ``` Output 3 ``` 1 ``` # Note In the first example, removing the last \')\' makes the string balanced. In the second example, three \')\' are needed to balance the three \'(\'. In the third example, removing the last \')\' balances it.","solution":"def min_insertions_deletions_to_balance(s): open_brackets = 0 close_brackets = 0 for char in s: if char == \'(\': open_brackets += 1 elif char == \')\': if open_brackets > 0: open_brackets -= 1 else: close_brackets += 1 return open_brackets + close_brackets"},{"question":"David is working on a data analysis task and has a matrix of integers. He wants to determine the largest contiguous submatrix (a submatrix formed by selecting a contiguous range of rows and columns) that contains only positive numbers. The goal is to calculate the area of this submatrix, defined as the number of elements it contains. Write a program that, given a matrix of integers, finds the area of the largest submatrix containing only positive numbers. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 300), denoting the number of rows and columns in the matrix, respectively. Each of the following n lines contains m integers, representing the elements of the matrix. Each element of the matrix will be within the range of -1000 to 1000. Output a single integer representing the area of the largest contiguous submatrix containing only positive numbers. Example Input: ``` 4 5 1 2 3 -1 5 -2 3 4 -5 6 7 8 9 1 -4 5 4 -2 3 -6 ``` Example Output: ``` 6 ``` Explanation: The largest submatrix containing only positive numbers is: ``` 3 4 8 9 4 ``` which has an area of 6.","solution":"def largest_contiguous_positive_submatrix(matrix): n = len(matrix) m = len(matrix[0]) # Helper function to find maximum rectangle area in a histogram def max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area # Convert the matrix to histogram matrix histogram_matrix = [[0] * m for _ in range(n)] for j in range(m): for i in range(n): if matrix[i][j] > 0: if i == 0: histogram_matrix[i][j] = 1 else: histogram_matrix[i][j] = histogram_matrix[i-1][j] + 1 else: histogram_matrix[i][j] = 0 # Find the maximum area for each row histogram max_area = 0 for i in range(n): max_area = max(max_area, max_histogram_area(histogram_matrix[i])) return max_area # Function to interpret the input matrix from standard input format def solve(matrix): return largest_contiguous_positive_submatrix(matrix)"},{"question":"Given a string s, Petya has defined a valid substring as one that starts and ends with the same character. Petya wants to know how many valid substrings are there in the given string. A substring is defined as a sequence of characters from the string s that can be obtained by deleting zero or more characters from the beginning and zero or more characters from the end of the string without changing the order of the remaining characters. The first line contains a single string s (1 ≤ |s| ≤ 10^6), which consists of lowercase English letters. Print a single integer — the number of valid substrings in the given string. For example: - If the string is \\"aba\\", the valid substrings are \\"a\\", \\"aba\\", and \\"b\\". - If the string is \\"abc\\", the valid substrings are \\"a\\", \\"b\\", and \\"c\\".","solution":"def count_valid_substrings(s): Count the number of valid substrings that start and end with the same character. counts = [0] * 26 valid_substrings = 0 for char in s: index = ord(char) - ord(\'a\') counts[index] += 1 for count in counts: valid_substrings += (count * (count + 1)) // 2 return valid_substrings"},{"question":"Bob is trying to crack a security code system. The system generates a new code every day as an array of integers. To crack the code, Bob must find out the most frequent integer in the array within certain subarrays. The system will provide multiple queries, and for each query, Bob needs to determine the most frequent integer in the specified subarray. You are given an array of integers and a series of queries. Each query is defined by two integers l and r, representing the starting and ending indices of the subarray (inclusive). Bob needs to determine the most frequent integer in each subarray. If there are multiple integers with the same maximum frequency, Bob should return the smallest one. The first line of input contains an integer n (1 ≤ n ≤ 100,000), the number of integers in the array. The second line contains n integers a1, a2, ... an (1 ≤ ai ≤ 100,000), the elements of the array. The third line contains an integer q (1 ≤ q ≤ 100,000), the number of queries. Each of the following q lines contains two integers l and r (1 ≤ l ≤ r ≤ n), representing the starting and ending indices of the subarray. For each query, print a single integer — the most frequent integer in the subarray. If there are multiple such integers, print the smallest one. Example: Input: 6 1 2 2 3 1 2 3 1 3 2 4 1 6 Output: 2 2 2 In the first query, the subarray is [1, 2, 2]. The integer 2 appears the most frequently, so the output is 2. In the second query, the subarray is [2, 2, 3]. The integer 2 appears the most frequently, so the output is 2. In the third query, the subarray is [1, 2, 2, 3, 1, 2]. The integer 2 appears the most frequently, so the output is 2.","solution":"from collections import defaultdict, Counter import heapq def most_frequent_number(n, arr, queries): results = [] for l, r in queries: subarray = arr[l-1:r] # Adjust 1-based to 0-based index frequency = Counter(subarray) most_frequent = sorted(frequency.items(), key=lambda x: (-x[1], x[0]))[0][0] results.append(most_frequent) return results"},{"question":"There is a game played with an array of non-negative integers. You are given an array `A` of length `n`. The objective of the game is to reach the end of the array in the smallest possible number of jumps. You start at the first element of the array and each element in the array represents the maximum jump length at that position. Assume you are always able to reach the end of the array. Write a function `min_jumps(A)` that takes in an array of integers `A` and returns the smallest number of jumps required to reach the end of the array. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the length of the array. - The second line contains `n` space-separated integers `A1, A2, ..., An` (0 ≤ Ai ≤ 10^9), representing the maximum jump length at each position. **Output:** - Print a single integer representing the minimum number of jumps required to reach the end of the array. **Examples:** ``` Input: 5 2 3 1 1 4 Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. ``` ``` Input: 6 1 1 1 1 1 1 Output: 5 Explanation: From each element, the only jump option is to move to the next element. Thus it takes 5 jumps to reach the end. ```","solution":"def min_jumps(A): Returns the minimum number of jumps required to reach the end of the array. n = len(A) if n <= 1: return 0 jumps = 0 current_end = 0 farthest = 0 for i in range(n - 1): farthest = max(farthest, i + A[i]) if i == current_end: jumps += 1 current_end = farthest if current_end >= n - 1: break return jumps"},{"question":"You are given a list of intervals representing the starting and ending times of various meetings in a day. Your task is to calculate the minimum number of meeting rooms required to accommodate all the meetings. The input begins with an integer n (1 ≤ n ≤ 105), the number of meetings. The next n lines each contain two integers start and end, where 0 ≤ start < end ≤ 109, representing the starting and ending times of the meetings. Output a single integer, the minimum number of meeting rooms required. Example: Input: 4 0 30 5 10 15 20 35 40 Output: 2","solution":"def minMeetingRooms(intervals): Computes the minimum number of meeting rooms required to accommodate all meetings. Parameters: intervals (list): A list of tuples, where each tuple represents a meeting\'s start and end times. Returns: int: The minimum number of meeting rooms required. if not intervals: return 0 # Extract start and end times separately start_times = sorted([i[0] for i in intervals]) end_times = sorted([i[1] for i in intervals]) start_pointer = end_pointer = 0 used_rooms = 0 # Iterate over start times and end times while start_pointer < len(intervals): # If there\'s a meeting that has ended by the time the meeting at `start_pointer` starts if start_times[start_pointer] >= end_times[end_pointer]: used_rooms -= 1 end_pointer += 1 # We do this irrespective of whether a room was freed up or not. # If a room was freed up, then this used_rooms += 1 will not cause the count to increase as we # will decrement it in the previous step. used_rooms += 1 start_pointer += 1 return used_rooms"},{"question":"A student named Aria loves to solve puzzles in her free time. One day, she came across a game where she has to transform a list of integers into another list through a series of defined operations. The game rules are as follows: 1. You are given two lists of integers, A and B, both of the same length n. 2. In one move, you can select a subsegment of list A (contiguous elements) and add 1 to each element of that subsegment. Aria wants to know the smallest number of moves required to make the lists equal (A = B), or determine if it is impossible. Each test contains multiple test cases. The first line contains t (1 le t le 10) — the number of test cases. Description of the test cases follows. The first line of each test case contains one integer n (1 le n le 10^5) — the length of the lists A and B. The second line of each test case contains a list of n integers A. The third line of each test case contains a list of n integers B. It is guaranteed that the sum of n over all test cases does not exceed 10^5. For each test case: - Print on a single line the smallest number of moves required to transform list A into list B, or -1 if it is impossible. # Example Input: ``` 2 5 1 2 3 4 5 2 3 4 5 6 3 1 2 3 3 2 1 ``` Output: ``` 1 -1 ``` In the first test case, you can select the entire list A and add 1 to each element to get list B. In the second test case, it is impossible to transform list A into list B by any series of moves.","solution":"def min_moves_to_transform(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] A = test_cases[i][1] B = test_cases[i][2] # Initialize required variables diff = [B[j] - A[j] for j in range(n)] if any(d < 0 for d in diff): results.append(-1) else: max_diff = max(diff) results.append(max_diff) return results"},{"question":"Anya loves playing with sequences. Recently, she has been fascinated with arithmetic sequences, defined as a sequence of numbers where the difference between consecutive terms is constant. Given a sequence of integers, Anya wants to know whether it can be rearranged into an arithmetic sequence. Write a program that determines if the given sequence can be rearranged to form an arithmetic sequence. # Input: - The first line of the input contains a single integer `n` (2 ≤ n ≤ 100), the length of the sequence. - The second line contains `n` integers `a1, a2, ..., an` separated by spaces, representing the sequence. Each integer is between -1000 and 1000. # Output: - Print \\"YES\\" (without quotes) if the sequence can be rearranged to form an arithmetic sequence. Otherwise, print \\"NO\\". # Example: Input: ``` 4 3 5 1 7 ``` Output: ``` YES ``` Input: ``` 4 1 2 4 7 ``` Output: ``` NO ```","solution":"def can_form_arithmetic_sequence(n, sequence): Determines if the given sequence can be rearranged to form an arithmetic sequence. Parameters: n (int): the length of the sequence. sequence (list): a list of integers representing the sequence. Returns: str: \\"YES\\" if the sequence can be rearranged to form an arithmetic progression, otherwise \\"NO\\". sequence.sort() common_difference = sequence[1] - sequence[0] for i in range(1, n): if sequence[i] - sequence[i-1] != common_difference: return \\"NO\\" return \\"YES\\""},{"question":"Given an array of integers, you are required to perform the following operations until the array becomes empty: 1. Remove the maximum integer from the array. 2. If this is the first time this integer has been removed, discard it. 3. If this integer has been removed before, add it to the sum. You need to return the sum after the array becomes empty. # Input The first line of the input contains a single integer `n` (1 ≤ n ≤ 200,000) — the number of integers in the array. The second line contains `n` space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the elements of the array. # Output Print a single integer — the sum obtained from the removal process described above. # Example Input 7 1 2 3 6 6 4 4 Output 10 # Explanation 1. Remove 6 (first time, discarded) 2. Remove 6 (second time, add 6 to sum) 3. Remove 4 (first time, discarded) 4. Remove 4 (second time, add 4 to sum) 5. Remove 3 (first time, discarded) 6. Remove 2 (first time, discarded) 7. Remove 1 (first time, discarded) Final sum is 10.","solution":"def compute_sum_after_removals(n, arr): Given an array of integers, perform the specified removal operations and return the computed sum after the array becomes empty. # Step 1: Count occurrences of each number occurrences = {} for num in arr: if num in occurrences: occurrences[num] += 1 else: occurrences[num] = 1 # Step 2: Sort the array in descending order arr_sorted = sorted(arr, reverse=True) seen = set() total_sum = 0 # Step 3: Process the array for num in arr_sorted: if num in seen: total_sum += num else: seen.add(num) return total_sum"},{"question":"Dima has recently started to enjoy playing with binary strings. A binary string is a string consisting only of the characters \'0\' and \'1\'. He defines an \\"interesting\\" binary string as a binary string that does not contain two consecutive \'1\'s. Dima wonders how many binary strings of length n are interesting. For example: - If n = 1, there are 2 interesting binary strings: \\"0\\" and \\"1\\". - If n = 2, there are 3 interesting binary strings: \\"00\\", \\"01\\", and \\"10\\". Given the length of the binary string n, can you help Dima count the number of interesting binary strings of length n? Since the number can be large, return the result modulo 1000000007 (10^9 + 7). Input: - The input contains a single integer n (1 ≤ n ≤ 1000). Output: - Output the number of interesting binary strings of length n, modulo 1000000007. Example: Input: 2 Output: 3","solution":"def count_interesting_binary_strings(n): MOD = 1000000007 if n == 1: return 2 dp = [0] * (n + 1) dp[1] = 2 # \\"0\\", \\"1\\" if n > 1: dp[2] = 3 # \\"00\\", \\"01\\", \\"10\\" for i in range(3, n + 1): dp[i] = (dp[i - 1] + dp[i - 2]) % MOD return dp[n]"},{"question":"The cities and towns in a certain country are connected by a network of roads. Each road directly connects two distinct cities and is bidirectional. There are n cities in the country and n-1 roads, which ensures that all cities are connected and there are no cycles (i.e., the road network forms a tree). The president wants to set up a central administrative building in one of the cities such that the maximum distance from this city to any other city is minimized. The distance between two cities is defined as the number of roads that need to be traversed to travel between them. Write a program to find the city where the central administrative building should be located. The first line of input contains an integer n (2 ≤ n ≤ 100,000) — the number of cities. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the cities connected by a road. Print one integer — the number of the city where the central administrative building should be located. If there are multiple possible cities, print any one of them. **Example:** Input: ``` 4 1 2 2 3 2 4 ``` Output: ``` 2 ``` Explanation: If we choose city 1, the maximum distance to any other city is 2 (to both city 3 and city 4). If we choose city 2, the maximum distance to any other city is 1 (to cities 1, 3, and 4). If we choose city 3, the maximum distance to any other city is 2 (to both city 1 and city 4). If we choose city 4, the maximum distance to any other city is 2 (to both city 1 and city 3). Among these options, city 2 is the best choice because the maximum distance to any other city is minimized to 1.","solution":"from collections import deque def find_central_city(n, roads): def bfs(start): dist = [-1] * (n + 1) dist[start] = 0 queue = deque([start]) while queue: cur = queue.popleft() for neighbor in graph[cur]: if dist[neighbor] == -1: dist[neighbor] = dist[cur] + 1 queue.append(neighbor) farthest = max(range(1, n + 1), key=lambda x: dist[x]) return farthest, dist # Create adjacency list for the graph graph = [[] for _ in range(n + 1)] for u, v in roads: graph[u].append(v) graph[v].append(u) # Step 1: Run BFS from an arbitrary node (let\'s choose node 1) farthest_node, _ = bfs(1) # Step 2: Run BFS from the farthest node found in step 1 farthest_node, dist = bfs(farthest_node) # The new farthest node found is an endpoint of the diameter of the tree diameter = dist[farthest_node] # Step 3: Find the central node of the diameter path for i in range(1, n + 1): if dist[i] == diameter // 2: return i # Example usage n = 4 roads = [(1, 2), (2, 3), (2, 4)] print(find_central_city(n, roads)) # Output: 2"},{"question":"In a crowded city, the traffic system works in a unique way. There are multiple one-way streets connecting various intersections. Each intersection is labeled with an integer starting from 1 to n. Cars can only move in the direction indicated by the streets. Each street has a fixed travel time associated with it. Given the city map, you need to determine the shortest travel time from a specific starting intersection to a destination intersection. The first line of input contains three integers n, m, and q (2 leq n leq 2000, 1 leq m leq 10000, 1 leq q leq 1000), representing the number of intersections, the number of streets, and the number of queries, respectively. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, u neq v, 1 leq w leq 10000), describing a one-way street from intersection u to intersection v with travel time w. Each of the next q lines contains two integers s and d (1 leq s, d leq n), representing a query for the shortest travel time from intersection s to intersection d. For each query, print the shortest travel time from s to d. If there is no path from s to d, print -1. **Example:** ``` Input: 5 6 2 1 2 10 1 3 5 2 3 1 3 4 2 2 5 6 4 5 1 1 5 2 4 Output: 8 3 ``` In the above example, for the first query, the shortest path from intersection 1 to intersection 5 is 1 -> 3 -> 4 -> 5 with total travel time 8. For the second query, the shortest path from intersection 2 to intersection 4 is 2 -> 3 -> 4 with travel time 3.","solution":"import heapq def dijkstra(n, graph, start): Uses Dijkstra\'s algorithm to find the shortest path from start to all other nodes in the graph. distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_path_queries(n, m, q, streets, queries): Determines the shortest travel time from a start intersection to a destination intersection. graph = {i: {} for i in range(1, n + 1)} for u, v, w in streets: graph[u][v] = w result = [] for s, d in queries: distances = dijkstra(n, graph, s) result.append(distances[d] if distances[d] != float(\'inf\') else -1) return result"},{"question":"You are given an infinite binary string that consists of an infinite number of alternating 0s and 1s. Given a large integer n, determine the nth digit of this binary string. Note that the binary string is zero-indexed. You need to write a function that takes an integer n as input and returns the corresponding digit at the nth position in the infinite binary string. # Input - An integer n (0 ≤ n ≤ 10^18). # Output - A single digit which is the nth digit (either 0 or 1) in the infinite binary string. # Example - Input: 5 Output: 0 - Input: 999999999999999999 Output: 1 # Explanation In the first example, if we consider a few digits of the infinite binary string, it looks like this: \\"010101010101...\\". The digit at the 5th position (0-based) is 0. In the second example, the 999999999999999999th position (0-based) in the infinite binary string has the digit 1. # Constraints - 0 ≤ n ≤ 10^18 # Hint Observe the pattern in the infinite binary string. The nth position digit can be directly derived based on whether n is even or odd.","solution":"def nth_digit_in_infinite_binary_string(n): Returns the nth digit in the infinite binary string \\"0101010101...\\" Parameters: n (int): The position in the binary string (0-indexed) Returns: int: The digit at the nth position (0 or 1) return n % 2"},{"question":"In a city, there are n intersections connected by m bidirectional roads. The mayor has decided to install traffic lights at some intersections to control the traffic flow. However, due to budget constraints, traffic lights can only be installed at a limited number of intersections. Given this constraint, the city planning committee wants to ensure that it is possible to travel from the city center (intersection 1) to the city hospital (intersection n) without using any intersection that doesn\'t have a traffic light installed. Your task is to determine whether it is possible to install traffic lights at some intersections (including the city center and the hospital) such that the number of intersections with traffic lights does not exceed a given limit and there exists a path from the city center to the hospital that only uses intersections with traffic lights. The first line of the input contains three integers n, m, and k (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2 * 10^5, 2 ≤ k ≤ n) — the number of intersections, the number of roads, and the maximum number of intersections with traffic lights, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating that there is a road between intersections u and v. Print \\"YES\\" if it is possible to ensure a path from the city center to the hospital with only the specified maximum number of intersections having traffic lights installed; otherwise, print \\"NO\\". Example: Input: 6 7 4 1 2 1 3 2 4 3 4 2 5 5 6 4 6 Output: YES Explanation: It is possible to install traffic lights at intersections 1, 2, 4, and 6 to ensure a path from 1 to 6.","solution":"from collections import deque, defaultdict def can_install_traffic_lights(n, m, k, roads): if k < 2: return \\"NO\\" graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs(start, end): queue = deque([(start, 1)]) # (node, distance) visited = set() while queue: node, depth = queue.popleft() if node in visited: continue visited.add(node) if node == end: return depth for neighbor in graph[node]: if neighbor not in visited: queue.append((neighbor, depth + 1)) return float(\'inf\') shortest_path_length = bfs(1, n) if shortest_path_length <= k: return \\"YES\\" else: return \\"NO\\""},{"question":"You have an array of integers where each element represents the height of a vertical line drawn on an x-axis location. Each pair of lines, together with the x-axis, forms a container that can hold water. The width of the container is the distance between the two lines, and the height is determined by the shorter line of the pair. You need to find the maximum amount of water a container can store. You will be given multiple test cases to consider. The first line of input contains an integer t (1 le t le 10^4) -- the number of test cases. Each test case starts with an integer n (2 le n le 10^5) -- the number of lines (heights). The next line contains n non-negative integers representing the heights (0 le heights[i] le 10^9). For each test case, output the maximum amount of water that can be contained. **Examples:** **Input:** ``` 3 6 1 8 6 2 5 4 8 3 7 4 1 1 1 1 5 3 1 2 4 5 ``` **Output:** ``` 49 1 6 ``` **Explanation:** **Test Case 1:** For the heights [1, 8, 6, 2, 5, 4, 8, 3, 7], the maximum water container is formed between the lines at indices 1 and 8, with height 8 and width (8-1) = 7. So, the container can hold `7 * 7 = 49` units of water. **Test Case 2:** For the heights [1, 1, 1, 1], the maximum water container is between any two adjacent lines, holding `1 * 1 = 1` unit of water. **Test Case 3:** For the heights [3, 1, 2, 4, 5], the maximum water container is between lines at indices 1 and 4 with height 4 and width (4-1) = 3. So, the container can hold `3 * 4 = 12` units of water.","solution":"def find_max_water(heights): Returns the maximum amount of water that can be contained within a list of heights. max_water = 0 left = 0 right = len(heights) - 1 while left < right: width = right - left height = min(heights[left], heights[right]) max_water = max(max_water, width * height) # Move the pointer which is at the shorter line if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water def process_test_cases(test_cases): results = [] for heights in test_cases: results.append(find_max_water(heights)) return results"},{"question":"Hongcow is interested in graphical designs and recently he has been playing around with pixels. He has a canvas represented by an n x m grid where he can paint some of the cells. Each cell is initially white (represented by a \'.\'). Hongcow can perform an operation on the grid where he paints a rectangular block of cells in black (represented by \'X\'). The operation can be described by the top-left corner cell (i, j) and the bottom-right corner cell (x, y), for which all cells in the rectangle defined by the corners (i, j) and (x, y) become black. Hongcow wants to know if the final state of the grid is achievable by using one or more operations. Given the grid\'s final state, determine if it\'s possible to achieve it using the described rectangular paint operations. The first line of the input will contain two integers n and m (1 ≤ n, m ≤ 500), the dimensions of the grid. The next n lines will describe the final state of the grid. Each line will be a string of length m consisting of characters \'.\' and \'X\', where \'X\' means the cell is painted black and \'.\' means the cell is white. Output \\"YES\\" if it is possible to achieve the final grid state using one or more rectangular paint operations. Output \\"NO\\" otherwise. # Examples: **Input 1:** ``` 3 3 ... .XX .XX ``` **Output 1:** ``` YES ``` **Input 2:** ``` 4 5 ..... ..XX. .XX.. ..... ``` **Output 2:** ``` NO ``` **Input 3:** ``` 2 2 XX XX ``` **Output 3:** ``` YES ```","solution":"def is_possible_to_achieve_final_state(n, m, grid): Determine if it is possible to achieve the final grid state using one or more rectangular paint operations. :param n: int: number of rows :param m: int: number of columns :param grid: List[str]: final state of the grid :return: str: \\"YES\\" if it is possible to achieve the final grid state, \\"NO\\" otherwise # This matrix will track visited cells to avoid re-examining them visited = [[False] * m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == \'X\' and not visited[i][j]: # Found a new rectangle rect_rows = rect_cols = 0 # Calculate vertical extent of the rectangle while i + rect_rows < n and grid[i + rect_rows][j] == \'X\': rect_rows += 1 # Calculate horizontal extent of the rectangle while j + rect_cols < m and grid[i][j + rect_cols] == \'X\': rect_cols += 1 # Mark all cells in the rectangle as visited and check validity for x in range(rect_rows): for y in range(rect_cols): if grid[i + x][j + y] == \'.\' or visited[i + x][j + y]: return \\"NO\\" visited[i + x][j + y] = True return \\"YES\\""},{"question":"A game developer is designing an in-game progression system where players collect stars by completing levels. Each level has a certain number of stars that can be collected, and players can play levels in any order they choose. However, due to a game mechanic, players need to reach at least a minimum threshold of stars after playing a certain number of levels to unlock special rewards. You need to help determine if the players can unlock the reward and the optimal strategy to achieve this. The game consists of n levels, each with a different number of stars. A player must play exactly m levels. After playing these levels, the total number of stars collected must be at least k to unlock the reward. Determine whether it is possible for the player to unlock the reward by selecting the best m levels. The first line contains three space-separated integers n, m, and k (1 ≤ n ≤ 100, 1 ≤ m ≤ n, 0 ≤ k ≤ 10000) — the total number of levels, the number of levels the player must play, and the minimum number of stars required respectively. The second line contains n space-separated integers si (0 ≤ si ≤ 100) — the number of stars in each level. Print \\"YES\\" if it is possible to unlock the reward, and \\"NO\\" otherwise. **Example:** Input: 6 3 10 5 1 3 2 8 4 Output: YES Input: 6 3 20 5 1 3 2 8 4 Output: NO","solution":"def can_unlock_reward(n, m, k, stars): Returns \'YES\' if it is possible to unlock the reward by collecting at least k stars from the best m levels out of n levels, otherwise returns \'NO\'. # Sort the stars in descending order to pick the largest ones. stars.sort(reverse=True) # Take the sum of the best m stars. total_stars = sum(stars[:m]) # Check if the total is at least k. if total_stars >= k: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a list of `n` tasks, each with a certain duration. Your job is to schedule these tasks on two machines such that the maximum time taken by either of the two machines is minimized. This means you want to balance the load between the two machines as evenly as possible. The first line of input contains an integer `n` (1 ≤ n ≤ 20) — the number of tasks. The second line contains `n` integers, where the i-th integer is the duration of the i-th task. Each duration is a positive integer and does not exceed 1000. Print the minimal possible maximum time taken by either of the two machines. **Example:** Input: ``` 4 8 4 6 2 ``` Output: ``` 10 ``` In this example, the optimal way to distribute the tasks between the two machines is to assign tasks with durations 8 and 2 to one machine and tasks with durations 4 and 6 to the other machine. Both machines will then have 10 units of time.","solution":"from itertools import combinations def minimize_max_time(n, durations): Distributes tasks between two machines to minimize the maximum time taken by either machine. Parameters: n (int): The number of tasks. durations (list of int): List of task durations. Returns: int: The minimal possible maximum time taken by either machine. total_time = sum(durations) best_time = total_time # Try all subsets of the tasks for the first machine for i in range(1, n + 1): for subset in combinations(durations, i): time_first_machine = sum(subset) time_second_machine = total_time - time_first_machine current_max_time = max(time_first_machine, time_second_machine) if current_max_time < best_time: best_time = current_max_time return best_time"},{"question":"A manufacturer builds and sells robotic vacuum cleaners. Each robotic vacuum cleaner has a battery capacity of `B` mAh and a power consumption rate of `P` mAh per hour. The manufacturer wants to calculate the maximum uninterrupted cleaning time for the vacuum cleaner, given its battery capacity and power consumption rate. Additionally, after the battery is depleted, the manufacturer wants to determine how many full charging cycles will be required to clean a given area of `A` square meters, considering that the vacuum cleaner cleans at a rate of `R` square meters per hour and the maximum uninterrupted cleaning time calculated previously. Write a program that calculates: 1. The maximum uninterrupted cleaning time in hours. 2. The total number of full charging cycles required to clean the given area. The first line of input contains four integers `B`, `P`, `A`, and `R` (1 ≤ `B`, `P`, `A`, `R` ≤ 10^5), representing the battery capacity in mAh, power consumption rate in mAh per hour, area to be cleaned in square meters, and the cleaning rate in square meters per hour, respectively. Output two integers: 1. The maximum uninterrupted cleaning time in hours. 2. The total number of full charging cycles required to clean the given area. # Example Input: 5000 1000 100 10 Output: 5 2 # Explanation For the example given, the maximum uninterrupted cleaning time is `B / P = 5000 / 1000 = 5` hours. The vacuum cleaner can clean `5 * 10 = 50` square meters in one charge cycle. Therefore, to clean `100` square meters, two full charging cycles are required, as `100 / 50 = 2`.","solution":"def calculate_cleaning_time_and_cycles(B, P, A, R): Calculate the maximum uninterrupted cleaning time and the total number of full charging cycles required. :param B: Battery capacity in mAh :param P: Power consumption rate in mAh per hour :param A: Area to be cleaned in square meters :param R: Cleaning rate in square meters per hour :return: A tuple containing the maximum uninterrupted cleaning time and the total number of full charging cycles required # Calculate the maximum uninterrupted cleaning time max_cleaning_time = B // P # Calculate the amount of area that can be cleaned in one cycle area_per_cycle = max_cleaning_time * R # Calculate the total number of full charging cycles required total_cycles = -(-A // area_per_cycle) # Use ceiling division to ensure we cover all area return max_cleaning_time, total_cycles"},{"question":"You are given a sequence of integers and a window size k. Your task is to find the maximum sum of any subarray of length k in the sequence. A subarray is a contiguous part of an array. The first line of the input contains two integers n and k (1 le n le 10^5, 1 le k le n) — the length of the sequence and the length of the subarray to be considered. The second line contains n integers a_1, a_2, ..., a_n (-10^6 le a_i le 10^6) — the sequence of integers. Output a single integer that is the maximum sum of any subarray of length k. # Example Input ``` 5 2 1 2 3 4 5 ``` Output ``` 9 ``` Explanation There are four subarrays of length 2: [1,2], [2,3], [3,4], [4,5]. The sums of these subarrays are 3, 5, 7, and 9, with the maximum sum being 9.","solution":"def max_sum_subarray(n, k, arr): Returns the maximum sum of any subarray of length k in the given array arr. :param n: int, length of the array :param k: int, length of the subarray :param arr: list, sequence of integers :return: int, maximum sum of subarray of length k # Initialize the maximum sum with a very small number max_sum = -float(\'inf\') # Calculate the sum of the first subarray of size k current_sum = sum(arr[:k]) max_sum = current_sum # Use sliding window to find maximum sum of subarray of length k for i in range(k, n): current_sum = current_sum - arr[i - k] + arr[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a distant galaxy, there exists a special lock mechanism which opens only when provided with a binary password of size n. However, there are certain constraints to form the binary password. Specifically, no two consecutive \'1\'s are allowed in the password. Given the size n, write a function to determine the number of valid binary passwords of size n. # Input: - A single integer n (0 ≤ n ≤ 40) — the size of the binary password. # Output: - A single integer representing the number of valid binary passwords of length n. # Examples: **Example 1:** ``` Input: 3 Output: 5 Explanation: The valid binary passwords of size 3 are: - 000 - 001 - 010 - 100 - 101 ``` **Example 2:** ``` Input: 5 Output: 21 ``` # Note: - For n = 0, the number of valid binary passwords is 1 (an empty binary string is considered valid). - Develop an efficient approach, keeping in mind the constraint n ≤ 40.","solution":"def count_valid_binary_passwords(n): Returns the number of valid binary passwords of size n. if n == 0: return 1 # Initialize dp arrays dp0 = [0] * (n+1) # Ending with 0 dp1 = [0] * (n+1) # Ending with 1 # Base cases dp0[1] = 1 dp1[1] = 1 # Fill dp arrays for i in range(2, n+1): dp0[i] = dp0[i-1] + dp1[i-1] dp1[i] = dp0[i-1] # Total valid passwords for length n return dp0[n] + dp1[n] # Example usage # print(count_valid_binary_passwords(3)) # Expected Output: 5 # print(count_valid_binary_passwords(5)) # Expected Output: 21"},{"question":"A company wants to analyze the performance of its employees based on their project completions. Each employee is represented by a unique ID and has a certain number of completed projects. The company has a list of employees with their respective completed projects for the current month. Given the ID of each employee and the number of projects they completed this month, the company wants to generate a report showing the number of employees who completed each number of projects. Implement a function `performance_report(n, records)` that takes two arguments: - `n` (1≤ n ≤10^5): The number of employees. - `records`: A list of tuples where each tuple contains two integers (ID, P), representing the employee ID (1 ≤ ID ≤ 10^5) and the number of projects they completed (0 ≤ P ≤ 100). The function should return a dictionary where the keys are the number of completed projects (from 0 to 100) and the values are the count of employees who completed that many projects. Example: ```python performance_report(5, [(1, 3), (2, 5), (3, 3), (4, 2), (5, 0)]) ``` Output: ```python {0: 1, 1: 0, 2: 1, 3: 2, 4: 0, 5: 1, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, ..., 100: 0} ```","solution":"def performance_report(n, records): Generate a report showing the number of employees who completed each number of projects. Parameters: n (int): The number of employees. records (list of tuples): A list of tuples where each tuple contains an employee ID and completed projects. Returns: dict: A dictionary with keys as the number of projects and values as the count of employees who completed that many projects. # Initialize the dictionary with 0 to 100 project counts set to 0 report = {i: 0 for i in range(101)} # Populate the dictionary with counts for _, projects in records: report[projects] += 1 return report"},{"question":"Dracarys is developing a new video game, and part of the game involves managing a magical garden. The garden is represented by a 2D grid of size n x m. Some cells are fertile while others are barren. A flower can only be planted in a fertile cell. However, once a flower is planted in a fertile cell, it can spread to adjacent fertile cells (up, down, left, right) that are not blocked by a barren cell. Given the garden layout, determine the number of distinct patches of fertile ground where flowers can be planted and spread. Each patch consists of connected fertile cells that are not separated by any barren cells. You are provided with t test cases. The first line of the input contains t (1 ≤ t ≤ 10) - the number of test cases. For each test case: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the dimensions of the garden grid. - The next n lines contain m characters each, representing the garden grid. Each character is either \'F\' (fertile) or \'B\' (barren). For each test case, output a single integer – the number of distinct patches of fertile ground. Example: Input: 2 4 5 FFFFB FBFFB FFBBF BBBBF 3 3 FBF BFB FBF Output: 2 5 Explanation: In the first test case, there are 2 distinct patches of fertile ground. The first patch consists of fertile cells (1,1), (1,2), (1,3), (2,3), (3,1), and (3,2). The second patch is the single cell (3,5). In the second test case, each \'F\' is an isolated patch, so there are 5 patches in total.","solution":"def count_fertile_patches(t, cases): def dfs(grid, i, j, visited): directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] stack = [(i, j)] while stack: x, y = stack.pop() visited[x][y] = True for d in directions: nx, ny = x + d[0], y + d[1] if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny] and grid[nx][ny] == \'F\': stack.append((nx, ny)) results = [] for case in cases: n, m, grid = case visited = [[False]*m for _ in range(n)] patch_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'F\' and not visited[i][j]: dfs(grid, i, j, visited) patch_count += 1 results.append(patch_count) return results"},{"question":"Bob is a master chef and has a collection of n different ingredients. Each ingredient has a certain nutrient value represented by an integer array v of length n. Bob wants to prepare a special dish using some or all of the ingredients. The total nutrient value of the dish is the sum of the nutrient values of the used ingredients. However, there\'s a catch: Bob\'s dish can only use a maximum of k different ingredients. Bob wants to maximize the total nutrient value of his special dish. Can you help him? The first line of input contains two integers, n (1 leq n leq 100) and k (1 leq k leq n), representing the number of ingredients and the maximum number of ingredients that can be used, respectively. The second line contains n integers v_1, v_2, ldots, v_n, where v_i (-1000 leq v_i leq 1000) represents the nutrient value of the i^{th} ingredient. Print one integer: the maximum total nutrient value of Bob\'s special dish. # Example **Input:** ``` 5 3 4 -1 7 3 -2 ``` **Output:** ``` 14 ``` **Explanation:** Bob can choose the ingredients with nutrient values 4, 7, and 3, which gives a total nutrient value of 14.","solution":"def maximize_nutrient_value(n, k, nutrients): Returns the maximum total nutrient value of a dish using at most k ingredients. :param n: Integer, number of ingredients :param k: Integer, maximum number of ingredients that can be used :param nutrients: List of integers, nutrient values of the ingredients sorted_nutrients = sorted(nutrients, reverse=True) return sum(sorted_nutrients[:k])"},{"question":"In a small village, the mayor decided to build a new road network to connect all the houses. The village has N houses, and initially, there are no roads. Each house can be connected to any other house directly with a road, and the cost to build a road between house i and house j is given by a[i][j], which might differ for each pair of houses. The mayor has a limited budget and wants to ensure that to travel from any house to any other house, there is a path. However, to save costs, he wants to minimize the total cost of building the roads while still connecting all the houses. You are tasked with finding the minimum total cost to connect all the houses. The first line contains an integer N (2 ≤ N ≤ 100), the number of houses. The next N lines each contain N integers representing the matrix a, where a[i][j] (1 ≤ a[i][j] ≤ 1000) is the cost to build a road between house i and house j. Note that a[i][j] = a[j][i] for all 1 ≤ i, j ≤ N, and a[i][i] = 0. Print a single integer — the minimum total cost to connect all houses. Example: ``` 4 0 4 3 1 4 0 2 5 3 2 0 6 1 5 6 0 ``` Output: ``` 6 ``` In the example, the minimum total cost to connect all houses is 6, achieved by building roads between house 1 and house 4, house 2 and house 3, and house 1 and house 3.","solution":"def find_minimum_cost(n, cost_matrix): Find the minimum cost to connect all houses using Prim\'s algorithm for Minimum Spanning Tree (MST). import heapq # Create a priority queue (min heap) min_heap = [(0, 0)] # (cost, house) # To track the minimum cost to visit each house min_cost = [float(\'inf\')] * n min_cost[0] = 0 visited = [False] * n # To track visited houses total_cost = 0 num_visited = 0 # To track the number of connected houses while min_heap and num_visited < n: cost, house = heapq.heappop(min_heap) if visited[house]: continue visited[house] = True total_cost += cost num_visited += 1 for neighbor in range(n): if not visited[neighbor] and cost_matrix[house][neighbor] < min_cost[neighbor]: min_cost[neighbor] = cost_matrix[house][neighbor] heapq.heappush(min_heap, (cost_matrix[house][neighbor], neighbor)) return total_cost"},{"question":"There\'s a wooden board consisting of an integer number of smaller boards, each having a length. The length of the i-th smaller board is given by ai. You have a saw that can make a cut between any two adjacent smaller boards but each cut increases the number of smaller boards by 1. It takes t units of time to make each cut. You want to divide this wooden board into exactly k parts. Note that you can cut it at any place between any two adjacent smaller boards. Write a program that determines the minimum amount of time required to make exactly k parts from the original board. The first line of the input contains two space-separated integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n), where n is the number of smaller boards in the initial wooden board and k is the desired number of parts after cutting. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) - the initial lengths of the smaller boards. The third line contains a single integer t (1 ≤ t ≤ 10^9) - the time it takes to make each cut. Print the minimum amount of time needed to make the wooden board into exactly k parts. In the first sample test, the optimal solution is to make one cut between the first and second boards and another cut between the third and fourth boards. In the second sample test, an optimal solution is to make cuts between each pair of consecutive boards. So, in total, we make 3 cuts, requiring 3 units of time. For both, the output must be the total time required to achieve the desired number of parts. **Example 1**: ``` Input 5 3 4 5 2 5 1 1 Output 2 ``` **Example 2**: ``` Input 4 4 3 1 4 2 1 Output 3 ```","solution":"def minimum_time_to_cut_boards(n, k, board_lengths, t): This function will determine the minimum amount of time required to divide a wooden board (consisting of `n` smaller boards) into exactly `k` parts. Parameters: n (int): the number of smaller boards in the initial wooden board k (int): the desired number of parts board_lengths (list of int): lengths of each smaller board t (int): time in units to make each cut Returns: int: the minimum amount of time needed to make the wooden board into exactly `k` parts number_of_cuts_needed = k - 1 return number_of_cuts_needed * t"},{"question":"In a distant future, a massive interplanetary database contains detailed information about various research projects on different planets. Each planet can have multiple ongoing projects, and each project can produce a specific set of outcomes. Some outcomes of the projects serve as prerequisites for starting new projects. The Interplanetary Research Council (IRC) seeks your help to identify all possible research projects that can be completed given certain initial research outcomes already available. The galaxy can be represented as a directed graph where each node represents a project and each directed edge represents a prerequisite relationship between projects. A project can only be initiated if all its prerequisites (outcomes of other projects) are already achieved. Given the number of projects, the prerequisites for each project, and the initial set of outcomes the IRC has, determine the full list of projects that can be completed. Your task is to implement a function that will return this list of projects. The input consists of: - An integer `p` (1 ≤ p ≤ 1000) representing the number of projects. - An integer `q` (0 ≤ q ≤ 10000) representing the number of prerequisite relationships. - The next `q` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ p), indicating that the outcome of project `u` is a prerequisite for starting project `v`. - An integer `r` (0 ≤ r ≤ p) representing the number of initial outcomes already available. - The next line contains `r` distinct integers each between 1 and p representing these initial outcomes. Output a list of projects that can be completed, sorted in ascending order. **Example:** Input: ``` 6 6 1 3 2 3 3 4 1 5 4 6 5 6 2 1 2 ``` Output: ``` 1 2 3 4 5 6 ``` In this example, projects 1 and 2 can be started immediately. Project 3 can be initiated after both projects 1 and 2 are completed, project 4 after project 3 is completed, projects 5 after project 1 is completed, and finally project 6 after both projects 4 and 5 are completed. Therefore, all projects can eventually be completed given the initial outcomes.","solution":"from collections import deque, defaultdict def find_completable_projects(p, q, prerequisites, r, initial_outcomes): Given the number of projects, prerequisites, and initial outcomes, find the list of completable projects. # Prerequisite graph and indegree counter prereq_graph = defaultdict(list) indegree = {i: 0 for i in range(1, p + 1)} for u, v in prerequisites: prereq_graph[u].append(v) indegree[v] += 1 # Queue of projects that can be started queue = deque(initial_outcomes) completable_projects = set(initial_outcomes) while queue: current_project = queue.popleft() for neighbor in prereq_graph[current_project]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: completable_projects.add(neighbor) queue.append(neighbor) return sorted(completable_projects)"},{"question":"You are given n pairs of shoes and each pair is either left or right. You need to make all possible complete pairs such that each pair consists of a left shoe and a right shoe. Find the maximum number of complete pairs that can be formed and determine how many shoes are left unpaired. The first line of input contains an integer n (1 ≤ n ≤ 100) - the number of shoes. The second line contains n integers, where each integer is either 1 or 2. 1 denotes a left shoe and 2 denotes a right shoe. Print two integers: the first integer denotes the maximum number of complete pairs that can be formed, and the second integer denotes the number of shoes that are left unpaired. In the first example, we have 3 left shoes and 2 right shoes, so the maximum number of pairs is 2, and 1 left shoe is left unpaired. In the second example, all shoes can be paired, thus forming 3 pairs and leaving no shoes unpaired. Example: Input 5 1 2 1 1 2 Output 2 1 Input 6 1 1 2 2 1 2 Output 3 0","solution":"def max_pairs_and_unpaired_shoes(n, shoes): Returns the maximum number of complete pairs that can be formed and the number of shoes that are left unpaired. left_shoes = shoes.count(1) right_shoes = shoes.count(2) max_pairs = min(left_shoes, right_shoes) unpaired_shoes = n - 2 * max_pairs return max_pairs, unpaired_shoes"},{"question":"Given a string `s` consisting of lowercase alphabetic characters and a query string `t` also consisting of lowercase alphabetic characters, your task is to determine the number of unique substrings of `s` that are anagrams of string `t`. An anagram is a rearrangement of the characters of a word or phrase to create a new word or phrase, using all the original characters exactly once. For example, \\"god\\" and \\"dog\\" are anagrams of each other. # Input - The first line contains a string `s` (1 ≤ |s| ≤ 10000). - The second line contains a string `t` (1 ≤ |t| ≤ 100). # Output - Print a single integer that represents the number of unique substrings of `s` that are anagrams of `t`. # Example Input ``` cbaebabacd abc ``` Output ``` 2 ``` Explanation The substrings of `s` that are anagrams of `t` are \\"cba\\" and \\"bac\\". Hence, the output is 2. In another case: Input ``` abab ab ``` Output ``` 3 ``` Explanation The substrings of `s` that are anagrams of `t` are \\"ab\\", \\"ba\\", and \\"ab\\". Therefore, the output is 3.","solution":"from collections import Counter def count_anagram_occurrences(s, t): t_counter = Counter(t) t_length = len(t) s_length = len(s) anagrams_count = 0 for i in range(s_length - t_length + 1): substring = s[i:i + t_length] if Counter(substring) == t_counter: anagrams_count += 1 return anagrams_count"},{"question":"Alice is an avid reader and a collector of rare books. She has a bookshelf containing a series of books, and she\'s decided to organize her collection by iteratively sorting sections of her bookshelf. An operation consists of selecting a contiguous subarray of books and moving it to the end of the bookshelf. The goal is to have all the books arranged in increasing order by their unique identifiers. You are given an array of n integers, where each integer represents a unique identifier of a book. Determine the minimum number of operations required to sort the array in increasing order. The first line contains an integer n (1 leq n leq 10^6). The second line contains n integers a_i (1 leq a_i leq 10^6) — the unique identifiers of the books in the order they are currently arranged on the bookshelf. Print a single integer — the minimum number of operations required to sort the array in increasing order. # Example Input 5 3 1 4 2 5 Output 2 Explanation One possible sequence of operations is: 1. Select the subarray [3, 1] and move it to the end, result: [4, 2, 5, 3, 1] 2. Select the subarray [4, 2, 5] and move it to the end, result: [3, 1, 4, 2, 5] Thus, the minimum number of operations required is 2. For the input sequence 1 2 3 4 5, the output should be 0 as the array is already sorted.","solution":"def min_operations_to_sort_books(n, books): if n == 1: return 0 # Finding the length of the LIS dp = [1] * n for i in range(1, n): for j in range(i): if books[i] > books[j]: dp[i] = max(dp[i], dp[j] + 1) lis_length = max(dp) return n - lis_length"},{"question":"Given two arrays of integers, `nums1` and `nums2`, we need to find the maximum length of a subarray that appears in both arrays. A subarray is a contiguous part of an array. For example: Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7] Output: 3 Explanation: The subarray [3,2,1] is the longest subarray that appears in both arrays. Write a function `findLength(nums1, nums2)` that returns the maximum length of a subarray that appears in both arrays. # Function Signature ```python def findLength(nums1: List[int], nums2: List[int]) -> int: ``` # Input - `nums1`: List of integers (1 ≤ length of nums1 ≤ 1000, 0 ≤ nums1[i] ≤ 100). - `nums2`: List of integers (1 ≤ length of nums2 ≤ 1000, 0 ≤ nums2[i] ≤ 100). # Output - An integer representing the maximum length of a subarray that appears in both arrays.","solution":"def findLength(nums1, nums2): Function to find the maximum length of a subarray that appears in both nums1 and nums2. # Initialize a 2D array to keep track of maximum lengths of subarrays dp = [[0] * (len(nums2) + 1) for _ in range(len(nums1) + 1)] max_length = 0 # Iterate over each element in nums1 and nums2 for i in range(1, len(nums1) + 1): for j in range(1, len(nums2) + 1): if nums1[i - 1] == nums2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_length = max(max_length, dp[i][j]) return max_length"},{"question":"Write a function that takes a list of integers and a target sum, and returns the number of unique pairs of elements in the list that add up to the target sum. Implement the function `count_pairs(nums: List[int], target: int) -> int` where `nums` is a list of integers and `target` is the target sum. You should assume the input list can contain both positive and negative numbers and that pairs (a, b) and (b, a) are considered identical and should not be counted twice. **Input** - The first line contains an integer `n` (1 le n le 10^5), the size of the list. - The second line contains `n` space-separated integers representing `nums`. - The third line contains a single integer `target`, the target sum. **Output** - Print a single integer representing the number of unique pairs of elements that add up to the target sum. **Examples** ``` Input: 6 1 5 7 -1 5 6 Output: 2 ``` ``` Input: 5 1 1 1 1 1 2 Output: 2 ``` **Explanation** In the first example, the pairs (1, 5) and (5, 1) are considered identical, and another pair (7, -1) adds up to 6. Thus, there are 2 unique pairs. In the second example, although there are multiple pairs that add up to 2, they are all combinations of the same pair (1, 1). Thus, there is only one unique pair (counted 2 times).","solution":"def count_pairs(nums, target): Returns the number of unique pairs of elements in nums that add up to the target sum. seen = set() unique_pairs = set() for num in nums: diff = target - num if diff in seen: pair = tuple(sorted((num, diff))) unique_pairs.add(pair) seen.add(num) return len(unique_pairs)"},{"question":"Polycarp has a rectangular matrix containing n rows and m columns filled with integers. He wants to reorganize the matrix such that the sum of the elements in each row is equal to the sum of the elements in each column. To achieve this, Polycarp is allowed to swap any two elements of the matrix as many times as he wants. Note that after reorganization, the matrix should still contain exactly the same set of integers as it initially contained. Your task is to help Polycarp determine if it is possible to reorganize the matrix to meet the given condition. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the matrix. The next n lines contain m integers each, where the j-th integer in the i-th line represents the element at position (i, j) of the matrix. Elements of the matrix are non-negative integers, and their sum does not exceed 10^6. Output \\"YES\\" if it is possible to reorganize the matrix such that the sum of each row equals the sum of each column. Otherwise, output \\"NO\\". Example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: YES Input: 2 3 1 2 3 6 5 4 Output: NO","solution":"def can_reorganize_matrix(n, m, matrix): Determines if the given matrix can be reorganized so that the sum of elements in each row equals the sum of elements in each column. Parameters: n (int): Number of rows. m (int): Number of columns. matrix (list of list of int): n x m matrix of integers. Returns: str: \\"YES\\" if the reorganization is possible, otherwise \\"NO\\". total_sum = sum(sum(row) for row in matrix) if total_sum % n != 0 or total_sum % m != 0: return \\"NO\\" return \\"YES\\""},{"question":"A research lab has n scientists who can work on m projects. Each project requires a specific skill set, and each scientist possesses a unique set of skills. The head of the lab wants to maximize the number of projects that can be completed, but no scientist can work on more than one project at the same time. Each project specifies which skills are required to complete it, and each scientist lists the skills they possess. A scientist can only work on a project if they have all the skills required by that project. Given the information about the skills required for each project, and the skills possessed by each scientist, determine the maximum number of projects that can be completed. The first line contains two integers n and m (1 ≤ n, m ≤ 5000) — the number of scientists and the number of projects. Each of the next m lines contains a list of integers, where the first integer k is the number of skills required for the project, followed by k integers representing the skill IDs. Each of the next n lines contains a list of integers, where the first integer l is the number of skills that the scientist possesses, followed by l integers representing the skill IDs. Print a single integer — the maximum number of projects that can be completed. **Example:** Input: ``` 3 3 2 1 2 1 2 2 3 4 3 1 2 3 2 2 4 2 1 3 ``` Output: ``` 2 ``` **Explanation:** - Project 1 requires skills: 1, 2 - Project 2 requires skills: 2 - Project 3 requires skills: 3, 4 - Scientist 1 possesses skills: 1, 2, 3 - Scientist 2 possesses skills: 2, 4 - Scientist 3 possesses skills: 1, 3 - Scientist 1 can work on Project 1. - Scientist 2 can work on Project 2. - Project 3 cannot be completed because there is no scientist with both skills 3 and 4. - Thus, the maximum number of projects that can be completed is 2.","solution":"def max_projects(n, m, projects, scientists): from collections import defaultdict from itertools import permutations def can_do_project(scientist_skills, project_skills): return all(skill in scientist_skills for skill in project_skills) project_requirements = [set(project[1:]) for project in projects] scientist_skills = [set(scientist[1:]) for scientist in scientists] matches = defaultdict(list) for p_idx, project in enumerate(project_requirements): for s_idx, scientist in enumerate(scientist_skills): if can_do_project(scientist, project): matches[p_idx].append(s_idx) # Use maximum bipartite matching algorithm def bpm(u, matchR, seen): for v in matches[u]: if not seen[v]: seen[v] = True if matchR[v] == -1 or bpm(matchR[v], matchR, seen): matchR[v] = u return True return False matchR = [-1] * n result = 0 for i in range(m): seen = [False] * n if bpm(i, matchR, seen): result += 1 return result"},{"question":"You are given a rectangular grid with `n` rows and `m` columns. Each cell in the grid can either be empty (\'.\') or blocked (\'#\'). A domino is a 2x1 or 1x2 tile that covers two horizontally or vertically adjacent cells. Your task is to find the maximum number of dominos that can be placed on the grid in such a way that no two dominos overlap and no domino covers a blocked cell. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next `n` lines contains `m` characters each (\'.\' or \'#\'), representing the grid. Output a single integer — the maximum number of dominos that can be placed on the grid. # Example **Input:** ``` 3 4 .... .#.. .... ``` **Output:** ``` 5 ``` # Explanation: In this example, you can place 5 dominos in the following arrangement (shown using `D`): ``` DDDD .#D. DDDD ```","solution":"def max_dominos(n, m, grid): Finds the maximum number of dominos that can be placed on the grid without overlapping and without covering blocked cells. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of str): The grid representation, where \'.\' is an empty cell and \'#\' is a blocked cell. Returns: int: Maximum number of dominos that can be placed. # Count the number of empty cells empty_cells = sum(row.count(\'.\') for row in grid) # Each domino covers 2 cells, so the maximum number of dominos is half the number of empty cells return empty_cells // 2"},{"question":"Given an integer array `arr` of size `n`, and an integer `m`, your task is to determine if there exists a pair of indices (i, j) such that `arr[i] + arr[j]` is divisible by `m` (i.e., `(arr[i] + arr[j]) % m == 0`). If such a pair exists, return `YES`, otherwise, return `NO`. # Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^9), where `n` is the length of the array and `m` is the divisor. - The second line contains `n` integers separated by spaces, where each integer is `arr[i]` (1 ≤ arr[i] ≤ 10^9). # Output - Output a single line containing `YES` if there exists a valid pair of indices, otherwise, output `NO`. # Example Input 4 5 1 3 4 2 Output YES Input 3 7 10 20 30 Output NO","solution":"def is_pair_divisible_by_m(n, m, arr): Determines if there exists a pair of indices (i, j) such that arr[i] + arr[j] is divisible by m. :param n: int, length of the array :param m: int, divisor :param arr: list of int, the array of integers :returns: str, \\"YES\\" if such a pair exists, otherwise \\"NO\\" remainders = {} for number in arr: remainder = number % m complement = (m - remainder) % m if complement in remainders: return \\"YES\\" if remainder not in remainders: remainders[remainder] = 0 remainders[remainder] += 1 return \\"NO\\""},{"question":"You are given a list of integers. You need to find a contiguous subarray (i.e., a consecutive subsequence in the array) of the given list that has the largest sum, and then output that sum. The first line of the input contains a single integer, n (1 leq n leq 10^6), the size of the list. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9), the elements of the list. Output a single integer, the largest sum of a contiguous subarray. For example, consider the following input: ``` 9 -2 1 -3 4 -1 2 1 -5 4 ``` In this case, the subarray with the largest sum is `[4, -1, 2, 1]`, which has sum `6`. So, the output will be: ``` 6 ``` In the second example, an array containing only negative numbers can also be a valid input: ``` 5 -1 -2 -3 -4 -5 ``` In this case, the subarray with the largest sum is simply `[-1]`, which has sum `-1`. So, the output will be: ``` -1 ```","solution":"def max_subarray_sum(n, arr): This function returns the largest sum of a contiguous subarray. :param n: int - the size of the list :param arr: list of int - the elements of the list :return: int - the largest sum of a contiguous subarray max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, n): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Little Tommy is fascinated by numbers and enjoys observing patterns in sequences. Recently, he came across the concept of \\"zigzag sequences,\\" where a sequence of integers alternates between increasing and decreasing values. Now, Tommy wants to create such sequences himself. Given an integer n, your task is to generate a zigzag sequence of length n where the first half of the sequence (up to the middle element) is strictly increasing, and the second half (from the middle element onwards) is strictly decreasing. If n is odd, the middle element should be the largest in the sequence. Input: A single integer n (1 ≤ n ≤ 10^5), the length of the zigzag sequence. Output: Print a single line containing n integers that form a zigzag sequence as described. Example: Input: 7 Output: 1 2 3 7 6 5 4 Input: 4 Output: 1 2 4 3","solution":"def zigzag_sequence(n): Generates a zigzag sequence of length n where the first half of the sequence (up to the middle element) is strictly increasing, and the second half (from the middle element onwards) is strictly decreasing. Parameters: n (int): length of the zigzag sequence Returns: list of int: the zigzag sequence result = [0] * n mid = (n - 1) // 2 # Fill with increasing sequence in the first half for i in range(mid + 1): result[i] = i + 1 # Fill with decreasing sequence in the second half for i in range(mid + 1, n): result[i] = n - (i - mid - 1) return result"},{"question":"You are an event planner responsible for organizing separate one-day events for several groups, each with a specified set of guests. You need to distribute a series of n possible event days among the groups such that each group gets exactly one unique event day without any overlap. Each group has constraints on possible event days they can attend. Determine if it\'s possible to schedule all events without conflict, and provide the schedule if possible. The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of possible event days. The second line contains an integer m (1 ≤ m ≤ 100) — the number of groups. Each of the next m lines describes a group with the following format: k g_1 g_2 ... g_k — where k (1 ≤ k ≤ n) is the number of possible days this group can attend, followed by k integers g_1, ..., g_k (1 ≤ g_i ≤ n) indicating the possible days the group can attend. Output \\"Impossible\\" if it\'s not possible to assign a unique event day to each group. If it is possible, output m lines, each containing two integers: the group\'s index (1-based) and the day assigned to that group. For example, if event days can be scheduled, the output may look like: ``` 1 3 2 1 3 2 ``` If not, the output will be: ``` Impossible ``` Example input: ``` 5 3 3 1 3 5 2 2 3 2 4 5 ``` Example output: ``` 1 1 2 2 3 4 ```","solution":"def schedule_events(n, m, groups): from collections import defaultdict import heapq adj = defaultdict(list) for indx, group in enumerate(groups): k, *days = group for day in days: adj[day].append(indx) # Create a heap of days by the number of groups they can host pq = [(len(adj[day]), day) for day in adj] heapq.heapify(pq) assigned = [-1] * m # To which day each group is assigned used_days = set() while pq: _, day = heapq.heappop(pq) for grp in adj[day]: if assigned[grp] == -1: assigned[grp] = day used_days.add(day) break if len(used_days) != m: return \\"Impossible\\" result = [] for i, assign in enumerate(assigned): result.append((i + 1, assign)) return result"},{"question":"A small ecommerce company is developing a pricing algorithm for their products. Each product has a base price and may have multiple promotions applied to it which can either be discount-based or offer a fixed reduction. The goal is to compute the final price of each product after applying all promotions. Promotions can be of two types: - Percentage Discount: D%, which reduces the price by D percent. - Fixed Reduction: F, which reduces the price by an absolute value of F units. Given the base price of a product and a series of promotions, calculate the final applicable price. Apply the percentage discounts first in the order they appear, followed by the fixed reductions. If applying a promotion would result in a negative price, treat it as zero. The first line contains an integer b (1 ≤ b ≤ 10000) — the base price of the product in units. The next line contains an integer p (0 ≤ p ≤ 10) — the number of percentage discounts. The following p lines each contain an integer D (1 ≤ D ≤ 100) — the percentage discount for that promotion. The next line contains an integer f (0 ≤ f ≤ 10) — the number of fixed reductions. The following f lines each contain an integer F (1 ≤ F ≤ 10000) — the fixed reduction for that promotion. Output the final price of the product after all promotions are applied. Example: Input: 100 2 10 20 2 5 10 Output: 65 In this example, the base price is 100 units. After applying the percentage discounts of 10% and 20%, the price becomes 72 units (100 -> 90 -> 72). Then, applying the fixed reductions of 5 and 10 units, the final price becomes 57 units.","solution":"def calculate_final_price(base_price, percentage_discounts, fixed_reductions): # Apply percentage discounts in order for discount in percentage_discounts: base_price -= base_price * (discount / 100) # Apply fixed reductions in order for reduction in fixed_reductions: base_price -= reduction # Ensure the final price is not negative final_price = max(base_price, 0) return round(final_price) # Example Usage: # base_price = 100 # percentage_discounts = [10, 20] # fixed_reductions = [5, 10] # final_price = calculate_final_price(base_price, percentage_discounts, fixed_reductions) # print(final_price) # Output: 57"},{"question":"James is a software engineer and his company is developing an advanced security system. The system needs to manage and verify access logs. Each access log entry records the user ID and the exact time of the access. To improve efficiency, James wants to analyze access patterns over a period of time. In particular, he needs to determine the maximum number of users who accessed the system simultaneously within the given time window. James has access logs as a list of integer pairs (user_id, access_time) where each `access_time` is in seconds, and a fixed time window `k` seconds. Your task is to help James by writing a function that calculates the maximum number of unique users accessing the system at any point within the specified time window. # Input - The first line contains two space-separated integers `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ 10^6), representing the number of access log entries and the length of the time window in seconds, respectively. - The following `n` lines each contain two integers `user_id` (1 ≤ user_id ≤ 10^9) and `access_time` (0 ≤ access_time ≤ 10^9). # Output - Print a single integer representing the maximum number of unique users accessing the system within any `k` seconds window. # Example Input: ``` 5 10 1 1 2 3 3 8 4 10 5 15 ``` Output: ``` 4 ``` # Explanation In the example, the maximum number of unique users within any 10 seconds window occurs between access times 1 and 10, during which 4 different users accessed the system.","solution":"def max_unique_users_in_window(n, k, access_logs): from collections import deque # Sort access_logs based on access_time access_logs.sort(key=lambda x: x[1]) user_window = deque() max_users = 0 current_users = set() for user_id, access_time in access_logs: current_users.add(user_id) user_window.append((user_id, access_time)) # Remove the users which are outside the current window while user_window and access_time - user_window[0][1] >= k: oldest_user_id, oldest_access_time = user_window.popleft() if oldest_user_id not in [uid for uid, _ in user_window]: current_users.remove(oldest_user_id) max_users = max(max_users, len(current_users)) return max_users"},{"question":"Ringo loves his yellow submarine but dislikes clutter. He has a shelf with n books placed in a row. Each book is characterized by its thickness, given by an array a of length n. Ringo is very strict about his books\' arrangement and wants to remove exactly k books from the shelf in such a way that the sum of the thickness of the remaining books is minimized. Your task is to help Ringo achieve this. The first line contains two integers n and k (1 le k < n le 1000) — the number of books on the shelf and the number of books to be removed, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^4) — the thickness of each book. Output a single integer — the smallest possible sum of the thickness of the remaining books after exactly k books have been removed. Example: Input: ``` 5 2 4 2 5 1 3 ``` Output: ``` 6 ``` Explanation: We can remove books with thickness 5 and 4, leaving us with books of thickness 2, 1, and 3. The sum of their thicknesses is 6, which is the minimum possible sum for any combination of 2 books removed.","solution":"def minimize_thickness_sum(n, k, thicknesses): Returns the smallest possible sum of the thickness of the remaining books after exactly \'k\' books have been removed. Parameters: n (int): The number of books on the shelf. k (int): The number of books to be removed. thicknesses (list of int): The thickness of each book. Returns: int: The minimum possible sum of the thickness of the remaining books. # Sort the array in descending order to remove the \'k\' largest elements thicknesses.sort(reverse=True) # Remove the \'k\' largest elements remaining_books = thicknesses[k:] # Calculate the sum of the remaining books return sum(remaining_books)"},{"question":"A game show has a new challenge where contestants must form the longest possible word by inserting a given character into a specific number of positions in a given string. The task is to return the longest lexicographically smallest word that can be formed. The first line contains a string `s` (1 ≤ |s| ≤ 100) — the original string consisting of lowercase English letters. The second line contains the character `c` — the character to be inserted (a lowercase English letter). The third line contains the integer `k` (1 ≤ k ≤ 10) — the number of times the character `c` should be inserted into the string `s`. Your task is to determine the longest lexicographically smallest string that can be obtained by inserting the character `c` exactly `k` times into the string. The first sample inserts character \'e\' 2 times into the string \\"banana\\" which can be done in multiple ways like \\"ebananae\\", \\"banaena\\", etc. The lexicographically smallest would be \\"bananaee\\". The second sample inserts character \'x\' 3 times into the string \\"example\\", multiple resulting strings could be \\"exexamplxex\\", \\"exampleexx\\", etc. The lexicographically smallest would be \'examplexxx\'. Print the resulting string. **Example Input:** ``` banana e 2 example x 3 ``` **Example Output:** ``` bananaee examplexxx ```","solution":"def longest_lexicographically_smallest(s, c, k): Inserts character c exactly k times into the string s to form the longest lexicographically smallest string. return s + c * k"},{"question":"In a quiet village, there is a ritual where villagers gather around a bonfire, and the village elder tells them stories. Each villager brings a unique number, which represents their story\'s length, to the bonfire. The villagers want to arrange themselves in a circle, with each villager facing another villager such that the sum of the lengths of their stories is unique for every pair. Given this requirement, you need to find a way to arrange villagers in a circle, if possible, such that no two pairs of opposing villagers have the same sum of story lengths. The village elder provides you with the number of villagers `n` (where 2 ≤ n ≤ 1000) and the lengths of their stories as an array of integers `lengths` of size `n` (1 ≤ lengths[i] ≤ 10^9). You need to determine if it\'s possible to arrange the villagers in such a way. If it\'s possible, print \\"YES\\" and provide an arrangement of the villagers\' indices (1-based index) that meets the requirements. If it\'s not possible, print \\"NO\\". # Input - The first line contains a single integer n, the number of villagers. - The second line contains n integers, the lengths of their stories. # Output - If it\'s possible to arrange them, print \\"YES\\" and a sequence of n integers, representing the 1-based indices of their arrangement. - If it\'s not possible, print \\"NO\\". # Example Input ``` 4 1 3 2 6 ``` Output ``` YES 1 3 2 4 ``` # Note - In this example, the sums are: 1 + 2 = 3, 3 + 6 = 9, 2 + 1 = 3, and 6 + 3 = 9. Here, all pair sums are unique. - There may be multiple valid outputs; any valid permutation meeting the criteria is acceptable.","solution":"def arrange_villagers(n, lengths): sorted_indices = sorted(range(n), key=lambda x: lengths[x]) # If there are only two villagers or all pair sums cannot be unique if n % 2 == 0 and lengths[sorted_indices[n//2 - 1]] == lengths[sorted_indices[n//2]]: return \\"NO\\" arrangement = [sorted_indices[i] + 1 for i in range(n)] return \\"YES\\", arrangement"},{"question":"In a faraway land, there are n warriors standing in a line, each with a certain strength. The strength of the i-th warrior is given by a_i. A battle will take place, but there is a special rule: Each warrior has a preferred range of positions where he prefers to fight. More specifically, the i-th warrior prefers to fight between positions [p_i, q_i]. Your task is to arrange the warriors such that every warrior stands within their preferred range, or determine that it is impossible to do so. The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. For each test case: - The first line contains an integer n (1 le n le 100) — the number of warriors. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the strengths of the warriors. - The next n lines each contain two integers p_i and q_i (1 le p_i le q_i le n) — the preferred range for the i-th warrior. For each test case, output \\"YES\\" if it is possible to arrange all warriors within their preferred ranges, otherwise output \\"NO\\". Note that each position in the line is unique and must be occupied by exactly one warrior. For example, in the first test case: - If there are 3 warriors with strengths [1, 2, 3] and preferred ranges [1, 1], [2, 3], [3, 3], it is possible to arrange them in the order [1, 2, 3], so the answer will be \\"YES\\". - If there are 3 warriors with strengths [1, 2, 3] and preferred ranges [1, 2], [1, 2], [3, 3], it is possible to arrange them in the order [2, 1, 3], so the answer will be \\"YES\\".","solution":"def can_arrange_warriors(t, test_cases): results = [] for case in test_cases: n = case[\\"n\\"] strengths = case[\\"strengths\\"] preferred_ranges = case[\\"preferred_ranges\\"] warriors = sorted(((strengths[i], preferred_ranges[i][0], preferred_ranges[i][1]) for i in range(n)), reverse=True) position_taken = [False] * n possible = True for strength, p, q in warriors: placed = False for pos in range(p - 1, q): if not position_taken[pos]: position_taken[pos] = True placed = True break if not placed: possible = False break results.append(\\"YES\\" if possible else \\"NO\\") return results # Example usage: # t = 2 # test_cases = [ # { # \\"n\\": 3, # \\"strengths\\": [1, 2, 3], # \\"preferred_ranges\\": [(1, 1), (2, 3), (3, 3)], # }, # { # \\"n\\": 3, # \\"strengths\\": [1, 2, 3], # \\"preferred_ranges\\": [(1, 2), (1, 2), (3, 3)], # }, # ] # print(can_arrange_warriors(t, test_cases))"},{"question":"Petya has an array of n non-negative integers representing the height of bars in a histogram. The width of each bar is 1. He wants to know the largest rectangular area that can be formed within the bounds of the histogram, where the rectangle is made of contiguous bars. The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of bars in the histogram. The next line contains n integers, each representing the height of a bar (0 ≤ height ≤ 1000000000). The integers are separated by single spaces. Print a single integer — the largest rectangular area that can be formed within the bounds of the histogram. Example: Input: 7 2 1 5 6 2 3 4 Output: 10 In this example, the largest rectangular area can be formed with the third and fourth bars (both with height 5 and 6), giving an area of 5 * 2 = 10. Note: The bounds of the histogram can be extremely large, so ensure the solution is efficient with time and space complexity.","solution":"def largest_histogram_area(n, heights): Find the largest rectangular area in a histogram given the heights of the bars. Args: n (int): the number of bars. heights (list of int): the heights of the bars. Returns: int: the largest rectangular area. # Add a bar of height 0 at the end to make sure we pop all remaining bars heights.append(0) stack = [] max_area = 0 for i in range(n + 1): # While current bar is smaller than the one at the stack\'s top, calculate area while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] # Width is the distance between current index and the new top of stack minus one w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"The kingdom of Graphland is known for its intricate network of roads connecting its cities in the form of a tree. A tree with N nodes is a connected, undirected graph with N-1 edges, where each pair of nodes is connected by exactly one simple path. The citizens of Graphland are expecting deliveries of special packages, which must be delivered from the capital to all cities. The capital is the root of the tree (node 1), and a delivery to each city must be handled by a specific delivery worker. Each delivery worker can deliver packages to multiple cities, but they must follow the simple paths within the tree. The king wants to know the maximum number of deliveries that can be executed simultaneously, given that each delivery worker can only handle one path at a time. So, the idea is to find the maximum number of disjoint paths starting from the capital to any other city in the tree. # Input The first line contains an integer N (2 ≤ N ≤ 100,000) — the number of cities in Graphland. Each of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N) — an edge between cities u and v, forming the tree structure. # Output Print a single integer — the maximum number of deliveries that can be executed simultaneously. # Examples Example 1 # Input ``` 5 1 2 1 3 2 4 2 5 ``` # Output ``` 2 ``` Example 2 # Input ``` 4 1 2 2 3 2 4 ``` # Output ``` 1 ``` # Note In the first example, two delivery workers can handle the paths 1-2-4 and 1-3 simultaneously. In the second example, since node 2 connects three cities, only one path (e.g., 1-2-3) can be handled at a time, as node 2 would be shared by any other path.","solution":"def max_disjoint_paths(N, edges): Calculate the maximum number of disjoint paths starting from the capital (node 1) in a tree. from collections import defaultdict adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # The number of direct neighbors of node 1 is the maximum number of disjoint paths return len(adjacency_list[1])"},{"question":"You are given a maze represented by an `n x m` grid. Each cell in the grid is either empty (denoted by \'.\') or contains a wall (denoted by \'#\'). You are also given two integers, `k` and `q`, representing the number of keys and the number of queries respectively. There are exactly `k` keys located at distinct positions in the grid, with each key identified by a unique lowercase letter (\'a\' to \'z\'). The starting point is always marked by \'S\' and the exit point by \'E\'. In each of the `q` queries, you\'re given a pattern representing a sequence of keys that you must collect in the given order before reaching the exit. You are to determine if it is possible to reach the exit starting from \'S\' while collecting the keys in the specified order for each query. The input format is as follows: - The first line contains three integers `n`, `m`, and `k` (1 le n, m le 100), the dimensions of the maze and the number of keys. - The next `n` lines contain `m` characters each, representing the maze. - The following `k` lines each contain two integers `x` and `y` (0 le x < n, 0 le y < m) and a character `c` (a lowercase letter \'a\' to \'z\'), denoting the coordinates and identifier of each key. It is guaranteed that these positions will contain a \'.\' - The next line contains an integer `q` (1 le q le 1000), the number of queries. - Each of the next `q` lines contains a string of length `le k` representing the sequence of keys to be collected in that order. For each query, print \\"YES\\" if it\'s possible to reach the exit while collecting the keys in the specified order; otherwise, print \\"NO\\". Example: Input: ``` 5 6 3 #S.#.# #..#E# #.a.b# 0 3 a 3 4 b 4 2 c 2 ab bc ``` Output: ``` YES NO ``` In this example, the maze is represented by a grid of 5 rows and 6 columns. There are 3 keys at given positions, and 2 queries asking if it is possible to reach \'E\' while collecting the keys \'ab\' and \'bc\'. The expected output for these queries would be \\"YES\\" and \\"NO\\", respectively.","solution":"from collections import deque def bfs(maze, start, end, keys): n, m = len(maze), len(maze[0]) queue = deque([(start[0], start[1], 0)]) # (x, y, key_index) visited = set([(start[0], start[1], 0)]) while queue: x, y, key_index = queue.popleft() if (x, y) == end and key_index == len(keys): return True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny, new_index = x + dx, y + dy, key_index if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] != \'#\' and (nx, ny, new_index) not in visited: if new_index < len(keys) and (maze[nx][ny] == keys[new_index]): new_index += 1 visited.add((nx, ny, new_index)) queue.append((nx, ny, new_index)) return False def maze_solver(n, m, maze, key_positions, queries): start = end = None key_dict = {} for i in range(n): for j in range(m): if maze[i][j] == \'S\': start = (i, j) if maze[i][j] == \'E\': end = (i, j) for x, y, c in key_positions: key_dict[c] = (x, y) results = [] for query in queries: results.append(\\"YES\\" if bfs(maze, start, end, query) else \\"NO\\") return results"},{"question":"In a kingdom far away, there is a magical road system consisting of n cities and m directed roads connecting them. Each road takes exactly one hour to travel. The roads and cities are unique in that they create exactly one cycle, forming a cyclomatic graph where a cycle exists with any extra roads forming additional paths between cities. A wizard wishes to traverse from city A to city B using these roads. The wizard can start his journey from city A at any hour of the day, and travels at a constant speed of one city per hour. However, he has a magical ability allowing him to teleport between cities connected by a road at no time cost, but he can do it at most once during his journey. Given the description of the road system and the starting and ending cities, determine the minimum time the wizard needs to reach city B from city A. If it is impossible to reach the city B, return -1. The input consists of: - An integer n (2 ≤ n ≤ 10^5) — the number of cities. - An integer m (n ≤ m ≤ 2*10^5) — the number of directed roads. - m lines, where each line contains two integers u and v (1 ≤ u, v ≤ n) — representing a directed road from city u to city v. - Two integers A and B (1 ≤ A, B ≤ n) — the starting city and the destination city. Print a single integer — the minimum time required to reach city B from city A. If it is impossible to travel from city A to city B, print -1. # Example Input ``` 6 7 1 2 2 3 3 4 4 1 3 5 5 6 6 3 1 6 ``` Output ``` 3 ``` # Explanation 1. The wizard starts at city 1. 2. Travels for one hour to city 2. 3. Travels for another hour to city 3. 4. Uses the teleportation ability to move directly to city 6. Total time: 3 hours. The wizard could also choose other paths but this is the minimum time.","solution":"from collections import deque, defaultdict import sys def min_time_traversal(n, m, roads, A, B): # Construct the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) # Handle edge case if A == B: return 0 # Breadth-First-Search to find shortest distance in a directed graph def bfs(start): distances = {i: sys.maxsize for i in range(1, n+1)} queue = deque([(start, 0)]) distances[start] = 0 while queue: current, dist = queue.popleft() for neighbor in graph[current]: if dist + 1 < distances[neighbor]: distances[neighbor] = dist + 1 queue.append((neighbor, dist + 1)) return distances dist_from_A = bfs(A) dist_from_B = bfs(B) min_distance = dist_from_A[B] # Try making use of the teleportation ability once for u in range(1, n + 1): for v in graph[u]: if dist_from_A[u] + 1 + dist_from_B[v] < min_distance: min_distance = dist_from_A[u] + 1 + dist_from_B[v] return min_distance if min_distance != sys.maxsize else -1"},{"question":"The city of TetraVille is unique in that it represents its city layout with a matrix grid of size m x n. Each cell in the grid can either be an empty land (.) or a blockage (X). Robin, a local hero, is trying to reach from the top-left corner of the grid (0, 0) to the bottom-right corner (m-1, n-1). Robin can only move strictly to the right or down. Find out if there\'s a way for Robin to make it to the destination. Input: - The first line contains two integers m and n (2 ≤ m, n ≤ 1000), representing the number of rows and columns in the grid, respectively. - The next m lines contain n characters each, either \'.\' representing an empty land or \'X\' representing a blockage. Output: - Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner. Otherwise, print \\"NO\\". Example: Input: 4 5 . . . X . X . . . X . X X . . . . . . . Output: YES Explanation: Robin can move from (0,0) to (3,4) by moving like this: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,4).","solution":"def has_path(m, n, grid): Determines if there is a path from the top-left corner to the bottom-right corner of a grid. :param m: rows in the grid :param n: columns in the grid :param grid: 2D list with the grid layout :return: \\"YES\\" if there\'s a path, otherwise \\"NO\\" if grid[0][0] == \'X\' or grid[m-1][n-1] == \'X\': return \\"NO\\" # Using BFS to find the path from collections import deque queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == m-1 and y == n-1: return \\"YES\\" # Move to the right if y + 1 < n and grid[x][y + 1] == \'.\' and (x, y + 1) not in visited: queue.append((x, y + 1)) visited.add((x, y + 1)) # Move down if x + 1 < m and grid[x + 1][y] == \'.\' and (x + 1, y) not in visited: queue.append((x + 1, y)) visited.add((x + 1, y)) return \\"NO\\""},{"question":"Patrick has found an old box belonging to SpongeBob that contains a number of marbles. Each marble has a number written on it, and SpongeBob has decided to arrange them in sequence. However, SpongeBob cannot decide how to arrange them and wants your help with several queries. You will be given an array of integers representing the marbles and their numbers. Additionally, you will be given a number of queries, where each query consists of two integers: l and r. Your task is to determine whether the sequence of marbles between positions l and r (inclusive) is sorted in non-decreasing order. Formally, check if array[l] ≤ array[l+1] ≤ ... ≤ array[r], for each query. The first line of input contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of marbles and the number of queries. The second line contains n integers, where the i-th integer represents the number on the i-th marble. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — defining a query to check if the subarray from l to r is sorted in non-decreasing order. Print \\"Yes\\" for each query if the subarray from l to r is sorted in non-decreasing order. Print \\"No\\" otherwise. Example: Input: 5 3 1 2 2 4 5 1 3 2 4 1 5 Output: Yes Yes Yes In the first query, the subarray [1, 2, 2] is sorted. In the second query, the subarray [2, 2, 4] is sorted. In the third query, the subarray [1, 2, 2, 4, 5] is sorted.","solution":"def is_sorted_subarray(n, q, marbles, queries): Determines if the subarray between l and r (inclusive) is sorted in non-decreasing order for each query. Parameters: n (int): Number of marbles. q (int): Number of queries. marbles (list): List of integers representing the numbers on the marbles. queries (list): List of tuples where each tuple contains two integers l and r. Returns: list: List containing \\"Yes\\" or \\"No\\" for each query indicating if the subarray is sorted. results = [] for l, r in queries: l -= 1 # Convert l to 0-based index r -= 1 # Convert r to 0-based index sorted_flag = True for i in range(l, r): if marbles[i] > marbles[i + 1]: sorted_flag = False break results.append(\\"Yes\\" if sorted_flag else \\"No\\") return results"},{"question":"In a distant land called Yendoria, there are n villages connected by m bidirectional roads forming a connected graph. Each road has a certain length. There is a major festival happening, and the king wants to ensure that each village has the least possible travel cost to any other village. To achieve this, the king needs to determine the shortest paths between all pairs of villages. You are given the number of villages n and the number of roads m. The task is to compute the shortest distance between every pair of villages. Input: The first line contains two integers n and m (2 le n le 500, 1 le m le 25000) — the number of villages and the number of roads respectively. Each of the next m lines contains three integers u, v, and w (1 le u, v le n, 1 le w le 1000), where u and v represent two villages connected by a road of length w. Output: Print n lines, each containing n integers. The j-th integer in the i-th line should be the length of the shortest path from village i to village j. If there is no path from village i to village j, print -1 instead. The distance from a village to itself should be zero. Note: The graph is guaranteed to be connected, so there is at least one valid path between any two villages. Example: Input: 4 4 1 2 3 2 3 4 3 4 2 4 1 5 Output: 0 3 7 5 3 0 4 6 7 4 0 2 5 6 2 0","solution":"def floyd_warshall(n, m, roads): # Initialize the distance matrix dist = [[float(\'inf\')] * n for _ in range(n)] # Distance from each village to itself is 0 for i in range(n): dist[i][i] = 0 # Initialize distances according to the roads given for u, v, w in roads: dist[u-1][v-1] = w dist[v-1][u-1] = w # Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][k] != float(\'inf\') and dist[k][j] != float(\'inf\'): dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) # Replace all \'inf\' with -1 to indicate no path for i in range(n): for j in range(n): if dist[i][j] == float(\'inf\'): dist[i][j] = -1 return dist def shortest_paths(n, m, roads): return floyd_warshall(n, m, roads)"},{"question":"Misha is a huge fan of mathematics and puzzles. One day, he came across a challenging problem involving prime numbers and he needs your help to solve it. Given an integer n, determine the smallest prime number that is greater than n. Your task is to write a program that finds and prints this prime number. The first line contains a single integer n (1 <= n <= 10^6). Output a single integer — the smallest prime number greater than n. # Example Input: ``` 10 ``` Output: ``` 11 ``` # Note In the sample input, the next prime number greater than 10 is 11. Input: ``` 7 ``` Output: ``` 11 ``` In the sample input, the next prime number greater than 7 is 11.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def next_prime(n): Returns the smallest prime number greater than a given number n. prime_candidate = n + 1 while not is_prime(prime_candidate): prime_candidate += 1 return prime_candidate"},{"question":"Alex and Ben play a variation of Nim on heaps of stones. The game starts with n heaps, each containing ai stones (1 ≤ ai ≤ 10^9). In each turn, a player chooses a single heap and removes any positive number of stones from it. The player who cannot make a move loses the game. Alex always goes first. Determine who wins the game if both players play optimally. The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases. Each test case consists of two lines. The first line of each test case contains a single integer n (1 ≤ n ≤ 100), the number of heaps. The second line contains n space-separated integers a1, a2, ..., an, the number of stones in each heap. For each test case, print \\"Alex\\" if Alex wins and \\"Ben\\" if Ben wins.","solution":"def find_winner(n, heaps): result = 0 for heap in heaps: result ^= heap return \\"Alex\\" if result != 0 else \\"Ben\\" def determine_winners(test_cases): results = [] for test_case in test_cases: n, heaps = test_case results.append(find_winner(n, heaps)) return results"},{"question":"A construction company is working on planning a road network within a new urban area. The area can be represented as a grid of streets, where some streets are already blocked due to ongoing construction work. Given a grid of size n x m, where 0 represents an open street and 1 represents a blocked street, the company aims to determine whether there is a path from the top-left corner of the grid (0,0) to the bottom-right corner of the grid (n-1, m-1). Your task is to write a program that determines if such a path exists, using only open streets and moving only up, down, left, or right. If a path exists, output \\"YES\\", otherwise \\"NO\\". The first line contains two integers n and m (1 ≤ n, m ≤ 1000), separated by a space. The next n lines each contain m integers (either 0 or 1) representing the grid. Output \\"YES\\" if there is a path, and \\"NO\\" otherwise. # Examples **Input:** ``` 4 4 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 ``` **Output:** ``` YES ``` **Input:** ``` 3 3 0 1 0 1 1 0 0 0 0 ``` **Output:** ``` NO ``` **Note:** In the first example, a valid path from (0, 0) to (3, 3) exists, while in the second example, no such path can be established due to blockages.","solution":"def has_path(grid): from collections import deque n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return \\"NO\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) while queue: x, y = queue.popleft() if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\" def get_path_result(n, m, grid): return has_path(grid)"},{"question":"You are given an integer array a of length n and an integer k. You can choose any subarray of the array and rotate it 90 degrees to the right (the last element comes to the first place, and the others move one position to the right). Perform exactly k such rotations to maximize the lexicographical order of the array. The first line contains two integers n and k (1 le n le 1000, 1 le k le 10^9) — the length of the array and the number of rotations. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. Output one integer array that represents the maximum lexicographical order of the array after exactly k rotations. Example: ``` Input: 5 3 5 3 4 2 1 Output: 5 3 4 2 1 ``` Explanation: No rotations are needed because any rotation would decrease its lexicographical order. Thus, the initial array is the answer.","solution":"def max_lexicographical_array_after_rotations(n, k, arr): Returns the array in maximum lexicographical order after exactly k rotations. if k >= 1: # As one rotation on the entire array can be done if k>=1 max_arr = list(arr) for start in range(0, n): rotated = arr[start:] + arr[:start] if rotated > max_arr: max_arr = rotated return max_arr return arr"},{"question":"Alex loves playing video games and one of his favorite game challenges involves traversing dungeons. Each dungeon can be thought of as an m x n grid of rooms. Alex starts each level in the top-left corner room (1,1) and his goal is to reach the bottom-right corner room (m, n) with the maximum amount of treasure. Each room in the dungeon contains some amount of treasure (non-negative integer). Alex can only move right or down to an adjacent room. Write a function that calculates the maximum amount of treasure Alex can collect on his way to the bottom-right corner of the dungeon. The first line of the input contains two integers, m and n (1 ≤ m, n ≤ 100), indicating the dimensions of the dungeon. Each of the next m lines contains n integers, representing the amount of treasure in each room in the dungeon. The output should be a single integer, the maximum amount of treasure Alex can collect. # Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Explanation Alex can collect maximum treasure as follows: 1 → 3 → 5 → 2 → 1. # Note - Alex can only move right or down. - Alex starts at the top-left corner (1,1) and must reach the bottom-right corner (m,n).","solution":"def max_treasure(m, n, dungeon): Calculates the maximum amount of treasure Alex can collect in the dungeon. Args: m: number of rows in the dungeon. n: number of columns in the dungeon. dungeon: a 2D list representing the amount of treasure in each room. Returns: Maximum amount of treasure that can be collected. # Create a table to store the maximum treasure collected up to each room. dp = [[0] * n for _ in range(m)] # Initialize the top-left corner dp[0][0] = dungeon[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + dungeon[0][j] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + dungeon[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + dungeon[i][j] # The bottom-right corner contains the maximum treasure return dp[m-1][n-1] # Example usage if __name__ == \\"__main__\\": # Example input m, n = 3, 3 dungeon = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(max_treasure(m, n, dungeon)) # Output: 12"},{"question":"A nightclub has a rectangular dance floor with n rows and m columns. You are tasked with placing spotlights on the corners of the dance floor so that every position can be lit by at least one spotlight. Each spotlight covers the whole row and column it is on. Write a program that determines the minimal number of spotlights needed to light up the dance floor completely. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the dance floor. Print the minimal number of spotlights needed. # Example Input: ``` 3 4 ``` Output: ``` 2 ``` Explanation: You can place one spotlight at the top-left corner of the dance floor (lighting up the first row and first column) and the second at the bottom-right corner (lighting up the last row and last column), resulting in the entire dance floor being lit.","solution":"def minimal_spotlights(n, m): Returns the minimal number of spotlights needed to light up the dance floor with n rows and m columns, where each spotlight at a corner covers the whole row and column it is on. # If either dimension is 1, you can light up the whole floor with only 1 spotlight. # Otherwise, you need at least 2 spotlights placed on diagonal corners. if n == 1 or m == 1: return 1 else: return 2"},{"question":"Given a sequence of n integers, your task is to find the smallest subarray (contiguous subsequence) whose sum is greater than or equal to a given integer s. If there is no such subarray, return -1. The first line of the input consists of two space-separated integers, n (1 ≤ n ≤ 10^5) and s (1 ≤ s ≤ 10^9) — the number of integers and the target sum, respectively. The second line contains n space-separated integers a1, a2, …, an (0 ≤ ai ≤ 10^4), the sequence of integers. Print the length of the smallest subarray whose sum is greater than or equal to s. If no such subarray exists, print -1. # Example **Input:** ``` 10 15 5 1 3 5 10 7 4 9 2 8 ``` **Output:** ``` 2 ``` **Explanation:** The subarray from index 4 to 5 (10 + 7) sums up to 17, which is greater than 15, and its length is 2. This is the smallest subarray that satisfies the condition. Other subarrays like from index 3 to 4 (5 + 10) also satisfy the condition but they have the same or larger length.","solution":"def smallest_subarray_with_given_sum(n, s, arr): Returns the length of the smallest subarray with a sum greater than or equal to s. If no such subarray exists, it returns -1. left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += arr[right] while current_sum >= s: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else -1 # Example usage: n, s = 10, 15 arr = [5, 1, 3, 5, 10, 7, 4, 9, 2, 8] print(smallest_subarray_with_given_sum(n, s, arr)) # Output should be 2"},{"question":"You have been hired by a transportation company to design a scheduling algorithm for their bus routes. The company operates buses on a large number of routes, each connecting two different cities. Every bus route needs to be scheduled exactly once per day. Some bus routes are more profitable than others, and the company wants to maximize its daily profit while ensuring that no city is left isolated (i.e., there must be a way to travel between any pair of cities using the scheduled routes). Furthermore, there is a constraint on the minimum number of routes that must be in operation, in order to meet regulatory requirements. You are given the following information: - An integer n representing the number of cities. - An integer m representing the number of potential bus routes. - An integer min_routes representing the minimum number of bus routes that must be scheduled. - m lines follow, each containing three integers u, v, and p, describing a potential bus route from city u to city v with a profit of p. Write a program that determines the maximum possible profit that can be obtained while satisfying the connectivity and minimum routes constraints, or determines that it is impossible to meet the constraints. # Input: - The first line contains three integers n, m, min_routes (1 ≤ n ≤ 1000; 1 ≤ m ≤ 5000; 1 ≤ min_routes ≤ m). - Each of the next m lines contains three integers u, v, and p (1 ≤ u, v ≤ n; u ≠ v; -1000 ≤ p ≤ 1000), indicating a route between city u and city v with profit p. # Output: - If it is possible to meet the constraints, print a single integer representing the maximum possible profit. - If it is not possible, print \\"Impossible\\". # Example: **Input:** ``` 4 5 3 1 2 10 2 3 20 3 4 30 4 1 40 2 4 -50 ``` **Output:** ``` 90 ``` **Explanation:** A possible maximum profit is obtained by scheduling the routes (1,2), (2, 3), (3, 4), and (4, 1), which connect all cities and results in a profit of 10 + 20 + 30 + 40 = 100. Since we only need at least 3 routes, we can exclude the route with a negative profit (2, 4), resulting in a total profit of 90.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def maximum_profit(n, m, min_routes, edges): edges.sort(key=lambda x: x[2], reverse=True) parent = [i for i in range(n)] rank = [0] * n num_edges = 0 max_profit = 0 selected_edges = [] for u, v, p in edges: if num_edges >= min_routes: break if find(parent, u-1) != find(parent, v-1): union(parent, rank, u-1, v-1) max_profit += p num_edges += 1 selected_edges.append((u, v, p)) if num_edges < min_routes: remaining_edges = [edge for edge in edges if edge not in selected_edges] for u, v, p in remaining_edges: if num_edges < min_routes: union(parent, rank, u-1, v-1) max_profit += p num_edges += 1 else: break root_set = set(find(parent, i) for i in range(n)) if len(root_set) > 1 or num_edges < min_routes: return \\"Impossible\\" return max_profit # Reading input def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) min_routes = int(data[2]) edges = [] idx = 3 for _ in range(m): u = int(data[idx]) v = int(data[idx + 1]) p = int(data[idx + 2]) edges.append((u, v, p)) idx += 3 return n, m, min_routes, edges"},{"question":"Farmer Bob has a rectangular farm represented as a 2D grid. Each cell in the grid contains either a crop or a weed. Bob wants to protect his crops by enclosing the largest rectangular area consisting of only crops with a wooden fence. The fence must be rectangular and aligned to the grid\'s rows and columns. You need to help Bob by finding the area of the largest rectangular region that consists entirely of crops (represented by \'1\') in the grid. The first line of the input contains two integers, `m` and `n` (1 ≤ m, n ≤ 100), representing the number of rows and columns respectively in the grid. Each of the next `m` lines contains `n` characters, either \'1\' (representing a crop) or \'0\' (representing a weed). The output should be a single integer, the area of the largest rectangular region that contains only crops. # Example: Input: ``` 4 5 10101 11111 11111 10001 ``` Output: ``` 6 ``` In this example, the largest rectangular region containing only crops has an area of 6 (3 rows and 2 columns).","solution":"def maximalRectangle(matrix): Returns the area of the largest rectangular region that contains only \'1s\'. if not matrix: return 0 m = len(matrix) n = len(matrix[0]) max_area = 0 dp = [0] * n for i in range(m): for j in range(n): if matrix[i][j] == \'0\': dp[j] = 0 else: dp[j] += 1 max_area = max(max_area, largestAreaInHistogram(dp)) return max_area def largestAreaInHistogram(heights): Returns the largest rectangular area in a histogram. stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area"},{"question":"A jewelry store has n different types of precious stones, each marked with a unique value. The store owner wants to create sets of gems such that each set has exactly k different types of gems, and the total value of the gems in each set is maximized. However, each type of gem can only be used once in any given set. You are given an integer n representing the number of different types of gems, an integer k representing the number of different types of gems in each set, and an array values containing n integer values, where the i-th integer represents the value of the i-th type of gem. Write a function to calculate the maximum total value achievable by selecting k different types of gems. Input: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5), the number of different types of gems and the number of types to select for each set. - The second line contains n integers separated by spaces, where the i-th integer represents the value of the i-th type of gem (1 ≤ value ≤ 10^9). Output: - Print one integer, the maximum total value achievable by selecting k different types of gems. Example: Input: 6 3 5 1 3 7 9 6 Output: 22 Explanation: One possible optimal set of 3 different types of gems could include those with values 7, 9, and 6. The total value of this set is 7 + 9 + 6 = 22.","solution":"def max_total_value(n, k, values): Returns the maximum total value achievable by selecting k different types of gems. Parameters: n (int): Number of different types of gems. k (int): Number of different types of gems to select for each set. values (List[int]): Values of the gems. Returns: int: Maximum total value achievable. # Sort the values in descending order to get the highest values at the start sorted_values = sorted(values, reverse=True) # Sum the first k elements (which are the largest values) max_value = sum(sorted_values[:k]) return max_value"},{"question":"A giant technology company has invented a new robot that helps with warehouse organization. The warehouse is represented as a grid with `m` rows and `n` columns. Each cell in the grid can be either empty or contain an obstacle. The robot starts on a given cell and aims to reach another specific destination cell. The robot can move up, down, left, or right, but it cannot move into cells with obstacles. Moreover, the robot has a limited energy level `E`, which decreases by 1 with each step it takes. Write a function that determines whether the robot can reach the destination cell with its given energy level. If it is possible, the function should return the minimum energy required for the robot to reach the destination; otherwise, the function should return -1. # Input - The first line contains three integers `m`, `n`, and `E` (1 ≤ `m`, `n` ≤ 1000, 0 ≤ `E` ≤ 10^6) – the number of rows, columns in the grid, and the robot\'s initial energy level. - The next `m` lines each contain `n` characters, representing the grid. `.` represents an empty cell, and `#` represents an obstacle. - The last line contains four integers `start_row`, `start_col`, `end_row`, and `end_col` (0 ≤ `start_row`, `start_col`, `end_row`, `end_col` < `m`, `n`) – the starting and destination cell coordinates. # Output - Print the minimum energy required for the robot to reach the destination cell, or -1 if it is not possible. # Example Input ``` 5 5 20 ..... .#. ..... .#... ..... 0 0 4 4 ``` Output ``` 8 ``` Explanation The minimum energy required for the robot to reach the destination cell (4, 4) starting from (0, 0) is 8. The path can be (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (3, 1) -> (3, 2) -> (3, 3) -> (3, 4) -> (4, 4). # Notes - The robot must consider the shortest path available within its energy limit. - If there is an obstacle blocking all paths to the destination, the function should return -1.","solution":"from collections import deque def minimum_energy(m, n, E, grid, start_row, start_col, end_row, end_col): # Direction vectors for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize a queue for BFS with the starting position queue = deque([(start_row, start_col, 0)]) # (row, col, distance) visited = set((start_row, start_col)) while queue: row, col, dist = queue.popleft() # If we\'ve reached the destination if (row, col) == (end_row, end_col): return dist # Explore all possible moves for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < m and 0 <= new_col < n and grid[new_row][new_col] == \'.\' and (new_row, new_col) not in visited: if dist + 1 <= E: # Check if within energy limits visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"Given an integer array `arr` of size `n`, perform the following operations based on the values in another integer array `ops` of size `m`: 1. If the value in `ops` is positive, add it to the value at index 0 of `arr`. 2. If the value in `ops` is negative, subtract its absolute value from the value at the last index of `arr`. 3. If the value in `ops` is zero, the operation is a no-op and the array `arr` remains unchanged for that operation. Return the modified array `arr` after applying all operations in `ops` in the order they appear. For example: ``` arr = [2, 8, 5, 3] ops = [2, -1, 0, 4] ``` After applying the operations in `ops`: 1. Add 2 to arr[0]: [4, 8, 5, 3] 2. Subtract 1 from arr[n-1]: [4, 8, 5, 2] 3. No operation: [4, 8, 5, 2] 4. Add 4 to arr[0]: [8, 8, 5, 2] The resulting array will be `[8, 8, 5, 2]`. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the size of the array `arr`. - The second line contains `n` integers `arr[i]` (-10^9 ≤ arr[i] ≤ 10^9) — the elements of the array `arr`. - The third line contains an integer `m` (1 ≤ m ≤ 1000) — the number of operations. - The fourth line contains `m` integers `ops[i]` (-10^9 ≤ ops[i] ≤ 10^9) — the operations to be performed. # Output Print a single line containing `n` integers representing the modified array `arr` after applying all operations in `ops`. # Example Input ``` 4 2 8 5 3 4 2 -1 0 4 ``` Output ``` 8 8 5 2 ```","solution":"def modify_array(arr, ops): Modify the array \'arr\' based on the operations in \'ops\'. for op in ops: if op > 0: arr[0] += op elif op < 0: arr[-1] -= abs(op) # If op is 0, no operation needed return arr"},{"question":"You have a field of crops represented as a grid of n rows and m columns. Each cell in this grid can either be a crop (represented by 1) or barren land (represented by 0). Your task is to find the largest rectangle of crops in this grid. A rectangle of crops is defined as a contiguous sub-grid where all cells contain 1. Write a function that takes as input an integer t (number of test cases), and for each test case, the integers n and m (dimensions of the grid) followed by an n x m grid of 0s and 1s. The function should output the area of the largest rectangle of crops for each test case. Input Format: - The first line contains an integer t (1 ≤ t ≤ 10), the number of test cases. - For each test case, the first line contains two integers n and m (1 ≤ n, m ≤ 1000) indicating the number of rows and columns in the grid. - The following n lines contain m integers each (either 0 or 1) representing the grid. Output Format: - For each test case, print a single integer, the area of the largest rectangle of crops. Example: Input: 2 4 4 1 1 0 1 1 1 1 1 0 1 1 0 1 1 1 0 3 4 0 1 0 0 1 1 1 1 0 0 1 0 Output: 6 4","solution":"def max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def max_rectangle(grid): if not grid: return 0 n = len(grid) m = len(grid[0]) max_area = 0 heights = [0] * m for i in range(n): for j in range(m): if grid[i][j] == 0: heights[j] = 0 else: heights[j] += 1 max_area = max(max_area, max_histogram_area(heights)) return max_area def largest_rectangle_of_crops(t, test_cases): results = [] for test in test_cases: n, m, grid = test results.append(max_rectangle(grid)) return results"},{"question":"In the fictional country of Ecovia, they have a unique tax management system. The tax rate in Ecovia is a progressive tax rate which is calculated based on income brackets. Each bracket has a specific percentage rate that applies to income within that bracket and not on the entire income. Given your total income for the year, you need to calculate the total tax you owe. There are `n` brackets, each defined by two integers: `upper` (upper limit of the income for this bracket, or -1 if there is no upper limit) and `rate` (the tax rate for this bracket as a percentage). The brackets are provided in ascending order of income. Write a function that calculates the total tax for a given income. The function should take two inputs: 1. An integer `income` (0 ≤ income ≤ 10^6) — your total income for the year. 2. A list of `n` tuples, where each tuple contains two integers: `upper` and `rate` (0 ≤ upper ≤ 10^6 or upper = -1; 0 ≤ rate ≤ 100). Your function should return the total amount of tax owed. # Input The input consists of two parts: 1. The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of tax brackets. 2. The next `n` lines each contain two integers `upper` and `rate` — the upper limit and the rate for each tax bracket. # Output Output a single integer, the total tax owed based on the income and provided tax brackets. # Example Input ``` 3 10000 10 20000 20 -1 30 25000 ``` Output ``` 4500 ``` Explanation 1. For the first bracket (0 to 10,000), the tax is 10% of 10,000 which is 1,000. 2. For the second bracket (10,000 to 20,000), the tax is 20% of 10,000 which is 2,000. 3. For the rest of the income (20,000 to 25,000), the tax is 30% of 5,000 which is 1,500. Total tax = 1,000 + 2,000 + 1,500 = 4,500. # Constraints 1. The income brackets will be provided in ascending order without any overlaps. 2. The income will always be a non-negative integer. 3. Each rate is a valid percentage from 0 to 100.","solution":"def calculate_total_tax(income, brackets): Calculate the total tax owed based on the given income and tax brackets. :param income: int - The total income for the year. :param brackets: list of tuples - Each tuple contains two integers, upper and rate. :return: int - The total tax owed. total_tax = 0 previous_upper = 0 for upper, rate in brackets: # Determine the range to apply the current rate if upper == -1 or income <= upper: # Tax the remaining income at this rate taxable_income = income - previous_upper total_tax += taxable_income * rate / 100 break else: # Tax the income up to the upper limit at this rate taxable_income = upper - previous_upper total_tax += taxable_income * rate / 100 previous_upper = upper return int(total_tax)"},{"question":"Anna and Ben play a game involving an array of n integers. They take turns making moves. A move consists of selecting a subarray of the given array and reducing each element in the subarray by 1. Anna always goes first. The game ends when the array contains at least one negative element or when no more moves can be made, in which case the player who cannot make a move loses the game. Given the starting array, determine whether Anna has a winning strategy assuming both Anna and Ben play optimally. You should implement a function `findWinner(n: int, array: List[int]) -> str` that takes the length of the array `n` and the array itself, and returns the winner of the game (\\"Anna\\" or \\"Ben\\"). # Input - The first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of elements in the array. - The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), the elements of the array. # Output - Output the name of the winner (\\"Anna\\" or \\"Ben\\"). # Examples Example 1: Input: ``` 5 3 1 2 3 4 ``` Output: ``` Anna ``` Example 2: Input: ``` 3 2 2 2 ``` Output: ``` Ben ``` # Note - In the first example, Anna can always ensure that she reduces the subarray containing the elements [3, 1, 2, 3, 4] such that, in her first move, she takes the entire array and reduces each element by 1 until all elements are the minimum element in the array, which forces Ben to continue reducing until he makes the array negative. - In the second example, any optimal subarray reduction strategy will not leave room for Anna to win if each value is already the same minimal value in each move rotation.","solution":"def findWinner(n, array): Determines the winner of the game assuming both Anna and Ben play optimally. :param n: The length of the array :param array: The integer array :return: \\"Anna\\" if Anna has a winning strategy, otherwise \\"Ben\\" min_element = min(array) if min_element % 2 == 0: return \\"Ben\\" else: return \\"Anna\\""},{"question":"Michael is training for a marathon and follows a precise running schedule. He plans to run a series of intervals where he must alternate between running and resting. The schedule is defined by two sequences: running times and resting times. Michael starts running at time 0 and runs for the first interval of the running times sequence, then rests for the first interval of the resting times sequence, and so on. The sequences are guaranteed to be of the same length. Your task is to compute the total time required for Michael to complete all his runs, including his rest periods. The first line contains one integer t (1 leq t leq 100) — the number of test cases. For each test case, the first line contains the single integer n (1 leq n leq 100) — the number of intervals. The next line contains n integers representing the running times (1 leq run_i leq 1000) for each interval. The following line contains n integers representing the resting times (1 leq rest_i leq 1000) for each interval. For each test case, print one integer — the total time Michael needs to complete all runs and rests from the schedule. # Example Input: ``` 2 3 5 10 15 2 4 6 2 20 5 10 7 ``` Output: ``` 42 42 ``` # Explanation In the first test case, Michael completes his training as follows: - Runs for 5 minutes - Rests for 2 minutes - Runs for 10 minutes - Rests for 4 minutes - Runs for 15 minutes - Rests for 6 minutes The total time is 5 + 2 + 10 + 4 + 15 + 6 = 42 minutes. In the second test case: - Runs for 20 minutes - Rests for 10 minutes - Runs for 5 minutes - Rests for 7 minutes The total time is 20 + 10 + 5 + 7 = 42 minutes.","solution":"def total_training_time(t, test_cases): Computes the total training time for a given number of test cases. Parameters: t (int): the number of test cases test_cases (list of tuples): each tuple contains three items: 1. n (int): the number of intervals 2. running_times (list of int): the running times for each interval 3. resting_times (list of int): the resting times for each interval Returns: list of int: the total training time for each test case results = [] for case in test_cases: n, running_times, resting_times = case total_time = sum(running_times) + sum(resting_times) results.append(total_time) return results"},{"question":"A company wants to implement a password strength checker to ensure users create strong and secure passwords. The password needs to meet the following criteria: 1. It must be at least 8 characters long. 2. It must contain at least one lowercase letter. 3. It must contain at least one uppercase letter. 4. It must contain at least one digit. 5. It must contain at least one special character from the set: !@#%^&*()-+ Your task is to write a function that checks whether a given password meets these criteria. # Input The input consists of a single line containing a string denoting the password. The password contains only ASCII printable characters and its length does not exceed 100 characters. # Output Output \\"STRONG\\" (without the quotes) if the password meets all the criteria. Otherwise, output \\"WEAK\\" (without the quotes). # Example Input ```plaintext Aba1!abc ``` Output ```plaintext STRONG ``` Input ```plaintext Abcdefg ``` Output ```plaintext WEAK ``` # Notes In the first example, the password \\"Aba1!abc\\" meets all the criteria: it is 8 characters long, contains lowercase and uppercase letters, a digit, and a special character. Thus, the output is \\"STRONG\\". In the second example, the password \\"Abcdefg\\" does not meet the criteria as it is less than 8 characters long, and it lacks a digit and a special character. Thus, the output is \\"WEAK\\".","solution":"def password_strength_checker(password): Checks whether the provided password is strong based on specified criteria. if len(password) < 8: return \\"WEAK\\" has_lowercase = any(c.islower() for c in password) has_uppercase = any(c.isupper() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \\"!@#%^&*()-+\\" for c in password) if all([has_lowercase, has_uppercase, has_digit, has_special]): return \\"STRONG\\" else: return \\"WEAK\\""},{"question":"Johnny is organizing a coding competition at his university. He has prepared a leaderboard where each participant is assigned a unique score based on their performance. He wants to prepare a summary showing the ranks of participants. Ranks are assigned in such a way that the highest score gets the rank 1, the second highest score gets rank 2, and so on. In case of participants having the same score, they should be assigned the same rank. The next participant(s) should get the rank immediately following the ranks of the previous participants with the same score. Write a function that takes the list of scores and returns the list of ranks for each participant. The order of ranks should correspond to the order of input scores. # Input: - The first line contains an integer n (1 leq n leq 10^5) — the number of participants. - The second line contains n integers s_1, s_2, dots, s_n (1 leq s_i leq 10^9) — the scores of the participants. # Output: - Print a line containing n integers r_1, r_2, dots, r_n representing the ranks of the participants. # Example: Input: 3 90 80 90 Output: 1 2 1 Explanation: - The first participant has the highest score of 90 and therefore gets rank 1. - The second participant has the second highest score of 80 and therefore gets rank 2. - The third participant has the same highest score of 90 as the first participant and therefore also gets rank 1. Note: Remember to handle the case when multiple participants have the same score correctly.","solution":"def calculate_ranks(scores): Returns the ranks of participants based on their scores. Parameters: scores (list): List of integers representing scores of participants. Returns: list: List of integers representing ranks of participants. sorted_scores = sorted(set(scores), reverse=True) rank_map = {score: rank + 1 for rank, score in enumerate(sorted_scores)} ranks = [rank_map[score] for score in scores] return ranks"},{"question":"In a faraway land, there is a famous coding competition called the Enchanted Algorithm Challenge. One of the challenges posed in this competition involves a fascinating sequence called the \\"Magic Sequence\\". The Magic Sequence starts with a single 1. Each subsequent element is generated based on the count of digits appearing consecutively in the previous element. For example, starting from the first element: - 1 (one 1) transforms to 11 (which reads as \\"two 1s\\") - 11 transforms to 21 (which reads as \\"one 2, one 1\\") - 21 transforms to 1211 (which reads as “one 1, one 2, two 1s”) - 1211 transforms to 111221 (which reads as “one 1, one 2, two 1s”) - and so on... Given a non-negative integer n, your task is to output the nth element of the Magic Sequence. The input consists of a single integer n (0 ≤ n ≤ 30), where n represents the position of the element in the Magic Sequence (starting from zero). Print the nth element of the Magic Sequence. **Example** Input: ``` 4 ``` Output: ``` 1211 ``` Explanation: The sequence is as follows: - Position 0: 1 - Position 1: 11 - Position 2: 21 - Position 3: 1211 - Position 4: 111221","solution":"def magic_sequence(n): Returns the nth element of the Magic Sequence. if n == 0: return \\"1\\" sequence = \\"1\\" for _ in range(n): next_sequence = \\"\\" count = 1 for i in range(1, len(sequence)): if sequence[i] == sequence[i-1]: count += 1 else: next_sequence += str(count) + sequence[i-1] count = 1 next_sequence += str(count) + sequence[-1] sequence = next_sequence return sequence"},{"question":"Professor Snape is conducting a potions experiment. He has a set of magical ingredients, each of which has a unique magical power. Snape needs to combine exactly two different ingredients to brew a specific potion. The power of a potion is determined by the absolute difference in the magical powers of the two ingredients combined. You are given a list of n integers representing the magical powers of the ingredients. Your task is to find the maximal power of the potion Snape can brew by combining exactly two different ingredients from the list. # Input - The first line contains an integer n (2 ≤ n ≤ 100), the number of magical ingredients. - The second line contains n integers, each representing the magical power of an ingredient. Each integer is between -1000 and 1000 (inclusive). # Output - Output a single integer: the maximal power of the potion that can be brewed by combining any two different ingredients. # Example Input ``` 5 -4 3 7 -8 2 ``` Output ``` 15 ``` Explanation By combining the ingredients with powers -8 and 7, the absolute difference in their powers is | -8 - 7 | = 15, which is the maximal power achievable in this example. # Note Ensure that the solution runs efficiently, even for the upper limit of n.","solution":"def maximal_potion_power(n, powers): Returns the maximal power of a potion made by combining any two different ingredients. The power of a potion is the absolute difference in the magical powers of the two ingredients. :param n: int, the number of magical ingredients :param powers: list of int, list of magical powers of the ingredients :return: int, maximal potion power max_power = 0 for i in range(n): for j in range(i + 1, n): max_power = max(max_power, abs(powers[i] - powers[j])) return max_power"},{"question":"In a distant galaxy, there is a kingdom consisting of several cities connected by teleportation portals. Each portal has a transportation cost associated with it. The monarch of the kingdom wants to ensure that his subjects can travel between any two cities with minimum cost, so he has decided to hire an engineer to construct new teleportation portals if necessary. You are given a list of cities, the existing teleportation portals between them, and their costs. Your task is to determine the minimum cost needed to connect all cities so that it\'s possible to travel between any two cities either directly through an existing portal or indirectly through a series of portals. The first line of the input contains two integers, `n` (the number of cities) and `m` (the number of existing portals) where `1 ≤ n ≤ 1000` and `0 ≤ m ≤ 10000`. Each of the next `m` lines contains three integers `u`, `v`, and `w` (where `1 ≤ u, v ≤ n` and `1 ≤ w ≤ 10000`), describing a portal between city `u` and city `v` with transportation cost `w`. Output the minimum cost needed to connect all cities. If it is impossible to connect all cities, print `-1`. For example: Input: ``` 4 4 1 2 3 2 3 1 3 4 4 1 4 5 ``` Output: ``` 8 ``` Another example: Input: ``` 4 2 1 2 3 3 4 4 ``` Output: ``` -1 ```","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): edges.sort(key=lambda edge: edge[2]) parent = [i for i in range(n)] rank = [0] * n mst_cost = 0 edges_used = 0 for u, v, w in edges: root_u = find(parent, u - 1) root_v = find(parent, v - 1) if root_u != root_v: union(parent, rank, root_u, root_v) mst_cost += w edges_used += 1 if edges_used == n - 1: break return mst_cost if edges_used == n - 1 else -1 def minimum_cost_to_connect_cities(n, m, portals): return kruskal(n, portals)"},{"question":"Two professors from Hogwarts School of Witchcraft and Wizardry, Professor A, and Professor B, are in charge of distributing magical textbooks to students. They have a collection of N textbooks in their repository, each with a specific number of pages. They want to divide the textbooks into two groups, one for each professor, to balance the workload. The difficulty here is to make the sum of pages in the textbooks each professor receives as equal as possible. You need to help them find the minimum difference in pages between the two groups after the textbooks have been distributed. The first line contains an integer N (1 ≤ N ≤ 200) — the number of textbooks. The second line contains N integers, p1, p2, ..., pN (1 ≤ pi ≤ 1000) — the number of pages in each textbook. Output a single integer — the minimum possible difference in pages between the two groups. # Example Input ``` 5 10 20 15 5 25 ``` Output ``` 5 ``` # Explanation By dividing the textbooks this way: - Group 1: 10, 20, 15 (Total: 45) - Group 2: 5, 25 (Total: 30) The difference is abs(45 - 30) = 15, which can be optimized further to 5 by another possible partition. Note: This is a variation of the \\"Partition Problem\\" which is a well-known problem in computer science. A dynamic programming approach is commonly used to solve it efficiently within the given constraints.","solution":"def min_page_difference(N, pages): # Calculate the total sum of all pages total_sum = sum(pages) # Initialize a DP table dp = [False] * (total_sum // 2 + 1) dp[0] = True # Iterate over each book page count for page in pages: # Traverse the dp array from back to front to avoid overwriting for j in range(total_sum // 2, page - 1, -1): dp[j] = dp[j] or dp[j - page] # Find the largest j such that dp[j] is True for j in range(total_sum // 2, -1, -1): if dp[j]: return total_sum - 2 * j # Example usage: # N = 5 # pages = [10, 20, 15, 5, 25] # print(min_page_difference(N, pages)) # Output: 5"},{"question":"You are given an array of length n. You need to create a new array with the same length where each element at index i is the sum of all unique elements of the subarray from the start of the given array to the element at index i inclusive. Here\'s the formal definition: You have an array a consisting of n integers: a1, a2, ..., an. Create an array b of the same length such that b[i] is the sum of all unique elements in the subarray from a[1] to a[i]. The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output one line containing n integers b1, b2, ..., bn — the elements of the new array. For example: Input: 5 1 2 2 3 4 Output: 1 3 3 6 10 Explanation: - b[1] is the sum of unique elements in subarray [1], which is 1. - b[2] is the sum of unique elements in subarray [1, 2], which is 1 + 2 = 3. - b[3] is the sum of unique elements in subarray [1, 2, 2], which is still 1 + 2 = 3. - b[4] is the sum of unique elements in subarray [1, 2, 2, 3], which is 1 + 2 + 3 = 6. - b[5] is the sum of unique elements in subarray [1, 2, 2, 3, 4], which is 1 + 2 + 3 + 4 = 10.","solution":"def compute_sum_of_unique_elements(n, a): This function computes the sum of unique elements in the subarray from the start to each index i. Args: n -> length of the array a -> list of elements in the array Returns: list of sums of unique elements up to each index b = [] seen = set() unique_sum = 0 for i in range(n): if a[i] not in seen: unique_sum += a[i] seen.add(a[i]) b.append(unique_sum) return b"},{"question":"Alice is a huge fan of palindromic strings. A string is called palindromic if it reads the same forward and backward. Given a string s, Alice wants to prepend and/or append the minimum number of characters necessary to make it palindromic. Help Alice to find one of the shortest possible palindromic strings that can be formed by adding characters to the start and/or end of the given string. The input consists of a single line containing the string s (1 ≤ |s| ≤ 2·10⁵) composed of lowercase English letters. Print the shortest palindromic string formed by adding the minimum number of characters to the given string. If there are multiple solutions, you may output any of them. **Example:** ``` Input: abca Output: acbabca Input: a Output: a Input: abcd Output: dcbabcd ```","solution":"def make_palindromic(s): Returns the shortest palindromic string that can be formed by adding the minimum number of characters to the start and/or end of the given string. n = len(s) # Check if the string is already a palindrome if s == s[::-1]: return s # We need to find the maximum suffix which is a palindrome # We make use of the KMP (Knuth-Morris-Pratt) algorithm to efficiently find this suffix temp = s + \\"#\\" + s[::-1] lps = [0] * len(temp) for i in range(1, len(temp)): length = lps[i-1] while length > 0 and temp[i] != temp[length]: length = lps[length-1] if temp[i] == temp[length]: length += 1 lps[i] = length # The length of the suffix which is a palindrome suffix_pal_length = lps[-1] # Characters to be prepended to_prepend = s[suffix_pal_length:][::-1] # The shortest palindrome shortest_palindrome = to_prepend + s return shortest_palindrome"},{"question":"In a small town named Codeville, there are n computers connected by a network of cables. The town\'s administration wants to install a new software update on all the computers. However, due to the high security requirements, the software can only be directly transferred between computers connected by a dedicated cable. Additionally, the software provider charges burles per kilometer of cable used for transferring the software. The computers are indexed from 1 to n, and each cable i connects computers ai and bi and is li kilometers long. The software can be initially installed on any one computer for free, but then it has to be transferred to all other n - 1 computers using the existing network of cables. Given this, your task is to determine the minimum total cost needed to have the software installed on all computers. The town administration can choose any computer to initially receive the software but wants to minimize the total transfer cost. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of computers in Codeville. Each of the following n - 1 lines contains three integers ai, bi, and li (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ li ≤ 1,000) — the endpoints of the cable and its length in kilometers. Output one integer — the minimum total transfer cost of installing the software on all computers. # Example: **Input:** ``` 5 1 2 3 1 3 2 3 4 4 3 5 1 ``` **Output:** ``` 14 ``` # Explanation: In this example, we can install the software initially on computer 3. The total cost would then be: - 0 burles for initially installing on computer 3. - 2 burles to transfer from computer 3 to computer 1. - 4 burles to transfer from computer 3 to computer 4. - 1 burles to transfer from computer 3 to computer 5. - 3 burles to transfer from computer 1 to computer 2. The total cost is 14 burles, which is the minimum that can be achieved.","solution":"import heapq from collections import defaultdict def minimum_transfer_cost(n, connections): if n == 1: return 0 graph = defaultdict(list) for a, b, l in connections: graph[a].append((b, l)) graph[b].append((a, l)) def prim(start): min_cost = 0 visited = set() priority_queue = [(0, start)] while priority_queue: cost, node = heapq.heappop(priority_queue) if node not in visited: visited.add(node) min_cost += cost for neighbor, length in graph[node]: if neighbor not in visited: heapq.heappush(priority_queue, (length, neighbor)) return min_cost return prim(1) # Sample inputs to understand the function n = 5 connections = [ (1, 2, 3), (1, 3, 2), (3, 4, 4), (3, 5, 1) ] print(minimum_transfer_cost(n, connections)) # Output: 10"},{"question":"Alex is working on optimizing the storage of files in his data processing system. He has a certain number of files, and each file has a specific size in megabytes. The storage system has consecutive storage blocks, and each block has a fixed size. Alex wants to store all the files in the storage blocks such that the number of blocks used is minimized. However, Alex has a constraint: files cannot be split between blocks, meaning each file must be entirely placed in one block. Additionally, each block can only be partially filled if the remaining space is insufficient for the next file. Given the size of the storage blocks and the list of file sizes, determine the minimum number of storage blocks required to store all the files. **Input** The first line contains an integer B (1 ≤ B ≤ 10^6) — the size of each storage block in megabytes. The second line contains an integer n (1 ≤ n ≤ 10^5) — the number of files. The third line contains n integers, representing the sizes of the files in megabytes. Each size is a positive integer and no larger than B. **Output** Output a single integer, the minimum number of storage blocks required to store all the files. **Example** Input: ``` 10 6 7 4 2 8 1 3 ``` Output: ``` 3 ``` Explanation: - Block 1: File sizes 7, 3 (Total: 10 MB) - Block 2: File sizes 4, 2, 1 (Total: 7 MB) - Block 3: File size 8 (Total: 8 MB) Hence, a total of 3 storage blocks are required. **Details** To solve this problem, sort the list of file sizes in descending order and place each file in the first block that can accommodate it without exceeding the block size. Repeat the process until all files are stored. This greedy approach ensures a minimum number of blocks used.","solution":"def min_storage_blocks(B, n, file_sizes): Determines the minimum number of storage blocks required for the given file sizes. Args: B: int - size of each storage block in megabytes n: int - the number of files file_sizes: List[int] - the sizes of the files in megabytes Returns: int - the minimum number of storage blocks required to store all the files. # Sort files in descending order file_sizes.sort(reverse=True) blocks = [] # stores the current usage of each block for size in file_sizes: placed = False for i in range(len(blocks)): if blocks[i] + size <= B: # place the file in the current block if it fits blocks[i] += size placed = True break if not placed: # need a new block if the file doesn\'t fit in any existing block blocks.append(size) return len(blocks)"},{"question":"A programming contest is approaching, and you need to practice your competitive programming skills. To do so, you decide to solve a unique problem involving strings and data compression techniques. The problem is as follows: Given a string consisting of lowercase English letters, you need to compute its \\"compression value\\". The compression value of a string is defined as the length of the shortest possible string that can be generated by repeatedly applying the following operation: Find any two consecutive identical characters in the string and replace them with a single character that is next in the alphabetical order. Specifically, replace \'a\' with \'b\', \'b\' with \'c\', ..., and \'z\' with \'a\' (cycling back to the start). For example: - Applying the operation on \\"aa\\" results in \\"b\\". - Applying the operation on \\"cc\\" results in \\"d\\". - Applying the operation on \\"zz\\" results in \\"a\\". Write a program to calculate the compression value of a given string. # Input - The first line contains a single integer ( n ) (1 <= ( n ) <= ( 10^5 )), the length of the string. - The second line contains a string of length ( n ) consisting of lowercase English letters only. # Output - Output a single integer, the compression value of the string. # Example **Input:** ``` 6 aabaaa ``` **Output:** ``` 3 ``` **Explanation:** 1. \\"aabaaa\\" -> \\"abaaa\\" (compress \\"aa\\" to \\"b\\") 2. \\"abaaa\\" -> \\"abaa\\" (compress \\"aa\\" to \\"b\\") 3. \\"abaa\\" -> \\"aba\\" (compress \\"aa\\" to \\"b\\") Thus, the compression value of the string \\"aabaaa\\" is 3.","solution":"def compression_value(n, s): Returns the compression value of the given string by repeatedly compressing consecutive identical characters. # Edge cases for very small strings if n == 1: return 1 stack = [] for char in s: if stack and stack[-1] == char: # Get next character in alphabet next_char = chr(((ord(char) - ord(\'a\') + 1) % 26) + ord(\'a\')) stack.pop() # Merge the next character back to stack as it could create a new pair with its neighbor if stack and stack[-1] == next_char: # Continuously merge if the previous character is identical continue else: stack.append(next_char) else: stack.append(char) return len(stack)"},{"question":"You are given a sequence of n integers a1, a2, a3, ..., an (1 ≤ n ≤ 100, 0 ≤ ai ≤ 1,000,000). You need to perform a series of operations on the sequence to make all the integers equal. In one operation, you can choose any subset of the sequence and increment each element of this subset by 1. Your task is to determine the minimum number of operations required to make all the integers in the sequence equal. The first line contains an integer n (1 ≤ n ≤ 100) — the number of integers in the sequence. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1,000,000) — the elements of the sequence. Output a single integer — the minimum number of operations required to make all the integers in the sequence equal. # Example Input: ``` 4 1 2 3 4 ``` Output: ``` 3 ``` Explanation: In the first operation, increment the subset {1, 2, 3, 4} to get {2, 3, 4, 5}. In the second operation, increment the subset {2, 3, 4} to get {3, 4, 5, 5}. In the third operation, increment the subset {3, 4, 5} to get {4, 5, 5, 5} -> {5, 5, 5, 5} (all elements are now equal).","solution":"def min_operations_to_equal_elements(n, sequence): Returns the minimum number of operations required to make all the integers in the sequence equal. Parameters: - n: An integer representing the number of integers in the sequence. - sequence: A list of integers representing the sequence. Returns: - An integer representing the minimum number of operations required. max_value = max(sequence) min_value = min(sequence) return max_value - min_value"},{"question":"You are given an array of n integer numbers. You need to perform q queries of a specific type on the array. Each query asks you to calculate the sum of the numbers in a given subarray. The first line of the input contains two integers n and q (1 ≤ n, q ≤ 2·10^5). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), which are the elements of the array. Then q lines follow. Each of them contains two integer numbers li and ri (1 ≤ li ≤ ri ≤ n), representing the segment of the array [li, ri]. For each query, print the sum of the elements in the subarray [li, ri]. # Example Input ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 ``` Output ``` 6 9 15 ``` In the example above, the array has 5 elements, and there are 3 queries. The first query asks for the sum of the subarray from index 1 to 3, which is 1 + 2 + 3 = 6. The second query asks for the sum of the subarray from index 2 to 4, which is 2 + 3 + 4 = 9. The third query asks for the sum of the subarray from index 1 to 5, which is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def prefix_sum_array(arr): Create a prefix sum array for the given array. prefix_sum = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] return prefix_sum def sum_of_subarray(prefix_sum, l, r): Returns the sum of the subarray from index l to r (1-based index). return prefix_sum[r] - prefix_sum[l - 1] def process_queries(n, q, arr, queries): Process each query and return the results. prefix_sum = prefix_sum_array(arr) results = [] for query in queries: l, r = query result = sum_of_subarray(prefix_sum, l, r) results.append(result) return results"},{"question":"You are given a rectangular grid with R rows and C columns where each cell of the grid initially contains a value 0. Your task is to process a series of Q operations on this grid. Each operation can be one of the following types: 1. **Add Value**: Add a given value V to all elements in a specific rectangular subgrid. 2. **Set Value**: Set all elements in a specific rectangular subgrid to a given value V. 3. **Get Value**: Retrieve the value of a specific cell (r, c). You need to support the following types of queries: - `1 r1 c1 r2 c2 V` (Add V to all elements in subgrid from (r1, c1) to (r2, c2)). - `2 r1 c1 r2 c2 V` (Set all elements to V in subgrid from (r1, c1) to (r2, c2)). - `3 r c` (Retrieve the value of the element at (r, c)). Input: - The first line contains three integers R, C, and Q (1 <= R, C <= 1000, 1 <= Q <= 500000) — the number of rows, columns, and queries respectively. - The next Q lines describe the operations. Each operation is given in the format described above. It\'s guaranteed that for each operation: 1 <= r1 <= r2 <= R, 1 <= c1 <= c2 <= C, and 1 <= r, r2 <= R, 1 <= c, c2 <= C. Output: - For each \\"Get Value\\" operation, print the retrieved value on a new line. Example: Input: ``` 3 3 5 1 1 1 2 2 5 3 1 1 2 2 2 3 3 10 3 2 2 3 2 3 3 3 3 ``` Output: ``` 5 10 0 10 ``` Note: - After the first operation `1 1 1 2 2 5`, the grid will be: ``` 5 5 0 5 5 0 0 0 0 ``` - After the second operation `2 2 2 3 3 10`, the grid will be: ``` 5 5 0 5 10 10 0 10 10 ```","solution":"def create_grid(R, C): Creates a grid with specified rows and columns filled with zero. return [[0] * C for _ in range(R)] def add_value(grid, r1, c1, r2, c2, V): Adds a given value V to all elements in a specific rectangular subgrid. for r in range(r1 - 1, r2): for c in range(c1 - 1, c2): grid[r][c] += V def set_value(grid, r1, c1, r2, c2, V): Sets all elements in a specific rectangular subgrid to a given value V. for r in range(r1 - 1, r2): for c in range(c1 - 1, c2): grid[r][c] = V def get_value(grid, r, c): Retrieves the value of a specific cell (r, c). return grid[r - 1][c - 1] def process_queries(R, C, queries): Processes a list of queries on the grid. grid = create_grid(R, C) results = [] for query in queries: items = list(map(int, query.split())) if items[0] == 1: _, r1, c1, r2, c2, V = items add_value(grid, r1, c1, r2, c2, V) elif items[0] == 2: _, r1, c1, r2, c2, V = items set_value(grid, r1, c1, r2, c2, V) elif items[0] == 3: _, r, c = items results.append(get_value(grid, r, c)) return results"},{"question":"You are given an array of integers representing the heights of students lined up in a row. Your task is to find the maximum possible number of pairs of students such that their heights differ by at most a given value `k`. Each student can be part of at most one pair. The first line of input contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (0 ≤ k ≤ 10^9). The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 10^9) representing the heights of the students. Output the maximum number of such pairs. In the provided sample, the pairs that can be formed with the given `k = 2` are: - (1, 3) - (4, 5) - (6, 8) Input: ``` 6 2 1 3 4 5 6 8 ``` Output: ``` 3 ```","solution":"def max_pairs_with_height_diff(n, k, heights): Returns the maximum number of pairs of students such that their heights differ by at most k. :param n: Number of students. :param k: Maximum allowed height difference. :param heights: List of student heights. :return: Maximum number of pairs. heights.sort() i = 0 pairs = 0 while i < n - 1: if heights[i + 1] - heights[i] <= k: pairs += 1 i += 2 # Move to the next pair else: i += 1 # Check the next height for pairing return pairs"},{"question":"Suppose you have a set of servers that need to handle incoming requests with specific latencies. Each request has to be processed at a specific time, potentially by multiple servers if needed. You are given a list of servers, each with a maximum number of requests they can handle simultaneously, and a list of requests with their arrival times and the required processing time. Write a function that assigns the requests to the servers in such a way that all the requests are processed at their specified times. Each server can only process a request if it has enough capacity at the request\'s time. You are to output a boolean indicating whether it\'s possible to assign all the requests as specified. # Constraints: - `1 <= servers_count <= 1000` - `1 <= requests_count <= 100000` - Request times and server capacities are all non-negative integers. # Input Format: - The first line contains an integer, `servers_count` — the number of servers. - The second line contains `servers_count` integers where the ith integer indicates the maximum simultaneous requests that can be handled by the ith server. - The third line contains an integer, `requests_count` — the number of requests. - The fourth line contains `requests_count` integers, the ith integer is the time at which the ith request arrives. # Output Format: - Output a single boolean value — `True` if it\'s possible to assign all the requests to the servers, and `False` otherwise. # Example: Input: ``` 3 10 5 8 8 0 1 1 2 2 2 3 3 ``` Output: ``` True ``` Explanation: Given 3 servers with capacities [10, 5, 8] and 8 requests arriving at times [0, 1, 1, 2, 2, 2, 3, 3], it is possible to distribute these requests among the servers without any of them exceeding their maximum capacity for any given time. Thus, the output is `True`. Ensure your solution handles the edge cases and is optimal for the maximum input sizes.","solution":"def can_handle_all_requests(servers_count, server_capacities, requests_count, request_times): Determine if all requests can be processed by the servers within their capacities. Args: servers_count (int): The number of servers. server_capacities ([int]): List of integers indicating maximum simultaneous requests each server can handle. requests_count (int): The number of requests. request_times ([int]): List of integers indicating the times at which each request arrives. Returns: bool: True if all requests can be handled by the servers, False otherwise. from collections import Counter # Count how many requests are arriving at each time request_time_counts = Counter(request_times) # Get the total capacity of all servers combined total_capacity = sum(server_capacities) # Go through each unique request time and check if the combined server capacity can handle it for time in request_time_counts: if request_time_counts[time] > total_capacity: return False return True"},{"question":"Yamada has a collection of n antique vases, each with a certain volume. He wants to display these vases in his living room but needs to make sure that the sum of volumes of vases on the upper shelf is equal to the sum of volumes of vases on the lower shelf. However, the only constraint is that the difference in the number of vases between the two shelves should be at most one. If there are an odd number of vases, one of the shelves can have one more vase than the other. Given the volumes of the n vases, determine if it\'s possible to divide them in such a way that the above conditions hold true. The first line contains an integer n (1 ≤ n ≤ 100) — the number of vases. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 100), where vi is the volume of the i-th vase. Output \\"YES\\" (without the quotes) if it\'s possible to arrange the vases as required. Otherwise, print \\"NO\\" (without the quotes). In the first test sample, Yamada can place vases with volumes 1, 2, and 4 on the upper shelf, and vases with volumes 3 and 4 on the lower shelf. Both shelves will have a total volume of 7. In the second test sample, it\'s impossible to divide the vases as one shelf will always have a higher total volume.","solution":"def can_balance_shelves(n, volumes): total_volume = sum(volumes) # If the total volume is odd, it\'s impossible to split it evenly if total_volume % 2 != 0: return \\"NO\\" target = total_volume // 2 # Check for subset sum problem (DP approach) dp = [False] * (target + 1) dp[0] = True # zero volume is always achievable for volume in volumes: for j in range(target, volume - 1, -1): if dp[j - volume]: dp[j] = True return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"In an amusement park, there is a new game called \\"Color Switch\\". The game consists of n aisles, each containing m colored blocks in a row. Each block can be one of k different colors. You are given a matrix with n rows and m columns where each element is an integer between 1 and k representing the color of the block in that position. Your objective is to find the maximum number of blocks of the same color that one can get by selecting a contiguous submatrix (a rectangle). Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 100), representing the number of aisles, the number of blocks in each aisle, and the number of different colors, respectively. The next n lines each contain m integers, where the j-th number in the i-th line is the color of the block at position (i, j). Output Print a single integer: the maximum number of blocks of the same color that can be found in a contiguous submatrix. Example Input: 3 4 3 1 1 2 3 2 2 3 3 1 2 3 3 Output: 4 Explanation: The bottom right submatrix consisting of 2 rows and 2 columns has all blocks with the color 3, hence the answer is 4.","solution":"def max_contiguous_submatrix(matrix, n, m, k): max_blocks = 0 for color in range(1, k + 1): block_count = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if matrix[i][j] == color: block_count[i][j] = 1 if i > 0: block_count[i][j] += block_count[i - 1][j] for top in range(n): for bottom in range(top, n): width_count = {0: -1} width_sum = 0 for col in range(m): height = bottom - top + 1 if block_count[bottom][col] >= height: width_sum += 1 else: width_sum = 0 if width_sum > 0: max_blocks = max(max_blocks, width_sum * height) return max_blocks"},{"question":"You are given a string `s` consisting of English lowercase letters. Your task is to remove characters from the string such that the remaining characters form a palindrome. You need to find the minimum number of characters that need to be removed to achieve this. Format: The first line contains the integer `t`, the number of test cases. Each of the next `t` lines consists of a single string `s` (1 ≤ |s| ≤ 5000). Output: For each test case, output a single integer – the minimum number of characters that need to be removed to make the string a palindrome. Example: ``` Input: 2 abac abcd Output: 1 3 ``` Explanation: 1. For the first case, by removing \'b\' or \'c\', we can get a palindrome, such as \\"aca\\". 2. For the second case, removing \'a\', \'b\', and \'d\' leaves \'c\', which is a palindrome. The goal is to use dynamic programming to find the longest palindromic subsequence and subtract its length from the original string length to get the number of deletions required.","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of deletions required to make the string a palindrome. n = len(s) # Create a dp array to store the length of the longest palindromic subsequence dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Fill the dp array for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # Length of the longest palindromic subsequence lps = dp[0][n-1] # The minimum number of deletions to make the string a palindrome return n - lps"},{"question":"Anna has recently started learning about strings. Her favorite activity is to play with them by performing different operations. She now wants to find out the longest palindrome substring within a given string. Given a string s of length n (1 ≤ n ≤ 1000), determine the longest palindrome substring in s. A substring is a contiguous sequence of characters within a string. The first line of input contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a single string s of length n, consisting of lowercase letters. For each test case, output a single line containing the longest palindrome substring of s. If there are multiple such substrings of the maximum length, output the one that appears first in the string. Example: Input: 3 abaxyzzyxf banana ac Output: xyzzyx anana a","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in s. If there are multiple substrings of the maximum length, returns the first one. # Helper function to expand around the center def expand_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] max_palindrome = \\"\\" for i in range(len(s)): # Odd length palindromes: center at i pal1 = expand_center(i, i) # Even length palindromes: center between i and i+1 pal2 = expand_center(i, i + 1) # Update the result if we found a longer palindrome max_palindrome = max(max_palindrome, pal1, pal2, key=len) return max_palindrome def process_input(t, test_cases): Processes the input and returns the results for all test cases. results = [] for s in test_cases: results.append(longest_palindromic_substring(s)) return results"},{"question":"Given a grid of size n x m, initially filled with zeros. You have to answer q queries of the following types: 1. \\"I r c x\\" - Insert the value x at row r and column c. 2. \\"Q r1 c1 r2 c2\\" - Query the sum of the subgrid from (r1, c1) to (r2, c2), inclusive. The first line contains three integers n, m, q (1 ≤ n, m ≤ 500, 1 ≤ q ≤ 10^5). The next q lines contain the queries. Each query is of one of the two types mentioned above. For each query of type \\"Q\\", output the required sum. Example: Input: 5 5 6 I 1 1 4 I 2 2 5 I 3 3 6 Q 1 1 2 2 Q 1 1 3 3 Q 3 3 5 5 Output: 9 15 6 Note: - For the first query, the subgrid formed from (1,1) to (2,2) includes the cells (1,1), (1,2), (2,1), and (2,2). The sum is 4 (value at (1,1)) + 5 (value at (2,2)) = 9. - For the second query, the subgrid formed from (1,1) to (3,3) includes six cells: sum is 4 (value at (1,1)) + 5 (value at (2,2)) + 6 (value at (3,3)) = 15. - For the third query, the subgrid formed from (3,3) to (5,5) includes only the cell with value 6 at (3,3), so the sum is 6. Assume for all queries that: - 1 ≤ r, r1, r2 ≤ n - 1 ≤ c, c1, c2 ≤ m - |x| ≤ 1000","solution":"def process_operations(n, m, operations): grid = [[0] * m for _ in range(n)] def insert_value(r, c, x): grid[r-1][c-1] = x def query_sum(r1, c1, r2, c2): total_sum = 0 for i in range(r1-1, r2): for j in range(c1-1, c2): total_sum += grid[i][j] return total_sum results = [] for op in operations: parts = op.split() if parts[0] == \\"I\\": r, c, x = map(int, parts[1:]) insert_value(r, c, x) elif parts[0] == \\"Q\\": r1, c1, r2, c2 = map(int, parts[1:]) results.append(query_sum(r1, c1, r2, c2)) return results"},{"question":"You are tasked with designing an auditing system for a financial company. Your system should process a series of changes to client accounts and then produce a report based on the state of the accounts after processing all changes. Each change can be one of three types: 1. Deposit an amount of money into a specific account. 2. Withdraw an amount of money from a specific account, if the account has sufficient funds. 3. Generate a report of the current balance of a specific account. The system will handle multiple clients and each client\'s balance is managed separately. Given the initial balances of the clients and a series of changes, your task is to process these changes and generate the required reports. # Input - The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 10^5`) — the number of clients and the number of changes, respectively. - The second line contains `n` integers `b_1, b_2, ..., b_n` (`0 ≤ b_i ≤ 10^9`) — the initial balances of each client\'s account. - The next `m` lines describe the changes. Each line starts with an integer `t` indicating the type of change, followed by two integers `c` and `a`: - If `t = 1`, this indicates a deposit. The client `c` (`1 ≤ c ≤ n`) should receive an amount `a` (`1 ≤ a ≤ 10^9`). - If `t = 2`, this indicates a withdrawal. The client `c` (`1 ≤ c ≤ n`) should withdraw an amount `a` (`1 ≤ a ≤ 10^9`) if they have sufficient funds. - If `t = 3`, this indicates a report request. The system should output the current balance of client `c` (`1 ≤ c ≤ n`). # Output - For each report request (type `3`), output the current balance of the specified client\'s account. # Example Input: ``` 3 5 1000 500 2000 1 1 500 2 2 300 3 1 0 3 2 0 3 3 0 ``` Output: ``` 1500 200 2000 ``` # Explanation - Initially, the balances are [1000, 500, 2000]. - A deposit of 500 to client 1 makes his balance 1500. - A withdrawal of 300 from client 2 makes his balance 200. - Requesting balance for client 1 returns 1500. - Requesting balance for client 2 returns 200. - Requesting balance for client 3 returns 2000.","solution":"def audit_system(n, m, balances, changes): Processes account changes and outputs the account balance based on requested reports. Parameters: n (int): Number of clients. m (int): Number of changes. balances (List[int]): Initial balances for each client\'s account. changes (List[Tuple[int, int, int]]): List of changes to process. Each change is a tuple of (t, c, a). Returns: List[int]: List of resulting balances for each report request. results = [] for change in changes: t, c, a = change if t == 1: # Deposit balances[c - 1] += a elif t == 2: # Withdraw if balances[c - 1] >= a: balances[c - 1] -= a elif t == 3: # Report results.append(balances[c - 1]) return results"},{"question":"A new online bookstore has decided to arrange its books in a special way. Each book has a unique identifier and is associated with certain genres. The books are to be placed on a shelf such that each genre occupies a contiguous block of books. Given the number of books and their identifiers, and the list of genres each book belongs to, you are to help the bookstore arrange the books in such a manner that all books belonging to the same genre are contiguous on the shelf. The first line contains an integer n (1 leq n leq 10^5) — the number of books. The second line contains n integers b_1, b_2, ldots, b_n (1 leq b_i leq 10^9) — the identifiers of the books. The third line contains n integers g_1, g_2, ldots, g_n (1 leq g_i leq 10^5) — the genre associated with each book. Output the order of book identifiers in a single line, such that books of the same genre appear in contiguous blocks. If there are multiple valid arrangements, output any one of them. For example, with the input: ``` 7 10 20 30 40 50 60 70 2 1 2 3 1 3 2 ``` one possible output could be: ``` 20 50 10 30 70 40 60 ```","solution":"def arrange_books(n, book_ids, genres): from collections import defaultdict genre_dict = defaultdict(list) for i in range(n): genre_dict[genres[i]].append(book_ids[i]) result = [] for genre in sorted(genre_dict.keys()): result.extend(genre_dict[genre]) return result"},{"question":"You are given a list of transactions performed on a bank account. Each transaction is represented by a tuple (type, amount) where type is either \\"deposit\\" or \\"withdrawal\\" and amount is a positive integer indicating the transaction amount. Your task is to process these transactions and determine the final balance of the account. The initial balance of the account is given as an integer. If a withdrawal transaction would result in a negative balance, that withdrawal should be ignored and the balance should remain unchanged. Write a function `final_balance(initial_balance: int, transactions: List[Tuple[str, int]]) -> int` which computes the final balance of the account after processing all the transactions. # Input - An integer `initial_balance` (0 ≤ initial_balance ≤ 10^9) representing the initial account balance. - A list of tuples `transactions` where each tuple consists of: - A string `type` (\\"deposit\\" or \\"withdrawal\\"). - An integer `amount` (1 ≤ amount ≤ 10^6). # Output - An integer representing the final balance of the account. # Example ```python initial_balance = 1000 transactions = [(\\"deposit\\", 500), (\\"withdrawal\\", 1200), (\\"withdrawal\\", 200), (\\"deposit\\", 300)] print(final_balance(initial_balance, transactions)) # Output: 1600 ``` # Explanation - Starting with an initial balance of 1000. - First transaction: deposit 500 → New balance: 1500 - Second transaction: withdrawal 1200 → New balance: 300 - Third transaction: withdrawal 200 → New balance: 100 - Fourth transaction: deposit 300 → New balance: 400 In this case, the final balance would be 400.","solution":"def final_balance(initial_balance, transactions): Computes the final balance after processing a list of deposit and withdrawal transactions. Parameters: initial_balance (int): The initial balance of the account. transactions (list of tuples): A list of transactions where each tuple contains: - a string type (\\"deposit\\" or \\"withdrawal\\") - an integer amount Returns: int: The final balance after processing all transactions. balance = initial_balance for t_type, amount in transactions: if t_type == \\"deposit\\": balance += amount elif t_type == \\"withdrawal\\": if balance >= amount: balance -= amount return balance"},{"question":"Alicia enjoys playing with dominoes. She has a set of n dominoes, and each domino can be represented by a pair of integers (a, b) signifying the two numbers on the domino. In Alicia\'s game, she wants to arrange the dominoes end-to-end in a straight line so that the numbers match between consecutive dominoes. For example, a sequence of dominoes (1, 2), (2, 3), and (3, 4) is a valid arrangement. She also finds it fascinating to determine how many different arrangements are possible given her set of n dominoes. An arrangement is considered different if the sequence of dominoes or their orientation is different (e.g., (1, 2) followed by (2, 3) is different from (2, 1) followed by (1, 3)). Note that dominoes can be flipped, meaning (a, b) can also be (b, a) to fit into the sequence. The task is to count the number of distinct valid arrangements of Alicia\'s dominoes. Two arrangements are distinct if they differ either in the order of the dominoes or in the orientation of at least one domino. The first line contains a single integer n (1 ≤ n ≤ 100) - the number of dominoes. Each of the next n lines contains two integers a and b (0 ≤ a, b ≤ 6) – the two numbers on the domino. Print a single integer, the number of distinct valid arrangements of the dominoes. If there is no valid arrangement, print 0. # Example Input: ``` 3 1 2 2 3 3 4 ``` Output: ``` 1 ``` Input: ``` 2 1 2 3 4 ``` Output: ``` 0 ``` # Explanation In the first example, there is only one way to arrange the dominoes: (1, 2), (2, 3), (3, 4). In the second example, there is no valid way to arrange the dominoes end-to-end since the numbers do not match.","solution":"def count_valid_arrangements(n, dominos): from collections import defaultdict, Counter from itertools import permutations def is_valid_sequence(sequence): for i in range(len(sequence) - 1): if sequence[i][1] != sequence[i + 1][0]: return False return True edges = defaultdict(list) for a, b in dominos: edges[a].append(b) edges[b].append(a) start_nodes = [node for node, connections in edges.items() if len(connections) % 2 == 1] if len(start_nodes) not in [0, 2]: return 0 domino_counter = Counter((min(a, b), max(a, b)) for a, b in dominos) def count_permutations(): unique_dominos = list(domino_counter.elements()) valid_permutations = 0 for permutation in permutations(unique_dominos): if is_valid_sequence(permutation): valid_permutations += 1 return valid_permutations return count_permutations() # Testing with provided examples print(count_valid_arrangements(3, [(1, 2), (2, 3), (3, 4)])) # Expected output: 1 print(count_valid_arrangements(2, [(1, 2), (3, 4)])) # Expected output: 0"},{"question":"A software company is developing a new file storage system where each file is represented as a unique string of lowercase English letters. Each file needs to be stored in a directory named based on a characteristic of the filename. The developers have decided that the files should be stored in directories such that each directory contains files with filenames that form palindromes when concatenated together in some order. As an initial step, they need to determine if a given list of filenames can be rearranged to form one or more directories, where each directory\'s files concatenated in some order form a palindrome. Your task is to write a function that determines if it is possible to rearrange the list of filenames into one or more directories that meet the above requirement. # Input Format - The first line contains an integer n (1 leq n leq 1000): the number of filenames. - Each of the next n lines contains a string s_i (1 leq |s_i| leq 100): a filename containing only lowercase English letters. # Output Format - Print \\"YES\\" if the filenames can be rearranged into one or more directories where every directory\'s concatenated filenames form a palindrome. - Print \\"NO\\" otherwise. # Example Input ``` 4 abc cba bcc ccb ``` Output ``` YES ``` Input ``` 3 abc def ghi ``` Output ``` NO ``` # Explanation In the first example, we can rearrange the filenames as [\\"abc\\", \\"cba\\"] and [\\"bcc\\", \\"ccb\\"], and both form palindromes: \\"abccba\\" and \\"bccccb\\".","solution":"def can_form_palindrome_directories(filenames): from collections import Counter def is_palindrome_possible(counter): odd_count = sum(v % 2 for v in counter.values()) return odd_count <= 1 overall_counter = Counter() for filename in filenames: overall_counter.update(filename) if is_palindrome_possible(overall_counter): return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers arr of size n, you are allowed to perform the following operation any number of times (including zero): - Choose any two consecutive elements arr[i] and arr[i+1] (1 ≤ i < n) and replace them with their product modulo 10^9 + 7. Your task is to find the minimum possible sum of the array after performing the operation any number of times. # Input The first line contains an integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains an integer n (1 le n le 100) — the size of the array. The second line of each test case contains n integers arr_1, arr_2, ldots, arr_n (1 le arr_i le 10^9). # Output For each test case, print a single integer — the minimum possible sum of the array after performing the operations. # Example Input ``` 2 3 1 2 3 4 4 3 2 1 ``` Output ``` 1 1 ``` # Explanation In the first test case, you can choose elements 1 and 2 and replace them with their product (1 cdot 2) % (10^9+7) = 2. Then choose elements 2 and 3 and replace them with their product (2 cdot 3) % (10^9+7) = 6. The array becomes [6] and the sum is 6, so you can keep reducing it until it becomes a single element 1. In the second test case, you can choose elements 4 and 3 and replace them with their product (4 cdot 3) % (10^9+7) = 12. You continue this process until the array is [1], since 1 is the smallest product possible and you\'ll keep multiplying down to 1.","solution":"def minimum_possible_sum(t, test_cases): Returns the minimum possible sum of the arrays after performing the operations. Parameters: t (int): Number of test cases test_cases (list): List of tuples where each tuple contains (n, arr) Returns: list: List of minimum sums for each test case results = [] for i in range(t): n, arr = test_cases[i] if n == 1: results.append(arr[0]) else: results.append(1) # Because any array can always be reduced to a product of 1. return results"},{"question":"A company employs n workers and each worker is assigned a specific task. The company has two locations, and each worker can perform their task at either location. The cost of performing a task at location 1 is different from the cost of performing the same task at location 2. Given the costs for each task at both locations, the company wants to minimize the total cost. Each worker must go to exactly one of the two locations to complete their task. The first line contains an integer n (1 ≤ n ≤ 105) — the number of workers. The second line contains n space-separated integers c1, c2, ..., cn (1 ≤ ci ≤ 1000) — the cost for each worker to perform their task at location 1. The third line contains n space-separated integers d1, d2, ..., dn (1 ≤ di ≤ 1000) — the cost for each worker to perform their task at location 2. Print one integer — the minimum total cost for the company to complete all tasks. # Example Input: ``` 3 10 20 30 5 25 15 ``` Output: ``` 30 ``` Explanation: The company should assign the first worker to location 2 (cost = 5), the second worker to location 1 (cost = 20), and the third worker to location 2 (cost = 15). The total cost is 5 + 20 + 15 = 40. This is the minimum total cost the company can achieve.","solution":"def min_total_cost(costs_location1, costs_location2): Given the costs for each task at both locations, this function calculates the minimum total cost. costs_location1: List[int] -> List of costs for each worker at location 1. costs_location2: List[int] -> List of costs for each worker at location 2. Returns: int -> Minimum total cost. # Compare the cost of each location for each worker and take the minimum total_cost = 0 n = len(costs_location1) for i in range(n): total_cost += min(costs_location1[i], costs_location2[i]) return total_cost"},{"question":"You are organizing a marathon, and you need to determine if it\'s possible to finish setting up all the checkpoints before the runners reach them. There are n checkpoints placed along a straight road, and a setup team is responsible for completing the setup for each checkpoint. Each checkpoint has a setup time and a distance from the start line. You need to decide the order in which the setup team should work on the checkpoints to ensure that each checkpoint is ready by the time the runners arrive. The runners can run at a constant speed of 1 unit per second and they start from the coordinate 0. The setup team starts from the coordinate 0 and can move at a speed of 2 units per second. However, when setting up a checkpoint, the setup team is stationary and setup takes a predefined amount of time for each checkpoint. You need to determine if there exists an order in which the setup team can finish setting up all the checkpoints before the runners reach them. If it is possible, return \\"YES\\", otherwise return \\"NO\\". The first line contains one integer n (1 le n le 2 cdot 10^5) — the number of checkpoints. The second line contains n integers d_1, d_2, dots, d_n (1 le d_i < d_{i+1} le 2 cdot 10^5), where d_i is the distance of the i-th checkpoint from the start. The third line contains n integers t_1, t_2, dots, t_n (1 le t_i le 2 cdot 10^5), where t_i is the time required to set up the i-th checkpoint. Output \\"YES\\" if it is possible for the setup team to finish setting up all checkpoints before the runners reach them, otherwise output \\"NO\\". # Example Input ``` 3 10 20 30 5 10 5 ``` Output ``` YES ``` Input ``` 3 5 15 25 10 5 10 ``` Output ``` NO ```","solution":"def can_setup_checkpoints(n, distances, times): # Calculate the time runners arrive at each checkpoint runner_time = distances # Calculate the total time when the setup team can setup a particular checkpoint setup_team_time = [] total_moving_time = 0 for i in range(n): setup_team_time.append(total_moving_time + times[i]) if i != n-1: total_moving_time += (distances[i+1] - distances[i])/2 # Compare each runner\'s arrival time with the corresponding setup completion time for i in range(n): if setup_team_time[i] >= runner_time[i]: return \\"NO\\" return \\"YES\\" # Input section def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) distances = list(map(int, data[1:1+n])) times = list(map(int, data[1+n:1+2*n])) result = can_setup_checkpoints(n, distances, times) print(result)"},{"question":"You are given an array a consisting of n integers. Your task is to find a subarray of the given array such that the sum of the elements in the subarray is equal to a given integer s. If such a subarray exists, print the start and end indices (1-based) of the subarray. If there are multiple such subarrays, you can print the indices of any one of them. If no such subarray exists, print -1. A subarray is a contiguous part of an array. The first line contains two integers n (1 leq n leq 1000) and s (-10^9 leq s leq 10^9) — the length of the array and the target sum. The second line contains n integers a_1, a_2, ldots, a_n (-10^6 leq a_i leq 10^6) — the elements of the array. Print two integers, the starting and ending index of the subarray (both indices inclusive and 1-based). If multiple solutions exist, print any of them. If no solution exists, print -1. # Example **Input:** ``` 5 12 1 2 3 7 5 ``` **Output:** ``` 2 4 ``` **Input:** ``` 5 100 1 2 3 7 5 ``` **Output:** ``` -1 ```","solution":"def find_subarray_with_sum(arr, target_sum): n = len(arr) curr_sum = 0 start = 0 # Dictionary to store the cumulative sum up to all the indices sum_dict = {} for end in range(n): curr_sum += arr[end] if curr_sum == target_sum: return start + 1, end + 1 if (curr_sum - target_sum) in sum_dict: return sum_dict[curr_sum - target_sum] + 2, end + 1 sum_dict[curr_sum] = end return -1"},{"question":"In a mountainous region, there is a pipeline network consisting of several pipeline segments connected end-to-end. Each segment can have one of three elevations: Low (L), Medium (M), or High (H). Water can only flow from a segment of equal or lower elevation to the next segment. For example, water can flow from Low to Low, Medium, or High, from Medium to Medium or Low, but not from Medium to High. Your task is to determine if the water starting from the first segment can reach the last segment and print \\"YES\\" if it is possible, otherwise print \\"NO\\". The first line contains an integer `n` (1 leq n leq 10^5) — the number of segments in the pipeline. The second line contains a string of length `n`, where each character represents the elevation of the corresponding segment (`L`, `M`, or `H`). Print \\"YES\\" if the water can flow from the first to the last segment, otherwise print \\"NO\\". Example: Input: 6 LMHMLH Output: NO In this example, the water cannot flow from the first to the last segment due to the inability to flow from Medium to High in the 3rd segment. Input: 5 LLMMM Output: YES In this example, the water can flow through all segments.","solution":"def can_water_flow(n, elevations): Determines if water can flow from the first to the last segment of the pipeline. Parameters: n (int): Number of segments in the pipeline. elevations (str): A string representing the elevations of the segments (\'L\', \'M\', \'H\'). Returns: str: \\"YES\\" if water can flow from the first to the last segment, otherwise \\"NO\\". # Iterate through the segments from the first to the second last for i in range(n - 1): if (elevations[i] == \'M\' and elevations[i + 1] == \'H\') or (elevations[i] == \'H\' and elevations[i + 1] in [\'M\', \'L\']): return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers where each integer represents the height of a vertical line on a graph. Each pair of vertical lines, along with the x-axis, forms a container. The task is to find two lines, which, together with the x-axis, forms the container that would hold the maximum amount of water. Write a program that takes as input an array of non-negative integers and outputs the maximum area of water the container can hold. The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of lines in the array. The second line contains n space-separated integers h_1, h_2, ..., h_n (0 ≤ h_i ≤ 10^4) where h_i is the height of the i-th line. Output a single integer — the maximum amount of water that can be held by one container formed between any two lines. # Example Input ``` 9 1 8 6 2 5 4 8 3 7 ``` Output ``` 49 ``` In this example, the vertical lines are heights [1, 8, 6, 2, 5, 4, 8, 3, 7]. The maximum area of water that the container can hold is 49, formed by selecting the lines of height 8 (position 2) and height 7 (position 9), which are 7 units apart.","solution":"def max_area(heights): Returns the maximum area of water that can be held by the container formed by any two lines. :param heights: List of integers representing the heights of vertical lines. :return: The maximum area of water that can be contained. left = 0 right = len(heights) - 1 max_area = 0 while left < right: # Calculate the width between the two lines width = right - left # Find the shorter line\'s height height = min(heights[left], heights[right]) # Calculate the area area = width * height # Update the max_area if the current area is larger max_area = max(max_area, area) # Move the pointers if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"Sam is organizing a tournament in which participants score points by solving questions. Each participant’s performance in the tournament is represented by an array of integers, where each integer corresponds to the score received for a specific question. The goal is to determine if there exists a subset of participants whose total combined score equals exactly S. If such a subset exists, return \\"YES\\", otherwise return \\"NO\\". The input consists of multiple test cases. Each test case starts with two integers N and S, where N is the number of participants and S is the target score. The second line contains N integers representing the scores of the participants. The output should be \\"YES\\" if there is a subset of participants with a combined score of exactly S, otherwise, output \\"NO\\". Each test case should be processed separately. # Input - The first line of input contains T, the number of test cases. - The following lines contain the details for each test case: - The first line contains two integers N and S. - The second line contains N integers, the scores of the participants. # Output For each test case, output \\"YES\\" or \\"NO\\" on a new line. # Constraints - 1 ≤ T ≤ 30 - 1 ≤ N ≤ 20 - 0 ≤ S ≤ 1000 - 0 ≤ score of each participant ≤ 100 # Example Input ``` 2 3 10 1 2 3 5 10 2 3 7 8 10 ``` Output ``` NO YES ``` In the first sample case, there is no subset of scores [1, 2, 3] that sums up to 10. In the second sample case, the subset [2, 3, 5] sums up to 10, hence the output is \\"YES\\".","solution":"def subset_sum_exists(scores, target): Helper function to determine if a subset with a given sum exists. Uses a dynamic programming approach. n = len(scores) dp = [[False for _ in range(target + 1)] for _ in range(n + 1)] # There is always a subset with sum = 0, the empty subset. for i in range(n + 1): dp[i][0] = True # Fill the dp table for i in range(1, n + 1): for j in range(1, target + 1): if scores[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-scores[i-1]] else: dp[i][j] = dp[i-1][j] return dp[n][target] def tournament_result(test_cases): Processes multiple test cases to determine the result for each. results = [] for N, S, scores in test_cases: if subset_sum_exists(scores, S): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers and a sequence of operations. Each operation consists of replacing all occurrences of a given integer with another integer. You are required to process these operations and return the modified array. More formally, you have an array `a` of length `n` and `m` operations. Each operation is described by two integers `x` and `y` which means that in the array `a`, all occurrences of `x` should be replaced with `y`. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of elements in the array and the number of operations. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 1000) — the elements of the array. Each of the next `m` lines contains two integers `x` and `y` (1 ≤ x, y ≤ 1000) — the parameters of each operation. It is guaranteed that `x` will be present in the array during the execution of the operation. Print the modified array on a single line, with the elements separated by spaces. # Example Input ``` 5 3 1 2 2 3 4 2 5 3 6 1 4 ``` Output ``` 4 5 5 6 4 ``` Explanation - Initially, the array is [1, 2, 2, 3, 4]. - After the first operation, it becomes [1, 5, 5, 3, 4]. - After the second operation, it becomes [1, 5, 5, 6, 4]. - After the third operation, it becomes [4, 5, 5, 6, 4].","solution":"def modify_array(n, m, array, operations): for x, y in operations: array = [y if element == x else element for element in array] return array"},{"question":"You are given an array a consisting of n integers. In one operation, you can select any two adjacent elements and swap them. Your goal is to sort the array in non-decreasing order. Calculate the minimum number of swaps required to sort the array. The first line of the input contains one integer n (1 le n le 10^5) — the number of elements in the array. The second line of the input contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), where a_i is the i-th element of the array. Output a single integer, the minimum number of swaps required to sort the array in non-decreasing order.","solution":"def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all remaining elements # in the left subarray (arr[i], arr[i+1], ..., arr[mid]) are greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def minimum_swaps_to_sort(arr): n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n-1)"},{"question":"The annual science fair is around the corner, and one of the attractions is a giant digital clock that showcases interesting patterns based on the current time. Your task is to determine whether a given time forms a palindromic pattern. A palindromic time reads the same forwards and backwards when written in a 24-hour format (hh:mm). For instance, 12:21 is a palindromic time but 13:14 is not. You need to write a program that takes a time string in the format \\"hh:mm\\", and checks if it forms a palindrome. The input consists of a single string representing the time in the format \\"hh:mm\\", where \\"hh\\" is a two-digit hour and \\"mm\\" is a two-digit minute (00 ≤ hh < 24, 00 ≤ mm < 60). Print \\"YES\\" if the given time is palindromic, otherwise print \\"NO\\". For example: - Input: \\"21:12\\" - Output: \\"YES\\" - Input: \\"23:32\\" - Output: \\"YES\\" - Input: \\"12:34\\" - Output: \\"NO\\"","solution":"def is_palindromic_time(time_str): Check if the given time in 24-hour format \'hh:mm\' is palindromic. :param time_str: time in \'hh:mm\' format :return: \'YES\' if the time is palindromic, \'NO\' otherwise return \\"YES\\" if time_str == time_str[::-1] else \\"NO\\""},{"question":"You are given an integer array consisting of n elements. You can perform various operations on this array. One such operation is to select a sub-array of length 2 or greater and reverse it. Your goal is to sort the entire array in non-decreasing order using the minimum number of such operations. Determine the minimum number of operations required to sort the array. The first line of input contains a single integer t (1 le t le 100) — the number of testcases. The first line of each testcase contains an integer n (2 le n le 100) — the number of elements in the array. The second line of each testcase contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000) — the given array. Print t integers — for each testcase output the minimum number of reverse operations needed to sort the entire array. For example, if the input array is [4, 3, 2, 1], you can sort the array in one operation by reversing the entire array to get [1, 2, 3, 4]. In another example, if the input array is [3, 1, 2, 4], a minimum of 2 operations are needed: reverse sub-array [3, 1] to get [1, 3, 2, 4], and then reverse sub-array [3, 2] to get [1, 2, 3, 4].","solution":"def min_operations_to_sort(n, arr): Determine the minimum operations needed to sort the array by reversing sub-arrays of length 2 or more. sorted_arr = sorted(arr) # Check if the array is already sorted if arr == sorted_arr: return 0 l, r = 0, n - 1 # Find the first position \'l\' from the left where the array is not sorted while l < n and arr[l] == sorted_arr[l]: l += 1 # Find the first position \'r\' from the right where the array is not sorted while r >= 0 and arr[r] == sorted_arr[r]: r -= 1 # Reverse the subarray from l to r subarray = arr[l:r+1] if subarray == sorted_arr[l:r+1][::-1]: return 1 return 2 def minimum_operations(t, test_cases): results = [] for n, arr in test_cases: results.append(min_operations_to_sort(n, arr)) return results"},{"question":"Arkady got a string consisting of lowercase English letters as a gift. Arkady decides to modify the string in such a way that no same characters appear consecutively in the resulting string. In order to achieve this, Arkady can replace some characters of the string. Each replacement operation consists of changing one letter to any other lowercase English letter. Help Arkady determine the minimum number of replacement operations required to achieve his goal. The first line of input contains a single integer n (1 le n le 1000) — the length of the string. The second line of input contains a string s of length n, consisting of lowercase English letters. Print a single integer — the minimum number of replacement operations needed so that no two adjacent characters in the resulting string are the same. # Example Input ``` 5 aabba ``` Output ``` 2 ``` Explanation: One possible resulting string is \\"ababx\\" where \'x\' is any letter other than \'a\' or \'b\', obtained by replacing the second \'a\' and the fourth \'a\' with \'b\' and \'x\'. In another case: Input ``` 3 abc ``` Output ``` 0 ``` Explanation: The string \\"abc\\" already has no two adjacent characters that are the same. No replacements are needed.","solution":"def min_replacements_to_prevent_consecutive_duplicates(n, s): Given the length of the string `n` and the string `s`, this function returns the minimum number of replacement operations needed so that no two adjacent characters in the resulting string are the same. if n == 1: return 0 replacements = 0 for i in range(1, n): if s[i] == s[i - 1]: replacements += 1 return replacements"},{"question":"The city of Byteville decided to host an annual programming competition at one of their famous byte towers. The tower is represented by a string consisting of lowercase Latin letters. Each team participating in the competition is assigned a unique substring of the tower\'s name. However, due to the high number of teams, the event organizers want to avoid assigning the same substring to multiple teams. Your task is to determine the number of unique substrings of the tower\'s name. The first line contains a single integer t (1 leq t leq 10) — the number of test cases. Each of the next t lines contains a single string s (1 leq |s| leq 1000) — the name of the tower. For each test case, print a single integer — the number of unique substrings of the name of the tower. Example: Input: ``` 3 abc aaa abcde ``` Output: ``` 6 3 15 ``` Explanation: In the first example, the substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". In the second example, the substrings are \\"a\\", \\"aa\\", \\"aaa\\". In the third example, the substrings are \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"de\\", \\"abc\\", \\"bcd\\", \\"cde\\", \\"abcd\\", \\"bcde\\", \\"abcde\\".","solution":"def count_unique_substrings(s): Returns the count of unique substrings of the given string s. unique_substrings = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): unique_substrings.add(s[i:j]) return len(unique_substrings) def count_unique_substrings_multiple_cases(test_cases): Accepts a list of strings (test_cases) and returns a list of counts of unique substrings for each string. results = [] for s in test_cases: results.append(count_unique_substrings(s)) return results"},{"question":"A company has set up a COVID-19 screening facility where people need to pass through a thermal detection system one by one. Each person has a body temperature when they arrive at the facility. Based on the body temperature readings, the system either allows them to pass or directs them for further medical check-up. The system has rules to identify normal and abnormal temperatures: - A normal temperature is within the range of 97.0°F to 99.0°F (both inclusive). - An abnormal temperature is any temperature outside this range. You are given the list of temperatures recorded for each person entering the screening facility in the order they arrived. Your task is to analyze the data and determine: 1. How many people passed through the detection system without being directed for further medical check-up (i.e., how many had normal temperatures). 2. The index of the first person (1-based) who had an abnormal temperature. If everyone has a normal temperature, output -1. The first line of the input contains an integer n (1le n le 1000) — the total number of people screened. The second line contains n floating-point numbers separated by space, which represents the temperatures recorded for each person. Output two integers: 1. The number of people with normal temperatures. 2. The index of the first person with an abnormal temperature (1-based). If no person has an abnormal temperature, print -1. # Example Input ``` 5 97.5 98.6 99.1 97.0 96.8 ``` Output ``` 3 3 ``` Explanation - There are 3 people with normal temperatures: 97.5, 98.6, and 97.0. - The third person has an abnormal temperature of 99.1, so the second number in the output is 3.","solution":"def analyze_temperatures(n, temperatures): normal_count = 0 first_abnormal_index = -1 for i, temp in enumerate(temperatures): if 97.0 <= temp <= 99.0: normal_count += 1 elif first_abnormal_index == -1: first_abnormal_index = i + 1 return normal_count, first_abnormal_index"},{"question":"In a magical forest, there are (n) enchanted trees in a straight line, each identified uniquely as a number from 1 to (n). Due to a recent storm, the spirits of these trees have been displaced and each tree is currently inhabited by another tree\'s spirit. Each tree (i) has a spirit labeled (a_i), where (a_i) denotes the tree (i) currently housing the spirit of tree (a_i). The forest keeper needs to restore the spirits to their original trees. To achieve this, the keeper can perform the following operation any number of times: select two different trees (i) and (j) and swap the spirits between them, meaning the spirit of tree (i) goes to tree (j) and the spirit of tree (j) goes to tree (i). You need to determine if it is possible to restore all the spirits to their original trees using the allowed operations. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". # Input The first line contains a single integer (n) (1 ≤ (n) ≤ 200,000) — the number of trees. The second line contains (n) space-separated integers (a_1, a_2, ldots, a_n) (1 ≤ (a_i) ≤ (n)) — the current arrangement of spirits in the trees. It is guaranteed that all integers from 1 to (n) will appear exactly once in the sequence (a). # Output Print \\"YES\\" if it is possible to restore all spirits to their original trees, otherwise print \\"NO\\". # Example Input: ``` 5 2 1 5 3 4 ``` Output: ``` YES ``` Explanation: The spirits can be restored by performing the following swaps: 1. Swap spirits between tree 1 and tree 2 → [1, 2, 5, 3, 4] 2. Now, only spirits of trees 3 and 5 are misplaced: - Swap spirits between tree 3 and tree 5 → [1, 2, 4, 3, 5] - Swap spirits between tree 3 and tree 4 → [1, 2, 5, 4, 3] - Swap spirits between tree 3 and tree 5 → [1, 2, 3, 5, 4] - Swap spirits between tree 4 and tree 5 → [1, 2, 3, 4, 5] Thus, it is possible to restore all the spirits to their original trees.","solution":"def can_restore_spirits(n, a): visited = [False] * (n + 1) def dfs(i): stack = [i] while stack: node = stack.pop() if not visited[node]: visited[node] = True stack.append(a[node - 1]) for i in range(1, n + 1): if not visited[i]: dfs(i) return \\"YES\\" if all(visited[1:]) else \\"NO\\""},{"question":"You are given an array of integers representing the initial energy levels of some hackers. Each hacker starts hacking with a certain energy level and drains a certain amount of energy per minute while hacking. The problem is to find the minimum time required such that any hacker can finish their hacking without running out of energy. In more detail: initially, you are given the energy levels of n hackers as an array of integers. You are also given another array that represents the energy drain per minute for each hacker. The energy of a hacker at minute t can be calculated as `initial_energy - drain_per_minute * t`. A hacker can continue hacking as long as their energy is greater than zero. Given the initial energy levels and the energy drain per minute for each hacker, compute the minimum time in minutes before the first hacker runs out of energy. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100) — the number of hackers. - The second line contains `n` integers, where the i-th integer represents the initial energy of the i-th hacker. - The third line contains `n` integers, where the i-th integer represents the energy drain per minute for the i-th hacker. # Output - Print a single integer — the minimum time in minutes before the first hacker runs out of energy. # Note The output should be a non-negative integer indicating the earliest minute at which any hacker will run out of energy. # Example Input ``` 3 10 20 15 2 3 1 ``` Output ``` 5 ``` Explanation - For the first hacker, the energy levels over time are 10, 8, 6, 4, 2, 0. The first hacker runs out of energy at 5 minutes. - For the second hacker, the energy levels over time are 20, 17, 14, 11, 8, 5, 2, -1. The second hacker runs out of energy at 7 minutes. - For the third hacker, the energy levels over time are 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0. The third hacker runs out of energy at 15 minutes. - Therefore, the minimum time before any hacker runs out of energy is 5 minutes.","solution":"def minimum_time_to_zero_energy(n, initial_energy, drain_per_minute): Computes the minimum time in minutes before any hacker runs out of energy. Parameters: n (int): Number of hackers. initial_energy (list of int): The initial energy of each hacker. drain_per_minute (list of int): The energy drain per minute for each hacker. Returns: int: The minimum time in minutes before the first hacker runs out of energy. min_time = float(\'inf\') for i in range(n): time_to_zero = initial_energy[i] // drain_per_minute[i] if time_to_zero < min_time: min_time = time_to_zero return min_time"},{"question":"A publishing house is trying to manage its book printing process more efficiently. The printing press can print multiple pages simultaneously but can only handle a certain maximum load of pages at once. Each book consists of a certain number of pages, and you are given an array representing the number of pages in each book. The press can handle up to a certain number of pages at a time, and you need to determine the minimum number of rounds required to print all the books. In one round, the printing press can print as many books as possible without exceeding the maximum load of pages it can handle simultaneously. Write an algorithm that finds the minimum number of rounds required to print all the books. The first line of input contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^9) — the number of books and the maximum load in pages the printing press can handle. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the number of pages in each book. Print the minimum number of rounds required to print all the books. Example: Input: 5 10 3 3 4 5 6 Output: 3 Explanation: - In the first round, you can print books with 3 pages, 3 pages, and 4 pages (total 10 pages). - In the second round, you can print the book with 5 pages. - In the third round, you can print the book with 6 pages.","solution":"def min_rounds_to_print_books(n, m, pages): Returns the minimum number of rounds needed to print all books. Parameters: n (int): Number of books. m (int): Maximum load the printing press can handle. pages (list of int): Number of pages in each book. Returns: int: Minimum number of rounds required to print the books. rounds = 0 curr_load = 0 for page in pages: if curr_load + page > m: rounds += 1 curr_load = page else: curr_load += page if curr_load > 0: rounds += 1 return rounds # Example input data n = 5 m = 10 pages = [3, 3, 4, 5, 6] # Example function call print(min_rounds_to_print_books(n, m, pages)) # Expected output: 3"},{"question":"Susan loves juggling words and came up with an interesting challenge for her friends. The challenge involves manipulating a string in a fun way. Given a string containing only letters (both uppercase and lowercase), you are required to perform the following operations: 1. Reverse the string. 2. Swap the case of each letter in the reversed string. For example, if the given string is \\"HelloWorld\\", after reversing, it becomes \\"dlroWolleH\\", and after swapping the case, it becomes \\"DLROwOLLEh\\". You need to write a program that reads the input string, performs the above operations, and outputs the final transformed string. # Input: - The input contains a single line with a string ( s ) ((1 leq |s| leq 10^5)) consisting only of uppercase and lowercase English letters. # Output: - Output the transformed string after reversing and swapping the case. # Example: Input: ``` HelloWorld ``` Output: ``` DLROwOLLEh ``` # Note: In this example, \\"HelloWorld\\" is first reversed to \\"dlroWolleH\\" and then case-swapped to \\"DLROwOLLEh\\". Be mindful of the efficiency, as the input string can be quite large.","solution":"def transform_string(s): Reverses the input string and swaps the case of each letter. Parameters: s (str): Input string containing only uppercase and lowercase English letters. Returns: str: Transformed string after reversing and swapping the case of each letter. return s[::-1].swapcase()"},{"question":"You are given a grid of size n times m, initially filled with zeros. You can perform the following operation on the grid: choose any subgrid and add a given integer to each element of that subgrid. After all the operations are performed, find the minimum possible maximum value of any cell and the maximum possible minimum value of any cell in the grid. Input - The first line contains two integers n and m (1 le n, m leq 100) — the dimensions of the grid. - The second line contains a single integer q (1 leq q leq 10^4) — the number of operations. - Each of the next q lines contains five integers x_1, y_1, x_2, y_2, and v (1 leq x_1 leq x_2 leq n, 1 leq y_1 leq y_2 leq m, 1 leq v leq 10^4): adding integer v to the subgrid with top-left corner (x_1, y_1) and bottom-right corner (x_2, y_2). Output - Print two integers a and b — the minimum possible maximum value of any cell and the maximum possible minimum value of any cell in the grid after performing all the operations in the optimal way. Example # Input ``` 3 3 3 1 1 2 2 5 2 2 3 3 3 1 1 3 3 1 ``` # Output ``` 9 3 ``` Explanation In the example above, the grid initially is: ``` 0 0 0 0 0 0 0 0 0 ``` After the first operation: ``` 5 5 0 5 5 0 0 0 0 ``` After the second operation: ``` 5 5 0 5 8 3 0 3 3 ``` After the third operation: ``` 6 6 1 6 9 4 1 4 4 ``` The minimum possible maximum value of any cell is 9 (achieved through the operations above) and the maximum possible minimum value of any cell is 3.","solution":"def process_operations(n, m, q, operations): grid = [[0] * m for _ in range(n)] for op in operations: x1, y1, x2, y2, v = op for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] += v min_val = float(\'inf\') max_val = float(\'-inf\') for i in range(n): for j in range(m): min_val = min(min_val, grid[i][j]) max_val = max(max_val, grid[i][j]) return max_val, min_val def main(n, m, q, operations): max_val, min_val = process_operations(n, m, q, operations) print(max_val, min_val)"},{"question":"In a country, there are `n` regions and each region has its own number of cities. The cities in each region are connected by direct roads, and every region is connected in such a way that there is exactly one path between any two cities within the same region. However, there are no direct roads connecting cities from different regions, but there is a teleportation system that allows jumping between cities located in different regions. For maintenance purposes, the teleportation system is occasionally shut down, and during these periods, it\'s only possible to travel between cities within the same region using the existing roads. The government wants to ensure that even when the teleportation system is down, it\'s possible to travel between any two cities in any given region. Given the description of roads in each region, determine for each region if all cities in that region remain connected when teleportation is unavailable. The input consists of `n` regions. For each region, the first line of the input contains an integer `m` (1 ≤ m ≤ 1000), representing the number of cities in the region. Each of the next `m-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ m), indicating a direct road between city `u` and city `v`. Output \\"Connected\\" if the cities in the region remain connected when the teleportation is down, otherwise output \\"Not Connected\\". # Input ``` 3 5 1 2 1 3 2 4 3 5 3 1 2 2 3 2 1 2 ``` # Output ``` Connected Connected Connected ``` # Explanation - In the first region, cities 1 to 5 form a fully connected tree structure, so they are all connected. - In the second region, cities 1 to 3 form another tree, so they are connected. - In the third region, there is only one road connecting city 1 and city 2, and they are connected. Ensure you provide the correct connectivity status for each region based on the given road structure.","solution":"def check_region_connectivity(regions): Determines if all cities in each region remain connected when teleportation is unavailable. results = [] for cities, roads in regions: if cities == 1: results.append(\\"Connected\\") continue parent = list(range(cities + 1)) # Create a parent list for union-find def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX for u, v in roads: union(u, v) root = find(1) is_connected = all(find(i) == root for i in range(1, cities + 1)) if is_connected: results.append(\\"Connected\\") else: results.append(\\"Not Connected\\") return results # Example to process input and generate regions info def process_input(input_lines): index = 0 num_regions = int(input_lines[index]) index += 1 regions = [] for _ in range(num_regions): cities = int(input_lines[index]) index += 1 roads = [] for __ in range(cities - 1): road = tuple(map(int, input_lines[index].strip().split())) roads.append(road) index += 1 regions.append((cities, roads)) return regions"},{"question":"You are given an array of n integers a1, a2, ..., an. Your task is to rearrange these integers to form a new array b1, b2, ..., bn such that the sum of the absolute differences between adjacent elements is minimized. More formally, you need to minimize the value of |b1 - b2| + |b2 - b3| + ... + |bn-1 - bn|. Two arrays are considered different if there is at least one index i such that ai ≠ bi. # Input: - The first line contains a single integer n (2 ≤ n ≤ 100,000) — the size of the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000). # Output: - Print n integers b1, b2, ..., bn — the rearranged array which minimizes the sum of absolute differences between adjacent elements. # Example: Input: 7 3 7 1 4 8 5 2 Output: 1 2 3 4 5 7 8 # Explanation: One of the optimal ways to rearrange the array to minimize the sum of absolute differences between adjacent elements is to sort the array. Sorting ensures that the differences between adjacent elements are minimized, leading to the smallest possible sum of absolute differences. # Note: It\'s guaranteed that the rearranged array is unique.","solution":"def minimize_absolute_difference(arr): Rearranges the array such that the sum of the absolute differences between adjacent elements is minimized. arr.sort() return arr"},{"question":"You are given two arrays of integers, `A` and `B`, each of length `n`. Your task is to perform a series of operations to make both arrays equal or determine that it is impossible. In one operation, you may choose a subarray of `A` or `B` of even length and reverse it in-place. For example, if `A = [1, 2, 3, 4]` and you choose the subarray `[2, 3]`, after reversing it, `A` becomes `[1, 3, 2, 4]`. Your goal is to find whether it is possible to make arrays `A` and `B` identical by performing any number of these operations. If it is possible, print \\"Yes\\"; otherwise, print \\"No\\". Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000). - The second line contains `n` space-separated integers A[i] (1 ≤ A[i] ≤ 100,000). - The third line contains `n` space-separated integers B[i] (1 ≤ B[i] ≤ 100,000). Output: - Print \\"Yes\\" if you can make the arrays identical, otherwise, print \\"No\\". Example: Input: 6 1 2 3 4 5 6 1 5 4 3 2 6 Output: Yes Explanation: One way to make the arrays identical is: - Reverse subarray [2, 3, 4, 5] of A to become [1, 5, 4, 3, 2, 6].","solution":"def can_make_equal(n, A, B): Determines whether it is possible to make arrays A and B identical by reversing any number of even-length subarrays. Parameters: n (int): Length of the arrays A and B. A (List[int]): The first array of integers. B (List[int]): The second array of integers. Returns: str: \\"Yes\\" if the arrays can be made identical, otherwise \\"No\\". return \\"Yes\\" if sorted(A) == sorted(B) else \\"No\\""},{"question":"John loves to play with strings. He recently learned about palindromes (a string that reads the same backward as forward), and he wants to create new palindromes by modifying his favorite string. Given a string s, John can perform the following operation any number of times to make s a palindrome: - Choose any character in s and replace it with any other character. Find the minimum number of operations John needs to perform to make the entire string a palindrome. The first line contains a single integer t (1 le t le 100), the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 100), consisting of lowercase English letters. Output t lines, each containing one integer — the minimum number of operations needed to make the string s a palindrome. For example: Input: ``` 3 abba racecar abcdef ``` Output: ``` 0 0 3 ``` In the first sample, \\"abba\\" is already a palindrome, so no operations are needed. In the second sample, \\"racecar\\" is also a palindrome, so no operations are needed. In the third sample, we can change \'a\' to \'f\', \'b\' to \'e\', and \'c\' to \'d\', resulting in the palindrome \\"feddef\\". So, 3 operations are needed.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations needed to make the string a palindrome. n = len(s) count = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: count += 1 return count def process_test_cases(t, test_cases): results = [] for i in range(t): results.append(min_operations_to_palindrome(test_cases[i])) return results"},{"question":"You are given a string s consisting of lowercase Latin letters. You must determine the length of the shortest substring of this string that contains all the unique characters present in the entire string at least once. The first line contains a single integer n (1 le n le 10^5) — the length of the string s. The second line contains the string s of length n. Output the length of the shortest substring of s that contains all the unique characters of s. In the first sample, the string is \\"abcdeabcd\\". The shortest substring containing all unique characters is \\"abcde\\", and its length is 5. In the second sample, the string is \\"aaabbb\\". The shortest substring containing the unique characters \'a\' and \'b\' is \\"ab\\", and its length is 2. In the third sample, the string is \\"aaaaa\\". The entire string has only one unique character \'a\', so the length of the substring is 1.","solution":"def shortest_substring_with_all_unique_chars(s): Returns the length of the shortest substring that contains all the unique characters of s. from collections import defaultdict unique_chars = set(s) required_unique_count = len(unique_chars) left, right = 0, 0 unique_count = 0 char_count = defaultdict(int) min_length = len(s) while right < len(s): char_count[s[right]] += 1 if char_count[s[right]] == 1: unique_count += 1 while unique_count == required_unique_count: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: unique_count -= 1 left += 1 right += 1 return min_length"},{"question":"Alice has a collection of N distinct books, arranged in a line on a shelf. Each book has a unique integer identifier from 1 to N. Alice loves rearranging her books, but she is limited by a special rule: in each move, she can pick any book and put it at the very beginning or at the very end of the shelf, without disturbing the order of the other books. Alice wonders how many different ways she can rearrange her entire shelf following this rule exactly N times, such that the final arrangement is different from the initial one. The first and only line of the input contains a single integer N (1 ≤ N ≤ 20) — the number of books in Alice\'s collection. Print the number of valid rearrangements, followed by each valid rearrangement on a new line. Each rearrangement should be space-separated. In the first example, if N = 2, the initial arrangement is [1, 2]. The valid rearrangements following the rule would be: [2, 1] Note: Even though the total number of rearrangements is factorial of N, this specific problem asks for arrangements that can be obtained by the specific set of moves described. Consequently, it considers the restrictions posed by the operations allowed.","solution":"def rearrange_books(N): Returns the number of valid rearrangements and the rearrangements themselves. from itertools import permutations initial_order = list(range(1, N + 1)) all_permutations = list(permutations(initial_order)) valid_permutations = [] for perm in all_permutations: if list(perm) != initial_order: valid_permutations.append(perm) return len(valid_permutations), valid_permutations # Main function to handle input-output def main(): import sys input = sys.stdin.read N = int(input().strip()) count, valid_permutations = rearrange_books(N) print(count) for perm in valid_permutations: print(\\" \\".join(map(str, perm)))"},{"question":"You are given an array of integers. You need to perform a series of operations on the array. In each operation, you can select any two distinct elements a_i and a_j (1 ≤ i, j ≤ n) and remove both of them from the array. The cost of this operation is a_i + a_j. Find the minimum total cost to remove all elements from the array. If it is not possible to remove all elements (i.e., the array has an odd number of elements), return -1. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case begins with a single integer n (1 ≤ n ≤ 100), representing the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. For each test case, output a single integer — the minimum total cost to remove all elements from the array, or -1 if it is not possible. For example: Input: ``` 2 4 1 3 2 4 3 5 2 1 ``` Output: ``` 10 -1 ``` Explanation: In the first test case, we can pair (1, 4) with a cost of 5 and (2, 3) with a cost of 5, resulting in a total cost of 10. In the second test case, it is impossible to remove all elements as the number of elements is odd.","solution":"def min_remove_cost(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] if n % 2 != 0: results.append(-1) else: arr.sort() total_cost = 0 while len(arr) > 0: total_cost += arr.pop(0) + arr.pop(0) results.append(total_cost) return results"},{"question":"In a certain kingdom, there is a straight road with houses numbered from 1 to n. Each house is owned by a different person. The king has decided to distribute gifts to the houses. The kind of gift given to a house depends on its number. The gifting period is determined by the king for m days, during which a series of commands are issued to distribute gifts. Each command defines the range of house numbers and the type of gift to be distributed over that range. The objective is to determine the final state of all houses in terms of the gifts they received after all the commands have been executed. The input contains one or more test cases. For each test case: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000) — the number of houses and the number of days (commands), respectively. - The next m lines each contain three integers l, r, and g (1 ≤ l ≤ r ≤ n, 1 ≤ g ≤ 1000) representing that on the current day all houses from l to r (inclusive) receive the gift type g. For each test case, output a single line with n integers where the i-th integer indicates the type of gift received by the i-th house after all commands. If a house receives multiple commands, the type of gift from the last executed command affecting that house should be considered. Example: Input: ``` 2 5 3 1 3 10 2 4 20 3 5 30 4 2 1 2 15 3 4 25 ``` Output: ``` 10 20 30 30 30 15 15 25 25 ``` Explanation: 1. For the first test case: - Initially, all houses have no gifts. - After the first command, houses 1 to 3 receive gift type 10. - After the second command, houses 2 to 4 receive gift type 20. - After the third command, houses 3 to 5 receive gift type 30. - So, the final gifts for houses 1 to 5 are: 10 (house 1), 20 (house 2), 30 (house 3), 30 (house 4), 30 (house 5). 2. For the second test case: - Initially, all houses have no gifts. - After the first command, houses 1 to 2 receive gift type 15. - After the second command, houses 3 to 4 receive gift type 25. - So, the final gifts for houses 1 to 4 are: 15 (house 1), 15 (house 2), 25 (house 3), 25 (house 4).","solution":"def distribute_gifts(n, m, commands): Distributes gifts based on the provided commands. :param n: Integer, the number of houses. :param m: Integer, the number of commands. :param commands: List of tuples, each consisting of three integers (l, r, g). :return: List of integers representing the final gift type of each house. gifts = [0] * n # Initialize all houses with no gift (gift type 0) for l, r, g in commands: for i in range(l - 1, r): gifts[i] = g return gifts"},{"question":"The roads in the kingdom of Casteland are quite peculiar. Casteland has n cities labeled from 1 to n, and certain bidirectional roads connect specific pairs of cities. Each city can be described as having a certain altitude. The kingdom is planning to build a new road system to connect all the cities. The plan is to ensure that these roads only connect cities with differing altitudes directly. Given the number of cities, the initial configuration of roads, and the altitude of each city, determine the minimum number of new roads that need to be built so that all cities can be connected directly or indirectly, ensuring that every directly connected pair of cities has different altitudes. If it\'s impossible to connect all cities under these conditions, return -1. The first line of the input contains two integers n and m (1 ≤ n ≤ 300,000, 0 ≤ m ≤ 300,000) — the number of cities and the number of initial roads, respectively. The second line contains n integers a1, a2, ... , an (1 ≤ ai ≤ 10^9) — the altitude of each city. Each of the following m lines contains two integers xi and yi (1 ≤ xi, yi ≤ n) — the cities connected by the i-th road. Output a single integer, the minimum number of new roads needed to ensure all cities are connected with the condition that directly connected cities have different altitudes. If it\'s impossible to connect all cities, print -1. **Examples:** Input: ``` 4 2 1 2 3 4 1 2 3 4 ``` Output: ``` 1 ``` Input: ``` 3 0 5 5 5 ``` Output: ``` -1 ``` **Explanation:** In the first example, cities 1 and 2 are initially connected, and cities 3 and 4 are initially connected. To ensure all cities are connected, we can add a road from city 2 (altitude 2) to city 3 (altitude 3). The total number of new roads needed is 1. In the second example, all cities have the same altitude, making it impossible to connect them under the given conditions, so the output is -1.","solution":"from collections import defaultdict, deque def find_root(city, parent): if parent[city] != city: parent[city] = find_root(parent[city], parent) return parent[city] def union(city1, city2, parent, rank): root1 = find_root(city1, parent) root2 = find_root(city2, parent) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 elif rank[root1] < rank[root2]: parent[root1] = root2 else: parent[root2] = root1 rank[root1] += 1 def minimum_new_roads(n, m, altitudes, roads): if n == 1: return 0 graph = defaultdict(list) for x, y in roads: if altitudes[x - 1] != altitudes[y - 1]: graph[x].append(y) graph[y].append(x) # Check the number of components using BFS visited = [False] * (n + 1) components = [] for city in range(1, n + 1): if not visited[city]: q = deque([city]) component = [] while q: c = q.popleft() if not visited[c]: visited[c] = True component.append(c) for neighbor in graph[c]: if not visited[neighbor]: q.append(neighbor) components.append(component) if len(components) == 1: return 0 alt_set = set(altitudes) if len(alt_set) < 2: return -1 parent = list(range(n + 1)) rank = [0] * (n + 1) for city in range(1, n + 1): for neighbor in graph[city]: union(city, neighbor, parent, rank) connected_components = len({find_root(city, parent) for city in range(1, n + 1)}) if connected_components == 1: return 0 return connected_components - 1"},{"question":"Monica is hosting a coding competition, and she needs to generate a leaderboard based on the performance of participants. The performance of each participant is measured by their score in each problem they attempt. Monica needs your help to process the results and generate the leaderboard. Given the results of the competition in the form of participant\'s names, the problem they attempted, and their score, your task is to compute the total score for each participant and print the leaderboard in descending order of scores. If two or more participants have the same total score, they should be listed in alphabetical order. The input consists of several lines. The first line contains an integer `t` (1 ≤ t ≤ 1000) ― the number of results entries. Each of the following `t` lines contains information about a result in the form: `<participant_name> <problem_id> <score>`, where: - `<participant_name>` is a string consisting of alphabetical characters only and of length between 1 and 50. - `<problem_id>` is a string consisting of alphabetical characters and digits, with a maximum length of 10. - `<score>` is an integer between 0 and 100. The output should consist of several lines. Each line should contain the name of a participant and their total score, in descending order of scores. If two participants have the same score, they should be sorted alphabetically by their names. # Example Input: ``` 5 Alice P1 100 Bob P1 90 Alice P2 80 Charlie P1 90 Bob P2 90 ``` Output: ``` Alice 180 Bob 180 Charlie 90 ``` In this example, Alice and Bob both have a total score of 180, but \\"Alice\\" comes before \\"Bob\\" alphabetically. Charlie\'s total score is 90, so he is listed last.","solution":"def generate_leaderboard(entries): Process the results and generate a leaderboard based on total scores. :param entries: List of tuples, each containing (participant_name, problem_id, score) :return: List of tuples, each containing (participant_name, total_score) sorted by total_score and participant_name from collections import defaultdict # Dictionary to store the total score of each participant scores = defaultdict(int) # Calculate the total score for each participant for entry in entries: name, _, score = entry scores[name] += int(score) # Sort the leaderboard by total score in descending order # and by participant name in case of tie. leaderboard = sorted(scores.items(), key=lambda x: (-x[1], x[0])) return leaderboard # Helper function to format the input and output. def process_results(t, raw_entries): Helper function to process raw input and output formatted results. entries = [] for entry in raw_entries: entries.append(tuple(entry.split())) leaderboard = generate_leaderboard(entries) return \'n\'.join(f\\"{name} {score}\\" for name, score in leaderboard)"},{"question":"Alice and Bob are playing a friendly game on a binary tree. The tree has `n` nodes, numbered from 1 to `n`, rooted at node 1. Alice randomly selects a node `a`, and Bob randomly selects a different node `b`. They start from their respective nodes and try to meet at a common node by only moving towards the root. You are given `m` different queries. Each query consists of two integers `a` and `b`. For each query, you need to determine the lowest common ancestor (LCA) of nodes `a` and `b`. The first line of the input contains a single integer `n` (2 ≤ `n` ≤ 10^5) — the number of nodes in the tree. The next `n-1` lines each contain two integers `u` and `v` (1 ≤ `u, v` ≤ `n`; `u != v`), denoting an edge between nodes `u` and `v`. Then follows a single integer `m` (1 ≤ `m` ≤ 10^5) — the number of queries. Each of the next `m` lines contains two integers `a` and `b` (1 ≤ `a, b` ≤ `n`; `a != b`), representing a query. Print `m` integers, one for each query, representing the LCA of nodes `a` and `b`. # Example Input ``` 7 1 2 1 3 2 4 2 5 3 6 3 7 4 4 5 4 6 3 4 2 7 ``` Output ``` 2 1 1 1 ``` # Explanation For the given binary tree: ``` 1 / 2 3 / / 4 5 6 7 ``` - The LCA of nodes 4 and 5 is 2. - The LCA of nodes 4 and 6 is 1. - The LCA of nodes 3 and 4 is 1. - The LCA of nodes 2 and 7 is 1.","solution":"import sys import collections def preprocess_lca(n, edges): LOG = 17 # As n <= 10^5, log2(10^5) is less than 17 # Create adjacency list for the tree tree = collections.defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Initialize parent and depth arrays parent = [[-1] * LOG for _ in range(n + 1)] depth = [-1] * (n + 1) def dfs(node, par, d): parent[node][0] = par depth[node] = d for child in tree[node]: if child != par: dfs(child, node, d + 1) # Start DFS from the root node (1) dfs(1, -1, 0) # Preprocess the parent table for j in range(1, LOG): for i in range(1, n + 1): if parent[i][j - 1] != -1: parent[i][j] = parent[parent[i][j - 1]][j - 1] return parent, depth, LOG def lca(u, v, parent, depth, LOG): if depth[u] < depth[v]: u, v = v, u # Lift u to the same depth as v for i in range(LOG - 1, -1, -1): if depth[u] - (1 << i) >= depth[v]: u = parent[u][i] if u == v: return u for i in range(LOG - 1, -1, -1): if parent[u][i] != parent[v][i]: u = parent[u][i] v = parent[v][i] return parent[u][0] def solve_lca(n, edges, queries): parent, depth, LOG = preprocess_lca(n, edges) results = [] for a, b in queries: results.append(lca(a, b, parent, depth, LOG)) return results def parse_input(input_str): data = input_str.split() index = 0 n = int(data[index]) index += 1 edges = [] for _ in range(n - 1): u = int(data[index]) v = int(data[index + 1]) edges.append((u, v)) index += 2 m = int(data[index]) index += 1 queries = [] for _ in range(m): a = int(data[index]) b = int(data[index + 1]) queries.append((a, b)) index += 2 return n, edges, m, queries def lca_queries(input_str): n, edges, m, queries = parse_input(input_str) results = solve_lca(n, edges, queries) return results"},{"question":"You are given a list of n integers that can contain both positive and negative numbers. You need to determine whether you can make this list strictly increasing by performing at most one move. A move is defined as selecting any two adjacent elements a_i and a_{i+1} and either swapping them or replacing one of them with a new integer in such a way that the list becomes strictly increasing. Write an algorithm to determine if it is possible to make the given list strictly increasing by performing at most one move. If it is possible, return \\"YES\\". Otherwise, return \\"NO\\". # Input The first line contains a single integer n (2 le n le 10^5) — the number of elements in the list. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9), the elements of the list. # Output Print \\"YES\\" if it is possible to make the list strictly increasing by performing at most one move. Otherwise, print \\"NO\\". # Example Input ``` 5 3 4 2 6 7 ``` Output ``` YES ``` Input ``` 4 1 2 3 4 ``` Output ``` YES ``` Input ``` 6 5 4 3 2 1 0 ``` Output ``` NO ``` # Note In the first example, you can swap the elements 4 and 2 to get the list [3, 2, 4, 6, 7], which is strictly increasing. In the second example, the list is already strictly increasing, so no moves are needed, the output is \\"YES\\". In the third example, it is impossible to make the list strictly increasing with one move. Hence the output is \\"NO\\".","solution":"def can_become_strictly_increasing(n, a): def is_strictly_increasing(lst): return all(x < y for x, y in zip(lst, lst[1:])) if is_strictly_increasing(a): return \\"YES\\" for i in range(n - 1): # Try swapping a[i] and a[i+1] a[i], a[i+1] = a[i+1], a[i] if is_strictly_increasing(a): return \\"YES\\" # Swap back to original a[i], a[i+1] = a[i+1], a[i] # Try replacing a[i] with a[i+1] - 1 or a[i+1] with a[i] + 1 original_i, original_ip1 = a[i], a[i+1] a[i], a[i+1] = original_ip1 - 1, original_ip1 if is_strictly_increasing(a): return \\"YES\\" a[i], a[i+1] = original_i, original_i + 1 if is_strictly_increasing(a): return \\"YES\\" # Revert changes a[i], a[i+1] = original_i, original_ip1 return \\"NO\\""},{"question":"In a kingdom far away, there are numerous castles. There are n castles arranged in a straight line and connected by n-1 roads, with the i-th road connecting the i-th castle to the (i+1)-th castle. Each castle has a certain amount of gold stored in it, represented by an array gold where gold[i] is the amount of gold in the i-th castle. The ruler wants to protect the gold in these castles by assigning guards. Each guard can watch over a segment of consecutive castles. The cost of assigning guards to a segment is determined by the segment\'s total gold and the number of castles it spans. Specifically, the cost is defined as the total gold in the segment multiplied by the length of the segment (number of castles in it). The ruler must assign guards to segments so that each castle is included in exactly one segment. Help the ruler determine the minimum possible total cost to guard all the castles. The first line contains an integer n (1 le n le 10^5), the number of castles. The second line contains n integers gold_1, gold_2, ldots, gold_n (1 le gold_i le 10^4), the amount of gold in each castle. Output a single integer, the minimum total cost to guard all the castles. # Example Input: ``` 5 3 1 4 1 5 ``` Output: ``` 35 ``` # Explanation One optimal way to assign guards is to create the following segments: - Segment covering castles 1, 2, and 3 with a total gold of 8 and a length of 3, resulting in a cost of 8*3 = 24. - Segment covering castles 4 and 5 with a total gold of 6 and a length of 2, resulting in a cost of 6*2 = 12. Thus, the minimum total cost is 24 + 12 = 36.","solution":"def min_cost_to_guard_castles(n, gold): Given the number of castles and their gold amounts, return the minimum cost to guard all castles. total_gold = sum(gold) cost = total_gold * n return cost"},{"question":"Sergey is developing a social network and wants to implement a feature that allows him to determine the minimum number of connections required to make two users friends. The social network consists of n users and each pair of users can either be friends directly or indirectly through other friends. Given the current friendships, the aim is to find out the smallest number of new friendships needed to make two given users friends. The first line contains three integers, n, m, and q (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ q ≤ 10000), where n is the number of users, m is the number of friendship pairs, and q is the number of queries. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing a direct friendship between users u and v. The next q lines each contain two integers x and y (1 ≤ x, y ≤ n), which are the queries asking for the minimum number of new friendships required to make users x and y friends. For each query, print the required number of new friendships in a separate line. If users x and y are already friends (directly or indirectly), print 0. If it is not possible to make them friends through any number of new friendships, print -1. Input: ``` 5 3 2 1 2 1 3 4 5 1 5 4 2 ``` Output: ``` 1 2 ``` In the given example, there are five users and three friendship pairs: - Users 1 and 2 are friends. - Users 1 and 3 are friends. - Users 4 and 5 are friends. The queries ask for the minimum number of new friendships required to make: 1. Users 1 and 5 friends. 2. Users 4 and 2 friends. For the first query, creating a new friendship between users 1 and 5 would make them friends directly, so the answer is 1. For the second query, a new friendship between users 2 and 4 would connect them through user 1, so the answer is 2.","solution":"from collections import deque def min_new_friendships(n, m, q, friendships, queries): # Create an adjacency list adj = [[] for _ in range(n)] for u, v in friendships: adj[u-1].append(v-1) adj[v-1].append(u-1) # Function to find shortest path using BFS def bfs(start, end): visited = [False] * n distance = [float(\'inf\')] * n queue = deque([start]) visited[start] = True distance[start] = 0 while queue: node = queue.popleft() for neighbour in adj[node]: if not visited[neighbour]: visited[neighbour] = True distance[neighbour] = distance[node] + 1 queue.append(neighbour) if neighbour == end: return distance[neighbour] return -1 result = [] for x, y in queries: if x == y: result.append(0) continue # Find if there\'s a direct or indirect connection steps = bfs(x-1, y-1) if steps == -1: result.append(1) else: result.append(0) return result # Example usage: # n = 5 # m = 3 # q = 2 # friendships = [(1, 2), (1, 3), (4, 5)] # queries = [(1, 5), (4, 2)] # print(min_new_friendships(n, m, q, friendships, queries)) # Output: [1, 2]"},{"question":"A thriving city needs to manage its traffic control more efficiently. The city has intersections, connected by one-way streets. The goal is to determine whether a designated route between two intersections is possible through the available one-way streets. Given the number of intersections n and the number of streets m, followed by a list of streets defined by pairs (u, v) indicating a one-way street from intersection u to intersection v, determine if there is a valid route from intersection s to intersection t. Input: - An integer n (1 ≤ n ≤ 10^5) representing the number of intersections. - An integer m (1 ≤ m ≤ 2·10^5) representing the number of streets. - Next m lines, each containing two integers u and v (1 ≤ u, v ≤ n), indicating a one-way street from intersection u to intersection v. - Two integers s and t (1 ≤ s, t ≤ n) representing the start and target intersections, respectively. Output: - Print \\"Yes\\" if there is a route from intersection s to intersection t. - Otherwise, print \\"No\\". Example: Input: 6 7 1 2 2 3 3 4 4 5 5 6 1 3 4 6 1 6 Output: Yes","solution":"def can_route(n, m, streets, s, t): from collections import deque, defaultdict # Create adjacency list for the given intersections and streets adj_list = defaultdict(list) for u, v in streets: adj_list[u].append(v) # BFS to check if there\'s a route from s to t queue = deque([s]) visited = set() while queue: node = queue.popleft() if node == t: return \\"Yes\\" if node not in visited: visited.add(node) for neighbor in adj_list[node]: if neighbor not in visited: queue.append(neighbor) return \\"No\\" # Example usage # n = 6 # m = 7 # streets = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (1, 3), (4, 6)] # s = 1 # t = 6 # print(can_route(n, m, streets, s, t)) # Output should be \\"Yes\\""},{"question":"Polycarp is trying to impress his friends by performing some magic tricks with bricks. He has a rectangle grid of n rows and m columns made up of bricks. Each brick has a height of 1 and a width of 1. Initially, all bricks are perfectly aligned in the grid. To perform his trick, Polycarp wants to remove some bricks such that they form a special pattern in the grid. For this pattern, each brick must have another brick either directly above it, directly below it, or directly to the left or right of it at each step. Given the dimensions of the grid, determine the maximum number of bricks Polycarp can remove from the grid while making sure every remaining brick still has a neighboring brick in any of the indicated directions. The input consists of two integers n and m (1 ≤ n, m ≤ 1000) - the number of rows and columns in the grid. Output a single integer - the maximum number of bricks that Polycarp can remove while ensuring every remaining brick has at least one neighboring brick directly adjacent to it. For example, for an input of n=3 and m=4, the output would be the maximum number of bricks that can be removed while meeting the requirement.","solution":"def max_removable_bricks(n, m): Returns the maximum number of removable bricks while ensuring every remaining brick has at least one neighboring brick. return (n * m) // 2"},{"question":"With the recent advancement in the AI industry, you decided to showcase your knowledge of prime numbers by developing a new algorithm to generate prime numbers in a given range. To help visualize the capability of your algorithm, you\'ve decided to create a simple program to find all prime numbers between two given integers inclusive. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Write a program that takes two integers, `low` and `high`, and prints all prime numbers between `low` and `high` inclusive. If there are no prime numbers in this range, print \\"No primes\\". # Input: - The only line contains two integers `low` and `high` (1 leq low, high leq 10^6). # Output: - Print all prime numbers between `low` and `high` inclusive, separated by spaces on a single line. If there are no prime numbers in this range, print \\"No primes\\". # Example: Input: ``` 10 30 ``` Output: ``` 11 13 17 19 23 29 ``` Input: ``` 1 1 ``` Output: ``` No primes ``` # Explanation: In the first example, there are several prime numbers between 10 and 30. In the second example, there is no prime number between 1 and 1, so \\"No primes\\" is printed.","solution":"def is_prime(n): Checks if a number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_in_range(low, high): Returns a list of all prime numbers between low and high (inclusive). prime_list = [] for i in range(max(2, low), high + 1): if is_prime(i): prime_list.append(i) return prime_list def display_primes(low, high): primes = primes_in_range(low, high) if primes: print(\\" \\".join(map(str, primes))) else: print(\\"No primes\\")"},{"question":"Given a rectangular matrix of size n x m, filled with positive integers, your task is to find and return its \\"submatrix sum grid\\". The submatrix sum grid is defined as a new matrix of the same dimensions where each cell (i, j) contains the sum of all integers in the submatrix that starts from the top-left corner (0, 0) and ends at (i, j). The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the matrix. Each of the next n lines contains m integers representing the matrix elements. Each element is a positive integer not greater than 1000. Print the resulting submatrix sum grid where each element (i, j) represents the sum of all elements in the submatrix from (0, 0) to (i, j). For example, given the following matrix: ``` 2 3 1 2 3 4 5 6 ``` The resulting submatrix sum grid should be: ``` 1 3 6 5 12 21 ``` Explanation: - The element at (0, 0) is 1. - The element at (0, 1) is 1 + 2 = 3. - The element at (0, 2) is 1 + 2 + 3 = 6. - The element at (1, 0) is 1 + 4 = 5. - The element at (1, 1) is 1 + 2 + 4 + 5 = 12. - The element at (1, 2) is 1 + 2 + 3 + 4 + 5 + 6 = 21.","solution":"def submatrix_sum_grid(matrix): Given a rectangular matrix of size n x m, calculates the submatrix sum grid. Parameters: matrix (list of list of int): A 2D list of positive integers representing the matrix. Returns: list of list of int: A 2D list representing the submatrix sum grid. n = len(matrix) m = len(matrix[0]) # Initialize an empty sum grid with the same dimensions as the input matrix sum_grid = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): # Current value in the matrix curr_value = matrix[i][j] # Calculate the sum for the cell (i, j) if i == 0 and j == 0: sum_grid[i][j] = curr_value elif i == 0: sum_grid[i][j] = sum_grid[i][j-1] + curr_value elif j == 0: sum_grid[i][j] = sum_grid[i-1][j] + curr_value else: sum_grid[i][j] = sum_grid[i-1][j] + sum_grid[i][j-1] - sum_grid[i-1][j-1] + curr_value return sum_grid"},{"question":"Elena loves to paint on grids. Recently, she started working on a special kind of art. She wants to fill an n×m grid with three different colors: Red (\'R\'), Green (\'G\'), and Blue (\'B\'). Elena has set the following rules for her artwork: 1. No two adjacent cells (horizontally or vertically) can have the same color. 2. The difference in the number of cells painted with the most frequent and the least frequent color should be at most 1. Given an initially empty grid of size n×m, help Elena determine if it is possible to fill the grid following her rules. If it is possible, print \\"YES\\" and provide one possible coloring of the grid. If it is not possible, print \\"NO\\". Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 100). Output: - If it is possible to fill the grid, print \\"YES\\" on the first line. Then print n lines each containing m characters (\'R\', \'G\', \'B\') representing one possible coloring of the grid. - If it is not possible to fill the grid, print \\"NO\\" on the first line. Example: Input: 2 3 Output: YES RGB GBR Explanation: This output follows the rules stated above, where no two adjacent cells have the same color, and the difference between the count of \'R\', \'G\', and \'B\' is at most 1.","solution":"def fill_grid(n, m): Fills an n x m grid with \'R\', \'G\', \'B\' such that no two adjacent cells have the same color and the difference in the frequency of colors is at most 1. # If the grid has only one cell if n == 1 and m == 1: return \\"YES\\", [\\"R\\"] colors = [\'R\', \'G\', \'B\'] grid = [] # Create the grid for i in range(n): row = [] for j in range(m): row.append(colors[(i + j) % 3]) grid.append(\\"\\".join(row)) return \\"YES\\", grid # Function to print result def print_result(result): if result[0] == \\"NO\\": print(\\"NO\\") else: print(\\"YES\\") for row in result[1]: print(row) # Example usage n, m = 2, 3 result = fill_grid(n, m) print_result(result)"},{"question":"A thriving tech company is looking to optimize the performance of their data processing pipelines. They need an efficient way to process a large stream of data events. Each event has a timestamp and a payload. An event is represented as a tuple (timestamp, payload), where timestamp is an integer and payload is a string. The goal is to merge multiple streams of events into a single stream of events, sorted by timestamp. You need to implement a function `merge_k_streams(streams: List[List[Tuple[int, str]]]) -> List[Tuple[int, str]]` that takes a list of `k` sorted event streams and merges them into a single sorted stream. Each input stream is sorted by timestamp in non-decreasing order. # Input - `streams` — A list of `k` event streams. Each stream is a list of tuples, where each tuple contains an integer (timestamp) and a string (payload). - The number of streams `k` is between `1` and `1000`. - Each stream contains between `0` and `1000` events. - Timestamps are non-negative integers and payloads are non-empty strings. # Output - A single list of tuples, sorted by timestamp. Each tuple contains an integer (timestamp) and a string (payload). # Example ```python streams = [ [(1, \'a\'), (4, \'d\')], [(2, \'b\'), (3, \'c\')], [(5, \'e\')] ] print(merge_k_streams(streams)) # Output: [(1, \'a\'), (2, \'b\'), (3, \'c\'), (4, \'d\'), (5, \'e\')] ``` # Constraints - You must ensure the solution is efficient and performs well with large inputs. - You should avoid using any built-in sorting functions after concatenating all the streams as it will not be optimal. Write a function `merge_k_streams` that efficiently merges multiple sorted streams into one sorted stream.","solution":"import heapq from typing import List, Tuple def merge_k_streams(streams: List[List[Tuple[int, str]]]) -> List[Tuple[int, str]]: Merges k sorted event streams into a single sorted list of events. :param streams: List of k event streams, each sorted by timestamp :return: A single list of events sorted by timestamp min_heap = [] result = [] # Initialize heap for i, stream in enumerate(streams): if stream: heapq.heappush(min_heap, (stream[0][0], i, 0, stream[0][1])) while min_heap: timestamp, stream_idx, event_idx, payload = heapq.heappop(min_heap) result.append((timestamp, payload)) # If there are more events in the same stream, add the next event into the heap if event_idx + 1 < len(streams[stream_idx]): next_event = streams[stream_idx][event_idx + 1] heapq.heappush(min_heap, (next_event[0], stream_idx, event_idx + 1, next_event[1])) return result"},{"question":"Provided below is a similar coding assessment question. The format, style, complexity, and scope are aligned with the preceding questions. Design a new coding assessment question within the following parameters: - Ensure new question style is in accordance with the original ones. - Compare length, tone, language, difficulty level, and domain alignment with the existing questions. Here is the new question: --- Alice is a skilled explorer known for her extraordinary navigation abilities. She is currently exploring a vast, uncharted forest, represented as a grid of dimensions `m x n`. The forest is characterized by unpredictable weather conditions that affect her movement. The grid contains two special types of cells: \\"start\\" where Alice begins her journey and \\"destination\\" where she needs to reach. Additionally, there are \\"impassable\\" cells which she cannot traverse. The movement through the grid is further complicated by the weather pattern. The weather pattern is specified as a series of time intervals during which certain cells become hazardous and impassable. Alice plans her journey to minimize her travel time, adjusting dynamically according to the weather updates. Given the forest configuration and the weather pattern intervals, find the minimum time Alice needs to reach the destination from the start. If it is not possible for Alice to reach the destination, return `-1`. # Input Format 1. The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 500), representing the dimensions of the forest grid. 2. The second line contains the coordinates of the start cell (sx, sy) and the destination cell (dx, dy). 3. The next `m` lines contain `n` integers each, describing the forest grid: - `0` for traversable cells, - `1` for impassable cells, 4. The following line contains an integer `k` (0 ≤ k ≤ 1000), indicating the number of weather pattern intervals. 5. The next `k` lines contain the weather pattern, with each line consisting of five integers: `t_start`, `t_end`, `x`, `y`, where `(x, y)` is the cell that becomes hazardous during the interval `[t_start, t_end]` (0 ≤ t_start < t_end ≤ 10000). # Output Format Output a single integer indicating the minimum time required for Alice to reach the destination. If it\'s not possible, output `-1`. # Example Input: ``` 5 4 0 0 4 3 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 0 2 2 5 1 1 4 6 2 3 ``` Output: ``` 7 ``` In this example, Alice starts at cell (0, 0) and needs to reach cell (4, 3). The dynamic weather conditions make cell (1,1) hazardous from time 2 to 5 and cell (2,3) hazardous from time 4 to 6. Alice needs to strategize her movements to avoid these hazardous cells during the specified intervals.","solution":"from collections import deque import heapq def is_valid(x, y, m, n): return 0 <= x < m and 0 <= y < n def find_minimum_time(m, n, start, destination, grid, weather_intervals): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] weather_map = {} for t_start, t_end, x, y in weather_intervals: if (x, y) not in weather_map: weather_map[(x, y)] = [] weather_map[(x, y)].append((t_start, t_end)) def is_hazardous(x, y, t): if (x, y) in weather_map: for t_start, t_end in weather_map[(x, y)]: if t_start <= t < t_end: return True return False pq = [(0, start[0], start[1])] visited = set([(start[0], start[1])]) while pq: t, x, y = heapq.heappop(pq) if (x, y) == (destination[0], destination[1]): return t for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, m, n) and (nx, ny) not in visited and grid[nx][ny] == 0: nt = t + 1 if not is_hazardous(nx, ny, nt): visited.add((nx, ny)) heapq.heappush(pq, (nt, nx, ny)) return -1"},{"question":"John is participating in a coding competition. One of the problems involves finding the longest common subsequence of two given strings. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. Given two strings s1 and s2, find the length of their longest common subsequence. The first line contains the string s1 (1 ≤ length of s1 ≤ 1000). The second line contains the string s2 (1 ≤ length of s2 ≤ 1000). Print a single integer — the length of the longest common subsequence of s1 and s2. Example: Input: abcde ace Output: 3 Explanation: The longest common subsequence is \\"ace\\" and its length is 3.","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence of two strings s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are given a sequence of integers. Your task is to find a contiguous subsequence with the maximal possible sum. The first line contains an integer n (1 leq n leq 100,000) – the length of the sequence. The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) – the sequence itself. Output the maximum sum of any contiguous subsequence of the sequence. # Example Input ``` 5 -2 1 -3 4 -1 2 1 -5 4 ``` Output ``` 6 ``` # Explanation The contiguous subsequence [4, -1, 2, 1] has the maximum sum of 6.","solution":"def max_subarray_sum(sequence): Finds the maximum sum of any contiguous subsequence in the given sequence of integers. :param sequence: List of integers. :return: Integer representing the maximum sum of a contiguous subsequence. max_sum = float(\'-inf\') current_sum = 0 for number in sequence: current_sum = max(number, current_sum + number) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an integer array consisting of n unique integers. Your task is to sort the array in non-descending order by reversing exactly one subarray (i.e., a contiguous part of the array). Determine whether it is possible to sort the array by reversing one subarray, and if yes, identify the indices of the subarray. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. If it is possible to sort the array by reversing exactly one subarray, print the word \\"Yes\\". On the next line, print two integers l and r (1 ≤ l ≤ r ≤ n), the starting and ending positions (1-indexed) of the subarray that needs to be reversed. If there are multiple solutions, print any. If it is impossible to sort the array by reversing one subarray, print the word \\"No\\". Example 1: Input: 5 3 2 1 4 5 Output: Yes 1 3 Example 2: Input: 4 1 2 4 3 Output: Yes 3 4 Example 3: Input: 6 1 5 3 4 2 6 Output: No","solution":"def can_sort_by_reversing_subarray(n, arr): sorted_arr = sorted(arr) if arr == sorted_arr: return (\\"Yes\\", (1, 1)) # Find the first and last out of order indices start, end = 0, n - 1 while start < n and arr[start] == sorted_arr[start]: start += 1 while end >= 0 and arr[end] == sorted_arr[end]: end -= 1 # Reverse the suspected subarray and check if it sorts the array if arr[:start] + arr[start:end+1][::-1] + arr[end+1:] == sorted_arr: return (\\"Yes\\", (start + 1, end + 1)) return (\\"No\\", ) # Example usage n = 5 arr = [3, 2, 1, 4, 5] result = can_sort_by_reversing_subarray(n, arr) print(result)"},{"question":"A group of archaeologists discovered an ancient script written in an unknown language, where each word is composed of unique characters. They believe this script was used to represent a kind of puzzle. The puzzle works as follows: 1. Each word can be \\"shifted\\" by a certain number of positions to form a new word. For example, shifting \\"abc\\" by 1 results in \\"bcd\\" (a->b, b->c, c->d), and shifting \\"xyz\\" by 1 results in \\"yza\\". 2. The goal is to determine if one given word can be transformed into another word through such shifts. Write a program to determine if one word can be transformed into another using the above shifting rules. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the lengths of the two words. - The second line contains a string \'a\' of length n. - The third line contains a string \'b\' of length m. Output: - Print \\"YES\\" if string \'a\' can be transformed into string \'b\' by shifting. Otherwise, print \\"NO\\". Example: Input: 5 5 abcde cdefg Output: YES Explanation: Shifting \\"abcde\\" by 2 results in \\"cdefg\\". Thus, the output should be \\"YES\\". Additional Example: Input: 3 3 xyz zab Output: YES Explanation: Shifting \\"xyz\\" by 1 results in \\"yza\\", and by another 1 results in \\"zab\\". Hence, the output is \\"YES\\". Note: If \'a\' or \'b\' contains repeated characters or the lengths n and m are different, immediately output \\"NO\\" since the transformation is not possible.","solution":"def can_transform_by_shifting(n, m, a, b): if n != m: return \\"NO\\" shift_amount = (ord(b[0]) - ord(a[0])) % 26 for i in range(n): if (ord(a[i]) - ord(\'a\') + shift_amount) % 26 != (ord(b[i]) - ord(\'a\')) % 26: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of n integers. An \\"ideal segment\\" of this list is defined as a contiguous subarray where at most m unique numbers appear. Your task is to find the length of the longest ideal segment. The first line of input contains two integers, n and m (1 ≤ n ≤ 200000, 1 ≤ m ≤ 100000), denoting the length of the list and the maximum number of different integers allowed in the ideal segment, respectively. The second line contains n space-separated integers, representing the numbers in the list. Print a single integer, the length of the longest ideal segment. Example: Input: 7 2 1 2 1 2 3 4 1 Output: 4 In this example, the longest ideal segment is [1, 2, 1, 2] where only two unique integers (1 and 2) are present.","solution":"def longest_ideal_segment(n, m, arr): from collections import defaultdict left = 0 frequency_map = defaultdict(int) max_length = 0 for right in range(n): frequency_map[arr[right]] += 1 while len(frequency_map) > m: frequency_map[arr[left]] -= 1 if frequency_map[arr[left]] == 0: del frequency_map[arr[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a grid of size n x m filled with integers. Your task is to find the largest subgrid (a contiguous rectangular section of the grid) such that all numbers in this subgrid have the same value. Write a function that takes an integer n, an integer m, and a 2D list of integers grid, and returns the coordinates of the top-left and bottom-right corners of the largest uniform subgrid as a tuple of four integers (r1, c1, r2, c2), where (r1, c1) are the coordinates of the top-left corner, and (r2, c2) are the coordinates of the bottom-right corner. If there are multiple largest uniform subgrids, return the coordinates of any one of them. Input: - n (1 ≤ n ≤ 1000): The number of rows in the grid. - m (1 ≤ m ≤ 1000): The number of columns in the grid. - grid: A 2D list of integers representing the grid where grid[i][j] is the integer in the i-th row and j-th column of the grid (-10^9 ≤ grid[i][j] ≤ 10^9). Output: - A tuple (r1, c1, r2, c2) representing the coordinates of the largest uniform subgrid. Example: - Given the grid: ``` 1 1 1 2 1 1 1 2 1 1 1 2 3 3 3 3 ``` The largest uniform subgrid is the 3x3 section of 1\'s in the top-left corner, so the output should be (0, 0, 2, 2). Note: The indices are 0-based. Hints: - Consider scanning the grid and using dynamic programming to keep track of the largest uniform subgrid ending at each cell. - Use auxiliary tables to store intermediate results for optimization.","solution":"def largest_uniform_subgrid(n, m, grid): max_size = 0 top_left = (0, 0) bottom_right = (0, 0) # Create auxiliary arrays to store the size of largest uniform rectangular area ending at (i, j) same_value_count = [[[None, None] for _ in range(m)] for _ in range(n)] for i in range(n): for j in range(m): same_value_count[i][j] = [1, 1] if i > 0 and grid[i][j] == grid[i - 1][j]: same_value_count[i][j][0] = same_value_count[i - 1][j][0] + 1 if j > 0 and grid[i][j] == grid[i][j - 1]: same_value_count[i][j][1] = same_value_count[i][j - 1][1] + 1 min_size = float(\'inf\') for k in range(same_value_count[i][j][1]): min_size = min(min_size, same_value_count[i][j - k][0]) curr_size = min_size * (k + 1) if curr_size > max_size: max_size = curr_size top_left = (i - min_size + 1, j - k) bottom_right = (i, j) return (top_left[0], top_left[1], bottom_right[0], bottom_right[1])"},{"question":"Alice is a soccer coach and she has n players in her team. Each player has a certain skill level represented by an integer. Alice wants to form a team of exactly k players in such a way that the difference between the maximum and minimum skill levels in the team is minimized. Help Alice select k players such that the difference between the maximum and minimum skill levels is as small as possible. The first line contains two integers n (2 ≤ n ≤ 100000) and k (1 ≤ k ≤ n) — the number of players and the number of players to be selected for the team, respectively. The second line contains n space-separated integers a[i] (1 ≤ a[i] ≤ 10^9) — the skill levels of the players. Print the minimum difference between the maximum and minimum skill levels among the selected k players. In the first sample, the optimal way to select the players is to choose the skill levels 3 and 3. The difference is 0 which is the minimum possible difference. In the second sample, the optimal way to select 3 players is to pick skill levels 7, 8, and 9 (or 8, 9, 10). The difference is 2 which is the minimum possible difference for k=3 given the skill levels. In the third sample, Alice picks any one player, as k=1, which results in a difference of 0 since there is only one player being selected.","solution":"def min_skill_difference(n, k, skills): Returns the minimum difference between the maximum and minimum skill levels among the selected k players. skills.sort() min_diff = float(\'inf\') for i in range(n - k + 1): diff = skills[i + k - 1] - skills[i] if diff < min_diff: min_diff = diff return min_diff"},{"question":"Flora is practicing her painting skills on a canvas. She has n different colors and m different positions on the canvas where she can apply her colors. Each position on the canvas should be painted exactly one color. Flora wants to ensure that adjacent positions on the canvas get different colors so that the painting looks aesthetically pleasing. Two positions on the canvas are considered adjacent if their indices differ by exactly 1. Help Flora determine if it is possible to paint the canvas under the given conditions, and if so, provide one possible way to achieve it. The first line contains two integers n and m (1 ≤ n, m ≤ 100). Output \\"Yes\\" if it is possible to paint the canvas such that no two adjacent positions have the same color. If it is possible, output one possible way to do it in the next line as an array of m integers representing the colors of the positions on the canvas (colors are represented as integers from 1 to n). If it is not possible, output \\"No\\". For example, if the input is: 3 5 One possible output could be: Yes 1 2 3 1 2","solution":"def paint_canvas(n, m): # If n is less than 2 and m is more than 1, it is impossible to paint the canvas as required if n < 2 and m > 1: return \\"No\\" # Generate the result by alternating colors result = [] for i in range(m): result.append((i % n) + 1) return \\"Yes\\", result"},{"question":"Given a matrix with n rows and m columns, your task is to determine the minimum number of steps required to move from the top-left corner of the matrix (position (1,1)) to the bottom-right corner (position (n,m)). You can only move right or down at each step. However, certain cells are blocked, and you cannot pass through them. You need to find the path that avoids these blocked cells. If it is not possible to reach the bottom-right corner, return -1. The input contains several lines: - The first line contains two integers n and m (2 leq n, m leq 1000) — the number of rows and columns of the matrix. - The next n lines contain m characters each. Each character is either: - \'.\' — representing a free cell, - \'#\' — representing a blocked cell. The output should be a single integer — the minimum number of steps needed to reach the bottom-right corner, or -1 if it is not possible. **Examples**: **Input**: ``` 4 4 .... .#.. ..#. .... ``` **Output**: ``` 6 ``` **Input**: ``` 3 3 ..# .#. ... ``` **Output**: ``` -1 ```","solution":"from collections import deque def min_steps_to_reach_end(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(1, 0), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited[0][0] = True while queue: r, c, steps = queue.popleft() if r == n-1 and c == m-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, steps + 1)) return -1"},{"question":"A popular video streaming platform maintains a list of movies, each identified by a unique ID. Each movie has a rating and a genre associated with it. Users on the platform can rate movies, and the platform tracks the total number of ratings received by each movie, as well as the average rating calculated from these ratings. The platform provides a feature for users to request information about movies based on certain criteria. Users can query for the highest rated movie in a particular genre or for the movie with the most ratings. Given the data about movies on the platform, you need to implement a function that processes multiple queries. Each query will ask for either the highest rated movie in a specific genre or the movie with the most ratings across all genres. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of movies. The next n lines describe the movies. Each line contains four values: - an integer movie_id (1 ≤ movie_id ≤ 10^9) — the unique identifier of the movie. - a string genre — the genre of the movie. - a float rating (0 ≤ rating ≤ 10) — the average rating of the movie. - an integer num_ratings (0 ≤ num_ratings ≤ 10^5) — the total number of ratings the movie has received. The following line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. The next q lines contain the queries. Each query is either in the form: - \\"highest_rating genre\\" — asking for the movie ID of the highest rated movie of the specified genre, or - \\"most_rated\\" — asking for the movie ID of the movie with the most ratings in the entire list. If there are multiple movies with the same highest rating in a genre, return the movie with the lowest movie_id. Similarly, if there are multiple movies with the same number of ratings, return the movie with the lowest movie_id. Output the results for each query — either the movie ID of the highest rated movie in the specified genre or the movie ID of the movie with the most ratings. Example Input: ``` 5 1 Comedy 8.5 100 2 Action 9.0 150 3 Comedy 8.7 80 4 Drama 9.0 120 5 Comedy 8.5 90 3 highest_rating Comedy most_rated highest_rating Action ``` Example Output: ``` 3 2 2 ``` Note: - In the first query, movie ID 3 has the highest rating in the Comedy genre. - In the second query, movie ID 2 has the most ratings across all genres. - In the third query, movie ID 2 also has the highest rating in the Action genre.","solution":"def process_movie_queries(n, movies, q, queries): from collections import defaultdict genre_to_highest_rated = defaultdict(lambda: (0, 0, float(\'-inf\'))) highest_rated_movie_overall = (0, 0) for movie_id, genre, rating, num_ratings in movies: if (rating > genre_to_highest_rated[genre][2] or (rating == genre_to_highest_rated[genre][2] and movie_id < genre_to_highest_rated[genre][0])): genre_to_highest_rated[genre] = (movie_id, genre, rating, num_ratings) if (num_ratings > highest_rated_movie_overall[1] or (num_ratings == highest_rated_movie_overall[1] and movie_id < highest_rated_movie_overall[0])): highest_rated_movie_overall = (movie_id, num_ratings) results = [] for query in queries: if query[0] == \\"highest_rating\\": genre = query[1] results.append(genre_to_highest_rated[genre][0]) elif query[0] == \\"most_rated\\": results.append(highest_rated_movie_overall[0]) return results # Example usage: n = 5 movies = [ (1, \'Comedy\', 8.5, 100), (2, \'Action\', 9.0, 150), (3, \'Comedy\', 8.7, 80), (4, \'Drama\', 9.0, 120), (5, \'Comedy\', 8.5, 90) ] q = 3 queries = [ (\\"highest_rating\\", \\"Comedy\\"), (\\"most_rated\\", ), (\\"highest_rating\\", \\"Action\\") ] print(process_movie_queries(n, movies, q, queries))"},{"question":"Nyasha is developing an online store. The store\'s inventory system operates with \\"boxes\\" and \\"items\\". Each box is initially empty, and items arrive periodically. Nyasha needs to distribute these items among the boxes so that the number of items in any two boxes differs by at most one. Given the number of boxes and the number of items, you need to determine the number of items in each box after distributing all items according to the requirements. The first line of input contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 10,000) — the number of boxes and the number of items, respectively. Output exactly n integers, where each integer represents the number of items in a corresponding box after the distribution. If there are multiple valid distributions, output any of them. In the first sample, each box will receive 2 items because there are 8 items and 4 boxes. In the second sample, boxes can receive 1 or 0 items adequately to balance the total number of items. In the third sample, the distribution will have two boxes with 3 items and one box with 2 items, which is a valid distribution. In the fourth sample, the only way to distribute 3 items into 5 boxes while maintaining the requirements is to have three boxes with 1 item and two boxes with 0 items. Examples: Input: 4 8 Output: 2 2 2 2 Input: 3 7 Output: 2 2 3 Input: 3 8 Output: 3 3 2 Input: 5 3 Output: 1 1 1 0 0","solution":"def distribute_items(n, k): Distribute k items among n boxes such that the difference in the number of items between any two boxes is at most 1. Parameters: n (int): The number of boxes. k (int): The number of items to distribute. Returns: list: A list of integers representing the number of items in each box. base_items_per_box = k // n remainder_items = k % n distribution = [base_items_per_box] * n for i in range(remainder_items): distribution[i] += 1 return distribution"},{"question":"Given an array of integers, rearrange the array such that the sum of the absolute differences between consecutive elements is maximized. If there are multiple answers, print any. Input: - The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10000), the elements of the array. Output: - Print a single line with n integers, the rearranged array such that the sum of absolute differences is maximized. Example: Input: 4 1 2 3 4 Output: 4 1 3 2 Explanation: One possible optimal rearrangement is [4, 1, 3, 2]. The sum of absolute differences is |4-1| + |1-3| + |3-2| = 3 + 2 + 1 = 6.","solution":"def rearrange_to_maximize_diff(arr): Rearranges the array to maximize the sum of absolute differences between consecutive elements. :param arr: List[int], list of integers :return: List[int], rearranged list # Sort the array arr.sort() # Split the array into two halves first_half = arr[:len(arr)//2] second_half = arr[len(arr)//2:] # Merge in a way to maximize differences result = [] while first_half or second_half: if second_half: result.append(second_half.pop()) if first_half: result.append(first_half.pop(0)) return result # Example usage n = 4 array = [1, 2, 3, 4] print(rearrange_to_maximize_diff(array)) # Output could be one of [4, 1, 3, 2] or [4, 2, 3, 1]"},{"question":"Alice has a collection of `n` necklaces. Each necklace can be represented as a string of lowercase English letters. Alice wants to transform each of her necklaces into a \\"uniform\\" necklace. A necklace is considered \\"uniform\\" if all characters in the string are the same. Alice can perform the following operation any number of times (including zero): she can select two adjacent characters in the necklace and replace them with a new character. The new character must be the same as one of the selected characters. For example, in the string \\"abb\\", she can replace \\"bb\\" with \\"b\\", resulting in \\"ab\\". Alice wants to know if it\'s possible to transform each of her necklaces into a uniform necklace and, if possible, find the minimum number of operations required for each necklace. # Input - The first line contains a single integer `n` (1 leq n leq 100) — the number of necklaces. - Each of the next `n` lines contains a string s_i (1 leq |s_i| leq 100), representing one of Alice\'s necklaces. # Output For each necklace, print a single integer — the minimum number of operations required to transform the necklace into a uniform necklace. If it is not possible to make the necklace uniform, print `-1`. # Sample Input ``` 3 aab abc aaa ``` Output ``` 1 -1 0 ``` # Explanation In the first case, Alice can replace the first two characters \\"aa\\" with \\"a\\", resulting in \\"ab\\" (1 operation), and then replace \\"ab\\" with \\"a\\" (2 operations) to form a uniform necklace \\"a\\". Thus, the answer is `2`. However, with optimal replacements, it is possible in just one operation: replace \\"ab\\" with \\"a\\". In the second case, there is no way to convert \\"abc\\" into a uniform necklace, hence the answer is `-1`. In the third case, the necklace is already uniform, so no operations are needed. Note: The explanation added extra operations unnecessarily for the sake of clarity. Please opt for minimal necessary operations for accuracy.","solution":"def min_operations_to_uniform(necklaces): def min_operations(s): unique_chars = set(s) if len(unique_chars) == 1: return 0 if len(unique_chars) > 2: return -1 # If there are only 2 unique characters char1, char2 = unique_chars count_char1 = s.count(char1) count_char2 = s.count(char2) return min(count_char1, count_char2) results = [min_operations(necklace) for necklace in necklaces] return results"},{"question":"You are given a linked list with `n` nodes, where each node contains a unique integer. Your task is to determine the minimum number of swaps required to sort the linked list in non-decreasing order. Each swap operation swaps the values of any two nodes in the linked list. # Input The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000) — the number of nodes in the linked list. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 109) — the unique integers in the nodes of the linked list. # Output Print a single integer — the minimum number of swaps required to sort the linked list. # Example Sample Input 1 ``` 5 4 3 2 5 1 ``` Sample Output 1 ``` 3 ``` Sample Input 2 ``` 3 3 1 2 ``` Sample Output 2 ``` 2 ``` Sample Input 3 ``` 1 8 ``` Sample Output 3 ``` 0 ```","solution":"def min_swaps_to_sort_linked_list(n, arr): if n <= 1: return 0 # Create a list of tuples where each tuple is (element, original_index) indexed_arr = [(arr[i], i) for i in range(n)] # Sort the array by the elements indexed_arr.sort(key=lambda x: x[0]) # Create a visited array to mark which elements have been visited visited = [False] * n swap_count = 0 for i in range(n): # If already visited or already in the correct place if visited[i] or indexed_arr[i][1] == i: continue # Start of a new cycle cycle_size = 0 x = i while not visited[x]: visited[x] = True x = indexed_arr[x][1] cycle_size += 1 # If cycle size is more than 1, then (cycle_size - 1) swaps are required if cycle_size > 1: swap_count += cycle_size - 1 return swap_count"},{"question":"In a forest, there are several trees. Each tree has a certain number of fruits, and there are some pesky animals known as fruit thieves that can steal fruits from the trees without any pattern. You are given a sequence of integers representing the number of fruits on each tree initially, and a sequence of integers representing the number of fruits that were stolen from each tree. Your task is to find out the minimum number of fruits still remaining on each tree after all the thefts. If a tree ends up with negative fruits due to theft, consider it as 0 fruits remaining. The first line contains an integer n (1 ≤ n ≤ 105) — the number of trees in the forest. The second line contains n integers t1, t2, ..., tn (0 ≤ ti ≤ 109) — the initial number of fruits on each tree. The third line contains n integers s1, s2, ..., sn (0 ≤ si ≤ 109) — the number of fruits stolen from each tree. Output n integers — the minimum number of fruits remaining on each tree after the thefts. If a tree ends up with negative fruits, print 0 for that tree. # Example Input ``` 5 10 20 30 40 50 5 25 10 50 25 ``` Output ``` 5 0 20 0 25 ``` # Explanation In the first example, after the thefts: - Tree 1 had 10 fruits and lost 5, leaving 5 fruits. - Tree 2 had 20 fruits and lost 25, leaving 0 fruits (since it cannot go negative). - Tree 3 had 30 fruits and lost 10, leaving 20 fruits. - Tree 4 had 40 fruits and lost 50, leaving 0 fruits (since it cannot go negative). - Tree 5 had 50 fruits and lost 25, leaving 25 fruits.","solution":"def remaining_fruits(n, initial_fruits, stolen_fruits): Calculates the minimum number of fruits remaining on each tree after all the thefts. Parameters: n (int): The number of trees in the forest. initial_fruits (list of int): The initial number of fruits on each tree. stolen_fruits (list of int): The number of fruits stolen from each tree. Returns: list of int: The number of fruits remaining on each tree after the thefts. remaining = [max(0, initial_fruits[i] - stolen_fruits[i]) for i in range(n)] return remaining"},{"question":"You are given an integer array nums where the integers are sorted in ascending order. However, the array has been rotated at an unknown pivot, and you need to find the smallest element in the rotated array. The input begins with a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers: nums[1], nums[2], ..., nums[n] (-10^4 ≤ nums[i] ≤ 10^4). Write a program that finds the smallest element in the rotated array in O(log n) time complexity. Output a single integer — the smallest element in the array. **Examples:** - Input: ``` 5 4 5 6 7 0 1 2 ``` Output: ``` 0 ``` - Input: ``` 7 3 4 5 6 7 1 2 ``` Output: ``` 1 ```","solution":"def find_min_in_rotated_array(nums): Returns the smallest element in the given rotated sorted array. The function assumes the input array is non-empty and contains no duplicates. left, right = 0, len(nums) - 1 while left < right: mid = left + (right - left) // 2 if nums[mid] > nums[right]: left = mid + 1 else: right = mid return nums[left]"},{"question":"You are given a sequence of integers a, each representing the size of some distinct file in megabytes. Your task is to compress these files such that the final total size of compressed files is minimized. You can compress a file of size x to size bx/2c. However, you can only compress each file at most once. Write a function that takes the number of files, n (1 ≤ n ≤ 1000), and an array of integers a (1 ≤ ai ≤ 10^9) representing the sizes of these files. The function should return the minimal possible sum of the compressed files sizes. Example Consider the following input: n = 3 a = [4, 6, 8] You can compress the file sizes as follows: - Compress 4 to 2 - Compress 6 to 3 - Compress 8 to 4 The sum of the compressed sizes will be 2 + 3 + 4 = 9, which is minimal. In another example, with input: n = 3 a = [9, 15, 22] You might choose to compress: - Compress 9 to 4 - Compress 15 to 7 - Compress 22 to 11 The minimal sum of the compressed sizes will be 4 + 7 + 11 = 22. Function Signature: ```python def minimal_compressed_size(n: int, a: List[int]) -> int: pass ``` The function should return an integer representing the minimal possible sum of the file sizes after compression.","solution":"from typing import List def minimal_compressed_size(n: int, a: List[int]) -> int: Returns the minimal possible sum of the compressed file sizes. compressed_sizes = [size // 2 for size in a] minimal_sum = sum(compressed_sizes) return minimal_sum"},{"question":"Lee decided to build a new robot and program it to sort a list of integers. But this isn\'t an ordinary sorting problem—it has a twist! The robot can perform a special operation: it can reverse any contiguous subarray of the list at most once. Lee wants to know the minimum possible number of inversions in the sorted list using this special reverse operation. An inversion in a list is a pair of indices (i, j) such that i < j and arr[i] > arr[j]. Given an array of integers, write a program to determine the minimum number of inversions that can be obtained by reversing at most one contiguous subarray. Input: The first line of input contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the list. - The second line contains n space-separated integers a1, a2, ..., an (-10^5 ≤ ai ≤ 10^5), the elements of the list. Output: For each test case, print a single integer, the minimum number of inversions that can be obtained by reversing at most one contiguous subarray. Example: Input: 3 4 2 3 1 4 5 5 4 3 2 1 3 1 2 3 Output: 1 0 0 Explanation: In the first test case, the initial number of inversions is 2 (since (2, 1) and (3, 1) are inversions). By reversing the subarray [3, 1], the list becomes [2, 1, 3, 4], resulting in 1 inversion ((2, 1)). In the second test case, the list can be fully reversed to [1, 2, 3, 4, 5] achieving 0 inversions. In the third test case, the list is already sorted, so no inversions present, and the output is 0.","solution":"def min_inversions_after_reverse(t, test_cases): def count_inversions(arr): inv_count = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): if arr[i] > arr[j]: inv_count += 1 return inv_count def reverse_subarray_and_count(arr): n = len(arr) min_inv = count_inversions(arr) for i in range(n): for j in range(i, n): reversed_subarray = arr[:i] + arr[i:j+1][::-1] + arr[j+1:] inv_count = count_inversions(reversed_subarray) if inv_count < min_inv: min_inv = inv_count return min_inv results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(reverse_subarray_and_count(arr)) return results def process_input_output(io_list): t = io_list[0] test_cases = [] index = 1 for _ in range(t): n = io_list[index] arr = io_list[index+1] test_cases.append((n, arr)) index += 2 results = min_inversions_after_reverse(t, test_cases) return results"},{"question":"Implement a function to determine the shortest path that visits every node (often called the Traveling Salesperson Problem) for a given graph using dynamic programming and bit masking. Given a graph with N nodes (labeled from 0 to N-1) and M edges, find the shortest cycle that starts and ends at node 0 and visits every other node exactly once. If no such cycle exists, return -1. # Input - The first line contains two integers N and M (1 leq N leq 15, 0 leq M leq N times (N-1) / 2), the number of nodes and edges. - Each of the next M lines contains three integers u, v, and w (0 leq u, v < N, u neq v, 1 leq w leq 1000), representing an edge between nodes u and v with weight w. # Output - Print a single integer, the length of the shortest cycle visiting all nodes starting and ending at node 0. If there is no such cycle, print -1. # Example Input ``` 4 6 0 1 10 0 2 15 0 3 20 1 2 35 1 3 25 2 3 30 ``` Output ``` 80 ``` # Explanation The shortest cycle that starts at node 0, visits all other nodes, and returns to node 0 is 0 -> 1 -> 3 -> 2 -> 0 with a total weight of 10 + 25 + 30 + 15 = 80.","solution":"def tsp(N, M, edges): INF = float(\'inf\') # Create a weight matrix graph = [[INF] * N for _ in range(N)] for u, v, w in edges: graph[u][v] = w graph[v][u] = w # Initialize dp array dp = [[INF] * N for _ in range(1 << N)] dp[1][0] = 0 # Start from node 0 with only node 0 visited # Iterate over all possible subsets of nodes for mask in range(1 << N): for u in range(N): if mask & (1 << u): # If u is in the mask for v in range(N): if not mask & (1 << v) and graph[u][v] < INF: # If v is not in the mask and there is an edge u-v dp[mask | (1 << v)][v] = min(dp[mask | (1 << v)][v], dp[mask][u] + graph[u][v]) # Answer is the shortest path to complete the tour returning to node 0 answer = min(dp[(1 << N) - 1][i] + graph[i][0] for i in range(1, N)) return answer if answer < INF else -1 # Example usage edges = [ (0, 1, 10), (0, 2, 15), (0, 3, 20), (1, 2, 35), (1, 3, 25), (2, 3, 30), ] print(tsp(4, 6, edges)) # Output: 80"},{"question":"Grace is a passionate gardener who loves arranging her flowers in a beautiful linear array in her garden. She has a unique ordering for her flowers based on their colors and heights, and she wants to make sure that the flowers are sorted correctly in her array every morning. You are given an array of flowers where each flower is represented by a pair (color, height). Grace has a specific order in which she wants to sort the flowers. The sorting order is as follows: 1. First, by the color in a given predefined order. 2. If two flowers have the same color, then by height in ascending order. Your task is to implement a function that takes the array of flowers and the predefined color order, and returns a sorted array of flowers based on Grace\'s criteria. # Input - The first line contains an integer `k` (1 ≤ k ≤ 10), the number of distinct colors. - The second line contains `k` space-separated strings representing the colors in the desired sorted order. - The third line contains an integer `n` (1 ≤ n ≤ 1000), the number of flowers. - The next `n` lines each contain a string `c` and an integer `h` separated by a space, where `c` is the color of the flower and `h` is its height. # Output - Print the sorted array of flowers in the form of `c1 h1` on a new line for each flower in the sorted order. # Example Input: ``` 3 red yellow blue 5 red 5 blue 8 yellow 2 blue 1 red 3 ``` Output: ``` red 3 red 5 yellow 2 blue 1 blue 8 ``` # Explanation: In the example, the predefined color order is `red, yellow, blue`. The flowers need to be sorted first by this order, and then by the `height` in ascending order for flowers with the same color. - Red flowers: `(red 3), (red 5)` -> Already sorted by height - Yellow flowers: `(yellow 2)` -> Single flower - Blue flowers: `(blue 1), (blue 8)` -> Already sorted by height So, the final result will be in the above specified order.","solution":"def sort_flowers(k, color_order, n, flowers): Sorts the flowers based on the predefined color order and heights. Arguments: k -- number of distinct colors (int) color_order -- list of colors in the desired sorted order (list of strings) n -- number of flowers (int) flowers -- list of tuples where each tuple is (color, height) (list of tuples) Returns: Sorted list of flowers based on the predefined color order and heights. # Create a dictionary to map color to its order index color_to_index = {color: i for i, color in enumerate(color_order)} # Sort flowers by color order and then by height sorted_flowers = sorted(flowers, key=lambda flower: (color_to_index[flower[0]], flower[1])) return sorted_flowers"},{"question":"Tommy is exploring a magical forest consisting of n trees. Each tree has a certain number of fruits on it. Tommy wants to pick exactly k fruits from these trees, but there\'s a catch: once he starts picking fruits from a particular tree, he has to pick all the fruits from that tree before moving to another tree. Tommy can also select trees in any order he likes, but picking fruits from a tree that makes him exceed k fruits is not allowed. Additionally, Tommy wants to minimize the number of trees he picks fruits from, provided that he can still gather exactly k fruits. Given the number of fruits on each tree and the exact number of fruits Tommy wants to gather, determine the minimum number of trees Tommy needs to pick from to gather exactly k fruits. If it is not possible for Tommy to gather exactly k fruits, return -1. The first line contains two integers n and k (1 ≤ n ≤ 100,000, 1 ≤ k ≤ 1,000,000), representing the number of trees and the exact number of fruits Tommy wants to gather, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000), representing the number of fruits on each tree. Output a single integer representing the minimum number of trees Tommy needs to pick fruits from, or -1 if it is not possible to gather exactly k fruits using the given trees. Example: Input: 5 10 3 2 5 8 4 Output: 2 In the example provided, Tommy can pick 2 trees with 5 fruits each to gather exactly 10 fruits.","solution":"def min_trees_to_pick(n, k, fruits): from functools import lru_cache @lru_cache(None) def dp(remaining_k, current_index): if remaining_k == 0: return 0 if remaining_k < 0 or current_index >= n: return float(\'inf\') # Take current tree pick = 1 + dp(remaining_k - fruits[current_index], current_index + 1) # Skip current tree skip = dp(remaining_k, current_index + 1) return min(pick, skip) answer = dp(k, 0) return answer if answer != float(\'inf\') else -1"},{"question":"You are given an array of integers `arr` of length `n`. You are allowed to perform any number of operations where in each operation you can increment or decrement any integer in the array by 1. Your task is to make all elements of the array equal while minimizing the number of operations required. The first line of the input contains an integer `n` (1 ≤ n ≤ 1000) − the length of the array. The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 1000) − the elements of the array. Print a single number — the minimum number of operations required to make all elements of the array equal. **Input:** 2 1 2 **Output:** 1 In the given example, you can make both elements equal to 1 by decrementing the second element by 1, which requires only 1 operation.","solution":"def min_operations_to_equalize(arr): Returns the minimum number of operations required to make all elements of the array equal. arr.sort() n = len(arr) median = arr[n // 2] operations = sum(abs(x - median) for x in arr) return operations # Example usage n = 2 arr = [1, 2] print(min_operations_to_equalize(arr)) # Output: 1"},{"question":"Petya and Vasya are playing a game with an array of positive integers. The game is played in rounds and works as follows: In each round, Petya and Vasya both pick a non-empty subarray of the given array. They both try to maximize the sum of their respective subarray. However, there\'s a restriction. For both players, the chosen subarray should not have any common elements from the original array. The players always play optimally. Petya starts first. Given the array of integers, calculate the maximum possible difference between Petya\'s sum and Vasya\'s sum after each has chosen their subarray optimally. The first line of the input contains an integer n (1 ≤ n ≤ 100,000), the number of elements in the array. The second line contains n positive integers ai (1 ≤ ai ≤ 10^9), the elements of the array. Output a single integer, the maximum possible difference between Petya\'s sum and Vasya\'s sum. # Example Input: ``` 5 3 2 5 1 4 ``` Output: ``` 5 ``` Explanation: Petya can choose the subarray [5] with sum 5. Then, Vasya can choose the subarray [3, 4] with sum 7. The difference is 5 - 7 = -2. However, if Petya chooses the subarray [5, 1], then Vasya can choose the subarray [3, 4] giving a sum of 8 for Petya and 7 for Vasya. The difference is 8 - 7 = 1, which isn\'t the maximum difference. Petya can choose [5] with sum 5 and Vasya can choose [2], resulting in Petya\'s optimal strategy to maximize the difference, leading to Petya\'s maximum possible difference.","solution":"def max_difference(nums): Function to calculate the maximum possible difference between Petya\'s sum and Vasya\'s sum after both have chosen their optimal subarrays with no common elements. # Sorting the array in descending order to facilitate optimal subarray selection nums.sort(reverse=True) petya_sum = 0 vasya_sum = 0 # Petya takes the first maximum petya_sum = nums[0] # Vasya takes the next maximum which is always the even indexed element in this sorted list if len(nums) > 1: vasya_sum = nums[1] return petya_sum - vasya_sum"},{"question":"You are given a list of n strings, consisting of lowercase letters, and an integer m. Your task is to find the lexicographically smallest string that can be obtained after performing the following operations exactly m times: 1. Select any string from the list and any substring within this string. 2. Replace this substring with any permutation of itself. The first line consists of two integers n (1 ≤ n ≤ 1000), the number of strings in the list, and m (1 ≤ m ≤ 100), the number of operations to perform. The next n lines each contain a single string si (1 ≤ |si| ≤ 50), representing a string in the list. Output the lexicographically smallest string that can be obtained after performing the operations exactly m times. For example, if the list of strings is [\\"abdc\\", \\"xyz\\"] and m = 1, the result will be \\"abcd\\" because by choosing the string \\"abdc\\" and swapping the substring \\"bd\\" to \\"db\\", \\"abcd\\" is the lexicographically smallest string obtainable in one operation. Note: The characters in the resultant string should be strictly from the original string, even if operated upon. Example Input: ``` 2 1 abdc xyz ``` Example Output: ``` abcd ```","solution":"def smallest_lex_string(strings, m): Returns the lexicographically smallest string after performing m operations on the list of strings. Parameters: - strings (list of str): List of input strings. - m (int): Number of operations allowed. Returns: - str: Lexicographically smallest string. smallest_permutations = [min(\'\'.join(p) for p in permutations(s)) for s in strings] return min(smallest_permutations) from itertools import permutations # Example strings = [\\"abdc\\", \\"xyz\\"] m = 1 print(smallest_lex_string(strings, m)) # Output should be \\"abcd\\""},{"question":"You are given a string s of length n, consisting of letters \\"a\\" and \\"b\\". You can perform the following operations on the string: 1. Choose any two consecutive characters and swap them. 2. Replace any character \'a\' with \'b\' or any character \'b\' with \'a\'. Each swap operation has a cost of x and each replacement operation has a cost of y. Your task is to determine the minimum cost to make the string a palindrome. A palindrome is a string that reads the same backward as forward. # Input The first line contains two integers n (1 le n le 10^5), x, and y (1 le x, y le 10^9) — the length of the string, the cost of a swap operation, and the cost of a replacement operation respectively. The second line contains the string s consisting of letters \'a\' and \'b\'. # Output Print a single integer — the minimum cost to make the string a palindrome. # Example Input: ``` 5 3 2 ababa ``` Output: ``` 0 ``` Input: ``` 6 1 2 aaaaab ``` Output: ``` 1 ``` # Explanation In the first example, \\"ababa\\" is already a palindrome, so the cost is 0. In the second example, you can replace the last \'b\' with \'a\' to make \\"aaaaaa\\", which has a cost of 1 replacement operation, so the minimum cost is 2.","solution":"def min_cost_to_make_palindrome(n, x, y, s): Returns the minimum cost to make the string s a palindrome with the given costs for swap (x) and replacement (y). cost = 0 # Iterate only the first half of the string for i in range(n // 2): left_char = s[i] right_char = s[n - i - 1] if left_char != right_char: cost += min(x, y) return cost"},{"question":"The National Library has a large collection of books that are organized into shelves. Each shelf has a certain height limit and can hold a stack of books as long as the total height of the books does not exceed the height limit of the shelf. Each book has a certain height, and the National Library wants to maximize the number of books that can be placed on the shelves. You are given the number of shelves (m) and their height limits (h_i). Additionally, you are given the number of books (n) and their heights (b_j). Your task is to determine the maximum number of books that can be placed on the shelves such that no shelf’s height limit is exceeded. The first line of input contains two integers (m) and (n) (1 ≤ (m, n) ≤ 100,000). The second line contains (m) integers (h_1, h_2, ... , h_m) (1 ≤ (h_i) ≤ 1,000,000), the height limits of the shelves. The third line contains (n) integers (b_1, b_2, ... , b_n) (1 ≤ (b_j) ≤ 1,000,000), the heights of the books. Print the maximum number of books that can be placed on the shelves. Example: Input: 3 5 10 15 20 2 3 5 8 6 Output: 5 In the example, the books can be placed as follows: - Shelf 1: 2, 3, 5 (total height 10) - Shelf 2: 6, 8 (total height 14) - Shelf 3: No books So all 5 books are placed without exceeding any shelf\'s height limit.","solution":"def max_books_on_shelves(m, n, heights_limits, book_heights): Determine the maximum number of books that can be placed on the shelves without exceeding shelf height limits. :param m: int - number of shelves :param n: int - number of books :param heights_limits: List[int] - height limits of the shelves :param book_heights: List[int] - heights of the books :return: int - maximum number of books that can be placed on the shelves heights_limits.sort() book_heights.sort() used_books = 0 j = 0 for limit in heights_limits: current_height = 0 while j < n and current_height + book_heights[j] <= limit: current_height += book_heights[j] j += 1 used_books += 1 return used_books"},{"question":"Polycarp is hosting a card game night with his friends. Each player is given a hand of cards, and the goal is to determine the value of each player\'s best possible hand according to the game\'s rules. The game has a special scoring rule: the score of a hand is the maximum sum of values of any subset of the cards in the hand that doesn\'t contain two consecutive cards. Help Polycarp determine the maximum score for each player\'s hand. The first line contains a single integer T (1 leq T leq 10^4) — the number of test cases. The descriptions of the test cases follow. The first line of each test case contains a single integer n (1 leq n leq 10^5) — the number of cards in the player\'s hand. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^4) — the values of the cards in the player\'s hand. For each test case, print a single line containing the maximum score that the player can achieve. It is guaranteed that the sum of all n across all test cases does not exceed 10^6. **Example:** Input: ``` 3 4 1 2 9 4 5 3 2 5 10 7 3 1 20 3 ``` Output: ``` 10 15 20 ``` **Explanation:** - In the first test case, the possible subsets without consecutive cards are [1, 9], [1, 4], [2, 9], and [2, 4]. The maximum sum is 10 (from the subset [1, 9]). - In the second test case, the possible subsets without consecutive cards are [3, 5, 7], [3, 10], [2, 10], and [2, 7]. The maximum sum is 15 (from the subset [5, 10]). - In the third test case, the subsets are [1, 3] and [20]. The maximum sum is 20 (from the single card [20]).","solution":"def max_score_hand(T, cases): def max_non_consecutive_sum(cards): if not cards: return 0 if len(cards) == 1: return cards[0] n = len(cards) dp = [0] * n dp[0] = cards[0] dp[1] = max(cards[0], cards[1]) for i in range(2, n): dp[i] = max(dp[i - 1], dp[i - 2] + cards[i]) return dp[-1] results = [] for t in range(T): n, cards = cases[t] results.append(max_non_consecutive_sum(cards)) return results"},{"question":"In a universe far away, there are m planets connected by wormholes. Each wormhole connects a pair of planets and allows instantaneous travel in both directions between them. However, due to the peculiar nature of the universe, each wormhole has a maximum capacity, which means it can only be traversed by a spaceship carrying a certain maximum load. Your mission is to determine the maximum load that can be transported from planet A to planet B across a series of wormholes. Given the number of planets m, the number of wormholes w, and the specific maximum load capacity of each wormhole, you are to find the maximum load that can be transported from a starting planet A to a destination planet B. The first line of input contains three space-separated integers: m (2 ≤ m ≤ 100), w (1 ≤ w ≤ 1000), A, and B (1 ≤ A, B ≤ m, A ≠ B) — the number of planets, the number of wormholes, the starting planet, and the destination planet, respectively. The following w lines each contain three space-separated integers x, y, and c (1 ≤ x, y ≤ m, 1 ≤ c ≤ 10000) — indicating a wormhole connecting planets x and y with a maximum load capacity of c. Output the maximum load that can be transported from planet A to planet B. Example: Input: 5 6 1 5 1 2 100 2 3 50 3 5 100 1 4 200 4 5 300 2 4 150 Output: 200 Explanation: The optimal path from planet 1 to planet 5 is through planet 4 using the wormholes (1-4) with a capacity of 200 and (4-5) with a capacity of 300. Hence, the maximum load that can be transported is the minimum of these capacities, which is 200.","solution":"import heapq def max_load_transport(m, w, A, B, edges): def add_edge(graph, u, v, capacity): if u not in graph: graph[u] = [] if v not in graph: graph[v] = [] graph[u].append((v, capacity)) graph[v].append((u, capacity)) graph = {} for x, y, c in edges: add_edge(graph, x, y, c) pq = [(-float(\'inf\'), A)] max_load = {i: 0 for i in range(1, m + 1)} max_load[A] = float(\'inf\') while pq: curr_capacity, node = heapq.heappop(pq) curr_capacity = -curr_capacity if node == B: return curr_capacity for neighbor, capacity in graph[node]: new_load = min(curr_capacity, capacity) if new_load > max_load[neighbor]: max_load[neighbor] = new_load heapq.heappush(pq, (-new_load, neighbor)) return 0 # Example function call # m = 5 # w = 6 # A = 1 # B = 5 # edges = [ # (1, 2, 100), # (2, 3, 50), # (3, 5, 100), # (1, 4, 200), # (4, 5, 300), # (2, 4, 150) # ] # print(max_load_transport(m, w, A, B, edges)) # Output: 200"},{"question":"You are given a list of integers and a target sum. Your task is to determine if there exists a non-empty subset of the list whose sum is exactly equal to the target sum. If such a subset exists, output \\"YES\\", otherwise output \\"NO\\". The first line of the input contains an integer n (1 leq n leq 20) — the number of integers in the list. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^5) — the integers in the list. The third line contains one integer T (1 leq T leq 10^5) — the target sum. Output \\"YES\\" if there is a non-empty subset of the list whose sum is exactly equal to the target sum, otherwise output \\"NO\\".","solution":"from itertools import combinations def subset_sum_exists(n, a, T): Returns \\"YES\\" if there is a non-empty subset of the list whose sum is exactly equal to the target sum. Otherwise, returns \\"NO\\". # Iterate over all possible subset sizes (from 1 to n) for subset_size in range(1, n + 1): # Iterate over all possible subsets of that size for subset in combinations(a, subset_size): if sum(subset) == T: return \\"YES\\" return \\"NO\\""},{"question":"Imagine you are organizing a treasure hunt game on an infinite one-dimensional line. There are n distinct locations on this line, each represented by an integer coordinate, where treasures are hidden. Additionally, m distinct checkpoints are specified along the line, also represented by integer coordinates. The goal of the game is to move the treasures such that as many treasures as possible end up exactly at the checkpoint locations. The constraints for moving treasures are as follows: - You can move a treasure from its initial location to any other location on the line. - There is no limit to the number of treasures that can occupy a single checkpoint. Given n and m along with the locations of the treasures and checkpoints, you must determine the maximum number of checkpoints that can have at least one treasure after optimally moving the treasures. # Input - The first line contains two integers, n and m (1 ≤ n ≤ 100,000; 1 ≤ m ≤ 100,000), which represent the number of treasures and checkpoints, respectively. - The second line contains n distinct integers, representing the locations of treasures. - The third line contains m distinct integers, representing the locations of checkpoints. # Output - Output a single integer, the maximum number of checkpoints that can have at least one treasure after optimally moving the treasures. # Example Input ``` 5 5 1 2 8 10 15 2 3 5 8 12 ``` Output ``` 4 ``` Explanation One optimal way to move treasures: - Move treasure from position 1 to position 2. - Treasure at position 2 stays at position 2. - Move treasure from position 8 to position 8. - Move treasure from position 10 to position 3. - Move treasure from position 15 to position 12. The checkpoints 2, 3, 8, and 12 now have treasures, so the output is `4`.","solution":"def max_checkpoints_with_treasures(n, m, treasures, checkpoints): Determine the maximum number of checkpoints that can have at least one treasure after optimally moving the treasures. Parameters: n (int): Number of treasures m (int): Number of checkpoints treasures (list of int): Locations of treasures checkpoints (list of int): Locations of checkpoints Returns: int: Maximum number of checkpoints with at least one treasure after optimally moving the treasures # Sort both the treasure and checkpoint locations treasures.sort() checkpoints.sort() # Use two pointers to match treasures to checkpoints i, j = 0, 0 count = 0 while i < n and j < m: # Move to the next treasure if it\'s smaller or equal to the checkpoint if treasures[i] <= checkpoints[j]: count += 1 i += 1 j += 1 # The count of matched checkpoints is the result return count"},{"question":"A new cyber defense system has been installed at Arkady\'s company. The system detects and reports signals in the form of binary strings of length n. For each signal, an analyst needs to check whether it contains exactly k isolated 1s. An isolated 1 is a 1 that does not have a 1 immediately to its left or right (i.e., it is surrounded by 0s or is at the boundary of the string). Given a binary string of length n and an integer k, determine if the string contains exactly k isolated 1s. The input consists of: - A single integer n (1 ≤ n ≤ 10^5), the length of the binary string. - A binary string of length n. - A single integer k (0 ≤ k ≤ n), the required number of isolated 1s. Output \\"YES\\" if the string contains exactly k isolated 1s, otherwise print \\"NO\\". Example 1: ``` Input: 5 10101 3 Output: YES ``` Example 2: ``` Input: 8 10010010 2 Output: NO ``` Explanation: In the first example, the binary string \\"10101\\" contains exactly 3 isolated 1s: the 1s at positions 1, 3, and 5. In the second example, the binary string \\"10010010\\" contains isolated 1s at positions 2, 4, and 6, so the answer is \\"NO\\" because there are 3 isolated 1s instead of 2.","solution":"def check_isolated_ones(n, binary_string, k): count_isolated = 0 for i in range(n): if binary_string[i] == \'1\': if (i == 0 or binary_string[i-1] == \'0\') and (i == n-1 or binary_string[i+1] == \'0\'): count_isolated += 1 return \\"YES\\" if count_isolated == k else \\"NO\\" # Example usage # n = 5 # binary_string = \\"10101\\" # k = 3 # print(check_isolated_ones(n, binary_string, k)) # Output: YES # n = 8 # binary_string = \\"10010010\\" # k = 2 # print(check_isolated_ones(n, binary_string, k)) # Output: NO"},{"question":"Bob is working on an encryption algorithm that involves rotating strings. Specifically, he needs to rotate a given string to the right by a specified number of positions. However, some special conditions must be met for the rotation to be considered successful. A right rotation by k positions means that the string \\"abcdef\\" rotated by 2 positions to the right will become \\"efabcd\\". Bob wants to know if it is possible to make the rotated string equal to a target string by rotating the original string to the right by at most n positions, where n is the length of the string. Your task is to determine if it\'s possible to obtain the target string by rotating the original string to the right by any number of positions from 0 to n. # Input: - The first line contains a single integer n (1 leq n leq 100) - the length of the original and target strings. - The second line contains the original string of length n consisting of lowercase English letters. - The third line contains the target string of length n consisting of lowercase English letters. # Output: - Print \\"Yes\\" if it is possible to obtain the target string by rotating the original string to the right by any number of positions from 0 to n. - Otherwise, print \\"No\\". # Example: Example 1: **Input:** ``` 6 abcdef defabc ``` **Output:** ``` Yes ``` Example 2: **Input:** ``` 5 hello lohel ``` **Output:** ``` Yes ``` Example 3: **Input:** ``` 4 abcd dabc ``` **Output:** ``` No ``` **Explanation for Example 3:** Rotating \\"abcd\\" by 1, 2, or 3 positions will give \\"dabc\\", \\"cdab\\", and \\"bcda\\", respectively. None of these rotations produce the target string \\"dabc\\".","solution":"def is_rotation_possible(n, original, target): Determines if the target string can be obtained by right-rotating the original string by any number of positions from 0 to n. Args: n (int): The length of the original and target strings. original (str): The original string. target (str): The target string. Returns: str: \\"Yes\\" if the target string can be obtained by right-rotating the original string at any position, otherwise \\"No\\". if n == 0: return \\"No\\" if original != target else \\"Yes\\" expanded_string = original + original if target in expanded_string: return \\"Yes\\" else: return \\"No\\""},{"question":"Bob\'s coffee shop has been expanding quickly, and with growth comes complexity in managing the shop. Bob wants to implement a system to manage his inventory more efficiently. He has n types of products, each with an initial stock count. Every day, some changes to the inventory are reported: either sales, restocks, or checks of the stock count for a particular product. To ensure Bob\'s coffee shop runs smoothly, you need to design a system that can handle these updates efficiently. Bob needs to process q daily operations described as follows: - \\"sell x y\\" means that y units of product type x are sold. The stock count of product type x decreases by y. - \\"restock x y\\" means that y units of product type x are added to the inventory. The stock count of product type x increases by y. - \\"count x\\" means that Bob wants to check the current stock count of product type x. The first line contains two integers n and q (1 ≤ n, q ≤ 100,000), representing the number of product types and the number of operations, respectively. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1,000,000), where ai is the initial stock count of the i-th product type. Each of the next q lines contains one of the following operations: - \\"sell x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ 1,000,000) - \\"restock x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ 1,000,000) - \\"count x\\" (1 ≤ x ≤ n) Output the results for all \\"count x\\" operations as they occur, each on a new line. Example: Input: ``` 5 6 10 20 30 40 50 sell 3 5 count 3 restock 4 10 count 4 sell 1 10 count 1 ``` Output: ``` 25 50 0 ``` Explanation: - Initially, product 3 has 30 units. After selling 5 units, it has 25 units left. - The stock count for product 3 is checked, resulting in 25. - Product 4 is restocked with 10 units, increasing its stock from 40 to 50. - The stock count for product 4 is checked, resulting in 50. - Product 1 sells all its 10 units, resulting in 0. - The stock count for product 1 is checked, resulting in 0.","solution":"def manage_inventory(n, q, stock, operations): Handles n types of products and q daily operations to manage the inventory. Args: n (int): Number of product types. q (int): Number of operations. stock (list of int): Initial stock counts of the products. operations (list of str): List of operations to perform on the inventory. Returns: list of int: Results for all \\"count x\\" operations. results = [] for operation in operations: parts = operation.split() if parts[0] == \\"sell\\": x, y = int(parts[1]), int(parts[2]) stock[x-1] -= y elif parts[0] == \\"restock\\": x, y = int(parts[1]), int(parts[2]) stock[x-1] += y elif parts[0] == \\"count\\": x = int(parts[1]) results.append(stock[x-1]) return results"},{"question":"You are given a matrix A of size n x m, where each cell contains a single lowercase English letter. You need to find the largest square sub-matrix (including its length) within A where all four borders of the square are palindromes. A palindrome is a sequence that reads the same backward as forward. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and columns in the matrix A. - The following n lines each contain a string of length m, representing the rows of matrix A. Output: - Print two space-separated integers: the length of the largest square sub-matrix and its top left corner\'s row and column (1-indexed). If there are multiple answers, print any of them. Examples: Input 5 5 abcba babab cbabc babab abcba Output 5 1 1 Input 3 3 aba aba aba Output 3 1 1 Note: In the first example, the whole matrix itself forms the largest square with palindromic borders. In the second example, the entire 3x3 matrix is the answer.","solution":"def is_palindrome(seq): return seq == seq[::-1] def largest_palindromic_border(n, m, matrix): max_size = 0 top_left_coordinates = (0, 0) for size in range(min(n, m), 0, -1): for i in range(n - size + 1): for j in range(m - size + 1): top_row = matrix[i][j:j+size] bottom_row = matrix[i+size-1][j:j+size] left_col = \'\'.join(matrix[i+k][j] for k in range(size)) right_col = \'\'.join(matrix[i+k][j+size-1] for k in range(size)) if is_palindrome(top_row) and is_palindrome(bottom_row) and is_palindrome(left_col) and is_palindrome(right_col): return size, i+1, j+1 return max_size, top_left_coordinates[0] + 1, top_left_coordinates[1] + 1 def largest_palindromic_square_submatrix(n, m, matrix): return largest_palindromic_border(n, m, matrix)"},{"question":"In a distant galaxy, there exists a peculiar planet where the inhabitants love to create magic squares. A magic square is a square grid (n x n) of distinct integers from 1 to n^2 arranged such that the sum of the numbers in each row, column, and both main diagonals are all the same. As a grandmaster of magic squares, you are asked to determine if a given n x n grid is a magic square or not. The first line contains a single integer n (2 ≤ n ≤ 100) — the size of the grid. Next n lines contain n integers each, representing the grid elements where each integer is distinct and within the range [1, n^2]. Print \\"YES\\" if the given grid is a magic square, otherwise \\"NO\\". **Input:** ``` 3 8 1 6 3 5 7 4 9 2 ``` **Output:** ``` YES ``` **Input:** ``` 3 8 1 6 3 4 7 4 9 2 ``` **Output:** ``` NO ```","solution":"def is_magic_square(n, grid): # Calculate the sum of the first row to use as the target target_sum = sum(grid[0]) # Check the sum of all rows for row in grid: if sum(row) != target_sum: return \\"NO\\" # Check the sum of all columns for col in range(n): if sum(grid[row][col] for row in range(n)) != target_sum: return \\"NO\\" # Check the sum of the main diagonals if sum(grid[i][i] for i in range(n)) != target_sum: return \\"NO\\" if sum(grid[i][n-i-1] for i in range(n)) != target_sum: return \\"NO\\" # Check if the grid contains all distinct numbers from 1 to n^2 seen = set() for row in grid: for num in row: if num < 1 or num > n**2 or num in seen: return \\"NO\\" seen.add(num) return \\"YES\\""},{"question":"Boris the Robot is exploring a grid of size n x m. He starts at the top-left corner (1,1) and wants to reach the bottom-right corner (n,m). However, certain cells in the grid are blocked and cannot be traversed by Boris. Boris can move from a cell (i,j) to any of the four neighboring cells: (i-1,j), (i+1,j), (i,j-1), and (i,j+1), provided the respective cell is within the bounds of the grid and is not blocked. Write a program to determine if Boris can reach the bottom-right corner from the top-left corner. The first line contains two integers n and m (2 ≤ n, m ≤ 1000). Each of the next n lines contains m characters where each character is either \'.\' (denoting an open cell) or \'#\' (denoting a blocked cell). It is guaranteed that the cells (1,1) and (n,m) are open. Print \\"YES\\" (without the quotes) if Boris can reach the bottom-right corner, otherwise print \\"NO\\" (without the quotes).","solution":"def can_boris_reach_end(n, m, grid): Determines if Boris can reach the bottom-right corner from the top-left corner in a grid of size n x m taking into account blocked cells. Parameters: n (int): The number of rows in the grid. m (int): The number of columns in the grid. grid (List[str]): The grid represented as a list of strings where \'.\' denotes open cell and \'#\' denotes blocked cell. Returns: str: \\"YES\\" if Boris can reach the bottom-right corner, otherwise \\"NO\\". from collections import deque # Directions array for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Using deque for BFS queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() # Check if Boris reached the bottom-right corner if x == n-1 and y == m-1: return \\"YES\\" # Explore neighbors in all four directions for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the move is within the bounds and the cell is not visited and is an open cell if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) # If all possible moves are exhausted and we didn\'t reach the bottom-right corner return \\"NO\\""},{"question":"You are given a grid of size n times n where each cell has a value that can either be 0 or 1. Your task is to find the size of the largest square sub-grid consisting entirely of 1s within the given grid. The grid is represented as an array of strings, where each string represents a row in the grid and each character in the string represents the value in the corresponding cell of the grid. For example, a string \\"101\\" represents a row with values 1, 0, and 1 from left to right. Write a program to find the size of the largest square sub-grid consisting entirely of 1s. Input: - The first line contains a single integer n (1 leq n leq 750) — the size of the grid. - The next n lines each contain a string of length n consisting of \'0\' and \'1\' characters representing the grid. Output: - Print a single integer — the size of the largest square sub-grid consisting entirely of 1s. Example: Input: ``` 5 10101 11110 11111 11111 10001 ``` Output: ``` 3 ``` In the example above, the largest square sub-grid consisting entirely of 1s has a size of 3 times 3.","solution":"def largest_square_subgrid(grid, n): Returns the size of the largest square sub-grid consisting entirely of 1s in the given grid. if not grid: return 0 # Create a 2D dp array initialized to 0s dp = [[0] * n for _ in range(n)] max_size = 0 # Loop through the grid to fill dp array for i in range(n): for j in range(n): if grid[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size def parse_input_and_find_largest_square(input_data): data = input_data.split(\'n\') n = int(data[0]) grid = data[1:n+1] return largest_square_subgrid(grid, n)"},{"question":"A bag contains n marbles, each uniquely numbered from 1 to n. In a single move, you can pick any two marbles and replace them with a new marble whose number is the sum of the two marbles\' numbers. If the resulting number exceeds n, replace it with the number modulo n. Your task is to determine whether it is possible to make all the marbles in the bag have the same number after a finite number of moves. The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of marbles. Output \\"YES\\" if it is possible to make all the marbles have the same number, \\"NO\\" otherwise.","solution":"def can_make_all_marbles_same(n): Determines whether it is possible to make all the marbles in the bag have the same number after a finite number of moves. Args: n (int): The number of marbles Returns: str: \\"YES\\" if it is possible to make all the marbles have the same number, \\"NO\\" otherwise # If n is 1 then we already have all marbles the same if n == 1: return \\"YES\\" # If n is greater than 1, the only number you can have at end is gcd(1, 2, ..., n) = gcd of all numbers from 1 to n # Since 1 is always in the range (1 to n) and gcd(1, anything) is always 1, it is not possible to have # all numbers in range (1 to n) same except when it is 1 itself. return \\"NO\\""},{"question":"You are given an undirected graph represented as an adjacency list. Your task is to determine whether it is possible to color the vertices of the graph using at most two colors such that no two adjacent vertices share the same color. This problem can be seen as checking if the graph is bipartite. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of vertices in the graph. The second line contains an integer m (0 ≤ m ≤ 10000) — the number of edges. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating that there is an edge between vertex u and vertex v. Output \\"YES\\" if it is possible to color the graph using two colors without adjacent vertices sharing the same color, otherwise print \\"NO\\". # Example Input ``` 4 4 1 2 2 3 3 4 4 1 ``` Output ``` YES ``` Input ``` 3 3 1 2 2 3 3 1 ``` Output ``` NO ```","solution":"def is_bipartite(n, edges): from collections import deque, defaultdict def bfs_check(start): queue = deque([start]) colors[start] = 0 while queue: node = queue.popleft() for neighbor in adj_list[node]: if colors[neighbor] == -1: # not colored yet colors[neighbor] = 1 - colors[node] # assign opposite color queue.append(neighbor) elif colors[neighbor] == colors[node]: # neighbor has the same color return False return True adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) colors = [-1] * (n + 1) # -1 indicates that the node is not colored yet for i in range(1, n + 1): if colors[i] == -1: if not bfs_check(i): return \\"NO\\" return \\"YES\\" def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [(int(data[2 + 2*i]), int(data[2 + 2*i + 1])) for i in range(m)] print(is_bipartite(n, edges)) if __name__ == \\"__main__\\": main()"},{"question":"In a famous board game, there is a rectangular board of size m times n, and two players alternately place one of two types of non-overlapping tiles on the board. The two types are: 1. A tile of size 1 times 2 2. A tile of size 2 times 1 Each player tries to place a tile in such a way that it leaves fewer possible moves for the opponent. The game continues until neither player can place a tile on the board. The player who cannot make a move loses the game. Given the dimensions of the board, determine if the player who makes the first move (starting player) can always win, assuming both players play optimally. The first line contains two integers m and n (1 leq m, n leq 1000) — the dimensions of the board. Output \\"YES\\" if the starting player has a winning strategy and \\"NO\\" otherwise. # Examples Input ``` 4 3 ``` Output ``` YES ``` Input ``` 3 3 ``` Output ``` NO ``` # Explanation In the first example, the board has even cells (4 times 3 = 12), and the starting player can always ensure that they take the last available space by placing the tiles efficiently. In the second example, the board has odd cells (3 times 3 = 9), and the second player can always mirror the moves of the first player, eventually winning.","solution":"def first_player_wins(m, n): Determines if the first player has a winning strategy on an m x n board, assuming both players play optimally. :param m: integer, number of rows :param n: integer, number of columns :return: \\"YES\\" if the first player has a winning strategy, \\"NO\\" otherwise # Calculate the total number of cells on the board total_cells = m * n # If the total number of cells is even, the first player has a winning strategy # If the total number of cells is odd, the second player has a winning strategy if total_cells % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a grid of size n x m consisting of lowercase Latin letters. A substring is a non-empty sequence of consecutive cells in the grid which can be read either from left to right or from top to bottom within a single row or column, respectively. Your task is to find the length of the longest substring in this grid that is a palindrome. A palindrome is a sequence of characters that reads the same backward as forward. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) indicating the number of rows and columns in the grid. The next n lines contain m characters each, representing the grid. Print a single integer — the length of the longest palindromic substring in the grid. Example Input: 4 4 abcc cbad abcd dcba Example Output: 3 Explanation: In the given grid, one possible longest palindromic substring of length 3 is \\"cdc\\" found in column 2.","solution":"def longest_palindromic_substring(grid): def is_palindrome(s): return s == s[::-1] def max_palindrome_length_in_line(line): max_len = 1 n = len(line) for i in range(n): for j in range(i+1, n+1): if is_palindrome(line[i:j]): max_len = max(max_len, j - i) return max_len n = len(grid) m = len(grid[0]) max_length = 1 # check every row for palindromes for row in grid: max_length = max(max_length, max_palindrome_length_in_line(row)) # check every column for palindromes for col in range(m): column_string = \'\'.join(grid[row][col] for row in range(n)) max_length = max(max_length, max_palindrome_length_in_line(column_string)) return max_length"},{"question":"You are given a list of integers representing the maximum number of hours you can spend on various activities in a week. Your goal is to distribute your weekly time, which totals 168 hours (7 days * 24 hours), across these activities in such a way that you maximize the number of activities you can fully complete. Each activity requires a distinct integer amount of hours per week. Write a function that takes an integer `n` (2 ≤ n ≤ 1000), the number of activities, followed by a second line of `n` integers, each representing the maximum number of hours you can allocate to the corresponding activity. Your task is to determine the maximum number of activities you can fully complete within the given 168 hours. **Input:** - The first line contains the integer `n`. - The second line contains `n` space-separated integers representing the hours needed for each activity. **Output:** - Print a single integer, the maximum number of activities you can fully complete within 168 hours. **Example 1:** ``` Input: 5 50 30 20 70 10 Output: 4 ``` **Example 2:** ``` Input: 4 100 60 30 50 Output: 3 ``` **Explanation:** In Example 1, you can fully complete the activities requiring 50, 30, 20, and 10 hours for a total of 110 hours. The activity requiring 70 hours cannot be completed within the remaining time. In Example 2, you can fully complete the activities requiring 60, 50, and 30 hours for a total of 140 hours. The activity requiring 100 hours cannot be fully completed with the remaining 28 hours.","solution":"def max_activities(n, hours): Returns the maximum number of activities that can be fully completed within 168 hours. :param n: Integer, the number of activities :param hours: List of integers, each representing the hours needed for each activity :return: Integer, maximum number of activities that can be fully completed # Sort the list of hours in ascending order hours.sort() # Initialize total time used and count of activities total_time = 0 activity_count = 0 # Iterate through the sorted list and accumulate time for hour in hours: if total_time + hour <= 168: total_time += hour activity_count += 1 else: break # Exit loop since we can\'t add more activities return activity_count"},{"question":"Johnny loves prime numbers, and he recently learned about twin primes. A twin prime is a pair of prime numbers that differ by exactly 2, like (3, 5), (11, 13), etc. Johnny likes to create lists of prime numbers and write programs that help him find interesting properties about them. Given a number n, Johnny wants to know how many twin prime pairs exist among the prime numbers less than or equal to n. Your task is to help Johnny by writing a program that takes an integer n as input and outputs the number of twin prime pairs among primes less than or equal to n. The first and only line of input contains a single integer n (2 ≤ n ≤ 10^6). The output should be a single integer representing the number of twin prime pairs less than or equal to n. # Example Input ``` 20 ``` Output ``` 4 ``` Explanation The prime numbers less than or equal to 20 are [2, 3, 5, 7, 11, 13, 17, 19]. The twin prime pairs among them are (3, 5), (5, 7), (11, 13), and (17, 19), making a total of 4 pairs.","solution":"def count_twin_primes(n): Returns the number of twin prime pairs less than or equal to n. :param n: The upper limit integer. :return: Number of twin prime pairs. if n < 2: return 0 # Sieve of Eratosthenes to find all primes up to n is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 # Find twin prime pairs twin_prime_count = 0 for i in range(2, n - 1): if is_prime[i] and is_prime[i + 2]: twin_prime_count += 1 return twin_prime_count"},{"question":"Lena is organizing a coding competition, and she wants to ensure that each participant has a unique ID number. However, due to a limited range of numbers that can be assigned, she needs to allocate IDs in such a way that the sum of any two IDs is not present as an ID for any participant. You are given an integer n (1 ≤ n ≤ 1000), which represents the number of participants. Your task is to generate n unique IDs such that for any two distinct IDs (i) and (j), (i + j) is not an ID assigned to any participant. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000). Output: - If there is a solution, print \\"YES\\" on the first line. On the second line, print n unique integers representing the IDs assigned to the participants. - If there is no solution, print \\"NO\\". Example 1: ``` Input: 3 Output: YES 1 2 4 ``` Example 2: ``` Input: 4 Output: YES 1 3 4 5 ``` Example 3: ``` Input: 5 Output: NO ``` Explanation: In the first example, assigning the IDs 1, 2, and 4 ensures that the sum of any two IDs is not in the set of IDs. In the second example, the IDs 1, 3, 4, and 5 also satisfy the condition. In the third example, no such set of 5 unique IDs can be found that meet the requirement.","solution":"def unique_ids(n): Generates n unique IDs such that for any two distinct IDs i and j, i + j is not an ID assigned to any participant. Parameters: n (int): number of participants. Returns: tuple: (\\"YES\\", List of IDs) or (\\"NO\\",) if n == 1: return (\\"YES\\", [1]) elif n % 2 == 1: return (\\"NO\\", ) ids = list(range(1, n + 1)) return (\\"YES\\", ids)"},{"question":"Maria is participating in a game of treasure hunt in which she has to navigate through a grid of size n x n. The grid cells contain either empty space denoted by \\".\\", treasure denoted by \\"T\\", or obstacles denoted by \\"#\\". Maria starts at the top-left corner of the grid at (1, 1) and aims to reach the bottom-right corner at (n, n). She can move one cell at a time either to the right or down, but she cannot move through cells that contain obstacles. During her journey, Maria wants to collect as many treasures as possible. Help Maria figure out the maximum number of treasures she can collect on her way to the bottom-right corner of the grid. The first line of the input contains an integer n (2 ≤ n ≤ 100) — the size of the grid. Each of the next n lines contains a string consisting of n characters denoting the grid. Each character in the grid string is one of the following: \'.\', \'T\', or \'#\'. Output a single integer — the maximum number of treasures Maria can collect on a valid path from (1, 1) to (n, n). Example: Input: 3 ... #.T ..T Output: 2 Explanation: In this example, Maria can collect a maximum of 2 treasures by following the path (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3).","solution":"def max_treasures(n, grid): # Create a 2D dp array with initial values dp = [[-1] * n for _ in range(n)] # Base case: starting position if grid[0][0] == \'T\': dp[0][0] = 1 elif grid[0][0] == \'.\': dp[0][0] = 0 # Fill the dp array with the maximum treasures collected for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = -1 # No path through obstacles elif grid[i][j] == \'T\': if i > 0 and dp[i-1][j] != -1: dp[i][j] = max(dp[i][j], dp[i-1][j] + 1) if j > 0 and dp[i][j-1] != -1: dp[i][j] = max(dp[i][j], dp[i][j-1] + 1) else: # grid[i][j] == \'.\' if i > 0 and dp[i-1][j] != -1: dp[i][j] = max(dp[i][j], dp[i-1][j]) if j > 0 and dp[i][j-1] != -1: dp[i][j] = max(dp[i][j], dp[i][j-1]) # The result is in the bottom-right cell of dp return dp[n-1][n-1] if dp[n-1][n-1] != -1 else 0"},{"question":"You are given a positive integer n representing the total number of stones arranged in a line. The stones have different colors, denoted by distinct integers. Your aim is to form a sequence such that no two adjacent stones have the same color. However, due to limited resources, you are allowed to change the color of at most one stone. Find the minimum possible number of colors you need to use in the final sequence. If it\'s not possible to make the sequence such that no two adjacent stones have the same color even with one change, output -1. Input - The first line contains a single integer t (1 leq t leq 100) — the number of test cases. - The first line of each test case contains an integer n (1 leq n leq 100) — the number of stones. - The second line of each test case contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 1000) — the colors of the stones. Output For each test case, output a single integer — the minimum number of colors needed to ensure that no two adjacent stones have the same color with at most one change, or -1 if it\'s not possible. Example Input: 3 5 3 1 3 1 3 6 1 2 1 2 3 2 4 1 1 1 1 Output: 2 3 -1 Explanation: - In the first test case, by changing the color of either the second or the fourth stone to a different one (e.g., changing 1 to 2), we can achieve the desired sequence. - In the second test case, the sequence is already valid, so no change is needed. - In the third test case, even with one change, we cannot achieve the required sequence as there will always be adjacent stones with the same color.","solution":"def min_colors_needed(t, test_cases): Returns the minimum possible number of colors needed to ensure that no two adjacent stones have the same color with at most one change, or -1 if it\'s not possible. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains the number of stones (int) and a list of integers representing the colors of the stones. Returns: list of int: Minimum number of colors needed for each test case or -1 if not possible. results = [] for i in range(t): n, stones = test_cases[i] if n == 1: results.append(1) # Only one stone, only one color needed continue conflicts = 0 for j in range(1, n): if stones[j] == stones[j - 1]: conflicts += 1 # Count adjacent conflicts if conflicts == 0: # No conflicts, the sequence is already valid as is results.append(len(set(stones))) elif conflicts == 1: # Only one adjacent conflict, one change will solve the problem results.append(len(set(stones))) else: # More than one conflict results.append(-1) return results"},{"question":"Given an array of integers, you need to perform multiple operations. Each operation consists of selecting a contiguous subarray and reversing it. Your task is to calculate the minimum number of operations required to make the array sorted in non-decreasing order. The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case contains two lines. The first line contains a single integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. For each test case, print the minimum number of operations required to sort the array. Example input: ``` 2 4 4 3 2 1 5 1 3 2 5 4 ``` Example output: ``` 1 2 ```","solution":"def minimum_operations_to_sort(t, cases): This function calculates the minimum number of operations required to make each array in the cases sorted in non-decreasing order by reversing contiguous subarrays. Parameters: t (int): the number of test cases cases (list of tuples): each tuple contains an integer n and a list of integers representing the array Returns: list: the minimum number of operations required for each array to be sorted result = [] for case in cases: n, a = case # Check if array is already sorted if all(a[i] <= a[i+1] for i in range(n - 1)): result.append(0) # Check if reversing the entire array once will sort it elif all(a[i] <= a[i+1] for i in range(n - 2)) or all(a[i] >= a[i+1] for i in range(n - 1)): result.append(1) else: result.append(2) return result"},{"question":"You are given a list of integers and will perform a series of range update and range query operations on this list. Specifically, you will need to handle the following types of operations: 1. Add a given value to each element in a specified range. 2. Find the maximum value in a specified range. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of elements in the list and the number of operations to be performed, respectively. The second line contains n integers — the initial elements of the list. Each of the next m lines contains an operation, which is either of the two types: 1. \\"1 l r v\\" (1 ≤ l ≤ r ≤ n; -10^9 ≤ v ≤ 10^9) — add value v to each element in the range [l, r]. 2. \\"2 l r\\" (1 ≤ l ≤ r ≤ n) — find the maximum value in the range [l, r]. Output the result of each query of the second type. Example: Input: ``` 5 4 2 1 5 3 4 1 2 4 2 2 3 5 1 1 3 -2 2 1 5 ``` Output: ``` 6 2 ``` Explanation: - Initially, the list is: [2, 1, 5, 3, 4]. - After the first operation (add 2 to each element in range [2, 4]), the list becomes: [2, 3, 7, 5, 4]. - The result of the second operation (find max in range [3, 5]) is 7. - After the third operation (add -2 to each element in range [1, 3]), the list becomes: [0, 1, 5, 5, 4]. - The result of the fourth operation (find max in range [1, 5]) is 5. Your task is to efficiently perform the series of operations and report the results for the range maximum queries.","solution":"class RangeOperations: def __init__(self, n, array): self.n = n self.array = array self.lazy = [0] * (4 * n) self.tree = [0] * (4 * n) self.build(0, 0, n - 1) def build(self, node, start, end): if start == end: self.tree[node] = self.array[start] else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 self.build(left_child, start, mid) self.build(right_child, mid + 1, end) self.tree[node] = max(self.tree[left_child], self.tree[right_child]) def range_update(self, l, r, value): def update(node, start, end, l, r, value): if self.lazy[node] != 0: self.tree[node] += self.lazy[node] if start != end: self.lazy[2 * node + 1] += self.lazy[node] self.lazy[2 * node + 2] += self.lazy[node] self.lazy[node] = 0 if start > end or start > r or end < l: return if start >= l and end <= r: self.tree[node] += value if start != end: self.lazy[2 * node + 1] += value self.lazy[2 * node + 2] += value return mid = (start + end) // 2 update(2 * node + 1, start, mid, l, r, value) update(2 * node + 2, mid + 1, end, l, r, value) self.tree[node] = max(self.tree[2 * node + 1], self.tree[2 * node + 2]) update(0, 0, self.n - 1, l, r, value) def range_query(self, l, r): def query(node, start, end, l, r): if self.lazy[node] != 0: self.tree[node] += self.lazy[node] if start != end: self.lazy[2 * node + 1] += self.lazy[node] self.lazy[2 * node + 2] += self.lazy[node] self.lazy[node] = 0 if start > end or start > r or end < l: return float(\'-inf\') if start >= l and end <= r: return self.tree[node] mid = (start + end) // 2 left_query = query(2 * node + 1, start, mid, l, r) right_query = query(2 * node + 2, mid + 1, end, l, r) return max(left_query, right_query) return query(0, 0, self.n - 1, l, r) def solve_operations(n, m, initial_array, operations): ro = RangeOperations(n, initial_array) result = [] for operation in operations: op = operation[0] if op == 1: _, l, r, v = operation ro.range_update(l - 1, r - 1, v) elif op == 2: _, l, r = operation result.append(ro.range_query(l - 1, r - 1)) return result"},{"question":"In a distant land, there is a labyrinth represented as a grid of cells. Each cell can either be passable or impassable. You are given a grid of size n × m where each cell is either \'.\' (passable) or \'*\' (impassable). You start at the top-left corner of the grid (1, 1) and want to reach the bottom-right corner (n, m). You can move from one cell to an adjacent cell (up, down, left, or right), but you cannot move into an impassable cell. Your task is to determine the minimum number of moves required to reach the bottom-right corner of the grid from the top-left corner. If it is not possible, print -1. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns in the grid. Each of the next n lines contains m characters, each of which is either \'.\' or \'*\'. Print one integer — the minimum number of moves required to get from the top-left corner to the bottom-right corner. If there is no such path, print -1. # Example Input ``` 5 5 ..... .***. .*... .***. ..... ``` Output ``` 8 ``` # Explanation A possible path is: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) -> (4,3) -> (5,3) -> (5,4) -> (5,5) The number of moves in this path is 8. Hence, the output is 8.","solution":"from collections import deque def min_moves_to_exit(n, m, grid): Returns the minimum number of moves required to reach the bottom-right corner of the grid from the top-left corner. If not possible, returns -1. # Directions arrays (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Check if the start or end is blocked if grid[0][0] == \'*\' or grid[n-1][m-1] == \'*\': return -1 # BFS setup queue = deque([(0, 0, 0)]) # (row, column, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() # Check if we\'ve reached the bottom-right corner if x == n-1 and y == m-1: return steps # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"Evaluate a sequence of parentheses and determine if it is valid. A sequence of parentheses is valid if every opening parenthesis has a corresponding closing parenthesis and they are correctly ordered. The input will consist of a single line containing a sequence of parentheses. The length of the sequence will be between 1 and 10^5. Output \\"YES\\" if the sequence is valid, and \\"NO\\" otherwise. Example 1: Input: (()) Output: YES Example 2: Input: (()()) Output: YES Example 3: Input: (()( Output: NO","solution":"def is_valid_parentheses(sequence): Determines if the sequence of parentheses is valid. stack = [] for char in sequence: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"Alex is organizing a coding competition and needs to create groups from a list of participants. Each group must consist of exactly 3 participants. However, to ensure diversity, no two participants in the same group should share the same skill level. A skill level is an integer that represents the participant\'s proficiency. Help Alex determine the maximum number of groups that can be formed under these constraints. The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of participants. The second line contains `n` integers, representing the skill levels of the participants. Each skill level is a positive integer not exceeding 10,000. Output a single integer — the maximum number of groups that can be formed. # Example Input 8 1 2 3 3 2 1 5 5 Output 2 Explanation In the given example, one possible way to form 2 groups while satisfying the constraints is: - Group 1: 1, 2, 3 - Group 2: 1, 2, 5 Each group has exactly 3 participants, and no two participants in the same group share the same skill level.","solution":"from collections import Counter def max_groups(n, skill_levels): Determines the maximum number of groups of 3 participants that can be formed, with each participant in a group having a unique skill level. Parameters: n (int): The number of participants. skill_levels (list of int): The skill levels of participants. Returns: int: The maximum number of groups that can be formed. skill_count = Counter(skill_levels) group_count = 0 while True: # Try to form as many groups as we can in each iteration current_group_size = 0 for skill in skill_count: if skill_count[skill] > 0: skill_count[skill] -= 1 current_group_size += 1 if current_group_size == 3: break if current_group_size < 3: break group_count += 1 return group_count"},{"question":"Alyssa loves baking and is very keen on getting just the right amount of ingredients. To streamline her process, she decided to write a function that helps her with recipes by scaling the ingredients up or down based on the number of servings required. You need to help Alyssa write this function. Given a list of ingredients with their respective quantities for a default number of servings, the function should adjust these quantities for a desired number of servings. Write a function `adjust_recipe` that takes three arguments: 1. `default_servings`: an integer representing the default number of servings the recipe provides. 2. `desired_servings`: an integer representing the number of servings Alyssa wants to adjust the recipe for. 3. `ingredients`: a list of tuples where each tuple contains a string representing the name of an ingredient and a float representing the quantity of that ingredient for the default number of servings. The function should return a list of tuples where each tuple contains the name of the ingredient and the adjusted quantity for the desired number of servings. # Input - An integer `default_servings` (1 leq text{default_servings} leq 100) - An integer `desired_servings` (1 leq text{desired_servings} leq 100) - A list of tuples `ingredients` of length between 1 and 50, where each tuple contains: - A string representing the name of the ingredient with length between 1 and 50. - A float representing the quantity of that ingredient for the default number of servings, which is between 0.1 and 1000. # Output - A list of tuples where each tuple contains: - A string representing the name of the ingredient. - A float representing the adjusted quantity rounded to 2 decimal places. # Example ```python default_servings = 4 desired_servings = 2 ingredients = [(\\"flour\\", 200.0), (\\"sugar\\", 100.0), (\\"eggs\\", 2.0)] adjust_recipe(default_servings, desired_servings, ingredients) ``` # Output ```python [(\\"flour\\", 100.0), (\\"sugar\\", 50.0), (\\"eggs\\", 1.0)] ``` # Constraints - Ensure to handle floating-point arithmetic precisely. - Assume that the default_servings and desired_servings are always positive integers.","solution":"def adjust_recipe(default_servings, desired_servings, ingredients): Adjusts the quantity of ingredients based on the desired number of servings. :param default_servings: The default number of servings the recipe provides. :param desired_servings: The desired number of servings. :param ingredients: List of tuples (ingredient name, quantity) for the default number of servings. :return: List of tuples (ingredient name, adjusted quantity) for the desired number of servings. adjustment_factor = desired_servings / default_servings adjusted_ingredients = [ (ingredient, round(quantity * adjustment_factor, 2)) for ingredient, quantity in ingredients ] return adjusted_ingredients"},{"question":"Polycarp has a list of n stock prices for a particular stock over n consecutive days. He wants to know the maximum profit he could make by buying the stock on one day and selling it on another later day. Keep in mind that he can make only one buy and one sell transaction. The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of days. The second line contains n space-separated integers, where the i-th integer is the stock price on the i-th day (1 ≤ price_i ≤ 10^9). Your task is to calculate the maximum possible profit Polycarp can achieve. If it is not possible to achieve any profit, output 0. For example, in the first sample, buying on day 2 at 1 and selling on day 4 at 6 gives a profit of 5. In the second sample, the prices are falling every day, so no profit can be achieved. Example 1: ``` Input: 6 7 1 5 3 6 4 Output: 5 ``` Example 2: ``` Input: 5 7 6 4 3 1 Output: 0 ```","solution":"def max_profit(n, prices): Calculate the maximum possible profit from a list of stock prices. :param n: Integer, number of days :param prices: List of integers, stock prices on each day :return: Integer, maximum profit achievable if n <= 1: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"You are an archaeologist working on deciphering ancient inscriptions. Recently, you have come across a pattern of characters on a stone tablet. The stone tablet has a long string of lowercase alphabetic characters. Your task is to determine a specific substring that has unique properties. Given a string, you need to find the length of the longest substring that is palindromic. A palindromic substring is a sequence of characters that reads the same backward as forward. The first line contains an integer t (1 ≤ t ≤ 1000) - the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 1000), consisting of lowercase alphabetic characters only. For each test case, output the length of the longest palindromic substring. # Input: 1. t - the number of test cases. 2. For each test case, a string s consisting of lowercase alphabetic characters. # Output: For each test case, output a single integer - the length of the longest palindromic substring in the given string. # Example: Input: 3 babad cbbd a Output: 3 2 1 # Explanation: 1. For the string \\"babad\\", the longest palindromic substring is \\"bab\\" or \\"aba\\" which has a length of 3. 2. For the string \\"cbbd\\", the longest palindromic substring is \\"bb\\" which has a length of 2. 3. For the string \\"a\\", the longest palindromic substring is \\"a\\" which has a length of 1.","solution":"def longest_palindromic_substring_length(s): n = len(s) if n == 0: return 0 # Table to store the palindromic check dp = [[False] * n for _ in range(n)] max_length = 1 # Every single character is a palindrome for i in range(n): dp[i][i] = True start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if length > max_length: start = i max_length = length return max_length def longest_palindromic_lengths(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_substring_length(s)) return results"},{"question":"Lila has a sequence of n integers, which she needs to update and query. The sequence is initially filled with zeros. Lila must process q queries, where each query can be one of the following types: 1. **Update**: Add a value to each element in a specific range of the sequence. 2. **Query**: Find the maximum value in a specific range of the sequence. Your task is to help Lila process these queries efficiently. The first line of the input contains two integers n and q (1 leq n, q leq 10^5) – the number of elements in the sequence and the number of queries, respectively. Each of the following q lines contains one of the two possible types of queries: - **1 l r x**: Add the value x (-10^9 leq x leq 10^9) to each element in the sequence from index l to index r (1-based). - **2 l r**: Find and print the maximum value in the sequence from index l to index r (1-based). It’s guaranteed that all given ranges are valid. # Example **Input:** ``` 5 4 1 1 3 5 2 1 5 1 2 5 -2 2 2 4 ``` **Output:** ``` 5 5 3 ```","solution":"class RangeUpdateAndQuery: def __init__(self, n): self.n = n self.array = [0] * n self.lazy = [0] * (n + 1) def update_range(self, l, r, x): self.lazy[l - 1] += x if r < self.n: self.lazy[r] -= x def process_lazy(self): current_add = 0 for i in range(self.n): current_add += self.lazy[i] self.array[i] += current_add self.lazy = [0] * (self.n + 1) def query_range(self, l, r): self.process_lazy() return max(self.array[l-1:r]) def process_queries(n, q, queries): raq = RangeUpdateAndQuery(n) results = [] for query in queries: if query[0] == 1: _, l, r, x = query raq.update_range(l, r, x) elif query[0] == 2: _, l, r = query result = raq.query_range(l, r) results.append(result) return results # Parsing input and applying solution if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) q = int(data[1]) queries = [] index = 2 for _ in range(q): query_type = int(data[index]) if query_type == 1: l = int(data[index + 1]) r = int(data[index + 2]) x = int(data[index + 3]) queries.append([1, l, r, x]) index += 4 elif query_type == 2: l = int(data[index + 1]) r = int(data[index + 2]) queries.append([2, l, r]) index += 3 results = process_queries(n, q, queries) for result in results: print(result)"},{"question":"You are given two positive integers n and k. You need to construct a permutation p of the first n positive integers such that the following condition is satisfied: there exists an integer m (1 le m le n) where 1, 2, ..., k appear as the first k numbers in some order, and the remaining numbers appear after them. The first line of the input contains a single integer t (1 le t le 1000) — the number of test cases. Each of the following t lines contains two integers n and k (1 le k le n le 10^4). Output one valid permutation per test case on a separate line. If there are multiple valid permutations, print any of them. # Sample Input ``` 3 5 3 4 2 6 6 ``` # Sample Output ``` 1 2 3 4 5 2 1 3 4 1 2 3 4 5 6 ``` # Explanation In the first output case, the permutation starts with the numbers `1, 2, 3` in some order, followed by the rest of the numbers `4, 5`. In the second case, the permutation starts with the numbers `2, 1` in any order, followed by the rest of the numbers `3, 4`. In the third case, since `k` equals `n`, we can just output the sequence from `1` to `6` in any order.","solution":"def construct_permutation(t, test_cases): Constructs a valid permutation for each test case where the first k numbers are in some order and remaining numbers follow. Parameters: t (int): The number of test cases. test_cases (list): A list of tuples (n, k) for each test case. Returns: list: A list of valid permutations, each as a string of space-separated integers. results = [] for n, k in test_cases: # Construct the first k numbers first_part = list(range(1, k + 1)) # Construct the remaining n - k numbers second_part = list(range(k + 1, n + 1)) # Combine both to form the full permutation permutation = first_part + second_part results.append(\\" \\".join(map(str, permutation))) return results"},{"question":"The annual programming competition has begun, and Alex is excited to participate. The competition includes a problem involving binary trees, which Alex has been practicing for. The task is to determine whether a given binary tree is a valid Binary Search Tree (BST). A Binary Search Tree is defined as follows: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. Given the root of a binary tree, you need to write a function to check whether the tree is a valid BST. You are provided with the definition of the TreeNode class: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Function Signature ```python def isValidBST(root: TreeNode) -> bool: ``` # Input - The function accepts a single argument, `root`, which is the root node of the binary tree (an instance of TreeNode or `None`). # Output - Return `True` if the given tree is a BST; otherwise, return `False`. # Constraints - The number of nodes in the tree is in the range `[1, 10^4]`. - The value of each node is in the range `[-10^4, 10^4]`. # Examples **Example 1:** ``` Input: 2 / 1 3 Output: True ``` **Example 2:** ``` Input: 5 / 1 4 / 3 6 Output: False Explanation: The root node\'s value is 5 but the right child\'s value which is 4 is not greater than 5. ``` # Notes - You can assume the definition of the TreeNode class is provided and you don\'t need to redefine it. - Be sure to handle edge cases, such as an empty tree (`None` root), which by definition is considered a valid BST.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isValidBST(root: TreeNode) -> bool: def validate(node, low=float(\'-inf\'), high=float(\'inf\')): # An empty tree is a valid BST if not node: return True # If the current node\'s value does not satisfy the BST properties, return False if not (low < node.val < high): return False # Recursively validate the left and right subtrees return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root)"},{"question":"You are given two strings, s and t. You can perform operations on string s so that any character can be inserted at any position, any character can be deleted from any position, and any character can be replaced by another character. Your task is to transform string s into string t with the minimum number of operations. Write a program to find the minimum number of operations required to transform string s into string t. The first line of input contains an integer q (1 le q le 1000) — the number of queries. The following lines contain pairs of strings for each query. For each query, the first string is s and the second string is t. The length of each string is between 1 and 2000. All strings consist only of lowercase English letters. For each query, output the minimum number of operations required to transform s into t. **Example Input:** ``` 3 horse ros intention execution abc def ``` **Example Output:** ``` 3 5 3 ```","solution":"def min_operations_to_transform(s, t): Returns the minimum number of operations required to transform string s into string t. Operations allowed are insertions, deletions, and substitutions. # Initialize DP table m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] # Base case: transforming empty string to t or s for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill DP table for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete from s dp[i][j - 1], # Insert into s dp[i - 1][j - 1]) # Replace in s return dp[m][n] def transform_queries(queries): results = [] for s, t in queries: results.append(min_operations_to_transform(s, t)) return results"},{"question":"Litso works as a touring organizer and is currently managing a schedule for a famous band. The band plans to perform in several different cities along their tour, but due to certain restrictions, they can only perform in cities that are directly connected by roads. The road network between the cities can be represented as an undirected graph with n nodes (cities) and m edges (roads), and the nodes are numbered from 1 to n. If the band wishes to travel from one city to another, there must be a path between them, but they can only follow the roads. Given the number of cities n, the number of roads m, and the roads themselves, represented as pairs of integers u and v denoting that there is a road connecting city u and city v, help Litso determine the number of sets of cities where each set forms a connected component. A connected component is a set of cities such that there exists a path (direct or indirect) between any two cities in the set, and there are no paths connecting cities in different sets. # Input - The first line contains two integers n and m (1 leq n leq 10^5, 0 leq m leq 2 cdot 10^5) representing the number of cities and the number of roads respectively. - The next m lines each contain two integers u and v (1 leq u, v leq n) representing a bidirectional road between cities u and v. # Output - Print a single integer, denoting the number of connected components in the road network. # Example Input ``` 6 5 1 2 2 3 3 4 5 6 2 4 ``` Output ``` 2 ``` In this example, there are two connected components: {1, 2, 3, 4} and {5, 6}.","solution":"def find_connected_components(n, m, roads): from collections import defaultdict, deque def bfs(start, visited, adj_list): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Build the adjacency list from the provided roads adj_list = defaultdict(list) for u, v in roads: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i, visited, adj_list) components += 1 return components"},{"question":"You are given a sequence of n integers representing heights of n buildings standing in a row. Each building can either be painted or left unpainted. You want to select the maximum number of buildings such that the heights of the selected buildings form a strictly increasing subsequence when read from left to right. The first line of input contains integer n (1 le n le 100,000), the number of buildings in the row. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9), where h_i is the height of the i-th building. Output the maximum number of buildings that can be selected such that their heights form a strictly increasing subsequence from left to right. # Example Input ``` 6 2 5 9 3 6 8 ``` Output ``` 4 ``` # Explanation One of the longest strictly increasing subsequences is [2, 3, 6, 8], so the answer is 4. Other possible subsequences can be [2, 5, 6, 8] and [2, 5, 9].","solution":"import bisect def max_increasing_buildings(n, heights): if n == 0: return 0 # The \\"tails\\" array will store the smallest last element of all increasing subsequences # of length i+1 in tails[i] tails = [] for height in heights: pos = bisect.bisect_left(tails, height) if pos == len(tails): tails.append(height) else: tails[pos] = height return len(tails)"},{"question":"You are given an integer array of length n, and you must generate an array of distinct integers that meets the following criteria: 1. The array length must be exactly k. 2. The array should maximize the sum of its elements. 3. All elements in the array must be greater than or equal to some integer m and less than or equal to some integer p (both inclusive). If there are multiple correct answers, you may return any of them. # Input - The first line contains three integers n, k, m (1 leq k leq n leq 10^5, 1 leq m leq p leq 10^9) — the length of the array, the required length of the new array, and the constraints on the elements, respectively. - The second line contains n space-separated integers which represent the given array of length n. # Output - Print k space-separated integers that represent the generated array. # Example Input ``` 6 3 1 15 10 5 12 7 3 9 ``` Output ``` 12 10 9 ``` In this example, one of the valid arrays is [12, 10, 9] which maximizes the sum within the given constraints. Another possible valid array could be [12, 9, 7], but any valid output that meets the conditions is acceptable.","solution":"def maximize_sum_array(n, k, m, p, arr): filtered_elements = [x for x in arr if m <= x <= p] filtered_elements.sort(reverse=True) return filtered_elements[:k] # Example usage: # input: # 6 3 1 15 # 10 5 12 7 3 9 # output: # 12 10 9 n, k, m, p = 6, 3, 1, 15 arr = [10, 5, 12, 7, 3, 9] print(maximize_sum_array(n, k, m, p, arr)) # Output: [12, 10, 9]"},{"question":"You are given an array representing the heights of consecutive buildings. Each building is represented by its height in meters. It is raining, and water can collect on top of the buildings. Your task is to calculate the total amount of water that can be trapped in this arrangement after the rain. Water that can be collected is bounded by the height of buildings on either side. Write a function that takes an array of integers representing the building heights and returns the total amount of trapped water. The signature of the function should be as follows: ```python def calculate_trapped_water(heights: List[int]) -> int: ``` **Constraints:** - The array will contain between 1 and 100,000 elements. - Each element in the array will be an integer representing the height of the building, between 0 and 10^7. **Example:** ``` Input: [4, 2, 0, 3, 2, 5] Output: 9 Explanation: - Between buildings of height 4 and 3, 4 and 2, and 2 and 5, the trapped water is calculated as follows: - 4 4 Walls of height ___ _ | | | | 4 |_|_4_|__3_|2 2 2| 2| 2| 0 0 3 |_| 3 2 | 2 5 So, the total trapped water = (1+2+4+2) = 9 units. ```","solution":"from typing import List def calculate_trapped_water(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"You are given a grid with `n` rows and `m` columns, where each cell either contains a `.` (representing an open cell) or a `#` (representing an obstacle). Your task is to determine the maximum area of a rectangular sub-grid that contains only open cells (`.`). The input data consists of multiple test cases. The first line of the input contains an integer `t` (1 ≤ t ≤ 10), the number of test cases. For each test case, the first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid. Each of the next `n` lines contains a string of length `m`, representing the grid. Output the maximum area of a rectangular sub-grid that contains only `.` for each test case on a new line. # Example Input ``` 2 3 4 .. ..#. .... 5 5 ..... ..... ..#.. ..... ..... ``` Output ``` 4 10 ``` # Explanation - In the first test case, the maximum area of a rectangular sub-grid containing only `.` is 4. - In the second test case, the maximum area is 10.","solution":"def max_rectangle_area(grid): n = len(grid) m = len(grid[0]) heights = [0] * m max_area = 0 for row in grid: for col in range(m): if row[col] == \'.\': heights[col] += 1 else: heights[col] = 0 stack = [] for i in range(m + 1): while stack and (i == m or heights[i] < heights[stack[-1]]): h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area def solve(test_cases): results = [] for grid in test_cases: results.append(max_rectangle_area(grid)) return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, input_lines[index].split()) index += 1 grid = [] for _ in range(n): grid.append(input_lines[index]) index += 1 test_cases.append(grid) return test_cases def main(input_string): test_cases = parse_input(input_string) results = solve(test_cases) return \'n\'.join(map(str, results))"},{"question":"There is a kingdom with `N` cities connected by `M` bidirectional roads. Each road has a certain length associated with it. The king has decided to select some roads and reconstruct them to maximize the total length of roads selected while ensuring that there is a route (not necessarily direct) between any two cities using these selected roads. In other words, the selected roads must form a connected graph covering all cities. Help the king find out the maximum total length of selected roads that forms a connected graph. The first line contains two integers `N` and `M` (2 ≤ N ≤ 1000, 1 ≤ M ≤ 100,000) — the number of cities and the number of roads respectively. Each of the next `M` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^6) representing a road between cities `u` and `v` with length `w`. Output a single integer — the maximum total length of selected roads that forms a connected graph covering all cities. If it is impossible to connect all cities, print `-1`.","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [0] * size def find(self, p): if self.parent[p] != p: self.parent[p] = self.find(self.parent[p]) # Path compression return self.parent[p] def union(self, p, q): rootP = self.find(p) rootQ = self.find(q) if rootP != rootQ: if self.rank[rootP] > self.rank[rootQ]: self.parent[rootQ] = rootP elif self.rank[rootP] < self.rank[rootQ]: self.parent[rootP] = rootQ else: self.parent[rootQ] = rootP self.rank[rootP] += 1 def maximum_spanning_tree(n, edges): uf = UnionFind(n) edges.sort(key=lambda x: -x[2]) # Sort edges by decreasing weight max_length = 0 count = 0 # Count of edges added to the MST for u, v, w in edges: if uf.find(u) != uf.find(v): uf.union(u, v) max_length += w count += 1 # Check if we have a connected graph if count == n - 1: return max_length else: return -1"},{"question":"In a distant land of algorithms, there exists an ancient practice involving magical frogs and lily pads. These frogs have the unique ability to jump over a fixed number of lily pads. You are given an integer array `lilyPads` where each element represents a pad\'s magical power (a non-negative integer). The magical power determines how many lily pads the frog can jump forward from its current position. Your task is to help a magical frog reach the last lily pad starting from the first one. Write a function `canReachEnd(lilyPads)` to determine whether the frog can reach the last lily pad, and if yes, return the minimum number of jumps required. If the frog cannot reach the last lily pad, return -1. The function should follow this signature: ```python def canReachEnd(lilyPads: List[int]) -> int: ``` # Input: - The first line contains an integer `n` (1 le n le 10^5) — the number of lily pads. - The second line contains `n` integers separated by spaces — the values in the `lilyPads` array (0 le lilyPads[i] le 100). # Output: - Output a single integer — the minimum number of jumps required to reach the last lily pad. If it is not possible to reach the last pad, return -1. # Example: Input: ``` 6 2 3 1 1 4 ``` Output: ``` 2 ``` Explanation: The frog can jump from pad 0 to pad 1 with a jump power of `2`, and then from pad 1 to pad 4 using its jump power of `3`. Input: ``` 5 3 2 1 0 4 ``` Output: ``` -1 ``` Explanation: The frog is unable to reach the last pad because it gets stuck at position 3 with a jump power of `0`. # Note: - The solution should optimize for time and space complexity. - The given input guarantees that the frog starts at the first lily pad.","solution":"def canReachEnd(lilyPads): Determine if the frog can reach the last lily pad and the minimum number of jumps required. :param lilyPads: List[int] containing the jump power at each lily pad :return: int - the minimum number of jumps to reach the last lily pad, or -1 if not possible n = len(lilyPads) if n == 1: return 0 max_reachable = 0 jumps = 0 last_jump_max = 0 for i in range(n): if i > max_reachable: return -1 if i > last_jump_max: jumps += 1 last_jump_max = max_reachable max_reachable = max(max_reachable, i + lilyPads[i]) if max_reachable >= n - 1: return jumps + 1 return -1"},{"question":"There is a kingdom with N cities connected by M bidirectional roads. Each road has a certain travel cost associated with it. The kingdom has a peculiar rule: each city must be connected to every other city directly or indirectly. You are the royal cartographer tasked with ensuring the kingdom remains connected after any single road is removed. Determine the maximum travel cost of a single road that can be removed such that the kingdom remains connected. The first line of input contains two integers: N (2 ≤ N ≤ 1000) and M (N-1 ≤ M ≤ 5000), where N is the number of cities and M is the number of roads. Each of the next M lines contains three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000), where u and v represent the cities connected by a road, and w represents the travel cost of that road. Note that there is at most one road between any pair of cities and no road connects a city to itself. Output a single integer: the maximum travel cost of a single road that can be removed while keeping the kingdom connected. Example: Input: 5 6 1 2 3 1 3 4 2 3 1 2 4 2 3 5 5 4 5 3 Output: 3","solution":"import heapq # Prim\'s Algorithm to find Minimum Spanning Tree Cost and Edges def prim_mst(graph, n): visited = [False] * (n + 1) min_heap = [(0, 1, -1)] # (cost, to_node, from_node) mst_cost = 0 mst_edges = [] while min_heap: cost, to_node, from_node = heapq.heappop(min_heap) if visited[to_node]: continue visited[to_node] = True mst_cost += cost if from_node != -1: mst_edges.append((from_node, to_node, cost)) for next_node, next_cost in graph[to_node]: if not visited[next_node]: heapq.heappush(min_heap, (next_cost, next_node, to_node)) return mst_cost, mst_edges def max_cost_removal(N, M, roads): graph = {i: [] for i in range(1, N + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Get the MST cost and the edges in the MST _, mst_edges = prim_mst(graph, N) # We need to find the max weight in the MST edges return max(edge[2] for edge in mst_edges) def parse_input(input_str): input_list = input_str.strip().split(\'n\') N, M = map(int, input_list[0].split()) roads = [tuple(map(int, line.split())) for line in input_list[1:]] return N, M, roads def find_max_cost_removal(input_str): N, M, roads = parse_input(input_str) return max_cost_removal(N, M, roads)"},{"question":"In the kingdom of Mezoria, there are ancient walls that need to be restored. Each wall segment is represented as an interval [a_i, b_i] on the x-axis. Unfortunately, some of these wall segments have collapsed and are represented by intervals that are missing from the list. Your task is to identify all these missing intervals. The input consists of a single integer n (1 ≤ n ≤ 10^5) representing the number of existing intervals followed by n pairs of integers, each describing an interval [a_i, b_i] (0 ≤ a_i < b_i ≤ 10^9). Your job is to find all the missing intervals between the minimum and maximum points of the given intervals. Output the number of missing intervals followed by their respective start and end points. The intervals must be listed in ascending order of their starting points. Input: The first line of the input contains integer n. The next n lines each contain two space-separated integers a_i and b_i representing the start and end points of an interval. Output: The first line should contain the integer m, representing the number of missing intervals. Each of the next m lines should contain two integers representing the start and end points of a missing interval. Example: Input: 3 1 3 5 7 8 10 Output: 2 3 5 7 8","solution":"def find_missing_intervals(n, intervals): Finds the missing intervals between the minimum and maximum points of the given intervals. if not intervals: return [] intervals.sort() missing_intervals = [] current_end = intervals[0][1] for i in range(1, len(intervals)): if intervals[i][0] > current_end: missing_intervals.append((current_end, intervals[i][0])) current_end = max(current_end, intervals[i][1]) return missing_intervals"},{"question":"In a city, there is a network of roads connecting several intersections. Each intersection is labeled with a unique integer from 1 to n. The network can be represented as a weighted undirected graph where intersections are vertices and roads are edges with positive weights representing the time it takes to travel between two intersections. A person wants to host a series of events in the city. To minimize travel time, he needs to choose one of the intersections as an event location such that the sum of the shortest travel times from all other intersections to the chosen intersection is minimized. Write a program to determine the best intersection to host the events. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of intersections and roads, respectively. The next n lines contain three integers each: u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) representing a road between intersections u and v with travel time w. Output a single integer — the number of the intersection that will minimize the sum of the shortest travel times from all other intersections. If there are multiple such intersections, print the smallest one. Assume that all intersections are reachable from each other. # Sample Input: ``` 4 1 2 4 1 3 1 3 2 2 2 4 5 3 4 1 ``` # Sample Output: ``` 3 ``` The optimal intersection is 3 because the sum of the shortest travel times to all other intersections (3 -> 1: 1, 3 -> 2: 2, 3 -> 4: 1) is the minimum possible.","solution":"import heapq def find_best_intersection(n, roads): # Create an adjacency list for the graph graph = [[] for _ in range(n)] for u, v, w in roads: graph[u-1].append((w, v-1)) graph[v-1].append((w, u-1)) def dijkstra(start): min_heap = [(0, start)] distances = {i: float(\'inf\') for i in range(n)} distances[start] = 0 while min_heap: current_dist, current_node = heapq.heappop(min_heap) if current_dist > distances[current_node]: continue for weight, neighbor in graph[current_node]: distance = current_dist + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return distances min_sum = float(\'inf\') best_intersection = 0 for i in range(n): distances = dijkstra(i) total_distance = sum(distances.values()) if total_distance < min_sum: min_sum = total_distance best_intersection = i + 1 # switch back to 1-based index return best_intersection # Example usage: # n = 4 # roads = [ # (1, 2, 4), # (1, 3, 1), # (3, 2, 2), # (2, 4, 5), # (3, 4, 1) # ] # print(find_best_intersection(n, roads)) # Output: 3"},{"question":"To solve quadratic equations of the form `ax^2 + bx + c = 0`, the roots can be found using the quadratic formula: `x = (-b ± sqrt(b^2 - 4ac)) / 2a`. However, sometimes the coefficients (a, b, c) of the quadratic equation can be a bit large. Hence, Willem wants you to evaluate the roots for large coefficients and print the results precisely. The input consists of three integers: a, b, and c where (-10^5 ≤ a, b, c ≤ 10^5) and a ≠ 0. You should print the roots in the following format: - If the equation has two distinct real roots, print the smaller root followed by the larger root. - If the equation has one real root, print the root twice. - If the equation has no real roots, print \\"No real roots\\". The roots should be printed with a precision of 6 decimal places. For the first example: Given the quadratic equation `1x^2 + (-3)x + 2 = 0`, the roots are calculated as: ``` x = (3 + sqrt((-3)^2 - 4*1*2)) / (2*1) = (3 + sqrt(1)) / 2 = 2 x = (3 - sqrt(1)) / (2*1) = 1 ``` The result should be: ``` 1.000000 2.000000 ``` For the second example: Given the quadratic equation `1x^2 + (-2)x + 1 = 0`, the roots are: ``` x = (2 + sqrt(0)) / 2 = 1 x = (2 - sqrt(0)) / 2 = 1 ``` The result should be: ``` 1.000000 1.000000 ``` For the third example: Given the quadratic equation `1x^2 + (0)x + 1 = 0`, the roots are: ``` sqrt(0^2 - 4 * 1 * 1) = -4 < 0 ``` The result should be: ``` No real roots ```","solution":"import math def solve_quadratic(a, b, c): Solves the quadratic equation ax^2 + bx + c = 0. Returns the roots with six decimal precision. discriminant = b**2 - 4*a*c if discriminant < 0: return \\"No real roots\\" elif discriminant == 0: root = -b / (2*a) return f\\"{root:.6f}n{root:.6f}\\" else: root1 = (-b + math.sqrt(discriminant)) / (2*a) root2 = (-b - math.sqrt(discriminant)) / (2*a) smaller_root, larger_root = sorted([root1, root2]) return f\\"{smaller_root:.6f}n{larger_root:.6f}\\""},{"question":"Sophie and James are coordinating an art exhibition and have a collection of paintings. They want to display these paintings in such a way that maximizes the total beauty of the displayed paintings while adhering to some constraints. Each painting has a specific beauty value and a weight. The exhibition hall can accommodate paintings up to a certain maximum total weight. Given the total weight capacity of the exhibition hall and details of each painting, determine the maximum possible total beauty of paintings that can be displayed in the exhibition hall without exceeding the weight capacity. You are given multiple test cases. For each test case, the first line contains two integers n (1 le n le 100) — the number of paintings, and W (1 le W le 10^4) — the maximum total weight capacity of the exhibition hall. Each of the next n lines contains two integers b_i (1 le b_i le 1000) and w_i (1 le w_i le 1000), representing the beauty and the weight of the i-th painting, respectively. For each test case, output the maximum total beauty of the paintings that can be displayed without exceeding the weight capacity. # Example **Input** ``` 2 3 50 60 20 100 50 120 30 4 10 10 5 40 4 30 6 50 3 ``` **Output** ``` 180 90 ``` # Explanation In the first test case, the optimal selection is to take the paintings with beauty values of 60 and 120 (weights 20 and 30), which gives a total beauty value of 180 without exceeding the weight capacity of 50. In the second test case, the optimal selection is to take the paintings with beauty values 40 and 50 (weights 4 and 3), which gives a total beauty value of 90 without exceeding the weight capacity of 10. # Constraints - 1 le t le 10 (number of test cases) - 1 le n le 100 - 1 le W le 10^4 - 1 le b_i le 1000 - 1 le w_i le 1000","solution":"def maximum_beauty(test_cases): def knapsack_max_beauty(paintings, max_weight): n = len(paintings) dp = [0] * (max_weight + 1) for beauty, weight in paintings: for w in range(max_weight, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + beauty) return dp[max_weight] results = [] for paintings, max_weight in test_cases: results.append(knapsack_max_beauty(paintings, max_weight)) return results"},{"question":"Dominic has recently taken up the hobby of hedge maze design. He has decided to create mazes that have a unique feature: exactly one path exists between any two points in the maze. Essentially, each maze is a tree. Dominic wants to ensure that his mazes are well-designed and have certain properties to make them both challenging and solvable. Dominic\'s maze can be represented as a graph with n nodes (points) and n-1 edges (paths). The nodes are numbered from 1 to n and each edge connects two distinct nodes. For each maze, Dominic is interested in finding the center of the tree, which is defined as the node that minimizes the maximum distance to any other node in the tree. Given a maze represented by an undirected tree, your task is to find the center node of the tree. # Input - The first line contains a single integer n (1 leq n leq 10^5) — the number of nodes in the tree. - The next n-1 lines each contain two integers u and v (1 leq u, v leq n, u neq v), representing an edge between nodes u and v. # Output - Output a single integer — the node that is the center of the tree. If there are multiple nodes that can be considered centers, output any of them. # Examples Example 1 **Input:** ``` 4 1 2 1 3 2 4 ``` **Output:** ``` 1 ``` **Explanation:** Node 1 is the center of the tree since it minimizes the maximum distance to any other node. Example 2 **Input:** ``` 5 1 2 1 3 3 4 4 5 ``` **Output:** ``` 3 ``` **Explanation:** Node 3 is the center of the tree since it minimizes the maximum distance to any other node. # Note To solve this problem, you may need to find the longest path in the tree (also known as the diameter of the tree) and then determine the center based on that path. There is always a unique center or two adjacent nodes that can be considered as centers.","solution":"from collections import deque def find_tree_diameter(n, edges): if n == 1: return [1] adj = [[] for _ in range(n+1)] for u, v in edges: adj[u].append(v) adj[v].append(u) def bfs(start): dist = [-1] * (n + 1) dist[start] = 0 queue = deque([start]) farthest_node = start while queue: curr = queue.popleft() for neighbor in adj[curr]: if dist[neighbor] == -1: dist[neighbor] = dist[curr] + 1 queue.append(neighbor) if dist[neighbor] > dist[farthest_node]: farthest_node = neighbor return farthest_node, dist # First BFS to find one end of the diameter farthest_node, _ = bfs(1) # Second BFS from the farthest node found to get the actual diameter other_farthest_node, dist = bfs(farthest_node) # Get the path from farthest_node to the other_farthest_node diameter_path = [] current = other_farthest_node max_dist = dist[other_farthest_node] for _ in range(max_dist + 1): diameter_path.append(current) for neighbor in adj[current]: if dist[neighbor] == dist[current] - 1: current = neighbor break # The center is the middle of the diameter path diameter_length = len(diameter_path) if diameter_length % 2 == 0: return [diameter_path[diameter_length // 2 - 1], diameter_path[diameter_length // 2]] else: return [diameter_path[diameter_length // 2]] def find_tree_center(n, edges): centers = find_tree_diameter(n, edges) return centers[0]"},{"question":"You are given a binary tree with `n` nodes. Each node has a unique value between 1 and `n` (inclusive). Initially, the binary tree is empty and you need to construct it by performing a series of operations. You have `m` operations of two possible types to perform on this tree: 1. **Add Operation**: `1 val` – Insert a node with the value `val` into the binary tree. Nodes are inserted following the binary search tree property (i.e., for any node with value `v`, every value in its left subtree is less than `v`, and every value in its right subtree is greater than `v`). 2. **Query Operation**: `2 l r` – Compute the sum of values of all nodes in the subtree of the node whose value is `l` and is a descendant of the subtree rooted at node `r`. If there is no such node, return -1. The tree satisfies the binary search tree property at all times during the sequence of operations. Given `t` test cases, each containing a sequence of these operations, you are to output the results for each query operation. **Input format:** - The first line contains an integer `t` (1 ≤ t ≤ 10^3), representing the number of test cases. For each test case: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 2*10^4), representing the number of nodes and the number of operations respectively. - The next `m` lines describe the operations. - For an add operation: `1 val` (1 ≤ val ≤ n) - For a query operation: `2 l r` (1 ≤ l, r ≤ n) **Output format:** For each query operation, print the result on a new line. **Example:** ``` Input: 2 3 5 1 2 1 1 1 3 2 3 2 2 1 3 4 6 1 8 1 3 1 10 1 1 2 1 8 2 10 8 Output: 3 1 1 -1 ``` **Explanation:** - In the first test case: - We add nodes with values 2, 1, and 3 to the binary tree. The tree now looks like: ``` 2 / 1 3 ``` - The query `2 3 2` asks for the sum of values in the subtree rooted at node 3 and within the subtree of node 2. The result is `3`. - The query `2 1 3` asks for the sum of values in the subtree rooted at node 1 and within the subtree of node 3. Since 1 is not within the subtree of node 3, the result is `-1`. - In the second test case: - We add nodes with values 8, 3, 10, and 1 to the binary tree. The tree now looks like: ``` 8 / 3 10 / 1 ``` - The query `2 1 8` asks for the sum of values in the subtree rooted at node 1 and within the subtree of node 8. The result is `1`. - The query `2 10 8` asks for the sum of values in the subtree rooted at node 10 and within the subtree of node 8. The result is `10`.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, node, key): if key < node.val: if node.left is None: node.left = TreeNode(key) else: self._insert(node.left, key) elif key > node.val: if node.right is None: node.right = TreeNode(key) else: self._insert(node.right, key) def search(self, root, key): if root is None or root.val == key: return root if root.val < key: return self.search(root.right, key) return self.search(root.left, key) def sum_subtree(self, node): if not node: return 0 return node.val + self.sum_subtree(node.left) + self.sum_subtree(node.right) def process_operations(operations): bst = BinarySearchTree() results = [] for operation in operations: op = operation.split() if op[0] == \'1\': bst.insert(int(op[1])) elif op[0] == \'2\': l = int(op[1]) r = int(op[2]) node_l = bst.search(bst.root, l) node_r = bst.search(bst.root, r) if not node_l or not node_r: results.append(-1) continue # Ensure that `node_l` is a descendant of `node_r` descendant = False current = node_r while current: if current.val == l: descendant = True break elif l < current.val: current = current.left else: current = current.right if descendant: results.append(bst.sum_subtree(node_l)) else: results.append(-1) return results def run_test_cases(test_cases): all_results = [] for n, m, operations in test_cases: results = process_operations(operations) all_results.extend(results) return all_results"},{"question":"There are n people in a company, each with a unique id from 1 to n. You are given a list of friendships in the form of pairs (u, v) which indicates that person u and person v are friends. Together with the friendship list, you are also given a list of skills where the i-th element represents the skill level of the person with id i. A team is formed by selecting a subset of people, and the team\'s skill level is defined as the sum of the skill levels of the team members. However, the team can only be formed if all team members are directly or indirectly connected through friendships (i.e., they form a connected subgraph). Your task is to find the maximum skill level sum of any possible team. The first line of input contains two integers n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ 2 * 10^5) — the number of people and the number of friendships. The second line contains n integers representing the skill levels. Each of the next m lines contains two integers u and v, indicating a friendship between person u and person v. Print a single integer — the maximum skill level sum of a connected team. For example, given the input: ``` 5 3 1 2 3 4 5 1 2 2 3 4 5 ``` The output should be 10. Explanation: There are two connected subgraphs: {1, 2, 3} and {4, 5}. Their skill sums are 1+2+3=6 and 4+5=9. Hence, the maximum skill level sum of a connected team is 10.","solution":"def find_max_skill_sum(n, m, skills, friendships): from collections import defaultdict, deque def bfs(start): q = deque([start]) visited.add(start) total_skill = 0 while q: node = q.popleft() total_skill += skills[node - 1] # adjust skill index to 0-based for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) q.append(neighbor) return total_skill # Build the graph graph = defaultdict(list) for u, v in friendships: graph[u].append(v) graph[v].append(u) # Find and sum the skills of connected components visited = set() max_skill_sum = 0 for person in range(1, n + 1): if person not in visited: component_skill_sum = bfs(person) max_skill_sum = max(max_skill_sum, component_skill_sum) return max_skill_sum"},{"question":"Nicolás just acquired a vast treasure map with `n` locations and `m` one-way paths between them. Each path has a specific travel time and a potential treasure reward at its destination. Nicolás starts at the headquarters located at location `1` and wants to maximize the total treasure he can collect while ensuring that his travel time does not exceed `t` units. Each path is described by the travel time and the amount of treasure awaiting at the destination. More formally, the path `i` from location `ai` to location `bi` has a travel time `ci` and a treasure reward `ri` at location `bi`. Nicolás can plan his route optimally from any location he arrives at, recalculating his route based on the remaining time. What is the maximum amount of treasure Nicolàs can collect if he plans his journey optimally? The first line of input contains three integers `n`, `m`, and `t` (2 ≤ `n` ≤ 100, 1 ≤ `m` ≤ 200, 1 ≤ `t` ≤ 1000). The next `m` lines each contain four integers `ai`, `bi`, `ci`, and `ri` (1 ≤ `ai`, `bi` ≤ `n`, `ai` ≠ `bi`, 1 ≤ `ci` ≤ `t`, 0 ≤ `ri` ≤ 100) describing the paths. Print a single integer — the maximum amount of treasure Nicolàs can collect without exceeding `t` units of travel time. # Sample Input ``` 5 5 10 1 2 3 10 2 3 4 20 3 4 2 30 4 5 1 40 1 3 7 25 ``` # Sample Output ``` 100 ``` # Explanation Nicolás can take the following optimal path to maximize his treasure within the given travel time of `10` units: - From location `1` to location `2` collecting `10` treasure (total travel time `3`). - From location `2` to location `3` collecting `20` treasure (total travel time `7`). - From location `3` to location `4` collecting `30` treasure (total travel time `9`). - From location `4` to location `5` collecting `40` treasure (total travel time `10`). The total amount of treasure collected is `100`.","solution":"import heapq def max_treasure(n, m, t, paths): from collections import defaultdict graph = defaultdict(list) for ai, bi, ci, ri in paths: graph[ai].append((bi, ci, ri)) # PriorityQueue (max-heap) with tuples (-treasure, -time, location) pq = [(-0, 0, 1)] # dp[location][time] will store the max treasure we can collect reaching location with time dp = [[-1] * (t + 1) for _ in range(n + 1)] dp[1][0] = 0 max_treasure = 0 while pq: cur_treasure, cur_time, loc = heapq.heappop(pq) cur_treasure = -cur_treasure cur_time = -cur_time for neighbor, time_cost, treasure in graph[loc]: next_time = cur_time + time_cost next_treasure = cur_treasure + treasure if next_time <= t and (dp[neighbor][next_time] < next_treasure): dp[neighbor][next_time] = next_treasure heapq.heappush(pq, (-next_treasure, -next_time, neighbor)) max_treasure = max(max_treasure, next_treasure) return max_treasure def parse_input(input_data): lines = input_data.strip().split(\'n\') n, m, t = map(int, lines[0].split()) paths = [tuple(map(int, line.split())) for line in lines[1:]] return n, m, t, paths"},{"question":"Vika loves to play with numbers and series. Recently, she stumbled upon an interesting observation and decided to create a challenge for her friends. She picks two numbers: the starting number of the series, `a`, and the common difference, `d`. Then, she generates a series of `n` numbers in arithmetic progression and adds a twist to it. For each number in the series, if it is divisible by another given integer `m`, she replaces it with `0`. Your goal is to help Vika by writing a program that generates the series for her according to the given rules. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of terms in the series. - The second line contains three integers `a`, `d`, and `m` (1 ≤ a, d, m ≤ 1000) — the starting number, common difference, and the divisor respectively. # Output - Output the series in a single line, where each number is separated by a space. If a number in the series is divisible by `m`, it should be replaced by `0`. # Example Input ``` 5 3 2 4 ``` Output ``` 3 5 0 9 11 ``` Explanation For the given example: - The series starts with 3 and has a common difference of 2, so the series would be: `3, 5, 7, 9, 11` - Since 7 is divisible by 4, it is replaced by `0`. - Thus, the output is `3 5 0 9 11`. Write a function to generate the desired series following the provided rules.","solution":"def generate_series(n, a, d, m): Generates an arithmetic series with the given parameters while replacing numbers divisible by m with 0. :param n: Number of terms in the series :param a: Starting number of the series :param d: Common difference between terms :param m: Divisor for replacing terms with 0 :return: The generated series as a list of integers series = [] for i in range(n): term = a + i * d if term % m == 0: series.append(0) else: series.append(term) return series"},{"question":"A group of friends is planning a trip. They want to rent a car and share the cost of fuel among themselves equally. Unfortunately, not all friends have the same amount of money. The goal is to compute the minimum total amount of money required from everyone to be able to afford the trip. You are given an integer `n` (1 le n le 1000), which represents the number of friends, an integer `totalCost` (1 le totalCost le 10^6), which represents the total amount of money needed for the trip, and an array `money` of length `n`, where `money[i]` (0 le money[i] le 10^6) represents the amount of money the `i`-th friend currently has. Friends can give each other part of their money with no restrictions. Find the minimum total amount of money that needs to be added (by the group as a whole) so that their collective amount of money is at least `totalCost`. The first line contains the integer `n` — the number of friends. The second line contains the integer `totalCost` — the total cost of the trip. The third line contains `n` integers `money[1], money[2], ..., money[n]` — the amounts of money each friend has. Print the minimum total amount of money that needs to be added. # Example Input ``` 3 100 20 35 40 ``` Output ``` 5 ``` Explanation They currently have 20 + 35 + 40 = 95 units of money in total. To reach the total cost of 100, they need an additional 5 units of money.","solution":"def minimum_additional_money(n, totalCost, money): Returns the minimum amount of money that needs to be added to cover the total cost of the trip. Parameters: n (int): The number of friends. totalCost (int): The total cost of the trip. money (list of int): The amount of money each friend has. Returns: int: The minimum additional money required. current_total = sum(money) if current_total >= totalCost: return 0 else: return totalCost - current_total"},{"question":"A village has a unique tradition where they celebrate the \\"Festival of Lanterns\\" every year. During this festival, lanterns are placed on a river that flows through the village. The villagers have n lanterns, and they place them at certain positions along the river denoted by integers x1, x2, ..., xn. To make the festival visually appealing, the lanterns should be placed such that the maximum distance between any two adjacent lanterns, including the start and end of the river where lanterns are placed, is minimized. The river can be considered as a line starting from position 0 and ending at position L. You are to help villagers determine this minimum possible maximum distance between any two adjacent lanterns along the river. The first line of input contains two integers n and L (1 ≤ n ≤ 1000, 1 ≤ L ≤ 10^9) — the number of lanterns and the length of the river. The second line contains n integers x1, x2, ..., xn (0 ≤ xi ≤ L) — the positions of the lanterns along the river. Print the minimum possible maximum distance between any two adjacent lanterns. Input - The first line contains two integers n and L — the number of lanterns and the length of the river. - The second line contains n integers x1, x2, ..., xn — the positions of the lanterns along the river. Output - Print a single number — the minimum possible maximum distance between any two adjacent lanterns. Example 1: Input: 3 10 2 5 8 Output: 3 Example 2: Input: 4 12 0 3 7 10 Output: 4","solution":"def min_max_distance_between_lanterns(n, L, lanterns): Returns the minimum possible maximum distance between any two adjacent lanterns. lanterns.sort() max_gap = 0 # Calculate the maximum gap between consecutive lanterns for i in range(1, n): max_gap = max(max_gap, lanterns[i] - lanterns[i-1]) # Consider the start and end of the river max_gap = max(max_gap, lanterns[0] - 0, L - lanterns[-1]) # The minimum maximum distance between adjacent lanterns return max_gap"},{"question":"You\'re given an n × m grid representing a garden, where each cell is either empty (denoted by \'.\') or has a plant (denoted by \'#\'). Lenny wants to remove some of the empty cells such that the remaining empty cells form isolated rectangles. An isolated rectangle is defined as a rectangular subgrid where every cell inside the rectangle is empty, and every cell outside but adjacent to the rectangle is either a boundary of the grid or contains a plant. Your task is to determine whether it is possible to remove some of the empty cells in the given grid such that the remaining empty cells form isolated rectangles. The first line of the input contains two integers n and m (1≤n,m≤50) — the dimensions of the grid. Each of the next n lines contains m characters \'.\' or \'#\', where \'.\' indicates an empty cell and \'#\' indicates a cell with a plant. On the only line of the output print \\"YES\\" if it is possible to remove some of the empty cells to form isolated rectangles, otherwise print \\"NO\\". Do not print quotes.","solution":"def check_isolated_rectangles(grid, n, m): def is_rectangle(x1, y1, x2, y2): for i in range(x1, x2+1): for j in range(y1, y2+1): if grid[i][j] != \'.\': return False if x1 > 0: for j in range(y1, y2+1): if grid[x1-1][j] == \'.\': return False if x2 < n-1: for j in range(y1, y2+1): if grid[x2+1][j] == \'.\': return False if y1 > 0: for i in range(x1, x2+1): if grid[i][y1-1] == \'.\': return False if y2 < m-1: for i in range(x1, x2+1): if grid[i][y2+1] == \'.\': return False return True empty_cells = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == \'.\'] for i1, j1 in empty_cells: for i2, j2 in empty_cells: if i2 >= i1 and j2 >= j1: if is_rectangle(i1, j1, i2, j2): return \\"YES\\" return \\"NO\\""},{"question":"You are given a sequence of integers. You need to choose a contiguous subsequence of the given integers in such a way that the bitwise OR of all the integers in the subsequence is maximum. What is the maximum bitwise OR you can achieve? The first line of the input contains an integer n (1 le n le 10^5), the length of the sequence of integers. The second line contains n integers (1 le a_i le 10^9), the elements of the sequence. Output a single integer — the maximum bitwise OR of any contiguous subsequence of the given sequence. # Example Input: ``` 5 1 2 4 8 16 ``` Output: ``` 31 ``` In the given example, the contiguous subsequence [1, 2, 4, 8, 16] has the maximum bitwise OR of 31.","solution":"def max_bitwise_or_subsequence(n, arr): Returns the maximum bitwise OR of any contiguous subsequence of the given sequence. Parameters: n (int): length of the sequence arr (List[int]): the sequence of integers Returns: int: the maximum bitwise OR max_or = 0 current_or = 0 for num in arr: current_or |= num max_or = max(max_or, current_or) return max_or"},{"question":"Ravi is a big fan of prime numbers. He loves to play with them and has come up with an interesting problem. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. Given an integer n, Ravi wants to find the smallest prime number that is greater than or equal to n. The input consists of multiple test cases. The first line of the input contains a single integer t (1 leq t leq 100), the number of test cases. The next t lines each describe a test case. Each test case contains one integer n (1 leq n leq 10^6). Print a single integer for each test case: the smallest prime number that is greater than or equal to n. Use efficient algorithms to determine if numbers are prime, as direct computation might be too slow for large inputs. # Example Input: ``` 3 10 14 17 ``` Output: ``` 11 17 17 ``` In the first test case, the smallest prime number greater than or equal to 10 is 11. In the second test case, the smallest prime number greater than or equal to 14 is 17. In the third test case, the smallest prime number greater than or equal to 17 is 17 itself.","solution":"import math def is_prime(num): Determines if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(math.sqrt(num)) + 1, 2): if num % i == 0: return False return True def smallest_prime_gte(n): Finds the smallest prime number greater than or equal to n. while not is_prime(n): n += 1 return n def process_test_cases(t, cases): results = [] for n in cases: results.append(smallest_prime_gte(n)) return results"},{"question":"You are given a binary tree with ```n``` nodes. Each node is initially white, but you can change the color of a node to black in one move. Your goal is to turn exactly ```k``` nodes black such that each black node is at a distance of at least ```d``` edges from every other black node. Find the minimum number of moves required to achieve this. The first line contains three integers ```n```, ```k```, and ```d``` (```1 <= k <= n <= 10^5```, ```1 <= d <= n-1```) – the number of nodes in the tree, the number of nodes that must be turned black, and the minimum required distance between any two black nodes, respectively. Each of the next ```n-1``` lines contains two integers ```u``` and ```v``` (```1 <= u,v <= n```) – denoting that there is an edge between nodes ```u``` and ```v```. It is guaranteed that the input represents a tree. Output a single integer – the minimum number of moves required to turn exactly ```k``` nodes black that satisfy the given condition, or ```-1``` if it is impossible. # Example Input ``` 7 3 2 1 2 1 3 2 4 2 5 3 6 3 7 ``` Output ``` 3 ``` In this example, you can turn node 2 black in the first move, node 5 black in the second move, and node 6 black in the third move. This configuration maintains the required distance of 2 edges between any two black nodes.","solution":"from collections import deque, defaultdict def min_moves_to_black_nodes(n, k, d, edges): Function to find the minimum number of moves required to turn k nodes black such that each black node is at a distance of at least d edges from every other black node in a binary tree. Parameters: n (int): Number of nodes in the tree k (int): Number of nodes that must be turned black d (int): Minimum required distance between any two black nodes edges (list of tuples): Edges of the tree Returns: int: Minimum number of moves required or -1 if impossible # Build adjacency list def build_graph(n, edges): adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) return adj # BFS function to get the distance from one node to all other nodes def bfs(start, adj): distances = {node: float(\'inf\') for node in adj} distances[start] = 0 queue = deque([start]) while queue: node = queue.popleft() current_distance = distances[node] for neighbor in adj[node]: if distances[neighbor] == float(\'inf\'): distances[neighbor] = current_distance + 1 queue.append(neighbor) return distances # Get the graph as adjacency list graph = build_graph(n, edges) # Perform BFS from an arbitrary node to find a central point start_node = 1 distances = bfs(start_node, graph) # Find the farthest node from the start_node farthest_node = max(distances, key=distances.get) # Perform BFS from the farthest node found to refine the center distances = bfs(farthest_node, graph) center_node = max(distances, key=distances.get) # Place the first black node at the center black_nodes = [center_node] distances_from_center = bfs(center_node, graph) # Try to place other black nodes for node, node_distance in sorted(distances_from_center.items(), key=lambda x: x[1]): if node_distance >= d * (len(black_nodes)): black_nodes.append(node) if len(black_nodes) == k: return k return -1"},{"question":"In the kingdom of Abracadabra, there are n cities and m bidirectional roads connecting them. The king has decided to conduct a census to determine which cities are critical for connectivity. A city is considered critical if removing it (and its associated roads) increases the number of connected components in the kingdom. Your task is to find all such critical cities. The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2·10^5). Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v), representing a bidirectional road connecting the cities u and v. Print the number of critical cities in the first line. In the next line, print the critical cities in ascending order. If there are no critical cities, print 0 on the first line and leave the second line empty. Example: Input: 4 4 1 2 2 3 3 4 4 1 Output: 0 In this example, there are no critical cities because removing any single city will not disconnect the remaining cities.","solution":"from collections import defaultdict def find_critical_cities(n, m, roads): def dfs(u, parent): nonlocal time visited[u] = True discovery[u] = low[u] = time time += 1 children = 0 for v in graph[u]: if not visited[v]: children += 1 parent_map[v] = u dfs(v, u) low[u] = min(low[u], low[v]) if parent is None and children > 1: articulation_points.add(u) if parent is not None and low[v] >= discovery[u]: articulation_points.add(u) elif v != parent: low[u] = min(low[u], discovery[v]) graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) discovery = [float(\'inf\')] * (n + 1) low = [float(\'inf\')] * (n + 1) parent_map = [-1] * (n + 1) articulation_points = set() time = 0 for i in range(1, n + 1): if not visited[i]: dfs(i, None) articulation_points = sorted(articulation_points) return len(articulation_points), articulation_points # Example usage: # n = 4 # m = 4 # roads = [ # (1, 2), # (2, 3), # (3, 4), # (4, 1) # ] # print(find_critical_cities(n, m, roads))"},{"question":"Given an array of integers and a target integer k, your task is to determine if any two distinct elements in the array add up to k. If there are such elements, output their indices (1-based). If there are multiple pairs, you can output any one of them. If no such pair exists, output -1. The first line contains two integers n (1 le n le 10^5) and k (1 le k le 10^9). The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9). Print two integers — the indices of the two elements that add up to k, or -1 if no such elements exist. In the first sample, there are multiple pairs that could be a solution, such as 1 + 4 = k or 2 + 3 = k. In the second sample, no two distinct elements add up to k, so the output is -1.","solution":"def find_two_sum_indices(n, k, array): Determines if any two distinct elements in the array add up to k. Outputs their indices (1-based) if such a pair exists, otherwise outputs -1. index_map = {} for i, num in enumerate(array): complement = k - num if complement in index_map: # We found a pair return index_map[complement] + 1, i + 1 index_map[num] = i return -1"},{"question":"Liam is working with a list of numbers to find certain patterns. Given a list of integers, he needs to find the longest subsequence where the sum of two consecutive elements is an even number. The goal is to help Liam find the length of this longest subsequence. A subsequence is derived from the original list by removing zero or more elements without changing the order of the remaining elements. Write a function to calculate the length of the longest subsequence where the sum of any two consecutive elements is even. Your function should return only the length of the subsequence. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the list. - The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the list. Output: - Print a single integer, the length of the longest subsequence where the sum of any two consecutive elements is even. Example: Input: 5 1 3 2 4 6 Output: 3 In the first example, one of the longest subsequences with the desired property is [2, 4, 6], which has a length of 3. In the second example, one of the longest subsequences with the desired property is [8, 12, 16], which has a length of 4.","solution":"def longest_even_sum_subsequence(n, arr): Calculates the length of the longest subsequence where the sum of any two consecutive elements is even. Parameters: n (int): The number of elements in the list. arr (list of int): The elements of the list. Returns: int: The length of the longest valid subsequence. if n == 0: return 0 # Divide elements into even and odd even_count = sum(1 for x in arr if x % 2 == 0) odd_count = n - even_count # The longest subsequence will be either all evens or all odds return max(even_count, odd_count)"},{"question":"Given a sequence of numbers, a bubble sort algorithm will sort the sequence in non-decreasing order by repeatedly swapping adjacent elements that are in the wrong order. The algorithm runs until no swaps are needed, indicating that the sequence is sorted. However, for the purposes of this problem, we are only interested in counting the number of swaps required to sort the sequence using the bubble sort algorithm. You are given an array of n integers. Your task is to determine the number of swaps required to sort the array using the bubble sort algorithm. # Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. # Output Output a single integer, the number of swaps required to sort the array. # Example Input ``` 5 5 3 8 4 2 ``` Output ``` 7 ``` # Note In the example, the bubble sort algorithm performs the following swaps: ``` 5 3 8 4 2 -> 3 5 8 4 2 (swap 5 and 3) 3 5 8 4 2 -> 3 5 4 8 2 (swap 8 and 4) 3 5 4 8 2 -> 3 5 4 2 8 (swap 8 and 2) 3 5 4 2 8 -> 3 4 5 2 8 (swap 5 and 4) 3 4 5 2 8 -> 3 4 2 5 8 (swap 5 and 2) 3 4 2 5 8 -> 3 2 4 5 8 (swap 4 and 2) 3 2 4 5 8 -> 2 3 4 5 8 (swap 3 and 2) ``` In total, there are 7 swaps.","solution":"def bubble_sort_swaps(arr): Returns the number of swaps required to sort the array using bubble sort. n = len(arr) swap_count = 0 for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swap_count += 1 swapped = True if not swapped: break return swap_count"},{"question":"Sophie is organizing a toy car race on a straight track of length n. Each car starts at a specific position on the track and has a specific speed. Over time, due to their uniform speeds, their positions change accordingly. Since Sophie wants to ensure a fair race, she needs to know if there exists a point in time when all the cars line up in a single spot on the track. Given the initial position and speed of each car, determine if there exists a time t (t >= 0) such that all the cars meet at the same point on the track. The first line contains an integer n (1 ≤ n ≤ 100) — the number of cars in the race. The next n lines each contain two integers xi and vi (1 ≤ xi, vi ≤ 1000) — the initial position and speed of the i-th car. Print \\"Yes\\", if there is a time when all cars are at the same position, and \\"No\\" otherwise. You can print each letter in arbitrary case (upper or lower). # Sample Input 1 ``` 3 0 1 2 1 4 1 ``` # Sample Output 1 ``` Yes ``` # Sample Input 2 ``` 3 1 1 3 2 6 3 ``` # Sample Output 2 ``` No ``` Explanation: In the first example, since all cars have the same speed, they will never meet. In the second example, cars have different speeds, and it\'s possible for them to meet at some point in time. For example, after 2 units of time, the positions of the cars will be 3, 3, and 3 respectively, thus meeting at the same point.","solution":"def can_cars_meet(n, cars): Determines if there exists a time t (t >= 0) such that all the cars meet at the same point on the track. Parameters: n (int): Number of cars cars (list of tuple): List of tuples where each tuple contains the initial position and speed of each car Returns: str: \\"Yes\\" if all cars can meet at the same point, \\"No\\" otherwise speeds = {vi for _, vi in cars} if len(speeds) == 1: return \\"Yes\\" else: return \\"No\\""},{"question":"In a technology fair, a company is presenting a large matrix of LED lights. These lights can be turned on or off to form patterns. The matrix is represented as an `n x m` grid, consisting of 0s and 1s where 0 represents a light that is off and 1 represents a light that is on. The company wants to demonstrate a new feature – the ability to flip the lights in any row or any column. When a row or column is flipped, the lights that are off (0) will be turned on (1), and the lights that are on (1) will be turned off (0). The goal is to maximize the number of lights that are on after performing any number of row and column flips. Your task is to write a program that finds the maximum number of lights that can be on after performing any number of row and column flips. The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns in the matrix. The next `n` lines contain `m` integers each (either 0 or 1), representing the initial state of the matrix. Print a single integer - the maximum number of lights that can be on after any number of row and column flips. **Example:** Input: ``` 3 3 1 0 0 0 1 1 0 1 0 ``` Output: ``` 6 ``` In this example, the optimal way is to flip the second column and the third column, resulting in the following matrix: ``` 1 1 1 0 0 0 0 0 0 ``` Then flip the first row to maximize the number of on lights: ``` 0 0 0 1 1 1 1 1 1 ``` Finally, 6 lights are on (1s).","solution":"def max_lights_on(n, m, matrix): Returns the maximum number of lights that can be on after any number of row and column flips. from collections import Counter def flip_row(row): return [1 - cell for cell in row] def rows_counts_to_best_count(row_counts): max_count_on_same_pattern = 0 for count in row_counts.values(): flipped_count = n - count max_count_on_same_pattern = max(max_count_on_same_pattern, count, flipped_count) return max_count_on_same_pattern # Collect all row patterns row_patterns = Counter() for row in matrix: sorted_row = tuple(sorted(row)) row_patterns[sorted_row] += 1 # Determine the maximum count of lights that can be made on row_best_lights_count = rows_counts_to_best_count(row_patterns) max_lights = row_best_lights_count * m return max_lights"},{"question":"A car manufacturer has developed a prototype of a smart car that can navigate a grid-based city. The city is represented as an n x n grid, and each position in the grid could be either a road or a building. The smart car starts from a specified position and can only drive on roads. The goal is to find the shortest path from the starting position to a specified destination position. The car can move up, down, left, or right, but cannot move diagonally. You are to develop an algorithm to help the car find the shortest path to the destination, or determine if reaching the destination is impossible. The first line of input contains a single integer n, the size of the grid (1 ≤ n ≤ 100). The next n lines each contain n characters, either \'.\' or \'#\'. The character \'.\' represents a road, and the character \'#\' represents a building. The next line contains four space-separated integers sx, sy, dx, dy (0 ≤ sx, sy, dx, dy < n) representing the coordinates of the starting position (sx, sy) and the destination position (dx, dy). The starting and destination positions are guaranteed to be roads (\'.\'). If there is no possible path from the start to the destination, print -1. Otherwise, print the minimum number of moves required to reach the destination. Example: Input: 5 ... .#.#. ..#.. ... ..... 0 0 4 4 Output: 8 Explanation: In the given example, the grid is 5x5 with roads and buildings. The smart car starts at (0,0) and the destination is (4,4). The car can find the shortest path, which requires 8 moves.","solution":"from collections import deque def shortest_path(grid, n, start, end): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] sx, sy = start dx, dy = end if start == end: return 0 queue = deque([(sx, sy, 0)]) visited = set([(sx, sy)]) while queue: x, y, dist = queue.popleft() for dir_x, dir_y in directions: nx, ny = x + dir_x, y + dir_y if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': if (nx, ny) == (dx, dy): return dist + 1 visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"In a magical land of cascades and waterfalls, there live two kinds of mystical creatures: Sprites and Waterfalls. Each Sprite has a preference of Waterfalls it desires to inhabit. Each Sprite can only inhabit one Waterfall and each Waterfall can have at most one Sprite. Given the number of Sprites and Waterfalls and their preferences, your task is to determine the maximum number of Sprites that can be matched to the Waterfalls they desire. The input consists of an integer n (1 ≤ n ≤ 1000) — the number of Sprites, and another integer m (1 ≤ m ≤ 1000) — the number of Waterfalls. Following this, there are n lines, one for each Sprite. Each line starts with an integer k (0 ≤ k ≤ m) which indicates the number of Waterfalls the i-th Sprite desires, followed by k integers representing the 1-based indices of these Waterfalls. Output a single integer representing the maximum number of Sprites that can be matched to their desired Waterfalls. # Example Input ``` 3 3 2 1 2 1 2 1 3 ``` Output ``` 3 ``` Explanation - The first Sprite desires Waterfalls 1 and 2. - The second Sprite desires Waterfall 2. - The third Sprite desires Waterfall 3. One possible matching could be: - The first Sprite goes to Waterfall 1. - The second Sprite goes to Waterfall 2. - The third Sprite goes to Waterfall 3. Since each Sprite gets to inhabit one of its desired Waterfalls and each Waterfall has at most one Sprite, the maximum number of matches is 3.","solution":"def max_matching_sprites(n, m, preferences): def bpm(u, matchU, matchV, seen): for v in preferences[u]: if not seen[v]: seen[v] = True if matchV[v] == -1 or bpm(matchV[v], matchU, matchV, seen): matchU[u] = v matchV[v] = u return True return False matchU = [-1] * n matchV = [-1] * m result = 0 for i in range(n): seen = [False] * m if bpm(i, matchU, matchV, seen): result += 1 return result"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation any number of times: select two adjacent characters in the string that are different and remove both of them from the string. Your goal is to determine the length of the remaining string after performing the operation optimally. The first line of input contains an integer T (1 ≤ T ≤ 100), the number of test cases. Each of the next T lines contains a single string s (1 ≤ |s| ≤ 1000). For each test case, print a single integer, the length of the remaining string after performing the operations optimally. Sample input: ``` 3 abab aa abcabca ``` Sample output: ``` 0 2 1 ``` Explanation of the sample: - In the first test case, \\"abab\\" can be reduced by removing pairs \'ab\' and \'ab\' resulting in an empty string. - In the second test case, the string \\"aa\\" cannot be reduced further since there are no adjacent differing characters. - In the third test case, removing the pairs \'ab\' and \'bc\' will result in \'aca\'. Further removal of \'ac\' and \'a\' results in a single \'a\' left, giving a length of 1.","solution":"def remaining_string_length(s): Returns the length of the string after optimally removing adjacent different characters. stack = [] for char in s: if stack and stack[-1] == char: stack.append(char) elif stack and stack[-1] != char: stack.pop() else: stack.append(char) return len(stack) def process_test_cases(T, test_cases): Takes the number of test cases and a list of strings and returns a list of integers representing the length of the remaining string after performing the operations optimally for each string. return [remaining_string_length(s) for s in test_cases]"},{"question":"You are given a string representing a mathematical expression involving integers and the four basic arithmetic operators: addition (+), subtraction (-), multiplication (*), and division (/). The integers in the expression are guaranteed to be non-negative and do not contain leading zeros. The operations should follow the standard operator precedence rules: multiplication and division have higher precedence than addition and subtraction, and operators of equal precedence are evaluated from left to right. The division operator performs integer division. Your task is to evaluate the expression and print the result. The input consists of a single line containing a valid expression s of length no more than 100 characters. Print a single integer — the result of evaluating the expression. In the first example, the expression \\"3+5*2\\" evaluates to 13. In the second example, the expression \\"10/2-1\\" evaluates to 4. In the third example, the expression \\"6*3-4/2\\" evaluates to 16.","solution":"def evaluate_expression(s): Evaluates a mathematical expression involving integers and the basic arithmetic operations: addition (+), subtraction (-), multiplication (*), and division (/). The expression follows standard operator precedence and performs integer division. Parameters: - s (str): The input mathematical expression. Returns: - int: The result of evaluating the expression. import operator from collections import deque def parse_expression(expr): Parses the expression into a list of tokens (numbers and operators). num = \'\' tokens = [] for char in expr: if char.isdigit(): num += char else: if num: tokens.append(int(num)) num = \'\' tokens.append(char) if num: tokens.append(int(num)) return tokens def apply_operator(ops, values): Applies the operator on the top of the ops stack to the top two values in the values stack. right = values.pop() left = values.pop() op = ops.pop() operators = { \'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': lambda x, y: x // y } values.append(operators[op](left, right)) def precedence(op): Returns the precedence of the given operator. if op in (\'*\', \'/\'): return 2 if op in (\'+\', \'-\'): return 1 return 0 tokens = parse_expression(s) values = deque() ops = deque() for token in tokens: if isinstance(token, int): values.append(token) else: while (ops and precedence(ops[-1]) >= precedence(token)): apply_operator(ops, values) ops.append(token) while ops: apply_operator(ops, values) return values[0]"},{"question":"You are given a grid of dimensions n times m with non-negative integers. Your goal is to find a path from the top-left corner (grid[0][0]) to the bottom-right corner (grid[n-1][m-1]) such that you can only move either down or right at any point in time, and the sum of the numbers along the path is minimized. The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. The next n lines contain m integers each, representing the grid (0 le text{grid}[i][j] le 1000). Print one integer — the minimum sum of the numbers along such a path from grid[0][0] to grid[n-1][m-1]. In the first example, the optimal path is (0, 0) → (1, 0) → (2, 0) → (2, 1) → (2, 2), with the sum 5. In the second example, the optimal path is (0, 0) → (0, 1) → (0, 2) → (0, 3), with the sum 4. In the third example, as there\'s only one cell, the result is the value of that cell.","solution":"def min_path_sum(grid): Given a grid with non-negative integers, finds the minimum path sum from top-left to bottom-right corner, moving only down or right. n = len(grid) m = len(grid[0]) # Initialize a DP table with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Initialize the top-left corner of the DP table dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the minimum path sum return dp[n-1][m-1]"},{"question":"Given an m x n grid of integers, each cell in the grid has either a positive integer value or it is blocked (represented by -1). Starting from the top-left cell (0, 0), find the minimum sum path to reach the bottom-right cell (m-1, n-1). You can only move either right or down at any point in time. If there is no valid path, output -1. Each cell in the grid initially contains a positive integer and represents the cost to travel through it. Blocked cells cannot be traversed. Input: The first line contains two integers m and n (1 ≤ m, n ≤ 100). Each of the next m lines contains n integers. Each integer represents the value of the cell in the grid, where -1 denotes a blocked cell. Output: Output a single integer representing the minimum sum path value from (0, 0) to (m-1, n-1). If no such path exists, output -1. Example: Input: 3 3 1 3 1 1 -1 1 4 2 1 Output: 7","solution":"def min_path_sum(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == -1 or grid[m-1][n-1] == -1: return -1 dp = [[float(\'inf\')] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(m): for j in range(n): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0 and grid[i][j-1] != -1: dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[m-1][n-1] if dp[m-1][n-1] != float(\'inf\') else -1"},{"question":"You are given a tree with n nodes, rooted at node 1. Each node is weighted and the weight of the i-th node is w[i]. You have to determine the maximum sum of weights of nodes in the subtree of each node. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of nodes in the tree. The second line contains n space-separated integers w[1], w[2], ..., w[n] (1 ≤ w[i] ≤ 10^9) — the weights of the nodes. Each of the next n-1 lines contains two space-separated integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. Output n lines, where the i-th line should contain the maximum sum of weights of nodes in the subtree of the i-th node. Example: Input: 5 3 2 1 10 1 1 2 1 3 3 4 3 5 Output: 17 2 12 10 1 Explanation: In this example: - The subtree rooted at node 1 includes nodes 1, 2, 3, 4, and 5, so the maximum sum is 3 + 2 + 1 + 10 + 1 = 17. - The subtree rooted at node 2 only includes node 2, so the maximum sum is 2. - The subtree rooted at node 3 includes nodes 3, 4, and 5, so the maximum sum is 1 + 10 + 1 = 12. - The subtree rooted at node 4 only includes node 4, so the maximum sum is 10. - The subtree rooted at node 5 only includes node 5, so the maximum sum is 1.","solution":"def calculate_subtree_sums(n, weights, edges): from collections import defaultdict import sys sys.setrecursionlimit(200000) # Convert weights to zero based index weights = [0] + weights # Create the adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # To store the maximum sum of the subtree for each node subtree_sum = [0] * (n + 1) def dfs(node, parent): subtree_sum[node] = weights[node] for neighbour in tree[node]: if neighbour == parent: continue dfs(neighbour, node) subtree_sum[node] += subtree_sum[neighbour] # Assuming the tree is rooted at node 1 dfs(1, -1) return subtree_sum[1:] # Example usage: n = 5 weights = [3, 2, 1, 10, 1] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] print(calculate_subtree_sums(n, weights, edges))"},{"question":"You are given a string composed of lowercase English letters. Your task is to determine whether you can reorder the letters of the string such that no two adjacent characters are the same. If possible, you should print one such arrangement. If it is not possible, print \\"Not possible\\". Input: The input consists of a single line that contains the string s (1 ≤ |s| ≤ 1000). Output: If a valid arrangement exists, print the rearranged string with no two adjacent characters being the same. If multiple valid arrangements exist, print any of them. If no valid arrangement exists, print \\"Not possible\\". Example: Input: aabb Output: abab Input: aaab Output: Not possible","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_string(s): Returns a rearranged string such that no two adjacent characters are the same, or \\"Not possible\\" if such arrangement is not possible. if not s: return \\"\\" # Count frequency of each character char_count = Counter(s) max_heap = [] # Push all characters with their frequencies in a max heap for char, freq in char_count.items(): heappush(max_heap, (-freq, char)) result = [] prev_freq, prev_char = 0, \'\' # Process the heap while max_heap: freq, char = heappop(max_heap) result.append(char) if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_freq = freq + 1 # Decrease frequency prev_char = char result = \'\'.join(result) # If the rearranged string length matches original string length, return the result if len(result) == len(s): return result else: return \\"Not possible\\""},{"question":"Given an array of integers, an operation is defined as selecting any element in the array and multiplying it by -1. Your task is to determine the minimum number of operations required to make the sum of the array\'s elements equal to a given target value. The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000) — the elements of the array. The third line contains a single integer t (-1000 ≤ t ≤ 1000) — the target value for the sum of the array\'s elements. If it is not possible to achieve the target value, print -1. Otherwise, print the minimum number of operations required. Example: Input: 5 1 2 -3 4 5 6 Output: 1 Explanation: By multiplying the element -3 by -1, we get 3. The resulting array is [1, 2, 3, 4, 5] with a sum of 15. However, by applying only one operation to change -3 to 3, we approach the target sum. Thus, the minimum number of operations required is 1.","solution":"def min_operations_to_target(n, array, t): Returns the minimum number of operations required to make the sum of the array\'s elements equal to t. If it\'s not possible, returns -1. current_sum = sum(array) target_delta = t - current_sum # No operations needed if the initial sum is already t if target_delta == 0: return 0 # A list to keep track of how much the sum changes for each element if multiplied by -1 deltas = [2*ai for ai in array] deltas.sort(reverse=True) # Sort in descending order to minimize operations total_change = 0 operations = 0 for delta in deltas: if abs(total_change) >= abs(target_delta): break total_change += delta operations += 1 if abs(total_change) < abs(target_delta): return -1 return operations"},{"question":"You are given an integer array `nums` of length `n` and an integer `k`. Your task is to determine if the array can be divided into `k` contiguous subarrays such that each subarray has the same sum. Formally, we call a partition valid if: - The array can be split into `k` contiguous subarrays. - Each of these `k` contiguous subarrays has the same sum. The first line contains two integers `n` and `k` (1 ≤ `k` ≤ `n` ≤ 10^5). The second line contains `n` integers `nums[i]` (1 ≤ `nums[i]` ≤ 10^9). Output \\"YES\\" if such a partition is possible, otherwise print \\"NO\\". # Example 1: Input: ``` 6 3 2 2 2 2 2 2 ``` Output: ``` YES ``` # Example 2: Input: ``` 6 2 1 2 3 4 5 6 ``` Output: ``` NO ``` # Example 3: Input: ``` 5 5 1 1 1 1 1 ``` Output: ``` YES ``` # Example 4: Input: ``` 8 4 1 2 3 4 10 20 30 40 ``` Output: ``` NO ``` # Note: - In Example 1, the array can be split into three subarrays `[2, 2]`, `[2, 2]` and `[2, 2]` each having a sum of 4. - In Example 2, the array cannot be split into two subarrays that both have the same sum. - In Example 3, the array naturally splits into five subarrays `[1]`, `[1]`, `[1]`, `[1]` and `[1]` each having a sum of 1. - In Example 4, no valid subarray partition exists to match the required conditions.","solution":"def can_partition_into_k_subarrays(nums, k): Determines if the array can be divided into k contiguous subarrays such that each subarray has the same sum. total_sum = sum(nums) # If the total sum is not divisible by k, we cannot have k subarrays with equal sum if total_sum % k != 0: return \\"NO\\" target_sum = total_sum // k current_sum = 0 subarray_count = 0 for num in nums: current_sum += num if current_sum == target_sum: subarray_count += 1 current_sum = 0 if subarray_count == k: return \\"YES\\" else: return \\"NO\\""},{"question":"You\'ve been given two arrays, A and B, each containing n positive integers. Your task is to determine if it\'s possible to pair elements from A with elements from B such that the following conditions are met: - Each element in A is paired with exactly one element in B. - The sum of the paired elements (A_i + B_i) from the respective arrays must be greater than or equal to a given integer k. Write a function that returns \\"YES\\" if such a pairing is possible, otherwise return \\"NO\\". The input consists of: - An integer t (1 ≤ t ≤ 1000) representing the number of test cases. - For each test case: - An integer n (1 ≤ n ≤ 10^5) representing the number of elements in the arrays. - An integer k (1 ≤ k ≤ 10^9). - An array A of n integers (1 ≤ A_i ≤ 10^9). - An array B of n integers (1 ≤ B_i ≤ 10^9). It is guaranteed that the sum of n over all test cases does not exceed 10^6. Output \\"YES\\" or \\"NO\\" for each test case on a new line. **Example:** Input: ``` 2 3 10 3 1 4 8 9 7 5 12 1 2 3 4 5 10 10 10 10 10 ``` Output: ``` YES NO ``` **Explanation:** In the first test case, A = [3, 1, 4] and B = [8, 9, 7]. The pairs can be (3, 7), (1, 9), and (4, 8) resulting in sums 10, 10, and 12 respectively, all of which are greater than or equal to 10. In the second test case, no pairing can satisfy the condition for k = 12. For example, (1, 10) results in 11, which is less than 12.","solution":"def can_pair_to_meet_requirement(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0], test_cases[i][1] A = sorted(test_cases[i][2]) B = sorted(test_cases[i][3], reverse=True) possible = all(A[j] + B[j] >= k for j in range(n)) if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"After an exhausting day at work, Bob decides to relax by playing with strings and numbers. Here is the game he came up with: Given a string s consisting of only characters \'a\' and \'b\', and an integer k, Bob wants to know the number of substrings of length exactly k that contain at least one \'a\' and at least one \'b\'. Can you help Bob find the answer? The first line of input contains an integer t (1 le t le 10^4) — the number of test cases. Each test case consists of a string s (1 ≤ |s| ≤ 10^5) and an integer k (1 ≤ k ≤ |s|). For each test case, print the number of substrings of length exactly k that contain at least one \'a\' and at least one \'b\'. Example: Input: 3 abab 2 aabaa 3 bbbbb 1 Output: 3 3 0","solution":"def count_valid_substrings(s, k): Returns the number of substrings of length exactly k that contain at least one \'a\' and one \'b\'. n = len(s) count = 0 for i in range(n - k + 1): substring = s[i:i+k] if \'a\' in substring and \'b\' in substring: count += 1 return count def process_test_cases(test_cases): Process multiple test cases and return a list of results. results = [] for s, k in test_cases: results.append(count_valid_substrings(s, k)) return results"},{"question":"Jane is organizing a charity event and she has several booths offering different activities. The event lasts for n minutes and each activity takes a certain duration to complete and provides a certain amount of fun. Jane wants to maximize the total amount of fun that visitors can have by participating in different activities, given the limited time available during the event. However, some activities can be done in parallel and others can\'t. If an activity cannot be done in parallel with another activity, participants must choose only one of them during any overlapping period. You will help Jane decide which activities to schedule to maximize the fun. The first line of the input contains two integers n and m (1 ≤ n ≤ 1,000; 1 ≤ m ≤ 100) — the total duration of the event in minutes and the number of available activities, respectively. The next m lines each contain three integers ai, bi, fi (1 ≤ ai, bi ≤ n; 1 ≤ fi ≤ 1,000) — the start time ai, the end time bi and the fun level fi of the i-th activity. The activities\' times are inclusive. The subsequent line contains an integer k (0 ≤ k ≤ m*(m−1)/2) denoting the number of pairs of incompatible activities. Each of the next k lines contains two integers xi, yi (1 ≤ xi, yi ≤ m) indicating that the xi-th activity cannot be done in parallel with the yi-th activity. Output a single integer — the maximum total fun that can be achieved during the event. **Example:** Input: ``` 10 3 1 3 5 4 6 7 7 10 4 1 1 3 ``` Output: ``` 12 ``` In this example, the optimal solution is to schedule the second (4-6, fun = 7) and third (7-10, fun = 4) activities for a total of 12 fun points.","solution":"def max_fun(n, m, activities, k, incompatibles): def can_schedule(activity, schedule): for sch in schedule: if incompatibles.get((min(activity, sch), max(activity, sch)), False): return False return True def dfs(idx, current_fun, schedule): nonlocal max_fun_value if idx == m: max_fun_value = max(max_fun_value, current_fun) return # without current activity dfs(idx + 1, current_fun, schedule) activity = sorted_activities[idx] activity_idx = activity[3] if can_schedule(activity_idx, schedule): # with current activity dfs(idx + 1, current_fun + activity[2], schedule + [activity_idx]) sorted_activities = sorted([(a[1], a[0], a[2], idx+1) for idx, a in enumerate(activities)]) incompatibles = {(min(x, y), max(x, y)): True for x, y in incompatibles} max_fun_value = 0 dfs(0, 0, []) return max_fun_value def solution(n, m, activities, k, incompatibilities): return max_fun(n, m, activities, k, incompatibilities) if __name__ == \\"__main__\\": n = 10 m = 3 activities = [ (1, 3, 5), (4, 6, 7), (7, 10, 4) ] k = 1 incompatibilities = [(1, 3)] print(solution(n, m, activities, k, incompatibilities)) # Output should be 12"},{"question":"You are given a list of integers representing the numbers collected by competitors in a new game. The game rules dictate that any integer can be either positive, negative, or zero. Your task is to find the sum of the maximum possible subarray in the list, where the subarray can be empty. For example, if the list is `[-1, 2, 3, -4, 5]`, the maximum possible subarray sum is `6` (subarray `[2, 3, -4, 5]`). The first line contains an integer n (1 leq n leq 10^5) — the number of integers in the list. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the numbers in the list. Print the sum of the maximum possible subarray. If the list is empty or only contains negative numbers, print `0`.","solution":"def max_subarray_sum(nums): Returns the sum of the maximum possible subarray. If the list only contains negative numbers or is empty, returns 0. if not nums: return 0 max_sum = 0 current_sum = 0 for num in nums: current_sum = max(0, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A group of friends are playing a game where they take turns selecting numbers from an array. The game starts with an array of positive integers. On each player\'s turn, they select a number, remove it from the array, and add its value to their score. The players play optimally to maximize their own score. The twist in the game is that each player can choose how many numbers they will select on their turn, but the numbers must be consecutive within the array. For example, if the array is [3, 1, 5, 7], a player may choose to take [3], [1], [5], [7], [3, 1], [1, 5], [5, 7], [3, 1, 5], [1, 5, 7] or [3, 1, 5, 7] on their turn. The game ends when all the numbers have been removed from the array, and the player with the highest score wins. Determine if the first player (the one who starts the game) will win or lose if both players play optimally. The first line contains a positive integer n (1 leq n leq 10^5) — the number of elements in the array. The second line contains n space-separated positive integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^4) — the elements of the array. Print \\"First\\" if the first player wins the game, otherwise print \\"Second\\". In the first example, the array is [4, 7, 2]. The first player can take [4, 7] to maximize their score, making their score 11. The second player then takes the remaining [2], and their score is 2. The first player wins. In the second example, the array is [2, 3, 5, 7]. Both players play optimally. The first player will take [2, 3, 5] making their score 10, and the second player takes [7] making their score 7. The first player wins.","solution":"def optimal_game_strategy(n, arr): if n % 2 == 0: return \\"First\\" if sum(arr[::2]) > sum(arr[1::2]) else \\"Second\\" return \\"First\\""},{"question":"You are given an undirected weighted complete graph with n vertices. Each edge has a weight and it is given in the form of a matrix where the element w_i,j (1 ≤ i, j ≤ n) represents the weight of the edge between vertex i and vertex j. You need to construct a Minimum Spanning Tree (MST) and find the total weight of this MST. Recall that a Minimum Spanning Tree is a subset of the edges that connects all vertices together, without any cycles and with the minimum possible total edge weight. The first line of input contains a single integer n (2 ≤ n ≤ 1000) — the number of vertices in the graph. Then n lines follow, each containing n integers. The j-th integer in the i-th line represents the weight w_i,j (0 ≤ w_i,j ≤ 1000) of the edge between vertices i and j. It is guaranteed that w_i,i = 0 for all i and that w_i,j = w_j,i for all 1 ≤ i, j ≤ n. Print a single integer — the total weight of the MST. For example: Input: ``` 4 0 1 3 4 1 0 2 4 3 2 0 5 4 4 5 0 ``` Output: ``` 7 ```","solution":"import heapq def find_mst_weight(n, weights): def prim(): total_weight = 0 visited = [False] * n min_heap = [(0, 0)] while min_heap: weight, current = heapq.heappop(min_heap) if visited[current]: continue visited[current] = True total_weight += weight for neighbor in range(n): if not visited[neighbor] and weights[current][neighbor] != 0: heapq.heappush(min_heap, (weights[current][neighbor], neighbor)) return total_weight return prim()"},{"question":"Alex is a video game enthusiast and loves role-playing games (RPGs). In the game he is currently playing, there is a quest where he needs to collect different types of magical stones to upgrade his abilities. Each stone has a specific power value associated with it. Alex can collect any number of stones but he wants to maximize the total power of the stones he carries, under the condition that the total weight does not exceed his carrying capacity. The game provides n different types of stones, each with a weight and a power value. Alex has a backpack that can carry a maximum weight W. Your task is to help Alex determine the maximum total power he can achieve by selecting the stones optimally without exceeding the weight limit. The first line of input contains two integers n (1 ≤ n ≤ 1000) and W (1 ≤ W ≤ 10000), the number of different types of stones and the maximum carrying capacity respectively. The next n lines each contain two integers wi (1 ≤ wi ≤ 10000) and pi (1 ≤ pi ≤ 10000), the weight and power value of the i-th type of stone. Print a single integer, the maximum total power that Alex can achieve with the given constraints. In the first test, Alex can carry one stone of weight 3 and power 5, and another stone of weight 6 and power 8. Thus, the maximum total power is 13. In the second test, Alex cannot carry any stone because their total weight exceeds the backpack\'s capacity. Thus, the maximum total power is 0.","solution":"def max_total_power(n, W, stones): # Initialize dp array with zeroes dp = [0] * (W + 1) # Process each stone for wi, pi in stones: # Traverse dp array from right to left for w in range(W, wi - 1, -1): dp[w] = max(dp[w], dp[w - wi] + pi) # The maximum power will be in dp[W] return dp[W]"},{"question":"Given two integers, l and r (1 leq l leq r leq 10^9). Determine if there exists an integer x such that l leq x leq r and both x and x+1 are coprime (i.e., gcd(x, x+1) = 1). If such an integer exists, print \\"YES\\" and the integer x. Otherwise, print \\"NO\\". **Input:** The first line contains a single integer T — the number of test cases (1 leq T leq 10^5). Each of the following T lines contains two integers l and r. **Output:** For each test case, output \\"YES\\" followed by the integer x if such an integer exists, or \\"NO\\" otherwise. **Example:** Input: ``` 3 1 5 7 8 15 17 ``` Output: ``` YES 1 YES 7 YES 15 ``` **Note:** In the first test case, we can take x = 1 because gcd(1, 2) = 1. In the second test case, we can take x = 7 because gcd(7, 8) = 1. In the third test case, we can take x = 15 because gcd(15, 16) = 1. The solution should efficiently handle large values within the given constraints.","solution":"def coprime_check(T, cases): results = [] for l, r in cases: if r - l + 1 > 1: results.append(f\\"YES {l}\\") else: results.append(\\"NO\\") return results"},{"question":"In a mysterious kingdom, there are n castles positioned at some points on a number line. The king wants to install a defense system by placing some magical barriers. Each barrier can cover exactly one contiguous segment of the number line between two positions, but it can only protect castles that lie exactly on its endpoints. You are given the positions of the castles and need to determine the minimum number of such barriers required to protect all the castles. The first line contains an integer n (1 leq n leq 2 cdot 10^5) — the number of castles. The second line contains n integers x_1, x_2, ldots, x_n (1 leq x_i leq 10^9) — the positions of the castles. Print the minimum number of barriers needed to cover all the castles. # Input The first line contains one integer n (1 leq n leq 2 cdot 10^5) — the number of castles. The second line contains n integers x_1, x_2, ldots, x_n (1 leq x_i leq 10^9) — the positions of the castles. # Output Print one integer — the minimum number of barriers needed to cover all the castles. # Example Input ``` 6 1 2 3 5 6 7 ``` Output ``` 2 ``` Input ``` 3 10 20 30 ``` Output ``` 3 ```","solution":"def minimum_barriers(n, positions): if n == 0: return 0 # Sort the positions positions.sort() # Initialize the number of barriers barriers = 1 # Start from the first castle current_barrier_end = positions[0] for i in range(1, n): if positions[i] != positions[i - 1] + 1: barriers += 1 # Need a new barrier current_barrier_end = positions[i] return barriers"},{"question":"You are given a set of n intervals on a number line, where each interval is represented by a pair of integers [l_i, r_i] (1 ≤ i ≤ n). Two intervals [l_i, r_i] and [l_j, r_j] are considered overlapping if they share at least one common point, i.e., there exists some integer x such that l_i leq x leq r_i and l_j leq x leq r_j. Your task is to determine the maximum number of intervals that can overlap at the same point. The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of intervals. Then the next n lines each contain two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ 10^9), representing the endpoints of the ith interval. Print a single integer — the maximum number of intervals that overlap at the same point. Example: Input: ``` 5 1 3 2 5 4 6 7 9 8 10 ``` Output: ``` 2 ``` Explanation: - At point 2, intervals [1, 3] and [2, 5] overlap, so the maximum overlapping intervals at any point is 2.","solution":"def max_overlap(intervals): This function takes a list of intervals and returns the maximum number of overlapping intervals. events = [] for interval in intervals: l, r = interval events.append((l, 1)) # start of interval events.append((r + 1, -1)) # end of interval events.sort() max_overlap = 0 current_overlap = 0 for event in events: current_overlap += event[1] max_overlap = max(max_overlap, current_overlap) return max_overlap def process_intervals(n, interval_list): This function processes the input for intervals and returns the maximum overlap using max_overlap function. return max_overlap(interval_list)"},{"question":"A major trading firm has hired you to develop a program to help analyze stock prices. The firm is particularly interested in identifying price patterns across a historical data set. They want to detect \\"bullish runs,\\" which they define as periods during which the stock price strictly increases for a number of consecutive days. You are given the historical stock prices for n days and need to process k queries. Each query specifies a range of days, defined by two integers l and r, and asks for the length of the longest bullish run within that range. The first line of the input contains two space-separated integers n and k (1 ≤ n, k ≤ 100,000) — the number of days of historical stock prices and the number of queries, respectively. The second line contains n space-separated integers p_i (1 ≤ p_i ≤ 10^9) — the stock prices for each day. The following k lines describe the queries. Each query is given by two space-separated integers li and ri (1 ≤ li ≤ ri ≤ n). For each query, consider the subarray of stock prices from the l_i-th day to the r_i-th day (inclusive) and determine the length of the longest bullish run within that subarray. Output the answers to all queries in the order in which they are given in the input. For the i-th query, print one line containing a single integer — the length of the longest bullish run within the specified subarray. # Example Input ``` 10 2 100 180 260 310 40 535 695 76 85 120 1 5 6 10 ``` Output ``` 4 3 ``` Explanation - For the first query, the longest bullish run in the prices [100, 180, 260, 310, 40] is [100, 180, 260, 310], with a length of 4. - For the second query, the longest bullish run in the prices [535, 695, 76, 85, 120] is [76, 85, 120], with a length of 3.","solution":"def longest_bullish_run(prices, queries): Returns the length of the longest bullish run within given subarrays. :param prices: List of stock prices. :param queries: List of tuples where each tuple contains two integers (li, ri) representing the range. :return: List of integers representing the longest bullish run for each query. def find_bullish_run(subarray): max_run = 0 current_run = 1 for i in range(1, len(subarray)): if subarray[i] > subarray[i - 1]: current_run += 1 else: max_run = max(max_run, current_run) current_run = 1 max_run = max(max_run, current_run) return max_run results = [] for l, r in queries: subarray = prices[l-1:r] results.append(find_bullish_run(subarray)) return results"},{"question":"You are given two integers, m and n. Your task is to generate a matrix of size m x n filled with integers from 1 to m*n positioned in a special \'snake\' pattern. The \'snake\' pattern starts from the top left corner of the matrix, fills the first row from left to right, the second row from right to left, and alternates the direction for each subsequent row. # Input The first line of the input contains two integers, m (1 ≤ m ≤ 100) and n (1 ≤ n ≤ 100), separated by a space. # Output Output the resulting matrix of size m x n filled with integers from 1 to m*n in the described snake pattern. Each number should be separated by a space, and each row should be on a new line. # Example Input 2 3 Output 1 2 3 6 5 4 Input 4 4 Output 1 2 3 4 8 7 6 5 9 10 11 12 16 15 14 13 # Note In the first example, a 2x3 matrix is filled with numbers from 1 to 6 in a snake pattern. In the second example, a 4x4 matrix is filled with numbers from 1 to 16, alternating the direction for each row.","solution":"def generate_snake_matrix(m, n): Generates a matrix of size m x n filled with integers from 1 to m*n in a snake pattern. matrix = [[0] * n for _ in range(m)] num = 1 for i in range(m): if i % 2 == 0: for j in range(n): matrix[i][j] = num num += 1 else: for j in range(n-1, -1, -1): matrix[i][j] = num num += 1 return matrix"},{"question":"A new amusement park has opened, and it features a thrilling roller coaster ride. The roller coaster has `n` drops of different heights, and you want to experience the maximum thrill by selecting which drops to include in your ride. To ensure safety, the park imposes a restriction: the sum of the heights of the selected drops must not exceed a certain value `h`. The thrill value of a drop is equal to its height. Given the heights of the `n` drops and the maximum allowed total height `h`, determine the maximum possible sum of the heights of the selected drops. # Input - The first line contains two integers `n` and `h` (`1 ≤ n ≤ 1000`, `1 ≤ h ≤ 10^9`) — the number of drops and the maximum allowed total height. - The second line contains `n` integers `a1, a2, ..., an` (`1 ≤ ai ≤ 10^6`) — the heights of the drops. # Output Print a single integer — the maximum possible sum of the heights of the selected drops that does not exceed `h`. # Example Input ``` 5 10 2 3 7 4 1 ``` Output ``` 10 ``` Input ``` 4 5 2 2 3 2 ``` Output ``` 5 ``` # Note In the first example, you can select drops with heights `3`, `7`, or `2`, `3`, `4` to get a maximum sum of `10`. In the second example, you can select drops with heights `2`, `3` or `2`, `2` to get a maximum sum of `5`.","solution":"def max_possible_height(n, h, heights): Returns the maximum possible sum of the heights of the selected drops that does not exceed h. dp = [0] * (h + 1) for height in heights: for j in range(h, height - 1, -1): dp[j] = max(dp[j], dp[j - height] + height) return dp[h]"},{"question":"Morgan is managing a fruit supply chain and needs to keep track of the inventory in each warehouse. There are multiple warehouses, each storing a certain quantity of fruits. Morgan needs a system to handle the following operations efficiently: 1. `add quantity warehouse_id` - Add a specified quantity of fruits to a designated warehouse. 2. `remove quantity warehouse_id` - Remove a specified quantity of fruits from a designated warehouse. 3. `query warehouse_id` - Return the current quantity of fruits in the designated warehouse. Consider the following constraints: - `1 <= warehouse_id <= 10^5` (there can be up to 100,000 warehouses) - `1 <= quantity <= 10^9` (quantity can be very large, up to 1 billion) - The operations can be performed multiple times, and the number of operations `q` can be as large as 100,000. You need to design a program that efficiently processes these operations. For each `query` operation, output the current quantity of fruits in the specified warehouse. Input: - The first line contains an integer `q` (1 ≤ q ≤ 10^5) - the number of operations. - The next `q` lines contain one of the three types of operations in the format described above. Output: - For each `query` operation, output the quantity of fruits stored in the specified warehouse. Example: ``` Input: 8 add 100 1 add 200 2 query 1 remove 50 1 query 1 add 100 2 query 2 remove 150 2 Output: 100 50 300 ``` In this example, Morgan first adds 100 fruits to warehouse 1 and 200 fruits to warehouse 2. The system then responds to the first query with the current quantity in warehouse 1, which is 100. After removing 50 fruits from warehouse 1, the system responds to another query with the new quantity, which is 50. Then, Morgan adds 100 more fruits to warehouse 2 and the system responds to the final queries accordingly. Note that all operations are executed in sequence as they appear in the input.","solution":"class Inventory: def __init__(self): self.warehouses = {} def add(self, quantity, warehouse_id): if warehouse_id not in self.warehouses: self.warehouses[warehouse_id] = 0 self.warehouses[warehouse_id] += quantity def remove(self, quantity, warehouse_id): if warehouse_id in self.warehouses: self.warehouses[warehouse_id] = max(0, self.warehouses[warehouse_id] - quantity) def query(self, warehouse_id): return self.warehouses.get(warehouse_id, 0) def process_operations(operations): inventory = Inventory() results = [] for operation in operations: parts = operation.split() if parts[0] == \'add\': inventory.add(int(parts[1]), int(parts[2])) elif parts[0] == \'remove\': inventory.remove(int(parts[1]), int(parts[2])) elif parts[0] == \'query\': results.append(inventory.query(int(parts[1]))) return results"},{"question":"Given a binary tree, determine the maximum path sum. For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root. The input consists of a single binary tree node root. You must implement a function `maxPathSum(root)` that returns an integer, the maximum path sum of the binary tree provided. # Input The function `maxPathSum` receives a binary tree node root. Each node in the tree has the following structure: ``` class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None ``` # Output Return an integer representing the maximum path sum. # Constraints - The number of nodes in the tree is in the range [1, 3 * 10^4]. - `-1000 <= Node.val <= 1000` # Example **Example 1:** ``` Input: root = [1,2,3] Output: 6 Explanation: The path with the maximum sum is 2 → 1 → 3. ``` **Example 2:** ``` Input: root = [-10,9,20,null,null,15,7] Output: 42 Explanation: The path with the maximum sum is 15 → 20 → 7. ``` # Notes - Always consider edge cases such as a tree with a single node or where all nodes contain negative values. - Thoroughly test your function to ensure it handles a wide range of tree structures.","solution":"class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None def maxPathSum(root): Returns the maximum path sum in the binary tree. def helper(node): nonlocal max_sum if not node: return 0 # Compute the maximum path sum passing through the left and right child left_gain = max(helper(node.left), 0) right_gain = max(helper(node.right), 0) # The price of the path that passes through this node price_new_path = node.val + left_gain + right_gain # Update the maximum path sum found so far max_sum = max(max_sum, price_new_path) # For recursion, return the maximum gain if we continue the same path return node.val + max(left_gain, right_gain) max_sum = float(\'-inf\') helper(root) return max_sum"},{"question":"Consider a maze represented as an n x m grid of cells. Each cell can either be empty (represented by \'.\') or blocked by a wall (represented by \'#\'). You are given the positions of two entities in the maze: the starting position of a player (S) and the target position (T). The player can move horizontally or vertically to an adjacent empty cell (cells are 4-connected). You need to determine if there is a valid path from the starting to the target position through the empty cells. If the path exists, the player can reach the target by traversing empty cells only. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — representing the number of rows and columns of the maze respectively. The next n lines each contain m characters where each character is either \'.\', \'#\', \'S\', or \'T\'. \'S\' marks the starting cell, \'T\' marks the target cell, \'.\' indicates an empty cell, and \'#\' indicates a wall. Output \\"YES\\" if there is a path from the starting position to the target position through empty cells, otherwise, output \\"NO\\". Example: Input: 5 5 # #S..# #.# #..T# # Output: YES Input: 5 5 # #S# # #T# # Output: NO","solution":"def is_path_exists(n, m, grid): def bfs(start, target): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # four possible directions: up, down, left, right queue = [start] visited = set() visited.add(start) while queue: x, y = queue.pop(0) if (x, y) == target: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] in (\'.\', \'T\') and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return False start = None target = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'T\': target = (i, j) if not start or not target: return \\"NO\\" return \\"YES\\" if bfs(start, target) else \\"NO\\""},{"question":"Aenean is participating in an archery tournament where the target has n concentric circular rings, numbered from 1 (inner-most) to n (outer-most). She scores points based on which ring her arrow hits. Specifically, for hitting the i-th ring, she gets 2 ** (n-i) points. Aenean has practiced a lot and is very consistent; she always hits specific rings in a predefined order. Given the order of rings she hits, determine the total score Aenean will accumulate. The first line contains one integer n (1 ≤ n ≤ 50) — the number of rings. The second line contains k integers separated by spaces (1 ≤ k ≤ 100) — representing the specific rings Aenean hits in each shot, in order. Output a single integer — the total score Aenean will accumulate by the end of the tournament. Example Input: 3 1 2 1 Example Output: 6 Explanation: - Hitting the 1st ring (2 ** (3-1) = 4 points). - Hitting the 2nd ring (2 ** (3-2) = 2 points). - Hitting the 1st ring again (4 points). Total score = 4 + 2 + 4 = 10","solution":"def calculate_total_score(n, ring_hits): Calculate the total score based on the rings hit. Parameters: n (int): The number of concentric rings. ring_hits (list of int): List of integers representing the rings hit in each shot. Returns: int: The total score. total_score = 0 for ring in ring_hits: total_score += 2 ** (n - ring) return total_score"},{"question":"Petra enjoys collecting rare plants. She wants to arrange her plants in a row on a shelf. Each plant must be assigned a position such that taller plants are always to the left of shorter plants. Each plant has a unique height. Petra owns `n` plants, each with a specific height stored in an array `heights`. She also has an array `positions` which tells her the order that they must be placed on the shelf. Implement a function that will return an array of the heights of the plants as they should be arranged on the shelf according to `positions`. Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of plants. - The second line contains `n` integers, the heights of the plants. - The third line contains `n` integers, the positions where each plant should be placed. Output - Output a single line containing `n` integers, the heights of the plants arranged according to `positions`. Example **Input:** ``` 5 4 3 2 5 1 3 1 2 5 4 ``` **Output:** ``` 3 2 4 1 5 ``` Explanation Given the input, the plants have the following heights: [4, 3, 2, 5, 1]. The desired positions for these plants are: [3, 1, 2, 5, 4]. So, the plants should be arranged in the order of heights [3, 2, 4, 1, 5] to respect the desired positioning where tallest plants appear before the shorter ones.","solution":"def arrange_plants(n, heights, positions): Arrange plants on the shelf such that the tallest plants are on the left according to the specified positions. Args: - n (int): The number of plants. - heights (list): The heights of the plants. - positions (list): The positions that each plant should occupy. Returns: - list: A list of heights rearranged according to the positions. result = [0] * n # Initialize a list to store the heights at the correct positions for height, position in zip(heights, positions): result[position - 1] = height return result"},{"question":"In a small village, they have a tradition where they create a large circular bonfire for their annual festival. The villagers want the bonfire to be as large as possible, but they have a limited amount of wood to build the structure. The villagers have arranged the wood pieces in the form of a circle where each piece of wood is placed end to end. The length of each wood piece varies and they need your help to find the maximum length of a contiguous segment of wood that can be used for the bonfire. You are given an array containing the lengths of the wood pieces placed in a circular manner. Your task is to find the maximum length of a contiguous segment of wood in this circular arrangement. The first line contains an integer n (1 ≤ n ≤ 100000) — the number of wood pieces. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the lengths of the wood pieces in clockwise order. Print one integer — the maximum length of a contiguous segment of wood in the circular arrangement. For example: ``` Input: 5 1 2 3 4 5 Output: 15 ``` In this example, the entire circle can be used, and the maximum length of the contiguous segment of wood is 15 (which is the sum of all wood pieces).","solution":"def max_contiguous_wood_segment(n, wood_lengths): Returns the maximum length of a contiguous segment of wood in the circular arrangement. :param n: Number of wood pieces. :param wood_lengths: List containing lengths of the wood pieces. :return: Maximum length of a contiguous segment of wood. if n == 1: return wood_lengths[0] total_sum = sum(wood_lengths) max_sum = wood_lengths[0] current_sum = 0 # Extend the wood_lengths array to handle the circular nature by doubling it extended_wood_lengths = wood_lengths * 2 start = 0 for end in range(2 * n): current_sum += extended_wood_lengths[end] # If end - start + 1 exceeds n, we slide the start forward if end - start + 1 > n: current_sum -= extended_wood_lengths[start] start += 1 max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given two arrays of integers, both of the same length. A \\"swap\\" operation allows you to swap any two elements, one from each array, such that the sum of the elements in each array remains the same or becomes equal after the swap. Your task is to determine the minimum number of swap operations required to make the arrays identical in terms of having the same elements (not necessarily in the same order). Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the arrays. - The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^6) — the elements of the first array. - The third line contains n integers b1, b2, ..., bn (0 ≤ bi ≤ 10^6) — the elements of the second array. Output: - Print a single integer — the minimum number of swap operations required to make the arrays identical, or -1 if it is not possible. Example: Input: 4 1 2 3 4 4 3 2 1 Output: 0 In this example, the arrays are already identical in terms of their elements. No swaps are necessary.","solution":"def min_swaps_to_identical(n, a, b): from collections import Counter # Count frequency of each element in both arrays counter_a = Counter(a) counter_b = Counter(b) # Both arrays should have the same frequency of each element if counter_a != counter_b: return -1 # If arrays are identical in terms of elements, no swaps are needed, return 0 return 0"},{"question":"You are given a grid consisting of n rows and m columns, where each cell contains a positive integer. The number on each cell represents the cost to step on that cell. You are currently sitting at the top-left corner of the grid (1,1) and want to move to the bottom-right corner (n,m). You can only move to the right or down to adjacent cells. Your goal is to minimize the total cost spent along the path from the top-left to the bottom-right corner. Write a function to find the minimum cost path from the top-left corner to the bottom-right corner. # Input Format - The first line contains two integers n and m (1 le n, m le 1000) – the number of rows and columns in the grid. - Each of the next n lines contains m integers representing the grid (1 le grid[i][j] le 10^5). # Output Format - Output a single integer, the minimum cost to travel from the top-left to the bottom-right corner of the grid. # Example **Input:** ``` 3 3 1 3 1 1 5 1 4 2 1 ``` **Output:** ``` 7 ``` **Explanation:** The path (1, 3, 1, 1, 1) exhibits the minimum cost of 7. # Constraints - The grid values and dimensions ensure that calculations can be performed using dynamic programming within the constraints.","solution":"def min_cost_path(n, m, grid): Returns the minimum cost to move from the top-left corner to the bottom-right corner of the grid. # Create a 2D dp array with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Initialize the first cell with the same value as in grid dp[0][0] = grid[0][0] # Fill the first row by accumulating values from left to right for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column by accumulating values from top to bottom for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the minimum cost to reach that cell return dp[n-1][m-1]"},{"question":"A coding contest organizer needs to determine the winners for different categories of participants based on their total scores. Each participant is identified by their name and belongs to one of three categories: \\"novice\\", \\"expert\\", or \\"master\\". Each participant can take part in multiple contests and receive a score for each contest. The organizer has the following data available in a file named `participants.txt`: - Each line of the file contains the following details for a single contest result: `name` (a string without spaces), `category` (one of \\"novice\\", \\"expert\\", or \\"master\\"), and `score` (a non-negative integer). The task is to write a program that reads the file and outputs the names of the top-scoring participants in each category. If there are multiple participants with the highest score in a category, list all of them. # Input - The `participants.txt` file exists in the same directory as your program. - Each line in the file follows the format: `<name> <category> <score>`. - You may assume that the file is not empty and contains valid data. - There is at least one participant in each category. # Output - Print the names of the top-scoring participants in the \\"novice\\" category, separated by spaces. - Print the names of the top-scoring participants in the \\"expert\\" category, separated by spaces. - Print the names of the top-scoring participants in the \\"master\\" category, separated by spaces. # Example If the `participants.txt` contains: ``` alice novice 50 bob expert 40 charlie master 60 dave novice 50 eve expert 30 frank master 70 grace novice 40 ``` Your program should output: ``` alice dave bob frank ``` Write a function to solve this problem. Please ensure the program handles opening and reading the file, processing the scores, and outputting the results correctly.","solution":"def find_top_scorers(file_path): from collections import defaultdict scores = { \\"novice\\": defaultdict(int), \\"expert\\": defaultdict(int), \\"master\\": defaultdict(int) } with open(file_path, \'r\') as f: lines = f.readlines() # Calculate total scores for line in lines: name, category, score = line.strip().split() score = int(score) if category in scores: scores[category][name] += score # Find top scorers in each category top_scorers = {category: [] for category in scores} for category in scores: max_score = max(scores[category].values()) top_scorers[category] = [name for name, score in scores[category].items() if score == max_score] # Print results for category in [\\"novice\\", \\"expert\\", \\"master\\"]: print(\\" \\".join(top_scorers[category])) # Example usage: # find_top_scorers(\'participants.txt\')"}]'),A={name:"App",components:{PoemCard:j},data(){return{searchQuery:"",visibleCount:4,poemsData:Y,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(a)||e.solution&&e.solution.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},N={class:"card-container"},z={key:0,class:"empty-state"},F=["disabled"],P={key:0},R={key:1};function C(a,e,h,m,r,s){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",N,[(n(!0),i(w,null,_(s.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),i("div",z,' No results found for "'+u(r.searchQuery)+'". ',1)):l("",!0)]),s.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[r.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,F)):l("",!0)])}const L=d(A,[["render",C],["__scopeId","data-v-42bb3b0c"]]),G=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/36.md","filePath":"quotes/36.md"}'),D={name:"quotes/36.md"},M=Object.assign(D,{setup(a){return(e,h)=>(n(),i("div",null,[x(L)]))}});export{G as __pageData,M as default};
