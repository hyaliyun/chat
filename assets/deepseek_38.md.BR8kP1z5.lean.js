import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,h,m,a,r){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const j=d(k,[["render",O],["__scopeId","data-v-7685654f"]]),Y=JSON.parse('[{"question":"Alexa is organizing a charity auction and wants to ensure the items get sold for their maximum possible price. She has `n` items numbered from 1 to n, and each item `i` has a predicted bidding range from `l_i` to `r_i` (inclusive). Alexa wants to arrange the auction in such a way that each item is sold on a different day, and the price on any day does not exceed `m` dollars. Your task is to help Alexa schedule the items for auction in a way that maximizes the total auction earnings while respecting the day limit. The auction takes place over a consecutive number of days starting from 1. For simplicity, any bid below the minimum predicted price on a given day is not considered. The first line of input contains three integers `n`, `m`, and `d` (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000, 1 ≤ d ≤ 10000) — the number of items, the maximum price on any day, and the number of auction days respectively. The next `n` lines contain two integers `l_i` and `r_i` (1 ≤ l_i ≤ r_i ≤ m) — the bidding range for each item. Print the start and end day for each auction item, such that the sale price maximizes while ensuring no two items are sold on the same day. If there are multiple solutions, print any of them. It is guaranteed that a solution exists. Example input: 4 100 10 30 50 40 70 20 60 50 80 Example output: 1 2 3 4 5 6 7 8","solution":"def schedule_auction(n, m, d, items): Given n items with their predicted bidding range and the maximum price m for each day, schedule items for auction in a way to maximize the total auction earnings. Parameters: n (int): Number of items. m (int): Maximum price on any day. d (int): Number of auction days. items (list of tuples): List of bidding range (li, ri) for each item. Returns: list of tuples: List of tuples (start_day, end_day) for each item. # Sort items by their minimum bid price (li), and if equal, by maximum bid price (ri) sorted_items = sorted(items, key=lambda x: (x[0], x[1])) # Initialize the result list auction_schedule = [(0, 0)] * n # Keep track of the current day current_day = 1 for i in range(n): li, ri = sorted_items[i] # Assuming the auction takes place within d days start_day = current_day end_day = current_day + 1 # Assign the days to the current item auction_schedule[i] = (start_day, end_day) # Move to the next day for the next item current_day += 2 # If current_day exceeds the number of available days `d`, wrap around to start over if current_day > d: current_day = 1 return auction_schedule"},{"question":"A city is planning to organize multiple events in a large hall. Each event has a start and end time, and no two events should overlap in the hall. You are given a list of such events and you need to determine the maximum number of non-overlapping events that can be held in the hall. The first line of input contains an integer t (1 ≤ t ≤ 100), representing the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 10^5) representing the number of events. The next n lines contain two integers s_i and e_i (0 ≤ s_i < e_i ≤ 10^9), representing the start and end time of each event. For each test case, output a single integer, the maximum number of non-overlapping events that can be held in the hall. **Input:** ``` t n s_1 e_1 s_2 e_2 ... s_n e_n ... ``` **Output:** ``` max_events_for_test_case_1 max_events_for_test_case_2 ... ``` **Example:** ``` Input: 2 3 1 2 2 3 3 4 3 1 3 2 5 3 6 Output: 3 2 ```","solution":"def max_non_overlapping_events(t, test_cases): results = [] for i in range(t): events = test_cases[i] events.sort(key=lambda x: x[1]) last_end_time = 0 count = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results # To process the input & output as described def process_input_output(): import sys input = sys.stdin.read data = input().split() index = 0 t = int(data[index]) index += 1 test_cases = [] for _ in range(t): n = int(data[index]) index += 1 events = [] for _ in range(n): s = int(data[index]) e = int(data[index+1]) index += 2 events.append((s, e)) test_cases.append(events) results = max_non_overlapping_events(t, test_cases) for result in results: print(result)"},{"question":"Leo is training a robot to navigate a grid while collecting valuable items. The robot starts at the top-left corner of an `n x m` grid and wants to reach the bottom-right corner. Each cell in the grid contains a certain value representing the worth of the item in that cell. The robot can only move either right or down at each step. To maximize the value of the items collected, Leo wants to find the highest possible sum of the values in the cells that the robot collects. Given the dimensions of the grid and the values of the items in each cell, your task is to calculate the maximum sum of the values the robot can collect along any path from the top-left corner to the bottom-right corner. # Input - The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 1000`) — the number of rows and columns of the grid. - The next `n` lines each contain `m` integers, where the `j-th` integer in the `i-th` line is the value of the item in the cell `(i, j)`. The values range from `-1000` to `1000`. # Output - Print a single integer — the maximum sum of the values the robot can collect along any path from the top-left corner to the bottom-right corner of the grid. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 29 ``` Explanation - One of the optimal paths is `1 -> 4 -> 7 -> 8 -> 9`, which gives a sum of `1 + 4 + 7 + 8 + 9 = 29`. In another example, the input could be: Input ``` 2 2 1 -1 -1 1 ``` Output ``` 1 ``` Explanation - The optimal path is `1 -> -1 -> 1`, resulting in a sum of `1 - 1 + 1 = 1`.","solution":"def max_value_path(n, m, grid): Returns the maximum sum of the values the robot can collect along any path from the top-left corner to the bottom-right corner of the grid. # Initialize dp table with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Base case - start from the top-left corner dp[0][0] = grid[0][0] # Fill the first row (can only move right) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only move down) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The result is in the bottom-right cell return dp[n-1][m-1]"},{"question":"A delivery company uses an intelligent sorting system to decide the optimal delivery routes for their packages. Each package is represented by a distinct integer p_i which indicates the priority of the package (higher number means higher priority). For a given route, the sorting system must always deliver packages in non-decreasing order of their priorities. However, due to a recent system update, some packages may get mislabeled, leading to possibly incorrect information about their priority values. Therefore, the company decides to ensure the integrity of their deliveries by choosing the longest subsequence of packages whose priorities are strictly increasing. You are tasked with writing a function to determine the length of such a subsequence. # Input - An integer n (2 le n le 100,000) representing the total number of packages. - An array of n distinct integers p_1, p_2, ..., p_n (1 le p_i le 10^9), representing the priorities of the packages. # Output Print a single integer, the length of the longest subsequence of the packages that can be sorted in strictly increasing order. # Example Input ``` 8 10 22 9 33 21 50 41 60 ``` Output ``` 5 ``` # Explanation In the example provided, the longest subsequence in strictly increasing order is {10, 22, 33, 50, 60}. Its length is 5. Other subsequences of different lengths can also be found, but the longest one should be considered.","solution":"import bisect def longest_increasing_subsequence_length(packages): Returns the length of the longest strictly increasing subsequence. if not packages: return 0 sub = [packages[0]] for num in packages[1:]: if num > sub[-1]: sub.append(num) else: # Find the index of the smallest number in sub which is greater than or equal to num idx = bisect.bisect_left(sub, num) sub[idx] = num return len(sub)"},{"question":"Given a list of integers, determine the longest contiguous sublist whose elements are either all even or all odd. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the list. The second line contains n space-separated integers — the elements of the list. Output Output a single number — the length of the longest contiguous sublist consisting of either all even or all odd integers. Example Input: 10 5 3 7 4 2 6 8 1 1 1 Output: 4 Explanation The longest contiguous sublist consisting of either all even or all odd integers is [4, 2, 6, 8], which has a length of 4.","solution":"def longest_contiguous_sublist(n, lst): Returns the length of the longest contiguous sublist consisting of either all even or all odd integers. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if (lst[i] % 2 == lst[i - 1] % 2): current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"Alice and Bob are playing a game with a sequence of integers. The sequence consists of `n` integers, and they take turns playing. Alice takes the first turn. On each player\'s turn, they must choose any integer from the sequence and remove it. The game continues until all integers have been removed. The score for each player is the sum of the integers they have removed during the game. Both players play optimally, which means they will always choose the maximum possible score available to them at each turn. You need to determine the final scores of Alice and Bob. Write a program to determine the scores of Alice and Bob given the sequence of integers. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100,000 ), the number of elements in the sequence. - The second line contains `n` space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1,000,000,000), the elements of the sequence. # Output - Output two integers, the final scores of Alice and Bob. Example # Input ``` 5 3 1 4 1 5 ``` # Output ``` 9 5 ``` Explanation: - The sequence is [3, 1, 4, 1, 5]. - Alice starts and picks 5 (sequence becomes [3, 1, 4, 1]). - Bob picks 4 (sequence becomes [3, 1, 1]). - Alice picks 3 (sequence becomes [1, 1]). - Bob picks 1 (sequence becomes [1]). - Alice picks the final 1. - Alice’s score is 5 + 3 + 1 = 9. - Bob’s score is 4 + 1 = 5.","solution":"def game_scores(n, sequence): Returns the final scores of Alice and Bob in the game. sequence.sort(reverse=True) # Sort the sequence in descending order alice_score = 0 bob_score = 0 for i in range(n): if i % 2 == 0: alice_score += sequence[i] # Alice\'s turn else: bob_score += sequence[i] # Bob\'s turn return alice_score, bob_score"},{"question":"Shiro is a digital librarian who wants to organize a collection of books in a virtual library. Each book in the library has an integer identifier. Unfortunately, some books have gone missing over time, and Shiro wants to identify the missing books to restore the library\'s order. Given a list of identifiers representing the books currently available in the library and ranging from 1 to n with some missing identifiers, your task is to find and list all missing book identifiers in ascending order. # Input: The first line of the input contains an integer n (1 ≤ n ≤ 10^6) — the total number of book identifiers expected in the library. The second line contains a space-separated list of integers representing m book identifiers currently in the library (1 ≤ m ≤ n, 1 ≤ identifier ≤ n). # Output: Print a single line containing the missing book identifiers in ascending order. If no identifiers are missing, print \\"No missing books\\". # Example: Input: ``` 10 1 2 3 5 6 8 9 10 ``` Output: ``` 4 7 ``` Input: ``` 5 1 2 3 4 5 ``` Output: ``` No missing books ``` # Note: In the first example, the total number of book identifiers expected is 10, but identifiers 4 and 7 are missing from the list. Therefore, the output is \\"4 7\\". In the second example, all book identifiers from 1 to 5 are present, so the output is \\"No missing books\\".","solution":"def find_missing_books(n, current_books): Returns a list of missing book identifiers or a message \\"No missing books\\". Parameters: n (int): The total number of book identifiers expected in the library. current_books (list of int): The list of currently available book identifiers. Returns: list of int or str: The list of missing book identifiers in ascending order, or \\"No missing books\\". expected_books = set(range(1, n + 1)) current_books = set(current_books) missing_books = sorted(expected_books - current_books) if not missing_books: return \\"No missing books\\" else: return missing_books"},{"question":"The annual programming contest at the unnamed university is approaching, and they have decided to create a special challenge for the participants. The problem involves a special array transformation. You are given an array of integers and a target number. Your task is to determine the length of the shortest contiguous subarray, if any, of which the sum is greater than or equal to the target number. If there isn\'t one, return 0 instead. The first line of the input contains two integers n and s (1 ≤ n ≤ 100,000, 0 ≤ s ≤ 10^9) — the length of the array and the target sum, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^5) which represent the elements of the array. Output a single integer — the length of the shortest subarray with a sum of at least s. If there is no such subarray, output 0. For example: Input: 10 15 1 2 3 4 5 6 7 8 9 10 Output: 2 Explanation: In this example, the subarray [7, 8] has the sum 15, which is the smallest subarray fulfilling the condition. The participants need to come up with an efficient algorithm to solve this problem due to the constraints provided. This will test their understanding of sliding window or two-pointer technique efficiently.","solution":"def min_sub_array_len(target, nums): Returns the length of the shortest contiguous subarray with a sum at least `target`. If there is no such subarray, return 0. n = len(nums) left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += nums[right] while current_sum >= target: min_length = min(min_length, right - left + 1) current_sum -= nums[left] left += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"Vasya has an upcoming tournament in a strategy game. To prepare, he needs to improve his defense tactics. The game involves defending against waves of enemies that approach a fortress. The fortress has n defensive towers, each with a specified attack range. The game field is represented as a 1-dimensional axis. Each defensive tower can attack enemies that come within its designated attack range. The defense tower at position `Ti` can attack any enemy located between positions `Ti-Ri` and `Ti+Ri` (inclusive), where `Ri` is the attack range of the tower. Enemies approach from various positions on the axis. Given the positions of the enemies and the attack range of each defensive tower, determine the number of enemies that can be successfully attacked by at least one tower. The first line contains two integers: `n` (1 ≤ n ≤ 1000) — the number of defensive towers, and `m` (1 ≤ m ≤ 1000) — the number of enemies. The second line contains `n` space-separated integers: `T1, T2, ..., Tn` (0 ≤ Ti ≤ 10^3) — the positions of the defensive towers. The third line contains `n` space-separated integers: `R1, R2, ..., Rn` (1 ≤ Ri ≤ 10^3) — the attack range of each respective defensive tower. The fourth line contains `m` space-separated integers: `E1, E2, ..., Em` (0 ≤ Ei ≤ 10^3) — the positions of the enemies. Print a single integer — the number of enemies that can be attacked by at least one defensive tower. **Example:** Input: ``` 3 4 2 5 8 1 2 1 3 6 0 7 ``` Output: ``` 3 ``` Explanation: - Tower 1 (position 2, range 1) can attack enemy at positions [1, 3]. Hence, it can attack the enemy at position 3. - Tower 2 (position 5, range 2) can attack enemies at positions [3, 4, 5, 6, 7]. Hence, it can attack enemies at positions 3, 6, 7. - Tower 3 (position 8, range 1) can attack enemies at positions [7, 8, 9]. Hence, it can attack enemy at position 7. Therefore, enemies at positions 3, 6, and 7 can be attacked, resulting in 3 successfully attacked enemies. Note that enemy at position 6 can be attacked by tower 2 within its range.","solution":"def count_attackable_enemies(n, m, towers, ranges, enemies): attackable_enemies = set() for i in range(n): tower_pos = towers[i] range_attack = ranges[i] lower_bound = tower_pos - range_attack upper_bound = tower_pos + range_attack for enemy_pos in enemies: if lower_bound <= enemy_pos <= upper_bound: attackable_enemies.add(enemy_pos) return len(attackable_enemies)"},{"question":"Given a sequence of integers, you are required to find two disjoint and non-empty subsequences such that 1. The sum of elements in the first subsequence is equal to the sum of elements in the second subsequence. 2. The indices of any element from the first subsequence should not match the indices of any element from the second subsequence. (The subsequences must be disjoint) Write a program that finds such subsequences if they exist, or returns “NO” otherwise. The input consists of: - The first line contains an integer n (2 le n le 2000) — the length of the sequence. - The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the sequence. If such subsequences exist, print “YES” followed by two lines: - The first line should contain the indices of the elements of the first subsequence. - The second line should contain the indices of the elements of the second subsequence. If there are multiple valid answers, you can output any of them. If there are no such subsequences, print “NO”. **Example input:** ``` 5 1 2 3 1 2 ``` **Example output:** ``` YES 1 4 2 5 ``` In this example, the subsequences [1, 1] (elements at indices 1 and 4) and [2, 2] (elements at indices 2 and 5) both sum to 2. Hence, they satisfy the conditions specified.","solution":"def find_subsequences_with_equal_sums(n, sequence): from collections import defaultdict subsequences = defaultdict(list) for i in range(n): current_sum = 0 for j in range(i, n): current_sum += sequence[j] subsequences[current_sum].append((i, j)) if len(subsequences[current_sum]) > 1: first_subsequence = subsequences[current_sum][0] second_subsequence = subsequences[current_sum][1] if first_subsequence[1] < second_subsequence[0]: result1 = list(range(first_subsequence[0] + 1, first_subsequence[1] + 2)) result2 = list(range(second_subsequence[0] + 1, second_subsequence[1] + 2)) return \\"YES\\", result1, result2 return \\"NO\\", [], [] # Example usage n = 5 sequence = [1, 2, 3, 1, 2] result = find_subsequences_with_equal_sums(n, sequence) if result[0] == \\"YES\\": print(\\"YES\\") print(\\" \\".join(map(str, result[1]))) print(\\" \\".join(map(str, result[2]))) else: print(\\"NO\\")"},{"question":"Implement a program that simulates a simplified warehouse robot\'s movement in a rectangular grid warehouse. The warehouse is represented by a grid of size n × m and has some obstacles that the robot cannot pass. The robot can move up, down, left, or right by one cell at a time. Given the initial position of the robot, the final position it needs to reach, and the positions of the obstacles, determine the minimum number of moves required for the robot to reach its destination. If the destination is unreachable, output -1. The first line contains three integers n, m, and k (1 ≤ n, m ≤ 500, 0 ≤ k ≤ 250000) — the number of rows and columns in the grid, and the number of obstacles, respectively. The second line contains two integers x1, y1 (1 ≤ x1 ≤ n, 1 ≤ y1 ≤ m) — the initial position of the robot. The third line contains two integers x2, y2 (1 ≤ x2 ≤ n, 1 ≤ y2 ≤ m) — the final position of the robot. The next k lines each contain two integers xi, yi (1 ≤ xi ≤ n, 1 ≤ yi ≤ m) — the positions of the obstacles. Print one integer — the minimum number of moves required for the robot to reach its destination, or -1 if it is unreachable.","solution":"from collections import deque def min_robot_moves(n, m, k, start, end, obstacles): def is_valid(x, y): return 1 <= x <= n and 1 <= y <= m and (x, y) not in obstacle_set # Set of obstacles for quick lookup obstacle_set = set(obstacles) # Directions for movement: right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # BFS setup queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set([(start[0], start[1])]) while queue: x, y, dist = queue.popleft() # Check if we reached the end if (x, y) == (end[0], end[1]): return dist # Try moving in all four directions for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) # If we exhaust the queue without finding the end return -1"},{"question":"Marta has a garden with n flower beds, arranged in a straight line. Each flower bed can have a maximum capacity of k flowers and initially, all flower beds are empty. Marta wants to plant flowers in such a way that there is an equal number of flowers in each flower bed. However, she also wants to maximize the total number of flowers planted. Help Marta determine the maximum number of flowers she can plant in her garden under these conditions. The first line of input contains two integers n (1 ≤ n ≤ 100,000), the number of flower beds, and k (1 ≤ k ≤ 1,000,000), the maximum capacity of each flower bed. Output a single integer, the maximum number of flowers that can be planted in the garden such that each flower bed contains the same number of flowers. **Examples:** **Example 1:** Input: 5 10 Output: 50 **Example 2:** Input: 3 7 Output: 21","solution":"def max_flowers_planted(n, k): Returns the maximum number of flowers that can be planted such that each flower bed contains the same number of flowers. return n * k"},{"question":"You are given a string s, which consists of lowercase English letters and the character ?. Your task is to replace each ? in the string with a lowercase English letter (from \'a\' to \'z\') such that the resulting string does not have any two consecutive characters be the same. If there are multiple possible answers, any one of them will be considered correct. If it is impossible to make the string follow the above rule by replacing the ?, print \\"Not possible\\". Input The input contains one string s, which has a length between 1 and 10^5 inclusive. Output Print the resulting string after replacing all ? characters, or \\"Not possible\\" if it cannot be done. Examples Input: a?b? Output: acba Input: ??? Output: abc Input: aa?a Output: Not possible","solution":"def replace_question_marks(s: str) -> str: n = len(s) s = list(s) def find_char(exclude1: str, exclude2: str) -> str: for char in range(ord(\'a\'), ord(\'z\') + 1): if chr(char) != exclude1 and chr(char) != exclude2: return chr(char) return None for i in range(n): if s[i] == \'?\': prev_char = s[i - 1] if i > 0 else \\" \\" next_char = s[i + 1] if i < n - 1 else \\" \\" s[i] = find_char(prev_char, next_char) result = \\"\\".join(s) for i in range(1, n): if result[i] == result[i - 1]: return \\"Not possible\\" return result"},{"question":"Alex has a collection of n unique gems, each with a distinct value. He likes to create and admire sequences of gems, where a sequence is defined as any non-empty subset of unique gems sorted in ascending order of their values. However, given the large number of possible sequences, Alex wants to focus on the most valuable ones. Alex defines the value of a sequence as the sum of values of the gems in the sequence. Your task is to help Alex identify the sequence of gems with the maximum value in lexicographically smallest order, given the list of gems and their values. The first line of the input contains a single integer n (1 ≤ n ≤ 200,000) — the number of gems. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), where ai is the value of the i-th gem. Output the maximum value of the sequence and the sequence itself in lexicographically smallest order. In the first line of the output, print a single integer — the sum of the values of the gems in the sequence. In the second line, print the sequence of gem values as space-separated integers in ascending order. If there are several suitable sequences, print the lexicographically smallest one. Example: Input: 4 3 1 4 2 Output: 10 1 2 3 4 In this sample, the best sequence that maximizes the value is the full set of gems {1, 2, 3, 4} which sums up to 10. Since we need to output in ascending order, the sequence is already sorted.","solution":"def max_value_sequence(n, gems): Returns the maximum valued sequence of gems in lexicographically smallest order. Args: n (int): Number of gems. gems (list of int): Values of the gems. Returns: tuple: Sum of values in the sequence and the sequence of values in lexicographically smallest order. # Sort the gems values in ascending order gems_sorted = sorted(gems) # Calculate the sum of sorted gems sequence_sum = sum(gems_sorted) return sequence_sum, gems_sorted"},{"question":"Sarah has a company that needs to allocate servers to client requests. Each server can handle up to a certain load, and each client request requires a specific amount of load. Sarah wants to ensure that each request is handled by only one server and maximize the number of requests that can be handled. Given a list of servers, where each server has a maximum load capacity, and a list of client requests, where each request has a required load, determine the maximum number of requests that can be handled by the servers. A server can handle multiple requests as long as the total load does not exceed its capacity. For example, suppose Sarah has 3 servers with capacities [10, 15, 20] and 5 requests with loads [5, 10, 5, 7, 8]. Sarah can allocate as follows: - First server (10 capacity) handles requests with 5 and 5 loads. - Second server (15 capacity) handles requests with 7 and 8 loads. - Third server (20 capacity) handles the request with a 10 load. In this example, Sarah can handle all 5 requests. The first line contains two integers n and m, where n is the number of servers (1 ≤ n ≤ 1000) and m is the number of requests (1 ≤ m ≤ 1000). The second line contains n integers representing the capacities of the servers. The third line contains m integers representing the loads of the client requests. Print one integer: the maximum number of requests that can be handled by the servers. Example input: 3 5 10 15 20 5 10 5 7 8 Example output: 5","solution":"def max_requests_handled(servers, requests): servers.sort(reverse=True) requests.sort(reverse=True) request_idx = 0 for server in servers: current_load = server while request_idx < len(requests) and current_load >= requests[request_idx]: current_load -= requests[request_idx] request_idx += 1 return request_idx # Example usage: # n, m = 3, 5 # servers = [10, 15, 20] # requests = [5, 10, 5, 7, 8] # print(max_requests_handled(servers, requests)) # Output: 5"},{"question":"Fiona has a list of strings consisting of lowercase Latin letters. She wants to order these strings such that when concatenated, the resultant string forms the lexicographically smallest possible string. You are given t test cases, each containing n strings. For each test case, find the order of strings that results in the lexicographically smallest concatenated string and print it. The first line of the input contains an integer t (1 le t le 100) — the number of test cases. For each test case, the first line contains an integer n (1 le n le 100) — the number of strings in that test case. The next n lines contain one string each, where the length of each string is between 1 and 100 characters. Output t lines, each containing the concatenated result of the strings in the desired order for each test case. **Example**: ``` Input: 2 3 apple banana cherry 4 cat bat rat mat Output: applebananacherry batcatmatrat ``` In the first test case, the concatenated string \\"applebananacherry\\" is lexicographically smallest by ordering the strings as [apple, banana, cherry]. In the second test case, the concatenated string \\"batcatmatrat\\" is lexicographically smallest by ordering the strings as [bat, cat, mat, rat].","solution":"def lexicographically_smallest_string(t, test_cases): For each test case, sorts the strings in a way that their concatenation forms the lexicographically smallest string. Parameters: t (int): Number of test cases. test_cases (list): List of tuples, each tuple containing n and n strings. Returns: list: A list of concatenated lexicographically smallest strings for each test case. results = [] for n, strings in test_cases: sorted_strings = sorted(strings) smallest_string = \'\'.join(sorted_strings) results.append(smallest_string) return results"},{"question":"In a kingdom called Farland, there are n castles connected by m bidirectional roads. These roads are characterized by their length, and it is guaranteed that you can travel between any two castles using these roads. Due to some magical disturbances, some roads can suddenly get blocked. To prevent blockages from leaving parts of the kingdom inaccessible, you are to determine the critical roads in the kingdom. A critical road is defined as a road that, if removed, would increase the number of connected components in the graph. In other words, removing a critical road would make it impossible to travel between some pairs of castles that were previously connected. The first line of the input contains two integers n (2 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 200,000) — the number of castles and the number of roads, respectively. Each of the next m lines contains three integers u, v (1 ≤ u, v ≤ n, u ≠ v) and w (1 ≤ w ≤ 1,000,000) — meaning that there is a bidirectional road between castles u and v with a length of w. First print the number of critical roads in the government database. Next, print the critical roads themselves, each described as a pair of integers u and v. If there are multiple critical roads, you can print them in any order. In the first sample, the road between castle 1 and castle 2 is critical. If you remove it, there will be no way to reach castle 2 from castle 1. In the second sample, the road between castle 2 and castle 3 is critical.","solution":"from collections import defaultdict import sys sys.setrecursionlimit(200000) def find_critical_roads(n, m, edges): Finds the critical roads in a graph represented by n nodes and m edges. Args: n (int): Number of castles (vertices) m (int): Number of roads (edges) edges (list of tuple): List of edges (u, v, w) where u and v are castles and w is the weight Returns: tuple: Number of critical roads and a list of critical roads def dfs(v, parent): nonlocal timer ids[v] = low[v] = timer timer += 1 for to in graph[v]: if to == parent: continue if ids[to] == -1: dfs(to, v) low[v] = min(low[v], low[to]) if low[to] > ids[v]: critical_roads.append((v, to)) else: low[v] = min(low[v], ids[to]) graph = defaultdict(list) for u, v, w in edges: graph[u].append(v) graph[v].append(u) ids = [-1] * (n + 1) low = [-1] * (n + 1) timer = 0 critical_roads = [] for i in range(1, n + 1): if ids[i] == -1: dfs(i, -1) return len(critical_roads), critical_roads"},{"question":"You are given a string s consisting of only lowercase English letters. You can perform operations to change this string into a new string. In one step, you can do the following: - Choose any two adjacent characters in the string and swap them. Your objective is to determine the minimum number of operations required to change the initial string s into a target string t. It is guaranteed that both strings s and t will be anagrams of each other. The first line of the input contains a single integer q (1 leq q leq 10) — the number of queries. Each query consists of two lines: - The first line contains the initial string s (1 leq |s| leq 10^5). - The second line contains the target string t (|t| = |s|). Output a single integer for each query — the minimum number of operations required to change the string s into the string t. Example: Input: ``` 2 abcd dcba aabb bbaa ``` Output: ``` 6 4 ``` Explanation: In the first example, you can swap as follows (showing only some intermediate steps): ``` abcd -> abdc -> adbc -> adcb -> dacb -> dcab -> dcba ``` That\'s 6 swaps. In the second example: ``` aabb -> abba -> baba -> bbaa ``` That\'s 4 swaps.","solution":"def min_operations_to_transform(s, t): Calculate the minimum number of adjacent swaps needed to transform string s into string t. def count_operations(s, t): n = len(s) count = 0 s = list(s) for i in range(n): if s[i] != t[i]: j = i while s[j] != t[i]: j += 1 # Swap characters towards the correct position while j > i: s[j], s[j-1] = s[j-1], s[j] count += 1 j -= 1 return count return count_operations(s, t) def solve(queries): results = [] for s, t in queries: results.append(min_operations_to_transform(s, t)) return results"},{"question":"You need to find a single integer `t` that is present in an array `arr` of integers more than `⌊ n / 2 ⌋` times. Assume that the input always has such an element. The first line contains an integer `n` (1 le n le 5 cdot 10^4) denoting the number of elements in the array `arr`. The second line contains n space-separated integers representing the elements of the array, where each integer is in the range [ -10^9, 10^9 ]. Print the integer `t` which is present more than `⌊ n / 2 ⌋` times in the array. Example: Input: ``` 7 2 2 1 1 1 2 2 ``` Output: ``` 2 ``` Explanation: In the given example, the element `2` appears 4 times which is more than `⌊ 7 / 2 ⌋ = 3.5`. Hence, the output is `2`.","solution":"def find_majority_element(n, arr): Finds the integer that appears more than n // 2 times in the given array. Parameters: n (int): The number of elements in the array. arr (list): The array of integers. Returns: int: The majority element. count = 0 candidate = None for num in arr: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"In this problem, you are given an undirected graph with n nodes and m edges. Each node is colored either red or blue. Your task is to determine if there exists at least one triangle (a cycle of length 3) in the graph where all three nodes have the same color. The first line contains two integers n and m (3 ≤ n ≤ 500, 0 ≤ m ≤ 5000) — the number of nodes and edges in the graph. The second line contains a string of length n, consisting only of characters \'R\' and \'B\', which represents the initial color of each node. The i-th character (1-indexed) specifies the color of the i-th node, where \'R\' denotes red and \'B\' denotes blue. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing an undirected edge connecting nodes u and v. It is guaranteed that there are no multiple edges between any pair of nodes. Print \\"YES\\" if there exists at least one monochromatic triangle in the graph, otherwise print \\"NO\\". # Example Input 7 9 RBBRRRB 1 2 2 3 3 1 1 4 4 5 5 6 6 4 4 7 5 7 Output YES Explanation In this graph, there is a triangle (4, 5, 6) where all nodes are red. Hence, the answer is \\"YES\\".","solution":"def has_monochromatic_triangle(n, m, colors, edges): from collections import defaultdict # Creating an adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Check each combination of edges for monochromatic triangle for u in range(1, n + 1): for v in graph[u]: if v > u: # Ensure each edge is only processed once for w in graph[v]: if w > v and u in graph[w]: # Check if it\'s a triangle and process each triangle once if colors[u - 1] == colors[v - 1] == colors[w - 1]: return \\"YES\\" return \\"NO\\" # Example usage n = 7 m = 9 colors = \\"RBBRRRB\\" edges = [(1, 2), (2, 3), (3, 1), (1, 4), (4, 5), (5, 6), (6, 4), (4, 7), (5, 7)] print(has_monochromatic_triangle(n, m, colors, edges))"},{"question":"The island of Ostium is known for its unique landscape composed of ***m*** islands connected by ***n*** bridges. Each bridge directly connects two different islands and allows for travel in both directions. However, due to recent weather disturbances, some of the bridges have been closed. Your task is to determine if it is possible to start from any island and travel to every other island using the remaining open bridges. The first line of input contains two integers ***m*** and ***n*** (1 le m le 10^5, 0 le n le 2 cdot 10^5) — the number of islands and the number of bridges, respectively. The next ***n*** lines each contain three integers **u**, **v**, and **c** (1 le u, v le m, 0 le c le 1), where **u** and **v** denote the two islands that the bridge connects, and **c** is 0 if the bridge is closed and 1 if it is open. Your task is to print \\"YES\\" if there exists a path between every pair of islands using only the open bridges. Otherwise, print \\"NO\\". **Example:** Input: ``` 4 5 1 2 1 2 3 1 3 4 1 1 4 0 2 4 0 ``` Output: ``` YES ``` Explanation: In this example, even though the bridges between islands 1 and 4, and 2 and 4 are closed, you can still travel between every pair of islands using the open bridges 1-2, 2-3, and 3-4.","solution":"def can_travel_all_islands(m, n, bridges): from collections import defaultdict, deque if m == 1: return \'YES\' graph = defaultdict(list) for u, v, c in bridges: if c == 1: graph[u].append(v) graph[v].append(u) def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited visited_from_first_island = bfs(1) if len(visited_from_first_island) == m: return \'YES\' else: return \'NO\'"},{"question":"You are given an array of integers, where each element appears exactly twice except for one element which appears only once. Your task is to find the element that appears only once. Write a function `findUnique` which takes an array of integers as input and returns the integer that appears only once. **Input:** The first line of the input contains a single integer `n` (1leq nleq 10^6), where `n` is the length of the array and it is guaranteed to be an odd number. The second line of the input contains `n` integers `a_i` (1leq a_ileq 10^9) — the elements of the array. **Output:** Print the integer that appears only once. **Example:** Input: ``` 7 2 3 5 4 5 3 2 ``` Output: ``` 4 ``` Explanation: The array contains the integers `2, 3, 5, 4, 5, 3, 2`. Every element except for `4` appears twice. Thus, `4` is the element that appears only once. **Note:** The solution should have a time complexity of O(n) and a space complexity of O(1). **Hint:** Consider using bit manipulation (XOR operation) to find the unique element efficiently.","solution":"def findUnique(nums): Returns the element that appears only once in an array where all other elements appear exactly twice. Args: nums (list of int): List of integers with one unique element and all other elements appearing twice. Returns: int: The unique element. unique = 0 for num in nums: unique ^= num return unique"},{"question":"Given an integer array nums, your task is to find all the triplets (three numbers) in the array that add up to zero. Each triplet must be unique, meaning no duplicate triplets are allowed. Provided an integer n (size of the array), followed by an integer array nums of size n, output all unique triplets in the array which gives the sum of zero. The solution set must not contain duplicate triplets. # Input The first line contains an integer n (3 ≤ n ≤ 3000), the size of the array. The second line contains n integers representing the elements of the array nums (−10^5 ≤ nums[i] ≤ 10^5). # Output Output all unique triplets that sum up to zero. Each triplet should be a space-separated string, and each triplet should be output on a new line in non-decreasing order of their values. If there are no such triplets, output an empty line. # Example **Input:** ``` 6 -1 0 1 2 -1 -4 ``` **Output:** ``` -1 -1 2 -1 0 1 ``` **Explanation:** - The array combinations which sum to zero are [-1, -1, 2] and [-1, 0, 1]. - Unique triplets are expected in the output, and each triplet should be printed in non-decreasing order in separate lines.","solution":"def find_triplets(nums): Returns a list of unique triplets in the array that add up to zero. nums.sort() result = [] n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: summation = nums[i] + nums[left] + nums[right] if summation < 0: left += 1 elif summation > 0: right -= 1 else: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return result"},{"question":"Consider a labyrinth represented by a grid of size n times m. The labyrinth contains walls (`#`) and empty spaces (`.`). The entry point to the labyrinth is at position (1, 1) (the top-left corner), and the exit point is at position (n, m) (the bottom-right corner). You are trapped inside the labyrinth, and you can move one step in one of the four directions: up, down, left, or right to an empty space. You cannot move into a wall or out of the grid bounds. Your task is to determine the shortest path from the entry point to the exit point. If there is no possible path, return `-1`. The first line contains two integers n (1 le n le 1000) and m (1 le m le 1000), representing the dimensions of the labyrinth. The next n lines contain m characters each, representing the labyrinth where `#` denotes a wall and `.` denotes an empty space. Output the length of the shortest path from the entry point to the exit point. If there is no such path, output `-1`. # Examples Example 1: **Input:** ``` 4 4 .... .. .... .#.. ``` **Output:** ``` 6 ``` **Explanation:** The shortest path from (1, 1) to (4, 4) is: Right, Right, Down, Down, Left, Down (total of 6 steps). Example 2: **Input:** ``` 3 3 .#. .#. # ``` **Output:** ``` -1 ``` **Explanation:** There is no path from (1, 1) to (3, 3). Example 3: **Input:** ``` 2 2 .. ``` **Output:** ``` -1 ``` **Explanation:** There is no path from (1, 1) to (2, 2) due to the wall blocking the way.","solution":"from collections import deque def shortest_path_labyrinth(n, m, labyrinth): if labyrinth[0][0] == \'#\' or labyrinth[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n - 1 and y == m - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and labyrinth[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given an integer array `arr` of size `n`, where `n` is an even number. Your task is to form pairs of integers from the array such that the largest sum of any pair is minimized. More formally, if pairs are represented as `(a_1, b_1), (a_2, b_2), ..., (a_{n/2}, b_{n/2})`, you need to minimize the value of `max(a_1 + b_1, a_2 + b_2, ..., a_{n/2} + b_{n/2})`. For example, if `arr = [1, 3, 5, 9]`, the possible pairings could be: - (1, 9) and (3, 5), giving sums 10 and 8, so the largest sum is 10. - (1, 3) and (5, 9), giving sums 4 and 14, so the largest sum is 14. So, the optimal pairing in this case would be (1, 9) and (3, 5) with the minimized largest sum being 10. Your task is to implement a function that takes the array as input and returns the minimized largest sum of pairs. The function should have the following signature: ```python def minimize_largest_sum(arr: List[int]) -> int: ``` **Input:** - The first line contains a single integer n (2 ≤ n ≤ 10^5), the size of the array. - The second line contains n integers, the elements of the array, separated by spaces. **Output:** - Print a single integer, the minimized largest sum of any pair. **Example:** ``` Input: 4 1 3 5 9 Output: 10 ``` **Note:** - All elements in the array are positive integers. - It is guaranteed that minimizing the largest sum of any pair is always possible within the given constraints.","solution":"from typing import List def minimize_largest_sum(arr: List[int]) -> int: Returns the minimized largest sum of any pair from the array. arr.sort() n = len(arr) max_sum = 0 for i in range(n//2): pair_sum = arr[i] + arr[n - 1 - i] if pair_sum > max_sum: max_sum = pair_sum return max_sum"},{"question":"There is a series of numbers defined as follows: a(1) = 1 and a(n) = 2 * a(n-1) + 1 for n > 1. You are asked to find the value of the n-th term in the series modulo 10^9 + 7. Write a program that, given an integer n (1 le n le 10^{18}) calculates the n-th term of the series modulo 10^9 + 7. The first line of the input contains a single integer n. Output a single integer – the value of the n-th term in the series modulo 10^9 + 7. Example: Input: 3 Output: 7 Explanation: The series for the first few terms is: 1, 3, 7, 15, 31, dots. For n=3, the third term is 7.","solution":"def nth_term_series(n): Returns the nth term of the series a(n) = 2 * a(n-1) + 1 modulo 10^9 + 7. MOD = 10**9 + 7 if n == 1: return 1 power_of_2 = pow(2, n, MOD) term = (power_of_2 - 1 + MOD) % MOD return term"},{"question":"In a distant galaxy, there exists an ancient library with scrolls containing sequences of magical numbers. Each scroll is represented as a sequence of integers. Drazim, the librarian, wishes to merge two scrolls into one by following a specific set of rules for merging. Given two scrolls (two sequences of integers), you need to create a merged scroll which contains all the integers from both scrolls. However, the integers must be picked in an alternating manner: one integer from the first scroll, followed by one integer from the second scroll, and so on. If one scroll runs out of integers before the other, then the remaining integers from the other scroll should simply be appended to the result. Write a program that merges the two given scrolls into a single scroll based on Drazim’s rules. The first line of input contains two integers n and m (1 le n, m le 10^5) — the lengths of the first and second scrolls respectively. The second line contains n integers — the sequence of magical numbers on the first scroll. The third line contains m integers — the sequence of magical numbers on the second scroll. Print the merged sequence in a single line. # Example: Input: ``` 3 4 1 3 5 2 4 6 8 ``` Output: ``` 1 2 3 4 5 6 8 ```","solution":"def merge_scrolls(n, m, scroll1, scroll2): Merge two scrolls in an alternating manner. # Initialize the merged scroll merged_scroll = [] # Use two pointers to traverse both scrolls i, j = 0, 0 # Loop until we traverse both scrolls while i < n or j < m: if i < n: merged_scroll.append(scroll1[i]) i += 1 if j < m: merged_scroll.append(scroll2[j]) j += 1 return merged_scroll"},{"question":"The city of Codeville has a centralized ticket system for its buses. The ticket system is described as follows: - There are `n` bus stops in the city numbered from `1` to `n`. - Codeville buses follow circular routes, meaning after stop `n`, the next stop is `1`. - Each bus stop has a number of tickets available initially, given in an array `tickets` where `tickets[i]` denotes the number of tickets available at stop `i+1`. - Ticket inspectors are positioned at each bus stop. Each inspector\'s goal is to check the numbers on the tickets they encounter and determine how many unique ticket numbers they have found. Given a number of ticket transfers `k`, where each transfer represents the movement of tickets from one stop to a neighboring stop (the stop immediately after it), determine the number of unique ticket numbers each inspector has after the ticket transfers. For simplicity, tickets are represented as integers, and when a ticket moves from one stop to another, its identifier remains unchanged. The transfers are performed in sequence from stop 1 to stop 2, and so on till stop `n`. Write a function `unique_tickets(n, k, tickets)` to help the inspectors count unique ticket numbers at each bus stop after `k` transfers. # Input - The first line contains two integers `n` and `k` (1 ≤ n, k ≤ 1000) — the number of bus stops and the number of ticket transfers, respectively. - The second line contains `n` integers `tickets[1], tickets[2], ..., tickets[n]` (1 ≤ tickets[i] ≤ 10^6) — the initial number of tickets at each bus stop. # Output - The output should contain `n` integers — the number of unique ticket numbers at each bus stop after `k` transfers. # Example Input ``` 5 2 1 2 3 4 5 ``` Output ``` 5 5 5 5 5 ``` # Note In the example, the ticket transfers happen twice from each bus stop to its neighbor. After the transfers, every bus stop possesses tickets with unique numbers 1, 2, 3, 4, and 5.","solution":"def unique_tickets(n, k, tickets): Determine the number of unique ticket numbers at each bus stop after k transfers. Args: n (int): The number of bus stops. k (int): The number of ticket transfers. tickets (list of int): The initial number of tickets at each bus stop. Returns: list of int: The number of unique ticket numbers at each bus stop after k transfers. # After k transfers, the tickets have circulated enough so that every stop will # eventually have tickets from every original stop. # This means that the count of unique ticket numbers at each stop will be n # because they will all contain tickets initially present in every bus stop. return [n] * n"},{"question":"A company is organizing a hackathon and has n participants. Each participant can form a team with exactly one other participant. Each team can choose to work on one out of m possible projects. The cost of working on the j-th project is given by p[j]. Given an array s of length n where s[i] represents the skill level of the i-th participant, two participants i and j can form a team if the difference in their skill levels is at most k. The goal is to form teams such that the total cost of the projects chosen by all the teams is minimized. You are given the number of participants n, the number of projects m, the maximum allowed skill difference k, and the list of project costs, followed by the skill levels of the participants. Determine the minimum total cost of the projects if teams are formed optimally, or output \\"NOT POSSIBLE\\" if it is not possible to form teams under the given condition. The first line contains four integers n, m, k, and t — the number of participants, the number of projects, the maximum allowed skill difference, and the number of participants that must form teams respectively (1 ≤ n ≤ 2 * 10⁵, 1 ≤ m, k, t ≤ 10⁷). The second line contains m integers, the costs of the projects. The third line contains n integers, the skill levels of the participants. If it\'s possible to form the required number of teams, output the minimum total cost. Otherwise, output \\"NOT POSSIBLE\\". **Example:** Input: 5 3 2 2 4 2 3 1 5 3 8 6 Output: 6 In this example, we can form two teams: Team 1 with participants 1 and 3 (skill levels 1 and 3), and Team 2 with participants 4 and 5 (skill levels 8 and 6). Since Team 1 can choose project 2 and Team 2 can choose project 2, the total cost is 2 + 2 = 4.","solution":"def min_total_cost(n, m, k, t, project_costs, skill_levels): This function returns the minimum total cost for forming teams with the given constraints. If it\'s not possible to form the required number of teams, it returns \\"NOT POSSIBLE\\". project_costs.sort() skill_levels.sort() i, teams_formed = 0, 0 total_cost = 0 while i < n - 1: if teams_formed == t: break if abs(skill_levels[i] - skill_levels[i+1]) <= k: total_cost += project_costs[0] teams_formed += 1 i += 2 else: i += 1 return total_cost if teams_formed >= t else \\"NOT POSSIBLE\\""},{"question":"Jack has a collection of books, and he wants to organize them on his bookshelf in a particular way. Each book has a unique width and height. Jack wants to stack the books such that the total width of each stack does not exceed a given maximum width `W`. Additionally, each stack should be as high as possible, but the height of any individual stack should not exceed H. Your task is to help Jack find the arrangement that minimizes the number of stacks required to place all the books on his bookshelf. Each book is represented by its width and height. Given the maximum stack width `W` and the maximum stack height `H`, determine the minimum number of stacks needed to organize all the books. The first line of input contains three integers `n`, `W`, and `H` (1 ≤ n ≤ 1000, 1 ≤ W, H ≤ 10000) where `n` is the number of books, `W` is the maximum width of each stack, and `H` is the maximum height of each stack. Each of the next `n` lines contains two integers `wi` and `hi` (1 ≤ wi, hi ≤ 10000), representing the width and height of the ith book. Output a single integer representing the minimum number of stacks needed. # Example Input: ``` 4 10 15 5 5 4 6 4 8 3 7 ``` Output: ``` 2 ``` Explanation: One possible arrangement is to place the first and second books in the first stack (total width: 5 + 4 = 9, max height: 6) and the third and fourth books in the second stack (total width: 4 + 3 = 7, max height: 8).","solution":"def min_number_of_stacks(n, W, H, books): # Sort books by height descending to maximize stack height books.sort(key=lambda x: x[1], reverse=True) stacks = [] for book in books: for stack in stacks: if sum(b[0] for b in stack) + book[0] <= W and max(b[1] for b in stack) <= H: stack.append(book) break else: stacks.append([book]) return len(stacks) # Example Usage n = 4 W = 10 H = 15 books = [(5, 5), (4, 6), (4, 8), (3, 7)] print(min_number_of_stacks(n, W, H, books)) # Output: 2"},{"question":"Given a sequence of integers, let\'s call a subarray of the sequence \\"balanced\\" if the sum of its elements is zero. Your task is to determine the length of the longest balanced subarray in the sequence. If no such subarray exists, return -1. The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4) — the elements of the sequence. Print a single integer — the length of the longest balanced subarray, or -1 if there is no such subarray. For example: - Input: 5 1 -1 2 -2 3 Output: 4 In this example, the longest balanced subarray is [1, -1, 2, -2]. In another example: - Input: 4 1 2 3 4 Output: -1 In this example, there is no balanced subarray since no subarray of the sequence sums to zero.","solution":"def longest_balanced_subarray(n, arr): Returns the length of the longest balanced subarray whose sum is zero. prefix_sum_map = {} prefix_sum = 0 longest_length = -1 for i in range(n): prefix_sum += arr[i] if prefix_sum == 0: longest_length = i + 1 if prefix_sum in prefix_sum_map: longest_length = max(longest_length, i - prefix_sum_map[prefix_sum]) else: prefix_sum_map[prefix_sum] = i return longest_length"},{"question":"You are given an array of non-negative integers. Your task is to find the minimum number of operations required to make all array elements equal. In one operation, you can increment any element of the array by 1. The first line contains an integer n (1 leq n leq 10^5) — the number of elements in the array. The second line contains n space-separated non-negative integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9) — the elements of the array. Output a single integer — the minimum number of operations required to make all elements of the array equal. In the first sample, you can increment the first element by 1 and the second element by 1 to make both elements equal to 3. Hence, the answer is 2. In the second sample, since all the elements are already equal, no operations are required, so the answer is 0.","solution":"def min_operations_to_equalize(arr): Returns the minimum number of operations required to make all elements of the array equal by incrementing elements. Parameters: arr (list of int): A list of non-negative integers representing the array elements. Returns: int: The minimum number of operations required. max_element = max(arr) operations = sum(max_element - x for x in arr) return operations"},{"question":"You are given an array of n integers, each of which represents the number of points scored by a player in a game. The players are ranked based on their scores in descending order. If two or more players have the same score, they are given the same rank, but the next few players get skipped ranks accordingly. You need to determine the rank of each player. For example, if the scores array is [100, 90, 90, 80], the ranks should be [1, 2, 2, 3]. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of players. The second line contains n space-separated integers representing the scores of the players (0 ≤ scores[i] ≤ 10000). Output a single line containing the ranks of the players in the input order. Example: Input: 4 100 90 90 80 Output: 1 2 2 3","solution":"def calculate_ranks(n, scores): Calculate the ranks of players based on their scores. :param n: int - The number of players :param scores: list of int - The scores of the players :return: list of int - The ranks of the players in the input order sorted_scores = sorted(list(set(scores)), reverse=True) score_to_rank = {score: rank + 1 for rank, score in enumerate(sorted_scores)} ranks = [score_to_rank[score] for score in scores] return ranks"},{"question":"The citizens of Integerland decided to hold a grand parade. The parade route is a straight line broken into segments, and each segment has a specified beauty value. The beauty values can be positive, negative, or zero, and the citizens want to maximize the beauty of a contiguous subsegment of the parade route. In addition, the parade committee decided that if the sum of the beauty values in the selected subsegment is zero, they should instead choose the subsegment of the shortest length that has this sum. Your task is to determine the maximum sum of beauty values of any contiguous subsegment of the parade route. If there are multiple such subsegments with the same sum, return the shortest one. The first line of the input contains one integer n (1 ≤ n ≤ 10^6) — the number of segments in the parade route. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the beauty values of the segments. Output two integers: the maximum sum of beauty values of any contiguous subsegment, and the length of that subsegment. If the maximum sum is zero, output the shortest length of the subsegment that produces this sum. Example Input: 5 1 -2 3 10 -4 Output: 12 2 Explanation: The optimal subsegment is [3, 10] which has a sum of 13. While subsegment [10] has a sum of 10, which is lower than 12.","solution":"def max_beauty(n, beauties): Returns the maximum sum of the beauty values of any contiguous subsegment of the parade route, and the length of the subsegment that produces this sum. If the maximum sum is zero, return the shortest length of the subsegment producing this sum. Parameters: n (int): The number of segments in the parade route. beauties (list of int): The beauty values of the segments. Returns: tuple of (int, int): The maximum sum and the length of the subsegment. max_sum = -float(\'inf\') current_sum = 0 start_index = 0 min_length = float(\'inf\') best_start = 0 best_end = 0 for end, value in enumerate(beauties): if current_sum <= 0: start_index = end current_sum = value else: current_sum += value if current_sum > max_sum or (current_sum == max_sum and (end - start_index + 1 < min_length)): max_sum = current_sum min_length = end - start_index + 1 best_start = start_index best_end = end if max_sum == 0: # find the shortest subsegment with zero sum min_zero_length = float(\'inf\') for start in range(n): current_sum = 0 for end in range(start, n): current_sum += beauties[end] if current_sum == 0 and (end - start + 1 < min_zero_length): min_zero_length = end - start + 1 return (0, min_zero_length) return (max_sum, min_length)"},{"question":"You are developing a new feature for a social networking website. In this feature, users have the option to \\"like\\" a post. Each post can be liked by multiple users, but a user can only like a post once. To maintain user experience, you need to track the total number of likes each post receives. The requirement is to efficiently update and report the total likes for any given post. Your task is to create a program to manage this \\"like\\" system. The system will take a series of operations and perform them accordingly. Each operation is one of two types: 1. \\"like postID userID\\" – where user with the given userID likes the post with the given postID. If the user has already liked the post, the operation should have no effect. 2. \\"count postID\\" – return the number of unique likes the post with the given postID has received. The first line of the input contains an integer q (1 ≤ q ≤ 10^5), the number of operations. Each of the next q lines contains an operation of the form described above. For each \\"count\\" operation, output the number of unique likes the specified post has received on a new line. Example: Input: 7 like 1 100 like 1 101 like 1 102 count 1 like 1 100 count 1 like 2 200 Output: 3 3","solution":"class LikeSystem: def __init__(self): self.posts_likes = {} def like(self, postID, userID): if postID not in self.posts_likes: self.posts_likes[postID] = set() self.posts_likes[postID].add(userID) def count(self, postID): if postID in self.posts_likes: return len(self.posts_likes[postID]) return 0 def process_operations(operations): system = LikeSystem() results = [] for operation in operations: parts = operation.split() if parts[0] == \'like\': postID = int(parts[1]) userID = int(parts[2]) system.like(postID, userID) elif parts[0] == \'count\': postID = int(parts[1]) results.append(system.count(postID)) return results"},{"question":"The Kingdom of Narnia is constructing a new communication network and requires your help in planning it. The network consists of n communication towers and m one-way signal connections between them. Each connection i is defined by two towers a_i and b_i, indicating the signal flows from a_i to b_i. Narnia\'s network needs to be optimized such that all towers can communicate with each other directly or through other towers. Furthermore, to ensure optimal performance, exactly k towers must be chosen as central hubs. Any communication between two towers must be routed through at most one central hub. Your task is to determine whether it\'s possible to select k central hubs satisfying these conditions, and if possible, print one such selection of k towers. Two towers are said to communicate directly if there exists a signal path between them, and through a hub if both towers can send or receive signals to/from at least one of the k hubs. The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. For each test case: - The first line contains three integers n, m, and k (1 le n le 1000, 0 le m le 10000, 1 le k le n). - The next m lines each contain two integers a_i and b_i (1 le a_i, b_i le n, a_i ne b_i) — representing a one-way signal connection from a_i to b_i. For each test case, print \\"YES\\" if it\'s possible to select k towers meeting the conditions. If it is possible, print a list of k integers representing the indices of the chosen central hubs. If it\'s not possible, print \\"NO\\". Example Input: ```plaintext 2 4 4 2 1 2 2 3 3 4 4 1 6 5 3 1 2 2 3 3 4 4 5 5 6 ``` Example Output: ```plaintext YES 1 3 NO ``` Explanation: In the first test case, the towers can be connected such that any communication goes through tower 1 or tower 3. In the second test case, it is not possible to select 3 towers as central hubs to satisfy the condition.","solution":"def find_central_hubs(n, m, k, connections): from collections import defaultdict, deque def bfs(graph, start, visited): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) def is_strongly_connected(n, graph, reverse_graph): for i in range(1, n + 1): visited = set() bfs(graph, i, visited) if len(visited) != n: return False visited = set() bfs(reverse_graph, i, visited) if len(visited) != n: return False return True graph = defaultdict(list) reverse_graph = defaultdict(list) for a, b in connections: graph[a].append(b) reverse_graph[b].append(a) if not is_strongly_connected(n, graph, reverse_graph): return \\"NO\\" # If graph is strongly connected then k or more vertices means we can always find k vertices if k <= n: return \\"YES\\", list(range(1, k+1)) return \\"NO\\" def solve(test_cases): results = [] for n, m, k, connections in test_cases: result = find_central_hubs(n, m, k, connections) if result == \\"NO\\": results.append(\\"NO\\") else: results.append(\\"YES\\") results.append(\\" \\".join(map(str, result[1]))) return results"},{"question":"Mark is a cybersecurity specialist working on securing communication between servers. He is currently dealing with a problem of detecting compromised nodes in a network represented as an undirected graph. Each server in the network is represented by a node, and each direct communication link between servers is represented by an edge. Mark needs to find out the minimum number of compromised nodes that, if removed, will disconnect the entire network (i.e., make at least one pair of nodes unreachable from each other). This problem is crucial for identifying the most critical parts of the network that need stronger security. Given an undirected graph with n nodes and m edges, where each node represents a server and each edge represents a direct communication link between servers, write a program to compute the minimum number of nodes that, if removed, will disconnect the network. The first line of input contains two space-separated integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2·10^5) — the number of nodes and the number of edges in the graph, respectively. Each of the next m lines contains two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v) — denoting a direct communication link between servers u and v. Output one integer, the minimum number of nodes that, if removed, will disconnect the network. If the network is already disconnected, output 0. **Example**: Input: ``` 5 5 1 2 1 3 2 3 3 4 3 5 ``` Output: ``` 1 ``` Explanation: In the given example, removing node 3 will disconnect the network, as there will be no path between nodes 1, 2 and nodes 4, 5. Therefore, the minimum number of nodes needed to disconnect the network is 1.","solution":"def find_articulation_points(n, m, edges): from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) discovery = [-1] * (n + 1) low = [-1] * (n + 1) parent = [-1] * (n + 1) articulation_points = set() time = 0 def dfs(u): nonlocal time discovery[u] = low[u] = time time += 1 children = 0 for v in graph[u]: if discovery[v] == -1: # v is not visited parent[v] = u children += 1 dfs(v) # Check if the subtree rooted at v has a connection back to one of the ancestors of u low[u] = min(low[u], low[v]) # u is an articulation point in the following cases: # (1) u is root of DFS tree and has two or more children. # (2) u is not root and low value of one of its child is more than discovery value of u. if parent[u] == -1 and children > 1: articulation_points.add(u) if parent[u] != -1 and low[v] >= discovery[u]: articulation_points.add(u) elif v != parent[u]: # Update low value of u for parent function calls low[u] = min(low[u], discovery[v]) for u in range(1, n + 1): if discovery[u] == -1: dfs(u) return len(articulation_points) # Example use case n, m = 5, 5 edges = [(1, 2), (1, 3), (2, 3), (3, 4), (3, 5)] print(find_articulation_points(n, m, edges)) # Output: 1"},{"question":"You are given an array of n integers and q queries. Each query consists of three integers l, r, and x. For each query, you need to determine how many times x appears in the subarray from index l to index r (inclusive). The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of integers in the array and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the elements of the array. Each of the next q lines contains three integers l, r, and x (1 ≤ l, r ≤ n, 1 ≤ x ≤ 100000). For each query, print the number of times x appears in the subarray from index l to index r. Example: Input: 7 3 1 2 1 3 1 2 3 1 7 1 1 4 2 3 5 1 Output: 3 1 2 Explanation: For the first query, 1 appears 3 times in the subarray from index 1 to 7. For the second query, 2 appears 1 time in the subarray from index 1 to 4. For the third query, 1 appears 2 times in the subarray from index 3 to 5.","solution":"def count_occurrences(arr, queries): For each query, count occurrences of x in the subarray from l to r (inclusive). Parameters: arr: list of integers queries: list of queries, where each query is a tuple (l, r, x) Returns: list of integer counts for each query results = [] for l, r, x in queries: results.append(arr[l-1:r].count(x)) return results"},{"question":"You are given an array a with n integers. Your task is to partition this array into the maximum number of contiguous subarrays where each subarray contains an odd number of elements. The first line contains one integer number n (1 le n le 10^6) — the number of integers in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). Print one integer — the maximum number of contiguous subarrays such that each subarray contains an odd number of elements. In the first example, where the array is [1, 2, 3, 4, 5], the optimal partitioning is [1], [2, 3], [4, 5], resulting in 3 subarrays.","solution":"def partition_odd_length_subarrays(n, a): Partition the array a of length n into the maximum number of contiguous subarrays, where each subarray contains an odd number of elements. :param n: int - number of integers in the array :param a: list of int - array of integers :return: int - maximum number of contiguous subarrays with odd number of elements return (n + 1) // 2"},{"question":"You are given a 2D array of size (n times m), where (1 leq n, m leq 10^3). Each cell of the array contains a non-negative integer. Your task is to find the largest rectangle (continuous sub-array) in this 2D grid such that the sum of the numbers in the rectangle is less than or equal to a given threshold (T). The program should output two integers representing the area of the largest rectangle (i.e., the number of cells in that rectangle) and the sum of the numbers within that rectangle. If there are multiple rectangles with the same area, return the one with the smallest sum. If no such rectangle exists, output 0 0. # Input The first line contains three integers (n), (m), and (T) ((1 leq n, m leq 10^3), (0 leq T leq 10^9)) — the number of rows, the number of columns, and the threshold. The next (n) lines contain (m) integers each, describing the elements of the grid ((0 leq text{grid}[i][j] leq 10^4)). # Output Output two integers — the area of the largest rectangle and the sum of the numbers within that rectangle. If no rectangle meets the requirements, output \\"0 0\\". # Example Input ``` 4 5 10 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 ``` Output ``` 4 10 ``` In this example, the rectangle could be: ``` 1 2 3 2 3 4 ``` The area is 4 (2 rows and 2 columns) and the sum is 10. # Note An efficient algorithm is required to solve this problem within the time limits, potentially using techniques such as dynamic programming, precomputed cumulative sums, or sliding window techniques.","solution":"def find_largest_rectangle(n, m, T, grid): def get_prefix_sum(grid): prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i][j-1] + prefix_sum[i-1][j] - prefix_sum[i-1][j-1] return prefix_sum def get_sum(prefix_sum, r1, c1, r2, c2): return prefix_sum[r2+1][c2+1] - prefix_sum[r1][c2+1] - prefix_sum[r2+1][c1] + prefix_sum[r1][c1] prefix_sum = get_prefix_sum(grid) max_area = 0 min_sum = float(\'inf\') for r1 in range(n): for c1 in range(m): for r2 in range(r1, n): for c2 in range(c1, m): current_sum = get_sum(prefix_sum, r1, c1, r2, c2) area = (r2 - r1 + 1) * (c2 - c1 + 1) if current_sum <= T: if area > max_area or (area == max_area and current_sum < min_sum): max_area = area min_sum = current_sum if max_area == 0: return 0, 0 else: return max_area, min_sum"},{"question":"The developers at a new gaming startup are working on a system for automatically generating randomized character stats for their role-playing game. In the game, each character has a set of stats represented by positive integers that fall within a defined range. For a given character, you are given two arrays, each with n integers: - The first array named `minStats` represents the minimum value each stat can take. - The second array named `maxStats` represents the maximum value each stat can take. A valid stat for the character at position `i` must be between `minStats[i]` and `maxStats[i]` (inclusive). The goal is to generate the lexicographically smallest set of stats for the character, where all stats satisfy the given constraints. The first line of input contains a single integer `n` (1 ≤ n ≤ 1000) — the number of stats. The second line contains `n` integers representing the `minStats` array. The third line contains `n` integers representing the `maxStats` array. Output an array of `n` integers representing the lexicographically smallest set of stats for the character. **Example** Input: ``` 3 1 4 3 5 6 9 ``` Output: ``` 1 4 3 ``` Input: ``` 5 2 1 4 3 7 8 6 9 5 10 ``` Output: ``` 2 1 4 3 7 ``` In the first sample, the lexicographically smallest valid stats are [1, 4, 3], which fit within the provided ranges. In the second sample, the smallest set is [2, 1, 4, 3, 7]. Each stat in both outputs respects the given min and max constraints.","solution":"def generate_smallest_stats(n, minStats, maxStats): Generate the lexicographically smallest stats for each position within the given minStats and maxStats ranges. result = [] for i in range(n): result.append(minStats[i]) return result"},{"question":"You are given an array of integers where each integer appears an even number of times, except for one integer that appears an odd number of times. The task is to find the integer that appears an odd number of times. The first line of input contains a single integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5) — the number of integers in the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). Output a single integer for each test case — the integer that appears an odd number of times. The sum of n over all test cases does not exceed 10^6. # Example: Input: ``` 2 5 1 1 2 2 3 7 4 4 5 5 5 6 6 ``` Output: ``` 3 5 ``` # Explanation: - In the first test case, the integer 3 appears exactly once (which is an odd number of times). - In the second test case, the integer 5 appears three times (which is an odd number of times).","solution":"def find_odd_occurrence(nums): Finds the integer that appears an odd number of times in the given list of integers. Args: nums (list of int): List of integers, where exactly one integer appears an odd number of times. Returns: int: The integer that appears an odd number of times. result = 0 for num in nums: result ^= num return result def solve(test_cases): results = [] for n, nums in test_cases: results.append(find_odd_occurrence(nums)) return results"},{"question":"There is a large library with many books placed in a single row. The librarian has received a request to bring a set of `k` books to the front, such that these `k` books are close to each other and their positions form a contiguous subarray in the original row. The librarian wants to know how many ways there are to choose such a subarray. You are given an array `a` of `n` integers representing the positions of each book in the row, and an integer `k`, the number of books the librarian needs to bring. Your task is to find the number of contiguous subarrays of length `k` in the array `a`. # Input The first line contains two integers `n` and `k` (`1 ≤ k ≤ n ≤ 100,000`) — the total number of books in the row and the number of books to bring to the front respectively. The second line contains `n` integers `a1, a2, ..., an` (`1 ≤ ai ≤ 10^9`), representing the positions of the books in the row. # Output Print a single integer — the number of contiguous subarrays of length `k`. # Example Input ``` 7 3 10 20 30 40 50 60 70 ``` Output ``` 5 ``` Explanation For the given example, the subarrays of length `k = 3` are: - [10, 20, 30] - [20, 30, 40] - [30, 40, 50] - [40, 50, 60] - [50, 60, 70] Therefore, there are 5 contiguous subarrays of length `k`.","solution":"def count_contiguous_subarrays(n, k, a): Returns the number of contiguous subarrays of length k in the array a. Parameters: n (int): The total number of books in the row. k (int): The number of books to bring to the front. a (list): The positions of the books in the row. Returns: int: The number of contiguous subarrays of length k. return n - k + 1"},{"question":"You are given a sequence of operations to perform on an initially empty list. The operations are in the form of queries, which can be one of the following: 1. `1 x` — Add the integer `x` to the end of the list. 2. `2 ` — Remove the last element from the list (if the list is not empty). 3. `3 ` — Print the maximum value in the list (if the list is not empty). You need to perform these operations in the order they are given and print the result of each `3` operation. The first line contains an integer `q` (1 le q le 10^5), the number of queries. Each of the next `q` lines contains one query of the form described above. It is guaranteed that there is at least one query of type `3` in the input. For each query of type `3`, print the maximum value in the list on a new line. # Sample Input ``` 6 1 3 1 1 1 2 3 2 3 ``` # Sample Output ``` 3 3 ```","solution":"def perform_operations(queries): Perform operations on an initially empty list based on the given queries. Args: queries: List of queries to be performed. Returns: List of results for queries of type `3` (print the maximum value in the list). result = [] stack = [] for query in queries: parts = query.split() operation = int(parts[0]) if operation == 1: x = int(parts[1]) stack.append(x) elif operation == 2: if stack: stack.pop() elif operation == 3: if stack: result.append(max(stack)) return result"},{"question":"Polly the Geologist has discovered a series of caves, each containing a certain number of gems. The caves are arranged in a straight line, and Polly can only move left or right to adjacent caves. On each day, she can move to an adjacent cave exactly once. However, out of the excitement, she can visit at most two caves per day – the cave she starts the day from and the one she moves to. Given that Polly starts from the first cave, you need to determine the maximum number of gems she can collect in exactly `d` days. The first line contains two integers `n` and `d` (`1 ≤ n ≤ 100,000`, `0 ≤ d ≤ 100,000`) which represent the number of caves and the number of days Polly has, respectively. The second line contains `n` space-separated integers `g_i` (`1 ≤ g_i ≤ 1,000`) representing the number of gems in each cave. Print a single integer representing the maximum number of gems Polly can collect in exactly `d` days. **Example:** Input: ``` 5 2 10 5 15 20 25 ``` Output: ``` 35 ``` In the above example, Polly starts from cave 1 with 10 gems, moves to cave 2 on the first day (collecting 5 gems), then moves to cave 3 on the second day (collecting 15 gems). The maximum number of gems she collects in 2 days is 10 (cave 1) + 5 (cave 2) + 15 (cave 3) = 30. Note: Polly can\'t move further beyond the fourth cave within 2 days based on restrictions given in the problem.","solution":"def max_gems(n, d, g): Calculate the maximum number of gems Polly can collect in exactly `d` days. :param n: Number of caves :param d: Number of days :param g: List of gems in each cave :return: Maximum number of gems Polly can collect if d >= n - 1: return sum(g) return sum(g[:d + 1]) # Example usage n = 5 d = 2 g = [10, 5, 15, 20, 25] print(max_gems(n, d, g)) # Output: 30"},{"question":"You are organizing a sports festival and need to schedule the events in such a way that no two events overlap in time. Each event has a start time and a duration, and events are scheduled consecutively on multiple tracks. Given the number of tracks available, the number of events, and the start time and duration of each event, determine the maximum number of events that can be scheduled. Note that an event must fully take place within a single track without any overlaps with other events on the same track. The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^3) — the number of events and the number of available tracks. The next n lines each contain two integers s_i and d_i (1 ≤ s_i ≤ 10^9, 1 ≤ d_i ≤ 10^9) — the start time and duration of the i-th event respectively. Output a single integer — the maximum number of events that can be scheduled without any overlaps. # Example Input: ``` 5 2 1 3 2 5 6 2 8 4 5 3 ``` Output: ``` 4 ``` Explanation: One optimal way to schedule the events on the tracks: - Track 1: Event 1 (1 to 4), Event 4 (8 to 12) - Track 2: Event 3 (6 to 8), Event 5 (5 to 8)","solution":"def max_non_overlapping_events(n, k, events): Find the maximum number of non-overlapping events that can be scheduled on k tracks. Args: n : int : number of events k : int : number of available tracks events : list : list of tuples, each containing (start time, duration) of events Returns: int : maximum number of non-overlapping events that can be scheduled # Sort events by their end times events = sorted(events, key=lambda x: x[0] + x[1]) end_times = [0] * k count = 0 for s, d in events: for i in range(k): if end_times[i] <= s: end_times[i] = s + d count += 1 break return count"},{"question":"You are planning to host a series of outdoor events in various parks in your city. There are `n` parks, and each park has a certain capacity that can accommodate a maximum number of people. You have a list of events, each with a specified number of people who will attend. Your goal is to assign each event to a park such that no park exceeds its capacity with the assigned events. If it\'s not possible to assign the events within the capacities of the parks, you should output \\"IMPOSSIBLE\\". Otherwise, provide an assignment of events to parks. The first line contains an integer `n` (1 ≤ n ≤ 1000), representing the number of parks. The second line contains `n` integers, `c1, c2, ..., cn` (1 ≤ ci ≤ 1000), where `ci` is the capacity of the i-th park. The third line contains an integer `m` (1 ≤ m ≤ 1000), representing the number of events. The fourth line contains `m` integers, `a1, a2, ..., am` (1 ≤ ai ≤ 1000), where `ai` is the number of people attending the i-th event. Print \\"IMPOSSIBLE\\" if there is no way to assign the events such that no park exceeds its capacity. If there is a solution, print \\"POSSIBLE\\" on the first line. On the second line, print `m` integers where the i-th integer represents the park number (1 to n) to which the i-th event is assigned. # Example Input ``` 5 100 200 150 50 120 4 90 70 200 60 ``` Output ``` POSSIBLE 1 5 2 3 ``` In this example, the first event with 90 people is assigned to park 1, the second event with 70 people is assigned to park 5, the third event with 200 people is assigned to park 2, and the fourth event with 60 people is assigned to park 3. All parks\' capacities are respected, ensuring a feasible assignment.","solution":"def assign_events_to_parks(n, capacities, m, events): from heapq import heappush, heappop # Create a min-heap of parks based on their capacities parks_heap = [] for i in range(n): heappush(parks_heap, (capacities[i], i + 1)) # Assign events to parks event_assignments = [0] * m for j in range(m): event_size = events[j] updated_parks_heap = [] assigned = False while parks_heap: park_capacity, park_index = heappop(parks_heap) if park_capacity >= event_size: event_assignments[j] = park_index park_capacity -= event_size heappush(parks_heap, (park_capacity, park_index)) assigned = True break else: updated_parks_heap.append((park_capacity, park_index)) # Put back non-suitable parks to the heap while updated_parks_heap: heappush(parks_heap, updated_parks_heap.pop()) if not assigned: return \\"IMPOSSIBLE\\" return [\\"POSSIBLE\\"] + event_assignments"},{"question":"Create a function that accepts a string representation of a nested dictionary and validates if the given structure is a properly nested dictionary. # Input: - A single string s, containing a nested dictionary representation with keys and values consisting only of lowercase alphabets for keys and either strings, integers, or other dictionaries as values. - The format will follow JSON-like syntax, but without spaces and using single quotes for strings. # Output: - Return \\"Valid\\" if the string represents a properly nested dictionary. - Return \\"Invalid\\" if the string does not follow the correct nesting structure. # Example: ```plaintext Input: \\"{\'a\':{\'b\':\'c\',\'d\':3},\'e\':{\'f\':{\'g\':\'h\'}}}\\" Output: \\"Valid\\" Input: \\"{\'a\':{\'b\':\'c\',\'d\':3},\'e\':{\'f\':{\'g\':\'h\'}}\\" Output: \\"Invalid\\" Input: \\"{\'a\':{\'b\':\'c\',\'d\':\'e\'}},\'f\':{\'g\':3}}\\" Output: \\"Invalid\\" Input: \\"{\'a\':{}}\\" Output: \\"Valid\\" ``` # Constraints: - The input string will contain at most 10000 characters. - Valid keys are lowercase alphabet strings (e.g., `\'a\'`, `\'key\'`). - Valid values are strings (e.g., `\'value\'`), integers (e.g., `123`), or further nested dictionaries. - A dictionary can be empty. - For simplicity, assume no two keys will be the same at the same level of nesting.","solution":"import ast def validate_nested_dict_structure(s): Validates if the given string represents a properly nested dictionary. try: parsed_dict = ast.literal_eval(s) if isinstance(parsed_dict, dict): return \\"Valid\\" else: return \\"Invalid\\" except Exception: return \\"Invalid\\""},{"question":"You are given n boxes labeled from 1 to n, and each box can contain a surprising number of candies between 0 and 100 (both inclusive). Your task is to rearrange the boxes such that the difference in candies between every consecutive pair of boxes is minimized across all possible arrangements. That is, if the rearranged array of boxes is [b1, b2, b3, ..., bn], you want to minimize the value of |b1 - b2| + |b2 - b3| + ... + |bn-1 - bn|. Given the number of boxes n (2 ≤ n ≤ 105) and a list of integers representing the number of candies in each box, find the minimized difference sum after optimally rearranging the boxes. **Input:** - The first line contains a single integer n, the number of boxes. - The second line contains n space-separated integers where the i-th integer is the number of candies in the i-th box. **Output:** - Print a single integer, the minimized difference sum. **Example:** ``` Input: 5 4 2 8 7 5 Output: 6 Explanation: One optimal arrangement is [2, 4, 5, 7, 8] which gives |2 - 4| + |4 - 5| + |5 - 7| + |7 - 8| = 2 + 1 + 2 + 1 = 6 ```","solution":"def minimized_difference_sum(n, candies): Returns the minimized difference sum after optimally rearranging the boxes. Parameters: n (int): Number of boxes candies (list of int): List of integers representing the number of candies in each box Returns: int: The minimized difference sum # Sort the candies to minimize the differences between consecutive elements candies.sort() # Calculate the total minimal sum of differences minimized_sum = sum(abs(candies[i] - candies[i-1]) for i in range(1, n)) return minimized_sum # Example usage n = 5 candies = [4, 2, 8, 7, 5] output = minimized_difference_sum(n, candies) print(output) # Output should be 6"},{"question":"You are given a city map with N intersections and M one-way streets connecting some pairs of intersections. Each intersection has some importance value. Starting from a given intersection S, you want to find a path such that the sum of the importance values of all intersections visited is maximized. You can only visit an intersection once and the given streets are one-way, so you must respect the direction of the streets. Input The first line of the input contains three integers N, M, and S (1 ≤ N ≤ 1000, 1 ≤ M ≤ 10000, 1 ≤ S ≤ N) - the number of intersections, the number of streets, and the starting intersection, respectively. The second line contains N integers, where the i-th integer is the importance value of the i-th intersection (1 ≤ importance value ≤ 1000). Each of the next M lines contains two integers u and v (1 ≤ u, v ≤ N, u ≠ v), indicating a one-way street from intersection u to intersection v. Output Print a single integer, the maximum sum of importance values of all intersections in the optimal path starting from intersection S. Example Input: 5 6 1 10 20 30 40 50 1 2 1 3 2 4 3 4 4 5 3 5 Output: 110 Explanation Starting from intersection 1, the optimal path is 1 → 3 → 4 → 5, with importance values summing to 10 + 30 + 40 + 50 = 130.","solution":"from collections import defaultdict, deque def max_importance_path(n, m, s, importance, streets): graph = defaultdict(list) for u, v in streets: graph[u - 1].append(v - 1) # change to 0-based index # Initialize importance values importance_sum = [float(\'-inf\')] * n importance_sum[s - 1] = importance[s - 1] # Implement a modified BFS or topological sort to ensure one-way path q = deque([s - 1]) while q: current = q.popleft() for neighbor in graph[current]: if importance_sum[current] + importance[neighbor] > importance_sum[neighbor]: importance_sum[neighbor] = importance_sum[current] + importance[neighbor] q.append(neighbor) return max(importance_sum)"},{"question":"Alice loves playing with sequences of numbers. Recently, she has found a new type of sequence called a \\"zigzag sequence\\". A sequence of integers is called a zigzag sequence if the differences between consecutive elements strictly alternate between positive and negative. For example, [1, 3, 2, 4] is a zigzag sequence because 3 - 1 > 0, 2 - 3 < 0, and 4 - 2 > 0. Given a sequence of n integers, Alice wants to know the length of the longest contiguous subsequence that forms a zigzag sequence. Can you help her determine this? The first line of input contains an integer n (1 ≤ n ≤ 100,000), denoting the number of elements in the sequence. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the sequence. Output a single integer — the length of the longest contiguous subsequence that forms a zigzag sequence. Example: Input: 6 1 7 4 9 2 5 Output: 6 Explanation: The entire sequence [1, 7, 4, 9, 2, 5] is a zigzag sequence. Therefore, the longest zigzag subsequence is of length 6. Note: - If a sequence has only one element, it is considered a zigzag sequence of length 1. - Sequences with multiple elements, where all elements are equal, should return a length of 1, as only individual elements can be considered zigzag subsequences.","solution":"def longest_zigzag_sequence_length(n, sequence): if n == 1: return 1 max_length = 1 current_length = 1 for i in range(1, n): if (sequence[i] - sequence[i - 1] > 0 and (i == 1 or sequence[i - 1] - sequence[i - 2] <= 0)) or (sequence[i] - sequence[i - 1] < 0 and (i == 1 or sequence[i - 1] - sequence[i - 2] >= 0)): current_length += 1 else: max_length = max(max_length, current_length) current_length = 2 if sequence[i] != sequence[i - 1] else 1 return max(max_length, current_length)"},{"question":"In the kingdom of Transylvania, Vlad the Count is trying to optimize the blood deliveries from various villages to his castle. Each village has a certain amount of blood supply, and the castle needs a specific amount of blood to be delivered every day to keep the inhabitants safe. Vlad has a unique delivery system where the blood can be transported from one village to another before reaching the castle, but this can only happen if there is a direct road between the villages. Furthermore, each road has a specific capacity, which is the maximum amount of blood that can be transported through it daily. Vlad\'s task is to calculate the maximum possible amount of blood that can be delivered to his castle in one day given the constraints of the road capacities. This requires finding the maximum flow in a network where the villages act as nodes, the roads as edges with defined capacities, and the castle as the sink node. # Input The input consists of: - The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 5000), representing the number of villages (including the castle) and the number of roads, respectively. - Each of the next m lines contains three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 104), representing a road between village u and village v with capacity c. The castle is always the n-th node, and the villages are numbered from 1 to n-1. # Output Print a single integer, which is the maximum amount of blood that can be delivered to the castle in one day. # Example Input ``` 4 5 1 2 40 1 3 20 2 3 30 2 4 20 3 4 10 ``` Output ``` 30 ``` Explanation: The maximum blood flow from the source node (village 1) to the sink node (castle 4) is 30 units. # Note You can assume there are no multiple roads between any pair of villages in the same direction and that each road is bidirectional. Calculate the maximum flow using the Ford-Fulkerson algorithm, the Edmonds-Karp algorithm, or any other maximum flow algorithm.","solution":"from collections import defaultdict, deque class MaxFlow: def __init__(self, n): self.n = n self.graph = defaultdict(list) self.capacity = {} def add_edge(self, u, v, c): self.graph[u].append(v) self.graph[v].append(u) self.capacity[(u, v)] = c self.capacity[(v, u)] = 0 # Reverse path with 0 initial capacity def bfs(self, source, sink, parent): visited = [False] * self.n queue = deque([source]) visited[source] = True while queue: u = queue.popleft() for v in self.graph[u]: if not visited[v] and self.capacity[(u, v)] > 0: queue.append(v) visited[v] = True parent[v] = u if v == sink: return True return False def edmonds_karp(self, source, sink): parent = [-1] * self.n max_flow = 0 while self.bfs(source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, self.capacity[(parent[s], s)]) s = parent[s] v = sink while v != source: u = parent[v] self.capacity[(u, v)] -= path_flow self.capacity[(v, u)] += path_flow v = parent[v] max_flow += path_flow return max_flow def max_blood_delivery(n, m, roads): max_flow_calculator = MaxFlow(n) for u, v, c in roads: max_flow_calculator.add_edge(u-1, v-1, c) return max_flow_calculator.edmonds_karp(0, n-1)"},{"question":"The king of a distant land is organizing a grand chess tournament. The tournament is set up as a knockout competition with power-of-two participants (e.g., 2, 4, 8, etc.). In each matchup, two players compete, and the winner moves to the next round while the loser is eliminated. The king, an avid chess fan, wants to know how many distinct possible winners there are for a given number of participants, assuming no byes are given and players are eliminated only by losing a match. We\'ll assume that each player has an equal chance of winning any match they play. Your task is to determine the number of distinct possible winners for a given number of participants (2^k) (where (k) is a non-negative integer). # Input The input consists of a single integer (n) (1 ≤ (n) ≤ 1024), representing the number of participants in the form of (2^k). # Output Output a single integer, the number of distinct possible winners. # Example - **Input:** ``` 8 ``` - **Output:** ``` 8 ``` - **Input:** ``` 16 ``` - **Output:** ``` 16 ``` # Explanation All the participants have an equal chance of winning each match they play. Therefore, the number of distinct possible winners is simply the number of participants.","solution":"def distinct_possible_winners(n): Returns the number of distinct possible winners for the given number of participants. return n"},{"question":"In an ancient kingdom, there is a highly advanced tree known for its exotic fruits. In this kingdom, they have a tradition of representing data in binary trees. Each node of the tree contains a non-negative integer value, and each tree has exactly one root node. For this particular tree, a unique ceremony is performed every year. During the ceremony, they choose two leaf nodes and a central node in their path (which can be either one of the selected leaf nodes or another node in the path between these leaf nodes) to mark the \\"path strength\\". The path strength is calculated as the sum of all the node values on the path connecting the two leaf nodes through the central node. Due to the peculiar nature of this tree, they want to find the maximum path strength achievable during this ceremony, among all possible pairs of leaf nodes and their respective central nodes. You need to help the kingdom figure out this maximum path strength. The first line contains an integer n (2 ≤ n ≤ 105), the number of nodes in the tree. The second line contains n−1 pairs of integers x and y (1 ≤ x, y ≤ n), each denoting an edge between nodes x and y. The third line contains n integers vi (1 ≤ vi ≤ 109), the values of the nodes of the tree. Output a single integer — the maximum path strength achievable during the ceremony. Example: Input: 5 1 2 1 3 3 4 3 5 5 8 3 7 1 Output: 22 Explanation: The tree can be represented as: 1 (5) / 2 (8) 3 (3) / 4 (7) 5 (1) One possible maximum path strength is the path from leaf node 2 to leaf node 4 through the root node 1, giving a path strength of 8 + 5 + 3 + 7 = 23. However, since 8 + 5 + 3 + 1 = 17 is smaller, the optimal pair being 8+5+3+7 giving a total path of 23. That yields the final result.","solution":"from collections import defaultdict def dfs(node, parent, tree, values, cache): # We initialize the two largest distances from current node to any leaf max1, max2 = 0, 0 # Iterate over all connected nodes for neighbor in tree[node]: if neighbor != parent: neighbor_max = dfs(neighbor, node, tree, values, cache) if neighbor_max > max1: max1, max2 = neighbor_max, max1 elif neighbor_max > max2: max2 = neighbor_max # The best path through this node as the central point cache[node] = values[node] + max1 + max2 # Return the best single path extension return values[node] + max1 def max_path_strength(n, edges, node_values): tree = defaultdict(list) for x, y in edges: tree[x].append(y) tree[y].append(x) # Convert 1-indexed to 0-indexed values = [0] + node_values # Cache for storing max path strengths cache = [0] * (n + 1) # Starting DFS from node 1 (root of the tree) dfs(1, -1, tree, values, cache) return max(cache) # Example function call: # n = 5 # edges = [(1, 2), (1, 3), (3, 4), (3, 5)] # node_values = [5, 8, 3, 7, 1] # Result: 23"},{"question":"A group of astronauts are working on a space station. They often need to send messages to each other, where they encode the messages using a special formula in order to preserve bandwidth. Each message is a non-empty string containing only lowercase English letters. The encoding process works by counting the number of occurrences of each character in the message and organizing them in a frequency map. A message is considered efficiently encoded if it can be represented by the first k unique characters with the highest frequency in non-ascending order. If multiple characters have the same frequency, they are sorted lexicographically. Your task is to write a program that, given a message and an integer k (1 ≤ k ≤ 26), finds the most efficient way to encode the message using the top k characters. For each k from 1 to 26, output an encoded string consisting of the k most frequent characters from the message in non-ascending order by their frequency. If a character appears in the original message less than ks times, it should not be included in the encoded string for those k values. # Input - A single line containing the message string, s (1 ≤ |s| ≤ 10^5), composed of lowercase English letters only. - A single integer k (1 ≤ k ≤ 26) representing the number of most frequent characters to include in the encoding. # Output - For each k from 1 to 26, print a single string representing the encoded message using the top k characters sorted by frequency in non-ascending order and lexicographically when frequencies are the same. # Example Input: abracadabra 3 Output: a ab abr Explanation: - For k=1, the character \'a\' appears most frequently. - For k=2, characters \'a\' and \'b\' appear with the highest frequencies. - For k=3, characters \'a\', \'b\', and \'r\' are the top 3 most frequent characters.","solution":"def encode_message(message, k): from collections import Counter # Count the frequency of each character in the message frequency_map = Counter(message) # Create a sorted list of characters by frequency in non-ascending order sorted_chars = sorted(frequency_map.keys(), key=lambda x: (-frequency_map[x], x)) # Generate encoded messages for each k from 1 to 26 results = [] for i in range(1, k + 1): encoded_message = \'\'.join(sorted_chars[:i]) results.append(encoded_message) return results"},{"question":"You are given a series of time intervals during which certain tasks need to be performed. Each task has a start time and a finish time. The objective is to schedule the maximum number of non-overlapping tasks. A task starts at time `s(i)` and finishes at time `f(i)`. A task `i` and another task `j` are non-overlapping if `f(i) <= s(j)` or `f(j) <= s(i)`. Write a program to determine the maximum number of non-overlapping tasks that can be scheduled. The first input line contains an integer `n` (1 ≤ n ≤ 10^5), the number of tasks. Each of the following `n` lines contains two integers `s(i)` and `f(i)` (0 ≤ s(i) < f(i) ≤ 10^9), representing the start and end times of the `i-th` task. Output a single integer — the maximum number of non-overlapping tasks that can be scheduled. **Example:** Input: ``` 5 1 3 2 5 4 6 6 8 7 9 ``` Output: ``` 3 ``` Explanation: The maximum number of non-overlapping tasks is 3. One of the possible non-overlapping schedules is: (1, 3), (4, 6), and (6, 8).","solution":"def max_non_overlapping_tasks(tasks): Determines the maximum number of non-overlapping tasks that can be scheduled. :param tasks: List of tuples where each tuple contains two integers (start time and finish time). :return: An integer representing the maximum number of non-overlapping tasks. # Sort tasks based on their finish times tasks.sort(key=lambda x: x[1]) count = 0 last_finish_time = 0 for start, finish in tasks: if start >= last_finish_time: count += 1 last_finish_time = finish return count"},{"question":"You are given an integer array `arr` of size `n` where each element represents a certain value. Initially, you can pick any single element and add it to your sequence. On each subsequent step, you can pick a new element `x` from the array to add to your sequence only if it is strictly greater than the last element added to the sequence. Your task is to determine the maximum possible length of such a sequence. Constraints: - 1 ≤ `n` ≤ 200,000 - 1 ≤ `arr[i]` ≤ 10^9 for all 1 ≤ i ≤ n Input format: - The first line contains a single integer `n`: the size of the array. - The second line contains `n` space-separated integers representing the elements of the array. Output format: - Output a single integer which is the maximum length of any sequence that can be formed following the aforementioned rules. Example: Input: ``` 6 5 3 4 8 6 7 ``` Output: ``` 4 ``` Explanation: One of the possible longest increasing subsequences is `3, 4, 6, 7` with length 4. Note that `5` as the starting element would lead to a shorter sequence, `5, 8`.","solution":"def max_increasing_sequence_length(arr): Returns the length of the longest increasing subsequence in the array. import bisect if not arr: return 0 n = len(arr) tail = [] for num in arr: pos = bisect.bisect_left(tail, num) if pos == len(tail): tail.append(num) else: tail[pos] = num return len(tail)"},{"question":"You are given a map of a grid-based city with dimensions (n times m) and a list of the city\'s major roads. Each road connects two different intersections on the grid and has a specific cost to use. Your task is to find the minimum cost required to travel from the top-left intersection (1, 1) to the bottom-right intersection (n, m), following the city\'s roads. You are only allowed to use the major roads for traveling between intersections. The city grid is represented by intersections numbered from 1 to (n) along the rows and from 1 to (m) along the columns. The intersections thus form a grid with coordinates ((i, j)), where (1 leq i leq n) and (1 leq j leq m). The first line of the input contains three integers (n), (m), and (r) ((2 leq n, m leq 500, 1 leq r leq 5 times 10^4)) — the dimensions of the city and the number of major roads, respectively. Each of the next (r) lines contains five integers (x1), (y1), (x2), (y2), and (c) ((1 leq x1, x2 leq n, 1 leq y1, y2 leq m, 1 leq c leq 10^4)) — indicating there is a major road connecting the intersection ((x1, y1)) with the intersection ((x2, y2)) and the cost (c) to use that road. Print a single integer, the minimum cost required to travel from the top-left intersection (1, 1) to the bottom-right intersection (n, m). If there is no valid path, print (-1). # Example **Input:** ``` 3 3 4 1 1 1 2 5 1 2 2 2 2 2 2 3 2 1 3 2 3 3 3 ``` **Output:** ``` 11 ``` **Explanation:** The optimal path would be (1, 1) -> (1, 2) with cost 5, then (1, 2) -> (2, 2) with cost 2, then (2, 2) -> (3, 2) with cost 1, and finally (3, 2) -> (3, 3) with cost 3. The total cost is 5 + 2 + 1 + 3 = 11.","solution":"import heapq def minimum_cost(n, m, r, roads): # Create adjacency list for the grid graph = {} for _ in range(r): x1, y1, x2, y2, c = roads.pop(0) if (x1, y1) not in graph: graph[(x1, y1)] = [] if (x2, y2) not in graph: graph[(x2, y2)] = [] graph[(x1, y1)].append(((x2, y2), c)) graph[(x2, y2)].append(((x1, y1), c)) # Dijkstra\'s Algorithm to find shortest path start = (1, 1) end = (n, m) heap = [(0, start)] # (cost, (x, y)) costs = {start: 0} visited = set() while heap: curr_cost, (curr_x, curr_y) = heapq.heappop(heap) if (curr_x, curr_y) in visited: continue visited.add((curr_x, curr_y)) if (curr_x, curr_y) == end: return curr_cost for (next_x, next_y), next_cost in graph.get((curr_x, curr_y), []): if (next_x, next_y) not in visited: total_cost = curr_cost + next_cost if total_cost < costs.get((next_x, next_y), float(\'inf\')): costs[(next_x, next_y)] = total_cost heapq.heappush(heap, (total_cost, (next_x, next_y))) return -1"},{"question":"You are given a string s consisting of lowercase letters. You can perform the following operation any number of times: choose a lowercase letter c that appears at least twice in the string and remove any two occurrences of c from the string. You have to determine the minimum number of operations needed to make no letter appear more than once in the string. The first line contains a single string s (1 ≤ |s| ≤ 1000). Print a single integer — the minimum number of operations needed. In the first sample, the string \\"aabb\\" can be transformed to \\"ab\\" in two operations: remove both \'a\'s and remove both \'b\'s. In the second sample, the string \\"aaabbbccc\\" can be transformed to \\"abc\\" in three operations: remove two \'a\'s, two \'b\'s, and two \'c\'s.","solution":"def min_operations(s: str) -> int: Given a string s consisting of lowercase letters, determines the minimum number of operations needed to make no letter appear more than once in the string. An operation consists of choosing a letter that appears at least twice in the string and removing any two occurrences of it. :param s: Input string consisting of lowercase letters. :return: Minimum number of operations needed. from collections import Counter # Count the occurrences of each character count = Counter(s) operations = 0 # For each character count, determine how many operations are needed for char, freq in count.items(): if freq > 1: operations += freq // 2 return operations"},{"question":"Marie is organizing a coding competition and she has n teams participating. Each team needs to be assigned a unique ID from 1 to n. During the registration process, each team provides Marie a list of their preferred IDs. Marie wants to assign these IDs in such a way that maximizes the number of teams getting their preferred IDs. However, some teams insist on no more than k teams getting their preferred IDs as this would ensure fair competition. Your task is to help Marie find the maximum number of teams that can get their preferred ID under these constraints. Input: The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n) - the number of teams and the maximum number of teams that can get their preferred IDs, respectively. Each of the next n lines contains a list of integers representing the preferred IDs of the ith team. The jth integer in the ith line is p_ij (1 ≤ p_ij ≤ n and 1 ≤ j ≤ n). Output: Print a single integer - the maximum number of teams that can get their preferred ID. Example: Input: 4 2 1 2 3 2 1 3 3 2 1 1 2 3 Output: 2 Explanation: In this example, assigning the IDs as follows will maximize the number of teams that get one of their preferred IDs without exceeding the limit of k=2: - Team 1 gets ID 1 (preferred) - Team 2 gets ID 2 (preferred) - Team 3 gets ID 3 (not preferred, since teams 1 and 2 exhausted the limit) - Team 4 gets ID 2 (preferred) Thus, the maximum number of teams that can get their preferred ID is 2.","solution":"def max_preferred_teams(n, k, preferences): from collections import defaultdict, Counter import heapq # Priority queue to hold the teams\' preferences pref_heap = [] for i in range(n): for pref in preferences[i]: heapq.heappush(pref_heap, (preferences[i].index(pref), i, pref)) # Counter for how many times each ID is assigned based on preference id_count = Counter() # To keep track of how many teams have received their preferred ID satisfied_teams = 0 # Processing the heap while pref_heap and satisfied_teams < k: _, team, preferred_id = heapq.heappop(pref_heap) if id_count[preferred_id] < k: id_count[preferred_id] += 1 satisfied_teams += 1 return satisfied_teams # Example usage: # n, k = 4, 2 # preferences = [ # [1, 2, 3], # [2, 1, 3], # [3, 2, 1], # [1, 2, 3] # ] # print(max_preferred_teams(n, k, preferences)) # Output: 2"},{"question":"Anastasia just moved to a new apartment and wants to arrange her book collection on a single shelf. She has n books, each with a unique width and a specific genre. The books can be categorized into c different genres. Anastasia wants to arrange the books in such a way that no two adjacent books have the same genre to avoid clustering similar books together. The task is to determine if it\'s possible to arrange all the books on the shelf to satisfy the given condition. If it\'s possible, print \\"YES\\"; otherwise, print \\"NO\\". The first line contains two integers n and c (1 ≤ n ≤ 1000, 1 ≤ c ≤ 100) — the number of books and the number of genres. The next line contains n integers, where each integer is between 1 and c (inclusive), representing the genre of each book. Print \\"YES\\" if it\'s possible to arrange the books such that no two adjacent books have the same genre, otherwise print \\"NO\\". Here is the format for the input and output: **Input:** ``` 5 3 1 2 1 2 3 ``` **Output:** ``` YES ```","solution":"def can_arrange_books(n, c, genres): from collections import Counter # Get number of books for each genre genre_counts = Counter(genres) # Find the maximum number of books in the same genre max_count = max(genre_counts.values()) # If the max_count is more than half of the total length, it is impossible to arrange # (since at least two of such genre would have to be adjacent) if max_count > (n + 1) // 2: return \\"NO\\" else: return \\"YES\\""},{"question":"A city is reinventing its public transportation system, and they are designing a new bus route. There are n bus stops in the city, each represented by a unique number from 1 to n. The city\'s transportation department has provided you with a list of pair of bus stops that are directly connected by a bus route. Due to practical constraints, there are no duplicate routes and no route connects a bus stop to itself. Your task is to find out whether it is possible to travel from the first bus stop (bus stop 1) to any other bus stop using the given routes. If it is possible, you should indicate whether you can create an itinerary (a sequence of bus stops) that allows traveling from bus stop 1 to bus stop x and then returning to bus stop 1 without visiting any bus stop more than once. The input consists of: - An integer n (1 ≤ n ≤ 10^5) — the number of bus stops. - An integer m (1 ≤ m ≤ 2*10^5) — the number of routes between the bus stops. - m lines, each containing two integers u and v (1 ≤ u, v ≤ n) — indicating a direct route between bus stop u and bus stop v. Output \\"YES\\" if it is possible to create such an itinerary for bus stop x and back to bus stop 1 without revisiting bus stops, and \\"NO\\" otherwise. # Sample Input 1 ``` 4 4 1 2 2 3 3 4 4 1 ``` # Sample Output 1 ``` YES ``` # Sample Input 2 ``` 5 4 1 2 1 3 3 4 4 5 ``` # Sample Output 2 ``` NO ``` Explanation: For the first example, it is possible to travel from bus stop 1 to bus stop 4 and return to bus stop 1: 1 -> 2 -> 3 -> 4 -> 1 For the second example, although it is possible to travel from bus stop 1 to bus stops 2, 3, 4, and 5, it is not possible to return to bus stop 1 without revisiting any bus stop.","solution":"def can_create_itinerary(n, m, routes): from collections import defaultdict, deque def bfs(start, graph): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return visited # Build the graph graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in routes: graph[u].append(v) reverse_graph[v].append(u) # Check if all nodes are reachable from node 1 visited_from_1 = bfs(1, graph) # Check if all nodes can reach node 1 reachable_to_1 = bfs(1, reverse_graph) for i in range(1, n + 1): if not visited_from_1[i] or not reachable_to_1[i]: return \\"NO\\" return \\"YES\\""},{"question":"Little Ada likes to play with strings and numbers. She came up with a sophisticated game that involves converting numbers into their Roman numeral representations and vice-versa. Roman numerals follow a special system and are composed of the following symbols with corresponding values: - `I` (1) - `V` (5) - `X` (10) - `L` (50) - `C` (100) - `D` (500) - `M` (1000) Ada challenges you to write a function that can convert an integer to a Roman numeral and a Roman numeral to an integer efficiently. Given a number n (1 ≤ n ≤ 3999) or a valid Roman numeral consisting of characters from the set `{\'I\', \'V\', \'X\', \'L\', \'C\', \'D\', \'M\'}`, your task is to perform the conversion accordingly. # Input - The first line contains a string `mode` which is either \\"INT_TO_ROMAN\\" or \\"ROMAN_TO_INT\\" indicating the conversion mode. - The second line contains the integer `n` (if the mode is \\"INT_TO_ROMAN\\") or the Roman numeral string `s` (if the mode is \\"ROMAN_TO_INT\\"). # Output - For the mode \\"INT_TO_ROMAN\\", output a single line with the Roman numeral representation of the integer `n`. - For the mode \\"ROMAN_TO_INT\\", output a single line with the integer representation of the Roman numeral string `s`. # Example Input ``` INT_TO_ROMAN 1994 ``` Output ``` MCMXCIV ``` Input ``` ROMAN_TO_INT MCMXCIV ``` Output ``` 1994 ``` # Note - Ensure your implementation handles all edge cases, such as the smallest value (1 or \\"I\\") and the largest value (3999 or \\"MMMCMXCIX\\"). - Ensure the function is efficient and well-optimized.","solution":"def int_to_roman(n): Converts an integer to a Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while n > 0: for _ in range(n // val[i]): roman_num += syms[i] n -= val[i] i += 1 return roman_num def roman_to_int(s): Converts a Roman numeral to an integer. roman = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} num = 0 for i in range(len(s)): if i > 0 and roman[s[i]] > roman[s[i - 1]]: num += roman[s[i]] - 2 * roman[s[i - 1]] else: num += roman[s[i]] return num def convert(mode, value): if mode == \\"INT_TO_ROMAN\\": return int_to_roman(int(value)) elif mode == \\"ROMAN_TO_INT\\": return roman_to_int(value) else: raise ValueError(\\"Invalid mode\\")"},{"question":"A zoo has a unique way of organizing animals for visitors. Each animal is placed in one of a series of enclosures arranged in a straight line. The zoo management wants to ensure that certain animals remain in dedicated positions relative to each other for informative tours. They plan to do so by rearranging the animals according to specific fixed positions. Initially, you are given a list of animal names in a specific order representing the initial arrangement in enclosures. Additionally, you are given a list of fixed pairs of the form (animal1, animal2) that specify that animal1 should always appear to the left of animal2 in the final arrangement. Write a function that determines if it is possible to rearrange the animals such that all the given fixed pairs\' conditions hold true. If it is possible, return any valid arrangement of animals. If it is not possible, return \\"IMPOSSIBLE\\". The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of animals. The second line contains n space-separated strings — the names of the animals in their initial order. The third line contains an integer m (0 ≤ m ≤ 2 * 10^5) — the number of fixed pairs. Each of the next m lines contains two space-separated strings — animal1 and animal2, indicating that animal1 should appear to the left of animal2. If it is possible to reorder the animals such that all conditions hold true, output a single line containing the names of the animals in the valid order separated by spaces. If there are multiple valid orders, output any of them. If it is impossible, output \\"IMPOSSIBLE\\". **Example:** ``` Input 5 lion tiger bear zebra giraffe 3 lion tiger bear zebra lion zebra Output lion tiger bear zebra giraffe ``` Explanation: In this example, the conditions are: - lion should be to the left of tiger, - bear should be to the left of zebra, - lion should be to the left of zebra. A valid arrangement that satisfies all conditions is \\"lion tiger bear zebra giraffe\\".","solution":"from collections import deque, defaultdict def animal_arrangement(n, animals, m, fixed_pairs): # Step 1: Initialize in-degrees and adjacency list in_degree = {animal: 0 for animal in animals} adj_list = defaultdict(list) # Step 2: Populate the adjacency list and in-degrees for a1, a2 in fixed_pairs: adj_list[a1].append(a2) in_degree[a2] += 1 # Step 3: Use Kahn\'s algorithm for topological sorting zero_indegree = deque([animal for animal in animals if in_degree[animal] == 0]) ordered_animals = [] while zero_indegree: animal = zero_indegree.popleft() ordered_animals.append(animal) for neighbor in adj_list[animal]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_indegree.append(neighbor) # Check if topological sort is possible (all nodes should be processed) if len(ordered_animals) == n: return \\" \\".join(ordered_animals) else: return \\"IMPOSSIBLE\\" # The function expects the input parameters directly rather than from standard input # Example usage: # n = 5 # animals = [\\"lion\\", \\"tiger\\", \\"bear\\", \\"zebra\\", \\"giraffe\\"] # m = 3 # fixed_pairs = [(\\"lion\\", \\"tiger\\"), (\\"bear\\", \\"zebra\\"), (\\"lion\\", \\"zebra\\")] # print(animal_arrangement(n, animals, m, fixed_pairs))"},{"question":"You are given a list of n integers. Your task is to find a pair of integers in this list such that the absolute difference between them is minimized. The first line of input contains a single integer t (1 le t le 1000) — the number of test cases. For each test case: The first line contains a single integer n (2 le n le 10^5) — the number of integers in the list. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the list. Print a single integer — the minimum absolute difference between any two integers in the list for each test case. For example: Input 3 5 1 5 3 19 18 4 10 20 30 40 2 1 1000000000 Output 1 10 999999999","solution":"def min_absolute_difference(test_cases): results = [] for t in test_cases: n, integers = t integers.sort() min_diff = float(\'inf\') for i in range(1, n): min_diff = min(min_diff, abs(integers[i] - integers[i-1])) results.append(min_diff) return results"},{"question":"You are given two strings, s1 and s2, both of the same length n. Each string consists of lowercase Latin letters. Your task is to determine the minimum number of adjacent swaps needed to transform string s1 into string s2. A swap operation consists of choosing any two adjacent characters in the string and swapping them. If it is not possible to transform s1 into s2 using any number of swaps, return -1. # Input The first line contains an integer n (1 ≤ n ≤ 1000) – the length of the strings s1 and s2. The second line contains the string s1. The third line contains the string s2. # Output Output a single integer – the minimum number of adjacent swaps required to transform s1 into s2, or -1 if it is not possible. # Example Example 1 # Input: ``` 5 abcde edcba ``` # Output: ``` 10 ``` Example 2 # Input: ``` 3 abc def ``` # Output: ``` -1 ``` # Note In the first example, one possible way to transform \\"abcde\\" into \\"edcba\\" with a minimum of 10 adjacent swaps involves the following operations: 1. Swap \'d\' and \'e\' -> abced 2. Swap \'c\' and \'e\' -> abecd 3. Swap \'b\' and \'e\' -> aebcd 4. Swap \'a\' and \'e\' -> eabcd 5. Swap \'b\' and \'c\' -> eacbd 6. Swap \'c\' and \'d\' -> eabdc 7. Swap \'b\' and \'d\' -> eadbc 8. Swap \'a\' and \'d\' -> edabc 9. Swap \'a\' and \'b\' -> edbac 10. Swap \'b\' and \'c\' -> edcba In the second example, since the characters in \\"def\\" are different from those in \\"abc\\", transformation is not possible, so the output is -1.","solution":"def min_adjacent_swaps(s1, s2): Returns the minimum number of adjacent swaps required to transform string s1 into string s2, or -1 if it is not possible. if sorted(s1) != sorted(s2): return -1 n = len(s1) swaps = 0 s1 = list(s1) for i in range(n): if s1[i] != s2[i]: j = i while s1[j] != s2[i]: j += 1 while j > i: s1[j], s1[j-1] = s1[j-1], s1[j] swaps += 1 j -= 1 return swaps"},{"question":"An explorer named Bob is planning an expedition in a dense forest. The forest can be represented as a grid of size n times m. Each cell in the grid either contains an obstacle (denoted by \'#\') or is free (denoted by \'.\'). Bob starts at the top-left corner of the grid (1, 1) and wants to reach the bottom-right corner (n, m). Bob can move up, down, left, or right, but he cannot pass through obstacles. Bob wants to know if there is a path from the top-left corner to the bottom-right corner, and if such a path exists, he also wants to find the minimum number of moves required to reach his destination. Your task is to write a program that determines if Bob can reach the bottom-right corner of the grid, and if possible, calculates the minimum number of moves required. # Input - The first line contains two integers n and m (1 le n, m leq 1000), the dimensions of the grid. - The next n lines each contain a string of length m, representing the forest grid. # Output - If there is no path from the top-left corner to the bottom-right corner, print -1. - Otherwise, print the minimum number of moves required to reach the bottom-right corner. # Example Input ``` 5 5 ..... .#... .#.#. ...#. ...#. ``` Output ``` 8 ``` Input ``` 3 3 .#. .#. .#. ``` Output ``` -1 ``` # Note In the first example, the path that Bob can take is: ``` (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) -> (4,4) -> (5,4) -> (5,5) ``` This path has 8 moves. In the second example, it is impossible for Bob to reach the bottom-right corner since all paths are blocked by obstacles.","solution":"from collections import deque def min_moves_in_forest(n, m, forest): if forest[0][0] == \'#\' or forest[n-1][m-1] == \'#\': return -1 # Directions for up, down, left, and right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS, starting with the beginning position queue = deque([(0, 0)]) # Dictionary to keep track of visited cells and distance from start visited = {(0, 0): 0} while queue: x, y = queue.popleft() # If we reached the bottom-right corner, return the distance if (x, y) == (n-1, m-1): return visited[(x, y)] # Explore all possible moves from the current position for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and forest[nx][ny] == \'.\' and (nx, ny) not in visited: visited[(nx, ny)] = visited[(x, y)] + 1 queue.append((nx, ny)) # If we exhausted all possibilities and didn\'t reach the end, return -1 return -1"},{"question":"You are given an array of integers of length n. You are required to sort the array in ascending order using the minimum number of operations. In one operation, you can select a subarray consisting of consecutive elements and reverse it. Write a function that returns the minimum number of operations required to sort the array. Function Signature: ```python def min_operations_to_sort_array(n: int, arr: List[int]) -> int: ``` Input: - An integer n (1 leq n leq 10^5), the length of the array. - An array arr of n integers (1 leq arr[i] leq 10^9). Output: - An integer representing the minimum number of operations required to sort the array. Example: Input: ``` 5 [3, 1, 2, 5, 4] ``` Output: ``` 2 ``` Explanation: One possible sequence of operations to sort the array could be: 1. Reverse the subarray [1, 2, 3], resulting in [1, 2, 3, 5, 4]. 2. Reverse the subarray [4, 5], resulting in [1, 2, 3, 4, 5]. Thus, a minimum of 2 operations is required.","solution":"def min_operations_to_sort_array(n, arr): Returns the minimum number of operations required to sort the array by reversing subarrays. sorted_arr = sorted(arr) if arr == sorted_arr: return 0 l = 0 while l < n and arr[l] == sorted_arr[l]: l += 1 r = n - 1 while r >= 0 and arr[r] == sorted_arr[r]: r -= 1 reversed_section = arr[l:r+1][::-1] if sorted_arr[l:r+1] == reversed_section: return 1 else: return 2"},{"question":"You are given an array of integers. Your task is to find out if it is possible to rearrange the elements of the array so that the array becomes a sequence of consecutive integers. An array is considered a sequence of consecutive integers if there is no integer \\"i\\" (where 1 <= i < n) that is missing between the minimum and maximum values in the array. The first line of input contains a single integer n (1 ≤ n ≤ 100), the length of the array. The second line contains n space-separated integers a_i (−10^5 ≤ a_i ≤ 10^5), the elements of the array. Output \\"YES\\" if it is possible to rearrange the elements of the array to form a sequence of consecutive integers. Otherwise, output \\"NO\\" (quotes for clarity only). # Examples Input: ``` 5 1 4 3 2 5 ``` Output: ``` YES ``` Input: ``` 4 1 2 4 6 ``` Output: ``` NO ``` Input: ``` 3 10 12 11 ``` Output: ``` YES ``` # Explanation In the first example, the sequence can be arranged as [1, 2, 3, 4, 5] which are consecutive numbers. In the second example, there is no way to rearrange [1, 2, 4, 6] to get a full sequence of consecutive numbers - 3 and 5 are missing. In the third example, the sequence [10, 11, 12] is already a sequence of consecutive integers.","solution":"def can_arrange_consecutive(n, arr): Determines if the array can be rearranged to form a sequence of consecutive integers. Parameters: n (int): The length of the array. arr (list of int): The elements of the array. Returns: str: \\"YES\\" if the array can be rearranged to a sequence of consecutive integers, otherwise \\"NO\\". min_val = min(arr) max_val = max(arr) # Check if the number of unique elements matches the expected count of consecutive numbers if max_val - min_val + 1 == n and len(set(arr)) == n: return \\"YES\\" else: return \\"NO\\""},{"question":"A group of merchants decided to set up a secret communication system using a sequence of signals represented by numbers. Each merchant has a sequence of numbers, and they need to ensure that their sequences are as unique as possible to avoid interception. The uniqueness of a sequence is determined by the length of its longest increasing subsequence. Your task is to write a function that, given a list of integers, calculates the length of the longest strictly increasing subsequence in a sequence. This helps the merchants understand how distinct their sequence is compared to others. The first input line contains an integer n (1 ≤ n ≤ 10^5), which indicates the number of elements in the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the sequence of numbers. Print a single integer — the length of the longest strictly increasing subsequence of the given sequence. **Example Input:** ``` 7 10 22 9 33 21 50 41 ``` **Example Output:** ``` 4 ``` In the example given, the longest strictly increasing subsequence is [10, 22, 33, 50] which has a length of 4.","solution":"from bisect import bisect_left def length_of_lis(sequence): Returns the length of the longest increasing subsequence in the given sequence. if not sequence: return 0 lis = [] for element in sequence: pos = bisect_left(lis, element) if pos == len(lis): lis.append(element) else: lis[pos] = element return len(lis)"},{"question":"Given a rectangular grid with ( n times m ) cells, you need to move from the cell in the top left corner (1, 1) to the cell in the bottom right corner (n, m). You can only move either to the right or down at each step. However, some cells may be blocked, meaning you cannot step on them. The grid is described in the following way: - An open cell is represented by a \'.\' - A blocked cell is represented by a \'#\' You need to determine if it is possible to reach the cell in the bottom right corner from the cell in the top left corner. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". The first line contains two integers ( n ) and ( m ) (1 leq n, m leq 1000) — the dimensions of the grid. The next ( n ) lines contain ( m ) characters each — the description of the grid. Output \\"YES\\" if there is a way to reach the bottom right corner from the top left corner by only moving right or down through open cells. Otherwise, output \\"NO\\". # Examples Example 1 Input: ``` 3 3 ..# .#. ... ``` Output: ``` YES ``` Example 2 Input: ``` 3 3 ..# # ..# ``` Output: ``` NO ``` # Input Parameters - ( n, m ) (1 leq n, m leq 1000) # Output Format Output a single line which is either \\"YES\\" or \\"NO\\". # Explanation In the first example, there are two possible ways to reach the bottom right corner: (1, 1) → (1, 2) → (2, 2) → (3, 2) → (3, 3), and (1, 1) → (2, 1) → (3, 1) → (3, 2) → (3, 3). In the second example, there is no way to reach the bottom right corner from the top left corner without stepping on a blocked cell.","solution":"def can_reach_bottom_right(n, m, grid): Determines if it\'s possible to reach the bottom-right corner of the grid starting from the top-left corner, moving only right or down, avoiding blocked cells. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" visited = [[False]*m for _ in range(n)] def dfs(x, y): if x >= n or y >= m or grid[x][y] == \'#\' or visited[x][y]: return False if x == n-1 and y == m-1: return True visited[x][y] = True return dfs(x+1, y) or dfs(x, y+1) return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Your bakery delivers different types of cakes to customers and each customer has different needs. You have sales data that shows the number of cakes of each type delivered to a particular customer. But sometimes, due to data corruption or system glitches, the record ends up with negative values. To fix such issues, you want to replace any negative number of cakes delivered with zero and provide a corrected list of deliveries. You are given an integer array of length n representing the number of cakes delivered of each type. Your task is to replace any negative number with zero and then return the corrected list. Additionally, provide the total number of cakes delivered after corrections. # Input The first line contains a single integer n (1 le n le 10^5), representing the number of cake types. The second line contains n integers separated by spaces, where the i-th integer a_i (-10^9 le a_i le 10^9) represents the number of cakes delivered of the i-th type. # Output Output should consist of two lines: 1. The first line should contain n integers separated by spaces representing the corrected list of cakes delivered. 2. The second line should contain a single integer representing the total number of cakes delivered after corrections. # Example Input ``` 5 10 -3 4 -8 7 ``` Output ``` 10 0 4 0 7 21 ``` # Explanation In the given example, the negative values -3 and -8 are replaced with 0. The corrected list becomes [10, 0, 4, 0, 7] and the total number of cakes delivered after correction is 21.","solution":"def correct_cake_deliveries(n, deliveries): Corrects the list of deliveries by replacing negative numbers with zero and returns the corrected list and total number of cakes delivered. corrected_deliveries = [max(0, x) for x in deliveries] total_delivered = sum(corrected_deliveries) return corrected_deliveries, total_delivered"},{"question":"Alice is preparing a party and wants to distribute invitations. She has a list of friends and each friend has a certain number of common friends who should all receive invitations. Alice wants to find out the minimum number of invitations she needs to send directly to ensure that all friends eventually receive an invitation. Each friend who receives an invitation will automatically send invitations to all their common friends. You are given n friends and m pairs of common friendships. Each friend can be represented by a number from 1 to n. The task is to compute the minimum number of invitations Alice needs to send directly to ensure all friends receive an invitation. The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of friends and the number of common friendships, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v), representing that friend u and friend v are common friends. Output a single integer — the minimum number of invitations Alice needs to send directly. Example: Input: 6 5 1 2 2 3 4 5 5 6 6 4 Output: 2 Explanation: Alice can send an invitation directly to friends 1 and 4. Friend 1 will invite friends 2 and 2 will invite friend 3, ensuring that friends 1, 2, and 3 receive an invitation. Similarly, friend 4 will invite friends 5 and 6, ensuring that friends 4, 5, and 6 receive an invitation. Thus, all friends receive an invitation with minimum of 2 direct invitations.","solution":"def minimum_invitations(n, m, friendships): from collections import defaultdict def dfs(node, visited, adj): stack = [node] while stack: curr = stack.pop() for neighbor in adj[curr]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) # Create adjacency list adj = defaultdict(list) for u, v in friendships: adj[u].append(v) adj[v].append(u) visited = set() components = 0 # Count the number of connected components in the graph for i in range(1, n + 1): if i not in visited: dfs(i, visited, adj) components += 1 return components"},{"question":"Vetya and his friends decided to play an interesting game. They chose a number N and each player in turn adds any integer from 1 to 9 (inclusive) to the current number. The game starts at zero, and the player who makes the number exactly equal to N wins. If the number exceeds N, the player loses immediately. Vetya is now in control, and he wants to avoid losing. Given that Vetya can go first, help him determine if he can guarantee a win if both players play optimally. The input contains one integer N (1 ≤ N ≤ 10^5). Output \\"YES\\" (quotes for clarity) if Vetya can guarantee a win with optimal play, otherwise output \\"NO\\" (quotes for clarity). Example input: ``` 10 ``` Example output: ``` YES ``` Explanation: The example scenario is analyzed as follows: - Vetya adds 1 to 9 in his first turn, and the remaining number for the next player ranges from 1 to 9. - No matter how optimally the second player plays, Vetya can always adjust his next move to ensure that he reaches 10 on his turn. Thus, Vetya can guarantee a win.","solution":"def vetya_wins(N): Determine if Vetya can guarantee a win if both players play optimally. # If N is 10 or less, Vetya can always win by choosing N. return \\"YES\\" if N <= 10 else \\"NO\\""},{"question":"John is preparing for a typing competition. The competition rules are simple: participants will be given a string consisting of lowercase Latin letters, and they need to type the string as fast as possible. However, every time they make a typo, they have to start typing the string from the beginning. John has developed a special technique for minimizing the number of typos. He plans to type the string character by character and track his errors. Given a string `s` of length `n` (1 le n le 2 cdot 10^5), John wants to know the maximum number of times he can type this string without making more than one typo. By definition, a typo occurs whenever John types a wrong letter. Your task is to write a program that determines the number of complete and error-free sequences John can type, and returns that number. Write a function `maximum_typing_sequences(s: str) -> int` that takes the string `s` as input and returns the maximum number of complete sequences John can type without making more than one typo. # Input - The input consists of a single line containing a string `s` (1 le |s| le 2 cdot 10^5), consisting of lowercase Latin letters. # Output - The output should be a single integer — the maximum number of complete sequences John can type without making more than one typo. # Examples Example 1: **Input:** ``` abcdabcd ``` **Output:** ``` 2 ``` **Explanation:** John can type \\"abcd\\" and then \\"abcd\\" again without making any typos. Example 2: **Input:** ``` abcabc ``` **Output:** ``` 2 ``` **Explanation:** John can type \\"abc\\" and then \\"abc\\" again without making any typos. Example 3: **Input:** ``` abca ``` **Output:** ``` 1 ``` **Explanation:** John can type \\"abca\\" only once without making any typos. # Note - It is guaranteed that the sum of the lengths of all test cases will not exceed 2 cdot 10^5 in a single execution. - John\'s technique allows him to type the string multiple times without errors as long as he does not make more than one typo during the entire typing session.","solution":"def maximum_typing_sequences(s: str) -> int: Returns the maximum number of complete and error-free sequences John can type without making more than one typo. :param s: Input string consisting of lowercase Latin letters :return: The maximum number of complete sequences John can type without making more than one typo. n = len(s) answer = 1 # John can always type the string at least once if no typo happens. for i in range(1, n): if s[i] == s[0]: # Check if the substring starting at position `i` equals the start of the string if s[:n-i] == s[i:]: answer = n // i break return answer"},{"question":"In a city, there are several regions connected by bidirectional roads. The government wants to ensure ease of access from any region to all other regions. This can be achieved via installing traffic hubs that must follow certain conditions: 1. Each region can be directly connected to at most one hub. 2. There should be at least one hub. 3. Every region in the city must have a path to a hub, either directly or indirectly through other regions. Your task is to determine the minimum number of hubs required to satisfy the above conditions or determine that it’s impossible to do so. The first input line contains a single integer ( t ) — the number of test cases (( 1 leq t leq 10^4 )). Each test case starts with two integers ( n ) and ( m ) (( 2 leq n leq 10^5 ), ( 0 leq m leq 10^5 )) — the number of regions and the number of bidirectional roads. Then follow ( m ) lines. Each line contains two integers ( u ) and ( v ) (( 1 leq u, v leq n ), ( u neq v )), indicating a road between region ( u ) and region ( v ). The sum of ( n ) over all test cases does not exceed ( 10^6 ), and the sum of ( m ) over all test cases does not exceed ( 10^6 ). Output the result for each test case: - Output \\"IMPOSSIBLE\\" if it\'s impossible to install the hubs following the conditions stated. - Otherwise, output \\"POSSIBLE\\" and the minimum number of hubs needed. # Example Input ``` 2 6 5 1 2 2 3 3 4 4 5 5 6 3 2 1 2 2 3 ``` Output ``` POSSIBLE 2 POSSIBLE 1 ``` # Explanation In the first test case, two hubs are needed: one could be at region 3 and one at region 4, ensuring all regions are covered. In the second test case, one hub at region 2 is sufficient to ensure all regions are covered.","solution":"from collections import defaultdict, deque def find_components_count(n, edges): visited = [False] * (n + 1) adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) def bfs(start_node): queue = deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) num_components = 0 for node in range(1, n + 1): if not visited[node]: bfs(node) num_components += 1 return num_components def process_cases(t, cases): results = [] for i in range(t): n, m = cases[i][0] edges = cases[i][1] if n == 2 and m == 0: results.append(\\"IMPOSSIBLE\\") continue num_components = find_components_count(n, edges) if num_components > 1: results.append(\\"IMPOSSIBLE\\") else: results.append(f\\"POSSIBLE {num_components}\\") return results"},{"question":"Alice is working on a project that involves analyzing various properties of strings. She is particularly interested in finding the longest palindrome that can be formed by reordering the characters of a given string. A palindrome is a string that reads the same forward and backward. For instance, \\"racecar\\" and \\"aabbaa\\" are palindromes, but \\"abc\\" and \\"aabbc\\" are not. Given a string of lowercase English letters, determine the length of the longest palindrome that can be formed using all or some of its characters. The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Print the length of the longest palindrome that can be formed using the characters of the given string. # Example: Input: ``` 7 abccbaa ``` Output: ``` 7 ``` Input: ``` 6 abccba ``` Output: ``` 6 ``` Note that in the first example, the string \\"abccbaa\\" can be reordered to form the palindrome \\"aabccba,\\" which has a length of 7. In the second example, \\"abccba\\" can be reordered to form the palindrome \\"abccba,\\" which has a length of 6.","solution":"from collections import Counter def longest_palindrome_length(n, s): Returns the length of the longest palindrome that can be formed using all or some of the characters of the given string. char_counts = Counter(s) length = 0 odd_found = False for count in char_counts.values(): # Add the even number of characters that can make up the palindrome. length += count // 2 * 2 # Check if there\'s an odd count character which can be placed in the middle. if count % 2 == 1: odd_found = True # Add one character in the middle if there was any odd count. if odd_found: length += 1 return length"},{"question":"You are given a list of intervals, where each interval is represented as a tuple containing two integers: the start and end points. Your task is to find the minimum number of intervals you need to remove so that the remaining intervals are non-overlapping. Two intervals [a, b] and [c, d] are considered overlapping if a < d and c < b. Note that two intervals touching at the borders do not count as overlapping. Implement a function `min_intervals_to_remove(intervals)` that takes in a list of intervals and returns the minimum number of intervals that need to be removed to make the rest of the intervals non-overlapping. # Input - intervals: A list of tuples `(start_i, end_i)` representing the intervals. # Output - An integer representing the minimum number of intervals to remove. # Example ```python print(min_intervals_to_remove([(1, 3), (2, 4), (3, 5)])) # Output: 1 print(min_intervals_to_remove([(1, 2), (2, 3), (3, 4)])) # Output: 0 print(min_intervals_to_remove([(1, 4), (2, 3), (3, 5)])) # Output: 1 ``` # Constraints - The list of intervals will have a length between 1 and 10^5. - Each interval\'s start and end points are integers between -10^5 and 10^5. # Note In the first example, the interval (2, 4) can be removed to make the rest non-overlapping.","solution":"def min_intervals_to_remove(intervals): Finds the minimum number of intervals to remove to make the rest non-overlapping. Args: intervals (list of tuples): A list of tuples where each tuple represents an interval (start, end). Returns: int: The minimum number of intervals to remove. if not intervals: return 0 # Sort intervals based on the end time intervals.sort(key=lambda interval: interval[1]) # Initialize the count of non-overlapping intervals non_overlapping_count = 0 # Initialize the end time of the last added interval to negative infinity end_time = float(\'-inf\') # Iterate through the intervals for interval in intervals: # If the current interval doesn\'t overlap with the last added interval, add it to the count if interval[0] >= end_time: non_overlapping_count += 1 end_time = interval[1] # The minimum number of intervals to remove is the total number of intervals minus the count of non-overlapping intervals return len(intervals) - non_overlapping_count"},{"question":"You are given a circular chain of n steel links and you need to color them according to the following rules: 1. There are exactly three colors available: Red (R), Green (G), and Blue (B). 2. No two adjacent links should have the same color. Given an integer n (3 ≤ n ≤ 100), write a program that determines the colors of the links in the order they are placed in the circular chain. Output a single line of n characters, where each character represents the color of the corresponding link. If there are multiple valid colorings, you may return any one of them. For example: Input ``` 5 ``` Output ``` RGBGR (or any valid configuration) ```","solution":"def color_chain(n): Function to determine the colors of the steel links in a circular chain. :param n: int - Number of links in the circular chain; 3 ≤ n ≤ 100. :return: str - A string representing the colors of the steel links. colors = [\'R\', \'G\', \'B\'] chain = [] for i in range(n): chain.append(colors[i % 3]) if n % 3 == 1: chain[-1], chain[-2] = chain[-2], chain[-1] return \'\'.join(chain)"},{"question":"You are given an array of integers a1, a2, ..., an. You have to perform q operations of the following types: 1. Reverse the subarray from index l to r (inclusive). 2. Report the sum of the elements in the subarray from index l to r (inclusive). The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of elements in the array and the number of operations. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of the array. Each of the following q lines describes an operation and is in one of the following formats: - \\"R l r\\" (1 ≤ l ≤ r ≤ n) — reverse the subarray from index l to r - \\"S l r\\" (1 ≤ l ≤ r ≤ n) — report the sum of the elements in the subarray from index l to r Output the sum for each \\"S\\" operation on a new line. **Example input:** ``` 5 3 1 2 3 4 5 R 2 4 S 1 5 S 2 4 ``` **Example output:** ``` 1 4 3 2 5 15 9 ```","solution":"def process_operations(n, q, array, operations): Processes the given operations on the array and returns the results for each sum operation. Parameters: n (int): Number of elements in the array q (int): Number of operations array (list of int): The array of elements operations (list of str): List of operations to perform Returns: list of int: List of results for the sum operations results = [] for op in operations: parts = op.strip().split() if parts[0] == \\"R\\": l, r = int(parts[1]), int(parts[2]) # Perform reverse operation array[l-1:r] = array[l-1:r][::-1] elif parts[0] == \\"S\\": l, r = int(parts[1]), int(parts[2]) # Calculate sum of the subarray results.append(sum(array[l-1:r])) return results"},{"question":"Farmer John has a peculiar way of farming. He measures the productivity of his crops based on the number of cows crossing his farm fields. Farmer John\'s farm is represented by a straight line, and there are n fields located at different points along this line. Each field initially has 0 cows. Every day, Farmer John can perform an operation where he moves a cow from one field to an adjacent field. Specifically, if the cow is in the field at position xi, it can be moved to either xi-1 or xi+1. The goal is to achieve a desired distribution of cows among the fields given the initial distribution and the maximum number of moves Farmer John can make each day. You need to determine whether it\'s possible to achieve the target cow distribution within the given number of days k. The first line contains three integers n, k, d (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5, 1 ≤ d ≤ 10^9) — the number of fields, the maximum number of moves Farmer John can make in a day, and the number of days until the target distribution needs to be achieved. The second line contains n integers ai (0 ≤ ai ≤ 10^9) — the initial number of cows in the i-th field. The third line contains n integers bi (0 ≤ bi ≤ 10^9) — the desired number of cows in the i-th field. Print \\"YES\\" if it\'s possible to achieve the desired distribution within the given constraints, and \\"NO\\" otherwise. # Example Input 3 3 2 1 0 1 0 2 0 Output YES Explanation On Day 1, Farmer John can move the cow from the first field to the second field and the cow from the third field to the second field. On Day 2, he can move one cow from the second field to the first field. Hence, the desired distribution is achieved within 2 days.","solution":"def can_achieve_distribution(n, k, d, initial_dist, target_dist): Determine if the desired cow distribution can be achieved within given constraints. Args: n (int): number of fields k (int): maximum number of moves per day d (int): number of days available initial_dist (list): initial number of cows in each field target_dist (list): target number of cows in each field Returns: str: \\"YES\\" if the desired distribution can be achieved, \\"NO\\" otherwise total_initial_cows = sum(initial_dist) total_target_cows = sum(target_dist) if total_initial_cows != total_target_cows: return \\"NO\\" required_moves = sum(abs(initial_dist[i] - target_dist[i]) for i in range(n)) if required_moves <= k * d: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of n integers, and a subsequence of this array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Your task is to find the length of the shortest subsequence that does not contain two consecutive identical integers. Input: 1. An integer n (1 ≤ n ≤ 10^5), the number of elements in the array. 2. An array of n integers, where each integer is between 1 and 10^9. Output: Print the length of the shortest subsequence that does not contain two consecutive identical integers. Example: Input: 7 1 2 2 3 3 3 4 Output: 5 Explanation: One possible shortest subsequence without consecutive identical integers is [1, 2, 3, 4]. So, the length is 4.","solution":"def shortest_subsequence_length(n, arr): Returns the length of the shortest subsequence that does not contain two consecutive identical integers from the given array. if n == 0: return 0 previous = None length = 0 for num in arr: if num != previous: length += 1 previous = num return length"},{"question":"A group of rabbits live in a forest. Each rabbit has a colored fur coat. The rabbits can stand in a line such that no two adjacent rabbits have the same colored fur coat. You need to determine the number of ways the rabbits can form such a line. The first line contains a positive integer n (2 ≤ n ≤ 105) — the number of rabbits. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1000) — the color of the fur coat of each rabbit. Print the number of distinct ways the rabbits can stand in line such that no two adjacent rabbits have the same fur coat color. If no such arrangement exists, print 0. Note: Two ways are considered distinct if the order of rabbits in the line is different.","solution":"def count_ways_to_line_rabbits(n, colors): # If all rabbits have the same color, there\'s no valid way to line them up if len(set(colors)) == 1: return 0 dp = [1] * n for i in range(1, n): if colors[i] == colors[i-1]: dp[i] = 0 else: dp[i] = dp[i-1] # The result is basically the product of the dp values with modification inside if any(dp[i] == 0 for i in range(1, n)): return 0 total_ways = 1 for i in range(1, n): if colors[i] != colors[i-1]: total_ways *= 2 return total_ways"},{"question":"There are several places on the map linked by bidirectional roads in such a way that each place is reachable from every other place. You are given the description of the roads in the form of a weighted graph, where each road has a certain distance. You are a delivery person and need to deliver packages along a specific route. Given a sequence of places that you need to visit in order, determine the smallest additional distance you need to travel if you start at the first place in the sequence and follow the order until the last place in the sequence. You are allowed to use any of the existing roads between any two places in the sequence, even if they are not direct neighbors in the sequence. More formally, you are given a weighted undirected graph with `n` nodes and `m` edges and a sequence of `k` places. Find the minimum cost to travel from the first place in the sequence to the last place visiting all specified places in the given order. # Input - The first line contains three integers `n`, `m`, and `k` (2 leq n leq 10^3, 1 leq m leq 10^4, 2 leq k leq n) - the number of places, the number of roads, and the number of places in the sequence, respectively. - The next `m` lines each contain three integers `u`, `v`, and `w` (1 leq u, v leq n, 1 leq w leq 10^9) that describe a road between places `u` and `v` with distance `w`. - The last line contains `k` integers, the sequence of places `p1, p2, ..., pk` (1 leq p_i leq n), which represent the sequence of places you need to visit. # Output Print a single integer, the minimum distance needed to complete the specified route. # Example Input ``` 5 6 4 1 2 3 1 3 5 2 3 4 2 5 6 3 4 2 4 5 1 1 3 4 5 ``` Output ``` 7 ``` In this example, the sequence of places is [1, 3, 4, 5]. The best route is 1 -> 3 (distance 5), 3 -> 4 (distance 2), and 4 -> 5 (distance 1), for a total distance of 8. Thus, the output is 8.","solution":"import heapq def dijkstra(graph, start_node, n): Dijkstra\'s algorithm to find the shortest path from a start node to all other nodes. distances = [float(\'inf\')] * (n + 1) distances[start_node] = 0 pq = [(0, start_node)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def minimum_travel_distance(n, m, k, roads, sequence): graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) total_distance = 0 for i in range(k - 1): from_node = sequence[i] to_node = sequence[i + 1] distances = dijkstra(graph, from_node, n) total_distance += distances[to_node] return total_distance"},{"question":"People in a village have collected a large amount of popcorn during a festival. They plan to arrange the popcorn in a sequence of equal piles in a field. They want to find the maximum number of equal piles they can form such that each pile contains at least one unit of popcorn. Each pile should be formed by repeatedly selecting some consecutive subsequence of the piles already present and dividing it equally among them. You are given the number of test cases. For each test case, you are given an integer array representing the number of units of popcorn in n piles. Write a program to determine the maximum number of equal piles that can be formed from these piles. # Input - The first line contains an integer t (1 le t le 10^4) - the number of test cases. - Each of the next t test cases: - The first line contains an integer n (1 le n le 10^5). - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) - the current piles of popcorn. It is guaranteed that the sum of n over all test cases does not exceed 10^5. # Output For each test case, output the maximum number of equal piles that can be formed such that each pile contains at least one unit of popcorn. # Example Input ``` 3 5 1 2 3 4 5 4 4 4 4 4 6 1 3 2 6 4 2 ``` Output ``` 5 4 2 ``` # Explanation - In the first test case, the maximum number of piles is 5 since each pile contains 1, 2, 3, 4, and 5 units respectively, which is already the best arrangement. - In the second test case, everyone is already equally distributed. - In the third test case, the optimal arrangement would distribute the popcorn equitably into two groups such that the sums are equal.","solution":"def max_equal_piles(num_tests, test_cases): results = [] for test in test_cases: n, a = test results.append(n) return results"},{"question":"You are programming a new feature for an online chat application that supports sending, receiving, and editing messages. Each message in a conversation is represented as a structure with the following attributes: `id`, `timestamp`, and `content`. Messages share the same identifiers if they are edits of the same original message. The message `timestamp` indicates the moment the message was sent or edited. You need to implement a function that verifies the integrity of the conversation by ensuring no two messages with the same `id` have identical `timestamp` values, which would indicate a data inconsistency (e.g., two different edits of a message having the same timestamp). Additionally, the function should return the earliest version of each message. Write a function `verify_and_earliest(messages)` that takes a list of tuples representing the messages, in which each tuple contains three elements: an integer `id`, an integer `timestamp`, and a string `content`. The function should return a list of strings representing the contents of the earliest version of each unique message `{id}` sorted by `timestamp`. If any `id` has non-unique `timestamps`, the function should return an empty list indicating inconsistent data. # Input: - `messages`: List of tuples where each tuple is of the form `(id, timestamp, content)` # Output: - If no `id` has non-unique `timestamps`, return a list of strings representing the earliest version of each unique message `{id}` sorted by `timestamp`. - If any `id` has non-unique `timestamps`, return an empty list. # Example: **Input:** ```python messages = [(1, 10, \\"Hello\\"), (2, 15, \\"How are you?\\"), (1, 20, \\"Hello there\\"), (3, 15, \\"Just checking\\"), (2, 18, \\"How have you been?\\"), (3, 25, \\"Checking again\\")] ``` **Output:** ```python [\\"Hello\\", \\"How are you?\\", \\"Just checking\\"] ``` **Explanation:** - Message `id` 1 has timestamps 10, 20 with earliest content \\"Hello\\". - Message `id` 2 has timestamps 15, 18 with earliest content \\"How are you?\\". - Message `id` 3 has timestamps 15, 25 with earliest content \\"Just checking\\". - The function correctly identified the earliest version of each message. # Constraints: - Each `id` is a positive integer. - Each `timestamp` is a positive integer. - `content` may contain any printable characters. - The length of `messages` list will not exceed 10^6.","solution":"def verify_and_earliest(messages): from collections import defaultdict message_timestamp = defaultdict(set) earliest_version = {} for message_id, timestamp, content in messages: if timestamp in message_timestamp[message_id]: return [] message_timestamp[message_id].add(timestamp) if message_id not in earliest_version or earliest_version[message_id][\'timestamp\'] > timestamp: earliest_version[message_id] = {\'timestamp\': timestamp, \'content\': content} result = sorted(earliest_version.values(), key=lambda x: x[\'timestamp\']) return [entry[\'content\'] for entry in result]"},{"question":"Given a string s of lowercase English letters and q queries, your task is to determine the minimal number of operations needed to make each substring mentioned in the queries a palindrome. An operation consists of changing any single character in the substring to another character. The first line contains the string s (1 ≤ |s| ≤ 100,000). The second line contains a single integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the following q lines contains two integers l and r (1 ≤ l ≤ r ≤ |s|), representing the range (inclusive) of the substring to consider. For each query, output the minimal number of operations needed to make the corresponding substring a palindrome. For example, for the string \\"abac\\" and the queries: 1 2 2 4 the expected output is: 1 1 Explanation: - For the first query, changing \'b\' to \'a\' makes \\"ab\\" a palindrome. - For the second query, changing \'b\' to \'c\' in the substring \\"bac\\" makes it \\"cac\\", which is a palindrome.","solution":"def minimal_palindrome_operations(s, queries): results = [] for l, r in queries: l -= 1 # converting to 0-based index r -= 1 count = 0 while l < r: if s[l] != s[r]: count += 1 l += 1 r -= 1 results.append(count) return results"},{"question":"You have an array of n integers and Q queries. For each query, you will be given two integers l and r, representing the 1-based indices of the array. You need to find the sum of the elements in the subarray from index l to index r (inclusive). The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. The third line contains an integer Q (1 ≤ Q ≤ 100,000) — the number of queries. The next Q lines contain the queries, each query is defined by two integers l and r (1 ≤ l ≤ r ≤ n), separated by spaces. For each query, output the sum of the elements of the subarray from index l to index r on a separate line.","solution":"def preprocess_array(array): Preprocess the array to create a prefix sum array. Parameters: array (list of int): The input array. Returns: list of int: The prefix sum array. prefix_sum = [0] * (len(array) + 1) for i in range(1, len(array) + 1): prefix_sum[i] = prefix_sum[i - 1] + array[i - 1] return prefix_sum def query_sum(prefix_sum, l, r): Returns the sum of the elements in the subarray from index l to r (1-based). Parameters: prefix_sum (list of int): The prefix sum array. l (int): The starting index of the subarray (1-based). r (int): The ending index of the subarray (1-based). Returns: int: The sum of elements in the subarray. return prefix_sum[r] - prefix_sum[l - 1] def process_queries(array, queries): Process the queries and return the results. Parameters: array (list of int): The input array. queries (list of tuple): The list of queries (tuples of (l, r)). Returns: list of int: The results of the queries. prefix_sum = preprocess_array(array) results = [] for l, r in queries: results.append(query_sum(prefix_sum, l, r)) return results"},{"question":"You are an astronaut currently on a mission to establish communication with Earth. Unfortunately, due to some technical issues, the signals you receive from Earth are distorted by adding a random positive integer to the original signal, causing a delay. You are provided with two integer arrays, `original` and `received`, both of size `n` (1 ≤ n ≤ 1000). The `original` array represents the expected times at which you should receive signals, and the `received` array represents the times at which you actually receive the signals. For each signal i (1 ≤ i ≤ n), the difference between `received[i]` and `original[i]` is always some positive integer delay. Your task is to identify the most frequent delay that could have possibly caused the distortion. Input: - The first line contains a single integer `n` — the number of signals. - The second line contains `n` integers — the `original` times. - The third line contains `n` integers — the `received` times. Output: - Print a single integer — the most frequent delay causing the distortion. If there are multiple most frequent delays, print the smallest one. Example: Input: ``` 6 1 2 3 4 5 6 3 4 5 6 7 8 ``` Output: ``` 2 ``` Explanation: In this example, each signal has an added delay of 2, making it the most frequent delay.","solution":"from collections import Counter def most_frequent_delay(n, original, received): Returns the most frequent delay which caused the distortion between original and received times. Parameters: n (int): Number of signals original (list of int): The expected times at which signals should be received received (list of int): The actual times at which signals were received Returns: int: The most frequent delay causing the distortion delays = [received[i] - original[i] for i in range(n)] delay_count = Counter(delays) most_frequent = delay_count.most_common() # Find the smallest delay with the highest frequency highest_frequency = most_frequent[0][1] possible_delays = [delay for delay, count in most_frequent if count == highest_frequency] return min(possible_delays) # Example usage: # n = 6 # original = [1, 2, 3, 4, 5, 6] # received = [3, 4, 5, 6, 7, 8] # print(most_frequent_delay(n, original, received)) # Output: 2"},{"question":"You are given an array `a` of `n` integers and an integer `k`. Your task is to determine whether there exists a subarray of length exactly `k` whose sum is divisible by `k`. The first line contains one integer `t` (1 le t le 10^4) — the number of test cases. The first line of each test case contains two integers `n` and `k` (1 le k le n le 2 cdot 10^5). The second line of each test case contains `n` integers `a_1, a_2, ..., a_n` (-10^9 le a_i le 10^9). It is guaranteed that the sum of `n` over all test cases does not exceed `2 cdot 10^5`. For each test case, output \\"YES\\" if there exists a subarray of length exactly `k` whose sum is divisible by `k`. Otherwise, output \\"NO\\".","solution":"def is_subarray_sum_divisible(t, test_cases): Determines for each test case whether there exists a subarray of length exactly k whose sum is divisible by k. Parameters: t (int): Number of test cases test_cases (list of tuples): Each tuple contains (n, k, array of n integers) Returns: list of str: \\"YES\\" or \\"NO\\" for each test case results = [] for n, k, a in test_cases: found = False current_sum = sum(a[:k]) if current_sum % k == 0: results.append(\\"YES\\") continue for i in range(k, n): current_sum += a[i] - a[i-k] if current_sum % k == 0: results.append(\\"YES\\") found = True break if not found: results.append(\\"NO\\") return results"},{"question":"Maria has a rectangular grid of cells with dimensions r times c. Some of the cells contain obstacles, making them impassable. Maria starts from the top-left cell (1, 1) and needs to reach the bottom-right cell (r, c). She can move up, down, left, or right, but cannot move diagonally or pass through cells with obstacles. Given the positions of obstacles on the grid, determine the minimum number of steps Maria must take to reach her destination. If it\'s impossible to reach the destination, return -1. # Input - The first line contains two integers r and c (1 leq r, c leq 100) — the number of rows and columns in the grid. - The second line contains a single integer k (0 leq k leq 100) — the number of obstacles. - The next k lines each contain two integers x_i and y_i (1 leq x_i leq r, 1 leq y_i leq c) — the positions of the obstacles. Each obstacle is unique and no obstacle is placed at the starting (1, 1) or ending (r, c) positions. # Output Print a single integer — the minimum number of steps required to move from the top-left cell to the bottom-right cell. If it is impossible to reach the destination, print -1. # Sample Input ``` 5 5 3 2 2 3 3 4 4 ``` # Sample Output ``` 8 ``` # Explanation In the given 5x5 grid with obstacles at positions (2, 2), (3, 3), and (4, 4), Maria can start at (1, 1) and reach (5, 5) with a minimum of 8 steps. The path can be visualized as follows (where \'X\' represents obstacles and \'.\' represents the path): ``` . . . . . . X . . . . . X . . . . . X . . . . . . ``` In this path, Maria takes the following steps: right, right, down, down, right, down, down, right. Thus, the total minimum steps required are 8.","solution":"from collections import deque def minimum_steps_to_reach_end(r, c, k, obstacles): grid = [[0] * c for _ in range(r)] for x, y in obstacles: grid[x-1][y-1] = 1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if (x, y) == (r-1, c-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < r and 0 <= ny < c and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given a grid of size n times m consisting of characters \'.\' and \'#\'. Each cell in the grid is either empty (represented by \'.\') or contains an obstacle (represented by \'#\'). You are initially located at the top-left corner of the grid (1, 1) and need to reach the bottom-right corner (n, m). You can move to an adjacent cell in the grid if that cell is empty (i.e., you can move right, left, up, down). If you enter a cell containing an obstacle, you will lose the game. Determine the minimum number of moves required to reach the bottom-right corner of the grid. If it\'s not possible to reach the bottom-right corner, print -1. The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. The next n lines each contain m characters representing the grid. Output the minimum number of moves required or -1 if it\'s not possible to reach the bottom-right corner. # Example Input: 5 5 . . . # . # . # . . . . . . # . # # . . . . . . . Output: 8 # Explanation One of the possible paths for this example is: 1. Move right 3 times to cell (1, 4) 2. Move down 1 time to cell (2, 4) 3. Move left 1 time to cell (2, 3) 4. Move down 2 times to cell (4, 3) 5. Move right 2 times to cell (4, 5) 6. Move down 1 time to cell (5, 5) Total moves: 3 + 1 + 1 + 2 + 2 + 1 = 10","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): # Helper function to check if a move is within grid boundaries and not an obstacle def is_valid_move(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # Directions for moving right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Queue to perform BFS from the starting position (0, 0) queue = deque([(0, 0, 0)]) # stores (x, y, current_distance) visited = set((0, 0)) # tracks visited cells while queue: x, y, distance = queue.popleft() # If we reach the bottom-right corner, return the distance if x == n - 1 and y == m - 1: return distance # Explore all possible moves for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, distance + 1)) # If we exhaust the queue without reaching the end, return -1 return -1"},{"question":"The kingdom of Zog is famous for its efficient communication network. Each town is represented as a node, and each road is represented as an edge between two nodes in a graph. Due to recent natural disasters, some roads have been destroyed, and the kingdom wants to ensure that information can still be disseminated efficiently throughout the kingdom. Given a list of towns and roads, your task is to determine the minimum number of repair operations required to ensure that every town is still reachable from any other town. A repair operation involves reconstructing one of the destroyed roads. The first line contains two integers n and m (2 ≤ n ≤ 100, 0 ≤ m ≤ 4950) — the number of towns and the number of destroyed roads, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating that there used to be a road between town u and town v. Print the minimum number of repairs required to ensure that all towns are still connected. If it is already connected, print 0. For example, in the first test case, with `n = 4` towns and `m = 2` destroyed roads between towns `1-2` and `3-4`, the network needs at least 1 repair operation to ensure full connectivity. Example input: 4 2 1 2 3 4 Example output: 1","solution":"def minimum_repairs(n, m, destroyed_roads): Returns the minimum number of repair operations required to ensure that every town is still reachable from any other town. from collections import defaultdict, deque def bfs(start, visited, adjacency_list): queue = deque([start]) visited[start] = True while queue: town = queue.popleft() for neighbor in adjacency_list[town]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # If there are no damaged roads and there are only towns, it is already connected if n == 1 or len(destroyed_roads) == 0: return 0 # Create adjacency list adjacency_list = defaultdict(list) for u, v in destroyed_roads: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = [False] * (n + 1) connected_components = 0 # Count the number of connected components for town in range(1, n + 1): if not visited[town]: bfs(town, visited, adjacency_list) connected_components += 1 # The minimum number of repairs needed is equal to the number of connected components minus 1 return connected_components - 1 # Example Usage # print(minimum_repairs(4, 2, [(1, 2), (3, 4)])) # Output should be 1"},{"question":"Farmer John has a rectangular field of N rows and M columns of cells. Each cell is either empty or has a fence. John wants to construct a chicken coop in the field. The coop must be a rectangular section of cells such that there are no fences within this section. Your task is to help John find the largest possible area of the chicken coop. The first line of the input contains two integers N and M (1 ≤ N, M ≤ 500) — the dimensions of the field. Each of the next N lines contains M characters forming a grid. Each character is either \'.\' (denotes an empty cell) or \'#\' (denotes a fence). Output a single integer — the area of the largest possible rectangular chicken coop in the field. # Example input: ``` 5 6 ....#. .... ...... .#..#. .... ``` # Example output: ``` 6 ``` # Explanation: The largest rectangular section without fences is: ``` ...... ...... ``` with area = 3 rows x 2 columns = 6.","solution":"def largest_coop_area(n, m, grid): # Initialize histogram height array heights = [0] * m max_area = 0 for row in grid: for col in range(m): heights[col] = heights[col] + 1 if row[col] == \'.\' else 0 max_area = max(max_area, max_histogram_area(heights)) return max_area def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area # Example usage: n = 5 m = 6 grid = [ \\"....#.\\", \\"....\\", \\"......\\", \\".#..#.\\", \\"....\\" ] # Expected output: 6 print(largest_coop_area(n, m, grid))"},{"question":"You have a row of houses numbered from 1 to n. Each house has a specific amount of gold coins stored in it. You are a thief planning to rob the houses. However, there\'s a rule: if you rob two consecutive houses, security will catch you. Given the amount of gold in each house, your task is to determine the maximum amount of gold you can rob without alerting the security system. The first line of the input contains a single integer n (1 le n le 100), representing the number of houses. The second line contains n space-separated integers representing the amount of gold coins in each of the houses. Every integer is between 1 and 1000. Output a single integer, the maximum amount of gold you can rob without alerting the security system. # Example **Input:** ``` 6 3 2 5 10 7 8 ``` **Output:** ``` 18 ``` **Explanation:** The optimal way to rob the houses would be to rob house 1, house 4, and house 6, which would give a total of 3 + 10 + 8 = 21.","solution":"def max_gold(n, gold): if n == 1: return gold[0] if n == 2: return max(gold[0], gold[1]) dp = [0] * n dp[0] = gold[0] dp[1] = max(gold[0], gold[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + gold[i]) return dp[-1] # Example usage n = 6 gold = [3, 2, 5, 10, 7, 8] print(max_gold(n, gold)) # Output should be 21"},{"question":"Tracy has a rectangular grid of size n times m. Each cell in the grid is either blocked or empty. Tracy can move from an empty cell to another empty cell horizontally or vertically. Due to an upcoming school project, Tracy has to place a set of computers in the grid. The requirement is that all computers must be placed in empty cells, and each computer must be able to reach every other computer by moving only through empty cells. Based on the current layout of the grid, determine if it\'s possible to place all computers such that they fulfill the above requirement. If it\'s possible, indicate \\"YES\\" and the positions of the computers; otherwise, indicate \\"NO\\". The first line of the input contains two integers n and m (1 le n, m le 500), the dimensions of the grid. The next n lines each contain a string of length m consisting of characters \'.\' or \'#\'. A \'.\' character represents an empty cell, and a \'#\' character represents a blocked cell. Output \\"YES\\" if it\'s possible to place the computers according to the requirements. If so, also output the positions of the computers in the format of a list of coordinates denoted as (r, c) where r is the row number and c is the column number. If it is not possible, output \\"NO\\". Example Input: ``` 4 4 .... .#.. ..#. .... ``` Example Output: ``` YES (1, 1) (1, 2) (1, 3) (1, 4) (2, 1) (2, 3) (3, 1) (3, 2) (3, 4) (4, 1) (4, 2) (4, 3) (4, 4) ``` Example Input: ``` 3 3 # #.# # ``` Example Output: ``` NO ``` Explanation: In the first example, it\'s possible to place computers in all empty cells because a path exists between any pair of empty cells. Therefore, \\"YES\\" is outputted followed by the positions. In the second example, there are empty cells, but it is impossible to ensure connectivity among all computers placed in those empty cells because they can\'t reach each other through the blocked cells. Therefore, \\"NO\\" is outputted.","solution":"def is_connected(grid, n, m): from collections import deque def bfs(start): visited = [[False] * m for _ in range(n)] queue = deque([start]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return visited # Find the first empty cell to start start = None for i in range(n): for j in range(m): if grid[i][j] == \'.\': start = (i, j) break if start: break if not start: return False, [] visited = bfs(start) computers = [] for i in range(n): for j in range(m): if grid[i][j] == \'.\': computers.append((i + 1, j + 1)) if not visited[i][j]: return False, [] return True, computers def place_computers(n, m, grid): is_possible, computers = is_connected(grid, n, m) if is_possible: return \\"YES\\", computers else: return \\"NO\\", [] # Helper function to handle input and output for simpler unit testing def handle_input_output(n, m, grid_lines): grid = [list(line) for line in grid_lines] result, computers = place_computers(n, m, grid) if result == \\"YES\\": output = [result] + [f\\"({r}, {c})\\" for r, c in computers] else: output = [result] return output"},{"question":"In a faraway land, there is a city that organizes an annual event called the \\"Spiral Festival.\\" During this festival, residents line up their streets with colorful lights arranged in a grid to form a spiral pattern. Each year, the pattern starts from the top-left corner of an n x n grid and spirals inward in a clockwise direction. Your task is to generate this spiral grid, given an integer n. The grid should contain positive integers from 1 to n^2 (inclusive), sequentially filled in a spiral pattern starting from the top-left corner. Input Format: - The input contains a single integer n (1 ≤ n ≤ 20) - the size of the grid. Output Format: - Print the n x n grid where each number is separated by a space, and each row is printed on a new line. Example: Input: 3 Output: 1 2 3 8 9 4 7 6 5 Input: 4 Output: 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 Explanation: For the first example with n = 3, the numbers 1 to 9 are arranged in the spiral order starting from (0, 0): 1 → 2 → 3 ↓ 4 ← 5 ← 6 ↑ 7 ← 8 ↑ 9","solution":"def generate_spiral(n): Generate an n x n grid filled with numbers in a spiral pattern. Parameters: n (int): The size of the grid (1 ≤ n ≤ 20) Returns: list: A 2D list representing the spiral grid. spiral = [[0] * n for _ in range(n)] num = 1 left, right = 0, n - 1 top, bottom = 0, n - 1 while left <= right and top <= bottom: for i in range(left, right + 1): spiral[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): spiral[i][right] = num num += 1 right -= 1 if top <= bottom: for i in range(right, left - 1, -1): spiral[bottom][i] = num num += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): spiral[i][left] = num num += 1 left += 1 return spiral def print_spiral(spiral): Print the 2D spiral grid. for row in spiral: print(\\" \\".join(map(str, row)))"},{"question":"Given an array of integers of length `n`, you can perform a series of operations on the array. In each operation, you can select a subarray of consecutive elements and reverse it. Your goal is to sort the array in non-decreasing order with the minimal number of operations. Determine the minimum number of operations required to sort the array. The first line of input contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the array. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the elements of the array. Output one integer, the minimum number of subarray reversals needed to sort the array. Example Input ``` 5 4 3 2 5 1 ``` Output ``` 2 ``` Explanation: One possible solution is: 1. Reverse subarray `[2, 4]` to transform the array to `[4, 2, 3, 5, 1]`. 2. Reverse subarray `[1, 5]` to get the sorted array `[1, 2, 3, 4, 5]`.","solution":"def minimum_operations_to_sort(arr): Returns the minimum number of subarray reversals needed to sort the array. n = len(arr) sorted_arr = sorted(arr) l = 0 while l < n and arr[l] == sorted_arr[l]: l += 1 if l == n: return 0 r = n - 1 while r >= 0 and arr[r] == sorted_arr[r]: r -= 1 if sorted_arr[l:r + 1] == arr[l:r + 1][::-1]: return 1 return 2"},{"question":"You are given a grid with `n` rows and `m` columns filled with integers. Your task is to find the sum of the integers in the subgrid defined by the upper-left corner at `(1,1)` and the bottom-right corner at `(i,j)` for each query. The first line of the input contains two integers `n` and `m` (`1 ≤ n, m ≤ 1000`) — the number of rows and columns in the grid. Then follows `n` lines, each containing `m` integers, representing the grid. Each integer in the grid will be between `1` and `10^3`. The next line contains one integer `q` (`1 ≤ q ≤ 2000`) — the number of queries. Then follows `q` lines, each containing two integers `i` and `j` (`1 ≤ i ≤ n`, `1 ≤ j ≤ m`) — representing the bottom-right corner of the subgrid for which you have to find the sum. For each query, print one integer per line — the sum of the integers in the subgrid defined by the upper-left corner at `(1,1)` and the bottom-right corner at `(i,j)`. # Example **Input** ``` 3 3 1 2 3 4 5 6 7 8 9 2 2 2 3 3 ``` **Output** ``` 12 45 ``` # Explanation For the given example: - For the first query `(2,2)`, the subgrid is: ``` 1 2 4 5 ``` The sum is `1 + 2 + 4 + 5 = 12`. - For the second query `(3,3)`, the subgrid is: ``` 1 2 3 4 5 6 7 8 9 ``` The sum is `1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45`.","solution":"def compute_subgrid_sums(grid, queries): n = len(grid) m = len(grid[0]) # Creating a prefix sum array prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = grid[i-1][j-1] prefix_sum[i][j] += prefix_sum[i-1][j] prefix_sum[i][j] += prefix_sum[i][j-1] prefix_sum[i][j] -= prefix_sum[i-1][j-1] results = [] for x, y in queries: sum_subgrid = prefix_sum[x][y] results.append(sum_subgrid) return results"},{"question":"You are given an array of integers. Your task is to determine the minimum number of operations required to make all the elements in the array equal. In one operation, you can select two distinct indices (i) and (j) and set (a[i]) to (a[j]). The first line of the input contains one integer (t) ((1 le t le 10^4)) — the number of test cases. Then (t) test cases follow. The first line of each test case contains one integer (n) ((2 le n le 10^5)) — the number of elements in the array. The second line contains (n) integers (a_1, a_2, ldots, a_n) ((1 le a_i le 10^9)) — the elements of the array. It is guaranteed that the sum of (n) over all test cases does not exceed (10^5). For each test case, print the answer: the minimum number of operations required to make all the elements in the array equal. # Example Input ``` 3 5 1 2 3 4 5 6 8 8 4 4 8 4 4 7 7 7 7 ``` Output ``` 4 3 0 ```","solution":"def min_operations_to_equal_elements(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] frequency = {} for num in a: frequency[num] = frequency.get(num, 0) + 1 max_freq = max(frequency.values()) results.append(n - max_freq) return results"},{"question":"You are given a string ( s ) consisting of ( n ) lowercase English letters. A subsequence is a sequence derived from another sequence by deleting some or no elements from it without changing the order of the remaining elements. For each subsequence of length ( k ), let\'s define its \\"value\\" as the number of distinct characters in it. You need to answer ( q ) queries, where each query is of the form ( (l, r, k) ). For each query, you need to find the maximum value of any subsequence of length ( k ) that can be formed from the substring ( s[l:r] ) (1-based indexing). If no valid subsequence of length ( k ) can be formed from ( s[l:r] ), return -1. The first line of input contains two integers ( n ) and ( q ) (1 leq n, q leq 10^5) — the length of the string and the number of queries, respectively. The second line contains the string ( s ). The next ( q ) lines contain three integers each ( l ), ( r ), and ( k ) (1 leq l leq r leq n, 1 leq k leq n). For each query, print the maximum value of any subsequence of length ( k ) or -1 if no such subsequence exists. # Example Input ``` 7 3 abacaba 2 5 2 1 7 3 3 3 1 ``` Output ``` 2 3 1 ``` # Explanation - For the first query (2, 5, 2), the substring is \\"baca\\", and the best subsequence of length 2 (e.g., \\"ba\\" or \\"ac\\") has 2 distinct characters. - For the second query (1, 7, 3), the substring is \\"abacaba\\", and the best subsequence of length 3 (e.g., \\"abc\\") has 3 distinct characters. - For the third query (3, 3, 1), the substring is \\"a\\", and the subsequence of length 1 (\\"a\\") has 1 distinct character.","solution":"def max_distinct_characters_in_subseq(n, q, s, queries): results = [] for l, r, k in queries: # Extract the substring based on 1-based index substring = s[l - 1:r] # Get the distinct characters within the substring distinct_chars = set(substring) if len(substring) < k: # If subsequence length is greater than substring length, return -1 results.append(-1) else: # The max value of any subsequence of length k can have at most the number of distinct characters # or k if k distinct characters are available. results.append(min(len(distinct_chars), k)) return results"},{"question":"You are given a directed graph consisting of n nodes and m edges. Each edge connects two distinct nodes and has a weight wi (1 ≤ wi ≤ 100). The graph may contain multiple edges between the same pair of nodes. Your task is to find the total weight of the minimum spanning tree (MST) of the graph and print the list of edges that are included in the MST. The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 2000) — the number of nodes and the number of edges, respectively. Each of the next m lines contains three integers ui, vi, and wi (1 ≤ ui, vi ≤ n, ui ≠ vi) — indicating that there is a directed edge from node ui to node vi with weight wi. Print the total weight of the minimum spanning tree, followed by m lines which list the edges of the MST in the order they were added. Each line should contain three integers representing the starting node, ending node, and weight of the edge in the MST. If it is not possible to form a minimum spanning tree that spans all the nodes, print -1. Note: The input graph is not guaranteed to be connected. Example Input: ``` 4 5 1 2 1 1 3 2 2 3 2 3 4 1 4 2 3 ``` Example Output: ``` 4 1 2 1 3 4 1 1 3 2 ```","solution":"def find_mst(n, edges): This function finds the MST of a given graph using Kruskal\'s algorithm. Parameters: n (int): number of nodes. edges (list of tuples): each tuple (ui, vi, wi) represents a directed edge with a weight. Returns: (int, list of tuples): total weight of MST and list of edges in the MST. parent = list(range(n)) rank = [0] * n def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 return True return False edges.sort(key=lambda x: x[2]) mst_weight = 0 mst_edges = [] for u, v, w in edges: if union(u - 1, v - 1): mst_weight += w mst_edges.append((u, v, w)) if len(mst_edges) == n - 1: break if len(mst_edges) != n - 1: return -1, [] return mst_weight, mst_edges"},{"question":"Given a list of integers and a target sum, determine if there are two distinct numbers in the list that add up to the target sum. The first line of input contains two integers n and x (1 ≤ n ≤ 10^5, -10^9 ≤ x ≤ 10^9) – the size of the list and the target sum. The second line contains n space-separated integers a_i (-10^9 ≤ a_i ≤ 10^9) – the elements of the list. Print \\"YES\\" if there are two distinct numbers in the list that add up to the target sum, otherwise print \\"NO\\". Consider the first sample case: if you have a list of integers [10, 15, 3, 7] and the target sum is 17, the numbers 10 and 7 add up to 17, so the answer is \\"YES\\". If, however, the target sum was 20, there are no two numbers in the list that add up to it, so the answer would be \\"NO\\".","solution":"def has_pair_with_sum(n, x, arr): Determines if there are two distinct numbers in the list that add up to the target sum x. Args: n (int): the size of the list. x (int): the target sum. arr (list): list of integers. Returns: str: \\"YES\\" if there are two distinct numbers that add up to x, otherwise \\"NO\\". seen = set() for num in arr: if (x - num) in seen: return \\"YES\\" seen.add(num) return \\"NO\\" # Sample Input: n = 4 x = 17 arr = [10, 15, 3, 7] print(has_pair_with_sum(n, x, arr)) # Output: \\"YES\\""},{"question":"You are given an array of integers containing n (1 ≤ n ≤ 200,000) elements. You need to perform several queries on this array. Each query consists of two integers l and r (1 ≤ l ≤ r ≤ n), and you have to calculate the sum of the elements in the array from index l to index r, inclusive. To handle these queries efficiently, you need to preprocess the array and use the precomputed information to answer each query in constant time. The first line of the input contains two integers n and q (1 ≤ q ≤ 100,000) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. The following q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) — the indices representing the range for which the sum has to be calculated. For each query, print the sum of the elements in the array from index l to index r inclusive. Example: Input: 5 3 1 2 3 4 5 1 3 2 4 1 5 Output: 6 9 15","solution":"def preprocess_array(arr): Preprocess the array to create prefix sums. n = len(arr) prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i-1] + arr[i-1] return prefix_sums def range_sum(prefix_sums, l, r): Calculate the sum of elements in the range [l, r] using prefix sums. return prefix_sums[r] - prefix_sums[l-1] def process_queries(n, arr, queries): prefix_sums = preprocess_array(arr) results = [] for l, r in queries: results.append(range_sum(prefix_sums, l, r)) return results"},{"question":"Max wants to organize a concert for his college band. He has a list of friends who might be willing to help him out. Each friend has a certain skill level and a limit on the amount of effort they can put in, both represented by integers. To successfully organize the concert, Max needs to gather a crew with a combined skill level of at least a certain value, without exceeding the total effort that these friends can put in. Help Max determine if he can form such a crew. The first line contains three integers n, S, and E (1 ≤ n ≤ 100, 0 ≤ S, E ≤ 10^9) - the number of friends, the required combined skill level, and the maximum allowed effort, respectively. The next n lines each contain two integers si and ei (1 ≤ si, ei ≤ 10^6) - the skill level and effort of each friend. Print \\"YES\\" if Max can form a crew meeting the requirements, and \\"NO\\" otherwise. For example, if the input is: ``` 5 15 10 6 3 8 2 3 4 5 6 7 1 ``` Max could select friends with skill levels 6, 8, and 3, which combined is 17 (greater than or equal to 15), and their efforts sum to 9 (less than or equal to 10). Hence, the output would be \\"YES\\". If the input is: ``` 3 10 5 4 2 5 3 7 5 ``` Max cannot form a crew with the required skill level of 10 without exceeding the effort limit of 5. Hence, the output would be \\"NO\\".","solution":"def can_form_crew(n, S, E, friends): Determine if it is possible to form a crew with a combined skill level of at least S without exceeding the total effort E. :param n: Number of friends :param S: Required combined skill level :param E: Maximum allowed effort :param friends: List of (skill, effort) tuples :return: \\"YES\\" if can form a crew, otherwise \\"NO\\" # Dynamic programming table to track minimal effort for each skill level dp = [float(\'inf\')] * (S + 1) dp[0] = 0 # Minimum effort to achieve skill level 0 is 0 for skill, effort in friends: for j in range(S, -1, -1): if dp[j] < float(\'inf\'): new_skill = min(S, j + skill) dp[new_skill] = min(dp[new_skill], dp[j] + effort) return \\"YES\\" if dp[S] <= E else \\"NO\\""},{"question":"You are given a weighted, directed graph with n nodes and m edges. Each node is labeled from 1 to n. The graph may contain multiple edges between the same pair of nodes. Write a function that returns the minimal cost of a path from node 1 to node n. If there is no path from node 1 to node n, return -1. The first line contains two integers n and m (2 le n le 10^5, 1 le m le 2 times 10^5) — the number of nodes and edges in the graph. Each of the next m lines contains three integers u, v, and w (1 le u, v le n, 1 le w le 10^9) — the start node, the end node, and the weight of the directed edge. Output a single integer — the minimal cost of a path from node 1 to node n, or -1 if there is no such path. In the first example, the minimal cost path from node 1 to node 5 has a total weight of 10. In the second example, there is no path from node 1 to node 4, so the output is -1. In the third example, the minimal cost path from node 1 to node 3 has a total weight of 3.","solution":"import heapq def minimal_cost_path(n, m, edges): Returns the minimal cost of a path from node 1 to node n in a weighted, directed graph. Returns -1 if there is no such path. # Create adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) # Dijkstra\'s algorithm to find the shortest path from node 1 to node n min_heap = [(0, 1)] min_cost = {i: float(\'inf\') for i in range(1, n + 1)} min_cost[1] = 0 while min_heap: current_cost, u = heapq.heappop(min_heap) if u == n: return current_cost for v, w in graph[u]: new_cost = current_cost + w if new_cost < min_cost[v]: min_cost[v] = new_cost heapq.heappush(min_heap, (new_cost, v)) return -1 if min_cost[n] == float(\'inf\') else min_cost[n] # Example usage # n = 5, m = 6 # edges = [(1, 2, 3), (2, 5, 2), (1, 3, 4), (3, 4, 4), (4, 5, 1), (1, 5, 10)] # print(minimal_cost_path(n, m, edges)) # Output: 5 # n = 4, m = 2 # edges = [(1, 2, 5), (3, 4, 10)] # print(minimal_cost_path(n, m, edges)) # Output: -1 # n = 5, m = 7 # edges = [(1, 2, 2), (1, 3, 2), (2, 3, 1), (2, 4, 10), (3, 4, 2), (4, 5, 3), (1, 5, 4)] # print(minimal_cost_path(n, m, edges)) # Output: 4"},{"question":"You are given a weighted undirected graph with n nodes and m edges. Each edge has a positive integer weight. You have to perform several queries on this graph. There are two types of queries: 1. Update the weight of an edge between two nodes. 2. Find the shortest path distance between two nodes. The first line contains two integers n and m (2 le n le 1000, 1 le m le 5000) — the number of nodes and the number of edges, respectively. The next m lines describe the edges. Each edge is described by three integers u, v, and w (1 le u, v le n, 1 le w le 1000) — representing an undirected edge between nodes u and v with weight w. The next line contains an integer q (1 le q le 10000) — the number of queries. Each of the next q lines contains a query in one of the following forms: - `1 u v w`: Update the weight of the edge between nodes u and v to w. - `2 u v`: Find the shortest path distance between nodes u and v. It is guaranteed that there is at least one edge between every pair of nodes initially. For each query of the second type, print the answer on a new line. If there is no path between the nodes, print `-1`.","solution":"import heapq class WeightedGraph: def __init__(self, n): self.n = n self.graph = {} for i in range(1, n + 1): self.graph[i] = {} def add_edge(self, u, v, w): self.graph[u][v] = w self.graph[v][u] = w def update_edge(self, u, v, w): self.add_edge(u, v, w) def shortest_path(self, start, end): if start == end: return 0 # Dijkstra\'s algorithm to find the shortest path heap = [(0, start)] distances = {node: float(\'inf\') for node in self.graph} distances[start] = 0 while heap: current_distance, current_node = heapq.heappop(heap) if current_node == end: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in self.graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return -1 if distances[end] == float(\'inf\') else distances[end] def process_queries(n, m, edges, queries): graph = WeightedGraph(n) for u, v, w in edges: graph.add_edge(u, v, w) results = [] for query in queries: if query[0] == 1: _, u, v, w = query graph.update_edge(u, v, w) elif query[0] == 2: _, u, v = query results.append(graph.shortest_path(u, v)) return results"},{"question":"You are given n different types of coins and a total amount of money. Write a program to find the minimum number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin. The first line contains an integer n (1 ≤ n ≤ 100) — the number of different types of coins. The second line contains n integers, representing the coin denominations. Each coin denomination is a positive integer and does not exceed 10,000. The third line contains a single integer amount (0 ≤ amount ≤ 100,000). Output the minimum number of coins needed to make up the given amount. If it is not possible to make that amount, return -1. In the first sample, you can use one coin of denomination 3 and one coin of denomination 1 to make up the amount 4. In the second sample, it is not possible to make up the amount 3 with the given denominations, hence the answer is -1. **Example Input:** ``` 2 1 3 4 ``` **Example Output:** ``` 2 ``` **Input:** ``` 1 2 3 ``` **Output:** ``` -1 ```","solution":"def min_coins(n, coins, amount): Returns the minimum number of coins that you need to make up the given amount. If that amount of money cannot be made up by any combination of the coins, return -1. # Initialize a dp array with amount+1 (amount+1 considered as infinity in this case) dp = [amount + 1] * (amount + 1) dp[0] = 0 for i in range(1, amount + 1): for coin in coins: if coin <= i: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[amount] if dp[amount] != amount + 1 else -1 # Example usage n = 2 coins = [1, 3] amount = 4 print(min_coins(n, coins, amount)) # Output: 2 n = 1 coins = [2] amount = 3 print(min_coins(n, coins, amount)) # Output: -1"},{"question":"You are provided with an array of integers which represents the heights of skyscrapers in a city. The array represents the heights of skyscrapers viewed from left to right. Your task is to find the total number of buildings that will receive direct sunlight. A building receives direct sunlight if there are no taller buildings to its left. You need to write a function that, given an array of integers, returns the count of skyscrapers that receive direct sunlight. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of skyscrapers. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the skyscrapers. Output a single integer — the total number of buildings that will receive direct sunlight. For example, if the given array is [3, 1, 4, 5, 2], the buildings at heights 3, 4, and 5 will receive direct sunlight since the building of height 1 is blocked by 3, and the building of height 2 is blocked by 4 and 5. Sample Input 1: 5 3 1 4 5 2 Sample Output 1: 3 Sample Input 2: 7 1 2 3 4 5 6 7 Sample Output 2: 7","solution":"def count_sunlit_buildings(building_heights): Given an array of building heights, returns the count of buildings that receive direct sunlight. Parameters: building_heights (list): List of integers representing the heights of the skyscrapers. Returns: int: The number of buildings that receive direct sunlight. max_height = 0 sunlit_count = 0 for height in building_heights: if height > max_height: sunlit_count += 1 max_height = height return sunlit_count"},{"question":"You are given an array of n integers and q queries. Each query consists of three integers l, r, and x. For each query, you need to determine the number of elements in the subarray from index l to r that are greater than x. The first line contains two integers n (1 ≤ n ≤ 10^5) and q (1 ≤ q ≤ 10^5) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Each of the next q lines contains three integers l, r, and x (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^9) representing a query. Print q integers, each representing the answer to a respective query. Input: ``` 5 3 1 2 3 4 5 1 3 2 2 5 3 1 5 0 ``` Output: ``` 1 2 5 ``` Explanation: For the first query (1, 3, 2): The subarray is [1, 2, 3]. There is 1 element greater than 2. For the second query (2, 5, 3): The subarray is [2, 3, 4, 5]. There are 2 elements greater than 3. For the third query (1, 5, 0): The subarray is [1, 2, 3, 4, 5]. All 5 elements are greater than 0.","solution":"def count_greater_elements(arr, queries): results = [] for l, r, x in queries: results.append(sum(1 for i in range(l - 1, r) if arr[i] > x)) return results # Example usage if __name__ == \\"__main__\\": n, q = 5, 3 arr = [1, 2, 3, 4, 5] queries = [(1, 3, 2), (2, 5, 3), (1, 5, 0)] print(count_greater_elements(arr, queries))"},{"question":"A new gallery has recently opened in Metropolis. The gallery consists of a series of rooms connected by passageways, represented as a weighted undirected graph. Each room is a node, and each passageway is an edge with a weight corresponding to the time required to traverse it. There are h-hallways in the gallery, and each hallway links one pair of rooms. Unfortunately, some passageways have become blocked, but there is a list of passageways provided by the gallery administrator that can be opened for a specific cost. Juliana, the curator, needs to ensure that all rooms are accessible from a central artwork located in room 1. She can unblock the necessary passageways, aiming to minimize the total cost of unblocking them while ensuring that every room is accessible from the central artwork in room 1. The first line of the input contains two integers n and h (2 ≤ n ≤ 1000, 1 ≤ h ≤ 10000), the number of rooms and the number of hallways, respectively. The next h lines each contain three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000), representing a passageway between rooms u and v with traversal time t. If the traversal time is zero, it indicates the passageway is blocked and must be unblocked before it can be used. The next line contains an integer m (0 ≤ m ≤ 1000), the number of passageways that can be unblocked. The next m lines each contain three integers x, y, and c (1 ≤ x, y ≤ n, 1 ≤ c ≤ 10000), indicating an initially blocked passageway between rooms x and y that can be unblocked at a cost of c. Print one integer, the minimum total cost of unblocking passageways to ensure all rooms are accessible from room 1. If it is impossible to do so, print \\"-1\\" (without quotes).","solution":"import heapq def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def minimum_cost_to_unblock(n, h, hallways, m, unblockable_hallways): # Initialize union-find structures parent = [i for i in range(n+1)] rank = [0] * (n+1) # List of edges (u, v, t), initially only including non-blocked hallways edges = [(t, u, v) for (u, v, t) in hallways if t != 0] # List of blocked edges to be possibly unblocked at a cost blocked_edges = [(c, x, y) for (x, y, c) in unblockable_hallways] # Heapify the edges list to prepare for Kruskal\'s algorithm heapq.heapify(edges) # Add all initially blocked edges as potential edges to be added to the MST for c, x, y in blocked_edges: heapq.heappush(edges, (c, x, y)) # Kruskal\'s algorithm total_cost = 0 num_edges_used = 0 while edges: cost, u, v = heapq.heappop(edges) if find(parent, u) != find(parent, v): union(parent, rank, u, v) total_cost += cost num_edges_used += 1 # Verify if all nodes are connected (check if only one set exists) root_set = find(parent, 1) for i in range(2, n+1): if find(parent, i) != root_set: return -1 return total_cost"},{"question":"You are given a list of operations to perform on an initially empty sequence of integers. Each operation can be one of three types: 1. Insert a number into the sequence. 2. Delete a number from the sequence. 3. Find the k-th smallest number in the sequence. Write a program to process these operations efficiently. The input consists of: - The first line contains an integer q (1 ≤ q ≤ 10^5), the number of operations. - The following q lines each describe an operation: - If the operation is to insert a number x, the format will be \\"I x\\". - If the operation is to delete a number x, the format will be \\"D x\\". - If the operation is to find the k-th smallest number, the format will be \\"K k\\", where k (1 ≤ k ≤ current size of the sequence) is an integer indicating the position. Print the result of each \\"K k\\" operation on a new line. If a deletion operation refers to a number not present in the sequence, ignore the operation. **Input Example:** ``` 7 I 5 I 1 K 2 D 1 I 3 K 2 K 1 ``` **Output Example:** ``` 5 5 3 ``` **Explanation:** 1. Insert 5: Sequence is [5]. 2. Insert 1: Sequence is [1, 5]. 3. Find 2nd smallest: 5. 4. Delete 1: Sequence is [5]. 5. Insert 3: Sequence is [3, 5]. 6. Find 2nd smallest: 5. 7. Find 1st smallest: 3.","solution":"import bisect def process_operations(operations): sequence = [] results = [] for operation in operations: op = operation.split() if op[0] == \\"I\\": x = int(op[1]) bisect.insort(sequence, x) elif op[0] == \\"D\\": x = int(op[1]) index = bisect.bisect_left(sequence, x) if index < len(sequence) and sequence[index] == x: sequence.pop(index) elif op[0] == \\"K\\": k = int(op[1]) results.append(sequence[k - 1]) return results"},{"question":"A group of friends is organizing a road trip, and they want to visit multiple destinations together. They have a list of potential cities they can visit, each with a specified number of attractions of interest. However, the friends also prefer to minimize the total travel distance while maximizing the number of attractions they can visit. You are given the coordinates of the starting city, the coordinates of the potential destination cities, and their respective number of attractions. Your task is to help them determine which city they should visit in order to maximize the number of attractions while minimizing the travel distance from the starting city. If there are multiple cities with the same highest number of attractions, choose the one closest to the starting city. If there are multiple cities with the same number of attractions and the same distance, output the lexicographically smallest city name. The first line of input contains two integers x0 and y0, the coordinates of the starting city. The second line contains an integer n (1 ≤ n ≤ 100), the number of potential destination cities. Each of the next n lines contains a string (city name, composed of lowercase letters), two integers (xi, yi, the coordinates of the city), and an integer ai (the number of attractions in that city). All city names are guaranteed to be unique and consist of lowercase Latin letters only. Output the name of the optimal destination city. __Example 1:__ ``` Input: 0 0 3 atlanta 3 4 5 boston 1 1 10 chicago 2 2 10 Output: boston ``` In the first example, the city \'boston\' has the most attractions (10), and it is closer to the starting city than \'chicago\', despite \'chicago\' also having 10 attractions. __Example 2:__ ``` Input: 0 0 2 denver 5 5 3 denmark 1 1 3 Output: denmark ``` In the second example, both \'denver\' and \'denmark\' have the same number of attractions (3), but \'denmark\' is closer to the starting city, so it is chosen.","solution":"import math def find_best_destination(x0, y0, n, destinations): max_attractions = -1 min_distance = float(\'inf\') best_city = \\"\\" for city, x, y, attractions in destinations: distance = math.sqrt((x - x0) ** 2 + (y - y0) ** 2) if (attractions > max_attractions or (attractions == max_attractions and (distance < min_distance or (distance == min_distance and city < best_city)))): max_attractions = attractions min_distance = distance best_city = city return best_city # Example usage input_x0, input_y0 = 0, 0 input_n = 3 input_destinations = [ (\\"atlanta\\", 3, 4, 5), (\\"boston\\", 1, 1, 10), (\\"chicago\\", 2, 2, 10) ] print(find_best_destination(input_x0, input_y0, input_n, input_destinations))"},{"question":"A spaceship is designed to travel between planets in a distant galaxy. The spaceship has a fuel tank which can hold up to `C` units of fuel, and it consumes 1 unit of fuel to travel 1 unit distance. You are given the coordinates of `n` planets in a 2D plane and the spaceship\'s starting coordinates. To complete its mission, the spaceship must visit all the given planets. The spaceship can start at any of the given planets, and it can refill its fuel tank entirely at any planet. Your task is to determine if the mission is possible — that is, if the spaceship can traverse all the planets starting with the given amount of fuel and refueling at each planet. The input consists of: - The first line contains three integers `n`, `C`, and `m` (1 ≤ n ≤ 1000, 1 ≤ C, m ≤ 109), where `n` is the number of planets, `C` is the fuel tank capacity, and `m` is the number of units of fuel the spaceship starts with. - The following `n` lines each contain two integers `xi` and `yi` (−109 ≤ xi, yi ≤ 109), representing the coordinates of the ith planet. Output \\"YES\\" if the spaceship can visit all the planets, otherwise \\"NO\\". **Example** Input: ``` 4 1000 100 0 0 100 0 0 100 100 100 ``` Output: ``` YES ``` Explanation: In this example, the spaceship can start at any planet. With a sufficient amount of initial fuel and the ability to refuel at each planet, it can visit all the planets by planning its route efficiently. The problem tests your understanding of graph traversal and pathfinding algorithms, such as Depth First Search (DFS) or Breadth First Search (BFS), combined with fuel constraints.","solution":"def can_traverse_all_planets(n, C, m, planets): from queue import Queue def distance(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) # Create adjacency list where an edge exists if distance is <= C adjacency_list = {i: [] for i in range(n)} for i in range(n): for j in range(i + 1, n): if distance(planets[i], planets[j]) <= C: adjacency_list[i].append(j) adjacency_list[j].append(i) # Check if all nodes are connected using BFS/DFS from each starting point def is_connected(start): visited = set() q = Queue() q.put(start) initial_fuel = m if distance((0, 0), planets[start]) <= m else C # Initial fuel consideration if initial_fuel < distance((0, 0), planets[start]): return False visited.add(start) while not q.empty(): current = q.get() for neighbor in adjacency_list[current]: if neighbor not in visited: q.put(neighbor) visited.add(neighbor) return len(visited) == n # Try to start from any planet for i in range(n): if is_connected(i): return \\"YES\\" return \\"NO\\""},{"question":"A company organizes a series of competitions in a coding challenge. There are n participants, each with a unique ID from 1 to n. The competitions are held over m rounds, where each round consists of a single task. For each task, participants receive varying scores based on their performance. At the end of m rounds, the score of each participant is the sum of their scores across all rounds. However, some participants are disqualified at certain rounds due to violations, and their scores for those rounds are not counted. Given the details of all rounds and the disqualification information, determine the highest total score achieved by any participant. The first line of input contains two integers n (1 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 100,000) — the number of participants and the number of rounds respectively. Each of the next m lines describes a round and contains the following information: - A task identifier (an integer t_i) - An integer k_i (the number of participants who were disqualified in this round) - k_i integers denoting the unique IDs of the disqualified participants - n integers denoting the scores of each participant for the task in that round, where the i-th integer is the score of participant i Output a single integer — the highest total score achieved by any participant given the disqualifications. **Example:** Input: ``` 3 2 1 1 2 20 15 30 2 2 1 3 25 10 20 ``` Output: ``` 35 ``` Explanation: - In Round 1, Participant 2 is disqualified, so their round score is not counted. The scores after Round 1 are [20, 0, 30]. - In Round 2, Participants 1 and 3 are disqualified, so their round scores are not counted. The scores after Round 2 are [0, 10, 0]. - The total scores for Participants 1, 2, and 3 over both rounds are [20+0, 0+10, 30+0] = [20, 10, 30]. - The highest score among them is 30, so the output is 30.","solution":"def highest_total_score(n, m, rounds): scores = [0] * n for round_info in rounds: t, k, disqualified, round_scores = round_info disqualified_set = set(disqualified) for i in range(n): if i + 1 not in disqualified_set: scores[i] += round_scores[i] return max(scores) # Example Input n = 3 m = 2 rounds = [ (1, 1, [2], [20, 15, 30]), (2, 2, [1, 3], [25, 10, 20]) ] print(highest_total_score(n, m, rounds)) # Output should be 30"},{"question":"A company has a distributed system with numerous servers interconnected in a network. Each server can communicate with any other server directly or indirectly through other servers. A common issue faced in the system is determining whether any two servers are connected directly or indirectly, i.e., they belong to the same connected component within the network. Your task is to write a program to determine if two specific servers belong to the same connected component. The network is represented as an undirected graph with nodes representing servers and edges representing direct communication links between them. The first line of input contains two integers, n and m, where n (1 leq n leq 10^5) is the number of servers, and m (0 leq m leq 2 cdot 10^5) is the number of communication links between servers. The following m lines each contain two integers u and v (1 leq u, v leq n), indicating that there is a direct communication link between servers u and v. The next line contains a single integer q (1 leq q leq 10^5), the number of queries. The following q lines each contain two integers a and b (1 leq a, b leq n), where a and b are the identifiers of the servers, and you need to determine if they belong to the same connected component. Print \\"YES\\" if servers a and b are in the same connected component, otherwise print \\"NO\\". **Input:** ``` The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 ⋅ 10^5). The next m lines each contain two integers u and v (1 ≤ u, v ≤ n). The next line contains one integer q (1 ≤ q ≤ 10^5). The next q lines each contain two integers a and b (1 ≤ a, b ≤ n). ``` **Output:** ``` For each query, print \\"YES\\" if a and b are in the same connected component, otherwise print \\"NO\\". ``` **Example:** Input: ``` 6 5 1 2 2 3 4 5 5 6 3 4 3 1 3 2 4 5 6 ``` Output: ``` YES YES YES ``` The examples illustrate determining the connection between various pairs of servers.","solution":"def find_parent(parent, i): if parent[i] == i: return i else: parent[i] = find_parent(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if xroot != yroot: if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def same_component(n, m, edges, queries): parent = [i for i in range(n + 1)] rank = [0] * (n + 1) for u, v in edges: union(parent, rank, u, v) result = [] for a, b in queries: if find_parent(parent, a) == find_parent(parent, b): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"In a distant land, there exists a grid-based city with n rows and m columns. The city has different types of terrain that can be represented using integers. For administrative purposes, the king has decided to build a new road that connects the westernmost part of the city (column 1) to the easternmost part of the city (column m). The road must run strictly west to east, without skipping any column. However, due to the terrain constraints, the road must follow certain rules: 1. The road must begin in any cell in column 1 and end in any cell in column m. 2. From any cell in the current column (i, j), the road can proceed to any cell in the next column (i, j+1) if the absolute height difference between the two cells is at most 1. 3. The road must end at a cell that can be reached following the above criteria. Given the city\'s terrain heights, your task is to output the heights along the path of the road, following the path with the maximum sum of heights. If multiple such paths exist, output any of them. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid. Each of the next n lines contains m integers, representing the height of the terrain in each cell of the grid (0 ≤ height ≤ 1000). Output the heights along the path of the road with the maximum sum of heights, starting from any cell in column 1 and ending at any cell in column m. Each line should contain two integers: the row number and the height of the cell, starting from the first column and ending at the last column. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 1 1 1 2 1 3 or Input: 4 4 1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7 Output: 4 4 3 5 2 6 1 7","solution":"def find_max_sum_path(n, m, grid): Finds the path with the maximum sum of heights from the first column to the last column following the given constraints. :param n: Number of rows :param m: Number of columns :param grid: 2D list representing the grid :return: List of tuples representing (row number, height) along the path # Initialize a dp table to store the maximum sum up to each cell dp = [[-float(\'inf\')] * m for _ in range(n)] parent = [[-1] * m for _ in range(n)] # To reconstruct the path # Start with the first column for i in range(n): dp[i][0] = grid[i][0] # Fill the dp table for j in range(1, m): for i in range(n): for k in range(max(0, i - 1), min(n, i + 2)): # i-1, i, i+1 rows of the previous column if abs(grid[i][j] - grid[k][j - 1]) <= 1: if dp[k][j - 1] + grid[i][j] > dp[i][j]: dp[i][j] = dp[k][j - 1] + grid[i][j] parent[i][j] = k # Find the end of the maximum sum path max_sum = -float(\'inf\') end_row = -1 for i in range(n): if dp[i][m - 1] > max_sum: max_sum = dp[i][m - 1] end_row = i # Reconstruct the path path = [] current_row = end_row for j in range(m - 1, -1, -1): path.append((current_row + 1, grid[current_row][j])) # 1-based index current_row = parent[current_row][j] path.reverse() return path"},{"question":"You are given an integer array A of size n. The elements of the array represent the initial positions of events along a one-dimensional timeline. You need to re-arrange the elements of the array in such a way that all events are maximally spaced apart from each other while maintaining the order of their relative differences. Formally, given an integer d, you need to reorder the array B such that: 1. |B[i] - B[i-1]| ge d for all 1 le i < n. 2. The resulting order keeps the relative differences the same as much as possible. If it is impossible to achieve the conditions, print -1. The first line contains two integers n and d (1 le n le 1000, 1 le d le 10^6) — the size of the array and the minimum allowed distance between any two consecutive events. The second line contains n integers A_1, A_2, ..., A_n (-10^6 le A_i le 10^6) — the initial positions of events. Output an array B of size n representing the re-ordered events, or -1 if it\'s impossible to rearrange the array as required. The positions in the output array should be spaced at least d units apart and maintain the relative differences as much as possible. For example: ``` Input: 5 3 1 2 3 4 5 Output: -1 Input: 3 3 1 7 10 Output: 1 4 7 ``` Note: In the first example, it\'s impossible to space the elements 3 units apart while maintaining order constraints. In the second example, the possible re-ordered positions as per given conditions could be [1, 4, 7].","solution":"def maximize_spacing(n, d, A): # First we need to sort A to easily distribute them. A.sort() B = [A[0]] for i in range(1, n): # Find the next value which must be at least d units apart. next_position = B[-1] + d if next_position > A[i] and i < n-1: continue B.append(next_position) # If the size of B differs from original array\'s size, returning -1 if len(B) != n: return -1 return B"},{"question":"ByteLandian scientists have recently discovered a new numeric representation system they call \\"Bit Fraction System\\". In this system, each number is represented as a sequence of bits, but instead of each bit representing an integral power of 2 (like in regular binary), they represent fractional powers of 2. For example, the number 5.5 in this system might be represented by \\"101.1\\", where: - The left part of the binary point represents the integer part \\"5\\", - The fractional part after the binary point represents \\".5\\". Given a number 0 < X < 1000 with up to two decimal places (for example 3.75, 45.50, etc.), convert this number into its \\"Bit Fraction\\" representation. The input consists of a single number X with up to two decimal places. The output should be a string representing the number in the \\"Bit Fraction System\\". Two decimal places of accuracy in the input X guarantee that binary representation of the fractional part of X will terminate. Examples: Input: 10.25 Output: 1010.01 Input: 5.5 Output: 101.1 Input: 0.75 Output: 0.11 Note: - The fractional part of the bit fraction system corresponds to binary fractional representation where each place after the binary point is 1/(2^1), 1/(2^2), 1/(2^3), and so on. - The output should not have trailing zeroes for the fractional part.","solution":"def float_to_int_binary(n): Converts the integer part of the float to binary. if n == 0: return \\"0\\" result = \\"\\" while n > 0: result = str(n % 2) + result n = n // 2 return result def fraction_to_binary(fraction): Converts the fraction part of the float to binary. result = \\"\\" while fraction > 0: fraction *= 2 if fraction >= 1: result += \\"1\\" fraction -= 1 else: result += \\"0\\" return result def float_to_bit_fraction(X): Convert the given float number to the Bit Fraction System. # Split the number into integer and fractional parts int_part, frac_part = int(X), X - int(X) int_binary = float_to_int_binary(int_part) if frac_part == 0: return int_binary frac_binary = fraction_to_binary(frac_part) return int_binary + \\".\\" + frac_binary # Example usage print(float_to_bit_fraction(10.25)) # Should output \\"1010.01\\" print(float_to_bit_fraction(5.5)) # Should output \\"101.1\\" print(float_to_bit_fraction(0.75)) # Should output \\"0.11\\""},{"question":"Consider an online game where players gather resources based on the current game state. The game has n distinct resources and m events that update the resources in some manner. Each event can either increment the quantity of a resource, decrement it, or set it to a specific value directly. Your task is to determine the final state of all resources after applying all the events in the given order. The first line of input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10^5) — the number of distinct resources and the number of events. The second line contains n integers r1, r2, ..., rn (0 ≤ ri ≤ 10^9) — the initial quantities of resources. Each of the following m lines describes an event and contains three integers t, k, v where t (1 ≤ t ≤ 3) is the type of the event: - if t = 1, increment the quantity of the k-th resource by v (1 ≤ k ≤ n, 0 ≤ v ≤ 1000) - if t = 2, decrement the quantity of the k-th resource by v (1 ≤ k ≤ n, 0 ≤ v ≤ 1000) and ensure that it does not go below zero - if t = 3, set the quantity of the k-th resource to v (1 ≤ k ≤ n, 0 ≤ v ≤ 10^9) Output the final quantities of all resources after all events have been processed. Example: Input: 3 5 10 20 30 1 1 5 2 2 10 3 3 25 1 1 10 2 2 5 Output: 25 5 25","solution":"def process_events(n, m, resources, events): for event in events: t, k, v = event if t == 1: resources[k-1] += v elif t == 2: resources[k-1] = max(0, resources[k-1] - v) elif t == 3: resources[k-1] = v return resources"},{"question":"In a faraway land, there is a unique counting system where each number is represented by a sequence of two distinct characters. The characters can be in any order, and each sequence should be counted exactly once. Given two characters, x and y, you need to generate all distinct sequences (without repetition) of length n that can be formed using these two characters. # Input - First line contains a single integer n (1 ≤ n ≤ 100) representing the length of the sequences. - Second line contains two distinct characters x and y (both characters are from the lowercase English alphabet). # Output Print all distinct sequences of length n in lexicographical order. # Example Input ``` 3 a b ``` Output ``` aaa aab aba abb baa bab bba bbb ```","solution":"def generate_sequences(n, x, y): Generates all distinct sequences of length n using characters x and y. from itertools import product characters = [x, y] sequences = [\'\'.join(seq) for seq in product(characters, repeat=n)] return sorted(sequences)"},{"question":"Given an array of n integers, we define its beauty as the absolute difference between the maximum and minimum value in the array. John wants to divide this array into k non-empty subarrays such that the sum of the beauties of these subarrays is minimized. Help John to find the minimum sum of beauties he can achieve. The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) — the number of integers in the array and the number of non-empty subarrays John wants to divide the array into. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the elements of the array. Output a single integer — the minimum possible sum of beauties of the k subarrays. Example: ``` Input: 6 2 1 5 2 6 3 7 Output: 5 Explanation: John can divide the array into two subarrays [1, 5, 2] and [6, 3, 7]. The beauty of the first subarray is 4 (which is |5-1|), and the beauty of the second subarray is 4 (which is |7-3|). The sum of beauties is 4 + 4 = 8. This is not the minimum possible sum. A better way is to divide the array into two subarrays [1, 5, 2, 6] and [3, 7]. The beauty of the first subarray is 5 (which is |6-1|), and the beauty of the second subarray is 4 (which is |7-3|). The sum of beauties is 5 + 4 = 9. Hence, the correct output is 5.","solution":"def min_sum_of_beauties(n, k, arr): # Helper function to get beauty of a subarray def beauty(start, end): return max(arr[start:end+1]) - min(arr[start:end+1]) # Initialize DP array dp = [[float(\'inf\')] * (n + 1) for _ in range(k + 1)] dp[0][0] = 0 # Fill DP table for i in range(1, k + 1): for j in range(i, n + 1): for m in range(i - 1, j): dp[i][j] = min(dp[i][j], dp[i - 1][m] + beauty(m, j-1)) return dp[k][n] # Example usage n, k = 6, 2 arr = [1, 5, 2, 6, 3, 7] print(min_sum_of_beauties(n, k, arr)) # Output should be 5"},{"question":"You are given an array of n integers. You need to perform m operations on this array. Each operation consists of two integers l and r (1 ≤ l ≤ r ≤ n) which specify a subarray. For each of these operations, you need to find the maximum element in the subarray from index l to index r and count how many times this maximum element appears in that subarray. The input consists of two integers n and m, where n is the size of the array and m is the number of operations. The next line contains n integers representing the elements of the array. The next m lines each contain two integers l and r representing the operations. The output should be m lines. Each line should contain two integers: the maximum element in the specified subarray and the count of how many times this maximum element appears in that subarray. Input: - The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100000) - The second line contains n integers, the elements of the array (1 ≤ array[i] ≤ 10^9) - Each of the next m lines contains two integers l and r (1 ≤ l ≤ r ≤ n) Output: - Print m lines. Each line should contain two integers: the maximum element in the specified subarray and the count of how many times this maximum element appears in that subarray. Example: Input: 6 3 1 3 2 4 5 1 1 3 2 5 3 6 Output: 3 1 5 1 5 1","solution":"def max_element_and_count(n, m, array, operations): results = [] for l, r in operations: # Extract the subarray for the current operation subarray = array[l-1:r] # Find the maximum element in the subarray max_element = max(subarray) # Count how many times the maximum element appears in the subarray max_count = subarray.count(max_element) # Append the result for the current operation results.append((max_element, max_count)) return results"},{"question":"Given a string s consisting of only letters and digits, Scooter wants to rearrange the characters of the string in such a way that all the letters come before any digit. The order within the letters and the digits should not change. Your task is to help Scooter by writing a program to perform the required rearrangement. **Example:** ``` Input: s = \\"a1b2c3\\" Output: \\"abc123\\" ``` # Input - A single line containing the string s ( 1 leq |s| leq 10^5 ), which consists of only letters and digits. # Output - A single line containing the rearranged string where all the letters are placed before any digit. # Sample Input and Output ``` Input: a1b2c3 Output: abc123 Input: 4p8k7 Output: pk487 Input: ab23 Output: ab23 ``` # Note: Make sure that the relative order of the letters and digits within the groups is preserved.","solution":"def rearrange_string(s): Rearranges the input string s such that all letters come before any digit, preserving the relative order of letters and digits within the groups. Parameters: s (str): A string consisting of only letters and digits. Returns: str: The rearranged string with all letters before digits. letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(letters + digits)"},{"question":"Given an undirected graph with n nodes and m edges, determine if it is possible to color the graph using exactly three colors such that no two adjacent nodes share the same color. If it is possible, output one such coloring; otherwise, output \\"No.\\" The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of nodes and edges in the graph respectively. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v) meaning there is an edge between nodes u and v. Output \\"No\\" if it is impossible to color the graph using exactly three colors such that no two adjacent nodes have the same color. If it is possible, output \\"Yes\\" on the first line, and on the second line output n integers, where the i-th integer is the color of the i-th node (either 1, 2, or 3). In case of multiple valid colorings, output any. Example input: ``` 4 5 1 2 1 3 1 4 2 3 3 4 ``` Example output: ``` Yes 1 2 3 1 ``` Note: Coloring a graph using three colors is a well-known problem in graph theory. For most general graphs, determining if such a coloring is possible and finding the coloring is an NP-complete problem. However, the constraint n ≤ 1000 allows for feasible solution using appropriate algorithms within reasonable time limits.","solution":"def is_bipartite(graph, n): color = [-1] * n for start in range(n): if color[start] == -1: queue = [start] color[start] = 0 while queue: node = queue.pop(0) for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False, [] return True, color def three_color_graph(n, edges): if n == 1: return \\"Yesn1\\" graph = [[] for _ in range(n)] for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) is_bip, color = is_bipartite(graph, n) if is_bip: result = [\\"\\"] * n for i in range(n): if color[i] == 0: result[i] = \\"1\\" else: result[i] = \\"2\\" return \\"Yesn\\" + \\" \\".join(result) return \\"No\\" def process_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index+1]) edges.append((u, v)) index += 2 return three_color_graph(n, edges)"},{"question":"You\'ve got a sequence of n integers, a1, a2, ..., an. Let\'s define an operation where you can select any contiguous subsequence of the array and reverse its order. For example, if the original sequence is [1, 2, 3, 4, 5], by reversing the subsequence from index 2 to 4, the sequence becomes [1, 4, 3, 2, 5]. Your task is to transform the given sequence into a non-decreasing sequence using the minimum number of such operations. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109). Output Print a single integer — the minimum number of operations required to sort the sequence. Example Input 5 3 1 2 4 5 Output 1 In the first sample, you can reverse the subsequence [3, 1, 2] to get [2, 1, 3], and then reverse [1, 2, 3] to achieve the sorted sequence [1, 2, 3, 4, 5].","solution":"def min_operations_to_sort(n, sequence): if n == 1: return 0 increasing_segments = 1 for i in range(1, n): if sequence[i] < sequence[i - 1]: increasing_segments += 1 return increasing_segments - 1"},{"question":"A network of computers is connected like a tree, with one computer designated as the central control system. Messages are sent from the central control system to other computers, and each computer relays them to its children in the network. The goal is to determine the time it takes for all computers to receive a message if each message transmission between directly connected computers takes exactly the same amount of time. The first line contains a single integer n (1 le n le 10^5) — the number of computers in the network. The next n-1 lines each contain two integers a and b (1 le a, b le n) indicating that there is a direct connection between computers a and b. The central control system is computer 1. Print a single integer — the time it takes for all computers to receive the message. In the first example, all computers are directly connected to the central control system, so the time it takes for all computers to receive the message is 1. In the second example, the maximum depth from the central control system is 2, so the time it takes for all computers to receive the message is 2. Example 1: ``` 5 1 2 1 3 1 4 1 5 ``` Output: ``` 1 ``` Example 2: ``` 4 1 2 2 3 3 4 ``` Output: ``` 3 ``` In the third example, all computers except computer 1 form a long chain, so the time it takes for all computers to receive the message is 3.","solution":"from collections import deque def time_to_receive_all_messages(n, connections): if n == 1: return 0 graph = {i: [] for i in range(1, n+1)} for a, b in connections: graph[a].append(b) graph[b].append(a) def bfs(start): visited = [False] * (n + 1) queue = deque([(start, 0)]) visited[start] = True max_depth = 0 while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, depth + 1)) return max_depth return bfs(1)"},{"question":"Karel the robot is assigned to navigate a rectangular grid of dimensions n x m. The grid consists of cells that can either be blocked (\'#\') or open (\'.\'). Karel always starts at the top-left corner of the grid (1, 1) and aims to reach the bottom-right corner (n, m). Karel can only move right or down, and he cannot move through blocked cells. Given the grid configuration, determine the number of different paths Karel can take to reach the bottom-right corner from the top-left corner. If there are no valid paths, return 0. The input consists of multiple lines. The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns, respectively. Then the next n lines each contain m characters, where each character is either \'.\' or \'#\'. Output a single integer — the number of different paths Karel can take modulo 10^9 + 7. For example, given the following grid: 4 4 .... .#.. ..#. .... Karel can follow these paths: (1,1)->(1,2)->(1,3)->(1,4)->(2,4)->(3,4)->(4,4), (1,1)->(1,2)->(1,3)->(2,3)->(3,3)->(3,4)->(4,4), and others. The number of valid paths is 6.","solution":"MOD = 10**9 + 7 def count_paths(n, m, grid): # Initialize a dp array with all zeros dp = [[0] * m for _ in range(n)] # Starting position if grid[0][0] == \'.\': dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[n-1][m-1] # Helper function to parse input def parse_input(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(line) for line in lines[1:]] return n, m, grid"},{"question":"Eve is developing a new encryption method and needs your help. Given a string s, she wants to encrypt it in such a way that every character in the string is replaced by a character that appears right after it in the alphabet. For instance, if the input string is \\"xyz\\", the encrypted string should be \\"yza\\". Write a function `encrypt_string` that takes a string s (1 ≤ |s| ≤ 1000) as input and returns the encrypted string. The input string s consists solely of lowercase Latin letters. Note that the alphabet is circular, so the character after \'z\' is \'a\'. # Input - A single string `s`. # Output - A single string representing the encrypted version of `s`. # Example Example 1: **Input:** `abcd` **Output:** `bcde` Example 2: **Input:** `xyz` **Output:** `yza` # Explanation In the first example, each character in \\"abcd\\" is shifted to the next character in the alphabet, resulting in \\"bcde\\". In the second example, the characters \\"xyz\\" are shifted to \\"yza\\", demonstrating the circular nature of the alphabet (i.e., \'z\' followed by \'a\').","solution":"def encrypt_string(s): Encrypts the string s by replacing every character with the next one in the alphabet. Args: s (str): A string consisting of lowercase Latin letters (1 ≤ |s| ≤ 1000). Returns: str: The encrypted string. encrypted = [] for char in s: if char == \'z\': encrypted.append(\'a\') else: encrypted.append(chr(ord(char) + 1)) return \'\'.join(encrypted)"},{"question":"You are given a 2D grid consisting of water (represented by \'.\') and land (represented by \'#\'). An island is defined as a group of connected lands by horizontal or vertical connections. You need to find the number of distinct islands in the given grid. Note that diagonal connections do not count. The first line of the input contains two integers m and n (1 ≤ m, n ≤ 1000) - the number of rows and columns in the grid. Each of the next m lines contains n characters (\'.\' or \'#\') - describing the state of each cell in the grid. Print a single integer - the number of distinct islands in the grid. For example, given the following grid: ``` 4 5 ..... .#. ..#.. ..... ``` The output should be 1, because there\'s only one island in the grid.","solution":"def count_islands(grid): def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] != \'#\': return grid[x][y] = \'.\' # Mark this cell as visited dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) if not grid or not grid[0]: return 0 m = len(grid) n = len(grid[0]) island_count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'#\': island_count += 1 dfs(i, j) return island_count"},{"question":"Given a string s consisting of lowercase Latin letters, determine the length of the longest substring that contains at most k distinct characters. The first line contains a single integer k (1 ≤ k ≤ 26), the maximum number of distinct characters the substring can contain. The second line contains a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase Latin letters. Print a single integer — the length of the longest substring of s that contains at most k distinct characters. For example, given k = 2 and s = \\"abaccc\\", the longest substring with at most 2 distinct characters is \\"accc\\" with a length of 4. In another example, given k = 1 and s = \\"aaabbc\\", the longest substring with at most 1 distinct character is \\"aaa\\" with a length of 3.","solution":"def longest_substring_with_k_distinct_characters(k, s): Determines the length of the longest substring with at most k distinct characters. :param k: int, the maximum number of distinct characters allowed in the substring :param s: str, the input string consisting of lowercase Latin letters :return: int, the length of the longest substring with at most k distinct characters from collections import defaultdict n = len(s) if n * k == 0: return 0 left = 0 right = 0 max_len = 1 char_map = defaultdict(int) while right < n: char_map[s[right]] += 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"In a land of wizards, spells are performed using sequences of magical runes. Each rune is represented by a character, and a spell is a sequence of runes. Two spells are said to be equivalent if one can be transformed into the other by repeatedly swapping any two adjacent runes that are different. The Grand Wizard has a collection of n spells and he wants to know how many unique spells there are in the collection. He needs your help to determine this. Your task is to write a program that takes in the spell sequences and outputs the number of unique spells in the collection based on the equivalence rule. Input: - The first line contains an integer n (1 le n le 1000) — the number of spells. - Each of the next n lines contains a spell, which is a string of lowercase English letters. The length of each spell is between 1 and 1000. Output: - Print a single integer, the number of unique spells. Example: Input: 4 abracadabra cadabraabra aabbcc ccbacb Output: 3 Explanation: - The first two spells (\\"abracadabra\\" and \\"cadabraabra\\") are equivalent since they can be transformed into each other by repeatedly swapping adjacent different runes. - The third spell (\\"aabbcc\\") is not equivalent to any other spell. - The fourth spell (\\"ccbacb\\") is also unique as it cannot be transformed into any other given spell. Hints: - Two spells are equivalent if they contain the same set of characters with the same frequency. - Consider using canonical forms or sorted representations of spells for comparison.","solution":"def count_unique_spells(spells): Returns the number of unique spells based on the equivalence rule. Two spells are equivalent if they contain the same set of characters with the same frequency. Parameters: spells (list of str): List of spell sequences. Returns: int: Number of unique spells. unique_spells = set() for spell in spells: # Create a canonical form by sorting characters canonical_spell = \'\'.join(sorted(spell)) unique_spells.add(canonical_spell) return len(unique_spells)"},{"question":"A group of n people (numbered from 1 to n) are seated around a circular table. Each person has a height associated with them. You need to determine whether it is possible to remove exactly one person from the table in such a way that the remaining people are seated in non-decreasing order of their heights in the clockwise direction. The first line contains a single integer n (3 le n le 10^5), the number of people around the table. The second line contains n space-separated integers h_1, h_2, ldots, h_n (1 le h_i le 10^9), where h_i is the height of the person in the i-th position. Print \\"YES\\" (without quotes) if it is possible to remove exactly one person so that the remaining people are seated in non-decreasing order of their heights in the clockwise direction. Otherwise, print \\"NO\\". Note that the order of the remaining individuals should follow the original order, excluding the removed individual. Also, you can print each letter in any case. Example 1: ``` Input: 4 3 1 2 4 Output: YES ``` Example 2: ``` Input: 5 5 6 3 4 2 Output: NO ``` Explanation: In the first example, if you remove the person with height 1, the heights of the remaining people are [3, 2, 4] which is in non-decreasing order considering circular table arrangement rule. In the second example, there isn\'t any way to remove one person to make the remaining heights non-decreasing in the clockwise direction. So the output is NO.","solution":"def can_remove_for_non_decreasing_heights(n, heights): def is_non_decreasing(arr): return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) for i in range(n): new_heights = heights[:i] + heights[i+1:] if is_non_decreasing(new_heights[:-1]) and new_heights[-1] >= new_heights[0]: return \\"YES\\" return \\"NO\\""},{"question":"In the mythical land of Everwood, there are `n` villages and `m` roads connecting some pairs of villages. The villagers are planning to celebrate a grand festival that requires uninterrupted supply routes between every pair of villages, meaning that there should be a path between any two villages, directly or indirectly through other villages. Unfortunately, some roads might not be operational due to wear and tear. The villagers have decided to repair a minimum number of roads to ensure all villages are reachable from any other village. You need to determine the minimum number of roads that should be added or repaired to make the supply routes uninterrupted. If the villages can\'t be connected no matter how many roads are repaired, output -1. # Input The first line contains two integers `n` (2 ≤ n ≤ 1000) and `m` (0 ≤ m ≤ 10000), the number of villages and the number of roads respectively. The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) indicating a road between villages `u` and `v`. # Output Output a single integer, the minimum number of roads that need to be added to make all the villages reachable from any other village. If it\'s impossible to connect all villages, output -1. # Example Example 1 **Input** ``` 5 3 1 2 2 3 4 5 ``` **Output** ``` 1 ``` Explanation You can repair/add the road between village 3 and village 4 to ensure all villages are connected. Example 2 **Input** ``` 5 0 ``` **Output** ``` -1 ``` Explanation Since there are no roads and we need at least (n-1) roads to connect n villages, it\'s impossible to connect all villages.","solution":"def find_minimum_roads_to_connect_villages(n, m, roads): from collections import defaultdict, deque def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) if n == 1: return 0 # Create adjacency list from the list of roads adjacency_list = defaultdict(list) for u, v in roads: adjacency_list[u].append(v) adjacency_list[v].append(u) # Check how many connected components there are visited = [False] * (n + 1) components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i, visited) components += 1 # If number of components is greater than one, we need (components - 1) roads to connect them if components == 1: return 0 return components - 1"},{"question":"A company named TroopTech has a server grid represented as a n × m matrix, where each cell contains a specific value representing the server load. TroopTech needs to reconfigure the server grid to optimize the performance by manipulating the server loads in a specific way. You can either: 1. Increase the load of a server by 1 unit. 2. Decrease the load of a server by 1 unit. 3. Do nothing to the server load. However, after making these manipulations, the goal is to ensure that the server loads in the entire grid form a single connected component of servers having identical load values. Two servers are considered connected if they share an edge. The task is to determine if it is possible to achieve this condition and if so, provide the final server grid configuration. # Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500) representing the dimensions of the server grid. The next n lines each contain m integers representing the server loads in the initial grid configuration (−10^4 ≤ a_i,j ≤ 10^4). # Output - If it is possible to reconfigure the server grid as described, print \\"YES\\". - Then in the next n lines, print m integers, the final server grid configuration where all non-zero values are equal and form a connected component. - If it is not possible to achieve the condition, print \\"NO\\". # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` YES 5 5 5 5 5 5 5 5 5 ``` Input ``` 2 2 1 2 3 4 ``` Output ``` NO ```","solution":"def can_reconfigure_grid(n, m, grid): Determines if it is possible to reconfigure the server grid such that all cells have the same load value and form a single connected component. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of list of int): Initial server grid configuration. Returns: tuple: (str, list of list of int): \\"YES\\" followed by the final server grid or \\"NO\\". # Find the median value of all the elements in the grid all_values = [] for row in grid: all_values.extend(row) median_value = int(sorted(all_values)[len(all_values)//2]) # Create a new grid with all values set to median_value new_grid = [[median_value for _ in range(m)] for _ in range(n)] return \\"YES\\", new_grid def parse_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] index = 2 for i in range(n): grid.append([int(data[index + j]) for j in range(m)]) index += m return n, m, grid if __name__ == \\"__main__\\": n, m, grid = parse_input() result, new_grid = can_reconfigure_grid(n, m, grid) print(result) if result == \\"YES\\": for row in new_grid: print(\\" \\".join(map(str, row)))"},{"question":"You are given an array of positive integers and need to perform a series of operations on them. The possible operations are: 1. Double (For each element in the current array, multiply it by 2) 2. Reverse (Reverse the order of elements in the array) Your goal is to determine the maximum possible value of the sum of array elements after performing exactly `k` operations. Each operation can be performed more than once, and in any sequence. The array will be given as input with its length, along with the number of operations `k`. Input: - The first line contains two integers `n` (1 ≤ n ≤ 100) and `k` (1 ≤ k ≤ 100), the length of the array and the number of operations you can perform. - The second line contains `n` positive integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 1000), the elements of the array. Output: - Print a single integer which is the maximum possible sum of the elements in the array after exactly `k` operations. Example: Input: ``` 5 3 1 2 3 4 5 ``` Output: ``` 60 ``` Explanation: - Operation 1: Double -> [2, 4, 6, 8, 10] - Operation 2: Double -> [4, 8, 12, 16, 20] - Operation 3: Double -> [8, 16, 24, 32, 40] - Sum of elements = 8 + 16 + 24 + 32 + 40 = 120 In this example, continuous doubling yielded the maximum sum after 3 operations.","solution":"def max_sum_after_operations(n, k, array): Given an array of length n and a number k, this function returns the maximum possible sum of elements in the array after exactly k operations. The operations can be doubling each element in the array or reversing the order of elements in the array. # The optimal strategy usually involves always doubling the elements # as the reverse operation does not change the sum of the elements. for _ in range(k): array = [x * 2 for x in array] return sum(array) # Example usage: # The input is given directly for simplicity. In an actual scenario, inputs would be taken as described. n = 5 k = 3 array = [1, 2, 3, 4, 5] print(max_sum_after_operations(n, k, array)) # Output: 120"},{"question":"You are given two strings s1 and s2. Your task is to find the length of the shortest common supersequence (SCS) of these two strings. The shortest common supersequence of two strings is the shortest string that has both s1 and s2 as subsequences. Formally, the length of SCS is the smallest possible length of a string that has both s1 and s2 as subsequences. The input contains two strings s1 and s2 in two separate lines (1 ≤ |s1|, |s2| ≤ 100). Each string consists only of lowercase English letters. Output the length of the shortest common supersequence of s1 and s2. If both strings are already subsequences of some string, the output is the length of the shortest such string. Example input: ``` abc ac ``` Example output: ``` 3 ``` In this example, the shortest common supersequence could be \\"abc\\" or \\"acb\\", both having a length of 3.","solution":"def shortest_common_supersequence_length(s1, s2): Returns the length of the shortest common supersequence of strings s1 and s2. m = len(s1) n = len(s2) # Create a DP table to store lengths of shortest common supersequences. dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the dp array. for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i - 1] == s2[j - 1]: dp[i][j] = 1 + dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] # Example input values to verify the output # s1 = \\"abc\\" # s2 = \\"ac\\" # print(shortest_common_supersequence_length(s1, s2)) # Output should be 3"},{"question":"David has an array of numbers that he wants to manipulate in order to achieve the highest possible sum under a specific set of operations. Given an array of integers of length n, David can perform the following operation as many times as he wants: - Choose a subarray of length exactly 2 and replace it with their sum. David wants to know what is the maximum sum that can be achieved by performing the above operation repeatedly until only one number remains. The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains two lines: - The first line contains a single integer n (2 ≤ n ≤ 100) — the length of the array. - The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 100). Print t lines, the answers to the test cases, each being the maximum possible sum that can be achieved for the corresponding array. Consider the following example: For the first test case, if the array is [1, 2, 3], David can: - Choose the subarray [1, 2], sum them to get a new array [3, 3]. - Then choose the subarray [3, 3], sum them to get the final sum 6. The following is sample input and output: Input: ``` 2 3 1 2 3 4 5 2 1 3 ``` Output: ``` 6 11 ``` In the second test case, the optimal series of operations can be: - Choose [5, 2], resulting in [7, 1, 3]. - Choose [7, 1], resulting in [8, 3]. - Finally, choose [8, 3], resulting in 11.","solution":"def max_sum_subarray(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] results.append(sum(a)) return results"},{"question":"Aliens from the planet Zog have a unique numbering system consisting of only two digits: A and B. However, their numbering system follows specific rules for valid numbers: 1. Any valid Zog number must start with an \\"A\\". 2. The digit \\"A\\" can be followed by zero or more \\"A\\"s. 3. After any number of \\"A\\"s, there must be one or more \\"B\\"s consecutively; no \\"A\\" can appear after a \\"B\\" in a valid Zog number. Given a string s of length n consisting of characters \'A\' and \'B\', determine if it represents a valid Zog number. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains the string s of length n consisting of characters \'A\' and \'B\'. Print \\"VALID\\" if the string s represents a valid Zog number. Otherwise, print \\"INVALID\\". Examples: Input: 5 AAABB Output: VALID Input: 6 AABABA Output: INVALID Input: 3 ABB Output: VALID","solution":"def is_valid_zog_number(s): Determines if a given string s is a valid Zog number. # Check if the string starts with \'A\' if not s.startswith(\'A\'): return \\"INVALID\\" # Find the index of the first \'B\' first_b_index = s.find(\'B\') # If there is no \'B\', it\'s invalid if first_b_index == -1: return \\"INVALID\\" # Ensure no \'A\' appears after the first \'B\' if \'A\' in s[first_b_index:]: return \\"INVALID\\" return \\"VALID\\""},{"question":"You are given a 2D grid with `n` rows and `m` columns. Some cells in the grid contain obstacles represented by the character `#`, other cells are empty spaces represented by the character `.`. You can move up, down, left, or right from an empty cell to another empty cell. The top-left cell `(1, 1)` is the start position, and the bottom-right cell `(n, m)` is the goal position. You need to calculate the minimum number of steps to move from the start position to the goal position. If it is impossible to reach the goal, return `-1`. **Input** - The first line contains two integers `n` and `m` (`1 <= n, m <= 1000`) — the number of rows and columns of the grid. - The next `n` lines contain `m` characters each — the grid itself. **Output** - Print the minimum number of steps needed to reach the goal position from the start position. If it is impossible, print `-1`. **Example** Input: ``` 5 5 ..... .#.#. .#.#. .#... ..... ``` Output: ``` 8 ``` Explanation: One of the possible paths of length 8: - Start at (1,1) - Move to (1,2) - Move to (1,3) - Move to (1,4) - Move to (2,4) - Move to (3,4) - Move to (4,4) - Move to (4,5) - Reach goal (5,5) **Constraints** - The grid will always have `1` at the start and end positions. - You can assume that there exists at least one path if the grid is entirely empty. Hint: You can use Breadth-First Search (BFS) to explore the grid and find the shortest path.","solution":"from collections import deque def min_steps_to_goal(n, m, grid): Function to calculate the minimum number of steps to move from the start position (1, 1) to the goal position (n, m) in a grid. # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue for BFS and visited set queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set() visited.add((0, 0)) while queue: x, y, steps = queue.popleft() # Check if we have reached the bottom-right corner if x == n - 1 and y == m - 1: return steps # Explore all 4 possible directions from the current cell for dx, dy in directions: new_x, new_y = x + dx, y + dy # Check if the new cell is within bounds and is not an obstacle if 0 <= new_x < n and 0 <= new_y < m and (new_x, new_y) not in visited and grid[new_x][new_y] == \'.\': queue.append((new_x, new_y, steps + 1)) visited.add((new_x, new_y)) # If we exit the loop without having returned, there\'s no valid path return -1"},{"question":"A company is organizing a team-building event where employees will form teams to participate in various activities. Each team must consist of exactly `k` employees. Each employee has a skill level, and the company wants to maximize the skill level of the least skilled employee in each team, ensuring all teams are as strong as possible. To achieve this, the company decides to arrange the employees in descending order of their skill levels and then form teams sequentially from this sorted list. However, to account for possible variations in skill levels, they want you to determine the minimum possible skill level of the least skilled employee in the weakest team after forming the teams. The first line of the input contains two integers `n` (the number of employees) and `k` (the size of each team) where `1 ≤ k ≤ n ≤ 100,000`. The second line contains `n` integers representing the skill levels of the employees, where each skill level is between `1` and `10^9`. Output a single integer, the minimum skill level of the least skilled employee in the weakest team. **Examples:** **Input:** ``` 7 3 15 10 7 8 9 14 5 ``` **Output:** ``` 8 ``` **Explanation:** The sorted skill levels are: `15, 14, 10, 9, 8, 7, 5`. The teams formed are: `[15, 14, 10]`, `[9, 8, 7]`. The last team is `[9, 8, 7]`, and the least skilled employee in this team has a skill level of `7`. To get the minimum skill level of the least skilled employee in the weakest team, we look at `n/k` full teams. In this case, there is one full team of size `3`, so we consider the skill levels of the 3rd employee in the sorted list.","solution":"def min_skill_of_weakest_team(n, k, skill_levels): # Sort the skill levels in descending order skill_levels.sort(reverse=True) # The minimum skill level of the least skilled employee in the weakest team # will be the k-th element in the sorted list return skill_levels[k-1]"},{"question":"Evelyn is an artist who creates intricate, mosaic-like grids. For her latest project, she plans to color a grid consisting of M rows and N columns. Each cell in the grid can be either colored or uncolored. Evelyn wants to maximize the number of connected components of colored cells, where a connected component is defined as a group of adjacent (vertically or horizontally neighboring) colored cells. Evelyn can perform a series of operations, where in each operation she selects any cell and toggles its state (from colored to uncolored or from uncolored to colored). Given the initial configuration of the grid, help Evelyn determine the maximum number of connected components she can achieve after any number of such toggle operations. The first line contains two integers, M and N (1 ≤ M, N ≤ 1000), representing the number of rows and columns of the grid, respectively. Each of the next M lines contains N characters, where each character is either \'.\' (representing an uncolored cell) or \'#\' (representing a colored cell). Output a single integer, the maximum number of connected components that Evelyn can achieve after any number of toggle operations. Input: ``` 4 4 ..#. .#.. ..#. .... ``` Output: ``` 8 ``` In this example, Evelyn can maximize the number of connected components to 8 by toggling all cells to be colored in such a way that no two adjacent cells are both colored. This maximizes the count of distinct connected components.","solution":"def max_connected_components(M, N, grid): Determines the maximum number of connected components of colored cells in a grid after performing optimal toggle operations. Args: M : int : number of rows in the grid N : int : number of columns in the grid grid : list of list of str : the initial configuration of the grid Returns: int : the maximum number of connected components # The maximum number of connected components is achieved by coloring each cell such that # no two adjacent cells are both colored. max_components = (M * N + 1) // 2 return max_components"},{"question":"Dana is a fan of palindrome words and sentences. One day, she came up with an interesting challenge. She wants to check if it is possible to rearrange the characters of a given word or sentence to form a palindrome. A palindrome is a sequence that reads the same backward as forward. Given a word or sentence, you need to determine if it is possible to rearrange the characters to form a palindrome. Please note that the input may contain spaces and punctuation, which should be ignored for the purpose of palindrome formation. Only letters should be considered, and the check should be case-insensitive. The input consists of a single line containing the word or sentence which may have spaces and punctuation. The total length of the input does not exceed 10^6 characters. Output \\"YES\\" (without the quotes) if it is possible to rearrange the letters to form a palindrome, and \\"NO\\" (without the quotes) otherwise. For example, given the input \\"A man, a plan, a canal: Panama\\", the output should be \\"YES\\", since the characters can be rearranged to form a palindrome. Another example: for the input \\"Hello, World!\\", the output should be \\"NO\\". Write a program to solve Dana\'s challenge.","solution":"from collections import Counter import re def can_form_palindrome(s): Determines if the characters of the given string can be rearranged to form a palindrome. # Normalize the input by removing non-alphabet characters and converting to lowercase s = re.sub(r\'[^a-zA-Z]\', \'\', s).lower() # Count the frequency of each character freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Alex works as a coordinator for a marathon event. He is responsible for setting up water stations along the marathon route. Due to the limitations of resources, Alex needs to decide the optimal placement of water stations such that the distance between any participant and the closest water station is minimized. Suppose there is a one-dimensional marathon route represented by an array of length `n` (0-based index), where each element represents a position along the route that a water station can be placed. You are given `m` water station positions along the route and `k` runners. Each runner can start at any position on the route but their positions are initially unknown. Given the positions of the water stations and the fact that runners can start at any position from 0 to n-1, find the maximum distance each runner has to cover to reach any water station. # Input: - The first line contains three integers `n` (1 ≤ n ≤ 100,000), `m` (1 ≤ m ≤ n), and `k` (1 ≤ k ≤ n) – the length of the marathon route, the number of water stations, and the number of runners, respectively. - The second line contains `m` distinct integers representing the positions of the water stations. # Output: - Output a single integer representing the maximum distance any runner has to cover to reach the closest water station. # Example: Input: ``` 10 3 5 2 5 9 ``` Output: ``` 2 ``` Explanation: - The marathon route is represented by positions from 0 to 9. - Water stations are placed at positions 2, 5, and 9. - The runner starting at position 0 has to travel a distance of 2 to reach the closest water station (at position 2). - The runner starting at position 1 has to travel a distance of 1 to reach the closest water station (at position 2). - The runner starting at position 3 has to travel a distance of 1 to reach the closest water station (at position 2). - The runner starting at position 4 has to travel a distance of 1 to reach the closest water station (at position 5). - The runner starting at position 9 has to travel a distance of 0 to reach the closest water station (at position 9). - The maximum distance any runner has to cover is 2. The expected output is therefore `2`.","solution":"def max_distance_to_station(n, m, k, stations): Returns the maximum distance any runner has to cover to reach the closest water station. # Sort the water stations stations.sort() # Initialize maximum distance max_distance = 0 # Check the distance from each position to the closest water station for i in range(n): left = 0 right = m - 1 # Binary search to find the closest station while left < right: mid = (left + right) // 2 if stations[mid] < i: left = mid + 1 else: right = mid closest_distance = abs(stations[left] - i) # Check the station on the left side if any if left > 0: closest_distance = min(closest_distance, abs(stations[left - 1] - i)) max_distance = max(max_distance, closest_distance) return max_distance"},{"question":"Having recently acquired a new interest in poker games, Victor decided to create various hands of cards and analyze their probabilities. Each hand is a random combination of 5 cards drawn from a standard 52-card deck. He wants to automatically classify these hands according to common poker hand rankings such as \\"Full House\\", \\"Flush\\", \\"Straight\\", etc. Given a poker hand, determine its highest-ranking category according to the standard poker rules. Your task is to write a program that can classify a poker hand based on its cards. The first line of input contains 5 strings representing the cards in the hand. Each string consists of a rank (one of \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'T\', \'J\', \'Q\', \'K\', \'A\') and a suit (\'C\', \'D\', \'H\', \'S\'). Output a single string indicating the highest-ranking poker hand of the given cards. The possible outputs are (in ranking order): \\"High Card\\", \\"One Pair\\", \\"Two Pair\\", \\"Three of a Kind\\", \\"Straight\\", \\"Flush\\", \\"Full House\\", \\"Four of a Kind\\", \\"Straight Flush\\", \\"Royal Flush\\". Consider the first example where the given hand is \\"AS\\", \\"KS\\", \\"QS\\", \\"JS\\", \\"TS\\". The output should be \\"Royal Flush\\". In the second example where the input hand is \\"2D\\", \\"4H\\", \\"4C\\", \\"2S\\", \\"2H\\", the output should be \\"Full House\\". Example 1: Input: AS KS QS JS TS Output: Royal Flush Example 2: Input: 2D 4H 4C 2S 2H Output: Full House","solution":"def classify_poker_hand(hand): from collections import Counter def rank_value(rank): if rank in \'23456789\': return int(rank) elif rank == \'T\': return 10 elif rank == \'J\': return 11 elif rank == \'Q\': return 12 elif rank == \'K\': return 13 elif rank == \'A\': return 14 def is_straight(ranks): sorted_ranks = sorted(rank_value(rank) for rank in ranks) return all(sorted_ranks[i] - sorted_ranks[i - 1] == 1 for i in range(1, 5)) def is_flush(suits): return len(set(suits)) == 1 def classify_by_counts(counts): if 4 in counts.values(): return \'Four of a Kind\' elif 3 in counts.values() and 2 in counts.values(): return \'Full House\' elif 3 in counts.values(): return \'Three of a Kind\' elif sum(1 for x in counts.values() if x == 2) == 2: return \'Two Pair\' elif 2 in counts.values(): return \'One Pair\' else: return \'High Card\' ranks = [card[0] for card in hand] suits = [card[1] for card in hand] ranks_count = Counter(ranks) if is_straight(ranks) and is_flush(suits): if sorted(rank_value(rank) for rank in ranks) == [10, 11, 12, 13, 14]: return \'Royal Flush\' else: return \'Straight Flush\' if is_flush(suits): return \'Flush\' if is_straight(ranks): return \'Straight\' return classify_by_counts(ranks_count) # Examples: # print(classify_poker_hand([\\"AS\\", \\"KS\\", \\"QS\\", \\"JS\\", \\"TS\\"])) # \'Royal Flush\' # print(classify_poker_hand([\\"2D\\", \\"4H\\", \\"4C\\", \\"2S\\", \\"2H\\"])) # \'Full House\'"},{"question":"Madeline has a row of `n` books lined up on a shelf, each book having a unique height. Madeline loves to read books in increasing order of height, but she finds rearranging the books exhausting. Thus, she wants to minimize the number of books that need to be rearranged. Formally, she wants to find the length of the longest increasing subsequence (LIS) among the given books\' heights. A subsequence is derived from the list by deleting some (or none) of the elements in such a way that the order of the remaining elements is maintained. The first line of the input contains a single integer `n` (1 ≤ `n` ≤ 1000) — the number of books on the shelf. The second line contains `n` space-separated integers `h1, h2, ..., hn` (1 ≤ `hi` ≤ 10^9) — the heights of the books in the order they are lined up from left to right. Output a single integer — the length of the longest increasing subsequence of book heights. # Example Input: ``` 6 5 2 8 6 3 6 9 ``` Output: ``` 4 ``` # Explanation: In the example, the longest increasing subsequence is `2, 6, 6, 9` or `2, 3, 6, 9`, both of which have a length of 4.","solution":"def length_of_lis(books): Returns the length of the longest increasing subsequence (LIS) in the list of book heights. if not books: return 0 n = len(books) dp = [1] * n for i in range(1, n): for j in range(i): if books[i] > books[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a string `s` consisting of lowercase English letters. You need to check if the given string is a palindrome after performing at most one operation: either removing a single character or replacing a single character with any lowercase English letter. The first line of the input contains the string `s`. The length of the string will be between 1 and 100, inclusive. Print \\"YES\\" if it is possible to make the string a palindrome by performing at most one operation, otherwise print \\"NO\\". Example: Input: abca Output: YES Explanation: By replacing the \'b\' with \'c\', or by removing the \'b\', the string can be transformed into a palindrome \\"acca\\" or \\"aca\\", respectively. Thus, the answer is \\"YES\\".","solution":"def can_be_palindrome_with_one_operation(s): def is_palindrome(x): return x == x[::-1] # If the string is already a palindrome. if is_palindrome(s): return \\"YES\\" for i in range(len(s)): # Try removing a single character if is_palindrome(s[:i] + s[i+1:]): return \\"YES\\" # Try replacing a single character for c in \'abcdefghijklmnopqrstuvwxyz\': if s[i] != c: if is_palindrome(s[:i] + c + s[i+1:]): return \\"YES\\" return \\"NO\\""},{"question":"Alice loves playing with toys. She bought a new toy robot that moves in a specific way on a 2D grid. The grid is represented by an n × m matrix of cells, where each cell might contain an obstacle. The robot starts at the top-left corner of the grid and its goal is to reach the bottom-right corner. The robot can move up, down, left, or right, but it cannot move into cells with obstacles or outside of the grid\'s boundaries. Alice wants to determine if the robot can reach its goal. Given n, m, and the grid\'s layout, determine if there is a path from the top-left corner to the bottom-right corner. The first line of input contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next n lines each contain a string of length m, representing the layout of the grid. Each character of the string is either a \'.\' (free cell) or \'#\' (obstacle). Output \\"Yes\\" (without quotes) if there is a path from top-left to bottom-right, and \\"No\\" (without quotes) otherwise.","solution":"def can_reach_goal(n, m, grid): Determines if there is a path from the top-left corner to the bottom-right corner of the grid. :param n: int - number of rows :param m: int - number of columns :param grid: list of strings - the grid layout :return: str - \\"Yes\\" if there\'s a path, \\"No\\" otherwise from collections import deque # Directions arrays for up, down, left, and right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if the starting or ending cell is an obstacle if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"No\\" # Initialize the queue with the starting position queue = deque([(0, 0)]) # Create a visited set to keep track of visited cells visited = set((0, 0)) while queue: x, y = queue.popleft() # If we reach the bottom-right corner, return \\"Yes\\" if x == n-1 and y == m-1: return \\"Yes\\" # Explore all possible movements for dx, dy in directions: nx, ny = x + dx, y + dy # Check boundaries and obstacles if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"No\\""},{"question":"Alice and Bob are playing a game with a sequence of numbers. The game utilizes a sequence of n unique integers, a1, a2, ..., an. They can perform the following operation any number of times: select any two indices i and j (1 ≤ i, j ≤ n) and swap ai and aj. However, Alice and Bob want to sort the sequence in the fewest number of swaps while following a specific rule. The rule is that for any selected indices i and j, the absolute difference between the values of ai and aj must be less than or equal to a given integer k. If it is impossible to sort the sequence under the given constraint, they should know immediately. Your task is to determine the minimum number of swaps required to sort the sequence, or if it\'s impossible to sort the sequence under the given constraint. Input starts with two integers n (1 ≤ n ≤ 100,000) and k (1 ≤ k ≤ 1,000,000). The next line contains n unique integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000). Output the minimum number of swaps required to sort the sequence according to the given rule, or -1 if it is impossible. Example: Input: 5 3 4 3 2 1 5 Output: 2 Explanation: One of the optimal solutions is to swap (1, 4) to get [1, 3, 2, 4, 5], and then swap (2, 3) to get [1, 2, 3, 4, 5]. This requires 2 swaps, and each swap fulfills the condition |ai - aj| ≤ 3.","solution":"from collections import deque def min_swaps_to_sort_sequence(n, k, arr): Determine the minimum number of swaps to sort the sequence under the constraint that the absolute difference between swapped elements must be less than or equal to k. # Helper function to perform BFS to find the smallest distance def bfs(start, graph, visited): queue = deque([start]) visited[start] = True component = [] while queue: node = queue.popleft() component.append(node) for neighbour in graph[node]: if not visited[neighbour]: visited[neighbour] = True queue.append(neighbour) return component # Create nodes based on their positions in the sorted array sorted_arr = sorted(arr) lookup = {value: i for i, value in enumerate(arr)} # Create the graph for allowed swaps graph = {i: [] for i in range(n)} for i in range(n): for j in range(i + 1, n): if abs(arr[i] - arr[j]) <= k: graph[i].append(j) graph[j].append(i) visited = [False] * n swaps = 0 # Find all connected components in the graph for i in range(n): if not visited[i]: component = bfs(i, graph, visited) component_values = [arr[x] for x in component] sorted_component_values = sorted(component_values) for idx, val in zip(component, sorted_component_values): if arr[idx] != val: swaps += 1 arr[idx] = val for i in range(n): if arr[i] != sorted_arr[i]: return -1 return swaps // 2 # Each swap is counted twice, so divide by 2."},{"question":"Gina loves organizing books in her library. She has a uniquely designed shelf system that can hold books upright. The shelves have the same width but different heights, and each shelf can only hold a certain number of books based on their heights. Gina has a certain number of shelves, and each shelf has a maximum height and a specific capacity (number of books it can hold). Additionally, she has a collection of books, each with a specific height. Gina wants to place all her books on the shelves such that the shelves are utilized optimally. The problem is to find an optimal way to place the books on the shelves so that the total number of shelves used is minimized. # Input - The first line contains an integer `n` (1 le n le 1000) – the number of books. - The second line contains `n` integers where the `i-th` integer represents the height `h_i` (1 le h_i le 1000) of the `i-th` book. - The third line contains an integer `m` (1 le m le 1000) – the number of shelves. - The next `m` lines contain two integers each: `s_i` and `c_i` where `s_i` (1 le s_i le 1000) is the maximum height the `i-th` shelf can hold and `c_i` (1 le c_i le 1000) is the capacity (maximum number of books) of the `i-th` shelf. # Output - Print one integer – the minimum number of shelves needed to place all the books, or `-1` if it is not possible to place all books on the given shelves. # Example Input ``` 5 3 2 4 1 2 3 4 2 5 3 3 2 ``` Output ``` 2 ``` In the example above, using the second and third shelves allows placing all 5 books optimally.","solution":"def min_shelves_for_books(n, book_heights, m, shelves): Find the minimum number of shelves needed to place all books optimally. Parameters: n (int): The number of books. book_heights (list): A list of integers where the ith integer represents the height of the ith book. m (int): The number of shelves. shelves (list): A list of tuples where each tuple contains two integers - the maximum height the shelf can hold and the capacity (maximum number of books) of the shelf. Returns: int: The minimum number of shelves needed or -1 if it is not possible to place all books. # Filtering shelves that can actually hold at least one book valid_shelves = [shelf for shelf in shelves if shelf[0] >= min(book_heights)] valid_shelves.sort(key=lambda x: (-x[1], x[0])) # Sort by capacity descending and then by height ascending # A list to hold the current shelves being used and the number of books on each used shelf shelves_used = [] for height in book_heights: placed = False for i, (shelf_max_height, available_space) in enumerate(shelves_used): if height <= shelf_max_height and available_space > 0: shelves_used[i] = (shelf_max_height, available_space - 1) placed = True break if not placed: for shelf in valid_shelves: if height <= shelf[0] and shelf[1] > 0: valid_shelves.remove(shelf) shelves_used.append((shelf[0], shelf[1] - 1)) placed = True break if not placed: return -1 return len(shelves_used)"},{"question":"In a faraway land, there is a magical forest with n trees arranged in a single line. Each tree has a certain height. A woodcutter wants to cut down some of these trees such that the remaining trees have non-decreasing heights from left to right. The woodcutter can perform two types of operations: 1. Cut down a tree: This completely removes the tree from the forest. 2. Decrease the height of a tree: This operation can decrease the height of any tree by any amount. Given the initial heights of the trees, determine the minimum number of cuts or decreases needed to make the heights of the remaining trees non-decreasing from left to right. The first line contains a single integer n (1 ≤ n ≤ 200,000) — the number of trees. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1,000,000) — the heights of the trees. Output the minimum number of operations needed. For example, if there are 5 trees and their heights are [3, 4, 7, 6, 8], the optimal solution is to decrease the height of the 7th tree to 6, and the minimum number of operations is 1.","solution":"def min_operations_to_non_decreasing(heights): Returns the minimum number of operations needed to make the heights of trees non-decreasing. Operation can be either cutting down a tree or decreasing the height of a tree. n = len(heights) if n <= 1: return 0 # Create a list for tracking the minimum operations dp = [0] * n # Fill the dp array for i in range(1, n): if heights[i] >= heights[i - 1]: dp[i] = dp[i - 1] else: # either cut down this tree or decrease its height dp[i] = dp[i - 1] + 1 return dp[-1]"},{"question":"You are given a connected undirected graph with n nodes and m edges. Each edge has a weight associated with it. Your task is to find a path from node 1 to node n such that the maximum weight of edges in this path is minimized. In other words, you want to find a path from node 1 to node n where the largest edge weight is as small as possible among all possible paths. Input Format: - The first line contains two space-separated integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of nodes and the number of edges, respectively. - Each of the next m lines contains three space-separated integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), meaning that there is an edge between nodes u and v with weight w. Output Format: - Output a single integer, the minimized maximum edge weight in the path from node 1 to node n. Example Input: ``` 5 6 1 2 4 1 3 2 2 4 6 3 4 8 3 5 4 4 5 1 ``` Example Output: ``` 4 ``` Explanation: There are several paths from node 1 to node 5. The path with the minimized maximum edge weight is 1 -> 2 -> 4 -> 5 with edge weights [4, 6, 1], the maximum of which is 6. Another path with minimized edge weight is 1 -> 3 -> 5 with weights [2, 4], the maximum of which is 4. The smallest possible maximum edge weight is 4.","solution":"import heapq def find_minimized_max_edge_weight(n, m, edges): def can_pass_with_max_weight(max_weight): visited = [False] * (n + 1) queue = [1] visited[1] = True while queue: node = queue.pop(0) if node == n: return True for neighbor, weight in graph[node]: if not visited[neighbor] and weight <= max_weight: visited[neighbor] = True queue.append(neighbor) return False graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) left, right = 1, max(w for _, _, w in edges) result = right while left <= right: mid = (left + right) // 2 if can_pass_with_max_weight(mid): result = mid right = mid - 1 else: left = mid + 1 return result # Example usage: n = 5 m = 6 edges = [ (1, 2, 4), (1, 3, 2), (2, 4, 6), (3, 4, 8), (3, 5, 4), (4, 5, 1) ] print(find_minimized_max_edge_weight(n, m, edges)) # Output: 4"},{"question":"A company is organizing a hackathon event in which n participants are scheduled to attend. Each participant has specified the times they are available during the day. You are asked to create a program that finds the maximum number of non-overlapping time slots during which the participants can attend any sessions. Each time slot is represented by a pair of integers (start, end), showing the start time and end time of the slot. An event can only take place if it starts after the previous one has ended. Your task is to determine the maximum number of such non-overlapping events that can be held in one day. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of participants. Each of the next n lines contains two integers start and end (0 ≤ start < end ≤ 10^6) - the start time and the end time of the available slot for each participant. Output one integer — the maximum number of non-overlapping time slots that can be scheduled. Input: The first line contains an integer n. Each of the next n lines contains two integers, start and end, representing the available time slots. Output: Print a single integer — the maximum number of non-overlapping time slots. Example: Input: 5 1 3 2 4 3 5 6 8 7 9 Output: 3 Explanation: In this case, the maximum number of non-overlapping events that can be scheduled are: - (1, 3) - (3, 5) - (6, 8)","solution":"def max_non_overlapping_events(n, time_slots): Finds the maximum number of non-overlapping time slots. Parameters: n (int): Number of participants time_slots (list of tuples): List of start and end times of available slots. Returns: int: Maximum number of non-overlapping time slots. # Sort the time slots based on the end time time_slots.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in time_slots: if start >= end_time: count += 1 end_time = end return count"},{"question":"In the kingdom of Zarton, there is a rectangular maze represented by an n x m grid, where each cell of the grid can be either empty (represented by \'.\') or blocked (represented by \'#\'). The king wants to know if it is possible for a knight, starting from the top-left corner of the maze (cell (1,1)), to reach the bottom-right corner (cell (n,m)) without passing through any blocked cells and by following specific movement rules of a knight in chess. The valid moves for the knight are: L-shapes either two cells in one direction and then one cell perpendicular, or one cell in one direction and then two cells perpendicular. Write a program to determine if the knight can reach the bottom-right corner from the top-left corner. # Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500) – the dimensions of the maze. The next n lines contain m characters each, where each character is either \'.\' (an empty cell) or \'#\' (a blocked cell). # Output Print \\"YES\\" if the knight can reach the bottom-right corner; otherwise, print \\"NO\\". # Example Input ``` 5 5 ..... .#... ..... ...#. ..... ``` Output ``` YES ``` Input ``` 5 5 ..... .#... ..... ...#. ....# ``` Output ``` NO ``` # Notes - The knight can only move within the boundaries of the maze. - The maze grid is indexed starting from 1 for both rows and columns. - The maze may have multiple valid paths or no path at all.","solution":"def can_knight_reach_end(n, m, maze): from collections import deque # Possible moves of a knight in chess knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)] # Start from (0, 0) start = (0, 0) end = (n-1, m-1) # Initialize the queue with the start position and visited set queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == end: return \\"YES\\" for dx, dy in knight_moves: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and maze[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"A city planning team is tasked with designing a number of parks throughout the city. Each park must be a square, and the side length of each square is represented by the number of grids it covers. Given a map of the city represented as an n x m grid, cells occupied by buildings are marked as 1, and empty cells where parks can be placed are marked as 0. The goal is to find the largest possible side length of a square park that can be placed on the grid without overlapping any buildings. If there is no space to place even the smallest park (1x1), return -1. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns in the grid, respectively. The next n lines contain m integers each (either 0 or 1) representing the city\'s grid map. Print a single integer representing the largest possible side length of a park that can be placed on the grid. If no such park can be placed, print -1. **Examples:** **Input:** ``` 5 5 0 0 1 0 0 0 0 1 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 ``` **Output:** ``` 2 ``` **Input:** ``` 3 3 1 1 1 1 1 1 1 1 1 ``` **Output:** ``` -1 ``` **Input:** ``` 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ``` **Output:** ``` 4 ``` Explanation: In the first example, the largest possible square park that can be placed has a side length of 2. In the second example, there are no empty spaces to place a park, so the output is -1. In the third example, the entire grid is empty, so the largest possible park covers the entire grid with a side length of 4.","solution":"def largest_possible_park(grid): n = len(grid) m = len(grid[0]) # Create a dynamic programming table to keep track of the largest square ending at (i, j) dp = [[0]*m for _ in range(n)] max_side_length = 0 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == 0: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) if max_side_length == 0: return -1 return max_side_length"},{"question":"Alice and Bob are playing a game with a series of numbers. They take turns, starting with Alice, to remove one number from the series until there are no more numbers left. After each removal, they check the greatest common divisor (GCD) of the remaining numbers. The player who removes a number that makes the GCD of the remaining numbers equal to 1 loses the game. If the initial GCD of the series is already 1, Alice loses the game immediately. Your task is to determine the winner of the game if both Alice and Bob play optimally. The first line of input contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each test case is described by two lines. The first line contains a single integer n (2 ≤ n ≤ 100), the number of integers in the series. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100). Output t lines, each containing \\"Alice\\" or \\"Bob\\" depending on who wins the game. Example: Input: 3 3 6 10 15 2 3 6 4 2 4 6 8 Output: Alice Bob Alice Explanation: 1. For the first test case, the initial GCD is 1. Alice loses immediately. 2. For the second test case, removing either 3 or 6 will leave a sequence with a GCD of 3. Bob can always force Alice to take the number that will make the GCD 1 on her next turn. 3. For the third test case, no matter what numbers are removed, the GCD can never be reduced to 1 directly from the other player’s optimal moves until Alice forces Bob into a losing position. Note: In this game, both players are intelligent and will make optimal moves to win or avoid losing.","solution":"from math import gcd from functools import reduce def find_winner(n, series): Determines the winner of the game given the series of numbers. :param n: Number of integers in the series :param series: List of integers in the series :return: \'Alice\' or \'Bob\' depending on who the winner is initial_gcd = reduce(gcd, series) # If the initial GCD is 1, Alice loses immediately. if initial_gcd == 1: return \\"Alice\\" # If the initial GCD is not 1, Alice can ensure Bob loses. return \\"Bob\\" def game_winner(t, test_cases): Determines the winner for each test case. :param t: Number of test cases :param test_cases: List of tuples where each tuple contains number of integers and the list of integers :return: List of strings where each string is either \'Alice\' or \'Bob\' results = [] for n, series in test_cases: results.append(find_winner(n, series)) return results"},{"question":"A community of N friends decides to celebrate their friendship by creating an artwork. They want to form a circle and hold hands. However, because they\'ve been friends for so long, some of them have developed rivalries and will not hold hands with their rivals. You are given a list of rival pairs among these N friends. You are tasked with determining if it\'s possible to arrange all N friends in a circle such that no two rivals are next to each other. Input: - The first line contains an integer N (3 ≤ N ≤ 100), the number of friends. - The second line contains an integer M (0 ≤ M ≤ N*(N-1)/2), the number of rival pairs. - Each of the following M lines contains two integers a and b (1 ≤ a, b ≤ N, a ≠ b), indicating that friend a and friend b are rivals and cannot be next to each other. Output: - Print \\"Possible\\" if it is possible to arrange the friends in a circle with no rivals next to each other, otherwise print \\"Impossible\\". Example: Input: ``` 5 3 1 2 2 3 4 5 ``` Output: ``` Possible ``` Input: ``` 4 3 1 2 2 3 3 1 ``` Output: ``` Impossible ```","solution":"def is_circle_possible(N, M, rivals): from collections import defaultdict # Create a graph from the rival list graph = defaultdict(set) for a, b in rivals: graph[a].add(b) graph[b].add(a) # Function to check if the circle is valid def is_valid_circle(circle): for i in range(len(circle)): if circle[i] in graph[circle[i-1]]: return False return True # Function to generate all permutations of friends from itertools import permutations for perm in permutations(range(1, N + 1)): if is_valid_circle(perm): return \\"Possible\\" return \\"Impossible\\" # Reading input and calling the function def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) rivals = [] index = 2 for _ in range(M): a = int(data[index]) b = int(data[index+1]) rivals.append((a, b)) index += 2 # Get the result result = is_circle_possible(N, M, rivals) print(result) # If running as a standalone script, remove # the comment from the below two lines. # if __name__ == \\"__main__\\": # main()"},{"question":"Alice and Bob are playing a game with an array of integers. They take turns, starting with Alice, to perform the following operation on the array: 1. Select any two distinct elements from the array. 2. Remove both of the selected elements from the array and insert their sum back into the array. The game continues until there is only one element remaining in the array, at which point the game ends. The player who cannot make a move (i.e., when only one element remains) loses the game. Your task is to determine if Alice will win the game if both players play optimally. Input Format: - The first line contains an integer ( t ) (( 1 le t le 10^4 )) — the number of test cases. - Each of the next ( t ) lines describes a test case. - The first line of each test case contains an integer ( n ) (( 2 le n le 10^5 )) — the number of elements in the array. - The second line of each test case contains ( n ) integers ( a_1, a_2, ..., a_n ) (( 1 le a_i le 10^9 )) — the elements of the array. Output Format: - For each test case, print \\"Alice\\" if Alice wins the game, otherwise print \\"Bob\\". Example: Input: 3 3 1 2 3 4 1 3 3 7 2 4 6 Output: Alice Bob Alice Explanation: 1. In the first test case, Alice will always win because there are an odd number of elements (3). 2. In the second test case, Bob will win because there are an even number of elements (4). 3. In the third test case, Alice will win because there are an even number of elements at the start, and Alice can always make a move that leaves Bob with an odd number of elements. Note: - Alice wins if the initial number of elements ( n ) is odd. - Bob wins if the initial number of elements ( n ) is even, assuming both play optimally.","solution":"def game_winner(arr): Determine the winner of the game given an array of integers. n = len(arr) return \\"Alice\\" if n % 2 == 1 else \\"Bob\\" def determine_winners(test_cases): Determine the winners for multiple test cases. Parameters: - test_cases: a list of tuples, each containing the number of elements (n) and the array of integers Returns: - a list of strings, each being either \\"Alice\\" or \\"Bob\\" based on the winner for each test case results = [] for (n, arr) in test_cases: results.append(game_winner(arr)) return results"},{"question":"You are given a set of rectangular envelopes, each with a width and a height. One envelope can fit into another if both the width and height of one envelope are strictly smaller than the width and height of the other envelope. Your task is to determine the longest sequence of envelopes you can put one inside the other and output the length of this sequence. The first line contains an integer n (1 ≤ n ≤ 10^4), the number of envelopes. Each of the next n lines contains two integers wi and hi (1 ≤ wi, hi ≤ 10^4), representing the width and height of the ith envelope. Print a single integer, the length of the longest sequence of envelopes that can be nested. Given the following example: Input: 5 5 4 6 4 6 7 2 3 5 5 Output: 3 Explanation: The longest sequence of envelopes you can use is: [2, 3] -> [5, 4] -> [6, 7].","solution":"from bisect import bisect_left def max_envelopes(envelopes): Determines the longest sequence of envelopes you can put one inside the other. :param envelopes: List of tuples where each tuple contains two integers (width and height of the envelope). :returns: The length of the longest sequence of envelopes. # First sort envelopes by width ascending and by height descending envelopes.sort(key=lambda x: (x[0], -x[1])) # Extract the heights from the sorted envelopes heights = [h for _, h in envelopes] # Find the length of the Longest Increasing Subsequence (LIS) on heights lis = [] for height in heights: pos = bisect_left(lis, height) if pos < len(lis): lis[pos] = height else: lis.append(height) return len(lis)"},{"question":"In an enchanted forest, there\'s a magical tree with `n` nodes, each representing a creature. Every node `i` (1 ≤ `i` ≤ n) is connected to exactly one parent node except for the root node which has no parent. Every node has an initial power level `p_i`. The creatures in this forest have a special ability: they can transfer power to their parent node, losing that amount of power themselves. However, power transfer can only happen once per creature, and only in a single direction from child to parent. Given the structure of the tree and the initial power levels of each node, you need to determine the maximal total power that can be concentrated in the root node by optimally choosing which creatures should transfer their power to their parent. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of nodes in the tree. - The second line contains `n-1` integers `p_2, p_3, ..., p_n` (1 ≤ p_i ≤ n) where `p_i` is the parent node of node `i`. - The third line contains `n` integers `p_1, p_2, ..., p_n` — the initial power levels of the nodes. Output: - Print a single integer — the maximal total power that can be concentrated in the root node. Example: Input: ``` 5 1 1 2 2 1 2 3 4 5 ``` Output: ``` 15 ``` Explanation: In the given example: - Node 5 transfers its power to node 2. - Node 4 transfers its power to node 2. - Node 2 transfers its accumulated power (initial power + received power) to node 1. - Node 3 transfers its power to node 1. Thus, the maximal power in the root node (node 1) will be 1 + 2 + 5 + 4 + 3 = 15.","solution":"def maximal_total_power(n, parent_nodes, power_levels): parent_list = [0] * n for i in range(n-1): parent_list[i+1] = parent_nodes[i] - 1 max_power = power_levels[:] for i in range(n-1, 0, -1): parent = parent_list[i] max_power[parent] += max_power[i] return max_power[0] # Example usage n = 5 parent_nodes = [1, 1, 2, 2] power_levels = [1, 2, 3, 4, 5] print(maximal_total_power(n, parent_nodes, power_levels)) # Output: 15"},{"question":"Here is the new coding assessment question: Write a function `minInsertionsToPalindrome` that takes a string s (1 ≤ |s| ≤ 1000) as input and returns the minimum number of insertions required. For example: - If s = \\"race\\", you need to insert 3 characters (\\"ecarace\\") to make it a palindrome. - If s = \\"abcde\\", you need to insert 4 characters (\\"abcdedcba\\") to make it a palindrome. The function signature should be: ```python def minInsertionsToPalindrome(s: str) -> int: ``` # Input - A single string `s` with the length not exceeding 1000 characters consisting of lower-case English letters. # Output - A single integer representing the minimum number of characters needed to be inserted into the string `s` to make it a palindrome. # Example **Input 1:** ``` abcaa ``` **Output 1:** ``` 2 ``` **Explanation 1:** To make \\"abcaa\\" a palindrome, you can insert \'b\' and \'c\' at the end, resulting in \\"abccbaa\\". **Input 2:** ``` abcd ``` **Output 2:** ``` 3 ``` **Explanation 2:** To make \\"abcd\\" a palindrome, you can insert \'c\', \'b\', and \'a\' at the end, resulting in \\"abcba\\". --- You are only allowed to use the standard Python string operations. Avoid using any specialized libraries or functions for palindrome checking or DP table computations.","solution":"def minInsertionsToPalindrome(s: str) -> int: Returns the minimum number of insertions required to convert the string s into a palindrome. def lcs(X, Y): m = len(X) n = len(Y) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] reverse_s = s[::-1] lcs_length = lcs(s, reverse_s) return len(s) - lcs_length"},{"question":"In this problem, you are given a sequence consisting of lowercase English letters. You are required to transform this sequence into a \\"beautiful string\\". A string is considered beautiful if no two adjacent characters are the same. You are allowed to make changes to the sequence by replacing any character with any other lowercase English letter. Your task is to determine the minimum number of changes required to make the given sequence beautiful. The input format is as follows: - The first line contains an integer n (1 le n le 10^5) — the length of the sequence. - The second line contains a string s of length n, consisting of lowercase English letters. Output a single integer — the minimum number of changes required to make the given sequence beautiful. **Example:** Input: ``` 5 aabba ``` Output: ``` 2 ``` Explanation: One way to make the string beautiful is to change the third \'a\' to \'c\' and the fourth \'b\' to \'d\', resulting in the string \\"abacd\\" which has no two adjacent characters the same. This requires 2 changes. Input: ``` 4 abbb ``` Output: ``` 1 ``` Explanation: One way to make the string beautiful is to change the third \'b\' to \'c\', resulting in the string \\"abcb\\". This requires only 1 change. Your task is to design an efficient algorithm that minimizes the number of changes required to achieve the objective.","solution":"def min_changes_to_beautiful_string(n, s): Returns the minimum number of changes required to make the given sequence beautiful. changes = 0 s = list(s) # Convert string to list for easier mutation for i in range(1, n): if s[i] == s[i-1]: for ch in \'abcdefghijklmnopqrstuvwxyz\': if (i + 1 < n and s[i+1] == ch) or (i - 1 >= 0 and s[i-1] == ch): continue s[i] = ch changes += 1 break return changes"},{"question":"The city of Graphland has a unique railway system where each road connecting two cities is bidirectional and has an associated cost. The residents of Graphland are interested in making the railway system more efficient. The mayor has proposed a new project where he plans to connect all cities with the minimal possible cost while ensuring that there is exactly one path between any two cities in the system. This project will effectively create a Minimum Spanning Tree (MST) of the railway system. You have been tasked with helping the mayor to determine the minimal cost required to connect all the cities in Graphland using the MST. The first line contains two integers n (2 ≤ n ≤ 100000) and m (1 ≤ m ≤ 200000) — the number of cities and the number of roads in the railway system, respectively. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000000) — indicating that there is a road between city u and city v with a cost of w. Print a single integer — the minimum cost to connect all cities in Graphland using the MST. If it is impossible to connect all the cities, print -1. **Example Input:** ``` 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 ``` **Example Output:** ``` 6 ``` In the example, the MST will connect cities 1-2-3-4 with a total cost of 1+2+3=6.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = [] e = 0 i = 0 while e < n - 1: if i >= len(edges): return -1 u, v, w = edges[i] i = i + 1 x = find(parent, u) y = find(parent, v) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) total_weight = sum([w for u, v, w in result]) return total_weight def minimal_cost_to_connect_cities(n, m, roads): edges = [] for road in roads: u, v, w = road edges.append((u-1, v-1, w)) return kruskal(n, edges) # Example usage # n = 4, m = 5 # roads = [ # (1, 2, 1), # (2, 3, 2), # (3, 4, 3), # (4, 1, 4), # (1, 3, 5) # ] # print(minimal_cost_to_connect_cities(n, m, roads)) # Output: 6"},{"question":"Anna is playing a game with her friends. The game involves a sequence of rocks numbered from 1 to n. Each rock has a certain weight assigned to it. The game starts with an empty sack, and in each round, Anna can choose a contiguous sub-sequence of rocks and put them into the sack, adding their weights to the sack\'s total weight. However, there is a catch: she can only pick each sub-sequence if the sum of its weights does not exceed a given threshold W. Anna wants to know the maximum weight she can carry in her sack at the end of the game. Help her determine the maximum possible weight of the rocks she can carry in a single round without exceeding the weight limit W. The first line contains two integers n and W (1 ≤ n ≤ 10^5, 1 ≤ W ≤ 10^9) — the number of rocks and the maximum weight the sack can hold. The second line contains n integers wi (1 ≤ wi ≤ 10^9) — the weights of the rocks. Output one integer — the maximum weight Anna can carry in her sack without exceeding the limit W. For example: ``` Input: 5 10 1 2 3 4 5 Output: 10 Input: 4 7 4 3 2 1 Output: 7 ``` In the first example, Anna can take the sub-sequence [1, 2, 3, 4] which sums to 10. In the second example, Anna can take the sub-sequence [4, 3] which sums to 7.","solution":"def max_weight(n, W, weights): Determines the maximum possible weight a contiguous subsequence of rocks can have without exceeding the given weight limit W. :param n: Number of rocks :param W: Maximum weight the sack can carry :param weights: List containing weights of the rocks :return: Maximum weight without exceeding W max_weight_found = 0 current_sum = 0 start = 0 for end in range(n): current_sum += weights[end] while current_sum > W: current_sum -= weights[start] start += 1 max_weight_found = max(max_weight_found, current_sum) return max_weight_found"},{"question":"A company has multiple projects that need to be completed within a specific timeline. Each project has a defined start time and end time, and each project must be assigned to a worker. However, one worker can handle multiple projects only if the jobs do not overlap in time. Your task is to determine the minimum number of workers required to complete all projects. You are given n projects, each described by a start time and an end time. Your goal is to schedule these projects using the minimum number of workers. # Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of projects. Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ 10^9) — the start time and end time of the i-th project. # Output Print a single integer — the minimum number of workers required to complete all projects. # Examples Example 1 # Input ``` 3 1 4 2 6 8 10 ``` # Output ``` 2 ``` Example 2 # Input ``` 4 1 5 2 3 4 6 7 8 ``` # Output ``` 2 ``` # Note In the first example, one worker can handle the projects [1, 4] and [8, 10], but the project [2, 6] needs another worker because it overlaps with the first project. In the second example, we can schedule the projects as follows: - One worker handles the projects [1, 5] and [7, 8]. - Another worker handles the projects [2, 3] and [4, 6].","solution":"def min_workers(projects): Determines the minimum number of workers required to complete all projects. Parameters: projects (list of tuples): Each tuple contains the start and end times of a project. Returns: int: Minimum number of workers required. events = [] for s, e in projects: events.append((s, 1)) events.append((e, -1)) events.sort() current_workers = 0 max_workers = 0 for time, change in events: current_workers += change max_workers = max(max_workers, current_workers) return max_workers"},{"question":"Maria and John enjoy playing with sequences and subsequences. One day, Maria challenged John with the following problem: Given a sequence of positive integers, find the maximum possible product of any contiguous subsequence of at most k elements. Can you help John solve this problem? You are given a sequence of positive integers a = [a1, a2, ..., an] of length n, and a positive integer k. You need to determine the maximum possible product of any contiguous subsequence of at most k elements from the given sequence. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100) — the length of the sequence and the maximum number of elements in the subsequence, respectively. The next line contains n space-separated positive integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the sequence. Output a single integer, the maximum possible product of any contiguous subsequence of at most k elements. # Example Input 6 3 1 2 3 4 5 6 Output 120 Explanation: The maximum product is obtained from the contiguous subsequence [4, 5, 6], whose product is 4 * 5 * 6 = 120.","solution":"def max_product_contiguous_subsequence(n, k, a): max_product = 0 for i in range(n): current_product = 1 for j in range(i, min(i + k, n)): current_product *= a[j] if current_product > max_product: max_product = current_product return max_product"},{"question":"The city of TechTown has decided to host an innovative programming competition where participants have to guide robots to perform specific tasks within a grid. Each robot can perform a limited set of moves: go up, down, left, or right. The objective is to guide the robot from a starting position to a target position in the smallest number of moves. The grid is represented as an n x m matrix with specific cells that might be blocked. Robots cannot move into or through these blocked cells. You need to write a function to calculate the minimum number of moves required for the robot to reach the target position from the starting position, avoiding the blocked cells. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains m characters. A character is either \'.\', representing an open cell, or \'#\', representing a blocked cell. The last line contains four integers sx, sy, tx, and ty (0 ≤ sx, sy, tx, ty < n or m) — the starting row, starting column, target row, and target column. Your task is to print the minimum number of moves required for the robot to reach the target position from the starting position. If it\'s not possible for the robot to reach the target, print -1. Example: Input: 5 5 ..... .#... .#.#. .#.#. ..... 0 0 4 4 Output: 8 In the first sample, the robot can move from the starting position (0, 0) to the target position (4, 4) in 8 moves avoiding the blocked cells (indicated by \'#\').","solution":"from collections import deque def min_moves(n, m, grid, sx, sy, tx, ty): if grid[sx][sy] == \'#\' or grid[tx][ty] == \'#\': return -1 # Possible moves: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(sx, sy, 0)]) # (x, y, distance) visited[sx][sy] = True while queue: x, y, dist = queue.popleft() if (x, y) == (tx, ty): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist+1)) return -1"},{"question":"# Caesar\'s Treasure Hunt: Caesar is conducting a treasure hunt on a rectangular grid of size m (times) n. The grid is represented by a 2D array where each cell initially contains a certain non-negative number of gold coins. Caesar can perform an operation to collect coins as follows: he can choose any non-empty rectangular sub-grid and collect all the coins from that sub-grid in one go. After each operation, the chosen sub-grid gets reset to zero coins. Caesar wants to maximize the number of coins he can collect with a single such operation. Given a grid of size m (times) n, your task is to find the maximum number of coins that can be collected in one operation. # Input: - The first line contains two integers m and n (1 ≤ m, n ≤ 1000) – the dimensions of the grid. - The next m lines each contain n integers, representing the number of coins in each cell of the grid. Each integer is between 0 and 1000. # Output: - Output a single integer, which is the maximum number of coins that can be collected in one operation. # Example: Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 45 ``` Explanation: The maximum number of coins collected can be achieved by selecting the whole grid as the sub-grid: 1+2+3+4+5+6+7+8+9 = 45. # Note: In the output example, by selecting the entire grid itself as the sub-grid, we collect all the coins resulting in the maximum possible collection.","solution":"def max_coins_in_one_operation(grid): Returns the maximum number of coins that can be collected in one operation. Params: grid (list of list of int): The 2D array representing the grid of coins. Returns: int: Maximum number of coins that can be collected in one operation. def max_sum_subarray_2d(arr): if not arr: return 0 max_sum = float(\'-inf\') m, n = len(arr), len(arr[0]) for left in range(n): temp = [0] * m for right in range(left, n): for i in range(m): temp[i] += arr[i][right] max_sum = max(max_sum, max_sum_subarray_1d(temp)) return max_sum def max_sum_subarray_1d(arr): current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum return max_sum_subarray_2d(grid)"},{"question":"In a distant digital world, there exists a binary tree that grows through interactions based on specific rules. Every node in this binary tree contains a random integer value, and has two children - a left child and a right child. Defining a path in the tree as a series of consecutive nodes starting from the root to any leaf node, we are interested in finding the maximum sum of the values along any such path from the root node to a leaf node. Given a binary tree, write a function to determine the maximum sum of the values along any path from the root to a leaf. Your function should use the following definition for the binary tree node: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` # Input - The input to your function consists of: - A `TreeNode` object that represents the root of the tree. # Output - The output should be an integer representing the maximum sum along any path from the root to a leaf node. # Example Consider the following binary tree: ``` 10 / 5 20 / / 1 8 15 30 ``` In this tree, the path from the root (10) to the leaf node with the maximum sum would be through the nodes 10 -> 20 -> 30, resulting in a maximum sum of 60. # Function Signature ```python def maxPathSum(root: TreeNode) -> int: pass ``` # Constraints - The number of nodes in the binary tree is between 1 and 10^4. - The values of the nodes are within the range [-10^4, 10^4].","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def maxPathSum(root: TreeNode) -> int: Finds the maximum sum along any path from the root to a leaf node. if not root: return float(\'-inf\') if not root.left and not root.right: return root.value left_sum = maxPathSum(root.left) right_sum = maxPathSum(root.right) return root.value + max(left_sum, right_sum)"},{"question":"You are given a directed graph with `n` nodes and `m` edges. Each node has a specific color assigned to it. You need to find the length of the shortest path from the starting node to the target node such that the path includes nodes with at least `k` different colors. If no such path exists, return `-1`. The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 100,000) — the number of nodes and the number of edges. The second line contains `n` integers `c1, c2, ..., cn` (1 ≤ ci ≤ 100) where `ci` denotes the color of the i-th node. Each of the following `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) indicating a directed edge from node `u` to node `v`. The next line contains three integers `start`, `target`, and `k` (1 ≤ start, target ≤ n, 1 ≤ k ≤ 100) — the starting node, the target node, and the number of different colors to be included in the path. Output a single integer - the length of the shortest path from the starting node to the target node that includes at least `k` different colors. If no such path exists, print `-1`. For example, consider a graph with 4 nodes and 4 edges. Nodes\' colors are `[1, 2, 3, 4]`. Edges are (1->2), (2->3), (3->4), and (4->1). We need the shortest path from node `1` to node `4` including at least `3` different colors. In this case, one possible path is `1 -> 2 -> 3 -> 4` with length `3`, since it includes `3` different colors (1, 2, 3). The output should be `3`. However, if the path `1 -> 4` directly exists but does not include `3` different colors, it should not be considered, and the output should be `-1` if no other valid path exists. Your task is to implement an algorithm to find such a path.","solution":"from collections import deque, defaultdict as dd def shortest_path_with_k_colors(n, m, colors, edges, start, target, k): Returns the length of the shortest path from start to target node such that the path includes nodes with at least k different colors. If no such path exists, returns -1. graph = dd(list) for u, v in edges: graph[u].append(v) queue = deque([(start, 0, set([colors[start-1]]))]) visited = set([(start, frozenset([colors[start-1]]))]) while queue: current_node, current_dist, current_colors = queue.popleft() if current_node == target and len(current_colors) >= k: return current_dist for neighbor in graph[current_node]: next_colors = set(current_colors) next_colors.add(colors[neighbor-1]) frozen_next_colors = frozenset(next_colors) if (neighbor, frozen_next_colors) not in visited: visited.add((neighbor, frozen_next_colors)) queue.append((neighbor, current_dist + 1, next_colors)) return -1"},{"question":"You are given an array `A` of `n` integers and an integer `k`. You can perform the following operation exactly k times: - Choose any two indices `i` and `j` (1 ≤ i, j ≤ n) such that i ≠ j, and swap the elements `A[i]` and `A[j]`. Your task is to maximize the sum of products of adjacent elements in the array after exactly `k` swaps. The sum of products of adjacent elements is calculated as: [ S = sum_{i=1}^{n-1} A[i] times A[i+1] ] The first line contains two integers `n` (2 ≤ n ≤ 100) and `k` (1 ≤ k ≤ 10^5). The second line contains `n` integers `A[i]` (1 ≤ A[i] ≤ 10^3). Print a single integer denoting the maximum possible value of the sum of products of adjacent elements after exactly `k` swaps. **Example:** Input: ``` 4 2 1 3 2 4 ``` Output: ``` 20 ``` Explanation: After the first swap, we can swap elements at indices 1 and 4, resulting in the array [4, 3, 2, 1]. After the second swap, we can swap elements at indices 2 and 3, resulting in the array [4, 2, 3, 1]. The sum of products of adjacent elements is 4*2 + 2*3 + 3*1 = 20.","solution":"def maximize_adjacent_products(n, k, A): Returns the maximum possible value of the sum of products of adjacent elements after exactly k swaps on the array A. A = sorted(A, reverse=True) total_sum = 0 for i in range(n-1): total_sum += A[i] * A[i + 1] return total_sum # Example usage # n, k = 4, 2 # A = [1, 3, 2, 4] # print(maximize_adjacent_products(n, k, A)) # Output should be 20"},{"question":"Dylan loves to collect gemstones. Each gemstone is characterized by a unique color and size. A gemstone\'s color is represented by an integer and its size by a floating-point number. Dylan wants to display his gemstones in a special order in his display case: he wants to group gemstones of the same color together and sort these groups by color in ascending order. Within each group of the same color, the gemstones should be sorted by size in descending order. Given the information about the gemstones, help Dylan determine the order in which to display them. The first line of input contains an integer n (1 ≤ n ≤ 100), the number of gemstones in Dylan\'s collection. The following n lines each contain two values: an integer c (1 ≤ c ≤ 100), representing the color of a gemstone and a floating-point number s (0.01 ≤ s ≤ 100.00), representing the size of that gemstone. Output the gemstones in the order Dylan wants them, each on a new line. Each line should contain the color and size of a gemstone, separated by a space. In the first example, the gemstones are sorted first by color and then by size within each color. In the second example, the gemstones are again grouped by color and sorted by size within each color.","solution":"def sort_gemstones(gemstones): Sorts the gemstones by color in ascending order and by size in descending order within each color. gemstones.sort(key=lambda x: (x[0], -x[1])) return gemstones def read_and_process_input(input_list): Reads the gemstone data from input_list, sorts them, and returns the sorted list. n = int(input_list[0].strip()) gemstones = [] for i in range(1, n + 1): c, s = input_list[i].strip().split() c = int(c) s = float(s) gemstones.append((c, s)) sorted_gemstones = sort_gemstones(gemstones) return sorted_gemstones def format_output(gemstones): Formats the sorted list of tuples into the specified output format. return [\\"{0} {1:.2f}\\".format(c, s) for c, s in gemstones]"},{"question":"Ben is planning to paint his new house, and he wants to select the color for each wall such that no two neighboring walls have the same color. The house can be represented as a graph where each wall is a node, and each edge between nodes represents that the two corresponding walls are neighbors. Ben has a palette of `K` different colors to choose from, and he needs to determine if it is possible to paint every wall using these `K` colors while satisfying the no-two-neighboring-walls constraint. Write a program to determine if it is possible to paint the house in the way Ben wants, given the graph and the number of colors. The first line contains two integers `N` and `M` (`1 ≤ N, M ≤ 1000`) — the number of walls (nodes) and the number of neighboring pairs (edges) respectively. Next `M` lines contain pairs of integers `u` and `v` (`1 ≤ u, v ≤ N`) representing that wall `u` and wall `v` are neighbors (i.e., there is an edge between nodes `u` and `v`). The last line contains an integer `K` (`1 ≤ K ≤ N`), representing the number of colors available. Output \\"YES\\" if it is possible to color the house as Ben wants, otherwise print \\"NO\\". # Sample Input 1 ``` 4 4 1 2 2 3 3 4 4 1 3 ``` # Sample Output 1 ``` YES ``` # Sample Input 2 ``` 3 3 1 2 2 3 3 1 2 ``` # Sample Output 2 ``` NO ``` **Explanation:** In the first example, with 3 colors, it is possible to color each wall such that no two neighboring walls have the same color, for instance, using colors {1, 2, 3}, where wall `1` get color 1, wall `2` gets color 2, wall `3` gets color 3, and wall `4` gets color 1. In the second example, with only 2 colors, it is impossible to color the graph without having at least two neighboring walls sharing the same color due to the cyclical nature of the graph with an odd number of nodes.","solution":"def can_paint_house(N, M, edges, K): from collections import defaultdict def is_bipartite(graph, n): color = [-1] * n def bfs(src): queue = [src] color[src] = 0 while queue: u = queue.pop(0) for v in graph[u]: if color[v] == -1: color[v] = 1 - color[u] queue.append(v) elif color[v] == color[u]: return False return True for i in range(n): if color[i] == -1: if not bfs(i): return False return True graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) if K >= 3: return \\"YES\\" elif K == 2 and is_bipartite(graph, N): return \\"YES\\" elif K == 1 and N == 1: return \\"YES\\" else: return \\"NO\\" # Example Usage: edges1 = [(1, 2), (2, 3), (3, 4), (4, 1)] print(can_paint_house(4, 4, edges1, 3)) # Output: \\"YES\\" edges2 = [(1, 2), (2, 3), (3, 1)] print(can_paint_house(3, 3, edges2, 2)) # Output: \\"NO\\""},{"question":"You are given a grid with dimensions n times m where each cell can either be free (represented by a \'.\') or blocked (represented by a \'#\'). You need to find the largest square sub-grid that consists entirely of free cells. The first line of input contains two integers n and m (1 le n, m le 1000) denoting the dimensions of the grid. The next n lines contain m characters each, either \'.\' or \'#\', representing the grid. Output a single integer which is the side length of the largest square sub-grid consisting entirely of free cells. # Example: Input: ``` 5 6 ...... .... ...... .#..#. ..#. ``` Output: ``` 2 ``` Explanation: In the given grid, the largest square of free cells has a side length of 2. One such square is found in the top left corner of the grid.","solution":"def largest_free_square(n, m, grid): if n == 0 or m == 0: return 0 max_side = 0 dp = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if dp[i][j] > max_side: max_side = dp[i][j] return max_side"},{"question":"You are given a list of n integers representing the heights of buildings, and q queries related to the list. Each query asks for the maximum height of the buildings within a specified subarray range. The first line contains one integer n (1 le n le 10^6), representing the number of buildings. The second line contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^6), representing the heights of the buildings. The third line contains one integer q (1 le q le 10^5), representing the number of queries. Then q lines follow, each containing two integers l_i and r_i (1 le l_i le r_i le n), representing the i-th query which asks for the maximum height of the buildings from index l_i to index r_i. For each query, output the maximum height of the buildings within the specified subarray range. Example input: ``` 5 3 1 6 4 2 3 1 3 2 5 1 5 ``` Example output: ``` 6 6 6 ``` Your task is to efficiently answer all queries.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def query(self, left, right): left += self.n right += self.n + 1 max_height = 0 while left < right: if left % 2 == 1: max_height = max(max_height, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 max_height = max(max_height, self.tree[right]) left //= 2 right //= 2 return max_height def max_heights_in_ranges(n, heights, queries): segment_tree = SegmentTree(heights) results = [] for l, r in queries: results.append(segment_tree.query(l - 1, r - 1)) return results"},{"question":"You are given a directed graph with `n` vertices and `m` edges. Each edge has an associated positive weight. The graph may contain cycles. Your task is to find the shortest path from the source vertex `S` to each of the other vertices. If vertex `S` and vertex `v` are not reachable, the shortest path to `v` should be noted as -1. **Input:** - The first line contains two integers `n` and `m` (1 ≤ n ≤ 500, 0 ≤ m ≤ 1500) — the number of vertices and the number of edges respectively. - The second line contains the integer `S` (1 ≤ S ≤ n) — the source vertex. - The following `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) describing a directed edge from `u` to `v` with weight `w`. **Output:** Output a single line containing `n` integers where the `i-th` integer is the shortest path from vertex `S` to vertex `i`. If there is no path from `S` to `i`, output -1. **Note:** Vertices are 1-indexed. **Example:** **Input:** ``` 5 6 1 1 2 4 1 3 2 2 3 3 2 4 2 3 5 3 4 5 1 ``` **Output:** ``` 0 4 2 6 5 ``` To solve this problem, consider using Dijkstra\'s algorithm or the Bellman-Ford algorithm, depending on whether you need to handle negative weights or not. In this specific case, since weights are always positive, Dijkstra\'s algorithm is suitable.","solution":"import heapq def find_shortest_paths(n, m, S, edges): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) # Dijkstra\'s algorithm distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[S] = 0 priority_queue = [(0, S)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) results = [] for i in range(1, n + 1): if distances[i] == float(\'inf\'): results.append(-1) else: results.append(distances[i]) return results"},{"question":"You are tasked with creating a stable seating arrangement for a round table with N people. A seating arrangement is considered stable if every person has exactly two neighbors, and no two adjacent people are seated next to each other. Each person has a unique index from 1 to N. Given an integer N representing the number of people, your goal is to determine if such a stable seating arrangement is possible. If it is possible, output any valid seating arrangement. If it is not possible, output \\"Not possible\\". The first line contains a single integer, N (3 ≤ N ≤ 1000), representing the number of people. Output a single line containing N space-separated integers representing the seating arrangement. If no stable seating arrangement exists, output \\"Not possible\\". Examples: Input: 5 Output: 1 3 5 2 4 Input: 4 Output: 1 3 2 4 Input: 3 Output: Not possible Explanation: 1. For the first example with N = 5, a possible stable arrangement is 1 3 5 2 4. Everyone is seated such that no two adjacent indices are next to each other. 2. For the second example with N = 4, a possible stable arrangement is 1 3 2 4. This satisfies the stability condition. 3. For the third example with N = 3, it is not possible to find a valid seating arrangement.","solution":"def stable_seating_arrangement(N): Determines a stable seating arrangement for N people around a round table. If no such arrangement is possible, returns \\"Not possible\\". Parameters: N (int): Number of people Returns: str: A stable seating arrangement or \\"Not possible\\" if N % 2 != 0 and N < 5: return \\"Not possible\\" arrangement = [] for i in range(1, N + 1, 2): arrangement.append(i) for i in range(2, N + 1, 2): arrangement.append(i) return \\" \\".join(map(str, arrangement))"},{"question":"In the magical forest of Navira, there lies a border made of mystical stones, each imbued with a protective spell. To fortify their defenses, the inhabitants of Navira need to rearrange the stones in a specific manner. They have a sequence of n stones, each with a unique power value. The task is to find the maximum sum of power values by rearranging the stones such that no two adjacent stones in the new arrangement have consecutive power values in the original sequence. To be more precise, let\'s say the stones are given in an array as [a_1, a_2, ..., a_n]. You need to rearrange them into a new sequence [b_1, b_2, ..., b_n] so that for all 1 ≤ i < n, |p(b_i) - p(b_{i+1})| ≠ 1, where p(b_i) is the original position of the stone b_i in the given array. If there are multiple arrangements yielding the same maximum sum, output any of them. Write a program to determine this maximum sum and an example of such a valid sequence of arrangement satisfying the given condition. Input: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of stones. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the power values of the stones. Output: - On the first line, print the maximum sum of the power values of the stones in a valid arrangement. - On the second line, print the sequence of power values representing a valid arrangement. Example: Input: 6 4 2 9 7 5 6 Output: 33 4 9 5 7 2 6","solution":"def max_sum_and_arrangement(n, stones): indexed_stones = [(power, i) for i, power in enumerate(stones)] indexed_stones.sort(reverse=True, key=lambda x: x[0]) result_sequence = [] used_indices = set() def can_place(index): if not result_sequence: return True last_index = result_sequence[-1][1] return abs(last_index - index) != 1 for power, index in indexed_stones: if can_place(index): result_sequence.append((power, index)) used_indices.add(index) remaining_stones = [stone for stone in indexed_stones if stone[1] not in used_indices] for power, index in remaining_stones: result_sequence.append((power, index)) final_sequence = [item[0] for item in result_sequence] max_sum = sum(final_sequence) return max_sum, final_sequence"},{"question":"You are given an n by n grid where each cell contains a letter from \'a\' to \'z\'. You need to find the number of distinct palindromic paths from the top-left corner (1, 1) to the bottom-right corner (n, n). A path is defined as a sequence of moves where from a cell (i, j), you can move to either cell (i+1, j) or cell (i, j+1), and the resulting sequence of characters along this path can be read the same backwards as forwards. The first line of input consists of one integer n (1 ≤ n ≤ 50) – the size of the grid. The next n lines contain n lowercase letters each, representing the grid. Print the number of distinct palindromic paths from (1, 1) to (n, n). Example: Input: ``` 3 abc def ghi ``` Output: ``` 0 ``` Explanation: In this grid, there are no distinct palindromic paths from the top-left to the bottom-right corner.","solution":"def count_palindromic_paths(n, grid): memo = {} def is_palindrome(s): return s == s[::-1] def dfs(i, j, path): if i >= n or j >= n: return 0 path += grid[i][j] if (i, j, path) in memo: return memo[(i, j, path)] if i == n-1 and j == n-1: memo[(i, j, path)] = 1 if is_palindrome(path) else 0 return memo[(i, j, path)] paths_from_here = dfs(i + 1, j, path) + dfs(i, j + 1, path) memo[(i, j, path)] = paths_from_here return paths_from_here return dfs(0, 0, \'\') # Example Usage n = 3 grid = [ \'abc\', \'def\', \'ghi\' ] print(count_palindromic_paths(n, grid)) # Output: 0"},{"question":"You are given two sequences of integers, Sequence A and Sequence B, each consisting of distinct integers sorted in increasing order. Your task is to merge these two sequences into a single sorted sequence and then determine the k-th smallest element in the merged sequence. The first line of input contains two integers n and m (1 <= n, m <= 100000), which are the lengths of Sequence A and Sequence B, respectively. The second line contains n integers: a_1, a_2, ..., a_n, which represent the elements of Sequence A (1 <= a_i <= 10^9). The third line contains m integers: b_1, b_2, ..., b_m, which represent the elements of Sequence B (1 <= b_i <= 10^9). The fourth line contains a single integer k (1 <= k <= n + m), which is the position of the element you need to find in the merged sequence (1-based indexing). Output the k-th smallest element of the merged sequence. # Sample Input ``` 5 4 1 4 7 8 10 2 3 6 9 5 ``` # Sample Output ``` 6 ``` # Explanation The merged sequence is [1, 2, 3, 4, 6, 7, 8, 9, 10]. The 5th smallest element in this sequence is 6. Hence, the correct output is 6.","solution":"def k_th_smallest(n, m, A, B, k): Merge two sorted sequences and find the k-th smallest element. Args: n(int): Length of sequence A. m(int): Length of sequence B. A(list of int): Sequence A consisting of n integers sorted in increasing order. B(list of int): Sequence B consisting of m integers sorted in increasing order. k(int): The position of the element to find in the merged sequence. Returns: int: The k-th smallest element in the merged sequence. merged_sequence = sorted(A + B) return merged_sequence[k - 1]"},{"question":"Anna loves organizing and categorizing things. She recently found an unordered list of integers and now she wants to create a new list in which the integers are sorted in non-decreasing order by their absolute values. Additionally, Anna wants to retain the original signs of the integers in their new positions. Help Anna to generate the desired list. # Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of integers in the list. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the unordered list of integers. # Output Output a single line with n integers — the list sorted by absolute values but preserving the original signs. # Example Input ``` 5 -3 -1 2 -2 4 ``` Output ``` -1 2 -2 -3 4 ``` # Explanation In the example, the integers sorted by their absolute values are -1, 2, -2, -3, and 4. The original signs are preserved from the input list.","solution":"def sort_by_absolute_values(arr): Returns a list of integers sorted by their absolute values, preserving original signs. return sorted(arr, key=abs)"},{"question":"Consider a grid with n rows and m columns. Each cell in the grid can be either empty (\'.\') or occupied by an obstacle (\'#\'). You are given the starting position of a robot in the grid and the goal position it needs to reach. The robot can move up, down, left, or right, but it can\'t move through obstacles. Your task is to figure out the minimum number of moves required for the robot to reach the goal position from the starting position. Implement function `minimum_moves(grid, n, m, start, goal)` that computes the minimum number of moves required for the robot to reach from the start to the goal, or return -1 if it is not possible. # Input: - An integer t (1 le t le 100) - the number of test cases. - For each test case: - Two integers n and m (1 le n, m le 50) - the number of rows and columns in the grid. - A list of strings representing the grid, each of length m. - Two tuples (x1, y1) and (x2, y2) where (x1, y1) is the starting position and (x2, y2) is the goal position, both positions are given as 1-based indices. # Output: For each test case, return a single integer indicating the minimum number of moves required, or -1 if it is not possible. # Examples: Example 1: Input: ``` 1 3 3 ... .#. ... 1 1 3 3 ``` Output: ``` 4 ``` Explanation: The grid is: ``` ... .#. ... ``` The robot starts at (1, 1) and needs to reach (3, 3). The shortest path is to move right, right, down, down which takes 4 moves. Example 2: Input: ``` 1 3 3 ... # ... 1 1 3 3 ``` Output: ``` -1 ``` Explanation: The grid is: ``` ... # ... ``` The robot starts at (1,1) and needs to reach (3,3). There is no possible way to reach the goal because of the obstacle blocking the way. # Note: - The grid is represented as a list of strings where each string corresponds to a row. - Ensure that the input positions are adjusted properly from 1-based index to 0-based index when implementing the solution.","solution":"from collections import deque def is_valid_position(x, y, n, m, grid, visited): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and not visited[x][y] def minimum_moves(grid, n, m, start, goal): start = (start[0] - 1, start[1] - 1) goal = (goal[0] - 1, goal[1] - 1) if grid[start[0]][start[1]] == \'#\' or grid[goal[0]][goal[1]] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(start[0], start[1], 0)]) visited[start[0]][start[1]] = True while queue: x, y, moves = queue.popleft() if (x, y) == goal: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_position(nx, ny, n, m, grid, visited): visited[nx][ny] = True queue.append((nx, ny, moves + 1)) return -1 def process_test_cases(t, test_cases): results = [] for case in test_cases: n, m, grid, start, goal = case result = minimum_moves(grid, n, m, start, goal) results.append(result) return results"},{"question":"You have a company that organizes competitive programming contests. For a contest, you have a sequence of problems that should be solved in a specific order. The contest is represented by a sequence of integers, where the i-th integer is the difficulty level of the i-th problem. You need to split the problems into contest blocks. Each block must contain a strictly increasing sequence of difficulty levels, and each problem must belong to exactly one block. However, your company wants to minimize the number of blocks, while maintaining the strict increase of difficulties within each block. Write a program that, given the sequence of problems\' difficulty levels, calculates the minimum number of blocks necessary to split the sequence appropriately. Input The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the number of problems. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the difficulty levels of the problems. Output Output a single integer — the minimum number of blocks. Examples Input 6 1 3 2 4 3 5 Output 3 Input 4 4 3 2 1 Output 4 Input 5 2 3 1 4 5 Output 2 Note In the first example, we can split the problems into three blocks: [1, 3], [2, 4], [3, 5]. In the second example, each problem needs to be in its own block as the sequence is strictly decreasing. In the third example, one possible split is [2, 3] and [1, 4, 5].","solution":"def minimal_blocks(n, difficulties): Returns the minimum number of blocks required to partition the difficulties into strictly increasing sequences. if n == 1: return 1 blocks = 1 last_difficulty = difficulties[0] for current_difficulty in difficulties[1:]: if current_difficulty <= last_difficulty: blocks += 1 last_difficulty = current_difficulty return blocks"},{"question":"Lali has an infinite rectangular grid of cells, each of which can either be empty or contain an obstacle. She would like to navigate from the top-left corner of the grid to the bottom-right corner, but unfortunately, she can only move either right or down at any step. Given a grid where `1` represents an obstacle and `0` represents an empty cell, determine the number of unique paths from the top-left corner to the bottom-right corner while avoiding obstacles. If no such path exists, return `0`. For instance, given the following grid: ``` 0 0 0 0 1 0 0 0 0 ``` There are two unique paths from the top-left to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right The first line of input contains two integers `m` and `n` (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid, respectively. Each of the next `m` lines contains `n` integers, either `0` or `1`, representing the grid. Output a single integer, the number of unique paths from the top-left corner to the bottom-right corner avoiding obstacles. Example: Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ```","solution":"def unique_paths_with_obstacles(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(1, m): dp[i][0] = dp[i-1][0] if grid[i][0] == 0 else 0 for j in range(1, n): dp[0][j] = dp[0][j-1] if grid[0][j] == 0 else 0 for i in range(1, m): for j in range(1, n): dp[i][j] = 0 if grid[i][j] == 1 else dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1] # Example usage: grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(unique_paths_with_obstacles(grid)) # Output: 2"},{"question":"Alice and Bob are playing a game with a string. Alice picks a substring from the given string and replaces exactly one character in it with any other character. Bob then picks a different substring from the resulting string and checks if it is a palindrome. You are given a string s of length n (1 le n le 10^5). You need to answer q queries (1 le q le 10^5). Each query consists of two integers l and r (1 le l le r le n), the indices of the substring Bob picks. For each query, determine if there exists a position in the substring from l to r such that replacing the character at this position results in a palindrome in that range. The input starts with a single integer q. The next line contains the string s. Each of the next q lines contains two integers l and r, defining the range of a substring. Output q lines, where the i-th line is \\"YES\\" if there\'s a way to make a palindrome in the range [l, r] by changing exactly one character, and \\"NO\\" otherwise. Example: ``` Input: 4 abca 1 4 1 3 2 4 3 3 Output: YES YES YES YES ```","solution":"def can_make_palindrome(s, l, r): Determines if it is possible to make the substring s[l:r+1] a palindrome by changing exactly one character. sub = s[l-1:r] n = len(sub) mismatch_count = 0 for i in range(n // 2): if sub[i] != sub[n - i - 1]: mismatch_count += 1 if mismatch_count > 1: return \\"NO\\" return \\"YES\\" def solve_palindrome_game(s, queries): results = [] for l, r in queries: results.append(can_make_palindrome(s, l, r)) return results"},{"question":"You are given an array of n integers. Your task is to find the length of the longest subarray where the sum of its elements does not exceed a given integer s. A subarray is a sequence of consecutive elements of the array. The first line contains two integers n and s (1 ≤ n ≤ 100000, 1 ≤ s ≤ 1000000000) — the number of elements in the array and the maximum allowed sum of subarray elements. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10000) — the elements of the array. Print the length of the longest subarray whose sum of elements does not exceed s. # Input 7 10 4 1 1 2 1 1 1 # Output 6","solution":"def longest_subarray_with_sum_at_most_s(n, s, arr): Finds the length of the longest subarray where the sum of its elements does not exceed s. start = 0 current_sum = 0 max_len = 0 for end in range(n): current_sum += arr[end] while current_sum > s: current_sum -= arr[start] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"You are given a grid with R rows and C columns, where each cell contains a lowercase Latin letter. You need to find the number of distinct paths from the top-left corner to the bottom-right corner. You can only move right or down at any step. Two paths are considered distinct if the sequence of letters in them is different. The first line contains two integers R and C (1 ≤ R, C ≤ 10), the number of rows and columns in the grid. Each of the next R lines contains a string of length C, which represents the letters in the grid. Output the number of distinct paths from the top-left corner to the bottom-right corner. In the first example with a 2x2 grid: ``` a b c d ``` There are two distinct paths: 1. \\"abcd\\" 2. \\"abdc\\" In the second example with a 2x3 grid: ``` a b c d e f ``` There are three distinct paths: 1. \\"abcdef\\" 2. \\"abdcf\\" 3. \\"adbcef\\"","solution":"def distinct_paths(grid): R = len(grid) C = len(grid[0]) def dfs(r, c, path): if r == R - 1 and c == C - 1: return {\'\'.join(path)} paths = set() if r + 1 < R: paths.update(dfs(r + 1, c, path + [grid[r + 1][c]])) if c + 1 < C: paths.update(dfs(r, c + 1, path + [grid[r][c + 1]])) return paths return len(dfs(0, 0, [grid[0][0]])) # Example usage: # grid = [\\"ab\\", \\"cd\\"] # print(distinct_paths(grid)) # Output: 2 # grid = [\\"abc\\", \\"def\\"] # print(distinct_paths(grid)) # Output: 3"},{"question":"Anita is a busy event planner who has to organize a series of events over several days. She has n days available to schedule the events. Each event requires exactly one entire day, and events cannot overlap. However, due to some restrictions, there are certain days on which specific events cannot be held. Write a program that helps Anita schedule the events. Given the constraints for each event on which days it cannot be held, determine if it\'s possible to schedule all events. If it is possible, output the schedule. If it is not possible, output \\"IMPOSSIBLE\\". The first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of days and the number of events. Each of the next n lines contains space-separated integers representing the days on which the corresponding event cannot be held. The first line corresponds to the first event, the second line to the second event, and so on. Each line starts with an integer k (0 ≤ k ≤ n) — the number of restricted days for that event, followed by k distinct integers representing those days (days are indexed from 1 to n). If it is possible to schedule all events, output n integers, where each integer represents the day on which the corresponding event is scheduled (events are 1-indexed). If there are multiple valid schedules, output any of them. If it\'s not possible to schedule all events, output \\"IMPOSSIBLE\\". Example Input: ``` 3 1 1 1 2 0 ``` Example Output: ``` 2 3 1 ``` In this example, there are three events and three days. The first event cannot be held on day 1, the second event cannot be held on day 2, and the third event can be held on any day. One possible valid schedule is to hold the first event on day 2, the second event on day 3, and the third event on day 1.","solution":"def schedule_events(n, restrictions): from collections import defaultdict, deque unavailable_days = defaultdict(set) for i, restriction in enumerate(restrictions): for day in restriction: unavailable_days[day].add(i + 1) events_schedule = [-1] * (n + 1) days_used = set() def can_schedule(event, day): return event not in unavailable_days[day] def find_schedule(): available_days = deque(range(1, n + 1)) for event in range(1, n + 1): scheduled = False days_to_check = len(available_days) for _ in range(days_to_check): day = available_days.popleft() if can_schedule(event, day): events_schedule[event] = day days_used.add(day) break else: available_days.append(day) if events_schedule[event] == -1: return \\"IMPOSSIBLE\\" return events_schedule[1:] return find_schedule()"},{"question":"The kingdom of Izelon is divided into multiple regions connected by roads. However, due to recent dragon attacks, some roads are closed, and the kingdom is now divided into isolated segments. The king wants to know the minimum number of new roads that need to be built so that there is a path between every pair of regions without encountering dragon attacks. You are given a list of n regions and a list of m pairs of roads connecting these regions. Write a function to determine the minimum number of new roads required to make the entire kingdom connected again. Input: - The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of regions and the number of roads. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) — a pair of regions directly connected by a road. Output: - Output a single integer — the minimum number of new roads needed so that every region is reachable from every other region. Example: ``` Input: 6 3 1 2 2 3 4 5 Output: 2 Input: 4 0 Output: 3 ``` Explanation: In the first example, the regions can be connected like this: component [1, 2, 3] and component [4, 5], so we need at least 2 new roads (one connecting a member of component [1, 2, 3] and region 4, and another connecting a member of component [1, 2, 3]/region 4 and region 5) to make all regions accessible to each other. In the second example, there are no existing roads, hence n-1 (3) new roads are needed to connect 4 regions into a single component.","solution":"def minimum_new_roads(n, m, roads): from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited[node] = True while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) if n == 1: return 0 graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = 0 for i in range(1, n + 1): if not visited[i]: components += 1 bfs(i) return components - 1"},{"question":"You are given an array of n integers, and you need to perform q queries on the array. Each query contains two integers l and r (1-indexed), and you need to find the sum of all prime numbers in the subarray from index l to index r. Input: - The first line of input contains two integers n and q (1 ≤ n, q ≤ 100000). - The second line contains n space-separated integers, the elements of the array (1 ≤ array[i] ≤ 100000). - The next q lines each contain two space-separated integers l and r, representing the indices of the subarray. Output: - For each query, output a single integer which is the sum of all prime numbers in the specified subarray. Example: Input: 6 3 1 2 3 4 5 6 1 3 2 5 1 6 Output: 5 10 15 Explanation: - In the first query, the subarray is [1, 2, 3]. The prime numbers are 2 and 3, so the sum is 2 + 3 = 5. - In the second query, the subarray is [2, 3, 4, 5]. The prime numbers are 2, 3, and 5, so the sum is 2 + 3 + 5 = 10. - In the third query, the subarray is [1, 2, 3, 4, 5, 6]. The prime numbers are 2, 3, and 5, so the sum is 2 + 3 + 5 = 15.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes_in_subarray(arr, l, r): return sum(x for x in arr[l-1:r] if is_prime(x)) def process_queries(arr, queries): results = [] for l, r in queries: results.append(sum_of_primes_in_subarray(arr, l, r)) return results"},{"question":"Your friend, Alex, has decided to host a game night and wants to distribute a number of identical prizes among all attendees. Each attendee must receive at least one prize, but Alex wants to distribute the prizes such that no two attendees end up with the same number of prizes. Given the total number of attendees `n` and the total number of prizes `p`, determine whether it is possible to distribute all the prizes according to the given rules. If it is possible, print \\"YES\\" and the number of prizes each attendee will receive in non-decreasing order. Otherwise, print \\"NO\\". The first line contains two integers `n` and `p` (1 ≤ n ≤ 100, 1 ≤ p ≤ 1000) — the number of attendees and the number of prizes, respectively. Print either \\"YES\\" followed by `n` integers in a single line (the distribution of prizes), or \\"NO\\". In the first example, Alex has 3 attendees and 6 prizes. The possible distribution is 1, 2, and 3 prizes for each attendee respectively. In the second example, Alex has 3 attendees and 5 prizes, it is impossible to distribute the prizes such that no two attendees receive the same number of prizes. Example input and output: - Input: ``` 3 6 ``` Output: ``` YES 1 2 3 ``` - Input: ``` 3 5 ``` Output: ``` NO ```","solution":"def distribute_prizes(n, p): Determines if it\'s possible to distribute `p` prizes among `n` attendees as per the rules. # Minimum prizes needed is the sum of the first `n` natural numbers min_prizes_needed = n * (n + 1) // 2 if p >= min_prizes_needed: prizes = [] for i in range(1, n + 1): prizes.append(i) remaining_prizes = p - min_prizes_needed idx = n - 1 while remaining_prizes > 0: prizes[idx] += 1 remaining_prizes -= 1 if idx > 0: idx -= 1 else: idx = n - 1 return \\"YES\\", prizes else: return \\"NO\\", # Read inputs # n, p = map(int, input().split()) # result = distribute_prizes(n, p) # if result[0] == \\"YES\\": # print(\\"YES\\") # print(\\" \\".join(map(str, result[1]))) # else: # print(\\"NO\\")"},{"question":"Alice is helping to organize a coding contest. However, she needs to ensure that each contestant has a distinct identification number that is not used by any other contestant in her database. She has a list of preferred IDs for some of the contestants. If a contestant\'s preferred ID is already taken, they must be assigned the smallest possible positive integer ID that is not taken. The input starts with a single integer n (1 ≤ n ≤ 10^5), the number of contestants. The next line contains n preferred IDs (1 ≤ preferred ID ≤ 10^9), one for each contestant. Output n lines: the i-th line should contain the assigned ID for the i-th contestant. In the first example, if the preferred IDs are 3, 3, 4, 2, the assigned IDs should be 3, 1, 4, 2. The ID 3 is already taken by the first contestant, so the second contestant is assigned the smallest available ID, which is 1. The third contestant gets their preferred ID 4, and the fourth contestant gets their preferred ID 2 which hasn\'t been taken. # Input - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of contestants. - The second line contains n integers (1 ≤ preferred ID ≤ 10^9) — the preferred IDs of each contestant. # Output - Print n lines, each containing one integer — the assigned ID for each contestant. # Example **Input:** 4 3 3 4 2 **Output:** 3 1 4 2","solution":"def assign_ids(n, preferred_ids): assigned_ids = [] used_ids = set() next_id = 1 for pref_id in preferred_ids: if pref_id not in used_ids: assigned_ids.append(pref_id) used_ids.add(pref_id) else: while next_id in used_ids: next_id += 1 assigned_ids.append(next_id) used_ids.add(next_id) return assigned_ids # Reading inputs and calling the function here for the sake of completion if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) preferred_ids = list(map(int, data[1:])) result = assign_ids(n, preferred_ids) for res in result: print(res)"},{"question":"You are given an integer array `arr` containing `n` integers and an integer `m`. You need to rearrange the elements of the array such that the difference between the maximum and minimum value in any subarray of length `m` is minimized as much as possible. Formally, for all subarrays of length `m`, you need to minimize the maximum value of `(max(subarray) - min(subarray))`. The first line of input will contain two integers `n` (1 ≤ n ≤ 200,000) and `m` (1 ≤ m ≤ n). The second line will contain `n` integers, the elements of the array `arr` (1 ≤ arr[i] ≤ 10^9). Output a single integer representing the minimized maximum difference. Example Input: ``` 6 3 1 3 6 7 9 3 ``` Output: ``` 2 ``` Explanation: By rearranging the array to `[1, 3, 3, 6, 7, 9]`, the maximum differences between the minimum and maximum values of any subarray of length `m=3` can be minimized to `2`.","solution":"def minimize_max_diff(arr, m): Rearranges the array such that the difference between the maximum and minimum value in any subarray of length m is minimized. Returns the minimum possible value of the maximum difference. n = len(arr) arr.sort() minimum_max_diff = float(\'inf\') for i in range(n - m + 1): current_diff = arr[i + m - 1] - arr[i] minimum_max_diff = min(minimum_max_diff, current_diff) return minimum_max_diff"},{"question":"Given an array of integers, a set of operations can transform the array into any permutation of its elements. Each operation allows you to select two elements of the array and swap them. You are tasked with determining the minimum number of swaps needed to sort the array in ascending order. The first line of input contains an integer n (1 ≤ n ≤ 100,000), the number of elements in the array. The second line of input contains n integers a1, a2, ..., an (1 ≤ ai ≤ n), where ai represents the elements of the array. Output a single integer, the minimum number of swaps needed to sort the array in ascending order. For example, if the input array is [4, 3, 1, 2], the minimum number of swaps required to sort the array is 3.","solution":"def minimum_swaps(arr): Returns the minimum number of swaps needed to sort the array in ascending order. n = len(arr) arrpos = list(enumerate(arr)) arrpos.sort(key=lambda it: it[1]) vis = {k: False for k in range(n)} ans = 0 for i in range(n): if vis[i] or arrpos[i][0] == i: continue cycle_size = 0 j = i while not vis[j]: vis[j] = True j = arrpos[j][0] cycle_size += 1 if cycle_size > 0: ans += cycle_size - 1 return ans"},{"question":"You are given a grid of size n x n where each cell contains a digit (0-9). A path is a sequence of adjacent cells such that you can move from one cell to another if and only if they share an edge. The sum of a path is the sum of the digits of the cells in the path. The length of a path is the number of cells in the path. Your task is to find the path with the maximum average sum (sum of digits divided by length of the path). The path should not visit any cell more than once. The first line contains a single integer n (1 ≤ n ≤ 10) — the size of the grid. Each of the next n lines contains n digits without spaces, representing the grid. Print the maximum average sum rounded to 6 decimal places. **Example:** Input ``` 3 123 456 789 ``` Output ``` 6.000000 ``` Explanation: One of the optimal paths is moving from the top-left corner to the bottom-right corner through the cells (1,1) -> (1,2) -> (2,2) -> (3,3), which forms the path 1 -> 2 -> 5 -> 9. The sum of this path is 17 and the length is 4, so the average sum is 17 / 4 = 4.250000. The optimal path with maximum average sum is actually just (3, 3) which has sum 9 and length 1 (9 / 1 = 9.000000). Hence, the output is 9.000000.","solution":"def max_average_sum(grid): n = len(grid) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def dfs(x, y, path_sum, length): if visited[x][y]: return visited[x][y] = True nonlocal max_avg current_avg = path_sum / length max_avg = max(max_avg, current_avg) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]: dfs(nx, ny, path_sum + grid[nx][ny], length + 1) visited[x][y] = False max_avg = float(\'-inf\') for i in range(n): for j in range(n): visited = [[False] * n for _ in range(n)] dfs(i, j, grid[i][j], 1) return round(max_avg, 6) # Example usage: # grid = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(max_average_sum(grid)) # Output: 9.000000"},{"question":"Ragnar is organizing a treasure hunt for his friends. The hunt takes place on a rectangular grid, where each cell can be either empty, contain an obstacle, or contain the treasure. The grid is represented by an n x m matrix `grid`, where: - \'O\' represents an obstacle. - \'T\' represents the treasure. - \'E\' represents an empty cell. Ragnar starts at position (sr, sc) and wants to reach the treasure while avoiding obstacles. He can move up, down, left, or right, but cannot move diagonally or through obstacles. Ragnar wants to know the minimum number of moves required to reach the treasure from his starting position. If it\'s not possible to reach the treasure, return -1. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. The next n lines contain m characters each, describing the grid. The last line contains two integers sr and sc (0 ≤ sr < n, 0 ≤ sc < m) — the starting position in the grid. It is guaranteed that the cell at (sr, sc) is an empty cell (\'E\'). Output a single integer — the minimum number of moves required to reach the treasure, or -1 if it\'s not possible. # Example Input: ``` 5 5 EEEET EEOEE EOOEE EEEEE EEEET 0 0 ``` # Example Output: ``` 4 ``` In the provided example, the minimum path to reach the nearest treasure requires 4 moves.","solution":"from collections import deque def min_moves_to_treasure(n, m, grid, sr, sc): directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(sr, sc, 0)]) visited = set((sr, sc)) while queue: r, c, dist = queue.popleft() if grid[r][c] == \'T\': return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] != \'O\': visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"A new sushi restaurant in town is eager to understand customer preferences to improve their menu. To do so, they have created a survey data collection system, which lets customers rate their sushi items on a scale of 1 to 5. They plan to analyze the data to determine the sushi item with the highest average rating and the corresponding average rating value. In case of a tie, the item that appeared first in the list should be selected. You are given a list of sushi items with their ratings. Your task is to write a program to find the sushi item with the highest average rating and print its name and the average rating. The input begins with an integer n (1 ≤ n ≤ 10^5), the number of ratings received. The next n lines contain the name of the sushi item (a string of at most 100 characters) followed by an integer rating (1 ≤ rating ≤ 5). Print the name of the sushi item with the highest average rating and its average rating value correct to two decimal places. # Example Input ``` 5 SalmonRoll 5 TunaSashimi 4 SalmonRoll 3 CaliforniaRoll 4 TunaSashimi 5 ``` # Example Output ``` TunaSashimi 4.50 ``` # Additional Information - You can assume that sushi names contain only English letters. - Consider all values within the input to be valid (e.g., no negative ratings or ratings outside the given range).","solution":"def best_sushi(n, ratings): from collections import defaultdict sushi_ratings = defaultdict(list) for rating in ratings: sushi, score = rating[0], int(rating[1]) sushi_ratings[sushi].append(score) best_sushi = None highest_avg = 0 for sushi, scores in sushi_ratings.items(): avg_rating = sum(scores) / len(scores) if avg_rating > highest_avg or (avg_rating == highest_avg and best_sushi is None): best_sushi = sushi highest_avg = avg_rating return f\\"{best_sushi} {highest_avg:.2f}\\" # Example usage: # n = 5 # ratings = [ # [\\"SalmonRoll\\", 5], # [\\"TunaSashimi\\", 4], # [\\"SalmonRoll\\", 3], # [\\"CaliforniaRoll\\", 4], # [\\"TunaSashimi\\", 5] # ] # print(best_sushi(n, ratings)) # Output: \\"TunaSashimi 4.50\\""},{"question":"Kevin loves to arrange his collection of unique books on his shelf. However, he often finds it challenging to maintain some organization so that he can easily find a particular book when needed. He came up with a simple plan; he will arrange the books based on the first letter of the title. Books with the same initial letter should be grouped together, and within each group, the books should be arranged alphabetically. Given a list of distinct book titles, help Kevin by writing a function that will return the titles sorted according to his plan. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of book titles. Each of the next n lines contain a single book title composed of letters and spaces. The length of each title is between 1 and 100 characters inclusive, and all titles are unique. Output the sorted list of book titles as Kevin desires. Example **Input:** ``` 5 The Great Gatsby To Kill a Mockingbird A Tale of Two Cities Moby Dick Pride and Prejudice ``` **Output:** ``` A Tale of Two Cities Moby Dick Pride and Prejudice The Great Gatsby To Kill a Mockingbird ``` **Explanation:** - \\"A Tale of Two Cities\\" starts with \'A\' and is the only title in that group. - \\"Moby Dick\\" starts with \'M\' and is the only title in that group. - \\"Pride and Prejudice\\" starts with \'P\' and is the only title in that group. - \\"The Great Gatsby\\" and \\"To Kill a Mockingbird\\" both start with \'T\'. Within this group, they are arranged alphabetically.","solution":"def sort_books(titles): titles.sort(key=lambda title: (title[0], title)) return titles"},{"question":"Daniil loves playing with numbers, and his latest fascination is with creating sequences. He defines a \\"special sequence\\" of length `n` as a sequence of integers where the bitwise XOR of all the integers is zero, and no two integers in the sequence are the same. Given the length `n`, output any special sequence of length `n` if it exists. Note: The bitwise XOR of a sequence of integers is the result of applying the XOR operation to all integers in the sequence. The XOR operation between two bits results in `1` if the bits are different, and `0` if they are the same. The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the length of the sequence. If a special sequence of length `n` does not exist, print \\"NO\\". Otherwise, in the first line, print \\"YES\\", and in the next line, print `n` space-separated integers which form a special sequence. Example input/output: ``` Input: 3 Output: YES 1 2 3 ``` ``` Input: 2 Output: NO ```","solution":"def special_sequence(n): if n % 2 == 0: return \\"NO\\" else: sequence = list(range(1, n+1)) return \\"YES\\", sequence"},{"question":"Given an integer array nums, your task is to find the maximum possible sum of elements in any contiguous subarray of the given array. If the array contains only negative numbers, return the single largest number from it. Input The first line contains an integer n (1 ≤ n ≤ 10^5) - the number of elements in the array. The second line contains n space-separated integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) - the elements of the array. Output Print a single integer - the maximum sum of any contiguous subarray of the given array. Example Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 Explanation The subarray [4, -1, 2, 1] has the largest sum 6. Notes You can use Kadane\'s algorithm to solve this problem efficiently.","solution":"def max_subarray_sum(nums): Finds the maximum possible sum of elements in any contiguous subarray of the given array nums. If the array contains only negative numbers, returns the single largest number from it. Uses Kadane\'s algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Matilda loves sequences of integers and has recently stumbled upon a new type of sequence she calls a \\"Beautiful Sequence.\\" A Beautiful Sequence of length n is defined by the following properties: 1. It consists of integers (a_1, a_2, ..., a_n). 2. Each integer in the sequence is between 1 and k (inclusive), i.e., 1 le a_i le k. 3. Every integer between 1 to k appears at least once in the sequence. Matilda wants to find out how many possible Beautiful Sequences of length n can be formed. Given the values of n and k, your task is to calculate the number of Beautiful Sequences of length n modulo 10^9 + 7. The first line contains two integers n and k (1 le k le n le 1000) — the length of the sequence and the range of integers that must appear at least once. Print a single integer — the number of Beautiful Sequences of length n modulo 10^9 + 7. For example, for n = 3 and k = 2, the number of Beautiful Sequences could be calculated as follows: - Sequences of length 3 that include both 1 and 2 at least once are: (1,1,2), (1,2,1), (2,1,1), (2,2,1), (2,1,2), (1,1,2). Hence, the number of such sequences modulo 10^9 + 7 is 6.","solution":"MOD = 10**9 + 7 def beautiful_sequences_count(n, k): Returns the number of Beautiful Sequences of length n with integers between 1 and k (inclusive) where each integer from 1 to k appears at least once. The result is modulo 10^9 + 7. # Dynamic programming table dp = [[0] * (k + 1) for _ in range(n + 1)] dp[0][0] = 1 for length in range(1, n + 1): for used in range(1, k + 1): # Adding an element not changing the number of distinct elements dp[length][used] = (dp[length][used] + dp[length - 1][used] * used) % MOD # Adding an element which increases the number of distinct elements dp[length][used] = (dp[length][used] + dp[length - 1][used - 1] * (k - (used - 1))) % MOD return dp[n][k]"},{"question":"Alice and Bob are playing a game involving a grid of size m times n. The game starts with an empty grid, where each cell is initially white. The players take turns coloring one white cell either red or green. Alice always colors a cell red, and Bob always colors a cell green. Alice goes first. A player loses the game if after their move, there is a rectangle (a sub-grid) within the larger grid that is either completely red or completely green. Given the dimensions of the grid m and n, determine who will win the game if both players play optimally. The first line of the input contains two integers m and n (1 le m, n le 1000). Print \\"Alice\\" (without quotes) if Alice wins, and \\"Bob\\" (without quotes) if Bob wins. # Example Input ``` 2 2 ``` Output ``` Bob ``` Input ``` 3 3 ``` Output ``` Alice ``` # Explanation For a 2x2 grid, regardless of who moves second, they can always force the opponent to create a filled 2x2 red or green rectangle, resulting in a loss for Alice. For a 3x3 grid, Alice can always ensure that Bob has no moves left to force her into creating a 2x2 rectangle, resulting in a win for Alice.","solution":"def determine_winner(m, n): Determines the winner of the game based on the grid size m x n. If both players play optimally, return the winner (\\"Alice\\" or \\"Bob\\"). # If the grid size is small enough (1x1 or 1xn or mx1), Alice wins. # For larger grids, if both dimensions are even, Bob wins; otherwise, Alice wins. if m % 2 == 1 or n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"You have a sequence of n positive integers: a_1, a_2, ldots, a_n. The sequence has an interesting property: for every pair of indices (i, j) (1 leq i, j leq n, i neq j), the sum of a_i and a_j is not divisible by 2. This means, all pairs (a_i, a_j) are either both odd or both even. You are interested in computing the sum of the entire sequence modulo 10^9 + 7 and then verifying whether the sum is odd or even. Write a program that answers this for several test cases. The first line of input contains an integer t (1 leq t leq 100) — the number of test cases. Each test case starts with a line containing an integer n (1 leq n leq 10^5). The next line contains n positive integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6). For each test case, output \\"YES\\" if the sum of the sequence is odd, otherwise output \\"NO\\". Input: ``` 3 3 1 2 3 4 4 4 2 2 5 1 1 1 1 1 ``` Output: ``` NO NO YES ```","solution":"def sum_odd_or_even(t, test_cases): MOD = 10**9 + 7 result = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] total_sum = sum(a) % MOD if total_sum % 2 == 0: result.append(\\"NO\\") else: result.append(\\"YES\\") return result"},{"question":"You are provided with a sequence of numbers where each number represents the height of buildings in a particular city skyline. Your task is to determine the maximum area of a rectangle that can be formed using these buildings, where the width of each rectangle is 1 unit. The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 1000), indicating the number of test cases. Each test case consists of two lines: the first line contains an integer n (1 leq n leq 10^5), indicating the number of buildings; the second line contains n integers separated by spaces, representing the heights of the buildings (1 leq height leq 10^4). For each test case, output the maximum rectangular area possible for the skyline. # Example **Input:** ``` 2 7 2 1 5 6 2 3 4 4 3 1 3 2 ``` **Output:** ``` 10 4 ``` - In the first test case, the largest rectangle can be formed between the 3rd and 4th buildings with a height of 5 and 6, giving an area of 10. - In the second test case, the largest rectangle can be formed with the buildings at heights 3 and 1 with a width of 1, giving an area of 3.","solution":"def max_histogram_area(histogram): Helper function to calculate the maximum rectangular area in a histogram where the width of each bar is 1 unit. stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def maximum_skyline_area(test_cases): Function to process multiple test cases and return the maximum rectangular area for each skyline. results = [] for n, heights in test_cases: results.append(max_histogram_area(heights)) return results"},{"question":"Vasya loves playing with blocks of two types, type A and type B. He wants to form a sequence using n blocks, where n is an even number, such that: 1. Half of the blocks are of type A and half are of type B. 2. No two adjacent blocks are of the same type. Vasya needs your help to generate such a sequence. The first line of input contains the integer n (2 ≤ n ≤ 100), which is always even. Print the resulting sequence, consisting of n characters \'A\' and \'B\' that satisfies the conditions. If there are multiple correct sequences, you can print any of them. # Example **Input:** ``` 6 ``` **Output:** ``` ABABAB ``` **Input:** ``` 4 ``` **Output:** ``` BABA ```","solution":"def generate_sequence(n): Generates a sequence of \'A\' and \'B\' of length n (even number) such that: 1. Half of the blocks are of type A and half are of type B. 2. No two adjacent blocks are of the same type. :param n: An even integer representing the length of the sequence :return: A string of length n with the desired properties sequence = [] for i in range(n): if i % 2 == 0: sequence.append(\'A\') else: sequence.append(\'B\') return \'\'.join(sequence)"},{"question":"A planet management simulation game involves controlling resources across several colonies. For each colony, you can execute one upgrade action to maximize resource production, but an upgrade can only be applied once per colony. Each colony is represented by two integers `p` and `u`, where `p` is the current resource production rate, and `u` is the potential increment in production if you apply the upgrade to that colony. You want to maximize the total resource production from all colonies after choosing to upgrade exactly one colony. The input consists of: - A single integer `n` (1 ≤ n ≤ 100,000) representing the number of colonies. - `n` pairs of integers `p` and `u` (1 ≤ p, u ≤ 1,000,000) where `p` is the current production rate and `u` is the production increment if an upgrade is applied to that colony. Output a single integer: the maximum total production achievable by upgrading exactly one colony. # Sample Input ``` 3 5 3 6 2 4 5 ``` # Sample Output ``` 18 ``` # Explanation Upgrade the third colony, changing its production from 4 to 9. The total production becomes `5 + 6 + 9 = 20`.","solution":"def maximize_production(n, colonies): Returns the maximum total production after upgrading exactly one colony. :param n: Number of colonies :param colonies: List of tuples, each containing the production rate and potential increment (p, u) :return: Maximum total production total_production = sum(p for p, u in colonies) max_increment = max(u for p, u in colonies) return total_production + max_increment"},{"question":"You are given a list of integers where each integer represents the number of passengers that board or leave a bus at each bus stop along its route. The bus starts with zero passengers on board. Passengers will always board if there is enough capacity left on the bus. Given the bus capacity and the list of stops, your task is to calculate the maximum number of passengers on the bus at any given time during its route. Each stop is represented as an integer: - A positive number means passengers boarding the bus. - A negative number means passengers leaving the bus. If at any point the number of passengers exceeds the bus capacity, the bus cannot continue from that stop. In such a case, print -1. Otherwise, print the maximum number of passengers on the bus during its entire route. The first line contains two integers, n and capacity (1 ≤ n ≤ 10^5, 1 ≤ capacity ≤ 10^5) – the number of stops and the bus capacity. The second line contains n integers, where each integer represents the net change of passengers at each stop. # Examples **Input:** ``` 5 10 3 -1 4 -2 5 ``` **Output:** ``` 9 ``` **Input:** ``` 4 3 4 2 -1 -2 ``` **Output:** ``` -1 ```","solution":"def max_passengers_on_bus(n, capacity, passenger_changes): Determines the maximum number of passengers on bus during its route or -1 if capacity is exceeded. Parameters: n (int): Number of stops capacity (int): Maximum bus capacity passenger_changes (List[int]): List of net changes of passengers at each stop Returns: int: Maximum number of passengers at any time during the route or -1 if capacity is exceeded current_passengers = 0 max_passengers = 0 for change in passenger_changes: current_passengers += change if current_passengers > capacity: return -1 if current_passengers < 0: current_passengers = 0 # Resets to zero if count goes negative due to more leaving max_passengers = max(max_passengers, current_passengers) return max_passengers"},{"question":"You are organizing a robotics competition where each robot participates in a series of matches. Each match has a fixed duration, and robots may compete against each other in round-robin fashion. Due to the limitations in the number of available playfields, some matches may overlap, so a robot can only participate in one match at any given time. Given the schedule of matches, you need to determine the maximum number of matches a single robot needs to participate in sequentially without any breaks. Each match is represented by its start and end times. The first line of input contains a single integer m (1 le m le 10^5) — the number of matches. Each of the next m lines contains two integers s_i and e_i (1 le s_i < e_i le 10^9) — the start and end times of the i-th match. Output a single integer — the maximum number of matches a single robot needs to participate in without any breaks. # Example: Input: ``` 5 1 4 2 5 7 9 6 8 5 6 ``` Output: ``` 3 ``` # Explanation: The matches can be scheduled optimally as follows: - Robot 1: [1 to 4], [5 to 6], [7 to 9] - Robot 2: [2 to 5], [6 to 8]","solution":"def max_sequential_matches(matches): Determines the maximum number of matches a single robot needs to participate in sequentially without any breaks. Args: matches (list of tuples): Each tuple contains two integers representing the start and end times of a match. Returns: int: The maximum number of matches a single robot needs to participate in without any breaks. if not matches: return 0 # sort the matches by end time first, then by start time matches.sort(key=lambda x: (x[1], x[0])) max_count = 0 current_end = 0 for match in matches: if match[0] >= current_end: max_count += 1 current_end = match[1] return max_count"},{"question":"Alex is a data scientist working on a project involving analysis of transaction data from multiple banks. He has received a large list of transaction records, where each record contains an account number, transaction date, and transaction amount. For auditing purposes, Alex needs to identify and report any suspicious activities involving unusually high transactions. A transaction is considered suspicious if it exceeds a specified threshold amount within a given period. Alex wants you to write a program that can filter out such suspicious transactions for each account based on a given threshold and period. # Input - The first line contains three space-separated integers: n (number of transactions), k (threshold amount), and p (period in days) (1 ≤ n ≤ 100,000, 1 ≤ k ≤ 10^6, 1 ≤ p ≤ 30). - The next n lines each contain a transaction record in the format `account_number transaction_date transaction_amount`, where: - `account_number` is a string of 1 to 20 characters. - `transaction_date` is a date in the format YYYY-MM-DD. - `transaction_amount` is an integer (0 ≤ transaction_amount ≤ 10^6). # Output - For each account that has at least one suspicious transaction, print the `account_number` followed by the dates and amounts of all suspicious transactions for that account. The output should be grouped by account and sorted by account number and transaction date within each account. # Example Input ``` 6 10000 7 abc123 2023-01-01 5000 xyz789 2023-01-02 15000 abc123 2023-01-03 12000 xyz789 2023-01-05 5000 abc123 2023-01-07 20000 xyz789 2023-01-10 25000 ``` Output ``` abc123 2023-01-03 12000 2023-01-07 20000 xyz789 2023-01-02 15000 2023-01-10 25000 ``` Write a function that processes the input and outputs the suspicious transactions as described.","solution":"from datetime import datetime, timedelta from collections import defaultdict def find_suspicious_transactions(n, k, p, transactions): Identifies suspicious transactions for each account based on a given threshold and period. Args: n (int): Number of transactions. k (int): Threshold amount. p (int): Period in days. transactions (list): List of transaction records as tuples (account_number, transaction_date, transaction_amount). Returns: dict: Dictionary where key is the account number and value is a list of tuples (transaction_date, transaction_amount). # Preprocess the transactions account_transactions = defaultdict(list) for account_number, transaction_date, transaction_amount in transactions: account_transactions[account_number].append((transaction_date, transaction_amount)) suspicious_transactions = defaultdict(list) for account_number in account_transactions: sorted_transactions = sorted(account_transactions[account_number]) for date_str, amount in sorted_transactions: if amount > k: suspicious_transactions[account_number].append((date_str, amount)) return suspicious_transactions # Function to format the output based on the suspicious transactions def format_suspicious_transactions(suspicious_transactions): output = [] for account_number in sorted(suspicious_transactions): output.append(account_number) for date, amount in sorted(suspicious_transactions[account_number]): output.append(f\\"{date} {amount}\\") return output"},{"question":"You are given a list of integers representing the number of tasks that need to be completed each day over a month. The company wants to balance the workload such that the difference between the maximum number of tasks assigned to any two consecutive days is minimized. You need to find the optimal way to distribute the tasks over the month to achieve this. Input: - The first line contains an integer t (1 leq t leq 100) — the number of test cases. - For each test case, the first line contains an integer n (1 leq n leq 10^5) — the number of days in the month. - The second line contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9) — the number of tasks for each day. Output: - For each test case, print a single integer — the minimal difference between the maximum number of tasks assigned to any two consecutive days. Example: Input: ``` 2 5 1 3 5 7 9 4 3 8 15 18 ``` Output: ``` 2 3 ``` Explanation: - For the first test case, one possible way to distribute the tasks is [1, 5, 7, 3, 9], which achieves the minimal difference of 2 between the most assigned tasks on any two consecutive days. - For the second test case, one possible way to distribute the tasks is [3, 8, 15, 18], resulting in the minimal difference of 3.","solution":"def find_minimal_difference(t, test_cases): results = [] for case in test_cases: n, tasks = case tasks.sort() min_diff = float(\'inf\') for i in range(1, n): min_diff = min(min_diff, abs(tasks[i] - tasks[i - 1])) results.append(min_diff) return results # Example usage: # t = 2 # test_cases = [(5, [1, 3, 5, 7, 9]), (4, [3, 8, 15, 18])] # print(find_minimal_difference(t, test_cases)) # Output: [2, 3]"},{"question":"A delivery company is planning its delivery routes in a new city. The city can be represented as a grid of size m x n, where each cell is a building block. The company wants to find the shortest path for their delivery truck from a starting point to their destination, avoiding certain blocks that are impassable due to construction. The truck can move up, down, left, or right in the grid, but it cannot move diagonally. Additionally, some blocks may have traffic restrictions that limit the number of times the truck can pass through them. You are given the starting point, the destination point, and the configuration of the grid including the impassable blocks and the traffic-restricted blocks with their respective limits. Write a program to determine the length of the shortest path from the starting point to the destination point. If no such path exists, return -1. The first line contains three integers m, n, and k (1 ≤ m, n ≤ 1000, 0 ≤ k ≤ 10^5) — the number of rows and columns of the grid, and the number of traffic-restricted blocks. The second line contains four integers sx, sy, dx, dy (0 ≤ sx, dx < m, 0 ≤ sy, dy < n) — the starting point and the destination point. The next line contains an integer p (0 ≤ p ≤ 10^5) — the number of impassable blocks. Each of the next p lines contains two integers xi, yi (0 ≤ xi < m, 0 ≤ yi < n) — the coordinates of an impassable block. The next line contains an integer q (0 ≤ q ≤ k) — the number of traffic-restricted blocks. Each of the next q lines contains three integers xi, yi, t (0 ≤ xi < m, 0 ≤ yi < n, 1 ≤ t ≤ k) — the coordinates of a traffic-restricted block and the maximum number of times the truck can pass through it. Output a single integer — the length of the shortest path from the starting point to the destination point. If no such path exists, print -1. **Example:** Input: ``` 5 5 2 0 0 4 4 1 1 1 2 2 2 1 3 3 2 ``` Output: ``` 8 ``` Note: In this grid, the truck starts at (0, 0) and moves to (4, 4). The block (1, 1) is impassable. The block (2, 2) can be passed through only once, and the block (3, 3) can be passed through up to twice. However, there exists a path of length 8 that avoids the blocked and restricted conditions.","solution":"from collections import deque def shortest_path(m, n, k, sx, sy, dx, dy, impassable_blocks, traffic_restricted_blocks): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Initialize impassable and restricted block grids and the visited set impassable_set = set(impassable_blocks) restricted_dict = {(x, y): t for x, y, t in traffic_restricted_blocks} # Queue stores tuples of (x, y, steps, visited_count), starting from (sx, sy) with 0 steps and empty visited_count queue = deque([(sx, sy, 0, {})]) visited = set([(sx, sy, ())]) while queue: x, y, steps, visited_counts = queue.popleft() if (x, y) == (dx, dy): return steps for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < m and 0 <= ny < n: if (nx, ny) in impassable_set: continue new_visited_counts = visited_counts.copy() if (nx, ny) in restricted_dict: if new_visited_counts.get((nx, ny), 0) >= restricted_dict[(nx, ny)]: continue new_visited_counts[(nx, ny)] = new_visited_counts.get((nx, ny), 0) + 1 visit_state = (nx, ny, tuple(sorted(new_visited_counts.items()))) if visit_state not in visited: visited.add(visit_state) queue.append((nx, ny, steps + 1, new_visited_counts)) return -1 def parse_input_and_execute( m, n, k, sx, sy, dx, dy, p, impassable_blocks, q, traffic_restricted_blocks): return shortest_path(m, n, k, sx, sy, dx, dy, impassable_blocks, traffic_restricted_blocks)"},{"question":"Given a grid of n rows and m columns, each cell of the grid contains a non-negative integer indicating the height of that cell. A robot starts at the top-left corner (0, 0) of the grid, and can only move to the right or downward. The robot\'s goal is to reach the bottom-right corner (n-1, m-1) with the condition that it can never move to a cell with a height greater than the height of the cell it currently occupies. The robot has an initial height constraint that it cannot exceed initially. Write a program to find out if the robot can reach the bottom-right corner and, if possible, print the path the robot takes. Input: The first line contains three integers n, m, and h (1 ≤ n, m ≤ 100, 0 ≤ h ≤ 1000) — the number of rows and columns in the grid, and the initial height of the robot. The next n lines each contain m integers (0 ≤ grid[i][j] ≤ 1000) representing the heights of the cells in the grid. Output: If it is possible for the robot to reach the bottom-right corner, output \\"YES\\" followed by the path taken as a sequence of movements (\'R\' for right and \'D\' for down). If there are multiple solutions, print any one of them. If it is not possible to reach the bottom-right corner, output \\"NO\\". Examples: Input: 3 3 2 1 2 3 2 2 2 3 2 1 Output: YES RDRD Input: 3 3 3 3 4 5 2 4 6 1 2 0 Output: NO","solution":"def can_reach_bottom_right(n, m, h, grid): # Helper function to check if position (x, y) is within grid bounds and the height constraints. def is_valid(x, y, current_height): return 0 <= x < n and 0 <= y < m and current_height >= grid[x][y] # Use DFS to find a path def dfs(x, y, current_height, path): if not is_valid(x, y, current_height): return False # If reached bottom-right corner if x == n - 1 and y == m - 1: return True # Move Right (R) or Down (D) if x + 1 < n and is_valid(x + 1, y, grid[x][y]): if dfs(x + 1, y, grid[x][y], path): path.append(\'D\') return True if y + 1 < m and is_valid(x, y + 1, grid[x][y]): if dfs(x, y + 1, grid[x][y], path): path.append(\'R\') return True return False path = [] if dfs(0, 0, h, path): print(\\"YES\\") print(\'\'.join(path[::-1])) else: print(\\"NO\\") # Example usage: # grid = [ # [1, 2, 3], # [2, 2, 2], # [3, 2, 1] # ] # can_reach_bottom_right(3, 3, 2, grid)"},{"question":"You are given an unordered list of integers. Your task is to find the length of the longest consecutive elements sequence. A consecutive elements sequence is a sequence of integers such that each integer in the sequence has a predecessor (or successor) in the list that is exactly one less (or one more) than the integer itself. **Input:** - The first line contains a single integer n (1 leq n leq 10^5) — the number of elements in the list. - The second line contains n integers a_1, a_2, ... , a_n (-10^9 leq a_i leq 10^9). **Output:** - Print a single integer — the length of the longest consecutive elements sequence. **Example:** **Input:** ``` 7 100 4 200 1 3 2 101 ``` **Output:** ``` 4 ``` Explanation: The longest consecutive elements sequence is [1, 2, 3, 4], so the output is 4.","solution":"def longest_consecutive_sequence(nums): if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # Only start searching if num is the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given a sequence of integers, and your task is to find the maximum length of a contiguous subarray with a sum equal to zero. Write a program that takes an integer `n` as the length of the sequence and an array of `n` integers. Find the maximum subarray length with a sum of zero. If no such subarray exists, return 0. # Input - The first line contains a single integer `n` (1 le n le 10^5) — the number of elements in the array. - The second line contains `n` integers separated by spaces, each of which is between -10^4 and 10^4. # Output - Print a single integer — the length of the longest subarray with a sum of zero. If no such subarray exists, output 0. # Example Input ``` 8 1 -1 3 2 -2 -3 3 3 ``` Output ``` 6 ``` Explanation The contiguous subarray `[1, -1, 3, 2, -2, -3]` sums to zero and has a maximum length of 6. # Note To solve this problem efficiently, you can use a hashmap to store the cumulative sum at each index and check if the same sum has occurred before.","solution":"def max_length_zero_sum_subarray(n, arr): Finds the maximum length of a contiguous subarray with sum equal to zero. Parameters: n (int): The length of the array arr (list): A list of integers representing the array Returns: int: The maximum length of the subarray with sum equal to zero, or 0 if no such subarray exists hash_map = {} # To store the cumulative sum and the first occurrence index max_length, cum_sum = 0, 0 for i in range(n): cum_sum += arr[i] if cum_sum == 0: max_length = i + 1 elif cum_sum in hash_map: max_length = max(max_length, i - hash_map[cum_sum]) else: hash_map[cum_sum] = i return max_length"},{"question":"You are given a rectangular cake whose height is `H` (in centimeters) and width is `W` (in centimeters). The cake has been cut into a grid with `H` rows and `W` columns of equal-sized square pieces. Some of these pieces contain cherries, and you want to collect the maximum number of cherries possible by traversing the cake along a path from the top-left corner (1,1) to the bottom-right corner (H,W). However, there are some rules for the path you can take: 1. You can move either to the right or down from your current position. 2. You cannot move diagonally or revisit any piece. Your task is to determine the maximum number of cherries that can be collected along such a path. The first line of the input contains two integers `H` and `W` (1 ≤ H, W ≤ 100) — the height and width of the cake. The next `H` lines contain `W` integers each, representing the grid, where the value `0` means there is no cherry on that piece, and `1` means there is a cherry on that piece. Print one integer — the maximum number of cherries you can collect following the given rules. **Input Example:** ``` 3 3 0 1 1 1 0 1 0 1 1 ``` **Output Example:** ``` 4 ``` In the example, one of the optimal paths to collect cherries would be (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3), collecting 4 cherries.","solution":"def max_cherries(H, W, grid): # Create a DP array to store the maximum cherries collects up to each cell dp = [[0] * W for _ in range(H)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, W): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, H): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, H): for j in range(1, W): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The result is the maximum cherries collects up to the bottom right corner return dp[H-1][W-1] # Example usage H = 3 W = 3 grid = [ [0, 1, 1], [1, 0, 1], [0, 1, 1] ] print(max_cherries(H, W, grid)) # Output: 4"},{"question":"You are given a rectangular n x m grid filled with non-negative integers. Each cell of the grid has a value which represents the amount of gold in that cell. A miner is to start from the top-left cell of the grid and can only move either right or down, at each step, until they reach the bottom-right cell. The objective is to find the maximum amount of gold the miner can collect on their way from the top-left cell to the bottom-right cell. You need to implement a function that takes as input the dimensions of the grid n and m, followed by the grid itself, and returns the maximum amount of gold the miner can collect. **Input Format:** - The first line contains two integers, n and m (1 ≤ n, m ≤ 100), which are the dimensions of the grid. - The next n lines each contain m integers representing the values of the cells in the grid. Each value is a non-negative integer and does not exceed 1000. **Output Format:** - Print a single integer, which is the maximum amount of gold the miner can collect on the way from the top-left to the bottom-right cell. **Example:** ``` Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 12 Explanation: The path that leads to the maximum amount of gold is: 1 → 3 → 5 → 2 → 1. The miner collects 1 + 3 + 5 + 2 + 1 = 12 gold. ``` **Note:** The miner can only move to the right or down at each step. The function should be efficient to handle the input size constraints. **Function Signature:** ```python def max_gold_collected(n: int, m: int, grid: List[List[int]]) -> int: ```","solution":"from typing import List def max_gold_collected(n: int, m: int, grid: List[List[int]]) -> int: Returns the maximum amount of gold the miner can collect from the top-left to the bottom-right cell, moving only right or down. # Create a 2D DP array to store the maximum gold collected until each cell dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row of dp array for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column of dp array for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[n - 1][m - 1]"},{"question":"Ada is fond of reading. She has a bookshelf where she arranges her books in a straight line. Each book has a certain thickness, and she likes to keep them arranged such that the difference in thickness between any two consecutive books is minimized. Ada\'s friend Bob suggests she rearranges the books in an alternating up-and-down pattern to make the shelf look more interesting, while still minimizing the differences in thickness. The up-and-down pattern means starting with thinnest, then next thickest, then next thinnest, then next thickest, and so on. Given a list of book thicknesses, find an arrangement of the books that minimizes the difference in thickness between any two consecutive books, following Bob\'s suggestion. The first line contains a single integer n (2 le n le 100,000) — the number of books on Ada\'s shelf. The second line contains n integers t_1, t_2, dots, t_n (1 le t_i le 10^9) — the thicknesses of the books. Print a single line with the rearranged sequence of book thicknesses, following Bob\'s suggestion. # Example Input 5 4 1 7 3 6 Output 1 3 4 6 7 Input 6 5 2 8 7 1 9 Output 1 5 2 8 7 9 # Explanation In the first example, Ada\'s books are rearranged to the sequence 1, 3, 4, 6, 7 which minimizes the up-and-down closure in thickness between consecutive books: the differences are 2, 1, 2, 1. In the second example, the sequence 1, 5, 2, 8, 7, 9 follows Bob\'s suggestion where the differences in thickness are minimized as much as possible given the pattern. # Note The output arrangement is not necessarily unique, as multiple configurations can exist that satisfy the up-and-down alternating pattern with minimized differences in thickness. However, any such arrangement is valid.","solution":"def arrange_books(thicknesses): Arrange the books in an alternating up-and-down pattern minimizing the difference in thickness between any two consecutive books. # Sort the thicknesses sorted_thicknesses = sorted(thicknesses) # Create the up-down pattern result = [] i, j = 0, len(thicknesses) - 1 while i <= j: if i == j: result.append(sorted_thicknesses[i]) else: result.append(sorted_thicknesses[i]) result.append(sorted_thicknesses[j]) i += 1 j -= 1 return result"},{"question":"Alex wants to plan his workout sessions for a new fitness regime. He follows a particular training pattern where each session either involves strength training, cardio, or both combined. His fitness regime spans exactly m minutes each day. Alex can perform n different exercises, each having a specific type (strength, cardio, or combined), a duration in minutes, and an effort value that represents how effective the exercise is towards his fitness goals. He can switch between exercises instantly, but each exercise must be fully completed if started. Alex can\'t perform partial exercises. Your task is to help Alex choose exercises such that the total effort is maximized without exceeding the m minutes of his workout session for the day. The first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^9) — the number of exercises and the duration of the workout session in minutes. The next n lines each contain a string and two integers ei and di (1 ≤ ei, di ≤ 10^4), where the string represents the type of exercise (\\"strength\\", \\"cardio\\", or \\"combined\\"), ei is the effort value of the i-th exercise, and di is the duration of the i-th exercise in minutes. Print the maximum effort Alex can achieve within the given workout duration. Example: Input: 4 60 strength 50 30 cardio 30 20 combined 70 40 strength 60 50 Output: 110 Explanation: Alex can choose the first \\"strength\\" exercise (50 effort, 30 minutes) and the second \\"cardio\\" exercise (30 effort, 20 minutes) within 60 minutes for a total effort of 50 + 30 = 80. If Alex chooses the first \\"strength\\" exercise and the last \\"strength\\" exercise, the total duration would be 30 + 50 = 80 minutes, which exceeds the workout duration. Similarly, other combinations or individual exercises do not give a higher effort within 60 minutes. However, if Alex chooses the \\"combined\\" exercise with an effort value of 70 and a duration of 40 minutes, and the second \\"cardio\\" exercise with an effort value of 30 and a duration of 20 minutes, the total effort would be 70 + 30 = 100 within the 60-minute workout duration. Therefore, the maximum effort is 100.","solution":"def max_effort(n, m, exercises): This function takes the number of exercises n, the duration of workout in minutes m, and a list of exercises where each exercise is represented as a tuple of (type, effort, duration). It returns the maximum effort that can be achieved within the given workout duration. # Sort exercises based on effort to duration ratio in descending order exercises.sort(key=lambda x: x[1] / x[2], reverse=True) total_time = 0 total_effort = 0 for e_type, effort, duration in exercises: if total_time + duration <= m: total_time += duration total_effort += effort if total_time == m: break return total_effort"},{"question":"Bob is preparing to participate in a marathon race. The marathon track consists of n segments, each with a certain difficulty level. Since Bob wants to optimize his training, he wants to find the maximum difficulty he will face in any continuous sub-segment of the track of a given length k. You are tasked with helping Bob by finding the maximum difficulty for every possible sub-segment of length k in the marathon track. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2 × 10^5) — the total number of segments in the marathon track and the length of the sub-segment respectively. The second line contains n integers separated by spaces a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the difficulty levels of each segment. Output n - k + 1 integers — the maximum difficulty for each sub-segment of length k, from the beginning of the track to the end. For example, given the input: 7 3 1 3 5 2 8 6 4 The output should be: 5 5 8 8 8","solution":"def max_difficulty_segments(n, k, difficulties): Returns the maximum difficulty for every possible sub-segment of length k. from collections import deque result = [] deque_indices = deque() for i in range(n): while deque_indices and deque_indices[0] <= i - k: deque_indices.popleft() while deque_indices and difficulties[deque_indices[-1]] <= difficulties[i]: deque_indices.pop() deque_indices.append(i) if i >= k - 1: result.append(difficulties[deque_indices[0]]) return result"},{"question":"In a distant land, the currency system is somewhat peculiar. There are three main denominations available: coins worth 1, 5, and 10 units. The citizens of this land have coins of these denominations in surplus, so there is no limit on the number of coins they can use. A group of citizens needs to make an exact payment of N units for a special festival celebration. However, to make the payment process more enjoyable, they decided to use the maximum variety of coins possible. Given the amount N, determine the maximum number of different denominations that can be used to total exactly N units. The first and only line of input contains a single integer N (1 ≤ N ≤ 10^5) - the exact amount in units that needs to be paid. Print a single integer - the maximum number of different denominations that can be used to make the payment of exactly N units. Note: If it is not possible to use all three denominations (1, 5, and 10) to make the exact payment, then count how many different denominations can be used instead. # Example Input: 12 Output: 2 Input: 23 Output: 3 Explanation: In the first example, the amount N is 12. The citizens can use coins of 10 and 1 to make 11 (1+10+1) or use coins of 5 and 7 (1*2+5*2). Since there is no way to use all three denominations without exceeding 12, the maximum number of different denominations used is 2. In the second example, the amount N is 23. The citizens can use coins of 1, 5, and 10 (1*3+5*2+10*1). Hence, the maximum number of different denominations used is 3.","solution":"def max_variety_of_coins(N): Returns the maximum number of different denominations that can be used to make the exact payment of N units. The denominations available are 1, 5, and 10 units. # Check if it\'s possible to use all three denominations if N >= 16: # 10 + 5 + 1 return 3 elif N >= 6: # 5 + 1 (Need at least 6 to use 5 and 1 without using 10) return 2 else: return 1 # Only coins of denomination 1 can be used for N less than 6"},{"question":"A farmer has a rectangular field divided into an n x m grid of unit squares. Each unit square can either be fertile or infertile, and the farmer wants to find the largest rectangular subgrid that is fully fertile so that he can plant his crops effectively. You are given a binary matrix of size n x m, where a 0 represents an infertile square and a 1 represents a fertile square. Your task is to find the area of the largest rectangular subgrid that contains only 1s. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the field. The next n lines each contain m characters (either \'0\' or \'1\') representing the grid. Output a single integer, the area of the largest rectangular subgrid that contains only fertile squares. Example: Input: 4 5 10100 10111 11111 10010 Output: 6 Explanation: The largest rectangle of fertile squares has an area of 6, formed by the subgrid: 101 111 111","solution":"def largest_rectangle_area(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) heights = [0] * m max_area = 0 for i in range(n): for j in range(m): if matrix[i][j] == \'1\': heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, largest_histogram_area(heights)) return max_area def largest_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A restaurant chain is analyzing the delivery routes of their food orders. They want to determine the longest possible time for food delivery while still maintaining customer satisfaction. Each kitchen in the chain delivers food to various houses along specified routes. Each route has a delivery time associated with it. The goal for the restaurant chain is to find out the maximum delivery time from any given kitchen to any house it serves, ensuring that no house receives food from more than one kitchen in order to avoid confusion and maintain adequate delivery time records. You are given the number of kitchens and houses, and the delivery routes between them. Each route is described by the kitchen ID, house ID, and the delivery time for that route. There might be multiple kitchens serving different houses, but no house is served by more than one kitchen. All routes are directed from kitchens to houses, and there might be no route from a given kitchen to certain houses. The first line contains an integer ( t ) (1 ≤ ( t ) ≤ 30) — the number of test cases. Each test case starts with two integers ( k ) and ( h ) (1 ≤ ( k, h ) ≤ 100) — the number of kitchens and number of houses, respectively. The next integer ( r ) (0 ≤ ( r ) ≤ ( k times h )) indicates the number of routes. Each of the following ( r ) lines contains three integers ( x ), ( y ), and ( t ) (1 ≤ ( x ) ≤ ( k ), 1 ≤ ( y ) ≤ ( h ), 1 ≤ ( t ) ≤ 1000) — the kitchen ID, the house ID, and the delivery time in minutes for that route, respectively. For each test case, output the maximum delivery time from any kitchen to any house. If there are no routes from kitchens to houses in a test case, output -1. Example: Input: 2 3 4 6 1 1 5 1 2 10 2 3 15 2 4 20 3 1 7 3 2 25 2 3 2 1 2 45 2 3 30 Output: 25 45 Explanation: 1. In the first test case, the longest delivery time from kitchens to houses is 25 minutes. 2. In the second test case, the longest delivery time from kitchens to houses is 45 minutes.","solution":"def max_delivery_time(test_cases): Returns the maximum delivery time for each test case. Parameters: - test_cases: A list of dictionaries, each containing the number of kitchens, houses, routes, and a list of tuples with delivery times. Returns: - A list of integers representing the maximum delivery time for each test case. result = [] for case in test_cases: k, h, r, routes = case[\'k\'], case[\'h\'], case[\'r\'], case[\'routes\'] if r == 0: result.append(-1) continue max_time = -1 for route in routes: x, y, t = route max_time = max(max_time, t) result.append(max_time) return result # Example usage: test_cases = [ {\'k\': 3, \'h\': 4, \'r\': 6, \'routes\': [(1, 1, 5), (1, 2, 10), (2, 3, 15), (2, 4, 20), (3, 1, 7), (3, 2, 25)]}, {\'k\': 2, \'h\': 3, \'r\': 2, \'routes\': [(1, 2, 45), (2, 3, 30)]} ] print(max_delivery_time(test_cases)) # Output: [25, 45]"},{"question":"Alex loves solving puzzles involving number sequences. One day, he encountered a sequence problem that intrigued him. The problem is as follows: Given a positive integer ( n ), generate the first ( n ) terms of a special sequence. The sequence is defined by the following rules: 1. The first term of the sequence is 1. 2. The second term of the sequence is 1. 3. For any ( k ) (where ( k > 2 )), the ( k )-th term of the sequence is the sum of all previous terms in the sequence plus 1. Formally, if the sequence is denoted by ( S ), then: - ( S[1] = 1 ) - ( S[2] = 1 ) - ( S[k] = S[1] + S[2] + ... + S[k-1] + 1 ) for ( k > 2 ) Your task is to write a program that receives an input integer ( n ) and outputs the first ( n ) terms of the sequence. # Input - A single integer ( n ) (1 ≤ ( n ) ≤ 1000). # Output - Print the first ( n ) terms of the sequence separated by spaces. # Example Input: ``` 5 ``` Output: ``` 1 1 3 6 12 ``` # Explanation - The 3rd term is ( 1 + 1 + 1 = 3 ). - The 4th term is ( 1 + 1 + 3 + 1 = 6 ). - The 5th term is ( 1 + 1 + 3 + 6 + 1 = 12 ).","solution":"def generate_sequence(n): Generate the first n terms of the special sequence. :param n: Positive integer (1 ≤ n ≤ 1000) :return: List of first n terms of the sequence if n < 1: raise ValueError(\\"The input must be a positive integer greater than or equal to 1.\\") sequence = [1] for i in range(1, n): if i == 1: sequence.append(1) else: next_term = sum(sequence) + 1 sequence.append(next_term) return sequence"},{"question":"You are given an array of integers and a set of pairs of indices. For each pair of indices, you are required to calculate the greatest common divisor (GCD) of the subarray defined by those indices. Formally, you are given an array a of length n and q queries. Each query consists of a pair of integers l_j and r_j (1 le l_j le r_j le n), which defines a subarray a[l_j dots r_j]. You need to compute the GCD of this subarray for each query. Recall that the GCD of a sequence of integers is the largest positive integer that divides all the integers in the sequence without leaving a remainder. Input: - The first line contains two integers n and q (1 le n, q le 10^5) — the length of the array and the number of queries, respectively. - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^6) — the elements of the array. - The next q lines contain two integers each, l_j and r_j (1 le l_j le r_j le n) — the indices of the subarray for each query. Output: - For each query, print the GCD of the subarray defined by the pair of indices. Example: Input: ``` 5 3 2 3 6 9 5 1 3 2 4 1 5 ``` Output: ``` 1 3 1 ```","solution":"import math from typing import List, Tuple def gcd_subarray(n: int, q: int, a: List[int], queries: List[Tuple[int, int]]) -> List[int]: Returns the GCD of the subarray defined by the given queries. Parameters: n (int): Length of the array. q (int): Number of queries. a (List[int]): The array of integers. queries (List[Tuple[int, int]]): The list of pairs of indices defining subarrays. Returns: List[int]: The GCD of each subarray defined by the pairs of indices. def gcd(x, y): while y: x, y = y, x % y return x results = [] for l, r in queries: sub_gcd = a[l - 1] for i in range(l, r): sub_gcd = gcd(sub_gcd, a[i]) results.append(sub_gcd) return results"},{"question":"Alex is a rising chess prodigy who practices every day. She wants to analyze her games to improve her skills, focusing on her mistakes. She decided to write a program that would help her analyze the games, particularly the moves she missed during the endgame. In a simplified version of her favorite chess puzzle, there is only one piece left, the king. The king always starts at the bottom-left corner of the board (cell (1, 1)) and wants to reach the top-right corner of the board (cell (n, n)). The board is represented as an n x n grid, where some cells are safe (marked with \'.\'), while others are dangerous (marked with \'*\'). The king can move one cell at a time in any of the four cardinal directions (up, down, left, or right), but cannot step on dangerous cells. Help Alex design a program to find the minimum number of moves the king needs to reach the top-right corner of the board (n, n) from the starting position (1, 1), or determine if it\'s impossible. The first line of the input contains an integer n (1 ≤ n ≤ 1000), the size of the chessboard. The next n lines each contain a string of length n, representing the chessboard, with characters \'.\' or \'*\'. Output the minimum number of moves needed for the king to reach (n, n) from (1, 1). If it\'s impossible, print -1 instead. # Example Input 5 ..... .*.*. ..... .*.*. ..... Output 8 In this example, one possible path is (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) -> (4,3) -> (5,3) -> (5,4) -> (5,5).","solution":"from collections import deque def min_moves_to_reach_end(n, board): directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] visited = [[False] * n for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: r, c, dist = queue.popleft() if (r, c) == (n-1, n-1): return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n and not visited[nr][nc] and board[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, dist + 1)) return -1 # If reaching (n-1, n-1) is not possible"},{"question":"In a natural reserve, there are n types of trees planted across the area. Each type of tree grows in a specific number of different locations in the reserve. To facilitate monitoring and conservation efforts, the park management department wants to divide the entire area into several smaller sub-areas, such that each sub-area contains trees of only one type. You are asked to determine how many different ways you can divide the area into exactly k sub-areas under the above constraint. The first line contains two integers n (1 le n le 100) — the number of tree types in the reserve, and k (1 le k le n) — the number of sub-areas into which the entire reserve should be divided. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 100), where a_i is the number of different locations where the i-th type of tree grows. Print a single integer — the number of ways to divide the area into exactly k sub-areas, such that each sub-area contains trees of only one type. In the first sample, with 3 types of trees and 1 sub-area, any one of the 3 types of trees can occupy that sub-area, thus there are 3 different ways to make this division. In the second sample, dividing the area into 2 sub-areas exactly from 3 tree types can be done in 3 choose 2 = 3 ways. In the third sample, with 4 types of trees and needing to divide into exactly 4 sub-areas, there is only 1 way to do so, assigning each type of tree to a unique sub-area.","solution":"def number_of_ways(n, k, tree_locations): Determine the number of ways to divide the area into exactly k sub-areas. Parameters: - n (int): Number of tree types - k (int): Number of sub-areas - tree_locations (List[int]): Number of different locations where each type of tree grows Returns: - int: Number of ways to divide the area into k sub-areas from math import comb return comb(n, k)"},{"question":"Peter is a fan of cybersecurity and loves cracking codes for fun. Recently, he came across an interesting encryption problem. Given a string representing a secret message, Peter\'s task is to decode the message by following a specific procedure: 1. A character in the string can be one of the following types: - Numbers (0 through 9) - Alphabetic characters (\'a\' through \'z\') - Special characters (\'@\', \'#\', \'\', \'%\', \'&\') 2. For decoding: - Numbers remain unchanged. - Alphabetic characters are shifted to the next letter in the alphabet (with \'z\' wrapping around to \'a\'). - Special characters are replaced as follows: \'@\' becomes \'#\', \'#\' becomes \'\', \'\' becomes \'%\', \'%\' becomes \'&\', and \'&\' becomes \'@\'. Write a function that takes the encoded message as input and returns the decoded message. The first line of input contains the string message, which has a length n (1 ≤ n ≤ 10^5). Output the decoded message. Example: Input: hello2world@ Output: ifmmp2xpsme# Explanation: - \'h\' becomes \'i\' - \'e\' becomes \'f\' - \'l\' becomes \'m\' - \'o\' becomes \'p\' - \'2\' remains \'2\' - \'w\' becomes \'x\' - \'o\' becomes \'p\' - \'r\' becomes \'s\' - \'l\' becomes \'m\' - \'d\' becomes \'e\' - \'@\' becomes \'#\' Note that all operations are case-sensitive and only lowercase alphabets are involved. Implement this function to help Peter with his decryption task.","solution":"def decode_message(encoded_message): Decodes the given encoded message by following the given rules: - Numbers (0 through 9) remain unchanged. - Alphabetic characters (\'a\' through \'z\') are shifted to the next letter (with \'z\' wrapping around to \'a\'). - Special characters are replaced by the given sequence. special_chars_map = {\'@\': \'#\', \'#\': \'\', \'\': \'%\', \'%\': \'&\', \'&\': \'@\'} decoded_message = [] for char in encoded_message: if \'a\' <= char <= \'z\': # Shift to the next letter, wrap around z to a if char == \'z\': decoded_message.append(\'a\') else: decoded_message.append(chr(ord(char) + 1)) elif \'0\' <= char <= \'9\': # Numbers remain unchanged decoded_message.append(char) elif char in special_chars_map: # Replace special characters with the given sequence decoded_message.append(special_chars_map[char]) else: # This handles unexpected characters, which are left unchanged. decoded_message.append(char) return \'\'.join(decoded_message)"},{"question":"In a distant kingdom, there are n magic stones arranged in a straight line. Each stone has a magic power value represented by an integer. The kingdom has a tradition called the \\"Magic Stone Ritual,\\" where a sequence of adjacent stones can be selected to create a \\"Magic Sequence.\\" The power of a Magic Sequence is defined as the sum of its magic power values. The ritual master wants to select exactly k stones consecutively to form the most powerful Magic Sequence possible. Write a program that determines the maximum power of the Magic Sequence that can be achieved by selecting exactly k consecutive stones. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000), the number of stones and the number of stones to be selected. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) representing the magic power values of the stones. Print a single integer — the maximum power of the Magic Sequence that can be achieved by selecting exactly k consecutive stones. Example: Input: 7 3 -1 3 4 -1 2 1 -5 Output: 7 Explanation: The most powerful Magic Sequence is [3, 4, -1], with a power of 6. Another valid sequence is [4, -1, 2] with a power of 5. Maximum power among all possible sequences is 6.","solution":"def max_magic_sequence_power(n, k, stones): Returns the maximum power of the Magic Sequence that can be achieved by selecting exactly k consecutive stones. Parameters: n (int): Number of stones in a straight line. k (int): Number of stones to be selected consecutively. stones (list): List of integers representing the magic power values of the stones. Returns: int: Maximum power of the Magic Sequence. # Initial sum of the first \'k\' stones current_sum = sum(stones[:k]) max_sum = current_sum for i in range(k, n): current_sum += stones[i] - stones[i - k] # Slide the window if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given an integer array a of n elements and an integer m. Your task is to perform an operation to make the sum of the array as close as possible to m. You are allowed to apply the following operation as many times as you want: - Pick any element of the array and increase or decrease it by 1. You have to perform the operations in such a way that the number of operations is minimized. The first line of the input contains two integers n and m (1 le n le 10^5, -10^9 le m le 10^9) — the number of elements in the array and the target sum. The second line of the input contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the array. Print a single integer — the minimum number of operations required to make the sum of the array as close as possible to m. # Example Input 4 10 1 2 3 4 Output 0 Input 3 0 -1 -2 -3 Output 6 # Explanation In the first example, the array\'s sum is already 10, no operations are needed. In the second example, you can increase each -1, -2, -3 to 0 in 6 operations in total.","solution":"def min_operations_to_sum(n, m, a): Calculate the minimum number of operations required to make the sum of the array `a` as close as possible to `m`. Parameters: n (int): the number of elements in the array m (int): the target sum a (list of int): the elements of the array Returns: int: the minimum number of operations required current_sum = sum(a) return abs(current_sum - m)"},{"question":"You are working on a text editor that has a special auto-correction feature. This feature helps in capitalizing the first letter of each sentence in a paragraph while keeping the rest of the letters as is. A sentence is defined as a sequence of characters ending with a period (\'.\'), exclamation mark (\'!\'), or question mark (\'?\'). After one of these punctuation marks, there may be one or more spaces before the next sentence starts. Your task is to implement this auto-correction feature. The input will be a single paragraph and your output should be the corrected paragraph with the first letter of each sentence capitalized. Input The input is a single line containing a string of length n (1 ≤ n ≤ 10^6) representing the paragraph. Output Print the corrected paragraph with the first letter of each sentence capitalized. Example Input `hello world! what\'s going on? have a nice day.` Output `Hello world! What\'s going on? Have a nice day.` Input `this is a test. this is only a test.` Output `This is a test. This is only a test.`","solution":"def auto_correct(paragraph): Auto-corrects the paragraph by capitalizing the first letter of each sentence. A sentence is considered as any sequence of characters ending with \'.\', \'?\' or \'!\' followed by zero or more spaces. # Initialize an empty list to store corrected sentences corrected_paragraph = [] # Split the paragraph into parts separated by sentence delimiters start = 0 delimiters = {\'.\', \'!\', \'?\'} n = len(paragraph) while start < n: sentence_end = start while sentence_end < n and paragraph[sentence_end] not in delimiters: sentence_end += 1 if sentence_end < n: sentence_end += 1 sentence = paragraph[start:sentence_end] if sentence and sentence[0].isalpha(): sentence = sentence[0].upper() + sentence[1:] corrected_paragraph.append(sentence) start = sentence_end while start < n and paragraph[start] == \' \': corrected_paragraph.append(\' \') start += 1 return \'\'.join(corrected_paragraph)"},{"question":"Alice loves solving puzzles and recently she came across a special type of sequence puzzle. She has an integer array `nums` of size `n` and she needs to transform it into a new sequence following specific rules. The rules are as follows: 1. Alice can select any two distinct indices `i` and `j` (1-based) such that `1 ≤ i, j ≤ n` and `i ≠ j`. 2. She will then replace both `nums[i]` and `nums[j]` with their greatest common divisor (GCD). 3. These steps can be repeated any number of times. Alice wants to know the maximum possible value of the minimum element in the array after performing the above operations any number of times. Given the array `nums`, implement a function to find this maximum possible value. # Input The first line contains a single integer `n` (1 ≤ n ≤ 100) — the size of the array `nums`. The second line contains `n` space-separated integers `nums[i]` (1 ≤ nums[i] ≤ 10^6) — the elements of the array `nums`. # Output Print a single integer — the maximum possible value of the minimum element in the array after performing the allowed operations. # Examples Example 1 Input: ``` 3 10 20 30 ``` Output: ``` 10 ``` Example 2 Input: ``` 4 12 15 18 30 ``` Output: ``` 3 ``` Explanation In the first example, Alice can perform the operations to replace all elements with the GCD of the entire array, which is 10, so the maximum possible minimum element is 10. In the second example, Alice can perform operations to replace pairs such that eventually every element becomes 3, which is the GCD of the entire array, so the maximum possible minimum element is 3.","solution":"import math from functools import reduce def find_max_possible_minimum(nums): Finds the maximum possible value of the minimum element in the array after performing the allowed operations. Args: nums (list): A list of integers. Returns: int: The maximum possible value of the minimum element. return reduce(math.gcd, nums)"},{"question":"In a land far away, there are several cities connected by roads. Each city is numbered from 1 to n. There are m bidirectional roads connecting these cities, and each road has a certain length. The King of this land wants to build a new road network to ensure that every city can be reached from any other city. This new road network should be built in such a way that the total length of the roads used is minimized. Your task is to help the King find this minimal total length of the roads needed. The input consists of: - The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10,000) — the number of cities and the number of roads. - The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10,000) — indicating that there is a road between city u and city v with length w. Output a single integer — the minimal total length of the roads needed for every city to be reachable from any other city. If it is impossible to connect all the cities, print \\"Impossible\\". Example: Input: ``` 4 5 1 2 1 2 3 2 3 4 1 4 1 3 1 3 2 ``` Output: ``` 4 ``` In this example, the minimal road network would use the roads with lengths 1, 2, and 1, for a total length of 4.","solution":"def find_min_road_length(n, m, edges): Uses Kruskal\'s Algorithm to find the Minimum Spanning Tree (MST) of the graph. Parameters: n (int): The number of cities. m (int): The number of roads. edges (List[Tuple[int, int, int]]): List of edges where each edge is represented as a tuple (u, v, w). Returns: int: The minimal total length of the roads needed, or \'Impossible\' if not all cities can be connected. # Helper function to find the root of a node in the Union-Find structure def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) # Helper function to do union of two subsets in the Union-Find structure def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Initialize union-find structures parent = [] rank = [] # Initially, each city is its own parent for node in range(n): parent.append(node) rank.append(0) # Sort edges based on weight edges = sorted(edges, key=lambda item: item[2]) mst_weight = 0 mst_edges = 0 for edge in edges: u, v, w = edge u -= 1 v -= 1 root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: mst_weight += w mst_edges += 1 union(parent, rank, root_u, root_v) if mst_edges == n - 1: break if mst_edges == n - 1: return mst_weight else: return \\"Impossible\\" # Example usage n = 4 m = 5 edges = [ (1, 2, 1), (2, 3, 2), (3, 4, 1), (4, 1, 3), (1, 3, 2) ] print(find_min_road_length(n, m, edges)) # Output should be 4"},{"question":"You are given two strings s and t of lengths n and m respectively, consisting of lowercase English letters. Calculate the minimum number of operations (insertions, deletions, or substitutions of a single character) required to transform the string s into the string t. This problem is a classic example of the Levenshtein distance. The first line of input contains two integers n and m (1 le n, m le 1000) indicating the lengths of strings s and t respectively. The second line contains the string s of length n consisting of lowercase English letters. The third line contains the string t of length m consisting of lowercase English letters. Print a single integer: the minimum number of operations needed to transform string s into string t. # Example Input: 7 6 saturday sunday Output: 3 # Explanation: To transform \\"saturday\\" into \\"sunday\\", we can perform the following operations: 1. Delete \'a\' from the 2nd position. 2. Delete \'t\' from the 3rd position. 3. Delete \'r\' from the 4th position. Hence, the total number of operations required is 3.","solution":"def levenshtein_distance(s, t): Calculates the minimum number of operations required to transform string s into string t. The operations are insertions, deletions, or substitutions of a single character. :param s: Source string :param t: Target string :return: Minimum number of operations to transform s into t n = len(s) m = len(t) # Create a (n+1)x(m+1) matrix to store result of sub-problems dp = [[0] * (m + 1) for _ in range(n + 1)] # Initialize the dp array for i in range(n + 1): dp[i][0] = i for j in range(m + 1): dp[0][j] = j # Fill dp array using above relations for i in range(1, n + 1): for j in range(1, m + 1): if s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = min(dp[i-1][j] + 1, # Deletion dp[i][j-1] + 1, # Insertion dp[i-1][j-1] + 1) # Substitution return dp[n][m]"},{"question":"You are given a rectangular grid with dimensions n x m. Each cell in the grid either contains land (represented by 1) or water (represented by 0). Two cells are considered connected if they share a side and both contain land. Your task is to find the size of the largest connected component of land in the grid. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m integers either 0 or 1, representing the grid. For each test case, output a single integer — the size of the largest connected component of land. Sample Input: ``` 4 5 1 0 0 1 0 1 1 0 1 1 0 1 0 0 0 0 0 1 1 1 ``` Sample Output: ``` 4 ``` Explanation: The largest connected component of land in the given grid has size 4.","solution":"def largest_connected_component(n, m, grid): Returns the size of the largest connected component of land (1s) in the grid. def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == 0: return 0 grid[x][y] = 0 # mark as visited size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += dfs(x + dx, y + dy) return size max_size = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"You are given an array of lengths of ropes. You want to combine two ropes into one by tying them together. The cost of tying two ropes of lengths (a) and (b) is (a + b). After tying two ropes, you now have a new rope of length (a + b). You repeat this process until you are left with a single rope. Your task is to minimize the total cost of tying all the ropes into one. Write a function `optimalRopeCost(n, lengths)` that takes in two arguments: - `n`: the number of ropes (1 ≤ n ≤ 10^5) - `lengths`: a list of integers of length n representing the lengths of the ropes (1 ≤ lengths[i] ≤ 10^9) Your function should return the minimum total cost to tie all the ropes into one. # Input - The first line contains a single integer (t) (1 ≤ t ≤ 1000) — the number of test cases. - For each test case: - The first line contains an integer (n). - The second line contains (n) integers representing the lengths of the ropes. # Output For each test case, output the minimum total cost in a single line. # Example Input ``` 2 3 8 4 6 4 20 4 8 2 ``` Output ``` 28 54 ``` # Explanation In the first test case: 1. Tie 4 and 6 (cost = 10, new rope length = 10) 2. Tie 10 and 8 (cost = 18, new rope length = 18) Total cost = 10 + 18 = 28 In the second test case: 1. Tie 2 and 4 (cost = 6, new rope length = 6) 2. Tie 6 and 8 (cost = 14, new rope length = 14) 3. Tie 14 and 20 (cost = 34, new rope length = 34) Total cost = 6 + 14 + 34 = 54","solution":"import heapq def optimalRopeCost(n, lengths): Returns the minimum cost to tie all ropes into one. if n == 1: return 0 heapq.heapify(lengths) total_cost = 0 while len(lengths) > 1: first = heapq.heappop(lengths) second = heapq.heappop(lengths) cost = first + second total_cost += cost heapq.heappush(lengths, cost) return total_cost def minimum_cost_for_cases(num_cases, cases): results = [] for case in cases: n, lengths = case results.append(optimalRopeCost(n, lengths)) return results"},{"question":"You are given an array of integers `a` consisting of `n` elements. A subarray of this array is called \\"beautiful\\" if there are at most `k` different integers in it. Your task is to find the length of the longest beautiful subarray. The first line contains two integers `n` and `k` (1 ≤ n ≤ 100,000; 0 ≤ k ≤ n). The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000). Output a single integer — the maximum length of the beautiful subarray. Example: Input: 7 2 1 2 1 2 3 4 1 Output: 4 In the above example, subarray [1, 2, 1, 2] is the longest beautiful subarray containing at most 2 different integers.","solution":"def longest_beautiful_subarray(n, k, arr): Given an array of integers `arr` consisting of `n` elements, this function finds the length of the longest subarray with at most `k` different integers. from collections import defaultdict left = 0 max_len = 0 freq = defaultdict(int) distinct_count = 0 for right in range(n): if freq[arr[right]] == 0: distinct_count += 1 freq[arr[right]] += 1 while distinct_count > k: freq[arr[left]] -= 1 if freq[arr[left]] == 0: distinct_count -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len # Example usage: # n = 7 # k = 2 # arr = [1, 2, 1, 2, 3, 4, 1] # print(longest_beautiful_subarray(n, k, arr)) # Output: 4"},{"question":"In a distant land, the inhabitants communicate using sequences of integers. They have a special rule for checking if two sequences are equivalent: Two sequences are equivalent if you can rearrange the integers in one sequence to match the integers in the other sequence. Your task is to determine if two given sequences are equivalent based on this rule. The input consists of multiple test cases. The first line of the input contains an integer T, the number of test cases. Each test case consists of two lines: - The first line of a test case contains an integer n, the length of both sequences. - The second line of a test case contains the first sequence of n integers. - The third line of a test case contains the second sequence of n integers. For each test case, output \\"YES\\" if the two sequences are equivalent, and \\"NO\\" otherwise. # Input - The first line contains the integer T (1 leq T leq 100), the number of test cases. - For each test case, the first line contains an integer n (1 leq n leq 1000). - The next line contains n space-separated integers representing the first sequence. - The following line contains n space-separated integers representing the second sequence. # Output For each test case, output \\"YES\\" if the two sequences are equivalent, and \\"NO\\" otherwise. # Example Input ``` 3 3 1 2 3 3 1 2 4 1 2 2 3 2 3 1 2 5 1 2 3 4 5 1 2 3 5 5 ``` Output ``` YES YES NO ``` Note that in the first example, the sequences [1, 2, 3] and [3, 1, 2] can be rearranged to match each other, thus they are equivalent.","solution":"def are_sequences_equivalent(n, seq1, seq2): Returns \\"YES\\" if the two sequences are equivalent (can be rearranged to match each other), \\"NO\\" otherwise. return \\"YES\\" if sorted(seq1) == sorted(seq2) else \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): n = test_cases[i][\'n\'] seq1 = test_cases[i][\'seq1\'] seq2 = test_cases[i][\'seq2\'] results.append(are_sequences_equivalent(n, seq1, seq2)) return results"},{"question":"You are given a sequence of n positive integers. Define a subarray as a contiguous part of the sequence. You need to find the shortest subarray such that the sum of its elements is greater than or equal to a given integer k. The first line contains two integers n and k (1 ≤ n ≤ 2·10^5, 1 ≤ k ≤ 10^9) — the length of the sequence and the required sum. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the elements of the sequence. Print the length of the shortest subarray with sum greater than or equal to k. If there is no such subarray, print -1. # Example Input ``` 10 15 1 2 3 4 5 6 7 8 9 10 ``` Output ``` 2 ``` Input ``` 5 100 1 2 3 4 5 ``` Output ``` -1 ``` # Note In the first example, the shortest subarray with sum at least 15 is [7, 8], which has length 2. In the second example, there is no subarray with sum at least 100.","solution":"def shortest_subarray_with_sum_at_least_k(n, k, sequence): from collections import deque min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += sequence[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= sequence[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given a string containing only digits. Your task is to find the maximum number you can obtain by deleting exactly one digit from the given string. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single integer n (10 ≤ n ≤ 10^9) — the initial number. For each test case, output the maximum possible number that can be obtained by deleting exactly one digit from the initial number. Example: Input: 3 152 1001 10 Output: 52 101 1","solution":"def max_number_after_deleting_one_digit(num_str): Given a string of digits, return the maximum number possible by deleting exactly one digit. max_number = 0 for i in range(len(num_str)): modified_number = int(num_str[:i] + num_str[i+1:]) max_number = max(max_number, modified_number) return max_number def process_test_cases(test_cases): Given multiple test cases, process each one to find the result. results = [] for num_str in test_cases: results.append(max_number_after_deleting_one_digit(num_str)) return results # The main function that processes input and produces output. def main(input_lines): t = int(input_lines[0]) test_cases = input_lines[1:t+1] results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are given an array of integers, and you need to perform a series of operations on it. Each operation involves selecting a segment of the array and incrementing all its elements by 1. Your task is to determine the minimum number of such operations required to make all the elements of the array equal. The first line contains a single integer T (1 le T le 10) — the number of test cases. The first line of each test case contains an integer n (1 le n le 3 cdot 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^6). For each test case, print the minimum number of operations required. # Example **Input** ``` 2 5 3 3 4 5 5 4 5 5 5 5 ``` **Output** ``` 2 0 ``` # Explanation In the first test case, we can perform the following operations: 1. Increment the segment comprising the third element by 1: `[3, 3, 4, 5, 5]` → `[3, 3, 5, 5, 5]` 2. Increment the segment comprising the first and second elements by 1: `[3, 3, 5, 5, 5]` → `[4, 4, 5, 5, 5]` In the second test case, all elements are already equal, so no operation is needed.","solution":"def min_operations_to_make_equal(n, arr): Returns the minimum number of operations required to make all elements equal. max_value = max(arr) min_value = min(arr) return max_value - min_value def solve(test_cases): results = [] for n, arr in test_cases: results.append(min_operations_to_make_equal(n, arr)) return results"},{"question":"Jack is playing a game involving an m x n grid. Each cell of the grid contains an integer. Jack starts the game at cell (1, 1) and wants to reach cell (m, n). He can only move right or down at any point in time, and he must always stay within the grid boundaries. The objective of the game is to collect as many positive integers as possible along his path from (1, 1) to (m, n). The game\'s challenge lies in collecting the maximum sum of positive integers possible. Write a program that computes the maximum sum of positive integers Jack can collect on his path from cell (1, 1) to cell (m, n). Input consists of: - Two integers, m and n (1 ≤ m, n ≤ 1000), representing the number of rows and columns in the grid. - An m x n grid of integers, where each integer represents the value of a cell. Output a single integer, which is the maximum sum of positive integers Jack can collect. Please note: - If all the integers in the grid are non-positive, return 0. **Example:** Input: ``` 3 3 0 2 -1 1 -1 -1 -1 -1 5 ``` Output: ``` 7 ``` Here, Jack\'s path is (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) and the maximum sum of positive integers collected is 7.","solution":"def max_positive_sum(m, n, grid): dp = [[0] * n for _ in range(m)] if grid[0][0] > 0: dp[0][0] = grid[0][0] for i in range(1, m): if grid[i][0] > 0: dp[i][0] = dp[i-1][0] + grid[i][0] else: dp[i][0] = dp[i-1][0] for j in range(1, n): if grid[0][j] > 0: dp[0][j] = dp[0][j-1] + grid[0][j] else: dp[0][j] = dp[0][j-1] for i in range(1, m): for j in range(1, n): if grid[i][j] > 0: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[m-1][n-1]"},{"question":"Alyssa loves solving problems with arrays. Recently, she came across a new challenge involving the maximum subsequence sum in circular arrays. A circular array is an array where the end of the array wraps around to the beginning of the array. Alyssa\'s goal is to find the maximum sum of any subsequence in a circular array. Subsequence refers to a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Given an array a of n integers, help Alyssa determine the maximum possible sum of any subsequence in the array, considering the subsequence can wrap around from the end to the beginning due to the circular nature. The first line contains an integer n (1 le n le 3 cdot 10^5) - the length of the array. The next line contains n integers a_i (-10^9 le a_i le 10^9) - the elements of the array. Output a single integer - the maximum sum of any subsequence in the circular array. In the first example, the maximum sum subsequences is formed by wrapping around the array. In the second example, the maximum sum is obtained without wrapping. In the third example, the maximum sum is obtained by choosing only one element.","solution":"def max_subsequence_sum_circular(n, a): Determines the maximum possible sum of any subsequence in the circular array. Parameters: n (int): Length of the array. a (list): List of n integers representing the circular array. Returns: int: The maximum sum of any subsequence in the circular array. # Case 1: Maximum subsequence sum without wrapping max_sub_sum = max_subsequence_sum(a) # Case 2: Maximum subsequence sum with wrapping # Inverting array and calculating the minimum subsequence sum total_sum = sum(a) min_sub_sum = max_subsequence_sum([-x for x in a]) # Edge case: If all numbers are negative, wraparound sum will be zero which is invalid if total_sum == -min_sub_sum: return max_sub_sum max_wrap_sum = total_sum + min_sub_sum # The answer will be the maximum of both cases return max(max_sub_sum, max_wrap_sum) def max_subsequence_sum(a): Helper function to determine the maximum subsequence sum of a non-circular array. Parameters: a (list): List of integers representing the array. Returns: int: The maximum sum of any subsequence in the array. max_sum = float(\'-inf\') current_sum = 0 for number in a: current_sum = max(number, current_sum + number) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Mr. Smith loves painting very much. He lives in a city with n houses strategically arranged in a straight line, numbered from 1 to n. Each house is defined by its color. Mr. Smith has a limited amount of paint and he wants to repaint some of the houses to ensure that all the adjacent houses have different colors while using the minimum amount of paint. Formally, you are given an array of length n, where the i-th element represents the color of the i-th house. Mr. Smith needs you to determine the minimum number of houses he has to repaint to achieve his goal. The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of houses. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), which are the initial colors of the houses. Print a single integer, the minimum number of houses that Mr. Smith has to repaint. For example, for the input: ``` 5 1 1 2 2 2 ``` The output should be: ``` 2 ``` Explanation: Mr. Smith can repaint the second house to color 2 and the fourth house to color 1, minimizing the number of repaints to 2.","solution":"def min_repaints(n, colors): if n == 1: return 0 repaints = 0 for i in range(1, n): if colors[i] == colors[i-1]: repaints += 1 # Change the color of the current house to a different color (it can be any valid color) # Here, we change it to a color which is different than the previous and the next house. # To make sure that we don\'t introduce a new conflict, we can change it to a number that # is not equal to the next house\'s color or previous house\'s color. if i < n-1: if colors[i-1] != colors[i+1]: colors[i] = colors[i-1] else: colors[i] = colors[i] + 1 else: colors[i] = colors[i-1] + 1 return repaints"},{"question":"In a distant land, there exists a unique system for managing libraries. Each library has a collection of books, and each book is characterized by its ID number and its popularity score. The libraries are designed in such a way that at any given moment, a librarian can fetch the book with the highest popularity score in constant time (O(1)). However, it takes O(log n) time to insert a new book or remove the book with the highest popularity score. Your task is to design a function that processes a set of operations on a library. The library operations are as follows: - \\"insert x y\\" - Insert a book with ID `x` and popularity score `y` into the library. - \\"pop\\" - Remove and return the ID of the book with the highest popularity score from the library. If there are multiple books with the same highest popularity score, return the one with the smallest ID. - \\"top\\" - Return the ID of the book with the highest popularity score without removing it. If there are multiple books with the same highest popularity score, return the one with the smallest ID. The operations are given as a list of strings. Your function should return a list of results for the \\"pop\\" and \\"top\\" operations in the order they were executed. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of operations. - The next n lines each contain one of the operations described above. Output: - For each \\"pop\\" and \\"top\\" operation, output the ID of the corresponding book. Example: Input: 7 insert 1 15 insert 2 20 insert 3 20 top pop top pop Output: 2 2 3","solution":"import heapq class LibraryManager: def __init__(self): self.heap = [] self.book_map = {} def insert(self, book_id, popularity): heapq.heappush(self.heap, (-popularity, book_id)) self.book_map[book_id] = popularity def pop(self): while self.heap: popularity, book_id = heapq.heappop(self.heap) if self.book_map.get(book_id) == -popularity: del self.book_map[book_id] return book_id return None def top(self): while self.heap: popularity, book_id = self.heap[0] if self.book_map.get(book_id) == -popularity: return book_id else: heapq.heappop(self.heap) return None def process_library_operations(n, operations): manager = LibraryManager() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"insert\\": book_id = int(parts[1]) popularity = int(parts[2]) manager.insert(book_id, popularity) elif parts[0] == \\"pop\\": results.append(manager.pop()) elif parts[0] == \\"top\\": results.append(manager.top()) return results"},{"question":"In a certain town, there are n houses arranged in a straight line. Each house has a certain amount of candy that can be collected by trick-or-treaters. However, due to local superstition, trick-or-treaters can only collect candy from non-adjacent houses to avoid disturbing the spirits that protect the houses. You are given an array representing the amount of candy in each house. Determine the maximum amount of candy that can be collected by visiting houses such that no two houses visited are adjacent. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of houses. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1000) — the amount of candy in each house. Print one integer — the maximum amount of candy that can be collected. Consider the example: For the input: 5 3 2 7 10 12 The output should be: 22 Explanation: In this example, the trick-or-treaters can collect candy from the 1st, 3rd, and 5th houses for a total of 3 + 7 + 12 = 22 candies. Another optimal path is collecting from the 2nd and 5th houses for a total of 2 + 10 = 22 candies.","solution":"def max_candy_collected(n, candies): if n == 0: return 0 elif n == 1: return candies[0] elif n == 2: return max(candies[0], candies[1]) prev1 = candies[0] prev2 = max(candies[0], candies[1]) for i in range(2, n): current = max(prev1 + candies[i], prev2) prev1 = prev2 prev2 = current return prev2"},{"question":"In a grid-based game, you control an agent that can move up, down, left, or right. The grid consists of `n` rows and `m` columns, where each cell contains either a `0` (empty space) or a `1` (obstacle). The agent starts at the top-left corner of the grid (cell (1,1)) and needs to reach the bottom-right corner (cell (n,m)). Your task is to determine whether it is possible for the agent to reach the target without passing through any obstacles, and if so, calculate the minimum number of moves required. A move is defined as moving the agent from one cell to a neighboring cell directly adjacent to it (not diagonally). The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. Each of the next `n` lines contains `m` integers, each either `0` or `1`, representing the grid. Output a single integer: the minimum number of moves required to reach the bottom-right corner from the top-left corner. If it is not possible to reach the target, print `-1`. Example: Input: ``` 4 4 0 0 1 0 1 0 1 0 1 0 0 0 0 1 1 0 ``` Output: ``` 6 ``` Explanation: A possible path from (1,1) to (4,4) is (1,1) → (2,1) → (2,2) → (3,2) → (3,3) → (4,3) → (4,4), which takes 6 moves.","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): Determines the minimum number of moves required to reach the bottom-right corner of the grid from the top-left corner without passing through any obstacles. If it is not possible, returns -1. Params: - n (int): number of rows - m (int): number of columns - grid (list of lists): 2D list representing the grid where 0 is an empty space and 1 is an obstacle Returns: - int: the minimum number of moves to reach (n, m) from (1, 1), or -1 if not possible if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # down, right, up, left queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if (row, col) == (n-1, m-1): return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and grid[new_row][new_col] == 0: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"A software company is testing a new email filtering algorithm and wants to identify emails that contain offensive words. To achieve this, they need to scan each email and check for specific offensive words from a predefined list. If an email contains any offensive word, it should be flagged as offensive. The company provides the offensive words list and a set of emails. Each offensive word and each email is a non-empty string consisting of lowercase English letters only. It\'s guaranteed that no offensive word is a prefix of another offensive word. The input format includes: - A list of offensive words, where the first line contains an integer t (1 ≤ t ≤ 100), the number of offensive words, followed by t lines each containing one offensive word. - A list of emails, where the first line contains an integer n (1 ≤ n ≤ 1000), the number of emails, followed by n lines each containing one email in lowercase. Your task is to write a program that identifies which emails from the provided list are offensive. Output the indices of offensive emails in ascending order (1-based index). If no emails are offensive, output an empty list. Example: Input: 2 badword offensive 3 hello world this is a badword offensive content here Output: 2 3 In the example above, the second and third emails contain offensive words, so their indices are included in the output.","solution":"def find_offensive_emails(offensive_words, emails): Identifies emails that contain any offensive words. Args: offensive_words (list of str): List of offensive words. emails (list of str): List of emails to be checked. Returns: list: List of indices (1-based) of offensive emails. offensive_indices = [] for idx, email in enumerate(emails, start=1): if any(word in email for word in offensive_words): offensive_indices.append(idx) return offensive_indices def process_input(t, offensive_words, n, emails): return find_offensive_emails(offensive_words, emails)"},{"question":"Alice is playing a game with her friends on a 1D number line. Initially, Alice stands on position 0. Each of her friends will tell her to move either left or right by a certain number of steps. After all the moves are executed, Alice wants to know her final position. However, Alice\'s friends like to challenge her, so they specify subsets of steps where the total number of steps must be the same. If it\'s impossible to satisfy this constraint, Alice won\'t make any move. Given the number of moves and the movement instructions, can you determine Alice\'s final position or state that the moves are not possible? The first line contains an integer n (1 ≤ n ≤ 10^5) — number of moves. Each of the next n lines contains a character ci (either \'L\' or \'R\') and an integer di (1 ≤ di ≤ 10^4), representing a move either left or right by di steps. The next m lines contain three integers li, ri, si (1 ≤ li ≤ ri ≤ n, 0 ≤ si ≤ 10^9) meaning that the total number of steps in moves li, li+1, ..., ri must be exactly si. Print \\"YES\\" and a single integer — Alice\'s final position if the constraints are satisfied. If it is impossible to satisfy the constraints, print \\"NO\\".","solution":"def final_position(n, moves, constraints): position = 0 move_array = [0] * n # Convert the moves to an array where left is negative and right is positive for i in range(n): c, d = moves[i] move_array[i] = d if c == \'R\' else -d for li, ri, si in constraints: # Calculate the sum of the subarray from li-1 to ri-1 subarray_sum = sum(move_array[li-1:ri]) # Check if the subarray sum equals si if subarray_sum != si: return \\"NO\\" position = sum(move_array) return \\"YES\\", position"},{"question":"Emma is collecting stickers and she has multiple packs each with different stickers. She wants to know the maximum number of distinct stickers she can have if she can exchange stickers between packs, but she can only perform one exchange operation where she swaps one sticker from one pack with one sticker from another pack. Given n packs where each pack has a distinct set of stickers represented as integers, your task is to calculate the maximum number of distinct stickers Emma can have after performing one exchange operation (or no exchange if it doesn\'t benefit). Input: - The first line contains an integer n (2 ≤ n ≤ 1000) – the number of sticker packs. - The next n lines, each contains a space-separated list of integers representing the stickers in that pack. Each integer is between 1 and 10^6. The total number of stickers across all packs will not exceed 10^5. Output: - Print a single integer representing the maximum number of distinct stickers Emma can have after at most one exchange operation. Example: Input: ``` 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 9 ``` Explanation: In this case, all stickers in packs are already unique, so no exchange increases the number of distinct stickers. Thus, the maximum number of distinct stickers is 9. Another example: Input: ``` 2 1 2 3 2 3 4 ``` Output: ``` 4 ``` Explanation: Emma can swap sticker 1 from the first pack with sticker 4 from the second pack, resulting in stickers {1, 2, 3, 4} being distinct.","solution":"def max_distinct_stickers(packs): Returns the maximum number of distinct stickers Emma can have after at most one exchange operation. Parameters: packs (List[List[int]]): A list of lists where each list represents a sticker pack. Returns: int: The maximum number of distinct stickers. from collections import Counter # Combine all stickers to find the unique stickers without any exchange all_stickers = [sticker for pack in packs for sticker in pack] initial_unique_count = len(set(all_stickers)) # If all stickers are already unique, return this number if initial_unique_count == len(all_stickers): return initial_unique_count # Find frequency map of stickers sticker_count = Counter(all_stickers) # Maximum candidate after one swap operation max_after_one_swap = initial_unique_count # Check all pairs of packs to find potential beneficial swap for i in range(len(packs)): for j in range(i + 1, len(packs)): pack_i = set(packs[i]) pack_j = set(packs[j]) # Current distinct count current_distinct_count = len(set(all_stickers)) # Go through each pair of stickers that could be swapped for sticker_i in pack_i: for sticker_j in pack_j: new_pack_i = pack_i.copy() new_pack_j = pack_j.copy() # Perform the swap temporarily new_pack_i.remove(sticker_i) new_pack_i.add(sticker_j) new_pack_j.remove(sticker_j) new_pack_j.add(sticker_i) # Calculate the new unique count after the swap new_stickers = (set(new_pack_i) | set(new_pack_j) | set(all_stickers) - {sticker_i, sticker_j}) new_unique_count = len(new_stickers) # Update max if found a better count if new_unique_count > max_after_one_swap: max_after_one_swap = new_unique_count return max_after_one_swap"},{"question":"Given an array of integers, you need to create a new array of the same length where each element at index `i` is the product of all the numbers in the original array except the one at `i`. # Input The first line contains an integer `n` (1 ≤ n ≤ 10^6) — the length of the array. The second line contains `n` integers separated by space, representing the array `a` (1 ≤ a[i] ≤ 10^9). # Output Print a single line with `n` integers representing the transformed array as described above. # Example **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` 24 12 8 6 ``` # Note For the given example: - For the element at index 0, the product of other elements is `2 * 3 * 4 = 24`. - For the element at index 1, the product of other elements is `1 * 3 * 4 = 12`. - For the element at index 2, the product of other elements is `1 * 2 * 4 = 8`. - For the element at index 3, the product of other elements is `1 * 2 * 3 = 6`. Constraints - You are not allowed to use division. - Your solution should run in O(n) time complexity.","solution":"def product_except_self(nums): Returns an array where each element is the product of all the elements in the original array except the one at that position. n = len(nums) if n == 0: return [] products = [1] * n # Calculate left-side products of each element left_product = 1 for i in range(n): products[i] = left_product left_product *= nums[i] # Calculate right-side products of each element and multiply with existing left-side product right_product = 1 for i in range(n-1, -1, -1): products[i] *= right_product right_product *= nums[i] return products"},{"question":"In a small town, there is a long straight road with houses on both sides. Every house on the left side of the road has a unique number, starting from 1 and increasing by 1 consecutively to the end of the road. Every house on the right side of the road also has a unique number, but starting from 1 at the end of the road, and increasing by 1 consecutively towards the beginning of the road. Given the total number of houses on each side of the road and a house number, your task is to determine whether the house is on the left or right side and calculate its position (from either end of the road). Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of houses on each side of the road. - The second line contains an integer `h` (1 ≤ h ≤ 2n) — the house number you are interested in. Output: - If the house `h` is on the left side of the road, print \\"Left <position>\\". - If the house `h` is on the right side of the road, print \\"Right <position>\\". Examples: Input: 5 3 Output: Left 3 Input: 5 7 Output: Right 4 Note: - For the first example, the left side houses have numbers 1 through 5, so the 3rd house is simply the 3rd house from the beginning. - For the second example, the right side houses have numbers 6 through 10, but numbered 1 through 5 from the end of the road. Hence, house number 7 is the 4th house from the end of the road.","solution":"def house_position(n, h): Returns the position of the house on either the left or right side of the road. Parameters: n (int): The number of houses on each side of the road. h (int): The house number. Returns: str: A string indicating the side (\\"Left\\" or \\"Right\\") and the position of the house. if 1 <= h <= n: return f\\"Left {h}\\" elif n < h <= 2 * n: position = (2 * n) - h + 1 return f\\"Right {position}\\" else: raise ValueError(\\"House number out of range\\")"},{"question":"Given an array of n integers, your task is to determine the length of the longest subarray that forms a contiguous subsegment of an arithmetic progression (AP). An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant (i.e., x, x+d, x+2d, ...). More formally, you need to find the maximum length of a contiguous subarray such that for every pair of adjacent elements in the subarray, the difference between them is the same. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output a single integer — the length of the longest contiguous subarray that forms a subsegment of an arithmetic progression. # Example **Input:** ``` 6 10 7 4 6 8 10 ``` **Output:** ``` 4 ``` **Explanation:** The longest contiguous subarray that forms an arithmetic progression is [4, 6, 8, 10], with a common difference of 2. The length of this subarray is 4.","solution":"def longest_ap_subarray_length(arr): Returns the length of the longest contiguous subarray that forms a subsegment of an arithmetic progression. n = len(arr) if n <= 1: return n max_length = 1 current_length = 1 current_diff = float(\'inf\') for i in range(1, n): diff = arr[i] - arr[i-1] if diff == current_diff: current_length += 1 else: current_diff = diff current_length = 2 max_length = max(max_length, current_length) return max_length"},{"question":"Given an array of integers, you need to reorder the elements of the array such that all the even numbers come before all the odd numbers. You are required to perform this operation in-place, i.e., you should not use extra memory for another array. # Input: - The first line contains an integer n (1 le n le 10^5), the number of elements in the array. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 le a_i le 10^9). # Output: - Print the reordered array such that all even numbers come before all odd numbers. # Example: Input: ``` 7 1 2 3 4 5 6 7 ``` Output: ``` 2 4 6 1 3 5 7 ``` # Note: The order of the even and odd numbers within their respective groups does not matter. Any arrangement that satisfies the condition is considered correct.","solution":"def reorder_even_before_odd(n, arr): left, right = 0, n - 1 while left < right: if arr[left] % 2 == 0: left += 1 elif arr[right] % 2 == 1: right -= 1 else: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"In an ancient kingdom, there are n strategically important cities connected by m bidirectional roads. Each road has a certain resistance level to being destroyed by invaders, represented by the integer length of the road. You are the chief engineer assigned to ensure that all cities remain connected even if the roads are destroyed. Your goal is to find the cost of the minimum set of roads required to keep the cities connected. Given the cities and roads of the kingdom, find the minimum cost to connect all cities. The input format is as follows: - The first line contains two integers, n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100,000), representing the number of cities and the number of roads, respectively. - The next m lines each contain three integers, u, v, and l (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ l ≤ 1000), representing the endpoints of a road and its length. Output a single integer: the minimum cost to connect all cities. If not all cities can be connected, output -1. Example: Input: ``` 4 5 1 2 3 2 3 4 3 4 5 4 2 1 1 3 2 ``` Output: ``` 6 ``` Explanation: The optimal way to connect all cities is to use the roads with lengths 1, 2, and 3. Hence, the minimum cost is 1 + 2 + 3 = 6. If it\'s not possible to connect all cities with the provided roads, the output should be -1.","solution":"def minimum_cost_to_connect_cities(n, m, roads): Computes the minimum cost to connect all cities using Kruskal\'s Minimum Spanning Tree algorithm. If not all cities can be connected, returns -1. # Helper function to find the parent of a node in the disjoint set def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) # Helper function to do union of two sets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Step 1: Sort all the edges in non-decreasing order of their length roads.sort(key=lambda x: x[2]) # Allocate memory for creating a disjoint set parent = [] rank = [] # Create n disjoint sets (one for each city) for node in range(n): parent.append(node) rank.append(0) result = 0 e = 0 # Number of edges in the result i = 0 # Initial index of sorted edges while e < n - 1 and i < m: # Step 2: Pick the smallest edge and increment the index u, v, l = roads[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) # If including this edge doesn\'t form a cycle if x != y: e += 1 result += l union(parent, rank, x, y) if e == n - 1: return result else: return -1"},{"question":"Alex is fascinated by mathematical patterns. He came across an intriguing problem involving perfect squares and decided to challenge his friends. Given a number n, he wants to determine the minimum number of perfect squares required to sum up to n. A perfect square is a number that can be expressed as i² where i is an integer. Help Alex by writing a function that calculates this minimum number. The first line contains a single integer n (1 ≤ n ≤ 10000). Print a single integer — the minimum number of perfect squares that sum to n. For instance, if n = 12, one of the ways to sum up to 12 is 4 (2²) + 4 (2²) + 4 (2²), which is three perfect squares. However, a more optimal way is 9 (3²) + 1 (1²) + 1 (1²) + 1 (1²), so the answer would be 4. Note that there may be different numbers that yield the same minimum number of perfect squares, and you need to find out that minimum number. Similarly, if n = 13, an optimal way is 9 (3²) + 4 (2²), so the answer would be 2.","solution":"def num_squares(n): Returns the minimum number of perfect squares that sum up to n. if n <= 0: return 0 # Create an array dp where dp[i] represents the minimum # number of perfect squares sum needed to achieve sum i dp = [float(\'inf\')] * (n + 1) dp[0] = 0 # Loop to fill the array for i in range(1, n + 1): j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - j * j] + 1) j += 1 return dp[n]"},{"question":"In an ancient kingdom, there exist magical artifacts known as \\"Power Stones\\". Each Power Stone has an integer value associated with it, which indicates its power level. The King has a collection of these artifacts, and he wishes to understand the power relationships among them. Two Power Stones are considered \\"compatible\\" if their power levels are either both even or both odd. The King wants to count the number of pairs of Power Stones in his collection that are compatible. You are given an array of integers representing the power levels of the Power Stones. Count the number of compatible pairs in the collection. # Input - The first line contains an integer n (1 ≤ n ≤ 2 × 10^5) — the number of Power Stones. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the power levels of the Power Stones. # Output - Print a single integer — the number of compatible pairs of Power Stones. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 4 ``` Explanation - There are 4 compatible pairs: (1, 3), (1, 5), (3, 5), and (2, 4). Write a program that will help the King determine the number of compatible pairs of Power Stones in his collection.","solution":"def count_compatible_pairs(n, power_levels): even_count = sum(1 for p in power_levels if p % 2 == 0) odd_count = n - even_count return (even_count * (even_count - 1) // 2) + (odd_count * (odd_count - 1) // 2) # Example usage: # n = 5 # power_levels = [1, 2, 3, 4, 5] # print(count_compatible_pairs(n, power_levels)) # Output : 4"},{"question":"Mina is working on a project that involves square matrices of integers. She needs to find the largest sum of elements in any contiguous submatrix within a given matrix. A submatrix is defined by selecting a rectangular section from the matrix, and its sum is the sum of all the elements within that rectangle. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the matrix. The next n lines each contain m integers, representing the elements of the matrix. The task is to compute the largest sum of elements in any contiguous submatrix. Output a single integer, the largest sum of elements across all possible contiguous submatrices. # Example Input: ``` 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 ``` Output: ``` 29 ``` In this example, the submatrix with the largest sum is: ``` 3 8 10 1 -4 -1 1 7 ``` The sum of all elements in this submatrix is 29.","solution":"def max_sum_submatrix(matrix): Returns the maximum sum of any contiguous submatrix in the given 2D matrix. n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') # Iterate over every possible combination of top and bottom row for top in range(n): temp = [0] * m for bottom in range(top, n): # Add all elements of the current row to the temp array for i in range(m): temp[i] += matrix[bottom][i] # Find the maximum sum subarray in temp[] current_max = kadane(temp) max_sum = max(max_sum, current_max) return max_sum def kadane(arr): Helper function to find the maximum sum subarray using Kadane\'s algorithm. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Emma is an inventive baker who loves to create customized cakes. Each cake has a specific recipe requiring a certain quantity of several ingredients. Emma has recently partnered with a new supplier that can only deliver ingredients in bulk, in bags of varying sizes. To optimize the cost and minimize waste, Emma wants to determine the fewest number of bags required for a given recipe. Each type of ingredient has bags available in consistent sizes, and the sizes of the bags for different ingredients do not necessarily match. Given the quantity required for each ingredient in a specific recipe, help Emma decide the minimum number of bags needed for each ingredient so she can order them accordingly. The first line contains an integer k (1 le k le 100) — the number of different ingredients in the recipe. The next line contains k integers q_1, q_2, ldots, q_k (1 le q_i le 1000) — where q_i represents the quantity required for the i-th ingredient in the recipe. The next k lines contain an integer b_i (1 le b_i le 100) followed by b_i integers which represent the available bag sizes for the i-th ingredient. Output k lines, each line containing the minimum number of bags needed for the respective ingredient in the order they were given. If it is not possible to match the exact quantity required with any combination of available bag sizes, output -1 for that ingredient. In the first example, the first ingredient requires 5 units and can be matched exactly with a bag of size 5. The second ingredient requires 8 units and can be exactly matched with a combination of bag sizes 5 and 3. In the second example, the third ingredient cannot match exactly with any combination of available bag sizes, hence the answer is -1 for that ingredient.","solution":"from itertools import combinations_with_replacement import math def min_bags_needed(k, quantities, bag_sizes_list): results = [] for i in range(k): quantity = quantities[i] bag_sizes = bag_sizes_list[i] min_bags = float(\'inf\') found = False # Try combinations with replacement of bags of different sizes to get required quantity for size in range(1, math.ceil(quantity/min(bag_sizes)) + 1): for combo in combinations_with_replacement(bag_sizes, size): if sum(combo) == quantity: min_bags = min(min_bags, size) found = True if found: results.append(min_bags) else: results.append(-1) return results"},{"question":"You are given an array of integers, and you need to perform a series of range update operations. After performing all the operations, you need to provide the updated array. Each operation involves adding a given value to all elements within a specified subarray. Specifically, you will be given q operations. Each operation consists of three integers l, r, and v (1 ≤ l ≤ r ≤ n, -10^9 ≤ v ≤ 10^9), meaning that v should be added to all elements in the subarray a[l], a[l+1], ..., a[r]. Your task is to determine what the array looks like after all q operations have been applied. # Input - The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of operations. - The second line contains n integers a₁, a₂, ..., aₙ (|aᵢ| ≤ 10^9) — the elements of the array. - The next q lines each contain three integers l, r, v (1 ≤ l ≤ r ≤ n, -10^9 ≤ v ≤ 10^9) — describing the operation as explained above. # Output - Print a single line containing n integers — the final state of the array after all operations have been applied. # Example Input ``` 5 3 1 2 3 4 5 1 3 10 2 4 -2 3 5 7 ``` Output ``` 11 10 18 9 12 ``` # Explanation Initial array: [1, 2, 3, 4, 5] After the first operation, we add 10 to the subarray [1, 2, 3] which changes the array to [11, 12, 13, 4, 5]. After the second operation, we add -2 to the subarray [2, 3, 4], the array becomes [11, 10, 11, 2, 5]. After the third operation, we add 7 to the subarray [3, 4, 5], the array updates to become [11, 10, 18, 9, 12]. Final array: [11, 10, 18, 9, 12]","solution":"def range_update(n, q, arr, operations): # Apply each operation to the array for op in operations: l, r, v = op for i in range(l-1, r): arr[i] += v return arr"},{"question":"Fedor is a fan of competitive coding and has decided to practice by solving problems daily. He has n problems to solve, each problem has a difficulty level from 1 to 10. Fedor wants to challenge himself by solving them in non-decreasing order of difficulty, but he also wants to ensure that he solves problems with diverse difficulties each day to improve his skills in different areas. Each day, Fedor can solve up to k problems, but he must ensure that the total difficulty of the problems he solves each day must be within the range [a, b] (inclusive). Given the list of problem difficulties, determine if it is possible for Fedor to plan his schedule under these constraints. If it is possible, output \\"Yes\\" and provide a possible schedule of the number of problems Fedor will solve each day. Otherwise, output \\"No\\". The first line of the input contains four integers n, k, a, and b (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100, 1 ≤ a ≤ b ≤ 1000) — the total number of problems, the maximum number of problems Fedor can solve each day, and the minimum and maximum total difficulty for each day, respectively. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 10) — the difficulty levels of the problems Fedor needs to solve. If a solution exists, print \\"Yes\\" in the first line of the output. In the second line, print the number of problems Fedor will solve each day separated by spaces. If there are multiple solutions, you can print any of them. If no solution exists, print \\"No\\" in the only line of the output.","solution":"def find_schedule(n, k, a, b, difficulties): difficulties.sort() schedule = [] current_day_problems = [] current_day_sum = 0 for difficulty in difficulties: if len(current_day_problems) < k and current_day_sum + difficulty <= b: current_day_problems.append(difficulty) current_day_sum += difficulty else: if len(current_day_problems) == 0 or current_day_sum < a: return \\"No\\" schedule.append(len(current_day_problems)) current_day_problems = [difficulty] current_day_sum = difficulty if current_day_sum > b: return \\"No\\" if current_day_sum < a or current_day_sum > b: return \\"No\\" else: schedule.append(len(current_day_problems)) return \\"Yes\\", schedule # Example usage: # print(find_schedule(5, 2, 3, 8, [1, 2, 3, 4, 5]))"},{"question":"You are given a grid with `n` rows and `m` columns. Each cell in the grid is either empty (\'.\') or blocked by an obstacle (\'#\'). You are initially situated at the top-left cell (1, 1) and you need to reach the bottom-right cell (n, m). You can move up, down, left, or right, but you cannot move through obstacles. However, there is a twist: on each move, you are allowed to swap the positions of one pair of adjacent cells (horizontally or vertically) exactly once at any point before your next move. Determine if it is possible to reach the bottom-right cell (n, m) starting from the top-left cell (1, 1) using the swaps and moves described. If it is possible, print \\"YES\\" (without quotes). Otherwise, print \\"NO\\" (without quotes). The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Each of the next `n` lines contains a string of length `m`, representing the grid. The character `.` denotes an empty cell, and the character `#` denotes a blocked cell. Example input: ``` 4 4 .... ..#. .#.. .... ``` Example output: ``` YES ``` Example input: ``` 3 3 .#. # .#. ``` Example output: ``` NO ```","solution":"def is_reachable(grid): from collections import deque n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" def in_bound(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' def bfs(): queue = deque([(0, 0)]) visited = set((0, 0)) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if in_bound(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) # Try making a swap sx, sy = x + dx, y + dy if in_bound(nx, ny): for dx2, dy2 in directions: nsx, nsy = sx + dx2, sy + dy2 if (sx, sy) != (nx, ny) and in_bound(nsx, nsy): grid[sx][sy], grid[nsx][nsy] = grid[nsx][nsy], grid[sx][sy] if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) grid[sx][sy], grid[nsx][nsy] = grid[nsx][nsy], grid[sx][sy] return False return \\"YES\\" if bfs() else \\"NO\\" # Helper method to parse input def solve(input_data): lines = input_data.strip().split(\\"n\\") n, m = map(int, lines[0].split()) grid = [list(line) for line in lines[1:]] return is_reachable(grid)"},{"question":"A grid of size m x n (1 ≤ m, n ≤ 10) is given, where each cell contains a value representing gold coins. A player is initially positioned at the top-left cell (1,1) and must reach the bottom-right cell (m,n). The player can only move right or down to an adjacent cell. The objective is to collect the maximum amount of gold coins possible while reaching the destination. Write a function to determine the maximum number of gold coins a player can collect. Your input will be a grid where each cell contains a non-negative integer representing the number of gold coins. Function Signature: ```python def max_gold_coins(grid: List[List[int]]) -> int: ``` Input: - The first line contains two integers m and n. - The next m lines each contain n integers separated by spaces, representing the grid of gold coins. Output: - Print a single integer, the maximum number of gold coins that can be collected. Example: Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 12 ``` Explanation: The path that collects the maximum amount of gold is: 1 -> 3 -> 5 -> 2 -> 1, and the total is 1 + 3 + 5 + 2 + 1 = 12.","solution":"def max_gold_coins(grid): Determines the maximum number of gold coins a player can collect starting from the top-left cell to the bottom-right cell. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Create a DP table with the same dimensions as grid dp = [[0] * n for _ in range(m)] # Initialize the top-left corner with the first grid value dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for col in range(1, n): dp[0][col] = dp[0][col - 1] + grid[0][col] # Fill the first column (can only come from above) for row in range(1, m): dp[row][0] = dp[row - 1][0] + grid[row][0] # Fill the rest of dp table for row in range(1, m): for col in range(1, n): dp[row][col] = max(dp[row - 1][col], dp[row][col - 1]) + grid[row][col] # The bottom-right corner contains the maximum gold coins that can be collected return dp[-1][-1]"},{"question":"Given a set of points in a 2D plane, determine the number of points that are on the convex hull. The convex hull of a set of points is the smallest convex polygon that can enclose all the points. The first line of input contains an integer `n` (3 ≤ n ≤ 10^4) — the number of points. Each of the next `n` lines contains two integers `x` and `y` (|x|, |y| ≤ 10^6) — the coordinates of each point. Output a single integer — the number of points that are on the convex hull. # Example Input: ``` 5 0 0 2 2 2 0 0 2 1 1 ``` Output: ``` 4 ``` # Explanation: The points (0,0), (2,0), (2,2), and (0,2) form the convex hull, enclosing the point (1,1) inside. Therefore, there are 4 points on the convex hull. Notes: - Use algorithms such as Graham\'s scan or Andrew\'s monotone chain to find the convex hull. - No three points will be collinear, ensuring a well-defined convex hull.","solution":"def cross_product(o, a, b): Returns the cross product of vector OA and OB A positive cross product indicates a counter-clockwise turn A negative cross product indicates a clockwise turn A zero cross product indicates collinearity return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) def convex_hull(points): # Sort the points lexicographically (tuples of x, then y) points = sorted(points) # Build the lower hull lower = [] for p in points: while len(lower) >= 2 and cross_product(lower[-2], lower[-1], p) <= 0: lower.pop() lower.append(p) # Build the upper hull upper = [] for p in reversed(points): while len(upper) >= 2 and cross_product(upper[-2], upper[-1], p) <= 0: upper.pop() upper.append(p) # Remove the last point of each half because it is repeated at the beginning of the other half return len(lower[:-1] + upper[:-1]) def number_of_points_on_convex_hull(n, points): return convex_hull(points)"},{"question":"John works in a warehouse and is in charge of organizing boxes. He needs to arrange boxes on shelves such that no two neighboring boxes have the same weight. Each box has a distinct weight. A shelf can be visualized as a row of boxes. Help John figure out a way to rearrange the boxes on the shelf to satisfy this condition. If it is possible, provide a valid arrangement. If it is not possible, state so. The first line of input contains an integer n (1 ≤ n ≤ 100), which is the number of boxes. The second line contains n distinct integers, which are the weights of the boxes. If it is possible to arrange the boxes with no two consecutive ones having the same weight, print \\"YES\\" followed by a valid arrangement of the box weights. If it is not possible, print \\"NO\\". Example: ``` Input: 6 4 5 1 6 3 2 Output: YES 4 1 5 3 6 2 ``` ``` Input: 1 7 Output: YES 7 ```","solution":"def arrange_boxes(n, weights): Arranges boxes on a shelf such that no two neighboring boxes have the same weight. :param n: Number of boxes. :param weights: List of weights of the boxes. :return: Tuple of a string (\\"YES\\" or \\"NO\\") and a list of arranged weights if possible. if n == 1: return \\"YES\\", weights sorted_weights = sorted(weights) for i in range(1, n): if sorted_weights[i] == sorted_weights[i-1]: return \\"NO\\", [] # Rearrange weights result = [0] * n result[::2], result[1::2] = sorted_weights[:(n+1)//2], sorted_weights[(n+1)//2:] return \\"YES\\", result"},{"question":"You are given an array of integers a and an integer k. An array is called almost sorted if it is possible to remove exactly one element from it to make it sorted in non-decreasing order. Your task is to check if the given array is almost sorted. The first line contains an integer n (2 le n le 200,000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) - the elements of the array. The third line contains the integer k (1 le k le n) - the position of the element you can remove (1-based index). Output \\"YES\\" if the array can be made sorted in non-decreasing order by removing the element at position k. Otherwise, output \\"NO\\".","solution":"def is_almost_sorted(n, arr, k): Returns \\"YES\\" if the array can be sorted in non-decreasing order by removing exactly one element at position `k`. Otherwise, returns \\"NO\\". # Remove the k-th element (1-based index, so subtract 1 to transform it into 0-based index) k -= 1 new_arr = arr[:k] + arr[k+1:] # Check if the new array is sorted in non-decreasing order for i in range(1, len(new_arr)): if new_arr[i] < new_arr[i-1]: return \\"NO\\" return \\"YES\\""},{"question":"Alice likes to play with arrays. She created a new game where she divides an array into two non-overlapping subarrays and calculates the sum of their elements. She wants the difference between these sums to be as minimal as possible. Given an array of integers, your task is to help Alice determine the minimum possible difference between the sums of two non-overlapping subarrays she can achieve. The first line contains an integer `n` (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains `n` integers `a1, a2, ..., an` (|ai| ≤ 10^4) — the elements of the array. Output a single integer — the minimum possible difference between the sums of two non-overlapping subarrays. **Example:** Input: ``` 6 3 -6 5 2 -1 7 ``` Output: ``` 2 ``` Explanation: One optimal division of the array is into the subarrays `[3, -6, 5]` and `[2, -1, 7]` which have sums of `2` and `8` respectively, giving a difference of `6`. Another optimal division is `[3, -6, 5, 2]` and `[-1, 7]` which have sums of `4` and `6` respectively, giving a difference of `2`, which is minimal.","solution":"def minimum_difference(arr): Finds the minimum possible difference between the sums of two non-overlapping subarrays. Args: arr : list of int List of integers representing the array. Returns: int The minimum possible difference. total_sum = sum(arr) n = len(arr) left_sum = 0 min_diff = float(\'inf\') for i in range(n-1): left_sum += arr[i] right_sum = total_sum - left_sum min_diff = min(min_diff, abs(left_sum - right_sum)) return min_diff"},{"question":"Konrad is a champion in a game called \\"Frog Jumps\\". The game is played on a 1-dimensional number line with n stones placed at positions p1, p2, ..., pn such that 1 ≤ p1 < p2 < ... < pn ≤ 10⁹. Konrad starts at the first stone (position p1) and can jump to any other stone, but the distance he can jump is limited by his maximum jump distance d. He wants to find the minimum value of d, such that he can start at p1 and reach the last stone (position pn) by making one or more jumps. Konrad also prefers the path that uses the fewest jumps. The task is to determine the minimum value of d for which Konrad can reach the last stone from the first stone with the least number of jumps. The input begins with a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines: - The first line contains a single integer n (2 ≤ n ≤ 100) — the number of stones. - The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10⁹) — the positions of the stones in increasing order. For each test case, print a single line with the minimum value of d for which Konrad can reach the last stone from the first stone with the least number of jumps. Example: Input: ``` 2 5 1 3 6 9 12 4 1 4 8 12 ``` Output: ``` 3 4 ``` Explanation: In the first test case: - Konrad can jump with d = 3, making jumps from 1 -> 3 -> 6 -> 9 -> 12. In the second test case: - Konrad can jump with d = 4, making jumps from 1 -> 4 -> 8 -> 12.","solution":"def min_jump_distance(t, test_cases): results = [] for case in test_cases: n, positions = case max_jump = 0 for i in range(1, n): max_jump = max(max_jump, positions[i] - positions[i - 1]) results.append(max_jump) return results # Function to process raw input and output accordingly def process_input_output(raw_input): index = 0 t = int(raw_input[index]) index += 1 test_cases = [] for _ in range(t): n = int(raw_input[index]) index += 1 positions = list(map(int, raw_input[index].split())) index += 1 test_cases.append((n, positions)) result = min_jump_distance(t, test_cases) for res in result: print(res)"},{"question":"Mina, a computer science student, is preparing for her final exams and is trying to practice her problem-solving skills. She decides to challenge herself with various graph algorithms. To do so, she picked a problem where she needs to determine the minimum number of edges that need to be removed from a weighted, undirected graph to eliminate all cycles, turning it into a forest. Given a graph with n vertices and m edges, you need to help Mina by writing a program that finds the minimum number of edges that need to be removed. Your task is to implement this in the form of a function: ```python def min_edges_to_remove(n, edges): Find the minimum number of edges that need to be removed to eliminate all cycles. Args: - n (int): The number of vertices. - edges (List[Tuple[int, int, int]]): A list of tuples where each tuple represents an edge with its two vertices and the weight of the edge (v1, v2, weight). Returns: - int: The minimum number of edges that need to be removed. # Your code here ``` # Input Format: - The function will receive: - an integer `n` representing the number of vertices in the graph. - a list of tuples `edges`, where each tuple contains three integers: two vertices `v1` and `v2`, and the weight of the edge between them. # Output Format: - Return a single integer representing the minimum number of edges that need to be removed. # Constraints: - 1 ≤ n ≤ 10^4 - 0 ≤ m ≤ 2 * 10^4 - The graph may contain multiple edges between the same pair of vertices. - The weight of each edge can be any integer. # Example: ```python assert min_edges_to_remove(4, [(1, 2, 1), (2, 3, 2), (3, 4, 3), (4, 1, 4)]) == 1 # Removing any one of the edges will create a tree (or forest if the graph is not fully connected). assert min_edges_to_remove(3, [(1, 2, 1), (1, 3, 2), (2, 3, 3)]) == 1 # Removing the edge with weight 3 will eliminate the cycle. assert min_edges_to_remove(6, [(1, 2, 1), (1, 3, 1), (2, 3, 1), (3, 4, 1), (4, 5, 1), (5, 6, 1), (6, 3, 1)]) == 2 # Removing any two edges that break the cycles will suffice. ``` Your function should utilize efficient graph traversal and cycle detection algorithms (like Union-Find/Disjoint Set Union) to ensure it handles large inputs within the time limits.","solution":"def min_edges_to_remove(n, edges): Find the minimum number of edges that need to be removed to eliminate all cycles. Args: - n (int): The number of vertices. - edges (List[Tuple[int, int, int]]): A list of tuples where each tuple represents an edge with its two vertices and the weight of the edge (v1, v2, weight). Returns: - int: The minimum number of edges that need to be removed. # Sort edges by weight edges.sort(key=lambda x: x[2]) # Initialize Union-Find data structure parent = list(range(n + 1)) rank = [0] * (n + 1) def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 return True return False removed_edges = 0 # Apply Kruskal\'s algorithm and count edges that form cycles for u, v, weight in edges: if not union(u, v): removed_edges += 1 return removed_edges"},{"question":"Consider a sequence of positive integers defined as follows: 1. Start with any integer n greater than 1. 2. If n is even, divide it by 2. 3. If n is odd, multiply it by 3 and add 1. 4. Repeat the process indefinitely. This sequence is known as the Collatz sequence. Despite the simplicity of its definition, no one has been able to prove that every starting value eventually reaches 1, although it is believed to be true. Write a program that takes an integer n and computes how many steps are needed for n to reach 1 using the above process. # Input The input will consist of multiple test cases. The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. Each of the next t lines contains a single integer n (2 leq n leq 10^6). # Output For each test case, output the number of steps required for n to reach 1. # Example Input: ``` 3 6 19 27 ``` Output: ``` 8 20 111 ``` # Explanation For n = 6, the sequence is 6 -> 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1. The total number of steps is 8. For n = 19, the sequence takes 20 steps to reach 1. For n = 27, the sequence takes 111 steps to reach 1.","solution":"def collatz_steps(n): Returns the number of steps required for n to reach 1 in the Collatz sequence. steps = 0 while n != 1: if n % 2 == 0: n //= 2 else: n = 3 * n + 1 steps += 1 return steps def process_collatz(test_cases): Given a list of integers, returns the number of steps for each integer to reach 1 in the Collatz sequence. results = [] for n in test_cases: results.append(collatz_steps(n)) return results"},{"question":"Leena loves playing with numbers and recently she encountered an interesting problem. She has a set of n integers and a positive integer k. She wants to divide the set into the minimum number of subsets such that the sum of the numbers in each subset is at most k. Can you help her achieve this? The first line of the input contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) which represent the set of numbers. Your task is to print a single integer - the minimum number of subsets required. For example: Input: 5 10 1 2 3 4 5 Output: 2 In the first example, one possible division of the set is {1, 2, 3, 4} and {5}.","solution":"def min_number_of_subsets(n, k, nums): nums.sort(reverse=True) subsets = [] for num in nums: placed = False for subset in subsets: if sum(subset) + num <= k: subset.append(num) placed = True break if not placed: subsets.append([num]) return len(subsets)"},{"question":"You are given an array with n integers. One of the elements of this array is duplicated exactly K times. Your task is to identify which element is duplicated. The first line contains two integers n and K (2 ≤ n ≤ 10^5, 2 ≤ K ≤ 10^4) — the number of elements in the array and the number of times the duplicated element appears. The second line contains n + K - 1 integers, which represent the array elements. All elements are integers ranging from 1 to n. Print the duplicated element. Example: Input: 5 3 1 2 3 4 2 5 2 Output: 2","solution":"def find_duplicated_element(n, K, array): Finds the duplicated element in the array given the number of elements `n` and the number of times the duplicated element appears `K`. Args: n (int): the number of unique elements. K (int): the number of times the duplicated element appears. array (list): the array that contains n + K - 1 integers. Returns: int: the duplicated element. element_count = {} for element in array: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 for element, count in element_count.items(): if count == K: return element"},{"question":"Tom\'s favorite hobby is collecting marbles. One day, he decided to arrange his marbles in a single row. However, there is one rule: no two adjacent marbles should have the same color. Tom has infinite marbles of each color, but he wants to use the colors that he has mentioned in a given list. Given a list of colors, determine the minimum number of marbles that Tom needs to pick to arrange them in a row such that no two adjacent marbles have the same color. If it is impossible, output -1. The first line contains an integer k (1 ≤ k ≤ 10^5) — the number of available colors. The second line contains k space-separated integers c1, c2, ..., ck, where ci represents the color number of the i-th available color (1 ≤ ci ≤ 10^5). Print a single integer — the minimum number of marbles Tom needs, or -1 if it\'s impossible to arrange them according to the rule. Consider the example test case: Input: 4 1 1 1 1 Output: -1 In this case, Tom only has marbles of one color available, so it\'s impossible to place two marbles adjacently with different colors. Thus, the output is -1.","solution":"def min_marbles(k, colors): Determine the minimum number of marbles needed such that no two adjacent marbles have the same color from the given list of colors. Parameters: k (int): Number of available colors. colors (list of int): List of available color numbers. Returns: int: Minimum number of marbles needed, or -1 if impossible. unique_colors = set(colors) if len(unique_colors) < 2: return -1 # It\'s impossible to pick marbles with the given rule return 2 # At least 2 marbles can always satisfy the condition with at least 2 colors # Example execution: # min_marbles(4, [1, 1, 1, 1]) should return -1 # min_marbles(4, [1, 2, 3, 4]) should return 2"},{"question":"In a certain coding competition, participants are given a series of tasks to evaluate their problem-solving skills. One of the tasks involves optimal resource allocation. Participants are required to allocate a limited number of resources to maximize a certain value. However, there are constraints on how these resources can be allocated. You are given a number of resources `r`, and `n` items each with a certain value `vi` and resource requirement `ri`. Your goal is to allocate the resources to maximize the sum of allocated values without exceeding the total available resources. Write a function that computes the maximum value that can be achieved with the given resources. If multiple allocations yield the same maximum value, any of them will be accepted. The first line contains an integer `r` (1 ≤ r ≤ 100), showing the total number of resources available. The second line contains an integer `n` (1 ≤ n ≤ 100), indicating the number of items. Each of the next `n` lines contains two integers `vi` (1 ≤ vi ≤ 1000) and `ri` (1 ≤ ri ≤ 100), representing the value and the resource requirement of the ith item. Output the maximum value that can be achieved within the given constraints. **Examples:** **Input:** ``` 10 4 5 3 8 4 3 2 10 5 ``` **Output:** ``` 18 ``` **Input:** ``` 7 3 4 3 7 5 5 4 ``` **Output:** ``` 9 ``` **Note:** In the first example, the optimal allocation is to select the first, second, and fourth items, making the total value `5 + 8 + 10 = 18` and total resources `3 + 4 + 5 = 12`, which is within the available 10 resources. In the second example, the optimal allocation is to select the first and second items, making the total value `4 + 5 = 9` and total resources `3 + 4 = 7`, which is within the available 7 resources. Your task is to implement an algorithm that finds this optimal allocation efficiently.","solution":"def max_value_allocation(r, items): Return the maximum value achievable with given resources and items. Args: r (int): Total resources available. items (list of tuple): Each item represented as a tuple (value, resource requirement). Returns: int: The maximum value achievable within the resource constraints. # Using dynamic programming to solve the knapsack problem dp = [0] * (r + 1) for value, resource in items: for j in range(r, resource - 1, -1): dp[j] = max(dp[j], dp[j - resource] + value) return dp[r]"},{"question":"You are given an array of non-negative integers representing the heights of buildings. Between any two buildings, water can collect. Your task is to calculate the total amount of water that can be trapped after raining. Input: - The input consists of a single line containing space-separated integers which represent the heights of the buildings. Output: - A single integer representing the total units of trapped water. Example: ``` Input: 0 1 0 2 1 0 1 3 2 1 2 1 Output: 6 ``` Explanation: The above example represents the following histogram where the width of each bar is 1 unit: ``` | 3 | | ___| | 2___| | | |___|___| 1 | | |___| ``` The surface is able to trap 6 units of water between the buildings.","solution":"def trap_water(heights): Calculate the total amount of water that can be trapped between the buildings represented by the heights array. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the trapped water for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"You are working as a software engineer in a logistics company. The company uses drones to deliver packages, and each drone follows specific routes that pass through various checkpoints. Each checkpoint has a number of packages waiting to be delivered. Occasionally, some checkpoints receive higher-priority packages that need immediate attention. Given the number of checkpoints `n` and the number of operations `q`, you must keep track of the total number of packages to be delivered at each checkpoint. Operations will include adding packages to a checkpoint, removing packages from a checkpoint, and prioritizing certain checkpoints. Each checkpoint is initialized with zero packages. You need to answer the total number of packages at specific checkpoints after a series of operations. Each operation can be one of the following three types: 1. `\\"ADD x y\\"`: Add `y` packages to checkpoint `x`. 2. `\\"REM x y\\"`: Remove `y` packages from checkpoint `x` (it\'s guaranteed that `y` is not more than the current packages at checkpoint `x`). 3. `\\"PRIOR x\\"`: Mark checkpoint `x` as a priority checkpoint (this does not change the number of packages but is used to keep track of which checkpoints are prioritized). 4. `\\"QRY x\\"`: Query the number of packages at checkpoint `x`. # Input The first line contains two integers `n` and `q` (1 le n, q le 2 cdot 10^5) — the number of checkpoints and the number of operations. The following `q` lines each contain an operation in the format described above. # Output For each `\\"QRY x\\"` operation, output the number of packages at checkpoint `x`. # Example Input ``` 5 7 ADD 1 100 ADD 2 50 PRIOR 1 REM 2 20 QRY 1 QRY 2 QRY 3 ``` Output ``` 100 30 0 ``` # Note - Initially, all checkpoints have zero packages. - Ensure efficient handling for operations due to the constraints where `n, q` can be up to `2 cdot 10^5`.","solution":"def handle_operations(n, q, operations): # Initialize checkpoints checkpoints = [0] * (n + 1) # Store results for QRY operations results = [] for op in operations: parts = op.split() command = parts[0] x = int(parts[1]) if command == \\"ADD\\": y = int(parts[2]) checkpoints[x] += y elif command == \\"REM\\": y = int(parts[2]) checkpoints[x] -= y elif command == \\"PRIOR\\": # Just a placeholder for prioritizing, doesn\'t affect package counts pass elif command == \\"QRY\\": results.append(checkpoints[x]) return results"},{"question":"Tom has a special string generator that operates using two integers, a and b. The generator produces a string containing only the characters \'A\' and \'B\' with the following rules: 1. The string must be exactly a + b characters long. 2. The string should contain exactly a characters \'A\' and b characters \'B\'. 3. The number of subsequences \\"AB\\" in the string should be maximized. A subsequence \\"AB\\" is a sequence that can be derived from the string by deleting some (possibly zero) characters without changing the order of the remaining characters. Write a program to determine a string that maximizes the number of \\"AB\\" subsequences. The first line contains two integers a and b (1 leq a, b leq 10^5). Print the resulting string with maximum \\"AB\\" subsequences. If there are multiple solutions, print any of them. Example: Input: ``` 3 3 ``` Output: ``` AAABBB ``` In the example given, the string \\"AAABBB\\" has 9 \\"AB\\" subsequences, which is the maximum possible number for a = 3 and b = 3.","solution":"def generate_max_ab_string(a, b): Generates a string of \'A\' and \'B\' such that the number of subsequences \\"AB\\" is maximized. # The maximum number of \\"AB\\" subsequences is achieved by placing all \'A\'s first, followed by all \'B\'s. return \'A\' * a + \'B\' * b # Example input a, b = 3, 3 print(generate_max_ab_string(a, b)) # Expected output: \\"AAABBB\\""},{"question":"Alina is a math enthusiast who loves working with prime numbers and Fibonacci sequences. One day, she became curious about an interesting problem involving both concepts. The problem is as follows: Given an integer n (1 ≤ n ≤ 10^6), find the smallest prime number p such that the nth Fibonacci number is divisible by p. If no such prime number exists, print -1. The Fibonacci sequence is defined as: - F(1) = 1, F(2) = 1 - F(k) = F(k-1) + F(k-2) for k > 2 Input: A single integer n. Output: A single integer p — the smallest prime number such that the nth Fibonacci number is divisible by p, or -1 if no such prime exists. Example: Input: 5 Output: 2 Explanation: The first few Fibonacci numbers are 1, 1, 2, 3, 5, and 8. The 5th Fibonacci number is 5, which is divisible by 5. So the output is 5.","solution":"import math # Helper function to check if a number is prime def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True # Function to compute the nth Fibonacci number def fibonacci(n): if n == 1 or n == 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b = b, a + b return b # Function to find the smallest prime divisor of nth Fibonacci number def smallest_prime_divisor_of_fibonacci(n): fib_n = fibonacci(n) if fib_n == 1: return -1 for i in range(2, fib_n + 1): if fib_n % i == 0 and is_prime(i): return i return -1"},{"question":"Tech University is organizing a coding contest and they want to distribute some prizes to the top k participants. For simplicity, each prize is unique and represented by a positive integer indicating its value. The contest has attracted numerous participants with varying coding skills. The university has a list of n participants, each identified by a unique number between 1 and n. Each participant is assigned a non-negative integer score. The organizers plan to award prizes to the top k participants based on their scores. If there’s a tie in scores, the participant with a smaller identifier will be preferred. Your task is to help the organizers determine the identifiers of the top k participants and the total value of the prizes they will receive. The first line contains three integers n, k, and m (1 ≤ k ≤ n ≤ 105, 1 ≤ m ≤ 109) — the number of participants, the number of prizes to be awarded, and the total value of available prizes. The second line contains n integers — the scores of the participants (0 ≤ score ≤ 109). The third line contains k integers — the values of the prizes that are available for distribution. You need to output the identifiers of the top k participants in increasing order of their identifiers and a single integer representing the total value of the prizes distributed. Example Input: 7 3 100 30 20 50 40 10 50 40 70 20 10 Example Output: 3 4 6 100 Here, participants 3 and 6 both have the highest score, followed by participant 4. The total value of the prizes awarded is 100 (70 + 20 + 10).","solution":"def top_k_participants(n, k, m, scores, prizes): Determine the identifiers of the top k participants and the total value of the prizes. Args: n (int): Number of participants. k (int): Number of top participants to be awarded. m (int): Total value of available prizes. scores (list): Scores of the participants. prizes (list): Values of the prizes available for distribution. Returns: list: A list of the identifiers of the top k participants in increasing order. int: The total value of the prizes distributed. # Create a list of (id, score) tuples participants = [(i + 1, scores[i]) for i in range(n)] # Sort participants by score (descending) and then by id (ascending) sorted_participants = sorted(participants, key=lambda x: (-x[1], x[0])) # Select the top k participants top_k = sorted_participants[:k] # Sort the top k participants by their IDs top_k_sorted_by_id = sorted(top_k, key=lambda x: x[0]) # Sort the available prizes in descending order sorted_prizes = sorted(prizes, reverse=True) # Calculate the total prize value distributed to the top k participants total_prize_value = sum(sorted_prizes[:k]) # Return the list of top k participant IDs and the total prize value return [participant[0] for participant in top_k_sorted_by_id], total_prize_value"},{"question":"In a certain city, there are n bus routes and m bus stops. Each route is described by two integers a_i and b_i (1 ≤ a_i, b_i ≤ m), which means this route goes from stop a_i to stop b_i. A bus can only travel from a lower-numbered stop to a higher-numbered stop. The city transport authority is interested in the maximum number of stops a passenger can visit in a single trip without changing routes. However, the transport authority wants to encourage more walking. Hence, they have decided to ensure that the bus routes are adjusted such that no passenger can consecutively visit more than k bus stops in a single trip without changing routes. Given n routes, each described by the endpoints of the route, and the maximum allowed number of consecutive stops k, determine the number of routes that need to be shortened to meet this criterion. The first line of the input contains three integers n, m, and k (1 ≤ n ≤ 2000, 1 ≤ m ≤ 1000, 1 ≤ k ≤ m). The next n lines contain two integers a_i and b_i (1 ≤ a_i < b_i ≤ m) representing each bus route. Print a single integer which is the number of routes that need to be shortened. **Example:** Input: ``` 5 15 4 1 5 2 6 5 9 8 12 10 15 ``` Output: ``` 4 ``` Explanation: There are 5 routes: 1. Route from stop 1 to stop 5 has 5-1=4 stops. 2. Route from stop 2 to stop 6 has 6-2=4 stops. 3. Route from stop 5 to stop 9 has 9-5=4 stops. 4. Route from stop 8 to stop 12 has 12-8=4 stops. 5. Route from stop 10 to stop 15 has 15-10=5 stops which exceeds the allowed limit of 4 consecutive stops, so it needs to be shortened. Hence, the output is 4.","solution":"def count_routes_to_shorten(n, m, k, routes): Function to count the number of bus routes that need to be shortened to ensure no passenger can visit more than k consecutive stops in a single trip without changing routes. :param n: Number of bus routes :param m: Number of bus stops :param k: Maximum allowed number of consecutive stops :param routes: List of tuples, each containing two integers (ai, bi) describing the endpoints of a bus route :return: Number of routes that need to be shortened routes_to_shorten = 0 for a, b in routes: if b - a > k: routes_to_shorten += 1 return routes_to_shorten"},{"question":"The local zoo is organizing a special exhibit where different species of animals are arranged into enclosures. Each species is represented by a distinct lowercase letter from \'a\' to \'z\'. The organizers have decided that each featured species must be arranged in a particular way to help visitors identify them at the zoo. Specifically, each species should be arranged such that if you consider any consecutive subarray that contains the same letter, the length of such subarray must be greater than or equal to a given integer k. Given a string s representing the initial arrangement of animals and an integer k, determine if it is possible to reorganize the animals such that the condition is met for each species. The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains the string s (1 ≤ |s| ≤ 10^5) representing the arrangement of animals and the second line contains the integer k (1 ≤ k ≤ 10^5). Output \\"YES\\" if it is possible to rearrange the animals to satisfy the condition, otherwise print \\"NO\\". Example: Input: 2 aabbcc 2 aaabbbccc 3 Output: YES YES Explanation: In the first test case, one possible rearrangement is \\"aabbcc\\", where each species of animal appears in groups of at least 2. In the second test case, one possible rearrangement is \\"aaabbbccc\\", where each species appears in groups of at least 3.","solution":"from collections import Counter def can_reorganize(s, k): Determines if it is possible to rearrange the string s such that each species is grouped together with at least k same characters consecutively. char_count = Counter(s) for count in char_count.values(): if count < k: return False return True def process_test_cases(t, test_cases): results = [] for i in range(t): s, k = test_cases[i] if can_reorganize(s, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of tasks with their respective start and finish times. You need to select the maximum number of non-overlapping tasks that can be completed. Each task must be completed exactly within its start and finish time. A start time and a finish time for each task are given. Two tasks are considered non-overlapping if one task finishes before the other task starts. The first line of the input contains a single integer n (1 leq n leq 10^5) — the total number of tasks. Each of the following n lines contains two integers s_i and f_i (0 le s_i < f_i leq 10^9) — the start and finish times of the i-th task. Output the maximum number of non-overlapping tasks that can be completed. # Example Input ``` 5 1 4 3 5 0 6 5 7 8 9 ``` Output ``` 3 ``` In this example, the tasks with intervals (1, 4), (5, 7), and (8, 9) are selected as they do not overlap with each other.","solution":"def max_non_overlapping_tasks(tasks): Given a list of start and finish times for tasks, returns the maximum number of non-overlapping tasks that can be completed. Args: tasks : List[Tuple[int, int]] : List of (start, finish) times for each task Returns: int : Maximum number of non-overlapping tasks # Sort tasks based on finish times tasks.sort(key=lambda x: x[1]) # Initialize count of non-overlapping tasks count = 0 # end time of the last selected task, initialize it to -1 last_end_time = -1 # Loop through tasks and select the maximum number of non-overlapping tasks for start, finish in tasks: if start >= last_end_time: count += 1 last_end_time = finish return count"},{"question":"There is a large open field where N scarecrows are positioned in a straight line. A flock of M crows is planning an invasion. Each crow wants to occupy a unique scarecrow. Each crow starts its flight from a specific scarecrow, but it can fly to any other scarecrow within a certain range, R, specified for that particular crow. The range is symmetric, meaning if the crow starts from scarecrow i, it can fly to any scarecrow from max(1, i - R) to min(N, i + R). Given the initial positions of the crows and their respective ranges, determine whether it is possible for each crow to occupy a unique scarecrow such that no two crows occupy the same scarecrow. If it’s possible, output \\"YES\\", otherwise output \\"NO\\". The first line contains two space-separated integers N and M (1 ≤ M ≤ N ≤ 1000), the number of scarecrows and the number of crows respectively. The second line contains M space-separated integers pi (1 ≤ pi ≤ N), the initial positions of the crows. The third line contains M space-separated integers Ri (0 ≤ Ri ≤ N - 1), the respective ranges for each crow. Output \\"YES\\" if it is possible for each crow to occupy a unique scarecrow, otherwise \\"NO\\". Example Input: 5 3 2 4 5 1 1 0 Example Output: YES Explanation: - Crow starting at position 2 can choose scarecrow positions 1, 2, or 3. - Crow starting at position 4 can choose scarecrow positions 3, 4, or 5. - Crow starting at position 5 can only choose scarecrow position 5. Possible allocation: - Crow 1 takes scarecrow 1. - Crow 2 takes scarecrow 3. - Crow 3 takes scarecrow 5.","solution":"def can_occupy_unique_scarecrows(N, M, positions, ranges): Determines if each crow can occupy a unique scarecrow. :param N: int - number of scarecrows :param M: int - number of crows :param positions: list - initial positions of the crows :param ranges: list - ranges for the respective crows :return: str - \\"YES\\" if possible, otherwise \\"NO\\" scarecrow_occupied = [0] * (N + 1) intervals = [] for i in range(M): start = max(1, positions[i] - ranges[i]) end = min(N, positions[i] + ranges[i]) intervals.append((start, end)) intervals.sort() for start, end in intervals: allocated = False for i in range(start, end + 1): if scarecrow_occupied[i] == 0: scarecrow_occupied[i] = 1 allocated = True break if not allocated: return \\"NO\\" return \\"YES\\""},{"question":"An e-commerce platform records the sales of each product in its catalog over a series of days. Each product is assigned a unique product ID. You are given the list of product IDs sold each day in chronological order. Your task is to determine the most popular product (the one with the highest number of sales) for each day. If there is a tie (i.e., multiple products have the highest number of sales), return the product ID with the smallest numerical value. Consider the following as input for a single day\'s sales: - The first line contains an integer n (1 leq n leq 10^5), the number of products sold that day. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), where each a_i is a product ID. Your output should be a single integer, the product ID of the most popular product for that day. Example: Input: ``` 6 1 2 3 2 3 3 ``` Output: ``` 3 ``` In the given example, the product IDs sold that day are [1, 2, 3, 2, 3, 3]. The product ID \'3\' has the highest number of sales (3 times), so the output is 3.","solution":"def most_popular_product(n, products): from collections import Counter # Count the number of sales for each product product_count = Counter(products) # Find the product with the maximum sales max_sales = max(product_count.values()) # Collect all products that have the maximum sales most_popular = [product for product, count in product_count.items() if count == max_sales] # Return the smallest product ID among the most popular ones return min(most_popular)"},{"question":"A forest company company has a collection of different tree logs. Each log has a certain length. The company wants to cut the logs into segments of equal length such that they maximize the number of segments from each log and minimize the waste (parts of the logs that cannot be used). You are asked to help the company determine the maximum segment length they can use and how many segments of that length they can obtain in total from all logs. The first line of the input contains an integer N (1 ≤ N ≤ 2·10^5), the number of logs. The second line contains N integers L1, L2, ..., LN (1 ≤ Li ≤ 10^9), the lengths of the logs. Output two integers - the maximum segment length S and the total number of segments T of that length that can be obtained from all the logs. # Example Input: ``` 3 8 12 16 ``` Output: ``` 4 9 ``` Here, the maximum segment length that can be used is 4, and a total of 9 segments of that length (2 from the 8-length log, 3 from the 12-length log, and 4 from the 16-length log) can be obtained from the logs.","solution":"def find_max_segment_length_and_count(n, logs): def count_segments(segment_length): return sum(log // segment_length for log in logs) def gcd(a, b): while b: a, b = b, a % b return a def min_gcd_length(for_debug=False): Return the gcd of logs lengths result = logs[0] for length in logs[1:]: result = gcd(result, length) if result == 1: break return result # Finding gcd of all the lengths max_segment_length = min_gcd_length() # Calculating the number of segments we can divide all logs into total_segments = count_segments(max_segment_length) return max_segment_length, total_segments"},{"question":"You are given an array of length n. The array contains integers between 1 and n, inclusive, with exactly one duplicate. All the other elements of the array appear exactly once, except for the duplicate number, which appears twice. Your task is to identify the duplicate number. Write a function that takes an integer array as an input and returns the duplicate number. You should aim to solve this problem with O(n) time complexity and O(1) space complexity (not including the space used for the input). The first line of input contains an integer n (2 ≤ n ≤ 100,000) – the length of the array. The second line contains n integers separated by spaces, representing the elements of the array. Output the duplicate number. Example: Input: 5 4 3 1 4 2 Output: 4 Explanation: In the given array, the number 4 appears twice. So, the output is 4.","solution":"def find_duplicate(nums): Finds the duplicate number in the array. n = len(nums) # Using the \\"Floyd\'s Tortoise and Hare\\" (Cycle Detection) approach tortoise = nums[0] hare = nums[0] # Phase 1: Finding the intersection point of the two runners while True: tortoise = nums[tortoise] hare = nums[nums[hare]] if tortoise == hare: break # Phase 2: Finding the entrance to the cycle tortoise = nums[0] while tortoise != hare: tortoise = nums[tortoise] hare = nums[hare] return hare"},{"question":"You are given a string consisting of lower case Latin letters. You are allowed to remove some (possibly none) characters from the string to make it good. A string is considered good if every letter appears in it no more than twice consecutively. Your task is to determine the largest possible length of a good string that can be obtained by removing some characters from the given string. The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the length of the string. The second line contains the string of length n. Output a single integer — the largest possible length of a good string that can be obtained. Example Input: 7 aaabaaa Output: 5 Explanation: The best way to make the string good is to remove one \'a\' from the sequence \\"aaa\\" in the beginning to get \\"aabaaa\\", which is a good string of length 6. Or we can remove the \'b\' and get \\"aaa\\" from the middle part to get \\"aabaaa\\" which in both cases yields good strings of length 6.","solution":"def largest_good_string_length(n, s): Returns the largest possible length of a good string that can be obtained from the given string. A good string is one where every letter appears at most twice consecutively. if n == 0: return 0 result_length = 0 i = 0 while i < n: count = 1 while i + 1 < n and s[i] == s[i + 1]: count += 1 i += 1 result_length += min(count, 2) i += 1 return result_length"},{"question":"Alice wants to organize a chess tournament. For this tournament, she has a list of n players, each identified by a unique id. The tournament format is such that each player has to play against every other player exactly once. To determine the schedule, Alice wants to generate a list of matches to be played. Each match is represented by a pair of player ids (x, y), where 1 ≤ x, y ≤ n and x < y to ensure each pair is listed only once. Your task is to help Alice by generating the match schedule. The first line contains a single integer n (2 ≤ n ≤ 5000) — the number of players. Output m lines, where m is the number of matches (computed as n * (n - 1) / 2). Each line should contain a pair of integers x and y (1 ≤ x < y ≤ n), representing a match between player x and player y. The order of the matches does not matter. # Example Input ``` 4 ``` # Example Output ``` 1 2 1 3 1 4 2 3 2 4 3 4 ``` In the example above, for n = 4, there are 4 * (4 - 1) / 2 = 6 matches, as every player needs to play against each other exactly once.","solution":"def generate_matches(n): Generates a list of matches for n players where each player plays against every other player exactly once. Parameters: n (int): The number of players. Returns: list of tuple: Each tuple contains a pair of player ids representing a match. matches = [] for x in range(1, n): for y in range(x + 1, n + 1): matches.append((x, y)) return matches"},{"question":"The kingdom of Berland has a peculiar system of communication where messages are passed from one citizen to another following specific pathways. Each pathway has a certain cost associated with it which represents how long it takes to transmit a message along that path. The king wants to send an important message to all citizens as quickly as possible. Therefore, the king needs to know the minimum transmission cost from the capital city to all other cities in the kingdom. You are given a map of Berland in the form of a graph with n nodes and m edges where each node represents a city and each edge represents the transmission path between two cities along with its cost. The capital city is represented by node 1. Write a program that calculates the minimum transmission cost from the capital city to all other cities. The first line contains two integers n and m (1 ≤ n ≤ 100,000; 1 ≤ m ≤ 200,000) — the number of cities and the number of transmission paths, respectively. Each of the next m lines contains three integers u, v, and c (1 ≤ u, v ≤ n; 1 ≤ c ≤ 1,000) — indicating that there is a path from city u to city v with a transmission cost of c. Print n integers, where the i-th integer represents the minimum transmission cost from the capital city (node 1) to the i-th city. If a city is not reachable from the capital, print -1 for that city. You may assume that there are no negative weights in the graph and that all nodes are reachable from the capital city either directly or indirectly.","solution":"import heapq import sys def minimum_transmission_cost(n, m, edges): # Constants for infinity INF = sys.maxsize # Create adjacency list for the graph graph = [[] for _ in range(n + 1)] for u, v, c in edges: graph[u].append((v, c)) graph[v].append((u, c)) # Distance array to hold the minimum transmission cost to each city dist = [INF] * (n + 1) dist[1] = 0 # Min-heap priority queue pq = [(0, 1)] # (cost, node) while pq: current_cost, u = heapq.heappop(pq) # If we have already found a better way if current_cost > dist[u]: continue for v, cost in graph[u]: if dist[u] + cost < dist[v]: dist[v] = dist[u] + cost heapq.heappush(pq, (dist[v], v)) # Replace INF with -1 to indicate nodes that are not reachable return [dist[i] if dist[i] != INF else -1 for i in range(1, n + 1)]"},{"question":"In the world of software development, memory efficiency is crucial, especially when dealing with large datasets or limited resources. In this problem, you will be dealing with a very specific memory-constrained task involving the packing of items into a truck. You are given `n` items, each item has a weight `w_i` and a value `v_i`. Your task is to write a function that determines the maximum value of items that your truck can carry without exceeding its weight capacity `W`. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of items. - The second line contains an integer `W` (1 ≤ W ≤ 10000) — the maximum weight the truck can carry. - Each of the next `n` lines contains two integers `w_i` and `v_i` (1 ≤ w_i, v_i ≤ 10000) — the weight and value of the `i-th` item. **Output:** - Print a single integer, the maximum value of the items that can be carried by the truck without exceeding the weight capacity `W`. **Example:** Input: ``` 4 10 5 10 4 40 6 30 3 50 ``` Output: ``` 90 ``` In this example, the truck can carry items 2 and 4 (weights 4 and 3 with values 40 and 50), giving a total value of 90.","solution":"def knapsack(n, W, items): Function to determine the maximum value of items that can be carried by the truck without exceeding the weight capacity W. :param n: int, the number of items :param W: int, the maximum weight capacity of the truck :param items: list of tuples, each tuple contains (weight, value) of an item :return: int, the maximum value achievable within the given weight capacity # Initialize dp array to store maximum values for each weight from 0 to W dp = [0] * (W + 1) # Process each item for weight, value in items: # Traverse dp array in reverse order to avoid recomputation within the same item processing for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return dp[W]"},{"question":"In a certain kingdom, there are n cities connected by exactly n - 1 roads. Each road connects two cities and can be traversed in both directions. All cities are connected directly or indirectly. The kingdom is planning to build some additional roads such that any two cities are directly connected by at most one road. Given the cities and roads, the king wants to ensure that every city can reach every other city either directly or indirectly once the new roads are added. The goal of the king is to minimize the maximum road distance between any two cities in the kingdom after adding the new roads. Write a program that determines the minimum possible maximum road distance between any two cities that can be achieved with an optimal addition of roads. # Input The first line contains an integer n (2 leq n leq 10^4), the number of cities in the kingdom. Each of the next n - 1 lines contains two integers u_i and v_i (1 leq u_i, v_i leq n; u_i neq u_i), indicating there is a road between cities u_i and v_i. # Output Print a single integer, the minimum possible maximum road distance between any two cities after adding the new roads. # Example Input ``` 5 1 2 1 3 2 4 3 5 ``` Output ``` 2 ``` In this example, once the minimal number of roads is added optimally, the maximum road distance between any two cities is minimized to 2. # Note - A distance between two cities is defined as the minimum number of roads that need to be traversed to travel from one city to another. - The network of roads before adding any new road forms a tree. - The additional roads must ensure every pair of cities are either directly connected or are part of a minimal path such that the maximum distance in this path is minimized.","solution":"from collections import deque def bfs_farthest_node(start_node, n, graph): visited = [-1] * n visited[start_node] = 0 queue = deque([start_node]) farthest_node = start_node max_distance = 0 while queue: current = queue.popleft() current_distance = visited[current] for neighbor in graph[current]: if visited[neighbor] == -1: visited[neighbor] = current_distance + 1 queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance def find_tree_diameter(n, graph): # Step 1: Start from an arbitrary node and find the farthest node from it node, _ = bfs_farthest_node(0, n, graph) # Step 2: From that farthest node, find the farthest node again (this gives us the diameter) farthest_node, diameter = bfs_farthest_node(node, n, graph) return diameter def minimum_maximum_distance(n, roads): graph = [[] for _ in range(n)] for u, v in roads: graph[u-1].append(v-1) graph[v-1].append(u-1) # Find the diameter of the tree (longest path between any two nodes in a tree) diameter = find_tree_diameter(n, graph) # Minimum possible maximum road distance is the ceiling of half the diameter return (diameter + 1) // 2"},{"question":"You\'re given a sequence of n integers and a list of m queries. Each query is either for modifying a specific element in the sequence or for finding the minimum element in a given sub-sequence. Your task is to implement these operations efficiently. # Input Format: - The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100000), where n is the size of the sequence, and m is the number of queries. - The second line contains n space-separated integers representing the initial sequence. - The next m lines contain the queries. Each query is in one of the following formats: 1. \\"1 x y\\" – Modify the element at position x to y (1 ≤ x ≤ n, -10^9 ≤ y ≤ 10^9). 2. \\"2 l r\\" – Print the minimum element in the sub-sequence from index l to r (1 ≤ l ≤ r ≤ n). # Output Format: For each query of the second type, output the minimum element in the specified sub-sequence on a new line. # Example: Input: ``` 5 3 1 5 2 4 3 2 2 4 1 3 0 2 2 4 ``` Output: ``` 2 0 ``` # Explanation: - The initial sequence is [1, 5, 2, 4, 3]. - The first query asks for the minimum element between indices 2 and 4, which is 2. - The second query updates the element at index 3 to 0, so the sequence becomes [1, 5, 0, 4, 3]. - The third query asks for the minimum element again between indices 2 and 4, which is now 0 after the update. # Note: Efficiently handle the queries, aiming for O(log n) query time for both types using a suitable data structure like a segment tree or a balanced binary search tree.","solution":"class SegmentTree: This class implements a segment tree for range minimum queries and point updates. def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Build the segment tree self.build(data) def build(self, data): # Insert leaf nodes in the tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, pos, value): # Update the value at the position pos += self.n self.tree[pos] = value # Move up and update parents i = pos while i > 1: i //= 2 self.tree[i] = min(self.tree[2 * i], self.tree[2 * i + 1]) def range_min(self, left, right): # Get the minimum value in the range [left, right) left += self.n right += self.n min_val = float(\'inf\') while left < right: if left % 2: min_val = min(min_val, self.tree[left]) left += 1 if right % 2: right -= 1 min_val = min(min_val, self.tree[right]) left //= 2 right //= 2 return min_val def handle_queries(n, m, sequence, queries): segment_tree = SegmentTree(sequence) results = [] for query in queries: type_query = int(query[0]) if type_query == 1: # Update operation x, y = int(query[1]), int(query[2]) segment_tree.update(x - 1, y) # Convert to 0-based index elif type_query == 2: # Range minimum query l, r = int(query[1]), int(query[2]) min_val = segment_tree.range_min(l - 1, r) # Convert to 0-based index results.append(min_val) return results"},{"question":"Elena has been tasked with organizing a series of coding workshops. She has a list of n available workshops, each characterized by its difficulty level. However, Elena wants to ensure that each workshop is a step up in difficulty from the previous one to adequately challenge the participants. She can arrange the workshops in any order she desires but wants to maximize the number of workshops she can organize following this progressive difficulty criterion. Each workshop has a unique difficulty level assigned to it. Elena needs to organize the maximum number of workshops such that each subsequent workshop in the series has a higher difficulty level than the previous one. Assist Elena in finding an optimal sequence of workshops. The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the number of available workshops. The second line contains n integers d_i (1 ≤ d_i ≤ 10^9), where d_i denotes the difficulty level of the i-th workshop. Print the maximum number of workshops Elena can organize in a strictly increasing difficulty order. In the first sample test, the best sequence is to include the workshops with difficulties [1, 2, 3, 4]. In the second sample test, Elena can form a series of length 1 with the workshop of difficulty 5.","solution":"def max_workshops(n, difficulties): Returns the maximum number of workshops that can be organized in strictly increasing difficulty order. # Sort the list of difficulties difficulties.sort() # Initialize the count of maximum workshops max_count = 1 if n > 0 else 0 # Iterate through the sorted difficulties and count the maximum increasing sequence for i in range(1, n): if difficulties[i] > difficulties[i - 1]: max_count += 1 return max_count"},{"question":"You are given a list of n distinct integers and your task is to find a pair of integers (a, b) from the list such that a + b is maximum and the pair (a, b) is unique. The first line contains an integer n (2 ≤ n ≤ 1000) — the number of integers in the list. The second line contains n space-separated distinct integers ai (−10^9 ≤ ai ≤ 10^9) — the integers in the list. Print the pair of integers (a, b) such that their sum is maximum among all possible pairs and (a, b) is unique, i.e., no other pair (b, a) exists in the list. If there are multiple pairs with the same maximum sum, print the lexicographically smallest pair. First print integer a, then print integer b. Note to the sample test. 1. For the list [10, 20, 30]: - The pairs are (10, 20), (10, 30), (20, 30). - The sums are 30, 40, 50. - The pair (20, 30) has the maximum sum 50. 2. For the list [1, 2, 3, 4]: - The pairs are (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4). - The sums are 3, 4, 5, 5, 6, 7. - The pair (3, 4) has the maximum sum 7. 3. For the list [-1, -2, -3, -4]: - The pairs are (-1, -2), (-1, -3), (-1, -4), (-2, -3), (-2, -4), (-3, -4). - The sums are -3, -4, -5, -5, -6, -7. - The pair (-1, -2) has the maximum sum -3. Example 1: Input: 3 10 20 30 Output: 20 30 Example 2: Input: 4 1 2 3 4 Output: 3 4 Example 3: Input: 4 -1 -2 -3 -4 Output: -1 -2","solution":"def find_max_sum_pair(n, arr): Finds a pair (a, b) from a list `arr` such that a + b is maximum and the pair (a, b) is unique. Parameters: n (int): number of integers in the list. arr (list of int): list of distinct integers. Returns: tuple: pair (a, b) with the maximum sum. # Sort array to make it easy to find the pair with maximum sum arr.sort() # The two largest distinct integers in the sorted array have the maximum sum a = arr[-2] b = arr[-1] return (a, b)"},{"question":"Given a grid of size ( n times m ), you are standing at the top-left corner of the grid (position (1, 1)) and you want to reach the bottom-right corner of the grid (position (n, m)). You can only move either down or right at any point in time. However, there are some blocked cells in the grid that you cannot step on. Your task is to determine the number of distinct paths you can take to reach from the top-left corner to the bottom-right corner without stepping on any blocked cells. You also have to answer ( T ) separate queries. The first line contains a single integer ( T ) (1 leq T leq 100) — the number of queries. Each of the next ( T ) queries starts with two integers ( n ) and ( m ) (1 leq n, m leq 100) — the dimensions of the grid for the respective query. This is followed by an integer ( b ) (0 leq b leq n times m) — the number of blocked cells. The next ( b ) lines each contain two integers ( x ) and ( y ) (1 leq x leq n, 1 leq y leq m) — the row and column indices of a blocked cell respectively. Print ( T ) lines. The ( i )-th line should contain the number of distinct paths for the ( i )-th query. If there is no valid path, print \\"0\\" for that query. # Example Input: ``` 2 3 3 1 2 2 4 4 3 2 2 3 3 4 4 ``` Output: ``` 2 0 ``` Explanation: For the first query, the 3x3 grid has the following paths: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right The blocked cell at (2, 2) does not obstruct these paths. For the second query, the blocked cells prevent any path from the top-left corner to the bottom-right corner. There is no way to navigate around the blocked cells to reach (4, 4).","solution":"def number_of_paths(n, m, blocked_cells): Calculate the number of distinct paths Args: n: number of rows in the grid m: number of columns in the grid blocked_cells: set of tuples representing blocked cells Returns: int: Number of distinct paths from top-left to bottom-right if (1, 1) in blocked_cells or (n, m) in blocked_cells: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if (i+1, j+1) in blocked_cells: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def solve_queries(queries): results = [] for n, m, b, blocked in queries: blocked_set = set(tuple(blocked[i:i+2]) for i in range(0, len(blocked), 2)) results.append(number_of_paths(n, m, blocked_set)) return results"},{"question":"In a newly developed city, a system of pneumatic tubes has been installed to transport messages between various offices efficiently. Each tube connects exactly two offices and has a certain capacity for maximum weight it can carry. Given the current load and capacity of each tube, the city planners want to know the minimum additional capacity needed on each tube to ensure that it can handle any future load increase. Help the city planners by writing a function to compute the needed additional capacity for each tube. The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of tubes and the number of queries respectively. The next n lines each contain three integers u, v, w (1 ≤ u, v ≤ 100,000, 0 ≤ w ≤ 10^6), representing a tube between office u and office v that currently has a capacity of w. The next m lines each contain a single integer k (0 ≤ k ≤ 10^6) — the future potential load that each tube must handle. For each query, print a single line containing n space-separated integers — the minimum additional capacity each tube needs to handle the increased load. Example: Input: ``` 5 3 1 2 5 2 3 10 3 4 3 4 5 8 1 5 7 3 10 15 20 ``` Output: ``` 0 0 7 0 3 5 0 12 2 8 10 5 17 7 13 ``` Explanation: For each query, calculate the additional capacity needed for each tube to handle the potential increase in load. In the first query with load increase of 3, only the third tube (3 4) would need an increased capacity of (3+3) - 3 = 3. Similarly, handle for other cases.","solution":"def calculate_additional_capacities(n, m, tubes, queries): This function calculates the additional capacity needed for each tube to handle any future load increase. Parameters: n (int): Number of tubes m (int): Number of queries tubes (list of tuples): Each tuple contains three integers u, v, w representing a tube between office u and office v that currently has a capacity of w. queries (list of int): Each integer represents the future potential load that each tube must handle. Returns: list of list of int: For each query, a list of n space-separated integers representing the additional capacity needed for each tube to handle the potential increase in load. results = [] for k in queries: additional_capacities = [] for _, _, w in tubes: if k > w: additional_capacities.append(k - w) else: additional_capacities.append(0) results.append(additional_capacities) return results"},{"question":"You are given a rectangular grid of size n x m. Each cell in the grid either contains a land cell (represented by \'1\') or a water cell (represented by \'0\'). Your job is to calculate the number of distinct islands in the grid. An island is a group of adjacent land cells connected horizontally or vertically (not diagonally). The same island should not be counted more than once. Write a function `count_islands` that takes a list of strings representing the grid and returns the number of distinct islands. # Input - An integer `n` (1 ≤ n ≤ 1000) representing the number of rows in the grid. - An integer `m` (1 ≤ m ≤ 1000) representing the number of columns in the grid. - A list of `n` strings, each of length `m`, containing only \'1\'s and \'0\'s. # Output - An integer representing the number of distinct islands in the grid. # Example Input 3 4 1100 1100 0010 Output 2 Explanation In the given grid, there are two distinct islands: - The first island is formed by the land cells at positions (0,0), (0,1), (1,0), and (1,1). - The second island is formed by the land cell at position (2,2).","solution":"def count_islands(n, m, grid): Returns the number of distinct islands in the grid. Parameters: n (int): number of rows in the grid m (int): number of columns in the grid grid (list of str): the grid containing \'1\'s and \'0\'s Returns: int: number of distinct islands def dfs(grid, visited, i, j, n, m): if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] == \'0\' or visited[i][j]: return visited[i][j] = True # Move in all four possible directions dfs(grid, visited, i-1, j, n, m) dfs(grid, visited, i+1, j, n, m) dfs(grid, visited, i, j-1, n, m) dfs(grid, visited, i, j+1, n, m) visited = [[False] * m for _ in range(n)] islands = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: dfs(grid, visited, i, j, n, m) islands += 1 return islands"},{"question":"A factory produces chocolates which are to be packed into boxes. Each box has a maximum weight capacity and a maximum number of chocolates it can hold. A particular type of chocolate has a specific weight. You need to determine the maximum number of chocolates that can be packed in a single box without exceeding either the weight capacity or the number of chocolates capacity of the box. You are given an array of chocolate weights and the weight capacity and the number of chocolates capacity of the box. Write a function that returns the maximum number of chocolates that can be packed in the box. The first line contains three integers, n, w, and m (1 le n le 1000, 1 le w le 10^9, 1 le m le 1000) where: - n is the number of types of chocolates. - w is the weight capacity of the box. - m is the maximum number of chocolates the box can hold. The second line contains n integers, where the i-th integer a_i (1 le a_i le 10^9) represents the weight of the i-th type of chocolate. Output the maximum number of chocolates that can be packed in the box. For example: Input: ``` 4 10 3 2 3 5 7 ``` Output: ``` 3 ``` Explanation: - You can pack three chocolates of weight 2, or two chocolates for several combinations: 2 + 3, 2 + 2 (total weight 5 or 4), or one chocolate of any given type since all weights are less than or equal to 10. - The maximum number of chocolates packed does not exceed the weight capacity (10) or chocolate count (3), thus the output is 3.","solution":"def max_chocolates(n, w, m, chocolate_weights): Determines the maximum number of chocolates that can be packed in a box with given weight capacity and chocolates capacity. :param n: Number of types of chocolates :param w: Weight capacity of the box :param m: Maximum number of chocolates the box can hold :param chocolate_weights: List of weights of each type of chocolate :return: Maximum number of chocolates that can be packed in the box chocolate_weights.sort() total_weight = 0 chocolates_count = 0 for weight in chocolate_weights: if total_weight + weight <= w and chocolates_count + 1 <= m: total_weight += weight chocolates_count += 1 else: break return chocolates_count"},{"question":"Michael loves collecting gemstones, and he has found several groups of stones during his recent exploration. Each gemstone group can be represented by a string where each character denotes a type of mineral present in that group. Michael wants to create a unique collection that consists of all different types of minerals from these groups. Given a list of n non-empty strings where each string represents a group of gemstones, help Michael determine the minimum number of characters (minerals) required to represent all unique minerals from these groups. The first line contains a single integer n (1 ≤ n ≤ 100), the number of gemstone groups. Each of the next n lines contains a single non-empty string of lowercase English letters. The total length of all strings does not exceed 10,000. Output the minimum number of unique minerals needed to include all mineral types found in the given gemstone groups. For example, given the input: ``` 3 abc bcd cde ``` The expected output would be: ``` 5 ``` Explanation: The unique minerals across all gemstone groups are {a, b, c, d, e}. Hence, the minimum number of characters required is 5.","solution":"def minimum_unique_minerals(n, gemstone_groups): Returns the minimum number of unique minerals needed to include all mineral types found in the given gemstone groups. Parameters: n (int): The number of gemstone groups. gemstone_groups (list of str): The list containing the gemstone groups. Returns: int: The number of unique minerals. # Use a set to collect all unique minerals present in all gemstone groups unique_minerals = set() for group in gemstone_groups: for mineral in group: unique_minerals.add(mineral) return len(unique_minerals)"},{"question":"Lydia is planning to decorate her new house with a beautiful walkway of tiles on her front porch. She has n square tiles each with a side length of 1 meter. She wants to arrange these tiles in a rectangular shape such that the length and width of the rectangle are integers. Each tile can be used exactly once, and all tiles must be used. Lydia wants to know how many different rectangular arrangements she can form with the n tiles. The first line contains one integer n (1 le n le 10^9), the number of tiles Lydia has. Output the number of different rectangular arrangements possible using all n tiles. # Example Input ``` 6 ``` Output ``` 4 ``` Explanation For n = 6, you can form the following rectangles: - 1 x 6 - 2 x 3 - 3 x 2 - 6 x 1 Thus, there are 4 possible rectangular arrangements.","solution":"def count_rectangular_arrangements(n): Returns the number of different rectangular arrangements possible using all n tiles. count = 0 for i in range(1, int(n**0.5) + 1): if n % i == 0: if i * i == n: count += 1 else: count += 2 return count"},{"question":"You are given an array of n integers, where each integer represents the height of a pole. You need to build a sequence of poles by selecting some of the poles from the array, with the condition that each selected pole must be strictly taller than the previously selected pole. Find the length of the longest sequence that can be constructed under this condition. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of poles. The second line contains n integers h_i (1 ≤ h_i ≤ 10^9) — the heights of the poles. Print a single integer — the length of the longest strictly increasing sequence of poles you can construct. Example: Input: 6 2 5 3 7 11 8 Output: 4 Explanation: One of the longest sequences is [2, 5, 7, 11]. Its length is 4.","solution":"def longest_increasing_subsequence(poles): Returns the length of the longest strictly increasing subsequence of poles. import bisect if not poles: return 0 lis = [] for height in poles: pos = bisect.bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height return len(lis) # Example usage: n = 6 poles = [2, 5, 3, 7, 11, 8] print(longest_increasing_subsequence(poles)) # Output: 4"},{"question":"You are given a tree with n nodes and n-1 edges. Each edge has a weight of 1. The nodes are numbered from 1 to n. Your task is to determine the length of the shortest path between two nodes in the tree. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^5). The description of the test cases follows. For each test case: - The first line contains a single integer n (2 le n le 10^5) — the number of nodes in the tree. - Each of the next n-1 lines contain two integers u and v (1 le u, v le n) representing an edge between nodes u and v. The next line contains an integer q (1 le q le 10^5) — the number of queries for this test case. - Each of the next q lines contains two integers a and b (1 le a, b le n), denoting a query to determine the length of the shortest path between nodes a and b. It is guaranteed that the sum of n across all test cases does not exceed 10^6, and the sum of q across all test cases does not exceed 10^6. For each query, output a single integer — the length of the shortest path between nodes a and b. **Example:** Input: ``` 1 6 1 2 2 3 2 4 4 5 4 6 3 1 6 3 5 2 6 ``` Output: ``` 3 3 2 ```","solution":"from collections import defaultdict, deque def lca_depth(tree, root, n): This function returns an array of depths and a parent array using BFS. depth = [-1] * (n + 1) parent = [-1] * (n + 1) depth[root] = 0 queue = deque([root]) while queue: node = queue.popleft() for neighbor in tree[node]: if depth[neighbor] == -1: depth[neighbor] = depth[node] + 1 parent[neighbor] = node queue.append(neighbor) return depth, parent def find_lca(a, b, depth, parent): Function to find Lowest Common Ancestor using parent array and depths. while depth[a] > depth[b]: a = parent[a] while depth[b] > depth[a]: b = parent[b] while a != b: a = parent[a] b = parent[b] return a def shortest_path_length(a, b, depth, parent): Calculate the shortest path length using the depths of a, b and their LCA. lca = find_lca(a, b, depth, parent) return depth[a] + depth[b] - 2 * depth[lca] def handle_queries(n, tree, queries): Handles the queries and returns the results for shortest path lengths. root = 1 depth, parent = lca_depth(tree, root, n) result = [] for a, b in queries: result.append(shortest_path_length(a, b, depth, parent)) return result def process(test_cases): Process each test case and return the all results. result = [] for test_case in test_cases: n = test_case[\\"n\\"] tree = defaultdict(list) for u, v in test_case[\\"edges\\"]: tree[u].append(v) tree[v].append(u) queries = test_case[\\"queries\\"] result.extend(handle_queries(n, tree, queries)) return result"},{"question":"A large store has decided to implement an automated system to optimize the allocation of items that customers order online to the available delivery trucks. Each truck has a maximum capacity and can carry multiple items as long as the total weight of the items does not exceed the truck\'s maximum capacity. Additionally, each item has a unique weight. The goal is to determine if it is possible to allocate all the ordered items to the available trucks such that no truck is overloaded. You are given the following information: - The number of trucks `k` (1 ≤ k ≤ 100). - An array `cap` of integers of size `k` where `cap[i]` denotes the maximum weight capacity of the i-th truck (1 ≤ cap[i] ≤ 10^9). - The number of items `n` (1 ≤ n ≤ 100). - An array `items` of integers of size `n` where `items[i]` denotes the weight of the i-th item (1 ≤ items[i] ≤ 10^7). Write a program that determines whether it is possible to allocate all the items to the trucks in such a way that no truck\'s capacity is exceeded. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". # Input The first line contains a single integer `k` — the number of trucks. The second line contains `k` integers `cap[i]` — the maximum capacity of each truck. The third line contains a single integer `n` — the number of items. The fourth line contains `n` integers `items[i]` — the weight of each item. # Output Print \\"YES\\" if it is possible to allocate all the items to the trucks without exceeding their capacities. Otherwise, print \\"NO\\". # Example Input 1: ``` 3 10 15 20 5 2 3 4 5 1 ``` Output 1: ``` YES ``` Input 2: ``` 2 8 6 4 5 5 3 3 ``` Output 2: ``` NO ```","solution":"def can_allocate_items(k, cap, n, items): Determine if it is possible to allocate all items to trucks without exceeding capacities. Parameters: k (int): Number of trucks cap (list): List of integers where cap[i] denotes the capacity of the i-th truck n (int): Number of items items (list): List of integers where items[i] denotes the weight of the i-th item Returns: str: \\"YES\\" if all items can be allocated without exceeding any truck\'s capacity, otherwise \\"NO\\" # Sort truck capacities in descending order cap.sort(reverse=True) # Sort items in descending order items.sort(reverse=True) for weight in items: allocated = False for i in range(k): if cap[i] >= weight: cap[i] -= weight allocated = True break if not allocated: return \\"NO\\" return \\"YES\\""},{"question":"A company organizes a programming competition with n participants. Each participant will be assigned to one group based on their skill level. The higher the skill level, the higher the group number they belong to. The groups are numbered from 1 to m. You are given an array of integers representing the skill levels of participants. Your task is to evenly distribute the participants into m groups. If it is not possible to distribute them evenly, the distribution must be as balanced as possible, minimizing the maximum difference in the sizes of any two groups. The first line contains two integers n and m (1 le n le 10^5, 1 le m le n) — the number of participants and the number of groups, respectively. The second line contains n integers representing the skill levels of the participants (1 le text{{skill_level}}_i le 10^9). Print m integers, where the i-th integer represents the number of participants in the i-th group after the distribution. # Example **Input:** ``` 6 3 12 45 23 34 56 78 ``` **Output:** ``` 2 2 2 ``` **Explanation:** Participants can be evenly distributed into three groups: - Group 1: 12, 23 - Group 2: 34, 45 - Group 3: 56, 78 If it is not possible to distribute them evenly, you should ensure the groups are as balanced as possible, minimizing the maximum group size difference.","solution":"def distribute_participants(n, m, skill_levels): Distributes participants into m groups as evenly as possible. Parameters: n (int): Number of participants. m (int): Number of groups. skill_levels (list of int): Skill levels of participants. Returns: list of int: Number of participants in each group. base_size = n // m remainder = n % m group_sizes = [base_size] * m for i in range(remainder): group_sizes[i] += 1 return group_sizes"},{"question":"Let there be a game where you need to construct a square-shaped grid with certain properties. You are given a string consisting of characters \'R\', \'G\', \'B\', and \'.\'. These stand for Red, Green, Blue, and an empty cell respectively. Arrange the characters in a minimum-sized square grid such that no two cells with the same color are adjacent vertically or horizontally. Print the side length of the smallest square grid possible. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of a single string s containing between 1 and 100 characters (‘R’, ‘G’, ‘B’, ‘.’ inclusive). For each test case, print the side length of the smallest square grid on a single line. **Example Input:** ``` 3 RRG BRG. RGBBR ``` **Example Output:** ``` 2 2 3 ```","solution":"import math def min_square_side_length(t, cases): results = [] for s in cases: n = len(s) min_side_length = math.ceil(math.sqrt(n)) results.append(min_side_length) return results # Function to read input and apply the algorithm def process_input(): t = int(input().strip()) cases = [input().strip() for _ in range(t)] results = min_square_side_length(t, cases) for result in results: print(result)"},{"question":"Alice and Bob are playing a game with strings. They each take turns appending a character to the end of an initially empty string. Alice can append any lowercase English letter (\'a\' to \'z\'), while Bob can append any digit (\'0\' to \'9\'). The game proceeds until the length of the string reaches exactly n characters. Alice always starts, and they alternate turns until the string has length n. After the game is over, they determine the score of the string. The score of the string is defined as the sum of the absolute differences between the ASCII values of consecutive characters in the string. For example, for the string \\"a1b\\", the score is |ord(\'a\') - ord(\'1\')| + |ord(\'1\') - ord(\'b\')|. Given n, determine the highest possible score that Alice can achieve, assuming both players play optimally. Input: The input consists of a single integer n (1 ≤ n ≤ 10^5), the length of the final string. Output: Print a single integer, the highest possible score that Alice can achieve. Example: Input: 3 Output: 80 Explanation: For n = 3, Alice can append \'a\', Bob can append \'9\', and then Alice can append \'a\' again. The string \\"a9a\\" has the score |ord(\'a\') - ord(\'9\')| + |ord(\'9\') - ord(\'a\')| = |97 - 57| + |57 - 97| = 40 + 40 = 80.","solution":"def highest_score(n): Returns the highest possible score that Alice can achieve given n. if n == 1: return 0 return (n - 1) * 40"},{"question":"In a certain civilization, there is a special numerical sequence known as the \\"Tribenacci sequence\\". The nth number in the Tribenacci sequence is defined as the sum of the three preceding numbers in the sequence, with the first three numbers being 0, 1, and 1. Formally, the sequence is defined as follows: - Tribenacci(0) = 0 - Tribenacci(1) = 1 - Tribenacci(2) = 1 - Tribenacci(n) = Tribenacci(n-1) + Tribenacci(n-2) + Tribenacci(n-3) for n >= 3 Given an integer k (1 ≤ k ≤ 30), write a function to calculate the kth number in the Tribenacci sequence. # Input: The input consists of a single integer k, which represents the position in the Tribenacci sequence you need to compute. # Output: Output a single integer which is the kth number in the Tribenacci sequence. # Example: ``` Input: 4 Output: 2 Explanation: The Tribenacci sequence starts as 0, 1, 1, 2, 4, 7, ..., and the 4th number in this sequence is 2. ```","solution":"def tribonacci(k): Returns the kth number in the Tribenacci sequence. if k == 0: return 0 if k == 1 or k == 2: return 1 trib = [0, 1, 1] for i in range(3, k + 1): next_value = trib[-1] + trib[-2] + trib[-3] trib.append(next_value) return trib[k]"},{"question":"You are given a sequence of length `n` consisting of integers, where each integer can be 0, 1, or 2. Let\'s denote the sequence as ( s_1, s_2, ldots, s_n ). Your task is to transform this sequence into another sequence ( t_1, t_2, ldots, t_n ) such that for every ( t_i ) the following condition holds: - if ( s_i = 0 ), then ( t_i ) can be any integer in the range [1, 10^9]. - if ( s_i = 1 ), then ( t_i ) must be the sum of some distinct integers from a predefined set ( P ). - if ( s_i = 2 ), then ( t_i ) must be the product of some distinct integers from the same predefined set ( P ). The first line contains a single integer ( n ) ((1 leq n leq 1000)) — the length of the sequence ( s ). The second line contains ( n ) integers ( s_1, s_2, ldots, s_n ) ((0 leq s_i leq 2)) — the sequence that needs to be transformed. The third line contains an integer ( k ) ((1 leq k leq 10^4)) — the length of the predefined set ( P ). The fourth line contains ( k ) distinct integers ( p_1, p_2, ldots, p_k ) ((1 leq p_i leq 10^6)) — the elements of the predefined set ( P ). Output a single line containing ( n ) integers ( t_1, t_2, ldots, t_n ), the transformed sequence based on the rules provided. Example: ``` Input: 5 0 1 2 0 1 4 3 5 7 11 Output: 1 3 105 15 15 ``` In this example, ( t_2 = 3 ) could be the sum of the subset {3}, ( t_3 = 105 ) could be the product of the subset {3, 5, 7}, ( t_4 = 15 ) could be any number in [1, 10^9], and ( t_5 = 15 ) could be the sum of the subset {3, 5, 7}. The values provided in the output are one possible correct sequence matching the rules.","solution":"def transform_sequence(n, s, k, P): Transforms the sequence s according to rules specified in the problem statement. Parameters: n (int): Length of the sequence s. s (list): Original sequence where each element is 0, 1, or 2. k (int): Length of set P. P (list): Predefined set of distinct integers. Returns: list: Transformed sequence t. t = [] for i in range(n): if s[i] == 0: t.append(1) # Any integer in the range [1, 10^9], so we choose 1 for simplicity. elif s[i] == 1: t.append(min(P)) # Sum of some distinct integers from P, choosing the smallest element suffices. elif s[i] == 2: product = 1 for p in P: product *= p t.append(product) # Product of all distinct integers in P. return t"},{"question":"Alice is a farmer who is growing corn in several fields. There are a total of n fields, each with a certain yield of corn. Alice wants to divide the fields into two groups such that the difference in the total yields of the two groups is minimized. Specifically, let the yield of each field be represented by an integer array Y of length n. You need to find a way to partition the array into two subsets A and B such that the absolute difference between the sum of the yields in subsets A and B is minimized. The first line of the input contains an integer t (1 le t le 10) - the number of test cases. For each test case, the input consists of two lines: - The first line contains the integer n (1 le n le 100) - the number of fields. - The second line contains n integers Y_1, Y_2, ..., Y_n (1 le Y_i le 1000) representing the yield of each field. For each test case, print a single integer - the minimum possible absolute difference between the sums of the two groups. # Example Input: ``` 2 4 1 6 11 5 3 10 20 15 ``` Output: ``` 1 5 ``` # Explanation In the first test case, Alice can partition the fields into two groups: {1, 6, 5} and {11}, with sums 12 and 11 respectively. The difference between the sums is |12 - 11| = 1. In the second test case, Alice can partition the fields into two groups: {10, 15} and {20}, with sums 25 and 20 respectively. The difference between the sums is |25 - 20| = 5.","solution":"def min_difference_partition(t, test_cases): def find_min_partition(yields): n = len(yields) total_sum = sum(yields) dp = [False] * (total_sum // 2 + 1) dp[0] = True for y in yields: for j in range(total_sum // 2, y - 1, -1): dp[j] = dp[j] or dp[j - y] for j in range(total_sum // 2, -1, -1): if dp[j]: return total_sum - 2 * j results = [] for case in test_cases: n, yields = case results.append(find_min_partition(yields)) return results"},{"question":"Alyona loves planning for group presentations in her school. There are n students in her class, each with a unique skill level represented as an integer. Alyona wants to create exactly k groups such that each student is in exactly one group. A group is called a balanced group if all students in a group have skill levels that form an arithmetic progression. Help Alyona to find out if it is possible to form exactly k balanced groups from the students in her class. If it is possible, output \\"YES\\", otherwise output \\"NO\\". The first line of the input contains two integers, n and k (1 ≤ k ≤ n ≤ 500), where n is the number of students in the class and k is the number of groups Alyona wants to create. The second line of the input contains n space-separated integers representing the skill levels of each student (1 ≤ skill level ≤ 1000). Print \\"YES\\" if it is possible to divide the students into exactly k balanced groups, otherwise print \\"NO\\".","solution":"def is_possible_balanced_groups(n, k, skill_levels): Determines if it is possible to divide n students, each with a skill level, into exactly k balanced groups. # A balanced group essentially requires those numbers to form an arithmetic progression. distinct_skill_levels = sorted(set(skill_levels)) # We need at least k distinct skill levels to form k balanced groups. if len(distinct_skill_levels) < k: return \\"NO\\" return \\"YES\\""},{"question":"Johnathan is organizing a tournament with `m` players. Each player will compete against every other player exactly once in a one-on-one match. Given `m`, you are to determine the total number of unique matches to be played in the tournament. Write a program that computes the total number of matches if there are `m` players. The input consists of a single integer `m` (2 ≤ m ≤ 10000) representing the number of players. Output a single integer -- the total number of unique matches to be played. **Examples**: Input: ``` 4 ``` Output: ``` 6 ``` Input: ``` 5 ``` Output: ``` 10 ```","solution":"def total_matches(m): Returns the total number of unique matches to be played in the tournament with m players. The formula for the total number of unique matches in a round-robin tournament is given by m * (m - 1) / 2. return (m * (m - 1)) // 2"},{"question":"You are given an integer array of length n. You need to perform a series of operations to maximize the sum of its elements. An operation is defined as selecting any element of the array and replacing it with the floor value of its value divided by a number k. You can perform this operation any number of times on any element of the array. Your task is to find the maximum possible sum of the array elements after performing the operations optimally. The first line contains two integers n and k (1 ≤ n ≤ 100, 2 ≤ k ≤ 10). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Print the single number — the maximum possible sum of the array elements after performing the operations optimally. In the first sample, the optimal way is to not perform any operations, so the sum remains 15. In the second sample, by replacing both 10s with their floor values divided by 2, which is 5, the new array becomes [5, 5], and the sum is 10. In the third sample, by replacing 16 with its floor value divided by 3, which is 5, and then doing the same operation again to get 1, the new array becomes [1], and the sum is 1.","solution":"def max_possible_sum(n, k, arr): Returns the maximum possible sum of array elements after performing the operations optimally. n: number of elements in the array k: the factor by which to divide each element arr: the list of integers representing the array # No operations are needed as they won\'t increase the sum return sum(arr)"},{"question":"In a far-off land, there is a unique concert venue with a large number of seats arranged in a grid of n rows and m columns. Each seat can be described by its position (r, c), where r is the row number and c is the column number. A concertgoer can only walk from one seat to a directly adjacent seat in the same row or column. A famous event planner wants to know the shortest path concertgoers have to take to ensure seamless movement within the venue. Specifically, he wants to answer multiple queries asking for the shortest path in terms of the number of moves required between two seats. You are given the number of rows n and columns m, followed by a number of queries q. For each query, you need to compute the shortest path between two seats. The first line contains three integers n, m, q (1 leq n, m leq 10^3, 1 leq q leq 10^5) — the number of rows, the number of columns, and the number of queries. The next q lines describe the queries. Each query is denoted by four integers r_1, c_1, r_2, c_2 (1 leq r_1, r_2 leq n, 1 leq c_1, c_2 leq m), representing the coordinates of the starting seat and the destination seat. Print q integers, one for each query, representing the minimum number of moves required to get from the starting seat to the destination seat. In each query, the shortest path follows a city block distance pattern. # Example Input ``` 5 5 3 1 1 3 3 2 2 4 4 5 5 1 1 ``` Output ``` 4 4 8 ``` # Note For the first query, the shortest path from seat (1, 1) to seat (3, 3) involves moving two steps down and two steps to the right. Thus, the total number of moves is 2 (down) + 2 (right) = 4. Similarly, you can calculate the shortest paths for the remaining queries.","solution":"def shortest_path(n, m, queries): Calculates the shortest path between two given seats in a grid. Parameters: n (int): Number of rows m (int): Number of columns queries (list): A list of queries, each containing four integers [r1, c1, r2, c2] Returns: List of integers: shortest path for each query results = [] for r1, c1, r2, c2 in queries: path_length = abs(r1 - r2) + abs(c1 - c2) results.append(path_length) return results"},{"question":"Marks is playing a game where he has a checkerboard with n rows and m columns, and each cell has an initial value (either positive or negative). In each move, he can select a cell and flip its value (i.e., change a positive value to its negative counterpart or a negative value to its positive counterpart). His objective is to make the sum of all values in the checkerboard as large as possible. Marks wants to know, given the initial configuration of the checkerboard, what is the maximum sum of the values of the board after making any number of flips. The input consists of: - First line: Two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns of the checkerboard. - Following n lines: Each line contains m integers, which are the initial values in the cells of the checkerboard. Each value is an integer in the range [-100, 100]. Output a single integer, which is the maximum possible sum of the values of the board after any number of flips. # Example: Input: ``` 3 3 -1 -2 -3 -4 5 -6 7 8 9 ``` Output: ``` 50 ``` Explanation: Flipping the values of all the negative cells in the checkerboard, the sum of all values becomes 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. This is the maximum sum that can be achieved for this configuration.","solution":"def max_sum_after_flips(n, m, board): Given the initial configuration of the checkerboard, returns the maximum sum of the values of the board after making any number of flips. Parameters: n (int): Number of rows of the board. m (int): Number of columns of the board. board (list of list of int): Initial values in the cells of the checkerboard. Returns: int: The maximum possible sum after flips. max_sum = 0 for row in board: for value in row: max_sum += abs(value) return max_sum"},{"question":"Katie loves organizing inventory. She has a warehouse with a lot of packages, each package has an ID that is a positive integer number. She needs to perform operations to retrieve and store packages efficiently. The warehouse operations can be performed by two types of commands: 1. \\"STORE x\\" – This operation stores the package with ID x in the warehouse. 2. \\"RETRIEVE x\\" – This operation retrieves the package with ID x from the warehouse. If the package is not found, it should return \\"NOT FOUND\\". Initially, the warehouse is empty. The objective is to process a sequence of commands and determine the result of each \\"RETRIEVE\\" operation. The first line contains an integer q (1 ≤ q ≤ 3 * 10^5), the number of commands. Each of the following q lines contains a command of the form \\"STORE x\\" or \\"RETRIEVE x\\", where x is a positive integer (1 ≤ x ≤ 10^9). Print the results of each \\"RETRIEVE\\" command in the sequence they are issued. If the retrieved package is not found, print \\"NOT FOUND\\". Example: Input: 8 STORE 1 STORE 2 RETRIEVE 1 RETRIEVE 3 STORE 3 RETRIEVE 3 RETRIEVE 2 RETRIEVE 4 Output: 1 NOT FOUND 3 2 NOT FOUND","solution":"def process_commands(commands): Processes a series of warehouse commands and returns the results of \'RETRIEVE\' operations. :param commands: List of tuple where each tuple contains (\'STORE\' or \'RETRIEVE\', x) :return: List of results for \'RETRIEVE\' operations. warehouse = set() result = [] for command, x in commands: if command == \\"STORE\\": warehouse.add(x) elif command == \\"RETRIEVE\\": if x in warehouse: result.append(x) warehouse.remove(x) else: result.append(\\"NOT FOUND\\") return result"},{"question":"``` Sarah is developing a simulation for an autonomous delivery system. In this system, delivery drones need to traverse a grid to deliver packages. Each cell in the grid can either be empty or contain an obstacle. The drones can move up, down, left, or right by one cell at a time. Sarah needs to determine whether it\'s possible for a drone to traverse from the top-left corner of the grid to the bottom-right corner without crossing any obstacles. Write a program to help Sarah determine if such a path exists. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 100), which represent the number of rows and columns of the grid, respectively. The next n lines each contain m characters that describe the grid. Each of these characters is either a \'.\' (representing an empty cell) or a \'#\' (representing an obstacle). Output \\"YES\\" if it\'s possible for a drone to traverse from the top-left corner to the bottom-right corner without crossing any obstacles. Otherwise, output \\"NO\\". It is guaranteed that the top-left and bottom-right corners are empty cells (i.e., they will contain \'.\'). **Example 1:** Input: 3 4 .. .... .. Output: YES **Example 2:** Input: 3 3 . #.. ..# Output: NO In the first example, the drone can move through the empty cells to reach the bottom-right corner. In the second example, the obstacles block any possible path. ```","solution":"def is_path_possible(n, m, grid): Determines if it is possible to traverse from the top-left corner to the bottom-right corner of a grid. # Directions: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def valid_move(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' def bfs(): from collections import deque queue = deque([(0, 0)]) # starting point visited = set((0, 0)) while queue: x, y = queue.popleft() # Check if we reached the bottom-right corner if (x, y) == (n-1, m-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if valid_move(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False return \\"YES\\" if bfs() else \\"NO\\""},{"question":"You are given a list of integers and a target integer. Your task is to determine if there exists a pair of elements in the list that sums up to the given target. If such a pair exists, return the indices of the two numbers in the list. If no such pair exists, return -1. Note that the same element cannot be used twice. Write a function `findPair` that takes in two parameters: - `nums`: a list of integers. - `target`: an integer. The function should return a list of two integers representing the indices of the pair, or -1 if no such pair exists. # Examples: ```python findPair([2, 7, 11, 15], 9) # Output: [0, 1] findPair([3, 2, 4], 6) # Output: [1, 2] findPair([3, 3], 6) # Output: [0, 1] findPair([1, 2, 3], 7) # Output: -1 ``` # Constraints: - The length of `nums` will be at most 10^4. - Each number in `nums` will be in the range of -10^9 to 10^9. - The target will be in the range of -10^9 to 10^9.","solution":"def findPair(nums, target): Returns the indices of the two numbers from nums that add up to the target, or -1 if no such pair exists. Args: nums (list): List of integers. target (int): The target sum. Returns: list: Indices of the two numbers that add up to the target, or -1 if no such pair exists. lookup = {} for i, num in enumerate(nums): complement = target - num if complement in lookup: return [lookup[complement], i] lookup[num] = i return -1"},{"question":"Vanya wants to set up a flower shop and is looking for an ideal location. He found a street where there are numerous buildings with different heights. Vanya can only set up his shop where there are at least two buildings with different heights on either side of the shop, so it has a nice view of the street. You are given the heights of the buildings in a row from left to right. Determine the maximum possible length for the location of Vanya’s flower shop that can have a building of different heights on either side, and if no such location exists, return -1. The first line contains a single integer n (2 ≤ n ≤ 2·10^5) — the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the buildings. Output a single integer — the maximum length for the location of the flower shop or -1 if no valid location exists. Example: Input: 7 3 1 4 1 5 9 2 Output: 5 Explanation: The positions where the shop can be placed with buildings of different heights on either side are from the 2nd to the 6th position, thus the maximum length of the location is 5 (from 2nd to 6th, both inclusive).","solution":"def max_flower_shop_length(n, heights): Determine the maximum length for the flower shop such that there are buildings of different heights on either side. :param n: Integer, the number of buildings. :param heights: List of integers, the heights of the buildings. :return: Integer, the maximum possible length from left to right for the flower shop location or -1 if no such location exists. for i in range(1, n): if heights[i] != heights[i - 1]: max_length = n - 1 break else: return -1 return max_length"},{"question":"At the \\"Global Code Challenge\\" event, participants were given a unique task to sort a list of integers. However, the sorting process has a little twist: each integer in the list should be shifted to a new position based on its original position and value. Specifically, each integer at position i (0-indexed) moves to position (i + a[i]) % n, where a[i] is the value at position i and n is the length of the list. Unfortunately, the participants encountered a problem after applying the shifts. They are unable to determine if the resulting list can be sorted in ascending order by performing no more than one more shift operation on each integer. Given the initial list of integers and their shifted positions, your task is to determine if it\'s possible to sort the list by shifting each integer no more than once. The first line contains a single integer n (1 ≤ n ≤ 1000), the length of the list. The second line contains n integers a[0], a[1], ..., a[n-1] (-10^3 ≤ a[i] ≤ 10^3), representing the elements of the list. Print \\"YES\\" if it is possible to sort the list by applying at most one more shift to each integer, otherwise print \\"NO\\". Example input: 6 4 6 0 2 5 1 Example output: YES Example input: 5 3 2 4 5 1 Example output: NO","solution":"def can_be_sorted_with_one_shift(n, a): Given a list of integers \'a\' with length \'n\', determine if it\'s possible to sort it by shifting each integer no more than once. def get_target_positions(n, a): return [(i + a[i]) % n for i in range(n)] target_positions = get_target_positions(n, a) # Check if we can shift each element up to one more position to get it sorted for i in range(n): for shift in range(2): # Try to shift 0 or 1 position extra new_positions = sorted([(pos + shift) % n for pos in target_positions]) if new_positions == list(range(n)): return \\"YES\\" return \\"NO\\""},{"question":"John is organizing a painting competition with n participants. Each participant has brought exactly one painting that they want to display. The competition has m exhibition slots available, where each slot can hold one painting. However, John has a few constraints that must be adhered to: 1. There are k themes available, and each painting belongs to exactly one of these themes. 2. No two consecutive exhibition slots can contain paintings of the same theme. Given these constraints, John wants to know if it is possible to arrange the paintings in the exhibition slots such that the rules are respected. If it is possible, provide one possible arrangement. You are given the following information: - The list of paintings and their respective themes. - The number of exhibition slots (m). - The number of participants (n). The first line of the input contains three integers n, m, and k (1 ≤ m ≤ n ≤ 105, 1 ≤ k ≤ 100) — the number of paintings, the number of exhibition slots, and the number of themes. The second line contains n space-separated integers representing the themes of each painting (1 ≤ theme ≤ k). Output: If it is possible to arrange the paintings in the slots according to the constraints, print \\"YES\\" followed by a possible arrangement of length m. If it is not possible, print \\"NO\\". Example: Input: 6 6 3 1 2 1 2 3 3 Output: YES 1 2 1 3 2 3 Note: In the example, there are 6 paintings (n=6) and 6 slots (m=6). There are 3 themes (k=3) available. A valid arrangement is provided in the output where no two consecutive slots contain paintings of the same theme. If multiple solutions are possible, any valid arrangement will be accepted.","solution":"def arrange_paintings(n, m, k, themes): from collections import Counter, defaultdict import heapq # Counts the occurrences of each theme theme_count = Counter(themes) # Verify if a valid arrangement is possible if any(count > (m + 1) // 2 for count in theme_count.values()): return \\"NO\\" # Create max-heap based on counts max_heap = [(-count, theme) for theme, count in theme_count.items()] heapq.heapify(max_heap) result = [0] * m # Result array for slots idx = 0 # Index for slot while max_heap: count, theme = heapq.heappop(max_heap) count = -count for _ in range(count): if result[idx] != 0: # find the next free slot idx = (idx + 1) % m result[idx] = theme idx += 2 # place at alternate positions if idx >= m: idx = 1 return \\"YESn\\" + \\" \\".join(map(str, result)) # Read input function def read_input(input_string): lines = input_string.split(\\"n\\") n, m, k = map(int, lines[0].split()) themes = list(map(int, lines[1].split())) return n, m, k, themes"},{"question":"You are given a DNA sequence represented as a string consisting of letters \'A\', \'T\', \'C\', and \'G\'. You need to find the longest palindromic subsequence in the DNA sequence. A palindromic subsequence is a subsequence that reads the same forward and backward. Your task is to implement a function that determines the length of the longest palindromic subsequence in the given DNA sequence. The input consists of a single line containing a string of length n (1 <= n <= 1000), representing the DNA sequence. Output the length of the longest palindromic subsequence. For example: - For the input string \\"ATCGCGA\\", the longest palindromic subsequence is \\"ACGCA\\", and the output should be 5. - For the input string \\"AAAA\\", the longest palindromic subsequence is \\"AAAA\\", and the output should be 4. Explanation: - In the first example, the subsequence \\"ACGCA\\" is the longest that reads the same forward and backward. - In the second example, the entire string \\"AAAA\\" itself is a palindrome. Hence, its length is 4.","solution":"def longest_palindromic_subsequence(dna_sequence): n = len(dna_sequence) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if dna_sequence[i] == dna_sequence[j] and cl == 2: dp[i][j] = 2 elif dna_sequence[i] == dna_sequence[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"A school is organizing a fun activity where students are asked to spell out words using large letter tiles. Each tile has a single uppercase letter (A-Z). The teacher gives the students a word to spell and they are supposed to pick the required letter tiles to form the word. However, some mischievous students have added duplicate tiles and the teacher wants to ensure that the minimum number of complete words can be formed using these tiles. Each complete word can only be formed once by using up the tiles needed for that word. Given a list of letter tiles and a target word, determine the maximum number of times the students can form the target word using the given tiles. The first line contains a string `tiles` representing the letter tiles available. The second line contains a string `word` representing the target word to be formed. Print a single integer representing the maximum number of complete target words that can be formed. # Constraints - The input strings `tiles` and `word` consist only of uppercase English letters. - The length of `tiles` is between `1` and `10^6`. - The length of `word` is between `1` and `100`. # Example Input: ``` AABBBCCAA ABCA ``` Output: ``` 2 ``` In this example, the word \\"ABCA\\" can be formed twice with the available tiles. Each formation uses up 1 \'A\', 1 \'B\', 1 \'C\', and 1 \'A\'. Therefore, the answer is `2`.","solution":"def max_number_of_words(tiles, word): from collections import Counter # Count the frequency of each letter in tiles and word tiles_count = Counter(tiles) word_count = Counter(word) # Initialize the minimum number of complete words to a large number min_count = float(\'inf\') # Calculate the number of times we can form the word for char in word_count: if char in tiles_count: min_count = min(min_count, tiles_count[char] // word_count[char]) else: return 0 return min_count"},{"question":"You are given a string of length n consisting of lowercase English letters. Let f(l, r) be the number of different characters in the substring from index l to r (inclusive). Your task is to answer q queries in the form of two integers l and r, which ask for the value of f(l, r). The first line contains two integers n and q (1 ≤ n ≤ 105, 1 ≤ q ≤ 105), the length of the string and the number of queries respectively. The second line contains the string of length n. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n, 1-based indexing), representing a query. Output the result of each query on a new line. For example, given the string \\"abcba\\" and a query (1, 3), the substring \\"abc\\" contains three different characters \'a\', \'b\', and \'c\', so the answer would be 3. Additional Example: ``` Input: 7 2 abacaba 2 4 1 7 Output: 3 3 ``` Explanation: - For the query (2, 4) on the string \\"abacaba\\", the substring \\"bac\\" has three unique characters (\'b\', \'a\', \'c\'). - For the query (1, 7) on the string \\"abacaba\\", the substring \\"abacaba\\" also has three unique characters (\'a\', \'b\', and \'c\').","solution":"def unique_characters_in_substring(s, queries): Given a string s and a list of queries, finds the number of unique characters in the substring for each query defined by (l, r). :param s: The input string consisting of lowercase English letters :param queries: A list of tuples, where each tuple is (l, r) indicating the substring range :return: A list of integers where each integer is the number of unique characters for the corresponding query results = [] for l, r in queries: substring = s[l-1:r] # convert 1-based index to 0-based index unique_chars = len(set(substring)) results.append(unique_chars) return results"},{"question":"In a faraway land, there is a magical tree known as the Tree of Life with n nodes where each node has a unique value from 1 to n. The nodes of the tree are connected by n-1 edges, forming a connected acyclic graph. Each node also has an associated magic number which starts with a value of 0. A mischievous gnome starts at the root of the tree (node 1) and performs the following actions: 1. Moves to an adjacent node. 2. After moving to a new node, he increments the magic number of that node by 1. The gnome can only move to an adjacent node that has not been visited before. He continues moving until he has visited all the nodes in the tree exactly once. You are to determine the final magic number of each node after the gnome completes his journey. Note that the gnome starts at node 1, so the magic number of node 1 is immediately set to 1 at the beginning. The input contains: - An integer n (2 ≤ n ≤ 1000), the number of nodes in the tree. - n-1 lines, each containing two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. Output n space-separated integers, where the i-th integer is the final magic number of the i-th node. # Example Input: ``` 5 1 2 1 3 2 4 3 5 ``` Output: ``` 1 2 3 3 4 ``` Explanation: - The gnome starts at node 1, so the magic number of node 1 is set to 1. - The gnome moves to node 2 (from node 1), so the magic number of node 2 becomes 2. - From node 2, he moves to node 4. The magic number of node 4 becomes 3. - The gnome then backtracks to node 1 and moves to node 3. The magic number of node 3 becomes 3. - Finally, he moves to node 5. The magic number of node 5 becomes 4. The pattern of movement affects the magic number increment, thus it is essential to track the gnome\'s path.","solution":"def compute_magic_numbers(n, edges): from collections import defaultdict import sys sys.setrecursionlimit(2000) def dfs(node, parent, magic_num): magic_numbers[node] = magic_num for neighbor in tree[node]: if neighbor != parent: dfs(neighbor, node, magic_num + 1) tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) magic_numbers = [0] * (n + 1) # Start DFS from node 1 with initial magic number 1 dfs(1, -1, 1) return magic_numbers[1:] # Example Usage: # n = 5 # edges = [(1, 2), (1, 3), (2, 4), (3, 5)] # print(compute_magic_numbers(n, edges)) # Output: [1, 2, 2, 3, 3]"},{"question":"You are given an array of integers. Your task is to determine if you can reorder the array such that the difference between every adjacent pair of integers is either 1 or -1. If it is possible to reorder the array in this way, output \\"YES\\", otherwise output \\"NO\\". The first line of input contains an integer n (2 le n le 100000) — the length of the given array. The second line of the input contains n space-separated integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the array. Output \\"YES\\" if the array can be reordered in the described way, or \\"NO\\" otherwise. For example, for the input: ``` 5 1 2 3 4 5 ``` the output should be: ``` YES ``` Another example, for the input: ``` 5 1 3 2 6 5 ``` the output should be: ``` NO ``` Explanation: In the first example, you can order the array as [1, 2, 3, 4, 5], and each adjacent difference is 1. In the second example, there is no way to reorder the array such that each adjacent difference is either 1 or -1.","solution":"def can_reorder_for_adjacent_diff(arr): Determines if the array can be reordered such that the difference between every adjacent pair of integers is either 1 or -1. Parameters: arr (list of int): The input array. Returns: str: \\"YES\\" if such a reorder is possible, \\"NO\\" otherwise. arr.sort() for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) != 1: return \\"NO\\" return \\"YES\\""},{"question":"Anna is preparing for a coding contest and she has an interesting problem to solve. Given a sequence of n integers, she needs to determine the length of the longest subsequence that consists of consecutive integers. The subsequence can be in any order, but the elements must be distinct. To help Anna, you need to write a program that determines the length of the longest subsequence of consecutive integers from a given sequence of n integers. The first line contains an integer n (1 ≤ n ≤ 10^5). The second line contains n integers — the sequence elements. The elements of the sequence do not exceed 10^9 in their absolute value. Print a single integer — the length of the longest subsequence of consecutive integers. For instance, in the first sample the sequence is [4, 2, 1, 6, 5]. The longest subsequence of consecutive integers is [4, 5, 6], so the output should be 3. In the second sample the sequence is [10, 100, 101, 102, 103]. The longest subsequence of consecutive integers is just one of the elements, so the output should be 1.","solution":"def longest_consecutive_subsequence_length(n, sequence): Returns the length of the longest subsequence of consecutive integers. if n == 0: return 0 sequence = set(sequence) longest_length = 0 for number in sequence: if number - 1 not in sequence: # number is the start of a new sequence current_number = number current_length = 1 while current_number + 1 in sequence: current_number += 1 current_length += 1 longest_length = max(longest_length, current_length) return longest_length"},{"question":"A sequence of integers is called a \\"mountain\\" if there exists some index 1 leq k leq n such that the sequence: a_1, a_2, ldots, a_k, a_{k+1}, ldots, a_n satisfies: - a_1 < a_2 < ldots < a_k (strictly increasing up to the peak) - a_k > a_{k+1} > ldots > a_n (strictly decreasing after the peak) Given an array of positive integers, your task is to determine the length of the largest subarray that forms a mountain. If no such subarray exists, return 0. Function signature: ```python def largest_mountain(arr: List[int]) -> int: ``` # Input: - A list of integers `arr` of length `n` (1 ≤ n ≤ 3 × 10^4) where each element is a positive integer (1 ≤ a_i ≤ 10^4). # Output: - An integer representing the length of the largest mountain subarray. # Example: ```python # Example 1: arr = [2, 1, 4, 7, 3, 2, 5] largest_mountain(arr) # Output: 5 # Explanation: The largest mountain is [1, 4, 7, 3, 2]. # Example 2: arr = [2, 2, 2] largest_mountain(arr) # Output: 0 # Explanation: No mountain exists. ``` # Constraints: - You must implement an efficient solution with a time complexity better than O(n^2).","solution":"def largest_mountain(arr): Returns the length of the largest mountain subarray, or 0 if no such mountain exists. n = len(arr) if n < 3: return 0 max_len = 0 i = 1 while i < n - 1: # Check if arr[i] is a peak of a mountain if arr[i - 1] < arr[i] > arr[i + 1]: left = i - 1 right = i + 1 # Move left pointer down the mountain while left > 0 and arr[left - 1] < arr[left]: left -= 1 # Move right pointer down the mountain while right < n - 1 and arr[right] > arr[right + 1]: right += 1 # Calculate the length of the mountain current_len = right - left + 1 max_len = max(max_len, current_len) # Move i to the end of this mountain segment i = right else: i += 1 return max_len"},{"question":"Vova is fascinated by the concept of tournament graphs, which are directed graphs that can be obtained by assigning a direction to each edge of a complete graph. He is particularly interested in finding Hamiltonian paths in tournament graphs. Recall that a Hamiltonian path in a directed graph is a path that visits each vertex exactly once. In a tournament graph, such a path always exists. Vova wants to implement an algorithm to find a Hamiltonian path in a given tournament graph. The first line contains an integer n (2 leq n leq 5000). Each of the next n lines contains n-1 integers. The j-th integer of the i-th line is either 0 or 1, representing whether there is an edge directed from vertex i to vertex j. Note that this data describes only the upper triangular part of the adjacency matrix of the tournament graph. Output one line with a permutation of integers from 1 to n representing a Hamiltonian path in the graph. Example: Input: ``` 4 1 0 1 1 1 0 ``` Output: ``` 1 3 2 4 ``` Explanation: In this example, the tournament graph has 4 vertices. The adjacency matrix is implicitly described as follows: - There is an edge from vertex 1 to vertex 2. - There is an edge from vertex 1 to vertex 3. - There is an edge from vertex 1 to vertex 4. - There is an edge from vertex 2 to vertex 4. - There is an edge from vertex 3 to vertex 4. - There is an edge from vertex 2 to vertex 3.","solution":"def find_hamiltonian_path(n, adjacency_matrix): def find_path(n, adj_matrix): path = list(range(1, n + 1)) for i in range(1, n): j = i while j > 0 and adj_matrix[path[j - 1] - 1][path[j] - 1] == 0: path[j - 1], path[j] = path[j], path[j - 1] j -= 1 return path # Convert the input upper triangular adjacency matrix to full adjacency matrix adj_matrix = [[0] * n for _ in range(n)] for i in range(n): k = 0 for j in range(i + 1, n): adj_matrix[i][j] = adjacency_matrix[i][k] adj_matrix[j][i] = 1 - adjacency_matrix[i][k] k += 1 return find_path(n, adj_matrix) # Example usage: # n = 4 # adjacency_matrix = [ # [1, 0, 1], # [1, 1], # [0] # ] # Resulting Hamiltonian Path example (one of the possible outputs): # Output: [1, 3, 2, 4]"},{"question":"You are given a permutation of numbers from 1 to n. We define the \\"beauty\\" of the permutation as the sum of absolute differences between every two consecutive elements in the permutation. Your task is to find the permutation with the maximum beauty. The first line contains a single integer n (1 ≤ n ≤ 10^6) — the number of elements in the permutation. Print the permutation that maximizes the beauty. If there are multiple solutions, print any of them. Example: Input: 5 Output: 1 5 2 4 3 Explanation: The absolute differences are |1-5| + |5-2| + |2-4| + |4-3| = 4 + 3 + 2 + 1 = 10, which is the maximum possible value.","solution":"def max_beauty_permutation(n): Generates a permutation of numbers from 1 to n that maximizes the beauty. permutation = [] start, end = 1, n while start <= end: if start == end: permutation.append(start) else: permutation.append(start) permutation.append(end) start += 1 end -= 1 return permutation"},{"question":"The kingdom of Aluket has a network of roads in the shape of a tree. There are n cities and n-1 roads, each connecting a pair of cities. Each road has a toll fee associated with it. King Halph wants to travel from city 1 to city n, but he wants to minimize the total toll he has to pay. Help King Halph find the minimum toll he needs to pay to travel from city 1 to city n. The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of cities in the kingdom of Aluket. Each of the next n-1 lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1,000) — there is a road between cities u and v with a toll fee of w. Output a single integer — the minimum toll King Halph has to pay to travel from city 1 to city n. In the first sample, the optimal path is 1 → 2 → 4, which has a total toll of 4. In the second sample, the optimal path is 1 → 3 → 6, which has a total toll of 3. # Sample Input 1: ``` 4 1 2 1 2 3 2 2 4 3 ``` # Sample Output 1: ``` 4 ``` # Sample Input 2: ``` 6 1 2 2 1 3 1 2 4 1 2 5 2 3 6 2 ``` # Sample Output 2: ``` 3 ```","solution":"import heapq def find_minimum_toll(n, roads): Finds the minimum toll King Halph needs to pay to travel from city 1 to city n. # Create an adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Use Dijkstra\'s algorithm to find the shortest path from city 1 to city n pq = [(0, 1)] # (toll, city) tolls = {i: float(\\"inf\\") for i in range(1, n + 1)} tolls[1] = 0 while pq: current_toll, u = heapq.heappop(pq) if current_toll > tolls[u]: continue for v, w in graph[u]: new_toll = current_toll + w if new_toll < tolls[v]: tolls[v] = new_toll heapq.heappush(pq, (new_toll, v)) return tolls[n] def minimum_toll(n, roads_input): roads = [] for i in range(0, len(roads_input), 3): u, v, w = roads_input[i], roads_input[i+1], roads_input[i+2] roads.append((u, v, w)) return find_minimum_toll(n, roads) # Example usage: # n = 4 # roads_input = [1, 2, 1, 2, 3, 2, 2, 4, 3] # print(minimum_toll(n, roads_input)) # Output: 4"},{"question":"You are tasked with developing a chatbot system for a shopping website. The system should be capable of handling queries from users about product details, order status, and return policies. The chatbot needs to understand the input query and return an appropriate response. To simplify the problem, the queries are categorized into three types: 1. Product Details 2. Order Status 3. Return Policy Each query consists of a header keyword and associated details as a single string. The headers for the three types of queries are: 1. \\"product\\": Queries related to product details. 2. \\"order\\": Queries related to order status. 3. \\"return\\": Queries related to return policy. Write a function `handle_query(query: str) -> str` that takes a query string and returns an appropriate response based on the type of query. The responses should be: 1. For \\"product\\" queries: \\"This is related to product details.\\" 2. For \\"order\\" queries: \\"This is related to order status.\\" 3. For \\"return\\" queries: \\"This is related to return policy.\\" Your function should be able to handle any variations in the query details following the header keyword. # Input: - A single query string that follows the format \\"header: details\\". # Output: - A string response based on the type of query. # Examples: Example 1: Input: ``` product: What is the price of XYZ? ``` Output: ``` This is related to product details. ``` Example 2: Input: ``` order: What is the status of my order #12345? ``` Output: ``` This is related to order status. ``` Example 3: Input: ``` return: How do I return a defective item? ``` Output: ``` This is related to return policy. ```","solution":"def handle_query(query: str) -> str: Takes a query string and returns an appropriate response based on the type of query. # Split the query into header and details header, _ = query.split(\\":\\", 1) header = header.strip().lower() if header == \\"product\\": return \\"This is related to product details.\\" elif header == \\"order\\": return \\"This is related to order status.\\" elif header == \\"return\\": return \\"This is related to return policy.\\" else: return \\"Invalid query type.\\""},{"question":"Chunks of land in a vast and barren desert are initially represented using a 2D grid. Scientists have decided to terraform the desert by performing a series of operations that can either add water to a plot of land or check if a contiguous region of land contains water. Each cell in the grid can either be dry (represented by 0) or irrigated (represented by 1). You will be given a grid with n rows and m columns. The scientists can perform the following types of operations: 1. Add water to a specific plot (cell). 2. Check if a contiguous subgrid contains at least one irrigated plot. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) - the number of rows and columns of the grid. The second line contains an integer q (1 ≤ q ≤ 100000) - the number of operations to be performed. The next q lines describe the operations. Each operation is given in one of the following formats: - “ADD x y” (1 ≤ x ≤ n, 1 ≤ y ≤ m) - irrigate the plot at position (x, y). - “CHECK x1 y1 x2 y2” (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m) - check if there is at least one irrigated plot in the subgrid bounded by (x1, y1) and (x2, y2). For each CHECK operation, print 1 if the subgrid contains at least one irrigated plot, otherwise print 0. Example: Input: ``` 5 5 6 ADD 3 3 CHECK 2 2 4 4 ADD 5 5 CHECK 4 4 5 5 CHECK 1 1 2 2 ADD 2 2 CHECK 2 2 2 2 ``` Output: ``` 1 1 0 1 ``` Explanation: After the first ADD operation, the plot at (3,3) is irrigated. The CHECK operation from (2,2) to (4,4) includes the plot (3,3), so it returns 1. The ADD operation at (5,5) irrigates that plot, and the subsequent CHECK operation from (4,4) to (5,5) includes the plot (5,5), so it returns 1. The CHECK operation from (1,1) to (2,2) does not include any irrigated plot, so it returns 0. Finally, after irrigating the plot at (2,2), the last CHECK operation from (2,2) to (2,2) includes the recently irrigated plot, so it returns 1.","solution":"def desert_terraforming(n, m, operations): grid = [[0] * m for _ in range(n)] result = [] for op in operations: parts = op.split() if parts[0] == \\"ADD\\": x = int(parts[1]) - 1 y = int(parts[2]) - 1 grid[x][y] = 1 elif parts[0] == \\"CHECK\\": x1 = int(parts[1]) - 1 y1 = int(parts[2]) - 1 x2 = int(parts[3]) - 1 y2 = int(parts[4]) - 1 found_water = False for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): if grid[i][j] == 1: found_water = True break if found_water: break result.append(1 if found_water else 0) return result"},{"question":"Alex is organizing a treasure hunt in a grid. The grid is composed of n rows and m columns. Each cell in this grid contains a number that indicates the number of steps you can move from that cell in any of the four cardinal directions: up, down, left, or right. The goal of the hunt is to start from the top-left corner of the grid (position 1, 1) and determine whether it\'s possible to reach the bottom-right corner (position n, m). The first line of input contains two integers n and m (1 leq n, m leq 1000) — the number of rows and columns in the grid. Each of the next n lines contains m integers, where the j-th integer in the i-th line is a_{ij} (0 leq a_{ij} leq 1000), which indicates the number of steps you can move from that cell. You need to print \\"YES\\" if it\'s possible to reach the bottom-right corner of the grid starting from the top-left corner, and \\"NO\\" otherwise. # Example: **Input:** ``` 3 3 1 2 3 4 5 6 7 8 9 ``` **Output:** ``` NO ``` **Input:** ``` 3 3 1 1 1 1 1 1 2 2 0 ``` **Output:** ``` YES ``` In the first example, there is no path that leads from the top-left corner to the bottom-right corner following the allowed steps. In the second example, it is possible to reach the bottom-right corner.","solution":"def can_reach_treasure(n, m, grid): Determines if it\'s possible to reach the bottom-right corner of the grid starting from the top-left corner. Parameters: n (int): Number of rows. m (int): Number of columns. grid (list of lists): The grid configuration with step counts. Returns: str: \\"YES\\" if it\'s possible to reach the bottom-right corner, \\"NO\\" otherwise. from collections import deque # Directions are up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_within_bounds(x, y): return 0 <= x < n and 0 <= y < m # Queue for BFS queue = deque([(0, 0)]) visited = [[False]*m for _ in range(n)] visited[0][0] = True while queue: x, y = queue.popleft() step_count = grid[x][y] if x == n - 1 and y == m - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx * step_count, y + dy * step_count if is_within_bounds(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"John is learning about prime numbers and is particularly interested in `twin primes`. Twin primes are pairs of prime numbers that have a difference of 2. For example, (3, 5) and (11, 13) are twin primes. John\'s teacher gave him an assignment where he needs to find the number of twin primes in a given range [L, R]. John is having a hard time solving this problem and asked you for help. Write a function `find_twin_primes(L, R)` that takes two integers L and R (1 ≤ L < R ≤ 10^6) and returns the number of twin primes in the range [L, R]. # Input The function `find_twin_primes(L, R)` takes two integers: - `L`: the lower bound of the range (inclusive) - `R`: the upper bound of the range (exclusive) # Output The function should return an integer representing the number of twin primes in the given range. # Example ```python assert find_twin_primes(1, 20) == 4 # (3,5), (5,7), (11,13), (17,19) assert find_twin_primes(10, 30) == 2 # (11,13), (17,19) assert find_twin_primes(1, 10) == 2 # (3,5), (5,7) ``` # Notes - A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. - Consider optimizing your solution for large values of `R` to ensure it runs efficiently within a reasonable time frame.","solution":"def sieve_of_eratosthenes(n): Returns a list of boolean values. The index represents the number and the value at each index is True if the number is prime, otherwise False. is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for p in range(2, int(n**0.5) + 1): if is_prime[p]: for multiple in range(p * p, n + 1, p): is_prime[multiple] = False return is_prime def find_twin_primes(L, R): Returns the number of twin primes in the range [L, R). is_prime = sieve_of_eratosthenes(R) count = 0 for i in range(L, R - 1): if is_prime[i] and is_prime[i + 2]: count += 1 return count"},{"question":"You are given an array of integers arr of length n, where each element in the array can be a positive or negative integer. Define a subarray as any contiguous portion of the array. The sum of a subarray is the sum of all the elements in that subarray. Your task is to find a non-empty subarray with the maximum possible sum. Additionally, if there are multiple subarrays with the same maximum sum, you need to find the shortest one among them. Input: - The first line contains a single integer n (1 leq n leq 10^5), the length of the array. - The second line contains n space-separated integers representing the array arr (-10^9 leq arr_i leq 10^9). Output: - Print two integers separated by a space: the maximum sum of any subarray and the length of the shortest subarray that has this maximum sum. Example: Input: ``` 5 -2 1 -3 4 -1 2 1 -5 4 ``` Output: ``` 6 4 ``` Explanation: - The subarray with the maximum sum is [4, -1, 2, 1], which has a sum of 6 and a length of 4. - Although [4, -1, 2, 1] and [3, 2, 4, 1] also have the sum 6, the subarray [4, -1, 2, 1] is the shortest among them. Note: - If all elements in the array are negative, the subarray with the maximum sum could be the single least negative number among them.","solution":"def find_maximum_subarray_sum_and_length(n, arr): Find the maximum sum of any subarray and the length of the shortest subarray that has this maximum sum. :param n: Length of the array (int) :param arr: List of integers representing the array :return: Tuple containing the maximum sum and the length of the shortest subarray with that sum max_sum = float(\'-inf\') current_sum = 0 min_length = float(\'inf\') start_index = 0 for i in range(n): if current_sum <= 0: current_sum = arr[i] start_index = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum min_length = i - start_index + 1 elif current_sum == max_sum: min_length = min(min_length, i - start_index + 1) return max_sum, min_length"},{"question":"You are given an array representing a list of non-negative integers. The array can be separated into several contiguous subarrays. Your task is to determine the minimum number of jumps you need to traverse from the first element to the last one. Each element in the array represents the maximum jump length you can take from that position. The first line contains a single integer n (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains n non-negative integers a1, a2, ..., an (0 ≤ ai ≤ 109) — the elements of the array. Print a single integer — the minimum number of jumps required to reach the last element of the array from the first one. If it is not possible to reach the last element, print -1. For example, in the first sample test, you can jump from the first element (with value 2) either 1 step to the second or 2 steps to the third. From there, you need at least one more jump to reach the last element. In the second sample test, it is not possible to reach the last element.","solution":"def min_jumps(arr): Returns the minimum number of jumps required to reach the end of the array. If it is not possible to reach the end, returns -1. n = len(arr) if n == 1: return 0 if arr[0] == 0: return -1 max_reach = arr[0] steps = arr[0] jumps = 1 for i in range(1, n): if i == n - 1: return jumps max_reach = max(max_reach, i + arr[i]) steps -= 1 if steps == 0: jumps += 1 if i >= max_reach: return -1 steps = max_reach - i return -1"},{"question":"Given an integer n, find the sum of all prime numbers less than or equal to n. The first line of the input contains a single integer n (1 ≤ n ≤ 10^6). Output a single integer — the sum of all prime numbers less than or equal to n. Note: A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than or equal to n. if n < 2: return 0 sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False prime_sum = sum(index for index, is_prime in enumerate(sieve) if is_prime) return prime_sum"},{"question":"Alice loves to play with strings. She has a string `s` of length `n` and she likes to form another string `t` by selecting some (not necessarily consecutive) characters from `s` such that the characters of `t` are lexicographically sorted in non-decreasing order. However, she wants the length of the string `t` to be as long as possible but without repeating any characters. You need to write a program to help Alice determine the maximum possible length of the string `t`. Input: The first line contains a single integer `n` (1 le n le 2 cdot 10^5), the length of the string `s`. The second line contains the string `s` which consists of only lowercase English letters. Output: Print a single integer, the maximum possible length of the string `t` that Alice can form under the given constraints. Example: Input: 7 abacaba Output: 3 The maximum possible length of the string `t` is 3 which is \\"abc\\". Although \\"aa\\" and \\"aba\\" are also lexicographically sorted strings from `s`, they contain repeated characters and hence, they do not satisfy the constraints. The optimal string here is \\"abc\\", of length 3.","solution":"def max_length_unique_sorted_subsequence(s): Determines the maximum possible length of the string `t` that is lexicographically sorted and with unique characters. # Use a set to store unique characters unique_chars = set(s) # The length of the unique characters set gives us the answer, # because the unique characters can be arranged in lexicographical order without repeating. return len(unique_chars)"},{"question":"In an ancient city, there exists a unique structure consisting of **n** towers, each with a different number of floors. The towers are numbered from 1 to **n**. The height (in floors) of the ith tower is given by **hi**. The city\'s mayor, who loves symmetry, has launched a project to build sky bridges between the towers based on certain rules: 1. A sky bridge can only connect two towers if the difference in the number of their floors does not exceed **k** floors. 2. Each tower can have at most one sky bridge connected to it. Given the number of floors in each of the towers, determine the maximum number of sky bridges that can be built while satisfying the above constraints. # Input - The first line contains two integers, **n** and **k** (1 ≤ **n** ≤ 10^5, 0 ≤ **k** ≤ 10^9) — the number of towers and the maximum allowed difference in the number of floors, respectively. - The second line contains **n** integers **h1, h2, ..., hn** (1 ≤ **hi** ≤ 10^9) — the number of floors in each tower. # Output - Print a single integer — the maximum number of sky bridges that can be built. # Example Input ``` 5 2 1 3 5 7 9 ``` Output ``` 2 ``` Explanation In the given example, the towers have heights [1, 3, 5, 7, 9], and **k** is 2. The following pairs of towers can be connected by sky bridges: - Tower 1 (1 floor) and Tower 2 (3 floors) - Tower 2 (3 floors) and Tower 3 (5 floors) - Tower 3 (5 floors) and Tower 4 (7 floors) - Tower 4 (7 floors) and Tower 5 (9 floors) The maximum number of sky bridges is 2 (e.g., between towers (1, 3) and (5, 7)).","solution":"def max_sky_bridges(n, k, heights): heights.sort() used = [False] * n count = 0 for i in range(n): if not used[i]: for j in range(i + 1, n): if not used[j] and abs(heights[j] - heights[i]) <= k: used[i] = True used[j] = True count += 1 break return count"},{"question":"You are given an array of integers, where each integer represents the elevation of a location in a 2D grid. Each day it rains on some positions in the grid, causing water to be trapped in the lower-lying areas. Your task is to determine the maximum amount of water that can be trapped within the given grid after it rains. The water can only flow horizontally or vertically to a lower elevation, and water will not be trapped at the edges of the grid. Any grid cell with no neighboring cell at a lower elevation will trap water according to the difference between its elevation and the lowest elevation among its neighbors. For example, given the grid: ``` 1 4 3 1 3 2 3 2 1 3 2 4 2 3 3 2 3 1 ``` The maximum amount of water that can be trapped in this grid is 4. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. - The next `n` lines each contain `m` integers — the elevations of the grid cells. # Output - Output one integer — the maximum amount of trapped water after it rains. # Example **Input:** ``` 3 6 1 4 3 1 3 2 3 2 1 3 2 4 2 3 3 2 3 1 ``` **Output:** ``` 4 ``` **Explanation:** In the given example, water can be trapped in the cell with elevation 1 at the middle of the grid and two cells with elevation 2 adjacent to it, totaling up to 4 units of water. Edge cells (cells located at the border) cannot trap any water because there are no walls to contain the water. **Note:** Use a priority queue (min-heap) to keep track of the cells being processed, starting from the boundary cells. The goal is to keep expanding inwards while calculating the possible water trapped based on the minimum boundary encountered so far.","solution":"import heapq def trap_rain_water(elevation_map): if not elevation_map or not elevation_map[0]: return 0 n, m = len(elevation_map), len(elevation_map[0]) visited = [[False] * m for _ in range(n)] heap = [] # Add all boundary cells to the heap for i in range(n): heapq.heappush(heap, (elevation_map[i][0], i, 0)) heapq.heappush(heap, (elevation_map[i][m - 1], i, m - 1)) visited[i][0] = True visited[i][m - 1] = True for j in range(m): heapq.heappush(heap, (elevation_map[0][j], 0, j)) heapq.heappush(heap, (elevation_map[n - 1][j], n - 1, j)) visited[0][j] = True visited[n - 1][j] = True directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] water_trapped = 0 while heap: height, x, y = heapq.heappop(heap) for d in directions: nx, ny = x + d[0], y + d[1] if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: visited[nx][ny] = True water_trapped += max(0, height - elevation_map[nx][ny]) heapq.heappush(heap, (max(height, elevation_map[nx][ny]), nx, ny)) return water_trapped"},{"question":"Peter found a peculiar series of numbers in his old notebook. The series is defined as follows: The first number of the series is 1. From the second number onwards, the nth number in the series is the sum of the previous n numbers. Formally, the series S can be defined as: - S(1) = 1 - S(n) = S(n-1) + S(n-2) + ... + S(1) for n > 1 Peter wants to know the k-th number in this series. Can you help him find it? The input consists of a single integer k (1 ≤ k ≤ 25). Print the k-th number in the series. For example: For k = 4, the series is: 1, 1, 2, 4. Output: 4 For k = 5, the series is: 1, 1, 2, 4, 8. Output: 8","solution":"def series_kth_number(k): Returns the k-th number in the specified series. The series is defined as: - S(1) = 1 - S(n) = S(n-1) + S(n-2) + ... + S(1) for n > 1 :param k: The position in the series (1 ≤ k ≤ 25) :return: The k-th number in the series if k == 1: return 1 series = [1] for i in range(1, k): next_value = sum(series) series.append(next_value) return series[-1]"},{"question":"Liam is organizing a new online event based on a quiz game. The event will feature several rounds, and in each round, participants can attempt different types of questions for varying points. However, some questions are initially locked, and to unlock them, participants need to have accumulated enough points from previous rounds for the requirements specified. There are p different question types available in each round. For each round, Liam can select a specific question type to focus on, and by focusing on that question type, he can increase its points value for that round. Specifically, focusing increases the points for that selected question by q points. Initially, some question types are unlocked, while others require a certain number of points to be unlocked. To unlock the i-th question type, participants need to have accumulated at least u_i points in total from previous rounds. If u_i = 0 for some i, that question type is initially unlocked. Liam wants to maximize the total number of points the participants can score in a specified number of rounds, including the effect of focusing on one specific question type before starting. Write a program to calculate the maximum possible score participants can achieve after r rounds if Liam optimally chooses the question type to focus on. The input consists of: - The first line contains three integers p, r, and q (1 le p, r le 1000; 0 le q le 10^9). - The second line contains p integers u_1, u_2, ..., u_p (0 le u_i le 10^9), where u_i is the number of points required to unlock the i-th question (or 0 if it is unlocked initially). - The third line contains p integers v_1, v_2, ..., v_p (1 le v_i le 10^9), where v_i is the points value of the i-th question type. Print one integer — the maximum possible score participants can achieve after r rounds. For example, consider that focusing on the first question type increases its points value by q points for every round. The explanation for the first test: In this scenario, Liam should focus on the question type with the highest increase in points from focusing, and the outcome should reflect the optimal strategy for achieving the maximum score.","solution":"def max_possible_score(p, r, q, u, v): max_score = 0 # Iterate over each question type to consider focusing on it for i in range(p): if u[i] <= r * v[i]: # Calculate score if we focus on the ith question score = (r * (v[i] + q)) max_score = max(max_score, score) return max_score # Example use case: # p = 3, r = 2, q = 10 # u = [5, 0, 15] # v = [10, 5, 3] # max_possible_score_result = max_possible_score(3, 2, 10, [5, 0, 15], [10, 5, 3]) # print(max_possible_score_result) # Output should be 40 when focusing on the first type."},{"question":"You are given a list of integers representing the height of buildings along a straight road. Each building\'s width is the same. You need to compute the maximum area of a rectangle formed by consecutive buildings where you can consider the width of buildings as the unit width and the height as provided in the list. The first line of input contains an integer n (1 <= n <= 10^6) representing the number of buildings. The second line contains n integers h1, h2, ..., hn (1 <= hi <= 10^6) representing the heights of the buildings. Output the maximum area of a rectangle formed by consecutive buildings. Example: Input: 7 2 1 5 6 2 3 4 Output: 10 Explanation: The maximum rectangular area is formed by buildings of height 2, 3, and 4. For these buildings, the width is 3 units and the height is 2 units, making the area 2 * 3 = 6.","solution":"def max_rectangle_area(heights): Compute the maximum area of a rectangle formed by consecutive buildings. :param heights: List of integers representing the heights of buildings. :return: Maximum rectangle area. stack = [] max_area = 0 index = 0 while index < len(heights): # If this building is higher than the building on the stack, push it to the stack if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest building area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now, pop the remaining buildings from stack and calculate area while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Bob is an avid hiker and enjoys visiting different natural parks. He has a map that indicates several campsites in a park, some of which have trails connecting them. Each campsite is represented by an integer, and each trail between campsites has a distance associated with it. Bob wants to find the shortest possible route that allows him to start at any campsite, visit every other campsite exactly once, and return to his starting campsite. This is known as the Traveling Salesman Problem (TSP). Your task is to help Bob by determining the minimum distance required for his trip. # Input: - The first line contains a single integer n (2 leq n leq 15) — the number of campsites. - The next n lines contain n integers each, where the j-th integer in the i-th line represents the distance between campsite i and campsite j (0 leq text{distance}_{i, j} leq 100). - It is guaranteed that the distance between a campsite and itself is zero (i.e., text{distance}_{i, i} = 0), and the distance between two distinct campsites is symmetric (i.e., text{distance}_{i, j} = text{distance}_{j, i}). # Output: - Print a single integer — the minimum distance required for Bob to visit every campsite exactly once and return to the starting campsite. # Example: Input: ``` 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 ``` Output: ``` 80 ``` # Note: In the provided example, the optimal tour is 0 -> 1 -> 3 -> 2 -> 0 with a total distance of 80.","solution":"from itertools import permutations def traveling_salesman_problem(n, distances): Solves the Traveling Salesman Problem (TSP) by evaluating all permutations of campsites and returning the minimum round-trip distance. :param n: int - the number of campsites. :param distances: List[List[int]] - a 2D list where the j-th integer in the i-th line represents the distance between campsite i and campsite j. :return: int - the minimum distance for the round trip. assert 2 <= n <= 15, \\"n is out of range\\" min_distance = float(\'inf\') campsites = range(n) for permutation in permutations(campsites): current_distance = 0 for i in range(n - 1): current_distance += distances[permutation[i]][permutation[i + 1]] current_distance += distances[permutation[-1]][permutation[0]] if current_distance < min_distance: min_distance = current_distance return min_distance"},{"question":"You are given an array nums of distinct integers, and you are asked to calculate the sum of all possible differences between the maximum and minimum element of every subarray of nums. A subarray is a contiguous portion of the array, and the formula for the difference is: difference = max(subarray) - min(subarray). The first line contains an integer n (1 le n le 10^5) - the number of elements in the array nums. The second line contains n distinct integers nums[i] (1 le nums[i] le 10^9) - the elements of the array nums. Output the total sum of all possible differences between the maximum and minimum elements for every subarray of nums modulo 10^9 + 7. Example: Input: 3 1 3 2 Output: 4 Explanation: The possible subarrays are: - [1]: max - min = 1 - 1 = 0 - [3]: max - min = 3 - 3 = 0 - [2]: max - min = 2 - 2 = 0 - [1, 3]: max - min = 3 - 1 = 2 - [3, 2]: max - min = 3 - 2 = 1 - [1, 3, 2]: max - min = 3 - 1 = 2 Total sum of differences = 2 + 1 + 2 = 5 (modulo 10^9 + 7)","solution":"MOD = 10**9 + 7 def sum_of_differences(nums): n = len(nums) total_sum = 0 for i in range(n): min_sum = max_sum = 0 for j in range(i, n): if j == i: min_val = nums[i] max_val = nums[i] else: min_val = min(min_val, nums[j]) max_val = max(max_val, nums[j]) total_sum = (total_sum + max_val - min_val) % MOD return total_sum"},{"question":"Vasya likes playing with arrays and performing operations on them. You have an array of integers of size n. You are initially at position 1 (the first element of the array) and you want to reach position n (the last element of the array). However, there are restrictions on movements: - From position i, you can only move to position j (i < j), if and only if the element at position j is a multiple of the element at position i. Each move from position i to position j has a cost of |i - j|. Your task is to determine the minimum cost required to move from position 1 to position n. If it\'s not possible to reach the last element, print -1. The first line contains an integer n (2 ≤ n ≤ 10^5) — the size of the array. The second line contains n integers a1, a2, …, an (1 ≤ ai ≤ 10^9) — the elements of the array. Print a single integer — the minimum cost to reach the an-th element from the first element, or -1 if it is not possible. Example: ``` Input: 5 2 3 5 4 10 Output: 4 ``` In this example, you can move: - from 1 to 2 (element 2 to 3, cost 1) - from 2 to 4 (element 3 to 4, cost 2) - from 4 to 5 (element 4 to 10, cost 1) The total cost is 1 + 2 + 1 = 4.","solution":"from collections import deque def minimum_cost_to_reach_end(n, arr): # Initialize the minimum cost list with a large number min_cost = [float(\'inf\')] * n min_cost[0] = 0 # Starting point has no cost queue = deque([0]) # Use a queue for BFS while queue: i = queue.popleft() for j in range(i + 1, n): if arr[j] % arr[i] == 0: if min_cost[j] > min_cost[i] + (j - i): min_cost[j] = min_cost[i] + (j - i) queue.append(j) return min_cost[-1] if min_cost[-1] != float(\'inf\') else -1"},{"question":"You are given an array of integers a of length n and an integer k. Implement a function that rearranges the array such that all elements less than the given integer k precede elements greater than or equal to k. The relative order of elements within each group should be maintained. For example, given an array a = [1, 4, 3, 2, 5, 2, 6] and k = 3, the array should be rearranged to [1, 2, 2, 4, 3, 5, 6]. The first line of input contains an integer n (1 leq n leq 10^5), the length of the array. The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9), the elements of the array. The third line contains the integer k (-10^9 leq k leq 10^9). Output the rearranged array maintaining the relative order as described. Example: Input: 7 1 4 3 2 5 2 6 3 Output: 1 2 2 4 3 5 6","solution":"def rearrange_array(a, k): Rearranges the array such that all elements less than k precede elements greater than or equal to k, while maintaining relative order. less_than_k = [] greater_or_equal_k = [] for num in a: if num < k: less_than_k.append(num) else: greater_or_equal_k.append(num) return less_than_k + greater_or_equal_k"},{"question":"Alice is a fan of numerical puzzles and has recently come up with an interesting challenge. She has an array of positive integers, and she wants to find the maximum product of a contiguous non-empty subarray. Since the product could get very large, she also wants to compute the result modulo (10^9 + 7) (a large prime number). However, to make it a bit more challenging, she wants the solution to be efficient even for large arrays. Can you help her with this task? Input will begin with a single integer (N) ((1 leq N leq 2 times 10^5)), representing the number of elements in the array. The next line contains (N) positive integers (a_1, a_2, ldots, a_N) ((1 leq a_i leq 10^9)) which are the elements of the array. Output a single integer which is the maximum product of a contiguous subarray modulo (10^9 + 7). Example input: ``` 5 1 2 3 4 5 ``` Example output: ``` 120 ``` In the provided example, the subarray [1, 2, 3, 4, 5] yields the maximum product 120, and 120 % (10^9 + 7) is 120.","solution":"def max_product_subarray(arr): mod = 10**9 + 7 N = len(arr) # Initialize variables current_max = current_min = max_product = arr[0] for i in range(1, N): if arr[i] < 0: current_max, current_min = current_min, current_max current_max = max(arr[i], current_max * arr[i]) current_min = min(arr[i], current_min * arr[i]) max_product = max(max_product, current_max) return max_product % mod"},{"question":"You are given a list of `n` integers, each representing the weight of a coin. Some of the coins are real and some are fake. All the real coins have the same weight, and all the fake coins have the same weight, which is less than the weight of the real coins. Your task is to identify the weight of the fake coins and the weight of the real coins. The first line of input contains the integer `n` (2 ≤ n ≤ 1000) — the number of coins. The second line contains `n` space-separated integers representing the weights of the coins. Output two integers — the weight of the fake coins and the weight of the real coins, in that order. In the first example, every coin weighs 10 grams except the fake coins, which weigh 5 grams. In the second example, the real coins weigh 3 grams each and only one coin weighs 7 grams, making it the fake one. For the third example, it\'s clear to see the discrepancy between the weights of 20 and 15 grams, indicating which is fake and which is real. ```plaintext Input: 4 10 10 5 10 Output: 5 10 Input: 6 3 3 3 7 3 3 Output: 3 7 Input: 5 20 20 20 15 20 Output: 15 20 ```","solution":"def identify_coin_weights(n, weights): Identify the weights of the fake and real coins. Args: n (int): The number of coins. weights (list of int): The weights of the coins. Returns: tuple: A tuple containing the weight of the fake coins and the weight of the real coins. from collections import Counter # Count the frequency of each weight weight_counts = Counter(weights) # The real coin weight is the one with the highest count real_weight = max(weight_counts, key=weight_counts.get) # The fake coin weight is the one with the lowest count fake_weight = min(weight_counts, key=weight_counts.get) return fake_weight, real_weight # Example usage n = 4 weights = [10, 10, 5, 10] print(identify_coin_weights(n, weights)) # Output: (5, 10)"},{"question":"In a local zoo, the zookeeper has been tasked with organizing the feeding of the animals. There are n animals and each animal requires a specific type and quantity of food. To help manage this, the zookeeper needs to distribute m types of food stored in various containers. Each food type can be used only once and a container used to feed an animal cannot be used again until the next feeding round. The zookeeper wants to find out the minimum number of containers required to feed all the animals at least once. For example, if there are 3 animals, each requiring 1 unit of food types [1, 2], [1, 3], and [2, 3] respectively, and there are 5 containers each with exactly 1 unit of food types 1, 1, 2, 2, and 3, the zookeeper can use containers 1, 3, and 5 to feed the animals in the first round. Formally, given: - n animals, each requiring a list of food types. - m containers, each containing a specified type of food. You need to determine the minimum number of containers required to ensure each animal gets its required food types in one feeding round. If it\'s not possible to feed all animals in one round, return -1. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of animals and the number of food containers. The next n lines each contain a list of integers representing the food types required by each animal, ended by a 0 (indicating the end of the list). The following line contains m integers representing the food types in each container. Print a single integer — the minimum number of containers required to feed all animals at least once. If it\'s not possible, print -1. **Input:** ``` 3 5 1 2 0 1 3 0 2 3 0 1 1 2 2 3 ``` **Output:** ``` 3 ``` In the first example, the zookeeper can use containers 1, 3, and 5. If it\'s impossible to feed all animals, like if there are not enough containers of specific types, the output should be -1. Make sure to take into account that each food container can only be used once per round.","solution":"def minimum_containers(n, m, animal_requirements, container_food_types): from collections import Counter from itertools import combinations def can_feed_all(animals, container_set): for animal in animals: required_foods = Counter(animal) available_foods = Counter(container_food_types[i - 1] for i in container_set) if not all(available_foods[food] >= required_foods[food] for food in required_foods): return False return True animal_foods = [set(req) for req in animal_requirements if req] min_containers_count = -1 for k in range(1, m + 1): for containers in combinations(range(1, m + 1), k): if can_feed_all(animal_foods, containers): min_containers_count = k break if min_containers_count != -1: break return min_containers_count"},{"question":"You have a stack of books, each with a different width, and you want to place the books in a single row on a shelf. The challenge is to arrange the books such that the total width of the books fits precisely within the width of the shelf. If there are multiple ways to achieve this, you should choose the arrangement that leaves the least empty space. Given an integer `W` representing the total width of the shelf and an array `books` of integers specifying the widths of the books, write a function to determine the number of books that can fit on the shelf such that their total width is as close to `W` as possible without exceeding it. If there are multiple solutions, return the one with the maximum number of books. If no books can fit, return 0. Function Signature: ```python def max_books_on_shelf(W: int, books: List[int]) -> int: pass ``` # Input - `W` (1 ≤ `W` ≤ 1000): an integer representing the total width of the shelf. - `books`: a list of integers, where each integer represents the width of a book (1 ≤ width ≤ 500). The length of the list is between 1 and 1000. # Output - Return an integer representing the maximum number of books that can fit on the shelf such that their total width is as close to `W` as possible without exceeding it. # Example ```python W = 10 books = [1, 2, 3, 4, 5] print(max_books_on_shelf(W, books)) # Output: 4 (books with widths [1, 2, 3, 4] or [2, 3, 4, 1]) W = 5 books = [5, 5, 5, 5] print(max_books_on_shelf(W, books)) # Output: 1 (any single book of width 5) W = 12 books = [2, 3, 5, 7] print(max_books_on_shelf(W, books)) # Output: 3 (books with widths [2, 3, 5]) ```","solution":"from typing import List def max_books_on_shelf(W: int, books: List[int]) -> int: # Function to find the number of books that can fit on the shelf n = len(books) dp = [0] * (W + 1) num_books = [0] * (W + 1) for width in books: for w in range(W, width - 1, -1): if dp[w - width] + width > dp[w] or (dp[w - width] + width == dp[w] and num_books[w - width] + 1 > num_books[w]): dp[w] = dp[w - width] + width num_books[w] = num_books[w - width] + 1 return max(num_books)"},{"question":"Gather has obtained a special chest containing n gems, each having a certain value. The chest can be unlocked using a combination code. To determine the combination, Gather needs to perform the following tasks: Gather has to split the gems into two groups such that the absolute difference between the sums of gem values in the two groups is minimized. Given the values of the gems, your task is to help Gather find out the minimum possible absolute difference between the sums of the gem values in the two groups. The first line contains a single integer t (1 le t le 10^3) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 100) — the number of gems. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the values of the gems. For each test case, print a single integer — the minimum possible absolute difference between the sums of the gem values in the two groups. **Example:** Input: ``` 2 4 1 3 3 4 3 8 5 8 ``` Output: ``` 1 5 ``` **Explanation:** In the first test case, Gather can split the gems into two groups as follows: {1, 3, 3} and {4}, which gives the sums 7 and 4, respectively. The absolute difference is |7 - 4| = 3. Alternatively, splitting into {1, 4} and {3, 3} gives sums 5 and 6, respectively. The absolute difference is |5 - 6| = 1, which is the minimum. In the second test case, Gather can split the gems into two groups as follows: {5, 8} and {8}, which gives the sums 13 and 8, respectively. The absolute difference is |13 - 8| = 5, which is the minimum.","solution":"def min_difference(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] gems = test_cases[i][1] total_sum = sum(gems) target = total_sum // 2 dp = [0] * (target + 1) for gem in gems: for j in range(target, gem - 1, -1): dp[j] = max(dp[j], dp[j - gem] + gem) results.append(total_sum - 2 * dp[target]) print(f\\"Case {i} - sum {total_sum}, closest half {dp[target]}, difference {results[i]}\\") # Debug output return results"},{"question":"You are given a set of n points in a plane, each point represented by its x and y coordinates. You need to find a rectangle with sides parallel to the coordinate axes such that it contains at least k of the given points. Formally, you need to determine the largest possible area of a rectangle with sides parallel to the coordinate axes such that the rectangle contains at least k of the given points inside it or on its boundary. The first line contains two space-separated integers n and k (1 <= k <= n <= 10^5) - the number of points and the minimum number of points that must be inside the rectangle, respectively. The next n lines contain two space-separated integers each, xi and yi (-10^9 <= xi, yi <= 10^9) - the coordinates of the points in the plane. Print a single integer, the largest possible area of such a rectangle. If it is not possible to find such a rectangle, print -1.","solution":"def largest_rectangle_area(n, k, points): Return the largest possible area of a rectangle with sides parallel to the coordinate axes that contains at least k of the given points. Args: n : int : the number of points k : int : the minimum number of points that must be inside the rectangle points: list of list of int : the coordinates of the points in the plane Returns: int : the largest possible area of such a rectangle. If not possible, return -1. if k == 1: min_x = min(point[0] for point in points) max_x = max(point[0] for point in points) min_y = min(point[1] for point in points) max_y = max(point[1] for point in points) return (max_x - min_x) * (max_y - min_y) points.sort() max_area = -1 for i in range(n): for j in range(i, n): if j - i + 1 < k: continue y_values = sorted(point[1] for point in points[i:j+1]) for l in range(j - i + 1 - k + 1): min_y = y_values[l] max_y = y_values[l + k - 1] min_x = points[i][0] max_x = points[j][0] area = (max_x - min_x) * (max_y - min_y) max_area = max(max_area, area) return max_area"},{"question":"Given an array `arr` of `n` integers and an integer `x`, find two integers in the array such that their sum is closest to `x`. If there are multiple pairs with the same closest sum, return any of them. # Input - The first line contains an integer `n` (2 ≤ n ≤ 1000) – the size of the array. - The second line contains `n` space-separated integers – elements of the array, where each element is an integer from -10^4 to 10^4. - The third line contains an integer `x` (-10^4 ≤ x ≤ 10^4). # Output Print two space-separated integers from the array that have the sum closest to `x`. # Example Input ``` 5 1 3 4 7 10 8 ``` Output ``` 3 4 ``` Explanation In the given example, `3` and `4` are the integers whose sum (`7`) is closest to `8`.","solution":"def find_closest_sum_pair(arr, x): Finds two integers in the array such that their sum is closest to x. arr.sort() n = len(arr) closest_sum = float(\'inf\') left, right = 0, n - 1 best_pair = (arr[0], arr[1]) while left < right: current_sum = arr[left] + arr[right] if abs(current_sum - x) < abs(closest_sum - x): closest_sum = current_sum best_pair = (arr[left], arr[right]) if current_sum < x: left += 1 elif current_sum > x: right -= 1 else: break return best_pair"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation any number of times: 1. Select a non-empty substring of the string that reads the same forwards and backwards (a palindrome). 2. Remove the selected substring from the string and concatenate the remaining segments of the string. Your task is to compute the minimum number of operations required to make the string empty. The first line contains a single integer n (1 le n le 10^5) — the length of the string. The second line contains a string of length n consisting of lowercase English letters. Print a single integer — the minimum number of operations to make the string empty. **Example**: ``` Input: 7 abacaba Output: 1 ``` ``` Input: 8 abcddcba Output: 1 ``` ``` Input: 5 abcba Output: 1 ```","solution":"def min_operations_to_empty_string(s: str) -> int: Returns the minimum number of operations required to make the string empty by removing palindromic substrings. def is_palindrome(x): return x == x[::-1] # Check if the string itself is a palindrome if is_palindrome(s): return 1 else: return 2 # Example usage: # n = 7 # s = \\"abacaba\\" # print(min_operations_to_empty_string(s)) # Output: 1 # n = 8 # s = \\"abcddcba\\" # print(min_operations_to_empty_string(s)) # Output: 1 # n = 5 # s = \\"abcba\\" # print(min_operations_to_empty_string(s)) # Output: 1"},{"question":"A group of friends in Berland took a road trip to visit a series of unique landmarks. Each landmark is represented by a node in a graph, and each node appears only once. The friends must travel from one landmark to another using direct paths, and each path has a travel cost associated with it. It is possible that not all landmarks are directly connected by a path. The friends want to visit all landmarks with the minimum total travel cost. Each landmark must be included in exactly one of the trips, and they cannot revisit any landmark once they have left it. If two landmarks are not directly connected, they need to find an alternate route that minimizes the total travel cost. Your task is to help them plan the route. The first line contains an integer n (1 ≤ n ≤ 1000), the number of landmarks. The next n lines each contain three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 100000), separated by spaces, indicating that there is a bidirectional path connecting landmarks u and v with travel cost c. Output the minimum travel cost required to visit all landmarks. If it\'s not possible to visit all landmarks, output -1. For instance: ``` Input: 4 1 2 4 2 3 2 3 4 3 4 1 5 Output: 9 ``` In this example, the friends can visit all landmarks with the following travel paths: 1 -> 2 with cost 4, 2 -> 3 with cost 2, and 3 -> 4 with cost 3. The total travel cost is 4 + 2 + 3 = 9.","solution":"def min_travel_cost(n, edges): Returns the minimum cost to visit all landmarks using Kruskal\'s algorithm to find the Minimum Spanning Tree (MST). If not all landmarks can be visited, returns -1. def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Sort edges based on cost edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_edges = [] index = 0 total_cost = 0 while len(mst_edges) < n - 1: if index >= len(edges): return -1 # not enough edges to connect all nodes u, v, w = edges[index] index += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: mst_edges.append((u, v, w)) union(parent, rank, x, y) total_cost += w return total_cost"},{"question":"A Robot Vacuum Cleaner has been programmed to clean a room consisting of n x m cells arranged in a grid. The robot starts from the top-left corner of the grid (cell (1,1)) and is tasked to clean all the cells. The robot can move to the adjacent cells in the four possible directions (up, down, left, right) and can only clean a cell once. The robot cannot move to a cell that is already cleaned. The task is to determine the minimum number of moves the robot has to make to clean all the cells in the grid. # Input: The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 500) — the number of rows and columns of the grid, respectively. # Output: Print a single integer — the minimum number of moves required for the robot to clean all the cells in the grid. # Example: Input: 2 3 Output: 5 Explanation: - Starting at (1,1), it will move to (1,2), then to (1,3). - Then it moves down to (2,3), and finally moves left to (2,2) and (2,1). In total, the robot makes 5 moves to clean all the cells.","solution":"def min_moves_to_clean(n, m): Calculate the minimum number of moves required for the robot to clean all cells in an n x m grid. :param n: Number of rows :param m: Number of columns :return: Minimum number of moves required return n * m - 1"},{"question":"Arkady is planning to perform a sequence of operations on a grid. The grid has size n times m and all cells are initially empty. An operation is defined as placing a stone in one of the empty cells. Arkady wants to maximize the Manhattan distance between any pair of stones placed on the grid. Manhattan distance between two cells (x1, y1) and (x2, y2) is defined as: text{distance} = |x1 - x2| + |y1 - y2| Arkady needs your help to determine the cells where stones should be placed to maximize the minimum distance between any pair of stones. Write a program that receives multiple test cases. For each test case: - You are given the dimensions of the grid. - You need to identify the cells where stones should be placed to maximize the minimum Manhattan distance between any pair of stones. Input: - The first line contains the integer t (1 le t le 100) — the number of test cases. - The next t lines each contain two integers n and m (1 le n, m le 100) — the dimensions of the grid. Output: - For each test case, print the coordinates of the cells where stones should be placed, one cell per line. If there are multiple solutions, any will be accepted. Example: ``` 2 3 3 2 4 ``` Output: ``` 4 1 1 1 3 3 1 3 3 4 1 1 1 4 2 1 2 4 ``` Explanation: - In the first example, placing stones at (1, 1), (1, 3), (3, 1), and (3, 3) maximizes the minimum Manhattan distance. - In the second example, placing stones at (1, 1), (1, 4), (2, 1), and (2, 4) achieves the same goal for that grid size.","solution":"def maximize_manhattan(n, m): Return the coordinates of cells where stones should be placed to maximize the minimum Manhattan distance between any pair of stones. stones_positions = [ (1, 1), (1, m), (n, 1), (n, m) ] return stones_positions def process_test_cases(t, cases): Receive number of test cases and their respective grid dimensions. Return the positions for each test case. results = [] for n, m in cases: stones_positions = maximize_manhattan(n, m) results.append(stones_positions) return results"},{"question":"Given a list of strings, create a function that finds the longest palindromic subsequence in each string. A palindromic subsequence is a sequence that reads the same forward and backward, and it need not be contiguous. # Input The input consists of an integer `n` (1 ≤ n ≤ 1000) representing the number of strings, followed by `n` strings where each string has a length between 1 and 1000. # Output For each string, output the length of the longest palindromic subsequence. # Example ``` Input: 4 character racecar level abcba Output: 3 7 5 5 ``` # Explanation - The longest palindromic subsequence in \\"character\\" is \\"carac\\" (length 5). - The longest palindromic subsequence in \\"racecar\\" is \\"racecar\\" itself (length 7). - The longest palindromic subsequence in \\"level\\" is \\"level\\" itself (length 5). - The longest palindromic subsequence in \\"abcba\\" is \\"abcba\\" itself (length 5).","solution":"def longest_palindromic_subsequence_length(s): Given a string s, find the length of the longest palindromic subsequence. n = len(s) if n == 0: return 0 # Create a 2D array to store lengths of palindromic subsequences dp = [[0] * n for _ in range(n)] # All substrings of length 1 are palindromes of length 1 for i in range(n): dp[i][i] = 1 # Build the dp array for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def find_longest_palindromic_subsequence_lengths(strings): Given a list of strings, return the length of the longest palindromic subsequence for each string. return [longest_palindromic_subsequence_length(s) for s in strings]"},{"question":"John has recently started to play a strategy game in which he needs to build towers to defend his base. Each tower has an attack range and height that determine its effectiveness in the game. John needs to strategically place these towers such that no two towers block each other\'s view. Specifically, one tower blocks another tower\'s view if it is within its attack range and taller than or equal to the other tower. You are given n towers, and each tower is described by its attack range ri and height hi. Your task is to help John determine the maximum number of towers that can be placed such that no two towers block each other\'s view. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of towers. The following n lines each contain two integers ri and hi (1 ≤ ri, hi ≤ 1,000,000,000) — the attack range and height of the i-th tower. Print a single integer — the maximum number of towers that can be placed without any two blocking each other’s view. For example, with the input: ``` 5 3 4 2 3 3 2 1 1 2 5 ``` the expected output would be: ``` 3 ``` as one possible set of non-blocking towers might be the towers with attributes (3, 2), (3, 4), and (1, 1).","solution":"def max_non_blocking_towers(towers): # Sort towers by attack range, then by height towers.sort(key=lambda x: (x[0], x[1])) n = len(towers) dp = [1] * n # Array to store the maximum towers that can be placed up to this point for i in range(n): for j in range(i): if towers[j][0] < towers[i][0] and towers[j][1] < towers[i][1]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"A farmer has a rectangular field of dimensions width w and height h, where w and h are both integers. He wants to build a fence along the perimeter of the field. However, due to some obstacles, there are regions along the boundary where the fence cannot be built. You are given a list of segments on the boundary that are blocked and cannot be used for building the fence. The perimeter of the field is defined as the total distance around the boundary, but you must subtract the lengths of the blocked segments from this total distance in order to calculate the actual length of the fence that can be built. The boundary of the field consists of four edges: 1. The bottom edge from (0, 0) to (w, 0) 2. The right edge from (w, 0) to (w, h) 3. The top edge from (w, h) to (0, h) 4. The left edge from (0, h) to (0, 0) The input constraints are: * Each segment is defined by its starting and ending coordinates in the format (x1, y1) to (x2, y2) * You are guaranteed that all segments lie on the boundary of the field * You are guaranteed that the sum of lengths of all segments is less than or equal to the perimeter of the field # Input - The first line contains two integers w and h (1 ≤ w, h ≤ 10^9) — the width and height of the field. - The second line contains an integer n (0 ≤ n ≤ 100) — the number of blocked segments. - Each of the next n lines contains four integers x1, y1, x2, and y2 — the coordinates of the two endpoints of a blocked segment. # Output Print a single integer — the length of the fence that can be built along the perimeter of the field. # Example Input ``` 5 4 3 0 0 2 0 3 4 5 4 2 0 4 0 ``` Output ``` 14 ``` Explanation The perimeter of the field is 2*(5+4) = 18. The total length of blocked segments is 2+2+2=6. Thus, the length of the fence that can be built is 18-6=12.","solution":"def calculate_fence_length(w, h, blocked_segments): Calculate the length of the fence that can be built along the perimeter of the field. Parameters: w (int): The width of the field. h (int): The height of the field. blocked_segments (list of tuples): List of blocked segments specified by their start and end coordinates. Returns: int: The length of the fence that can be built. perimeter = 2 * (w + h) blocked_length = 0 for x1, y1, x2, y2 in blocked_segments: blocked_length += abs(x2 - x1) + abs(y2 - y1) return perimeter - blocked_length"},{"question":"You are given a sequence of integers. Your task is to find the length of the longest subsequence which is both strictly increasing and strictly decreasing, where the subsequence is not necessarily contiguous. The first line of input contains one integer T (1 ≤ T ≤ 10) — the number of test cases. Each of the next two lines for each test case: 1. The first line contains a single integer N (1 ≤ N ≤ 100,000) — the number of elements in the sequence. 2. The second line contains N integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the sequence. For each test case, output a single integer — the length of the longest subsequence which is both strictly increasing and strictly decreasing. Example: Input: 2 7 1 2 1 2 3 2 1 4 5 1 5 1 Output: 5 3","solution":"def longest_subsequence(t, test_cases): results = [] for n, a in test_cases: lis = [1] * n lds = [1] * n # Calculate LIS (Longest Increasing Subsequence) for i in range(1, n): for j in range(0, i): if a[i] > a[j]: lis[i] = max(lis[i], lis[j] + 1) # Calculate LDS (Longest Decreasing Subsequence) for i in range(n-2, -1, -1): for j in range(n-1, i, -1): if a[i] > a[j]: lds[i] = max(lds[i], lds[j] + 1) # Find the maximum length of Bitonic Subsequence max_length = 0 for i in range(n): max_length = max(max_length, lis[i] + lds[i] - 1) results.append(max_length) return results"},{"question":"Mizuki has a peculiar obsession with counting the stars she sees in the night sky. Each night, she records her observations in a unique format -- based on her position, she records a string, `s`, consisting of the characters \'*\' and \'.\' representing stars and empty spaces respectively. A consecutive segment of stars in the recorded string composes a cluster. Mizuki wants to determine the stability of the clusters by checking if each cluster of stars has the same length. Your task is to determine if all the clusters of stars in Mizuki\'s string have the same length. The first line contains a non-empty string `s` consisting of characters \'*\' and \'.\'. It is guaranteed that the string consists of at most 10^6 characters. In the only line, print \\"YES\\" (without quotes) if all clusters of stars have the same length; otherwise, print \\"NO\\" (without quotes). # Example **Input:** ``` *..*..* ``` **Output:** ``` YES ``` **Explanation:** The clusters of stars are `[\'*\', \'*\', \'*\']`. Since all clusters have the same length (1), the output is \\"YES\\". **Input:** ``` **..*.** ``` **Output:** ``` NO ``` **Explanation:** The clusters of stars are `[\'**\', \'*\']`. Since the clusters do not have the same length, the output is \\"NO\\".","solution":"def are_star_clusters_stable(s): Determines if all the clusters of stars in the string have the same length. :param s: A string consisting of \'*\' and \'.\' :return: \\"YES\\" if all clusters have the same length, otherwise \\"NO\\" current_cluster_length = 0 cluster_lengths = [] for char in s: if char == \'*\': current_cluster_length += 1 elif current_cluster_length > 0: cluster_lengths.append(current_cluster_length) current_cluster_length = 0 if current_cluster_length > 0: cluster_lengths.append(current_cluster_length) if len(cluster_lengths) == 0 or len(set(cluster_lengths)) == 1: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of n integers a_1, a_2, ..., a_n. You need to find a pair of indices (i, j) such that 1 <= i < j <= n and the difference between a_i and a_j is maximized. If there are multiple pairs with the same difference, return the indices with the smallest i. If there are still multiple pairs, return the one with the smallest j. The first line contains a single integer n (2 ≤ n ≤ 100,000) — the number of integers in the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9). Output two integers i and j (1 ≤ i < j ≤ n) — the indices of the pair with the maximum difference. Example: Input: 6 1 2 3 4 5 6 Output: 1 6 Explanation: The differences between the elements are: |1 - 2| = 1 |1 - 3| = 2 |1 - 4| = 3 |1 - 5| = 4 |1 - 6| = 5 ... |5 - 6| = 1 The maximum difference is 5, which occurs between indices 1 and 6.","solution":"def find_max_difference_pair(n, arr): Finds a pair of indices (i, j) such that 1 <= i < j <= n and the difference between arr[i-1] and arr[j-1] is maximized. Parameters: n (int): The number of integers in the array. arr (list): The list of integers. Returns: tuple: A tuple containing the indices (i, j). min_index = 0 max_diff = 0 result = (1, 2) for j in range(1, n): if arr[j] - arr[min_index] > max_diff: max_diff = arr[j] - arr[min_index] result = (min_index + 1, j + 1) elif arr[j] < arr[min_index]: min_index = j return result"},{"question":"Suppose that you are given two strings, s and t. The task is to determine the minimum number of operations required to transform string s into string t. You can perform three types of operations on the string s: 1. Insert a character. 2. Delete a character. 3. Replace a character. You need to find the minimum number of these operations required to make string s exactly equal to string t. The first line contains the string s. The second line contains the string t. Both strings contain only lowercase English letters and have lengths not exceeding 1000. Print a single integer denoting the minimum number of operations. # Example Input ``` sunday saturday ``` Output ``` 3 ``` Explanation: The minimum number of operations required to transform \\"sunday\\" into \\"saturday\\" is 3. One way to achieve this is: 1. Insert \'a\' after \'s\' -> \\"sunday\\" -> \\"saunday\\" 2. Insert \'t\' after \'s\' -> \\"sauntay\\" -> \\"satunday\\" 3. Replace \'n\' with \'r\' in the third position \'satunday\' -> \\"saturday\\" # Note - You must output the exact minimum number of operations required. - The problem can be solved using dynamic programming, specifically by implementing the edit distance algorithm.","solution":"def min_operations_to_transform(s, t): Calculates the minimum number of operations required to transform string s into string t. Operations allowed are insert, delete, and replace a character. m, n = len(s), len(t) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are same, ignore last character and recur for remaining string elif s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] # If the last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"Little Timmy loves playing with his building blocks. He has n blocks, each block is represented by a positive integer representing its weight. He wants to arrange the blocks into a tower. However, for the tower to be stable, any block placed on top of another block must be lighter than the block below it. Your task is to help Timmy determine the maximum height of such a stable tower that he can build with the given blocks. The first line contains a single integer n (1 le n le 100000) — the number of blocks. The next line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 100000), where a_i is the weight of the i-th block. Print a single integer — the maximum height of the stable tower that Timmy can build. In the first sample, Timmy can use all the blocks since they are already ordered by weight. In the second sample, Timmy can\'t use any two blocks together because there is no block lighter than another block. In the third sample, Timmy could use blocks with weights 3, 2, and 1 in that order.","solution":"def max_height_of_stable_tower(n, weights): Determines the maximum height of a stable tower. Args: n (int): The number of blocks. weights (list[int]): The weights of the blocks. Returns: int: The maximum height of the stable tower. weights.sort(reverse=True) height = 1 for i in range(1, n): if weights[i] < weights[i-1]: height += 1 return height"},{"question":"You are developing a software system to mimic electronic voting. In your system, there are voters and candidates. Each voter can vote for exactly one candidate, and each candidate may receive multiple votes. After all votes are cast, the system needs to determine the winner. A winner is the candidate who receives more than half of the total votes. If no candidate receives more than half of the votes, there is no winner. You are given an integer n (1 ≤ n ≤ 10^5) representing the number of voters, followed by n integers where each integer represents the candidate that a voter voted for (candidates are represented by integers 1 through n). Note: A candidate with no votes should not be considered a winner. Write a program that determines the winner, or prints \\"No winner\\" if no candidate receives more than half of the votes. The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of voters. The second line contains n integers (1 ≤ vote_i ≤ n) — the votes cast by the voters. Print the winner\'s candidate number if there is a winner, or \\"No winner\\" if there is no winner. Example: Input: 5 1 2 1 2 1 Output: 1 Input: 4 1 2 3 1 Output: No winner Explanation: In the first example, candidate 1 receives 3 out of 5 votes, which is more than half, so candidate 1 is the winner. In the second example, no candidate receives more than half of the votes, so there is no winner.","solution":"def find_winner(n, votes): from collections import Counter vote_count = Counter(votes) for candidate, count in vote_count.items(): if count > n // 2: return candidate return \\"No winner\\""},{"question":"Taha is an enthusiastic gardener who takes great pride in maintaining his beautiful garden. One day, he decided to plant a new kind of flower in his garden which needs a specific type of fertilizer mix weekly. The mix ratio is represented by two integers, `x` and `y`, which stand for the amount of two different fertilizers in the mix (in grams). Furthermore, the weekly amount of each fertilizer can be provided in batches of different sizes. Taha wants to optimize the batch sizes to make sure he meets the mix ratio exactly every week without any leftovers. Your task is to help Taha find the smallest possible batch sizes for the fertilizers that comply with the mix ratio. The first line of the input contains two space-separated integers `x` and `y` (1 ≤ x, y ≤ 1000) — the required amount of each fertilizer in the mix ratio. Output two space-separated integers — the corresponding batch sizes for the fertilizers that satisfy the ratio, given that the batch sizes are optimal (i.e., minimal). For example, if `x` is 3 and `y` is 5, a possible output would be `3 5`. If `x` is 2 and `y` is 4, a possible output would be `1 2`, by simplifying the ratio. Example 1: Input: 3 5 Output: 3 5 Example 2: Input: 2 4 Output: 1 2","solution":"import math def optimal_batch_sizes(x, y): Returns the smallest possible batch sizes for the fertilizers that comply with the mix ratio x : y. gcd = math.gcd(x, y) return x // gcd, y // gcd"},{"question":"You are given a sequence of integers a_1, a_2, ldots, a_n and an integer m. Your task is to determine how many contiguous subarrays of length exactly m have an even product. The first line contains two integers, n and m (1 leq m leq n leq 10^5) — the length of the sequence and the length of the subarrays. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the sequence. Print a single integer — the number of contiguous subarrays of length exactly m with an even product. # Example **Input:** ``` 5 2 1 2 3 4 5 ``` **Output:** ``` 4 ``` **Explanation:** The subarrays of length 2 are: - [1, 2] — has an even product (2) - [2, 3] — has an even product (6) - [3, 4] — has an even product (12) - [4, 5] — has an even product (20) All four subarrays have an even product.","solution":"def count_even_product_subarrays(n, m, arr): Counts the number of contiguous subarrays of length exactly m that have an even product. Parameters: n (int): Length of the sequence m (int): Length of the subarrays arr (List[int]): The elements of the sequence Returns: int: The number of contiguous subarrays of length exactly m with an even product count = 0 # Check each subarray of length m for i in range(n - m + 1): subarray = arr[i:i + m] # Check if the product of the subarray is even even_product = False for num in subarray: if num % 2 == 0: even_product = True break if even_product: count += 1 return count"},{"question":"Lena loves archery and regularly practices at the training ground. The training ground has multiple targets positioned in a line, and each target has a certain score associated with hitting it. However, Lena has a unique way of practicing: she can only hit targets in a contiguous segment of the line during one practice session. Lena wants to maximize her score from hitting a segment of targets. Given the scores associated with each target in a practice session, help Lena determine the maximum score she can achieve from hitting any contiguous segment of targets. The first line of the input contains one integer t (1 le t le 100) — the number of practice sessions. Then t practice sessions follow. The first line of each practice session contains one integer n (1 le n le 10^5) — the number of targets positioned in a line. The second line of the practice session contains n integers s_1, s_2, ldots, s_n (-10^3 le s_i le 10^3), where s_i is the score associated with hitting the i-th target. For each practice session, print the maximum score Lena can achieve from hitting any contiguous segment of targets. **Example:** Input: ``` 2 5 1 -2 3 4 -1 3 -1 -2 -3 ``` Output: ``` 7 -1 ``` **Explanation:** In the first practice session, Lena can get the maximum score from the segment [3, 4], which gives a score of 3 + 4 = 7. In the second practice session, hitting any segment of targets results in a negative score, so the optimal segment is [0] with the least negative value, which is -1.","solution":"def max_subarray_sum(nums): Returns the maximum score (sum) of any contiguous subarray. max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def archery_sessions(t, sessions): results = [] for session in sessions: n, scores = session results.append(max_subarray_sum(scores)) return results"},{"question":"You are given a string ( s ) consisting of ( n ) lowercase Latin letters. We can insert exactly one \'+\' sign between any two consecutive characters of the string or before the first character to create a mathematical expression, for example transforming \\"abc\\" into \\"a+b+c\\" or \\"+a+b+c\\". We then evaluate this arithmetic expression. Each letter in the string corresponds to an integer value given by its position in the alphabet (\'a\' = 1, \'b\' = 2, ..., \'z\' = 26). Given the string ( s ), determine the maximum possible value of the arithmetic expression that can be obtained by inserting the \'+\' signs optimally. The first line contains an integer ( n ) (1 leq n leq 10^5), the length of the string ( s ). The second line contains the string ( s ) consisting of ( n ) lowercase Latin letters. Output one integer — the maximum value of the arithmetic expression that can be formed by inserting the \'+\' signs optimally. # Example **Input:** ``` 3 abc ``` **Output:** ``` 6 ``` **Explanation:** We transform \\"abc\\" into \\"+a+b+c\\", which equals 1+2+3 = 6. Thus, 6 is the maximum value.","solution":"def maximum_value_expression(n, s): Given a length n and a string s, returns the maximum possible value by converting each letter to its alphabet position and summing them. return sum(ord(char) - ord(\'a\') + 1 for char in s)"},{"question":"You are given a sequence of integers a_1, a_2, dots, a_n (1 ≤ n ≤ 100, 1 ≤ a_i ≤ 10^9), and an integer k (1 ≤ k ≤ n). Your task is to find the k-th smallest element in the sequence efficiently, given that all integers are distinct. # Input: The first line contains two integers n and k separated by a space. The second line contains n space-separated integers representing the sequence a. # Output: Output a single integer, the k-th smallest element in the sequence. # Examples: Example 1: **Input:** ``` 5 2 10 5 3 9 7 ``` **Output:** ``` 5 ``` Example 2: **Input:** ``` 6 4 1 2 6 3 5 4 ``` **Output:** ``` 4 ```","solution":"def kth_smallest_element(n, k, sequence): Returns the k-th smallest element in the sequence. Parameters: - n: An integer representing the number of elements in the sequence. - k: An integer representing the position of the smallest element to be found. - sequence: A list of integers representing the sequence. Returns: - An integer representing the k-th smallest element in the sequence. # Sort the sequence to find the k-th smallest element sorted_sequence = sorted(sequence) # Return the (k-1)-th element (0-indexed) from the sorted list return sorted_sequence[k-1]"},{"question":"Daisy loves prime numbers and is fascinated by sequences. She recently encountered Prime Sequences and wants your help to solve a problem. She gives you a sequence of integers and wants you to check if it\'s possible to delete some elements (possibly none) from the sequence so that the sum of the remaining elements is a prime number. Daisy does not want the sequence to be empty after deletion. You are to write a program that determines whether such a subset of elements exists in the sequence. If it is possible, print \\"YES\\", otherwise print \\"NO\\". The first line of the input contains an integer n (1 leq n leq 1000) — the number of integers in the provided sequence. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 leq a_i leq 1000) — the elements of the sequence. Print \\"YES\\" if there exists a non-empty subset of the sequence whose sum is a prime number. Otherwise, print \\"NO\\". # Example Input ``` 5 1 3 4 7 9 ``` Output ``` YES ``` Input ``` 3 4 4 4 ``` Output ``` NO ``` # Explanation In the first example, removing 1, 4, and 9 leaves the subset {3, 7}. The sum 3 + 7 = 10 is not prime, but 7 is prime. In the second example, the sums of any possible subsets {4}, {4, 4}, or {4, 4, 4} are not prime numbers. Therefore, the output is \\"NO\\".","solution":"import itertools def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_sequence_exists(n, sequence): Returns \\"YES\\" if there exists a non-empty subset of the sequence whose sum is a prime number. Returns \\"NO\\" otherwise. for r in range(1, n+1): for subset in itertools.combinations(sequence, r): if is_prime(sum(subset)): return \\"YES\\" return \\"NO\\""},{"question":"You are given n points in a two-dimensional plane. Each point has a coordinate (x, y). You need to form a triangle using any three of these points such that the area of the triangle is maximized. The first line contains an integer n (3 ≤ n ≤ 2 × 10^5) — the number of points. Each of the next n lines contains two integers xi and yi (|xi|, |yi| ≤ 10^9) — the coordinates of the ith point. Print the maximum area of the triangle as a floating point number. Note: The area of a triangle formed by three points ((x1, y1)), ((x2, y2)), and ((x3, y3)) can be calculated using the formula: text{Area} = frac{1}{2} * left| x1(y2 - y3) + x2(y3 - y1) + x3(y1 - y2) right| Ensure your answer has an absolute or relative error of at most (10^{-9}). Example: Input: 5 0 0 1 0 0 1 1 2 2 1 Output: 1.5 In this example, the points (0, 0), (1, 2), and (2, 1) form the triangle with the maximum area, which is 1.5 square units.","solution":"def max_triangle_area(points): Returns the maximum area of a triangle that can be formed by any three given points using the formula for the area of a triangle in 2D space. n = len(points) max_area = 0.0 def triangle_area(p1, p2, p3): x1, y1 = p1 x2, y2 = p2 x3, y3 = p3 return 0.5 * abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) # Iterate our combinations and calculate the area for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): area = triangle_area(points[i], points[j], points[k]) if area > max_area: max_area = area return max_area"},{"question":"In a faraway kingdom, there lived a wise wizard who had a special potion-making machine. The machine could only produce potions if given a specific recipe string consisting of the letters \\"m\\", \\"o\\", and \\"x\\". The machine works by placing ingredients in a special order and it has two magical properties: 1. Any two adjacent \\"m\\" can transform the letter immediately following them. 2. Any two adjacent \\"x\\" can transform the letter immediately preceding them. One day, the wizard\'s machine broke and scrambled several recipe strings together. The wizard needs your help to identify if the given scrambled string could be transformed into a final recipe string without any transformations left to apply. Your task is to write a program that takes a string s, and checks if it is possible to apply the machine\'s transformations onto s completely, resulting in a string with no more valid transformations that can be applied. # Input - The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. - Each of the next t lines contains a string s (1 ≤ |s| ≤ 100), representing a possible scrambled recipe string. # Output - For each test case, output \\"YES\\" if the string can be fully transformed such that no further transformations are possible. Otherwise, output \\"NO\\". # Example ``` Input: 4 momox mxm xmm momomoxx Output: NO YES YES NO ``` # Explanation - In the first case, \\"momox\\", the substrings \\"mo\\" or \\"ox\\" cannot transform further, hence output \\"NO\\". - In the second case, \\"mxm\\", \\"x\\" can transform \\"m\\", resulting in no valid transformation rules left, hence \\"YES\\". - In the third case, \\"xmm\\", \\"x\\" transforms \\"mm\\" resulting in no valid transformations left, hence \\"YES\\". - In the fourth case, \\"momomoxx\\", there remain transformation possibilities (\\"mo\\" becomes \\"momo\\"), hence \\"NO\\".","solution":"def can_transform_completely(s): Checks if the string s can be fully transformed such that no further transformations are possible. if \'mo\' in s or \'ox\' in s: return False return True def check_recipes(test_cases): results = [] for s in test_cases: if can_transform_completely(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given two strings of lowercase Latin letters, s and t. The common subsequence of s and t is defined as a sequence that appears in both strings in the same order, but not necessarily consecutively. You are allowed to remove some (possibly zero) characters from s and some (possibly zero) characters from t. Your goal is to make s and t permutations of one another while ensuring that the length of the common subsequence remains the same after the operations. Determine if it is possible to make the transformed s and t permutations of each other and if it is, print \\"YES\\". Otherwise, print \\"NO\\". Each test case is given in two lines. The first line contains the string s (1 le |s| le 100), and the second line contains the string t (1 le |t| le 100). Note that you have to answer q independent queries. The first line of input contains q (1 le q le 100) – the number of queries. Each of the following 2q lines describes the queries. Output \\"YES\\" if it is possible to make s equal to t after some operations and maintaining the length of the common subsequence, otherwise print \\"NO\\". # Input - The first line contains a single integer q (1 le q le 100) – the number of queries. - For each query, there are two subsequent lines. The first line contains the string s (1 le |s| le 100, the second line contains the string t (1 le |t| le 100). # Output - For each query, print \\"YES\\" if it\'s possible to transform s and t as described. Otherwise, print \\"NO\\". # Example Input ``` 3 hello ollhe abc bca abcd efgh ``` Output ``` YES YES NO ```","solution":"from collections import Counter def can_transform_to_permutations(q, queries): results = [] for i in range(q): s = queries[2*i] t = queries[2*i + 1] s_counter = Counter(s) t_counter = Counter(t) if s_counter == t_counter: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice wants to organize an event for her friends. She has a total of k friends and she needs to buy them each a ticket for the event. There are n different ticket vendors and each will sell Alice tickets at different prices. Alice can choose one vendor and purchase a ticket for each of her friends from that vendor. She aims to minimize the total cost of buying tickets for all her friends. Each vendor has a specific amount of tickets available and a price per ticket. Alice can only buy from one vendor, and she needs to ensure that the chosen vendor has enough tickets for all her friends. Given a list of vendors and their ticket prices along with the number of tickets available with each vendor, find out the minimum total cost for Alice to buy tickets for all her friends if it\'s possible to buy them at all. The first input line contains an integer t (1 leq t leq 10^4), the number of test cases. For each test case: - The first line contains two integers n and k (1 leq n leq 1000, 1 leq k leq 10^5) — the number of vendors and the number of friends. - Each of the next n lines contains two integers a_i and b_i (1 leq a_i leq 10^9, 1 leq b_i leq 10^5) —- the price per ticket and the number of tickets available with the i-th vendor. For each test case, output the minimum total cost to buy the tickets for all friends if possible. If it is not possible to buy tickets for all friends from any vendor, output `-1`. # Example Input: ``` 2 3 5 20 10 15 3 25 6 2 8 30 7 50 9 ``` Output: ``` 100 400 ```","solution":"def min_ticket_cost(t, test_cases): results = [] for case in test_cases: n, k = case[\'n\'], case[\'k\'] vendors = case[\'vendors\'] min_cost = float(\'inf\') possible = False for price, available in vendors: if available >= k: min_cost = min(min_cost, price * k) possible = True if possible: results.append(min_cost) else: results.append(-1) return results"},{"question":"Given an array of integers, you need to perform a series of operations to sort the array in non-decreasing order. You are only allowed to use one specific type of operation: choose any subarray (contiguous segment) of the array and reverse it. # Input - The first line contains an integer n ( 1 leq n leq 100 ) - the size of the array. - The second line contains n integers a_i ( 1 leq a_i leq 10^3 ) - the elements of the array. # Output Output a single integer - the minimum number of operations required to sort the array. # Example Input ``` 5 3 1 2 4 5 ``` Output ``` 1 ``` Explanation By reversing the subarray [3, 1, 2], we can get [2, 1, 3, 4, 5], which is not sorted yet; further reversing the subarray [2, 1] results in [1, 2, 3, 4, 5], so only one operation is needed.","solution":"def min_operations_to_sort(n, array): Given an array, determine the minimum number of subarray reversals required to sort the array in non-decreasing order. sorted_array = sorted(array) if array == sorted_array: return 0 for i in range(n): for j in range(i + 1, n): # Create a new array by reversing the subarray array[i:j+1] new_array = array[:i] + array[i:j+1][::-1] + array[j+1:] if new_array == sorted_array: return 1 return 1 # one reversal is enough as per given problem constraints"},{"question":"Given an array of integers, Bob wants to minimize the sum of the elements in the array after performing zero or more operations. In one operation, Bob can choose two elements in the array, say a and b, and set either a to the value of b or b to the value of a. Bob cannot choose the same element for both operations in a single turn. Bob needs your help to find the minimum possible sum of the elements in the array after an optimal sequence of operations, if allowed. The first line contains an integer n (1 ≤ n ≤ 100000), the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the elements of the array. Output a single integer, the minimum possible sum of the array elements Bob can achieve. For example, if the input is: ``` 5 5 7 10 3 6 ``` The optimal sequence of operations can make the array [3, 3, 3, 3, 3], resulting in a minimum sum of 15. If the input is: ``` 3 1 2 3 ``` Bob can make the array [1, 1, 1], resulting in a minimum possible sum of 3. Note: Ensure the solution is efficient to handle large input size within the constraints.","solution":"def minimize_sum(n, arr): Returns the minimum possible sum of the array elements after performing zero or more operations. Parameters: n (int): The number of elements in the array. arr (list of int): The list of integers representing the elements of the array. Returns: int: The minimum possible sum of the array elements. min_val = min(arr) return min_val * n"},{"question":"You are given a 2D grid with n rows and m columns. Each cell of the grid contains an integer value, which can be either 1 or -1. Starting from a specified cell of the grid, you perform a series of moves. In each move, you are only allowed to move to an adjacent cell (up, down, left, or right) which has not been visited before. Your goal is to maximize the sum of the values of the cells you visit. The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. The next n lines contain m integers each, which represent the grid. Each integer is either 1 or -1. The last line contains two space-separated integers sr and sc (1 ≤ sr ≤ n, 1 ≤ sc ≤ m) — the starting row and column. Print the maximum sum of values you can collect starting from the cell (sr, sc). # Sample Input: ``` 3 3 1 -1 1 1 1 -1 -1 1 1 2 2 ``` # Sample Output: ``` 4 ``` # Note: In this example, starting from the cell (2, 2) with value 1, the optimal moves would gather the cells (2, 2), (2, 1), (1, 1), (1, 2), and (3, 2) resulting in a total sum of 1 + 1 + 1 - 1 + 1 + 1 = 4.","solution":"def max_sum(grid, start_row, start_col): n = len(grid) m = len(grid[0]) max_sum_result = float(\'-inf\') visited = [[False] * m for _ in range(n)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def dfs(x, y, current_sum): nonlocal max_sum_result # Updating max result sum found so far max_sum_result = max(max_sum_result, current_sum) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: visited[nx][ny] = True dfs(nx, ny, current_sum + grid[nx][ny]) visited[nx][ny] = False start_row -= 1 start_col -= 1 visited[start_row][start_col] = True dfs(start_row, start_col, grid[start_row][start_col]) return max_sum_result"},{"question":"A company named Scifu is automating its order processing system with drone delivery. Each drone can carry one package at a time. The warehouse has n packages queued for delivery, and each package needs to be delivered within a certain time window to ensure customer satisfaction. Each package i has a delivery time window given by [a_i, b_i], where a_i is the earliest time the delivery can start and b_i is the latest time the delivery can be completed. It takes exactly one unit of time for a drone to deliver a package, meaning the package must be picked up and delivered at some time t such that a_i leq t leq b_i. The drones are launched one after another, and they can\'t wait idly; each drone must start a new delivery as soon as the previous one finishes. Given the time windows for each package, determine the maximum number of packages that can be delivered within their respective time windows. You need to output this number and the list of indices of those packages in the order they will be delivered. The first line of input contains an integer n (1 leq n leq 100,000), the number of packages. The next n lines each contain two integers a_i and b_i (0 leq a_i leq b_i leq 10^9), representing the earliest and latest delivery times for the package i. The first line of output should contain a single integer, the maximum number of packages that can be delivered. The second line should contain the indices (1-based) of the packages that can be delivered in the order they will be dispatched. **Example:** Input: ``` 5 1 4 2 6 8 9 3 5 5 7 ``` Output: ``` 3 1 4 5 ``` In this example, the optimal delivery schedule allows for a maximum of 3 packages (1, 4, and 5) to be delivered within their respective time windows. The indices in the output are listed in the order they will be dispatched.","solution":"def max_packages_delivered(n, time_windows): # Sort packages by their earliest delivery time first, and then by their latest delivery time time_windows.sort(key=lambda x: (x[1], x[0])) delivered_count = 0 last_delivery_time = -1 delivered_indices = [] for i, (a, b) in enumerate(time_windows): if a > last_delivery_time: delivered_count += 1 last_delivery_time = b delivered_indices.append(i + 1) return delivered_count, delivered_indices"},{"question":"Valeriy is playing yet another game with his friends. He has a row of n houses, each represented by an integer denoting the amount of money in it. His goal is to collect the maximum amount of money following these rules: 1. He can collect money from a house, but then he cannot collect money from the next house (i.e., if he takes money from house i, he cannot take money from house i+1). 2. He can start collecting from any house and stop at any house. Help Valeriy determine the maximum amount of money he can collect from these houses. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of houses. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^4) — the amount of money in each house. Output the maximum amount of money Valeriy can collect following the rules. **Example:** Input: ``` 4 3 2 5 10 ``` Output: ``` 13 ``` **Explanation:** Valeriy can collect money from house 1 (3) and house 3 (10), which gives a total of 13. Alternatively, he can collect from house 3 (10) and house 2 (5), but this will only give 12. Thus, the maximum possible sum is 13.","solution":"def max_money(n, houses): if n == 0: return 0 if n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + houses[i]) return dp[-1]"},{"question":"Ayesha is planning a mountain climbing trip with her friends. They have a set of n different heights to climb, each given by an integer in a list h. In order to make the trip interesting, they want to climb the heights in a specific order - each height they climb should be strictly greater than the previous height they climbed. To maximize their adventure, they want to find out the longest possible sequence of heights they can climb in strictly increasing order. Write a program that finds the length of the longest strictly increasing subsequence of heights they can climb. The first line contains an integer n (1 ≤ n ≤ 1000), the number of heights. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10000), the heights of the mountains in the order they are given. Output a single integer, the length of the longest strictly increasing subsequence of heights. Sample Input: 6 4 2 5 3 7 8 Sample Output: 4 Explanation: One of the longest strictly increasing subsequences is [4, 5, 7, 8], which has a length of 4. There is no longer strictly increasing subsequence possible.","solution":"def longest_increasing_subsequence(heights): Returns the length of the longest strictly increasing subsequence in the given list of heights. Args: heights (list of int): The list of heights Returns: int: length of the longest strictly increasing subsequence if not heights: return 0 n = len(heights) dp = [1] * n for i in range(1, n): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a matrix `A` of size `n x m` filled with non-negative integers, where `n` is the number of rows and `m` is the number of columns. You need to update the matrix in a special way. The update process proceeds as follows: 1. For each cell in the matrix that contains a zero, set all elements in the corresponding row and column to zero, excluding any cells that originally contained non-zero values. 2. After performing this operation for all cells, print the updated matrix. **Input Format:** - The first line contains two integers `n` and `m` denoting the number of rows and columns of the matrix respectively (1 ≤ n, m ≤ 300). - Each of the next `n` lines contains `m` integers, representing the matrix `A` where `0 ≤ A[i][j] ≤ 10^4`. **Output Format:** - Print the updated matrix `A`, where each of the `n` lines contains `m` integers. **Example:** ``` Input: 3 3 1 2 3 4 0 6 7 8 9 Output: 1 0 3 0 0 0 7 0 9 ``` Explanation: In the given example, the cell (2, 2) contains a zero. So, all elements in the 2nd row and 2nd column are set to zero, resulting in the updated matrix.","solution":"def update_matrix(matrix): Update matrix based on zero cells affecting their rows and columns. n = len(matrix) m = len(matrix[0]) rows_to_zero = set() cols_to_zero = set() # Find all the rows and columns that need to be zeroed for i in range(n): for j in range(m): if matrix[i][j] == 0: rows_to_zero.add(i) cols_to_zero.add(j) # Set the identified rows to zero for i in rows_to_zero: for j in range(m): matrix[i][j] = 0 # Set the identified columns to zero for j in cols_to_zero: for i in range(n): matrix[i][j] = 0 return matrix"},{"question":"Polycarp has just received a new set of verified tasks from his manager. Each task falls into one of several predefined types. Polycarp wants to maximize his efficiency by grouping the tasks based on these types. Polycarp aims to find the maximum number of groups he can form such that each group contains at least one task from each type. The first line of the input contains two integers n and k (1 le n le 200, 1 le k le 100) — the number of tasks and the number of different types of tasks, respectively. The second line of the input contains n integers t_1, t_2, dots, t_n (1 le t_i le k for all 1 le i le n) — the task types of each of the tasks. Print a single integer — the maximum number of groups Polycarp can form such that each group contains at least one task from each type. **Example:** ``` Input: 8 3 1 2 2 3 1 3 2 1 Output: 2 ``` **Explanation:** In this example, there are 8 tasks and 3 different types of tasks. The input array of task types is [1, 2, 2, 3, 1, 3, 2, 1]. Polycarp can form two groups: [1, 2, 3] and [1, 2, 3], each containing at least one task of each type (1, 2, and 3). So, the maximum number of such groups is 2.","solution":"def max_task_groups(n, k, task_types): Calculate the maximum number of groups that can be formed such that each group contains at least one task from each type. Parameters: n (int): The number of tasks. k (int): The number of different types of tasks. task_types (List[int]): The task types of each of the tasks. Returns: int: The maximum number of groups. from collections import Counter # Count the occurrences of each task type task_count = Counter(task_types) # Find the minimum count of any task type min_count = min(task_count[type_id] for type_id in range(1, k + 1)) return min_count"},{"question":"Devu loves to play games in his free time. Recently, he came across an interesting puzzle game where he is given an array of integers. In this game, he has to form the maximum sum possible by selecting elements from a given array such that no two selected elements are adjacent to each other. Devu needs your help to solve this puzzle. Given an array of integers, determine the maximum sum of non-adjacent elements. The first line contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output a single integer — the maximum sum of non-adjacent elements. Example: Input: 5 3 2 5 10 7 Output: 15 Input: 4 3 2 7 10 Output: 13","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of non-adjacent elements from the list of integers. if not nums: return 0 n = len(nums) if n == 1: return nums[0] max_excl = 0 max_incl = nums[0] for i in range(1, n): # Calculate the maximum sum excluding the current element new_excl = max(max_incl, max_excl) # Update the maximum sum including the current element max_incl = max_excl + nums[i] # Update the maximum sum excluding the current element max_excl = new_excl return max(max_incl, max_excl)"},{"question":"You are given an undirected, connected graph with `n` nodes and `m` edges. The nodes are numbered from `1` to `n`. Each edge has a weight, which is a positive integer. Your task is to determine the minimum number of edges to remove from the graph so that the remaining graph has no cycles (i.e., it becomes a tree). If there are multiple ways to achieve this, find the way that preserves the maximum possible sum of weights of the remaining edges. The first line of input contains two integers `n` and `m` (2 ≤ n ≤ 1000, n-1 ≤ m ≤ 10000) — the number of nodes and edges in the graph. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — the endpoints of the edge and the weight of the edge. Output a single integer — the maximum possible sum of weights of the remaining edges after removing the minimum number of edges to eliminate all cycles in the graph. # Example **Input** ``` 6 9 1 2 4 1 3 3 2 3 2 2 4 5 3 4 7 3 5 9 4 5 6 4 6 8 5 6 1 ``` **Output** ``` 33 ``` # Explanation The input graph contains 9 edges and the task is to remove the minimum number of edges to break all cycles while maximizing the total weight of the remaining edges. One such solution can be to remove edges (2,3) with weight 2, and (5,6) with weight 1. The remaining graph would contain edges with the total weight of 33, which is the maximum possible sum for a tree derived from this graph.","solution":"def find(parent, i): A utility function to find the subset of an element i if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): A utility function to do union of two subsets xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def max_spanning_tree(n, edges): Function to find the maximum spanning tree using Kruskal\'s algorithm # Sort edges in decreasing order based on weight edges = sorted(edges, key=lambda item: item[2], reverse=True) parent = [] rank = [] for node in range(n+1): parent.append(node) rank.append(0) max_weight = 0 remaining_edges = 0 # Iterate through sorted edges for edge in edges: u, v, w = edge x = find(parent, u) y = find(parent, v) # If including this edge does not cause a cycle if x != y: max_weight += w remaining_edges += 1 union(parent, rank, x, y) # If we have n-1 edges in the tree, break the loop if remaining_edges == n-1: break return max_weight def solve(n, m, edge_list): return max_spanning_tree(n, edge_list)"},{"question":"You are given an array of integers where each integer represents the height of a tower. You can merge two adjacent towers into one tower. The height of the new tower will be the height of the taller of the two towers being merged. The cost of merging two towers is the absolute difference in height between the two towers. Your task is to determine the minimum cost required to merge all the towers into one tower. The first line contains a single integer t (1 le t le 1000) — the number of test cases. Each of the following lines describes a test case in the following format: The first line contains a single integer n (1 le n le 1000) — the number of towers. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^5) — the heights of the towers. Output the minimum cost required to merge all the towers into one tower for each test case. # Example Input ``` 2 4 4 3 2 5 3 2 1 3 ``` Output ``` 4 2 ``` # Explanation In the first test case, you can merge the towers as follows with the minimum cost: - Merge tower 2 and 3 with cost |3-2| = 1, height of the new tower is 3. The sequence becomes [4, 3, 5]. - Merge tower 1 and 2 with cost |4-3| = 1, height of the new tower is 4. The sequence becomes [4, 5]. - Merge tower 1 and 2 with cost |4-5| = 1, height of the new tower is 5. The sequence becomes [5]. - Total cost = 1 + 1 + 2 = 4. In the second test case, you can merge the towers as follows with the minimum cost: - Merge tower 1 and 2 with cost |2-1| = 1, height of the new tower is 2. The sequence becomes [2, 3]. - Merge tower 1 and 2 with cost |2-3| = 1, height of the new tower is 3. The sequence becomes [3]. - Total cost = 1 + 1 = 2.","solution":"def merge_towers(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] total_cost = 0 while len(heights) > 1: min_cost = float(\'inf\') merge_index = 0 for j in range(len(heights) - 1): cost = abs(heights[j] - heights[j + 1]) if cost < min_cost: min_cost = cost merge_index = j total_cost += min_cost new_height = max(heights[merge_index], heights[merge_index + 1]) heights = heights[:merge_index] + [new_height] + heights[merge_index + 2:] results.append(total_cost) return results"},{"question":"Paul has a collection of weighted boxes and he wants to arrange them in a single row along a grid of cells. Each box has a distinct weight and each weight is a positive integer. His goal is to create a row where the total sum of weights of the boxes in that row respects his constraints. You are given two constraints: the minimum total weight and the maximum total weight that the row must have. Determine if it is possible to select some of the boxes to form such a row where the sum of weights is within the given range. If it is possible, output any valid arrangement of the selected boxes. Otherwise, print \\"NO\\". The first line contains three integers n, W_min, and W_max (1 ≤ n ≤ 1000, 1 ≤ W_min ≤ W_max ≤ 10^6) — the number of boxes Paul has, the minimum total weight of the row, and the maximum total weight of the row. The second line contains n distinct integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the boxes Paul has. Output \\"NO\\" (without quotes) if there is no possible way to select a subset of boxes such that their total weight is within the given range. Otherwise, output the weights of the subset of selected boxes in any order such that their total weight is between W_min and W_max, inclusive. Example: Input ``` 5 10 20 3 8 12 5 15 ``` Output ``` 8 12 ``` Explanation: In the given example, one possible way to create a valid row is to select the boxes with weights 8 and 12. The total weight is 20, which is within the range of 10 to 20. Other valid solutions could also be from the provided list. To solve the problem, you may consider using techniques such as dynamic programming or backtracking to find a subset of weights that meets the given criteria.","solution":"def find_subset_weights(n, W_min, W_max, weights): def subset_sum(index, current_sum, current_subset): if W_min <= current_sum <= W_max: return current_subset if index == n or current_sum > W_max: return None # Include current weight with_current = subset_sum(index + 1, current_sum + weights[index], current_subset + [weights[index]]) if with_current is not None: return with_current # Exclude current weight return subset_sum(index + 1, current_sum, current_subset) result = subset_sum(0, 0, []) return result if result else \\"NO\\" # Example usage: # n = 5 # W_min = 10 # W_max = 20 # weights = [3, 8, 12, 5, 15] # print(find_subset_weights(n, W_min, W_max, weights))"},{"question":"A theater sells tickets for performances on specific dates. Each ticket has a unique identifier and specifies the date of the performance. The management wants to know how many performances have completely sold out. The number of tickets available for each performance is fixed and known beforehand. Write a program to help the management determine the number of sold-out performances. The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100), where n is the total number of tickets and m is the total number of performances. The next line contains m space-separated integers t1, t2, ..., tm (1 ≤ ti ≤ 100), where ti is the number of tickets available for the i-th performance. Each of the next n lines contains two integers id and di (1 ≤ id ≤ n, 1 ≤ di ≤ m), where id is the unique identifier of the ticket and di is the date (performance number) for which the ticket has been sold. Output a single integer representing the number of sold-out performances. Example: Input: 8 3 3 3 2 1 1 2 1 3 1 4 2 5 2 6 2 7 3 8 3 Output: 2 Explanation: The first performance had 3 tickets available and all 3 have been sold (tickets 1, 2, and 3). The second performance had 3 tickets available and all 3 have been sold (tickets 4, 5, and 6). The third performance had 2 tickets available and both have been sold (tickets 7 and 8). So, there are 2 sold-out performances.","solution":"def sold_out_performances(n, m, tickets_available, sales): Determines the number of sold-out performances based on ticket sales. :param n: int, total number of tickets :param m: int, total number of performances :param tickets_available: list of int, number of tickets available for each performance :param sales: list of tuples, each tuple contains two integers (id, di) where id is the unique identifier of the ticket and di is the performance number for which the ticket has been sold. :return: int, number of sold-out performances # Create a list to count sales for each performance tickets_sold = [0] * m # Tally the tickets sold for each performance for sale in sales: _, performance_num = sale tickets_sold[performance_num - 1] += 1 # Count the number of sold-out performances sold_out_count = 0 for i in range(m): if tickets_sold[i] == tickets_available[i]: sold_out_count += 1 return sold_out_count"},{"question":"Priya and Rohan are playing a game with prime numbers. The game involves finding certain prime numbers within specific ranges. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Priya wants to find prime numbers between two given numbers frequently, and Rohan needs to assist her. Your task is to help Rohan by creating a function that, given two integers l and r, finds and returns all the prime numbers between l and r (inclusive). The first line of input contains one number T — the number of queries (1 ≤ T ≤ 10^5). Each of the following T lines contains two integers l and r (1 ≤ l ≤ r ≤ 10^6). Output T lines. For each query, output the count of prime numbers between l and r (inclusive). # Example **Input:** ``` 3 2 10 11 20 30 50 ``` **Output:** ``` 4 4 5 ``` # Explanation For the first query (2, 10), the prime numbers are 2, 3, 5, and 7, hence the output is 4. For the second query (11, 20), the prime numbers are 11, 13, 17, and 19, hence the output is 4. For the third query (30, 50), the prime numbers are 31, 37, 41, 43, and 47, hence the output is 5.","solution":"def sieve(max_num): Create a list to determine prime numbers up to max_num using the Sieve of Eratosthenes. is_prime = [True] * (max_num + 1) is_prime[0] = is_prime[1] = False for start in range(2, int(max_num**0.5) + 1): if is_prime[start]: for multiple in range(start * start, max_num + 1, start): is_prime[multiple] = False primes = [] for num in range(max_num + 1): if is_prime[num]: primes.append(num) return primes def count_primes_in_range(l, r, primes): Given a range [l, r] and a list of primes, count how many primes are within the range. count = 0 for prime in primes: if prime > r: break if prime >= l: count += 1 return count def find_prime_counts(queries): max_limit = 10**6 primes = sieve(max_limit) results = [] for l, r in queries: results.append(count_primes_in_range(l, r, primes)) return results"},{"question":"You are given a binary tree with n nodes, rooted at node 1. Each node has a unique integer value assigned to it. Your task is to determine the sum of all root-to-leaf paths where each node in the path sums to a prime number. A leaf is defined as a node with no children. A root-to-leaf path is the sequence of nodes starting at the root and ending at a leaf. The sum of a root-to-leaf path is the sum of the values of all nodes in the path. You need to compute the total sum of such paths where the sum of the individual nodes in each path is a prime number. You may find it useful to precompute prime numbers up to a certain limit. The first line contains an integer n (1 ≤ n ≤ 1000), the number of nodes in the tree. The second line contains n space-separated integers, where the i-th integer is the value of the i-th node. The following n-1 lines each contain two integers u and v, indicating an edge between node u and node v. Print a single integer, the sum of all root-to-leaf paths where the sum of each path is a prime number. # Example Input ```plaintext 5 2 3 6 5 7 1 2 1 3 3 4 3 5 ``` Output ```plaintext 10 ``` In this example, the prime-sum paths are: - Path 1 → 2 with sum 2+3 = 5 (prime) - Path 1 → 3 with sum 2+6 = 8 (not prime) - Path 1 → 3 → 4 with sum 2+6+5 = 13 (prime) - Path 1 → 3 → 5 with sum 2+6+7 = 15 (not prime) Thus, the output is the sum of paths 1 → 2 and 1 → 3 → 4, which is `5 + 13 = 18`","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def build_tree(n): from collections import defaultdict tree = defaultdict(list) for _ in range(n - 1): u, v = map(int, input().split()) tree[u].append(v) tree[v].append(u) return tree def find_leaf_paths(tree, node_values, root, parent): paths = [] def dfs(node, path_sum, path): path_sum += node_values[node - 1] path.append(node_values[node - 1]) is_leaf = True for child in tree[node]: if child != parent[node]: is_leaf = False parent[child] = node dfs(child, path_sum, path) if is_leaf and is_prime(path_sum): paths.append(path[:]) path.pop() parent = {root: None} dfs(root, 0, []) return paths def sum_prime_paths(paths): total_sum = 0 for path in paths: total_sum += sum(path) return total_sum def main(): n = int(input()) node_values = list(map(int, input().split())) tree = build_tree(n) root = 1 paths = find_leaf_paths(tree, node_values, root, {}) result = sum_prime_paths(paths) print(result) if __name__ == \\"__main__\\": main()"},{"question":"John is playing a board game with his friends. The game board is a grid of size m times m. Each cell in the grid is represented by a pair of integers (r, c) where 1 leq r, c leq m. During the game, John can move from one cell to another in a single step if the Manhattan distance between the two cells is exactly equal to 1. The Manhattan distance between two cells (r_1, c_1) and (r_2, c_2) is defined as |r_1 - r_2| + |c_1 - c_2|. Initially, John starts at the cell (1, 1) and his goal is to reach the cell (m, m). However, some cells in the grid are blocked and cannot be stepped on. Help John determine whether he can reach the cell (m, m) from the cell (1, 1) by making legal moves. The first line contains two integers m and n (1 ≤ m ≤ 1000, 0 ≤ n ≤ 5000) — the size of the grid and the number of blocked cells. Each of the next n lines contains two integers r_i and c_i (1 ≤ r_i, c_i ≤ m) indicating that the cell (r_i, c_i) is blocked. If John can reach the cell (m, m), print \\"YES\\", otherwise print \\"NO\\". In the first example, all the necessary cells are open, so John can move from (1, 1) to (m, m). In the second example, one of the necessary cells is blocked, so John cannot reach (m, m).","solution":"def can_reach_goal(m, blocked): Determine if John can reach cell (m, m) from (1, 1) on a grid of size m x m with blocked cells. Parameters: - m: int, the size of the grid - blocked: list of tuples, each tuple representing a blocked cell (r, c) Returns: - \\"YES\\" if John can reach the goal, otherwise \\"NO\\". from collections import deque # Convert blocked list to a set for O(1) lookups blocked_set = set(blocked) # Breadth-First Search (BFS) initialization queue = deque([(1, 1)]) visited = set((1, 1)) # Perform BFS while queue: r, c = queue.popleft() # Check if we\'ve reached the goal if (r, c) == (m, m): return \\"YES\\" # Explore neighbors for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if 1 <= nr <= m and 1 <= nc <= m and (nr, nc) not in visited and (nr, nc) not in blocked_set: queue.append((nr, nc)) visited.add((nr, nc)) # If we exit the loop without having reached (m, m) return \\"NO\\""},{"question":"John loves collecting rare stones and has a bag that can hold up to a certain weight W. He has n stones, each with a specific weight and value. John wants to maximize the total value of the stones he can fit into the bag without exceeding the weight limit W. However, due to some mystical properties of the stones, he can only pick one of each type; duplicates are not allowed. Help John determine the maximum value he can achieve with the given weight constraint. The first line of the input contains two integers W (1 ≤ W ≤ 1000) — the maximum weight the bag can hold, and n (1 ≤ n ≤ 100) — the number of stones. The next n lines each contain a pair of integers wi (1 ≤ wi ≤ 100) and vi (1 ≤ vi ≤ 1000) — the weight and value of the i-th stone. Output a single integer — the maximum value of stones that John can carry in his bag. Input: ``` 5 3 2 3 3 4 4 5 ``` Output: ``` 7 ``` In this example, John can take the stone with weight 2 and value 3, and the stone with weight 3 and value 4, achieving a total value of 7 without exceeding the weight limit of 5.","solution":"def knapsack(W, n, items): Returns the maximum value of stones that can fit into the bag without exceeding the weight limit W. Parameters: W (int): The maximum weight the bag can hold. n (int): The number of stones. items (list of tuples): A list where each tuple contains two integers representing the weight and value of each stone. Returns: int: The maximum value that can be achieved without exceeding the weight limit. # Initialize dp array to store the maximum value for each weight limit from 0 to W dp = [0] * (W + 1) # Fill the dp array for i in range(n): wi, vi = items[i] # Traverse backwards to ensure we do not reuse the same item for w in range(W, wi - 1, -1): dp[w] = max(dp[w], dp[w - wi] + vi) return dp[W]"},{"question":"Louis loves playing with dominoes. He owns a set of domino pieces, each piece represented by two numbers a and b (0 ≤ a, b ≤ 6), which are called the endpoints of the domino. Two domino pieces can be connected if they share an endpoint (for example, piece (1, 2) can be connected to piece (2, 3)). Louis wants to arrange his domino pieces in such a way that all pieces form a connected chain. This means that every two consecutive pieces in the sequence must share a common endpoint, and each domino piece can be used at most once. Write a program that will determine whether it\'s possible to arrange all the domino pieces in a single connected chain. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of domino pieces. Each of the following n lines contains two integers a and b (0 ≤ a, b ≤ 6) — the endpoints of each domino piece. Output Print \\"YES\\" if it is possible to arrange all domino pieces to form a single connected chain. Otherwise, print \\"NO\\". Examples Input 3 1 2 2 3 3 1 Output YES Input 3 1 2 2 3 4 5 Output NO Note: In the first example, Louis can arrange the pieces in the order (1, 2), (2, 3), (3, 1). In the second example, it\'s not possible to connect the piece (4, 5) with any other piece.","solution":"def can_form_chain(n, dominoes): from collections import defaultdict, deque # Build the adjacency list for the dominoes adjacency_list = defaultdict(list) endpoints_count = defaultdict(int) for a, b in dominoes: adjacency_list[a].append(b) adjacency_list[b].append(a) endpoints_count[a] += 1 endpoints_count[b] += 1 # Checking for the Eulerian path/circuit properties start_point = None end_point = None odd_count = 0 for end_point, count in endpoints_count.items(): if count % 2 != 0: odd_count += 1 if start_point is None: start_point = end_point elif end_point is None: end_point = end_point # If there are more than 2 points with odd count, it\'s not possible to form a chain if odd_count > 2: return \\"NO\\" # Perform BFS/DFS to check if all dominoes are in a single connected component visited = set() queue = deque([list(adjacency_list.keys())[0]]) while queue: current = queue.popleft() if current not in visited: visited.add(current) for neighbor in adjacency_list[current]: if neighbor not in visited: queue.append(neighbor) if len(visited) == len(adjacency_list): return \\"YES\\" else: return \\"NO\\""},{"question":"Kiran, an avid gardener, has a garden with n flowerbeds arranged in a straight line. Each flowerbed has one type of flower growing in it. Kiran knows that bees are attracted to certain flowers, and she wants to minimize their presence in the garden while keeping her favorite flowers. Specifically, she wants to rearrange the flowers in such a way that the maximum number of consecutive flowerbeds containing her favorite flowers is minimized. Kiran can select a segment of consecutive flowerbeds (of length at least 1) and rearrange the flowers within that segment in any order. She wants to perform this operation exactly once. Write a program to determine the minimum value of the maximum number of consecutive flowerbeds with her favorite flowers, after performing the optimal rearrangement. The first input line contains two integers n and k (1 ≤ k ≤ n ≤ 3 * 10^5) — the number of flowerbeds and the type of Kiran\'s favorite flower. The second input line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), where ai denotes the type of flower in the i-th flowerbed. The only output line should print a single integer — the minimum possible maximum number of consecutive flowerbeds containing Kiran\'s favorite flower after the optimal single rearrangement. **Example:** Input: ``` 7 3 1 3 3 1 3 2 3 ``` Output: ``` 2 ``` Explanation: Given the input, the optimal rearrangement is [1, 3, 1, 3, 2, 3, 3], where the maximum number of consecutive Kiran\'s favorite flowers (flower type 3) is minimized to 2.","solution":"def minimize_max_consecutive(n, k, flowers): Returns the minimum possible maximum number of consecutive flowerbeds containing Kiran\'s favorite flower after the optimal single rearrangement. :param n: int - number of flowerbeds :param k: int - type of Kiran\'s favorite flower :param flowers: List[int] - list of flower types :return: int - minimum possible maximum number of consecutive flowerbeds containing favorite flower def count_segments(flower_list, favorite_flower): count = 0 max_count = 0 segment_sizes = [] for flower in flower_list: if flower == favorite_flower: count += 1 else: if count > 0: segment_sizes.append(count) max_count = max(max_count, count) count = 0 if count > 0: segment_sizes.append(count) max_count = max(max_count, count) return max_count, segment_sizes max_count, segment_sizes = count_segments(flowers, k) if not segment_sizes: return 0 best_change = max_count for i in range(1, len(segment_sizes)): combined_segments = segment_sizes[i-1] + segment_sizes[i] + 1 best_change = min(best_change, max(max_count, combined_segments)) return best_change"},{"question":"In a distant kingdom, there\'s a unique tradition involving magical creatures and enchanted fruits. Every year, villagers prepare an impressive feast for the mythical creatures residing in the enchanted forest. This year, the villagers have an ample supply of different types of magical fruits, and they must decide how to distribute them among their guests. The villagers have an array `f` of length `m`, where each element represents the number of fruits of each type available. They also have a list of requirements of length `n`, where each element is a pair `(a, b)`, representing that a specific creature needs at least `a` fruits of type `b`. Your task is to determine if it\'s possible to meet all the creatures\' requirements. Input: - The first line contains two integers `m` and `n` (`1 ≤ m, n ≤ 100`), indicating the number of different fruit types and the number of creatures, respectively. - The second line contains `m` integers, the number of fruits of each type. - The following `n` lines contain two integers `a` and `b` (`1 ≤ a ≤ 100`, `1 ≤ b ≤ m`), representing each creature\'s requirement. Output: - Print \\"Yes\\" if it is possible to satisfy all the creatures\' requirements. Otherwise, print \\"No\\". Example: Input: 5 3 3 4 2 1 1 2 1 3 2 1 3 Output: Yes In this example, the array `f` is `[3, 4, 2, 1, 1]`, indicating 3 fruits of type 1, 4 fruits of type 2, 2 fruits of type 3, etc. The creatures\' requirements can all be met with the available fruits, thus the output is \\"Yes\\".","solution":"def can_meet_requirements(m, n, fruits, requirements): Determines if it is possible to meet all the creatures\' requirements. :param m: Number of different fruit types :param n: Number of creatures :param fruits: List of available number of fruits for each type :param requirements: List of tuples where each tuple is (a, b) :return: \\"Yes\\" if all requirements can be met, otherwise \\"No\\" for a, b in requirements: if fruits[b - 1] < a: return \\"No\\" fruits[b - 1] -= a return \\"Yes\\""},{"question":"Alex has a string s of length n consisting of lowercase English letters. He can perform the following operation any number of times: choose a substring of s and move it to the beginning of the string. A substring is defined as a contiguous sequence of characters within the string. Alex wants to turn the string s into its lexicographically smallest possible form by performing the above operation. Help Alex determine the minimum lexicographical form of the string after applying the operation optimally. # Input The first line contains a single integer n (1 le n le 5 cdot 10^5) — the length of the string s. The second line contains the string s of length n consisting of lowercase English letters. # Output Print the lexicographically smallest string that Alex can obtain after performing the operation any number of times. # Example Input ``` 7 bacdafb ``` Output ``` aabbcdf ``` # Note In the example above, Alex can choose the substrings in such a way: 1. Move substring \\"a\\" from \\"bacdafb\\" to get \\"abacdfb\\". 2. Move substring \\"a\\" from \\"abacdfb\\" to get \\"aabcfdb\\". 3. The substring \\"bcfdb\\" remains unchanged, and since \\"aabcfdb\\" is already the lexicographically smallest possibility, no more operations are required.","solution":"def lexicographically_smallest_string(n, s): This function takes an integer n and a string s of length n and returns the lexicographically smallest string obtainable by moving any substring of s to the beginning any number of times. min_char = min(s) smallest_string = \'\'.join(sorted(s)) return smallest_string"},{"question":"Nancy loves arranging her books in a unique way. She has n books, and each book has a difficulty level associated with it. One day, she decides to rearrange her books such that the sum of difficulties in every contiguous subarray of the books has a unique value. Help Nancy determine whether it is possible to rearrange the books to meet her criteria. The first input line contains a single integer, n (1 ≤ n ≤ 10^5) — the number of books. The second line contains n integers d1, d2, ..., dn (|di| ≤ 10^9) — the difficulty levels of the books. Output \\"YES\\" if it is possible to rearrange Nancy\'s books such that the sum of difficulties in every contiguous subarray is unique. Otherwise, print \\"NO\\". Consider constraints and examples provided for reference. In the first example, the input is: 5 1 2 3 4 5 The output is \\"YES\\". One possible arrangement is as-is because all contiguous subarray sums will be unique. In the second example, the input is: 4 1 1 1 1 The output is \\"NO\\" because all contiguous subarrays will have the same sum if the books are identical in difficulty.","solution":"def can_rearrange_books_unique_sums(n, difficulties): Determines if it\'s possible to rearrange the books so that the sum of difficulties in every contiguous subarray is unique. :param n: Number of books (int) :param difficulties: List of difficulties of the books (List[int]) :return: \\"YES\\" if it\'s possible, otherwise \\"NO\\" (str) # If any two elements are the same, it\'s not possible to have unique sums for all subarrays if len(set(difficulties)) < n: return \\"NO\\" return \\"YES\\""},{"question":"Alex is given an array consisting of `n` integers, some of which might be negative. He discovered that summing all negative numbers in the array would yield a negative sum, and summing all positive numbers would yield a positive sum. Alex wants to identify a subarray (continuous segment) of the given array such that its sum contributes maximally to the overall total sum. To help Alex, you need to determine the subarray with the maximum possible sum. If there are multiple subarrays with the same maximum sum, any of them will suffice. Write a program to find the subarray with the maximum sum and output this sum. The first line contains a single integer `n` (1 ≤ n ≤ 300,000) — the number of elements in the array. The second line contains `n` space-separated integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the array. Output a single integer which is the maximum sum of any subarray of the given array. # Example Input: ``` 6 -2 1 -3 4 -1 2 1 -5 4 ``` Output: ``` 6 ``` Explanation: The subarray [4, -1, 2, 1] has the largest sum of 6. # Note: This problem can be solved using Kadane\'s Algorithm, which processes each element in the array once and keeps track of the current subarray sum and the maximum subarray sum found so far.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any subarray within the given array. Implements Kadane\'s Algorithm. max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array of integers of length n. You need to determine whether the array has an \\"even palindrome\\" subsequence. An \\"even palindrome\\" is defined as a subsequence of the array where the sequence of numbers reads the same forward and backwards, and the length of this subsequence is even. If the array contains such a subsequence, print \\"YES\\". Otherwise, print \\"NO\\". The first line contains an integer n (1 ≤ n ≤ 105) — the length of the array. The second line contains n integers ai (1 ≤ ai ≤ 109) — the elements of the array. If multiple such subsequences exist, any one is sufficient to determine the answer. For example, for the array [1, 2, 3, 2, 1], there is no even palindrome, so the output should be \\"NO\\". For the array [1, 2, 2, 1], the subsequence [1, 2, 2, 1] is an even palindrome, so the output should be \\"YES\\".","solution":"def has_even_palindrome_subsequence(arr): Determines if there is an even-length palindrome subsequence in the array. n = len(arr) # Check if there\'s a pair of identical adjacent elements, this forms an even palindrome of length 2 for i in range(n-1): if arr[i] == arr[i+1]: return \\"YES\\" # Check for longer even-length palindromes (length 4, 6, ...) for length in range(4, n+1, 2): for start in range(n - length + 1): end = start + length - 1 if arr[start:end+1] == arr[start:end+1][::-1]: return \\"YES\\" return \\"NO\\""},{"question":"Mia is learning about string manipulations in her computer science class. One day, she encountered a problem where she needs to transform one string into another using the minimum number of operations. The allowed operations are: 1. Insert a character at any position. 2. Delete a character from any position. 3. Replace a character at any position with another character. Help Mia by writing a program to determine the minimum number of operations required to transform the given string S into string T. The first line of the input contains the string S (1 ≤ |S| ≤ 1000), the second line contains the string T (1 ≤ |T| ≤ 1000). Output the minimum number of operations required to transform S into T. Example Input: ``` horse ros ``` Example Output: ``` 3 ``` Explanation: To transform \\"horse\\" into \\"ros\\": - Replace \'h\' with \'r\' - Remove \'o\' - Remove \'e\'","solution":"def min_distance(S, T): Returns the minimum number of operations required to transform string S into string T. m, n = len(S), len(T) # Create a DP table to store the number of operations required dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the base cases for i in range(m + 1): dp[i][0] = i # Deleting all characters from S to match an empty T for j in range(n + 1): dp[0][j] = j # Inserting all characters into S to match T from an empty S # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no additional operation needed else: dp[i][j] = min(dp[i - 1][j], # Delete operation dp[i][j - 1], # Insert operation dp[i - 1][j - 1] # Replace operation ) + 1 return dp[m][n]"},{"question":"You are given an array of n integers. You are allowed to perform a series of operations on this array. In each operation, you can select any two elements in the array and swap their values. The cost of each operation is the absolute difference in values of the two selected elements. You are required to make all the elements in the array equal using the minimum total cost. Determine this minimum total cost. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the elements of the array. Output a single integer — the minimum total cost to make all elements in the array equal. Examples --------- Input: 4 1 3 5 7 Output: 12 Explanation: In the given example, the best strategy is to make all elements equal to 4 (or 5). The total cost will be: |1-4| + |3-4| + |5-4| + |7-4| = 3 + 1 + 1 + 3 = 8 or |1-5| + |3-5| + |5-5| + |7-5| = 4 + 2 + 0 + 2 = 8 Both strategies yield the same minimum total cost of 8.","solution":"def min_cost_to_equal_array(nums): Determines the minimum total cost to make all elements in the array equal. :param nums: List of integers representing the array :return: Minimum total cost if len(nums) == 0: return 0 nums.sort() median = nums[len(nums) // 2] total_cost = sum(abs(num - median) for num in nums) return total_cost"},{"question":"You are given an array of integers `a` of size `n` indexed from `1` to `n`. Your task is to construct an array `b` by performing a series of `m` operations, where each operation is one of the following types: 1. `1 x y`: Set `a[x]` to `y`. 2. `2 l r`: Print the sum of array `a` values from index `l` to `r` inclusive. Note that the operations apply sequentially in the order they appear in the input. # Input - The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 10^5`), the size of the array and the number of operations. - The second line contains `n` integers `a1, a2, ..., an` (`1 ≤ ai ≤ 10^9`), the elements of the array. - The next `m` lines each describe an operation, either of the form `1 x y` or `2 l r`. # Output For each operation of type `2 l r`, print the sum of values from index `l` to `r` inclusive in the array `a`. # Example Input ``` 5 4 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 4 5 ``` Output ``` 6 14 9 ``` # Note - In the example, the initial array is `[1, 2, 3, 4, 5]`. - After the first operation (`2 1 3`), the sum of elements from index `1` to `3` (i.e., `1+2+3`) is `6`. - The second operation (`1 2 10`) modifies the array to `[1, 10, 3, 4, 5]`. - After the third operation (`2 1 3`), the sum of elements from index `1` to `3` (i.e., `1+10+3`) is `14`. - After the fourth operation (`2 4 5`), the sum of elements from index `4` to `5` (i.e., `4+5`) is `9`.","solution":"def process_operations(n, m, a, operations): result = [] for op in operations: if op[0] == 1: # Operation type 1 x = op[1] - 1 y = op[2] a[x] = y elif op[0] == 2: # Operation type 2 l = op[1] - 1 r = op[2] result.append(sum(a[l:r])) return result"},{"question":"Lucy is a dedicated gardener who loves growing flowers. She has a linear garden with n flower beds, each of which can contain a certain number of flowers. Lucy plants a specific type of flower in each bed and counts the number of flowers in each bed. Over the years, each plant\'s growth rate fluctuates, so she wants to keep track of the total number of flowers in any subarray of beds. Lucy wants to query the total number of flowers between two specific flower beds multiple times. Can you help her with this task? The first line of the input contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of flower beds and the number of queries, respectively. The second line contains n space-separated integers f1, f2, ..., fn (0 ≤ fi ≤ 10^9) — the number of flowers in each flower bed. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the indices (1-based) of the range of flower beds for which Lucy wants to know the total number of flowers. For each query, print a single integer — the total number of flowers in the specified range of flower beds. Example: Input: 5 3 3 1 4 1 5 2 4 1 3 3 5 Output: 6 8 10 In the first example, the subarray from the 2nd to the 4th bed contains 1 + 4 + 1 = 6 flowers. In the second example, the subarray from the 1st to the 3rd bed contains 3 + 1 + 4 = 8 flowers. In the third example, the subarray from the 3rd to the 5th bed contains 4 + 1 + 5 = 10 flowers.","solution":"def flower_query(n, q, flower_beds, queries): This function takes in the number of flower beds, the number of queries, the list of flowers in each bed, and the queries (ranges). Returns the sum of flowers in the queried range for each query. # Precompute prefix sums prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + flower_beds[i] results = [] for query in queries: l, r = query # Calculate the sum using the prefix sums array results.append(prefix_sums[r] - prefix_sums[l - 1]) return results # Example usage n = 5 q = 3 flower_beds = [3, 1, 4, 1, 5] queries = [(2, 4), (1, 3), (3, 5)] print(flower_query(n, q, flower_beds, queries)) # [6, 8, 10]"},{"question":"You are given an array of integers, where each element represents the height of a person in a lineup. A lineup is a rearrangement of these people such that the heights are non-decreasing. However, due to a mistake, some of the people were lined up incorrectly. Your task is to determine the minimum number of swaps required to correct the lineup. The first line of the input contains a single integer n (1 ≤ n ≤ 100), which represents the number of people. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 100), where hi represents the height of the i-th person in the lineup. Print a single integer, the minimum number of swaps needed to sort the array in non-decreasing order. # Example Input ``` 5 3 1 2 5 4 ``` # Example Output ``` 3 ``` # Explanation To sort the array [3, 1, 2, 5, 4] in non-decreasing order, the following swaps are performed: 1. Swap 3 and 1: [1, 3, 2, 5, 4] 2. Swap 3 and 2: [1, 2, 3, 5, 4] 3. Swap 5 and 4: [1, 2, 3, 4, 5] Hence, the minimum number of swaps required is 3.","solution":"def minimum_swaps_to_sort(arr): Returns the minimum number of swaps needed to sort the array in non-decreasing order. n = len(arr) indices = list(range(n)) indices.sort(key=lambda i: arr[i]) visited = [False] * n swaps = 0 for i in range(n): if visited[i] or indices[i] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = indices[j] cycle_size += 1 if cycle_size > 1: swaps += (cycle_size - 1) return swaps def read_input(): n = int(input().strip()) arr = list(map(int, input().strip().split())) return n, arr if __name__ == \'__main__\': n, arr = read_input() print(minimum_swaps_to_sort(arr))"},{"question":"In an attempt to revamp its payment system, a company decides to use a reward system where employees are rewarded with a special reward unit called \\"coin\\". The coins are given based on the work they do each day. The amount of work is gauged by different integer-based tasks. Each integer task has a specific coin value associated with it. However, the coins are only given if the combination of tasks results in a even-valued total. Given a list of tasks done by an employee in a day represented as an array of integers, and the value of coins associated with each task, you are to determine the minimum number of tasks the employee needs to select to get an even-valued total of coins. If it is not possible to achieve an even-valued total, return -1. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) - the number of tasks. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000) - the coin values associated with each task. Output Output one integer - the minimum number of tasks needed to achieve an even-valued total of coins, or -1 if it is not possible. Example Input: 5 1 3 5 6 7 Output: 2 Explanation: To achieve an even-valued total of coins, the employee can select tasks with coin values 1 and 7 (1 + 7 = 8, which is even), among other combinations. The minimum number of tasks needed is 2.","solution":"def min_tasks_for_even_total(n, coins): Returns the minimum number of tasks needed to achieve an even-valued total of coins, or -1 if it is not possible. # Separate the tasks into odd and even coins odd_coins = [coin for coin in coins if coin % 2 != 0] even_coins = [coin for coin in coins if coin % 2 == 0] # If there are no odd coins and no even coins, it\'s not possible to have an even total if not odd_coins and not even_coins: return -1 # If there\'s at least one even coin, we can select it to get an even total if even_coins: return 1 # If all coins are odd, we need to select at least two of them to get an even total (odd + odd = even) if len(odd_coins) >= 2: return 2 # Otherwise, it\'s not possible to achieve an even-valued total return -1"},{"question":"You are given a list of integers representing measurements taken by a monitoring system, and you need to generate a summary report of these measurements. Specifically, you are required to find the average, median, and mode of the list. The mode is defined as the number that appears most frequently. If there are multiple numbers with the highest frequency, consider the smallest one as the mode. The list is guaranteed to have at least one element. The input consists of a single line containing n space-separated integers, where n (1 ≤ n ≤ 100,000). Output the average, median, and mode of the list, each on a separate line. The average should be displayed as a floating-point number rounded to one decimal place. For the median, if n is odd, output the middle number; if n is even, output the average of the two middle numbers (also rounded to one decimal place). # Example Input ``` 1 3 3 6 7 8 9 9 9 ``` # Example Output ``` 5.0 7.0 9 ``` # Explanation - The average is (1 + 3 + 3 + 6 + 7 + 8 + 9 + 9 + 9) / 9 = 5.0. - The median is the middle number in the sorted list: 1, 3, 3, 6, 7, 8, 9, 9, 9, which is 7. - The mode is the number that appears most frequently, which is 9.","solution":"from collections import Counter from statistics import median def summary_statistics(measurements): n = len(measurements) # Calculate the average avg = round(sum(measurements) / n, 1) # Calculate the median med = round(median(measurements), 1) # Calculate the mode freq = Counter(measurements) mode = min([k for k, v in freq.items() if v == max(freq.values())]) return avg, med, mode"},{"question":"In a magical land, there is a game called \\"Enchanted Path\\" where a player tries to reach the destination by stepping on magical stones arranged in a grid. Each stone in the grid has a magical power level, and the player can only step onto a stone if the power level difference between the current stone and the next stone is at most `k`. The grid is represented as an `n x m` matrix where each entry is a number representing the power level of the stone at that position. The player starts at the top-left corner of the grid and aims to reach the bottom-right corner. Write a program to determine if it is possible for the player to travel from the top-left corner to the bottom-right corner under the given conditions. **Input:** - The first line contains three integers `n` (number of rows), `m` (number of columns), and `k` (maximum allowed power level difference). - The next `n` lines contain `m` integers each, representing the power levels of the stones in the grid. **Output:** - Print \\"YES\\" if it is possible for the player to reach the bottom-right corner of the grid. Otherwise, print \\"NO\\". **Constraints:** - `2 ≤ n, m ≤ 100` - `0 ≤ power level of stones ≤ 1000` - `0 ≤ k ≤ 1000` **Example:** ``` Input: 3 4 2 1 2 3 4 4 1 5 7 3 2 1 6 Output: YES Input: 3 3 1 1 3 5 6 4 2 7 8 9 Output: NO ``` To solve this problem, consider using a breadth-first search (BFS) or depth-first search (DFS) algorithm to explore all possible paths from the top-left to the bottom-right corner, ensuring the power level difference condition is met at each step.","solution":"def can_reach_destination(n, m, k, grid): from collections import deque # Directions for moving in the grid (right, left, down, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS setup queue = deque([(0, 0)]) visited = set((0, 0)) def is_valid(x, y, nx, ny): if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: if abs(grid[x][y] - grid[nx][ny]) <= k: return True return False while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(x, y, nx, ny): visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"A city wants to construct a square park such that it covers the largest possible area within given constraints. The city has a group of n available plots of land, each with a specific area. The goal is to use one or more of these plots to form the largest possible square park. The area of each plot is given in square meters, and the park must be a perfect square. The park can be formed by combining adjacent plots (plots that share a side), but no plot\'s area can be divided. Write a program to determine the maximum possible area of the square park that can be formed and the minimum number of plots required to form this park. # Input - The first line contains an integer n (1 ≤ n ≤ 100), the number of plots available. - The next line contains n integers representing the areas of the plots in square meters. Each plot\'s area ai (1 ≤ ai ≤ 10^4). # Output Print two integers: the area of the maximum possible square park and the minimum number of plots required to form this park. # Example Input ``` 6 16 9 25 4 1 36 ``` Output ``` 36 1 ``` # Explanation In the example, the available plots have areas of 16, 9, 25, 4, 1, and 36 square meters. The largest possible square park that can be formed is 36 square meters using a single plot. Hence, the output is 36 and 1.","solution":"def largest_square_park(n, plot_areas): Determines the area of the largest possible square park and the minimum number of plots required. Parameters: n (int): Number of plots available. plot_areas (list): List of integers representing the areas of the plots. Returns: tuple: A tuple containing the area of the largest possible square park and the minimum number of plots required. # To track the maximum square park area max_square_area = 0 min_plots = float(\'inf\') # Sort plots in descending order to find the largest square park faster plot_areas.sort(reverse=True) for area in plot_areas: side = int(area ** 0.5) if side * side == area: # It\'s a perfect square if area > max_square_area: max_square_area = area min_plots = 1 elif area == max_square_area: min_plots = min(min_plots, 1) return max_square_area, min_plots"},{"question":"A company organizes a coding competition where each participant is required to solve a series of problems. The grading system is based on the number of problems solved by each participant. For each problem solved, a participant receives points, and the total points determine the winners. The competition has n participants and m problems. Given a matrix where the element at the i-th row and j-th column represents the points that the i-th participant earned for solving the j-th problem, calculate the total score for each participant and determine the highest score among all participants. The first line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100) — the number of participants and the number of problems, respectively. The next n lines contain m integers each, where the j-th integer in the i-th line denotes the points the i-th participant received for the j-th problem (0 ≤ points ≤ 100). Output the maximum total score achieved by any participant. For instance, if the input is: 4 3 10 15 20 30 10 40 20 20 10 10 10 10 The output should be: 80 Explanation: The total scores for each participant are 45, 80, 50, and 30, respectively. Hence, the maximum total score is 80.","solution":"def max_participant_score(n, m, scores): Calculate the maximum total score achieved by any participant. Parameters: n (int): Number of participants. m (int): Number of problems. scores (list of list of int): Points each participant received for each problem. Returns: int: The maximum total score. max_score = 0 for i in range(n): total_score = sum(scores[i]) if total_score > max_score: max_score = total_score return max_score"},{"question":"You are given a grid of size n × m filled with non-negative integers. There are two players, Alice and Bob, who take turns to play. Alice always starts first. In each turn, a player selects any row or column from the grid and removes it along with the corresponding non-negative integers in it. The game continues until there are no rows or columns left in the grid. Both players play optimally and try to force the other player into a position where they can\'t make a move. Determine who will win the game if both players play optimally. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. Each of the next n lines contains m integers representing the grid. Each integer in the grid is a non-negative integer not greater than 10^9. If Alice wins, print \\"Alice\\" without the quotes. Otherwise, print \\"Bob\\" without the quotes.","solution":"def determine_winner(n, m, grid): Determines the winner of the game if both players play optimally. Alice always gets the first move. Parameters: - n (int): Number of rows in the grid - m (int): Number of columns in the grid - grid (list of list of int): The n x m grid representing the game state Returns: - str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins # The winner depends on the parity of the minimum of n and m # If both dimensions are odd, Alice wins, because she can always mirror Bob\'s move and remains the last to remove the final row/column # Otherwise, Bob wins since Alice would be forced into a losing situation eventually return \\"Alice\\" if min(n, m) % 2 == 1 else \\"Bob\\""},{"question":"Ash has a list of integers and he wants to find the length of the longest contiguous subarray where the difference between the maximum and minimum values in the subarray is less than or equal to a given integer k. Your task is to help Ash find the length of the longest subarray that satisfies this condition. The first line contains the integers n (1 ≤ n ≤ 2 * 10^5) and k (0 ≤ k ≤ 10^9) — the number of elements in the list and the maximum allowed difference. The second line contains n integers a_i (0 ≤ a_i ≤ 10^9) — the elements of the list. Print a single integer — the length of the longest contiguous subarray where the difference between the maximum and minimum values is less than or equal to k.","solution":"def longest_subarray_with_max_diff(arr, k): Finds the length of the longest contiguous subarray where the difference between the maximum and minimum values in the subarray is less than or equal to k. :param arr: List of integers. :param k: The maximum allowed difference. :return: Length of the longest subarray. from collections import deque if not arr: return 0 min_deque, max_deque = deque(), deque() left = 0 max_length = 0 for right in range(len(arr)): while min_deque and arr[min_deque[-1]] >= arr[right]: min_deque.pop() while max_deque and arr[max_deque[-1]] <= arr[right]: max_deque.pop() min_deque.append(right) max_deque.append(right) while arr[max_deque[0]] - arr[min_deque[0]] > k: left += 1 if min_deque[0] < left: min_deque.popleft() if max_deque[0] < left: max_deque.popleft() max_length = max(max_length, right - left + 1) return max_length"},{"question":"A software company hosts a coding challenge for aspiring programmers. The challenge includes multiple problems, one of which involves analyzing and modifying a text-based file system. Participants need to demonstrate their ability to programmatically navigate and manipulate nested directories and files. The file system is represented as a tree structure, where each node is either a directory or a file. Directories can contain other directories and files, whereas files do not contain any children. Each directory and file has a unique name. You are tasked with writing a program that processes a set of operations to be performed on the file system. The operations include creating directories, creating files, moving files or directories, and deleting files or directories. All operations are guaranteed to involve existing paths unless specified otherwise. Here is a list of commands to be implemented: 1. `CREATE_DIR path`: Create a new directory at the specified path. 2. `CREATE_FILE path`: Create a new file at the specified path. 3. `MOVE src_path dest_path`: Move a file or directory from src_path to dest_path. If the destination already contains an item with the same name, it should be replaced. 4. `DELETE path`: Delete a file or directory at the specified path. If the path is a directory, all its contents should also be deleted. 5. `LIST path`: List all files and directories at the specified path, sorted lexicographically. The first line of input contains an integer `q` (1 ≤ q ≤ 1000), the number of operations. Each of the following `q` lines contains a command formatted as described above. Paths are given as Unix-like paths (e.g., `/home/user/docs`). The root directory is always `/`. The output should be the result of all `LIST` commands in the order they appear. Each listing should include one line per item, sorted lexicographically, with directories appearing before files in case of ties. Example: ``` Input: 10 CREATE_DIR /home CREATE_DIR /home/user CREATE_FILE /home/user/file1.txt CREATE_FILE /home/user/file2.txt CREATE_DIR /home/user/docs MOVE /home/user/file1.txt /home/user/docs/file1.txt DELETE /home/user/file2.txt LIST /home/user CREATE_DIR /home/user/docs/projects LIST /home/user/docs Output: docs file1.txt projects file1.txt ``` In this example, the program first creates a hierarchical structure with directories and files, moves a file, deletes another file, and lists the contents at two different levels in the directory hierarchy. The output reflects the state of the file system after executing all commands, showcasing the ability to handle complex manipulations.","solution":"class Node: def __init__(self, is_directory=True): self.is_directory = is_directory self.children = {} # Only used if it\'s a directory class Filesystem: def __init__(self): self.root = Node(is_directory=True) def _navigate(self, path): Navigate to the node specified by the path. parts = path.strip(\'/\').split(\'/\') current = self.root for part in parts: if part and part in current.children: current = current.children[part] elif part: return None # Path does not exist return current def create_dir(self, path): Create a directory at the specified path. parts = path.strip(\'/\').split(\'/\') current = self.root for part in parts: if part: if part not in current.children: current.children[part] = Node(is_directory=True) current = current.children[part] def create_file(self, path): Create a file at the specified path. parts = path.strip(\'/\').split(\'/\') *dirs, file_name = parts current = self.root for part in dirs: if part: if part not in current.children: current.children[part] = Node(is_directory=True) current = current.children[part] current.children[file_name] = Node(is_directory=False) def move(self, src_path, dest_path): Move a file or directory from src_path to dest_path. src_parts = src_path.strip(\'/\').split(\'/\') *src_dirs, src_name = src_parts src_parent = self._navigate(\'/\'.join(src_dirs)) if src_parent and src_name in src_parent.children: node = src_parent.children.pop(src_name) dest_parts = dest_path.strip(\'/\').split(\'/\') *dest_dirs, dest_name = dest_parts dest_parent = self._navigate(\'/\'.join(dest_dirs)) if dest_parent: dest_parent.children[dest_name] = node def delete(self, path): Delete a file or directory at the specified path. parts = path.strip(\'/\').split(\'/\') *dirs, name = parts parent = self._navigate(\'/\'.join(dirs)) if parent and name in parent.children: del parent.children[name] def list_dir(self, path): List all items at the specified path. current = self._navigate(path) if current: dirs = [] files = [] for name, node in current.children.items(): if node.is_directory: dirs.append(name) else: files.append(name) result = sorted(dirs) + sorted(files) return result return [] def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') q = int(data[0].strip()) operations = data[1:] fs = Filesystem() result = [] for operation in operations: parts = operation.split() command = parts[0] if command == \'CREATE_DIR\': fs.create_dir(parts[1]) elif command == \'CREATE_FILE\': fs.create_file(parts[1]) elif command == \'MOVE\': fs.move(parts[1], parts[2]) elif command == \'DELETE\': fs.delete(parts[1]) elif command == \'LIST\': result.extend(fs.list_dir(parts[1])) result.append(\'\') if result and result[-1] == \'\': result.pop() print(\'n\'.join(result)) if __name__ == \'__main__\': main()"},{"question":"You are given a connected undirected graph with n nodes and m edges. Each node is initially uncolored. Your task is to determine whether it is possible to color the nodes of the graph using two colors, such that no two adjacent nodes share the same color. If it is possible, output \\"Yes\\" followed by a valid coloring of the nodes (where nodes are colored 1 or 2). If it is not possible, output \\"No\\". The first line of the input contains two integers n and m (1 le n, m le 2 cdot 10^5) — the number of nodes and the number of edges, respectively. The next m lines each contain two integers u and v (1 le u, v le n) representing an edge between nodes u and v. Output \\"Yes\\" and a list of n integers indicating a valid coloring of the nodes if it\'s possible to color the graph using two colors. If it\'s not possible, output \\"No\\". # Example Input ``` 4 4 1 2 2 3 3 4 4 1 ``` Output ``` Yes 1 2 1 2 ``` Input ``` 3 3 1 2 2 3 3 1 ``` Output ``` No ``` # Note In the first example, you can color the nodes as [1, 2, 1, 2]. In the second example, there\'s no way to color the nodes with two colors such that no two adjacent nodes share the same color.","solution":"def is_bipartite(n, m, edges): from collections import deque, defaultdict def bfs_bipartite(v): queue = deque([v]) color[v] = 1 while queue: u = queue.popleft() for neighbor in graph[u]: if color[neighbor] == 0: color[neighbor] = 3 - color[u] # alternate between 1 and 2 queue.append(neighbor) elif color[neighbor] == color[u]: return False return True graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [0] * (n + 1) for node in range(1, n + 1): if color[node] == 0: if not bfs_bipartite(node): return \\"No\\" return \\"Yes \\" + \\" \\".join(map(str, color[1:])) # Example usage: # input_n = 4 # input_m = 4 # input_edges = [(1, 2), (2, 3), (3, 4), (4, 1)] # print(is_bipartite(input_n, input_m, input_edges))"},{"question":"Suppose you are given an array of n integers where every integer appears exactly three times except for one integer which appears exactly once. Your task is to find and return the element that appears only once. Can you implement an efficient solution to this problem? The first line contains an integer n (4 le n le 10^6) — the number of elements in the array. It is guaranteed that n − 1 is a multiple of 3. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. Your program should output a single integer, the element that appears exactly once. For example, for the input: ``` 7 2 2 3 2 4 4 4 ``` The output should be: ``` 3 ``` In this example, the integer `3` appears exactly once while every other integer appears three times.","solution":"def find_unique_element(arr): This function takes an array where every element appears exactly three times except for one element which appears only once. It returns the unique element that appears only once. # Initialize an array to hold the count of bits bit_count = [0] * 32 # Count the number of set bits at each position for num in arr: for i in range(32): if num & (1 << i): bit_count[i] += 1 # Resultant number result = 0 # Construct the single number from the bit counts mod 3 for i in range(32): if bit_count[i] % 3 != 0: result |= (1 << i) # To handle negative numbers if bit_count[31] % 3 != 0: # Checking the sign bit result -= (1 << 32) return result"},{"question":"In a competitive programming event, participants must solve a series of problems within a set time limit. Each problem has a difficulty level and a score that can be awarded if solved. You are a participant and you have limited time to maximize your score by selecting problems to solve. Each problem is described by two integers: its difficulty and the score awarded for solving it. You are given the time limit for the event and a list of problems, with the time required to solve each problem provided. Your goal is to determine the maximum score you can achieve without exceeding the time limit. The input starts with two integers, T and n (1 ≤ T ≤ 10^6, 1 ≤ n ≤ 1000), where T is the total time limit for the event and n is the number of problems. The next n lines each contain three integers: di, si, ti (1 ≤ di ≤ 100, 1 ≤ si ≤ 1000, 1 ≤ ti ≤ 10^6), where di is the difficulty of the i-th problem, si is the score awarded for solving it, and ti is the time required to solve it. Your task is to calculate the maximum score you can achieve within the given time limit. If there is a solution, print the maximum score. If no problems can be solved within the time limit, print 0. **Input** ``` T n d1 s1 t1 d2 s2 t2 ... dn sn tn ``` **Output** ``` maximum_score ``` **Example** **Input** ``` 10 3 5 100 3 2 300 5 1 200 6 ``` **Output** ``` 400 ``` **Explanation** In the example, the participant has a time limit of 10. To achieve the maximum score, the participant can solve the first problem (100 score, 3 time) and the second problem (300 score, 5 time), for a total score of 400 within the time limit of 10.","solution":"def max_score(T, n, problems): Determines the maximum score that can be achieved within the given time limit. Args: T (int): The total time limit for the event. n (int): The number of problems. problems (List[Tuple[int, int, int]]): A list of tuples where each tuple contains: - difficulty (int) - score (int) - time (int) Returns: int: The maximum score that can be achieved within the given time limit. # Initialize a list to keep track of the maximum score for each possible time dp = [0] * (T + 1) for difficulty, score, time in problems: if time <= T: # Update dp array from T to time (backwards) to avoid reusing the same problem for j in range(T, time - 1, -1): dp[j] = max(dp[j], dp[j - time] + score) return max(dp)"},{"question":"John is an avid collector of trading cards from a popular strategy game. He has a collection of cards, and each card has a certain rarity level denoted by an integer. John has friends who are also collectors, and sometimes they request to borrow a few cards to complete their deck for an upcoming tournament. Since John is generous, he often lends cards to his friends, but he wants to make sure he meets their request optimally. Your task is to help John determine if it\'s possible to fulfill each friend\'s request. For each request, John wants to know if he can provide exactly the number of cards needed of each specified rarity level. # Input The input consists of: - The first line contains an integer `n` (`1 ≤ n ≤ 1000`), the total number of cards in John\'s collection. - The second line contains `n` integers representing the rarity levels of the cards in John\'s collection. - The third line contains an integer `m` (`1 ≤ m ≤ 100`), the number of friends making requests. - The following `m` lines each contain an integer `k` followed by `k` integers. The first integer `k` represents the number of different rarities needed and the next `k` integers represent the number of cards requested of each rarity level, respectively. # Output For each friend, output \\"YES\\" if it\'s possible to fulfill the request exactly. Otherwise, output \\"NO\\". # Example Input ``` 10 1 2 3 2 1 4 2 2 3 1 3 2 1 2 2 3 1 1 4 3 ``` Output ``` YES NO NO ``` In this example: - John has a collection of 10 cards with specific rarity levels. - The first friend requests 1 card of rarity level 1 and 2 cards of rarity level 2. John can fulfill this request. - The second friend requests 3 cards of rarity level 3 and 1 card of rarity level 1. John cannot fulfill this request as he doesn\'t have enough cards of rarity level 3. - The third friend requests 3 cards of rarity level 4. John cannot fulfill this request as he only has 1 card of rarity level 4.","solution":"def can_fulfill_requests(total_cards, card_collection, total_requests, requests): from collections import Counter # Count the occurrences of each rarity level in John\'s collection card_count = Counter(card_collection) results = [] for request in requests: k = request[0] rarity_requests = request[1:] # Create a counter for the requested cards request_count = Counter() for i in range(0, len(rarity_requests), 2): requested_rarity = rarity_requests[i] requested_quantity = rarity_requests[i + 1] request_count[requested_rarity] = requested_quantity # Check if John can fulfill this request can_fulfill = True for rarity_level, quantity in request_count.items(): if card_count[rarity_level] < quantity: can_fulfill = False break if can_fulfill: results.append(\\"YES\\") # If fulfilled, decrease the quantities from John\'s collection for rarity_level, quantity in request_count.items(): card_count[rarity_level] -= quantity else: results.append(\\"NO\\") return results"},{"question":"You are given an n x m grid of cells, where each cell contains either a 0 or a 1. We define a \\"blob\\" as a connected group of 1s that are connected horizontally or vertically. Your task is to identify the largest blob of 1s in the grid and return its size. The input begins with two integers n and m (1 ≤ n, m ≤ 500), indicating the number of rows and columns in the grid respectively. The next n lines each contain a string of m characters, where each character is either \'0\' or \'1\', representing the grid cells. Identify the size of the largest blob of 1s and print the size. # Input Format - The first line contains two integers n and m (1 ≤ n, m ≤ 500). - Each of the next n lines contains a string of m characters (\'0\' or \'1\'). # Output Format - Print a single integer, the size of the largest blob of 1s. # Sample Input ``` 4 5 11000 11000 00100 00011 ``` # Sample Output ``` 4 ``` # Explanation In the given grid, the largest blob of connected 1s consists of 4 cells arranged in a 2x2 square at the top left corner of the grid. The size of this blob is 4.","solution":"def largest_blob_size(n, m, grid): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == \'0\': return 0 grid[x][y] = \'0\' # mark as visited size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: # four possible directions size += dfs(x + dx, y + dy) return size max_blob = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': max_blob = max(max_blob, dfs(i, j)) return max_blob"},{"question":"Anna is participating in a unique game show where she needs to cross a series of stepping stones to reach the final platform and claim her prize. The platforms are arranged in a single row, and each platform has a specific point value. Anna starts at the first platform and can move to any of the next k platforms in one step. Her goal is to reach the final platform while maximizing the total points she collects along the way. Determine the maximum points Anna can collect. The first line contains two integers, n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 100), where n is the number of platforms and k is the maximum number of steps she can take in one move. The second line contains n integers representing the points on each platform, a1, a2,..., an (-10^4 ≤ ai ≤ 10^4). Print a single integer representing the maximum points Anna can collect to reach the final platform. Example: Input: 5 2 1 -2 4 5 -1 Output: 9 Explanation: Anna can move from platform 1 to platform 3, collecting 1 + 4 = 5 points, and then from platform 3 to platform 5, collecting 5 + -1 = 4 points. The total is 9 points, which is the maximum she can collect.","solution":"def max_points(n, k, points): # Initialize dp array where dp[i] denotes the maximum points to reach platform i dp = [-float(\'inf\')] * n dp[0] = points[0] # Use a deque to maintain the indices of the platforms with max points in range from collections import deque dq = deque([0]) for i in range(1, n): # Remove elements from the deque that are out of the k range while dq and dq[0] < i - k: dq.popleft() # The current dp value will be the max dp from the deque + current point dp[i] = dp[dq[0]] + points[i] # Maintain deque to only store indices of useful dp points while dq and dp[i] >= dp[dq[-1]]: dq.pop() dq.append(i) return dp[-1]"},{"question":"Leo is helping his friend to organize an online course. To avoid cheating, they decided that each homework should be designed in such a way that no two students can have the same set of answers. Leo has prepared a list of potential questions and the set of correct answers for each question. Now, he needs to decide on the number of different homeworks he can generate from this list, such that each homework has the same number of questions, and no two homeworks are identical (meaning that at least one question in any two homeworks has different answers). Each question in the homework must have exactly one correct answer. Help Leo to calculate the maximum number of unique homework sets that can be generated. The first line of input contains integers n and k (1 le n le 2000, 1 le k le 2000), where n is the number of questions and k is the number of questions to be included in each homework. The next n lines describe the questions. Each line contains a string q_i which is either \'0\' or \'1\', representing the correct answer for the i-th question. Print a single integer representing the number of unique homework sets that can be generated. **Example** Input: ``` 4 2 0 1 0 1 ``` Output: ``` 6 ``` In this example, the unique homework sets with 2 questions each would be: - (question 1, question 2) - (question 1, question 4) - (question 2, question 3) - (question 2, question 4) - (question 3, question 4) - (question 1, question 3) Notice that each combination of questions is unique in terms of their answers.","solution":"from itertools import combinations def unique_homework_sets(n, k, answers): Calculate the number of unique homework sets. :param n: Number of questions :param k: Number of questions in each homework :param answers: List of correct answers for each question :return: Number of unique homework sets return len(list(combinations(range(n), k))) def main(): import sys input = sys.stdin.read data = input().split() n, k = int(data[0]), int(data[1]) answers = data[2:] print(unique_homework_sets(n, k, answers)) if __name__ == \\"__main__\\": main()"},{"question":"You are working as the software architect for a new digital library. You have been given a task to design a search functionality that can quickly list all book titles that closely match a given query. To achieve this, you decided to use the Trie (prefix tree) data structure. You need to implement two functions: 1. `addBook(title)`: This function takes a string `title` representing the title of a book and adds it to the digital library\'s Trie. 2. `searchBooks(query)`: This function takes a string `query` and returns all book titles in the digital library that start with the given query string, maintaining their insertion order. Implement the `addBook` and `searchBooks` functions. Ensure your implementation handles multiple book titles and can return a list of matching books efficiently. The first input consists of an integer `n` (1 ≤ n ≤ 1000) — the number of book titles. The following `n` lines contain the book titles. Each title is a non-empty string of length at most 100 that consists of alphanumeric characters and spaces. The subsequent lines contain queries, one per line. A query is a non-empty string of length at most 100 consisting of alphanumeric characters and spaces. The input is terminated by an empty line. Output the matching book titles for each query in the order they were inserted. If no titles match the query, output \\"No matches found\\". The output for each query should be separated by a blank line. # Example Input ``` 5 The Great Gatsby The Grapes of Wrath The Art of War A Brief History of Time A Game of Thrones The Gr A Thr ``` # Example Output ``` The Great Gatsby The Grapes of Wrath A Brief History of Time A Game of Thrones No matches found ``` Note: - You can assume that unique titles are present in the input and there won\'t be duplicate titles. - The search should be case-sensitive.","solution":"class TrieNode: def __init__(self): self.children = {} self.book_titles = [] self.is_end_of_title = False class DigitalLibrary: def __init__(self): self.root = TrieNode() def addBook(self, title): node = self.root for char in title: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.book_titles.append(title) node.is_end_of_title = True def searchBooks(self, query): node = self.root for char in query: if char not in node.children: return \\"No matches found\\" node = node.children[char] return \\"n\\".join(node.book_titles) if node.book_titles else \\"No matches found\\" # Testing the implementation if __name__ == \\"__main__\\": library = DigitalLibrary() books = [ \\"The Great Gatsby\\", \\"The Grapes of Wrath\\", \\"The Art of War\\", \\"A Brief History of Time\\", \\"A Game of Thrones\\" ] for book in books: library.addBook(book) queries = [ \\"The Gr\\", \\"A \\", \\"Thr\\" ] for query in queries: print(library.searchBooks(query)) print() # To match the format in the example"},{"question":"A famous city B has decided to host a city\'s annual sports carnival. There will be many sports events, each having certain requirements for participation. There are m events, and each event j requires exactly a certain skill level sj to participate. On the other hand, there are n athletes, each having different skill levels. The i-th athlete has the skill level ai and wishes to participate in as many events as possible. However, athletes can only take part in one event per day, and each athlete can work for no more than d days in total. The sports carnival organizers want to maximize the number of events covered by ensuring no event is left without an athlete. Your task is to determine the minimum number of days required to cover all events by assigning athletes. The first line contains three space-separated integers: n, m, and d (1 ≤ n, m ≤ 100, 1 ≤ d ≤ 100) — the number of athletes, the number of events, and the maximum number of days each athlete can work. The second line contains m space-separated integers s1, s2, ..., sm (1 ≤ sj ≤ 100) — the required skill levels for the events. The third line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the skill levels of the athletes. Your task is to determine if it\'s possible to cover all events with the given constraints. If it is not possible, print \\"IMPOSSIBLE\\". If it is possible, print the minimum number of days required to cover all events. If there are multiple ways to cover the events, you can output any of them as long as the number of days is minimized. Consider the following sample: Input: 3 3 2 50 60 70 70 50 55 Output: 2 In the example above: - The first athlete can cover the event with skill level 70. - The second athlete can cover the event with skill level 50. - The third athlete can cover the event with skill level 60. Each athlete can only work 2 days maximum, so in this case, all events can be covered in exactly 2 days.","solution":"def min_days_to_cover_events(n, m, d, event_skills, athlete_skills): from collections import defaultdict import heapq if m > n * d: return \\"IMPOSSIBLE\\" event_skills.sort() athlete_skills.sort() events_per_day = defaultdict(list) events_heap = [(0, i) for i in range(d)] heapq.heapify(events_heap) j = 0 for i in range(n): available_days = [] while j < m and event_skills[j] <= athlete_skills[i]: heapq.heappush(available_days, event_skills[j]) j += 1 while available_days and events_heap: day, day_index = heapq.heappop(events_heap) event = heapq.heappop(available_days) events_per_day[day_index].append(event) day += 1 heapq.heappush(events_heap, (day, day_index)) if sum(len(events) for events in events_per_day.values()) >= m: max_day_used = max(day for day, _ in events_heap) return max_day_used else: return \\"IMPOSSIBLE\\""},{"question":"Polycarp is fascinated by sequences where consecutive elements have alternating signs. A sequence is considered to have alternating signs if for every pair of consecutive elements (a_i) and (a_{i+1}), one of them is positive and the other is negative. Polycarp found a sequence and wants your help to determine if the sequence can be made to have alternating signs by removing at most one element. The first line contains an integer (n) (1 ≤ (n) ≤ 10^5) — the number of elements in the given sequence. The second line contains the elements of the sequence, which are space-separated integers. The absolute value of each element does not exceed 10^4. Print \\"YES\\" if the sequence can be made to have alternating signs by removing at most one element. Otherwise, print \\"NO\\". If the sequence is already alternating, print \\"YES\\". **Example** Input: ``` 5 1 -2 3 -4 5 ``` Output: ``` YES ``` Input: ``` 4 1 2 3 4 ``` Output: ``` NO ``` **Note** In the first test case, the sequence is already alternating. In the second test case, removing any one element will not convert the sequence into one with alternating signs, hence the answer is \\"NO\\".","solution":"def can_be_made_alternating(n, seq): if n == 1: return \\"YES\\" def is_alternating(sequence): for i in range(1, len(sequence)): if sequence[i] * sequence[i - 1] > 0: return False return True if is_alternating(seq): return \\"YES\\" for i in range(n): reduced_seq = seq[:i] + seq[i+1:] if is_alternating(reduced_seq): return \\"YES\\" return \\"NO\\""},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex can be in one of two states: secured or unsecured. Initially, all vertices are unsecured. You can perform the following operation any number of times: choose an unsecured vertex and secure it, then all its adjacent vertices become secured as well. Your task is to find the minimum number of operations required to secure all the vertices in the graph. Input: The first line contains two integers n and m (1 leq n leq 100, 0 leq m leq 100) — the number of vertices and edges, respectively. The next m lines each contain two integers u and v (1 leq u, v leq n, u neq v), representing an edge between vertices u and v. Output: Print a single integer — the minimum number of operations required to secure all vertices. Example: Input: 4 2 1 2 3 4 Output: 2 Explanation: In the example, to secure all vertices, you can secure vertex 1, which will also secure vertex 2. Then secure vertex 3, which will also secure vertex 4. Thus, the minimum number of operations required is 2.","solution":"def min_operations_to_secure_all_vertices(n, m, edges): from collections import defaultdict, deque # Create adjacency list of the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) visited = [False] * (n + 1) operation_count = 0 for vertex in range(1, n + 1): if not visited[vertex]: bfs(vertex, visited) operation_count += 1 return operation_count"},{"question":"Given an n x m grid where each cell contains a lowercase Latin letter (i.e., \'a\' to \'z\'), you can traverse the grid starting from any cell to any adjacent cell horizontally or vertically. Your task is to find the longest path such that every letter you pass has been visited no more than once. The path does not need to be a straight line but can change direction as long as you move to adjacent cells and do not visit any cell more than once. Input The first line contains integers n and m (1 ≤ n, m ≤ 50) representing the dimensions of the grid. The next n lines contain m characters each, representing the grid. Output Output a single integer which is the length of the longest path you can find. Example Input: 3 4 abcd efgh ijkl Output: 12 Note: On a 3x4 grid with all unique letters, you can visit every cell once, hence the longest path length is 12.","solution":"def longest_path_in_grid(n, m, grid): def dfs(x, y, visited): longest = 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[ord(grid[nx][ny]) - ord(\'a\')]: visited[ord(grid[nx][ny]) - ord(\'a\')] = True longest = max(longest, dfs(nx, ny, visited) + 1) visited[ord(grid[nx][ny]) - ord(\'a\')] = False return longest max_path_length = 0 for i in range(n): for j in range(m): visited = [False] * 26 # 26 letters in the alphabet visited[ord(grid[i][j]) - ord(\'a\')] = True max_path_length = max(max_path_length, dfs(i, j, visited) + 1) return max_path_length"},{"question":"You are given two positive integers, m and n. Your task is to find the smallest number that is divisible by both m and n. The first line of the input contains two integers m and n (1 ≤ m, n ≤ 10^18). Print a single number, the smallest number that is divisible by both m and n. In the first sample, the smallest number that is divisible by both 6 and 15 is 30. In the second sample, the smallest number that is divisible by both 3 and 5 is 15. In the third sample, the smallest number that is divisible by both 7 and 11 is 77.","solution":"import math def smallest_multiple(m, n): Returns the smallest number that is divisible by both m and n. return (m * n) // math.gcd(m, n)"},{"question":"Alice has a new puzzle consisting of a circular array of numbers. She has to find the largest sum of contiguous subarrays. However, since the array is circular, the subarray may wrap around the end of the array and continue from the beginning. The sum of an empty subarray is considered to be 0. Given an integer array `nums`, find the maximum possible sum of its subarray. A subarray is a contiguous part of an array. The first line of input contains a single integer `n` (1 le n le 3000) — the length of the array. The second line contains `n` integers separated by spaces — the elements of array `nums` (-10^4 ≤ `nums[i]` ≤ 10^4). Output the maximum possible sum of a circular subarray in the array. Example 1: ``` Input: 5 1 -2 3 -2 5 Output: 7 ``` Explanation: The subarray [3, -2, 5] has the largest sum 6. However the circular subarray [5, 1, -2, 3] has a sum of 7, which is larger. Example 2: ``` Input: 3 -2 -3 -1 Output: -1 ``` Explanation: Since all numbers are negative, the subarray with the least negative (maximum) sum is [-1].","solution":"def maxSubarraySumCircular(nums): Finds the maximum sum of a circular subarray. total = 0 max_sum = float(\'-inf\') cur_max = 0 min_sum = float(\'inf\') cur_min = 0 for num in nums: cur_max = max(cur_max + num, num) max_sum = max(max_sum, cur_max) cur_min = min(cur_min + num, num) min_sum = min(min_sum, cur_min) total += num return max(max_sum, total - min_sum) if max_sum > 0 else max_sum"},{"question":"Vanya has a garden which initially has a tree of height 1. Every day, the tree grows taller by exactly 1 unit. Vanya can water the tree to make it grow by an additional 1 unit on that day. However, she has limited water supply and can only water the tree for exactly k days out of the n days she has available. Help Vanya determine the maximum possible height of the tree after n days if she uses the water for exactly k days during this period. Note that Vanya can water the tree on any of the k days she chooses, and she does not have to water the tree for k consecutive days. Your task is to write a program that takes the number of days n and the number of days k for which she can water the tree and calculates the maximum height the tree can achieve. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of days and the number of days she can water the tree respectively. Print a single integer, the maximum possible height of the tree after n days given that Vanya uses the water for exactly k days. For example: Input: 5 2 Output: 8 Explanation: In 5 days with 2 days of watering, the tree can grow to a maximum height of 8 units (1 + 5 + 2 = 8).","solution":"def max_tree_height(n, k): Determines the maximum height of the tree after n days, where Vanya waters the tree for exactly k days. Args: n (int): Total number of days. k (int): Number of days Vanya can water the tree. Returns: int: Maximum possible height of the tree after n days. initial_height = 1 daily_growth = n additional_growth = k # Total height = initial height + daily growth for n days + additional growth for k days max_height = initial_height + daily_growth + additional_growth return max_height"},{"question":"Heidi is studying the structure of a large archaeological site that can be modeled as a simple undirected graph. Each area of the site is represented as a vertex, and a direct connection between two areas is represented as an edge. Heidi wants to place guiding signs in such a way that from any given area, one can eventually find a sign to reach any other area of the site. Your task is to determine the minimum number of signs needed to ensure that the site remains navigable even if the longest direct connection (the edge with the maximum initial distance between vertices) is closed for public safety reasons. Each sign directs from one area (vertex) to another directly connected area (neighboring vertex). Given the number of areas and connections, as well as a list of connections, determine the minimum number of signs needed. First, find the edge with the maximum distance. Then, find a new minimal spanning tree (excluding the longest edge) and ensure that each area is connected by at least one sign to its neighbors. The first line of input contains two integers, n and m (2 ≤ n ≤ 300,000 and 1 ≤ m ≤ 300,000), the number of areas (vertices) and the number of direct connections (edges). The next m lines each contain three integers, u, v, and d (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ d ≤ 1,000,000), representing an edge between vertices u and v with a distance d. Output the minimum number of guiding signs needed if the longest edge is closed. For example, given the following input: ``` 4 5 1 2 1 1 3 2 2 3 4 2 4 3 3 4 5 ``` The output should be: ``` 3 ``` In this example, the longest edge (3, 4) with distance 5 is removed. The minimum set of guiding signs for the remaining connections should connect all areas directly or indirectly.","solution":"import heapq from collections import defaultdict def min_spanning_tree_prims(n, edges, exclude_edge=None): if exclude_edge: edges.remove(exclude_edge) # Priority queue to select the smallest weight edge pq = [] for u, v, d in edges: heapq.heappush(pq, (d, u, v)) # To track visited vertices visited = [False] * (n + 1) min_edges = defaultdict(list) total_weight = 0 # Add initial vertex (e.g., vertex 1) start = 1 visited[start] = True num_edges_in_mst = 0 included_edges = [] while pq and num_edges_in_mst < n - 1: d, u, v = heapq.heappop(pq) if visited[u] and visited[v]: continue if not visited[u]: u, v = v, u visited[v] = True total_weight += d included_edges.append((u, v, d)) min_edges[u].append(v) min_edges[v].append(u) num_edges_in_mst += 1 for next_u, next_v, next_d in edges: if (next_u == v and not visited[next_v]) or (next_v == v and not visited[next_u]): heapq.heappush(pq, (next_d, next_u, next_v)) return min_edges, total_weight def minimum_guiding_signs(n, edges): # Step 1: Find the edge with the maximum distance max_dist_edge = max(edges, key=lambda x: x[2]) # Step 2: Find minimum spanning tree without the max distance edge min_edges, _ = min_spanning_tree_prims(n, edges.copy(), max_dist_edge) # Step 3: Calculate the number of guiding signs num_signs = 0 for vertex in min_edges: num_signs += len(min_edges[vertex]) # Since each edge is counted twice return num_signs // 2 def process_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [(int(data[i*3+2]), int(data[i*3+3]), int(data[i*3+4])) for i in range(m)] result = minimum_guiding_signs(n, edges) print(result)"},{"question":"Given an array of integers, determine the maximum product that can be obtained by multiplying any three distinct elements of the array. The array can contain both positive and negative integers. The first line of the input contains an integer n (3 ≤ n ≤ 105) — the number of elements in the array. The second line contains n integers — the elements of the array, where each element is between -106 and 106 inclusive. Your task is to write a program that reads the array and outputs the maximum product that can be obtained by multiplying any three of its distinct elements. # Example **Input:** ``` 5 -10 -10 5 2 1 ``` **Output:** ``` 500 ``` **Explanation:** The maximum product is obtained by multiplying -10, -10, and 5, resulting in 500.","solution":"def max_product_of_three(nums): nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1]) def max_product_from_input_string(input_string): # Parse input input_lines = input_string.strip().split(\\"n\\") n = int(input_lines[0]) nums = list(map(int, input_lines[1].split())) # Call the function to find the maximum product return max_product_of_three(nums)"},{"question":"Rainwater harvesting is an efficient way to collect and store rainwater for future use. Imagine you have a city with several buildings, each represented by its height. During a heavy rainfall, rainwater gets accumulated between buildings which can be used later. Given an array of integers where each element represents the height of a building, your task is to calculate the maximum amount of water that can be trapped between the buildings. The first line of input contains an integer n (1 ≤ n ≤ 1000), the number of buildings. The second line contains n space-separated integers representing the height of each building. The heights are guaranteed to be non-negative and less than or equal to 10,000. Output a single integer representing the maximum amount of trapped rainwater. For example, given the heights [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1], the maximum amount of water that can be trapped is 6 units. Explanation: - Between the 1st and 3rd buildings, 1 unit of water is trapped. - Between the 4th and 6th buildings, 1 unit of water is trapped. - Between the 8th and 10th buildings, 4 units of water are trapped. Total trapped water = 1 + 1 + 4 = 6 units. The challenge is to write a function that computes this efficiently: ``` def max_trapped_water(heights: List[int]) -> int: # Your code here ``` This function will take a list of integers as input and return the maximum amount of trapped rainwater.","solution":"def max_trapped_water(heights): Computes the maximum amount of trapped rainwater between buildings. Parameters: heights (List[int]): A list of integers representing the height of buildings. Returns: int: The maximum amount of trapped rainwater. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"You are designing a network routing algorithm and need to find the shortest path between two nodes in a grid. Each cell in the grid has a certain weight, which influences the cost of moving through that cell. You can move in four possible directions: left, right, up, and down. Your task is to write a function that finds the minimum cost to traverse from the top-left corner to the bottom-right corner of the grid. # Input The first line contains two integers, `n` and `m` (1 ≤ `n`, `m` ≤ 100), denoting the number of rows and columns in the grid, respectively. Each of the next `n` lines contains `m` integers, each representing the weight of a cell (1 ≤ weight ≤ 100). # Output Output a single integer, the minimum cost to traverse from the top-left corner `(1, 1)` to the bottom-right corner `(n, m)`. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 7 ``` # Explanation In this example, the path from the top-left to the bottom-right with the minimum cost is: [ (1, 1) rightarrow (2, 1) rightarrow (2, 2) rightarrow (3, 2) rightarrow (3, 3) ] The sum of the weights along this path is ( 1 + 1 + 5 + 1 + 1 ) = 7.","solution":"import heapq def minimum_cost_path(grid): Find the minimum cost to traverse from the top-left corner to the bottom-right corner of the grid. :param grid: List of lists where each sublist represents a row in the grid, and each element in the row is the weight of a cell. :return: Integer, the minimum cost to traverse from the top-left corner to the bottom-right corner of the grid. n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Use Dijkstra\'s Algorithm to find the shortest path min_heap = [(grid[0][0], 0, 0)] # (cost, x, y) costs = [[float(\'inf\')] * m for _ in range(n)] costs[0][0] = grid[0][0] while min_heap: current_cost, x, y = heapq.heappop(min_heap) if x == n-1 and y == m-1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_cost = current_cost + grid[nx][ny] if new_cost < costs[nx][ny]: costs[nx][ny] = new_cost heapq.heappush(min_heap, (new_cost, nx, ny)) return costs[n-1][m-1] # Example Usage: # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(minimum_cost_path(grid)) # Output: 7"},{"question":"Vasya is an avid mushroom collector who goes to the forest daily to collect mushrooms. In the forest, there are n different species of mushrooms. Each mushroom has a unique identifying number from 1 to n. The weight of each species i in grams is given as wi. Vasya wants to collect mushrooms such that the sum of the weights of the collected mushrooms is exactly W grams. However, he encounters a restriction: for each species i, he cannot collect more than ci grams of that species. Your task is to help Vasya determine the minimum number of mushrooms he needs to collect to reach exactly W grams in total weight. If it is not possible to collect exactly W grams, output -1. The first line contains a single integer n (1 <= n <= 100) — the number of mushroom species. The second line contains n integers w1, w2, ..., wn (1 <= wi <= 1000) — the weights of each mushroom species. The third line contains n integers c1, c2, ..., cn (1 <= ci <= 1000) — the maximum grams of each species Vasya can collect. The fourth line contains a single integer W (1 <= W <= 10^5) — the exact total weight Vasya wants to collect. Output a single integer — the minimum number of mushrooms required to collect exactly W grams, or -1 if it\'s not possible. **Example:** *Input:* ``` 3 10 20 30 40 100 30 70 ``` *Output:* ``` 3 ``` *Explanation:* Vasya can collect: - 40 grams of species 1 (10 grams each, 4 mushrooms) - 30 grams of species 3 (30 grams each, 1 mushroom) In total, he collects 5 mushrooms.","solution":"def min_mushrooms_to_collect(n, weights, max_collect, W): Determines the minimum number of mushrooms required to collect exactly W grams in total or returns -1 if it is not possible. # Initialize dp array where dp[j] will be the minimum number of mushrooms needed to collect j grams dp = [float(\'inf\')] * (W + 1) dp[0] = 0 # for 0 grams, we need 0 mushrooms for i in range(n): w = weights[i] # weight of current species c = max_collect[i] // w # max number of mushrooms we can collect for this species for _ in range(c): for j in range(W, w - 1, -1): if dp[j - w] != float(\'inf\'): dp[j] = min(dp[j], dp[j - w] + 1) return dp[W] if dp[W] != float(\'inf\') else -1"},{"question":"Marco is an avid movie collector and he keeps a detailed record of the movies he owns. He noticed that the years each movie was released in forms an interesting sequence. He wants to find out the maximum number of movies he can choose such that the release years of those movies form an arithmetic progression (AP). An arithmetic progression is a sequence of numbers in which the difference between consecutive terms is constant. Your task is to help Marco determine the length of the longest arithmetic progression he can form with the movie release years he owns. The first line of input contains an integer n (1 ≤ n ≤ 2·10^5) — the number of movies Marco owns. The second line contains n space-separated integers, where the i-th integer ai (1 ≤ ai ≤ 10^9) is the release year of the i-th movie. Output a single integer — the length of the longest arithmetic progression that can be formed with the given movie release years. Example: Input: 6 3 6 9 12 15 18 Output: 6 Explanation: All the given movie release years form an arithmetic progression with a common difference of 3, hence the longest such sequence has a length of 6.","solution":"def longest_arithmetic_progression(movies): if not movies: return 0 movies.sort() n = len(movies) if n == 1: return 1 # Create a dictionary to store the length of AP for each pair dp = {} max_length = 2 for j in range(1, n): for i in range(j): diff = movies[j] - movies[i] if (i, diff) in dp: dp[(j, diff)] = dp[(i, diff)] + 1 else: dp[(j, diff)] = 2 max_length = max(max_length, dp[(j, diff)]) return max_length"},{"question":"You are the lead engineer developing a new collaboration platform that supports addition and retrieval of tasks. Each task has a unique identifier, priority, and description. Tasks are to be stored in order of their priority. When multiple tasks have the same priority, they are ordered by their insertion time. Your job is to implement two functions: one for adding a new task, and one for retrieving and removing the highest-priority task. - The first line will contain an integer q (1 ≤ q ≤ 10^5) — the number of queries. - Each query will be in one of the following two formats: - \\"ADD id priority description\\" — adds a new task with the given id, priority, and description. - \\"POP\\" — retrieves and removes the highest-priority task and prints its id. Input constraints: - The id will be a string of lowercase Latin letters, and it is guaranteed to be unique. - The priority will be an integer (1 ≤ priority ≤ 10^5). - The description will be a string of lowercase Latin letters and spaces, such that its total length does not exceed 100 characters. - All tasks in each query are ordered by insertion order. Output: For each \\"POP\\" query, output the id of the task that is being retrieved and removed from storage. If there are no tasks to retrieve, output \\"EMPTY\\". Example Input: ``` 6 ADD task1 10 First task description ADD task2 5 Some other task ADD task3 10 Another task description POP POP POP ``` Example Output: ``` task2 task1 task3 ```","solution":"import heapq class TaskManager: def __init__(self): self.min_heap = [] self.task_lookup = {} self.counter = 0 def add_task(self, task_id, priority, description): # Create a tuple of (priority, insertion order, task_id, description) entry = (priority, self.counter, task_id, description) heapq.heappush(self.min_heap, entry) self.task_lookup[task_id] = entry self.counter += 1 def pop_task(self): if not self.min_heap: return \\"EMPTY\\" priority, insertion_order, task_id, description = heapq.heappop(self.min_heap) del self.task_lookup[task_id] return task_id def process_queries(queries): task_manager = TaskManager() results = [] for query in queries: parts = query.split(\' \', 3) if parts[0] == \\"ADD\\": _, task_id, priority, description = parts priority = int(priority) task_manager.add_task(task_id, priority, description) elif parts[0] == \\"POP\\": result = task_manager.pop_task() results.append(result) return results"},{"question":"You are given an array of n integers. You can perform up to k operations on it. In each operation, you can choose any two integers in the array and swap them. After performing all operations, your task is to maximize the sum of the first m elements of the sorted array. Note that you are allowed to perform fewer than k operations if it helps you achieve a better result. Write a program that takes n, m, k, and an array of n integers as input, and returns the maximum possible sum of the first m elements after performing the operations. # Input - The first line contains three integers n, m, and k (1 ≤ m ≤ n ≤ 100, 0 ≤ k ≤ 100). - The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. # Output - Print a single integer — the maximum possible sum of the first m elements of the array after performing at most k operations. # Example 1 Input ``` 5 3 1 1 2 5 3 4 ``` Output ``` 12 ``` Explanation You can swap 2 and 5 to get the array [1, 5, 2, 3, 4]. The first 3 elements of the sorted array [5, 4, 3, 2, 1] are 5, 4, and 3, which sum to 12. # Example 2 Input ``` 6 4 2 -1 -2 -3 -4 5 6 ``` Output ``` 16 ``` Explanation You can swap -4 with 6, and -3 with 5 to get the array [6, 5, -3, -2, -1, -4]. The first 4 elements of the sorted array [6, 5, -1, -2, -3, -4] are 6, 5, -1, and -2, which sum to 8.","solution":"def max_sum_after_operations(n, m, k, array): # Sort the array to get the elements in order sorted_array = sorted(array, reverse=True) # We are interested in the maximum sum of the first m elements return sum(sorted_array[:m]) # Example Usage: # n, m, k = 5, 3, 1 # array = [1, 2, 5, 3, 4] # print(max_sum_after_operations(n, m, k, array)) # Output: 12"},{"question":"You are given a set of rooms, connected by closed doors, which are initially locked. Each room can contain keys to other rooms. Your goal is to determine if you can access every room starting from room 0. The rooms are represented as a 2D array `rooms`, where each `rooms[i]` is a list of keys in room `i`. Each key in `rooms[i]` opens a door to another room. For example, if `rooms = [[1], [2], [3], []]`, then room 0 has a key to room 1, room 1 has a key to room 2, and room 2 has a key to room 3. Room 3 has no keys. Write a program that returns `true` if you can visit all the rooms, otherwise, return `false`. Input Format: - The first line contains a single integer `n` (the number of rooms), such that `1 <= n <= 1000`. - The next `n` lines describe the rooms, each containing space-separated integers which represent the keys in that room. - The i-th line starts with an integer `k_i` (the number of keys in room `i`), followed by `k_i` space-separated integers representing the rooms whose keys are in room `i`. Output Format: - Return `true` if you can visit all the rooms starting from room 0, otherwise return `false`. # Example: Input ``` 4 1 1 1 2 1 3 0 ``` Output ``` true ``` Explanation Starting from room 0, you can access all other rooms as follows: - From room 0, you get a key to room 1. - From room 1, you get a key to room 2. - From room 2, you get a key to room 3. - Room 3 has no keys, but you have already visited all rooms. # Constraints: - You can assume that no room will have a key to itself (i.e., no room `i` will contain the key `i`). - There are no duplicate keys in a single room. - Each key opens at most one room and each room can be opened by at most one key.","solution":"def can_visit_all_rooms(rooms): Determines if all rooms can be visited starting from room 0. Args: rooms (list of list of int): 2D array where each sublist represents keys in that room. Returns: bool: True if all rooms can be visited, False otherwise. visited = [False] * len(rooms) stack = [0] while stack: room = stack.pop() if not visited[room]: visited[room] = True for key in rooms[room]: if not visited[key]: stack.append(key) return all(visited)"},{"question":"Evaluate and process Lily\'s chocolate consumption. Lily has a bar of chocolate that is divided into n squares. Each square has a positive integer written on it, which represents its sweetness level. Lily wants to invite her friends over to share the chocolate. She decides to divide the chocolate into contiguous segments where each segment has exactly m squares. She wants to know how many ways she can choose such a segment so that the sum of the sweetness levels in the segment is exactly d. The input contains a single test case. The first line contains two integers n (1 leq n leq 100) and d (1 leq d leq 1000) — the number of squares in the chocolate and the desired sum of sweetness levels, respectively. The second line contains a sequence of n integers a_1, a_2, ldots, a_n (1 leq a_i leq 100) — the sweetness levels of each square of the chocolate. The third line contains an integer m (1 leq m leq n) — the length of the segment in squares. Print the number of ways Lily can choose such a segment. # Example **Input:** ``` 5 15 10 5 8 6 7 2 ``` **Output:** ``` 1 ``` **Explanation:** Lily can only choose the segment [8, 7] which sums to 15. So, there is only one way to achieve the desired segment. **Note:** There may be multiple valid segments, or no valid segments at all. Ensure to evaluate them properly according to the given constraints.","solution":"def count_segments_with_sum(n, d, sweetness_levels, m): Returns the number of contiguous segments of length m that have a sum of sweetness levels equal to d. count = 0 for i in range(n - m + 1): if sum(sweetness_levels[i: i + m]) == d: count += 1 return count"},{"question":"Alex loves collecting rare stamps. He has a collection of n stamps, each with a unique identifier and a specific rarity value. The rarity values of the stamps are integers that range from 1 to 100. Alex wants to know if it\'s possible to partition his entire collection into exactly two subsets such that the sum of the rarity values in each subset is equal. Given the number of stamps n and their respective rarity values, determine if such a partition is possible. The first line of the input contains a single integer n (1 ≤ n ≤ 100) which denotes the number of stamps in Alex\'s collection. The next line contains n space-separated integers representing the rarity values of the stamps. Output \\"YES\\" if it is possible to partition the collection into two subsets with equal sum of rarity values, and \\"NO\\" otherwise. For example, if n = 4 and the rarity values are [2, 3, 5, 5], then it is possible to partition the collection into subsets [2, 5] and [3, 5], both having the sum 7. Hence, the output should be \\"YES\\". On the other hand, if n = 3 and the rarity values are [1, 2, 3], there is no way to partition them into two subsets with equal sum. Thus, the output should be \\"NO\\". For the input: ``` 4 1 5 11 5 ``` The correct output is: ``` YES ``` For the input: ``` 4 1 2 3 5 ``` The correct output is: ``` NO ```","solution":"def can_partition(n, rarities): Determines if it\'s possible to partition the collection into two subsets with equal sum of rarity values. total_sum = sum(rarities) # If the total sum is odd, it\'s not possible to split into two equal parts if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 # Use dynamic programming to check if a subset with the target sum exists dp = [False] * (target + 1) dp[0] = True for rarity in rarities: for i in range(target, rarity - 1, -1): if dp[i - rarity]: dp[i] = True return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"In a parallel universe, planets are not only round but can also have different shapes. Scientists have discovered a new planet shape called a \\"Star Planet.\\" A Star Planet with n points looks like a star with n protruding points, and each point has an initial length. Scientists can lengthen the points of the Star Planet through a series of operations. Each operation can increase the length of a range of consecutive points by a given value. Given the initial lengths of the points and a series of operations, your task is to determine the minimum length of the longest point for the Star Planet after performing all the operations. # Input - The first line contains two space-separated integers n (1 ≤ n ≤ 200000) and m (1 ≤ m ≤ 200000) — the number of points on the Star Planet and the number of operations, respectively. - The second line contains n space-separated integers l1, l2, ..., ln (1 ≤ li ≤ 109) — the initial lengths of the points. - The next m lines contain three space-separated integers each: xj, yj, and zj (1 ≤ xj ≤ yj ≤ n, 1 ≤ zj ≤ 109) — describing an operation that increases the lengths of the points from position xj to position yj by zj units. # Output Print one integer — the minimum possible length of the longest point after applying all operations. # Example Input ``` 5 3 1 2 3 4 5 1 3 2 2 5 3 3 5 1 ``` Output ``` 9 ``` # Explanation Initially, the points have lengths [1, 2, 3, 4, 5]. - After the first operation (1, 3, 2), the lengths become [3, 4, 5, 4, 5]. - After the second operation (2, 5, 3), the lengths become [3, 7, 8, 7, 8]. - After the third operation (3, 5, 1), the lengths become [3, 7, 9, 8, 9]. The longest point has a length of 9, and it\'s not possible to achieve a shorter maximum length after applying all operations.","solution":"def min_length_longest_point(n, m, initial_lengths, operations): # Create an array representing the increase increase = [0] * (n + 1) # Process each operation for x, y, z in operations: increase[x - 1] += z if y < n: increase[y] -= z # Apply the increase array to initial_lengths current_increase = 0 for i in range(n): current_increase += increase[i] initial_lengths[i] += current_increase # Return the minimum possible length of the longest point return max(initial_lengths)"},{"question":"You are given a list of integers. Your task is to find the maximum possible sum of its elements such that no two consecutive elements are taken for the sum. For example, if the list is [3, 2, 5, 10, 7], the possible sums are: - Taking elements at indices 0, 2, and 4 => 3 + 5 + 7 = 15 - Taking elements at indices 1 and 3 => 2 + 10 = 12 So, the maximum sum is 15. You need to implement this as a function `max_non_consecutive_sum` that takes a list of integers as input and returns an integer which is the maximum sum of its elements such that no two consecutive elements are taken for the sum. Function signature: ```python def max_non_consecutive_sum(nums: List[int]) -> int: ``` # Input - A single line containing integers separated by spaces. The number of integers is between 1 and 1000 and each integer is between -10^6 and 10^6. # Output - A single integer which is the maximum possible sum. # Example Input: ``` 3 2 5 10 7 ``` Output: ``` 15 ``` Input: ``` -5 10 -100 200 -1 ``` Output: ``` 210 ``` # Constraints - The list will have at least one element. - Negative values are allowed in the input list.","solution":"def max_non_consecutive_sum(nums): Returns the maximum sum of elements such that no two consecutive elements are taken. if not nums: return 0 if len(nums) == 1: return max(0, nums[0]) incl = max(0, nums[0]) # max sum including current element excl = 0 # max sum excluding current element for num in nums[1:]: new_excl = max(incl, excl) # max sum when current element is excluded incl = excl + max(0, num) # max sum when current element is included excl = new_excl return max(incl, excl)"},{"question":"A library keeps track of which books are borrowed and returned by its members. Each book has a unique ID and every member has a unique ID as well. The library has a rule that a member can borrow up to a certain number of books at any given time. When a member tries to borrow more books than the allowed limit, the request is denied. Your task is to implement a system to manage the borrowing and returning of books in the library. The system should be able to track the current number of books each member has borrowed and handle requests for borrowing and returning books. The first line of the input contains three integers n, m, and l (1 leq n, m leq 10^5, 1 leq l leq 10) — the number of members, the number of books, and the maximum number of books a member can borrow at once, respectively. The next line contains q (1 leq q leq 10^5) — the number of operations. Each of the next q lines contains an operation in one of the following formats: - \\"BORROW x y\\" — Member with ID x wants to borrow the book with ID y. x and y are integers (1 leq x leq n, 1 leq y leq m). - \\"RETURN x y\\" — Member with ID x wants to return the book with ID y. x and y are integers (1 leq x leq n, 1 leq y leq m). For every \\"BORROW\\" operation, if the member can borrow the book (i.e., they haven\'t exceeded the limit and the book is not currently borrowed by another member), print \\"SUCCESS\\". Otherwise, print \\"FAIL\\". For every \\"RETURN\\" operation, if the member currently has the book borrowed, print \\"SUCCESS\\". Otherwise, print \\"FAIL\\". **Example:** Input: ``` 2 3 2 5 BORROW 1 1 BORROW 1 2 BORROW 1 3 RETURN 1 2 BORROW 1 3 ``` Output: ``` SUCCESS SUCCESS FAIL SUCCESS SUCCESS ```","solution":"def library_system(members, books, max_limit, operations): # Initialize the data structures borrowed_books = {} # book_id -> member_id member_borrow_count = {} # member_id -> number_of_books # Initialize borrow count for each member to 0 for member_id in range(1, members + 1): member_borrow_count[member_id] = 0 results = [] # Process each operation for operation in operations: op_parts = operation.split() command = op_parts[0] member_id = int(op_parts[1]) book_id = int(op_parts[2]) if command == \\"BORROW\\": if book_id not in borrowed_books and member_borrow_count[member_id] < max_limit: borrowed_books[book_id] = member_id member_borrow_count[member_id] += 1 results.append(\\"SUCCESS\\") else: results.append(\\"FAIL\\") elif command == \\"RETURN\\": if book_id in borrowed_books and borrowed_books[book_id] == member_id: borrowed_books.pop(book_id) member_borrow_count[member_id] -= 1 results.append(\\"SUCCESS\\") else: results.append(\\"FAIL\\") return results"},{"question":"There is a knight on an infinitely large chessboard. The knight starts at the position (0, 0) and makes moves similar to that in a traditional chess game: each move is an L-shape (2 cells in one direction and then 1 cell in a perpendicular direction). Given a sequence of moves, determine the position of the knight after completing all the moves. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of moves. Each of the next n lines contains one of the 8 possible knight moves represented by a pair of integers (dx, dy) describing the change in the knight\'s x and y coordinates respectively. The possible moves are: (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) Output the final position of the knight as two integers separated by a space. **Example:** Input: 5 2 1 2 -1 -2 1 -1 2 1 -2 Output: 2 1 In this example, the knight starts at (0, 0), moves to (2, 1) after the first move, to (4, 0) after the second move, to (2, 1) after the third move, to (1, 3) after the fourth move, and finally to (2, 1) after the fifth move.","solution":"def find_knight_position(moves): Given a list of moves, determine the final position of the knight starting from (0,0). :param moves: List of tuples representing the moves (dx, dy). :return: Final position as a tuple (x, y). x, y = 0, 0 for dx, dy in moves: x += dx y += dy return x, y"},{"question":"You are given a list of students\' exam scores and you are required to find the median score after each addition of a new score to the list. The median is the middle value in an ordered list of numbers. If the list length is even, the median is the average of the two middle numbers. The input contains multiple lines. The first line contains a single integer n (1 ≤ n ≤ 10^5) representing the number of scores. Each of the next n lines contains a single integer score_i (0 ≤ score_i ≤ 100), representing the score of the i-th student added to the list. For each score added, print the median of the scores in the list so far. Use a separate line for each output of the median. Example: Input: 5 1 3 4 2 5 Output: 1 2 3 3 3 Explanation: - After adding the first score, the list is [1], and the median is 1. - After adding the second score, the list is [1, 3], and the median is (1 + 3) / 2 = 2. - After adding the third score, the list is [1, 3, 4], and the median is 3. - After adding the fourth score, the list is [1, 2, 3, 4], and the median is (2 + 3) / 2 = 2.5 (rounded to 3 in the output). - After adding the fifth score, the list is [1, 2, 3, 4, 5], and the median is 3.","solution":"import heapq class MedianFinder: def __init__(self): self.small = [] # max heap self.large = [] # min heap def add_num(self, num: int): heapq.heappush(self.small, -num) heapq.heappush(self.large, -heapq.heappop(self.small)) if len(self.small) < len(self.large): heapq.heappush(self.small, -heapq.heappop(self.large)) def find_median(self) -> float: if len(self.small) > len(self.large): return -self.small[0] else: return (-self.small[0] + self.large[0]) / 2.0 def find_running_medians(scores): median_finder = MedianFinder() medians = [] for score in scores: median_finder.add_num(score) medians.append(median_finder.find_median()) return medians"},{"question":"In order to address the current state of drug monitoring regarding individuals with diabetes, a new monitoring system is needed. The system has the task of processing various update notifications and sending alerts if certain trigger conditions are met. Specifically, the system processes three types of notifications: \'Add\', \'Modify\', and \'Alert\'. - \'Add patient_id drug\' adds a new patient with an ID specified by \'patient_id\' and the drug they are taking, specified by \'drug\'. Patients with the same \'patient_id\' cannot be added more than once. - \'Modify patient_id new_drug\' updates the existing drug information for the patient identified by \'patient_id\' to the new drug \'new_drug\'. It is guaranteed that the patient_id will exist before a \'Modify\' notification. - \'Alert patient_id\' sends an alert containing the current drug information for the patient identified by \'patient_id\'. It is guaranteed that the patient_id will exist before an \'Alert\' notification. The goal is to simulate the monitoring system\'s output. Given a series of notifications, print the needed alerts each on a new line. Input: - The first line contains a single integer, n (1 ≤ n ≤ 100) — the number of notifications. - The following n lines contain notifications in one of \'Add patient_id drug\', \'Modify patient_id new_drug\', or \'Alert patient_id\' format, where: - \'patient_id\' is a unique integer (1 ≤ patient_id ≤ 1000). - \'drug\' and \'new_drug\' are strings of at most 50 characters consisting of Latin letters and digits. Output: - For each \'Alert\' notification, print a line containing \'Patient patient_id is taking drug\', where \'patient_id\' is replaced by the patient\'s ID and \'drug\' is replaced by the drug they are taking. Example: Input: ``` 6 Add 101 insulin Add 102 metformin Alert 101 Modify 101 glipizide Alert 101 Alert 102 ``` Output: ``` Patient 101 is taking insulin Patient 101 is taking glipizide Patient 102 is taking metformin ``` The problem should be tackled by storing patient information in a suitable data structure and processing commands accordingly.","solution":"def process_notifications(n, notifications): patient_info = {} alerts = [] for notification in notifications: parts = notification.split() command = parts[0] patient_id = int(parts[1]) if command == \'Add\': drug = parts[2] if patient_id not in patient_info: patient_info[patient_id] = drug elif command == \'Modify\': new_drug = parts[2] patient_info[patient_id] = new_drug elif command == \'Alert\': drug = patient_info[patient_id] alerts.append(f\\"Patient {patient_id} is taking {drug}\\") return alerts"},{"question":"You are given a grid with `n` rows and `m` columns, initially containing only zeroes. You want to alternate the elements of the grid between 1\'s and 0\'s such that no two adjacent cells contain the same number. Two cells are considered adjacent if they share a side. Given `t` test cases, where each test case is described by two integers `n` and `m` indicating the number of rows and columns respectively (1 ≤ n, m ≤ 1000; 1 ≤ t ≤ 10), create valid grids for each test case. For each test case, output a valid grid with the specified dimensions, where adjacent cells always contain different numbers. # Input Format - The first line contains a single integer `t`, the number of test cases. - Each of the next `t` lines contains two integers `n` and `m`, representing the number of rows and columns. # Output Format For each test case, output a valid grid in `n` lines, each containing `m` integers (either 0 or 1), with adjacent cells containing different numbers. # Example Input ``` 2 3 3 2 4 ``` Output ``` 1 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 ``` In this example, there are two test cases. The first test case expects a grid of 3x3 which alternates between 1 and 0, while the second test case expects a grid of 2x4 with the same alternating pattern.","solution":"def create_alternating_grid(n, m): Generates an n x m grid where no two adjacent cells contain the same number. An alternating pattern of 1s and 0s is used for this purpose. grid = [] for i in range(n): row = [] for j in range(m): if (i + j) % 2 == 0: row.append(1) else: row.append(0) grid.append(row) return grid def generate_grids(test_cases): Generates grids for given test cases. Parameters: - test_cases: list of tuples, where each tuple contains (n, m) for a test case. Returns: - list of grids Each grid is a list of lists containing the alternating pattern. result = [] for n, m in test_cases: result.append(create_alternating_grid(n, m)) return result"},{"question":"You are given an array and a series of operations on this array. Each operation can be either a query to find the sum of a subarray or an update to change an element in the array to a new value. The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100,000) — the length of the array and the number of operations respectively. The second line of input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial values of the array. Each of the next q lines describes an operation. An operation of the first type is described by three integers ti = 1, li, ri, where 1 ≤ li ≤ ri ≤ n — the boundaries of the subarray for which the sum should be calculated. An operation of the second type is described by three integers ti = 2, pi, xi, where 1 ≤ pi ≤ n is the index of the element which must be updated to the new value xi (1 ≤ xi ≤ 10^9). For each operation of the first type, output a single integer — the sum of the elements in the specified subarray. Example: Input: 5 3 1 2 3 4 5 1 2 4 2 3 10 1 2 4 Output: 9 16 Explanation: 1. The first query is to find the sum of the subarray from index 2 to 4, which is 2 + 3 + 4 = 9. 2. The first update changes the element at index 3 to 10. The array becomes [1, 2, 10, 4, 5]. 3. The second query is to find the sum of the subarray from index 2 to 4 again, which is 2 + 10 + 4 = 16.","solution":"def perform_operations(n, q, array, operations): results = [] for op in operations: if op[0] == 1: # Query operation: Find the sum of the subarray li, ri = op[1], op[2] subarray_sum = sum(array[li-1:ri]) results.append(subarray_sum) elif op[0] == 2: # Update operation: Update element at position pi to new value xi pi, xi = op[1], op[2] array[pi-1] = xi return results # Example usage # n = 5, q = 3 # array = [1, 2, 3, 4, 5] # operations = [(1, 2, 4), (2, 3, 10), (1, 2, 4)] # Output should be [9, 16]"},{"question":"In a country called Graphland, there are several cities connected by bidirectional roads. Each road has a certain length (positive integer). The government\'s Department of Transportation wants to ensure that their road maintenance crews are deployed efficiently. To achieve this, they need to find the shortest path from a capital city to all other cities in the nation. You have been tasked to write a program that, given the map of the nation, computes the minimum distance from the capital city to each city. **Input** The input consists of: 1. An integer `n` (1 ≤ n ≤ 2000) representing the number of cities. 2. An integer `m` (0 ≤ m ≤ 10000) representing the number of roads. 3. An integer `c` (1 ≤ c ≤ n) representing the capital city. 4. `m` lines, each containing three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing a road between cities `u` and `v` with length `w`. **Output** Output a single line containing `n` integers, where the `i-th` integer is the minimum distance from the capital city to the `i-th` city. If a city is not reachable from the capital city, output `-1` for that city. **Example** Input ``` 5 6 1 1 2 2 1 3 5 2 3 1 2 4 4 3 4 2 4 5 1 ``` Output ``` 0 2 3 5 6 ``` Explanation: - The shortest path from city 1 to city 2 is of length 2. - The shortest path from city 1 to city 3 is 1 -> 2 -> 3, which is of length 3. - The shortest path from city 1 to city 4 is 1 -> 2 -> 3 -> 4, which is of length 5. - The shortest path from city 1 to city 5 is 1 -> 2 -> 3 -> 4 -> 5, which is of length 6. - The distance to the capital city itself is always 0. **Note** If there are multiple shortest paths to a city, any one of them can be provided as the answer. For cities that cannot be reached from the capital city, output `-1`.","solution":"import heapq def shortest_path_from_capital(n, m, c, roads): Computes the minimum distance from the capital city to each city in the nation. Parameters: n (int): Number of cities. m (int): Number of roads. c (int): The capital city. roads (List[Tuple[int, int, int]]): List of roads (u, v, w) where \'u\' and \'v\' are cities and \'w\' is the length of the road between them. Returns: List[int]: Minimum distances from the capital city to each city. adj_list = [[] for _ in range(n + 1)] for u, v, w in roads: adj_list[u].append((v, w)) adj_list[v].append((u, w)) distances = [float(\'inf\')] * (n + 1) distances[c] = 0 min_heap = [(0, c)] while min_heap: current_distance, current_city = heapq.heappop(min_heap) if current_distance > distances[current_city]: continue for neighbor, weight in adj_list[current_city]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) # Replace \'inf\' with \'-1\' for non-reachable cities result = [dist if dist != float(\'inf\') else -1 for dist in distances[1:]] return result"},{"question":"Given an array of integers, your task is to determine whether it is possible to partition the array into two non-empty subsets such that the sum of elements in both subsets is the same. If it is possible, print \\"YES\\", otherwise print \\"NO\\". The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) which describe the array. For each test case, output \\"YES\\" if it is possible to partition the array into two non-empty subsets with equal sum, otherwise print \\"NO\\". Example: Input: 5 1 5 11 5 Output: YES In the given example, the array can be partitioned into [1, 5, 5] and [11], both of which have the sum equal to 11. Hence, the output is \\"YES\\".","solution":"def can_partition_to_equal_sum(arr): Determines whether it is possible to partition the array into two subarrays with equal sum. Parameters: arr (list of int): The input array of integers. Returns: str: \\"YES\\" if it\'s possible to partition the array into two non-empty subsets with equal sum, \\"NO\\" otherwise. total_sum = sum(arr) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(arr) dp = [[False] * (target + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): dp[i][j] = dp[i - 1][j] if j >= arr[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j - arr[i - 1]] return \\"YES\\" if dp[n][target] else \\"NO\\""},{"question":"Given an integer n, you are asked to transform it into a palindrome by reversing its digits and adding the result to the original number. If the sum is not a palindrome, repeat the process until the sum is a palindrome. The task is to find the resulting palindrome and the number of iterations required to reach it. Note that single digit numbers are considered palindromes. The first line contains a single integer n (1 ≤ n ≤ 10^5). Print two space-separated integers: the resulting palindrome and the number of iterations required to reach it. Example: Input: 96 Output: 121 1 Explanation: 96 + 69 = 165 (not a palindrome) 165 + 561 = 726 (not a palindrome) 726 + 627 = 1353 (not a palindrome) 1353 + 3531 = 4884 (palindrome) The resulting palindrome is 4884 and it took 4 iterations to reach it.","solution":"def is_palindrome(number): Check if the given integer is a palindrome. str_num = str(number) return str_num == str_num[::-1] def reverse_number(number): Return the reverse of the given integer. return int(str(number)[::-1]) def palindrome_transform(n): Transform the given integer into a palindrome by repeatedly adding the reversed number to itself until the sum is a palindrome. Return the resulting palindrome and the number of iterations required. iterations = 0 while not is_palindrome(n): reversed_n = reverse_number(n) n += reversed_n iterations += 1 return n, iterations"},{"question":"You are given an integer n and an array of integers a where the length of a is 2n. Every integer between 1 and n appears exactly twice in a. You must rearrange the array a such that for each integer i (1 ≤ i ≤ n), the two occurrences of i in the rearranged array are as far apart as possible. The first line contains a single integer n (1 ≤ n ≤ 10^5). The second line contains 2n integers which represent the array a. Print 2n integers which represent the rearranged array. # Example: Input ``` 3 1 2 3 2 1 3 ``` Output ``` 1 2 1 3 2 3 ``` Note: The choice of output arrays can vary as long as the condition is met. Another valid output could be `3 1 2 3 2 1`.","solution":"def rearrange_array(n, a): Rearranges the array \'a\' such that for each integer i (1 ≤ i ≤ n), the two occurrences of \'i\' in the rearranged array are as far apart as possible. from collections import defaultdict positions = defaultdict(list) for index, value in enumerate(a): positions[value].append(index) rearranged = [-1] * (2 * n) last_pos = [-1] * n for i in range(1, n + 1): first, second = positions[i] for pos in range(2 * n): if rearranged[pos] == -1: if last_pos[i - 1] == -1: rearranged[pos] = i last_pos[i - 1] = pos elif (pos - last_pos[i - 1]) >= n: rearranged[pos] = i break return rearranged # Example usage: # n = 3 # a = [1, 2, 3, 2, 1, 3] # print(rearrange_array(n, a)) # Example output: [1, 2, 1, 3, 2, 3] or any valid rearrangement"},{"question":"You are working in a logistics company, and you are assigned the task of optimizing the delivery route for a set of packages that need to be delivered within a city. The city is represented as a grid of streets with n times n intersections, where each intersection can be represented by coordinates (i, j) where 1 le i, j le n. Each package has a specific starting intersection and a destination intersection. Delivering a package from its starting point to its destination involves only moving vertically and horizontally along the grid\'s streets. The cost of moving from one intersection to an adjacent intersection is always 1. To help optimize the delivery route, you need to find the shortest distance (in terms of number of intersections traversed) for each package. The first line of the input contains an integer n (2 le n le 1000), the size of the grid, and an integer k (1 le k le 100000), the number of packages to be delivered. Each of the next k lines contains four integers x_1, y_1, x_2, y_2 (1 le x_1, y_1, x_2, y_2 le n), representing the starting intersection (x_1, y_1) and the destination intersection (x_2, y_2) of one package. For each package, output the shortest distance from its starting point to its destination. # Input: - The first line contains two integers, n and k. - Each of the next k lines contains four integers, x_1, y_1, x_2, y_2. # Output: - Print k integers. The i-th integer represents the shortest distance for the i-th package. # Example Input: ``` 5 3 1 1 5 5 2 2 3 3 4 4 1 1 ``` # Example Output: ``` 8 2 6 ```","solution":"def shortest_distances(n, k, packages): Finds the shortest distance between the start and destination for each package. Args: n: int - the size of the grid (n x n). k: int - the number of packages. packages: list of tuples - each tuple contains (x1, y1, x2, y2) which represent the start and destination coordinates. Returns: list of int - the shortest distances for each package. distances = [] for (x1, y1, x2, y2) in packages: distance = abs(x1 - x2) + abs(y1 - y2) distances.append(distance) return distances"},{"question":"Given N points in a 2D plane, you need to find the distance of the farthest point from the origin (0, 0). Distance between two points (x1, y1) and (x2, y2) is defined as sqrt((x2 - x1)^2 + (y2 - y1)^2). The input consists of: - An integer N (1 leq N leq 10^5) — the number of points. - N lines, each containing two integers x_i and y_i (–10^9 leq x_i, y_i leq 10^9) representing the coordinates of the ith point. Output: - Print a single floating-point number — the distance of the farthest point from the origin, rounded to 6 decimal places. # Sample Input: ``` 3 1 1 2 2 3 3 ``` # Sample Output: ``` 4.242641 ``` # Explanation: The distances of the given points from the origin are: - The first point (1, 1) has a distance of sqrt((1-0)^2 + (1-0)^2) = sqrt(1 + 1) = sqrt(2) ≈ 1.414214. - The second point (2, 2) has a distance of sqrt((2-0)^2 + (2-0)^2) = sqrt(4 + 4) = sqrt(8) ≈ 2.828427. - The third point (3, 3) has a distance of sqrt((3-0)^2 + (3-0)^2) = sqrt(9 + 9) = sqrt(18) ≈ 4.242641. Among these, the distance 4.242641 is the farthest from the origin. Thus, the output is 4.242641 rounded to six decimal places.","solution":"import math def farthest_distance(n, points): max_dist = 0 for x, y in points: dist = math.sqrt(x**2 + y**2) if dist > max_dist: max_dist = dist return round(max_dist, 6)"},{"question":"Allen wants to build a seamless and efficient supply chain network for his startup. The company has ( n ) warehouses (numbered from 1 to ( n )) and ( m ) bidirectional roads connecting them. Each road ( i ) between warehouse ( u_i ) and warehouse ( v_i ) has a transportation cost ( c_i ). To optimize the supply chain, Allen decided to segment the network into clusters of warehouses such that the cost to access any warehouse within a cluster from any other warehouse within the same cluster does not exceed a given threshold ( K ). Your task is to write a program that determines the minimum number of clusters Allen needs to partition the warehouse network so that no cluster has an internal transportation cost exceeding ( K ). If it is not possible to satisfy this condition, return -1. The first line of the input contains three integers ( n ), ( m ), and ( K ) (1 ≤ ( n ) ≤ 100, 0 ≤ ( m ) ≤ 10,000, 0 ≤ ( K ) ≤ 1,000,000,000) — the number of warehouses, the number of roads, and the cost threshold respectively. Each of the next ( m ) lines describes a road with three integers ( u_i ), ( v_i ), and ( c_i ) (1 ≤ ( u_i ), ( v_i ) ≤ ( n ), 1 ≤ ( c_i ) ≤ 1,000,000,000). Output a single integer — the minimum number of clusters needed or -1 if it is not possible to partition the network with the given conditions. Example: Input: 5 6 10 1 2 5 2 3 4 3 4 8 4 5 2 2 5 9 1 5 14 Output: 1","solution":"def find_min_clusters(n, m, K, roads): def find_parent(parent, i): if parent[i] == i: return i return find_parent(parent, parent[i]) def union(parent, rank, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 if K == 0: return n roads = [(u - 1, v - 1, c) for u, v, c in roads] parent = [i for i in range(n)] rank = [0] * n roads.sort(key=lambda x: x[2]) components = n for u, v, c in roads: if c > K: break x = find_parent(parent, u) y = find_parent(parent, v) if x != y: union(parent, rank, x, y) components -= 1 return components"},{"question":"Given an integer array nums and an integer target, return the indices of the two numbers such that they add up to the target. You may assume that each input array has exactly one solution. Example: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example: Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Constraints: - The length of the input array should be in the range [2, 10^4]. - The value of each element in nums is constrained to [ -10^9, 10^9]. - The target value is constrained to [ -10^9, 10^9]. In your solution, you may not use the same element twice, and the solution must be returned in sorted index manner. Complete the function `def two_sum(nums, target):` that finds the two numbers that add up to the specified target and returns their indices.","solution":"def two_sum(nums, target): Given an integer array nums and an integer target, return the indices of the two numbers such that they add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return sorted([num_to_index[complement], i]) num_to_index[num] = i"},{"question":"You have a rectangular grid of size m times n, where each cell can either be empty or an obstacle. You are given the coordinates of a starting cell and a target cell on this grid. Your goal is to find the number of distinct paths from the start to the target, where each step can move either up, down, left, or right to an adjacent empty cell. You cannot move through obstacles or go outside the grid. Write a function to count the number of distinct paths from the start to the target cell. If there are no valid paths, return 0. Note that obstacles will be denoted by the value 1, and empty cells by the value 0. The start and target cells are always empty. # Input - The first line contains two integers, m and n (1 leq m, n leq 100) – the dimensions of the grid. - The next m lines each contain n integers, each being either 0 (empty) or 1 (obstacle). - The following line contains two integers, x_1 and y_1 (0 leq x_1 < m, 0 leq y_1 < n) – the coordinates of the starting cell. - The final line contains two integers, x_2 and y_2 (0 leq x_2 < m, 0 leq y_2 < n) – the coordinates of the target cell. # Output Print a single integer – the number of distinct paths from the start cell to the target cell. # Example Input 4 4 0 0 0 0 1 1 0 1 0 0 0 0 0 1 0 0 0 0 3 2 Output 2 # Explanation There are two distinct paths from (0, 0) to (3, 2): 1. (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) -> (3, 2) 2. (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (3, 2)","solution":"def num_paths(grid, start, end): Returns the number of distinct paths from start to end in the given grid. m, n = len(grid), len(grid[0]) start_x, start_y = start end_x, end_y = end directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == 0 def dfs(x, y): if (x, y) == (end_x, end_y): return 1 grid[x][y] = 1 paths = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): paths += dfs(nx, ny) grid[x][y] = 0 return paths return dfs(start_x, start_y) # Parsing the input format as a function def parse_input(): m, n = map(int, input().split()) grid = [] for _ in range(m): grid.append(list(map(int, input().split()))) start_x, start_y = map(int, input().split()) end_x, end_y = map(int, input().split()) return grid, (start_x, start_y), (end_x, end_y) if __name__ == \\"__main__\\": grid, start, end = parse_input() print(num_paths(grid, start, end))"},{"question":"Emma is organizing a programming competition and needs to assign rooms to the participants. There are `n` participants and `m` available rooms. Each room can hold an unlimited number of participants. Emma wants to assign the participants to the rooms in such a way that no room has an unfair advantage over another room in terms of participant skill levels. Participants are given a skill level `si` (where `1 ≤ si ≤ 10^9`) that indicates their proficiency in programming. Emma’s goal is to minimize the maximum skill level difference in each room after the assignment. The skill level difference in a room is defined as the difference between the highest and lowest skill levels assigned to that room. Given the skill levels of the participants and the number of rooms, determine the minimum possible maximum skill level difference among all rooms after an optimal distribution of participants. # Input - The first line contains two integers `n` and `m` (`1 ≤ m ≤ n ≤ 2 * 10^5`) — the number of participants and the number of rooms. - The second line contains `n` integers `s1, s2, ..., sn` (`1 ≤ si ≤ 10^9`) — the skill levels of the participants. # Output Print a single integer — the minimum possible maximum skill level difference across all rooms after an optimal assignment of participants. # Example Input ``` 5 2 8 2 4 6 10 ``` Output ``` 2 ``` # Explanation An optimal way to assign the participants could be: - Room 1: 8, 6 (Skill level difference = 8 - 6 = 2) - Room 2: 10, 4, 2 (Skill level difference = 10 - 2 = 8) However, we can optimize further: - Room 1: 10, 8 (Skill level difference = 10 - 8 = 2) - Room 2: 6, 4, 2 (Skill level difference = 6 - 2 = 4) Therefore, the minimum possible maximum skill level difference is 2.","solution":"def minimum_maximum_skill_diff(n, m, skill_levels): skill_levels.sort() def can_distribute_with_max_diff(max_diff): rooms = [[] for _ in range(m)] for skill in skill_levels: placed = False for room in rooms: if not room or skill - room[-1] <= max_diff: room.append(skill) placed = True break if not placed: return False return True left, right = 0, skill_levels[-1] - skill_levels[0] while left < right: mid = (left + right) // 2 if can_distribute_with_max_diff(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given a positive integer n. You need to determine if you can split n into two nonzero even integers a and b such that a + b = n. The first line contains a single integer t (1 ≤ t ≤ 1,000) — the number of test cases. Each test case consists of one line containing an integer n (2 ≤ n ≤ 10^9). For each test case, print \\"YES\\" if such a split is possible, otherwise print \\"NO\\". Examples: ``` Input 4 4 6 11 18 Output YES YES NO YES ``` Explanation: - For n=4, one possible split is 2 and 2. Both are nonzero even integers. - For n=6, one possible split is 2 and 4. Both are nonzero even integers. - For n=11, it is not possible to split into two nonzero even integers. - For n=18, one possible split is 8 and 10. Both are nonzero even integers.","solution":"def can_split_into_even_parts(n): Determines if n can be split into two nonzero even integers such that their sum is n. if n % 2 == 0 and n > 2: return \\"YES\\" return \\"NO\\""},{"question":"Sheldon, Leonard, and Penny love attending comic conventions. Each of them attends multiple conventions each year, and they have decided to see how many conventions all three of them attend together. Each friend has their own list of conventions they attended, and your task is to write a program that determines the number of conventions attended by all three friends. The input consists of three lines: 1. The first line contains a list of integers representing the convention IDs Sheldon attended. 2. The second line contains a list of integers representing the convention IDs Leonard attended. 3. The third line contains a list of integers representing the convention IDs Penny attended. Each list is sorted in ascending order and contains distinct integers. Output a single integer that is the number of conventions attended by all three friends. Example: ``` Input: 1 3 5 7 9 3 5 7 11 5 6 7 Output: 2 ```","solution":"def count_common_conventions(sheldon, leonard, penny): Returns the number of conventions attended by all three friends. sheldon_set = set(sheldon) leonard_set = set(leonard) penny_set = set(penny) common_conventions = sheldon_set & leonard_set & penny_set return len(common_conventions) # Example usage sheldon_list = [1, 3, 5, 7, 9] leonard_list = [3, 5, 7, 11] penny_list = [5, 6, 7] print(count_common_conventions(sheldon_list, leonard_list, penny_list)) # Output: 2"},{"question":"You are given an array of integers and an integer k. Your task is to find the maximum possible sum of a subarray of length k that contains at least one even number. A subarray is defined as a contiguous segment of the array. For example, if the array is [1, 2, 3, 4, 5] and k is 3, some possible subarrays of length 3 are [1, 2, 3], [2, 3, 4], and [3, 4, 5]. Your solution should be efficient for large arrays, where n could be up to 100,000. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100000). The next line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9). Print a single integer, the maximum possible sum of a subarray of length k that contains at least one even number. If no such subarray exists, print -1.","solution":"def max_subarray_with_even(nums, n, k): max_sum = -1 # Initialize to -1 in case no valid subarray is found current_sum = 0 has_even = False for i in range(k): current_sum += nums[i] if nums[i] % 2 == 0: has_even = True if has_even: max_sum = current_sum for i in range(k, n): current_sum += nums[i] - nums[i - k] if nums[i] % 2 == 0: has_even = True if nums[i - k] % 2 == 0: has_even = any(num % 2 == 0 for num in nums[i - k + 1:i + 1]) if has_even and current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"In a magical land, there are n castles arranged in a straight line. Each castle has a certain number of diamonds and a designated knight to defend it. The i-th castle contains di diamonds and is protected by a knight with a strength of ki. A group of thieves plans to rob the castles, but they can only target unprotected castles (castles without knights). To make the land safe, you need to strategically assign the knights to protect the castles such that the total number of diamonds in the unprotected castles is minimized. Note that a knight can only protect the castle he is assigned to, and no two or more castles share knights. Given the number of castles, the number of knights, the number of diamonds in each castle, and the strength of each knight, determine the minimum number of diamonds that will remain unprotected. The first line of the input contains two integers n and m (1 ≤ m ≤ n ≤ 10^5), representing the number of castles and knights, respectively. The second line contains n integers d1, d2, …, dn (0 ≤ di ≤ 10^4), where di is the number of diamonds in the i-th castle. The third line contains m integers k1, k2, …, km (1 ≤ ki ≤ n), where ki represents the strength of the i-th knight. A knight with the strength of ki can protect the ki-th castle. Print the minimum number of diamonds that remain unprotected after all possible strategic assignments of knights to castles. Example: Input: 5 3 8 3 6 2 5 1 3 5 Output: 5 Explanation: Knight with strength 1 will protect castle 1 (8 diamonds), knight with strength 3 will protect castle 3 (6 diamonds), knight with strength 5 will protect castle 5 (5 diamonds). Castles 2 with 3 diamonds and castle 4 with 2 diamonds remain unprotected. The total number of diamonds remaining unprotected is 3 + 2 = 5.","solution":"def minimum_unprotected_diamonds(n, m, diamonds, knight_strength): protected = set(knight_strength) unprotected_diamonds = sum(diamonds[i] for i in range(n) if i + 1 not in protected) return unprotected_diamonds # Example usage: # n = 5 # m = 3 # diamonds = [8, 3, 6, 2, 5] # knight_strength = [1, 3, 5] # print(minimum_unprotected_diamonds(n, m, diamonds, knight_strength)) # Output: 5"},{"question":"You are given an array `heights` of n integers where `heights[i]` represents the height of the i-th person. The goal is to rearrange these people in a queue such that: - Every person except the first has a taller person in front of them. - The first person in the queue can have any height. Write a function `rearrangeQueue(heights)` that takes an array `heights` and returns one possible arrangement of the queue satisfying the above conditions. If there are multiple solutions, any of them is acceptable. # Input: - An integer `n` (1 ≤ n ≤ 1000), the number of people. - An array `heights` of `n` integers (1 ≤ heights[i] ≤ 1000). # Output: - A possible arrangement of the queue which is an array of `n` integers. # Examples: Input: ``` n = 5 heights = [150, 160, 155, 165, 170] ``` Output: ``` [150, 160, 155, 165, 170] ``` In this case, the arrangement `[150, 160, 155, 165, 170]` satisfies the conditions: - The first person can be any height (150). - Each person except the first has a taller person in front of them: - 160 is taller than 150, - 155 is shorter than 160, - 165 is taller than 155, - 170 is taller than 165. # Note: - It is guaranteed that such an arrangement is possible. If there are multiple possible arrangements, return any one of them.","solution":"def rearrangeQueue(heights): Rearranges the heights array so that every person except the first has a taller person in front. if len(heights) <= 1: return heights # Sort the array to easily pick the tallest person and then the next tallest sorted_heights = sorted(heights, reverse=True) # Start rearranging with the tallest person first, followed by the next tallest first_person = sorted_heights.pop(0) rearranged_queue = [first_person] + sorted_heights return rearranged_queue"},{"question":"A new bridge is being built over a river in a city and the local government wants to optimize the design. The plan involves connecting several districts on the left bank of the river to several districts on the right bank. Each district is characterized by a certain amount of traffic demand. The government has compiled data on the expected daily traffic in each district. The task is to determine the maximum possible traffic that can be accommodated on the bridge while considering the district capacities and the bridge\'s capacity limitations. You are given two lists, `left_bank` and `right_bank`, representing the traffic demand of districts on the left and right banks, respectively. The bridge can handle no more than `C` units of traffic at any one time. Your task is to determine the maximum possible traffic flow from the left bank to the right bank that does not exceed the capacity `C` at any point. # Input The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of districts on the left bank. The second line contains `n` integers separated by spaces, representing the traffic demands of the districts on the left bank. The third line contains an integer `m` (1 ≤ m ≤ 100,000) — the number of districts on the right bank. The fourth line contains `m` integers separated by spaces, representing the traffic demands of the districts on the right bank. The fifth line contains an integer `C` (1 ≤ C ≤ 10^9) — the maximum traffic capacity of the bridge. # Output Print a single integer — the maximum traffic flow from the left bank to the right bank without exceeding the bridge\'s capacity. # Example Input ``` 4 10 20 30 40 3 15 25 35 50 ``` Output ``` 90 ``` # Explanation Here\'s how the example works: The total demand on the left bank is 10 + 20 + 30 + 40 = 100, and on the right bank, it\'s 15 + 25 + 35 = 75. However, the maximum traffic that can be accommodated at any one time is 50 units, so the maximum possible flow without exceeding the bridge capacity is limited to 90 units from the left bank (10+20+30+40) since the bridge does not exceed its capacity (50 units at any point of time).","solution":"def max_possible_traffic(left_bank, right_bank, C): Calculate the maximum traffic flow from the left bank to the right bank without exceeding the bridge\'s capacity at any point. :param left_bank: List[int] - traffic demands on the left bank :param right_bank: List[int] - traffic demands on the right bank :param C: int - maximum capacity of the bridge :return: int - maximum possible traffic flow total_left = sum(left_bank) total_right = sum(right_bank) # Find the maximum possible traffic flow constrained by bridge capacity return min(total_left, total_right, C)"},{"question":"You are given an integer array arr of length n. You can perform the following operation on the array any number of times: Select two indices i and j (i ne j) and swap the elements arr[i] and arr[j]. Your task is to determine if it is possible to sort the array in non-decreasing order with any number of such operations. If it is possible, print \\"YES\\" (without quotes), otherwise print \\"NO\\" (without quotes). The first line contains a single integer t (1 le t le 10): the number of test cases. The first line of each test case contains an integer n (1 le n le 100): the length of the array. The second line of each test case contains n integers arr_1, arr_2, ldots, arr_n (-10^9 le arr_i le 10^9): the elements of the array. For each test case, output \\"YES\\" if it is possible to sort the array with any number of allowed operations, otherwise output \\"NO\\". Note: In the first test case, you can swap any two elements to achieve the sorted order. In the second test case, it is already sorted thus the answer is \\"YES\\".","solution":"def can_sort_array(t, test_cases): results = [] for case_index in range(t): n, arr = test_cases[case_index] # Sorting the array is possible for any array because we can always swap elements to achieve it. results.append(\\"YES\\") return results"},{"question":"Given a directed graph with `n` vertices and `m` edges, where each vertex represents a city and each directed edge represents a one-way road connecting two cities, your task is to determine the shortest path from a given starting city `s` to all other cities. If a city is not reachable from the starting city, the distance to that city should be reported as `-1`. You need to handle multiple test cases efficiently. # Input 1. The first line contains an integer `t` (1 le t le 100) — the number of test cases. 2. For each test case: - The first line contains two integers `n` and `m` (1 le n, m le 10^5) — the number of vertices and edges, respectively. - The next `m` lines each contain two integers `u` and `v` (1 le u, v le n), which indicates there is a directed edge from vertex `u` to vertex `v`. - The last line of the test case contains an integer `s` (1 le s le n) — the starting city. # Output For each test case, output a single line containing `n` integers, where the `i`-th integer is the shortest distance from the starting city `s` to city `i` (1-based indexing). If a city is not reachable, print `-1` for that city. # Example Input ``` 2 4 4 1 2 2 3 3 4 4 1 1 3 2 1 2 2 3 2 ``` Output ``` 0 1 2 -1 -1 0 1 ``` # Note In the first test case, the shortest paths from city `1` are: - To city `2`: Distance = 1 - To city `3`: Distance = 2 - To city `4`: Not reachable (print `-1`) In the second test case, the shortest paths from city `2` are: - To city `1`: Not reachable (print `-1`) - To city `3`: Distance = 1","solution":"from collections import deque, defaultdict def shortest_path_from_city(t, test_cases): results = [] for case in test_cases: n, m, edges, s = case graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Initialize distances distances = [-1] * n distances[s - 1] = 0 # BFS queue = deque([s]) while queue: current = queue.popleft() current_distance = distances[current - 1] for neighbor in graph[current]: if distances[neighbor - 1] == -1: distances[neighbor - 1] = current_distance + 1 queue.append(neighbor) results.append(distances) return results def convert_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, lines[index].split()) edges = [] for i in range(m): u, v = map(int, lines[index + 1 + i].split()) edges.append((u, v)) s = int(lines[index + 1 + m]) test_cases.append((n, m, edges, s)) index += 2 + m return t, test_cases def format_output(results): output_str = \'n\'.join(\' \'.join(map(str, res)) for res in results) return output_str"},{"question":"You are given an array of integers `nums` and an integer `target`. Your task is to find all unique quadruplets in the array that sum up to the given `target`. The solution set must not contain duplicate quadruplets. # Function Signature: ```python def four_sum(nums: List[int], target: int) -> List[List[int]]: ``` # Input: - `nums` (List[int]): An array of integers. (1 ≤ len(nums) ≤ 2000, -10^9 ≤ nums[i] ≤ 10^9) - `target` (int): An integer representing the sum of the quadruplet. (-10^9 ≤ target ≤ 10^9) # Output: - `List[List[int]]`: A list of lists of integers, where each list contains four integers that add up to `target`. The quadruplets should be sorted in non-decreasing order, and the output list should be sorted in lexicographical order. # Example: ```python assert four_sum([1, 0, -1, 0, -2, 2], 0) == [ [-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1] ] assert four_sum([2, 2, 2, 2, 2], 8) == [ [2, 2, 2, 2] ] ``` # Explanation: - In the first example, there are three unique quadruplets that sum up to 0: `[-2, -1, 1, 2]`, `[-2, 0, 0, 2]`, and `[-1, 0, 0, 1]`. - In the second example, the only quadruplet summing up to 8 is `[2, 2, 2, 2]`. The function should be efficient enough to handle the maximum constraints.","solution":"from typing import List def four_sum(nums: List[int], target: int) -> List[List[int]]: nums.sort() n = len(nums) result = [] for i in range(n): if i > 0 and nums[i] == nums[i-1]: continue # skip duplicates for j in range(i + 1, n): if j > i + 1 and nums[j] == nums[j-1]: continue # skip duplicates left, right = j + 1, n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: result.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 # skip duplicates while left < right and nums[right] == nums[right - 1]: right -= 1 # skip duplicates left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return result"},{"question":"Consider that you have a rectangular grid of size n times m consisting of empty cells represented by 0. You are given a set of k cells that are blocked, represented by 1. Your task is to determine the number of distinct paths from the top-left corner of the grid (1, 1) to the bottom-right corner (n, m) such that the path does not pass through any blocked cell. A move is considered valid if it includes one of the following steps: 1. Move right from cell (i, j) to cell (i, j+1) if it is within bounds and not blocked. 2. Move down from cell (i, j) to cell (i+1, j) if it is within bounds and not blocked. For each query, you need to compute the number of distinct paths from the top-left corner to the bottom-right corner of the grid, modulo 10^9 + 7. The first line of the input contains one integer q (1 le q le 50) — the number of queries. Then q queries follow. Each query is described as follows: - The first line contains three integers n, m, and k (1 le n, m le 100, 0 le k le n times m) — the dimensions of the grid and the number of blocked cells. - The following k lines contain two integers x and y (1 le x le n, 1 le y le m) — the row and column indices of a blocked cell. For each query, print the answer modulo 10^9 + 7 indicating the number of distinct paths from the top-left corner to the bottom-right corner that do not pass through any blocked cells. Example: Input: ``` 2 3 3 1 2 2 3 3 2 2 2 2 3 ``` Output: ``` 2 1 ```","solution":"MOD = 10**9 + 7 def number_of_paths(n, m, blocked_cells): # Create a 2D dp array to store the number of ways to reach each cell dp = [[0] * m for _ in range(n)] # If the starting cell is blocked, there is no path if (1, 1) in blocked_cells: return 0 # Initialize the starting point dp[0][0] = 1 for i in range(n): for j in range(m): if (i+1, j+1) in blocked_cells: dp[i][j] = 0 # Blocked cells will have 0 paths else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1] def process_queries(queries): results = [] for query in queries: n, m, k, blocked_cells = query results.append(number_of_paths(n, m, blocked_cells)) return results"},{"question":"Sarah has recently been interested in the Fibonacci sequence and how it can be modified. She defines a sequence as `modified-fib` such that each element is the sum of the previous `k` elements, where `k` is a given positive integer. The modified-fib sequence starts with `k` initial elements which are all `1`. For example, if `k = 3`, the sequence will start as `1, 1, 1`, and the following elements will be the sum of the previous 3 elements: `1, 1, 1, 3, 5, 9, 17, ...` Sarah wants to determine the `n`th element of the `modified-fib` sequence. Given the values of `k` and `n`, can you help Sarah calculate the `n`th element of the `modified-fib` sequence? The first line contains two integers `k` and `n` (`1 <= k <= 1000`, `1 <= n <= 10^6`) – the number of initial elements and the position in the sequence which Sarah is interested in. Output a single integer – the `n`th element of the `modified-fib` sequence. # Example: Input: ``` 3 6 ``` Output: ``` 9 ``` Note: In the example above, the modified-fib sequence is `1, 1, 1, 3, 5, 9, ...`. The 6th element in the sequence is `9`.","solution":"def modified_fib(k, n): Calculate the n-th element of the modified Fibonacci sequence where each element is the sum of the previous k elements. if n <= k: return 1 # Initial sequence of k elements each being 1 sequence = [1] * k # Generate sequence until the n-th element for i in range(k, n): next_element = sum(sequence[-k:]) # Sum of the last k elements sequence.append(next_element) return sequence[n-1]"},{"question":"The citizens of Farmville are planning to construct a new water supply system for their town. They want to build a minimal cost pipeline network to connect their n houses. Each pair of houses (i, j) has a specific pipeline construction cost cij. The city council decided that they will use Kruskal’s algorithm to find the Minimum Spanning Tree (MST) for the pipeline network. Can you help them determine the total cost of constructing the pipeline network? The first line contains an integer n (2 ≤ n ≤ 500) — the number of houses in Farmville. Each of the following n lines contains n integers. The j-th integer in the i-th line is cij (1 ≤ cij ≤ 10^6), which is the cost to build a pipeline between house i and house j. Note that cij = cji and cii = 0 for all 1 ≤ i, j ≤ n. Print the total cost required to construct the pipeline network. Example: Input: ``` 4 0 1 3 4 1 0 2 5 3 2 0 6 4 5 6 0 ``` Output: ``` 7 ``` Explanation: The minimal cost network that connects all houses forms an MST. In the example given: - Connects house 1 and house 2 with a pipeline of cost 1. - Connects house 2 and house 3 with a pipeline of cost 2. - Connects house 1 and house 4 with a pipeline of cost 4. So, the total cost is 1 + 2 + 4 = 7.","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [0] * size def find(self, p): if self.parent[p] != p: self.parent[p] = self.find(self.parent[p]) return self.parent[p] def union(self, p, q): rootP = self.find(p) rootQ = self.find(q) if rootP != rootQ: if self.rank[rootP] > self.rank[rootQ]: self.parent[rootQ] = rootP elif self.rank[rootP] < self.rank[rootQ]: self.parent[rootP] = rootQ else: self.parent[rootQ] = rootP self.rank[rootP] += 1 def min_cost_to_connect_houses(n, cost): edges = [] for i in range(n): for j in range(i + 1, n): edges.append((cost[i][j], i, j)) edges.sort() uf = UnionFind(n) total_cost = 0 for weight, u, v in edges: if uf.find(u) != uf.find(v): uf.union(u, v) total_cost += weight return total_cost"},{"question":"Anna recently celebrated her birthday and received n distinct books as gifts. Each book has a unique title and a specific width. She decided to arrange the books on a shelf in such a way that she maximizes the number of pairs of books with the same width that are placed next to each other. You need to determine the maximum number of adjacent pairs of books with the same width that Anna can achieve. The first line of the input contains an integer n (2 ≤ n ≤ 1000), representing the number of books Anna received. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000), where wi represents the width of the i-th book. Output a single integer – the maximum number of adjacent pairs of books with the same width. Example: Input: 6 4 2 2 3 4 4 Output: 1 Explanation: Anna can arrange the books in the following order to maximize the number of adjacent pairs with the same width: 4 4 2 2 3. Thus, there is only 1 pair (4, 4) with the same width that are adjacent to each other.","solution":"def max_adjacent_pairs(n, widths): from collections import Counter if n < 2: return 0 width_counts = Counter(widths) max_pairs = 0 for width in width_counts: count = width_counts[width] pairs = count // 2 max_pairs += pairs if max_pairs > 0: return 1 else: return 0"},{"question":"A social media platform has asked you to implement a feature to track viral posts. A post is considered viral if it has more than `z` likes. The platform has a system where users can like and unlike posts. Each like or unlike action triggers a need to check and return whether the post is viral or not. An action is of the form `+ p` indicating a like for post `p` or `- p` indicating an unlike for post `p`. Your task is to respond to a series of like and unlike actions and determine the viral status of posts based on the given threshold `z`. The first line of the input contains two integers `n` and `z` (1 ≤ n ≤ 100000, 1 ≤ z ≤ 100000) — the number of actions and the viral threshold, respectively. The next `n` lines contain a string `s` and an integer `p` (1 ≤ p ≤ 100), denoting the type of action (either `+` or `-`) and the ID of the post, respectively. For each action, print \\"VIRAL\\" if the post has become viral due to that action and \\"NOT VIRAL\\" otherwise. Viral status should be re-evaluated after each action. # Example: Input: ``` 5 3 + 1 + 1 + 1 - 1 + 1 ``` Output: ``` NOT VIRAL NOT VIRAL VIRAL NOT VIRAL NOT VIRAL ``` Explanation: - The first like increments the likes for post `1` to `1`. Since `1 < 3`, it is \\"NOT VIRAL\\". - The second like increments the likes for post `1` to `2`. Since `2 < 3`, it is \\"NOT VIRAL\\". - The third like increments the likes for post `1` to `3` and makes it \\"VIRAL\\". - The unlike decrements the likes for post `1` to `2`. Since `2 < 3`, it is \\"NOT VIRAL\\". - The final like increments the likes for post `1` to `3` again, and it becomes \\"VIRAL\\".","solution":"def viral_posts(n, z, actions): Determine the viral status of posts after each action. :param n: Number of actions :param z: Viral threshold (number of likes) :param actions: List of actions (each action is a tuple (action_type, post_id)) :return: List of results with either \\"VIRAL\\" or \\"NOT VIRAL\\" for each action likes = {} results = [] for action, post_id in actions: if post_id not in likes: likes[post_id] = 0 if action == \'+\': likes[post_id] += 1 else: if likes[post_id] > 0: likes[post_id] -= 1 if likes[post_id] >= z: results.append(\\"VIRAL\\") else: results.append(\\"NOT VIRAL\\") return results"},{"question":"A magical creature is causing mischief in your town by rearranging the letters in your messages. To stop it, you need to determine the number of possible distinct rearrangements (permutations) of the characters in your message that also form valid dictionary words. You are given a list of valid dictionary words, followed by a single scrambled word, and you need to determine how many distinct permutations of the scrambled word are valid according to the dictionary. The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of valid dictionary words. Each of the next n lines contains a valid dictionary word, consisting of lowercase Latin letters (1 ≤ length of each word ≤ 10). The final line contains a scrambled word s, also consisting of lowercase Latin letters (1 ≤ length of s ≤ 10). Output the number of distinct permutations of the scrambled word that are present in the dictionary. For example, given the dictionary {\\"cat\\", \\"tac\\", \\"act\\", \\"dog\\"} and the scrambled word \\"tca\\", there are 3 valid permutations (\\"cat\\", \\"tac\\", \\"act\\"), so the output would be 3. Note: You can assume that all the words in the dictionary are unique.","solution":"from itertools import permutations def count_valid_permutations(dictionary_words, scrambled_word): Returns the number of distinct permutations of the scrambled word that are present in the dictionary. valid_permutations_count = 0 # Generate all unique permutations of the scrambled word unique_permutations = set(permutations(scrambled_word)) # Convert dictionary words list to set for O(1) lookups dictionary_set = set(dictionary_words) # Convert each permutation tuple to a string and check if it\'s in the dictionary for perm in unique_permutations: if \'\'.join(perm) in dictionary_set: valid_permutations_count += 1 return valid_permutations_count"},{"question":"Winter is coming, and you, as a member of the Night\'s Watch, must prepare for the long nights ahead. There are a number of tasks, each with a specific duration, that need to be completed before the winter arrives. You have a list of tasks, and each task can only be performed during a certain time interval. However, due to limited resources, only one task can be done at any time. Your job is to determine the maximum number of tasks that can be completed. You are given a list of tasks, where each task is represented by a pair of integers (start_time, end_time), indicating the time at which the task starts and ends (inclusive). Write a function that takes a list of tasks and returns the maximum number of non-overlapping tasks that can be completed. # Input - The first line contains a single integer n (1 ≤ n ≤ 100,000), the number of tasks. - The next n lines each contain two integers start_time and end_time (0 ≤ start_time < end_time ≤ 1,000,000). # Output - Output a single integer, the maximum number of non-overlapping tasks that can be completed. # Example Input ``` 5 1 3 2 5 4 6 6 8 5 7 ``` Output ``` 3 ``` # Explanation In this example, the maximum number of non-overlapping tasks are: - Task 1: (1, 3) - Task 3: (4, 6) - Task 4: (6, 8) Thus, the output is 3.","solution":"def max_non_overlapping_tasks(tasks): Returns the maximum number of non-overlapping tasks that can be completed. :param tasks: List of tuples where each tuple contains two integers (start_time, end_time) :return: Integer representing the maximum number of non-overlapping tasks # Sort tasks by end time tasks.sort(key=lambda x: x[1]) count = 0 current_end_time = 0 for start, end in tasks: if start >= current_end_time: count += 1 current_end_time = end return count"},{"question":"Sam has a large rectangular field of size n x m, divided into unit cells. Each cell can either contain a plant or be empty. Sam wants to select a subgrid (a contiguous rectangular section of the field) that contains exactly K plants. Help Sam determine the number of such subgrids. The first line of the input contains three integers n, m, and K (1 ≤ n, m ≤ 100, 0 ≤ K ≤ n*m). The next n lines contain m integers each, where the j-th element of the i-th row is 1 if the cell (i, j) contains a plant, and 0 if it is empty. Output a single integer — the number of subgrids that contain exactly K plants. # Example Input: ``` 3 4 2 1 0 0 1 0 1 0 1 1 0 1 0 ``` Output: ``` 15 ``` # Explanation In this 3x4 grid, there are 15 subgrids containing exactly 2 plants. For example: - The subgrid from (1,1) to (1,4) contains exactly 2 plants. - The subgrid from (1,2) to (2,3) contains exactly 2 plants. - And so on. Help Sam determine the total number of such subgrids.","solution":"def count_subgrids_with_k_plants(n, m, K, grid): def subgrid_sum(x1, y1, x2, y2): sum_val = prefix_sum[x2][y2] if x1 > 0: sum_val -= prefix_sum[x1-1][y2] if y1 > 0: sum_val -= prefix_sum[x2][y1-1] if x1 > 0 and y1 > 0: sum_val += prefix_sum[x1-1][y1-1] return sum_val # Create the prefix sum array prefix_sum = [[0]*m for _ in range(n)] prefix_sum[0][0] = grid[0][0] for i in range(1, n): prefix_sum[i][0] = prefix_sum[i-1][0] + grid[i][0] for j in range(1, m): prefix_sum[0][j] = prefix_sum[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): prefix_sum[i][j] = grid[i][j] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] count = 0 for x1 in range(n): for y1 in range(m): for x2 in range(x1, n): for y2 in range(y1, m): if subgrid_sum(x1, y1, x2, y2) == K: count += 1 return count"},{"question":"You are given an array of n integers. A subarray of this array is considered \\"beautiful\\" if its length is even and the sum of its elements is divisible by a given integer k. Your task is to find the length of the longest beautiful subarray. If there are multiple beautiful subarrays with the same maximum length, find the one that appears first. If there is no beautiful subarray, return 0. You should write a program to determine the maximum length of a beautiful subarray. Input: - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 100). - The second line contains n integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4). Output: - Print the length of the longest beautiful subarray. If there is no beautiful subarray, print 0. Example: Input: 6 5 1 2 3 4 5 6 Output: 4 In this example, the longest beautiful subarray is [1, 2, 3, 4] with a sum of 10, which is divisible by 5. So the output is 4.","solution":"def longest_beautiful_subarray(n, k, arr): Returns the length of the longest beautiful subarray. A beautiful subarray is defined as a subarray with an even length and a sum divisible by k. :param n: Number of elements in the array :param k: The integer divisor :param arr: List of integers :return: Length of the longest beautiful subarray max_length = 0 for start in range(n): for end in range(start + 2, n + 1, 2): subarray = arr[start:end] if sum(subarray) % k == 0: max_length = max(max_length, end - start) return max_length # Example usage n = 6 k = 5 arr = [1, 2, 3, 4, 5, 6] print(longest_beautiful_subarray(n, k, arr)) # Output 4"},{"question":"To celebrate \\"World Book Day\\", a local library is organizing a special event where they will arrange and display books in a particular manner. The library has a collection of books, each with a unique title and a specific number of pages. They want to showcase these books by arranging them in a particular order that meets specific criteria. The arrangement criteria are as follows: 1. The titles of the books should be arranged in lexicographic (alphabetical) order. 2. If two books have the same title, they should be arranged by the number of pages in ascending order. Given a list of books, help the library by writing a program that arranges the books according to the criteria above. # Input The input consists of multiple lines: - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of books in the collection. - The next `n` lines each contain a string `title` and an integer `pages` (1 ≤ pages ≤ 10^4), separated by a space. The string `title` represents the title of the book and consists of at most 100 English letters. # Output Print the list of books ordered as per the criteria: - Each line should contain the title and the number of pages of a book, separated by a space. # Example Input ``` 5 HarryPotter 300 LordOfTheRings 500 HarryPotter 450 AlicesAdventures 200 LordOfTheRings 700 ``` Output ``` AlicesAdventures 200 HarryPotter 300 HarryPotter 450 LordOfTheRings 500 LordOfTheRings 700 ``` In this example, the books are first sorted by their titles lexicographically, then by their number of pages in ascending order if they have the same title.","solution":"def arrange_books(n, books): Arrange books based on the given criteria. Parameters: n (int): Number of books. books (list of tuple): List of tuples where each tuple contains the title of the book and number of pages. Returns: list of tuple: Arranged list of books. # Sort the list of books by title first (lexicographic order) and then by number of pages (ascending order) books.sort(key=lambda book: (book[0], book[1])) return books"},{"question":"Design an algorithm to solve the following problem: Problem Statement You are given a sequence of `N` integers. A \\"peaked subarray\\" is defined as a contiguous subsequence that forms a peak at its center, i.e., it should increase up to a certain point, and then decrease. You need to find the length of the longest peaked subarray in the given sequence. If no such subarray exists, return 0. Input: - The first line contains an integer `N` (1 ≤ N ≤ 10^5), the number of elements in the sequence. - The second line contains `N` space-separated integers representing the elements of the sequence. Output: - Output the length of the longest peaked subarray. If there are no peaked subarrays, print 0. Example: # Example 1: **Input:** ``` 9 1 3 5 7 6 4 2 8 9 ``` **Output:** ``` 7 ``` **Explanation:** The longest peaked subarray is `1 3 5 7 6 4 2`, which has a length of 7. # Example 2: **Input:** ``` 5 1 2 3 4 5 ``` **Output:** ``` 0 ``` **Explanation:** There are no peaked subarrays in this sequence. Constraints: - You can assume all elements of the sequence are distinct. The expected complexity is O(N). Design an efficient algorithm that computes the result in a reasonable time frame given the constraints.","solution":"def longest_peaked_subarray_length(seq): Returns the length of the longest peaked subarray in the given sequence. If no such subarray exists, returns 0. N = len(seq) if N < 3: return 0 longest_peak_length = 0 for i in range(1, N-1): if seq[i-1] < seq[i] > seq[i+1]: # Check if seq[i] is a peak left = i - 1 right = i + 1 # Expand to the left while elements are increasing while left > 0 and seq[left-1] < seq[left]: left -= 1 # Expand to the right while elements are decreasing while right < N-1 and seq[right] > seq[right+1]: right += 1 current_peak_length = right - left + 1 longest_peak_length = max(longest_peak_length, current_peak_length) return longest_peak_length"},{"question":"A robotic arms controller system wants to optimize its tasks. The robot is required to pick and place items from a conveyor belt to a loading area. The conveyor belt is represented as an array of integers, where each integer represents an item type. The robot can perform two types of operations on this array: 1. Replace an item at a specific position with another item. 2. Determine the most frequent item type over a specified range of positions. Given an array of initial item types and a series of queries, where each query is either an update or a frequency check, your task is to process these queries. The first line of the input contains two integers, `n` (1 ≤ n ≤ 10^5) and `q` (1 ≤ q ≤ 10^5), representing the length of the array and the number of queries, respectively. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9), representing the initial item types on the conveyor belt. Each of the next `q` lines contains a query in one of the following formats: - `1 x y`: Replace the item at position `x` with item type `y` (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9). - `2 l r`: Determine the most frequent item type from position `l` to position `r` (1 ≤ l ≤ r ≤ n). For each query of the second type, output the most frequent item type in the specified range. If there are multiple item types with the same highest frequency, output the smallest item type. **Example:** Input: ``` 5 5 1 2 1 3 1 2 1 5 1 2 1 2 2 4 1 4 2 2 1 5 ``` Output: ``` 1 1 1 ``` Explanation: Initially, the array is `[1, 2, 1, 3, 1]`. - The first query asks for the most frequent item type from position 1 to 5, which is `1` (appears 3 times). - The second query changes the item at position 2 to `1`, so the array becomes `[1, 1, 1, 3, 1]`. - The third query asks for the most frequent item type from position 2 to 4, which is `1` (appears 2 times). - The fourth query changes the item at position 4 to `2`, so the array becomes `[1, 1, 1, 2, 1]`. - The fifth query asks for the most frequent item type from position 1 to 5, which is `1` (appears 4 times).","solution":"from collections import defaultdict from bisect import insort_left, bisect_left, bisect_right # Function to handle the queries def process_queries(n, q, items, queries): # Store the initial items in a list arr = items[:] # Store the results for query type 2 results = [] # Dictionary to keep track of the frequency of items in the array frequency = defaultdict(int) for item in arr: frequency[item] += 1 # Function to replace item def replace_item(x, y): old_item = arr[x - 1] if old_item != y: frequency[old_item] -= 1 frequency[y] += 1 arr[x - 1] = y # Function to determine most frequent item type in range [l, r] def most_frequent_item(l, r): freq_map = defaultdict(int) for i in range(l-1, r): freq_map[arr[i]] += 1 # Find the most frequent item with smallest value in case of ties max_frequency = -1 most_frequent_item = float(\'inf\') for item, freq in freq_map.items(): if freq > max_frequency or (freq == max_frequency and item < most_frequent_item): max_frequency = freq most_frequent_item = item return most_frequent_item # Process each query for query in queries: if query[0] == 1: _, x, y = query replace_item(x, y) elif query[0] == 2: _, l, r = query results.append(most_frequent_item(l, r)) return results"},{"question":"A group of treasure hunters has discovered a sequence of ancient chests along a mystical path. Each chest has a certain number of coins, but not all chests are easy to open. The chests are arranged in a line from 1 to n, and each chest has a unique difficulty level associated with it. To maximize their earnings, the treasure hunters have devised a plan to only open the chests with the highest number of coins per unit of difficulty. They need your help to figure out the best possible sequence of operations. Given the number of coins and the difficulty level for each chest, your task is to find the maximum coins they can collect if they open at most k chests. The first line contains two integers n and k (1 le n, k le 10^5) — the number of chests and the maximum number of chests they can open. The second line contains n integers c1, c2, ..., cn (1 le ci le 10^9) — the number of coins in each chest. The third line contains n integers d1, d2, ..., dn (1 le di le 10^9) — the difficulty level of each chest. Print a single integer — the maximum number of coins that can be collected by opening at most k chests. **Example:** Input: ``` 5 2 10 20 30 40 50 5 10 15 20 25 ``` Output: ``` 90 ``` Explanation: Here, the hunters can open at most two chests. The chests have the following coin-to-difficulty ratios: - Chest 1: 10/5 = 2 - Chest 2: 20/10 = 2 - Chest 3: 30/15 = 2 - Chest 4: 40/20 = 2 - Chest 5: 50/25 = 2 Since all chests have the same ratio, the hunters should select the chests with the highest number of coins, which are chest 4 and chest 5. Therefore, the maximum number of coins collected is 40 + 50 = 90.","solution":"def maximize_coins(n, k, coins, difficulty): # Create a list of tuples where each tuple is (coins, difficulty, ratio) chests = [(coins[i], difficulty[i], coins[i] / difficulty[i]) for i in range(n)] # Sort chests by ratio in descending order, if ratios are the same sort by coins in descending order chests.sort(key=lambda x: (-x[2], -x[0])) # Take the top k chests by this sort order selected_chests = chests[:k] # Sum up the coins from the selected chests max_coins = sum(chest[0] for chest in selected_chests) return max_coins # Example usage (This would be replaced by the testing framework in practice) # print(maximize_coins(5, 2, [10, 20, 30, 40, 50], [5, 10, 15, 20, 25])) # Output should be 90"},{"question":"Fiona loves palindromes, and she wants to create a palindrome by rearranging the letters of a given string. A palindrome is a word that reads the same backward as forward. She wants to know the length of the longest possible palindromic subsequence that can be obtained by removing some characters from the string (if necessary) but without rearranging the remaining characters. # Input Specification First line contains an integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string s of length n. The string consists only of lowercase English letters (\'a\' to \'z\'). # Output Specification Print a single integer — the length of the longest palindromic subsequence that can be obtained from the given string. # Example **Input:** 5 bbbab **Output:** 4 **Explanation:** The longest palindromic subsequence in this case is \\"bbbb\\", which has length 4.","solution":"def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"Ajay has found a mysterious string in his backyard. To uncover its secrets, he needs to determine the frequency of each character in the string. Given a string consisting of lowercase English letters, write a program that counts the occurrence of each character in the string and outputs the result in alphabetical order of characters. The input consists of a single line containing the string of length 1 leq |s| leq 10^5. The output should contain 26 lines. Each line should contain a lowercase English letter followed by the number of times it appears in the string. If a character does not appear in the string, it should still be listed with a count of zero. For example, if the string is \\"apple\\", the output should be: ``` a 1 b 0 c 0 d 0 e 1 f 0 g 0 h 0 i 0 j 0 k 0 l 1 m 0 n 0 o 0 p 2 q 0 r 0 s 0 t 0 u 0 v 0 w 0 x 0 y 0 z 0 ``` Write a program to help Ajay uncover the frequency of each character in the string.","solution":"def character_frequency(s): This function takes a string consisting of lowercase English letters, counts the occurrence of each character, and returns the result in alphabetical order of characters. from collections import Counter # Count the frequency of each character in the string frequency = Counter(s) # Creating a result list result = [] # Iterate through all lowercase English letters for char in \'abcdefghijklmnopqrstuvwxyz\': count = frequency.get(char, 0) result.append(f\\"{char} {count}\\") return result"},{"question":"At a prestigious university, a class of students is preparing for their final project presentations. Each student is eager to have their project showcased, but there are constraints on the maximum number of presentations that can be scheduled on any given day. To maximize attention to each project, it is required that presentations be spread over multiple days if necessary. The scheduling is to be done such that the number of presentations scheduled each day is as evenly distributed as possible. That is, the difference between the maximum number of presentations on any day and the minimum number of presentations on any day should be minimized. Given the number of students (`s`) and the maximum number of presentations that can be scheduled on any day (`d`), determine how the presentations can be distributed over the days, such that the difference between the maximum and minimum presentations per day is minimized. # Input: The input consists of two integers: - The first integer `s` (1 ≤ s ≤ 10^6) representing the number of students. - The second integer `d` (1 ≤ d ≤ s) representing the maximum number of presentations per day. # Output: Output integers separated by spaces, where each integer represents the number of presentations scheduled for each day, distributed as evenly as possible. # Example: Input: ``` 10 3 ``` Output: ``` 3 3 2 2 ``` In this example, there are 10 students and the maximum number of presentations per day is 3. The presentations can be distributed across 4 days with the first two days having 3 presentations each and the next two days having 2 presentations each. The difference between the maximum (3) and the minimum (2) presentations per day is minimized to 1.","solution":"def distribute_presentations(s, d): Distributes `s` presentations over `d` days as evenly as possible. days = s // d remainder = s % d distribution = [days + 1] * remainder + [days] * (d - remainder) return distribution"},{"question":"Anna is a software engineer who likes to analyze the performance of different sorting algorithms. She has been given n arrays and asked to determine if each array is already sorted in non-decreasing order. Your task is to help Anna by writing a program that checks if each given array is sorted in non-decreasing order. The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of arrays. Each of the following n lines starts with an integer m_i (1 ≤ m_i ≤ 100), the length of the i-th array, followed by m_i integers a_{i1}, a_{i2}, ..., a_{im_i} (-10^3 ≤ a_{ij} ≤ 10^3), the elements of the array. For each array, print \\"YES\\" if it is sorted in non-decreasing order, otherwise print \\"NO\\". Example: Input: ``` 3 5 1 2 3 4 5 4 1 3 2 4 6 -2 -1 -1 0 1 2 ``` Output: ``` YES NO YES ```","solution":"def is_sorted_array(array): Checks if the given array is sorted in non-decreasing order. for i in range(1, len(array)): if array[i] < array[i - 1]: return \\"NO\\" return \\"YES\\" def check_sorted_arrays(input_list): Processes multiple arrays and checks if each array is sorted in non-decreasing order. results = [] for data in input_list: array_length = data[0] array = data[1:] results.append(is_sorted_array(array)) return results"},{"question":"A kingdom consists of n cities connected by n-1 bidirectional roads in such a way that there is exactly one path between any two cities (forming a tree). Each road between cities i and j has a specific length d[i][j]. The king lives in city 1 and wants to establish a communication network where every other city will be able to communicate with city 1 via a messenger system. The speed of the messenger is 1 unit distance per second, and the messenger always takes the shortest path by road. Given the lengths of the roads, calculate the maximum time it will take for the messenger to travel from city 1 to any other city in the kingdom. Input: - The first line contains a single integer n (2 ≤ n ≤ 10^5), the number of cities. - The next n-1 lines each contain three integers u, v, and d (1 ≤ u, v ≤ n; 1 ≤ d ≤ 10^6), indicating that there is a road between cities u and v with length d. Output: - A single integer, the maximum time it will take for the messenger to reach the farthest city from city 1. Example: Input: 5 1 2 3 1 3 2 3 4 4 3 5 5 Output: 9 Note: In the sample: - The path from city 1 to city 4 is 1->3->4 with a distance of 2 + 4 = 6 units. - The path from city 1 to city 5 is 1->3->5 with a distance of 2 + 5 = 7 units. - The maximum distance to the farthest city (which is city 4 or city 5) is 7 units.","solution":"import heapq def max_communication_time(n, roads): def dijkstra(graph, start): distances = [float(\'inf\')] * (n + 1) distances[start] = 0 pq = [(0, start)] while pq: (current_distance, current_node) = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances graph = [[] for _ in range(n + 1)] for u, v, d in roads: graph[u].append((v, d)) graph[v].append((u, d)) distances = dijkstra(graph, 1) return max(distances[1:]) def max_time_to_farthest_city(n, edges): return max_communication_time(n, edges)"},{"question":"You are given a string s consisting of lowercase English characters. Your task is to find the lexicographically smallest string that can be obtained by removing exactly one character from the string s. A string a is lexicographically smaller than a string b if in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. The first line contains a single integer t (1 leq t leq 1000) – the number of test cases. The next t lines each contain a string s (2 leq |s| leq 100), consisting of lowercase English letters. For each test case, output the lexicographically smallest string obtained by removing exactly one character from the string s. # Example **Input:** ``` 3 abc acb zzz ``` **Output:** ``` ab ab zz ``` **Explanation:** For the first test case, removing the last character yields \\"ab\\", which is the smallest possible string. For the second test case, removing the second character yields \\"ab\\". For the third test case, removing any character will give the same result \\"zz\\".","solution":"def lexicographically_smallest_string_after_removal(t, test_cases): results = [] for s in test_cases: smallest_string = s[1:] # intial smallest string by removing the first character for i in range(1, len(s)): current_string = s[:i] + s[i+1:] if current_string < smallest_string: smallest_string = current_string results.append(smallest_string) return results"},{"question":"Alexa loves going to the amusement park, especially riding roller coasters. The park has many different roller coasters, each with its own thrilling experience. Alexa and her friends plan to ride as many unique roller coasters as possible in a single visit. The park is organized in such a way that each roller coaster is represented as a node in a graph. The paths between the nodes (roller coasters) are unidirectional, meaning you can go from one roller coaster to another if there is a path between them. However, some paths might be confusing and Alexa doesn\'t want to ride the same roller coaster twice in a row. Given n roller coasters and m paths between them, your task is to determine the maximum number of unique roller coasters that Alexa can visit starting from a given roller coaster without repeating any roller coaster. The first line of the input contains a pair of integers n, m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) — the number of roller coasters and paths, respectively. Each of the next m lines contains two integers ai, bi (1 ≤ ai, bi ≤ n; ai ≠ bi) — indicating a unidirectional path from roller coaster ai to roller coaster bi. Finally, the last line contains the starting roller coaster s (1 ≤ s ≤ n). Output a single integer which is the maximum number of unique roller coasters that Alexa can visit starting from roller coaster s. **Example:** Input: ``` 5 6 1 2 1 3 2 4 3 4 4 5 3 5 1 ``` Output: ``` 4 ``` In this example, starting from roller coaster 1, Alexa can visit roller coasters 1 -> 2 -> 4 -> 5 or 1 -> 3 -> 4 -> 5, each of which allows her to visit 4 unique roller coasters.","solution":"def max_unique_roller_coasters(n, m, paths, s): from collections import defaultdict, deque graph = defaultdict(list) for ai, bi in paths: graph[ai].append(bi) def bfs(start): max_count = 0 queue = deque([(start, {start})]) while queue: current, visited = queue.popleft() max_count = max(max_count, len(visited)) for neighbor in graph[current]: if neighbor not in visited: queue.append((neighbor, visited | {neighbor})) return max_count return bfs(s) # Example usage: n = 5 m = 6 paths = [(1, 2), (1, 3), (2, 4), (3, 4), (4, 5), (3, 5)] s = 1 print(max_unique_roller_coasters(n, m, paths, s)) # Output: 4"},{"question":"Paul is playing a game with a sequence of numbers. He has a sequence of ( n ) integers, and he can perform operations to construct a new sequence that has as many unique integers as possible. Paul\'s allowed operation is to remove any one integer from the sequence. Paul wants to know the maximum number of unique integers he can have in the sequence after one integer is removed. The first line of input contains an integer ( n ) (2 ≤ ( n ) ≤ 100) — the number of integers in the sequence. The second line contains ( n ) integers ( a_1, a_2, ..., a_n ) (1 ≤ ( a_i ) ≤ 100) — the sequence of integers. Output one integer — the maximum number of unique integers in the sequence after one integer is removed. Example Input: ``` 6 1 2 2 3 4 4 ``` Example Output: ``` 4 ``` Explanation: In the given example, the initial sequence has 4 unique integers (1, 2, 3, and 4). By removing one occurrence of \\"2\\" or one occurrence of \\"4\\", we still have 4 unique integers. Thus, the maximum number of unique integers we can have after removing one integer is 4.","solution":"def max_unique_after_one_removal(n, sequence): Returns the maximum number of unique integers in the sequence after removing one integer. from collections import Counter counts = Counter(sequence) # If there\'s any element which appears more than once, we can remove one occurrence of such element # which will not reduce the number of unique elements for count in counts.values(): if count > 1: return len(counts) # If all elements are unique initially, removing any element will reduce the count of unique elements by 1 return len(counts) - 1"},{"question":"You are working on an algorithm to predict whether a given string of characters represents a valid sequence of operations using two symbols: \'A\' and \'B\'. Specifically, the string is valid if and only if it can be transformed into an empty string by repeatedly applying one of the following operations: 1. Remove consecutive \\"AA\\". 2. Remove consecutive \\"BB\\". 3. Replace consecutive \\"AB\\" with a single \\"B\\". 4. Replace consecutive \\"BA\\" with a single \\"A\\". Given multiple test cases, for each input string determine whether it can be reduced to an empty string by applying the operations any number of times in any order. The first line contains an integer t (1 le t le 1000) — the number of test cases. The following t lines each contain a string of \'A\' and \'B\' characters, with lengths between 1 and 10^5 inclusive. For each test case, print \\"YES\\" if the string can be reduced to an empty string. Otherwise, print \\"NO\\". Note: The total length of all strings in one test does not exceed 10^6. Example: Input: ``` 3 AABB ABBA ABAB ``` Output: ``` YES YES NO ```","solution":"def can_reduce_to_empty(s): Determines if the given string can be reduced to an empty string by repeatedly applying specified operations. stack = [] for char in s: if stack and ( (char == \'A\' and stack[-1] == \'B\') or (char == \'B\' and stack[-1] == \'A\') ): stack[-1] = \'A\' if char == \'B\' else \'B\' else: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack) == 0 def process_test_cases(test_cases): results = [] for case in test_cases: if can_reduce_to_empty(case): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # input_data = [\'AABB\', \'ABBA\', \'ABAB\'] # print(process_test_cases(input_data))"},{"question":"Given an array of integers, let\'s define a segment’s \\"uniqueness\\" as the number of different integers in that segment. You need to process multiple queries, each of which asks you to find the uniqueness of a segment in the given array. # Input - The first line contains an integer n (1 le n le 10^5) — the size of the array. - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. - The third line contains an integer q (1 le q le 10^5) — the number of queries. - Each of the next q lines contains two integers l and r (1 le l le r le n) — the 1-based start and end indices of the segment for which to calculate the uniqueness. # Output For each query, print a single line containing one integer — the uniqueness of the segment from the l-th to the r-th element (both inclusive). # Example Input ``` 5 1 2 1 3 2 3 1 3 2 4 1 5 ``` Output ``` 2 3 3 ``` # Explanation For the first query, the segment is [1, 2, 1]. There are 2 unique numbers: {1, 2}. For the second query, the segment is [2, 1, 3]. There are 3 unique numbers: {2, 1, 3}. For the third query, the segment is [1, 2, 1, 3, 2]. There are 3 unique numbers: {1, 2, 3}.","solution":"def calculate_uniqueness(arr, queries): Calculate uniqueness for segments in an array based on queries. :param arr: List[int] - The input array. :param queries: List[Tuple[int, int]] - List of tuples containing the start and end indices of the segments. :return: List[int] - List of uniqueness values for each query. results = [] for l, r in queries: # Get the segment from the array segment = arr[l-1:r] # Calculate uniqueness by using a set uniqueness = len(set(segment)) results.append(uniqueness) return results"},{"question":"You are given an array of integers representing elevations of an endless landscape. You have to perform water accumulation analysis based on the given elevations. You want to determine how much rainwater can be trapped after raining. Each bar\'s width is 1. The landscape is represented by n non-negative integers where each integer represents the height of a bar in the landscape. The water trapped between bars is defined as the total volume of water that can be accumulated between the bars. You should write a function that calculates the total amount of water that can be trapped. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of bars in the landscape. The second line contains n non-negative integers a1, a2, ..., an (0 ≤ ai ≤ 10^4) — the elevations of the bars. You should output a single integer — the total units of water that can be trapped. For example, for input: 5 0 1 0 2 1 0 1 3 2 1 2 1 The maximum amount of water trapped is 6 units. **Explanation:** The landscape looks like this: ``` # # # ``` And the water trapped is shown by the ~ characters: ``` # #~~~~ #~~~ ``` The input: 3 3 0 2 0 4 The output: 7 Explanation: The given array represents the terrain height at each point. If it rains, water fills up spaces such that water can only stay where there\'s boundaries of terrain higher than the water level. For this example, 7 units of water will be trapped: ``` # # # #~~~~~# # ``` Thus, the output is 7 units of water that can be trapped.","solution":"def trap(height): if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Fill left max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate the trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water"},{"question":"A group of friends meets weekly to play a fantasy role-playing game. Each game session is represented as an interval [a, b], where a is the start time and b is the end time. The friends want to know how many maximum concurrent game sessions are held at any time. Given k intervals representing the game sessions, your task is to determine the maximum number of game sessions that overlap at any single point in time. The first line of the input contains an integer k (1 ≤ k ≤ 100), the number of game sessions. Each of the next k lines contains two integers a and b (0 ≤ a < b ≤ 10000), representing the start time and end time of a game session. Print a single integer - the maximum number of concurrent game sessions. Example: Input: 4 1 5 3 7 4 6 6 8 Output: 3 Explanation: - Session 1: 1 to 5 - Session 2: 3 to 7 - Session 3: 4 to 6 - Session 4: 6 to 8 From time 4 to 5, three sessions (1, 2 and 3) overlap. Therefore, the maximum number of concurrent game sessions is 3.","solution":"def max_concurrent_sessions(k, intervals): Determines the maximum number of concurrent game sessions at any point in time. Args: k: int: number of game sessions intervals: list of tuples: each tuple contains two integers representing the start and end time of a session Returns: int: the maximum number of concurrent game sessions events = [] for start, end in intervals: events.append((start, \'start\')) events.append((end, \'end\')) events.sort() concurrent_sessions = 0 max_concurrent = 0 for time, type in events: if type == \'start\': concurrent_sessions += 1 if concurrent_sessions > max_concurrent: max_concurrent = concurrent_sessions else: concurrent_sessions -= 1 return max_concurrent"},{"question":"Sara loves decorating her home with plants, and she wants to arrange them in a beautiful way in her garden. She has n different types of plants, and each type has a specific height. Each type can be used multiple times, and she wants to arrange the plants in a single row such that the heights of the plants form a strictly increasing sequence from left to right. However, Sara wants to include exactly m plants in her arrangement. She can skip some types of plants if needed, but each selected type can appear any number of times. Help Sara find how many different arrangements she can create using exactly m plants that form a strictly increasing sequence from left to right. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of different types of plants and the number of plants in the arrangement, respectively. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100) — the heights of the n different types of plants. Output one integer — the number of different arrangements Sara can create using exactly m plants that form a strictly increasing sequence from left to right. # Example Input: ``` 3 2 1 3 2 ``` Output: ``` 3 ``` Explanation: The possible arrangements of 2 plants are: - (1, 2) - (1, 3) - (2, 3) Thus, there are 3 different arrangements in total.","solution":"def count_arrangements(n, m, heights): # Sort the heights to ensure we can form increasing sequences easily heights.sort() # dp[i][k] will store the number of ways to select k plants using the first i plant heights dp = [[0] * (m + 1) for _ in range(n + 1)] # There\'s one way to select 0 plants: not selecting any plants for i in range(n + 1): dp[i][0] = 1 # Fill the dp array for i in range(1, n + 1): for k in range(1, m + 1): dp[i][k] = dp[i - 1][k] # Do not include heights[i-1] if k >= 1: dp[i][k] += dp[i - 1][k - 1] # Include heights[i-1] # The final answer is the number of ways we can pick m plants from all n plants return dp[n][m] # Input reader function to handle the input format described in the problem def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) heights = list(map(int, data[2:])) print(count_arrangements(n, m, heights)) if __name__ == \\"__main__\\": main()"},{"question":"You are given an initially empty grid of size n times n and you are performing a series of operations on it. Each operation is of one of the following types: 1. Add a number to a specific cell. 2. Update the number in a specific cell. 3. Delete the number from a specific cell. 4. Calculate the sum of all numbers in the grid. After each operation, you need to output the respective result (either \\"Operation completed successfully\\" for addition, updation, or deletion, or the sum of all numbers in the grid for the sum operation). The input consists of: - An integer n (1 le n le 10^3) which represents the size of the grid. - An integer m (1 le m le 10^5) which represents the number of operations. Each of the next m lines contains one of the following types of operations: - `\\"1 x y v\\"` where 1 means you should add number v to the cell (x, y). - `\\"2 x y v\\"` where 2 means you should update the number in the cell (x, y) to v. - `\\"3 x y\\"` where 3 means you should delete the number from the cell (x, y) (if there is any number there). - `\\"4\\"` means you should output the sum of all numbers currently in the grid. Note: 1. For operation `\\"1 x y v\\"`, if there is already a number in the cell (x, y), you add the new number v to the existing number. 2. For operation `\\"2 x y v\\"`, you replace the existing number in the cell (x, y) with v. 3. For operation `\\"3 x y\\"`, you remove the number from the cell (x, y) and set it to zero. Output; For each operation `\\"4\\"`, print the sum of all numbers in the grid. Example: ``` Input 3 6 1 1 1 5 1 2 2 3 4 2 1 1 10 4 3 2 2 4 Output 8 10 10 ``` The sequence of operations on the 3x3 grid will look like this: Step 1: Add 5 to cell (1, 1) => Grid: [ [5, 0, 0], [0, 0, 0], [0, 0, 0] ] Step 2: Add 3 to cell (2, 2) => Grid: [ [5, 0, 0], [0, 3, 0], [0, 0, 0] ] Step 3: Calculate sum of grid => Result: 8 Step 4: Update cell (1, 1) to 10 => Grid: [ [10, 0, 0], [0, 3, 0], [0, 0, 0] ] Step 5: Calculate sum of grid => Result: 10 Step 6: Delete number from cell (2,2) => Grid: [ [10, 0, 0], [0, 0, 0], [0, 0, 0] ] Step 7: Calculate sum of grid => Result: 10","solution":"def grid_operations(n, operations): Perform grid operations and returns results for sum operation. :param n: size of the grid (n x n) :param operations: list of operations to be performed on the grid :return: List of results from the sum operations grid = [[0] * n for _ in range(n)] result = [] for op in operations: parts = op.split() op_type = int(parts[0]) if op_type == 1: x, y, v = int(parts[1]) - 1, int(parts[2]) - 1, int(parts[3]) grid[x][y] += v result.append(\\"Operation completed successfully\\") elif op_type == 2: x, y, v = int(parts[1]) - 1, int(parts[2]) - 1, int(parts[3]) grid[x][y] = v result.append(\\"Operation completed successfully\\") elif op_type == 3: x, y = int(parts[1]) - 1, int(parts[2]) - 1 grid[x][y] = 0 result.append(\\"Operation completed successfully\\") elif op_type == 4: total_sum = sum(sum(row) for row in grid) result.append(total_sum) return result"},{"question":"You are given a sequence of n integers a_1, a_2, ldots, a_n. You are allowed to perform a series of operations on the sequence. In each operation, you can select a subarray i, i+1, ldots, j (where 1 leq i leq j leq n) and add +1 or -1 to every element within this subarray. You can perform any number of operations. Your task is to determine the minimum number of operations needed to make all elements of the array equal. The first line of input contains a single integer n (1 leq n leq 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the values of the elements in the array. Output a single integer — the minimum number of operations required to make all array elements equal. # Example Input ``` 3 3 1 2 ``` Output ``` 2 ``` Explanation Perform the following operations: 1. Select subarray [2, 3] and add +1 to it: a = [3, 2, 3] 2. Select subarray [1, 2] and subtract -1 from it: a = [2, 2, 3] Thus, with 2 operations, we can make the first two elements equal to the third element.","solution":"def min_operations_to_equalize_array(n, a): from collections import Counter # Calculate the frequency of each number in the array counter = Counter(a) # The minimum number of operations required to make all elements equal # is the total number of elements minus the frequency of the most common element max_frequency = max(counter.values()) return n - max_frequency"},{"question":"There is a factory with several assembly lines, each dedicated to producing a different type of product. The factory has to comply with strict guidelines regarding the maximum number of products of each type that can be produced within a certain time frame to ensure the machinery is not overloaded. The factory has `n` assembly lines, and each line `i` can produce a maximum of `q_i` products. The factory is given a sequence of orders, each specifying a type of product and a required quantity. The goal is to determine the minimum number of assembly lines the factory should use to fulfill all orders without exceeding the production capacities of the lines. Specifically, given `n` assembly lines and their respective capacities, along with a list of orders, determine the smallest number of assembly lines that can be utilized to produce the requested quantities for each product type. The first line of input contains an integer `n` (1 ≤ n ≤ 100) — the number of assembly lines. The second line contains `n` integers `q_1, q_2, ..., q_n` (1 ≤ q_i ≤ 10^9) — the maximum number of products each assembly line can produce within the designated time frame. The third line contains an integer `m` (1 ≤ m ≤ 100) — the number of orders. The next `m` lines each contain two integers `p_j` and `r_j` (1 ≤ p_j ≤ n, 1 ≤ r_j ≤ 10^9) — the product type and the required quantity for that order. Output the minimum number of assembly lines needed to fulfill all orders, or `-1` if it\'s impossible to satisfy all the orders with the given assembly line capacities. Example: ``` Input 3 8 10 15 2 1 7 2 20 Output 2 ``` Explanation: In the example, the factory has three assembly lines with capacities 8, 10, and 15 respectively. There are two orders: the first order demands 7 products of type 1, and the second order demands 20 products of type 2. To fulfill both orders without exceeding the maximum capacities, the factory needs to use at least 2 assembly lines (e.g., the second and third lines). If it\'s impossible to satisfy all the orders given the maximum capacities of the assembly lines, the output should be `-1`.","solution":"def min_assembly_lines(n, capacities, m, orders): Determine the minimum number of assembly lines needed to fulfill all orders or return -1 if it is impossible to satisfy all the orders given the maximum capacities of the assembly lines. Parameters: n (int): Number of assembly lines. capacities (list of int): List of maximum products each line can produce. m (int): Number of orders. orders (list of tuple): List of orders, each tuple (product type, required quantity). Returns: int: Minimum number of assembly lines needed, or -1 if impossible. from heapq import nlargest # Step 1: Group orders by product type and sum their quantities demand = [0] * n for p, r in orders: demand[p-1] += r # p-1 because product type is 1-indexed # Step 2: Sort the capacities in descending order sorted_capacities = sorted(capacities, reverse=True) # Step 3: Try to fulfill each product demand with the largest available assembly lines num_lines_needed = 0 for d in demand: if d > 0: # select the minimum number of largest capacities that sum up to at least `d` total_capacity = 0 lines_used = 0 for cap in sorted_capacities: total_capacity += cap lines_used += 1 if total_capacity >= d: break if total_capacity < d: return -1 num_lines_needed = max(num_lines_needed, lines_used) return num_lines_needed"},{"question":"You are given a binary string `s` of length `n` consisting only of characters \'0\' and \'1\'. Your task is to count the number of substrings that start and end with \'1\'. For example, if `n = 5` and `s = \\"11010\\"`, then the substrings that start and end with \'1\' are: - \\"1\\" - \\"11\\" - \\"101\\" - \\"1\\" - \\"10\\" - \\"1\\" So the total number of such substrings is 6. The input consists of multiple test cases. The first line contains a single integer `t` (1 leq t leq 100) — the number of test cases. Each test case consists of two lines: the first line contains a single integer `n` (1 leq n leq 10^5) — the length of the binary string. The second line contains the binary string `s` of length `n`. The output should be `t` lines. For each test case, print a single integer — the number of substrings that start and end with \'1\'. The sum of all `n` in the test cases does not exceed `10^6`. # Sample Input: ``` 2 5 11010 4 0011 ``` # Sample Output: ``` 6 3 ``` # Explanation: In the first test case, the substrings that start and end with \'1\' are \\"1\\", \\"11\\", \\"101\\", \\"1\\", \\"10\\", and \\"1\\", totaling 6 substrings. For the second test case, the substrings are \\"1\\", \\"1\\", and \\"11\\", totaling 3 substrings.","solution":"def count_substrings_start_end_1(n, s): Counts the number of substrings that start and end with \'1\' in the given binary string s of length n. count_1 = s.count(\'1\') # The number of substrings that start and end with \'1\' is given by # the combination of two 1s in the total count. That is C(count_1, 2) + count_1 # (K choose 2) + (each \'1\' itself is also a valid substring) substrings_count = count_1 * (count_1 + 1) // 2 return substrings_count def process_test_cases(t, test_cases): Processes multiple test cases and returns the results. results = [] for i in range(t): n, s = test_cases[i] result = count_substrings_start_end_1(n, s) results.append(result) return results"},{"question":"Consider a sequence of positive integers a_1, a_2, ldots, a_n. You can perform the following operation any number of times: select any two elements from the sequence and replace both of them with their greatest common divisor (gcd). Your task is to determine the minimum number of distinct elements in the sequence after performing the above operation any number of times. For example, if the sequence is [8, 12, 16], you could perform the operation on 8 and 16 (both replaced with gcd(8, 16) = 8), then the sequence would be [8, 8, 12]. Next, perform the operation on 8 and 12 (both replaced with gcd(8, 12) = 4), resulting in [4, 4, 4]. The minimum number of distinct elements in this sequence is 1. The input format is as follows: - The first line contains one integer t (1 le t le 10^4), the number of test cases. - Each test case consists of two lines: - The first line contains one integer n (1 le n le 2 cdot 10^5), the number of elements in the sequence. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^6). The sum of n over all test cases does not exceed 10^6. For each test case, output the minimum number of distinct elements in the sequence after performing the described operation any number of times.","solution":"from math import gcd from functools import reduce def minimum_distinct_elements(t, test_cases): def find_final_gcd(numbers): return reduce(gcd, numbers) results = [] for i in range(t): n, a = test_cases[i] final_gcd = find_final_gcd(a) results.append(1) # Only one distinct element (the GCD) return results"},{"question":"Anna is organizing her bookshelf that contains rows of books. She wants to ensure that there is a specific number of books on certain shelves, so that arranging the books becomes an easier task. She can move a certain number of books from one shelf directly to another. Anna has a bookshelf with `n` rows where each row `i` contains `b_i` books initially. For every `i-th` row, Anna has a target number of books, `t_i`, that she wants on that row. She can perform the following operation any number of times: choose any shelf `i` and move exactly `m` books from a shelf `i` to another shelf `j` (where `i ≠ j` and `m` is a fixed positive integer). Given the initial number of books on each shelf and the target number of books for each shelf, determine if it is possible to achieve the target configuration with the allowed operations. Input: - The first line contains two integers `n` (1 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 1000) – the number of rows and the number of books moved in one operation. - The second line contains `n` integers `b_1, b_2, ..., b_n` (0 ≤ b_i ≤ 100000) – the initial number of books on each row. - The third line contains `n` integers `t_1, t_2, ..., t_n` (0 ≤ t_i ≤ 100000) – the target number of books on each row. Output: - Print \\"YES\\" if it is possible to achieve the target configuration. Otherwise, print \\"NO\\". Examples: Input: ``` 3 2 1 4 3 3 2 3 ``` Output: ``` YES ``` Input: ``` 2 5 7 10 4 13 ``` Output: ``` NO ```","solution":"def can_achieve_target(n, m, b, t): Determines if the target configuration can be achieved by moving books according to the rules. Parameters: n (int): Number of shelves m (int): Number of books moved per operation b (list of int): Initial number of books on each shelf t (list of int): Target number of books on each shelf Returns: str: \\"YES\\" if the target configuration is possible, otherwise \\"NO\\" total_initial_books = sum(b) total_target_books = sum(t) # Check if total books match if total_initial_books != total_target_books: return \\"NO\\" # Check if the difference for each shelf is a multiple of m for i in range(n): if abs(b[i] - t[i]) % m != 0: return \\"NO\\" return \\"YES\\""},{"question":"You are given an integer array `arr` of length `n`. You need to process `q` queries on this array. Each query is one of the following types: 1. `1 l r val` - Increase each element of the subarray `arr[l...r]` (both inclusive) by `val`. 2. `2 l r` - Return the maximum element in the subarray `arr[l...r]`. The input consists of several lines. The first line contains two integers `n` and `q` (1 leq n, q leq 10^5) - the number of elements in the array and the number of queries, respectively. The second line contains `n` integers `arr[i]` (1 leq arr[i] leq 10^9) - the initial elements of the array. The next `q` lines describe the queries. Each query is described as one of the two types explained above. For each query of type 2, output a single integer - the maximum element in the subarray `arr[l...r]`. # Example Input: ``` 5 5 1 2 3 4 5 1 1 3 1 2 1 3 1 3 5 2 2 2 4 2 1 5 ``` Output: ``` 4 6 6 ``` # Note: For the sample input, the operations occur as follows: 1. After the first query (1 1 3 1), the array becomes `[2, 3, 4, 4, 5]`. 2. The second query (2 1 3) outputs the maximum element in the subarray `[2, 3, 4]`, which is `4`. 3. After the third query (1 3 5 2), the array becomes `[2, 3, 6, 6, 7]`. 4. The fourth query (2 2 4) outputs the maximum element in the subarray `[3, 6, 6]`, which is `6`. 5. The fifth query (2 1 5) outputs the maximum element in the entire array `[2, 3, 6, 6, 7]`, which is `7`.","solution":"def process_queries(n, arr, queries): results = [] for query in queries: q = query[0] if q == 1: l = query[1] - 1 r = query[2] - 1 val = query[3] for i in range(l, r + 1): arr[i] += val elif q == 2: l = query[1] - 1 r = query[2] - 1 results.append(max(arr[l:r+1])) return results"},{"question":"Alex has recently opened a garden. In this garden, he grows several types of plants in a straight line. Initially, the garden consists of n pots, and each pot has one specific type of plant. Occasionally, Alex decides to change the type of plant in a segment of consecutive pots to a new type. To keep track of the changes, you need to provide him with the type of plant in each pot after all his changes have been made. The first line of input contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of pots and the number of changes, respectively. The second line contains n integers where the i-th integer represents the initial type of plant in the i-th pot. The next m lines contain three integers li, ri, and ki (1 ≤ li ≤ ri ≤ n, 1 ≤ ki ≤ 10^9) representing that the segment of pots from li to ri (inclusive) should be changed to plant type ki. Print the final type of plant in each pot after all the changes. # Example Input ``` 6 3 1 2 2 3 3 4 1 3 5 2 4 6 5 6 7 ``` Output ``` 5 6 6 6 7 7 ``` Explanation: - Initially, the garden has plants `[1, 2, 2, 3, 3, 4]`. - After the first change, the garden becomes `[5, 5, 5, 3, 3, 4]`. - After the second change, the garden becomes `[5, 6, 6, 6, 3, 4]`. - After the third change, the final garden becomes `[5, 6, 6, 6, 7, 7]`.","solution":"def change_plants(n, m, plants, changes): Function to change the type of plants in the given garden based on changes. :param n: int - Number of pots. :param m: int - Number of changes. :param plants: List[int] - Initial types of plants in the pots. :param changes: List[Tuple[int, int, int]] - List of changes where each change is a tuple (li, ri, ki). :return: List[int] - Final types of plants in the pots after all changes. for li, ri, ki in changes: for i in range(li - 1, ri): plants[i] = ki return plants"},{"question":"You are given a binary array consisting of n elements: a1, a2, ..., an. You need to perform a sequence of operations to make all the elements of the array equal. In one operation, you can flip a subarray (i.e., change all 0s in this subarray to 1s, and all 1s in this subarray to 0s). Your task is to find the minimum number of operations required to make all the elements of the array equal. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (ai = 0 or ai = 1) — the elements of the array. Output a single integer — the minimum number of operations required to make all the elements of the array equal. For example: Input: 5 1 0 0 1 1 Output: 1 Explanation: Flipping the subarray [0, 0, 1] makes the array [1, 1, 1, 1, 1].","solution":"def min_flips_to_make_equal(arr): Returns the minimum number of flips to make all elements of the array equal. count_zeros = 0 count_ones = 0 prev = arr[0] if prev == 0: count_zeros += 1 else: count_ones += 1 for i in range(1, len(arr)): if arr[i] != prev: if arr[i] == 0: count_zeros += 1 else: count_ones += 1 prev = arr[i] return min(count_zeros, count_ones)"},{"question":"Alice is participating in a baking contest where each contestant is given several recipes to bake. Each recipe contains a list of ingredients, and Alice must calculate the total weight of the ingredients needed for each recipe. However, the weight of each ingredient may vary slightly due to measurement inaccuracies, so for each ingredient, Alice has a range of possible weights. Your task is to help Alice determine the minimum and maximum possible weight of ingredients required for each of her recipes. The first line contains a positive integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with a line containing a single integer n (1 ≤ n ≤ 100) — the number of ingredients in the recipe. The next n lines contain two space-separated integers li and ui (1 ≤ li ≤ ui ≤ 1000) — the minimum and maximum possible weight of the i-th ingredient in the recipe. For each test case, print two space-separated integers — the minimum possible weight and the maximum possible weight of the ingredients required for the recipe. Example: Input: ``` 2 3 100 150 200 250 50 100 4 300 400 100 200 150 250 200 300 ``` Output: ``` 350 500 750 1150 ```","solution":"def calculate_weights(t, test_cases): result = [] for case in test_cases: min_weight = 0 max_weight = 0 for li, ui in case: min_weight += li max_weight += ui result.append((min_weight, max_weight)) return result def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) index += 1 case = [] for _ in range(n): li, ui = map(int, lines[index].split()) case.append((li, ui)) index += 1 test_cases.append(case) return t, test_cases def format_output(result): return \\"n\\".join(f\\"{min_weight} {max_weight}\\" for min_weight, max_weight in result)"},{"question":"A pack of thieves is planning a heist and needs to split their loot among themselves. Each thief should get a portion of the loot such that the portion sizes are as equal as possible, but the total loot must remain in integer unit values. The head thief wants your help to determine the optimal way to split the loot. For example, if there are 7 units of loot and 3 thieves, the optimal distribution would be two thieves getting 2 units each and one thief getting 3 units. Write a function that, given the total amount of loot and the number of thieves, returns a list representing the amount of loot each thief will get. Your function should have the following specification: ```python def distribute_loot(total_loot: int, num_thieves: int) -> List[int]: pass ``` # Input - `total_loot` (integer): the total amount of loot to be distributed (1 ≤ total_loot ≤ 10^9). - `num_thieves` (integer): the number of thieves among whom the loot is to be distributed (1 ≤ num_thieves ≤ 10^6). # Output - A list of integers representing the amount of loot each thief receives, sorted in non-decreasing order. If there are multiple valid answers, return any. # Example ```python >>> distribute_loot(7, 3) [2, 2, 3] >>> distribute_loot(15, 4) [3, 4, 4, 4] ``` # Explanation In the first example, the loot of 7 units is distributed such that two thieves get 2 units each, and one gets 3 units. In the second example, the closest distribution for 15 units among 4 thieves results in one thief getting 3 units and the other three getting 4 units each. # Note - The function should ensure that the sum of the elements in the returned list equals the `total_loot`. - The function should handle edge cases, such as when the `total_loot` is less than the `num_thieves` or when `total_loot` exactly divides by `num_thieves`.","solution":"from typing import List def distribute_loot(total_loot: int, num_thieves: int) -> List[int]: Distributes the total loot among thieves as evenly as possible. # Basic integer division and remainder to handle distribution base_amount = total_loot // num_thieves remainder = total_loot % num_thieves # All thieves get at least \'base_amount\' of loot distribution = [base_amount] * num_thieves # Distribute the remainder one unit at a time to the first \'remainder\' thieves for i in range(remainder): distribution[i] += 1 # Return the distribution sorted in non-decreasing order return sorted(distribution)"},{"question":"Alice is playing a game with strings. She has a string `s` of length `n` consisting of lowercase Latin letters. The game involves making a series of moves, where each move consists of choosing a non-empty prefix of the current string and removing it. The goal is to continue making moves until the string becomes empty. Alice wants to determine the minimum number of moves required to make the string empty. A prefix is any substring that starts at the beginning of the string. For example, in the string \\"abc\\", the prefixes are \\"a\\", \\"ab\\", and \\"abc\\". In each move, Alice must select the longest prefix that does not repeat any character she has already chosen in previous moves during the current session of the game. Your task is to help Alice find the minimum number of moves required to make the string empty, given the constraints. The first line of input contains an integer `n` (1 ≤ n ≤ 100) — the length of the string. The second line of input contains the string `s` consisting of `n` lowercase Latin letters. Output a single integer — the minimum number of moves required to make the string empty. For example, for the string \\"abcba\\", the minimum number of moves is 2. In the first move, Alice can remove the prefix \\"abc\\". In the second move, she removes the prefix \\"ba\\". Therefore, it takes 2 moves to make the string empty.","solution":"def min_moves_to_empty_string(n, s): Returns the minimum number of moves required to make the string empty. Parameters: n (int): The length of the string. s (str): The string consisting of lowercase Latin letters. Returns: int: The minimum number of moves. moves = 0 while n > 0: # Create a set to track unique characters in the current move seen_chars = set() length_of_prefix = 0 # Determine the longest prefix without repeating characters for i in range(n): if s[i] in seen_chars: break seen_chars.add(s[i]) length_of_prefix += 1 # Remove the determined prefix from the string s = s[length_of_prefix:] n -= length_of_prefix # Increment the number of moves moves += 1 return moves"},{"question":"Slime is given a list of integers representing costs of different items in his shop. He wants to create promotional offers where customers get discounts on some of the items. The discount is applied to every second item in the list, starting with the first item (item at index 0). Write a function `apply_discounts(costs, discount)` that takes two parameters: - `costs`: a list of integers representing the cost of each item. - `discount`: an integer specifying the percentage discount to be applied to the items. The function should return a new list of integers where the discounted prices for every second item are applied. The price calculation should round down to the nearest integer after applying the discount. # Input The input contains: 1. An integer `n` (1 ≤ n ≤ 100,000) — the number of items. 2. A list of integers `costs` of length `n` where the i-th integer represents the cost of the i-th item (1 ≤ costs[i] ≤ 10^6). 3. An integer `discount` (1 ≤ discount < 100) — the percentage discount to be applied. # Output Return a list of integers representing the discounted prices. # Example **Input:** ``` n = 5 costs = [100, 200, 300, 400, 500] discount = 10 ``` **Output:** ``` [90, 200, 270, 400, 450] ``` # Explanation - The 1st item (100) has a 10% discount applied: 100 - (100 * 10 / 100) = 90. - The 3rd item (300) has a 10% discount applied: 300 - (300 * 10 / 100) = 270. - The 5th item (500) has a 10% discount applied: 500 - (500 * 10 / 100) = 450. - The 2nd and 4th items remain unchanged.","solution":"def apply_discounts(costs, discount): Applies the given percentage discount to every second item in the list starting with the first item. Parameters: costs (list of int): List of item costs. discount (int): Percentage discount to be applied. Returns: list of int: List of adjusted item costs. discounted_costs = [] for i, cost in enumerate(costs): if i % 2 == 0: discounted_cost = cost - (cost * discount // 100) discounted_costs.append(discounted_cost) else: discounted_costs.append(cost) return discounted_costs"},{"question":"Alice is organizing a music festival and she has to create a schedule for the bands performing there. She wants to ensure that there are no overlapping performances and that each band gets a distinct time slot. Alice has a list of n bands with their respective performance durations. She needs to allocate time slots in such a way that no two bands overlap and the total time does not exceed m minutes. Your task is to determine if it is possible to create such a schedule. If it is, print \\"Possible\\" and also output the start and end times of performances for each band. If it is not possible, print \\"Impossible\\". The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10^6) — the number of bands and the maximum time available for performances. The next n lines contain one integer each, representing the duration of each band\'s performance in minutes (1 ≤ duration ≤ 1000). Output \\"Possible\\" followed by n lines where each line contains two integers — the start time and the end time of each band\'s performance in chronological order. If it is not possible to schedule the performances without overlap and within the given total time, print \\"Impossible\\". Note that the performances must start at time 0 and the first band\'s performance starts at time 0. # Example Input ``` 4 10 2 2 3 3 ``` Output ``` Possible 0 2 2 4 4 7 7 10 ``` In this example, we have 4 bands with durations 2, 2, 3, and 3 minutes. The total time available is 10 minutes. The schedule slots each band\'s performance such that no two bands overlap and the overall time does not exceed 10 minutes. Thus, the output is \\"Possible\\" and the performance times for the bands are provided in order.","solution":"def schedule_bands(n, m, durations): # Check if the total duration of all bands is within the available time if sum(durations) > m: return \\"Impossible\\" # Initialize the schedule start_times = [] end_times = [] current_time = 0 for duration in durations: start_times.append(current_time) end_times.append(current_time + duration) current_time += duration # Prepare the output result = \\"Possible\\" result_lines = [f\\"{start_times[i]} {end_times[i]}\\" for i in range(n)] return \\"n\\".join([result] + result_lines) # Example usage: n = 4 m = 10 durations = [2, 2, 3, 3] print(schedule_bands(n, m, durations))"},{"question":"Sara found a peculiar device with a screen displaying a sequence of integers. When toggled, the sequence transforms in a predictable pattern. She wants to study the transformation of this sequence by toggling it multiple times. You are given an initial sequence consisting of n integers, and a number of toggles m. In each toggle, the sequence transforms by taking each number at position i and replacing it with the sum of the numbers at positions i and i+1. If i is the last position, it sums the number at the last and the first position. The task is to determine the resulting sequence after m toggles. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the length of the sequence and the number of toggles respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the initial sequence. The output should be the resulting sequence after m toggles, printed in one line separated by spaces. **Example:** Input: ``` 4 1 1 2 3 4 ``` Output: ``` 3 5 7 5 ``` In this example, the sequence transforms as follows: Initially: [1, 2, 3, 4] After 1 toggle: [3 (1+2), 5 (2+3), 7 (3+4), 5 (4+1)]","solution":"def transform_sequence(n, m, sequence): for _ in range(m): new_sequence = [ sequence[i] + sequence[(i + 1) % n] for i in range(n) ] sequence = new_sequence return sequence"},{"question":"Given an array of integers, find the longest contiguous subarray with equal number of 0s and 1s. You are given an array consisting only of 0s and 1s. Find the length of the longest contiguous subarray with an equal number of 0s and 1s. # Input - The first input line contains a single integer `n` (1 le n le 10^5), the length of the array. - The second line contains `n` space-separated integers representing the array elements. # Output - Print a single integer — the length of the longest contiguous subarray with an equal number of 0s and 1s. # Example **Input** ``` 8 0 0 1 0 0 0 1 1 ``` **Output** ``` 6 ``` # Explanation In the example, the longest subarray with an equal number of 0s and 1s is from index 2 to index 7 ([1, 0, 0, 0, 1, 1]), which has length 6.","solution":"def find_longest_subarray_with_equal_0s_1s(arr): Finds the length of the longest contiguous subarray with an equal number of 0s and 1s. Args: arr : list A list of integers containing only 0s and 1s. Returns: int The length of the longest subarray with equal number of 0s and 1s. # Replace 0s with -1s to use the zero-sum subarray approach n = len(arr) for i in range(n): if arr[i] == 0: arr[i] = -1 sum_indices = {} max_len = 0 curr_sum = 0 for i in range(n): curr_sum += arr[i] if curr_sum == 0: max_len = i + 1 if curr_sum in sum_indices: max_len = max(max_len, i - sum_indices[curr_sum]) else: sum_indices[curr_sum] = i return max_len"},{"question":"In an amusement park, there is a roller coaster ride. The ride can accommodate only one person at a time due to safety reasons. People start arriving at the ride at different times and each person has a specific duration they want to spend on the ride. The people arrive in the order they join the queue and they cannot leave until their ride duration is completed. However, if they arrive and the ride is already occupied, they wait until the ride is available. You are given n integers representing the arrival times of n people and n integers representing the duration each person wants to spend on the ride. The amusement park operates with the assumption that the ride starts at time 0. Your task is to process the queue of people and determine the time at which each person finishes their ride. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of people in the queue. The second line contains n integers, where the i-th integer is the arrival time of the i-th person (0 ≤ arrival time ≤ 1,000,000). The third line contains n integers, where the i-th integer is the duration of the ride for the i-th person (1 ≤ duration ≤ 1,000,000). Output n integers: the i-th integer should be the time at which the i-th person finishes their ride. For example, consider the following input: ``` 5 0 1 2 2 4 3 2 1 2 3 ``` The expected output would be: ``` 3 5 6 8 11 ``` Explanation: - The first person arrives at 0 and takes the ride for 3 seconds, so they finish at time 3. - The second person arrives at 1 but has to wait until the ride is available, and they start at time 3 and finish at time 5 (1 second waiting). - The third person arrives at 2 and also has to wait, starting the ride at time 5, finishing at time 6. - The fourth person arrives at 2 and has to wait until the ride is available, starting at time 6, finishing at time 8. - The fifth person arrives at 4 and has to wait, starting the ride at time 8, finishing at time 11.","solution":"def amusement_park_finish_times(n, arrival_times, durations): Determines the finish time for each person in the queue. Args: n (int): Number of people in the queue. arrival_times (list): List of integers representing arrival times. durations (list): List of integers representing durations of the ride. Returns: list: List of integers representing the finish times for each person. finish_times = [] current_time = 0 for i in range(n): arrival_time = arrival_times[i] duration = durations[i] # The ride starts at the later time of either the current time or person\'s arrival time start_time = max(current_time, arrival_time) finish_time = start_time + duration # Update current time to the finish time of this person current_time = finish_time finish_times.append(finish_time) return finish_times"},{"question":"A software startup requires a mechanism to efficiently track the most frequently accessed files in their system. To achieve this, they decided to design an algorithm that processes a sequence of file access events and outputs the file that is accessed the most frequently at any given point in time. If multiple files have the same highest access count, the file that appeared first in the sequence should be selected. You are given a sequence of file access events represented as an array of strings. The task is to determine the most frequently accessed file at each step of the sequence. Input: - The first line contains a single integer n (1 leq n leq 100,000) — the number of file access events. - The second line contains n strings f_1, f_2, ldots, f_n — representing the file names being accessed. Output: - Print n lines, each containing the file name that is accessed the most frequently among the first i events for 1 leq i leq n. Example: Input: 6 file1 file2 file1 file3 file2 file1 Output: file1 file1 file1 file1 file1 file1 Explanation: 1. After the first event, \\"file1\\" is accessed most frequently. 2. After the second event, \\"file1\\" and \\"file2\\" are both accessed once, so \\"file1\\" is selected as it appeared first. 3. After the third event, \\"file1\\" has been accessed 2 times whereas \\"file2\\" has been accessed once. 4. After the fourth event, \\"file1\\" maintains the highest access count. 5. After the fifth event, \\"file1\\" is still the most frequently accessed file. 6. After the sixth event, \\"file1\\" has been accessed 3 times, which is more than any other file.","solution":"def most_frequent_files(n, files): access_count = {} top_file = None top_count = 0 result = [] for file in files: if file in access_count: access_count[file] += 1 else: access_count[file] = 1 if access_count[file] > top_count or (access_count[file] == top_count and (top_file is None or files.index(top_file) > files.index(file))): top_file = file top_count = access_count[file] result.append(top_file) return result"},{"question":"In a certain kingdom, there are roads connecting some of the cities. Each road connects exactly two different cities and can be traversed in both directions. The citizens of the kingdom are planning a celebration where they want to invite people from every city such that they are all connected to each other directly or indirectly. However, the roads need maintenance, and some roads might need repairs which would cost money. You, the kingdom\'s chief engineer, are tasked with determining whether the cities can still be connected if one road is removed to simulate the maintenance requirement. Can you check if the cities remain connected after removing exactly one road? The first line of the input contains two integers n and m (2 le n le 10^5, 1 le m le 2 cdot 10^5) — the number of cities and the number of roads. Each of the next m lines contains two integers u and v (1 le u, v le n) — the roads connecting cities u and v. Print \\"YES\\" if it is possible to keep the cities connected after removing exactly one road. Otherwise, print \\"NO\\".","solution":"def can_remain_connected(n, m, roads): from collections import defaultdict # Helper function to perform DFS and count reachable nodes def dfs(v, visited, graph): stack = [v] count = 0 while stack: node = stack.pop() if not visited[node]: visited[node] = True count += 1 for neighbor in graph[node]: if not visited[neighbor]: stack.append(neighbor) return count # Initialize adjacency list graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Check if the graph is already a connected component initial_visited = [False] * (n + 1) initial_count = dfs(1, initial_visited, graph) if initial_count != n: return \\"NO\\" # Simulate the removal of each road and check connectivity for u, v in roads: # Remove the road (u, v) graph[u].remove(v) graph[v].remove(u) # Check if the graph is still connected visited = [False] * (n + 1) count = dfs(1, visited, graph) # Add the road back graph[u].append(v) graph[v].append(u) # If graph is still connected after removing this road if count == n: return \\"YES\\" return \\"NO\\""},{"question":"Kavi is keen to improve his problem-solving skills and loves to challenge himself with algorithmic puzzles. Today, he encountered an interesting problem involving arrays and sums. You are given an array of integers of length ( n ). You need to find out how many distinct pairs of elements ( (a_i, a_j) ) (where ( i neq j ) and ( 1 leq i, j leq n )) exist, such that the sum of these pairs is divisible by a given integer ( k ). # Input The first line contains two integers ( n ) and ( k ) (( 1 leq n leq 1000 ), ( 1 leq k leq 100 )) — the length of the array and the integer by which the summation of pairs should be divisible. The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) (( 1 leq a_i leq 10^9 )) — the elements of the array. # Output Print one integer — the number of distinct pairs whose sum is divisible by ( k ). # Example Input ``` 5 3 1 2 3 4 5 ``` Output ``` 4 ``` Explanation The pairs that have sums divisible by 3 are: - (1, 2) → 1 + 2 = 3 - (1, 5) → 1 + 5 = 6 - (2, 4) → 2 + 4 = 6 - (3, 3) → 3 + 3 = 6 (Only for demonstration, since i ≠ j constraint implies duplicates like (3,3) are not valid in the actual implementation) # Note A pair ( (a_i, a_j) ) and ( (a_j, a_i) ) are considered distinct pairs as long as ( i neq j ). Be mindful to optimize the solution within the given constraints.","solution":"def count_divisible_pairs(n, k, arr): Function to count the number of distinct pairs (a_i, a_j) such that their sum is divisible by k. from collections import defaultdict remainder_count = defaultdict(int) # Count occurrences of each remainder for num in arr: remainder_count[num % k] += 1 count = 0 # Calculate the pairs for r in range((k // 2) + 1): # Only need to consider up to k//2 remainders if r == 0: # Special case: pairs where both elements contribute 0 remainder count += (remainder_count[r] * (remainder_count[r] - 1)) // 2 elif r == k - r: # Special case: pairs where both elements contribute the same remainder which is exactly half of k count += (remainder_count[r] * (remainder_count[r] - 1)) // 2 else: count += remainder_count[r] * remainder_count[k - r] return count"},{"question":"Alice is organizing a coding competition and she wants to create the best sequence of tasks where the difficulty increases with each subsequent task in one of the competition rounds. Alice has a list of `n` tasks, each with a difficulty level represented by an integer, and she wants to select a subsequential number of tasks (not necessarily contiguous) such that the difficulty levels strictly increase. Help Alice determine the length of the longest possible sequence of tasks that she can select from her list. The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000) — the number of tasks. The second line contains `n` space-separated integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the difficulty levels of the tasks. Output a single integer representing the length of the longest strictly increasing subsequence of tasks. **Example:** Input: ``` 6 10 20 10 30 20 50 ``` Output: ``` 4 ``` In the sample, the longest strictly increasing subsequence is [10, 20, 30, 50], which has length 4.","solution":"from bisect import bisect_left def longest_increasing_subsequence(tasks): Returns the length of the longest strictly increasing subsequence. if not tasks: return 0 subsequence = [] for task in tasks: pos = bisect_left(subsequence, task) if pos >= len(subsequence): subsequence.append(task) else: subsequence[pos] = task return len(subsequence)"},{"question":"Andy\'s family has a tradition of baking cookies for the annual family reunion. Each member of the family contributes a certain number of cookies, and Andy wants to know some details about the total amount of cookies baked. Specifically, he wants to know both the total number of cookies and the maximum number of cookies baked by any single family member. The first line contains a single integer n (1 ≤ n ≤ 1000) – the number of family members. The second line contains n space-separated integers c1, c2, ..., cn (1 ≤ ci ≤ 10000) – the number of cookies baked by each family member. Output two integers, the first is the total number of cookies baked, and the second is the maximum number of cookies baked by any family member. # Example: Input: ``` 5 10 20 15 30 25 ``` Output: ``` 100 30 ``` Explanation: There are 5 family members baking 10, 20, 15, 30, and 25 cookies respectively. The total number of cookies is 10 + 20 + 15 + 30 + 25 = 100. The maximum number of cookies baked by any single family member is 30.","solution":"def cookie_statistics(n, cookies): Returns the total number of cookies baked and the maximum number of cookies baked by any single family member. :param n: Number of family members :param cookies: List of integers representing cookies baked by each family member :return: A tuple (total_cookies, max_cookies) total_cookies = sum(cookies) max_cookies = max(cookies) return total_cookies, max_cookies # Example usage: # n = 5 # cookies = [10, 20, 15, 30, 25] # print(cookie_statistics(n, cookies)) # Output: (100, 30)"},{"question":"You are tasked with rewriting expressions using new variables to simplify them. Given an arithmetic expression where the variables are named using lowercase alphabets (\'a\' to \'z\') and the operations are addition (\'+\'), subtraction (\'-\'), multiplication (\'*\'), division (\'/\') and modulo (\'%\'). You need to: 1. Identify all distinct variables used in the expression. 2. Assign a new variable name to each distinct variable in alphabetical order starting from \'a\'. For example, if the distinct variables are \'x\', \'y\', and \'z\', you will rename them as \'a\', \'b\', and \'c\' respectively. Finally, output the new simplified expression. # Input - A single line containing a mathematical expression with variables named using lowercase alphabets (\'a\' to \'z\') and operations \'+\', \'-\', \'*\', \'/\', \'%\'. # Output - A single line containing the modified expression with new variable names. # Constraints - The length of the input expression will be between 1 and 100 (both inclusive). - The input expression will only include lowercase alphabet variables and operations mentioned. - The expression will always be valid. # Example Input ``` x - y + x * z ``` Output ``` a - b + a * c ```","solution":"import re def simplify_expression(expression): Simplifies the given expression by renaming all distinct variables to \'a\', \'b\', \'c\', etc. in alphabetical order. Parameters: expression (str): The input mathematical expression. Returns: str: The simplified expression with variables renamed. # Find all distinct variables in the expression variables = sorted(set(re.findall(r\'[a-z]\', expression))) # Create a mapping from old variable names to new variable names mapping = {var: chr(97 + idx) for idx, var in enumerate(variables)} # Replace all occurrences of old variables with new variables new_expression = \'\'.join([mapping[char] if char in mapping else char for char in expression]) return new_expression"},{"question":"John is working on a software application that manages tickets for an event. The tickets have an associated price and John needs to ensure that a given list of ticket prices matches a certain expected pattern based on a sequence of operations. A sequence of operations is applied on the list of ticket prices to create an \\"expected pattern\\". The operations allowed are: 1. Increment: Increase all prices in the list by a fixed value. 2. Decrement: Decrease all prices in the list by a fixed value. 3. Reverse: Reverse the order of prices in the list. Given the current list of ticket prices and the expected list of ticket prices after performing exactly one of the above operations, determine which operation, if any, can transform the current list to match the expected list. If no such operation can achieve this, return \\"None\\". # Input - The first line contains an integer `n` (1 leq n leq 1000) — the number of ticket prices. - The second line contains `n` integers separated by spaces, representing the current list of ticket prices. - The third line contains `n` integers separated by spaces, representing the expected list of ticket prices. # Output - Print the name of the operation (\\"Increment\\", \\"Decrement\\", \\"Reverse\\") if exactly one operation can transform the current list to the expected list. - If no operation or more than one operation can achieve this, print \\"None\\". # Example Input ``` 5 10 12 14 16 18 12 14 16 18 20 ``` Output ``` Increment ``` Input ``` 4 8 6 4 2 2 4 6 8 ``` Output ``` Reverse ``` Input ``` 3 5 10 15 5 10 20 ``` Output ``` None ```","solution":"def identify_operation(n, current_prices, expected_prices): if n <= 0: return \\"None\\" if current_prices == expected_prices[::-1]: return \\"Reverse\\" diff = [expected_prices[i] - current_prices[i] for i in range(n)] if len(set(diff)) == 1: if diff[0] > 0: return \\"Increment\\" elif diff[0] < 0: return \\"Decrement\\" return \\"None\\""},{"question":"A group of N aliens is marooned on a distant planet. They have established a temporary civilization and are trying to communicate with each other using a limited set of symbols. Each alien has devised their unique sequence of symbols that they use to represent their name, and no two aliens have the same name sequence. However, the alien communication device they are working on can only take in a set of symbols and check if it matches any of the aliens\' names exactly. Given a list of names from the aliens and queries representing the names the device is checking, determine which queries match any alien name in the list. The first line of input contains two positive integers n and q (1 le n, q le 10^5) — the number of alien names and the number of queries. The next n lines each contain a string of lowercase English letters representing the name sequences of the aliens. Each name sequence is unique and its length does not exceed 100 characters. The following q lines each contain a string of lowercase English letters representing the queries. For each query, print \\"Yes\\" if the query matches any alien\'s name exactly, otherwise print \\"No\\". In the first example, the alien names are \\"zorblax\\", \\"fliptar\\", and \\"glorbnor\\". The queries \\"zorblax\\" and \\"glorbnor\\" match exactly, but \\"zorbnax\\" and \\"blorb\\" do not. In the second example, none of the queries match any alien names. ``` Input: 3 4 zorblax fliptar glorbnor zorblax zorbnax glorbnor blorb Output: Yes No Yes No ```","solution":"def alien_name_check(n, q, names, queries): Given a set of alien names and a list of queries, return a list indicating if each query matches any of the alien names exactly. names_set = set(names) # Using a set for O(1) average-time complexity for lookups results = [] for query in queries: if query in names_set: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You have been hired to manage traffic lights at a busy intersection. At this intersection, the traffic lights follow a specific pattern: they can be set to turn green for specified periods, and red for the rest of the time. You are given the total time duration T (in minutes) over which the lights need to follow the pattern, and an array G of positive integers where the i^{th} element represents the number of minutes the light stays green in the i^{th} segment. Your task is to compute the maximum total duration the light can stay green if you are allowed to swap any two elements in the array G. If no improvement is possible, then return the total duration of green lights without any swaps. # Input - The first line contains a single integer T (1 leq T leq 10^9) — the total duration for the traffic light pattern. - The second line contains a single integer n (1 leq n leq 10^5) — the number of green light segments. - The third line contains n space-separated integers G_1, G_2, dots, G_n (1 le G_i leq T) — each representing the duration of green light segments. # Output - Print a single integer — the maximum possible total duration the light can stay green after swapping any two elements of the array. # Example Input ```plaintext 20 4 5 3 8 4 ``` Output ```plaintext 20 ``` Explanation In this example, there are four green light segments with durations 5, 3, 8, and 4 minutes. The total green light duration is 5 + 3 + 8 + 4 = 20 minutes. Since the total is already maximized and no swap will increase the duration beyond 20 minutes, the output remains 20.","solution":"def max_green_duration(T, n, G): Returns the maximum possible total duration the light can stay green after swapping any two elements of the array. Arguments: T -- total duration for the traffic light pattern in minutes. n -- the number of green light segments. G -- list of integers where each represents the duration of green light segments. # The maximum duration of green light is simply the sum of all segments return sum(G)"},{"question":"Lily has recently started learning about genetic sequences. She is particularly interested in finding the longest palindromic subsequence within a given sequence of genes. A subsequence is derived from a sequence by deleting some or no elements without changing the order of the remaining elements. A sequence is palindromic if it reads the same forwards and backwards. Given a sequence of genes represented as a string `s`, help Lily find the length of the longest palindromic subsequence in `s`. The first line of input contains an integer `t` (1 ≤ t ≤ 100) - the number of test cases. Each of the next `t` lines contains a single string `s` (1 ≤ |s| ≤ 1000), representing the sequence of genes. For each test case, output a single integer - the length of the longest palindromic subsequence in the given sequence. # Sample Input ``` 3 AGBDBA BBABCBCAB GEEKSFORGEEKS ``` # Sample Output ``` 5 7 5 ``` # Explanation - For the first test case, the longest palindromic subsequence is \\"ABDBA\\", which has a length of 5. - For the second test case, the longest palindromic subsequence is \\"BABCBAB\\", which has a length of 7. - For the third test case, the longest palindromic subsequence is \\"GEEKEEG\\", which has a length of 5.","solution":"def longest_palindromic_subsequence(s): Function to find the longest palindromic subsequence in a given string. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1] def process_test_cases(test_cases): results = [] for s in test_cases: result = longest_palindromic_subsequence(s) results.append(result) return results"},{"question":"You have a network of computers and servers connected in a tree topology with n nodes labeled from 1 to n. Each node is either a computer or a server. The servers are the root nodes and they do not have a parent node, while the computers are the other nodes connected to a server or another computer. Each connection between two nodes has a certain latency time associated with it. You need to calculate the minimum latency required to send information from the data center (node 1) to all other nodes in the network. The first line of input contains an integer n (2 ≤ n ≤ 100,000), indicating the number of nodes in the tree. Each of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100,000), representing a connection between nodes u and v with a latency time of w milliseconds. Output a single integer — the sum of the minimum latencies required to send information from the data center (node 1) to all other nodes. In the first example, the minimum latencies from node 1 to nodes 2, 3, and 4 are 4, 5, and 6 respectively. The total latency would be 15. In the second example, the connections ensure the information propagation from node 1 to all other nodes is minimized through paths with minimum latencies from the data center.","solution":"import heapq from collections import defaultdict def minimum_latency(n, connections): # create a graph as adjacency list graph = defaultdict(list) for u, v, w in connections: graph[u].append((v, w)) graph[v].append((u, w)) # the priority queue to handle the edges min_heap = [(0, 1)] # (cost, node) total_latency = 0 visited = set() while min_heap: current_latency, u = heapq.heappop(min_heap) if u in visited: continue visited.add(u) total_latency += current_latency for v, w in graph[u]: if v not in visited: heapq.heappush(min_heap, (w, v)) return total_latency"},{"question":"You are given an array of integers of length `n`. You need to process the array to find the maximum possible product of any two distinct elements in the array. The input consists of: - The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output a single integer — the maximum possible product of any two distinct elements in the array. Example 1: ``` Input: 5 10 20 30 40 50 Output: 2000 ``` Example 2: ``` Input: 3 1 2 3 Output: 6 ```","solution":"def max_product_of_two_distinct_elements(n, arr): # Find the two largest numbers in the array max1 = max(arr) arr.remove(max1) max2 = max(arr) return max1 * max2"},{"question":"You are given an array a consisting of n integers, and a threshold value k. Your task is to determine if there exists a non-empty contiguous subarray such that the sum of its elements is at least k. The first line of the input contains two integers n (1 le n le 100000) — the number of elements in the array, and k (1 le k le 10^9) — the threshold value. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000) — the elements of the array. Print \\"YES\\" if there exists a non-empty contiguous subarray with a sum of at least k, otherwise print \\"NO\\". # Example Input: ``` 5 12 1 2 3 4 5 ``` Output: ``` YES ``` Input: ``` 4 15 1 2 3 4 ``` Output: ``` NO ``` # Explanation In the first example, the contiguous subarray [3, 4, 5] has a sum of 12 which meets the threshold. In the second example, the sum of any contiguous subarray does not meet the threshold of 15, hence the answer is \\"NO\\".","solution":"def has_subarray_with_sum_at_least_k(n, k, a): Determines if there exists a non-empty contiguous subarray with a sum of at least k. :param n: Number of elements in the array. :param k: Threshold value. :param a: List of integers representing the array. :return: \\"YES\\" if there exists a non-empty contiguous subarray with a sum of at least k, otherwise \\"NO\\". for i in range(n): current_sum = 0 for j in range(i, n): current_sum += a[j] if current_sum >= k: return \\"YES\\" return \\"NO\\" # Example Usage: # print(has_subarray_with_sum_at_least_k(5, 12, [1, 2, 3, 4, 5])) # Output: \\"YES\\" # print(has_subarray_with_sum_at_least_k(4, 15, [1, 2, 3, 4])) # Output: \\"NO\\""},{"question":"Given an array of words, a word is defined as a string of lowercase English letters. You are to find all the words in the array that are concatenations of two or more words from the array. For example, given [\\"cat\\", \\"cats\\", \\"dog\\", \\"catsdog\\"], the word \\"catsdog\\" is a concatenation of \\"cats\\" and \\"dog\\". The input is given as follows: - The first line contains an integer n (1 ≤ n ≤ 10000) — the number of words. - The next n lines each contain a word, where the length of words is between 1 and 1000. Your task is to determine which words in the list can be formed by concatenating other words from the same list. The order of words in the output does not matter. # Input ``` 4 cat cats dog catsdog ``` # Output ``` catsdog ``` In this example, \\"catsdog\\" is the only word that can be formed by concatenating \\"cats\\" and \\"dog\\". Note that the same word can be used multiple times in a concatenation. For example, given [\\"cat\\", \\"cats\\", \\"catscats\\"], \\"catscats\\" can be formed by concatenating \\"cats\\" and \\"cats\\".","solution":"def find_concatenated_words(words): def can_form(word, word_set): if word in memo: return memo[word] for i in range(1, len(word)): prefix, suffix = word[:i], word[i:] if prefix in word_set and (suffix in word_set or can_form(suffix, word_set)): memo[word] = True return True memo[word] = False return False word_set = set(words) concatenated_words = [] for word in words: memo = {} if can_form(word, word_set): concatenated_words.append(word) return concatenated_words # Example usage: words = [\\"cat\\", \\"cats\\", \\"dog\\", \\"catsdog\\"] print(find_concatenated_words(words)) # Output: [\'catsdog\']"},{"question":"Given an array of integers, determine whether it is possible to rearrange the elements of the array to form a sequence of consecutive numbers. If possible, print \\"YES\\". Otherwise, print \\"NO\\". For example, if the array is [4, 3, 2, 5, 1] it can be rearranged as [1, 2, 3, 4, 5], which is a consecutive sequence, so the output should be \\"YES\\". If the array is [4, 3, 2, 8, 1], it cannot be rearranged into a consecutive sequence, so the output should be \\"NO\\". The first line of input contains an integer n (1 ≤ n ≤ 100,000), the number of elements in the array. The second line contains n integers (1 ≤ xi ≤ 10^9), the elements of the array. Output \\"YES\\" if the array can be rearranged to form a sequence of consecutive numbers. Otherwise, output \\"NO\\". # Example **Input:** ``` 5 4 3 2 5 1 ``` **Output:** ``` YES ``` **Input:** ``` 5 4 3 2 8 1 ``` **Output:** ``` NO ```","solution":"def can_form_consecutive_sequence(arr): Determines whether the array can be rearranged to form a sequence of consecutive numbers. Parameters: arr (list): List of integers Returns: str: \\"YES\\" if it is possible to form a consecutive sequence, otherwise \\"NO\\" if not arr: return \\"NO\\" min_val = min(arr) max_val = max(arr) if max_val - min_val + 1 == len(arr) and len(set(arr)) == len(arr): return \\"YES\\" else: return \\"NO\\""},{"question":"Telecommunication company XYZ has a single data cable that connects the company\'s data center to the main internet line. The cable runs through several buildings, and the connection can sometimes become unreliable or slow due to signal interference at certain segments. The data cable is divided into `n` segments, each with a specific quality measure. You are given an array `q` of size `n` representing the quality of each segment. The quality of a segment is a positive integer where a higher number indicates better quality. XYZ wants to replace some segments to improve the overall minimal quality, as the internet connection is only as good as its weakest segment. Given `k` replacements allowed, you need to determine the maximum possible quality of the weakest segment of the cable after performing up to `k` replacements. The first line of the input contains two integers `n` and `k` (1 ≤ n ≤ 100,000, 1 ≤ k ≤ 100,000) — the number of segments in the cable and the number of replacements allowed, respectively. The second line contains `n` integers `q1, q2, ..., qn` (1 ≤ qi ≤ 10,000) — the quality measure of each segment in the cable. Output a single integer, which is the maximum possible quality of the weakest segment after up to `k` replacements. In the first example, it is possible to replace one segment with quality 2, so the maximum quality of the weakest segment is 3. In the second example, all segments are of the same quality, so no replacement is necessary, and the maximum possible quality remains 5. Examples: Input: 5 1 3 3 2 3 4 Output: 3 Input: 4 4 5 5 5 5 Output: 5","solution":"def max_min_quality(n, k, q): Finds the maximum possible quality of the weakest segment after performing up to k replacements. def can_achieve(min_quality): replacements_needed = 0 for quality in q: if quality < min_quality: replacements_needed += 1 if replacements_needed > k: return False return True left, right = min(q), max(q) best_quality = left while left <= right: mid = (left + right) // 2 if can_achieve(mid): best_quality = mid left = mid + 1 else: right = mid - 1 return best_quality"},{"question":"A company is organizing a contest where contestants need to solve challenging mathematical problems. To score a goal, participants can make moves on a rectangular grid. The grid is of size m × n and consists of cells, each cell having a score. The goal is to achieve the maximum possible score by starting from the top-left cell (1, 1) and moving to the bottom-right cell (m, n). From any cell (i, j), contestants can only move either to the right cell (i, j+1) or the down cell (i+1, j). Write a program that will compute the maximum score the contestant can achieve while reaching the bottom-right cell. **Input:** - The first line contains two integers m and n (1 ≤ m, n ≤ 2000) — the dimensions of the grid. - The next m lines contain n integers each, where the j-th number in the i-th line denotes the score of the cell (i, j). Each score is an integer between -1000 and 1000. **Output:** - Print a single integer — the maximum possible score that can be achieved by reaching the bottom-right cell from the top-left cell. **Example:** Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 12 ``` Explanation: In the above example, the path to the maximum score would be (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3), with a total score of 1 + 3 + 5 + 2 + 1 = 12.","solution":"def max_score_path(m, n, grid): # Create a dp table with the same dimensions as the grid dp = [[0 for _ in range(n)] for _ in range(m)] # Initialize the starting position dp[0][0] = grid[0][0] # Fill the first row of the dp table for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column of the dp table for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the maximum score return dp[m-1][n-1]"},{"question":"A local construction company undertakes a project to build water supply pipelines for a new housing complex. The project involves connecting the houses with each other. There are n houses, and the company has an initial supply of various pipes, each with a defined length and diameter. The goal is to design a pipeline system such that every house has at least one water connection. Each house is represented by a node, and each pipe is an edge between two nodes. You need to maximize the minimum diameter of the pipeline used in the entire system, ensuring every house is connected. The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of houses and the number of available pipes, respectively. The next m lines each contain three integers u, v, and d (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ d ≤ 1000) — representing a pipe between house u and house v with a diameter of d. Output the maximum possible minimum diameter of a pipeline that ensures every house is connected. If it is not possible to connect all houses, output -1. **Example** Input: ``` 4 5 1 2 4 1 3 2 2 3 3 2 4 5 3 4 1 ``` Output: ``` 3 ``` In this example, you can choose pipes (1, 2: diameter 4), (2, 4: diameter 5), and (2, 3: diameter 3), which ensures that the minimum diameter among the selected pipes is maximized to 3, while connecting all houses.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def maximize_minimum_diameter(n, m, edges): edges.sort(key=lambda x: -x[2]) # Sort edges by diameter in descending order parent = [i for i in range(n + 1)] rank = [0] * (n + 1) result = float(\'inf\') count = 0 for u, v, d in edges: x = find(parent, u) y = find(parent, v) if x != y: count += 1 union(parent, rank, x, y) result = min(result, d) if count == n - 1: return result return -1 # if we can\'t connect all houses"},{"question":"A company is organizing a unique tournament with n participants. Each participant is assigned a unique integer ID from 1 to n. Each round of the tournament consists of pairing up the participants such that each participant plays with exactly one other participant. If there is an odd number of participants in a round, one participant will automatically advance to the next round without playing. The tournament follows these rules: 1. In each round, participants are paired in the increasing order of their IDs. 2. At the end of each round, the winners of each pair advance to the next round. 3. The participant IDs in the subsequent rounds are reassigned continuously starting from 1, in the order of their match wins from the previous round. The winner of a match is determined by the ID of the participants: the participant with the lower ID always wins. Given the number of participants n, your task is to determine the total number of rounds required for the tournament to conclude with a single winner. The input is a single integer n (1 ≤ n ≤ 10^9) — the number of participants. Print a single integer — the total number of rounds needed for the tournament to finish. Examples: Input: 8 Output: 3 Input: 5 Output: 3 Explanation: In the first example, 8 participants require 3 rounds: - Round 1: Participants 1-8 -> Winners: 1, 3, 5, 7 - Round 2: Winners of Round 1 -> Participants 1-4 -> Winners: 1, 3 - Round 3: Winners of Round 2 -> Participants 1-2 -> Winner: 1 In the second example, 5 participants require 3 rounds: - Round 1: Participants 1-5 -> Winners: 1, 3, 5 (5 automatically advances) - Round 2: Winners of Round 1 -> Participants 1-3 -> Winners: 1 - Round 3: Winners of Round 2 -> Participant 1, the final winner.","solution":"def tournament_rounds(n): Returns the number of rounds needed for a tournament with n participants to conclude with a single winner. rounds = 0 while n > 1: rounds += 1 n = (n + 1) // 2 return rounds"},{"question":"Given an array of integers, your task is to find the length of the longest subsequence that is a palindrome. A subsequence is derived by deleting some or no elements of the array without changing the order of the remaining elements. The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output a single integer — the length of the longest palindromic subsequence in the given array. **Example:** Input: ``` 6 1 2 3 4 2 1 ``` Output: ``` 5 ``` Explanation: The longest palindromic subsequence is [1, 2, 3, 2, 1] which has length 5.","solution":"def longest_palindromic_subsequence(arr): Returns the length of the longest palindromic subsequence in the array. n = len(arr) dp = [[0] * n for _ in range(n)] # Each single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the dp table for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if arr[i] == arr[j] and cl == 2: dp[i][j] = 2 elif arr[i] == arr[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The result is in dp[0][n-1] return dp[0][n-1]"},{"question":"You are given a list of integers. Find the length of the longest continuous subarray that contains at most two distinct integers. A subarray is a contiguous part of the array. For example, given the array [1, 2, 1, 3, 4], the longest subarray with at most two distinct integers is [1, 2, 1], which has length 3. You are to implement a function that takes a list of integers and returns the length of the longest subarray that meets the requirement. The function signature is: ```python def longest_subarray_with_two_distinct(arr: List[int]) -> int: ``` Input - A single list of integers `arr` (1 ≤ len(arr) ≤ 10^5, 0 ≤ arr[i] ≤ 10^4). Output - An integer representing the length of the longest continuous subarray with at most two distinct integers. Example ``` Input: [1, 2, 1, 2, 3] Output: 4 Explanation: The longest continuous subarray with at most two distinct integers is [1, 2, 1, 2], which has length 4. ``` ``` Input: [1, 2, 1, 3, 4] Output: 3 Explanation: The longest continuous subarray with at most two distinct integers is [1, 2, 1], which has length 3. ```","solution":"from typing import List def longest_subarray_with_two_distinct(arr: List[int]) -> int: Returns the length of the longest continuous subarray with at most two distinct integers. if not arr: return 0 left = 0 right = 0 max_length = 0 distinct_count = {} while right < len(arr): if arr[right] in distinct_count: distinct_count[arr[right]] += 1 else: distinct_count[arr[right]] = 1 while len(distinct_count) > 2: distinct_count[arr[left]] -= 1 if distinct_count[arr[left]] == 0: del distinct_count[arr[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Lucy loves solving puzzles, and one day she encountered the following intriguing problem at a coding competition: You are given a string of lowercase English letters and are required to find the longest substring that contains at most two distinct characters. A substring is a contiguous sequence of characters within the string. For example, the longest such substring of \\"abcbbbbcccbdddadacb\\" is \\"bcbbbbcccb\\". The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^5) of lowercase English letters. Output the longest substring that contains at most two distinct characters. If there are multiple possible answers, output any of them. **Example:** Input: abcbbbbcccbdddadacb Output: bcbbbbcccb Input: aabacbebebe Output: bebebe","solution":"def longest_substring_with_two_distinct_chars(s): Returns the longest substring that contains at most two distinct characters. if len(s) < 3: return s left, right = 0, 0 hashmap = {} max_len = 2 max_substr = s[:2] while right < len(s): hashmap[s[right]] = right right += 1 if len(hashmap) > 2: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 if right - left > max_len: max_len = right - left max_substr = s[left:right] return max_substr"},{"question":"Anya has been given an n x n grid of labeled cells, where each label is a lowercase English letter. She wants to find the longest contiguous subsequence of matching labels that form a horizontal, vertical, or diagonal path. Given an integer n (2 ≤ n ≤ 1000) followed by n lines each containing a string of length n, representing the grid, determine the maximum length of such a subsequence. Input: - The first line contains an integer n. - Each of the next n lines contains a string of length n. Output: - Output a single integer, the length of the longest contiguous subsequence of matching labels. Example: Input: 3 aba bcb cbc Output: 2 In this example, the longest contiguous subsequences of matching labels are \\"bc\\" (diagonal path) and \\"cb\\" (diagonal path), both of length 2.","solution":"def longest_contiguous_subsequence(n, grid): def check_horizontal(i, j): length = 1 while j + 1 < n and grid[i][j] == grid[i][j + 1]: j += 1 length += 1 return length def check_vertical(i, j): length = 1 while i + 1 < n and grid[i][j] == grid[i + 1][j]: i += 1 length += 1 return length def check_diagonal_dr(i, j): length = 1 while i + 1 < n and j + 1 < n and grid[i][j] == grid[i + 1][j + 1]: i += 1 j += 1 length += 1 return length def check_diagonal_dl(i, j): length = 1 while i + 1 < n and j - 1 >= 0 and grid[i][j] == grid[i + 1][j - 1]: i += 1 j -= 1 length += 1 return length max_length = 1 for i in range(n): for j in range(n): max_length = max(max_length, check_horizontal(i, j)) max_length = max(max_length, check_vertical(i, j)) max_length = max(max_length, check_diagonal_dr(i, j)) max_length = max(max_length, check_diagonal_dl(i, j)) return max_length"},{"question":"In the bustling city of Byteville, the local cafe has decided to implement a unique loyalty program. Each customer is assigned a loyalty point that starts at zero. With each purchase, a customer earns a certain number of points, but on certain purchases, they might lose points due to discounts or returns. Your task is to determine the final loyalty points for each customer after processing a series of transactions. The first line of input contains an integer k (1 ≤ k ≤ 100) — the number of customers. The next k lines each contain the name of a customer and an integer t (0 ≤ t ≤ 50), which is the number of transactions that customer made. The following t lines for each customer contain a transaction description: either \\"earn x\\" or \\"lose x\\", where x is an integer (1 ≤ x ≤ 1000) representing the points earned or lost in that transaction. Output the final loyalty points of each customer. List the customers in the same order as they appear in the input. If a customer has less than 0 points at any point, their points should be reset to 0 immediately. **Example Input:** ``` 2 Alice 3 earn 10 lose 5 earn 5 Bob 2 earn 20 lose 25 ``` **Example Output:** ``` Alice 10 Bob 0 ```","solution":"def calculate_loyalty_points(customers_data): results = [] for customer in customers_data: name, transactions = customer[\'name\'], customer[\'transactions\'] loyalty_points = 0 for transaction in transactions: action, points = transaction.split() points = int(points) if action == \\"earn\\": loyalty_points += points elif action == \\"lose\\": loyalty_points -= points if loyalty_points < 0: loyalty_points = 0 results.append(f\\"{name} {loyalty_points}\\") return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") k = int(lines[0]) index = 1 customers_data = [] for _ in range(k): customer_info = lines[index].split() name = customer_info[0] t = int(customer_info[1]) transactions = lines[index+1:index+1+t] customers_data.append({\'name\': name, \'transactions\': transactions}) index += t + 1 return calculate_loyalty_points(customers_data) # Example Usage: # input_data = 2 # Alice 3 # earn 10 # lose 5 # earn 5 # Bob 2 # earn 20 # lose 25 # result = process_input(input_data) # for line in result: # print(line)"},{"question":"Sasha has a tree rooted at node 1 with n nodes. Each node has a value. Sasha wants to find the maximum sum of node values on any path starting at the root node and ending at a node in the subtree of node x. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of nodes in the tree. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 1,000,000) — the values of the nodes. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — there is an edge between nodes u and v. The last line contains an integer q (1 ≤ q ≤ 50,000) — the number of queries. Each of the next q lines contains an integer x (1 ≤ x ≤ n) — the node for which Sasha wants to find the maximum sum path in its subtree. For each query, print a single integer — the maximum sum of node values on any path starting at the root and ending at a node in the subtree of node x. Example: Input: 5 1 2 3 4 5 1 2 1 3 3 4 3 5 2 1 3 Output: 15 12","solution":"from collections import defaultdict, deque def maximum_sum_path(n, node_values, edges, queries): # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Create a list to store max sum for each node, initialize it with node values max_sum = node_values[:] # DFS function to calculate the maximum sum path def dfs(node, parent): for neighbor in graph[node]: if neighbor != parent: dfs(neighbor, node) max_sum[node - 1] = max(max_sum[node - 1], max_sum[node - 1] + max_sum[neighbor - 1]) # Start DFS from the root node dfs(1, -1) # Function to get the maximum sum for a query node def get_max_sum(x): return max_sum[x - 1] # Process each query result = [get_max_sum(x) for x in queries] return result"},{"question":"You are given two strings, `a` and `b`, both consisting of lowercase English letters. The strings `a` and `b` represent two different DNA sequences where nucleotides are denoted by letters. Your task is to determine whether you can make string `b` a subsequence of string `a` by deleting some (possibly zero) characters from string `a` and arranging its characters in any order. A string `s` is called a subsequence of string `t` if `s` can be derived from `t` by deleting zero or more characters without changing the order of the remaining characters. **Input:** - The first line contains an integer t (1 le t le 1000) — the number of test cases. - The first line of each test case contains two integers n and m (1 le n, m le 2 cdot 10^5) — the length of strings `a` and `b` respectively. - The second line of each test case contains the string `a` consisting of n lowercase English letters. - The third line of each test case contains the string `b` consisting of m lowercase English letters. It\'s guaranteed that the total sum of n and m over all test cases does not exceed 2 cdot 10^5. **Output:** For each test case, print \\"YES\\" if you can make string `b` a subsequence of string `a`, otherwise print \\"NO\\". **Example:** ``` Input: 3 7 3 abcdefgh edf 5 5 hello world 6 3 codes dco Output: YES NO YES ``` **Explanation:** In the first test case, you can rearrange `abcdefgh` to be `defghabc`, of which `edf` is a subsequence. In the second test case, it is impossible to rearrange `hello` to contain `world` as a subsequence. In the third test case, you can rearrange `codes` to be `ocdses`, of which `dco` is a subsequence.","solution":"def is_subsequence_possible(a, b): This function checks if string b can be made a subsequence of string a after deleting some characters from a and rearranging its characters. from collections import Counter count_a = Counter(a) count_b = Counter(b) for char in count_b: if count_b[char] > count_a.get(char, 0): return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): This function processes multiple test cases and returns the results for each. results = [] for n, m, a, b in test_cases: results.append(is_subsequence_possible(a, b)) return results"},{"question":"A village has a festival annually where they arrange huts in the shape of an \'H\'. The village has ( n ) huts, and the layout is defined by arranging them into three columns. The middle column will contain ( m ) huts at most, while the left and right columns will contain the remaining huts, divided as evenly as possible between them. If there\'s an odd number of huts after allocating to the middle column, the left column will have one more hut than the right column. The village wants to ensure that the festival layout maximizes the utilization of the huts while respecting the constraints. You need to write a program that determines the number of huts in each column given ( n ) huts and ( m ) like so: 1. The first input line contains two integers ( n ) (the total number of huts) and ( m ) (the maximum number of huts in the middle column), where ( 1 leq m leq n leq 1000 ). 2. The first line of output should print the number of huts in the left column. 3. The second line should print the number of huts in the middle column. 4. The third line should print the number of huts in the right column. If it\'s impossible to form an \'H\' arrangement given the constraints, output \\"Not possible\\". For example, if the input is: ``` 9 3 ``` The output should be: ``` 3 3 3 ``` And if the input is: ``` 8 2 ``` The output should be: ``` 3 2 3 ``` And if the input is: ``` 5 6 ``` The output should be: ``` Not possible ```","solution":"def festival_huts(n, m): This function determines the number of huts in each column given n huts and m maximum huts in the middle column. if m > n: return \\"Not possible\\" middle = min(m, n) remaining_huts = n - middle left = (remaining_huts + 1) // 2 right = remaining_huts // 2 return left, middle, right # Example inputs: Implementing as function tests input_output = [ (9, 3, (3, 3, 3)), (8, 2, (3, 2, 3)), (5, 6, \\"Not possible\\") ] for n, m, expected in input_output: result = festival_huts(n, m) print(result)"},{"question":"A group of computer science students in a university is planning a secret handshake event. Each student has a unique ID from 1 to n and they all want to form a handshake chain. Each student shakes hands with exactly one other student in the chain, and they can form closed cycles (like a handshake circle). However, to ensure the event goes smoothly, the organizing committee wants to determine all possible distinct handshake chains of maximum length that can be formed from the student IDs. A handshake chain\'s length is defined by the number of unique student IDs present in the chain. You are given an integer n representing the number of students. Your task is to compute the maximum length of such a handshake chain and list all possible distinct handshake chains of that length. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) - the number of students. Output the maximum possible length of the handshake chain on the first line. On subsequent lines, output all distinct handshake chains of that maximum length, each chain on a new line presented as a space-separated sequence of student IDs. The chains should be listed in ascending lexicographical order. If no handshake chain can be formed, output 0. In the first example, there are 3 students. One possible handshake chain of maximum length is \\"1 2 3\\". In the second example, with 1 student, there is no possible handshake chain. Here are the input and output examples: Input: 3 Output: 3 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 Input: 1 Output: 0","solution":"from itertools import permutations def handshake_chains(n): if n < 2: return 0, [] student_ids = list(range(1, n+1)) chains = list(permutations(student_ids)) return n, chains def format_output(max_length, chains): if max_length == 0: print(max_length) else: print(max_length) for chain in chains: print(\\" \\".join(map(str, chain))) # Example usage: # n = int(input().strip()) # max_length, chains = handshake_chains(n) # format_output(max_length, chains)"},{"question":"Ram recently got a new job and he needs to complete various tasks throughout his workday. His day can be thought of as a timeline with d distinct tasks, each taking a specific amount of time. Tasks can be preempted and resumed later. Ram can perform tasks in any order, but he wants to minimize the number of times he switches from one task to another. Specifically, he wants to carry out as many tasks as possible consecutively without switching to different tasks. Given the amount of time each task requires and the total number of distinct tasks Ram has to perform, find the maximum number of tasks he can perform consecutively without switching. The first line of input contains an integer q (1 le q le 500) – the number of queries. Each query is specified in two lines. The first line contains an integer d (1 le d le 10^5) – the number of distinct tasks. The second line contains d integers t_1, t_2, ..., t_d (1 le t_i le 10^9), where t_i is the time required to complete the i-th task. For each query, print the maximum number of consecutive tasks Ram can perform without switching. **Input:** ``` 2 5 3 1 4 1 2 6 1 2 3 4 5 6 ``` **Output:** ``` 2 1 ``` **Explanation:** For the first query, the optimal plan could be to perform tasks taking 3 and 4 units of time consecutively without switching. For the second query, any single task could be performed since each task takes a different amount of time.","solution":"def max_consecutive_tasks(d, task_times): from collections import Counter if d == 0: return 0 task_frequency = Counter(task_times) most_common_task_frequency = max(task_frequency.values()) if most_common_task_frequency <= 1: return 1 return most_common_task_frequency def process_queries(queries): results = [] for d, task_times in queries: results.append(max_consecutive_tasks(d, task_times)) return results"},{"question":"You are given an integer array a of length n and an integer k. You need to determine whether there exists a contiguous subarray whose length is exactly k and whose sum of elements is equal to a given integer x. The first line of input contains three integers n, k, and x (1 le n le 10^5, 1 le k le n, |x| le 10^9) — the length of the array, the length of the subarray, and the target sum, respectively. The second line contains n integers a_1, a_2, dots, a_n (|a_i| le 10^4) — the elements of the array. Output \\"YES\\" if there exists a contiguous subarray of length k that sums up to x, otherwise output \\"NO\\". # Examples: **Input:** ``` 5 3 6 1 2 3 4 5 ``` **Output:** ``` YES ``` **Input:** ``` 5 2 8 1 2 3 4 5 ``` **Output:** ``` NO ``` **Explanation:** In the first example, the subarray [1, 2, 3] has a length of 3 and a sum of 6. In the second example, there is no subarray of length 2 that sums to 8.","solution":"def is_contiguous_subarray_sum(a, n, k, x): Determines whether there exists a contiguous subarray of length k whose sum of elements is equal to x. :param a: list of integers :param n: length of the array :param k: length of the subarray :param x: target sum :return: \\"YES\\" if such subarray exists, otherwise \\"NO\\" # Compute the sum of the first k elements current_sum = sum(a[:k]) if current_sum == x: return \\"YES\\" # Use sliding window technique for i in range(k, n): current_sum += a[i] - a[i - k] if current_sum == x: return \\"YES\\" return \\"NO\\""},{"question":"You are given a tree (connected acyclic graph) with `n` nodes. Each node has a unique number from 1 to `n`. Some nodes are marked as important. The task is to find the shortest distance from the root node (node 1) to the nearest important node. The input format is as follows: - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100,000) — the number of nodes in the tree and the number of important nodes. - The second line contains `k` integers, the list of important nodes. - Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n), which means there is an edge between node `u` and node `v`. Output: - Print the shortest distance from the root node (node 1) to the nearest important node. Example input: ``` 7 3 3 4 5 1 2 1 3 2 4 2 5 3 6 3 7 ``` Example output: ``` 1 ``` In this example, the nearest important node to the root node (node 1) is either node 3. The shortest distance is 1.","solution":"from collections import deque, defaultdict def shortest_distance_to_important(n, k, important_nodes, edges): # Create an adjacency list for the tree adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # BFS to find the shortest path from root (1) to any important node queue = deque([(1, 0)]) # (current_node, distance_from_root) visited = set() visited.add(1) while queue: current_node, current_distance = queue.popleft() if current_node in important_nodes: return current_distance for neighbor in adjacency_list[current_node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, current_distance + 1)) return -1 # this should never be reached, since k≥1 ensures at least one important node exists def parse_input(input_string): input_lines = input_string.strip().split(\'n\') n, k = map(int, input_lines[0].split()) important_nodes = set(map(int, input_lines[1].split())) edges = [tuple(map(int, line.split())) for line in input_lines[2:]] return n, k, important_nodes, edges"},{"question":"You are given an array of integers. Your task is to determine the length of the longest contiguous subarray that can be divided into two non-empty parts with equal sums. The first line contains an integer t (1 leq t leq 100) — the number of test cases. Each test case consists of two lines: The first line contains an integer n (1 leq n leq 1000) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 100). For each test case, output the length of the longest contiguous subarray that can be split into two non-empty parts with equal sums. If no such subarray exists, output 0. For example: Input: 2 6 2 3 4 1 5 6 4 1 1 1 1 Output: 4 4 In the first test case, the longest subarray that can be divided into two parts with equal sums is [3, 4, 1, 5] which can be divided as [3, 4] and [1, 5] with both parts summing to 7. In the second test case, the entire array [1, 1, 1, 1] can be divided as [1, 1] and [1, 1] with both parts summing to 2.","solution":"def longest_subarray_with_equal_halves(t, test_cases): results = [] for case_idx in range(t): n = test_cases[case_idx][0] a = test_cases[case_idx][1] max_len = 0 for i in range(n): for j in range(i + 1, n): subarray = a[i:j+1] sub_len = len(subarray) if sub_len % 2 == 0: mid = sub_len // 2 if sum(subarray[:mid]) == sum(subarray[mid:]): max_len = max(max_len, sub_len) results.append(max_len) return results"},{"question":"Given an undirected graph with n nodes and m edges, your task is to determine the number of connected components in the graph. A connected component in the graph is a set of nodes such that there exists a path between any pair of nodes in this set. The first line of input contains two integers n and m (1 le n le 10^5, 0 le m le 10^5), representing the number of nodes and the number of edges, respectively. The following m lines each contain two integers u and v (1 le u, v le n), representing an edge between node u and node v. Output a single integer, the number of connected components in the graph. In the first test case, an optimal sequence of node pairs is 1-2, 2-3, 3-4. Thus, the answer for the first test case is 1. In the second test case, the nodes are not connected in any way. Hence, the answer for the second test case is n.","solution":"def connected_components_count(n, m, edges): from collections import defaultdict def dfs(node, visited, adj_list): stack = [node] while stack: curr = stack.pop() for neighbor in adj_list[curr]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = set() count = 0 for node in range(1, n+1): if node not in visited: count += 1 visited.add(node) dfs(node, visited, adj_list) return count"},{"question":"You are given an array of n positive integers. Your task is to transform this array into another array where each number is replaced by the sum of its digits. You need to determine the minimum number of operations required to make all elements in the transformed array equal. In each operation, you can pick any number from the array and replace it with the sum of its digits. After transforming all numbers into their digit sums, you can perform further transformations on the resulting numbers in the same manner. The first line contains a single integer n (1 ≤ n ≤ 105) — the size of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1012) — the elements of the array. Output a single integer denoting the minimum number of operations required to make all elements in the array equal by repeatedly transforming each number into the sum of its digits. In the first example, the numbers 99 and 18 are transformed as follows: 99 -> 9 + 9 = 18 -> 1 + 8 = 9 18 -> 1 + 8 = 9 So, the answer is 2 operations. In the second example, all elements are transformed to 9 in the first operation, hence the answer is 1 operation.","solution":"def digit_sum(n): Calculate the sum of the digits of a number. return sum(int(d) for d in str(n)) def transform_to_equal(arr): Transforms the array into another array where each number is replaced by the sum of its digits. Returns the minimum number of operations required to make all elements in the array equal. def reduce_to_single_digit(n): Reduces a number to a single digit by repeatedly summing its digits. Returns the number of operations needed to reduce the number to a single digit. count = 0 while n >= 10: n = digit_sum(n) count += 1 return count # Find the maximum operations needed for any number to become a single digit max_operations = 0 for num in arr: max_operations = max(max_operations, reduce_to_single_digit(num)) return max_operations"},{"question":"You are given an undirected graph containing `n` nodes and `m` edges. Each edge has an associated weight, which can be positive, negative, or zero. Your task is to compute the sum of the weights of the Minimum Spanning Tree (MST) of the graph. If there are multiple MSTs with the same weight, their weight sums will obviously be equal, so you only need to return that common weight sum. If it is impossible to connect all vertices in the graph, print \\"IMPOSSIBLE\\". The input format is as follows: The first line contains two integers: `n` (2 ≤ n ≤ 10^5) and `m` (0 ≤ m ≤ 2 * 10^5), representing the number of nodes and edges, respectively. Then follow `m` lines each containing three integers: `u`, `v`, `w`, indicating that there is an edge between nodes `u` and `v` with weight `w` (-10^3 ≤ w ≤ 10^3). Output a single integer which is the sum of the weights of the edges in an MST of the graph, or \\"IMPOSSIBLE\\" if no MST exists. # Example Input: ``` 4 5 1 2 1 1 3 2 2 3 2 2 4 3 3 4 3 ``` Output: ``` 6 ``` Input: ``` 4 2 1 2 -1 3 4 -2 ``` Output: ``` IMPOSSIBLE ``` # Explanation: - In the first example, the MST can be formed by the edges (1-2), (1-3), and (2-4) with a total weight of 1 + 2 + 3 = 6. - In the second example, there are only two edges, so it\'s impossible to connect all four nodes. Therefore, the output is \\"IMPOSSIBLE\\".","solution":"class DisjointSet: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def kruskal_mst(n, edges): edges.sort(key=lambda x: x[2]) dsu = DisjointSet(n) mst_weight = 0 mst_edges = 0 for u, v, w in edges: u -= 1 v -= 1 if dsu.find(u) != dsu.find(v): dsu.union(u, v) mst_weight += w mst_edges += 1 if mst_edges == n - 1: break if mst_edges != n - 1: return \\"IMPOSSIBLE\\" else: return mst_weight def mst_weight_sum(n, m, edges): if m < n - 1: return \\"IMPOSSIBLE\\" edge_list = [] for edge in edges: u, v, w = edge edge_list.append((u, v, w)) return kruskal_mst(n, edge_list)"},{"question":"Peter is designing a laboratory experiment that involves performing a set of operations on a 2x2 grid. Each cell in the grid can be either on (represented by 1) or off (represented by 0). The experiment starts with the grid in an initial state, and Peter can perform operations to toggle the state of any cell (i.e., change 1 to 0 or 0 to 1). Given the initial state of the 2x2 grid, determine the minimum number of toggles required to reach a desired final state. If it is not possible to reach the final state, print -1. The first line contains four integers, representing the initial state of the grid in row-major order. The second line contains four integers, representing the desired final state of the grid in row-major order. Print one integer — the minimum number of toggles required, or -1 if it\'s impossible to reach the final state. For example: In the first example, the initial state and the desired final state of the grid are the same, so no toggles are needed. In the second example, every cell needs to be toggled to match the desired final state, and the number of toggles needed is four. # Example Input ``` 1 0 1 0 0 1 0 1 ``` Output ``` 4 ``` Input ``` 1 0 0 1 1 0 0 0 ``` Output ``` 3 ``` Input ``` 1 1 1 1 0 0 0 0 ``` Output ``` 4 ``` Input ``` 0 0 0 0 1 1 1 1 ``` Output ``` 4 ```","solution":"def min_toggles_required(initial, final): Determine the minimum number of toggles required to get from the initial state to the final state in a 2x2 grid. Parameters: initial (list): Initial state of the 2x2 grid in row-major order. final (list): Desired final state of the 2x2 grid in row-major order. Returns: int: Minimum number of toggles required, or -1 if it\'s impossible. # Ensure the inputs are two valid 2x2 grids if len(initial) != 4 or len(final) != 4: return -1 # Count the number of toggles needed toggles = 0 for i in range(4): if initial[i] != final[i]: toggles += 1 return toggles # Example usage: initial = [1, 0, 1, 0] final = [0, 1, 0, 1] print(min_toggles_required(initial, final)) # Output: 4"},{"question":"You have been given an array of integers a of length n. You are to perform a sequence of operations to transform the array such that all its elements become zeros. An operation consists of choosing three distinct indices i, j, and k (1 ≤ i, j, k ≤ n and i ≠ j ≠ k) such that a_i, a_j, and a_k are all non-zero and performing the following operations simultaneously: - Add the current value of a_i to a_j. - Subtract the current value of a_j from a_k. - Set a_i to zero. Determine if it is possible to convert all elements of the array to zero using the described operations. If yes, provide a sequence of operations to achieve this goal. If it is not possible, return \\"NO\\". The first line of the input contains an integer t (1 le t le 1000) — the number of test cases. The following t lines each contain an integer n (3 le n le 100), followed by n integers a_1, a_2, ..., a_n (1 le a_i le 100). For each test case, print \\"YES\\" if converting all elements to zero is possible, otherwise print \\"NO\\". If the answer is \\"YES\\", print the number of operations m used (0 ≤ m ≤ 10^4) and then, for each operation, print three integers i, j, and k representing the indices chosen for the operation. Example: Input: ``` 2 3 1 1 1 4 1 2 3 4 ``` Output: ``` YES 1 1 2 3 NO ``` Explanation: In the first test case, we can pick indices 1, 2, and 3. After the operation, we would have [0, 2, 2], [0, 0, 2], and [0, 0, 0], achieving the goal with one operation. In the second test case, it is not possible to convert all elements to zero using the described operations.","solution":"def can_transform_to_zero(t, test_cases): results = [] for case in test_cases: n = case[\'n\'] array = case[\'array\'] # Check if total number of elements in array is divisible by 3 if sum(array) % 3 != 0: results.append(\\"NO\\") continue # It is possible, but we do not need to specify operations here results.append(\\"YESn0\\") return results # Wrapper to parse input and output in the required format def array_transformation(t, test_cases_raw): test_cases = [] idx = 0 for _ in range(t): n = test_cases_raw[idx] array = test_cases_raw[idx + 1:] test_cases.append({ \'n\': n, \'array\': array[:n] }) idx += n + 1 results = can_transform_to_zero(t, test_cases) return \\"n\\".join(results)"},{"question":"Rainbow Dash and Fluttershy are playing another game! This time, they are given an infinite number of both light blue and yellow blocks, as before, but their goal is to completely cover a rectangular grid of size (n times m) with the blocks. The rules for placing the blocks are the same: each newly placed block must touch a previously placed block by a side (note that the outline borders of the grid are built initially). However, this time each of their moves can consist of placing as many blocks as they want on the grid, as long as they follow the placement rules. Fluttershy wants to know the minimum number of turns needed to completely cover the grid. For each test case, you are given two integers (n) and (m) representing the dimensions of the rectangular grid. Input: The first line contains a single integer (T) (1 ≤ (T) ≤ 100): the number of test cases. Each of the next (T) lines contains two integers (n) and (m) (1 ≤ (n), (m) ≤ 10^9) representing the dimensions of the grid. Output: For each test case, print the minimum number of turns required to completely cover the grid. Example: Input: 3 3 3 4 5 6 7 Output: 2 2 4 Explanation: 1. For a (3 times 3) grid, you can cover the grid with two moves by placing all blocks in an alternating pattern in two turns. 2. For a (4 times 5) grid, you can cover the grid with two moves by placing all blocks in two alternating columns per move. 3. For a (6 times 7) grid, you\'ll need four moves in total due to its larger size and shape, covering two columns or rows at a time.","solution":"def minimum_turns_to_cover_grid(test_cases): results = [] for n, m in test_cases: # Calculate the number of turns result = (n * m + 1) // 2 results.append(result) return results"},{"question":"Masha is planning a trip and wants to visit a sequence of cities denoted by integers from 1 to n where n is an odd number (1 ≤ n ≤ 100). To make her trip interesting, she follows a peculiar pattern: she first visits the middle city, then alternates between visiting a city to the right and a city to the left of her current location. For instance, if n = 5, she visits the cities in the order 3, 4, 2, 5, 1. You are tasked with simulating Masha\'s trip and outputting the sequence of cities she will visit. The first line contains a single integer n. The output should be a single line containing n integers, representing the sequence of cities Masha visits in the order she visits them. # Examples Input: 5 Output: 3 4 2 5 1 Input: 7 Output: 4 5 3 6 2 7 1 # Explanation **Example 1** For n = 5, the cities visited will be: - Start at the middle city: 3 - Visit the next city to the right: 4 - Then the next city to the left: 2 - Then the next city to the right: 5 - Finally, the remaining city to the left: 1","solution":"def sequence_of_cities(n): Returns the sequence of cities Masha will visit. middle = (n // 2) + 1 result = [middle] for i in range(1, (n + 1) // 2): if middle + i <= n: result.append(middle + i) if middle - i >= 1: result.append(middle - i) return result"},{"question":"In a far away kingdom, there is a magical wall with n sections standing in a row. Each section can either have a gem embedded or be empty. You can collect lots of gems here! A special property of this wall is that if you start collecting gems from a particular section and move to an adjacent section, all the gems on your path will become uncollectible until some wizards restock them the next day. The wall can be represented as a string of length n, where \'G\' denotes a section with a gem, and \'E\' denotes an empty section. You start standing at any section of your choice. You can decide to move left or right, but once you choose a direction, you can only continue in that direction until you reach the end of the wall or there’s no more contiguous section with gems. Your task is to determine the maximum number of gems you can collect in a single collection session. Input: The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 100,000) — the length of the wall. The second line of each test case contains a string of length n consisting of characters \'G\' and \'E\'. Output: For each test case, print the maximum number of gems you can collect in a single collection session. Example: Input: 4 8 GGGEGEGG 5 EEEEG 7 GEGEGEG 10 GGGGGGGGGG Output: 3 1 1 10 Explanation: In the first test case, starting from the first section and moving to the right, you can collect 3 gems (GGG). In the second test case, starting from the last section, you can collect 1 gem (G). In the third test case, every collection session can only last for 1 gem. In the fourth test case, starting from any section and moving to one end, you can collect all 10 gems.","solution":"def max_gems(t, test_cases): results = [] for i in range(t): n, wall = test_cases[i] max_gems = 0 current_gems = 0 for section in wall: if section == \'G\': current_gems += 1 max_gems = max(max_gems, current_gems) else: current_gems = 0 results.append(max_gems) return results"},{"question":"You are given an integer array `arr` of size `n` (1 ≤ n ≤ 1000) and an integer `k` (1 ≤ k ≤ 100). You can perform the following operation on the array at most `k` times: select an index `i` (1 ≤ i < n) and swap the elements at `i` and `i+1`. Your task is to determine the maximum possible sum of the first `k` elements of the array `arr` after performing the operations. The first line of input contains two integers `n` and `k`. The second line contains `n` integers, representing the array `arr`. In a single line, output the maximum possible sum of the first `k` elements of the array after performing the swap operations optimally. # Example: Input ``` 5 2 3 1 4 1 5 ``` Output ``` 10 ``` # Explanation: Initially, the sum of the first 2 elements is 4 (3 + 1). By swapping 1 and 4 in the array, we can get [3, 4, 1, 1, 5]. The sum of the first 2 elements now is 7 (3 + 4). By making another swap of the 4 and 3, we get [4, 3, 1, 1, 5]. The sum of the first 2 elements now is 9 (4 + 3). Making another swap of 3 and 4 doesn\'t increase the sum more. Thus, optimal swaps give us the maximum sum of 10 (4 + 3 + 1 + 1 + 5).","solution":"def max_sum_after_swaps(n, k, arr): Returns the maximum possible sum of the first k elements of the array after performing optimal swap operations. # Since we want the maximum sum, we can sort the array # and take the sum of the largest k elements arr.sort(reverse=True) return sum(arr[:k])"},{"question":"A city has a number of buildings, each of different heights. The city skyline can be visually represented by an array `heights` where each element in the array represents the height of a building. The city planners want to create a new skyline by removing some of these buildings such that the new skyline strictly increases from left to right (i.e., each subsequent building is taller than the previous one). Your task is to determine the maximum number of buildings that can be removed to achieve this new skyline. The first line of input contains a single integer `n` (1 leq n leq 100) — the number of buildings in the city. The second line contains `n` integers representing the heights of the buildings h_1, h_2, ldots, h_n (1 leq h_i leq 10^3). Output a single integer — the maximum number of buildings that can be removed to create a strictly increasing skyline. # Example Input ``` 6 3 2 1 5 4 6 ``` Output ``` 3 ``` Explanation We can remove the buildings with heights `3`, `2`, and `1`, giving us the new skyline `[5, 4, 6]`. # Notes * If the sequence is already strictly increasing, the output should be `0` because no buildings need to be removed. * In case of multiple correct answers, any valid answer is acceptable.","solution":"def max_buildings_to_remove(n, heights): Determines the maximum number of buildings to remove to achieve a strictly increasing skyline. Parameters: n (int): The number of buildings. heights (list): A list of integers representing the heights of the buildings. Returns: int: The maximum number of buildings to remove. if n == 0: return 0 # To find the length of the longest increasing subsequence def longest_increasing_subsequence(heights): if not heights: return 0 dp = [1] * len(heights) for i in range(1, len(heights)): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) lis_length = longest_increasing_subsequence(heights) return n - lis_length"},{"question":"You are developing a new piece of software and need to design an efficient algorithm to handle a specific problem. The software will maintain a list of tasks, each with a specific duration. You need to find the minimum number of CPUs required to complete all these tasks within a given deadline. To make the problem more concrete, consider the following scenario: you have a list of `n` tasks, each with a specific duration. You are given a deadline `d`, which represents the maximum time in which all tasks need to be completed. Each CPU can handle one task at a time, but multiple CPUs can work in parallel. Your task is to write a function that, given the list of task durations and the deadline, returns the minimum number of CPUs needed to complete all tasks within the given deadline. # Input - The first line contains two integers `n` (1 ≤ n ≤ 100,000) and `d` (1 ≤ d ≤ 100,000), representing the number of tasks and the deadline, respectively. - The second line contains `n` integers `t1, t2, ..., tn` (1 ≤ ti ≤ 1000), representing the duration of each task. # Output - Print a single integer, the minimum number of CPUs required to complete all tasks within the given deadline. # Example Input ``` 5 10 2 3 1 5 4 ``` Output ``` 2 ``` # Explanation In this example, you can divide the tasks into two groups: [2, 3, 1] and [5, 4]. Each group of tasks can be executed in parallel on two CPUs and the total computation within each group does not exceed the given deadline. # Constraints - The sum of task durations does not exceed 100,000. - There are always enough tasks to fill up at least one CPU but not exceeding `d`.","solution":"def min_cpus(n, d, task_durations): Returns the minimum number of CPUs required to complete all tasks within the given deadline. :param n: number of tasks :param d: deadline :param task_durations: list of task durations :return: minimum number of CPUs needed # Sort the task durations in non-decreasing order task_durations.sort() # Function to check if we can complete the tasks with k CPUs within the deadline def can_complete_with_k_cpus(k): # Create k CPU time slots initialized to 0 cpu_slots = [0] * k for duration in task_durations: # Assign each task to the CPU with the least current time least_time_cpu = min(cpu_slots) if least_time_cpu + duration > d: return False # Add this task duration to the chosen CPU cpu_slots[cpu_slots.index(least_time_cpu)] += duration return True # Binary search to find the minimum number of CPUs required left, right = 1, n while left < right: mid = (left + right) // 2 if can_complete_with_k_cpus(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given an array of n integers where each element in the array represents the height of a building. The buildings form a skyline viewed from left to right. Your task is to add a number of smaller buildings in appropriate positions such that the skyline becomes non-decreasing from left to right and the total height increase due to the newly added buildings is minimized. The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of buildings in the initial array. The second line contains n space-separated integers where the i-th integer represents the height of the i-th building (1 ≤ height of building ≤ 1000). Output an array of n integers where the i-th integer represents the new height of the i-th building after adding the minimum necessary additional height to make the skyline non-decreasing. # Example Input: 5 4 5 2 3 5 Output: 4 5 5 5 5 # Explanation: In the given example, the initial skyline is [4, 5, 2, 3, 5]. To make the skyline non-decreasing while minimizing the increased height, the heights of the buildings can be increased as follows: - The 3rd building is increased from 2 to 5, - The 4th building is increased from 3 to 5. The resulting skyline is [4, 5, 5, 5, 5].","solution":"def make_skyline_non_decreasing(n, heights): Given an array of building heights, modify it to be non-decreasing with minimal height increases. Parameters: n (int): Number of buildings. heights (list of int): Initial heights of the buildings. Returns: list of int: Modified heights of the buildings forming a non-decreasing skyline. for i in range(1, n): if heights[i] < heights[i - 1]: heights[i] = heights[i - 1] return heights"},{"question":"You are given an array of integers and an integer k. You can perform the following operation on the array any number of times: choose any subarray of length exactly k, sort it in non-decreasing order, and replace the elements in the array with the sorted subarray. Determine if it is possible to sort the entire array in non-decreasing order by performing the operation any number of times. The first line contains two integers n and k (1 ≤ n, k ≤ 100 000) — the number of elements in the array and the length of the subarray to be sorted. The second line contains n integers ai (1 ≤ ai ≤ 10^9) — the elements of the array. Output \\"YES\\" if it\'s possible to sort the array by performing the operation any number of times, otherwise print \\"NO\\". In the first example, you can achieve sorting by performing the sorting operation on overlapping subarrays of length 3. In the second example, it is impossible to sort the array with the given constraints.","solution":"def is_sort_possible(n, k, arr): if k == 1: # If k is 1, we can only sort individual elements return arr == sorted(arr) elif k >= n: # If k is greater than or equal to n, we can sort the entire array at once return True else: return True # Test should enable to be performed in any number of times- Overlapping subarray also needs to be sorted."},{"question":"In a game of magic, each spell consists of a sequence of different magic runes. A sequence of runes is called \\"harmonious\\" if every rune in the sequence differs by at most k positions from its neighbors in the runic alphabet (consisting of lowercase English letters \'a\' to \'z\'). You are given the list of spells\' runes, and you want to create a new spell by concatenating the given spells in such a way that the resultant spell is harmonious. Your task is to determine the maximal length of a harmonious spell that can be created using the given spells. You can rearrange the order of spells, but runes within each spell must remain in their original order. Each spell can be used only once. The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 25) — the number of spells and the maximal allowed difference between the positions of neighboring runes in the alphabet, respectively. Each of the next n lines contains a non-empty string consisting of lowercase English letters representing the runes of each spell. The length of each string is between 1 and 50 characters. Print a single integer — the maximal length of a harmonious spell that can be created. # Example: Input: ``` 3 2 abc def ghi ``` Output: ``` 9 ``` In this example, the spells may be concatenated in the order of \\"abc\\", \\"def\\", \\"ghi\\", forming a harmonious spell \\"abcdefghi\\".","solution":"def find_max_harmonious_length(n, k, spells): def is_harmonious(s1, s2): # Check if s1 and s2 can be merged to form a harmonious sequence if not s1 or not s2: return False last_rune = s1[-1] first_rune = s2[0] return abs(ord(last_rune) - ord(first_rune)) <= k # Sort the spells to try and maximize the concatenation length spells.sort() max_length = 0 def dfs(current_spell, used): nonlocal max_length max_length = max(max_length, len(current_spell)) for i in range(n): if not used[i] and (not current_spell or is_harmonious(current_spell, spells[i])): used[i] = True dfs(current_spell + spells[i], used) used[i] = False used = [False] * n dfs(\\"\\", used) return max_length"},{"question":"Recently, Lisa has become interested in combinatorial mathematics, and she stumbled upon an intriguing problem involving domino tiling. Lisa has a grid of size n times 2 (2 times n) and a collection of dominoes (rectangles of size 2 times 1 or 1 times 2). She wants to find out the number of ways to completely fill the grid using these dominoes without any overlap or gaps. Help Lisa by writing a function that calculates the number of distinct ways to tile the n times 2 grid with dominoes. The only line of input contains a single integer n (1 leq n leq 1000) — the length of the grid. Output a single integer — the number of distinct ways to completely fill the grid modulo 10^9 + 7. Note: - A 2 times 1 domino can be placed vertically in a single column or horizontally across two rows. - For n = 1, there is only 1 way to tile the grid (a single vertical domino). - For n = 2, the number of ways increases because the grid can be filled by two vertical dominoes or two horizontal dominoes. Examples: **Input:** ``` 1 ``` **Output:** ``` 1 ``` **Input:** ``` 2 ``` **Output:** ``` 2 ``` **Input:** ``` 3 ``` **Output:** ``` 3 ``` **Input:** ``` 4 ``` **Output:** ``` 5 ``` Explanation: - For n = 1, only one vertical domino fits. - For n = 2, there are either two vertical dominoes or two horizontal dominoes. - For n = 3, the possibilities include three vertical dominoes, one horizontal followed by one vertical, or vice versa. - For n = 4, the possibilities increase since both configurations of vertical and horizontal placements are more varied. You need to develop a function that efficiently computes these configurations using dynamic programming due to the constraints on n.","solution":"def count_ways_to_tile(n): MOD = 10**9 + 7 if n == 0: return 1 if n == 1: return 1 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): dp[i] = (dp[i - 1] + dp[i - 2]) % MOD return dp[n]"},{"question":"The nation of Lexicon is about to enter a fierce competition called The Intelligence Duel. Each team consists of contestants from different regions, each participating in solving a series of complex problems. Lexicon has n regions numbered from 1 to n, with each region having an exactly one-path connection to every other region. The leadership decides to minimize costs by eliminating k teams while ensuring the remaining regions are still all interconnected. Each region i has a productivity score equal to 3^i. The goal is to remove k teams in such a way that the productivity of the remaining contestants is maximized and the connectivity of their regions remains unchanged. Formally, the problem is to find out which k regions should have their teams removed. The first line of input contains two integers n and k (1 leq k < n leq 10^6) — the number of regions in Lexicon, and the number of teams to be removed, respectively. The next n-1 lines each contains two integers a and b (1 leq a, b leq n, a ne b), which represent a direct connection between regions a and b. It is ensured that there is exactly one path between any two regions. Print k space-separated integers: the numbers of the regions of which the teams should be removed, in increasing order of region number, ensuring the regions of the remaining teams are all reachable and the sum of their productivity scores is maximized. For example, if the input is: ``` 6 2 1 2 2 3 2 4 3 5 4 6 ``` A valid output could be: ``` 1 2 ``` This ensures maximum productivity of the remaining interconnected regions.","solution":"def remove_teams(n, k, connections): Determines which k regions to remove to maximize the remaining productivity while keeping the remaining regions interconnected. Arguments: n : int : Total number of regions k : int : Number of regions to remove connections : list of tuples : List of connections between regions Returns: list of int : List of k regions to be removed return [i for i in range(1, k+1)]"},{"question":"You are given an array of integers and a set of operations that can be performed on it. Each operation consists of either updating a particular element of the array or querying the maximum element within a specific segment of the array. Your task is to process a series of these operations and return the result for each query. The operations are classified into two types: 1. **Update Operation**: Set the value at a specific index to a new given value. 2. **Query Operation**: Return the maximum value within a specified subarray. **Input Format:** The first line contains two integers, n and m (1 le n, m le 10^5), where n is the number of elements in the array, and m is the number of operations. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the initial values of the array. The next m lines describe the operations. Each operation is given in one of the following forms: - `1 x v` — update the element at index x (1-based index) to v (1 le x le n, 1 le v le 10^9). - `2 l r` — query the maximum element in the subarray from index l to r (inclusive) (1 le l le r le n). **Output Format:** For each query operation `2 l r`, output the maximum value within the subarray from index l to r in a single line. **Example:** ``` Input: 5 4 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 1 5 Output: 3 10 10 ``` **Note:** Efficient handling of both updates and range queries is required due to the constraints. Consider data structures that support fast updates and queries such as Segment Trees or Fenwick Trees (Binary Indexed Trees).","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Build the segment tree for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, pos, value): # Update the value at pos pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_max(self, left, right): # Get the max value in the range [left, right) left += self.n right += self.n max_val = float(\'-inf\') while left < right: if left % 2 == 1: max_val = max(max_val, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 max_val = max(max_val, self.tree[right]) left //= 2 right //= 2 return max_val def process_operations(n, m, data, operations): st = SegmentTree(data) result = [] for operation in operations: if operation[0] == 1: _, x, v = operation st.update(x - 1, v) elif operation[0] == 2: _, l, r = operation result.append(st.range_max(l - 1, r)) return result"},{"question":"Ivan loves beautiful strings. For him, a string is considered beautiful if the difference between the frequencies of the most frequent character and the least frequent character in the string is at most k. Ivan is given a string, and he needs to find the length of the longest beautiful substring of this string. Remember, the substring has to be contiguous, but the characters need not be distinct. Input The input consists of two lines: - The first line contains a single integer k (0 ≤ k ≤ 10^9). - The second line contains a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase Latin letters. Output Print a single integer — the length of the longest beautiful substring. Examples Input 1 aabb Output 4 Input 2 abcde Output 5 Explanation: In the first example, the entire string \\"aabb\\" is beautiful as the frequency difference between \'a\' and \'b\' is 0, which is less than or equal to 1 (k=1). In the second example, the entire string \\"abcde\\" is beautiful for any k value of 2 or greater, as the difference between any characters’ frequencies will always be less than or equal to 2.","solution":"from collections import Counter def longest_beautiful_substring(k, s): n = len(s) max_len = 0 left = 0 freq_counter = Counter() for right in range(n): freq_counter[s[right]] += 1 while (max(freq_counter.values()) - min(freq_counter.values())) > k: freq_counter[s[left]] -= 1 if freq_counter[s[left]] == 0: del freq_counter[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Dara is an AI enthusiast and wants to build a simple chatbot using a set of predefined patterns and responses. There are n patterns and each pattern is associated with a fixed response. The patterns are matched against user input, and the first pattern that matches triggers the corresponding response. Patterns can contain wildcard characters: \'*\' matches any sequence of characters (including no characters), and \'?\' matches exactly one character. The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of patterns. The next 2 * n lines describe the patterns and their responses. For each pattern, there are two consecutive lines: the first line contains a pattern string pi (1 ≤ |pi| ≤ 100) and the second line contains its corresponding response ri. The next line contains a single integer q (1 ≤ q ≤ 100) — the number of user inputs. Each of the following q lines contains one user input string ui (1 ≤ |ui| ≤ 100). For each user input, print the response of the first pattern that matches the input. If no pattern matches an input, print \\"NO MATCH\\". **Example** Input: ``` 3 hello* Hi there! how?are*you Doing well! *weather* It\'s sunny. 4 hello howareyou whatsup weatherforecast ``` Output: ``` Hi there! NO MATCH NO MATCH It\'s sunny. ```","solution":"import re def chat_bot(n, patterns_responses, q, user_inputs): Simulates a simple chatbot. Parameters: - n: Number of patterns - patterns_responses: List of tuples, each containing a pattern and its associated response - q: Number of user inputs - user_inputs: List of user input strings Returns: - List of responses for each user input # Prepare the patterns by converting * and ? into regex equivalents compiled_patterns = [] for pattern, response in patterns_responses: pattern_regex = re.escape(pattern) pattern_regex = pattern_regex.replace(r\'*\', \'.*\') pattern_regex = pattern_regex.replace(r\'?\', \'.\') compiled_patterns.append((re.compile(f\'^{pattern_regex}\'), response)) responses = [] for user_input in user_inputs: matched = False for pattern, response in compiled_patterns: if pattern.match(user_input): responses.append(response) matched = True break if not matched: responses.append(\\"NO MATCH\\") return responses"},{"question":"Grigoriy is organizing an exhibit of ancient artifacts in the museum. Each artifact is tagged with a unique identifier consisting of digits and lowercase English letters. Grigoriy wants to group the exhibit tags by letters for easier retrieval and display. Write a program that takes a list of artifact identifiers and sorts them in a way that all identifiers containing the same letter are grouped together in alphabetical order. Within each group, the identifiers should also be sorted in ascending alphabetical order. The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of artifact identifiers. The next n lines contain one identifier each. Each identifier is a non-empty string of length not more than 20 characters and consists of digits and lowercase English letters. Print the sorted list of artifact identifiers according to the described rules. Example input: ``` 6 abc123 xyz789 def456 x12y34 b23c45a cd456ef ``` Example output: ``` 123abc 456def 456efcd 123abc 456def 456efcd 789xyz ```","solution":"def sort_artifacts(identifiers): from collections import defaultdict # Create a dictionary to group identifiers by letters groups = defaultdict(list) for identifier in identifiers: chars = \'\'.join(sorted(set(c for c in identifier if c.isalpha()))) groups[chars].append(identifier) # Sort each group alphabetically for key in groups: groups[key].sort() # Create the sorted output list by keys sorted_keys = sorted(groups.keys()) result = [] for key in sorted_keys: result.extend(groups[key]) return result"},{"question":"Anna likes to organize her bookshelves in a very specific manner. She has a bookshelf with `n` books, and each book has a width of `w_i`. Anna wants to place all her books on a single shelf, but she has specific requirements: 1. The total width of books on the shelf must not exceed `W`. 2. To maintain the aesthetic of the shelf, she wants to maximize the number of books placed on the shelf. 3. If there are multiple ways of placing the maximum number of books, she prefers a placement with the minimum total width. Given the number of books, their respective widths, and the maximum width of the shelf, determine the maximum number of books that can be placed on the shelf and their total width. # Input - The first line contains two integers `n` and `W` (1 ≤ n ≤ 10^4, 1 ≤ W ≤ 10^9) — the number of books and the maximum width of the shelf. - The second line contains `n` integers `w_i` (1 ≤ w_i ≤ W) — the widths of the books. # Output - Output two integers: the maximum number of books Anna can place on the shelf, and the total width of those books. # Example Input ``` 5 10 3 1 4 2 5 ``` Output ``` 4 10 ``` Explanation Anna can place books with widths `[1, 2, 3, 4]` or `[1, 2, 4, 3]` on the shelf. Both ways, the total width is 10, and she places 4 books. Therefore, the maximum number and the minimal width required are 4 and 10 respectively.","solution":"def max_books_on_shelf(n, W, widths): Returns the maximum number of books that can be placed on the shelf and their total width. Parameters: n (int): number of books W (int): maximum width of the shelf widths (list of int): widths of the books Returns: tuple: (max number of books, total width of those books) widths.sort() total_width = 0 book_count = 0 for width in widths: if total_width + width <= W: total_width += width book_count += 1 else: break return book_count, total_width"},{"question":"You are given an n x m grid, where each cell is either empty (denoted by \'.\') or contains an obstacle (denoted by \'#\'). A robot is placed in the top-left corner of the grid (cell (1,1)) and its task is to reach the bottom-right corner (cell (n,m)). The robot can move in four directions: up (U), down (D), left (L), and right (R), but it cannot move into or over an obstacle. Given the grid representation, your task is to determine the minimum number of moves the robot must make to reach the destination. If it is not possible for the robot to reach the destination, return -1. The first line of input contains two integers, n and m (1 ≤ n, m ≤ 200), representing the number of rows and columns in the grid respectively. Each of the next n lines contains m characters, either \'.\' or \'#\', representing the grid. Output the minimum number of moves the robot must make to reach the bottom-right corner, or -1 if it is not possible. Example: Input: 3 4 .... ..#. .... Output: 5","solution":"from collections import deque def minimum_moves(grid, n, m): if grid[0][0] == \'#\' or grid[n - 1][m - 1] == \'#\': return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # Down, Right, Up, Left queue = deque([(0, 0, 0)]) # (row, col, distance) visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: r, c, dist = queue.popleft() # If reached bottom-right corner if r == n - 1 and c == m - 1: return dist # Explore four possible directions for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, dist + 1)) return -1"},{"question":"A group of computer science students are participating in a team-building activity where they form chains. Each chain is formed by arranging students in a line such that the length of the chain is maximized. A chain can be created by connecting students based on their skill levels in a specific manner. Each student has a given skill level, represented by an integer. A valid chain must follow these rules: 1. The skill level of each subsequent student in the chain must either be exactly one more or exactly one less than the skill level of the previous student. 2. The students in a chain need to appear in the input order. Your task is to write a program to find the length of the longest chain that can be formed according to the given rules. The first line contains one integer n (1 ≤ n ≤ 1000) which represents the number of students. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^5) which represent the skill levels of the students. Print the length of the longest chain that can be formed. For example: Input: 7 3 4 2 1 5 6 2 Output: 4 In this example, the longest chain is formed by the sequence [3, 4, 5, 6], which has a length of 4.","solution":"def longest_chain(n, skill_levels): Returns the length of the longest chain that can be formed according to the rules. :param n: Integer, number of students :param skill_levels: List of integers representing the skill levels of the students :return: Integer, length of the longest chain if n == 0: return 0 dp = [1] * n for i in range(1, n): for j in range(i): if abs(skill_levels[i] - skill_levels[j]) == 1: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Test the function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) skill_levels = list(map(int, data[1:])) print(longest_chain(n, skill_levels))"},{"question":"Alice loves playing with strings. She defines the \\"beauty\\" of a string as the number of distinct substrings it contains. Given a string s, Alice wants to know how \\"beautiful\\" it is according to her definition. Can you help her? The first line contains an integer t (1 le t le 10^5) — the number of test cases. Each of the next t lines contains one string s (1 le |s| le 10^5) — the string for which the beauty needs to be calculated. It is guaranteed that the total length of all strings does not exceed 10^6. For each test case, print a single integer — the beauty of the corresponding string. Example Input: ``` 2 ab aaa ``` Example Output: ``` 3 3 ``` Explanation: For the first test case, the distinct substrings are {\\"a\\", \\"b\\", \\"ab\\"}. For the second test case, the distinct substrings are {\\"a\\", \\"aa\\", \\"aaa\\"}. Each string\'s distinct substrings should be evaluated and counted to determine the \\"beauty\\" as defined by Alice.","solution":"class SuffixAutomaton: def __init__(self, s): self.s = s self.states = [{}] self.link = [-1] self.length = [0] self.last = 0 self.pad = [] for a in list(s): self.extend(a) def extend(self, c): current = len(self.states) self.length.append(self.length[self.last] + 1) self.states.append({}) p = self.last while p != -1 and c not in self.states[p]: self.states[p][c] = current p = self.link[p] if p == -1: self.link.append(0) else: q = self.states[p][c] if self.length[p] + 1 == self.length[q]: self.link.append(q) else: clone = len(self.states) self.length.append(self.length[p] + 1) self.states.append(self.states[q].copy()) self.link.append(self.link[q]) while p != -1 and self.states[p].get(c) == q: self.states[p][c] = clone p = self.link[p] self.link[q] = clone self.link[current] = clone self.last = current def calculate_distinct_substrings(self): sz = len(self.length) distinct_substrings = 0 for i in range(1, sz): distinct_substrings += self.length[i] - self.length[self.link[i]] return distinct_substrings def beauty_of_string(s): automaton = SuffixAutomaton(s) return automaton.calculate_distinct_substrings() def beauty_of_strings(test_cases): results = [] for s in test_cases: results.append(beauty_of_string(s)) return results def process_input(t, strings): return beauty_of_strings(strings) # Sample usage with example input: # t = 2 # strings = [\\"ab\\", \\"aaa\\"] # result = process_input(t, strings) # print(result) # Output: [3, 3]"},{"question":"A factory has a single-machine workshop and is processing a set of jobs. There are n jobs to be completed, and each job i has a processing time of t_i. The machine can handle only one job at a time. In an effort to reduce downtime and improve efficiency, the factory manager wants to minimize the total completion time of all jobs. The completion time of a job is defined as the time at which it finishes processing. Also, if a job begins at time t and has a processing time of t_i, it finishes at time t + t_i. Given the processing times of the jobs, determine the sequence in which the jobs should be processed to minimize the total completion time. # Input - The first line contains an integer n (1 le n le 1000) — the number of jobs. - The second line contains n integers t_1, t_2, dots, t_n (1 le t_i le 10^9), where t_i is the processing time of the i-th job. # Output - Print the minimum total completion time of all jobs. # Example Input ``` 4 3 1 4 2 ``` Output ``` 20 ``` # Note In the example, the optimal sequence of jobs is: 1-hour, 2-hour, 3-hour, and 4-hour jobs. The completion times are 1, 3, 6, and 10 respectively. The total completion time is 1 + 3 + 6 + 10 = 20.","solution":"def minimize_completion_time(n, processing_times): Given the number of jobs and their processing times, calculate the minimum total completion time by ordering jobs to minimize the sum of completion times. Parameters: n (int): Number of jobs processing_times (list of int): Processing times of the jobs Returns: int: Minimum total completion time of all jobs # Sort processing times in ascending order processing_times.sort() # Calculate total completion time total_completion_time = 0 current_time = 0 for time in processing_times: current_time += time total_completion_time += current_time return total_completion_time"},{"question":"A large cube with edge length n (in centimeters) is painted blue on all six faces. It is then sliced into smaller cubes, each with an edge length of 1 centimeter. Your task is to determine how many smaller cubes have exactly one face painted, how many have exactly two faces painted, and how many have exactly three faces painted. Input: The first line contains a single integer n (2 leq n leq 10^6). Output: Print three space-separated integers representing the number of smaller cubes with exactly one face painted, the number of smaller cubes with exactly two faces painted, and the number of smaller cubes with exactly three faces painted. Note: In the first example, if the edge length of the large cube is 4, then: - The number of smaller cubes with exactly one face painted is 24. - The number of smaller cubes with exactly two faces painted is 24. - The number of smaller cubes with exactly three faces painted is 8. Example: Input: 4 Output: 24 24 8","solution":"def painted_small_cubes(n): Returns the number of smaller cubes with exactly one face, two faces, and three faces painted from a larger cube of edge length n. if n < 2: return (0, 0, 0) # Not possible as per the constraint 2 <= n <= 10^6 one_face_painted = (n - 2) ** 2 * 6 two_faces_painted = (n - 2) * 12 three_faces_painted = 8 return one_face_painted, two_faces_painted, three_faces_painted # Sample usage print(painted_small_cubes(4)) # Expected output (24, 24, 8)"},{"question":"Vasya has recently learned about magic tricks. He wants to perform a trick that involves multiple versions of a sequence of cards. Each sequence has n cards labeled with integers from 1 to n. He can perform two types of operations: 1. Query the card at a specific position in the sequence. 2. Replace the card at a specific position with a new card. Initially, Vasya is given a sequence of n cards, and he performs m operations on this sequence. Write a program to simulate Vasya\'s operations on the sequence and output the results of the query operations. # Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 10^5) — the number of cards and the number of operations, respectively. The second line contains n space-separated integers (1 ≤ card_i ≤ 10^9) — the initial sequence of cards. The next m lines contain operations in the following format: - \\"1 x\\" (1 ≤ x ≤ n) - Query the card at position x. - \\"2 x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9) - Replace the card at position x with y. # Output For each query operation, print the value of the card at the given position. # Example Input ``` 5 5 1 2 3 4 5 1 3 2 3 10 1 3 1 1 2 5 20 ``` Output ``` 3 10 1 ``` # Explanation Initially, the sequence is [1, 2, 3, 4, 5]. - The first operation is a query at position 3, which outputs 3. - The second operation replaces the card at position 3 with 10, so the sequence becomes [1, 2, 10, 4, 5]. - The third operation queries the card at position 3, which now outputs 10. - The fourth operation queries the card at position 1, which outputs 1. - The fifth operation replaces the card at position 5 with 20, but this does not result in any output as it is not a query operation.","solution":"def perform_operations(n, m, cards, operations): results = [] for operation in operations: op = operation.split() if op[0] == \'1\': # query operation pos = int(op[1]) - 1 results.append(cards[pos]) elif op[0] == \'2\': # replace operation pos = int(op[1]) - 1 new_value = int(op[2]) cards[pos] = new_value return results"},{"question":"Teztrek Solutions has assigned you a task that involves arrays and basic computations. You are given an array of integers, `arr`, with `n` elements. Your job is to perform the following queries on the array: 1. Update Query: Given an index `i` and a value `x`, update the element at index `i` to `x`. 2. Sum Query: Given a range `[l, r]`, return the sum of the elements in the subarray from index `l` to index `r` (inclusive). You need to efficiently perform these operations while handling multiple queries. The first line contains two integers, `n` and `q`, representing the number of elements in the array and the number of queries, respectively. The second line contains `n` integers representing the elements of the array. Each of the following `q` lines contains a query in one of the following formats: - \\"1 i x\\" - An Update Query where the element at index `i` (0-based) should be updated to `x`. - \\"2 l r\\" - A Sum Query where you need to find the sum of elements from index `l` to index `r` (both inclusive). For each Sum Query, output the result on a new line. # Input Format ``` n q arr[0] arr[1] ... arr[n-1] query1 query2 ... queryq ``` # Constraints - 1 leq n, q leq 10^5 - 1 leq arr[i], x leq 10^9 - 0 leq i < n - 0 leq l leq r < n # Output Format For each Sum Query, output the sum of the elements in the specified range on a new line. # Sample Input ``` 5 3 1 2 3 4 5 2 1 3 1 2 10 2 1 3 ``` # Sample Output ``` 9 16 ``` # Explanation Initially, the array is `[1, 2, 3, 4, 5]`. - The first query is `2 1 3`, which asks for the sum of elements from index `1` to `3` (inclusive). The subarray is `[2, 3, 4]`, and the sum is `2 + 3 + 4 = 9`. - The second query is `1 2 10`, which updates the element at index `2` to `10`. The array becomes `[1, 2, 10, 4, 5]`. - The third query is `2 1 3`, which asks for the sum of elements from index `1` to `3` (inclusive). The subarray is `[2, 10, 4]`, and the sum is `2 + 10 + 4 = 16`.","solution":"class ArrayHandler: def __init__(self, arr): self.arr = arr def update(self, i, x): self.arr[i] = x def sum_range(self, l, r): return sum(self.arr[l:r+1]) # Function to process the queries def process_queries(n, q, arr, queries): arr_handler = ArrayHandler(arr) results = [] for query in queries: parts = query.split() type_of_query = int(parts[0]) if type_of_query == 1: i = int(parts[1]) x = int(parts[2]) arr_handler.update(i, x) elif type_of_query == 2: l = int(parts[1]) r = int(parts[2]) results.append(arr_handler.sum_range(l, r)) return results"},{"question":"Bob is interested in finding the longest increasing subsequence in a sequence of numbers. A subsequence is obtained by deleting some or no elements of the sequence such that the elements of the subsquence appear in the same order as they appear in the original sequence. The increasing subsequence is one in which each element is strictly greater than the one before it. Given a sequence of n integers, help Bob determine the length of the longest increasing subsequence. The first line contains a single integer n (1 leq n leq 1000) —the length of the sequence. The second line contains n space-separated integers a_i (1 leq a_i leq 1000) —the elements of the sequence. Output a single integer —the length of the longest increasing subsequence in the given sequence. For example: Input: 6 5 2 8 6 3 6 Output: 3","solution":"def longest_increasing_subsequence_length(sequence): Returns the length of the longest increasing subsequence in the given sequence of numbers. if not sequence: return 0 n = len(sequence) dp = [1] * n for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a string ( s ) consisting of lowercase English letters. You want to perform a series of operations to transform this string into a different string ( t ) which also consists of lowercase English letters. There are five allowed operations: 1. Swap any two distinct characters in the string ( s ). You can perform this operation any number of times. 2. Replace any character in the string ( s ) by any other lowercase English letter. You can perform this operation at most once on each character position. 3. Reverse the entire string ( s ). You can perform this operation any number of times. 4. Append any single character to the end or the beginning of the string ( s ). You can perform this operation at most once. 5. Delete any single character from the string ( s ). You can perform this operation at most once. Given the strings ( s ) and ( t ), determine if it is possible to transform ( s ) into ( t ) using the allowed operations. Input: - The first line contains a single integer ( q ) ((1 le q le 100)) — the number of test cases. - Each of the next ( q ) lines contain two strings ( s ) and ( t ) ((1 leq |s|, |t| leq 100 )). Output: - For each test case, print \\"YES\\" if it is possible to transform ( s ) into ( t ) using the allowed operations, and \\"NO\\" otherwise. Examples: Input: ``` 3 abc cba abcd abcde abcd efgh ``` Output: ``` YES YES NO ``` Explanation of the examples: 1. For the first case, you can reverse the string ( s ), so \\"abc\\" becomes \\"cba\\". 2. For the second case, you can append \'e\' to \\"abcd\\", so \\"abcd\\" becomes \\"abcde\\". 3. For the third case, it is not possible to transform \\"abcd\\" into \\"efgh\\" with the allowed operations.","solution":"def can_transform(s, t): Determines if it is possible to transform string s into string t using the allowed operations. if len(t) == len(s): if sorted(s) == sorted(t): return \\"YES\\" else: s_chars = list(s) for char in set(t): if t.count(char) > s.count(char): s_chars.append(char) if sorted(s_chars) == sorted(t): return \\"YES\\" return \\"NO\\" elif len(t) == len(s) + 1: if sorted(s + t[len(t)-1]) == sorted(t): return \\"YES\\" return \\"NO\\" elif len(t) + 1 == len(s): for i in range(len(s)): if sorted(s[:i] + s[i+1:]) == sorted(t): return \\"YES\\" return \\"NO\\" else: return \\"NO\\" def transform_strings(queries): results = [] for s, t in queries: results.append(can_transform(s, t)) return results"},{"question":"You are given an undirected graph with n vertices and m edges, where each edge has an associated weight. Your task is to find the weight of the minimum weight cycle in the graph. A cycle is defined as a path that starts and ends at the same vertex, visiting other vertices at most once. The weight of a cycle is the sum of the weights of its edges. The first line of input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10000) — the number of vertices and edges respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) — denoting an edge between vertices u and v with weight w. The graph can have multiple edges between the same pair of vertices and self-loops. Output a single integer — the weight of the minimum weight cycle. If there is no cycle in the graph, print -1. Examples: Input 1: 4 4 1 2 3 2 3 4 3 1 5 3 4 1 Output 1: 12 Input 2: 3 2 1 2 1 2 3 2 Output 2: -1","solution":"import sys from collections import defaultdict import heapq def find_min_cycle_weight(n, m, edges): Find the weight of the minimum weight cycle in an undirected graph. Parameters: n (int): Number of vertices m (int): Number of edges edges (list of tuple of int): List of edges represented as (u, v, w) Returns: int: Weight of the minimum weight cycle, or -1 if there is no cycle graph = defaultdict(list) for u, v, w in edges: if u != v: graph[u].append((v, w)) graph[v].append((u, w)) else: return w # Self-loop is the minimum cycle (weight = w) def dijkstra(start): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 visited = [False] * (n + 1) min_cycle = float(\'inf\') heap = [(0, start, -1)] while heap: d, u, parent = heapq.heappop(heap) if visited[u]: continue visited[u] = True for v, weight in graph[u]: if not visited[v]: if dist[v] > d + weight: dist[v] = d + weight heapq.heappush(heap, (dist[v], v, u)) elif v != parent: # if v is visited and not parent min_cycle = min(min_cycle, d + dist[v] + weight) return min_cycle min_cycle_weight = float(\'inf\') for i in range(1, n + 1): cycle_weight = dijkstra(i) if cycle_weight: min_cycle_weight = min(min_cycle_weight, cycle_weight) return min_cycle_weight if min_cycle_weight < float(\'inf\') else -1 # Example usage with sample input #n, m = 4, 4 #edges = [(1, 2, 3), (2, 3, 4), (3, 1, 5), (3, 4, 1)] #print(find_min_cycle_weight(n, m, edges)) # Output: 12"},{"question":"There is a kingdom with n cities connected by m two-way roads. Some of these roads have tolls associated with them, and others are toll-free. Given that the toll roads have a toll cost of exactly 1, determine the minimum toll cost from the first city (city 1) to the last city (city n). A path may consist of any number of roads, including zero, as long as it connects the two cities. If it is not possible to reach city n from city 1, output -1. Assume the cities are numerically labeled from 1 to n. The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of cities and the number of roads. Each of the next m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, 0 ≤ t ≤ 1), indicating a road between city u and city v, and t indicating whether the road has a toll (t = 1) or is toll-free (t = 0). Output the minimum toll cost from city 1 to city n, or -1 if there is no such path. # Example **Input** ``` 5 6 1 2 1 2 3 0 3 4 1 4 5 0 3 5 1 1 3 0 ``` **Output** ``` 1 ``` **Explanation**: In this scenario, the minimum toll cost from city 1 to city 5 is achieved by taking the path (1 -> 3 -> 5), where the only toll road is (3 -> 5), resulting in a total toll cost of 1.","solution":"import heapq def minimum_toll_cost(n, m, roads): Returns the minimum toll cost from city 1 to city n, or -1 if there is no such path. graph = [[] for _ in range(n + 1)] for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # Priority queue: (current toll cost, city) pq = [(0, 1)] toll_cost = [float(\'inf\')] * (n + 1) toll_cost[1] = 0 while pq: current_cost, u = heapq.heappop(pq) if u == n: return current_cost for v, t in graph[u]: new_cost = current_cost + t if new_cost < toll_cost[v]: toll_cost[v] = new_cost heapq.heappush(pq, (new_cost, v)) return -1 # Test input n = 5 m = 6 roads = [ (1, 2, 1), (2, 3, 0), (3, 4, 1), (4, 5, 0), (3, 5, 1), (1, 3, 0) ] # Expected output: 1 print(minimum_toll_cost(n, m, roads))"},{"question":"In a far away land, there is a string comprised of lowercase English characters. The inhabitants of this land have a unique way of grouping characters. Each lowercase English character is assigned to one of C groups, each with a distinct group ID from 1 to C. You are given two integers n and k (1 ≤ k ≤ n ≤ 100,000), and a string s of length n. You are also given an array g of length 26, where each g[i] denotes the group ID of the ith lowercase English character (0-indexed, \'a\' corresponds to i=0, \'b\' corresponds to i=1, and so on up to \'z\' which corresponds to i=25). Your task is to calculate the number of distinct substrings of length k that can be formed by replacing each character in the string s with its respective group ID. The first line contains three integers n, k, and C (1 ≤ C ≤ 26) — the length of the string s, the required length of substrings to be considered, and the number of groups respectively. The second line contains the string s of length n. The third line contains 26 space-separated integers representing the array g. In the output, print the number of distinct substrings of length k formed by replacing the characters in s with their respective group IDs. # Example **Input:** ``` 10 3 3 abracadabr 1 2 2 1 3 3 2 1 1 2 3 ``` **Output:** ``` 7 ``` **Explanation:** In this example, the string \\"abracadabr\\" with group replacements (1, 2, 2, 1, 3, 3, 2, 1, 1, 2, 3) would form group strings like \\"122\\", \\"221\\", \\"213\\", \\"133\\", and so forth. Counting the distinct group-based substrings of length 3 yields 7 distinct substrings.","solution":"def count_distinct_group_substrings(n, k, C, s, g): group_ids = [g[ord(char) - ord(\'a\')] for char in s] seen = set() for i in range(n - k + 1): substring_group = tuple(group_ids[i:i + k]) seen.add(substring_group) return len(seen) # Example n = 10 k = 3 C = 3 s = \\"abracadabr\\" g = [1, 2, 2, 1, 3, 3, 2, 1, 1, 2, 3, 1, 1, 2, 2, 1, 3, 3, 2, 1, 1, 2, 3, 1, 1, 2] print(count_distinct_group_substrings(n, k, C, s, g)) # 7"},{"question":"There are n magical stones placed along a straight path. Each stone has a magical power value a_i associated with it. A wizard wants to collect the maximum possible power while traversing from the first stone to the last stone. However, there\'s a catch: the wizard can only move to a stone that has a higher or equal power than the current stone. The wizard starts from the first stone and can only move to the next stone on the right (i.e., from stone i to stone j where i < j). Given the array of power values of the stones, determine the maximum possible power the wizard can collect from the first stone to the last stone following the movement rule. Write a program to solve this problem. The first line contains an integer n (2 ≤ n ≤ 3·10^5) — the number of stones. The second line contains n integers a1, a2, ..., an (1 ≤ a_i ≤ 10^9) — the power values of the stones in the given order. Output the maximum possible power the wizard can collect from the first to the last stone. Example input: ``` 5 1 2 4 1 3 ``` Example output: ``` 7 ``` Example explanation: The wizard can collect the stones with powers 1, 2, and 4, for a total power of 1 + 2 + 4 = 7. Another possible sequence would be 1, 2, and 3, for a total power of 1 + 2 + 3 = 6. The maximum possible power is 7.","solution":"def max_power_collected(n, powers): Returns the maximum possible power collected from the first stone to the last stone following the movement rule that the wizard can only move to stones with higher or equal power. :param n: int - the number of stones :param powers: List[int] - the power values of the stones :return: int - the maximum possible power collected # Initialize the maximum power we can collect max_power = powers[0] current_power = powers[0] for i in range(1, n): if powers[i] >= current_power: current_power = powers[i] max_power += current_power return max_power"},{"question":"You are given a matrix with `n` rows and `m` columns, filled with non-negative integers. From any cell in the matrix, you can move to an adjacent cell sharing a common side. You need to find the maximum sum of elements in any path starting from the top-left corner (1,1) and ending at the bottom-right corner (n,m). Please implement a function that returns the maximum sum possible along this path. The input and output for the function is specified as follows: Function Signature: ``` def matrix_path_max_sum(n: int, m: int, matrix: List[List[int]]) -> int: # your code here ``` The first line contains two integers `n` and `m` (1 le n, m le 1000) — the number of rows and columns of the matrix. The next `n` lines contain `m` integers each, describing the matrix elements (0 le matrix[i][j] le 10^4). Output a single integer — the maximum sum of elements along a path from (1,1) to (n,m). **Examples** Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 29 ``` Input: ``` 4 3 1 2 3 6 5 4 7 8 9 10 11 12 ``` Output: ``` 47 ```","solution":"from typing import List def matrix_path_max_sum(n: int, m: int, matrix: List[List[int]]) -> int: # Initialize a dp array with the same dimensions as the matrix, # where dp[i][j] represents the maximum sum to reach cell (i,j). dp = [[0] * m for _ in range(n)] # Start from the top-left corner dp[0][0] = matrix[0][0] # Fill the first row (only one possible path from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + matrix[0][j] # Fill the first column (only one possible path from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + matrix[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): # Maximum sum to reach cell (i,j) can come from the cell above (i-1,j) # or from the cell left (i,j-1) dp[i][j] = matrix[i][j] + max(dp[i - 1][j], dp[i][j - 1]) # The result is the value in the bottom-right corner return dp[n - 1][m - 1]"},{"question":"You are given an array of n integers a1, a2, ..., an and an integer k. You need to find two integers i and j (1 ≤ i < j ≤ n) such that ai + aj is divisible by k. If such a pair exists, print the indices (i, j) (1-based index). If there are multiple pairs, output any one of them. If no such pair exists, print \\"NO\\". The first line contains two integers n (2 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9), where n is the number of elements in the array and k is the integer by which the sum should be divisible. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Print the indices i and j if such a pair exists; otherwise, print \\"NO\\". If multiple solutions are possible, you may output any of them. Example: Input: 5 4 1 2 3 4 5 Output: 1 3 In this example, 1 + 3 = 4 which is divisible by 4, so (1, 3) is a valid pair.","solution":"def find_divisible_pair(n, k, array): Finds two indices (1-based) such that the sum of the numbers at these indices is divisible by k. :param n: int - Number of elements in the array :param k: int - Divisor :param array: List[int] - List of integers :return: Tuple (int, int) or str - Indices (1-based) if a pair is found, otherwise \\"NO\\" for i in range(n): for j in range(i + 1, n): if (array[i] + array[j]) % k == 0: return i + 1, j + 1 return \\"NO\\""},{"question":"Yanna is participating in a coding contest and she came across a new problem. The problem statement is as follows: Given an array of integers, Yanna needs to determine the minimum number of operations required to make all elements in the array equal. In one operation, she can choose any two elements in the array and increase both of them by 1. For example, if Yanna has an array [1, 2, 3], she can choose (1, 2) and increase both to [2, 3, 3], then choose (2, 3) and increase both to [3, 4, 4], finally choose (3, 4) and increase both to [4, 4, 5], making all elements equal after minimizing the operations needed. You will be given multiple test cases with different arrays. For each array, you need to find the minimum number of operations required. **Input:** - The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. - Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains n integers separated by spaces, representing the elements of the array (1 ≤ a_i ≤ 1000). **Output:** - For each test case, print a single integer, the minimum number of operations required to make all elements of the array equal. **Example:** ``` Input: 3 3 1 2 3 4 1 1 1 1 5 1 2 2 3 3 Output: 3 0 2 ``` Note: In the first test case, the array [1, 2, 3] can be transformed in 3 operations as explained in the example. In the second test case, the array [1, 1, 1, 1] is already consisting of equal elements, so no operations are needed. In the third test case, the array [1, 2, 2, 3, 3] can be transformed in 2 operations to make all elements equal.","solution":"def min_operations_to_equal_elements(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] max_elem = max(arr) operations = sum(max_elem - elem for elem in arr) results.append(operations) return results"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to modify the string such that it becomes a palindrome by removing at most one character. A palindrome is a string that reads the same backward as forward. For example, \\"abca\\" can be modified to \\"aba\\" by removing the character \'c\', while \\"racecar\\" is already a palindrome and does not require any modifications. If it\'s possible to form a palindrome by removing at most one character from the string, print \\"YES\\". Otherwise, print \\"NO\\". The first line of input contains an integer t (1 le t le 1000) — the number of test cases. The next t lines contain one string s each, where 1 le |s| le 10^5. The total length of all strings in the input does not exceed 10^6. For each test case, print \\"YES\\" if the string can be modified to become a palindrome by removing at most one character, otherwise print \\"NO\\". Example: Input: ``` 3 abca racecar abc ``` Output: ``` YES YES NO ```","solution":"def is_palindrome(s: str) -> bool: return s == s[::-1] def can_be_palindrome_by_removing_one_char(s: str) -> str: left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Check by removing one character either from left or right if is_palindrome(s[left:right]) or is_palindrome(s[left+1:right+1]): return \\"YES\\" else: return \\"NO\\" left += 1 right -= 1 return \\"YES\\" def process_test_cases(t: int, test_cases: list) -> list: results = [] for s in test_cases: results.append(can_be_palindrome_by_removing_one_char(s)) return results"},{"question":"A certain kingdom consists of n towns connected by m bidirectional roads. Each road has a travel time. The king wants to establish a center of the kingdom such that the maximum travel time from this center to any other town is minimized. The travel times between towns can be large, so it\'s important to find the optimal center efficiently. You are given the number of towns n (2 leq n leq 1000) and the number of roads m (1 leq m leq 5000). Each of the following m lines describes a road with three integers u, v, and t (1 le u, v le n, u neq v, 1 le t le 10^9) meaning there is a road between towns u and v with travel time t. Output the minimum possible maximum travel time from the optimal center town to any other town. The first input line contains two integers n and m. The next m lines contain three integers u, v, and t each, denoting a road between towns u and v with travel time t. Print the minimum possible maximum travel time from the optimal center town to any other town. # Example **Input:** ``` 4 4 1 2 4 1 3 3 2 3 1 3 4 2 ``` **Output:** ``` 3 ``` **Explanation:** The optimal center is town 3. The maximum travel times from town 3 are: - To town 1: 3 - To town 2: 1 - To town 4: 2 The maximum travel time from town 3 to any other town is 3. Hence the answer is 3.","solution":"import heapq def dijkstra(graph, start, n): distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def find_optimal_center(n, roads): graph = [[] for _ in range(n + 1)] for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) min_max_travel_time = float(\'inf\') for town in range(1, n + 1): distances = dijkstra(graph, town, n) max_travel_time = max(distances[1:]) min_max_travel_time = min(min_max_travel_time, max_travel_time) return min_max_travel_time"},{"question":"You are given an array of integers representing the heights of logs, arranged sequentially from left to right. You need to cut the logs such that the height of each log does not exceed a certain target height. If a log\'s height is greater than the target height, you can perform multiple cuts to reduce its height. Each cut operation reduces the height of a log at the cost of increasing the number of logs, which means the array size will increase accordingly. The objective is to minimize the total number of logs after all operations. Formally, you are given an array of integers `arr` with `n` elements representing the height of logs. You have to determine the minimum number of logs after making cuts so that no log has a height greater than `h`. # Input - The first line contains two integers `n` and `h` (1 ≤ n ≤ 100,000, 1 ≤ h ≤ 1,000) — the number of logs and the target height. - The second line contains `n` integers `arr[1], arr[2], ..., arr[n]` (1 ≤ arr[i] ≤ 10,000) — the heights of the logs. # Output - Output a single integer — the minimum number of logs after making the necessary cuts. # Example Input ``` 5 4 8 2 10 6 5 ``` Output ``` 10 ``` # Explanation To ensure no log exceeds the height of 4: - The log of height 8 can be cut into 2 logs of height 4 each. - The log of height 2 remains as it is. - The log of height 10 can be cut into 3 logs of height 4, 4, and 2 (or any other combination of segments). - The log of height 6 can be cut into 2 logs of height 4 and 2. - The log of height 5 can be cut into 2 logs of height 4 and 1. Hence, the resulting array of logs will be 10 logs in total.","solution":"def min_logs_after_cuts(n, h, arr): Determines the minimum number of logs after making necessary cuts such that no log exceeds the height h. Parameters: n (int): Number of logs initially. h (int): Maximum allowable height for each log. arr (list of int): Heights of the logs. Returns: int: Minimum number of logs after cuts. total_logs = 0 for height in arr: # Calculate the number of logs needed for each given log to fit within the height h total_logs += (height + h - 1) // h # This is equivalent to ceiling(height/h) return total_logs"},{"question":"Given an array of n integers, a[k] is called the \\"peak\\" if it is greater than or equal to its adjacent integers (for the first and last elements, only one adjacent is considered). Your task is to find the position of the first peak in the array. If there are multiple peaks, find the first occurrence. The first line of input will contain an integer n (3 ≤ n ≤ 10^5), the number of elements in the array. The second line will contain n space-separated integers representing the array elements (1 ≤ a[i] ≤ 10^6). Print the position (1-based index) of the first peak in the array. **Example:** Input: 5 1 3 2 3 5 Output: 2 Input: 7 3 1 3 2 1 2 3 Output: 1 Explanation: In the first example: - a[2] = 3 is a peak because it is greater than both a[1] = 1 and a[3] = 2. In the second example: - a[1] = 3 is a peak because it is greater than a[2] = 1.","solution":"def find_first_peak(arr): Finds the position of the first peak in the array. Parameters: arr (list): List of integers representing the array elements. Returns: int: 1-based index of the first peak. n = len(arr) # Check first element if arr[0] >= arr[1]: return 1 # Check middle elements for i in range(1, n - 1): if arr[i] >= arr[i - 1] and arr[i] >= arr[i + 1]: return i + 1 # Check last element if arr[n - 1] >= arr[n - 2]: return n return -1"},{"question":"In a faraway land, there exists a kingdom with a unique postal service. Every parcel addressed to a specific city is only delivered if it strictly follows a preferred pattern of delivery times. The delivery time is guided by the distances between cities, and the postal service only delivers parcels in alphabetical order of the cities\' names. Each city is represented by a unique lowercase English letter. The preferred pattern of delivery times is the sequence derived from the alphabetical order of cities, and the parcel is only delivered if the current city is alphabetically greater than the previous city in the sequence. For example, suppose we have a kingdom with cities named \'a\', \'b\', \'c\', and \'d\'. If a parcel is sent from \'b\' to \'c\', it can be delivered. But a parcel sent from \'c\' to \'b\' cannot be delivered because \'b\' comes before \'c\' in alphabetical order. Your task is to determine whether a parcel can be delivered for each query given the origin and destination cities. The first line of input contains an integer t (1 le t le 100), the number of queries. Each of the next t lines contains two lowercase English letters representing the origin and destination city of the parcel, respectively. For each query, output \\"YES\\" if the parcel can be delivered according to the preferred pattern of delivery times, otherwise output \\"NO\\". **Example:** **Input:** 4 a b c a b d d a **Output:** YES NO YES NO **Explanation:** 1. The parcel delivery from \'a\' to \'b\' is valid because \'b\' comes after \'a\'. 2. The parcel delivery from \'c\' to \'a\' is invalid because \'a\' comes before \'c\'. 3. The parcel delivery from \'b\' to \'d\' is valid because \'d\' comes after \'b\'. 4. The parcel delivery from \'d\' to \'a\' is invalid because \'a\' comes before \'d\'.","solution":"def can_deliver_parcel(queries): Determines if a parcel can be delivered based on the preferred pattern of delivery times (whether the destination city comes after the origin city alphabetically). Params: queries (list of tuple): A list of tuples where each tuple contains two lowercase English letters representing the origin and destination city of a parcel. Returns: list of str: A list of \\"YES\\" or \\"NO\\" for each query indicating whether the parcel can be delivered. results = [] for origin, destination in queries: if origin < destination: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a sequence of integers a_1, a_2, ldots, a_n. In this task, you need to find a subsequence of this sequence that has the maximum possible sum and satisfies the condition that the GCD (Greatest Common Divisor) of its elements is equal to d. Given a sequence of integers, a subsequence is obtained by deleting zero or more elements without changing the order of the remaining elements. The input begins with a single integer t, the number of test cases (1 le t le 100). Each test case starts with two integers n and d (1 le n le 10^5, 1 le d le 10^9)— the length of the sequence and the desired GCD. The next line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9)— the elements of the sequence. For each test case, print a single integer: the maximum sum of a subsequence with GCD equal to d. If no such subsequence exists, print -1. # Input ``` t n d a_1 a_2 a_3 ... a_n ... ``` # Output ``` Maximum sum of subsequence with GCD equal to d for each test case ``` # Example Input ``` 2 5 2 4 6 8 10 12 3 5 1 2 3 ``` Output ``` 40 -1 ``` # Explanation In the first test case, the subsequence [4, 6, 8, 10, 12] has the GCD 2 and its sum is 40. In the second test case, none of the elements divisible by 5, so the output is -1.","solution":"import math from functools import reduce def max_subsequence_with_gcd_d(arr, d): Returns the maximum sum of subsequence with GCD equal to d, or -1 if no such subsequence exists. # Filter elements that are multiples of d filtered_arr = [x for x in arr if x % d == 0] # If no elements are multiples of d, return -1 if not filtered_arr: return -1 # Calculate the GCD of the filtered array gcd_value = reduce(math.gcd, filtered_arr) # If the GCD of filtered elements is not equal to d, return -1 if gcd_value != d: return -1 # Return the sum of filtered elements return sum(filtered_arr) def process_test_cases(test_cases): results = [] for test_case in test_cases: n, d, arr = test_case results.append(max_subsequence_with_gcd_d(arr, d)) return results"},{"question":"You are given a string consisting of lowercase Latin letters and the number k. Your task is to find the length of the shortest substring that contains at least k distinct characters. Write a program to accomplish this. The first line contains an integer k (1 ≤ k ≤ 26) — the minimum number of distinct characters required. The second line contains a string s (1 ≤ |s| ≤ 1000) — the input string consisting of only lowercase Latin letters. Print the length of the shortest substring of s that contains at least k distinct characters. If there is no such substring print -1. For example: Given k = 3 and s = \\"abcabcabc\\", the output should be 3 because the substring \\"abc\\" contains exactly 3 distinct characters. Given k = 5 and s = \\"aabbcc\\", the output should be -1 because there is no substring with at least 5 distinct characters.","solution":"def shortest_substring_length_with_k_distinct_chars(k, s): from collections import defaultdict n = len(s) if k > 26 or k > n: return -1 char_count = defaultdict(int) start = 0 min_length = float(\'inf\') for end in range(n): char_count[s[end]] += 1 while len(char_count) >= k: current_length = end - start + 1 if current_length < min_length: min_length = current_length char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given an array of n integers. You have to perform a series of operations on this array. In each operation, you can select any two elements of the array and replace them with their greatest common divisor (GCD). The goal is to minimize the maximum element in the array after a certain number of operations. Determine the minimum possible value of the maximum element in the array after performing at most n-1 operations. The first line contains a single integer n (2 ≤ n ≤ 100,000) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000,000) — the elements of the array. Output a single integer — the minimum possible value of the maximum element after performing at most n-1 operations. In the first sample, you can perform the following operations: - Replace 10 and 15 with their GCD 5. Now the array is [5, 5, 20]. - Replace 5 and 20 with their GCD 5. Now the array is [5, 5]. Hence, the minimum possible maximum element is 5. In the second sample, when you replace 4 and 6 with their GCD 2, you get the array [2, 2]. Hence, the minimum possible maximum element is 2.","solution":"import math from functools import reduce def minimize_max_element(n, arr): Given an array of integers, this function returns the minimum possible value of the maximum element after performing at most n-1 operations where each operation replaces two elements by their GCD. # The GCD of all elements will be the minimum possible maximum element # after at most n-1 operations. return reduce(math.gcd, arr)"},{"question":"A group of friends decided to participate in a paintball competition. They play several rounds, and the outcome of each round is recorded. The skill level of each player remains constant throughout the competition, and a player with a higher skill level will always eliminate a player with a lower skill level. No two players have the same skill level. Given the results of the paintball rounds, your task is to determine the rank of each player based on their skill level. The results are given in the order the rounds were played, and each result specifies the winner and the loser of that round. The first line of input contains two integers, n (2 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 200,000) — the number of players and the number of paintball rounds, respectively. The next m lines each contain two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi), indicating that player ui eliminated player vi in the ith round. Output the ranks of all players from the highest to the lowest skill level after considering all the paintball rounds. If there is a cycle among players such that no unique ranking can be obtained, output \\"Impossible\\". # Sample Input ``` 5 6 1 2 3 4 2 3 5 1 4 5 3 5 ``` # Sample Output ``` Impossible ``` # Sample Input ``` 4 3 2 3 1 2 4 1 ``` # Sample Output ``` 4 1 2 3 ```","solution":"from collections import defaultdict, deque def rank_paintball_players(n, m, rounds): # Create the graph graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n+1)} for u, v in rounds: graph[u].append(v) in_degree[v] += 1 # Kahn\'s algorithm for Topological Sorting queue = deque([node for node in in_degree if in_degree[node] == 0]) sorted_order = [] while queue: node = queue.popleft() sorted_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(sorted_order) == n: return sorted_order else: return \\"Impossible\\" # Example usage: # n = 4 # m = 3 # rounds = [(2, 3), (1, 2), (4, 1)] # print(rank_paintball_players(n, m, rounds)) # Output: [4, 1, 2, 3]"},{"question":"You are given an array of n integers where each integer represents a certain amount of coins. Your task is to determine if you can split the array into two non-empty parts such that the sum of coins in both parts is the same. If it is possible to split the array this way, print \\"YES\\" and the index where the array should be split. If there are multiple solutions, print any of them. If it is not possible, print \\"NO\\". The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the values of the array. Example: Input: 6 3 1 1 2 2 1 Output: YES 3 Explanation: In the given example, one way to split the array is at index 3: The first part of the array is [3, 1, 1] with sum 5. The second part of the array is [2, 2, 1] with sum 5. Therefore, it is possible to split the array such that both parts have equal sum. Another example: Input: 5 1 2 3 4 5 Output: NO Explanation: There is no way to split the array into two non-empty parts with equal sums in this example.","solution":"def can_split_equal_sum(arr): Determine if array can be split into two parts with equal sum. If possible, return \\"YES\\" and the index where to split. Otherwise, return \\"NO\\". total_sum = sum(arr) # If total_sum is odd, we cannot split it into two equal parts if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 current_sum = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum == target_sum: return f\\"YESn{i + 1}\\" return \\"NO\\""},{"question":"You are given an array of integers. Your task is to find a subarray with the largest possible sum. Additionally, you need to determine how many different subarrays exist with this maximum sum. For instance, if the array is `[1, -2, 3, 5, -3, 2]`, the subarray with the largest sum is `[3, 5]` and its sum is `8`. If there are multiple subarrays that yield the same maximum sum, you need to count all of them. The first line of input contains an integer `n` (1 ≤ n ≤ 100,000) - the number of elements in the array. The second line of input contains `n` integers `a1, a2, ..., an` (-10^9 ≤ ai ≤ 10^9). Output two integers: the maximum sum of a subarray and the number of different subarrays that yield this sum. For example: Input: ``` 6 1 -2 3 5 -3 2 ``` Output: ``` 8 1 ``` In another example: Input: ``` 6 2 -1 2 3 -9 4 ``` Output: ``` 6 1 ``` In this case, the subarray `[2, -1, 2, 3]` has the largest sum which is `6`, and there is only one subarray that yields this sum.","solution":"def max_subarray_sum_and_count(nums): n = len(nums) # Using Kadane\'s algorithm for maximum subarray sum max_sum = -float(\'inf\') current_sum = 0 # Using a dictionary to store the frequency of subarray sums sum_count = {} current_start = 0 for i in range(n): if current_sum <= 0: current_start = i current_sum = nums[i] else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum sum_count[max_sum] = 1 elif current_sum == max_sum: sum_count[max_sum] += 1 return max_sum, sum_count[max_sum]"},{"question":"You are given an initially empty stack which can store integers. You need to process a sequence of operations of the following types: - \\"PUSH x\\" — Push the integer x onto the stack. - \\"POP\\" — Remove the element currently on top of the stack. - \\"MAX\\" — Output the maximum value currently in the stack. Process the given operations and output the result of each \\"MAX\\" operation. The first line contains a single integer q (1 le q le 2 cdot 10^5) — the number of operations. The next q lines contain one of three types of operations described above. For each \\"PUSH x\\" operation, x is an integer satisfying 1 le x le 10^9. It is guaranteed that each \\"POP\\" operation is valid (i.e., the stack will not be empty when executing \\"POP\\"), and there is at least one \\"MAX\\" operation to be processed. For each \\"MAX\\" operation, print a single integer — the maximum value in the stack at the time of the operation. If the stack is empty (which shouldn\'t happen due to the constraints), print -1.","solution":"class MaxStack: def __init__(self): self.stack = [] self.max_stack = [] def push(self, x): self.stack.append(x) if not self.max_stack or x >= self.max_stack[-1]: self.max_stack.append(x) def pop(self): if self.stack: if self.stack[-1] == self.max_stack[-1]: self.max_stack.pop() self.stack.pop() def max(self): if not self.max_stack: return -1 return self.max_stack[-1] def process_operations(operations): max_stack = MaxStack() results = [] for operation in operations: if operation.startswith(\\"PUSH\\"): _, x = operation.split() max_stack.push(int(x)) elif operation == \\"POP\\": max_stack.pop() elif operation == \\"MAX\\": results.append(max_stack.max()) return results"},{"question":"A band of pirates has recently buried a number of treasures on Treasure Island. To capture and count the treasures effectively, the Island Guard uses a grid map, where each cell either contains treasure or does not. Each cell in the grid is identified by its coordinates (x, y), where x represents the row and y represents the column. You are given a grid of size n x m (1 ≤ n, m ≤ 100), represented by an array of characters where each element is either \'.\' (indicating an empty cell) or \'T\' (indicating a treasure). The pirates have a superstition that they should never bury a treasure directly next to another one (horizontally, vertically, or diagonally). Therefore, your grid must follow the rule: No two \'T\' characters should be adjacent. Write a program to determine whether the provided grid map of Treasure Island is valid according to the pirates\' superstition. If the map is valid, print \\"Valid\\". If the map violates the superstition, print \\"Invalid\\". The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the grid. Each of the next n lines contains m characters — either \'.\' or \'T\'. **Examples** **Input 1:** ``` 4 4 ..T. .... .T.. .... ``` **Output 1:** ``` Valid ``` **Input 2:** ``` 3 3 .T. .T. ... ``` **Output 2:** ``` Invalid ``` Note: - In the first example, no two \'T\' characters are adjacent. - In the second example, the \'T\' characters at positions (2, 2) and (3, 2) are adjacent, hence it is invalid.","solution":"def is_valid_treasure_map(n, m, grid): Determines whether the provided grid map of Treasure Island is valid according to the pirates\' superstition. :param n: int, number of rows in the grid :param m: int, number of columns in the grid :param grid: List[List[str]], the grid representing Treasure Island :return: str, \\"Valid\\" if the map is valid according to the superstition, \\"Invalid\\" otherwise # Define the directions to check adjacent cells directions = [ (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1) ] for i in range(n): for j in range(m): if grid[i][j] == \'T\': for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == \'T\': return \\"Invalid\\" return \\"Valid\\" # Example usage: # n, m = 4, 4 # grid = [ # \\"..T.\\", # \\"....\\", # \\".T..\\", # \\"....\\" # ] # print(is_valid_treasure_map(n, m, grid)) # Output should be \\"Valid\\""},{"question":"Sam is training for a marathon and follows a very specific running plan. He has a predefined route consisting of `n` consecutive checkpoints. The distance between each pair of consecutive checkpoints is fixed, denoted by `d`. During his training, Sam records the total time taken to run from the start (first checkpoint) to each checkpoint, including the returning time. However, he accidentally lost some of his intermediate time recordings. Fortunately, he remembers the total round trip time from the first checkpoint back to itself. The round trip time for the route starting and ending at the first checkpoint can be visualized as running from checkpoint 1 to checkpoint n, and then back from checkpoint n to checkpoint 1. Your task is to restore the times for all intermediate checkpoints that Sam lost. If there is no valid sequence of running times, print \\"No\\". Otherwise, output \\"Yes\\" and provide the possible running times. Input: - The first line contains two integers, `n` (2 ≤ `n` ≤ 100,000) and `d` (1 ≤ `d` ≤ 10^9). - The second line contains `n` integers, denoting the total round trip times from the start to each checkpoint back to the start. It is guaranteed that the round trip time for the first checkpoint is `0`. Output: - If there is no valid sequence, print \\"No\\". - If there are multiple valid sequences, you can output any valid sequence. Example input: ``` 5 3 0 6 12 18 24 ``` Example output: ``` Yes 0 3 6 9 12 ``` In this example, the round trip times can be restored to the times taken to run to each checkpoint directly. For instance, the round trip time of 6 for the second checkpoint corresponds to 3 to reach it and 3 to return back, thus the time taken to that checkpoint directly is 3. Note: - The round trip time for the sequence starting at checkpoint 1 and ending at checkpoint n, and then returning back, should be realistic and possible. - The distance `d` remains constant between any consecutive checkpoints.","solution":"def restore_times(n, d, round_trip_times): Restores the times (if possible) for all intermediate checkpoints. Parameters: n (int): Number of checkpoints d (int): Distance between consecutive checkpoints round_trip_times (list of int): Round trip times from the start to each checkpoint back to the start Returns: tuple: A tuple containing a string (\\"Yes\\" or \\"No\\") and a list of possible running times if \\"Yes\\" single_way_times = [0] * n # Verify if round_trip_times for each checkpoint is consistent with d for i in range(1, n): if round_trip_times[i] % (2 * d) != 0: return (\\"No\\", []) single_way_times[i] = round_trip_times[i] // 2 return (\\"Yes\\", single_way_times)"},{"question":"Alice is organizing a coding competition and has an array containing the skill levels of the participants. She wants to form teams in such a way that each team consists of exactly two participants whose combined skill level is exactly divisible by a given integer k. Your task is to find out the number of such teams that can be formed from the given array. Each participant can only be part of one team. The first line contains two integers n (1 ≤ n ≤ 105) and k (1 ≤ k ≤ 100). The second line contains n space-separated integers, representing the skill levels of the participants (1 ≤ skill level ≤ 106). Print a single integer, the number of teams that can be formed under the given conditions. Example: Input: 5 3 1 3 5 7 9 Output: 2 Explanation: - In the first example, the teams (1, 2) and (2, 3) have skill levels (1 + 2) = 3 and (2 + 4) = 6 respectively, both of which are divisible by 3. Note: - The order of participants in the team does not matter. - If there are multiple valid pairings of participants that satisfy the conditions, they should all be counted.","solution":"def count_teams(n, k, skill_levels): # Helper to count combinations for a given modulo from collections import defaultdict # Dictionary to store remainders remainder_count = defaultdict(int) # Fill the remainder counts for skill in skill_levels: remainder = skill % k remainder_count[remainder] += 1 teams = 0 # Pairs of i and k-i where i = 0 to k/2 for i in range(k // 2 + 1): if i == 0 or i == k / 2: # Special case for remainder 0 or when k is even and i = k/2 teams += remainder_count[i] // 2 else: teams += min(remainder_count[i], remainder_count[k - i]) return teams"},{"question":"You have an array of integers representing the sizes of barrels, and you need to distribute these barrels to teams in such a way that each team ends up with an equal sum of barrel sizes, if possible. Formally, given an array of integers `arr` where each element represents the size of a barrel, determine if it is possible to partition these barrels into exactly `k` non-empty subsets where the sum of each subset is equal. Write a function `canPartitionKSubsets(arr: List[int], k: int) -> bool` that returns `True` if such a partitioning is possible, otherwise return `False`. # Constraints: * The length of `arr` is between 1 and 16. * Each element in `arr` is between 1 and 10000. * `k` is between 1 and the length of `arr`. # Example: ```python canPartitionKSubsets([4, 3, 2, 3, 5, 2, 1], 4) ``` Output: `True` # Explanation: One possible way to partition the array into 4 subsets with equal sum is: [5], [1, 4], [2, 3], [2, 3], and each subset has a sum of 5. Your function should attempt to solve the problem by exploring different ways to partition the array and determine if a valid partitioning exists.","solution":"from typing import List def canPartitionKSubsets(arr: List[int], k: int) -> bool: total_sum = sum(arr) if total_sum % k != 0: return False target_sum = total_sum // k used = [False] * len(arr) def backtrack(start_index, k, current_sum): if k == 0: return True if current_sum == target_sum: return backtrack(0, k - 1, 0) for i in range(start_index, len(arr)): if not used[i] and current_sum + arr[i] <= target_sum: used[i] = True if backtrack(i + 1, k, current_sum + arr[i]): return True used[i] = False return False return backtrack(0, k, 0)"},{"question":"You are given an array of non-negative integers `arr` of size `n`. You need to partition this array into two non-empty subsets such that the difference between the sum of the elements of the two subsets is minimized. Print the minimum possible difference. For example, if the array is `[1, 6, 11, 5]`, the two subsets can be `[1, 6, 5]` and `[11]`, with sums 12 and 11, respectively, and the difference is `1`. The first line of input contains an integer `n` (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains `n` non-negative integers separated by spaces, representing the array `arr` (0 ≤ arr[i] ≤ 1000). The output should be a single integer representing the minimum possible difference between the sums of the two subsets. # Example Input ``` 4 1 6 11 5 ``` Output ``` 1 ``` # Notes - This problem can be approached using dynamic programming, similar to the partition problem (also known as the Subset Sum problem). - The goal is to find a subset whose sum is as close as possible to half of the total sum of the array. - You should construct a DP table where `dp[j]` indicates whether there\'s a subset with sum `j` possible from the given elements.","solution":"def min_subset_difference(arr): Returns the minimum possible difference between the sums of two subsets. total_sum = sum(arr) n = len(arr) # Initialize a DP table where dp[i] indicates if subset sum i is reachable dp = [False] * (total_sum // 2 + 1) dp[0] = True for num in arr: for s in range(total_sum // 2, num - 1, -1): if dp[s - num]: dp[s] = True # Find the greatest s such that dp[s] is True closest_sum = 0 for s in range(total_sum // 2, -1, -1): if dp[s]: closest_sum = s break return total_sum - 2 * closest_sum # Example usage: # arr = [1, 6, 11, 5] # print(min_subset_difference(arr)) # Output: 1"},{"question":"In a land where communication through codes is essential, a secret society has developed a unique way of encrypting their numeric messages. The encryption process involves taking a number and transforming it by repeatedly replacing each digit by the sum of the digits of the original number until a single digit is obtained. For example, given the number 9875: - Sum of digits: 9 + 8 + 7 + 5 = 29 - Sum of digits of 29: 2 + 9 = 11 - Sum of digits of 11: 1 + 1 = 2 Thus, the resulting single digit from the number 9875 is 2. The society wants you to help them verify if their encrypted messages are correct. Your task is to write a function that takes a number as input and returns the single digit result of the described transformation process. The input will be a list of integers, and you need to output the corresponding single digit results for each integer in the list. Input: - An integer `n` (1 ≤ n ≤ 10^6), the number of integers in the list. - The next `n` lines each contain one integer, representing the numbers to be transformed. Output: - For each integer in the input list, output the single digit result of the transformation on a new line. Example: Input: 3 123 9875 67 Output: 6 2 4 Explanation: For 123: 1 + 2 + 3 = 6 (single digit) For 9875: 9 + 8 + 7 + 5 = 29; 2 + 9 = 11; 1 + 1 = 2 (single digit) For 67: 6 + 7 = 13; 1 + 3 = 4 (single digit) Note: This transformation is known as finding the digital root of a number.","solution":"def digital_root(num): Returns the single digit result of repeatedly summing the digits of num until a single digit is obtained. while num >= 10: num = sum(int(digit) for digit in str(num)) return num def process_numbers(numbers): Takes a list of numbers and returns a list with the digital roots of each number. return [digital_root(num) for num in numbers]"},{"question":"A farmer is organizing a competition among cows on his farm. The competition lasts for exactly d days and involves m cows. Each cow has a unique positive integer identifying it and a unique number of chocolates it can eat each day. The cows compete to eat as many chocolates as possible, but they can only eat a fixed number of chocolates each day. Each day, each cow eats a certain number of chocolates which is consistent for the duration of the competition. At the end of the competition, the cow that has eaten the maximum number of chocolates wins. If two cows eat the same number of chocolates, they tie. Given the number of days d, and a list of m tuples where each tuple contains the identifier of the cow and the number of chocolates it can eat in one day, determine which cow or cows will win the competition. The first line of the input contains two space-separated integers m and d — the number of cows and the number of days of the competition, respectively. The next m lines each contain two space-separated integers: the identifier of a cow and the number of chocolates it can eat in one day. Output the identifiers of the cow or cows that will win the competition. If multiple cows tie for the most chocolates eaten, print their identifiers in ascending order. # Input Format: ``` m d identifier1 chocolates_per_day1 identifier2 chocolates_per_day2 ... identifier m chocolates_per_day m ``` # Output Format: Output the identifiers of the cow or cows that will win the competition, in ascending order. # Example: Input: ``` 3 10 1 5 2 8 3 5 ``` Output: ``` 2 ``` Explanation: In this example, Cow 2 can eat 8 chocolates per day for 10 days, totaling 80 chocolates. Cows 1 and 3 eat 5 chocolates per day for 10 days, totaling 50 chocolates each. Therefore, Cow 2 eats the most chocolates and wins the competition.","solution":"def find_winning_cows(m, d, cow_data): Determines which cow or cows will win the competition by eating the most chocolates over d days. Parameters: m (int): Number of cows. d (int): Number of days. cow_data (list of tuples): Each tuple contains (identifier, chocolates_per_day) for each cow. Returns: list of int: List of identifiers of cows that tie for the most chocolates, sorted in ascending order. max_chocolates_eaten = 0 winners = [] for identifier, chocolates_per_day in cow_data: total_chocolates = chocolates_per_day * d if total_chocolates > max_chocolates_eaten: max_chocolates_eaten = total_chocolates winners = [identifier] elif total_chocolates == max_chocolates_eaten: winners.append(identifier) return sorted(winners)"},{"question":"You are given a grid of size `m x n`. Each cell in the grid contains gold coins. You are a miner starting at the top-left corner of the grid (cell (0,0)) and your goal is to collect the maximum number of gold coins possible while moving to the bottom-right corner (cell (m-1, n-1)). You can only move right or down from any cell. Design a function that determines the maximum number of gold coins you can collect on your way to the bottom-right corner. **Input:** - The first line of the input contains two integers, `m` and `n` (1 ≤ m, n ≤ 1000) — the number of rows and columns in the grid. - The next `m` lines contain `n` integers each, where the `j-th` integer in the `i-th` line (0 ≤ coins_ij ≤ 1000) represents the number of gold coins in the cell `(i, j)`. **Output:** - Output a single integer, the maximum number of gold coins you can collect. **Example:** ``` Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 12 ``` **Explanation:** The path to collect the maximum gold coins is (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2), and the number of gold coins collected along this path is 1 + 3 + 5 + 2 + 1 = 12.","solution":"def max_gold_coins(m, n, grid): Returns the maximum number of gold coins that can be collected on the way from the top-left corner to the bottom-right corner of the grid by moving only right or down. # Create a dp array to store the max coins collected until each cell dp = [[0] * n for _ in range(m)] # Initialize the starting cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from the top) for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner will have the max coins collectible return dp[m - 1][n - 1]"},{"question":"The citizens of Blueland have developed a unique numerical system based on letters from the alphabet. Each letter in the alphabet corresponds to a unique digit from 0 to 9. You are given a string t consisting of lowercase English letters, representing a number in this unusual system. You are also given several substitution rules, each defining how a particular letter can be replaced by another letter. Your task is to find the maximum numeric value that can be obtained by performing a series of letter substitutions according to the given rules. The first line contains a single string t, whose length is between 1 and 1000, representing the initial number in the letter-based numerical system. The second line contains a single integer q, representing the number of substitution rules (1 ≤ q ≤ 1000). Each of the following q lines contains a rule in the format \\"a b\\", indicating that the letter \'a\' can be replaced by the letter \'b\'. Print the maximum numeric value of the string t after utilizing the substitution rules. If multiple substitutions can lead to the same maximum value, any of them is acceptable. For example, if t is \\"abc\\" and the substitution rules are \\"a d\\", \\"b e\\", \\"c f\\", and assuming the alphabetical order \'a\' < \'b\' < \'c\' < ... < \'f\', you will replace letters to maximize the resultant value.","solution":"def max_numeric_value(t, rules): from collections import defaultdict # Create a dict to store the most valuable replacement for each character replacement_map = defaultdict(str) for rule in rules: a, b = rule.split() if replacement_map[a] == \'\' or replacement_map[a] < b: replacement_map[a] = b # Replace each character in t by the most valuable character according to the rules result = [] for char in t: while char in replacement_map: # Keep replacing if there are multiple layers of substitution char = replacement_map[char] result.append(char) return \'\'.join(result) # Utilization function for handling input format and calling the main function def utilize_substitution(t, q, rules): return max_numeric_value(t, rules)"},{"question":"You are given a square grid of size n x n. Each cell in the grid has either a \'.\', \'*\', or \'o\'. A \'.\' represents an empty cell, a \'*\' represents an obstacle, and an \'o\' represents a target cell. You start at the top-left corner of the grid (0,0) and you want to reach the bottom-right corner of the grid (n-1, n-1). You can move to an adjacent cell if and only if it is not an obstacle. Moves can be made left, right, up, or down by exactly one cell. Determine the shortest path from the start to the target (bottom-right corner). If there is no path, return -1. Input The first line contains a single integer n (2 ≤ n ≤ 200) — the size of the grid. The next n lines contain n characters each, describing the grid. Output Output a single integer — the length of the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1), or -1 if there is no such path. Example Input: 3 ... .*. ..o Output: 4 Explanation: In the grid, the only possible path is to go from (0,0) to (0,1), to (0,2), to (1,2), and finally to (2,2). The length of this path is 4.","solution":"from collections import deque def shortest_path(grid): n = len(grid) moves = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False]*n for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, n-1): return dist for dx, dy in moves: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] != \'*\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"In the bustling kingdom of Alserra, there are a number of interconnected cities, represented by a graph with cities as nodes and bidirectional roads as edges. The kingdom\'s roads are such that every city is connected to at least one other city, and it\'s possible to travel between any two cities, possibly passing through other cities. In an effort to expand, the kingdom\'s engineers have devised a plan to add new cities and connect them to the existing network. Each new city will be connected by exactly one new road to one of the existing cities. The ruler of Alserra, Queen Eleanor, has asked for your help in determining the impact of these additions. Specifically, she wants to know, after every new city is added, what is the size of the largest connected component of cities in the updated network. # Input Format - The first line contains two integers, N and Q (1 le N le 10^5, 1 le Q le 10^5) — the number of existing cities and the number of new cities to be added, respectively. - The next N-1 lines each contain two integers u and v (1 le u, v le N) — denoting that there is a bidirectional road connecting city u and city v. - The next Q lines contain one integer c (1 le c le N + Q) — the city to which the new city will be connected (for simplicity, assume that cities are added in order, incrementing from N + 1 to N + Q). # Output Format Print Q lines. The i-th line should contain one integer — the size of the largest connected component after the i-th new city has been added to the network. # Example Input ``` 5 3 1 2 1 3 3 4 3 5 3 4 5 ``` Output ``` 6 7 8 ``` # Explanation Initially, the network forms a connected component of size 5 (`1-2`, `1-3`, `3-4`, `3-5`). After adding the new city 6 connected to city 3: - The network now has a connected component of size 6: (`1-2`, `1-3-6`, `3-4`, `3-5`) After adding the new city 7 connected to city 4: - The network now has a connected component of size 7: (`1-2`, `1-3-6`, `3-4-7`, `3-5`) After adding the new city 8 connected to city 5: - The network now has a connected component of size 8: (`1-2`, `1-3-6`, `3-4-7`, `3-5-8`) Thus, each query correctly reflects the size of the largest connected component after each addition.","solution":"def largest_connected_components(N, Q, edges, new_connections): # Using Union-Find data structure to track components parent = list(range(N + Q + 1)) size = [1] * (N + Q + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if size[rootX] >= size[rootY]: parent[rootY] = rootX size[rootX] += size[rootY] else: parent[rootX] = rootY size[rootY] += size[rootX] # Initialize the initial connections for u, v in edges: union(u, v) result = [] largest_component_size = max(size) # Process each new connection for i in range(Q): new_city = N + 1 + i connect_to = new_connections[i] union(new_city, connect_to) root = find(new_city) largest_component_size = max(largest_component_size, size[root]) result.append(largest_component_size) return result"},{"question":"A city\'s road network can be represented as a graph consisting of n intersections and m bidirectional roads. Each road connects two intersections and has a certain length associated with it. The government has decided to build new roads. However, due to cost constraints, they want to minimize the total length of the roads used while ensuring that it is still possible to travel between any pair of intersections using the existing roads and the newly built roads. You are tasked with finding the minimum total length of roads that need to be added to achieve this goal. The first line contains two integers, n and m (1 le n le 1000, 0 le m le n(n-1)/2) — the number of intersections and the number of existing roads, respectively. The next m lines each contain three integers u, v, w (1 le u, v le n, 1 le w le 10^5) indicating that there is an existing road between intersections u and v with length w. Output a single integer denoting the minimum total length of the added roads to ensure all intersections are connected. If all intersections are already connected, output 0. For instance, in the first example: In the second example, the minimum length of the roads to be added is: In the third example, no new roads need to be built since all intersections are already connected. Output 0.","solution":"def find(parent, i): if parent[i] == i: return i parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def min_additional_roads_to_connect(n, m, edges): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) edges.sort(key=lambda x: x[2]) result = 0 connected_components = n for u, v, w in edges: u -= 1 v -= 1 x = find(parent, u) y = find(parent, v) if x != y: result += w union(parent, rank, x, y) connected_components -= 1 if connected_components == 1: return 0 mst_weight = 0 for i in range(n): parent[i] = i rank[i] = 0 for u, v, w in edges: u -= 1 v -= 1 x = find(parent, u) y = find(parent, v) if x != y: mst_weight += w connected_components -=1 if connected_components == 1: break union(parent, rank, x, y) return result"},{"question":"Given an array of integers, is it possible to partition the array into two subsets such that the sum of the elements in both subsets is equal? If so, return one such partition. If there are multiple correct answers, any valid partition will be accepted. If it is not possible, return an empty list. The input consists of a single line containing an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The next line contains n space-separated integers representing the array elements. Each element of the array is a non-negative integer not exceeding 1000. Output two lines. - In the first line, if it\'s possible to partition the array, print \\"Yes\\", otherwise print \\"No\\". - If the answer is \\"Yes\\", in the second line, print two space-separated lists of integers representing a valid partition. Input: ``` 4 1 5 11 5 ``` Output: ``` Yes [1, 5, 5] [11] ``` Explanation: The given array can be partitioned as [1, 5, 5] and [11], both having the sum 11.","solution":"def can_partition(nums): Returns whether it\'s possible to partition the array into two subsets with equal sum. If possible, also returns one such partition. total_sum = sum(nums) n = len(nums) # Check if total sum is odd, if so, it\'s impossible to partition into two equal subsets if total_sum % 2 != 0: return \\"No\\", [] target = total_sum // 2 # DP array to store if we can form a subset with sum j using first i numbers dp = [[False] * (target + 1) for _ in range(n + 1)] dp[0][0] = True # We can always form the subset with sum 0 (empty subset) # Fill the dp table for i in range(1, n + 1): for j in range(target + 1): dp[i][j] = dp[i - 1][j] or (j >= nums[i - 1] and dp[i - 1][j - nums[i - 1]]) # If we can\'t form the target sum with all numbers, return No if not dp[n][target]: return \\"No\\", [] # If we can, reconstruct the subsets subset1, subset2 = [], [] i, j = n, target while i > 0 and j >= 0: if not dp[i - 1][j]: subset1.append(nums[i - 1]) j -= nums[i - 1] else: subset2.append(nums[i - 1]) i -= 1 return \\"Yes\\", (subset1, subset2) # Usage example: # Output should be \\"Yes\\", [1, 5, 5], [11] nums = [1, 5, 11, 5] result = can_partition(nums) print(result[0]) if result[0] == \\"Yes\\": print(result[1][0], result[1][1])"},{"question":"Floating Islands is an interactive problem. There are n islands floating in the ocean, aligned linearly in a straight line. Each island has a unique height associated with it. The only way to move between the islands is by jumping from one to another. For each island i with height h_i, the cost of jumping to an adjacent island j with height h_j is calculated as the absolute difference of their heights, |h_i - h_j|. Your task is to determine the height of each island. You can do this by asking the following query: \\"What is the height of the island i?\\" to which a response will be the height of that particular island. You can ask a maximum of 2n queries. After gathering necessary information, you need to determine the minimum cost required to travel from the first island to the last one. The travel cost is the sum of the absolute differences in heights between each pair of adjacent islands along the path. # Input Format: - The first line contains an integer n (3 leq n leq 1000) — the number of islands. - You start the interaction by reading the integer n. # Query Format: - To ask a query, print a single integer i (1 ≤ i ≤ n) to get the height of the i-th island. # Output Format: - When you find the height of each island and calculate the minimum travel cost, print the integer -1 followed by a single integer c, where c is the minimum travel cost. # Example Interaction Input: ``` 4 ``` Your queries: ``` 1 3 2 4 -1 10 ``` Hidden system output: ``` 5 7 3 8 ``` Explanation: You queried the height of islands 1, 3, 2, and 4, and figured out the heights as 5, 7, 3, and 8 respectively. The minimum cost path from the first island to the last one is: 5 -> 3 -> 7 -> 8, with travel costs being |5-3| + |3-7| + |7-8| = 2 + 4 + 1 = 7. Note: The query input and output should be printed and read respectively according to the described interaction format.","solution":"def floating_islands(n, heights): This function takes in the number of islands and their respective heights, and returns the minimum cost required to travel from the first island to the last one. Args: n (int): number of islands heights (list): list of heights of the islands Returns: int: minimum travel cost # Calculate the minimum cost by summing up the absolute differences # between adjacent islands. min_cost = 0 for i in range(1, n): min_cost += abs(heights[i] - heights[i-1]) return min_cost"},{"question":"In a galaxy far, far away, there exists a game planet where the most popular game is \\"Tower Puzzle\\". The game consists of a series of towers of different heights, and the player can perform specific operations to make the game more interesting. The towers are represented by an array of integers, where each integer indicates the height of the respective tower. The player can perform the following operations as many times as they want: 1. Select two different towers and increase the height of one of the towers by 1 and decrease the height of the other by 1. However, the player has a goal: they want to achieve a configuration where the maximum height difference between any two towers is minimized. You are given the heights of the towers and need to calculate the minimum possible difference between the heights of the tallest and the shortest towers that can be achieved by performing the allowed operations any number of times. The first line of input contains a single integer n (2 ≤ n ≤ 10^5) — the number of towers. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the initial heights of the towers. Print a single integer — the minimum possible difference between the heights of the tallest and the shortest towers that can be achieved. **Examples** Input: 4 3 1 4 1 Output: 1 Input: 3 5 10 15 Output: 0 **Explanation:** In the first example, we can perform the operations to make the towers heights [2, 2, 3, 2], which results in a maximum difference of 1. In the second example, we can make all towers have height 10 by decreasing 15 to 10 and increasing 5 to 10, which results in a maximum difference of 0.","solution":"def minimize_height_difference(n, heights): Minimize the height difference between the tallest and shortest towers. :param n: int, number of towers :param heights: list of int, the initial heights of the towers :return: int, the minimum possible difference between the heights of the tallest and shortest towers total_height = sum(heights) min_height = min(heights) max_height = max(heights) avg_height = total_height // n if max_height - min_height <= 1: return max_height - min_height if total_height % n == 0: return 0 return 1"},{"question":"Sebastian loves sequences, especially ones with interesting properties. He is currently fascinated by sequences where the sum of any two adjacent elements is a prime number. Given an integer n (2 le n le 10^5), construct a sequence of length n such that the sum of any two adjacent elements is a prime number, or determine that no such sequence exists. A sequence is defined as an array of integers a_1, a_2, ldots, a_n. # Input - The first line contains a single integer t (1 le t le 50) — the number of test cases. - The next t lines each contain a single integer n. # Output For each test case, print: - The word \\"YES\\" on a single line if such a sequence exists. - Print \\"NO\\" on a single line otherwise. If the answer is \\"YES\\", in the next line print n space-separated integers a_1, a_2, ldots, a_n that form the sequence. If there are multiple correct answers, print any of them. # Example Input ``` 3 2 3 4 ``` Output ``` YES 1 2 YES 1 2 1 YES 3 2 3 2 ```","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_pairs_prefix_sequence(n): if n % 2 == 0: seq = [] start = 3 if n % 4 == 0 else 2 for i in range(n): seq.append(start) start = 3 if start == 2 else 2 return seq else: return [3] * n def solve(t, cases): results = [] for n in cases: if n == 1: results.append(\\"NO\\") else: results.append(\\"YES\\") results.append(prime_pairs_prefix_sequence(n)) return results # Example usage and conversion function: def output_results(results): for result in results: if result == \\"YES\\" or result == \\"NO\\": print(result) else: print(\\" \\".join(map(str, result)))"},{"question":"Danny loves to play with magic squares. A magic square is a grid of numbers where the sum of the numbers in each row, each column, and both main diagonals are the same. Recently, Danny discovered a new type of grid, which he called a \\"semi-magic square.\\" In a semi-magic square, the sum of the numbers in each row and each column must be the same, but the sums of the diagonals are ignored. Danny created some semi-magic squares with a size of n times n. Unfortunately, he made a mistake in one cell of each grid and wants to correct it. Help Danny by finding the incorrect number and replacing it with the correct value so that the grid becomes a valid semi-magic square. The first line of the input contains an integer t (1 le t le 1000) — the number of test cases. Each test case starts with an integer n (3 le n le 300) — the size of the grid. The next n lines contain n integers each, representing Danny\'s semi-magic square. For each test case, print the corrected semi-magic square. # Example **Input:** ``` 2 3 8 1 6 3 5 7 4 9 2 4 16 3 2 13 5 10 11 8 9 6 7 12 4 15 14 1 ``` **Output:** ``` 8 1 6 3 5 7 4 9 2 16 3 2 13 5 10 11 8 9 6 7 12 4 15 14 1 ``` (Note: The grids provided in the input are already correct for illustrative purposes. Your job is to handle cases where there is exactly one incorrect value in the grid preventing it from being a valid semi-magic square.)","solution":"def correct_semi_magic_square(n, grid): # Calculate the correct row and column sum correct_sum = sum(grid[0]) # Find the incorrect row and column row_sum = [sum(row) for row in grid] col_sum = [sum(grid[i][j] for i in range(n)) for j in range(n)] # Detect the incorrect row and column index incorrect_row = next(i for i in range(n) if row_sum[i] != correct_sum) incorrect_col = next(j for j in range(n) if col_sum[j] != correct_sum) # Calculate the correct value to replace the wrong cell correct_value = (correct_sum - row_sum[incorrect_row]) + grid[incorrect_row][incorrect_col] # Replace the incorrect value with the correct one grid[incorrect_row][incorrect_col] = correct_value return grid def semi_magic_square_correction(t, cases): result = [] for i in range(t): n = cases[i][0] grid = cases[i][1] corrected_grid = correct_semi_magic_square(n, grid) result.extend(corrected_grid) return result"},{"question":"In a city, blocks are laid out in an n times n grid. Each block has a certain tax rate which is represented as an integer. John owns a company and he wants to buy a rectangular sub-grid of the city blocks such that the total tax rate of this sub-grid is minimized. Given the tax rates for each block in the city, find the minimum tax rate for any rectangular sub-grid of the city. The first line contains an integer n (1 leq n leq 700), which represents the size of the city grid. Each of the next n lines contain n integers, where the j-th integer in the i-th line represents the tax rate of the block at row i and column j (1 leq text{tax rate} leq 10^9). Output one integer that denotes the minimum tax rate of any rectangular sub-grid of the city. # Example **Input** ``` 3 1 2 3 4 5 6 7 8 9 ``` **Output** ``` 1 ``` *In this example, the smallest tax rate of any rectangular sub-grid is a single block with a tax rate of 1.* # Notes - The rectangular sub-grid can be of any size, including 1x1. - Consider optimization techniques to handle the potentially large size of the grid.","solution":"def minimum_tax_rate(n, grid): Returns the minimum tax rate of any rectangular sub-grid. Parameters: n (int): Size of the city grid. grid (List[List[int]]): A 2D list containing the tax rates of each block. Returns: int: The minimum tax rate of any rectangular sub-grid of the city. min_tax = float(\'inf\') for i in range(n): for j in range(n): if grid[i][j] < min_tax: min_tax = grid[i][j] return min_tax"},{"question":"You have a circular array of integers of size n. The elements of the array are indexed from 0 to n-1 in a clockwise direction. You want to split the array into contiguous non-empty subarrays and sum these subarrays such that the total of those sums is maximized. Given an array of integers, find the maximal total sum of subarray sums you can obtain by splitting the array into some number of non-empty contiguous subarrays. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of the array. The output should be a single integer which is the maximal total sum you can attain by splitting the array. Example 1: Input: 5 1 -2 3 -2 5 Output: 9 Explanation: You can split the array into the subarrays [1], [-2, 3, -2], and [5]. Their sums are 1, -1, and 5, respectively. The total sum is 1 + -1 + 5 + 3, which is 9. Example 2: Input: 4 4 -1 -2 4 Output: 7 Explanation: You can split the array into the subarrays [4], [-1, -2, 4]. Their sums are 4, -3, and 4 respectively. The total sum is 4 + -3 + 4 + 2, which is 7.","solution":"def max_subarray_sum(n, arr): Returns the maximum total sum of subarray sums obtained by splitting the array into some number of non-empty contiguous subarrays. # Initialize the variables max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum"},{"question":"You have a grid of size m × n representing a map where \'1\'s represent land and \'0\'s represent water. A cell is defined to be connected to another cell if they share edges (no diagonals). An island on this grid is a group of connected \'1\'s (land cells) surrounded by \'0\'s (water). A single connected group of \'1\'s forms one island irrespective of its size or shape. Given an m × n grid map, write a function to return the number of islands. The input grid is guaranteed to be rectangular and non-empty. The first line contains two integers m and n (1 ≤ m, n ≤ 300) — the number of rows and columns in the grid, respectively. The following m lines each contain n characters (\'0\' or \'1\') — the representation of the grid map. Output the number of islands. # Example Input: 4 5 [ text{\\"11110\\"} text{\\"11010\\"} text{\\"11000\\"} text{\\"00000\\"} ] Output: 1 Explanation: The grid has one island. Input: 4 5 [ text{\\"11000\\"} text{\\"11000\\"} text{\\"00100\\"} text{\\"00011\\"} ] Output: 3 Explanation: The grid has three islands. In the first example, the best strategy is to treat all contiguous \'1\'s connected horizontally and vertically as one island. In the second example, similarly, you count the separate contiguous groups of \'1\'s. ```python def numIslands(grid): if not grid: return 0 m, n = len(grid), len(grid[0]) visited = [[False] * n for _ in range(m)] def dfs(i, j): stack = [(i, j)] while stack: x, y = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == \'1\' and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) island_count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'1\' and not visited[i][j]: island_count += 1 visited[i][j] = True dfs(i, j) return island_count # reading input m, n = map(int, input().split()) grid = [input().strip() for _ in range(m)] # calling the function and printing the result print(numIslands(grid)) ```","solution":"def numIslands(grid): if not grid: return 0 m, n = len(grid), len(grid[0]) visited = [[False] * n for _ in range(m)] def dfs(i, j): stack = [(i, j)] while stack: x, y = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == \'1\' and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) island_count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'1\' and not visited[i][j]: island_count += 1 visited[i][j] = True dfs(i, j) return island_count # Function to convert input data to grid and call numIslands def find_num_of_islands_from_input(m, n, grid_lines): grid = [list(line) for line in grid_lines] return numIslands(grid)"},{"question":"You are given a string s consisting of lowercase English letters. You need to find the length of the longest contiguous substring that contains no more than two distinct characters. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Each of the next t lines contains a string s (1 leq |s| leq 1000) — the string for which you need to determine the desired length. For each test case, print the length of the longest contiguous substring that contains no more than two distinct characters. # Input The first line consists of the integer t — the number of test cases. The next t lines each contain a string s of lowercase English letters. # Output For each test case, print the length of the longest contiguous substring that contains no more than two distinct characters. # Example Input ``` 3 eceba ccaabbb aaaa ``` Output ``` 3 5 4 ``` # Explanation For the first example, the longest substring that contains no more than two distinct characters is \\"ece\\", with length 3. For the second example, the longest substring is \\"aabbb\\", with length 5. For the third example, the longest substring is \\"aaaa\\", with length 4.","solution":"def longest_substring_with_two_distinct_chars(t, test_cases): def find_longest_substring(s): max_len = 0 start = 0 char_index = {} for end in range(len(s)): char_index[s[end]] = end if len(char_index) > 2: min_index = min(char_index.values()) del char_index[s[min_index]] start = min_index + 1 max_len = max(max_len, end - start + 1) return max_len result = [] for s in test_cases: result.append(find_longest_substring(s)) return result"},{"question":"You are given an n × n matrix, where each cell contains an integer. Initially, all integers in the matrix are positive. Your task is to find a path from the top-left corner of the matrix to the bottom-right corner with the smallest possible sum of elements of the cells visited. You can only move either down or right at any point in time. The first line of the input contains an integer n (1 ≤ n ≤ 500) — the size of the matrix. Each of the next n lines contains n space-separated integers a[i][j] (1 ≤ a[i][j] ≤ 1000) — the values of the matrix cells. Output a single integer — the smallest possible sum of elements on the path from the top-left to the bottom-right corner. # Example Input: ``` 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 ``` # Explanation The path with the smallest possible sum is highlighted: 1 → 3 → 1 → 1 → 1. The sum of the elements along this path is 7.","solution":"def min_path_sum(matrix): Returns the smallest possible sum of elements on the path from the top-left to the bottom-right corner of a matrix. n = len(matrix) # Create a dp array to store the minimum path sum until each cell dp = [[0] * n for _ in range(n)] # Initialize the first cell with the value from the matrix dp[0][0] = matrix[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j - 1] + matrix[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + matrix[i][0] # Fill the dp array for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j] return dp[n - 1][n - 1] # Example usage matrix = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(min_path_sum(matrix)) # Output should be 7"},{"question":"Andrew is currently working on a writing assistant tool that suggests grammatically correct sentences to users as they type. The tool uses a large dictionary of words and their frequencies to predict the next word in a sentence. The tool also supports a feature that can replace a part of a sentence with another part to offer a more common phrasing based on the dictionary. Given two sentences, determine how many words would need to be changed in the first sentence to make it match the second sentence. The first line contains two integers, n and m (1 ≤ n, m ≤ 100). They indicate the number of words in the first and second sentences, respectively. The next two lines contain n and m lowercase Latin words, respectively representing the first and the second sentence. Print a single integer: the minimum number of words that need to be replaced in the first sentence to make it identical to the second sentence, or -1 if it\'s impossible because the sentences have different lengths. # Sample Input ``` 5 5 this is a sample sentence this is a test sentence ``` # Sample Output ``` 1 ``` # Explanation Only one word (\\"sample\\" to \\"test\\") needs to be replaced to make the first sentence identical to the second sentence.","solution":"def min_changes_to_match(n, m, sentence1, sentence2): Determines the minimum number of word changes needed to make sentence1 match sentence2. Args: n (int): Number of words in the first sentence. m (int): Number of words in the second sentence. sentence1 (list of str): The first sentence as a list of words. sentence2 (list of str): The second sentence as a list of words. Returns: int: The minimum number of changes, or -1 if it\'s impossible. if n != m: return -1 changes = 0 for word1, word2 in zip(sentence1, sentence2): if word1 != word2: changes += 1 return changes"},{"question":"You are given two binary tree nodes as inputs, each represented by a list that follows level-order traversal, with \'None\' values indicating the absence of nodes. Your task is to determine if the two binary trees are identical. Two binary trees are considered identical if they are structurally identical and the nodes have the same values. The input consists of two lines: - The first line contains the level-order traversal for the first tree. - The second line contains the level-order traversal for the second tree. Level-order traversal of a binary tree is a breadth-first traversal where the nodes are visited level by level. For example, the level-order traversal of the binary tree: ``` 1 / 2 3 ``` would be represented as `1, 2, 3`. If the trees are identical, print \\"YES\\". Otherwise, print \\"NO\\". # Examples **Example 1:** Input: ``` 1, 2, 3 1, 2, 3 ``` Output: ``` YES ``` **Example 2:** Input: ``` 1, 2 1, None, 2 ``` Output: ``` NO ``` **Example 3:** Input: ``` 1, 2, 3, None, 4 1, 2, 3, None, 4 ``` Output: ``` YES ``` # Constraints: - The length of the input lists will not exceed 100 elements. - Each list element is either an integer between -10^9 and 10^9, or `None`. Note: You can assume the input will be provided in a format such that each level is completely filled from left to right before moving to the next level, which means wherever nodes are missing, the `None` values will appropriately be in place.","solution":"def are_identical_trees(tree1, tree2): Determines if the two binary trees represented by level-order traversals are identical. Args: tree1 (list of int/None): Level-order traversal of the first binary tree. tree2 (list of int/None): Level-order traversal of the second binary tree. Returns: str: \\"YES\\" if the trees are identical, \\"NO\\" otherwise. if tree1 == tree2: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of n integers, and your task is to answer q queries about the array. Each query can be either updating an element of the array or finding the sum of elements in a specified range. The first type of query is represented as: \\"1 i x\\" which means setting the value of the i-th element of the array to x. The second type of query is represented as: \\"2 l r\\" which means finding the sum of elements in the range from the l-th to the r-th (inclusive) elements of the array. Write a program that handles these queries efficiently. The first line contains two integers n (1 ≤ n ≤ 100000) — the number of elements in the array, and q (1 ≤ q ≤ 100000) — the number of queries. The second line contains n integers, the initial values of the array. Each of the next q lines contains a query either in the form \\"1 i x\\" for updating or \\"2 l r\\" for querying the sum. For each query of the second type, print the result on a new line. Example: Input: 6 5 1 2 3 4 5 6 2 1 3 1 2 10 2 1 3 2 2 5 1 6 7 Output: 6 12 26","solution":"class NumberArray: def __init__(self, nums): self.nums = nums def update(self, i, x): Update the i-th element (1-indexed) of the array to x. self.nums[i - 1] = x def query(self, l, r): Return the sum of the elements in the range from l to r (1-indexed), inclusive. return sum(self.nums[l - 1:r]) def handle_queries(n, q, nums, queries): na = NumberArray(nums) # Initialize the NumberArray with initial values results = [] for query in queries: if query[0] == 1: na.update(query[1], query[2]) # 1 i x elif query[0] == 2: result = na.query(query[1], query[2]) # 2 l r results.append(result) return results"},{"question":"A government surveillance agency wants to monitor a network of computers for malicious activities. Each computer in the network can communicate with a limited number of other computers, forming a non-evolving directed graph. The agency aims to detect if there is a cycle of suspicious activities in this network. A cycle in a directed graph is a sequence of vertices v1, v2, ..., vk such that there is a directed edge from vi to vi+1 for all 1 ≤ i < k, and there is also a directed edge from vk to v1. Your task is to implement a function that determines whether such a cycle exists in the given directed graph. Input: - The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) - the number of computers (vertices) and the number of direct communications (edges) in the network, respectively. - Each of the next m lines contains two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that computer u can directly communicate with computer v. Output: - Output \\"YES\\" (without quotes) if there is at least one cycle in the directed graph, otherwise output \\"NO\\" (without quotes). Example: Input: 5 5 1 2 2 3 3 4 4 5 5 3 Output: YES In this example, there is a cycle 3 -> 4 -> 5 -> 3 in the graph.","solution":"from collections import defaultdict, deque def detect_cycle(n, m, edges): Determines if there is a cycle in a directed graph. Arguments: n -- the number of vertices m -- the number of edges edges -- a list of tuples representing the directed edges Returns: \\"YES\\" if there is a cycle, otherwise \\"NO\\" # Build the adjacency list for the graph graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in edges: graph[u].append(v) in_degree[v] += 1 # Perform Topological Sort using Kahn\'s Algorithm queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) count = 0 # Count of vertices added in topological sort while queue: node = queue.popleft() count += 1 for neighbour in graph[node]: in_degree[neighbour] -= 1 if in_degree[neighbour] == 0: queue.append(neighbour) # If count != n, graph has a cycle return \\"YES\\" if count != n else \\"NO\\""},{"question":"You are given an integer array of length n representing rainfall measurements over n days. Your task is to determine the maximum number of consecutive days during which the rainfall amount was non-decreasing. The input consists of several lines: - The first line contains a single integer n (1 ≤ n ≤ 100000), the number of days. - The second line contains n integers separated by spaces, where the i-th integer represents the amount of rainfall on the i-th day. Each rainfall measurement is an integer between 0 and 100000 inclusive. Your output should be a single integer, the length of the longest subarray where each element is greater than or equal to the previous one. # Example Input ``` 7 2 2 1 3 5 6 1 ``` Output ``` 4 ``` The longest subarray with non-decreasing rainfall measurements is `[1, 3, 5, 6]` having length 4. Input ``` 5 5 4 3 2 1 ``` Output ``` 1 ``` Each rainfall measurement is less than the previous one, so the longest subarray has length 1.","solution":"def longest_non_decreasing_subarray(n, rainfall_measurements): Determines the maximum number of consecutive days during which the rainfall amount was non-decreasing. Params: ------- n : int The number of days. rainfall_measurements : list of int List containing the rainfall measurements for each day. Returns: -------- int The length of the longest non-decreasing subarray. if n == 0: return 0 max_len = 1 current_len = 1 for i in range(1, n): if rainfall_measurements[i] >= rainfall_measurements[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"You are organizing a programming contest where participants can submit solutions to various problems. There are `n` problems in the contest, and each problem has a unique identifier ranging from 1 to n. Each participant can attempt any subset of these problems. If a participant attempts a problem, they either solve it or they do not. You are given the results of the contest in the form of a matrix `results` with `m` rows and `n` columns, where `results[i][j]` is `1` if the `i-th` participant solved the `j-th` problem, and `0` otherwise. Your task is to find and print the number of pairs of participants such that there exists at least one problem that was solved by both participants in the pair. Two participants form a pair `(i, j)` if `1 <= i < j <= m`. Input: - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 1000) — the number of participants and the number of problems. - The next `m` lines contain `n` integers each, where `results[i][j]` is `1` if the `i-th` participant solved the `j-th` problem, and `0` otherwise. Output: - Print a single integer — the number of pairs of participants that share at least one problem they both solved. Example: ``` Input: 3 3 1 0 1 0 1 1 1 1 0 Output: 3 ``` Explanation: - Participant pairs (1, 2) share problem 3. - Participant pairs (1, 3) share problem 1. - Participant pairs (2, 3) share problem 2.","solution":"def count_shared_problem_pairs(m, n, results): count = 0 for i in range(m): for j in range(i + 1, m): for k in range(n): if results[i][k] == 1 and results[j][k] == 1: count += 1 break return count"},{"question":"Given a string s and a list of forbidden substrings, your task is to determine how many substrings of s are not forbidden. A substring is defined as any continuous sequence of characters of the string. For example, if the string is \\"abc\\", its substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". You will be provided multiple test cases. For each test case, you will be given the string s and the list of forbidden substrings. You need to count the number of substrings of s that do not appear in the list of forbidden substrings. The first line of the input contains one integer T (1 le T le 100) — the number of test cases. Each test case contains: 1. A line with the string s (1 le |s| le 50). 2. A line with one integer F (0 le F le 100) — the number of forbidden substrings. 3. F lines each containing one forbidden substring. Each forbidden substring has a length of at least 1 and at most 50 characters. For each test case, output a single integer representing the count of substrings of s that are not forbidden. Example: Input: ``` 2 abc 2 a bc abcd 1 bc ``` Output: ``` 4 6 ``` Explanation: In the first test case, the substrings of \\"abc\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Forbidden substrings are \\"a\\" and \\"bc\\". Substrings \\"b\\", \\"c\\", \\"ab\\", and \\"abc\\" are not forbidden. So, the result is 4. In the second test case, the substrings of \\"abcd\\" are \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", and \\"abcd\\". Forbidden substrings are \\"bc\\". Substrings \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"cd\\", \\"abc\\", \\"bcd\\" and \\"abcd\\" are not forbidden. So, the result is 9.","solution":"def count_non_forbidden_substrings(s, forbidden): Returns the count of substrings of `s` that are not in the `forbidden` list. substrings = set() # Generate all substrings of s for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) # Filter out the forbidden substrings non_forbidden_substrings = substrings - set(forbidden) return len(non_forbidden_substrings) def solve_cases(test_cases): results = [] for s, F, forbidden in test_cases: results.append(count_non_forbidden_substrings(s, forbidden)) return results # Reading input and solving test cases def main(): import sys input = sys.stdin.read data = input().strip().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): s = data[index] index += 1 F = int(data[index]) index += 1 forbidden = [] for __ in range(F): forbidden.append(data[index]) index += 1 test_cases.append((s, F, forbidden)) results = solve_cases(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"John is a programmer who loves creating visual patterns. He always starts with a simple hollow rectangle pattern, defined by its width and height. A hollow rectangle has only its border cells filled, while the inner cells are left empty. Your task is to help John generate this pattern based on the given dimensions. The rectangle John wants to create will have a height of `H` and a width of `W`. Write a function that takes two integers `H` and `W` as input and prints the hollow rectangle pattern. # Input - A single line containing two integers `H` and `W` (2 ≤ H, W ≤ 100), the height and width of the rectangle, respectively. # Output - Print the hollow rectangle pattern where each border cell is represented by a \'*\' (asterisk) and each inner cell by a space. # Example Input ``` 4 5 ``` Output ``` ***** * * * * ***** ``` # Note - The input always guarantees that the rectangle will have at least two rows and two columns. - Make sure to handle the edge cases like the smallest rectangle (2x2).","solution":"def hollow_rectangle(H, W): Prints a hollow rectangle of height H and width W using \'*\' for borders and \' \' for the inside. for i in range(H): if i == 0 or i == H - 1: print(\'*\' * W) else: print(\'*\' + \' \' * (W - 2) + \'*\')"},{"question":"You are given a string consisting of lowercase English letters. Your task is to partition this string into as few substrings as possible such that each substring contains unique characters only. For example, if the input string is \\"abac\\", one possible partition is [\\"ab\\", \\"ac\\"], while another possibility is [\\"a\\", \\"bac\\"]. The first line of the input contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 105) consisting of only lowercase English letters. Print t lines, each containing a single integer — the minimum number of substrings needed to partition the corresponding string from the input. Example Input: 3 abac aaaa abca Output: 2 4 2","solution":"def min_partition_substrings(t, strings): results = [] for s in strings: used_chars = set() partition_count = 1 for char in s: if char in used_chars: partition_count += 1 used_chars = set() used_chars.add(char) results.append(partition_count) return results"},{"question":"In a small kingdom, there are n villages connected by m roads. Each road connects two villages and has a certain length associated with it. The kingdom\'s king wants to promote tourism by making sure that all villages are connected, either directly or indirectly, so tourists can travel between any two villages. The king is aware that the roads in the kingdom have incurred some wear and need essential maintenance and repairs to make them suitable for travel. The cost of repairing a road is directly proportional to its length. Therefore, the goal is to restore a subset of the roads so that the total repair cost is minimized and all villages remain connected. Help the king determine the minimum total cost required to repair the roads so that all villages are connected. # Input Format: The first line contains two integers n and m (2 leq n leq 10^5, 1 leq m leq 5 cdot 10^5) — the number of villages and the number of roads, respectively. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^6) — the two villages connected by the road and the length of the road. It is guaranteed that there is at most one road between any pair of villages. # Output Format: Output a single integer — the minimum total cost required to repair the roads so that all villages are connected. If it is impossible to connect all villages, output -1. # Sample Input: ``` 4 5 1 2 1 1 3 2 1 4 3 2 3 4 3 4 5 ``` # Sample Output: ``` 6 ``` # Explanation: In the given sample, selecting roads with lengths 1, 2, and 3 will connect all the villages with the minimal total cost of 1+2+3 = 6.","solution":"def find_min_repair_cost(n, m, roads): Returns the minimum total cost required to repair the roads so that all villages remain connected or -1 if impossible. # Helper function to find the parent of a node in the Union-Find structure def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) # Helper function to union two subsets in the Union-Find structure def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Kruskal\'s algorithm to find Minimum Spanning Tree (MST) roads.sort(key=lambda x: x[2]) # Sort edges by weight parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = 0 num_edges = 0 for u, v, w in roads: x = find(parent, u-1) y = find(parent, v-1) if x != y: result += w union(parent, rank, x, y) num_edges += 1 if num_edges == n - 1: break if num_edges != n - 1: return -1 return result"},{"question":"You are given a string composed of lowercase English letters. Your task is to find the length of the shortest substring that contains all the unique characters present in the given string. The first line of input contains a single integer n (1 ≤ n ≤ 100000), representing the length of the string. The second line of input contains the string of length n, consisting of only lowercase English letters. Print a single integer, the length of the shortest substring that contains all the unique characters of the string. Example: Input: 10 abacdbedea Output: 5 Explanation: The unique characters in the string are: a, b, c, d, e. The shortest substring that contains all these characters is \\"cdbede\\", which has a length of 5.","solution":"def shortest_substring_with_all_chars(string): unique_chars = set(string) num_unique_chars = len(unique_chars) start = 0 min_len = len(string) + 1 char_count = {} for end in range(len(string)): char_count[string[end]] = char_count.get(string[end], 0) + 1 while len(char_count) == num_unique_chars: min_len = min(min_len, end - start + 1) char_count[string[start]] -= 1 if char_count[string[start]] == 0: del char_count[string[start]] start += 1 return min_len def find_shortest_substring_length(n, s): return shortest_substring_with_all_chars(s)"},{"question":"Given a tree with ( n ) nodes (numbered from ( 1 ) to ( n )), you have to find the largest distance between two nodes in this tree. The distance between two nodes is the number of edges in the shortest path connecting them. The input consists of multiple test cases. The first line contains a single integer ( t ) (( 1 le t le 100 )) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer ( n ) (( 2 le n le 10^5 )) — the number of nodes in the tree. The next ( n-1 ) lines contain two integers ( u ) and ( v ) (( 1 le u, v le n )) — an edge between node ( u ) and node ( v ). It is guaranteed that the given graph is a tree. For each test case, print a single integer — the maximum distance between any two nodes in the tree. # Example Input ``` 2 4 1 2 2 3 2 4 5 1 2 1 3 3 4 3 5 ``` Output ``` 2 3 ``` Explanation For the first test case, the tree structure is as follows: ``` 1 | 2 / 3 4 ``` The longest path is either from node (3) to (4) or (4) to (3) (both have a length of 2 edges). For the second test case, the tree structure is: ``` 1 / 2 3 / 4 5 ``` The longest path is from (2) to (4) through (1) and (3) (which has a total length of 3 edges).","solution":"import sys from collections import deque, defaultdict def max_distance(n, edges): if n == 2: return 1 # Graph construction graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Helper BFS function to find farthest node and distance def bfs(start_node): visited = [-1] * (n + 1) queue = deque([start_node]) visited[start_node] = 0 farthest_node = start_node max_dist = 0 while queue: node = queue.popleft() current_dist = visited[node] for neighbor in graph[node]: if visited[neighbor] == -1: # Not visited visited[neighbor] = current_dist + 1 queue.append(neighbor) if visited[neighbor] > max_dist: max_dist = visited[neighbor] farthest_node = neighbor return farthest_node, max_dist # Start BFS from an arbitrary node (e.g., node 1) farthest_node, _ = bfs(1) # Start BFS from the farthest node found to find the maximum distance _, max_distance = bfs(farthest_node) return max_distance def find_max_distances(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] edges = test_cases[i][1] results.append(max_distance(n, edges)) return results"},{"question":"Sandra is fascinated by prime numbers and decided to create a game where she challenges others to solve a specific prime-related problem. Given an integer ( n ) and a set of queries, each query consists of a pair of integers ( (a, b) ). For each query, determine how many prime numbers are there between ( a ) and ( b ) (inclusive). The first line of the input contains a single integer ( n ) ( (1 le n le 10^6) ). The second line contains ( n ) integers ( a_i ) ( (1 le a_i le 10^6) ). The third line contains a single integer ( q ) ( (1 le q le 10^5) ), the number of queries. Each of the next ( q ) lines contains two integers ( a ) and ( b ) ( (1 le a le b le 10^6) ). For each query, print the number of prime numbers between ( a ) and ( b ) (inclusive). **Note:** - A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. - The goal is to efficiently compute the number of prime numbers in the given range for each query. # Example: **Input:** ``` 10 1 2 3 4 5 6 7 8 9 10 3 1 10 2 5 7 10 ``` **Output:** ``` 4 3 2 ``` **Explanation:** - There are 4 primes within the range from 1 to 10: [2, 3, 5, 7]. - There are 3 primes within the range from 2 to 5: [2, 3, 5]. - There are 2 primes within the range from 7 to 10: [7, 11].","solution":"def sieve(n): Implements the Sieve of Eratosthenes to find all prime numbers up to n. is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return is_prime def precompute_prime_count(n, is_prime): Precompute the prime count up to each number from 1 to n. prime_count = [0] * (n + 1) count = 0 for i in range(1, n + 1): if is_prime[i]: count += 1 prime_count[i] = count return prime_count def count_primes_in_range(prime_count, a, b): Count the number of primes in the range [a, b] using the precomputed prime count array. return prime_count[b] - prime_count[a - 1] def process_queries(n, primes, queries): Process each query to count the number of primes in the specified range. results = [] is_prime = sieve(max(primes)) prime_count = precompute_prime_count(max(primes), is_prime) for a, b in queries: results.append(count_primes_in_range(prime_count, a, b)) return results"},{"question":"You are given an integer matrix M with dimensions n times m. Your task is to determine if there exists a submatrix of M which contains at least one of every number from 1 to k. The first line contains three integers n, m, and k (1 le n, m le 500; 1 le k le n cdot m) — the dimensions of the matrix and the maximum number you need to find in a submatrix. The next n lines contain m integers each, representing the elements of the matrix M (1 le M_{i,j} le k). Print \\"YES\\" if there exists a submatrix of any size that contains all integers from 1 to k, otherwise print \\"NO\\". Example: Input: 3 4 5 1 2 3 4 2 5 6 1 3 4 2 1 Output: YES","solution":"def contains_all_numbers(M, n, m, k): Returns \\"YES\\" if there exists a submatrix in M which contains all integers from 1 to k, otherwise returns \\"NO\\". num_set = set(range(1, k + 1)) numbers_found = set() for i in range(n): for j in range(m): if M[i][j] in num_set: numbers_found.add(M[i][j]) if numbers_found == num_set: return \\"YES\\" return \\"NO\\" def solve(matrix): first_line = matrix[0] n, m, k = int(first_line[0]), int(first_line[1]), int(first_line[2]) M = [list(map(int, matrix[i + 1])) for i in range(n)] return contains_all_numbers(M, n, m, k)"},{"question":"Given a grid of n rows and m columns with certain cells blocked, your task is to find the shortest path from the top-left corner to the bottom-right corner, avoiding blocked cells. You can only move up, down, left, or right. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. The next n lines each contain m characters. A character \'.\' represents an open cell, and \'X\' represents a blocked cell. Output the length of the shortest path from the top-left corner (1,1) to the bottom-right corner (n,m). If there is no path, print -1. Example Input: ``` 5 5 ..... .X.X. .X... XXX.X ..... ``` Example Output: ``` 9 ``` Explanation: In the given grid, one possible path is: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (4,2) -> (5,2) -> (5,3) -> (5,4) The length of this path is 9.","solution":"from collections import deque def shortest_path(n, m, grid): Finds the shortest path in a grid avoiding blocked cells. :param n: int, number of rows. :param m: int, number of columns. :param grid: List of strings, representing the grid. :return: int, shortest path length or -1 if no path exists. if grid[0][0] == \'X\' or grid[n-1][m-1] == \'X\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == n-1 and col == m-1: return dist for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < n and 0 <= c < m and (r, c) not in visited and grid[r][c] == \'.\': visited.add((r, c)) queue.append((r, c, dist + 1)) return -1"},{"question":"You have been given a string s which is zero-indexed. Determine whether it is possible to reorder the string such that every substring of size 4 in the resulting string contains all the distinct characters of the string given as the input. The string s also contains characters from \'a\' to \'d\'. You need to identify whether it is possible to rearrange the string such that every substring of length 4 is an exact permutation of the set {\'a\', \'b\', \'c\', \'d\'}. In simpler terms, you must ensure all substrings of length 4 in the rearranged string have exactly one of each letter \'a\', \'b\', \'c\', and \'d\'. Each test contains multiple test cases. The first input line contains t (1 le t le 10^4) — the number of test cases. Each of the following t lines contains a single string s with a length n (4 le n le 2 cdot 10^5), which consists only of the characters \'a\', \'b\', \'c\', and \'d\'. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. For each test case, print \\"YES\\" if it is possible to reorder the string s according to the above conditions. Otherwise, print \\"NO\\". # Example Input ``` 5 abcd aaabcd aaaabcd abcdabcdabcd abcdabcdabcdabc ``` Output ``` YES NO NO YES NO ``` # Explanation For the first test case, the string is already valid as it contains exactly one \'a\', \'b\', \'c\', and \'d\'. For the second test case, it is not possible to create subsegments of size 4 all containing a complete set of \'a\', \'b\', \'c\', \'d\', because there are not enough \'b\', \'c\', and \'d\' characters to satisfy the condition. For the fourth case, the string can be rearranged such that every substring of length 4 is a permutation of {\'a\', \'b\', \'c\', \'d\'}. An example rearrangement is the string itself. For the fifth case, it is not possible to reorder such that every substring of length 4 is valid due to the unequal distribution of the characters at the end.","solution":"def is_valid_reordering_possible(t, test_cases): res = [] for s in test_cases: count = {char: s.count(char) for char in \'abcd\'} if len(s) % 4 == 0 and all(v == len(s) // 4 for v in count.values()): res.append(\\"YES\\") else: res.append(\\"NO\\") return res"},{"question":"In a bustling tech company, there\'s a need to monitor the productivity of employees based on their daily task completion. Each employee has a unique productivity score, which is calculated as the sum of points they earn by completing tasks throughout the day. You are tasked with developing a program that can identify the top k productive employees from a list based on their productivity scores. The input begins with two integers n and k (1 ≤ k ≤ n ≤ 100,000) — the number of employees and the number of top productive employees to find. The next n lines contain the names of the employees (each name is a non-empty string of at most 50 characters and consists only of lowercase English letters) and their respective productivity scores (an integer between -10^9 and 10^9 inclusive). The goal is to output the names of the top k productive employees. If multiple employees have the same productivity score, they should be sorted by their names in lexicographical order. # Input ``` The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) — the number of employees and the number of top productive employees to find. The next n lines each contain a string s (1 ≤ |s| ≤ 50) and an integer p (|p| ≤ 10^9) separated by a space — the name of an employee and their productivity score. ``` # Output ``` Print k lines, each containing the name of one of the top k productive employees in descending order of productivity score. If multiple employees have the same score, sort them by their names in lexicographical order. ``` # Example Input: ``` 5 3 alice 450 bob 200 charlie 200 dave 600 eve 450 ``` Output: ``` dave alice eve ``` In this example, \'dave\' is the top productive employee with a score of 600, followed by \'alice\' and \'eve\' both with a score of 450. \'bob\' and \'charlie\' with a score of 200 do not make it to the top three, so they are excluded from the output.","solution":"def top_k_productive_employees(n, k, employees): Returns the names of the top k productive employees. :param n: Number of employees :param k: Number of top productive employees to find :param employees: List of tuples [(name, productivity_score), ...] :return: List of names of top k productive employees # Sort employees by score (descending) and by name (lexicographically) if scores are equal sorted_employees = sorted(employees, key=lambda x: (-x[1], x[0])) # Extract the names of the top k productive employees top_k_employees = [emp[0] for emp in sorted_employees[:k]] return top_k_employees # Example usage: # employees_list = [(\\"alice\\", 450), (\\"bob\\", 200), (\\"charlie\\", 200), (\\"dave\\", 600), (\\"eve\\", 450)] # print(top_k_productive_employees(5, 3, employees_list))"},{"question":"You are given an array of integers where each integer occurs an even number of times except for exactly one integer which occurs an odd number of times. Your task is to find that single integer that occurs an odd number of times. The first line of input contains one integer n (1 le n le 10^6) — the length of the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 le a_i le 10^9). Print the integer that occurs an odd number of times. In the first example, the integer occurring an odd number of times is 1. In the second example, the integer occurring an odd number of times is 4. # Example Input 7 1 2 3 2 3 1 4 Output 4 Input 5 10 20 10 20 30 Output 30","solution":"def find_odd_occurrence(arr): Returns the integer that occurs an odd number of times in the array. result = 0 for number in arr: result ^= number return result # Example usage: # if __name__ == \\"__main__\\": # n = int(input().strip()) # arr = list(map(int, input().strip().split())) # print(find_odd_occurrence(arr))"},{"question":"Alice is an enthusiastic botanist who loves to create unique gardens with a variety of plants. She has decided to plant a rectangular garden with distinct species of flowers. Each species has a unique number between 1 and k. The garden is represented as a matrix with n rows and m columns. Every cell in the matrix must contain exactly one species of flower. Alice has a peculiar way of arranging flowers: each row and each column must contain all the flowers from 1 to k exactly once. This implies that if (k > n) or (k > m), it will be impossible to create such a garden. Given the values of n, m, and k, your task is to determine if it is possible for Alice to create her desired garden. If it is possible, print \\"YES\\", otherwise print \\"NO\\". **Input** The input consists of a single line containing three integers n, m, and k (1 ≤ n, m, k ≤ 100). **Output** Print a single line containing \\"YES\\" if it is possible for Alice to plant the garden according to her rules, otherwise print \\"NO\\". **Examples** **Input** 2 3 2 **Output** YES **Input** 2 3 4 **Output** NO **Explanation** In the first example, Alice can arrange the garden as follows: ``` 1 2 1 2 1 2 ``` In this arrangement, each row and each column contains all the flowers from 1 to 2 exactly once. In the second example, it is impossible to create a garden where each row and column contains all flowers from 1 to 4 exactly once since (k = 4) is greater than both (n = 2) and (m = 3).","solution":"def can_create_garden(n, m, k): Determines if it is possible to create a garden that satisfies the rules. Returns \'YES\' if possible, \'NO\' otherwise. Parameters: n (int): number of rows in the garden m (int): number of columns in the garden k (int): number of unique flower species Returns: str: \'YES\' if the garden can be created, \'NO\' otherwise if k > n or k > m: return \\"NO\\" return \\"YES\\""},{"question":"In a village, each house is connected by a series of roads, and there\'s exactly one road between any two houses, forming a tree structure. However, recently some roads broke down, and now some of the houses can no longer be reached from others. The villagers need to repair the least number of roads to make the whole village connected again. Each repair costs the same amount of money. You are given the number of houses N (1 leq N leq 100,000) and the number of working roads M (0 leq M leq N-1). Each of the next M lines contains two integers a and b (1 leq a, b leq N) indicating a working road between house a and house b. Your task is to compute the minimum number of roads that need to be repaired to make sure all houses are connected. # Input - The first line contains two integers N (1 leq N leq 100,000) and M (0 leq M leq N-1). - Each of the next M lines contains two integers a and b (1 leq a, b leq N) that represent a working road between houses a and b. # Output - Print the minimum number of roads that need to be repaired. # Example Input ``` 5 2 1 2 2 3 ``` Output ``` 2 ``` Explanation - In the given example, the village needs two additional roads to connect all houses. For instance, one possible way is to connect house 3 to house 4 and house 4 to house 5.","solution":"def find_set(parent, u): if parent[u] != u: parent[u] = find_set(parent, parent[u]) return parent[u] def union_sets(parent, rank, u, v): root_u = find_set(parent, u) root_v = find_set(parent, v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 def min_roads_to_repair(N, M, roads): parent = list(range(N + 1)) rank = [0] * (N + 1) for a, b in roads: union_sets(parent, rank, a, b) root_set = set(find_set(parent, i) for i in range(1, N + 1)) return len(root_set) - 1"},{"question":"You are given `n` tasks, each with a specific start time and end time. A person can work on only one task at a time. Find the maximum number of tasks that the person can complete without any overlaps in task timings. The first line contains an integer `n` (1 ≤ n ≤ 2000) — the number of tasks. The next `n` lines each contain two integers `si` and `ei` (0 ≤ si < ei ≤ 10^9) — the start time and end time of the i-th task. Print one integer, the maximum number of non-overlapping tasks that can be completed. Example: ``` Input: 5 1 4 2 3 3 5 7 9 5 8 Output: 3 Explanation: The maximum number of non-overlapping tasks that can be completed are: (1,4), (5,8), and (7,9). ```","solution":"def max_non_overlapping_tasks(n, tasks): Returns the maximum number of non-overlapping tasks that can be completed. # Sort tasks based on their end time sorted_tasks = sorted(tasks, key=lambda x: x[1]) max_tasks = 0 last_end_time = 0 for task in sorted_tasks: if task[0] >= last_end_time: max_tasks += 1 last_end_time = task[1] return max_tasks"},{"question":"Thomas is an avid book collector and has recently obtained a collection of `n` books, each with a unique thickness. Thomas likes to keep his books neatly arranged on the shelf. However, his shelf is only spacious enough to hold books with a total thickness not exceeding `T`. Thomas wants to arrange as many books as possible on the shelf without exceeding the total thickness `T`. Given the thickness of each book and the total allowable thickness of the shelf, determine the maximum number of books that Thomas can place on the shelf. # Input - The first line contains two integers `n` and `T` (1 ≤ n ≤ 1000, 1 ≤ T ≤ 10^6) — the total number of books and the maximum allowable thickness of the shelf. - The second line contains `n` integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the thicknesses of the books. # Output Print a single integer — the maximum number of books that Thomas can fit onto the shelf without the total thickness exceeding `T`. # Example Input ``` 5 10 1 2 3 4 5 ``` Output ``` 4 ``` Explanation Thomas can choose the books with thicknesses 1, 2, 3, and 4 which sum up to 10, or the books with thicknesses 2, 3, and 5 which also sum up to 10. Both arrangements fit within the maximum allowable thickness, but choosing 4 books in the first arrangement maximizes the number of books on the shelf.","solution":"def max_books_on_shelf(n, T, thicknesses): Determines the maximum number of books that can be placed on the shelf without exceeding thickness T. Args: n: int, the number of books T: int, the maximum allowable thickness thicknesses: list of int, the thickness of each book Returns: int: the maximum number of books that can be placed on the shelf # Sort the list of thicknesses in non-decreasing order thicknesses.sort() # Initialize variables to keep track of the total thickness and the count of books total_thickness = 0 count = 0 # Iterate through the sorted list and add books as long as total thickness does not exceed T for thickness in thicknesses: if total_thickness + thickness <= T: total_thickness += thickness count += 1 else: break return count"},{"question":"You are given a string s of length n consisting of lowercase English letters. Your task is to form the shortest possible palindrome by adding characters to the end of the string. A string is considered a palindrome if it reads the same backward as forward. The first line of the input contains a single integer t (1 leq t leq 10) — the number of test cases. Each of the next t lines contains a string s (1 leq |s| leq 1000). Output the length of the shortest palindrome that can be obtained by adding characters to the end of the string for each test case. **Example:** **Input:** ``` 3 abcd race mada ``` **Output:** ``` 7 7 5 ``` **Note to the example:** For string \\"abcd\\", appending \\"dcb\\" at the end forms the palindrome \\"abcddcba\\". Thus, the shortest palindrome has length 7. For string \\"race\\", appending \\"car\\" at the end forms the palindrome \\"racecar\\". Thus, the shortest palindrome has length 7. For string \\"mada\\", appending \\"m\\" at the end forms the palindrome \\"madam\\". Thus, the shortest palindrome has length 5.","solution":"def shortest_palindrome_length(s): Returns the length of the shortest palindrome that can be obtained by adding characters to the end of the string. def is_palindrome(s): return s == s[::-1] for i in range(len(s)): if is_palindrome(s[i:]): return len(s) + i return 2 * len(s) - 1 def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(shortest_palindrome_length(s)) return results"},{"question":"Alex is organizing a sequence alignment competition. Each sequence in the competition is an array of lower case alphabet strings, and the goal is to maximize the longest common subsequence (LCS) between two given sequences. You are provided with two sequences (arrays of strings) S1 of length n and S2 of length m. Your task is to determine the length of the longest common subsequence (LCS) between these two sequences. The definition of LCS is as follows: The LCS of two sequences is the longest sequence that can be derived from both of the original sequences without changing the order of the elements. # Input - The first line contains an integer n (1 ≤ n ≤ 1000), representing the length of the first sequence S1. - The second line contains n space-separated lower case strings, representing the elements of sequence S1 (each string containing between 1 and 50 characters). - The third line contains an integer m (1 ≤ m ≤ 1000), representing the length of the second sequence S2. - The fourth line contains m space-separated lower case strings, representing the elements of sequence S2 (each string containing between 1 and 50 characters). # Output - Output a single integer, the length of the longest common subsequence between S1 and S2. # Example Input ``` 4 apple orange banana grape 5 banana apple grape strawberry orange ``` Output ``` 2 ``` # Note In the given example, the LCS is [\\"apple\\", \\"grape\\"]. Therefore, the length of the LCS is 2.","solution":"def longest_common_subsequence(S1, S2): n = len(S1) m = len(S2) # Create a 2D list to store lengths of LCS dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill dp array for i in range(1, n + 1): for j in range(1, m + 1): if S1[i - 1] == S2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"There are several cities and several roads between them. Each road connects two distinct cities and is bidirectional, meaning you can travel both ways. The cities and roads together form a connected graph. Your task is to find the shortest path from the capital city to all other cities while ensuring that the capital city is visited exactly once. The first line contains three integers n, m, and c (2 le n le 10^5, 1 le m le 2cdot 10^5, 1 le c le n) — the number of cities, the number of roads, and the index of the capital city respectively. Each of the next m lines contain three integers u_i, v_i, and w_i (1 le u_i, v_i le n, u_i ne v_i, 1 le w_i le 1000) — the cities connected by the road and the length of the road in kilometers. Output n integers: the shortest distance from the capital city to each city including the capital city itself. If the city is unreachable, output -1 for that city. If there are multiple shortest paths to a city, any one of them is valid. Example: Input: ``` 5 6 1 1 2 2 1 3 3 2 3 2 2 4 4 3 4 1 3 5 5 ``` Output: ``` 0 2 3 4 8 ``` Explanation: The path from city 1 (capital) to city 2 takes 2 kilometers. The path from city 1 (capital) to city 3 takes 3 kilometers. The path from city 1 (capital) to city 4: 1 -> 3 -> 4 takes 4 kilometers. The path from city 1 (capital) to city 5: 1 -> 3 -> 5 is 3 + 5 = 8 kilometers.","solution":"import heapq def shortest_paths(n, m, c, roads): graph = {i: [] for i in range(1, n+1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[c] = 0 priority_queue = [(0, c)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) # Convert distances to the required format result = [] for i in range(1, n+1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"You are given an integer array of length n. You are allowed to perform exactly one operation where you can select any two indices i and j (1 ≤ i, j ≤ n, i ≠ j) and swap the elements at these indices. Your task is to determine if it is possible to make the array sorted in non-decreasing order by performing exactly one swap operation. For example, given an array [3, 2, 1], you can swap the elements at indices 1 and 3 to get the sorted array [1, 2, 3]. The first line of input contains a single integer n (2 ≤ n ≤ 100,000), the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100,000) which represents the elements of the array. Print \\"YES\\" (without quotes) if it is possible to make the array sorted by performing exactly one swap operation, otherwise print \\"NO\\". Example 1: Input: 3 3 1 2 Output: NO Example 2: Input: 3 1 3 2 Output: YES Example 3: Input: 4 4 1 3 2 Output: NO","solution":"def can_be_sorted_by_one_swap(n, arr): Determine if the array can be sorted by performing exactly one swap operation. Parameters: n (int): the length of the array arr (list): the elements of the array Returns: str: \\"YES\\" or \\"NO\\" sorted_arr = sorted(arr) diff_indices = [] for i in range(n): if arr[i] != sorted_arr[i]: diff_indices.append(i) # If there are exactly two indices where array differs from sorted array if len(diff_indices) == 2: i, j = diff_indices arr[i], arr[j] = arr[j], arr[i] if arr == sorted_arr: return \\"YES\\" return \\"NO\\""},{"question":"You are given a sophisticated robotic arm capable of solving jigsaw puzzles. The robotic arm is supplied with a list of puzzle pieces, each represented by a unique integer. Each piece can be classified into two categories based on its characteristics: edge pieces and corner pieces. An edge piece is a piece that lies on the boundary of the assembled puzzle but is not a corner piece. A corner piece is a piece that belongs to the corners of the puzzle. For simplicity, the puzzle is considered to be solvable if and only if the number of edge pieces (including corner pieces) is exactly four times the square root of the total number of pieces. This accounts for the puzzle forming a perfect square. Your task is to program the robotic arm to determine if a given list of puzzle pieces forms a perfect square puzzle, and if so, return the number of corner pieces. If the given list of pieces does not form a perfect square puzzle, return -1. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the total number of puzzle pieces. - The second line contains n integers representing the puzzle pieces (1 ≤ each piece ≤ 10^9). Output: - Output the number of corner pieces if the puzzle forms a perfect square, otherwise output -1. Example: Input: 16 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output: 4","solution":"import math def count_corner_pieces(n, pieces): Returns the number of corner pieces if the puzzle forms a perfect square, otherwise returns -1. The puzzle forms a perfect square if the number of edge pieces (including corner pieces) is exactly 4 times the square root of the total number of pieces. # Check if n is a perfect square sqrt_n = int(math.sqrt(n)) if sqrt_n * sqrt_n != n: return -1 # Number of edge pieces should be 4 times the side length of the square expected_edge_pieces = 4 * sqrt_n # Since a valid square puzzle has exactly 4 corner pieces corner_pieces = 4 return corner_pieces # Example usage n = 16 pieces = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] print(count_corner_pieces(n, pieces)) # Output: 4"},{"question":"You are given a sequence of integers of length n (1 le n le 10^5). Your task is to divide this sequence into however many contiguous subarrays you like, such that the sum of the maximum element of each subarray is minimized. The first line contains an integer n (1 leq n leq 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the sequence. Output the minimum possible sum of the maximum elements of each subarray you can achieve. In the first sample, consider the sequence [1, 2, 3, 4, 5]. It is optimal to separate it into the subarrays [1, 2], [3], [4], [5], to achieve the sum of 2+3+4+5=14, which is the minimum possible. In the second sample, consider the sequence [5, 5, 5, 5, 5]. Here, the optimal solution is to take each element in its own subarray, resulting in a sum of 5+5+5+5+5=25. # Input ``` 5 1 2 3 4 5 ``` # Output ``` 14 ``` # Input ``` 5 5 5 5 5 5 ``` # Output ``` 25 ```","solution":"def min_sum_max_of_subarrays(n, array): Returns the minimum possible sum of the maximum elements of each contiguous subarray you can achieve for the given array. # In the given problem, to minimize the sum of maximum elements in subarrays, # the only logical and non-trivial way is to have each individual element as a subarray. # This is because there is no gain in combining elements as it increases the max of a subarray. return sum(array)"},{"question":"In the mysterious village of Alathan, there are n houses arranged linearly. Each house is either inhabited by a friendly villager or an antagonistic ghost. You are given an array \'houses\', where each element can either be \'V\' (representing a villager) or \'G\' (representing a ghost). A protective ritual can shield a contiguous segment of houses, ensuring that any ghosts within that segment are neutralized. In a single ritual, you can select any contiguous segment of houses and make all the ghosts in that segment disappear. Your task is to determine the minimum number of rituals needed to rid the village of all ghosts. The first line contains an integer n (1 ≤ n ≤ 100). The second line contains a string of length n consisting of characters \'V\' and \'G\'. Print a single integer indicating the minimum number of rituals needed to neutralize all ghosts. In the first sample \'VGGV\', you can perform one ritual from the 2nd to the 3rd house to neutralize both ghosts. In the second sample \'GVGVG\', you need three rituals: one for each solitary ghost. Example: Input: 4 VGGV Output: 1 Input: 5 GVGVG Output: 3","solution":"def minimum_rituals(n, houses): Given the number of houses and their arrangements with villagers and ghosts, returns the minimum number of rituals needed to neutralize all ghosts. # Initialize the count of rituals to 0 rituals = 0 # Iterate through the houses to count contiguous segments of \'G\' i = 0 while i < n: if houses[i] == \'G\': rituals += 1 while i < n and houses[i] == \'G\': i += 1 else: i += 1 return rituals"},{"question":"You are given n stacks of coins. Each stack contains a certain number of coins. In a single move, you can remove any number of coins from the top of any stack. More formally, you are given an array of positive integers `coins` where `coins[i]` denotes the number of coins in the i-th stack initially. You need to perform exactly k moves such that the total number of coins removed in all moves is minimized and each stack is left with at least one coin. Implement a function `minimum_coins(coins: List[int], k: int) -> int` that returns the minimum total number of coins removed after exactly `k` moves. # Input - An array `coins` of positive integers representing the number of coins in each stack, with length `n` (1 leq n leq 100,000). - An integer `k` (1 leq k leq text{sum}(coins) - n). # Output - An integer representing the minimum total number of coins removed after exactly `k` moves. # Example ``` coins = [5, 4, 3, 2, 1] k = 3 output = 3 ``` # Explanation In this example, one optimal way to minimize coins removed is to: 1. Remove 2 coins from the first stack (leaving it with 3). 2. Remove 1 coin from the second stack (leaving it with 3). This results in a total of 3 coins removed. # Note - Every stack must have at least one coin left after performing the moves.","solution":"from typing import List def minimum_coins(coins: List[int], k: int) -> int: # Sort the stacks by number of coins in non-decreasing order coins.sort() # Result to accumulate the minimum number of coins removed result = 0 # Iterate from first (smallest) stack to last (largest) until k moves are performed for i in range(len(coins)): if k == 0: break # Determine how many coins can be removed from the current stack remove_from_stack = min(coins[i] - 1, k) result += remove_from_stack k -= remove_from_stack return result"},{"question":"Alice has just bought a new chessboard and a set of chess pieces. She wants to place up to k pieces on the board in such a way that no two pieces attack each other. Alice\'s chessboard is an n x n grid, and each cell can either be an empty square or a wall that pieces cannot be placed on or moved through. The pieces Alice can use are knights, which move in an L-shape (two squares in one direction and one square perpendicular to it). Given the configuration of the chessboard and the maximum number of pieces k, determine the maximum number of knights Alice can place on the board without any two knights attacking each other. The first line contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ n * m) — the dimensions of the chessboard and the maximum number of knights to be placed. The next n lines each contain m characters, representing the board configuration. Each character is either \'.\' (an empty square) or \'#\' (a wall). Print a single integer — the maximum number of knights that can be placed on the board without attacking each other. If it is not possible to place any knights, print 0. Note: - Knights move in an L-shape: they can move to any of the eight possible positions that are two squares in one direction and one square perpendicular to it. - Knights can jump over other pieces or walls, but they cannot land on a wall cell. Example: Input: 4 4 4 .... .#.. ..#. .... Output: 4 Explanation: One of the optimal ways to place the knights is on positions (1,1), (1,3), (3,2), and (4,4). No two knights attack each other, and 4 is the maximum number of knights that can be placed on the board under the given constraints.","solution":"def max_knights(n, m, k, board): def is_safe(board, row, col): knight_moves = [ (-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1) ] for move in knight_moves: new_row, new_col = row + move[0], col + move[1] if 0 <= new_row < n and 0 <= new_col < m and board[new_row][new_col] == \'K\': return False return True def backtrack(board, k, start): if k == 0: return sum(row.count(\'K\') for row in board) max_knights_count = 0 for i in range(start, n * m): row, col = divmod(i, m) if board[row][col] == \'.\' and is_safe(board, row, col): board[row][col] = \'K\' max_knights_count = max(max_knights_count, backtrack(board, k - 1, i + 1)) board[row][col] = \'.\' return max_knights_count return backtrack(board, k, 0)"},{"question":"There are n identical water jugs arranged in a row. You have to perform exactly m operations to equalize the amount of water in all the jugs. In each operation, you can do the following: 1. Choose one jug and pour water from it to the adjacent left or right jug. Note that all jugs have infinite capacity for water. Initially, the amount of water in each jug is random and given in the input. Write a program that reads the initial amount of water in each jug and outputs the exact sequence of operations you need to perform to equalize the amount of water in all the jugs. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10^5) — the number of jugs and the number of operations, respectively. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the initial amount of water in each jug. Output the number of operations performed followed by m lines describing the operations. Each operation should be in the form \\"index direction\\", where index is the 1-based index of the jug and direction is either \\"L\\" (left) or \\"R\\" (right). # Example Input ``` 5 4 2 6 4 2 8 ``` Output ``` 4 2 L 5 L 4 L 3 R ``` # Note In this example, we initially have 5 jugs with the water amounts [2, 6, 4, 2, 8]. After the given sequence of operations: - Move water from jug 2 to jug 1 (operation \\"2 L\\"): [8, 0, 4, 2, 8] - Move water from jug 5 to jug 4 (operation \\"5 L\\"): [8, 0, 8, 6, 4] - Move water from jug 4 to jug 3 (operation \\"4 L\\"): [8, 0, 14, 0, 4] - Move water from jug 3 to jug 4 (operation \\"3 R\\"): [8, 0, 0, 14, 4] The final amounts of water in each jug can be balanced further, but you need to show exactly m operations to balance them step by step.","solution":"def equalize_water_jugs(n, m, water_amounts): operations = [] # Perform m operations for i in range(m): if i % 2 == 0: # From the second jug to the first jug if possible if n > 1: operations.append(f\\"2 L\\") water_amounts[0] += water_amounts[1] water_amounts[1] = 0 else: # From the last jug to the second-to-last jug if possible if n > 1: operations.append(f\\"{n} L\\") water_amounts[-2] += water_amounts[-1] water_amounts[-1] = 0 return operations # Example execution if __name__ == \\"__main__\\": n, m = 5, 4 water_amounts = [2, 6, 4, 2, 8] operations = equalize_water_jugs(n, m, water_amounts) print(len(operations)) for op in operations: print(op)"},{"question":"Given an undirected graph with `n` nodes labeled `1` to `n` and `m` edges, along with two specific nodes `u` and `v`, find the shortest path between nodes `u` and `v` using Breadth-First Search (BFS). If there is no path connecting `u` and `v`, output `-1`. The first line contains three integers `n`, `m` (1 ≤ n, m ≤ 10^5), and `q` (1 ≤ q ≤ 1000), the number of queries. The next `m` lines each contain two integers `a_i` and `b_i` (1 ≤ a_i, b_i ≤ n) describing an edge between nodes `a_i` and `b_i`. Each of the next `q` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) for which you need to find the shortest path. For each query, output the length of the shortest path between nodes `u` and `v`. If there is no such path, output `-1`.","solution":"from collections import deque, defaultdict def bfs_shortest_path(n, edges, queries): Function to find the shortest path using BFS between pairs of nodes. Parameters: n : int : Number of nodes in the graph edges : List[Tuple[int, int]] : List of edges in the graph queries : List[Tuple[int, int]] : List of queries for which to find shortest paths Returns: List[int] : List of shortest path lengths for each query # Create adjacency list for the graph adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) def bfs(start, end): # If the start and end are the same, shortest path is 0 if start == end: return 0 visited = [False] * (n + 1) distance = [0] * (n + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True distance[neighbor] = distance[node] + 1 queue.append(neighbor) if neighbor == end: return distance[neighbor] return -1 # No path exists result = [] for u, v in queries: result.append(bfs(u, v)) return result"},{"question":"In a certain fictional city, there are **n** islands connected by **m** bridges. Each bridge connects exactly two different islands and has a certain length. An island **i** is connected to another island **j** if there\'s a bridge between them. No island is isolated, meaning every island can reach any other island through a series of bridges. One day, the mayor decided to illuminate the islands to make the city look beautiful at night. Each island can have exactly one lamp installed, and when a lamp is installed on an island, all bridges connected to that island will be illuminated. However, to save energy, the mayor wants to minimize the total number of lamps installed. Write a program to find the minimum number of lamps needed to illuminate all the bridges in the city. # Input The first line contains two integers **n** and **m** (1 ≤ n, m ≤ 10^5), the number of islands and the number of bridges, respectively. The next **m** lines each contain two integers **u** and **v** (1 ≤ u, v ≤ n, u ≠ v), indicating that there is a bridge connecting island **u** and island **v**. # Output Output a single integer, which is the minimum number of lamps needed to illuminate all the bridges. # Example **Input:** ``` 5 5 1 2 2 3 3 4 4 5 1 5 ``` **Output:** ``` 3 ``` **Explanation:** By placing lamps on islands 1, 3, and 5, all the bridges will be illuminated. # Note: The problem guarantees that the list of bridges forms a connected graph, so every island can reach any other island through the bridges.","solution":"def dfs(node, visited, adjacency_list): stack = [node] while stack: current = stack.pop() if not visited[current]: visited[current] = True for neighbor in adjacency_list[current]: if not visited[neighbor]: stack.append(neighbor) def min_lamps(n, m, bridges): adjacency_list = {i: [] for i in range(1, n + 1)} for u, v in bridges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = [False] * (n + 1) lamps = 0 for i in range(1, n + 1): if not visited[i]: dfs(i, visited, adjacency_list) lamps += 1 return lamps"},{"question":"In a faraway land, there exists an enchanted forest with special trees. Each tree has a unique height given in an array. Magic occurs when you can form a \\"triangle\\" using exactly three distinct trees based on their heights. The rule for forming a \\"magic triangle\\" is the standard triangle inequality: for three heights a, b, and c chosen from the array, they must satisfy ( a + b > c ), ( a + c > b ), and ( b + c > a ). Your task is to determine whether it is possible to form such a \\"magic triangle\\" using any three distinct trees from the forest, and if possible, find the maximum possible perimeter of the triangle. The first line contains a single integer n (3 ≤ n ≤ 10^5) — the number of trees in the forest. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the trees. Output a single integer — the maximum possible perimeter of a \\"magic triangle\\" that can be formed, or -1 if no valid triangle can be formed. Example: Input: 5 1 2 2 4 3 Output: 9 Explanation: The triangle with heights (2, 3, 4) has a valid perimeter of 9, which is the maximum possible in this case. The combinations (1, 2, 3), (1, 2, 4), and so on do not satisfy the triangle inequality.","solution":"def max_triangle_perimeter(n, h): Returns the maximum perimeter of a magic triangle, or -1 if no valid triangle can be formed. n: int, number of trees h: list of int, heights of the trees h.sort() for i in range(n-3, -1, -1): if h[i] + h[i+1] > h[i+2]: return h[i] + h[i+1] + h[i+2] return -1"},{"question":"You are given a sequence of n integers a1, a2, ..., an and a sequence of m queries q1, q2, ..., qm. Each query qi is characterized by three integers li, ri, and vi. For each query, you need to find the number of integers in the subarray from position li to ri (inclusive) that are greater than or equal to vi. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 200,000) — the number of elements in the sequence and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Each of the next m lines contains three integers li, ri, vi (1 ≤ li ≤ ri ≤ n, 1 ≤ vi ≤ 10^9) — representing a query. Print m lines. The i-th line should contain the result for the i-th query. Input: ``` 5 3 1 3 4 2 5 1 3 2 2 5 3 1 5 5 ``` Output: ``` 3 3 1 ``` Explanation: For the first query, the subarray is [1, 3, 4] and there are 3 elements (1, 3, and 4) that are greater than or equal to 2. For the second query, the subarray is [3, 4, 2, 5] and there are 3 elements (3, 4, and 5) that are greater than or equal to 3. For the third query, the subarray is [1, 3, 4, 2, 5] and there is 1 element (5) that is greater than or equal to 5.","solution":"def count_elements(arr, queries): Function to count elements in subarray [li, r] that are >= vi for each query. :param arr: List of integers representing the array :param queries: List of tuples (li, ri, vi) :return: List of counts for each query result = [] for (li, ri, vi) in queries: count = sum(1 for x in arr[li-1:ri] if x >= vi) result.append(count) return result def process_input(n, m, array, queries): Process input to get results for queries :param n: Number of elements in the array :param m: Number of queries :param array: List of integers representing the array :param queries: List of tuples (li, ri, vi) representing queries :return: List of results for each query results = count_elements(array, queries) return results"},{"question":"You are given a sequence of n integers a1, a2, ..., an. You can perform the following operation: 1. Choose any two adjacent elements in the sequence and remove them. The cost of this operation is the absolute difference between the two elements removed. Then insert into the sequence the result of summing the elements removed. Perform the above operation until only one number remains in the sequence. Compute the minimal total cost possible to achieve this. The first line contains an integer n (2 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ a_i ≤ 1000). Output the minimal total cost. Example: Input: 4 4 1 3 2 Output: 1","solution":"def minimal_total_cost(n, sequence): # Helper function to calculate the absolute difference def abs_diff(x, y): return abs(x - y) # Use a list to store the new sequence after each operation while len(sequence) > 1: min_cost = float(\'inf\') best_pair = (0, 0) # Find the pair with the minimal cost for i in range(len(sequence) - 1): cost = abs_diff(sequence[i], sequence[i + 1]) if cost < min_cost: min_cost = cost best_pair = (i, i + 1) # Remove the best pair and insert their sum i, j = best_pair new_val = sequence[i] + sequence[j] sequence = sequence[:i] + [new_val] + sequence[i+2:] return 0 # Since we minimize the operations cost to zero in each step"},{"question":"You are given an underground system of interconnected stations represented as a graph. Each station is represented by a unique integer, and each bi-directional connection between the stations is represented by a pair of integers indicating a direct path. A traveler starts their journey at one station and brings with them a list of desired stations they must visit in any order before their journey ends. Your task is to find the minimum distance the traveler must walk to visit all the desired stations starting from the given station. The input consists of: 1. The first line containing three space-separated integers: n (the total number of stations, where 1 ≤ n ≤ 500), m (the number of bi-directional paths, where 0 ≤ m ≤ 10^4), and k (the number of desired stations, where 1 ≤ k ≤ n). 2. The next m lines each containing two space-separated integers u and v indicating a direct path between stations u and v (1 ≤ u, v ≤ n). 3. The next line containing k space-separated integers representing the list of desired stations. 4. The last line containing a single integer s indicating the starting station. Output a single line with the minimum distance the traveler must walk to visit all the desired stations starting from the given station. Example: Input: ``` 5 6 3 1 2 2 3 3 4 4 5 5 1 3 5 1 5 4 1 ``` Output: ``` 5 ``` Explanation: - The traveler starts at station 1. - The desired stations to visit are 5, 1, and 4. - The traveler can take the path 1 -> 5 (distance 1), then 5 -> 4 (distance 1), resulting in a total minimum distance of 2.","solution":"from collections import deque, defaultdict import itertools def bfs_shortest_path(graph, start): Find the shortest path from start to all other nodes using BFS. distances = {start: 0} queue = deque([start]) while queue: node = queue.popleft() current_distance = distances[node] for neighbor in graph[node]: if neighbor not in distances: distances[neighbor] = current_distance + 1 queue.append(neighbor) return distances def find_minimum_distance(n, m, k, edges, desired_stations, start): # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Find shortest path from start to all desired stations start_distances = bfs_shortest_path(graph, start) # Find shortest paths between all pairs of desired stations all_stations = desired_stations.copy() all_stations.append(start) all_pair_distances = {} for station in all_stations: all_pair_distances[station] = bfs_shortest_path(graph, station) min_distance = float(\'inf\') # Calculate minimum distance to visit all desired stations for perm in itertools.permutations(desired_stations): current_distance = start_distances[perm[0]] for i in range(len(perm) - 1): current_distance += all_pair_distances[perm[i]][perm[i + 1]] min_distance = min(min_distance, current_distance) return min_distance"},{"question":"Nancy loves finding palindromes, but she wants to up the game. Rather than simply checking if a string is a palindrome, she wants to find out the maximum length of any palindrome that can be created by rearranging the characters of a given string. Given a string s, help Nancy find the length of the longest possible palindrome that can be obtained by rearranging the characters of the string. The first line contains an integer t (1 ≤ t ≤ 100), denoting the number of test cases. The following t lines each contain a string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. Print t integers, each denoting the maximum length of the longest possible palindrome for the corresponding test case. # Examples Input 3 abccccdd aabb abc Output 7 4 1 # Explanation In the first example, the input string \\"abccccdd\\" can be rearranged to form \\"dccaccd\\", which is a palindrome of length 7. In the second example, the input string \\"aabb\\" can be rearranged to form \\"abba\\" or \\"baab\\", which are palindromes of length 4. In the third example, the input string \\"abc\\" cannot be rearranged to form a palindrome longer than 1 character.","solution":"from collections import Counter def max_palindrome_length(s): Given a string s, this function returns the length of the longest palindrome that can be obtained by rearranging the characters of the string. count = Counter(s) length = 0 odd_count = False for count_value in count.values(): if count_value % 2 == 0: length += count_value else: length += count_value - 1 odd_count = True if odd_count: length += 1 return length def process_test_cases(t, test_cases): Given number of test cases t and a list of test cases consisting of strings, this function returns a list of integers where each integer denotes the length of the longest possible palindrome for the corresponding test case. results = [] for s in test_cases: results.append(max_palindrome_length(s)) return results"},{"question":"Given a string s consisting of lowercase alphabetic characters, you need to determine the length of the longest substring that contains no more than k distinct characters. A substring is a contiguous sequence of characters within the string s. Input: - The first line contains two integers, n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 26) — the length of the string s and the number k, respectively. - The second line contains a string s of length n. Output: - Print a single integer — the length of the longest substring of s that contains no more than k distinct characters. **Example:** Input: ``` 7 2 aabbccc ``` Output: ``` 5 ``` Explanation: For the input string \\"aabbccc\\" with k = 2, the longest substring that contains no more than 2 distinct characters is \\"aabb\\" or \\"bbccc\\", both of which have a length of 4. Hence, the output is 4.","solution":"def longest_substring_with_k_distinct_chars(n, k, s): Returns the length of the longest substring that contains no more than k distinct characters. :param n: int - the length of the given string. :param k: int - the maximum number of distinct characters allowed in the substring. :param s: str - the input string. :return: int - the length of the longest substring with no more than k distinct characters. from collections import defaultdict char_count = defaultdict(int) left = 0 max_length = 0 for right in range(n): char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a list of integers. The task is to divide this list into exactly two non-empty subsets such that the absolute difference of their sums is minimized. The input consists of a single integer n (2 ≤ n ≤ 20) — the number of integers in the list, followed by n integers a1, a2, ..., an (1 ≤ ai ≤ 100000). It is guaranteed that there is at least one way to partition the list into two non-empty subsets. The output should be a single integer — the minimum possible absolute difference of the sums of two subsets. Example: ``` Input: 4 1 2 3 4 Output: 0 ``` Explanation: One optimal way to partition is {1, 4} and {2, 3}, the sums are 5 and 5. The absolute difference is |5 - 5| = 0.","solution":"from itertools import combinations def min_difference_partition(n, nums): Returns the minimum possible absolute difference of the sums of two non-empty subsets. total_sum = sum(nums) min_diff = float(\'inf\') # Iterate over all subsets having at least one element but not all elements for i in range(1, n // 2 + 1): for subset in combinations(nums, i): subset_sum = sum(subset) other_sum = total_sum - subset_sum diff = abs(subset_sum - other_sum) min_diff = min(min_diff, diff) return min_diff"},{"question":"You are given a plain text composed of only lowercase English letters. We say that a subsequence of this text is identifiable if no two distinct positions (indices) of the same character are present in it. Your task is to find the length of the longest identifiable subsequence in the given text. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, in the text \\"abcabc\\", the subsequence \\"abc\\" is identifiable, but the subsequence \\"aabb\\" is not because there are two \'a\'s and two \'b\'s from different positions. # Input - The first line contains an integer n (1 leq n leq 2000), the length of the text. - The second line contains a string s of length n, consisting only of lowercase English letters. # Output - Print a single integer, the length of the longest identifiable subsequence. # Example Input ``` 6 abcabc ``` Output ``` 3 ``` Input ``` 8 abcdefgh ``` Output ``` 8 ``` # Hints 1. A simple strategy might involve identifying the number of distinct characters since each distinct character can only appear once in the identifiable subsequence. 2. Utilize Python\'s set data structure to find unique characters.","solution":"def longest_identifiable_subsequence_length(n, s): Returns the length of the longest identifiable subsequence. unique_characters = set(s) return len(unique_characters)"},{"question":"Pavel is organizing a water distribution system for N houses in his village. The houses are arranged in a circle. Each house has exactly one pipe that can deliver water directly to one other house. He wants to ensure that every house has water. Pavel can perform the following operation: redirect a pipe from one house to another house. He wants to know the minimum number of such operations required to make sure that every house can have access to water, starting from any house. The input contains one integer: N, the number of houses (2 ≤ N ≤ 10^9). Output one integer — the minimum number of operations needed to ensure that water can be distributed to all houses from any starting point.","solution":"def min_operations_to_distribute_water(N): Calculate the minimum number of operations needed to ensure that every house can have access to water, starting from any house. # In a circle of N houses with each house connected linearly like a ring, # we need to create a simple spanning tree that is not necessarily a cycle. # In this case we need to break the cycle by redirecting (N-1) pipes to ensure there are no cycles. return N - 1"},{"question":"Lina has a special sequence of integers and she wants to split the sequence into two non-empty subsequences such that all elements in the first subsequence are lesser than all elements in the second subsequence. Lina also wants to find the length of these two subsequences such that the difference in their lengths is minimized. If there are multiple solutions, any of them is acceptable. The first line of input contains a single integer n (2 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), which represent the sequence. Print \\"NO\\" if there is no possible way to split the sequence into the required subsequences. Otherwise, print \\"YES\\" followed by the lengths of the two subsequences. Example: Input: 6 9 3 7 6 8 5 Output: YES 3 3","solution":"def split_sequence(sequence): n = len(sequence) if n < 2: return \\"NO\\" sequence.sort() length1 = n // 2 length2 = n - length1 return f\\"YESn{length1} {length2}\\" # Example case: # print(split_sequence([9, 3, 7, 6, 8, 5])) # Expected Output: YESn3 3"},{"question":"Given a grid of size n × m filled with integers, your task is to find the largest sum of any rectangular region within this grid. A rectangular region is defined as any subgrid of size p × q where 1 ≤ p ≤ n and 1 ≤ q ≤ m. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the grid. Each of the next n lines contains m integers, where the j-th integer on the i-th line represents the value at cell (i, j) of the grid. The integers in the grid can be negative, zero, or positive, and their absolute value does not exceed 1000. Output a single integer — the largest sum of any rectangular region within the grid. # Example Input ``` 4 5 1 2 -1 4 5 -1 -2 3 5 -3 2 3 4 -2 -1 -5 -9 -1 2 4 ``` Output ``` 19 ``` Here, the rectangular region with the largest sum is: ``` 2 -1 4 5 3 5 -3 ``` The sum of elements in this region is 19.","solution":"def max_subgrid_sum(grid): Computes the largest sum of any rectangular region within the grid. :param grid: 2D list of integers representing the grid. :return: The largest sum of any rectangular region. n = len(grid) m = len(grid[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += grid[i][right] # Use Kadane\'s algorithm on temp array current_max = temp[0] global_max = temp[0] for j in range(1, n): current_max = max(temp[j], current_max + temp[j]) if current_max > global_max: global_max = current_max if global_max > max_sum: max_sum = global_max return max_sum def example_input(): Provides an example of input and parses it into a grid for testing. n, m = 4, 5 grid = [ [1, 2, -1, 4, 5], [-1, -2, 3, 5, -3], [2, 3, 4, -2, -1], [-5, -9, -1, 2, 4] ] return grid"},{"question":"In a small kingdom, there are several key cities connected by bidirectional roads, forming a network. The king wants to ensure that there are alternative routes between any two cities in the kingdom, so if one road is destroyed, the cities can still remain connected. Your task is to identify if the kingdom\'s road network is robust enough by checking for at least two distinct paths between any two cities. Formally, the kingdom\'s road network can be represented as a graph with n cities and m roads. The graph is considered robust if it remains connected even after removing any single road. This is described as the graph being 2-edge-connected. The first line of input contains two integers n and m, where n is the number of cities (nodes) and m is the number of roads (edges) (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2*10^5). Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a bidirectional road (edge) between cities u and v. No two cities have more than one road directly connecting them. Print \\"YES\\" if the road network is robust (2-edge-connected), otherwise print \\"NO\\". Example: Input: 5 5 1 2 2 3 3 4 4 5 5 1 Output: YES Input: 4 3 1 2 2 3 3 4 Output: NO","solution":"def is_2_edge_connected(n, m, edges): from collections import defaultdict import sys sys.setrecursionlimit(200000) if m < n: return \\"NO\\" graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) disc = [-1] * (n + 1) low = [-1] * (n + 1) parent = [-1] * (n + 1) time = 0 def dfs(u): nonlocal time disc[u] = low[u] = time time += 1 children = 0 for v in graph[u]: if disc[v] == -1: children += 1 parent[v] = u if not dfs(v): return False low[u] = min(low[u], low[v]) if parent[u] == -1 and children > 1: return False if parent[u] != -1 and low[v] > disc[u]: return False elif v != parent[u]: low[u] = min(low[u], disc[v]) return True if not dfs(1): return \\"NO\\" for i in range(1, n + 1): if disc[i] == -1: return \\"NO\\" return \\"YES\\""},{"question":"**Lily is playing a game with two piles of stones. Initially, the first pile contains a1 stones and the second pile contains a2 stones. It\'s Lily\'s turn to move, and she can do one of two types of moves: 1. Remove one stone from both piles. 2. Remove two stones from one pile. The game continues until Lily can\'t make any more moves. Lily wants to know the maximum number of moves she can make. Can you help her? The first and only line of input contains two integers a1 and a2 (0 ≤ a1, a2 ≤ 1000). Print a single integer — the maximum number of moves Lily can make. # Example Input: 5 3 Output: 4 Explanation: Lily can make the following moves: - Remove 2 stones from the first pile (changes from (5, 3) to (3, 3)). - Remove one stone from both piles (changes from (3, 3) to (2, 2)). - Remove one stone from both piles (changes from (2, 2) to (1, 1)). - Remove one stone from both piles (changes from (1, 1) to (0, 0)). She cannot make any more moves after reaching (0, 0).","solution":"def max_moves(a1, a2): Returns the maximum number of moves Lily can make given two piles of stones. moves = 0 while a1 > 0 and a2 > 0: if a1 > a2: # Remove 2 stones from a1 a1 -= 2 elif a2 > a1: # Remove 2 stones from a2 a2 -= 2 else: # Remove 1 stone from both piles a1 -= 1 a2 -= 1 moves += 1 if a1 > 0: moves += a1 // 2 if a2 > 0: moves += a2 // 2 return moves"},{"question":"You are given a binary string s of length n. You need to perform a series of operations to transform the string into a string that contains no consecutive \'1\'s. In one operation, you can choose any position in the string and flip the bit (changing a \'0\' to a \'1\' or a \'1\' to a \'0\'). Determine the minimum number of operations required to achieve the transformation. The first line contains a single integer n (1 le n le 1000) — the length of the binary string s. The second line contains a binary string s of length n. Print a single integer — the minimum number of operations required to transform the string into one without consecutive \'1\'s.","solution":"def min_operations_to_avoid_consecutive_ones(n, s): operations = 0 i = 1 while i < n: if s[i] == \'1\' and s[i-1] == \'1\': # Perform an operation (flip current \'1\' to \'0\') s = s[:i] + \'0\' + s[i+1:] operations += 1 i += 1 return operations"},{"question":"You are a programmer at a cybersecurity firm. You have been asked to write a function that detects anomalies in a stream of login attempts. Each login attempt is represented as a pair of integers `(user_id, login_time)`, where `user_id` is a unique identifier for the user, and `login_time` is a timestamp representing the attempt time in seconds since the epoch. There is an anomaly if a user has two or more login attempts within a given number of seconds `k`. Your task is to identify all users who have anomalies in their login attempts and report the IDs of those users. # Input - The first line contains two integers `n` and `k` (1 leq n leq 10^5 and 1 leq k leq 10^5) — the number of login attempts and the maximum allowed time between two login attempts to consider them suspicious, respectively. - The next `n` lines each contain two integers `user_id` and `login_time` (1 leq user_id leq 10^5, 1 leq login_time leq 10^9) — the details of each login attempt. # Output - Output the number of users with anomalies in their login attempts. - Output the ids of the users with anomalies in increasing order. # Example Input ``` 7 10 1 100 2 101 1 109 1 115 3 200 3 210 3 211 ``` Output ``` 2 1 3 ``` # Explanation In this example: - User `1` has login attempts at times 100, 109, and 115. The difference between 100 and 109 is 9 seconds, and between 109 and 115 is 6 seconds, both of which are less than `k = 10` seconds. - User `2` has only one login attempt, which is not suspicious. - User `3` has login attempts at times 200, 210, and 211. The difference between 200 and 210 is 10 seconds, and between 210 and 211 is 1 second, both of which are less than `k = 10` seconds. Therefore, users `1` and `3` have anomalies in their login attempts.","solution":"def detect_anomalies(n, k, login_attempts): from collections import defaultdict anomalies = defaultdict(list) for user_id, login_time in login_attempts: anomalies[user_id].append(login_time) anomalous_users = [] for user_id, times in anomalies.items(): times.sort() for i in range(1, len(times)): if times[i] - times[i - 1] <= k: anomalous_users.append(user_id) break anomalous_users.sort() return (len(anomalous_users), anomalous_users)"},{"question":"You are given a string consisting of lowercase English letters. Your task is to remove duplicate letters so that every letter appears once and only once. The result must be the lexicographically smallest among all possible results. The resulting string\'s letters must appear in the same relative order as the original string. First line contains a single integer t (1 ≤ t ≤ 10^5), the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 10^5). Output t lines, each containing the lexicographically smallest string possible for each test case. For example, for the input: 3 bcabc cbacdcbc abacb The output should be: abc acdb abc","solution":"def remove_duplicate_letters(s): Returns the lexicographically smallest string by removing duplicate letters from the string s. stack = [] seen = set() last_occurrence = {c: i for i, c in enumerate(s)} for i, char in enumerate(s): if char not in seen: while stack and char < stack[-1] and i < last_occurrence[stack[-1]]: seen.remove(stack.pop()) seen.add(char) stack.append(char) return \'\'.join(stack) def process_test_cases(t, test_cases): Process multiple test cases for the remove_duplicate_letters function results = [] for i in range(t): result = remove_duplicate_letters(test_cases[i]) results.append(result) return results"},{"question":"You are given a sequence of integers representing the heights of columns arranged in a line. You are allowed to remove some columns (possibly none) to make the heights of the remaining columns form a strictly increasing sequence. Your task is to determine the maximum number of columns that can remain after this operation. The first line of the input contains an integer n (1 leq n leq 10^5) — the number of columns. The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9) — the heights of the columns. Output a single integer — the maximum number of columns that can remain after removing some columns to form a strictly increasing sequence. # Example Input ``` 6 3 10 2 1 20 4 ``` Output ``` 3 ``` Explanation In this example, one of the possible ways to achieve a maximum strictly increasing sequence is by keeping the columns with heights 3, 10, and 20. Therefore, the maximum number of columns that can remain is 3.","solution":"def max_increasing_subsequence_length(columns): Returns the length of the longest strictly increasing subsequence from the given columns heights. import bisect # This will hold the end of the longest increasing subsequence at each length dp = [] for height in columns: pos = bisect.bisect_left(dp, height) if pos == len(dp): dp.append(height) else: dp[pos] = height return len(dp) # Example input columns = [3, 10, 2, 1, 20, 4] print(max_increasing_subsequence_length(columns)) # Output should be 3"},{"question":"You are given an array of integers representing the weights of different items and a single integer representing the weight limit of a bag. Your task is to determine whether it\'s possible to select a non-empty subset of these items such that the total weight does not exceed the weight limit. # Input Format - The first line contains two integers `n` and `W` (1 ≤ n ≤ 50, 1 ≤ W ≤ 1000) — the number of items and the weight limit of the bag, respectively. - The second line contains `n` integers `w1, w2, ..., wn` (1 ≤ wi ≤ 1000) — the weights of the items. # Output Format - Output \\"YES\\" if it\'s possible to select a non-empty subset of the items such that their total weight does not exceed `W`. Otherwise, output \\"NO\\". # Example Input ``` 4 10 2 3 8 5 ``` Output ``` YES ``` Explanation: In this example, the subset {2, 3, 5} has a total weight of 10, which is equal to the weight limit. Input ``` 3 5 6 7 8 ``` Output ``` NO ``` Explanation: In this example, there is no subset of the given items with a total weight that does not exceed 5. The smallest item weighs 6, which is greater than the weight limit.","solution":"def can_carry_subset(n, W, weights): Determines if it is possible to select a non-empty subset of the items such that their total weight does not exceed W. :param n: int, number of items :param W: int, weight limit of the bag :param weights: list of int, weights of the items :return: str, \\"YES\\" if such a subset exists, otherwise \\"NO\\" from itertools import combinations # Generate all possible non-empty subsets for i in range(1, n + 1): for subset in combinations(weights, i): if sum(subset) <= W: return \\"YES\\" return \\"NO\\""},{"question":"Alex is organizing a fair where he has set up `n` booths in a straight line. Each booth has a distinct position `pi` along with a type `ti`. Alex knows that certain types of booths are more popular and should be arranged in such a way that they are as close as possible to each other to maximize visitor satisfaction. Alex wants to minimize the largest distance between any two consecutive booths of the same type. If there are no booths of the same type more than once, the answer is 0 for that type. For each type of booth, help Alex determine the minimum of the maximum distances between consecutive booths of that type. The first line of input contains an integer `n` (1 ≤ n ≤ 100) — the number of booths. Each of the next `n` lines contains two integers `pi` (0 ≤ pi ≤ 1000) and `ti` (1 ≤ ti ≤ 100) — the position of the booth and its type. Output `k` lines — for each unique booth type `ti` in increasing order, print the minimum of the maximum distance between consecutive booths of that type. # Example Input ``` 6 10 1 20 2 30 1 40 2 50 1 60 3 ``` Output ``` 1: 20 2: 20 3: 0 ``` _Note: The unique types are 1, 2, and 3. For type 1, the positions are [10, 30, 50], and the maximum gap is 20. For type 2, the positions are [20, 40], and the maximum gap is 20. For type 3, there is only one booth, so the distance is 0._","solution":"def minimize_max_distance(n, booths): Determines the minimum of the maximum distances between consecutive booths of the same type. Parameters: n : int : number of booths booths : list of tuples : list containing (position, type) of each booth Returns: dict : dictionary containing types as keys and minimum of the maximum distances for each type as values from collections import defaultdict # Dictionary to store positions for each type type_positions = defaultdict(list) # Populate the dictionary with positions for pos, booth_type in booths: type_positions[booth_type].append(pos) # Result dictionary to store the minimum max distance for each type result = {} for t in sorted(type_positions.keys()): positions = sorted(type_positions[t]) if len(positions) == 1: max_distance = 0 else: max_distance = max(positions[i + 1] - positions[i] for i in range(len(positions) - 1)) result[t] = max_distance return result"},{"question":"Marina is a gardener who manages a garden with n unique plant species labeled from 1 to n. Each plant requires a specific amount of water daily for it to grow. Marina also has a limited supply of water cans, and each water can has a certain capacity. Marina\'s goal is to maximize the number of unique plant species she can water every day without exceeding the total capacity of her water cans. You are given an array `plants` where `plants[i]` represents the amount of water required for the i-th plant species. You are also given an array `cans` where `cans[j]` represents the capacity of the j-th water can. Marina must fill each water can completely and can only water plants such that the total water requirement does not exceed the combined capacity of the chosen cans. Marina wants to figure out the maximum number of unique plant species she can water daily under the given constraints. Write a function `max_plants_watering` that takes two lists `plants` and `cans`, and returns the maximum number of unique plant species Marina can water. # Function Signature ```python def max_plants_watering(plants: List[int], cans: List[int]) -> int: ``` # Input - `plants`: A list of integers where `plants[i]` (1 ≤ `plants[i]` ≤ 10^4) represents the amount of water required for the i-th plant species. - `cans`: A list of integers where `cans[j]` (1 ≤ `cans[j]` ≤ 10^4) represents the capacity of the j-th water can. # Output - An integer, representing the maximum number of unique plant species Marina can water daily. # Example **Example 1:** ```python plants = [2, 3, 5, 7] cans = [8, 3, 4] print(max_plants_watering(plants, cans)) # Output: 3 ``` In this case, Marina can use cans with capacities 8 and 3 to water plants that require 2, 3, and 5 liters of water respectively. **Example 2:** ```python plants = [4, 2, 1, 6] cans = [7, 4, 5] print(max_plants_watering(plants, cans)) # Output: 4 ``` In this case, Marina can use cans with capacities 7 and 5 to water plants that require 4, 2, 1, and 6 liters of water respectively.","solution":"from typing import List def max_plants_watering(plants: List[int], cans: List[int]) -> int: Returns the maximum number of unique plant species that can be watered daily without exceeding the total capacity of the water cans. plants.sort() cans.sort() plant_index = 0 can_index = 0 total_capacity = 0 max_plants = 0 while plant_index < len(plants) and can_index < len(cans): if plants[plant_index] + total_capacity <= cans[can_index]: total_capacity += plants[plant_index] max_plants += 1 plant_index += 1 else: total_capacity = 0 can_index += 1 return max_plants"},{"question":"Alice has recently taken a keen interest in sorting algorithms and their efficiencies. One day, while playing with her deck of uniquely numbered cards, she decided to sort them using a custom algorithm. Unfortunately, she got distracted and ended up with a shuffled deck again. Now, she has a shuffled sequence of cards and a desire to transform it back to a sorted sequence in ascending order using the least number of adjacent swaps. Each swap operation allows Alice to swap two cards that are next to each other in the sequence. She wonders what the minimum number of swaps required is to sort her deck. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of cards. - The second line contains `n` integers, the shuffled sequence of cards. Each card has a unique integer identifier between 1 and `n`. **Output:** - Print a single integer — the minimum number of adjacent swaps required to sort the cards in ascending order. **Example:** Input: ``` 5 5 4 3 2 1 ``` Output: ``` 10 ``` Explanation: The reversed sequence will require the maximum number of swaps, which is equal to the number of inversions in this list. Swap (5,4), (5,3), (5,2), (5,1), then swap (4,3), (4,2), (4,1), swap (3,2), (3,1), and finally swap (2,1) results into a sorted sequence [1, 2, 3, 4, 5] with 10 swaps.","solution":"def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all elements left to `i` in the left subarray # are greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right) // 2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def minimum_adjacent_swaps_to_sort(n, arr): temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n-1)"},{"question":"You are given a permutation of the first n natural numbers, p_1, p_2, ldots, p_n. For this permutation, you need to apply a series of swaps such that after all the swaps, the resulting permutation is lexicographically smallest. In one swap, you can choose any two adjacent elements of the permutation and swap them. Output the lexicographically smallest permutation that can be obtained after any number of such swaps. The input consists of multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. For each test case, the first line contains a single integer n (1 le n le 10000) — the number of elements in the permutation. The second line of each test case contains n integers p_1, p_2, ldots, p_n — the permutation of the first n natural numbers. It is guaranteed that the sum of n over all test cases does not exceed 10000. For each test case, print the lexicographically smallest permutation that can be obtained after any number of adjacent swaps. For example, for the input: ``` 2 5 3 1 4 5 2 4 4 3 2 1 ``` the output should be: ``` 1 2 3 4 5 1 2 3 4 ```","solution":"def lexicographically_smallest_permutation(t, test_cases): Given a number of test cases, returns the lexicographically smallest permutation for each test case. Parameters: t (int): the number of test cases test_cases (list of tuples): each tuple contains an integer n and a list p, representing the permutation of the first n natural numbers Returns: list of list of int: each list contains the lexicographically smallest permutation for the corresponding test case result = [] for n, permutation in test_cases: result.append(sorted(permutation)) return result"},{"question":"Given an array of integers, you need to find the shortest subarray that, when sorted, sorts the entire array. If the entire array is already sorted, the result should be an empty subarray. You should write a function to achieve this. Example Input: ``` [2, 6, 4, 8, 10, 9, 15] ``` Example Output: ``` [1, 5] ``` Explanation: If you sort the subarray from index 1 to 5 (0-based), the entire array becomes sorted: [2, 4, 6, 8, 9, 10, 15]. If the input array is already sorted: Example Input: ``` [1, 2, 3, 4, 5] ``` Example Output: ``` [] ``` Function Signature: ```python def find_unsorted_subarray(nums: List[int]) -> List[int]: ``` Constraints: - The length of the array will be between 1 and 10^5. - Each element in the array will be between -10^5 and 10^5.","solution":"from typing import List def find_unsorted_subarray(nums: List[int]) -> List[int]: Finds the shortest subarray that, when sorted, sorts the entire array. If the array is already sorted, returns an empty list. n = len(nums) if n <= 1: return [] left, right = 0, n - 1 while left < right and nums[left] <= nums[left + 1]: left += 1 while right > left and nums[right] >= nums[right - 1]: right -= 1 if left == n - 1: return [] sub_min = min(nums[left:right + 1]) sub_max = max(nums[left:right + 1]) while left > 0 and nums[left - 1] > sub_min: left -= 1 while right < n - 1 and nums[right + 1] < sub_max: right += 1 return [left, right]"},{"question":"Laura has a sequence of integers a_1, a_2, ldots, a_n of length n. She wants to partition this sequence into exactly two non-empty subsequences b and c such that: - Every element in the original sequence a appears in exactly one of the subsequences b or c. - The difference between the sum of elements in subsequence b and the sum of elements in subsequence c is minimized. For example, if the original sequence is a = [3, 1, 4, 2, 2], one possible way to partition it would be b = [3, 2] and c = [1, 4, 2], resulting in sums text{sum}(b) = 5 and text{sum}(c) = 7, and the absolute difference is |5 - 7| = 2. The input consists of multiple test cases. The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. The first line of each test case contains a single integer n (2 leq n leq 50) — the length of the sequence. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000) — the elements of the sequence. For each test case, output a single integer — the minimum possible absolute difference between the sum of elements in subsequence b and the sum of elements in subsequence c. In the first testcase of the sample series, for the sequence a = [3, 1, 4, 2, 2], one optimal way to partition is b = [2, 4] and c = [1, 2, 3] which results in sums text{sum}(b) = 6 and text{sum}(c) = 6, giving an absolute difference of |6 - 6| = 0.","solution":"def min_difference(t, test_cases): results = [] for case in test_cases: n, a = case total_sum = sum(a) dp = [False] * (total_sum // 2 + 1) dp[0] = True for num in a: for j in range(total_sum // 2, num - 1, -1): dp[j] = dp[j] or dp[j - num] for i in range(total_sum // 2, -1, -1): if dp[i]: min_diff = abs(total_sum - 2 * i) results.append(min_diff) break return results # Example usage t = 1 test_cases = [(5, [3, 1, 4, 2, 2])] print(min_difference(t, test_cases))"},{"question":"You are given a sequence of integers. The goal is to divide the sequence into exactly two non-empty subsequences such that the difference between the sums of these subsequences is minimized. Write a program that finds the minimum possible difference between the sums of the two non-empty subsequences. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The first line contains a single integer n (2 ≤ n ≤ 2000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (|ai| ≤ 1000) — the integers of the sequence. Print a single integer — the minimum possible difference. In the first example you can divide the sequence [1, 6] into two subsequences [1] and [6]. The difference between the sums is |1 - 6| = 5. The output is 5. In the second example you can divide the sequence [5, 10, 15] into two subsequences [5, 10] and [15]. The difference between the sums is |15 - 15| = 0. The output is 0.","solution":"def min_difference(arr): Returns the minimum possible difference between the sums of two non-empty subsequences of the array. total_sum = sum(arr) n = len(arr) half_sum = total_sum // 2 # Initialize the DP table with False dp = [False] * (half_sum + 1) dp[0] = True # Use dynamic programming to find the subset with sum closest to half_sum for num in arr: for j in range(half_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] closest_sum = 0 for i in range(half_sum, -1, -1): if dp[i]: closest_sum = i break return total_sum - 2 * closest_sum"},{"question":"Your task is to implement a function to aid Farmer Joe in organizing his farm harvest. Joe\'s farm produces three types of crops: wheat, corn, and barley. Each crop type has its own storage bin, represented by the integers 1, 2, and 3 respectively. Joe has recorded the weights of his harvested crops in kilograms and stored them in a list. Each crop type and its weight is represented as a tuple consisting of the crop type identifier (1 for wheat, 2 for corn, 3 for barley) and the weight. You need to write a program that reads the list of harvested crops and calculates the total weight for each crop type. The program should then print these totals in the order of wheat, corn, and barley. # Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of harvested crops. Each of the next n lines contains two integers type and weight (1 ≤ type ≤ 3, 1 ≤ weight ≤ 10^6) — the crop type identifier and the weight of the crop in kilograms. # Output Print three integers separated by spaces — the total weights of wheat, corn and barley, respectively. # Example Input ``` 5 1 500 2 300 3 400 1 200 3 100 ``` Output ``` 700 300 500 ``` In this example, there are five tuples representing the harvested crops. The total weight of wheat (type 1) is 500 + 200 = 700 kg. The total weight of corn (type 2) is 300 kg, and the total weight of barley (type 3) is 400 + 100 = 500 kg. The program should print these totals in the order: 700 300 500.","solution":"def calculate_total_weights(harvest_data): Calculate the total weights for each crop type. Args: harvest_data (list of tuples): A list of tuples where each tuple contains two integers, the type of crop (1 for wheat, 2 for corn, 3 for barley) and the weight of the crop in kg. Returns: tuple: A tuple with three integers representing the total weights of wheat, corn, and barley. # Initialize totals for wheat, corn, and barley wheat_total = 0 corn_total = 0 barley_total = 0 # Iterate over the harvested data to calculate totals for crop_type, weight in harvest_data: if crop_type == 1: wheat_total += weight elif crop_type == 2: corn_total += weight elif crop_type == 3: barley_total += weight return (wheat_total, corn_total, barley_total) # Example usage: # harvest_data = [(1, 500), (2, 300), (3, 400), (1, 200), (3, 100)] # print(calculate_total_weights(harvest_data)) # Output: (700, 300, 500)"},{"question":"Given a 2D grid of size n x m, where each cell contains an integer representing the elevation of that cell. You are currently standing on the top-left cell (0, 0) and your goal is to reach the bottom-right cell (n-1, m-1). You can move up, down, left, or right. However, movement between two adjacent cells takes effort equal to the absolute difference in their elevations. You want to find the minimum effort required to reach from the top-left cell to the bottom-right cell. Write a function to compute this minimum effort. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the grid. - The next n lines contain m integers each, representing the elevation grid. The elevation of any cell is guaranteed to be between 1 and 10^6. Output: - Print a single integer, the minimum effort required to reach the bottom-right cell from the top-left cell. Example: ``` Input: 3 3 1 2 2 3 8 2 5 3 5 Output: 2 ``` Explanation: One of the possible paths achieving minimal effort: - (0, 0) -> (0, 1): effort = |1 - 2| = 1 - (0, 1) -> (1, 1): effort = |2 - 8| = 6 - (1, 1) -> (1, 2): effort = |8 - 2| = 6 - (1, 2) -> (2, 2): effort = |2 - 5| = 3 - The largest effort in this path is 6. However, using the following path yields a smaller largest effort: - (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) - The efforts are 1, 0, 3, 2, respectively, with the maximum effort being 2. Therefore, the answer is 2.","solution":"import heapq def minimumEffortPath(grid): n, m = len(grid), len(grid[0]) def is_valid(x, y): return 0 <= x < n and 0 <= y < m directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] pq = [(0, 0, 0)] # (effort, x, y) efforts = [[float(\'inf\')] * m for _ in range(n)] efforts[0][0] = 0 while pq: current_effort, x, y = heapq.heappop(pq) if x == n - 1 and y == m - 1: return current_effort for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): next_effort = max(current_effort, abs(grid[nx][ny] - grid[x][y])) if next_effort < efforts[nx][ny]: efforts[nx][ny] = next_effort heapq.heappush(pq, (next_effort, nx, ny)) # Example usage: grid = [ [1, 2, 2], [3, 8, 2], [5, 3, 5] ] print(minimumEffortPath(grid)) # Output: 2"},{"question":"You are working on a new project that involves dealing with an array of integers. One of the operations you find yourself needing frequently is to find the smallest sum of `k` consecutive elements in an array of length `n`. Given the array and the value of `k`, you are asked to implement a function that computes this value efficiently. # Function Signature The function should be defined as: ```python def smallest_sum_k_consecutive_elements(arr: List[int], k: int) -> int: ``` # Input - `arr`: A list of `n` integers, where `1 ≤ n ≤ 10^6` and each integer `−10^9 ≤ arr[i] ≤ 10^9`. - `k`: An integer, where `1 ≤ k ≤ n`. # Output - Return an integer representing the smallest sum of `k` consecutive elements in the array. # Example ```python print(smallest_sum_k_consecutive_elements([1, 3, 2, 4, -1, -2, -3, 6, 1], 3)) # Output: -6 print(smallest_sum_k_consecutive_elements([4, 3, 2, 1, 5], 1)) # Output: 1 print(smallest_sum_k_consecutive_elements([4, 3, 2, 1, 5], 2)) # Output: 3 ``` # Constraints - Your function should run in O(n) time complexity. - Use the sliding window technique to solve the problem efficiently.","solution":"from typing import List def smallest_sum_k_consecutive_elements(arr: List[int], k: int) -> int: This function finds the smallest sum of `k` consecutive elements in the array `arr`. n = len(arr) if k > n: return None # Initial sum of first `k` elements current_sum = sum(arr[:k]) min_sum = current_sum # Sliding window technique to compute the sum of k consecutive elements for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum < min_sum: min_sum = current_sum return min_sum"},{"question":"Andrey and Boris are playing a game with a sequence of cards. The game involves a deck containing `n` cards, each card having a unique integer printed on it. Initially, the cards are placed in ascending order from left to right on a table. These two players make moves alternatively, starting with Andrey. In each move, a player selects either the leftmost or the rightmost card from the table and claims it. The goal of the players is to have the highest possible sum of card values at the end of the game. Both players play optimally. Determine the maximum sum of card values Andrey can achieve if he plays first. The first line contains a single integer `n` (1 ≤ n ≤ 100) — the number of cards. The second line contains `n` space-separated integers: `a1, a2, ..., an` (1 ≤ ai ≤ 1000) — the values of the cards in ascending order. Output a single integer — the maximum sum Andrey can achieve. # Example ``` Input: 4 1 3 5 7 Output: 10 Explanation: Andrey will pick card 7 first, then Boris will pick 1. Andrey will then pick 5, leaving 3 for Boris. Andrey\'s total is 7 + 3 = 10, while Boris\'s total is 1 + 5 = 6. ```","solution":"def maximum_sum_andrey_can_achieve(n, cards): dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = cards[i] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 dp[i][j] = max(cards[i] + min(dp[i + 1][j - 1] if (i + 1) <= (j - 1) else 0, dp[i + 2][j] if (i + 2) <= j else 0), cards[j] + min(dp[i][j - 2] if (i <= (j - 2)) else 0, dp[i + 1][j - 1] if (i + 1) <= (j - 1) else 0)) return dp[0][n-1]"},{"question":"Lin likes to collect rare stones. He has recently discovered an ancient cave that contains n kinds of stones, each of a distinct rarity represented by a positive integer. Lin wants to form a special sequence of stones. He can choose a stone with rarity x if and only if he has chosen a stone with rarity (x-1) previously. Lin\'s goal is to create the longest possible sequence starting from a stone with rarity 1. You are given an array of integers representing the rarity of each stone in the cave. Write a program that finds the length of the longest possible sequence starting with a stone of rarity 1. The first line of the input contains a single integer n (1 ≤ n ≤ 100), representing the number of stones. The second line contains n distinct integers r1, r2, ..., rn (1 ≤ ri ≤ 1000), representing the rarity of each stone. Output a single integer representing the length of the longest possible sequence starting with a stone of rarity 1. In the first sample test case, it is possible to collect the stones with rarities 1, 2, 3, 4 in that order. In the second sample test case, the longest sequence starting with a stone of rarity 1 is just the stone with rarity 1 itself. ```","solution":"def longest_sequence(stones): Given a list of stone rarities, determine the length of the longest sequence of stones starting at rarity 1 and increasing by 1 each time. # Creating a set of stone rarities for quick lookup. rarity_set = set(stones) # Initialize the current rarity we are checking for. current_rarity = 1 longest_sequence_length = 0 # Loop to find the longest sequence starting with rarity 1. while current_rarity in rarity_set: longest_sequence_length += 1 current_rarity += 1 return longest_sequence_length"},{"question":"Baristas at a coffee shop receive orders for drinks. Each order specifies the number of shots of espresso and the amount of milk in ounces. The baristas want to keep a log of the total amount of each ingredient used throughout the day. Write a program that reads the log of orders and calculates the total amount of espresso shots and the total amount of milk used. The first line contains an integer n (1 ≤ n ≤ 100), the number of orders received. The next n lines each contain two integers. The first integer e (1 ≤ e ≤ 10) is the number of espresso shots for that order, and the second integer m (1 ≤ m ≤ 50) is the amount of milk in ounces for that order. Print two integers. The first integer is the total number of espresso shots, and the second integer is the total amount of milk in ounces used. Example Input: 3 2 8 1 16 3 12 Output: 6 36 Explanation: The first order uses 2 shots of espresso and 8 ounces of milk. The second order uses 1 shot of espresso and 16 ounces of milk. The third order uses 3 shots of espresso and 12 ounces of milk. Summing these gives a total of 6 shots of espresso and 36 ounces of milk.","solution":"def calculate_totals(order_log): Calculate the total number of espresso shots and total amount of milk. Args: order_log: List of tuples, each containing (espresso shots, milk in ounces). Returns: A tuple containing the total number of espresso shots and total amount of milk. total_espresso = 0 total_milk = 0 for order in order_log: total_espresso += order[0] total_milk += order[1] return total_espresso, total_milk"},{"question":"You are given a list of n integers where each element represents the height of a fence post in a row. You want to convert this row of fence posts into a \\"sawtooth\\" pattern such that each block is either greater than both its neighbors or less than both its neighbors. Heights of the first and last posts do not need to follow this rule since they have only one neighbor. Given this constraint, you need to determine the minimum number of changes required to transform the given row of fence posts into a sawtooth pattern. The first line contains a single integer n (3 ≤ n ≤ 1000) — the number of fence posts. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the fence posts. Output a single integer — the minimum number of changes required. **Example** Input: 4 1 5 3 6 Output: 0 Input: 5 3 4 2 3 5 Output: 1 Explanation: In the first example, the heights already form a sawtooth pattern (1 < 5 > 3 < 6). In the second example, changing the second post\'s height from 4 to 1 makes it a sawtooth pattern (3 > 1 < 2 > 3 < 5). Hence, only one change is needed.","solution":"def min_changes_to_sawtooth(n, heights): changes_to_increase_pattern = 0 changes_to_decrease_pattern = 0 # Pattern: heights[1] < heights[2] > heights[3] < heights[4] ... for i in range(1, n-1, 2): if i-1 >= 0 and heights[i] <= heights[i-1]: changes_to_increase_pattern += 1 if i+1 < n and heights[i] <= heights[i+1]: changes_to_increase_pattern += 1 # Pattern: heights[1] > heights[2] < heights[3] > heights[4] ... for i in range(1, n-1, 2): if i-1 >= 0 and heights[i] >= heights[i-1]: changes_to_decrease_pattern += 1 if i+1 < n and heights[i] >= heights[i+1]: changes_to_decrease_pattern += 1 return min(changes_to_increase_pattern, changes_to_decrease_pattern)"},{"question":"Bob has discovered an ancient piece of text encrypted in a mysterious language. The text consists of a string of lowercase English letters. Here is the encryption rule: - Take a beautiful word (a word with unique characters only) and shift each character in the word forward in the alphabet by a fixed number of positions. For example, with a shift of 2, \\"abc\\" becomes \\"cde\\", \\"xyz\\" becomes \\"zab\\", and so on. - Afterward, all the shifted characters are concatenated to form the mysterious string. Bob needs your help to confirm if the mysterious string can be decrypted correctly. Write a program that determines if there\'s a beautiful word and a shift amount such that the beautiful word, when encrypted, matches the mysterious string. If such a combination exists, print \\"YES\\", otherwise print \\"NO\\". The first and only line of input contains a single string s (1 ≤ |s| ≤ 100) consisting of only lowercase English letters. Output \\"YES\\" if there\'s a beautiful word and a shift amount that decrypts to the given string. Otherwise, print \\"NO\\". Example: Input: cde Output: YES Input: zxz Output: NO","solution":"def can_be_decrypted(s): Determines if there\'s a beautiful word and a shift amount such that the beautiful word, when encrypted, matches the mysterious string. def is_beautiful(word): return len(set(word)) == len(word) n = len(s) for shift in range(26): decrypted_word = \'\'.join(chr(((ord(char) - ord(\'a\') - shift) % 26) + ord(\'a\')) for char in s) if is_beautiful(decrypted_word): return \\"YES\\" return \\"NO\\""},{"question":"Dream Team is tasked with creating a new feature for their productivity application to manage tasks using intervals. Each task is represented by a start and end time within a given day, and the goal is to find the maximum number of overlapping tasks at any point in the day. This would help the team understand peak times when the most tasks are active and plan accordingly. You are given n tasks where each task is defined by a pair of integers (start, end) indicating the start and end times (in minutes) from the start of the day (0 - 1440). The start time is inclusive, and the end time is exclusive, meaning a task that starts at time 100 and ends at time 200 is considered active from 100 minutes up to but not including 200 minutes. Write a program to find the maximum number of tasks that overlap at any point in time during the day. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of tasks. The next n lines each contain two integers start and end (0 ≤ start < end ≤ 1440) — the start and end times of a task. Output a single integer — the maximum number of tasks that overlap at any point in time. # Example Input: ``` 5 120 150 130 180 140 170 160 200 180 210 ``` Output: ``` 3 ``` Explanation: In this example, the maximum number of overlapping tasks occur at minute 160, where three tasks (130-180, 140-170, 160-200) overlap.","solution":"def max_overlapping_tasks(n, tasks): events = [] for start, end in tasks: events.append((start, 1)) events.append((end, -1)) events.sort() max_overlaps = 0 current_overlaps = 0 for event in events: current_overlaps += event[-1] max_overlaps = max(max_overlaps, current_overlaps) return max_overlaps # Example usage: # n = 5 # tasks = [(120, 150), (130, 180), (140, 170), (160, 200), (180, 210)] # print(max_overlapping_tasks(n, tasks)) # Output: 3"},{"question":"Alex has recently become interested in number theory, particularly in the concept of prime numbers. He came up with a new problem: for a given integer n, he wants to determine if it can be expressed as the sum of exactly three distinct prime numbers. He decides to write a program to help him figure this out. The first line of input contains a single integer n (1 leq n leq 10^6). If n can be expressed as the sum of exactly three distinct prime numbers, print \\"YES\\" and then print the three prime numbers in any order. If it cannot be done, print \\"NO\\". Example 1: Input: 30 Output: YES 2 3 25 Example 2: Input: 11 Output: NO Note: In the first example, 30 can be expressed as the sum of 2, 3, and 25 which are all prime numbers. In the second example, it\'s impossible to express 11 as the sum of three distinct prime numbers.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_three_primes_sum(n): primes = [i for i in range(2, n) if is_prime(i)] prime_set = set(primes) for i in range(len(primes)): for j in range(i + 1, len(primes)): remaining = n - primes[i] - primes[j] if remaining > primes[j] and remaining in prime_set: return \\"YES\\", primes[i], primes[j], remaining return \\"NO\\", def primes_sum_three(n): result = find_three_primes_sum(n) if result[0] == \\"NO\\": return \\"NO\\" return f\\"YESn{result[1]} {result[2]} {result[3]}\\""},{"question":"You are given two strings, `s1` and `s2`, each consisting of lowercase Latin letters only. You want to determine if one string can be transformed into the other by rearranging its letters. Two strings are called anagrams if one of them can be rearranged to form the other. Your task is to write a function that checks if `s1` and `s2` are anagrams. Input: The input consists of two lines. The first line contains the string `s1` (1 ≤ |s1| ≤ 1000), and the second line contains the string `s2` (1 ≤ |s2| ≤ 1000). Output: Print \\"YES\\" if `s1` and `s2` are anagrams, otherwise print \\"NO\\". Example: Input: ``` listen silent ``` Output: ``` YES ``` Input: ``` triangle integral ``` Output: ``` YES ``` Input: ``` apple pale ``` Output: ``` NO ```","solution":"def are_anagrams(s1, s2): Checks if two strings are anagrams. Args: s1 (str): First string. s2 (str): Second string. Returns: str: \\"YES\\" if the strings are anagrams, otherwise \\"NO\\". return \\"YES\\" if sorted(s1) == sorted(s2) else \\"NO\\""},{"question":"Given an array of integers, you are to find and output the length of the longest monotonically increasing subsequence (not necessarily contiguous) and a sequence itself. Your program should read an integer n (1 ≤ n ≤ 1000) followed by a list of n integers. Your task is to determine the length of the longest increasing subsequence and also return the subsequence itself. If there are multiple solutions, return any one of them. # Input The first line of input contains a single integer n (1 ≤ n ≤ 1000), the number of elements in the array. The second line contains n integers separated by a space a1, a2, ..., an (1 ≤ ai ≤ 10^5). # Output Print the length of the longest increasing subsequence on one line. Print the elements of the longest increasing subsequence on the next line. If there are multiple solutions, any will be accepted. # Example Input ``` 6 5 2 8 6 3 6 ``` Output ``` 3 5 6 6 ``` # Note In the example, the longest increasing subsequence is (5, 6, 6), and its length is 3. Another possible longest increasing subsequence (2, 3, 6) with the same length could also be a valid output.","solution":"def longest_increasing_subsequence(n, arr): Returns the length of the longest increasing subsequence and one such subsequence itself. :param n: Number of elements in the array :param arr: List of integers :return: (length of the LIS, one of the LIS subsequences) if n == 0: return 0, [] # dp will store our increasing subsequences dp = [1] * n prev_index = [-1] * n max_len = 0 max_end_idx = 0 # Build the dp array and keep track of previous indices for i in range(n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev_index[i] = j if dp[i] > max_len: max_len = dp[i] max_end_idx = i # Reconstruct the longest increasing subsequence lis = [] current_idx = max_end_idx while current_idx != -1: lis.append(arr[current_idx]) current_idx = prev_index[current_idx] lis.reverse() return max_len, lis"},{"question":"John has a string S, consisting of lowercase English letters. He wants to find out the most frequent character in the string and the number of times it appears. If there are multiple characters with the same maximum frequency, John is interested in the lexicographically smallest one among them. The first line of the input contains an integer n (1 ≤ n ≤ 1000), the length of the string S. The second line contains the string S itself (|S| = n). Print the lexicographically smallest character with the highest frequency, followed by the frequency count. # Example **Input** 6 aabbcc **Output** a 2 **Explanation** In this example, \'a\', \'b\', and \'c\' each appear 2 times. However, \'a\' is the lexicographically smallest character among them. Hence the output is \\"a 2\\".","solution":"def most_frequent_character(n, s): Returns the lexicographically smallest character with the highest frequency in the string s, followed by its frequency count. from collections import Counter freq = Counter(s) max_freq = max(freq.values()) most_freq_chars = [char for char, count in freq.items() if count == max_freq] result_char = min(most_freq_chars) return result_char, max_freq"},{"question":"You\'ve been hired to help a software development team optimize their data storage system. The storage system has a specific limitation: it can only store data blocks if the block size is a prime number. Given an integer `n`, you are tasked with determining the smallest number of prime-sized blocks that can be used to store exactly `n` units of data. A prime number is a number greater than 1 that has no divisors other than 1 and itself. For example, 2, 3, 5, 7, 11, and 13 are prime numbers. For instance, to store 10 units of data, you could use two blocks of size 5 (since 5 is a prime number), or you could use a single block of size 7 and another block of size 3. The first line of the input contains a single integer `n` (1 ≤ n ≤ 10^6) — the total amount of data to store. Output the minimum number of prime-sized blocks required to store exactly `n` units of data. If it is not possible, output `-1`. Your task is to write a function that will perform this calculation and produce the correct output. **Example:** ``` Input: 10 Output: 2 Explanation: 10 can be stored in two blocks of size 5 each (5 is a prime number). ``` In another example: ``` Input: 12 Output: 2 Explanation: 12 can be stored in two blocks: one block of size 11 and one block of size 1 (both are prime numbers). ``` However, for input like `n = 1`, the output should be `1` since 1 is a prime number.","solution":"def sieve_of_eratosthenes(max_num): Returns a list of primes up to max_num (inclusive) using the Sieve of Eratosthenes algorithm. is_prime = [True] * (max_num + 1) is_prime[0] = is_prime[1] = False for start in range(2, int(max_num**0.5) + 1): if is_prime[start]: for i in range(start*start, max_num + 1, start): is_prime[i] = False primes = [num for num, prime in enumerate(is_prime) if prime] return primes def min_prime_blocks(n): Returns the minimum number of prime-sized blocks required to store exactly n units of data. If it\'s not possible to store the data exactly with prime blocks, returns -1. if n == 1: return 1 primes = sieve_of_eratosthenes(n) dp = [float(\'inf\')] * (n + 1) dp[0] = 0 for i in range(1, n + 1): for prime in primes: if i >= prime: dp[i] = min(dp[i], dp[i - prime] + 1) else: break return dp[n] if dp[n] != float(\'inf\') else -1"},{"question":"Mike loves working with arrays and sequence problems. He recently encountered a new challenge that he named the \\"Sum of Differences\\" problem. The task is to find the sum of the absolute differences of adjacent elements in an array after performing a specific operation. Given an array `a` of length `n`, Mike can choose any subsequence of this array (including the empty subsequence) and remove all elements of this subsequence from the array. The goal is to then calculate the sum of the absolute differences between consecutive remaining elements in the array. Note that the array elements can be removed in such a manner that the subsequence is a nonempty proper subsequence, or it could also include removal of no elements at all. For example, for the array [3, 1, 4, 1, 5], Mike can choose to remove the subsequence [1, 1], resulting in the array [3, 4, 5]. The sum of absolute differences is |4-3| + |5-4| = 1 + 1 = 2. Your task is to write a function to calculate the maximum possible sum of the absolute differences between consecutive elements of the array after removing a valid subsequence of elements. The first line contains a single integer `t` (1 ≤ t ≤ 10^3) — the number of test cases. Each test case consists of two lines, the first line contains a positive integer `n` (1 ≤ n ≤ 10^5) — denoting the length of the array. The second line of each test case contains `n` integers `a_i` (1 ≤ a_i ≤ 10^9) — denoting the elements of the array. For each test case, print one integer — the maximum sum of the absolute differences of adjacent elements in the array after removing a valid subsequence. The input is guaranteed to be such that the maximum length for the sum of all arrays from all test cases combined does not exceed 10^6. **Example:** ``` Input: 3 5 3 1 4 1 5 4 1 2 3 4 3 10 20 30 Output: 4 3 20 ```","solution":"def max_sum_of_differences(t, test_cases): results = [] for case in test_cases: n, array = case if n < 2: results.append(0) continue sorted_array = sorted(array) max_diff_sum = sum(abs(sorted_array[i+1] - sorted_array[i]) for i in range(n-1)) results.append(max_diff_sum) return results"},{"question":"Matilda runs a library, and she is a big fan of organizing books. She has a bookshelf that can hold n books, and each book has a certain genre and unique width. Matilda wishes to organize the books on the shelf such that all books of the same genre are adjacent, and the total width occupied by any genre should not exceed the width of the bookshelf. She has a list of books with their widths and genres. The genres are represented as integers from 1 to m, and the bookshelf has a maximum width capacity W. Determine the maximum number of books Matilda can place on the bookshelf while satisfying the given conditions. The first line contains three integers n, m, and W (1 ≤ n ≤ 10,000, 1 ≤ m ≤ 10, 1 ≤ W ≤ 10,000) — the number of books, the number of different genres, and the width of the bookshelf, respectively. The following n lines each contain two integers wi and gi (1 ≤ wi ≤ 1,000, 1 ≤ gi ≤ m), where wi is the width of the i-th book, and gi is the genre of the i-th book. Print a single integer — the maximum number of books that can be placed on the shelf. # Example Input: ``` 5 3 10 2 1 3 2 4 1 5 3 1 2 ``` Output: ``` 4 ``` Explanation: Matilda can choose books [2 1] (width=2), [4 1] (width=4), [3 2] (width=3), and [1 2] (width=1), filling a total width of 2+4+3+1=10. So, she can place 4 books on the shelf while ensuring each genre\'s books stay together.","solution":"def max_books_on_shelf(n, m, W, books): from collections import defaultdict # Group books by genre and sort each group by width genre_dict = defaultdict(list) for width, genre in books: genre_dict[genre].append(width) for genre in genre_dict: genre_dict[genre].sort() # Dynamic programming array to store max books can be placed upto width j dp = [0] * (W + 1) # Loop through each genre for genre in genre_dict: genre_books = genre_dict[genre] len_genre_books = len(genre_books) # We use rolling dp to avoid recomputing states for j in range(W, -1, -1): current_width = 0 for k in range(len_genre_books): current_width += genre_books[k] if current_width > j: break dp[j] = max(dp[j], dp[j - current_width] + k + 1) return max(dp) # Parsing the input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) W = int(data[2]) books = [] for i in range(n): width = int(data[3 + 2 * i]) genre = int(data[4 + 2 * i]) books.append((width, genre)) print(max_books_on_shelf(n, m, W, books))"},{"question":"You are given an array a of length n, consisting of distinct integers. You need to perform several operations to sort the array in non-decreasing order. In a single operation, you are allowed to select any element from the array and move it to the beginning of the array. Determine the minimum number of such operations required to sort the array. The first line of input contains a single integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n distinct integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. Print a single integer — the minimum number of operations required to sort the array in non-decreasing order. In the first example, three operations are sufficient: 1. Move the element with value 2 to the beginning: [2, 4, 3, 5, 1]. 2. Move the element with value 3 to the beginning: [3, 2, 4, 5, 1]. 3. Move the element with value 1 to the beginning: [1, 3, 2, 4, 5]. In the second example, no operations are required since the array is already sorted. In the third example, one operation is sufficient: 1. Move the element with value 1 to the beginning: [1, 3, 2].","solution":"def min_operations_to_sort(n, a): Determine the minimum number of operations required to sort the array in non-decreasing order by moving elements to the beginning. :param n: int - the number of elements in the array. :param a: list of int - the array of distinct integers. :return: int - the minimum number of operations. max_sorted_len = 1 current_len = 1 for i in range(1, n): if a[i] > a[i - 1]: current_len += 1 else: if current_len > max_sorted_len: max_sorted_len = current_len current_len = 1 max_sorted_len = max(current_len, max_sorted_len) return n - max_sorted_len"},{"question":"The Bytelandian Treasury Department has decided to issue new currency coins. Each coin has a positive integer value. To ensure efficient transaction processes, they need to implement a system to compute the minimum number of coins required to make a given amount. This is essential for facilitating change-making in daily transactions. You are given a list of coin denominations and a target amount. Write a program to find the minimum number of coins that add up to the given amount. If it is not possible to make the amount with the given denominations, return -1. The first line contains an integer n (1 ≤ n ≤ 100) — the number of different coin denominations. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10000) — the coin denominations. The third line contains an integer x (1 ≤ x ≤ 100000) — the target amount. Output the minimum number of coins required to make the amount x. If it is not possible, output -1. Example: Input: 3 1 2 5 11 Output: 3 Explanation: 11 can be made with three coins: 5 + 5 + 1.","solution":"def min_coins(denominations, amount): Returns the minimum number of coins required to make up a given amount using the provided denominations. If it\'s not possible to make the amount, returns -1. max_amount = amount + 1 dp = [max_amount] * (amount + 1) dp[0] = 0 for coin in denominations: for i in range(coin, amount + 1): dp[i] = min(dp[i], dp[i - coin] + 1) return dp[amount] if dp[amount] != max_amount else -1 # Example usage: # denominations = [1, 2, 5] # amount = 11 # print(min_coins(denominations, amount)) # Output: 3"},{"question":"Anna is organizing a housewarming party and she has decided to make a surprise box for each of her n friends who are attending. A surprise box can contain either sweets, toys, or a combination of both. Anna goes to a store that sells sweets and toys in packs. Each pack has k items in it. Anna wants to make sure that each surprise box has exactly the same number of items and each surprise box contains either only sweets, only toys, or both. Given that Anna decided the number of sweets, toys, and the combination of both she wants in each surprise box, find the minimum total number of packs she needs to buy to prepare all the surprise boxes for her friends. The first line contains four integers n, k, s, t (1 ≤ n, k, s, t ≤ 10^8), where n is the number of friends, k is the number of items in each pack, s is the number of sweets in each combination box, and t is the number of toys in each combination box. Print one number - the minimum total number of packs of sweets and toys Anna needs to buy. Example: Input: ``` 3 10 3 5 ``` Output: ``` 3 ``` In this example, Anna needs to prepare 3 surprise boxes. Each box should have either 3 sweets or 5 toys or a combination of 3 sweets and 5 toys. She can buy one pack of 10 sweets and one pack of 10 toys to meet the requirement. Explanation for the example: 1. If Anna decides to give only sweets in the boxes, she needs to give 3 sweets per box, totaling 9 sweets for 3 boxes. As each pack has 10 sweets, she needs to buy only one pack of sweets. 2. If Anna decides to give only toys in the boxes, she needs to give 5 toys per box, totaling 15 toys for 3 boxes. As each pack has 10 toys, she needs to buy two packs of toys. So the minimum packs Anna needs to buy is 3 (2 packs of toys and 1 pack of sweets).","solution":"def minimum_packs(n, k, s, t): total_sweets_needed = n * s total_toys_needed = n * t # Calculate the number of packs for sweets and toys packs_sweets = (total_sweets_needed + k - 1) // k # Ceiling division packs_toys = (total_toys_needed + k - 1) // k # Ceiling division return packs_sweets + packs_toys"},{"question":"You are given a permutation of integers from 1 to n. A permutation is an array where each integer from 1 to n appears exactly once. Your task is to calculate the number of inversions in the permutation. An inversion is a pair of indices (i, j) such that i < j and a[i] > a[j]. For example, if the permutation is [3, 1, 2], there are two inversions: (1, 2) and (1, 3). The first line contains a single integer n (1 ≤ n ≤ 100,000) — the size of the permutation. The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the permutation. Output a single integer — the number of inversions in the permutation. For example, given the input: ``` 3 3 1 2 ``` The output should be: ``` 2 ``` Explanation: - The inversion pairs are (1, 2) since 3 > 1 and (1, 3) since 3 > 2. Hence, there are 2 inversions.","solution":"def count_inversions(n, permutation): Counts the number of inversions in the permutation. Args: n (int): The size of the permutation. permutation (list): The permutation of integers from 1 to n. Returns: int: The number of inversions in the permutation. def merge_sort(arr): if len(arr) <= 1: return arr, 0 mid = len(arr) // 2 left, left_inv = merge_sort(arr[:mid]) right, right_inv = merge_sort(arr[mid:]) merged, split_inv = merge(left, right) total_inv = left_inv + right_inv + split_inv return merged, total_inv def merge(left, right): merged = [] inv_count = 0 i, j = 0, 0 while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 inv_count += len(left) - i merged.extend(left[i:]) merged.extend(right[j:]) return merged, inv_count _, inversions = merge_sort(permutation) return inversions"},{"question":"You are given an array of n integers, and an integer k. Your task is to determine if it\'s possible to partition the array into exactly k non-empty subarrays such that the sum of elements in each subarray is less than or equal to a given integer x. The first line contains three integers n, k, and x (1 ≤ n ≤ 1000, 1 ≤ k ≤ n, 1 ≤ x ≤ 10^9) — the number of elements in the array, the number of subarrays, and the maximum allowable sum for each subarray. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Print \\"YES\\" if it\'s possible to partition the array into exactly k subarrays with the mentioned condition, and \\"NO\\" otherwise. For example, given the input: ``` 6 3 6 1 2 3 4 1 1 ``` The output should be \\"YES\\", because we can partition the array as: ``` [1, 2, 3], [4, 1], [1] ``` with sums 6, 5, and 1, all of which are less than or equal to 6. For another input: ``` 6 2 5 1 2 3 4 1 1 ``` the output should be \\"NO\\", because partitioning into exactly 2 subarrays such that each sum is ≤ 5 is not possible.","solution":"def can_partition_into_k_subarrays(arr, n, k, x): Determines if it\'s possible to partition the array into exactly k non-empty subarrays such that the sum of elements in each subarray is less than or equal to x. Parameters: arr (list): The list of integers. n (int): The number of elements in the list. k (int): The number of required subarrays. x (int): The maximum allowable sum for each subarray. Returns: str: \\"YES\\" if possible to partition, otherwise \\"NO\\". count = 1 current_sum = 0 for num in arr: if num > x: return \\"NO\\" if current_sum + num > x: count += 1 current_sum = num if count > k: return \\"NO\\" else: current_sum += num return \\"YES\\" if count <= k else \\"NO\\""},{"question":"Christina is organizing a garage sale, and she wants to group the items by their price ranges on different tables. There are n tables and each table can hold a certain number of items. Christina has collected various items, each with a specific price ranging from 1 to 100 dollars. She has decided to divide the items into three price categories: - Low price: 1 to 25 dollars - Medium price: 26 to 60 dollars - High price: 61 to 100 dollars Christina wants to distribute the items in such a way that: - All items of the same price category are placed together on the same table. - The number of items on any table should not exceed its capacity. - Each table can hold items of one or more categories but all in one block without mixing categories. Help Christina determine if it is possible to place all the items on the tables following these conditions. The first line contains an integer n (1 ≤ n ≤ 100) — the number of tables. The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 100) — the capacities of the tables. The third line contains an integer m (1 ≤ m ≤ 100) — the number of items. The fourth line contains m integers p1, p2, ..., pm (1 ≤ pi ≤ 100) — the prices of the items. Print \\"YES\\" (without the quotes) if it is possible to place all the items on the tables following the given conditions. Otherwise, print \\"NO\\" (without the quotes). **Example:** Input: ``` 3 10 8 4 12 5 7 14 62 28 30 56 76 85 24 22 19 ``` Output: ``` YES ``` Explanation: The tables can be arranged as follows: - Table 1 (capacity 10): 5, 7, 14, 24, 22, 19 (Low price category) - Table 2 (capacity 8): 28, 30, 56 (Medium price category) - Table 3 (capacity 4): 62, 76, 85 (High price category)","solution":"def can_place_items_on_tables(n, capacities, m, prices): low_price_count = len([price for price in prices if 1 <= price <= 25]) medium_price_count = len([price for price in prices if 26 <= price <= 60]) high_price_count = len([price for price in prices if 61 <= price <= 100]) capacities.sort(reverse=True) def can_fit_items(item_count): for i in range(n): if capacities[i] >= item_count: return i return -1 for count in [low_price_count, medium_price_count, high_price_count]: if count == 0: continue table_index = can_fit_items(count) if table_index == -1: return \\"NO\\" capacities[table_index] -= count return \\"YES\\""},{"question":"You are working in a factory that produces metal rods. Each rod is characterized by its length in meters, and you need to group the rods into bundles. To ensure stability during transportation, each bundle must contain rods with the same length. Your task is to calculate the minimum number of bundles needed to group all the rods. The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 le n le 100) — the number of rods in the factory. The second line of each test case contains n integers l_1, l_2, dots, l_n (1 le l_i le 100) — the lengths of the rods. For each test case, print the answer — the minimum number of bundles needed for the rods in that test case. # Example Input: ``` 2 5 1 2 2 3 1 4 4 4 4 4 ``` # Example Output: ``` 3 1 ```","solution":"def min_bundles(test_cases): results = [] for lengths in test_cases: unique_lengths = set(lengths) results.append(len(unique_lengths)) return results # Helper function to parse input def parse_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) lengths = list(map(int, lines[index + 1].strip().split())) test_cases.append(lengths) index += 2 return test_cases # Main function to solve the problem def solve(input_str): test_cases = parse_input(input_str) results = min_bundles(test_cases) return \\"n\\".join(map(str, results))"},{"question":"You\'ve been given two binary strings, s1 and s2. Your task is to find two non-empty substrings, a substring from s1 and a substring from s2 such that the binary representation of the integers they represent have the longest common prefix. Note that, the binary representation of an integer does not have leading zeros, unless the integer is zero itself. The first line contains two binary strings s1 and s2, each consisting of only \'0\' and \'1\'. The lengths of the strings do not exceed 1000 characters. Print two integers, indicating the starting positions of the substrings in s1 and s2, respectively, that represent the integers with the longest common binary prefix. Both indices start from 1. If there are multiple answers, print any one of them. **Example:** Input: ``` 110101 101110 ``` Output: ``` 1 1 ``` In this example, the substrings \\"110\\" from s1 and \\"101\\" from s2 have the longest common binary prefix \\"1\\". Another valid output could be indices corresponding to other substrings with the same longest common prefix.","solution":"def longest_common_prefix_index(s1, s2): Finds the starting positions of the substrings in s1 and s2 that have the longest common binary prefix. max_len = 0 result = (1, 1) # Default result assuming 1-based index for i in range(len(s1)): for j in range(len(s2)): # Calculate the longest common prefix between s1[i:] and s2[j:] common_prefix_length = 0 while (i + common_prefix_length < len(s1) and j + common_prefix_length < len(s2) and s1[i + common_prefix_length] == s2[j + common_prefix_length]): common_prefix_length += 1 # Update the result if a longer common prefix is found if common_prefix_length > max_len: max_len = common_prefix_length result = (i + 1, j + 1) # Convert to 1-based index return result"},{"question":"Create a class Deck that simulates a deck of cards. Each card in the deck should have two properties: a suit (Hearts, Diamonds, Clubs, Spades) and a rank (2 through 10, Jack, Queen, King, Ace). The Deck class should support the following methods: 1. `shuffle()`: Randomly shuffle the deck of cards. 2. `draw_card()`: Remove and return the top card of the deck. If the deck is empty, return None. 3. `reset()`: Reset the deck to the original 52 cards and shuffle it. 4. `remaining_cards()`: Return the number of cards still in the deck. Write a Python class Deck and demonstrate the implementation of these methods. Example usage: ```python deck = Deck() print(deck.remaining_cards()) # Output: 52, since the deck starts with 52 cards card = deck.draw_card() print(card) # Output: A card object, e.g., \'Ace of Spades\' print(deck.remaining_cards()) # Output: 51, since one card was drawn deck.shuffle() deck.reset() print(deck.remaining_cards()) # Output: 52, after reset ``` Assume standard libraries are available for random shuffling.","solution":"import random class Card: def __init__(self, suit, rank): self.suit = suit self.rank = rank def __repr__(self): return f\\"{self.rank} of {self.suit}\\" class Deck: suits = [\'Hearts\', \'Diamonds\', \'Clubs\', \'Spades\'] ranks = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'Jack\', \'Queen\', \'King\', \'Ace\'] def __init__(self): self.reset() def shuffle(self): random.shuffle(self.cards) def draw_card(self): return self.cards.pop() if self.cards else None def reset(self): self.cards = [Card(suit, rank) for suit in self.suits for rank in self.ranks] self.shuffle() def remaining_cards(self): return len(self.cards)"},{"question":"Lana is a data analyst who works at a large tech company. She often needs to parse and analyze log files that contain records of user activities. Each log entry includes a timestamp and a user ID. She wants to calculate the number of unique users that were active within a specific time interval. Given a list of log entries, each with a timestamp in seconds and a user ID, followed by a list of queries, each with a start time and an end time, help Lana determine the number of unique users active within each specified time interval. The first line of input contains two integers `n` and `q` (1 ≤ n, q ≤ 2×10^5), the number of log entries and the number of queries. The next `n` lines each contain two integers `t` and `u` (1 ≤ t ≤ 10^9, 1 ≤ u ≤ 10^6), representing a timestamp and a user ID. Each of the next `q` lines contains two integers `start` and `end` (1 ≤ start ≤ end ≤ 10^9), representing the start time and end time of a query. For each query, print the number of unique users active within the specified time interval [start, end]. **Example input:** ``` 5 3 1 10 2 20 3 10 5 30 10 40 1 5 2 10 8 12 ``` **Example output:** ``` 3 4 1 ``` Explanation: For the first query, users 10, 20, and 30 were active between time 1 and 5. For the second query, users 10 (active at times 1 and 3), 20 (active at time 2), 30 (active at time 5), and 40 (active at time 10) were active between time 2 and 10. For the third query, only user 40 was active between time 8 and 12.","solution":"def unique_users_in_time_intervals(log_entries, queries): user_log_dict = {} for t, u in log_entries: if t not in user_log_dict: user_log_dict[t] = set() user_log_dict[t].add(u) timestamps_sorted = sorted(user_log_dict.keys()) def get_users_count(start, end): users = set() for t in timestamps_sorted: if start <= t <= end: users.update(user_log_dict[t]) if t > end: break return len(users) results = [] for start, end in queries: results.append(get_users_count(start, end)) return results"},{"question":"John is a collector of antique stamps and employs a smart strategy to track the value of his collection over time. Each day he either adds a new stamp to his collection, which increases its total value, or he receives inquiries from potential buyers who want to know the value of the collection on specific days. John\'s collection can be represented as a list where each entry records the value of a new stamp added on a specific day. However, John\'s collection has become large and unwieldy, making it difficult to quickly respond to buyer inquiries. To streamline this, John has asked for your help in processing daily updates and answering value queries efficiently. The structure of the input data for processing is as follows: - The first line contains an integer t (1 leq t leq 10) — the number of test cases. - For each test case: - The first line contains two integers n and q (1 leq n, q leq 10^5) — the number of days with stamp additions and the number of queries, respectively. - The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^4) — the value of the stamp added on each corresponding day. - Each of the next q lines contains a single integer d (1 leq d leq n) — representing a query for the total value of the collection at the end of day d. For each query, output a single integer which is the total value of the collection at the end of the specified day. Example Input: ``` 1 5 3 4 2 8 5 7 3 5 1 ``` Output: ``` 14 26 4 ``` Explanation For the given test case: - At the end of day 3, the collection\'s value is 4 + 2 + 8 = 14. - At the end of day 5, the collection\'s value is 4 + 2 + 8 + 5 + 7 = 26. - At the end of day 1, the collection\'s value is 4. John would like to see the cumulative value of his collection quickly as it grows day by day in response to these queries. Your task is to efficiently calculate and return these cumulative values based on the given inputs.","solution":"def process_queries(t, cases): results = [] for case in cases: n, q = case[\'n\'], case[\'q\'] stamps = case[\'stamps\'] queries = case[\'queries\'] # Compute prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + stamps[i - 1] # Answer queries for d in queries: results.append(prefix_sums[d]) return results def parse_input(input_data): Parses the input data in the format described in the problem statement. lines = input_data.strip().split(\\"n\\") t = int(lines[0]) index = 1 cases = [] for _ in range(t): n, q = map(int, lines[index].split()) index += 1 stamps = list(map(int, lines[index].split())) index += 1 queries = [] for _ in range(q): queries.append(int(lines[index])) index += 1 cases.append({\'n\': n, \'q\': q, \'stamps\': stamps, \'queries\': queries}) return t, cases"},{"question":"You are given an integer array **profit** of length **n** and an integer **k**. The **profit[i]** represents the profit of completing the **i-th** task. You can complete at most **k** tasks in total. Each task can be performed on a different day, and you can complete at most one task each day. Your task is to determine the maximum total profit you can earn by completing up to **k** tasks. # Input The first line contains an integer **t** (1 le t le 1000) — the number of test cases. The first line of each test case contains two integers **n** (1 le n le 100) and **k** (1 le k le n). The second line of each test case contains **n** integers **profit[1], profit[2], ..., profit[n]** (1 le profit[i] le 10^9). # Output For each test case, print one integer in a single line — the maximum total profit you can earn by completing up to **k** tasks. # Example Input ``` 3 5 2 1 5 3 2 4 3 1 2 8 7 4 2 9 1 5 4 ``` Output ``` 9 8 14 ``` # Note In the first test case, you can complete the tasks with profit 5 and 4 to get total profit 9. In the second test case, you can complete the task with profit 8 to get total profit 8. In the third test case, you can complete the tasks with profit 9 and 5 to get total profit 14.","solution":"def max_total_profit(t, test_cases): results = [] for test_case in test_cases: n, k, profit = test_case profit.sort(reverse=True) results.append(sum(profit[:k])) return results # Function to parse input and call the solution function def parse_and_solve(input_data): input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] line_index = 1 for _ in range(t): n, k = map(int, input_lines[line_index].split()) profit = list(map(int, input_lines[line_index + 1].split())) test_cases.append((n, k, profit)) line_index += 2 results = max_total_profit(t, test_cases) return results"},{"question":"In a magical kingdom, there are numerous magical stones, each identified by a unique integer between 1 and N. These stones are arranged in a single row from left to right and each stone has attached to it a unique magical symbol represented as a character. Each query involves selecting a consecutive subarray of these magical stones and determining the number of unique symbols within this subarray. The first line of the input contains two integers N (the number of magical stones) and Q (the number of queries). The second line contains a string of length N, where the i-th character denotes the symbol attached to the i-th stone. Each of the next Q lines contains two integers l and r (1 ≤ l ≤ r ≤ N) - representing the range of the subarray (1-based index). Output the number of unique symbols in the subarray [l, r] for each query. # Sample Input: ``` 7 3 abcbada 1 4 2 5 3 7 ``` # Sample Output: ``` 3 3 4 ```","solution":"def count_unique_symbols(n, q, symbols, queries): This function returns a list with the count of unique symbols for each query\'s subarray. :param n: int, the number of magical stones :param q: int, the number of queries :param symbols: str, the string representing the symbols attached to the stones :param queries: list of tuples, each containing two integers (l, r) representing the range of the subarray (1-based index) :return: list of integers, the number of unique symbols in each subarray for each query results = [] for l, r in queries: subarray = symbols[l-1:r] # convert to 0-based index unique_symbols = set(subarray) results.append(len(unique_symbols)) return results"},{"question":"You are given two strings, `s` and `t`, both consisting of lowercase Latin letters. Your task is to find the smallest window in string `s` that contains all the characters of string `t`. A window is defined as any contiguous segment of string `s`. If there is no such window, return an empty string. The first line contains the string `s` (1 ≤ |s| ≤ 10^5). The second line contains the string `t` (1 ≤ |t| ≤ 10^5). If there are multiple smallest windows, return the one that appears first in string `s`. Print the smallest window in string `s` that contains all characters of string `t`. If no such window exists, print an empty string. **Example:** Input: ``` ADOBECODEBANC ABC ``` Output: ``` BANC ``` Input: ``` A AA ``` Output: ``` ``` Input: ``` AB A ``` Output: ``` A ```","solution":"from collections import Counter, defaultdict def min_window(s, t): if not t or not s: return \\"\\" dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = defaultdict(int) min_length = float(\\"inf\\") ans = (None, None) while r < len(s): character = s[r] window_counts[character] += 1 if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 while l <= r and formed == required: character = s[l] if r - l + 1 < min_length: min_length = r - l + 1 ans = (l, r) window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] is None else s[ans[0]: ans[1] + 1]"},{"question":"Jason has recently joined a hiking club and is planning to go on a hiking trip with his friends. There are n distinct checkpoints along his hiking trail, numbered from 1 to n. Jason has a special device that records his position at each checkpoint, but the device sometimes malfunctions and only records the elevation gain or loss between consecutive checkpoints. Jason wants to reconstruct the original elevations for each checkpoint given the elevation differences between them. Your task is to help Jason by determining the possible elevations for each checkpoint if you are given the initial elevation at the first checkpoint. The first line contains an integer n (2 ≤ n ≤ 1000) which is the number of checkpoints on the trail. The second line contains n-1 integers, where the i-th integer represents the elevation difference (positive or negative) between the i-th checkpoint and the i+1-th checkpoint. The third line contains an integer h (1 ≤ h ≤ 10000) which is the initial elevation at the first checkpoint. Calculate and print the elevations for all checkpoints in order. If there are multiple possible elevations, print any one of them. Note that elevation at any checkpoint cannot be negative. Sample Input: ``` 5 2 -3 1 4 10 ``` Sample Output: ``` 10 12 9 10 14 ```","solution":"def reconstruct_elevations(n, differences, initial_elevation): Reconstructs and returns the elevations for each checkpoint given the elevation differences and initial elevation. Args: n (int): The number of checkpoints. differences (list of int): The elevation differences between consecutive checkpoints. initial_elevation (int): The elevation at the first checkpoint. Returns: list of int: The elevations at each checkpoint. # Initialize the list of elevations with the initial elevation. elevations = [initial_elevation] # Iterate through the differences to calculate subsequent elevations. for difference in differences: next_elevation = elevations[-1] + difference elevations.append(next_elevation) return elevations"},{"question":"Given a list of integers representing the heights of trees lined in a row, you like to climb these trees in a series such that the difference in heights between each consecutive tree you climb is the same. Your task is to determine the length of the longest possible series of climbs with this constant height difference. For example, given the heights [3, 6, 9, 12, 15], you can climb all these trees in sequence because the height difference between consecutive trees is always 3. Function Signature: int longest_climb_series(List[int] heights) Input: - `heights` (List[int]): A list of integers representing the heights of trees, where 1 ≤ len(heights) ≤ 10^5 and each height is no more than 10^9. Output: - Return an integer representing the length of the longest possible series of climbs with a constant height difference. Example: Input: heights = [3, 6, 9, 12, 15, 20, 25, 30] Output: 5 Explanation: - One possible sequence of climbs is [3, 6, 9, 12, 15] with a constant height difference of 3. Another possible sequence is [20, 25, 30] with a height difference of 5, but the longest one is of length 5.","solution":"from typing import List def longest_climb_series(heights: List[int]) -> int: if len(heights) <= 1: return len(heights) max_length = 1 current_length = 1 current_diff = heights[1] - heights[0] for i in range(1, len(heights) - 1): diff = heights[i + 1] - heights[i] if diff == current_diff: current_length += 1 else: current_diff = diff current_length = 1 max_length = max(max_length, current_length + 1) # Adding 1 to account for the starting element of the series return max_length"},{"question":"Sarah is exploring a vast network of caves where she encounters numerous treasure chests. Each chest has a certain weight and contains coins of various denominations. Due to the weight constraint, Sarah can only carry a limited maximum weight of chests. Sarah wants to maximize the number of coins she carries without exceeding the maximum weight she can carry. Given the details about the chests and Sarah\'s weight capacity, determine the maximum number of coins Sarah can carry. ```plaintext Input: The first line contains an integer n (1 ≤ n ≤ 100) — the number of treasure chests Sarah encounters. The next n lines each describe a chest with two integers w_i (1 ≤ w_i ≤ 1000) and c_i (0 ≤ c_i ≤ 1000) — the weight and the number of coins in the i-th chest. The last line contains an integer W (1 ≤ W ≤ 10000) — the maximum weight Sarah can carry. Output: Print a single integer — the maximum number of coins Sarah can carry without exceeding the maximum weight W. ``` **Example:** ```plaintext Input: 4 3 50 6 90 5 60 4 70 8 Output: 120 ``` **Explanation:** Here, Sarah can carry the chests with weights 3 and 4, which contain 50 and 70 coins respectively, for a total of 120 coins. Carrying any other combination would result in fewer coins or would exceed the weight limit.","solution":"def max_coins(n, chests, W): Determines the maximum number of coins Sarah can carry without exceeding the maximum weight. Parameters: n (int): Number of treasure chests chests (list of tuples): List where each tuple contains (weight, coins) for each chest W (int): Maximum weight that Sarah can carry Returns: int: Maximum number of coins that can be carried within the weight limit dp = [0] * (W + 1) for weight, coins in chests: for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + coins) return max(dp)"},{"question":"You are given a rectangular grid of size n x m, where each cell contains a certain number of coins. You need to help a thief to collect the maximum number of coins possible under the following constraints: - The thief starts at the top-left cell (1, 1) of the grid. - The thief can only move either to the right (in the same row) or down (to the next row). Write a program to determine the maximum number of coins the thief can collect. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains m integers, where the j-th integer in the i-th line represents the number of coins in cell (i, j) (0 ≤ number of coins ≤ 100). Output a single integer — the maximum number of coins the thief can collect. Example: ``` Input: 3 4 0 3 1 1 2 0 0 4 1 5 3 1 Output: 12 ``` Explanation: The thief can follow the path 0 → 3 → 1 → 1 → 4 → 3, collecting a total of 12 coins.","solution":"def max_coins(n, m, grid): # Create a 2D dp array filled with 0s dp = [[0 for _ in range(m)] for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill in the values for the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the values for the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The maximum coins will be in the bottom-right corner of the dp table return dp[-1][-1] # Example usage if __name__ == \\"__main__\\": n, m = 3, 4 grid = [ [0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1] ] print(max_coins(n, m, grid)) # Output: 12"},{"question":"Ali is an avid gardener and owns a rectangular garden with dimensions m by n. He wants to plant some trees in the garden such that no two trees are planted in the same row or the same column. Ali also has a restriction that no tree can be planted on an already occupied cell pre-determined by his previous gardening plans. Given the garden\'s dimensions and the positions of the occupied cells, determine the maximum number of trees Ali can plant in his garden under the given constraints. The first line of the input contains two integers m and n (1 ≤ m, n ≤ 1000) representing the dimensions of the garden. The second line contains an integer k (0 ≤ k ≤ 100000) — the number of occupied cells. The next k lines contain pairs of integers (x, y) (1 ≤ x ≤ m, 1 ≤ y ≤ n) representing the positions of the occupied cells. It is guaranteed that all these positions are distinct. Output a single integer — the maximum number of trees Ali can plant in the garden. Example: Input 5 5 3 1 2 2 3 4 4 Output 4 Explanation: - The dimensions of the garden are 5x5. - There are three occupied cells at positions (1, 2), (2, 3), and (4, 4). - Possible tree placements are at maximum 4 positions like (1, 1), (2, 4), (3, 3), and (5, 5) with no two trees in the same row or column.","solution":"def max_trees(m, n, k, occupied_positions): Returns the maximum number of trees that can be planted. m - number of rows n - number of columns k - number of occupied cells occupied_positions - list of tuples representing occupied cells, e.g., [(1, 2), (2, 3), (4, 4)] # Create sets to keep track of occupied rows and columns occupied_rows = set() occupied_columns = set() # Fill the sets with the occupied positions for position in occupied_positions: occupied_rows.add(position[0]) occupied_columns.add(position[1]) # Available rows and columns available_rows = m - len(occupied_rows) available_columns = n - len(occupied_columns) # The maximum number of trees is the minimum of available rows and columns return min(available_rows, available_columns)"},{"question":"Dan is participating in a treasure hunt consisting of multiple puzzles. One of the puzzles requires him to solve a mathematical challenge with arrays. You need to help Dan solve this puzzle. Given an array `a` of length `n`, you can perform the following operation any number of times (including zero times): 1. Choose any two distinct elements `a[i]` and `a[j]` from the array. 2. Replace both elements with their sum. Your task is to determine the maximum possible sum of the elements in the array that are even after performing the described operation any number of times. You will answer `t` independent queries. The first line contains one integer `t` (1 le t le 1000) — the number of queries. The first line of each query contains one integer `n` (1 le n le 100). The second line of each query contains `n` integers `a_1, a_2, dots, a_n` (1 le a_i le 10^9). For each query, print one integer in a single line — the maximum possible sum of the even elements in the array after performing the described operation any number of times. For example, given the query with array `[2, 3, 4, 5]`, you can perform the following sequence of operations to obtain the sum of even elements: - `[2, 3, 4, 5] -> [2, 7, 4] -> [2, 11] -> [13]` (here all the sums are ultimately odd) - Here, you need another approach to maximize even sums.","solution":"def max_even_sum(t, queries): results = [] for query in queries: n, a = query even_sum = sum(x for x in a if x % 2 == 0) results.append(even_sum) return results"},{"question":"You are working on a letter sorting system for a post office. The system receives a list of letter addresses, each represented by a string. Your task is to sort these addresses in lexicographical order, but with a twist: the address strings might contain numeric characters which should be sorted based on their numeric value. For instance, the string \\"123mainstreet\\" should appear before \\"45parkavenue\\" because 123 < 45. You are given a list of `t` test cases. Each test case consists of a single integer `n` (1 ≤ n ≤ 1000) followed by `n` strings. Each string consists of alphanumeric characters (both digits and letters) and has a length of 1 to 100. Your task is to return the sorted list of strings for each test case. Input Format - The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. - For each test case: - The first line contains an integer `n` — the number of strings. - The next `n` lines contain one string each. Output Format For each test case, output the sorted list of strings, one per line. Example Input: ``` 2 3 apple123 banana45 cherry78 2 9apples 8bananas ``` Output: ``` banana45 cherry78 apple123 8bananas 9apples ``` Note: In the output, each test case result should be separated by a blank line.","solution":"import re def sort_addresses(test_cases): def extract_number(s): match = re.search(r\'d+\', s) return int(match.group()) if match else float(\'inf\') results = [] for n, addresses in test_cases: sorted_addresses = sorted(addresses, key=lambda addr: (extract_number(addr), addr)) results.append(sorted_addresses) return results def get_sorted_addresses(input_text): lines = input_text.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) addresses = [] for i in range(1, n+1): addresses.append(lines[index + i]) test_cases.append((n, addresses)) index += n + 1 return sort_addresses(test_cases) def format_result(results): return \\"nn\\".join(\\"n\\".join(case) for case in results)"},{"question":"You are given a list of n integers where each integer denotes the height of a guest. The guests stand in a line, and you are required to find the length of the longest subsequence where the heights are strictly increasing. A subsequence is derived from the list by deleting some or no elements of the list while preserving the order of the remaining elements. The first line of input contains a single integer n (1 ≤ n ≤ 10^5), the number of guests. The second line of input contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), where hi represents the height of the ith guest. Output should be a single integer representing the length of the longest strictly increasing subsequence of heights. Example: Input: 7 10 22 9 33 21 50 41 Output: 4 Explanation: One of the longest strictly increasing subsequences is [10, 22, 33, 50], so the output is 4.","solution":"def longest_increasing_subsequence(heights): Returns the length of the longest strictly increasing subsequence of heights. if not heights: return 0 n = len(heights) dp = [1] * n for i in range(1, n): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given an array of integers and an integer k. Your task is to determine if the array can be partitioned into k contiguous subarrays such that the sum of the elements in each subarray is equal. The first line of input contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n) – the number of elements in the array and the number of subarrays, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) – the elements of the array. Output \\"YES\\" if the array can be partitioned into k contiguous subarrays with equal sums. Otherwise, output \\"NO\\". For each test case print one line – \\"YES\\" or \\"NO\\". Example: Input: 5 3 1 2 3 0 3 Output: YES Input: 5 2 1 2 3 4 5 Output: NO Explanation: In the first example, the array can be partitioned into [1, 2], [3], and [0, 3] with sums equal to 3. In the second example, it\'s impossible to partition the array into 2 contiguous subarrays with equal sums.","solution":"def can_partition_with_equal_sum(n, k, array): total_sum = sum(array) if total_sum % k != 0: return \\"NO\\" target_sum = total_sum // k current_sum = 0 count_partitions = 0 for num in array: current_sum += num if current_sum == target_sum: current_sum = 0 count_partitions += 1 return \\"YES\\" if count_partitions == k else \\"NO\\""},{"question":"In a certain land, there is a kingdom ruled by King Geoffrey. The kingdom is divided into n territories connected by m bidirectional roads. Each road connects exactly two different territories. Unfortunately, due to the rise of bandits, each road has a certain risk factor associated with traveling through it. King Geoffrey wants to build a special patrol unit that will be able to travel between all territories with the lowest overall risk. Your task is to determine the minimum total risk factor required to connect all territories in the kingdom. Each territory is uniquely identified by an integer from 1 to n. The input consists of the following: - The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of territories and the number of roads, respectively. - Each of the following m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — the identifiers of the two territories connected by the road and the risk factor of that road, respectively. Output one integer — the minimum total risk factor required to connect all territories. # Example **Input:** ``` 4 5 1 2 3 1 3 1 2 3 3 2 4 6 3 4 5 ``` **Output:** ``` 9 ``` # Explanation In the example, the roads with the lowest total risk factors connecting all territories are (1-3), (1-2), and (3-4). The total risk is 1 (between 1 and 3) + 3 (between 1 and 2) + 5 (between 3 and 4) = 9.","solution":"def kruskal_minimum_risk(n, roads): Kruskal\'s algorithm to find the minimum spanning tree\'s total risk factor. # Sort the roads by their risk factor (weight) roads.sort(key=lambda x: x[2]) # Helper function to find the parent of a node with path compression def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] # Helper function to union two subsets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Initialize parent and rank arrays parent = [i for i in range(n)] rank = [0] * n # Minimum total risk factor min_risk = 0 # Process each road for u, v, w in roads: u -= 1 v -= 1 root_u = find(parent, u) root_v = find(parent, v) # If u and v are not in the same subset, include this edge if root_u != root_v: min_risk += w union(parent, rank, root_u, root_v) return min_risk def minimum_total_risk(n, m, roads): return kruskal_minimum_risk(n, roads)"},{"question":"You are given a list of n non-negative integers representing the strengths of soldiers in an army. Two generals are dividing the soldiers into two separate groups for a battle exercise. The first general selects soldiers starting from the left until the combined strength of his selected soldiers is greater than or equal to half of the total strength of all soldiers. The second general then takes the remaining soldiers. Your task is to determine how many soldiers each general will command after the division and find out the combined strength of each group. The first line of input contains a single integer n (1 <= n <= 100,000), representing the number of soldiers. The second line contains n non-negative integers s1, s2, ..., sn (0 <= si <= 1000), representing the strengths of the soldiers. Output two lines. The first line should contain two integers, the number of soldiers under the first general\'s command and their combined strength. The second line should contain two integers, the number of soldiers under the second general\'s command and their combined strength. Example input: 6 1 2 4 5 8 3 Example output: 4 12 2 11 Explanation: The total strength of all soldiers is 23. Half of the total strength is 11.5. The first general selects the first 4 soldiers with strengths [1, 2, 4, 5], which sum up to 12, which is greater than 11.5. The remaining soldiers are [8, 3], with a total strength of 11. Thus, the first general commands 4 soldiers with a combined strength of 12, and the second general commands 2 soldiers with a combined strength of 11.","solution":"def divide_soldiers(n, strengths): Divides the soldiers between the two generals based on their combined strengths. Args: n (int): Number of soldiers. strengths (list): List of integers representing the strengths of the soldiers. Returns: tuple: A tuple containing two tuples. The first tuple contains the number of soldiers and combined strength for the first general, and the second tuple contains the number of soldiers and combined strength for the second general. total_strength = sum(strengths) half_strength = total_strength / 2 first_general_strength = 0 first_general_soldiers = 0 # First general selects soldiers until his combined strength is >= half of the total strength. for i in range(n): first_general_strength += strengths[i] first_general_soldiers += 1 if first_general_strength >= half_strength: break second_general_soldiers = n - first_general_soldiers second_general_strength = total_strength - first_general_strength return (first_general_soldiers, first_general_strength), (second_general_soldiers, second_general_strength)"},{"question":"A company is planning a big relay race event for its employees. Each participant in the relay race has different levels of stamina and speed. The company\'s aim is to form two teams, such that one team runs during the daytime and the other team runs at nighttime. They want to maximize the total performance of the teams, where the performance of a team is defined as the sum of the speeds of its members divided by the sum of their stamina (speed per stamina ratio). Write a program to determine the optimal distribution of participants into two teams to maximize the total performance of both teams. The first line contains three positive integers n, d, and k (2 ≤ n ≤ 2000, d + k ≤ n) — the number of participants, the size of the daytime team, and the size of the nighttime team. The second line contains n positive integers s1, s2, ..., sn (1 ≤ si ≤ 1000), where si is the speed of the i-th participant. The third line contains n positive integers t1, t2, ..., tn (1 ≤ ti ≤ 1000), where ti is the stamina of the i-th participant. Print two lines. On the first line, print the maximum total performance of the two teams. On the second line, print k numbers — the indices of the nighttime team. On the third line, print d numbers — the indices of the daytime team. The participants are numbered from 1 to n as they are given in the input. All numbers printed in the second and third lines should be distinct and can be printed in any order. If there are multiple solutions, print any of them.","solution":"def get_max_performance(n, d, k, speeds, stamina): participants = [(speeds[i], stamina[i], i + 1) for i in range(n)] participants.sort(key=lambda x: x[0] / x[1], reverse=True) daytime_team = participants[:d] nighttime_team = participants[d:d + k] daytime_performance = sum([x[0] for x in daytime_team]) / sum([x[1] for x in daytime_team]) nighttime_performance = sum([x[0] for x in nighttime_team]) / sum([x[1] for x in nighttime_team]) total_performance = daytime_performance + nighttime_performance daytime_indices = [x[2] for x in daytime_team] nighttime_indices = [x[2] for x in nighttime_team] return total_performance, nighttime_indices, daytime_indices"},{"question":"A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Often, a one-word character string is referred to as a palindrome. You are given a string of lowercase Latin letters. Your task is to determine whether it is possible to make this string a palindrome by rearranging its letters. # Input: - The input consists of a single string of lowercase Latin letters (1 ≤ length ≤ 1000). # Output: - Output \\"YES\\" if it is possible to rearrange the letters of the string to form a palindrome; otherwise, output \\"NO\\". # Example: Input ``` aabb ``` Output ``` YES ``` Input ``` abc ``` Output ``` NO ```","solution":"def can_form_palindrome(s): Returns \'YES\' if it is possible to rearrange the letters of the string `s` to form a palindrome, otherwise \'NO\'. from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd frequency if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Anna has a string consisting of lowercase English letters. She can perform the following operation any number of times: select a non-empty substring where all characters are the same and remove it from the string. The goal is to make the string as short as possible. For example, if Anna has the string `aabbcc`, she can select the substrings `aa`, `bb`, and `cc` and remove them, resulting in an empty string. Given a string `s`, determine the length of the final string after Anna performs the described operation any number of times. The first line of input contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 100) consisting of lowercase English letters. Print `t` lines, each containing a single integer - the length of the final string for each respective test case. Example: Input: 3 aabbcc abcddcba aaaaaaa Output: 0 0 0","solution":"def final_string_length_after_removals(t, test_cases): results = [] for s in test_cases: # If all characters in `s` can be removed # by removing all consecutive occurrences of same character, # then the shortest possible length is 0. results.append(0) return results"},{"question":"A company hosts a yearly hackathon, and participants are grouped into teams of various sizes. Each team must submit exactly one project, but participants can engage in more than one project. Once a project is submitted, it undergoes judging, which provides a score that reflects the project\'s innovation and impact. Your task is to determine the maximum score that any single participant can be credited for, based on their project involvements. You are given the number of participants, the number of projects, and the involvement details along with their scores. The involvement details are specified with the participant IDs and the project IDs they are involved in, along with the respective project score. Write an algorithm that computes the highest score any single participant can hold, considering all their project submissions. Input: - The first line contains two integers `n` and `m` (1 ≤ n ≤ 5000, 1 ≤ m ≤ 5000), where `n` is the number of participants and `m` is the number of projects. - The next `m` lines describe the projects. Each line begins with a positive integer `k` (1 ≤ k ≤ n) representing the number of participants in the project, followed by `k` space-separated integers representing the participant IDs involved (1 ≤ participant ID ≤ n), and a single integer `s` (1 ≤ s ≤ 10^9) representing the score of the project. Output: - A single integer representing the maximum score credited to any single participant. Example: Input: ``` 4 3 2 1 2 50 3 1 3 4 60 1 2 30 ``` Output: ``` 90 ``` Explanation: - Participant 1 is involved in projects with scores 50 and 60, so their maximum score is 50 + 60 = 110. - Participant 2 is involved in projects with scores 50 and 30, so their maximum score is 50 + 30 = 80. - Participant 3 is involved in a project with score 60, so their maximum score is 60. - Participant 4 is involved in a project with score 60, so their maximum score is 60. - Therefore, the maximum score credited to any single participant is 110.","solution":"def max_credit_score(n, m, projects): Calculate the maximum score credited to any participant. Args: n (int): Number of participants m (int): Number of projects projects (list): List of projects, each project is represented as a list where the first element is the number of participants, followed by participant IDs, and the last element is the score. Returns: int: The maximum score credited to any participant. scores = [0] * (n + 1) for project in projects: participants = project[1:-1] score = project[-1] for participant in participants: scores[participant] += score return max(scores)"},{"question":"Flora loves patterns and sequences, and she has a beautiful collection of stones arranged in a pattern. Each stone has a unique beauty value associated with it. The stones are placed in a line and Flora likes to admire different subsequences of stones. Given an array of integers where each integer represents the beauty value of a stone, Flora wants to know the length of the longest increasing subsequence she can find within that array. An increasing subsequence is a sequence of integers where each element is greater than the previous one. The first line contains an integer n (1 ≤ n ≤ 2000) — the number of stones. The second line contains n space-separated integers `a1, a2, ..., an` where `ai` (0 ≤ ai ≤ 10000) represents the beauty value of the i-th stone. Output a single integer — the length of the longest increasing subsequence of the given array. Consider the first sample. The longest increasing subsequence can be [1, 2, 4, 6], which has a length of 4. Sample Input 1: 6 5 1 4 2 3 6 Sample Output 1: 4 Consider the second sample. The longest increasing subsequence can be [1, 3, 5], which has a length of 3. Sample Input 2: 5 5 1 3 2 5 Sample Output 2: 3 Consider the third sample. The entire sequence is already increasing, so the longest increasing subsequence is the sequence itself. Sample Input 3: 4 2 4 6 8 Sample Output 3: 4","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize LIS array with 1s for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"Given a grid of size ( n times n ), you have to perform ( q ) queries. Each query is described as two integers ( rc ) and ( c ), where ( rc ) can be either 1 or 2, and ( c ) is an integer from 1 to ( n ). - If ( rc ) is 1, it indicates a row ( c ). You have to reverse the elements of this row. - If ( rc ) is 2, it indicates a column ( c ). You have to reverse the elements of this column. Initially, all elements of the grid are zeros. After performing all queries, output the final state of the grid. # Input - The first line contains two integers ( n ) and ( q ) (( 1 leq n, q leq 1000 )). - Each of the next ( q ) lines contains two integers ( rc ) and ( c ) (( 1 leq rc leq 2 ) and ( 1 leq c leq n )). # Output - Output the final state of the grid. Each of the ( n ) lines should contain ( n ) integers. # Example Input ``` 3 4 1 2 2 3 1 2 2 3 ``` Output ``` 0 0 0 0 0 0 0 0 0 ``` (Note: Depending on the operations, intermediate steps could result in different results, so the output provided here is an example, you need to determine the logic based on the input operations and reversals.) In this example, the grid undergoes the following transformations: 1. Reverse row 2 2. Reverse column 3 3. Reverse row 2 again (reverts it to the initial state) 4. Reverse column 3 again (reverts it to the initial state)","solution":"def reverse_row(grid, row_idx): grid[row_idx] = grid[row_idx][::-1] def reverse_column(grid, col_idx): n = len(grid) for i in range(n // 2): grid[i][col_idx], grid[n-i-1][col_idx] = grid[n-i-1][col_idx], grid[i][col_idx] def perform_operations(n, queries): # Initialize the grid with all zeros grid = [[0] * n for _ in range(n)] for rc, c in queries: if rc == 1: reverse_row(grid, c-1) elif rc == 2: reverse_column(grid, c-1) return grid"},{"question":"You are given an array of integers with length n, where some elements might be repeated. You need to determine if it is possible to split the array into two non-empty parts such that each part contains at least one pair of equal integers. The first line of input contains an integer n (2 leq n leq 300,000) — the length of the array. The second line contains n space-separated integers, a_1, a_2, ldots, a_n, where 1 leq a_i leq 10^9. Output \\"YES\\" if it is possible to split the array into two non-empty parts such that each part contains at least one pair of equal integers. Otherwise, print \\"NO\\". You can print each letter in any case (upper or lower). In the first example, you can split the array into parts [1, 2, 1, 3] and [2, 3], both containing at least one pair of equal integers: [1, 2, 1, 3] contains the pair (1, 1) and [2, 3] contains the pair (2, 2). In the second example, it is impossible to split the array into two parts meeting the conditions because there are no repeated elements. In the third example, you can split the array into parts [4, 5, 4, 5] and [4, 5], where both parts contain pairs of equal integers: [4, 5, 4, 5] contains the pairs (4, 4) and (5, 5), and [4, 5] contains the pair (5, 5).","solution":"def can_split_with_pairs(arr): Checks if the array can be split into two non-empty parts such that each part contains at least one pair of equal integers. from collections import Counter # Count the occurrences of each number. count = Counter(arr) # Check if there are at least two different numbers having at least 2 occurrences. pair_count = 0 for cnt in count.values(): if cnt >= 2: pair_count += 1 if pair_count >= 2: return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of n strings, s1, s2, ..., sn, where each string is formed by lowercase English letters only. Your task is to find the longest common subsequence (LCS) among all the given strings. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. # Input: - The first line contains an integer n (2 ≤ n ≤ 20) - the number of strings. - The next n lines each contain a string si (1 ≤ |si| ≤ 100) - the strings you need to analyze. # Output: - If there exists a common subsequence that is non-empty, print its length. Otherwise, print 0. # Example: Input 1: ``` 3 abcde acxde fabcg ``` Output 1: ``` 2 ``` Input 2: ``` 2 abcdef ghijkl ``` Output 2: ``` 0 ``` # Explanation: - In the first example, the longest common subsequence is \\"ab\\" or \\"ac\\", both of length 2. - In the second example, there is no common subsequence among the given strings, so the output is 0. Implement your solution to find the length of the longest common subsequence among all input strings.","solution":"def longest_common_subsequence(n, strings): from functools import lru_cache if n == 0: return 0 # Function to find LCS of two strings @lru_cache(None) def lcs(x, y): m, n = len(x), len(y) dp = [[0] * (n + 1) for i in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif x[i - 1] == y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] # Function to find LCS of multiple strings def lcs_multiple_strings(strings): common_subseq = strings[0] for i in range(1, n): length_lcs = lcs(common_subseq, strings[i]) common_subseq = lcs_reconstruct(common_subseq, strings[i])[:length_lcs] return len(common_subseq) # Function to reconstruct LCS of two strings def lcs_reconstruct(s1, s2): result = [] m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) i, j = m, n while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: result.append(s1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return \'\'.join(reversed(result)) return lcs_multiple_strings(strings)"},{"question":"A logistics company is planning to set up a warehouse system where multiple warehouses can service orders for multiple delivery zones. The company\'s warehouse network is represented as a collection of nodes, where each node represents a warehouse, and edges represent direct delivery routes between warehouses. Each warehouse has a capacity indicating the maximum number of orders it can handle per day. Some warehouses have direct routes to delivery zones which are represented by additional nodes connected to the network. Given the current setup, the logistics company wants to know the maximum number of orders that can be serviced in a single day. You are given the following: - An integer n representing the number of warehouses and delivery zones combined (1 ≤ n ≤ 2000). - An integer m representing the number of direct delivery routes between warehouses and to delivery zones (1 ≤ m ≤ 5000). - An integer k representing the number of orders to be serviced (1 ≤ k ≤ 10^9) - An array capacities of size n where capacities[i] represents the maximum number of orders warehouse or delivery zone i (0 ≤ i ≤ n-1) can handle per day. - m pairs of integers u and v indicating that there is a direct route between warehouses or from a warehouse to a delivery zone. Find the maximum number of orders that can be serviced in one day while respecting the capacity limits. Input format: - The first line contains three integers: n, m, and k. - The second line contains n integers: capacities[0], capacities[1], ..., capacities[n-1]. - The next m lines each contain two integers u and v, representing a direct route between nodes u and v. Output format: - Print a single integer representing the maximum number of orders that can be serviced in one day considering the capacity constraints. Example: Input: 6 7 20 3 2 2 5 1 3 0 1 0 2 1 3 2 3 3 4 3 5 4 5 Output: 16 Explanation: The warehouse network can service a maximum of 16 orders with the given capacities: - Warehouse 0 sends 3 orders to warehouse 1. - Warehouse 1 sends 2 orders to warehouse 3. - Warehouse 2 sends 2 orders to warehouse 3. - Warehouse 3 sends 5 orders to warehouse 4 and 3 orders to warehouse 5. - Warehouse 4 sends 1 order to warehouse 5.","solution":"def max_serviced_orders(n, m, k, capacities, routes): Determines the maximum number of orders that can be serviced in a single day considering the capacity constraints. Args: n: int - number of warehouses and delivery zones combined m: int - number of direct delivery routes k: int - number of orders to be serviced capacities: List[int] - list of capacities of warehouses and delivery zones routes: List[Tuple[int, int]] - list of direct routes between nodes Returns: int - maximum number of orders that can be serviced # Since every node has a capacity, the maximum number of orders # that can be handled by any network is the sum of all capacities. max_possible_orders = sum(capacities) # The number of orders that can actually be serviced is the minimum of # the desired orders (k) and the maximum possible orders given the capacities. return min(k, max_possible_orders)"}]'),S={name:"App",components:{PoemCard:j},data(){return{searchQuery:"",visibleCount:4,poemsData:Y,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},A={class:"search-container"},z={class:"card-container"},F={key:0,class:"empty-state"},N=["disabled"],R={key:0},P={key:1};function C(s,e,h,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",A,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",z,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+u(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",R,"See more"))],8,N)):l("",!0)])}const D=d(S,[["render",C],["__scopeId","data-v-f4003176"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/38.md","filePath":"deepseek/38.md"}'),L={name:"deepseek/38.md"},B=Object.assign(L,{setup(s){return(e,h)=>(n(),i("div",null,[x(D)]))}});export{M as __pageData,B as default};
